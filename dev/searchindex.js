Search.setIndex({"docnames": ["about", "authors", "authors_emeritus", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/sg_execution_times", "auto_examples/applications/svm_gui", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/bicluster/sg_execution_times", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/calibration/sg_execution_times", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/classification/sg_execution_times", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/cluster/sg_execution_times", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/compose/sg_execution_times", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/covariance/sg_execution_times", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/cross_decomposition/sg_execution_times", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/datasets/sg_execution_times", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_beta_divergence", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_3d", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/decomposition/sg_execution_times", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_hastie_10_2", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/ensemble/sg_execution_times", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_cv_digits", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/exercises/sg_execution_times", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/feature_selection/sg_execution_times", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/gaussian_process/sg_execution_times", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/impute/sg_execution_times", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/inspection/sg_execution_times", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/kernel_approximation/sg_execution_times", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/linear_model/sg_execution_times", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/manifold/sg_execution_times", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/miscellaneous/sg_execution_times", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/mixture/sg_execution_times", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/model_selection/sg_execution_times", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/multioutput/sg_execution_times", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neighbors/sg_execution_times", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/neural_networks/sg_execution_times", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/sg_execution_times", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/sg_execution_times", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/semi_supervised/sg_execution_times", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_nonlinear", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/svm/sg_execution_times", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/text/sg_execution_times", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "auto_examples/tree/sg_execution_times", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contents", "contributor_experience_team", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "faq", "getting_started", "glossary", "governance", "inspection", "install", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classes", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_hist_gradient_boosting", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.metaestimators.if_delegate_has_method", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "preface", "presentations", "related_projects", "roadmap", "supervised_learning", "support", "testimonials/testimonials", "tune_toc", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3"], "filenames": ["about.rst", "authors.rst", "authors_emeritus.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/applications/svm_gui.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/bicluster/sg_execution_times.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/classification/sg_execution_times.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/cluster/sg_execution_times.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/compose/sg_execution_times.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/covariance/sg_execution_times.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/cross_decomposition/sg_execution_times.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/datasets/sg_execution_times.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_beta_divergence.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_3d.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/decomposition/sg_execution_times.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_hastie_10_2.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/ensemble/sg_execution_times.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_cv_digits.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/exercises/sg_execution_times.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/gaussian_process/sg_execution_times.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/impute/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/inspection/sg_execution_times.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/kernel_approximation/sg_execution_times.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/linear_model/sg_execution_times.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/manifold/sg_execution_times.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/miscellaneous/sg_execution_times.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/mixture/sg_execution_times.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/model_selection/sg_execution_times.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/multioutput/sg_execution_times.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neighbors/sg_execution_times.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/neural_networks/sg_execution_times.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/sg_execution_times.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/sg_execution_times.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/semi_supervised/sg_execution_times.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_nonlinear.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/svm/sg_execution_times.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/text/sg_execution_times.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "auto_examples/tree/sg_execution_times.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contents.rst", "contributor_experience_team.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "inspection.rst", "install.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classes.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_hist_gradient_boosting.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.metaestimators.if_delegate_has_method.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "preface.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tune_toc.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst"], "titles": ["About us", "&lt;no title&gt;", "&lt;no title&gt;", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Computation times", "Libsvm GUI", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Computation times", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Computation times", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Computation times", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Computation times", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Computation times", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Computation times", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Computation times", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Computation times", "Decomposition", "Beta-divergence loss functions", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "Principal components analysis (PCA)", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Computation times", "Ensemble methods", "Discrete versus Real AdaBoost", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping of Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Computation times", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Cross-validation on Digits Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Computation times", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Computation times", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Gaussian process regression (GPR) on Mauna Loa CO2 data", "Gaussian process regression (GPR) with noise-level estimation", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Computation times", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Computation times", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Computation times", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Computation times", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "Lasso and Elastic Net for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Plot Ridge coefficients as a function of the L2 regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Computation times", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Computation times", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Computation times", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Computation times", "Model Selection", "Confusion matrix", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Computation times", "Multioutput methods", "Classifier Chain", "Computation times", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Computation times", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Computation times", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Computation times", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Computation times", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Computation times", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "SVM-Kernels", "SVM Margins Example", "Non-linear SVM", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Computation times", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Computation times", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "Computation times", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "Table Of Contents", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "API Reference", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensemble methods", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.fastica", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.oas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BaseEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BiclusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassNamePrefixFeaturesOutMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassifierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.DensityMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OneToOneFeatureMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.RegressorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.TransformerMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.clone", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibratedClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibrationDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.calibration_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AffinityPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AgglomerativeClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.Birch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.BisectingKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.DBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.FeatureAgglomeration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.KMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MeanShift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MiniBatchKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.OPTICS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralBiclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralCoclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.affinity_propagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_xi", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.compute_optics_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.estimate_bandwidth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.k_means", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.kmeans_plusplus", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.mean_shift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.spectral_clustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.ward_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.ColumnTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.TransformedTargetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_selector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_transformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.config_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EllipticEnvelope", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.MinCovDet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.empirical_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.graphical_lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf_shrinkage", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.shrunk_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.CCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSCanonical", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.clear_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.dump_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups_vectorized", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_california_housing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_covtype", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_kddcup99", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_pairs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_people", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_olivetti_faces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_openml", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_rcv1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_species_distributions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.get_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_breast_cancer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_diabetes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_digits", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_iris", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_linnerud", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_wine", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_biclusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_blobs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_checkerboard", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_circles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_gaussian_quantiles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_hastie_10_2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_low_rank_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_moons", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_multilabel_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_s_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_coded_signal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_uncorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_swiss_roll", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.DictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FactorAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FastICA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.IncrementalPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.KernelPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.LatentDirichletAllocation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchDictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchNMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchSparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.NMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparseCoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.TruncatedSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning_online", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.non_negative_factorization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.sparse_encode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.LinearDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.QuadraticDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomTreesEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.ConvergenceWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataConversionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataDimensionalityWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.EfficiencyWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.FitFailedWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.InconsistentVersionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.NotFittedError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.UndefinedMetricWarning", "sklearn.experimental.enable_halving_search_cv", "sklearn.experimental.enable_hist_gradient_boosting", "sklearn.experimental.enable_iterative_imputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.DictVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.FeatureHasher", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.PatchExtractor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.extract_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.grid_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.img_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.reconstruct_from_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.CountVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.HashingVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.GenericUnivariateSelect", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFECV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFdr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFpr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFromModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFwe", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectKBest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectPercentile", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SequentialFeatureSelector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.VarianceThreshold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.chi2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.r_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.CompoundKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ConstantKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.DotProduct", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ExpSineSquared", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Exponentiation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Hyperparameter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Matern", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.PairwiseKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Product", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RBF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RationalQuadratic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.WhiteKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.get_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.IterativeImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.KNNImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.MissingIndicator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.SimpleImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.DecisionBoundaryDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.PartialDependenceDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.partial_dependence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.permutation_importance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.IsotonicRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.check_increasing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.isotonic_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.AdditiveChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.Nystroem", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.PolynomialCountSketch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.RBFSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.SkewedChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_ridge</span></code>.KernelRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ARDRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.BayesianRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.GammaRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.HuberRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsIC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LinearRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegressionCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuitCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Perceptron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PoissonRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.QuantileRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RANSACRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Ridge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDOneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TheilSenRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TweedieRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.enet_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lasso_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ridge_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.Isomap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.LocallyLinearEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.MDS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.SpectralEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.TSNE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.locally_linear_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.smacof", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.spectral_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.trustworthiness", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ConfusionMatrixDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DetCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DistanceMetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PrecisionRecallDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PredictionErrorDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.RocCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.auc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.balanced_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.brier_score_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.calinski_harabasz_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.check_scoring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.class_likelihood_ratios", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.classification_report", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.contingency_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.pair_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.cohen_kappa_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.completeness_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.consensus_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.coverage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_absolute_error_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_pinball_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_tweedie_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.davies_bouldin_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.dcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.det_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.explained_variance_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.f1_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fbeta_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fowlkes_mallows_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer_names", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hamming_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hinge_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_completeness_v_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.jaccard_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.log_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.matthews_corrcoef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.max_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_percentage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_gamma_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_pinball_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_poisson_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_tweedie_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.median_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.multilabel_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ndcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.normalized_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.additive_chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_similarity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.distance_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.haversine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.kernel_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.laplacian_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.linear_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.nan_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.pairwise_kernels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.polynomial_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.rbf_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.sigmoid_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin_min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_chunked", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_fscore_support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.r2_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.recall_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_auc_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_samples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.top_k_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.v_measure_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.zero_one_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.BayesianGaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.GaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingGridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingRandomSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.KFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LearningCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneGroupOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePGroupsOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterGrid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.PredefinedSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RandomizedSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedStratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedGroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TimeSeriesSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.check_cv", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_validate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.learning_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.permutation_test_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.train_test_split", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.validation_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsOneClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsRestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OutputCodeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.ClassifierChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.RegressorChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.BernoulliNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.CategoricalNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.ComplementNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.GaussianNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.MultinomialNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.BallTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KDTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KernelDensity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.LocalOutlierFactor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestCentroid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestNeighbors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NeighborhoodComponentsAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.kneighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.radius_neighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.sort_graph_by_row_values", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.BernoulliRBM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.FeatureUnion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.Pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_union", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Binarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.FunctionTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KBinsDiscretizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KernelCenterer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MaxAbsScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MinMaxScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MultiLabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Normalizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OneHotEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OrdinalEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PolynomialFeatures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PowerTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.QuantileTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.RobustScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.SplineTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.StandardScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.add_dummy_feature", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.label_binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.maxabs_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.minmax_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.power_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.quantile_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.robust_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.GaussianRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.SparseRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.johnson_lindenstrauss_min_dim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelSpreading", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.SelfTrainingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.set_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.show_versions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.l1_min_c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_graphviz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_text", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.plot_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.Bunch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>._safe_indexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.arrayfuncs</span></code>.min_pos", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.as_float_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.assert_all_finite", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_X_y", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_consistent_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_scalar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_class_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_sample_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.deprecated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_estimators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.check_estimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.parametrize_with_checks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.estimator_html_repr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.fast_logdet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_range_finder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_svd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.safe_sparse_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.weighted_mode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_batches", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_even_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.graph</span></code>.single_source_shortest_path_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.indexable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.available_if", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.if_delegate_has_method", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.is_multilabel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.type_of_target", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.unique_labels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.murmurhash3_32", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.Parallel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.delayed", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.random</span></code>.sample_without_replacement", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.register_parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.resample", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_mask", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_sqr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.shuffle", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.incr_mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_csr_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_row_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_column", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_row", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_is_fitted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_memory", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.column_or_1d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.4. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.3. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "Welcome to scikit-learn", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Who is using scikit-learn?", "&lt;no title&gt;", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User guide: contents", "Available documentation for Scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Version 0.12.1", "Version 0.13.1", "Version 0.14", "Version 0.15.2", "Version 0.16.1", "Version 0.17.1", "Version 0.18.2", "Version 0.19.2", "Version 0.20.4", "Version 0.21.3", "Version 0.22.2.post1", "Version 0.23.2", "Version 0.24.2", "Version 1.0.2", "Version 1.1.3", "Version 1.2.2", "Version 1.3.0"], "terms": {"thi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 351, 355, 356, 357, 360, 361, 362, 363, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 412, 413, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 462, 463, 464, 465, 467, 469, 470, 473, 476, 477, 478, 479, 481, 482, 483, 485, 488, 489, 495, 496, 497, 498, 499, 500, 501, 503, 504, 506, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 680, 681, 682, 683, 684, 685, 687, 688, 690, 693, 694, 695, 697, 698, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 712, 716, 717, 718, 719, 720, 721, 722, 723, 728, 734, 735, 736, 737, 738, 739, 741, 742, 743, 745, 748, 749, 754, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 898, 899, 904, 905, 907, 909, 910, 915, 917, 922, 923, 925, 928, 929, 930, 932, 933, 936, 937, 946, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 985, 986, 988, 991, 992, 993, 994, 995, 996, 997, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "wa": [0, 4, 8, 13, 16, 40, 69, 70, 79, 85, 91, 126, 129, 158, 167, 173, 222, 248, 251, 253, 255, 257, 263, 264, 295, 304, 307, 308, 312, 317, 318, 340, 342, 349, 351, 355, 363, 365, 366, 368, 371, 372, 380, 383, 386, 388, 389, 392, 395, 396, 400, 404, 421, 422, 426, 430, 434, 437, 440, 449, 454, 495, 503, 515, 516, 518, 520, 533, 534, 535, 536, 537, 538, 539, 540, 544, 545, 547, 548, 549, 550, 566, 567, 569, 571, 572, 583, 608, 611, 622, 631, 632, 635, 636, 637, 639, 645, 646, 657, 666, 667, 748, 775, 776, 777, 780, 781, 791, 802, 804, 816, 826, 852, 853, 871, 875, 881, 882, 884, 886, 887, 888, 889, 909, 910, 929, 950, 951, 952, 961, 962, 965, 968, 972, 975, 978, 982, 988, 996, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "start": [0, 4, 7, 10, 12, 26, 53, 57, 63, 66, 73, 85, 98, 109, 115, 120, 122, 143, 146, 154, 156, 168, 173, 177, 178, 186, 197, 198, 199, 205, 215, 218, 222, 231, 245, 257, 265, 277, 311, 316, 340, 349, 351, 355, 356, 357, 358, 361, 368, 369, 371, 372, 373, 378, 380, 383, 389, 392, 396, 397, 401, 402, 404, 421, 423, 430, 434, 436, 513, 518, 591, 598, 613, 626, 634, 640, 647, 649, 657, 658, 659, 671, 675, 761, 762, 775, 776, 777, 780, 781, 791, 821, 822, 823, 825, 827, 835, 920, 946, 951, 958, 961, 966, 967, 976, 983, 986, 988, 996, 997, 1007, 1009, 1012, 1014, 1016, 1017, 1018, 1019, 1020], "2007": [0, 38, 185, 363, 392, 401, 421, 432, 434, 440, 442, 546, 637, 672, 698, 714, 717, 738, 739, 773, 954, 958, 960, 962], "googl": [0, 17, 378, 392, 423, 981, 993, 1004], "summer": [0, 4, 48, 1004], "codedavid": [0, 2, 37, 56, 80, 176, 199, 258, 260, 304, 340, 341, 342, 363, 392, 399, 402, 442, 512, 516, 547, 548, 603, 604, 609, 705, 775, 875, 952, 958, 966, 975, 986, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "cournapeau": [0, 2, 1004, 1007], "later": [0, 11, 53, 115, 123, 149, 168, 173, 176, 290, 342, 351, 373, 378, 379, 383, 386, 825, 848, 849, 857, 859, 972, 992, 997, 1007, 1010, 1012, 1016], "year": [0, 4, 132, 146, 154, 166, 167, 168, 197, 198, 215, 365, 367, 378, 396, 400, 402, 779, 784, 786, 858, 958, 962, 983, 986, 995], "matthieu": [0, 2, 1004, 1008, 1019], "brucher": [0, 2, 1004], "work": [0, 4, 9, 17, 32, 44, 45, 48, 52, 66, 77, 113, 119, 132, 146, 155, 156, 166, 167, 168, 186, 214, 242, 244, 255, 283, 284, 308, 310, 311, 329, 341, 342, 351, 356, 357, 358, 362, 363, 366, 368, 369, 370, 371, 372, 373, 375, 379, 380, 381, 383, 388, 389, 390, 392, 393, 394, 397, 399, 400, 401, 404, 405, 406, 407, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 440, 445, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 462, 463, 464, 465, 488, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 676, 689, 722, 754, 758, 759, 760, 761, 768, 775, 776, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 866, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 915, 919, 951, 952, 954, 956, 957, 958, 959, 961, 962, 964, 965, 968, 969, 972, 975, 976, 982, 983, 986, 988, 989, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "part": [0, 31, 36, 60, 67, 70, 81, 113, 118, 122, 127, 135, 136, 137, 138, 143, 154, 164, 176, 245, 252, 254, 271, 293, 301, 304, 342, 357, 363, 365, 368, 369, 373, 375, 379, 380, 383, 392, 396, 397, 399, 400, 402, 429, 473, 474, 475, 501, 511, 517, 522, 554, 565, 566, 567, 594, 606, 771, 844, 861, 863, 864, 865, 866, 867, 868, 869, 951, 952, 954, 959, 963, 981, 982, 983, 984, 986, 990, 997, 999, 1004, 1012, 1013, 1015, 1017, 1019], "hi": [0, 393, 962, 997], "thesi": [0, 365, 392, 399], "In": [0, 4, 5, 7, 9, 11, 12, 13, 14, 25, 26, 27, 37, 39, 48, 49, 53, 56, 57, 59, 65, 66, 70, 71, 73, 74, 77, 79, 80, 81, 85, 88, 95, 97, 100, 103, 104, 109, 113, 115, 116, 117, 118, 119, 122, 124, 125, 126, 127, 129, 132, 142, 143, 145, 146, 149, 153, 154, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 185, 186, 188, 192, 197, 198, 199, 200, 201, 202, 205, 214, 215, 226, 227, 228, 229, 231, 232, 233, 236, 237, 238, 239, 245, 247, 251, 253, 254, 255, 257, 258, 259, 260, 262, 263, 266, 267, 269, 271, 272, 275, 277, 283, 284, 286, 296, 299, 300, 301, 304, 307, 308, 309, 311, 312, 317, 319, 327, 335, 340, 341, 342, 345, 349, 351, 355, 356, 357, 361, 362, 363, 364, 366, 367, 368, 369, 371, 372, 373, 374, 375, 378, 379, 380, 381, 382, 383, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 409, 418, 421, 422, 423, 424, 425, 427, 428, 429, 432, 442, 443, 444, 449, 452, 455, 473, 476, 483, 488, 489, 491, 503, 514, 516, 518, 520, 521, 522, 524, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 569, 572, 583, 587, 590, 591, 592, 611, 613, 614, 615, 617, 624, 625, 626, 628, 629, 630, 632, 634, 636, 639, 640, 642, 644, 646, 647, 649, 650, 655, 656, 657, 660, 661, 665, 666, 667, 677, 680, 684, 693, 699, 701, 706, 708, 709, 714, 715, 718, 720, 722, 734, 736, 737, 761, 763, 765, 768, 772, 774, 775, 776, 777, 780, 781, 783, 791, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 821, 822, 823, 825, 826, 827, 829, 830, 831, 836, 844, 846, 852, 853, 857, 858, 863, 864, 866, 867, 868, 869, 870, 871, 873, 874, 875, 878, 879, 880, 883, 886, 888, 893, 897, 899, 915, 930, 951, 952, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 973, 974, 975, 976, 977, 978, 983, 985, 986, 988, 995, 996, 997, 1001, 1004, 1005, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "2010": [0, 47, 66, 78, 168, 262, 263, 389, 392, 394, 396, 397, 405, 455, 516, 685, 689, 700, 701, 720, 804, 836, 837, 954, 958, 962, 966, 976, 981, 1004], "fabian": [0, 2, 184, 202, 219, 289, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1013], "pedregosa": [0, 2, 184, 202, 219, 289, 1004, 1005, 1006, 1007, 1008, 1010], "gael": [0, 1, 12, 32, 39, 40, 46, 52, 53, 65, 66, 81, 97, 101, 186, 187, 219, 231, 244, 981, 983, 986, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "varoquaux": [0, 1, 12, 31, 32, 39, 40, 45, 46, 51, 52, 53, 65, 66, 72, 81, 88, 89, 97, 101, 102, 180, 186, 187, 194, 195, 219, 221, 229, 231, 244, 301, 331, 332, 381, 981, 986, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "alexandr": [0, 1, 2, 24, 25, 30, 42, 47, 54, 66, 95, 97, 103, 182, 184, 185, 186, 188, 190, 191, 226, 229, 263, 270, 289, 381, 986, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "gramfort": [0, 1, 24, 25, 30, 42, 47, 54, 66, 95, 97, 103, 182, 184, 185, 186, 188, 190, 191, 226, 229, 263, 270, 289, 381, 986, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "vincent": [0, 2, 47, 66, 152, 156, 986, 1004, 1006, 1008, 1009, 1011, 1014, 1019, 1020], "michel": [0, 2, 47, 66, 1004, 1006, 1007, 1009, 1011, 1018, 1019], "inria": [0, 5, 9, 30, 37, 52, 54, 56, 74, 81, 155, 176, 182, 184, 188, 190, 191, 202, 219, 220, 226, 229, 258, 260, 263, 270, 289, 304, 335, 340, 341, 342, 639, 980, 1004], "took": [0, 42, 265], "leadership": 0, "made": [0, 69, 80, 88, 100, 132, 156, 167, 168, 197, 215, 248, 261, 308, 327, 346, 355, 363, 365, 368, 371, 380, 381, 392, 400, 404, 424, 427, 429, 439, 476, 483, 569, 570, 572, 611, 612, 637, 646, 666, 667, 715, 763, 777, 780, 781, 791, 795, 796, 797, 816, 819, 820, 963, 968, 978, 982, 986, 994, 996, 1004, 1005, 1006, 1007, 1008, 1011, 1013, 1014, 1017, 1018], "first": [0, 4, 5, 7, 8, 11, 17, 25, 26, 30, 31, 32, 39, 55, 57, 60, 63, 64, 65, 66, 69, 70, 71, 74, 79, 84, 85, 88, 89, 90, 100, 104, 111, 115, 116, 117, 118, 119, 121, 123, 126, 129, 130, 131, 132, 142, 143, 146, 149, 150, 151, 154, 155, 156, 157, 162, 166, 167, 168, 170, 173, 176, 178, 180, 186, 193, 194, 195, 198, 199, 205, 206, 211, 219, 222, 230, 231, 233, 234, 236, 238, 239, 244, 248, 252, 257, 259, 260, 264, 266, 268, 269, 275, 277, 279, 280, 282, 286, 287, 288, 293, 295, 299, 301, 304, 308, 309, 316, 319, 323, 324, 327, 329, 340, 341, 342, 345, 346, 349, 351, 356, 357, 362, 363, 365, 366, 367, 369, 371, 372, 373, 375, 378, 380, 389, 390, 392, 395, 396, 397, 399, 400, 401, 402, 404, 424, 427, 430, 439, 440, 444, 452, 463, 467, 468, 470, 471, 472, 474, 477, 480, 482, 484, 488, 489, 490, 508, 513, 514, 518, 521, 533, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 563, 565, 569, 570, 571, 572, 574, 591, 592, 598, 602, 605, 612, 613, 614, 615, 627, 633, 640, 647, 649, 655, 657, 669, 676, 679, 680, 681, 683, 693, 697, 716, 743, 744, 762, 772, 775, 776, 780, 781, 782, 784, 789, 791, 798, 807, 808, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 824, 827, 828, 829, 830, 831, 832, 833, 836, 837, 838, 839, 844, 852, 856, 857, 858, 860, 867, 868, 880, 883, 886, 887, 888, 889, 891, 893, 898, 899, 900, 917, 919, 923, 929, 933, 936, 948, 951, 952, 956, 957, 958, 959, 961, 962, 963, 964, 965, 969, 972, 973, 976, 977, 978, 986, 988, 994, 995, 996, 997, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "public": [0, 78, 362, 368, 369, 371, 372, 378, 379, 380, 381, 396, 399, 645, 652, 666, 667, 673, 958, 966, 1004, 1009, 1010, 1015, 1016, 1017], "releas": [0, 313, 356, 358, 366, 368, 370, 375, 378, 380, 400, 424, 427, 444, 447, 470, 471, 476, 481, 484, 492, 495, 504, 518, 541, 542, 544, 545, 547, 580, 583, 609, 611, 615, 621, 627, 629, 633, 639, 650, 661, 669, 698, 728, 768, 777, 780, 781, 791, 805, 821, 823, 840, 844, 849, 852, 853, 854, 858, 859, 875, 876, 878, 883, 887, 910, 930, 978, 980, 1004, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "februari": [0, 394, 453, 962, 1005, 1009], "1st": [0, 4, 59, 89, 157, 198, 304, 857, 858], "sinc": [0, 4, 5, 11, 25, 27, 37, 49, 53, 65, 69, 70, 71, 96, 119, 135, 143, 146, 149, 154, 167, 168, 173, 179, 197, 199, 214, 227, 231, 232, 244, 247, 253, 257, 259, 260, 266, 267, 277, 279, 310, 311, 320, 324, 327, 335, 340, 341, 342, 351, 356, 363, 366, 368, 369, 371, 372, 373, 375, 378, 379, 380, 383, 392, 393, 394, 395, 396, 397, 399, 400, 402, 404, 409, 418, 420, 422, 426, 427, 429, 430, 433, 436, 449, 476, 513, 516, 517, 518, 519, 520, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 549, 569, 570, 572, 583, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 619, 629, 631, 632, 635, 636, 637, 639, 640, 645, 646, 647, 649, 650, 652, 655, 656, 657, 660, 661, 673, 680, 688, 690, 715, 721, 748, 769, 780, 781, 807, 808, 809, 810, 814, 815, 816, 817, 818, 821, 826, 829, 836, 837, 844, 852, 868, 869, 873, 874, 878, 880, 881, 882, 883, 884, 886, 887, 888, 889, 909, 912, 915, 923, 951, 954, 955, 956, 958, 959, 963, 964, 965, 966, 968, 970, 972, 976, 977, 978, 986, 988, 997, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "sever": [0, 4, 9, 12, 25, 31, 37, 55, 56, 60, 73, 90, 113, 120, 127, 129, 132, 143, 149, 154, 155, 164, 167, 173, 186, 197, 217, 218, 224, 230, 244, 252, 257, 262, 279, 294, 299, 310, 340, 341, 355, 362, 363, 365, 368, 369, 372, 378, 380, 389, 391, 392, 393, 396, 398, 399, 400, 402, 427, 429, 444, 467, 479, 488, 489, 518, 535, 536, 539, 540, 543, 544, 545, 550, 569, 570, 572, 591, 626, 627, 633, 669, 670, 671, 672, 673, 674, 775, 776, 777, 780, 781, 791, 807, 808, 814, 815, 816, 817, 818, 838, 839, 846, 862, 886, 887, 888, 889, 901, 930, 951, 954, 959, 962, 963, 965, 970, 972, 976, 978, 979, 981, 982, 985, 986, 988, 995, 996, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1017], "have": [0, 4, 5, 7, 8, 9, 11, 12, 13, 24, 25, 26, 27, 37, 39, 42, 43, 45, 46, 47, 50, 53, 56, 59, 61, 63, 64, 69, 70, 77, 79, 84, 85, 88, 90, 91, 100, 102, 110, 116, 118, 119, 120, 122, 142, 143, 146, 149, 150, 154, 155, 156, 162, 166, 167, 168, 169, 170, 173, 176, 197, 198, 199, 215, 222, 226, 228, 233, 235, 236, 243, 244, 245, 247, 251, 257, 258, 260, 263, 264, 271, 277, 279, 283, 284, 299, 304, 307, 309, 310, 316, 317, 318, 324, 330, 332, 340, 341, 349, 351, 355, 356, 357, 362, 363, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 383, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 467, 472, 474, 475, 476, 488, 489, 494, 503, 504, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 666, 668, 669, 670, 671, 672, 673, 680, 685, 686, 693, 696, 701, 706, 711, 716, 722, 736, 737, 738, 739, 762, 765, 766, 770, 773, 775, 776, 777, 780, 781, 782, 783, 788, 791, 795, 800, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 866, 867, 868, 869, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 898, 900, 902, 904, 915, 937, 951, 952, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 972, 974, 975, 976, 977, 978, 979, 982, 983, 986, 988, 989, 992, 993, 995, 996, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "appear": [0, 8, 46, 48, 113, 167, 252, 254, 255, 283, 284, 293, 295, 300, 316, 340, 341, 342, 363, 366, 368, 372, 380, 394, 397, 468, 469, 535, 547, 548, 559, 591, 608, 609, 611, 678, 683, 693, 697, 699, 769, 778, 795, 814, 815, 816, 817, 818, 880, 883, 917, 958, 964, 968, 1004, 1012, 1016, 1017], "follow": [0, 4, 7, 19, 26, 32, 37, 45, 54, 56, 62, 66, 70, 71, 91, 95, 105, 110, 113, 122, 126, 141, 154, 161, 166, 167, 168, 169, 176, 178, 185, 186, 195, 197, 198, 212, 215, 227, 233, 235, 248, 257, 266, 267, 299, 307, 308, 310, 311, 312, 324, 335, 340, 341, 342, 345, 349, 351, 355, 356, 362, 363, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 383, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 412, 414, 422, 424, 426, 427, 428, 429, 433, 441, 443, 444, 445, 448, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 495, 514, 518, 520, 521, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 550, 562, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 612, 614, 615, 627, 633, 639, 640, 651, 652, 661, 673, 675, 680, 686, 690, 694, 699, 796, 816, 821, 822, 823, 825, 827, 829, 830, 831, 838, 842, 843, 844, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 867, 876, 878, 879, 886, 887, 888, 889, 893, 894, 914, 930, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 981, 982, 983, 988, 997, 1001, 1004, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "3": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 30, 31, 32, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 72, 73, 74, 77, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 135, 141, 143, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 167, 168, 169, 173, 175, 176, 177, 178, 179, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 223, 226, 230, 231, 232, 233, 235, 237, 239, 242, 243, 244, 246, 247, 248, 252, 255, 256, 257, 258, 259, 260, 261, 263, 265, 266, 267, 268, 269, 270, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 318, 319, 320, 323, 324, 326, 327, 330, 331, 332, 333, 334, 335, 336, 340, 341, 342, 346, 347, 349, 351, 356, 357, 362, 363, 365, 366, 368, 369, 372, 373, 378, 379, 380, 383, 384, 385, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 415, 418, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 438, 439, 442, 444, 446, 447, 449, 450, 451, 452, 454, 455, 456, 462, 463, 464, 465, 473, 474, 476, 477, 484, 485, 486, 487, 490, 492, 496, 497, 498, 499, 505, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 529, 530, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 557, 562, 564, 565, 568, 574, 575, 583, 584, 588, 589, 591, 593, 598, 608, 609, 610, 611, 613, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 673, 674, 675, 680, 684, 685, 686, 690, 694, 697, 698, 702, 703, 704, 706, 708, 711, 714, 715, 716, 717, 721, 723, 724, 725, 726, 728, 730, 731, 732, 733, 734, 736, 737, 748, 749, 755, 761, 763, 765, 766, 768, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 838, 843, 844, 845, 850, 851, 852, 853, 854, 855, 857, 858, 859, 866, 870, 871, 872, 873, 874, 875, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 904, 909, 913, 914, 915, 917, 918, 919, 920, 923, 925, 926, 928, 929, 930, 936, 951, 952, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 968, 969, 972, 973, 975, 977, 978, 980, 981, 985, 988, 989, 992, 993, 995, 996, 1000, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1014, 1016, 1017, 1019], "month": [0, 4, 154, 168, 363, 368, 371, 381, 1004], "cycl": [0, 4, 42, 44, 50, 61, 95, 182, 243, 248, 264, 266, 310, 311, 368, 371, 391, 397, 559, 561, 608, 780, 781, 894, 951, 952, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "thrive": [0, 368], "intern": [0, 26, 70, 81, 100, 123, 135, 150, 161, 197, 277, 279, 317, 342, 351, 356, 363, 365, 369, 373, 376, 378, 380, 386, 389, 392, 396, 397, 399, 400, 402, 403, 418, 420, 425, 445, 448, 491, 514, 515, 526, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 574, 575, 591, 592, 619, 621, 624, 627, 633, 649, 657, 659, 677, 689, 711, 714, 738, 739, 763, 819, 820, 835, 836, 837, 858, 873, 874, 876, 878, 879, 880, 883, 886, 887, 888, 889, 930, 958, 959, 960, 962, 965, 968, 974, 977, 978, 986, 1004, 1007, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "ha": [0, 4, 5, 8, 11, 12, 16, 25, 30, 34, 37, 44, 50, 55, 56, 59, 73, 79, 80, 84, 85, 95, 115, 118, 120, 122, 126, 131, 145, 149, 154, 155, 156, 162, 167, 168, 169, 173, 190, 194, 197, 198, 199, 203, 214, 215, 218, 226, 230, 232, 236, 239, 242, 243, 245, 247, 248, 252, 255, 256, 257, 260, 261, 263, 268, 269, 275, 283, 284, 285, 287, 295, 299, 300, 302, 304, 307, 308, 309, 310, 311, 315, 318, 327, 332, 334, 340, 349, 351, 355, 356, 357, 362, 363, 365, 366, 367, 368, 369, 371, 372, 375, 376, 378, 379, 380, 381, 386, 389, 390, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 404, 415, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 441, 442, 443, 445, 449, 450, 451, 452, 453, 454, 455, 456, 458, 462, 463, 464, 465, 473, 474, 477, 478, 488, 489, 496, 506, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 600, 608, 609, 610, 611, 613, 614, 615, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 666, 668, 669, 670, 671, 672, 673, 676, 692, 694, 701, 721, 743, 754, 758, 771, 775, 776, 777, 778, 780, 781, 782, 783, 784, 791, 795, 798, 803, 804, 807, 808, 810, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 839, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 893, 897, 898, 899, 917, 923, 931, 947, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 974, 975, 976, 977, 978, 983, 986, 988, 992, 995, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "been": [0, 4, 9, 16, 26, 44, 53, 59, 80, 100, 146, 149, 154, 156, 167, 222, 226, 228, 233, 255, 257, 263, 307, 308, 309, 310, 311, 317, 340, 351, 356, 362, 363, 365, 366, 367, 368, 369, 371, 373, 375, 376, 378, 379, 380, 381, 386, 389, 390, 392, 394, 396, 397, 399, 402, 415, 418, 449, 451, 452, 454, 458, 467, 503, 514, 516, 529, 530, 547, 548, 562, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 614, 615, 639, 640, 647, 649, 654, 656, 657, 658, 659, 701, 771, 777, 780, 781, 783, 791, 803, 804, 828, 875, 878, 952, 954, 955, 957, 958, 959, 962, 963, 965, 968, 972, 974, 976, 977, 983, 986, 988, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "lead": [0, 7, 25, 31, 37, 52, 60, 71, 119, 122, 145, 146, 167, 168, 169, 176, 186, 188, 197, 201, 231, 257, 258, 260, 264, 282, 283, 295, 299, 301, 304, 309, 327, 341, 345, 351, 355, 356, 362, 367, 375, 376, 379, 380, 386, 389, 392, 394, 396, 397, 398, 399, 401, 432, 442, 445, 448, 476, 495, 507, 515, 518, 519, 520, 523, 527, 531, 537, 538, 539, 540, 543, 544, 545, 546, 587, 611, 627, 628, 631, 633, 634, 635, 641, 642, 643, 644, 660, 672, 676, 726, 775, 780, 781, 807, 819, 820, 824, 843, 850, 870, 871, 876, 878, 886, 887, 888, 889, 951, 956, 958, 959, 961, 962, 963, 965, 966, 968, 970, 972, 975, 976, 978, 986, 988, 1007, 1009, 1011, 1012, 1013, 1014, 1016, 1017, 1019], "The": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 26, 27, 30, 31, 32, 34, 37, 39, 40, 44, 45, 46, 47, 48, 50, 52, 53, 56, 57, 59, 60, 61, 62, 64, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 87, 90, 91, 92, 95, 98, 100, 103, 104, 105, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 132, 141, 142, 143, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 168, 169, 170, 173, 176, 178, 179, 180, 182, 185, 186, 188, 189, 190, 191, 192, 193, 195, 198, 199, 200, 201, 203, 205, 206, 214, 215, 217, 221, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 244, 245, 247, 248, 251, 254, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 275, 277, 279, 282, 283, 284, 285, 286, 287, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 317, 318, 324, 325, 327, 331, 332, 333, 335, 336, 337, 340, 341, 342, 345, 347, 348, 349, 351, 355, 356, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 413, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 696, 697, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 732, 733, 734, 735, 736, 737, 738, 739, 742, 744, 745, 746, 747, 750, 751, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 909, 910, 911, 912, 913, 914, 915, 917, 918, 925, 927, 928, 929, 930, 931, 932, 933, 936, 946, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 975, 976, 977, 978, 979, 981, 982, 983, 985, 986, 988, 989, 990, 992, 993, 994, 997, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "decis": [0, 4, 16, 25, 27, 31, 34, 55, 57, 59, 108, 109, 112, 113, 115, 127, 133, 153, 167, 179, 180, 189, 206, 207, 210, 211, 226, 227, 229, 236, 260, 280, 285, 288, 293, 299, 300, 301, 304, 314, 321, 323, 324, 325, 326, 327, 328, 329, 333, 336, 337, 340, 350, 355, 358, 364, 365, 368, 380, 390, 392, 399, 418, 449, 480, 484, 499, 516, 529, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 574, 575, 612, 613, 614, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 679, 681, 683, 684, 688, 701, 706, 707, 715, 719, 720, 722, 736, 762, 768, 769, 772, 777, 780, 781, 791, 805, 807, 808, 810, 821, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 956, 962, 963, 964, 965, 966, 968, 969, 970, 975, 976, 977, 980, 982, 983, 984, 986, 995, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1017, 1018, 1020], "make": [0, 4, 7, 8, 11, 14, 17, 21, 25, 26, 27, 39, 40, 43, 44, 55, 60, 61, 66, 72, 100, 119, 122, 127, 143, 146, 149, 154, 157, 166, 167, 168, 169, 176, 183, 186, 189, 190, 191, 193, 197, 198, 199, 203, 215, 219, 228, 230, 232, 233, 242, 244, 247, 248, 252, 257, 259, 260, 266, 267, 268, 286, 295, 299, 300, 311, 327, 337, 340, 341, 342, 351, 355, 356, 357, 358, 362, 363, 366, 367, 369, 370, 372, 373, 375, 378, 380, 383, 386, 389, 390, 392, 393, 394, 396, 397, 399, 400, 401, 402, 404, 421, 422, 423, 424, 426, 427, 429, 431, 432, 433, 438, 439, 440, 442, 468, 483, 494, 495, 502, 503, 507, 512, 514, 521, 531, 532, 535, 536, 564, 565, 588, 589, 612, 630, 636, 637, 652, 672, 676, 717, 722, 748, 749, 761, 775, 776, 777, 779, 782, 788, 792, 793, 794, 796, 797, 801, 802, 809, 810, 813, 846, 855, 858, 859, 862, 866, 868, 869, 870, 871, 884, 892, 898, 899, 909, 915, 921, 922, 923, 948, 951, 952, 954, 956, 958, 959, 961, 962, 963, 964, 965, 967, 968, 969, 970, 972, 975, 976, 977, 978, 980, 981, 982, 983, 985, 986, 988, 993, 995, 997, 1001, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "process": [0, 4, 5, 26, 30, 31, 45, 46, 47, 48, 50, 65, 69, 71, 73, 78, 80, 96, 97, 99, 119, 126, 135, 136, 137, 138, 159, 166, 176, 199, 233, 242, 243, 248, 257, 259, 260, 269, 299, 309, 316, 341, 342, 345, 355, 356, 357, 358, 363, 367, 368, 369, 371, 373, 376, 378, 379, 380, 386, 392, 393, 394, 396, 397, 398, 399, 400, 401, 405, 428, 429, 455, 476, 484, 503, 514, 515, 516, 517, 518, 541, 542, 543, 569, 570, 572, 591, 592, 594, 595, 596, 598, 599, 600, 603, 604, 606, 608, 613, 614, 620, 624, 645, 653, 666, 667, 684, 703, 721, 761, 775, 777, 780, 781, 791, 800, 801, 802, 811, 812, 828, 842, 846, 848, 849, 850, 859, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 928, 930, 951, 954, 958, 962, 965, 972, 974, 976, 978, 980, 981, 982, 983, 984, 986, 988, 989, 996, 997, 999, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018], "structur": [0, 3, 9, 14, 15, 17, 20, 36, 43, 44, 67, 81, 106, 125, 148, 159, 164, 218, 222, 228, 248, 252, 263, 282, 304, 308, 311, 314, 321, 327, 344, 346, 350, 355, 363, 365, 368, 369, 372, 378, 380, 381, 383, 389, 392, 394, 395, 396, 397, 399, 400, 401, 402, 422, 423, 426, 430, 431, 432, 433, 434, 437, 442, 443, 452, 476, 483, 484, 488, 491, 493, 494, 501, 510, 515, 521, 524, 543, 591, 592, 593, 597, 598, 599, 670, 677, 690, 694, 805, 827, 832, 859, 870, 871, 874, 886, 887, 888, 889, 892, 914, 915, 933, 936, 959, 961, 962, 965, 967, 968, 972, 975, 978, 982, 983, 991, 996, 997, 1004, 1005, 1007, 1008, 1010, 1014], "i": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 69, 70, 71, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 91, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 145, 146, 149, 150, 151, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 286, 287, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 325, 326, 327, 332, 333, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 351, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 379, 380, 381, 382, 383, 386, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 555, 556, 557, 558, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 750, 751, 753, 754, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 915, 917, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 943, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 988, 990, 991, 992, 993, 994, 995, 996, 997, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "laid": [0, 166, 368], "out": [0, 3, 4, 7, 9, 12, 14, 15, 17, 26, 30, 40, 50, 69, 70, 103, 108, 114, 116, 123, 133, 138, 164, 166, 169, 197, 199, 205, 215, 242, 244, 255, 257, 260, 265, 269, 275, 304, 310, 318, 320, 323, 324, 327, 340, 354, 363, 365, 366, 368, 369, 370, 371, 373, 378, 380, 392, 395, 397, 399, 402, 408, 416, 417, 423, 424, 426, 427, 429, 452, 462, 463, 464, 465, 479, 495, 496, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 529, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 569, 570, 572, 585, 588, 589, 615, 620, 621, 622, 623, 632, 636, 647, 649, 654, 656, 657, 669, 670, 682, 707, 721, 722, 777, 779, 780, 781, 782, 784, 785, 786, 787, 791, 805, 814, 815, 816, 817, 818, 823, 828, 831, 835, 836, 837, 845, 849, 856, 867, 870, 871, 893, 924, 926, 931, 952, 956, 957, 961, 962, 963, 965, 970, 972, 983, 984, 985, 986, 992, 995, 997, 999, 1004, 1006, 1008, 1010, 1012, 1013, 1016, 1017, 1020], "document": [0, 3, 14, 15, 18, 22, 31, 45, 51, 56, 70, 72, 88, 89, 91, 95, 126, 178, 180, 194, 195, 212, 230, 233, 239, 258, 295, 319, 332, 342, 343, 355, 356, 357, 358, 362, 363, 364, 366, 367, 369, 370, 371, 372, 373, 375, 378, 380, 381, 383, 386, 389, 391, 392, 397, 400, 403, 425, 427, 428, 429, 430, 433, 437, 444, 468, 469, 479, 481, 491, 501, 503, 516, 524, 544, 569, 570, 571, 572, 575, 585, 612, 620, 624, 639, 640, 647, 649, 654, 655, 656, 657, 677, 684, 686, 692, 698, 717, 738, 739, 749, 758, 759, 760, 771, 773, 777, 780, 781, 791, 801, 803, 806, 809, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 840, 851, 878, 883, 894, 897, 899, 912, 928, 951, 958, 960, 962, 963, 964, 965, 966, 970, 976, 979, 980, 981, 986, 990, 995, 997, 1005, 1006, 1010], "peopl": [0, 6, 69, 167, 234, 260, 340, 341, 356, 357, 363, 365, 367, 368, 371, 398, 473, 474, 622, 816, 982, 993], "ar": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 32, 37, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 65, 69, 70, 71, 73, 74, 77, 78, 79, 80, 81, 84, 85, 91, 95, 97, 100, 103, 106, 109, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 142, 143, 145, 146, 149, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 185, 186, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 201, 206, 208, 215, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 239, 243, 244, 245, 247, 251, 252, 254, 255, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 275, 277, 279, 282, 283, 287, 290, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 311, 312, 315, 317, 318, 319, 320, 325, 327, 329, 331, 335, 336, 340, 341, 342, 345, 349, 351, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 379, 380, 381, 383, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 412, 414, 415, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 462, 463, 464, 465, 468, 469, 473, 475, 476, 478, 480, 481, 482, 483, 484, 488, 489, 490, 492, 495, 496, 497, 498, 499, 500, 503, 504, 506, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 685, 686, 688, 690, 693, 694, 696, 697, 698, 699, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 720, 721, 723, 725, 726, 728, 730, 731, 733, 734, 736, 737, 741, 742, 743, 745, 747, 748, 749, 753, 754, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 780, 781, 783, 784, 789, 791, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 902, 903, 904, 907, 909, 914, 915, 916, 919, 920, 923, 925, 926, 928, 930, 933, 936, 937, 941, 942, 943, 946, 948, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 981, 982, 983, 985, 986, 988, 989, 990, 991, 992, 994, 995, 996, 997, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "current": [0, 8, 46, 84, 154, 167, 215, 299, 307, 356, 357, 363, 366, 368, 369, 372, 376, 378, 380, 381, 388, 389, 391, 392, 396, 399, 400, 401, 402, 421, 430, 448, 449, 450, 451, 452, 453, 454, 455, 456, 512, 515, 521, 533, 534, 537, 538, 539, 540, 542, 544, 545, 546, 556, 572, 574, 591, 598, 607, 608, 627, 639, 648, 652, 656, 657, 658, 659, 768, 775, 776, 824, 828, 836, 837, 855, 866, 876, 886, 887, 888, 889, 892, 929, 937, 951, 956, 958, 962, 965, 966, 972, 983, 995, 1012, 1016, 1018, 1019, 1020], "": [0, 4, 5, 6, 7, 8, 10, 11, 12, 16, 17, 19, 24, 27, 30, 34, 38, 39, 40, 42, 43, 44, 46, 47, 48, 52, 53, 56, 57, 58, 59, 60, 61, 63, 64, 66, 69, 70, 77, 78, 81, 84, 89, 90, 91, 95, 96, 97, 100, 101, 104, 105, 106, 109, 110, 112, 116, 118, 119, 121, 122, 123, 125, 126, 127, 128, 130, 138, 141, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 162, 167, 168, 170, 173, 177, 178, 179, 181, 183, 185, 186, 187, 188, 189, 195, 197, 199, 203, 204, 206, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 226, 227, 230, 232, 233, 235, 242, 244, 245, 247, 252, 257, 258, 259, 260, 261, 264, 268, 270, 271, 277, 280, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 296, 299, 302, 307, 309, 310, 311, 312, 316, 317, 324, 325, 326, 327, 328, 331, 332, 333, 334, 337, 340, 341, 342, 346, 347, 348, 349, 351, 355, 356, 357, 358, 361, 362, 363, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 380, 381, 382, 383, 386, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 406, 412, 415, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 439, 440, 443, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 469, 476, 478, 480, 484, 490, 491, 499, 505, 506, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 552, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 666, 668, 669, 670, 671, 672, 673, 674, 681, 682, 683, 689, 692, 697, 701, 715, 721, 722, 738, 739, 759, 760, 775, 776, 777, 779, 780, 781, 786, 791, 795, 796, 801, 802, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 893, 896, 898, 899, 902, 915, 917, 946, 950, 951, 953, 954, 956, 958, 959, 960, 963, 964, 965, 966, 967, 969, 970, 972, 974, 975, 976, 977, 978, 982, 983, 986, 988, 992, 993, 995, 996, 997, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "mainten": [0, 368, 375, 378, 383, 385, 958, 983, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "j\u00e9r\u00e9mie": [0, 1, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "du": [0, 1, 2, 1004, 1005, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "boisberrang": [0, 1, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "jori": [0, 1, 1011, 1012, 1013, 1016, 1017], "van": [0, 1, 362, 394, 449, 454, 514, 608, 673, 677, 952, 959, 962, 968, 986, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1020], "den": [0, 1, 1005, 1006, 1011, 1012, 1013, 1016, 1017], "bossch": [0, 1, 1011, 1012, 1013, 1017], "lo\u00efc": [0, 1, 1012, 1015, 1017, 1018, 1019], "est\u00e8v": [0, 1, 1012, 1015, 1017, 1018, 1019], "thoma": [0, 1, 103, 226, 299, 356, 359, 381, 874, 958, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "j": [0, 1, 11, 17, 37, 38, 40, 43, 60, 69, 78, 79, 80, 94, 109, 113, 114, 124, 150, 162, 168, 209, 221, 234, 242, 256, 257, 262, 268, 281, 287, 290, 303, 312, 349, 356, 362, 363, 365, 371, 378, 389, 390, 392, 394, 396, 397, 399, 400, 402, 403, 418, 421, 425, 433, 434, 449, 454, 478, 493, 496, 497, 498, 500, 508, 511, 514, 516, 517, 518, 520, 521, 527, 539, 540, 574, 575, 613, 614, 618, 625, 626, 629, 630, 647, 648, 650, 661, 669, 670, 671, 673, 674, 675, 677, 686, 689, 691, 695, 697, 699, 702, 703, 704, 706, 735, 736, 738, 739, 754, 758, 768, 769, 770, 771, 808, 809, 816, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 850, 859, 886, 887, 951, 952, 956, 958, 959, 960, 962, 963, 964, 965, 966, 968, 969, 970, 974, 976, 977, 978, 980, 997, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "fan": [0, 1, 356, 381, 977, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "olivi": [0, 1, 14, 17, 37, 48, 60, 186, 197, 215, 219, 258, 260, 340, 341, 342, 381, 874, 975, 981, 983, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "grisel": [0, 1, 14, 17, 37, 48, 60, 186, 197, 215, 219, 258, 260, 340, 341, 342, 381, 981, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "yaroslav": [0, 1, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013], "halchenko": [0, 1, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013], "nicola": [0, 1, 146, 303, 639, 958, 975, 1004, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "hug": [0, 1, 146, 303, 980, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "adrin": [0, 1, 64, 336, 381, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "jalali": [0, 1, 64, 336, 381, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "julien": [0, 1, 639, 958, 986, 1004, 1007, 1011, 1012, 1016, 1017, 1018, 1019, 1020], "jerphanion": [0, 1, 1016, 1017, 1018, 1019, 1020], "guillaum": [0, 1, 5, 7, 71, 74, 100, 129, 149, 154, 155, 156, 158, 185, 186, 199, 219, 299, 986, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "lemaitr": [0, 1, 5, 7, 71, 74, 100, 129, 149, 154, 155, 156, 158, 185, 186, 199, 219, 299, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "christian": [0, 1, 19, 197, 198, 199, 215, 340, 341, 363, 986, 997, 1004, 1005, 1008, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "lorentzen": [0, 1, 197, 198, 199, 215, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "jan": [0, 1, 24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 198, 232, 858, 1004, 1007, 1008, 1009, 1010, 1012, 1013, 1016], "hendrik": [0, 1, 24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 232, 1004, 1007, 1008, 1009, 1010], "metzen": [0, 1, 24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 232, 1004, 1007, 1008, 1009, 1010], "andrea": [0, 1, 31, 73, 100, 114, 188, 231, 300, 301, 317, 335, 336, 381, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "mueller": [0, 1, 73, 100, 114, 188, 231, 317, 335, 336, 986, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "vlad": [0, 1, 95, 233, 296, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013], "nicula": [0, 1, 95, 233, 296, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013], "joel": [0, 1, 71, 381, 400, 515, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "nothman": [0, 1, 71, 381, 400, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "hanmin": [0, 1, 300, 1011, 1012, 1013, 1014, 1015], "qin": [0, 1, 300, 365, 400, 1011, 1012, 1013, 1014, 1015], "bertrand": [0, 1, 1004, 1010, 1011, 1016, 1017], "thirion": [0, 1, 1004, 1010, 1011, 1017], "tom": [0, 1, 189, 205, 277, 279, 301, 302, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "dupr\u00e9": [0, 1, 301, 302, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "la": [0, 1, 189, 205, 277, 279, 301, 302, 365, 986, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "tour": [0, 1, 189, 205, 277, 279, 301, 302, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "nell": [0, 1, 39, 221, 229, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1016], "roman": [0, 1, 197, 215, 608, 892, 1006, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "yurchak": [0, 1, 197, 215, 400, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "meekail": [0, 1, 1018, 1019], "zain": [0, 1, 1018, 1019], "pleas": [0, 12, 17, 26, 70, 71, 109, 115, 116, 117, 123, 125, 126, 129, 132, 143, 154, 167, 168, 169, 178, 201, 227, 228, 229, 231, 236, 237, 238, 239, 247, 255, 257, 258, 264, 269, 277, 287, 296, 307, 308, 309, 310, 311, 312, 317, 349, 356, 362, 363, 366, 368, 369, 371, 375, 378, 379, 380, 383, 386, 388, 391, 392, 399, 400, 430, 476, 547, 548, 612, 613, 614, 631, 632, 635, 636, 637, 645, 646, 780, 781, 802, 856, 867, 880, 883, 886, 887, 888, 889, 951, 962, 966, 972, 976, 977, 982, 983, 985, 988, 995, 997, 1004, 1007, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "do": [0, 4, 10, 25, 42, 60, 66, 73, 89, 99, 101, 102, 105, 114, 116, 118, 120, 122, 123, 129, 136, 143, 154, 161, 167, 168, 169, 194, 197, 215, 218, 220, 233, 248, 252, 255, 258, 260, 275, 277, 279, 283, 310, 320, 324, 327, 332, 335, 340, 341, 342, 349, 351, 355, 356, 357, 363, 365, 367, 368, 369, 370, 371, 374, 375, 380, 381, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 430, 441, 483, 516, 518, 522, 524, 532, 535, 562, 563, 564, 569, 570, 572, 626, 627, 633, 636, 637, 640, 647, 649, 657, 717, 743, 758, 762, 794, 797, 811, 812, 816, 843, 844, 846, 857, 859, 863, 864, 866, 867, 868, 869, 886, 887, 888, 889, 897, 936, 951, 954, 956, 958, 959, 962, 963, 965, 966, 970, 972, 977, 978, 982, 983, 986, 988, 995, 996, 997, 1004, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "email": [0, 340, 368, 378, 400, 814, 964, 986], "directli": [0, 6, 19, 27, 45, 46, 55, 70, 115, 146, 157, 185, 197, 203, 215, 227, 262, 296, 299, 311, 342, 351, 355, 366, 368, 369, 371, 373, 379, 380, 381, 389, 390, 392, 393, 394, 395, 396, 400, 402, 423, 432, 442, 444, 449, 454, 507, 547, 548, 549, 550, 578, 592, 601, 613, 624, 627, 628, 633, 634, 641, 642, 643, 644, 645, 658, 662, 665, 671, 754, 758, 761, 770, 771, 777, 780, 781, 791, 824, 838, 839, 840, 846, 856, 858, 860, 867, 930, 951, 958, 960, 965, 967, 969, 972, 977, 978, 983, 989, 992, 993, 1004, 1012, 1013, 1015, 1016, 1017], "ask": [0, 161, 162, 257, 358, 367, 368, 371, 372, 375, 380, 381, 401, 821, 822, 823, 825, 827, 829, 830, 831, 980, 985, 1020], "assist": [0, 368, 378, 972, 986], "report": [0, 4, 8, 32, 69, 74, 143, 157, 185, 255, 265, 307, 315, 351, 363, 367, 369, 370, 373, 375, 378, 380, 383, 386, 392, 396, 592, 630, 639, 645, 666, 667, 681, 694, 709, 710, 718, 763, 764, 767, 808, 817, 836, 837, 873, 891, 909, 958, 965, 982, 983, 985, 1005, 1008, 1011, 1012, 1014, 1015, 1017, 1019, 1020], "issu": [0, 4, 25, 78, 85, 197, 215, 262, 356, 358, 362, 370, 371, 372, 375, 376, 378, 380, 381, 382, 383, 386, 388, 392, 394, 395, 400, 402, 429, 432, 442, 453, 462, 463, 464, 514, 519, 523, 553, 566, 567, 569, 570, 572, 592, 608, 672, 676, 749, 850, 855, 866, 905, 951, 952, 959, 965, 970, 972, 977, 982, 983, 985, 996, 997, 1004, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1019], "instead": [0, 4, 5, 6, 48, 53, 55, 56, 70, 100, 113, 117, 126, 143, 146, 149, 197, 199, 212, 215, 222, 248, 253, 254, 258, 259, 275, 282, 299, 307, 308, 309, 310, 311, 327, 329, 340, 342, 351, 355, 356, 362, 363, 366, 367, 368, 369, 371, 372, 375, 376, 378, 379, 380, 386, 388, 392, 393, 395, 396, 397, 398, 399, 400, 401, 403, 404, 413, 418, 421, 422, 423, 425, 426, 427, 430, 436, 439, 445, 447, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 489, 490, 513, 515, 517, 519, 520, 521, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 540, 542, 544, 545, 548, 550, 563, 570, 571, 588, 589, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 608, 611, 613, 616, 619, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 651, 652, 653, 654, 657, 659, 660, 668, 671, 675, 680, 688, 726, 754, 758, 763, 775, 776, 777, 781, 789, 791, 796, 797, 812, 813, 822, 830, 836, 837, 840, 841, 842, 851, 852, 857, 859, 868, 869, 872, 879, 881, 883, 884, 886, 887, 888, 889, 891, 892, 904, 910, 915, 923, 937, 951, 952, 954, 958, 959, 961, 962, 963, 966, 967, 972, 976, 977, 978, 982, 985, 993, 995, 997, 1001, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "see": [0, 4, 5, 7, 24, 25, 27, 37, 44, 49, 50, 53, 56, 57, 61, 63, 64, 66, 68, 79, 85, 88, 89, 95, 100, 102, 106, 111, 112, 113, 116, 117, 118, 119, 121, 123, 126, 129, 135, 142, 143, 144, 146, 149, 154, 155, 156, 161, 164, 167, 168, 170, 173, 176, 177, 178, 188, 198, 199, 200, 203, 214, 215, 218, 220, 228, 230, 236, 237, 239, 243, 244, 245, 251, 252, 254, 256, 257, 258, 259, 260, 264, 266, 267, 268, 271, 272, 277, 283, 284, 286, 290, 299, 307, 308, 309, 310, 311, 312, 317, 327, 340, 341, 342, 345, 346, 347, 348, 351, 355, 356, 357, 360, 361, 362, 363, 365, 366, 367, 368, 369, 371, 373, 374, 375, 378, 379, 380, 383, 390, 391, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 414, 418, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 452, 453, 454, 455, 462, 463, 464, 465, 467, 468, 471, 472, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 565, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 590, 591, 592, 595, 600, 603, 604, 608, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 682, 687, 689, 692, 694, 723, 743, 754, 758, 759, 760, 761, 768, 770, 771, 775, 776, 777, 779, 780, 781, 782, 783, 788, 789, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 914, 915, 931, 933, 936, 951, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979, 981, 983, 986, 988, 990, 995, 996, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "what": [0, 4, 9, 12, 40, 45, 52, 53, 85, 96, 100, 118, 166, 167, 186, 203, 205, 213, 228, 239, 295, 340, 342, 345, 351, 356, 363, 368, 369, 371, 373, 375, 379, 380, 381, 382, 392, 398, 399, 400, 483, 516, 569, 570, 572, 627, 633, 677, 863, 864, 866, 867, 868, 869, 886, 887, 888, 889, 961, 962, 963, 965, 978, 983, 985, 988, 1004, 1011], "best": [0, 4, 6, 8, 12, 13, 19, 24, 26, 40, 46, 54, 60, 69, 70, 71, 72, 77, 84, 95, 99, 103, 104, 105, 113, 119, 120, 121, 122, 123, 129, 132, 146, 149, 150, 155, 161, 167, 176, 181, 185, 186, 193, 211, 212, 213, 218, 221, 226, 231, 232, 235, 244, 248, 251, 255, 256, 257, 258, 261, 264, 265, 268, 269, 271, 272, 275, 281, 286, 300, 309, 310, 327, 330, 335, 340, 341, 342, 348, 355, 356, 362, 365, 367, 368, 373, 379, 380, 383, 389, 390, 392, 396, 397, 399, 400, 401, 402, 413, 424, 427, 429, 431, 432, 433, 439, 442, 445, 452, 462, 463, 464, 518, 525, 526, 532, 534, 536, 537, 538, 539, 540, 542, 544, 545, 546, 548, 550, 574, 575, 578, 583, 591, 592, 616, 618, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 650, 651, 652, 653, 654, 656, 657, 659, 660, 661, 669, 670, 671, 674, 675, 684, 689, 700, 701, 702, 703, 704, 708, 709, 719, 720, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 736, 763, 764, 765, 767, 770, 771, 772, 774, 775, 776, 777, 780, 781, 791, 802, 804, 807, 812, 813, 822, 830, 836, 837, 879, 881, 884, 886, 887, 888, 889, 951, 956, 957, 958, 959, 962, 965, 966, 968, 976, 978, 982, 983, 986, 988, 993, 997, 1004, 1007, 1010, 1012, 1013, 1014, 1017, 1018, 1019], "wai": [0, 4, 17, 27, 50, 59, 70, 73, 115, 121, 125, 127, 146, 156, 167, 169, 170, 198, 202, 212, 228, 229, 232, 236, 252, 257, 264, 266, 299, 300, 310, 312, 351, 355, 356, 357, 362, 364, 366, 367, 369, 370, 375, 376, 380, 381, 383, 386, 389, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 403, 407, 424, 425, 431, 432, 433, 439, 440, 442, 443, 449, 476, 535, 536, 543, 552, 570, 580, 581, 592, 613, 647, 648, 657, 658, 659, 685, 687, 698, 716, 717, 734, 735, 737, 743, 754, 758, 768, 773, 800, 808, 825, 846, 852, 857, 862, 888, 889, 933, 936, 951, 952, 956, 957, 958, 959, 960, 961, 962, 963, 965, 967, 968, 969, 970, 972, 974, 976, 977, 978, 982, 983, 985, 986, 988, 996, 997, 1004, 1006, 1012, 1017, 1018], "question": [0, 135, 166, 257, 335, 358, 367, 368, 372, 375, 396, 399, 808, 880, 883, 958, 961, 962, 968, 980, 986], "faq": [0, 375, 396, 673, 959, 972], "how": [0, 4, 5, 7, 8, 9, 10, 20, 21, 25, 26, 32, 33, 37, 50, 51, 52, 53, 56, 59, 68, 69, 70, 73, 77, 79, 85, 101, 105, 110, 111, 114, 117, 118, 119, 120, 122, 123, 127, 129, 143, 154, 156, 164, 167, 168, 169, 170, 173, 178, 186, 187, 193, 198, 199, 200, 201, 204, 205, 211, 215, 222, 223, 228, 231, 234, 235, 236, 238, 248, 252, 253, 255, 257, 258, 259, 264, 266, 267, 269, 270, 271, 277, 279, 281, 283, 284, 295, 304, 308, 309, 310, 324, 325, 327, 330, 335, 340, 341, 345, 349, 355, 356, 357, 358, 363, 366, 367, 369, 370, 372, 375, 379, 380, 381, 386, 388, 389, 390, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 414, 418, 423, 424, 425, 426, 427, 429, 432, 444, 448, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 539, 546, 547, 548, 549, 550, 562, 563, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 603, 604, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 669, 670, 672, 673, 685, 701, 737, 770, 777, 780, 781, 791, 802, 823, 825, 828, 831, 835, 836, 837, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 876, 883, 951, 952, 956, 957, 958, 959, 961, 962, 968, 969, 970, 972, 974, 975, 977, 978, 981, 983, 985, 986, 988, 990, 992, 997, 999, 1004, 1006, 1009, 1015, 1018, 1019], "you": [0, 14, 16, 24, 70, 117, 118, 121, 123, 143, 146, 162, 168, 185, 198, 199, 228, 239, 245, 252, 257, 258, 264, 272, 283, 307, 308, 311, 316, 319, 340, 351, 355, 356, 357, 362, 363, 366, 367, 368, 369, 371, 372, 373, 375, 376, 379, 380, 383, 386, 390, 391, 392, 393, 394, 396, 399, 400, 401, 403, 404, 409, 418, 425, 429, 444, 447, 449, 476, 480, 483, 484, 489, 490, 512, 513, 516, 529, 530, 531, 533, 535, 537, 539, 541, 544, 547, 548, 549, 550, 559, 561, 569, 570, 572, 588, 589, 591, 608, 627, 628, 631, 632, 633, 635, 636, 637, 639, 640, 645, 646, 647, 649, 653, 655, 656, 657, 658, 659, 668, 681, 765, 776, 779, 780, 781, 782, 792, 793, 794, 796, 797, 807, 808, 809, 810, 814, 815, 816, 817, 818, 821, 822, 823, 825, 826, 827, 829, 836, 838, 839, 843, 844, 851, 852, 853, 863, 864, 866, 867, 868, 869, 871, 873, 874, 878, 880, 883, 886, 887, 888, 889, 915, 928, 951, 952, 957, 958, 962, 963, 966, 968, 969, 972, 973, 976, 977, 978, 981, 982, 985, 986, 988, 989, 992, 995, 997, 1004, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "can": [0, 4, 5, 7, 8, 9, 10, 12, 14, 16, 19, 24, 25, 26, 27, 31, 32, 33, 37, 40, 42, 43, 46, 48, 49, 53, 55, 56, 57, 59, 60, 61, 62, 64, 69, 70, 71, 72, 77, 78, 79, 80, 81, 85, 96, 98, 99, 100, 101, 103, 105, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 141, 142, 143, 145, 146, 149, 154, 155, 156, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 182, 185, 186, 188, 190, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 205, 213, 214, 215, 218, 219, 220, 226, 227, 228, 229, 230, 232, 236, 239, 242, 243, 244, 245, 247, 248, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 264, 266, 268, 269, 271, 272, 275, 277, 279, 281, 282, 283, 284, 286, 294, 295, 296, 299, 300, 301, 303, 304, 307, 308, 309, 310, 311, 312, 316, 317, 319, 320, 324, 325, 327, 330, 335, 340, 341, 342, 347, 348, 349, 351, 355, 356, 357, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 375, 376, 379, 380, 381, 382, 383, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 413, 415, 418, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 434, 436, 437, 438, 439, 441, 442, 444, 445, 446, 447, 448, 452, 462, 463, 464, 467, 476, 479, 483, 488, 489, 492, 501, 504, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 559, 560, 561, 562, 563, 564, 565, 569, 570, 572, 573, 575, 578, 583, 584, 585, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 613, 615, 616, 619, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 668, 670, 672, 673, 674, 675, 676, 679, 680, 681, 682, 683, 685, 688, 690, 692, 693, 699, 701, 702, 703, 704, 706, 707, 709, 710, 712, 713, 717, 718, 719, 720, 722, 723, 726, 732, 735, 736, 737, 738, 739, 743, 759, 760, 762, 763, 764, 765, 767, 768, 769, 772, 773, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 836, 837, 838, 839, 842, 843, 844, 846, 847, 848, 852, 853, 854, 857, 858, 859, 863, 870, 871, 876, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 890, 891, 894, 896, 898, 902, 904, 909, 914, 915, 921, 923, 925, 928, 930, 932, 933, 936, 943, 946, 947, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 982, 983, 985, 986, 988, 989, 990, 992, 993, 994, 995, 996, 997, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "contribut": [0, 13, 123, 154, 266, 304, 358, 365, 366, 369, 370, 371, 375, 380, 381, 383, 397, 398, 399, 402, 427, 429, 533, 534, 539, 540, 706, 709, 736, 956, 962, 965, 970, 977, 980, 982, 983, 986, 995, 1004, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "activ": [0, 164, 205, 242, 248, 258, 314, 321, 342, 362, 363, 366, 368, 375, 378, 380, 381, 383, 393, 476, 482, 506, 613, 616, 618, 631, 632, 634, 635, 636, 644, 645, 646, 663, 664, 665, 666, 667, 694, 699, 775, 835, 836, 837, 874, 928, 958, 959, 960, 961, 965, 966, 967, 975], "who": [0, 69, 356, 358, 363, 368, 374, 381, 383, 821, 822, 823, 825, 827, 829, 830, 831, 980, 982, 1006, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "also": [0, 4, 7, 11, 17, 19, 24, 25, 26, 27, 32, 46, 48, 53, 56, 57, 59, 63, 69, 70, 77, 79, 84, 85, 95, 103, 105, 113, 117, 119, 121, 122, 123, 127, 129, 142, 143, 144, 146, 149, 151, 154, 162, 167, 168, 169, 170, 173, 177, 178, 180, 186, 189, 190, 193, 197, 198, 199, 202, 206, 214, 215, 218, 229, 231, 236, 248, 255, 257, 258, 259, 260, 263, 264, 266, 267, 268, 277, 280, 285, 288, 290, 293, 299, 300, 301, 303, 304, 307, 308, 309, 310, 320, 323, 324, 325, 327, 329, 340, 341, 342, 345, 346, 349, 351, 355, 356, 357, 361, 362, 363, 365, 366, 367, 368, 369, 370, 373, 375, 376, 378, 379, 380, 383, 386, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 418, 419, 420, 422, 423, 426, 427, 428, 430, 432, 442, 443, 445, 447, 462, 464, 472, 476, 478, 483, 488, 512, 513, 515, 516, 521, 526, 529, 531, 533, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 588, 589, 590, 591, 592, 603, 613, 614, 616, 624, 625, 626, 627, 628, 631, 633, 634, 635, 637, 641, 642, 643, 644, 653, 657, 659, 662, 665, 668, 672, 675, 676, 680, 691, 694, 703, 709, 710, 718, 723, 743, 759, 760, 763, 764, 767, 775, 776, 777, 780, 781, 791, 794, 797, 801, 802, 804, 805, 806, 808, 818, 821, 822, 823, 825, 826, 827, 829, 830, 831, 835, 836, 837, 839, 841, 842, 847, 848, 852, 856, 859, 863, 867, 880, 883, 886, 887, 888, 889, 898, 917, 926, 930, 951, 952, 954, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 972, 973, 975, 976, 977, 978, 982, 983, 985, 986, 988, 993, 995, 996, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "help": [0, 4, 9, 11, 16, 69, 73, 100, 106, 168, 215, 218, 258, 260, 296, 324, 327, 342, 351, 355, 356, 366, 369, 370, 371, 372, 373, 375, 376, 380, 381, 382, 386, 392, 393, 396, 400, 402, 414, 516, 557, 608, 631, 635, 646, 666, 667, 673, 695, 815, 886, 887, 888, 889, 952, 956, 957, 959, 961, 962, 964, 966, 973, 978, 981, 982, 983, 985, 986, 997, 1010, 1011, 1012, 1015, 1018], "triag": [0, 358, 368, 370], "pr": [0, 131, 356, 368, 370, 375, 400, 721, 962, 1014, 1016], "gener": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 25, 26, 27, 29, 30, 31, 32, 33, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 64, 69, 70, 71, 72, 73, 74, 78, 80, 84, 85, 87, 88, 89, 92, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 143, 144, 146, 150, 151, 152, 153, 154, 157, 161, 162, 166, 167, 168, 169, 170, 173, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 248, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 293, 294, 295, 299, 300, 301, 302, 303, 304, 307, 309, 310, 311, 312, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 355, 356, 358, 360, 361, 363, 365, 369, 370, 371, 372, 373, 375, 376, 378, 379, 386, 389, 390, 392, 396, 398, 400, 401, 402, 404, 408, 412, 413, 418, 421, 424, 427, 429, 432, 434, 438, 439, 440, 442, 444, 445, 447, 449, 452, 454, 462, 463, 464, 468, 471, 472, 475, 476, 477, 483, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 516, 518, 520, 521, 523, 524, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 563, 564, 565, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 591, 592, 595, 596, 599, 600, 601, 603, 604, 608, 609, 610, 611, 613, 614, 615, 616, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 650, 651, 652, 653, 654, 656, 658, 659, 660, 661, 666, 667, 670, 671, 672, 673, 674, 675, 676, 682, 685, 687, 698, 702, 703, 704, 717, 723, 737, 758, 761, 765, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 809, 810, 811, 812, 813, 819, 820, 822, 824, 825, 827, 828, 829, 830, 831, 835, 836, 837, 839, 842, 843, 844, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 866, 867, 868, 869, 870, 871, 878, 879, 880, 881, 883, 884, 887, 889, 890, 891, 892, 909, 910, 914, 915, 918, 919, 927, 931, 933, 936, 951, 952, 954, 956, 957, 959, 961, 962, 963, 965, 967, 968, 969, 970, 974, 975, 977, 978, 980, 982, 984, 985, 986, 988, 991, 995, 996, 999, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018], "arturo": [0, 37, 56, 176, 258, 260, 304, 340, 341, 342, 359, 1018, 1019], "amor": [0, 37, 56, 176, 258, 260, 304, 340, 341, 342, 359, 1018, 1019], "tim": [0, 115, 128, 359, 1004, 1009, 1010, 1013, 1014, 1015, 1017, 1019, 1020], "head": [0, 26, 70, 115, 128, 154, 167, 185, 186, 215, 239, 247, 307, 312, 359, 368, 375, 397, 986, 1009, 1010, 1019, 1020], "juan": [0, 359, 1004, 1015, 1016, 1017, 1018, 1019], "carlo": [0, 231, 359, 399, 402, 592, 622, 623, 954, 967, 1004, 1015, 1016, 1017, 1018, 1019], "alfaro": [0, 359, 1015, 1016, 1017, 1018, 1019], "jim\u00e9nez": [0, 359, 1012, 1015, 1016, 1017, 1018, 1019], "luci": [0, 263, 359, 1015, 1016, 1017, 1018, 1019], "liu": [0, 263, 359, 543, 706, 736, 962, 968, 1007, 1010, 1011, 1012, 1015, 1016, 1017, 1018, 1019], "martin": [0, 359, 702, 703, 704, 958, 962, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "loyola": [0, 359, 1017, 1018], "sylvain": [0, 359, 1008, 1013, 1014, 1015, 1016, 1017, 1018], "mari\u00e9": [0, 359, 1013, 1014, 1015, 1016, 1017, 1018], "chiara": [0, 359, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "marmo": [0, 359, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "maxwel": [0, 359, 1014, 1017, 1018, 1019], "norbert": [0, 359, 1006, 1016, 1017, 1018], "prein": [0, 359, 1016, 1017, 1018], "reshama": [0, 353, 359, 1012, 1013, 1015, 1016, 1017, 1018, 1019], "shaikh": [0, 353, 359, 1012, 1013, 1015, 1016, 1017, 1018, 1019], "albert": [0, 226, 359, 1011, 1012, 1013, 1016, 1017], "around": [0, 4, 26, 37, 52, 84, 113, 122, 155, 168, 173, 260, 296, 315, 317, 318, 327, 330, 340, 341, 342, 351, 363, 365, 368, 373, 378, 392, 396, 397, 400, 402, 451, 452, 495, 524, 601, 621, 630, 685, 775, 783, 825, 827, 829, 830, 831, 859, 958, 959, 961, 962, 968, 972, 976, 982, 983, 986, 995, 997, 1008, 1009], "lauren": [0, 352, 673, 677, 959, 1016, 1019], "burk": [0, 352, 1019], "francoisgoupil": [0, 352, 1018], "longer": [0, 4, 53, 113, 168, 182, 295, 310, 368, 369, 396, 399, 400, 402, 429, 516, 957, 961, 962, 964, 967, 977, 986, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "mathieu": [0, 2, 24, 48, 100, 188, 198, 219, 233, 258, 340, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1017], "blondel": [0, 2, 24, 48, 100, 188, 198, 219, 233, 258, 340, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1017], "lar": [0, 2, 14, 98, 146, 164, 175, 186, 216, 340, 341, 342, 365, 451, 452, 458, 481, 511, 517, 519, 522, 523, 525, 526, 528, 632, 633, 634, 635, 636, 637, 644, 645, 646, 659, 663, 664, 665, 666, 667, 984, 995, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1017], "buitinck": [0, 2, 14, 340, 341, 342, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "noel": [0, 2, 109, 110, 111, 112, 1004, 1005, 1006, 1007, 1008, 1016], "daw": [0, 2, 109, 110, 111, 112, 1004, 1005, 1006, 1007, 1008], "dubourg": [0, 2, 152, 156, 986, 1004, 1008], "edouard": [0, 2, 1004], "duchesnai": [0, 2, 1004], "alexand": [0, 2, 392, 397, 515, 845, 1006, 1007, 1008, 1010, 1011, 1012, 1016, 1017, 1018], "fabisch": [0, 2, 1006, 1007, 1008, 1010], "virgil": [0, 2, 9, 1004, 1005, 1007], "fritsch": [0, 2, 9, 1004, 1005, 1007], "satrajit": [0, 2, 1004, 1005], "ghosh": [0, 2, 392, 1004, 1005], "angel": [0, 2], "soler": [0, 2], "gollonet": [0, 2], "chri": [0, 2, 1004, 1007, 1012, 1013, 1014, 1015, 1018], "gorgolewski": [0, 2, 1004, 1007], "jaqu": [0, 2, 31, 45, 51, 53, 72, 88, 89, 101, 180, 193, 194, 195, 220, 332, 335, 1004, 1005, 1006, 1007], "grobler": [0, 2, 31, 45, 51, 53, 72, 88, 89, 101, 180, 193, 194, 195, 220, 332, 335, 1004, 1005, 1006, 1007], "brian": [0, 2, 46, 689, 962, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1017, 1018], "holt": [0, 2, 1004], "arnaud": [0, 2, 1005, 1006, 1007, 1008, 1009, 1010], "joli": [0, 2, 1005, 1006, 1007, 1008, 1009, 1010], "thoui": [0, 2, 1004], "rai": [0, 2, 930, 962, 1004, 1014, 1016, 1017], "jone": [0, 2, 363, 1004], "kyle": [0, 2, 99, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1015, 1016], "kastner": [0, 2, 99, 1006, 1007, 1008, 1015, 1016], "manoj": [0, 2, 42, 146, 179, 1007, 1008, 1009, 1010, 1011], "kumar": [0, 2, 42, 146, 179, 363, 392, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "robert": [0, 2, 48, 71, 146, 185, 365, 397, 508, 515, 609, 637, 702, 703, 704, 715, 845, 952, 958, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1019], "layton": [0, 2, 48, 1004, 1005, 1006, 1007, 1009], "wei": [0, 2, 976, 1004, 1005, 1008, 1009, 1010, 1011, 1013, 1017], "li": [0, 2, 318, 363, 620, 623, 677, 706, 736, 871, 951, 954, 962, 965, 972, 974, 977, 1004, 1005, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "paolo": [0, 2, 1004, 1008, 1014], "losi": [0, 2, 1004], "gill": [0, 2, 113, 114, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "loupp": [0, 2, 113, 114, 399, 535, 536, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "jarrod": [0, 2, 1013], "millman": [0, 2, 1013], "passo": [0, 2, 1004, 1005], "peter": [0, 2, 11, 16, 62, 109, 121, 123, 124, 258, 340, 341, 392, 428, 430, 437, 630, 770, 771, 958, 962, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1019], "prettenhof": [0, 2, 11, 16, 109, 121, 123, 124, 258, 340, 341, 1004, 1005, 1006, 1007, 1008, 1009], "venkat": [0, 2], "raghav": [0, 2, 120, 261, 299, 1008, 1009, 1010, 1011, 1012, 1016], "rajagopalan": [0, 2, 1012, 1016], "jacob": [0, 2, 1009, 1010, 1011], "schreiber": [0, 2, 1009, 1010, 1011], "\u675c\u4e16\u6a4b": [0, 2], "shiqiao": [0, 2, 1004, 1005], "jake": [0, 2, 11, 156, 198, 218, 245, 282, 290, 981, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1018], "vanderpla": [0, 2, 11, 156, 198, 218, 245, 282, 290, 981, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "ward": [0, 2, 36, 39, 44, 52, 54, 55, 61, 67, 164, 170, 400, 422, 426, 443, 510, 832, 1004, 1007, 1009], "farlei": [0, 2, 1004], "ron": [0, 2, 244, 1004], "weiss": [0, 2, 244, 392, 672, 1004], "respons": [0, 146, 168, 193, 197, 200, 267, 340, 365, 373, 380, 391, 392, 393, 399, 402, 444, 462, 463, 464, 612, 613, 614, 655, 656, 679, 681, 683, 775, 776, 963, 969, 980, 988], "If": [0, 4, 11, 16, 27, 32, 42, 49, 70, 81, 98, 117, 122, 129, 158, 162, 167, 178, 197, 212, 214, 257, 264, 272, 282, 290, 299, 304, 327, 335, 336, 340, 341, 342, 349, 351, 355, 356, 362, 363, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 378, 380, 381, 383, 386, 389, 390, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 412, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 492, 494, 495, 499, 502, 503, 504, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 692, 693, 694, 695, 697, 698, 699, 706, 707, 708, 709, 710, 711, 712, 716, 718, 721, 722, 725, 726, 728, 730, 731, 733, 734, 735, 736, 737, 738, 739, 741, 743, 744, 746, 747, 748, 749, 751, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 783, 789, 791, 794, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 907, 913, 915, 917, 919, 923, 925, 928, 930, 931, 933, 936, 937, 943, 946, 947, 948, 949, 951, 952, 954, 956, 957, 958, 959, 960, 962, 965, 966, 968, 969, 972, 974, 976, 977, 978, 979, 982, 983, 985, 988, 989, 995, 996, 997, 1004, 1007, 1008, 1009, 1010, 1013, 1014, 1016, 1017, 1018], "us": [0, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 19, 20, 21, 24, 25, 26, 27, 30, 32, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 64, 65, 67, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 85, 89, 90, 91, 93, 97, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 135, 136, 137, 138, 142, 143, 145, 146, 149, 150, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 175, 176, 177, 178, 179, 182, 183, 185, 186, 187, 188, 190, 193, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 209, 212, 214, 215, 216, 218, 219, 220, 221, 223, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 243, 244, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 270, 271, 273, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 294, 295, 296, 298, 299, 301, 303, 304, 305, 307, 308, 309, 310, 311, 312, 315, 316, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 338, 339, 342, 343, 345, 347, 348, 349, 354, 355, 356, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 376, 379, 380, 381, 382, 383, 386, 388, 389, 390, 391, 392, 393, 394, 395, 398, 402, 403, 404, 405, 408, 410, 411, 412, 413, 419, 420, 436, 437, 439, 441, 443, 451, 458, 460, 461, 465, 473, 483, 488, 489, 496, 511, 523, 525, 526, 527, 528, 535, 552, 554, 555, 557, 558, 560, 564, 566, 567, 573, 576, 577, 579, 582, 584, 590, 597, 601, 602, 605, 610, 617, 619, 623, 628, 631, 632, 635, 641, 642, 644, 648, 656, 664, 666, 667, 668, 675, 676, 677, 679, 680, 692, 695, 696, 697, 702, 703, 704, 706, 708, 710, 712, 715, 716, 719, 723, 726, 731, 736, 738, 739, 743, 744, 746, 747, 748, 749, 751, 754, 755, 756, 757, 760, 761, 763, 772, 784, 785, 786, 787, 788, 789, 790, 799, 807, 809, 811, 813, 815, 819, 820, 829, 830, 831, 833, 841, 842, 845, 847, 850, 860, 861, 863, 865, 866, 868, 869, 870, 873, 877, 879, 888, 889, 890, 891, 894, 897, 898, 899, 904, 905, 914, 915, 923, 925, 929, 930, 931, 933, 934, 938, 939, 940, 944, 945, 951, 952, 954, 955, 957, 960, 961, 963, 964, 965, 967, 968, 969, 970, 972, 973, 974, 975, 979, 980, 981, 982, 983, 984, 985, 988, 989, 991, 992, 993, 994, 996, 998, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "scientif": [0, 32, 135, 136, 137, 138, 231, 358, 362, 366, 378, 383, 392, 432, 442, 481, 986, 989], "we": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 24, 25, 26, 27, 30, 32, 37, 40, 41, 42, 44, 47, 49, 50, 53, 55, 56, 57, 61, 63, 64, 65, 69, 70, 71, 72, 74, 77, 79, 80, 81, 85, 88, 89, 91, 95, 96, 97, 98, 100, 103, 104, 106, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 129, 131, 132, 135, 141, 142, 143, 145, 146, 149, 151, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 180, 183, 185, 186, 188, 190, 192, 194, 197, 198, 199, 200, 203, 205, 206, 209, 210, 211, 212, 213, 215, 218, 219, 222, 223, 226, 227, 229, 230, 231, 233, 236, 238, 239, 242, 243, 244, 245, 247, 248, 252, 253, 254, 255, 257, 258, 259, 260, 262, 263, 264, 266, 267, 268, 269, 271, 275, 277, 279, 280, 282, 285, 286, 287, 288, 290, 293, 294, 295, 296, 299, 300, 301, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 320, 323, 324, 325, 327, 328, 329, 330, 332, 335, 337, 340, 341, 342, 345, 346, 347, 348, 349, 351, 355, 356, 357, 362, 363, 366, 367, 368, 369, 371, 372, 373, 374, 375, 378, 379, 380, 381, 388, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 430, 449, 450, 451, 452, 453, 454, 455, 456, 481, 503, 511, 512, 514, 517, 529, 541, 542, 543, 549, 550, 563, 570, 592, 598, 608, 613, 614, 619, 621, 632, 636, 639, 640, 647, 649, 654, 655, 656, 657, 658, 673, 692, 699, 701, 706, 726, 736, 744, 761, 800, 821, 822, 823, 825, 827, 828, 829, 830, 831, 842, 851, 852, 853, 859, 863, 864, 866, 867, 868, 869, 871, 874, 878, 882, 926, 928, 951, 952, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 974, 975, 976, 977, 978, 979, 981, 982, 983, 986, 988, 992, 993, 994, 995, 996, 997, 1001, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017], "would": [0, 4, 6, 9, 26, 32, 45, 53, 57, 69, 77, 79, 80, 85, 91, 100, 101, 122, 146, 149, 154, 155, 167, 168, 169, 170, 173, 187, 197, 198, 199, 212, 215, 226, 244, 253, 257, 258, 263, 265, 267, 277, 283, 295, 299, 300, 304, 310, 318, 327, 336, 340, 342, 351, 355, 363, 364, 368, 369, 373, 375, 376, 378, 379, 380, 381, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 413, 445, 448, 462, 463, 464, 469, 512, 514, 516, 521, 524, 532, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 548, 550, 564, 565, 568, 570, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 592, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 651, 653, 654, 655, 656, 657, 659, 660, 683, 689, 693, 694, 701, 736, 765, 769, 777, 779, 791, 804, 812, 813, 822, 830, 837, 863, 864, 866, 867, 868, 869, 870, 871, 876, 878, 879, 881, 884, 886, 887, 888, 889, 951, 952, 955, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 972, 977, 983, 986, 988, 993, 995, 997, 1001, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "appreci": [0, 368], "citat": [0, 362, 365, 378], "paper": [0, 146, 173, 257, 365, 373, 378, 392, 394, 423, 429, 458, 484, 514, 521, 543, 622, 639, 647, 648, 652, 657, 660, 673, 768, 816, 825, 828, 870, 871, 958, 962, 965, 968, 977, 997, 1004, 1011, 1012], "machin": [0, 4, 6, 8, 9, 27, 62, 142, 143, 149, 154, 165, 169, 171, 209, 238, 257, 260, 263, 292, 297, 299, 304, 309, 312, 323, 328, 335, 340, 342, 355, 356, 358, 361, 362, 363, 365, 366, 368, 370, 373, 374, 378, 379, 380, 382, 386, 390, 392, 396, 397, 399, 400, 402, 418, 420, 428, 458, 482, 484, 490, 496, 497, 498, 510, 512, 514, 521, 524, 535, 536, 537, 538, 539, 540, 544, 545, 546, 574, 575, 591, 592, 595, 600, 603, 615, 619, 620, 622, 624, 625, 626, 631, 632, 635, 636, 637, 638, 639, 640, 657, 663, 664, 673, 689, 694, 705, 715, 721, 723, 765, 768, 775, 804, 805, 819, 820, 825, 828, 835, 836, 837, 839, 857, 859, 864, 878, 879, 880, 881, 883, 884, 888, 889, 951, 952, 954, 955, 958, 959, 960, 962, 963, 965, 968, 969, 970, 972, 976, 978, 981, 982, 983, 984, 985, 986, 989, 990, 991, 993, 997, 998, 999, 1001, 1004, 1006, 1016, 1017, 1018, 1019], "python": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 355, 357, 362, 366, 368, 369, 370, 371, 372, 375, 376, 378, 380, 381, 383, 393, 400, 476, 488, 489, 562, 680, 788, 853, 930, 962, 972, 978, 980, 983, 985, 986, 988, 989, 991, 997, 999, 1004, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "et": [0, 11, 77, 78, 109, 110, 124, 185, 290, 365, 389, 392, 394, 397, 399, 400, 401, 431, 478, 499, 500, 508, 515, 521, 524, 543, 663, 664, 700, 701, 814, 816, 836, 837, 871, 914, 915, 958, 959, 962, 968, 972, 974, 977, 978, 1012], "al": [0, 11, 77, 78, 109, 110, 124, 185, 290, 365, 389, 392, 394, 397, 399, 400, 401, 431, 478, 499, 500, 508, 515, 521, 524, 543, 663, 664, 700, 701, 814, 816, 836, 837, 871, 914, 915, 958, 959, 962, 968, 972, 974, 977, 978, 1012, 1017], "jmlr": [0, 392, 647, 648, 657, 685, 958, 977], "12": [0, 4, 6, 14, 15, 40, 42, 43, 53, 55, 56, 72, 73, 84, 118, 119, 123, 152, 153, 154, 162, 163, 167, 168, 170, 177, 183, 197, 205, 215, 218, 221, 222, 224, 226, 227, 229, 236, 239, 244, 245, 256, 257, 259, 260, 263, 269, 303, 304, 312, 335, 340, 342, 343, 365, 366, 372, 379, 381, 392, 396, 400, 424, 427, 429, 462, 463, 464, 465, 512, 514, 521, 550, 645, 650, 652, 666, 667, 670, 673, 674, 775, 776, 778, 795, 798, 810, 831, 847, 951, 952, 958, 960, 963, 972, 976, 977, 980, 988, 993, 1002, 1005, 1007, 1011, 1012, 1014, 1015], "pp": [0, 62, 256, 365, 392, 394, 400, 403, 404, 425, 428, 432, 442, 491, 513, 514, 521, 571, 616, 624, 645, 666, 667, 701, 706, 710, 720, 736, 749, 763, 814, 816, 818, 835, 855, 866, 955, 962, 964, 965, 975], "2825": 0, "2830": 0, "2011": [0, 47, 168, 219, 373, 397, 400, 515, 518, 520, 521, 527, 571, 608, 619, 639, 710, 952, 966, 976, 981, 1004], "bibtex": 0, "entri": [0, 16, 70, 74, 129, 162, 167, 168, 253, 307, 341, 351, 371, 373, 375, 379, 380, 389, 390, 392, 397, 399, 402, 443, 452, 511, 512, 517, 525, 526, 541, 542, 569, 572, 575, 592, 601, 613, 619, 621, 628, 632, 634, 636, 637, 640, 642, 644, 645, 646, 654, 656, 663, 664, 666, 667, 680, 685, 688, 690, 693, 696, 697, 699, 706, 709, 710, 711, 714, 715, 718, 723, 736, 738, 739, 763, 765, 768, 769, 770, 771, 790, 803, 819, 820, 827, 828, 829, 830, 831, 850, 856, 867, 948, 951, 952, 958, 962, 965, 972, 977, 983, 988, 1011, 1014, 1015, 1017], "articl": [0, 17, 69, 340, 363, 367, 368, 375, 396, 405, 455, 686, 958, 962, 997, 1017], "titl": [0, 4, 5, 6, 7, 8, 9, 11, 13, 14, 20, 21, 24, 25, 26, 27, 30, 32, 34, 37, 38, 39, 41, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 77, 78, 80, 81, 84, 85, 90, 94, 95, 96, 97, 98, 99, 103, 104, 105, 111, 112, 113, 117, 118, 119, 122, 123, 125, 128, 131, 132, 138, 141, 142, 144, 145, 146, 149, 150, 151, 153, 154, 155, 156, 157, 167, 176, 177, 179, 181, 182, 184, 185, 186, 189, 190, 196, 197, 199, 201, 202, 203, 205, 206, 211, 214, 215, 218, 219, 220, 226, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 251, 252, 256, 257, 258, 260, 261, 262, 266, 267, 271, 272, 279, 280, 283, 284, 285, 286, 288, 289, 290, 299, 303, 304, 317, 320, 323, 324, 325, 326, 327, 330, 336, 337, 340, 346, 347, 348, 367, 368, 371, 375, 393, 962, 985, 993], "p": [0, 11, 13, 24, 26, 27, 41, 60, 79, 80, 84, 91, 103, 121, 142, 152, 173, 209, 214, 215, 218, 220, 230, 245, 257, 263, 264, 290, 362, 363, 365, 366, 372, 375, 389, 390, 392, 394, 395, 397, 399, 401, 402, 403, 405, 423, 425, 427, 430, 437, 449, 451, 454, 455, 458, 478, 508, 514, 518, 520, 521, 527, 529, 530, 531, 533, 535, 536, 537, 538, 539, 541, 544, 545, 546, 571, 573, 574, 575, 576, 577, 579, 580, 581, 585, 586, 587, 588, 589, 590, 596, 597, 608, 621, 624, 669, 671, 673, 675, 680, 686, 696, 704, 721, 732, 766, 768, 779, 785, 786, 787, 790, 804, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 835, 839, 840, 855, 866, 872, 888, 889, 890, 955, 956, 958, 959, 960, 962, 964, 965, 966, 967, 968, 969, 972, 976, 977, 980, 992, 995, 1004, 1005, 1007, 1010, 1012, 1019], "ython": 0, "f": [0, 4, 5, 7, 11, 12, 14, 16, 17, 26, 32, 37, 43, 47, 48, 49, 52, 53, 57, 63, 66, 70, 74, 85, 98, 113, 116, 117, 119, 122, 129, 130, 137, 140, 142, 145, 146, 147, 149, 155, 156, 158, 164, 166, 167, 168, 169, 173, 181, 183, 186, 197, 198, 199, 207, 215, 219, 230, 232, 235, 239, 247, 255, 257, 258, 259, 260, 263, 264, 266, 267, 269, 277, 293, 294, 295, 301, 304, 307, 309, 311, 315, 316, 335, 340, 341, 342, 351, 363, 368, 369, 371, 373, 378, 390, 393, 397, 399, 400, 401, 402, 467, 488, 489, 511, 512, 517, 518, 546, 562, 563, 573, 576, 577, 579, 580, 581, 585, 586, 587, 588, 589, 590, 598, 608, 613, 616, 639, 694, 703, 706, 709, 710, 736, 763, 764, 767, 768, 778, 779, 782, 784, 785, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798, 803, 836, 837, 841, 850, 853, 854, 858, 859, 893, 898, 899, 954, 957, 966, 969, 970, 972, 976, 1006, 1012, 1013, 1014, 1016, 1018], "g": [0, 4, 7, 8, 9, 10, 12, 16, 24, 25, 26, 27, 32, 53, 64, 69, 72, 81, 85, 103, 113, 114, 121, 122, 129, 136, 149, 150, 151, 152, 154, 156, 157, 158, 162, 166, 179, 182, 197, 198, 199, 215, 219, 223, 232, 242, 257, 261, 262, 268, 275, 283, 299, 304, 318, 334, 342, 351, 355, 360, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 378, 380, 386, 390, 391, 392, 394, 396, 397, 399, 400, 401, 402, 404, 483, 508, 511, 513, 514, 517, 521, 535, 536, 537, 538, 539, 544, 545, 547, 548, 549, 550, 562, 563, 569, 570, 572, 574, 575, 578, 585, 592, 598, 603, 604, 611, 614, 615, 645, 655, 658, 661, 667, 673, 678, 701, 708, 718, 720, 743, 765, 777, 780, 781, 783, 791, 795, 800, 801, 802, 803, 806, 809, 814, 818, 821, 822, 823, 826, 828, 829, 830, 831, 835, 842, 844, 849, 852, 855, 857, 859, 861, 863, 864, 865, 866, 867, 868, 869, 878, 886, 887, 888, 889, 914, 915, 930, 951, 952, 956, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 972, 976, 977, 978, 983, 985, 986, 997, 1004, 1008, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "A": [0, 16, 17, 18, 22, 25, 27, 31, 36, 39, 59, 67, 74, 77, 80, 85, 91, 94, 96, 97, 98, 103, 111, 112, 116, 117, 119, 128, 132, 135, 136, 137, 138, 143, 144, 145, 149, 152, 154, 156, 157, 158, 164, 167, 168, 185, 198, 207, 211, 212, 215, 219, 257, 258, 260, 264, 271, 293, 299, 301, 304, 307, 309, 312, 316, 318, 320, 327, 332, 340, 341, 342, 347, 349, 351, 355, 357, 358, 362, 363, 365, 366, 368, 369, 370, 372, 375, 378, 379, 380, 381, 382, 387, 389, 390, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 413, 418, 419, 420, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 438, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 468, 470, 471, 472, 474, 477, 480, 481, 482, 483, 484, 488, 490, 491, 492, 493, 494, 500, 502, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 524, 525, 526, 527, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 550, 562, 569, 570, 571, 572, 574, 575, 578, 583, 588, 589, 592, 598, 601, 608, 611, 613, 614, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 651, 653, 654, 656, 657, 658, 659, 660, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 685, 686, 691, 692, 693, 697, 698, 700, 702, 703, 704, 705, 706, 711, 716, 717, 720, 723, 724, 727, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 744, 746, 747, 754, 755, 756, 757, 758, 761, 768, 771, 773, 775, 776, 777, 780, 781, 783, 788, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 843, 846, 850, 855, 859, 862, 863, 864, 866, 867, 868, 869, 874, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 891, 913, 914, 915, 947, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 975, 976, 977, 978, 981, 982, 983, 988, 989, 995, 996, 997, 999, 1004, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "v": [0, 4, 16, 17, 19, 27, 30, 33, 34, 36, 37, 38, 49, 57, 67, 69, 74, 76, 79, 82, 83, 84, 86, 95, 97, 98, 101, 114, 122, 164, 165, 168, 170, 171, 175, 186, 197, 212, 216, 230, 243, 244, 247, 248, 250, 253, 272, 273, 307, 324, 341, 351, 356, 360, 365, 368, 373, 375, 380, 389, 391, 394, 395, 397, 399, 400, 413, 422, 426, 432, 442, 443, 444, 445, 450, 453, 454, 455, 456, 457, 462, 463, 464, 476, 492, 504, 510, 511, 517, 521, 525, 526, 530, 532, 534, 536, 538, 540, 542, 544, 545, 548, 550, 562, 570, 574, 575, 581, 587, 592, 611, 615, 616, 620, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 651, 653, 654, 657, 659, 660, 669, 676, 680, 682, 685, 698, 716, 717, 719, 734, 735, 737, 768, 773, 777, 782, 789, 791, 801, 805, 807, 808, 809, 812, 813, 814, 822, 830, 832, 835, 837, 839, 840, 843, 846, 852, 853, 854, 859, 862, 872, 878, 879, 880, 881, 883, 884, 887, 889, 893, 956, 957, 958, 959, 962, 963, 964, 967, 970, 976, 977, 979, 999, 1004, 1007, 1008, 1009, 1012, 1014, 1015, 1018, 1019], "b": [0, 8, 9, 10, 24, 26, 58, 64, 79, 101, 103, 110, 112, 113, 118, 122, 123, 132, 135, 136, 150, 151, 152, 157, 162, 179, 182, 197, 198, 203, 215, 233, 235, 256, 260, 262, 267, 271, 275, 310, 318, 351, 363, 365, 368, 371, 372, 373, 389, 390, 392, 395, 396, 397, 400, 418, 462, 480, 521, 526, 546, 569, 570, 571, 572, 588, 589, 591, 592, 609, 627, 628, 629, 630, 639, 650, 653, 655, 657, 661, 668, 669, 686, 700, 710, 711, 770, 771, 788, 789, 826, 852, 854, 855, 858, 859, 866, 893, 915, 916, 925, 952, 954, 958, 959, 960, 962, 965, 967, 972, 976, 977, 992, 1004, 1012, 1015, 1017, 1018, 1019], "o": [0, 17, 19, 27, 30, 38, 49, 59, 60, 62, 63, 81, 84, 90, 97, 126, 157, 185, 190, 195, 197, 212, 232, 242, 257, 259, 266, 299, 300, 304, 308, 311, 319, 345, 355, 363, 365, 368, 383, 392, 394, 397, 399, 403, 405, 425, 427, 428, 430, 453, 455, 514, 585, 608, 647, 648, 673, 807, 835, 850, 890, 930, 931, 954, 956, 958, 959, 962, 963, 965, 966, 976, 977, 978, 1004, 1007, 1010, 1012, 1013, 1016, 1017, 1019], "m": [0, 8, 9, 11, 19, 26, 27, 44, 57, 58, 62, 63, 64, 79, 80, 95, 132, 154, 179, 181, 197, 215, 257, 261, 290, 319, 323, 334, 340, 355, 356, 362, 363, 365, 366, 371, 373, 380, 383, 389, 390, 392, 394, 397, 399, 401, 403, 425, 426, 430, 437, 453, 454, 480, 493, 508, 512, 514, 516, 521, 620, 626, 630, 645, 652, 666, 667, 670, 674, 689, 697, 706, 721, 736, 738, 739, 775, 776, 825, 850, 915, 941, 942, 952, 954, 956, 958, 959, 960, 962, 963, 964, 965, 966, 970, 972, 976, 978, 986, 1012, 1013, 1014, 1015, 1018, 1019, 1020], "r": [0, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 39, 43, 64, 74, 77, 78, 79, 80, 85, 95, 103, 106, 110, 113, 114, 118, 122, 123, 124, 132, 142, 150, 151, 152, 156, 157, 158, 161, 162, 167, 179, 181, 182, 186, 197, 204, 207, 215, 223, 229, 232, 242, 245, 248, 256, 257, 260, 262, 263, 264, 267, 270, 272, 275, 279, 284, 288, 290, 311, 329, 342, 351, 363, 365, 371, 378, 380, 389, 390, 392, 394, 395, 396, 397, 399, 400, 409, 413, 418, 431, 433, 445, 449, 454, 458, 462, 463, 464, 478, 484, 493, 500, 514, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 547, 548, 549, 550, 569, 570, 571, 572, 587, 590, 591, 592, 608, 616, 620, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 666, 667, 673, 677, 697, 702, 703, 704, 708, 710, 761, 765, 768, 777, 791, 794, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 828, 829, 830, 836, 837, 850, 855, 866, 873, 874, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 891, 928, 952, 954, 956, 958, 959, 962, 963, 964, 965, 966, 969, 970, 972, 976, 977, 978, 982, 997, 1004, 1008, 1011, 1014, 1015, 1016, 1017, 1019], "d": [0, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 30, 31, 32, 37, 38, 42, 48, 49, 50, 59, 60, 62, 69, 70, 81, 88, 91, 95, 98, 103, 105, 120, 149, 157, 197, 205, 211, 213, 215, 223, 227, 229, 230, 231, 232, 245, 256, 257, 265, 275, 283, 284, 290, 295, 315, 316, 319, 326, 327, 332, 342, 362, 363, 365, 369, 373, 378, 390, 392, 394, 395, 397, 399, 400, 402, 403, 425, 427, 432, 440, 443, 468, 473, 483, 506, 514, 516, 537, 538, 545, 546, 562, 563, 571, 595, 596, 600, 603, 604, 625, 626, 629, 650, 651, 652, 661, 669, 670, 673, 674, 678, 680, 686, 689, 702, 703, 704, 706, 736, 744, 748, 758, 761, 768, 789, 814, 816, 818, 819, 820, 835, 846, 850, 852, 855, 866, 871, 888, 889, 893, 954, 956, 958, 959, 960, 961, 962, 964, 970, 972, 974, 977, 978, 985, 993, 994, 995, 1007, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018], "perrot": [0, 1004], "e": [0, 4, 8, 10, 11, 16, 25, 26, 32, 53, 56, 60, 69, 77, 79, 80, 81, 84, 85, 98, 100, 101, 113, 119, 121, 122, 125, 135, 142, 145, 146, 157, 166, 167, 168, 173, 177, 186, 187, 197, 198, 199, 215, 218, 219, 232, 253, 257, 258, 260, 262, 263, 271, 272, 283, 290, 301, 304, 307, 309, 335, 342, 347, 348, 349, 351, 355, 356, 357, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 378, 379, 380, 383, 386, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 418, 420, 422, 425, 426, 427, 430, 434, 443, 449, 450, 451, 452, 453, 455, 456, 476, 478, 480, 481, 482, 483, 504, 513, 515, 516, 518, 520, 521, 529, 530, 531, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 557, 562, 563, 569, 570, 571, 572, 574, 575, 578, 584, 585, 587, 588, 589, 590, 591, 592, 598, 603, 604, 611, 614, 615, 616, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 665, 668, 669, 671, 673, 675, 678, 680, 682, 685, 686, 689, 690, 708, 709, 710, 711, 718, 721, 722, 735, 743, 747, 765, 768, 775, 776, 777, 780, 781, 783, 790, 791, 795, 800, 801, 802, 803, 804, 806, 818, 819, 820, 821, 822, 823, 825, 829, 830, 831, 835, 836, 837, 842, 844, 847, 849, 850, 851, 852, 854, 855, 857, 858, 859, 861, 863, 864, 865, 866, 867, 868, 869, 878, 879, 885, 886, 887, 888, 889, 893, 909, 914, 915, 917, 920, 921, 930, 937, 948, 951, 952, 954, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 972, 973, 976, 977, 978, 983, 985, 986, 995, 996, 997, 1004, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "journal": [0, 80, 168, 257, 263, 362, 363, 365, 392, 394, 399, 432, 442, 453, 514, 521, 608, 616, 626, 670, 673, 674, 686, 696, 711, 714, 715, 738, 739, 766, 804, 809, 855, 866, 951, 952, 956, 958, 959, 960, 963, 969, 974, 976, 977], "research": [0, 166, 257, 263, 363, 365, 378, 392, 481, 493, 616, 626, 673, 715, 804, 809, 951, 959, 963, 965, 977, 982, 983, 986], "volum": [0, 65, 78, 154, 363, 365, 392, 394, 402, 453, 514, 749, 958, 977, 986], "page": [0, 12, 17, 26, 70, 71, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 167, 168, 169, 178, 218, 227, 228, 229, 236, 237, 238, 239, 247, 255, 257, 258, 264, 269, 296, 308, 309, 311, 312, 317, 349, 355, 363, 365, 368, 369, 371, 373, 375, 381, 391, 392, 394, 453, 496, 497, 498, 609, 625, 809, 873, 915, 952, 962, 963, 988, 997, 1002, 1004, 1008, 1009], "want": [0, 4, 12, 24, 25, 26, 63, 70, 146, 162, 167, 197, 198, 199, 248, 257, 271, 295, 320, 324, 340, 341, 351, 355, 356, 357, 366, 367, 369, 371, 372, 373, 378, 379, 380, 381, 383, 386, 390, 391, 392, 393, 394, 399, 400, 401, 480, 483, 484, 490, 515, 529, 635, 636, 637, 639, 640, 647, 649, 655, 656, 657, 744, 825, 828, 844, 851, 871, 878, 951, 958, 961, 962, 963, 966, 968, 972, 973, 977, 982, 983, 988, 996, 1004, 1018], "its": [0, 4, 9, 12, 13, 19, 26, 34, 37, 64, 65, 77, 79, 81, 85, 90, 91, 100, 118, 122, 135, 146, 149, 154, 156, 167, 168, 170, 173, 176, 186, 210, 214, 215, 220, 226, 234, 237, 239, 242, 247, 248, 256, 260, 262, 264, 266, 277, 279, 283, 284, 301, 310, 318, 324, 337, 340, 341, 345, 349, 351, 356, 357, 361, 362, 363, 364, 368, 369, 371, 372, 375, 378, 379, 380, 381, 383, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 408, 421, 422, 423, 425, 426, 430, 434, 436, 440, 443, 444, 445, 447, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 477, 483, 503, 511, 513, 514, 517, 518, 520, 521, 522, 524, 530, 535, 536, 537, 538, 539, 540, 544, 545, 546, 564, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 608, 625, 626, 652, 653, 655, 666, 667, 668, 669, 673, 677, 689, 705, 709, 710, 716, 717, 721, 758, 761, 763, 775, 776, 777, 800, 807, 808, 821, 822, 823, 825, 826, 827, 829, 830, 831, 838, 839, 843, 848, 851, 852, 854, 870, 871, 874, 878, 879, 886, 888, 898, 899, 904, 910, 930, 932, 951, 957, 958, 959, 961, 962, 963, 964, 965, 968, 969, 970, 975, 976, 977, 978, 982, 986, 988, 990, 992, 995, 996, 997, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "api": [0, 12, 50, 164, 225, 227, 236, 240, 277, 341, 342, 357, 358, 361, 362, 368, 370, 371, 376, 377, 378, 379, 381, 383, 386, 397, 399, 400, 410, 411, 414, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 444, 448, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 476, 484, 488, 490, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 543, 544, 546, 547, 548, 549, 550, 559, 561, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 592, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 639, 658, 669, 670, 671, 672, 775, 776, 780, 781, 805, 823, 825, 827, 828, 831, 835, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 876, 882, 883, 928, 930, 951, 960, 961, 962, 965, 972, 976, 982, 983, 986, 988, 992, 994, 999, 1001, 1002, 1003, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "design": [0, 13, 79, 129, 152, 166, 167, 178, 247, 299, 349, 357, 362, 368, 372, 378, 379, 380, 381, 382, 392, 399, 401, 402, 495, 508, 613, 614, 629, 646, 650, 657, 661, 666, 777, 795, 796, 814, 816, 952, 958, 959, 962, 963, 972, 982, 983, 986, 990, 1006, 1013], "mai": [0, 8, 19, 25, 39, 44, 46, 55, 70, 85, 95, 109, 119, 146, 153, 155, 157, 158, 167, 173, 177, 186, 203, 223, 260, 262, 264, 265, 293, 304, 316, 327, 340, 341, 342, 351, 355, 356, 357, 360, 362, 363, 364, 365, 367, 368, 369, 371, 372, 375, 378, 380, 381, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 413, 420, 421, 422, 424, 425, 426, 427, 429, 431, 432, 433, 434, 439, 442, 445, 449, 452, 462, 463, 464, 467, 468, 469, 476, 488, 489, 495, 514, 515, 518, 520, 524, 527, 528, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 552, 554, 562, 575, 578, 583, 591, 592, 598, 601, 615, 616, 618, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 651, 653, 654, 655, 657, 658, 659, 660, 662, 665, 667, 669, 670, 672, 673, 674, 676, 678, 686, 693, 696, 697, 699, 700, 702, 703, 704, 706, 718, 736, 743, 765, 766, 777, 779, 780, 781, 782, 791, 792, 793, 794, 796, 797, 800, 804, 807, 812, 813, 814, 815, 816, 818, 821, 822, 823, 825, 827, 829, 830, 831, 837, 838, 839, 842, 844, 854, 856, 857, 858, 859, 861, 867, 870, 871, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 891, 896, 918, 919, 930, 951, 952, 954, 956, 958, 959, 962, 963, 964, 965, 966, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 983, 988, 994, 995, 1004, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "consid": [0, 4, 12, 13, 25, 39, 65, 70, 80, 95, 99, 119, 120, 122, 141, 145, 146, 162, 168, 197, 199, 257, 260, 264, 268, 277, 283, 284, 299, 309, 324, 332, 335, 340, 351, 355, 356, 357, 360, 367, 368, 369, 373, 375, 378, 380, 388, 392, 397, 398, 399, 400, 401, 402, 403, 404, 419, 425, 430, 437, 454, 488, 489, 501, 513, 529, 530, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 566, 567, 569, 570, 572, 574, 588, 589, 601, 613, 614, 627, 633, 639, 640, 641, 643, 652, 660, 669, 670, 671, 673, 674, 675, 677, 681, 683, 686, 688, 690, 696, 706, 710, 714, 736, 766, 768, 772, 821, 822, 823, 825, 827, 829, 830, 831, 834, 836, 837, 842, 852, 873, 874, 883, 884, 886, 887, 888, 889, 946, 951, 957, 958, 959, 960, 962, 963, 965, 968, 969, 970, 972, 976, 977, 978, 983, 988, 995, 1007, 1008, 1012, 1016, 1017, 1019], "softwar": [0, 355, 365, 368, 375, 378, 380, 400, 608, 616, 639, 952, 986], "from": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 351, 355, 357, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 379, 380, 381, 382, 383, 386, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 413, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 482, 484, 486, 487, 488, 489, 490, 492, 495, 499, 501, 503, 504, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 668, 669, 670, 671, 672, 673, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 696, 698, 699, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 714, 715, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 743, 744, 748, 749, 751, 753, 754, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 907, 908, 909, 910, 913, 915, 917, 918, 919, 920, 922, 924, 925, 926, 927, 929, 930, 931, 933, 936, 950, 951, 952, 954, 956, 957, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 981, 982, 983, 986, 989, 991, 992, 993, 994, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "2013": [0, 173, 365, 396, 397, 516, 706, 736, 954, 962, 981, 1005, 1006], "inproceed": 0, "sklearn_api": 0, "ga": 0, "l": [0, 7, 13, 16, 17, 40, 46, 47, 65, 66, 80, 113, 169, 189, 192, 206, 207, 262, 263, 264, 294, 303, 335, 365, 366, 373, 375, 389, 390, 392, 396, 397, 399, 402, 454, 496, 497, 498, 518, 520, 527, 535, 536, 537, 538, 545, 546, 571, 588, 589, 591, 592, 596, 600, 603, 604, 615, 629, 630, 639, 650, 653, 655, 661, 668, 670, 673, 674, 686, 696, 705, 706, 711, 736, 766, 816, 850, 886, 887, 888, 889, 951, 956, 958, 959, 962, 964, 965, 966, 970, 974, 976, 978, 996, 1007, 1012, 1016, 1017, 1018, 1019], "booktitl": 0, "ecml": 0, "pkdd": 0, "workshop": [0, 400, 814, 964, 981], "languag": [0, 342, 372, 386, 397, 400, 976, 982, 983, 986, 989], "data": [0, 3, 6, 8, 11, 13, 14, 15, 16, 19, 20, 21, 25, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 52, 53, 54, 55, 58, 59, 61, 64, 67, 68, 70, 71, 73, 75, 78, 80, 89, 91, 93, 95, 98, 99, 104, 106, 107, 112, 113, 115, 118, 119, 120, 121, 122, 126, 127, 128, 130, 132, 135, 136, 137, 138, 143, 148, 149, 150, 151, 153, 156, 158, 159, 161, 164, 167, 168, 175, 176, 179, 180, 182, 186, 187, 189, 192, 193, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 210, 211, 213, 214, 215, 216, 218, 219, 220, 221, 222, 226, 229, 230, 231, 234, 236, 239, 242, 243, 244, 245, 246, 248, 251, 255, 257, 259, 260, 261, 262, 265, 271, 275, 277, 280, 281, 283, 284, 285, 286, 287, 288, 290, 294, 295, 298, 300, 301, 302, 305, 307, 309, 311, 312, 316, 317, 319, 320, 323, 324, 326, 331, 332, 335, 340, 346, 347, 348, 349, 354, 356, 358, 360, 361, 362, 364, 365, 368, 369, 370, 373, 374, 375, 376, 379, 383, 386, 388, 389, 390, 391, 394, 397, 398, 399, 400, 403, 404, 405, 407, 409, 410, 411, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 439, 440, 441, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 500, 501, 502, 503, 504, 506, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 596, 598, 599, 603, 604, 606, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 683, 685, 686, 688, 689, 691, 692, 694, 698, 699, 701, 705, 707, 708, 709, 710, 711, 714, 716, 717, 718, 720, 721, 722, 734, 735, 737, 741, 743, 744, 749, 763, 764, 765, 767, 768, 769, 771, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 894, 896, 897, 898, 899, 902, 903, 904, 914, 915, 925, 928, 933, 934, 936, 937, 938, 939, 940, 943, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 989, 990, 992, 993, 995, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "mine": [0, 257, 341, 363, 392, 403, 425, 491, 543, 701, 714, 720, 763, 958, 962, 968, 974], "108": [0, 8, 200, 216, 1005], "122": [0, 27, 28, 112, 154, 162, 168, 201, 231, 373, 963], "high": [0, 4, 9, 11, 12, 25, 27, 31, 37, 40, 44, 49, 56, 61, 64, 69, 73, 79, 80, 97, 98, 113, 115, 116, 117, 122, 123, 125, 127, 137, 138, 146, 149, 155, 162, 166, 168, 169, 170, 192, 198, 199, 211, 218, 219, 220, 226, 230, 242, 248, 255, 259, 263, 264, 272, 283, 284, 293, 295, 301, 303, 304, 318, 324, 326, 327, 340, 341, 347, 348, 355, 363, 365, 368, 372, 375, 376, 378, 379, 389, 390, 391, 392, 396, 398, 399, 400, 401, 402, 425, 427, 429, 430, 432, 449, 462, 463, 464, 533, 534, 537, 538, 539, 540, 543, 544, 545, 546, 547, 548, 625, 651, 652, 660, 670, 673, 674, 706, 711, 722, 726, 736, 769, 770, 785, 787, 819, 820, 824, 853, 854, 858, 880, 882, 883, 886, 887, 888, 889, 931, 951, 956, 957, 958, 959, 961, 962, 965, 966, 968, 970, 972, 974, 977, 978, 979, 982, 983, 988, 989, 991, 997, 1004, 1005, 1007, 1008, 1012, 1015, 1016, 1017, 1018, 1019], "qualiti": [0, 6, 24, 37, 46, 48, 49, 57, 98, 118, 167, 203, 251, 255, 264, 265, 266, 368, 375, 378, 380, 386, 387, 391, 392, 394, 397, 432, 442, 449, 454, 537, 538, 539, 540, 544, 545, 723, 791, 870, 871, 886, 887, 888, 889, 915, 957, 959, 967, 974, 978, 982, 983, 986, 992, 993, 999], "png": [0, 32, 890], "svg": 0, "logo": [0, 396, 784], "avail": [0, 5, 11, 12, 13, 41, 55, 56, 98, 117, 120, 121, 146, 149, 154, 158, 166, 167, 168, 186, 197, 205, 215, 219, 235, 254, 255, 260, 261, 264, 282, 283, 284, 290, 304, 307, 308, 309, 310, 312, 318, 320, 351, 355, 362, 363, 365, 366, 367, 368, 372, 373, 376, 379, 380, 383, 386, 389, 392, 393, 396, 397, 398, 399, 400, 401, 402, 403, 427, 430, 431, 432, 433, 449, 450, 451, 452, 453, 454, 455, 456, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 488, 515, 529, 535, 536, 537, 538, 539, 540, 544, 545, 569, 572, 574, 575, 591, 592, 613, 614, 638, 646, 651, 653, 654, 655, 657, 670, 677, 680, 712, 713, 777, 780, 781, 791, 801, 802, 807, 808, 810, 811, 812, 813, 825, 836, 837, 846, 855, 862, 866, 871, 922, 923, 930, 952, 956, 959, 961, 962, 963, 964, 965, 968, 972, 975, 976, 977, 981, 982, 983, 986, 988, 992, 997, 999, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1020], "doc": [0, 4, 8, 19, 340, 342, 356, 366, 368, 371, 372, 373, 375, 380, 383, 385, 386, 400, 569, 570, 572, 758, 761, 770, 771, 802, 997, 1004, 1008, 1018], "sourc": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 351, 362, 365, 367, 368, 370, 371, 373, 375, 376, 378, 379, 383, 386, 389, 393, 397, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 946, 947, 948, 949, 950, 959, 972, 978, 982, 986, 996, 997, 1014, 1018], "directori": [0, 8, 279, 362, 366, 368, 369, 373, 375, 380, 383, 393, 422, 426, 430, 466, 479, 839, 840, 1018], "driven": [0, 982, 986], "howev": [0, 4, 5, 7, 13, 24, 25, 27, 37, 47, 49, 53, 59, 71, 74, 77, 81, 84, 100, 103, 113, 115, 119, 122, 123, 129, 143, 146, 149, 154, 155, 168, 169, 178, 186, 197, 219, 222, 223, 226, 232, 257, 264, 271, 275, 277, 282, 294, 299, 309, 335, 340, 341, 351, 355, 356, 357, 362, 363, 365, 366, 367, 368, 369, 373, 375, 378, 380, 386, 389, 390, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 421, 424, 427, 429, 431, 434, 439, 476, 488, 512, 531, 547, 562, 563, 570, 587, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 611, 613, 614, 619, 624, 636, 637, 653, 668, 673, 676, 681, 743, 745, 777, 780, 781, 791, 802, 806, 807, 818, 836, 837, 842, 851, 852, 857, 880, 881, 883, 894, 931, 951, 952, 955, 956, 957, 958, 959, 961, 962, 963, 965, 966, 967, 969, 970, 972, 976, 977, 978, 988, 992, 995, 1013, 1014, 1016, 1017], "institut": [0, 365, 965], "privat": [0, 371, 380, 381, 894, 986, 1004, 1012, 1014, 1015, 1017, 1018], "grant": [0, 368], "assur": [0, 380, 775, 776, 1011, 1012, 1013, 1014, 1015, 1016, 1017], "sustain": 0, "like": [0, 4, 12, 19, 52, 57, 59, 69, 88, 91, 98, 103, 105, 112, 116, 122, 125, 149, 155, 167, 177, 197, 248, 257, 260, 261, 264, 265, 271, 286, 296, 299, 304, 307, 318, 327, 340, 341, 351, 355, 357, 360, 362, 363, 366, 367, 368, 369, 371, 374, 375, 376, 378, 379, 380, 386, 388, 392, 393, 395, 396, 397, 399, 400, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 492, 493, 495, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 559, 562, 563, 564, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 744, 748, 749, 750, 752, 753, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 894, 896, 903, 904, 912, 917, 925, 926, 930, 933, 934, 935, 947, 949, 951, 954, 956, 957, 958, 959, 962, 964, 965, 966, 968, 969, 972, 977, 978, 982, 983, 985, 986, 988, 995, 997, 1001, 1004, 1007, 1008, 1011, 1012, 1014, 1015, 1016, 1018, 1019], "thank": [0, 4, 17, 25, 85, 169, 173, 197, 266, 340, 341, 367, 375, 986, 1004, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "funder": 0, "member": [0, 340, 341, 363, 368, 370, 381, 392, 407, 423, 428, 431, 433, 472, 535, 536, 543, 562, 639, 640, 647, 649, 657, 658, 659, 685, 686, 696, 698, 711, 716, 717, 737, 766, 773, 777, 878, 958, 965, 988, 1004, 1016, 1019], "consortium": [0, 986], "foundat": [0, 129, 368, 965], "face": [0, 3, 15, 36, 53, 67, 93, 98, 107, 117, 164, 225, 240, 361, 368, 371, 392, 397, 399, 401, 429, 452, 473, 474, 475, 501, 512, 513, 517, 519, 520, 521, 538, 565, 638, 654, 694, 791, 805, 822, 859, 883, 901, 965, 978, 979, 980, 991, 996, 999, 1004, 1012], "2022": [0, 356, 399, 686, 1018, 1019], "microsoft": [0, 12, 366, 383], "m\u00fcller": [0, 31, 300, 301, 381, 397, 515, 845, 966, 972, 976, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1018], "2020": [0, 363, 1014, 1015, 1016, 1017], "quansight": 0, "lab": [0, 363, 448, 516, 876, 986, 1015], "2021": [0, 366, 368, 383, 652, 1016, 1017], "columbia": 0, "univers": [0, 157, 340, 363, 365, 370, 392, 397, 400, 571, 768, 814, 818, 873, 958, 960, 962, 964], "2016": [0, 223, 362, 392, 951, 1009, 1010], "sydnei": 0, "2017": [0, 257, 362, 390, 392, 403, 425, 962, 1010, 1011], "receiv": [0, 19, 135, 164, 250, 254, 273, 342, 351, 368, 369, 375, 380, 396, 399, 484, 639, 683, 687, 689, 707, 762, 768, 769, 796, 805, 807, 808, 846, 883, 963, 966, 967, 976, 1014, 1015], "improv": [0, 4, 24, 25, 33, 77, 78, 81, 100, 106, 110, 111, 118, 120, 121, 122, 124, 129, 142, 162, 167, 173, 183, 197, 205, 215, 258, 260, 277, 296, 304, 330, 341, 351, 356, 366, 370, 372, 373, 375, 376, 378, 380, 381, 386, 391, 397, 399, 401, 429, 430, 511, 512, 514, 517, 518, 519, 521, 522, 523, 526, 534, 537, 538, 539, 540, 541, 542, 544, 545, 583, 591, 592, 624, 633, 645, 647, 648, 649, 653, 654, 655, 656, 657, 659, 666, 668, 673, 709, 710, 764, 767, 768, 828, 836, 837, 853, 855, 866, 886, 887, 889, 915, 956, 958, 959, 962, 965, 966, 976, 977, 978, 981, 982, 983, 986, 995, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "alfr": 0, "sloan": 0, "posit": [0, 4, 6, 8, 11, 12, 16, 24, 25, 27, 34, 66, 106, 126, 131, 158, 166, 167, 182, 192, 197, 198, 199, 215, 221, 230, 235, 254, 257, 260, 264, 266, 267, 299, 308, 309, 340, 349, 355, 363, 367, 368, 369, 374, 376, 380, 381, 390, 392, 393, 394, 396, 397, 398, 399, 400, 401, 404, 419, 420, 423, 427, 429, 444, 447, 474, 478, 480, 484, 488, 489, 490, 505, 507, 509, 510, 511, 513, 515, 516, 517, 522, 525, 526, 528, 529, 530, 541, 542, 543, 573, 574, 575, 576, 577, 579, 580, 581, 587, 591, 592, 601, 613, 624, 627, 628, 629, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 650, 653, 654, 655, 656, 658, 661, 662, 663, 664, 665, 668, 671, 679, 681, 683, 688, 690, 693, 694, 696, 699, 701, 704, 707, 709, 710, 711, 715, 716, 718, 719, 720, 721, 722, 723, 724, 732, 734, 738, 762, 763, 764, 767, 768, 769, 775, 776, 780, 781, 819, 820, 825, 842, 843, 846, 852, 855, 858, 862, 866, 870, 871, 873, 874, 878, 879, 882, 883, 884, 895, 913, 915, 927, 929, 953, 954, 958, 960, 962, 963, 965, 966, 967, 969, 972, 977, 993, 995, 997, 1005, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "It": [0, 4, 7, 8, 9, 16, 25, 37, 40, 53, 57, 71, 77, 79, 81, 95, 98, 99, 105, 113, 115, 118, 122, 129, 146, 154, 155, 156, 161, 162, 167, 168, 169, 177, 185, 186, 194, 197, 211, 214, 215, 218, 219, 226, 231, 252, 253, 255, 257, 258, 260, 263, 264, 277, 280, 283, 284, 285, 287, 288, 290, 299, 303, 304, 307, 323, 327, 335, 340, 341, 342, 349, 351, 355, 356, 357, 361, 363, 365, 366, 368, 369, 371, 372, 373, 375, 376, 378, 379, 380, 383, 386, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 415, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 432, 439, 442, 447, 449, 454, 458, 465, 467, 476, 488, 495, 504, 513, 515, 516, 518, 520, 521, 529, 530, 533, 534, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 560, 570, 577, 583, 587, 588, 589, 592, 595, 596, 600, 601, 603, 604, 608, 611, 612, 613, 614, 622, 623, 624, 627, 628, 631, 633, 634, 635, 636, 639, 641, 642, 643, 644, 647, 648, 649, 651, 652, 653, 655, 657, 658, 659, 662, 663, 664, 665, 668, 670, 672, 673, 674, 676, 677, 678, 679, 681, 683, 685, 689, 690, 691, 697, 703, 714, 722, 723, 727, 738, 739, 742, 745, 761, 763, 777, 779, 780, 781, 783, 789, 790, 791, 815, 816, 821, 822, 823, 825, 828, 829, 830, 831, 835, 836, 837, 841, 842, 843, 847, 848, 849, 853, 856, 858, 867, 870, 871, 875, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 902, 915, 930, 933, 936, 938, 939, 940, 941, 942, 943, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 973, 975, 976, 977, 978, 982, 986, 988, 994, 995, 996, 997, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "provid": [0, 5, 8, 11, 24, 27, 37, 42, 59, 80, 95, 112, 116, 117, 127, 129, 149, 155, 167, 168, 176, 183, 185, 186, 189, 198, 206, 219, 223, 227, 228, 247, 257, 258, 259, 263, 287, 290, 295, 299, 303, 307, 308, 310, 312, 325, 332, 340, 341, 345, 346, 351, 355, 357, 360, 362, 363, 364, 366, 367, 368, 369, 370, 373, 375, 376, 378, 379, 380, 382, 383, 386, 388, 389, 391, 392, 393, 394, 396, 397, 399, 400, 401, 402, 403, 404, 412, 418, 421, 423, 424, 425, 427, 429, 430, 432, 473, 474, 476, 478, 481, 512, 513, 514, 531, 532, 537, 538, 539, 540, 543, 544, 545, 546, 547, 548, 569, 572, 574, 575, 582, 586, 592, 608, 613, 614, 615, 624, 627, 628, 633, 637, 638, 639, 640, 641, 642, 643, 644, 647, 649, 652, 654, 657, 658, 659, 662, 675, 680, 692, 715, 721, 744, 754, 758, 768, 772, 776, 777, 779, 780, 781, 782, 784, 785, 786, 787, 789, 790, 791, 796, 797, 798, 808, 810, 813, 814, 815, 816, 817, 818, 821, 822, 823, 825, 826, 827, 829, 830, 831, 849, 850, 854, 856, 874, 878, 879, 882, 883, 886, 887, 888, 889, 893, 904, 909, 923, 938, 939, 940, 951, 952, 954, 957, 958, 959, 961, 962, 963, 965, 966, 967, 968, 969, 970, 972, 975, 976, 977, 978, 979, 982, 983, 986, 988, 992, 995, 997, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "2012": [0, 80, 390, 399, 535, 536, 543, 620, 723, 951, 955, 962, 981, 1004], "fulltime": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 341, 342, 345, 346, 347, 348, 349, 351, 355, 356, 357, 362, 363, 365, 366, 367, 368, 369, 371, 372, 373, 375, 378, 380, 381, 383, 388, 389, 390, 391, 392, 394, 395, 397, 399, 400, 402, 403, 418, 422, 424, 425, 426, 427, 430, 432, 435, 437, 438, 439, 441, 442, 443, 444, 445, 447, 448, 452, 476, 479, 481, 499, 503, 514, 516, 518, 520, 527, 542, 547, 548, 549, 550, 571, 591, 600, 608, 609, 610, 611, 615, 620, 621, 624, 627, 629, 631, 633, 635, 641, 643, 645, 647, 648, 650, 654, 657, 658, 659, 661, 666, 667, 671, 673, 675, 772, 775, 776, 777, 779, 780, 781, 782, 784, 786, 791, 792, 793, 796, 798, 800, 801, 802, 803, 804, 807, 809, 814, 815, 816, 817, 818, 819, 820, 827, 829, 830, 831, 835, 836, 837, 838, 839, 840, 841, 843, 844, 846, 849, 852, 853, 854, 858, 862, 870, 871, 875, 876, 880, 883, 884, 892, 917, 928, 951, 952, 954, 955, 958, 959, 961, 962, 963, 964, 965, 966, 967, 969, 970, 972, 974, 975, 976, 977, 978, 982, 986, 988, 993, 995, 996, 997, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "host": [0, 340, 363, 368, 371, 375, 376, 871, 930, 997], "other": [0, 4, 8, 12, 24, 27, 30, 31, 33, 37, 40, 44, 52, 56, 65, 68, 71, 84, 85, 97, 98, 100, 103, 113, 115, 118, 119, 123, 125, 131, 141, 161, 162, 164, 166, 167, 168, 169, 173, 176, 190, 197, 215, 218, 219, 220, 222, 226, 227, 228, 230, 232, 236, 239, 244, 247, 252, 254, 257, 258, 259, 266, 267, 282, 283, 284, 299, 303, 304, 307, 308, 310, 315, 327, 334, 337, 340, 341, 345, 349, 351, 355, 360, 361, 363, 364, 365, 368, 369, 371, 372, 373, 375, 376, 379, 380, 381, 383, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 425, 428, 430, 432, 437, 449, 468, 477, 483, 514, 515, 521, 529, 531, 532, 540, 541, 542, 547, 548, 562, 569, 570, 572, 578, 583, 591, 592, 593, 594, 601, 608, 609, 611, 620, 624, 633, 639, 640, 652, 653, 654, 655, 656, 657, 660, 668, 673, 677, 680, 685, 699, 743, 754, 758, 765, 770, 777, 780, 781, 782, 783, 784, 786, 791, 794, 796, 799, 800, 801, 802, 803, 804, 806, 808, 826, 834, 839, 851, 855, 859, 866, 878, 879, 880, 881, 882, 883, 884, 909, 951, 952, 954, 955, 956, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 975, 976, 977, 978, 980, 983, 985, 986, 988, 992, 995, 996, 999, 1005, 1007, 1008, 1010, 1011, 1012, 1013, 1017, 1018, 1019], "event": [0, 4, 16, 197, 215, 260, 392, 569, 570, 617, 814, 903, 958, 963, 964, 982, 986, 1010], "pari": [0, 365, 393, 446, 744, 847, 973, 1018], "saclai": 0, "center": [0, 7, 8, 9, 13, 24, 26, 33, 37, 38, 40, 42, 43, 45, 48, 49, 50, 53, 55, 58, 59, 60, 62, 63, 80, 90, 100, 102, 105, 120, 121, 122, 123, 146, 162, 168, 178, 189, 191, 197, 198, 208, 209, 221, 222, 226, 227, 242, 245, 246, 252, 258, 268, 282, 285, 287, 294, 299, 301, 302, 311, 317, 325, 327, 328, 329, 334, 341, 342, 363, 364, 365, 372, 391, 392, 394, 395, 397, 398, 399, 405, 421, 423, 424, 427, 428, 429, 432, 434, 439, 440, 441, 442, 443, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 462, 463, 464, 465, 481, 492, 504, 514, 515, 521, 524, 530, 587, 590, 591, 592, 613, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 659, 671, 675, 775, 844, 845, 848, 857, 859, 868, 869, 878, 879, 956, 958, 959, 961, 969, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1017, 1018], "scienc": [0, 38, 79, 157, 362, 365, 378, 392, 421, 434, 518, 520, 527, 669, 670, 674, 826, 952, 954, 958, 959, 962, 965, 974, 983, 986, 991, 1012], "one": [0, 4, 8, 9, 10, 14, 16, 17, 25, 26, 27, 32, 33, 37, 40, 47, 53, 56, 57, 59, 60, 63, 65, 70, 80, 88, 90, 95, 98, 100, 101, 105, 110, 115, 122, 125, 129, 132, 145, 146, 149, 156, 157, 161, 166, 167, 168, 169, 170, 173, 176, 177, 186, 187, 189, 190, 191, 193, 197, 199, 201, 206, 207, 212, 215, 220, 226, 233, 244, 247, 253, 254, 255, 257, 258, 260, 261, 264, 265, 266, 267, 275, 277, 282, 296, 300, 301, 304, 307, 309, 310, 311, 318, 326, 327, 336, 340, 341, 342, 345, 349, 351, 355, 356, 357, 362, 363, 364, 365, 367, 368, 369, 371, 372, 373, 374, 375, 376, 378, 380, 381, 382, 383, 386, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 420, 422, 425, 426, 427, 429, 430, 431, 432, 433, 435, 436, 437, 440, 442, 444, 449, 454, 467, 468, 470, 471, 472, 473, 474, 475, 476, 480, 481, 482, 483, 484, 485, 488, 489, 490, 492, 494, 514, 519, 520, 523, 527, 531, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 562, 564, 565, 569, 570, 571, 572, 591, 592, 596, 597, 601, 608, 611, 613, 614, 615, 616, 624, 628, 629, 630, 631, 635, 638, 639, 640, 642, 647, 649, 650, 652, 654, 655, 656, 657, 659, 661, 669, 673, 676, 680, 684, 690, 701, 714, 730, 731, 734, 743, 751, 754, 758, 759, 760, 761, 763, 768, 770, 771, 774, 775, 776, 777, 780, 781, 783, 784, 785, 787, 789, 791, 795, 796, 800, 802, 803, 805, 806, 807, 808, 809, 811, 812, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 835, 839, 842, 843, 844, 846, 847, 849, 850, 851, 852, 853, 858, 859, 862, 864, 878, 880, 881, 882, 883, 884, 886, 887, 888, 889, 894, 904, 907, 917, 933, 951, 952, 954, 956, 957, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 981, 982, 986, 988, 992, 994, 995, 996, 997, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "2014": [0, 52, 362, 397, 399, 402, 510, 588, 589, 603, 604, 639, 673, 836, 837, 914, 915, 959, 966, 986, 1007], "2015": [0, 168, 362, 402, 689, 702, 703, 704, 836, 837, 962, 969, 986, 1008, 1009], "50": [0, 4, 7, 10, 14, 16, 24, 32, 33, 38, 50, 52, 58, 59, 64, 65, 69, 70, 84, 91, 95, 98, 105, 113, 122, 127, 128, 150, 152, 153, 154, 155, 166, 167, 168, 177, 181, 192, 197, 200, 204, 205, 209, 211, 213, 215, 218, 222, 223, 229, 230, 232, 239, 252, 257, 259, 260, 270, 277, 296, 299, 303, 309, 311, 316, 318, 320, 325, 334, 335, 341, 363, 365, 368, 372, 396, 399, 400, 401, 404, 423, 453, 480, 484, 503, 513, 519, 524, 533, 534, 549, 574, 575, 596, 598, 639, 640, 647, 649, 651, 657, 658, 659, 673, 694, 777, 791, 808, 828, 878, 887, 957, 958, 962, 963, 965, 968, 972, 1004], "2018": [0, 197, 215, 400, 430, 951, 962, 980, 986, 1011, 1012], "nyu": [0, 120, 179, 828], "moor": [0, 715, 962, 986], "environ": [0, 12, 26, 70, 71, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 167, 168, 169, 178, 227, 228, 229, 236, 237, 238, 239, 247, 255, 257, 258, 264, 269, 296, 308, 309, 311, 312, 317, 349, 355, 363, 365, 366, 368, 373, 375, 378, 383, 386, 393, 479, 982, 983, 986, 1011, 1012], "student": [0, 97, 257, 959, 983, 986], "t\u00e9l\u00e9com": [0, 980], "paristech": [0, 24, 25, 42, 226, 980], "rv": [0, 120, 261, 299, 781, 789, 791, 951, 1004, 1005, 1008, 1009, 1010, 1011, 1012], "thierri": [0, 242, 244, 986, 1010, 1011, 1018], "guillemot": [0, 242, 244, 1010, 1011], "labex": 0, "digicosm": 0, "goix": [0, 1008, 1010, 1011, 1012, 1013], "mathurin": [0, 1015, 1017, 1018], "massia": [0, 1015, 1017, 1018], "2019": [0, 168, 366, 392, 432, 442, 673, 959, 969, 972, 1012, 1013, 1014], "dure": [0, 4, 5, 12, 50, 57, 71, 74, 85, 100, 114, 119, 126, 143, 149, 154, 167, 168, 170, 186, 198, 205, 255, 259, 277, 309, 310, 355, 357, 366, 368, 369, 372, 380, 381, 392, 393, 397, 399, 400, 402, 403, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 594, 595, 596, 598, 600, 601, 603, 604, 606, 608, 609, 610, 611, 613, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 769, 775, 776, 777, 780, 781, 791, 800, 801, 802, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 866, 869, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 951, 952, 954, 958, 959, 965, 972, 974, 992, 997, 999, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020], "phd": [0, 392, 399, 983, 986], "chan": [0, 817, 859], "zuckerberg": 0, "initi": [0, 7, 12, 17, 36, 45, 56, 57, 59, 63, 67, 80, 123, 130, 131, 132, 150, 155, 164, 167, 177, 190, 212, 218, 219, 223, 241, 244, 249, 257, 277, 309, 317, 327, 341, 351, 356, 363, 368, 369, 375, 376, 378, 380, 392, 397, 399, 401, 402, 404, 423, 424, 427, 428, 429, 430, 431, 432, 433, 439, 440, 441, 442, 458, 492, 495, 511, 512, 513, 517, 518, 520, 523, 525, 526, 527, 528, 533, 534, 539, 540, 574, 588, 589, 591, 592, 600, 601, 608, 621, 626, 627, 628, 629, 633, 634, 639, 641, 642, 643, 644, 647, 648, 649, 650, 652, 657, 658, 659, 661, 662, 665, 671, 672, 673, 675, 676, 775, 776, 809, 828, 835, 836, 837, 874, 901, 914, 915, 931, 936, 937, 954, 958, 959, 966, 967, 968, 976, 978, 982, 994, 996, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "were": [0, 4, 32, 69, 70, 73, 79, 80, 119, 122, 143, 146, 154, 162, 197, 198, 227, 266, 268, 295, 296, 304, 308, 309, 311, 312, 318, 340, 342, 349, 351, 362, 363, 365, 368, 371, 378, 380, 389, 393, 399, 400, 444, 447, 448, 476, 541, 542, 560, 569, 572, 583, 780, 781, 796, 803, 875, 876, 912, 951, 962, 963, 978, 985, 996, 997, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "through": [0, 7, 115, 119, 157, 167, 218, 231, 252, 257, 260, 282, 303, 304, 325, 332, 342, 349, 365, 366, 368, 369, 374, 376, 380, 381, 383, 392, 395, 397, 399, 401, 402, 444, 447, 452, 515, 537, 538, 541, 544, 545, 546, 562, 574, 575, 578, 628, 632, 634, 636, 639, 640, 642, 644, 646, 649, 657, 658, 669, 672, 701, 783, 855, 866, 870, 871, 886, 887, 888, 889, 921, 951, 952, 959, 962, 964, 965, 966, 968, 970, 972, 976, 977, 978, 986, 988, 995, 997, 1004, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019], "program": [0, 50, 341, 351, 356, 357, 365, 366, 368, 373, 378, 488, 616, 651, 868, 869, 958, 977, 978, 982, 983, 1004, 1006], "immanuel": [0, 1004, 1005, 1009], "bayer": [0, 1004, 1005, 1009], "kemal": [0, 20, 21, 1006, 1007], "eren": [0, 20, 21, 1006, 1007], "tr\u00e9segni": [0, 1006], "hamzeh": [0, 1007, 1008], "alsalhi": [0, 1007, 1008], "issam": [0, 293, 1010], "laradji": [0, 293, 1010], "maheshakya": [0, 1007, 1008, 1009], "wijewardena": [0, 1007, 1008, 1009], "xue": [0, 1008, 1009, 1010, 1012, 1013, 1016], "nelson": [0, 1010, 1011, 1016], "yenchen": [0, 1010], "lin": [0, 514, 639, 977, 1009, 1010, 1011, 1012], "neurodebian": 0, "debian": [0, 355, 366, 373], "packag": [0, 19, 46, 53, 161, 277, 356, 361, 362, 365, 366, 368, 369, 371, 373, 376, 378, 380, 383, 394, 399, 400, 432, 458, 627, 628, 930, 952, 958, 961, 965, 972, 978, 986, 991, 1004, 1010, 1012, 1013, 1014], "dr": [0, 365, 392, 1018], "jame": [0, 365, 396, 809, 963, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1016, 1017], "haxbi": 0, "dartmouth": 0, "colleg": [0, 166], "kindli": 0, "axa": 0, "some": [0, 3, 4, 5, 8, 9, 19, 24, 25, 27, 37, 44, 50, 53, 55, 57, 61, 66, 70, 73, 77, 79, 80, 85, 89, 95, 111, 112, 122, 125, 126, 129, 130, 142, 149, 151, 154, 155, 156, 157, 158, 161, 162, 164, 167, 168, 169, 170, 173, 176, 178, 180, 185, 186, 187, 191, 192, 197, 198, 205, 206, 211, 214, 215, 218, 220, 226, 230, 235, 243, 244, 245, 251, 252, 257, 258, 259, 260, 263, 265, 280, 283, 284, 288, 294, 295, 299, 304, 308, 309, 310, 311, 312, 323, 324, 326, 327, 335, 337, 340, 341, 342, 349, 351, 355, 356, 357, 361, 362, 363, 365, 366, 368, 369, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 383, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 413, 424, 427, 429, 431, 433, 439, 443, 445, 462, 463, 464, 479, 488, 489, 495, 503, 504, 514, 516, 521, 528, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 547, 548, 550, 552, 554, 569, 587, 590, 592, 613, 614, 616, 620, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 651, 653, 654, 659, 660, 663, 664, 670, 673, 674, 678, 679, 681, 682, 683, 688, 689, 696, 701, 706, 707, 718, 719, 720, 726, 734, 736, 737, 743, 762, 764, 767, 768, 769, 772, 775, 795, 796, 812, 813, 814, 815, 816, 817, 818, 822, 830, 837, 839, 846, 879, 881, 884, 886, 887, 888, 889, 898, 899, 930, 951, 952, 954, 957, 958, 959, 961, 962, 963, 964, 965, 966, 968, 969, 972, 975, 976, 977, 978, 981, 982, 983, 985, 986, 988, 993, 995, 996, 997, 1001, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "particip": [0, 367, 368, 381, 986], "could": [0, 4, 9, 13, 27, 37, 42, 53, 70, 71, 95, 98, 111, 112, 119, 122, 143, 149, 154, 162, 166, 167, 168, 197, 198, 206, 215, 222, 231, 232, 251, 257, 280, 285, 288, 310, 323, 324, 340, 345, 357, 368, 373, 375, 380, 383, 386, 390, 396, 399, 400, 404, 454, 513, 518, 588, 589, 610, 652, 779, 784, 786, 951, 952, 958, 959, 969, 970, 972, 977, 983, 996, 1001, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "attend": 0, "psf": [0, 368], "dataia": 0, "possibl": [0, 4, 17, 26, 37, 49, 70, 77, 95, 113, 126, 149, 167, 168, 169, 197, 201, 214, 215, 231, 257, 258, 259, 260, 262, 263, 264, 266, 267, 275, 307, 327, 335, 340, 341, 351, 355, 356, 357, 361, 362, 363, 366, 368, 369, 370, 371, 373, 375, 378, 379, 380, 383, 386, 389, 390, 391, 392, 393, 395, 396, 397, 399, 400, 402, 404, 406, 413, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 442, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 462, 463, 464, 465, 476, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 668, 669, 670, 671, 672, 673, 685, 690, 702, 703, 704, 708, 736, 737, 758, 763, 765, 768, 775, 776, 777, 779, 780, 781, 783, 789, 790, 791, 795, 796, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 896, 898, 899, 902, 907, 930, 933, 936, 951, 954, 957, 958, 959, 961, 962, 963, 964, 965, 970, 972, 977, 978, 983, 986, 988, 995, 996, 997, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1020], "tinyclu": 0, "french": [0, 215], "associ": [0, 11, 24, 25, 79, 149, 166, 167, 245, 315, 317, 340, 375, 392, 394, 396, 397, 399, 400, 429, 449, 450, 451, 452, 453, 454, 455, 456, 473, 474, 475, 504, 537, 541, 544, 586, 587, 611, 626, 639, 640, 647, 649, 655, 656, 657, 670, 676, 680, 711, 719, 822, 830, 844, 856, 867, 875, 884, 886, 888, 904, 961, 962, 965, 972, 975, 986, 996, 1004, 1016], "fond": [0, 986], "de": [0, 12, 24, 25, 26, 27, 73, 114, 129, 149, 150, 152, 153, 154, 155, 156, 158, 188, 231, 232, 317, 335, 365, 616, 669, 744, 958, 959, 983, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "recherch": 0, "scientifiqu": 0, "granada": 0, "interest": [0, 4, 6, 42, 44, 50, 61, 65, 71, 117, 122, 129, 143, 146, 154, 161, 168, 169, 186, 197, 198, 199, 215, 219, 231, 251, 254, 257, 258, 260, 266, 327, 335, 341, 349, 355, 363, 365, 368, 372, 373, 375, 378, 381, 392, 394, 397, 400, 402, 473, 474, 480, 484, 490, 627, 628, 878, 952, 958, 959, 962, 967, 968, 969, 983, 986, 993, 995, 996, 1004], "our": [0, 4, 5, 7, 11, 12, 42, 53, 55, 69, 70, 79, 80, 85, 95, 96, 109, 111, 116, 119, 122, 123, 141, 146, 149, 154, 156, 166, 167, 168, 169, 170, 197, 215, 220, 222, 251, 257, 260, 263, 264, 295, 299, 308, 310, 320, 324, 330, 331, 332, 335, 340, 341, 342, 351, 356, 367, 371, 372, 375, 378, 379, 380, 381, 392, 396, 399, 400, 403, 425, 430, 543, 625, 673, 689, 701, 706, 718, 736, 821, 822, 823, 825, 827, 829, 830, 831, 951, 952, 958, 959, 962, 968, 972, 975, 976, 977, 983, 986, 988, 995, 996, 997, 1011, 1012, 1014, 1015, 1018, 1019], "via": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 351, 355, 356, 360, 365, 366, 369, 371, 375, 378, 379, 380, 381, 383, 386, 389, 390, 392, 393, 395, 396, 397, 401, 402, 418, 481, 515, 519, 521, 523, 526, 539, 540, 592, 597, 602, 605, 619, 620, 621, 622, 637, 647, 649, 654, 657, 668, 670, 673, 674, 680, 690, 777, 799, 807, 808, 809, 811, 817, 825, 836, 840, 859, 951, 956, 958, 959, 961, 962, 963, 969, 970, 976, 977, 983, 986, 988, 999, 1004, 1008, 1009, 1012, 1016, 1017, 1018, 1019, 1020], "numfocu": 0, "all": [0, 4, 5, 7, 8, 11, 13, 16, 19, 24, 25, 27, 34, 38, 39, 40, 42, 43, 48, 52, 53, 54, 59, 63, 74, 81, 90, 95, 97, 98, 110, 115, 117, 118, 122, 131, 132, 146, 154, 155, 157, 164, 166, 167, 168, 176, 183, 189, 190, 191, 197, 198, 199, 200, 206, 208, 212, 214, 215, 218, 219, 226, 232, 236, 239, 243, 245, 247, 255, 258, 259, 260, 261, 263, 264, 265, 267, 269, 275, 277, 282, 295, 299, 300, 304, 307, 308, 309, 310, 312, 315, 317, 318, 319, 324, 327, 332, 336, 340, 341, 342, 346, 349, 351, 355, 356, 357, 361, 363, 364, 365, 366, 368, 369, 371, 372, 373, 375, 376, 378, 379, 380, 381, 388, 389, 390, 391, 392, 393, 396, 397, 399, 400, 401, 402, 403, 404, 406, 407, 409, 410, 411, 413, 414, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 483, 488, 489, 495, 507, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 564, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 681, 682, 683, 686, 690, 694, 695, 696, 697, 698, 699, 701, 702, 703, 706, 708, 709, 710, 712, 713, 715, 716, 717, 718, 725, 726, 728, 730, 731, 733, 736, 741, 749, 754, 758, 761, 762, 763, 764, 765, 766, 767, 768, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 783, 784, 786, 787, 789, 791, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 898, 899, 900, 904, 906, 907, 908, 909, 920, 925, 930, 937, 946, 951, 952, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 967, 969, 972, 975, 976, 977, 978, 982, 983, 986, 988, 989, 991, 992, 994, 995, 996, 997, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "handl": [0, 4, 70, 119, 125, 129, 173, 232, 259, 264, 266, 277, 307, 340, 342, 355, 360, 362, 366, 368, 369, 376, 378, 380, 400, 476, 524, 557, 562, 563, 566, 567, 569, 570, 572, 591, 616, 627, 628, 633, 639, 640, 641, 642, 643, 649, 656, 657, 659, 662, 701, 768, 843, 852, 853, 878, 883, 890, 916, 959, 962, 963, 964, 965, 968, 970, 977, 978, 982, 983, 986, 999, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "non": [0, 3, 5, 9, 10, 13, 15, 24, 25, 33, 37, 49, 56, 61, 70, 74, 79, 81, 96, 97, 98, 100, 109, 112, 119, 126, 127, 129, 142, 143, 145, 153, 155, 162, 164, 167, 168, 169, 175, 176, 183, 190, 191, 196, 198, 199, 201, 203, 212, 213, 215, 216, 221, 222, 227, 228, 229, 230, 232, 242, 244, 248, 250, 251, 257, 266, 273, 277, 281, 296, 299, 301, 303, 304, 308, 309, 310, 311, 319, 322, 324, 329, 330, 335, 336, 338, 340, 341, 342, 349, 351, 355, 356, 360, 363, 364, 368, 369, 372, 373, 375, 376, 378, 380, 381, 390, 391, 392, 393, 396, 398, 399, 400, 401, 402, 404, 418, 422, 426, 430, 432, 436, 442, 443, 444, 445, 447, 448, 468, 476, 477, 483, 484, 488, 506, 512, 515, 516, 518, 520, 524, 527, 529, 531, 532, 533, 537, 538, 539, 540, 541, 542, 544, 545, 546, 552, 569, 570, 572, 573, 576, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 616, 619, 624, 631, 633, 638, 639, 640, 641, 645, 646, 647, 649, 650, 653, 657, 658, 659, 666, 667, 668, 669, 670, 671, 672, 673, 675, 679, 680, 683, 687, 688, 693, 696, 698, 700, 701, 706, 707, 708, 715, 717, 719, 720, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 738, 739, 762, 765, 768, 769, 772, 775, 776, 777, 778, 782, 784, 785, 786, 787, 789, 795, 801, 805, 808, 827, 829, 830, 831, 834, 839, 840, 842, 843, 844, 847, 851, 852, 853, 854, 855, 856, 858, 859, 865, 866, 867, 868, 869, 871, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 898, 899, 913, 915, 919, 921, 925, 951, 952, 953, 954, 955, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 973, 974, 975, 976, 977, 978, 983, 995, 996, 997, 998, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "profit": 0, "organ": [0, 11, 69, 79, 340, 362, 367, 368, 381, 827, 982], "which": [0, 4, 7, 10, 12, 13, 14, 16, 17, 19, 21, 25, 26, 27, 37, 39, 40, 43, 44, 46, 49, 53, 55, 56, 57, 64, 66, 69, 70, 71, 74, 77, 79, 80, 85, 91, 97, 99, 100, 101, 106, 113, 114, 115, 119, 120, 121, 122, 125, 127, 128, 129, 130, 131, 132, 135, 141, 143, 145, 146, 149, 150, 154, 155, 156, 161, 162, 166, 167, 168, 170, 173, 176, 177, 186, 190, 197, 198, 199, 203, 205, 211, 213, 214, 215, 218, 219, 220, 222, 226, 227, 230, 231, 232, 233, 235, 236, 242, 243, 247, 248, 251, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 271, 272, 275, 277, 282, 283, 284, 294, 299, 301, 302, 303, 304, 307, 309, 310, 311, 312, 315, 317, 318, 319, 327, 337, 340, 341, 342, 345, 349, 351, 355, 356, 357, 360, 362, 363, 365, 366, 368, 369, 371, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 409, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 439, 440, 442, 443, 444, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 467, 503, 511, 512, 513, 514, 517, 521, 522, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 554, 559, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 591, 592, 593, 594, 595, 596, 598, 600, 603, 608, 609, 610, 611, 613, 614, 615, 621, 623, 624, 625, 628, 629, 630, 633, 635, 636, 637, 639, 640, 642, 647, 649, 650, 652, 654, 655, 656, 657, 658, 659, 661, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 688, 690, 697, 698, 700, 701, 703, 705, 706, 714, 715, 716, 717, 723, 726, 736, 738, 758, 759, 760, 761, 762, 763, 769, 775, 776, 777, 780, 781, 782, 783, 785, 787, 791, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 829, 830, 831, 832, 833, 836, 839, 843, 846, 850, 852, 854, 857, 858, 859, 860, 862, 870, 871, 873, 874, 875, 878, 880, 883, 884, 886, 887, 888, 889, 890, 894, 907, 910, 914, 915, 917, 930, 931, 934, 937, 943, 946, 951, 952, 953, 954, 955, 956, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 974, 975, 976, 977, 978, 981, 982, 983, 986, 988, 990, 992, 995, 996, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "manag": [0, 85, 239, 354, 362, 366, 369, 371, 375, 378, 380, 381, 399, 430, 448, 607, 876, 956, 978, 983, 986, 997, 999, 1017], "board": [0, 19], "scipi": [0, 13, 17, 19, 34, 41, 46, 47, 53, 54, 77, 78, 81, 96, 98, 101, 103, 121, 167, 170, 183, 187, 199, 243, 247, 248, 254, 257, 265, 269, 277, 282, 287, 296, 308, 309, 315, 316, 355, 362, 363, 366, 368, 369, 373, 376, 378, 379, 380, 383, 385, 392, 397, 400, 430, 431, 432, 433, 437, 442, 443, 476, 483, 488, 512, 514, 515, 521, 524, 562, 563, 566, 567, 569, 570, 591, 592, 629, 630, 634, 638, 639, 640, 644, 647, 649, 650, 651, 653, 655, 657, 658, 659, 661, 665, 668, 672, 673, 676, 680, 740, 743, 758, 759, 760, 761, 770, 771, 781, 789, 791, 805, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 836, 842, 851, 857, 858, 859, 861, 865, 868, 869, 878, 880, 881, 883, 884, 917, 933, 936, 951, 952, 958, 960, 963, 965, 966, 972, 976, 977, 981, 983, 991, 996, 997, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "mission": [0, 341, 986], "foster": [0, 1012], "comput": [0, 4, 6, 7, 11, 13, 26, 37, 39, 41, 42, 46, 52, 54, 56, 57, 59, 60, 69, 71, 78, 79, 80, 81, 96, 105, 109, 113, 116, 117, 121, 122, 123, 124, 145, 149, 154, 156, 157, 161, 167, 168, 169, 170, 173, 177, 178, 182, 183, 184, 185, 186, 197, 199, 205, 211, 214, 215, 219, 222, 227, 229, 230, 232, 235, 236, 238, 253, 255, 257, 258, 259, 260, 264, 266, 268, 277, 279, 281, 283, 284, 286, 287, 290, 299, 307, 311, 312, 316, 318, 327, 335, 340, 341, 342, 349, 356, 357, 358, 362, 363, 365, 368, 372, 373, 374, 376, 378, 379, 380, 382, 383, 386, 387, 389, 390, 391, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 437, 439, 441, 442, 443, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 496, 511, 512, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 554, 563, 566, 567, 570, 571, 572, 574, 575, 584, 585, 586, 587, 590, 591, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 608, 610, 611, 612, 613, 614, 615, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 696, 697, 698, 699, 700, 701, 705, 706, 707, 709, 710, 711, 714, 716, 718, 719, 720, 722, 723, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 844, 845, 848, 849, 854, 855, 856, 857, 858, 859, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 912, 913, 914, 915, 927, 928, 935, 937, 943, 951, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 972, 974, 975, 976, 977, 978, 982, 983, 986, 992, 993, 996, 997, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "particular": [0, 4, 11, 13, 37, 39, 40, 59, 70, 77, 91, 100, 104, 119, 122, 125, 153, 161, 167, 168, 197, 199, 205, 231, 235, 254, 258, 260, 266, 277, 286, 290, 299, 307, 308, 311, 341, 342, 351, 355, 362, 363, 366, 367, 368, 369, 371, 372, 373, 375, 376, 379, 380, 383, 392, 396, 397, 399, 400, 401, 402, 449, 453, 476, 524, 543, 590, 634, 639, 644, 653, 655, 665, 668, 693, 708, 765, 811, 826, 897, 899, 952, 954, 956, 958, 962, 965, 966, 967, 968, 970, 972, 983, 986, 996, 1004, 1007, 1011, 1012, 1013, 1015, 1017, 1018, 1019], "As": [0, 4, 7, 25, 27, 30, 40, 43, 53, 56, 57, 65, 81, 85, 100, 110, 111, 116, 119, 121, 123, 128, 141, 149, 154, 162, 167, 169, 173, 176, 179, 186, 188, 197, 201, 205, 215, 223, 245, 252, 254, 255, 257, 258, 260, 270, 275, 282, 300, 310, 318, 327, 341, 342, 345, 347, 348, 351, 355, 356, 363, 366, 367, 368, 369, 371, 372, 379, 380, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 473, 534, 542, 546, 600, 613, 636, 637, 653, 655, 668, 715, 738, 744, 821, 822, 823, 825, 827, 858, 951, 956, 958, 959, 961, 962, 963, 965, 969, 972, 976, 977, 978, 983, 986, 988, 992, 995, 996, 997, 1004, 1010, 1015, 1020], "fiscal": 0, "home": [0, 12, 27, 84, 112, 129, 153, 155, 157, 158, 189, 206, 312, 332, 346, 363, 366, 375, 383, 391, 466, 479, 660, 986], "ensur": [0, 41, 56, 81, 91, 116, 170, 197, 219, 252, 260, 295, 349, 351, 355, 356, 368, 369, 371, 372, 373, 381, 383, 390, 392, 393, 396, 404, 449, 513, 514, 521, 592, 608, 629, 650, 661, 677, 686, 762, 769, 800, 871, 898, 899, 915, 921, 928, 958, 959, 962, 972, 978, 992, 1006, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "monei": [0, 215, 986], "when": [0, 4, 9, 10, 11, 24, 25, 26, 27, 39, 40, 43, 55, 59, 66, 69, 70, 71, 77, 79, 80, 85, 95, 98, 99, 100, 103, 113, 118, 119, 120, 122, 125, 129, 130, 131, 143, 149, 161, 166, 167, 168, 169, 170, 176, 177, 186, 188, 190, 194, 197, 199, 202, 213, 226, 227, 228, 232, 239, 243, 245, 253, 256, 257, 258, 259, 260, 264, 266, 267, 277, 279, 283, 284, 285, 299, 301, 303, 304, 307, 308, 309, 310, 311, 317, 318, 320, 327, 330, 331, 335, 340, 341, 342, 345, 351, 355, 356, 357, 362, 363, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 378, 379, 380, 383, 386, 389, 390, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 408, 413, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 462, 463, 464, 465, 469, 470, 471, 472, 476, 480, 481, 482, 483, 484, 485, 488, 489, 490, 492, 495, 504, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 555, 556, 558, 560, 562, 563, 564, 565, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 587, 590, 591, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 681, 682, 683, 685, 686, 688, 689, 693, 694, 697, 707, 708, 709, 710, 712, 714, 715, 718, 722, 726, 728, 731, 734, 735, 737, 741, 743, 747, 748, 749, 751, 754, 758, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 773, 775, 776, 777, 780, 781, 782, 783, 791, 795, 796, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 864, 865, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 894, 897, 898, 899, 905, 909, 913, 914, 915, 916, 918, 919, 922, 930, 931, 951, 952, 954, 956, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 972, 974, 975, 976, 977, 978, 983, 986, 988, 994, 995, 996, 997, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "need": [0, 4, 9, 12, 32, 46, 48, 53, 56, 81, 97, 119, 121, 122, 123, 129, 146, 149, 154, 161, 162, 167, 185, 199, 214, 215, 219, 226, 229, 231, 236, 242, 243, 247, 248, 255, 257, 259, 260, 262, 277, 279, 304, 307, 318, 327, 335, 340, 341, 351, 355, 356, 357, 362, 363, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 379, 380, 381, 382, 383, 386, 389, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 408, 418, 420, 422, 426, 429, 445, 483, 521, 531, 552, 563, 569, 570, 571, 572, 608, 616, 619, 620, 621, 623, 630, 647, 649, 652, 657, 660, 673, 701, 702, 703, 704, 761, 765, 775, 776, 777, 780, 781, 791, 792, 793, 800, 808, 811, 819, 820, 836, 839, 842, 846, 851, 852, 856, 873, 880, 883, 951, 952, 954, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 973, 975, 976, 977, 978, 983, 986, 994, 995, 996, 997, 1004, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "keep": [0, 6, 42, 74, 98, 100, 145, 161, 166, 167, 168, 169, 170, 197, 198, 199, 205, 215, 247, 252, 255, 303, 304, 310, 316, 327, 340, 341, 345, 351, 355, 356, 360, 368, 371, 379, 380, 392, 393, 394, 395, 396, 397, 413, 430, 445, 462, 463, 464, 465, 473, 474, 514, 520, 521, 524, 527, 534, 536, 538, 540, 542, 545, 548, 550, 576, 579, 581, 583, 584, 592, 615, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 657, 658, 659, 660, 689, 795, 812, 813, 822, 830, 836, 837, 874, 879, 881, 884, 887, 889, 958, 963, 967, 970, 972, 983, 986, 988, 993, 995, 997, 999, 1004, 1009, 1012, 1013, 1017, 1018], "while": [0, 4, 7, 8, 10, 12, 17, 24, 27, 34, 37, 39, 43, 44, 48, 61, 65, 69, 72, 74, 91, 99, 100, 110, 113, 116, 126, 129, 146, 150, 155, 157, 158, 161, 166, 167, 168, 169, 173, 176, 178, 186, 191, 197, 199, 213, 226, 229, 230, 233, 243, 244, 248, 251, 252, 256, 257, 258, 260, 264, 265, 266, 267, 268, 270, 279, 299, 300, 301, 304, 307, 310, 324, 327, 340, 342, 349, 351, 356, 360, 361, 362, 363, 364, 367, 368, 369, 371, 372, 373, 375, 376, 378, 380, 381, 386, 390, 391, 392, 395, 396, 397, 399, 400, 401, 402, 403, 404, 425, 444, 447, 448, 463, 465, 476, 501, 512, 532, 537, 538, 539, 540, 544, 545, 546, 547, 548, 549, 550, 555, 563, 569, 570, 571, 572, 575, 578, 587, 615, 624, 627, 628, 630, 637, 638, 639, 640, 657, 658, 659, 660, 689, 709, 710, 718, 734, 754, 758, 763, 764, 767, 768, 772, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 793, 794, 795, 800, 801, 802, 803, 804, 806, 814, 825, 827, 829, 830, 831, 838, 839, 840, 841, 842, 855, 866, 871, 876, 878, 879, 886, 887, 888, 889, 894, 919, 951, 952, 955, 956, 958, 959, 961, 962, 963, 964, 965, 968, 969, 972, 974, 977, 978, 983, 988, 994, 995, 997, 1004, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "complianc": 0, "tax": 0, "regul": 0, "mostli": [0, 46, 69, 197, 215, 304, 375, 378, 380, 397, 399, 400, 501, 759, 760, 977, 986, 1012, 1013, 1014], "go": [0, 26, 129, 146, 162, 167, 168, 185, 257, 310, 340, 349, 363, 368, 369, 372, 376, 381, 383, 393, 397, 399, 401, 424, 541, 542, 566, 567, 701, 918, 919, 972, 982, 983, 988, 997, 1015], "toward": [0, 26, 27, 62, 81, 116, 122, 128, 149, 169, 176, 201, 202, 223, 368, 380, 392, 428, 432, 442, 657, 659, 676, 853, 961, 976, 978, 981, 983], "cover": [0, 52, 173, 197, 215, 351, 360, 363, 368, 379, 616, 701, 772, 962, 963, 981], "travel": 0, "expens": [0, 55, 129, 149, 166, 168, 227, 254, 266, 327, 340, 341, 342, 357, 373, 380, 392, 393, 396, 399, 400, 429, 448, 488, 777, 780, 781, 791, 802, 876, 878, 959, 961, 977, 982, 986, 997, 1008], "well": [0, 4, 9, 12, 24, 25, 27, 39, 48, 53, 56, 57, 61, 69, 77, 85, 111, 113, 120, 122, 127, 129, 146, 154, 156, 166, 167, 168, 169, 173, 185, 195, 197, 198, 199, 201, 205, 218, 219, 220, 223, 226, 230, 235, 244, 257, 264, 266, 268, 272, 277, 282, 283, 284, 308, 309, 310, 311, 312, 335, 340, 341, 342, 351, 363, 365, 367, 368, 371, 373, 375, 376, 378, 379, 380, 381, 390, 392, 394, 396, 397, 399, 402, 403, 406, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 439, 440, 444, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 504, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 681, 702, 703, 704, 765, 768, 770, 773, 775, 776, 777, 780, 781, 791, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 913, 914, 951, 952, 954, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 972, 975, 976, 978, 979, 982, 983, 986, 996, 997, 1004, 1005, 1008, 1010, 1011, 1012, 1015], "budget": [0, 119, 814, 815, 816, 817, 818, 951], "1": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 169, 170, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 313, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 351, 355, 356, 357, 362, 363, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 379, 380, 381, 383, 384, 385, 386, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 412, 413, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 468, 469, 471, 473, 475, 476, 477, 480, 481, 484, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 557, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 743, 744, 746, 748, 749, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 898, 899, 904, 909, 912, 913, 915, 917, 919, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 933, 936, 937, 943, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 980, 982, 983, 985, 986, 988, 989, 992, 993, 994, 995, 996, 1000, 1002, 1006], "note": [0, 4, 5, 7, 8, 11, 12, 13, 19, 26, 32, 37, 53, 65, 70, 71, 79, 81, 84, 85, 91, 98, 113, 114, 118, 122, 123, 126, 146, 149, 156, 161, 166, 167, 168, 169, 173, 185, 186, 190, 197, 198, 199, 201, 205, 211, 213, 215, 218, 219, 220, 222, 226, 227, 229, 231, 232, 233, 243, 252, 253, 257, 260, 263, 264, 265, 275, 277, 279, 283, 284, 294, 299, 300, 303, 307, 308, 309, 310, 311, 312, 316, 318, 320, 327, 340, 349, 355, 356, 362, 365, 366, 368, 369, 371, 373, 374, 378, 379, 380, 383, 387, 390, 391, 392, 394, 395, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 413, 415, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 439, 440, 441, 442, 444, 445, 448, 449, 452, 453, 455, 456, 458, 459, 460, 461, 462, 463, 464, 467, 470, 476, 478, 484, 489, 495, 499, 507, 510, 514, 518, 519, 520, 521, 523, 524, 527, 529, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 566, 567, 569, 570, 571, 572, 574, 575, 578, 580, 581, 583, 584, 585, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 610, 611, 613, 614, 616, 617, 619, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 676, 677, 680, 681, 684, 688, 689, 694, 696, 701, 702, 703, 704, 708, 709, 710, 712, 714, 718, 721, 722, 726, 734, 735, 738, 743, 744, 748, 750, 754, 758, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 791, 792, 793, 794, 795, 796, 797, 798, 800, 802, 803, 804, 806, 808, 811, 812, 813, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 891, 894, 904, 905, 914, 915, 925, 930, 937, 951, 952, 954, 955, 956, 957, 959, 960, 961, 962, 963, 965, 966, 968, 969, 970, 972, 975, 976, 977, 978, 979, 981, 983, 985, 988, 995, 996, 997, 999, 1002, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "regard": [0, 5, 7, 11, 53, 70, 100, 137, 149, 154, 168, 169, 186, 194, 199, 220, 232, 259, 266, 267, 335, 341, 364, 368, 372, 378, 380, 386, 391, 392, 397, 399, 400, 402, 424, 427, 432, 439, 442, 481, 595, 600, 637, 639, 682, 723, 776, 783, 803, 821, 822, 955, 958, 962, 964, 965, 967, 969, 976, 977, 978, 990, 997, 1011, 1014], "might": [0, 4, 5, 31, 42, 44, 59, 61, 69, 110, 118, 127, 143, 155, 162, 167, 168, 169, 173, 197, 215, 226, 257, 259, 294, 309, 337, 351, 355, 356, 362, 366, 368, 369, 371, 372, 375, 378, 380, 383, 386, 393, 396, 397, 398, 399, 400, 402, 415, 424, 468, 476, 481, 483, 488, 495, 503, 516, 535, 536, 537, 544, 559, 561, 563, 591, 592, 608, 631, 635, 636, 637, 639, 640, 657, 659, 673, 737, 772, 780, 781, 803, 828, 844, 859, 871, 890, 892, 894, 898, 899, 915, 931, 951, 952, 954, 956, 958, 959, 961, 962, 964, 965, 969, 970, 972, 977, 978, 997, 1005, 1007, 1012, 1013, 1015, 1018, 1019], "pai": [0, 215, 368, 958], "dn": [0, 965], "continu": [0, 17, 19, 42, 119, 120, 149, 164, 168, 198, 205, 215, 219, 222, 238, 243, 247, 248, 295, 298, 304, 305, 309, 310, 349, 363, 366, 369, 370, 371, 372, 375, 378, 380, 381, 383, 392, 397, 399, 472, 573, 576, 577, 580, 581, 588, 589, 590, 613, 627, 628, 633, 634, 638, 641, 642, 643, 644, 706, 722, 736, 789, 791, 842, 844, 846, 848, 849, 858, 859, 875, 887, 925, 951, 958, 959, 962, 963, 965, 966, 972, 978, 983, 985, 986, 988, 995, 1001, 1004, 1006, 1007, 1012, 1017, 1018, 1019], "integr": [0, 42, 70, 143, 157, 186, 295, 309, 366, 369, 370, 371, 373, 375, 380, 383, 397, 402, 696, 735, 766, 937, 961, 969, 986, 991, 1005, 1007, 1008, 1016, 1017], "servic": [0, 4, 227, 368, 371, 986, 1012], "azur": [0, 368], "cirru": [0, 368], "cl": [0, 8, 12, 16, 374, 380, 888], "circlecl": 0, "free": [0, 5, 154, 155, 162, 196, 247, 299, 362, 367, 368, 375, 378, 383, 400, 402, 432, 590, 652, 835, 884, 951, 954, 958, 962, 983, 1012], "cpu": [0, 60, 258, 277, 312, 355, 356, 366, 373, 380, 383, 400, 476, 613, 628, 632, 634, 636, 639, 640, 642, 644, 646, 647, 649, 657, 660, 777, 791, 800, 801, 802, 823, 831, 871, 930, 962, 988, 992, 997, 1009, 1018, 1019], "server": [0, 355, 365, 366, 476, 1012], "anaconda": [0, 356, 366, 371], "inc": [0, 69, 256, 952, 974, 986], "storag": [0, 342, 380, 639, 640, 647, 649, 657, 658, 659, 878, 965, 977, 1007, 1012], "thei": [0, 4, 26, 27, 37, 50, 56, 81, 97, 111, 116, 117, 119, 121, 123, 125, 142, 145, 149, 150, 154, 167, 168, 183, 186, 192, 197, 198, 215, 219, 222, 226, 232, 251, 254, 257, 258, 260, 266, 277, 279, 294, 299, 304, 309, 311, 340, 341, 347, 348, 351, 355, 356, 357, 361, 363, 364, 365, 366, 367, 368, 369, 371, 373, 375, 376, 378, 379, 380, 381, 389, 391, 392, 393, 394, 395, 397, 399, 401, 402, 404, 421, 423, 427, 433, 434, 439, 447, 476, 488, 489, 513, 515, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 560, 569, 572, 591, 600, 610, 624, 627, 628, 633, 639, 640, 641, 642, 643, 651, 653, 657, 659, 662, 668, 742, 743, 745, 748, 754, 769, 777, 791, 808, 814, 815, 816, 817, 818, 836, 839, 841, 847, 858, 859, 880, 883, 886, 887, 888, 889, 893, 951, 952, 954, 956, 958, 961, 962, 963, 964, 965, 967, 968, 969, 970, 972, 973, 974, 976, 977, 978, 986, 988, 992, 994, 995, 997, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "stage": [0, 7, 26, 71, 115, 120, 123, 366, 371, 388, 392, 399, 428, 533, 534, 539, 540, 541, 542, 569, 570, 572, 583, 959, 972, 981, 1012, 1016], "nightli": [0, 356, 370, 371], "build": [0, 4, 7, 17, 32, 43, 66, 73, 99, 118, 120, 126, 132, 143, 145, 160, 161, 163, 164, 167, 205, 262, 265, 277, 295, 296, 300, 342, 351, 355, 356, 357, 364, 369, 370, 371, 372, 373, 380, 383, 385, 391, 392, 393, 396, 399, 400, 423, 470, 481, 483, 504, 533, 534, 535, 536, 537, 538, 539, 540, 543, 544, 545, 546, 566, 567, 569, 570, 572, 608, 609, 611, 672, 694, 695, 778, 782, 786, 795, 799, 801, 840, 857, 859, 886, 887, 888, 889, 891, 911, 951, 952, 959, 962, 966, 968, 972, 977, 978, 982, 983, 986, 989, 991, 995, 996, 1004, 1007, 1009, 1010, 1011, 1013, 1016], "applic": [3, 5, 19, 49, 79, 164, 173, 197, 214, 220, 251, 260, 299, 355, 357, 363, 365, 368, 369, 373, 375, 376, 378, 380, 392, 396, 397, 398, 399, 402, 404, 425, 432, 476, 478, 512, 513, 514, 533, 534, 610, 669, 670, 671, 675, 693, 709, 710, 718, 763, 764, 767, 805, 951, 958, 959, 960, 961, 962, 966, 968, 974, 978, 982, 983, 986, 995, 997, 1004, 1005, 1010, 1012, 1015], "problem": [3, 4, 5, 6, 11, 13, 14, 26, 37, 54, 56, 65, 95, 110, 113, 117, 122, 123, 149, 164, 169, 173, 176, 183, 186, 190, 191, 197, 199, 214, 215, 220, 226, 227, 233, 238, 255, 257, 262, 266, 267, 271, 277, 282, 289, 303, 310, 324, 327, 335, 336, 340, 341, 351, 355, 363, 364, 365, 366, 367, 369, 372, 373, 376, 378, 380, 390, 391, 392, 394, 396, 398, 399, 400, 401, 402, 403, 404, 425, 427, 429, 430, 432, 437, 442, 445, 458, 483, 488, 489, 495, 496, 497, 498, 503, 504, 508, 511, 513, 517, 519, 522, 523, 524, 525, 526, 527, 528, 531, 532, 537, 541, 544, 547, 551, 553, 570, 591, 612, 624, 629, 631, 633, 635, 636, 637, 638, 639, 640, 645, 646, 647, 649, 650, 653, 654, 655, 656, 657, 658, 660, 661, 666, 667, 668, 669, 670, 672, 674, 676, 689, 697, 709, 710, 715, 719, 764, 767, 768, 775, 776, 778, 779, 780, 781, 782, 784, 785, 786, 787, 792, 793, 794, 795, 796, 797, 799, 807, 808, 809, 819, 820, 821, 822, 823, 824, 825, 827, 829, 830, 831, 845, 846, 852, 862, 868, 869, 878, 879, 886, 888, 904, 915, 952, 953, 957, 958, 959, 961, 962, 963, 964, 965, 966, 970, 972, 976, 979, 983, 984, 986, 989, 990, 991, 997, 998, 999, 1004, 1005, 1007, 1009, 1010, 1011, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "medium": [3, 164, 232, 272, 327, 392, 397, 402, 624, 955, 958], "size": [3, 4, 5, 6, 8, 9, 11, 12, 13, 24, 30, 31, 33, 37, 39, 40, 42, 44, 46, 47, 52, 54, 56, 57, 59, 60, 61, 65, 66, 72, 77, 78, 79, 80, 81, 84, 85, 91, 95, 96, 97, 98, 99, 101, 103, 105, 113, 121, 122, 125, 126, 142, 149, 151, 152, 155, 156, 164, 166, 168, 169, 176, 177, 178, 179, 181, 183, 187, 192, 195, 198, 199, 200, 203, 210, 211, 218, 223, 226, 229, 230, 231, 232, 234, 235, 244, 251, 253, 255, 257, 259, 260, 262, 263, 283, 284, 285, 293, 296, 300, 301, 302, 303, 308, 311, 316, 320, 323, 325, 326, 327, 337, 340, 341, 342, 345, 355, 356, 357, 363, 364, 368, 372, 376, 378, 379, 380, 383, 389, 390, 391, 394, 396, 397, 400, 402, 403, 425, 426, 428, 429, 430, 437, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 473, 474, 475, 495, 507, 514, 516, 518, 520, 527, 537, 538, 539, 540, 541, 542, 544, 545, 568, 569, 572, 575, 613, 614, 624, 638, 647, 648, 660, 664, 673, 676, 686, 700, 718, 720, 723, 761, 771, 779, 782, 783, 787, 794, 797, 798, 800, 803, 805, 814, 815, 816, 818, 821, 822, 823, 824, 825, 827, 829, 830, 831, 836, 837, 854, 856, 867, 872, 876, 880, 881, 882, 883, 884, 886, 887, 888, 889, 892, 914, 918, 919, 925, 926, 928, 931, 937, 952, 954, 955, 957, 958, 959, 961, 962, 963, 964, 965, 966, 969, 972, 974, 976, 977, 978, 986, 991, 993, 995, 996, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1019], "interact": [3, 89, 123, 164, 197, 223, 228, 258, 308, 367, 369, 371, 373, 378, 380, 381, 393, 539, 540, 541, 542, 613, 614, 854, 858, 951, 954, 958, 959, 960, 967, 969, 972, 981, 983, 1006, 1011, 1018, 1019], "user": [3, 25, 68, 95, 158, 164, 167, 185, 218, 247, 254, 264, 266, 277, 283, 284, 287, 307, 308, 309, 310, 311, 312, 351, 355, 356, 358, 362, 366, 367, 368, 369, 371, 373, 374, 375, 378, 379, 380, 383, 386, 390, 391, 392, 393, 394, 396, 397, 399, 400, 401, 403, 404, 405, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 439, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 554, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 600, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 678, 679, 680, 681, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 838, 839, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 911, 915, 951, 952, 958, 959, 961, 962, 963, 965, 972, 976, 980, 983, 986, 990, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "interfac": [3, 109, 164, 361, 362, 369, 376, 378, 380, 396, 402, 403, 422, 426, 430, 476, 680, 777, 780, 781, 791, 839, 840, 864, 947, 951, 965, 977, 982, 983, 986, 1004, 1006, 1009, 1010, 1012, 1013, 1018], "compress": [3, 11, 15, 19, 48, 164, 299, 363, 392, 397, 400, 633, 653, 673, 809, 933, 936, 958, 972, 996, 1004, 1013], "sens": [3, 4, 15, 25, 155, 164, 167, 173, 230, 299, 316, 327, 340, 351, 355, 380, 392, 394, 396, 442, 449, 450, 451, 452, 453, 454, 455, 456, 633, 636, 637, 653, 778, 788, 875, 956, 958, 965, 966, 968, 972, 975], "tomographi": [3, 15, 164, 633, 653, 958], "reconstruct": [3, 15, 95, 96, 100, 164, 196, 221, 222, 311, 397, 400, 462, 463, 464, 511, 513, 515, 517, 518, 519, 520, 522, 523, 528, 564, 568, 633, 653, 669, 670, 674, 870, 871, 958, 959, 1018], "l1": [3, 7, 15, 30, 40, 81, 84, 164, 175, 182, 186, 208, 212, 216, 228, 258, 277, 310, 376, 378, 391, 392, 394, 397, 422, 426, 430, 437, 444, 449, 450, 451, 452, 453, 454, 455, 456, 458, 476, 482, 484, 511, 517, 518, 519, 520, 522, 523, 527, 528, 538, 545, 570, 571, 572, 578, 627, 628, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 649, 651, 653, 657, 658, 659, 660, 662, 669, 715, 742, 748, 753, 758, 759, 760, 791, 805, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 851, 859, 865, 878, 879, 885, 887, 889, 901, 944, 958, 960, 962, 965, 972, 976, 977, 978, 995, 1009, 1011, 1017], "prior": [3, 15, 46, 47, 56, 66, 148, 149, 159, 164, 169, 176, 178, 241, 243, 247, 248, 249, 257, 368, 369, 371, 380, 383, 392, 395, 397, 399, 402, 445, 503, 516, 528, 529, 530, 531, 539, 566, 567, 592, 594, 595, 596, 600, 603, 604, 611, 625, 626, 627, 628, 632, 633, 635, 636, 637, 641, 642, 643, 653, 659, 662, 697, 775, 814, 815, 816, 817, 818, 839, 840, 854, 880, 883, 929, 951, 954, 956, 958, 961, 962, 964, 970, 978, 979, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1020], "lasso": [3, 15, 105, 129, 135, 164, 167, 175, 216, 310, 355, 378, 394, 395, 397, 399, 400, 401, 451, 452, 458, 481, 504, 511, 517, 519, 522, 523, 525, 526, 528, 578, 627, 628, 630, 631, 632, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 659, 662, 663, 664, 665, 666, 667, 702, 703, 704, 765, 800, 801, 802, 840, 859, 951, 962, 976, 984, 992, 995, 999, 1004, 1008, 1009, 1010, 1012, 1013, 1015, 1017, 1018], "recognit": [3, 9, 15, 164, 296, 304, 361, 372, 397, 399, 401, 474, 482, 512, 514, 521, 689, 694, 721, 749, 768, 769, 775, 791, 805, 859, 883, 954, 958, 962, 963, 967, 977, 979, 988, 991, 999, 1004], "eigenfac": [3, 15, 164, 363, 397, 474, 521, 694, 791, 805, 859, 883, 979, 991, 1004], "svm": [3, 7, 9, 10, 11, 15, 16, 25, 27, 30, 31, 32, 69, 71, 73, 130, 134, 136, 139, 140, 144, 147, 164, 175, 190, 216, 226, 232, 233, 237, 238, 251, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 267, 268, 272, 301, 307, 309, 314, 318, 321, 322, 325, 334, 335, 338, 340, 355, 358, 363, 369, 373, 380, 386, 393, 396, 397, 399, 401, 418, 474, 484, 492, 495, 521, 535, 536, 543, 547, 548, 557, 574, 575, 580, 581, 586, 620, 624, 649, 657, 658, 659, 670, 678, 679, 681, 683, 694, 715, 722, 777, 791, 797, 801, 802, 805, 807, 808, 825, 839, 840, 852, 859, 874, 875, 950, 951, 954, 957, 959, 960, 962, 963, 967, 975, 977, 979, 984, 988, 991, 992, 993, 997, 999, 1001, 1004, 1005, 1006, 1008, 1009, 1010, 1011], "imag": [3, 6, 13, 15, 19, 32, 36, 46, 48, 51, 54, 57, 67, 69, 88, 93, 95, 107, 117, 144, 153, 164, 188, 219, 228, 231, 234, 255, 286, 295, 296, 308, 315, 316, 340, 341, 360, 361, 363, 365, 368, 372, 375, 378, 380, 383, 385, 392, 397, 422, 426, 432, 442, 473, 474, 475, 476, 482, 483, 486, 487, 514, 515, 517, 521, 588, 589, 672, 678, 718, 805, 849, 958, 962, 963, 965, 967, 974, 978, 982, 986, 988, 993, 994, 996, 997, 999, 1004, 1007, 1012, 1013, 1017, 1019], "denois": [3, 15, 93, 107, 164, 397, 476, 515, 517, 521, 565, 568, 805, 849], "kernel": [3, 6, 9, 10, 11, 15, 16, 30, 31, 73, 93, 105, 107, 130, 136, 138, 144, 148, 150, 151, 152, 153, 156, 159, 161, 174, 198, 211, 225, 226, 233, 237, 240, 251, 255, 257, 259, 262, 263, 267, 272, 278, 291, 310, 317, 320, 322, 324, 327, 328, 329, 332, 333, 336, 338, 351, 355, 358, 360, 369, 378, 380, 390, 392, 393, 396, 399, 400, 413, 421, 428, 432, 441, 442, 445, 462, 463, 464, 471, 476, 478, 482, 484, 494, 513, 514, 515, 521, 524, 534, 536, 538, 540, 542, 545, 548, 550, 574, 575, 591, 592, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 657, 658, 659, 660, 669, 671, 672, 673, 676, 715, 738, 739, 741, 746, 747, 754, 755, 756, 757, 777, 788, 791, 805, 807, 812, 813, 819, 820, 822, 824, 830, 837, 839, 840, 845, 849, 851, 852, 859, 873, 874, 878, 879, 880, 881, 882, 883, 884, 887, 889, 951, 957, 958, 959, 962, 963, 965, 968, 975, 976, 982, 984, 988, 992, 993, 998, 999, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "pca": [3, 6, 15, 68, 71, 73, 75, 85, 89, 93, 97, 106, 107, 164, 219, 221, 231, 233, 237, 256, 277, 281, 286, 310, 351, 360, 369, 380, 391, 392, 393, 398, 408, 453, 456, 476, 482, 484, 494, 512, 513, 514, 515, 519, 520, 523, 524, 529, 624, 639, 669, 671, 673, 777, 801, 805, 828, 835, 838, 839, 841, 849, 857, 859, 954, 956, 959, 965, 972, 976, 978, 993, 998, 999, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1015, 1017, 1018, 1019], "libsvm": [3, 15, 164, 173, 325, 361, 373, 467, 488, 543, 878, 879, 880, 881, 882, 883, 884, 977, 982, 999, 1004, 1006, 1012, 1015, 1018], "gui": [3, 15, 164, 467, 882, 883, 995, 1004, 1005, 1015], "model": [3, 5, 6, 9, 10, 12, 14, 15, 16, 20, 21, 24, 25, 27, 39, 40, 41, 48, 49, 54, 55, 57, 60, 68, 70, 75, 77, 81, 85, 93, 95, 107, 110, 113, 115, 118, 120, 121, 122, 124, 126, 128, 129, 132, 135, 136, 138, 140, 142, 147, 152, 153, 155, 156, 157, 158, 162, 165, 166, 170, 171, 177, 179, 181, 183, 187, 188, 190, 192, 193, 194, 198, 199, 201, 203, 205, 209, 210, 212, 213, 214, 216, 226, 229, 233, 242, 244, 245, 246, 249, 251, 252, 253, 255, 258, 260, 262, 263, 265, 266, 270, 271, 273, 275, 277, 279, 281, 283, 284, 286, 290, 300, 303, 307, 309, 311, 312, 315, 316, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 337, 341, 342, 346, 347, 348, 351, 358, 360, 362, 363, 370, 373, 380, 382, 388, 389, 390, 392, 393, 395, 397, 398, 399, 400, 401, 402, 411, 413, 415, 418, 423, 429, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 468, 469, 476, 478, 481, 482, 483, 489, 502, 504, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 569, 570, 572, 574, 575, 578, 583, 587, 590, 591, 592, 596, 608, 615, 616, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 682, 687, 692, 702, 703, 704, 714, 715, 721, 722, 730, 733, 765, 768, 769, 770, 775, 776, 777, 780, 781, 783, 791, 792, 793, 794, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 824, 825, 826, 828, 830, 835, 836, 837, 839, 840, 842, 844, 846, 851, 852, 854, 855, 856, 858, 859, 863, 864, 866, 867, 868, 869, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 952, 954, 955, 956, 959, 960, 963, 965, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 982, 983, 984, 986, 989, 991, 993, 997, 998, 999, 1004, 1005, 1006, 1007, 1008, 1009], "complex": [3, 9, 14, 15, 16, 149, 154, 161, 164, 211, 214, 225, 232, 240, 250, 266, 273, 300, 307, 310, 311, 314, 321, 327, 342, 344, 350, 364, 368, 372, 378, 393, 397, 399, 402, 403, 421, 425, 427, 428, 430, 447, 469, 480, 481, 482, 494, 514, 521, 531, 537, 538, 539, 540, 542, 544, 545, 585, 611, 619, 637, 639, 657, 658, 714, 730, 777, 805, 807, 835, 839, 840, 844, 852, 859, 874, 878, 881, 884, 886, 887, 888, 889, 951, 952, 954, 955, 957, 961, 963, 968, 972, 975, 983, 984, 986, 999, 1005, 1007, 1013, 1014, 1017], "influenc": [3, 9, 15, 79, 80, 164, 167, 179, 242, 265, 299, 327, 335, 351, 357, 394, 397, 399, 413, 421, 434, 445, 462, 463, 464, 469, 481, 534, 536, 538, 540, 542, 545, 548, 550, 592, 609, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 657, 659, 660, 714, 730, 805, 812, 813, 821, 822, 829, 830, 837, 856, 857, 867, 879, 881, 884, 887, 889, 898, 951, 956, 957, 965, 968, 972, 976, 977, 986, 1007, 1012, 1013], "core": [3, 15, 49, 64, 70, 117, 118, 164, 167, 168, 312, 354, 356, 358, 366, 368, 370, 375, 380, 383, 392, 397, 399, 403, 425, 429, 430, 435, 437, 479, 518, 570, 575, 639, 640, 647, 649, 657, 814, 815, 816, 817, 818, 823, 831, 958, 965, 968, 977, 980, 983, 984, 986, 995, 997, 999, 1006, 1008, 1009, 1011, 1014, 1018, 1019], "classif": [3, 6, 7, 15, 23, 24, 25, 27, 28, 31, 35, 45, 70, 71, 72, 87, 92, 98, 109, 110, 112, 114, 116, 117, 118, 120, 123, 127, 134, 139, 142, 143, 144, 145, 148, 159, 167, 168, 173, 175, 189, 190, 197, 205, 216, 225, 227, 231, 235, 238, 240, 245, 250, 254, 255, 256, 257, 258, 266, 272, 273, 278, 279, 285, 287, 290, 291, 292, 297, 301, 315, 321, 323, 327, 330, 333, 335, 336, 339, 341, 342, 343, 351, 355, 357, 358, 361, 362, 363, 365, 369, 372, 376, 379, 380, 387, 390, 392, 393, 396, 397, 400, 401, 409, 418, 449, 455, 462, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 490, 492, 494, 495, 499, 500, 502, 503, 521, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 585, 586, 587, 590, 591, 592, 594, 595, 603, 613, 614, 624, 639, 640, 647, 649, 655, 656, 657, 678, 684, 686, 688, 689, 693, 694, 696, 697, 699, 706, 707, 709, 710, 714, 718, 721, 722, 723, 734, 736, 738, 739, 762, 763, 764, 766, 767, 768, 769, 772, 774, 777, 778, 780, 781, 782, 783, 791, 795, 796, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 821, 826, 828, 829, 835, 836, 837, 839, 843, 846, 851, 852, 859, 862, 864, 873, 874, 875, 878, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 901, 904, 912, 951, 952, 954, 955, 956, 959, 960, 964, 967, 969, 970, 972, 973, 975, 981, 982, 984, 985, 986, 988, 989, 993, 994, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "text": [3, 7, 11, 12, 14, 15, 16, 19, 31, 32, 40, 44, 53, 56, 59, 61, 63, 69, 79, 80, 120, 177, 191, 192, 226, 230, 236, 237, 242, 244, 250, 263, 264, 268, 273, 282, 285, 287, 293, 301, 310, 314, 316, 321, 334, 343, 345, 355, 357, 358, 360, 361, 362, 368, 372, 378, 380, 392, 393, 395, 396, 397, 399, 402, 427, 429, 448, 467, 468, 469, 479, 483, 488, 501, 516, 524, 544, 596, 606, 633, 639, 647, 649, 655, 657, 678, 684, 686, 688, 694, 698, 709, 717, 771, 773, 777, 791, 805, 814, 816, 818, 821, 826, 839, 840, 842, 843, 851, 874, 875, 876, 878, 890, 891, 892, 912, 951, 954, 958, 960, 962, 963, 964, 966, 969, 972, 974, 976, 977, 981, 983, 986, 989, 999, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020], "outlier": [3, 15, 44, 79, 80, 122, 125, 164, 175, 199, 200, 203, 216, 225, 240, 278, 291, 298, 305, 337, 363, 380, 392, 394, 399, 449, 450, 453, 454, 455, 456, 470, 471, 472, 476, 490, 492, 502, 504, 543, 620, 630, 651, 652, 653, 657, 658, 659, 660, 673, 683, 825, 829, 840, 846, 848, 849, 851, 855, 856, 857, 859, 864, 867, 881, 882, 884, 962, 976, 977, 982, 984, 998, 999, 1004, 1009, 1010, 1012], "detect": [3, 8, 10, 15, 62, 64, 79, 81, 116, 125, 164, 178, 225, 240, 250, 257, 260, 273, 278, 291, 326, 363, 366, 368, 371, 378, 380, 391, 392, 394, 396, 400, 429, 449, 450, 453, 454, 455, 456, 468, 469, 471, 472, 476, 490, 492, 495, 502, 517, 518, 519, 526, 543, 544, 569, 572, 577, 620, 658, 683, 707, 769, 805, 825, 829, 840, 846, 859, 878, 882, 954, 958, 983, 984, 986, 992, 997, 998, 999, 1004, 1007, 1010, 1011, 1012, 1014, 1016, 1017, 1019], "set": [3, 4, 5, 6, 7, 8, 11, 13, 15, 16, 25, 26, 27, 30, 31, 37, 41, 42, 44, 45, 46, 49, 50, 53, 54, 56, 57, 59, 61, 63, 64, 65, 69, 70, 72, 79, 80, 81, 85, 89, 93, 95, 100, 107, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 131, 135, 142, 143, 146, 149, 155, 156, 157, 158, 164, 166, 167, 168, 169, 170, 176, 181, 182, 185, 186, 188, 190, 192, 193, 196, 197, 198, 199, 201, 202, 205, 210, 211, 215, 218, 219, 220, 226, 227, 228, 229, 231, 232, 239, 242, 244, 246, 247, 251, 252, 255, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 271, 275, 279, 283, 284, 285, 286, 287, 290, 294, 295, 296, 299, 301, 303, 304, 307, 309, 310, 315, 316, 319, 320, 324, 326, 329, 335, 340, 341, 342, 347, 348, 351, 355, 356, 357, 360, 361, 363, 365, 366, 368, 369, 371, 372, 374, 375, 379, 380, 381, 383, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 406, 409, 414, 415, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 462, 463, 464, 465, 468, 469, 473, 475, 476, 477, 479, 482, 483, 484, 488, 489, 490, 495, 503, 504, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 678, 679, 681, 682, 683, 684, 694, 695, 700, 702, 703, 706, 707, 708, 709, 710, 711, 714, 718, 720, 721, 725, 726, 728, 730, 731, 733, 736, 759, 760, 762, 763, 764, 765, 767, 769, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 898, 899, 909, 910, 915, 919, 930, 931, 932, 933, 936, 937, 943, 946, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 982, 983, 989, 991, 992, 993, 996, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "predict": [3, 6, 7, 8, 11, 15, 23, 25, 26, 27, 30, 32, 34, 37, 44, 48, 55, 57, 61, 69, 70, 71, 72, 74, 84, 106, 108, 109, 110, 112, 113, 114, 117, 118, 119, 120, 123, 125, 126, 127, 128, 129, 130, 131, 133, 137, 138, 143, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 164, 167, 168, 169, 173, 176, 179, 180, 181, 189, 192, 193, 194, 195, 198, 199, 200, 203, 204, 205, 206, 211, 212, 214, 215, 226, 227, 229, 231, 234, 243, 244, 245, 246, 247, 248, 250, 251, 255, 257, 259, 260, 263, 266, 267, 271, 273, 275, 280, 283, 284, 285, 288, 289, 296, 299, 300, 304, 307, 308, 309, 310, 311, 316, 318, 319, 320, 323, 324, 326, 327, 333, 334, 335, 336, 340, 341, 346, 347, 348, 349, 351, 354, 356, 358, 360, 363, 365, 368, 369, 374, 376, 380, 382, 386, 387, 388, 390, 391, 392, 393, 397, 399, 400, 401, 409, 413, 418, 419, 420, 421, 423, 424, 425, 427, 428, 429, 445, 449, 462, 463, 464, 467, 481, 488, 504, 514, 521, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 557, 563, 574, 575, 583, 587, 591, 592, 594, 595, 596, 597, 603, 606, 608, 609, 611, 612, 613, 614, 615, 616, 618, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 678, 679, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 693, 695, 696, 699, 702, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 718, 721, 722, 723, 726, 728, 730, 732, 736, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 825, 826, 829, 830, 836, 837, 839, 846, 859, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 936, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 963, 964, 965, 966, 968, 969, 970, 975, 976, 977, 978, 981, 982, 983, 985, 986, 989, 991, 992, 993, 997, 999, 1001, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "latenc": [3, 7, 15, 120, 164, 354, 504, 545, 653, 659, 805, 859, 884, 927, 936, 982, 999, 1007], "speci": [3, 15, 164, 278, 291, 340, 363, 398, 478, 687, 769, 824, 882, 893, 962, 968, 1004], "distribut": [3, 4, 8, 9, 10, 15, 27, 37, 39, 44, 52, 53, 56, 61, 74, 78, 79, 80, 91, 110, 112, 122, 125, 141, 149, 158, 164, 166, 167, 173, 176, 197, 199, 201, 220, 222, 226, 230, 242, 247, 248, 253, 257, 263, 265, 278, 282, 291, 298, 299, 301, 304, 305, 315, 316, 332, 335, 340, 355, 356, 363, 364, 365, 366, 368, 371, 372, 373, 380, 386, 390, 391, 392, 394, 396, 397, 398, 402, 404, 427, 429, 449, 450, 451, 452, 453, 454, 455, 456, 468, 478, 483, 495, 496, 497, 498, 499, 503, 512, 513, 516, 530, 531, 532, 543, 592, 606, 621, 623, 625, 626, 629, 639, 640, 650, 660, 661, 669, 670, 671, 673, 687, 689, 704, 732, 769, 775, 776, 781, 782, 789, 791, 795, 796, 805, 815, 818, 824, 828, 835, 842, 855, 856, 857, 858, 859, 866, 867, 868, 873, 874, 882, 893, 917, 930, 951, 956, 958, 960, 961, 962, 964, 965, 967, 968, 974, 975, 980, 982, 983, 988, 992, 996, 998, 999, 1004, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020], "relat": [3, 7, 12, 15, 17, 44, 61, 96, 98, 100, 164, 165, 167, 192, 235, 250, 264, 312, 340, 349, 358, 363, 364, 367, 370, 371, 372, 374, 375, 376, 378, 380, 381, 382, 386, 391, 392, 393, 394, 395, 396, 397, 399, 402, 430, 444, 449, 476, 529, 530, 542, 543, 620, 654, 658, 673, 703, 723, 798, 802, 837, 838, 840, 843, 844, 849, 852, 853, 854, 855, 858, 866, 882, 951, 956, 962, 963, 965, 966, 969, 972, 977, 978, 979, 980, 983, 999, 1004, 1008, 1009, 1010, 1012, 1013, 1016, 1017], "featur": [3, 5, 6, 7, 8, 10, 11, 14, 15, 25, 26, 27, 30, 33, 36, 42, 57, 59, 62, 67, 68, 69, 70, 71, 75, 79, 80, 85, 88, 89, 90, 91, 95, 97, 99, 103, 104, 106, 108, 109, 118, 124, 128, 129, 130, 132, 133, 141, 143, 147, 149, 150, 151, 154, 155, 157, 161, 162, 165, 166, 167, 168, 171, 175, 180, 183, 184, 186, 193, 197, 198, 199, 201, 202, 206, 212, 213, 214, 216, 225, 228, 230, 238, 239, 240, 250, 254, 257, 263, 264, 266, 267, 271, 273, 275, 280, 285, 286, 288, 292, 295, 297, 298, 299, 302, 305, 306, 308, 311, 312, 322, 323, 324, 327, 335, 338, 339, 342, 343, 346, 348, 349, 351, 358, 360, 361, 362, 363, 364, 365, 366, 369, 370, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 386, 390, 392, 394, 395, 396, 397, 398, 402, 403, 404, 405, 408, 412, 413, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 488, 489, 490, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 559, 561, 562, 563, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 599, 600, 601, 603, 604, 606, 608, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 666, 667, 668, 669, 670, 671, 672, 673, 684, 694, 702, 703, 704, 721, 738, 739, 743, 744, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 761, 765, 770, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 898, 899, 912, 927, 937, 938, 939, 943, 951, 954, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 973, 974, 975, 976, 977, 978, 981, 982, 983, 984, 985, 986, 988, 989, 993, 994, 995, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "engin": [3, 15, 19, 40, 115, 154, 164, 355, 362, 365, 392, 398, 400, 402, 444, 476, 542, 620, 654, 798, 802, 837, 838, 840, 843, 844, 849, 852, 853, 854, 858, 952, 962, 972, 980, 1010], "topic": [3, 7, 8, 15, 69, 164, 340, 341, 342, 363, 364, 396, 397, 400, 468, 477, 516, 518, 520, 527, 569, 572, 958, 963, 982, 983, 997, 1009, 1011], "extract": [3, 4, 6, 8, 11, 12, 15, 17, 50, 68, 69, 70, 75, 84, 95, 164, 201, 212, 250, 273, 296, 340, 342, 351, 358, 360, 363, 365, 369, 373, 376, 378, 392, 393, 396, 397, 430, 432, 435, 436, 442, 444, 468, 469, 473, 474, 483, 484, 511, 514, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 527, 564, 565, 569, 570, 572, 574, 575, 578, 580, 612, 699, 768, 777, 791, 816, 838, 839, 883, 915, 926, 951, 959, 963, 967, 972, 976, 982, 986, 989, 993, 994, 999, 1004, 1005, 1013, 1016], "neg": [3, 4, 15, 16, 24, 59, 74, 77, 85, 121, 122, 126, 164, 167, 175, 197, 215, 216, 246, 247, 254, 257, 260, 264, 266, 267, 277, 299, 303, 311, 340, 373, 380, 381, 392, 396, 399, 400, 401, 403, 404, 413, 421, 425, 432, 445, 449, 462, 463, 464, 468, 511, 513, 515, 516, 517, 518, 520, 522, 524, 527, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 550, 569, 572, 573, 576, 577, 579, 580, 581, 583, 585, 586, 587, 588, 589, 590, 592, 616, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 650, 651, 653, 654, 658, 659, 660, 661, 668, 679, 680, 685, 686, 693, 694, 696, 699, 700, 702, 703, 704, 707, 709, 710, 711, 715, 718, 721, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 762, 763, 764, 765, 767, 771, 775, 776, 800, 805, 812, 813, 822, 825, 830, 837, 846, 855, 857, 858, 862, 866, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 913, 915, 930, 960, 962, 963, 965, 966, 967, 968, 976, 977, 997, 998, 999, 1004, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "matrix": [3, 7, 9, 13, 15, 19, 20, 21, 32, 34, 39, 41, 44, 54, 61, 69, 78, 79, 80, 81, 84, 95, 96, 97, 106, 156, 164, 170, 175, 183, 198, 202, 216, 227, 230, 231, 247, 250, 264, 273, 295, 311, 315, 316, 340, 341, 342, 349, 355, 358, 363, 364, 365, 368, 369, 373, 376, 378, 379, 380, 389, 393, 394, 395, 400, 401, 402, 403, 404, 413, 419, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 434, 437, 439, 440, 442, 443, 444, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 472, 476, 477, 480, 481, 482, 483, 484, 485, 488, 489, 490, 499, 501, 503, 504, 506, 507, 509, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 524, 525, 526, 527, 528, 529, 530, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 566, 567, 569, 570, 571, 572, 574, 575, 584, 585, 586, 587, 588, 589, 590, 592, 601, 610, 611, 612, 616, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 693, 694, 695, 696, 697, 699, 709, 710, 711, 714, 718, 719, 720, 721, 734, 735, 738, 739, 740, 741, 743, 744, 746, 747, 748, 752, 754, 755, 757, 758, 759, 760, 761, 763, 764, 767, 768, 774, 775, 776, 777, 780, 781, 791, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 842, 843, 844, 845, 846, 848, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 894, 896, 897, 898, 899, 904, 913, 914, 915, 916, 919, 920, 921, 925, 926, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 948, 952, 954, 956, 958, 959, 963, 964, 965, 966, 972, 973, 974, 975, 976, 978, 979, 996, 997, 998, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "factor": [3, 15, 26, 31, 44, 46, 53, 61, 93, 100, 105, 107, 127, 164, 167, 223, 226, 235, 268, 269, 277, 278, 291, 293, 294, 299, 301, 309, 311, 355, 356, 373, 376, 380, 389, 391, 392, 399, 400, 402, 421, 423, 434, 449, 453, 454, 456, 458, 468, 484, 494, 495, 507, 512, 515, 516, 518, 520, 521, 524, 525, 526, 527, 529, 530, 541, 542, 543, 569, 572, 578, 594, 630, 631, 632, 635, 636, 637, 663, 664, 673, 700, 763, 777, 780, 781, 801, 825, 859, 872, 874, 882, 914, 915, 951, 958, 959, 965, 975, 979, 982, 998, 999, 1004, 1005, 1007, 1008, 1010, 1018, 1020], "latent": [3, 15, 17, 106, 164, 296, 341, 395, 400, 402, 468, 512, 516, 518, 519, 520, 523, 524, 569, 572, 835, 961, 982, 997, 998, 999, 1006, 1009], "dirichlet": [3, 15, 164, 242, 243, 248, 252, 400, 468, 516, 518, 520, 569, 572, 775, 982, 998, 999, 1004, 1009, 1010], "alloc": [3, 15, 25, 60, 164, 269, 309, 364, 368, 392, 400, 424, 427, 439, 468, 516, 518, 520, 565, 569, 572, 627, 633, 641, 643, 780, 781, 783, 803, 806, 951, 972, 982, 998, 999, 1008, 1009, 1014, 1015], "visual": [3, 4, 9, 15, 16, 25, 30, 32, 43, 46, 49, 52, 56, 59, 60, 79, 90, 93, 97, 99, 105, 107, 123, 125, 127, 131, 132, 157, 162, 164, 168, 170, 181, 188, 197, 199, 215, 223, 225, 228, 231, 236, 237, 240, 247, 250, 251, 253, 254, 258, 267, 273, 282, 286, 287, 292, 294, 297, 299, 303, 304, 307, 309, 316, 358, 360, 364, 366, 373, 374, 389, 394, 396, 397, 398, 399, 419, 422, 426, 434, 452, 476, 482, 484, 487, 490, 494, 502, 512, 514, 521, 544, 546, 551, 612, 614, 639, 670, 673, 678, 679, 681, 682, 683, 699, 707, 762, 769, 778, 779, 782, 783, 794, 795, 796, 797, 798, 805, 836, 840, 859, 883, 892, 911, 957, 959, 960, 965, 966, 968, 969, 972, 978, 982, 988, 999, 1007, 1014, 1015, 1016, 1018], "stock": [3, 15, 164, 392, 394, 434, 452, 670, 991], "market": [3, 15, 164, 392, 394, 434, 452, 670, 986, 991], "wikipedia": [3, 15, 24, 164, 375, 391, 392, 576, 588, 589, 617, 637, 649, 652, 663, 664, 676, 685, 686, 688, 690, 693, 697, 699, 706, 709, 710, 711, 714, 715, 718, 723, 736, 763, 765, 766, 768, 769, 770, 771, 821, 822, 827, 828, 829, 830, 857, 872, 886, 887, 954, 958, 962, 965, 974, 978, 997, 1004, 1011], "princip": [3, 15, 83, 86, 93, 97, 99, 100, 102, 104, 107, 127, 164, 218, 231, 233, 286, 304, 309, 360, 392, 395, 404, 464, 511, 512, 513, 514, 515, 517, 519, 520, 521, 522, 523, 524, 525, 526, 530, 638, 669, 670, 671, 673, 674, 805, 828, 840, 859, 914, 915, 959, 965, 998, 999, 1004], "eigenvector": [3, 15, 46, 85, 89, 164, 242, 392, 432, 442, 514, 515, 521, 530, 669, 670, 672, 676, 959, 1004, 1008, 1018], "click": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 368, 375, 986, 988, 990], "here": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 351, 355, 356, 357, 362, 363, 366, 367, 368, 369, 371, 372, 373, 375, 378, 379, 386, 388, 389, 392, 393, 395, 396, 397, 398, 399, 400, 403, 405, 418, 421, 422, 423, 424, 425, 426, 427, 429, 432, 444, 452, 455, 516, 518, 519, 523, 524, 547, 548, 549, 550, 562, 563, 565, 569, 572, 575, 583, 609, 611, 628, 632, 634, 636, 642, 644, 646, 654, 656, 670, 672, 676, 680, 693, 706, 726, 736, 772, 777, 780, 781, 783, 791, 799, 800, 801, 802, 803, 804, 806, 815, 819, 820, 843, 851, 854, 857, 870, 871, 881, 928, 951, 954, 958, 959, 960, 961, 962, 965, 968, 972, 974, 975, 976, 977, 982, 983, 985, 986, 988, 989, 995, 1004, 1012, 1017], "download": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 361, 363, 365, 366, 371, 372, 375, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 490, 978, 993, 995, 997, 999, 1008, 1009, 1012, 1016, 1017, 1018], "exampl": [4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 83, 84, 85, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 355, 356, 358, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 379, 380, 383, 385, 386, 391, 403, 404, 408, 419, 420, 436, 441, 451, 465, 487, 488, 511, 523, 527, 535, 552, 553, 557, 564, 573, 576, 577, 579, 582, 584, 593, 597, 601, 602, 605, 610, 619, 623, 628, 631, 632, 635, 641, 642, 644, 648, 656, 679, 680, 689, 696, 702, 703, 704, 706, 708, 710, 711, 715, 719, 723, 724, 726, 727, 731, 734, 736, 743, 744, 748, 749, 751, 753, 761, 763, 772, 784, 785, 786, 787, 788, 789, 790, 807, 809, 811, 813, 815, 819, 820, 829, 830, 831, 833, 841, 842, 845, 847, 850, 860, 863, 865, 866, 868, 869, 870, 873, 879, 888, 889, 890, 891, 904, 913, 915, 917, 918, 920, 924, 925, 926, 933, 950, 952, 960, 983, 984, 986, 989, 992, 993, 997, 999, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1017, 1019], "run": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 351, 355, 356, 366, 368, 369, 371, 372, 373, 374, 375, 378, 380, 381, 383, 388, 392, 394, 396, 399, 402, 403, 404, 418, 424, 425, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 442, 444, 447, 451, 452, 511, 512, 513, 514, 515, 517, 519, 521, 522, 523, 525, 526, 528, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 563, 573, 575, 576, 577, 579, 580, 581, 583, 591, 592, 615, 621, 627, 628, 630, 632, 633, 634, 636, 637, 641, 642, 643, 644, 663, 664, 669, 670, 671, 672, 673, 674, 675, 761, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 811, 812, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 836, 837, 838, 841, 873, 874, 878, 879, 880, 881, 882, 883, 884, 886, 887, 909, 910, 930, 933, 936, 951, 961, 963, 966, 975, 977, 978, 982, 983, 986, 988, 995, 997, 1004, 1007, 1009, 1011, 1012, 1013, 1014, 1018, 1019], "your": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 351, 355, 356, 357, 362, 366, 367, 368, 370, 371, 373, 375, 376, 378, 379, 380, 383, 386, 391, 392, 393, 394, 400, 403, 404, 425, 483, 513, 541, 542, 560, 583, 615, 627, 668, 777, 780, 781, 783, 791, 802, 804, 909, 959, 966, 972, 975, 976, 977, 978, 979, 981, 982, 985, 986, 990, 997, 1005, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "browser": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 368, 375, 972], "binder": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349], "notebook": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 373, 393, 448, 876, 978, 981, 982, 983, 1015, 1018], "introduc": [4, 77, 79, 80, 100, 145, 164, 169, 176, 225, 230, 240, 264, 312, 342, 361, 364, 366, 368, 369, 371, 372, 375, 378, 380, 383, 390, 392, 394, 396, 397, 399, 400, 414, 422, 423, 424, 426, 427, 429, 439, 444, 448, 462, 463, 464, 465, 476, 484, 495, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 535, 536, 546, 547, 548, 549, 550, 562, 563, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 639, 645, 666, 667, 669, 670, 805, 823, 828, 831, 835, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 872, 876, 956, 958, 961, 964, 965, 968, 972, 974, 976, 977, 988, 995, 1004, 1005, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "differ": [4, 5, 7, 10, 12, 13, 14, 16, 24, 27, 30, 31, 34, 36, 37, 43, 45, 46, 49, 53, 56, 57, 63, 64, 65, 66, 67, 69, 70, 71, 79, 84, 85, 89, 90, 91, 95, 97, 98, 100, 103, 104, 105, 109, 113, 115, 118, 119, 122, 124, 129, 130, 131, 132, 135, 138, 141, 146, 148, 149, 150, 151, 154, 155, 156, 159, 161, 162, 164, 166, 167, 169, 173, 176, 177, 183, 184, 185, 186, 188, 194, 197, 198, 199, 201, 202, 203, 204, 205, 215, 218, 219, 220, 223, 226, 228, 231, 232, 235, 242, 244, 245, 246, 247, 248, 252, 253, 254, 255, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 271, 272, 277, 283, 284, 286, 293, 294, 298, 303, 304, 305, 307, 322, 326, 327, 331, 335, 336, 338, 340, 341, 342, 351, 355, 356, 357, 362, 363, 365, 366, 367, 368, 370, 372, 374, 376, 379, 380, 383, 386, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 415, 418, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 438, 439, 442, 444, 455, 458, 470, 473, 474, 476, 483, 484, 488, 489, 492, 494, 502, 517, 518, 519, 520, 526, 527, 529, 530, 535, 536, 543, 569, 570, 571, 572, 575, 592, 594, 595, 596, 600, 603, 604, 608, 613, 614, 615, 619, 624, 625, 628, 630, 632, 634, 636, 639, 642, 647, 648, 649, 657, 658, 659, 661, 671, 673, 675, 679, 680, 681, 682, 685, 686, 687, 688, 690, 696, 698, 699, 707, 708, 709, 710, 711, 714, 717, 723, 737, 738, 739, 748, 758, 762, 763, 764, 766, 767, 769, 770, 771, 773, 776, 777, 779, 780, 781, 782, 783, 786, 791, 792, 793, 794, 795, 796, 797, 800, 802, 803, 806, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 832, 835, 839, 844, 848, 849, 851, 855, 856, 857, 859, 863, 864, 865, 866, 867, 868, 869, 878, 880, 883, 886, 887, 888, 889, 926, 951, 952, 954, 955, 957, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 972, 975, 976, 977, 978, 979, 983, 986, 988, 990, 991, 992, 996, 997, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "strategi": [4, 52, 54, 57, 60, 70, 119, 124, 129, 145, 161, 162, 164, 169, 186, 197, 205, 215, 228, 237, 250, 258, 260, 262, 266, 267, 273, 292, 297, 298, 305, 307, 308, 311, 342, 354, 369, 373, 379, 380, 396, 399, 400, 401, 404, 418, 419, 420, 432, 442, 452, 482, 484, 492, 494, 502, 513, 518, 531, 532, 541, 542, 547, 548, 551, 569, 570, 572, 573, 575, 583, 608, 609, 611, 615, 626, 628, 632, 634, 636, 642, 644, 646, 654, 656, 672, 676, 685, 694, 735, 737, 773, 777, 780, 781, 783, 791, 794, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 836, 844, 849, 873, 878, 880, 883, 886, 887, 888, 889, 933, 951, 952, 961, 963, 964, 965, 966, 968, 970, 972, 976, 977, 978, 982, 992, 997, 999, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020], "leverag": [4, 8, 37, 49, 85, 215, 340, 341, 355, 356, 366, 396, 399, 854, 951, 958, 988, 1007, 1019], "task": [4, 7, 98, 109, 116, 117, 123, 144, 145, 157, 164, 175, 197, 213, 216, 218, 254, 342, 355, 357, 363, 365, 366, 367, 368, 371, 372, 373, 376, 378, 379, 380, 397, 399, 400, 401, 402, 428, 441, 473, 485, 495, 573, 576, 577, 579, 580, 581, 585, 586, 587, 590, 613, 614, 627, 628, 633, 634, 641, 642, 643, 644, 655, 662, 665, 688, 707, 709, 710, 734, 762, 764, 767, 769, 778, 782, 795, 799, 928, 929, 959, 962, 963, 964, 965, 973, 975, 977, 978, 980, 981, 983, 984, 985, 986, 988, 995, 996, 997, 999, 1004, 1009, 1013, 1019], "highli": [4, 9, 71, 79, 80, 97, 106, 125, 192, 202, 257, 260, 266, 294, 341, 355, 356, 368, 369, 373, 390, 392, 396, 399, 400, 432, 442, 476, 543, 652, 673, 789, 791, 835, 958, 962, 965, 966, 968, 976, 977, 981], "depend": [4, 5, 7, 37, 53, 74, 99, 119, 122, 123, 126, 129, 141, 145, 155, 161, 164, 165, 167, 171, 173, 177, 201, 215, 219, 225, 226, 232, 240, 247, 257, 258, 262, 263, 264, 277, 294, 299, 304, 309, 312, 324, 335, 341, 342, 351, 355, 356, 357, 361, 368, 369, 370, 375, 376, 378, 379, 380, 381, 382, 383, 385, 386, 391, 392, 394, 396, 397, 399, 400, 401, 402, 403, 419, 420, 421, 425, 427, 429, 430, 432, 434, 437, 439, 440, 442, 444, 449, 464, 469, 470, 471, 473, 476, 480, 481, 482, 484, 485, 490, 514, 515, 521, 524, 531, 539, 540, 542, 569, 570, 571, 572, 583, 585, 588, 589, 592, 608, 613, 614, 619, 621, 629, 639, 640, 650, 652, 654, 657, 658, 659, 661, 668, 671, 672, 675, 676, 709, 721, 758, 761, 770, 771, 775, 776, 796, 804, 821, 822, 823, 825, 827, 828, 829, 830, 831, 837, 838, 840, 852, 853, 856, 859, 872, 879, 880, 883, 887, 896, 951, 952, 954, 955, 956, 958, 959, 961, 962, 964, 965, 966, 967, 970, 974, 976, 977, 978, 988, 995, 997, 999, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1019], "busi": [4, 197, 257, 375, 378, 768, 958, 962, 986], "dai": [4, 12, 154, 168, 198, 356, 365, 368, 858, 986, 1010, 1011, 1018, 1019], "week": [4, 367, 368, 381, 986, 1018], "yearli": 4, "season": [4, 154, 168, 198, 367, 402], "perform": [4, 7, 19, 24, 25, 26, 27, 32, 36, 48, 49, 53, 56, 57, 61, 63, 65, 66, 67, 69, 70, 73, 77, 85, 98, 105, 109, 110, 117, 119, 121, 123, 124, 128, 129, 135, 145, 146, 150, 161, 162, 164, 167, 168, 169, 170, 173, 186, 197, 199, 203, 204, 205, 214, 215, 219, 220, 222, 226, 231, 233, 235, 244, 247, 250, 252, 253, 254, 255, 257, 258, 259, 262, 263, 265, 266, 268, 270, 272, 273, 275, 277, 290, 296, 299, 301, 303, 307, 314, 321, 327, 330, 333, 340, 342, 351, 354, 356, 357, 363, 365, 369, 370, 371, 375, 376, 378, 379, 380, 382, 386, 387, 389, 390, 391, 393, 394, 395, 397, 398, 399, 401, 402, 403, 404, 410, 421, 423, 424, 425, 427, 428, 430, 432, 434, 435, 439, 441, 448, 449, 462, 463, 464, 465, 474, 482, 492, 495, 511, 512, 513, 515, 517, 519, 522, 523, 524, 525, 526, 528, 530, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 562, 563, 569, 570, 571, 572, 582, 583, 584, 591, 592, 608, 611, 619, 621, 626, 632, 635, 636, 637, 639, 645, 646, 647, 648, 649, 651, 654, 656, 657, 658, 659, 663, 664, 666, 668, 670, 671, 674, 675, 684, 685, 686, 688, 689, 693, 694, 706, 709, 710, 718, 720, 722, 735, 736, 737, 758, 763, 764, 766, 767, 768, 772, 773, 774, 775, 776, 777, 780, 781, 788, 789, 791, 795, 800, 801, 802, 804, 805, 808, 811, 812, 814, 815, 816, 817, 818, 819, 820, 826, 828, 834, 835, 836, 837, 839, 840, 842, 845, 846, 848, 849, 851, 852, 853, 855, 856, 859, 861, 863, 864, 865, 866, 867, 868, 869, 873, 874, 876, 880, 881, 882, 883, 884, 886, 887, 888, 889, 898, 899, 935, 946, 951, 952, 954, 956, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 975, 976, 977, 978, 982, 983, 986, 988, 989, 992, 995, 998, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020], "sklearn": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 355, 356, 357, 358, 361, 362, 363, 366, 367, 368, 369, 371, 372, 373, 375, 376, 378, 379, 380, 382, 383, 386, 388, 389, 390, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 951, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 982, 983, 988, 992, 993, 994, 995, 996, 997, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "preprocess": [4, 5, 6, 10, 31, 42, 44, 49, 53, 57, 61, 69, 70, 71, 72, 74, 85, 95, 106, 115, 119, 142, 154, 158, 169, 173, 176, 178, 185, 186, 188, 197, 198, 203, 213, 215, 219, 227, 228, 236, 239, 254, 264, 266, 271, 285, 286, 293, 294, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 319, 327, 330, 341, 357, 358, 360, 362, 365, 368, 372, 379, 380, 389, 392, 393, 396, 400, 401, 444, 445, 446, 447, 469, 547, 562, 563, 569, 570, 571, 572, 611, 639, 640, 653, 655, 657, 659, 668, 721, 808, 839, 840, 878, 879, 880, 881, 883, 884, 952, 958, 963, 966, 973, 976, 977, 979, 982, 985, 986, 988, 993, 994, 997, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "splinetransform": [4, 198, 310, 854, 972, 1017, 1019, 1020], "class": [4, 8, 9, 10, 13, 16, 19, 23, 24, 25, 27, 28, 30, 34, 40, 54, 55, 57, 70, 71, 90, 91, 100, 104, 108, 109, 117, 125, 130, 133, 149, 150, 153, 157, 158, 161, 164, 167, 168, 173, 175, 187, 188, 189, 205, 209, 212, 213, 216, 219, 226, 233, 235, 242, 243, 244, 250, 251, 252, 257, 259, 263, 267, 268, 273, 275, 277, 280, 282, 285, 286, 287, 288, 304, 307, 311, 315, 317, 318, 322, 323, 327, 328, 336, 338, 340, 341, 342, 357, 358, 360, 362, 363, 364, 365, 368, 369, 371, 372, 373, 374, 376, 378, 379, 383, 388, 390, 392, 393, 395, 397, 401, 402, 406, 407, 408, 409, 410, 411, 412, 413, 414, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 441, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 480, 482, 483, 484, 488, 489, 490, 492, 494, 495, 499, 502, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 562, 563, 564, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 693, 694, 695, 696, 697, 698, 699, 701, 707, 709, 710, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 734, 735, 737, 762, 763, 764, 766, 767, 768, 769, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 802, 803, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 903, 904, 905, 906, 907, 909, 910, 922, 928, 930, 932, 933, 946, 951, 952, 953, 954, 956, 957, 958, 959, 963, 964, 966, 969, 970, 972, 973, 975, 978, 983, 984, 986, 988, 992, 995, 997, 999, 1001, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "extrapol": [4, 149, 176, 198, 229, 260, 858, 962, 972, 978, 1017, 1019], "option": [4, 30, 46, 52, 103, 123, 155, 162, 178, 198, 260, 266, 308, 340, 345, 351, 357, 362, 363, 364, 366, 368, 370, 372, 373, 375, 376, 378, 380, 381, 383, 386, 392, 393, 395, 396, 397, 399, 400, 403, 414, 422, 423, 425, 426, 427, 428, 429, 432, 439, 441, 442, 443, 476, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 527, 529, 537, 538, 542, 544, 545, 547, 548, 563, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 609, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 627, 633, 638, 639, 640, 651, 654, 656, 657, 658, 659, 661, 663, 664, 668, 669, 670, 673, 675, 676, 685, 692, 694, 698, 702, 704, 715, 716, 717, 737, 738, 739, 744, 746, 747, 751, 754, 755, 756, 757, 758, 761, 770, 771, 773, 780, 781, 783, 803, 805, 806, 810, 811, 812, 813, 819, 820, 823, 828, 831, 835, 838, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 856, 857, 858, 859, 870, 871, 878, 886, 887, 888, 889, 890, 892, 905, 948, 951, 952, 958, 961, 962, 965, 972, 975, 977, 978, 983, 985, 995, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "load": [4, 6, 11, 12, 14, 26, 32, 46, 48, 53, 70, 71, 88, 95, 106, 109, 115, 116, 118, 125, 126, 129, 130, 132, 143, 144, 154, 167, 168, 173, 178, 193, 194, 197, 205, 213, 228, 229, 234, 235, 236, 237, 239, 247, 253, 255, 257, 262, 264, 269, 275, 277, 281, 286, 294, 295, 296, 308, 309, 311, 312, 317, 318, 319, 346, 349, 355, 358, 360, 363, 365, 370, 373, 379, 386, 391, 395, 396, 397, 399, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 512, 514, 523, 819, 820, 915, 972, 983, 989, 991, 993, 999, 1004, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "openml": [4, 70, 129, 154, 167, 197, 205, 213, 215, 227, 275, 295, 361, 383, 476, 999, 1012, 1014, 1017], "repositori": [4, 8, 173, 361, 363, 365, 366, 368, 369, 371, 375, 381, 383, 484, 982, 985, 999], "import": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 165, 166, 167, 168, 171, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 305, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 351, 355, 356, 357, 362, 363, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 378, 379, 380, 382, 383, 386, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 462, 463, 464, 465, 468, 475, 476, 480, 482, 483, 484, 486, 487, 488, 490, 492, 495, 501, 504, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 557, 559, 560, 561, 562, 563, 564, 565, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 669, 670, 671, 672, 673, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 694, 696, 698, 699, 702, 703, 704, 706, 707, 708, 709, 710, 711, 714, 715, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 743, 744, 748, 749, 751, 753, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 866, 867, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 905, 910, 913, 915, 917, 918, 919, 920, 922, 924, 925, 926, 930, 933, 936, 950, 951, 952, 954, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 972, 973, 974, 975, 976, 977, 978, 983, 986, 988, 991, 992, 993, 994, 995, 996, 997, 999, 1001, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "fetch_openml": [4, 5, 70, 74, 119, 129, 154, 167, 168, 169, 197, 205, 213, 215, 227, 235, 239, 275, 277, 295, 307, 311, 362, 371, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "bike_shar": 4, "bike_sharing_demand": [4, 168], "version": [4, 46, 53, 70, 84, 95, 100, 151, 162, 168, 169, 173, 195, 198, 199, 205, 211, 213, 235, 239, 275, 295, 304, 307, 308, 309, 310, 312, 327, 340, 355, 358, 363, 367, 368, 369, 370, 373, 375, 376, 378, 380, 381, 383, 385, 386, 391, 392, 395, 397, 399, 400, 402, 403, 404, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 480, 481, 482, 484, 485, 488, 489, 490, 492, 494, 502, 503, 506, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 562, 563, 564, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 688, 689, 694, 695, 699, 702, 703, 704, 705, 707, 708, 709, 710, 711, 714, 719, 720, 721, 723, 726, 733, 734, 736, 737, 738, 739, 741, 746, 747, 748, 749, 758, 764, 765, 767, 769, 775, 776, 777, 778, 779, 780, 781, 782, 783, 790, 791, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 864, 866, 867, 868, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 896, 898, 899, 909, 910, 912, 914, 915, 923, 925, 928, 929, 930, 932, 937, 943, 948, 949, 951, 954, 956, 959, 962, 964, 966, 968, 970, 975, 976, 978, 980, 983, 985, 996, 1000, 1002], "2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 135, 138, 142, 143, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 175, 177, 178, 179, 180, 181, 182, 183, 185, 186, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 351, 355, 356, 357, 362, 363, 365, 366, 368, 369, 371, 372, 373, 374, 376, 378, 379, 380, 383, 384, 385, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 413, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 439, 440, 442, 443, 444, 445, 448, 449, 451, 452, 453, 454, 455, 458, 462, 463, 464, 465, 473, 476, 480, 481, 484, 487, 488, 489, 490, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 557, 562, 563, 564, 565, 566, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 584, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 682, 684, 685, 686, 687, 689, 694, 696, 697, 698, 699, 702, 703, 704, 705, 706, 708, 709, 710, 711, 714, 715, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 743, 744, 748, 749, 751, 753, 756, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 862, 866, 871, 872, 874, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 891, 893, 898, 899, 904, 912, 913, 914, 915, 917, 918, 919, 920, 922, 924, 925, 926, 927, 928, 930, 933, 935, 936, 949, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 980, 988, 989, 992, 993, 994, 995, 996, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1020], "as_fram": [4, 5, 70, 74, 119, 129, 154, 167, 168, 169, 185, 186, 197, 205, 213, 215, 235, 239, 277, 295, 304, 307, 309, 311, 312, 362, 363, 469, 470, 471, 472, 476, 480, 481, 482, 484, 485, 490, 1014, 1015, 1016, 1017], "true": [4, 5, 6, 7, 8, 10, 11, 14, 16, 17, 19, 26, 30, 32, 34, 37, 44, 49, 50, 53, 54, 56, 57, 59, 62, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 91, 95, 96, 97, 98, 100, 106, 109, 114, 119, 120, 121, 122, 124, 125, 126, 129, 130, 132, 135, 136, 137, 142, 145, 149, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 173, 181, 182, 184, 185, 186, 188, 190, 192, 193, 194, 196, 197, 199, 200, 201, 204, 205, 211, 212, 213, 215, 218, 221, 222, 226, 227, 230, 232, 233, 234, 235, 238, 239, 242, 245, 247, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 282, 283, 286, 290, 293, 294, 295, 296, 300, 304, 307, 309, 311, 312, 316, 318, 319, 320, 330, 334, 335, 336, 340, 341, 342, 345, 346, 349, 351, 355, 356, 361, 363, 364, 368, 369, 372, 373, 374, 376, 379, 380, 382, 386, 388, 389, 390, 392, 393, 394, 396, 397, 399, 400, 401, 402, 404, 405, 406, 409, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 439, 441, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 499, 502, 503, 504, 506, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 678, 679, 680, 681, 682, 683, 684, 686, 688, 689, 690, 693, 694, 695, 696, 699, 701, 704, 706, 707, 708, 709, 710, 711, 714, 715, 718, 719, 720, 721, 722, 723, 730, 731, 732, 734, 736, 741, 747, 748, 749, 758, 762, 763, 764, 765, 766, 767, 768, 769, 772, 774, 775, 776, 777, 780, 781, 782, 783, 788, 789, 791, 795, 796, 799, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 896, 897, 898, 899, 909, 915, 916, 922, 923, 924, 927, 928, 932, 933, 935, 943, 948, 950, 951, 952, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 974, 975, 976, 977, 978, 982, 988, 992, 993, 995, 996, 997, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "parser": [4, 5, 8, 70, 74, 119, 129, 154, 167, 168, 169, 197, 205, 213, 215, 227, 235, 239, 275, 277, 295, 307, 311, 476, 1019], "panda": [4, 5, 12, 25, 69, 70, 71, 72, 74, 116, 119, 122, 126, 129, 154, 161, 166, 167, 168, 169, 176, 186, 197, 205, 213, 215, 227, 235, 236, 239, 247, 255, 257, 258, 260, 268, 269, 275, 277, 295, 304, 307, 310, 311, 335, 340, 341, 362, 363, 366, 367, 368, 369, 370, 380, 383, 385, 393, 414, 423, 424, 426, 427, 429, 444, 446, 448, 462, 463, 464, 465, 469, 470, 471, 472, 476, 480, 481, 482, 484, 485, 490, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 546, 547, 548, 549, 550, 562, 563, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 613, 614, 616, 619, 620, 621, 622, 623, 669, 670, 777, 780, 781, 791, 805, 823, 828, 831, 835, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 876, 894, 951, 952, 972, 982, 983, 997, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "df": [4, 25, 27, 129, 166, 168, 176, 197, 215, 247, 257, 303, 341, 372, 400, 571, 572, 951, 952], "frame": [4, 16, 70, 154, 167, 168, 197, 363, 368, 378, 381, 469, 470, 471, 472, 476, 480, 481, 482, 484, 485, 490, 982, 993, 1016], "To": [4, 8, 16, 26, 27, 32, 46, 56, 77, 79, 81, 85, 89, 100, 119, 122, 123, 131, 135, 146, 154, 155, 158, 161, 162, 166, 167, 173, 178, 185, 197, 198, 199, 205, 215, 230, 231, 237, 239, 247, 252, 254, 255, 257, 259, 260, 262, 264, 275, 295, 299, 304, 307, 308, 309, 310, 311, 312, 337, 341, 345, 351, 355, 356, 361, 362, 366, 368, 369, 371, 372, 373, 375, 378, 380, 386, 389, 392, 393, 394, 395, 396, 397, 399, 400, 428, 429, 430, 441, 444, 447, 472, 476, 482, 483, 487, 488, 511, 517, 518, 519, 521, 523, 524, 525, 526, 537, 538, 539, 540, 544, 545, 549, 578, 583, 608, 613, 627, 628, 633, 634, 637, 639, 640, 641, 642, 643, 644, 665, 681, 693, 708, 743, 765, 771, 780, 781, 801, 808, 850, 868, 869, 878, 879, 886, 887, 888, 889, 905, 915, 930, 949, 951, 952, 957, 958, 959, 960, 962, 963, 964, 965, 968, 969, 972, 976, 977, 978, 985, 986, 988, 992, 994, 995, 997, 1004, 1007, 1009, 1010, 1011, 1013, 1015], "get": [4, 5, 9, 12, 16, 17, 19, 37, 48, 52, 55, 96, 100, 122, 131, 143, 146, 149, 154, 155, 161, 167, 168, 169, 170, 190, 199, 212, 215, 218, 233, 255, 258, 259, 261, 265, 268, 275, 277, 282, 290, 300, 307, 316, 319, 324, 327, 329, 332, 337, 340, 342, 345, 356, 358, 361, 362, 363, 366, 368, 369, 372, 373, 374, 375, 380, 383, 386, 388, 392, 393, 394, 396, 397, 399, 400, 401, 402, 406, 407, 408, 412, 413, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 442, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 676, 680, 702, 703, 704, 706, 712, 713, 722, 736, 743, 744, 749, 765, 768, 775, 776, 777, 780, 781, 791, 800, 801, 802, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 893, 906, 907, 908, 914, 915, 951, 957, 958, 959, 961, 962, 972, 975, 976, 977, 978, 983, 985, 992, 995, 996, 997, 1001, 1004, 1007, 1010, 1012, 1015, 1017, 1018], "quick": [4, 100, 238, 368, 369, 373, 383, 587, 805, 962, 963, 972, 986, 995, 1001], "understand": [4, 9, 89, 154, 164, 168, 252, 255, 309, 310, 324, 340, 344, 350, 351, 367, 368, 373, 378, 382, 392, 399, 400, 484, 805, 836, 837, 886, 887, 888, 889, 892, 951, 952, 959, 961, 978, 981, 982, 986, 1004, 1018], "pattern": [4, 16, 62, 81, 93, 107, 149, 161, 164, 168, 310, 340, 341, 342, 351, 365, 368, 369, 389, 392, 393, 397, 399, 400, 428, 444, 446, 484, 512, 514, 521, 535, 536, 619, 689, 705, 721, 749, 768, 769, 775, 859, 954, 956, 958, 962, 963, 969, 977, 979, 983, 986, 1016], "let": [4, 5, 53, 63, 70, 74, 95, 100, 109, 116, 119, 122, 123, 126, 149, 155, 156, 162, 167, 168, 169, 178, 186, 197, 199, 215, 218, 222, 252, 257, 260, 264, 340, 342, 349, 351, 363, 368, 369, 373, 378, 389, 392, 396, 399, 400, 480, 484, 490, 514, 627, 628, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 662, 665, 845, 852, 853, 958, 959, 960, 961, 962, 969, 970, 972, 977, 978, 986, 995, 997, 1014], "u": [4, 10, 11, 12, 16, 17, 34, 50, 52, 55, 95, 103, 119, 120, 149, 158, 166, 167, 168, 194, 198, 205, 215, 219, 222, 230, 238, 239, 243, 244, 248, 252, 257, 260, 264, 303, 340, 349, 356, 358, 363, 368, 371, 373, 375, 378, 383, 389, 392, 395, 397, 399, 400, 413, 443, 445, 462, 463, 464, 511, 517, 525, 526, 530, 532, 534, 536, 538, 540, 542, 545, 548, 550, 569, 570, 572, 592, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 659, 660, 662, 665, 670, 674, 685, 701, 720, 735, 812, 813, 822, 830, 837, 859, 872, 879, 881, 884, 887, 889, 915, 956, 961, 962, 969, 972, 980, 986, 997, 1001, 1014], "look": [4, 5, 53, 95, 98, 100, 122, 123, 149, 154, 155, 162, 167, 168, 199, 218, 222, 226, 248, 252, 257, 259, 295, 340, 351, 356, 357, 362, 363, 366, 368, 369, 371, 373, 375, 378, 379, 392, 395, 397, 398, 399, 400, 428, 468, 469, 537, 538, 539, 540, 544, 545, 583, 584, 612, 640, 673, 859, 886, 887, 888, 889, 958, 959, 972, 976, 977, 979, 997, 1004, 1012, 1014], "averag": [4, 25, 27, 37, 39, 40, 44, 52, 59, 61, 113, 114, 118, 122, 125, 130, 131, 132, 146, 154, 168, 178, 186, 197, 204, 215, 235, 260, 262, 265, 267, 275, 299, 307, 319, 340, 351, 355, 363, 365, 369, 389, 390, 394, 396, 400, 402, 403, 404, 418, 419, 422, 425, 426, 427, 429, 470, 473, 474, 503, 511, 512, 513, 517, 518, 520, 521, 527, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 549, 550, 568, 613, 614, 629, 639, 640, 647, 648, 650, 653, 655, 657, 658, 659, 661, 668, 681, 684, 685, 687, 688, 689, 694, 701, 702, 703, 705, 706, 708, 709, 710, 714, 715, 716, 718, 719, 720, 723, 725, 726, 728, 730, 731, 733, 736, 744, 761, 762, 763, 764, 765, 767, 768, 773, 774, 775, 776, 803, 825, 845, 948, 952, 957, 958, 963, 966, 968, 969, 976, 977, 978, 995, 997, 1004, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1018, 1019], "per": [4, 10, 48, 53, 63, 90, 115, 119, 154, 156, 167, 168, 197, 212, 215, 239, 243, 253, 264, 266, 299, 309, 335, 340, 342, 355, 363, 364, 368, 372, 373, 376, 378, 380, 390, 392, 396, 397, 398, 399, 400, 402, 428, 430, 437, 441, 444, 448, 467, 480, 482, 483, 484, 488, 490, 492, 495, 503, 512, 514, 515, 516, 519, 521, 523, 529, 530, 541, 542, 549, 564, 569, 572, 591, 592, 613, 614, 622, 623, 639, 640, 647, 649, 652, 654, 655, 656, 657, 659, 673, 677, 694, 697, 701, 721, 734, 738, 739, 761, 763, 775, 776, 800, 807, 808, 809, 811, 812, 815, 817, 835, 838, 844, 846, 848, 849, 852, 853, 859, 876, 878, 879, 880, 881, 882, 883, 884, 903, 904, 915, 937, 951, 954, 958, 961, 962, 963, 966, 969, 976, 977, 978, 982, 983, 995, 997, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1020], "hour": [4, 167, 168, 368, 373, 959, 981], "sundai": 4, "weekend": 4, "clearli": [4, 59, 98, 168, 231, 367, 368, 378, 380, 397, 399, 963, 969], "distinguish": [4, 40, 79, 91, 100, 199, 254, 363, 369, 380, 399, 402, 951, 962, 965, 968], "commut": 4, "morn": 4, "even": [4, 13, 27, 40, 42, 52, 74, 85, 98, 122, 155, 167, 168, 169, 186, 197, 198, 205, 215, 222, 223, 232, 243, 263, 299, 301, 303, 304, 320, 340, 341, 342, 351, 357, 363, 367, 368, 369, 371, 372, 375, 378, 380, 390, 391, 392, 394, 396, 397, 399, 400, 402, 422, 424, 426, 427, 428, 429, 439, 441, 512, 515, 537, 538, 539, 540, 544, 545, 563, 570, 575, 608, 609, 611, 620, 639, 640, 676, 686, 693, 723, 741, 747, 754, 758, 761, 766, 768, 802, 870, 871, 886, 887, 888, 889, 915, 931, 951, 952, 954, 956, 958, 961, 962, 965, 967, 968, 970, 972, 974, 976, 977, 978, 986, 997, 1011, 1012, 1013, 1016, 1018], "leisur": 4, "more": [4, 6, 7, 8, 11, 12, 13, 19, 25, 26, 27, 30, 31, 37, 39, 40, 43, 44, 46, 49, 52, 53, 56, 59, 66, 74, 79, 88, 89, 91, 95, 98, 102, 103, 111, 113, 116, 117, 119, 121, 122, 123, 124, 125, 129, 146, 149, 155, 158, 162, 167, 168, 173, 176, 177, 183, 186, 188, 191, 195, 197, 198, 199, 212, 213, 214, 215, 218, 222, 226, 231, 232, 233, 237, 242, 244, 245, 247, 248, 251, 255, 257, 258, 259, 260, 264, 266, 277, 279, 287, 293, 294, 296, 299, 300, 301, 304, 307, 308, 309, 311, 312, 316, 324, 327, 332, 335, 337, 340, 341, 342, 345, 346, 351, 355, 356, 357, 360, 361, 362, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 379, 380, 381, 383, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 554, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 911, 913, 915, 917, 925, 928, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 982, 983, 984, 985, 986, 988, 992, 993, 994, 995, 996, 997, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "spread": [4, 40, 220, 258, 299, 315, 316, 317, 320, 355, 368, 392, 432, 442, 495, 856, 867, 875, 962], "peak": [4, 27, 168, 390, 396, 1018], "middl": [4, 24, 59, 100, 110, 336, 365, 969, 972], "matplotlib": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 170, 173, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 311, 312, 315, 316, 317, 318, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 362, 370, 374, 383, 385, 419, 482, 612, 613, 678, 679, 681, 682, 683, 783, 892, 982, 991, 993, 994, 995, 1001, 1013, 1016, 1017, 1018, 1019], "pyplot": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 170, 173, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 311, 312, 315, 316, 317, 318, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 368, 374, 419, 482, 612, 613, 678, 679, 681, 682, 683, 783, 993, 994, 995, 1001, 1018], "plt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 170, 173, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 311, 312, 315, 316, 317, 318, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 374, 419, 482, 612, 613, 678, 679, 681, 682, 683, 783, 892, 969, 993, 994, 995, 1001], "fig": [4, 5, 7, 8, 10, 14, 25, 27, 42, 43, 45, 53, 56, 59, 63, 65, 72, 77, 79, 85, 89, 95, 100, 101, 102, 106, 109, 115, 116, 119, 122, 123, 126, 127, 129, 131, 152, 158, 161, 168, 170, 173, 177, 185, 188, 191, 192, 194, 195, 197, 198, 205, 210, 212, 215, 218, 219, 220, 221, 222, 223, 227, 229, 235, 236, 247, 252, 253, 254, 257, 258, 259, 260, 263, 266, 267, 268, 275, 277, 279, 281, 282, 290, 294, 295, 299, 300, 301, 303, 304, 307, 311, 312, 324, 334, 335, 336, 337, 340, 341, 342, 345, 374, 993], "ax": [4, 5, 7, 8, 10, 12, 14, 16, 25, 27, 30, 31, 32, 40, 42, 43, 45, 53, 55, 56, 63, 65, 71, 72, 74, 79, 81, 85, 89, 91, 95, 101, 102, 106, 109, 112, 115, 116, 119, 126, 127, 129, 130, 131, 152, 153, 158, 161, 166, 167, 168, 169, 170, 173, 176, 177, 180, 186, 188, 189, 192, 194, 195, 197, 198, 199, 201, 202, 205, 206, 208, 210, 212, 215, 218, 219, 220, 221, 222, 223, 227, 232, 235, 236, 238, 242, 244, 247, 252, 253, 254, 257, 259, 260, 261, 263, 264, 266, 267, 268, 269, 271, 275, 277, 279, 280, 281, 282, 285, 287, 288, 293, 294, 295, 299, 301, 302, 303, 304, 307, 308, 311, 312, 323, 324, 325, 328, 329, 334, 335, 336, 337, 340, 341, 342, 345, 346, 369, 370, 397, 402, 419, 514, 521, 530, 612, 613, 678, 679, 681, 682, 683, 699, 783, 892, 962, 965, 969, 1001, 1014], "subplot": [4, 5, 6, 8, 10, 11, 13, 14, 30, 31, 32, 34, 39, 43, 44, 50, 51, 53, 54, 55, 56, 59, 61, 64, 65, 72, 74, 78, 79, 80, 81, 84, 85, 90, 91, 95, 96, 97, 98, 100, 105, 106, 110, 112, 113, 115, 116, 118, 119, 123, 126, 127, 129, 130, 131, 141, 151, 153, 158, 161, 162, 167, 168, 170, 173, 177, 180, 188, 189, 191, 192, 195, 196, 197, 198, 199, 201, 205, 210, 213, 215, 218, 219, 222, 223, 226, 227, 229, 231, 232, 233, 234, 235, 236, 242, 243, 244, 245, 247, 248, 252, 253, 254, 257, 259, 260, 262, 263, 264, 266, 267, 268, 270, 271, 275, 277, 279, 280, 281, 282, 285, 286, 288, 289, 290, 293, 294, 295, 296, 300, 301, 302, 303, 304, 307, 311, 312, 318, 320, 324, 325, 327, 334, 335, 336, 337, 340, 341, 342, 345, 346, 374, 993], "figsiz": [4, 5, 6, 10, 12, 13, 14, 25, 26, 27, 30, 31, 32, 34, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 61, 63, 64, 65, 72, 74, 79, 81, 84, 85, 88, 89, 90, 91, 95, 98, 99, 100, 101, 102, 105, 106, 110, 112, 113, 119, 120, 121, 122, 123, 127, 129, 130, 141, 151, 153, 157, 158, 161, 162, 167, 168, 170, 173, 176, 177, 180, 187, 191, 194, 195, 196, 197, 198, 199, 201, 203, 205, 208, 211, 213, 215, 218, 219, 220, 222, 223, 226, 227, 229, 231, 233, 234, 235, 236, 242, 244, 245, 248, 252, 253, 254, 259, 260, 261, 264, 266, 267, 271, 275, 277, 279, 293, 294, 296, 299, 300, 301, 302, 303, 304, 311, 312, 315, 317, 325, 327, 331, 332, 334, 335, 336, 337, 340, 341, 342, 892, 993], "4": [4, 5, 6, 7, 8, 9, 10, 12, 17, 19, 20, 25, 26, 27, 31, 32, 33, 34, 38, 39, 40, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 63, 64, 65, 70, 71, 72, 73, 80, 81, 84, 85, 90, 91, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 109, 111, 113, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 135, 136, 142, 144, 149, 151, 152, 154, 155, 157, 158, 161, 162, 167, 168, 170, 173, 176, 177, 178, 179, 180, 185, 186, 187, 188, 189, 190, 194, 195, 196, 197, 198, 203, 204, 205, 207, 210, 211, 215, 218, 220, 226, 230, 231, 232, 233, 234, 235, 237, 239, 242, 243, 244, 245, 247, 248, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 264, 265, 266, 268, 271, 275, 277, 279, 281, 282, 283, 284, 287, 293, 295, 296, 299, 300, 302, 303, 307, 308, 310, 312, 315, 316, 317, 318, 319, 324, 326, 327, 330, 331, 332, 335, 336, 337, 340, 341, 349, 351, 356, 362, 363, 365, 366, 368, 372, 373, 376, 378, 379, 380, 383, 384, 385, 390, 392, 393, 394, 396, 397, 399, 400, 401, 402, 404, 418, 420, 421, 422, 424, 426, 427, 428, 429, 431, 432, 433, 439, 440, 442, 444, 445, 446, 449, 450, 451, 452, 453, 454, 455, 456, 458, 462, 463, 464, 465, 476, 484, 492, 493, 496, 497, 498, 508, 512, 513, 514, 515, 517, 518, 519, 520, 524, 526, 527, 529, 530, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 544, 545, 550, 557, 562, 563, 570, 571, 572, 574, 575, 584, 588, 589, 595, 598, 600, 603, 608, 609, 610, 611, 614, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 655, 658, 660, 661, 665, 668, 670, 671, 673, 674, 679, 680, 683, 687, 688, 696, 697, 706, 707, 714, 723, 724, 726, 727, 728, 729, 731, 732, 736, 748, 749, 761, 762, 768, 769, 772, 774, 775, 776, 777, 778, 779, 782, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 803, 805, 808, 809, 810, 813, 814, 815, 816, 818, 827, 836, 837, 838, 844, 845, 846, 851, 852, 854, 855, 857, 862, 866, 872, 878, 879, 881, 882, 884, 886, 887, 888, 904, 912, 914, 915, 917, 919, 920, 926, 930, 933, 951, 952, 955, 956, 957, 958, 960, 962, 963, 964, 965, 972, 973, 976, 977, 980, 988, 992, 993, 994, 995, 997, 1000, 1002, 1005, 1006, 1007, 1009, 1010, 1011, 1013, 1017, 1018, 1019], "average_week_demand": 4, "groupbi": [4, 72, 168, 205, 215], "weekdai": [4, 168], "count": [4, 14, 25, 27, 41, 49, 53, 69, 70, 91, 130, 131, 167, 168, 197, 199, 230, 239, 266, 277, 308, 309, 341, 342, 363, 365, 371, 376, 380, 381, 390, 391, 392, 397, 399, 400, 429, 469, 516, 524, 562, 569, 570, 571, 572, 575, 585, 598, 621, 678, 686, 696, 699, 709, 710, 718, 734, 763, 764, 766, 767, 814, 818, 819, 820, 828, 831, 842, 890, 892, 917, 927, 951, 954, 958, 962, 964, 965, 972, 978, 986, 997, 1004, 1007, 1009, 1012, 1013, 1015, 1016], "mean": [4, 5, 8, 11, 13, 24, 25, 27, 34, 36, 37, 40, 42, 44, 50, 53, 54, 67, 70, 78, 79, 80, 81, 85, 91, 95, 98, 99, 100, 102, 103, 112, 113, 118, 119, 122, 123, 129, 130, 131, 136, 145, 146, 149, 154, 156, 158, 161, 164, 167, 168, 177, 179, 186, 188, 190, 193, 197, 199, 201, 203, 204, 206, 212, 213, 214, 215, 221, 223, 226, 229, 230, 231, 232, 233, 235, 236, 237, 239, 242, 243, 244, 245, 247, 248, 253, 254, 257, 258, 259, 260, 262, 264, 265, 266, 267, 268, 269, 271, 272, 275, 277, 288, 299, 302, 304, 307, 310, 318, 327, 330, 335, 337, 339, 340, 342, 343, 351, 355, 360, 362, 363, 365, 368, 369, 371, 372, 373, 375, 376, 378, 379, 380, 389, 390, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 409, 413, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 444, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 462, 463, 464, 468, 481, 482, 484, 486, 492, 499, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 564, 569, 570, 571, 572, 575, 578, 583, 587, 588, 589, 590, 591, 592, 594, 603, 608, 609, 611, 613, 615, 616, 620, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 674, 675, 676, 685, 686, 688, 690, 693, 694, 697, 698, 704, 706, 709, 710, 711, 716, 717, 718, 721, 722, 725, 726, 727, 728, 729, 730, 731, 732, 733, 737, 754, 758, 759, 761, 763, 764, 765, 767, 768, 770, 771, 773, 775, 776, 777, 780, 781, 783, 791, 795, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 825, 826, 827, 829, 830, 832, 833, 835, 836, 837, 838, 840, 841, 843, 844, 848, 849, 851, 855, 857, 859, 864, 866, 867, 869, 871, 873, 874, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 894, 898, 899, 901, 936, 937, 943, 947, 951, 952, 953, 956, 958, 959, 961, 964, 965, 966, 967, 969, 970, 975, 976, 977, 978, 982, 986, 992, 995, 997, 998, 999, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "plot": [4, 5, 6, 9, 11, 12, 14, 16, 25, 26, 27, 29, 31, 32, 33, 35, 36, 37, 40, 42, 43, 45, 54, 55, 57, 58, 59, 60, 61, 64, 67, 71, 72, 74, 78, 79, 80, 85, 87, 89, 92, 94, 95, 98, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 116, 121, 122, 124, 126, 127, 128, 133, 136, 138, 141, 142, 144, 149, 150, 151, 152, 153, 154, 155, 156, 158, 161, 164, 165, 166, 167, 169, 170, 171, 173, 175, 179, 180, 182, 184, 185, 186, 187, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 207, 209, 210, 211, 212, 214, 215, 216, 220, 221, 222, 223, 225, 226, 229, 230, 232, 233, 234, 239, 240, 242, 243, 244, 246, 248, 250, 251, 252, 257, 258, 260, 262, 263, 267, 268, 269, 271, 273, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 299, 300, 301, 302, 303, 304, 308, 311, 312, 316, 317, 320, 322, 323, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 344, 345, 347, 348, 349, 350, 358, 368, 370, 376, 378, 382, 383, 387, 390, 392, 394, 396, 398, 399, 419, 422, 430, 436, 444, 451, 476, 481, 482, 484, 492, 495, 499, 503, 504, 533, 537, 540, 542, 544, 545, 549, 550, 591, 603, 612, 613, 614, 638, 639, 653, 657, 678, 679, 681, 682, 683, 684, 699, 707, 730, 762, 764, 767, 768, 769, 783, 794, 800, 801, 802, 803, 806, 817, 821, 837, 840, 852, 853, 856, 859, 878, 883, 886, 887, 892, 955, 956, 958, 959, 961, 962, 965, 966, 968, 976, 977, 978, 982, 983, 992, 993, 995, 999, 1005, 1007, 1008, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "_": [4, 5, 7, 8, 11, 12, 14, 25, 26, 27, 32, 33, 40, 43, 50, 53, 57, 62, 66, 69, 81, 91, 95, 100, 101, 103, 105, 113, 114, 115, 141, 149, 154, 155, 156, 166, 167, 168, 173, 176, 180, 181, 182, 184, 185, 186, 189, 194, 195, 197, 199, 210, 214, 219, 222, 227, 232, 239, 252, 257, 259, 260, 261, 263, 264, 266, 280, 285, 288, 296, 301, 304, 308, 311, 312, 316, 317, 335, 340, 342, 346, 369, 373, 380, 397, 399, 400, 512, 513, 514, 515, 516, 518, 519, 520, 523, 527, 546, 578, 633, 634, 644, 665, 669, 670, 671, 672, 677, 679, 681, 744, 777, 791, 823, 831, 852, 952, 958, 959, 962, 964, 965, 966, 969, 970, 972, 977, 978, 995, 1011], "hourli": [4, 167], "xtick": [4, 6, 8, 11, 30, 40, 44, 46, 50, 51, 52, 57, 58, 61, 81, 84, 89, 98, 119, 120, 121, 151, 152, 153, 157, 180, 187, 193, 210, 226, 233, 243, 244, 245, 248, 256, 257, 271, 281, 290, 296, 315, 327, 330, 331, 332, 333, 678, 993], "24": [4, 5, 19, 65, 98, 159, 164, 168, 197, 216, 259, 273, 277, 306, 307, 313, 315, 316, 319, 371, 383, 392, 399, 400, 418, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 440, 442, 444, 449, 450, 451, 452, 453, 454, 455, 456, 469, 470, 471, 472, 476, 484, 495, 496, 497, 498, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 523, 524, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 562, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 594, 608, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 679, 681, 683, 689, 695, 707, 726, 733, 775, 776, 777, 780, 781, 791, 798, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 840, 842, 843, 844, 845, 848, 849, 851, 853, 854, 855, 856, 857, 859, 868, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 909, 910, 937, 943, 951, 969, 972, 980, 1000, 1002, 1004, 1012, 1013, 1014, 1015, 1017], "rang": [4, 5, 6, 7, 8, 10, 12, 16, 17, 19, 25, 26, 27, 30, 32, 33, 37, 38, 40, 42, 46, 47, 48, 50, 51, 59, 60, 62, 63, 64, 77, 78, 80, 81, 110, 112, 113, 114, 116, 122, 128, 141, 145, 150, 167, 168, 173, 186, 187, 191, 195, 197, 198, 204, 205, 213, 215, 219, 221, 229, 230, 234, 242, 244, 247, 248, 252, 256, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269, 270, 271, 275, 281, 287, 290, 296, 299, 304, 307, 311, 312, 316, 327, 340, 341, 346, 349, 356, 362, 363, 365, 368, 369, 373, 376, 380, 386, 392, 396, 399, 402, 421, 441, 449, 451, 452, 453, 454, 455, 456, 458, 461, 471, 474, 475, 494, 507, 521, 533, 534, 539, 540, 543, 569, 570, 572, 610, 613, 619, 621, 629, 630, 650, 652, 657, 661, 673, 693, 711, 726, 768, 805, 811, 825, 827, 829, 830, 835, 849, 856, 857, 858, 863, 864, 867, 868, 871, 872, 914, 915, 930, 951, 958, 962, 966, 976, 983, 986, 991, 992, 993, 995, 1009, 1010, 1011, 1012, 1014, 1017], "7": [4, 6, 8, 12, 13, 14, 16, 19, 26, 30, 32, 34, 39, 42, 44, 46, 53, 54, 55, 59, 63, 64, 66, 70, 71, 73, 79, 81, 84, 98, 109, 110, 113, 118, 122, 125, 129, 130, 158, 166, 167, 168, 170, 173, 178, 179, 181, 190, 196, 197, 198, 199, 211, 215, 218, 226, 231, 232, 237, 239, 242, 243, 246, 247, 252, 257, 261, 263, 264, 268, 270, 275, 277, 279, 282, 283, 285, 295, 296, 299, 303, 307, 310, 311, 312, 315, 316, 318, 319, 324, 326, 331, 335, 336, 341, 342, 351, 363, 365, 366, 368, 371, 372, 373, 383, 384, 385, 396, 397, 399, 400, 401, 402, 420, 425, 428, 430, 431, 432, 433, 442, 451, 452, 471, 512, 513, 514, 515, 516, 518, 524, 541, 542, 569, 572, 581, 608, 609, 611, 628, 630, 639, 642, 673, 702, 703, 704, 706, 708, 724, 725, 726, 730, 731, 733, 765, 772, 775, 778, 779, 784, 787, 794, 795, 798, 802, 805, 809, 819, 820, 828, 837, 838, 851, 852, 873, 874, 915, 918, 919, 926, 951, 952, 957, 958, 960, 962, 963, 965, 966, 968, 972, 976, 977, 980, 988, 992, 995, 1000, 1002, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1017], "xticklabel": [4, 10, 119, 168], "sun": [4, 168, 1012, 1017, 1018], "mon": [4, 168], "tue": [4, 168, 1010], "wed": [4, 168], "thu": [4, 5, 24, 25, 26, 27, 40, 53, 59, 77, 81, 98, 100, 113, 115, 117, 119, 142, 149, 154, 155, 168, 185, 186, 197, 199, 215, 226, 232, 236, 244, 255, 257, 262, 263, 264, 307, 310, 345, 351, 355, 356, 363, 369, 373, 378, 380, 390, 392, 396, 397, 399, 400, 402, 403, 418, 420, 443, 495, 507, 533, 534, 535, 536, 537, 538, 543, 544, 545, 584, 587, 591, 603, 608, 613, 614, 624, 626, 639, 658, 686, 699, 705, 768, 773, 779, 784, 786, 798, 810, 813, 848, 878, 953, 954, 955, 956, 957, 958, 959, 962, 963, 968, 969, 970, 972, 974, 975, 976, 977, 983, 985, 986, 1004, 1006, 1010, 1012, 1013, 1014, 1016, 1020], "fri": [4, 168, 363], "sat": [4, 168, 400], "xlabel": [4, 8, 9, 24, 25, 26, 27, 33, 37, 41, 60, 77, 78, 80, 81, 84, 85, 89, 94, 97, 103, 110, 111, 112, 114, 119, 120, 121, 122, 123, 124, 128, 132, 135, 136, 141, 142, 145, 149, 150, 151, 152, 154, 155, 156, 167, 176, 179, 180, 182, 184, 185, 186, 187, 190, 191, 197, 199, 200, 201, 202, 204, 206, 207, 211, 215, 230, 232, 233, 252, 256, 257, 261, 262, 266, 267, 270, 271, 272, 279, 280, 283, 284, 324, 326, 327, 330, 340, 346, 347, 348, 612], "ylabel": [4, 8, 9, 24, 25, 26, 27, 30, 33, 34, 37, 60, 77, 78, 80, 81, 84, 85, 89, 97, 103, 110, 111, 112, 114, 120, 121, 122, 123, 124, 128, 132, 135, 136, 141, 142, 145, 149, 150, 151, 152, 154, 155, 156, 167, 176, 179, 180, 182, 184, 185, 186, 187, 190, 191, 197, 199, 200, 201, 202, 204, 206, 207, 215, 230, 232, 233, 252, 256, 257, 260, 261, 262, 266, 267, 270, 271, 272, 280, 324, 327, 330, 340, 346, 347, 348, 612], "number": [4, 5, 7, 8, 10, 12, 13, 19, 25, 26, 27, 32, 33, 36, 38, 39, 41, 43, 44, 46, 47, 48, 49, 50, 53, 54, 56, 60, 61, 62, 66, 67, 69, 70, 71, 72, 74, 81, 84, 85, 90, 91, 95, 97, 99, 100, 103, 109, 110, 111, 113, 117, 118, 120, 121, 122, 123, 125, 129, 131, 142, 143, 146, 157, 158, 162, 164, 167, 168, 173, 186, 196, 197, 198, 199, 204, 205, 211, 212, 213, 214, 215, 218, 226, 230, 233, 236, 242, 243, 245, 247, 248, 251, 252, 255, 256, 257, 258, 259, 262, 263, 264, 265, 266, 277, 279, 283, 284, 299, 301, 302, 307, 308, 309, 310, 311, 312, 319, 327, 331, 332, 335, 341, 342, 345, 349, 351, 356, 357, 360, 362, 363, 364, 365, 366, 368, 370, 371, 373, 374, 375, 376, 378, 379, 380, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 413, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 562, 563, 564, 565, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 682, 684, 685, 686, 688, 693, 694, 695, 697, 699, 701, 704, 708, 709, 710, 711, 714, 715, 718, 720, 732, 735, 754, 758, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 898, 899, 902, 914, 915, 918, 919, 930, 931, 933, 936, 937, 954, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 974, 976, 977, 978, 979, 982, 983, 985, 988, 995, 996, 997, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "rental": [4, 168, 969], "target": [4, 6, 17, 19, 26, 30, 32, 33, 45, 52, 68, 73, 75, 85, 89, 99, 102, 104, 109, 111, 117, 118, 119, 122, 123, 126, 128, 129, 130, 132, 138, 141, 144, 146, 149, 151, 154, 155, 162, 164, 166, 167, 168, 169, 170, 176, 180, 190, 193, 197, 199, 202, 205, 206, 219, 227, 229, 230, 231, 232, 234, 235, 236, 244, 251, 255, 258, 260, 262, 263, 266, 267, 277, 280, 285, 288, 289, 294, 299, 308, 309, 311, 315, 316, 319, 320, 323, 324, 327, 331, 333, 334, 340, 341, 346, 347, 348, 349, 351, 355, 357, 358, 360, 361, 362, 363, 364, 365, 369, 371, 372, 375, 376, 379, 382, 392, 396, 399, 402, 414, 418, 419, 420, 423, 426, 444, 445, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 488, 490, 500, 504, 511, 512, 514, 516, 517, 519, 522, 523, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 547, 548, 549, 550, 553, 563, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 665, 666, 667, 668, 678, 679, 681, 682, 683, 688, 689, 690, 693, 694, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 715, 718, 719, 720, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 762, 763, 764, 765, 767, 768, 769, 772, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 826, 828, 829, 830, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 856, 857, 858, 859, 862, 867, 870, 871, 873, 874, 875, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 898, 924, 925, 926, 953, 954, 955, 958, 959, 962, 966, 969, 970, 976, 977, 978, 983, 985, 986, 988, 993, 995, 997, 999, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "absolut": [4, 74, 99, 119, 146, 167, 197, 199, 203, 215, 369, 392, 394, 396, 397, 399, 400, 401, 402, 403, 425, 430, 436, 437, 511, 517, 522, 525, 526, 528, 529, 530, 538, 540, 541, 542, 545, 569, 571, 572, 574, 578, 583, 600, 608, 613, 627, 630, 631, 633, 635, 637, 652, 657, 659, 663, 664, 680, 685, 698, 702, 716, 717, 725, 726, 728, 733, 735, 737, 748, 773, 779, 783, 794, 797, 803, 805, 817, 819, 820, 824, 843, 848, 851, 863, 887, 889, 948, 958, 959, 972, 976, 978, 995, 996, 1005, 1010, 1015, 1016, 1017, 1018], "basi": [4, 6, 13, 100, 149, 154, 156, 198, 295, 310, 327, 360, 366, 392, 397, 399, 432, 514, 603, 613, 620, 672, 858, 960, 972, 977, 984, 992, 993, 996, 999, 1012, 1014, 1017], "max": [4, 8, 9, 10, 11, 12, 17, 19, 25, 27, 31, 40, 44, 52, 57, 61, 66, 71, 76, 81, 82, 89, 95, 98, 106, 110, 112, 118, 127, 135, 137, 138, 141, 142, 151, 153, 154, 162, 164, 167, 179, 184, 185, 186, 190, 192, 199, 200, 203, 211, 213, 215, 221, 230, 233, 255, 256, 257, 268, 270, 275, 277, 279, 283, 284, 290, 293, 295, 299, 301, 302, 304, 310, 318, 320, 326, 333, 336, 355, 392, 394, 397, 449, 450, 451, 452, 453, 454, 455, 456, 457, 492, 516, 535, 536, 537, 538, 539, 540, 543, 544, 545, 587, 608, 612, 613, 629, 630, 650, 661, 672, 673, 677, 680, 685, 686, 721, 737, 769, 770, 771, 777, 836, 837, 848, 849, 851, 858, 864, 865, 886, 887, 888, 889, 930, 958, 960, 965, 972, 976, 977, 995, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "977": [4, 40, 67, 396], "rescal": [4, 46, 47, 100, 178, 185, 221, 299, 337, 394, 404, 449, 450, 451, 452, 453, 454, 455, 456, 513, 518, 627, 630, 633, 851, 857, 880, 881, 882, 883, 884, 962, 972, 996, 1008, 1009], "variabl": [4, 9, 11, 12, 16, 37, 69, 113, 116, 119, 122, 123, 137, 138, 141, 146, 156, 157, 161, 162, 168, 169, 173, 186, 197, 201, 202, 215, 220, 248, 257, 260, 267, 304, 351, 355, 357, 363, 365, 366, 368, 369, 371, 372, 375, 380, 392, 393, 394, 395, 397, 399, 400, 401, 430, 462, 463, 464, 467, 479, 481, 488, 495, 512, 514, 516, 521, 524, 533, 539, 540, 585, 587, 588, 589, 621, 631, 632, 635, 636, 642, 663, 664, 676, 690, 727, 778, 779, 782, 784, 785, 786, 787, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 804, 807, 811, 812, 842, 856, 867, 879, 951, 952, 954, 958, 961, 962, 963, 964, 965, 967, 969, 970, 972, 976, 978, 982, 983, 985, 988, 989, 991, 993, 1004, 1009, 1012, 1014, 1017, 1019], "rel": [4, 6, 8, 17, 27, 60, 100, 116, 154, 173, 177, 197, 215, 245, 283, 284, 300, 308, 311, 327, 340, 341, 363, 367, 369, 375, 380, 390, 392, 396, 399, 400, 402, 421, 424, 427, 429, 439, 501, 504, 511, 514, 517, 521, 537, 538, 539, 540, 544, 545, 546, 585, 630, 639, 640, 652, 671, 675, 709, 727, 777, 780, 781, 783, 791, 803, 806, 819, 820, 824, 836, 837, 848, 849, 859, 874, 878, 879, 880, 883, 885, 886, 887, 888, 889, 958, 959, 962, 964, 965, 966, 968, 985, 993], "so": [4, 9, 12, 16, 17, 42, 48, 55, 60, 64, 80, 118, 121, 128, 149, 154, 167, 169, 173, 177, 197, 198, 226, 257, 277, 283, 284, 287, 294, 295, 300, 308, 318, 327, 335, 340, 342, 349, 351, 355, 356, 357, 362, 363, 367, 368, 369, 371, 372, 373, 375, 376, 380, 389, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 405, 406, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 476, 488, 489, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 676, 686, 689, 697, 706, 721, 736, 768, 775, 776, 777, 780, 781, 783, 784, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 868, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 915, 928, 937, 951, 952, 954, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 968, 972, 974, 975, 976, 977, 983, 986, 995, 996, 997, 1004, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018], "error": [4, 5, 7, 13, 17, 27, 74, 77, 78, 80, 99, 105, 108, 109, 110, 113, 116, 119, 123, 133, 149, 161, 164, 167, 186, 193, 197, 199, 201, 203, 204, 211, 215, 229, 232, 248, 250, 253, 257, 258, 262, 271, 273, 283, 284, 311, 326, 335, 340, 341, 365, 366, 368, 369, 370, 371, 372, 376, 378, 380, 386, 390, 391, 392, 393, 394, 396, 397, 399, 400, 401, 402, 424, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 476, 483, 495, 504, 511, 517, 522, 523, 525, 528, 533, 534, 535, 536, 538, 539, 540, 541, 542, 544, 545, 547, 555, 573, 576, 577, 579, 580, 581, 587, 610, 613, 624, 627, 628, 629, 632, 634, 636, 642, 644, 646, 650, 652, 654, 656, 658, 659, 661, 666, 669, 670, 673, 674, 677, 679, 682, 683, 690, 693, 701, 702, 703, 707, 720, 723, 724, 725, 726, 727, 728, 730, 731, 733, 736, 744, 758, 762, 768, 769, 777, 780, 781, 783, 791, 801, 802, 803, 805, 806, 807, 808, 809, 814, 815, 816, 818, 819, 820, 826, 827, 829, 830, 831, 834, 837, 840, 852, 853, 858, 859, 876, 878, 880, 881, 882, 887, 889, 896, 897, 898, 899, 902, 925, 946, 949, 951, 952, 953, 955, 956, 957, 959, 963, 966, 970, 972, 976, 977, 978, 984, 995, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "easili": [4, 9, 31, 143, 170, 200, 213, 231, 236, 239, 257, 259, 266, 282, 301, 368, 369, 380, 381, 393, 399, 400, 402, 429, 956, 958, 959, 972, 976, 977, 978, 989, 992, 997, 1010], "interpret": [4, 27, 146, 156, 164, 165, 166, 168, 171, 197, 198, 213, 215, 251, 257, 259, 260, 296, 300, 303, 309, 340, 342, 355, 366, 368, 373, 375, 376, 380, 382, 390, 392, 393, 398, 400, 432, 444, 445, 447, 476, 521, 552, 592, 620, 624, 634, 653, 654, 672, 673, 676, 682, 709, 733, 738, 739, 763, 770, 771, 783, 792, 802, 803, 805, 808, 840, 852, 859, 930, 956, 958, 962, 963, 969, 972, 978, 982, 988, 996, 1004, 1005, 1009, 1012, 1017, 1019], "fraction": [4, 25, 27, 120, 122, 197, 205, 215, 335, 341, 390, 396, 399, 419, 420, 429, 430, 436, 437, 495, 507, 537, 538, 539, 540, 544, 545, 546, 571, 574, 583, 647, 648, 649, 652, 657, 658, 659, 684, 702, 703, 704, 714, 772, 774, 779, 783, 803, 804, 818, 846, 880, 881, 882, 886, 887, 888, 889, 928, 958, 962, 965, 969, 970, 972, 977, 978, 983, 1005, 1006, 1007, 1018], "maximum": [4, 8, 11, 27, 33, 37, 56, 77, 78, 79, 80, 81, 97, 115, 118, 120, 150, 156, 164, 175, 185, 216, 267, 279, 283, 284, 290, 299, 322, 338, 341, 345, 347, 348, 355, 372, 373, 379, 380, 389, 390, 392, 394, 395, 397, 399, 400, 402, 403, 404, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 434, 437, 439, 441, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 462, 463, 464, 478, 489, 491, 492, 493, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 564, 565, 578, 591, 608, 612, 613, 616, 618, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 655, 657, 658, 659, 660, 663, 664, 666, 667, 668, 669, 670, 671, 673, 674, 675, 697, 724, 761, 775, 777, 780, 781, 783, 791, 798, 803, 828, 835, 836, 837, 843, 844, 848, 849, 851, 854, 855, 856, 858, 866, 867, 872, 873, 874, 875, 878, 879, 883, 886, 887, 888, 889, 890, 892, 895, 902, 951, 957, 958, 959, 961, 962, 964, 965, 966, 968, 972, 976, 977, 978, 996, 1011, 1012, 1014, 1015, 1018, 1019], "fit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 24, 25, 27, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 57, 60, 61, 62, 63, 64, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 137, 138, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 155, 156, 157, 158, 164, 166, 167, 168, 169, 170, 173, 175, 179, 180, 181, 183, 185, 186, 187, 188, 189, 190, 192, 193, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 221, 226, 227, 229, 231, 232, 233, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 293, 294, 295, 296, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 340, 341, 345, 346, 347, 348, 349, 355, 357, 358, 360, 363, 365, 368, 370, 372, 373, 376, 378, 380, 386, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 400, 401, 402, 403, 408, 413, 414, 415, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 444, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 481, 489, 490, 504, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 557, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 592, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 678, 679, 681, 682, 683, 692, 703, 715, 730, 768, 775, 776, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 866, 867, 868, 869, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 907, 946, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 965, 966, 967, 969, 970, 972, 973, 974, 975, 976, 977, 978, 982, 983, 984, 986, 992, 993, 994, 995, 996, 997, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "method": [4, 8, 17, 19, 20, 24, 25, 26, 27, 36, 37, 41, 49, 50, 53, 54, 55, 56, 57, 60, 64, 67, 68, 75, 78, 79, 83, 86, 95, 98, 100, 104, 105, 106, 115, 116, 117, 123, 129, 141, 146, 161, 173, 184, 186, 198, 205, 214, 217, 219, 224, 226, 232, 239, 241, 249, 259, 264, 266, 277, 283, 284, 286, 299, 303, 307, 309, 310, 340, 341, 342, 349, 351, 355, 356, 357, 358, 360, 365, 366, 368, 369, 373, 374, 376, 378, 379, 382, 386, 388, 389, 390, 393, 394, 395, 396, 397, 398, 400, 401, 402, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 439, 442, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 484, 492, 494, 502, 505, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 562, 563, 564, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 686, 691, 692, 711, 712, 715, 716, 721, 722, 743, 748, 749, 754, 758, 763, 768, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 866, 867, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 901, 915, 922, 923, 928, 931, 946, 947, 950, 951, 952, 956, 957, 958, 959, 962, 963, 964, 965, 966, 967, 970, 972, 974, 975, 976, 977, 978, 979, 982, 984, 986, 988, 992, 994, 995, 997, 998, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "minim": [4, 12, 56, 65, 77, 78, 122, 149, 157, 176, 193, 195, 197, 199, 205, 215, 218, 229, 230, 242, 247, 258, 266, 267, 299, 307, 310, 324, 335, 345, 358, 367, 368, 370, 375, 378, 380, 390, 392, 394, 397, 399, 421, 422, 426, 430, 443, 518, 520, 527, 537, 538, 539, 540, 544, 545, 590, 591, 592, 622, 627, 630, 638, 639, 648, 652, 653, 655, 659, 660, 668, 673, 675, 676, 728, 760, 826, 828, 837, 855, 866, 872, 886, 887, 888, 889, 953, 958, 959, 962, 965, 966, 972, 974, 975, 976, 977, 982, 984, 995, 996, 999, 1008, 1013, 1014], "squar": [4, 5, 60, 70, 78, 79, 80, 83, 86, 96, 106, 113, 123, 125, 146, 149, 154, 164, 167, 175, 176, 178, 186, 193, 197, 199, 201, 202, 207, 214, 215, 216, 229, 230, 232, 245, 266, 267, 271, 303, 309, 310, 312, 324, 340, 360, 365, 368, 373, 376, 380, 390, 392, 394, 395, 397, 398, 399, 403, 404, 413, 421, 423, 424, 425, 427, 429, 430, 437, 439, 440, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 481, 511, 517, 519, 521, 523, 527, 529, 532, 534, 536, 538, 539, 540, 542, 545, 548, 550, 571, 572, 573, 576, 577, 579, 580, 581, 585, 586, 587, 590, 592, 596, 603, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 663, 664, 667, 668, 669, 671, 673, 675, 677, 680, 690, 702, 703, 704, 730, 731, 738, 739, 743, 749, 750, 765, 805, 812, 813, 821, 822, 825, 827, 829, 830, 837, 840, 859, 878, 879, 881, 883, 884, 885, 887, 889, 913, 935, 948, 953, 955, 956, 965, 966, 970, 976, 978, 984, 995, 996, 999, 1004, 1007, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018], "estim": [4, 6, 7, 8, 9, 10, 11, 12, 24, 26, 27, 30, 33, 37, 38, 44, 45, 49, 54, 55, 56, 57, 60, 62, 70, 71, 73, 82, 84, 85, 95, 96, 97, 103, 105, 108, 109, 110, 115, 116, 118, 120, 122, 126, 129, 130, 131, 132, 133, 135, 136, 144, 145, 146, 148, 149, 154, 156, 159, 160, 161, 163, 166, 167, 175, 178, 181, 185, 186, 192, 197, 199, 201, 202, 204, 205, 214, 215, 216, 225, 226, 227, 232, 237, 239, 240, 241, 242, 244, 245, 247, 249, 250, 251, 254, 255, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 273, 277, 278, 284, 291, 299, 301, 310, 311, 330, 335, 341, 342, 346, 355, 356, 357, 358, 360, 366, 368, 370, 371, 374, 375, 376, 377, 383, 386, 387, 390, 392, 395, 397, 400, 401, 403, 404, 405, 406, 407, 410, 411, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 441, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 470, 471, 472, 475, 476, 478, 481, 482, 504, 507, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 559, 560, 561, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 668, 669, 670, 671, 672, 673, 678, 679, 681, 682, 683, 688, 689, 692, 693, 694, 697, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 762, 763, 764, 765, 767, 768, 769, 772, 775, 776, 777, 780, 781, 782, 783, 788, 789, 791, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 866, 867, 869, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 891, 897, 898, 899, 901, 903, 904, 907, 909, 910, 911, 923, 946, 950, 957, 959, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 983, 984, 986, 988, 989, 991, 993, 995, 996, 997, 998, 999, 1001, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1015, 1016, 1017, 1018, 1019, 1020], "condit": [4, 12, 25, 27, 81, 117, 122, 164, 165, 167, 171, 186, 199, 202, 215, 260, 310, 349, 373, 378, 382, 389, 392, 394, 397, 399, 401, 431, 444, 452, 453, 458, 476, 493, 503, 504, 516, 519, 520, 521, 523, 525, 527, 529, 530, 542, 608, 613, 614, 624, 631, 632, 633, 635, 636, 637, 651, 653, 654, 655, 656, 663, 664, 668, 678, 693, 698, 699, 716, 717, 773, 814, 815, 816, 817, 818, 837, 840, 843, 852, 853, 856, 915, 956, 958, 959, 960, 962, 964, 965, 967, 972, 978, 982, 995, 999, 1005, 1007, 1008, 1009, 1011, 1012, 1014, 1016, 1018, 1019], "an": [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 25, 26, 27, 33, 36, 37, 44, 46, 48, 50, 52, 53, 54, 55, 56, 57, 59, 60, 65, 67, 69, 70, 71, 72, 74, 77, 78, 79, 80, 88, 95, 96, 97, 98, 99, 100, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 129, 132, 136, 137, 138, 142, 146, 149, 150, 151, 154, 155, 156, 158, 160, 161, 163, 164, 166, 167, 168, 169, 173, 175, 176, 177, 180, 181, 185, 192, 197, 198, 199, 202, 204, 205, 211, 213, 214, 215, 216, 218, 219, 220, 221, 223, 226, 227, 229, 230, 231, 232, 233, 239, 242, 243, 247, 248, 251, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 266, 268, 270, 272, 275, 277, 280, 283, 284, 285, 288, 290, 299, 304, 308, 309, 310, 312, 316, 320, 323, 324, 326, 327, 329, 330, 340, 341, 342, 345, 348, 349, 351, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 379, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 412, 414, 415, 418, 419, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479, 481, 483, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 555, 556, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 589, 591, 592, 593, 600, 603, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 685, 686, 687, 690, 692, 693, 699, 701, 702, 707, 709, 710, 714, 715, 717, 722, 723, 725, 726, 728, 730, 731, 733, 736, 738, 739, 743, 744, 746, 747, 748, 749, 750, 753, 755, 756, 757, 758, 761, 762, 763, 764, 767, 768, 769, 770, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 789, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 870, 871, 872, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 891, 893, 895, 896, 898, 899, 901, 902, 905, 909, 910, 911, 913, 914, 915, 917, 919, 922, 923, 925, 926, 927, 930, 932, 933, 936, 937, 943, 946, 948, 949, 950, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 981, 982, 983, 986, 989, 991, 992, 996, 997, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "median": [4, 37, 70, 74, 79, 80, 122, 161, 162, 167, 199, 203, 214, 228, 299, 308, 310, 311, 363, 394, 399, 401, 421, 434, 438, 441, 454, 532, 534, 538, 545, 578, 608, 611, 616, 651, 652, 660, 702, 733, 826, 857, 868, 887, 889, 952, 972, 978, 1007, 1008], "measur": [4, 7, 8, 10, 11, 19, 25, 37, 38, 49, 57, 59, 60, 96, 113, 114, 122, 125, 132, 146, 149, 154, 164, 166, 167, 168, 173, 186, 191, 196, 197, 203, 215, 250, 255, 257, 263, 264, 270, 273, 304, 340, 341, 355, 363, 365, 369, 373, 380, 389, 390, 391, 394, 396, 397, 398, 399, 400, 429, 432, 442, 478, 495, 518, 520, 527, 531, 537, 538, 539, 540, 543, 544, 545, 585, 588, 589, 592, 608, 639, 671, 673, 679, 680, 683, 685, 686, 688, 690, 693, 694, 697, 698, 701, 705, 706, 707, 709, 711, 716, 717, 719, 720, 723, 727, 735, 736, 737, 762, 763, 764, 766, 767, 769, 770, 773, 800, 802, 805, 825, 856, 867, 886, 887, 888, 889, 952, 958, 960, 965, 967, 968, 970, 976, 978, 992, 995, 1004, 1007, 1009, 1010, 1012, 1014], "test": [4, 6, 8, 10, 11, 16, 24, 25, 26, 27, 31, 32, 33, 69, 70, 84, 100, 109, 110, 113, 115, 116, 117, 120, 121, 122, 123, 124, 135, 138, 140, 142, 145, 147, 149, 150, 164, 166, 167, 168, 169, 170, 173, 181, 186, 192, 193, 197, 198, 199, 204, 205, 212, 213, 215, 222, 227, 232, 234, 244, 250, 251, 252, 255, 256, 257, 258, 259, 261, 262, 264, 265, 267, 268, 269, 273, 275, 285, 286, 293, 295, 301, 304, 319, 327, 335, 342, 351, 355, 356, 362, 363, 365, 370, 371, 372, 373, 378, 379, 380, 382, 383, 385, 387, 390, 393, 394, 397, 399, 400, 401, 402, 409, 411, 413, 416, 417, 418, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 468, 469, 473, 477, 478, 482, 484, 504, 511, 517, 519, 523, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 547, 548, 549, 550, 573, 575, 576, 577, 579, 580, 581, 583, 585, 586, 587, 589, 590, 591, 592, 608, 609, 611, 616, 617, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 680, 693, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 826, 829, 830, 836, 837, 839, 863, 864, 866, 867, 868, 869, 873, 874, 876, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 907, 909, 910, 957, 958, 961, 962, 965, 966, 970, 972, 976, 977, 978, 982, 983, 985, 986, 989, 992, 993, 999, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "discuss": [4, 53, 57, 167, 186, 218, 223, 260, 340, 351, 357, 363, 365, 368, 372, 373, 375, 378, 380, 381, 392, 394, 398, 399, 402, 478, 663, 664, 821, 822, 827, 829, 830, 952, 956, 958, 959, 962, 965, 972, 979, 983, 1007], "choos": [4, 11, 12, 44, 45, 46, 50, 53, 59, 61, 65, 77, 101, 102, 118, 129, 135, 136, 146, 167, 170, 190, 233, 235, 252, 262, 269, 345, 351, 355, 356, 357, 358, 369, 372, 375, 380, 392, 394, 396, 399, 400, 402, 403, 424, 425, 427, 429, 439, 503, 512, 518, 539, 540, 563, 583, 639, 640, 653, 655, 660, 668, 669, 670, 674, 706, 736, 777, 780, 781, 791, 846, 886, 887, 888, 889, 952, 953, 957, 958, 959, 960, 961, 965, 972, 975, 976, 977, 989, 991, 995, 996, 1006, 1007, 1011, 1013, 1015], "focu": [4, 9, 27, 95, 149, 248, 287, 355, 372, 390, 399, 533, 534, 539, 541, 542, 659, 959, 965, 972, 982, 983], "intuit": [4, 31, 44, 52, 61, 100, 113, 119, 141, 149, 167, 168, 198, 199, 220, 226, 258, 282, 301, 304, 324, 327, 341, 368, 380, 390, 392, 394, 396, 398, 762, 763, 764, 767, 850, 954, 958, 959, 962, 963, 969, 972, 973, 977, 986, 995, 997, 1004], "than": [4, 5, 7, 11, 12, 13, 19, 27, 30, 31, 40, 44, 47, 53, 71, 74, 79, 81, 85, 91, 95, 98, 100, 103, 109, 110, 112, 113, 115, 116, 118, 119, 122, 146, 149, 155, 158, 161, 167, 168, 169, 173, 176, 183, 186, 197, 199, 203, 213, 214, 215, 222, 226, 232, 233, 243, 254, 255, 257, 258, 259, 260, 263, 266, 275, 277, 283, 284, 296, 299, 303, 304, 309, 311, 316, 340, 341, 342, 351, 355, 356, 357, 362, 363, 364, 367, 368, 369, 372, 373, 375, 380, 381, 386, 389, 390, 391, 392, 394, 395, 396, 397, 399, 400, 401, 402, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 432, 434, 437, 440, 443, 444, 447, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 473, 474, 476, 489, 494, 495, 503, 511, 514, 515, 516, 517, 518, 520, 521, 522, 524, 527, 528, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 553, 562, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 592, 608, 609, 611, 615, 621, 623, 624, 625, 626, 627, 628, 633, 634, 636, 639, 640, 641, 642, 643, 644, 647, 648, 649, 652, 653, 655, 657, 658, 659, 660, 663, 668, 673, 675, 677, 685, 686, 693, 701, 702, 703, 704, 715, 716, 719, 744, 759, 760, 761, 763, 765, 773, 775, 776, 777, 780, 781, 787, 791, 796, 798, 800, 801, 802, 803, 804, 807, 809, 810, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 833, 836, 837, 842, 852, 854, 856, 857, 859, 861, 867, 868, 872, 875, 878, 879, 880, 883, 884, 886, 887, 888, 889, 890, 904, 915, 917, 918, 925, 931, 933, 936, 951, 952, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 972, 976, 977, 978, 982, 983, 988, 992, 995, 996, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "root": [4, 16, 79, 146, 178, 349, 365, 368, 375, 392, 423, 481, 521, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 620, 731, 886, 887, 888, 889, 890, 892, 968, 978, 1006, 1012, 1013, 1014, 1015, 1018, 1019], "metric": [4, 6, 7, 11, 19, 20, 21, 24, 25, 26, 30, 32, 36, 38, 44, 48, 49, 52, 57, 59, 63, 67, 69, 74, 81, 109, 110, 115, 121, 123, 124, 129, 143, 150, 161, 164, 166, 167, 169, 181, 186, 192, 193, 197, 199, 201, 203, 215, 221, 227, 230, 231, 235, 238, 250, 251, 253, 254, 255, 257, 258, 260, 264, 266, 267, 273, 275, 277, 279, 287, 290, 296, 299, 304, 307, 308, 310, 311, 312, 315, 316, 318, 319, 340, 341, 351, 355, 358, 360, 363, 368, 369, 378, 379, 380, 382, 387, 390, 397, 398, 399, 402, 403, 409, 418, 422, 425, 426, 430, 437, 449, 500, 515, 529, 530, 531, 533, 535, 537, 538, 539, 541, 542, 544, 545, 547, 549, 558, 583, 591, 601, 609, 615, 619, 620, 621, 622, 623, 624, 639, 640, 644, 647, 649, 655, 656, 657, 669, 671, 673, 675, 677, 777, 780, 781, 783, 791, 800, 801, 802, 804, 807, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 836, 845, 851, 873, 874, 878, 880, 883, 886, 888, 952, 954, 957, 963, 968, 970, 982, 983, 992, 993, 997, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "studi": [4, 59, 122, 197, 215, 260, 263, 264, 340, 363, 365, 396, 401, 677, 689, 738, 739, 804, 960, 962, 976, 988], "y": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 30, 31, 33, 34, 39, 40, 42, 43, 44, 45, 52, 54, 55, 56, 59, 60, 61, 64, 65, 70, 71, 72, 73, 74, 80, 84, 85, 89, 90, 91, 94, 97, 99, 100, 101, 102, 104, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 166, 167, 168, 169, 170, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 212, 213, 215, 218, 219, 220, 223, 227, 229, 230, 231, 232, 233, 235, 236, 238, 239, 242, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 345, 346, 347, 348, 349, 351, 360, 361, 362, 363, 366, 368, 369, 372, 374, 376, 379, 380, 386, 390, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 405, 409, 410, 411, 413, 414, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 467, 478, 480, 482, 485, 488, 489, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 506, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 679, 680, 681, 682, 683, 687, 692, 706, 715, 721, 722, 736, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 765, 768, 769, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 898, 903, 904, 924, 925, 926, 933, 936, 949, 951, 952, 953, 954, 956, 957, 958, 960, 962, 963, 964, 965, 966, 967, 969, 972, 976, 977, 978, 983, 988, 992, 993, 995, 999, 1001, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "hist": [4, 25, 27, 53, 74, 112, 197, 199, 230, 263, 282, 299, 303, 311], "bin": [4, 24, 25, 27, 53, 74, 112, 197, 230, 263, 282, 299, 300, 301, 302, 303, 366, 375, 383, 390, 398, 399, 419, 420, 428, 441, 541, 542, 842, 844, 858, 917, 996, 1012, 1013, 1014, 1018], "30": [4, 8, 10, 14, 39, 40, 54, 59, 70, 72, 77, 101, 103, 118, 122, 128, 135, 149, 150, 153, 155, 168, 173, 176, 191, 195, 197, 215, 218, 219, 223, 231, 234, 246, 257, 262, 271, 277, 286, 287, 303, 304, 312, 315, 316, 320, 325, 328, 330, 333, 355, 363, 365, 372, 373, 396, 400, 403, 425, 430, 437, 480, 515, 518, 519, 521, 523, 550, 573, 576, 577, 579, 629, 673, 715, 763, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 874, 887, 951, 956, 962, 963, 965, 970, 993, 1004, 1005, 1011, 1012, 1013], "rent": 4, "fleet": 4, "input": [4, 6, 10, 31, 33, 72, 95, 99, 109, 118, 122, 123, 155, 156, 157, 167, 173, 176, 197, 200, 201, 205, 212, 215, 229, 230, 232, 239, 252, 281, 282, 295, 300, 301, 302, 303, 307, 310, 312, 327, 333, 336, 342, 362, 365, 368, 370, 372, 376, 377, 378, 379, 380, 389, 390, 393, 396, 397, 398, 399, 400, 401, 402, 404, 410, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 426, 428, 429, 430, 434, 437, 438, 441, 444, 445, 447, 448, 449, 452, 462, 463, 464, 469, 483, 489, 496, 497, 498, 500, 504, 508, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 563, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 592, 601, 603, 608, 609, 610, 611, 612, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 666, 667, 668, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 682, 683, 702, 703, 704, 708, 725, 726, 728, 730, 731, 733, 734, 741, 747, 748, 751, 752, 754, 758, 759, 760, 761, 765, 775, 776, 777, 780, 781, 783, 791, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 825, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 895, 896, 897, 898, 899, 900, 904, 909, 914, 926, 935, 937, 943, 948, 949, 952, 954, 956, 958, 959, 960, 961, 962, 964, 965, 966, 967, 969, 970, 974, 975, 976, 977, 978, 982, 983, 986, 988, 992, 993, 999, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "annot": [4, 9, 26, 131, 173, 219, 261, 264, 340, 368, 369, 392, 697, 892, 962, 978, 1013], "log": [4, 20, 25, 26, 27, 77, 95, 122, 129, 142, 146, 150, 151, 153, 154, 155, 158, 182, 185, 186, 190, 197, 201, 202, 207, 215, 230, 232, 246, 287, 304, 340, 363, 365, 366, 368, 371, 375, 376, 380, 389, 390, 392, 393, 394, 397, 399, 400, 402, 428, 431, 440, 445, 450, 451, 452, 453, 454, 455, 456, 512, 516, 521, 529, 530, 531, 533, 535, 537, 539, 542, 544, 571, 572, 574, 575, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 623, 626, 629, 639, 640, 650, 652, 657, 661, 721, 731, 735, 775, 776, 777, 780, 781, 791, 814, 815, 816, 817, 818, 819, 820, 824, 835, 836, 843, 844, 872, 875, 880, 883, 885, 886, 888, 913, 951, 954, 956, 958, 959, 964, 965, 967, 970, 972, 976, 978, 982, 983, 995, 1006, 1007, 1008, 1013, 1014, 1015, 1018], "describ": [4, 55, 129, 167, 215, 231, 257, 266, 351, 355, 356, 361, 363, 365, 367, 368, 369, 372, 375, 380, 381, 389, 392, 394, 395, 396, 397, 399, 400, 442, 449, 453, 454, 471, 473, 475, 476, 477, 480, 481, 482, 483, 484, 485, 490, 496, 497, 498, 508, 588, 589, 626, 640, 695, 775, 776, 814, 816, 854, 915, 951, 954, 957, 958, 961, 962, 964, 968, 976, 977, 978, 985, 988, 994, 995, 1012, 1014], "weather": [4, 154, 168, 402, 958, 962], "includ": [4, 32, 79, 119, 121, 166, 167, 169, 197, 215, 258, 277, 294, 299, 310, 311, 327, 332, 340, 342, 351, 355, 356, 362, 364, 366, 368, 369, 371, 372, 373, 375, 376, 380, 381, 383, 389, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 403, 425, 430, 436, 446, 449, 450, 451, 452, 453, 454, 455, 456, 469, 470, 471, 476, 480, 481, 482, 484, 485, 490, 514, 521, 537, 544, 554, 613, 619, 627, 628, 633, 641, 642, 643, 646, 662, 669, 670, 678, 694, 709, 710, 715, 717, 718, 751, 763, 764, 767, 773, 777, 779, 780, 781, 790, 791, 794, 797, 802, 805, 827, 829, 830, 831, 852, 853, 854, 858, 875, 886, 888, 890, 892, 898, 899, 902, 904, 907, 951, 958, 961, 962, 963, 965, 966, 972, 976, 977, 978, 982, 983, 985, 986, 995, 997, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "both": [4, 5, 7, 9, 10, 14, 16, 25, 26, 42, 54, 63, 70, 77, 79, 84, 85, 100, 103, 109, 113, 116, 119, 128, 129, 132, 141, 142, 146, 149, 156, 158, 166, 167, 168, 169, 176, 183, 185, 186, 197, 198, 199, 202, 203, 205, 215, 222, 232, 233, 242, 243, 244, 245, 246, 247, 257, 258, 259, 260, 264, 266, 268, 272, 277, 289, 299, 303, 304, 307, 309, 317, 318, 324, 329, 335, 340, 341, 342, 349, 351, 355, 356, 357, 361, 362, 363, 364, 366, 368, 369, 373, 374, 376, 378, 379, 380, 381, 383, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 402, 405, 418, 427, 432, 439, 442, 448, 455, 462, 463, 464, 465, 468, 469, 476, 477, 480, 482, 485, 487, 488, 489, 514, 527, 531, 535, 536, 537, 543, 544, 545, 546, 547, 557, 569, 570, 572, 578, 588, 589, 608, 613, 614, 624, 638, 639, 640, 653, 655, 657, 659, 668, 680, 685, 693, 697, 711, 716, 737, 741, 747, 754, 758, 763, 768, 769, 773, 780, 781, 783, 808, 836, 837, 851, 855, 866, 871, 876, 878, 879, 886, 888, 902, 916, 925, 937, 951, 952, 953, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 972, 975, 976, 977, 978, 982, 983, 985, 986, 992, 995, 996, 997, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "numer": [4, 19, 65, 70, 74, 117, 119, 129, 146, 154, 157, 168, 169, 186, 197, 215, 237, 239, 287, 310, 342, 362, 363, 365, 370, 372, 373, 378, 379, 380, 392, 394, 399, 400, 401, 402, 404, 405, 421, 424, 427, 439, 451, 452, 455, 458, 469, 470, 471, 476, 480, 481, 482, 484, 485, 490, 511, 513, 515, 520, 527, 547, 562, 571, 592, 598, 601, 608, 611, 613, 614, 627, 633, 635, 653, 668, 671, 675, 695, 768, 772, 777, 780, 781, 783, 791, 801, 802, 803, 806, 814, 815, 816, 817, 818, 836, 837, 842, 847, 852, 853, 890, 891, 892, 898, 899, 914, 915, 951, 952, 958, 959, 963, 970, 972, 973, 978, 985, 986, 988, 997, 1004, 1005, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "categor": [4, 70, 108, 115, 129, 133, 164, 167, 168, 169, 197, 215, 237, 239, 310, 312, 357, 360, 362, 363, 369, 372, 380, 393, 400, 446, 447, 469, 470, 476, 485, 541, 542, 562, 563, 588, 589, 613, 614, 629, 639, 640, 650, 661, 690, 802, 814, 815, 816, 817, 818, 840, 842, 846, 847, 850, 852, 853, 873, 874, 952, 958, 969, 970, 978, 982, 983, 984, 985, 986, 997, 999, 1004, 1005, 1008, 1009, 1012, 1014, 1016, 1019], "inform": [4, 5, 8, 11, 12, 13, 25, 27, 33, 37, 38, 49, 53, 57, 65, 66, 69, 70, 85, 88, 89, 90, 102, 116, 117, 140, 142, 143, 145, 146, 147, 149, 154, 164, 167, 168, 170, 173, 175, 176, 177, 198, 212, 214, 215, 216, 236, 244, 245, 247, 252, 254, 257, 258, 259, 262, 264, 266, 283, 284, 287, 310, 330, 335, 340, 341, 342, 346, 349, 351, 355, 358, 361, 362, 363, 364, 365, 367, 368, 369, 370, 372, 375, 378, 379, 380, 381, 386, 389, 396, 397, 399, 400, 401, 402, 432, 442, 472, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 490, 495, 504, 508, 514, 515, 518, 519, 521, 523, 537, 541, 542, 544, 568, 570, 571, 573, 574, 575, 576, 577, 580, 581, 587, 588, 589, 590, 620, 621, 637, 639, 668, 672, 676, 678, 682, 685, 686, 696, 706, 710, 723, 735, 736, 737, 766, 768, 773, 775, 776, 777, 778, 779, 780, 781, 782, 784, 786, 791, 795, 802, 814, 818, 819, 820, 824, 828, 840, 851, 856, 859, 863, 864, 866, 867, 868, 869, 874, 877, 880, 883, 886, 888, 890, 892, 952, 954, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 973, 976, 978, 983, 986, 994, 995, 996, 997, 1004, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "alreadi": [4, 6, 10, 16, 57, 100, 129, 146, 167, 227, 233, 238, 258, 264, 277, 310, 368, 372, 373, 378, 380, 390, 394, 396, 398, 399, 404, 418, 479, 503, 513, 547, 548, 615, 627, 630, 645, 646, 647, 648, 649, 655, 657, 658, 659, 666, 667, 680, 748, 814, 834, 842, 848, 849, 851, 856, 861, 863, 864, 865, 867, 868, 869, 875, 878, 879, 901, 951, 968, 972, 973, 983, 988, 993, 997, 1001, 1005, 1009, 1012, 1016, 1017, 1018], "expand": [4, 16, 49, 64, 228, 308, 351, 360, 399, 425, 430, 479, 537, 538, 539, 540, 544, 545, 546, 886, 887, 888, 889, 962, 1005, 1012, 1013], "complementari": [4, 400], "column": [4, 20, 21, 59, 68, 71, 74, 75, 89, 116, 118, 119, 122, 126, 129, 146, 154, 161, 164, 166, 167, 168, 169, 186, 197, 198, 205, 215, 234, 236, 247, 257, 258, 268, 269, 295, 304, 309, 310, 311, 312, 340, 341, 342, 355, 362, 363, 365, 368, 369, 373, 376, 378, 379, 380, 389, 392, 393, 395, 397, 399, 400, 401, 404, 407, 431, 433, 444, 446, 447, 451, 452, 458, 467, 468, 469, 470, 471, 472, 474, 476, 480, 481, 482, 484, 485, 488, 489, 490, 491, 493, 495, 506, 511, 514, 517, 522, 524, 528, 535, 537, 538, 544, 545, 546, 547, 562, 563, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 591, 608, 611, 613, 614, 615, 627, 629, 633, 639, 641, 643, 645, 646, 650, 661, 666, 667, 678, 694, 699, 700, 709, 710, 718, 734, 743, 748, 749, 750, 753, 763, 764, 767, 768, 777, 780, 781, 791, 800, 805, 810, 813, 814, 815, 816, 817, 818, 819, 820, 839, 843, 844, 845, 846, 852, 853, 854, 858, 859, 860, 862, 878, 880, 883, 886, 888, 894, 898, 899, 904, 915, 925, 938, 939, 941, 949, 951, 952, 958, 960, 962, 963, 970, 972, 977, 983, 1004, 1006, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "x": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 19, 24, 25, 26, 27, 30, 31, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 71, 72, 73, 74, 78, 79, 80, 81, 84, 85, 89, 90, 91, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 218, 219, 220, 223, 226, 227, 229, 230, 231, 232, 233, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 351, 355, 361, 362, 363, 368, 369, 371, 372, 373, 374, 375, 376, 378, 379, 380, 386, 390, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 409, 410, 411, 412, 413, 414, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 462, 463, 464, 465, 467, 473, 474, 475, 478, 480, 481, 482, 485, 486, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 687, 691, 692, 705, 715, 722, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 768, 770, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 896, 897, 898, 899, 902, 914, 915, 917, 922, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 951, 952, 953, 954, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 972, 974, 975, 976, 977, 978, 983, 988, 992, 993, 995, 996, 997, 1001, 1004, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020], "drop": [4, 5, 70, 74, 85, 154, 166, 167, 168, 170, 197, 215, 239, 267, 309, 312, 341, 371, 375, 393, 397, 399, 444, 447, 547, 548, 549, 550, 676, 683, 769, 838, 852, 858, 952, 958, 962, 970, 972, 982, 1004, 1005, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "axi": [4, 5, 7, 11, 12, 13, 14, 17, 19, 25, 26, 34, 37, 39, 40, 47, 48, 50, 52, 53, 54, 60, 70, 71, 74, 81, 85, 90, 91, 94, 95, 96, 97, 98, 99, 105, 110, 112, 113, 116, 118, 125, 128, 132, 138, 142, 153, 154, 158, 161, 166, 167, 178, 182, 184, 186, 189, 190, 191, 197, 201, 202, 206, 209, 211, 212, 214, 215, 219, 220, 223, 226, 230, 231, 234, 235, 242, 244, 246, 247, 253, 254, 258, 259, 264, 266, 267, 272, 275, 277, 282, 283, 284, 287, 288, 289, 296, 299, 303, 316, 318, 320, 323, 326, 327, 330, 331, 332, 333, 334, 335, 337, 340, 341, 346, 347, 348, 349, 369, 376, 380, 390, 392, 400, 404, 419, 426, 444, 447, 511, 513, 516, 517, 519, 521, 523, 530, 566, 593, 612, 613, 666, 667, 682, 743, 759, 760, 761, 762, 783, 807, 848, 849, 856, 857, 859, 861, 863, 864, 865, 867, 868, 869, 892, 894, 898, 899, 917, 937, 943, 952, 962, 969, 972, 977, 994, 996, 1012, 1014, 1016], "holidai": [4, 168], "workingdai": [4, 168], "temp": [4, 168], "feel_temp": [4, 168], "humid": [4, 168, 969], "windspe": [4, 168], "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 163, 164, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 355, 356, 362, 363, 365, 366, 368, 369, 371, 372, 373, 374, 376, 378, 379, 380, 383, 384, 385, 386, 388, 389, 390, 392, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 413, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 694, 695, 696, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 739, 740, 741, 743, 744, 746, 747, 748, 749, 751, 753, 755, 756, 757, 758, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 896, 898, 899, 904, 909, 910, 912, 914, 915, 917, 918, 919, 920, 922, 924, 925, 927, 928, 930, 931, 932, 933, 936, 937, 943, 951, 952, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 980, 983, 984, 988, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002], "spring": [4, 168], "fals": [4, 5, 7, 8, 10, 11, 13, 14, 16, 20, 21, 24, 26, 27, 32, 33, 39, 42, 44, 46, 47, 54, 63, 66, 69, 70, 71, 72, 78, 80, 91, 99, 101, 104, 105, 109, 116, 119, 122, 123, 132, 135, 149, 154, 155, 156, 157, 167, 168, 169, 170, 176, 177, 183, 197, 198, 202, 203, 205, 213, 215, 218, 221, 233, 235, 239, 242, 254, 255, 257, 260, 261, 264, 265, 266, 267, 268, 269, 270, 271, 277, 281, 287, 290, 294, 295, 299, 300, 307, 309, 310, 311, 312, 317, 327, 329, 335, 336, 340, 341, 362, 368, 369, 372, 380, 390, 392, 393, 394, 396, 397, 399, 400, 401, 402, 404, 405, 415, 416, 417, 418, 421, 422, 423, 424, 426, 427, 428, 429, 431, 432, 433, 434, 439, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 488, 489, 490, 492, 495, 503, 504, 506, 507, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 618, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 675, 676, 678, 679, 680, 682, 683, 684, 689, 690, 692, 693, 694, 695, 696, 699, 706, 707, 708, 709, 710, 711, 718, 722, 723, 730, 731, 734, 736, 741, 743, 747, 748, 749, 754, 758, 762, 763, 764, 765, 767, 769, 772, 774, 775, 776, 777, 780, 781, 782, 783, 788, 791, 795, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 876, 878, 879, 880, 881, 882, 883, 884, 890, 891, 892, 896, 897, 898, 899, 909, 916, 922, 924, 927, 928, 932, 933, 936, 943, 948, 949, 951, 952, 958, 962, 965, 972, 976, 977, 996, 997, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "6": [4, 6, 8, 9, 10, 11, 12, 16, 26, 31, 32, 33, 40, 44, 46, 49, 50, 52, 55, 56, 59, 60, 61, 62, 63, 64, 66, 72, 73, 74, 77, 78, 79, 81, 89, 95, 97, 105, 111, 122, 123, 126, 128, 135, 141, 146, 149, 152, 154, 156, 157, 158, 161, 162, 167, 168, 169, 173, 176, 177, 178, 186, 190, 195, 197, 198, 199, 201, 211, 212, 215, 218, 219, 222, 226, 229, 230, 233, 236, 237, 242, 243, 244, 245, 247, 248, 251, 252, 255, 256, 257, 258, 259, 260, 266, 267, 268, 269, 270, 272, 275, 279, 282, 290, 293, 295, 296, 299, 301, 303, 304, 307, 310, 311, 312, 315, 316, 319, 320, 327, 328, 330, 332, 335, 337, 341, 342, 348, 351, 362, 363, 365, 366, 372, 373, 379, 383, 384, 385, 390, 392, 393, 396, 397, 399, 400, 401, 424, 428, 429, 430, 431, 432, 433, 442, 462, 463, 464, 465, 485, 504, 510, 518, 520, 521, 527, 543, 549, 550, 574, 575, 592, 595, 596, 606, 608, 609, 611, 625, 626, 651, 670, 674, 702, 708, 718, 725, 726, 730, 731, 733, 749, 765, 768, 775, 776, 778, 779, 784, 786, 787, 789, 794, 795, 798, 803, 805, 814, 815, 816, 818, 819, 820, 827, 829, 830, 831, 846, 847, 849, 852, 854, 857, 858, 862, 893, 915, 918, 920, 925, 951, 952, 956, 958, 959, 962, 972, 973, 976, 977, 980, 988, 992, 993, 995, 1000, 1002, 1005, 1006, 1007, 1012, 1017], "clear": [4, 16, 59, 71, 167, 168, 304, 363, 367, 368, 369, 378, 379, 380, 393, 398, 892, 893, 951, 956, 1015, 1016, 1017], "9": [4, 7, 9, 12, 13, 24, 26, 27, 30, 31, 32, 42, 44, 50, 57, 61, 63, 73, 81, 84, 90, 109, 118, 119, 120, 121, 122, 127, 129, 135, 137, 138, 152, 156, 158, 162, 166, 167, 168, 178, 179, 188, 197, 204, 210, 211, 214, 215, 218, 221, 230, 231, 235, 239, 242, 243, 244, 245, 251, 255, 260, 264, 266, 275, 279, 281, 282, 285, 286, 287, 293, 294, 296, 299, 301, 302, 303, 312, 315, 316, 318, 319, 320, 327, 331, 337, 342, 351, 365, 366, 373, 379, 383, 384, 385, 390, 393, 394, 396, 399, 400, 420, 430, 437, 462, 463, 464, 465, 470, 500, 507, 514, 518, 519, 520, 527, 540, 547, 550, 564, 572, 588, 589, 608, 611, 615, 620, 628, 639, 642, 673, 690, 703, 706, 721, 728, 749, 758, 759, 760, 775, 778, 780, 781, 795, 798, 803, 805, 808, 816, 817, 821, 822, 827, 830, 836, 837, 845, 851, 854, 915, 919, 951, 958, 962, 966, 972, 976, 977, 980, 988, 992, 997, 1002, 1005, 1006, 1007, 1009, 1018], "84": [4, 6, 69, 143, 188, 215, 296, 301, 315, 351, 365, 399, 400, 768, 791, 957, 962, 972, 993], "14": [4, 11, 38, 49, 59, 61, 62, 65, 73, 80, 98, 100, 141, 168, 173, 174, 186, 188, 215, 220, 226, 231, 256, 262, 263, 271, 275, 277, 302, 303, 312, 321, 334, 337, 356, 363, 365, 379, 383, 392, 396, 478, 490, 533, 534, 566, 567, 616, 624, 673, 791, 795, 845, 955, 958, 962, 972, 977, 980, 988, 1002, 1004, 1005, 1007, 1008, 1012, 1017], "395": [4, 123, 133], "81": [4, 19, 50, 98, 239, 315, 316, 392, 768, 777, 791, 962, 963, 965, 972], "0000": [4, 312], "02": [4, 12, 28, 35, 44, 50, 52, 57, 61, 63, 67, 75, 81, 82, 84, 95, 98, 107, 112, 118, 151, 156, 159, 166, 167, 171, 178, 215, 216, 226, 230, 233, 240, 252, 258, 264, 273, 276, 282, 293, 296, 297, 299, 301, 320, 323, 338, 341, 346, 362, 365, 372, 396, 422, 426, 578, 639, 657, 777, 791, 858, 873, 887, 958], "13": [4, 6, 10, 11, 15, 19, 44, 73, 100, 105, 118, 120, 121, 123, 161, 167, 173, 183, 206, 251, 258, 261, 263, 291, 296, 299, 303, 309, 313, 327, 342, 363, 365, 368, 373, 379, 396, 404, 490, 493, 512, 513, 531, 532, 563, 616, 620, 714, 795, 823, 838, 845, 870, 871, 958, 962, 963, 968, 969, 972, 977, 980, 988, 1002, 1004, 1006, 1007, 1010, 1011, 1012, 1013, 1016], "635": [4, 309, 313, 597], "80": [4, 6, 11, 16, 27, 66, 80, 101, 129, 138, 143, 168, 176, 233, 296, 301, 315, 330, 331, 332, 340, 347, 351, 363, 365, 368, 390, 396, 401, 425, 490, 521, 694, 777, 791, 872, 891, 951, 957, 958, 962, 969, 975, 978, 997], "75": [4, 6, 7, 10, 33, 44, 81, 113, 143, 156, 157, 162, 167, 173, 176, 179, 188, 204, 215, 239, 244, 245, 257, 266, 270, 282, 299, 310, 337, 340, 351, 531, 639, 687, 693, 714, 719, 725, 733, 736, 772, 777, 857, 868, 875, 891, 962, 964, 972, 978, 981, 993, 1006], "17374": 4, "19": [4, 9, 154, 167, 222, 224, 247, 296, 303, 304, 316, 338, 365, 371, 380, 392, 393, 400, 403, 425, 472, 496, 497, 498, 516, 520, 521, 527, 529, 530, 537, 538, 539, 540, 544, 545, 546, 563, 570, 629, 639, 640, 647, 648, 649, 652, 653, 655, 657, 659, 668, 688, 761, 765, 777, 791, 802, 807, 808, 810, 811, 825, 826, 845, 856, 876, 880, 883, 886, 887, 888, 889, 951, 962, 972, 980, 1000, 1002, 1004, 1005, 1006, 1007, 1009, 1012], "misti": [4, 168], "10": [4, 5, 6, 7, 8, 10, 12, 14, 16, 17, 19, 20, 25, 26, 27, 30, 31, 32, 34, 35, 37, 39, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 70, 71, 73, 77, 78, 79, 80, 81, 84, 85, 91, 97, 98, 99, 100, 101, 105, 106, 109, 110, 112, 113, 115, 116, 118, 119, 120, 122, 123, 126, 127, 130, 132, 133, 136, 138, 139, 143, 146, 150, 151, 153, 155, 156, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 181, 187, 188, 191, 195, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 213, 214, 215, 219, 220, 226, 229, 230, 231, 232, 234, 235, 236, 238, 240, 245, 246, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 265, 268, 271, 275, 282, 284, 293, 294, 295, 296, 299, 300, 302, 303, 304, 307, 308, 309, 310, 311, 315, 316, 317, 319, 325, 327, 329, 330, 331, 332, 334, 335, 337, 340, 341, 351, 355, 362, 363, 364, 365, 366, 368, 369, 372, 373, 378, 379, 380, 383, 384, 385, 389, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 405, 419, 424, 427, 429, 431, 432, 433, 439, 440, 442, 455, 472, 473, 480, 481, 482, 484, 490, 491, 492, 493, 496, 500, 501, 504, 508, 511, 515, 516, 517, 518, 519, 521, 522, 524, 526, 528, 532, 535, 536, 537, 538, 541, 542, 544, 545, 546, 547, 548, 550, 563, 574, 575, 580, 581, 592, 598, 600, 608, 611, 613, 615, 616, 621, 623, 624, 625, 630, 640, 645, 646, 647, 648, 650, 651, 653, 654, 656, 657, 658, 659, 666, 667, 672, 673, 686, 696, 706, 722, 736, 749, 775, 776, 777, 778, 779, 780, 781, 788, 791, 792, 793, 794, 795, 797, 798, 803, 805, 807, 808, 814, 815, 816, 818, 819, 820, 826, 835, 836, 837, 845, 849, 852, 853, 856, 867, 875, 881, 884, 886, 887, 891, 915, 919, 926, 930, 932, 948, 951, 952, 958, 959, 960, 962, 963, 965, 966, 968, 969, 972, 976, 977, 980, 988, 992, 993, 995, 996, 997, 1001, 1002, 1005, 1006, 1007, 1012, 1014, 1015, 1016, 1018, 1019], "66": [4, 91, 220, 222, 365, 392, 512, 613, 693, 763, 764, 773, 858, 962, 974], "880": 4, "60": [4, 6, 16, 58, 72, 81, 197, 209, 212, 215, 218, 219, 239, 245, 265, 270, 296, 316, 330, 340, 362, 392, 396, 430, 437, 694, 777, 962, 972, 993, 1004, 1007], "11": [4, 9, 19, 73, 80, 97, 146, 152, 167, 168, 197, 198, 199, 202, 220, 230, 240, 254, 262, 263, 269, 273, 281, 283, 303, 309, 312, 326, 330, 342, 362, 365, 366, 373, 379, 392, 395, 396, 399, 430, 437, 462, 463, 464, 465, 481, 497, 498, 593, 631, 637, 651, 696, 702, 703, 704, 758, 759, 760, 778, 781, 795, 798, 804, 831, 887, 926, 958, 960, 972, 976, 977, 980, 988, 995, 997, 1002, 1006, 1010, 1012, 1013, 1015, 1018, 1019], "0014": 4, "17375": 4, "20": [4, 7, 8, 14, 16, 25, 26, 27, 33, 34, 39, 40, 43, 46, 47, 50, 54, 60, 66, 77, 81, 91, 95, 101, 103, 105, 110, 112, 118, 119, 122, 125, 129, 130, 132, 138, 141, 142, 143, 155, 166, 168, 169, 179, 186, 187, 189, 193, 194, 196, 197, 198, 201, 206, 209, 210, 211, 212, 214, 221, 230, 235, 240, 244, 246, 247, 257, 258, 260, 261, 263, 268, 269, 271, 277, 281, 282, 283, 284, 285, 288, 296, 303, 304, 308, 309, 310, 311, 315, 316, 319, 324, 326, 330, 332, 337, 341, 342, 347, 348, 361, 365, 368, 369, 371, 372, 373, 383, 392, 399, 400, 422, 427, 429, 444, 445, 449, 451, 452, 458, 468, 469, 470, 471, 472, 474, 476, 477, 480, 482, 484, 485, 492, 495, 496, 503, 511, 516, 517, 522, 525, 526, 528, 532, 535, 536, 539, 540, 541, 542, 543, 549, 550, 563, 570, 573, 575, 578, 580, 610, 611, 626, 630, 639, 647, 648, 649, 657, 659, 677, 685, 689, 694, 697, 705, 706, 719, 736, 737, 747, 770, 771, 775, 776, 777, 791, 801, 802, 803, 806, 808, 811, 812, 813, 816, 817, 824, 825, 836, 837, 838, 839, 841, 843, 844, 852, 853, 854, 855, 873, 874, 876, 877, 882, 890, 896, 898, 899, 951, 958, 962, 965, 968, 969, 972, 975, 980, 985, 986, 989, 995, 999, 1000, 1002, 1004, 1010, 1013, 1016, 1018, 1019], "17376": 4, "21": [4, 167, 186, 198, 215, 220, 247, 265, 277, 296, 301, 303, 313, 341, 365, 366, 369, 371, 383, 389, 399, 400, 422, 426, 454, 512, 541, 542, 543, 549, 550, 569, 570, 572, 608, 650, 668, 734, 777, 779, 791, 802, 845, 852, 854, 876, 892, 958, 963, 972, 980, 1000, 1002, 1004, 1005, 1007, 1011, 1012, 1014], "17377": 4, "22": [4, 42, 164, 167, 168, 214, 247, 296, 299, 303, 306, 313, 316, 342, 366, 368, 371, 372, 383, 384, 385, 389, 418, 428, 452, 468, 469, 475, 476, 484, 495, 504, 511, 517, 522, 525, 526, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 575, 608, 609, 613, 615, 626, 628, 632, 634, 636, 639, 640, 642, 644, 646, 650, 669, 673, 685, 694, 737, 749, 758, 763, 764, 768, 777, 778, 782, 791, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 823, 825, 827, 829, 830, 831, 836, 837, 838, 840, 843, 859, 878, 880, 881, 882, 883, 884, 886, 887, 888, 889, 909, 910, 962, 972, 980, 1000, 1002, 1004, 1007, 1012, 1015, 1017], "56": [4, 215, 230, 373, 694, 715, 962, 972, 1000, 1004], "8": [4, 5, 6, 7, 8, 9, 12, 13, 25, 26, 27, 31, 32, 34, 37, 43, 44, 45, 48, 50, 53, 59, 61, 63, 64, 69, 71, 73, 74, 80, 84, 89, 90, 91, 95, 96, 98, 99, 100, 104, 106, 113, 115, 119, 121, 122, 124, 127, 130, 131, 135, 145, 146, 150, 152, 154, 155, 157, 158, 162, 166, 167, 168, 170, 173, 176, 177, 182, 183, 188, 191, 197, 198, 205, 207, 213, 215, 218, 219, 220, 222, 223, 227, 230, 231, 232, 233, 235, 237, 238, 239, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 260, 261, 262, 264, 267, 268, 275, 279, 281, 285, 289, 293, 295, 296, 299, 301, 302, 303, 304, 307, 312, 315, 316, 317, 319, 320, 324, 327, 331, 332, 334, 336, 340, 341, 342, 348, 351, 356, 362, 363, 365, 366, 368, 372, 373, 383, 384, 385, 390, 392, 396, 397, 399, 400, 401, 402, 420, 424, 425, 427, 429, 430, 432, 442, 449, 450, 451, 452, 453, 454, 455, 456, 463, 464, 465, 467, 470, 482, 483, 494, 511, 514, 518, 520, 523, 525, 527, 529, 530, 535, 536, 545, 550, 563, 569, 570, 571, 572, 609, 610, 629, 639, 651, 657, 670, 673, 674, 675, 676, 680, 683, 687, 688, 690, 696, 702, 707, 708, 709, 721, 725, 726, 730, 731, 733, 762, 763, 765, 768, 769, 773, 775, 778, 779, 784, 787, 794, 795, 798, 805, 808, 817, 819, 820, 826, 836, 837, 838, 844, 851, 880, 883, 913, 915, 919, 951, 952, 958, 959, 960, 962, 965, 970, 972, 976, 980, 986, 988, 992, 993, 994, 995, 996, 1000, 1001, 1002, 1005, 1006, 1007, 1011, 1012, 1017, 1018, 1020], "9981": 4, "17378": 4, "23": [4, 19, 26, 34, 42, 50, 91, 98, 164, 223, 239, 247, 296, 303, 306, 309, 310, 313, 316, 365, 373, 383, 399, 405, 413, 421, 427, 432, 434, 442, 445, 447, 448, 455, 462, 463, 464, 470, 472, 480, 481, 482, 484, 485, 490, 492, 494, 502, 504, 518, 519, 520, 523, 527, 534, 536, 538, 540, 541, 542, 545, 548, 549, 550, 588, 589, 592, 608, 611, 613, 616, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 650, 651, 653, 654, 656, 659, 660, 661, 698, 710, 758, 805, 811, 812, 813, 822, 830, 837, 840, 852, 859, 866, 867, 876, 879, 881, 884, 887, 889, 896, 898, 899, 909, 910, 915, 962, 980, 1000, 1002, 1004, 1005, 1011, 1012, 1013, 1016], "65": [4, 8, 33, 168, 197, 266, 392, 420, 482, 578, 721, 770, 771, 969, 993, 1000, 1004, 1005, 1006], "17379": [4, 1016], "row": [4, 19, 20, 21, 25, 27, 44, 59, 74, 89, 91, 118, 127, 130, 161, 197, 198, 199, 227, 230, 235, 236, 301, 349, 355, 363, 369, 376, 379, 380, 389, 392, 395, 400, 407, 423, 424, 427, 429, 430, 431, 433, 436, 437, 439, 444, 448, 468, 470, 471, 472, 473, 474, 475, 480, 481, 482, 484, 485, 490, 491, 493, 514, 522, 528, 531, 571, 572, 601, 613, 624, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 673, 677, 678, 691, 699, 700, 705, 738, 739, 743, 746, 748, 749, 750, 751, 753, 754, 756, 758, 759, 760, 761, 775, 776, 808, 814, 815, 816, 817, 818, 824, 827, 828, 829, 830, 831, 834, 845, 849, 851, 854, 865, 868, 869, 872, 876, 894, 898, 899, 915, 933, 936, 940, 942, 944, 945, 949, 951, 952, 956, 958, 960, 962, 963, 965, 972, 973, 976, 977, 983, 1011, 1012, 1013, 1014, 1019], "onli": [4, 7, 11, 13, 14, 24, 25, 26, 27, 30, 33, 37, 39, 40, 45, 49, 53, 57, 65, 69, 70, 71, 73, 74, 80, 89, 98, 99, 106, 110, 112, 116, 117, 118, 119, 121, 128, 129, 141, 142, 143, 146, 149, 151, 154, 156, 158, 162, 164, 166, 167, 168, 173, 175, 180, 186, 193, 197, 198, 200, 203, 205, 206, 215, 216, 218, 219, 226, 228, 230, 232, 236, 239, 242, 243, 244, 247, 248, 253, 255, 257, 259, 260, 263, 264, 265, 266, 268, 269, 277, 280, 283, 285, 288, 290, 295, 299, 300, 304, 309, 310, 315, 316, 318, 323, 324, 327, 332, 335, 336, 340, 341, 342, 345, 346, 349, 351, 355, 356, 357, 361, 362, 363, 365, 366, 368, 369, 371, 372, 373, 374, 375, 376, 378, 380, 381, 383, 386, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 439, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 462, 463, 464, 465, 469, 470, 471, 472, 474, 476, 477, 480, 481, 482, 483, 484, 485, 488, 489, 490, 492, 496, 499, 503, 504, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 680, 688, 690, 694, 706, 709, 710, 714, 716, 717, 718, 721, 722, 723, 736, 738, 740, 754, 758, 759, 760, 761, 763, 764, 767, 768, 770, 771, 772, 775, 776, 777, 779, 780, 781, 783, 791, 795, 800, 801, 802, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 894, 896, 898, 899, 902, 904, 907, 915, 917, 920, 922, 928, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 972, 973, 974, 976, 977, 978, 982, 983, 986, 995, 996, 997, 1001, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1019, 1020], "present": [4, 5, 43, 49, 91, 95, 103, 115, 122, 125, 145, 155, 158, 176, 179, 186, 197, 226, 229, 247, 255, 260, 263, 266, 267, 277, 299, 302, 304, 341, 365, 366, 369, 372, 378, 380, 392, 394, 397, 399, 400, 410, 411, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 444, 448, 449, 450, 451, 452, 453, 454, 455, 456, 469, 470, 471, 472, 476, 480, 481, 482, 483, 484, 485, 490, 511, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 529, 530, 543, 546, 549, 550, 562, 563, 564, 569, 570, 572, 598, 608, 609, 610, 611, 631, 635, 658, 669, 670, 671, 672, 693, 709, 710, 718, 722, 749, 763, 764, 767, 775, 776, 777, 780, 781, 789, 791, 803, 821, 822, 823, 825, 827, 829, 830, 831, 838, 843, 851, 852, 853, 854, 855, 857, 870, 871, 882, 890, 892, 893, 915, 946, 961, 962, 963, 964, 969, 972, 981, 983, 1007, 1012, 1014, 1015, 1016, 1018], "date": [4, 69, 154, 168, 363, 365, 368, 371, 381, 393, 983], "datetim": [4, 17, 154, 168], "http": [4, 6, 7, 8, 12, 17, 24, 70, 123, 129, 146, 158, 162, 173, 197, 205, 213, 215, 223, 227, 235, 275, 277, 295, 362, 363, 365, 366, 368, 371, 372, 373, 375, 378, 380, 383, 392, 396, 401, 423, 429, 432, 442, 467, 472, 476, 480, 482, 488, 489, 490, 510, 511, 514, 516, 517, 521, 576, 617, 622, 625, 630, 639, 645, 647, 648, 649, 652, 657, 660, 663, 664, 666, 667, 672, 673, 676, 686, 702, 703, 704, 738, 739, 749, 814, 816, 817, 818, 821, 822, 827, 828, 829, 830, 835, 857, 871, 872, 873, 886, 887, 958, 960, 962, 965, 975, 978, 985, 986, 993, 1009, 1014], "pydata": [4, 981, 986], "org": [4, 12, 13, 14, 17, 24, 26, 32, 37, 46, 48, 60, 65, 70, 71, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 158, 167, 168, 169, 173, 178, 188, 189, 197, 205, 213, 215, 219, 227, 228, 229, 231, 236, 237, 238, 239, 247, 255, 257, 258, 260, 264, 269, 275, 295, 296, 308, 309, 311, 312, 315, 316, 317, 320, 340, 341, 342, 349, 356, 361, 366, 368, 370, 373, 375, 381, 383, 396, 576, 617, 649, 652, 657, 676, 686, 749, 821, 822, 827, 828, 829, 830, 857, 872, 886, 887, 958, 962, 978, 980, 999, 1012, 1016], "stabl": [4, 158, 167, 191, 195, 199, 277, 308, 341, 366, 368, 371, 373, 376, 380, 383, 396, 400, 404, 451, 452, 458, 513, 560, 636, 653, 655, 668, 673, 704, 732, 914, 915, 958, 964, 965, 972, 983, 1000, 1004, 1005, 1010, 1015, 1017], "user_guid": 4, "timeseri": 4, "html": [4, 8, 12, 26, 70, 71, 109, 115, 116, 117, 125, 126, 129, 132, 143, 146, 154, 158, 167, 168, 169, 173, 178, 227, 229, 236, 237, 238, 239, 247, 255, 257, 258, 264, 269, 296, 308, 309, 311, 312, 317, 349, 363, 365, 368, 371, 373, 375, 393, 396, 400, 467, 488, 489, 639, 814, 818, 911, 960, 982, 983, 1015, 1016, 1017, 1018, 1019], "compon": [4, 5, 17, 44, 57, 61, 69, 72, 83, 84, 86, 93, 96, 97, 99, 100, 102, 103, 104, 106, 107, 127, 154, 164, 166, 218, 230, 231, 233, 242, 243, 246, 247, 248, 256, 258, 278, 291, 296, 304, 309, 355, 360, 363, 368, 369, 373, 376, 378, 391, 392, 393, 395, 400, 402, 404, 406, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 442, 443, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 482, 484, 495, 501, 506, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 553, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 676, 709, 710, 718, 763, 764, 767, 775, 776, 777, 780, 781, 791, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 914, 915, 954, 959, 972, 974, 977, 982, 983, 984, 986, 991, 997, 998, 999, 1004, 1006, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019], "now": [4, 5, 7, 17, 53, 56, 70, 85, 100, 109, 111, 115, 116, 118, 119, 122, 123, 129, 132, 146, 149, 154, 155, 156, 162, 166, 167, 168, 169, 173, 176, 178, 183, 185, 186, 198, 199, 222, 231, 253, 257, 260, 268, 269, 304, 308, 309, 311, 312, 317, 327, 335, 340, 341, 342, 351, 355, 357, 363, 368, 369, 373, 378, 379, 380, 389, 396, 397, 399, 400, 404, 473, 488, 489, 492, 516, 529, 559, 560, 561, 563, 608, 611, 630, 634, 639, 644, 665, 706, 736, 775, 776, 780, 781, 811, 826, 937, 951, 952, 958, 962, 968, 971, 972, 977, 978, 981, 983, 988, 995, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "introspect": [4, 6, 70, 373, 539, 540, 569, 570, 572, 972, 993], "value_count": [4, 168], "11413": [4, 168], "4544": [4, 168], "rain": [4, 168, 958], "1419": [4, 168], "heavy_rain": [4, 168], "name": [4, 6, 7, 10, 11, 12, 17, 19, 25, 27, 30, 31, 37, 44, 45, 57, 61, 70, 72, 74, 81, 94, 96, 102, 113, 114, 115, 119, 120, 122, 129, 167, 168, 169, 186, 195, 197, 199, 203, 204, 212, 214, 215, 218, 219, 226, 232, 234, 235, 239, 244, 252, 254, 255, 258, 260, 261, 264, 266, 267, 277, 285, 286, 293, 294, 301, 303, 311, 312, 319, 332, 340, 341, 342, 356, 357, 362, 363, 366, 368, 369, 371, 372, 374, 375, 380, 383, 386, 389, 392, 393, 396, 399, 400, 402, 406, 408, 412, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 468, 469, 470, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 490, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 556, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 668, 669, 670, 671, 672, 673, 678, 679, 680, 681, 683, 689, 690, 694, 712, 713, 759, 760, 775, 776, 777, 780, 781, 783, 789, 791, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 897, 898, 899, 902, 906, 907, 908, 910, 923, 925, 932, 946, 950, 951, 956, 958, 962, 963, 969, 970, 972, 978, 983, 992, 993, 995, 997, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "dtype": [4, 8, 10, 11, 17, 48, 49, 53, 64, 69, 70, 121, 123, 124, 125, 150, 151, 152, 162, 167, 168, 199, 215, 235, 239, 242, 255, 261, 265, 284, 290, 310, 311, 316, 349, 362, 363, 368, 369, 378, 380, 393, 396, 407, 410, 423, 424, 427, 428, 429, 430, 431, 433, 444, 446, 447, 449, 452, 454, 468, 469, 470, 471, 476, 477, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 494, 502, 522, 537, 538, 539, 540, 543, 544, 545, 546, 562, 563, 566, 567, 569, 570, 572, 574, 575, 583, 587, 608, 609, 610, 611, 613, 614, 621, 622, 625, 626, 627, 633, 637, 638, 641, 642, 643, 644, 645, 646, 652, 654, 656, 678, 695, 696, 718, 721, 735, 766, 783, 800, 803, 815, 819, 820, 822, 830, 844, 850, 852, 853, 859, 872, 880, 881, 882, 883, 884, 886, 887, 888, 889, 895, 896, 898, 899, 927, 937, 938, 939, 940, 943, 949, 952, 972, 975, 977, 988, 1005, 1007, 1008, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "int64": [4, 13, 54, 70, 167, 168, 349, 380, 400, 410, 423, 428, 430, 569, 621, 695, 696, 815, 1012, 1015, 1017, 1019], "cannot": [4, 40, 55, 74, 81, 95, 100, 117, 167, 168, 197, 215, 299, 327, 357, 367, 373, 380, 381, 392, 393, 394, 396, 397, 399, 400, 402, 445, 501, 518, 519, 520, 523, 527, 591, 594, 595, 596, 598, 600, 601, 603, 604, 606, 632, 636, 663, 673, 692, 698, 758, 780, 781, 826, 827, 829, 830, 831, 839, 840, 849, 850, 860, 896, 898, 899, 951, 952, 956, 958, 959, 963, 968, 972, 977, 978, 983, 986, 992, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020], "train": [4, 5, 6, 7, 8, 10, 11, 16, 24, 26, 27, 30, 31, 32, 33, 55, 57, 63, 69, 70, 74, 84, 85, 89, 95, 98, 100, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 126, 129, 130, 131, 135, 143, 149, 150, 151, 154, 155, 156, 157, 158, 164, 166, 167, 168, 169, 170, 173, 180, 181, 183, 185, 186, 188, 189, 190, 192, 193, 197, 198, 199, 201, 204, 205, 206, 209, 211, 212, 215, 226, 229, 231, 234, 235, 244, 246, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 273, 275, 277, 280, 283, 284, 285, 286, 288, 290, 293, 294, 295, 299, 301, 303, 304, 307, 310, 314, 315, 316, 319, 320, 321, 323, 326, 334, 335, 342, 344, 347, 348, 350, 351, 355, 356, 357, 360, 365, 369, 372, 378, 379, 380, 386, 388, 390, 392, 393, 394, 395, 397, 399, 400, 401, 402, 404, 418, 421, 422, 424, 425, 427, 429, 431, 432, 433, 434, 439, 445, 449, 450, 452, 453, 454, 455, 456, 462, 463, 464, 465, 467, 468, 469, 473, 477, 478, 480, 484, 504, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 564, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 608, 609, 611, 612, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 668, 669, 670, 672, 673, 677, 684, 721, 768, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 839, 844, 845, 848, 849, 852, 853, 857, 858, 859, 863, 864, 866, 867, 868, 869, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 936, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 972, 976, 977, 978, 982, 983, 984, 986, 989, 992, 993, 999, 1001, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "learn": [4, 6, 7, 8, 9, 10, 16, 17, 25, 26, 27, 31, 32, 34, 36, 37, 49, 55, 66, 67, 69, 74, 80, 81, 84, 93, 100, 105, 107, 109, 113, 114, 115, 117, 118, 124, 126, 127, 128, 129, 135, 136, 137, 138, 143, 146, 149, 152, 154, 158, 161, 162, 165, 169, 171, 172, 174, 183, 185, 186, 211, 215, 222, 224, 225, 226, 231, 233, 238, 239, 250, 254, 256, 257, 260, 262, 263, 265, 271, 273, 277, 281, 282, 283, 284, 285, 290, 292, 295, 296, 297, 299, 300, 304, 306, 313, 314, 318, 320, 321, 326, 333, 335, 340, 341, 342, 345, 346, 347, 348, 351, 356, 358, 360, 361, 362, 363, 365, 367, 370, 373, 374, 375, 376, 379, 380, 382, 386, 387, 388, 389, 390, 392, 393, 394, 396, 398, 400, 401, 402, 406, 407, 409, 410, 411, 413, 414, 418, 419, 420, 423, 424, 427, 429, 430, 437, 439, 444, 445, 447, 448, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 488, 489, 490, 492, 494, 495, 496, 497, 498, 500, 502, 504, 505, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 551, 556, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 580, 583, 584, 591, 592, 595, 600, 603, 607, 609, 611, 615, 619, 621, 622, 624, 625, 626, 627, 629, 633, 638, 639, 649, 650, 657, 658, 659, 661, 669, 670, 671, 672, 673, 677, 681, 682, 689, 694, 698, 699, 702, 703, 704, 706, 715, 721, 723, 728, 736, 758, 759, 760, 765, 768, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 813, 814, 815, 816, 817, 818, 821, 823, 828, 835, 836, 837, 838, 840, 842, 844, 846, 849, 851, 852, 853, 854, 857, 858, 859, 862, 870, 871, 873, 874, 875, 876, 878, 879, 880, 883, 886, 887, 888, 889, 901, 909, 910, 928, 929, 951, 952, 954, 955, 956, 958, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 972, 973, 976, 977, 978, 979, 981, 985, 990, 992, 993, 999, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "simplifi": [4, 70, 185, 327, 367, 372, 395, 495, 542, 838, 839, 962, 964, 972], "represent": [4, 12, 17, 20, 26, 53, 70, 71, 95, 98, 109, 115, 116, 117, 125, 126, 127, 129, 132, 143, 154, 167, 168, 169, 173, 178, 218, 219, 220, 227, 229, 236, 237, 238, 239, 247, 255, 257, 258, 264, 269, 287, 296, 309, 311, 312, 317, 341, 342, 349, 351, 360, 362, 369, 380, 386, 392, 393, 397, 398, 399, 443, 511, 515, 517, 520, 522, 528, 546, 569, 571, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 611, 624, 627, 633, 639, 640, 641, 643, 647, 649, 657, 658, 659, 749, 775, 776, 783, 835, 848, 852, 853, 857, 859, 871, 878, 890, 892, 895, 911, 928, 954, 959, 961, 963, 965, 966, 967, 969, 972, 977, 983, 988, 989, 991, 995, 997, 1004, 1005, 1008, 1015, 1016, 1017, 1018, 1019], "collaps": [4, 168, 299, 327, 378], "those": [4, 7, 12, 17, 19, 59, 70, 111, 122, 146, 158, 166, 168, 169, 170, 197, 199, 215, 223, 230, 234, 235, 248, 251, 257, 260, 263, 294, 299, 304, 324, 327, 340, 341, 342, 355, 356, 362, 368, 369, 371, 372, 373, 374, 378, 380, 383, 389, 390, 392, 396, 397, 399, 400, 402, 428, 430, 441, 444, 448, 474, 475, 476, 483, 537, 538, 544, 545, 549, 550, 562, 673, 678, 693, 699, 716, 777, 780, 781, 789, 791, 798, 821, 822, 823, 825, 827, 828, 829, 830, 831, 880, 883, 886, 887, 888, 889, 951, 954, 958, 961, 962, 964, 965, 966, 969, 972, 978, 981, 982, 986, 988, 997, 1004, 1007, 1010, 1011, 1012, 1017, 1018, 1019], "replac": [4, 25, 79, 99, 149, 156, 161, 168, 183, 198, 235, 260, 277, 301, 309, 329, 366, 368, 369, 371, 373, 376, 380, 386, 393, 396, 399, 400, 422, 426, 483, 495, 535, 536, 543, 563, 569, 570, 571, 572, 588, 589, 608, 611, 615, 620, 622, 708, 765, 789, 791, 838, 839, 842, 861, 874, 881, 931, 933, 936, 951, 952, 958, 962, 972, 977, 978, 982, 983, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1019], "to_replac": [4, 168], "valu": [4, 5, 7, 9, 11, 12, 13, 16, 17, 19, 21, 26, 27, 32, 37, 40, 42, 44, 46, 53, 59, 60, 61, 65, 70, 72, 74, 77, 79, 81, 95, 98, 106, 112, 114, 115, 116, 117, 119, 122, 123, 125, 126, 128, 129, 141, 142, 145, 146, 149, 152, 153, 155, 157, 158, 163, 166, 167, 168, 169, 170, 173, 176, 177, 179, 183, 185, 186, 187, 188, 190, 195, 197, 198, 199, 201, 203, 212, 215, 217, 221, 224, 226, 227, 228, 229, 230, 231, 232, 235, 238, 239, 242, 248, 251, 253, 255, 257, 258, 260, 262, 263, 264, 266, 268, 269, 270, 272, 277, 290, 293, 294, 296, 299, 300, 301, 302, 303, 304, 309, 318, 327, 332, 335, 340, 341, 342, 345, 349, 351, 355, 356, 357, 358, 360, 361, 362, 363, 365, 369, 370, 372, 373, 374, 376, 378, 379, 380, 382, 383, 389, 390, 391, 392, 393, 394, 395, 396, 400, 401, 402, 403, 404, 405, 406, 413, 414, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 462, 463, 464, 465, 467, 470, 471, 473, 476, 477, 478, 481, 488, 489, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 507, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 678, 679, 680, 681, 682, 683, 685, 686, 688, 689, 690, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 749, 751, 754, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 788, 789, 791, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 895, 896, 897, 898, 899, 902, 903, 904, 905, 907, 915, 917, 922, 924, 925, 926, 930, 938, 939, 940, 951, 954, 955, 956, 957, 958, 959, 961, 963, 964, 965, 966, 967, 968, 969, 973, 975, 976, 977, 978, 986, 988, 993, 995, 996, 997, 998, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "inplac": [4, 168, 215, 269, 434, 462, 463, 464, 465, 834, 842, 845, 848, 849, 851, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 868, 869, 935, 938, 939, 940, 944, 945, 1013], "1422": 4, "expect": [4, 5, 10, 24, 37, 44, 53, 85, 91, 100, 113, 115, 116, 119, 122, 143, 149, 155, 164, 165, 169, 171, 183, 188, 197, 198, 199, 205, 215, 230, 236, 243, 244, 247, 248, 264, 277, 304, 340, 341, 351, 355, 356, 368, 369, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 388, 390, 392, 393, 394, 396, 399, 400, 401, 413, 444, 445, 447, 448, 449, 462, 463, 464, 476, 503, 512, 516, 518, 521, 532, 534, 535, 536, 538, 540, 542, 543, 545, 547, 548, 550, 552, 566, 567, 569, 570, 572, 576, 578, 587, 592, 608, 613, 614, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 655, 656, 659, 660, 676, 685, 686, 697, 715, 768, 772, 812, 813, 814, 815, 816, 817, 818, 822, 825, 830, 837, 840, 845, 852, 853, 856, 859, 868, 869, 876, 878, 879, 880, 881, 882, 883, 884, 887, 889, 925, 951, 958, 962, 964, 968, 972, 976, 977, 978, 985, 993, 996, 997, 999, 1004, 1005, 1006, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "balanc": [4, 6, 53, 65, 164, 202, 250, 260, 273, 299, 357, 378, 380, 396, 397, 399, 482, 495, 514, 520, 521, 527, 537, 541, 544, 621, 639, 640, 647, 649, 655, 656, 657, 684, 689, 709, 723, 762, 767, 777, 778, 795, 839, 878, 880, 883, 886, 888, 903, 904, 951, 977, 978, 993, 1004, 1006, 1009, 1010, 1013, 1014, 1018], "fall": [4, 122, 156, 256, 257, 368, 369, 391, 392, 400, 415, 427, 488, 489, 707, 708, 772, 856, 867, 961, 962, 972, 988, 996, 1013], "4496": 4, "4409": 4, "4242": 4, "winter": 4, "4232": 4, "order": [4, 13, 24, 47, 63, 64, 71, 77, 88, 105, 117, 118, 119, 123, 138, 154, 166, 167, 170, 173, 186, 190, 193, 197, 198, 203, 211, 215, 220, 230, 244, 252, 255, 257, 264, 275, 296, 299, 304, 309, 310, 335, 340, 342, 351, 355, 356, 363, 368, 369, 372, 373, 376, 380, 383, 386, 392, 393, 394, 396, 397, 398, 399, 400, 402, 404, 421, 424, 427, 429, 430, 435, 436, 437, 439, 444, 468, 469, 470, 475, 477, 495, 514, 515, 519, 520, 521, 523, 527, 531, 533, 535, 536, 537, 539, 543, 544, 547, 562, 569, 572, 574, 575, 578, 587, 588, 589, 591, 603, 608, 612, 621, 639, 640, 646, 657, 666, 667, 669, 670, 674, 678, 680, 683, 685, 693, 694, 699, 706, 709, 710, 718, 720, 721, 734, 736, 758, 763, 764, 767, 768, 769, 772, 777, 778, 780, 781, 782, 784, 788, 791, 795, 796, 800, 807, 808, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 829, 836, 839, 850, 852, 853, 854, 858, 859, 862, 863, 864, 866, 867, 868, 869, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 898, 899, 904, 915, 926, 931, 952, 958, 959, 962, 963, 965, 966, 972, 975, 976, 977, 978, 983, 992, 994, 995, 997, 1004, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "sensit": [4, 44, 79, 80, 113, 122, 168, 199, 200, 226, 299, 327, 356, 357, 381, 394, 399, 432, 442, 673, 693, 694, 768, 957, 958, 959, 961, 962, 966, 968, 976, 977, 988, 996, 1008], "splitter": [4, 380, 396, 418, 452, 547, 548, 575, 583, 628, 632, 634, 636, 642, 644, 646, 654, 656, 777, 779, 780, 781, 782, 783, 791, 792, 793, 794, 796, 797, 799, 800, 801, 802, 803, 804, 806, 810, 813, 886, 887, 888, 889, 983, 1010, 1011, 1012, 1013], "evalu": [4, 5, 6, 10, 11, 24, 32, 36, 49, 67, 70, 71, 98, 109, 116, 117, 119, 120, 122, 142, 152, 164, 170, 173, 177, 186, 199, 204, 215, 225, 240, 250, 251, 254, 255, 257, 260, 262, 263, 264, 266, 268, 269, 271, 273, 275, 286, 290, 304, 309, 327, 340, 351, 358, 361, 363, 369, 373, 380, 382, 391, 393, 400, 401, 402, 427, 429, 468, 471, 472, 473, 476, 489, 500, 516, 531, 541, 542, 543, 547, 548, 572, 575, 583, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 612, 613, 614, 615, 628, 634, 640, 654, 656, 678, 680, 682, 683, 684, 685, 686, 692, 694, 695, 696, 698, 699, 706, 707, 716, 717, 722, 734, 735, 736, 737, 766, 773, 775, 776, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 810, 816, 819, 820, 825, 837, 839, 846, 863, 864, 866, 867, 868, 869, 880, 883, 886, 901, 909, 936, 954, 958, 960, 964, 965, 968, 969, 970, 973, 976, 978, 982, 986, 988, 989, 992, 993, 995, 998, 999, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017], "forecast": [4, 257, 390, 962, 982], "realist": [4, 8, 259, 266, 267, 324, 962], "gap": [4, 340, 363, 396, 451, 452, 458, 569, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 798, 886, 887, 888, 889, 958, 959, 1012, 1016, 1018], "between": [4, 5, 8, 9, 11, 12, 37, 38, 39, 40, 42, 43, 53, 59, 60, 65, 84, 98, 100, 104, 109, 113, 119, 122, 141, 149, 154, 155, 157, 164, 166, 167, 168, 169, 176, 183, 188, 192, 193, 197, 198, 199, 201, 202, 205, 215, 218, 226, 231, 235, 250, 253, 256, 257, 258, 259, 260, 262, 263, 264, 266, 273, 279, 283, 284, 286, 287, 299, 304, 310, 318, 327, 335, 340, 341, 342, 349, 351, 355, 356, 363, 368, 369, 376, 378, 379, 380, 386, 389, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 412, 421, 422, 425, 426, 430, 432, 433, 434, 436, 437, 438, 443, 449, 450, 451, 452, 453, 454, 455, 456, 471, 473, 474, 475, 476, 477, 478, 482, 494, 495, 501, 504, 507, 514, 516, 517, 518, 519, 520, 521, 526, 527, 529, 533, 534, 539, 540, 542, 543, 565, 569, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 583, 585, 586, 587, 588, 589, 590, 601, 608, 613, 614, 615, 620, 623, 626, 627, 628, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 651, 657, 659, 660, 662, 665, 669, 671, 673, 675, 676, 677, 680, 682, 684, 685, 686, 688, 690, 691, 695, 696, 697, 698, 700, 704, 705, 706, 709, 710, 711, 714, 716, 717, 723, 732, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 770, 771, 773, 774, 775, 776, 777, 779, 780, 786, 794, 795, 797, 804, 805, 807, 809, 821, 822, 823, 825, 826, 827, 829, 830, 831, 832, 833, 836, 837, 843, 846, 847, 849, 850, 852, 853, 856, 857, 858, 864, 867, 868, 872, 883, 886, 887, 888, 889, 891, 912, 931, 951, 954, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 976, 977, 978, 979, 983, 995, 996, 1004, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "side": [4, 16, 27, 58, 122, 190, 215, 220, 229, 299, 340, 351, 363, 378, 390, 393, 396, 397, 400, 495, 958, 959, 962, 964, 977, 1013], "split": [4, 5, 6, 11, 14, 17, 24, 26, 31, 32, 69, 100, 109, 115, 116, 118, 121, 122, 123, 124, 125, 135, 142, 166, 167, 181, 192, 193, 197, 200, 205, 215, 227, 243, 244, 251, 252, 255, 257, 262, 264, 267, 286, 293, 295, 300, 301, 311, 318, 327, 340, 342, 349, 363, 374, 379, 380, 383, 390, 392, 397, 399, 400, 418, 423, 424, 452, 453, 459, 460, 477, 511, 517, 519, 522, 526, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 569, 570, 572, 575, 583, 628, 632, 634, 636, 642, 644, 646, 654, 656, 676, 685, 686, 698, 711, 717, 737, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 813, 819, 820, 836, 837, 863, 864, 866, 867, 868, 869, 886, 887, 888, 889, 933, 951, 958, 959, 965, 968, 969, 970, 976, 978, 983, 988, 992, 993, 995, 996, 997, 999, 1004, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019], "limit": [4, 8, 17, 37, 42, 56, 65, 81, 116, 117, 123, 129, 161, 167, 168, 169, 176, 197, 198, 214, 230, 264, 301, 310, 342, 351, 356, 369, 372, 378, 380, 381, 392, 395, 397, 401, 443, 448, 539, 540, 541, 542, 613, 631, 639, 640, 660, 663, 664, 669, 758, 798, 827, 829, 830, 831, 852, 876, 880, 881, 882, 883, 884, 930, 951, 958, 959, 961, 962, 969, 970, 972, 983, 988, 999, 1012, 1014, 1017, 1018], "cv": [4, 12, 24, 25, 26, 54, 70, 71, 72, 73, 77, 103, 119, 121, 135, 136, 145, 161, 162, 167, 186, 196, 199, 253, 255, 256, 257, 258, 259, 260, 262, 263, 267, 271, 312, 327, 335, 379, 380, 390, 396, 399, 418, 452, 547, 548, 575, 583, 628, 632, 634, 636, 640, 642, 644, 646, 654, 656, 777, 779, 780, 781, 782, 783, 791, 792, 793, 794, 796, 797, 799, 800, 801, 802, 803, 804, 806, 810, 813, 886, 887, 951, 954, 957, 958, 962, 983, 992, 993, 997, 1006, 1010, 1011, 1012, 1013, 1014, 1016, 1018], "fold": [4, 66, 73, 77, 118, 121, 135, 145, 167, 186, 244, 252, 253, 255, 257, 258, 260, 267, 318, 335, 351, 363, 370, 371, 379, 380, 392, 401, 418, 452, 473, 516, 547, 548, 575, 583, 628, 632, 634, 636, 640, 642, 644, 646, 654, 656, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 810, 813, 880, 883, 951, 958, 962, 977, 992, 1004, 1006, 1008, 1009, 1010, 1012, 1013, 1015, 1016], "1000": [4, 7, 8, 14, 26, 31, 37, 50, 71, 74, 84, 94, 105, 113, 115, 116, 121, 122, 126, 131, 137, 141, 155, 173, 183, 189, 200, 220, 229, 230, 232, 242, 246, 255, 257, 263, 266, 268, 282, 284, 300, 303, 308, 309, 311, 328, 329, 336, 340, 341, 372, 373, 379, 390, 400, 418, 453, 459, 460, 511, 512, 517, 522, 523, 525, 526, 528, 533, 544, 613, 627, 628, 632, 633, 634, 636, 641, 642, 643, 644, 647, 648, 649, 653, 657, 658, 659, 668, 673, 679, 682, 744, 856, 867, 873, 878, 879, 951, 955, 977, 992, 995, 1011, 1013], "datapoint": [4, 42, 52, 55, 153, 156, 180, 231, 232, 252, 257, 275, 333, 402, 482, 537, 538, 539, 540, 544, 545, 546, 592, 886, 887, 888, 889, 955], "should": [4, 5, 6, 8, 9, 14, 17, 25, 27, 31, 37, 53, 113, 119, 122, 146, 161, 167, 173, 176, 177, 197, 199, 215, 226, 231, 232, 257, 260, 263, 264, 266, 277, 300, 301, 317, 327, 335, 341, 351, 355, 356, 357, 363, 366, 367, 368, 369, 371, 372, 374, 375, 376, 379, 380, 383, 386, 390, 392, 394, 396, 397, 399, 400, 401, 402, 403, 404, 406, 421, 423, 424, 425, 426, 427, 429, 430, 432, 434, 437, 438, 439, 442, 443, 444, 447, 454, 462, 463, 464, 465, 467, 476, 483, 488, 489, 496, 501, 503, 504, 507, 512, 513, 516, 529, 537, 538, 541, 542, 543, 544, 545, 547, 562, 563, 566, 567, 569, 570, 572, 574, 575, 578, 583, 588, 589, 601, 608, 609, 610, 612, 613, 614, 616, 619, 620, 621, 624, 626, 627, 628, 629, 630, 633, 634, 635, 637, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 652, 653, 654, 656, 657, 658, 659, 660, 661, 665, 668, 670, 671, 672, 673, 674, 675, 676, 677, 682, 690, 707, 708, 751, 754, 758, 759, 760, 761, 762, 765, 768, 769, 779, 785, 787, 794, 795, 796, 797, 801, 805, 807, 808, 819, 820, 821, 822, 823, 824, 825, 827, 829, 836, 837, 842, 843, 846, 847, 848, 850, 851, 852, 853, 861, 865, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 889, 898, 902, 904, 907, 915, 922, 928, 931, 933, 936, 937, 938, 939, 940, 941, 942, 943, 951, 952, 956, 957, 958, 959, 962, 963, 965, 967, 968, 969, 972, 975, 976, 977, 978, 983, 985, 986, 993, 997, 1001, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "enough": [4, 37, 44, 61, 118, 149, 161, 168, 169, 186, 197, 231, 233, 303, 340, 342, 351, 366, 368, 371, 381, 390, 391, 392, 394, 396, 399, 547, 548, 570, 777, 780, 781, 783, 791, 803, 915, 951, 956, 959, 961, 968, 972, 977, 982, 986, 1010], "quantifi": [4, 37, 49, 77, 154, 215, 264, 369, 380, 387, 391, 553, 842, 957, 970, 972, 999], "repres": [4, 8, 10, 12, 14, 26, 32, 44, 48, 49, 50, 53, 90, 95, 97, 104, 105, 116, 117, 125, 167, 176, 184, 189, 199, 201, 202, 206, 220, 222, 231, 235, 245, 251, 254, 257, 260, 264, 282, 301, 340, 342, 349, 357, 360, 363, 365, 369, 378, 379, 380, 381, 386, 390, 392, 396, 397, 398, 399, 400, 401, 419, 423, 432, 443, 450, 451, 452, 453, 454, 455, 456, 468, 470, 471, 472, 474, 476, 478, 480, 481, 482, 484, 485, 490, 514, 516, 518, 520, 521, 527, 535, 543, 562, 569, 572, 610, 613, 615, 621, 657, 659, 678, 682, 723, 769, 777, 779, 790, 791, 794, 797, 802, 804, 805, 808, 809, 815, 821, 822, 823, 825, 826, 827, 829, 830, 831, 836, 837, 846, 852, 875, 898, 899, 919, 952, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 970, 972, 973, 975, 976, 978, 988, 993, 994, 996, 1010, 1012, 1015, 1016, 1019], "bit": [4, 48, 53, 77, 98, 195, 199, 299, 327, 341, 351, 355, 363, 366, 399, 400, 563, 570, 639, 809, 898, 899, 959, 963, 981, 990, 997, 1004, 1007, 1010, 1012, 1013, 1016, 1017, 1018], "less": [4, 5, 8, 52, 53, 59, 91, 95, 98, 106, 116, 122, 123, 149, 156, 167, 179, 197, 199, 201, 232, 243, 245, 257, 258, 266, 268, 271, 300, 303, 304, 309, 311, 340, 341, 351, 355, 357, 363, 368, 369, 378, 380, 392, 396, 397, 399, 400, 404, 420, 422, 424, 426, 428, 430, 432, 437, 440, 442, 443, 462, 463, 464, 476, 495, 511, 515, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 571, 577, 600, 608, 615, 628, 642, 657, 659, 673, 682, 702, 703, 704, 705, 716, 732, 744, 759, 760, 765, 773, 775, 776, 779, 780, 781, 787, 803, 814, 815, 816, 818, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 842, 854, 856, 857, 859, 861, 867, 868, 878, 879, 886, 887, 888, 889, 904, 918, 951, 952, 954, 955, 956, 959, 961, 962, 965, 967, 972, 976, 977, 978, 982, 995, 997, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1014, 1018, 1019], "half": [4, 24, 98, 231, 234, 255, 257, 269, 363, 364, 397, 443, 502, 542, 574, 578, 583, 750, 838, 846, 962, 965, 978], "contigu": [4, 21, 369, 378, 389, 396, 400, 424, 427, 429, 439, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 761, 796, 819, 820, 878, 880, 881, 882, 883, 884, 977, 1007, 1014, 1018], "model_select": [4, 5, 6, 7, 10, 24, 25, 27, 31, 32, 54, 70, 71, 72, 73, 74, 77, 85, 100, 103, 109, 115, 116, 119, 120, 121, 122, 123, 124, 125, 128, 129, 135, 136, 142, 143, 145, 149, 161, 162, 164, 166, 167, 169, 170, 173, 192, 197, 199, 204, 205, 212, 213, 215, 227, 232, 237, 238, 239, 244, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 279, 281, 285, 286, 293, 295, 296, 301, 303, 304, 307, 308, 309, 312, 318, 319, 327, 330, 335, 345, 349, 351, 358, 368, 369, 372, 379, 380, 393, 396, 399, 418, 419, 538, 540, 547, 548, 559, 640, 678, 679, 681, 683, 722, 807, 810, 828, 836, 837, 839, 886, 887, 888, 889, 951, 952, 957, 962, 964, 965, 970, 972, 977, 983, 992, 993, 997, 1001, 1010, 1011], "timeseriessplit": [4, 252, 396, 1010, 1011, 1016], "ts_cv": 4, "n_split": [4, 110, 121, 161, 162, 167, 244, 252, 257, 259, 262, 267, 318, 327, 335, 351, 396, 778, 779, 780, 781, 782, 784, 785, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798, 802, 992, 1010, 1012], "5": [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 21, 24, 25, 26, 30, 31, 32, 34, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 59, 60, 61, 63, 64, 65, 66, 69, 70, 72, 73, 74, 78, 79, 80, 81, 84, 85, 89, 91, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 135, 138, 141, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 177, 178, 179, 180, 183, 185, 186, 187, 188, 189, 191, 192, 194, 195, 197, 198, 199, 200, 201, 203, 205, 208, 209, 210, 211, 212, 213, 215, 219, 220, 221, 223, 226, 229, 230, 231, 232, 233, 234, 236, 237, 239, 242, 243, 244, 245, 246, 247, 248, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 281, 282, 283, 284, 286, 287, 289, 290, 293, 294, 295, 296, 299, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 318, 319, 320, 325, 326, 327, 328, 329, 331, 332, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 351, 363, 365, 366, 368, 369, 372, 373, 378, 379, 380, 383, 384, 385, 390, 392, 393, 396, 397, 399, 400, 401, 402, 403, 404, 418, 419, 420, 421, 423, 425, 427, 428, 429, 430, 431, 432, 433, 434, 438, 442, 444, 446, 449, 452, 462, 463, 464, 465, 470, 473, 474, 484, 496, 497, 501, 503, 504, 508, 511, 513, 514, 516, 517, 518, 519, 520, 523, 524, 525, 526, 527, 532, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 563, 573, 574, 575, 578, 583, 591, 594, 595, 596, 597, 600, 601, 603, 604, 606, 608, 609, 610, 611, 612, 613, 615, 619, 622, 624, 627, 628, 632, 633, 634, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 653, 657, 658, 659, 661, 662, 665, 669, 670, 672, 673, 676, 677, 680, 684, 686, 690, 693, 694, 702, 703, 704, 706, 707, 708, 710, 715, 718, 719, 721, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 749, 761, 762, 764, 765, 767, 768, 769, 772, 774, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 833, 836, 837, 838, 839, 844, 845, 846, 848, 849, 851, 852, 854, 855, 856, 858, 859, 866, 867, 872, 878, 879, 880, 881, 882, 883, 884, 886, 888, 904, 913, 914, 915, 917, 919, 920, 925, 926, 930, 933, 951, 952, 954, 957, 958, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 972, 974, 976, 977, 980, 984, 988, 992, 993, 995, 996, 997, 999, 1000, 1002, 1005, 1006, 1007, 1009, 1011, 1012, 1014, 1018, 1019, 1020], "48": [4, 45, 102, 154, 168, 239, 365, 373, 392, 490, 578, 726, 803, 814, 951, 964, 972, 1000], "max_train_s": [4, 396, 798, 1011], "10000": [4, 11, 30, 43, 62, 71, 72, 123, 135, 183, 190, 197, 205, 213, 230, 232, 270, 309, 324, 351, 357, 399, 400, 541, 542, 625, 660, 856, 884, 974, 993, 997], "test_siz": [4, 5, 6, 10, 24, 25, 27, 31, 32, 70, 109, 115, 120, 121, 123, 124, 128, 166, 173, 192, 197, 204, 205, 212, 213, 254, 255, 259, 264, 266, 270, 275, 285, 286, 293, 295, 296, 301, 303, 304, 309, 327, 335, 351, 372, 396, 679, 779, 794, 797, 798, 805, 807, 828, 952, 964, 965, 992, 993, 1004, 1005, 1010, 1011, 1016], "manual": [4, 46, 167, 168, 170, 181, 198, 208, 259, 277, 318, 325, 340, 342, 355, 356, 363, 368, 371, 372, 379, 383, 392, 396, 397, 398, 418, 429, 547, 829, 852, 858, 951, 956, 958, 961, 962, 965, 972, 983, 988, 989, 997, 1012, 1014], "inspect": [4, 31, 55, 60, 112, 116, 123, 125, 126, 130, 143, 149, 154, 155, 167, 168, 169, 170, 180, 189, 206, 236, 257, 260, 269, 280, 285, 288, 304, 307, 308, 309, 310, 312, 323, 324, 325, 328, 329, 340, 346, 356, 358, 369, 380, 392, 393, 399, 400, 444, 533, 534, 537, 538, 539, 540, 544, 545, 546, 808, 839, 840, 886, 887, 888, 889, 950, 962, 963, 966, 969, 970, 977, 982, 997, 999, 1007], "variou": [4, 12, 36, 37, 57, 59, 60, 67, 80, 84, 94, 98, 164, 167, 175, 207, 216, 217, 218, 219, 224, 230, 303, 308, 340, 342, 349, 351, 355, 362, 363, 364, 365, 368, 369, 372, 379, 381, 390, 391, 392, 394, 418, 422, 452, 482, 494, 495, 505, 537, 538, 539, 540, 541, 542, 544, 545, 547, 548, 549, 550, 575, 583, 628, 632, 634, 636, 639, 642, 644, 646, 647, 649, 654, 656, 657, 672, 673, 680, 777, 780, 781, 783, 791, 799, 800, 801, 802, 803, 804, 805, 806, 839, 878, 879, 951, 952, 959, 962, 965, 969, 972, 976, 978, 982, 986, 996, 997, 1004, 1007, 1008], "check": [4, 5, 8, 17, 46, 53, 55, 99, 129, 149, 164, 166, 168, 169, 183, 185, 186, 197, 219, 250, 266, 273, 310, 317, 335, 349, 355, 356, 366, 367, 368, 369, 370, 371, 373, 374, 376, 378, 380, 383, 386, 393, 424, 431, 432, 445, 482, 488, 489, 511, 516, 517, 528, 541, 542, 627, 628, 633, 634, 641, 642, 643, 644, 657, 659, 662, 668, 670, 673, 674, 783, 794, 803, 817, 835, 843, 883, 886, 887, 888, 889, 898, 899, 900, 909, 910, 921, 922, 924, 946, 947, 948, 950, 957, 958, 959, 962, 977, 983, 986, 1004, 1005, 1007, 1011, 1015, 1016, 1017, 1018, 1019], "all_split": 4, "list": [4, 8, 9, 10, 12, 13, 16, 17, 19, 25, 32, 40, 44, 49, 61, 69, 105, 106, 114, 121, 129, 136, 170, 236, 252, 255, 257, 258, 260, 261, 266, 270, 286, 301, 307, 308, 309, 310, 311, 312, 319, 330, 341, 342, 357, 362, 363, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 383, 390, 391, 392, 393, 396, 398, 399, 400, 413, 415, 418, 430, 436, 437, 444, 445, 446, 452, 458, 462, 463, 464, 468, 469, 470, 471, 472, 476, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 503, 512, 530, 531, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 569, 570, 572, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 613, 615, 616, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 651, 653, 654, 659, 660, 662, 665, 673, 677, 678, 680, 691, 693, 694, 697, 699, 705, 713, 726, 734, 758, 761, 763, 768, 772, 775, 776, 777, 780, 781, 783, 788, 789, 791, 800, 801, 802, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 843, 847, 850, 852, 853, 858, 875, 879, 881, 884, 886, 887, 888, 889, 890, 891, 892, 894, 898, 899, 900, 904, 906, 907, 908, 910, 918, 919, 921, 923, 933, 936, 946, 951, 952, 958, 962, 964, 965, 966, 969, 970, 973, 978, 980, 982, 983, 986, 988, 992, 994, 997, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "train_0": 4, "test_0": 4, "iloc": [4, 129, 167, 215, 257], "12379": 4, "25": [4, 5, 6, 7, 9, 10, 11, 19, 24, 26, 42, 45, 50, 54, 79, 84, 90, 101, 103, 105, 110, 114, 122, 142, 143, 150, 161, 167, 177, 187, 223, 226, 244, 257, 290, 293, 296, 299, 301, 312, 315, 316, 340, 343, 348, 351, 355, 373, 396, 399, 400, 425, 457, 481, 484, 550, 578, 659, 714, 774, 794, 805, 831, 849, 854, 856, 857, 867, 868, 870, 871, 957, 958, 962, 963, 965, 972, 993, 1004, 1006, 1012, 1015], "760": 4, "68": [4, 8, 188, 296, 315, 392, 515, 521, 571, 1004], "27": [4, 6, 11, 19, 31, 47, 54, 98, 107, 205, 216, 223, 315, 316, 336, 365, 392, 400, 402, 504, 694, 768, 769, 879, 962, 996, 1004, 1006], "9993": [4, 634, 636, 1012], "12380": 4, "32": [4, 5, 51, 166, 169, 234, 311, 316, 362, 366, 372, 380, 389, 399, 400, 426, 544, 545, 563, 570, 615, 657, 858, 898, 899, 927, 970, 996, 1004, 1007, 1010, 1012, 1013, 1016, 1017, 1018], "000": [4, 5, 15, 16, 17, 21, 25, 27, 42, 73, 150, 169, 173, 230, 255, 257, 259, 277, 291, 304, 310, 340, 341, 351, 363, 373, 399, 400, 470, 541, 542, 625, 658, 976, 997, 1015], "77": [4, 6, 44, 173, 266, 316, 362, 365, 514], "0028": 4, "12381": 4, "72": [4, 6, 7, 8, 152, 372, 803], "9995": 4, "12382": 4, "240": [4, 44, 99, 107, 970, 1004], "82": [4, 30, 53, 57, 91, 143, 200, 288, 296, 315, 768, 777, 791, 962, 965, 993, 1004], "9980": [4, 1012], "12383": 4, "13374": 4, "34": [4, 91, 122, 149, 265, 282, 296, 315, 316, 365, 396, 402, 500, 550, 578, 630, 648, 697, 744, 993, 1004], "44": [4, 84, 154, 167, 168, 281, 402, 761, 879, 882, 962, 969, 1004], "40": [4, 14, 54, 65, 77, 89, 95, 101, 125, 131, 149, 188, 189, 191, 214, 216, 220, 222, 233, 246, 258, 283, 289, 295, 301, 315, 316, 325, 326, 328, 330, 332, 334, 349, 356, 363, 396, 475, 497, 498, 819, 820, 824, 836, 837, 951, 963, 972, 1004, 1005], "150": [4, 6, 89, 91, 114, 122, 135, 219, 223, 226, 270, 365, 396, 401, 484, 583, 800, 801, 802, 962, 992, 993, 994], "53": [4, 53, 392, 399, 515, 521, 770, 771], "15": [4, 6, 7, 10, 12, 13, 14, 15, 30, 31, 34, 40, 44, 53, 54, 60, 61, 65, 72, 73, 79, 81, 91, 105, 110, 114, 118, 119, 122, 141, 143, 145, 149, 153, 161, 166, 167, 168, 171, 186, 194, 199, 211, 215, 220, 223, 226, 244, 245, 252, 260, 262, 265, 268, 269, 271, 280, 281, 285, 288, 293, 294, 296, 299, 301, 303, 316, 325, 327, 330, 334, 337, 346, 362, 363, 368, 379, 396, 399, 400, 421, 434, 470, 477, 511, 517, 535, 536, 579, 625, 633, 642, 644, 649, 657, 659, 673, 721, 795, 808, 831, 951, 957, 958, 959, 962, 965, 966, 972, 977, 980, 988, 993, 1000, 1002, 1006, 1016, 1018, 1019], "0013": 4, "13375": 4, "39": [4, 235, 239, 363, 365, 366, 371, 392, 400, 475, 887], "49": [4, 91, 362, 363, 365, 372, 392, 430, 437, 694, 706, 736, 744, 775, 777, 957, 962, 972, 1007], "13376": 4, "0012": 4, "13377": 4, "36": [4, 6, 7, 13, 97, 155, 167, 215, 330, 365, 373, 399, 400, 535, 536, 550, 715, 962, 997, 1004], "08": [4, 15, 22, 44, 50, 98, 107, 133, 163, 167, 168, 216, 296, 343, 365, 511, 523, 525, 543, 622, 639, 777, 836, 837, 858, 968], "910": 4, "42": [4, 6, 24, 25, 26, 27, 31, 46, 55, 77, 91, 97, 103, 116, 117, 119, 122, 123, 125, 129, 142, 143, 162, 167, 169, 170, 173, 176, 181, 186, 189, 191, 192, 199, 203, 204, 205, 211, 212, 214, 219, 226, 232, 235, 238, 256, 258, 261, 277, 283, 284, 285, 293, 300, 301, 302, 304, 307, 309, 311, 318, 319, 325, 327, 340, 341, 351, 356, 369, 372, 373, 380, 392, 396, 399, 400, 403, 418, 425, 468, 472, 504, 511, 517, 524, 537, 538, 545, 546, 547, 548, 550, 658, 775, 779, 803, 805, 819, 820, 824, 828, 831, 870, 871, 873, 874, 875, 888, 889, 965, 972, 993, 997, 1000, 1001, 1004], "0015": 4, "13378": 4, "35": [4, 6, 7, 9, 11, 46, 70, 91, 112, 131, 167, 168, 176, 185, 223, 226, 304, 315, 316, 524, 629, 630, 637, 683, 687, 688, 707, 721, 736, 762, 769, 812, 951, 958, 962, 968, 969, 972, 993, 997, 1004, 1006], "26": [4, 46, 54, 79, 97, 129, 133, 154, 167, 234, 270, 316, 373, 550, 629, 709, 763, 855, 866, 915, 962, 972, 1004, 1007, 1008, 1016], "47": [4, 46, 84, 193, 363, 473, 474, 515, 521, 957], "16": [4, 5, 19, 27, 43, 50, 51, 54, 65, 73, 79, 95, 98, 141, 158, 168, 190, 196, 197, 198, 215, 218, 219, 220, 223, 224, 231, 234, 259, 260, 261, 281, 296, 299, 303, 305, 307, 341, 347, 363, 365, 366, 373, 379, 383, 384, 385, 396, 397, 400, 423, 458, 477, 482, 514, 515, 550, 570, 576, 577, 588, 589, 620, 631, 632, 635, 636, 637, 638, 663, 664, 790, 795, 805, 854, 879, 887, 951, 958, 962, 972, 977, 980, 988, 997, 1000, 1002, 1004, 1005, 1009, 1010, 1012, 1013], "9979": 4, "2331": 4, "31": [4, 69, 78, 215, 223, 258, 273, 282, 310, 315, 316, 389, 400, 480, 541, 542, 578, 630, 652, 660, 927, 963, 1004], "060": [4, 731], "0032": 4, "2332": 4, "2333": 4, "78": [4, 53, 173, 215, 296, 301, 316, 473, 474, 634, 636, 645, 646, 777, 783, 803, 962, 983, 993], "275": [4, 316, 1007], "2334": 4, "96": [4, 32, 48, 61, 156, 226, 296, 301, 304, 315, 316, 340, 365, 396, 951, 957, 962, 972, 1004], "515": 4, "64": [4, 8, 32, 48, 53, 57, 88, 95, 154, 167, 168, 219, 230, 231, 234, 255, 266, 281, 286, 346, 355, 356, 365, 366, 373, 397, 475, 482, 580, 581, 627, 639, 669, 670, 671, 672, 879, 965, 994, 1004, 1006, 1012, 1013, 1016, 1017, 1018], "2335": 4, "12326": 4, "12327": 4, "12328": [4, 1013], "12329": 4, "46": [4, 53, 189, 197, 351, 373, 574, 575, 697, 882, 887, 957, 972, 1000], "12330": [4, 1012], "52": [4, 154, 197, 614, 775, 957, 1004], "last": [4, 44, 57, 88, 120, 122, 167, 176, 197, 198, 205, 210, 226, 248, 260, 268, 269, 304, 309, 311, 318, 345, 355, 363, 366, 369, 371, 372, 375, 380, 383, 392, 393, 400, 404, 419, 423, 427, 439, 444, 448, 495, 513, 539, 540, 541, 542, 564, 565, 568, 574, 575, 578, 591, 663, 664, 666, 667, 678, 679, 681, 682, 683, 688, 762, 775, 776, 780, 781, 796, 819, 820, 824, 839, 844, 852, 858, 893, 918, 937, 951, 957, 958, 959, 961, 962, 963, 966, 976, 983, 988, 995, 1004, 1011, 1012, 1013, 1018], "train_4": 4, "test_4": 4, "16379": 4, "94": [4, 32, 54, 97, 118, 196, 233, 270, 296, 301, 315, 316, 399, 644, 768, 957, 962, 963, 972, 997, 1004], "665": 4, "16380": 4, "71": [4, 98, 215, 365, 490, 710, 962, 995, 1006], "16381": 4, "76": [4, 173, 197, 296, 316, 319, 340, 351, 365, 373, 761, 995], "16382": 4, "16383": 4, "18": [4, 7, 8, 19, 40, 44, 49, 53, 59, 61, 73, 91, 103, 110, 122, 158, 167, 208, 226, 231, 257, 303, 316, 340, 341, 342, 368, 373, 393, 396, 397, 400, 427, 439, 472, 480, 481, 482, 484, 485, 490, 515, 516, 518, 520, 521, 537, 538, 539, 540, 543, 544, 545, 546, 549, 551, 552, 553, 554, 555, 557, 558, 570, 575, 580, 581, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 627, 630, 639, 640, 652, 695, 699, 711, 714, 715, 721, 723, 775, 776, 798, 812, 835, 836, 837, 843, 849, 857, 858, 868, 878, 879, 886, 887, 888, 889, 890, 914, 915, 951, 960, 962, 972, 980, 1000, 1002, 1004, 1005, 1008, 1009, 1011, 1012, 1014, 1015], "940": 4, "6331": 4, "28": [4, 65, 122, 167, 213, 223, 258, 266, 295, 315, 316, 365, 373, 392, 396, 430, 437, 972, 993, 1004, 1007, 1010], "790": [4, 69], "89": [4, 32, 154, 188, 296, 315, 316, 962, 972, 997, 1004, 1007, 1015], "6332": 4, "6333": 4, "88": [4, 6, 32, 188, 256, 296, 315, 316, 345, 363, 365, 394, 453, 839, 993, 1004], "820": [4, 819, 820], "79": [4, 6, 30, 32, 79, 80, 98, 173, 296, 316, 365, 372, 394, 454, 504, 578, 817, 1004, 1006], "6334": 4, "6335": 4, "70": [4, 6, 8, 11, 65, 70, 72, 168, 242, 257, 316, 363, 365, 396, 473, 474, 694, 706, 736, 777, 791, 951, 972, 993], "33": [4, 15, 19, 46, 79, 171, 197, 312, 316, 363, 365, 366, 371, 372, 373, 383, 384, 385, 400, 512, 629, 693, 694, 709, 710, 718, 723, 763, 764, 767, 783, 803, 805, 807, 889, 958, 962, 972, 993, 1004, 1012], "335": 4, "74": [4, 8, 19, 112, 213, 315, 316, 365, 571, 777, 791, 858], "16326": [4, 1016], "16327": 4, "16328": 4, "16329": 4, "16330": 4, "readi": [4, 7, 154, 198, 363, 371, 375], "tree": [4, 7, 26, 27, 31, 41, 44, 61, 108, 109, 112, 113, 114, 119, 120, 121, 122, 123, 125, 129, 130, 133, 157, 161, 168, 170, 219, 234, 236, 261, 277, 282, 290, 299, 300, 304, 309, 350, 351, 355, 358, 363, 365, 373, 379, 380, 382, 390, 392, 398, 403, 418, 422, 423, 424, 425, 426, 428, 430, 437, 443, 475, 480, 484, 494, 495, 499, 524, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 612, 613, 614, 615, 639, 669, 673, 684, 768, 783, 803, 805, 814, 819, 820, 821, 822, 823, 824, 825, 827, 829, 830, 831, 840, 843, 852, 910, 952, 959, 962, 963, 968, 969, 982, 983, 984, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "often": [4, 19, 24, 25, 33, 69, 73, 127, 153, 161, 167, 168, 198, 215, 219, 244, 259, 262, 299, 304, 327, 337, 340, 341, 342, 355, 356, 362, 363, 365, 368, 369, 372, 375, 378, 379, 380, 382, 386, 390, 392, 393, 394, 396, 397, 399, 400, 402, 404, 448, 501, 504, 513, 516, 613, 627, 628, 633, 634, 641, 642, 643, 644, 653, 655, 668, 708, 849, 857, 864, 876, 951, 952, 954, 957, 958, 959, 960, 961, 962, 964, 965, 967, 968, 969, 972, 975, 976, 978, 988, 990, 995, 996, 997, 1005, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "flexibl": [4, 25, 119, 161, 197, 300, 324, 342, 369, 374, 396, 402, 655, 878, 879, 951, 956, 958, 962, 966, 972, 983, 986, 1013, 1017], "effici": [4, 5, 12, 13, 42, 46, 53, 95, 127, 173, 186, 190, 199, 205, 282, 340, 355, 360, 362, 368, 369, 370, 372, 373, 378, 380, 386, 389, 391, 392, 397, 398, 399, 402, 404, 423, 424, 427, 429, 430, 432, 434, 437, 439, 441, 442, 476, 513, 514, 515, 518, 520, 521, 524, 543, 546, 554, 569, 572, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 615, 619, 621, 636, 639, 640, 645, 647, 649, 654, 656, 657, 658, 659, 660, 666, 667, 669, 680, 706, 736, 743, 759, 760, 775, 776, 777, 791, 808, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 844, 856, 867, 871, 878, 887, 889, 915, 930, 951, 954, 956, 958, 959, 961, 962, 963, 965, 966, 967, 968, 970, 972, 973, 974, 975, 976, 977, 982, 986, 988, 992, 995, 996, 997, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "heteorogen": 4, "tabular": [4, 168, 369, 970], "mix": [4, 61, 68, 75, 96, 97, 164, 197, 299, 362, 369, 378, 380, 393, 397, 404, 444, 446, 447, 476, 513, 518, 520, 527, 581, 585, 611, 627, 628, 633, 639, 640, 641, 642, 643, 644, 649, 657, 659, 662, 777, 791, 805, 839, 852, 853, 859, 926, 933, 936, 958, 967, 996, 1016, 1018], "long": [4, 11, 12, 44, 61, 110, 122, 154, 162, 167, 169, 197, 233, 260, 290, 299, 308, 340, 341, 351, 356, 368, 375, 378, 380, 381, 386, 391, 392, 402, 433, 478, 518, 657, 658, 659, 780, 781, 814, 815, 816, 817, 818, 836, 837, 847, 962, 968, 972, 973, 975, 976, 981, 985, 1006, 1010, 1016, 1018], "sampl": [4, 5, 8, 13, 24, 25, 26, 27, 32, 33, 34, 37, 39, 41, 42, 43, 46, 48, 49, 53, 55, 56, 57, 58, 59, 64, 79, 80, 81, 85, 89, 91, 95, 99, 100, 104, 105, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 123, 125, 130, 131, 132, 143, 145, 149, 154, 155, 156, 158, 161, 164, 167, 168, 173, 175, 183, 185, 186, 197, 199, 201, 205, 211, 213, 214, 215, 216, 218, 226, 230, 231, 233, 235, 242, 243, 245, 246, 247, 248, 250, 252, 257, 259, 260, 261, 263, 265, 269, 271, 273, 275, 277, 280, 281, 282, 283, 284, 286, 287, 288, 299, 301, 302, 303, 304, 307, 309, 310, 312, 315, 317, 318, 319, 320, 322, 323, 325, 327, 329, 335, 338, 340, 341, 346, 349, 355, 358, 361, 363, 364, 367, 368, 369, 370, 378, 379, 389, 390, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 409, 411, 413, 414, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 434, 436, 437, 438, 441, 442, 443, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 565, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 591, 592, 608, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 668, 669, 672, 673, 674, 676, 677, 678, 679, 681, 682, 683, 684, 686, 688, 689, 690, 691, 693, 694, 695, 696, 697, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 740, 741, 743, 744, 748, 749, 750, 751, 753, 754, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 898, 899, 903, 904, 915, 919, 931, 933, 936, 937, 940, 943, 951, 952, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 982, 983, 985, 988, 994, 995, 996, 997, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "larg": [4, 12, 13, 21, 26, 37, 39, 43, 47, 49, 50, 52, 53, 72, 74, 95, 99, 113, 115, 122, 125, 127, 142, 154, 155, 169, 176, 177, 186, 188, 197, 199, 202, 203, 215, 231, 254, 260, 263, 266, 279, 286, 295, 299, 301, 310, 311, 327, 332, 341, 342, 355, 363, 368, 373, 376, 378, 379, 380, 383, 386, 391, 394, 396, 397, 398, 399, 401, 402, 403, 405, 423, 425, 427, 430, 431, 432, 433, 438, 442, 453, 455, 479, 494, 514, 516, 518, 520, 524, 527, 529, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 547, 548, 563, 569, 570, 572, 615, 622, 624, 631, 635, 638, 639, 640, 645, 652, 653, 655, 658, 660, 666, 668, 670, 672, 673, 674, 676, 726, 759, 760, 777, 785, 787, 791, 795, 804, 814, 815, 816, 817, 818, 819, 820, 825, 836, 837, 844, 848, 849, 857, 859, 870, 871, 878, 879, 883, 884, 886, 887, 888, 889, 914, 915, 951, 954, 956, 958, 959, 961, 964, 965, 966, 970, 975, 976, 977, 978, 982, 983, 986, 993, 995, 996, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "ordin": [4, 53, 70, 129, 302, 309, 312, 362, 380, 399, 476, 547, 690, 844, 847, 852, 853, 958, 959, 972, 983, 1012, 1018], "encod": [4, 8, 11, 48, 70, 95, 115, 129, 167, 168, 169, 196, 197, 266, 300, 301, 302, 309, 311, 312, 327, 340, 342, 360, 362, 364, 369, 372, 378, 380, 393, 396, 397, 399, 400, 402, 467, 476, 483, 506, 511, 517, 519, 520, 522, 524, 525, 526, 528, 531, 541, 542, 546, 547, 549, 562, 569, 570, 572, 611, 629, 639, 640, 650, 661, 715, 779, 784, 786, 842, 844, 846, 847, 850, 852, 853, 862, 951, 952, 958, 959, 962, 964, 965, 967, 976, 982, 983, 999, 1005, 1006, 1012, 1016, 1018, 1019], "know": [4, 53, 65, 119, 143, 146, 149, 158, 167, 215, 233, 257, 275, 311, 315, 335, 341, 355, 368, 378, 386, 392, 395, 396, 397, 400, 480, 484, 490, 627, 633, 639, 640, 706, 736, 777, 791, 863, 864, 866, 867, 868, 869, 886, 887, 888, 889, 951, 961, 962, 963, 965, 974, 1010, 1011, 1014, 1016], "treat": [4, 6, 70, 119, 129, 161, 167, 197, 266, 309, 318, 351, 368, 378, 380, 389, 399, 400, 423, 541, 542, 569, 570, 572, 588, 589, 613, 619, 626, 652, 655, 734, 768, 848, 849, 855, 856, 859, 863, 866, 867, 869, 952, 954, 958, 962, 963, 969, 972, 976, 978, 993, 1008, 1016], "dedic": [4, 255, 337, 366, 371, 373, 378, 381, 383, 388, 392, 565, 653, 655, 668, 951, 982, 988, 1012], "rule": [4, 173, 346, 349, 351, 355, 365, 368, 369, 378, 380, 381, 387, 391, 392, 396, 397, 399, 401, 516, 529, 530, 531, 532, 533, 541, 542, 549, 550, 583, 615, 626, 639, 640, 647, 649, 657, 658, 659, 687, 688, 777, 780, 781, 783, 791, 802, 804, 828, 878, 891, 951, 956, 964, 965, 976, 978, 983, 988, 995, 999, 1006, 1009, 1016], "pass": [4, 7, 8, 20, 21, 38, 119, 126, 143, 178, 198, 227, 229, 230, 236, 238, 247, 255, 258, 307, 310, 332, 342, 351, 355, 356, 357, 363, 368, 369, 372, 373, 374, 375, 376, 378, 380, 386, 392, 393, 396, 397, 399, 400, 402, 403, 404, 418, 419, 421, 424, 425, 427, 429, 430, 432, 434, 437, 439, 440, 442, 444, 445, 447, 449, 452, 454, 468, 471, 472, 475, 477, 483, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 552, 562, 563, 569, 570, 572, 574, 575, 578, 588, 589, 591, 592, 598, 601, 607, 612, 613, 615, 620, 621, 622, 623, 624, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 651, 652, 653, 657, 658, 659, 660, 662, 665, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 712, 713, 722, 743, 754, 758, 759, 760, 761, 768, 770, 771, 775, 776, 777, 779, 780, 781, 782, 783, 789, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 843, 844, 846, 850, 852, 853, 854, 856, 859, 867, 868, 869, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 898, 899, 905, 909, 910, 914, 915, 917, 919, 921, 922, 930, 932, 933, 936, 951, 952, 958, 960, 962, 963, 964, 965, 966, 969, 972, 975, 976, 977, 983, 986, 988, 992, 1001, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "explicitli": [4, 46, 116, 149, 156, 161, 162, 198, 229, 342, 351, 356, 362, 364, 368, 369, 371, 378, 380, 388, 396, 400, 402, 420, 529, 530, 559, 561, 578, 608, 629, 639, 640, 650, 661, 690, 707, 762, 768, 769, 780, 781, 810, 813, 819, 820, 845, 868, 869, 930, 951, 952, 954, 956, 958, 959, 962, 964, 965, 972, 986, 997, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1018], "logic": [4, 356, 369, 374, 388, 399, 978, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "integ": [4, 17, 48, 53, 70, 167, 197, 215, 308, 309, 351, 355, 362, 363, 365, 369, 372, 376, 379, 380, 392, 393, 396, 397, 399, 400, 415, 418, 442, 444, 447, 452, 467, 476, 478, 481, 482, 483, 485, 488, 489, 492, 494, 495, 499, 502, 530, 539, 540, 541, 542, 543, 547, 548, 552, 563, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 613, 614, 625, 632, 636, 640, 646, 654, 656, 657, 680, 695, 715, 777, 779, 780, 781, 782, 784, 786, 791, 792, 793, 794, 796, 797, 799, 810, 813, 815, 818, 819, 820, 844, 852, 853, 858, 859, 862, 872, 874, 886, 887, 888, 889, 894, 925, 926, 927, 931, 952, 958, 963, 965, 972, 975, 977, 978, 988, 995, 997, 1004, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "lexicograph": [4, 380, 547, 768, 772, 821, 829], "ad": [4, 13, 74, 103, 105, 109, 120, 142, 149, 155, 156, 176, 199, 222, 232, 257, 258, 259, 299, 308, 309, 310, 311, 312, 319, 341, 367, 368, 371, 373, 378, 380, 381, 397, 399, 400, 401, 402, 422, 423, 424, 426, 427, 429, 432, 439, 442, 444, 494, 502, 512, 515, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 563, 570, 571, 572, 574, 583, 588, 589, 592, 594, 608, 610, 622, 623, 629, 631, 635, 639, 640, 650, 657, 659, 661, 676, 695, 755, 757, 775, 776, 777, 791, 800, 807, 817, 836, 837, 838, 852, 858, 860, 875, 886, 887, 888, 889, 905, 951, 955, 957, 958, 959, 963, 965, 966, 968, 983, 986, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "benefit": [4, 55, 73, 74, 167, 211, 222, 229, 231, 279, 311, 355, 368, 376, 380, 390, 392, 428, 441, 448, 488, 547, 548, 639, 640, 647, 649, 657, 658, 659, 876, 878, 951, 957, 965, 970, 972, 983, 986, 1004, 1007, 1008, 1009, 1016, 1017, 1018, 1019], "prevent": [4, 110, 122, 143, 166, 198, 299, 327, 340, 345, 351, 368, 369, 371, 378, 379, 392, 397, 400, 423, 429, 468, 469, 571, 572, 592, 708, 765, 836, 837, 863, 864, 866, 867, 868, 869, 962, 964, 967, 968, 978, 995, 1006, 1007, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "ani": [4, 8, 9, 13, 19, 30, 44, 46, 56, 66, 126, 141, 146, 154, 155, 156, 166, 167, 168, 169, 186, 197, 215, 226, 229, 230, 243, 247, 248, 257, 258, 260, 263, 266, 290, 299, 300, 303, 307, 309, 310, 312, 327, 342, 351, 355, 356, 357, 362, 363, 365, 366, 368, 369, 371, 372, 373, 375, 379, 380, 381, 383, 388, 389, 390, 391, 392, 393, 396, 397, 398, 399, 400, 401, 415, 421, 428, 429, 430, 432, 434, 436, 437, 441, 444, 447, 468, 469, 488, 489, 503, 514, 517, 519, 526, 531, 537, 538, 539, 540, 544, 545, 546, 547, 548, 549, 550, 559, 561, 563, 569, 570, 572, 574, 584, 591, 592, 601, 608, 613, 614, 629, 639, 640, 647, 649, 650, 657, 658, 659, 660, 661, 673, 677, 680, 681, 685, 697, 698, 700, 704, 716, 717, 732, 735, 737, 754, 758, 759, 760, 761, 770, 771, 773, 777, 780, 781, 789, 790, 808, 811, 819, 820, 825, 829, 838, 839, 843, 844, 848, 850, 852, 853, 868, 869, 872, 875, 878, 886, 887, 888, 889, 890, 892, 894, 898, 899, 932, 946, 951, 952, 954, 957, 958, 959, 962, 963, 964, 965, 968, 969, 970, 972, 974, 975, 976, 977, 978, 982, 988, 990, 994, 995, 997, 1005, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "unknown": [4, 16, 55, 167, 257, 315, 317, 357, 363, 380, 386, 389, 400, 846, 852, 853, 925, 961, 972, 988, 1008, 1012, 1016, 1017], "sake": [4, 122, 162, 167, 197, 304, 340, 342, 375, 378, 651, 680], "simplic": [4, 13, 31, 340, 342, 380, 398, 965, 966, 967, 977], "try": [4, 6, 11, 12, 14, 16, 25, 26, 39, 53, 70, 71, 98, 109, 115, 116, 117, 118, 125, 126, 129, 132, 143, 149, 154, 162, 166, 167, 168, 169, 173, 176, 178, 186, 227, 228, 229, 236, 237, 238, 239, 243, 244, 247, 255, 257, 258, 264, 269, 277, 290, 296, 308, 309, 311, 312, 317, 329, 340, 341, 349, 363, 366, 367, 368, 369, 372, 373, 375, 378, 380, 386, 392, 395, 396, 400, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 483, 547, 557, 570, 639, 654, 656, 670, 674, 777, 780, 781, 789, 791, 800, 801, 802, 804, 857, 859, 878, 951, 958, 959, 968, 977, 978, 983, 985, 986, 988, 990, 993, 995, 996, 997, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "default": [4, 14, 25, 27, 30, 42, 45, 46, 48, 58, 95, 142, 149, 161, 168, 176, 177, 186, 197, 198, 215, 228, 230, 237, 239, 245, 252, 260, 266, 275, 277, 284, 299, 303, 307, 308, 312, 336, 340, 341, 342, 345, 351, 355, 356, 362, 363, 366, 369, 370, 371, 372, 373, 374, 376, 378, 379, 380, 383, 386, 390, 392, 393, 396, 397, 399, 400, 401, 403, 404, 405, 406, 408, 409, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 688, 689, 690, 692, 693, 694, 695, 697, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 714, 715, 716, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 751, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 902, 904, 905, 907, 909, 914, 915, 916, 917, 918, 919, 920, 925, 927, 930, 931, 932, 933, 935, 936, 937, 943, 946, 948, 949, 951, 952, 954, 956, 958, 961, 962, 963, 965, 966, 968, 969, 972, 974, 976, 977, 988, 992, 995, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "hyper": [4, 70, 251, 257, 262, 296, 327, 351, 369, 378, 379, 380, 387, 396, 399, 401, 625, 626, 781, 789, 791, 835, 957, 958, 962, 965, 976, 977, 988, 999, 1004, 1018], "paramet": [4, 5, 9, 10, 11, 13, 14, 16, 44, 54, 57, 59, 60, 61, 70, 71, 72, 78, 80, 81, 91, 95, 112, 114, 118, 123, 124, 135, 136, 143, 146, 149, 153, 154, 155, 156, 157, 158, 161, 162, 164, 167, 168, 176, 177, 178, 179, 182, 184, 185, 186, 188, 189, 197, 199, 201, 202, 205, 206, 214, 215, 222, 223, 226, 228, 231, 232, 235, 242, 244, 245, 247, 248, 251, 256, 257, 258, 261, 262, 265, 268, 269, 270, 272, 277, 279, 283, 284, 290, 293, 294, 296, 299, 300, 301, 307, 308, 310, 311, 312, 319, 322, 324, 329, 332, 336, 337, 338, 340, 341, 342, 345, 346, 347, 348, 351, 355, 356, 357, 358, 360, 361, 363, 370, 372, 373, 374, 375, 376, 378, 387, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 556, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 959, 961, 964, 965, 966, 967, 968, 969, 970, 972, 974, 975, 976, 978, 982, 983, 989, 991, 993, 994, 995, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "pipelin": [4, 31, 54, 57, 70, 73, 75, 85, 115, 119, 140, 142, 147, 161, 162, 168, 169, 173, 176, 185, 186, 197, 198, 203, 211, 215, 219, 225, 226, 227, 231, 236, 239, 240, 250, 254, 256, 264, 271, 273, 277, 279, 285, 286, 293, 296, 301, 304, 307, 308, 309, 310, 311, 312, 319, 340, 341, 351, 355, 358, 360, 362, 363, 368, 370, 380, 396, 400, 402, 406, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 444, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 468, 482, 495, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 586, 588, 591, 592, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 678, 679, 681, 682, 683, 694, 775, 776, 777, 780, 781, 791, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 951, 952, 958, 965, 966, 971, 972, 976, 977, 982, 983, 984, 986, 989, 991, 999, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "make_pipelin": [4, 31, 57, 85, 115, 119, 129, 142, 143, 161, 162, 167, 168, 173, 176, 185, 186, 197, 198, 203, 211, 215, 219, 226, 227, 228, 236, 237, 239, 254, 264, 277, 286, 293, 301, 304, 307, 308, 309, 310, 311, 312, 341, 351, 379, 393, 396, 547, 657, 659, 831, 839, 863, 864, 866, 867, 868, 869, 878, 879, 880, 881, 883, 884, 952, 965, 972, 976, 977, 1007, 1014, 1017], "ordinalencod": [4, 119, 129, 168, 169, 197, 312, 362, 380, 399, 562, 815, 847, 852, 964, 972, 1012, 1013, 1016, 1017, 1018, 1020], "compos": [4, 5, 25, 68, 69, 70, 74, 85, 112, 119, 129, 164, 167, 168, 169, 197, 199, 215, 228, 237, 239, 308, 310, 311, 312, 358, 379, 381, 392, 393, 396, 402, 495, 593, 961, 1004], "columntransform": [4, 69, 70, 129, 167, 168, 169, 197, 215, 228, 237, 239, 308, 310, 311, 312, 360, 362, 378, 379, 446, 447, 610, 844, 951, 952, 983, 999, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "ensembl": [4, 7, 10, 26, 27, 31, 55, 109, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 161, 162, 168, 169, 170, 197, 219, 226, 234, 235, 237, 238, 254, 269, 275, 301, 307, 308, 309, 310, 312, 340, 351, 355, 358, 371, 372, 379, 380, 390, 392, 396, 401, 418, 484, 495, 560, 613, 614, 616, 639, 780, 781, 805, 809, 840, 843, 852, 882, 886, 888, 889, 951, 962, 963, 968, 969, 978, 982, 983, 984, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "histgradientboostingregressor": [4, 7, 119, 122, 123, 126, 129, 161, 168, 197, 307, 308, 309, 310, 312, 371, 399, 540, 560, 613, 614, 616, 952, 969, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "cross_valid": [4, 119, 129, 167, 199, 253, 260, 368, 379, 555, 800, 801, 962, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1019], "categorical_column": [4, 119, 167, 169, 447], "ordinal_encod": [4, 119], "gbrt_pipelin": 4, "transform": [4, 5, 6, 8, 10, 13, 25, 44, 46, 47, 48, 51, 54, 56, 61, 68, 73, 75, 85, 88, 97, 98, 100, 102, 104, 105, 108, 119, 129, 133, 143, 155, 162, 164, 167, 168, 169, 173, 189, 197, 198, 205, 211, 213, 215, 219, 222, 226, 228, 231, 233, 239, 244, 254, 255, 258, 266, 277, 279, 285, 286, 287, 299, 300, 301, 302, 303, 304, 307, 308, 312, 327, 330, 340, 342, 351, 358, 362, 363, 364, 365, 368, 369, 372, 376, 380, 388, 390, 391, 392, 394, 397, 399, 400, 401, 402, 408, 412, 414, 418, 422, 423, 424, 426, 427, 429, 432, 444, 445, 446, 447, 448, 462, 463, 464, 465, 468, 469, 476, 483, 488, 489, 494, 495, 504, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 529, 530, 537, 539, 541, 544, 546, 547, 548, 549, 550, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 617, 619, 620, 621, 622, 623, 634, 639, 644, 654, 657, 665, 669, 670, 671, 672, 673, 675, 694, 733, 734, 765, 777, 780, 781, 791, 805, 808, 814, 823, 828, 831, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 876, 878, 880, 883, 884, 907, 909, 951, 952, 954, 956, 958, 959, 962, 963, 966, 976, 977, 979, 982, 983, 984, 988, 993, 994, 997, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "remaind": [4, 119, 167, 186, 197, 199, 215, 312, 335, 345, 393, 444, 447, 1004, 1011, 1012, 1013, 1016, 1017], "passthrough": [4, 71, 119, 167, 168, 197, 215, 312, 393, 444, 447, 547, 548, 838, 839, 972, 1013, 1015, 1018, 1019], "short": [4, 5, 119, 125, 188, 255, 295, 340, 368, 375, 396, 400, 404, 958, 959, 965, 1009, 1014, 1015, 1016, 1017, 1018, 1019], "easier": [4, 44, 61, 65, 81, 119, 176, 182, 228, 254, 255, 299, 327, 340, 351, 363, 368, 369, 372, 375, 378, 383, 394, 396, 448, 495, 876, 909, 957, 962, 969, 978, 983, 986, 997, 1013, 1018], "specifi": [4, 95, 119, 120, 150, 153, 155, 156, 157, 158, 186, 198, 205, 242, 265, 355, 356, 362, 366, 368, 369, 376, 379, 380, 386, 392, 393, 396, 397, 399, 401, 402, 404, 406, 418, 422, 426, 430, 432, 443, 444, 447, 449, 450, 452, 453, 454, 455, 456, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 483, 495, 511, 513, 517, 521, 526, 532, 537, 539, 540, 541, 542, 544, 547, 548, 564, 565, 574, 575, 578, 583, 591, 592, 601, 612, 613, 614, 619, 624, 627, 628, 629, 632, 633, 634, 636, 637, 639, 640, 641, 642, 643, 644, 646, 649, 650, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 668, 672, 679, 680, 681, 683, 690, 692, 709, 710, 718, 734, 751, 759, 760, 763, 764, 767, 777, 779, 780, 781, 783, 784, 786, 790, 791, 794, 799, 800, 801, 802, 803, 804, 806, 810, 813, 814, 815, 817, 818, 819, 820, 824, 852, 854, 857, 858, 874, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 910, 917, 946, 952, 958, 959, 961, 962, 965, 969, 970, 972, 975, 976, 977, 992, 996, 1004, 1010, 1011, 1012, 1013, 1015, 1016, 1018, 1019, 1020], "next": [4, 7, 25, 59, 79, 118, 119, 123, 132, 156, 166, 170, 190, 194, 197, 227, 234, 238, 239, 244, 252, 263, 275, 304, 309, 316, 340, 345, 349, 351, 358, 366, 368, 369, 371, 389, 392, 393, 396, 399, 488, 489, 591, 615, 673, 679, 681, 683, 761, 775, 776, 805, 928, 951, 955, 961, 962, 972, 986, 1001, 1004, 1017, 1018], "verbose_feature_names_out": [4, 119, 167, 168, 169, 239, 310, 311, 312, 393, 444, 447, 1017], "categorical_featur": [4, 70, 119, 168, 309, 310, 311, 312, 372, 399, 541, 542, 613, 614, 969, 1012, 1016, 1019], "set_output": [4, 119, 164, 168, 225, 240, 304, 370, 414, 423, 424, 426, 427, 429, 444, 448, 462, 463, 464, 465, 476, 484, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 546, 547, 548, 549, 550, 562, 563, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 639, 669, 670, 805, 823, 828, 831, 835, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 876, 1019], "across": [4, 60, 66, 84, 135, 167, 186, 191, 219, 252, 254, 257, 277, 299, 304, 369, 376, 380, 386, 391, 392, 396, 400, 404, 418, 421, 430, 432, 434, 437, 440, 442, 449, 452, 454, 468, 471, 472, 475, 477, 483, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 531, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 547, 548, 569, 572, 575, 583, 588, 589, 591, 592, 613, 614, 615, 620, 621, 622, 623, 627, 628, 631, 633, 634, 635, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 657, 659, 660, 666, 667, 670, 671, 672, 673, 674, 675, 676, 685, 686, 698, 711, 737, 768, 771, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 789, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 824, 828, 835, 836, 837, 844, 848, 849, 856, 857, 859, 867, 870, 871, 873, 874, 878, 879, 880, 883, 886, 887, 914, 915, 933, 936, 951, 958, 960, 962, 972, 976, 978, 983, 986, 997, 1004, 1007, 1010, 1011, 1012, 1013, 1014], "def": [4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 19, 25, 27, 33, 34, 37, 40, 41, 48, 52, 55, 57, 60, 69, 74, 91, 95, 97, 98, 101, 103, 105, 113, 115, 119, 120, 121, 122, 129, 152, 155, 157, 158, 162, 177, 185, 186, 189, 194, 197, 198, 205, 206, 207, 215, 218, 219, 233, 235, 242, 243, 244, 245, 247, 248, 252, 255, 256, 257, 258, 260, 265, 268, 271, 277, 282, 287, 290, 294, 296, 299, 301, 304, 307, 319, 323, 327, 337, 340, 341, 342, 355, 363, 368, 369, 373, 374, 378, 393, 396, 400, 404, 488, 513, 578, 591, 592, 761, 852, 905, 910, 922, 962, 969, 977, 993], "cv_result": [4, 70, 255, 256, 258, 260, 791, 802, 962], "score": [4, 6, 8, 11, 16, 20, 21, 24, 25, 26, 31, 32, 33, 37, 57, 59, 69, 70, 71, 72, 73, 74, 77, 81, 85, 103, 109, 112, 118, 119, 121, 122, 125, 128, 129, 136, 137, 142, 143, 146, 161, 164, 166, 167, 168, 169, 170, 173, 188, 189, 192, 197, 199, 203, 205, 213, 215, 226, 231, 232, 235, 239, 246, 250, 255, 257, 258, 259, 260, 261, 262, 265, 266, 268, 269, 270, 271, 272, 273, 275, 284, 285, 286, 293, 294, 295, 296, 301, 304, 307, 308, 309, 310, 315, 316, 318, 319, 327, 335, 340, 341, 345, 351, 363, 368, 369, 372, 379, 380, 386, 387, 389, 390, 391, 393, 395, 397, 399, 401, 409, 411, 413, 418, 424, 427, 429, 432, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 482, 484, 512, 516, 521, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 573, 574, 575, 576, 577, 579, 580, 581, 583, 584, 585, 587, 590, 591, 592, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 679, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 716, 717, 718, 719, 720, 722, 735, 736, 737, 762, 763, 764, 765, 766, 767, 768, 769, 772, 773, 774, 775, 776, 777, 780, 781, 783, 791, 796, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 824, 825, 826, 828, 829, 830, 835, 836, 837, 839, 859, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 917, 951, 954, 958, 960, 965, 968, 970, 972, 976, 983, 991, 993, 995, 997, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "neg_mean_absolute_error": [4, 129, 199, 962], "neg_root_mean_squared_error": [4, 962], "mae": [4, 129, 197, 199, 538, 545, 725, 887, 889, 962, 978, 1011, 1012, 1016, 1017], "test_neg_mean_absolute_error": [4, 199], "rmse": [4, 80, 730, 1015], "test_neg_root_mean_squared_error": 4, "print": [4, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 20, 21, 24, 26, 30, 32, 38, 42, 43, 46, 47, 48, 49, 50, 52, 53, 57, 59, 60, 62, 66, 69, 70, 72, 73, 74, 79, 84, 85, 91, 95, 98, 103, 104, 106, 113, 116, 117, 118, 119, 121, 123, 135, 137, 142, 143, 145, 146, 149, 150, 152, 154, 158, 166, 168, 169, 170, 173, 181, 182, 183, 184, 188, 189, 192, 193, 197, 199, 200, 204, 205, 212, 213, 215, 219, 220, 223, 228, 230, 232, 235, 239, 245, 251, 255, 256, 257, 258, 260, 262, 265, 266, 270, 277, 281, 288, 290, 294, 295, 296, 301, 304, 307, 308, 309, 311, 315, 316, 319, 327, 340, 341, 342, 345, 349, 351, 355, 362, 363, 366, 369, 375, 380, 386, 393, 396, 399, 400, 402, 444, 447, 448, 452, 458, 482, 492, 521, 524, 529, 530, 539, 540, 541, 542, 544, 545, 549, 550, 557, 564, 565, 569, 570, 572, 593, 598, 611, 627, 628, 630, 631, 633, 634, 635, 637, 641, 642, 643, 644, 647, 648, 657, 658, 665, 694, 698, 717, 773, 775, 776, 778, 779, 782, 784, 785, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 808, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 836, 837, 838, 839, 840, 841, 849, 855, 859, 866, 876, 877, 878, 879, 880, 883, 891, 902, 922, 930, 952, 962, 963, 964, 965, 970, 978, 988, 992, 993, 995, 996, 997, 1004, 1006, 1012, 1013, 1015, 1019], "3f": [4, 6, 8, 11, 14, 17, 21, 24, 26, 38, 40, 47, 48, 49, 57, 70, 72, 74, 85, 116, 117, 142, 146, 149, 150, 151, 153, 158, 166, 168, 169, 177, 181, 183, 189, 197, 199, 203, 212, 213, 215, 219, 230, 232, 255, 257, 258, 260, 263, 265, 268, 277, 293, 319, 340, 341, 342, 970, 993], "std": [4, 11, 12, 37, 46, 50, 54, 60, 65, 78, 80, 81, 96, 97, 98, 116, 118, 119, 129, 136, 158, 161, 162, 167, 177, 182, 206, 230, 255, 256, 257, 259, 260, 262, 265, 267, 271, 272, 318, 330, 341, 351, 380, 392, 396, 399, 495, 587, 590, 859, 869, 972, 996, 1012, 1016], "n": [4, 5, 7, 8, 10, 11, 14, 17, 19, 32, 33, 34, 37, 39, 40, 57, 69, 74, 79, 84, 91, 95, 98, 100, 103, 105, 106, 112, 113, 116, 120, 131, 141, 146, 149, 153, 158, 168, 177, 193, 197, 198, 212, 214, 215, 218, 229, 230, 231, 233, 242, 244, 245, 255, 257, 260, 262, 263, 264, 266, 267, 277, 282, 296, 301, 303, 304, 309, 312, 316, 335, 349, 355, 362, 365, 366, 368, 371, 376, 380, 383, 389, 390, 392, 395, 396, 397, 398, 399, 400, 402, 403, 425, 426, 427, 428, 430, 449, 451, 454, 458, 469, 495, 496, 497, 498, 503, 508, 518, 520, 521, 527, 537, 538, 539, 540, 543, 544, 545, 546, 569, 570, 571, 572, 588, 589, 595, 608, 630, 652, 660, 673, 677, 680, 687, 688, 735, 782, 785, 787, 792, 793, 796, 815, 819, 820, 824, 844, 870, 872, 886, 887, 888, 889, 913, 918, 919, 937, 941, 942, 951, 954, 956, 958, 959, 962, 963, 964, 965, 966, 968, 969, 972, 974, 976, 977, 978, 988, 995, 997, 1004, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "044": [4, 15, 57, 220, 255, 731, 962], "003": 4, "068": [4, 257], "005": [4, 257, 261, 265, 282, 299, 341, 373], "quit": [4, 53, 56, 85, 113, 135, 146, 167, 168, 195, 215, 265, 310, 340, 355, 372, 379, 392, 400, 957, 959, 964, 986, 1012], "good": [4, 9, 25, 27, 40, 44, 46, 49, 52, 53, 57, 73, 80, 85, 105, 118, 121, 122, 150, 154, 161, 167, 186, 197, 198, 203, 212, 223, 226, 230, 235, 243, 245, 251, 257, 263, 272, 296, 304, 309, 315, 320, 327, 340, 341, 351, 355, 356, 357, 367, 369, 370, 373, 378, 380, 386, 389, 390, 392, 394, 396, 397, 399, 400, 401, 402, 418, 420, 425, 514, 539, 541, 542, 571, 611, 621, 628, 629, 637, 639, 640, 642, 650, 661, 671, 675, 703, 711, 722, 744, 804, 872, 915, 951, 957, 958, 959, 962, 963, 965, 966, 967, 969, 970, 972, 976, 977, 978, 983, 986, 988, 992, 995, 997, 1010], "trial": [4, 262, 427, 429, 440, 652, 775, 776, 958, 1010], "without": [4, 5, 13, 24, 36, 42, 55, 66, 67, 74, 100, 121, 124, 126, 129, 142, 146, 156, 164, 166, 167, 168, 186, 205, 226, 230, 233, 236, 238, 251, 258, 262, 264, 278, 291, 299, 300, 304, 307, 335, 341, 357, 363, 364, 366, 368, 369, 371, 372, 373, 376, 378, 379, 380, 386, 392, 393, 397, 399, 400, 401, 402, 415, 420, 422, 438, 449, 454, 476, 484, 495, 512, 514, 535, 536, 543, 559, 561, 592, 608, 615, 620, 640, 673, 681, 761, 780, 781, 782, 789, 791, 804, 805, 821, 828, 832, 838, 839, 842, 845, 848, 849, 851, 855, 856, 857, 859, 863, 878, 894, 930, 931, 951, 952, 956, 958, 959, 962, 965, 968, 972, 976, 977, 978, 982, 983, 988, 989, 997, 1001, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019], "tune": [4, 44, 70, 100, 145, 149, 161, 168, 186, 202, 214, 222, 251, 262, 279, 300, 327, 340, 351, 355, 356, 357, 379, 380, 387, 391, 392, 396, 399, 401, 402, 432, 442, 539, 540, 575, 594, 595, 596, 598, 600, 601, 603, 604, 606, 624, 640, 671, 675, 835, 956, 957, 958, 959, 961, 962, 965, 966, 968, 976, 989, 999, 1004, 1018], "just": [4, 31, 69, 85, 95, 119, 146, 187, 194, 219, 231, 257, 264, 268, 277, 293, 327, 340, 341, 351, 363, 367, 368, 369, 371, 372, 373, 375, 378, 379, 380, 389, 392, 393, 396, 399, 401, 402, 404, 448, 513, 522, 526, 535, 536, 537, 538, 539, 540, 543, 544, 545, 546, 559, 564, 565, 591, 592, 627, 633, 638, 639, 641, 643, 647, 648, 649, 657, 658, 659, 828, 836, 837, 951, 958, 961, 962, 963, 966, 970, 972, 976, 983, 995, 1004, 1008, 1010, 1012, 1016], "had": [4, 9, 47, 122, 154, 299, 310, 351, 368, 400, 403, 425, 952, 962, 986, 988, 1004, 1005, 1011, 1012, 1013, 1014, 1015, 1019], "explicit": [4, 164, 168, 173, 225, 240, 355, 356, 357, 367, 378, 380, 381, 393, 400, 406, 452, 479, 481, 482, 521, 531, 532, 619, 620, 622, 657, 777, 778, 785, 823, 831, 839, 878, 883, 926, 930, 954, 956, 958, 962, 972, 978, 982, 1004, 1008, 1013, 1014, 1017], "them": [4, 5, 8, 32, 39, 40, 49, 53, 55, 59, 64, 65, 69, 70, 85, 95, 97, 100, 109, 110, 111, 125, 141, 146, 149, 161, 162, 167, 168, 169, 173, 176, 192, 198, 199, 215, 230, 236, 255, 257, 258, 260, 266, 279, 299, 304, 310, 319, 327, 342, 349, 355, 357, 363, 366, 368, 369, 370, 371, 375, 378, 380, 381, 382, 386, 390, 391, 392, 393, 396, 397, 399, 400, 402, 425, 427, 429, 430, 437, 444, 447, 473, 474, 488, 526, 547, 548, 549, 550, 588, 589, 597, 601, 602, 605, 613, 620, 645, 673, 748, 751, 754, 758, 759, 760, 761, 769, 777, 791, 798, 804, 843, 853, 857, 859, 868, 869, 875, 886, 887, 928, 951, 952, 958, 961, 962, 963, 965, 966, 967, 972, 977, 978, 981, 982, 985, 986, 988, 995, 996, 997, 1004, 1005, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "But": [4, 9, 53, 166, 198, 199, 257, 277, 299, 368, 378, 392, 395, 398, 399, 442, 726, 886, 887, 951, 962, 977, 983], "much": [4, 6, 7, 9, 19, 25, 39, 40, 79, 81, 91, 98, 105, 115, 122, 123, 129, 130, 131, 149, 161, 162, 167, 168, 169, 170, 173, 194, 195, 199, 230, 257, 259, 260, 263, 268, 295, 300, 304, 309, 310, 312, 327, 332, 340, 341, 351, 355, 357, 363, 368, 369, 372, 375, 378, 379, 383, 391, 394, 395, 396, 397, 398, 399, 400, 401, 427, 428, 476, 514, 515, 516, 518, 539, 540, 541, 542, 639, 640, 647, 649, 657, 658, 659, 673, 759, 760, 780, 781, 795, 854, 871, 878, 951, 954, 957, 958, 959, 961, 962, 963, 965, 966, 968, 970, 974, 975, 977, 978, 983, 986, 992, 993, 995, 996, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "monoton": [4, 25, 108, 133, 164, 168, 215, 229, 308, 390, 541, 542, 616, 617, 675, 687, 855, 866, 880, 883, 959, 963, 972, 977, 1011, 1015, 1019], "relationship": [4, 111, 155, 166, 167, 176, 197, 199, 200, 264, 300, 380, 392, 394, 396, 402, 442, 617, 695, 959, 962, 964, 965, 969, 970, 995, 1009], "case": [4, 7, 8, 25, 27, 37, 49, 52, 56, 60, 65, 70, 71, 80, 85, 100, 103, 113, 115, 122, 123, 129, 143, 145, 146, 149, 156, 167, 168, 183, 186, 188, 197, 198, 199, 202, 205, 211, 213, 214, 215, 226, 230, 231, 232, 236, 247, 251, 254, 256, 257, 258, 260, 263, 264, 266, 277, 284, 295, 299, 301, 304, 307, 310, 340, 341, 342, 349, 351, 355, 356, 357, 362, 363, 366, 368, 369, 371, 372, 373, 374, 376, 378, 379, 380, 381, 383, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 418, 421, 424, 425, 427, 431, 433, 443, 444, 447, 454, 476, 488, 489, 495, 519, 521, 522, 523, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 562, 563, 569, 572, 574, 575, 578, 583, 587, 590, 591, 592, 606, 608, 609, 611, 613, 628, 629, 634, 637, 638, 639, 640, 642, 644, 647, 649, 650, 653, 655, 656, 657, 661, 663, 664, 665, 666, 667, 668, 680, 684, 689, 690, 693, 699, 701, 702, 703, 706, 708, 709, 714, 715, 718, 722, 723, 725, 726, 728, 730, 733, 734, 736, 743, 758, 761, 763, 765, 768, 772, 774, 776, 777, 780, 781, 783, 791, 795, 799, 800, 801, 802, 803, 804, 806, 808, 816, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 839, 846, 848, 849, 852, 853, 854, 857, 858, 859, 862, 868, 869, 870, 871, 878, 880, 883, 886, 887, 893, 894, 904, 915, 916, 930, 951, 952, 954, 956, 957, 959, 960, 961, 963, 964, 965, 966, 968, 969, 972, 976, 977, 978, 982, 983, 985, 986, 988, 997, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "usual": [4, 40, 77, 78, 80, 121, 122, 124, 129, 166, 168, 183, 197, 198, 251, 254, 257, 266, 267, 300, 310, 327, 351, 355, 356, 366, 368, 369, 375, 378, 379, 380, 389, 392, 393, 396, 397, 399, 400, 401, 430, 436, 518, 520, 522, 527, 539, 540, 564, 588, 589, 611, 621, 639, 640, 647, 649, 657, 658, 659, 673, 706, 738, 783, 803, 807, 878, 915, 951, 952, 954, 957, 958, 959, 961, 962, 963, 966, 967, 968, 969, 972, 976, 977, 978, 988, 994, 995, 1019], "hot": [4, 70, 115, 117, 129, 167, 197, 266, 300, 301, 309, 327, 380, 399, 400, 531, 546, 562, 629, 639, 640, 650, 661, 842, 844, 846, 847, 850, 852, 853, 958, 972, 1012, 1018, 1019], "For": [4, 8, 9, 12, 13, 19, 27, 32, 37, 40, 44, 46, 48, 49, 53, 56, 57, 59, 66, 72, 79, 85, 90, 96, 113, 115, 117, 122, 123, 125, 127, 142, 143, 146, 149, 151, 156, 161, 162, 167, 168, 185, 186, 197, 198, 201, 202, 205, 214, 215, 218, 220, 223, 226, 227, 229, 230, 231, 239, 247, 254, 257, 258, 264, 272, 275, 277, 287, 293, 295, 296, 301, 303, 304, 307, 308, 309, 310, 311, 312, 318, 320, 327, 329, 335, 340, 341, 342, 345, 346, 349, 351, 355, 357, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 383, 386, 388, 389, 390, 391, 392, 393, 396, 397, 399, 400, 401, 402, 403, 408, 413, 418, 421, 423, 424, 425, 426, 427, 429, 430, 431, 434, 436, 437, 438, 440, 441, 442, 444, 445, 446, 448, 452, 454, 462, 463, 464, 465, 469, 476, 478, 483, 494, 495, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 529, 530, 531, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 562, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 578, 583, 588, 589, 590, 591, 592, 595, 600, 603, 604, 608, 609, 610, 611, 612, 613, 614, 616, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 668, 669, 670, 673, 674, 676, 680, 682, 685, 687, 688, 709, 710, 718, 721, 722, 743, 749, 758, 763, 764, 767, 768, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 791, 799, 800, 801, 802, 803, 804, 806, 808, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 839, 845, 848, 849, 851, 852, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 869, 870, 871, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 898, 904, 925, 946, 951, 952, 954, 955, 956, 957, 958, 959, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 981, 985, 986, 988, 995, 996, 997, 1004, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "consist": [4, 7, 26, 32, 37, 55, 56, 69, 79, 84, 89, 91, 95, 119, 125, 132, 146, 152, 154, 157, 162, 197, 215, 232, 263, 266, 295, 304, 307, 310, 335, 341, 351, 355, 361, 363, 365, 368, 369, 373, 374, 375, 376, 379, 380, 381, 390, 392, 394, 398, 399, 400, 402, 410, 411, 413, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 443, 444, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 470, 477, 511, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 569, 570, 572, 592, 608, 609, 610, 611, 616, 619, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 655, 658, 659, 660, 668, 669, 670, 671, 672, 680, 681, 715, 775, 776, 784, 807, 808, 809, 811, 812, 813, 814, 822, 823, 825, 827, 830, 831, 837, 842, 843, 844, 846, 850, 851, 854, 855, 857, 858, 870, 871, 874, 878, 879, 881, 882, 884, 887, 889, 898, 900, 921, 933, 936, 951, 954, 955, 956, 958, 959, 961, 962, 963, 965, 966, 972, 975, 977, 978, 981, 982, 983, 986, 988, 995, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "scale": [4, 5, 12, 25, 27, 37, 40, 43, 46, 47, 55, 57, 60, 70, 71, 78, 81, 85, 97, 100, 101, 126, 146, 149, 150, 151, 154, 155, 156, 158, 164, 168, 173, 177, 178, 185, 197, 199, 211, 212, 213, 215, 217, 220, 224, 226, 232, 247, 254, 257, 258, 259, 264, 294, 295, 296, 298, 299, 305, 308, 311, 320, 322, 324, 327, 338, 351, 354, 355, 360, 361, 362, 365, 368, 372, 376, 378, 379, 380, 391, 392, 393, 397, 399, 401, 402, 427, 430, 431, 437, 444, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 481, 490, 494, 495, 504, 514, 518, 520, 521, 527, 529, 530, 541, 542, 563, 571, 572, 578, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 613, 622, 625, 626, 627, 628, 630, 633, 639, 640, 641, 642, 643, 653, 655, 657, 658, 659, 662, 668, 669, 670, 671, 673, 675, 680, 684, 697, 721, 727, 737, 739, 749, 755, 757, 783, 791, 794, 805, 806, 807, 819, 820, 821, 836, 837, 840, 843, 848, 849, 851, 854, 856, 857, 859, 863, 864, 865, 867, 868, 870, 871, 878, 879, 880, 881, 882, 883, 884, 938, 939, 940, 951, 954, 955, 958, 962, 963, 964, 965, 966, 970, 976, 977, 983, 986, 988, 995, 996, 998, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019], "same": [4, 7, 8, 16, 26, 34, 37, 40, 44, 53, 56, 57, 63, 69, 70, 71, 91, 95, 97, 100, 103, 105, 111, 113, 116, 119, 120, 122, 123, 127, 146, 149, 167, 168, 170, 183, 185, 186, 191, 197, 198, 199, 205, 215, 235, 236, 247, 252, 253, 254, 255, 257, 258, 260, 262, 263, 265, 270, 277, 282, 295, 299, 300, 302, 304, 307, 309, 318, 327, 335, 340, 341, 342, 349, 351, 355, 356, 357, 362, 363, 365, 367, 368, 369, 371, 373, 376, 378, 379, 380, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 412, 415, 419, 420, 430, 436, 445, 449, 450, 451, 452, 453, 454, 455, 456, 458, 473, 475, 476, 478, 484, 488, 489, 511, 512, 516, 517, 518, 519, 520, 523, 527, 529, 531, 532, 533, 534, 537, 539, 540, 541, 542, 544, 545, 547, 548, 570, 571, 583, 584, 587, 591, 592, 594, 603, 608, 609, 610, 613, 614, 627, 630, 633, 634, 636, 639, 640, 644, 647, 648, 649, 653, 654, 655, 656, 657, 658, 659, 665, 668, 680, 685, 686, 693, 694, 696, 698, 706, 711, 712, 716, 735, 736, 737, 758, 759, 760, 766, 768, 770, 772, 773, 775, 776, 777, 778, 780, 781, 783, 785, 786, 791, 795, 796, 800, 801, 802, 803, 804, 805, 806, 821, 822, 823, 827, 829, 830, 831, 842, 843, 844, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 860, 867, 878, 879, 886, 888, 900, 904, 915, 923, 928, 933, 936, 937, 947, 951, 952, 954, 956, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 972, 976, 977, 978, 983, 992, 997, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "minmaxscal": [4, 5, 71, 142, 173, 219, 294, 309, 357, 393, 444, 864, 952, 972, 1006, 1009, 1012, 1014, 1015, 1016, 1020], "although": [4, 9, 25, 116, 129, 166, 194, 215, 226, 244, 275, 351, 357, 369, 380, 392, 393, 397, 400, 476, 794, 797, 850, 961, 963, 964, 965, 968, 978, 988, 995, 996, 997, 1004, 1012, 1019], "doe": [4, 7, 8, 9, 12, 24, 25, 27, 31, 40, 46, 53, 56, 69, 71, 72, 85, 106, 115, 118, 124, 129, 146, 155, 167, 168, 194, 197, 203, 215, 218, 219, 220, 223, 226, 229, 230, 231, 233, 244, 245, 252, 257, 259, 260, 264, 266, 267, 275, 277, 290, 299, 301, 303, 310, 311, 318, 319, 325, 327, 335, 337, 340, 341, 342, 355, 362, 366, 368, 369, 371, 375, 379, 380, 386, 390, 391, 392, 393, 396, 397, 399, 400, 401, 402, 415, 421, 423, 427, 429, 430, 434, 436, 447, 453, 459, 467, 479, 483, 488, 507, 515, 517, 518, 519, 521, 524, 526, 529, 530, 537, 538, 539, 540, 541, 542, 544, 545, 562, 563, 569, 570, 572, 574, 575, 578, 583, 587, 591, 613, 619, 630, 631, 632, 635, 636, 637, 640, 652, 663, 664, 679, 681, 683, 688, 708, 709, 710, 714, 716, 718, 723, 726, 758, 763, 764, 767, 768, 772, 777, 780, 781, 791, 836, 840, 841, 842, 844, 846, 848, 851, 852, 853, 856, 859, 867, 870, 871, 875, 878, 879, 886, 887, 888, 889, 893, 898, 902, 915, 918, 919, 928, 930, 946, 951, 952, 954, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 968, 970, 972, 976, 977, 978, 997, 1004, 1005, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020], "result": [4, 5, 6, 9, 13, 19, 24, 25, 26, 27, 30, 32, 37, 40, 42, 43, 44, 45, 46, 48, 53, 54, 59, 61, 65, 70, 72, 74, 80, 85, 95, 98, 100, 102, 106, 113, 114, 115, 116, 119, 122, 123, 125, 127, 128, 138, 145, 146, 149, 151, 153, 157, 161, 167, 168, 169, 170, 177, 182, 183, 186, 187, 192, 198, 199, 201, 205, 211, 212, 215, 218, 219, 222, 226, 229, 231, 236, 242, 247, 248, 251, 252, 255, 257, 258, 260, 263, 264, 265, 266, 268, 269, 272, 277, 279, 283, 293, 294, 295, 299, 300, 301, 304, 307, 309, 311, 312, 315, 318, 320, 327, 331, 332, 335, 340, 342, 347, 348, 355, 356, 357, 362, 363, 365, 368, 369, 371, 372, 373, 375, 378, 379, 380, 381, 386, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 415, 421, 422, 424, 426, 427, 430, 431, 432, 433, 434, 435, 437, 439, 442, 444, 447, 449, 450, 451, 452, 453, 454, 455, 456, 459, 469, 488, 489, 491, 493, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 531, 532, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 559, 561, 562, 563, 565, 569, 570, 572, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 611, 612, 613, 615, 617, 621, 624, 633, 634, 639, 645, 646, 647, 648, 657, 658, 659, 667, 670, 671, 672, 673, 674, 675, 676, 689, 691, 693, 698, 705, 706, 708, 709, 710, 711, 712, 716, 717, 718, 734, 736, 737, 744, 751, 754, 758, 759, 760, 761, 763, 764, 765, 767, 771, 772, 775, 776, 777, 779, 780, 781, 782, 787, 791, 792, 793, 794, 796, 797, 800, 806, 807, 808, 810, 811, 812, 813, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 841, 843, 844, 852, 853, 856, 857, 867, 871, 875, 878, 880, 883, 886, 887, 888, 889, 890, 891, 898, 899, 914, 915, 917, 921, 927, 933, 936, 952, 954, 956, 958, 959, 961, 962, 963, 965, 966, 967, 968, 969, 970, 972, 974, 976, 977, 978, 983, 985, 988, 992, 993, 995, 996, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "becaus": [4, 5, 19, 25, 27, 40, 47, 50, 70, 81, 85, 115, 117, 122, 146, 150, 153, 156, 167, 168, 170, 177, 183, 190, 197, 203, 205, 215, 232, 243, 254, 257, 258, 263, 275, 277, 294, 295, 296, 299, 303, 304, 317, 327, 335, 340, 341, 342, 345, 351, 355, 356, 363, 369, 372, 375, 378, 379, 380, 386, 389, 390, 392, 396, 397, 398, 399, 400, 402, 405, 413, 427, 428, 441, 445, 455, 462, 463, 464, 514, 516, 532, 534, 536, 538, 540, 542, 545, 548, 550, 569, 572, 588, 589, 592, 613, 614, 616, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 653, 654, 657, 658, 659, 660, 661, 670, 680, 690, 693, 694, 702, 703, 704, 726, 743, 765, 768, 772, 777, 791, 803, 807, 812, 813, 822, 825, 827, 829, 830, 831, 837, 848, 849, 857, 859, 863, 864, 866, 867, 868, 869, 879, 881, 884, 887, 889, 926, 952, 954, 955, 956, 957, 958, 959, 960, 962, 963, 965, 967, 969, 972, 977, 978, 986, 996, 1010, 1011, 1013, 1014, 1015, 1016, 1018], "compar": [4, 5, 19, 24, 25, 27, 36, 37, 43, 49, 54, 56, 57, 63, 67, 71, 80, 83, 85, 86, 94, 98, 103, 105, 108, 110, 111, 113, 118, 119, 122, 127, 129, 133, 146, 153, 161, 162, 164, 167, 169, 170, 175, 179, 181, 185, 186, 192, 194, 197, 200, 203, 205, 207, 214, 215, 216, 218, 219, 222, 225, 228, 231, 236, 238, 240, 244, 245, 250, 252, 254, 262, 264, 266, 268, 273, 278, 282, 286, 287, 291, 292, 297, 298, 300, 304, 305, 309, 340, 341, 342, 349, 351, 357, 363, 365, 368, 369, 389, 390, 392, 394, 395, 396, 397, 399, 401, 402, 421, 422, 423, 425, 426, 428, 429, 430, 432, 438, 443, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 470, 482, 484, 492, 494, 502, 504, 508, 511, 517, 531, 532, 541, 542, 543, 545, 551, 620, 625, 626, 634, 636, 638, 639, 644, 647, 649, 657, 658, 665, 676, 686, 693, 696, 711, 718, 723, 766, 776, 777, 791, 805, 812, 821, 825, 828, 832, 836, 839, 840, 847, 848, 849, 851, 854, 855, 856, 857, 859, 864, 867, 880, 882, 883, 951, 954, 955, 956, 958, 959, 961, 962, 963, 964, 965, 966, 968, 972, 973, 976, 977, 978, 981, 982, 995, 996, 1004, 1006, 1011, 1012, 1017], "onehotencod": [4, 70, 115, 119, 129, 167, 168, 197, 215, 228, 237, 239, 308, 310, 362, 380, 393, 399, 446, 447, 546, 562, 563, 842, 846, 847, 850, 853, 972, 1005, 1008, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "linear_model": [4, 7, 8, 10, 13, 25, 27, 30, 54, 70, 72, 74, 85, 115, 129, 131, 132, 135, 137, 145, 146, 149, 161, 164, 166, 167, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 226, 227, 228, 229, 234, 237, 239, 253, 260, 265, 266, 270, 271, 275, 296, 300, 301, 304, 307, 308, 309, 310, 311, 319, 340, 351, 355, 357, 358, 367, 368, 369, 373, 375, 376, 379, 380, 393, 399, 419, 445, 517, 519, 522, 523, 525, 526, 528, 547, 548, 549, 550, 578, 612, 613, 615, 616, 619, 621, 622, 623, 624, 681, 682, 768, 791, 800, 801, 802, 810, 811, 812, 813, 837, 854, 858, 878, 879, 882, 885, 910, 954, 957, 958, 962, 963, 968, 970, 972, 976, 992, 993, 995, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "ridgecv": [4, 74, 129, 146, 167, 234, 380, 399, 548, 624, 653, 656, 958, 1004, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "numpi": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 89, 91, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 109, 111, 112, 113, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 135, 136, 138, 141, 142, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 223, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 281, 282, 283, 284, 286, 287, 288, 289, 290, 293, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 346, 347, 348, 349, 351, 355, 361, 362, 363, 366, 368, 369, 370, 371, 373, 375, 376, 378, 379, 380, 383, 385, 386, 388, 389, 392, 393, 396, 397, 398, 399, 400, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 440, 442, 444, 445, 446, 449, 450, 451, 452, 453, 454, 455, 456, 465, 470, 473, 474, 476, 483, 486, 488, 489, 511, 514, 517, 518, 519, 520, 521, 522, 523, 524, 527, 529, 530, 531, 532, 549, 550, 562, 563, 569, 570, 572, 608, 609, 610, 611, 612, 613, 614, 624, 627, 628, 630, 633, 634, 638, 639, 640, 641, 642, 643, 644, 647, 649, 651, 653, 657, 658, 659, 665, 669, 672, 673, 674, 676, 680, 683, 684, 687, 688, 690, 693, 695, 706, 707, 714, 715, 718, 719, 734, 736, 753, 759, 761, 762, 763, 768, 769, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 805, 807, 808, 811, 812, 814, 815, 816, 817, 818, 819, 820, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 842, 843, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 878, 880, 881, 883, 884, 886, 901, 913, 915, 919, 920, 921, 924, 925, 931, 933, 936, 949, 951, 952, 957, 958, 960, 962, 963, 965, 968, 972, 974, 977, 981, 983, 985, 988, 991, 992, 993, 995, 996, 997, 1004, 1007, 1008, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019], "np": [4, 5, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 91, 94, 96, 97, 98, 99, 101, 102, 103, 105, 106, 109, 111, 112, 113, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 135, 136, 138, 141, 142, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 223, 226, 229, 230, 231, 232, 233, 234, 235, 237, 242, 243, 244, 245, 246, 247, 248, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 281, 282, 283, 284, 286, 287, 288, 289, 290, 293, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 346, 347, 348, 349, 351, 355, 362, 363, 368, 369, 372, 373, 376, 378, 380, 389, 392, 393, 396, 397, 398, 399, 400, 402, 405, 407, 410, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 440, 442, 444, 445, 446, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 465, 476, 477, 488, 489, 500, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 529, 530, 531, 532, 537, 538, 539, 540, 541, 543, 544, 545, 546, 549, 550, 562, 563, 566, 567, 569, 570, 574, 575, 578, 587, 590, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 649, 651, 652, 653, 655, 656, 657, 658, 659, 662, 663, 664, 665, 672, 673, 676, 683, 684, 687, 688, 690, 693, 695, 696, 706, 707, 714, 715, 718, 719, 721, 734, 736, 743, 749, 753, 758, 761, 762, 763, 768, 769, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 805, 806, 807, 808, 811, 812, 814, 815, 816, 817, 818, 819, 820, 824, 825, 826, 827, 829, 830, 831, 835, 836, 843, 844, 846, 852, 853, 854, 855, 856, 858, 859, 866, 867, 870, 871, 873, 874, 875, 878, 880, 881, 883, 884, 886, 887, 888, 889, 896, 898, 899, 901, 903, 904, 913, 915, 920, 924, 925, 927, 931, 933, 936, 938, 939, 940, 951, 952, 957, 958, 960, 962, 963, 965, 966, 968, 972, 973, 974, 976, 977, 978, 988, 992, 993, 995, 996, 997, 1005, 1007, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1019], "one_hot_encod": [4, 119], "handle_unknown": [4, 70, 115, 119, 129, 168, 169, 228, 237, 239, 308, 311, 852, 853, 972, 1008, 1012, 1016, 1017], "ignor": [4, 6, 8, 17, 44, 49, 61, 70, 112, 115, 119, 126, 129, 168, 185, 189, 197, 206, 212, 228, 237, 239, 248, 294, 295, 304, 308, 311, 332, 341, 346, 368, 369, 371, 373, 380, 383, 392, 393, 399, 400, 410, 411, 415, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 441, 444, 447, 449, 450, 451, 452, 453, 454, 455, 456, 463, 464, 468, 483, 488, 489, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 531, 537, 538, 539, 540, 543, 544, 545, 546, 559, 562, 563, 564, 569, 570, 571, 572, 583, 584, 608, 609, 610, 611, 613, 614, 616, 620, 624, 630, 631, 632, 635, 636, 637, 639, 645, 646, 657, 658, 659, 669, 670, 671, 672, 673, 688, 694, 695, 706, 709, 710, 718, 735, 736, 743, 749, 754, 758, 763, 764, 767, 768, 775, 776, 778, 779, 780, 782, 784, 785, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798, 823, 824, 825, 827, 828, 831, 838, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 878, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 912, 937, 958, 959, 962, 964, 968, 972, 977, 993, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "sparse_output": [4, 119, 239, 311, 546, 846, 850, 852, 862, 972, 1019], "alpha": [4, 5, 7, 8, 10, 12, 13, 16, 17, 24, 26, 31, 37, 40, 42, 45, 52, 55, 59, 64, 74, 81, 85, 95, 97, 98, 100, 101, 102, 104, 105, 110, 112, 113, 118, 122, 125, 126, 128, 129, 130, 146, 149, 152, 154, 155, 156, 157, 158, 161, 162, 167, 176, 177, 178, 179, 181, 182, 183, 185, 186, 191, 192, 194, 195, 197, 198, 199, 201, 202, 206, 209, 210, 215, 218, 219, 222, 231, 232, 238, 242, 257, 258, 259, 260, 261, 264, 265, 267, 269, 270, 272, 275, 277, 280, 282, 285, 287, 293, 295, 299, 300, 301, 302, 304, 308, 310, 311, 317, 319, 324, 325, 328, 329, 332, 336, 337, 340, 355, 363, 369, 373, 378, 394, 395, 397, 399, 401, 402, 404, 451, 452, 458, 507, 511, 513, 515, 516, 517, 518, 519, 520, 522, 523, 525, 526, 527, 528, 540, 576, 577, 579, 592, 594, 596, 597, 604, 612, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 668, 703, 728, 814, 815, 816, 818, 836, 837, 874, 886, 887, 888, 889, 951, 957, 958, 962, 964, 966, 970, 975, 976, 977, 978, 992, 995, 997, 1001, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1016, 1017, 1018, 1019], "logspac": [4, 12, 72, 77, 103, 135, 136, 146, 150, 155, 167, 190, 201, 202, 230, 232, 246, 258, 270, 272, 281, 293, 301, 304, 327, 335, 951, 957, 958, 992, 993, 995], "naive_linear_pipelin": 4, "142": [4, 57, 399], "014": [4, 14, 15, 341, 373], "184": [4, 63, 67, 168, 197, 296, 373, 995], "020": [4, 970], "three": [4, 7, 26, 40, 41, 46, 57, 77, 89, 90, 110, 115, 116, 119, 121, 130, 131, 132, 143, 157, 167, 189, 194, 197, 199, 206, 208, 232, 242, 245, 308, 331, 356, 361, 365, 371, 383, 389, 392, 396, 397, 398, 400, 431, 442, 478, 690, 917, 955, 957, 958, 959, 962, 965, 972, 976, 977, 981, 988, 996, 1004], "higher": [4, 56, 79, 98, 103, 113, 115, 122, 125, 149, 151, 156, 157, 167, 168, 169, 173, 197, 198, 215, 222, 223, 248, 251, 255, 257, 260, 271, 282, 304, 327, 340, 341, 342, 351, 355, 363, 366, 369, 389, 392, 394, 399, 401, 402, 403, 425, 428, 429, 451, 458, 489, 512, 519, 523, 528, 533, 534, 537, 538, 539, 540, 541, 542, 544, 545, 546, 553, 569, 572, 588, 589, 600, 608, 612, 616, 618, 627, 628, 633, 634, 641, 642, 643, 644, 657, 659, 660, 685, 704, 708, 732, 765, 775, 777, 780, 781, 783, 791, 798, 803, 806, 825, 828, 854, 870, 871, 872, 880, 881, 882, 883, 884, 891, 954, 958, 959, 961, 962, 965, 969, 972, 976, 977, 995, 997, 1005, 1010, 1012, 1019], "suspect": 4, "origin": [4, 5, 13, 16, 20, 21, 30, 46, 47, 48, 51, 55, 57, 73, 74, 95, 97, 98, 105, 127, 142, 143, 149, 151, 153, 154, 161, 162, 168, 173, 185, 186, 218, 219, 220, 222, 223, 230, 231, 232, 248, 254, 260, 285, 296, 300, 304, 316, 333, 340, 342, 351, 363, 365, 367, 368, 369, 371, 372, 378, 380, 386, 389, 393, 396, 397, 399, 400, 402, 403, 404, 405, 415, 422, 424, 425, 426, 427, 430, 439, 443, 444, 445, 455, 462, 463, 464, 473, 474, 475, 481, 499, 511, 514, 515, 517, 518, 519, 520, 521, 523, 524, 533, 534, 535, 536, 539, 541, 542, 543, 545, 547, 548, 549, 550, 553, 556, 562, 565, 575, 588, 589, 595, 611, 613, 619, 622, 623, 624, 630, 652, 673, 677, 682, 708, 743, 749, 804, 825, 839, 843, 844, 847, 848, 852, 853, 855, 856, 857, 859, 867, 870, 871, 872, 875, 880, 883, 896, 898, 899, 903, 904, 933, 936, 955, 956, 958, 959, 961, 962, 965, 968, 973, 974, 975, 976, 979, 982, 986, 988, 997, 1007, 1008, 1010, 1012, 1014, 1016, 1018], "mere": [4, 257, 380, 806, 976], "min": [4, 9, 10, 11, 12, 13, 25, 27, 31, 52, 57, 74, 89, 95, 98, 112, 118, 121, 122, 127, 138, 151, 153, 154, 155, 162, 167, 179, 185, 186, 192, 199, 200, 203, 211, 219, 230, 231, 233, 275, 283, 284, 290, 293, 295, 299, 301, 302, 304, 320, 326, 333, 336, 376, 392, 395, 397, 462, 463, 464, 465, 492, 514, 515, 518, 520, 521, 529, 530, 543, 608, 612, 613, 635, 636, 637, 638, 663, 664, 685, 721, 737, 760, 780, 781, 828, 836, 837, 849, 858, 864, 915, 927, 958, 962, 965, 972, 1010, 1013, 1015, 1016, 1019], "properli": [4, 25, 126, 154, 252, 307, 357, 366, 368, 371, 375, 383, 398, 878, 879, 880, 881, 882, 883, 884, 951, 1007, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "automat": [4, 8, 12, 46, 62, 64, 70, 103, 135, 145, 176, 200, 242, 243, 255, 258, 299, 308, 312, 319, 329, 356, 358, 363, 366, 368, 369, 371, 375, 380, 383, 388, 392, 393, 394, 397, 399, 400, 401, 414, 430, 432, 436, 442, 444, 445, 447, 476, 479, 495, 521, 529, 531, 537, 541, 544, 569, 572, 575, 583, 624, 626, 627, 628, 633, 634, 639, 640, 641, 642, 643, 644, 647, 648, 649, 653, 655, 656, 657, 659, 662, 665, 668, 669, 672, 676, 779, 794, 797, 805, 815, 836, 837, 840, 841, 843, 852, 853, 870, 871, 878, 880, 883, 886, 888, 892, 904, 933, 936, 951, 953, 956, 961, 966, 972, 976, 978, 982, 983, 992, 1004, 1007, 1008, 1009, 1015, 1018, 1019], "term": [4, 13, 14, 25, 32, 57, 100, 113, 119, 122, 154, 166, 185, 186, 197, 199, 201, 211, 214, 215, 255, 259, 277, 293, 310, 335, 340, 342, 357, 358, 368, 369, 371, 378, 386, 391, 392, 394, 396, 397, 399, 402, 424, 427, 429, 432, 439, 442, 504, 515, 518, 520, 524, 527, 529, 569, 570, 571, 572, 585, 588, 589, 613, 614, 621, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 653, 654, 655, 656, 657, 659, 661, 668, 676, 836, 837, 854, 858, 860, 878, 879, 880, 881, 882, 883, 884, 951, 953, 956, 957, 958, 959, 962, 963, 964, 966, 967, 972, 976, 977, 988, 997, 1012, 1018, 1019], "raw": [4, 12, 14, 37, 80, 97, 129, 154, 167, 173, 296, 317, 342, 355, 363, 375, 380, 390, 391, 392, 394, 397, 400, 449, 454, 481, 482, 483, 539, 540, 541, 543, 563, 569, 570, 571, 572, 615, 658, 671, 675, 686, 766, 825, 882, 959, 962, 966, 968, 969, 972, 975, 994, 996, 1005, 1009, 1012, 1015], "recogn": [4, 29, 35, 85, 117, 164, 198, 310, 373, 392, 400, 482, 678, 694, 805, 883, 962, 988], "increas": [4, 7, 14, 26, 37, 43, 56, 57, 60, 74, 98, 111, 113, 118, 126, 142, 149, 153, 154, 155, 158, 167, 168, 173, 177, 179, 188, 197, 198, 199, 201, 215, 223, 230, 244, 257, 258, 259, 264, 270, 293, 300, 301, 304, 309, 316, 327, 335, 341, 342, 345, 355, 356, 357, 367, 375, 376, 390, 392, 394, 397, 399, 400, 403, 421, 425, 432, 443, 458, 512, 516, 533, 534, 539, 540, 541, 542, 547, 548, 569, 572, 608, 616, 617, 618, 626, 631, 632, 635, 636, 637, 639, 640, 647, 649, 657, 658, 659, 663, 664, 666, 667, 673, 687, 688, 693, 762, 769, 780, 781, 808, 827, 829, 830, 831, 834, 836, 837, 878, 879, 915, 951, 953, 957, 958, 959, 961, 962, 965, 976, 977, 978, 986, 1004, 1006, 1009, 1013, 1015, 1016, 1019], "strong": [4, 164, 166, 167, 175, 190, 194, 201, 203, 216, 232, 391, 397, 399, 402, 504, 630, 653, 955, 956, 958, 959, 961, 969, 977, 995], "similar": [4, 5, 7, 12, 17, 25, 26, 37, 49, 51, 56, 59, 74, 85, 95, 99, 122, 145, 149, 156, 166, 167, 168, 169, 197, 199, 211, 218, 220, 221, 222, 226, 232, 248, 254, 257, 260, 263, 264, 265, 275, 277, 299, 310, 326, 335, 341, 342, 351, 355, 360, 362, 364, 366, 367, 368, 369, 372, 373, 376, 378, 380, 386, 389, 390, 392, 395, 396, 397, 399, 400, 401, 402, 403, 421, 422, 424, 425, 426, 430, 432, 434, 435, 483, 488, 489, 516, 563, 570, 571, 572, 591, 658, 673, 676, 684, 686, 696, 700, 705, 708, 709, 711, 714, 718, 720, 735, 740, 741, 766, 770, 771, 774, 775, 776, 801, 806, 851, 871, 874, 878, 879, 880, 881, 899, 951, 954, 955, 957, 958, 959, 961, 963, 965, 966, 968, 969, 972, 974, 975, 976, 977, 978, 982, 983, 988, 996, 999, 1004, 1008, 1009, 1010, 1012, 1016, 1017], "magnitud": [4, 105, 112, 150, 162, 167, 214, 262, 299, 304, 310, 355, 363, 373, 392, 399, 402, 594, 633, 685, 859, 958, 962, 966, 972, 976, 978, 1006, 1013], "discret": [4, 46, 105, 108, 133, 148, 159, 164, 168, 197, 215, 298, 302, 305, 357, 360, 363, 364, 371, 379, 380, 392, 397, 399, 400, 402, 419, 420, 428, 432, 440, 441, 442, 472, 494, 495, 500, 502, 533, 539, 551, 569, 570, 573, 576, 577, 580, 581, 588, 589, 591, 592, 593, 597, 598, 599, 638, 639, 722, 774, 777, 788, 805, 814, 815, 818, 840, 844, 852, 853, 856, 859, 867, 878, 883, 886, 887, 925, 951, 958, 959, 960, 962, 963, 965, 978, 982, 988, 999, 1006, 1009, 1017, 1018, 1019], "manner": [4, 74, 95, 143, 168, 173, 244, 311, 312, 356, 368, 373, 392, 397, 399, 400, 690, 819, 820, 951, 962, 978, 1007, 1014], "uniqu": [4, 16, 24, 30, 42, 47, 48, 56, 57, 62, 66, 116, 117, 123, 124, 167, 169, 212, 215, 244, 266, 286, 318, 340, 341, 342, 362, 369, 376, 380, 392, 393, 396, 399, 400, 421, 430, 434, 436, 444, 447, 476, 529, 530, 531, 533, 534, 537, 538, 539, 540, 541, 542, 544, 545, 546, 591, 614, 615, 616, 647, 649, 657, 678, 690, 734, 762, 777, 779, 791, 802, 807, 808, 811, 817, 826, 831, 836, 850, 852, 853, 862, 878, 880, 886, 887, 888, 889, 903, 915, 925, 926, 958, 963, 986, 995, 1012, 1015, 1016, 1018], "decid": [4, 11, 56, 59, 70, 248, 254, 257, 264, 363, 368, 381, 400, 402, 430, 437, 539, 540, 616, 627, 628, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 652, 662, 665, 775, 821, 822, 823, 825, 827, 829, 830, 831, 842, 961, 968, 986, 1017], "therebi": [4, 167, 396, 399, 954, 1014], "assumpt": [4, 9, 25, 27, 36, 67, 77, 78, 98, 154, 164, 166, 197, 226, 299, 373, 378, 379, 382, 390, 391, 392, 394, 396, 397, 400, 402, 427, 431, 433, 468, 483, 492, 512, 514, 521, 631, 635, 776, 777, 780, 781, 791, 816, 870, 871, 956, 958, 962, 963, 964, 965, 967, 968, 969, 972, 975, 978, 1011, 1017], "impli": [4, 149, 340, 341, 342, 397, 399, 402, 454, 553, 563, 591, 592, 603, 715, 902, 958, 959, 997, 1015], "give": [4, 12, 13, 24, 25, 39, 44, 49, 59, 61, 63, 69, 70, 74, 97, 121, 149, 154, 158, 161, 167, 168, 186, 188, 194, 197, 198, 199, 226, 248, 254, 259, 266, 279, 283, 286, 296, 310, 311, 319, 355, 357, 363, 365, 367, 368, 369, 373, 375, 378, 379, 380, 381, 386, 389, 390, 391, 392, 393, 394, 397, 399, 400, 404, 415, 427, 429, 431, 439, 452, 476, 479, 483, 513, 518, 529, 530, 531, 532, 537, 538, 544, 545, 546, 574, 575, 578, 588, 589, 619, 628, 642, 646, 657, 701, 716, 719, 772, 777, 780, 781, 791, 800, 801, 802, 804, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 856, 857, 859, 867, 958, 962, 965, 966, 967, 969, 970, 972, 976, 977, 978, 982, 986, 988, 990, 995, 996, 997, 1004, 1008, 1011, 1012, 1014, 1015, 1016, 1018], "lot": [4, 81, 167, 363, 368, 369, 375, 397, 399, 780, 781, 870, 871, 951, 974, 976, 977, 982, 983, 986, 996, 997, 1004, 1009, 1011, 1012, 1013, 1014, 1016], "addit": [4, 5, 7, 12, 13, 14, 65, 70, 81, 95, 98, 110, 114, 116, 119, 120, 145, 154, 155, 156, 162, 167, 168, 176, 181, 186, 198, 199, 222, 236, 259, 266, 271, 275, 299, 308, 309, 317, 342, 347, 351, 355, 356, 360, 361, 362, 363, 364, 366, 367, 368, 369, 372, 373, 375, 378, 379, 381, 383, 386, 391, 392, 394, 396, 397, 400, 401, 402, 403, 414, 422, 423, 425, 426, 430, 437, 449, 454, 476, 483, 512, 514, 516, 517, 519, 521, 522, 523, 529, 533, 534, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 563, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 592, 593, 600, 609, 611, 612, 616, 619, 620, 621, 622, 623, 624, 625, 626, 651, 668, 669, 673, 679, 680, 683, 722, 738, 739, 768, 775, 776, 783, 808, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 856, 857, 858, 859, 860, 870, 871, 878, 879, 909, 915, 930, 951, 956, 958, 962, 963, 965, 966, 969, 972, 974, 975, 976, 977, 978, 982, 988, 999, 1004, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "level": [4, 9, 11, 12, 16, 27, 41, 53, 95, 115, 118, 138, 146, 148, 153, 154, 156, 159, 164, 167, 168, 208, 209, 210, 211, 212, 215, 226, 230, 231, 246, 257, 260, 266, 267, 283, 290, 325, 326, 328, 329, 331, 333, 341, 349, 355, 363, 365, 366, 368, 373, 380, 382, 383, 390, 397, 400, 406, 434, 473, 474, 483, 501, 511, 516, 517, 527, 541, 542, 547, 548, 592, 603, 606, 647, 648, 649, 657, 658, 659, 668, 671, 673, 675, 697, 703, 708, 765, 800, 801, 802, 804, 807, 808, 835, 836, 837, 891, 951, 958, 962, 963, 965, 970, 976, 978, 982, 983, 997, 1007, 1015, 1018, 1019], "one_hot_linear_pipelin": 4, "one_hot_tim": 4, "099": [4, 220], "011": [4, 119, 133, 265, 277, 373], "131": [4, 13, 55, 110, 373, 962, 1005], "rate": [4, 109, 114, 119, 141, 168, 197, 204, 215, 230, 235, 254, 257, 264, 266, 267, 294, 295, 296, 357, 368, 392, 393, 397, 401, 446, 516, 533, 534, 539, 540, 541, 542, 573, 576, 577, 579, 580, 581, 587, 625, 626, 649, 657, 658, 659, 673, 679, 683, 707, 762, 769, 835, 836, 837, 872, 951, 958, 959, 962, 965, 966, 976, 978, 986, 1008, 1012, 1013], "better": [4, 5, 9, 19, 24, 31, 50, 73, 74, 77, 78, 79, 80, 85, 89, 95, 98, 113, 121, 122, 129, 141, 153, 154, 155, 157, 158, 161, 169, 177, 183, 186, 197, 198, 199, 205, 212, 214, 215, 222, 231, 232, 247, 251, 257, 259, 260, 263, 266, 267, 296, 303, 304, 311, 312, 327, 340, 341, 342, 345, 351, 355, 363, 367, 368, 369, 371, 372, 373, 375, 380, 382, 386, 390, 392, 394, 396, 397, 398, 399, 400, 402, 429, 430, 518, 520, 527, 539, 540, 541, 542, 588, 589, 611, 652, 658, 673, 690, 705, 714, 719, 722, 743, 776, 804, 814, 815, 816, 817, 818, 819, 820, 825, 836, 837, 856, 857, 867, 870, 871, 878, 879, 930, 951, 952, 954, 955, 956, 958, 959, 961, 962, 964, 965, 966, 970, 972, 975, 976, 978, 983, 985, 986, 990, 992, 997, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "confirm": [4, 85, 113, 119, 122, 169, 197, 199, 260, 263, 266, 304, 342, 371, 951, 972, 1012], "progress": [4, 7, 8, 95, 132, 146, 162, 190, 282, 311, 365, 368, 371, 372, 381, 383, 388, 392, 539, 540, 673, 808, 810, 813, 828, 836, 837, 986, 995, 997, 1004, 1006, 1013, 1018], "veri": [4, 25, 27, 39, 40, 42, 44, 50, 52, 59, 61, 79, 80, 81, 84, 91, 98, 101, 122, 127, 135, 154, 161, 167, 168, 169, 186, 197, 198, 199, 202, 205, 215, 222, 226, 232, 242, 259, 260, 263, 264, 266, 267, 272, 277, 295, 299, 310, 315, 318, 327, 337, 340, 342, 351, 355, 363, 367, 368, 369, 372, 373, 375, 378, 379, 380, 386, 390, 392, 394, 396, 397, 398, 399, 400, 401, 402, 423, 427, 432, 442, 451, 452, 458, 480, 484, 490, 537, 538, 541, 542, 544, 545, 547, 548, 570, 571, 603, 631, 632, 635, 636, 637, 645, 663, 664, 666, 672, 673, 676, 686, 723, 726, 770, 775, 777, 785, 787, 791, 794, 797, 819, 820, 844, 848, 849, 850, 859, 870, 871, 880, 883, 886, 887, 888, 889, 915, 951, 954, 955, 957, 958, 959, 960, 961, 962, 965, 966, 968, 969, 970, 972, 974, 975, 976, 977, 978, 979, 981, 982, 983, 985, 986, 995, 996, 1004, 1009, 1010, 1012, 1015, 1017, 1019], "new": [4, 7, 8, 10, 50, 55, 57, 59, 69, 70, 103, 109, 112, 114, 115, 122, 128, 129, 143, 146, 149, 155, 162, 169, 170, 197, 203, 211, 226, 256, 259, 264, 281, 283, 308, 311, 316, 319, 326, 351, 356, 357, 362, 363, 365, 366, 367, 369, 370, 371, 373, 375, 376, 379, 380, 381, 383, 392, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 480, 481, 482, 484, 485, 488, 489, 490, 492, 503, 506, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 554, 562, 563, 564, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 685, 689, 694, 695, 699, 702, 703, 704, 705, 707, 708, 711, 714, 719, 720, 721, 723, 726, 733, 734, 737, 741, 746, 747, 749, 758, 765, 768, 769, 775, 776, 777, 780, 781, 783, 790, 791, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 864, 866, 867, 868, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 896, 898, 899, 901, 909, 910, 914, 915, 925, 928, 930, 932, 937, 943, 949, 951, 952, 954, 958, 962, 963, 965, 966, 967, 968, 972, 974, 975, 976, 977, 983, 986, 988, 989, 992, 995, 997, 1002, 1006, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "minut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 363, 368, 959, 981], "1440": 4, "caus": [4, 25, 27, 122, 150, 167, 195, 197, 202, 215, 342, 351, 366, 372, 390, 392, 397, 398, 400, 402, 424, 427, 429, 439, 489, 512, 563, 570, 591, 592, 814, 815, 816, 818, 843, 852, 854, 857, 858, 898, 899, 951, 952, 958, 962, 970, 972, 975, 983, 988, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017], "signific": [4, 122, 142, 164, 215, 250, 257, 273, 275, 277, 340, 351, 362, 363, 378, 392, 395, 396, 399, 484, 512, 514, 529, 530, 608, 639, 640, 647, 649, 657, 658, 659, 796, 804, 878, 880, 881, 882, 883, 884, 961, 962, 965, 1004, 1006, 1007, 1008, 1012], "overfit": [4, 115, 122, 164, 168, 169, 176, 226, 244, 250, 252, 258, 262, 272, 273, 293, 300, 301, 303, 304, 327, 345, 347, 348, 363, 380, 390, 396, 399, 418, 468, 469, 547, 548, 638, 777, 780, 781, 791, 801, 802, 836, 837, 839, 854, 858, 957, 966, 968, 970, 978, 986, 995, 1007], "avoid": [4, 7, 12, 44, 56, 61, 71, 115, 167, 168, 199, 206, 215, 221, 239, 252, 258, 262, 280, 285, 287, 288, 303, 304, 323, 324, 341, 356, 366, 368, 369, 371, 372, 373, 380, 381, 383, 386, 390, 392, 394, 396, 399, 400, 403, 421, 423, 425, 432, 442, 448, 473, 474, 475, 479, 488, 489, 514, 519, 523, 526, 566, 567, 615, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 670, 672, 674, 676, 693, 777, 778, 782, 788, 791, 800, 801, 802, 839, 842, 848, 849, 851, 856, 857, 858, 859, 861, 863, 864, 865, 867, 868, 869, 871, 876, 915, 956, 959, 961, 962, 965, 966, 968, 970, 972, 977, 978, 983, 997, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "kbinsdiscret": [4, 53, 164, 197, 215, 298, 301, 305, 312, 492, 638, 842, 858, 887, 972, 1012, 1016, 1017, 1018, 1020], "re": [4, 8, 13, 26, 55, 69, 70, 119, 152, 166, 215, 243, 247, 260, 262, 266, 308, 340, 342, 356, 368, 371, 375, 379, 381, 396, 400, 449, 450, 451, 452, 453, 454, 455, 456, 535, 536, 541, 542, 543, 627, 633, 641, 643, 779, 794, 797, 886, 887, 888, 889, 958, 963, 965, 972, 977, 983, 986, 997, 1004, 1008, 1009, 1011, 1013], "fine": [4, 37, 118, 213, 248, 255, 347, 348, 365, 371, 380, 400, 915, 965, 968, 983, 1014], "grain": [4, 31, 37, 231, 248, 301, 373, 400, 983], "still": [4, 32, 44, 53, 56, 61, 81, 99, 117, 119, 122, 129, 149, 155, 166, 167, 169, 176, 197, 199, 215, 231, 260, 266, 299, 309, 310, 340, 341, 351, 357, 362, 367, 368, 369, 371, 372, 373, 375, 378, 380, 392, 396, 399, 400, 403, 421, 425, 434, 454, 476, 560, 608, 613, 616, 618, 698, 736, 758, 761, 770, 771, 780, 781, 794, 797, 857, 859, 878, 896, 951, 952, 956, 958, 961, 965, 968, 970, 977, 978, 981, 983, 986, 1004, 1006, 1009, 1010, 1012, 1013, 1014, 1017, 1018, 1019], "express": [4, 7, 12, 149, 154, 167, 257, 258, 309, 324, 342, 362, 363, 368, 373, 392, 397, 400, 430, 436, 437, 569, 570, 572, 697, 777, 783, 791, 800, 801, 802, 803, 806, 826, 958, 962, 966, 972, 973, 978, 1012], "advantag": [4, 5, 39, 56, 95, 100, 197, 198, 226, 243, 258, 311, 351, 380, 390, 396, 397, 400, 402, 422, 426, 440, 514, 570, 630, 655, 656, 743, 807, 808, 809, 839, 840, 878, 879, 880, 881, 882, 883, 884, 951, 954, 957, 958, 959, 962, 963, 965, 966, 972, 976, 977, 978, 1007], "final": [4, 26, 40, 42, 69, 70, 79, 81, 85, 90, 100, 109, 111, 113, 115, 119, 120, 123, 129, 132, 143, 154, 162, 166, 168, 173, 176, 185, 186, 194, 197, 199, 214, 215, 219, 226, 239, 246, 255, 263, 277, 307, 308, 327, 355, 357, 366, 368, 371, 379, 380, 389, 390, 392, 393, 396, 399, 400, 418, 423, 427, 428, 432, 439, 442, 444, 516, 535, 536, 547, 548, 550, 608, 628, 634, 640, 660, 671, 675, 700, 777, 807, 808, 839, 840, 875, 878, 951, 952, 958, 959, 962, 965, 968, 969, 972, 975, 986, 995, 1009, 1012, 1013, 1014, 1015, 1017], "observ": [4, 5, 7, 9, 11, 13, 16, 24, 27, 37, 40, 43, 53, 61, 70, 77, 79, 80, 81, 96, 97, 100, 103, 109, 113, 114, 116, 122, 125, 128, 137, 138, 146, 149, 152, 154, 155, 156, 158, 167, 168, 169, 176, 177, 192, 193, 195, 197, 198, 199, 201, 211, 215, 222, 223, 229, 230, 253, 257, 259, 260, 264, 277, 283, 290, 304, 318, 326, 327, 332, 335, 340, 341, 342, 347, 348, 363, 365, 380, 390, 392, 393, 394, 395, 396, 397, 398, 401, 402, 422, 424, 426, 427, 429, 439, 449, 450, 451, 452, 453, 454, 455, 456, 504, 512, 531, 532, 543, 591, 592, 627, 633, 638, 682, 697, 699, 738, 798, 817, 825, 858, 958, 961, 962, 966, 967, 968, 969, 975, 976, 977, 978, 985, 989, 991, 992, 994, 1005, 1017, 1018, 1019], "complet": [4, 37, 38, 39, 44, 49, 52, 57, 61, 85, 127, 141, 143, 146, 164, 169, 170, 203, 225, 226, 240, 255, 304, 307, 341, 351, 363, 368, 371, 372, 375, 378, 393, 396, 397, 399, 400, 422, 426, 429, 432, 442, 443, 444, 447, 475, 516, 517, 518, 519, 524, 526, 538, 549, 550, 562, 568, 569, 570, 572, 608, 609, 610, 611, 630, 638, 652, 654, 685, 686, 696, 697, 698, 711, 716, 717, 737, 766, 773, 807, 810, 813, 822, 838, 839, 840, 841, 901, 947, 951, 956, 958, 962, 963, 965, 977, 978, 988, 997, 1004, 1007, 1011, 1012, 1013, 1014, 1015, 1016, 1017], "induct": [4, 36, 67, 122, 164, 380, 392, 399, 406, 422, 492, 544, 608, 873, 874, 922, 946, 958, 975, 1006], "bia": [4, 27, 77, 108, 116, 117, 122, 133, 164, 167, 169, 176, 177, 179, 201, 262, 293, 335, 351, 363, 369, 380, 390, 394, 398, 399, 402, 504, 536, 539, 540, 588, 589, 595, 623, 629, 630, 639, 640, 650, 651, 661, 836, 837, 852, 854, 858, 863, 864, 866, 867, 868, 869, 887, 957, 958, 961, 962, 966, 967, 970, 976, 995], "preserv": [4, 48, 100, 222, 230, 252, 369, 370, 391, 396, 397, 400, 562, 569, 570, 572, 627, 633, 677, 680, 754, 758, 795, 796, 797, 862, 898, 899, 952, 958, 959, 972, 974, 992, 1004, 1007, 1008, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020], "smooth": [4, 46, 47, 54, 154, 190, 198, 213, 327, 365, 381, 392, 398, 402, 428, 429, 517, 518, 519, 526, 537, 538, 539, 540, 544, 545, 546, 571, 572, 600, 603, 657, 814, 815, 816, 818, 856, 867, 886, 887, 888, 889, 958, 964, 972, 976, 977, 978, 997], "local": [4, 39, 56, 60, 95, 98, 126, 154, 155, 164, 168, 198, 217, 220, 222, 224, 226, 235, 278, 291, 347, 348, 356, 365, 366, 368, 371, 373, 375, 383, 392, 397, 399, 400, 402, 427, 432, 442, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 482, 518, 520, 524, 527, 529, 539, 540, 543, 546, 591, 592, 669, 670, 671, 672, 673, 674, 676, 677, 738, 739, 822, 825, 828, 830, 840, 849, 871, 874, 882, 928, 960, 961, 965, 966, 978, 996, 998, 999, 1008, 1012, 1016, 1019], "attempt": [4, 54, 168, 193, 203, 252, 340, 355, 367, 380, 392, 404, 430, 437, 448, 612, 669, 670, 674, 795, 821, 822, 823, 825, 827, 829, 830, 831, 857, 859, 876, 898, 899, 958, 959, 965, 978, 988, 1011, 1016], "each": [4, 7, 8, 10, 11, 12, 14, 17, 25, 26, 27, 32, 34, 37, 41, 43, 44, 47, 49, 53, 57, 59, 60, 69, 70, 72, 73, 74, 84, 85, 88, 90, 91, 95, 96, 100, 103, 104, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 125, 127, 128, 129, 130, 131, 132, 142, 144, 146, 151, 153, 158, 161, 162, 166, 167, 168, 170, 173, 176, 183, 184, 186, 191, 195, 197, 198, 199, 201, 202, 205, 212, 215, 219, 226, 227, 230, 231, 232, 233, 236, 237, 239, 242, 245, 247, 251, 252, 253, 255, 257, 258, 260, 262, 263, 266, 267, 275, 277, 280, 282, 286, 288, 290, 293, 294, 296, 299, 300, 301, 302, 304, 307, 309, 310, 311, 315, 316, 317, 320, 327, 333, 335, 341, 342, 345, 346, 349, 351, 355, 356, 357, 362, 363, 364, 365, 366, 368, 369, 371, 372, 373, 375, 376, 378, 379, 380, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 409, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 443, 444, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 458, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 499, 502, 503, 506, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 688, 689, 691, 694, 700, 705, 708, 709, 710, 718, 719, 725, 726, 728, 730, 731, 733, 734, 738, 739, 742, 743, 744, 745, 746, 748, 749, 750, 751, 753, 754, 756, 758, 759, 760, 761, 763, 764, 765, 767, 768, 770, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 904, 909, 910, 915, 917, 918, 930, 938, 939, 940, 943, 952, 954, 956, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 986, 988, 992, 994, 995, 996, 997, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "sine": [4, 149, 154, 155, 164, 191, 203, 241, 249, 347, 364, 596, 775, 776, 961, 978], "cosin": [4, 40, 271, 277, 282, 360, 363, 380, 392, 397, 398, 422, 426, 430, 437, 515, 571, 572, 601, 677, 740, 741, 742, 745, 750, 751, 754, 758, 759, 760, 819, 820, 824, 851, 965, 978, 999, 1014], "match": [4, 37, 45, 95, 98, 102, 164, 173, 175, 197, 216, 220, 229, 342, 363, 366, 369, 371, 392, 397, 399, 400, 412, 429, 444, 446, 488, 489, 495, 506, 511, 517, 522, 528, 531, 547, 548, 552, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 639, 645, 646, 666, 667, 680, 684, 685, 686, 694, 696, 700, 714, 766, 819, 820, 824, 828, 842, 843, 844, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 878, 885, 891, 902, 930, 959, 961, 962, 964, 965, 984, 988, 997, 999, 1004, 1010, 1011, 1012, 1014, 1016, 1017], "togeth": [4, 12, 51, 59, 70, 118, 129, 149, 155, 167, 178, 219, 222, 253, 311, 330, 346, 351, 369, 371, 378, 379, 380, 386, 392, 399, 400, 407, 431, 433, 547, 548, 670, 696, 777, 791, 839, 840, 958, 959, 963, 969, 972, 978, 979, 986, 989, 991, 1010], "equival": [4, 14, 56, 119, 125, 145, 149, 154, 167, 215, 247, 266, 277, 304, 342, 351, 355, 366, 373, 376, 379, 380, 392, 393, 394, 395, 396, 397, 399, 401, 402, 422, 424, 425, 426, 427, 429, 430, 437, 449, 454, 489, 514, 521, 538, 539, 541, 542, 543, 545, 569, 572, 594, 597, 600, 602, 605, 627, 628, 629, 633, 635, 639, 640, 647, 648, 649, 650, 653, 657, 658, 661, 664, 668, 669, 674, 689, 690, 703, 714, 721, 727, 728, 729, 741, 750, 759, 760, 775, 776, 780, 781, 785, 787, 810, 813, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 836, 842, 848, 849, 851, 854, 855, 856, 857, 859, 866, 868, 869, 902, 913, 948, 951, 956, 958, 959, 960, 962, 968, 972, 976, 977, 978, 1012, 1013, 1014, 1015, 1017, 1018], "importantli": [4, 13, 96, 168, 173, 299, 392], "jump": [4, 198, 299, 365, 368, 400, 858], "functiontransform": [4, 69, 115, 197, 215, 319, 445, 972, 1009, 1010, 1012, 1017, 1018, 1019], "sin_transform": 4, "return": [4, 6, 7, 8, 10, 11, 13, 16, 17, 19, 24, 25, 27, 33, 34, 37, 40, 48, 53, 55, 60, 69, 74, 91, 101, 103, 105, 113, 115, 121, 122, 125, 129, 152, 155, 157, 162, 176, 177, 185, 186, 189, 197, 198, 205, 206, 207, 215, 235, 238, 239, 245, 247, 252, 253, 254, 255, 256, 257, 258, 260, 261, 264, 271, 277, 282, 287, 290, 296, 299, 301, 304, 307, 323, 327, 340, 342, 345, 349, 355, 361, 362, 363, 368, 369, 373, 374, 376, 378, 380, 390, 391, 392, 393, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 920, 921, 922, 923, 924, 925, 926, 928, 929, 931, 932, 933, 934, 935, 936, 937, 943, 946, 947, 948, 949, 950, 952, 962, 965, 969, 970, 977, 978, 983, 988, 993, 995, 997, 1001, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "lambda": [4, 7, 8, 10, 19, 55, 72, 121, 136, 177, 215, 257, 258, 303, 319, 388, 392, 397, 399, 400, 625, 626, 627, 628, 843, 855, 958, 972, 992, 1012, 1018], "sin": [4, 13, 19, 39, 96, 111, 121, 122, 126, 128, 141, 149, 155, 156, 158, 176, 177, 191, 198, 203, 220, 232, 248, 289, 300, 308, 334, 347, 348, 402, 496, 596, 680, 744, 996], "pi": [4, 13, 34, 39, 40, 96, 105, 126, 128, 141, 149, 177, 185, 191, 198, 220, 242, 243, 244, 247, 248, 271, 290, 308, 348, 383, 398, 402, 496, 497, 498, 596, 623, 956, 957, 958, 964, 996], "cos_transform": 4, "co": [4, 12, 13, 18, 22, 39, 40, 126, 128, 154, 164, 167, 198, 220, 257, 271, 311, 348, 371, 398, 400, 429, 431, 433, 468, 491, 572, 680, 700, 744, 773, 957, 972, 986, 998, 999], "effect": [4, 6, 27, 37, 39, 40, 45, 46, 53, 56, 61, 68, 75, 85, 98, 100, 122, 124, 126, 145, 149, 150, 154, 156, 164, 165, 167, 168, 170, 171, 197, 198, 199, 202, 203, 217, 222, 224, 239, 243, 247, 257, 258, 259, 262, 265, 266, 296, 298, 300, 305, 308, 314, 321, 327, 332, 335, 336, 337, 340, 341, 342, 351, 356, 366, 368, 369, 372, 378, 380, 390, 392, 393, 397, 398, 399, 400, 402, 403, 430, 445, 470, 476, 480, 494, 504, 505, 537, 538, 539, 540, 544, 545, 546, 569, 570, 571, 572, 587, 590, 630, 638, 639, 640, 653, 654, 655, 668, 672, 673, 684, 733, 765, 775, 782, 788, 796, 805, 825, 836, 837, 843, 848, 849, 851, 855, 856, 857, 859, 864, 867, 875, 878, 879, 883, 886, 887, 888, 889, 898, 899, 915, 928, 936, 951, 956, 958, 959, 961, 962, 963, 969, 972, 975, 977, 978, 993, 995, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "expans": [4, 161, 309, 430, 854, 1013], "synthet": [4, 13, 25, 27, 31, 37, 42, 49, 116, 122, 127, 149, 154, 156, 168, 187, 199, 214, 293, 301, 335, 351, 355, 361, 370, 381, 392, 394, 401, 639, 640, 878, 879, 885, 956, 995, 1010], "beyond": [4, 27, 198, 199, 355, 357, 367, 368, 378, 390, 399, 883, 959, 963, 972, 977, 983, 1012], "pd": [4, 12, 25, 70, 71, 72, 116, 122, 126, 154, 161, 166, 167, 168, 169, 176, 186, 197, 205, 215, 235, 236, 239, 247, 255, 257, 258, 260, 268, 269, 304, 310, 311, 335, 340, 341, 372, 380, 393, 444, 446, 608, 609, 610, 611, 613, 758, 896, 898, 899, 951, 952, 969, 972, 1015, 1017, 1018, 1019], "hour_df": 4, "datafram": [4, 25, 69, 70, 71, 72, 119, 122, 126, 154, 161, 166, 167, 168, 169, 176, 186, 205, 215, 236, 239, 247, 255, 257, 258, 260, 268, 269, 304, 310, 311, 312, 335, 340, 341, 362, 363, 368, 369, 372, 380, 393, 414, 423, 424, 426, 427, 429, 444, 446, 447, 448, 462, 463, 464, 465, 469, 470, 471, 472, 476, 480, 481, 482, 484, 485, 490, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 546, 547, 548, 549, 550, 562, 563, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 669, 670, 777, 780, 781, 791, 805, 823, 828, 831, 835, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 876, 894, 921, 933, 936, 951, 952, 983, 997, 1007, 1008, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "arang": [4, 11, 13, 16, 40, 57, 59, 64, 72, 78, 79, 103, 106, 109, 118, 119, 120, 121, 123, 124, 127, 131, 142, 149, 151, 156, 157, 161, 162, 170, 181, 197, 200, 202, 206, 221, 229, 231, 252, 257, 260, 265, 268, 275, 277, 290, 293, 301, 310, 315, 316, 318, 320, 327, 334, 340, 342, 347, 348, 349, 351, 378, 389, 396, 400, 445, 524, 805, 854, 858, 957, 958, 966, 972, 976, 993], "reshap": [4, 5, 6, 9, 13, 16, 24, 30, 32, 34, 46, 47, 48, 50, 51, 53, 54, 57, 71, 79, 84, 95, 98, 105, 113, 117, 118, 127, 138, 144, 149, 151, 152, 153, 154, 155, 156, 158, 176, 188, 194, 210, 211, 213, 214, 219, 221, 223, 226, 231, 234, 246, 255, 281, 283, 290, 293, 295, 296, 300, 301, 302, 307, 310, 311, 320, 326, 327, 331, 332, 333, 336, 337, 378, 389, 397, 399, 400, 426, 445, 565, 612, 805, 854, 858, 958, 972, 993, 996, 1009], "hour_sin": 4, "fit_transform": [4, 5, 6, 10, 12, 14, 19, 44, 49, 52, 53, 57, 61, 89, 96, 99, 106, 127, 173, 188, 213, 215, 218, 219, 220, 221, 222, 223, 229, 230, 233, 235, 239, 277, 281, 294, 299, 300, 304, 307, 310, 312, 327, 340, 341, 342, 351, 360, 363, 369, 372, 373, 380, 388, 393, 397, 400, 401, 408, 414, 423, 424, 426, 427, 429, 444, 446, 448, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 546, 547, 548, 549, 550, 562, 563, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 669, 670, 671, 672, 673, 823, 828, 831, 835, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 876, 952, 954, 958, 963, 965, 972, 973, 974, 988, 993, 996, 997, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1018, 1020], "hour_co": 4, "2d": [4, 36, 44, 47, 48, 49, 53, 60, 61, 67, 93, 107, 127, 164, 191, 198, 203, 218, 220, 223, 226, 229, 230, 324, 327, 362, 364, 368, 369, 376, 380, 392, 393, 397, 400, 402, 422, 432, 442, 444, 447, 468, 470, 471, 472, 473, 474, 480, 481, 482, 484, 490, 494, 513, 521, 529, 565, 567, 616, 624, 638, 653, 672, 718, 759, 800, 804, 808, 846, 894, 898, 899, 914, 925, 948, 949, 956, 958, 959, 962, 969, 973, 978, 988, 994, 1004, 1008, 1011, 1012, 1013, 1016, 1018], "scatter": [4, 9, 11, 12, 16, 24, 30, 31, 34, 38, 39, 42, 43, 44, 45, 49, 52, 55, 56, 57, 58, 59, 61, 66, 79, 85, 89, 90, 91, 97, 99, 100, 101, 102, 104, 111, 112, 118, 125, 127, 128, 130, 138, 141, 149, 150, 151, 153, 155, 156, 157, 158, 166, 167, 173, 177, 180, 187, 189, 193, 194, 195, 198, 199, 200, 206, 209, 210, 211, 214, 218, 219, 220, 221, 222, 223, 226, 231, 232, 233, 242, 243, 244, 245, 246, 247, 248, 252, 258, 260, 271, 277, 283, 284, 285, 286, 287, 288, 289, 293, 299, 301, 302, 304, 311, 317, 320, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 336, 337, 340, 346, 347, 348, 394, 612, 682, 956, 958, 995], "color": [4, 7, 8, 9, 10, 11, 12, 16, 24, 25, 26, 27, 31, 33, 34, 36, 38, 40, 42, 44, 45, 46, 47, 49, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 77, 78, 79, 80, 81, 85, 90, 91, 94, 95, 96, 97, 99, 102, 103, 104, 105, 109, 111, 118, 119, 120, 121, 124, 125, 126, 127, 129, 131, 135, 138, 149, 151, 152, 153, 154, 155, 156, 157, 158, 162, 164, 167, 169, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 189, 191, 193, 195, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 211, 214, 215, 219, 220, 221, 223, 226, 230, 231, 232, 233, 236, 242, 243, 244, 245, 246, 247, 248, 252, 256, 258, 260, 261, 262, 263, 264, 266, 267, 268, 270, 272, 275, 279, 280, 282, 283, 284, 285, 288, 289, 290, 293, 299, 300, 301, 303, 304, 308, 317, 318, 320, 325, 326, 327, 328, 329, 331, 333, 334, 336, 346, 347, 362, 363, 365, 375, 392, 399, 400, 427, 473, 474, 486, 564, 565, 759, 936, 976, 978, 1009, 1014, 1016], "map": [4, 5, 10, 11, 17, 19, 26, 53, 100, 114, 121, 124, 127, 136, 149, 164, 173, 197, 218, 220, 225, 240, 258, 261, 266, 280, 285, 288, 290, 298, 299, 305, 319, 327, 333, 341, 342, 362, 378, 380, 390, 391, 392, 393, 396, 397, 399, 400, 406, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 476, 478, 482, 489, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 742, 745, 775, 776, 777, 780, 781, 788, 789, 791, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 866, 867, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 920, 951, 954, 959, 962, 964, 974, 977, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "space": [4, 8, 10, 19, 31, 46, 48, 53, 56, 57, 59, 60, 62, 64, 69, 70, 73, 85, 95, 97, 104, 106, 115, 118, 122, 127, 143, 149, 155, 173, 198, 218, 219, 220, 222, 230, 231, 232, 235, 236, 243, 248, 265, 268, 269, 277, 286, 287, 301, 309, 340, 341, 342, 349, 351, 355, 360, 363, 364, 365, 368, 374, 378, 379, 380, 389, 391, 392, 395, 397, 398, 399, 400, 402, 424, 427, 428, 429, 432, 442, 444, 445, 446, 447, 462, 463, 464, 478, 512, 514, 515, 518, 519, 520, 521, 523, 524, 529, 553, 563, 569, 570, 572, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 619, 621, 622, 623, 624, 669, 670, 671, 673, 674, 675, 677, 680, 777, 780, 781, 791, 809, 819, 820, 827, 828, 829, 830, 839, 844, 845, 851, 856, 870, 871, 872, 891, 919, 954, 955, 956, 957, 958, 960, 962, 963, 965, 966, 967, 968, 972, 973, 974, 975, 976, 977, 978, 982, 983, 988, 995, 997, 998, 999, 1004, 1005, 1007, 1012, 1013, 1014, 1018, 1019], "akin": [4, 198, 380], "sort": [4, 8, 10, 12, 19, 20, 24, 59, 69, 113, 119, 122, 128, 146, 176, 197, 198, 215, 234, 257, 258, 261, 271, 289, 334, 340, 347, 348, 368, 371, 375, 376, 380, 396, 399, 400, 402, 514, 521, 535, 546, 562, 591, 598, 678, 693, 699, 709, 710, 718, 734, 763, 764, 767, 769, 777, 802, 814, 815, 816, 817, 818, 819, 820, 827, 829, 830, 831, 834, 844, 850, 852, 853, 856, 858, 867, 880, 883, 915, 920, 958, 965, 968, 972, 986, 997, 1004, 1008, 1014, 1015, 1016, 1018, 1019], "analog": [4, 124, 373, 399, 962, 963, 977, 1013], "clock": 4, "25th": [4, 857], "back": [4, 100, 237, 356, 368, 369, 381, 386, 393, 400, 415, 424, 427, 439, 462, 463, 464, 488, 489, 513, 514, 515, 518, 520, 521, 524, 562, 611, 639, 640, 647, 649, 657, 658, 659, 708, 844, 846, 847, 848, 852, 853, 854, 856, 857, 859, 870, 871, 878, 958, 962, 966, 983, 988, 997, 1007, 1012, 1014, 1015, 1018], "natur": [4, 31, 122, 156, 167, 168, 173, 197, 198, 214, 215, 222, 242, 248, 266, 340, 368, 369, 380, 397, 399, 400, 403, 425, 430, 437, 531, 571, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 673, 685, 721, 735, 737, 821, 822, 823, 825, 827, 829, 830, 831, 858, 913, 958, 959, 961, 962, 965, 967, 972, 976, 982, 985, 1004, 1012], "sp": [4, 167, 952, 996], "c": [4, 6, 7, 8, 11, 12, 16, 19, 24, 25, 27, 30, 31, 34, 39, 40, 42, 43, 45, 52, 55, 56, 58, 59, 60, 64, 70, 71, 73, 85, 89, 90, 91, 100, 101, 102, 110, 112, 113, 118, 119, 125, 127, 128, 130, 131, 136, 138, 144, 150, 151, 152, 153, 157, 173, 180, 182, 187, 188, 189, 190, 192, 194, 195, 201, 204, 206, 208, 209, 210, 211, 213, 214, 218, 219, 220, 222, 223, 231, 232, 233, 237, 243, 245, 246, 247, 248, 251, 252, 254, 255, 256, 257, 260, 262, 266, 268, 277, 280, 282, 283, 285, 286, 287, 288, 289, 290, 293, 294, 296, 299, 300, 301, 304, 307, 308, 309, 310, 311, 312, 317, 320, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 340, 346, 347, 348, 355, 356, 362, 363, 365, 366, 368, 369, 370, 372, 375, 376, 378, 383, 389, 390, 392, 393, 394, 395, 396, 397, 399, 401, 405, 418, 423, 424, 427, 429, 439, 448, 455, 503, 508, 514, 518, 520, 521, 527, 529, 530, 571, 588, 589, 591, 612, 620, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 653, 654, 660, 666, 667, 669, 670, 673, 674, 689, 695, 696, 699, 711, 715, 721, 722, 738, 739, 777, 791, 804, 814, 815, 816, 817, 818, 819, 820, 826, 828, 835, 850, 852, 853, 854, 858, 873, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 893, 898, 899, 925, 951, 954, 955, 958, 959, 960, 962, 964, 965, 967, 969, 972, 974, 976, 977, 978, 982, 986, 988, 992, 993, 995, 996, 1004, 1005, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017], "colorbar": [4, 11, 30, 40, 95, 106, 117, 125, 144, 150, 152, 153, 155, 168, 218, 230, 246, 268, 299, 327, 678, 1016], "cyclic_cossin_transform": 4, "month_sin": 4, "month_co": 4, "weekday_sin": 4, "weekday_co": 4, "cyclic_cossin_linear_pipelin": 4, "125": [4, 53, 79, 310, 429, 514, 951, 962, 972], "166": [4, 293, 296, 297, 373, 962, 1004], "simpl": [4, 16, 27, 70, 74, 77, 84, 85, 95, 120, 156, 164, 168, 198, 214, 238, 258, 278, 291, 311, 323, 340, 342, 346, 351, 366, 368, 369, 370, 371, 372, 374, 378, 379, 380, 381, 389, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 406, 412, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 442, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 494, 502, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 766, 768, 775, 776, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 954, 956, 957, 958, 959, 961, 962, 965, 972, 974, 976, 978, 983, 986, 988, 997, 1001, 1004], "wors": [4, 85, 150, 168, 203, 257, 265, 304, 351, 392, 402, 413, 445, 462, 463, 464, 532, 534, 536, 538, 540, 542, 545, 548, 550, 591, 592, 616, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 650, 651, 653, 654, 659, 660, 661, 686, 702, 703, 704, 708, 765, 812, 813, 822, 830, 837, 879, 881, 884, 887, 889, 962, 972, 1013], "further": [4, 25, 42, 70, 77, 85, 95, 113, 118, 120, 145, 149, 154, 167, 169, 176, 218, 223, 254, 257, 258, 264, 312, 327, 341, 349, 355, 368, 378, 380, 391, 392, 394, 397, 399, 400, 402, 432, 442, 495, 512, 515, 563, 595, 603, 609, 639, 640, 647, 649, 657, 658, 659, 672, 676, 717, 754, 758, 761, 770, 771, 815, 821, 822, 829, 830, 857, 859, 878, 880, 883, 915, 961, 962, 964, 965, 966, 968, 972, 976, 977, 995, 997, 1013, 1017], "analyz": [4, 7, 17, 259, 266, 312, 340, 342, 372, 373, 392, 400, 483, 569, 570, 572, 768, 959, 962, 969, 970, 978, 997, 1004, 1013], "reason": [4, 8, 12, 42, 53, 69, 122, 146, 167, 168, 173, 197, 198, 205, 215, 226, 230, 231, 235, 254, 257, 258, 263, 277, 300, 304, 341, 342, 351, 355, 356, 357, 363, 367, 368, 369, 371, 375, 378, 379, 380, 381, 392, 393, 394, 397, 399, 400, 402, 488, 512, 554, 619, 627, 633, 635, 653, 668, 673, 743, 777, 791, 823, 828, 835, 854, 875, 951, 952, 957, 958, 959, 962, 964, 965, 966, 968, 972, 976, 977, 986, 997, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "disappoint": 4, "outcom": [4, 167, 380, 549, 639, 690, 722, 772, 807, 873, 874, 875, 880, 883, 958, 962, 978, 985, 997, 1008, 1012, 1014], "end": [4, 11, 26, 52, 73, 80, 85, 115, 129, 202, 205, 245, 252, 257, 261, 309, 310, 315, 318, 319, 341, 366, 368, 369, 371, 378, 380, 383, 389, 392, 393, 395, 399, 430, 436, 448, 468, 469, 488, 489, 517, 526, 537, 538, 539, 540, 544, 545, 546, 626, 627, 628, 631, 632, 633, 634, 635, 636, 641, 642, 643, 644, 662, 663, 664, 665, 777, 780, 781, 791, 798, 800, 837, 839, 876, 886, 887, 888, 889, 919, 920, 946, 951, 958, 959, 961, 962, 972, 974, 976, 986, 994, 997, 1009, 1011, 1014, 1017, 1018], "altern": [4, 26, 70, 85, 116, 117, 123, 129, 169, 181, 197, 215, 227, 245, 248, 266, 307, 340, 341, 342, 351, 363, 370, 371, 373, 378, 380, 381, 383, 387, 389, 390, 392, 393, 394, 396, 397, 399, 400, 402, 422, 423, 426, 427, 432, 438, 443, 479, 518, 520, 521, 527, 533, 534, 537, 538, 539, 540, 544, 545, 546, 563, 569, 570, 572, 598, 601, 624, 673, 687, 689, 751, 754, 758, 761, 779, 808, 843, 849, 852, 864, 871, 873, 886, 887, 888, 889, 929, 930, 956, 958, 959, 961, 962, 965, 966, 970, 972, 974, 975, 977, 978, 983, 992, 997, 999, 1009, 1011, 1017, 1018], "larger": [4, 7, 27, 37, 39, 42, 47, 79, 81, 91, 105, 113, 123, 150, 155, 156, 162, 167, 168, 173, 177, 212, 213, 214, 223, 230, 232, 242, 248, 258, 260, 266, 267, 277, 279, 293, 294, 296, 299, 327, 341, 342, 361, 363, 368, 373, 378, 380, 389, 390, 392, 393, 394, 396, 397, 399, 400, 402, 421, 424, 429, 430, 432, 434, 436, 495, 507, 521, 524, 541, 542, 543, 547, 548, 563, 570, 624, 633, 653, 654, 655, 656, 660, 668, 673, 685, 700, 716, 775, 824, 825, 856, 858, 859, 867, 872, 914, 915, 933, 936, 954, 955, 958, 959, 961, 962, 965, 966, 970, 972, 976, 977, 995, 997, 1008, 1009, 1012, 1013, 1014, 1017, 1018], "periodic_spline_transform": 4, "n_spline": [4, 858], "none": [4, 8, 9, 10, 16, 17, 26, 33, 39, 41, 42, 44, 52, 54, 55, 61, 97, 100, 105, 114, 118, 119, 121, 124, 138, 150, 156, 157, 170, 176, 197, 198, 205, 208, 215, 218, 232, 233, 251, 257, 258, 269, 282, 284, 288, 303, 309, 310, 316, 319, 325, 327, 328, 331, 332, 334, 340, 341, 363, 365, 368, 369, 374, 376, 380, 392, 396, 399, 402, 403, 404, 408, 409, 410, 411, 412, 413, 414, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 483, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 681, 682, 683, 684, 688, 689, 690, 692, 693, 694, 695, 697, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 714, 715, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 867, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 895, 897, 898, 899, 901, 902, 903, 904, 907, 909, 914, 915, 918, 919, 920, 921, 925, 928, 930, 931, 933, 936, 937, 943, 946, 947, 949, 951, 958, 962, 972, 975, 978, 988, 992, 997, 999, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "degre": [4, 16, 34, 97, 112, 154, 161, 166, 168, 173, 176, 185, 186, 198, 232, 237, 242, 243, 244, 247, 248, 257, 271, 296, 309, 310, 324, 334, 397, 401, 432, 478, 515, 521, 620, 621, 624, 637, 755, 775, 777, 825, 854, 858, 880, 881, 882, 883, 884, 954, 955, 957, 958, 959, 960, 962, 963, 965, 968, 969, 972, 975, 977, 995, 1007, 1013, 1017, 1018], "n_knot": [4, 198, 310, 858, 972, 1017], "include_bia": [4, 176, 271, 854, 858, 1018], "knot": [4, 198, 310, 858, 972, 1017], "linspac": [4, 8, 9, 10, 11, 13, 24, 26, 30, 34, 37, 38, 40, 42, 49, 79, 80, 94, 96, 105, 111, 120, 122, 149, 150, 152, 153, 154, 155, 156, 158, 168, 176, 177, 179, 187, 191, 197, 198, 199, 203, 207, 208, 209, 210, 211, 215, 223, 226, 229, 230, 232, 233, 246, 257, 259, 260, 264, 265, 266, 267, 271, 282, 283, 289, 290, 300, 302, 311, 312, 326, 327, 330, 332, 333, 335, 336, 337, 612, 613, 783, 803, 819, 820, 996], "again": [4, 66, 71, 122, 153, 155, 157, 158, 167, 222, 258, 340, 351, 371, 376, 380, 381, 392, 393, 394, 399, 400, 452, 547, 548, 615, 628, 632, 634, 636, 642, 644, 646, 673, 951, 958, 962, 976, 1001, 1004, 1012], "splines_df": 4, "spline_": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 13, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 41, 46, 47, 48, 51, 52, 53, 54, 57, 59, 60, 65, 69, 73, 74, 79, 84, 94, 95, 96, 98, 101, 111, 116, 117, 118, 119, 122, 123, 124, 127, 128, 138, 142, 144, 150, 151, 153, 155, 156, 161, 162, 164, 168, 169, 181, 185, 186, 197, 199, 204, 206, 209, 210, 211, 212, 213, 217, 219, 221, 224, 226, 229, 230, 231, 232, 234, 235, 242, 244, 246, 247, 248, 255, 257, 259, 260, 263, 264, 266, 267, 277, 282, 283, 287, 290, 293, 295, 301, 302, 307, 309, 312, 317, 318, 320, 324, 326, 327, 330, 331, 332, 333, 336, 337, 340, 341, 349, 355, 361, 362, 363, 368, 369, 380, 389, 390, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 413, 414, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 903, 904, 909, 913, 915, 917, 920, 924, 926, 931, 933, 937, 938, 939, 940, 941, 942, 943, 952, 957, 958, 962, 963, 964, 965, 966, 968, 972, 973, 974, 975, 976, 977, 978, 993, 994, 996, 997, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1018], "concat": [4, 161, 166, 186, 215, 852], "cmap": [4, 5, 6, 11, 12, 13, 16, 20, 21, 31, 32, 34, 39, 40, 46, 47, 50, 51, 53, 54, 57, 79, 81, 88, 89, 95, 98, 102, 106, 112, 117, 118, 138, 144, 152, 153, 168, 176, 180, 188, 189, 206, 209, 210, 211, 213, 219, 220, 221, 230, 231, 234, 251, 252, 277, 280, 281, 283, 285, 286, 288, 290, 293, 295, 296, 299, 301, 315, 316, 320, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 336, 337, 346, 678, 993, 994], "cm": [4, 6, 11, 12, 13, 16, 20, 21, 24, 25, 27, 31, 32, 34, 38, 39, 46, 47, 49, 50, 51, 52, 53, 54, 57, 59, 60, 66, 79, 81, 88, 89, 95, 98, 102, 112, 117, 118, 138, 144, 152, 153, 168, 180, 189, 206, 209, 210, 211, 213, 219, 220, 221, 227, 230, 231, 234, 239, 251, 252, 277, 281, 283, 287, 290, 293, 295, 296, 299, 301, 309, 312, 315, 316, 320, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 336, 337, 346, 365, 393, 678, 891, 962, 972, 978, 993, 994], "tab20b": 4, "stai": [4, 26, 37, 105, 167, 341, 367, 368, 371, 380, 381, 967, 1010], "midnight": 4, "fewer": [4, 13, 26, 110, 118, 120, 197, 355, 401, 402, 428, 441, 533, 575, 677, 809, 919, 958, 963, 965, 1009, 1010, 1011], "most": [4, 6, 8, 12, 13, 19, 24, 27, 52, 53, 61, 77, 84, 85, 104, 116, 123, 129, 141, 142, 143, 145, 146, 154, 162, 166, 167, 168, 169, 170, 173, 197, 198, 215, 236, 242, 248, 254, 255, 260, 264, 265, 267, 286, 299, 307, 310, 316, 327, 340, 341, 342, 351, 355, 356, 357, 363, 364, 366, 368, 369, 371, 372, 373, 375, 378, 380, 381, 383, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 424, 425, 430, 436, 437, 440, 448, 476, 483, 501, 504, 512, 514, 519, 523, 529, 531, 541, 542, 546, 547, 569, 570, 572, 574, 585, 592, 608, 611, 630, 639, 653, 655, 657, 659, 668, 669, 673, 676, 705, 708, 726, 738, 739, 743, 765, 772, 775, 776, 780, 781, 796, 807, 808, 821, 822, 823, 825, 827, 828, 829, 830, 831, 854, 856, 863, 864, 866, 867, 868, 869, 876, 914, 915, 917, 925, 930, 951, 952, 956, 957, 958, 959, 960, 961, 962, 963, 965, 968, 969, 970, 975, 976, 977, 978, 981, 982, 983, 986, 993, 995, 997, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1019], "cyclic_spline_transform": 4, "cyclic_month": 4, "cyclic_weekdai": 4, "cyclic_hour": 4, "cyclic_spline_linear_pipelin": 4, "097": [4, 349, 350, 365], "132": [4, 8, 13, 55, 110, 206, 216, 399], "013": [4, 341], "successfulli": [4, 13, 303, 367, 371, 400, 976], "reduc": [4, 7, 42, 45, 46, 47, 48, 53, 70, 71, 77, 113, 120, 122, 124, 127, 143, 167, 176, 177, 195, 202, 205, 228, 230, 235, 258, 264, 286, 301, 304, 312, 341, 342, 351, 360, 362, 365, 368, 373, 378, 380, 390, 391, 392, 394, 396, 397, 399, 400, 401, 403, 425, 426, 430, 437, 440, 473, 514, 524, 529, 535, 536, 537, 538, 543, 544, 545, 553, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 591, 608, 624, 633, 653, 654, 655, 656, 668, 673, 676, 761, 777, 780, 781, 783, 791, 800, 801, 802, 803, 806, 856, 867, 870, 871, 886, 887, 888, 889, 951, 954, 956, 957, 958, 959, 962, 965, 974, 975, 979, 988, 996, 1004, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1018, 1020], "choic": [4, 7, 40, 46, 64, 69, 77, 103, 149, 150, 156, 161, 186, 198, 235, 251, 255, 257, 260, 282, 309, 340, 341, 351, 355, 366, 369, 372, 378, 383, 392, 394, 396, 398, 399, 401, 402, 432, 442, 451, 452, 453, 454, 455, 456, 458, 518, 520, 521, 527, 539, 619, 628, 629, 637, 639, 640, 642, 650, 661, 673, 686, 808, 821, 822, 827, 829, 830, 856, 859, 867, 869, 878, 879, 902, 951, 956, 958, 959, 960, 962, 963, 968, 970, 975, 976, 977, 978, 1011, 1014, 1015, 1019], "arbitrari": [4, 85, 95, 96, 97, 115, 156, 176, 197, 214, 215, 255, 299, 303, 309, 340, 349, 356, 368, 378, 380, 393, 396, 397, 399, 400, 404, 430, 435, 437, 445, 512, 513, 539, 540, 562, 620, 629, 650, 661, 669, 778, 779, 784, 786, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 843, 845, 858, 951, 953, 954, 958, 959, 962, 965, 972, 983, 997, 1004, 1005, 1008, 1010, 1011, 1012, 1014, 1018], "held": [4, 8, 70, 103, 123, 169, 205, 244, 260, 265, 275, 399, 539, 540, 541, 542, 682, 777, 780, 781, 791, 836, 837, 849, 951, 952, 961, 970, 997], "point": [4, 9, 11, 13, 16, 26, 31, 37, 38, 40, 41, 48, 49, 52, 57, 59, 63, 66, 79, 80, 84, 89, 90, 91, 93, 98, 100, 101, 107, 112, 118, 119, 127, 151, 156, 157, 164, 167, 168, 169, 176, 180, 186, 189, 191, 193, 195, 197, 198, 199, 203, 206, 209, 210, 214, 215, 218, 219, 220, 221, 222, 226, 229, 231, 235, 244, 248, 251, 254, 258, 259, 264, 266, 267, 275, 277, 280, 281, 282, 283, 284, 285, 286, 288, 290, 293, 300, 301, 303, 315, 316, 320, 323, 326, 327, 328, 329, 331, 332, 336, 337, 340, 341, 342, 346, 351, 355, 356, 357, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 375, 378, 380, 381, 391, 392, 397, 398, 399, 400, 403, 404, 421, 422, 423, 424, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 438, 440, 441, 449, 452, 454, 478, 484, 492, 494, 495, 499, 502, 505, 510, 513, 515, 521, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 591, 592, 609, 612, 613, 614, 618, 619, 620, 625, 626, 632, 636, 638, 651, 652, 654, 656, 657, 659, 660, 663, 664, 669, 670, 671, 672, 673, 674, 675, 680, 682, 687, 688, 691, 694, 698, 703, 705, 711, 716, 717, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 744, 759, 760, 775, 776, 777, 791, 800, 809, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 836, 837, 844, 858, 872, 873, 874, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 896, 954, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 972, 974, 975, 977, 978, 982, 983, 992, 995, 996, 997, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1015, 1016, 1017, 1018, 1019], "naive_linear_predict": 4, "one_hot_linear_predict": 4, "cyclic_cossin_linear_predict": 4, "cyclic_spline_linear_predict": 4, "zoom": [4, 115, 299], "insight": [4, 7, 167, 168, 198, 199, 215, 295, 299, 340, 349, 390, 777, 780, 781, 791, 802, 969, 978, 986], "last_hour": 4, "slice": [4, 17, 118, 206, 220, 223, 231, 280, 285, 288, 310, 311, 323, 363, 369, 376, 393, 444, 447, 473, 474, 488, 526, 620, 754, 758, 761, 894, 918, 919, 933, 1016, 1018], "suptitl": [4, 5, 14, 32, 33, 34, 39, 40, 50, 53, 56, 59, 66, 74, 95, 98, 106, 118, 119, 126, 129, 158, 167, 168, 191, 196, 212, 213, 218, 219, 220, 234, 245, 253, 296, 299, 301, 307, 309, 315, 316, 320, 334, 335, 346], "label": [4, 6, 7, 11, 12, 13, 16, 20, 24, 25, 26, 27, 32, 33, 38, 40, 42, 43, 45, 46, 47, 48, 49, 51, 52, 55, 57, 59, 62, 63, 64, 65, 66, 72, 74, 77, 78, 79, 80, 84, 85, 90, 91, 94, 97, 99, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 128, 129, 132, 136, 142, 149, 150, 154, 155, 156, 157, 158, 161, 164, 167, 170, 173, 176, 177, 179, 180, 181, 185, 186, 187, 191, 197, 198, 199, 200, 203, 204, 205, 206, 207, 212, 214, 215, 219, 220, 221, 226, 231, 232, 233, 235, 236, 244, 251, 252, 255, 256, 258, 259, 260, 261, 263, 266, 267, 268, 269, 270, 271, 272, 275, 282, 284, 286, 289, 294, 296, 299, 300, 304, 307, 308, 311, 314, 318, 319, 320, 321, 334, 335, 340, 341, 345, 346, 347, 348, 357, 360, 361, 362, 367, 368, 369, 372, 376, 380, 381, 389, 390, 391, 402, 403, 409, 410, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 441, 442, 445, 449, 467, 468, 469, 473, 474, 475, 476, 482, 483, 488, 489, 492, 494, 495, 499, 502, 503, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 547, 549, 550, 573, 574, 575, 576, 577, 579, 580, 581, 585, 586, 587, 590, 591, 612, 639, 640, 647, 648, 649, 654, 655, 656, 657, 658, 659, 678, 679, 681, 683, 684, 685, 686, 688, 690, 691, 693, 694, 695, 696, 697, 698, 699, 701, 705, 706, 707, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 734, 735, 736, 737, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 825, 826, 828, 829, 836, 837, 839, 843, 846, 847, 850, 852, 853, 862, 873, 874, 875, 878, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 898, 903, 904, 925, 926, 933, 951, 958, 959, 963, 964, 965, 966, 968, 969, 972, 976, 977, 978, 982, 984, 988, 993, 995, 996, 997, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "actual": [4, 27, 46, 59, 74, 85, 110, 173, 186, 197, 205, 244, 253, 260, 342, 351, 355, 357, 365, 366, 368, 369, 372, 373, 378, 379, 380, 390, 392, 397, 400, 401, 415, 489, 495, 496, 507, 518, 520, 527, 542, 543, 626, 629, 639, 640, 647, 648, 649, 650, 651, 653, 655, 657, 658, 659, 661, 668, 672, 676, 682, 685, 690, 696, 702, 703, 704, 765, 775, 780, 781, 796, 797, 825, 856, 878, 884, 906, 907, 908, 937, 954, 961, 962, 965, 969, 970, 1011, 1012, 1018, 1019, 1020], "black": [4, 9, 10, 11, 26, 34, 44, 49, 55, 79, 80, 91, 95, 110, 118, 141, 149, 150, 154, 155, 158, 162, 167, 168, 176, 185, 186, 187, 189, 193, 197, 198, 199, 203, 206, 209, 210, 215, 226, 242, 245, 280, 282, 293, 294, 296, 320, 337, 346, 347, 348, 368, 383, 385, 392, 399, 402, 535, 536, 612, 968, 969, 978, 982, 988], "One": [4, 9, 12, 24, 30, 49, 90, 100, 103, 117, 119, 122, 125, 164, 167, 170, 175, 212, 216, 226, 236, 247, 257, 264, 267, 286, 300, 322, 324, 338, 341, 355, 365, 368, 379, 380, 392, 395, 397, 398, 399, 400, 403, 425, 429, 452, 454, 458, 492, 546, 620, 639, 647, 649, 654, 656, 657, 658, 768, 784, 785, 807, 808, 809, 840, 841, 852, 882, 925, 952, 954, 958, 959, 960, 961, 962, 963, 965, 966, 969, 970, 972, 977, 984, 999, 1008, 1010, 1017, 1019], "legend": [4, 7, 8, 9, 11, 24, 26, 33, 37, 40, 60, 71, 72, 74, 77, 78, 79, 80, 84, 85, 94, 97, 99, 103, 104, 105, 109, 110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 128, 129, 131, 132, 142, 149, 150, 154, 155, 156, 157, 158, 167, 168, 173, 176, 177, 179, 181, 182, 185, 186, 187, 191, 197, 198, 199, 200, 203, 204, 205, 206, 207, 210, 211, 212, 214, 215, 221, 229, 230, 231, 232, 233, 236, 244, 252, 254, 256, 257, 259, 260, 261, 262, 264, 266, 267, 269, 270, 271, 272, 282, 283, 284, 289, 294, 300, 304, 308, 311, 317, 326, 329, 334, 340, 345, 346, 347, 348, 681], "draw": [4, 7, 16, 59, 158, 167, 193, 236, 259, 264, 327, 374, 395, 397, 398, 399, 535, 536, 537, 538, 543, 544, 545, 546, 592, 615, 682, 783, 890, 892, 961, 982, 991, 1017, 1018], "conclus": [4, 100, 167, 169, 197, 199, 257, 259, 351, 399, 991], "abov": [4, 25, 26, 37, 44, 65, 69, 112, 115, 120, 122, 132, 145, 146, 167, 168, 170, 183, 197, 199, 203, 208, 230, 233, 257, 263, 282, 301, 304, 308, 310, 341, 342, 349, 351, 355, 356, 357, 362, 363, 365, 366, 367, 368, 369, 371, 373, 378, 380, 381, 392, 393, 394, 396, 397, 398, 400, 402, 422, 426, 444, 447, 469, 475, 476, 477, 503, 571, 615, 685, 735, 777, 789, 791, 800, 842, 843, 856, 861, 867, 875, 925, 951, 952, 954, 956, 958, 959, 962, 965, 967, 969, 972, 976, 977, 978, 983, 988, 989, 995, 996, 997, 1010], "problemat": [4, 253, 393, 952, 1012], "captur": [4, 9, 12, 37, 39, 85, 122, 126, 141, 154, 167, 176, 197, 248, 308, 327, 375, 399, 400, 401, 551, 569, 570, 572, 825, 929, 962, 967, 975, 979, 995, 1016], "big": [4, 44, 59, 61, 201, 202, 219, 248, 356, 368, 373, 381, 394, 400, 404, 518, 541, 542, 783, 803, 814, 815, 816, 817, 818, 983, 986, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "goe": [4, 37, 115, 349, 368, 399, 451, 452, 458, 537, 538, 544, 545, 546, 886, 887, 888, 889, 972, 976], "artifact": [4, 13, 46, 47, 299, 357, 371], "discontinu": [4, 378], "fail": [4, 54, 65, 96, 103, 157, 158, 176, 257, 307, 356, 366, 368, 369, 370, 375, 381, 383, 395, 396, 421, 452, 454, 657, 658, 659, 836, 837, 909, 951, 959, 1004, 1005, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019], "intra": [4, 569, 572, 770, 771], "variat": [4, 12, 37, 126, 154, 155, 164, 167, 202, 241, 243, 248, 249, 254, 275, 308, 327, 365, 396, 397, 402, 424, 427, 439, 516, 624, 653, 655, 656, 775, 776, 795, 796, 798, 951, 962, 972, 975, 978, 982, 993, 995, 998, 999, 1007, 1009, 1010], "harmon": [4, 37, 264, 341, 392, 515, 521, 709, 710, 716, 763, 773, 962], "phase": [4, 191, 355, 608, 954, 959, 965, 986, 1012, 1014], "potenti": [4, 77, 162, 166, 168, 176, 283, 284, 293, 342, 355, 356, 380, 383, 392, 396, 399, 400, 448, 462, 463, 464, 465, 476, 504, 529, 537, 538, 541, 542, 544, 545, 553, 587, 592, 615, 743, 868, 869, 876, 886, 887, 888, 889, 930, 968, 976, 997, 1007, 1014, 1015, 1018], "fix": [4, 6, 8, 25, 34, 46, 70, 105, 115, 118, 149, 150, 154, 157, 167, 199, 215, 248, 260, 265, 293, 307, 308, 309, 310, 311, 312, 341, 355, 356, 362, 364, 366, 367, 368, 369, 370, 375, 378, 380, 381, 393, 396, 397, 399, 400, 402, 432, 442, 452, 484, 492, 511, 517, 520, 522, 528, 529, 539, 540, 544, 545, 569, 572, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 611, 634, 644, 651, 665, 668, 672, 676, 688, 765, 775, 791, 798, 821, 822, 824, 827, 829, 830, 846, 862, 886, 887, 915, 929, 951, 958, 961, 962, 965, 972, 983, 985, 993, 997, 1002, 1003, 1005, 1006, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020], "two": [4, 7, 9, 11, 14, 24, 26, 30, 37, 39, 40, 43, 59, 63, 69, 70, 74, 79, 84, 85, 89, 90, 91, 95, 97, 98, 100, 104, 108, 111, 117, 118, 119, 122, 125, 126, 127, 130, 133, 143, 146, 149, 150, 151, 152, 155, 156, 161, 162, 164, 167, 168, 169, 176, 180, 185, 186, 187, 188, 193, 197, 198, 199, 205, 206, 209, 214, 215, 220, 222, 223, 226, 231, 233, 235, 242, 243, 244, 246, 247, 248, 252, 254, 258, 264, 280, 282, 285, 286, 288, 290, 299, 301, 304, 307, 308, 310, 311, 317, 323, 324, 327, 328, 329, 336, 340, 341, 342, 346, 351, 361, 362, 363, 364, 365, 366, 368, 369, 371, 373, 374, 375, 378, 380, 381, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 422, 423, 424, 425, 426, 427, 430, 431, 432, 433, 437, 439, 444, 449, 450, 451, 452, 453, 454, 455, 456, 468, 470, 471, 472, 473, 474, 476, 478, 480, 481, 482, 483, 484, 485, 487, 490, 494, 499, 502, 516, 518, 520, 524, 527, 529, 530, 533, 540, 550, 562, 565, 571, 572, 573, 576, 577, 579, 580, 581, 583, 584, 587, 588, 589, 591, 592, 601, 602, 605, 609, 613, 620, 624, 626, 651, 652, 654, 673, 680, 684, 685, 686, 693, 696, 697, 700, 702, 703, 704, 711, 712, 715, 716, 718, 721, 723, 734, 735, 737, 743, 744, 751, 754, 757, 758, 759, 760, 761, 765, 766, 772, 773, 774, 775, 808, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 836, 837, 843, 844, 851, 852, 853, 854, 872, 873, 874, 878, 886, 888, 889, 925, 941, 942, 948, 951, 952, 954, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 974, 975, 976, 977, 978, 979, 988, 992, 995, 996, 997, 1001, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "onc": [4, 8, 50, 143, 146, 149, 219, 255, 258, 277, 307, 311, 340, 342, 349, 351, 355, 357, 362, 363, 368, 371, 372, 373, 374, 375, 379, 380, 381, 392, 393, 395, 396, 397, 399, 400, 401, 402, 429, 431, 433, 452, 488, 489, 518, 524, 531, 539, 540, 571, 572, 578, 600, 608, 628, 632, 634, 636, 642, 644, 646, 647, 648, 649, 657, 658, 659, 678, 693, 697, 699, 716, 761, 778, 782, 785, 795, 814, 815, 816, 817, 818, 890, 958, 959, 965, 972, 976, 977, 978, 988, 997, 1001, 1004, 1012, 1014, 1015, 1016, 1017], "specif": [4, 11, 12, 27, 44, 61, 64, 69, 71, 129, 154, 157, 167, 168, 173, 215, 252, 257, 299, 307, 308, 312, 340, 341, 342, 351, 355, 356, 363, 368, 370, 372, 373, 375, 378, 380, 383, 388, 391, 392, 393, 396, 397, 399, 400, 401, 402, 476, 483, 514, 531, 537, 544, 547, 548, 549, 550, 554, 569, 572, 574, 578, 593, 594, 595, 596, 598, 599, 600, 601, 603, 604, 606, 621, 624, 627, 628, 633, 639, 653, 668, 678, 693, 694, 726, 777, 778, 779, 784, 785, 786, 791, 802, 815, 907, 909, 910, 925, 938, 939, 940, 956, 958, 959, 961, 962, 964, 965, 967, 969, 972, 976, 978, 979, 980, 981, 997, 999, 1004, 1008, 1012, 1013, 1014, 1015, 1018, 1019], "furthermor": [4, 37, 155, 168, 169, 236, 238, 277, 340, 341, 355, 357, 374, 392, 397, 399, 400, 542, 571, 587, 600, 685, 716, 726, 735, 737, 773, 878, 958, 970, 1007, 1011], "enforc": [4, 12, 53, 95, 154, 191, 286, 355, 368, 394, 397, 399, 402, 488, 507, 511, 517, 519, 522, 523, 525, 526, 528, 541, 542, 858, 898, 899, 952, 959, 1006, 1012, 1014, 1016], "behav": [4, 12, 48, 52, 56, 252, 299, 309, 327, 351, 368, 373, 378, 379, 392, 396, 859, 958, 972, 977, 979, 983, 997, 1004, 1011, 1013, 1017, 1018], "similarli": [4, 12, 37, 91, 125, 168, 186, 197, 227, 257, 293, 299, 327, 351, 356, 364, 366, 369, 372, 380, 381, 389, 395, 396, 400, 957, 959, 960, 962, 969, 976, 977, 979, 988, 992, 1012, 1018], "spiki": 4, "instanc": [4, 8, 10, 24, 26, 27, 53, 55, 57, 113, 143, 146, 162, 168, 169, 180, 228, 253, 255, 266, 268, 269, 280, 288, 307, 320, 323, 324, 330, 340, 341, 342, 354, 355, 356, 362, 363, 365, 366, 367, 368, 369, 371, 372, 373, 375, 376, 378, 380, 383, 389, 390, 392, 393, 396, 397, 399, 400, 401, 402, 403, 404, 406, 414, 415, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 442, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 468, 471, 472, 475, 476, 477, 483, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 557, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 591, 592, 601, 608, 609, 610, 611, 613, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 681, 682, 683, 688, 701, 709, 710, 718, 751, 754, 758, 759, 760, 761, 763, 764, 767, 768, 769, 770, 771, 775, 776, 777, 779, 780, 781, 782, 783, 784, 786, 789, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 867, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 898, 899, 901, 909, 910, 914, 915, 930, 931, 932, 933, 936, 946, 947, 951, 952, 958, 959, 962, 964, 965, 968, 970, 972, 976, 977, 978, 983, 985, 988, 995, 996, 997, 999, 1004, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "shorter": [4, 155, 245, 378, 392, 397, 402, 430, 437, 543, 678, 964, 968, 997, 1015], "necessarili": [4, 31, 71, 98, 167, 197, 205, 215, 231, 232, 243, 301, 340, 341, 362, 371, 390, 392, 399, 608, 827, 829, 830, 831, 956, 959, 961, 962], "59": [4, 42, 173, 215, 224, 296, 365, 373, 393, 490, 962, 1000, 1004], "37": [4, 260, 315, 363, 399, 504, 697, 859, 1004], "creat": [4, 5, 8, 11, 16, 21, 26, 27, 30, 32, 37, 39, 41, 43, 44, 46, 49, 52, 57, 59, 61, 70, 71, 79, 85, 97, 100, 112, 115, 118, 119, 122, 125, 128, 144, 145, 149, 151, 154, 155, 156, 158, 162, 166, 168, 176, 178, 180, 183, 193, 198, 199, 209, 210, 220, 231, 236, 238, 247, 252, 253, 255, 257, 267, 275, 280, 285, 287, 288, 301, 303, 304, 307, 310, 311, 320, 323, 324, 328, 329, 332, 335, 336, 337, 342, 345, 347, 348, 351, 356, 363, 364, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 379, 380, 383, 390, 392, 393, 396, 398, 399, 400, 402, 419, 431, 433, 445, 446, 479, 495, 496, 497, 498, 526, 533, 535, 536, 537, 538, 539, 540, 543, 544, 545, 546, 569, 570, 572, 578, 609, 611, 612, 613, 614, 678, 679, 681, 682, 683, 769, 777, 779, 783, 787, 791, 795, 800, 801, 802, 809, 840, 852, 880, 883, 886, 887, 888, 889, 893, 896, 918, 919, 923, 935, 947, 952, 958, 961, 962, 963, 965, 969, 972, 973, 974, 976, 977, 978, 982, 983, 986, 993, 995, 996, 1001, 1004, 1005, 1007, 1010, 1014, 1017, 1018, 1019, 1020], "turn": [4, 32, 77, 161, 162, 167, 212, 213, 231, 257, 281, 342, 355, 357, 363, 378, 380, 381, 391, 392, 393, 395, 397, 400, 401, 402, 562, 563, 570, 588, 589, 808, 812, 880, 883, 901, 952, 956, 964, 967, 972, 986, 997, 1009, 1011, 1012, 1017], "downstream": [4, 79, 342, 400, 511, 514, 517, 521, 522, 587, 852, 972, 1014], "freedom": [4, 97, 154, 185, 186, 188, 257, 521, 637, 775, 958, 1007], "underfit": [4, 122, 149, 164, 169, 250, 272, 273, 293, 638, 777, 780, 781, 791, 801, 802, 839, 854, 957, 958], "approxim": [4, 5, 27, 33, 46, 53, 79, 99, 100, 105, 114, 121, 122, 150, 167, 174, 177, 193, 197, 198, 211, 215, 225, 226, 229, 232, 240, 248, 257, 262, 271, 278, 286, 291, 299, 301, 302, 304, 307, 310, 340, 342, 347, 348, 351, 358, 360, 365, 376, 378, 380, 389, 390, 393, 395, 396, 397, 399, 402, 404, 405, 406, 414, 429, 449, 450, 453, 454, 455, 456, 462, 463, 464, 471, 476, 482, 501, 504, 513, 514, 515, 516, 518, 519, 520, 521, 523, 524, 525, 526, 527, 539, 540, 563, 570, 591, 592, 600, 619, 620, 621, 622, 623, 638, 639, 640, 653, 655, 657, 658, 660, 668, 673, 738, 739, 744, 775, 778, 795, 800, 804, 805, 819, 820, 823, 827, 829, 830, 831, 835, 839, 840, 845, 849, 851, 852, 856, 867, 878, 883, 884, 914, 915, 936, 955, 956, 957, 958, 959, 961, 965, 966, 967, 968, 969, 970, 974, 976, 977, 978, 982, 983, 997, 999, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018], "especi": [4, 8, 55, 119, 122, 167, 197, 312, 331, 341, 351, 356, 362, 368, 375, 378, 380, 390, 392, 400, 424, 429, 481, 518, 537, 538, 539, 540, 544, 545, 546, 627, 628, 629, 631, 633, 634, 635, 639, 640, 641, 642, 643, 644, 650, 661, 676, 686, 726, 814, 815, 816, 817, 818, 886, 887, 888, 889, 958, 964, 965, 970, 972, 986, 1007, 1012, 1016, 1017, 1018], "sharp": [4, 168, 969, 972], "rush": [4, 368], "flatter": [4, 25], "accur": [4, 9, 21, 25, 26, 79, 95, 124, 149, 156, 167, 168, 212, 215, 257, 264, 268, 311, 340, 341, 351, 367, 390, 392, 394, 397, 399, 400, 401, 418, 424, 427, 431, 433, 439, 511, 518, 520, 522, 523, 525, 526, 527, 588, 589, 615, 780, 781, 819, 820, 914, 915, 954, 959, 962, 978, 1018], "tend": [4, 12, 27, 37, 39, 43, 52, 56, 167, 168, 186, 197, 201, 202, 215, 242, 245, 254, 258, 275, 296, 342, 355, 357, 368, 369, 380, 390, 392, 394, 397, 399, 401, 418, 428, 634, 825, 856, 867, 915, 958, 959, 965, 978, 997], "under": [4, 7, 11, 24, 25, 27, 41, 66, 77, 78, 103, 119, 122, 168, 197, 226, 235, 257, 264, 266, 267, 300, 335, 362, 368, 369, 371, 373, 375, 380, 383, 386, 390, 392, 394, 396, 397, 400, 401, 431, 433, 450, 451, 452, 453, 454, 455, 456, 512, 519, 521, 523, 635, 636, 637, 683, 687, 688, 689, 696, 722, 734, 768, 769, 775, 776, 824, 958, 959, 960, 962, 965, 972, 976, 977, 978, 982, 983, 997, 1004, 1006, 1007, 1009, 1012, 1016], "These": [4, 5, 7, 27, 51, 95, 97, 101, 115, 118, 164, 168, 186, 197, 198, 199, 201, 227, 264, 275, 277, 281, 296, 299, 306, 311, 316, 318, 351, 355, 356, 361, 364, 365, 368, 369, 371, 374, 376, 378, 380, 383, 386, 389, 390, 391, 392, 395, 397, 399, 400, 401, 402, 423, 428, 478, 488, 489, 495, 518, 547, 548, 583, 584, 649, 657, 658, 687, 713, 736, 758, 772, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 824, 825, 844, 951, 953, 956, 958, 959, 962, 963, 973, 975, 977, 982, 988, 992, 997, 1004, 1010, 1012, 1013, 1014, 1017], "systemat": [4, 257, 369, 693, 708, 962, 1019], "reveal": [4, 167, 169, 340, 373, 389, 959], "form": [4, 9, 19, 32, 42, 59, 66, 95, 132, 156, 157, 167, 232, 248, 257, 315, 351, 362, 365, 368, 369, 371, 380, 381, 389, 391, 392, 395, 396, 397, 398, 399, 400, 402, 404, 406, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 439, 443, 444, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 550, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 666, 668, 669, 670, 671, 672, 673, 674, 680, 775, 776, 777, 780, 781, 782, 785, 787, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 904, 951, 953, 955, 956, 958, 959, 962, 963, 966, 967, 968, 972, 977, 982, 988, 995, 1010, 1014, 1016], "explain": [4, 5, 12, 55, 72, 84, 85, 104, 122, 149, 154, 155, 168, 169, 197, 215, 226, 248, 267, 270, 340, 341, 356, 366, 368, 371, 386, 388, 395, 397, 402, 473, 501, 504, 514, 521, 524, 529, 606, 629, 637, 650, 661, 702, 703, 704, 708, 765, 958, 965, 978, 981, 982, 993, 995, 996, 1015, 1017, 1018], "lack": [4, 368, 369, 378, 396, 804, 893, 977, 1018], "deriv": [4, 19, 105, 106, 121, 154, 157, 169, 185, 186, 190, 198, 356, 363, 369, 390, 394, 396, 398, 399, 400, 402, 404, 422, 426, 445, 513, 587, 598, 603, 629, 650, 657, 661, 836, 837, 852, 858, 878, 879, 956, 958, 959, 962, 966, 968, 977, 1004, 1005, 1006, 1011, 1012, 1013, 1019], "address": [4, 48, 340, 363, 368, 392, 400, 638, 958, 959, 964, 965, 966, 967, 968, 972, 986, 995, 1012], "section": [4, 37, 95, 100, 113, 129, 135, 136, 137, 138, 154, 158, 166, 167, 168, 176, 185, 186, 199, 222, 227, 237, 255, 257, 260, 266, 304, 309, 340, 341, 342, 351, 361, 363, 366, 368, 369, 371, 372, 373, 374, 375, 381, 386, 390, 391, 393, 395, 396, 397, 399, 400, 401, 402, 420, 424, 439, 514, 595, 600, 603, 618, 626, 768, 776, 880, 883, 951, 956, 958, 962, 963, 965, 966, 968, 969, 976, 977, 979, 981, 995, 997, 1004, 1006, 1007, 1008, 1011], "margin": [4, 12, 25, 27, 150, 151, 153, 154, 155, 164, 167, 168, 175, 216, 257, 299, 322, 325, 327, 329, 338, 365, 390, 391, 397, 399, 402, 492, 591, 592, 626, 657, 715, 808, 856, 867, 880, 883, 958, 962, 964, 968, 969, 972, 976, 977, 995, 1011, 1013], "construct": [4, 11, 69, 71, 110, 112, 114, 117, 129, 215, 227, 237, 239, 275, 290, 300, 302, 308, 311, 362, 365, 369, 376, 380, 392, 396, 397, 399, 400, 403, 415, 422, 423, 425, 426, 430, 432, 437, 443, 445, 447, 499, 515, 521, 524, 535, 536, 562, 568, 620, 669, 671, 672, 791, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 838, 839, 840, 841, 843, 883, 897, 899, 914, 915, 925, 951, 952, 954, 958, 959, 962, 963, 965, 972, 975, 977, 978, 983, 988, 992, 1009, 1011, 1012, 1015, 1018], "polynomialfeatur": [4, 176, 197, 198, 203, 237, 271, 309, 858, 958, 972, 1008, 1012, 1013, 1014, 1017, 1018], "coars": [4, 118, 373, 428, 441], "too": [4, 7, 12, 17, 44, 50, 56, 61, 69, 73, 81, 99, 122, 161, 169, 198, 219, 230, 243, 251, 255, 264, 272, 295, 327, 340, 347, 348, 355, 365, 368, 373, 375, 378, 380, 392, 394, 396, 399, 400, 401, 404, 418, 429, 518, 569, 572, 660, 673, 688, 814, 815, 816, 817, 818, 844, 857, 859, 957, 959, 961, 962, 964, 965, 969, 995, 1005, 1008, 1011, 1012, 1013, 1014, 1016], "mani": [4, 7, 10, 19, 55, 73, 77, 81, 116, 117, 118, 120, 123, 142, 146, 169, 197, 218, 230, 243, 251, 257, 264, 265, 269, 277, 299, 304, 307, 308, 309, 310, 311, 340, 351, 355, 357, 363, 365, 367, 368, 379, 380, 381, 389, 392, 393, 394, 397, 399, 400, 401, 402, 404, 483, 533, 534, 537, 538, 539, 540, 544, 545, 546, 569, 572, 587, 590, 608, 620, 631, 635, 639, 640, 647, 649, 657, 658, 659, 673, 676, 680, 754, 758, 777, 781, 791, 836, 837, 852, 857, 859, 878, 886, 887, 888, 889, 951, 952, 954, 958, 959, 961, 962, 963, 964, 965, 968, 969, 970, 972, 975, 977, 979, 981, 982, 983, 986, 995, 997, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1019], "featureunion": [4, 73, 360, 380, 391, 444, 610, 841, 952, 983, 986, 999, 1005, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020], "hour_workday_interact": 4, "interaction_onli": [4, 854, 958, 972], "combin": [4, 12, 25, 27, 60, 69, 70, 72, 73, 95, 104, 105, 108, 120, 124, 133, 149, 155, 162, 164, 167, 197, 214, 215, 222, 226, 231, 257, 258, 266, 268, 269, 286, 294, 309, 310, 312, 330, 342, 346, 355, 360, 364, 365, 368, 372, 379, 380, 389, 390, 392, 393, 396, 397, 398, 399, 400, 401, 402, 404, 405, 426, 444, 446, 447, 453, 455, 456, 459, 460, 461, 469, 476, 488, 489, 495, 501, 504, 506, 511, 517, 518, 520, 522, 527, 529, 540, 542, 545, 547, 548, 591, 595, 597, 602, 605, 611, 615, 624, 627, 628, 633, 634, 639, 640, 641, 642, 643, 644, 647, 649, 653, 654, 655, 656, 657, 659, 660, 662, 665, 710, 768, 777, 780, 781, 788, 789, 800, 802, 806, 838, 840, 844, 852, 853, 854, 859, 878, 936, 951, 954, 955, 958, 962, 963, 965, 968, 972, 975, 976, 979, 986, 993, 995, 997, 1004, 1009, 1012, 1015, 1016, 1017, 1019, 1020], "ones": [4, 11, 34, 43, 70, 80, 125, 149, 173, 202, 226, 229, 257, 265, 268, 284, 303, 316, 337, 355, 356, 368, 375, 380, 392, 394, 396, 399, 430, 512, 546, 562, 591, 592, 625, 626, 639, 640, 651, 657, 684, 774, 779, 784, 795, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 854, 858, 920, 958, 962, 967, 968, 972, 977, 995, 1004, 1012, 1013, 1014], "previou": [4, 43, 53, 70, 95, 113, 119, 122, 129, 149, 154, 155, 166, 167, 168, 183, 198, 230, 232, 257, 260, 264, 299, 304, 311, 340, 341, 342, 351, 355, 363, 368, 369, 372, 373, 375, 378, 380, 381, 383, 392, 399, 400, 448, 526, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 611, 627, 629, 633, 634, 639, 641, 643, 647, 648, 649, 650, 657, 658, 659, 661, 688, 796, 810, 813, 828, 836, 837, 875, 892, 958, 962, 966, 972, 983, 988, 997, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "nice": [4, 66, 198, 299, 355, 397, 997], "improvemnt": 4, "cyclic_spline_interactions_pipelin": 4, "078": 4, "009": [4, 265, 341, 373], "104": [4, 24, 224], "highlight": [4, 79, 91, 149, 150, 155, 215, 303, 313, 340, 342, 358, 368, 371, 372, 373, 375, 378, 402, 424, 427, 444, 447, 470, 471, 476, 481, 484, 492, 495, 504, 518, 541, 542, 544, 545, 547, 580, 583, 609, 611, 615, 621, 627, 629, 633, 639, 650, 661, 669, 698, 728, 768, 777, 780, 781, 791, 805, 821, 823, 840, 844, 849, 852, 853, 854, 858, 859, 875, 876, 878, 883, 887, 910, 959, 962, 970, 972, 977, 1014, 1015, 1016, 1017, 1018, 1019], "anoth": [4, 37, 95, 100, 124, 146, 149, 157, 162, 167, 186, 205, 223, 226, 236, 243, 257, 259, 260, 263, 267, 287, 340, 342, 345, 351, 355, 357, 362, 363, 366, 368, 369, 373, 378, 380, 386, 389, 392, 396, 397, 399, 400, 401, 403, 423, 425, 432, 435, 442, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 488, 518, 520, 527, 654, 657, 673, 690, 700, 783, 838, 839, 951, 957, 958, 959, 962, 963, 965, 968, 972, 976, 977, 988, 995, 996, 997, 1013, 1014], "either": [4, 10, 30, 70, 118, 119, 167, 185, 187, 227, 252, 261, 266, 282, 340, 349, 355, 356, 360, 363, 366, 368, 369, 373, 380, 386, 390, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 404, 423, 427, 432, 467, 476, 492, 504, 513, 514, 516, 524, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 563, 564, 565, 569, 570, 571, 572, 574, 575, 578, 583, 588, 589, 591, 592, 603, 608, 611, 613, 614, 631, 635, 637, 645, 657, 659, 663, 664, 671, 678, 679, 683, 687, 688, 692, 693, 701, 704, 706, 707, 708, 715, 719, 720, 722, 732, 736, 749, 754, 758, 762, 765, 768, 769, 772, 777, 780, 781, 783, 791, 799, 800, 801, 802, 803, 804, 806, 809, 868, 869, 875, 878, 879, 886, 887, 888, 889, 893, 922, 951, 958, 962, 963, 964, 965, 966, 967, 970, 972, 976, 977, 988, 996, 997, 1004, 1007, 1013, 1014, 1015, 1018], "after": [4, 17, 20, 21, 26, 46, 53, 69, 70, 74, 80, 97, 110, 120, 127, 129, 132, 142, 146, 154, 156, 158, 161, 167, 173, 190, 197, 235, 236, 239, 245, 257, 266, 277, 285, 287, 299, 300, 303, 304, 340, 341, 357, 363, 365, 366, 367, 368, 369, 371, 373, 374, 375, 378, 380, 381, 386, 388, 389, 392, 393, 396, 397, 400, 401, 402, 404, 423, 427, 430, 431, 432, 433, 436, 442, 495, 512, 516, 533, 534, 539, 540, 541, 542, 578, 608, 611, 639, 640, 647, 648, 649, 654, 656, 657, 658, 659, 673, 693, 706, 736, 772, 775, 776, 780, 781, 828, 835, 839, 858, 878, 883, 884, 951, 952, 956, 958, 962, 966, 967, 972, 974, 976, 977, 978, 983, 988, 995, 997, 1004, 1007, 1011, 1012, 1015, 1016, 1019], "quadrat": [4, 29, 35, 154, 158, 164, 211, 259, 310, 391, 421, 438, 441, 529, 530, 604, 629, 639, 640, 650, 657, 661, 697, 883, 884, 958, 959, 962, 965, 968, 972, 976, 977, 984, 999, 1005], "tractabl": [4, 396, 615, 982, 1017], "nystr\u00f6m": 4, "latter": [4, 14, 247, 257, 266, 267, 285, 304, 335, 357, 365, 368, 380, 396, 399, 400, 406, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 722, 775, 776, 777, 780, 781, 786, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 929, 965, 1013], "kernel_approxim": [4, 161, 164, 172, 173, 211, 226, 231, 309, 358, 658, 738, 739, 845, 954, 988, 1005, 1011, 1020], "nystroem": [4, 161, 211, 226, 231, 360, 621, 622, 623, 658, 845, 883, 884, 999, 1005, 1011, 1014, 1016, 1017, 1018], "cyclic_spline_poly_pipelin": 4, "poli": [4, 16, 138, 173, 257, 324, 331, 334, 432, 515, 601, 745, 754, 777, 854, 880, 881, 882, 883, 884, 958, 972, 995], "n_compon": [4, 5, 6, 12, 14, 44, 52, 56, 57, 58, 69, 71, 72, 73, 84, 85, 89, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 127, 173, 196, 218, 219, 220, 221, 222, 223, 226, 230, 231, 233, 237, 242, 243, 244, 245, 246, 247, 248, 256, 281, 286, 296, 304, 309, 311, 341, 369, 372, 373, 380, 395, 397, 404, 431, 432, 442, 444, 462, 463, 464, 465, 506, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 620, 621, 622, 623, 669, 670, 671, 672, 673, 674, 675, 676, 677, 775, 776, 828, 835, 838, 870, 871, 872, 915, 954, 956, 959, 961, 965, 993, 996, 1005, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018], "300": [4, 20, 21, 34, 38, 50, 57, 98, 110, 111, 112, 162, 187, 223, 226, 230, 246, 260, 287, 302, 309, 315, 333, 335, 369, 424, 427, 428, 439, 441, 620, 625, 626, 660, 671, 673, 675, 836, 958, 1014], "random_st": [4, 5, 6, 7, 10, 12, 14, 19, 20, 21, 24, 25, 26, 27, 30, 31, 38, 42, 43, 44, 46, 48, 49, 50, 53, 55, 56, 57, 58, 59, 60, 61, 69, 70, 74, 81, 85, 91, 95, 97, 100, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 135, 142, 143, 145, 149, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 178, 179, 183, 189, 196, 197, 200, 201, 203, 204, 205, 209, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 231, 233, 234, 235, 236, 238, 239, 242, 244, 245, 248, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 275, 277, 281, 285, 286, 287, 293, 294, 295, 296, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 318, 325, 327, 328, 329, 335, 336, 340, 341, 345, 349, 351, 369, 372, 376, 379, 380, 388, 392, 393, 396, 397, 399, 400, 404, 415, 418, 419, 421, 424, 427, 429, 431, 432, 433, 434, 438, 439, 440, 442, 449, 454, 468, 471, 472, 475, 477, 483, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 564, 565, 574, 575, 588, 589, 591, 592, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 608, 613, 614, 615, 616, 619, 620, 621, 622, 623, 627, 628, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 655, 657, 658, 659, 660, 668, 670, 671, 672, 673, 674, 675, 676, 678, 679, 681, 682, 683, 715, 768, 771, 775, 776, 779, 780, 781, 782, 783, 789, 791, 792, 793, 794, 795, 796, 797, 803, 804, 805, 807, 809, 810, 811, 812, 813, 824, 828, 835, 836, 837, 839, 844, 856, 867, 870, 871, 878, 879, 880, 883, 886, 887, 888, 889, 891, 892, 914, 915, 931, 933, 936, 951, 952, 954, 957, 962, 963, 964, 965, 966, 969, 970, 972, 977, 978, 988, 992, 993, 997, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017], "053": [4, 341, 365, 373], "002": [4, 12, 146, 365], "076": [4, 866], "004": [4, 341], "almost": [4, 120, 121, 199, 205, 271, 304, 318, 351, 361, 363, 371, 373, 378, 379, 380, 392, 396, 397, 450, 451, 452, 453, 455, 456, 457, 775, 951, 957, 958, 961, 962, 977, 996, 997, 1012, 1017], "rival": [4, 875, 975], "intermedi": [4, 7, 52, 115, 122, 327, 400, 539, 540, 600, 839, 962, 1016], "compound": [4, 215, 400, 591, 593, 661, 704, 732, 958, 997], "one_hot_poly_pipelin": 4, "082": 4, "006": [4, 341, 373], "111": [4, 7, 8, 16, 66, 89, 101, 102, 109, 194, 212, 222, 257, 277, 831, 1007], "competit": [4, 122, 340, 625, 965], "low": [4, 11, 12, 37, 50, 80, 85, 97, 99, 103, 113, 125, 146, 169, 190, 192, 197, 199, 211, 218, 220, 226, 230, 235, 242, 243, 245, 248, 251, 257, 259, 263, 264, 272, 283, 284, 295, 303, 318, 326, 327, 340, 349, 364, 365, 368, 372, 375, 380, 383, 389, 390, 391, 396, 397, 400, 423, 429, 501, 504, 515, 563, 570, 584, 660, 673, 677, 686, 706, 722, 769, 824, 915, 927, 930, 951, 954, 957, 958, 959, 961, 962, 965, 967, 968, 969, 970, 972, 974, 977, 978, 984, 999, 1005, 1008, 1009, 1010, 1012, 1013, 1018, 1019], "rank": [4, 17, 25, 79, 99, 103, 116, 144, 169, 170, 215, 255, 257, 265, 364, 387, 389, 390, 394, 395, 397, 399, 400, 488, 489, 501, 504, 529, 530, 574, 575, 587, 629, 638, 650, 661, 677, 680, 701, 706, 707, 719, 720, 736, 772, 780, 781, 915, 951, 953, 954, 959, 970, 972, 986, 999, 1005, 1010, 1013, 1014, 1018, 1019], "fact": [4, 11, 19, 25, 80, 85, 122, 169, 230, 239, 340, 362, 374, 378, 380, 395, 397, 398, 399, 400, 630, 649, 651, 685, 956, 958, 965, 972, 976, 977, 983, 986, 1018], "smoother": [4, 5, 122, 168, 295, 398], "allow": [4, 55, 57, 73, 74, 99, 100, 113, 114, 127, 149, 154, 156, 158, 191, 197, 215, 219, 227, 230, 236, 238, 239, 242, 257, 275, 307, 308, 309, 310, 312, 332, 340, 349, 351, 355, 362, 366, 368, 369, 371, 374, 376, 380, 381, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 403, 422, 425, 426, 444, 446, 447, 503, 504, 514, 533, 534, 539, 540, 541, 542, 547, 548, 563, 570, 574, 575, 578, 584, 591, 592, 596, 608, 609, 611, 615, 619, 624, 627, 628, 633, 634, 639, 641, 642, 643, 644, 657, 659, 662, 663, 664, 665, 669, 673, 742, 745, 754, 758, 761, 770, 771, 775, 776, 777, 779, 780, 781, 784, 786, 788, 791, 798, 805, 825, 834, 841, 842, 845, 846, 851, 862, 871, 873, 874, 875, 878, 879, 886, 887, 888, 889, 896, 898, 899, 909, 910, 926, 951, 952, 954, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 972, 974, 975, 976, 977, 978, 982, 983, 986, 988, 1001, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "find": [4, 5, 6, 12, 17, 40, 46, 47, 48, 49, 52, 53, 56, 64, 72, 79, 80, 95, 97, 99, 100, 106, 120, 129, 149, 153, 155, 157, 158, 168, 185, 186, 199, 205, 218, 220, 222, 223, 229, 247, 256, 257, 258, 268, 285, 286, 287, 304, 307, 329, 330, 335, 340, 341, 345, 356, 365, 366, 368, 369, 372, 373, 376, 378, 379, 380, 381, 389, 392, 394, 395, 397, 399, 400, 401, 403, 422, 425, 426, 430, 431, 432, 433, 442, 511, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 538, 545, 563, 570, 591, 592, 628, 631, 634, 635, 636, 637, 639, 640, 652, 669, 688, 709, 710, 718, 762, 763, 764, 767, 768, 772, 777, 791, 821, 822, 823, 825, 827, 829, 830, 831, 852, 853, 858, 870, 871, 872, 886, 887, 889, 895, 914, 915, 917, 951, 952, 954, 957, 958, 959, 961, 962, 963, 966, 968, 972, 976, 977, 978, 981, 983, 986, 988, 990, 992, 993, 995, 996, 997, 1004, 1011, 1012, 1013, 1014, 1016, 1018, 1019], "function": [4, 5, 6, 7, 8, 14, 20, 21, 37, 46, 53, 54, 56, 58, 65, 69, 70, 71, 74, 93, 95, 98, 100, 107, 109, 115, 119, 121, 122, 123, 124, 142, 149, 152, 153, 154, 155, 156, 157, 162, 164, 166, 167, 168, 175, 176, 179, 184, 195, 197, 198, 203, 205, 210, 211, 213, 215, 216, 218, 227, 229, 232, 236, 238, 247, 255, 257, 258, 259, 260, 265, 266, 271, 277, 293, 299, 307, 308, 310, 311, 320, 324, 325, 326, 327, 328, 329, 333, 335, 337, 340, 341, 346, 351, 355, 356, 358, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 378, 379, 380, 383, 386, 390, 392, 393, 394, 395, 397, 398, 400, 401, 403, 404, 418, 421, 424, 425, 426, 427, 428, 430, 432, 434, 437, 438, 439, 440, 441, 444, 445, 449, 451, 452, 454, 458, 468, 469, 471, 472, 475, 477, 483, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 552, 555, 562, 563, 569, 570, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 585, 588, 589, 590, 591, 592, 596, 598, 600, 601, 603, 604, 608, 609, 612, 613, 614, 615, 616, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 674, 675, 679, 680, 681, 683, 684, 685, 687, 692, 693, 697, 700, 702, 703, 704, 708, 712, 714, 715, 718, 720, 721, 722, 730, 735, 737, 741, 742, 743, 745, 748, 751, 754, 758, 759, 760, 761, 762, 763, 765, 769, 770, 771, 772, 774, 775, 776, 777, 779, 780, 781, 782, 783, 788, 789, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 848, 849, 851, 855, 856, 857, 858, 859, 862, 864, 867, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 896, 905, 907, 908, 909, 914, 915, 928, 929, 930, 932, 933, 936, 937, 946, 951, 952, 953, 955, 957, 959, 960, 963, 965, 966, 967, 968, 969, 970, 972, 975, 976, 978, 982, 983, 984, 988, 991, 992, 993, 997, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "abl": [4, 5, 9, 24, 47, 60, 81, 85, 99, 100, 126, 155, 167, 186, 197, 213, 215, 222, 263, 268, 327, 351, 355, 356, 357, 362, 366, 368, 369, 371, 372, 378, 394, 396, 400, 465, 483, 514, 804, 851, 951, 952, 958, 961, 962, 963, 968, 972, 975, 978, 979, 983, 988, 996, 997, 1010, 1011, 1015], "gbrt_predict": 4, "one_hot_poly_predict": 4, "cyclic_spline_poly_predict": 4, "grow": [4, 39, 173, 279, 335, 342, 355, 388, 394, 400, 533, 534, 535, 536, 537, 538, 539, 540, 543, 544, 545, 546, 787, 819, 820, 886, 887, 888, 889, 951, 962, 965, 978, 986, 991, 995, 1007, 1008], "depth": [4, 109, 115, 119, 123, 125, 130, 345, 347, 348, 349, 355, 366, 368, 371, 379, 399, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 819, 820, 824, 886, 887, 888, 889, 890, 892, 920, 967, 968, 978, 1006, 1007, 1015], "accuraci": [4, 6, 7, 8, 16, 25, 30, 31, 32, 33, 69, 70, 71, 72, 110, 116, 120, 121, 127, 142, 143, 145, 150, 170, 173, 197, 205, 212, 213, 244, 255, 256, 257, 258, 259, 261, 263, 272, 279, 285, 286, 287, 296, 301, 304, 315, 316, 318, 327, 330, 351, 355, 369, 379, 380, 391, 392, 396, 399, 400, 401, 409, 418, 429, 449, 451, 452, 458, 512, 514, 521, 529, 530, 531, 533, 535, 537, 538, 539, 541, 544, 545, 547, 549, 591, 615, 639, 640, 647, 649, 652, 655, 656, 657, 673, 678, 684, 689, 694, 699, 714, 718, 723, 734, 743, 767, 772, 774, 803, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 821, 826, 828, 829, 836, 873, 874, 878, 880, 883, 886, 888, 914, 915, 951, 956, 957, 958, 959, 963, 965, 966, 970, 974, 976, 978, 992, 997, 1012, 1013], "On": [4, 12, 17, 26, 66, 70, 71, 84, 85, 100, 109, 113, 115, 116, 117, 122, 125, 126, 129, 132, 141, 143, 153, 154, 167, 168, 169, 178, 185, 186, 199, 227, 228, 229, 230, 232, 236, 237, 238, 239, 242, 244, 247, 252, 253, 254, 255, 257, 258, 259, 260, 262, 264, 269, 296, 299, 301, 303, 304, 308, 309, 311, 312, 317, 327, 349, 355, 366, 369, 371, 378, 380, 386, 390, 392, 396, 397, 399, 401, 402, 624, 637, 672, 715, 741, 951, 955, 958, 961, 962, 964, 968, 975, 977, 992, 995], "contrari": [4, 13, 167, 219, 223, 242, 260, 299, 340, 362, 392, 476, 524, 587, 794, 958, 964, 968], "significantli": [4, 24, 25, 37, 77, 78, 120, 146, 167, 168, 169, 197, 205, 213, 215, 257, 277, 308, 309, 341, 342, 351, 356, 392, 397, 399, 400, 405, 449, 454, 459, 460, 518, 520, 527, 538, 545, 627, 628, 633, 634, 641, 642, 643, 644, 665, 673, 819, 820, 954, 958, 959, 965, 970, 977, 1004, 1006, 1007, 1011, 1012, 1017, 1018, 1019], "over": [4, 7, 8, 9, 16, 24, 26, 27, 31, 37, 50, 55, 71, 73, 95, 113, 125, 141, 145, 149, 157, 161, 166, 168, 179, 191, 197, 205, 215, 226, 257, 258, 260, 262, 264, 265, 266, 269, 282, 290, 293, 294, 301, 310, 311, 315, 340, 341, 355, 356, 357, 363, 364, 367, 368, 369, 373, 379, 380, 388, 390, 391, 392, 393, 396, 397, 398, 399, 400, 402, 404, 429, 444, 452, 489, 513, 514, 516, 517, 518, 519, 526, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 562, 563, 569, 570, 572, 575, 583, 613, 614, 615, 625, 626, 627, 628, 633, 634, 639, 641, 642, 643, 644, 646, 647, 648, 649, 657, 658, 659, 666, 667, 678, 697, 699, 719, 743, 768, 771, 775, 777, 780, 781, 783, 788, 789, 791, 800, 801, 802, 803, 804, 806, 835, 836, 837, 838, 854, 858, 878, 895, 904, 930, 951, 958, 959, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 975, 976, 977, 978, 982, 983, 986, 993, 996, 1004, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1017], "compet": 4, "access": [4, 49, 77, 243, 248, 340, 349, 355, 356, 368, 369, 375, 378, 380, 381, 392, 394, 395, 399, 400, 402, 430, 437, 444, 516, 547, 548, 549, 550, 598, 680, 837, 838, 839, 893, 923, 958, 961, 962, 968, 969, 970, 976, 977, 983, 986, 988, 996, 997, 1004, 1006, 1010, 1011, 1012, 1013, 1016, 1018, 1019, 1020], "requir": [4, 7, 13, 25, 45, 46, 48, 53, 56, 57, 66, 69, 89, 99, 101, 102, 115, 119, 123, 125, 129, 146, 168, 186, 194, 197, 215, 218, 220, 227, 230, 239, 258, 266, 268, 277, 279, 299, 304, 309, 310, 340, 341, 342, 362, 365, 366, 368, 369, 371, 373, 375, 378, 380, 381, 383, 391, 392, 393, 394, 396, 397, 399, 400, 401, 402, 403, 409, 418, 419, 420, 425, 430, 432, 437, 442, 444, 447, 449, 462, 463, 464, 476, 488, 501, 504, 515, 521, 529, 530, 531, 533, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 552, 559, 561, 562, 591, 592, 600, 608, 613, 614, 615, 624, 639, 640, 647, 649, 652, 655, 656, 657, 658, 659, 667, 670, 672, 673, 674, 676, 680, 704, 709, 710, 722, 727, 729, 732, 743, 764, 767, 777, 780, 781, 784, 786, 791, 802, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 829, 830, 831, 836, 839, 840, 841, 843, 853, 854, 855, 857, 859, 866, 870, 871, 873, 874, 878, 879, 880, 883, 886, 887, 888, 889, 928, 948, 951, 956, 957, 958, 959, 962, 963, 964, 965, 966, 968, 969, 972, 976, 977, 978, 983, 988, 995, 997, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "geograph": [4, 11, 290, 363, 478], "repartit": 4, "immobil": 4, "quant": 4, "ncol": [4, 5, 32, 53, 56, 65, 95, 100, 106, 168, 197, 198, 199, 205, 215, 218, 219, 229, 253, 259, 260, 268, 277, 294, 300, 301, 303, 304, 312, 334, 335, 341], "sharei": [4, 74, 91, 100, 106, 130, 158, 168, 197, 199, 205, 259, 268, 282, 300, 334, 335, 341], "pred": [4, 7, 11, 32, 336, 340, 363, 629, 650, 661, 678, 683, 687, 699, 709, 710, 718, 763, 764, 767, 768, 962], "zip": [4, 5, 8, 12, 24, 26, 31, 32, 37, 38, 40, 42, 45, 49, 62, 63, 64, 74, 85, 91, 95, 96, 99, 104, 105, 106, 110, 112, 114, 129, 130, 155, 161, 164, 167, 168, 169, 182, 188, 189, 197, 205, 206, 218, 230, 243, 247, 248, 255, 259, 260, 261, 264, 266, 277, 282, 285, 293, 294, 295, 301, 303, 304, 319, 324, 335, 336, 346, 366, 399, 803, 997, 1000], "perfect": [4, 26, 37, 69, 80, 98, 100, 193, 197, 340, 341, 368, 371, 392, 396, 533, 534, 671, 675, 685, 686, 689, 698, 706, 708, 711, 717, 723, 736, 737, 765, 766, 773, 958, 962, 965, 977, 986, 995, 1018], "xlim": [4, 9, 12, 26, 34, 44, 57, 61, 72, 77, 78, 79, 89, 97, 110, 112, 113, 114, 128, 135, 150, 151, 167, 176, 187, 189, 196, 203, 206, 211, 226, 233, 243, 248, 252, 267, 271, 283, 284, 326, 331, 332, 336, 348], "ylim": [4, 9, 12, 24, 26, 33, 34, 37, 44, 57, 61, 77, 78, 79, 89, 97, 110, 112, 113, 119, 120, 122, 128, 131, 136, 150, 151, 167, 184, 186, 187, 189, 190, 191, 203, 206, 207, 211, 226, 233, 243, 248, 252, 256, 260, 267, 270, 271, 272, 283, 284, 326, 331, 332, 336, 340, 348], "showseem": [4, 9, 46, 122, 168, 197, 222, 226, 258, 294, 303, 340, 341, 367, 368, 372, 396, 481, 958, 962], "regim": [4, 380, 878, 879, 961], "overal": [4, 43, 48, 113, 129, 154, 215, 254, 277, 304, 341, 355, 367, 368, 373, 389, 390, 399, 402, 427, 429, 444, 451, 452, 458, 529, 959, 962, 978, 986, 1014], "closer": [4, 27, 37, 98, 100, 128, 149, 168, 176, 342, 390, 392, 397, 429, 533, 609, 693, 821, 822, 827, 829, 830, 831, 977, 1011], "diagon": [4, 25, 40, 81, 84, 215, 235, 244, 247, 248, 251, 327, 389, 392, 394, 402, 433, 458, 461, 491, 493, 507, 512, 530, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 631, 632, 635, 636, 637, 663, 664, 682, 696, 770, 775, 776, 823, 831, 956, 958, 961, 962, 965, 972, 1010, 1012, 1013, 1014], "obtain": [4, 7, 9, 12, 27, 48, 56, 57, 70, 73, 74, 100, 103, 119, 122, 123, 127, 135, 146, 151, 153, 167, 168, 197, 199, 211, 222, 242, 243, 244, 253, 257, 258, 259, 263, 266, 304, 310, 325, 341, 342, 349, 351, 363, 365, 378, 380, 386, 390, 392, 394, 395, 397, 399, 400, 401, 402, 418, 423, 449, 476, 512, 513, 535, 536, 537, 538, 539, 540, 543, 544, 545, 574, 587, 595, 626, 640, 642, 647, 649, 653, 655, 657, 658, 668, 689, 693, 706, 719, 736, 771, 783, 804, 807, 808, 811, 825, 836, 856, 867, 880, 883, 886, 887, 915, 952, 954, 956, 958, 959, 961, 962, 963, 965, 966, 968, 969, 972, 976, 977, 1010, 1012, 1015, 1017, 1018, 1019], "slightli": [4, 25, 63, 81, 113, 119, 122, 125, 129, 146, 149, 150, 151, 169, 176, 197, 221, 223, 265, 277, 307, 324, 342, 367, 368, 378, 390, 392, 399, 400, 402, 404, 569, 570, 572, 619, 639, 780, 781, 878, 880, 883, 914, 915, 951, 958, 972, 976, 977, 1013, 1017, 1018], "cost": [4, 39, 98, 149, 164, 173, 218, 231, 259, 266, 307, 327, 341, 342, 344, 350, 368, 373, 375, 378, 390, 392, 399, 458, 480, 517, 518, 519, 526, 537, 538, 539, 540, 544, 545, 583, 591, 600, 608, 627, 628, 633, 634, 641, 642, 643, 644, 649, 653, 655, 657, 659, 668, 669, 673, 805, 878, 879, 880, 883, 886, 887, 888, 889, 915, 954, 958, 959, 962, 965, 975, 976, 977, 984, 999, 1010, 1013, 1014], "durat": [4, 8, 197, 215, 279, 342, 356, 928, 929, 958], "regressor": [4, 74, 85, 123, 128, 129, 132, 149, 154, 162, 164, 167, 175, 177, 179, 197, 200, 214, 215, 216, 308, 309, 355, 368, 369, 378, 380, 390, 393, 402, 413, 417, 445, 462, 463, 464, 465, 504, 531, 532, 533, 534, 535, 536, 537, 538, 540, 542, 545, 546, 547, 548, 549, 550, 586, 587, 590, 592, 613, 614, 616, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 648, 650, 651, 653, 654, 659, 660, 682, 807, 808, 811, 812, 813, 822, 830, 835, 836, 837, 840, 846, 854, 859, 879, 881, 884, 886, 887, 888, 889, 892, 907, 909, 951, 952, 958, 962, 963, 965, 970, 976, 984, 992, 999, 1004, 1005, 1009, 1010, 1011, 1013, 1014, 1017, 1018, 1019], "mlpregressor": [4, 168, 236, 357, 835, 836, 966, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "hidden": [4, 168, 295, 296, 375, 389, 397, 835, 836, 837, 966, 967, 982, 1004, 1015], "layer": [4, 164, 168, 213, 236, 292, 295, 296, 297, 355, 375, 399, 494, 495, 502, 547, 805, 835, 836, 837, 840, 859, 967, 984, 999, 1010], "cyclic": [4, 627, 628, 633, 634, 641, 642, 643, 644, 1016], "within": [4, 59, 115, 116, 117, 128, 143, 145, 146, 193, 198, 199, 209, 215, 236, 255, 256, 260, 270, 299, 300, 309, 325, 328, 335, 342, 351, 355, 363, 368, 371, 376, 378, 380, 381, 389, 392, 393, 396, 398, 399, 403, 425, 428, 441, 443, 444, 449, 454, 495, 529, 547, 548, 549, 550, 574, 575, 613, 673, 677, 680, 691, 705, 761, 775, 776, 782, 783, 795, 796, 803, 804, 819, 820, 821, 822, 827, 829, 830, 831, 838, 839, 840, 852, 863, 864, 866, 867, 868, 869, 880, 881, 882, 883, 884, 886, 887, 888, 889, 951, 956, 958, 959, 965, 968, 972, 975, 977, 978, 983, 986, 988, 992, 995, 997, 1006, 1007, 1011, 1012, 1017, 1018], "finer": [4, 37, 279, 327, 356, 392, 396, 951, 965, 1014], "resolut": [4, 11, 17, 105, 168, 289, 290, 327, 381, 988, 1014], "taken": [4, 7, 31, 42, 53, 124, 154, 167, 230, 231, 245, 263, 301, 363, 365, 367, 368, 371, 380, 386, 391, 392, 396, 400, 402, 404, 421, 513, 564, 565, 627, 628, 631, 633, 634, 635, 639, 640, 641, 642, 643, 644, 658, 660, 662, 665, 676, 852, 853, 872, 875, 881, 882, 962, 964, 972, 974, 1010, 1013, 1016, 1017], "everi": [4, 95, 161, 195, 198, 219, 232, 243, 248, 266, 310, 351, 363, 366, 368, 369, 371, 375, 380, 381, 392, 394, 396, 397, 400, 421, 434, 488, 511, 516, 519, 525, 537, 539, 540, 544, 571, 572, 584, 627, 628, 630, 633, 634, 640, 641, 642, 643, 644, 645, 646, 647, 649, 653, 654, 655, 656, 657, 666, 667, 668, 673, 677, 734, 751, 759, 760, 790, 828, 886, 888, 890, 892, 904, 955, 957, 962, 963, 964, 972, 978, 986, 992, 1004, 1008, 1010, 1013, 1017], "offer": [4, 369, 375, 378, 379, 383, 396, 397, 399, 400, 951, 952, 963, 966, 978, 982, 983, 986, 1010], "view": [4, 16, 30, 42, 46, 77, 97, 168, 194, 199, 237, 355, 357, 368, 392, 400, 516, 626, 638, 819, 820, 893, 958, 959], "gaussian": [4, 5, 9, 27, 30, 31, 34, 44, 46, 47, 56, 60, 77, 78, 79, 80, 81, 90, 96, 97, 98, 105, 111, 112, 122, 125, 159, 162, 176, 187, 226, 230, 244, 245, 249, 282, 290, 303, 324, 358, 360, 364, 369, 372, 380, 392, 394, 397, 398, 404, 432, 449, 450, 451, 452, 453, 454, 455, 456, 476, 484, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 505, 510, 512, 524, 529, 530, 543, 591, 592, 594, 595, 596, 598, 599, 600, 603, 604, 606, 608, 624, 625, 653, 658, 661, 684, 704, 721, 732, 756, 775, 776, 777, 791, 814, 815, 816, 817, 818, 819, 820, 824, 855, 859, 866, 870, 871, 872, 956, 958, 959, 960, 968, 984, 986, 996, 998, 999, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1014, 1016, 1018], "random": [4, 5, 6, 7, 11, 12, 13, 20, 21, 24, 25, 26, 27, 31, 33, 34, 37, 39, 40, 44, 45, 48, 50, 52, 54, 56, 57, 59, 60, 61, 63, 64, 65, 70, 74, 77, 78, 79, 80, 81, 84, 85, 91, 96, 97, 98, 101, 102, 103, 108, 111, 113, 115, 116, 117, 118, 121, 122, 124, 125, 126, 129, 132, 133, 138, 141, 142, 145, 149, 150, 153, 155, 156, 158, 161, 162, 164, 165, 166, 171, 176, 177, 178, 179, 181, 186, 187, 191, 192, 195, 196, 197, 198, 199, 200, 203, 204, 206, 210, 211, 214, 215, 218, 219, 221, 222, 223, 225, 226, 231, 232, 234, 235, 240, 242, 243, 245, 246, 247, 248, 250, 252, 254, 257, 258, 260, 262, 264, 266, 267, 268, 269, 271, 273, 275, 277, 282, 283, 284, 289, 293, 300, 302, 303, 308, 309, 311, 315, 316, 319, 320, 326, 327, 329, 330, 332, 333, 334, 335, 337, 340, 341, 347, 348, 355, 356, 358, 360, 364, 370, 372, 378, 379, 380, 387, 390, 392, 400, 401, 415, 421, 424, 427, 429, 431, 432, 433, 434, 438, 439, 440, 442, 444, 449, 450, 451, 452, 453, 454, 455, 456, 468, 469, 471, 472, 475, 476, 477, 482, 483, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 515, 516, 518, 519, 520, 521, 524, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 553, 563, 564, 565, 570, 588, 589, 591, 592, 608, 611, 613, 615, 620, 621, 622, 623, 624, 627, 628, 630, 631, 633, 634, 635, 639, 641, 642, 643, 644, 651, 652, 653, 657, 658, 659, 660, 670, 671, 672, 673, 674, 675, 676, 682, 685, 686, 689, 711, 723, 761, 771, 775, 776, 777, 779, 780, 781, 782, 789, 791, 792, 793, 794, 795, 796, 797, 798, 804, 805, 810, 812, 813, 814, 815, 816, 818, 819, 820, 824, 828, 835, 836, 837, 839, 842, 844, 853, 856, 867, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 901, 914, 915, 933, 936, 952, 954, 957, 959, 961, 962, 966, 967, 968, 970, 972, 977, 978, 982, 983, 984, 988, 992, 993, 995, 996, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "constant": [4, 105, 113, 152, 156, 162, 167, 185, 198, 199, 201, 215, 228, 237, 260, 289, 294, 296, 300, 302, 308, 335, 337, 351, 360, 369, 376, 380, 389, 399, 402, 413, 445, 462, 463, 464, 491, 493, 514, 518, 520, 527, 529, 530, 531, 532, 534, 536, 538, 540, 542, 545, 548, 550, 571, 587, 590, 592, 594, 608, 611, 613, 614, 616, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 657, 658, 659, 660, 661, 668, 670, 674, 676, 702, 703, 704, 708, 755, 757, 765, 812, 813, 822, 830, 836, 837, 844, 855, 858, 866, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 956, 958, 959, 962, 964, 965, 972, 976, 978, 999, 1007, 1012, 1014, 1016, 1017, 1018], "varianc": [4, 5, 27, 44, 56, 61, 72, 77, 79, 84, 85, 95, 96, 97, 100, 103, 104, 106, 108, 124, 133, 156, 158, 164, 167, 175, 177, 186, 197, 199, 202, 215, 216, 247, 254, 257, 260, 266, 267, 270, 286, 293, 299, 304, 341, 351, 360, 364, 376, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 402, 404, 422, 426, 429, 443, 501, 504, 512, 513, 514, 521, 524, 529, 530, 535, 536, 538, 539, 540, 545, 584, 588, 589, 592, 606, 624, 625, 626, 633, 637, 638, 641, 643, 653, 654, 655, 656, 657, 668, 691, 708, 765, 775, 776, 817, 828, 843, 849, 855, 857, 859, 864, 866, 868, 869, 887, 889, 937, 938, 939, 943, 956, 957, 958, 960, 965, 966, 967, 974, 976, 977, 978, 979, 984, 993, 995, 996, 999, 1004, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "poisson": [4, 164, 175, 216, 233, 364, 399, 444, 445, 476, 503, 532, 538, 542, 545, 629, 650, 653, 661, 687, 704, 725, 729, 730, 732, 805, 839, 840, 843, 844, 852, 853, 854, 859, 887, 889, 919, 958, 978, 1014, 1015, 1016, 1017, 1018], "gamma": [4, 5, 6, 7, 9, 11, 16, 31, 32, 100, 130, 138, 173, 211, 226, 231, 232, 255, 257, 259, 262, 268, 272, 309, 315, 316, 318, 320, 324, 326, 327, 330, 331, 333, 334, 337, 395, 397, 402, 432, 515, 542, 600, 601, 620, 621, 622, 624, 625, 626, 629, 661, 666, 672, 704, 727, 732, 739, 746, 755, 756, 757, 775, 788, 791, 873, 874, 875, 880, 881, 882, 883, 884, 951, 954, 957, 958, 960, 975, 977, 988, 992, 993, 995, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1018, 1019, 1020], "achiev": [4, 12, 17, 19, 27, 31, 98, 110, 118, 120, 127, 157, 173, 197, 205, 254, 257, 264, 304, 318, 327, 330, 335, 340, 351, 355, 357, 362, 363, 365, 369, 373, 378, 380, 389, 390, 392, 396, 397, 399, 400, 533, 538, 545, 621, 630, 657, 659, 688, 720, 743, 780, 781, 815, 859, 951, 952, 954, 958, 962, 972, 975, 977, 985, 997, 1017], "gridsearchcv": [4, 54, 68, 70, 72, 73, 75, 77, 103, 164, 232, 237, 247, 250, 255, 256, 257, 258, 262, 265, 268, 273, 279, 281, 296, 301, 309, 327, 351, 356, 369, 378, 380, 393, 396, 482, 500, 520, 521, 555, 580, 588, 634, 684, 722, 788, 791, 839, 849, 878, 886, 951, 958, 962, 966, 976, 977, 982, 983, 992, 993, 997, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019], "tweedieregressor": [4, 308, 311, 629, 650, 958, 1015, 1018, 1019], "power": [4, 7, 17, 120, 166, 198, 215, 248, 260, 265, 281, 299, 300, 303, 315, 324, 355, 356, 379, 390, 392, 395, 398, 399, 400, 403, 425, 462, 463, 464, 512, 515, 521, 524, 611, 661, 675, 680, 704, 727, 729, 732, 821, 822, 829, 830, 832, 833, 854, 855, 856, 866, 867, 914, 915, 958, 959, 962, 970, 972, 976, 977, 986, 1007, 1010, 1012, 1014, 1015, 1017], "param_grid": [4, 6, 70, 71, 72, 73, 122, 232, 237, 247, 255, 256, 257, 261, 262, 265, 268, 279, 301, 327, 380, 393, 399, 722, 777, 780, 788, 789, 951, 962, 992, 993], "total": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 346, 347, 348, 349, 350, 356, 362, 363, 365, 373, 380, 389, 392, 398, 400, 403, 413, 425, 445, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 477, 480, 481, 482, 484, 485, 490, 492, 494, 495, 499, 502, 503, 516, 517, 524, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 548, 550, 564, 565, 571, 575, 577, 592, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 657, 658, 659, 660, 678, 685, 686, 694, 709, 710, 711, 714, 718, 719, 737, 749, 763, 764, 767, 772, 773, 774, 777, 791, 800, 801, 802, 812, 813, 814, 815, 822, 824, 830, 837, 854, 858, 879, 881, 884, 886, 887, 888, 889, 915, 951, 958, 959, 962, 963, 964, 965, 972, 976, 977, 978, 993, 997, 1005, 1010, 1012, 1020], "script": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 351, 356, 368, 369, 370, 371, 373, 378, 380, 383, 400, 983, 985, 997], "secondplot_cyclical_feature_engin": [4, 15], "py": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 356, 366, 368, 371, 373, 375, 380, 383, 400, 403, 421, 425, 434, 441, 445, 478, 510, 625, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 848, 849, 851, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 869, 910, 962, 982, 995, 997, 1004, 1006, 1010, 1014, 1018], "jupyt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 393, 448, 876, 978, 982, 983, 1015, 1018], "ipynb": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349], "galleri": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 363, 368, 369, 380, 383, 385, 993, 1004, 1008, 1011], "sphinx": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 349, 368, 371, 380, 383, 385, 997, 1004, 1011], "kernelpca": [5, 393, 397, 513, 514, 521, 524, 669, 671, 673, 845, 972, 1005, 1006, 1010, 1013, 1014, 1015, 1016, 1017, 1018], "take": [5, 8, 27, 30, 46, 53, 56, 65, 74, 79, 89, 91, 95, 110, 118, 149, 151, 154, 158, 167, 173, 180, 205, 206, 222, 244, 245, 252, 258, 262, 266, 267, 275, 277, 280, 283, 284, 285, 287, 288, 299, 311, 318, 323, 324, 327, 337, 341, 342, 346, 355, 356, 357, 362, 363, 366, 368, 369, 372, 373, 374, 375, 378, 380, 381, 390, 392, 393, 395, 396, 397, 399, 400, 401, 402, 404, 418, 424, 427, 429, 430, 432, 437, 438, 439, 441, 443, 449, 499, 513, 518, 519, 520, 526, 527, 562, 573, 576, 577, 579, 580, 581, 591, 592, 597, 601, 602, 605, 613, 624, 630, 652, 654, 655, 656, 657, 660, 672, 673, 680, 686, 688, 690, 700, 709, 710, 718, 722, 723, 736, 751, 754, 758, 759, 760, 761, 763, 764, 767, 768, 777, 778, 782, 783, 791, 795, 803, 821, 822, 823, 825, 827, 828, 829, 830, 831, 843, 873, 874, 878, 879, 880, 881, 882, 883, 884, 902, 932, 951, 954, 958, 959, 961, 962, 963, 965, 967, 968, 969, 972, 977, 978, 986, 988, 992, 994, 1001, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "exact": [5, 7, 81, 100, 154, 201, 231, 277, 351, 355, 356, 362, 368, 369, 376, 378, 379, 380, 392, 401, 402, 415, 462, 463, 464, 468, 476, 514, 515, 521, 541, 542, 619, 623, 627, 673, 777, 791, 800, 801, 802, 880, 883, 951, 954, 958, 959, 968, 972, 976, 977, 1011, 1012, 1014], "usp": 5, "digit": [5, 29, 35, 36, 51, 67, 71, 87, 92, 134, 139, 144, 164, 188, 204, 213, 217, 222, 224, 230, 231, 255, 256, 259, 281, 286, 292, 294, 295, 297, 314, 321, 361, 368, 373, 392, 398, 399, 401, 422, 426, 427, 482, 521, 524, 529, 546, 639, 669, 670, 671, 672, 673, 685, 686, 694, 698, 699, 717, 771, 773, 801, 805, 821, 828, 835, 839, 840, 849, 859, 864, 871, 874, 883, 890, 891, 892, 951, 957, 959, 962, 965, 967, 975, 988, 992, 995, 996, 999, 1008], "reproduc": [5, 12, 59, 110, 167, 173, 185, 266, 296, 356, 358, 367, 368, 369, 370, 375, 378, 380, 386, 392, 396, 397, 400, 404, 420, 421, 434, 440, 449, 454, 468, 471, 472, 475, 477, 483, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 531, 533, 534, 535, 536, 539, 540, 541, 542, 543, 588, 589, 591, 592, 615, 620, 621, 622, 623, 627, 628, 631, 633, 634, 635, 641, 642, 643, 644, 647, 648, 649, 652, 657, 659, 660, 670, 671, 673, 674, 675, 771, 775, 776, 779, 780, 781, 782, 783, 789, 791, 792, 793, 794, 795, 796, 797, 803, 804, 805, 809, 810, 813, 824, 828, 835, 836, 837, 844, 856, 867, 870, 871, 878, 879, 880, 883, 914, 915, 933, 936, 954, 982, 985, 1004, 1012, 1017, 1018], "sect": 5, "bak\u0131r": [5, 397, 515], "g\u00f6khan": [5, 397, 515], "h": [5, 6, 48, 57, 95, 96, 109, 110, 111, 127, 151, 167, 244, 282, 285, 293, 301, 311, 320, 323, 342, 365, 373, 392, 394, 397, 398, 399, 400, 403, 425, 499, 512, 515, 518, 520, 527, 533, 547, 548, 563, 571, 588, 589, 670, 674, 685, 689, 737, 814, 818, 819, 820, 825, 835, 850, 859, 954, 956, 958, 959, 960, 962, 964, 966, 967, 976, 978, 993, 1010, 1015], "jason": [5, 397, 515, 874, 1010, 1012, 1016, 1019], "weston": [5, 397, 515, 574, 575, 874], "bernhard": [5, 397, 515, 810, 845, 874, 963, 968, 977, 1010], "sch\u00f6lkopf": [5, 397, 515, 845, 968, 972, 977], "pre": [5, 70, 119, 167, 186, 299, 342, 358, 366, 368, 380, 383, 394, 396, 397, 399, 400, 401, 403, 404, 424, 425, 427, 439, 513, 515, 671, 693, 743, 842, 883, 962, 967, 972, 977, 978, 982, 983, 999, 1007, 1012, 1018], "advanc": [5, 164, 225, 227, 240, 257, 357, 392, 397, 469, 481, 515, 613, 620, 763, 775, 828, 837, 840, 859, 887, 954, 965, 972, 986, 1001, 1006], "neural": [5, 6, 31, 257, 295, 358, 378, 380, 386, 396, 397, 399, 404, 513, 515, 518, 520, 527, 547, 548, 620, 626, 677, 721, 775, 828, 835, 836, 837, 845, 954, 958, 959, 960, 962, 965, 968, 972, 976, 978, 982, 984, 986, 993, 998, 999, 1004, 1016], "system": [5, 100, 257, 264, 351, 355, 356, 357, 363, 365, 368, 369, 370, 375, 378, 383, 392, 397, 399, 403, 425, 458, 515, 519, 523, 530, 620, 626, 631, 632, 635, 636, 637, 663, 664, 706, 736, 749, 775, 828, 873, 874, 930, 958, 962, 965, 974, 982, 983, 986, 997, 1004, 1012, 1013], "2004": [5, 146, 257, 363, 365, 392, 394, 397, 453, 515, 588, 589, 670, 674, 686, 723, 763, 874, 956, 958, 959, 964, 977, 995], "449": [5, 397, 515], "456": [5, 67, 397, 515], "author": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 32, 37, 39, 40, 42, 46, 47, 48, 52, 53, 54, 55, 56, 60, 64, 65, 66, 69, 70, 71, 73, 74, 81, 95, 97, 99, 100, 101, 103, 106, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 173, 176, 177, 179, 182, 184, 185, 186, 188, 189, 190, 191, 197, 198, 199, 201, 202, 204, 205, 212, 213, 214, 215, 218, 219, 220, 221, 223, 226, 229, 231, 232, 233, 235, 242, 244, 245, 256, 258, 260, 261, 263, 270, 275, 277, 279, 282, 289, 290, 293, 296, 299, 300, 302, 303, 304, 315, 316, 317, 318, 320, 335, 340, 341, 342, 362, 368, 371, 375, 378, 380, 381, 396, 431, 514, 846, 954, 980, 982, 1007], "fr": [5, 7, 8, 9, 10, 24, 25, 30, 37, 42, 54, 56, 74, 81, 155, 176, 182, 184, 188, 190, 191, 202, 219, 220, 226, 229, 258, 260, 263, 270, 289, 304, 335, 340, 341, 342, 511, 517, 639, 645, 666, 667, 738, 739, 960, 962], "licenc": [5, 362], "bsd": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 56, 60, 64, 65, 66, 69, 70, 72, 73, 74, 81, 88, 89, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 173, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 202, 204, 205, 213, 214, 215, 219, 220, 221, 223, 226, 229, 231, 232, 233, 235, 242, 244, 258, 261, 263, 270, 275, 277, 279, 285, 286, 287, 289, 290, 293, 296, 299, 300, 301, 302, 303, 304, 315, 316, 317, 318, 320, 331, 332, 335, 336, 340, 341, 342, 373], "claus": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 25, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 56, 60, 64, 65, 66, 69, 70, 72, 73, 74, 81, 88, 89, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 173, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 202, 204, 205, 213, 214, 215, 219, 220, 226, 231, 232, 233, 235, 242, 244, 258, 263, 270, 275, 277, 279, 285, 286, 287, 289, 290, 293, 299, 300, 301, 302, 303, 304, 331, 332, 335, 336, 340, 341, 342], "normal": [5, 12, 17, 19, 26, 29, 34, 35, 37, 40, 44, 46, 56, 60, 61, 65, 72, 74, 77, 78, 79, 84, 85, 96, 101, 110, 111, 113, 121, 122, 125, 126, 141, 152, 155, 156, 162, 164, 166, 167, 175, 176, 177, 178, 179, 181, 187, 190, 192, 195, 199, 200, 201, 203, 211, 216, 221, 235, 242, 247, 248, 251, 254, 257, 263, 282, 283, 298, 300, 304, 305, 308, 311, 318, 327, 341, 342, 351, 358, 360, 363, 364, 365, 368, 372, 376, 379, 380, 389, 390, 392, 393, 395, 398, 399, 400, 404, 420, 421, 429, 431, 432, 433, 442, 444, 445, 455, 462, 463, 464, 469, 476, 492, 495, 499, 506, 507, 513, 516, 521, 522, 524, 528, 529, 532, 533, 534, 537, 538, 539, 540, 542, 543, 544, 545, 546, 559, 560, 561, 563, 569, 570, 571, 572, 592, 606, 608, 620, 631, 632, 635, 636, 637, 639, 640, 645, 646, 650, 653, 657, 661, 668, 672, 676, 678, 684, 685, 687, 699, 704, 706, 714, 716, 721, 725, 729, 730, 732, 735, 736, 737, 741, 750, 772, 773, 774, 780, 781, 805, 807, 816, 818, 824, 825, 828, 839, 840, 843, 844, 847, 848, 849, 852, 853, 854, 855, 856, 857, 859, 863, 864, 866, 867, 868, 869, 873, 874, 886, 887, 888, 889, 914, 915, 919, 938, 939, 944, 945, 951, 956, 958, 959, 960, 961, 964, 968, 973, 975, 977, 978, 993, 995, 996, 997, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "pixel": [5, 6, 13, 32, 47, 48, 53, 95, 108, 133, 144, 164, 173, 230, 255, 295, 296, 365, 392, 397, 399, 400, 401, 473, 474, 475, 544, 566, 567, 588, 589, 615, 965, 967, 978, 993, 996], "train_test_split": [5, 6, 7, 10, 24, 25, 27, 31, 32, 70, 74, 85, 100, 109, 115, 116, 120, 121, 122, 123, 124, 125, 128, 142, 143, 166, 167, 169, 170, 173, 192, 197, 204, 205, 212, 213, 215, 227, 238, 239, 251, 254, 255, 260, 264, 266, 270, 275, 285, 286, 293, 295, 296, 301, 303, 304, 307, 308, 309, 319, 345, 349, 351, 372, 379, 393, 396, 399, 418, 419, 538, 540, 547, 548, 678, 679, 681, 683, 777, 807, 810, 828, 836, 837, 839, 888, 889, 951, 952, 962, 964, 965, 970, 972, 977, 993, 1001, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1013, 1017], "data_id": [5, 119, 154, 167, 197, 215, 227, 362, 476], "41082": 5, "return_x_i": [5, 7, 14, 57, 69, 70, 71, 72, 95, 119, 120, 132, 135, 136, 137, 142, 161, 162, 169, 173, 182, 184, 185, 186, 188, 193, 194, 204, 212, 213, 227, 234, 238, 239, 253, 256, 259, 264, 265, 272, 275, 279, 286, 294, 295, 296, 304, 307, 309, 311, 312, 318, 330, 342, 345, 361, 372, 373, 379, 386, 392, 393, 396, 399, 401, 468, 469, 470, 471, 472, 474, 475, 476, 477, 480, 481, 482, 484, 485, 490, 512, 513, 514, 515, 538, 541, 542, 547, 548, 573, 576, 577, 579, 580, 581, 583, 591, 600, 601, 603, 604, 619, 620, 639, 640, 649, 654, 655, 656, 669, 670, 671, 672, 682, 768, 780, 781, 783, 807, 812, 823, 828, 831, 887, 888, 889, 952, 957, 962, 963, 964, 965, 972, 988, 992, 993, 995, 996, 1001, 1010, 1012, 1014, 1017], "idea": [5, 53, 79, 80, 146, 154, 167, 198, 218, 282, 327, 345, 355, 356, 368, 372, 373, 394, 395, 396, 397, 398, 399, 401, 588, 589, 958, 959, 962, 965, 968, 981, 986, 997], "noisi": [5, 33, 49, 61, 96, 142, 149, 155, 196, 199, 201, 221, 229, 248, 258, 264, 266, 267, 304, 347, 348, 351, 392, 400, 403, 425, 430, 501, 504, 915, 957, 959, 965, 977, 982], "100": [5, 7, 10, 12, 16, 17, 19, 25, 27, 30, 34, 37, 42, 50, 53, 56, 60, 65, 70, 71, 74, 78, 79, 95, 97, 98, 105, 111, 125, 128, 131, 150, 154, 157, 158, 167, 168, 170, 173, 176, 177, 179, 181, 183, 187, 188, 189, 191, 196, 197, 198, 199, 206, 207, 208, 210, 212, 213, 215, 220, 221, 223, 229, 230, 231, 232, 236, 242, 244, 248, 252, 253, 255, 257, 260, 262, 267, 268, 271, 282, 283, 284, 296, 300, 301, 303, 310, 319, 320, 325, 326, 328, 329, 330, 334, 335, 337, 340, 341, 345, 348, 349, 355, 357, 363, 365, 368, 369, 372, 373, 389, 392, 393, 396, 397, 398, 399, 400, 418, 422, 426, 429, 451, 452, 458, 470, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 508, 510, 511, 514, 516, 517, 519, 524, 525, 526, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 591, 612, 613, 614, 620, 621, 622, 623, 627, 628, 629, 630, 633, 634, 639, 640, 641, 642, 643, 644, 646, 648, 650, 652, 661, 662, 665, 669, 670, 671, 672, 674, 726, 775, 776, 779, 803, 804, 809, 814, 815, 816, 818, 819, 820, 824, 836, 837, 855, 857, 868, 951, 952, 955, 959, 962, 963, 969, 972, 974, 988, 992, 996, 997, 1012, 1013, 1014, 1017, 1018], "nois": [5, 10, 13, 20, 21, 27, 31, 33, 40, 44, 49, 52, 54, 60, 61, 66, 74, 85, 95, 96, 98, 100, 103, 111, 113, 122, 126, 127, 148, 149, 154, 159, 164, 176, 178, 179, 181, 186, 187, 192, 195, 196, 199, 200, 202, 214, 221, 223, 226, 228, 229, 232, 257, 265, 270, 271, 289, 293, 294, 301, 308, 334, 347, 348, 351, 364, 369, 372, 390, 392, 397, 399, 401, 403, 425, 432, 491, 493, 494, 495, 496, 497, 498, 502, 504, 505, 510, 512, 514, 521, 588, 589, 592, 594, 595, 596, 597, 598, 602, 603, 605, 606, 625, 626, 630, 631, 632, 634, 635, 636, 637, 644, 645, 646, 652, 660, 673, 856, 867, 873, 955, 957, 958, 959, 962, 965, 975, 995, 996, 1005, 1010, 1015, 1017, 1018], "approach": [5, 8, 57, 62, 65, 99, 146, 149, 161, 167, 170, 179, 185, 197, 199, 205, 215, 218, 340, 341, 342, 357, 367, 368, 373, 376, 380, 383, 386, 390, 392, 394, 395, 396, 397, 398, 399, 400, 401, 418, 424, 428, 432, 442, 500, 512, 563, 570, 616, 639, 640, 655, 656, 808, 824, 915, 951, 952, 958, 959, 962, 963, 965, 966, 972, 976, 977, 981, 982, 986, 990, 995, 996, 1008], "copi": [5, 12, 17, 44, 61, 74, 98, 113, 161, 162, 167, 168, 169, 183, 190, 203, 213, 215, 219, 277, 315, 316, 318, 320, 341, 346, 356, 365, 368, 369, 371, 372, 373, 378, 380, 415, 418, 421, 423, 424, 425, 427, 429, 434, 439, 462, 463, 464, 465, 480, 482, 490, 512, 513, 514, 515, 521, 528, 533, 534, 539, 541, 542, 552, 571, 578, 588, 589, 591, 592, 609, 611, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 646, 652, 653, 655, 660, 662, 665, 666, 667, 712, 749, 777, 791, 819, 820, 834, 842, 845, 848, 849, 850, 851, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 868, 869, 873, 874, 878, 880, 881, 882, 883, 884, 893, 896, 898, 899, 933, 935, 936, 972, 977, 978, 983, 989, 992, 997, 1004, 1007, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "add": [5, 12, 16, 17, 25, 26, 27, 32, 33, 40, 44, 54, 74, 79, 80, 85, 96, 118, 121, 142, 146, 149, 154, 155, 156, 161, 162, 179, 181, 186, 192, 198, 200, 212, 221, 226, 230, 232, 264, 266, 267, 277, 289, 301, 303, 307, 309, 310, 330, 334, 335, 341, 355, 366, 367, 368, 369, 371, 373, 375, 380, 383, 390, 396, 399, 400, 401, 495, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 583, 608, 609, 611, 613, 639, 640, 675, 678, 798, 819, 820, 875, 905, 930, 951, 952, 961, 968, 972, 975, 976, 983, 995, 996, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "corrupt": [5, 103, 181, 203, 214, 378, 835, 958, 970], "uncorrupt": 5, "base": [5, 12, 14, 17, 25, 26, 27, 49, 55, 56, 57, 66, 69, 70, 74, 79, 95, 96, 109, 111, 121, 122, 123, 127, 129, 132, 140, 143, 147, 149, 154, 155, 157, 168, 169, 170, 186, 197, 198, 205, 214, 215, 218, 226, 233, 254, 255, 260, 277, 290, 296, 299, 300, 302, 304, 309, 311, 320, 325, 341, 345, 355, 356, 358, 362, 363, 364, 365, 366, 369, 370, 375, 380, 381, 382, 390, 393, 397, 398, 400, 402, 403, 404, 418, 425, 427, 428, 429, 430, 432, 436, 437, 441, 443, 444, 445, 446, 447, 467, 481, 488, 489, 512, 513, 515, 516, 517, 518, 519, 521, 526, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 558, 569, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 587, 588, 589, 591, 592, 597, 598, 599, 602, 605, 613, 614, 616, 617, 626, 627, 629, 631, 632, 633, 635, 636, 637, 645, 650, 652, 653, 654, 655, 656, 661, 663, 664, 666, 667, 668, 671, 673, 685, 698, 706, 715, 716, 717, 719, 721, 735, 736, 737, 773, 777, 779, 780, 781, 783, 784, 786, 791, 795, 796, 797, 803, 809, 810, 813, 821, 822, 823, 825, 827, 829, 830, 831, 836, 837, 841, 844, 851, 852, 854, 858, 867, 870, 871, 873, 874, 875, 880, 881, 882, 883, 884, 886, 887, 888, 889, 901, 909, 923, 930, 931, 951, 953, 954, 956, 957, 959, 962, 963, 964, 965, 966, 967, 968, 969, 972, 974, 975, 976, 977, 978, 981, 982, 983, 984, 986, 992, 999, 1000, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015], "solv": [5, 6, 65, 149, 186, 231, 257, 367, 368, 369, 372, 378, 392, 394, 396, 397, 402, 427, 433, 442, 458, 511, 517, 518, 519, 523, 525, 526, 527, 528, 616, 618, 627, 633, 635, 636, 645, 646, 651, 653, 655, 658, 666, 667, 668, 809, 878, 879, 882, 915, 953, 956, 958, 959, 962, 963, 976, 977, 978, 981, 982, 986, 990, 993, 997, 1010, 1014, 1017], "x_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 69, 70, 74, 77, 84, 85, 100, 109, 110, 113, 116, 120, 121, 122, 123, 124, 125, 128, 137, 138, 142, 143, 155, 156, 157, 158, 166, 167, 168, 169, 170, 173, 177, 181, 192, 194, 195, 198, 204, 205, 211, 212, 213, 215, 227, 234, 238, 239, 244, 246, 251, 254, 255, 260, 264, 266, 270, 275, 283, 285, 286, 293, 295, 296, 301, 303, 304, 307, 308, 309, 318, 319, 326, 340, 345, 349, 351, 355, 362, 369, 372, 379, 393, 396, 399, 418, 419, 489, 538, 539, 540, 547, 548, 678, 679, 681, 683, 805, 807, 810, 828, 836, 837, 839, 888, 889, 952, 962, 964, 965, 966, 968, 970, 972, 976, 977, 992, 993, 1001], "x_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 69, 70, 74, 77, 84, 85, 100, 109, 110, 113, 115, 116, 120, 121, 122, 123, 124, 125, 128, 137, 138, 142, 143, 154, 157, 166, 167, 168, 169, 170, 173, 177, 181, 187, 192, 194, 195, 203, 204, 205, 211, 212, 213, 215, 227, 229, 234, 238, 239, 244, 251, 254, 255, 260, 264, 266, 270, 271, 275, 283, 285, 286, 293, 295, 296, 301, 303, 304, 307, 308, 309, 318, 319, 326, 340, 345, 347, 348, 349, 351, 355, 362, 369, 372, 379, 393, 396, 399, 419, 450, 451, 452, 453, 454, 455, 456, 489, 538, 539, 540, 547, 548, 678, 679, 681, 683, 805, 807, 810, 828, 836, 837, 839, 888, 889, 952, 962, 964, 965, 966, 968, 972, 976, 977, 992, 993, 995, 1001, 1004], "y_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 69, 70, 74, 84, 85, 100, 109, 110, 113, 116, 120, 121, 122, 123, 124, 125, 128, 137, 138, 142, 143, 155, 156, 157, 158, 166, 167, 168, 169, 170, 173, 177, 181, 192, 194, 195, 198, 204, 205, 212, 213, 227, 234, 238, 239, 244, 251, 254, 255, 260, 264, 266, 270, 275, 285, 286, 293, 295, 296, 301, 304, 307, 308, 309, 315, 316, 318, 319, 320, 340, 345, 349, 351, 355, 362, 369, 372, 379, 393, 396, 399, 418, 419, 538, 539, 540, 547, 548, 678, 679, 681, 683, 805, 807, 810, 828, 836, 837, 839, 888, 889, 952, 962, 964, 965, 970, 972, 977, 992, 993, 1001], "y_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 69, 70, 74, 84, 85, 100, 109, 110, 113, 115, 116, 120, 121, 122, 123, 124, 125, 128, 137, 138, 142, 143, 157, 166, 167, 168, 169, 170, 173, 181, 192, 194, 197, 203, 204, 205, 212, 213, 215, 227, 234, 238, 239, 244, 251, 254, 255, 260, 264, 266, 270, 275, 285, 286, 293, 295, 296, 301, 304, 307, 308, 309, 318, 319, 340, 345, 349, 351, 362, 372, 379, 393, 396, 399, 419, 538, 539, 540, 547, 548, 678, 679, 681, 683, 805, 807, 810, 828, 836, 837, 839, 888, 889, 962, 964, 965, 972, 977, 992, 993, 1001, 1004], "stratifi": [5, 100, 116, 125, 142, 169, 212, 227, 239, 252, 257, 260, 266, 285, 286, 307, 369, 380, 531, 539, 547, 548, 583, 640, 647, 649, 657, 777, 780, 781, 783, 791, 792, 793, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 810, 813, 828, 836, 933, 962, 965, 992, 1009, 1010, 1011, 1013, 1014, 1017], "train_siz": [5, 7, 10, 128, 150, 173, 213, 232, 259, 270, 309, 312, 335, 779, 783, 794, 797, 803, 805, 957, 992, 1004, 1005, 1010, 1011], "1_000": [5, 48, 71, 100, 149, 154, 156, 168, 230, 254, 682], "rng": [5, 20, 21, 31, 37, 50, 80, 85, 95, 97, 103, 111, 122, 125, 126, 128, 149, 150, 153, 155, 156, 158, 161, 162, 166, 169, 176, 177, 178, 179, 186, 191, 198, 199, 204, 211, 226, 232, 234, 235, 242, 252, 260, 263, 268, 269, 293, 303, 308, 309, 311, 315, 316, 320, 330, 335, 347, 348, 351, 356, 369, 372, 450, 454, 455, 456, 624, 630, 651, 653, 659, 789, 814, 815, 816, 818, 819, 820, 824, 827, 829, 830, 831, 856, 867, 870, 871, 873, 874, 875, 884, 988], "randomst": [5, 13, 20, 21, 24, 31, 37, 50, 60, 80, 81, 85, 95, 97, 103, 111, 121, 122, 125, 126, 128, 142, 149, 150, 153, 155, 156, 158, 161, 162, 166, 169, 176, 177, 178, 179, 186, 191, 198, 199, 204, 211, 221, 226, 232, 235, 242, 245, 252, 260, 263, 264, 266, 267, 268, 269, 293, 300, 302, 303, 308, 309, 311, 315, 316, 320, 330, 335, 347, 348, 369, 372, 376, 380, 397, 404, 421, 424, 427, 429, 431, 432, 433, 434, 438, 439, 440, 442, 449, 450, 454, 455, 456, 468, 471, 472, 475, 477, 483, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 564, 565, 588, 589, 591, 592, 608, 613, 615, 620, 621, 622, 623, 624, 627, 628, 630, 631, 633, 634, 635, 639, 640, 641, 642, 643, 644, 647, 648, 649, 651, 652, 653, 655, 657, 658, 659, 660, 668, 670, 671, 672, 673, 674, 675, 676, 682, 761, 771, 775, 776, 779, 780, 781, 782, 783, 789, 791, 792, 793, 794, 795, 796, 797, 803, 804, 805, 809, 810, 813, 814, 815, 816, 818, 819, 820, 824, 828, 835, 836, 837, 844, 856, 867, 870, 871, 873, 874, 875, 878, 879, 880, 883, 884, 886, 887, 888, 889, 901, 914, 915, 931, 933, 936, 972, 988, 999], "x_test_noisi": 5, "x_train_noisi": 5, "helper": [5, 6, 98, 215, 268, 361, 369, 370, 379, 380, 396, 555, 992, 993, 1004, 1011, 1012, 1013, 1017], "qualit": [5, 6, 53, 60, 122, 197, 312, 363, 392, 420, 682, 993, 1019], "assess": [5, 37, 59, 120, 122, 167, 197, 215, 235, 253, 254, 256, 260, 390, 399, 682, 723, 961, 962, 968, 983, 1019], "plot_digit": 5, "small": [5, 11, 21, 27, 39, 48, 49, 53, 69, 77, 81, 85, 90, 100, 111, 113, 119, 121, 122, 154, 156, 167, 168, 177, 183, 187, 188, 198, 203, 212, 214, 215, 244, 257, 264, 269, 279, 290, 294, 296, 299, 301, 303, 309, 315, 320, 327, 332, 340, 341, 357, 361, 363, 365, 368, 370, 376, 380, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 422, 424, 426, 427, 429, 438, 439, 443, 455, 476, 478, 518, 520, 527, 535, 536, 537, 541, 542, 544, 563, 570, 571, 583, 588, 589, 631, 635, 636, 637, 639, 640, 660, 663, 664, 726, 780, 781, 795, 804, 807, 836, 837, 844, 871, 880, 883, 915, 951, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 969, 970, 972, 974, 975, 978, 983, 986, 995, 996, 1004, 1005, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1018, 1019, 1020], "nrow": [5, 32, 56, 65, 72, 95, 158, 168, 197, 199, 205, 215, 218, 219, 222, 259, 260, 277, 301, 303, 304, 312, 316, 334, 335, 993], "img": [5, 50, 65, 486, 567], "ravel": [5, 9, 13, 16, 17, 19, 26, 30, 34, 42, 53, 54, 57, 79, 105, 111, 113, 118, 122, 127, 128, 129, 138, 149, 151, 153, 154, 155, 156, 167, 176, 187, 188, 190, 197, 210, 211, 219, 223, 226, 230, 232, 239, 244, 246, 260, 264, 266, 277, 282, 283, 289, 290, 293, 294, 295, 296, 301, 302, 311, 320, 326, 327, 331, 332, 333, 334, 336, 337, 340, 347, 348, 445, 473, 474, 475, 612, 699, 949, 962], "imshow": [5, 6, 13, 30, 32, 40, 46, 47, 48, 50, 51, 53, 54, 57, 81, 88, 95, 98, 106, 151, 152, 153, 157, 170, 188, 213, 219, 234, 268, 281, 296, 315, 316, 327, 333, 336, 362, 613, 678, 993, 994, 1018], "grei": [5, 34, 267, 299, 363], "off": [5, 12, 13, 37, 39, 40, 47, 48, 52, 53, 77, 81, 84, 95, 219, 231, 234, 251, 256, 258, 259, 299, 316, 320, 327, 337, 340, 363, 368, 369, 392, 394, 399, 401, 423, 533, 534, 539, 540, 569, 572, 615, 637, 673, 696, 775, 776, 777, 780, 781, 791, 802, 919, 961, 967, 977, 983, 1004, 1008, 1009, 1011], "fontsiz": [5, 8, 10, 14, 34, 50, 59, 90, 98, 118, 141, 152, 153, 155, 158, 168, 177, 187, 196, 208, 219, 220, 245, 252, 261, 262, 263, 268, 269, 296, 303, 334, 892], "mse": [5, 7, 77, 78, 122, 123, 161, 162, 197, 199, 203, 271, 628, 634, 730, 962, 978, 1015, 1017], "quantit": [5, 6, 25, 60, 122, 132, 146, 253, 271, 365, 993], "nmse": [5, 271], "2f": [5, 8, 11, 19, 31, 39, 42, 44, 46, 50, 52, 61, 63, 66, 84, 91, 98, 105, 122, 128, 129, 141, 167, 168, 170, 173, 177, 186, 188, 193, 197, 212, 213, 214, 215, 226, 230, 256, 260, 261, 263, 265, 266, 267, 285, 286, 293, 301, 304, 311, 327, 340, 341, 351, 393, 396, 399, 803], "linear": [5, 10, 13, 16, 27, 29, 30, 31, 35, 37, 56, 73, 74, 84, 85, 95, 100, 104, 109, 113, 115, 127, 129, 132, 135, 136, 138, 141, 144, 146, 153, 155, 161, 162, 165, 166, 168, 171, 173, 179, 183, 185, 186, 187, 192, 194, 195, 198, 199, 205, 209, 211, 213, 214, 215, 216, 217, 220, 222, 224, 229, 232, 233, 234, 237, 251, 253, 254, 255, 257, 260, 262, 263, 264, 265, 266, 267, 271, 282, 285, 286, 296, 299, 300, 301, 309, 310, 322, 324, 327, 328, 329, 331, 332, 335, 336, 338, 340, 347, 348, 356, 358, 360, 364, 365, 366, 369, 370, 372, 380, 382, 390, 392, 395, 396, 397, 398, 399, 400, 401, 402, 404, 423, 435, 445, 447, 455, 462, 463, 464, 476, 481, 482, 492, 495, 501, 504, 512, 513, 514, 515, 516, 519, 521, 523, 524, 528, 529, 530, 534, 546, 563, 570, 574, 575, 587, 590, 595, 601, 616, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 668, 669, 670, 671, 672, 673, 674, 688, 697, 730, 733, 745, 747, 754, 765, 777, 788, 792, 802, 805, 819, 820, 824, 828, 835, 836, 837, 840, 845, 846, 849, 852, 854, 856, 857, 858, 859, 867, 871, 878, 879, 880, 881, 882, 883, 884, 951, 953, 954, 955, 957, 962, 965, 966, 967, 968, 969, 970, 976, 977, 982, 984, 986, 988, 991, 992, 997, 998, 999, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1017, 1018], "radial": [5, 100, 149, 154, 156, 327, 360, 432, 603, 672, 960, 977, 999], "rbf": [5, 6, 10, 11, 16, 30, 31, 100, 130, 138, 149, 150, 151, 153, 154, 155, 156, 158, 164, 211, 225, 226, 232, 240, 255, 257, 259, 262, 320, 322, 324, 331, 333, 334, 338, 360, 393, 397, 399, 432, 482, 484, 515, 521, 591, 592, 593, 594, 597, 600, 601, 602, 604, 605, 620, 621, 622, 623, 624, 657, 672, 745, 754, 756, 777, 788, 791, 797, 839, 859, 873, 874, 878, 880, 881, 882, 883, 884, 951, 954, 955, 959, 962, 968, 972, 975, 988, 993, 999, 1010, 1015], "decomposit": [5, 6, 14, 17, 57, 69, 71, 72, 73, 85, 86, 89, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 127, 133, 218, 219, 221, 231, 233, 237, 256, 281, 286, 304, 311, 341, 357, 358, 361, 373, 376, 380, 389, 393, 399, 429, 431, 432, 433, 442, 462, 463, 464, 475, 529, 536, 592, 631, 632, 633, 634, 635, 636, 637, 644, 645, 646, 653, 654, 655, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 775, 776, 828, 835, 838, 841, 857, 887, 914, 915, 958, 959, 962, 979, 982, 984, 991, 993, 998, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "kernel_pca": [5, 100, 393], "400": [5, 26, 50, 95, 109, 124, 128, 149, 162, 203, 223, 269, 294, 341, 363, 397, 475, 997], "1e": [5, 6, 7, 10, 17, 26, 46, 95, 149, 152, 154, 155, 156, 157, 158, 161, 167, 177, 190, 197, 198, 204, 211, 215, 221, 226, 232, 236, 242, 245, 248, 255, 265, 268, 295, 310, 319, 325, 327, 335, 340, 373, 404, 424, 427, 432, 439, 442, 451, 452, 458, 462, 463, 464, 511, 512, 513, 516, 517, 518, 519, 520, 522, 523, 525, 526, 527, 539, 540, 541, 542, 573, 578, 592, 594, 595, 596, 600, 601, 603, 604, 606, 608, 619, 621, 622, 623, 625, 626, 627, 628, 629, 630, 633, 634, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 668, 670, 671, 672, 673, 674, 675, 676, 708, 721, 765, 775, 776, 791, 814, 815, 816, 817, 818, 819, 820, 828, 836, 837, 844, 873, 874, 878, 879, 880, 881, 882, 883, 884, 948, 951, 962, 966, 970, 972, 976, 993, 997, 1012, 1017, 1018, 1019], "fit_inverse_transform": [5, 100, 515, 1013], "5e": [5, 95, 182, 576, 577, 579], "inde": [5, 7, 25, 39, 40, 53, 57, 81, 85, 100, 113, 145, 146, 149, 167, 169, 176, 185, 186, 197, 199, 259, 260, 264, 266, 277, 299, 304, 341, 351, 355, 367, 372, 379, 380, 381, 394, 399, 547, 548, 958, 972, 976, 1018], "least": [5, 14, 79, 80, 83, 86, 98, 120, 123, 146, 157, 164, 175, 176, 190, 197, 199, 202, 205, 214, 215, 216, 230, 257, 275, 304, 309, 310, 327, 341, 342, 355, 361, 363, 365, 367, 368, 371, 373, 375, 378, 380, 381, 391, 392, 394, 395, 396, 397, 399, 400, 401, 402, 403, 425, 428, 430, 436, 437, 438, 441, 454, 462, 463, 464, 465, 474, 496, 511, 517, 519, 521, 522, 523, 525, 526, 527, 528, 529, 537, 538, 539, 540, 542, 544, 545, 546, 574, 583, 616, 624, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 644, 645, 646, 647, 648, 649, 650, 652, 653, 655, 657, 659, 660, 661, 663, 664, 665, 666, 667, 668, 673, 678, 693, 697, 699, 765, 778, 782, 783, 789, 791, 792, 793, 795, 796, 798, 800, 803, 804, 805, 836, 837, 840, 851, 859, 883, 886, 887, 888, 889, 907, 925, 952, 955, 959, 962, 965, 974, 976, 977, 978, 983, 984, 986, 995, 999, 1004, 1006, 1007, 1010, 1011, 1015], "hope": [5, 215, 380, 391, 1013], "remov": [5, 14, 16, 17, 54, 69, 74, 146, 161, 162, 167, 170, 258, 299, 307, 308, 309, 340, 341, 345, 351, 360, 363, 367, 368, 371, 372, 376, 380, 392, 393, 396, 399, 400, 402, 403, 418, 420, 423, 425, 427, 429, 430, 437, 439, 468, 469, 514, 515, 517, 519, 521, 526, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 545, 547, 548, 549, 550, 559, 560, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 592, 611, 613, 619, 625, 629, 631, 632, 635, 636, 637, 639, 645, 646, 650, 652, 657, 661, 673, 680, 721, 748, 758, 759, 760, 803, 826, 838, 839, 843, 844, 852, 856, 857, 859, 867, 881, 882, 884, 886, 887, 888, 889, 893, 909, 910, 912, 923, 952, 959, 965, 978, 984, 989, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "think": [5, 37, 168, 340, 341, 368, 398, 961, 983, 985, 986, 988], "happen": [5, 115, 185, 299, 341, 351, 355, 356, 367, 368, 371, 372, 373, 378, 380, 381, 383, 392, 394, 396, 399, 418, 495, 552, 639, 765, 857, 859, 878, 958, 962, 963, 977, 983, 997, 1012, 1016, 1017], "ridg": [5, 10, 13, 54, 74, 129, 146, 148, 159, 161, 164, 167, 168, 175, 176, 197, 198, 216, 225, 234, 240, 340, 355, 358, 378, 397, 399, 504, 515, 519, 523, 592, 596, 603, 606, 624, 625, 626, 628, 630, 638, 642, 654, 655, 656, 659, 668, 682, 730, 777, 791, 812, 884, 957, 962, 970, 972, 976, 977, 984, 995, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1014, 1017, 1018, 1019], "x_reconstructed_kernel_pca": [5, 100], "inverse_transform": [5, 51, 54, 100, 143, 281, 341, 397, 400, 426, 445, 462, 463, 464, 513, 514, 515, 518, 519, 520, 521, 523, 524, 562, 569, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 611, 777, 780, 781, 791, 839, 843, 844, 846, 847, 848, 849, 850, 852, 853, 855, 856, 857, 859, 870, 871, 972, 973, 974, 1006, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "x_reconstructed_pca": [5, 100], "lower": [5, 16, 26, 30, 31, 33, 57, 78, 85, 95, 97, 103, 109, 110, 113, 118, 122, 125, 149, 151, 153, 155, 157, 168, 169, 182, 183, 187, 197, 198, 199, 200, 210, 218, 222, 229, 230, 234, 244, 248, 256, 257, 259, 260, 264, 265, 267, 270, 281, 283, 284, 301, 304, 311, 318, 327, 333, 340, 341, 342, 346, 363, 368, 390, 391, 392, 395, 396, 397, 398, 399, 400, 403, 425, 428, 444, 447, 478, 489, 512, 514, 521, 524, 533, 539, 540, 541, 542, 543, 569, 570, 572, 584, 592, 594, 595, 596, 598, 600, 601, 603, 604, 606, 613, 614, 616, 618, 658, 660, 693, 697, 705, 708, 714, 719, 775, 776, 825, 827, 829, 830, 831, 833, 880, 881, 882, 885, 902, 957, 958, 959, 961, 962, 963, 965, 966, 967, 968, 969, 970, 974, 976, 977, 978, 995, 1006, 1007, 1012, 1019], "analysi": [5, 7, 9, 25, 29, 35, 36, 56, 62, 67, 93, 96, 97, 99, 100, 102, 104, 107, 119, 164, 167, 168, 186, 219, 241, 249, 254, 257, 258, 262, 278, 291, 299, 304, 341, 358, 360, 363, 365, 368, 369, 381, 389, 392, 394, 399, 400, 404, 420, 427, 428, 453, 455, 456, 462, 463, 465, 482, 484, 492, 495, 511, 512, 513, 514, 515, 517, 519, 520, 521, 522, 523, 524, 525, 526, 529, 530, 535, 536, 619, 669, 671, 672, 673, 674, 691, 700, 705, 706, 736, 768, 769, 770, 771, 775, 777, 801, 805, 821, 828, 839, 840, 845, 855, 859, 866, 914, 915, 952, 958, 959, 961, 962, 972, 981, 982, 984, 986, 989, 998, 999, 1004, 1005, 1006, 1008, 1013], "favor": [5, 81, 242, 248, 378, 394, 399, 710, 785, 787, 838, 909, 951, 970, 1006, 1008, 1010, 1011, 1013, 1016, 1017, 1018, 1019], "background": [5, 11, 47, 65, 125, 296, 301, 363, 368, 375, 392, 473, 474, 959, 967, 976, 1014], "611": [5, 15, 255, 257, 521], "plot_digits_denois": [5, 15], "dataset": [6, 7, 9, 10, 11, 13, 14, 16, 19, 20, 21, 26, 30, 31, 33, 36, 37, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 66, 67, 70, 71, 72, 73, 74, 79, 80, 81, 85, 92, 93, 98, 99, 100, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 142, 143, 144, 145, 146, 148, 157, 159, 161, 162, 169, 170, 173, 175, 178, 180, 182, 183, 184, 185, 187, 188, 189, 190, 193, 194, 196, 200, 201, 204, 205, 209, 210, 211, 212, 213, 214, 216, 220, 222, 223, 225, 227, 230, 232, 233, 234, 235, 238, 239, 240, 242, 244, 245, 246, 248, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 270, 272, 275, 277, 279, 280, 281, 285, 286, 287, 288, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 321, 322, 323, 325, 327, 328, 329, 330, 331, 335, 336, 337, 338, 341, 342, 344, 345, 347, 348, 349, 350, 351, 356, 357, 358, 369, 370, 371, 373, 379, 380, 382, 383, 386, 388, 389, 390, 392, 393, 396, 397, 398, 399, 400, 401, 407, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 438, 439, 449, 450, 453, 454, 455, 456, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 526, 529, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 564, 565, 569, 570, 571, 573, 574, 575, 576, 577, 579, 580, 581, 583, 584, 591, 592, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 609, 612, 613, 614, 615, 616, 619, 620, 621, 624, 627, 628, 630, 632, 633, 634, 636, 638, 639, 640, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 660, 669, 670, 671, 672, 673, 678, 679, 681, 682, 683, 684, 685, 689, 709, 735, 737, 767, 768, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 835, 836, 837, 839, 840, 843, 844, 852, 853, 857, 859, 860, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 898, 899, 903, 904, 951, 952, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 974, 975, 976, 977, 978, 982, 983, 985, 986, 989, 991, 992, 993, 996, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1020], "excerpt": [6, 974, 993], "wild": [6, 361, 473, 474, 488, 489, 993, 999, 1004], "aka": [6, 293, 340, 378, 400, 432, 516, 518, 520, 524, 527, 562, 563, 596, 603, 632, 633, 635, 636, 637, 639, 640, 643, 647, 648, 649, 651, 657, 658, 659, 721, 846, 850, 852, 958, 966, 976, 988, 993, 1006, 1018], "lfw": [6, 363, 473, 474, 993, 1004], "vi": [6, 8, 363, 680, 993, 1012, 1015], "www": [6, 70, 173, 197, 213, 215, 227, 275, 295, 362, 363, 368, 373, 375, 383, 392, 396, 423, 429, 467, 488, 489, 511, 514, 517, 521, 625, 639, 645, 652, 666, 667, 828, 835, 886, 887, 958, 975, 993], "umass": [6, 363, 993], "edu": [6, 8, 11, 17, 46, 120, 146, 156, 173, 179, 218, 245, 256, 282, 290, 303, 340, 341, 362, 363, 365, 392, 429, 467, 482, 488, 489, 490, 514, 622, 625, 630, 639, 647, 648, 657, 660, 663, 664, 814, 816, 817, 818, 828, 835, 871, 873, 886, 887, 958, 960, 993], "funnel": [6, 473, 474, 993], "tgz": [6, 993], "233mb": [6, 993], "randomizedsearchcv": [6, 70, 149, 258, 265, 309, 351, 379, 555, 951, 962, 976, 982, 993, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019], "fetch_lfw_peopl": [6, 363, 993, 1019], "classification_report": [6, 32, 69, 143, 255, 296, 315, 316, 962, 993, 997, 1006, 1008, 1012, 1013, 1014, 1016], "confusionmatrixdisplai": [6, 32, 251, 310, 315, 340, 612, 699, 962, 993, 1014, 1015, 1017, 1018, 1019], "standardscal": [6, 10, 31, 44, 49, 57, 61, 70, 72, 85, 106, 129, 167, 176, 185, 186, 188, 197, 213, 215, 227, 228, 236, 237, 239, 254, 264, 285, 286, 293, 301, 304, 307, 308, 310, 311, 312, 327, 330, 351, 357, 368, 369, 372, 376, 379, 393, 396, 412, 446, 447, 547, 631, 632, 635, 636, 637, 645, 646, 657, 659, 839, 840, 843, 856, 869, 878, 879, 880, 881, 883, 884, 952, 959, 966, 972, 976, 977, 979, 993, 1006, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1020], "svc": [6, 16, 25, 27, 30, 31, 32, 69, 73, 130, 136, 138, 144, 164, 173, 231, 233, 237, 251, 255, 257, 259, 262, 263, 264, 267, 268, 272, 301, 307, 309, 318, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 340, 355, 369, 373, 380, 386, 393, 396, 399, 448, 495, 535, 678, 679, 681, 683, 777, 794, 806, 808, 839, 875, 876, 878, 880, 950, 951, 957, 960, 962, 963, 972, 988, 992, 993, 995, 1001, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "util": [6, 8, 10, 11, 48, 55, 60, 88, 129, 149, 197, 199, 205, 213, 220, 229, 234, 245, 263, 265, 277, 301, 307, 318, 327, 340, 356, 358, 362, 363, 366, 368, 369, 370, 373, 378, 379, 380, 388, 392, 393, 396, 397, 400, 433, 448, 551, 552, 553, 557, 651, 680, 777, 799, 805, 806, 846, 951, 957, 960, 962, 963, 972, 973, 982, 986, 989, 993, 999, 1004, 1005, 1007, 1008, 1010, 1011], "loguniform": [6, 149, 265, 951, 993, 1014], "disk": [6, 13, 363, 366, 368, 372, 380, 386, 993], "arrai": [6, 7, 8, 10, 11, 12, 13, 16, 19, 32, 33, 34, 40, 44, 46, 48, 53, 54, 60, 61, 63, 69, 71, 80, 84, 91, 96, 97, 110, 121, 123, 125, 128, 131, 136, 143, 146, 150, 151, 152, 157, 167, 176, 178, 190, 191, 194, 197, 198, 204, 214, 219, 220, 226, 230, 236, 239, 242, 243, 244, 246, 247, 252, 253, 255, 257, 258, 261, 262, 266, 275, 290, 302, 307, 310, 311, 316, 323, 330, 340, 348, 349, 351, 355, 356, 361, 362, 363, 368, 369, 370, 372, 373, 375, 377, 378, 379, 380, 386, 389, 392, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 476, 477, 478, 480, 481, 482, 483, 484, 486, 488, 489, 490, 491, 492, 493, 495, 504, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 562, 563, 564, 565, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 894, 895, 896, 898, 899, 900, 903, 904, 912, 913, 914, 915, 916, 917, 919, 920, 921, 924, 925, 926, 933, 934, 935, 936, 937, 938, 939, 940, 948, 949, 952, 957, 958, 960, 962, 963, 965, 966, 968, 969, 972, 973, 974, 976, 977, 978, 981, 986, 992, 993, 994, 995, 996, 997, 999, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "lfw_peopl": [6, 363, 993], "min_faces_per_person": [6, 363, 474, 993], "resiz": [6, 46, 47, 236, 363, 473, 474, 993], "n_sampl": [6, 7, 10, 14, 24, 25, 26, 27, 32, 33, 37, 38, 39, 41, 42, 43, 44, 48, 49, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 69, 74, 77, 78, 79, 80, 81, 85, 91, 95, 96, 100, 103, 109, 110, 112, 113, 114, 115, 116, 120, 121, 122, 123, 124, 125, 126, 137, 138, 145, 146, 158, 161, 162, 166, 176, 178, 179, 181, 183, 185, 187, 189, 191, 192, 196, 197, 198, 200, 201, 205, 209, 212, 214, 215, 218, 219, 220, 221, 222, 223, 226, 230, 231, 243, 245, 246, 247, 248, 254, 255, 257, 260, 261, 264, 266, 267, 268, 269, 270, 271, 277, 287, 301, 302, 303, 308, 309, 311, 317, 325, 328, 329, 335, 340, 341, 351, 361, 365, 368, 369, 372, 376, 378, 379, 380, 392, 394, 395, 396, 397, 399, 403, 404, 405, 407, 409, 410, 411, 413, 414, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 474, 481, 484, 488, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 602, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 750, 751, 752, 753, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 903, 904, 915, 917, 919, 924, 931, 933, 936, 937, 938, 939, 940, 941, 942, 943, 951, 954, 958, 962, 963, 965, 966, 972, 973, 974, 976, 977, 978, 988, 993, 994, 995, 996, 997, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "w": [6, 12, 13, 16, 30, 34, 40, 42, 45, 48, 57, 63, 102, 105, 161, 181, 196, 201, 214, 233, 242, 243, 244, 247, 248, 268, 296, 310, 311, 332, 335, 342, 351, 363, 365, 373, 386, 392, 393, 397, 399, 400, 404, 409, 413, 418, 445, 449, 452, 454, 462, 463, 464, 503, 518, 520, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 547, 548, 549, 550, 569, 570, 572, 591, 592, 616, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 674, 680, 705, 706, 736, 777, 791, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 821, 822, 825, 826, 829, 830, 836, 837, 871, 873, 874, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 912, 917, 958, 962, 966, 967, 972, 974, 976, 977, 993, 997, 1014, 1018, 1019], "info": [6, 42, 70, 95, 167, 168, 255, 365, 367, 371, 380, 400, 993], "n_featur": [6, 8, 14, 25, 26, 27, 30, 31, 32, 33, 40, 52, 57, 59, 60, 77, 78, 79, 80, 81, 84, 90, 91, 95, 103, 110, 112, 114, 116, 143, 145, 146, 161, 162, 173, 176, 179, 181, 183, 191, 192, 196, 200, 201, 212, 214, 219, 226, 230, 231, 242, 247, 254, 260, 264, 266, 267, 269, 270, 287, 293, 301, 307, 308, 309, 311, 335, 340, 341, 342, 351, 355, 361, 362, 368, 369, 372, 378, 379, 380, 392, 394, 395, 397, 399, 400, 403, 404, 405, 407, 409, 410, 411, 413, 414, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 438, 439, 440, 441, 443, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 474, 481, 484, 488, 489, 492, 495, 496, 499, 501, 503, 504, 506, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 683, 691, 705, 738, 739, 740, 741, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 770, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 839, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 915, 937, 938, 939, 940, 941, 942, 943, 954, 958, 963, 965, 966, 972, 976, 977, 978, 988, 993, 994, 996, 997, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019], "id": [6, 215, 290, 349, 362, 363, 368, 375, 394, 396, 400, 474, 475, 476, 890, 892, 910, 993, 997, 1012, 1013, 1016], "person": [6, 260, 363, 367, 396, 400, 473, 474, 475, 972, 993, 1012], "target_nam": [6, 19, 52, 99, 104, 166, 206, 219, 244, 251, 258, 266, 267, 280, 319, 340, 346, 361, 363, 468, 469, 471, 472, 473, 474, 476, 477, 480, 482, 483, 484, 485, 490, 694, 962, 978, 988, 993, 997, 1014], "n_class": [6, 30, 37, 90, 91, 110, 112, 116, 118, 143, 145, 212, 219, 231, 233, 244, 264, 265, 266, 286, 287, 307, 346, 351, 368, 369, 380, 399, 418, 468, 469, 482, 495, 499, 503, 529, 530, 531, 533, 535, 537, 539, 541, 544, 547, 549, 574, 575, 585, 591, 615, 620, 639, 640, 647, 648, 649, 655, 656, 657, 658, 678, 688, 697, 699, 715, 718, 721, 734, 768, 772, 777, 780, 781, 791, 800, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 821, 826, 828, 829, 836, 839, 846, 847, 850, 853, 862, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 888, 903, 904, 958, 962, 963, 966, 973, 976, 977, 985, 993, 1009, 1010, 1011, 1013, 1014, 1015], "1288": [6, 363], "1850": [6, 363], "scaler": [6, 70, 72, 164, 213, 231, 237, 239, 285, 298, 304, 305, 312, 327, 330, 351, 372, 393, 396, 470, 639, 640, 653, 655, 668, 839, 848, 849, 851, 855, 856, 857, 859, 863, 864, 865, 866, 867, 868, 869, 966, 972, 976, 993, 1004, 1009, 1012, 1017], "unlabel": [6, 233, 309, 315, 316, 317, 319, 320, 380, 391, 392, 873, 874, 875, 961, 988, 991, 993, 995, 1016], "unsupervis": [6, 12, 37, 49, 71, 72, 85, 95, 115, 127, 226, 233, 283, 284, 326, 340, 341, 351, 358, 360, 363, 369, 379, 380, 391, 392, 397, 398, 399, 400, 414, 423, 426, 512, 514, 516, 517, 519, 522, 523, 529, 543, 546, 547, 549, 550, 563, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 609, 611, 615, 616, 619, 620, 621, 622, 623, 658, 722, 777, 780, 781, 783, 791, 803, 806, 821, 822, 825, 827, 828, 829, 830, 835, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 856, 857, 858, 859, 870, 871, 875, 882, 959, 962, 968, 975, 984, 988, 989, 991, 993, 999, 1004, 1007, 1017], "dimension": [6, 9, 10, 19, 31, 40, 44, 54, 56, 57, 61, 68, 70, 72, 73, 75, 84, 85, 91, 95, 103, 110, 115, 127, 137, 138, 149, 151, 152, 156, 164, 193, 198, 214, 217, 219, 220, 222, 224, 226, 230, 231, 233, 243, 244, 278, 281, 291, 301, 324, 340, 351, 355, 360, 363, 364, 365, 368, 376, 380, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 426, 427, 429, 445, 449, 453, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 477, 480, 481, 482, 484, 485, 490, 495, 499, 512, 514, 515, 518, 519, 520, 521, 524, 527, 529, 543, 546, 553, 580, 588, 612, 621, 622, 623, 633, 669, 670, 671, 672, 673, 674, 675, 677, 680, 691, 705, 775, 776, 777, 805, 819, 820, 821, 824, 827, 828, 835, 839, 840, 843, 849, 854, 859, 870, 871, 872, 878, 882, 915, 948, 953, 954, 957, 958, 963, 964, 968, 974, 975, 976, 977, 978, 984, 986, 988, 989, 991, 993, 994, 996, 997, 998, 999, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1013, 1016, 1019], "reduct": [6, 19, 54, 56, 68, 72, 75, 85, 95, 113, 127, 164, 217, 219, 220, 224, 230, 233, 278, 291, 311, 324, 351, 355, 360, 391, 392, 393, 395, 397, 399, 401, 448, 462, 463, 464, 465, 482, 510, 512, 514, 515, 518, 519, 520, 521, 524, 527, 529, 533, 534, 537, 538, 539, 540, 544, 545, 546, 580, 588, 639, 640, 669, 670, 671, 672, 673, 674, 761, 777, 805, 821, 828, 835, 839, 840, 849, 859, 876, 878, 886, 887, 888, 889, 954, 959, 974, 978, 983, 984, 986, 993, 999, 1005, 1006, 1007, 1010, 1018, 1019, 1020], "top": [6, 12, 13, 14, 16, 17, 30, 34, 37, 39, 41, 42, 43, 44, 45, 51, 61, 63, 70, 90, 97, 115, 118, 129, 132, 167, 197, 199, 208, 212, 226, 235, 236, 242, 244, 245, 248, 254, 258, 266, 267, 282, 299, 301, 308, 315, 316, 327, 340, 351, 366, 368, 373, 378, 389, 390, 392, 397, 398, 399, 467, 568, 569, 572, 580, 706, 736, 772, 890, 892, 951, 954, 958, 960, 970, 986, 993, 996, 997, 1018], "t0": [6, 8, 11, 14, 17, 39, 42, 44, 46, 48, 50, 52, 57, 61, 63, 98, 183, 212, 213, 214, 220, 223, 226, 230, 232, 258, 340, 341, 342, 657, 658, 659, 993], "svd_solver": [6, 95, 103, 397, 515, 521, 993, 1010], "whiten": [6, 95, 96, 97, 281, 397, 404, 513, 514, 521, 857, 859, 993, 1008, 1010, 1018, 1019], "done": [6, 8, 9, 11, 14, 17, 19, 48, 50, 52, 53, 98, 143, 146, 154, 167, 168, 173, 176, 183, 214, 232, 247, 255, 258, 261, 266, 277, 302, 309, 340, 341, 342, 351, 356, 362, 366, 368, 369, 371, 374, 375, 376, 378, 380, 392, 394, 396, 397, 399, 422, 423, 426, 430, 432, 452, 462, 463, 464, 465, 469, 515, 541, 542, 563, 587, 609, 611, 613, 615, 624, 625, 626, 640, 721, 775, 776, 777, 791, 796, 797, 843, 857, 947, 951, 952, 955, 958, 959, 962, 964, 965, 966, 972, 975, 976, 977, 978, 983, 988, 992, 993, 995, 997, 1004, 1006, 1011, 1014, 1016], "components_": [6, 14, 57, 85, 95, 97, 98, 101, 106, 230, 231, 296, 304, 311, 380, 393, 397, 425, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 523, 524, 620, 828, 835, 870, 871, 974, 993, 1008, 1010, 1016, 1019], "project": [6, 8, 11, 13, 17, 27, 45, 57, 66, 84, 89, 93, 95, 97, 99, 101, 102, 107, 112, 153, 155, 157, 158, 164, 168, 189, 194, 206, 218, 219, 220, 222, 225, 231, 233, 240, 281, 286, 290, 324, 332, 341, 346, 355, 358, 360, 362, 366, 367, 372, 373, 376, 380, 381, 383, 389, 395, 397, 398, 404, 421, 431, 432, 442, 454, 462, 463, 464, 465, 469, 482, 484, 511, 513, 514, 515, 517, 519, 521, 522, 523, 524, 528, 529, 553, 563, 570, 622, 623, 630, 669, 672, 676, 677, 809, 828, 856, 870, 871, 872, 914, 915, 956, 958, 959, 960, 963, 965, 966, 968, 975, 978, 980, 985, 986, 988, 993, 996, 999, 1004, 1005, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "orthonorm": [6, 376, 914, 993], "x_train_pca": [6, 993], "x_test_pca": [6, 100, 993], "966": 6, "067": [6, 158], "007": [6, 116, 242, 265, 277, 341], "classifi": [6, 7, 8, 9, 23, 26, 28, 29, 30, 32, 35, 55, 69, 70, 71, 72, 100, 109, 111, 112, 114, 116, 117, 118, 121, 127, 130, 131, 142, 143, 145, 164, 169, 173, 175, 187, 188, 189, 195, 204, 206, 209, 212, 216, 226, 231, 238, 251, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 272, 274, 276, 279, 280, 285, 286, 288, 293, 296, 301, 309, 310, 314, 315, 316, 318, 319, 321, 322, 323, 326, 328, 329, 330, 335, 336, 337, 338, 342, 363, 365, 368, 369, 372, 378, 380, 392, 393, 396, 400, 401, 402, 409, 416, 418, 419, 420, 468, 469, 476, 484, 492, 494, 495, 502, 511, 516, 517, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 543, 544, 545, 546, 547, 548, 549, 550, 574, 575, 583, 587, 591, 603, 610, 612, 613, 614, 630, 639, 640, 647, 649, 652, 653, 654, 655, 656, 657, 678, 679, 681, 683, 684, 688, 689, 690, 693, 694, 699, 701, 706, 707, 709, 710, 714, 715, 718, 719, 720, 721, 722, 723, 734, 736, 762, 763, 764, 767, 768, 769, 772, 774, 777, 780, 781, 783, 791, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 826, 827, 829, 830, 835, 836, 837, 839, 840, 846, 859, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 907, 909, 951, 952, 954, 957, 958, 959, 962, 963, 964, 967, 970, 972, 975, 976, 977, 978, 982, 983, 984, 986, 988, 989, 991, 992, 993, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "1e3": [6, 7, 10, 149, 155, 161, 232, 268, 951, 993], "1e5": [6, 154, 178, 180, 187, 268, 594, 595, 596, 600, 601, 603, 604, 606, 867, 872, 974, 993, 995], "clf": [6, 9, 10, 11, 12, 16, 24, 25, 26, 27, 31, 32, 38, 48, 51, 54, 57, 62, 70, 89, 101, 102, 114, 121, 124, 125, 130, 135, 138, 142, 143, 145, 151, 153, 170, 187, 189, 190, 194, 195, 201, 204, 206, 209, 210, 211, 213, 221, 227, 228, 231, 233, 235, 239, 246, 254, 258, 262, 263, 265, 268, 269, 280, 283, 284, 285, 288, 293, 301, 304, 307, 308, 309, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 340, 345, 346, 349, 355, 363, 379, 380, 386, 393, 396, 399, 401, 419, 529, 530, 533, 535, 537, 539, 541, 543, 544, 547, 574, 575, 578, 613, 615, 619, 620, 621, 622, 623, 625, 626, 629, 633, 639, 640, 641, 642, 643, 647, 649, 650, 653, 654, 655, 656, 657, 658, 661, 678, 679, 681, 683, 768, 777, 780, 781, 791, 807, 808, 809, 811, 814, 815, 816, 817, 818, 825, 826, 836, 878, 880, 882, 883, 886, 890, 892, 952, 954, 958, 962, 963, 965, 966, 968, 969, 976, 977, 978, 988, 992, 993, 997], "class_weight": [6, 329, 380, 537, 541, 544, 639, 640, 647, 649, 655, 656, 657, 658, 878, 880, 881, 882, 883, 884, 885, 886, 888, 951, 976, 977, 993, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1018, 1019], "n_iter": [6, 17, 70, 149, 176, 205, 218, 219, 223, 258, 265, 277, 296, 329, 369, 373, 379, 404, 434, 458, 512, 513, 517, 519, 524, 525, 526, 527, 625, 626, 627, 628, 633, 634, 641, 642, 643, 644, 662, 663, 664, 665, 666, 667, 668, 673, 675, 780, 781, 789, 791, 835, 837, 914, 915, 951, 976, 993, 1005, 1010, 1011, 1012, 1016, 1018, 1019], "found": [6, 19, 20, 21, 106, 116, 145, 149, 153, 155, 157, 158, 201, 233, 255, 258, 259, 260, 304, 307, 310, 312, 327, 342, 355, 357, 362, 365, 367, 368, 369, 373, 378, 380, 381, 389, 392, 395, 396, 397, 399, 400, 402, 415, 422, 425, 426, 439, 452, 537, 538, 539, 540, 544, 545, 569, 571, 591, 592, 609, 617, 628, 632, 634, 636, 642, 644, 646, 652, 653, 655, 657, 659, 668, 669, 693, 700, 777, 780, 781, 791, 816, 821, 822, 828, 850, 852, 853, 886, 887, 888, 889, 893, 946, 950, 951, 954, 958, 959, 961, 963, 964, 965, 966, 972, 976, 977, 983, 985, 988, 993, 997, 1004, 1007, 1008, 1011, 1012, 1014, 1018], "grid": [6, 8, 10, 11, 25, 26, 27, 42, 54, 60, 70, 71, 73, 77, 81, 118, 120, 127, 153, 164, 166, 167, 168, 186, 215, 223, 231, 232, 236, 242, 247, 250, 254, 256, 258, 261, 262, 273, 275, 279, 281, 282, 290, 296, 301, 302, 304, 324, 327, 333, 340, 369, 374, 378, 380, 387, 393, 396, 398, 399, 400, 402, 428, 441, 444, 452, 478, 482, 495, 502, 612, 613, 614, 628, 631, 634, 635, 637, 640, 642, 644, 657, 694, 708, 722, 765, 768, 777, 780, 781, 788, 791, 793, 805, 806, 883, 955, 957, 962, 965, 969, 983, 988, 989, 991, 993, 995, 999, 1004, 1007, 1008, 1009, 1011, 1012, 1018], "search": [6, 46, 54, 70, 71, 72, 73, 122, 143, 149, 164, 215, 232, 247, 250, 258, 261, 262, 269, 273, 277, 279, 281, 296, 301, 312, 327, 340, 351, 358, 365, 366, 368, 369, 378, 380, 387, 392, 393, 396, 399, 400, 401, 402, 403, 424, 428, 430, 432, 437, 438, 441, 444, 451, 452, 458, 482, 495, 502, 537, 538, 539, 540, 544, 545, 546, 559, 580, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 609, 634, 657, 669, 670, 673, 674, 694, 708, 765, 768, 777, 780, 781, 788, 789, 791, 793, 805, 806, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 883, 886, 887, 888, 889, 920, 950, 955, 957, 959, 962, 965, 966, 976, 978, 982, 983, 988, 989, 991, 993, 999, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1018, 1019], "best_estimator_": [6, 54, 72, 73, 77, 103, 232, 247, 258, 261, 281, 777, 780, 781, 791, 951, 992, 993, 1011], "493": [6, 624, 878, 955], "76823": 6, "03433306453": 6, "003418945823095797": 6, "y_pred": [6, 7, 25, 30, 32, 34, 44, 56, 61, 69, 74, 109, 122, 123, 129, 143, 167, 197, 199, 204, 207, 212, 214, 215, 226, 227, 235, 253, 255, 260, 284, 288, 296, 304, 318, 319, 351, 368, 374, 380, 399, 413, 420, 445, 462, 463, 464, 529, 532, 534, 536, 537, 538, 540, 542, 544, 545, 547, 548, 550, 592, 612, 616, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 659, 660, 661, 678, 679, 681, 682, 683, 684, 689, 693, 694, 699, 702, 703, 704, 708, 709, 710, 714, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 763, 764, 765, 767, 768, 774, 777, 780, 781, 791, 800, 810, 812, 813, 822, 830, 837, 839, 878, 879, 880, 881, 882, 883, 884, 887, 889, 962, 964, 993, 1010, 1011, 1013, 1015, 1019, 1020], "from_estim": [6, 25, 27, 31, 55, 112, 115, 125, 126, 130, 168, 180, 189, 206, 232, 236, 238, 251, 254, 259, 260, 264, 267, 280, 285, 288, 304, 307, 308, 309, 310, 312, 323, 324, 325, 328, 329, 346, 374, 390, 419, 612, 613, 614, 678, 679, 681, 682, 683, 699, 707, 762, 764, 767, 768, 769, 783, 957, 962, 969, 993, 1001, 1017, 1018, 1019], "display_label": [6, 251, 678, 993, 1016], "xticks_rot": [6, 678, 993], "vertic": [6, 17, 59, 121, 170, 186, 230, 231, 261, 275, 299, 302, 332, 334, 380, 389, 392, 397, 495, 678, 761, 993], "tight_layout": [6, 8, 25, 27, 31, 34, 40, 52, 64, 72, 74, 85, 95, 96, 106, 112, 116, 118, 123, 127, 129, 131, 151, 153, 158, 161, 166, 167, 169, 170, 176, 177, 187, 195, 197, 205, 208, 212, 215, 218, 231, 235, 252, 253, 269, 275, 277, 279, 289, 300, 301, 302, 303, 304, 307, 311, 325, 341, 345, 346, 993], "045": [6, 703], "precis": [6, 25, 32, 69, 74, 81, 95, 143, 155, 156, 164, 173, 227, 250, 251, 255, 273, 296, 299, 315, 316, 368, 369, 380, 389, 391, 392, 394, 397, 399, 424, 449, 450, 451, 452, 453, 454, 455, 456, 458, 484, 503, 512, 514, 521, 524, 625, 626, 627, 629, 631, 632, 633, 635, 636, 637, 650, 653, 655, 661, 663, 664, 668, 681, 687, 688, 689, 694, 707, 709, 710, 711, 719, 743, 762, 763, 764, 767, 768, 775, 776, 805, 808, 819, 820, 825, 840, 859, 862, 878, 883, 890, 892, 915, 956, 958, 965, 966, 977, 993, 997, 1004, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "recal": [6, 25, 32, 69, 100, 143, 164, 227, 250, 255, 273, 296, 315, 316, 368, 380, 392, 484, 585, 681, 687, 688, 689, 693, 694, 707, 709, 710, 711, 762, 763, 764, 767, 768, 805, 808, 840, 859, 862, 878, 958, 978, 993, 997, 1007, 1008, 1011, 1013, 1014, 1016, 1017, 1018], "f1": [6, 25, 32, 69, 143, 255, 296, 315, 316, 319, 396, 694, 709, 710, 718, 763, 962, 963, 993, 997, 1008], "support": [6, 7, 8, 9, 10, 16, 24, 27, 30, 32, 46, 69, 71, 94, 108, 114, 120, 128, 133, 142, 143, 168, 198, 207, 208, 209, 215, 231, 232, 238, 251, 255, 262, 264, 277, 296, 299, 303, 311, 315, 316, 319, 320, 323, 324, 327, 328, 330, 332, 335, 338, 355, 356, 357, 358, 362, 366, 368, 369, 371, 372, 374, 376, 377, 379, 380, 381, 392, 396, 397, 400, 402, 418, 421, 430, 432, 433, 444, 446, 447, 449, 454, 467, 476, 492, 518, 520, 521, 524, 527, 529, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 592, 594, 595, 596, 598, 600, 601, 603, 604, 606, 608, 613, 614, 624, 626, 638, 639, 640, 651, 652, 653, 655, 656, 657, 658, 659, 668, 671, 675, 688, 694, 709, 710, 718, 723, 748, 758, 759, 760, 763, 764, 767, 768, 777, 780, 781, 783, 791, 802, 803, 811, 812, 817, 819, 820, 823, 825, 826, 831, 839, 840, 844, 850, 852, 853, 855, 859, 866, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 894, 904, 909, 910, 950, 951, 952, 954, 955, 956, 958, 961, 962, 963, 964, 965, 966, 968, 969, 972, 973, 976, 978, 980, 982, 983, 984, 986, 988, 991, 993, 997, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "ariel": [6, 363, 1004, 1010], "sharon": [6, 363], "69": [6, 8, 188, 304, 316, 392, 451, 452, 588, 589, 736, 962, 972, 995], "colin": [6, 363, 1010], "powel": [6, 363], "87": [6, 32, 69, 158, 296, 316, 578, 648, 768, 777, 855, 866, 962, 997], "donald": [6, 363, 392, 705, 952], "rumsfeld": [6, 363], "63": [6, 8, 365, 399, 537, 538, 545, 546, 706, 777, 791, 888, 889, 962], "georg": [6, 363, 392, 1010, 1016, 1017, 1018, 1019], "bush": [6, 363], "95": [6, 14, 30, 32, 44, 52, 56, 66, 90, 101, 102, 118, 122, 156, 167, 176, 197, 199, 204, 215, 244, 245, 248, 255, 257, 258, 282, 290, 296, 301, 311, 316, 327, 351, 399, 507, 613, 614, 617, 628, 642, 728, 875, 958, 962, 963, 975, 997, 1007], "91": [6, 32, 51, 154, 296, 315, 316, 399, 957, 993, 997], "146": [6, 399], "gerhard": [6, 363], "schroeder": [6, 363], "hugo": [6, 363, 1010, 1015, 1016, 1017, 1018], "chavez": [6, 363], "90": [6, 10, 14, 32, 73, 105, 106, 121, 122, 123, 143, 154, 170, 177, 188, 194, 196, 199, 204, 215, 242, 266, 268, 296, 301, 315, 316, 351, 355, 368, 373, 396, 543, 761, 777, 803, 808, 957, 962, 993, 997], "toni": [6, 363, 543, 859, 968, 1017, 1018], "blair": [6, 363], "93": [6, 32, 197, 239, 296, 316, 340, 365, 768, 777, 803, 886, 957, 962, 993, 997], "83": [6, 30, 34, 39, 69, 296, 315, 365, 369, 402, 688, 766, 962, 993, 997, 1007], "322": [6, 90, 451, 452], "macro": [6, 32, 69, 143, 255, 296, 307, 315, 316, 363, 396, 688, 694, 709, 710, 718, 763, 764, 767, 768, 962, 997, 1004, 1012], "avg": [6, 32, 69, 143, 255, 296, 315, 316, 549, 685, 694, 962, 993, 997], "weight": [6, 13, 14, 19, 24, 32, 54, 69, 106, 110, 122, 130, 131, 142, 143, 154, 162, 164, 167, 175, 186, 188, 197, 201, 202, 211, 212, 213, 215, 216, 237, 242, 255, 260, 264, 266, 280, 289, 292, 293, 296, 297, 304, 307, 310, 315, 316, 322, 329, 338, 340, 341, 342, 351, 364, 365, 376, 378, 380, 392, 394, 395, 397, 398, 401, 403, 409, 413, 418, 421, 424, 425, 427, 429, 433, 439, 443, 444, 445, 447, 449, 454, 462, 463, 464, 476, 495, 504, 518, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 567, 570, 571, 572, 574, 578, 583, 584, 591, 592, 609, 615, 616, 618, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 668, 670, 674, 678, 679, 680, 681, 683, 684, 688, 689, 690, 693, 694, 697, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 714, 715, 716, 718, 719, 720, 721, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 739, 749, 762, 763, 764, 765, 767, 768, 769, 772, 773, 774, 775, 776, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 841, 844, 858, 859, 873, 874, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 903, 904, 917, 937, 943, 952, 953, 958, 959, 961, 962, 964, 965, 966, 967, 969, 975, 976, 977, 978, 983, 988, 995, 997, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "85": [6, 16, 17, 32, 50, 69, 98, 143, 212, 215, 255, 268, 296, 316, 351, 399, 420, 480, 535, 536, 578, 633, 639, 725, 733, 768, 777, 803, 962, 963, 993, 1004], "plot_galleri": [6, 95, 993], "n_row": [6, 19, 95, 389, 407, 431, 433, 491, 493, 993], "n_col": [6, 19, 95, 234, 407, 431, 433, 491, 493, 613, 993], "portrait": [6, 397, 993], "figur": [6, 7, 8, 9, 10, 12, 13, 16, 24, 25, 26, 27, 30, 31, 34, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 50, 51, 52, 54, 55, 57, 58, 60, 61, 62, 63, 64, 66, 77, 81, 84, 88, 89, 90, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 109, 110, 111, 112, 113, 120, 121, 122, 123, 124, 127, 128, 132, 135, 136, 138, 141, 142, 145, 150, 151, 152, 153, 156, 157, 162, 167, 168, 169, 176, 182, 187, 190, 191, 194, 196, 198, 199, 201, 203, 208, 211, 212, 213, 214, 220, 221, 222, 226, 230, 231, 232, 233, 234, 236, 242, 244, 245, 248, 251, 256, 261, 262, 271, 282, 286, 287, 290, 293, 296, 299, 301, 302, 307, 309, 315, 316, 317, 325, 327, 331, 332, 346, 347, 348, 368, 392, 398, 399, 400, 402, 419, 612, 613, 678, 679, 681, 682, 683, 783, 892, 951, 955, 958, 961, 962, 965, 966, 969, 976, 977, 978, 993, 995, 996, 1017], "subplots_adjust": [6, 7, 13, 14, 30, 34, 39, 42, 44, 45, 50, 51, 54, 61, 63, 79, 81, 90, 91, 97, 98, 105, 110, 112, 113, 129, 167, 196, 197, 212, 215, 226, 233, 242, 244, 245, 248, 252, 268, 270, 282, 290, 293, 296, 301, 309, 316, 324, 327, 993], "bottom": [6, 8, 12, 13, 14, 30, 37, 39, 42, 44, 45, 51, 53, 61, 63, 90, 91, 120, 127, 132, 197, 208, 226, 242, 244, 245, 248, 254, 257, 268, 282, 299, 316, 318, 327, 368, 390, 392, 398, 568, 890, 956, 958, 962, 983, 993, 996], "left": [6, 7, 12, 13, 14, 16, 24, 33, 39, 42, 44, 45, 51, 61, 63, 71, 74, 80, 81, 90, 91, 97, 98, 110, 113, 115, 116, 119, 122, 129, 131, 152, 158, 162, 167, 182, 190, 197, 198, 199, 201, 208, 210, 211, 214, 215, 226, 230, 233, 235, 236, 242, 244, 245, 248, 253, 254, 255, 256, 258, 266, 267, 269, 282, 283, 284, 290, 293, 296, 299, 311, 316, 326, 327, 349, 368, 369, 371, 389, 392, 395, 396, 398, 399, 400, 402, 452, 462, 463, 464, 465, 473, 478, 529, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 568, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 616, 620, 624, 632, 636, 775, 776, 777, 780, 781, 784, 791, 852, 859, 886, 887, 888, 889, 890, 902, 915, 933, 936, 951, 954, 956, 958, 960, 962, 964, 969, 974, 976, 978, 992, 993, 995, 996, 1011, 1013, 1018], "01": [6, 8, 10, 13, 15, 16, 28, 35, 40, 44, 51, 61, 67, 75, 84, 95, 97, 98, 113, 120, 121, 123, 126, 127, 133, 146, 154, 158, 159, 167, 168, 178, 181, 188, 204, 209, 210, 215, 216, 218, 219, 226, 230, 231, 232, 236, 240, 244, 248, 249, 251, 256, 257, 258, 262, 264, 265, 273, 282, 291, 294, 299, 305, 308, 313, 329, 338, 341, 347, 348, 350, 363, 365, 372, 392, 401, 429, 451, 495, 512, 519, 523, 576, 577, 579, 623, 627, 635, 639, 659, 677, 696, 777, 791, 872, 931, 958, 962, 966, 972, 974, 976, 993, 997], "right": [6, 7, 11, 12, 13, 14, 16, 31, 39, 42, 43, 44, 45, 51, 53, 59, 61, 63, 78, 79, 81, 90, 91, 97, 98, 100, 103, 105, 109, 110, 112, 113, 114, 122, 123, 124, 131, 142, 149, 152, 162, 187, 198, 199, 200, 201, 203, 204, 207, 208, 226, 229, 230, 242, 244, 245, 247, 248, 252, 253, 257, 260, 264, 267, 268, 270, 282, 290, 293, 296, 299, 301, 304, 316, 327, 329, 335, 337, 340, 346, 349, 351, 358, 368, 378, 381, 389, 392, 395, 397, 398, 399, 402, 444, 462, 463, 464, 465, 514, 521, 524, 537, 538, 539, 540, 541, 542, 544, 545, 546, 568, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 608, 616, 657, 659, 844, 886, 887, 888, 889, 890, 902, 915, 951, 954, 956, 958, 960, 962, 964, 965, 969, 974, 976, 977, 978, 982, 983, 986, 989, 993, 995, 996, 1006, 1012, 1018, 1020], "99": [6, 25, 32, 44, 51, 61, 95, 98, 215, 226, 230, 242, 244, 255, 258, 296, 299, 316, 356, 361, 365, 371, 396, 399, 400, 472, 628, 642, 652, 768, 826, 931, 957, 962, 972, 976, 993, 999, 1006], "hspace": [6, 13, 14, 44, 45, 61, 95, 215, 226, 242, 244, 245, 248, 282, 309, 316, 324, 993], "grai": [6, 13, 46, 47, 50, 51, 53, 95, 98, 124, 195, 197, 215, 230, 233, 234, 264, 295, 365, 397, 473, 474, 482, 501, 993, 996, 1015], "ytick": [6, 11, 30, 40, 44, 46, 50, 51, 52, 57, 58, 61, 81, 84, 89, 98, 120, 123, 136, 142, 151, 152, 153, 157, 180, 187, 193, 210, 226, 233, 243, 244, 245, 248, 252, 271, 281, 290, 296, 315, 327, 331, 332, 333, 340, 993], "portion": [6, 8, 80, 266, 355, 363, 365, 368, 373, 380, 768, 800, 817, 951, 961, 965, 993, 997], "pred_nam": [6, 993], "rsplit": [6, 17, 258, 993], "true_nam": [6, 993], "ntrue": [6, 315, 316, 993], "prediction_titl": [6, 993], "signif": [6, 993], "eigenface_titl": [6, 993], "convolut": [6, 157, 993], "network": [6, 295, 355, 356, 357, 358, 362, 363, 378, 380, 381, 386, 392, 397, 399, 404, 476, 513, 515, 547, 548, 677, 721, 836, 837, 930, 958, 960, 962, 976, 978, 982, 984, 993, 998, 999, 1004, 1018], "famili": [6, 355, 357, 380, 392, 395, 397, 399, 400, 401, 573, 576, 577, 579, 580, 581, 587, 629, 650, 661, 836, 837, 855, 866, 958, 972, 976, 993, 995, 1008, 1018], "outsid": [6, 9, 19, 118, 198, 199, 229, 239, 378, 400, 616, 858, 968, 993, 1012], "scope": [6, 355, 357, 368, 378, 400, 982, 983, 993], "scikit": [6, 8, 10, 12, 16, 17, 31, 32, 50, 69, 84, 115, 129, 143, 146, 158, 162, 164, 167, 185, 186, 215, 225, 238, 239, 250, 254, 273, 277, 282, 284, 306, 313, 340, 341, 345, 346, 351, 356, 357, 358, 360, 362, 363, 364, 365, 367, 368, 370, 373, 374, 375, 376, 379, 380, 385, 386, 388, 389, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 406, 407, 409, 410, 411, 413, 414, 419, 424, 427, 430, 437, 439, 444, 445, 447, 448, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 483, 484, 492, 495, 504, 518, 541, 542, 544, 545, 547, 556, 562, 563, 566, 567, 570, 580, 583, 592, 607, 609, 611, 615, 619, 621, 627, 629, 633, 639, 650, 661, 669, 681, 682, 698, 728, 758, 759, 760, 768, 777, 778, 779, 780, 781, 782, 783, 791, 794, 795, 796, 797, 798, 805, 807, 808, 821, 823, 840, 842, 844, 846, 849, 851, 852, 853, 854, 858, 859, 862, 875, 876, 878, 883, 887, 909, 910, 928, 929, 951, 952, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 972, 975, 976, 977, 978, 981, 985, 991, 992, 993, 995, 996, 999, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "librari": [6, 257, 310, 312, 347, 351, 360, 362, 363, 366, 367, 368, 373, 378, 379, 380, 383, 388, 639, 878, 879, 880, 881, 883, 884, 930, 958, 962, 977, 978, 982, 983, 986, 993, 997, 1002, 1007, 1011, 1012, 1013, 1014, 1015, 1017], "reader": [6, 42, 310, 357, 368, 993], "pytorch": [6, 378, 982, 983, 993], "tensorflow": [6, 378, 982, 993], "implement": [6, 7, 13, 16, 17, 46, 55, 80, 95, 162, 173, 182, 186, 211, 215, 218, 226, 232, 255, 257, 266, 277, 279, 282, 302, 307, 308, 309, 310, 311, 340, 342, 355, 356, 357, 362, 363, 365, 366, 368, 369, 372, 373, 375, 376, 380, 383, 386, 388, 389, 391, 394, 396, 397, 398, 399, 401, 402, 403, 404, 405, 418, 423, 424, 425, 427, 428, 429, 430, 455, 473, 476, 488, 512, 513, 514, 515, 516, 518, 521, 522, 523, 533, 534, 535, 537, 538, 541, 542, 543, 547, 552, 563, 564, 569, 570, 572, 574, 578, 582, 591, 592, 613, 614, 621, 622, 626, 627, 634, 638, 639, 640, 644, 645, 649, 652, 653, 655, 656, 657, 658, 659, 665, 666, 667, 668, 669, 672, 673, 676, 688, 692, 701, 715, 718, 758, 762, 768, 769, 775, 777, 780, 781, 783, 791, 795, 796, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 812, 814, 815, 816, 817, 818, 821, 822, 824, 827, 829, 830, 835, 836, 837, 839, 860, 868, 869, 875, 878, 879, 880, 881, 882, 883, 884, 914, 915, 927, 930, 931, 933, 951, 952, 954, 956, 958, 959, 960, 961, 963, 964, 966, 967, 968, 972, 974, 975, 978, 979, 980, 982, 983, 984, 986, 988, 993, 994, 995, 996, 997, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "313": [6, 15, 995], "plot_face_recognit": [6, 15], "demonstr": [7, 19, 20, 21, 25, 36, 40, 60, 67, 69, 71, 114, 123, 143, 157, 164, 198, 238, 239, 244, 248, 250, 260, 263, 266, 271, 273, 279, 282, 289, 298, 301, 303, 305, 309, 314, 316, 317, 320, 321, 325, 335, 340, 342, 351, 357, 363, 364, 368, 372, 378, 388, 392, 396, 399, 427, 482, 492, 500, 684, 694, 722, 776, 777, 844, 874, 886, 951, 952, 956, 962, 963, 964, 965, 972, 975, 978, 981], "diabet": [7, 123, 132, 134, 139, 146, 162, 164, 184, 185, 186, 193, 194, 253, 361, 399, 481, 633, 634, 777, 782, 800, 801, 802, 970, 988, 992, 999], "regress": [7, 10, 13, 25, 27, 30, 54, 68, 70, 75, 79, 80, 83, 86, 98, 108, 113, 115, 120, 128, 133, 146, 148, 159, 161, 162, 164, 166, 167, 168, 175, 179, 181, 183, 187, 191, 192, 194, 198, 200, 201, 202, 213, 216, 225, 227, 234, 239, 240, 253, 270, 271, 275, 278, 291, 296, 300, 304, 309, 310, 311, 312, 322, 338, 340, 344, 350, 356, 357, 358, 360, 361, 363, 365, 368, 369, 372, 375, 376, 378, 379, 380, 387, 394, 395, 396, 397, 401, 413, 418, 444, 445, 454, 464, 469, 470, 472, 476, 481, 482, 484, 485, 492, 496, 497, 498, 504, 508, 511, 515, 517, 519, 521, 522, 523, 525, 526, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 544, 545, 546, 547, 550, 551, 573, 574, 575, 576, 577, 578, 579, 580, 581, 585, 586, 587, 590, 591, 592, 595, 596, 603, 604, 606, 613, 614, 615, 616, 618, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 675, 682, 687, 702, 703, 704, 708, 721, 722, 725, 726, 727, 728, 729, 730, 731, 732, 733, 765, 777, 780, 781, 783, 791, 802, 803, 805, 806, 810, 812, 813, 821, 822, 827, 829, 830, 836, 837, 839, 840, 843, 844, 846, 852, 853, 854, 856, 859, 862, 867, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 892, 898, 901, 903, 919, 951, 952, 954, 957, 959, 969, 970, 972, 973, 982, 983, 984, 985, 986, 988, 991, 994, 999, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "patient": [7, 132, 146, 162, 365, 375, 396, 958, 995], "diseas": [7, 132, 146, 162, 260, 365, 693, 962, 995], "newsgroup": [7, 14, 19, 230, 258, 319, 341, 342, 361, 389, 400, 468, 469, 989, 999], "post": [7, 14, 19, 69, 164, 311, 340, 341, 342, 344, 350, 355, 363, 367, 368, 371, 372, 379, 392, 428, 468, 469, 480, 693, 805, 886, 962, 978, 986, 997, 1015], "written": [7, 29, 35, 88, 164, 204, 310, 356, 365, 368, 369, 373, 375, 378, 380, 393, 398, 467, 482, 488, 694, 805, 883, 890, 956, 958, 962, 966, 967, 976, 981, 988, 989, 994, 997, 1013], "about": [7, 11, 29, 44, 53, 56, 61, 69, 85, 88, 118, 143, 158, 164, 166, 167, 170, 214, 226, 254, 255, 257, 259, 264, 282, 304, 307, 309, 310, 311, 312, 316, 340, 342, 349, 351, 355, 356, 358, 361, 363, 367, 368, 371, 372, 379, 380, 381, 386, 396, 397, 400, 402, 419, 472, 474, 475, 476, 477, 480, 481, 482, 484, 485, 490, 495, 541, 542, 574, 575, 588, 589, 595, 621, 657, 659, 723, 777, 791, 808, 899, 952, 958, 959, 961, 963, 965, 968, 969, 972, 973, 975, 977, 978, 980, 982, 986, 988, 989, 995, 997, 1009, 1010], "sgdclassifi": [7, 8, 204, 205, 206, 207, 208, 209, 210, 231, 265, 319, 329, 340, 351, 355, 357, 373, 380, 390, 391, 400, 619, 621, 622, 623, 627, 639, 647, 649, 878, 883, 954, 958, 963, 976, 977, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019], "stochast": [7, 57, 121, 124, 164, 173, 175, 216, 220, 222, 226, 231, 285, 286, 292, 297, 310, 392, 397, 399, 442, 468, 476, 482, 483, 484, 494, 502, 516, 524, 539, 540, 551, 585, 608, 620, 639, 640, 649, 653, 655, 657, 658, 659, 660, 668, 669, 670, 671, 673, 805, 828, 835, 836, 837, 840, 849, 882, 914, 915, 936, 951, 965, 966, 968, 984, 998, 999, 1004, 1005, 1008, 1009, 1011, 1013, 1015], "gradient": [7, 46, 65, 108, 115, 126, 129, 132, 133, 154, 155, 164, 175, 216, 226, 231, 299, 380, 392, 402, 432, 442, 446, 447, 468, 476, 481, 483, 484, 495, 500, 533, 534, 539, 540, 541, 542, 551, 567, 591, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 615, 616, 620, 629, 630, 639, 640, 649, 650, 653, 655, 657, 658, 659, 661, 668, 673, 675, 676, 721, 722, 728, 730, 780, 781, 782, 802, 805, 835, 836, 837, 840, 852, 853, 882, 936, 959, 962, 965, 966, 967, 968, 982, 984, 999, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1017, 1019], "descent": [7, 13, 164, 175, 182, 216, 226, 231, 310, 397, 399, 451, 452, 458, 468, 476, 483, 511, 517, 518, 519, 520, 522, 523, 525, 526, 527, 528, 551, 620, 627, 628, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 649, 653, 655, 657, 658, 659, 662, 663, 664, 665, 668, 675, 805, 836, 837, 840, 878, 882, 936, 959, 966, 968, 977, 984, 995, 999, 1004, 1007, 1008, 1009, 1011, 1013, 1015, 1017, 1018, 1019], "nusvr": [7, 355, 884, 977, 1006, 1012, 1014, 1015, 1016, 1018, 1019], "nu": [7, 9, 11, 158, 211, 226, 326, 355, 399, 402, 600, 658, 880, 881, 882, 968, 976, 977, 1015, 1019], "vector": [7, 8, 9, 10, 12, 14, 16, 19, 20, 26, 27, 30, 32, 36, 40, 48, 67, 71, 88, 95, 97, 142, 149, 157, 178, 184, 201, 202, 209, 213, 231, 232, 235, 238, 255, 257, 258, 262, 283, 296, 299, 320, 323, 324, 326, 327, 328, 330, 331, 332, 335, 337, 338, 341, 355, 357, 358, 372, 373, 376, 378, 380, 389, 390, 392, 394, 395, 396, 397, 399, 402, 403, 404, 418, 424, 425, 426, 427, 429, 430, 431, 433, 444, 445, 447, 448, 462, 463, 464, 465, 467, 469, 477, 489, 492, 501, 504, 511, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 531, 532, 547, 548, 549, 550, 562, 563, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 598, 599, 600, 601, 603, 604, 606, 619, 621, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 653, 654, 655, 656, 657, 658, 659, 667, 668, 669, 670, 672, 673, 674, 676, 680, 700, 715, 743, 748, 749, 750, 751, 753, 754, 755, 757, 758, 777, 780, 781, 791, 803, 806, 807, 808, 814, 815, 816, 817, 818, 821, 822, 823, 825, 826, 827, 829, 830, 831, 836, 837, 844, 846, 851, 859, 862, 865, 876, 878, 879, 880, 881, 882, 883, 884, 885, 898, 912, 914, 915, 925, 931, 951, 954, 955, 956, 958, 959, 960, 962, 963, 964, 966, 967, 968, 972, 976, 978, 984, 988, 991, 994, 997, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1013, 1015, 1017], "gradientboostingregressor": [7, 122, 123, 129, 132, 355, 372, 378, 399, 534, 542, 613, 614, 958, 962, 963, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "forward": [7, 146, 309, 355, 368, 401, 488, 489, 519, 523, 533, 539, 540, 566, 567, 583, 666, 667, 843, 958, 983, 1016], "wise": [7, 26, 48, 157, 198, 226, 267, 299, 341, 355, 380, 390, 392, 396, 397, 401, 438, 511, 514, 517, 521, 525, 526, 529, 530, 533, 535, 536, 539, 540, 573, 576, 577, 579, 580, 581, 587, 621, 633, 681, 734, 807, 856, 868, 869, 872, 935, 937, 938, 939, 940, 943, 954, 956, 962, 963, 976, 983, 1004, 1009, 1012, 1013, 1014], "fashion": [7, 115, 120, 205, 266, 356, 380, 389, 390, 397, 399, 533, 537, 538, 539, 540, 544, 545, 546, 583, 608, 805, 828, 843, 846, 852, 862, 886, 887, 888, 889, 933, 952, 958, 972, 1013], "notic": [7, 25, 26, 53, 56, 79, 113, 115, 122, 145, 176, 226, 238, 254, 255, 257, 258, 260, 266, 267, 277, 304, 340, 341, 342, 351, 372, 396, 476, 521, 543, 951, 961, 962, 968, 997, 1001, 1017], "faster": [7, 19, 39, 63, 72, 95, 110, 115, 119, 122, 146, 168, 173, 183, 197, 199, 212, 213, 215, 232, 277, 279, 295, 308, 310, 311, 340, 341, 342, 355, 362, 368, 375, 376, 380, 391, 392, 397, 401, 402, 404, 424, 427, 429, 431, 432, 433, 442, 488, 511, 512, 513, 516, 517, 518, 519, 520, 522, 523, 525, 526, 527, 528, 533, 539, 540, 541, 542, 624, 627, 628, 633, 634, 639, 640, 641, 642, 643, 644, 653, 655, 665, 668, 672, 676, 680, 706, 736, 758, 759, 760, 819, 820, 824, 836, 837, 854, 856, 858, 867, 871, 915, 931, 951, 955, 958, 963, 965, 966, 969, 974, 976, 977, 978, 982, 985, 993, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "10_000": [7, 25, 74, 115, 122, 166, 173, 230, 260, 277, 539, 540, 856], "vari": [7, 34, 44, 46, 61, 74, 116, 118, 145, 164, 167, 168, 186, 188, 191, 195, 223, 231, 247, 253, 257, 260, 292, 297, 299, 304, 314, 321, 327, 330, 351, 355, 357, 363, 380, 422, 426, 480, 488, 494, 495, 502, 539, 540, 544, 545, 627, 628, 631, 632, 633, 634, 635, 636, 641, 642, 643, 644, 662, 665, 684, 743, 796, 803, 805, 806, 836, 840, 844, 859, 875, 883, 886, 887, 936, 954, 957, 958, 962, 965, 966, 975, 978, 986, 1011, 1012], "relev": [7, 9, 19, 76, 82, 144, 164, 176, 191, 257, 258, 264, 351, 355, 357, 363, 365, 367, 368, 369, 371, 372, 373, 380, 394, 395, 401, 402, 450, 454, 514, 521, 626, 636, 706, 720, 736, 780, 781, 808, 857, 859, 890, 891, 892, 962, 963, 968, 979, 983, 1007, 1012, 1016, 1018], "select": [7, 9, 36, 44, 56, 61, 67, 68, 70, 73, 75, 81, 91, 93, 107, 112, 117, 119, 122, 129, 136, 143, 147, 154, 156, 167, 168, 170, 173, 175, 177, 205, 212, 215, 216, 219, 226, 230, 232, 241, 242, 249, 255, 256, 257, 258, 262, 281, 299, 304, 309, 315, 316, 319, 322, 327, 335, 338, 340, 341, 342, 351, 355, 356, 358, 363, 365, 366, 368, 369, 375, 379, 380, 389, 392, 393, 394, 397, 399, 400, 402, 424, 426, 427, 429, 431, 433, 438, 439, 440, 444, 446, 447, 452, 453, 456, 468, 469, 472, 473, 476, 477, 481, 482, 484, 492, 495, 512, 514, 515, 520, 521, 524, 529, 531, 538, 539, 540, 543, 545, 562, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 608, 612, 613, 626, 627, 628, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 652, 654, 657, 659, 663, 664, 672, 673, 678, 693, 697, 699, 734, 770, 771, 775, 776, 777, 780, 781, 782, 783, 791, 801, 802, 803, 805, 807, 821, 822, 823, 825, 827, 829, 830, 831, 839, 840, 844, 849, 855, 859, 875, 878, 879, 883, 886, 887, 888, 889, 894, 931, 932, 956, 957, 959, 962, 963, 965, 966, 968, 972, 975, 976, 977, 978, 979, 982, 983, 984, 986, 988, 989, 991, 995, 996, 997, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019], "ham": [7, 430, 437, 562, 680, 684, 690, 714, 721, 758, 759, 760, 774, 965], "loss": [7, 24, 25, 26, 27, 93, 107, 120, 121, 122, 123, 124, 149, 150, 164, 175, 179, 187, 190, 199, 202, 204, 205, 209, 215, 216, 232, 265, 294, 295, 304, 310, 319, 324, 325, 329, 335, 340, 378, 380, 390, 391, 397, 402, 444, 445, 476, 488, 489, 512, 518, 519, 520, 523, 527, 532, 533, 534, 538, 539, 540, 541, 542, 545, 624, 627, 630, 639, 640, 647, 648, 649, 650, 651, 652, 653, 657, 658, 659, 660, 684, 687, 690, 703, 714, 715, 720, 721, 722, 725, 726, 727, 728, 729, 730, 731, 732, 733, 774, 777, 780, 781, 791, 801, 802, 805, 836, 837, 839, 840, 843, 844, 852, 853, 854, 859, 878, 879, 884, 885, 887, 889, 915, 919, 955, 958, 966, 970, 975, 976, 977, 978, 997, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "eustach": [7, 8, 10, 986, 1006, 1007], "diemert": [7, 8, 10, 986, 1006, 1007], "maria": [7, 123, 129, 146, 162, 392, 1015, 1016, 1017, 1018, 1019], "telenczuk": [7, 123, 129, 146, 162, 1013, 1016, 1017, 1019], "github": [7, 8, 12, 26, 70, 71, 109, 115, 116, 117, 123, 125, 126, 129, 132, 143, 154, 162, 167, 168, 169, 178, 227, 228, 229, 236, 237, 238, 239, 247, 255, 257, 258, 264, 269, 277, 296, 308, 309, 311, 312, 317, 349, 362, 366, 367, 370, 371, 372, 373, 375, 378, 380, 381, 383, 386, 388, 432, 442, 488, 516, 672, 673, 676, 965, 981, 982, 985, 986, 997, 1009, 1014], "com": [7, 8, 11, 12, 14, 16, 20, 21, 24, 42, 48, 56, 64, 69, 70, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 149, 152, 154, 156, 158, 162, 177, 197, 199, 204, 214, 215, 219, 221, 223, 229, 242, 244, 245, 258, 261, 277, 299, 300, 303, 304, 340, 341, 362, 363, 366, 368, 371, 372, 373, 375, 378, 383, 392, 423, 432, 442, 488, 514, 516, 521, 652, 672, 676, 686, 965, 980, 985, 1009, 1011, 1014], "maikia": [7, 123, 129, 162, 1012, 1013, 1015, 1016], "lemaitre58": [7, 129, 149, 154, 156, 158, 219, 299], "gmail": [7, 11, 14, 16, 24, 42, 48, 56, 64, 69, 70, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 149, 152, 154, 156, 158, 177, 197, 199, 214, 215, 219, 221, 229, 242, 244, 245, 258, 261, 299, 304, 340, 341], "licens": [7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 56, 60, 64, 65, 66, 69, 70, 72, 73, 74, 81, 88, 89, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 173, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 202, 204, 205, 213, 214, 215, 219, 220, 221, 223, 226, 229, 231, 232, 233, 235, 242, 244, 258, 261, 263, 270, 275, 277, 279, 285, 286, 287, 289, 290, 293, 296, 299, 300, 301, 302, 303, 304, 315, 316, 317, 318, 320, 331, 332, 335, 336, 340, 341, 342, 362, 380, 386, 978, 986], "mean_squared_error": [7, 122, 123, 193, 197, 199, 201, 203, 215, 351, 399, 722, 732, 962, 1005, 1007, 1014, 1015], "hamming_loss": [7, 684, 774, 962, 1006, 1010, 1013], "seed": [7, 11, 26, 34, 39, 40, 44, 45, 52, 54, 56, 58, 59, 61, 63, 64, 70, 77, 78, 79, 91, 96, 101, 102, 113, 118, 138, 141, 169, 181, 187, 192, 195, 200, 203, 206, 210, 214, 221, 243, 245, 246, 247, 248, 260, 263, 271, 282, 283, 284, 289, 332, 333, 337, 341, 351, 356, 369, 376, 378, 380, 392, 396, 397, 424, 427, 428, 430, 432, 437, 439, 440, 441, 442, 451, 452, 453, 516, 524, 533, 534, 535, 536, 539, 540, 608, 627, 628, 633, 634, 641, 642, 643, 644, 658, 670, 672, 674, 676, 775, 776, 781, 810, 813, 828, 881, 901, 914, 915, 927, 931, 951, 952, 957, 959, 995, 1008, 1009, 1013, 1014], "fetch_20newsgroups_vector": [7, 212, 230, 363, 1004, 1014, 1016], "spars": [7, 12, 13, 17, 39, 40, 54, 56, 76, 82, 93, 107, 115, 127, 164, 175, 192, 196, 213, 216, 230, 232, 258, 277, 308, 312, 335, 339, 342, 343, 349, 355, 360, 362, 363, 364, 368, 369, 370, 371, 372, 378, 379, 380, 391, 392, 393, 399, 400, 402, 403, 407, 419, 421, 423, 424, 425, 427, 429, 430, 431, 432, 433, 437, 439, 440, 442, 443, 444, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 467, 468, 469, 476, 477, 483, 488, 503, 504, 506, 507, 508, 509, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 533, 534, 535, 536, 537, 538, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 566, 567, 569, 570, 571, 572, 574, 575, 584, 585, 586, 587, 588, 589, 590, 610, 611, 612, 619, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 676, 677, 678, 679, 681, 682, 683, 684, 693, 694, 695, 709, 710, 711, 714, 718, 719, 720, 734, 735, 740, 741, 743, 747, 748, 758, 759, 760, 761, 763, 764, 765, 767, 774, 777, 780, 781, 791, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 821, 822, 823, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 842, 843, 844, 846, 848, 849, 850, 851, 852, 854, 856, 857, 859, 860, 861, 862, 863, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 894, 896, 897, 898, 899, 904, 912, 915, 916, 919, 920, 921, 925, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 948, 952, 955, 958, 959, 960, 962, 963, 965, 975, 977, 978, 983, 984, 995, 996, 997, 998, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "generate_data": [7, 33], "load_diabet": [7, 123, 132, 135, 146, 162, 182, 184, 185, 186, 193, 194, 236, 253, 312, 399, 538, 542, 548, 654, 682, 800, 801, 802, 887, 889, 970, 992, 995, 1010, 1015, 1018], "elif": [7, 8, 16, 34, 177, 199, 233, 235, 244, 282, 855], "subset": [7, 19, 26, 27, 32, 69, 70, 79, 80, 116, 118, 119, 135, 143, 186, 198, 212, 213, 214, 215, 229, 231, 234, 235, 255, 258, 260, 266, 267, 269, 304, 309, 315, 319, 340, 341, 342, 351, 363, 368, 375, 378, 380, 389, 390, 392, 393, 396, 399, 400, 402, 409, 418, 429, 444, 446, 447, 449, 468, 469, 472, 473, 477, 488, 529, 530, 531, 533, 535, 536, 537, 539, 541, 542, 543, 544, 547, 549, 583, 591, 610, 620, 621, 622, 623, 632, 636, 639, 647, 649, 652, 655, 656, 657, 658, 659, 660, 678, 684, 685, 694, 697, 699, 711, 714, 735, 737, 771, 774, 779, 803, 805, 807, 808, 809, 810, 814, 815, 816, 817, 818, 821, 826, 829, 836, 845, 873, 874, 878, 880, 883, 886, 888, 894, 931, 951, 958, 962, 963, 973, 975, 977, 978, 997, 1007, 1012, 1013, 1015, 1017], "regression_data": 7, "classification_data": 7, "calcul": [7, 33, 46, 58, 79, 108, 114, 130, 133, 162, 164, 170, 193, 202, 214, 231, 256, 257, 263, 267, 271, 275, 325, 332, 351, 355, 374, 380, 389, 390, 392, 396, 397, 399, 403, 419, 422, 424, 425, 426, 428, 430, 431, 433, 435, 436, 451, 452, 458, 461, 516, 533, 544, 549, 578, 592, 601, 613, 614, 615, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 653, 654, 655, 656, 660, 662, 665, 669, 671, 673, 675, 688, 697, 709, 710, 715, 716, 718, 724, 734, 744, 749, 751, 752, 753, 754, 758, 761, 763, 764, 767, 768, 769, 770, 771, 773, 784, 786, 800, 804, 817, 819, 820, 857, 858, 859, 864, 868, 878, 879, 904, 917, 954, 956, 958, 959, 960, 962, 964, 965, 966, 970, 972, 975, 977, 992, 995, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "given": [7, 10, 11, 27, 37, 49, 57, 59, 77, 84, 96, 100, 125, 127, 129, 149, 156, 167, 168, 197, 198, 215, 219, 226, 230, 231, 234, 236, 253, 257, 258, 259, 260, 266, 283, 284, 285, 301, 310, 335, 340, 341, 342, 348, 355, 357, 363, 367, 368, 369, 371, 373, 375, 376, 378, 380, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 409, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 436, 438, 439, 440, 441, 443, 444, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 458, 461, 462, 463, 464, 467, 476, 481, 483, 485, 503, 516, 518, 519, 520, 523, 527, 529, 530, 531, 532, 533, 534, 535, 537, 539, 540, 541, 542, 543, 544, 547, 548, 549, 550, 569, 570, 571, 572, 574, 582, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 612, 613, 625, 627, 630, 632, 633, 634, 636, 639, 640, 642, 644, 647, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 668, 669, 672, 678, 679, 680, 681, 682, 683, 685, 686, 687, 693, 695, 698, 699, 701, 704, 706, 707, 714, 716, 717, 720, 732, 735, 736, 738, 739, 744, 754, 758, 761, 762, 764, 767, 768, 769, 772, 773, 775, 776, 777, 780, 781, 783, 789, 791, 795, 801, 802, 803, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 846, 849, 850, 852, 853, 854, 855, 856, 858, 859, 864, 865, 867, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 888, 893, 902, 903, 904, 946, 950, 951, 954, 956, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 972, 975, 976, 977, 978, 986, 988, 992, 993, 995, 996, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "round": [7, 9, 25, 84, 161, 162, 204, 215, 257, 263, 301, 303, 340, 430, 436, 437, 574, 575, 578, 608, 673, 694, 779, 789, 844, 875, 890, 892, 952, 966, 978, 1006, 1008, 1010, 1012, 1013, 1015, 1017, 1018], "changing_param": 7, "collect": [7, 9, 10, 12, 16, 19, 25, 79, 114, 125, 132, 146, 154, 162, 170, 185, 190, 211, 221, 229, 260, 283, 326, 329, 341, 342, 355, 363, 365, 371, 383, 396, 397, 399, 400, 402, 444, 533, 534, 535, 536, 537, 538, 539, 540, 543, 544, 545, 546, 549, 550, 562, 564, 565, 569, 570, 571, 572, 613, 779, 783, 784, 786, 933, 936, 951, 957, 958, 962, 968, 973, 983, 986, 992, 997, 1006, 1016], "chang": [7, 16, 25, 26, 95, 99, 100, 113, 123, 150, 161, 166, 167, 170, 198, 199, 201, 202, 236, 237, 252, 257, 264, 267, 303, 307, 308, 309, 310, 311, 312, 316, 327, 342, 351, 355, 356, 357, 363, 366, 369, 370, 371, 372, 375, 378, 380, 390, 392, 396, 399, 400, 402, 415, 418, 421, 427, 429, 432, 434, 439, 442, 448, 451, 452, 458, 473, 474, 476, 484, 488, 489, 492, 493, 494, 502, 511, 515, 516, 517, 518, 519, 520, 526, 527, 529, 530, 531, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 553, 555, 557, 558, 559, 561, 562, 563, 569, 570, 572, 574, 575, 578, 583, 591, 592, 594, 595, 596, 598, 600, 601, 603, 604, 606, 608, 616, 628, 630, 631, 632, 634, 635, 636, 637, 639, 640, 642, 644, 645, 646, 651, 653, 655, 660, 668, 673, 681, 685, 688, 693, 697, 698, 709, 710, 716, 717, 721, 735, 736, 737, 758, 764, 765, 767, 773, 775, 776, 777, 778, 779, 780, 781, 782, 791, 795, 796, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 811, 812, 814, 815, 816, 818, 819, 820, 825, 826, 838, 841, 843, 852, 866, 867, 872, 873, 876, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 896, 898, 899, 910, 915, 928, 929, 930, 932, 951, 952, 953, 961, 962, 963, 965, 972, 975, 976, 977, 978, 980, 983, 988, 995, 997, 1002, 1003], "affect": [7, 25, 79, 156, 166, 167, 201, 222, 236, 260, 267, 304, 351, 355, 356, 357, 364, 380, 382, 392, 395, 396, 398, 400, 403, 405, 425, 430, 437, 453, 455, 459, 529, 530, 549, 693, 768, 777, 780, 781, 782, 791, 795, 796, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 859, 869, 883, 961, 965, 977, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017], "complexity_comput": [7, 10], "benchmark_influ": 7, "conf": [7, 27, 371, 390, 396, 814, 964, 1018], "prediction_tim": [7, 8], "prediction_pow": 7, "param_valu": 7, "changing_param_valu": 7, "tuned_param": 7, "postfit_hook": 7, "append": [7, 8, 12, 16, 17, 25, 33, 37, 40, 44, 50, 60, 70, 103, 110, 113, 114, 120, 122, 136, 162, 170, 190, 201, 202, 204, 205, 212, 215, 231, 232, 257, 260, 266, 267, 270, 275, 293, 294, 318, 327, 330, 340, 341, 342, 345, 349, 373, 380, 393, 400, 639, 640, 878, 879, 885, 905, 972, 992], "start_tim": [7, 10, 19, 116, 117, 129, 149, 186, 219], "elapsed_tim": [7, 39, 66, 116, 117, 129, 214], "float": [7, 10, 12, 16, 19, 41, 45, 46, 47, 48, 53, 59, 60, 64, 65, 66, 70, 98, 102, 138, 157, 167, 183, 187, 221, 256, 257, 261, 265, 335, 342, 355, 362, 363, 368, 376, 380, 392, 393, 400, 401, 403, 404, 405, 409, 411, 413, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 434, 435, 436, 437, 438, 439, 441, 442, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 467, 472, 473, 474, 476, 478, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 504, 505, 507, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 564, 565, 569, 572, 573, 574, 575, 576, 577, 578, 579, 583, 584, 591, 592, 594, 595, 596, 597, 598, 600, 601, 603, 604, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 739, 746, 749, 755, 756, 757, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 783, 791, 794, 797, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 833, 835, 836, 837, 839, 842, 845, 846, 852, 853, 855, 857, 859, 860, 861, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 896, 898, 899, 902, 912, 913, 925, 937, 943, 948, 952, 962, 963, 965, 966, 972, 977, 978, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "pred_scor": 7, "prediction_performance_comput": 7, "4f": [7, 8, 19, 113, 121, 123, 212, 213, 215, 304], "prediction_performance_label": 7, "dictionari": [7, 8, 36, 67, 93, 107, 126, 164, 196, 341, 342, 361, 362, 363, 369, 378, 380, 392, 400, 429, 444, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 487, 490, 506, 511, 517, 518, 519, 520, 522, 523, 524, 525, 526, 528, 547, 548, 549, 550, 562, 563, 565, 568, 569, 570, 613, 614, 615, 645, 666, 667, 682, 694, 777, 780, 781, 788, 789, 791, 802, 838, 843, 852, 886, 887, 888, 889, 893, 903, 951, 958, 962, 977, 988, 997, 998, 999, 1004, 1012, 1015, 1016, 1017, 1018, 1019], "necessari": [7, 13, 114, 197, 202, 242, 257, 258, 264, 279, 347, 355, 363, 366, 367, 368, 369, 370, 371, 373, 375, 378, 392, 394, 399, 432, 442, 468, 469, 471, 472, 473, 474, 475, 477, 514, 625, 626, 627, 633, 637, 638, 641, 642, 643, 644, 645, 646, 652, 654, 656, 657, 672, 676, 773, 842, 851, 861, 865, 871, 951, 954, 958, 961, 964, 972, 978, 997, 1004, 1012], "defin": [7, 9, 12, 27, 53, 56, 65, 69, 70, 72, 85, 95, 100, 109, 110, 111, 129, 146, 149, 156, 157, 158, 168, 169, 176, 198, 201, 205, 214, 215, 226, 230, 236, 238, 242, 247, 257, 258, 260, 264, 266, 267, 268, 269, 277, 299, 308, 327, 335, 340, 341, 355, 364, 367, 368, 369, 373, 374, 376, 378, 379, 380, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 402, 408, 412, 413, 414, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 439, 443, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 469, 499, 500, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 603, 604, 608, 609, 610, 611, 613, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 677, 678, 680, 689, 691, 697, 702, 703, 704, 705, 708, 711, 718, 721, 725, 726, 728, 730, 731, 733, 734, 737, 740, 746, 761, 765, 770, 771, 775, 776, 777, 780, 781, 783, 791, 802, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 865, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 902, 904, 907, 913, 946, 951, 952, 958, 959, 960, 961, 963, 964, 965, 967, 968, 969, 970, 972, 974, 976, 977, 978, 983, 993, 996, 999, 1001, 1006, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019], "complexity_label": [7, 10], "type": [7, 16, 53, 54, 68, 69, 75, 80, 89, 105, 118, 121, 154, 164, 166, 167, 168, 173, 197, 199, 239, 241, 244, 247, 249, 252, 263, 264, 266, 267, 331, 335, 340, 342, 349, 351, 356, 358, 361, 362, 363, 365, 366, 368, 370, 371, 372, 373, 378, 379, 383, 386, 388, 389, 393, 400, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 476, 488, 489, 495, 547, 552, 562, 563, 566, 567, 569, 570, 572, 581, 585, 598, 608, 610, 611, 619, 637, 639, 653, 655, 660, 668, 670, 673, 674, 682, 688, 695, 697, 709, 710, 718, 721, 763, 764, 767, 768, 775, 776, 777, 783, 791, 803, 805, 806, 821, 822, 823, 825, 826, 827, 829, 830, 831, 832, 833, 839, 840, 841, 844, 846, 852, 853, 859, 880, 881, 882, 883, 884, 894, 896, 898, 899, 902, 906, 907, 925, 926, 933, 936, 949, 952, 954, 959, 961, 962, 963, 964, 965, 966, 972, 974, 978, 985, 986, 990, 995, 996, 997, 1004, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "_count_nonzero_coeffici": 7, "coef_": [7, 10, 13, 54, 84, 142, 143, 146, 166, 167, 176, 179, 181, 182, 183, 187, 188, 189, 190, 191, 192, 193, 196, 200, 201, 202, 206, 212, 213, 233, 239, 270, 311, 325, 332, 336, 340, 351, 363, 369, 380, 395, 401, 445, 462, 463, 464, 529, 574, 575, 578, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 878, 879, 880, 881, 882, 883, 884, 946, 956, 958, 976, 977, 995, 1004, 1006, 1009, 1011, 1016, 1018], "toarrai": [7, 319, 349, 393, 400, 546, 563, 569, 571, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 852, 868, 869, 933, 936, 952, 965, 972], "count_nonzero": [7, 10, 355], "configur": [7, 10, 70, 71, 168, 237, 239, 340, 354, 366, 368, 369, 373, 375, 378, 380, 383, 388, 393, 400, 401, 414, 423, 424, 426, 427, 429, 432, 442, 444, 448, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 546, 547, 548, 549, 550, 562, 563, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 607, 608, 609, 610, 611, 613, 616, 619, 620, 621, 622, 623, 669, 670, 671, 672, 675, 676, 768, 823, 828, 831, 835, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 876, 928, 929, 959, 962, 972, 977, 982, 997, 999, 1008, 1011, 1012, 1013, 1014, 1016, 1018, 1019], "penalti": [7, 10, 30, 81, 164, 175, 176, 186, 190, 197, 212, 213, 216, 228, 265, 293, 310, 319, 332, 340, 355, 375, 378, 391, 394, 397, 401, 451, 452, 453, 454, 455, 456, 458, 482, 511, 517, 518, 519, 520, 522, 523, 527, 528, 578, 624, 627, 628, 629, 630, 633, 634, 635, 638, 639, 640, 641, 642, 643, 649, 650, 651, 653, 657, 659, 661, 662, 668, 791, 859, 878, 879, 881, 883, 884, 885, 951, 958, 961, 966, 972, 976, 977, 995, 997, 1006, 1009, 1011, 1013, 1014, 1016, 1017, 1019], "elasticnet": [7, 10, 178, 188, 265, 270, 355, 373, 378, 397, 628, 633, 638, 639, 640, 641, 642, 643, 644, 649, 657, 659, 662, 958, 976, 1004, 1005, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1017, 1018], "001": [7, 13, 32, 44, 61, 94, 149, 167, 206, 226, 242, 255, 257, 259, 318, 341, 365, 373, 396, 516, 517, 519, 526, 608, 625, 626, 627, 628, 633, 634, 641, 642, 643, 644, 647, 648, 649, 657, 658, 659, 660, 662, 665, 670, 671, 674, 675, 775, 776, 836, 837, 873, 874, 880, 881, 882, 883, 884, 951, 988, 997], "modified_hub": [7, 657, 976], "fit_intercept": [7, 176, 177, 183, 202, 211, 226, 265, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 668, 878, 879, 885, 958, 976, 1008, 1012, 1013, 1014, 1016, 1017, 1018], "tol": [7, 10, 17, 72, 95, 120, 161, 177, 188, 190, 204, 205, 211, 213, 226, 236, 245, 296, 310, 335, 340, 369, 373, 399, 404, 424, 427, 429, 432, 439, 442, 451, 452, 458, 462, 463, 464, 511, 512, 513, 515, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 529, 530, 539, 540, 541, 542, 583, 608, 619, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 653, 655, 657, 658, 659, 660, 661, 663, 664, 666, 667, 668, 669, 670, 672, 674, 676, 775, 776, 791, 828, 836, 837, 873, 874, 878, 879, 880, 881, 882, 883, 884, 948, 958, 976, 977, 993, 997, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "n_iter_no_chang": [7, 120, 205, 310, 340, 372, 380, 399, 539, 540, 541, 542, 647, 648, 649, 657, 658, 659, 836, 837, 976, 1012, 1015], "l1_ratio": [7, 10, 14, 181, 182, 188, 265, 270, 355, 378, 397, 518, 520, 527, 627, 628, 633, 639, 640, 641, 642, 643, 644, 649, 657, 659, 662, 958, 976, 1005, 1007, 1009, 1016, 1018], "non_zero": [7, 12], "coeffici": [7, 10, 38, 49, 57, 59, 77, 78, 81, 95, 98, 143, 164, 165, 166, 171, 175, 181, 182, 183, 184, 188, 190, 191, 192, 193, 194, 195, 199, 200, 212, 215, 216, 239, 295, 309, 310, 311, 340, 341, 342, 355, 364, 368, 369, 380, 382, 391, 394, 395, 397, 401, 402, 405, 413, 432, 445, 447, 453, 455, 456, 458, 459, 460, 461, 462, 463, 464, 476, 504, 506, 507, 511, 515, 517, 519, 522, 523, 528, 532, 534, 536, 538, 540, 542, 545, 548, 550, 563, 570, 574, 578, 590, 592, 595, 608, 616, 617, 620, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 684, 697, 700, 709, 714, 718, 723, 730, 733, 755, 757, 765, 766, 770, 771, 774, 792, 802, 805, 812, 813, 822, 830, 837, 840, 852, 859, 878, 879, 880, 881, 882, 883, 884, 887, 889, 953, 956, 958, 976, 977, 995, 1004, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1018], "misclassif": [7, 774, 976, 977, 978, 1005], "ratio": [7, 53, 65, 72, 104, 164, 230, 232, 245, 250, 273, 355, 368, 392, 394, 396, 399, 430, 436, 473, 474, 495, 521, 529, 530, 531, 639, 691, 693, 697, 705, 716, 719, 762, 763, 764, 767, 773, 802, 805, 825, 871, 931, 956, 968, 978, 993, 1019], "sparsifi": [7, 181, 355, 639, 640, 647, 649, 657, 658, 659, 878, 946, 1006], "05": [7, 8, 14, 24, 26, 30, 37, 44, 52, 59, 61, 63, 64, 66, 67, 74, 84, 90, 100, 113, 120, 122, 127, 135, 139, 142, 154, 157, 158, 167, 171, 177, 178, 196, 199, 211, 222, 223, 224, 226, 242, 244, 245, 248, 257, 258, 264, 266, 267, 268, 273, 282, 285, 290, 299, 301, 307, 311, 316, 318, 321, 332, 341, 343, 365, 401, 430, 436, 573, 576, 577, 579, 594, 595, 596, 600, 601, 603, 604, 606, 613, 614, 630, 671, 675, 736, 777, 828, 878, 879, 958, 966, 972], "n_support_vector": 7, "len": [7, 8, 10, 11, 16, 17, 19, 30, 31, 32, 37, 38, 41, 43, 44, 49, 50, 51, 59, 60, 61, 62, 63, 64, 69, 71, 98, 101, 105, 106, 110, 113, 118, 119, 120, 137, 138, 144, 145, 149, 157, 162, 168, 170, 196, 197, 215, 221, 226, 229, 230, 231, 234, 235, 242, 244, 245, 252, 255, 257, 258, 265, 266, 268, 271, 275, 277, 284, 286, 287, 293, 300, 301, 302, 315, 316, 319, 327, 334, 337, 340, 341, 342, 349, 378, 380, 402, 418, 426, 430, 436, 444, 487, 495, 530, 549, 550, 563, 578, 613, 614, 762, 777, 791, 801, 805, 807, 810, 873, 874, 995, 996, 997, 1013, 1016], "support_vectors_": [7, 10, 16, 328, 331, 332, 880, 881, 882, 883, 884, 977], "squared_error": [7, 105, 122, 123, 310, 399, 538, 539, 540, 542, 545, 652, 657, 659, 674, 887, 889, 976, 1017], "learning_r": [7, 109, 110, 121, 122, 123, 124, 223, 277, 294, 296, 308, 310, 399, 533, 534, 539, 540, 541, 542, 649, 657, 658, 659, 673, 835, 836, 837, 959, 969, 976, 1005, 1013, 1017], "max_depth": [7, 31, 109, 110, 111, 112, 115, 118, 121, 122, 123, 124, 127, 128, 130, 161, 219, 254, 269, 309, 310, 345, 347, 348, 349, 379, 380, 399, 533, 534, 537, 538, 539, 540, 541, 542, 544, 545, 546, 780, 781, 803, 886, 887, 888, 889, 890, 891, 892, 951, 969, 978, 1013, 1015], "n_estim": [7, 10, 26, 31, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 127, 128, 131, 161, 170, 219, 234, 238, 244, 254, 269, 301, 307, 309, 355, 379, 380, 399, 401, 533, 534, 535, 536, 537, 538, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 613, 780, 781, 951, 968, 969, 1001, 1012], "n_tree": 7, "loop": [7, 8, 113, 122, 167, 252, 262, 340, 349, 355, 368, 373, 392, 396, 401, 627, 628, 633, 634, 640, 641, 642, 643, 644, 951, 975, 976, 992, 1007, 1008, 1011, 1016, 1017], "previous": [7, 53, 56, 70, 155, 167, 255, 264, 311, 363, 375, 378, 383, 392, 397, 400, 421, 424, 434, 504, 514, 521, 630, 639, 640, 647, 649, 657, 658, 659, 878, 930, 958, 972, 982, 1001, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "subsequ": [7, 32, 57, 74, 98, 143, 185, 199, 259, 262, 277, 279, 327, 351, 368, 369, 373, 380, 392, 393, 399, 402, 418, 476, 488, 533, 534, 539, 541, 542, 647, 649, 657, 780, 781, 807, 808, 811, 814, 815, 816, 817, 818, 836, 854, 858, 952, 961, 963, 1013, 1014, 1018], "relax": [7, 392, 400, 433, 975, 1011], "sgd": [7, 8, 164, 175, 204, 211, 216, 226, 265, 294, 295, 310, 340, 351, 357, 484, 492, 630, 647, 648, 649, 652, 657, 658, 659, 660, 836, 837, 951, 966, 984, 999, 1004, 1007, 1008, 1009, 1011, 1015, 1017], "svr": [7, 10, 164, 225, 240, 307, 322, 338, 355, 536, 547, 548, 574, 575, 624, 659, 777, 879, 881, 883, 955, 995, 1004, 1006, 1008, 1009, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "optim": [7, 13, 27, 53, 54, 56, 59, 71, 77, 78, 95, 109, 121, 123, 145, 149, 150, 153, 154, 155, 156, 157, 158, 185, 186, 190, 205, 213, 232, 255, 262, 265, 270, 275, 281, 296, 299, 304, 311, 318, 329, 335, 340, 341, 342, 351, 355, 358, 362, 365, 368, 369, 370, 378, 380, 383, 387, 389, 390, 392, 394, 396, 397, 399, 401, 402, 403, 425, 428, 429, 430, 432, 437, 441, 442, 452, 453, 459, 511, 514, 515, 517, 519, 523, 537, 538, 539, 540, 554, 591, 592, 600, 601, 616, 619, 621, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 649, 650, 651, 653, 654, 655, 657, 658, 659, 661, 662, 663, 664, 665, 668, 671, 673, 675, 676, 682, 703, 710, 777, 791, 821, 822, 823, 825, 827, 828, 829, 830, 831, 836, 837, 855, 866, 870, 871, 878, 879, 880, 881, 882, 883, 884, 954, 955, 956, 957, 958, 962, 963, 964, 965, 966, 967, 976, 977, 978, 982, 986, 992, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019], "few": [7, 14, 19, 39, 46, 52, 99, 119, 152, 155, 156, 186, 195, 197, 215, 232, 242, 259, 260, 264, 295, 299, 303, 307, 308, 309, 310, 311, 312, 315, 335, 342, 355, 363, 364, 365, 368, 369, 379, 381, 386, 389, 390, 392, 396, 397, 401, 402, 418, 429, 541, 542, 569, 572, 636, 673, 676, 871, 915, 930, 958, 959, 961, 962, 965, 966, 975, 977, 978, 986, 988, 995, 996, 997, 1010], "drawn": [7, 52, 79, 113, 145, 149, 158, 166, 236, 264, 281, 340, 364, 392, 398, 399, 402, 404, 449, 450, 451, 452, 453, 454, 455, 456, 495, 503, 513, 535, 536, 543, 592, 608, 613, 622, 815, 870, 871, 888, 889, 958, 972, 974, 1007], "boost": [7, 108, 109, 110, 111, 115, 126, 129, 132, 133, 164, 373, 380, 401, 428, 446, 447, 476, 481, 484, 495, 500, 533, 534, 539, 540, 541, 542, 613, 614, 615, 616, 721, 722, 728, 730, 780, 781, 782, 802, 805, 840, 852, 853, 958, 962, 982, 984, 999, 1004, 1005, 1007, 1009, 1010, 1011, 1013, 1017], "detriment": [7, 145, 356, 401, 958], "plot_influ": 7, "mse_valu": 7, "ax1": [7, 10, 56, 59, 64, 66, 72, 74, 79, 91, 119, 162, 170, 197, 227, 229, 236, 242, 260, 268, 300, 304, 318, 340, 341, 993], "add_subplot": [7, 16, 25, 27, 42, 45, 63, 66, 89, 101, 102, 109, 168, 194, 212, 220, 222, 315, 316, 374], "line1": [7, 12, 221], "tab": [7, 53, 126, 129, 149, 154, 156, 185, 186, 308, 393, 1011], "blue": [7, 20, 21, 26, 34, 91, 95, 113, 116, 124, 126, 129, 131, 144, 154, 156, 173, 177, 185, 186, 193, 195, 221, 230, 251, 252, 257, 294, 304, 308, 317, 365, 392, 397], "set_xlabel": [7, 10, 45, 53, 59, 71, 72, 74, 89, 91, 100, 109, 158, 161, 162, 166, 168, 169, 173, 186, 192, 194, 195, 197, 199, 212, 213, 231, 235, 257, 259, 263, 268, 269, 282, 299, 300, 304, 318, 341, 342, 345], "y1_label": 7, "set_ylabel": [7, 8, 10, 45, 53, 59, 64, 71, 72, 74, 79, 89, 91, 100, 106, 109, 116, 158, 168, 173, 186, 188, 192, 194, 195, 197, 199, 212, 231, 235, 242, 257, 259, 263, 268, 269, 275, 282, 299, 300, 304, 307, 318, 335, 341, 345, 993], "spine": [7, 14, 208, 299], "set_color": [7, 208], "get_color": 7, "yaxi": [7, 10, 45, 59, 89, 101, 102, 194, 218, 220, 223, 242, 277, 282, 340], "tick_param": [7, 14, 132, 242, 257, 303, 318], "ax2": [7, 56, 59, 64, 66, 79, 91, 119, 162, 170, 197, 227, 236, 242, 260, 268, 287, 300, 304, 318, 340], "sharex": [7, 14, 72, 91, 100, 130, 158, 168, 199, 259, 282, 318, 993], "frameon": [7, 203], "line2": [7, 12, 221, 336], "orang": [7, 53, 91, 96, 97, 103, 124, 126, 156, 162, 185, 186, 207, 233, 245, 280, 288, 308, 348, 963], "tick_right": 7, "set_label_posit": 7, "y2_label": 7, "loc": [7, 8, 9, 24, 26, 33, 40, 71, 74, 78, 79, 80, 84, 94, 97, 99, 103, 104, 105, 109, 112, 113, 114, 120, 121, 122, 123, 124, 126, 129, 131, 132, 136, 142, 149, 150, 156, 158, 167, 168, 179, 181, 182, 187, 191, 197, 198, 199, 200, 203, 204, 207, 210, 211, 214, 215, 221, 229, 230, 231, 232, 233, 244, 245, 252, 255, 256, 257, 260, 261, 264, 267, 270, 271, 272, 282, 283, 284, 294, 300, 303, 304, 308, 311, 317, 326, 329, 334, 340, 346, 348, 791, 856, 867], "upper": [7, 9, 24, 71, 74, 78, 79, 80, 109, 112, 113, 114, 121, 122, 123, 124, 129, 131, 142, 153, 155, 158, 167, 191, 197, 203, 204, 207, 211, 214, 215, 230, 233, 234, 256, 257, 258, 282, 283, 284, 294, 304, 318, 326, 329, 334, 392, 398, 443, 569, 570, 572, 576, 594, 595, 596, 598, 600, 601, 603, 604, 606, 613, 614, 616, 618, 631, 635, 658, 715, 852, 880, 881, 882, 902, 961, 962, 965, 972, 976, 977, 978, 1012], "__name__": [7, 16, 25, 60, 161, 197, 199, 239, 252, 259, 301, 319, 340, 341, 342, 374, 378, 852], "prediction_perform": 7, "4948": 7, "2675": 7, "057427": 7, "1847": 7, "3264": 7, "043840": 7, "997": [7, 40], "3383": 7, "036352": 7, "802": [7, 365], "3582": 7, "033502": 7, "0517578125e": 7, "5558": 7, "7313": 7, "000165": 7, "5289": 7, "8022": [7, 380, 453, 1013], "000243": 7, "5193": 7, "8353": 7, "000400": 7, "124": [7, 399, 1006], "5131": [7, 1009], "3279": 7, "000629": 7, "178": [7, 251, 273, 329, 338, 365, 373, 490, 823], "5149": 7, "0779": 7, "000863": 7, "4066": 7, "4812": 7, "000120": 7, "3551": 7, "1723": 7, "000143": 7, "3445": 7, "2171": 7, "000183": 7, "3433": 7, "0358": 7, "000218": 7, "3456": 7, "0602": 7, "000263": 7, "deduc": 7, "guarante": [7, 8, 79, 80, 167, 205, 230, 275, 277, 299, 341, 351, 357, 362, 375, 376, 392, 396, 397, 400, 516, 626, 639, 640, 649, 653, 655, 657, 659, 668, 675, 794, 797, 819, 820, 857, 859, 871, 872, 885, 954, 958, 959, 961, 965, 970, 974, 978, 996, 1014], "aspect": [7, 57, 85, 95, 153, 168, 218, 226, 286, 333, 355, 356, 357, 368, 380, 392, 639, 640, 978, 986], "874": [7, 15, 768, 769, 962], "plot_model_complexity_influ": [7, 15], "doesn": [8, 197, 243, 295, 327, 375, 380, 392, 400, 401, 405, 415, 455, 613, 614, 647, 649, 657, 697, 811, 821, 822, 836, 961, 962, 978, 1008], "t": [8, 11, 12, 16, 17, 26, 30, 34, 39, 40, 42, 43, 44, 52, 54, 57, 69, 71, 77, 78, 79, 81, 84, 91, 96, 97, 101, 103, 105, 106, 109, 110, 113, 114, 120, 121, 122, 123, 124, 128, 129, 146, 150, 152, 153, 154, 157, 158, 164, 167, 168, 169, 170, 176, 178, 184, 191, 194, 195, 197, 198, 215, 217, 219, 220, 221, 222, 224, 233, 243, 246, 248, 256, 257, 277, 289, 290, 295, 307, 310, 311, 315, 316, 318, 323, 324, 327, 328, 331, 332, 335, 340, 341, 342, 348, 349, 351, 355, 356, 362, 363, 365, 368, 369, 371, 373, 375, 378, 379, 380, 383, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 405, 409, 413, 415, 418, 427, 428, 430, 436, 443, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 475, 476, 493, 494, 495, 499, 500, 505, 510, 512, 514, 521, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 547, 548, 549, 550, 571, 572, 575, 588, 589, 591, 592, 608, 609, 611, 612, 613, 614, 616, 620, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 677, 685, 691, 697, 698, 706, 716, 717, 735, 736, 737, 747, 768, 769, 772, 773, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 825, 826, 829, 830, 835, 836, 837, 845, 850, 852, 853, 859, 871, 873, 874, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 915, 926, 951, 956, 958, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 976, 977, 978, 985, 988, 995, 996, 997, 998, 999, 1005, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "memori": [8, 54, 70, 71, 99, 120, 167, 168, 279, 307, 309, 311, 312, 340, 341, 342, 356, 357, 362, 368, 370, 376, 380, 393, 396, 397, 400, 403, 404, 422, 423, 424, 425, 426, 427, 429, 430, 434, 437, 439, 448, 453, 459, 476, 483, 488, 513, 514, 515, 518, 535, 536, 537, 538, 543, 544, 545, 562, 563, 569, 570, 572, 627, 628, 629, 633, 634, 639, 640, 641, 642, 643, 644, 647, 649, 650, 657, 658, 659, 660, 661, 662, 665, 758, 759, 760, 761, 777, 783, 791, 800, 801, 802, 803, 806, 807, 808, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 839, 840, 857, 859, 868, 869, 871, 876, 878, 879, 886, 887, 888, 889, 899, 931, 947, 958, 964, 965, 972, 974, 975, 977, 978, 982, 983, 986, 988, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "onlin": [8, 14, 36, 67, 95, 98, 164, 175, 211, 216, 357, 363, 367, 372, 380, 392, 397, 400, 402, 423, 427, 429, 475, 482, 511, 516, 517, 518, 519, 525, 526, 563, 565, 639, 647, 648, 649, 657, 659, 805, 814, 815, 816, 817, 818, 821, 822, 827, 829, 830, 848, 849, 859, 878, 879, 954, 958, 966, 968, 981, 984, 986, 995, 999, 1004, 1008, 1009, 1011, 1019], "partial_fit": [8, 50, 95, 311, 357, 369, 380, 392, 397, 423, 429, 514, 516, 517, 518, 570, 578, 639, 640, 647, 648, 649, 657, 658, 659, 807, 808, 811, 812, 814, 815, 816, 817, 818, 835, 836, 837, 848, 849, 859, 878, 958, 964, 966, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1017, 1018, 1019], "fed": [8, 129, 351, 363, 400, 951, 967, 972, 1015], "batch": [8, 11, 63, 95, 99, 290, 311, 357, 376, 380, 400, 421, 423, 427, 429, 431, 433, 511, 513, 514, 516, 517, 518, 519, 520, 522, 523, 525, 526, 645, 666, 667, 782, 795, 796, 814, 815, 816, 817, 818, 836, 837, 848, 849, 859, 871, 918, 928, 966, 967, 976, 1004, 1008, 1009, 1012, 1013, 1014, 1015, 1017, 1019], "remain": [8, 25, 27, 70, 116, 121, 123, 145, 167, 197, 213, 242, 255, 259, 263, 266, 389, 393, 394, 396, 400, 444, 447, 495, 496, 501, 508, 514, 550, 591, 592, 680, 743, 749, 779, 780, 781, 782, 785, 787, 814, 815, 816, 818, 919, 951, 952, 961, 962, 966, 972, 978, 983, 1006, 1012, 1018], "hashingvector": [8, 342, 357, 469, 569, 571, 1005, 1011, 1012, 1013, 1014, 1017], "where": [8, 11, 12, 13, 16, 17, 19, 24, 25, 26, 32, 53, 56, 79, 85, 91, 95, 98, 101, 105, 106, 109, 112, 114, 119, 120, 122, 126, 143, 146, 149, 155, 158, 162, 167, 176, 181, 189, 198, 206, 207, 208, 210, 214, 215, 218, 220, 221, 226, 227, 230, 233, 237, 248, 253, 254, 257, 259, 263, 264, 266, 268, 269, 296, 299, 301, 302, 303, 304, 307, 309, 310, 316, 317, 325, 335, 336, 337, 340, 345, 346, 351, 355, 356, 357, 362, 364, 365, 367, 368, 369, 371, 373, 374, 375, 378, 379, 380, 383, 386, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 413, 418, 425, 427, 428, 432, 441, 443, 444, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 467, 476, 511, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 563, 564, 565, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 590, 591, 592, 594, 596, 600, 603, 604, 606, 608, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 669, 672, 673, 674, 677, 680, 688, 693, 697, 705, 709, 710, 711, 719, 722, 735, 743, 748, 749, 750, 753, 761, 762, 763, 764, 767, 770, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 793, 794, 795, 796, 797, 798, 800, 802, 803, 804, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 822, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 842, 849, 852, 854, 855, 858, 859, 864, 866, 872, 873, 874, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 906, 907, 908, 909, 915, 947, 951, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 976, 977, 978, 983, 985, 988, 989, 1004, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "word": [8, 14, 19, 69, 149, 230, 233, 327, 341, 342, 355, 363, 364, 368, 369, 372, 380, 389, 392, 394, 395, 396, 397, 433, 491, 503, 514, 516, 521, 569, 570, 572, 677, 808, 818, 875, 956, 960, 964, 967, 972, 975, 976, 986, 995, 996, 1004, 1012], "federicov": 8, "itertool": [8, 42, 44, 61, 130, 168, 182, 243, 248, 257, 264, 266, 399], "pathlib": [8, 1019], "path": [8, 16, 17, 164, 175, 182, 186, 216, 345, 362, 366, 368, 371, 375, 376, 380, 422, 426, 430, 466, 467, 468, 479, 480, 481, 483, 484, 485, 488, 489, 528, 537, 538, 543, 544, 545, 546, 574, 575, 578, 627, 628, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 662, 663, 664, 665, 666, 667, 669, 839, 840, 885, 886, 887, 888, 889, 920, 951, 958, 959, 968, 982, 983, 1004, 1005, 1008, 1010, 1011, 1013, 1014, 1016, 1017, 1019, 1020], "hashlib": 8, "sha256": [8, 1019], "tarfil": 8, "sy": [8, 12, 16, 19, 205, 230, 277, 319, 342, 363, 378, 598], "rcparam": [8, 226, 231], "htmlparser": 8, "urllib": [8, 17], "request": [8, 17, 46, 197, 215, 310, 356, 362, 366, 367, 370, 380, 381, 386, 397, 400, 401, 429, 552, 592, 613, 680, 965, 997, 1010, 1011, 1012], "urlretriev": 8, "get_data_hom": 8, "feature_extract": [8, 14, 19, 46, 47, 50, 51, 54, 65, 69, 98, 164, 258, 319, 339, 340, 341, 342, 357, 358, 363, 392, 393, 400, 444, 483, 524, 852, 960, 996, 997, 1004, 1005, 1006, 1007, 1010, 1011, 1020], "passiveaggressiveclassifi": [8, 204, 355, 357, 958, 963, 1005, 1008, 1009, 1011, 1012, 1015, 1017], "perceptron": [8, 164, 168, 204, 207, 213, 236, 292, 297, 357, 378, 400, 494, 495, 502, 647, 657, 805, 835, 836, 837, 840, 859, 960, 963, 967, 976, 984, 999, 1008, 1010, 1011, 1012, 1016], "naive_bay": [8, 24, 25, 27, 31, 127, 131, 258, 259, 340, 351, 357, 358, 363, 393, 399, 418, 549, 840, 956, 963, 964, 997, 1005, 1006, 1008, 1009, 1010, 1011], "multinomialnb": [8, 357, 363, 393, 400, 814, 815, 816, 817, 964, 997, 1006, 1008, 1011, 1012, 1016, 1017, 1019], "_not_in_sphinx": [8, 10], "hack": [8, 10], "whether": [8, 10, 16, 70, 125, 152, 155, 157, 167, 168, 197, 215, 219, 227, 255, 299, 349, 351, 356, 363, 366, 367, 368, 369, 371, 372, 373, 380, 392, 393, 394, 396, 397, 399, 401, 404, 420, 421, 423, 431, 433, 434, 439, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 458, 462, 463, 464, 465, 467, 468, 471, 472, 476, 477, 483, 488, 489, 494, 502, 507, 511, 512, 517, 518, 519, 520, 522, 525, 526, 528, 532, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 562, 569, 570, 571, 572, 578, 583, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 610, 612, 613, 614, 616, 617, 618, 619, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 671, 675, 676, 678, 679, 681, 683, 685, 693, 722, 741, 747, 754, 758, 769, 777, 780, 781, 782, 783, 791, 795, 796, 799, 802, 803, 805, 808, 810, 813, 814, 815, 816, 818, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 836, 837, 843, 865, 878, 879, 880, 881, 882, 883, 884, 890, 892, 896, 898, 899, 900, 902, 914, 915, 935, 946, 950, 951, 952, 957, 958, 962, 967, 968, 974, 976, 977, 986, 1011, 1012, 1013], "builder": [8, 10, 371], "__file__": [8, 10, 1017], "global": [8, 10, 42, 56, 95, 197, 218, 219, 239, 266, 295, 308, 351, 355, 356, 373, 378, 380, 392, 402, 423, 432, 442, 448, 571, 607, 613, 669, 672, 673, 676, 688, 709, 710, 718, 763, 764, 767, 768, 795, 874, 876, 930, 932, 951, 959, 962, 968, 978, 986, 1012, 1019], "21578": [8, 1017], "uci": [8, 304, 362, 365, 480, 482, 484, 490], "ml": [8, 362, 365, 372, 480, 482, 490, 958, 960, 982, 983, 986], "uncompress": [8, 488, 489, 997], "reuterspars": 8, "pars": [8, 17, 355, 362, 363, 488], "sgml": [8, 355], "file": [8, 12, 15, 16, 22, 28, 32, 35, 48, 67, 75, 82, 86, 92, 107, 133, 139, 147, 159, 163, 171, 174, 216, 224, 240, 249, 273, 276, 291, 297, 305, 313, 321, 338, 340, 341, 343, 350, 355, 357, 362, 363, 365, 366, 368, 371, 372, 373, 375, 378, 386, 393, 397, 467, 473, 474, 476, 483, 488, 489, 514, 559, 561, 569, 570, 572, 890, 965, 978, 982, 985, 989, 1004, 1005, 1007, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1019], "yield": [8, 9, 25, 45, 77, 78, 79, 80, 120, 122, 192, 197, 212, 215, 262, 275, 293, 299, 324, 329, 340, 341, 351, 355, 357, 362, 372, 380, 389, 392, 394, 396, 397, 399, 400, 401, 402, 418, 429, 448, 452, 488, 489, 517, 518, 519, 521, 526, 533, 534, 539, 540, 541, 542, 547, 548, 575, 583, 628, 632, 633, 634, 636, 642, 644, 646, 654, 656, 667, 680, 706, 761, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 803, 804, 806, 810, 813, 870, 871, 909, 916, 918, 919, 954, 956, 958, 959, 962, 977, 978, 992, 1009, 1010, 1012, 1015, 1017], "__init__": [8, 16, 55, 157, 277, 327, 368, 369, 371, 372, 373, 374, 380, 400, 406, 922, 1005, 1010, 1012, 1017, 1018, 1019], "self": [8, 16, 19, 25, 27, 55, 157, 164, 277, 314, 320, 321, 327, 340, 362, 368, 369, 372, 373, 374, 375, 392, 400, 402, 406, 409, 413, 414, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 480, 488, 489, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 684, 775, 776, 777, 780, 781, 791, 796, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 922, 928, 936, 965, 983, 984, 986, 999, 1006, 1011, 1018], "latin": [8, 400], "_reset": 8, "handle_starttag": 8, "tag": [8, 49, 70, 226, 317, 362, 367, 370, 371, 375, 378, 380, 400, 476, 807, 983, 985, 1009, 1013, 1014, 1015, 1018, 1019, 1020], "attr": [8, 55], "start_": 8, "getattr": [8, 299, 369, 380], "handle_endtag": 8, "end_": 8, "in_titl": 8, "in_bodi": 8, "in_top": 8, "in_topic_d": 8, "bodi": [8, 69, 146, 236, 312, 365], "topic_d": 8, "fd": 8, "chunk": [8, 50, 355, 356, 392, 397, 403, 425, 429, 448, 518, 758, 761, 807, 808, 814, 815, 816, 817, 818, 876, 964, 1011, 1012, 1013, 1014, 1015], "feed": [8, 85, 198, 342, 363, 372, 378, 392, 400, 852, 963], "decod": [8, 290, 363, 380, 483, 549, 569, 570, 572, 1004, 1005], "close": [8, 12, 17, 24, 25, 27, 38, 39, 46, 54, 59, 65, 77, 78, 81, 100, 113, 119, 122, 125, 129, 149, 150, 153, 154, 155, 156, 157, 158, 167, 169, 203, 219, 226, 232, 235, 242, 248, 257, 258, 283, 284, 299, 307, 327, 332, 341, 351, 363, 368, 369, 375, 378, 380, 381, 390, 391, 392, 395, 396, 399, 402, 430, 435, 452, 488, 489, 512, 543, 609, 624, 628, 642, 653, 655, 668, 686, 726, 775, 795, 796, 814, 815, 816, 818, 825, 899, 951, 955, 956, 958, 959, 961, 962, 963, 965, 968, 969, 972, 977, 986, 995, 1007, 1011, 1012, 1013], "handle_data": 8, "start_reut": 8, "attribut": [8, 25, 32, 49, 70, 84, 104, 116, 117, 120, 142, 146, 197, 205, 235, 247, 255, 256, 261, 269, 286, 290, 310, 342, 349, 357, 358, 361, 362, 363, 365, 368, 370, 374, 378, 388, 389, 390, 392, 393, 394, 395, 397, 399, 400, 401, 402, 407, 408, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 487, 490, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 678, 679, 681, 682, 683, 716, 773, 775, 776, 777, 780, 781, 783, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 893, 922, 923, 946, 956, 958, 963, 965, 966, 968, 972, 975, 976, 977, 978, 986, 988, 994, 997, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "end_reut": 8, "sub": [8, 37, 48, 53, 56, 59, 69, 105, 234, 242, 309, 315, 316, 324, 327, 336, 363, 368, 369, 373, 393, 399, 400, 516, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 652, 923, 958, 962, 976, 997, 1014, 1018], "start_titl": 8, "end_titl": 8, "start_bodi": 8, "end_bodi": 8, "start_top": 8, "end_top": 8, "start_d": 8, "end_d": 8, "stream_reuters_docu": 8, "data_path": 8, "iter": [8, 14, 17, 31, 46, 71, 81, 95, 98, 110, 113, 118, 120, 121, 123, 124, 146, 158, 161, 164, 176, 177, 205, 212, 244, 245, 250, 252, 268, 273, 293, 295, 296, 301, 309, 316, 318, 319, 327, 368, 369, 373, 375, 376, 379, 380, 387, 392, 395, 397, 399, 401, 404, 418, 421, 422, 424, 426, 427, 428, 429, 432, 434, 439, 441, 442, 443, 451, 452, 458, 462, 463, 464, 491, 495, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 533, 534, 539, 540, 541, 542, 544, 547, 548, 562, 563, 569, 570, 572, 574, 575, 583, 591, 608, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 810, 813, 828, 835, 836, 837, 838, 839, 843, 850, 852, 854, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 893, 914, 915, 921, 928, 952, 958, 959, 961, 962, 965, 966, 967, 975, 976, 977, 978, 983, 986, 992, 996, 997, 999, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020], "archiv": [8, 362, 363, 365, 366, 386, 392, 423, 482, 490, 738, 739, 960, 977, 997], "exist": [8, 9, 17, 19, 53, 215, 257, 295, 299, 362, 367, 369, 370, 373, 378, 380, 381, 383, 386, 392, 396, 397, 399, 400, 402, 407, 415, 418, 431, 433, 448, 479, 529, 535, 536, 537, 538, 544, 545, 566, 570, 578, 584, 613, 614, 626, 657, 658, 659, 661, 679, 681, 683, 742, 745, 749, 778, 779, 782, 784, 785, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798, 824, 839, 844, 852, 853, 946, 954, 959, 961, 962, 966, 968, 969, 972, 982, 986, 996, 1004, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "str": [8, 10, 16, 57, 59, 104, 106, 118, 215, 235, 257, 269, 277, 287, 325, 340, 362, 363, 376, 400, 403, 404, 408, 412, 419, 420, 422, 423, 424, 425, 426, 427, 429, 430, 432, 437, 444, 445, 446, 447, 448, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 531, 541, 542, 546, 547, 548, 549, 550, 556, 562, 563, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 598, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 640, 647, 648, 652, 654, 656, 657, 659, 669, 670, 673, 677, 678, 679, 680, 681, 683, 685, 688, 690, 692, 694, 707, 709, 710, 712, 713, 718, 737, 751, 754, 758, 759, 760, 761, 762, 763, 764, 767, 769, 770, 771, 777, 780, 781, 783, 788, 789, 791, 800, 801, 802, 803, 804, 806, 811, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 876, 890, 891, 892, 894, 897, 898, 899, 902, 905, 907, 911, 923, 925, 946, 947, 950], "kei": [8, 9, 10, 17, 19, 42, 119, 129, 161, 166, 215, 238, 258, 260, 261, 308, 309, 310, 311, 312, 357, 361, 369, 372, 373, 374, 378, 380, 383, 392, 393, 396, 402, 444, 452, 541, 542, 547, 548, 549, 550, 569, 572, 575, 598, 607, 613, 615, 640, 777, 780, 781, 789, 791, 802, 838, 839, 893, 903, 927, 983, 997, 1001, 1010, 1016, 1017, 1019], "download_url": 8, "ic": [8, 168, 309, 362, 365, 382, 482, 490, 613, 614, 999, 1016, 1017], "databas": [8, 304, 355, 357, 363, 365, 392, 397, 399, 400, 403, 423, 425, 490, 535, 536, 871, 974], "reuters21578": 8, "mld": 8, "tar": [8, 371], "gz": [8, 371, 383, 488, 489], "archive_sha256": 8, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 8, "archive_filenam": 8, "els": [8, 11, 12, 16, 19, 41, 44, 49, 55, 61, 81, 99, 113, 118, 122, 157, 167, 168, 186, 199, 215, 219, 226, 230, 232, 233, 234, 257, 258, 261, 268, 277, 282, 290, 293, 294, 301, 340, 341, 349, 368, 371, 373, 399, 400, 402, 404, 418, 429, 488, 500, 513, 549, 606, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 651, 653, 654, 655, 657, 660, 662, 663, 664, 665, 684, 690, 748, 768, 772, 774, 780, 781, 805, 843, 852, 855, 865, 878, 879, 893, 924, 926, 928, 949, 978], "mkdir": [8, 375], "parent": [8, 166, 368, 371, 380, 392, 423, 443, 1004], "exist_ok": 8, "blocknum": 8, "total_sz_mb": 8, "mb": [8, 15, 22, 28, 35, 67, 75, 82, 86, 92, 107, 133, 139, 147, 159, 163, 171, 174, 216, 224, 230, 240, 249, 273, 276, 291, 297, 305, 313, 321, 338, 340, 342, 343, 350, 363, 373, 880, 881, 882, 883, 884, 977, 1000], "1e6": [8, 10, 190, 230, 340, 342, 355, 516, 872, 962, 974], "current_sz_mb": 8, "stdout": [8, 95, 205, 808, 828, 836, 837], "write": [8, 17, 162, 340, 355, 356, 362, 366, 367, 370, 371, 372, 373, 375, 376, 378, 380, 383, 393, 397, 400, 973, 983, 997, 1005, 1017], "rdownload": 8, "archive_path": 8, "filenam": [8, 17, 319, 363, 373, 386, 468, 480, 483, 484, 487, 569, 570, 572, 997, 1004, 1009, 1012, 1013], "reporthook": 8, "tamper": 8, "assert": [8, 17, 48, 96, 230, 257, 266, 356, 370, 983], "read_byt": 8, "hexdigest": 8, "untar": 8, "open": [8, 12, 17, 220, 362, 363, 367, 368, 371, 373, 378, 379, 381, 383, 386, 393, 400, 467, 476, 488, 489, 952, 986, 991, 1007, 1011, 1012, 1014], "extractal": 8, "glob": 8, "sgm": 8, "rb": 8, "decode_error": [8, 400, 483, 569, 570, 572, 1006], "alternate_sign": [8, 400, 563, 570, 1011], "data_stream": 8, "binari": [8, 13, 25, 27, 109, 114, 125, 127, 143, 157, 167, 173, 188, 190, 197, 205, 219, 227, 238, 254, 255, 260, 266, 272, 275, 281, 327, 333, 349, 351, 362, 363, 364, 369, 371, 372, 380, 383, 386, 389, 390, 391, 392, 399, 400, 402, 418, 419, 420, 432, 467, 480, 488, 489, 500, 503, 529, 530, 533, 535, 539, 541, 542, 546, 547, 548, 562, 569, 570, 572, 574, 575, 583, 591, 608, 609, 610, 611, 613, 614, 639, 640, 647, 649, 654, 655, 656, 657, 681, 684, 688, 689, 690, 693, 694, 696, 699, 701, 707, 709, 710, 714, 715, 718, 719, 720, 721, 722, 723, 762, 763, 764, 767, 768, 769, 772, 774, 777, 778, 780, 781, 782, 783, 791, 795, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 814, 825, 835, 846, 850, 852, 862, 878, 880, 883, 925, 952, 963, 964, 965, 966, 967, 969, 970, 972, 973, 974, 976, 977, 978, 985, 988, 1001, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1018, 1019], "acq": 8, "chosen": [8, 46, 72, 129, 150, 167, 168, 186, 198, 201, 214, 233, 251, 252, 254, 260, 341, 351, 355, 378, 392, 394, 395, 399, 402, 421, 429, 431, 433, 434, 440, 476, 503, 515, 537, 538, 539, 540, 544, 545, 628, 634, 637, 639, 640, 642, 644, 652, 657, 658, 659, 660, 661, 671, 675, 772, 775, 776, 777, 780, 781, 791, 809, 828, 878, 886, 887, 888, 889, 915, 951, 954, 956, 958, 959, 961, 963, 968, 969, 976, 992, 993, 995, 996, 1012], "evenli": [8, 39, 52, 122, 252, 400, 919, 997], "care": [8, 123, 355, 357, 371, 373, 378, 380, 381, 390, 392, 394, 400, 418, 440, 449, 621, 639, 640, 647, 649, 657, 658, 659, 676, 878, 959, 977, 986], "all_class": 8, "positive_class": [8, 693], "partial_fit_classifi": 8, "max_it": [8, 14, 17, 25, 30, 31, 71, 72, 95, 98, 115, 131, 135, 137, 158, 161, 162, 167, 183, 189, 190, 204, 205, 206, 209, 210, 212, 218, 219, 220, 221, 236, 237, 242, 244, 245, 248, 270, 287, 293, 294, 295, 309, 310, 311, 315, 316, 324, 340, 341, 373, 380, 399, 404, 421, 424, 427, 428, 429, 434, 439, 441, 451, 452, 458, 462, 463, 464, 511, 512, 513, 515, 516, 517, 518, 519, 520, 523, 525, 526, 527, 528, 541, 542, 608, 619, 621, 622, 623, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 653, 655, 657, 658, 659, 660, 661, 663, 664, 668, 669, 670, 671, 674, 675, 775, 776, 791, 828, 836, 837, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 952, 954, 958, 965, 966, 975, 976, 993, 997, 1005, 1008, 1011, 1012, 1013, 1014, 1016, 1018, 1019], "nb": [8, 103, 127, 351, 816, 964], "multinomi": [8, 30, 164, 175, 212, 216, 233, 252, 266, 363, 364, 368, 397, 399, 476, 492, 503, 531, 533, 539, 541, 549, 639, 640, 721, 805, 813, 814, 815, 816, 817, 818, 859, 901, 962, 963, 978, 984, 997, 999, 1004, 1008, 1010, 1011, 1012, 1017, 1018], "passiv": [8, 204, 647, 648, 984, 999, 1005], "aggress": [8, 204, 647, 648, 780, 781, 984, 999, 1005], "get_minibatch": 8, "doc_it": 8, "pos_class": 8, "minibatch": [8, 44, 392, 397, 429, 514, 657, 835, 836, 837, 982, 1004], "tupl": [8, 48, 49, 105, 168, 215, 361, 362, 363, 369, 380, 396, 404, 415, 431, 433, 444, 447, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 484, 485, 488, 490, 492, 493, 494, 502, 513, 526, 541, 542, 547, 548, 549, 550, 563, 564, 565, 568, 569, 570, 572, 608, 613, 614, 615, 693, 700, 761, 763, 775, 777, 791, 802, 819, 820, 838, 839, 849, 850, 854, 857, 864, 868, 880, 881, 882, 883, 884, 893, 899, 900, 902, 906, 907, 908, 909, 923, 929, 946, 969, 1010, 1011, 1015, 1016, 1017], "x_text": 8, "befor": [8, 12, 25, 42, 69, 71, 74, 85, 129, 142, 156, 158, 160, 163, 164, 167, 168, 170, 178, 185, 186, 190, 257, 264, 279, 300, 303, 304, 310, 330, 351, 355, 356, 363, 366, 368, 369, 370, 372, 373, 375, 376, 378, 380, 381, 382, 386, 392, 393, 394, 396, 397, 401, 404, 405, 424, 427, 428, 429, 439, 441, 445, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 462, 463, 464, 465, 470, 481, 514, 517, 518, 519, 520, 521, 524, 526, 527, 541, 542, 545, 547, 549, 550, 557, 569, 570, 572, 592, 608, 609, 611, 631, 632, 635, 636, 637, 645, 646, 647, 648, 649, 652, 657, 659, 668, 673, 675, 680, 775, 776, 782, 783, 795, 796, 798, 801, 803, 805, 819, 820, 827, 828, 829, 830, 831, 834, 839, 840, 843, 846, 853, 857, 858, 859, 863, 864, 866, 867, 868, 869, 875, 886, 887, 915, 946, 952, 958, 959, 962, 968, 972, 976, 977, 978, 983, 997, 1004, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "exclud": [8, 19, 166, 299, 368, 371, 380, 444, 446, 709, 710, 718, 763, 764, 767, 790, 798, 854, 937, 962, 965, 1013], "invalid": [8, 197, 380, 558, 652, 693, 754, 958, 962, 1010, 1012, 1014, 1015, 1017, 1018], "assign": [8, 17, 37, 46, 49, 56, 57, 59, 115, 125, 127, 142, 151, 210, 215, 226, 231, 233, 293, 301, 320, 335, 341, 363, 368, 369, 380, 389, 396, 397, 399, 400, 401, 402, 421, 422, 423, 424, 426, 427, 428, 429, 432, 434, 436, 439, 441, 442, 495, 516, 541, 542, 574, 575, 588, 589, 591, 639, 640, 647, 648, 649, 657, 658, 659, 685, 686, 696, 697, 698, 701, 711, 719, 723, 735, 737, 766, 771, 772, 773, 777, 780, 781, 783, 786, 791, 800, 801, 802, 803, 806, 823, 829, 831, 832, 833, 846, 873, 874, 878, 879, 880, 881, 882, 883, 884, 956, 961, 962, 963, 964, 965, 966, 967, 972, 975, 986, 988, 997, 1004, 1009, 1011, 1012], "format": [8, 11, 12, 19, 20, 21, 48, 54, 57, 60, 69, 79, 95, 105, 113, 118, 121, 123, 135, 141, 142, 170, 173, 177, 183, 188, 197, 215, 252, 262, 264, 265, 268, 271, 281, 282, 285, 286, 303, 307, 334, 345, 349, 355, 361, 367, 368, 369, 370, 375, 376, 379, 380, 393, 396, 399, 400, 414, 423, 424, 426, 427, 429, 430, 432, 439, 444, 448, 462, 463, 464, 465, 467, 469, 476, 477, 478, 488, 489, 490, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 531, 537, 538, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 565, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 627, 633, 639, 640, 641, 643, 647, 649, 657, 658, 659, 669, 670, 678, 694, 701, 719, 720, 731, 748, 808, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 865, 870, 871, 876, 878, 890, 898, 899, 920, 924, 928, 933, 936, 938, 939, 940, 941, 942, 943, 952, 962, 965, 970, 972, 973, 976, 978, 982, 988, 989, 999, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1019], "islic": [8, 44, 61], "asarrai": [8, 17, 197, 215, 296, 317, 340, 341, 369, 380, 388, 566, 567, 706, 736, 827, 829, 830, 831, 972, 977], "int": [8, 10, 13, 16, 17, 19, 37, 44, 61, 80, 113, 121, 125, 137, 138, 150, 151, 152, 158, 162, 166, 178, 188, 190, 197, 215, 223, 226, 232, 235, 242, 252, 255, 256, 257, 277, 282, 284, 290, 316, 342, 363, 368, 369, 378, 380, 390, 393, 396, 400, 403, 404, 407, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 462, 463, 464, 465, 468, 471, 472, 474, 475, 476, 477, 482, 483, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 588, 589, 591, 592, 598, 608, 609, 610, 611, 612, 613, 614, 615, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 684, 685, 686, 688, 690, 694, 698, 706, 707, 709, 710, 711, 714, 716, 717, 718, 736, 737, 749, 754, 755, 758, 759, 760, 761, 762, 763, 764, 767, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 894, 898, 899, 901, 902, 914, 915, 917, 918, 919, 920, 927, 931, 933, 936, 941, 942, 958, 969, 1004, 1010, 1014, 1015], "iter_minibatch": 8, "minibatch_s": [8, 357], "statist": [8, 80, 109, 113, 114, 124, 135, 136, 137, 138, 141, 145, 146, 164, 166, 167, 168, 169, 185, 250, 254, 256, 259, 266, 273, 299, 309, 351, 358, 361, 363, 365, 368, 373, 380, 392, 393, 394, 396, 397, 399, 401, 415, 449, 454, 473, 474, 496, 497, 498, 500, 502, 521, 526, 539, 540, 542, 585, 586, 587, 590, 608, 611, 615, 616, 625, 630, 637, 671, 675, 677, 691, 697, 702, 703, 704, 711, 723, 768, 777, 793, 809, 836, 837, 855, 856, 857, 859, 863, 866, 867, 869, 883, 886, 887, 937, 951, 952, 956, 958, 959, 961, 962, 963, 964, 969, 972, 976, 977, 978, 979, 980, 981, 989, 995, 996, 1009, 1012, 1015, 1016, 1018, 1019], "test_stat": 8, "n_test": [8, 10, 33, 113, 257, 1004, 1007], "n_test_po": 8, "hold": [8, 16, 26, 27, 197, 258, 349, 361, 368, 369, 390, 392, 396, 399, 400, 402, 483, 541, 542, 570, 613, 614, 615, 716, 777, 780, 781, 791, 815, 846, 847, 852, 853, 862, 952, 956, 962, 966, 976, 977, 978, 985, 988, 997, 1012, 1016], "n_test_docu": 8, "tick": [8, 43, 59, 152, 236, 268, 613, 803], "x_test_text": 8, "parsing_tim": 8, "vectorizing_tim": 8, "sum": [8, 17, 19, 26, 60, 80, 91, 98, 105, 121, 122, 142, 146, 157, 167, 178, 184, 193, 197, 212, 215, 219, 221, 266, 277, 284, 287, 311, 319, 332, 335, 340, 341, 342, 349, 365, 373, 380, 389, 390, 391, 392, 394, 395, 397, 398, 399, 400, 402, 413, 423, 424, 427, 429, 439, 444, 445, 462, 463, 464, 495, 500, 503, 511, 514, 516, 517, 521, 524, 525, 526, 529, 530, 532, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 548, 549, 550, 571, 572, 592, 594, 604, 606, 616, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 651, 653, 654, 657, 658, 659, 660, 662, 665, 671, 675, 677, 680, 690, 691, 700, 706, 721, 736, 738, 739, 743, 768, 807, 808, 812, 813, 822, 826, 830, 837, 838, 858, 859, 878, 879, 881, 884, 886, 887, 888, 889, 917, 937, 943, 948, 958, 962, 963, 964, 965, 977, 978, 995, 1007, 1008, 1010, 1012, 1013, 1015], "cls_name": [8, 10], "stat": [8, 10, 69, 79, 101, 146, 170, 254, 257, 265, 269, 282, 309, 315, 316, 365, 376, 379, 394, 454, 573, 576, 577, 579, 580, 581, 585, 586, 587, 590, 663, 664, 781, 789, 791, 886, 887, 917, 951, 958, 1011, 1013, 1017], "string": [8, 27, 70, 118, 157, 215, 228, 261, 310, 342, 355, 362, 363, 368, 369, 373, 380, 386, 393, 396, 399, 400, 401, 403, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 444, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 467, 469, 470, 476, 485, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 562, 563, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 598, 601, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 680, 690, 692, 700, 712, 742, 745, 751, 754, 758, 759, 760, 761, 770, 771, 775, 776, 777, 780, 781, 783, 791, 802, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 896, 898, 899, 906, 907, 908, 926, 930, 946, 947, 951, 952, 962, 975, 977, 988, 995, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "n_train": [8, 10, 33, 113, 257, 1004, 1007], "6d": 8, "n_train_po": 8, "5d": 8, "cls_stat": 8, "accuracy_histori": 8, "runtime_histori": 8, "total_fit_tim": 8, "discard": [8, 178, 260, 355, 389, 394, 401, 488, 489, 529, 578, 608, 611, 625, 852, 856, 867, 952, 958, 1012, 1016], "mini": [8, 63, 95, 311, 357, 380, 400, 421, 423, 427, 429, 431, 433, 511, 513, 516, 517, 518, 519, 520, 522, 523, 525, 526, 966, 967, 1004, 1015, 1017], "smaller": [8, 24, 40, 46, 81, 154, 155, 158, 161, 182, 186, 188, 201, 230, 283, 284, 293, 299, 327, 335, 341, 368, 389, 391, 392, 394, 396, 397, 399, 401, 402, 420, 421, 430, 434, 436, 494, 514, 515, 537, 538, 539, 540, 544, 545, 574, 591, 600, 614, 627, 628, 630, 631, 633, 634, 635, 637, 639, 640, 641, 642, 643, 644, 663, 664, 673, 690, 775, 780, 781, 825, 828, 852, 870, 871, 878, 886, 887, 888, 889, 915, 956, 958, 959, 961, 962, 963, 965, 966, 968, 972, 974, 976, 977, 978, 983, 997, 1012, 1017], "bigger": [8, 40, 59, 210, 257, 296, 337, 341, 354, 356, 400, 419, 420, 488, 518, 825, 992, 999], "overhead": [8, 277, 356, 357, 368, 373, 376, 378, 380, 399, 422, 426, 429, 514, 680, 811, 812, 814, 815, 816, 817, 818, 819, 820, 930, 964, 965, 1007, 1012, 1013, 1016], "partial": [8, 12, 50, 83, 86, 126, 164, 165, 171, 215, 225, 240, 309, 312, 365, 380, 382, 394, 395, 397, 399, 402, 444, 462, 463, 464, 465, 476, 481, 514, 516, 521, 542, 570, 613, 614, 638, 768, 805, 807, 808, 835, 836, 837, 840, 852, 853, 856, 859, 887, 959, 966, 976, 997, 999, 1001, 1005, 1012, 1013, 1017], "stream": [8, 392, 397, 400, 442, 570, 848, 849, 859, 954, 982, 1012, 1015], "minibatch_iter": 8, "total_vect_tim": 8, "x_train_text": 8, "enumer": [8, 9, 10, 11, 12, 13, 14, 17, 19, 25, 27, 30, 31, 34, 37, 39, 40, 41, 42, 43, 44, 45, 50, 58, 59, 60, 61, 69, 78, 80, 81, 85, 94, 96, 98, 105, 109, 113, 120, 121, 123, 124, 135, 151, 153, 158, 170, 177, 179, 188, 197, 219, 220, 223, 226, 231, 234, 235, 242, 243, 244, 245, 247, 248, 252, 259, 260, 266, 267, 282, 286, 287, 289, 296, 301, 302, 315, 316, 318, 320, 325, 327, 334, 335, 340, 346, 363, 539, 540, 544, 545, 761, 778, 779, 782, 784, 785, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798], "item": [8, 9, 10, 11, 12, 17, 19, 30, 43, 74, 114, 119, 122, 129, 167, 195, 199, 205, 219, 232, 234, 244, 254, 260, 311, 316, 341, 361, 368, 369, 376, 393, 444, 506, 541, 542, 569, 570, 572, 613, 789, 852, 873, 874, 893, 894, 920, 954, 975, 983, 988], "updat": [8, 16, 44, 61, 94, 110, 124, 231, 307, 342, 366, 367, 368, 371, 375, 380, 392, 397, 399, 406, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 443, 445, 449, 450, 451, 452, 453, 454, 455, 456, 458, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 775, 776, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 893, 937, 958, 965, 966, 967, 976, 985, 986, 1005, 1011, 1012, 1013, 1015, 1017, 1019, 1020], "accumul": [8, 50, 116, 117, 186, 371, 373, 392, 400, 962, 1005, 1012], "acc_histori": 8, "run_histori": 8, "878": 8, "962": 8, "915": 8, "58": [8, 65, 78, 296, 365, 394, 405, 455, 744, 972, 993], "1662": 8, "855": 8, "1647": 8, "877": [8, 255], "61": [8, 80, 158, 168, 215, 332, 362, 365, 373, 393, 521, 540, 694], "1588": 8, "933": [8, 73, 259, 273, 396], "1580": 8, "3911": 8, "517": [8, 156, 159, 432, 442, 995], "938": [8, 193, 765, 962, 992], "67": [8, 65, 167, 215, 296, 365, 496, 497, 498, 608, 648, 694, 791, 952, 962, 976, 1000, 1004], "2344": 8, "936": [8, 418, 962], "2340": 8, "885": [8, 239, 365], "2329": 8, "941": 8, "2325": 8, "6821": 8, "891": [8, 319], "952": [8, 49, 327, 338], "2541": 8, "2538": 8, "900": [8, 50, 73, 74], "2530": 8, "953": [8, 49], "2528": 8, "9759": 8, "1276": 8, "949": 8, "73": [8, 261, 316, 379, 777, 791, 825, 887, 972, 993, 1004, 1006], "2617": 8, "2615": 8, "909": 8, "2609": 8, "958": [8, 159, 291], "2607": 8, "11680": 8, "1499": 8, "944": [8, 992], "2520": 8, "956": [8, 992], "2519": 8, "2515": 8, "950": 8, "2513": 8, "14625": 8, "1865": 8, "965": [8, 962], "2556": 8, "903": 8, "2555": 8, "924": [8, 72], "2551": 8, "957": [8, 55, 67, 220, 224, 402, 708, 962], "2550": 8, "17360": [8, 1015], "2179": 8, "2599": 8, "2598": 8, "932": 8, "2596": 8, "2595": 8, "curv": [8, 11, 23, 28, 37, 74, 77, 113, 115, 121, 164, 175, 176, 187, 197, 215, 216, 218, 220, 223, 225, 227, 235, 236, 240, 241, 249, 250, 257, 267, 273, 294, 307, 347, 374, 387, 391, 396, 398, 418, 419, 420, 482, 490, 495, 501, 505, 544, 613, 626, 639, 679, 681, 683, 687, 688, 689, 690, 707, 709, 721, 722, 762, 764, 767, 768, 769, 775, 776, 783, 794, 803, 805, 806, 817, 840, 859, 878, 883, 958, 959, 961, 962, 968, 978, 984, 986, 999, 1001, 1006, 1007, 1010, 1014, 1016, 1017, 1018, 1019], "evolut": [8, 10, 269, 355, 357, 526], "cours": [8, 9, 173, 355, 368, 369, 397, 400, 401, 952, 957, 958, 986], "valid": [8, 13, 26, 54, 55, 70, 73, 77, 81, 103, 114, 118, 119, 120, 121, 122, 134, 139, 140, 144, 146, 147, 157, 164, 167, 169, 175, 185, 197, 199, 205, 215, 216, 234, 244, 247, 250, 254, 257, 258, 259, 261, 263, 265, 266, 271, 273, 281, 296, 300, 307, 309, 318, 327, 335, 345, 356, 363, 368, 370, 378, 379, 380, 386, 387, 390, 392, 393, 394, 397, 398, 399, 400, 401, 402, 408, 418, 423, 424, 426, 427, 429, 430, 437, 443, 444, 448, 451, 452, 453, 454, 455, 456, 458, 462, 463, 464, 465, 473, 481, 482, 484, 495, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 529, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 552, 555, 557, 563, 570, 574, 575, 578, 583, 613, 615, 619, 620, 621, 622, 623, 624, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 670, 680, 682, 687, 694, 708, 742, 745, 754, 758, 759, 760, 765, 770, 771, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 813, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 842, 843, 845, 851, 859, 870, 871, 873, 874, 876, 878, 880, 883, 885, 886, 887, 888, 889, 898, 899, 902, 909, 921, 952, 961, 962, 963, 966, 970, 972, 974, 976, 977, 978, 982, 983, 986, 988, 991, 999, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "consumpt": [8, 355, 514, 537, 538, 544, 545, 777, 791, 800, 801, 802, 886, 887, 888, 889, 928, 988, 1004, 1006, 1010, 1012, 1013, 1018], "queue": [8, 965, 1007], "up": [8, 11, 37, 44, 46, 47, 48, 52, 56, 61, 69, 79, 80, 88, 91, 115, 162, 176, 190, 198, 213, 214, 235, 244, 259, 262, 277, 290, 296, 300, 311, 316, 324, 340, 342, 357, 362, 363, 368, 371, 373, 374, 375, 376, 378, 380, 381, 390, 392, 397, 399, 400, 424, 427, 428, 429, 430, 432, 436, 439, 440, 441, 488, 489, 516, 529, 530, 537, 538, 539, 540, 541, 542, 544, 545, 546, 591, 608, 613, 614, 620, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 645, 662, 663, 664, 665, 673, 686, 749, 775, 776, 779, 780, 781, 783, 803, 854, 857, 868, 886, 887, 888, 889, 892, 915, 918, 919, 951, 958, 959, 962, 965, 976, 977, 983, 985, 986, 996, 997, 1004, 1005, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019], "amount": [8, 12, 45, 53, 65, 77, 80, 95, 99, 111, 113, 155, 167, 215, 231, 309, 315, 318, 320, 327, 335, 342, 355, 356, 357, 378, 391, 392, 394, 397, 399, 400, 401, 424, 434, 449, 518, 519, 521, 523, 543, 577, 627, 628, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 646, 662, 665, 673, 780, 781, 819, 820, 825, 874, 875, 888, 889, 957, 958, 961, 964, 966, 972, 974, 975, 976, 977, 995, 996, 1017], "learner": [8, 109, 111, 120, 129, 357, 537, 538, 539, 540, 544, 545, 546, 563, 570, 611, 821, 822, 827, 829, 830, 964, 967, 978, 982, 983, 997], "plot_accuraci": 8, "x_legend": 8, "n_exampl": 8, "gca": [8, 44, 61, 85, 152, 201, 202, 206, 208, 226, 238, 261, 285, 287, 300, 323, 325, 328, 329, 969, 1001], "set_ylim": [8, 10, 16, 31, 42, 59, 71, 91, 109, 115, 126, 127, 158, 168, 170, 177, 195, 197, 198, 231, 242, 261, 264, 275, 282, 293, 299, 301, 302, 304, 308, 318, 336], "runtim": [8, 10, 57, 183, 212, 214, 231, 296, 301, 356, 369, 370, 378, 380, 391, 392, 399, 430, 543, 660, 791, 878, 879, 880, 881, 882, 883, 884, 976, 977, 1007, 1011, 1012, 1018, 1019], "gcf": [8, 969], "cls_runtim": 8, "bar_color": 8, "rectangl": 8, "bar": [8, 10, 14, 71, 116, 119, 120, 123, 131, 142, 146, 157, 161, 168, 176, 242, 247, 256, 258, 262, 275, 304, 311, 312, 341, 369, 395, 562, 613, 629, 650, 661, 962, 969, 976, 978, 1010, 1011, 1012, 1013], "width": [8, 10, 16, 45, 53, 79, 89, 97, 98, 104, 105, 106, 113, 118, 119, 122, 131, 142, 151, 157, 180, 239, 242, 256, 299, 301, 302, 309, 312, 324, 365, 393, 419, 420, 432, 444, 473, 474, 486, 501, 567, 844, 891, 972, 976, 978, 994, 995, 1012], "set_xtick": [8, 10, 16, 31, 34, 43, 59, 63, 106, 127, 131, 168, 170, 188, 213, 231, 242, 268, 269, 275, 293, 295, 301, 302, 324], "set_xticklabel": [8, 10, 79, 106, 131, 152, 168, 170, 268, 269, 275], "ymax": [8, 10, 11, 77, 184, 186, 189, 190, 198, 206, 257, 290], "set_titl": [8, 10, 14, 25, 27, 31, 32, 42, 43, 45, 53, 56, 59, 63, 64, 71, 74, 79, 89, 91, 100, 106, 115, 116, 125, 127, 129, 130, 158, 161, 162, 166, 167, 168, 169, 176, 177, 186, 188, 195, 197, 198, 199, 205, 218, 219, 222, 223, 229, 231, 232, 235, 236, 242, 251, 252, 253, 254, 257, 259, 260, 264, 268, 269, 275, 277, 281, 282, 287, 293, 294, 299, 300, 301, 302, 303, 304, 307, 311, 315, 316, 324, 335, 336, 337, 340, 345], "autolabel": [8, 120], "attach": [8, 120, 340, 415, 824, 1005, 1015], "rect": [8, 52, 120, 176], "height": [8, 14, 53, 98, 119, 146, 170, 299, 340, 398, 473, 474, 486, 567], "get_height": [8, 120], "get_x": [8, 120], "get_width": [8, 120], "va": [8, 120, 268, 285, 287, 334], "setp": [8, 10, 181, 268, 271], "rotat": [8, 40, 93, 97, 100, 107, 121, 131, 164, 170, 221, 268, 269, 275, 327, 334, 395, 397, 402, 404, 484, 512, 521, 530, 595, 678, 859, 890, 958, 1015, 1016], "read": [8, 17, 95, 218, 264, 307, 308, 309, 311, 355, 362, 366, 369, 370, 371, 372, 374, 375, 378, 379, 380, 392, 403, 404, 405, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 439, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 591, 592, 594, 595, 596, 597, 600, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 678, 679, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 911, 951, 958, 962, 963, 982, 986, 997, 1005, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017], "feat": [8, 10, 371, 400], "extr": 8, "hash": [8, 108, 133, 164, 341, 342, 355, 357, 360, 368, 370, 378, 399, 494, 524, 537, 546, 562, 563, 570, 621, 814, 927, 954, 997, 999, 1005, 1008, 1011], "vect": [8, 69, 258, 319, 400, 997], "563": [8, 15, 130, 133, 337, 338], "plot_out_of_core_classif": [8, 15], "illustr": [9, 23, 24, 26, 31, 33, 52, 55, 56, 69, 70, 73, 74, 77, 79, 85, 91, 97, 101, 109, 110, 113, 117, 120, 124, 126, 128, 129, 141, 146, 148, 149, 150, 151, 154, 155, 156, 157, 159, 164, 166, 168, 169, 173, 186, 193, 194, 197, 199, 201, 205, 211, 214, 215, 218, 219, 221, 223, 226, 228, 229, 231, 232, 234, 257, 264, 269, 270, 278, 291, 304, 306, 307, 309, 318, 327, 328, 332, 333, 335, 336, 341, 342, 348, 351, 355, 365, 368, 372, 375, 379, 395, 397, 399, 400, 495, 591, 592, 594, 595, 596, 600, 603, 604, 828, 951, 958, 962, 965, 968, 974, 975, 976, 977, 986, 988], "robust": [9, 60, 62, 76, 82, 122, 162, 164, 167, 168, 175, 199, 214, 216, 226, 299, 357, 365, 369, 375, 392, 399, 400, 428, 449, 450, 453, 454, 455, 456, 504, 514, 539, 540, 630, 638, 651, 652, 659, 660, 730, 809, 840, 854, 856, 857, 867, 873, 913, 962, 966, 968, 972, 975, 976, 982, 984, 986, 998, 999, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "covari": [9, 12, 29, 33, 35, 78, 82, 84, 103, 106, 125, 149, 156, 158, 226, 241, 243, 246, 247, 248, 249, 358, 376, 380, 392, 395, 397, 402, 462, 463, 464, 465, 484, 495, 499, 507, 512, 514, 521, 526, 528, 529, 530, 543, 591, 592, 594, 603, 604, 625, 626, 631, 635, 637, 663, 664, 667, 670, 674, 775, 776, 777, 796, 961, 968, 972, 984, 998, 999, 1004, 1006, 1007, 1008, 1009, 1011, 1013], "wine": [9, 238, 304, 361, 490, 999], "kind": [9, 12, 24, 25, 74, 104, 129, 141, 167, 168, 247, 251, 253, 266, 309, 312, 324, 327, 340, 356, 357, 361, 363, 368, 369, 373, 378, 379, 390, 392, 395, 396, 397, 399, 400, 401, 468, 469, 483, 488, 489, 501, 504, 569, 613, 614, 682, 907, 958, 964, 969, 978, 1007, 1016, 1018, 1019], "tool": [9, 11, 167, 255, 260, 351, 361, 362, 363, 366, 368, 369, 370, 371, 372, 373, 374, 375, 379, 380, 382, 383, 386, 391, 392, 393, 394, 467, 673, 682, 951, 957, 958, 962, 968, 972, 977, 979, 982, 983, 986, 988, 997, 1011, 1014, 1017, 1018, 1019], "purpos": [9, 12, 16, 37, 85, 161, 211, 212, 213, 218, 220, 233, 245, 247, 253, 254, 327, 328, 340, 341, 351, 363, 368, 369, 379, 380, 381, 383, 385, 389, 392, 393, 397, 399, 400, 401, 402, 526, 619, 801, 802, 839, 959, 962, 963, 965, 968, 980, 982, 988, 1016, 1018], "awar": [9, 14, 109, 143, 158, 324, 340, 366, 369, 378, 381, 396, 400, 547, 548, 629, 635, 636, 637, 639, 640, 650, 661, 825, 854, 968, 972, 978, 1001, 1004, 1005, 1018], "thing": [9, 219, 252, 340, 356, 357, 363, 367, 368, 369, 378, 392, 394, 400, 539, 540, 958, 972, 986, 1010], "trivial": [9, 199, 345, 368, 392, 795, 880, 883, 959, 983, 1004], "dimens": [9, 12, 14, 37, 40, 53, 81, 84, 89, 95, 151, 153, 155, 157, 158, 168, 180, 195, 201, 220, 222, 226, 230, 231, 236, 243, 244, 281, 282, 286, 302, 340, 341, 342, 363, 365, 380, 391, 392, 397, 398, 402, 404, 423, 424, 426, 427, 428, 429, 432, 444, 445, 462, 463, 464, 473, 474, 495, 504, 505, 509, 510, 513, 521, 529, 563, 564, 565, 566, 568, 570, 578, 600, 603, 622, 625, 640, 671, 672, 673, 675, 676, 680, 744, 800, 819, 820, 824, 838, 870, 871, 872, 880, 881, 882, 883, 884, 898, 899, 900, 925, 933, 936, 952, 954, 956, 958, 959, 960, 963, 965, 966, 968, 974, 977, 988, 995, 996, 1011, 1013, 1014, 1016], "below": [9, 25, 26, 27, 32, 59, 69, 74, 79, 88, 89, 95, 114, 116, 117, 122, 141, 166, 168, 180, 193, 194, 197, 199, 213, 214, 219, 223, 228, 237, 252, 255, 260, 262, 263, 264, 299, 303, 307, 308, 309, 310, 311, 312, 331, 332, 340, 349, 351, 356, 361, 362, 366, 368, 369, 371, 372, 376, 380, 383, 392, 394, 395, 396, 397, 399, 400, 401, 402, 428, 451, 452, 458, 471, 472, 474, 475, 476, 477, 478, 480, 481, 482, 484, 485, 490, 511, 517, 522, 528, 563, 576, 577, 578, 579, 580, 581, 614, 627, 633, 639, 640, 648, 654, 656, 673, 680, 686, 723, 743, 775, 776, 777, 788, 791, 808, 839, 842, 852, 856, 861, 867, 951, 952, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 968, 969, 970, 972, 976, 977, 978, 979, 982, 990, 997, 1000, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017], "main": [9, 16, 32, 61, 85, 99, 119, 164, 226, 266, 306, 335, 340, 355, 356, 357, 361, 366, 368, 369, 371, 373, 375, 378, 379, 380, 382, 390, 391, 392, 397, 399, 400, 402, 483, 505, 510, 529, 530, 606, 694, 809, 951, 959, 961, 962, 969, 974, 983, 985, 994, 997, 1004, 1007, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "empir": [9, 24, 25, 36, 67, 76, 79, 81, 82, 164, 215, 263, 299, 390, 396, 399, 402, 427, 429, 440, 449, 450, 454, 457, 458, 512, 514, 519, 521, 523, 529, 531, 545, 571, 584, 620, 630, 648, 652, 659, 660, 697, 702, 703, 704, 804, 814, 815, 816, 818, 837, 901, 936, 954, 956, 962, 964, 966, 974, 976, 998, 999], "heterogen": [9, 24, 68, 70, 75, 164, 168, 197, 239, 304, 307, 360, 362, 378, 444, 468, 524, 562, 572, 694, 839, 843, 878, 959, 969, 972, 982, 999, 1008, 1012, 1014, 1015], "mode": [9, 10, 46, 47, 79, 197, 226, 277, 279, 296, 307, 368, 370, 375, 376, 378, 389, 395, 399, 403, 424, 425, 427, 429, 432, 439, 442, 451, 452, 458, 462, 467, 488, 489, 537, 541, 544, 573, 576, 577, 579, 580, 581, 591, 608, 625, 626, 639, 640, 647, 649, 654, 655, 656, 657, 660, 663, 664, 670, 674, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 835, 878, 880, 883, 886, 888, 904, 914, 915, 917, 965, 968, 982, 988, 989, 996, 1005, 1013, 1018], "stick": [9, 775, 961], "bias": [9, 27, 81, 98, 122, 128, 166, 167, 169, 201, 262, 363, 382, 390, 399, 504, 529, 835, 859, 869, 957, 961, 970, 976, 978], "yet": [9, 56, 215, 247, 258, 342, 357, 363, 367, 371, 378, 382, 383, 396, 397, 399, 400, 402, 428, 432, 441, 442, 557, 758, 946, 951, 958, 962, 968, 976, 983, 1013], "extent": [9, 30, 57, 151, 152, 153, 230, 333, 336, 421, 515, 677, 775, 962], "assum": [9, 56, 156, 162, 166, 167, 186, 197, 215, 226, 229, 235, 248, 257, 266, 299, 342, 356, 367, 368, 369, 371, 373, 378, 379, 380, 382, 386, 389, 390, 392, 394, 396, 397, 399, 400, 402, 403, 408, 412, 418, 420, 425, 430, 437, 443, 449, 450, 451, 452, 453, 454, 455, 456, 483, 488, 489, 512, 522, 528, 529, 541, 542, 547, 548, 568, 569, 570, 572, 601, 613, 624, 625, 627, 628, 633, 639, 640, 641, 642, 643, 647, 648, 649, 652, 653, 657, 658, 659, 662, 666, 668, 669, 673, 690, 706, 715, 721, 736, 744, 749, 754, 758, 761, 777, 780, 781, 791, 815, 821, 822, 825, 826, 827, 829, 830, 835, 846, 859, 938, 939, 940, 952, 956, 958, 960, 961, 962, 964, 965, 967, 968, 969, 972, 976, 977, 978, 1010, 1016], "parametr": [9, 24, 25, 81, 229, 281, 303, 310, 390, 393, 398, 399, 418, 531, 533, 616, 666, 677, 855, 866, 909, 910, 958, 961, 964, 965, 972, 975, 978, 1012, 1014, 1017], "therefor": [9, 13, 24, 37, 52, 53, 70, 71, 74, 79, 85, 100, 105, 110, 113, 115, 122, 127, 129, 145, 166, 169, 197, 213, 214, 242, 247, 248, 258, 260, 295, 299, 304, 315, 327, 336, 340, 341, 349, 355, 362, 366, 372, 378, 392, 393, 394, 396, 397, 399, 400, 418, 476, 515, 529, 531, 533, 534, 539, 540, 544, 545, 585, 587, 639, 640, 646, 649, 652, 657, 659, 660, 682, 693, 715, 737, 775, 839, 840, 852, 856, 867, 878, 879, 952, 956, 958, 959, 962, 964, 965, 966, 967, 970, 972, 977, 978, 983, 988, 995, 996, 997, 1013, 1014, 1017, 1018, 1019, 1020], "minimum": [9, 56, 79, 122, 123, 145, 186, 207, 230, 267, 283, 284, 369, 376, 383, 385, 389, 392, 399, 400, 422, 426, 430, 434, 436, 449, 450, 453, 454, 455, 456, 491, 493, 521, 532, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 575, 608, 612, 613, 616, 618, 649, 652, 657, 659, 660, 663, 664, 673, 686, 705, 759, 760, 780, 781, 800, 815, 836, 837, 848, 849, 852, 854, 858, 871, 872, 885, 886, 887, 888, 889, 895, 898, 899, 902, 918, 959, 962, 966, 968, 972, 974, 978, 1004, 1007, 1011, 1012, 1016, 1017], "determin": [9, 11, 13, 19, 46, 79, 112, 154, 167, 176, 177, 193, 200, 257, 299, 304, 342, 349, 351, 367, 368, 369, 376, 379, 380, 389, 390, 392, 396, 397, 399, 400, 401, 402, 413, 418, 422, 423, 424, 426, 427, 429, 430, 436, 439, 440, 441, 445, 449, 450, 452, 453, 454, 455, 456, 462, 463, 464, 468, 471, 472, 475, 477, 483, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 517, 519, 522, 523, 532, 533, 534, 536, 538, 539, 540, 541, 542, 543, 545, 547, 548, 550, 563, 564, 565, 569, 572, 575, 583, 588, 589, 591, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 608, 616, 617, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 649, 650, 651, 653, 654, 655, 656, 657, 659, 660, 661, 668, 670, 671, 673, 674, 675, 688, 692, 703, 709, 710, 718, 763, 764, 765, 767, 768, 771, 777, 779, 780, 781, 783, 791, 799, 800, 801, 802, 803, 804, 806, 810, 812, 813, 815, 822, 824, 825, 830, 835, 836, 837, 843, 844, 852, 853, 854, 856, 867, 878, 879, 881, 884, 887, 889, 892, 913, 925, 931, 933, 936, 951, 954, 956, 961, 965, 967, 968, 972, 975, 976, 978, 988, 1004, 1009, 1012, 1013, 1015, 1016, 1017], "concentr": [9, 100, 110, 127, 154, 164, 223, 241, 248, 249, 301, 317, 364, 368, 399, 402, 424, 499, 775, 961, 968], "cluster": [9, 18, 20, 22, 24, 42, 43, 46, 48, 50, 51, 53, 54, 56, 58, 60, 61, 67, 79, 90, 102, 112, 118, 125, 170, 223, 242, 243, 244, 245, 258, 283, 284, 286, 302, 308, 312, 329, 339, 340, 342, 343, 357, 358, 361, 363, 365, 368, 369, 372, 378, 380, 387, 398, 400, 406, 407, 410, 468, 482, 483, 484, 491, 492, 493, 494, 495, 502, 510, 521, 524, 544, 546, 570, 571, 572, 672, 673, 676, 685, 686, 691, 698, 700, 705, 711, 716, 717, 735, 737, 758, 759, 766, 770, 771, 773, 775, 776, 831, 832, 840, 844, 851, 859, 907, 909, 922, 930, 946, 952, 959, 961, 965, 968, 970, 972, 975, 979, 982, 983, 986, 988, 991, 994, 997, 998, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "outli": [9, 79, 380, 449, 454, 958, 968], "skew": [9, 122, 200, 230, 299, 360, 396, 620, 621, 622, 623, 855, 866, 958, 972, 999, 1007, 1011, 1020], "Of": [9, 25, 27, 161, 355, 369, 392, 400, 952], "screen": [9, 1017], "presenc": [9, 59, 61, 79, 80, 166, 299, 366, 380, 394, 397, 693, 706, 736, 749, 808, 842, 850, 852, 946, 952, 958, 962, 963, 976, 1007, 1008, 1010, 1014, 1016, 1018], "mixtur": [9, 44, 56, 244, 245, 249, 358, 363, 364, 380, 392, 397, 398, 402, 604, 777, 982, 983, 998, 999, 1004, 1008, 1009, 1010, 1011], "univari": [9, 36, 67, 71, 73, 140, 141, 147, 164, 212, 322, 338, 360, 391, 392, 393, 400, 426, 484, 505, 510, 573, 576, 577, 579, 580, 581, 583, 586, 587, 588, 589, 590, 608, 609, 610, 611, 626, 777, 782, 801, 805, 839, 840, 849, 854, 858, 859, 878, 883, 958, 977, 979, 984, 996, 999, 1004, 1010], "appli": [9, 14, 19, 25, 27, 32, 40, 44, 46, 47, 55, 57, 61, 70, 72, 74, 85, 95, 96, 102, 104, 106, 115, 122, 142, 149, 167, 169, 186, 202, 211, 218, 219, 220, 226, 231, 257, 258, 260, 269, 275, 286, 299, 303, 304, 308, 327, 342, 349, 351, 355, 360, 368, 369, 375, 378, 379, 380, 389, 390, 391, 392, 393, 394, 396, 397, 399, 400, 401, 402, 404, 421, 432, 442, 444, 445, 447, 449, 454, 462, 463, 464, 465, 488, 489, 496, 497, 498, 504, 511, 512, 513, 514, 515, 517, 519, 521, 522, 523, 528, 529, 530, 533, 534, 537, 538, 539, 540, 544, 545, 546, 569, 570, 571, 572, 608, 613, 614, 619, 620, 622, 623, 639, 640, 649, 657, 658, 659, 672, 680, 682, 688, 706, 736, 738, 739, 761, 768, 770, 771, 777, 791, 805, 808, 814, 815, 816, 817, 818, 828, 838, 839, 848, 855, 856, 859, 863, 864, 866, 867, 868, 869, 874, 885, 886, 887, 888, 889, 898, 904, 907, 914, 915, 934, 952, 954, 958, 959, 960, 961, 962, 964, 966, 968, 972, 976, 977, 978, 979, 981, 986, 1005, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1018], "ellipticenvelop": [9, 226, 450, 453, 454, 455, 456, 543, 968, 1004, 1007, 1011, 1012, 1017], "oneclasssvm": [9, 11, 16, 211, 226, 310, 326, 543, 658, 825, 968, 976, 977, 1006, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "font_manag": [9, 80, 283, 326], "load_win": [9, 238, 304, 823, 831, 1001, 1015], "support_fract": [9, 449, 454], "contamin": [9, 79, 80, 226, 235, 283, 284, 449, 543, 825, 968, 1012], "ocsvm": [9, 211], "legend1": 9, "legend2": 9, "x1": [9, 12, 16, 34, 84, 90, 112, 121, 152, 209, 221, 235, 299, 324, 369, 380, 412, 444, 489, 547, 548, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 680, 744, 842, 843, 844, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 996], "frontier": [9, 211, 283, 326, 968, 995], "xx1": [9, 112, 612], "yy1": 9, "meshgrid": [9, 11, 16, 26, 30, 34, 42, 57, 79, 118, 127, 150, 151, 152, 153, 155, 168, 208, 209, 210, 211, 223, 226, 246, 283, 290, 293, 301, 302, 320, 326, 327, 332, 333, 336, 337, 612], "500": [9, 10, 44, 50, 56, 59, 60, 62, 84, 85, 103, 105, 114, 123, 145, 149, 173, 210, 211, 219, 236, 237, 242, 243, 247, 257, 260, 270, 277, 283, 289, 303, 308, 326, 333, 337, 355, 399, 449, 450, 454, 455, 456, 462, 463, 464, 592, 594, 595, 597, 602, 605, 606, 631, 632, 635, 636, 637, 661, 663, 664, 837, 951, 977], "clf_name": [9, 10, 340], "z1": 9, "decision_funct": [9, 11, 16, 25, 27, 55, 112, 125, 138, 209, 210, 211, 227, 235, 264, 283, 284, 293, 301, 325, 326, 327, 331, 332, 333, 337, 369, 380, 390, 399, 418, 449, 529, 530, 533, 535, 539, 541, 543, 547, 574, 575, 612, 613, 614, 639, 640, 647, 649, 655, 656, 657, 658, 679, 681, 683, 688, 701, 706, 707, 715, 719, 720, 722, 736, 762, 768, 769, 772, 777, 780, 781, 791, 800, 807, 808, 809, 810, 825, 839, 846, 875, 878, 880, 882, 883, 958, 962, 968, 969, 976, 977, 995, 1004, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017], "c_": [9, 11, 16, 25, 26, 27, 30, 34, 57, 79, 96, 101, 118, 121, 126, 127, 136, 138, 151, 195, 210, 211, 213, 226, 235, 283, 302, 304, 320, 326, 327, 331, 333, 336, 337, 392, 640, 695, 696, 699, 962, 992, 995, 996], "contour": [9, 11, 16, 34, 46, 47, 79, 118, 138, 152, 153, 155, 208, 209, 210, 211, 226, 231, 246, 283, 290, 325, 326, 328, 329, 331, 332, 333, 365, 612, 613, 968, 976], "linewidth": [9, 24, 33, 34, 37, 40, 57, 72, 77, 85, 91, 111, 122, 126, 149, 153, 157, 186, 187, 191, 192, 193, 195, 198, 200, 203, 211, 214, 226, 233, 235, 266, 270, 283, 287, 300, 308, 325, 326, 328, 333, 347, 993], "legend1_values_list": 9, "legend1_keys_list": 9, "cloud": [9, 43, 84, 93, 101, 107, 164, 375, 397, 513, 521, 673, 962, 981, 982, 996], "bbox_arg": 9, "dict": [9, 10, 11, 12, 17, 26, 39, 45, 69, 72, 73, 102, 122, 124, 195, 203, 226, 234, 244, 255, 256, 258, 261, 264, 266, 277, 281, 301, 311, 319, 327, 341, 342, 357, 360, 362, 369, 378, 380, 393, 396, 403, 404, 406, 414, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 476, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 678, 679, 681, 682, 683, 694, 742, 745, 751, 759, 760, 775, 776, 777, 780, 781, 783, 788, 789, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 893, 903, 904, 920, 951, 962, 972, 992, 997, 999, 1004, 1010, 1011], "boxstyl": [9, 301], "fc": [9, 282, 363], "arrow_arg": 9, "arrowstyl": 9, "xy": [9, 26, 49, 264, 290, 332, 383, 627, 628, 631, 633, 634, 635, 641, 642, 643, 644, 645, 662, 663, 664, 665, 667], "xycoord": [9, 26], "textcoord": [9, 173], "xytext": [9, 26, 173], "bbox": [9, 12, 34, 45, 102, 242, 243, 244, 247, 248, 301], "arrowprop": [9, 26], "prop": [9, 72, 80, 203, 244, 283, 326, 349], "fontproperti": [9, 80, 283, 326], "ash": [9, 365, 1007, 1010], "malic_acid": 9, "abil": [9, 60, 79, 122, 155, 161, 166, 167, 169, 197, 215, 226, 340, 357, 383, 399, 400, 762, 763, 764, 767, 959, 962, 965, 968, 978, 983, 1004, 1006, 1011, 1013, 1017, 1018], "locat": [9, 25, 53, 54, 71, 79, 80, 191, 290, 309, 327, 361, 366, 368, 371, 372, 375, 376, 383, 392, 394, 398, 428, 440, 441, 449, 450, 451, 452, 453, 454, 455, 456, 468, 480, 481, 484, 485, 492, 495, 947, 952, 958, 963, 968, 972, 978, 1012], "hard": [9, 197, 226, 230, 257, 259, 357, 367, 378, 380, 392, 397, 400, 514, 521, 549, 657, 880, 881, 882, 883, 884, 958, 975, 977, 978, 983, 995, 996, 997, 1013, 1014], "due": [9, 26, 27, 53, 59, 74, 113, 149, 167, 168, 176, 188, 195, 197, 199, 214, 215, 230, 243, 265, 266, 277, 304, 340, 341, 342, 368, 373, 380, 383, 390, 392, 396, 397, 399, 402, 424, 427, 439, 515, 519, 523, 524, 554, 652, 777, 780, 781, 785, 787, 791, 800, 801, 802, 804, 807, 811, 812, 844, 848, 849, 859, 952, 958, 959, 961, 962, 963, 965, 969, 976, 983, 996, 1004, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "banana": [9, 962], "anywai": [9, 340, 369, 646, 666, 667], "rid": [9, 976], "difficulti": [9, 27, 215, 299, 357, 368, 390, 836, 837, 961, 965], "adjust": [9, 36, 38, 49, 57, 67, 77, 122, 164, 226, 231, 238, 258, 307, 319, 335, 341, 374, 392, 397, 399, 400, 504, 533, 534, 537, 539, 541, 542, 544, 639, 640, 647, 649, 655, 656, 657, 685, 686, 689, 695, 696, 735, 737, 766, 773, 814, 815, 817, 818, 849, 870, 871, 878, 879, 880, 883, 886, 888, 904, 961, 962, 966, 972, 995, 1001, 1004, 1010], "bandwidth": [9, 44, 62, 232, 281, 282, 290, 378, 380, 392, 398, 428, 438, 441, 819, 820, 824, 955, 968, 982, 1015, 1019], "compromis": [9, 168, 355, 368, 628, 660, 965, 1007], "risk": [9, 197, 215, 300, 335, 351, 367, 368, 380, 391, 396, 399, 547, 548, 863, 864, 866, 867, 868, 869, 958, 962, 986, 1011], "x2": [9, 16, 84, 90, 112, 121, 152, 209, 235, 369, 393, 569, 610, 680, 744, 996], "xx2": 9, "yy2": 9, "z2": 9, "legend2_values_list": 9, "legend2_keys_list": 9, "color_intens": 9, "flavanoid": [9, 365], "305": [9, 15, 373], "plot_outlier_detection_win": [9, 15], "goal": [10, 17, 52, 56, 85, 161, 168, 173, 197, 212, 215, 234, 235, 254, 255, 340, 356, 357, 363, 369, 372, 373, 380, 381, 382, 397, 399, 401, 522, 528, 571, 574, 719, 962, 965, 967, 968, 976, 977, 978, 980, 986, 988, 991, 995, 997, 1012], "boxplot": [10, 79, 123, 167, 170, 307], "defaultdict": [10, 19, 25, 170, 260, 341, 342], "gc": 10, "make_regress": [10, 74, 176, 178, 179, 183, 200, 201, 270, 308, 351, 364, 369, 370, 379, 534, 536, 540, 545, 616, 627, 628, 630, 632, 634, 636, 644, 645, 646, 648, 652, 660, 837, 879, 962, 963, 965], "randomforestregressor": [10, 128, 129, 132, 161, 162, 309, 379, 399, 537, 538, 540, 542, 546, 548, 550, 613, 614, 888, 1009, 1010, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020], "sgdregressor": [10, 208, 355, 357, 378, 391, 627, 630, 648, 652, 657, 660, 837, 879, 884, 958, 976, 1006, 1008, 1010, 1011, 1012, 1015, 1017, 1018, 1019], "shuffl": [10, 14, 20, 21, 24, 27, 32, 48, 59, 60, 95, 109, 116, 118, 129, 162, 205, 206, 211, 226, 258, 262, 263, 270, 277, 315, 316, 317, 318, 329, 340, 341, 351, 363, 376, 380, 387, 449, 454, 468, 469, 471, 472, 475, 477, 483, 491, 492, 493, 494, 495, 499, 502, 504, 511, 517, 519, 520, 526, 527, 533, 534, 535, 536, 544, 545, 547, 548, 583, 639, 640, 647, 648, 649, 653, 655, 657, 658, 659, 668, 777, 779, 780, 781, 782, 783, 791, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 809, 836, 837, 878, 879, 880, 883, 914, 915, 931, 933, 957, 958, 963, 970, 976, 977, 992, 997, 999, 1004, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015], "atomic_benchmark_estim": 10, "verbos": [10, 42, 50, 54, 63, 69, 71, 73, 129, 184, 258, 295, 296, 299, 310, 319, 340, 366, 371, 380, 386, 421, 424, 427, 429, 432, 434, 439, 442, 444, 447, 451, 452, 458, 511, 516, 517, 518, 519, 520, 523, 525, 526, 527, 528, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 574, 575, 608, 611, 613, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 671, 673, 675, 745, 758, 775, 776, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 808, 810, 813, 828, 835, 836, 837, 838, 839, 840, 841, 875, 878, 879, 880, 881, 882, 883, 884, 928, 983, 1006, 1007, 1009, 1011, 1012, 1013, 1015, 1016, 1018, 1019], "n_instanc": [10, 614], "zero": [10, 11, 13, 27, 34, 37, 40, 41, 52, 54, 78, 80, 81, 94, 95, 98, 100, 109, 112, 113, 121, 123, 124, 128, 143, 162, 176, 183, 188, 190, 191, 196, 197, 198, 201, 202, 203, 207, 212, 215, 230, 233, 242, 246, 248, 254, 257, 262, 266, 267, 282, 299, 308, 309, 335, 341, 342, 345, 349, 355, 356, 363, 369, 373, 380, 390, 391, 392, 394, 397, 399, 400, 401, 402, 405, 432, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 467, 477, 488, 489, 503, 506, 507, 511, 512, 515, 517, 518, 519, 520, 522, 523, 527, 528, 532, 537, 538, 539, 540, 541, 542, 544, 545, 546, 562, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 592, 617, 620, 624, 625, 626, 631, 639, 640, 645, 646, 647, 649, 652, 657, 658, 659, 666, 667, 684, 690, 693, 694, 696, 697, 705, 709, 710, 714, 718, 720, 726, 763, 764, 765, 767, 774, 775, 792, 793, 796, 797, 808, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 842, 849, 851, 852, 854, 855, 856, 858, 859, 864, 865, 866, 867, 871, 878, 886, 887, 888, 889, 913, 948, 952, 958, 960, 961, 964, 965, 966, 972, 973, 974, 976, 977, 978, 988, 995, 997, 1004, 1006, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "atomic_benchmark": 10, "percentil": [10, 70, 122, 239, 299, 355, 573, 576, 577, 579, 580, 581, 584, 587, 613, 614, 728, 972, 1009, 1017], "bulk_benchmark_estim": 10, "n_bulk_repeat": 10, "whole": [10, 50, 73, 120, 132, 162, 198, 235, 254, 261, 327, 345, 355, 366, 368, 378, 379, 393, 395, 399, 402, 429, 463, 518, 535, 536, 537, 538, 543, 544, 545, 546, 550, 666, 667, 777, 780, 781, 791, 803, 814, 815, 816, 817, 818, 951, 962, 997, 1012, 1014], "bulk_benchmark": 10, "benchmark_estim": 10, "repeat": [10, 33, 65, 78, 80, 121, 146, 149, 155, 156, 168, 173, 199, 252, 257, 258, 269, 316, 335, 341, 342, 369, 376, 380, 389, 390, 391, 392, 397, 400, 401, 402, 569, 574, 588, 589, 596, 608, 615, 640, 782, 792, 793, 796, 904, 952, 961, 999, 1012, 1014], "atomic_runtim": 10, "bulk_runtim": 10, "pair": [10, 37, 44, 57, 63, 100, 112, 114, 118, 122, 138, 153, 157, 177, 180, 189, 206, 209, 215, 230, 252, 257, 264, 266, 320, 323, 325, 327, 328, 329, 331, 333, 341, 346, 363, 378, 380, 389, 390, 393, 396, 400, 402, 418, 421, 422, 426, 430, 437, 443, 458, 473, 488, 489, 563, 573, 576, 577, 579, 580, 581, 591, 594, 595, 596, 598, 600, 601, 603, 604, 606, 608, 613, 614, 624, 673, 681, 686, 687, 688, 696, 711, 720, 738, 739, 743, 746, 749, 750, 751, 752, 753, 754, 756, 758, 759, 760, 761, 762, 766, 807, 819, 820, 893, 962, 963, 964, 965, 972, 978, 1004, 1016, 1017, 1019], "contain": [10, 19, 24, 27, 33, 40, 49, 55, 57, 69, 70, 112, 114, 117, 125, 155, 167, 168, 170, 173, 188, 215, 226, 235, 236, 239, 247, 255, 257, 263, 266, 267, 275, 283, 284, 286, 299, 310, 316, 319, 340, 341, 361, 362, 363, 365, 368, 369, 371, 372, 373, 374, 375, 376, 379, 380, 386, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 404, 406, 414, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 442, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 482, 483, 484, 488, 489, 490, 494, 495, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 666, 667, 669, 670, 671, 672, 673, 677, 678, 679, 681, 682, 683, 690, 693, 715, 716, 717, 748, 752, 759, 760, 768, 772, 775, 776, 777, 780, 781, 783, 791, 795, 796, 802, 803, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 891, 892, 893, 894, 897, 898, 899, 918, 919, 921, 925, 929, 931, 951, 952, 954, 960, 963, 966, 968, 972, 973, 975, 978, 988, 997, 1004, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "generate_dataset": 10, "coef": [10, 54, 105, 166, 167, 176, 181, 184, 188, 189, 191, 196, 200, 201, 202, 206, 213, 239, 270, 295, 336, 504, 627, 628, 630, 633, 634, 640, 641, 642, 643, 644, 650, 661, 662, 663, 664, 665, 666, 667, 668, 966], "random_se": [10, 91, 118], "x_scaler": 10, "y_scaler": 10, "ok": [10, 368, 968], "boxplot_runtim": 10, "pred_typ": 10, "micro": [10, 290, 319, 355, 688, 694, 709, 710, 718, 763, 764, 767, 768, 962, 1004, 1012, 1013, 1019], "bp": [10, 123, 146, 185, 186, 365, 970], "cls_info": 10, "estimator_conf": 10, "box": [10, 30, 168, 169, 219, 299, 303, 374, 397, 399, 492, 535, 536, 855, 866, 890, 892, 962, 963, 969, 972, 978, 982, 988, 1012], "whisker": 10, "flier": 10, "red": [10, 11, 26, 33, 34, 59, 79, 91, 95, 96, 97, 113, 129, 132, 158, 173, 176, 177, 187, 195, 223, 236, 252, 263, 290, 294, 300, 304, 317, 327, 348, 366, 380, 392, 397, 963], "marker": [10, 11, 17, 27, 30, 34, 37, 38, 42, 52, 57, 58, 59, 62, 63, 84, 90, 91, 97, 101, 128, 156, 157, 173, 185, 190, 192, 194, 195, 197, 199, 200, 212, 214, 219, 242, 244, 245, 252, 257, 259, 260, 261, 299, 304, 317, 345, 368, 371, 400, 1012, 1014, 1015], "linestyl": [10, 11, 16, 33, 59, 72, 79, 103, 105, 110, 121, 131, 135, 138, 149, 152, 154, 156, 158, 169, 182, 184, 185, 186, 197, 198, 199, 203, 207, 209, 210, 215, 233, 235, 254, 256, 260, 261, 266, 282, 290, 294, 300, 325, 328, 329, 331, 332, 333, 993], "major": [10, 14, 264, 299, 303, 307, 308, 309, 310, 311, 312, 342, 355, 363, 367, 368, 370, 373, 378, 381, 392, 396, 398, 400, 402, 531, 549, 550, 675, 709, 710, 718, 763, 764, 767, 890, 892, 962, 965, 976, 983, 986, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "lightgrei": 10, "set_axisbelow": 10, "capit": [10, 25], "n_feature_influ": 10, "nber": 10, "estimator_nam": [10, 205, 374, 419, 556, 679, 681, 683, 897], "percentile_perf_in_u": 10, "plot_n_features_influ": 10, "il": [10, 645, 666, 667, 958, 962], "benchmark_throughput": 10, "duration_sec": 10, "estimator_config": 10, "n_predict": 10, "plot_benchmark_throughput": 10, "cls_valu": 10, "sec": [10, 205, 220, 223, 277], "1e2": [10, 149, 156, 232, 248, 327, 726], "randomforest": [10, 118, 355, 399, 886, 887, 1009], "0001": [10, 205, 255, 369, 404, 424, 427, 439, 451, 452, 458, 513, 518, 520, 527, 529, 530, 539, 540, 627, 628, 629, 630, 633, 634, 639, 640, 641, 642, 643, 644, 649, 650, 653, 655, 657, 659, 661, 668, 670, 674, 836, 837, 878, 879, 951], "250": [10, 64, 122, 173, 177, 216, 218, 473, 673, 951, 974, 1011], "207": [10, 15, 296, 1004], "plot_prediction_lat": [10, 15], "conserv": [11, 563, 570, 870, 871, 961, 974], "biologi": 11, "south": [11, 167, 290, 398], "american": [11, 12, 69, 80, 363, 392, 394, 398, 399, 400, 449, 454, 711, 859], "mammal": 11, "past": [11, 371, 372, 375, 378, 381, 396, 397, 399, 518, 535, 536, 659, 986, 989], "environment": [11, 215], "unsuccess": 11, "cast": [11, 53, 197, 219, 362, 380, 381, 400, 476, 625, 626, 627, 633, 637, 638, 641, 642, 643, 644, 645, 646, 654, 656, 927, 1011, 1012, 1013, 1014, 1017, 1019], "densiti": [11, 49, 59, 64, 74, 101, 105, 146, 164, 183, 197, 212, 215, 222, 226, 230, 241, 248, 249, 257, 263, 278, 283, 284, 291, 299, 327, 340, 365, 376, 380, 392, 399, 403, 411, 425, 428, 430, 432, 444, 447, 478, 482, 516, 521, 529, 530, 775, 776, 777, 819, 820, 824, 825, 871, 956, 958, 961, 965, 967, 968, 974, 982, 984, 988, 998, 999, 1006, 1008, 1012, 1013, 1019], "phillip": [11, 290, 478], "2006": [11, 290, 399, 402, 442, 478, 537, 538, 545, 546, 591, 592, 595, 600, 603, 630, 647, 648, 721, 768, 769, 775, 814, 871, 888, 889, 958, 962, 964, 967, 974, 975], "basemap": [11, 290], "coast": [11, 290], "line": [11, 17, 40, 43, 59, 69, 95, 100, 121, 148, 159, 161, 162, 164, 167, 168, 185, 186, 187, 189, 192, 193, 195, 198, 199, 200, 205, 206, 208, 209, 226, 230, 231, 233, 235, 254, 261, 263, 264, 287, 290, 300, 309, 326, 331, 332, 336, 337, 340, 362, 363, 366, 368, 369, 371, 372, 373, 374, 375, 378, 397, 398, 399, 419, 467, 468, 469, 488, 489, 522, 533, 534, 535, 536, 591, 594, 595, 613, 651, 667, 682, 783, 930, 956, 962, 966, 969, 976, 982, 985, 995, 997, 1006, 1015, 1017], "nation": [11, 79, 290, 363, 826], "boundari": [11, 13, 25, 26, 27, 31, 34, 57, 59, 108, 112, 118, 127, 133, 150, 153, 164, 168, 180, 198, 226, 231, 233, 260, 280, 285, 287, 288, 290, 293, 299, 301, 304, 314, 321, 324, 325, 327, 329, 336, 337, 346, 364, 390, 399, 400, 402, 430, 436, 484, 516, 529, 530, 549, 569, 570, 572, 612, 808, 821, 827, 829, 830, 831, 858, 874, 875, 882, 883, 886, 902, 956, 965, 968, 972, 975, 976, 977, 1004, 1006, 1008, 1017, 1018, 1019], "america": [11, 12, 79, 290, 826, 972], "bradypu": [11, 290, 478], "variegatu": [11, 290, 478], "brown": [11, 91, 290, 478, 609, 952, 1009, 1011, 1012, 1013, 1016], "throat": [11, 290, 478], "sloth": [11, 290, 478], "microryzomi": [11, 290, 478], "minutu": [11, 290, 478], "known": [11, 17, 25, 27, 39, 49, 56, 57, 80, 104, 105, 129, 154, 156, 162, 197, 198, 215, 226, 257, 259, 266, 286, 290, 300, 310, 315, 324, 341, 357, 365, 366, 368, 370, 375, 378, 380, 383, 388, 389, 390, 392, 393, 394, 395, 396, 397, 399, 400, 402, 419, 443, 462, 464, 478, 488, 489, 524, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 569, 570, 572, 575, 590, 603, 614, 639, 640, 653, 663, 664, 675, 685, 691, 694, 699, 709, 723, 735, 737, 773, 808, 814, 815, 816, 817, 818, 821, 826, 829, 835, 862, 886, 887, 888, 889, 952, 954, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 972, 977, 978, 988, 993, 995, 996], "forest": [11, 27, 31, 108, 115, 118, 124, 125, 127, 129, 132, 133, 161, 164, 165, 171, 173, 226, 235, 254, 290, 309, 340, 351, 361, 379, 380, 390, 401, 443, 444, 471, 475, 476, 478, 495, 535, 536, 537, 538, 540, 543, 544, 545, 546, 611, 615, 805, 812, 839, 853, 882, 886, 887, 888, 951, 952, 963, 970, 982, 983, 984, 999, 1001, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1013], "rice": [11, 290, 478, 1017], "rat": [11, 290, 478], "rodent": [11, 290, 478], "live": [11, 69, 167, 290, 368, 392, 478, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606], "peru": [11, 290, 478], "colombia": [11, 290, 478], "ecuador": [11, 290, 478], "venezuela": [11, 290, 478], "entropi": [11, 237, 269, 290, 309, 315, 316, 351, 392, 399, 404, 478, 513, 537, 544, 588, 589, 639, 698, 716, 717, 721, 773, 886, 888, 958, 959, 962, 966, 978, 1006, 1008, 1012, 1013, 1018], "anderson": [11, 290, 478, 1010, 1016], "schapir": [11, 290, 399, 478, 533, 534], "ecolog": [11, 290, 478], "190": [11, 121, 215, 266, 290, 319, 373, 478], "231": [11, 203, 216, 290, 392, 403, 425, 478, 565], "259": [11, 220, 290, 399, 478, 547, 548], "________________________________________________________________________________": [11, 54, 340], "coastlin": [11, 290, 365], "coverag": [11, 122, 197, 215, 290, 370, 388, 478, 608, 701], "area": [11, 34, 125, 197, 215, 235, 254, 257, 264, 266, 267, 327, 332, 336, 365, 368, 371, 378, 390, 392, 399, 400, 683, 687, 688, 689, 722, 768, 769, 959, 962, 965, 981, 1006], "roc": [11, 25, 115, 164, 225, 227, 235, 236, 240, 250, 273, 374, 390, 396, 484, 490, 544, 639, 683, 687, 688, 689, 707, 722, 762, 768, 769, 796, 805, 808, 846, 883, 968, 1001, 1006, 1007, 1009, 1010, 1014, 1016], "868443": 11, "993919": 11, "elaps": [11, 47, 66, 116, 117, 355, 444, 447, 549, 550, 838, 839, 840, 841], "astro": [11, 156, 218, 245], "washington": [11, 156, 218, 245, 282, 290], "bunch": [11, 361, 362, 363, 444, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 487, 490, 547, 548, 549, 550, 613, 614, 615, 838, 839, 886, 887, 888, 889, 986, 997, 1009, 1011, 1014, 1016], "fetch_species_distribut": [11, 290, 1013], "ll": [11, 117, 252, 290, 368, 378, 512, 521, 965, 978, 988], "otherwis": [11, 55, 61, 112, 158, 162, 178, 199, 205, 290, 351, 357, 369, 371, 373, 380, 392, 394, 396, 400, 402, 415, 416, 417, 419, 421, 422, 423, 426, 431, 433, 434, 444, 447, 462, 463, 464, 465, 476, 506, 515, 516, 518, 520, 521, 527, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 569, 571, 572, 578, 583, 591, 592, 595, 612, 613, 614, 625, 626, 627, 633, 639, 640, 641, 643, 646, 647, 648, 649, 654, 656, 657, 658, 659, 666, 667, 671, 673, 677, 678, 679, 681, 683, 684, 688, 690, 694, 695, 704, 706, 707, 708, 709, 710, 718, 721, 732, 734, 735, 736, 754, 758, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 779, 780, 781, 782, 783, 791, 795, 796, 803, 808, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 834, 836, 837, 843, 844, 846, 850, 859, 860, 863, 864, 865, 867, 868, 869, 878, 880, 881, 882, 883, 884, 893, 899, 901, 914, 915, 922, 946, 948, 957, 958, 959, 962, 965, 966, 968, 969, 972, 974, 976, 977, 982, 986, 988, 1006, 1012, 1013, 1014, 1017], "improvis": [11, 290], "mpl_toolkit": [11, 45, 66, 89, 101, 102, 168, 194, 218, 220, 290], "except": [11, 16, 44, 53, 98, 205, 212, 226, 265, 277, 290, 294, 295, 299, 301, 312, 358, 361, 368, 369, 370, 371, 372, 378, 380, 386, 389, 393, 396, 397, 399, 400, 402, 413, 440, 445, 462, 463, 464, 489, 534, 536, 537, 538, 540, 542, 544, 545, 548, 550, 592, 608, 611, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 659, 660, 668, 692, 758, 784, 812, 813, 819, 820, 822, 825, 830, 836, 837, 843, 857, 859, 879, 881, 884, 887, 889, 919, 948, 958, 962, 977, 988, 996, 997, 1005, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017], "importerror": [11, 16, 53, 98, 277, 290, 375, 476], "construct_grid": [11, 290], "object": [11, 13, 14, 19, 26, 44, 50, 61, 65, 69, 70, 98, 129, 135, 144, 145, 154, 164, 168, 193, 197, 213, 215, 225, 236, 238, 239, 240, 255, 269, 290, 310, 311, 315, 341, 342, 351, 361, 362, 363, 368, 370, 372, 373, 374, 376, 379, 380, 381, 386, 392, 393, 394, 397, 400, 401, 402, 406, 408, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 458, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 692, 699, 712, 713, 722, 738, 739, 761, 762, 769, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 893, 898, 899, 900, 901, 902, 905, 909, 911, 921, 922, 923, 925, 927, 928, 930, 947, 948, 950, 958, 959, 960, 961, 965, 968, 969, 972, 975, 976, 977, 982, 983, 988, 989, 991, 992, 995, 997, 999, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "func": [11, 74, 115, 167, 177, 215, 290, 368, 393, 445, 680, 843, 972, 1008, 1010, 1012, 1013], "xgrid": [11, 290], "ygrid": [11, 290], "correspond": [11, 13, 16, 26, 32, 41, 53, 64, 77, 81, 97, 113, 116, 118, 125, 142, 145, 146, 150, 155, 158, 167, 186, 189, 197, 198, 206, 215, 227, 232, 239, 247, 256, 258, 260, 261, 266, 267, 290, 304, 309, 310, 311, 341, 345, 346, 351, 356, 362, 363, 364, 367, 368, 369, 371, 374, 375, 379, 380, 389, 390, 392, 394, 395, 396, 397, 399, 400, 401, 402, 407, 412, 418, 420, 422, 426, 428, 431, 433, 439, 441, 443, 444, 452, 462, 463, 464, 470, 471, 472, 473, 474, 475, 476, 514, 521, 524, 525, 526, 529, 530, 532, 535, 537, 539, 540, 541, 544, 563, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 592, 598, 611, 613, 614, 616, 624, 627, 628, 629, 633, 639, 640, 641, 642, 643, 649, 650, 652, 653, 654, 655, 656, 657, 659, 661, 662, 663, 664, 668, 671, 672, 673, 675, 684, 691, 694, 704, 705, 714, 718, 732, 734, 754, 758, 762, 768, 769, 772, 774, 775, 776, 777, 780, 781, 783, 791, 800, 808, 811, 814, 815, 816, 817, 818, 819, 820, 824, 825, 826, 828, 836, 837, 846, 850, 852, 853, 856, 867, 880, 883, 886, 887, 888, 889, 903, 909, 937, 951, 952, 954, 955, 956, 958, 959, 961, 962, 963, 965, 966, 967, 968, 969, 972, 973, 976, 977, 981, 988, 994, 997, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "coordin": [11, 12, 13, 54, 100, 128, 153, 182, 218, 258, 290, 355, 397, 402, 424, 427, 428, 429, 441, 451, 452, 458, 511, 517, 518, 519, 520, 522, 523, 525, 526, 527, 528, 530, 595, 627, 628, 632, 633, 634, 635, 636, 637, 639, 641, 642, 643, 644, 662, 663, 664, 665, 669, 670, 671, 674, 675, 687, 744, 749, 878, 958, 959, 977, 995, 1004, 1007, 1008, 1009, 1013, 1015, 1017, 1018, 1019], "corner": [11, 13, 26, 53, 166, 254, 258, 266, 267, 290, 368, 478, 890, 892, 962, 1018], "cell": [11, 12, 26, 32, 70, 71, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 167, 168, 169, 178, 227, 228, 229, 236, 237, 238, 239, 247, 255, 257, 258, 264, 269, 290, 296, 308, 309, 311, 312, 317, 349, 365, 372, 673, 962, 963, 1010, 1018], "xmin": [11, 77, 187, 189, 206, 207, 290], "x_left_lower_corn": [11, 290, 478], "grid_siz": [11, 60, 290, 478], "xmax": [11, 77, 187, 189, 206, 207, 290], "nx": [11, 34, 290, 478], "ymin": [11, 77, 184, 186, 189, 190, 198, 206, 257, 290], "y_left_lower_corn": [11, 290, 478], "ny": [11, 34, 256, 290, 365, 478, 952, 974], "create_species_bunch": 11, "species_nam": [11, 290], "record": [11, 96, 114, 169, 342, 355, 368, 392, 394, 430, 437, 478, 601, 624, 673, 751, 754, 758, 759, 760, 761, 802, 825, 1017, 1018], "join": [11, 12, 19, 161, 215, 257, 301, 363, 381, 443, 997, 1004, 1012], "ascii": [11, 290, 400, 467, 569, 570, 572], "pt": [11, 363, 401, 855, 972], "desir": [11, 24, 112, 146, 162, 197, 199, 299, 303, 361, 368, 369, 371, 375, 386, 389, 392, 395, 396, 397, 401, 483, 518, 520, 524, 527, 547, 574, 583, 584, 645, 651, 666, 667, 689, 716, 819, 820, 824, 844, 846, 849, 850, 852, 853, 855, 856, 862, 864, 866, 867, 902, 931, 954, 956, 959, 965, 972, 976, 977, 978, 988, 1004, 1012, 1013, 1014, 1017], "pts_": 11, "ix": [11, 266, 334], "searchsort": 11, "dd": [11, 12, 127, 290, 478], "ii": [11, 96, 168, 204, 252, 365, 400, 563, 570, 619, 647, 648, 842, 851, 958, 972, 981], "lat": [11, 290, 478], "cov_": [11, 81], "plot_species_distribut": 11, "bradypus_variegatus_0": 11, "microryzomys_minutus_0": 11, "bv_bunch": 11, "mm_bunch": 11, "background_point": 11, "randint": [11, 37, 80, 91, 121, 162, 169, 221, 229, 234, 269, 309, 369, 372, 379, 781, 798, 814, 815, 816, 818, 951, 952], "land": [11, 290, 381, 399], "water": 11, "land_refer": [11, 290], "standard": [11, 12, 26, 32, 34, 60, 69, 70, 72, 79, 80, 85, 96, 110, 113, 115, 116, 117, 118, 125, 129, 146, 149, 154, 156, 158, 167, 176, 182, 186, 195, 197, 206, 218, 219, 220, 231, 247, 252, 255, 256, 257, 258, 260, 299, 304, 325, 340, 355, 356, 360, 361, 362, 364, 365, 366, 368, 369, 370, 372, 373, 376, 378, 380, 383, 386, 388, 392, 394, 395, 396, 400, 402, 448, 452, 468, 476, 481, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 502, 504, 505, 510, 512, 515, 521, 532, 571, 575, 592, 615, 625, 626, 631, 632, 635, 636, 637, 645, 646, 653, 654, 655, 656, 657, 659, 668, 670, 674, 768, 783, 798, 816, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 843, 848, 849, 852, 855, 856, 857, 859, 866, 867, 868, 869, 876, 878, 879, 898, 951, 954, 958, 959, 962, 964, 965, 966, 968, 976, 977, 983, 986, 988, 993, 995, 996, 997, 999, 1010, 1011, 1012, 1013, 1015, 1016, 1017], "cov_train": 11, "train_cover_std": 11, "cyl": [11, 290], "llcrnrlat": [11, 290], "urcrnrlat": [11, 290], "llcrnrlon": [11, 290], "urcrnrlon": [11, 290], "drawcoastlin": [11, 290], "drawcountri": [11, 290], "9998": [11, 290], "k": [11, 12, 16, 17, 24, 26, 30, 31, 36, 37, 38, 42, 49, 53, 55, 59, 62, 64, 67, 73, 74, 79, 89, 90, 91, 95, 102, 103, 109, 112, 118, 122, 125, 127, 128, 130, 131, 135, 138, 142, 143, 150, 152, 153, 157, 162, 164, 167, 168, 169, 179, 180, 182, 191, 194, 201, 209, 211, 230, 232, 233, 234, 242, 245, 257, 260, 261, 266, 267, 270, 277, 279, 280, 282, 283, 284, 285, 286, 288, 289, 290, 300, 301, 302, 303, 307, 311, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 339, 340, 342, 343, 351, 356, 362, 363, 365, 368, 375, 376, 380, 389, 390, 391, 393, 394, 395, 397, 398, 399, 400, 401, 402, 404, 421, 424, 427, 428, 429, 430, 431, 432, 433, 439, 440, 442, 449, 452, 468, 482, 484, 486, 492, 503, 511, 517, 521, 524, 525, 526, 529, 530, 533, 535, 537, 538, 539, 562, 570, 571, 572, 573, 575, 576, 577, 579, 580, 581, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 612, 620, 621, 629, 631, 632, 634, 635, 636, 637, 639, 640, 644, 645, 646, 647, 648, 650, 660, 661, 663, 664, 665, 666, 667, 669, 672, 676, 677, 685, 686, 689, 698, 706, 717, 723, 736, 738, 739, 741, 746, 749, 754, 755, 756, 757, 759, 771, 772, 773, 775, 776, 778, 782, 784, 785, 786, 789, 792, 793, 795, 796, 798, 803, 814, 819, 820, 821, 822, 823, 824, 825, 827, 829, 830, 831, 832, 833, 840, 844, 845, 846, 850, 851, 852, 854, 855, 859, 866, 871, 885, 893, 901, 910, 915, 936, 951, 952, 954, 955, 956, 958, 959, 960, 961, 964, 966, 967, 968, 970, 975, 976, 977, 978, 982, 985, 992, 998, 999, 1004, 1005, 1006, 1007, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "solid": [11, 16, 31, 33, 121, 152, 209, 210, 226, 290, 301, 986], "z": [11, 16, 34, 57, 101, 118, 138, 151, 153, 168, 207, 209, 210, 211, 218, 220, 226, 231, 246, 283, 290, 293, 301, 304, 320, 326, 327, 331, 332, 333, 337, 365, 389, 397, 399, 533, 534, 566, 620, 645, 652, 666, 667, 670, 674, 680, 704, 765, 859, 958, 959, 966, 967, 1019], "float64": [11, 13, 48, 53, 70, 121, 123, 124, 167, 168, 268, 311, 312, 356, 362, 368, 369, 380, 400, 458, 476, 477, 488, 489, 522, 562, 563, 570, 572, 622, 639, 654, 656, 718, 844, 852, 853, 880, 881, 883, 884, 887, 889, 896, 898, 933, 936, 938, 939, 940, 977, 988, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "idx": [11, 16, 19, 30, 45, 105, 112, 118, 130, 158, 168, 170, 181, 189, 196, 197, 206, 219, 235, 346, 393, 396], "9999": [11, 215, 290, 318, 478, 608, 1012], "coverages_land": 11, "contourf": [11, 16, 118, 211, 231, 283, 290, 293, 301, 302, 320, 326, 332, 337, 612, 613], "pts_train": 11, "pts_test": 11, "equal": [11, 12, 26, 37, 39, 53, 59, 79, 85, 110, 122, 152, 167, 198, 199, 201, 208, 214, 236, 244, 247, 251, 255, 257, 266, 287, 301, 327, 329, 336, 341, 363, 364, 368, 369, 380, 389, 390, 392, 396, 397, 399, 400, 405, 418, 421, 422, 423, 424, 426, 427, 429, 434, 439, 443, 449, 454, 459, 460, 483, 492, 495, 499, 512, 513, 514, 519, 521, 523, 524, 529, 530, 531, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 569, 574, 575, 578, 580, 581, 588, 589, 606, 609, 610, 613, 614, 615, 616, 618, 622, 623, 626, 630, 639, 640, 652, 680, 684, 699, 701, 709, 748, 763, 767, 768, 772, 774, 777, 778, 780, 781, 790, 791, 795, 800, 807, 811, 812, 819, 820, 821, 822, 827, 828, 829, 830, 831, 836, 837, 842, 843, 844, 851, 854, 857, 858, 859, 861, 868, 875, 878, 879, 885, 886, 887, 888, 889, 904, 915, 937, 943, 956, 958, 962, 963, 965, 966, 968, 972, 976, 977, 978, 996, 997, 1005, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "auc": [11, 25, 197, 215, 235, 254, 257, 261, 264, 266, 267, 683, 689, 768, 962, 1009, 1012, 1016], "pred_background": 11, "pred_test": 11, "cov_test": 11, "r_": [11, 34, 101, 105, 210, 211, 243, 264, 283, 284, 326, 332, 337, 392, 688, 962, 978], "fpr": [11, 227, 235, 254, 266, 267, 374, 573, 577, 679, 683, 687, 707, 769, 962, 1001, 1004], "tpr": [11, 227, 235, 254, 266, 267, 374, 683, 687, 769, 962, 1001, 1004], "threshold": [11, 25, 42, 64, 98, 105, 146, 164, 168, 170, 192, 227, 229, 254, 255, 256, 264, 275, 314, 321, 346, 349, 380, 392, 397, 399, 401, 422, 423, 426, 449, 480, 488, 489, 511, 517, 522, 528, 529, 530, 543, 569, 572, 574, 578, 583, 584, 625, 648, 652, 657, 659, 673, 679, 681, 683, 684, 687, 688, 701, 706, 707, 719, 720, 736, 762, 768, 769, 772, 775, 776, 796, 814, 825, 826, 842, 844, 846, 861, 873, 874, 875, 883, 890, 892, 936, 958, 962, 965, 966, 968, 972, 975, 977, 978, 983, 1004, 1008, 1009, 1011, 1012, 1013, 1014, 1016, 1017, 1018], "roc_curv": [11, 227, 254, 266, 683, 687, 707, 762, 768, 962, 1004, 1005, 1006, 1009, 1010, 1012, 1017], "roc_auc": [11, 257, 261, 266, 267, 374, 615, 683, 962, 1001], "ntime": [11, 268], "452": [11, 15], "plot_species_distribution_model": [11, 15, 478], "emploi": [12, 149, 232, 394, 400, 402, 430, 458, 563, 570, 970, 986, 996, 1010], "techniqu": [12, 69, 71, 97, 106, 111, 120, 137, 145, 162, 166, 205, 220, 222, 262, 281, 310, 316, 345, 357, 365, 378, 380, 391, 392, 396, 397, 398, 399, 400, 401, 427, 428, 429, 430, 514, 534, 658, 670, 674, 675, 706, 736, 954, 958, 959, 961, 962, 965, 968, 970, 974, 976, 978, 983, 986, 991, 996, 997, 1017], "histor": [12, 197, 983], "quot": [12, 14, 69, 258, 340, 341, 356, 362, 363, 366, 371, 391, 468, 469, 476, 962, 974, 977, 997], "quantiti": [12, 119, 257, 264, 309, 355, 380, 392, 399, 702, 703, 704, 765, 835, 951, 953, 956, 958, 1009], "daili": [12, 986], "price": [12, 74, 119, 129, 952, 958, 986, 993], "link": [12, 17, 167, 168, 176, 197, 215, 242, 260, 287, 345, 356, 366, 367, 368, 371, 375, 380, 392, 394, 397, 402, 541, 542, 591, 629, 650, 661, 669, 686, 897, 899, 958, 965, 978, 979, 982, 985, 991, 995, 997, 1002, 1004, 1007, 1008, 1011, 1012, 1015], "fluctuat": [12, 59, 197, 264, 1012], "normalesup": [12, 32, 46, 65, 231], "2003": [12, 389, 392, 397, 400, 431, 432, 442, 493, 495, 670, 674, 814, 816, 958, 959, 964, 974, 1012], "2008": [12, 394, 396, 397, 458, 514, 543, 571, 626, 645, 666, 667, 673, 697, 706, 736, 809, 814, 818, 835, 956, 959, 960, 962, 963, 964, 967, 968, 977], "calm": 12, "ago": [12, 983], "tech": [12, 365, 817], "firm": [12, 392], "crash": [12, 368, 448, 868, 869, 876, 972, 1008, 1012], "nasdaq": 12, "alphavantag": 12, "symbol_dict": 12, "tot": 12, "xom": 12, "exxon": 12, "cvx": 12, "chevron": 12, "cop": 12, "conocophillip": 12, "vlo": 12, "valero": 12, "energi": [12, 375, 835, 967, 995], "msft": 12, "ibm": [12, 19, 319, 342, 363], "twx": 12, "warner": 12, "cmcsa": 12, "comcast": 12, "cvc": 12, "cablevis": 12, "yhoo": 12, "yahoo": 12, "dell": 12, "hpq": 12, "hp": [12, 997], "amzn": 12, "amazon": 12, "tm": [12, 965], "toyota": 12, "caj": 12, "canon": [12, 380, 399, 462, 463, 465, 748, 983, 984, 999], "sne": [12, 164, 217, 218, 219, 220, 222, 224, 494, 505, 673, 998, 999], "soni": [12, 1014, 1016], "ford": 12, "hmc": 12, "honda": [12, 19], "nav": 12, "navistar": 12, "noc": 12, "northrop": 12, "grumman": 12, "ba": [12, 836, 837, 966], "boe": 12, "ko": [12, 26, 150], "coca": 12, "cola": 12, "mmm": 12, "3m": 12, "mcd": [12, 79, 80, 394, 449, 454], "mcdonald": 12, "pep": [12, 375, 1004], "pepsi": 12, "kellogg": 12, "un": [12, 368, 390, 400, 404, 513, 570, 773, 842, 851, 861, 865, 1013], "unilev": 12, "mar": [12, 980], "marriott": 12, "pg": [12, 373, 630, 958, 1009], "procter": 12, "gambl": 12, "colgat": [12, 17], "palmol": 12, "ge": [12, 953, 964, 1016], "electr": [12, 365, 392], "wfc": 12, "fargo": 12, "jpm": 12, "jpmorgan": [12, 986], "chase": [12, 1004], "aig": 12, "axp": 12, "bac": 12, "bank": [12, 19, 986], "goldman": 12, "sach": 12, "aapl": 12, "appl": [12, 355, 366, 378, 963, 980], "sap": 12, "csco": 12, "cisco": 12, "txn": 12, "texa": [12, 69], "instrument": [12, 69, 96, 166], "xrx": 12, "xerox": 12, "wmt": 12, "wal": 12, "mart": [12, 1014], "hd": 12, "depot": 12, "gsk": 12, "glaxosmithklin": 12, "pfe": 12, "pfizer": 12, "sny": 12, "sanofi": 12, "aventi": 12, "nv": 12, "novarti": 12, "kmb": 12, "kimberli": 12, "clark": 12, "ryder": 12, "gd": [12, 132], "dynam": [12, 168, 535, 536, 543, 559, 561, 657, 658, 659, 978, 982, 986, 1010, 1016], "rtn": 12, "raytheon": 12, "cat": [12, 70, 168, 169, 310, 311, 312, 363, 400, 563, 693, 699, 734, 763, 962, 972, 1013, 1014, 1016], "caterpillar": 12, "dupont": 12, "nemour": 12, "symbol": [12, 342, 356, 369, 394, 400, 479, 563, 569, 570, 572, 890, 892, 982], "fetch": [12, 17, 129, 167, 215, 361, 362, 363, 368, 371, 372, 375, 391, 397, 476, 535, 536, 543, 569, 570, 572, 1012], "histori": [12, 358, 526, 539, 540, 980, 1004], "stderr": [12, 808], "url": [12, 17, 146, 362, 365, 371], "githubusercont": 12, "master": [12, 16, 277, 312, 368, 371, 986, 1009], "financi": [12, 392, 399, 958], "csv": [12, 362, 365, 372, 985, 1012, 1017], "read_csv": [12, 372, 1019], "close_pric": 12, "vstack": [12, 26, 56, 64, 152, 153, 179, 242, 246, 277, 290, 332, 612, 963, 1012], "q": [12, 70, 84, 122, 197, 310, 389, 392, 397, 914, 958, 977], "open_pric": 12, "carri": [12, 31, 162, 257, 260, 265, 294, 301, 342, 381, 386, 400, 537, 538, 539, 540, 544, 545, 546, 886, 887, 888, 889, 986, 996], "invers": [12, 54, 76, 82, 164, 247, 266, 327, 341, 342, 360, 380, 391, 393, 395, 396, 397, 400, 404, 426, 445, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 507, 513, 514, 515, 519, 521, 523, 537, 541, 544, 570, 571, 572, 609, 625, 626, 639, 640, 647, 649, 655, 656, 657, 658, 659, 661, 704, 723, 732, 775, 776, 821, 822, 829, 830, 836, 837, 839, 843, 846, 852, 853, 855, 870, 871, 878, 879, 880, 883, 884, 886, 888, 904, 956, 958, 962, 965, 966, 972, 976, 977, 995, 997, 998, 999, 1004, 1007, 1012, 1015, 1016, 1018], "correl": [12, 27, 81, 84, 85, 106, 126, 142, 145, 154, 164, 165, 166, 168, 169, 171, 186, 192, 215, 257, 275, 308, 309, 335, 361, 364, 365, 372, 380, 382, 389, 394, 396, 401, 402, 430, 437, 462, 463, 465, 473, 474, 480, 504, 544, 587, 590, 608, 615, 616, 617, 663, 664, 723, 737, 758, 759, 760, 805, 819, 820, 856, 857, 859, 867, 953, 958, 963, 969, 972, 976, 978, 983, 984, 999, 1004, 1005, 1006, 1017, 1018], "condition": [12, 27, 197, 390, 394, 738, 956], "connect": [12, 39, 44, 47, 51, 54, 61, 65, 66, 366, 368, 376, 380, 394, 422, 426, 432, 442, 443, 566, 567, 676, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 960, 965, 967, 975, 1008, 1017], "num": [12, 70, 146, 149, 154, 155, 156, 168, 169, 199, 264, 265, 311, 613, 951], "edge_model": 12, "graphicallassocv": [12, 81, 394, 451, 453, 454, 455, 456, 458, 1012, 1016, 1018], "seri": [12, 81, 116, 166, 169, 179, 197, 218, 235, 239, 262, 311, 315, 360, 363, 372, 380, 392, 469, 470, 471, 472, 476, 480, 481, 482, 484, 485, 490, 521, 671, 675, 798, 894, 953, 958, 959, 963, 965, 976, 982, 1007, 1010, 1011, 1012, 1016, 1019], "rather": [12, 53, 81, 113, 161, 167, 197, 198, 211, 303, 304, 340, 341, 351, 356, 364, 368, 369, 372, 373, 375, 378, 379, 380, 381, 392, 396, 397, 399, 400, 402, 428, 441, 443, 545, 562, 569, 570, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 610, 627, 628, 633, 634, 641, 642, 643, 644, 761, 791, 810, 812, 813, 842, 878, 879, 890, 915, 956, 958, 959, 962, 964, 965, 969, 983, 992, 995, 1004, 1005, 1006, 1007, 1011, 1012, 1013, 1014, 1019], "former": [12, 342, 399, 400, 545, 779, 786, 795, 964, 1004, 1010, 1013], "recoveri": [12, 81, 196, 394], "03162278": 12, "05994843": 12, "11364637": 12, "21544347": 12, "40842387": 12, "77426368": 12, "46779927": 12, "7825594": 12, "27499706": 12, "rerun": [12, 26, 42, 70, 71, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 167, 168, 169, 178, 227, 228, 229, 236, 237, 238, 239, 247, 255, 257, 258, 264, 269, 296, 308, 309, 311, 312, 317, 349, 375], "trust": [12, 26, 70, 71, 80, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 167, 168, 169, 178, 227, 228, 229, 236, 237, 238, 239, 247, 255, 257, 258, 264, 269, 296, 308, 309, 311, 312, 317, 349, 371, 381, 386, 390, 992, 1018], "unabl": [12, 26, 70, 71, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 166, 167, 168, 169, 178, 197, 227, 228, 229, 236, 237, 238, 239, 247, 255, 257, 258, 264, 269, 296, 308, 309, 311, 312, 317, 349, 357, 859, 972, 1013], "render": [12, 26, 53, 70, 71, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 167, 168, 169, 178, 192, 227, 228, 229, 236, 237, 238, 239, 247, 255, 257, 258, 264, 269, 296, 308, 309, 311, 312, 317, 349, 368, 371, 372, 373, 380, 531, 570, 612, 856, 867, 890, 892, 961, 978, 1017], "nbviewer": [12, 26, 70, 71, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 167, 168, 169, 178, 227, 228, 229, 236, 237, 238, 239, 247, 255, 257, 258, 264, 269, 296, 308, 309, 311, 312, 317, 349], "graphicallassocvgraphicallassocv": 12, "group": [12, 37, 40, 57, 59, 131, 168, 170, 197, 219, 248, 252, 317, 341, 349, 363, 372, 380, 381, 392, 398, 399, 400, 415, 475, 569, 570, 572, 575, 699, 768, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 806, 852, 888, 889, 958, 959, 961, 962, 963, 978, 979, 980, 982, 988, 991, 992, 1010, 1011, 1012, 1013, 1016, 1017, 1018], "amongst": [12, 978], "indic": [12, 19, 25, 26, 27, 48, 58, 59, 65, 74, 85, 95, 115, 154, 157, 162, 166, 168, 194, 220, 230, 251, 259, 260, 263, 264, 277, 290, 315, 316, 319, 340, 341, 342, 349, 356, 363, 368, 369, 371, 375, 376, 378, 380, 389, 390, 392, 394, 396, 397, 399, 400, 402, 403, 407, 418, 421, 425, 430, 431, 432, 433, 435, 436, 437, 440, 444, 447, 452, 467, 488, 489, 491, 492, 493, 503, 512, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 562, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 601, 608, 609, 610, 611, 613, 614, 620, 628, 631, 632, 634, 635, 636, 642, 644, 646, 654, 656, 663, 664, 671, 673, 675, 677, 684, 688, 693, 694, 699, 700, 701, 705, 708, 709, 710, 711, 714, 718, 719, 720, 721, 734, 751, 758, 759, 760, 761, 763, 764, 765, 767, 768, 770, 771, 772, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 810, 812, 813, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 843, 846, 850, 852, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 894, 898, 899, 904, 919, 925, 926, 952, 957, 958, 959, 962, 963, 964, 965, 966, 969, 970, 972, 973, 976, 977, 983, 988, 992, 995, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1014, 1015, 1017, 1019], "reflect": [12, 40, 46, 47, 79, 91, 96, 119, 168, 169, 197, 215, 266, 281, 341, 364, 367, 371, 380, 382, 389, 430, 436, 959, 962, 968, 970, 996, 1005, 1013], "properti": [12, 25, 156, 157, 199, 214, 243, 279, 304, 349, 355, 358, 361, 368, 369, 383, 389, 392, 394, 397, 399, 401, 402, 407, 423, 426, 431, 432, 433, 444, 445, 462, 463, 464, 522, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 571, 572, 574, 575, 578, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 613, 627, 629, 633, 636, 641, 643, 650, 655, 656, 661, 680, 685, 686, 689, 777, 780, 781, 791, 807, 808, 838, 839, 852, 854, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 951, 954, 957, 958, 959, 962, 963, 965, 968, 972, 975, 977, 978, 979, 983, 988, 1009, 1013, 1014, 1018], "impact": [12, 25, 36, 37, 67, 74, 142, 164, 166, 167, 168, 199, 215, 239, 251, 304, 312, 341, 351, 355, 356, 361, 378, 381, 392, 397, 427, 429, 516, 520, 527, 571, 647, 648, 649, 657, 658, 659, 673, 772, 777, 780, 781, 791, 802, 819, 820, 856, 867, 901, 915, 933, 936, 951, 961, 969, 977, 1011, 1014, 1017], "affinity_propag": [12, 44], "covariance_": [12, 34, 79, 81, 449, 450, 451, 452, 453, 454, 455, 456, 529, 530, 956, 1011], "n_label": [12, 91, 233, 380, 467, 503, 694, 701, 706, 719, 720, 734, 736, 770, 771, 797, 962, 1010, 1012], "lai": [12, 304, 968], "canva": [12, 16], "manifold": [12, 39, 52, 66, 221, 222, 223, 224, 277, 307, 311, 312, 317, 358, 361, 380, 392, 397, 399, 482, 505, 510, 524, 529, 546, 828, 840, 849, 871, 901, 965, 998, 999, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "dens": [12, 164, 175, 216, 311, 312, 319, 355, 376, 380, 392, 397, 399, 401, 424, 427, 429, 444, 447, 476, 503, 504, 514, 515, 524, 546, 566, 567, 588, 589, 610, 633, 638, 639, 640, 647, 649, 653, 654, 657, 658, 659, 668, 669, 670, 673, 674, 740, 741, 747, 759, 770, 836, 837, 844, 851, 852, 854, 856, 857, 859, 867, 868, 869, 870, 871, 878, 879, 880, 881, 883, 884, 916, 933, 936, 952, 955, 958, 959, 962, 963, 965, 968, 972, 974, 975, 976, 977, 978, 1004, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "eigen_solv": [12, 44, 46, 65, 218, 219, 397, 432, 442, 515, 669, 670, 672, 674, 676, 959, 1005, 1014, 1017, 1018, 1019], "arpack": [12, 19, 44, 46, 65, 219, 397, 431, 432, 433, 442, 515, 521, 524, 669, 670, 672, 674, 676, 959, 1010, 1011, 1016], "don": [12, 54, 69, 120, 167, 219, 233, 257, 277, 318, 324, 328, 335, 340, 341, 355, 362, 368, 369, 371, 373, 375, 378, 379, 393, 400, 627, 633, 807, 886, 887, 888, 889, 926, 951, 958, 961, 963, 966, 968, 976, 985, 997, 1008, 1013, 1020], "control": [12, 16, 60, 99, 100, 135, 154, 156, 198, 205, 229, 230, 258, 260, 279, 308, 310, 345, 347, 348, 355, 356, 361, 364, 368, 369, 372, 375, 378, 380, 383, 386, 391, 392, 395, 396, 397, 398, 401, 402, 415, 421, 429, 434, 451, 452, 458, 511, 516, 517, 518, 519, 520, 523, 525, 526, 527, 528, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 574, 575, 577, 595, 600, 606, 608, 611, 613, 615, 620, 622, 623, 627, 628, 630, 631, 632, 633, 635, 636, 637, 653, 657, 658, 663, 664, 668, 673, 682, 690, 775, 776, 777, 779, 780, 781, 782, 783, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 805, 806, 809, 810, 813, 836, 837, 858, 870, 871, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 892, 928, 949, 951, 958, 959, 961, 962, 963, 965, 968, 969, 974, 976, 977, 978, 982, 983, 984, 995, 999, 1004, 1006, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "neighbor": [12, 31, 39, 44, 47, 59, 127, 130, 137, 161, 162, 219, 220, 222, 226, 234, 235, 281, 282, 283, 284, 286, 287, 288, 290, 291, 309, 311, 312, 340, 358, 360, 365, 376, 380, 392, 398, 399, 400, 403, 406, 414, 422, 425, 426, 428, 430, 432, 437, 438, 441, 443, 476, 482, 484, 543, 550, 583, 588, 589, 608, 609, 669, 670, 671, 672, 673, 674, 677, 761, 777, 805, 839, 840, 859, 874, 882, 936, 963, 968, 983, 984, 991, 996, 998, 999, 1004, 1006, 1007, 1008, 1009, 1010, 1011], "node": [12, 41, 119, 123, 307, 345, 349, 375, 376, 392, 394, 397, 399, 422, 423, 426, 443, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 631, 635, 637, 663, 664, 673, 819, 820, 886, 887, 888, 889, 890, 892, 920, 930, 965, 967, 968, 969, 978, 1007, 1008, 1009, 1010, 1011, 1013, 1016, 1017, 1018, 1019], "plane": [12, 209, 231, 283, 326, 329, 331, 332, 337, 365, 432, 442, 956, 958, 977, 995], "node_position_model": 12, "locallylinearembed": [12, 218, 219, 220, 311, 669, 671, 673, 959, 965, 1009, 1010, 1018, 1019], "n_neighbor": [12, 44, 61, 66, 130, 161, 218, 219, 220, 222, 226, 235, 277, 279, 280, 283, 284, 285, 286, 288, 289, 304, 307, 309, 340, 399, 432, 583, 588, 589, 609, 669, 670, 672, 674, 677, 821, 822, 823, 825, 827, 828, 832, 873, 874, 952, 959, 965, 968, 975, 1011, 1018], "output": [12, 14, 16, 25, 27, 37, 53, 58, 98, 108, 113, 118, 119, 129, 133, 137, 138, 149, 157, 161, 162, 164, 167, 193, 225, 239, 240, 245, 251, 255, 257, 260, 264, 266, 267, 277, 300, 303, 307, 310, 311, 341, 342, 344, 349, 350, 361, 362, 363, 365, 368, 369, 373, 375, 378, 379, 380, 390, 391, 392, 393, 395, 396, 399, 400, 401, 408, 412, 414, 418, 422, 423, 424, 426, 427, 429, 430, 432, 439, 440, 442, 443, 444, 445, 446, 447, 448, 462, 463, 464, 465, 468, 471, 472, 473, 474, 475, 476, 477, 483, 485, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 562, 563, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 612, 613, 614, 616, 619, 620, 621, 622, 623, 627, 628, 631, 633, 634, 635, 638, 639, 641, 642, 643, 644, 647, 648, 649, 652, 654, 655, 657, 659, 660, 662, 663, 664, 665, 669, 670, 671, 673, 675, 677, 680, 681, 694, 695, 702, 703, 704, 706, 708, 715, 722, 725, 726, 728, 730, 731, 732, 733, 734, 736, 741, 747, 752, 765, 768, 775, 776, 779, 780, 781, 782, 783, 789, 791, 792, 793, 794, 795, 796, 797, 800, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 822, 823, 824, 828, 829, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 866, 867, 870, 871, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 899, 901, 904, 915, 916, 929, 949, 951, 952, 954, 956, 958, 959, 962, 963, 964, 965, 966, 969, 972, 977, 984, 988, 989, 991, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "edg": [12, 26, 46, 65, 98, 119, 221, 264, 375, 380, 389, 392, 394, 433, 541, 542, 566, 567, 569, 570, 572, 775, 816, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 844, 891, 972, 975, 986, 1010, 1012, 1015, 1018], "displai": [12, 25, 27, 34, 37, 46, 48, 59, 70, 80, 81, 84, 85, 88, 95, 120, 125, 126, 129, 164, 167, 168, 182, 184, 201, 215, 225, 226, 235, 240, 246, 254, 258, 259, 264, 271, 287, 308, 309, 331, 346, 355, 368, 370, 374, 376, 383, 393, 397, 400, 401, 419, 444, 447, 448, 476, 521, 544, 611, 612, 613, 639, 668, 678, 679, 681, 682, 683, 694, 699, 762, 769, 777, 783, 791, 805, 839, 840, 852, 854, 859, 876, 883, 890, 891, 892, 906, 928, 949, 962, 966, 982, 999, 1013, 1015, 1016, 1018, 1019, 1020], "strength": [12, 129, 156, 197, 201, 258, 307, 355, 395, 399, 547, 548, 624, 629, 630, 633, 639, 640, 650, 653, 654, 655, 656, 657, 659, 661, 668, 763, 836, 837, 878, 879, 883, 884, 951, 958, 965, 968, 976, 977], "plan": [12, 362, 366, 368, 381, 972, 1007], "fair": [12, 399, 671, 675, 808, 963, 986], "crucial": [12, 166, 252, 355, 367, 368, 381, 392, 402, 977], "challeng": [12, 129, 149, 168, 176, 215, 226, 357, 363, 364, 392, 394, 442, 452, 962, 968, 986, 988], "overlap": [12, 37, 110, 123, 145, 221, 244, 341, 366, 389, 392, 396, 399, 400, 568, 770, 771, 778, 782, 784, 785, 786, 787, 795, 959, 972, 1010], "heurist": [12, 14, 121, 340, 356, 392, 401, 429, 432, 441, 442, 488, 489, 517, 519, 526, 657, 658, 659, 672, 676, 780, 781, 880, 881, 882, 883, 884, 903, 959, 960, 965, 976, 978, 986, 995, 1004, 1005, 1009, 1013, 1016, 1017], "direct": [12, 84, 85, 89, 95, 97, 101, 104, 146, 203, 242, 248, 254, 286, 296, 304, 327, 332, 366, 368, 371, 373, 375, 381, 392, 395, 397, 400, 401, 432, 442, 451, 452, 458, 514, 521, 529, 569, 570, 572, 583, 622, 669, 828, 956, 958, 963, 965, 967, 983, 996, 1004, 1007], "nearest": [12, 13, 31, 32, 39, 40, 50, 51, 54, 57, 60, 81, 88, 95, 98, 153, 162, 188, 209, 213, 234, 281, 283, 286, 287, 291, 296, 326, 327, 331, 332, 333, 337, 358, 360, 365, 376, 380, 392, 398, 399, 403, 406, 414, 425, 428, 430, 432, 437, 441, 442, 476, 482, 484, 588, 589, 608, 609, 611, 616, 669, 670, 672, 673, 677, 770, 771, 777, 805, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 839, 840, 844, 859, 936, 959, 968, 977, 983, 984, 991, 999, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1016], "along": [12, 13, 55, 58, 65, 85, 116, 122, 184, 197, 231, 261, 307, 341, 342, 351, 371, 373, 375, 376, 380, 383, 386, 389, 397, 399, 400, 401, 402, 404, 513, 530, 568, 592, 593, 611, 627, 628, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 657, 659, 662, 663, 664, 665, 666, 667, 759, 760, 770, 777, 791, 848, 849, 852, 856, 857, 858, 859, 863, 864, 865, 867, 868, 869, 894, 917, 937, 943, 951, 958, 965, 972, 975, 986, 1004, 1009, 1010, 1012, 1016, 1017], "linecollect": [12, 221, 229, 613], "facecolor": [12, 16, 26, 34, 45, 59, 95, 102, 112, 138, 157, 218, 233, 257, 284, 301, 325, 328, 331, 332, 334], "partial_correl": 12, "precision_": [12, 81, 449, 450, 451, 452, 453, 454, 455, 456], "sqrt": [12, 79, 80, 81, 98, 101, 105, 114, 135, 176, 178, 221, 223, 237, 242, 243, 244, 247, 248, 257, 332, 392, 399, 400, 402, 443, 449, 450, 451, 452, 453, 454, 455, 456, 518, 520, 527, 537, 538, 539, 540, 544, 545, 600, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 680, 711, 743, 744, 749, 859, 871, 886, 887, 888, 889, 954, 958, 959, 962, 964, 974, 1018], "diag": [12, 81, 157, 244, 247, 397, 402, 512, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 775, 776, 958, 1019], "newaxi": [12, 13, 19, 24, 42, 81, 105, 111, 150, 178, 187, 193, 198, 199, 200, 202, 203, 214, 229, 231, 271, 282, 289, 335, 347, 348, 389, 516, 958], "ab": [12, 17, 40, 74, 99, 106, 112, 119, 129, 142, 146, 170, 184, 188, 208, 210, 213, 215, 221, 257, 299, 325, 337, 392, 518, 520, 527, 608, 726, 819, 820, 854, 962], "triu": 12, "nipy_spectr": [12, 39, 46, 47, 51, 52, 59, 60, 102], "start_idx": [12, 221], "end_idx": [12, 221], "sequenc": [12, 118, 185, 221, 369, 380, 393, 396, 397, 399, 400, 483, 492, 541, 542, 549, 550, 562, 563, 569, 570, 572, 627, 777, 780, 788, 805, 862, 918, 919, 925, 933, 936, 982, 1004, 1007, 1009, 1010], "line0": [12, 221], "linen": [12, 221], "x0": [12, 34, 189, 206, 221, 299, 324, 380, 412, 444, 547, 548, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 842, 843, 844, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859], "y0": [12, 221], "y1": [12, 90, 112, 221, 489, 697, 744, 963, 964], "xm": [12, 221], "ym": [12, 221], "segment": [12, 36, 47, 67, 164, 221, 229, 363, 375, 390, 392, 400, 432, 442, 488, 489, 672, 835, 962, 982, 986, 1012, 1014, 1016], "stop": [12, 17, 44, 61, 108, 133, 154, 156, 164, 168, 175, 199, 216, 308, 368, 369, 375, 376, 380, 392, 397, 399, 401, 421, 422, 424, 426, 427, 429, 432, 434, 442, 443, 451, 452, 458, 462, 463, 464, 476, 484, 488, 489, 495, 500, 512, 516, 517, 518, 519, 520, 523, 525, 526, 527, 533, 534, 537, 538, 539, 540, 541, 542, 544, 545, 551, 569, 570, 572, 583, 598, 608, 625, 626, 627, 629, 630, 633, 637, 639, 640, 647, 648, 649, 650, 652, 657, 658, 659, 661, 672, 673, 676, 695, 775, 776, 805, 836, 837, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 920, 936, 951, 958, 966, 967, 977, 978, 983, 984, 986, 999, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019], "lc": [12, 221, 229], "zorder": [12, 34, 57, 97, 126, 138, 150, 158, 187, 195, 219, 221, 229, 232, 242, 308, 331, 332], "hot_r": [12, 299], "norm": [12, 13, 14, 17, 34, 40, 54, 98, 101, 152, 155, 176, 183, 188, 221, 242, 243, 244, 246, 248, 254, 258, 282, 299, 327, 341, 373, 376, 380, 392, 400, 401, 423, 424, 427, 439, 440, 444, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 469, 511, 514, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 570, 571, 572, 578, 624, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 653, 657, 659, 662, 665, 666, 667, 671, 673, 674, 675, 750, 816, 851, 865, 878, 880, 883, 944, 945, 955, 958, 960, 962, 972, 976, 1007, 1009, 1011, 1015], "set_arrai": [12, 221, 229], "set_linewidth": [12, 221, 229], "add_collect": [12, 221, 229], "index": [12, 14, 17, 30, 37, 38, 39, 40, 41, 49, 50, 57, 71, 115, 116, 120, 143, 146, 154, 161, 166, 167, 168, 169, 197, 215, 236, 239, 243, 244, 248, 252, 255, 256, 257, 258, 260, 268, 269, 277, 299, 304, 311, 315, 316, 341, 342, 363, 365, 366, 368, 369, 371, 376, 378, 380, 389, 393, 396, 397, 399, 400, 407, 424, 427, 428, 429, 430, 431, 433, 434, 437, 439, 440, 444, 447, 483, 489, 537, 538, 539, 540, 544, 545, 546, 568, 569, 570, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 598, 613, 614, 621, 678, 685, 686, 693, 697, 699, 711, 718, 737, 759, 760, 766, 768, 772, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 805, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 852, 886, 887, 888, 889, 919, 933, 936, 941, 942, 962, 964, 965, 966, 976, 978, 982, 995, 997, 1004, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020], "dx": [12, 13, 506, 680], "dy": [12, 680], "this_dx": 12, "argmin": [12, 121, 256, 369, 394, 511, 517, 525, 526, 666, 759, 760, 978], "this_di": 12, "horizontalalign": [12, 26, 31, 40, 44, 45, 61, 102, 226, 242, 293, 301], "verticalalign": [12, 26, 39, 40], "edgecolor": [12, 16, 24, 30, 31, 34, 42, 45, 55, 59, 66, 89, 90, 91, 102, 112, 118, 125, 127, 128, 130, 131, 138, 141, 150, 151, 153, 157, 168, 180, 189, 199, 206, 209, 210, 211, 230, 231, 232, 233, 242, 245, 257, 260, 271, 280, 283, 284, 285, 288, 293, 301, 302, 304, 320, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 337, 346, 347, 348, 612], "ptp": 12, "03": [12, 52, 66, 67, 79, 82, 84, 95, 133, 154, 159, 163, 167, 178, 215, 224, 230, 240, 242, 248, 258, 291, 297, 305, 316, 365, 400, 728, 777, 958, 962], "772": [12, 15, 703], "plot_stock_market": [12, 15], "parallel": [13, 108, 114, 118, 133, 164, 168, 199, 258, 308, 309, 311, 332, 349, 354, 360, 368, 370, 371, 378, 380, 393, 401, 403, 404, 418, 425, 428, 429, 430, 432, 437, 438, 441, 444, 447, 452, 475, 511, 513, 514, 515, 517, 519, 521, 522, 523, 525, 526, 528, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 570, 575, 583, 591, 613, 615, 620, 639, 669, 670, 671, 672, 673, 674, 675, 754, 758, 761, 777, 780, 781, 783, 788, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 812, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 838, 841, 873, 874, 930, 932, 983, 992, 997, 999, 1004, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1019], "acquir": [13, 117, 259, 1016], "angl": [13, 34, 98, 146, 242, 243, 244, 247, 248, 365, 397, 511, 517, 519, 522, 523, 525, 526, 528, 631, 632, 633, 634, 635, 636, 637, 644, 645, 646, 659, 663, 664, 665, 666, 667, 673, 959, 960, 984, 999, 1004], "Such": [13, 125, 149, 154, 166, 176, 186, 198, 260, 340, 380, 381, 396, 397, 399, 535, 536, 637, 952, 962, 965, 972, 978, 995, 1014, 1019], "ct": [13, 157, 239, 393, 444, 446, 447], "cellular": 13, "materi": [13, 381, 562, 868, 869, 981], "haar": 13, "wavelet": [13, 105, 397], "sparsiti": [13, 81, 164, 175, 190, 212, 213, 216, 232, 341, 355, 380, 394, 397, 399, 401, 481, 482, 507, 511, 517, 518, 519, 520, 523, 525, 526, 527, 627, 633, 638, 639, 657, 659, 702, 703, 704, 848, 854, 859, 863, 955, 958, 965, 972, 991, 996, 1006], "oper": [13, 19, 157, 164, 232, 250, 254, 264, 273, 342, 355, 356, 365, 366, 368, 370, 373, 378, 380, 381, 383, 386, 388, 396, 397, 399, 400, 401, 405, 428, 441, 448, 455, 462, 463, 464, 465, 484, 513, 514, 521, 531, 532, 546, 552, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 597, 602, 605, 611, 616, 624, 639, 670, 674, 683, 687, 688, 689, 707, 754, 761, 762, 768, 769, 796, 805, 808, 819, 820, 842, 846, 851, 861, 862, 876, 883, 886, 917, 930, 935, 958, 965, 972, 977, 982, 986, 995, 1008, 1010, 1011, 1012, 1014, 1015], "fidel": 13, "penal": [13, 30, 81, 129, 186, 190, 197, 213, 215, 304, 335, 392, 394, 397, 401, 449, 450, 451, 452, 453, 454, 455, 456, 458, 628, 633, 634, 642, 644, 657, 686, 696, 714, 766, 773, 852, 878, 885, 958, 962, 964, 966, 976, 977, 995], "account": [13, 97, 104, 154, 161, 167, 215, 257, 286, 335, 337, 341, 355, 364, 368, 380, 381, 386, 392, 395, 396, 397, 399, 400, 443, 547, 548, 608, 609, 611, 613, 614, 630, 654, 660, 685, 688, 708, 709, 710, 718, 723, 736, 763, 764, 767, 768, 778, 782, 795, 954, 956, 960, 962, 963, 964, 965, 976, 978, 1009, 1011, 1012, 1013, 1016, 1017, 1019], "call": [13, 17, 46, 48, 50, 54, 70, 91, 115, 121, 143, 149, 153, 155, 157, 158, 166, 168, 185, 197, 198, 215, 236, 238, 239, 257, 258, 266, 271, 272, 277, 279, 304, 309, 310, 340, 341, 342, 349, 355, 356, 357, 363, 366, 368, 369, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 383, 390, 392, 393, 394, 395, 396, 397, 399, 400, 402, 404, 413, 421, 424, 427, 429, 430, 431, 432, 433, 434, 437, 440, 442, 444, 445, 448, 449, 454, 462, 463, 464, 468, 471, 472, 475, 477, 483, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 557, 563, 566, 567, 569, 570, 572, 578, 583, 588, 589, 591, 592, 595, 598, 601, 608, 609, 610, 611, 612, 613, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 670, 671, 672, 673, 674, 675, 676, 678, 680, 682, 685, 712, 722, 735, 751, 754, 758, 759, 760, 761, 771, 775, 776, 777, 779, 780, 781, 782, 783, 789, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 824, 825, 828, 830, 835, 836, 837, 838, 839, 842, 843, 844, 846, 848, 849, 851, 856, 859, 862, 867, 868, 869, 870, 871, 875, 878, 879, 880, 881, 883, 884, 887, 889, 905, 909, 914, 915, 928, 929, 930, 933, 936, 946, 951, 952, 954, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 970, 972, 974, 975, 977, 978, 982, 986, 988, 992, 995, 996, 997, 999, 1001, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "algorithm": [13, 17, 18, 22, 29, 36, 37, 42, 43, 45, 46, 55, 56, 60, 61, 65, 67, 78, 84, 95, 97, 109, 110, 111, 112, 164, 173, 184, 186, 200, 213, 220, 222, 225, 229, 235, 240, 243, 244, 245, 248, 254, 257, 266, 277, 283, 284, 286, 290, 299, 301, 304, 307, 308, 309, 312, 326, 340, 341, 351, 355, 357, 361, 362, 363, 364, 365, 368, 369, 370, 375, 376, 379, 380, 382, 388, 389, 391, 392, 394, 395, 396, 397, 399, 400, 402, 403, 404, 405, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 449, 454, 455, 458, 462, 463, 464, 468, 483, 491, 492, 493, 494, 495, 502, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 524, 525, 526, 527, 528, 533, 534, 535, 536, 539, 540, 543, 572, 584, 585, 591, 592, 616, 618, 620, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 655, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 685, 686, 689, 698, 700, 715, 717, 723, 754, 758, 759, 771, 773, 775, 776, 807, 816, 817, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 835, 840, 844, 846, 859, 862, 874, 878, 879, 880, 881, 882, 883, 884, 886, 887, 898, 914, 915, 917, 927, 931, 937, 952, 954, 957, 959, 960, 962, 964, 967, 968, 972, 975, 976, 977, 981, 982, 983, 984, 986, 988, 991, 992, 994, 996, 997, 999, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "computation": [13, 77, 95, 121, 129, 149, 277, 340, 354, 391, 392, 393, 396, 397, 399, 402, 518, 613, 614, 652, 743, 777, 779, 780, 781, 791, 802, 958, 959, 961, 969, 970, 974, 996, 999, 1008], "comparison": [13, 19, 23, 28, 29, 35, 36, 42, 48, 67, 78, 93, 96, 97, 107, 122, 127, 132, 140, 147, 148, 159, 164, 169, 179, 183, 185, 188, 195, 212, 217, 220, 224, 225, 229, 240, 244, 250, 252, 254, 273, 275, 293, 301, 303, 304, 307, 309, 320, 324, 339, 341, 343, 351, 363, 365, 380, 390, 394, 395, 397, 401, 418, 424, 427, 429, 468, 484, 492, 494, 495, 502, 505, 521, 529, 530, 533, 544, 562, 563, 569, 570, 571, 572, 587, 589, 591, 592, 596, 603, 606, 620, 624, 639, 653, 669, 670, 671, 672, 673, 685, 718, 723, 759, 768, 777, 780, 791, 793, 805, 814, 817, 821, 836, 840, 848, 849, 851, 855, 856, 857, 859, 863, 864, 865, 866, 867, 868, 869, 878, 880, 881, 883, 884, 886, 951, 956, 959, 962, 964, 965, 968, 977, 1001], "l2": [13, 30, 40, 81, 84, 164, 175, 182, 188, 197, 208, 212, 213, 215, 216, 258, 277, 299, 319, 340, 341, 369, 376, 378, 392, 394, 397, 400, 422, 426, 430, 437, 504, 518, 520, 527, 538, 541, 542, 545, 570, 571, 572, 624, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 653, 657, 659, 661, 662, 667, 668, 669, 715, 730, 741, 742, 758, 759, 760, 791, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 836, 837, 851, 859, 865, 878, 879, 883, 884, 885, 887, 889, 945, 951, 955, 958, 960, 965, 966, 972, 976, 978, 995, 997, 1006, 1008, 1009, 1011, 1013], "produc": [13, 25, 26, 44, 56, 69, 98, 122, 123, 124, 125, 263, 296, 318, 351, 363, 364, 368, 369, 372, 380, 381, 392, 393, 396, 397, 399, 421, 424, 432, 499, 516, 539, 543, 562, 569, 574, 575, 613, 614, 779, 780, 781, 789, 794, 797, 800, 844, 854, 880, 883, 953, 954, 958, 960, 961, 962, 965, 968, 969, 973, 975, 976, 977, 988, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "circular": 13, "separ": [13, 24, 25, 30, 31, 40, 59, 61, 65, 72, 79, 93, 95, 100, 107, 110, 112, 115, 117, 127, 162, 164, 168, 169, 173, 175, 198, 216, 219, 233, 244, 257, 260, 266, 267, 299, 301, 304, 309, 318, 322, 327, 331, 332, 338, 340, 351, 355, 364, 365, 369, 372, 375, 378, 380, 390, 392, 393, 394, 397, 399, 400, 402, 444, 492, 499, 513, 518, 520, 521, 527, 529, 562, 569, 570, 572, 591, 619, 627, 628, 654, 657, 658, 671, 675, 705, 712, 725, 726, 728, 733, 770, 796, 811, 812, 838, 839, 880, 882, 883, 888, 889, 951, 952, 954, 956, 958, 959, 961, 968, 969, 972, 976, 977, 993, 995, 996, 1004, 1007, 1009, 1010, 1014, 1016, 1017], "central": [13, 199, 392, 968, 982], "emmanuel": [13, 65, 1004, 1011, 1012, 1013], "gouillart": [13, 65, 1004], "nsup": 13, "ndimag": [13, 46, 47, 54, 296, 996], "_weight": [13, 215], "orig": 13, "floor_x": 13, "floor": 13, "astyp": [13, 37, 41, 44, 45, 53, 59, 61, 65, 80, 102, 119, 121, 138, 166, 187, 188, 215, 221, 232, 235, 268, 277, 400, 952, 958, 1011], "hstack": [13, 33, 34, 42, 131, 142, 223, 234, 252, 330, 396, 838], "_generate_center_coordin": 13, "l_x": 13, "mgrid": [13, 138, 331], "build_projection_oper": 13, "n_dir": 13, "endpoint": [13, 300, 330, 616], "data_ind": 13, "camera_ind": 13, "data_unravel_indic": 13, "xrot": 13, "ind": [13, 42, 121, 131, 341, 819, 820], "mask": [13, 42, 65, 117, 197, 205, 255, 256, 319, 376, 380, 393, 399, 449, 454, 541, 542, 562, 566, 567, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 610, 611, 613, 614, 630, 652, 777, 780, 781, 791, 934, 952, 969, 1004, 1007, 1009, 1010, 1012, 1014], "logical_and": [13, 122], "proj_oper": 13, "coo_matrix": [13, 183, 432, 566, 567, 933, 936], "generate_synthetic_data": 13, "n_pt": 13, "ogrid": 13, "mask_out": 13, "rand": [13, 24, 37, 38, 39, 40, 44, 49, 57, 61, 103, 113, 126, 128, 141, 176, 220, 221, 226, 232, 271, 289, 308, 309, 319, 320, 334, 335, 341, 347, 348, 376, 524, 685, 686, 696, 737, 761, 766, 870, 871, 873, 874, 875, 974, 988, 1004, 1015, 1016], "gaussian_filt": [13, 46, 47, 54, 996], "sigma": [13, 46, 47, 54, 79, 103, 122, 255, 257, 389, 394, 397, 399, 595, 630, 956, 958, 960, 964, 967, 996], "logical_xor": [13, 153, 333], "binary_eros": 13, "128": [13, 14, 197, 355, 516], "proj": [13, 630], "randn": [13, 33, 34, 39, 54, 64, 65, 79, 80, 98, 103, 125, 141, 149, 153, 166, 169, 181, 186, 191, 192, 196, 210, 211, 214, 243, 246, 247, 252, 264, 266, 267, 271, 283, 284, 308, 309, 326, 332, 333, 335, 337, 369, 372, 624, 651, 653, 659, 798, 881, 884], "rgr_ridg": 13, "rec_l2": 13, "cross": [13, 54, 57, 70, 73, 77, 81, 86, 103, 118, 119, 121, 122, 134, 139, 140, 144, 146, 147, 167, 168, 175, 185, 197, 199, 215, 216, 244, 245, 247, 250, 254, 257, 258, 259, 261, 263, 266, 271, 272, 273, 281, 296, 300, 307, 309, 318, 327, 335, 358, 363, 369, 370, 376, 378, 379, 380, 386, 387, 390, 393, 394, 397, 399, 400, 401, 402, 418, 451, 452, 453, 454, 455, 456, 458, 462, 463, 464, 465, 473, 481, 482, 484, 495, 521, 547, 548, 555, 574, 575, 578, 583, 587, 590, 623, 624, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 653, 654, 655, 656, 657, 659, 660, 662, 663, 664, 665, 666, 667, 682, 687, 694, 708, 721, 765, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 813, 839, 840, 859, 878, 880, 883, 921, 961, 962, 965, 966, 970, 977, 978, 982, 983, 984, 986, 988, 991, 999, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "lassocv": [13, 129, 135, 167, 186, 399, 401, 632, 633, 635, 636, 637, 644, 665, 958, 992, 1004, 1007, 1011, 1014, 1015, 1017, 1018], "rgr_lasso": 13, "rec_l1": 13, "interpol": [13, 32, 40, 50, 51, 54, 57, 81, 88, 95, 98, 153, 156, 164, 175, 188, 213, 216, 229, 234, 266, 281, 289, 296, 316, 327, 333, 402, 616, 626, 634, 644, 653, 665, 681, 688, 822, 830, 840, 854, 858, 953, 958, 962, 972, 1011, 1016], "133": [13, 55, 110], "wspace": [13, 14, 39, 44, 45, 61, 79, 95, 110, 112, 197, 215, 226, 242, 244, 245, 248, 282, 290, 316, 324], "535": [13, 15, 198, 216], "plot_tomography_l1_reconstruct": [13, 15], "nmf": [14, 71, 94, 373, 391, 400, 515, 518, 524, 527, 998, 999, 1004, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "latentdirichletalloc": [14, 357, 372, 397, 982, 1009, 1011, 1018, 1019], "corpu": [14, 341, 342, 363, 397, 569, 570, 571, 572, 997, 1005], "frobeniu": [14, 98, 424, 427, 439, 449, 450, 451, 452, 453, 454, 455, 456, 511, 517, 518, 520, 525, 526, 527, 958, 1011], "kullback": [14, 218, 397, 518, 520, 527, 673, 959, 1011], "leibler": [14, 218, 397, 518, 520, 527, 673, 959, 1011], "diverg": [14, 93, 107, 121, 164, 218, 223, 282, 518, 520, 527, 673, 835, 959, 961, 962, 967, 969, 1011, 1012, 1017], "probabilist": [14, 27, 30, 81, 93, 107, 148, 149, 152, 156, 159, 164, 340, 380, 390, 398, 399, 418, 453, 456, 512, 514, 515, 521, 539, 569, 570, 591, 603, 624, 626, 657, 684, 721, 777, 801, 846, 880, 881, 883, 884, 955, 956, 958, 961, 962, 967, 972, 977, 982, 986, 1004, 1007, 1011], "semant": [14, 340, 341, 380, 524, 997, 998, 999, 1006], "runnabl": [14, 371, 372], "coupl": [14, 52, 53, 219, 362, 363, 373, 389, 390, 392, 401, 570, 884, 951, 977], "ten": [14, 19, 110, 146, 219, 248, 363, 365, 399, 500, 883, 1013], "polynomi": [14, 161, 164, 172, 174, 175, 197, 203, 216, 237, 257, 271, 309, 310, 324, 331, 334, 360, 364, 432, 471, 601, 620, 621, 622, 624, 653, 745, 754, 755, 805, 840, 849, 851, 854, 858, 878, 880, 881, 882, 883, 884, 957, 977, 984, 999, 1016, 1017], "lda": [14, 33, 34, 93, 107, 164, 286, 351, 365, 388, 484, 516, 521, 529, 530, 828, 982, 984, 998, 999, 1009], "proport": [14, 26, 40, 145, 183, 197, 204, 210, 226, 260, 284, 287, 337, 355, 363, 390, 392, 394, 396, 397, 399, 400, 419, 420, 449, 454, 495, 529, 530, 535, 537, 539, 540, 541, 542, 543, 544, 564, 565, 569, 572, 608, 613, 639, 640, 647, 648, 649, 655, 656, 657, 659, 677, 682, 693, 778, 779, 780, 781, 794, 797, 805, 825, 836, 837, 853, 878, 879, 880, 883, 884, 886, 888, 890, 892, 904, 951, 961, 962, 965, 968, 976, 977, 978, 1009], "165": [14, 229, 240, 289, 291, 963], "tf": [14, 19, 230, 340, 341, 342, 363, 397, 501, 524, 569, 570, 571, 572, 818, 826, 851, 951, 960, 964, 972, 982, 997], "idf": [14, 19, 230, 340, 341, 342, 363, 397, 501, 524, 569, 570, 571, 572, 818, 826, 851, 951, 960, 964, 972, 997, 1004], "269": [14, 491], "261": [14, 340], "2000": [14, 26, 40, 50, 74, 96, 103, 120, 173, 245, 248, 257, 293, 311, 341, 363, 365, 392, 393, 399, 404, 432, 442, 513, 514, 539, 670, 672, 674, 723, 768, 775, 825, 855, 866, 959, 962, 968, 974, 988, 996], "072": [14, 341, 418, 629], "018": [14, 48, 257, 341, 452], "minibatchnmf": [14, 357, 397, 1018], "batch_siz": [14, 19, 42, 63, 95, 98, 99, 341, 397, 429, 514, 516, 517, 518, 519, 526, 835, 836, 837, 918, 919, 928, 1005, 1012, 1015, 1017, 1018], "085": 14, "233": [14, 324, 338], "904": [14, 61, 67, 255, 393], "ensta": [14, 17, 37, 48, 60, 197, 215, 219, 258, 260, 340, 341, 342], "chyi": [14, 1007, 1008, 1009, 1010, 1011], "kwei": [14, 1007, 1008, 1009, 1010, 1011], "yau": [14, 1007, 1008, 1009, 1010, 1011], "chyikwei": 14, "tfidfvector": [14, 19, 69, 258, 340, 363, 397, 400, 469, 569, 570, 571, 1004, 1006, 1012, 1013, 1014, 1017, 1018], "countvector": [14, 319, 342, 363, 372, 393, 397, 400, 469, 516, 563, 570, 571, 572, 997, 1004, 1006, 1009, 1012, 1013, 1014, 1015, 1016, 1017], "fetch_20newsgroup": [14, 19, 69, 258, 319, 340, 341, 342, 363, 469, 997, 1009, 1014], "n_top_word": 14, "init": [14, 42, 45, 57, 58, 60, 63, 168, 177, 218, 219, 221, 222, 223, 245, 277, 341, 370, 375, 392, 397, 399, 424, 427, 429, 431, 433, 439, 440, 518, 520, 527, 528, 539, 540, 613, 614, 671, 673, 675, 828, 959, 1004, 1013, 1016, 1018, 1019], "nndsvda": [14, 397, 518, 520, 527, 1013, 1016], "plot_top_word": 14, "feature_nam": [14, 19, 106, 116, 123, 126, 146, 167, 169, 170, 206, 236, 280, 299, 307, 308, 309, 324, 340, 346, 361, 363, 372, 393, 470, 471, 472, 476, 480, 481, 482, 484, 485, 490, 563, 612, 613, 614, 890, 891, 892, 970, 978], "flatten": [14, 32, 221, 231, 255, 303, 324, 336, 373, 482, 549, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 828], "topic_idx": 14, "top_features_ind": 14, "argsort": [14, 17, 19, 20, 21, 121, 123, 169, 170, 197, 215, 307, 315, 316, 340, 341, 363, 970], "top_featur": 14, "barh": [14, 123, 161, 162, 166, 167, 169, 170, 239, 340, 341, 342], "fontdict": [14, 39], "invert_yaxi": [14, 162, 342], "labels": [14, 303], "set_vis": [14, 281, 287, 299], "filter": [14, 46, 47, 203, 215, 255, 257, 279, 340, 369, 373, 376, 391, 392, 400, 428, 468, 469, 483, 569, 572, 576, 577, 578, 579, 754, 814, 907, 927, 964, 965, 994, 997, 1014], "useless": [14, 118, 260, 373, 401, 495, 508, 639, 693, 958, 972, 1013], "earli": [14, 44, 61, 108, 110, 118, 133, 164, 175, 216, 308, 380, 399, 422, 426, 429, 443, 476, 484, 495, 500, 516, 517, 518, 519, 526, 533, 534, 539, 540, 541, 542, 551, 608, 637, 647, 648, 649, 657, 659, 673, 805, 836, 837, 936, 959, 965, 972, 981, 983, 986, 1004, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019], "strip": [14, 215, 341, 355, 362, 363, 476], "header": [14, 69, 258, 340, 341, 363, 366, 400, 468, 469, 777, 780, 781, 791], "footer": [14, 69, 258, 340, 341, 363, 468, 469], "repli": [14, 340, 367, 368, 370], "common": [14, 17, 19, 98, 143, 146, 164, 165, 171, 252, 264, 309, 340, 342, 349, 355, 358, 362, 368, 369, 375, 378, 379, 382, 383, 389, 390, 391, 392, 393, 396, 398, 401, 402, 445, 447, 476, 571, 613, 634, 653, 654, 726, 733, 749, 792, 802, 805, 840, 842, 850, 851, 852, 857, 859, 863, 864, 866, 867, 868, 869, 917, 951, 952, 958, 965, 968, 972, 977, 978, 982, 983, 986, 988, 999, 1004, 1012, 1014, 1015, 1019], "english": [14, 19, 69, 340, 341, 342, 372, 400, 569, 570, 572, 982, 983, 997, 1017], "occur": [14, 69, 197, 215, 351, 368, 369, 375, 381, 389, 392, 394, 396, 400, 488, 489, 552, 562, 569, 571, 572, 608, 652, 776, 777, 780, 781, 783, 791, 801, 802, 803, 806, 903, 962, 964, 972, 997, 1004, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "data_sampl": 14, "tfidf_vector": 14, "max_df": [14, 258, 319, 340, 341, 569, 572, 1015], "min_df": [14, 19, 69, 258, 319, 340, 341, 400, 569, 572, 1004, 1006, 1015], "max_featur": [14, 31, 114, 124, 234, 254, 269, 309, 399, 401, 535, 536, 537, 538, 539, 540, 543, 544, 545, 569, 572, 578, 886, 887, 888, 889, 951, 958, 1004, 1006, 1007, 1011, 1012, 1015, 1018], "stop_word": [14, 19, 340, 341, 400, 569, 570, 572], "tfidf": [14, 69, 319, 400, 572, 997], "tf_vector": 14, "beta_loss": [14, 518, 520, 527, 1011], "alpha_w": [14, 397, 518, 520, 527, 1017], "00005": 14, "alpha_h": [14, 397, 518, 520, 527, 1017], "tfidf_feature_nam": 14, "get_feature_names_out": [14, 19, 167, 169, 310, 340, 341, 342, 363, 369, 380, 393, 400, 408, 412, 414, 423, 424, 426, 427, 429, 444, 447, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 546, 547, 548, 549, 550, 562, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 669, 670, 823, 828, 831, 835, 838, 839, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 972, 1017, 1018, 1019, 1020], "solver": [14, 30, 33, 34, 46, 65, 94, 164, 175, 186, 188, 189, 190, 197, 199, 212, 213, 215, 216, 293, 294, 295, 296, 340, 373, 378, 380, 383, 388, 392, 404, 432, 442, 451, 452, 458, 482, 513, 515, 520, 521, 524, 527, 529, 627, 628, 629, 633, 634, 639, 640, 641, 642, 643, 644, 647, 649, 650, 651, 653, 655, 657, 661, 662, 665, 668, 669, 670, 672, 674, 676, 768, 791, 805, 810, 813, 836, 837, 880, 881, 882, 883, 884, 956, 959, 962, 966, 976, 977, 982, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "mu": [14, 79, 80, 94, 257, 397, 405, 453, 455, 456, 459, 460, 461, 520, 527, 956, 958, 1011, 1014], "mbnmf": 14, "learning_method": [14, 372, 516], "learning_offset": [14, 516], "tf_feature_nam": 14, "plot_topics_extraction_with_nmf_lda": [14, 15], "690": [15, 199, 230, 240], "execut": [15, 22, 28, 35, 67, 75, 82, 86, 92, 107, 133, 139, 147, 159, 161, 163, 171, 174, 186, 216, 224, 232, 240, 249, 262, 273, 276, 291, 297, 305, 313, 321, 338, 343, 350, 356, 368, 373, 386, 392, 397, 403, 424, 441, 777, 783, 791, 800, 801, 802, 803, 806, 824, 928, 929, 972, 975, 989, 997, 1006, 1009, 1012], "auto_examples_appl": 15, "00": [15, 22, 28, 32, 35, 67, 75, 79, 82, 86, 92, 107, 133, 139, 147, 154, 159, 163, 167, 168, 171, 174, 188, 215, 216, 224, 230, 240, 249, 255, 258, 273, 276, 291, 296, 297, 305, 313, 315, 316, 321, 338, 341, 343, 350, 362, 365, 373, 392, 399, 400, 694, 696, 768, 777, 791, 803, 887, 958, 962, 972, 974, 976, 996], "09": [15, 97, 105, 167, 216, 230, 233, 270, 273, 296, 305, 392, 715, 817, 962, 972, 976], "07": [15, 22, 105, 133, 167, 193, 215, 249, 266, 273, 297, 304, 338, 351, 363, 392, 511, 541, 542, 673, 962, 976], "06": [15, 28, 35, 66, 82, 84, 147, 159, 167, 171, 188, 196, 197, 216, 257, 258, 273, 296, 301, 321, 334, 373, 462, 463, 464, 625, 626, 670, 674, 775, 776, 777, 791, 887, 958, 972, 974], "04": [15, 30, 40, 42, 54, 67, 75, 97, 105, 133, 139, 147, 154, 159, 167, 171, 178, 196, 215, 233, 242, 248, 257, 258, 270, 273, 290, 291, 297, 313, 334, 338, 365, 399, 401, 451, 452, 768, 777, 791, 958, 962, 966, 976], "real": [15, 31, 56, 69, 73, 77, 79, 108, 133, 152, 167, 222, 235, 251, 263, 271, 281, 300, 301, 342, 355, 358, 361, 362, 365, 371, 373, 376, 378, 379, 380, 389, 390, 392, 394, 396, 397, 399, 400, 449, 469, 470, 473, 474, 475, 476, 477, 480, 481, 484, 490, 500, 531, 532, 533, 535, 536, 537, 538, 539, 540, 544, 545, 573, 575, 576, 577, 578, 579, 580, 581, 680, 685, 704, 708, 732, 735, 737, 765, 773, 774, 804, 805, 836, 837, 880, 881, 882, 883, 884, 886, 887, 889, 952, 953, 954, 959, 962, 964, 966, 967, 968, 978, 981, 999, 1004, 1017], "svm_gui": [15, 16, 995], "wikipedia_principal_eigenvector": [15, 17], "graphic": [16, 19, 80, 168, 319, 340, 341, 342, 363, 373, 391, 392, 394, 397, 770, 771, 775, 809, 890, 962, 963, 969, 982, 997], "frontend": [16, 373], "mainli": [16, 27, 53, 113, 149, 266, 355, 369, 390, 592, 964, 969], "intend": [16, 56, 57, 99, 198, 340, 368, 369, 374, 378, 396, 448, 563, 654, 680, 848, 849, 859, 876, 957, 958, 962, 966, 973], "didact": [16, 368, 983], "region": [16, 25, 36, 47, 49, 53, 55, 65, 67, 130, 156, 164, 167, 197, 215, 226, 230, 231, 248, 302, 327, 365, 374, 380, 392, 399, 402, 428, 430, 436, 442, 568, 959, 962, 965, 968, 976, 978, 996], "induc": [16, 26, 55, 167, 188, 190, 195, 198, 212, 232, 342, 389, 391, 397, 399, 402, 429, 519, 523, 533, 537, 538, 539, 540, 544, 545, 546, 624, 706, 736, 852, 886, 887, 888, 889, 955, 962, 976, 995], "mous": [16, 362], "button": [16, 368, 375, 995], "prettenho": 16, "tkagg": 16, "backend": [16, 356, 380, 448, 876, 928, 930, 932, 962, 1007, 1012, 1013, 1014, 1015], "backend_tkagg": 16, "figurecanvastkagg": 16, "navigationtoolbar2tk": 16, "navigationtoolbar2tkagg": 16, "deprec": [16, 310, 358, 370, 371, 376, 380, 404, 418, 420, 422, 426, 427, 429, 430, 437, 439, 513, 516, 517, 519, 526, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 545, 549, 550, 559, 561, 563, 583, 608, 611, 613, 619, 629, 631, 632, 635, 636, 637, 639, 645, 646, 650, 652, 657, 661, 673, 680, 721, 736, 748, 758, 759, 760, 780, 781, 814, 815, 816, 818, 826, 838, 844, 852, 880, 881, 882, 883, 884, 886, 887, 888, 889, 894, 909, 910, 912, 923, 951, 952, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "contourset": 16, "tkinter": 16, "tk": 16, "dump_svmlight_fil": [16, 1004, 1005, 1009, 1019], "y_min": [16, 31, 34, 57, 89, 112, 118, 127, 138, 151, 231, 293, 301, 320, 331, 332, 616, 618], "y_max": [16, 31, 34, 57, 89, 112, 118, 127, 138, 151, 215, 231, 293, 301, 320, 331, 332, 616, 618], "x_min": [16, 31, 34, 52, 57, 89, 112, 118, 122, 127, 138, 151, 186, 231, 293, 301, 320, 331, 332], "x_max": [16, 31, 34, 52, 57, 89, 112, 118, 127, 138, 151, 231, 293, 301, 320, 331, 332], "notifi": [16, 552, 553, 554, 985, 1002, 1014], "regist": [16, 340, 373, 930, 932], "surfac": [16, 108, 133, 164, 189, 206, 323, 324, 344, 350, 399, 484, 533, 537, 544, 744, 886, 892, 956, 961, 976, 977, 978], "surface_typ": 16, "add_observ": 16, "set_surfac": 16, "intvar": 16, "coef0": [16, 173, 334, 432, 515, 620, 621, 624, 755, 757, 880, 881, 882, 883, 884, 960, 977], "kernel_map": 16, "hasattr": [16, 44, 55, 61, 81, 118, 215, 230, 293, 301, 340, 380, 922, 923, 1014], "decision_surfac": 16, "delta": [16, 395, 432], "clear_data": 16, "add_exampl": 16, "example_ad": 16, "refit": [16, 116, 135, 164, 250, 256, 258, 261, 273, 380, 396, 402, 482, 547, 608, 640, 646, 694, 777, 780, 781, 791, 805, 883, 951, 958, 962, 1011, 1012, 1013], "docstr": [16, 368, 369, 373, 380, 428, 441, 452, 680, 682, 905, 951, 962, 965, 966, 976, 1004, 1011, 1012, 1017, 1018], "set_ytick": [16, 31, 34, 43, 59, 63, 106, 127, 161, 162, 170, 188, 213, 242, 268, 293, 295, 301, 302, 324, 342], "set_xlim": [16, 31, 42, 59, 74, 79, 91, 115, 127, 162, 168, 195, 197, 202, 231, 242, 261, 263, 264, 282, 293, 299, 301, 302, 303, 304, 308, 336], "attributeerror": [16, 393, 539, 557, 922, 996, 1013, 1014, 1016], "get_tk_widget": 16, "pack": [16, 376, 1012], "fill": [16, 34, 118, 135, 169, 252, 282, 346, 380, 393, 397, 495, 507, 518, 520, 527, 568, 611, 890, 892, 952, 965, 978], "_tkcanva": 16, "mpl_connect": 16, "button_press_ev": 16, "onclick": 16, "toolbar": 16, "controllbar": 16, "c_label": 16, "plot_kernel": 16, "exp": [16, 46, 54, 65, 101, 105, 113, 122, 150, 181, 207, 282, 287, 290, 308, 309, 390, 392, 393, 398, 404, 432, 445, 501, 513, 516, 596, 597, 603, 622, 739, 746, 756, 836, 837, 855, 956, 958, 960, 964, 965, 966, 975, 976, 977, 995], "xdata": 16, "ydata": 16, "update_exampl": 16, "scalex": 16, "scalei": 16, "examples_load": 16, "remove_surfac": 16, "plot_support_vector": 16, "plot_decision_surfac": 16, "old": [16, 215, 368, 373, 392, 516, 627, 633, 959, 983, 985, 1004, 1009, 1010, 1012, 1017, 1018, 1019], "isinst": [16, 118, 215, 380], "lineset": 16, "support_vector": [16, 325], "place": [16, 59, 227, 236, 281, 355, 366, 368, 369, 372, 374, 381, 400, 402, 422, 426, 462, 463, 464, 495, 562, 571, 609, 611, 612, 748, 761, 775, 941, 942, 982, 1004, 1011, 1014, 1015, 1017], "circl": [16, 59, 100, 127, 128, 138, 223, 233, 284, 287, 294, 299, 301, 317, 348, 364, 371, 375, 392, 432, 442, 494, 502, 744, 977], "dash": [16, 33, 79, 110, 121, 131, 149, 152, 154, 167, 184, 189, 192, 198, 199, 206, 209, 210, 235, 257, 267, 329, 333, 976], "bone": [16, 210, 337], "rais": [16, 198, 233, 260, 303, 310, 368, 369, 371, 372, 373, 376, 378, 380, 386, 393, 396, 404, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 489, 513, 530, 539, 547, 553, 556, 557, 569, 570, 572, 584, 598, 610, 611, 613, 616, 617, 652, 677, 679, 680, 683, 690, 692, 693, 694, 695, 707, 709, 710, 718, 736, 758, 762, 763, 764, 767, 768, 769, 775, 776, 777, 780, 781, 783, 791, 801, 802, 803, 806, 811, 826, 828, 829, 834, 838, 843, 844, 852, 853, 857, 858, 859, 865, 881, 882, 883, 884, 893, 896, 898, 899, 901, 902, 919, 922, 946, 947, 948, 949, 962, 972, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "valueerror": [16, 233, 369, 373, 404, 448, 513, 557, 584, 598, 616, 652, 695, 811, 829, 838, 844, 858, 897, 901, 902, 947, 948, 949, 962, 972, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "fm": 16, "kernel_group": 16, "radiobutton": 16, "command": [16, 230, 355, 356, 366, 368, 371, 373, 375, 383, 400, 488, 982, 997, 1006], "anchor": [16, 268], "valbox": 16, "stringvar": 16, "textvari": 16, "cmap_group": 16, "hyperplan": [16, 164, 175, 189, 206, 216, 233, 260, 322, 324, 327, 332, 338, 492, 639, 640, 647, 649, 655, 656, 657, 658, 878, 880, 882, 883, 976, 977], "train_button": 16, "get_pars": 16, "optpars": 16, "optionpars": 16, "op": [16, 371, 560, 639, 640, 647, 649, 657, 658, 659, 836, 837, 878, 972], "add_opt": 16, "action": [16, 310, 340, 367, 370, 371, 383, 972, 1014], "store": [16, 32, 53, 54, 69, 71, 80, 89, 143, 157, 173, 183, 186, 219, 227, 236, 247, 262, 266, 315, 342, 349, 355, 362, 363, 368, 369, 374, 375, 376, 378, 380, 393, 395, 397, 399, 400, 402, 403, 419, 421, 425, 430, 437, 449, 450, 453, 454, 455, 456, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 483, 488, 514, 515, 521, 529, 530, 535, 536, 543, 549, 550, 570, 591, 592, 608, 612, 613, 616, 619, 630, 631, 635, 641, 642, 643, 644, 647, 648, 654, 656, 657, 658, 659, 669, 670, 671, 673, 678, 679, 681, 682, 683, 761, 775, 776, 777, 783, 791, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 834, 850, 857, 859, 873, 874, 875, 898, 899, 933, 936, 952, 954, 958, 965, 974, 977, 978, 982, 988, 997, 1001, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "dest": [16, 312], "dump": [16, 17, 386, 467, 819, 820], "argv": [16, 230], "opt": [16, 366, 369], "arg": [16, 294, 380, 397, 399, 406, 551, 552, 553, 554, 555, 556, 557, 558, 598, 680, 843, 958, 964, 965], "parse_arg": 16, "wm_titl": 16, "mainloop": 16, "__main__": [16, 319, 378], "classic": [17, 192, 222, 235, 242, 248, 365, 371, 394, 396, 397, 424, 427, 429, 439, 472, 480, 484, 490, 613, 614, 888, 889, 956, 958, 964, 991, 1004, 1005, 1009, 1018], "graph": [17, 25, 39, 44, 46, 65, 66, 157, 218, 254, 277, 279, 318, 355, 368, 370, 380, 389, 394, 403, 422, 425, 426, 432, 433, 437, 442, 443, 451, 452, 458, 491, 566, 567, 669, 672, 673, 676, 762, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 834, 874, 959, 962, 965, 967, 975, 978, 982, 986, 993, 996, 1004, 1011, 1012, 1014, 1017, 1019], "vertex": [17, 26, 433, 1017], "en": [17, 24, 375, 511, 517, 576, 617, 645, 649, 652, 666, 667, 676, 686, 821, 822, 827, 828, 829, 830, 857, 872, 886, 887, 958, 962, 977, 978], "wiki": [17, 24, 373, 375, 576, 617, 649, 652, 676, 686, 821, 822, 827, 828, 829, 830, 857, 872, 886, 887, 958, 978], "eigenvector_centr": 17, "webpag": [17, 173, 368], "pagerank": 17, "insid": [17, 19, 26, 168, 199, 257, 317, 327, 357, 362, 363, 369, 373, 392, 400, 569, 570, 572, 858, 930, 969, 986], "accord": [17, 24, 26, 37, 49, 77, 121, 146, 150, 180, 197, 215, 230, 307, 341, 351, 368, 369, 378, 379, 380, 381, 389, 392, 394, 396, 397, 399, 400, 402, 418, 430, 432, 436, 440, 442, 445, 449, 484, 496, 497, 498, 505, 510, 512, 515, 516, 518, 520, 530, 533, 534, 541, 542, 543, 546, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 622, 623, 625, 626, 630, 639, 640, 651, 661, 672, 676, 715, 759, 760, 777, 778, 779, 780, 781, 784, 785, 786, 791, 800, 814, 815, 816, 817, 818, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 842, 849, 857, 868, 870, 871, 878, 879, 880, 881, 883, 884, 923, 956, 958, 962, 964, 965, 972, 975, 976, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "tradit": [17, 197, 212, 341, 357, 390, 399, 400, 613, 675, 958, 961, 986], "power_iter": 17, "martinsson": [17, 515, 521, 915], "dbpedia": 17, "content": [17, 304, 340, 342, 363, 371, 373, 386, 391, 400, 466, 483, 488, 489, 569, 570, 572, 652, 892, 971, 986, 997, 1005, 1014], "bz2": [17, 488, 489], "bz2file": 17, "pprint": [17, 122, 258, 363, 910], "randomized_svd": [17, 376, 431, 433, 512, 521, 524, 526, 1004, 1005, 1010, 1017, 1018, 1019], "urlopen": 17, "redirects_url": 17, "redirects_en": 17, "nt": 17, "redirects_filenam": 17, "page_links_url": 17, "page_links_en": 17, "page_links_filenam": 17, "resourc": [17, 42, 122, 161, 197, 295, 309, 354, 358, 370, 379, 780, 781, 963, 980, 983, 986, 989, 999, 1012, 1017, 1018], "wait": [17, 368, 371, 380, 647, 648, 649, 657, 659, 1016], "wb": 17, "index_map": 17, "setdefault": [17, 893], "dbpedia_resource_prefix_len": 17, "shortname_slic": 17, "short_nam": 17, "nt_uri": 17, "uri": 17, "prefix": [17, 69, 258, 279, 307, 368, 371, 375, 402, 408, 423, 424, 426, 427, 429, 444, 447, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 620, 621, 622, 623, 669, 670, 783, 803, 823, 828, 831, 835, 839, 845, 870, 871, 1010, 1011, 1017, 1019], "get_redirect": 17, "transit": [17, 371, 1015], "malform": [17, 1008], "1000000": [17, 516], "08d": 17, "isoformat": 17, "closur": 17, "transitive_target": 17, "seen": [17, 25, 40, 65, 81, 98, 105, 116, 122, 167, 168, 193, 222, 229, 294, 299, 327, 340, 363, 369, 371, 379, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 408, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 501, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 604, 608, 609, 610, 611, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 775, 776, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 937, 943, 951, 957, 965, 966, 978, 986, 992, 993, 995, 996, 1016, 1017, 1018, 1019, 1020], "break": [17, 39, 46, 69, 80, 164, 186, 203, 244, 310, 316, 322, 338, 340, 342, 368, 369, 371, 373, 379, 392, 449, 492, 620, 754, 758, 761, 775, 852, 859, 863, 880, 883, 958, 961, 970, 972, 977, 983, 1004, 1005, 1011, 1012, 1014, 1016, 1020], "get_adjacency_matrix": 17, "resolv": [17, 367, 368, 371, 375, 381, 400, 432, 442, 672, 676, 915, 952, 962, 1011, 1013, 1014, 1017], "lil_matrix": 17, "float32": [17, 121, 221, 296, 312, 356, 363, 368, 369, 537, 538, 539, 540, 543, 544, 545, 546, 574, 575, 621, 622, 639, 743, 844, 886, 887, 888, 889, 896, 938, 939, 940, 978, 988, 997, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "del": [17, 373, 1016, 1017], "convert": [17, 34, 46, 48, 65, 70, 98, 154, 170, 197, 218, 238, 243, 244, 247, 248, 290, 355, 362, 376, 378, 380, 386, 400, 421, 424, 425, 427, 429, 430, 431, 432, 439, 444, 445, 476, 514, 521, 533, 534, 537, 538, 539, 540, 543, 544, 545, 546, 552, 562, 563, 569, 570, 571, 572, 574, 575, 587, 608, 609, 610, 611, 627, 633, 639, 640, 641, 643, 647, 649, 651, 655, 657, 658, 659, 673, 680, 758, 834, 843, 844, 846, 850, 852, 853, 854, 856, 878, 886, 887, 888, 889, 896, 898, 899, 921, 947, 948, 951, 958, 959, 960, 962, 972, 973, 977, 978, 997, 1004, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1015, 1016, 1019], "csr": [17, 342, 355, 362, 363, 376, 378, 380, 400, 403, 424, 427, 429, 430, 439, 477, 488, 503, 533, 534, 537, 538, 544, 545, 546, 611, 639, 673, 680, 695, 748, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 834, 842, 846, 848, 850, 851, 854, 857, 859, 861, 862, 863, 865, 868, 871, 886, 887, 888, 889, 894, 898, 899, 921, 925, 937, 938, 939, 940, 941, 942, 943, 965, 972, 976, 1004, 1005, 1010, 1012, 1013, 1019], "tocsr": 17, "convers": [17, 122, 188, 340, 351, 357, 362, 368, 369, 375, 378, 386, 400, 552, 834, 843, 851, 898, 899, 948, 959, 983, 986, 1012, 1013, 1014, 1017], "5m": 17, "ram": [17, 53, 357, 399, 870, 871, 964, 977, 997, 1010, 1016, 1019], "5000000": 17, "strongest": [17, 190], "highest": [17, 19, 26, 81, 142, 146, 255, 257, 268, 309, 340, 368, 378, 390, 396, 399, 401, 418, 535, 537, 544, 573, 576, 577, 579, 580, 581, 584, 585, 587, 616, 618, 706, 736, 772, 775, 777, 780, 781, 791, 875, 886, 917, 951, 958, 962, 963, 966, 976, 978, 1016], "centrality_scor": 17, "networkx": [17, 376], "copyright": [17, 81], "aric": 17, "hagberg": 17, "lanl": 17, "gov": [17, 365], "dan": [17, 1004, 1008, 1009, 1010, 1012, 1013], "schult": 17, "dschult": 17, "pieter": [17, 1010, 1011, 1018], "swart": 17, "incoming_count": 17, "nonzero": [17, 19, 105, 196, 230, 261, 342, 389, 403, 425, 503, 504, 511, 517, 522, 528, 569, 572, 666, 667, 680, 821, 822, 825, 827, 829, 830, 958, 962], "indptr": [17, 277, 349, 1012], "dangl": 17, "isclos": 17, "guess": [17, 118, 396, 399, 400, 458, 512, 518, 520, 521, 527, 962, 976], "prev_scor": 17, "dot": [17, 32, 33, 34, 44, 49, 54, 56, 61, 77, 78, 79, 81, 84, 85, 96, 97, 98, 103, 105, 113, 149, 150, 156, 157, 167, 178, 181, 189, 191, 192, 204, 231, 243, 244, 246, 247, 261, 323, 325, 355, 369, 373, 376, 380, 389, 397, 400, 513, 518, 520, 527, 571, 572, 595, 627, 628, 631, 633, 634, 635, 638, 641, 642, 643, 644, 662, 663, 664, 665, 668, 741, 743, 851, 890, 916, 960, 964, 972, 976, 977, 996, 1013], "converg": [17, 56, 60, 77, 78, 110, 120, 122, 149, 155, 158, 190, 199, 201, 205, 213, 245, 294, 295, 299, 304, 316, 357, 376, 380, 389, 392, 397, 400, 402, 404, 421, 424, 427, 428, 429, 432, 434, 439, 440, 441, 442, 451, 452, 458, 462, 463, 464, 513, 515, 516, 517, 518, 519, 526, 533, 551, 591, 625, 626, 627, 628, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 649, 653, 655, 657, 659, 663, 664, 668, 669, 671, 672, 675, 676, 775, 776, 828, 836, 837, 873, 874, 880, 952, 957, 958, 959, 961, 966, 976, 1004, 1007, 1008, 1009, 1011, 1012, 1015, 1017, 1018, 1019], "l_inf": 17, "scores_max": 17, "err": [17, 84, 99], "6f": [17, 99, 262, 717, 773], "concern": [18, 36, 76, 83, 87, 93, 108, 140, 148, 160, 164, 172, 175, 217, 241, 247, 274, 278, 292, 298, 314, 322, 339, 344, 355, 369, 391, 959, 974], "modul": [18, 36, 37, 49, 53, 76, 83, 87, 93, 95, 108, 140, 148, 158, 160, 164, 165, 172, 175, 212, 217, 218, 241, 250, 274, 278, 292, 294, 295, 298, 314, 322, 339, 344, 347, 362, 363, 366, 367, 368, 369, 371, 372, 373, 375, 376, 378, 380, 382, 383, 386, 389, 390, 391, 392, 395, 399, 400, 401, 403, 425, 483, 515, 559, 561, 640, 873, 907, 951, 956, 958, 960, 962, 963, 966, 968, 969, 972, 974, 976, 978, 979, 986, 991, 992, 997, 1005, 1006, 1007, 1009, 1010, 1014, 1016, 1018], "demo": [18, 22, 36, 67, 125, 164, 203, 247, 258, 266, 304, 340, 341, 369, 389, 392, 400, 421, 422, 425, 427, 428, 430, 431, 433, 435, 438, 482, 491, 492, 493, 521, 685, 686, 698, 700, 717, 771, 773, 840, 859], "spectral": [18, 22, 36, 44, 46, 49, 67, 164, 219, 220, 368, 400, 429, 431, 432, 433, 442, 449, 450, 451, 452, 453, 454, 455, 456, 468, 491, 493, 572, 669, 670, 671, 672, 673, 676, 700, 773, 965, 975, 998, 999, 1004, 1005], "twenti": [19, 230, 365, 389, 392, 997], "comp": [19, 84, 85, 98, 106, 296, 319, 340, 341, 342, 363, 997], "window": [19, 319, 363, 368, 369, 370, 400, 982, 1004, 1007, 1011, 1015, 1017, 1018], "misc": [19, 53, 98, 258, 319, 340, 341, 342, 363, 996], "categori": [19, 44, 61, 69, 70, 119, 129, 167, 168, 197, 205, 212, 235, 258, 294, 295, 301, 309, 312, 319, 340, 341, 342, 362, 363, 376, 391, 392, 393, 399, 400, 402, 468, 476, 477, 483, 541, 542, 629, 639, 640, 650, 661, 723, 738, 739, 815, 852, 853, 952, 958, 959, 960, 964, 970, 988, 997, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "noth": [19, 69, 340, 341, 372, 522, 564, 569, 570, 572, 695, 842, 851, 899, 972], "frequenc": [19, 27, 149, 168, 191, 197, 230, 308, 309, 340, 341, 342, 363, 378, 390, 396, 397, 399, 400, 401, 531, 537, 539, 540, 541, 544, 569, 570, 571, 572, 585, 639, 640, 645, 647, 649, 655, 656, 657, 666, 667, 808, 843, 852, 878, 880, 883, 886, 888, 904, 958, 959, 964, 972, 976, 978, 1006, 1008, 1009, 1015], "dhillon": [19, 389, 431, 433, 491], "cut": [19, 43, 46, 64, 65, 220, 371, 378, 389, 392, 432, 433, 442, 569, 572, 672, 676, 972], "minibatchkmean": [19, 36, 44, 50, 60, 67, 164, 341, 357, 392, 397, 421, 423, 427, 492, 759, 1005, 1010, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1020], "coclust": [19, 389, 431, 493], "4431": 19, "3177": 19, "1961": 19, "4388": 19, "talk": [19, 69, 258, 340, 341, 342, 358, 363, 380, 386, 986, 989, 997], "polit": [19, 340, 363, 367, 958, 963], "gun": [19, 363], "17": [19, 39, 52, 73, 79, 109, 133, 150, 167, 196, 223, 230, 260, 293, 296, 297, 303, 363, 366, 372, 383, 384, 385, 392, 396, 402, 425, 441, 467, 477, 503, 511, 516, 520, 527, 529, 530, 535, 539, 540, 549, 550, 578, 609, 630, 638, 639, 640, 647, 650, 653, 655, 668, 673, 709, 710, 720, 741, 746, 764, 767, 769, 795, 817, 828, 843, 848, 849, 857, 859, 864, 880, 883, 886, 887, 888, 889, 951, 952, 963, 965, 972, 980, 1000, 1002, 1004, 1005, 1006, 1007, 1010, 1013, 1018], "sci": [19, 69, 340, 341, 342, 363, 378, 670, 674, 850, 959, 972, 997], "med": [19, 69, 266, 363, 972, 997], "geb": 19, "gordon": [19, 245, 1010, 1014, 1016, 1018], "clinton": 19, "pitt": 19, "cdt": 19, "surrend": 19, "veal": 19, "1269": 19, "3558": 19, "soc": [19, 363, 997], "religion": [19, 258, 340, 341, 342, 363, 963, 997], "mideast": [19, 363], "alt": [19, 258, 319, 340, 341, 342, 363, 375, 997], "atheism": [19, 258, 319, 340, 341, 342, 363, 997], "god": [19, 340, 341, 997], "jesu": [19, 340, 341], "kent": 19, "belief": [19, 257, 835, 967], "christ": 19, "faith": [19, 155, 332], "moral": [19, 70, 340, 639, 1012, 1016, 1017], "2201": 19, "2747": 19, "mac": [19, 319, 363, 368, 689, 962], "hardwar": [19, 319, 342, 355, 356, 363, 366, 980, 1018, 1019], "pc": [19, 319, 342, 363], "voltag": 19, "dsp": 19, "stereo": 19, "ship": [19, 129, 162, 346, 356, 366, 383, 400, 958, 1004, 1013], "1773": 19, "2620": 19, "rec": [19, 342, 363, 622], "motorcycl": [19, 363], "auto": [19, 33, 44, 45, 48, 56, 57, 59, 91, 95, 153, 180, 218, 219, 220, 221, 223, 235, 237, 277, 280, 285, 308, 309, 310, 311, 312, 323, 324, 330, 333, 334, 342, 362, 363, 368, 369, 399, 402, 403, 422, 425, 426, 427, 429, 430, 432, 437, 439, 442, 476, 488, 489, 515, 521, 524, 529, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 574, 575, 578, 583, 588, 589, 610, 612, 613, 614, 616, 627, 628, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 661, 662, 663, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 681, 683, 721, 780, 781, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 836, 837, 852, 853, 870, 871, 875, 880, 881, 882, 883, 884, 886, 887, 888, 889, 914, 915, 928, 931, 953, 956, 958, 959, 965, 982, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "forsal": [19, 342, 363], "bike": [19, 969], "car": [19, 197], "dod": 19, "ride": 19, "helmet": 19, "bmw": 19, "201": [19, 121, 365, 565], "1175": 19, "turkish": 19, "armenia": 19, "armenian": 19, "turk": 19, "petch": 19, "sera": 19, "zuma": 19, "argic": 19, "gvg47": 19, "spectralcoclust": [19, 21, 389, 431, 1006, 1011, 1015], "v_measure_scor": [19, 37, 38, 49, 57, 341, 392, 698, 716, 717, 737, 962, 1013], "number_norm": 19, "token": [19, 342, 355, 363, 371, 400, 516, 569, 570, 571, 572, 1004, 1012, 1016], "placehold": [19, 371, 608, 609, 610, 611, 792, 793, 796, 797, 952], "begin": [19, 149, 252, 259, 275, 310, 340, 351, 368, 372, 373, 380, 389, 392, 399, 533, 534, 539, 541, 542, 647, 648, 657, 658, 659, 951, 958, 962, 972, 974, 976, 1012, 1018, 1019], "By": [19, 45, 95, 125, 126, 176, 266, 299, 307, 340, 356, 368, 373, 374, 380, 392, 393, 395, 396, 397, 398, 399, 401, 419, 422, 426, 430, 444, 447, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 504, 506, 529, 530, 537, 538, 539, 540, 544, 545, 566, 567, 569, 570, 572, 587, 590, 613, 614, 652, 654, 656, 658, 671, 673, 675, 678, 681, 683, 684, 699, 709, 710, 714, 718, 763, 764, 767, 772, 774, 780, 781, 825, 839, 840, 852, 853, 855, 857, 866, 868, 881, 882, 886, 887, 888, 889, 898, 899, 930, 951, 952, 954, 958, 962, 969, 972, 974, 978, 988, 992, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1018], "isdigit": [19, 400], "numbernormalizingvector": 19, "build_token": [19, 400, 569, 570, 572], "super": [19, 25, 27, 369, 400, 1012], "sport": [19, 363], "basebal": [19, 363], "hockei": [19, 363], "crypt": [19, 363], "electron": [19, 363, 365, 518, 520, 527, 608], "y_true": [19, 32, 58, 74, 129, 152, 197, 207, 215, 245, 318, 368, 413, 419, 420, 445, 462, 463, 464, 532, 534, 536, 537, 538, 540, 542, 544, 545, 548, 550, 592, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 659, 660, 678, 679, 681, 682, 683, 684, 688, 689, 690, 693, 694, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 762, 763, 764, 765, 767, 768, 769, 772, 774, 812, 813, 822, 830, 837, 879, 881, 884, 887, 889, 962, 1005, 1010, 1011, 1012, 1013, 1015, 1016, 1018, 1019], "n_cluster": [19, 20, 21, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 95, 311, 341, 368, 380, 392, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 439, 440, 441, 442, 443, 491, 493, 996, 1004, 1008, 1010, 1012, 1013, 1015, 1018], "svd_method": [19, 431, 433, 512, 1007], "kmean": [19, 36, 43, 45, 46, 48, 50, 53, 56, 57, 60, 67, 164, 245, 248, 302, 311, 341, 376, 392, 421, 424, 428, 429, 432, 442, 492, 770, 771, 775, 776, 844, 965, 972, 983, 996, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "20000": [19, 97], "n_init": [19, 42, 43, 44, 45, 48, 50, 56, 57, 59, 60, 63, 95, 218, 219, 220, 221, 308, 311, 341, 392, 424, 427, 429, 431, 432, 433, 439, 442, 671, 675, 775, 776, 996, 1004, 1012, 1018, 1019], "y_coclust": 19, "row_labels_": [19, 20, 21, 389, 431, 433], "y_kmean": 19, "fit_predict": [19, 55, 56, 59, 226, 284, 369, 380, 392, 410, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 449, 543, 658, 775, 776, 825, 831, 839, 882, 968, 1009, 1012, 1013, 1017, 1019], "document_nam": 19, "bicluster_ncut": 19, "col": [19, 25, 27, 38, 42, 49, 58, 62, 63, 69, 130, 218, 235, 336, 491, 493], "get_indic": [19, 407, 431, 433], "float_info": 19, "row_compl": 19, "logical_not": [19, 63, 105, 200], "rows_": [19, 389, 407, 431, 433], "col_compl": 19, "columns_": [19, 389, 407, 431, 433], "ident": [19, 63, 121, 192, 197, 215, 226, 230, 320, 340, 363, 369, 380, 389, 392, 393, 394, 396, 402, 405, 419, 420, 432, 444, 445, 453, 455, 456, 459, 460, 461, 468, 483, 531, 539, 540, 544, 545, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 624, 660, 661, 680, 685, 686, 716, 765, 773, 779, 782, 792, 793, 794, 796, 797, 821, 822, 828, 836, 837, 843, 844, 856, 867, 886, 887, 955, 956, 959, 962, 965, 966, 977, 1008, 1012, 1013, 1014, 1018], "most_common": 19, "counter": [19, 392, 657, 658, 659, 1017], "itemgett": 19, "revers": [19, 74, 146, 202, 257, 514, 521, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 592, 769, 839, 962, 1004, 1005, 1014, 1016], "best_idx": [19, 256], "get_shap": [19, 407, 431, 433], "cluster_doc": 19, "cluster_word": 19, "cat_str": 19, "0f": [19, 57], "out_of_cluster_doc": 19, "word_col": 19, "word_scor": 19, "important_word": 19, "751": [19, 22], "plot_bicluster_newsgroup": [19, 22], "checkerboard": [20, 389, 431, 433, 491, 493], "make_checkerboard": [20, 491, 1006], "rearrang": [20, 21, 389], "outer": [20, 100, 262, 317, 431, 494, 621, 631, 632, 635, 954, 1005], "product": [20, 70, 95, 130, 149, 154, 168, 351, 355, 369, 370, 373, 376, 386, 389, 397, 399, 431, 518, 520, 527, 563, 570, 571, 572, 594, 595, 614, 621, 645, 646, 666, 667, 741, 743, 755, 757, 851, 854, 870, 871, 916, 951, 954, 958, 960, 972, 974, 976, 977, 982, 986, 1012], "consensu": [20, 21, 37, 367, 368, 381, 389, 392, 630, 652, 659, 660, 700, 962], "kemaleren": [20, 21], "spectralbiclust": [20, 389, 433, 1006, 1010, 1011, 1015], "consensus_scor": [20, 21, 389, 1006], "matshow": [20, 21, 65, 117, 144, 295, 482], "row_idx": [20, 21, 197], "permut": [20, 21, 37, 80, 117, 123, 138, 164, 165, 171, 213, 250, 273, 382, 387, 392, 399, 444, 476, 480, 484, 539, 540, 544, 545, 608, 611, 615, 660, 685, 686, 698, 716, 717, 735, 737, 773, 794, 796, 804, 805, 839, 853, 883, 886, 887, 915, 931, 933, 936, 962, 976, 992, 995, 999, 1004, 1010, 1017, 1019], "col_idx": [20, 21], "biclusters_": [20, 21, 407, 431, 433], "1f": [20, 30, 50, 53, 94, 98, 177, 197, 230, 242, 244, 264, 307, 341, 342], "fit_data": [20, 21], "column_labels_": [20, 21, 389, 431, 433], "504": [20, 22], "plot_spectral_biclust": [20, 22], "biclust": [21, 22, 358, 400, 407, 429, 431, 433, 468, 491, 493, 572, 700, 773, 962, 998, 999, 1006, 1010, 1011], "make_biclust": [21, 493, 1006], "implant": 21, "328": [21, 22, 341, 710], "plot_spectral_coclust": [21, 22], "583": [22, 392, 995], "auto_examples_biclust": 22, "probabl": [23, 27, 28, 29, 35, 74, 91, 108, 109, 110, 130, 133, 141, 148, 149, 150, 151, 159, 164, 167, 218, 222, 227, 230, 257, 260, 263, 264, 267, 299, 303, 307, 309, 318, 320, 355, 358, 363, 364, 369, 373, 378, 380, 392, 396, 397, 400, 401, 402, 416, 417, 418, 419, 420, 427, 429, 484, 492, 495, 503, 507, 529, 530, 531, 533, 535, 537, 539, 541, 542, 544, 547, 549, 550, 574, 575, 591, 594, 595, 603, 608, 613, 614, 639, 640, 652, 657, 673, 679, 681, 683, 684, 687, 688, 690, 693, 697, 701, 706, 707, 709, 719, 720, 721, 722, 736, 762, 764, 767, 768, 769, 772, 775, 776, 777, 780, 781, 791, 804, 805, 808, 810, 811, 814, 815, 816, 817, 818, 821, 824, 829, 835, 836, 871, 872, 873, 874, 875, 878, 880, 883, 886, 888, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 972, 974, 975, 976, 978, 983, 984, 985, 997, 999, 1004, 1006, 1008, 1010, 1012, 1013, 1014, 1015, 1016, 1018], "confid": [24, 25, 26, 27, 154, 156, 243, 257, 260, 318, 381, 390, 402, 617, 639, 640, 647, 649, 652, 655, 656, 657, 679, 683, 688, 701, 706, 707, 719, 720, 736, 769, 807, 846, 878, 880, 883, 958, 961, 962, 963, 968, 975, 976, 977, 986, 997, 1014], "being": [24, 27, 45, 52, 81, 85, 89, 100, 114, 126, 149, 154, 167, 169, 173, 191, 251, 257, 303, 304, 327, 340, 342, 366, 367, 368, 369, 371, 372, 378, 380, 381, 386, 392, 394, 396, 399, 400, 401, 402, 403, 405, 422, 423, 425, 426, 430, 436, 449, 455, 473, 503, 549, 621, 630, 637, 653, 655, 668, 671, 675, 693, 699, 714, 716, 763, 769, 775, 819, 820, 825, 827, 829, 830, 831, 854, 871, 916, 951, 952, 958, 961, 962, 965, 968, 969, 970, 972, 974, 976, 977, 978, 1004, 1005, 1010, 1011, 1012, 1013, 1015, 1016, 1018, 1019], "postprocess": [24, 390, 515, 521], "brier": [24, 25, 390, 690], "brier_scor": 24, "sigmoid": [24, 25, 26, 27, 360, 399, 418, 432, 515, 541, 601, 620, 624, 745, 754, 757, 836, 837, 880, 881, 882, 883, 884, 967, 977, 995, 999, 1017], "isoton": [24, 25, 164, 225, 240, 358, 418, 638, 901, 984, 999, 1005, 1006, 1007, 1008, 1010, 1017, 1020], "belong": [24, 27, 59, 235, 257, 307, 317, 362, 363, 389, 390, 392, 395, 396, 399, 407, 421, 424, 427, 428, 429, 431, 433, 503, 693, 711, 784, 790, 800, 826, 846, 958, 961, 962, 964, 965, 966, 968, 977, 982, 988, 995], "mblondel": [24, 48, 188, 219, 258, 340, 362, 488], "telecom": [24, 25, 42, 226, 986], "balaz": [24, 1008], "kegl": [24, 1008], "jhm": [24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 232], "informatik": [24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 232, 962], "uni": [24, 25, 26, 27, 73, 114, 149, 150, 152, 153, 154, 155, 156, 158, 188, 231, 232, 317, 335], "bremen": [24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 232], "style": [24, 26, 80, 122, 186, 205, 215, 261, 368, 374, 392, 400, 424, 427, 439, 681, 783, 898, 899, 1004, 1007, 1018], "make_blob": [24, 26, 33, 38, 42, 43, 44, 49, 55, 56, 58, 59, 61, 62, 63, 90, 189, 209, 226, 245, 302, 308, 311, 325, 328, 329, 336, 364, 369, 370, 399, 495, 1012, 1015, 1018], "50000": 24, "n_bin": [24, 25, 27, 53, 197, 215, 300, 302, 419, 420, 844, 972], "calibration_curv": [24, 390, 418, 419, 1013, 1018], "blob": [24, 33, 42, 44, 56, 61, 63, 90, 392, 428, 492, 1009], "sample_weight": [24, 178, 197, 210, 215, 308, 337, 368, 380, 392, 399, 403, 409, 413, 418, 424, 425, 427, 429, 439, 445, 449, 462, 463, 464, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 591, 592, 615, 616, 618, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 668, 678, 679, 681, 683, 684, 688, 689, 690, 693, 694, 697, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 714, 715, 718, 719, 720, 721, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 762, 763, 764, 765, 767, 768, 769, 772, 774, 777, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 824, 826, 829, 830, 836, 837, 839, 844, 858, 859, 873, 874, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 950, 962, 976, 977, 978, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020], "sw_train": [24, 308], "sw_test": [24, 308], "calibratedclassifiercv": [24, 25, 26, 351, 380, 390, 657, 951, 977, 983, 1008, 1010, 1013, 1014, 1016, 1017, 1018, 1019], "brier_score_loss": [24, 25, 390, 962, 1012, 1013, 1014], "gaussiannb": [24, 25, 27, 31, 131, 259, 351, 390, 399, 418, 549, 814, 815, 816, 818, 840, 956, 963, 964, 1008, 1009, 1010, 1012, 1017, 1020], "With": [24, 34, 44, 66, 74, 100, 120, 142, 164, 168, 197, 199, 225, 227, 232, 233, 239, 240, 257, 281, 355, 358, 363, 368, 369, 380, 392, 393, 396, 399, 401, 418, 420, 481, 563, 613, 614, 639, 748, 837, 840, 842, 853, 859, 885, 887, 955, 958, 959, 962, 963, 965, 966, 969, 976, 978, 988, 989, 996, 1001, 1007, 1011, 1012, 1014, 1016, 1018], "itself": [24, 49, 122, 125, 168, 195, 238, 266, 277, 327, 341, 355, 357, 367, 368, 369, 371, 380, 391, 392, 403, 421, 422, 425, 426, 449, 450, 451, 452, 453, 454, 455, 456, 507, 511, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 531, 546, 549, 564, 573, 576, 577, 579, 580, 581, 583, 584, 620, 621, 622, 623, 624, 626, 636, 670, 672, 770, 771, 814, 815, 816, 817, 818, 819, 820, 824, 832, 833, 844, 845, 846, 873, 874, 954, 958, 959, 961, 965, 966, 970, 1008, 1019], "prob_pos_clf": 24, "predict_proba": [24, 25, 26, 27, 30, 34, 127, 131, 150, 151, 152, 153, 266, 293, 301, 304, 307, 309, 340, 369, 374, 380, 390, 391, 399, 418, 419, 420, 529, 530, 531, 533, 535, 537, 539, 541, 544, 547, 549, 574, 575, 591, 600, 601, 603, 604, 612, 613, 614, 639, 640, 657, 679, 681, 683, 721, 722, 768, 775, 776, 777, 780, 781, 791, 800, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 821, 829, 836, 839, 846, 873, 874, 875, 880, 883, 886, 888, 958, 962, 964, 966, 969, 975, 976, 977, 978, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "clf_isoton": 24, "prob_pos_isoton": 24, "clf_sigmoid": 24, "prob_pos_sigmoid": 24, "clf_score": 24, "No": [24, 112, 124, 189, 203, 205, 206, 316, 332, 335, 346, 365, 375, 378, 383, 392, 454, 539, 540, 571, 572, 616, 626, 645, 657, 659, 666, 667, 775, 958], "clf_isotonic_scor": 24, "clf_sigmoid_scor": 24, "084": [24, 294, 297], "109": [24, 53, 80, 82, 98, 181, 216, 237, 240, 963, 1006], "y_uniqu": 24, "rainbow": [24, 220], "this_i": [24, 203], "this_x": [24, 195, 203, 995], "this_sw": 24, "lexsort": 24, "51": [24, 91, 133, 154, 215, 277, 392, 393, 761, 957, 958, 1000], "uncalibr": [24, 25, 26, 418], "gnb": [24, 25, 27, 131, 399, 549, 964], "336": [24, 28, 106, 107, 373, 972], "plot_calibr": [24, 28], "reliabl": [25, 27, 390, 396, 419, 420, 627, 978, 986], "diagram": [25, 27, 70, 237, 308, 390, 392, 419, 420, 448, 876, 1015, 1016], "redund": [25, 27, 106, 145, 243, 248, 351, 364, 367, 368, 372, 380, 390, 495, 615, 983, 997, 1016], "uninform": [25, 27, 364, 372, 400, 951, 958, 1012], "rest": [25, 30, 119, 123, 164, 175, 212, 216, 245, 307, 319, 324, 373, 380, 391, 402, 492, 591, 625, 639, 640, 657, 734, 768, 807, 808, 809, 828, 878, 880, 883, 958, 962, 963, 966, 969, 977, 986, 1008, 1009, 1018, 1019], "make_classif": [25, 27, 31, 90, 114, 115, 116, 120, 143, 145, 254, 260, 268, 269, 287, 293, 301, 307, 309, 335, 351, 364, 370, 388, 418, 419, 492, 533, 535, 537, 544, 647, 678, 679, 681, 683, 803, 809, 836, 839, 878, 951, 962, 963, 972, 977, 1010, 1011, 1012, 1014], "100_000": [25, 27, 167], "n_inform": [25, 27, 31, 90, 114, 116, 143, 145, 176, 200, 254, 260, 270, 287, 293, 301, 307, 335, 369, 372, 495, 504, 533, 534, 535, 536, 544, 545, 646, 809, 963, 1012], "n_redund": [25, 27, 31, 90, 116, 143, 145, 254, 260, 287, 293, 301, 372, 418, 495, 533, 535, 544, 809], "logisticregress": [25, 27, 30, 70, 72, 115, 131, 137, 145, 180, 187, 188, 189, 190, 204, 212, 213, 227, 228, 237, 239, 260, 266, 275, 296, 301, 307, 308, 309, 310, 311, 340, 355, 368, 369, 373, 375, 379, 390, 393, 399, 401, 419, 547, 549, 578, 612, 615, 624, 633, 640, 653, 654, 655, 656, 657, 668, 681, 768, 791, 810, 811, 813, 863, 864, 866, 867, 868, 869, 885, 910, 958, 962, 963, 972, 976, 977, 993, 995, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019], "baselin": [25, 119, 122, 132, 146, 176, 215, 267, 275, 309, 341, 365, 392, 401, 531, 532, 615, 962, 965, 997], "regular": [25, 36, 67, 70, 72, 78, 100, 108, 133, 156, 161, 164, 175, 176, 177, 182, 184, 185, 186, 188, 197, 211, 215, 216, 232, 243, 251, 258, 261, 270, 282, 283, 292, 295, 296, 297, 304, 322, 324, 326, 327, 328, 338, 340, 342, 345, 355, 368, 378, 379, 390, 392, 394, 395, 397, 398, 399, 402, 418, 424, 427, 451, 456, 458, 459, 460, 461, 484, 492, 494, 495, 500, 502, 504, 508, 518, 519, 520, 523, 527, 528, 530, 539, 541, 542, 569, 570, 572, 619, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 670, 674, 715, 721, 730, 775, 776, 794, 805, 806, 836, 837, 840, 859, 878, 879, 880, 881, 883, 884, 885, 951, 952, 954, 955, 956, 959, 961, 967, 968, 972, 975, 976, 977, 984, 986, 992, 993, 995, 999, 1004, 1005, 1006, 1008, 1009, 1013, 1014, 1016, 1017], "logist": [25, 27, 30, 68, 70, 75, 115, 137, 164, 175, 216, 227, 239, 275, 296, 304, 311, 340, 380, 381, 390, 393, 399, 401, 402, 418, 469, 476, 482, 484, 492, 521, 539, 541, 551, 591, 627, 638, 639, 640, 647, 649, 657, 721, 777, 791, 805, 835, 836, 837, 839, 859, 885, 901, 903, 962, 966, 967, 976, 977, 984, 986, 993, 999, 1008, 1011, 1012, 1014, 1015], "guid": [25, 68, 95, 158, 164, 167, 168, 185, 218, 264, 283, 284, 287, 307, 308, 309, 310, 311, 312, 358, 366, 367, 368, 372, 373, 374, 379, 380, 381, 391, 393, 399, 403, 404, 405, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 439, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 600, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 678, 679, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 838, 839, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 911, 963, 990, 997, 1004, 1005, 1006, 1007, 1009, 1011, 1013, 1014], "gridspec": [25, 27, 64, 242, 374], "calibrationdisplai": [25, 27, 390, 1017, 1018], "lr": [25, 27, 115, 131, 132, 200, 212, 228, 229, 253, 260, 379, 399, 548, 549, 550, 693], "gnb_isoton": 25, "gnb_sigmoid": 25, "clf_list": [25, 27], "get_cmap": [25, 27, 332], "dark2": [25, 27, 219], "ax_calibration_curv": [25, 27], "calibration_displai": [25, 27], "histogram": [25, 27, 53, 197, 230, 263, 282, 299, 309, 390, 539, 540, 541, 542, 623, 738, 739, 954, 960, 972, 984, 998, 999, 1016, 1019], "grid_posit": [25, 27], "y_prob": [25, 27, 152, 419, 420, 690, 810, 836, 962, 1018], "poorli": [25, 61, 77, 85, 113, 124, 222, 356, 392, 399, 508, 611, 958, 959, 1010], "violat": [25, 327, 375, 378, 380, 616, 902, 969, 976, 978], "independ": [25, 27, 37, 46, 96, 97, 99, 115, 118, 156, 168, 234, 257, 260, 262, 266, 275, 299, 307, 341, 351, 355, 356, 364, 369, 371, 379, 380, 383, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 404, 429, 444, 468, 483, 495, 496, 497, 498, 500, 512, 513, 515, 517, 519, 520, 526, 527, 531, 532, 585, 588, 589, 606, 621, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 653, 654, 655, 656, 685, 686, 698, 716, 717, 735, 737, 773, 779, 804, 808, 810, 812, 813, 851, 855, 856, 857, 859, 862, 863, 864, 865, 867, 868, 869, 872, 880, 881, 882, 883, 884, 909, 951, 954, 956, 958, 959, 962, 963, 964, 967, 969, 972, 977, 978, 998, 999, 1004, 1005, 1010, 1012, 1014, 1019], "overli": [25, 26, 186, 262, 351, 397, 962], "typic": [25, 27, 99, 110, 173, 197, 215, 232, 259, 260, 264, 266, 267, 283, 284, 309, 327, 341, 355, 361, 362, 363, 366, 369, 370, 376, 379, 380, 390, 391, 392, 393, 396, 397, 399, 400, 402, 424, 427, 429, 476, 531, 533, 535, 536, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 610, 619, 621, 624, 635, 636, 637, 652, 663, 664, 693, 846, 857, 914, 915, 947, 951, 955, 958, 959, 961, 962, 963, 964, 968, 970, 986, 997, 1013, 1017, 1020], "transpos": [25, 84, 257, 404, 506, 518, 520, 527, 641, 642, 643, 644, 768, 915, 948, 962, 974, 996, 1004, 1018], "nearli": [25, 260, 363, 380, 391, 744, 962, 965, 974, 997], "albeit": 25, "strongli": [25, 27, 81, 85, 98, 119, 123, 167, 179, 212, 263, 340, 368, 382, 383, 390, 399, 639, 716, 773, 958, 959, 999, 1013], "plenti": 25, "greater": [25, 91, 112, 167, 214, 231, 245, 263, 275, 283, 284, 345, 355, 364, 372, 380, 390, 392, 395, 399, 422, 426, 429, 432, 443, 452, 516, 521, 537, 538, 539, 540, 541, 542, 544, 545, 546, 574, 575, 578, 591, 592, 609, 621, 623, 626, 645, 647, 648, 652, 657, 658, 659, 673, 690, 693, 701, 715, 716, 719, 722, 768, 773, 775, 776, 809, 821, 822, 829, 830, 836, 837, 842, 857, 868, 872, 875, 886, 887, 888, 889, 915, 931, 951, 957, 958, 959, 962, 963, 968, 972, 977, 978, 1007, 1012, 1015, 1017, 1018, 1019], "exploit": [25, 275, 963, 983, 1007], "precision_scor": [25, 264, 689, 767, 962, 1004, 1006, 1007, 1008, 1009, 1014], "recall_scor": [25, 264, 396, 689, 764, 962, 1004, 1006, 1007, 1008, 1009, 1014], "f1_score": [25, 264, 319, 363, 718, 962, 1004, 1006, 1007, 1008, 1009, 1013, 1014], "log_loss": [25, 26, 121, 124, 150, 304, 319, 340, 380, 399, 537, 539, 541, 544, 627, 657, 886, 888, 951, 958, 962, 976, 1006, 1008, 1010, 1018, 1019, 1020], "roc_auc_scor": [25, 257, 266, 307, 683, 687, 688, 689, 769, 962, 1006, 1007, 1012, 1014, 1018, 1019], "score_nam": [25, 37, 232, 259, 341, 783], "score_df": 25, "set_index": [25, 122, 154, 186, 215, 257, 341], "decim": [25, 155, 451, 452, 891, 1011, 1012], "098921": 25, "323178": 25, "872009": 25, "851408": 25, "861586": 25, "863157": 25, "117608": 25, "782755": 25, "857400": 25, "875941": 25, "866571": 25, "865055": 25, "098332": 25, "370738": 25, "883065": 25, "836224": 25, "859007": 25, "862690": 25, "108880": 25, "368896": 25, "861106": 25, "871277": 25, "866161": 25, "865300": 25, "refin": [25, 81, 390, 452, 690, 962, 997], "alter": [25, 162, 369, 380, 709, 710, 718, 763, 764, 767, 1009, 1013, 1016], "uncertainti": [25, 149, 156, 176, 259, 392, 547, 548, 624, 839, 952, 974], "linearsvc": [25, 27, 69, 71, 142, 143, 164, 173, 231, 254, 256, 264, 301, 307, 322, 324, 335, 338, 340, 355, 369, 373, 390, 400, 401, 418, 492, 547, 557, 620, 624, 633, 653, 654, 655, 656, 657, 668, 715, 722, 802, 807, 879, 880, 883, 885, 958, 962, 963, 1004, 1005, 1006, 1010, 1012, 1015], "naivelycalibratedlinearsvc": [25, 27], "df_min_": [25, 27], "df_max_": [25, 27], "calibrated_df": [25, 27], "proba_pos_class": [25, 27], "clip": [25, 27, 215, 229, 299, 327, 616, 657, 721, 849, 972, 1008, 1015, 1016], "proba_neg_class": [25, 27], "proba": [25, 27, 30, 131, 418, 886, 888], "svc_isoton": 25, "svc_sigmoid": 25, "opposit": [25, 27, 53, 66, 100, 167, 168, 186, 264, 380, 390, 394, 396, 401, 424, 427, 429, 449, 518, 520, 527, 543, 693, 825, 882, 1004], "behavior": [25, 27, 37, 39, 52, 161, 164, 167, 168, 197, 215, 248, 250, 260, 273, 295, 299, 301, 327, 351, 356, 362, 365, 368, 369, 371, 375, 376, 380, 390, 392, 396, 400, 420, 516, 531, 546, 647, 648, 649, 657, 658, 659, 682, 709, 710, 763, 764, 767, 778, 779, 782, 794, 795, 796, 797, 798, 816, 951, 958, 963, 968, 972, 986, 988, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "hing": [25, 204, 207, 209, 265, 324, 325, 329, 380, 647, 657, 715, 878, 885, 958, 976, 977, 997], "focus": [25, 77, 186, 363, 378, 399, 959, 972, 982], "far": [25, 59, 81, 119, 150, 156, 167, 197, 215, 327, 340, 342, 368, 376, 402, 701, 859, 937, 967, 968, 977, 986, 995], "awai": [25, 26, 27, 59, 77, 118, 149, 150, 154, 200, 332, 363, 390, 402, 609, 821, 822, 829, 830, 961, 962, 977, 995], "shown": [25, 48, 56, 88, 110, 112, 122, 158, 166, 168, 187, 195, 215, 223, 226, 231, 244, 257, 260, 263, 266, 282, 294, 295, 299, 300, 301, 315, 340, 341, 368, 372, 381, 392, 393, 396, 397, 398, 400, 402, 419, 440, 613, 679, 681, 682, 683, 694, 777, 791, 890, 892, 957, 958, 959, 962, 965, 970, 972, 976, 977, 978, 997, 1008, 1013, 1014, 1015, 1018], "varieti": [25, 161, 244, 327, 375, 378, 391, 392, 394, 399, 400, 624, 965, 978, 982, 986, 1006, 1019], "niculescu": [25, 27, 390, 418, 420], "mizil": [25, 27, 390, 418, 420], "caruana": [25, 27, 390, 418, 420], "144944": 25, "465663": 25, "872201": 25, "851772": 25, "861865": 25, "863420": 25, "099827": 25, "377027": 25, "853032": 25, "878041": 25, "865356": 25, "863306": 25, "098760": 25, "321306": 25, "873706": 25, "848743": 25, "861044": 25, "862967": 25, "deal": [25, 56, 70, 161, 167, 222, 342, 368, 372, 391, 393, 400, 401, 402, 454, 476, 684, 689, 743, 767, 845, 915, 958, 986, 994, 1007], "situat": [25, 44, 56, 71, 166, 167, 203, 226, 260, 368, 375, 394, 396, 397, 399, 508, 514, 563, 852, 855, 866, 956, 958, 964, 965, 975, 978, 1012], "supervis": [25, 27, 37, 49, 54, 57, 85, 104, 115, 137, 138, 219, 233, 244, 257, 286, 309, 318, 321, 341, 355, 358, 363, 369, 379, 380, 390, 392, 395, 396, 397, 399, 400, 402, 418, 420, 444, 468, 483, 484, 533, 569, 571, 574, 575, 615, 657, 709, 778, 779, 782, 784, 785, 786, 787, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 804, 805, 828, 838, 839, 843, 873, 874, 875, 883, 956, 959, 962, 964, 965, 968, 973, 977, 978, 979, 982, 983, 985, 988, 989, 991, 997, 999, 1004, 1010, 1016], "icml": [25, 27, 390, 392, 400, 418, 420, 814, 816, 835, 962, 964, 976, 981], "2005": [25, 27, 80, 365, 390, 418, 420, 828, 958, 965, 975], "888": [25, 28], "plot_calibration_curv": [25, 28], "simplex": [26, 651, 775, 854], "arrow": [26, 1018], "green": [26, 34, 80, 91, 113, 126, 131, 149, 173, 223, 294, 300, 304, 308, 380, 963, 1012, 1013, 1015, 1016], "600": [26, 50, 128, 129, 363, 661], "x_train_valid": 26, "y_train_valid": 26, "cluster_std": [26, 38, 44, 49, 55, 56, 58, 59, 61, 62, 63, 209, 226, 245, 302, 329, 492], "x_valid": 26, "y_valid": 26, "randomforestclassifi": [26, 27, 31, 55, 114, 115, 116, 117, 118, 131, 169, 170, 237, 238, 254, 269, 307, 309, 340, 351, 379, 380, 390, 399, 401, 537, 538, 539, 541, 546, 547, 549, 780, 781, 809, 888, 951, 963, 986, 1001, 1008, 1009, 1012, 1013, 1014, 1017, 1018, 1019, 1020], "concaten": [26, 39, 50, 60, 68, 75, 80, 112, 125, 157, 164, 176, 179, 219, 226, 235, 242, 246, 247, 253, 264, 266, 267, 282, 296, 303, 316, 340, 393, 444, 447, 484, 489, 511, 517, 521, 522, 580, 761, 777, 838, 839, 841, 844, 852, 883, 963, 992, 1005], "randomforestclassifierrandomforestclassifi": [26, 116, 117, 169, 237, 269], "cal_clf": 26, "prefit": [26, 380, 390, 401, 418, 547, 548, 578, 983, 1016, 1017, 1018], "x27": [26, 70, 71, 109, 115, 129, 132, 143, 167, 168, 169, 227, 228, 236, 237, 239, 247, 255, 257, 258, 264, 269, 296, 308, 309, 311, 317], "calibratedclassifiercvcalibratedclassifiercv": 26, "clf_prob": 26, "cal_clf_prob": 26, "head_width": 26, "ro": 26, "bo": [26, 1016], "unit": [26, 69, 79, 167, 173, 197, 215, 282, 295, 299, 341, 363, 368, 369, 373, 375, 376, 397, 400, 404, 444, 469, 470, 499, 504, 512, 513, 514, 521, 522, 570, 571, 572, 592, 639, 640, 657, 666, 680, 750, 826, 835, 836, 837, 843, 849, 851, 855, 857, 859, 864, 865, 866, 868, 869, 878, 879, 958, 960, 961, 967, 972, 978, 982, 995, 1008, 1012, 1018, 1019], "mid": [26, 327, 962, 964], "frac": [26, 79, 80, 257, 264, 266, 310, 389, 390, 392, 394, 397, 398, 399, 400, 402, 413, 443, 445, 462, 463, 464, 534, 536, 538, 540, 542, 545, 548, 550, 592, 596, 600, 603, 604, 616, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 650, 651, 653, 654, 659, 660, 661, 677, 735, 749, 812, 813, 822, 830, 837, 879, 881, 884, 887, 889, 954, 956, 957, 958, 959, 960, 962, 964, 965, 966, 967, 969, 970, 972, 974, 976, 977, 978, 995], "shrink": [26, 81, 95, 123, 168, 192, 195, 218, 246, 299, 397, 539, 540, 657, 659, 826, 836, 837, 880, 881, 882, 883, 884, 965, 977, 995], "perfectli": [26, 37, 260, 271, 382, 392, 399, 419, 547, 587, 685, 686, 696, 698, 716, 717, 737, 766, 773, 852, 957, 959, 962, 977, 1017, 1018], "incur": [26, 600, 878, 977, 1012], "correct": [26, 27, 56, 80, 157, 167, 186, 197, 215, 242, 251, 257, 264, 266, 327, 329, 340, 351, 365, 368, 369, 371, 381, 390, 391, 392, 396, 397, 400, 430, 436, 449, 454, 468, 481, 483, 616, 648, 657, 659, 684, 685, 689, 693, 694, 699, 702, 703, 704, 708, 709, 710, 714, 718, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 763, 764, 765, 767, 772, 774, 807, 808, 809, 816, 824, 850, 947, 958, 962, 963, 977, 988, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "decreas": [26, 39, 46, 57, 65, 74, 126, 145, 157, 167, 168, 181, 205, 229, 230, 259, 264, 270, 293, 301, 304, 307, 345, 355, 357, 368, 390, 392, 399, 422, 426, 443, 501, 514, 515, 521, 537, 538, 539, 540, 541, 542, 544, 545, 546, 583, 616, 617, 618, 657, 658, 659, 687, 693, 707, 762, 769, 836, 837, 886, 887, 888, 889, 951, 953, 958, 959, 962, 965, 966, 969, 970, 976, 977, 986, 995, 1006, 1011, 1014, 1017], "cal_scor": 26, "327": [26, 710, 995], "549": 26, "p1d": 26, "p0": 26, "p1": [26, 131], "p2": [26, 131, 215], "calibrated_classifi": 26, "calibrated_classifiers_": [26, 390, 418], "this_p": 26, "sure": [26, 55, 190, 203, 233, 351, 355, 356, 362, 366, 367, 368, 369, 371, 372, 375, 378, 390, 393, 400, 473, 503, 630, 898, 899, 909, 948, 952, 959, 976, 983, 1011, 1012, 1014, 1019], "renorm": 26, "step": [26, 33, 42, 54, 57, 66, 69, 70, 71, 72, 73, 80, 85, 98, 103, 115, 118, 119, 129, 143, 144, 145, 151, 154, 167, 169, 197, 205, 215, 227, 228, 231, 236, 239, 248, 255, 258, 264, 266, 277, 279, 285, 293, 296, 301, 304, 308, 311, 320, 323, 327, 341, 342, 345, 351, 355, 358, 363, 366, 367, 368, 369, 371, 372, 375, 378, 380, 389, 390, 392, 394, 395, 397, 399, 400, 401, 423, 427, 429, 516, 517, 518, 519, 526, 543, 569, 570, 572, 574, 575, 578, 587, 608, 625, 629, 647, 648, 650, 657, 659, 660, 661, 675, 681, 775, 776, 777, 780, 781, 791, 811, 812, 813, 835, 836, 837, 839, 840, 842, 878, 879, 880, 881, 883, 884, 914, 915, 933, 937, 952, 958, 961, 966, 967, 972, 976, 978, 979, 982, 985, 993, 997, 1004, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017], "multiclass": [26, 30, 164, 175, 216, 233, 250, 264, 267, 273, 275, 324, 336, 358, 363, 364, 369, 370, 372, 380, 392, 399, 418, 432, 442, 469, 484, 539, 541, 547, 548, 551, 575, 583, 591, 612, 613, 614, 639, 640, 647, 649, 654, 655, 656, 657, 687, 689, 709, 710, 714, 715, 718, 723, 734, 763, 764, 767, 768, 769, 772, 777, 778, 780, 781, 782, 783, 791, 795, 799, 800, 801, 802, 803, 804, 805, 806, 846, 878, 880, 883, 956, 958, 973, 977, 978, 984, 985, 997, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1019, 1020], "argmax": [26, 103, 256, 270, 369, 399, 549, 807, 886, 977, 1017], "672": [26, 28], "plot_calibration_multiclass": [26, 28], "gave": [27, 390, 777, 780, 781, 791, 846], "four": [27, 142, 157, 173, 179, 198, 244, 245, 316, 324, 364, 368, 380, 537, 544, 700, 886, 888, 904, 958, 960, 961, 962, 972, 981], "naiv": [27, 31, 127, 257, 259, 340, 342, 358, 363, 399, 400, 418, 524, 814, 815, 816, 817, 818, 956, 957, 965, 984, 999, 1004, 1005, 1006, 1007, 1012, 1014, 1017, 1019], "bay": [27, 31, 113, 127, 149, 186, 247, 259, 340, 358, 363, 397, 399, 400, 402, 516, 529, 530, 637, 814, 815, 816, 817, 818, 956, 957, 958, 984, 997, 999, 1004, 1005, 1006, 1007, 1012, 1014, 1017, 1019], "train_sampl": [27, 212, 213], "against": [27, 37, 85, 105, 113, 123, 141, 173, 188, 189, 206, 214, 266, 307, 327, 363, 368, 381, 390, 392, 396, 400, 419, 489, 522, 528, 531, 657, 659, 735, 737, 768, 779, 784, 786, 804, 808, 928, 954, 958, 962, 963, 965, 977, 981, 988], "rfc": [27, 238, 307, 1001], "circleci": [27, 84, 112, 153, 155, 157, 158, 189, 206, 332, 346, 368], "1176": 27, "userwarn": [27, 44, 61, 112, 158, 189, 206, 332, 346, 372, 693, 972, 1010, 1012, 1017], "redundantli": [27, 380], "keyword": [27, 340, 362, 368, 369, 372, 374, 380, 392, 403, 406, 419, 425, 426, 430, 432, 437, 444, 447, 483, 515, 518, 520, 539, 540, 547, 548, 549, 550, 601, 609, 612, 613, 620, 624, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 669, 673, 678, 679, 681, 682, 683, 754, 758, 759, 760, 761, 770, 771, 783, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 839, 843, 910, 912, 929, 951, 959, 962, 965, 975, 1004, 1008, 1010, 1011, 1012, 1014, 1016, 1018, 1019], "argument": [27, 71, 198, 227, 230, 356, 362, 363, 368, 370, 372, 373, 375, 376, 378, 380, 392, 393, 396, 397, 399, 401, 403, 404, 406, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 432, 434, 437, 439, 441, 443, 473, 483, 488, 513, 515, 516, 518, 520, 531, 539, 540, 541, 547, 548, 549, 550, 557, 562, 563, 569, 570, 572, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 612, 620, 624, 627, 628, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 647, 649, 657, 662, 665, 669, 673, 677, 679, 680, 681, 682, 683, 695, 700, 715, 722, 743, 759, 760, 783, 807, 808, 811, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 836, 839, 843, 892, 896, 905, 910, 912, 929, 930, 931, 932, 946, 951, 954, 958, 959, 960, 962, 965, 969, 970, 977, 978, 988, 992, 1004, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1019, 1020], "fmt": [27, 60, 208], "preced": [27, 275, 356, 368, 467, 962, 1004], "contrast": [27, 104, 168, 199, 232, 257, 259, 286, 304, 341, 380, 390, 392, 393, 395, 399, 402, 429, 432, 442, 600, 624, 791, 835, 952, 955, 957, 958, 962, 965, 967, 970, 972, 975, 976, 978, 1014], "push": [27, 368, 371, 390, 985], "equat": [27, 335, 368, 392, 397, 399, 537, 538, 539, 540, 544, 545, 546, 571, 608, 663, 664, 668, 743, 859, 886, 887, 888, 889, 952, 959, 962, 967, 1012], "twice": [27, 269, 340, 342, 369, 402, 600, 712, 917, 1013], "approx": [27, 95, 231, 397, 399, 400, 962, 969, 976], "rare": [27, 168, 351, 371, 378, 380, 382, 390, 392, 396, 570, 629, 639, 640, 650, 661, 878, 903, 930, 958, 972, 986, 1011, 1012, 1013, 1017, 1019], "explan": [27, 85, 355, 367, 368, 390, 400, 951, 961, 963, 978, 986, 1007], "bag": [27, 69, 108, 114, 124, 133, 164, 169, 341, 342, 364, 390, 496, 497, 498, 535, 536, 537, 538, 539, 540, 543, 544, 545, 721, 782, 805, 887, 960, 963, 984, 999, 1004, 1006, 1007, 1008, 1009, 1010, 1017, 1018, 1020], "underli": [27, 55, 79, 128, 146, 198, 200, 262, 281, 282, 348, 356, 378, 380, 382, 388, 390, 394, 396, 397, 398, 399, 401, 402, 418, 431, 432, 433, 442, 444, 445, 451, 452, 458, 504, 547, 548, 549, 550, 574, 575, 578, 583, 639, 649, 661, 672, 676, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 824, 878, 886, 887, 888, 889, 927, 958, 959, 963, 968, 975, 977, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1020], "restrict": [27, 65, 66, 161, 164, 214, 292, 297, 369, 373, 378, 390, 392, 399, 400, 445, 473, 482, 512, 562, 591, 634, 635, 636, 637, 639, 663, 664, 688, 694, 762, 768, 769, 805, 827, 829, 830, 831, 833, 835, 836, 837, 839, 864, 962, 978, 998, 999, 1004, 1006, 1014, 1016], "interv": [27, 108, 133, 156, 164, 197, 198, 199, 215, 257, 363, 380, 390, 396, 399, 402, 419, 420, 496, 497, 498, 537, 538, 540, 542, 544, 545, 616, 617, 619, 658, 722, 728, 730, 781, 798, 805, 842, 844, 858, 880, 881, 882, 902, 954, 958, 962, 972, 978, 1011, 1015], "move": [27, 118, 258, 296, 327, 367, 368, 371, 373, 390, 392, 529, 530, 551, 552, 553, 555, 557, 558, 929, 996, 1004, 1005, 1009, 1012, 1014, 1017, 1018], "characterist": [27, 44, 61, 146, 154, 164, 226, 250, 254, 273, 299, 351, 363, 365, 372, 390, 396, 402, 483, 484, 604, 619, 639, 683, 687, 689, 707, 762, 768, 769, 796, 805, 808, 846, 883, 958], "difficult": [27, 167, 205, 368, 375, 390, 397, 399, 533, 534, 539, 541, 542, 957, 959, 961, 965, 967, 969, 978, 986, 1004, 1018], "bayesian": [27, 54, 164, 175, 185, 216, 241, 243, 247, 248, 249, 397, 418, 504, 508, 512, 625, 626, 637, 638, 775, 776, 840, 842, 854, 859, 951, 982, 984, 998, 999, 1010, 1017], "domingo": [27, 768, 962], "pazzani": 27, "proc": [27, 78, 390, 400, 430, 670, 674, 814, 951, 959, 964, 968], "13th": 27, "intl": [27, 396], "1996": [27, 392, 399, 403, 425, 496, 497, 498, 535, 536, 972], "zadrozni": [27, 390, 418, 657], "bianca": 27, "charl": [27, 744, 1004, 1007, 1010, 1014, 1016, 1019], "elkan": [27, 308, 390, 418, 424, 427, 439, 657, 1010, 1014, 1015, 1017, 1018], "vol": [27, 157, 263, 365, 392, 454, 539, 540, 609, 616, 626, 645, 666, 667, 775, 804, 816, 952, 964, 965], "2001": [27, 154, 169, 256, 389, 392, 399, 418, 431, 432, 433, 442, 491, 539, 540, 544, 545, 609, 615, 620, 626, 672, 677, 715, 768, 871, 903, 952, 958, 962, 968, 970, 974, 977], "plot_compare_calibr": [27, 28], "019": [28, 365, 373, 451], "auto_examples_calibr": 28, "calibr": [28, 30, 215, 358, 380, 492, 495, 544, 549, 639, 657, 690, 709, 721, 764, 767, 768, 805, 817, 875, 878, 951, 958, 962, 975, 977, 984, 999, 1001, 1008, 1010], "discrimin": [29, 35, 104, 141, 143, 164, 173, 212, 219, 233, 286, 358, 365, 399, 455, 492, 529, 530, 546, 763, 828, 951, 959, 962, 965, 976, 978, 984, 995, 999, 1007], "ellipsoid": [29, 35, 164, 241, 242, 249, 529, 530, 775, 776, 956, 961], "ledoit": [29, 35, 76, 77, 81, 82, 164, 453, 455, 459, 460, 492, 529, 956], "wolf": [29, 35, 76, 77, 81, 82, 164, 453, 455, 459, 460, 492, 529, 956, 1011], "oa": [29, 35, 76, 82, 164, 394, 449, 450, 453, 454, 456, 457, 492, 529, 777, 956], "hand": [29, 35, 85, 88, 97, 100, 122, 141, 154, 164, 167, 168, 190, 204, 222, 229, 230, 232, 254, 259, 266, 327, 355, 362, 363, 365, 368, 369, 373, 375, 379, 386, 397, 398, 399, 401, 482, 624, 694, 768, 805, 883, 951, 955, 958, 962, 964, 966, 970, 975, 977, 986, 988, 991, 994, 995], "built": [30, 85, 111, 118, 120, 169, 205, 260, 290, 307, 346, 355, 366, 368, 369, 371, 373, 375, 376, 378, 379, 380, 383, 386, 391, 392, 393, 396, 399, 401, 426, 483, 533, 534, 535, 536, 541, 542, 569, 570, 574, 578, 620, 621, 622, 623, 624, 627, 628, 633, 639, 641, 642, 643, 644, 653, 654, 655, 656, 662, 780, 781, 788, 810, 813, 819, 820, 888, 889, 946, 958, 962, 963, 975, 976, 978, 982, 986, 997, 1004, 1007, 1008, 1010, 1016], "enabl": [30, 50, 71, 120, 168, 205, 220, 301, 308, 310, 311, 336, 366, 368, 372, 375, 378, 380, 383, 388, 391, 392, 393, 397, 399, 400, 429, 514, 515, 521, 539, 540, 541, 542, 543, 559, 560, 561, 571, 572, 583, 591, 775, 776, 777, 780, 839, 840, 852, 875, 878, 879, 880, 881, 882, 883, 884, 893, 923, 929, 952, 954, 959, 961, 962, 965, 972, 973, 976, 977, 983, 986, 1004, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "troubl": [30, 400], "ovr": [30, 189, 212, 275, 307, 336, 639, 640, 768, 808, 878, 880, 883, 958, 962, 963, 977, 1004, 1009, 1010, 1012, 1013, 1014, 1018, 1019], "gpc": [30, 148, 159, 164, 484, 591, 592, 594, 595, 600, 601, 603, 604, 684, 721, 984, 999, 1014], "accuracy_scor": [30, 110, 150, 261, 304, 318, 340, 351, 379, 537, 544, 689, 709, 710, 714, 718, 722, 763, 764, 767, 772, 774, 951, 962, 1005, 1006, 1007, 1016], "gaussian_process": [30, 31, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 358, 380, 402, 624, 963, 1007, 1010, 1011], "gaussianprocessclassifi": [30, 31, 150, 151, 152, 153, 157, 380, 402, 592, 600, 601, 603, 604, 963, 1010, 1012, 1014, 1018], "iri": [30, 41, 45, 73, 87, 92, 93, 99, 106, 107, 108, 120, 130, 133, 138, 142, 148, 159, 164, 175, 180, 190, 216, 239, 244, 251, 262, 263, 266, 267, 280, 288, 294, 309, 314, 321, 322, 323, 327, 330, 338, 344, 349, 350, 361, 362, 379, 392, 393, 396, 397, 399, 476, 484, 521, 529, 533, 537, 544, 591, 603, 612, 657, 777, 791, 873, 874, 875, 878, 883, 886, 890, 891, 892, 951, 952, 956, 961, 962, 965, 969, 972, 975, 976, 977, 978, 988, 995, 996, 999, 1017], "load_iri": [30, 41, 45, 73, 89, 99, 102, 104, 106, 118, 120, 130, 138, 142, 151, 180, 190, 206, 239, 244, 251, 262, 263, 264, 266, 267, 280, 285, 288, 294, 307, 309, 312, 320, 323, 324, 327, 330, 346, 349, 379, 386, 392, 393, 396, 399, 401, 541, 547, 583, 591, 600, 601, 603, 604, 612, 639, 640, 768, 777, 780, 781, 783, 791, 807, 828, 873, 874, 875, 886, 888, 890, 891, 892, 952, 957, 962, 963, 964, 965, 969, 972, 978, 988, 994, 995, 996, 1010, 1012, 1015], "saga": [30, 188, 212, 213, 639, 640, 653, 655, 668, 791, 958, 1011, 1013], "multi_class": [30, 189, 212, 266, 307, 549, 591, 639, 640, 768, 813, 878, 958, 963, 977, 1004, 1008, 1012, 1017, 1019], "n_classifi": [30, 549, 550], "xx": [30, 34, 42, 57, 79, 118, 122, 127, 138, 151, 152, 153, 168, 184, 204, 207, 208, 209, 210, 211, 223, 226, 233, 246, 283, 293, 301, 302, 320, 326, 327, 331, 332, 333, 336, 337, 371], "yy": [30, 34, 42, 57, 79, 118, 127, 138, 151, 153, 168, 204, 208, 209, 210, 211, 223, 226, 233, 283, 293, 301, 302, 320, 326, 327, 331, 332, 333, 336, 337], "xfull": 30, "imshow_handl": 30, "cax": [30, 152, 268], "orient": [30, 95, 167, 218, 299, 380, 890, 959], "horizont": [30, 95, 218, 231, 299, 302, 372, 380, 444, 495, 678, 682], "046": [30, 35, 115, 133], "plot_classification_prob": [30, 35], "salt": [31, 231, 301, 1018], "convei": [31, 223, 301, 995], "particularli": [31, 69, 70, 73, 105, 127, 198, 228, 257, 301, 308, 337, 351, 355, 368, 376, 380, 392, 393, 395, 398, 400, 476, 783, 816, 915, 930, 931, 958, 959, 962, 964, 983, 986, 996, 1004, 1009, 1011, 1012, 1018], "linearli": [31, 100, 112, 167, 176, 211, 219, 226, 266, 267, 301, 304, 331, 340, 355, 365, 378, 397, 399, 420, 495, 623, 688, 962, 965, 968, 977, 995, 1011], "semi": [31, 233, 301, 309, 321, 358, 363, 380, 468, 484, 515, 569, 571, 657, 709, 805, 839, 843, 873, 874, 875, 883, 960, 965, 968, 984, 999, 1004, 1016, 1019], "transpar": [31, 301, 947, 986], "ga\u00ebl": [31, 45, 51, 72, 88, 89, 102, 180, 194, 195, 301, 331, 332, 381, 986], "modifi": [31, 45, 51, 72, 74, 88, 89, 180, 194, 195, 207, 218, 219, 220, 244, 332, 337, 366, 368, 369, 371, 380, 399, 402, 424, 427, 434, 439, 448, 462, 463, 464, 465, 475, 490, 562, 591, 592, 594, 600, 657, 659, 670, 674, 709, 710, 748, 763, 764, 767, 896, 958, 975, 976, 983, 994, 998, 999, 1004, 1006, 1007, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1019], "listedcolormap": [31, 118, 280, 285, 288, 293, 301], "make_moon": [31, 44, 61, 226, 257, 293, 294, 301, 364, 951, 1011, 1015], "make_circl": [31, 44, 61, 100, 127, 223, 293, 294, 301, 317, 364, 1005, 1012, 1015], "neural_network": [31, 164, 168, 236, 292, 293, 294, 295, 296, 357, 358, 378, 963, 966, 1006], "mlpclassifi": [31, 164, 292, 293, 295, 297, 357, 482, 484, 494, 502, 551, 835, 837, 849, 963, 966, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "kneighborsclassifi": [31, 130, 137, 279, 280, 285, 286, 304, 309, 311, 340, 399, 583, 822, 826, 827, 828, 829, 830, 963, 965, 995, 1004, 1014, 1016, 1017, 1018, 1019], "decisiontreeclassifi": [31, 109, 110, 112, 118, 130, 261, 345, 346, 349, 380, 399, 533, 535, 537, 539, 541, 544, 612, 783, 803, 887, 888, 890, 891, 892, 952, 963, 978, 1005, 1006, 1008, 1009, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "adaboostclassifi": [31, 109, 110, 112, 118, 399, 534, 539, 541, 1006, 1007, 1010, 1011, 1013, 1014, 1017, 1019], "discriminant_analysi": [31, 33, 34, 104, 219, 286, 351, 358, 388, 516, 828, 956, 963, 1004, 1007, 1008, 1009, 1010, 1011], "quadraticdiscriminantanalysi": [31, 34, 529, 956, 963, 965, 1004, 1009, 1011, 1019], "decisionboundarydisplai": [31, 55, 112, 125, 130, 180, 189, 206, 260, 280, 285, 288, 304, 323, 324, 325, 328, 329, 346, 1018, 1019], "net": [31, 164, 175, 188, 208, 216, 270, 373, 391, 396, 451, 452, 458, 481, 504, 537, 538, 539, 540, 544, 545, 546, 627, 628, 633, 638, 639, 640, 641, 642, 643, 644, 649, 657, 659, 662, 665, 765, 835, 886, 887, 888, 889, 951, 962, 967, 976, 984, 986, 999, 1004, 1009, 1013, 1014, 1016], "adaboost": [31, 108, 118, 133, 164, 499, 500, 533, 534, 539, 684, 774, 805, 886, 887, 984, 999, 1006], "qda": [31, 34, 365, 529, 530, 984, 999, 1009], "025": [31, 199, 254, 341, 671, 675], "n_clusters_per_class": [31, 90, 114, 143, 145, 254, 287, 293, 301, 372, 495], "uniform": [31, 37, 53, 121, 122, 125, 142, 150, 155, 158, 176, 177, 211, 223, 226, 229, 265, 280, 283, 284, 289, 293, 300, 302, 303, 311, 326, 369, 372, 392, 419, 420, 531, 549, 550, 591, 592, 609, 620, 630, 631, 635, 649, 657, 658, 659, 680, 702, 703, 708, 725, 726, 728, 730, 731, 733, 765, 781, 789, 791, 814, 815, 818, 821, 822, 829, 830, 844, 856, 858, 867, 903, 917, 951, 952, 961, 962, 965, 1010, 1012, 1014, 1018], "linearly_separ": [31, 293], "ds_cnt": [31, 301, 302], "rdbu": [31, 95, 213, 293, 327, 332], "cm_bright": [31, 293, 301], "ff0000": [31, 285, 293], "0000ff": [31, 285, 293], "ep": [31, 44, 46, 49, 64, 180, 182, 221, 230, 378, 392, 403, 425, 430, 435, 458, 612, 627, 628, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 662, 663, 664, 665, 671, 675, 695, 721, 831, 870, 871, 872, 974, 1019, 1020], "lstrip": [31, 44, 61, 226, 293, 301], "301": [31, 35, 393, 976], "plot_classifier_comparison": [31, 35, 301], "8x8": [32, 88, 188, 230, 286, 296, 365, 482, 994], "grayscal": 32, "imread": 32, "load_digit": [32, 51, 52, 57, 71, 72, 88, 136, 137, 144, 188, 204, 219, 230, 231, 255, 256, 259, 265, 272, 279, 281, 286, 294, 296, 315, 316, 373, 393, 426, 512, 513, 514, 515, 580, 581, 619, 620, 649, 669, 670, 671, 672, 988, 992, 993, 994, 995, 996, 1010, 1015], "set_axis_off": 32, "gray_r": [32, 88, 98, 152, 219, 296, 315, 316, 994], "entir": [32, 161, 197, 205, 296, 299, 308, 349, 351, 362, 369, 380, 386, 392, 396, 398, 400, 452, 472, 514, 569, 570, 571, 572, 628, 632, 634, 636, 639, 640, 642, 644, 646, 647, 649, 657, 663, 664, 714, 774, 807, 808, 811, 836, 838, 839, 852, 863, 864, 866, 867, 868, 869, 931, 951, 952, 962, 976, 978, 995, 1013, 1014], "97": [32, 105, 170, 233, 248, 296, 316, 327, 365, 373, 379, 396, 639, 963, 972, 1004], "98": [32, 34, 42, 44, 54, 61, 63, 81, 98, 226, 255, 293, 296, 301, 316, 365, 371, 396, 399, 640, 814, 957, 964, 992, 997], "86": [32, 69, 143, 188, 301, 315, 316, 768, 886, 962, 993], "92": [32, 34, 50, 98, 143, 173, 255, 296, 315, 316, 327, 363, 365, 518, 520, 527, 542, 578, 777, 791, 957, 997], "899": [32, 255], "confus": [32, 164, 250, 266, 273, 315, 316, 340, 380, 484, 612, 633, 678, 694, 696, 699, 709, 710, 718, 734, 764, 767, 805, 883, 997, 1004, 1005, 1009, 1013, 1014, 1016, 1017, 1018, 1019], "disp": [32, 112, 125, 126, 251, 260, 304, 308, 324, 329, 419, 612, 678, 681, 682, 828], "from_predict": [32, 74, 129, 167, 235, 253, 264, 266, 310, 315, 340, 374, 419, 612, 678, 679, 681, 682, 683, 699, 707, 762, 764, 767, 768, 769, 962, 1001, 1017, 1018, 1019], "figure_": [32, 168, 236, 307, 309, 374, 419, 612, 613, 678, 679, 681, 682, 683, 783], "confusion_matrix": [32, 227, 251, 315, 316, 678, 694, 734, 802, 962, 997, 1005, 1010, 1011, 1014, 1015, 1017], "ground": [32, 40, 45, 49, 56, 57, 60, 77, 81, 85, 98, 125, 157, 181, 191, 197, 198, 248, 260, 341, 380, 391, 392, 684, 685, 686, 689, 693, 694, 695, 696, 698, 699, 702, 703, 704, 708, 709, 710, 714, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 763, 764, 765, 766, 767, 773, 774, 962, 975, 988, 996, 1012], "truth": [32, 40, 45, 49, 56, 57, 60, 77, 81, 85, 98, 103, 125, 157, 181, 191, 197, 198, 248, 260, 341, 380, 391, 392, 684, 685, 686, 689, 693, 694, 695, 696, 698, 699, 702, 703, 704, 706, 708, 709, 710, 714, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 763, 764, 765, 766, 767, 773, 774, 962, 988, 996, 1012, 1018], "gt": [32, 70, 71, 115, 129, 167, 247, 255, 269, 366, 368, 371], "rebuilt": [32, 819, 820], "428": [32, 35, 78, 82], "plot_digits_classif": [32, 35], "oracl": [33, 197, 215, 405, 449, 450, 453, 454, 455, 456, 956, 1004], "shrinkag": [33, 76, 78, 81, 82, 103, 124, 164, 288, 405, 449, 450, 453, 454, 455, 456, 457, 459, 460, 461, 519, 523, 529, 541, 542, 777, 958, 984, 999, 1004, 1008, 1009, 1011], "lineardiscriminantanalysi": [33, 34, 104, 219, 286, 351, 388, 516, 530, 828, 956, 963, 965, 1004, 1007, 1008, 1009, 1010, 1011, 1013, 1016, 1018, 1019], "200": [33, 34, 44, 50, 54, 59, 74, 98, 112, 120, 122, 128, 153, 183, 192, 198, 201, 202, 203, 209, 214, 219, 237, 242, 258, 264, 266, 267, 299, 302, 305, 317, 326, 327, 348, 351, 363, 369, 378, 397, 399, 404, 421, 434, 448, 451, 452, 513, 514, 515, 518, 519, 520, 523, 527, 565, 630, 632, 652, 660, 673, 791, 836, 837, 876, 880, 881, 882, 883, 884, 977], "n_averag": 33, "n_features_max": 33, "ish": 33, "acc_clf1": 33, "acc_clf2": 33, "acc_clf3": 33, "n_features_rang": 33, "score_clf1": 33, "score_clf2": 33, "score_clf3": 33, "clf1": [33, 130, 131, 399, 549], "lsqr": [33, 529, 653, 655, 668, 956, 1005, 1011, 1018], "clf2": [33, 130, 131, 369, 386, 399, 549], "store_precis": [33, 78, 449, 450, 453, 454, 455, 456], "assume_cent": [33, 78, 394, 405, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460], "clf3": [33, 130, 131, 369, 399, 549], "covariance_estim": [33, 529, 956, 1016], "features_samples_ratio": 33, "gold": [33, 191, 198, 200, 203, 207, 211, 214, 243, 248, 264, 283, 326, 373], "navi": [33, 69, 78, 99, 104, 105, 128, 176, 200, 208, 221, 243, 244, 245, 248, 264, 266, 272, 282, 289, 317, 348], "534": [33, 35, 167], "plot_lda": [33, 35], "doubl": [34, 269, 368, 380, 397, 518, 520, 527, 680, 819, 820, 830, 946, 952, 977, 978, 1004, 1014, 1015], "deviat": [34, 60, 79, 113, 116, 117, 118, 146, 149, 154, 156, 158, 167, 176, 203, 254, 255, 256, 257, 258, 260, 283, 284, 299, 304, 360, 364, 365, 372, 376, 380, 390, 396, 399, 430, 452, 481, 491, 492, 493, 494, 496, 497, 498, 502, 504, 505, 510, 532, 575, 592, 615, 625, 626, 652, 704, 732, 783, 825, 848, 849, 859, 867, 868, 869, 958, 962, 968, 972, 995, 1010, 1011, 1012, 1015, 1016, 1017], "own": [34, 215, 247, 277, 279, 317, 341, 356, 362, 370, 371, 372, 375, 376, 383, 391, 392, 404, 408, 421, 434, 513, 537, 544, 627, 775, 776, 821, 822, 823, 825, 827, 829, 830, 831, 886, 888, 904, 909, 930, 958, 964, 965, 968, 977, 986, 996, 997, 1011, 1012, 1014], "mpl": [34, 242, 243, 244, 248, 299], "linearsegmentedcolormap": 34, "red_blue_class": 34, "register_cmap": 34, "dataset_fixed_cov": 34, "dim": [34, 206, 230, 280, 285, 286, 288, 323, 324, 507, 680], "dataset_cov": 34, "matric": [34, 40, 79, 81, 95, 202, 243, 244, 246, 247, 248, 277, 290, 308, 319, 340, 341, 360, 362, 369, 370, 378, 379, 380, 391, 392, 393, 394, 395, 397, 400, 401, 407, 430, 431, 433, 444, 453, 462, 463, 464, 514, 515, 518, 520, 521, 524, 527, 529, 530, 535, 536, 543, 546, 562, 563, 570, 624, 639, 645, 653, 655, 668, 734, 740, 748, 754, 758, 759, 760, 761, 770, 775, 776, 805, 823, 826, 831, 842, 846, 848, 851, 854, 856, 857, 859, 861, 863, 865, 867, 868, 869, 870, 871, 880, 881, 883, 884, 894, 915, 921, 926, 933, 935, 936, 952, 956, 959, 960, 961, 963, 965, 966, 974, 976, 977, 982, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "linalg": [34, 54, 77, 78, 81, 101, 103, 105, 183, 242, 243, 244, 247, 248, 368, 373, 397, 431, 432, 433, 442, 512, 515, 521, 524, 638, 653, 655, 668, 672, 676, 913], "plot_data": 34, "fig_index": 34, "splot": [34, 243, 248], "tp": [34, 392, 693, 699, 711, 762, 763, 764, 767, 890, 962], "tp0": 34, "tp1": 34, "x0_tp": 34, "x0_fp": 34, "x1_tp": 34, "x1_fp": 34, "990000": 34, "dark": [34, 113, 167, 327, 363], "000099": 34, "pcolormesh": [34, 127, 138, 180, 280, 285, 323, 327, 331, 612], "white": [34, 57, 59, 95, 154, 167, 211, 218, 283, 296, 301, 320, 326, 397, 400, 402, 606, 978, 1004, 1007, 1010, 1014, 1018], "means_": [34, 242, 243, 244, 245, 247, 248, 529, 530, 775, 776], "yellow": [34, 91, 327, 963], "markers": [34, 49, 57, 60, 62, 63, 122, 152, 156, 229, 311], "markeredgecolor": [34, 49, 60, 62, 63], "plot_ellips": [34, 242], "cov": [34, 81, 85, 112, 247, 368, 380, 383, 385, 395, 405, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 499, 512, 514, 521, 528], "eigh": [34, 242, 243, 244, 247, 248, 397, 404, 513, 515, 1019], "arctan": [34, 243, 248, 364, 498], "180": [34, 242, 243, 244, 247, 248, 286, 290, 373, 402, 482], "ell": [34, 242, 243, 244, 248, 389], "patch": [34, 50, 242, 243, 244, 247, 248, 252, 363, 371, 378, 397, 399, 535, 536, 564, 565, 568, 1004, 1012], "ellips": [34, 226, 242, 243, 244, 247, 248, 968], "set_clip_box": [34, 242, 243, 244, 247, 248], "set_alpha": [34, 109, 242, 243, 244, 247, 248], "add_artist": [34, 219, 242, 243, 244, 247, 248], "plot_lda_cov": 34, "plot_qda_cov": 34, "svd": [34, 101, 103, 127, 219, 341, 376, 388, 395, 404, 431, 433, 462, 463, 465, 512, 513, 514, 515, 519, 520, 521, 524, 526, 529, 530, 645, 653, 654, 655, 666, 667, 668, 838, 915, 956, 997, 1006, 1010, 1011, 1017, 1019], "store_covari": [34, 529, 530, 1009, 1011], "tight": [34, 40, 105, 112, 118, 138, 142, 182, 184, 189, 190, 191, 201, 202, 206, 209, 211, 214, 220, 223, 246, 277, 283, 284, 288, 289, 323, 326, 327, 330, 331, 332, 346, 563, 673, 1016], "286": [34, 35, 399], "plot_lda_qda": [34, 35], "595": [35, 197], "auto_examples_classif": 35, "handwritten": [36, 67, 164, 217, 222, 224, 230, 255, 295, 296, 315, 316, 361, 392, 399, 427, 482, 521, 524, 529, 546, 669, 670, 671, 672, 673, 685, 686, 698, 717, 771, 773, 828, 840, 849, 859, 871, 959, 965, 988, 999], "hierarch": [36, 40, 54, 67, 164, 170, 311, 380, 400, 422, 424, 426, 484, 492, 494, 502, 510, 527, 711, 832, 859, 979, 983, 998, 999, 1004, 1007, 1008], "coin": [36, 67, 164, 392, 400, 422, 442, 974, 996], "shift": [36, 44, 67, 164, 176, 221, 247, 282, 296, 299, 394, 398, 421, 428, 438, 441, 449, 492, 495, 670, 674, 825, 848, 972, 998, 999, 1004, 1008, 1012], "chanc": [36, 49, 67, 164, 197, 205, 212, 215, 257, 263, 266, 267, 341, 351, 367, 392, 396, 685, 686, 689, 697, 735, 737, 766, 773, 804, 962, 970, 978], "agglom": [36, 44, 47, 67, 164, 392, 422, 426, 482, 672, 758, 832, 1007], "bisect": [36, 67, 164, 424, 427, 492, 1018], "quantiz": [36, 67, 164, 362, 363, 392, 424, 427, 429, 486, 759, 844, 936, 972], "birch": [36, 44, 67, 164, 311, 357, 380, 429, 492, 998, 999, 1008, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "toi": [36, 49, 53, 56, 67, 85, 99, 113, 125, 130, 131, 164, 179, 187, 211, 225, 240, 242, 294, 324, 334, 361, 373, 378, 399, 400, 421, 422, 423, 425, 428, 429, 430, 432, 438, 449, 492, 494, 502, 543, 620, 658, 706, 736, 776, 825, 832, 840, 859, 882, 959, 961, 962, 968, 972, 999], "linkag": [36, 39, 40, 41, 44, 47, 52, 55, 66, 67, 164, 170, 421, 422, 426, 443, 492, 494, 502, 859, 982, 996, 1007, 1012, 1015], "dbscan": [36, 44, 64, 67, 164, 378, 380, 430, 432, 435, 492, 685, 686, 698, 717, 771, 773, 831, 859, 965, 998, 999, 1004, 1006, 1008, 1009, 1011, 1012, 1013], "optic": [36, 44, 67, 164, 311, 361, 403, 425, 435, 436, 437, 482, 998, 999, 1013, 1017, 1018, 1019], "affin": [36, 44, 67, 164, 299, 360, 369, 380, 391, 397, 421, 422, 426, 432, 434, 442, 492, 515, 672, 676, 685, 686, 698, 717, 771, 773, 874, 956, 959, 962, 998, 999, 1004, 1005, 1008, 1014, 1015, 1017, 1019], "propag": [36, 67, 164, 314, 321, 363, 391, 421, 434, 482, 492, 494, 685, 686, 694, 695, 698, 699, 717, 771, 773, 839, 853, 873, 874, 875, 928, 929, 966, 984, 998, 999, 1004, 1016, 1019], "agglomer": [36, 67, 164, 360, 392, 400, 426, 482, 581, 587, 626, 777, 782, 839, 999], "unstructur": [36, 67, 164, 295, 392, 422, 426, 443, 483, 510, 832, 974, 986, 1008], "dendrogram": [36, 67, 164, 170, 392, 422, 426, 484, 1016], "pictur": [36, 67, 164, 230, 248, 363, 381, 392, 397, 400, 442, 473, 474, 501, 983], "greek": [36, 67, 164, 392, 442], "silhouett": [36, 38, 49, 56, 57, 67, 164, 341, 368, 427, 492, 770, 771, 1004, 1008], "embed": [36, 44, 46, 67, 115, 149, 164, 217, 220, 222, 224, 225, 240, 277, 286, 373, 380, 391, 392, 422, 432, 442, 469, 482, 524, 529, 546, 563, 620, 669, 670, 671, 672, 673, 674, 675, 676, 677, 828, 840, 849, 870, 871, 872, 954, 965, 968, 974, 979, 998, 999, 1004, 1005, 1015, 1016, 1018], "explor": [37, 113, 114, 222, 223, 258, 259, 265, 266, 309, 327, 341, 351, 362, 365, 367, 373, 386, 392, 399, 452, 777, 780, 788, 951, 958, 959, 961, 967, 969, 970, 972, 986, 991, 997, 1010], "uniformli": [37, 122, 141, 226, 242, 307, 369, 496, 497, 498, 531, 623, 781, 789, 791, 858, 951, 952, 962, 965, 972, 1008, 1013], "divid": [37, 43, 48, 90, 95, 143, 154, 197, 242, 351, 364, 365, 389, 392, 396, 397, 449, 450, 451, 452, 453, 454, 455, 456, 492, 499, 514, 521, 631, 632, 635, 636, 637, 645, 646, 657, 658, 659, 700, 706, 714, 718, 736, 772, 774, 836, 837, 880, 883, 915, 918, 919, 951, 959, 961, 962, 965, 972, 976, 997, 1004, 1011, 1012, 1015], "randomli": [37, 48, 50, 60, 70, 87, 92, 113, 125, 161, 164, 168, 201, 214, 230, 233, 247, 252, 263, 275, 315, 351, 356, 376, 378, 379, 392, 396, 399, 402, 429, 438, 492, 495, 499, 503, 511, 517, 525, 526, 531, 539, 540, 543, 544, 545, 591, 592, 652, 660, 671, 675, 697, 775, 776, 835, 872, 886, 887, 888, 889, 961, 963, 965, 968, 970, 974, 978, 995, 997, 1015, 1019], "quiroz": [37, 56, 176, 258, 260, 304, 340, 341, 342], "fundament": [37, 49, 80, 341, 366, 379, 395, 476, 518, 520, 527, 689, 958, 962], "homogen": [37, 38, 39, 44, 46, 49, 57, 341, 363, 378, 380, 394, 399, 402, 595, 685, 698, 711, 716, 717, 737, 773, 959, 960, 962, 1013], "frequent": [37, 162, 260, 266, 267, 341, 358, 365, 368, 400, 531, 571, 611, 829, 852, 856, 867, 952, 954, 962, 976, 980, 983], "ari": [37, 57, 341, 392, 686, 1009, 1015], "mutual": [37, 38, 49, 57, 140, 147, 164, 399, 401, 573, 576, 577, 580, 581, 587, 588, 589, 590, 685, 686, 696, 735, 737, 766, 773, 958, 962, 963, 1004, 1010], "mi": [37, 141, 392, 588, 589, 685, 735, 737, 952, 962, 976], "theoret": [37, 56, 149, 391, 392, 399, 533, 534, 620, 685, 706, 736, 878, 951, 959, 961, 962, 964, 974, 976, 977, 985, 986], "nmi": [37, 392, 698, 716, 717, 737], "ami": [37, 49, 57, 392, 685], "score_func": [37, 70, 71, 573, 576, 577, 579, 580, 581, 722, 1004, 1006], "rand_scor": [37, 392, 696, 962, 1016], "adjusted_rand_scor": [37, 38, 49, 57, 341, 392, 685, 696, 722, 737, 766, 962, 1017], "mutual_info_scor": [37, 392, 685, 962, 1012, 1015, 1016], "normalized_mutual_info_scor": [37, 392, 716, 735, 773, 962, 1012, 1018], "adjusted_mutual_info_scor": [37, 38, 49, 57, 392, 686, 696, 735, 737, 766, 962, 1004, 1012, 1016], "random_label": 37, "labels_a": 37, "labels_b": 37, "fixed_classes_uniform_labelings_scor": 37, "n_clusters_rang": 37, "n_run": [37, 60, 173, 341], "clase": [37, 304], "seaborn": [37, 109, 111, 166, 167, 176, 247, 257, 280, 368, 383, 385, 982], "sn": [37, 109, 111, 166, 167, 176, 247, 257, 280], "color_palett": [37, 109, 111, 247], "colorblind": [37, 109, 111], "vx": 37, "errorbar": [37, 60, 78, 80, 145, 155, 156, 279, 318, 330, 783], "refer": [37, 38, 59, 62, 70, 123, 129, 146, 158, 215, 264, 287, 299, 307, 308, 309, 310, 311, 312, 341, 356, 358, 366, 368, 369, 371, 372, 373, 374, 375, 378, 379, 380, 381, 383, 386, 393, 403, 404, 405, 418, 419, 420, 421, 423, 425, 427, 428, 430, 431, 432, 433, 434, 437, 442, 443, 444, 447, 449, 452, 453, 454, 455, 478, 483, 491, 493, 495, 496, 497, 498, 499, 500, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 524, 527, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 571, 574, 575, 576, 583, 588, 589, 591, 592, 595, 600, 603, 604, 608, 609, 612, 613, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 628, 630, 632, 634, 636, 637, 639, 642, 644, 646, 647, 648, 649, 652, 654, 656, 657, 659, 660, 663, 664, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 685, 686, 688, 689, 690, 691, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 714, 715, 716, 717, 718, 720, 721, 723, 736, 738, 739, 749, 763, 765, 766, 768, 769, 770, 771, 773, 775, 776, 777, 779, 780, 781, 783, 791, 799, 800, 801, 802, 803, 804, 806, 809, 810, 814, 815, 816, 818, 824, 825, 826, 828, 835, 836, 837, 845, 846, 855, 856, 866, 871, 872, 873, 874, 875, 878, 880, 881, 883, 884, 886, 887, 888, 889, 903, 915, 928, 973, 983, 988, 992, 996, 997, 1004, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "bbox_to_anchor": [37, 158, 262, 334], "satur": [37, 167, 299], "uniform_labelings_scor": 37, "nwith": [37, 56, 60, 145, 341], "constantli": [37, 197, 986], "unbound": [37, 961, 1018], "cardin": [37, 116, 117, 123, 169, 392, 399, 443, 533, 534, 537, 538, 539, 540, 544, 545, 546, 660, 852, 886, 887, 888, 889, 962, 963, 970, 972, 1018], "why": [37, 52, 95, 167, 169, 173, 186, 254, 257, 340, 341, 368, 375, 380, 392, 394, 397, 403, 425, 427, 431, 962, 964, 977, 992, 995, 1007], "chart": [37, 262, 963, 990, 1007], "henc": [37, 59, 71, 167, 201, 230, 266, 327, 340, 341, 355, 363, 369, 371, 373, 380, 392, 396, 399, 400, 467, 488, 519, 521, 522, 523, 543, 564, 571, 624, 627, 633, 641, 643, 653, 668, 685, 686, 690, 696, 711, 737, 766, 773, 796, 797, 814, 815, 816, 817, 818, 854, 959, 961, 962, 963, 968, 969, 972, 983, 1011, 1012, 1015, 1016, 1018], "safe": [37, 167, 186, 341, 368, 369, 392, 393, 415, 488, 489, 560, 569, 572, 754, 758, 872, 928, 934, 965, 1010, 1011, 1012, 1017, 1018], "stabil": [37, 114, 167, 201, 219, 262, 299, 341, 380, 389, 631, 635, 651, 817, 836, 837, 855, 866, 914, 952, 958, 961, 972, 983, 988, 1004, 1008, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "mislead": [37, 116, 117, 123, 167, 382, 399, 533, 534, 537, 538, 539, 540, 544, 545, 546, 886, 887, 888, 889, 999, 1017], "meaning": [37, 223, 286, 342, 389, 396, 400, 401, 402, 528, 709, 710, 718, 763, 764, 767, 828, 966, 976, 977, 1004], "193": [37, 67, 373, 399, 696, 766, 975], "plot_adjusted_for_chance_measur": [37, 67], "brendan": [38, 421, 434], "frei": [38, 421, 434, 1014], "delbert": [38, 421, 434], "dueck": [38, 421, 434], "messag": [38, 44, 61, 69, 95, 340, 341, 363, 366, 367, 368, 371, 372, 375, 376, 392, 421, 434, 519, 523, 528, 554, 608, 693, 777, 780, 781, 783, 791, 803, 806, 808, 828, 836, 837, 897, 898, 899, 902, 905, 925, 946, 962, 972, 1004, 1008, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "feb": [38, 421, 434], "affinitypropag": [38, 44, 311, 392, 1004, 1007, 1008, 1012, 1015, 1017, 1018, 1019], "labels_tru": [38, 49, 63, 392, 685, 686, 695, 696, 698, 711, 716, 717, 735, 737, 766, 773], "af": 38, "prefer": [38, 44, 248, 266, 299, 351, 355, 356, 357, 366, 368, 369, 380, 392, 396, 397, 399, 400, 421, 434, 451, 452, 458, 467, 488, 489, 608, 613, 614, 635, 639, 640, 682, 706, 708, 737, 738, 828, 854, 878, 879, 920, 928, 951, 954, 956, 958, 962, 967, 977, 978, 982, 995, 1005, 1011, 1013, 1017, 1018], "cluster_centers_indic": [38, 434], "cluster_centers_indices_": [38, 421], "labels_": [38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 51, 52, 57, 60, 61, 62, 64, 66, 311, 341, 368, 380, 392, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 435, 996, 1009], "n_clusters_": [38, 49, 62, 422, 426], "homogeneity_scor": [38, 49, 57, 341, 392, 698, 716, 773, 962], "completeness_scor": [38, 49, 57, 308, 341, 392, 716, 717, 773, 962], "silhouette_scor": [38, 49, 57, 59, 341, 368, 392, 1004, 1008, 1010, 1012, 1014, 1018], "sqeuclidean": [38, 430, 437, 758, 759, 760], "872": [38, 970], "912": 38, "871": [38, 79, 80, 394, 454], "753": [38, 340], "cycler": 38, "viridi": [38, 277, 678], "class_memb": 38, "cluster_cent": [38, 60, 62, 63, 441], "337": [38, 67, 182, 216, 373], "plot_affinity_propag": [38, 67, 421, 434], "impos": [39, 56, 126, 191, 378, 392, 397, 399, 400, 507, 638, 958], "simpli": [39, 85, 127, 149, 157, 222, 233, 266, 290, 309, 310, 355, 363, 368, 369, 372, 378, 380, 394, 395, 396, 397, 399, 400, 465, 676, 742, 745, 846, 917, 954, 962, 963, 964, 965, 976, 989, 997, 1011, 1012, 1013], "There": [39, 46, 149, 215, 222, 235, 248, 252, 254, 257, 340, 361, 363, 365, 368, 369, 372, 378, 380, 383, 389, 391, 392, 397, 399, 400, 401, 432, 442, 514, 533, 534, 539, 540, 569, 570, 572, 587, 626, 952, 958, 959, 960, 961, 962, 965, 969, 972, 976, 977, 978, 981, 985, 996, 1004, 1012], "singl": [39, 48, 52, 53, 57, 60, 61, 71, 108, 111, 118, 119, 120, 128, 133, 146, 149, 155, 161, 164, 168, 170, 173, 197, 199, 236, 238, 247, 253, 266, 295, 311, 327, 340, 341, 342, 346, 348, 351, 355, 356, 362, 363, 368, 372, 374, 375, 376, 378, 379, 380, 390, 391, 393, 395, 396, 397, 399, 400, 401, 415, 418, 421, 422, 426, 427, 429, 434, 444, 446, 447, 473, 474, 476, 486, 489, 514, 533, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 563, 573, 580, 581, 583, 587, 608, 613, 615, 624, 647, 648, 654, 657, 658, 659, 671, 673, 675, 691, 702, 703, 704, 705, 716, 717, 718, 721, 754, 765, 775, 776, 777, 780, 781, 791, 798, 801, 802, 804, 805, 808, 816, 819, 820, 824, 836, 837, 838, 848, 849, 852, 853, 854, 859, 873, 874, 886, 887, 888, 889, 894, 926, 930, 949, 951, 957, 958, 959, 962, 963, 965, 967, 969, 970, 972, 976, 977, 978, 982, 986, 988, 995, 997, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1020], "unstabl": [39, 65, 167, 392, 394, 395, 670, 674, 914, 915, 978, 1008, 1009, 1011, 1016, 1018], "quickli": [39, 236, 294, 307, 365, 368, 396, 399, 673, 958, 965, 966, 986, 997, 1015], "fight": [39, 986], "percol": 39, "distanc": [39, 40, 56, 59, 60, 64, 66, 76, 80, 82, 100, 161, 164, 170, 183, 198, 218, 220, 223, 230, 277, 279, 280, 285, 287, 289, 290, 299, 304, 307, 311, 312, 340, 341, 355, 365, 376, 378, 380, 389, 392, 394, 397, 398, 402, 403, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 435, 436, 437, 438, 439, 441, 442, 443, 448, 449, 450, 451, 452, 453, 454, 455, 456, 518, 520, 527, 588, 589, 596, 600, 601, 603, 604, 609, 639, 640, 647, 649, 655, 656, 657, 658, 659, 669, 670, 671, 673, 674, 675, 676, 677, 680, 684, 705, 714, 738, 740, 742, 743, 744, 745, 748, 749, 750, 751, 752, 753, 758, 759, 760, 761, 770, 771, 774, 808, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 858, 872, 876, 878, 880, 882, 883, 884, 886, 887, 888, 889, 952, 956, 959, 960, 962, 968, 972, 974, 976, 977, 983, 995, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "merg": [39, 41, 46, 51, 310, 366, 368, 370, 375, 378, 381, 392, 421, 422, 423, 426, 443, 797, 996, 1004, 1011], "exagger": [39, 167, 673, 959], "behaviour": [39, 100, 198, 199, 215, 329, 368, 380, 392, 399, 539, 540, 544, 545, 583, 876, 886, 887, 935, 951, 952, 962, 972, 1012, 1015, 1016, 1019], "shortest": [39, 372, 376, 669, 920, 959, 1017], "mechan": [39, 336, 340, 356, 369, 392, 400, 444, 838, 960, 978, 986], "resembl": 39, "brittl": [39, 392], "pronounc": [39, 40, 52, 154], "kneighbors_graph": [39, 44, 61, 66, 277, 380, 392, 422, 426, 821, 822, 823, 825, 827, 829, 830, 831, 833, 965, 1004, 1008, 1013], "geometri": [39, 392, 959, 965], "instabl": [39, 167, 287, 432, 515, 519, 523, 676, 1011, 1014, 1017], "agglomerativeclust": [39, 40, 41, 44, 47, 52, 55, 61, 66, 380, 392, 421, 423, 426, 996, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1019], "1500": [39, 50, 56, 61, 66, 91, 218, 222, 242], "knn_graph": 39, "include_self": [39, 44, 66, 832, 833, 1008], "808": [39, 67, 286, 291], "plot_agglomerative_clust": [39, 67], "waveform": 40, "euclidean": [40, 56, 57, 183, 230, 277, 285, 307, 312, 341, 389, 391, 392, 397, 398, 399, 400, 402, 421, 422, 425, 426, 430, 432, 437, 440, 443, 511, 517, 570, 596, 600, 603, 604, 657, 659, 671, 673, 676, 677, 680, 742, 743, 749, 750, 751, 752, 758, 759, 760, 761, 770, 771, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 872, 952, 956, 960, 963, 965, 974, 983, 1008, 1011, 1012, 1013, 1014], "cityblock": [40, 44, 392, 430, 437, 742, 758, 759, 760, 965], "invari": [40, 365, 380, 392, 402, 595, 670, 727, 795, 796, 958, 959, 962, 977, 983, 1012, 1015, 1016, 1017], "ie": [40, 65, 96, 421, 685, 748, 958, 972], "inter": [40, 116, 351, 399, 697, 921], "character": [40, 215, 345, 392, 396, 959], "ill": [40, 81, 202, 458, 631, 632, 635, 636, 637, 663, 664, 958, 961, 996, 1014], "recov": [40, 64, 81, 96, 97, 103, 119, 149, 166, 196, 197, 218, 342, 394, 398, 401, 404, 440, 513, 539, 958, 959, 961, 983, 996, 1010], "put": [40, 57, 138, 149, 151, 231, 237, 242, 293, 301, 311, 320, 331, 332, 337, 357, 369, 371, 372, 375, 402, 424, 427, 439, 495, 595, 628, 642, 775, 856, 867, 880, 881, 882, 883, 884, 905, 952, 959, 961, 962, 963, 969, 972, 985, 989, 991, 997, 1016], "cc": [40, 366], "patheffect": 40, "pairwise_dist": [40, 380, 392, 403, 422, 425, 426, 430, 437, 669, 677, 742, 751, 759, 760, 770, 771, 823, 825, 827, 831, 960, 1004, 1008, 1010, 1012, 1013, 1015, 1016], "sqr": 40, "sign": [40, 78, 85, 96, 99, 112, 181, 247, 293, 335, 368, 392, 397, 400, 524, 563, 570, 587, 616, 617, 639, 640, 647, 649, 655, 656, 657, 658, 715, 722, 878, 882, 913, 915, 927, 958, 962, 967, 972, 976, 977, 996, 1004, 1008, 1013, 1017, 1019], "phi": [40, 397, 723, 845, 954, 962, 972, 977], "phase_nois": 40, "amplitude_nois": 40, "additional_nois": 40, "f7bd01": 40, "377eb8": [40, 44, 61, 62, 226], "f781bf": [40, 44, 61, 62], "set_label": [40, 152, 230], "avg_dist": [40, 761], "set_path_effect": 40, "withstrok": 40, "foreground": [40, 65], "cividi": 40, "vmin": [40, 81, 95, 98, 106, 152, 155, 176, 188, 213, 231, 246, 252, 295, 327], "45": [40, 63, 71, 72, 75, 142, 154, 168, 169, 186, 197, 215, 264, 268, 269, 316, 327, 351, 396, 399, 400, 544, 545, 608, 615, 768, 775, 882, 952, 962, 970, 981, 993, 1000, 1004, 1007], "interclass": 40, "plot_agglomerative_clustering_metr": [40, 67], "hierarchi": [41, 170, 430, 436, 443, 967, 996], "plot_dendrogram": 41, "kwarg": [41, 98, 369, 374, 406, 419, 444, 515, 518, 520, 598, 612, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 679, 680, 681, 683, 722, 819, 820, 838, 839, 843, 893, 912, 1011, 1015, 1017], "children_": [41, 422, 426, 443], "current_count": 41, "child_idx": 41, "leaf": [41, 115, 125, 127, 345, 349, 392, 399, 403, 422, 423, 424, 425, 426, 430, 437, 443, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 819, 820, 821, 822, 823, 824, 825, 827, 829, 830, 831, 886, 887, 888, 889, 890, 891, 965, 978, 1007, 1009, 1011, 1015, 1018], "linkage_matrix": 41, "column_stack": [41, 293, 301], "distances_": [41, 422, 426, 1016], "distance_threshold": [41, 422, 426, 1013, 1016], "truncate_mod": 41, "parenthesi": [41, 368], "098": [41, 67], "plot_agglomerative_dendrogram": [41, 67], "scalabl": [42, 44, 61, 164, 172, 174, 250, 273, 312, 341, 368, 392, 399, 400, 428, 471, 482, 570, 621, 783, 794, 803, 805, 817, 840, 849, 851, 878, 880, 883, 884, 954, 957, 959, 962, 975, 977, 986, 1004, 1007, 1008, 1014, 1015, 1018, 1019], "hundr": [42, 121, 219, 303, 363, 396, 399, 541, 542, 959, 1015], "thousand": [42, 230, 232, 303, 341, 363, 392, 399, 836, 837, 883, 959, 997, 1013, 1015], "million": [42, 55, 154, 173, 400, 402, 673, 959, 977, 986, 1018, 1019], "chose": [42, 167, 992], "usag": [42, 53, 70, 73, 84, 99, 120, 143, 167, 168, 227, 231, 251, 280, 286, 288, 295, 323, 342, 355, 367, 368, 369, 370, 374, 375, 377, 380, 381, 392, 396, 397, 402, 403, 425, 430, 469, 541, 542, 590, 629, 639, 640, 641, 647, 649, 650, 657, 658, 659, 660, 661, 758, 761, 770, 771, 878, 886, 887, 888, 889, 915, 951, 954, 961, 962, 963, 965, 977, 984, 988, 992, 999, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "enjoi": 42, "edit": [42, 365, 367, 368, 370, 371, 375, 378, 383, 510, 514, 809, 956, 958, 963, 969, 997], "158": [42, 190, 216, 399, 650], "manojkumarsivaraj334": 42, "joblib": [42, 54, 71, 277, 308, 363, 366, 368, 370, 376, 378, 380, 383, 385, 386, 391, 393, 403, 418, 422, 425, 426, 428, 430, 432, 437, 438, 441, 444, 447, 452, 488, 511, 515, 516, 517, 519, 522, 523, 525, 526, 528, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 575, 583, 591, 613, 615, 620, 628, 632, 634, 636, 638, 639, 640, 642, 644, 646, 647, 649, 657, 660, 669, 670, 671, 672, 673, 674, 675, 754, 758, 761, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 812, 821, 822, 825, 827, 829, 830, 832, 833, 838, 839, 840, 841, 873, 874, 928, 929, 930, 932, 947, 962, 983, 1004, 1005, 1007, 1009, 1011, 1012, 1013, 1015, 1016, 1019], "cpu_count": [42, 277, 930], "n_center": [42, 492], "25000": 42, "colors_": 42, "cname": 42, "birch_model": 42, "final_step": 42, "centroid": [42, 45, 56, 57, 164, 278, 291, 302, 311, 341, 364, 392, 423, 424, 427, 428, 429, 432, 439, 440, 442, 484, 529, 826, 984, 999, 1004, 1008, 1011, 1016], "subcluster_centers_": [42, 423], "this_centroid": 42, "set_autoscaley_on": 42, "mbk": [42, 63], "256": [42, 48, 53, 97, 107, 121, 341, 356, 363, 392, 399, 429, 448, 517, 526, 543, 835, 866, 876, 997, 1018], "max_no_improv": [42, 60, 63, 429, 517, 518, 519, 526, 1018, 1019], "t_mini_batch": [42, 63], "mbk_means_labels_uniqu": 42, "cluster_centers_": [42, 43, 48, 50, 57, 59, 60, 62, 63, 95, 311, 341, 421, 424, 427, 428, 429, 996], "738": [42, 67], "plot_birch_vs_minibatchkmean": [42, 67], "bisectingkmean": [43, 392, 1018, 1019], "__doc__": [43, 74, 154, 235, 245, 380], "n_clusters_list": 43, "clustering_algorithm": [43, 44, 61], "variant": [43, 95, 160, 163, 164, 257, 310, 311, 341, 342, 373, 392, 395, 397, 400, 402, 429, 440, 470, 473, 474, 492, 495, 523, 539, 540, 545, 596, 600, 603, 604, 608, 611, 619, 620, 622, 626, 653, 685, 778, 782, 784, 785, 786, 795, 801, 822, 840, 875, 952, 958, 959, 960, 961, 962, 964, 965, 976, 983, 997, 1004, 1012], "algorithm_nam": 43, "algo": [43, 105], "hide": [43, 375, 814, 815, 816, 817, 818, 1007, 1012], "flat": [43, 95, 101, 168, 218, 219, 220, 255, 392, 400, 421, 428, 441, 489, 969, 996, 1004, 1005], "label_out": 43, "970": [43, 67], "plot_bisect_kmean": [43, 67], "null": [44, 70, 167, 168, 169, 257, 263, 396, 629, 650, 661, 685, 711, 737, 773, 804, 958, 959, 962, 977, 1014], "mismatch": [44, 961, 1013], "warn": [44, 61, 71, 197, 212, 260, 277, 294, 295, 303, 355, 358, 368, 370, 371, 372, 380, 386, 400, 404, 427, 429, 439, 476, 506, 513, 530, 533, 534, 537, 538, 539, 540, 544, 545, 546, 551, 552, 553, 554, 555, 556, 558, 583, 611, 617, 651, 671, 674, 675, 693, 694, 709, 710, 718, 763, 764, 767, 814, 815, 816, 818, 843, 844, 881, 882, 883, 884, 886, 887, 888, 889, 898, 899, 905, 915, 928, 930, 932, 948, 949, 951, 962, 972, 995, 1004, 1006, 1007, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "noisy_circl": [44, 61], "noisy_moon": [44, 61], "no_structur": [44, 61], "anisotropicli": [44, 61], "170": [44, 56, 61, 373], "x_aniso": [44, 56, 61], "aniso": [44, 61], "plot_num": [44, 61, 226], "default_bas": [44, 61], "quantil": [44, 53, 62, 90, 110, 112, 164, 175, 216, 299, 302, 303, 378, 399, 419, 420, 438, 499, 532, 540, 542, 638, 651, 703, 725, 728, 730, 802, 844, 856, 857, 858, 867, 868, 962, 972, 984, 999, 1004, 1008, 1011, 1013, 1017, 1018, 1020], "damp": [44, 392, 421, 434], "min_sampl": [44, 49, 64, 378, 380, 392, 403, 425, 430, 436, 437, 652, 958, 1013, 1017], "xi": [44, 64, 94, 365, 392, 395, 400, 430, 436, 489, 976, 1015], "min_cluster_s": [44, 64, 430, 436, 1013], "220": [44, 1004], "i_dataset": [44, 61, 226], "algo_param": [44, 61], "param": [44, 60, 61, 70, 121, 123, 124, 218, 232, 255, 257, 265, 269, 281, 294, 368, 369, 380, 399, 402, 406, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 775, 776, 777, 780, 781, 789, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 951, 1010, 1014, 1015, 1017, 1018], "estimate_bandwidth": [44, 62, 392, 428, 441], "symmetr": [44, 122, 158, 170, 199, 380, 390, 392, 432, 442, 443, 454, 499, 507, 509, 671, 675, 676, 685, 686, 696, 697, 698, 704, 708, 716, 717, 735, 737, 743, 765, 773, 775, 776, 948, 951, 958, 962, 965], "meanshift": [44, 311, 392, 421, 1007, 1008, 1009, 1012, 1014, 1015, 1018, 1019], "bin_seed": [44, 62, 428, 441, 1015], "two_mean": 44, "spectralclust": [44, 311, 392, 421, 965, 1004, 1005, 1014, 1016, 1017, 1018, 1019], "nearest_neighbor": [44, 432, 672], "average_linkag": 44, "gmm": [44, 164, 241, 243, 246, 247, 248, 249, 484, 492, 776, 796, 961, 1004, 1005, 1008, 1009, 1010], "gaussianmixtur": [44, 56, 243, 244, 245, 246, 247, 248, 398, 775, 1010, 1012, 1013, 1017, 1018], "covariance_typ": [44, 243, 244, 246, 247, 248, 775, 776], "nkmean": 44, "npropag": 44, "ncluster": 44, "nmixtur": 44, "catch": [44, 61, 295, 375, 376], "catch_warn": [44, 61, 294, 295], "filterwarn": [44, 61, 212, 294, 295, 368, 972], "fulli": [44, 116, 122, 355, 362, 363, 380, 398, 399, 401, 424, 427, 537, 538, 544, 545, 886, 887, 888, 889, 890, 892, 951, 952, 958, 967, 975, 982, 1017, 1018], "t1": [44, 46, 61, 212, 220, 223, 226], "ff7f00": [44, 61, 226], "4daf4a": [44, 61], "a65628": [44, 61], "984ea3": [44, 61], "999999": [44, 61], "e41a1c": [44, 61], "dede00": [44, 61, 62], "000000": [44, 167, 186, 215, 257, 303, 717], "transax": [44, 61, 222, 226, 244, 285, 301], "318": [44, 67, 430], "plot_cluster_comparison": [44, 67], "bad": [45, 59, 60, 150, 167, 340, 351, 368, 392, 402, 673, 726, 951, 958, 959, 964, 970, 996, 1004], "eight": [45, 997], "deliv": [45, 355, 986], "though": [45, 146, 173, 176, 263, 282, 301, 303, 341, 342, 351, 355, 362, 365, 368, 369, 379, 380, 392, 397, 398, 399, 400, 401, 680, 784, 786, 878, 951, 952, 954, 959, 962, 965, 972, 976, 997, 1012], "3d": [45, 48, 66, 89, 101, 102, 168, 194, 218, 220, 222, 400, 486, 567, 925, 1011, 1012, 1014], "mplot3d": [45, 66, 89, 101, 102, 168, 194, 218, 220], "noqa": [45, 66, 89, 101, 102, 122, 161, 162, 168, 194, 218, 220, 268, 269, 309, 371, 559, 561, 608, 780, 781, 951, 1013], "f401": [45, 66, 89, 101, 102, 168, 194, 218, 220], "k_means_iris_8": 45, "k_means_iris_3": 45, "k_means_iris_bad_init": 45, "est": [45, 129, 167, 234, 301, 309, 351, 386, 399, 542, 715, 844, 951, 962, 972, 976, 1015, 1016], "elev": [45, 66, 89, 101, 102, 168, 194, 218, 222], "azim": [45, 66, 89, 101, 102, 168, 194, 218, 222], "134": [45, 53, 102, 121, 257, 1007], "xaxi": [45, 89, 101, 102, 194, 218, 220, 223, 277, 282, 340], "set_ticklabel": [45, 89, 101, 102, 194, 340], "zaxi": [45, 89, 101, 102, 194, 218], "petal": [45, 89, 104, 106, 118, 239, 309, 312, 365, 393, 891, 978, 994, 995], "sepal": [45, 89, 104, 106, 118, 151, 180, 239, 309, 312, 324, 365, 972, 994, 995], "length": [45, 69, 88, 89, 91, 104, 106, 118, 149, 150, 151, 154, 155, 157, 173, 180, 233, 236, 239, 309, 312, 324, 342, 361, 365, 368, 375, 376, 380, 393, 397, 399, 400, 402, 426, 470, 488, 489, 492, 495, 503, 531, 543, 562, 563, 570, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 613, 627, 628, 631, 632, 633, 634, 635, 637, 638, 641, 642, 643, 644, 662, 665, 761, 777, 780, 781, 791, 805, 807, 810, 811, 813, 821, 822, 823, 825, 827, 865, 891, 898, 900, 904, 920, 921, 933, 936, 961, 968, 972, 988, 994, 995, 1004, 1007, 1008, 1010, 1011, 1012, 1013, 1015, 1016, 1020], "set_zlabel": [45, 89, 194], "setosa": [45, 89, 102, 104, 266, 267, 365, 484, 988, 995], "versicolour": [45, 89, 102, 104, 365, 995], "virginica": [45, 89, 102, 104, 266, 267, 365, 484, 962, 995], "text3d": [45, 102], "reorder": [45, 102, 380, 678, 699, 983, 1012], "287": [45, 67, 974], "plot_cluster_iri": [45, 67], "voxel": [46, 65, 566], "multipl": [46, 68, 75, 91, 94, 105, 117, 118, 164, 167, 191, 231, 257, 269, 279, 307, 355, 356, 357, 362, 364, 365, 368, 369, 370, 371, 372, 378, 380, 391, 392, 393, 394, 395, 397, 399, 400, 401, 402, 403, 404, 425, 440, 444, 446, 447, 449, 454, 468, 471, 472, 475, 476, 477, 483, 484, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 531, 533, 534, 535, 536, 539, 540, 541, 542, 543, 562, 580, 588, 589, 591, 592, 608, 613, 615, 620, 621, 622, 623, 627, 628, 631, 633, 634, 635, 638, 641, 642, 643, 644, 647, 648, 649, 652, 654, 657, 659, 660, 670, 671, 673, 674, 675, 702, 703, 708, 725, 726, 728, 730, 731, 733, 765, 768, 771, 775, 776, 777, 779, 780, 781, 782, 783, 789, 791, 792, 793, 794, 795, 796, 797, 801, 802, 803, 805, 809, 810, 811, 812, 813, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 841, 844, 856, 867, 870, 871, 878, 879, 880, 883, 894, 909, 914, 915, 933, 936, 954, 957, 958, 959, 963, 964, 965, 969, 970, 975, 976, 978, 982, 983, 988, 997, 1004, 1005, 1007, 1010, 1011, 1014, 1015, 1016, 1017, 1019], "partli": [46, 749], "procedur": [46, 55, 122, 146, 177, 185, 247, 259, 302, 327, 340, 351, 368, 369, 378, 379, 380, 381, 390, 391, 394, 396, 397, 399, 401, 511, 517, 518, 520, 525, 526, 527, 533, 534, 535, 536, 539, 540, 574, 576, 583, 590, 625, 653, 655, 668, 708, 765, 836, 837, 856, 867, 933, 951, 958, 964, 970, 972, 975, 976, 977, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "solut": [46, 176, 186, 188, 201, 202, 211, 226, 232, 310, 327, 366, 369, 380, 389, 392, 394, 396, 397, 400, 401, 402, 429, 431, 433, 511, 517, 518, 519, 520, 522, 523, 525, 526, 527, 528, 529, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 591, 627, 629, 631, 633, 635, 636, 637, 639, 641, 643, 645, 646, 647, 648, 649, 650, 653, 655, 657, 658, 659, 660, 661, 663, 664, 666, 667, 668, 775, 776, 791, 828, 836, 837, 955, 956, 958, 959, 961, 966, 968, 976, 977, 981, 986, 992, 995, 997, 1004, 1007, 1017, 1018, 1019], "closest": [46, 63, 369, 392, 421, 423, 424, 427, 428, 429, 439, 634, 759, 760, 809, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 953, 956, 963, 965, 995], "partit": [46, 65, 69, 125, 127, 257, 295, 389, 392, 396, 399, 429, 431, 433, 442, 491, 537, 538, 539, 540, 543, 544, 545, 685, 686, 696, 766, 827, 886, 887, 888, 889, 961, 965, 968, 972, 978, 997], "cluster_qr": [46, 392, 432, 442, 1018], "qr": [46, 199, 514, 521, 524, 914, 915, 959, 1010], "pivot": [46, 268, 269], "cheung": [46, 1005], "andrew": [46, 392, 442, 672, 676, 698, 717, 773, 854, 966, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "knyazev": [46, 392, 432, 442, 676, 1014, 1017, 1018], "ucdenv": 46, "skimag": [46, 47, 362, 996], "spectral_clust": [46, 65, 1012, 1014, 1016, 1017, 1018, 1019], "orig_coin": [46, 47], "speed": [46, 47, 56, 69, 98, 162, 168, 183, 186, 190, 235, 277, 309, 316, 340, 342, 357, 358, 368, 370, 376, 378, 380, 390, 392, 397, 400, 403, 424, 425, 427, 428, 429, 430, 432, 437, 439, 440, 441, 442, 511, 512, 591, 608, 613, 614, 615, 620, 627, 628, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 645, 662, 665, 673, 775, 776, 783, 803, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 854, 915, 951, 959, 961, 963, 976, 986, 996, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019], "down": [46, 47, 80, 212, 213, 220, 230, 231, 260, 296, 299, 351, 362, 370, 375, 394, 397, 424, 430, 436, 571, 574, 575, 620, 630, 754, 758, 761, 854, 857, 858, 868, 880, 883, 890, 958, 988, 996, 1012], "alias": [46, 47, 366, 368, 370, 427, 439, 1004, 1008, 1018], "smoothened_coin": [46, 47], "rescaled_coin": [46, 47, 996], "anti_alias": [46, 47, 996], "img_to_graph": [46, 65, 400, 1007, 1017], "exponenti": [46, 74, 149, 154, 282, 287, 398, 399, 402, 429, 516, 534, 539, 595, 600, 603, 620, 624, 738, 739, 819, 820, 824, 836, 837, 854, 954, 958, 962, 977, 995, 1011, 1017], "beta": [46, 84, 93, 107, 164, 166, 373, 390, 392, 395, 516, 518, 520, 527, 625, 709, 710, 716, 722, 763, 773, 775, 962, 995, 1006, 1009, 1011, 1013, 1014], "voronoi": [46, 65, 392], "n_region": 46, "extra": [46, 118, 234, 277, 342, 366, 367, 371, 380, 399, 400, 419, 424, 427, 439, 444, 512, 537, 538, 546, 571, 572, 681, 682, 683, 800, 823, 888, 889, 905, 961, 965, 1004, 1007, 1009, 1010, 1012, 1017, 1019], "benetif": 46, "n_regions_plu": 46, "lobpcg": [46, 432, 442, 669, 672, 676, 1014, 1017, 1018, 1019], "amg": [46, 65, 392, 432, 442, 672, 676, 1014, 1018, 1019], "pyamg": [46, 383, 385, 392, 432, 442, 672, 676], "toler": [46, 72, 161, 188, 190, 213, 214, 342, 363, 369, 376, 392, 404, 424, 427, 432, 439, 442, 451, 452, 458, 462, 463, 464, 511, 512, 513, 515, 516, 520, 521, 522, 523, 524, 525, 527, 528, 539, 540, 541, 542, 608, 627, 628, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 657, 659, 660, 662, 663, 664, 665, 669, 670, 671, 672, 674, 675, 676, 819, 820, 824, 828, 836, 837, 873, 874, 878, 879, 880, 881, 882, 883, 884, 948, 958, 962, 976, 977, 993, 1016, 1017, 1018, 1019], "eigen_tol": [46, 432, 442, 672, 676, 1005, 1018, 1019], "todo": [46, 230, 371, 373, 375, 380, 392, 1020], "21243": 46, "assign_label": [46, 392, 432, 442], "individu": [46, 59, 79, 108, 113, 129, 133, 141, 158, 164, 165, 171, 197, 215, 227, 260, 262, 307, 335, 356, 371, 374, 376, 380, 382, 389, 393, 396, 399, 400, 418, 432, 442, 444, 476, 481, 483, 489, 535, 536, 539, 540, 542, 543, 545, 547, 548, 549, 550, 584, 590, 591, 613, 614, 624, 626, 638, 639, 640, 649, 652, 653, 654, 655, 656, 657, 658, 659, 668, 693, 700, 708, 714, 730, 731, 765, 777, 791, 807, 811, 812, 814, 815, 816, 817, 818, 837, 840, 848, 849, 851, 852, 853, 856, 858, 859, 863, 864, 865, 878, 879, 962, 963, 972, 977, 992, 997, 999, 1005, 1008, 1010, 1016, 1018], "comment": [46, 340, 366, 367, 368, 370, 371, 375, 381, 467, 559, 962], "paus": 46, "21194": [46, 1017], "763": [46, 67], "plot_coin_segment": [46, 67], "spatial": [47, 49, 170, 214, 295, 363, 380, 392, 403, 425, 430, 432, 437, 660, 673, 680, 740, 743, 758, 759, 760, 761, 770, 771, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 958, 965, 972, 1006, 1010, 1017], "constrain": [47, 95, 119, 126, 168, 188, 293, 308, 325, 327, 361, 380, 391, 392, 397, 399, 489, 541, 542, 616, 639, 671, 675, 804, 958, 961, 1008], "piec": [47, 198, 356, 961], "grid_to_graph": [47, 51, 54, 392, 400, 996, 1017], "st": [47, 66, 257, 312, 1007, 1010, 1012], "143": [47, 89, 92, 297, 365, 451, 452, 974, 1004, 1005], "4697": 47, "502": [47, 67], "plot_coin_ward_segment": [47, 67], "vq": [48, 57], "palac": 48, "china": [48, 392, 486, 487, 565], "615": [48, 282, 291], "literatur": [48, 154, 257, 341, 365, 368, 373, 375, 378, 379, 392, 395, 397, 399, 424, 427, 429, 481, 516, 518, 520, 527, 535, 536, 569, 572, 689, 775, 951, 954, 958, 962, 1014], "codebook": [48, 546, 809], "palett": [48, 167, 257, 280], "byte": [48, 53, 400, 467, 483, 488, 489, 563, 569, 570, 572, 927, 995, 997, 1004, 1011, 1012, 1019], "wherea": [48, 53, 66, 79, 109, 125, 201, 211, 258, 259, 260, 266, 304, 336, 357, 396, 399, 545, 639, 640, 779, 795, 807, 954, 961, 963, 965, 972, 978, 1017], "rgb": [48, 363, 400, 473, 474, 564, 565, 568], "gif": 48, "pick": [48, 59, 170, 233, 265, 311, 315, 363, 368, 371, 392, 399, 424, 440, 503, 654, 888, 889, 951, 958, 959, 961, 976, 1015], "035": 48, "064": [48, 58, 67, 373, 970], "robertlayton": 48, "pairwise_distances_argmin": [48, 63, 311, 760, 1012, 1018, 1019], "load_sample_imag": [48, 564, 565, 1013], "n_color": 48, "photo": 48, "jpg": [48, 486, 565], "255": [48, 98, 277, 295, 310, 363, 473, 474, 541, 542], "original_shap": 48, "image_arrai": 48, "image_array_sampl": 48, "codebook_random": 48, "labels_random": 48, "recreate_imag": 48, "recreat": [48, 236], "book": [48, 69, 424, 427, 429, 809, 814, 818, 958, 959, 960, 963, 980, 1016], "alongsid": [48, 368, 373, 380, 383, 401, 962, 969, 982, 983], "492": [48, 67, 81, 82, 158, 624, 955, 995], "plot_color_quant": [48, 67], "750": [49, 117, 257], "math": [49, 69, 235, 257, 258, 365, 368, 383, 744], "db": [49, 392], "n_noise_": 49, "come": [49, 66, 69, 79, 85, 100, 101, 149, 231, 307, 335, 340, 341, 355, 357, 361, 365, 368, 371, 375, 378, 380, 383, 392, 396, 399, 400, 420, 430, 436, 452, 530, 686, 773, 798, 880, 883, 951, 952, 956, 959, 961, 965, 968, 977, 988, 1004, 1015, 1018, 1020], "handi": [49, 70, 341, 342, 1020], "883": 49, "917": 49, "916": 49, "626": [49, 183], "asign": [49, 341], "unique_label": [49, 341, 369, 376], "core_samples_mask": 49, "zeros_lik": [49, 199, 266], "bool": [49, 65, 80, 162, 215, 349, 368, 404, 405, 406, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 439, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 499, 502, 503, 504, 506, 507, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 678, 683, 684, 688, 689, 690, 692, 693, 694, 695, 706, 707, 708, 709, 710, 711, 718, 721, 722, 730, 731, 734, 736, 741, 743, 747, 748, 749, 754, 758, 762, 763, 764, 765, 767, 769, 772, 774, 775, 776, 777, 780, 781, 782, 783, 791, 795, 796, 799, 802, 803, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 896, 897, 898, 899, 909, 915, 916, 924, 927, 933, 935, 943, 948, 949, 950, 952, 1013, 1016, 1017], "core_sample_indices_": [49, 425], "class_member_mask": 49, "markerfacecolor": [49, 60, 62, 63], "230": [49, 67, 565], "plot_dbscan": [49, 67, 403, 425], "constitut": [50, 380, 396, 399, 430, 436, 569, 570, 572, 966], "standpoint": 50, "proce": [50, 143, 178, 366, 371, 395, 396, 399, 421, 958], "reassign": [50, 368, 427, 429, 1005, 1009], "success": [50, 164, 250, 264, 273, 351, 387, 392, 396, 397, 399, 495, 544, 559, 777, 780, 781, 798, 883, 965, 986, 992, 996, 999, 1016], "becom": [50, 56, 71, 79, 199, 259, 277, 300, 304, 327, 340, 351, 362, 368, 369, 371, 375, 380, 381, 392, 394, 399, 400, 402, 421, 430, 434, 435, 437, 562, 569, 570, 572, 583, 600, 608, 639, 640, 657, 659, 853, 878, 879, 885, 957, 958, 959, 961, 965, 972, 977, 995, 997, 1005, 1012, 1013, 1016, 1017, 1018, 1019], "fetch_olivetti_fac": [50, 95, 117, 234, 363, 1012, 1013, 1014], "extract_patches_2d": [50, 98, 400, 1012], "patch_siz": [50, 98, 400, 564, 565], "buffer": [50, 1017], "max_patch": [50, 400, 564, 565, 1012], "4i": 50, "dt": [50, 98, 109, 130, 399, 400, 978], "2400": 50, "700": [50, 235, 240, 309], "800": [50, 120, 168, 310, 363, 565, 673], "1100": 50, "1200": [50, 121, 299, 399], "1300": 50, "1400": [50, 454], "1600": 50, "1700": 50, "1800": 50, "1900": 50, "2100": [50, 310], "2200": [50, 363, 473], "2300": [50, 186], "ntrain": 50, "513": [50, 67, 828, 965], "plot_dict_face_patch": [50, 67], "agglo": [51, 426, 996], "featureagglomer": [51, 54, 421, 422, 979, 996, 1007, 1013, 1014, 1017, 1018], "x_reduc": [51, 89, 127, 426, 996], "x_restor": 51, "images_restor": 51, "vmax": [51, 81, 95, 98, 106, 152, 155, 176, 188, 213, 231, 246, 252, 295, 327], "151": [51, 67, 312, 325, 338, 373, 399, 974], "plot_digits_agglomer": [51, 67], "rich": [52, 375, 378, 392, 420, 986, 1015, 1018], "richer": [52, 105, 392], "uneven": [52, 252, 392, 396], "patholog": [52, 961, 1010], "clean": [52, 70, 196, 351, 360, 366, 398, 968, 972, 1014], "fring": [52, 392], "sensibl": [52, 161, 341, 369, 958, 972], "resampl": [52, 122, 154, 167, 215, 281, 376, 378, 535, 536, 936, 983, 1013, 1017], "plot_clust": 52, "x_red": 52, "spectralembed": [52, 218, 219, 220, 669, 670, 671, 673, 959, 1005, 1010, 1014, 1018, 1019], "430": [52, 67, 153, 155, 158, 404, 513], "plot_digits_linkag": [52, 67], "raccoon": [53, 98, 397], "addition": [53, 71, 112, 167, 197, 215, 308, 310, 341, 368, 378, 390, 400, 591, 592, 627, 633, 652, 856, 951, 952, 962, 970, 982, 1010], "adapt": [53, 109, 121, 122, 152, 242, 243, 301, 356, 366, 367, 368, 376, 399, 402, 495, 496, 497, 498, 657, 658, 659, 836, 837, 958, 964, 966, 972, 976, 982, 983, 1012, 1013], "pooch": [53, 383, 385], "instal": [53, 239, 277, 307, 308, 309, 310, 311, 312, 355, 356, 358, 368, 370, 371, 373, 375, 378, 379, 385, 392, 400, 432, 442, 476, 672, 676, 930, 978, 980, 997, 1011, 1012, 1013, 1017, 1018], "raccoon_fac": [53, 98], "nbyte": [53, 230], "768": 53, "1024": [53, 105, 429, 448, 518, 876, 1017], "uint8": [53, 98, 362, 477, 486, 487, 1016], "786432": 53, "unsign": [53, 99, 363, 563, 927], "786": [53, 70], "kilobyt": 53, "shade": [53, 180, 280, 285, 323, 397], "behind": [53, 79, 369, 371, 375, 391, 394, 399, 961, 965, 974], "simplest": [53, 396, 959, 962, 995, 996], "certainli": [53, 69, 341], "compressed_raccoon_uniform": 53, "spot": [53, 228, 392], "leav": [53, 115, 123, 168, 170, 215, 264, 304, 349, 351, 355, 365, 367, 372, 380, 392, 399, 402, 422, 423, 426, 443, 483, 537, 538, 539, 540, 541, 542, 544, 545, 546, 654, 656, 779, 784, 785, 786, 787, 795, 796, 819, 820, 867, 886, 887, 888, 889, 951, 959, 965, 969, 978, 992, 995, 1004, 1011, 1013, 1015, 1016], "bin_edg": 53, "bin_edges_": [53, 300, 844], "bin_cent": [53, 197], "625": [53, 197, 689], "875": [53, 150, 650], "375": [53, 730, 962], "140": [53, 232, 399, 490, 496, 497, 498, 535, 536, 963], "171": [53, 101, 107, 232, 300, 305, 365, 373, 768, 962], "203": 53, "234": [53, 814, 818, 836, 837, 964], "axvlin": [53, 59, 72, 81, 103, 121, 131, 167, 169, 186, 263, 993], "get_ybound": 53, "state": [53, 56, 69, 71, 79, 199, 230, 237, 243, 263, 309, 351, 356, 357, 368, 369, 373, 375, 378, 380, 381, 391, 400, 405, 421, 424, 427, 429, 434, 439, 455, 524, 570, 660, 780, 781, 789, 791, 793, 819, 820, 826, 873, 874, 901, 951, 952, 958, 964, 967, 974, 982, 983, 986, 1006, 1008, 1010, 1012, 1014, 1017], "compressed_raccoon_kmean": 53, "9141241": 53, "3627656": 53, "65000752": 53, "26055499": 53, "68738405": 53, "159": [53, 246, 249, 363, 1004], "79431128": 53, "185": [53, 158, 365, 373, 836, 837], "18557327": 53, "224": [53, 84, 127, 392, 705], "01945707": 53, "save": [53, 69, 71, 296, 367, 368, 371, 373, 374, 375, 380, 386, 396, 404, 448, 514, 515, 608, 819, 820, 876, 958, 962, 978, 986, 997, 1004, 1007, 1011, 1014], "verifi": [53, 59, 167, 197, 368, 372, 946, 965], "6291456": 53, "surpris": [53, 168, 958, 982, 1006], "x8": 53, "ndarrai": [53, 57, 89, 197, 239, 255, 256, 257, 368, 369, 373, 374, 388, 400, 403, 404, 407, 408, 410, 412, 414, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 443, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 477, 480, 481, 482, 483, 484, 485, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 678, 679, 680, 681, 682, 683, 696, 699, 701, 702, 703, 704, 706, 707, 708, 718, 719, 720, 725, 726, 728, 730, 731, 733, 734, 736, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 765, 769, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 896, 897, 898, 903, 904, 914, 915, 916, 917, 920, 921, 924, 926, 927, 931, 934, 935, 937, 938, 939, 940, 943, 948, 949, 962, 977, 983, 1007, 1011, 1014, 1015, 1018, 1019], "practic": [53, 70, 79, 85, 98, 119, 149, 166, 167, 173, 199, 226, 232, 258, 265, 283, 284, 309, 327, 356, 358, 368, 369, 370, 373, 375, 379, 380, 392, 394, 396, 397, 398, 399, 400, 402, 427, 432, 442, 501, 504, 570, 613, 614, 651, 775, 818, 871, 878, 951, 952, 956, 961, 962, 963, 964, 965, 968, 969, 972, 982, 983, 984, 986, 988, 997, 998, 999, 1006, 1010, 1012, 1014, 1016], "gain": [53, 220, 264, 277, 279, 316, 340, 341, 349, 367, 373, 375, 378, 399, 512, 537, 541, 542, 544, 706, 736, 775, 776, 808, 886, 888, 963, 967, 975, 978, 1007, 1011, 1014], "345": [53, 67, 365], "plot_face_compress": [53, 67], "anova": [54, 140, 147, 164, 322, 338, 393, 484, 495, 573, 576, 577, 579, 580, 581, 585, 586, 587, 590, 694, 801, 805, 839, 840, 859, 878, 883, 977], "bayesianridg": [54, 161, 176, 177, 309, 608, 625, 958, 1011, 1012, 1013, 1014, 1017, 1018], "shutil": [54, 71, 393], "tempfil": [54, 279, 307, 393, 965], "feature_select": [54, 70, 71, 73, 140, 141, 142, 143, 144, 145, 146, 164, 239, 309, 311, 330, 351, 358, 380, 393, 401, 562, 951, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "kfold": [54, 121, 135, 252, 262, 351, 396, 418, 452, 547, 548, 575, 583, 628, 632, 634, 636, 642, 644, 646, 654, 777, 780, 781, 783, 785, 787, 791, 796, 798, 799, 800, 801, 802, 803, 804, 806, 810, 813, 992, 1005, 1006, 1007, 1009, 1010, 1012, 1014], "roi_siz": 54, "snr": 54, "noise_coef": 54, "gridsearch": [54, 77, 268, 402, 982], "cachedir": [54, 71, 376, 393], "mkdtemp": [54, 393], "mem": [54, 373, 488], "n_x": [54, 566], "n_y": [54, 566, 964], "parcel": [54, 66, 392], "ward__n_clust": 54, "n_job": [54, 71, 72, 116, 117, 122, 123, 129, 136, 145, 161, 167, 168, 169, 219, 221, 237, 256, 258, 259, 261, 272, 277, 307, 308, 309, 312, 356, 368, 380, 399, 403, 418, 425, 428, 430, 432, 437, 438, 441, 444, 447, 452, 511, 515, 516, 517, 519, 522, 523, 525, 526, 528, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 575, 583, 591, 613, 615, 620, 628, 632, 634, 636, 638, 639, 640, 642, 644, 646, 647, 649, 657, 660, 669, 670, 671, 672, 673, 674, 675, 754, 758, 761, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 812, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 838, 841, 873, 874, 928, 930, 951, 962, 963, 965, 992, 993, 997, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019], "coef_agglomeration_": 54, "_agglom": 54, "ward_tre": [54, 422, 426, 1004, 1008], "451933": 54, "675318": 54, "275706": 54, "085711": 54, "1600x1600": 54, "7840": 54, "element": [54, 95, 109, 113, 114, 124, 228, 251, 256, 264, 266, 308, 341, 345, 349, 358, 365, 367, 368, 369, 376, 381, 389, 391, 392, 396, 397, 399, 400, 403, 425, 432, 444, 467, 488, 492, 494, 500, 502, 506, 507, 511, 517, 518, 520, 530, 537, 538, 539, 540, 544, 545, 546, 547, 548, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 598, 613, 639, 640, 647, 649, 657, 658, 659, 688, 698, 707, 714, 716, 726, 743, 749, 758, 762, 768, 769, 809, 819, 820, 821, 822, 823, 825, 827, 829, 830, 834, 836, 837, 842, 858, 859, 861, 865, 878, 883, 886, 887, 888, 889, 917, 918, 919, 933, 935, 936, 956, 958, 962, 963, 966, 969, 972, 973, 974, 978, 986, 988, 1009, 1010, 1012, 1014, 1015, 1016, 1018], "return_dist": [54, 443, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 965, 1008], "________________________________________________________ward_tre": 54, "0min": 54, "905206": 54, "161245": 54, "849835": 54, "091621": 54, "f_regress": [54, 141, 401, 573, 576, 577, 579, 580, 581, 585, 586, 590, 1007, 1011, 1018], "cach": [54, 164, 258, 277, 278, 291, 355, 356, 363, 380, 422, 426, 430, 448, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 482, 488, 777, 821, 823, 839, 840, 876, 880, 881, 882, 883, 884, 947, 965, 977, 1007, 1011, 1012, 1013, 1014, 1016, 1017, 1019], "selectpercentil": [54, 70, 239, 330, 401, 573, 576, 577, 579, 580, 584, 587, 1005, 1010, 1020], "percentag": [54, 104, 119, 188, 215, 252, 260, 263, 396, 401, 514, 521, 524, 529, 574, 575, 629, 650, 661, 684, 714, 726, 795, 796, 797, 809, 890, 892, 963, 978, 1006, 1010, 1016, 1017], "anova__percentil": [54, 330], "coef_selection_": 54, "_univariate_select": 54, "267703": 54, "026711": 54, "_____________________________________________________f_regress": 54, "447268": 54, "112": [54, 363, 365, 1006], "638768": 54, "rdbu_r": [54, 81, 106, 327], "temporari": [54, 69, 71, 355, 448, 668, 761, 876, 965, 1007, 1008, 1011, 1017, 1018], "worri": [54, 959, 989], "rmtree": [54, 71, 393], "ignore_error": 54, "540": [54, 67, 168, 231, 240], "plot_feature_agglomeration_vs_univariate_select": [54, 67], "recomput": [55, 236, 238, 279, 307, 449, 454, 958, 974, 1009], "intract": [55, 397, 959, 967], "unlik": [55, 167, 168, 218, 220, 247, 299, 325, 368, 369, 373, 378, 380, 394, 396, 397, 400, 430, 515, 631, 632, 635, 636, 637, 663, 664, 765, 798, 819, 820, 859, 869, 881, 958, 961, 962, 969, 977, 1004, 1010], "inferenti": 55, "capabl": [55, 85, 154, 222, 369, 380, 383, 963, 966, 977, 978, 986, 1004, 1013], "meta": [55, 69, 108, 132, 133, 164, 197, 266, 351, 362, 366, 369, 371, 378, 380, 388, 390, 391, 401, 402, 445, 533, 534, 535, 536, 537, 538, 539, 541, 542, 544, 545, 550, 555, 578, 584, 805, 812, 951, 963, 983, 984, 999, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1018, 1019], "extend": [55, 66, 198, 246, 264, 327, 365, 366, 378, 380, 390, 391, 392, 397, 399, 612, 701, 808, 811, 812, 844, 846, 862, 893, 954, 962, 963, 977, 983, 984, 999, 1009, 1010, 1011, 1012, 1014, 1019], "chirag": 55, "nagpal": 55, "christo": [55, 1013, 1014, 1016, 1018], "arida": [55, 1013, 1014, 1016, 1018], "baseestim": [55, 277, 368, 379, 380, 414, 613, 614, 907, 1004, 1011, 1014, 1016, 1018, 1019], "clone": [55, 122, 157, 168, 296, 351, 366, 368, 370, 371, 375, 380, 390, 393, 402, 418, 445, 549, 550, 578, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 783, 803, 806, 810, 813, 839, 840, 875, 983, 1004, 1010, 1012, 1016, 1020], "metaestim": [55, 380, 875, 1008, 1017, 1018], "available_if": [55, 380, 923, 1017, 1018], "check_is_fit": [55, 369, 376, 380, 1014, 1017, 1018], "5000": [55, 183, 212, 213, 215, 309], "_classifier_ha": 55, "deleg": [55, 373, 415, 891, 923, 1008, 1010, 1016], "unfit": [55, 393, 415, 444, 549, 550, 583, 592, 1012, 1014], "classifier_": 55, "inductivecluster": 55, "clusterer_": 55, "plot_scatt": 55, "cluster_label": [55, 59], "x_new": [55, 393, 397, 401, 414, 423, 424, 426, 427, 429, 511, 512, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 529, 547, 549, 550, 563, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 609, 611, 616, 619, 620, 621, 622, 623, 669, 670, 671, 672, 673, 828, 835, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 974, 988], "y_new": 55, "declar": [55, 219, 351, 368, 369, 373, 380, 424, 427, 439, 451, 452, 458, 671, 675, 1011, 1015], "membership": [55, 381, 389, 391, 392, 491, 492, 493, 494, 495, 499, 502, 977], "inductive_learn": 55, "probable_clust": 55, "response_method": [55, 112, 125, 130, 180, 189, 206, 260, 280, 285, 288, 304, 323, 324, 346, 612, 613, 614, 679, 681, 683], "plot_inductive_clust": [55, 67], "meant": [56, 146, 363, 369, 376, 454, 473, 658, 825, 928, 929, 952, 966, 968, 972, 1005], "unintuit": 56, "possibli": [56, 85, 146, 197, 212, 341, 365, 367, 375, 386, 392, 399, 400, 431, 433, 570, 814, 815, 816, 817, 818, 883, 884, 886, 887, 888, 889, 951, 954, 959, 965, 972, 1019], "undesir": [56, 150, 402], "phil": [56, 1009], "roth": [56, 1009, 1012, 1019], "mr": [56, 312, 1005, 1008, 1018], "isotrop": [56, 60, 100, 151, 153, 218, 220, 392, 394, 402, 492, 499, 512, 596, 600, 601, 603, 604], "spheric": [56, 84, 125, 220, 244, 246, 247, 290, 364, 744, 775, 776, 958, 961, 965, 982], "anisotrop": [56, 151, 402, 598, 600, 603], "ellipt": [56, 958], "60834549": 56, "63667341": 56, "40887718": 56, "85253229": 56, "x_vari": 56, "y_vari": 56, "unequ": [56, 1012], "x_filter": 56, "unevenli": [56, 197, 252], "y_filter": 56, "set_i": 56, "scenario": [56, 69, 149, 173, 260, 351, 374, 396, 399, 517, 523, 525, 526, 956, 962, 972, 1014], "appropri": [56, 103, 154, 167, 266, 335, 345, 351, 366, 368, 369, 375, 380, 391, 392, 396, 398, 399, 403, 425, 430, 437, 469, 470, 471, 476, 480, 481, 482, 484, 485, 490, 557, 563, 572, 573, 576, 577, 579, 580, 581, 653, 655, 668, 690, 821, 822, 823, 825, 827, 829, 830, 831, 946, 958, 961, 962, 972, 1008, 1011, 1017, 1020], "criteria": [56, 164, 175, 186, 205, 216, 247, 257, 375, 392, 401, 446, 462, 463, 464, 481, 537, 538, 539, 540, 544, 545, 627, 633, 637, 639, 640, 652, 673, 840, 859, 878, 879, 886, 887, 888, 889, 952, 961, 966, 976, 996, 1007, 1012, 1015], "knowledg": [56, 117, 167, 214, 235, 257, 363, 368, 379, 380, 392, 396, 399, 403, 425, 491, 535, 536, 543, 701, 716, 720, 763, 808, 962, 963, 974, 997], "consequ": [56, 103, 215, 257, 258, 299, 324, 351, 397, 399, 541, 542, 546, 636, 637, 952, 958, 962, 978, 1013, 1015, 1020], "likelihood": [56, 76, 78, 79, 80, 82, 103, 149, 150, 151, 153, 154, 155, 156, 158, 164, 185, 215, 246, 250, 257, 263, 273, 296, 299, 369, 380, 390, 394, 397, 399, 402, 418, 449, 450, 451, 452, 453, 454, 455, 456, 457, 495, 512, 516, 521, 529, 530, 531, 591, 592, 626, 639, 693, 721, 775, 776, 777, 802, 805, 824, 835, 855, 866, 880, 881, 883, 884, 958, 961, 964, 972, 977, 1007, 1008, 1013, 1019], "inertia": [56, 57, 60, 341, 392, 424, 427, 429, 432, 439, 440, 442, 443, 1015], "common_param": [56, 122, 168, 232, 259, 260], "unexpect": [56, 351, 368, 372, 375, 386, 515, 677, 962, 977, 1006, 1012, 1013, 1016, 1018], "suffic": [56, 57, 369, 997], "detail": [56, 111, 113, 116, 118, 123, 129, 168, 185, 186, 223, 228, 231, 232, 237, 239, 248, 255, 264, 283, 284, 307, 308, 309, 310, 311, 312, 345, 347, 348, 351, 355, 356, 357, 360, 361, 362, 363, 366, 368, 369, 371, 372, 373, 375, 378, 379, 380, 381, 383, 386, 391, 392, 395, 396, 397, 399, 401, 402, 403, 414, 415, 418, 424, 425, 427, 428, 430, 432, 437, 438, 439, 441, 442, 444, 446, 447, 448, 452, 476, 504, 511, 515, 516, 517, 519, 521, 522, 523, 524, 525, 526, 528, 529, 535, 536, 537, 538, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 575, 583, 591, 595, 600, 603, 612, 613, 615, 620, 626, 628, 632, 634, 636, 637, 638, 639, 640, 642, 644, 646, 647, 649, 653, 655, 657, 659, 660, 668, 669, 670, 671, 672, 673, 674, 675, 676, 682, 694, 754, 758, 759, 760, 761, 776, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 812, 817, 821, 822, 824, 825, 827, 829, 830, 832, 833, 838, 841, 843, 844, 856, 867, 873, 874, 876, 880, 883, 886, 887, 888, 889, 909, 928, 951, 952, 956, 960, 961, 962, 963, 965, 966, 968, 975, 984, 985, 986, 988, 994, 997, 999, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "propos": [56, 77, 78, 277, 363, 368, 369, 378, 380, 392, 394, 399, 404, 405, 430, 455, 515, 588, 589, 657, 658, 659, 836, 837, 958, 961, 965, 976, 980, 1011], "constraint": [56, 66, 95, 108, 133, 164, 192, 252, 294, 295, 296, 308, 368, 378, 397, 400, 467, 488, 489, 541, 542, 616, 795, 796, 931, 951, 953, 958, 959, 976, 1008, 1011, 1012, 1015, 1017, 1019], "inflat": [56, 166, 167, 169, 392, 396, 962], "allevi": [56, 176, 392, 964], "fastest": [56, 255, 342, 427, 651, 653, 655, 668, 914, 915, 961], "lost": [56, 81, 363, 378, 959, 962], "restart": [56, 370, 375, 427, 511, 517, 518, 523, 525, 526, 591, 592, 959, 1017], "163": [56, 67, 287, 291, 365, 970], "plot_kmeans_assumpt": [56, 67], "judg": [57, 203, 392, 992], "definit": [57, 80, 185, 197, 264, 277, 341, 368, 369, 380, 382, 392, 394, 395, 397, 507, 509, 515, 592, 609, 673, 689, 699, 708, 738, 775, 776, 951, 954, 956, 958, 960, 962, 965, 976, 981, 999, 1008, 1012, 1019], "shorthand": [57, 380, 393, 447, 541, 542, 840, 841, 1007], "homo": 57, "compl": 57, "mea": 57, "context": [57, 235, 239, 277, 355, 356, 362, 367, 379, 380, 392, 393, 398, 399, 400, 402, 403, 418, 425, 428, 430, 432, 437, 438, 441, 444, 447, 448, 452, 511, 515, 516, 517, 519, 522, 523, 524, 525, 526, 528, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 575, 583, 591, 607, 608, 611, 613, 615, 620, 628, 632, 634, 636, 638, 639, 640, 642, 644, 646, 647, 649, 657, 660, 669, 670, 671, 672, 673, 674, 675, 754, 758, 761, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 812, 821, 822, 825, 827, 829, 830, 832, 833, 838, 841, 873, 874, 876, 878, 879, 880, 881, 882, 883, 884, 952, 958, 962, 968, 972, 976, 983, 986, 995, 1004, 1011, 1012, 1017], "n_digit": 57, "1797": [57, 88, 255, 296, 315, 365, 426, 482, 512, 513, 514, 515, 580, 581, 669, 670, 671, 672, 965, 994], "bench_k_mean": 57, "tabl": [57, 215, 257, 368, 371, 376, 392, 400, 563, 639, 661, 777, 791, 816, 927, 958, 962, 963, 968, 982, 1005], "fit_tim": [57, 119, 186, 205, 259, 396, 802, 803], "inertia_": [57, 60, 63, 424, 427, 429, 1015], "clustering_metr": 57, "sample_s": [57, 231, 341, 771], "formatter_result": 57, "determinist": [57, 122, 356, 364, 369, 380, 392, 424, 427, 429, 431, 432, 433, 438, 439, 442, 531, 539, 540, 544, 545, 564, 565, 672, 676, 788, 789, 835, 886, 887, 954, 958, 1005, 1008, 1010, 1012, 1013, 1016, 1019], "ttime": 57, "tinertia": 57, "thomo": 57, "tcompl": 57, "tv": 57, "tari": 57, "tami": 57, "tsilhouett": 57, "__________________________________________________________________________________": 57, "69662": 57, "680": 57, "719": [57, 342], "699": [57, 67, 341], "570": [57, 153, 159, 365, 995], "695": [57, 255], "181": [57, 146, 296, 373], "029": [57, 149, 341, 970], "69707": 57, "675": [57, 149], "716": [57, 122, 133, 493], "694": 57, "560": [57, 197, 497, 498], "691": [57, 702], "174": [57, 121, 296, 373, 565], "012": [57, 143, 147, 170, 173, 205, 216], "72686": 57, "636": [57, 373], "658": [57, 85], "647": [57, 334, 338], "521": [57, 144, 147], "643": [57, 255], "reduced_data": 57, "mesh": [57, 118, 127, 151, 231, 285, 293, 301, 320, 323], "169": [57, 267, 273, 296], "mark": [57, 91, 141, 162, 261, 268, 360, 368, 369, 371, 375, 376, 380, 392, 515, 588, 589, 592, 613, 639, 832, 833, 873, 874, 891, 905, 910, 915, 958, 986, 999, 1004, 1005, 1010, 1012, 1013], "plot_kmeans_digit": [57, 67], "kmeans_plusplu": [58, 392, 1016], "4000": [58, 124, 245], "centers_init": 58, "4eacc5": [58, 63], "ff9c34": [58, 63], "4e9a06": [58, 63], "cluster_data": 58, "plot_kmeans_plusplu": [58, 67], "wrong": [59, 197, 283, 340, 351, 365, 368, 369, 400, 484, 706, 736, 771, 962, 968, 977, 1007, 1009, 1011, 1012, 1013, 1014, 1017], "wide": [59, 60, 113, 230, 300, 378, 392, 397, 400, 951, 958, 982, 986, 997, 1004, 1006], "ambival": 59, "thick": [59, 287, 965], "ow": 59, "7049787496083262": 59, "5882004012129721": 59, "6505186632729437": 59, "5662344175321901": 59, "4358297989156284": 59, "silhouette_sampl": [59, 771, 1008, 1010, 1012], "distinct": [59, 257, 317, 340, 342, 363, 369, 372, 380, 396, 399, 400, 570, 778, 787, 795, 853, 854, 873, 874, 951, 958, 965, 968, 997, 1012], "center_box": [59, 492], "range_n_clust": 59, "set_size_inch": [59, 135, 236], "lie": [59, 84, 145, 167, 231, 299, 317, 325, 327, 397, 399, 587, 827, 829, 830, 831, 956, 959, 962, 972, 977], "insert": [59, 167, 197, 378, 392, 467, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 893], "blank": [59, 372, 952, 978], "demarc": 59, "perspect": [59, 197, 355, 363, 378, 381, 510, 624, 878, 955], "silhouette_avg": 59, "sample_silhouette_valu": 59, "y_lower": [59, 122], "aggreg": [59, 114, 215, 260, 266, 311, 392, 399, 514, 535, 536, 702, 703, 708, 725, 726, 728, 730, 731, 733, 765, 963, 965, 972], "ith_cluster_silhouette_valu": 59, "size_cluster_i": 59, "y_upper": [59, 122], "fill_betweenx": 59, "2nd": [59, 89, 157, 304, 392, 403, 425, 510, 972, 1019], "lw": [59, 77, 78, 80, 99, 104, 105, 191, 198, 200, 203, 207, 214, 221, 245, 252, 267, 272, 282, 299, 317, 334], "fontweight": [59, 192], "bold": [59, 122, 186, 192, 368], "062": [59, 67], "plot_kmeans_silhouette_analysi": [59, 67], "reach": [60, 146, 197, 199, 213, 215, 259, 311, 327, 349, 372, 381, 383, 392, 397, 401, 430, 437, 488, 489, 574, 575, 608, 626, 627, 628, 633, 634, 635, 636, 637, 641, 642, 643, 644, 647, 648, 649, 657, 658, 659, 660, 662, 663, 664, 665, 709, 710, 763, 775, 776, 836, 837, 875, 951, 962, 966, 976, 978, 986, 1015, 1019], "optimum": [60, 155, 167, 173, 270, 397, 452, 958, 961], "stuck": [60, 673, 959], "check_random_st": [60, 213, 220, 229, 234, 369, 376, 380], "trade": [60, 77, 169, 256, 258, 259, 327, 340, 391, 392, 394, 533, 534, 539, 540, 615, 637, 673, 777, 780, 781, 791, 802, 959, 966, 974, 976, 977, 983], "n_init_rang": 60, "n_samples_per_cent": 60, "make_data": 60, "n_clusters_tru": 60, "init_s": [60, 341, 429], "factori": [60, 257, 400, 722, 932, 962], "empti": [60, 69, 105, 209, 318, 355, 363, 369, 371, 392, 404, 463, 513, 541, 542, 611, 612, 788, 844, 885, 893, 898, 899, 905, 952, 977, 995, 1006, 1008, 1012, 1013, 1015, 1016, 1018, 1019], "run_id": 60, "km": [60, 311, 341], "my_memb": [60, 62, 63], "268": [60, 67], "plot_kmeans_stability_low_dim_dens": [60, 67], "fast": [61, 173, 186, 212, 213, 231, 232, 300, 342, 355, 363, 368, 376, 392, 394, 396, 397, 399, 400, 402, 404, 427, 449, 454, 488, 512, 513, 515, 518, 520, 524, 527, 546, 569, 570, 572, 613, 614, 621, 639, 640, 653, 655, 668, 680, 777, 791, 800, 801, 802, 811, 812, 819, 820, 824, 835, 915, 931, 954, 958, 961, 964, 965, 967, 968, 978, 982, 986, 997, 1004, 1005, 1010, 1011, 1014, 1015], "globular": [61, 392], "cleanli": [61, 1004], "plot_linkage_comparison": [61, 67], "dorin": [62, 428], "comaniciu": [62, 392, 428], "meer": [62, 392, 428], "ieee": [62, 78, 80, 365, 392, 394, 401, 405, 428, 455, 514, 543, 645, 666, 667, 705, 749, 958, 962, 968], "transact": [62, 365, 392, 394, 403, 405, 425, 428, 455, 514, 518, 520, 527, 543, 625, 645, 666, 667, 705, 706, 736, 749, 958, 962], "intellig": [62, 340, 365, 392, 399, 428, 535, 536, 619, 677, 705, 809, 836, 837, 963, 974, 983, 986], "2002": [62, 390, 392, 399, 418, 428, 574, 575, 706, 736, 826, 873, 954, 962], "603": [62, 158, 159, 263, 273, 428], "619": [62, 260, 273, 428], "labels_uniqu": 62, "425": [62, 67, 73, 75, 219, 596], "plot_mean_shift": [62, 67, 441], "3000": [63, 110, 221, 870, 871], "k_mean": [63, 376, 380, 996, 1012], "t_batch": 63, "pairwis": [63, 166, 167, 230, 266, 307, 311, 312, 340, 355, 360, 369, 380, 392, 397, 402, 438, 441, 442, 448, 467, 488, 489, 515, 541, 542, 601, 619, 620, 621, 622, 623, 624, 669, 671, 673, 675, 677, 680, 758, 761, 768, 770, 771, 807, 823, 825, 827, 831, 845, 876, 962, 965, 974, 977, 999, 1004, 1005, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1020], "k_means_cluster_cent": 63, "mbk_means_cluster_cent": 63, "k_means_label": 63, "mbk_means_label": 63, "ninertia": 63, "bbbbbb": 63, "plot_mini_batch_kmean": [63, 67], "reachabl": [64, 392, 430, 435, 436, 437, 825, 920], "shane": [64, 1013, 1016, 1019], "grigsbi": 64, "refug": 64, "rocktalu": 64, "cluster_optics_dbscan": [64, 392], "n_points_per_clust": 64, "c1": [64, 119, 157, 229], "c2": [64, 119, 157, 229], "c3": [64, 119], "c4": [64, 984, 999], "c5": [64, 984, 999], "c6": 64, "clust": [64, 430, 437], "labels_050": 64, "reachability_": [64, 392, 430, 435, 436, 437], "core_dist": [64, 435], "core_distances_": [64, 430, 435, 437], "ordering_": [64, 392, 430, 435, 436, 437], "labels_200": 64, "ax3": [64, 318], "ax4": 64, "klass": 64, "xk": [64, 530], "rk": 64, "full_lik": 64, "epsilon": [64, 179, 221, 232, 334, 397, 435, 624, 630, 648, 657, 659, 726, 836, 837, 879, 881, 884, 955, 958, 962, 966, 976, 977, 995, 1004], "noptic": 64, "ndbscan": 64, "172": [64, 67, 373, 473, 474, 630, 958], "plot_opt": [64, 67], "tri": [65, 104, 218, 286, 356, 369, 372, 378, 381, 390, 399, 429, 431, 433, 612, 613, 614, 651, 673, 679, 681, 683, 791, 930, 967, 985, 988, 1006, 1012, 1016], "intens": [65, 98, 277, 365, 397, 424, 427, 439, 588, 589, 613, 614, 779, 951, 969, 986, 1012], "weakli": 65, "outlin": [65, 118, 368, 369, 380, 381, 382, 951, 999], "center1": 65, "center2": 65, "center3": 65, "center4": 65, "radius1": 65, "radius2": 65, "radius3": 65, "radius4": 65, "circle1": 65, "circle2": 65, "circle3": 65, "circle4": 65, "label_im": 65, "cleaner": 65, "512": [65, 67, 196], "plot_segmentation_toi": [65, 67], "swiss": [66, 164, 217, 224, 392, 510, 673, 674, 1018], "roll": [66, 164, 217, 224, 370, 392, 510, 673, 674, 909, 986, 1014, 1019], "sole": [66, 378, 392], "respect": [66, 100, 114, 118, 126, 157, 173, 176, 186, 199, 211, 214, 218, 220, 227, 230, 232, 247, 266, 283, 284, 296, 304, 311, 324, 355, 356, 363, 364, 368, 390, 392, 395, 397, 399, 400, 402, 444, 447, 450, 451, 452, 453, 454, 455, 456, 514, 520, 521, 527, 533, 541, 542, 578, 591, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 617, 624, 652, 671, 675, 693, 708, 762, 765, 775, 776, 815, 825, 836, 837, 890, 892, 951, 955, 956, 958, 959, 962, 965, 966, 967, 968, 972, 977, 986, 1007, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "oppos": [66, 368, 371, 388, 392, 874, 965, 977, 988, 1004], "make_swiss_rol": [66, 222, 1018], "thinner": 66, "fig1": 66, "set_posit": [66, 101, 102, 208, 299], "jet": 66, "fig2": 66, "121": [66, 91, 92, 112, 162, 201, 231, 650, 972], "354": [66, 67, 341], "plot_ward_structured_vs_unstructur": [66, 67], "38": [67, 188, 196, 251, 266, 282, 399, 613, 962, 972, 1004, 1005, 1006], "auto_examples_clust": 67, "chain": [68, 75, 164, 274, 276, 277, 351, 358, 360, 378, 380, 391, 402, 476, 482, 521, 592, 608, 639, 718, 777, 805, 808, 810, 811, 812, 813, 839, 840, 859, 951, 952, 963, 967, 979, 982, 986, 997, 999], "raster": 69, "caption": 69, "serv": [69, 99, 155, 260, 393, 526, 531, 619, 954, 1018], "matt": [69, 1007, 1008, 1009, 1014, 1015], "terri": [69, 1008], "truncatedsvd": [69, 127, 219, 341, 397, 514, 515, 519, 520, 521, 673, 838, 841, 959, 1006, 1011, 1015, 1016, 1018], "dictvector": [69, 164, 339, 341, 343, 363, 400, 468, 563, 569, 570, 571, 572, 852, 1004, 1005, 1008, 1014, 1016, 1017, 1020], "compris": [69, 122, 255, 340, 341, 342, 363, 378, 397, 399, 495, 784, 959], "subject": [69, 126, 248, 260, 340, 363, 368, 369, 371, 378, 380, 381, 390, 391, 394, 396, 397, 475, 639, 640, 666, 842, 878, 879, 930, 932, 953, 958, 977, 981, 997, 1013, 1014, 1017, 1019], "mccall": 69, "mksol": 69, "dseg": 69, "ti": [69, 197, 244, 247, 255, 336, 355, 580, 581, 616, 701, 706, 736, 775, 776, 880, 883, 886, 961, 962, 977, 1005, 1007, 1008, 1012, 1014, 1018, 1019], "fred": [69, 1004, 1017], "575": [69, 197], "3539": 69, "1993apr6": 69, "131900": 69, "8407": 69, "perhap": [69, 118, 365, 367, 375, 380, 398, 983], "militari": 69, "slug": 69, "school": [69, 365, 392, 768, 962], "physic": [69, 356, 485, 927, 958], "teacher": 69, "ex": [69, 366, 383, 1008, 1009], "fighter": 69, "jock": 69, "wasn": [69, 1013], "poundal": 69, "flink": 69, "funni": 69, "propon": 69, "si": 69, "insist": 69, "safeti": [69, 378, 393, 928, 983, 1014], "ball": [69, 282, 290, 392, 398, 428, 673, 819, 820, 824, 827, 829, 830, 831, 1004, 1006, 1009, 1015], "world": [69, 73, 167, 222, 235, 340, 355, 358, 361, 365, 392, 397, 400, 952, 962, 964, 981, 983, 986, 991, 999, 1004], "mari": [69, 1012, 1013, 1014, 1015, 1018], "shafer": 69, "nasa": [69, 340, 341, 365], "am": [69, 74, 79, 129, 168, 340, 372, 394, 454, 473, 1011], "dryden": 69, "stateless": [69, 341, 357, 369, 380, 400, 563, 570, 619, 842, 843, 851, 972, 1020], "subject_body_extractor": 69, "startswith": [69, 219, 290], "subject_body_transform": 69, "sentenc": [69, 340, 342, 363, 381, 400], "text_stat": 69, "num_sent": 69, "text_stats_transform": 69, "subjectbodyextractor": 69, "subjectbodi": 69, "union": [69, 167, 393, 476, 718, 734, 838, 1011], "body_bow": 69, "pull": [69, 310, 356, 366, 370, 380, 381, 1014], "body_stat": 69, "transformer_weight": [69, 444, 447, 838, 1009, 1016], "dual": [69, 71, 335, 340, 400, 401, 451, 452, 458, 592, 627, 628, 633, 634, 639, 640, 641, 642, 643, 644, 662, 665, 819, 820, 878, 879, 880, 883, 977, 1006, 1015, 1018], "396": [69, 341, 365, 997], "394": [69, 158], "756": [69, 75, 232, 240], "plot_column_transform": [69, 75], "imput": [70, 129, 163, 169, 228, 237, 239, 308, 311, 358, 360, 371, 379, 380, 393, 399, 470, 481, 545, 561, 620, 626, 653, 801, 822, 840, 897, 899, 982, 983, 999, 1006, 1007], "miss": [70, 129, 163, 169, 228, 237, 257, 277, 308, 312, 351, 355, 358, 360, 363, 365, 367, 368, 369, 371, 372, 380, 391, 392, 393, 394, 452, 470, 476, 478, 481, 541, 542, 545, 546, 608, 609, 610, 611, 620, 626, 653, 671, 675, 707, 749, 801, 822, 840, 848, 849, 853, 855, 856, 859, 863, 866, 867, 869, 958, 959, 962, 978, 982, 983, 986, 999, 1006, 1008, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "chi": [70, 79, 110, 303, 360, 401, 499, 573, 576, 577, 579, 580, 581, 585, 586, 587, 590, 619, 620, 621, 622, 623, 738, 739, 999, 1004, 1009, 1010], "dispatch": [70, 358, 388, 448, 777, 791, 800, 801, 802, 876, 928, 929, 992, 999, 1019], "processor": [70, 129, 167, 358, 403, 418, 425, 428, 430, 432, 437, 438, 441, 444, 447, 452, 511, 515, 516, 517, 519, 522, 523, 525, 526, 528, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 575, 583, 591, 613, 615, 620, 628, 632, 634, 636, 638, 639, 640, 642, 644, 646, 647, 649, 657, 660, 669, 670, 671, 672, 673, 674, 675, 754, 758, 761, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 821, 822, 825, 827, 829, 830, 832, 833, 838, 841, 873, 874], "pedro": [70, 1005, 1007, 1008, 1012], "simpleimput": [70, 129, 161, 162, 169, 228, 237, 239, 308, 311, 351, 380, 608, 609, 610, 952, 972, 1012, 1013, 1015, 1016, 1018, 1019, 1020], "chi2": [70, 400, 401, 432, 562, 573, 576, 577, 579, 580, 581, 586, 587, 590, 601, 619, 620, 621, 622, 623, 624, 739, 745, 754, 1004, 1011, 1018], "40945": 70, "titan": [70, 169, 239, 307, 311, 312], "surviv": [70, 169, 951, 982], "ag": [70, 146, 167, 169, 185, 186, 197, 215, 236, 237, 239, 299, 310, 311, 312, 363, 365, 986, 988, 995], "fare": [70, 169, 239, 311, 312, 1008, 1009], "embark": [70, 169, 239, 307, 311, 312], "sex": [70, 146, 167, 169, 185, 186, 239, 312, 365, 970, 995], "femal": [70, 167, 312, 372, 852, 853, 972], "male": [70, 167, 312, 372, 852, 853, 972], "pclass": [70, 169, 239, 307, 311, 312], "numeric_featur": [70, 311], "numeric_transform": [70, 311], "categorical_transform": 70, "selector": [70, 142, 143, 375, 400, 446, 562, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 1006, 1014, 1016, 1020], "preprocessor": [70, 129, 167, 197, 228, 237, 308, 310, 311, 312, 393, 400, 569, 570, 572, 982, 997, 1004, 1007, 1012, 1014], "798": [70, 158, 399], "lt": [70, 71, 115, 129, 167, 247, 255, 269, 366, 368], "0x7fead9ac3940": 70, "pipelinepipelin": [70, 71, 115, 129, 143, 167, 169, 227, 228, 236, 237, 239, 258, 264, 308, 311], "columntransformercolumntransform": [70, 129, 167, 168, 169, 228, 237, 308, 311], "simpleimputersimpleimput": [70, 129, 169, 228, 237, 308, 311], "standardscalerstandardscal": [70, 129, 167, 227, 228, 236, 237, 239, 264, 308, 311], "onehotencoderonehotencod": [70, 115, 129, 167, 168, 228, 237, 308, 311], "selectpercentileselectpercentil": [70, 239], "logisticregressionlogisticregress": [70, 115, 227, 228, 237, 239, 296, 308, 311], "make_column_selector": [70, 119, 129, 393, 444, 447, 1014], "subset_featur": 70, "Then": [70, 109, 111, 115, 117, 129, 132, 143, 167, 173, 185, 197, 222, 227, 238, 259, 260, 340, 362, 368, 371, 373, 375, 383, 389, 390, 392, 395, 397, 400, 401, 550, 574, 700, 736, 777, 791, 839, 952, 961, 962, 968, 977, 997, 1013], "int64index": [70, 168], "1047": 70, "1118": 70, "684": [70, 79, 204, 216], "1045": 70, "841": [70, 236, 240], "1046": [70, 247], "kb": [70, 167, 168], "numerical_transform": 70, "yourself": [70, 367, 368, 372, 375, 966], "dtype_exclud": [70, 446], "dtype_includ": [70, 119, 129, 393, 446], "_column_transform": [70, 129], "0x7fea8dd92310": 70, "0x7fea8dd92100": 70, "exactli": [70, 166, 176, 190, 197, 248, 265, 300, 340, 368, 369, 389, 392, 396, 397, 400, 405, 433, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 495, 506, 571, 572, 596, 657, 659, 684, 686, 743, 778, 795, 800, 954, 958, 959, 960, 962, 963, 978, 996, 997, 1004, 1010, 1011, 1017], "hyperparamet": [70, 109, 149, 150, 156, 157, 161, 164, 168, 176, 186, 211, 215, 226, 250, 255, 260, 262, 273, 279, 296, 340, 369, 380, 396, 397, 399, 402, 482, 515, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 624, 634, 640, 646, 654, 657, 708, 765, 777, 791, 951, 956, 957, 958, 961, 962, 964, 966, 968, 976, 983, 997, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1016], "cartesian": [70, 389, 614, 965, 1019], "preprocessor__num__imputer__strategi": 70, "preprocessor__cat__selector__percentil": 70, "classifier__c": 70, "search_cv": 70, "param_distribut": [70, 149, 258, 265, 269, 309, 379, 781, 789, 791], "randomizedsearchcvrandomizedsearchcv": 70, "trigger": [70, 71, 371, 393, 836, 837, 839, 840, 898, 899, 915, 958, 997, 1012, 1018, 1019], "best_params_": [70, 72, 122, 149, 232, 247, 255, 261, 309, 327, 379, 777, 780, 781, 791, 951, 993, 997], "best_score_": [70, 72, 232, 258, 261, 262, 327, 654, 656, 777, 780, 781, 791, 992, 993, 997, 1015], "cv_results_": [70, 71, 72, 81, 135, 145, 247, 255, 256, 257, 258, 261, 265, 268, 269, 279, 327, 452, 575, 777, 780, 781, 791, 997, 1010, 1014, 1016, 1017], "sort_valu": [70, 169, 239, 247, 257, 268], "mean_test_scor": [70, 71, 72, 81, 135, 145, 247, 256, 257, 258, 265, 268, 269, 279, 327, 452, 575, 777, 791, 951, 1010, 1017], "ascend": [70, 169, 399, 430, 436, 608, 616, 890, 891, 892, 976, 1014, 1020], "std_test_scor": [70, 72, 135, 145, 256, 257, 258, 265, 279, 452, 575, 777, 791, 1010, 1017], "param_preprocessor__num__imputer__strategi": 70, "param_preprocessor__cat__selector__percentil": 70, "param_classifier__c": 70, "786015": 70, "031020": 70, "785063": 70, "030498": 70, "783149": 70, "030462": 70, "311": [70, 75], "plot_column_transformer_mixed_typ": [70, 75], "instanti": [71, 152, 310, 370, 399, 430, 547, 548, 583, 611, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 905, 968, 994, 1004, 1012, 1016], "memoiz": [71, 363, 380], "costli": [71, 77, 116, 161, 258, 336, 356, 373, 392, 424, 608, 785, 787, 870, 871, 915, 962, 965, 974, 983], "mcgibbon": [71, 1006, 1007, 1010], "selectkbest": [71, 73, 142, 143, 311, 351, 368, 393, 401, 562, 573, 576, 577, 579, 581, 587, 951, 1005, 1010, 1020], "mutual_info_classif": [71, 401, 573, 576, 577, 580, 581, 1010, 1016, 1019], "pipe": [71, 72, 119, 237, 256, 309, 310, 379, 393, 400, 571, 839, 863, 864, 866, 867, 868, 869, 951, 972, 993], "reduce_dim": [71, 237, 256, 393], "popul": [71, 77, 79, 167, 197, 260, 299, 363, 376, 380, 394, 421, 693, 699, 821, 822, 823, 825, 827, 829, 830, 831, 931, 962, 968, 972, 978], "n_features_opt": 71, "c_option": 71, "iterated_pow": [71, 512, 515, 521, 1010], "reduce_dim__n_compon": [71, 256, 393], "classify__c": 71, "reduce_dim__k": 71, "reducer_label": 71, "kbest": [71, 573], "0x7fead9a5d4c0": 71, "gridsearchcvgridsearchcv": [71, 237, 247, 255, 257], "minmaxscalerminmaxscal": 71, "passthroughpassthroughlinearsvclinearsvc": 71, "mean_scor": [71, 266, 269, 341, 1017], "alphabet": [71, 380, 721], "eas": [71, 247, 304, 368, 373, 958, 976, 982, 983, 986, 1015, 1016, 1018], "sometim": [71, 129, 166, 257, 295, 341, 351, 356, 357, 368, 369, 371, 373, 379, 380, 383, 392, 394, 397, 399, 400, 429, 514, 515, 518, 520, 521, 844, 845, 846, 893, 957, 958, 959, 962, 967, 972, 973, 977, 988, 996, 1001, 1005, 1010, 1011, 1012, 1013, 1014, 1015, 1016], "worthwhil": [71, 380], "slower": [71, 98, 119, 161, 232, 266, 342, 399, 400, 401, 431, 433, 518, 520, 527, 535, 536, 538, 543, 545, 569, 570, 572, 612, 613, 614, 624, 640, 653, 655, 668, 673, 685, 807, 811, 812, 955, 959, 960, 961, 963, 965, 978, 997, 1008, 1015], "constructor": [71, 229, 356, 369, 380, 391, 393, 400, 444, 447, 529, 530, 535, 547, 548, 549, 550, 562, 563, 569, 570, 578, 649, 657, 658, 821, 822, 823, 825, 826, 827, 829, 830, 831, 838, 839, 840, 841, 930, 951, 963, 972, 977, 983, 988, 1004, 1005, 1007, 1008, 1009, 1011, 1014, 1015, 1016, 1017, 1018, 1019], "folder": [71, 363, 366, 368, 371, 375, 383, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 483, 965, 997], "cached_pip": [71, 393], "delet": [71, 316, 318, 371, 372, 449, 454, 466], "exit": [71, 277, 371, 375, 448], "benefici": [71, 73, 77, 95, 127, 299, 300, 366, 959], "225": [71, 75, 399], "plot_compare_reduct": [71, 75], "logistic__c": [72, 993], "046415888336127774": 72, "pca__n_compon": [72, 993], "truncat": [72, 127, 219, 376, 514, 515, 519, 520, 521, 524, 657, 659, 706, 736, 775, 828, 891, 915, 951, 961, 962, 976, 993, 997, 998, 999, 1010, 1012], "x_digit": [72, 137, 294, 393, 992, 993, 995], "y_digit": [72, 137, 294, 393, 992, 993, 995], "__": [72, 258, 380, 393, 406, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 775, 776, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 951, 993, 1012, 1013], "spectrum": [72, 504, 524, 676, 915, 986, 993, 1012], "ax0": [72, 74, 197, 229, 341, 993], "n_components_": [72, 103, 380, 422, 426, 514, 518, 519, 520, 521, 522, 523, 870, 871, 993, 1013, 1015], "explained_variance_ratio_": [72, 104, 341, 397, 514, 521, 524, 529, 993, 1007, 1010], "named_step": [72, 85, 393, 574, 575, 578, 839, 840, 878, 879, 958, 993, 1011, 1013], "components_col": 72, "param_pca__n_compon": 72, "best_clf": 72, "nlargest": 72, "yerr": [72, 78, 80, 116, 119, 145, 279, 318], "val": [72, 209, 257, 917], "092": [72, 75], "plot_digits_pip": [72, 75], "candid": [73, 247, 255, 258, 265, 309, 357, 368, 371, 392, 399, 428, 430, 777, 780, 781, 789, 791, 958, 965, 978, 1010], "features__pca__n_compon": 73, "features__univ_select__k": 73, "svm__c": 73, "867": [73, 212, 216], "967": [73, 962, 966], "transformer_list": [73, 393, 838, 841, 952, 1015, 1016], "univ_select": 73, "amuel": [73, 114, 188, 231, 317, 335], "ai": [73, 114, 188, 231, 317, 335, 396], "bonn": [73, 114, 188, 231, 317, 335], "mayb": [73, 295, 380, 400, 977, 983], "combined_featur": 73, "x_featur": [73, 621, 622, 623, 954], "grid_search": [73, 237, 247, 255, 265, 393, 1006, 1007, 1008, 1009, 1010, 1011], "plot_feature_union": [73, 75], "overview": [74, 370, 379, 380, 714, 723, 964, 976, 998, 999], "transformedtargetregressor": [74, 167, 197, 378, 393, 574, 575, 578, 1012, 1014, 1017], "hous": [74, 129, 161, 162, 299, 309, 361, 470, 999], "translat": [74, 369, 402, 507, 595, 848, 849, 864, 959, 962, 980, 986], "lowest": [74, 85, 168, 247, 362, 392, 396, 616, 618, 780, 781, 784, 885, 886, 959, 962, 978, 1019], "logarithm": [74, 129, 167, 230, 258, 327, 380, 401, 440, 571, 639, 640, 657, 685, 706, 721, 731, 735, 736, 737, 783, 819, 820, 913, 978, 992, 1011], "log1p": [74, 229, 843, 962, 972], "expm1": 74, "y_tran": 74, "At": [74, 202, 269, 315, 318, 355, 356, 371, 381, 383, 388, 395, 399, 418, 421, 445, 569, 570, 572, 583, 807, 809, 846, 926, 951, 958, 961, 963, 967, 976, 986], "meda": [74, 167, 962], "median_absolute_error": [74, 167, 962, 1008, 1014, 1016], "r2_score": [74, 166, 181, 192, 193, 399, 413, 445, 462, 463, 464, 534, 536, 538, 540, 542, 545, 548, 550, 592, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 659, 660, 704, 708, 812, 813, 822, 830, 837, 879, 881, 884, 887, 889, 951, 962, 1005, 1007, 1013, 1017, 1018], "compute_scor": [74, 103, 176, 177, 625, 626, 1013], "r2": [74, 111, 129, 166, 168, 192, 232, 369, 393, 399, 534, 550, 654, 802, 837, 962, 970, 1013], "predictionerrordisplai": [74, 129, 167, 253, 312, 962, 1019], "ridge_cv": 74, "y_pred_ridg": 74, "ridge_cv_with_trans_target": 74, "inverse_func": [74, 167, 393, 445, 843, 972, 1012], "y_pred_ridge_with_trans_target": 74, "actual_vs_predict": [74, 129, 167, 253, 312, 682], "scatter_kwarg": [74, 129, 167, 682], "sell": 74, "quantile_transform": [74, 856, 866, 972, 1011, 1012, 1013], "house_pric": [74, 129], "select_dtyp": [74, 119, 312, 446], "nan": [74, 119, 161, 162, 167, 215, 237, 252, 260, 307, 312, 355, 360, 369, 376, 380, 399, 448, 476, 535, 536, 537, 541, 542, 544, 574, 575, 578, 584, 587, 590, 608, 609, 610, 611, 616, 693, 695, 702, 703, 704, 708, 749, 758, 765, 777, 780, 781, 783, 791, 801, 802, 803, 806, 848, 849, 853, 855, 856, 859, 863, 866, 867, 869, 896, 897, 898, 899, 937, 951, 962, 972, 999, 1007, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019], "inf": [74, 152, 287, 376, 392, 402, 430, 437, 441, 451, 452, 458, 533, 534, 539, 540, 574, 575, 578, 587, 588, 589, 600, 608, 616, 618, 629, 630, 631, 633, 650, 652, 653, 657, 661, 668, 708, 710, 726, 758, 765, 835, 844, 851, 896, 898, 899, 913, 962, 972, 1011, 1013, 1014, 1015, 1016, 1018, 1019], "lotfrontag": 74, "garageyrblt": 74, "masvnrarea": [74, 129], "to_fram": 74, "n_quantil": [74, 168, 303, 856, 867, 1013], "output_distribut": [74, 299, 303, 393, 855, 856, 866, 867, 972], "squeez": [74, 155, 156, 277, 299, 996], "quantiletransform": [74, 168, 303, 393, 445, 855, 867, 952, 972, 1011, 1012, 1013, 1014, 1015, 1020], "weaker": 74, "residu": [74, 193, 199, 253, 413, 445, 462, 463, 464, 532, 534, 536, 538, 540, 542, 545, 548, 550, 592, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 652, 653, 654, 659, 660, 666, 667, 682, 724, 765, 812, 813, 822, 830, 837, 879, 881, 884, 887, 889, 958, 962, 995, 1016, 1017, 1019], "smile": [74, 363, 1018], "residual_vs_predict": [74, 253, 312, 682], "264": [74, 75, 96, 107, 233, 240], "plot_transformed_target": [74, 75, 445], "55": [75, 167, 173, 192, 197, 206, 215, 220, 316, 372, 392, 396, 471, 578, 777, 783, 791, 803, 962, 1004], "074": [75, 255, 341, 342], "auto_examples_compos": 75, "mahalanobi": [76, 82, 164, 392, 394, 430, 437, 449, 450, 451, 452, 453, 454, 455, 456, 680, 758, 759, 760, 826, 956, 968, 1012, 1015, 1016], "ledoitwolf": [76, 78, 82, 103, 164, 394, 449, 450, 454, 455, 456, 457, 777, 1008], "empiricalcovari": [77, 79, 80, 394, 449, 453, 454, 455, 456, 968], "unbias": [77, 390, 394, 397, 418, 530, 637, 653, 655, 668, 958, 992], "shrunk": [77, 103, 299, 405, 453, 455, 456, 459, 460, 461, 529, 956, 976, 998, 999], "base_x_train": 77, "base_x_test": 77, "coloring_matrix": [77, 78], "shrunkcovari": [77, 103, 394, 449, 450, 453, 454, 455], "empirical_covari": [77, 394], "log_likelihood": [77, 591, 592, 775, 776], "span": [77, 122, 231, 254, 363, 400, 529, 617, 777, 780, 962, 996], "negative_loglik": 77, "real_cov": [77, 78, 450, 453, 454, 455, 456], "emp_cov": [77, 79, 81, 458, 461], "loglik_r": 77, "inv": [77, 81, 294], "formula": [77, 78, 389, 392, 394, 405, 453, 455, 496, 497, 498, 571, 624, 627, 628, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 645, 657, 659, 685, 709, 735, 744, 951, 956, 958, 962, 967, 968, 972, 976, 1009, 1011, 1013], "asymptot": [77, 78, 186, 355, 394, 454, 516, 958, 961, 1014], "criterion": [77, 78, 170, 185, 205, 247, 269, 308, 369, 376, 380, 392, 397, 422, 426, 429, 432, 439, 442, 512, 517, 519, 526, 533, 534, 537, 538, 539, 540, 544, 545, 546, 587, 608, 626, 629, 637, 647, 648, 649, 650, 652, 657, 658, 659, 661, 672, 676, 691, 776, 875, 880, 881, 882, 883, 884, 886, 887, 888, 889, 958, 961, 962, 970, 975, 978, 984, 996, 999, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018], "chen": [77, 78, 394, 399, 405, 455, 706, 736, 954, 962, 1007, 1010, 1011, 1012, 1014, 1017, 1018, 1019], "Its": [77, 109, 255, 259, 364, 369, 380, 397, 402, 518, 957, 958, 967, 970, 976, 982, 986, 1007], "tuned_paramet": [77, 135, 255], "loglik_lw": 77, "loglik_oa": 77, "unseen": [77, 120, 143, 186, 205, 270, 283, 357, 360, 369, 379, 380, 392, 396, 825, 856, 867, 953, 962, 968, 970, 972, 978, 988, 1007, 1012, 1016], "loglog": [77, 230], "lik_max": 77, "amax": [77, 120], "lik_min": 77, "amin": 77, "vline": [77, 97, 184, 185, 186, 198, 257, 270, 300], "shrinkage_": [77, 78, 453, 455], "magenta": [77, 124], "purpl": [77, 91, 222], "cyan": [77, 113, 167, 280, 288], "realli": [77, 169, 186, 341, 371, 372, 373, 962, 968, 986, 1018], "interestingli": [77, 146, 972], "outperform": [77, 85, 129, 304, 378, 396, 399, 432, 442, 964], "443": [77, 82], "plot_covariance_estim": [77, 82], "whose": [78, 79, 80, 146, 154, 197, 325, 363, 375, 376, 380, 390, 392, 394, 399, 401, 402, 405, 418, 419, 420, 428, 441, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 495, 514, 518, 520, 521, 524, 527, 529, 552, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 621, 652, 676, 699, 777, 784, 791, 804, 825, 844, 870, 871, 914, 941, 942, 956, 963, 967, 968, 969, 977, 1007, 1012, 1013, 1015, 1018], "inspir": [78, 126, 168, 215, 368, 378, 399, 541, 542, 903, 952, 982, 1013], "mmse": [78, 394, 405, 455], "tran": 78, "octob": [78, 363, 1004, 1011, 1017, 1018], "toeplitz": 78, "choleski": [78, 197, 215, 376, 458, 507, 592, 629, 631, 632, 635, 636, 637, 639, 640, 650, 653, 655, 661, 663, 664, 668, 775, 776, 958, 1007, 1011, 1013, 1016, 1019], "simul": [78, 97, 167, 191, 233, 257, 986], "n_samples_rang": [78, 230], "lw_mse": 78, "oa_ms": 78, "lw_shrinkag": 78, "oa_shrinkag": 78, "error_norm": [78, 80, 449, 450, 451, 452, 453, 454, 455, 456], "darkorang": [78, 99, 104, 105, 198, 208, 221, 243, 244, 245, 248, 264, 266, 272, 280, 282, 288, 289, 317, 347], "plot_lw_vs_oa": [78, 82], "x_i": [79, 114, 141, 167, 198, 310, 335, 392, 397, 398, 399, 402, 595, 596, 600, 603, 604, 606, 814, 815, 818, 953, 954, 958, 964, 965, 966, 972, 976, 977, 978], "d_": [79, 392, 397, 629, 650, 661, 758, 959, 964], "mle": [79, 103, 521, 1012, 1015], "resist": [79, 80, 368], "erron": [79, 80, 397, 958, 1005, 1012, 1016], "breakdown": [79, 80, 214, 660, 958], "n_": [79, 80, 257, 310, 392, 397, 399, 627, 633, 666, 677, 954, 958, 962, 964, 965, 969, 974, 977, 978], "smallest": [79, 80, 197, 277, 345, 363, 392, 394, 401, 420, 507, 521, 611, 635, 636, 637, 663, 664, 671, 675, 676, 777, 780, 781, 791, 796, 978, 1017], "pure": [79, 80, 85, 197, 380, 392, 453, 459, 476, 537, 538, 539, 540, 544, 545, 546, 686, 696, 766, 773, 886, 887, 888, 889, 972], "rousseuw": [79, 80], "rousseeuw": [79, 80, 392, 394, 449, 454, 770, 771, 968], "ass": [79, 80, 394, 454], "1984": [79, 80, 394, 454, 886, 887, 978], "wilson": [79, 365, 1004, 1007], "hilferti": 79, "1931": 79, "proceed": [79, 363, 365, 373, 392, 403, 420, 425, 491, 677, 689, 706, 736, 826, 875, 962, 974, 975, 976], "academi": [79, 826], "688": 79, "n_outlier": [79, 80, 125, 200, 226, 284], "gen_cov": 79, "ey": [79, 80, 244, 248, 327, 363, 514, 521, 530], "outliers_cov": 79, "mincovdet": [79, 80, 394, 449, 450, 453, 455, 456, 968, 1004, 1011], "robust_cov": 79, "nmcd": 79, "nmle": 79, "26253567e": 79, "06695631e": 79, "22747343e": 79, "23773583": 79, "24640578": 79, "51963999": 79, "inlier": [79, 125, 200, 226, 235, 299, 380, 394, 449, 543, 652, 658, 825, 856, 867, 881, 882, 884, 958, 968, 1011, 1012, 1017], "inlier_plot": 79, "outlier_plot": 79, "get_xlim": [79, 192, 202, 299], "zz": 79, "mahal_emp_cov": 79, "emp_cov_contour": 79, "pubu_r": 79, "mahal_robust_cov": 79, "robust_contour": 79, "ylorbr_r": 79, "dist": [79, 219, 230, 371, 449, 450, 451, 452, 453, 454, 455, 456, 680, 743, 749, 819, 820], "borderaxespad": 79, "cubic": [79, 402], "suggest": [79, 98, 113, 116, 167, 170, 257, 327, 355, 367, 368, 374, 380, 396, 397, 399, 449, 454, 545, 626, 804, 956, 958, 959, 967, 977, 997, 1008, 1015, 1018], "emp_mah": 79, "markeredgewidth": [79, 261], "rm": [79, 152, 371, 375, 394], "mahal": 79, "robust_mah": 79, "location_": [79, 80, 449, 450, 451, 452, 453, 454, 455, 456], "285": [79, 82, 316, 704], "plot_mahalanobis_dist": [79, 82], "aim": [80, 162, 285, 317, 357, 363, 366, 368, 380, 386, 392, 394, 400, 428, 680, 958, 962, 965, 972, 977, 982, 988, 996, 1018], "compens": [80, 166, 168, 173, 197, 215, 258, 394, 397], "soon": [80, 380, 995], "5n_": 80, "johanna": 80, "hardin": 80, "rock": 80, "decemb": [80, 154, 363, 645, 666, 667, 1004, 1012, 1014, 1016, 1019], "928": [80, 95, 107, 249, 418], "946": [80, 151, 159], "zoubir": 80, "koivunen": 80, "chakhchoukh": 80, "muma": 80, "signal": [80, 95, 96, 97, 105, 122, 149, 154, 155, 164, 175, 196, 198, 216, 248, 310, 391, 392, 394, 400, 401, 402, 405, 455, 483, 501, 506, 511, 514, 517, 521, 606, 627, 633, 634, 644, 645, 665, 666, 667, 765, 958, 962, 979, 986, 991, 998, 999], "tutori": [80, 135, 136, 137, 138, 186, 199, 215, 257, 358, 368, 373, 375, 379, 386, 392, 432, 442, 672, 977, 995, 1007], "treatment": [80, 166, 362, 397, 449, 454], "concept": [80, 120, 266, 358, 368, 378, 391, 392, 398, 400, 954, 962, 965, 978, 986], "magazin": [80, 401], "29": [80, 150, 154, 188, 197, 214, 223, 312, 316, 365, 366, 383, 384, 385, 399, 539, 540, 671, 675, 761, 775, 831, 958, 959, 976], "range_n_outli": 80, "err_loc_mcd": 80, "err_cov_mcd": 80, "err_loc_emp_ful": 80, "err_cov_emp_ful": 80, "err_loc_emp_pur": 80, "err_cov_emp_pur": 80, "outliers_index": 80, "outliers_offset": 80, "inliers_mask": 80, "pure_x": 80, "pure_loc": 80, "pure_emp_cov": 80, "font_prop": 80, "hat": [80, 105, 253, 257, 282, 310, 366, 390, 394, 398, 399, 953, 958, 959, 962, 964, 966], "_2": [80, 154, 397, 400, 511, 517, 525, 526, 627, 633, 958, 966, 976, 977], "x_size": 80, "plot_robust_vs_empirical_covari": [80, 82], "graphicallasso": [81, 394, 449, 450, 452, 453, 454, 455, 456, 458, 1012], "largest": [81, 97, 199, 365, 392, 394, 397, 420, 424, 507, 521, 537, 538, 539, 540, 544, 545, 569, 690, 775, 776, 796, 817, 886, 887, 888, 889, 915, 959, 962, 972, 977, 978], "invert": [81, 100, 143, 219, 341, 342, 378, 394, 400, 611, 670, 674, 972, 1013], "fairli": [81, 121, 220, 272, 294, 375, 392, 539, 540, 680, 963, 995], "tweak": [81, 396, 928, 961, 997, 1015], "readabl": [81, 258, 310, 372, 373, 375, 386, 514, 1013, 1016, 1017, 1018, 1019], "neighborhood": [81, 164, 218, 278, 291, 365, 380, 392, 397, 403, 425, 430, 437, 482, 484, 495, 521, 529, 609, 677, 805, 821, 822, 825, 827, 828, 829, 830, 831, 833, 839, 840, 859, 959, 968, 984, 999, 1013], "make_sparse_spd_matrix": [81, 509], "prng": 81, "prec": [81, 227, 507, 962], "smallest_coef": [81, 507], "largest_coef": [81, 507], "multivariate_norm": [81, 85, 242, 449, 450, 451, 452, 453, 454, 455, 456], "ledoit_wolf": [81, 394, 1017], "prec_": 81, "lw_cov_": 81, "lw_prec_": 81, "this_cov": 81, "this_prec": 81, "ma": [81, 327, 958, 1010, 1015], "masked_equ": 81, "set_facecolor": [81, 242], "set_axis_bgcolor": 81, "alpha_": [81, 135, 167, 177, 185, 186, 452, 592, 625, 626, 628, 632, 634, 636, 637, 642, 644, 654, 656, 958, 978, 992, 1004, 1011], "plot_sparse_cov": [81, 82], "757": [82, 91, 255, 277, 319, 321, 365], "auto_examples_covari": 82, "cross_decomposit": [83, 84, 85, 164, 233, 358, 1008, 1009, 1011, 1012, 1013], "plscanon": [84, 462, 464, 465, 984, 999, 1008, 1012, 1014, 1016, 1018], "plsregress": [84, 85, 984, 999, 1011, 1014, 1016, 1018], "share": [84, 127, 167, 247, 340, 349, 351, 355, 356, 369, 375, 392, 397, 400, 529, 649, 685, 689, 775, 776, 780, 781, 956, 969, 1004, 1006, 1012, 1014, 1016, 1019], "appar": [84, 964, 986], "scatterplot": [84, 176, 257, 280], "maxim": [84, 85, 95, 106, 122, 176, 247, 248, 258, 262, 266, 267, 287, 304, 309, 327, 345, 349, 365, 380, 389, 392, 395, 397, 401, 402, 529, 591, 592, 625, 626, 629, 650, 660, 661, 701, 777, 780, 781, 791, 848, 854, 863, 956, 958, 962, 965, 967, 977, 992, 995, 1007, 1009, 1014, 1017, 1019], "weak": [84, 109, 120, 123, 215, 263, 396, 537, 538, 539, 544, 545, 546, 611, 965, 986], "var": [84, 85, 101, 113, 146, 177, 257, 365, 401, 622, 626, 880, 881, 882, 883, 884, 962, 1012], "corr": [84, 170, 257], "corrcoef": [84, 106], "plsca": [84, 463], "x_train_r": 84, "y_train_r": 84, "x_test_r": 84, "y_test_r": 84, "221": [84, 127, 1007], "222": [84, 127, 977], "223": [84, 127, 365], "yj": [84, 303], "noiz": 84, "xb": [84, 858], "_pl": 84, "503": [84, 168], "futurewarn": [84, 368, 375, 1011, 1012, 1013, 1015, 1017], "n_target": [84, 380, 395, 462, 463, 464, 465, 504, 536, 592, 624, 627, 628, 631, 632, 633, 634, 635, 637, 638, 641, 642, 643, 644, 645, 646, 652, 653, 654, 655, 656, 662, 663, 664, 665, 666, 667, 668, 963, 1016, 1018], "futur": [84, 154, 198, 238, 310, 368, 369, 371, 378, 380, 381, 386, 396, 400, 476, 514, 611, 616, 930, 932, 962, 963, 977, 978, 986, 1001, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "50210309": 84, "55301008": 84, "72528805": 84, "03429511": 84, "83576671": 84, "74902647": 84, "03916339": 84, "84652988": 84, "78629756": 84, "11231897": 84, "1905275": 84, "33508757": 84, "35433161": 84, "32686504": 84, "39877158": 84, "47827435": 84, "38004088": 84, "35574845": 84, "exce": [84, 275, 308, 402, 423, 495, 583, 630, 639, 1013, 1016, 1018], "214": [84, 86, 150, 402, 565], "plot_compare_cross_decomposit": [84, 86], "pcr": [85, 395], "pl": [85, 201, 365, 395, 462, 463, 464, 465, 1009], "greedili": [85, 146, 396, 401, 440], "despit": [85, 195, 197, 215, 232, 286, 380, 394, 608, 609, 611, 958, 965, 986, 1012, 1013], "suffer": [85, 117, 169, 277, 299, 341, 355, 392, 399, 402, 524, 743, 957, 958, 962, 965, 996, 1013], "mention": [85, 215, 308, 351, 355, 368, 371, 372, 378, 380, 677, 870, 871, 951, 956, 958, 983, 986, 997, 1011, 1012, 1013], "dive": [85, 368, 373], "explained_variance_": [85, 514, 521, 524, 996, 1011], "onto": [85, 219, 220, 231, 299, 378, 397, 400, 404, 420, 428, 441, 513, 519, 523, 608, 609, 611, 669, 956, 960, 965], "recommend": [85, 117, 161, 214, 227, 253, 266, 303, 309, 355, 356, 358, 362, 366, 368, 369, 373, 375, 378, 383, 395, 396, 397, 399, 401, 419, 420, 427, 429, 431, 440, 476, 488, 515, 518, 524, 529, 541, 542, 549, 563, 570, 587, 592, 612, 613, 619, 651, 657, 673, 678, 679, 681, 683, 783, 789, 791, 835, 842, 844, 851, 858, 859, 863, 864, 866, 867, 868, 869, 871, 880, 883, 915, 930, 951, 959, 962, 964, 966, 969, 972, 974, 976, 977, 978, 981, 986, 999, 1006, 1007, 1013, 1014, 1015, 1016, 1018], "linearregress": [85, 132, 166, 176, 187, 192, 193, 194, 195, 200, 203, 214, 229, 234, 253, 271, 300, 351, 368, 378, 379, 393, 399, 445, 550, 613, 616, 627, 630, 633, 635, 652, 653, 668, 958, 962, 972, 995, 1008, 1009, 1013, 1016, 1017, 1018], "retriev": [85, 167, 201, 264, 341, 349, 371, 380, 393, 397, 400, 401, 448, 476, 571, 574, 575, 607, 634, 644, 665, 706, 710, 712, 713, 736, 761, 814, 818, 851, 876, 928, 958, 960, 962, 964, 982, 983, 996, 1009, 1014, 1016, 1018], "026": [85, 341], "remark": [85, 146, 357, 368, 972], "predit": 85, "pca_2": 85, "673": [85, 373], "414": [85, 86, 170, 171, 215, 393, 706, 736, 855, 866, 962], "plot_pcr_vs_pl": [85, 86], "628": [86, 341], "auto_examples_cross_decomposit": 86, "multilabel": [87, 92, 164, 225, 240, 264, 275, 363, 369, 370, 380, 387, 462, 467, 477, 488, 489, 495, 503, 521, 537, 544, 547, 655, 656, 684, 688, 694, 706, 709, 710, 714, 715, 718, 719, 734, 736, 763, 764, 767, 768, 772, 774, 808, 812, 836, 843, 846, 850, 852, 862, 883, 886, 888, 904, 924, 925, 926, 973, 984, 985, 997, 999, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1017, 1018, 1019], "052": [88, 92, 252, 273, 341], "plot_digits_last_imag": [88, 92], "iris": [89, 263, 264, 994], "150x4": 89, "unus": [89, 101, 102, 168, 194, 218, 220, 443, 559, 743, 751, 951, 959, 1004, 1012, 1014, 1015, 1017, 1019], "plai": [89, 96, 123, 151, 180, 206, 251, 280, 288, 323, 324, 355, 378, 997], "set1": [89, 257, 286, 287], "getter": [89, 449, 450, 451, 452, 453, 454, 455, 456, 574, 575, 578], "110": [89, 176, 194, 204, 229, 418, 956, 957], "3rd": [89, 157, 814, 857, 964, 972], "plot_iris_dataset": [89, 92], "easi": [90, 168, 205, 215, 245, 255, 257, 327, 340, 351, 363, 373, 375, 378, 379, 392, 399, 480, 484, 490, 846, 951, 957, 961, 969, 972, 982, 983, 986, 997, 1014, 1019], "make_gaussian_quantil": [90, 110, 112, 364, 450, 454, 455, 456, 500], "321": 90, "323": 90, "y2": [90, 112, 697, 744, 963], "324": [90, 363], "multi": [90, 108, 109, 133, 164, 168, 175, 213, 216, 217, 220, 224, 225, 226, 233, 236, 240, 250, 254, 266, 273, 275, 292, 297, 307, 312, 340, 344, 350, 356, 363, 365, 369, 370, 376, 380, 383, 392, 399, 400, 402, 409, 418, 432, 442, 449, 454, 475, 476, 484, 485, 490, 494, 495, 499, 500, 502, 521, 529, 530, 531, 533, 535, 537, 538, 539, 541, 544, 545, 547, 549, 591, 614, 624, 627, 628, 633, 634, 638, 639, 641, 642, 643, 644, 647, 649, 653, 654, 655, 656, 657, 662, 665, 671, 684, 694, 701, 709, 714, 720, 722, 763, 777, 791, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 826, 827, 829, 835, 836, 837, 840, 846, 859, 862, 873, 874, 878, 880, 883, 886, 887, 888, 890, 891, 892, 898, 901, 904, 951, 963, 965, 969, 972, 976, 982, 983, 984, 988, 994, 998, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1018], "325": 90, "326": 90, "297": [90, 92, 105, 107, 363], "plot_random_dataset": [90, 92], "make_multilabel_classif": [91, 233, 364, 495, 516, 768, 810, 811, 962, 1006, 1007, 1009, 1015], "star": [91, 132, 368], "degener": [91, 404, 421, 434, 513, 701, 958, 962, 1013, 1017, 1018], "vocabulari": [91, 212, 340, 341, 378, 400, 569, 570, 571, 572, 964, 988, 997, 1004, 1006, 1009, 1012, 1015, 1017], "w0": 91, "w1": [91, 399, 638], "make_ml_clf": 91, "ff3333": 91, "0198e1": 91, "bf5fff": 91, "fcd116": 91, "ff7216": 91, "4dbd33": 91, "87421f": 91, "plot_2d": [91, 218], "p_c": [91, 503], "p_w_c": [91, 503], "allow_unlabel": [91, 233, 503], "return_distribut": [91, 503], "sep": [91, 266], "p_w": 91, "plot_random_multilabel_dataset": [91, 92], "613": 92, "auto_examples_dataset": 92, "blind": [93, 107, 164, 340, 397, 513, 521], "fastica": [93, 107, 164, 397, 512, 515, 521, 996, 1004, 1006, 1012, 1018, 1019], "increment": [93, 107, 164, 260, 371, 373, 423, 427, 443, 484, 513, 514, 515, 516, 519, 521, 524, 583, 627, 639, 647, 783, 803, 811, 812, 814, 815, 816, 817, 818, 848, 849, 859, 878, 879, 937, 958, 964, 1007, 1008], "fa": [93, 106, 107, 164, 373, 397, 453, 456, 512, 521, 777, 801], "precomput": [93, 107, 164, 175, 216, 221, 277, 279, 369, 376, 378, 380, 392, 400, 403, 413, 421, 422, 425, 426, 430, 432, 437, 445, 462, 463, 464, 504, 511, 515, 517, 520, 522, 528, 534, 536, 538, 540, 542, 545, 548, 550, 591, 592, 601, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 659, 660, 662, 663, 665, 666, 669, 671, 672, 673, 677, 754, 758, 761, 770, 771, 812, 813, 821, 822, 823, 825, 826, 827, 829, 830, 831, 832, 833, 837, 879, 880, 881, 882, 883, 884, 887, 889, 938, 939, 940, 954, 960, 965, 977, 983, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1020], "_nmf": [94, 373], "_beta_diverg": 94, "mbgyr": 94, "216": [94, 107, 975], "plot_beta_diverg": [94, 107], "olivetti": [95, 117, 361, 397, 475, 999, 1004, 1012], "chapter": [95, 351, 369, 392, 397, 399, 402, 510, 512, 514, 595, 600, 603, 624, 952, 955, 958, 977, 978], "decompos": [95, 99, 113, 301, 391, 514, 518, 690, 800, 915, 957, 958, 962, 979, 998, 999], "basicconfig": 95, "asctim": 95, "levelnam": 95, "faces_cent": 95, "image_shap": [95, 234], "constrained_layout": [95, 168, 218, 312], "set_constrained_layout_pad": 95, "w_pad": [95, 118, 346], "h_pad": [95, 118, 346], "set_edgecolor": 95, "vec": [95, 400, 518, 520, 527], "im": [95, 106, 268, 281, 985], "pad": [95, 118, 161, 168, 218, 235, 340, 346, 400, 569, 570, 572], "initialis": [95, 518, 520, 527, 1004, 1012, 1013], "mathbb": [95, 113, 152, 395, 962, 969, 977], "4096": [95, 363, 397, 475], "human": [95, 168, 340, 386, 392, 397, 836, 837, 962, 969, 1013], "friendli": [95, 356, 368, 375, 397, 871, 974, 975, 982, 983], "visualis": [95, 98, 106, 233, 524, 965, 983], "64x64": [95, 363, 397], "singular": [95, 376, 389, 392, 395, 431, 433, 462, 463, 464, 465, 501, 504, 514, 518, 520, 521, 524, 527, 529, 530, 638, 653, 654, 655, 668, 915, 958, 959, 961, 998, 999, 1010, 1011], "scalar": [95, 310, 373, 380, 393, 402, 404, 444, 447, 504, 513, 596, 597, 598, 603, 604, 608, 609, 718, 722, 894, 902, 954, 966, 968, 972, 976, 982, 1014, 1015, 1018, 1020], "noise_variance_": [95, 185, 512, 514, 521, 637, 1011, 1018], "pixelwis": 95, "pca_estim": 95, "nmf_estim": 95, "multivari": [95, 167, 360, 394, 397, 400, 453, 496, 497, 498, 608, 609, 610, 611, 630, 652, 659, 660, 814, 815, 816, 817, 818, 956, 958, 961, 964, 982, 988, 996, 999], "subcompon": [95, 397], "ica_estim": 95, "15e": 95, "sparsepca": [95, 511, 513, 514, 515, 517, 519, 520, 521, 522, 525, 526, 1004, 1011, 1012, 1014, 1015, 1017, 1018, 1019], "batch_pca_estim": 95, "minibatchdictionarylearn": [95, 98, 357, 397, 511, 518, 522, 525, 526, 1005, 1007, 1014, 1015, 1017, 1018, 1019], "batch_dict_estim": 95, "That": [95, 146, 186, 226, 257, 261, 341, 342, 356, 362, 375, 380, 396, 401, 402, 424, 427, 537, 544, 574, 795, 886, 887, 951, 959, 960, 962, 968, 978, 1013, 1014], "enhanc": [95, 367, 368, 371, 378, 380, 392, 962, 980, 1002, 1003, 1004, 1005, 1006, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "consum": [95, 351, 362, 369, 380, 392, 396, 399, 429, 780, 781, 839, 840, 958, 986, 1009], "kmeans_estim": 95, "heteroscedast": [95, 103, 122, 199, 397, 855, 866], "fa_estim": 95, "factoranalysi": [95, 103, 106, 397, 524, 1005, 1007, 1016, 1018], "wrap": [95, 115, 122, 277, 362, 369, 380, 414, 488, 566, 567, 638, 657, 722, 805, 862, 952, 962, 965, 977, 982, 1004, 1009, 1012, 1014, 1015, 1017, 1019], "suit": [95, 127, 167, 197, 198, 226, 247, 310, 311, 340, 356, 368, 369, 372, 373, 375, 378, 383, 395, 397, 399, 402, 430, 432, 483, 658, 816, 909, 951, 954, 959, 962, 964, 965, 976, 982, 983, 986, 990, 1011, 1018], "colormap": [95, 112, 157, 189, 206, 327, 332, 346, 678, 1017], "uv": [95, 397], "x_1": [95, 141, 152, 194, 198, 395, 397, 399, 402, 594, 606, 638, 852, 958, 964, 966, 972, 976], "x_n": [95, 397, 964, 966, 976], "dict_pos_dict_estim": 95, "positive_dict": [95, 511, 517, 525, 526], "dict_pos_code_estim": 95, "fit_algorithm": [95, 511, 517, 1019, 1020], "cd": [95, 365, 366, 368, 371, 397, 451, 452, 458, 511, 517, 519, 520, 523, 525, 526, 527, 958, 997, 1009, 1019], "positive_cod": [95, 511, 517, 522, 525, 526], "dict_pos_estim": 95, "plot_faces_decomposit": [95, 107], "imagin": [96, 149, 396, 397, 400, 958], "simultan": [96, 261, 265, 348, 360, 389, 951, 962, 963, 978, 986, 1011], "microphon": 96, "s1": [96, 146, 157, 185, 186, 365, 996], "sinusoid": [96, 111, 122, 232, 402, 955, 996], "s2": [96, 146, 157, 185, 186, 365, 530, 996], "s3": [96, 146, 185, 186, 365, 996], "sawtooth": [96, 996], "saw": [96, 198, 996], "tooth": [96, 996], "s_": [96, 261, 959, 970, 996], "a_": [96, 389, 392, 518, 520, 527, 958, 996], "mixing_": [96, 97, 513, 996], "prove": [96, 986], "revert": [96, 611, 613, 614, 1011, 1016], "unmix": [96, 404, 513], "allclos": [96, 126, 974, 996], "mean_": [96, 261, 512, 513, 514, 519, 521, 523, 859, 972, 996, 1012], "orthogon": [96, 97, 98, 164, 175, 216, 391, 397, 506, 511, 517, 519, 522, 523, 528, 645, 646, 666, 667, 974, 984, 999, 1004], "steelblu": [96, 97, 131], "sig": 96, "plot_ica_blind_source_separ": [96, 107], "ica": [97, 391, 404, 978, 998, 999], "geometr": [97, 392, 669, 685, 711, 737, 959, 1012], "identifi": [97, 104, 122, 123, 166, 167, 197, 200, 245, 247, 255, 260, 266, 286, 309, 340, 341, 362, 363, 367, 368, 371, 372, 380, 392, 393, 396, 399, 400, 430, 437, 467, 476, 488, 489, 535, 536, 543, 587, 624, 630, 680, 693, 754, 804, 825, 844, 873, 874, 951, 958, 962, 968, 975, 986, 995, 1011, 1013, 1018, 1020], "standard_t": 97, "s_pca_": 97, "s_ica_": 97, "plot_sampl": [97, 248], "axis_list": 97, "x_axi": [97, 205, 261], "y_axi": [97, 205], "quiver": 97, "hline": 97, "set_zord": 97, "plot_ica_vs_pca": [97, 107], "fragment": 98, "firstli": [98, 355, 378, 638, 997], "undistort": 98, "noiseless": [98, 960], "pursuit": [98, 164, 175, 216, 397, 454, 506, 511, 517, 522, 528, 645, 646, 666, 667, 984, 999, 1004], "omp": [98, 105, 196, 397, 511, 517, 522, 528, 645, 646, 666, 667, 984, 999, 1004, 1012], "promin": [98, 380], "reminisc": 98, "downsampl": [98, 235], "075": 98, "show_with_diff": 98, "puor": 98, "22692": 98, "dico": 98, "n_iter_": [98, 205, 245, 380, 421, 427, 428, 429, 451, 452, 462, 463, 464, 511, 512, 513, 516, 517, 518, 519, 520, 523, 541, 542, 608, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 655, 657, 658, 659, 660, 661, 671, 673, 775, 776, 828, 836, 837, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 1008, 1011, 1012, 1014, 1017, 1018, 1020], "n_steps_": [98, 429, 517, 518, 1017], "reconstruct_from_patches_2d": [98, 400, 564], "intercept": [98, 189, 206, 214, 336, 380, 462, 463, 464, 529, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 668, 854, 858, 860, 878, 879, 885, 958, 960, 962, 967, 976, 977, 1007, 1009, 1013, 1014], "transform_algorithm": [98, 105, 511, 517, 522, 1020], "n1": 98, "atom": [98, 105, 397, 511, 517, 519, 522, 523, 525, 526, 634, 644, 665, 958, 1004, 1017], "transform_n_nonzero_coef": [98, 105, 511, 517, 522], "n2": 98, "n4": 98, "transform_alpha": [98, 105, 511, 517, 522, 1017], "set_param": [98, 106, 114, 119, 122, 168, 169, 177, 185, 186, 190, 201, 205, 231, 270, 307, 330, 341, 370, 380, 392, 393, 399, 402, 406, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 775, 776, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 952, 968, 988, 995, 1004, 1010, 1011, 1012, 1017, 1018], "191": [98, 107, 373, 963], "plot_image_denois": [98, 107], "ipca": [99, 513, 514], "flip": [99, 563, 722, 915, 964, 1008, 1017], "incrementalpca": [99, 357, 397, 513, 515, 519, 521, 524, 1008, 1011, 1012, 1014, 1015, 1018], "x_ipca": 99, "x_pca": 99, "turquois": [99, 104, 105, 124, 203, 214, 221, 244, 245, 264], "x_transform": [99, 127, 465, 511, 512, 513, 514, 515, 517, 519, 523, 546, 619, 620, 669, 670, 671, 672], "nmean": 99, "shadow": [99, 104, 105, 221, 317, 334, 342, 400], "scatterpoint": [99, 104, 221, 244, 317], "plot_incremental_pca": [99, 107], "kernal": 100, "nest": [100, 110, 164, 186, 250, 273, 356, 373, 380, 383, 392, 396, 402, 406, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 442, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 484, 499, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 775, 776, 777, 780, 781, 782, 791, 801, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 930, 951, 962, 965, 1004, 1005, 1008, 1010, 1011, 1012, 1018], "train_ax": 100, "test_ax": 100, "straight": [100, 187, 193, 195, 254, 355], "inner": [100, 122, 258, 262, 317, 355, 400, 424, 494, 526, 563, 570, 629, 650, 661, 755, 757, 954, 962, 972, 977, 1005, 1008, 1018], "x_test_kernel_pca": 100, "orig_data_ax": 100, "pca_proj_ax": 100, "kernel_pca_proj_ax": 100, "unfold": [100, 370, 959], "untangl": 100, "mind": [100, 166, 167, 168, 215, 303, 304, 340, 341, 351, 368, 386, 394, 396, 399, 627, 628, 685, 958, 977, 982, 988, 995], "investig": [100, 106, 162, 335, 368, 958], "pca_back_proj_ax": 100, "kernel_pca_back_proj_ax": 100, "reli": [100, 119, 146, 170, 185, 186, 277, 308, 312, 340, 355, 356, 369, 372, 375, 376, 378, 380, 388, 389, 392, 397, 399, 400, 529, 566, 567, 574, 578, 588, 589, 844, 928, 951, 954, 956, 958, 962, 965, 977, 986, 1012, 1013, 1014, 1018], "analyt": [100, 397, 402, 512, 601, 689, 952, 956, 962, 981, 986], "kernelridg": [100, 149, 232, 653, 955, 1008], "relianc": 100, "585": [100, 107, 995], "plot_kernel_pca": [100, 107], "aid": [101, 254, 392, 770, 771, 959, 986, 1004, 1016], "kevin": [101, 624, 1006, 1008, 1010, 1011, 1014, 1015, 1016, 1018, 1019], "hugh": [101, 854, 1006, 1017], "pdf": [101, 146, 257, 282, 299, 365, 368, 392, 401, 423, 429, 511, 514, 517, 521, 622, 625, 630, 639, 645, 647, 648, 652, 657, 660, 663, 664, 666, 667, 673, 816, 817, 828, 835, 871, 873, 958, 975, 978, 985, 1000, 1004], "30000": [101, 363], "pdf_z": 101, "plot_fig": [101, 194], "fig_num": [101, 194], "pca_scor": [101, 103], "vt": [101, 530], "full_matric": 101, "x_pca_axi": 101, "y_pca_axi": 101, "z_pca_axi": 101, "x_pca_plan": 101, "y_pca_plan": 101, "z_pca_plan": 101, "plot_surfac": [101, 168, 194], "plot_pca_3d": [101, 107], "cla": 102, "087": [102, 107, 184, 216, 347, 350], "plot_pca_iri": [102, 107], "homoscedast": [103, 229, 303, 962, 1012], "succe": 103, "subspac": [103, 395, 399, 432, 495, 535, 536, 672, 676, 915, 956, 965, 968, 974, 986, 996], "overestim": [103, 351, 396], "circumst": [103, 215, 965], "nip": [103, 365, 495, 521, 546, 622, 962], "598": [103, 112, 133, 150, 308, 313, 521], "604": [103, 162, 163, 338, 521], "minka": [103, 521, 958], "deni": [103, 1006, 1007, 1011, 1012, 1013, 1019], "engemann": [103, 1006, 1007, 1011], "x_homo": 103, "x_hetero": 103, "cross_val_scor": [103, 136, 161, 162, 164, 250, 253, 262, 271, 273, 330, 351, 368, 369, 378, 396, 399, 500, 555, 684, 722, 777, 800, 802, 886, 887, 951, 962, 992, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1016, 1017], "fa_scor": 103, "shrunk_cov_scor": 103, "lw_score": 103, "n_components_pca": 103, "n_components_fa": 103, "n_components_pca_ml": 103, "axhlin": [103, 135, 187, 256, 260], "violet": 103, "656": [103, 107, 363], "plot_pca_vs_fa_model_select": [103, 107], "flower": [104, 266, 486, 487, 962, 982], "92461872": 104, "05306648": 104, "x_r": [104, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584], "x_r2": 104, "197": [104, 107, 341, 402], "plot_pca_vs_lda": [104, 107], "ricker": 105, "sparsecod": [105, 397, 511, 517, 520, 528, 1011, 1012, 1014, 1016, 1018], "mexican": 105, "piecewis": [105, 310, 389, 953, 958, 972, 978], "matter": [105, 248, 351, 392, 399, 547, 649, 657, 659, 958, 1008], "motiv": [105, 368, 369, 380, 399, 954, 962, 972, 986, 1017], "heavier": [105, 394, 958], "subsampl": [105, 121, 124, 168, 197, 214, 215, 253, 309, 438, 539, 540, 541, 542, 543, 613, 660, 682, 780, 781, 805, 844, 856, 867, 894, 904, 954, 958, 983, 985, 1004, 1014, 1018], "ricker_funct": 105, "ricker_matrix": 105, "d_fix": 105, "d_multi": 105, "first_quart": 105, "transform_n_nozero_coef": 105, "lasso_lar": [105, 511, 517, 522, 528, 1014], "n_nonzero": 105, "coder": [105, 522, 697], "flatnonzero": [105, 185, 256, 265, 266, 761], "soft": [105, 130, 131, 368, 380, 549, 550, 874, 882, 976, 986, 1009], "debias": 105, "lstsq": [105, 368, 638, 651], "rcond": 105, "plot_sparse_cod": [105, 107], "uncov": [106, 676], "inher": [106, 192, 351, 392, 397, 952, 954, 956, 957, 959, 963], "varimax": [106, 397, 512, 1016], "jona": [106, 1016], "sassenhagen": [106, 1016], "set_yticklabel": [106, 152, 161, 162, 170, 268, 342], "n_comp": [106, 173], "unrot": 106, "52106591": 106, "37741762": 106, "26934744": 106, "92329566": 106, "5804131": 106, "02449161": 106, "56485654": 106, "06694199": 106, "88096009": 106, "4472869": 106, "41691605": 106, "55390036": 106, "99918858": 106, "01915283": 106, "96228895": 106, "05840206": 106, "98633022": 106, "05752333": 106, "16052385": 106, "67443065": 106, "90809432": 106, "41726413": 106, "85857475": 106, "43847489": 106, "plot_varimax_fa": [106, 107], "41": [107, 168, 197, 363, 365, 402, 449, 472, 511, 602, 605, 616, 639, 645, 666, 667, 761, 814, 964, 968], "423": 107, "auto_examples_decomposit": 107, "predictor": [108, 133, 164, 197, 215, 369, 379, 380, 393, 395, 396, 399, 402, 446, 447, 462, 463, 464, 476, 496, 497, 498, 535, 536, 542, 545, 548, 583, 591, 611, 613, 614, 629, 634, 638, 650, 654, 661, 800, 802, 811, 812, 840, 852, 853, 859, 936, 958, 963, 1005, 1011, 1014], "stack": [108, 133, 164, 282, 349, 367, 375, 378, 380, 398, 444, 446, 447, 476, 495, 542, 545, 547, 548, 593, 608, 609, 611, 634, 654, 800, 802, 840, 844, 852, 853, 859, 936, 952, 982, 983, 984, 985, 999, 1007, 1011, 1012, 1013, 1014, 1015], "versu": [108, 129, 133, 164, 167, 175, 206, 212, 216, 232, 245, 250, 273, 285, 314, 321, 392, 396, 399, 402, 484, 500, 514, 533, 536, 591, 620, 639, 640, 647, 649, 655, 656, 657, 658, 763, 774, 777, 782, 801, 805, 811, 840, 874, 875, 882, 883, 886, 887, 951, 958, 962, 963, 968, 975, 976, 977, 995, 1012], "isolationforest": [108, 133, 164, 226, 235, 612, 805, 882, 968, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1020], "oob": [108, 121, 133, 164, 399, 495, 544, 983, 1006, 1017], "votingclassifi": [108, 133, 164, 484, 544, 550, 639, 817, 821, 883, 886, 951, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018], "vote": [108, 130, 131, 133, 164, 275, 380, 381, 481, 535, 536, 537, 540, 544, 545, 549, 550, 638, 807, 821, 822, 827, 829, 963, 965, 984, 995, 999, 1007, 1009, 1014], "hasti": [109, 110, 113, 114, 120, 124, 146, 185, 256, 365, 396, 399, 499, 500, 533, 539, 540, 609, 637, 702, 703, 704, 809, 826, 871, 886, 887, 952, 956, 958, 963, 969, 974, 976, 978], "2009": [109, 110, 113, 114, 124, 392, 396, 397, 399, 400, 499, 500, 508, 511, 517, 518, 520, 521, 524, 527, 533, 539, 540, 616, 652, 660, 677, 810, 886, 887, 914, 915, 958, 962, 963, 969, 978], "tibshirani": [109, 113, 114, 124, 146, 185, 256, 365, 396, 399, 500, 539, 540, 609, 637, 702, 703, 704, 809, 826, 886, 887, 952, 956, 958, 963, 969, 978], "friedman": [109, 113, 114, 124, 256, 394, 396, 399, 458, 496, 497, 498, 500, 538, 539, 540, 545, 574, 575, 809, 886, 887, 889, 956, 958, 963, 969, 978], "ed": [109, 114, 124, 399, 500, 539, 540, 974, 1004, 1011], "springer": [109, 113, 114, 124, 256, 396, 397, 399, 500, 515, 539, 540, 671, 675, 677, 686, 701, 706, 720, 721, 736, 775, 886, 887, 959, 962, 963, 969, 978], "zhu": [109, 110, 399, 499, 533, 639, 873], "zou": [109, 110, 185, 399, 499, 533, 637, 958, 976], "rosset": [109, 110, 399, 499, 533], "make_hastie_10_2": [109, 120, 124, 261, 364, 399, 539, 969], "12_000": 109, "Be": [109, 143, 158, 340, 368, 394, 547, 548, 629, 635, 636, 637, 639, 640, 650, 661, 685, 795, 796, 854, 972, 1001, 1005], "stump": [109, 112, 399, 539, 1015], "2_000": 109, "dt_stump": 109, "min_samples_leaf": [109, 121, 122, 169, 307, 310, 345, 399, 537, 538, 539, 540, 541, 542, 544, 545, 546, 886, 887, 888, 889, 978, 1010], "dt_stump_err": 109, "dt_err": 109, "ada_discret": 109, "adaboostclassifieradaboostclassifi": 109, "decisiontreeclassifierdecisiontreeclassifi": [109, 349], "ada_r": 109, "zero_one_loss": [109, 368, 684, 714, 962, 1005, 1006, 1007], "ada_discrete_err": 109, "staged_predict": [109, 110, 123, 399, 533, 534, 539, 540, 541, 542, 1004, 1016], "ada_discrete_err_train": 109, "ada_real_err": 109, "ada_real_err_train": 109, "leg": 109, "fancybox": [109, 334], "get_fram": 109, "907": [109, 133], "plot_adaboost_hastie_10_2": [109, 133], "sphere": [110, 164, 217, 218, 224, 341, 398, 499, 570, 669, 670, 671, 672, 673, 744, 901, 956, 960, 965], "roughli": [110, 122, 186, 248, 267, 277, 304, 355, 380, 397, 400, 499, 959, 1004], "samm": [110, 112, 399, 533], "13000": 110, "bdt_real": 110, "bdt_discret": 110, "real_test_error": 110, "discrete_test_error": 110, "real_test_predict": 110, "discrete_test_predict": 110, "n_trees_discret": 110, "n_trees_real": 110, "termin": [110, 356, 372, 373, 375, 383, 392, 428, 441, 533, 534, 538, 539, 540, 543, 545, 647, 648, 649, 657, 659, 836, 837, 887, 889, 968, 978], "alwai": [110, 119, 122, 176, 197, 215, 223, 230, 260, 263, 267, 324, 341, 351, 355, 356, 362, 368, 369, 373, 379, 380, 383, 390, 392, 393, 396, 399, 400, 401, 402, 413, 424, 429, 444, 445, 447, 449, 462, 463, 464, 468, 476, 488, 489, 524, 529, 531, 532, 534, 536, 538, 539, 540, 541, 542, 544, 545, 548, 550, 562, 569, 570, 572, 575, 592, 608, 609, 611, 613, 614, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 652, 653, 654, 657, 659, 660, 673, 676, 686, 690, 696, 702, 703, 704, 712, 714, 715, 719, 762, 765, 766, 775, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 812, 813, 822, 823, 830, 831, 837, 844, 852, 857, 859, 871, 879, 880, 881, 883, 884, 886, 887, 889, 916, 951, 952, 954, 956, 958, 961, 962, 965, 968, 970, 974, 975, 977, 978, 986, 988, 995, 1004, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "crop": [110, 375, 1019], "discrete_estimator_error": 110, "estimator_errors_": [110, 533, 534], "real_estimator_error": 110, "discrete_estimator_weight": 110, "estimator_weights_": [110, 533, 534], "62": [110, 173, 215, 251, 296, 312, 316, 351, 363, 392, 473, 474, 819, 820, 1000, 1007], "432": [110, 133, 257, 394], "plot_adaboost_multiclass": [110, 133], "1d": [111, 113, 164, 168, 198, 230, 278, 291, 334, 347, 368, 374, 376, 379, 380, 393, 398, 444, 447, 598, 614, 634, 638, 641, 644, 665, 684, 693, 694, 700, 709, 710, 714, 718, 722, 763, 764, 767, 774, 821, 822, 823, 824, 825, 827, 829, 830, 831, 844, 894, 898, 899, 925, 949, 963, 988, 995, 1004, 1009, 1010, 1011, 1013, 1017, 1018], "299": [111, 157, 159, 661], "drucker": [111, 399, 534], "1997": [111, 363, 397, 399, 402, 515, 534, 671, 675, 958, 959, 962], "dummi": [111, 197, 215, 260, 358, 369, 372, 387, 852, 860, 972, 978, 999, 1005, 1007, 1008, 1009, 1011], "decisiontreeregressor": [111, 113, 236, 300, 307, 347, 348, 372, 534, 536, 538, 539, 540, 542, 545, 613, 614, 886, 889, 891, 910, 978, 1005, 1006, 1009, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "adaboostregressor": [111, 399, 533, 542, 1006, 1007, 1010, 1013, 1014, 1017, 1019], "regr_1": [111, 347, 348], "regr_2": [111, 347, 348], "y_1": [111, 347, 348, 395, 962, 966, 976], "y_2": [111, 347, 348, 966], "439": [111, 133, 341], "plot_adaboost_regress": [111, 133], "puriti": [112, 890, 892], "plot_adaboost_twoclass": [112, 133], "bdt": 112, "plot_color": [112, 346], "br": 112, "plot_step": [112, 118, 346], "class_nam": [112, 251, 890, 891, 892, 978, 1020], "xx0": [112, 612], "twoclass_output": 112, "plot_rang": 112, "irreduc": [113, 962], "light": [113, 363], "beam": [113, 1004], "pointwis": [113, 156, 403, 425], "offset": [113, 173, 378, 394, 397, 449, 488, 489, 543, 613, 614, 622, 623, 625, 626, 658, 708, 755, 757, 825, 882, 962, 976, 995, 1012], "narrow": [113, 122, 299, 301, 372, 819, 820], "tradeoff": [113, 164, 231, 250, 264, 265, 273, 340, 355, 375, 398, 495, 544, 707, 769, 805, 840, 859, 878, 959, 995, 1013, 1016], "bootstrap": [113, 114, 121, 161, 260, 269, 309, 396, 399, 534, 535, 536, 537, 538, 543, 544, 545, 904, 933, 958, 1004, 1005, 1007, 1009, 1012, 1014, 1017], "stem": [113, 169, 181, 196, 248, 396, 400, 954, 964], "0255": 113, "0003": 113, "0152": 113, "0098": 113, "0196": 113, "0004": [113, 304], "0092": 113, "baggingregressor": [113, 399, 535, 889, 1007, 1010, 1012, 1015, 1019, 1020], "n_repeat": [113, 116, 123, 145, 167, 169, 170, 257, 307, 396, 495, 615, 792, 793, 970], "knn": [113, 130, 137, 161, 285, 286, 289, 304, 309, 317, 340, 399, 583, 828, 873, 874, 965, 975, 995, 1010], "y_predict": [113, 369, 1004], "y_error": [113, 203], "y_nois": 113, "y_bia": 113, "y_var": 113, "177": [113, 133, 373], "plot_bias_vari": [113, 133], "z_i": [114, 966], "y_i": [114, 310, 335, 390, 399, 953, 954, 958, 962, 966, 976, 977, 978], "whilst": [114, 220], "practition": 114, "suitabl": [114, 122, 183, 294, 342, 362, 363, 373, 376, 392, 397, 400, 432, 442, 448, 467, 485, 488, 608, 616, 814, 815, 818, 854, 876, 927, 931, 956, 958, 961, 972, 974, 976, 982, 985, 997, 1018, 1019], "p592": 114, "593": 114, "kian": [114, 1009, 1019], "ho": [114, 399, 535, 536, 962, 1009, 1012, 1013, 1018], "hui": [114, 185, 518, 520, 527, 637, 958], "ordereddict": 114, "123": [114, 131, 351, 399, 496, 497, 498, 535, 536, 812, 963, 970], "warm_start": [114, 153, 190, 310, 369, 373, 380, 399, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 591, 627, 629, 630, 633, 639, 641, 643, 647, 648, 649, 650, 657, 658, 659, 661, 775, 776, 828, 836, 837, 968, 984, 999, 1004, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1018, 1020], "disabl": [114, 340, 366, 368, 400, 429, 440, 517, 518, 519, 526, 539, 540, 541, 542, 838, 898, 899, 972, 1010, 1013, 1017, 1019], "track": [114, 121, 316, 368, 370, 371, 383, 388, 514, 931, 963, 982, 983, 1011, 1014], "trajectori": 114, "ensemble_clf": 114, "oob_scor": [114, 399, 535, 536, 537, 538, 544, 545, 1009, 1011], "log2": [114, 207, 237, 537, 538, 539, 540, 544, 545, 886, 887, 888, 889, 963], "error_r": 114, "min_estim": 114, "max_estim": 114, "oob_error": 114, "oob_score_": [114, 535, 536, 537, 538, 539, 540, 544, 545, 1006, 1020], "clf_err": 114, "837": [114, 133], "plot_ensemble_oob": [114, 133], "betatim": [115, 128, 1019], "leak": [115, 262, 340, 351, 393, 396, 839, 863, 864, 866, 867, 868, 869, 972, 1004, 1011, 1014], "80_000": 115, "x_full_train": 115, "y_full_train": 115, "x_train_ensembl": 115, "x_train_linear": 115, "y_train_ensembl": 115, "y_train_linear": 115, "gradientboostingclassifi": [115, 120, 121, 124, 301, 351, 378, 399, 533, 541, 613, 614, 963, 969, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020], "random_forest": 115, "gradient_boost": [115, 1005, 1006, 1007, 1013], "histgradientboostingclassifi": [115, 307, 308, 309, 310, 312, 356, 399, 539, 560, 613, 614, 952, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "randomtreesembed": [115, 127, 219, 399, 888, 1005, 1012, 1013, 1017, 1018, 1019], "random_tree_embed": 115, "rt_model": 115, "randomtreesembeddingrandomtreesembed": 115, "rf_appli": 115, "rf_leaves_yield": 115, "kw_arg": [115, 843, 972, 1010], "rf_model": 115, "0x7feaba38ff70": 115, "functiontransformerfunctiontransform": 115, "gbdt_appli": 115, "gbdt_leaves_yield": 115, "gbdt_model": 115, "0x7feab91b3310": 115, "roccurvedisplai": [115, 235, 238, 254, 266, 267, 307, 374, 768, 769, 968, 1001, 1014], "rt": 115, "rf": [115, 128, 131, 132, 169, 307, 351, 399, 547, 549, 550], "gbdt": [115, 168, 307, 308, 372, 399], "model_displai": 115, "plot_feature_transform": [115, 133], "artifici": [116, 119, 126, 162, 218, 232, 296, 340, 363, 364, 365, 372, 389, 391, 392, 396, 397, 402, 515, 677, 809, 836, 837, 955, 959, 961, 963, 969, 974, 978, 983, 986, 1004], "feature_importances_": [116, 117, 123, 146, 169, 170, 380, 399, 401, 533, 534, 537, 538, 539, 540, 544, 545, 546, 574, 575, 578, 886, 887, 888, 889, 1006, 1009, 1013], "estimators_": [116, 118, 233, 307, 380, 533, 534, 535, 536, 537, 538, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 807, 808, 809, 810, 811, 812, 813, 1005, 1011, 1018], "forest_import": 116, "mdi": [116, 123, 164, 165, 170, 171, 399, 444, 476, 544, 611, 615, 805, 839, 853, 970], "overcom": [116, 355, 400], "permutation_import": [116, 117, 123, 169, 170, 307, 399, 533, 534, 537, 538, 539, 540, 544, 545, 546, 886, 887, 888, 889, 970, 1014, 1016, 1017], "importances_mean": [116, 123, 169, 170, 307, 615, 970], "637": 116, "importances_std": [116, 615, 970], "omit": [116, 166, 167, 320, 372, 405, 455, 514, 647, 649, 657, 784, 786, 807, 808, 811, 814, 815, 816, 817, 818, 836, 960, 967], "105": [116, 133, 187, 216, 279, 291, 303], "plot_forest_import": [116, 133], "hotter": 117, "job": [117, 245, 368, 371, 375, 399, 403, 418, 425, 428, 430, 432, 437, 438, 441, 444, 447, 448, 452, 511, 515, 516, 517, 519, 522, 523, 525, 526, 528, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 583, 591, 615, 620, 638, 669, 670, 671, 672, 673, 674, 675, 754, 758, 761, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 812, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 838, 841, 873, 874, 876, 928, 986, 990], "five": [117, 243, 316, 319, 363, 511, 519, 525, 959, 965, 977, 986, 1004], "drawback": [117, 214, 954, 957], "img_shap": 117, "imp_reshap": 117, "119": [117, 956, 1007], "met": [117, 369, 401, 514, 521, 608, 652, 958, 962, 1012], "364": [117, 133, 451, 452, 1005], "plot_forest_importances_fac": [117, 133], "third": [118, 123, 141, 146, 157, 215, 226, 248, 282, 301, 356, 363, 367, 378, 381, 400, 514, 569, 570, 571, 572, 779, 780, 781, 786, 821, 822, 823, 825, 827, 857, 868, 930, 951, 973, 980, 1004, 1015], "fourth": [118, 988], "descend": [118, 608, 1014], "extratreesclassifi": [118, 127, 399, 401, 538, 544, 546, 888, 889, 963, 1007, 1008, 1012, 1013, 1014, 1017, 1018, 1019, 1020], "decisiontre": [118, 1009], "consol": [118, 366, 989], "worth": [118, 168, 197, 368, 375, 986], "extratre": [118, 127, 355, 1007], "sequenti": [118, 140, 147, 164, 191, 258, 309, 366, 397, 399, 400, 481, 514, 574, 578, 583, 584, 586, 587, 627, 628, 633, 634, 641, 642, 643, 644, 654, 839, 952, 970, 976, 982, 984, 999, 1004, 1013, 1016], "9266666666666666": 118, "8666666666666667": 118, "9933333333333333": 118, "rdylbu": [118, 346], "plot_step_coars": 118, "plot_idx": 118, "model_titl": 118, "model_detail": 118, "blend": [118, 129, 380, 396, 982], "estimator_alpha": 118, "coarser": [118, 122], "regularli": [118, 378, 964], "xx_coarser": 118, "yy_coars": 118, "z_points_coars": 118, "cs_point": 118, "215": [118, 133, 194, 202, 216, 565], "plot_forest_iri": [118, 133], "equidist": [119, 673], "lowa": 119, "sale": [119, 257, 962, 986], "42165": 119, "categorical_columns_subset": 119, "bldgtype": 119, "garagefinish": 119, "lotconfig": 119, "masvnrtyp": [119, 129], "housestyl": [119, 129], "fireplacequ": 119, "extercond": 119, "exterqu": [119, 129], "poolqc": 119, "numerical_columns_subset": 119, "3ssnporch": 119, "fireplac": 119, "bsmthalfbath": 119, "halfbath": 119, "garagecar": [119, 129], "totrmsabvgrd": 119, "bsmtfinsf1": [119, 129], "bsmtfinsf2": 119, "grlivarea": 119, "screenporch": 119, "n_categorical_featur": [119, 541, 542, 613, 614], "n_numerical_featur": 119, "1460": [119, 129], "make_column_transform": [119, 129, 167, 228, 308, 393, 444, 446, 1012], "dropper": 119, "hist_drop": 119, "hist_one_hot": 119, "etc": [119, 197, 215, 252, 261, 262, 351, 355, 357, 368, 369, 371, 372, 378, 379, 380, 389, 393, 396, 400, 469, 483, 537, 538, 544, 545, 649, 657, 673, 699, 751, 777, 791, 810, 813, 843, 854, 886, 887, 888, 889, 890, 892, 898, 899, 909, 951, 952, 956, 962, 965, 982, 983, 986, 1004, 1011, 1013, 1014], "use_encoded_valu": [119, 129, 169, 853, 1016], "unknown_valu": [119, 129, 169, 853, 1016, 1018], "hist_ordin": 119, "n_unique_categori": 119, "hist_n": 119, "mean_absolute_percentage_error": [119, 962, 1016, 1018], "neg_mean_absolute_percentage_error": [119, 962, 970], "n_cv_fold": [119, 783, 803, 806], "dropped_result": 119, "one_hot_result": 119, "ordinal_result": 119, "native_result": 119, "plot_result": [119, 242, 243, 248], "figure_titl": 119, "plot_info": 119, "test_scor": [119, 121, 123, 205, 256, 259, 272, 335, 345, 379, 396, 783, 802, 803, 806], "y_limit": 119, "mape_cv_mean": 119, "mape_cv_std": 119, "c0": [119, 229], "slowest": [119, 914, 915], "theori": [119, 232, 247, 335, 365, 391, 392, 396, 399, 671, 675, 706, 736, 870, 871, 915, 951, 958, 959, 961, 962, 963, 977, 978], "poorer": [119, 351, 397], "slight": [119, 202, 309, 399, 429, 1014], "acf": 119, "bde": 119, "isol": [119, 125, 226, 235, 341, 366, 368, 373, 383, 543, 825, 882, 1013, 1014], "bcde": 119, "histgradientboostingregressor__max_depth": 119, "histgradientboostingregressor__max_it": 119, "altogeth": [119, 373, 1012], "plot_gradient_boosting_categor": [119, 133], "suffici": [120, 129, 205, 271, 327, 355, 380, 392, 401, 512, 526, 638, 663, 664, 796, 797, 963, 965, 983, 1013, 1019], "validation_fract": [120, 205, 310, 399, 539, 540, 541, 542, 647, 648, 649, 657, 659, 836, 837, 976, 1012, 1018], "denot": [120, 376, 380, 383, 390, 396, 399, 569, 570, 572, 777, 783, 791, 852, 853, 947, 951, 954, 958, 960, 962, 963, 972, 975, 988], "kept": [120, 247, 277, 335, 362, 371, 386, 402, 476, 515, 518, 520, 521, 526, 527, 578, 591, 592, 600, 601, 625, 676, 775, 776, 899, 972, 1012, 1013], "asid": [120, 205, 386, 539, 540, 541, 542, 647, 648, 649, 657, 659, 836, 837], "until": [120, 146, 205, 269, 309, 311, 372, 380, 381, 389, 392, 396, 401, 402, 488, 489, 537, 538, 539, 540, 544, 545, 546, 574, 583, 627, 628, 633, 634, 639, 640, 641, 642, 643, 644, 647, 649, 652, 657, 658, 659, 675, 775, 776, 780, 781, 836, 837, 875, 878, 886, 887, 888, 889, 937, 951, 958, 959, 967, 975, 978, 997, 1007, 1011, 1012, 1018], "n_estimators_": [120, 539, 540], "vighnesh": [120, 1009, 1010, 1012], "birodkar": [120, 1009, 1010, 1012], "vighneshbirodkar": 120, "rvraghav93": [120, 261, 299], "data_list": 120, "n_gb": 120, "score_gb": 120, "time_gb": 120, "n_gbe": 120, "gbe": 120, "gb": [120, 132, 399, 533, 614], "bar_width": 120, "bar1": 120, "crimson": 120, "bar2": 120, "coral": 120, "n_est": 120, "max_i": [120, 233, 964], "823": [120, 133, 277], "plot_gradient_boosting_early_stop": [120, 133], "fly": [121, 372, 375, 488, 489, 563, 1004, 1006, 1013], "pessimist": [121, 399], "cumul": [121, 197, 215, 392, 706, 715, 736, 856, 867, 972, 976, 1011, 1013, 1014], "demand": [121, 400, 777, 791, 800, 801, 802], "6820": 121, "special": [121, 167, 187, 215, 287, 327, 362, 364, 369, 373, 378, 380, 392, 395, 397, 444, 447, 533, 535, 539, 800, 890, 951, 956, 958, 960, 961, 962, 963, 965, 978, 1011, 1014, 1016, 1018], "expit": [121, 187, 399, 541, 958, 1011], "ridgewai": [121, 399], "gbm": [121, 399, 1007], "x3": [121, 235, 393, 996], "binomi": [121, 124, 399, 533, 539, 541, 958, 1018], "acc": 121, "heldout_scor": 121, "devianc": [121, 124, 197, 215, 399, 533, 538, 539, 540, 541, 542, 545, 629, 650, 661, 702, 703, 704, 727, 729, 732, 887, 889, 958, 978, 1005, 1014, 1015, 1017, 1018, 1020], "y_proba": [121, 124, 304, 380, 839], "staged_predict_proba": [121, 124, 533, 539, 541, 1004], "cv_estim": 121, "cv_clf": 121, "val_scor": 121, "cv_score": 121, "cumsum": [121, 197, 215, 1011], "oob_improvement_": [121, 399, 539, 540, 1006], "oob_best_it": 121, "test_best_it": 121, "cv_best_it": 121, "brew": [121, 366, 383], "oob_color": 121, "212": [121, 262, 318, 365, 449, 480, 968, 995], "test_color": 121, "127": [121, 1004], "cv_color": 121, "253": [121, 195, 216, 514], "192": [121, 221, 224, 373, 1004], "oob_lin": 121, "test_lin": 121, "cv_line": 121, "dashdot": [121, 149, 152], "xticks_po": 121, "tolist": [121, 161, 170, 256, 309, 363], "xticks_label": 121, "983": [121, 133, 533, 708], "plot_gradient_boosting_oob": [121, 133], "atleast_2d": [122, 369], "expected_i": 122, "amplitud": [122, 154, 156, 191, 402, 958], "lognorm": [122, 155, 178, 246, 303, 972], "tail": [122, 162, 167, 197, 199, 257, 299, 501, 504, 958], "imposs": [122, 342, 983], "mean_pinball_loss": [122, 310, 958, 962, 1017], "all_model": 122, "min_samples_split": [122, 123, 124, 261, 269, 300, 309, 399, 537, 538, 539, 540, 544, 545, 546, 780, 781, 886, 887, 888, 889, 951, 978, 1010], "gbr": 122, "gbr_l": 122, "5th": [122, 157], "95th": [122, 728], "y_med": 122, "fill_between": [122, 135, 149, 154, 156, 158, 176, 177, 215, 257, 259, 260, 261, 267, 272, 783], "unfortun": [122, 166, 167, 215, 375, 378, 399, 488, 489], "sinoisoid": 122, "highlight_min": [122, 186], "font": [122, 186, 211, 231, 890, 892], "pbl": 122, "nbsp": [122, 186], "715413": 122, "750348": 122, "127128": 122, "253445": 122, "379763": 122, "933253": 122, "305438": 122, "622811": 122, "940184": 122, "827917": 122, "909909": 122, "145957": 122, "382005": 122, "667219": 122, "asymmetr": [122, 199, 380, 1009], "signficiantli": 122, "nor": [122, 260, 340, 351, 355, 372, 378, 400, 418, 575, 902, 966, 978, 1015], "917281": 122, "767498": 122, "617715": 122, "692901": 122, "144204": 122, "245961": 122, "347717": 122, "648026": 122, "412021": 122, "607752": 122, "803483": 122, "874771": 122, "354394": 122, "355445": 122, "356497": 122, "852774": 122, "underestim": [122, 168, 197, 215, 257, 368], "extrem": [122, 197, 199, 234, 299, 318, 341, 368, 370, 392, 397, 537, 538, 544, 545, 546, 613, 614, 660, 704, 732, 888, 889, 890, 892, 962, 964], "coverage_fract": 122, "y_low": 122, "y_high": 122, "868": [122, 142], "hypothesi": [122, 257, 263, 335, 396, 671, 675, 804, 959], "pinbal": [122, 310, 542, 651, 703, 728, 958, 1017, 1018], "experiment": [122, 161, 162, 197, 268, 269, 309, 310, 358, 368, 369, 370, 377, 378, 380, 396, 476, 529, 608, 677, 780, 781, 930, 932, 951, 952, 958, 961, 962, 982, 983, 991, 999, 1012, 1013, 1016, 1017, 1018, 1019], "enable_halving_search_cv": [122, 268, 269, 309, 780, 781, 951], "halvingrandomsearchcv": [122, 269, 309, 559, 780, 951, 1016, 1018, 1019], "make_scor": [122, 261, 396, 777, 801, 802, 962, 1013], "neg_mean_pinball_loss_05p_scor": 122, "greater_is_bett": [122, 722, 962], "search_05p": 122, "max_resourc": [122, 780, 781, 951], "min_resourc": [122, 780, 781], "redefin": [122, 167], "neg_mean_pinball_loss_95p_scor": 122, "search_95p": 122, "estimator__alpha": 122, "did": [122, 149, 167, 170, 197, 205, 215, 341, 363, 608, 693, 796, 880, 996, 1005, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1019], "untun": 122, "joint": [122, 164, 168, 175, 216, 218, 393, 592, 633, 643, 673, 814, 815, 816, 817, 818, 878, 958, 959, 963, 967, 969, 973, 1004], "9026666666666666": 122, "796": 122, "sadli": 122, "plot_gradient_boosting_quantil": [122, 133], "tackl": [123, 257, 356, 368, 392, 816, 964, 986, 991], "katrina": [123, 1015], "ni": [123, 1010, 1015], "nilichen": 123, "reg": [123, 167, 177, 300, 308, 332, 399, 538, 540, 548, 631, 632, 634, 635, 636, 637, 638, 644, 645, 646, 651, 652, 659, 660, 670, 674, 889, 958, 1009], "3025": 123, "7877": 123, "train_score_": [123, 399, 539, 540, 541, 542], "impur": [123, 349, 382, 399, 401, 533, 534, 537, 538, 539, 540, 544, 545, 546, 886, 887, 888, 889, 890, 892, 978, 999, 1009, 1010, 1011, 1012], "feature_import": 123, "sorted_idx": [123, 307], "po": [123, 221, 400], "align": [123, 162, 218, 242, 268, 342, 373, 380, 670, 674, 965, 976, 998, 999], "vert": [123, 169, 170, 307, 976], "plot_gradient_boosting_regress": [123, 133], "consider": [124, 150, 153, 252, 258, 264, 368, 402, 600, 777, 791, 951, 964, 968, 976, 986], "return_invers": [124, 369], "original_param": 124, "max_leaf_nod": [124, 197, 310, 349, 399, 537, 538, 539, 540, 541, 542, 544, 545, 546, 886, 887, 888, 889, 1007, 1013, 1015], "test_devi": 124, "641": [124, 133], "plot_gradient_boosting_regular": [124, 133], "anomali": [125, 164, 225, 235, 240, 283, 284, 363, 391, 449, 492, 502, 543, 620, 658, 825, 840, 882, 968, 1010, 1011], "recurs": [125, 140, 147, 164, 345, 369, 391, 392, 396, 421, 422, 423, 426, 443, 482, 495, 543, 574, 575, 578, 583, 613, 614, 639, 796, 883, 962, 965, 968, 969, 978, 984, 996, 999, 1004, 1014, 1015], "deform": [125, 247, 337], "notat": [125, 380, 393, 397, 400, 571, 693, 958, 962, 988, 1013, 1020], "120": [125, 179, 216, 219, 401, 571, 1004], "cluster_1": 125, "cluster_2": 125, "legend_el": [125, 210, 260], "nuniformli": 125, "max_sampl": [125, 161, 399, 535, 536, 537, 538, 543, 544, 545, 615, 1014, 1017], "isolationforestisolationforest": 125, "ax_": [125, 251, 260, 264, 304, 307, 374, 419, 612, 678, 679, 681, 682, 683, 783], "nof": 125, "483": [125, 133, 629], "plot_isolation_forest": [125, 133], "trend": [126, 154, 168, 229, 294, 402, 986, 1011], "xgboost": [126, 399, 982], "partialdependencedisplai": [126, 168, 236, 308, 309, 310, 312, 374, 614, 969, 1014, 1015, 1016, 1017, 1018, 1019], "f_0": 126, "f_1": [126, 264, 962], "gbdt_no_cst": [126, 308], "histgradientboostingregressorhistgradientboostingregressor": [126, 129, 312], "gbdt_with_monotonic_cst": 126, "monotonic_cst": [126, 308, 310, 399, 541, 542, 1019], "line_kw": [126, 236, 259, 308, 613, 783], "unconstrain": [126, 168, 308, 363, 976], "axes_": [126, 236, 308, 374, 613], "f_idx": 126, "oscil": [126, 168, 202, 392, 421], "specifii": 126, "x_df": 126, "gbdt_with_monotonic_cst_df": 126, "614": [126, 133, 149, 159], "plot_monotonic_constraint": [126, 133], "excel": [127, 362, 368, 671, 675, 958, 986], "bernoullinb": [127, 357, 815, 816, 817, 818, 963, 964, 1005, 1006, 1008, 1011, 1016, 1017, 1019], "hasher": [127, 342, 400], "transformed_grid": 127, "y_grid_pr": 127, "346": [127, 133, 399, 481, 535, 536], "plot_random_forest_embed": [127, 133], "multioutput": [128, 266, 275, 358, 369, 380, 413, 445, 462, 463, 464, 531, 534, 536, 537, 538, 540, 542, 544, 545, 548, 550, 592, 613, 614, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 659, 660, 702, 703, 708, 725, 726, 728, 730, 731, 733, 765, 768, 800, 808, 822, 830, 837, 846, 879, 881, 884, 886, 887, 888, 889, 904, 925, 926, 962, 984, 999, 1004, 1005, 1006, 1010, 1011, 1017, 1018], "multioutputregressor": [128, 413, 445, 462, 463, 464, 534, 536, 538, 540, 542, 545, 548, 550, 592, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 659, 660, 811, 813, 822, 830, 837, 879, 881, 884, 887, 889, 1010, 1011, 1013, 1015, 1016], "nativ": [128, 161, 356, 363, 380, 399, 541, 542, 811, 812, 930, 958, 962, 982, 1014, 1016], "ever": [128, 376, 399, 986], "centr": 128, "regr_multirf": 128, "regr_rf": 128, "y_multirf": 128, "y_rf": 128, "cornflowerblu": [128, 191, 200, 207, 243, 245, 248, 264, 266, 280, 282, 288, 347, 348], "601": [128, 133, 248, 249], "plot_random_forest_regression_multioutput": [128, 133], "compil": [129, 277, 342, 355, 356, 368, 369, 370, 375, 376, 378, 982, 1004], "dean": [129, 1012, 1018], "cock": [129, 1013], "becam": [129, 381, 1012], "kaggl": [129, 379], "residenti": 129, "iowa": 129, "won": [129, 295, 341, 371, 392, 448, 476, 608, 609, 611, 668, 685, 698, 716, 717, 735, 737, 773, 961, 972, 1009, 1010, 1015], "load_ames_h": 129, "yrsold": 129, "heatingqc": 129, "street": [129, 365], "yearremodadd": 129, "heat": [129, 327, 392, 432, 442, 676], "bsmtunfsf": 129, "mssubclass": 129, "condition2": 129, "garagetyp": 129, "overallqu": 129, "totalbsmtsf": 129, "miscfeatur": 129, "mosold": 129, "cat_selector": 129, "num_selector": 129, "besid": [129, 229, 368, 372, 570, 951, 1012], "cat_tree_processor": 129, "encoded_missing_valu": [129, 169, 853, 972, 1018], "num_tree_processor": 129, "add_ind": [129, 162, 608, 609, 611, 952, 1013, 1016], "tree_preprocessor": [129, 197], "0x7feaba41e580": 129, "0x7feaba41ea90": 129, "ordinalencoderordinalencod": [129, 168, 169], "cat_linear_processor": 129, "num_linear_processor": 129, "linear_preprocessor": 129, "tediou": 129, "wrote": [129, 363], "lasso_pipelin": 129, "lassocvlassocv": 129, "rf_pipelin": 129, "randomforestregressorrandomforestregressor": 129, "gbdt_pipelin": 129, "stackingregressor": [129, 307, 399, 547, 1014, 1015, 1016, 1017, 1018], "stacking_regressor": 129, "final_estim": [129, 307, 399, 547, 548], "unknown_v": 129, "stackingregressorstackingregressor": 129, "forestcolumntransform": 129, "lassocolumntransform": 129, "boostingcolumntransform": 129, "final_estimatorridgecvridgecv": 129, "cross_val_predict": [129, 253, 307, 390, 396, 399, 418, 547, 548, 801, 802, 1008, 1009, 1010, 1011, 1013, 1015, 1017], "scorer": [129, 215, 261, 369, 380, 396, 399, 541, 542, 575, 583, 615, 640, 654, 656, 692, 712, 713, 722, 777, 780, 781, 783, 791, 801, 802, 803, 806, 951, 958, 962, 970, 983, 1008, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "test_": [129, 396], "line_kwarg": [129, 682], "nevalu": 129, "208": [129, 133, 277, 365], "plot_stack_predictor": [129, 133], "exemplari": 130, "eclf": [130, 131, 399], "axarr": [130, 299], "tt": [130, 252, 445], "plot_voting_decision_region": [130, 133], "examplari": 131, "class1_1": 131, "class2_1": 131, "lightgreen": [131, 203, 214], "p3": 131, "p4": 131, "nweight": 131, "359": [131, 133, 341], "plot_voting_proba": [131, 133], "votingregressor": [132, 399, 549, 1013, 1014, 1015, 1018], "cohort": 132, "reg1": [132, 399], "reg2": [132, 399], "reg3": [132, 399], "ereg": [132, 399], "votingregressorvotingregressor": 132, "gbgradientboostingregressorgradientboostingregressor": 132, "rfrandomforestregressorrandomforestregressor": 132, "lrlinearregressionlinearregress": 132, "xt": [132, 277, 380, 608, 610, 777, 780, 781, 791, 823, 831, 839, 844, 849, 856, 867, 896], "pred1": 132, "pred2": 132, "pred3": 132, "pred4": 132, "labelbottom": [132, 257], "947": [132, 133], "plot_voting_regressor": [132, 133], "812": 133, "auto_examples_ensembl": 133, "n_fold": [135, 628, 632, 634, 636, 640, 642, 644, 1005, 1006, 1010], "scores_std": [135, 136, 992], "semilogx": [135, 136, 186, 270, 272], "std_error": 135, "transluc": 135, "999999999999999e": 135, "31622776601683794": 135, "answer": [135, 166, 257, 368, 378, 706, 736, 962, 986], "extern": [135, 149, 357, 358, 361, 365, 368, 369, 372, 378, 380, 389, 392, 400, 401, 402, 574, 591, 592, 698, 717, 773, 958, 961, 962, 965, 978, 983, 989, 995, 999, 1012, 1016], "lasso_cv": 135, "k_fold": [135, 992], "maximis": [135, 243, 285, 956, 965], "5f": [135, 311], "Not": [135, 168, 355, 368, 378, 392, 410, 411, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 449, 450, 451, 452, 453, 454, 455, 456, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 543, 546, 549, 550, 562, 563, 564, 569, 570, 572, 608, 609, 610, 611, 658, 669, 670, 671, 672, 674, 748, 772, 775, 776, 777, 780, 781, 791, 816, 819, 820, 823, 824, 825, 827, 831, 843, 851, 854, 855, 857, 870, 871, 882, 962, 968, 982, 1013], "moreov": [135, 155, 301, 311, 351, 371, 392, 396, 402, 871, 932, 962, 986, 1012, 1018, 1019], "substanti": [135, 279, 283, 284, 300, 368, 825, 968, 1008, 1011], "05968": 135, "54209": 135, "04520": 135, "15521": 135, "07880": 135, "45192": 135, "510": [135, 139, 995], "plot_cv_diabet": [135, 139], "this_scor": [136, 330], "988": [136, 139], "plot_cv_digit": [136, 139], "961111": 137, "933333": [137, 828], "149": [137, 139, 963, 1004], "plot_digits_classification_exercis": [137, 139], "200j": [138, 331], "182": [138, 139, 149, 296, 373, 399], "plot_iris_exercis": [138, 139], "829": 139, "auto_examples_exercis": 139, "exercis": [139, 357, 358, 365, 368, 481, 482, 484, 485, 633, 634, 639, 777, 782, 801, 821, 883, 989, 1007], "elimin": [140, 147, 164, 391, 392, 396, 428, 482, 495, 574, 575, 578, 583, 639, 780, 781, 796, 883, 948, 962, 984, 986, 999, 1004], "x_2": [141, 152, 194, 397, 399, 400, 402, 594, 606, 958, 966, 972], "x_3": [141, 972], "irrelev": [141, 351, 373, 394, 399, 401, 585, 720, 962], "agre": [141, 375, 381, 391, 392, 766, 988], "percept": [141, 168, 969], "correctli": [141, 145, 197, 215, 264, 266, 271, 287, 317, 327, 368, 376, 397, 399, 409, 418, 449, 473, 529, 530, 531, 533, 535, 537, 539, 541, 544, 547, 549, 591, 639, 647, 649, 655, 656, 657, 684, 772, 774, 807, 808, 809, 810, 814, 815, 816, 817, 818, 821, 826, 829, 836, 859, 873, 874, 878, 880, 881, 882, 883, 884, 886, 888, 916, 959, 962, 965, 966, 972, 977, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "mutual_info_regress": [141, 311, 401, 573, 576, 577, 580, 581, 590, 1010, 1011, 1016, 1018, 1019], "f_test": 141, "x_": [141, 150, 248, 257, 307, 369, 395, 397, 608, 616, 873, 874, 958, 964, 969, 1010], "274": [141, 147, 491], "plot_f_test_vs_mi": [141, 147], "examin": [142, 373, 375, 392, 828], "f_classif": [142, 143, 330, 401, 573, 576, 577, 579, 580, 581, 585, 587, 590], "log10": [142, 155, 167, 182, 190, 258, 327], "pvalues_": [142, 573, 576, 577, 579, 580, 581, 1004], "x_indic": 142, "p_": [142, 962, 965, 978], "svm_weight": 142, "789": [142, 212, 399], "clf_select": 142, "svm_weights_select": 142, "get_support": [142, 146, 309, 562, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 1006], "272": [142, 147, 230], "plot_feature_select": [142, 147], "mistak": [143, 316, 351, 392, 396, 715, 850, 863, 864, 866, 867, 868, 869, 958, 963], "anova_filt": 143, "anova_svm": 143, "selectkbestselectkbest": [143, 311], "linearsvclinearsvc": [143, 264], "75790919": 143, "27158706": 143, "26109741": 143, "plot_feature_selection_pipelin": [143, 147], "rfe": [144, 145, 401, 575, 578, 583, 1004, 1008, 1014, 1015, 1016, 1017, 1018, 1020], "n_features_to_select": [144, 146, 309, 401, 574, 583, 1016, 1018], "ranking_": [144, 574, 575], "plot_rfe_digit": [144, 147], "introduct": [145, 215, 255, 358, 368, 396, 397, 400, 571, 768, 769, 814, 818, 958, 960, 962, 964, 981, 989, 995, 998, 999], "class_sep": [145, 287, 495], "rfecv": [145, 401, 574, 578, 583, 1008, 1010, 1012, 1014, 1015, 1016, 1017, 1020], "stratifiedkfold": [145, 244, 252, 263, 267, 318, 396, 418, 547, 548, 575, 583, 640, 654, 777, 778, 780, 781, 782, 783, 785, 787, 791, 795, 797, 799, 800, 801, 802, 803, 804, 806, 992, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1017], "min_features_to_select": [145, 575, 1012], "n_features_": [145, 521, 574, 575, 1017, 1019], "n_score": 145, "plateau": [145, 255, 259], "662": [145, 147], "plot_rfe_with_cross_valid": [145, 147], "selectfrommodel": [146, 380, 574, 583, 584, 984, 999, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1020], "sequentialfeatureselect": 146, "greedi": [146, 399, 401, 427, 429, 440, 539, 540, 583, 958, 978], "442": [146, 162, 365, 481, 995], "descript": [146, 167, 361, 362, 367, 368, 371, 372, 375, 380, 392, 400, 432, 442, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 487, 490, 524, 611, 657, 742, 745, 758, 962, 976, 977, 983, 985, 997, 1014, 1015, 1016, 1017, 1018, 1019], "descr": [146, 361, 362, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 487, 490, 994, 1012], "_diabetes_dataset": 146, "mass": [146, 236, 365, 775, 958, 969], "blood": [146, 227, 365, 995], "pressur": [146, 365, 995], "six": [146, 198, 219, 303, 365, 1013], "serum": [146, 365], "bmi": [146, 185, 186, 236, 365, 970], "tc": [146, 365, 381], "cholesterol": [146, 365], "ldl": [146, 365], "lipoprotein": [146, 365], "hdl": [146, 365], "s4": [146, 185, 186, 365], "tch": [146, 365], "s5": [146, 185, 186, 365, 970], "ltg": [146, 365, 481], "triglycerid": [146, 365], "s6": [146, 185, 186, 365], "glu": [146, 365], "sugar": [146, 365], "www4": [146, 365], "ncsu": [146, 365], "boo": [146, 365], "bradlei": [146, 365, 958], "efron": [146, 365, 663, 664, 958], "trevor": [146, 185, 312, 365, 609, 637, 702, 703, 704, 952, 958, 974, 1008, 1009, 1012, 1013, 1014, 1016], "iain": [146, 365, 958], "johnston": [146, 365, 958, 1013], "annal": [146, 185, 365, 399, 454, 496, 497, 498, 539, 540, 637, 958], "407": [146, 365], "499": [146, 275, 276, 285, 291, 365, 373], "web": [146, 362, 363, 365, 368, 370, 375, 392, 399, 400, 501, 871, 962, 972, 1000, 1004], "stanford": [146, 365, 630, 663, 664, 814, 817, 818, 871, 960], "leastangle_2002": [146, 365], "pitfal": [146, 164, 165, 169, 171, 309, 358, 379, 380, 382, 396, 445, 447, 476, 634, 653, 654, 733, 792, 802, 805, 840, 852, 859, 958, 999], "accept": [146, 149, 254, 307, 327, 340, 342, 351, 355, 356, 362, 368, 369, 376, 378, 379, 380, 381, 386, 388, 392, 397, 400, 418, 422, 425, 426, 428, 441, 444, 447, 488, 489, 535, 536, 541, 542, 549, 550, 562, 563, 574, 575, 578, 609, 616, 620, 624, 660, 707, 722, 758, 775, 776, 780, 781, 821, 822, 829, 830, 843, 896, 898, 899, 902, 958, 960, 962, 965, 970, 972, 977, 982, 983, 992, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "tic": [146, 168, 268, 964], "sfm": 146, "toc": 146, "sequentialfeatureselector": [146, 401, 574, 578, 584, 1016, 1017, 1018, 1019, 1020], "sf": [146, 235, 257, 309, 363, 401, 472, 583], "backward": [146, 309, 370, 380, 401, 476, 557, 583, 595, 596, 599, 600, 601, 603, 604, 629, 650, 661, 891, 894, 962, 966, 983, 1004, 1007, 1012, 1013, 1014, 1016, 1018], "tic_fwd": 146, "sfs_forward": 146, "toc_fwd": 146, "tic_bwd": 146, "sfs_backward": 146, "toc_bwd": 146, "524": 146, "isn": [146, 307, 340, 342, 351, 356, 368, 375, 495, 541, 542, 575, 772, 780, 781, 852, 965, 977, 1014], "sound": [146, 351], "finish": [146, 245, 959], "expos": [146, 310, 312, 356, 361, 365, 380, 390, 399, 401, 402, 418, 444, 533, 534, 547, 548, 549, 550, 574, 575, 583, 592, 777, 780, 781, 791, 808, 809, 810, 811, 812, 813, 893, 930, 958, 962, 964, 992, 994, 996, 1001, 1004, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "805": [146, 147, 199], "plot_select_from_model_diabet": [146, 147], "545": 147, "auto_examples_feature_select": 147, "basic": [148, 159, 162, 164, 195, 332, 355, 357, 358, 368, 369, 371, 378, 380, 392, 396, 397, 399, 592, 603, 874, 886, 887, 888, 889, 951, 952, 965, 976, 981, 982, 983, 986, 995], "introductori": [148, 159, 164, 225, 592, 603, 986], "gpr": [148, 158, 159, 164, 476, 591, 592, 594, 595, 596, 597, 602, 603, 604, 605, 606, 984, 999, 1014], "mauna": [148, 159, 164, 476, 592, 596, 603, 604, 606], "loa": [148, 159, 164, 476, 592, 596, 603, 604, 606], "co2": [148, 159, 164, 476, 592, 596, 603, 604, 606, 1011], "xor": [148, 159, 164, 333, 591, 595, 603, 958, 978, 1011], "posterior": [148, 149, 150, 159, 164, 176, 257, 397, 402, 529, 530, 532, 591, 592, 594, 595, 596, 600, 603, 604, 608, 625, 626, 689, 775, 956, 982, 1010, 1013], "iso": [148, 159, 164, 220, 591, 594, 595], "trick": [149, 232, 287, 342, 354, 357, 358, 370, 378, 393, 402, 563, 570, 624, 653, 954, 955, 966, 976, 977, 995, 996, 999, 1005, 1013], "drastic": [149, 230, 265, 392, 396, 965, 975], "theorem": [149, 391, 402, 964], "period": [149, 154, 158, 371, 380, 381, 390, 402, 596, 798, 858, 1012, 1017, 1019], "reus": [149, 190, 258, 307, 342, 369, 380, 392, 393, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 615, 627, 629, 630, 633, 639, 641, 643, 647, 648, 649, 650, 657, 658, 659, 661, 836, 837, 970, 974, 986, 1011], "training_sample_indic": 149, "training_data": 149, "training_noisy_target": 149, "newer": [149, 367, 383, 397], "expsinesquar": [149, 154, 158, 402], "emb": [149, 219, 230, 286, 361, 362, 442, 676, 959], "kernel_ridg": [149, 232, 358, 1008], "length_scal": [149, 150, 153, 154, 155, 156, 158, 402, 593, 596, 600, 602, 603, 604, 605], "tell": [149, 167, 168, 257, 327, 332, 356, 363, 392, 400, 543, 559, 951, 956, 969, 997], "1e0": [149, 232, 248, 265, 951], "kernel__length_scal": 149, "kernel__period": 149, "1e1": [149, 155, 197, 232, 327], "kernel_ridge_tun": 149, "826": 149, "9915849773450223": 149, "7986499491396728": 149, "607275806426108": 149, "predictions_kr": 149, "gaussianprocessregressor": [149, 154, 155, 156, 157, 158, 402, 591, 594, 595, 596, 597, 598, 602, 605, 606, 624, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "whitekernel": [149, 154, 155, 402, 592, 593, 595, 1015], "periodicity_bound": [149, 154, 158, 596], "kernel_": [149, 150, 151, 152, 153, 154, 155, 156, 158, 591, 592], "57": [149, 167, 213, 266, 296, 365, 366, 383, 384, 385, 393, 686, 761, 812, 962, 972, 1004], "noise_level": [149, 154, 155, 402, 593, 606], "mean_predictions_gpr": 149, "std_predictions_gpr": 149, "return_std": [149, 154, 155, 156, 158, 176, 177, 380, 532, 547, 548, 592, 594, 595, 596, 597, 606, 608, 625, 626, 839, 1011, 1012, 1016], "formul": [149, 158, 266, 368, 394, 397, 400, 402, 405, 455, 529, 530, 537, 544, 631, 632, 635, 636, 637, 639, 640, 646, 651, 743, 749, 776, 880, 883, 886, 888, 962, 963, 972, 984, 999], "forc": [149, 182, 277, 303, 340, 362, 366, 371, 387, 396, 399, 430, 437, 476, 587, 590, 627, 628, 633, 634, 638, 641, 642, 643, 644, 653, 654, 655, 662, 665, 668, 734, 758, 761, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 880, 881, 882, 883, 884, 896, 898, 899, 972, 999, 1009, 1012, 1013, 1014, 1016, 1017, 1018], "capac": [149, 169], "length_scale_bound": [149, 155, 156, 158, 402, 592, 596, 600, 603, 604], "attenu": 149, "plot_compare_gpr_krr": [149, 159], "arbitrarili": [150, 243, 248, 340, 380, 402, 413, 445, 462, 463, 464, 532, 534, 536, 538, 540, 542, 545, 548, 550, 592, 616, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 650, 651, 653, 654, 659, 660, 661, 702, 703, 704, 726, 765, 769, 812, 813, 822, 830, 837, 879, 881, 884, 887, 889, 962, 965, 972, 978], "lml": [150, 151, 155, 402], "exhibit": [150, 202, 340, 382, 396, 397, 399, 402, 970], "steep": [150, 168, 266, 267, 392, 396, 402, 430, 436], "laplac": [150, 402, 591, 592, 814, 815, 816, 818, 964], "319": [150, 330, 338, 997], "gp_fix": 150, "gp_opt": 150, "log_marginal_likelihood": [150, 151, 153, 155, 158, 402, 591, 592, 1014], "theta": [150, 151, 153, 155, 157, 158, 233, 397, 402, 503, 516, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 673, 964, 978], "landscap": [150, 402], "theta0": 150, "theta1": 150, "pcolor": 150, "xscale": [150, 155, 232], "yscale": [150, 155, 197, 232, 340], "409": [150, 159, 341], "plot_gpc": [150, 159], "gpc_rbf_isotrop": 151, "gpc_rbf_anisotrop": 151, "m_max": 151, "plot_gpc_iri": [151, 159], "0256": 152, "dotproduct": [152, 153, 158, 402, 592, 606], "sigma_0": [152, 153, 158, 402, 595], "constantkernel": [152, 158, 402, 592, 598, 602, 605], "lim": [152, 514], "experi": [152, 156, 166, 167, 168, 169, 173, 199, 304, 335, 341, 342, 356, 362, 368, 370, 391, 396, 495, 708, 765, 958, 963, 974, 980, 981, 982, 986, 995, 997], "61611719": 152, "00099547": 152, "10469096": 152, "32782448": 152, "00000000": 152, "50000000": 152, "17289014": 152, "6984743": 152, "3109306": 152, "93271427": 152, "03823144": 152, "10584743": 152, "87600388": 152, "74310541": 152, "21301203": 152, "26386883": 152, "gp": [152, 157, 402, 591, 592, 603, 1010], "set_aspect": [152, 208, 244, 336], "cb": [152, 230, 246], "widehat": 152, "mathbf": [152, 397, 958, 962, 966, 967, 976], "leq": [152, 397, 399, 958, 962, 965, 976, 977, 978], "clim": 152, "666": [152, 222, 224, 319, 821, 952], "clabel": [152, 208], "334": [152, 239, 269, 273], "196": [152, 159, 875, 975], "plot_gpc_isoprob": [152, 159], "stationari": [153, 402, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606], "coincid": [153, 199, 402], "convergencewarn": [153, 155, 157, 158, 205, 212, 294, 295, 301, 376, 380, 775, 776, 1012, 1013, 1016], "k1__constant_valu": [153, 158], "bound": [153, 155, 157, 158, 164, 199, 215, 225, 240, 256, 366, 373, 374, 392, 397, 400, 402, 403, 425, 469, 482, 492, 503, 516, 576, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 616, 618, 631, 635, 639, 658, 686, 715, 775, 776, 819, 820, 856, 867, 870, 871, 872, 880, 881, 882, 885, 902, 930, 958, 961, 962, 965, 974, 976, 977, 979, 1012, 1015, 1016, 1018], "100000": [153, 232, 242, 368, 594, 595, 596, 600, 601, 603, 604, 606, 867, 955, 995, 997], "puor_r": [153, 333], "plot_gpc_xor": [153, 159], "rw2006": [154, 402, 591, 592], "ascent": [154, 402], "monthli": [154, 381, 402, 962], "atmospher": [154, 402], "ppm": 154, "observatori": [154, 402], "hawaii": [154, 402], "1958": [154, 397, 399, 402, 512], "air": [154, 744], "41187": 154, "flag": [154, 366, 368, 370, 444, 591, 592, 608, 654, 656, 708, 765, 977, 1010, 1014, 1015, 1017, 1018, 1019], "station": 154, "mlo": 154, "316": [154, 158, 341, 592, 595, 606, 855], "317": 154, "co2_data": 154, "to_datetim": 154, "timestamp": 154, "march": [154, 706, 736, 962, 1004, 1008, 1012, 1014], "dropna": 154, "nfrom": 154, "upcom": [154, 366], "to_numpi": 154, "rise": [154, 402], "irregular": [154, 392, 402, 965], "long_term_trend_kernel": 154, "decai": [154, 402, 524, 836, 837, 915, 962, 976, 1008], "seasonal_kernel": 154, "ration": [154, 604, 960], "diffus": [154, 402], "accommod": [154, 402, 1012], "rationalquadrat": [154, 158, 402, 597], "irregularities_kernel": 154, "shall": [154, 402], "phenomena": [154, 402], "noise_kernel": 154, "noise_level_bound": [154, 155, 606], "co2_kernel": 154, "subtract": [154, 167, 395, 397, 402, 424, 427, 439, 514, 625, 626, 631, 632, 635, 636, 637, 645, 646, 1011], "normalize_i": [154, 402, 592, 1018], "y_mean": [154, 155, 158, 592, 625, 626], "gaussianprocessregressorgaussianprocessregressor": 154, "todai": [154, 378, 997], "current_month": 154, "mean_y_pr": 154, "std_y_pr": 154, "536": [154, 277], "968": [154, 166, 255], "188": [154, 365, 373, 565], "0367": 154, "6ppm": 154, "464": [154, 159], "plot_gpr_co2": [154, 159], "target_gener": 155, "add_nois": 155, "minima": [155, 185, 397, 427, 673, 959, 996, 1012], "y_std": [155, 158, 532, 592, 625, 626, 1017], "k1__k2__length_scal": [155, 402], "noptimum": 155, "nlog": 155, "length_scale_grid": 155, "noise_level_grid": 155, "newshap": 155, "339": [155, 159], "plot_gpr_noisi": [155, 159], "principl": [156, 282, 304, 342, 368, 378, 380, 381, 396, 399, 402, 915, 951, 961, 965, 976, 1011], "tikhonov": [156, 402, 653], "training_indic": 156, "n_restarts_optim": [156, 402, 591, 592], "43": [156, 194, 212, 230, 257, 277, 365, 372, 777, 791], "mean_predict": 156, "std_predict": 156, "whenev": [156, 166, 351, 362, 375, 380, 383, 390, 462, 463, 464, 476, 609, 611, 953, 961, 983, 1014], "noise_std": 156, "y_train_noisi": 156, "plot_gpr_noisy_target": [156, 159], "gene": [157, 362, 389, 431, 493, 574, 575, 826, 859], "letter": [157, 363, 365, 371, 400, 768, 769, 962], "among": [157, 168, 173, 197, 247, 275, 349, 357, 363, 369, 380, 381, 390, 391, 395, 427, 429, 492, 499, 772, 804, 822, 827, 829, 880, 883, 886, 887, 888, 889, 951, 954, 962, 963, 969, 972, 977, 1004, 1010, 1011, 1014], "brighter": 157, "4th": [157, 365], "6th": 157, "haussler": 157, "1999": [157, 363, 390, 392, 394, 397, 399, 418, 430, 437, 449, 454, 514, 521, 535, 536, 539, 540, 703, 872, 880, 881, 883, 884, 968, 974], "646": 157, "technic": [157, 198, 219, 311, 363, 365, 368, 380, 399, 633, 645, 666, 667, 873, 958, 959, 965], "depart": [157, 392], "california": [157, 161, 162, 299, 309, 361, 365, 470, 999], "santa": [157, 1019], "cruz": 157, "generickernelmixin": [157, 1014], "sequencekernel": 157, "baseline_similar": 157, "baseline_similarity_bound": 157, "hyperparameter_baseline_similar": 157, "_f": [157, 958], "_g": 157, "__call__": [157, 327, 380, 400, 402, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 1011], "eval_gradi": [157, 402, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606], "is_stationari": [157, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606], "clone_with_theta": [157, 402, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606], "agct": 157, "agc": 157, "aact": 157, "taa": 157, "aaa": 157, "gaaca": 157, "training_idx": 157, "cga": 157, "taac": 157, "tcg": 157, "cttt": 157, "tgct": 157, "atag": 157, "ctc": 157, "420": 157, "plot_gpr_on_structured_data": [157, 159], "plot_gpr_sampl": 158, "gpr_model": 158, "y_sampl": [158, 592], "sample_i": [158, 402, 592, 1018], "single_prior": 158, "pm": [158, 168, 267, 399, 962], "dev": [158, 167, 215, 262, 267, 366, 368, 371, 375, 962, 986, 1000, 1011, 1016, 1019], "594": [158, 197, 256, 273], "279": [158, 958], "alpha_bound": [158, 604], "1e15": 158, "_gpr": 158, "445": [158, 970], "runtimewarn": 158, "semidefinit": [158, 972, 977], "21e": 158, "008": [158, 365, 373], "799": [158, 341], "791": 158, "sigma_0_bound": [158, 595], "629": 158, "lbfg": [158, 293, 369, 629, 630, 639, 640, 650, 653, 655, 661, 668, 810, 813, 836, 837, 958, 966, 1008, 1009, 1011, 1012, 1017, 1018, 1019], "statu": [158, 362, 371, 383, 476, 819, 820], "abnormal_termination_in_lnsrch": 158, "6576930005": 158, "matern": [158, 402, 1015, 1019], "609": [158, 373], "484": 158, "plot_gpr_prior_posterior": [158, 159], "auto_examples_gaussian_process": 159, "iterativeimput": [160, 162, 163, 164, 470, 545, 561, 609, 610, 611, 620, 626, 653, 801, 822, 840, 1013, 1014, 1015, 1016, 1018, 1019, 1020], "robin": [161, 162, 608, 952, 1010, 1013, 1018, 1019], "kneighborsregressor": [161, 234, 289, 311, 399, 550, 821, 827, 829, 830, 965, 1004, 1006, 1008, 1014, 1016, 1017, 1018, 1019], "mimic": [161, 197, 340, 795], "missforest": [161, 952], "popular": [161, 222, 363, 366, 372, 375, 378, 380, 391, 398, 399, 400, 402, 432, 442, 952, 954, 958, 960, 967, 976, 983, 992, 997], "enable_iterative_imput": [161, 162, 371, 608, 952, 1013], "fetch_california_h": [161, 162, 299, 309, 363, 379, 393, 1013, 1015], "x_full": [161, 162, 299], "y_full": [161, 162, 299], "2k": 161, "br_estim": 161, "score_full_data": 161, "neg_mean_squared_error": [161, 162, 199, 232, 271, 802, 962, 970, 1010], "x_miss": [161, 162], "y_miss": [161, 162], "missing_sampl": [161, 162], "missing_featur": [161, 162], "score_simple_imput": 161, "missing_valu": [161, 162, 237, 380, 608, 609, 610, 611, 749, 952, 1012, 1013], "score_iterative_imput": 161, "stricter": 161, "impute_estim": 161, "__class__": [161, 197, 199, 259, 301, 340, 341, 342, 374], "xerr": [161, 162, 341], "640": [161, 163, 301, 305, 390, 470, 486, 487, 564, 565, 951], "plot_iterative_imputer_variants_comparison": [161, 163], "ness": [162, 215], "auxiliari": [162, 366, 986], "district": [162, 363], "neither": [162, 167, 307, 340, 351, 378, 418, 575, 609, 902, 965, 978], "20640": [162, 363, 470], "feel": [162, 299, 367, 368, 375, 392, 978], "x_diabet": [162, 992], "y_diabet": [162, 992], "x_california": 162, "y_california": 162, "add_missing_valu": 162, "missing_r": 162, "n_missing_sampl": 162, "x_miss_california": 162, "y_miss_california": 162, "x_miss_diabet": 162, "y_miss_diabet": 162, "knnimput": [162, 307, 608, 611, 952, 1014, 1015, 1018, 1019, 1020], "get_scores_for_imput": 162, "impute_scor": 162, "x_label": 162, "mses_california": 162, "stds_california": 162, "mses_diabet": 162, "stds_diabet": 162, "get_full_scor": 162, "full_scor": 162, "get_impute_zero_scor": 162, "fill_valu": [162, 228, 237, 308, 608, 611, 972, 1012, 1020], "zero_impute_scor": 162, "unweight": [162, 210, 443, 628, 634, 659, 688, 694, 709, 710, 718, 763, 764, 767, 768, 814, 815, 816, 817, 818, 952], "get_impute_knn_scor": 162, "knn_impute_scor": 162, "get_impute_mean": 162, "mean_impute_scor": 162, "obvious": [162, 355, 997], "get_impute_it": 162, "n_nearest_featur": [162, 608], "sample_posterior": [162, 608, 952], "iterative_impute_scor": 162, "n_bar": 162, "xval": 162, "domin": [162, 197, 202, 266, 304, 363, 373, 859, 964, 972, 978], "plot_missing_valu": [162, 163], "244": [163, 565], "auto_examples_imput": 163, "prune": [164, 344, 350, 401, 480, 537, 538, 539, 540, 544, 545, 574, 625, 805, 886, 887, 888, 889, 965, 984, 999, 1004, 1007, 1014, 1015], "elast": [164, 175, 188, 208, 216, 270, 391, 451, 452, 458, 481, 504, 627, 628, 633, 638, 639, 640, 641, 642, 643, 644, 649, 657, 659, 662, 665, 765, 951, 962, 976, 984, 999, 1004, 1009, 1013, 1014], "gram": [164, 175, 216, 369, 397, 400, 469, 504, 528, 569, 570, 571, 572, 627, 628, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 645, 646, 662, 663, 664, 665, 666, 667, 747, 755, 757, 951, 972, 997, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1017, 1018], "huberregressor": [164, 175, 203, 216, 504, 651, 652, 653, 659, 660, 958, 1010, 1011, 1012, 1013], "aic": [164, 175, 185, 216, 247, 481, 632, 634, 635, 636, 637, 776, 840, 859, 951, 958, 1004, 1011, 1017, 1018], "bic": [164, 175, 185, 216, 401, 481, 632, 634, 635, 636, 637, 776, 840, 859, 951, 958, 961, 1004, 1011, 1017, 1018], "mnist": [164, 175, 205, 216, 277, 292, 297, 476, 551, 639, 805, 836, 859, 901, 958, 966], "20newgroup": [164, 175, 216, 469, 551, 639, 805, 958], "ordinari": [164, 175, 176, 199, 200, 202, 214, 216, 310, 616, 627, 633, 635, 636, 637, 638, 653, 659, 663, 664, 668, 976, 984, 999], "spline": [164, 175, 216, 496, 497, 498, 653, 840, 854, 858, 982, 1017], "ransac": [164, 175, 203, 214, 216, 504, 630, 638, 652, 659, 660], "convex": [164, 175, 216, 218, 336, 341, 392, 394, 397, 405, 432, 442, 453, 455, 456, 459, 460, 461, 639, 657, 673, 958, 959, 965, 966, 976, 1017], "theil": [164, 175, 203, 216, 630, 638, 652, 659, 660], "sen": [164, 175, 203, 216, 630, 638, 652, 659, 660], "tweedi": [164, 175, 216, 444, 476, 532, 629, 650, 661, 687, 704, 725, 727, 729, 730, 732, 805, 840, 843, 844, 852, 859, 958, 1014, 1015, 1017], "insur": [164, 175, 197, 216, 444, 476, 532, 629, 650, 661, 687, 725, 730, 732, 805, 840, 843, 844, 852, 859, 958], "claim": [164, 175, 216, 368, 444, 476, 532, 629, 650, 661, 687, 725, 730, 732, 805, 840, 843, 844, 852, 859, 958], "failur": [164, 165, 167, 171, 368, 375, 638, 765, 805, 898, 899, 985, 986, 1017, 1018], "infer": [164, 165, 167, 171, 243, 247, 248, 257, 346, 362, 369, 378, 391, 396, 397, 476, 488, 489, 495, 514, 516, 529, 530, 533, 539, 540, 613, 616, 638, 690, 703, 721, 765, 775, 776, 805, 815, 853, 873, 874, 886, 887, 888, 889, 925, 952, 958, 962, 967, 972, 975, 978, 982, 983, 991, 1005, 1009, 1010, 1015, 1018], "causal": [164, 165, 171, 638, 765, 805], "multicollinear": [164, 165, 171, 395, 480, 544, 615, 636, 805, 958, 970], "isomap": [164, 217, 220, 224, 307, 311, 399, 482, 524, 529, 546, 670, 671, 672, 673, 828, 840, 849, 871, 965, 998, 999, 1012, 1014, 1017, 1018, 1019], "And": [164, 217, 224, 257, 340, 375, 386, 392, 396, 400, 510, 569, 570, 572, 673, 674, 958, 962, 980, 1011], "hole": [164, 217, 224, 510, 673, 674, 1018], "perplex": [164, 217, 218, 222, 224, 277, 494, 505, 516, 673, 959, 1009, 1011, 1018], "johnson": [164, 225, 240, 299, 303, 360, 391, 469, 482, 855, 866, 870, 871, 872, 972, 979, 999, 1012, 1018], "lindenstrauss": [164, 225, 240, 360, 391, 469, 482, 870, 871, 872, 979, 999], "halv": [164, 250, 273, 387, 495, 544, 559, 777, 780, 781, 883, 999, 1016], "custom": [164, 236, 250, 258, 273, 279, 307, 322, 327, 338, 340, 342, 360, 363, 366, 369, 374, 375, 376, 378, 379, 380, 391, 392, 393, 396, 402, 448, 469, 473, 474, 482, 484, 518, 520, 527, 529, 537, 538, 544, 545, 551, 553, 583, 671, 694, 777, 805, 843, 876, 883, 946, 951, 956, 962, 965, 982, 983, 986, 997, 999, 1004, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1019, 1020], "det": [164, 250, 273, 394, 495, 544, 679, 707, 769, 805, 840, 859, 878, 913, 1016], "tsne": [164, 218, 219, 220, 222, 223, 278, 291, 311, 380, 406, 414, 476, 669, 670, 671, 823, 827, 840, 936, 959, 965, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "novelti": [164, 226, 278, 284, 291, 326, 825, 984, 998, 999, 1004, 1012], "lof": [164, 226, 235, 278, 291, 543, 825, 882, 968], "boltzmann": [164, 292, 297, 482, 639, 694, 805, 835, 836, 837, 839, 864, 998, 999, 1006], "mlp": [164, 168, 236, 292, 294, 297, 476, 551, 805, 836, 837, 966], "semi_supervis": [164, 309, 311, 314, 315, 316, 317, 318, 319, 320, 358, 963, 975, 1005, 1010, 1011, 1018, 1019], "tie": [164, 322, 338, 378, 399, 492, 807, 883, 963, 977, 1005, 1020], "unbalanc": [164, 260, 322, 338, 396, 492, 883, 903, 904, 951, 976], "featurehash": [164, 339, 341, 343, 357, 363, 400, 444, 468, 562, 569, 570, 571, 572, 852, 1005, 1010, 1011, 1012, 1018, 1019], "auto_examples_python": 164, "auto_examples_jupyt": 164, "great": [166, 167, 195, 351, 368, 378, 397, 744, 983, 986, 1004, 1011], "unless": [166, 243, 248, 368, 369, 370, 378, 380, 392, 395, 403, 418, 425, 428, 430, 432, 437, 438, 441, 444, 447, 452, 469, 476, 488, 489, 511, 515, 516, 517, 519, 522, 523, 525, 526, 528, 535, 536, 537, 538, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 575, 583, 591, 592, 613, 615, 620, 627, 628, 632, 633, 634, 636, 638, 639, 640, 642, 644, 646, 647, 649, 657, 660, 669, 670, 671, 672, 673, 674, 675, 690, 695, 754, 758, 761, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 812, 821, 822, 825, 827, 829, 830, 832, 833, 836, 837, 838, 841, 863, 864, 866, 867, 868, 869, 873, 874, 886, 887, 888, 889, 894, 898, 899, 915, 930, 958, 961, 963, 1004, 1006, 1010, 1012, 1015, 1016], "willing": [166, 254], "econom": [166, 167, 257], "educ": [166, 167, 368, 697, 963], "earn": [166, 167, 381], "polici": [166, 167, 197, 215, 380, 515, 521, 958, 1019], "maker": [166, 167], "ovb": [166, 167], "parent_hourly_wag": 166, "college_degre": 166, "true_coef": [166, 192], "hourly_wag": 166, "stori": [166, 257, 363, 961], "pairplot": [166, 167], "diag_kind": [166, 167], "kde": [166, 167, 281, 282, 290, 398, 824], "features_nam": [166, 1011], "regressor_with_": 166, "y_pred_with_": 166, "r2_with_abl": 166, "975": [166, 977], "model_coef": 166, "intellectu": 166, "proxi": [166, 167, 397, 835, 992, 1009], "inadvert": [166, 380], "iq": 166, "regressor_without_": 166, "y_pred_without_": 166, "r2_without_": 166, "incorrect": [166, 264, 318, 351, 368, 392, 588, 589, 613, 614, 714, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017], "brought": [166, 533, 534, 537, 538, 539, 540, 544, 545, 546, 886, 887, 888, 889], "unobserv": [166, 167, 397], "confound": [166, 167], "conduct": [166, 257, 402, 982, 1018], "prohibit": [166, 396, 399, 608, 967, 975, 1011], "uneth": 166, "iv": [166, 962], "505": [166, 171], "plot_causal_interpret": [166, 171], "hint": [167, 355, 372, 386, 428, 962, 995], "aris": [167, 260, 335, 356, 372, 392, 696, 958, 959, 1016], "mathemat": [167, 185, 214, 260, 360, 365, 368, 380, 382, 391, 394, 397, 398, 529, 530, 537, 544, 616, 627, 637, 770, 771, 776, 837, 880, 883, 886, 888, 962, 972, 974, 984, 986, 995, 999, 1018], "survei": [167, 395], "1985": [167, 392, 686, 696, 766], "race": [167, 363, 1007], "occup": [167, 299], "sector": 167, "marr": 167, "not_memb": 167, "marri": 167, "freq": [167, 342], "378": [167, 399, 997, 1004], "289": 167, "438": [167, 970], "440": 167, "156": [167, 168, 253, 273, 365], "411": [167, 394, 404, 453, 513], "350": 167, "018727": 167, "822097": 167, "833333": 167, "615373": 167, "379710": 167, "726573": 167, "thereaft": [167, 176], "hispan": 167, "manufactur": 167, "unmarri": 167, "dollar": [167, 363], "exploratori": [167, 986], "emul": [167, 375], "train_dataset": [167, 362], "rangeindex": 167, "533": 167, "normalis": [167, 592, 997], "numerical_column": [167, 169, 447], "if_binari": [167, 239, 852, 972, 1015], "prepend": [167, 1004], "exp10": 167, "ufunc": 167, "passthroughpassthroughtransformedtargetregressor": 167, "transformedtargetregressortransformedtargetregressor": 167, "ridgeridg": 167, "mae_train": 167, "mae_test": 167, "learnt": [167, 351, 380, 396, 951], "obviou": [167, 351, 355, 389, 397], "regressor_": [167, 445, 574, 575, 578], "race_hispan": 167, "013519": 167, "race_oth": 167, "009075": 167, "race_whit": 167, "022594": 167, "occupation_cler": 167, "000045": 167, "occupation_manag": 167, "090528": 167, "occupation_oth": 167, "025102": 167, "occupation_profession": 167, "071964": 167, "occupation_sal": 167, "046636": 167, "occupation_servic": 167, "091053": 167, "sector_construct": 167, "000198": 167, "sector_manufactur": 167, "031255": 167, "sector_oth": 167, "031025": 167, "marr_unmarri": 167, "032405": 167, "union_not_memb": 167, "117154": 167, "sex_mal": 167, "090808": 167, "south_y": 167, "033823": 167, "054699": 167, "035005": 167, "030867": 167, "adimension": 167, "Their": [167, 363, 365, 381, 392, 625, 1004], "visibl": [167, 168, 199, 337, 362, 368, 392, 835, 967, 1009, 1019], "gaug": 167, "decad": [167, 983], "x_train_preprocess": 167, "multipli": [167, 215, 257, 355, 376, 380, 397, 399, 400, 405, 444, 455, 495, 518, 520, 521, 527, 537, 541, 544, 627, 629, 633, 635, 639, 640, 641, 643, 649, 650, 651, 653, 657, 658, 659, 661, 667, 668, 670, 674, 744, 880, 881, 882, 883, 884, 886, 888, 904, 938, 939, 940, 951, 958, 962, 976, 1015], "coef_i": 167, "std_i": 167, "emphas": [167, 337, 373, 397, 962], "perturb": [167, 214, 296, 397, 399, 961], "caution": [167, 371, 421, 434, 1012], "repeatedkfold": [167, 396, 782, 793, 1011], "cv_model": 167, "return_estim": [167, 396, 802, 1012], "train_idx": [167, 380], "stripplot": 167, "whi": [167, 169], "collinear": [167, 170, 202, 215, 399, 547, 629, 650, 661, 852, 958, 1004], "teas": 167, "apart": [167, 310, 327, 378, 380, 393, 395, 401, 705, 977, 986, 1012], "vice": [167, 254, 340, 392, 402, 423, 588, 589, 808, 1008], "versa": [167, 254, 340, 392, 402, 423, 588, 589, 808, 1008], "column_to_drop": 167, "said": [167, 226, 258, 341, 363, 368, 770, 960, 968, 988, 995], "unchang": [167, 215, 264, 399, 414, 423, 424, 426, 427, 429, 444, 448, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 546, 547, 548, 549, 550, 562, 563, 564, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 669, 670, 743, 814, 815, 816, 818, 823, 828, 831, 835, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 867, 870, 871, 876, 965, 988, 1012, 1018], "neglig": [167, 965, 1007], "littl": [167, 168, 169, 170, 226, 363, 400, 442, 625, 777, 791, 915, 952, 959, 961, 977, 978, 995, 1005, 1016], "ridgecvridgecv": 167, "alon": [167, 263, 327, 380, 386, 629, 650, 661, 722, 1011, 1013], "suppress": [167, 355, 375, 673, 965, 1011], "themselv": [167, 299, 364, 375, 380, 389, 392, 399, 400, 402, 596, 770, 978, 997, 1014], "bring": [167, 299, 397, 657, 659, 959, 986], "certain": [167, 202, 214, 257, 277, 303, 351, 363, 364, 371, 382, 392, 397, 401, 619, 630, 634, 639, 644, 665, 844, 878, 951, 954, 958, 959, 962, 963, 966, 972, 977, 988, 992, 1009, 1013, 1016, 1019], "entic": 167, "pursu": 167, "tempt": 167, "conclud": [167, 177, 215, 257, 342, 351, 381], "deflat": [167, 395, 404, 513], "presum": [167, 275, 392, 400, 814], "must": [167, 168, 170, 178, 214, 215, 226, 236, 252, 283, 300, 340, 351, 363, 367, 368, 369, 371, 373, 375, 380, 381, 388, 390, 392, 393, 396, 397, 399, 400, 401, 402, 403, 412, 419, 422, 425, 426, 427, 429, 430, 431, 435, 437, 439, 441, 442, 444, 446, 447, 449, 454, 467, 488, 489, 492, 503, 511, 517, 519, 521, 523, 524, 533, 534, 539, 540, 541, 542, 547, 548, 562, 563, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 591, 592, 598, 601, 608, 609, 610, 611, 613, 614, 619, 623, 624, 629, 630, 633, 639, 640, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 663, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 680, 684, 687, 690, 715, 726, 744, 751, 754, 758, 761, 768, 770, 771, 772, 774, 775, 776, 777, 778, 780, 781, 782, 784, 786, 787, 789, 791, 792, 793, 795, 796, 798, 805, 814, 815, 816, 817, 818, 821, 822, 823, 825, 827, 828, 829, 830, 831, 834, 835, 836, 837, 839, 842, 843, 844, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 878, 879, 880, 881, 882, 883, 884, 885, 891, 930, 937, 946, 948, 951, 952, 958, 959, 960, 962, 965, 966, 968, 969, 976, 977, 978, 988, 997, 1004, 1007, 1011, 1015, 1017, 1018], "respond": [167, 368, 392], "290": [167, 171, 316, 669, 670, 674, 959], "plot_linear_model_coefficient_interpret": [167, 171], "complement": [168, 267, 340, 613, 614, 779, 794, 797, 805, 814, 815, 816, 817, 818, 969, 984, 999, 1012], "molnar": [168, 969], "christoph": [168, 397, 402, 512, 591, 592, 595, 600, 603, 775, 958, 963, 1005, 1009, 1012, 1015, 1016, 1017, 1018, 1019], "goldstein": [168, 969], "kapeln": [168, 969], "bleich": [168, 969], "pitkin": [168, 969], "peek": [168, 368, 969], "settingwithcopywarn": 168, "8734": 168, "8645": 168, "mask_train": [168, 215], "accordingli": [168, 368, 371, 372, 1011, 1012, 1019], "8644": 168, "574": [168, 514, 521], "nomin": [168, 362, 380, 381, 399, 400, 562, 563, 697, 972, 983], "numerical_featur": 168, "xtick_start": 168, "xtick_period": 168, "average_bike_rent": 168, "numeric_onli": 168, "decor": [168, 307, 368, 369, 376, 783, 905, 909, 910, 922, 923, 929, 1014, 1017], "strike": 168, "mlp_preprocessor": 168, "quantiletransformerquantiletransform": 168, "catindex": 168, "hgbdt_preprocessor": 168, "sparse_threshold": [168, 444, 447, 1012], "passthroughpassthrough": 168, "pdp": [168, 613, 969, 1018], "mlp_model": 168, "hidden_layer_s": [168, 236, 293, 295, 836, 837, 966], "learning_rate_init": [168, 294, 295, 836, 837], "early_stop": [168, 205, 293, 310, 340, 380, 399, 541, 542, 647, 648, 649, 657, 658, 659, 836, 837, 976, 1012, 1015, 1018, 1019], "forget": [168, 351, 356, 362, 371, 378, 397, 959, 985], "poor": [168, 173, 263, 272, 318, 390, 396, 397, 671, 675, 718, 816, 819, 820, 956, 957, 959, 964, 983, 988, 1011, 1012, 1013, 1015, 1017], "grid_resolut": [168, 309, 325, 612, 613, 614], "features_info": 168, "hgbdt_model": 168, "361": [168, 363, 399, 535, 536], "cheaper": [168, 392, 402, 654, 954, 958], "temperatur": [168, 400, 969], "wind": [168, 963], "earlier": [168, 362, 368, 395, 810, 813, 972, 980, 1002, 1005, 1017, 1019], "meaningless": [168, 400, 880, 883, 1007], "celsiu": [168, 969], "interaction_cst": [168, 312, 399, 541, 542, 1019], "hgbdt_model_without_interact": 168, "histgradientboostingregressor__interaction_cst": 168, "heatmap": [168, 170, 176, 268, 312, 327, 613, 969], "slope": [168, 195, 199, 214, 390, 392, 703, 728, 960, 962], "dry": 168, "wetter": 168, "435": 168, "spike": 168, "degrad": [168, 226, 299, 341, 398], "somehow": 168, "forbidden": [168, 399], "noisili": 168, "976": [168, 189], "partial_depend": [168, 613, 969, 1005, 1013, 1014, 1015, 1016, 1019], "add_ax": [168, 222, 268], "surf": 168, "rstride": 168, "cstride": 168, "bupu": 168, "nthe": [168, 255, 349], "pretti": [168, 222, 255, 340, 355, 368, 378, 836, 837, 966, 1013], "view_init": [168, 218, 220, 222], "clb": 168, "ndepend": 168, "280": [168, 171, 316], "plot_partial_depend": [168, 171, 307, 308, 309, 1009, 1013, 1014, 1015, 1016, 1017, 1018], "mitig": [169, 356, 357, 959, 978, 995, 996, 1016], "breiman": [169, 396, 399, 496, 497, 498, 535, 536, 544, 545, 615, 886, 887, 970, 978], "random_num": 169, "random_cat": 169, "sibsp": [169, 312], "parch": [169, 312], "categorical_encod": 169, "numerical_pip": 169, "memor": 169, "814": [169, 995], "mdi_import": 169, "sorted_importances_idx": 169, "retri": [169, 476, 1012, 1018], "classifier__min_samples_leaf": 169, "anymor": [169, 197, 259, 307, 308, 327, 351, 371, 393, 651, 1010, 1013, 1016, 1017, 1018, 1020], "810": 169, "832": [169, 399, 535, 536], "train_result": 169, "test_result": 169, "train_import": 169, "test_import": 169, "039": [169, 171, 193, 216, 255, 731, 761, 962], "plot_permutation_import": [169, 171], "wisconsin": [170, 361, 480, 999, 1009], "spearman": [170, 616, 617, 953], "spearmanr": 170, "squareform": 170, "load_breast_canc": [170, 318, 345, 372, 573, 576, 577, 579, 655, 656, 768, 962, 1009, 1010, 1015], "contradict": [170, 983], "perm_sorted_idx": 170, "tree_importance_sorted_idx": 170, "tree_indic": 170, "fill_diagon": [170, 221], "distance_matrix": 170, "dist_linkag": 170, "dendro": 170, "leaf_rot": 170, "dendro_idx": 170, "ivl": 170, "cluster_id": [170, 341], "fcluster": 170, "cluster_id_to_feature_id": 170, "selected_featur": 170, "x_train_sel": 170, "x_test_sel": 170, "clf_sel": 170, "plot_permutation_importance_multicollinear": [170, 171], "528": [171, 316, 321], "auto_examples_inspect": 171, "polynomialcountsketch": [173, 620, 622, 954, 1016, 1018], "covtyp": 173, "tensor": [173, 360, 397, 518, 520, 527, 620, 621, 622, 999, 1016], "sketch": [173, 357, 360, 376, 391, 620, 621, 622, 927, 999, 1016], "daniel": [173, 312, 355, 986, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1016, 1018], "lopez": 173, "sanchez": [173, 1012, 1013], "lope": 173, "usal": 173, "581": 173, "54": [173, 197, 200, 240, 363, 365, 392, 471, 1005, 1006], "cartograph": 173, "remot": [173, 316, 368, 370], "fetch_covtyp": [173, 235, 309, 363, 1013, 1016, 1018], "5_000": 173, "mm": 173, "lsvm": 173, "lsvm_time": 173, "lsvm_score": 173, "thumb": [173, 355, 368, 378, 392, 639, 640, 647, 649, 657, 658, 659, 878, 962], "condens": 173, "compact": [173, 299, 355, 365, 819, 820, 978, 1006], "ps_lsvm_time": 173, "ps_lsvm_score": 173, "ksvm": 173, "ksvm_time": 173, "ksvm_score": 173, "pham": [173, 954, 1011], "ninh": 173, "rasmu": [173, 1011], "pagh": [173, 954], "kdd": [173, 363, 390, 418, 974], "doi": [173, 197, 215, 368, 392, 657], "1145": [173, 392, 657], "2487575": 173, "2487591": 173, "csie": [173, 362, 467, 488, 489, 639], "ntu": [173, 362, 467, 488, 489, 639], "tw": [173, 362, 467, 488, 489, 639, 977], "cjlin": [173, 362, 467, 488, 489, 639, 1007], "libsvmtool": [173, 362, 467, 488, 489], "162": [173, 174, 365], "plot_scalable_poly_kernel": [173, 174], "auto_examples_kernel_approxim": 174, "ard": [176, 625, 626], "ol": [176, 187, 192, 194, 195, 203, 214, 310, 637, 958], "true_weight": 176, "ardregress": [176, 626, 958, 1011, 1012, 1013, 1015, 1016, 1017, 1018], "olr": 176, "brr": 176, "symlognorm": 176, "linthresh": 176, "10e": 176, "cbar_kw": 176, "seismic_r": 176, "stabilis": 176, "sparser": [176, 188, 397, 451, 458, 519, 523, 958, 965, 976], "retain": [176, 380, 392, 395, 396, 400, 474, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 676, 677, 795, 852, 951, 975, 1004], "ard_scor": 176, "scores_": [176, 177, 573, 576, 577, 579, 580, 581, 625, 626, 640, 1004, 1014], "brr_score": 176, "cutoff": [176, 920, 972, 1013], "full_data": 176, "input_featur": [176, 369, 380, 408, 412, 423, 424, 426, 427, 429, 444, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 546, 547, 548, 549, 550, 562, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 669, 670, 823, 828, 831, 835, 838, 839, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 1020], "x_plot": [176, 198, 203, 232, 260, 282, 304], "y_plot": [176, 198, 203, 260], "ard_poli": 176, "brr_poli": 176, "y_ard": 176, "y_ard_std": 176, "y_brr": 176, "y_brr_std": 176, "queri": [176, 290, 355, 371, 398, 403, 425, 430, 437, 532, 591, 592, 609, 625, 626, 706, 736, 819, 820, 821, 822, 823, 824, 825, 827, 829, 830, 831, 962, 965, 978, 982, 1006, 1008, 1009, 1012], "lambda_init": [176, 177, 626, 958, 1014], "intrins": [176, 380, 397, 399, 965, 970, 976, 1016], "720": [176, 216], "plot_ard": [176, 216, 625], "alpha_init": [177, 626, 958, 1014], "yoshihiro": [177, 1014], "uchida": [177, 1014], "nimbus1after2a1sun7show": 177, "1234": [177, 245, 260, 368], "n_order": 177, "vander": 177, "ymean": 177, "ystd": 177, "pink": 177, "_init": 177, "lambda_": [177, 625, 626, 855, 958, 1011], "plot_bayesian_ridge_curvefit": [177, 216], "normalized_weight": 178, "x_offset": 178, "x_center": 178, "x_scale": [178, 849, 864, 972], "uncent": 178, "incorrectli": [178, 399, 400, 533, 539, 541, 714, 720, 962, 1005, 1010, 1012, 1013, 1015], "lm": 178, "98809919e": 178, "48938813e": 178, "03237920e": 178, "25349312e": 178, "53959628e": 178, "67451144e": 178, "00768662e": 178, "19112072e": 178, "07963978e": 178, "47987268e": 178, "76195467e": 178, "00393284e": 178, "07582983e": 178, "66670169e": 178, "65799352e": 178, "99891212e": 178, "58195950e": 178, "58667835e": 178, "98350372e": 178, "60836363e": 178, "00911944e": 178, "elasticnetelasticnet": 178, "248": [178, 216], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [178, 216], "huber": [179, 207, 391, 399, 540, 630, 657, 659, 976, 1004, 1006, 1007, 1016], "mks542": 179, "x_outlier": [179, 211, 283, 284, 326], "y_outlier": 179, "epsilon_valu": 179, "intercept_": [179, 187, 189, 206, 233, 325, 332, 336, 369, 380, 462, 463, 464, 529, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 878, 879, 880, 881, 882, 883, 884, 956, 958, 976, 977, 1004, 1011, 1016, 1018], "coef_ridg": 179, "plot_huber_vs_ridg": [179, 216], "logreg": [180, 813], "plot_method": [180, 280, 285, 323, 325, 328, 329, 612], "049": [180, 216, 451], "plot_iris_logist": [180, 216], "y_pred_lasso": 181, "r2_score_lasso": 181, "658064": 181, "enet": [181, 270], "y_pred_enet": 181, "r2_score_enet": 181, "642515": 181, "markerfmt": 181, "2ca02c": 181, "ff7f0e": 181, "bx": 181, "plot_lasso_and_elasticnet": [181, 216], "penalis": [182, 195, 212, 677], "lasso_path": [182, 632, 633, 634, 635, 636, 637, 644, 663, 664, 958, 1004, 1006, 1008, 1017], "enet_path": [182, 380, 628, 1006, 1008, 1017], "alphas_lasso": 182, "coefs_lasso": 182, "alphas_positive_lasso": 182, "coefs_positive_lasso": 182, "alphas_enet": 182, "coefs_enet": 182, "alphas_positive_enet": 182, "coefs_positive_enet": 182, "neg_log_alphas_lasso": 182, "neg_log_alphas_enet": 182, "coef_l": 182, "neg_log_alphas_positive_lasso": 182, "coef_pl": 182, "neg_log_alphas_positive_enet": 182, "coef_p": 182, "plot_lasso_coordinate_descent_path": [182, 216, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665], "sai": [183, 226, 335, 340, 341, 368, 392, 393, 397, 399, 400, 427, 480, 484, 490, 658, 951, 968, 975, 986, 994, 995, 997], "x_sp": 183, "sparse_lasso": 183, "dense_lasso": 183, "coeff_diff": 183, "2e": [183, 271], "114": [183, 312, 1004], "041": 183, "01e": 183, "xs_sp": 183, "tocsc": 183, "nnz": [183, 341, 363, 680], "136": 183, "853": 183, "65e": 183, "242": [183, 216, 244, 249, 859, 1004], "plot_lasso_dense_vs_sparse_data": [183, 216], "lars_path": [184, 376, 511, 517, 519, 522, 523, 525, 526, 528, 631, 632, 633, 634, 635, 636, 637, 644, 645, 646, 664, 665, 666, 667, 958, 1004, 1006, 1009, 1013, 1015], "plot_lasso_lar": [184, 216], "zht2007": 185, "lassolars": [185, 186, 401, 632, 635, 636, 958, 1004, 1011, 1013, 1017, 1018], "2173": [185, 637, 958], "2192": [185, 637, 958], "038076": [185, 186], "050680": [185, 186], "061696": [185, 186], "021872": [185, 186], "044223": [185, 186], "034821": [185, 186], "043401": [185, 186], "002592": [185, 186], "019907": [185, 186], "017646": [185, 186], "001882": [185, 186], "044642": [185, 186], "051474": [185, 186], "026328": [185, 186], "008449": [185, 186], "019163": [185, 186], "074412": [185, 186], "039493": [185, 186], "068332": [185, 186], "092204": [185, 186], "085299": [185, 186], "044451": [185, 186], "005670": [185, 186], "045599": [185, 186], "034194": [185, 186], "032356": [185, 186], "002861": [185, 186], "025930": [185, 186], "089063": [185, 186], "011595": [185, 186], "036656": [185, 186], "012191": [185, 186], "024991": [185, 186], "036038": [185, 186], "034309": [185, 186], "022688": [185, 186], "009362": [185, 186], "005383": [185, 186], "036385": [185, 186], "003935": [185, 186], "015596": [185, 186], "008142": [185, 186], "031988": [185, 186], "046641": [185, 186], "linearlars": 185, "akaik": [185, 186, 247, 637, 776, 951, 958], "lasso_lars_": [185, 186], "zou_et_al_criterion_resc": 185, "noise_vari": [185, 512, 637, 958, 1018], "aic_criterion": 185, "criterion_": [185, 186, 637], "index_alpha_path_a": 185, "alphas_": [185, 186, 628, 631, 632, 634, 635, 636, 637, 642, 644, 663, 664, 1004, 1007, 1017], "lassolarsic__criterion": [185, 186], "bic_criterion": 185, "index_alpha_path_b": 185, "113": [185, 216, 373, 1007], "plot_lasso_lars_": [185, 216], "n_random_featur": 186, "x_random": 186, "random_": 186, "02d": 186, "random_02": 186, "random_05": 186, "random_08": 186, "random_11": 186, "647689": 186, "234137": 186, "469474": 186, "465730": 186, "012831": 186, "412304": 186, "067528": 186, "110923": 186, "601707": 186, "057711": 186, "208864": 186, "196861": 186, "478522": 186, "057122": 186, "324084": 186, "611676": 186, "331263": 186, "185659": 186, "812526": 186, "003533": 186, "alpha_a": 186, "alpha_b": 186, "160030": 186, "5244": 186, "764779": 186, "300343": 186, "5208": 186, "250639": 186, "5212": 186, "341949": 186, "542052": 186, "4928": 186, "018900": 186, "4936": 186, "201520": 186, "034077": 186, "4869": 186, "678359": 186, "4881": [186, 1009], "952289": 186, "189631": 186, "4815": 186, "437362": 186, "4831": [186, 636], "802601": 186, "329616": 186, "4810": 186, "423641": 186, "4830": 186, "880191": 186, "306012": 186, "4803": 186, "573491": 186, "4828": 186, "121351": 186, "124225": 186, "4804": 186, "126502": 186, "4832": 186, "765671": 186, "820705": 186, "621645": 186, "4836": 186, "352124": 186, "750389": 186, "4805": 186, "012521": 186, "4841": 186, "834310": 186, "570655": 186, "290075": 186, "4846": 186, "203174": 186, "550213": 186, "4807": 186, "075887": 186, "4852": 186, "080295": 186, "358295": 186, "4806": 186, "878051": 186, "4855": 186, "973770": 186, "259297": 186, "706026": 186, "4860": 186, "893055": 186, "237703": 186, "4809": [186, 260], "440409": 186, "4866": 186, "718747": 186, "850031": 186, "989341": 186, "4867": 186, "358990": 186, "384338": 186, "4801": 186, "702266": 186, "163224": 186, "296575": 186, "4802": 186, "594754": 186, "4872": 186, "147022": 186, "031555": 186, "236720": 186, "4874": 186, "880298": 186, "618263": 186, "4798": 186, "484109": 186, "4876": 186, "218997": 186, "526599": 186, "4799": 186, "543841": 186, "370039": 186, "586798": 186, "4794": 186, "238744": 186, "4880": 186, "156252": 186, "445978": 186, "4795": 186, "589715": 186, "4885": 186, "598533": 186, "259031": 186, "4796": 186, "966981": 186, "4891": 186, "067109": 186, "032179": 186, "662409": 186, "4894": 186, "853846": 186, "019069": 186, "652739": 186, "4888": 186, "752867": 186, "626286": 186, "817724": 186, "set_xscal": [186, 201, 202], "optimist": [186, 262, 340, 351, 688, 958, 962], "proper": [186, 215, 357, 399, 420, 429, 521, 533, 657, 915, 937, 957, 958, 959, 962, 977, 1004, 1014, 1015, 1016, 1017, 1018, 1019], "badli": [186, 197, 340, 357, 859, 958, 972], "lassolarscv": [186, 401, 633, 634, 635, 637, 644, 646, 663, 664, 665, 958, 1004, 1011, 1017], "3800": 186, "mse_path_": [186, 628, 632, 634, 636, 642, 644], "cv_alphas_": [186, 632, 636, 1016], "kink": 186, "heavili": [186, 355, 356, 368, 375, 630, 636, 979], "efficaci": 186, "262": [186, 216, 1004], "plot_lasso_model_select": [186, 216, 628, 634], "plot_logist": [187, 216], "axes_row": 188, "clf_l1_lr": 188, "clf_l2_lr": 188, "clf_en_lr": 188, "coef_l1_lr": 188, "coef_l2_lr": 188, "coef_en_lr": 188, "sparsity_l1_lr": 188, "sparsity_l2_lr": 188, "sparsity_en_lr": 188, "nl1_ratio": 188, "550": [188, 216], "plot_logistic_l1_l2_spars": [188, 216], "995": 189, "plot_logistic_multinomi": [189, 216], "dupr": [189, 205, 277, 279, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "m4x": [189, 213], "sag": [189, 204, 639, 640, 653, 655, 668, 958, 976, 982, 1009, 1010, 1011, 1013, 1014], "bry": [189, 206], "classes_": [189, 206, 227, 266, 315, 316, 368, 369, 380, 418, 419, 529, 530, 531, 533, 535, 537, 539, 541, 544, 547, 549, 574, 575, 591, 639, 640, 647, 649, 655, 656, 657, 678, 681, 683, 768, 777, 780, 781, 791, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 821, 826, 829, 836, 839, 846, 847, 850, 873, 874, 875, 878, 880, 883, 886, 888, 891, 962, 973, 976, 1005, 1008, 1009, 1011, 1014, 1016], "plot_hyperplan": [189, 206, 233], "235": [189, 216], "looser": 190, "liblinear": [190, 325, 373, 639, 640, 768, 878, 879, 880, 883, 884, 962, 977, 1004, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "l1_min_c": [190, 958, 977, 1004], "intercept_sc": [190, 639, 640, 878, 879, 885, 958], "coefs_": [190, 295, 836, 837, 966, 1009], "plot_logistic_path": [190, 216], "jointli": [191, 264, 391, 392, 397, 958], "instant": 191, "wave": [191, 368, 961], "n_task": [191, 958], "n_relevant_featur": 191, "multitasklasso": [191, 633, 641, 644, 958, 1004, 1012, 1015, 1017], "coef_lasso_": 191, "coef_multi_task_lasso_": 191, "spy": 191, "feature_to_plot": 191, "seagreen": 191, "293": [191, 216], "plot_multi_task_lasso_support": [191, 216], "reg_nnl": 192, "y_pred_nnl": 192, "r2_score_nnl": 192, "nnl": [192, 638], "8225220806196526": 192, "reg_ol": 192, "y_pred_ol": 192, "r2_score_ol": 192, "7436926291700356": 192, "low_x": 192, "high_x": 192, "low_i": 192, "high_i": 192, "get_ylim": [192, 299, 300], "847222222222214": 192, "071": [192, 216, 365, 418], "plot_nnl": [192, 216], "23786125": 193, "2548": 193, "diabetes_x": [193, 995], "diabetes_i": [193, 995], "diabetes_x_train": [193, 995], "diabetes_x_test": [193, 995], "diabetes_y_train": [193, 995], "diabetes_y_test": [193, 995], "regr": [193, 393, 534, 536, 545, 627, 628, 648, 812, 837, 879, 881, 884, 977, 995], "diabetes_y_pr": 193, "plot_ol": [193, 216], "plot_ols_3d": [194, 216], "greatli": [195, 231, 312, 368, 375, 432, 965, 978, 1010, 1018], "plot_ols_ridge_vari": [195, 216], "orthogonalmatchingpursuit": [196, 646, 666, 667, 958, 1004, 1006, 1009, 1012, 1017], "orthogonalmatchingpursuitcv": [196, 645, 1006, 1017], "make_sparse_coded_sign": [196, 511, 517, 1018], "n_nonzero_coef": [196, 506, 511, 517, 522, 528, 631, 645, 666, 667], "xw": [196, 310, 627, 628, 630, 633, 634, 635, 636, 637, 641, 642, 643, 644, 653, 662, 663, 664, 665, 958], "_0": [196, 666, 958, 962, 977], "data_transpos": [196, 506, 511, 517, 1018], "distort": [196, 230, 365, 390, 391, 856, 867, 872, 959, 972, 974], "y_noisi": 196, "idx_r": 196, "omp_cv": 196, "251": [196, 216, 220, 365], "plot_omp": [196, 216], "gbrt": [197, 399], "contract": [197, 215, 356, 380, 983], "compani": [197, 215, 392, 986], "policyhold": [197, 215, 958], "vehicl": [197, 215], "driver": [197, 215, 1019], "exposur": [197, 215, 958], "accid": [197, 215], "noll": [197, 215], "salzmann": [197, 215], "wuthrich": [197, 215], "novemb": [197, 215, 365, 1009, 1010, 1012], "2139": [197, 215], "ssrn": [197, 215], "3164764": [197, 215], "ch": [197, 199, 215, 318, 320], "rth": [197, 215], "41214": [197, 215], "idpol": [197, 215], "claimnb": [197, 215], "vehpow": [197, 215], "vehag": [197, 215], "drivag": [197, 215], "bonusmalu": [197, 215], "vehbrand": [197, 215], "vehga": [197, 215], "b12": [197, 215], "1217": 197, "r82": 197, "77000": 197, "75000": 197, "diesel": [197, 215], "r22": 197, "09000": 197, "r72": 197, "84000": 197, "678008": 197, "6114326": 197, "00274": 197, "3317": 197, "r93": 197, "678009": 197, "6114327": 197, "9850": 197, "r11": [197, 215], "678010": 197, "6114328": 197, "1323": 197, "678011": 197, "6114329": 197, "r26": 197, "678012": 197, "6114330": 197, "678013": [197, 215], "10070308464041304": 197, "log_scale_transform": [197, 215], "linear_model_preprocessor": 197, "passthrough_numer": [197, 215], "binned_numer": [197, 215], "2e5": [197, 215, 844], "log_scaled_numer": [197, 215], "onehot_categor": [197, 215], "imbalanc": [197, 260, 264, 266, 341, 378, 390, 396, 684, 689, 767, 778, 782, 816, 962, 964, 970, 982], "simplist": [197, 400], "pertin": 197, "dummyregressor": [197, 215, 531, 962, 1005, 1007, 1008, 1011, 1012, 1014, 1017, 1018], "df_train": [197, 215], "df_test": [197, 215], "regressor__sample_weight": 197, "mean_absolute_error": [197, 199, 215, 962, 1005, 1007], "mean_poisson_devi": [197, 962, 1014], "score_estim": [197, 215], "n_mask": 197, "564": [197, 342], "189": [197, 373, 875, 975], "comonli": 197, "ridge_glm": 197, "strictli": [197, 215, 299, 341, 372, 380, 395, 397, 400, 488, 489, 515, 521, 524, 541, 542, 569, 572, 623, 651, 652, 676, 681, 719, 777, 780, 781, 787, 791, 802, 828, 855, 866, 870, 871, 873, 874, 878, 879, 883, 884, 913, 951, 953, 958, 962, 972, 976, 1005, 1015, 1020], "domain": [197, 380, 382, 396, 616, 702, 703, 704, 778, 779, 784, 785, 786, 958, 983], "186": [197, 288, 291, 296, 373, 768, 962], "223745": 197, "597": [197, 341], "glm": [197, 215, 308, 629, 650, 661, 958, 1004, 1015], "vanilla": [197, 392, 427, 429, 440, 610], "poissonregressor": [197, 215, 308, 311, 629, 661, 958, 1015, 1018, 1019], "poisson_glm": 197, "newton": [197, 215, 296, 591, 629, 639, 640, 650, 661, 836, 837, 958, 1008, 1009, 1011, 1015, 1016, 1017, 1018, 1019], "deep": [197, 369, 380, 406, 415, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 749, 775, 776, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 966, 967, 982, 983, 986, 1009, 1015, 1016, 1018], "implicit": [197, 380, 399, 400, 552, 663, 664, 956, 961, 982, 1013], "concis": [197, 372, 1015, 1017], "poisson_gbrt": 197, "566": 197, "prone": [197, 244, 303, 378, 390], "set_yscal": 197, "5e5": 197, "realiz": [197, 986], "priori": [197, 214, 266, 275, 299, 380, 392, 399, 569, 575, 961], "wrongli": [197, 327], "gen_even_slic": [197, 376, 918], "_mean_frequency_by_risk_group": 197, "y_true_bin": 197, "y_pred_bin": 197, "idx_sort": 197, "sl": 197, "y_true_seg": 197, "y_pred_seg": 197, "11935": 197, "11933": 197, "11932": 197, "12196": 197, "11931": 197, "portfolio": [197, 215, 956], "riskiest": [197, 215], "safest": [197, 215, 351, 362], "irrespect": [197, 230, 266, 277, 587], "lorenz": [197, 215, 1009], "summar": [197, 248, 264, 266, 342, 368, 369, 382, 399, 501, 639, 675, 687, 688, 958, 959, 962, 968], "gini": [197, 215, 237, 269, 309, 533, 534, 537, 538, 539, 540, 544, 545, 546, 886, 887, 888, 889, 951, 970, 978, 1012, 1013], "lorenz_curv": [197, 215], "ranked_frequ": 197, "ranked_exposur": [197, 215], "cumulated_claim": 197, "cumulated_exposur": 197, "cum_exposur": 197, "cum_claim": [197, 215], "0x7feaa36e8a90": 197, "worst": [197, 365, 392, 427, 689, 709, 710, 763, 764, 767, 770, 771, 804, 962, 986, 1004, 1017], "occurr": [197, 341, 342, 363, 368, 392, 400, 549, 550, 562, 570, 571, 598, 608, 609, 610, 611, 763, 814, 842, 964, 1005, 1010], "circumstanti": 197, "extractor": [197, 296, 357, 363, 380, 400, 483, 951, 1004], "discrim": 197, "profil": [197, 355, 368, 370, 501, 504, 958, 986], "ideal": [197, 199, 215, 254, 257, 264, 266, 267, 351, 367, 368, 371, 372, 375, 378, 380, 706, 736, 951, 961, 976, 977, 983], "meaningfulli": [197, 962], "644": [197, 216], "plot_poisson_regression_non_normal_loss": [197, 216], "monomi": 198, "vandermond": [198, 972], "x_0": [198, 638], "pseudo": [198, 296, 369, 396, 404, 421, 432, 434, 442, 449, 450, 451, 453, 454, 455, 456, 513, 541, 542, 543, 608, 615, 620, 622, 623, 627, 628, 633, 634, 641, 642, 643, 644, 658, 672, 676, 780, 781, 789, 791, 828, 835, 870, 871, 875, 878, 879, 880, 883, 914, 915, 958, 974, 1009, 1018], "consecut": [198, 390, 396, 400, 424, 427, 429, 430, 432, 436, 439, 442, 517, 518, 519, 526, 583, 626, 647, 648, 649, 657, 658, 659, 775, 776, 782, 814, 815, 816, 817, 818, 836, 837, 951, 972, 997, 1012], "basis_1": 198, "basis_2": 198, "infinit": [198, 242, 260, 355, 402, 603, 604, 758, 775, 896, 898, 899, 954, 961, 972, 977, 1012, 1014, 1017, 1018, 1019], "malt": [198, 1017, 1018, 1019], "londschien": [198, 1017], "prepar": [198, 340, 355, 369, 370, 373, 375, 978, 986, 1012], "set_prop_cycl": 198, "teal": [198, 207, 264], "yellowgreen": [198, 200, 207, 347], "tomato": 198, "unwant": [198, 340], "oscillatori": [198, 972], "danger": [198, 396], "pft": 198, "splt": 198, "bsplines_": [198, 858], "refrain": [198, 368], "dec": [198, 658, 858, 882, 977], "31st": [198, 858], "advis": [198, 351, 366, 368, 392, 400, 418, 627, 633, 635, 641, 643, 653, 668, 954, 958, 964, 966, 977, 1018], "x_plot_ext": 198, "y_plot_ext": 198, "plot_polynomial_interpol": [198, 216, 854, 858], "pareto": 199, "dale": [199, 1017], "mail": [199, 304, 341, 363, 368, 371, 375, 378, 381, 980, 1012, 1013], "ru": 199, "glemaitre58": 199, "y_true_mean": 199, "y_normal": 199, "y_pareto": 199, "huge": [199, 202, 355, 373, 608, 1007], "heavi": [199, 389, 983], "sp_version": [199, 651], "parse_vers": [199, 651], "incompat": [199, 371, 476, 952, 1012, 1013], "older": [199, 367, 371, 1007, 1014, 1016], "recent": [199, 358, 366, 372, 375, 380, 383, 392, 448, 518, 545, 962, 976, 986, 1007, 1016], "interior": [199, 651, 958, 1019], "out_bounds_predict": 199, "bool_": 199, "logical_or": [199, 205, 266, 373], "hit": [199, 373], "wider": [199, 400, 891, 958], "asymmetri": [199, 340], "linger": 199, "linear_regress": [199, 271], "quantile_regress": 199, "y_pred_lr": 199, "y_pred_qr": 199, "486": 199, "670": 199, "cv_results_lr": 199, "cv_results_qr": 199, "test_neg_mean_squared_error": [199, 802], "732": 199, "679": [199, 878], "129": [199, 993, 1004], "692": [199, 216], "plot_quantile_regress": [199, 216], "robustli": [200, 391], "faulti": [200, 1004], "1903908407869": 200, "17236387": 200, "08533159": 200, "ransacregressor": [200, 203, 214, 630, 659, 660, 958, 1007, 1009, 1010, 1011, 1012, 1015, 1017, 1018], "inlier_mask": 200, "inlier_mask_": [200, 652], "outlier_mask": 200, "line_x": [200, 214], "line_i": 200, "line_y_ransac": 200, "estimator_": [200, 533, 534, 535, 536, 537, 538, 539, 540, 543, 544, 545, 546, 574, 575, 578, 652, 946, 1019], "plot_ransac": [200, 216], "regularis": [201, 405, 453, 455], "eventu": [201, 245, 391, 392, 401, 574, 986], "simpler": [201, 215, 327, 355, 367, 392, 397, 958, 963, 995, 1009], "stronger": [201, 258, 624, 633, 639, 640, 653, 654, 655, 656, 657, 659, 668], "kornel": [201, 1010], "kielczewski": [201, 1010], "plusnet": 201, "433": [201, 216, 365], "plot_ridge_coeff": [201, 216], "practis": 202, "maintain": [202, 215, 218, 257, 356, 358, 367, 370, 373, 374, 375, 378, 380, 381, 383, 392, 399, 421, 423, 848, 849, 855, 856, 859, 863, 866, 867, 869, 958, 959, 972, 983, 988, 999, 1019], "10x10": 202, "hilbert": [202, 845, 954, 972], "n_alpha": [202, 452, 627, 628, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 654, 656, 662, 663, 664, 665, 1007], "plot_ridge_path": [202, 216], "theilsen": 203, "lessen": [203, 639, 640, 878, 879], "theilsenregressor": [203, 214, 630, 652, 659, 958, 1008, 1016, 1018], "x_error": 203, "y_errors_larg": 203, "x_errors_larg": 203, "deviant": [203, 968], "legend_titl": 203, "nabsolut": 203, "nto": [203, 266], "plot_robust_fit": [203, 216], "asgd": [204, 976], "rob": [204, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1016, 1019], "zinkov": [204, 1004, 1005, 1006, 1008, 1009], "heldout": 204, "squared_hing": [204, 335, 647, 657, 878, 885, 958], "0e4": 204, "yy_": 204, "plot_sgd_comparison": [204, 216], "monitor": [205, 370, 380, 533, 534, 539, 540, 541, 542, 966, 1007, 1012, 1014, 1016], "_test": [205, 301, 369, 1017], "ignore_warn": [205, 301, 1010], "load_mnist": [205, 277], "class_0": [205, 365, 490], "class_1": [205, 365, 490], "554": [205, 213, 295], "mnist_784": [205, 213, 277, 295], "fit_and_scor": 205, "train_scor": [205, 272, 335, 345, 783, 802, 803, 806, 957], "estimator_dict": 205, "flush": 205, "results_df": [205, 257], "group_df": 205, "plot_sgd_early_stop": [205, 216], "ova": [206, 647, 649, 657, 976], "plot_sgd_iri": [206, 216], "ugli": [206, 280, 285, 288, 323], "modified_huber_loss": 207, "darkorchid": 207, "135": [207, 216, 312, 365], "plot_sgd_loss_funct": [207, 216], "l1_color": 208, "l2_color": 208, "elastic_net_color": 208, "1001": 208, "rho": [208, 397, 658, 958, 976, 1005], "elastic_net": 208, "dpi": [208, 892, 1017], "elastic_net_contour": 208, "l2_contour": 208, "l1_contour": 208, "inlin": [208, 368, 978], "304": [208, 216, 303, 365], "plot_sgd_penalti": [208, 216], "ndenumer": 209, "077": [209, 216, 277], "plot_sgd_separating_hyperplan": [209, 216], "no_weight": 210, "samples_weight": 210, "no_weights_handl": 210, "weights_handl": 210, "091": [210, 216], "plot_sgd_weighted_sampl": [210, 216], "sgdoneclasssvm": [211, 226, 310, 882, 968, 976, 1017, 1019], "rc": [211, 371], "novel": [211, 283, 326, 351, 390, 951], "abnorm": [211, 226, 283, 326, 363, 472, 543, 825, 968, 1012], "y_pred_train": [211, 326], "y_pred_test": [211, 283, 326], "y_pred_outli": [211, 283, 326], "n_error_train": [211, 326], "n_error_test": [211, 283, 326], "n_error_outli": [211, 283, 326], "clf_sgd": 211, "pipe_sgd": 211, "y_pred_train_sgd": 211, "y_pred_test_sgd": 211, "y_pred_outliers_sgd": 211, "n_error_train_sgd": 211, "n_error_test_sgd": 211, "n_error_outliers_sgd": 211, "z_sgd": 211, "pubu": [211, 230, 283, 326], "darkr": [211, 283, 326], "palevioletr": [211, 283, 326], "b1": [211, 283, 326], "b2": [211, 283, 326], "blueviolet": [211, 283, 326], "368": [211, 216], "plot_sgdocsvm_vs_ocsvm": [211, 216], "newgroups20": 212, "trim": [212, 819, 820], "20newsgroup": [212, 361, 1004], "4500": 212, "130107": [212, 230, 469], "epoch": [212, 380, 516, 647, 648, 649, 657, 658, 659, 836, 837, 976, 1011, 1012, 1017], "5960": 212, "26593496": 212, "43348936": 212, "26362917": 212, "31973683": 212, "37815029": 212, "2928359": 212, "27054655": 212, "62717609": 212, "19522393": 212, "30897646": 212, "34586917": 212, "28207552": 212, "34125758": 212, "29898468": 212, "34279478": 212, "59489497": 212, "38353048": 212, "35278655": 212, "19829832": 212, "14603365": 212, "6440": 212, "36047253": 212, "1268187": 212, "10606655": 212, "17985197": 212, "5395559": 212, "07993421": 212, "06686804": 212, "21443888": 212, "11528972": 212, "2075215": 212, "10914094": 212, "11144673": 212, "13988486": 212, "09684337": 212, "26286057": 212, "11682692": 212, "55800226": 212, "17370318": 212, "11452112": 212, "arthur": [212, 213, 392, 427, 440, 1009, 1010, 1011, 1012, 1013, 1016, 1018], "mensch": [212, 213, 1009, 1010, 1011, 1012], "timeit": [212, 245, 373], "default_tim": [212, 245], "model_param": 212, "this_max_it": 212, "train_tim": [212, 232, 340, 341], "ndataset": [212, 301], "run_tim": [212, 213], "plot_sparse_logistic_regression_20newsgroup": [212, 216], "8253": 213, "674": 213, "l1_plot": 213, "761": [213, 216], "plot_sparse_logistic_regression_mnist": [213, 216], "subpopul": [214, 660, 958], "residual_threshold": [214, 652, 958, 1017], "remedi": 214, "max_subpopul": [214, 660, 1018], "lose": [214, 342, 363, 380, 395, 400, 402, 526, 914, 915, 952, 958, 997], "florian": [214, 986, 1004, 1008, 1010, 1014], "wilhelm": [214, 1008, 1010, 1014], "indigo": 214, "664": [214, 216, 365], "plot_theilsen": [214, 216], "motor": 215, "parti": [215, 356, 367, 378, 779, 786, 930, 980, 1004, 1015], "liabil": 215, "functool": 215, "mean_tweedie_devi": [215, 962, 1014], "load_mtpl2": 215, "fremtpl2freq": 215, "df_freq": 215, "fremtpl2sev": 215, "41215": 215, "df_sev": 215, "claimamount": 215, "fillna": 215, "unquot": 215, "field": [215, 365, 389, 392, 393, 400, 478, 481, 598, 958, 960, 969, 977, 982, 985, 997, 1005], "column_nam": 215, "plot_obs_pr": 215, "y_label": 215, "fill_legend": 215, "df_": 215, "tweedie_pow": 215, "d\u00b2": 215, "subset_label": 215, "score_label": [215, 263], "est_freq": 215, "est_sev": 215, "unstack": [215, 260], "fremtpl2": 215, "unreason": [215, 396], "exception": 215, "200000": 215, "column_tran": [215, 393], "purepremium": 215, "indirectli": 215, "avgclaimamount": 215, "fmax": 215, "option_context": 215, "max_column": 215, "139": [215, 277, 373, 399, 432, 442, 672, 676, 963], "424": [215, 341], "463": 215, "27000": 215, "303": [215, 616], "404": 215, "333333": 215, "r25": 215, "1981": [215, 958], "14156": 215, "142857": 215, "4792": 215, "1456": 215, "10403": 215, "928571": 215, "10834": 215, "17474": 215, "193548": 215, "225806": 215, "r73": 215, "3986": 215, "12860": [215, 1013], "5417": 215, "seemingli": [215, 351, 378], "169504": 215, "6237": 215, "upon": [215, 223, 290, 363, 368, 378, 380, 386, 541, 542, 608, 611, 652, 769, 775, 776, 819, 820, 951, 958, 978, 988, 997, 1018], "glm_freq": 215, "0201": 215, "0219": 215, "1379": 215, "1378": 215, "2441": 215, "2246": 215, "surprisingli": [215, 363, 400], "bonu": [215, 368, 992, 997], "malu": 215, "younger": 215, "infti": [215, 402, 600, 958, 972, 1011], "gammaregressor": [215, 308, 311, 661, 958, 1015, 1018, 1019], "mask_test": 215, "glm_sev": 215, "400000e": 215, "700000e": 215, "756746e": 215, "744042e": 215, "801770e": 215, "030677e": 215, "dummy_sev": 215, "000000e": 215, "756687e": 215, "744497e": 215, "803882e": 215, "033764e": 215, "slighli": 215, "avgclaim": 215, "nbclaim": 215, "1951": 215, "1940": 215, "1978": [215, 958], "apriori": 215, "regardless": [215, 258, 259, 260, 356, 368, 392, 515, 639, 685, 696, 962, 974, 1012, 1019], "glm_pure_premium": 215, "999": [215, 257, 371, 399, 698, 836, 837], "scores_product_model": 215, "scores_glm_pure_premium": 215, "expand_frame_repr": 215, "690000e": 215, "420000e": 215, "669930e": 215, "617050e": 215, "640770e": 215, "640880e": 215, "7000": 215, "695740e": 215, "683980e": 215, "682880e": 215, "692270e": 215, "8000": [215, 260, 261], "046010e": 215, "040530e": 215, "037600e": 215, "045390e": 215, "9000": 215, "387580e": 215, "385000e": 215, "382120e": 215, "387830e": 215, "9900": 215, "015716e": 215, "015414e": 215, "015347e": 215, "015587e": 215, "9990": 215, "914573e": 215, "914370e": 215, "914538e": 215, "914387e": 215, "904751e": 215, "904556e": 215, "904747e": 215, "904558e": 215, "730119e": 215, "722128e": 215, "739865e": 215, "731249e": 215, "295040e": 215, "212197e": 215, "295505e": 215, "213056e": 215, "917618e": 215, "299546e": 215, "916555e": 215, "313276e": 215, "951751e": 215, "325198e": 215, "riski": 215, "operation": [215, 986], "develop": [215, 255, 257, 307, 340, 355, 358, 363, 367, 368, 378, 380, 382, 386, 389, 391, 394, 395, 399, 400, 414, 473, 777, 958, 965, 978, 980, 982, 983, 985, 986, 995, 1004, 1012, 1013, 1014, 1017, 1019, 1020], "ranked_pure_premium": 215, "cumulated_claim_amount": 215, "cumulated_sampl": 215, "y_pred_product": 215, "y_pred_tot": 215, "ordered_sampl": 215, "926": [215, 216], "plot_tweedie_regression_insurance_claim": [215, 216], "587": 216, "auto_examples_linear_model": 216, "md": [218, 219, 220, 221, 371, 669, 673, 675, 998, 999, 1004, 1016, 1019], "seek": [218, 220, 222, 367, 368, 378, 381, 488, 489, 959, 989, 991], "ticker": [218, 220, 223, 277], "s_point": 218, "s_color": 218, "make_s_curv": [218, 223], "plot_3d": 218, "points_color": 218, "subplot_kw": [218, 281], "set_major_loc": [218, 282], "multipleloc": [218, 282], "add_2d_scatt": 218, "set_major_formatt": [218, 220, 223, 277, 282], "nullformatt": [218, 220, 223, 277], "lle": [218, 219, 220, 222, 510, 670, 674, 959, 1016], "thought": [218, 282, 380, 392, 959, 963], "analys": [218, 349, 397, 780, 781, 959, 982, 986], "lle_standard": 218, "s_standard": 218, "lle_ltsa": 218, "ltsa": [218, 219, 220, 670, 674, 959], "s_ltsa": 218, "lle_hessian": 218, "hessian": [218, 219, 220, 399, 629, 639, 640, 650, 661, 670, 674, 958, 966, 998, 999, 1019], "s_hessian": 218, "lle_mod": 218, "s_mod": 218, "lle_method": 218, "tangent": [218, 670, 674, 960, 998, 999], "eigenmap": [218, 670, 672, 674, 676, 998, 999, 1005], "isometr": [218, 669, 671, 672, 673, 959], "geodes": [218, 669, 959], "s_isomap": 218, "md_scale": 218, "normalized_stress": [218, 219, 220, 221, 671, 675, 959, 1019], "s_scale": 218, "laplacian": [218, 360, 389, 421, 432, 442, 601, 620, 624, 672, 676, 745, 746, 754, 874, 958, 959, 975, 999, 1005, 1010], "s_spectral": 218, "t_sne": [218, 1012], "s_t_sne": 218, "686": [218, 224], "plot_compare_method": [218, 224], "offsetbox": 219, "plot_embed": 219, "shown_imag": 219, "someth": [219, 340, 368, 369, 370, 371, 375, 400, 962, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "4e": 219, "imagebox": 219, "annotationbbox": 219, "offsetimag": 219, "neighborhoodcomponentsanalysi": [219, 285, 286, 287, 965, 1013, 1018], "random_project": [219, 230, 358, 974, 979, 1005, 1010, 1020], "sparserandomproject": [219, 230, 870, 974, 1005, 1010, 1018, 1020], "embeed": 219, "n_iter_without_progress": [219, 673, 1009, 1010], "nca": [219, 285, 286, 287, 828, 965], "742": [219, 224], "plot_lle_digit": [219, 224], "pole": 220, "thin": [220, 601], "earth": [220, 341, 744, 982], "058": [220, 255, 365], "sphere_data": 220, "trans_data": 220, "2g": [220, 223, 678, 1015], "252": [220, 270, 273, 365, 514, 855, 866], "257": [220, 255], "258": 220, "se": [220, 365, 383], "plot_manifold_spher": [220, 224], "euclidean_dist": [221, 230, 369, 430, 437, 669, 742, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 1004, 1009, 1012, 1013], "finfo": [221, 458, 587, 631, 632, 635, 636, 637, 663, 664, 721, 1019], "x_true": 221, "dissimilar": [221, 380, 389, 432, 671, 675, 959, 1010, 1020], "embedding_": [221, 380, 669, 670, 671, 672, 673], "nmd": 221, "npo": 221, "plot_md": [221, 224], "sr_point": 222, "sr_color": 222, "ambient": 222, "text2d": 222, "unrol": 222, "unnecessarili": [222, 1011, 1014], "clump": 222, "sr_lle": 222, "sr_err": 222, "locally_linear_embed": [222, 959], "sr_tsne": 222, "stretch": [222, 246], "byproduct": 222, "ultim": 222, "sh_point": 222, "sh_color": 222, "topologi": [222, 223], "sh_lle": 222, "sh_err": 222, "sh_tsne": 222, "plot_swissrol": [222, 224], "tendenc": [223, 958, 959, 961, 964, 967], "clearer": [223, 977], "distil": 223, "pub": [223, 817, 873], "misread": 223, "narin": [223, 1011, 1012], "kokhlikyan": [223, 1011, 1012], "860": [223, 224, 296, 297], "plot_t_sne_perplex": [223, 224], "auto_examples_manifold": 224, "cope": [226, 357, 363, 958], "multimod": 226, "inli": [226, 958, 968], "unimod": [226, 454], "localoutlierfactor": [226, 235, 283, 284, 311, 380, 543, 882, 968, 1011, 1012, 1014, 1018, 1019], "modal": [226, 454, 917], "hypercub": [226, 495], "decent": [226, 256, 363, 964], "handpick": 226, "absenc": [226, 260, 380, 693, 842, 961, 962], "negative_linestyl": 226, "outliers_fract": 226, "n_inlier": 226, "anomaly_algorithm": 226, "blobs_param": 226, "718": [226, 240], "plot_anomaly_comparison": [226, 240], "transfus": 227, "1464": 227, "donat": 227, "confust": 227, "cm_displai": 227, "y_score": [227, 264, 266, 380, 462, 463, 464, 688, 701, 706, 707, 719, 720, 736, 762, 768, 769, 772, 777, 780, 781, 791, 839, 962, 1010, 1018], "pos_label": [227, 235, 380, 419, 420, 679, 681, 683, 687, 688, 690, 707, 709, 710, 718, 762, 763, 764, 767, 769, 846, 862, 962, 1012, 1016, 1018], "roc_displai": 227, "previs": 227, "precision_recall_curv": [227, 264, 681, 687, 688, 707, 962, 1005, 1006, 1010, 1017, 1018], "pr_displai": 227, "easlii": 227, "370": [227, 240, 341], "plot_display_object_visu": [227, 240], "summaris": [228, 308], "composit": [228, 308, 358, 360, 396, 639, 768, 952, 958, 971, 999, 1005], "num_proc": [228, 308], "cat_proc": [228, 308], "feat1": [228, 308, 400], "feat3": [228, 308, 400], "feat0": [228, 308], "feat2": [228, 308, 400], "028": [228, 240, 255], "plot_estimator_represent": [228, 240], "isotonicregress": [229, 953, 1005, 1006, 1007, 1008, 1010, 1012, 1013, 1014, 1016, 1018, 1019, 1020], "ir": [229, 397, 571, 706, 736, 814, 818, 960, 962], "out_of_bound": [229, 616], "y_": [229, 243, 247, 248, 289, 369, 395, 397, 618, 629, 650, 661, 709, 710, 718, 763, 764, 767, 958, 962, 1010], "linearregressionlinearregress": 229, "x_thresholds_": [229, 616, 1016], "y_thresholds_": [229, 616, 1016], "plot_isotonic_regress": [229, 240], "lemma": [230, 360, 391, 514, 521, 529, 870, 871, 872, 956, 999, 1007], "johnson_lindenstrauss_min_dim": [230, 974, 1005], "achliopta": [230, 871, 872, 974], "_compon": [230, 516], "geq": [230, 397, 399, 958, 962, 972, 976, 977], "_sampl": [230, 397, 518, 520, 527], "admiss": [230, 356], "eps_rang": 230, "min_n_compon": 230, "nn_sampl": [230, 269], "semilogi": 230, "nn_compon": [230, 231], "100k": 230, "n_components_rang": 230, "rp": 230, "projected_data": 230, "n_byte": 230, "projected_dist": 230, "min_dist": 230, "max_dist": 230, "hexbin": 230, "gridsiz": 230, "298": [230, 970], "894": 230, "332": [230, 866], "161": 230, "271": 230, "jl": [230, 871], "436": 230, "plot_johnson_lindenstrauss_bound": [230, 240], "rbfsampler": [231, 620, 621, 623, 954, 988, 1008, 1018, 1019], "mont": [231, 402, 592, 622, 623, 954, 967], "fourier": [231, 391, 619, 620, 621, 622, 623, 738, 739, 954], "acceler": [231, 312, 355, 378, 448, 673, 876, 959, 986, 1013, 1017, 1019], "data_train": [231, 258, 340], "targets_train": 231, "data_test": [231, 258, 340], "targets_test": 231, "kernel_svm": 231, "linear_svm": 231, "feature_map_fouri": 231, "feature_map_nystroem": [231, 620], "fourier_approx_svm": 231, "feature_map": [231, 299], "nystroem_approx_svm": 231, "kernel_svm_tim": 231, "kernel_svm_scor": 231, "linear_svm_tim": 231, "linear_svm_scor": 231, "fourier_scor": 231, "nystroem_scor": 231, "fourier_tim": 231, "nystroem_tim": 231, "feature_map__n_compon": 231, "timescal": 231, "ly": [231, 827, 829, 830, 831, 1008], "flat_grid": 231, "lv_ep": 231, "tab10": [231, 247], "plot_kernel_approxim": [231, 240], "krr": [232, 402, 624, 955], "insensit": [232, 624, 657, 659, 768, 879, 955, 976, 977, 1004], "fifth": [232, 955, 988], "kr": [232, 257, 1018], "svr_fit": 232, "kr_fit": 232, "sv_ratio": 232, "support_": [232, 334, 449, 454, 574, 575, 583, 880, 881, 882, 883, 884, 977], "y_svr": 232, "svr_predict": 232, "y_kr": 232, "kr_predict": 232, "09999999999999999": [232, 265, 327], "737": [232, 340, 343, 504], "648": 232, "723": 232, "340": [232, 315], "360": 232, "sv_ind": 232, "arithmet": [232, 373, 375, 392, 531, 629, 650, 661, 685, 698, 716, 717, 737, 773, 962, 1012], "test_tim": [232, 340], "train_test_s": 232, "learningcurvedisplai": [232, 259, 312, 957, 1019], "negate_scor": [232, 783], "std_display_styl": [232, 259, 783], "get_legend_handles_label": [232, 259, 264], "plot_kernel_ridge_regress": [232, 240], "theta_c": [233, 503], "reject": [233, 380, 381, 503, 652, 707, 898, 899, 958, 962, 1012], "never": [233, 351, 368, 376, 378, 386, 392, 395, 396, 430, 437, 503, 526, 535, 536, 537, 544, 954, 1014, 1017], "likewis": [233, 392, 503], "surround": [233, 368, 825, 968], "cca": [233, 395, 463, 465, 1008, 1012, 1013, 1014, 1016, 1018], "onevsrestclassifi": [233, 264, 266, 275, 390, 807, 809, 878, 988, 1005, 1006, 1008, 1010, 1011, 1017, 1018], "metaclassifi": 233, "min_x": 233, "max_x": 233, "plot_subfigur": 233, "min_i": 233, "zero_class": 233, "one_class": 233, "160": [233, 951, 995], "nfor": 233, "plot_multilabel": [233, 240], "extratreesregressor": [234, 399, 537, 545, 546, 888, 889, 1007, 1010, 1012, 1013, 1014, 1017, 1018, 1019, 1020], "n_face": 234, "face_id": 234, "n_pixel": [234, 255], "nn": [234, 400, 676, 995], "y_test_predict": 234, "true_fac": 234, "completed_fac": 234, "138": [234, 240, 373, 399, 402, 962], "plot_multioutput_face_complet": [234, 240], "benchmark": [235, 277, 309, 341, 342, 355, 361, 363, 368, 378, 383, 385, 390, 448, 495, 876], "iforest": 235, "pharuj": 235, "rajborirug": 235, "ra": 235, "kmitl": 235, "ac": [235, 510, 645, 666, 667, 958, 975, 997], "th": [235, 310, 349, 379, 396, 399, 407, 422, 426, 431, 433, 439, 443, 452, 537, 538, 539, 540, 541, 542, 544, 545, 546, 574, 575, 613, 629, 630, 650, 652, 661, 677, 699, 760, 798, 903, 952, 958, 962, 966, 969, 976, 977, 1019], "preprocess_dataset": 235, "fetch_kddcup99": [235, 363, 1011, 1012, 1013, 1016, 1017], "labelbinar": [235, 266, 380, 721, 808, 843, 852, 862, 963, 988, 1007, 1008, 1009, 1013, 1018], "dataset_nam": [235, 277], "smtp": [235, 363, 472], "sa": [235, 363, 472], "percent10": [235, 472], "lb": [235, 846, 973], "forestcov": 235, "glass": [235, 363], "wdbc": [235, 365], "cardiotocographi": 235, "tablewar": 235, "x_mal": 235, "y_mal": 235, "x_ben": 235, "y_ben": 235, "x_mal2": 235, "y_mal2": 235, "compute_predict": 235, "model_nam": [235, 275], "negative_outlier_factor_": [235, 284, 825, 968], "datasets_nam": 235, "models_nam": 235, "ceil": [235, 537, 538, 539, 540, 543, 544, 545, 546, 575, 652, 780, 781, 886, 887, 888, 889, 976], "plot_outlier_detection_bench": [235, 240], "recalcul": [236, 238, 392, 1001, 1004], "mlpregressormlpregressor": 236, "tree_disp": 236, "mlp_disp": 236, "0x7feab9ba8c40": 236, "plot_partial_dependence_visualization_api": [236, 240], "set_config": [237, 239, 308, 355, 356, 393, 448, 607, 1013, 1015, 1018], "deactiv": [237, 362, 366, 383, 393, 780, 781, 1018], "standard_scal": 237, "polynomialfeaturespolynomialfeatur": 237, "pcapca": 237, "svcsvc": [237, 238, 255, 257, 309], "numeric_preprocessor": 237, "imputation_mean": 237, "categorical_preprocessor": 237, "imputation_const": 237, "onehot": [237, 300, 301, 393, 844, 972], "gender": [237, 852, 972], "classifier__n_estim": 237, "classifier__max_featur": 237, "classifier__max_depth": 237, "classifier__criterion": 237, "plot_pipeline_displai": [237, 240], "svc_disp": [238, 307, 1001], "rfc_disp": [238, 307, 1001], "173": [238, 240, 373, 565], "plot_roc_curve_visualization_api": [238, 240], "transform_output": [239, 448, 876, 1019], "slep018": [239, 369, 1019], "106": [239, 365, 855, 956, 1005], "x_test_scal": 239, "894264": 239, "798301": 239, "271411": 239, "327605": 239, "244466": 239, "086944": 239, "327407": 239, "459074": 239, "660797": 239, "462234": 239, "576989": 239, "159419": 239, "933197": 239, "427329": 239, "414810": 239, "039497": 239, "275851": 239, "scaler2": 239, "x_test_np": 239, "x_test_df": 239, "feature_names_in_": [239, 310, 380, 412, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 592, 608, 609, 610, 611, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 775, 776, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 1017, 1018, 1019, 1020], "num_pip": 239, "num_col": 239, "7621951219512195": 239, "log_reg": [239, 311], "reset": [239, 351, 375, 514, 657, 658, 659, 819, 820, 848, 849, 859, 1006], "config_context": [239, 355, 356, 388, 607, 876, 1011, 1017], "133660": 239, "438059": 239, "894273": 239, "506893": 239, "478": 239, "000619": 239, "182778": 239, "671": [239, 974], "548540": 239, "461032": 239, "817": 239, "487001": 239, "13366001": 239, "4380594": 239, "89427284": 239, "50689261": 239, "00061876": 239, "18277786": 239, "54853974": 239, "46103177": 239, "48700054": 239, "147": [239, 240, 963], "plot_set_output": [239, 240], "638": [240, 257, 273, 373], "auto_examples_miscellan": 240, "bayesiangaussianmixtur": [242, 243, 248, 776, 1010, 1012, 1013, 1017, 1018], "weight_concentration_prior_typ": [242, 248, 775, 961, 1010], "dirichlet_distribut": [242, 775, 961, 1010], "dirichlet_process": [242, 248, 775, 961, 1010], "weight_concentration_prior": [242, 248, 775, 961], "finit": [242, 248, 355, 363, 380, 448, 518, 531, 563, 587, 590, 591, 592, 639, 708, 758, 765, 775, 800, 876, 896, 898, 899, 958, 961, 962, 986, 988, 995, 1011, 1012, 1016, 1018, 1019], "unnecessari": [242, 372, 424, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 686, 965, 972, 983, 986, 1007, 1009, 1014, 1015, 1017], "covar": [242, 243, 248], "eig_val": 242, "eig_vec": 242, "unit_eig_vec": 242, "arctan2": [242, 244, 247], "56b4e9": 242, "plot_titl": 242, "weights_": [242, 775, 776, 1018], "covariances_": [242, 243, 244, 247, 248, 775, 776, 1011], "get_xaxi": [242, 287, 299], "set_tick_param": 242, "labelleft": 242, "0072b2": 242, "f0e442": 242, "d55e00": 242, "mean_precision_prior": [242, 248, 775], "nprior": 242, "gamma_0": [242, 248], "reg_covar": [242, 775, 776], "init_param": [242, 245, 248, 775, 776], "concentrations_prior": 242, "539": [242, 249], "plot_concentration_prior": [242, 249], "color_it": [243, 247, 248], "dp": [243, 248], "shouldn": [243, 248, 368], "em": [243, 244, 248, 424, 427, 439, 516, 775, 776, 961, 1018], "dpgmm": [243, 248, 1004, 1008, 1010], "187": [243, 249, 257, 373, 565, 963, 995, 1006], "plot_gmm": [243, 249], "ronweiss": 244, "make_ellips": 244, "datalim": 244, "skf": [244, 396, 796], "train_index": [244, 318, 396, 778, 779, 782, 784, 785, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798], "test_index": [244, 318, 396, 778, 779, 782, 784, 785, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798], "cov_typ": 244, "means_init": [244, 245, 776], "y_train_pr": 244, "train_accuraci": 244, "y_test_pr": 244, "test_accuraci": [244, 258], "plot_gmm_covari": [244, 249], "random_from_data": [245, 775, 776, 961], "diamond": 245, "colour": [245, 365, 400, 568, 963], "walsh": [245, 1016, 1018], "extmath": [245, 340, 376, 433, 1010, 1011, 1014, 1019], "row_norm": 245, "_samples_gener": 245, "timer": [245, 373], "x_squared_norm": [245, 440], "get_initial_mean": 245, "times_init": 245, "relative_tim": 245, "ini": 245, "init_tim": 245, "2fx": 245, "733": [245, 249, 277], "plot_gmm_init": [245, 249], "shifted_gaussian": 246, "stretched_gaussian": 246, "score_sampl": [246, 282, 283, 284, 290, 380, 398, 449, 512, 521, 543, 658, 775, 776, 777, 780, 781, 791, 824, 825, 835, 839, 882, 968, 1007, 1012, 1014, 1016], "plot_gmm_pdf": [246, 249], "component_1": 247, "component_2": 247, "best_parameters_": 247, "gmm_bic_scor": 247, "callabl": [247, 261, 380, 396, 400, 401, 403, 404, 422, 424, 425, 426, 427, 429, 430, 432, 437, 439, 444, 445, 446, 447, 511, 513, 515, 517, 519, 525, 526, 537, 538, 539, 540, 541, 542, 544, 545, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 591, 592, 601, 609, 615, 620, 624, 640, 647, 652, 654, 656, 669, 672, 673, 677, 692, 700, 712, 722, 751, 754, 758, 759, 760, 761, 770, 771, 777, 780, 781, 783, 791, 801, 802, 803, 804, 806, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 843, 852, 873, 874, 880, 881, 882, 883, 884, 922, 923, 929, 932, 946, 951, 962, 972, 1004, 1008, 1011, 1012, 1013, 1014, 1016, 1018, 1020], "0x7feab85a50d0": 247, "gaussianmixturegaussianmixtur": 247, "param_n_compon": 247, "param_covariance_typ": 247, "renam": [247, 258, 368, 371, 392, 422, 426, 427, 439, 451, 452, 458, 516, 533, 534, 535, 536, 852, 1004, 1005, 1006, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019], "793662": 247, "1083": 247, "652535": 247, "1114": 247, "835102": 247, "1151": 247, "243322": 247, "1181": 247, "713463": 247, "catplot": 247, "hue": [247, 257, 280, 304, 365], "eigenvalu": [247, 389, 392, 394, 432, 442, 449, 450, 451, 452, 453, 454, 455, 456, 515, 521, 529, 654, 669, 670, 672, 674, 676, 845, 959, 972, 1006, 1010, 1013, 1014, 1015, 1016], "466": [247, 249, 969], "plot_gmm_select": [247, 249], "loos": [248, 254, 977, 1012], "liberti": 248, "judgment": [248, 962], "panel": [248, 282, 299, 398, 982], "primarili": [248, 262, 368, 380, 388, 392, 986, 1013, 1014], "covariance_prior": [248, 775], "plot_gmm_sin": [248, 249], "auto_examples_mixtur": 249, "mislabel": [251, 399, 964], "imbal": [251, 260, 396, 688, 709, 710, 718, 763, 764, 767, 768, 962], "misclassifi": [251, 340, 977], "life": [251, 375, 959], "set_printopt": 251, "titles_opt": 251, "plot_confusion_matrix": [251, 273, 307, 1014, 1015, 1016, 1017], "shufflesplit": [252, 259, 335, 396, 779, 785, 787, 797, 805, 992, 1004, 1005, 1007, 1009, 1010], "groupshufflesplit": [252, 396, 992, 1010], "groupkfold": [252, 262, 396, 575, 777, 780, 781, 782, 783, 784, 785, 786, 791, 795, 800, 801, 802, 803, 806, 992, 1010, 1017], "stratifiedshufflesplit": [252, 327, 396, 992, 1004, 1005, 1010, 1011, 1017], "stratifiedgroupkfold": [252, 1017], "1338": 252, "cmap_data": 252, "cmap_cv": 252, "coolwarm": [252, 324], "n_point": [252, 819, 820], "percentiles_class": 252, "perc": 252, "group_prior": 252, "visualize_group": 252, "yticklabel": [252, 340], "ngroup": 252, "nclass": 252, "plot_cv_indic": [252, 273], "tr": [252, 365, 371, 392, 394, 449, 450, 451, 452, 453, 454, 455, 456, 817], "axessubplot": 252, "this_cv": 252, "plot_cv_predict": [253, 273], "fnr": [254, 679, 707], "det_curv": [254, 679, 762, 769, 962, 1016, 1017], "visuali": 254, "commonli": [254, 361, 380, 392, 393, 402, 595, 738, 739, 775, 808, 851, 959, 960, 962, 963, 965], "detcurvedisplai": [254, 310, 707, 1016, 1017], "ax_roc": 254, "ax_det": 254, "feedback": [254, 367, 368, 381, 982, 1012], "228": [254, 273], "plot_det": [254, 273], "n_imag": 255, "print_datafram": 255, "filtered_cv_result": 255, "mean_precis": 255, "std_precis": 255, "mean_recal": 255, "std_recal": 255, "mean_test_precis": [255, 261], "std_test_precis": 255, "mean_test_recal": 255, "std_test_recal": 255, "03f": 255, "refit_strategi": 255, "best_index": [255, 261], "precision_threshold": 255, "high_precision_cv_result": 255, "mean_score_tim": [255, 258, 777, 791], "rank_test_recal": 255, "rank_test_precis": [255, 261], "best_recall_std": 255, "best_recal": 255, "best_recall_threshold": 255, "high_recall_cv_result": 255, "fastest_top_recall_high_precision_index": 255, "idxmin": 255, "854": 255, "063": [255, 257, 418], "061": 255, "069": [255, 328, 338], "780": 255, "083": 255, "905": 255, "889": [255, 418], "890": 255, "073": [255, 451, 452], "743": [255, 995], "065": [255, 373], "066": [255, 340, 629], "744": [255, 277], "618": 255, "004751": 255, "853676": 255, "063184": 255, "0x7feab8755dc0": 255, "807": [255, 257], "818": [255, 273], "plot_grid_search_digit": [255, 273], "minimis": [256, 392, 396, 639, 640, 978], "219": 256, "260": [256, 1017], "york": [256, 768, 775, 952, 962, 974], "usa": [256, 363, 875, 952, 959, 974, 975], "best_index_": [256, 261, 777, 780, 781, 791], "wenhao": [256, 1012, 1013], "zhang": [256, 392, 423, 645, 660, 666, 667, 670, 674, 738, 739, 958, 959, 960, 964, 976, 1008, 1009, 1011, 1012, 1013, 1014, 1016], "wenhaoz": 256, "ucla": [256, 958], "lower_bound": 256, "best_score_idx": 256, "best_low_complex": 256, "fewest": [256, 608], "candidate_idx": 256, "param_reduce_dim__n_compon": 256, "plot_grid_search_refit_cal": [256, 273], "moon": [257, 294, 301, 340, 341, 502], "moder": [257, 368, 402, 434, 968], "352": [257, 373], "repeatedstratifiedkfold": [257, 396, 792, 796, 1011], "repetit": [257, 372, 396, 792, 793, 970, 1018], "rank_test_scor": [257, 265, 777, 791, 1010], "rename_axi": 257, "9400": 257, "079297": 257, "9300": 257, "077846": 257, "3_poli": 257, "9044": [257, 1011], "098776": 257, "2_poli": 257, "6852": 257, "169106": 257, "certainti": [257, 369, 722, 962], "repreat": 257, "model_scor": [257, 275], "regex": [257, 342, 444, 446], "_test_scor": [257, 452, 575, 1017], "lineplot": 257, "labelpad": 257, "882561": 257, "783392": 257, "351390": 257, "746492": 257, "298688": 257, "355440": 257, "nadeau": [257, 1012], "bengio": [257, 836, 837, 951, 975], "framework": [257, 355, 369, 378, 380, 386, 392, 618, 669, 775, 958, 959, 966, 980, 983, 986, 1004, 1010], "diebold": 257, "mariano": 257, "proven": [257, 956, 960, 986], "replic": [257, 367, 369], "cdot": [257, 389, 392, 397, 398, 402, 595, 596, 600, 603, 604, 845, 954, 956, 962, 966, 972], "sum_": [257, 266, 335, 389, 390, 392, 397, 398, 399, 518, 520, 527, 677, 735, 956, 958, 959, 962, 964, 966, 967, 969, 970, 976, 977, 978], "ij": [257, 287, 389, 392, 397, 518, 520, 527, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 958, 959, 962, 964, 967, 977], "corrected_std": 257, "crossvalid": [257, 271], "corrected_var": 257, "ddof": [257, 859, 869], "compute_corrected_ttest": 257, "t_stat": 257, "p_val": 257, "model_1_scor": 257, "model_2_scor": 257, "ncorrect": 257, "227": [257, 392, 705], "uncorrect": [257, 576, 579], "t_stat_uncorrect": 257, "p_val_uncorrect": 257, "convent": [257, 368, 369, 371, 380, 410, 411, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 449, 450, 451, 452, 453, 454, 455, 456, 488, 489, 511, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 527, 543, 546, 549, 550, 562, 563, 564, 569, 570, 572, 608, 609, 610, 611, 658, 669, 670, 671, 672, 680, 699, 775, 776, 807, 808, 823, 825, 827, 831, 843, 851, 854, 855, 857, 870, 871, 882, 909, 910, 962, 989, 1004, 1011, 1012, 1015, 1017, 1018], "benavoli": 257, "colleagu": 257, "conjug": [257, 432, 442, 653, 655, 668, 676, 958], "overlin": [257, 389], "t_post": 257, "ppf": 257, "infin": [257, 521, 663, 664, 693, 800, 885, 897, 965], "minu": [257, 740, 962], "better_prob": 257, "cdf": 257, "773": [257, 305, 340, 629, 817], "essenti": [257, 312, 366, 369, 392, 396, 397, 489, 954, 962, 965, 983, 986, 1012], "rope": 257, "rope_interv": 257, "rope_prob": 257, "x_rope": 257, "uncertain": [257, 316, 367], "credibl": 257, "cred_interv": 257, "cred_int_df": 257, "000977": 257, "019023": 257, "005422": 257, "025422": 257, "016445": 257, "036445": 257, "bonferroni": 257, "n_comparison": 257, "pairwise_t_test": 257, "model_i": 257, "model_k": 257, "model_i_scor": 257, "model_k_scor": 257, "pairwise_comp_df": 257, "model_1": 257, "model_2": 257, "657": [257, 261, 273], "302": [257, 608], "565": [257, 265, 273], "276": 257, "851": 257, "pairwise_bayesian": 257, "worse_prob": 257, "pairwise_bayesian_df": 257, "882": 257, "dietterich": [257, 809, 963], "1998": [257, 363, 365, 397, 399, 535, 536, 809, 814, 845, 963, 964, 966, 972, 976], "bouckaert": 257, "frank": [257, 810, 963, 1009, 1013, 1014], "pacif": 257, "asia": [257, 972], "confer": [257, 363, 373, 392, 397, 403, 420, 425, 430, 491, 515, 543, 677, 689, 706, 736, 835, 836, 837, 962, 968, 974, 978], "discoveri": [257, 363, 373, 376, 392, 399, 401, 403, 425, 491, 535, 536, 543, 573, 576, 577, 579, 580, 581, 587, 701, 720, 763, 962, 974, 986, 1018, 1019], "corani": 257, "dem\u0161ar": 257, "zaffalon": 257, "accompani": [257, 1012], "1995": [257, 365, 390, 399, 533, 534, 809, 875, 963], "144": [257, 373, 1004], "plot_grid_search_stat": [257, 273], "loader": [258, 319, 340, 361, 362, 363, 478, 479, 488, 982, 983, 997, 1004, 1009, 1011, 1012, 1015], "fetch20newsgroup": 258, "857": 258, "complementnb": [258, 340, 814, 815, 817, 818, 964, 1012, 1016, 1017, 1019], "tfidfvectorizertfidfvector": 258, "complementnbcomplementnb": 258, "vect__": 258, "clf__": 258, "parameter_grid": 258, "vect__max_df": 258, "vect__min_df": 258, "vect__ngram_rang": [258, 997], "unigram": [258, 363, 400, 569, 570, 572, 1011], "bigram": [258, 400, 569, 570, 572, 997], "vect__norm": 258, "clf__alpha": [258, 997], "exhaust": [258, 307, 308, 309, 310, 311, 312, 355, 365, 372, 379, 387, 392, 777, 780, 781, 791, 868, 869, 871, 958, 997, 999], "parallelis": [258, 448, 876, 1011], "random_search": [258, 265], "590": 258, "best_paramet": 258, "get_param": [258, 370, 380, 402, 406, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 775, 776, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 951, 1014, 1015, 1016, 1018, 1019], "param_nam": [258, 272, 335, 806, 957, 997], "816": [258, 451, 452], "709": 258, "ambigu": [258, 372, 400, 552, 693, 915, 965, 1013, 1015, 1017], "shorten_param": 258, "plotli": [258, 368, 383, 385], "cursor": 258, "px": 258, "error_x": 258, "std_score_tim": [258, 777, 791], "error_i": 258, "hover_data": 258, "update_layout": 258, "xanchor": 258, "yanchor": 258, "autom": [258, 371, 383, 673, 951, 958, 959, 962, 982, 986], "parallel_coordin": 258, "understood": [258, 368, 392, 994], "column_result": 258, "transform_func": 258, "fromkei": [258, 893], "ngram_rang": [258, 319, 400, 569, 570, 572], "color_continuous_scal": 258, "viridis_r": 258, "slide": [258, 625, 958, 981, 982], "intersect": [258, 324, 389, 392, 718], "undo": [258, 849, 1008], "023": [258, 273, 879, 970], "plot_grid_search_text_feature_extract": [258, 273], "depict": [259, 399, 961], "score_typ": [259, 783], "ax_idx": 259, "resort": [259, 363, 535, 1014], "learning_curv": [259, 312, 783, 957, 1007, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1019], "return_tim": [259, 803, 1014], "test_scores_nb": 259, "fit_times_nb": 259, "score_times_nb": 259, "test_scores_svm": 259, "fit_times_svm": 259, "score_times_svm": 259, "score_tim": [259, 396, 802, 803], "rapidli": [259, 977, 986, 991], "inflect": 259, "plot_learning_curv": [259, 273], "class_likelihood_ratio": [260, 962, 1019], "medicin": [260, 693, 962], "medic": [260, 396, 693, 958, 986], "truli": [260, 264, 357, 693, 962], "odd": [260, 399, 494, 693, 962, 1011, 1012], "suppos": [260, 315, 355, 356, 369, 373, 394, 399, 400, 401, 537, 541, 544, 639, 640, 647, 649, 655, 656, 657, 722, 825, 878, 880, 883, 886, 888, 904, 966, 1013, 1015], "physiolog": [260, 365, 995], "hopefulli": [260, 375, 1004], "indirect": [260, 380], "bio": 260, "minor": [260, 264, 363, 370, 381, 476, 962, 1004, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "diagnos": [260, 365, 375, 382, 393], "diagnosi": [260, 365, 826], "pos_lr": 260, "neg_lr": 260, "617": [260, 392, 749], "raise_warn": [260, 693, 948], "positive_likelihood_ratio": [260, 693], "negative_likelihood_ratio": [260, 693], "extract_scor": 260, "test_positive_likelihood_ratio": 260, "test_negative_likelihood_ratio": 260, "718894": 260, "724619": 260, "321091": 260, "054054": 260, "dummyclassifi": [260, 532, 962, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1014], "108843": 260, "986989": 260, "268147": 260, "034278": 260, "compat": [260, 277, 308, 362, 370, 376, 377, 378, 380, 383, 400, 443, 449, 488, 546, 557, 566, 567, 570, 584, 595, 596, 599, 600, 601, 603, 604, 613, 614, 615, 629, 639, 640, 650, 654, 656, 661, 754, 758, 778, 779, 782, 784, 785, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798, 823, 824, 844, 852, 853, 890, 891, 894, 925, 959, 962, 965, 967, 982, 983, 986, 999, 1004, 1007, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "diagnost": [260, 361, 380, 480, 693, 801, 802, 962, 982, 983, 999], "most_frequ": [260, 531, 608, 611, 829, 952, 962, 1012, 1014, 1016], "undefin": [260, 380, 693, 709, 718, 721, 763, 931, 962, 1012, 1016], "373333": 260, "5557": 260, "235430": 260, "stand": [260, 342, 371, 378, 397, 511, 517, 525, 526, 577, 590, 659, 686, 698, 716, 717, 737, 766, 768, 773, 961, 962, 968], "lr_base": 260, "pos_lr_bas": 260, "pos_lr_base_std": 260, "neg_lr_bas": 260, "neg_lr_base_std": 260, "plot_indic": 260, "scoring_on_bootstrap": 260, "n_bootstrap": [260, 1005], "results_for_preval": 260, "bootstrap_indic": 260, "default_rng": 260, "2039": 260, "507943": 260, "113516": 260, "207667": 260, "009778": 260, "3419": 260, "445329": 260, "125197": 260, "198280": 260, "008907": 260, "422287": 260, "123864": 260, "192630": 260, "006340": 260, "6196": [260, 1009], "410507": 260, "163975": 260, "193761": 260, "005864": 260, "7578": [260, 1011], "335398": 260, "175224": 260, "189120": 260, "005820": 260, "8963": 260, "198284": 260, "238943": 260, "185496": 260, "005020": 260, "band": [260, 301, 972], "plot_likelihood_ratio": [260, 273], "scorer_nam": [261, 777, 791], "predefin": [261, 790, 951, 965, 992, 1019], "403": 261, "return_train_scor": [261, 396, 777, 780, 781, 791, 802, 1010, 1011, 1013], "402": 261, "maskedarrai": [261, 1010], "param_min_samples_split": 261, "sample_score_mean": 261, "sample_score_std": 261, "std_": [261, 1009], "rank_test_": 261, "best_scor": 261, "mean_test_": 261, "plot_multi_metric_evalu": [261, 273], "cawlei": [262, 962], "talbot": 262, "mach": [262, 390, 396, 574, 575], "2079": 262, "2107": 262, "007581": 262, "007833": 262, "num_trial": 262, "x_iri": [262, 996], "y_iri": [262, 996], "p_grid": 262, "non_nested_scor": 262, "nested_scor": 262, "leaveoneout": [262, 396, 992], "leaveonegroupout": [262, 396, 778, 785, 786, 992, 1010], "inner_cv": 262, "outer_cv": 262, "non_nest": 262, "score_differ": 262, "211": [262, 312, 318, 855, 866], "non_nested_scores_lin": 262, "nested_lin": 262, "difference_plot": 262, "951": [262, 273], "plot_nested_cross_validation_iri": [262, 273], "permutation_test_scor": [263, 396, 1004, 1011, 1016], "plant": [263, 266, 267, 361, 962, 999], "uncorrel": [263, 364, 508, 514, 521, 962, 995], "n_uncorrelated_featur": 263, "x_rand": 263, "undergo": 263, "score_iri": 263, "perm_scores_iri": 263, "pvalue_iri": 263, "n_permut": [263, 396, 804], "score_rand": 263, "perm_scores_rand": 263, "pvalue_rand": 263, "evid": [263, 340, 341, 375, 392, 396, 397, 399, 625, 775, 961], "ndata": 263, "destroi": [263, 400, 773, 848, 972], "ojala": [263, 396, 804], "garriga": [263, 396, 804], "plot_permutation_tests_for_classif": [263, 273], "t_p": 264, "plu": [264, 365, 372, 660, 810, 813, 963, 976], "f_p": 264, "f_n": 264, "denomin": [264, 400, 405, 455, 571, 685, 737, 956], "stairstep": 264, "ap": [264, 688, 689, 962], "sum_n": [264, 688, 962], "r_n": [264, 688, 962], "p_n": [264, 688, 962], "nth": [264, 688, 962], "r_k": 264, "p_k": [264, 962], "trapezoid": [264, 687, 688, 962], "binar": [264, 266, 267, 360, 362, 391, 393, 734, 814, 843, 844, 846, 850, 852, 862, 962, 964, 988, 999, 1018, 1020], "average_precision_scor": [264, 687, 689, 722, 762, 768, 962, 1004, 1007, 1011, 1012, 1018], "differenti": [264, 399, 402, 539, 540, 600, 603], "mt19937": [264, 269, 1015], "0x7feaba560c40": 264, "precisionrecalldisplai": [264, 310, 762, 764, 767, 1014, 1017], "got": [264, 351, 372, 531, 630, 646, 1017, 1019], "label_binar": [264, 266, 846, 1008], "average_precis": [264, 681, 688, 722, 962], "setup": [264, 266, 355, 366, 369, 373, 375, 965, 989], "f_score": 264, "extens": [264, 266, 282, 355, 356, 362, 363, 366, 370, 371, 375, 376, 378, 386, 397, 476, 483, 514, 721, 909, 917, 959, 961, 962, 981, 982, 986, 1004, 1010, 1017, 1018], "365": [264, 273, 321, 341, 394, 453], "plot_precision_recal": [264, 273], "pose": [265, 958, 996], "deem": [265, 266, 514, 970, 1017], "993": 265, "01761326452827255": 265, "14458295175799263": 265, "981": [265, 365, 962], "015": [265, 345, 970], "2610311314285183": 265, "003999234857448686": 265, "980": 265, "01672701940764589": 265, "5720620992012775": 265, "996": 265, "6666666666666666": 265, "2222222222222222": 265, "1111111111111111": 265, "n_top": 265, "param_dist": [265, 269, 309], "n_iter_search": 265, "plot_randomized_search": [265, 273], "unambigu": [266, 963, 1010], "notion": [266, 341, 357, 378, 397, 399, 958, 962], "scheme": [266, 282, 363, 380, 392, 396, 398, 400, 546, 571, 639, 640, 686, 790, 846, 847, 850, 852, 856, 862, 867, 878, 883, 951, 958, 976, 1004, 1012, 1015, 1016], "harder": [266, 267, 303, 363, 367, 369, 375, 392, 495, 541, 542, 985], "bulk": [266, 403, 425], "scrutin": 266, "y_onehot_test": 266, "class_id": [266, 267], "class_of_interest": 266, "nvirginica": 266, "versicolor": [266, 267, 484], "tp_c": 266, "fn_c": 266, "fp_c": 266, "tn_c": 266, "briefli": [266, 367, 379, 399, 951, 1014], "nreceiv": 266, "micro_roc_auc_ovr": 266, "mcclish": [266, 768], "deci": 266, "1989": [266, 616, 768, 836, 837, 958, 965], "jul": 266, "fpr_grid": 266, "mean_tpr": [266, 267], "interp": [266, 267, 327], "macro_roc_auc_ovr": 266, "deeppink": 266, "aqua": 266, "role": [266, 355, 367, 378, 397, 980], "pair_list": 266, "pair_scor": 266, "label_a": 266, "label_b": 266, "a_mask": 266, "b_mask": 266, "ab_mask": 266, "a_tru": 266, "b_true": 266, "idx_a": 266, "idx_b": 266, "fpr_a": 266, "tpr_a": 266, "fpr_b": 266, "tpr_b": 266, "macro_roc_auc_ovo": 266, "ovo_tpr": 266, "pool": [266, 378, 426, 616, 931, 983, 1015], "803": [266, 273], "plot_roc": [266, 273], "mean_fpr": 267, "viz": [267, 374], "interp_tpr": 267, "mean_auc": 267, "std_auc": 267, "std_tpr": 267, "tprs_upper": 267, "tprs_lower": 267, "plot_roc_crossv": [267, 273], "halvinggridsearchcv": [268, 269, 309, 559, 781, 951, 1016, 1018, 1019], "1e4": [268, 640, 660, 872, 974], "gsh": 268, "gsh_time": 268, "gs_time": 268, "make_heatmap": 268, "is_sh": 268, "make_cbar": 268, "param_c": [268, 777], "param_gamma": [268, 777, 791], "sh": [268, 371, 375, 951], "scores_matrix": 268, "pivot_t": 268, "aggfunc": 268, "0e": [268, 529, 530], "get_xticklabel": 268, "rotation_mod": 268, "cbar_ax": 268, "329": [268, 273, 430], "plot_successive_halving_heatmap": [268, 273], "rsh": [269, 309], "0x7feab9b11e40": 269, "_distn_infrastructur": 269, "rv_discrete_frozen": 269, "0x7feaa38eb1f0": 269, "0x7feab9539940": 269, "halvingrandomsearchcvhalvingrandomsearchcv": 269, "params_str": 269, "drop_dupl": 269, "n_resources_": [269, 780, 781, 951], "nn_candid": 269, "n_candidates_": [269, 780, 781, 951], "n_iterations_": [269, 780, 781], "multialign": 269, "plot_successive_halving_iter": [269, 273], "n_samples_train": [270, 880, 881, 882, 883, 884], "n_samples_test": [270, 880, 881, 882, 883, 884, 965, 972], "train_error": 270, "test_error": 270, "i_alpha_optim": 270, "alpha_optim": 270, "0002652948464431897": 270, "plot_train_error_vs_test_error": [270, 273], "nonlinear": [271, 310, 625, 669, 670, 674, 677, 845, 958, 959, 967, 972], "true_fun": 271, "polynomial_featur": 271, "205": [271, 273], "plot_underfitting_overfit": [271, 273], "validation_curv": [272, 335, 957, 1011, 1012, 1013, 1016], "subset_mask": 272, "isin": 272, "param_rang": [272, 335, 806, 957], "train_scores_mean": 272, "train_scores_std": 272, "test_scores_mean": 272, "test_scores_std": 272, "621": [272, 273, 749], "plot_validation_curv": [272, 273], "093": [273, 341, 451, 1009], "auto_examples_model_select": 273, "yeast": 275, "2417": 275, "103": [275, 277, 363, 399, 477, 535, 536, 1004], "jaccard": [275, 389, 430, 437, 680, 684, 700, 709, 714, 718, 758, 759, 760, 774, 965, 1012, 1013], "arrang": [275, 613, 810, 811, 812, 813, 962], "adam": [275, 294, 836, 837, 966, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "kleczewski": [275, 1011, 1012], "classifierchain": [275, 380, 811, 813, 1011, 1016, 1019], "jaccard_scor": [275, 684, 709, 714, 774, 962, 1013, 1016], "40597": 275, "wrapper": [275, 277, 373, 376, 396, 402, 524, 601, 652, 878, 978, 982, 1008, 1016], "base_lr": [275, 810], "y_pred_ovr": 275, "ovr_jaccard_scor": 275, "y_pred_chain": 275, "chain_jaccard_scor": 275, "y_pred_ensembl": 275, "ensemble_jaccard_scor": 275, "x_po": 275, "plot_classifier_chain_yeast": [275, 276], "auto_examples_multioutput": 276, "kneighborstransform": [277, 279, 307, 831, 965, 1014, 1018, 1019], "nmslib": 277, "pynndesc": 277, "pip": [277, 307, 308, 309, 310, 311, 312, 356, 366, 368, 371, 373, 383, 978], "pynndescenttransform": 277, "csr_matrix": [277, 308, 421, 425, 432, 476, 514, 524, 537, 538, 539, 540, 543, 544, 545, 546, 569, 574, 575, 695, 805, 854, 880, 881, 883, 884, 886, 887, 888, 889, 963, 972, 976, 977, 978, 1019], "transformermixin": [277, 369, 380, 445, 1012, 1019], "nmslibtransform": 277, "sw": 277, "n_samples_fit_": [277, 821, 822, 823, 825, 827, 829, 830, 831], "cosinesimil": 277, "nmslib_": 277, "adddatapointbatch": 277, "createindex": 277, "n_samples_transform": [277, 823, 831], "thread": [277, 308, 311, 366, 378, 380, 392, 399, 811, 812, 928, 929, 930, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1017, 1019], "num_thread": 277, "knnquerybatch": 277, "mnist_10000": 277, "mnist_20000": 277, "20_000": 277, "tsne_param": 277, "barnes_hut": [277, 673, 1011, 1012], "parallel_batch_queri": 277, "msg": [277, 946], "transformer_nam": 277, "longest": 277, "fit_dur": 277, "transform_dur": 277, "315": [277, 365], "884": 277, "769": 277, "448": 277, "759": 277, "numba": [277, 983], "cold": 277, "nearestneighbor": [277, 311, 392, 403, 425, 428, 441, 669, 670, 674, 821, 822, 823, 825, 829, 830, 831, 965, 1004, 1008, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "i_ax": 277, "int32": [277, 368, 380, 424, 427, 429, 431, 433, 880, 881, 882, 883, 884, 927, 977, 1013, 1019], "828": 277, "955": [277, 396, 635], "994": 277, "brute": [277, 378, 387, 396, 403, 425, 430, 437, 613, 614, 669, 670, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 969, 999, 1008, 1012, 1016, 1019], "spent": [277, 373, 803, 1019], "approximate_nearest_neighbor": [277, 291], "slow": [279, 299, 340, 355, 362, 366, 368, 397, 400, 427, 680, 853, 854, 858, 880, 883, 915, 959, 965, 983, 996, 1011], "temporarydirectori": [279, 307], "n_neighbors_list": 279, "graph_model": 279, "classifier_model": 279, "sklearn_graph_cache_": 279, "tmpdir": [279, 307], "full_model": 279, "classifier__n_neighbor": 279, "grid_model": 279, "mean_fit_tim": [279, 777, 791], "std_fit_tim": [279, 777, 791], "plot_caching_nearest_neighbor": [279, 291], "cmap_light": [280, 285, 288], "cmap_bold": [280, 285, 288], "darkblu": [280, 288], "neighbour": [280, 288, 442, 673, 967], "537": [280, 291, 333, 338], "plot_classif": [280, 291], "79269019073225": 281, "kerneldens": [281, 282, 290, 398, 1006, 1012, 1013, 1017, 1018, 1019], "new_data": [281, 369], "4x11": 281, "real_data": 281, "set_clim": 281, "602": [281, 291], "plot_digits_kde_sampl": [281, 291], "block": [282, 299, 311, 363, 365, 368, 372, 375, 380, 389, 392, 395, 398, 432, 433, 442, 453, 459, 460, 468, 469, 491, 493, 676, 930, 965, 967], "wildli": [282, 961], "kd": [282, 392, 398, 965, 1012, 1013, 1014], "jakevdp": [282, 290], "aaaaff": [282, 285], "tophat": [282, 398, 819, 820, 824], "log_den": 282, "x_src": 282, "format_func": 282, "ih": 282, "epanechnikov": [282, 398, 819, 820, 824], "funcformatt": 282, "nullloc": 282, "true_den": 282, "plot_kde_1d": [282, 291], "NOT": [283, 365, 370, 787, 819, 820], "725": [283, 291], "plot_lof_novelty_detect": [283, 291], "x_inlier": 284, "ground_truth": 284, "n_error": 284, "x_score": [284, 462, 463, 464, 465], "radiu": [284, 327, 365, 392, 423, 430, 669, 744, 761, 819, 820, 821, 822, 823, 827, 829, 830, 831, 833, 965, 1006, 1008, 1018], "legendhandl": 284, "_size": 284, "094": [284, 291, 452], "plot_lof_outlier_detect": [284, 291], "ffaaaa": 285, "aaffaa": 285, "00ff00": 285, "plot_nca_classif": [285, 291], "neighborhoodcomponentanalysi": 286, "dim_reduction_method": 286, "acc_knn": 286, "x_embed": [286, 287, 673, 677, 828, 965], "ntest": 286, "plot_nca_dim_reduct": [286, 291], "logsumexp": [287, 1011], "get_yaxi": [287, 299], "link_thickness_i": 287, "diff_embed": 287, "dist_embed": 287, "einsum": 287, "exp_dist_embed": 287, "relate_point": 287, "pt_i": 287, "pt_j": 287, "plot_nca_illustr": [287, 291], "8133333333333334": 288, "nearestcentroid": [288, 340, 963, 965, 1004, 1008, 1011, 1016, 1019], "shrink_threshold": [288, 826, 965, 1004, 1016], "plot_nearest_centroid": [288, 291], "barycent": [289, 1004], "plot_regress": [289, 291], "geospati": [290, 398], "haversin": [290, 398, 680, 742, 744, 965, 1013, 1016], "latitud": [290, 299, 363, 478, 680, 744], "longitud": [290, 299, 363, 478, 680, 744], "xtrain": 290, "ytrain": 290, "radian": [290, 680, 744], "land_mask": 290, "ball_tre": [290, 403, 425, 430, 437, 669, 670, 821, 822, 823, 824, 825, 827, 829, 830, 831, 965, 1004], "ocean": 290, "459": [290, 291, 341, 392, 423], "plot_species_kd": [290, 291], "auto_examples_neighbor": 291, "combat": [293, 397], "encourag": [293, 327, 367, 368, 378, 977, 982], "lesser": [293, 380, 423, 521, 958], "curvatur": 293, "complic": [293, 373, 402, 675, 965], "plot_mlp_alpha": [293, 297], "bfg": [294, 591, 592, 629, 630, 639, 650, 653, 655, 661, 668, 965, 966, 1019], "980000": 294, "096950": 294, "momentum": [294, 836, 837, 966], "049530": 294, "nesterov": [294, 836, 837, 966], "049540": 294, "360000": 294, "978444": 294, "860000": 294, "503452": 294, "504185": 294, "045311": 294, "956038": 294, "243802": 294, "992766": 294, "041297": 294, "993879": 294, "042898": 294, "638843": 294, "855465": 294, "912632": 294, "290584": 294, "909293": 294, "318387": 294, "991653": 294, "045934": 294, "840000": 294, "601052": 294, "940000": 294, "157334": 294, "154453": 294, "500000": 294, "692470": 294, "689143": 294, "689751": 294, "150527": 294, "850000": 294, "341523": 294, "336188": 294, "335919": 294, "689015": 294, "830000": 294, "512595": 294, "513034": 294, "930000": 294, "170087": 294, "schedul": [294, 356, 657, 658, 659, 836, 837, 930, 976, 986, 1011], "nesterovs_momentum": [294, 836, 837], "invscal": [294, 657, 658, 659, 836, 837, 976], "plot_arg": 294, "plot_on_dataset": 294, "nlearn": 294, "loss_": [294, 539, 540, 836, 837, 966, 1018], "loss_curve_": [294, 836, 837], "data_set": 294, "get_lin": 294, "plot_mlp_training_curv": [294, 297], "28x28": 295, "784": 295, "throw": [295, 376, 897, 1008, 1011, 1012, 1013, 1014, 1018], "infrastructur": [295, 980, 982, 983], "44139186": 295, "19174891": 295, "13983521": 295, "11378556": 295, "09443967": 295, "07846529": 295, "06506307": 295, "05534985": 295, "986429": 295, "953061": 295, "033": [295, 297, 970], "plot_mnist_filt": [295, 297], "greyscal": 296, "bernoulli": [296, 400, 401, 814, 815, 816, 817, 818, 835, 836, 837, 842, 958, 972, 984, 999, 1004], "bernoullirbm": [296, 836, 837, 967, 972, 1006, 1007, 1016, 1018], "yann": [296, 1004, 1006], "dauphin": [296, 1006], "gabriel": [296, 1012, 1013, 1014, 1017, 1018], "synnaev": 296, "convolv": 296, "minmax_scal": [296, 299, 849, 1009, 1012], "nudge_dataset": 296, "1px": 296, "direction_vector": 296, "apply_along_axi": 296, "feature_rang": [296, 849, 864, 972, 1006, 1016], "cg": [296, 639, 640, 653, 655, 668, 958, 1008, 1009, 1011, 1015, 1017, 1018], "rbm": [296, 835, 836, 837, 967], "rbm_features_classifi": 296, "6000": [296, 608], "raw_pixel_classifi": 296, "194": 296, "154": [296, 632, 963], "plot_rbm_logistic_classif": [296, 297], "auto_examples_neural_network": 297, "incom": [299, 363, 421], "unscal": [299, 304, 958, 962, 1012, 1018], "notabl": [299, 362, 380, 476, 708, 852, 959, 961, 965, 1008, 1011, 1018], "unterthin": [299, 1007, 1008, 1009], "medinc": [299, 309, 363], "housag": 299, "averoom": [299, 309, 363], "room": [299, 363, 372, 392, 985], "avebedrm": [299, 363], "bedroom": [299, 363], "aveoccup": [299, 309, 363], "features_idx": 299, "quantile_rang": [299, 857, 868, 1010], "yeo": [299, 303, 855, 866, 972, 1012, 1018], "cox": [299, 303, 855, 866, 972, 1012], "plasma": 299, "plasma_r": 299, "create_ax": 299, "bottom_h": 299, "left_h": 299, "rect_scatt": 299, "rect_histx": 299, "rect_histi": 299, "ax_scatt": 299, "ax_histx": 299, "ax_histi": 299, "ax_scatter_zoom": 299, "ax_histx_zoom": 299, "ax_histy_zoom": 299, "rect_colorbar": 299, "ax_colorbar": 299, "plot_distribut": 299, "hist_nbin": 299, "x0_label": 299, "x1_label": 299, "hist_x1": 299, "hist_x0": 299, "aesthet": [299, 978, 1009], "layout": [299, 378, 878, 879, 880, 883, 899, 977, 1007, 1009], "tick_bottom": 299, "tick_left": 299, "outward": 299, "ec": [299, 510], "make_plot": 299, "item_idx": 299, "ax_zoom_out": 299, "ax_zoom_in": 299, "zoom_in_percentile_rang": 299, "cutoffs_x0": 299, "cutoffs_x1": 299, "non_outliers_mask": 299, "colorbarbas": 299, "OR": [299, 392, 403, 425, 1015], "indistinguish": 299, "quadrant": 299, "plot_all_sc": [299, 305, 848, 849, 851, 855, 856, 857, 859, 863, 864, 865, 866, 867, 868, 869], "straightforward": [300, 367, 397, 986], "anywher": 300, "qinhanmin2005": 300, "sina": [300, 1017], "rnd": 300, "enc": [300, 302, 311, 852, 853, 972], "x_bin": 300, "line_bin": 300, "plot_discret": [300, 305], "get_nam": 301, "broader": [301, 958], "logisticregression__c": 301, "linearsvc__c": 301, "kbinsdiscretizer__n_bin": 301, "gradientboostingclassifier__learning_r": 301, "svc__c": 301, "cm_piyg": 301, "piyg": 301, "b30065": 301, "178000": 301, "est_idx": 301, "plot_discretization_classif": [301, 305], "centers_0": 302, "centers_1": 302, "x_list": 302, "grid_encod": 302, "stripe": 302, "676": [302, 305, 650], "plot_discretization_strategi": [302, 305], "powertransform": [303, 856, 866, 952, 972, 1012, 1015, 1018, 1020], "johnwon": 303, "weibul": 303, "bimod": [303, 398], "ineffect": [303, 972, 1012, 1013], "eric": [303, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "ericchang2017": 303, "northwestern": [303, 639], "contact": [303, 378, 982], "font_siz": 303, "bc": 303, "qt": [303, 856], "x_lognorm": [303, 972], "x_chisq": 303, "chisquar": 303, "x_weibul": 303, "x_gaussian": 303, "x_uniform": 303, "loc_a": 303, "loc_b": 303, "x_a": 303, "x_b": 303, "x_bimod": 303, "d81b60": 303, "0188ff": 303, "ffc107": 303, "b7a2ff": 303, "2ec5ac": 303, "figaspect": 303, "axes_idx": 303, "axes_list": 303, "x_trans_bc": 303, "lmbda_bc": 303, "lambdas_": [303, 855, 1017], "x_trans_yj": 303, "lmbda_yj": 303, "x_trans_qt": 303, "ax_origin": 303, "ax_bc": 303, "ax_yj": 303, "ax_qt": 303, "x_tran": [303, 369, 388, 423, 444, 855, 866, 972], "meth_nam": 303, "lmbda": 303, "702": [303, 305], "plot_map_data_to_norm": [303, 305], "involv": [304, 307, 327, 355, 357, 363, 368, 371, 380, 381, 395, 402, 680, 807, 808, 959, 963, 965, 969, 977, 986, 995, 1012], "kneighbor": [304, 311, 821, 822, 823, 825, 827, 965, 1008, 1013, 1017, 1018, 1019], "obatin": 304, "tyler": [304, 1011, 1017, 1018, 1019], "lanigan": [304, 1011], "tylerlanigan": 304, "sebastian": [304, 1005, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "raschka": [304, 1009, 1010, 1011, 1012, 1013, 1016], "sebastianraschka": 304, "alcohol": [304, 365], "malic": [304, 365], "acid": [304, 365], "scaled_x_train": 304, "prolin": [304, 365], "x_plot_scal": 304, "fit_and_plot_model": 304, "desicion": 304, "scaled_pca": 304, "x_train_transform": [304, 351, 396], "x_train_std_transform": 304, "first_pca_compon": 304, "target_class": 304, "repercuss": 304, "logisticregressioncv": [304, 380, 639, 958, 963, 1008, 1009, 1010, 1012, 1013, 1014, 1018, 1019], "unscaled_clf": 304, "scaled_clf": 304, "y_pred_scal": 304, "y_proba_sc": 304, "0824": 304, "vastli": 304, "384": [304, 305, 341, 677, 879], "plot_scaling_import": [304, 305], "auto_examples_preprocess": 305, "announc": [307, 308, 309, 310, 311, 312, 371, 381], "bug": [307, 308, 309, 310, 311, 312, 358, 366, 369, 370, 372, 375, 378, 380, 980, 983, 1004, 1005, 1006, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "latest": [307, 308, 309, 310, 311, 312, 366, 368, 371, 373, 375, 978, 980, 1018], "upgrad": [307, 308, 309, 310, 311, 312, 383, 983, 1004, 1009, 1012], "conda": [307, 308, 309, 310, 311, 312, 356, 368, 370, 371, 375, 385, 978], "forg": [307, 308, 309, 310, 311, 312, 356, 370, 371, 375, 383], "plot_roc_curv": [307, 1014, 1016], "plot_precision_recall_curv": [307, 1014, 1016, 1017], "stackingclassifi": [307, 351, 399, 548, 1014, 1015, 1016, 1017, 1018, 1019], "9473684210526315": 307, "radiusneighborstransform": [307, 823, 965, 1014, 1016, 1018, 1019], "sklearn_cache_": 307, "isomap__n_neighbor": 307, "nan_euclidean_dist": [307, 742, 952, 1014], "ccp_alpha": [307, 345, 537, 538, 539, 540, 544, 545, 886, 887, 888, 889, 978, 1014], "tree_": [307, 345, 349, 824, 886, 887, 888, 889], "node_count": [307, 345, 349, 886, 887, 888, 889], "check_estim": [307, 369, 380, 910, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019], "pytest": [307, 356, 366, 368, 369, 370, 383, 385, 909, 910, 1014, 1017], "estimator_check": [307, 369, 380, 1011, 1012, 1014, 1015, 1018, 1019, 1020], "parametrize_with_check": [307, 369, 909, 1014, 1015], "test_sklearn_compatible_estim": [307, 910], "ovo": [307, 768, 807, 880, 883, 962, 963, 977], "preval": [307, 380, 693, 962], "decision_function_shap": [307, 336, 880, 883, 977, 1009, 1010, 1013, 1014], "9913333333333333": 307, "341": [307, 313, 341], "plot_release_highlights_0_22_0": [307, 313], "await": 308, "lam": [308, 309, 1015], "35776189065725783": 308, "42425183539869404": 308, "openmp": [308, 366, 370, 378, 380, 392, 399, 930, 1015, 1017], "7281859673451726": 308, "10k": [308, 427], "monotoinc": 308, "gbdt_cst": 308, "999791942438998": 308, "plot_release_highlights_0_23_0": [308, 313], "art": [309, 373, 630, 673, 982, 986], "footprint": [309, 312, 355, 357, 392, 397, 535, 536, 543, 1006, 1009, 1010, 1015, 1016, 1019], "yarowski": [309, 875, 975], "selftrainingclassifi": [309, 318, 319, 320, 975, 1016], "random_unlabeled_point": [309, 873, 874, 875], "self_training_model": [309, 875], "base_estim": [309, 369, 390, 418, 533, 534, 535, 536, 652, 810, 813, 875, 951, 958, 1015, 1017, 1018, 1019], "selftrainingclassifierselftrainingclassifi": 309, "7336": 309, "linear_baselin": 309, "7137": 309, "houseag": [309, 363], "decisiontreeregressordecisiontreeregressor": 309, "effort": [309, 368, 373, 982, 986, 1015, 1017], "plot_release_highlights_0_24_0": [309, 313], "l2_regular": [310, 399, 541, 542], "max_bin": [310, 311, 399, 541, 542], "typeerror": [310, 372, 692, 902, 946, 1011, 1012, 1015, 1017], "quantileregressor": [310, 958, 962, 1017, 1018, 1019], "min_": [310, 392, 399, 849, 958, 972, 976, 977, 978], "sum_i": [310, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 953, 954, 958, 960, 962, 967], "pb_q": [310, 958], "_1": [310, 394, 397, 400, 511, 517, 518, 520, 525, 526, 527, 627, 628, 633, 634, 635, 636, 637, 641, 642, 643, 644, 662, 663, 664, 665, 746, 958, 960, 962, 977], "get_feature_nam": [310, 1012, 1013, 1015, 1016, 1017], "pet": [310, 768, 962], "dog": [310, 311, 563, 763, 972], "fish": 310, "pet_cat": 310, "pet_dog": 310, "pet_fish": 310, "plot_": [310, 383], "016": [310, 313, 341], "plot_release_highlights_1_0_0": [310, 313], "x_1d": 311, "hist_quantil": 311, "log_reg_input_featur": 311, "gather": [311, 375, 381, 391, 392, 972, 986], "min_frequ": [311, 852, 972, 1018], "max_categori": [311, 852, 972, 1018], "rabbit": [311, 972], "snake": [311, 563, 972], "infrequent_categories_": [311, 852, 972], "x0_cat": [311, 972], "x0_rabbit": [311, 972], "x0_infrequent_sklearn": [311, 972], "refactor": [311, 1004, 1006, 1007, 1008, 1014, 1017, 1018, 1019], "radius_neighbor": [311, 827, 829, 830, 831, 1008, 1013, 1014, 1016, 1017, 1018, 1019], "summari": [311, 351, 365, 378, 673, 694, 891, 960, 963, 982, 997], "pairwise_distances_argmin_min": [311, 759, 1007, 1012, 1018, 1019], "radiusneighborsclassifi": [311, 821, 822, 827, 830, 963, 965, 1004, 1006, 1010, 1012, 1014, 1016, 1017, 1018, 1019], "radiusneighborsregressor": [311, 821, 822, 827, 829, 965, 1004, 1006, 1012, 1014, 1016, 1017, 1018, 1019], "trustworthi": [311, 1012, 1013, 1018, 1019], "labelpropag": [311, 317, 874, 875, 963, 975, 1005, 1010, 1011, 1014, 1015, 1016, 1018, 1019, 1020], "labelspread": [311, 315, 316, 317, 319, 320, 873, 875, 963, 975, 1005, 1010, 1011, 1014, 1015, 1018, 1019, 1020], "blog": [311, 355, 368, 373, 375, 1015], "cython": [311, 355, 356, 366, 368, 370, 376, 378, 383, 385, 388, 392, 399, 488, 972, 973, 976, 977, 982, 983, 1004, 1007, 1008, 1010, 1016, 1019], "readili": [311, 397, 978, 986], "true_w": 311, "true_h": 311, "x_reconstruct": [311, 462, 463, 464], "00364": 311, "divis": [311, 373, 392, 400, 571, 572, 575, 693, 694, 709, 710, 718, 726, 763, 764, 767, 962, 996, 1008, 1012, 1013, 1016], "repeatedli": [311, 351, 380, 392, 399, 402, 488, 526, 647, 648, 657, 658, 659, 761, 952, 966, 992], "bisect_km": 311, "960": [311, 313], "plot_release_highlights_1_1_0": [311, 313], "video": [312, 358, 362, 370, 483, 963, 986, 989], "sepal_col": 312, "petal_col": 312, "kbin": 312, "x_out": [312, 843, 852, 853], "052506": 312, "592373": 312, "189830": 312, "973554": 312, "416010": 312, "630382": 312, "107": [312, 392, 873, 963, 1006], "765012": 312, "362176": 312, "021849": 312, "788808": 312, "hist_no_interact": 312, "v1": [312, 362, 383, 404, 420, 513, 539, 541, 657, 736, 775, 776, 814, 815, 816, 818, 1016, 1019, 1020], "liac": [312, 362, 368, 476, 1019], "arff": [312, 368, 476, 1016, 1019], "ticket": [312, 368], "cabin": 312, "boat": 312, "allen": [312, 1007, 1009, 1011, 1014], "elisabeth": 312, "walton": 312, "24160": 312, "3375": 312, "b5": 312, "loui": [312, 1009, 1010, 1014, 1016, 1018], "mo": [312, 1015], "allison": 312, "hudson": 312, "9167": 312, "113781": 312, "5500": [312, 669, 959], "c22": 312, "c26": 312, "montreal": 312, "pq": 312, "chestervil": 312, "ON": 312, "helen": 312, "lorain": 312, "joshua": [312, 363, 1006, 1007, 1009, 1010, 1016, 1019], "creighton": 312, "bessi": 312, "waldo": 312, "compliant": [312, 368], "cupi": [312, 388], "gpu": [312, 388, 966, 983, 997], "changelog": [312, 371, 380], "804": [312, 313], "plot_release_highlights_1_2_0": [312, 313], "353": [313, 341, 997], "auto_examples_release_highlight": 313, "semisupervis": [315, 380], "clai": [315, 316, 317, 320, 1004], "woolam": [315, 316, 317, 320, 1004], "n_total_sampl": [315, 316], "n_labeled_point": [315, 316], "unlabeled_set": 315, "everyth": [315, 351, 371, 373, 378, 444, 921, 982, 983, 1004], "lp_model": [315, 316], "predicted_label": [315, 316], "transduction_": [315, 316, 317, 873, 874, 875], "true_label": [315, 316], "_plot": 315, "0x7feaba8d7eb0": 315, "pred_entropi": [315, 316], "label_distributions_": [315, 316, 873, 874, 1015], "uncertainty_index": [315, 316], "image_index": [315, 316], "338": [315, 321], "plot_label_propagation_digit": [315, 321], "max_iter": 316, "______________________________________________________________________": 316, "330": 316, "270": 316, "unlabeled_indic": 316, "transduc": 316, "in1d": [316, 1011], "delete_indic": 316, "183": [316, 373, 963, 1004], "nfit": 316, "delete_index": 316, "plot_label_propagation_digits_active_learn": [316, 321], "label_spread": 317, "labelspreadinglabelspread": 317, "output_label": 317, "output_label_arrai": 317, "outer_numb": 317, "inner_numb": 317, "153": [317, 321, 644], "plot_label_propagation_structur": [317, 321], "breast_canc": 318, "569": [318, 365, 480, 573, 576, 577, 579], "augment": [318, 611, 860, 986], "oliv": [318, 320, 1012, 1013, 1015, 1016, 1017], "rausch": [318, 320, 1012, 1013, 1016], "rauscho": [318, 320], "ethz": [318, 320], "total_sampl": [318, 516], "base_classifi": [318, 320, 975], "x_valu": 318, "99999": 318, "amount_label": 318, "amount_iter": 318, "self_training_clf": 318, "skfold": 318, "y_test_tru": 318, "labeled_iter_": [318, 875], "return_count": [318, 341, 831], "capsiz": 318, "twinx": 318, "654": [318, 321], "plot_self_training_varying_threshold": [318, 321], "2823": 319, "2117": [319, 341], "408": 319, "752": [319, 340], "1709": 319, "1091": 319, "839": [319, 661], "tfidftransform": [319, 341, 342, 400, 469, 572, 997, 1011, 1012, 1018, 1020], "sdg_param": 319, "vectorizer_param": 319, "selftrain": 319, "st_pipelin": 319, "ls_pipelin": 319, "eval_and_print_metr": 319, "y_mask": 319, "x_20": 319, "y_20": 319, "plot_semi_supervised_newsgroup": [319, 321], "y_rand": 320, "y_30": 320, "y_50": 320, "ls30": 320, "ls50": 320, "ls100": 320, "st30": 320, "st50": 320, "rbf_svc": [320, 977], "color_map": 320, "935": [320, 321, 1011], "plot_semi_supervised_versus_svm_iri": [320, 321], "auto_examples_semi_supervis": 321, "my_kernel": [323, 977], "101": [323, 338, 342, 343, 365, 825, 1005], "plot_custom_kernel": [323, 338], "2x2": [324, 392, 734], "plot_iris_svc": [324, 338], "convention": [325, 380, 874], "support_vector_indic": 325, "plot_linearsvc_support_vector": [325, 338], "381": [326, 338], "plot_oneclass": [326, 338], "midpoint": 327, "blink": 327, "act": [327, 340, 368, 379, 398, 399, 694, 709, 710, 718, 763, 764, 767, 854, 858, 959, 962, 965, 977, 1012], "spuriou": [327, 375, 1017, 1018, 1019], "c_rang": 327, "gamma_rang": 327, "midpointnorm": 327, "masked_arrai": [327, 777, 791], "x_2d": 327, "y_2d": 327, "cheat": [327, 966, 976, 1006], "c_2d_rang": 327, "gamma_2d_rang": 327, "bright": 327, "brutal": 327, "plot_rbf_paramet": [327, 338], "plot_separating_hyperplan": [328, 338], "plain": [329, 402, 638, 976], "n_samples_1": [329, 977], "n_samples_2": [329, 977], "clusters_std": 329, "wclf": 329, "wdisp": 329, "surface_": [329, 612], "plot_separating_hyperplane_unbalanc": [329, 338], "blown": 330, "score_mean": 330, "score_std": 330, "plot_svm_anova": [330, 338], "fignum": [331, 332], "202": [331, 338], "plot_svm_kernel": [331, 338], "plot_svm_margin": [332, 338], "unreg": 332, "perpendicular": 332, "yy_down": 332, "yy_up": 332, "079": [332, 338, 365], "nusvc": [333, 355, 881, 963, 1004, 1005, 1006, 1009, 1012, 1014, 1015, 1016, 1018], "plot_svm_nonlinear": [333, 338], "svr_rbf": 334, "svr_lin": 334, "svr_poli": 334, "kernel_label": 334, "model_color": 334, "setdiff1d": 334, "plot_svm_regress": [334, 338], "mathcal": [335, 397, 399, 608, 677, 954, 956, 958, 962, 976, 1017], "omega": [335, 395, 956], "model_l1": 335, "logx": 335, "train_size_idx": 335, "results_sc": 335, "c_scale": 335, "model_l2": 335, "229": [335, 338, 962], "plot_svm_scale_c": [335, 338], "break_ti": [336, 880, 883, 977, 1014], "accent": [336, 569, 570, 572, 1014], "961": [336, 338, 366, 383, 384, 385, 836], "plot_svm_tie_break": [336, 338], "emphasi": [337, 395, 880, 881, 882, 883, 884, 969, 982], "subtl": [337, 351, 961, 983], "plot_decision_funct": 337, "sample_weight_last_ten": 337, "sample_weight_const": 337, "clf_no_weight": 337, "clf_weight": 337, "plot_weighted_sampl": [337, 338], "auto_examples_svm": 338, "signatur": [340, 341, 363, 468, 469, 537, 538, 544, 545, 575, 591, 592, 640, 654, 656, 692, 722, 783, 801, 803, 806, 852, 951, 1011, 1017], "size_mb": 340, "utf": [340, 342, 400, 467, 483, 563, 569, 570, 572], "load_dataset": 340, "sublinear_tf": [340, 397, 400, 571, 572], "duration_train": 340, "duration_test": 340, "data_train_size_mb": 340, "data_test_size_mb": 340, "2034": [340, 363], "98mb": 340, "1353": 340, "87mb": 340, "390": [340, 341], "205mb": 340, "7831": 340, "996mb": 340, "ridgeclassifi": [340, 355, 653, 654, 656, 958, 963, 1009, 1013, 1017, 1018, 1019], "sparse_cg": [340, 653, 655, 668, 958, 1005, 1011, 1013, 1014, 1018], "rarer": [340, 342, 400], "deeper": [340, 978], "plot_feature_effect": 340, "average_feature_effect": 340, "top5": 340, "top_indic": 340, "predictive_word": 340, "bar_siz": 340, "y_loc": 340, "keith": [340, 1004, 1009], "atheist": 340, "orbit": [340, 341], "caltech": 340, "expectedli": 340, "pollut": [340, 708, 765, 962, 968], "sender": [340, 363], "livesei": 340, "solntz": 340, "wpd": 340, "sgi": 340, "jon": [340, 1011, 1014, 1015, 1017, 1018], "nntp": [340, 363, 997], "1qlettinn8oi": 340, "cco": 340, "allan": [340, 1016], "schneider": [340, 1017], "me": 340, "instinct": 340, "happi": [340, 378, 381, 795, 796], "listen": 340, "murder": 340, "voluntari": 340, "disregard": [340, 380, 400, 413, 445, 462, 463, 464, 532, 534, 536, 538, 540, 542, 545, 548, 550, 592, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 659, 660, 702, 703, 704, 765, 812, 813, 822, 830, 837, 848, 849, 855, 856, 859, 863, 866, 867, 869, 879, 881, 884, 887, 889, 962, 1012], "beings": 340, "bahavior": 340, "theirs": 340, "mimicri": 340, "imit": 340, "parrot": 340, "polli": 340, "pulchritud": 340, "anim": [340, 400], "kill": 340, "Or": [340, 349, 396, 397, 852, 962, 968, 976], "sigh": 340, "wonder": 340, "bahaviour": 340, "believ": [340, 375, 378, 986], "primat": 340, "arbitarili": 340, "poster": [340, 367, 368, 996], "weren": [340, 853, 1013], "slai": 340, "mate": 340, "ritual": 340, "whatnot": 340, "aren": [340, 363, 371, 383, 391, 706, 736, 967, 1014, 1016], "ye": [340, 375, 380, 846, 862, 958], "child": [340, 349, 356, 378, 380, 392, 399, 423, 537, 538, 539, 540, 541, 542, 544, 545, 546, 886, 887, 888, 889, 930, 1011], "gorilla": 340, "dolphin": 340, "platypu": 340, "writer": 340, "launch": [340, 341, 383, 986], "custom_nam": 340, "clf_descr": 340, "rocchio": [340, 826], "000605": 340, "5316": 340, "0364": 340, "000652": 340, "000962": 340, "704": 340, "0297": 340, "000627": 340, "0265": 340, "000585": 340, "762": 340, "00273": 340, "00101": 340, "748": [340, 373], "00187": 340, "000503": 340, "779": 340, "training_tim": 340, "txt": [340, 362, 473, 483], "curs": [340, 341, 392, 398, 402, 964, 965, 991, 996], "harm": [340, 369, 400, 773], "plot_document_classification_20newsgroup": [340, 343], "discov": [341, 392, 397, 400, 403, 425, 428, 988, 1019], "metadata": [341, 362, 363, 386, 468, 469, 476, 982, 983, 988], "category_s": 341, "true_k": 341, "3387": 341, "evaluations_std": 341, "fit_and_evalu": 341, "evaluation_std": 341, "score_valu": 341, "std_score": [341, 1017], "reweight": [341, 380, 394, 399, 571, 572, 629, 650, 661], "collis": [341, 342, 400, 563, 570], "x_tfidf": 341, "487": [341, 704], "7929": [341, 1011], "devid": 341, "prod": [341, 602], "phenomenon": [341, 972], "cluster_s": 341, "3384": 341, "1733": 341, "717": 341, "238": 341, "1115": 341, "1417": 341, "599": [341, 661], "1695": 341, "649": 341, "446": [341, 402, 706, 736, 962], "254": 341, "557": [341, 342], "973": [341, 396], "987": 341, "347": 341, "397": [341, 363], "redo": 341, "x_lsa": 341, "explained_vari": [341, 962], "405": 341, "024": 341, "036": [341, 373, 452], "minibatch_kmean": 341, "051": [341, 452], "influenti": [341, 986], "original_space_centroid": 341, "order_centroid": 341, "shuttl": 341, "sparciti": 341, "lsa_vector": 341, "50_000": 341, "x_hashed_lsa": 341, "842": 341, "413": 341, "030": 341, "366": 341, "055": [341, 365, 962], "312": [341, 1007], "df_std": 341, "speak": [341, 355, 368, 976], "safer": [341, 351, 392, 396, 1004], "080": [341, 343], "plot_document_clust": [341, 343], "assembl": [342, 839], "18000": [342, 363], "raw_data": 342, "data_size_mb": 342, "3803": 342, "245mb": 342, "anyth": [342, 371, 373, 380, 396, 926, 1018], "unicod": [342, 400, 467, 483, 563, 569, 570, 572, 927, 1004, 1012, 1016], "charact": [342, 368, 372, 380, 400, 483, 488, 489, 569, 570, 572, 890, 967, 997, 1004, 1017], "underscor": [342, 369, 380, 946, 994, 1004, 1014, 1017], "tok": [342, 400], "findal": 342, "token_freq": 342, "dict_count_vector": 342, "47928": 342, "vocabulary_": [342, 400, 562, 569, 572, 997, 1004], "19145": 342, "n_nonzero_column": 342, "43873": 342, "inact": [342, 362, 368], "47668": 342, "input_typ": [342, 400, 444, 563], "494": 342, "y_po": 342, "downsid": 342, "featureheash": 342, "implicitli": [342, 376, 399, 578, 613, 614, 858, 952, 954, 969, 972, 977], "token_pattern": [342, 400, 569, 570, 572], "705": 342, "47885": 342, "476": 342, "plot_hashing_vs_dict_vector": [342, 343], "918": 343, "auto_examples_text": 343, "parameter": [345, 402, 595, 596, 603, 604, 775, 776, 958, 959, 967, 972, 978], "weakest": [345, 978], "cost_complexity_pruning_path": [345, 886, 887, 888, 889], "drawstyl": [345, 681], "3272984419327777": 345, "392": [345, 350], "plot_cost_complexity_prun": [345, 350], "ryb": 346, "pairidx": 346, "borderpad": 346, "handletextpad": 346, "plot_iris_dtc": [346, 350], "plot_tre": [346, 349, 978, 1013, 1015, 1016, 1017, 1019], "727": [346, 350], "plot_tree_regress": [347, 350], "regr_3": 348, "y_3": 348, "226": [348, 350, 392, 403, 425], "plot_tree_regression_multioutput": [348, 350], "decision_path": [349, 537, 538, 544, 545, 546, 886, 887, 888, 889, 1010, 1015], "children_left": 349, "children_right": 349, "n_node_sampl": 349, "travers": [349, 965, 969], "n_node": [349, 422, 426, 443, 537, 538, 544, 545, 546, 886, 887, 888, 889, 920], "node_depth": 349, "is_leav": 349, "pop": [349, 378, 893, 992, 1012], "visit": [349, 368, 969], "node_id": [349, 890, 892], "is_split_nod": 349, "children": [349, 392, 399, 422, 426, 443, 546, 1008], "800000011920929": 349, "950000047683716": 349, "node_index": 349, "node_ind": 349, "leaf_id": 349, "sample_id": [349, 363, 477], "threshold_sign": 349, "inequ": [349, 380, 392, 424, 427, 439, 680, 959, 960, 965], "boolean": [349, 363, 368, 369, 376, 393, 399, 400, 401, 444, 541, 542, 562, 563, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 610, 613, 614, 617, 630, 652, 680, 808, 814, 835, 842, 861, 894, 946, 952, 958, 964, 969, 972, 978, 1004, 1007, 1009, 1010, 1011, 1013, 1014, 1015, 1017, 1018, 1019], "common_nod": 349, "common_node_id": 349, "plot_unveil_tree_structur": [349, 350], "529": 350, "auto_examples_tre": 350, "anti": [351, 587, 814, 964], "x_test_transform": [351, 396], "standard_norm": 351, "unfair": 351, "x_select": 351, "gbc": 351, "x_train_select": 351, "x_test_select": 351, "tip": [351, 354, 358, 368, 370, 387, 400, 514, 521, 626, 673, 958, 984, 998, 999, 1002, 1007], "glossari": [351, 358, 368, 369, 373, 391, 403, 404, 418, 421, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 444, 447, 449, 452, 454, 468, 471, 472, 475, 477, 483, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 564, 565, 575, 583, 588, 589, 591, 592, 608, 613, 615, 620, 621, 622, 623, 627, 628, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 668, 669, 670, 671, 672, 673, 674, 675, 676, 682, 754, 758, 761, 771, 775, 776, 777, 779, 780, 781, 782, 783, 789, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 821, 822, 824, 825, 827, 828, 829, 830, 832, 833, 835, 836, 837, 838, 841, 844, 856, 867, 870, 871, 873, 874, 878, 879, 880, 883, 886, 887, 888, 889, 914, 915, 933, 936, 951, 952, 958, 988, 1012], "mtrand": 351, "_rand": 351, "85418642": 351, "79084103": 351, "13077794": 351, "11915045": 351, "56479934": 351, "70814003": 351, "25291366": 351, "55212743": 351, "18197458": 351, "37845099": 351, "snippet": [351, 368, 372, 375, 378, 388, 399, 400, 401, 952, 972, 985, 1017], "mutat": [351, 1012], "somewhat": [351, 357, 368, 369, 397, 399, 880, 883, 958, 977, 978], "debug": [351, 356, 370, 373, 380, 382, 608, 877, 928, 982, 997, 1012, 1016], "govern": [351, 355, 358, 368, 380, 980, 986], "implic": 351, "rf_123": 351, "rf_inst": 351, "didn": [351, 380, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "strict": [351, 366, 380, 397, 483, 515, 569, 570, 572, 958, 1004, 1013, 1016], "pervas": [351, 368], "throughout": [351, 380, 608, 778, 836, 837, 988, 1007, 1012], "codebas": [351, 368, 369, 373, 400, 1004, 1010], "unlucki": 351, "lucki": 351, "fairer": 351, "temptat": [351, 368], "throughput": [354, 999, 1007], "switch": [354, 659, 685, 698, 717, 735, 737, 773, 819, 820, 914, 915, 962, 965, 999, 1004], "offlin": [355, 368], "review": [355, 363, 369, 370, 371, 372, 373, 378, 381, 396, 397, 515, 521, 962, 972, 989], "bottleneck": [355, 373, 399, 428, 836, 837], "hurt": [355, 514, 1012], "toolkit": [355, 982, 986], "branch": [355, 366, 368, 370, 371, 392, 399, 423, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 886, 887, 888, 889, 891, 965, 969, 978], "sklearn_assume_finit": 355, "assume_finit": [355, 356, 448, 876], "assert_all_finit": [355, 376, 448], "nm": 355, "csc": [355, 378, 380, 400, 531, 533, 534, 651, 673, 846, 848, 854, 859, 861, 863, 869, 894, 898, 899, 925, 937, 938, 940, 941, 942, 943, 965, 972, 1012, 1013, 1015, 1018], "32bit": [355, 927], "speedup": [355, 397, 399, 631, 635, 638, 1004, 1005, 1006, 1007, 1019], "multithread": [355, 392, 878, 879, 880, 881, 882, 883, 884], "bla": [355, 356, 366, 373, 1004, 1012, 1013, 1015, 1016], "sparsity_ratio": 355, "gbt": 355, "speedi": 355, "packet": 355, "reuter": [355, 363], "carefulli": [355, 397], "spawn": [355, 378, 777, 791, 800, 801, 802, 1015], "gil": [355, 356, 930, 1007, 1012, 1013, 1016, 1017], "ought": 355, "lapack": [355, 356, 366, 512, 515, 521, 669, 1019], "dgemm": 355, "show_vers": [355, 366, 368, 375, 383, 1012], "atla": [355, 366], "rebuild": [355, 386, 400, 423], "openbla": [355, 356, 366, 378, 930, 1017], "mkl": [355, 356, 366, 378, 930, 1004], "veclib": [355, 378], "osx": 355, "nouri": [355, 1005, 1007], "instruct": [355, 368, 369, 370, 371, 372, 375, 378, 379, 483, 569, 570, 572, 988, 997, 1004], "ubuntu": [355, 366, 373, 375], "1gb": 355, "mib": [355, 448, 876], "working_memori": [355, 356, 448, 761, 876, 1012], "adher": [355, 369, 380, 909, 910, 1004, 1005], "pairwise_distances_chunk": [355, 758, 1012, 1015], "facilit": [355, 380, 386, 982, 983, 1010, 1013], "moment": [355, 397, 402, 421, 596, 604, 836, 837, 926, 966, 967], "000024": 355, "027400": 355, "mileag": 355, "deploi": [355, 382, 386, 983, 986], "upstream": [355, 368, 371, 375, 378, 972, 1013], "lighter": [355, 683, 769], "threadpoolctl": [356, 366, 383, 385], "subsect": [356, 391], "worker": [356, 380, 400, 928, 929, 930, 1019], "14228": 356, "loki": [356, 930, 962, 1012, 1015], "duplic": [356, 367, 368, 380, 392, 403, 425, 428, 429, 495, 616, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 803, 850, 948, 965, 1004, 1007, 1016, 1018], "memmap": [356, 363, 380, 397, 488, 514, 1012], "1mb": [356, 1009], "parallel_backend": [356, 403, 418, 425, 428, 430, 432, 437, 438, 441, 444, 447, 452, 511, 515, 516, 517, 519, 522, 523, 525, 526, 528, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 575, 583, 591, 613, 615, 620, 628, 632, 634, 636, 638, 639, 640, 642, 644, 646, 647, 649, 657, 660, 669, 670, 671, 672, 673, 674, 675, 754, 758, 761, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 812, 821, 822, 825, 827, 829, 830, 832, 833, 838, 841, 873, 874, 1012], "exclus": [356, 378, 397, 399, 608, 609, 611, 951, 958, 962, 963, 986, 1011, 1015], "omp_num_thread": 356, "my_script": 356, "algebra": [356, 366, 370, 378, 397, 400, 442, 845, 972], "bli": [356, 366, 378], "mkl_num_thread": 356, "openblas_num_thread": 356, "blis_num_thread": 356, "bash": [356, 375], "zsh": 356, "prompt": [356, 366, 368, 383, 385, 400, 988], "pypi": [356, 366, 368, 369, 371, 373, 383, 978, 1012, 1016, 1018, 1019], "channel": [356, 363, 366, 378, 400, 473, 474, 564, 565, 567, 568], "subscript": [356, 930, 1017], "max_thread": [356, 373], "n_cpu": [356, 380], "lib": [356, 366, 383, 982], "_num_thread": 356, "singleton": [356, 785, 901, 1017], "aforement": [356, 963], "global_random_se": 356, "fixtur": [356, 368], "ci": [356, 370, 371, 375, 964, 1010, 1012], "build_numb": 356, "disrupt": 356, "config": [356, 368, 375, 607, 1012], "contributor": [356, 370, 371, 372, 375, 378, 380, 962, 980, 983, 1005, 1006, 1007], "encount": [356, 366, 386, 392, 399, 400, 476, 541, 542, 562, 814, 815, 816, 818, 852, 937, 972, 976, 985, 986, 997, 1012, 1015], "unrel": [356, 372, 375, 400, 495], "watch": [356, 373], "annoi": 356, "test_your_test_nam": 356, "skip": [356, 368, 369, 376, 400, 448, 548, 627, 628, 633, 641, 642, 643, 652, 662, 876, 997, 1008, 1011, 1014, 1016, 1018], "global_dtyp": 356, "boundscheck": 356, "segfault": [356, 1004, 1012, 1017], "posix": [356, 378], "pairwisedistancesreduct": 356, "adequ": [356, 373, 547, 988, 1017], "drive": [357, 397, 398, 399, 529, 976, 986, 997], "passiveaggressiveregressor": [357, 958, 1005, 1008, 1011, 1012, 1015, 1017], "maxabsscal": [357, 843, 863, 952, 972, 1009, 1012, 1013, 1014, 1015, 1020], "routin": [357, 362, 365, 368, 369, 370, 373, 375, 378, 380, 401, 653, 655, 668, 680, 880, 881, 882, 883, 884, 959, 965, 972, 973, 976, 982, 986, 1004, 1018, 1019], "passiveaggress": [357, 400], "late": 357, "fledg": [357, 400], "naivebay": 357, "dramat": 357, "welcom": [358, 367, 368, 375, 381, 983, 985], "roadmap": [358, 980], "persist": [358, 375, 378, 397, 591, 592, 835, 967, 982, 999, 1010, 1013], "miscellan": [358, 361, 362, 1010, 1011, 1018, 1019, 1020], "craft": [358, 370], "curat": [358, 368, 370, 371], "conveni": [360, 375, 378, 393, 396, 400, 402, 407, 424, 427, 429, 431, 433, 444, 469, 592, 657, 659, 680, 708, 765, 838, 839, 936, 952, 954, 958, 959, 969, 986, 997, 1004], "commun": [361, 367, 370, 372, 375, 380, 383, 392, 399, 518, 520, 527, 673, 691, 851, 952, 959, 965, 972, 976, 980, 982, 986, 1012, 1013], "fetcher": [361, 1009, 1011], "linnerrud": [361, 999], "breast": [361, 480, 999, 1009], "cancer": [361, 480, 574, 575, 826, 999, 1009], "covertyp": [361, 471, 999], "rcv1": [361, 477, 999, 1009], "kddcup": [361, 472, 999], "svmlight": [361, 467, 488, 489, 982, 999, 1004, 1005, 1011, 1013], "jpeg": [362, 363, 473, 474], "publish": [362, 363, 369, 371, 375, 380, 974, 983, 1016], "creativ": 362, "spare": [362, 655, 656], "pyplpt": 362, "load_svmlight_fil": [362, 1004, 1005, 1010, 1011, 1012, 1019], "test_dataset": 362, "everybodi": [362, 368], "upload": [362, 366, 371, 378, 652], "mice": [362, 608, 952], "brain": 362, "miceprotein": 362, "1080": [362, 392], "sc": [362, 392], "clara": [362, 1016], "higuera": 362, "katheleen": 362, "gardin": 362, "krzysztof": 362, "cio": 362, "protein": [362, 982], "cite": [362, 392, 980], "kj": [362, 964], "critic": [362, 368, 379, 386, 399, 673, 959, 962, 970, 977, 986, 1015], "syndrom": 362, "plo": [362, 588, 589], "ONE": [362, 588, 589], "e0129126": 362, "40966": 362, "upload_d": 362, "08t16": 362, "17928620": 362, "file_id": 362, "default_target_attribut": 362, "row_id_attribut": 362, "mouseid": 362, "ignore_attribut": 362, "genotyp": 362, "cc18": 362, "study_135": 362, "study_98": 362, "study_99": 362, "md5_checksum": 362, "3c479a6885bfa0438971388283a1ce32": 362, "websit": [362, 363, 365, 368, 381, 966, 976, 986, 997, 1005, 1006, 1007], "4550": 362, "creator": [362, 365], "17t14": 362, "1804243": 362, "pone": 362, "0129126": 362, "openml100": 362, "study_14": 362, "study_34": 362, "earliest": [362, 959], "iris_61": 362, "iris_969": 362, "969": 362, "iris_version_3": 362, "vanschoren": [362, 1016], "rijn": [362, 1012], "bischl": 362, "torgo": 362, "acm": [362, 363, 392, 403, 425, 430, 437, 440, 491, 543, 657, 706, 736, 825, 962, 965, 968, 974], "sigkdd": [362, 363, 491, 657, 974], "newslett": 362, "legaci": [362, 371, 380, 930, 1004, 1011, 1016], "my": [362, 368, 372, 375, 476], "columnar": [362, 444, 982], "usabl": [362, 368, 369, 380, 386, 400, 777, 930, 1004, 1011, 1018, 1019], "io": [362, 365, 366, 368, 371, 373, 375, 380, 386, 673, 982, 1002], "json": [362, 368, 383], "sql": 362, "smoothli": 362, "manipul": [362, 388, 487, 930, 982, 1010], "mat": [362, 400], "load_fil": [362, 363, 997, 1006, 1018], "audio": [362, 483], "wish": [362, 368, 374, 376, 383, 392, 631, 632, 635, 636, 637, 645, 646, 915, 989, 997, 1011], "imageio": 362, "wavfil": 362, "wav": 362, "hdf5": 362, "h5py": 362, "pytabl": 362, "april": [363, 645, 666, 667, 1008, 1016], "1992": [363, 365, 396, 399, 547, 548, 626, 958], "1994": [363, 365, 625], "AT": [363, 475], "laboratori": [363, 982], "cambridg": [363, 397, 571, 814, 818, 958, 960, 964], "facial": 363, "upright": 363, "frontal": 363, "movement": 363, "credit": [363, 375, 399, 958, 986], "18846": [363, 468, 469], "scikit_learn_data": [363, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "20news_hom": 363, "newsgroups_train": 363, "11314": 363, "1073": 363, "20new": [363, 997], "34118": 363, "01327": 363, "newsgroups_test": 363, "vectors_test": 363, "class_prior": [363, 814, 815, 816, 818, 1005, 1008], "fit_prior": [363, 814, 815, 816, 818], "88213": 363, "suspici": 363, "show_top10": 363, "top10": 363, "affili": 363, "abund": 363, "clue": [363, 375, 959], "bare": [363, 959, 997], "quotat": 363, "77310": 363, "76995": 363, "cleveland": 363, "indian": 363, "leagu": 363, "team": [363, 370, 378, 380, 980, 982, 986, 1004], "ohio": 363, "spark": [363, 983], "death": 363, "floyd": [363, 669, 959], "reckon": 363, "coloni": 363, "owner": [363, 365], "paul": [363, 1007, 1010, 1011, 1012, 1013, 1017, 1018], "dolan": 363, "nicknam": 363, "tribe": 363, "theme": [363, 1004], "mlb": [363, 850], "inappropri": [363, 396, 402, 690, 798], "nlp": [363, 397, 400, 814, 818, 960, 986], "cultur": 363, "inflammatori": 363, "famou": [363, 365, 977], "internet": [363, 372, 972, 995], "offici": [363, 369, 373, 380, 383, 473, 477, 982, 997, 1012, 1013, 1016], "verif": [363, 962, 986], "identif": [363, 368, 477, 951, 989], "viola": [363, 1012], "opencv": 363, "detector": [363, 380, 825], "5749": [363, 473, 474], "13233": [363, 473, 474], "5828": [363, 473, 474], "200m": 363, "lfw_home": 363, "rectangular": [363, 380, 915, 983], "1140": 363, "fetch_lfw_pair": [363, 1009, 1019], "lfw_pairs_train": 363, "subdivid": [363, 402], "10_fold": [363, 473], "gari": [363, 1011], "huang": [363, 639, 1010, 1015], "manu": 363, "ramesh": [363, 986, 1007, 1010, 1014], "tamara": 363, "berg": [363, 1005, 1006, 1016], "erik": [363, 986, 1007], "miller": [363, 1012, 1013, 1017], "massachusett": 363, "amherst": 363, "30m": 363, "seven": [363, 955], "homepag": [363, 510, 978], "581012": [363, 471], "newswir": 363, "ltd": [363, 986], "804414": [363, 477], "47236": [363, 477], "fetch_rcv1": [363, 1009, 1013], "v2": [363, 477, 645, 666, 667, 958], "chronolog": [363, 477], "23149": [363, 477, 1018], "781265": [363, 477], "lyrl2004": [363, 477], "2286": 363, "810596": 363, "2287": 363, "2288": 363, "uint32": [363, 477], "gmil": 363, "381327": 363, "ccat": 363, "e11": 363, "ecat": 363, "m11": 363, "lewi": [363, 1011, 1015], "yang": [363, 392, 397, 514, 620, 1010, 1011, 1014, 1016, 1017, 1018], "rose": 363, "cup": [363, 962], "tcpdump": 363, "darpa": 363, "intrus": 363, "mit": [363, 373, 392, 402, 591, 592, 595, 600, 603, 624, 647, 648, 657, 816, 955], "lincoln": 363, "inject": [363, 399], "attack": 363, "unrealist": 363, "logged_in": 363, "resp": [363, 399, 578, 775, 776, 976, 1012], "4898431": [363, 472], "976158": 363, "699691": 363, "619052": 363, "95373": 363, "kddcup99": [363, 472], "richard": [363, 401, 639, 1005, 1014, 1016, 1018, 1019], "lippmann": 363, "hain": 363, "jonathan": [363, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1020], "korba": 363, "da": [363, 1019, 1020], "yamanishi": 363, "takeuchi": 363, "william": [363, 365, 402, 591, 592, 595, 600, 603, 620, 962, 966, 1011, 1012, 1013, 1014, 1020], "miln": 363, "discount": [363, 392, 706, 736, 1011, 1014], "sixth": 363, "320": [363, 951, 976, 1004], "press": [363, 392, 397, 402, 403, 425, 571, 591, 592, 595, 600, 603, 624, 814, 818, 955, 958, 960, 964], "household": 363, "statlib": 363, "dcc": 363, "ltorgo": 363, "cal_hous": 363, "1990": 363, "censu": 363, "bureau": 363, "resid": 363, "vacat": 363, "pace": 363, "kellei": [363, 1006, 1007], "ronald": [363, 966, 1007, 1017], "barri": [363, 1012], "autoregress": 363, "291": [363, 365], "hyperspher": [364, 982], "interleav": [364, 502], "simplif": [364, 367, 372, 1004, 1010], "realiti": 364, "make_sparse_uncorrel": 364, "make_friedman1": [364, 399, 519, 523, 574, 575, 613], "make_friedman2": [364, 592, 594, 595, 596, 597, 598, 602, 605, 606], "reciproc": [364, 962], "make_friedman3": 364, "7826": 365, "4194": 365, "9490": 365, "9565": 365, "fisher": [365, 399, 484, 617, 982], "donor": 365, "michael": [365, 392, 430, 609, 618, 672, 775, 952, 958, 986, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1018, 1019], "marshal": 365, "arc": [365, 399], "juli": [365, 401, 714, 1007, 1011, 1012, 1013], "1988": 365, "sir": 365, "referenc": [365, 369, 370, 375, 380, 870, 871, 965, 1011, 1017], "duda": [365, 956], "hart": [365, 956, 1012], "taxonom": 365, "annual": [365, 392, 706, 736, 875, 962, 975], "eugen": [365, 1005, 1010], "179": [365, 373, 399, 1004], "1936": 365, "john": [365, 400, 516, 689, 715, 749, 854, 880, 881, 883, 884, 952, 958, 962, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1017, 1019, 1020], "wilei": [365, 952], "1950": [365, 962], "1973": 365, "scene": [365, 965, 967, 1017], "q327": 365, "d83": 365, "son": [365, 952], "isbn": [365, 392, 958], "471": 365, "22361": 365, "218": [365, 451, 696, 766], "dasarathi": 365, "1980": 365, "nose": [365, 1007, 1011], "pami": [365, 392, 705], "gate": [365, 1017], "1972": 365, "431": 365, "mlc": 365, "cheeseman": 365, "autoclass": 365, "conceptu": [365, 399, 960], "alpaydin": 365, "boun": 365, "nist": [365, 962], "bitmap": 365, "preprint": 365, "32x32": 365, "nonoverlap": 365, "4x4": [365, 397, 400], "garri": 365, "candela": 365, "dimmick": 365, "geist": 365, "grother": 365, "janet": 365, "handprint": 365, "nistir": 365, "5469": 365, "kaynak": 365, "msc": 365, "graduat": 365, "bogazici": 365, "cascad": 365, "kybernetika": 365, "ken": [365, 997, 1006, 1013], "tang": [365, 1014, 1015, 1016], "ponnuthurai": 365, "suganthan": 365, "yao": [365, 1010, 1011, 1012, 1013], "kai": [365, 543, 968, 1011], "dimensionalityreduct": 365, "nanyang": 365, "technolog": 365, "claudio": [365, 1018, 1019], "gentil": [365, 1016], "linnerud": [365, 485], "men": 365, "club": 365, "waist": 365, "puls": 365, "chin": [365, 1008], "situp": 365, "tenenhau": 365, "pratiqu": 365, "alcalin": 365, "magnesium": 365, "phenol": 365, "nonflavanoid": 365, "proanthocyanin": 365, "od280": 365, "od315": 365, "dilut": 365, "class_2": [365, 490], "278": [365, 819, 820], "1680": 365, "746": 365, "chemic": 365, "grown": [365, 399, 537, 538, 544, 545, 886, 887, 888, 889, 978], "itali": 365, "cultiv": 365, "thirteen": 365, "constitu": 365, "forina": 365, "parvu": 365, "pharmaceut": 365, "food": 365, "technologi": [365, 392, 982, 986], "brigata": 365, "salerno": 365, "16147": 365, "genoa": 365, "lichman": 365, "irvin": 365, "ca": [365, 392, 423, 886, 887, 974, 978], "aeberhard": 365, "cooman": 365, "vel": 365, "rep": [365, 982], "dept": 365, "cook": [365, 1004, 1010], "north": [365, 392], "queensland": 365, "submit": [365, 366, 367, 369, 370, 371, 372, 375, 380, 381], "technometr": [365, 394, 449, 454, 968], "rda": 365, "1nn": 365, "THE": 365, "OF": 365, "chemometr": 365, "perimet": 365, "textur": [365, 738, 739, 960], "concav": 365, "symmetri": [365, 680, 852, 855, 866, 960], "fractal": 365, "malign": [365, 480], "benign": [365, 480], "2501": 365, "427": [365, 486, 487, 564, 565], "873": 365, "542": 365, "031": 365, "4254": 365, "027": 365, "357": [365, 480, 879], "wolberg": 365, "nick": [365, 1004, 1010, 1011, 1012, 1013], "olvi": 365, "mangasarian": 365, "goo": [365, 480], "gl": [365, 480], "u2uwz2": [365, 480], "needl": 365, "aspir": [365, 368], "fna": 365, "nuclei": 365, "multisurfac": 365, "msm": 365, "bennett": [365, 962], "midwest": 365, "cognit": 365, "societi": [365, 392, 394, 449, 454, 521, 608, 855, 866, 958, 976], "insepar": 365, "uw": [365, 1016], "ftp": [365, 663, 664], "wisc": [365, 873], "prog": 365, "cpo": 365, "nuclear": 365, "tumor": 365, "spie": 365, "1993": [365, 454, 645, 666, 667, 978], "symposium": [365, 392, 440], "1905": 365, "861": [365, 768, 769, 962], "870": 365, "san": [365, 400, 974], "jose": [365, 639, 962, 1012, 1014], "prognosi": 365, "577": 365, "august": [365, 392, 491, 514, 977, 1004, 1006, 1007, 1011, 1018], "wheel": [366, 368, 371, 383, 1014, 1016, 1018], "quickest": 366, "registri": [366, 383], "uninstal": 366, "git": [366, 369, 371, 375, 985, 1000, 1004], "fork": [366, 368, 371, 375, 378], "miniforge3": [366, 375], "miniforg": [366, 375, 383], "env": [366, 375, 383], "virtualenv": [366, 368], "python3": [366, 383], "venv": [366, 383], "dev0": [366, 371, 985, 1000], "pyx": [366, 368, 373, 375], "pxd": [366, 368], "sklearn_fail_no_openmp": 366, "checkout": [366, 368, 371, 375], "cumbersom": 366, "reinstal": [366, 383], "setuptool": 366, "unix": [366, 400], "makefil": 366, "studio": [366, 986], "vs_buildtool": 366, "desktop": 366, "screenshot": 366, "secondli": [366, 368, 378, 392, 399, 638, 958, 997], "architectur": [366, 369, 375, 378, 386, 448, 876, 966, 980, 986, 1004], "cmd": 366, "powershel": 366, "struct": [366, 380, 1007], "calcsiz": 366, "distutils_use_sdk": 366, "x86": 366, "buildtool": 366, "vc": 366, "vcvarsal": 366, "bat": 366, "x64": 366, "clang": 366, "confusingli": 366, "usr": 366, "gcc": [366, 373, 378], "libomp": [366, 1016], "silicon": [366, 980], "m1": [366, 980], "januari": [366, 368, 383, 1004, 1005, 1014, 1016, 1019], "arm64": [366, 368, 370, 383], "llvm": 366, "toolchain": 366, "xcode": 366, "conflict": [366, 368, 371, 375, 383, 1011, 1012], "condarc": 366, "channel_prior": 366, "reactiv": 366, "echo": [366, 371], "cxx": 366, "cflag": 366, "cxxflag": 366, "ldflag": 366, "subfold": [366, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 483, 1017], "fopenmp": 366, "export": [366, 369, 386, 890, 891, 978, 982, 985, 1013], "cppflag": 366, "xpreprocessor": 366, "wl": 366, "rpath": 366, "lomp": 366, "sudo": [366, 383], "apt": [366, 375, 383], "pip3": 366, "pythonx": 366, "site": [366, 368, 370, 375, 383, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 986, 1012], "precompil": 366, "arm": [366, 375, 951], "cython3": 366, "cento": 366, "yum": 366, "devel": 366, "gnu": 366, "port": [366, 383, 1014], "pkg": 366, "build_ext": [366, 373], "build_clib": 366, "linker": 366, "sysconfig": 366, "counterpart": [366, 951, 959, 977, 992], "get_config_var": 366, "sklearn_build_parallel": 366, "tracker": [367, 370, 375, 378, 381, 386, 980, 983], "prioriti": [367, 613, 807, 808, 983, 1007], "guidelin": [367, 370, 372, 373, 375, 391, 392, 399], "reformul": 367, "xyz": 367, "someestim": 367, "glanc": 367, "relabel": [367, 795, 796, 875], "stall": [367, 370], "sprint": [367, 368, 980, 1004], "unfinish": [367, 368], "supersed": [367, 1009], "overflow": [367, 375, 378, 1007, 1011, 1012, 1013, 1014, 1015, 1017], "submitt": 367, "strive": [367, 381, 986], "expertis": [367, 368, 378], "unclear": [367, 368, 481], "pleasant": [367, 986], "chime": 367, "permiss": [367, 371, 381, 383, 986, 1019], "matthew": [367, 372, 516, 723, 1004, 1007, 1011, 1013, 1017, 1018], "rocklin": [367, 372], "acknowledg": [367, 590], "struggl": 367, "everyon": [368, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "underrepres": 368, "merit": [368, 371, 381], "teach": 368, "priceless": 368, "abid": 368, "codeofconduct": 368, "hesit": 368, "typo": [368, 381, 1004], "send": [368, 392, 404, 513], "valuabl": [368, 952, 986], "burden": [368, 851, 983], "slep": [368, 380, 980], "templat": [368, 371, 372, 380, 381, 982], "ecosystem": [368, 952, 981, 986], "contrib": [368, 369, 375, 378, 380, 982, 983], "numpydoc": [368, 380, 383, 385], "compli": [368, 380, 909, 983], "fulfil": [368, 392, 399, 777, 780, 781, 791, 839, 843, 958], "anyon": [368, 381, 986], "gist": [368, 375, 985], "repo": [368, 371, 983], "feasibl": [368, 848, 849, 859], "traceback": [368, 372, 375, 378, 448, 962, 985], "doubt": [368, 371, 958, 968, 982], "companion": [368, 972], "transcript": 368, "inclus": [368, 369, 375, 430, 436, 734, 766, 962, 963, 1004, 1018], "yourlogin": 368, "flake8": [368, 383, 385, 559], "mypi": [368, 371, 383, 385, 1015], "synchron": [368, 400], "my_featur": 368, "commit": [368, 371, 375, 381, 985, 1004, 1005, 1006, 1007], "modified_fil": 368, "committ": [368, 1004], "modif": [368, 395, 399, 400, 975], "approv": [368, 381, 399], "mrg": [368, 375], "incomplet": [368, 383, 392, 686, 773, 952, 959, 997, 1008, 1010], "wip": [368, 375, 383], "matur": [368, 982, 983], "broad": [368, 380, 982], "collabor": 368, "_logist": 368, "doctest": [368, 380, 989, 1004], "test_logist": [368, 375], "rst": [368, 371, 375, 997, 1004, 1009], "test_common": [368, 375], "caught": [368, 375, 386], "editor": [368, 375, 378], "submodul": [368, 371, 373, 391, 954, 960, 1004], "intricaci": 368, "narr": [368, 380, 639, 878, 883, 1004, 1005], "unittest": 368, "tests_for_packag": 368, "static": [368, 369, 373, 375, 627, 628, 633, 634, 641, 642, 643, 644], "workaround": [368, 777, 791], "astropi": 368, "linux": [368, 369, 370, 375, 982, 1004], "lint": [368, 375], "aarch64": [368, 375, 383], "gh": 368, "nogil": 368, "cpython": [368, 1019], "sklearn_run_float32_test": 368, "lengthi": [368, 378], "etiquett": 368, "she": [368, 868, 869, 1014], "he": [368, 706, 736, 836, 837, 868, 869, 962, 997, 1011, 1018, 1019], "shorten": [368, 977, 1017], "leader": [368, 986], "grab": 368, "familiar": [368, 398, 1012], "acquaint": 368, "experienc": 368, "abandon": 368, "someon": [368, 371, 380, 1004], "glad": 368, "restructuredtext": 368, "_build": 368, "viewabl": 368, "pillow": [368, 383, 385], "sphinxext": [368, 383, 385], "opengraph": [368, 383, 385], "vast": 368, "examples_pattern": 368, "your_regex_goes_her": 368, "no_mathjax": 368, "latexpdf": 368, "elabor": [368, 963], "paragraph": [368, 400, 483, 997], "hood": [368, 958, 977], "colon": 368, "selectfpr": [368, 401, 573, 576, 579, 580, 581, 587, 1020], "some_param": 368, "hello": [368, 375, 922], "goodby": 368, "liter": [368, 371, 986], "array_paramet": 368, "list_param": 368, "typed_ndarrai": 368, "multioutput_arrai": 368, "bracket": [368, 958], "delimit": [368, 968, 1019], "unwritten": 368, "bibliograph": 368, "arxiv": [368, 442], "backtick": [368, 372], "nowadai": 368, "syntax": [368, 372, 375, 393, 951, 988, 1015, 1017], "_my": 368, "ref": [368, 374, 375, 952, 1010], "currentmodul": 368, "succeed": 368, "stone": [368, 886, 887, 978], "subdirectori": 368, "subpackag": [368, 371, 980, 1008, 1013], "cleanup": [368, 1004], "charg": 368, "test_requiring_mpl_fixtur": 368, "hang": [368, 985, 1014, 1015], "fruit": [368, 963], "asv": 368, "asv_benchmark": 368, "airspe": 368, "veloc": 368, "publicli": [368, 1014], "zero_on": [368, 1005], "example_funct": 368, "exampleestim": 368, "_n_cluster": 368, "versionchang": 368, "meet": [368, 378, 381, 401, 552, 584, 836, 837, 875, 962, 975, 986, 1012, 1013, 1014], "nit": 368, "retract": 368, "grammar": 368, "disambigu": [368, 807, 875, 975, 1019], "immedi": [368, 378, 777, 791, 800, 801, 802, 1012], "Will": [368, 477, 514, 608, 625, 626, 627, 629, 633, 637, 638, 641, 642, 643, 644, 645, 646, 650, 654, 656, 661, 688, 695, 768, 844, 848, 852, 859, 1007, 1008, 1010, 1012], "clariti": [368, 375], "unhelp": 368, "extran": 368, "rewritten": [368, 630, 1006, 1008], "generos": 368, "reward": 368, "heard": 368, "ve": [368, 400, 985, 986, 997, 1011], "enemi": 368, "courtesi": 368, "justifi": [368, 373, 390, 545], "occas": 368, "deserv": [368, 373], "digest": [368, 1019], "overwhelm": 368, "sheer": [368, 986], "myself": 368, "trickiest": 368, "buri": 368, "inherit": [368, 369, 379, 380, 557, 657, 907, 909, 958, 1004, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1019], "mixin": [368, 380, 407, 408, 409, 410, 411, 412, 413, 414, 582, 909, 1006, 1015, 1019], "classifiermixin": [368, 369, 380, 396, 1015], "grep": 368, "delai": [368, 476, 777, 791, 800, 801, 802, 930, 1018, 1019], "some_funct": [368, 905], "some_iter": 368, "flavor": [368, 965], "pointer": [368, 375, 423, 1013], "mandatori": [368, 400], "favorit": [368, 378, 986], "Being": [368, 381, 386, 958, 965], "killer": [368, 986], "blame": 368, "migrat": [368, 1004], "ignorerevsfil": 368, "rev": [368, 588, 589], "ruin": 368, "prolifer": 369, "adopt": [369, 380, 874, 962, 976, 1012, 1019], "predomin": [369, 1005], "overrid": [369, 400, 430, 437, 522, 528, 569, 570, 572, 574, 575, 578, 637, 645, 666, 667, 821, 822, 823, 825, 827, 829, 830, 831, 1004, 1012, 1014, 1018, 1020], "creation": [369, 491, 492, 493, 495, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 637, 819, 820, 986, 1011, 1012, 1013, 1017], "optimis": [369, 392, 965, 982, 1007, 1017, 1019], "rememb": [369, 372, 383, 400, 965, 969, 978], "param1": [369, 994], "param2": [369, 994], "param3": 369, "postpon": [369, 371], "requisit": 369, "liner": [369, 805], "ipython": [369, 372, 373, 375, 989, 997], "session": [369, 373, 378, 383, 981, 986, 997], "trainabl": 369, "trail": [369, 946], "overridden": [369, 380, 402, 522, 528, 597, 602, 605, 675, 1012, 1013], "n_features_in_": [369, 380, 412, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 592, 608, 609, 610, 611, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 775, 776, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 1015, 1017, 1019], "slep010": [369, 1015], "duck": [369, 380, 1014], "boilerpl": [369, 986, 997], "check_x_i": [369, 376, 1008, 1012, 1013, 1018], "check_arrai": [369, 376, 514, 1008, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "templateclassifi": 369, "demo_param": 369, "myestim": 369, "subestim": 369, "my_extra_param": 369, "my_estim": [369, 393], "subestimator__c": 369, "subestimator__class_weight": 369, "subestimator__du": 369, "subestimator__fit_intercept": 369, "subestimator__intercept_sc": 369, "subestimator__l1_ratio": 369, "subestimator__max_it": 369, "subestimator__multi_class": 369, "subestimator__n_job": 369, "subestimator__penalti": 369, "subestimator__random_st": 369, "subestimator__solv": 369, "subestimator__tol": 369, "subestimator__verbos": 369, "subestimator__warm_start": 369, "__c": 369, "__class_weight": 369, "unpack": 369, "easiest": [369, 375, 393, 959], "__repr__": [369, 983, 1013], "setattr": 369, "accomplish": [369, 526, 959, 963, 965, 986], "deepcopi": 369, "__sklearn_clone__": [369, 415, 1020], "frozen": 369, "frozentransform": 369, "fitted_transform": [369, 444], "__getattr__": 369, "_estimator_typ": [369, 380, 1009], "regressormixin": [369, 380, 445, 1015], "clustermixin": 369, "is_classifi": [369, 380], "predict_log_proba": [369, 380, 529, 530, 531, 533, 535, 537, 539, 544, 574, 575, 639, 640, 657, 777, 780, 781, 791, 800, 814, 815, 816, 817, 818, 836, 839, 875, 880, 883, 886, 888, 977, 1004, 1017], "_base": 369, "programmat": [369, 479, 1013], "_get_tag": [369, 1015], "allow_nan": [369, 897, 899, 1020], "binary_onli": [369, 1014, 1015], "multioutput_onli": 369, "no_valid": 369, "non_determinist": [369, 1018], "primari": [369, 380, 397, 495, 969, 986], "_safe_split": 369, "preserves_dtyp": 369, "poor_scor": 369, "requires_fit": 369, "requires_positive_x": [369, 1014, 1019], "requires_i": [369, 1015], "requires_positive_i": 369, "_skip_test": 369, "_xfail_check": 369, "check_nam": 369, "xfail": [369, 375], "skiptestwarn": 369, "x_type": 369, "2darrai": 369, "signifi": [369, 392, 562, 788, 967], "1dlabel": 369, "2dlabel": 369, "_more_tag": 369, "mymultioutputestim": 369, "_required_paramet": 369, "ridgeregress": 369, "idiosyncrat": 369, "subclass": [369, 402, 554, 928, 1009, 1012, 1017], "onetoonefeaturemixin": [369, 414], "classnameprefixfeaturesoutmixin": [369, 414, 1019], "auto_wrap_output_kei": 369, "mytransform": 369, "__init_subclass__": 369, "ownership": 369, "pep8": [369, 371, 375], "indent": [369, 928], "nsampl": [369, 775, 776], "statement": [369, 372, 375, 378, 380, 397, 980, 997], "flow": 369, "client": 369, "corollari": 369, "foo": [369, 562, 966], "baz": [369, 562], "pyflak": 369, "asanyarrai": 369, "hadamard": 369, "choose_random_sampl": 369, "freestand": 369, "unmodifi": [369, 380], "random_state_": [369, 516, 608, 828, 1018], "gaussiannois": 369, "showcas": 369, "quasi": [369, 836, 837, 958], "assert_allclos": 369, "rtol": [369, 819, 820, 824], "atol": [369, 819, 820, 824], "checklist": 370, "unclaim": 370, "workflow": [370, 371, 379, 396], "boil": [370, 394], "markdown": 370, "saniti": [370, 843, 962, 1004, 1005], "outdat": 370, "diff": [370, 962], "valgrind": 370, "platform": [370, 378, 380, 386, 986, 1009, 1012, 1013, 1015, 1017, 1018], "x86_64": 370, "yep": 370, "gperftool": 370, "gprof": 370, "callgrind": 370, "kcachegrind": 370, "warm": [370, 380, 511, 517, 523, 525, 526, 591, 634, 640, 647, 649, 657, 658, 659, 958, 983, 1014, 1016, 1018], "maco": [370, 383, 1012, 1016, 1018], "homebrew": [370, 383], "freebsd": 370, "rrrcn": 371, "pep101": 371, "enter": [371, 392, 423, 969], "build_tool": 371, "blocker": 371, "mileston": 371, "maint_tool": 371, "sort_whats_new": 371, "whats_miss": 371, "fixm": [371, 380], "feedstock": 371, "recip": [371, 959, 986], "yaml": 371, "whats_new": [371, 375], "v0": [371, 451, 452, 458, 492, 569, 570, 572, 777, 791, 838, 841, 1005, 1012, 1013, 1014], "alia": [371, 375, 380, 598, 936, 951, 968, 983, 1004, 1018], "freez": [371, 383, 386, 983, 986, 1012], "afterward": [371, 515, 521, 803], "0rc1": 371, "__version__": 371, "draft": [371, 381], "rebas": 371, "bugfix": [371, 1004, 1018], "backport": [371, 376, 1011], "maint": 371, "enh": 371, "blindli": 371, "invit": 371, "cherri": 371, "shortlog": 371, "f2": [371, 963], "sed": [371, 1004], "front": [371, 1011], "rc1": 371, "suffix": [371, 802, 962, 1014], "brows": 371, "3a": 371, "22wheel": 371, "pyproject": 371, "toml": 371, "oldest": [371, 476], "abi": 371, "acronym": 371, "deliveri": 371, "whl": 371, "22publish": 371, "went": [371, 962], "bot": [371, 967, 1018], "sync": 371, "testpypi": 371, "tarbal": [371, 1019], "wheelhouse_upload": 371, "twine": 371, "rrr": 371, "symlink": 371, "latestst": 371, "tmp": 371, "ln": [371, 958, 966, 972], "versionwarn": 371, "secur": [371, 380, 982, 983, 986, 999], "twitter": 371, "linkedin": 371, "squash": [371, 402, 511, 517, 522, 528], "significanli": 371, "authorship": 371, "enable_hist_gradient_boost": [371, 1013], "permalink": 371, "_hist_gradient_boost": 371, "_iter": 371, "pickl": [371, 380, 386, 400, 569, 570, 572, 819, 820, 982, 983, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1019, 1020], "checker": [371, 799], "protect": [371, 373, 928], "type_check": 371, "test_enable_hist_gradient_boost": 371, "enable_my_experimental_featur": 371, "indefinit": 371, "incentiv": 371, "workabl": 372, "stackoverflow": [372, 375, 378, 985], "blogpost": 372, "mcve": [372, 375, 378], "my_data": 372, "with_mean": [372, 859, 869, 972, 1012, 1017], "default_scor": 372, "other_scor": 372, "scrollbar": 372, "tripl": 372, "fenc": 372, "qualifi": 372, "a674e682c281": 372, "lda_featur": 372, "lda_model": 372, "n_topic": [372, 516, 1011], "minimalist": [372, 400, 985], "continuous_featur": 372, "positive_featur": 372, "invest": [373, 986], "idiom": 373, "wast": [373, 396, 397, 951], "crunch": 373, "performancetip": 373, "reimplement": [373, 380, 1010, 1014], "spottabl": 373, "amen": [373, 402, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 951], "cpp": 373, "engag": [373, 381], "tent": 373, "somewher": [373, 962, 997], "prun": 373, "magic": [373, 402, 597, 602, 605], "14496": [373, 1013], "682": 373, "ncall": 373, "tottim": 373, "percal": 373, "cumtim": 373, "lineno": 373, "017": [373, 451, 452], "042": 373, "_nls_subproblem": 373, "1263": 373, "157": 373, "_po": 373, "681": 373, "057": [373, 517], "047": 373, "_initialize_nmf": 373, "010": [373, 970], "_spars": 373, "_neg": 373, "461": 373, "hotspot": 373, "16159": [373, 1015], "840": 373, "2833": 373, "653": [373, 592, 595, 606], "_dotbla": 373, "651": 373, "1397": 373, "2780": 373, "167": [373, 1004], "1542": 373, "043": 373, "2734": 373, "fromnumer": 373, "1185": 373, "lapack_lit": 373, "dgesdd": 373, "rewrit": [373, 978, 996, 1004], "shallow": [373, 399, 541, 542, 893], "4x": [373, 1019], "line_profil": 373, "wire": [373, 514, 521], "profile_default": 373, "ipython_config": 373, "terminalipythonapp": 373, "interactiveshellapp": 373, "lprun": 373, "qtconsol": 373, "137": [373, 1005], "73153": 373, "h_init": 373, "5863": 373, "nl": 373, "175": [373, 972], "112141": 373, "2336": 373, "wtv": 373, "176": [373, 812, 963, 970], "16144": 373, "wtw": 373, "1880": 373, "195133": 373, "grad": [373, 986], "495761": 373, "777": 373, "proj_gradi": 373, "2449": 373, "130": 373, "1474": 373, "4474": 373, "inner_it": 373, "83833": 373, "hn": 373, "194239": 373, "48858": 373, "150407": 373, "102": [373, 995, 1006], "gradd": 373, "515390": 373, "349": 373, "dqd": 373, "pin": 373, "memory_profil": [373, 383, 385], "memit": 373, "mprun": 373, "my_func": 373, "152": 373, "1e7": 373, "402344": 373, "standalon": [373, 639, 878, 985], "youtub": 373, "gmvkiq": 373, "gow8": 373, "scipy2009": 373, "paper_1": 373, "paper_2": 373, "_openmp_help": 373, "cimport": [373, 376, 1012], "omp_get_max_thread": 373, "prang": 373, "bianp": 373, "recompil": [373, 383], "dbg": 373, "fortun": [373, 399, 997, 1017, 1018], "my_fil": 373, "callgrin": 373, "prof": 373, "encapsul": [374, 393], "artist": [374, 419, 613, 679, 681, 682, 683, 783, 892], "classmethod": [374, 419, 612, 613, 678, 679, 681, 682, 683, 783], "line_": [374, 419, 679, 681, 682, 683, 783], "gridspecfromsubplotspec": 374, "subplot_spec": 374, "get_subplotspec": 374, "ax_top_left": 374, "ax_top_right": 374, "ax_bottom": 374, "bounding_ax_": [374, 613], "lines_": [374, 613, 783], "contours_": [374, 613], "advic": [375, 402, 603, 604], "forth": 375, "userscript": 375, "tampermonkei": 375, "greasemonkei": 375, "shortcut": [375, 402], "pr_number": 375, "navig": [375, 1006], "overlai": [375, 613], "codecov": 375, "test_sparsifi": 375, "pdb": 375, "debugg": 375, "ipdb": [375, 997], "shell": [375, 378, 988, 997], "pdbcl": 375, "terminalpdb": 375, "lf": 375, "ff": 375, "tb": [375, 551, 552, 553, 554, 555, 556, 557, 558], "runxfail": 375, "werror": 375, "mailman": 375, "listinfo": 375, "crowd": [375, 381, 959, 983, 985], "imped": 375, "attent": [375, 588, 589, 976], "pytb": 375, "stdin": [375, 997], "perman": 375, "25163598": 375, "issuenumb": 375, "1506": 375, "volunt": 375, "establish": [375, 378, 381, 952], "clarifi": [375, 381, 771], "regression_test": 375, "0008": 375, "patienc": [375, 380], "manifest": [375, 959, 965], "fault": [375, 1012, 1014, 1016], "glibc": 375, "uniniti": 375, "trace": [375, 392, 405, 453, 455, 456, 459, 460, 461, 670, 674, 959, 1015], "supp": 375, "readm": [375, 400, 473], "my_test_script": 375, "mobil": 375, "deploy": [375, 982, 983, 986], "scalewai": 375, "aw": 375, "graviton": 375, "laptop": [375, 448, 876, 1018, 1019], "workstat": 375, "qemu": 375, "docker": [375, 386, 1017, 1018], "multiarch": 375, "ppc64le": 375, "filesystem": [375, 383, 1017], "pushd": 375, "wget": 375, "arm64v8": 375, "mount": 375, "privileg": 375, "pwd": 375, "reinit": 375, "bashrc": 375, "ephemer": 375, "evolv": [376, 1019], "as_float_arrai": 376, "column_or_1d": [376, 1015, 1019], "multitarget": 376, "multi_output": [376, 898], "safe_index": [376, 1014], "check_memori": [376, 380, 1011], "5488135": 376, "71518937": 376, "60276338": 376, "54488318": 376, "has_fit_paramet": 376, "randomized_range_find": [376, 1005, 1010], "arrayfunc": 376, "cholesky_delet": 376, "min_po": 376, "least_angl": 376, "fast_logdet": 376, "safe_sparse_dot": [376, 1014], "weighted_mod": 376, "sample_without_replac": [376, 1010], "n_popul": [376, 931], "sparsefunc": [376, 1017], "mean_variance_axi": [376, 1010, 1017], "sparsefuncs_fast": 376, "inplace_csr_row_normalize_l1": 376, "inplace_csr_row_normalize_l2": 376, "inplace_csr_column_scal": 376, "sort_graph_by_row_valu": [376, 1019], "single_source_shortest_path_length": 376, "dijkstra": [376, 669, 959], "graph_shortest_path": [376, 1017], "all_estim": [376, 1014, 1015, 1019], "all_displai": [376, 1019], "all_funct": [376, 1019], "is_multilabel": 376, "dict_learn": [376, 511, 517, 526, 1005, 1012, 1014, 1017, 1018, 1020], "gen_batch": [376, 919], "safe_mask": 376, "safe_sqr": 376, "unifi": [376, 378, 379, 399, 618, 982, 1004], "murmurhash3_32": 376, "murmurhash3_x86_32": [376, 927], "cryptograph": 376, "lookup": [376, 927, 1013], "bloom": [376, 927], "384616559": 376, "3910350737": 376, "murmurhash": 376, "graphical_lasso": [376, 451, 452, 1012], "kit": 378, "toolbox": [378, 982, 986], "multilay": [378, 960], "kera": [378, 982], "forese": 378, "redesign": [378, 1004], "pystruct": [378, 982], "ssvm": 378, "seqlearn": 378, "4143": 378, "meanwhil": [378, 977], "pipegraph": 378, "squared_loss": [378, 1017], "undertak": 378, "discourag": [378, 383, 670], "slowli": [378, 380, 524, 915], "ordinarili": [378, 380], "corrobor": 378, "proof": [378, 399, 872, 974], "road": 378, "bridg": [378, 959, 982], "reproduct": [378, 958, 985], "guidanc": [378, 402], "gitter": [378, 980, 1011, 1012], "value_kei": [378, 893], "levenshtein": 378, "dna": [378, 609, 952], "rna": 378, "pain": 378, "suppli": [378, 392, 627, 898, 899, 965, 986, 1008, 1010, 1012, 1017], "leven": 378, "acctcctagaag": 378, "acctactagaagtt": 378, "gaatattaggccga": 378, "lev_metr": 378, "algoritum": 378, "multiprocess": [378, 380, 928, 930, 965, 1004, 1012, 1018], "exec": 378, "nvidia": 378, "cuda": [378, 388], "reiniti": 378, "culprit": 378, "refus": [378, 868, 869], "forkserv": 378, "joblib_start_method": 378, "set_start_method": 378, "dozen": [379, 402], "unsuperv": [379, 395], "newli": [379, 399, 443, 969, 1010, 1011, 1019], "leakag": [379, 380, 393, 999], "disclos": 379, "entail": [379, 857, 859, 976], "r_squar": 379, "searchcv": [379, 1019], "tacit": 380, "inconsist": [380, 386, 400, 488, 489, 556, 880, 883, 902, 968, 977, 999, 1004, 1009, 1010, 1011, 1012, 1014, 1017, 1019, 1020], "elsewher": [380, 442, 443, 451, 452, 458], "formal": [380, 381, 392, 399, 819, 820, 959, 962, 963, 966], "thereof": 380, "transduct": [380, 392, 873, 874, 983], "position": 380, "serial": [380, 982, 983, 999, 1004, 1012, 1016], "unpickl": [380, 386, 556, 819, 820, 1010, 1016, 1020], "pep257": 380, "nuanc": 380, "flaw": [380, 399], "terminologi": [380, 1012], "est1": [380, 613], "est2": [380, 613], "exemplifi": 380, "_score": [380, 777, 791, 802, 962, 1004, 1017], "_loss": [380, 962], "divers": [380, 399], "abstract": [380, 397, 402, 599, 749, 982, 1004], "notfittederror": [380, 828, 946, 1008, 1010, 1013, 1014, 1020], "descriptor": [380, 488, 489], "hoc": 380, "spectral_embed": [380, 959, 1005, 1008, 1010, 1012, 1014, 1017, 1018, 1019], "maxabs_scal": [380, 848, 1012], "astrai": 380, "readthedoc": 380, "entireti": 380, "shield": 380, "n_output": [380, 399, 409, 413, 414, 418, 423, 426, 445, 449, 462, 463, 464, 512, 514, 516, 517, 519, 522, 523, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 547, 548, 549, 550, 563, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 592, 609, 611, 614, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 649, 651, 653, 654, 655, 656, 657, 659, 660, 702, 703, 708, 725, 726, 728, 730, 731, 733, 734, 765, 768, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 826, 828, 829, 830, 835, 836, 837, 838, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 856, 857, 858, 859, 870, 871, 873, 874, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 904, 933, 962, 963, 978, 1011, 1014], "synonym": [380, 821, 822, 823, 829, 830, 831], "themat": 380, "alphanumer": [380, 569, 570, 572], "statistician": [380, 859], "prescrib": 380, "baggingclassifi": [380, 399, 536, 888, 1007, 1010, 1011, 1012, 1015, 1019, 1020], "estimator__max_depth": [380, 951], "improp": [380, 1011], "pairwise_kernel": [380, 402, 432, 624, 745, 845, 960, 1004, 1011], "distancemetr": [380, 398, 819, 820, 965, 1012, 1016, 1017, 1018], "di": [380, 392, 397, 511, 517, 645, 666, 667, 871, 1008, 1017], "vectori": [380, 1014], "noun": 380, "rout": [380, 1018], "fit_param": [380, 414, 418, 423, 426, 445, 512, 514, 516, 517, 519, 522, 523, 529, 547, 549, 550, 563, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 609, 611, 616, 619, 620, 621, 622, 623, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 811, 812, 813, 823, 828, 831, 835, 838, 839, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 856, 857, 858, 859, 870, 871, 1011, 1014, 1015, 1016, 1018], "venu": [380, 985], "broadli": [380, 392], "consolid": [380, 381, 1004], "coo": [380, 533, 534, 673, 846, 894, 898, 899, 965, 1005], "lil": [380, 533, 534, 846, 894, 920, 965], "csgraph": [380, 1017], "absent": [380, 400, 734, 800], "densifi": [380, 397, 639, 640, 647, 649, 657, 658, 659, 878, 952, 1006], "lossili": 380, "unnorm": [380, 516, 959, 1010, 1011], "encompass": [380, 430, 436, 535, 536, 959], "is_regressor": 380, "get_n_split": [380, 778, 779, 782, 784, 785, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798], "elasticnetcv": [380, 627, 633, 641, 642, 643, 644, 662, 958, 1004, 1007, 1015, 1017, 1018], "estimatorcv": [380, 983], "loo": [380, 785, 1015], "type_of_target": [380, 846, 963, 1018, 1019, 1020], "hashabl": [380, 847, 850, 973], "labelencod": [380, 549, 853, 973, 1004, 1012, 1019], "canonic": 380, "xxx": 380, "everywher": 380, "multilabelbinar": [380, 808, 843, 852, 963, 988, 1007, 1009, 1010, 1012, 1013], "nonetheless": [380, 962], "wherein": 380, "amber": 380, "return_cov": [380, 547, 548, 592, 839], "test_idx": 380, "_idx": 380, "label1": 380, "label2": 380, "class_label": [380, 537, 541, 544, 639, 640, 647, 649, 655, 656, 657, 886, 888, 904, 977], "bincount": [380, 396, 537, 541, 544, 639, 640, 647, 649, 655, 656, 657, 878, 880, 883, 886, 888, 903, 904, 1011], "rebalanc": 380, "compute_class_weight": [380, 1007, 1018], "check_cv": [380, 1009], "obei": [380, 960], "triangl": [380, 397, 424, 427, 439, 680, 960, 965], "concurr": [380, 400, 928, 1016, 1018], "unset": [380, 1012], "get_scor": [380, 713, 1011], "check_scor": 380, "uppercas": [380, 1017], "unavail": [380, 639, 640, 922, 1011, 1017], "deadlock": 381, "meritocrat": 381, "concret": [381, 401, 539, 540, 649, 655, 656, 657, 658, 870, 871, 958, 976], "consult": [381, 962], "unanim": 381, "outreach": 381, "brand": [381, 383], "social": [381, 392, 986], "ongo": 381, "emeritu": [381, 980], "recant": 381, "strateg": 381, "entiti": [381, 706, 736], "duti": 381, "resign": 381, "occasion": [381, 707, 1013], "escal": 381, "fallback": [381, 807, 808, 962], "hereaft": 381, "lazi": [381, 400, 976, 1008], "opinion": 381, "veto": 381, "appeal": 381, "revis": [381, 651], "insuffici": [382, 961, 996], "greatest": [383, 846, 1012], "afraid": 383, "64bit": [383, 1004], "miniconda": 383, "administr": 383, "venvpython": 383, "venvsourc": 383, "activatesourc": 383, "activatesklearn": 383, "activatepip": 383, "learnpip": 383, "learnpip3": 383, "learnconda": 383, "installedpython3": 383, "virtualenvpython3": 383, "installedpython": 383, "virtualenvpython": 383, "installedconda": 383, "environmentpython": 383, "virtual": [383, 396, 986], "dnf": 383, "pacman": 383, "raspberri": 383, "lock": [383, 385, 928, 930], "pypy3": [383, 1012], "v5": [383, 1012], "19137": 383, "py3": 383, "apk": 383, "bind": [383, 1004, 1011, 1012], "buster": 383, "fedora30": 383, "pkgsrc": 383, "py39": 383, "daal": 383, "daal4pi": 383, "intelpython": 383, "plugin": 383, "appdata": 383, "usernam": 383, "windowsapp": 383, "environmenterror": 383, "errno": 383, "pythonsoftwarefound": 383, "7_qbz5n2kfra8p0": 383, "localcach": 383, "python37": 383, "292": [383, 399, 715], "data_nam": 383, "australian": 383, "data_vers": 383, "lift": 383, "regedit": 383, "menu": 383, "hkey_local_machin": 383, "currentcontrolset": 383, "longpathsen": 383, "broken": [383, 396, 580, 581, 616, 701, 894, 962, 1007, 1011, 1012, 1013, 1015, 1018], "retrain": [386, 983, 1020], "inconsistentversionwarn": [386, 1020], "simplefilt": 386, "model_from_prevision_vers": 386, "original_sklearn_vers": [386, 556], "untrust": 386, "malici": 386, "unsupport": [386, 473, 1012, 1017], "inadvis": 386, "immut": 386, "snapshot": [386, 539, 540, 983], "portabl": 386, "alex": [386, 400, 977, 1004, 1007, 1012, 1014, 1015, 1016, 1018, 1019, 1020], "gaynor": 386, "sio": 386, "obj": [386, 547, 548, 922, 928], "get_untrusted_typ": 386, "unknown_typ": 386, "exchang": [386, 985], "markup": 386, "pmml": [386, 982], "onnx": [386, 982, 983], "xml": 386, "sklearn2pmml": [386, 982], "affero": 386, "gplv3": 386, "datastructur": [388, 1012, 1016], "namespac": 388, "array_api": 388, "xp": [388, 395, 854], "x_np": 388, "y_np": 388, "x_cu": 388, "y_cu": 388, "devic": [388, 396, 563], "array_api_dispatch": [388, 448, 876], "_estimator_with_converted_arrai": 388, "transfer": [388, 958, 983], "_array_api": 388, "cupy_to_ndarrai": 388, "_arrai": 388, "lda_np": 388, "submatrix": [389, 407, 431, 433], "unusu": [389, 968, 972, 1012], "submatric": 389, "bipartit": [389, 433, 491, 967], "subgraph": 389, "a_n": 389, "lceil": [389, 968], "log_2": [389, 543, 968], "rceil": [389, 968], "bmatrix": 389, "u_2": 389, "u_": [389, 462, 463, 464], "n_column": [389, 431, 433], "inderjit": [389, 433], "blockwis": [389, 958], "bistochast": [389, 431], "l_": [389, 592, 633, 721, 962], "k_": [389, 402, 597, 600, 602, 605, 754, 972], "u_1": 389, "v_1": 389, "v_2": 389, "v_": [389, 400], "kluger": [389, 431, 493], "yuval": [389, 431], "microarrai": [389, 431, 493, 609, 952], "cap": [389, 392, 735, 962, 1013], "hochreit": [389, 700], "hungarian": [389, 700], "bodenhof": [389, 700], "fabia": [389, 700], "acquisit": [389, 700], "wilk": 390, "f_i": 390, "train_set": 390, "test_set": 390, "disjoint": [390, 392, 393, 418, 685, 711, 735, 737, 959], "platt": [390, 418, 880, 881, 883, 884, 977], "_i": [390, 399, 953, 958, 962, 966, 977], "_j": [390, 953], "f_j": [390, 970], "precipit": 390, "wea": 390, "650": 390, "1990a": 390, "menon": 390, "ak": [390, 1018, 1019], "jiang": [390, 1008, 1015], "xj": 390, "vembu": 390, "ohno": 390, "machado": [390, 703], "703": [390, 493], "710": 390, "kull": [390, 962], "silva": [390, 669, 959, 1015, 1017], "filho": 390, "flach": [390, 962], "refurbish": 391, "rough": [391, 968, 990], "uniti": 391, "lipschitz": [391, 974], "usecas": 392, "mu_j": 392, "coher": 392, "elong": 392, "lloyd": [392, 424, 427, 429, 439, 1018, 1019], "distant": [392, 673, 690, 965], "sergei": [392, 1006, 1010, 1011, 1012, 1013, 1014], "vassilvitskii": [392, 427, 440], "eighteenth": 392, "siam": [392, 396, 432, 440, 442, 515, 521], "industri": [392, 982], "predetermin": [392, 959], "scullei": 392, "19th": 392, "exemplar": [392, 421, 434, 996], "sent": [392, 808], "leftarrow": [392, 966, 976], "foral": [392, 402, 594], "neq": [392, 962, 964, 972], "notin": 392, "hill": [392, 428, 441, 1014], "climb": [392, 428, 441], "maxima": [392, 402], "x_j": [392, 402, 595, 596, 600, 603, 604, 606, 953, 954, 958, 965, 977, 978], "dictat": 392, "solvabl": 392, "stella": [392, 432, 442], "yu": [392, 432, 442, 639, 958, 966, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "jianbo": [392, 432, 442, 672], "shi": [392, 432, 442, 672], "anil": [392, 432, 442], "daml": [392, 432, 442], "victor": [392, 432, 442, 1011, 1014], "minden": [392, 432, 442], "lex": [392, 432, 442], "ying": [392, 432, 442, 1018], "adjac": [392, 397, 432, 442, 566, 567, 616, 672, 676, 920, 959, 965, 996], "adjacency_matrix": 392, "ulrik": [392, 432, 442, 672], "von": [392, 432, 442, 672, 982, 1011, 1012], "luxburg": [392, 432, 442, 672], "jitendra": [392, 432, 442, 672], "malik": [392, 432, 442, 672], "walk": [392, 398, 1007], "marina": 392, "meila": 392, "ng": [392, 397, 672, 825, 966, 968, 1015], "jordan": [392, 397, 672, 775, 1014, 1015, 1018, 1019], "yair": [392, 672], "precondit": [392, 432, 442, 676, 978], "zhuzhunashvili": [392, 442], "forbid": [392, 399], "macroscop": 392, "occupi": [392, 962], "manhattan": [392, 422, 426, 430, 437, 680, 742, 751, 758, 759, 760, 826, 960, 965, 1008, 1013], "bisecting_strategi": [392, 424], "largest_clust": [392, 424], "biggest_inertia": [392, 424], "biggest": [392, 395, 397, 424], "steinbach": [392, 1019], "karypi": 392, "vipin": 392, "egin": 392, "minnesota": 392, "june": [392, 959, 1010], "weblog": 392, "abirami": 392, "mayilvahanan": 392, "emerg": [392, 986], "ijet": 392, "jian": 392, "xinyu": 392, "gou": 392, "baod": 392, "hebei": 392, "knee": 392, "triangular": [392, 443, 592, 959], "whichev": [392, 399, 524, 541, 542, 614, 631, 635, 637, 645, 663, 664, 678], "conjunct": [392, 575, 777, 780, 781, 783, 791, 800, 801, 802, 803, 806, 929, 952, 958, 1019], "extract_dbscan": 392, "radius_neighbors_graph": [392, 403, 425, 821, 822, 823, 825, 827, 829, 830, 831, 832, 965, 1008, 1013, 1016], "ester": [392, 403, 425], "kriegel": [392, 403, 425, 430, 437, 825, 968], "sander": [392, 403, 425, 430, 437, 825, 968, 1013, 1014], "xu": [392, 395, 403, 425, 976, 1017, 1018], "portland": [392, 403, 425], "aaai": [392, 403, 425, 814, 964], "revisit": [392, 403, 425], "schubert": [392, 403, 425, 430, 1008, 1009, 1012, 1013, 1015, 1016, 1017, 1018], "tod": [392, 403, 425], "max_ep": [392, 430, 435, 437], "nearbi": [392, 965], "cluster_hierarchy_": [392, 430], "planar": 392, "peripheri": 392, "hdbscan": [392, 982], "wall": 392, "ankerst": [392, 430, 437], "mihael": [392, 430, 437], "marku": [392, 430, 437, 1012, 1014, 1015, 1016], "breunig": [392, 430, 437, 825, 968], "han": [392, 423, 430, 437, 1004, 1012, 1013, 1017], "j\u00f6rg": [392, 430, 437, 1012], "sigmod": [392, 430, 437, 825, 968], "cft": 392, "lossi": 392, "cf": [392, 395, 423, 681, 958, 972, 983], "subclust": [392, 423], "till": [392, 423, 768, 962], "temporarili": [392, 1009], "farthest": 392, "brc": [392, 423], "tian": [392, 423, 1009, 1010, 1011], "raghu": [392, 423], "ramakrishnan": [392, 423], "maron": [392, 423], "livni": [392, 423], "sfu": [392, 423], "coursecentr": [392, 423], "zhang96": [392, 423], "roberto": [392, 423], "perdisci": [392, 423], "jbirch": [392, 423], "java": [392, 423, 982], "satisfi": [392, 631, 635, 680, 698, 716, 717, 819, 820], "labels_pr": [392, 685, 686, 695, 696, 698, 711, 716, 717, 735, 737, 766, 773], "unadjust": [392, 962, 1016], "swap": [392, 397, 697, 716, 941, 942, 1004], "ri": [392, 686, 766], "c_2": [392, 959], "unord": [392, 399], "esp": [392, 1004], "hubert": [392, 686, 696, 766], "arabi": [392, 686, 696, 766], "steinlei": [392, 686], "psycholog": [392, 686, 697], "agreement": [392, 685, 697, 735, 737, 773, 962], "22504": 392, "10526": 392, "u_i": [392, 462, 463, 464, 735], "v_j": [392, 735, 967], "veb2009": 392, "a_i": 392, "b_j": 392, "yat2016": 392, "average_method": [392, 685, 737, 1012], "vinh": [392, 685], "veb2010": 392, "strehl": 392, "joydeep": 392, "1162": 392, "153244303321897735": 392, "epp": [392, 685], "bailei": [392, 685], "26th": [392, 706, 736, 962], "1553374": 392, "1553511": 392, "9781605585161": 392, "csail": [392, 647, 648, 657, 816], "volume11": 392, "vinh10a": 392, "algesheim": 392, "tesson": 392, "30750": 392, "1038": 392, "srep30750": 392, "rosenberg": [392, 698, 717, 773], "hirschberg": [392, 698, 717, 773], "b2011": 392, "homogeneity_completeness_v_measur": [392, 1013], "n_k": [392, 530], "n_c": [392, 640], "julia": [392, 698, 717, 773], "media": [392, 986], "hila": 392, "becker": [392, 986, 1007, 1016], "fowlkes_mallows_scor": [392, 962, 1010, 1012], "fmi": [392, 711], "fp": [392, 693, 699, 711, 762, 763, 764, 767, 962], "fn": [392, 693, 699, 711, 762, 763, 764, 767, 962, 963], "47140": 392, "fowkl": [392, 711], "1983": [392, 711, 859], "tandfonlin": 392, "01621459": 392, "10478008": 392, "kmeans_model": 392, "1987": [392, 588, 589, 770, 771], "calinski_harabasz_scor": [392, 1012], "dispers": [392, 691, 705, 958], "561": 392, "n_e": 392, "mathrm": [392, 394, 397, 401, 958, 978], "b_k": 392, "w_k": [392, 958], "c_q": 392, "n_q": 392, "c_e": 392, "cali\u0144ski": 392, "1974": [392, 400, 691], "dendrit": [392, 691], "davies_bouldin_scor": [392, 1012], "6619": 392, "bould": 392, "c_i": [392, 965], "c_j": [392, 967], "s_i": 392, "diamet": 392, "nonneg": [392, 397, 433, 518, 520, 527, 856], "s_j": 392, "max_": [392, 962], "1979": [392, 705, 749], "halkidi": 392, "batistaki": 392, "yanni": 392, "vazirgianni": 392, "michali": 392, "145": 392, "contingency_matrix": [392, 735, 1012], "pair_confusion_matrix": [392, 1016], "permit": [393, 447, 569, 570, 572, 777, 780, 781, 791, 801, 840, 841, 962, 963, 964, 1010], "clf__c": 393, "pca1": [393, 408], "svm1": 393, "77484909e": 393, "07058917e": 393, "pca2": [393, 408], "svm2": 393, "raw_target_regr": 393, "bypass": [393, 580, 627, 633, 886, 887, 888, 889], "check_invers": [393, 445, 843, 972, 1012, 1018, 1019], "caller": [393, 627, 628, 633, 641, 642, 643, 662, 868, 869, 930, 938, 939, 940, 1013], "linear_pca": 393, "make_union": [393, 838, 1007, 1011], "incorpor": [393, 399, 961, 982, 986], "unreli": 393, "citi": [393, 400, 446, 997], "london": [393, 400, 446], "sallisaw": [393, 446], "bow": 393, "watson": [393, 982], "moveabl": 393, "feast": 393, "grape": 393, "wrath": 393, "expert_r": 393, "user_r": 393, "city_categori": 393, "title_bow": 393, "city_london": 393, "city_pari": 393, "city_sallisaw": 393, "507": 393, "ignored_new_col": 393, "estimator_html_repr": [393, 1015, 1016, 1017, 1018], "shrunk_covari": 394, "sigma_": [394, 625, 626, 1017], "wiesel": [394, 405, 455], "eldar": [394, 405, 455], "hero": [394, 405, 455], "5016": [394, 405, 455], "5029": [394, 405, 455], "_k": [394, 956, 958], "glasso": [394, 458], "biostatist": [394, 458], "uncommon": [394, 639, 878, 977], "downweight": [394, 516], "driessen": [394, 449, 454, 968], "fastmcd": [394, 449, 454], "raw_location_": [394, 449, 454], "raw_covariance_": [394, 449, 454], "multidimension": [395, 669, 671, 673, 675, 959, 965], "plsw2a": 395, "u_k": [395, 397], "v_k": [395, 397, 511, 517, 525, 526], "x_k": [395, 397, 956, 965], "y_k": 395, "xi_k": 395, "omega_k": [395, 956], "gamma_k": 395, "delta_k": 395, "nipal": [395, 463, 464], "x_rotations_": [395, 462, 463, 464], "y_rotations_": [395, 462, 463, 464], "ty": 395, "x_weights_": [395, 462, 463, 464, 465], "y_weights_": [395, 462, 463, 464, 465], "yv": 395, "tx": 395, "pls1": [395, 464], "pls2": [395, 464], "tx_k": [395, 956], "ty_k": 395, "ja": [395, 1011], "wegelin": 395, "methodolog": [396, 985], "academ": [396, 986], "commerci": [396, 986], "flowchart": [396, 990], "f1_macro": [396, 962, 1008], "custom_cv_2fold": 396, "custom_cv": 396, "9333": 396, "scorer1_nam": 396, "scorer2_nam": 396, "precision_macro": [396, 992], "recall_macro": [396, 962], "test_precision_macro": 396, "test_recall_macro": 396, "prec_macro": 396, "rec_macro": 396, "test_prec_macro": 396, "test_rec_macro": 396, "train_prec_macro": 396, "train_rec_macro": 396, "undistinguish": 396, "kf": [396, 782], "12883823": 396, "rkf": [396, 792], "weigh": [396, 1011], "caveat": [396, 402], "part3": 396, "spector": 396, "submodel": 396, "kohavi": 396, "jnt": 396, "bharat": [396, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "rao": [396, 1016, 1019], "fung": 396, "rosal": 396, "witten": 396, "leavepout": [396, 785, 992], "ss": 396, "gkf": 396, "sgkf": [396, 795], "suboptim": [396, 683, 769, 965, 1012], "leavepgroupsout": [396, 779, 992, 1010], "n_group": [396, 786, 992, 1010], "lpgo": [396, 786], "gss": [396, 779], "withheld": 396, "predefinedsplit": [396, 992, 1008], "test_fold": [396, 790], "train_indx": 396, "test_indx": 396, "autocorrel": 396, "superset": [396, 798, 962], "surplu": 396, "tscv": [396, 798], "inbuilt": 396, "some_integ": 396, "n_cv": [396, 418], "isotropi": 397, "alik": [397, 960], "halko": [397, 515, 521, 524, 914, 915], "szlam": [397, 914, 915], "disadvantag": [397, 402, 958, 959, 966, 976, 977, 978], "parsimoni": [397, 972], "jen09": 397, "mrl09": 397, "ell_1": [397, 958], "underset": [397, 958, 965, 978], "operatornam": [397, 721, 958, 962, 978], "fro": [397, 518, 520, 527, 674, 958], "gentli": 397, "spirit": 397, "mairal": [397, 511, 517], "bach": [397, 511, 516, 517, 518, 639, 958], "ponc": [397, 511, 517], "sapiro": [397, 511, 517], "jenatton": 397, "obozinski": 397, "scholkopf1997": 397, "bakir2003": 397, "smola": [397, 400, 515, 845, 972, 977], "klau": [397, 515, 845], "berlin": [397, 515, 677, 706, 736, 962], "heidelberg": [397, 515, 677, 706, 736, 962], "eigendecompos": 397, "eigensolv": [397, 432, 442, 515, 524, 676, 959], "eigsh": [397, 515, 1010, 1011], "lehoucq": 397, "sorensen": 397, "lsa": [397, 524, 1006], "synonymi": 397, "polysemi": 397, "lsi": 397, "sigma_k": [397, 956], "columnwis": 397, "sublinear": [397, 571, 572], "use_idf": [397, 400, 571, 572, 997], "textual": [397, 978, 1013], "man": [397, 571, 749, 814, 818, 960, 962, 964], "prabhakar": 397, "raghavan": [397, 571, 814, 818, 960, 962, 964], "hinrich": 397, "sch\u00fctze": [397, 571, 960, 962, 964], "transform_method": 397, "split_cod": 397, "dictionarylearn": [397, 517, 519, 520, 522, 523, 524, 525, 526, 1005, 1009, 1011, 1014, 1017, 1018, 1019, 1020], "overcomplet": 397, "mammalian": 397, "cortex": 397, "inpaint": 397, "h_i": [397, 967], "psi": 397, "sim": [397, 995], "wh_i": 397, "ww": 397, "superflu": 397, "psi_1": 397, "psi_2": 397, "psi_n": 397, "superimpos": 397, "plug": [397, 958, 986, 997], "wh": [397, 518, 520, 527], "hoyer": [397, 1007], "nndsvd": [397, 518, 520, 527, 1013, 1016], "nndsvdar": [397, 518, 520, 527, 1013], "elementwis": [397, 518, 520, 527], "_featur": [397, 518, 520, 527], "kl": [397, 959, 1012], "itakura": [397, 518, 520, 527, 1011], "saito": [397, 518, 520, 527, 1011], "w_new": 397, "forget_factor": [397, 518], "lee": [397, 1004, 1005, 1008, 1010, 1011, 1012, 1013, 1015, 1016, 1019], "seung": 397, "boutsidi": 397, "gallopoulo": 397, "cichocki": [397, 518, 520, 527], "phan": 397, "fevott": [397, 518, 520, 527], "idier": [397, 518, 520, 527], "lefevr": [397, 518], "corpora": 397, "hoffman": [397, 516, 1009, 1016], "unshad": 397, "beta_k": 397, "eta": [397, 516, 657, 658, 659, 966, 976, 1009], "topic_word_prior": [397, 516], "theta_d": 397, "doc_topic_prior": [397, 516], "z_": 397, "w_": [397, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 958, 962, 964, 967], "beta_": 397, "elbo": 397, "overset": [397, 969], "e_": 397, "blei": [397, 516, 775], "wang": [397, 516, 660, 670, 674, 706, 736, 958, 959, 962, 1007, 1009, 1010, 1011, 1012, 1016], "paislei": [397, 516], "kaiser": [397, 512], "talli": 398, "disproportion": 398, "41075698": 398, "41076071": 398, "rho_k": 398, "unsmooth": 398, "scott": [398, 824, 1004, 1005, 1010, 1012, 1013, 1014, 1019], "silvermann": 398, "propto": [398, 964], "2h": 398, "angular": [398, 673, 744], "contin": [398, 695, 972], "generaliz": 399, "flavour": 399, "b1999": 399, "b1996": 399, "h1998": 399, "lg2012": 399, "bootstrap_featur": [399, 535, 536], "844": [399, 535, 536], "geurt": [399, 535, 536, 537, 538, 545, 546, 888, 889], "b1998": 399, "decoupl": [399, 964], "cancel": [399, 400, 743], "b2001": 399, "bear": [399, 982], "ernst": [399, 537, 538, 545, 546, 888, 889], "wehenkel": [399, 537, 538, 545, 546, 888, 889], "l2014": 399, "lieg": 399, "freund": [399, 533, 534], "fs1995": 399, "w_1": [399, 958, 966], "w_2": [399, 958, 966], "w_n": 399, "w_i": [399, 953, 962], "reappli": 399, "htf": 399, "zzrh2009": 399, "d1997": 399, "semin": 399, "friedman2001": 399, "shelf": 399, "ecologi": 399, "lightgbm": [399, 541, 542, 1013], "913": [399, 539], "nr": 399, "f_m": 399, "h_m": 399, "f_": [399, 616, 962], "l_m": 399, "taylor": [399, 1012, 1014, 1015, 1018], "g_i": [399, 630], "absolute_error": [399, 538, 540, 542, 545, 652, 887, 889, 1017], "sum_m": 399, "softmax": [399, 541, 639, 640, 958, 965, 966], "superior": 399, "ineffici": [399, 424, 554, 807, 808, 965, 967], "r2007": 399, "friedman2002": 399, "1189": 399, "1232": 399, "367": [399, 1004], "tremend": 399, "8965": 399, "kown": 399, "grower": [399, 541, 542], "missing": [399, 608, 609, 611, 1013], "comfort": 399, "fisher1958": 399, "loan": [399, 514, 958, 986], "nevertheless": 399, "mayer2022": 399, "mayer": [399, 1016, 1018], "bourassa": 399, "hoesli": 399, "scognamiglio": 399, "valuat": 399, "tianqi": 399, "guestrin": 399, "ke": [399, 1015, 1016], "boostingdecis": 399, "w2": 399, "w3": 399, "lr__c": 399, "rf__n_estim": 399, "w1992": 399, "knr": 399, "stack_method": [399, 547], "126": 399, "164": 399, "stack_method_": [399, 547, 548], "final_layer_rfr": 399, "final_layer_gbr": 399, "final_lay": 399, "multi_layer_regressor": 399, "wolpert": [399, 547, 548], "241": [399, 547, 548], "dubai": 400, "francisco": [400, 974], "movi": [400, 989], "movie_entri": 400, "thriller": [400, 850], "drama": 400, "000e": 400, "003e": 400, "011e": 400, "974e": 400, "unseen_featur": [400, 562], "speech": [400, 962], "chunker": 400, "pos_window": 400, "pos_vector": 400, "1x6": 400, "part_of_speech": 400, "token_featur": 400, "isupp": 400, "uppercase_initi": 400, "all_uppercas": 400, "raw_x": [400, 563], "pos_tagg": 400, "comprehens": [400, 738, 739, 960, 986, 1012], "murmurhash3": [400, 563, 570, 927], "weinberg": 400, "modulo": [400, 1015], "kilian": [400, 1019], "anirban": 400, "dasgupta": [400, 872, 974], "langford": [400, 669, 959], "josh": [400, 1011], "attenberg": 400, "multitask": [400, 963], "punctuat": [400, 569, 570, 572], "diminish": 400, "4x9": 400, "build_analyz": [400, 569, 570, 572, 1014], "interrog": 400, "bigram_vector": 400, "bi": 400, "cool": [400, 1004], "feature_index": 400, "him": 400, "constru": 400, "nqy18": 400, "smooth_idf": [400, 571, 572], "_n": [400, 962], "textbook": [400, 571], "6x3": 400, "81940995": 400, "57320793": 400, "47330339": 400, "88089948": 400, "58149261": 400, "81355169": 400, "term1": 400, "term2": 400, "term3": 400, "0986": [400, 843], "819": 400, "573": 400, "8473": 400, "8515": [400, 1011], "5243": 400, "85151335": 400, "52433293": 400, "55422893": 400, "83236428": 400, "63035731": 400, "77630514": 400, "idf_": [400, 571, 572, 1012], "western": 400, "europ": [400, 972], "koi8": 400, "russian": 400, "modern": [400, 448, 483, 571, 671, 675, 710, 876, 959, 983], "unicodedecodeerror": [400, 569, 570, 572], "told": 400, "silent": [400, 562, 835, 972, 1009, 1010, 1012, 1013, 1017, 1018], "chardet": 400, "chardetect": 400, "damag": 400, "sloppili": 400, "ftfy": 400, "mish": 400, "mash": 400, "text1": 400, "sei": 400, "mir": 400, "gegr": 400, "xc3": 400, "xbc": 400, "x9ft": 400, "mein": 400, "sauerkraut": 400, "text2": 400, "holdselig": 400, "sind": 400, "dein": 400, "ger": 400, "xfcche": 400, "text3": 400, "xff": 400, "xfea": 400, "x00u": 400, "x00f": 400, "x00": 400, "x00l": 400, "xfc": 400, "x00g": 400, "x00e": 400, "x00n": 400, "x00d": 400, "x00a": 400, "x00h": 400, "x00r": 400, "x00z": 400, "x00i": 400, "x00b": 400, "x00c": 400, "x00t": 400, "x00o": 400, "spolski": 400, "nnmf": [400, 998, 999, 1004], "phrase": 400, "misspel": 400, "rescu": 400, "resili": 400, "wprd": 400, "ngram_vector": 400, "char_wb": [400, 569, 570, 572], "rd": 400, "wo": 400, "wp": [400, 638, 652], "char": [400, 569, 570, 572, 1004], "jumpi": 400, "fox": 400, "1x4": 400, "umpi": 400, "1x5": 400, "mpy": 400, "fo": 400, "barrier": 400, "hv": 400, "4x10": 400, "discrep": [400, 997, 1008], "4x1048576": 400, "collid": 400, "ingest": 400, "spend": 400, "my_token": 400, "lowercas": [400, 408, 423, 424, 426, 427, 429, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 569, 570, 572, 620, 621, 622, 623, 669, 670, 823, 828, 831, 835, 840, 845, 870, 871, 1017], "lucen": 400, "build_preprocessor": [400, 569, 570, 572, 1014], "whitespac": 400, "fanci": 400, "lemmat": 400, "nltk": [400, 981, 982], "word_token": 400, "wordnetlemmat": 400, "lemmatoken": 400, "wnl": 400, "british": 400, "spell": 400, "to_british": 400, "1or": 400, "bt": 400, "1er": 400, "ing": 400, "ation": 400, "1z": 400, "ogu": 400, "og": 400, "customvector": 400, "asian": 400, "one_imag": [400, 565], "fake": 400, "assert_array_equ": 400, "patchextractor": 400, "five_imag": 400, "variancethreshold": [401, 844, 952, 1007, 1014, 1017, 1020], "sel": 401, "selectfdr": [401, 573, 577, 579, 580, 581, 587, 1008, 1010, 1011, 1020], "selectfw": [401, 573, 576, 577, 580, 581, 587, 1020], "genericunivariateselect": [401, 576, 577, 579, 580, 581, 583, 1018, 1020], "r_regress": [401, 587, 1017, 1018], "nonparametr": [401, 588, 589], "bewar": 401, "importance_gett": [401, 574, 575, 578, 1016], "unimport": 401, "lsvc": 401, "baraniuk": 401, "isr": 401, "ist": 401, "utl": 401, "aguiar": 401, "cs_note": 401, "ferri": [401, 962], "versatil": [402, 977, 986], "optima": 402, "markov": [402, 592, 967, 982, 1004], "ppmv": 402, "0336": 402, "4ppm": 402, "27ppm": 402, "197ppm": 402, "nuisanc": 402, "logit": [402, 639, 640, 958], "one_vs_on": [402, 591, 963], "ingredi": 402, "duv2014": 402, "theta_l": 402, "x_bound": [402, 598], "operand": 402, "k1__": 402, "k2__": 402, "constant_valu": [402, 594, 598], "constant_value_bound": [402, 592, 594, 598], "k1__k1__constant_valu": 402, "value_typ": [402, 598], "n_element": [402, 598], "k2__length_scal": 402, "k1": [402, 602, 605], "k1__k1": 402, "k1__k1__constant_value_bound": 402, "k1__k2": 402, "k1__k2__length_scale_bound": 402, "k2": [402, 602, 605], "k2__length_scale_bound": 402, "69314718": [402, 593, 972], "30258509": 402, "interoper": [402, 980, 983, 999], "pairwisekernel": 402, "_valu": [402, 594], "_level": [402, 606], "k_1": [402, 602, 605], "k_2": [402, 602, 605], "__add__": [402, 605], "__mul___": 402, "__pow__": [402, 597], "2l": [402, 603], "bigg": [402, 600], "bessel": [402, 600], "rightarrow": [402, 600, 966], "quad": [402, 965, 976], "tfrac": 402, "3l": 402, "pp84": 402, "x_d": [402, 595], "inhomogen": [402, 595], "expon": [402, 597, 657, 658, 659, 789, 836, 837, 854, 951], "carl": [402, 591, 592, 595, 600, 603], "rasmussen": [402, 591, 592, 595, 600, 603], "duvenaud": [402, 603, 604], "cookbook": [402, 603, 604], "minkowski": [403, 425, 430, 437, 669, 680, 758, 759, 760, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 965, 1004, 1007, 1018, 1019], "metric_param": [403, 425, 430, 437, 669, 673, 821, 822, 823, 824, 825, 827, 829, 830, 831, 832, 833, 1008, 1011, 1018], "leaf_siz": [403, 425, 430, 437, 819, 820, 821, 822, 823, 824, 825, 827, 829, 830, 831], "kd_tree": [403, 425, 430, 437, 669, 670, 821, 822, 823, 824, 825, 827, 829, 830, 831, 965, 1017], "balltre": [403, 425, 430, 437, 669, 670, 680, 821, 822, 823, 824, 825, 827, 829, 830, 831, 832, 833, 959, 1004, 1006, 1008, 1012, 1017, 1020], "ckdtree": [403, 425, 1006], "inhibit": [403, 425], "core_sampl": 403, "n_core_sampl": [403, 425], "attract": [403, 425, 956, 965, 982], "fun": [404, 513, 986], "logcosh": [404, 513], "fun_arg": [404, 513], "w_init": [404, 513], "whiten_solv": [404, 513, 1019], "return_x_mean": 404, "compute_sourc": 404, "return_n_it": [404, 434, 439, 458, 525, 526, 627, 628, 633, 634, 641, 642, 643, 644, 662, 663, 664, 665, 666, 667, 668, 675, 1018], "cube": [404, 513], "my_g": [404, 513], "x_mean": 404, "AS": 404, "fortran": [404, 521, 627, 628, 633, 634, 641, 642, 643, 644, 646, 662, 665, 666, 667, 898, 899, 1004, 1007, 1008, 1012], "hyvarinen": [404, 513], "oja": [404, 513], "shrunk_cov": [405, 459, 461], "eq": [405, 455, 702, 703, 704], "subobject": [406, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 775, 776, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889], "row_ind": [407, 431, 433], "intp": [407, 431, 433], "col_ind": [407, 431, 433], "get_submatrix": [407, 431, 433], "pca0": 408, "_n_features_out": 408, "class_name0": [408, 423, 424, 426, 427, 429, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 620, 621, 622, 623, 669, 670, 823, 828, 831, 835, 845, 870, 871], "class_name1": [408, 423, 424, 426, 427, 429, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 620, 621, 622, 623, 669, 670, 823, 828, 831, 835, 845, 870, 871], "class_name2": [408, 423, 424, 426, 427, 429, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 620, 621, 622, 623, 669, 670, 823, 828, 831, 835, 845, 870, 871], "feature_names_out": [408, 412, 423, 424, 426, 427, 429, 444, 462, 463, 464, 465, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 546, 547, 548, 549, 550, 562, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 669, 670, 823, 828, 831, 835, 838, 839, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 1018], "harsh": [409, 418, 449, 529, 530, 531, 533, 535, 537, 539, 541, 544, 547, 549, 591, 639, 647, 649, 655, 656, 657, 807, 808, 809, 810, 814, 815, 816, 817, 818, 821, 826, 829, 836, 873, 874, 878, 880, 883, 886, 888, 1014, 1016, 1019], "n_samples_fit": [413, 445, 462, 463, 464, 534, 536, 538, 540, 542, 545, 548, 550, 592, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 659, 660, 669, 812, 813, 821, 822, 823, 825, 827, 829, 830, 831, 837, 879, 881, 884, 887, 889], "uniform_averag": [413, 445, 462, 463, 464, 534, 536, 538, 540, 542, 545, 548, 550, 592, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 659, 660, 702, 703, 708, 725, 726, 728, 730, 731, 733, 765, 812, 813, 822, 830, 837, 879, 881, 884, 887, 889, 962, 1013], "n_features_new": [414, 423, 426, 512, 514, 516, 517, 519, 522, 523, 529, 547, 549, 550, 563, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 609, 611, 616, 619, 620, 621, 622, 623, 828, 835, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 856, 857, 858, 859, 870, 871], "base_clf": 418, "calibrated_clf": 418, "927": 418, "x_calib": 418, "y_calib": 418, "prob_tru": [419, 420], "prob_pr": [419, 420], "ref_lin": 419, "alexandru": 420, "22nd": 420, "525": [420, 609, 952], "convergence_it": [421, 434], "hardcod": [421, 434, 1012], "affinity_matrix_": [421, 432, 672], "cluster_center_indic": [421, 434], "compute_full_tre": [422, 426, 1008], "compute_dist": [422, 426, 1016], "inferior": [422, 426, 1015], "n_leaves_": [422, 426], "n_connected_components_": [422, 426, 1013], "branching_factor": 423, "compute_label": [423, 429], "promot": [423, 689, 982, 1015, 1017], "redistribut": 423, "overwritten": [423, 512, 513, 514, 516, 521, 528, 588, 589, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 653, 655, 660, 662, 663, 664, 665, 667, 930, 932, 1017], "root_": 423, "_cfnode": 423, "cftree": 423, "dummy_leaf_": 423, "subcluster_labels_": 423, "scratch": [423, 962, 1006], "centroids_": [423, 826], "copy_x": [424, 427, 439, 515, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 653, 655, 660, 662, 663, 664, 665, 666, 1006, 1012, 1013], "smart": [424, 439, 440, 571], "k_init": [424, 439], "sse": 424, "bisect_mean": 424, "pooling_func": [426, 1012], "xred": 426, "socg2006": 427, "min_bin_freq": [428, 441], "cluster_al": [428, 441], "get_bin_se": 428, "orphan": [428, 441, 1004], "reassignment_ratio": 429, "eec": [429, 622], "tuft": 429, "dscullei": 429, "fastkmean": 429, "97727273": 429, "43181818": 429, "cluster_method": 430, "predecessor_correct": [430, 436], "unprocess": [430, 569, 570, 572], "heap": 430, "braycurti": [430, 437, 680, 758, 759, 760, 965], "canberra": [430, 437, 680, 758, 759, 760, 965], "chebyshev": [430, 437, 680, 758, 759, 760, 965], "dice": [430, 437, 680, 758, 759, 760, 965], "kulsinski": [430, 437, 680, 758, 759, 760], "rogerstanimoto": [430, 437, 680, 758, 759, 760, 965], "russellrao": [430, 437, 680, 758, 759, 760, 965], "seuclidean": [430, 437, 680, 758, 759, 760, 826, 965, 1012, 1015, 1016], "sokalmichen": [430, 437, 680, 758, 759, 760, 965], "sokalsneath": [430, 437, 680, 758, 759, 760, 965], "yule": [430, 437, 758, 759, 760], "manhattan_dist": [430, 437, 669, 742, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 1004, 1014, 1019, 1020], "minkowski_dist": [430, 437, 669, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833], "l_p": [430, 437, 669, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833], "upward": [430, 436], "successor": [430, 436, 978, 982], "predecessor": [430, 436, 437], "kdtree": [430, 437, 669, 670, 819, 821, 822, 823, 824, 825, 827, 829, 830, 831, 1006, 1008, 1012, 1016, 1017], "predecessor_": [430, 437], "erich": [430, 1008, 1009, 1012, 1013, 1015, 1016, 1017, 1018], "gertz": 430, "lernen": 430, "wissen": 430, "daten": [430, 1012, 1013], "analysen": 430, "lwda": 430, "n_best": 431, "n_svd_vec": [431, 433], "mini_batch": [431, 433], "n_row_clust": [431, 433, 493], "n_column_clust": [431, 433, 493], "ncv": [431, 433], "n_oversampl": [431, 433, 521, 524, 915, 1018], "kernel_param": [432, 515, 620, 624], "precomputed_nearest_neighbor": [432, 672], "eigendecomposit": [432, 442, 654, 672, 676, 845], "dist_matrix": 432, "541": [432, 442], "csc_matrix": [432, 537, 538, 543, 544, 545, 546, 856, 886, 887, 888, 889, 952, 972, 978, 1009], "best_n_it": 439, "n_local_tri": 440, "n_seed": 441, "multigrid": 442, "multiscal": 442, "preliminari": 442, "heapq": 443, "topolog": [443, 982], "n_connected_compon": 443, "n_leav": [443, 886, 887, 888, 889], "untransform": [444, 447, 973], "transformers_": 444, "remaining_column": 444, "named_transformers_": 444, "sparse_output_": [444, 531], "output_indices_": [444, 1017], "datatyp": [444, 446, 1011, 1014], "norm1": 444, "norm2": 444, "text_preprocess": 444, "num_preprocess": 444, "x_t": [444, 608, 838], "sum_n_compon": [444, 838], "transformer_": 445, "predict_param": [445, 547, 548, 839, 1017], "y_hat": 445, "90453403": 446, "50755672": 446, "30151134": 446, "print_changed_onli": [448, 876, 1013, 1015, 1016], "pairwise_dist_chunk_s": [448, 876], "enable_cython_pairwise_dist": [448, 876], "cache_s": [448, 876, 880, 881, 882, 883, 884, 977], "get_config": [448, 761, 876, 929, 1019], "offset_": [449, 543, 658, 825, 882, 1012], "raw_support_": [449, 454], "dist_": [449, 454], "true_cov": [449, 451, 452], "7411": [449, 454, 1010], "2535": [449, 454], "3053": [449, 454], "0813": [449, 454], "0427": [449, 454], "correct_covari": [449, 454], "rvd": [449, 454], "covariance_correct": [449, 454], "comp_cov": [449, 450, 451, 452, 453, 454, 455, 456], "get_precis": [449, 450, 451, 452, 453, 454, 455, 456, 512, 514, 521], "is_inli": [449, 543, 825], "reweight_covari": [449, 454], "rvdriessen": [449, 454], "location_reweight": [449, 454], "covariance_reweight": [449, 454], "support_reweight": [449, 454], "negative_mahal_dist": 449, "7569": 450, "2818": 450, "3928": 450, "0622": [450, 456], "0193": [450, 456], "enet_tol": [451, 452, 458, 1009], "graphlasso": [451, 1009, 1012], "034": 451, "038": [451, 452, 836], "n_refin": 452, "graphlassocv": [452, 1006, 1012], "dualiti": [452, 958], "block_siz": [453, 459, 460, 1008], "4406": 453, "1616": 453, "0595": 453, "0075": [453, 521], "rouseeuw1984": 454, "butlerdavi": 454, "butler": [454, 1007, 1015, 1016], "davi": [454, 705, 962, 1008], "jhun": 454, "1385": 454, "7533": [455, 1011], "2763": 455, "3964": 455, "7833": 455, "2431": 455, "3889": 455, "0195": 455, "7387": 456, "2536": 456, "4110": 456, "cov_init": 458, "return_cost": 458, "220446049250313e": [458, 631, 632, 635, 636, 637, 663, 664], "graph_lasso": [458, 1012], "dual_gap": [458, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665], "x_loadings_": [462, 463, 464], "y_loadings_": [462, 463, 464], "plssvd": [462, 463, 984, 999, 1016, 1018], "x_c": [462, 463, 465, 969], "y_c": [462, 463, 465], "y_reconstruct": [462, 463, 464], "x_scores_": [464, 1016], "y_scores_": [464, 1016], "y_transform": 465, "data_hom": [466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 1011], "sklearn_learn_data": [466, 479], "zero_bas": [467, 488, 489], "query_id": [467, 488, 489], "grok": 467, "qid": [467, 488, 489, 1005, 1010], "download_if_miss": [468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 1011], "ioerror": [468, 469, 470, 471, 472, 473, 474, 475, 477, 478], "stopword": [469, 997], "target_column": [469, 470, 476], "percent": [472, 581, 975], "494021": 472, "slice_": [473, 474, 1019], "195": [473, 474], "unrestrict": 473, "2914": 474, "5748": 474, "n_retri": [476, 1018], "timeout": [476, 928, 1018], "412": [476, 958], "silenc": 476, "ith": [476, 754, 758, 815, 836, 837, 852, 853], "1592": 478, "1212": 478, "1624": 478, "620": 478, "data_filenam": [481, 485], "target_filenam": [481, 485], "container_path": 483, "load_cont": 483, "allowed_extens": 483, "container_fold": 483, "category_1_fold": 483, "file_1": 483, "file_2": 483, "file_42": 483, "category_2_fold": 483, "file_43": 483, "file_44": 483, "mod": 483, "image_nam": 486, "first_img_data": 487, "backup": [488, 1004], "instantan": 488, "mycach": 488, "get_data": 488, "mysvmlightfil": 488, "xn": 489, "yn": [489, 963, 964], "q1": 489, "qn": 489, "yi": [489, 964, 1008, 1012, 1013, 1016], "qi": [489, 1016], "triplet": 489, "minval": [491, 493], "maxval": [491, 493], "seventh": [491, 974], "return_cent": [492, 1015], "intric": 492, "basri": 493, "gerstein": 493, "genom": 493, "flip_i": 495, "interdepend": 495, "polytop": 495, "guyon": [495, 574, 575, 962], "madelon": 495, "1991": [496, 497, 498], "12000": 500, "effective_rank": [501, 504], "tail_strength": [501, 504], "bell": [501, 1012, 1014, 1016, 1017], "fat": [501, 504], "crawl": [501, 907], "return_ind": 503, "make_low_rank_matrix": 504, "4967": 504, "1382": 504, "6476": 504, "523": 504, "2341": 504, "4694": 504, "5425": 504, "579": 504, "7674": [504, 1011], "4017": 504, "norm_diag": 507, "make_spd_matrix": 507, "celeux": 508, "el": [508, 1017], "anbari": 508, "marin": 508, "frequentist": 508, "n_dim": [509, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606], "marsland": 510, "vuw": 510, "nz": 510, "marslast": 510, "ch6": 510, "code_init": [511, 525], "dict_init": [511, 517, 525, 526], "callback": [511, 517, 519, 525, 526, 828, 928, 983, 1020], "split_sign": [511, 517, 522], "transform_max_it": [511, 517, 518, 522, 1014], "_fro": [511, 517, 525, 526, 627, 628, 633, 641, 642, 643, 662], "lasso_cd": [511, 517, 522, 528], "invok": [511, 517, 519, 525, 526, 547, 549, 550, 800, 875, 1016], "error_": [511, 523], "minibatchsparsepca": [511, 513, 517, 520, 522, 523, 525, 526, 1004, 1005, 1015, 1017, 1018, 1019], "sierra": [511, 517], "icml09": [511, 517], "x_hat": [511, 517], "noise_variance_init": 512, "quartimax": [512, 1016], "loglike_": 512, "barber": 512, "bishop": [512, 514, 521, 721, 775, 958, 963, 977], "get_covari": [512, 514, 521], "unmixing_matrix": 513, "whitening_": 513, "kpca": [513, 514, 515, 998, 999, 1004], "unsaf": 514, "singular_values_": [514, 521, 524, 1011], "var_": [514, 817, 859, 1017], "miketip": [514, 521], "mppca": [514, 521], "n_samples_seen_": [514, 848, 849, 859, 1012], "batch_size_": 514, "ross": [514, 588, 589, 978, 1018, 1019], "vision": [514, 738, 739, 954, 958, 960, 978, 982, 986, 1005], "141": [514, 878, 963], "toronto": [514, 625, 835], "dross": 514, "ivt": 514, "rosslimlinyang_ijcv": 514, "karhunen": 514, "loev": 514, "levi": [514, 1011], "lindenbaum": 514, "1371": 514, "1374": 514, "abstain": 514, "holub": 514, "opportun": [514, 976], "golub": [514, 817, 859], "x_spars": [514, 933, 936], "sigma2": [514, 521], "x_origin": [514, 519, 521, 523, 524, 611, 870, 871], "check_input": [514, 528, 627, 628, 633, 641, 642, 643, 662, 668, 886, 887, 888, 889, 1012], "remove_zero_eig": [515, 1006, 1013], "x_fit_": [515, 624], "eigenvalues_": [515, 1017], "eigenvectors_": [515, 1017], "dual_coef_": [515, 624, 880, 881, 882, 883, 884, 977, 1008], "x_transformed_fit_": 515, "nathan": [515, 1012, 1016, 1019], "gunnar": [515, 915], "tropp": [515, 521], "217": [515, 521], "288": [515, 521], "vladimir": [515, 915, 958, 1014, 1018], "rokhlin": [515, 521, 915], "tygert": [515, 521, 915], "learning_decai": 516, "evaluate_everi": 516, "perp_tol": 516, "mean_change_tol": 516, "max_doc_update_it": 516, "kappa": [516, 697], "tau_0": 516, "pseudocount": [516, 1012], "exp_dirichlet_component_": 516, "n_batch_iter_": 516, "bound_": 516, "doc_topic_prior_": 516, "topic_word_prior_": 516, "franci": [516, 639, 958, 1010], "onlineldavb": 516, "chong": 516, "00360392": 516, "25499205": 516, "0036211": 516, "64236448": 516, "09541846": 516, "15297572": 516, "00362644": 516, "44412786": 516, "39568399": 516, "003586": 516, "vb": 516, "sub_sampl": 516, "doc_topic_distr": [516, 1011], "fresh_restart": 518, "fresh_restarts_max_it": 518, "_w": [518, 520, 527], "_ratio": [518, 520, 527], "_h": [518, 520, 527], "fresh": [518, 983, 1014], "reconstruction_err_": [518, 520], "andrzej": [518, 520, 527], "anh": [518, 520, 527], "ieic": [518, 520, 527], "708": [518, 520, 527, 730], "721": [518, 520, 527], "waspa": 518, "ridge_alpha": [519, 523, 1011], "power_iteration_norm": [521, 524, 914, 915, 1018], "500x500": 521, "lu": [521, 524, 914, 915, 1010, 1011, 1012, 1013], "n_samples_": 521, "royal": [521, 608, 855, 866, 976], "methodologi": [521, 852, 952, 962, 986], "622": 521, "9924": 521, "30061": 521, "54980": 521, "00755": 521, "99244": 521, "ascontiguousarrai": 521, "sparse_encod": [522, 631, 632, 633, 634, 635, 636, 637, 644, 645, 646, 663, 664, 665, 666, 667, 1004, 1011, 1012, 1014, 1018], "u_init": 523, "v_init": 523, "9666": 523, "oversampl": [524, 1004], "indeterminaci": 524, "x_dens": 524, "0157": 524, "0512": 524, "0499": 524, "0479": 524, "0453": 524, "2102": 524, "2410": 524, "5981": 524, "5420": 524, "4486": 524, "3288": 524, "method_max_it": [525, 526, 1014], "dict_learning_onlin": [525, 1005, 1014, 1017, 1018], "return_cod": 526, "iter_offset": [526, 1018], "return_inner_stat": [526, 1018], "inner_stat": [526, 1018], "update_h": 527, "hal": [527, 639, 738, 739, 960], "copy_cov": 528, "orthogonal_mp": [528, 645, 646, 667, 958], "eigen": [529, 654, 672, 676, 956, 1010, 1013], "sum_k": [529, 978], "prior_k": 529, "c_k": 529, "priors_": [529, 530], "scalings_": [529, 530], "xbar_": 529, "reg_param": 530, "scaling_": 530, "colinear": 530, "rotations_": 530, "n_classes_": [531, 533, 535, 537, 539, 544, 591, 807, 808, 886, 888, 1005, 1014, 1016], "class_prior_": [531, 817], "n_outputs_": [531, 532, 537, 538, 544, 545, 546, 836, 837, 886, 887, 888, 889], "dummy_clf": 531, "constant_": 532, "dummy_regr": 532, "base_estimator_": [533, 534, 535, 536, 537, 538, 539, 540, 543, 544, 545, 546, 591, 875, 1019], "dok": [533, 534, 846, 1017], "staged_decision_funct": [533, 539, 541], "staged_scor": [533, 534], "7972": 534, "9771": 534, "estimators_samples_": [535, 536, 543, 1010, 1012, 1015], "estimators_features_": [535, 536, 543], "oob_decision_function_": [535, 537, 544], "oob_prediction_": [536, 538, 545], "8720": [536, 1012], "min_weight_fraction_leaf": [537, 538, 539, 540, 544, 545, 546, 886, 887, 888, 889, 978, 1007, 1010, 1011], "min_impurity_decreas": [537, 538, 539, 540, 544, 545, 546, 886, 887, 888, 889, 978, 1011], "shannon": [537, 544, 886, 888, 959, 978], "unlimit": [537, 538, 539, 540, 544, 545, 546, 886, 887, 888, 889], "n_t": [537, 538, 539, 540, 544, 545, 546, 886, 887, 888, 889], "n_t_r": [537, 538, 539, 540, 544, 545, 546, 886, 887, 888, 889], "right_impur": [537, 538, 539, 540, 544, 545, 546, 886, 887, 888, 889], "n_t_l": [537, 538, 539, 540, 544, 545, 546, 886, 887, 888, 889], "left_impur": [537, 538, 539, 540, 544, 545, 546, 886, 887, 888, 889], "balanced_subsampl": [537, 544, 1012], "subtre": [537, 538, 539, 540, 544, 545, 886, 887, 888, 889, 978], "unprun": [537, 538, 544, 545, 886, 887, 888, 889], "x_leav": [537, 538, 539, 540, 544, 545, 546, 886, 887, 888, 889], "n_nodes_ptr": [537, 538, 544, 545, 546], "friedman_ms": [538, 539, 540, 545, 887, 889], "extratreeregressor": [538, 543, 546, 888, 968, 1013, 1014, 1015, 1017, 1018, 1019], "2727": 538, "dummyestim": [539, 540], "eras": [539, 540, 627, 633, 639, 641, 643, 647, 648, 649, 657, 658, 659, 836, 837], "oob_scores_": [539, 540, 1020], "lossfunct": [539, 540, 649, 657, 658, 1013], "init_": [539, 540], "init_estim": [539, 540], "max_features_": [539, 540, 578, 886, 887, 888, 889, 1018], "_fit_stag": [539, 540], "binary_crossentropi": [541, 1018], "categorical_crossentropi": [541, 1014, 1018], "crossentropi": 541, "deepest": [541, 542, 1015], "reserv": [541, 542, 986, 988], "no_interact": [541, 542, 1019], "do_early_stopping_": [541, 542], "n_trees_per_iteration_": [541, 542], "validation_score_": [541, 542], "is_categorical_": [541, 542], "n_trees_per_iter": 541, "longerr": 543, "max_samples_": 543, "fei": [543, 968], "ting": [543, 968, 1012, 1013], "ming": [543, 968, 1008, 1012, 1013, 1014, 1018], "zhou": [543, 620, 874, 968, 1012], "zhi": [543, 968], "hua": [543, 968], "icdm": [543, 968], "eighth": [543, 968], "tkdd": 543, "n_left": 543, "32987858": 545, "n_out": 546, "one_hot_encoder_": 546, "extratreeclassifi": [546, 889, 963, 1008, 1013, 1014, 1015, 1017, 1018, 1019], "moosmann": 546, "trigg": 546, "juri": 546, "random_tre": 546, "x_sparse_embed": 546, "randomtreesembedding_": 546, "final_estimator_": [547, 548], "named_estimators_": [547, 548, 549, 550, 1012, 1014], "named_estim": [547, 548, 549, 550], "parameter_nam": [547, 548, 549, 550], "new_valu": [547, 548, 549, 550], "linearsvr": [548, 884, 1008, 1010, 1015], "flatten_transform": [549, 1011], "le_": 549, "eclf1": 549, "array_equ": [549, 1011], "eclf2": 549, "eclf3": 549, "maj": 549, "probabilities_or_label": 549, "n_regressor": 550, "r1": 550, "r3": 550, "er": 550, "with_traceback": [551, 552, 553, 554, 555, 556, 557, 558], "__traceback__": [551, 552, 553, 554, 555, 556, 557, 558], "current_sklearn_vers": 556, "repr": [557, 1015, 1016, 1018], "linter": 559, "spam": [562, 690, 721, 814, 962, 964, 986], "feature_names_": 562, "xa": 562, "dict_typ": 562, "conform": [562, 609, 807, 808, 962, 982, 983, 1011, 1017], "1048576": [563, 570], "non_neg": [563, 1011], "eleph": 563, "bird": [563, 699, 734, 962], "patch_height": [564, 565, 568], "patch_width": [564, 565, 568], "pe": 564, "pe_fit": 564, "pe_tran": 564, "545706": 564, "image_height": [564, 565, 568], "image_width": [564, 565, 568], "n_channel": [564, 565, 568], "n_patch": [564, 565, 568], "272214": 565, "243": 565, "n_z": 566, "return_a": [566, 567, 1007], "_coo": [566, 567], "image_s": 568, "strip_acc": [569, 570, 572], "nfkd": [569, 570, 572, 1014], "unicodedata": [569, 570, 572], "regexp": [569, 570, 572], "min_n": [569, 570, 572, 1004], "max_n": [569, 570, 572, 1004], "fixed_vocabulary_": [569, 572], "stop_words_": [569, 572], "delattr": [569, 572, 1016], "vectorizer2": 569, "raw_docu": [569, 572], "get_stop_word": [569, 570, 572], "x_inv": [569, 572], "con": 570, "yates2011": 571, "baeza": [571, 710, 1007], "yate": [571, 710], "ribeiro": [571, 710, 1017], "neto": [571, 710], "addison": [571, 710], "weslei": [571, 710], "mrs2008": 571, "118": 571, "tfid": 571, "22314355": 571, "51082562": 571, "91629073": 571, "_check_stop_list": 572, "pvalu": [573, 576, 577, 579, 580, 581, 804], "k_best": [573, 875, 975], "fdr": 573, "fwe": 573, "iff": [573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 850], "retent": [573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584], "n_selected_featur": [573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584], "n_original_featur": [573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584], "attrgett": [574, 578], "barnhil": [574, 575], "vapnik": [574, 575], "389": [574, 575, 997], "422": [574, 575, 706, 736, 962], "n_subsets_of_featur": 575, "narrai": 575, "benjamini": [576, 1010, 1011], "hochberg": [576, 1010, 1011], "false_discovery_r": 576, "norm_ord": [578, 1011], "threshold_": [578, 1011], "3252302": 578, "83462377": 578, "49750423": 578, "55245": 578, "half_cal": 578, "half_selector": 578, "unspecifi": [580, 581, 779, 959], "_get_support_mask": 582, "n_features_to_select_": 583, "variances_": 584, "weed": 585, "p_valu": [585, 586, 587], "f_statist": [586, 587], "force_finit": [587, 590, 708, 765, 962, 1018], "pearson": [587, 590, 1017], "discrete_featur": [588, 589], "essenc": [588, 589, 723, 959, 962], "hardli": [588, 589], "kraskov": [588, 589], "stogbauer": [588, 589], "grassberg": [588, 589], "phy": [588, 589], "kozachenko": [588, 589], "leonenko": [588, 589], "probl": [588, 589], "peredachi": [588, 589], "correlation_coeffici": 590, "fmin_l_bfgs_b": [591, 592], "max_iter_predict": 591, "copy_x_train": [591, 592], "one_vs_rest": [591, 963], "compoundkernel": [591, 1018], "obj_func": [591, 592], "initial_theta": [591, 592], "theta_opt": [591, 592], "func_min": [591, 592], "_posterior_mod": 591, "log_marginal_likelihood_value_": [591, 592], "9866": [591, 600, 603], "83548752": 591, "03228706": 591, "13222543": 591, "79064206": 591, "06525643": 591, "14410151": 591, "clone_kernel": [591, 592, 1014], "n_kernel_param": [591, 592], "log_likelihood_gradi": [591, 592], "x_train_": 592, "y_train_": 592, "3680": [592, 595, 606], "592": [592, 595, 606, 969], "y_cov": 592, "n_samples_x": [592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 680, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 754, 755, 756, 757, 758, 759, 760, 761], "requires_vector_input": [593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606], "51292546": 593, "09861229": [593, 972], "n_samples_i": [593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 680, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 754, 755, 756, 757, 758, 759, 760, 761], "n_kernel": 593, "k_gradient": [593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606], "k_diag": [593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606], "hyperparameter_constant_valu": 594, "3696": 594, "606": [594, 809, 963], "hyperparameter_sigma_0": 595, "edward": [595, 600, 603, 1007, 1012, 1013, 1014, 1015, 1019], "hyperparameter_length_scal": [596, 600, 603, 604], "hyperparameter_period": 596, "0144": 596, "457": 596, "3894": 596, "3467": 596, "419": 597, "559": 597, "namedtupl": 598, "maxsiz": 598, "mat\u00e9rn": 600, "appr": 600, "8513": 600, "0368": 600, "1117": 600, "8086": [600, 1011], "0693": 600, "1220": 600, "gamma_bound": 601, "pairwise_kernels_kwarg": 601, "additive_chi2": [601, 619, 745, 754], "pairwise_kernel_funct": [601, 624, 754], "hyperparameter_gamma": 601, "9733": [601, 604], "8880": 601, "05663": 601, "05532": 601, "8676": [601, 1011], "07073": 601, "06165": 601, "__mul__": 602, "8354": [603, 1011], "03228": 603, "1322": 603, "7906": [603, 630], "0652": 603, "1441": 603, "hyperparameter_alpha": 604, "8881": 604, "0566": 604, "05518": 604, "8678": 604, "0707": 604, "0614": 604, "hyperparameter_noise_level": 606, "initial_strategi": 608, "imputation_ord": [608, 1014], "skip_complet": 608, "min_valu": [608, 1015, 1016], "max_valu": [608, 1015, 1016], "keep_empty_featur": [608, 609, 611, 952, 1019], "nullabl": [608, 609, 610, 611, 1015, 1020], "na": [608, 609, 610, 611, 749, 758, 896, 898, 899, 1014, 1015, 1018, 1019], "known_val": 608, "Nearness": 608, "arab": 608, "broadcast": 608, "missingind": [608, 609, 611, 952, 1012, 1013, 1014, 1018, 1020], "initial_imputer_": 608, "imputation_sequence_": 608, "feat_idx": 608, "neighbor_feat_idx": 608, "n_features_with_missing_": 608, "indicator_": [608, 609, 611], "knp": 608, "stef": [608, 952], "buuren": [608, 952], "karin": [608, 952], "groothui": [608, 952], "oudshoorn": [608, 952], "buck": 608, "1960": [608, 697], "306": 608, "imp_mean": [608, 611], "9584": [608, 1011], "nan_euclidean": [609, 742, 758], "_pairwise_cal": 609, "kwd": [609, 751, 754, 758, 761, 770, 771], "olga": [609, 952], "troyanskaya": [609, 952], "cantor": [609, 952], "gavin": [609, 952], "sherlock": [609, 952], "pat": [609, 952], "botstein": [609, 952], "russ": [609, 952], "altman": [609, 952], "bioinformat": [609, 952], "520": [609, 828, 952, 965], "n_output_featur": 609, "error_on_new": 610, "features_": [610, 952], "n_missing_featur": 610, "x2_tr": 610, "n_features_with_miss": 610, "statistics_": 611, "n_features_missing_ind": 611, "x_imput": 611, "n_features_out": 611, "quadcontourset": 612, "quadmesh": 612, "feature_1": [612, 891], "feature_2": 612, "nicer": 612, "overwrit": [612, 988, 1004, 1015], "pd_result": 613, "target_idx": 613, "decil": [613, 1015], "pdp_lim": 613, "is_categor": 613, "nonexist": 613, "deciles_vlines_": 613, "vlines_": 613, "deciles_hlines_": 613, "bars_": 613, "heatmaps_": 613, "ice_lines_kw": 613, "pd_line_kw": 613, "contour_kw": 613, "disp1": 613, "disp2": 613, "pdp_line_kw": 613, "bar_kw": 613, "heatmap_kw": 613, "seq": 614, "n_values_feature_j": 614, "bre": [615, 978], "4666": 615, "2211": 615, "x_min_": 616, "x_max_": 616, "n_threshold": [616, 707, 762, 769], "stepwis": [616, 635, 636, 637, 663, 664, 958], "increasing_": 616, "isotonic_regress": [616, 1017], "secondari": [616, 1008], "leeuw": 616, "1977": 616, "nilotp": [616, 618], "chakravarti": [616, 618], "308": 616, "pava": 616, "hornik": 616, "mair": 616, "kruskal": [616, 671, 675, 959], "psychometrica": 616, "iso_reg": 616, "8628": 616, "7256": 616, "isotonicregression0": 616, "increasing_bool": 617, "fisher_transform": 617, "sample_step": 619, "sample_interv": 619, "sample_interval_": [619, 1020], "skewedchi2sampl": [619, 620, 621, 622, 954, 1011, 1018, 1019], "chi2_kernel": [619, 623, 738, 745, 960, 1005], "additive_chi2_kernel": [619, 739, 745, 954], "vedaldi": [619, 954], "zisserman": [619, 954, 962], "chi2sampl": 619, "9499": 619, "component_indices_": [620, 1017], "normalization_": 620, "additivechi2sampl": [620, 621, 622, 623, 738, 739, 954, 1018, 1020], "kernel_metr": [620, 621, 622, 623], "seeger": 620, "mahdavi": 620, "jin": [620, 1015, 1016], "data_transform": 620, "9987": 620, "fft": 621, "indexhash": 621, "bithash": 621, "indexhash_": 621, "bithash_": 621, "kitchen": [622, 954], "sink": [622, 954], "random_offset_": [622, 623], "random_weights_": [622, 623], "rahimi": [622, 954], "benjamin": [622, 1006, 1007, 1015, 1016, 1017, 1018, 1019], "recht": [622, 954], "berkelei": [622, 886, 887], "brecht": 622, "rah": 622, "rbf_featur": [622, 954], "skewed": [623, 1011], "secant": 623, "hyperbol": [623, 836, 837, 960, 966], "fuxin": 623, "catalin": 623, "ionescu": [623, 954, 1014], "cristian": 623, "sminchisescu": [623, 954], "chi2_featur": 623, "2c": [624, 633, 653, 654, 655, 656, 668, 954], "murphi": [624, 955], "alpha_1": [625, 626, 958], "alpha_2": [625, 626, 958], "lambda_1": [625, 626, 958], "lambda_2": [625, 626, 958], "threshold_lambda": 625, "x_offset_": [625, 626, 1016], "x_scale_": [625, 626, 1016], "mackai": [625, 626, 958], "ashra": 625, "salakhutdinov": [625, 828, 965], "lectur": [625, 954, 981], "utstat": 625, "rsalakhu": 625, "sta4273": 625, "lecture2": 625, "computed_scor": 626, "appendix": [626, 657, 958, 972], "wipf": [626, 958], "nagarajan": [626, 958], "2_2": [627, 628, 633, 634, 635, 636, 637, 641, 642, 643, 644, 653, 662, 663, 664, 665], "glmnet": [627, 628, 1004], "sparse_coef_": [627, 633, 641, 643, 1004], "dual_gap_": [627, 628, 633, 634, 641, 642, 643, 644, 1017], "max_j": [627, 633], "w_j": [627, 633, 962, 976], "ext": 627, "83816048": 627, "55968825": 627, "451": 627, "coef_init": [627, 628, 633, 634, 641, 642, 643, 644, 647, 649, 657, 658, 659, 662, 665], "mono": [627, 628, 633, 634, 641, 642, 643, 644, 662, 665], "_21": [627, 628, 633, 634, 641, 642, 643, 644, 662, 665], "sum_j": [627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 958, 962, 967], "alpha_min": [627, 628, 631, 633, 634, 635, 637, 641, 642, 643, 644, 662, 663, 664, 665], "alpha_max": [627, 628, 633, 634, 641, 642, 643, 644, 662, 665], "ndim": [627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 898, 899], "multitaskelasticnet": [627, 628, 633, 642, 643, 644, 662, 958, 1004, 1011, 1012, 1015, 1017], "multitaskelasticnetcv": [627, 628, 633, 641, 643, 644, 662, 958, 1007, 1014, 1015, 1017], "l1_ratio_": [628, 640, 642], "n_l1_ratio": [628, 640, 642, 1007], "199": [628, 731, 977], "398": [628, 997], "unpen": [629, 650, 661, 958], "raphson": [629, 650, 661], "g_j": [629, 650, 661], "896": 629, "795": 629, "pg_i": 630, "scale_": [630, 848, 849, 857, 859, 868, 972, 1009], "outliers_": 630, "elvezio": [630, 958], "ronchetti": [630, 958], "concomit": [630, 958], "owen": [630, 1013, 1014], "hybrid": [630, 982], "statweb": [630, 663, 664], "hhu": [630, 1013], "284": 630, "806": 630, "7200": 630, "4923": 630, "1698": 630, "0106": 630, "9221": 630, "0226": 630, "fit_path": [631, 635, 636, 637, 663, 664], "jitter": [631, 635, 1015], "coef_path_": [631, 632, 635, 636, 958], "active_": [631, 632, 635, 636], "larscv": [631, 646, 663, 664, 1011, 1017], "1111": [631, 637], "max_n_alpha": [632, 636], "n_cv_alpha": [632, 636], "cv_alpha": [632, 636], "lassolar": [632, 633, 634, 636, 637, 644, 645, 646, 663, 664, 665, 958, 995, 1004, 1005, 1007, 1011, 1014, 1015, 1017], "9996": 632, "2961": 632, "3996": 632, "2_f": 633, "_11": 633, "4951": 634, "2_fro": [634, 643, 644, 665], "coef_path": [634, 644, 665], "46874778": [634, 644, 665], "2159048": [634, 644, 665], "4425765": [634, 644, 665], "23689075": [634, 644, 665], "coef_path_lar": [634, 644, 665], "coef_path_continu": [634, 644, 665], "interp1d": [634, 644, 665], "46915237": [634, 644, 665], "23668876": [634, 644, 665], "congruenc": [635, 636, 637, 663, 664], "fragil": 636, "3972": 636, "2222": 637, "rank_": 638, "singular_": 638, "maxent": [639, 640, 958], "primal": [639, 640, 658, 878, 879, 976, 977], "synthetic_feature_weight": [639, 640], "ciyou": 639, "byrd": 639, "jorg": [639, 1007, 1016, 1018], "noced": 639, "lui": [639, 1005, 1007, 1008, 1012], "iem": 639, "lbfgsb": 639, "schmidt": [639, 958, 1007], "le": [639, 847, 953, 958, 965, 973, 975, 1012, 1016, 1017], "roux": [639, 958, 975], "00860051": 639, "defazio": [639, 958], "lacost": [639, 958], "hsiang": [639, 1008], "fu": [639, 1008], "fang": [639, 1011, 1012], "lan": [639, 1019], "chih": [639, 1009], "jen": [639, 1012], "maxent_du": 639, "cs_": 640, "l1_ratios_": 640, "coefs_paths_": [640, 1014], "coefs_path": 640, "n_l1_ratios_": 640, "w_ij": 641, "eps_": [641, 643], "45663524": 641, "45612256": 641, "0872422": 641, "fro_2": [642, 644], "multitasklassocv": [642, 1007, 1014, 1015, 1017], "52875032": 642, "46958558": 642, "00166409": 642, "60809415": 643, "94592424": 643, "41888636": 643, "87382323": 643, "9994": 644, "5713": 644, "7971": 644, "9015": [644, 1012], "n_nonzero_coefs_": [645, 646], "orthogonal_mp_gram": [645, 646, 666, 1018], "mallat": [645, 666, 667, 958], "3397": [645, 666, 667], "3415": [645, 666, 667], "papier": [645, 666, 667], "mallatpursuit93": [645, 666, 667], "rubinstein": [645, 666, 667], "zibulevski": [645, 666, 667], "elad": [645, 666, 667], "technion": [645, 666, 667, 958], "ronrubin": [645, 666, 667, 958], "ksvd": [645, 666, 667, 958], "9991": [645, 646, 1012], "3854": [645, 646], "previous_loss": [647, 648, 649, 658], "pa": [647, 648, 875, 958, 962, 975], "preset": [647, 649, 657, 966], "t_": [647, 648, 649, 657, 658, 659, 836, 837, 976], "loss_function_": [647, 649, 657, 658], "volume7": [647, 648], "crammer06a": [647, 648], "crammer": [647, 648, 715, 958, 962, 977], "dekel": [647, 648, 958], "keshat": [647, 648, 958], "shalev": [647, 648, 958, 976], "shwartz": [647, 648, 958, 976], "singer": [647, 648, 715, 958, 962, 976, 977], "26642044": 647, "45070924": 647, "67251877": 647, "64185414": 647, "84127814": 647, "intercept_init": [647, 649, 657, 659], "y_all": [647, 649, 657, 807, 808, 836], "epsilon_insensit": [648, 657, 659, 879, 958, 976], "squared_epsilon_insensit": [648, 657, 659, 879, 958, 1010], "48736655": 648, "18818427": 648, "59122734": 648, "94731329": 648, "02306214": 648, "eta0": [649, 657, 658, 659, 976], "therein": 649, "939": [649, 992], "990": [650, 962], "088": [650, 970], "solver_opt": 651, "ipm": 651, "linprog": [651, 958], "is_data_valid": [652, 958], "is_model_valid": [652, 958], "max_trial": [652, 958], "max_skip": 652, "stop_n_inli": [652, 958], "stop_scor": [652, 958], "stop_prob": 652, "mad": [652, 1010], "costlier": 652, "n_trials_": 652, "n_skips_no_inliers_": 652, "n_skips_invalid_data_": 652, "n_skips_invalid_model_": 652, "sri": [652, 958, 1011, 1012], "bmva": 652, "bmvc": [652, 958], "paper355": 652, "9885": 652, "9417": 652, "15000": [653, 668, 836, 837], "gcv_mode": [654, 1006], "store_cv_valu": [654, 656, 1012, 1015], "alpha_per_target": [654, 1016], "cv_values_": [654, 656], "ridgeclassifiercv": [654, 655, 768, 962, 963, 1012, 1014, 1015, 1017, 1018], "5166": 654, "gcv": [654, 656], "9595": 655, "9630": 656, "power_t": [657, 658, 659, 836, 837, 976], "best_loss": [657, 659], "leon": [657, 658, 659, 1004], "bottou": [657, 658, 659, 966, 976], "pow": [657, 658, 659, 836, 837], "dl": 657, "775047": 657, "775151": 657, "justif": 657, "volume2": 657, "zhang02c": 657, "offset_init": 658, "unshifft": 658, "n_subsampl": [660, 904], "breakdown_": 660, "n_subpopulation_": 660, "xin": [660, 958, 1012], "dang": [660, 958], "hanxiang": [660, 958], "peng": [660, 958, 1010, 1011, 1012, 1014, 1016], "xueqin": [660, 958], "hepe": [660, 958], "olemiss": 660, "xdang": 660, "mtse": 660, "9884": 660, "5871": 660, "coeff": 661, "copy_gram": [663, 664, 667], "return_path": [663, 664, 666, 667], "lars_path_gram": [663, 958, 1013], "tib": [663, 664], "xgamma": 666, "norms_squar": 667, "copy_xi": 667, "return_intercept": [668, 1013], "linearoper": 668, "_preprocess_data": 668, "path_method": [669, 959], "neighbors_algorithm": [669, 670], "arnoldi": [669, 670, 674], "fw": 669, "warshal": [669, 959], "kernel_pca_": 669, "nbrs_": [669, 670], "dist_matrix_": 669, "tenenbaum": [669, 959], "reconstruction_error": 669, "frobenius_norm": 669, "d_fit": 669, "x_fit": 669, "n_queri": [669, 821, 822, 823, 825, 827, 829, 830, 831], "hessian_tol": [670, 674], "modified_tol": [670, 674], "reconstruction_error_": 670, "rowei": [670, 674, 828, 959, 965], "saul": [670, 674, 959, 1011, 1012, 1014], "2323": [670, 674, 959], "donoho": [670, 674, 959], "grime": [670, 674, 959], "natl": [670, 674, 959], "acad": [670, 674, 959], "5591": [670, 674, 959], "mlle": [670, 674, 959], "zha": [670, 674, 959], "shanghai": [670, 674, 959], "univ": [670, 674, 959], "406": [670, 674, 959], "immers": [671, 675], "nonmetr": [671, 675], "smacof": [671, 1019], "stress": [671, 675, 959, 1019], "stress_": 671, "dispar": [671, 675, 959], "dissimilarity_matrix_": 671, "psychometrika": [671, 675, 959], "1964": [671, 675, 855, 866, 959], "borg": [671, 675, 959], "groenen": [671, 675, 959], "affinity_matrix": 672, "n_neighbors_": [672, 825], "early_exagger": 673, "min_grad_norm": [673, 1010], "square_dist": [673, 1016], "der": [673, 677, 959, 1007, 1008, 1012], "maaten": [673, 677, 959], "bhtsne": [673, 1011], "opentsn": 673, "abort": 673, "pdist": [673, 680, 758, 761], "pairwise_distance_funct": [673, 677, 758, 761, 965], "barn": [673, 1009, 1011, 1014], "hut": [673, 1009, 1011, 1014], "nlogn": 673, "kl_divergence_": [673, 1011], "learning_rate_": [673, 837], "hinton": [673, 828, 835, 836, 837, 959, 965, 966, 967], "2579": 673, "2605": 673, "lvdmaaten": [673, 1011], "oct": [673, 749, 959, 965], "3221": [673, 959], "3245": [673, 959], "jmlr_2014": 673, "belkina": [673, 959], "ciccolella": [673, 959], "anno": [673, 959], "halpert": [673, 959], "spidlen": [673, 959], "snyder": [673, 959], "cappion": [673, 959], "kobak": [673, 1017], "beren": 673, "transcriptom": 673, "guttman": 675, "norm_laplacian": 676, "drop_first": 676, "nk": 677, "2n": [677, 954, 966], "3k": 677, "cosine_dist": [677, 742, 965, 1010], "jarkko": 677, "venna": 677, "samuel": [677, 986, 1007, 1008, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "kaski": 677, "icann": 677, "verlag": 677, "485": 677, "491": 677, "twelth": 677, "pmlr": 677, "391": 677, "im_": 678, "axesimag": 678, "text_": 678, "include_valu": 678, "values_format": [678, 1014], "im_kw": [678, 1018], "text_kw": [678, 1019], "get_metr": 680, "19615242": 680, "euclideandist": 680, "manhattandist": 680, "chebyshevdist": 680, "minkowskidist": [680, 1017], "wminkowski": [680, 826, 965, 1016, 1018], "wminkowskidist": 680, "seuclideandist": 680, "mahalanobisdist": 680, "haversinedist": 680, "arcsin": [680, 744], "hammingdist": 680, "n_unequ": 680, "n_tot": 680, "canberradist": 680, "braycurtisdist": 680, "abbrevi": 680, "ntt": 680, "ntf": 680, "nft": 680, "nff": 680, "nneq": 680, "jaccarddist": 680, "matchingdist": 680, "dicedist": 680, "kulsinskidist": [680, 1020], "rogerstanimotodist": 680, "russellraodist": 680, "sokalmichenerdist": 680, "sokalsneathdist": 680, "pyfunc": [680, 965], "pyfuncdist": 680, "dist_to_rdist": 680, "surrog": [680, 986], "cdist": [680, 1017], "rdist_to_dist": 680, "rdist": 680, "predictionrecalldisplai": [681, 962], "errors_lines_": 682, "with_error": 682, "scatter_": 682, "drop_intermedi": [683, 769], "balanced_accuracy_scor": [684, 767, 962, 1012], "imperfectli": [684, 714, 962], "label_tru": [685, 698, 717, 735, 737, 773], "upperlimit": 685, "nat": [685, 735, 737, 1018], "expected_ri": 686, "discord": 686, "hubert1985": 686, "1007": 686, "2fbf01908075": 686, "steinley2004": 686, "wk": 686, "rand_index": 686, "adjusted_rand_index": 686, "chacon": 686, "chac\u00f3n": 686, "rastrojo": 686, "balanced_accuraci": [689, 962, 1012], "brodersen": 689, "ong": 689, "stephan": [689, 1007, 1013, 1014, 1016], "buhmann": 689, "20th": 689, "3121": 689, "kelleh": [689, 962], "aoif": [689, 962], "arci": [689, 962], "y_true_categor": [690, 962], "037": 690, "calinski": [691, 1010], "harabasz": 691, "allow_non": 692, "thrown": [692, 1013, 1014], "tn": [693, 699, 962], "negative_class": 693, "zebra": 693, "output_dict": [694, 1012, 1016], "zero_divis": [694, 709, 710, 718, 763, 764, 767, 1014, 1016], "precision_recall_fscore_support": [694, 709, 710, 764, 767, 962, 1008, 1012, 1014], "multilabel_confusion_matrix": [694, 709, 710, 718, 764, 767, 962, 1013], "conting": [695, 696, 711, 735, 1010], "n_classes_tru": [695, 735], "n_classes_pr": [695, 735], "cohen": [697, 1012], "p_o": 697, "p_e": 697, "artstein": 697, "poesio": 697, "linguist": [697, 875, 975], "555": 697, "596": 697, "label_pr": [698, 716, 717, 735, 737, 773], "ant": [699, 734, 962], "a_row": 700, "a_column": 700, "b_row": 700, "b_column": 700, "tsoumaka": [701, 714, 720, 962], "kataki": [701, 714, 720, 962], "vlahava": [701, 720, 962], "handbook": [701, 720, 962], "667": [701, 720, 962], "685": [701, 720, 962], "raw_valu": [702, 703, 708, 725, 726, 728, 730, 731, 733, 765, 962, 1012, 1015], "wainwright": [702, 703, 704], "su": [702, 703, 704], "statlearnspars": [702, 703, 704], "764": [702, 962], "8125": 702, "57142857": 702, "d2": 703, "d2_absolute_error_scor": [703, 962, 1018], "koenker": [703, 958], "roger": [703, 1011, 1012, 1016], "jos\u00e9": [703, 1007, 1017], "630": 704, "bouldin": 705, "farther": 705, "log_bas": 706, "ignore_ti": [706, 736], "ndcg": [706, 736, 962, 1011], "ndcg_score": [706, 962, 1011, 1014, 1019], "sharper": 706, "discounted_cumulative_gain": 706, "dcg": [706, 736, 962, 1011], "jarvelin": [706, 736, 962], "kekalainen": [706, 736, 962], "colt": [706, 736, 962], "mcsherri": [706, 736, 962], "najork": [706, 736, 962], "european": [706, 736, 962], "421": [706, 736, 962], "groud": [706, 736], "true_relev": [706, 736], "propabl": 707, "imperfect": [708, 765, 962, 1006], "variance_weight": [708, 765, 962], "n_unique_label": [709, 710, 718, 763, 764, 767, 926], "fbeta_scor": [709, 722, 763, 962, 1006, 1007, 1008, 1009, 1014], "undefinedmetricwarn": [709, 710, 763, 764, 767, 1013], "66666667": [709, 762, 829, 972], "lend": [710, 986], "fowlk": [711, 1010], "mallow": [711, 1010], "get_scorer_nam": [712, 962, 1018], "forgiv": 714, "upperbound": 714, "grigorio": 714, "ioanni": 714, "wareh": 714, "septemb": [714, 962, 1004, 1007, 1010, 1012, 1017], "pred_decis": [715, 962, 1017], "disagre": [715, 969], "kobi": 715, "yoram": 715, "265": [715, 814, 818, 964], "AND": 715, "denero": 715, "gluster": 716, "v_measur": [716, 773], "6666": [718, 962, 1010], "5833": [718, 962], "lrap": [719, 962], "416": [719, 962], "209": [721, 855], "21616": 721, "needs_proba": [722, 1013], "needs_threshold": [722, 962], "ftwo_scor": [722, 962], "mcc": [723, 962, 1018], "baldi": 723, "brunak": 723, "chauvin": 723, "andersen": [723, 1018], "nielsen": [723, 1012], "gorodkin": 723, "jurman": 723, "riccadonna": 723, "furlanello": 723, "cen": 723, "mape": [726, 962], "3273": 726, "5515": 726, "6198": 726, "112589990684262": 726, "0568": 727, "4260": [729, 732], "612": 730, "822": 730, "41666667": 730, "825": 730, "msle": [731, 962], "rmsle": 731, "00462428": 731, "08377444": 731, "samplewis": [734, 962], "mcm": [734, 962], "mcm_": 734, "multi_confus": 734, "normalized_discounted_cumulative_gain": 736, "dcg_score": [736, 962, 1011, 1014], "kernel_matrix": [738, 739, 746, 756], "marszalek": [738, 739, 960], "lazebnik": [738, 739, 960], "schmid": [738, 739, 960], "ouvert": [738, 739, 960], "00171412": [738, 739, 960], "cosine_similar": [740, 745, 960, 1009], "dense_output": [741, 747, 871, 916, 1012], "linear_kernel": [741, 745, 960, 1012], "haversine_dist": [742, 1013], "y_norm_squar": 743, "x_norm_squar": [743, 1009], "catastroph": [743, 983], "paired_dist": [743, 749, 758, 1008], "41421356": [743, 749, 965], "ezeiza": 744, "airport": 744, "bueno": 744, "argentina": 744, "gaull": 744, "franc": 744, "bsa": 744, "83333": 744, "5166646": 744, "0083899664": 744, "53844117956": 744, "bsas_in_radian": 744, "paris_in_radian": 744, "6371000": 744, "kilomet": 744, "11099": 744, "54035582": 744, "polynomial_kernel": [745, 960], "rbf_kernel": [745, 960, 1008], "laplacian_kernel": [745, 960, 1009], "sigmoid_kernel": [745, 960], "kernal_metr": 745, "sum_over_featur": [748, 1004, 1019], "componentwis": 748, "sq": 749, "dixon": [749, 1014, 1015], "cybernet": 749, "ieeexplor": 749, "4310090": 749, "filter_param": 754, "jth": [754, 758], "tanh": [757, 836, 837, 960, 977], "force_all_finit": [758, 896, 898, 899, 1015, 1018], "distance_metr": [758, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833], "metric_kwarg": [759, 760], "reduce_func": [761, 1015], "d_chunk": 761, "sought": 761, "neigh": [761, 821, 822, 823, 825, 827, 829, 830, 831], "gen": 761, "probas_pr": 762, "warn_for": 763, "shantanu": 763, "godbol": 763, "sunita": 763, "sarawagi": 763, "pig": 763, "948": [765, 962], "max_fpr": [768, 962, 1012], "provost": [768, 962], "ceder": [768, 962], "stern": [768, 962], "fawcett": [768, 769, 962], "generalis": [768, 962, 983], "multioutputclassifi": [768, 808, 810, 812, 962, 1011, 1013, 1014, 1015, 1016], "n_samples_a": [770, 771], "mean_prior": 775, "degrees_of_freedom_prior": 775, "verbose_interv": [775, 776], "wishart": 775, "emipr": 775, "precisions_": [775, 776], "precisions_cholesky_": [775, 776, 1018], "converged_": [775, 776], "lower_bound_": [775, 776, 1012], "weight_concentration_prior_": 775, "weight_concentration_": 775, "mean_precision_prior_": 775, "mean_precision_": 775, "mean_prior_": 775, "degrees_of_freedom_prior_": 775, "degrees_of_freedom_": 775, "covariance_prior_": 775, "hagai": 775, "attia": 775, "bgm": 775, "n_dimens": [775, 776], "log_prob": [775, 776], "weights_init": 776, "precisions_init": [776, 1018], "gm": 776, "pre_dispatch": [777, 783, 791, 800, 801, 802, 803, 806, 928, 1007], "error_scor": [777, 780, 781, 783, 791, 801, 802, 803, 806, 951, 1008, 1012, 1016, 1019], "explos": [777, 791, 800, 801, 802], "lightweight": [777, 791, 800, 801, 802, 982], "fitfailedwarn": [777, 780, 781, 783, 791, 801, 802, 803, 806], "param_kernel": [777, 791], "param_degre": 777, "split0_test_scor": [777, 791, 1010], "rank_t": 777, "split1_test_scor": [777, 791], "split0_train_scor": [777, 791, 1010], "split1_train_scor": [777, 791], "mean_train_scor": [777, 791, 1010], "std_train_scor": [777, 791, 1010], "split0_test_precis": [777, 791], "mean_train_precis": [777, 791], "best_estim": [777, 780, 781, 791], "scorer_": [777, 780, 781, 791], "n_splits_": [777, 780, 781, 791], "refit_time_": [777, 780, 781, 791, 1012], "multimetric_": [777, 780, 781, 791], "parametergrid": [777, 1006, 1012], "split2_test_scor": 777, "num_sampl": [777, 791, 1019], "stratif": [778, 779, 785, 786, 795, 796, 797, 933, 1013], "group_kfold": 778, "aggressive_elimin": [780, 781, 951], "r0": [780, 781], "replai": [780, 781], "n_remaining_candidates_": [780, 781], "n_candid": [780, 781, 951], "max_resources_": [780, 781], "min_resources_": [780, 781], "n_required_iterations_": [780, 781], "n_possible_iterations_": [780, 781], "exceed": [780, 781, 1010], "n_unique_tick": [783, 803], "n_tick": [783, 803, 806], "errorbar_": 783, "errorbarcontain": 783, "line2d": 783, "fill_between_": 783, "polycollect": 783, "exploit_incremental_learn": [783, 803], "log_scal": 783, "fill_between_kw": 783, "errorbar_kw": 783, "model_selectionkfold": 783, "predispatch": [783, 803, 806], "negat": [783, 962], "neg_": [783, 1010], "combinator": 787, "lpo": 787, "param_list": 789, "rounded_list": 789, "89856": 789, "923223": 789, "878964": 789, "038159": 789, "parametersampl": [791, 1006, 1012, 1016], "2652124": 792, "rskf": 793, "36851234": 793, "sizeabl": [794, 797], "sad": [795, 796], "sss": 797, "kth": 798, "checked_cv": 799, "3315057": [801, 802], "08022103": [801, 802], "03531816": [801, 802], "test_r2": 802, "test_auc": 802, "train_r2": 802, "train_auc": 802, "3635": 802, "3573": 802, "6114": 802, "28009951": 802, "3908844": 802, "22784907": 802, "train_sizes_ab": 803, "train_size_ab": 803, "cv_train_scor": 803, "cv_test_scor": 803, "permutation_scor": 804, "n_valu": [806, 1012], "pairwise_indices_": 807, "outputcodeclassifi": [807, 808, 1011, 1016, 1020], "label_binarizer_": 808, "multilabel_": [808, 1009], "onevsoneclassifi": [808, 809, 1005, 1007, 1008, 1010, 1011, 1013, 1016, 1018], "code_s": [809, 963], "code_book_": 809, "bakiri": [809, 963], "pict": [809, 963], "order_": [810, 813], "regressorchain": [810, 812, 1012, 1015, 1019], "jess": [810, 963, 1017], "pfahring": [810, 963], "geoff": [810, 963], "holm": [810, 963], "eib": [810, 963], "8387": 810, "9431": 810, "4576": 810, "8878": 810, "3684": 810, "2640": 810, "0321": 810, "9935": 810, "0625": 810, "y_decis": 810, "load_linnerud": [812, 1010, 1015], "force_alpha": [814, 815, 816, 818, 1019], "lidston": [814, 815, 816, 818, 964], "class_count_": [814, 815, 816, 817, 818], "class_log_prior_": [814, 815, 816, 818], "feature_count_": [814, 816, 818], "feature_log_prob_": [814, 815, 816, 818], "categoricalnb": [814, 816, 817, 818, 964, 1014, 1015, 1016, 1017, 1019], "renni": [814, 816, 964, 1012], "schuetz": [814, 818], "htmledit": [814, 818, 960], "mccallum": [814, 964], "nigam": [814, 964], "metsi": [814, 964], "androutsopoulo": [814, 964], "palioura": [814, 964], "cea": [814, 964], "predict_joint_log_proba": [814, 815, 816, 817, 818, 1019], "min_categori": [815, 1016], "n_categori": [815, 853, 972], "category_count_": 815, "n_categories_": 815, "mirror": [816, 951], "mahout": 816, "weka": 816, "feature_all_": 816, "shih": [816, 964], "teevan": [816, 964], "karger": [816, 964], "616": [816, 964, 972], "623": [816, 964], "jrenni": 816, "icml03": 816, "var_smooth": [817, 1012], "stan": 817, "levequ": [817, 859], "cstr": 817, "epsilon_": 817, "theta_": [817, 964], "clf_pf": 817, "valid_metr": [819, 820, 965], "random_sampl": [819, 820, 824], "19662693": [819, 820], "29473397": [819, 820], "tree_copi": [819, 820], "query_radiu": [819, 820], "count_onli": [819, 820], "kernel_dens": [819, 820], "94114649": [819, 820], "83281226": [819, 820], "2071716": [819, 820], "two_point_correl": [819, 820], "580": [819, 820], "get_arrai": [819, 820], "get_n_cal": [819, 820], "n_call": [819, 820], "get_tree_stat": [819, 820], "tree_stat": [819, 820], "breadth_first": [819, 820, 824], "return_log": [819, 820], "k_true": [819, 820], "k_ret": [819, 820], "breadth": [819, 820, 824, 986, 1006], "dualtre": [819, 820], "sort_result": [819, 820, 827, 829, 830, 831, 1016], "radii": [819, 820], "reset_n_cal": [819, 820], "effective_metric_": [821, 822, 823, 825, 827, 829, 830, 831, 965], "callbl": 821, "effective_metric_params_": [821, 822, 823, 825, 827, 829, 830, 831], "outputs_2d_": [821, 829, 1014], "nearest_neighbor_algorithm": [821, 829, 830], "333": 821, "n_index": [821, 822, 823, 825, 827, 829, 830], "neigh_dist": [821, 822, 823, 825, 827, 829, 830, 831], "neigh_ind": [821, 822, 823, 825, 827, 829, 830, 831], "nearest_neighbors_algorithm": [822, 827], "nearer": [823, 831, 965], "x_dist_graph": 823, "silverman": [824, 1019], "binarytre": [824, 1008, 1012, 1016], "bandwidth_": 824, "log_dens": 824, "52955942": 824, "51462041": 824, "60244657": 824, "logprob": 824, "negative_outlier_factor": 825, "9821": 825, "0370": 825, "3697": 825, "shifted_opposite_lof_scor": 825, "opposite_lof_scor": 825, "narasimhan": 826, "chu": 826, "shrunken": [826, 1004], "6567": 826, "6572": 826, "nbr": [827, 965], "neighborsclassifi": [827, 829, 830, 831, 1004], "n_features_a": 828, "n_features_b": 828, "goldberg": [828, 965], "neighbourhood": [828, 965], "ncanip": 828, "neighbourhood_components_analysi": 828, "961904": 828, "outlier_label": [829, 1014], "outlier_label_": 829, "33333333": [829, 972], "x_cluster": 831, "warn_when_not_sort": 834, "efficiencywarn": [834, 1019], "sml": [835, 967], "pcd": [835, 967], "sweep": 835, "gibb": [835, 967, 982], "intercept_hidden_": 835, "intercept_visible_": 835, "h_samples_": 835, "osindero": [835, 967], "teh": [835, 967], "1527": 835, "1554": 835, "absp": 835, "fastnc": 835, "tieleman": [835, 967], "v_new": 835, "pseudo_likelihood": 835, "relu": [836, 837], "beta_1": [836, 837], "beta_2": [836, 837], "max_fun": [836, 837, 1014], "n_layer": [836, 837], "neuron": [836, 837, 960, 966], "tan": [836, 837, 966, 1011], "rectifi": [836, 837], "kingma": [836, 837, 966], "diederik": [836, 837, 966, 1019], "jimmi": [836, 837, 966, 1010, 1012], "gradual": [836, 837, 976], "effective_learning_r": [836, 837], "best_loss_": [836, 837, 1019], "ot": 836, "best_validation_score_": [836, 837, 1019], "validation_scores_": [836, 837, 1019], "intercepts_": [836, 837, 966], "n_layers_": [836, 837], "out_activation_": [836, 837], "geoffrei": [836, 837, 966, 1015, 1016, 1017, 1018], "connectionist": [836, 837], "glorot": [836, 837], "xavier": [836, 837, 1012, 1013, 1014, 1016, 1017], "yoshua": [836, 837, 975], "feedforward": [836, 837], "kaim": [836, 837], "delv": [836, 837], "surpass": [836, 837], "imagenet": [836, 837], "log_y_prob": 836, "time_step": 837, "named_transform": [838, 1019], "transform_list": 838, "s__p": 839, "n_transformed_featur": 839, "predict_log_proba_param": 839, "y_log_proba": 839, "predict_proba_param": 839, "analyst": 842, "x_tr": [842, 848, 851, 852, 853, 857, 859, 861, 863, 864, 868, 869], "accept_spars": [843, 898, 899, 1011], "inv_kw_arg": 843, "pickleabl": [843, 1010], "6931": 843, "3862": 843, "onward": [844, 853, 1008], "n_bins_": 844, "int_": 844, "regener": 844, "xinv": 844, "tild": [845, 970, 972], "k_fit_rows_": 845, "k_fit_all_": 845, "1299": [845, 972], "1319": [845, 972], "n_samples1": 845, "n_samples2": 845, "k_new": 845, "neg_label": [846, 862], "y_type_": 846, "sparse_input_": 846, "tokyo": [847, 973], "amsterdam": [847, 973], "max_abs_": 848, "x_std": [849, 864, 972], "data_min_": [849, 1009], "data_max_": [849, 1009], "data_range_": [849, 1009], "unwieldi": 850, "fi": 850, "comedi": 850, "y_indic": 850, "yt": 850, "ands": 850, "feature_name_combin": [852, 1020], "categories_": [852, 853, 972, 1012, 1019], "unregular": [852, 874, 995, 1013], "intact": [852, 997], "infrequ": [852, 962, 1004, 1018], "infrequent_if_exist": [852, 972], "x_6": 852, "x_7": 852, "drop_idx_": [852, 1015], "drop_idx": 852, "gender_femal": 852, "gender_mal": 852, "group_1": 852, "group_2": 852, "group_3": 852, "drop_enc": [852, 972], "drop_binary_enc": 852, "custom_combin": 852, "custom_fnames_enc": 852, "x0_str_femal": 852, "x0_str_male": 852, "x1_int_1": 852, "x1_int_2": 852, "x1_int_3": 852, "oh": [852, 1014], "infrequent_sklearn": [852, 972], "n_encoded_featur": [852, 853], "bpo": 853, "43475": 853, "lenient": [853, 983], "min_degre": [854, 1017], "max_degre": [854, 1017], "powers_": 854, "n_output_features_": 854, "nystrom": [854, 1013, 1014], "featurewis": 855, "power_transform": [855, 867, 1012], "biometrika": [855, 866], "954": [855, 866], "959": [855, 866], "386": 855, "707": [855, 866], "ignore_implicit_zero": [856, 867], "landmark": [856, 867, 972], "n_quantiles_": 856, "quantiles_": [856, 972, 1014], "references_": 856, "robustscal": [856, 868, 952, 972, 1009, 1010, 1012, 1014, 1015, 1016, 1020], "with_cent": [857, 868], "with_scal": [857, 868], "unit_vari": [857, 868, 1016], "iqr": [857, 868], "interquartil": [857, 868], "quartil": 857, "75th": 857, "q_min": [857, 868], "q_max": [857, 868], "center_": 857, "robust_scal": [857, 867, 1012], "interquartile_rang": 857, "bspline": 858, "n_features_out_": 858, "with_std": [859, 869, 972, 1012], "n_samples_seen": 859, "5a": 859, "randal": [859, 1008, 1018], "247": 859, "ahead": 862, "return_norm": [865, 1011], "notimplementederror": [865, 1011], "compute_inverse_compon": [870, 871, 974], "inverse_components_": [870, 871, 974, 1018], "2759": [870, 871], "afor": [870, 871], "baserandomproject": [870, 871], "ping": [871, 974, 1010, 1011], "density_": 871, "gaussianrandomproject": [871, 974, 1005, 1018, 1020], "church": [871, 974], "kdd06_rp": 871, "cgi": 871, "uoa": 871, "gr": 871, "opta": 871, "0182": 871, "e2": [872, 958], "93lindenstrauss_lemma": 872, "sanjoi": [872, 974], "anupam": [872, 974, 1019], "gupta": [872, 974, 1011, 1012, 1015, 1016, 1017, 1018], "elementari": [872, 974], "663": [872, 970, 974], "11841": [872, 974], "1112658": [872, 974], "7894": [872, 974], "9868": [872, 974], "steadi": [873, 874], "baselabelpropag": [873, 1011], "xiaojin": 873, "zoubin": 873, "ghahramani": 873, "cmu": 873, "cald": 873, "carnegi": 873, "mellon": 873, "jerryzhu": 873, "label_prop_model": [873, 874], "clamp": [874, 975], "dengyong": 874, "bousquet": 874, "navin": 874, "lal": 874, "schoelkopf": 874, "termination_condition_": 875, "no_chang": 875, "all_label": 875, "33rd": [875, 975], "acl": [875, 975, 976], "stroudsburg": [875, 975], "crammer_sing": [878, 963, 977, 1004], "seldom": 878, "readonli": [878, 879, 1017, 1019, 1020], "raw_coef_": [878, 879], "smo": [878, 879], "526": 878, "1693": 878, "unsur": 879, "582": 879, "522": 879, "class_weight_": [880, 881, 882, 883, 884, 1019], "n_sv": [880, 881, 882, 883, 884, 977, 1014], "fit_status_": [880, 881, 882, 883, 884], "n_support_": [880, 881, 882, 883, 884, 977, 1014], "proba_": [880, 883, 1015], "probb_": [880, 883, 1015], "shape_fit_": [880, 881, 882, 883, 884], "n_dimensions_of_x": [880, 881, 882, 883, 884], "7798": 882, "0547": 882, "0556": 882, "0561": 882, "7332": 882, "unshift": 882, "impract": 883, "tube": [884, 977], "_tree": [886, 887, 888, 889, 1005, 1007], "decision_tree_learn": [886, 887, 978], "olshen": [886, 887, 978], "wadsworth": [886, 887, 978], "belmont": [886, 887, 978], "cutler": [886, 887], "cc_home": [886, 887], "htm": [886, 887], "ccp_path": [886, 887, 888, 889], "get_depth": [886, 887, 888, 889, 1013], "get_n_leav": [886, 887, 888, 889, 1013], "extra_tre": [888, 889], "8947": 888, "decision_tre": [890, 891, 892, 978], "out_fil": [890, 978], "leaves_parallel": 890, "special_charact": [890, 978], "fontnam": [890, 1017], "helvetica": [890, 892], "graphviz": [890, 978], "postscript": 890, "tpng": 890, "paint": [890, 892], "dot_data": [890, 978], "digraph": 890, "show_weight": 891, "feature_0": 891, "unrepresent": 893, "keyerror": [893, 1014], "popitem": 893, "lifo": 893, "input_nam": [897, 899, 925, 1018], "accept_large_spars": [898, 899, 1012], "ensure_2d": [898, 899], "allow_nd": [898, 899], "ensure_min_sampl": [898, 899], "ensure_min_featur": [898, 899], "y_numer": 898, "bsr": [898, 899, 1017], "x_convert": 898, "y_convert": 898, "array_convert": 899, "target_typ": [902, 925], "min_val": 902, "max_val": 902, "include_boundari": [902, 1018], "y_org": 903, "class_weight_vect": 903, "king": 903, "zen": 903, "sample_weight_vect": 904, "parenthes": 905, "type_filt": 907, "generate_onli": [909, 1014], "checks_gener": 909, "test_check_estim": 910, "check_estimators_fit_returns_self": 910, "array_lik": 913, "logdet": 913, "slogdet": 913, "6375861597263857": 913, "flip_sign": 915, "svd_lapack_driv": 915, "gesdd": 915, "p5": 915, "transposit": 915, "gesvd": 915, "conquer": 915, "unitari": 915, "vh": 915, "dot_product": 916, "deweight": 917, "min_batch_s": 918, "n_pack": [918, 919], "path_length": 920, "sliceabl": 921, "truthi": 922, "helloifeven": 922, "_x_is_even": 922, "say_hello": 922, "ducktyp": [923, 1008], "temp_fold": 928, "max_nbyt": 928, "1m": 928, "mmap_mod": 928, "dispatch_next": 928, "dispatch_one_batch": 928, "unprotect": 928, "prefetch": 928, "print_progress": 928, "inner_max_num_thread": 930, "backend_param": 930, "register_parallel_backend": [930, 1012], "pyiodin": 930, "dask": [930, 983, 1012], "workload": [930, 982], "register_rai": 930, "backend_nam": 930, "oversubscript": [930, 1018], "threadpool": 930, "effective_n_job": 930, "tracking_select": 931, "reservoir_sampl": 931, "reservoir": 931, "make_default": 932, "parallelbackendbas": 932, "resampled_arrai": 933, "3x2": [933, 936], "shuffled_arrai": 936, "last_mean": 937, "last_var": 937, "last_n": 937, "return_sum_weight": 943, "sum_weight": 943, "all_or_ani": [946, 1014], "is_fit": 946, "__sklearn_is_fitted__": [946, 1017, 1018], "eg": 946, "substitut": [946, 983, 1010], "raise_except": 948, "array_sym": 948, "is_paramet": 950, "enclos": 951, "set_stat": 951, "bergstra": [951, 1004, 1005], "tournament": 951, "dispos": [951, 997], "n_resources_i": 951, "n_resources_0": 951, "n_candidates_i": 951, "n_candidates_0": 951, "r_0": 951, "mutal": 951, "n_resourc": 951, "983667": 951, "951958": 951, "947958": 951, "961009": 951, "955989": 951, "jamieson": 951, "talwalkar": 951, "desalvo": 951, "rostamizadeh": 951, "hyperband": 951, "bandit": 951, "multimetr": [951, 1014, 1019], "calibrated_forest": 951, "select__k": 951, "model__estimator__max_depth": 951, "imp": 952, "sophist": [952, 964], "14338": 952, "13286": 952, "15611": 952, "amelia": 952, "scientist": [952, 986], "roderick": 952, "rubin": 952, "1986": [952, 978], "ol2001": 952, "mask_missing_values_onli": 952, "mask_al": 952, "rr2007": 954, "2x_iy_i": 954, "vz2010": 954, "vvz2010": 954, "prod_i": 954, "ls2010": 954, "c_0": [954, 960], "tensorsketch": 954, "pp2013": 954, "wikic": 954, "ccf2002": 954, "mercer": 954, "langl": [954, 962, 976, 977], "rangl": [954, 962, 976, 977], "y_j": [954, 962, 964, 977], "obviat": 954, "dagm": 954, "vempati": 954, "jawahar": 954, "charikar": 954, "farach": 954, "colton": 954, "m2012": 955, "mu_k": 956, "cst": 956, "omega_": 956, "k0": 956, "h_l": 956, "extrema": 956, "honei": 956, "stork": 956, "dilemma": 957, "valid_scor": 957, "w_0": 958, "w_p": 958, "x_p": 958, "34545455": 958, "13636": [958, 1013], "rifkin": 958, "lippert": 958, "2n_": 958, "softw": 958, "kim": [958, 1012, 1013, 1014, 1018], "koh": [958, 986], "lustig": 958, "boyd": 958, "gorinevski": 958, "c_p": 958, "cherkasski": 958, "yunqian": 958, "1691": 958, "1714": 958, "ell_2": 958, "equiangular": 958, "weisberg": 958, "ell_0": [958, 962], "_coef": 958, "mp": 958, "ell_": 958, "posteriori": [958, 964], "radford": 958, "neal": [958, 1017], "50000013": 958, "49999993": 958, "lambda_i": 958, "srikantan": 958, "tristan": 958, "fletcher": [958, 1004, 1008], "nomenclatur": [958, 1010], "deliber": 958, "overparameter": 958, "ldot": [958, 962, 964, 966, 976], "w_l": 958, "min_w": 958, "iverson": 958, "broyden": 958, "goldfarb": 958, "shanno": 958, "shortcom": 958, "statsmodel": [958, 982], "aaron": [958, 1007, 1008, 1009, 1014], "simon": [958, 986, 1007, 1008, 1017, 1018, 1019], "93fletcher": 958, "93goldfarb": 958, "93shanno_algorithm": 958, "noah": 958, "multirespons": 958, "edm": 958, "agricultur": 958, "rainfal": 958, "bernouli": 958, "fraud": [958, 986], "cash": 958, "fraudul": [958, 986], "interrupt": 958, "drug": 958, "cure": 958, "entertain": 958, "mccullagh": 958, "nelder": 958, "boca": 958, "raton": 958, "chapman": 958, "hall": [958, 1011, 1015], "crc": 958, "31760": 958, "j\u00f8rgensen": 958, "monografia": 958, "matem\u00e1tica": 958, "2463": 958, "4337": 958, "7638": 958, "disappear": [958, 1004], "photogrammetr": 958, "hypothes": 958, "paradigm": 958, "cartographi": 958, "fischler": 958, "boll": 958, "sunglok": 958, "choi": 958, "taemin": 958, "wonpil": 958, "93sen_estim": 958, "binom": 958, "infeas": [958, 965, 967], "k\u00e4rkk\u00e4inen": 958, "\u00e4yr\u00e4m\u00f6": 958, "h_": 958, "oarc": 958, "dae": 958, "bassett": 958, "jr": 958, "econometrica": 958, "econometr": 958, "portnoi": 958, "hare": 958, "tortois": 958, "paraboloid": 958, "w_3": 958, "w_4": 958, "w_5": 958, "z_1": 958, "z_2": 958, "z_3": 958, "z_4": 958, "z_5": 958, "streamlin": 958, "gotten": [958, 972], "necess": [959, 965], "strife": 959, "mother": 959, "baloo": 959, "song": 959, "jungl": 959, "rubric": 959, "defici": [959, 976], "hlle": 959, "revolv": 959, "belkin": 959, "niyogi": 959, "1373": 959, "1396": 959, "molecul": 959, "countri": 959, "jk": 959, "delta_": 959, "c_1": 959, "disentangl": 959, "legitim": 959, "tricki": 959, "die": 959, "favour": [959, 961, 1013], "noisier": 959, "5415": 959, "circuit": 959, "brief": 960, "num_featur": [960, 1019], "quantum": 960, "nutshel": 960, "36787944": 960, "89483932": 960, "58364548": 960, "51341712": 960, "83822343": 960, "7768366": 960, "facil": 961, "equi": 961, "agnost": [961, 970], "cue": 961, "came": 961, "quicker": 961, "unpract": 961, "analogi": [961, 962], "top_k_accuraci": 962, "top_k_accuracy_scor": [962, 1016, 1018], "neg_brier_scor": [962, 1014], "f1_micro": [962, 1008], "f1_weight": [962, 1008], "f1_sampl": 962, "neg_log_loss": 962, "roc_auc_ovr": [962, 1014], "roc_auc_ovo": [962, 1014], "roc_auc_ovr_weight": [962, 1014], "roc_auc_ovo_weight": [962, 1014], "explained_variance_scor": [962, 1007, 1011, 1018], "max_error": [962, 1013], "neg_mean_squared_log_error": 962, "mean_squared_log_error": [962, 1011, 1017], "neg_median_absolute_error": 962, "neg_mean_poisson_devi": 962, "neg_mean_gamma_devi": 962, "mean_gamma_devi": [962, 1014], "d2_pinball_scor": [962, 1018], "d2_tweedie_scor": [962, 1017], "wrong_choic": 962, "_error": 962, "my_custom_loss_func": 962, "693": 962, "protocol": [962, 1007, 1020], "custom_scoring_funct": 962, "custom_scorer_modul": 962, "confusion_matrix_scor": 962, "test_tp": 962, "test_fn": 962, "untru": 962, "dividend": 962, "divisor": 962, "quotient": 962, "texttt": 962, "_class": 962, "youden": 962, "informed": 962, "mosley2013": 962, "kelleher2015": 962, "guyon2015": 962, "urbanowicz2015": 962, "escalant": 962, "escalera": 962, "maci\u00e0": [962, 1017, 1019], "saeed": 962, "statnikov": 962, "viega": 962, "chalearn": 962, "automl": [962, 982], "ijcnn": 962, "moslei": 962, "ijcv": 962, "urbanowicz": 962, "exstrac": 962, "evol": 962, "intel": 962, "cohen_kappa_scor": [962, 1009, 1011], "4285714285714286": 962, "manning2008": 962, "everingham2010": 962, "davis2006": 962, "flach2015": 962, "everingham": 962, "gool": 962, "winn": 962, "pascal": 962, "voc": 962, "goadrich": 962, "y_l": 962, "_l": 962, "emptyset": 962, "f_beta": 962, "hinge_loss": [962, 1008, 1016, 1017], "ne": [962, 965], "1738": 962, "matthews_corrcoef": [962, 1004, 1010, 1011, 1018], "t_k": [962, 978], "ik": 962, "ki": 962, "kk": 962, "auroc": 962, "ht2001": 962, "fc2009": 962, "pd2000": 962, "f2006": 962, "f2001": 962, "inner_clf": 962, "c\u00e8sar": 962, "hernandez": 962, "orallo": 962, "modroiu": 962, "wikipediadet2017": 962, "martin1997": 962, "navratil2007": 962, "encyclopedia": 962, "utc": 962, "php": [962, 982], "detection_error_tradeoff": 962, "oldid": 962, "798982054": 962, "doddington": 962, "kamm": 962, "ordowski": 962, "przybocki": 962, "navractil": 962, "klusacek": 962, "acoust": 962, "icassp": 962, "honolulu": 962, "232": 962, "brier1950": 962, "p_i": [962, 965], "bella2012": 962, "flach2008": 962, "bella": 962, "hern\u00e1ndez": 962, "ram\u00edrez": 962, "quintana": 962, "khosrow": 962, "pour": 962, "hershei": 962, "edson": [962, 1009], "matsubara": 962, "dagstuhl": 962, "seminar": 962, "schloss": 962, "leibniz": 962, "zentrum": 962, "lr_": 962, "brenner": 962, "gefel": 962, "991": 962, "coverage_error": [962, 1008, 1018], "label_ranking_average_precision_scor": [962, 1008, 1012, 1013, 1019], "label_ranking_loss": [962, 1009], "grade": 962, "unalt": 962, "epsilon_i": 962, "908": 962, "925": [962, 992], "7083": 962, "log_": 962, "growth": [962, 1009, 1010], "commod": 962, "mapd": 962, "2e6": 962, "2666": 962, "y_n": [962, 966, 976], "elicit": 962, "2500": 962, "mean_pinball_loss_95p": 962, "skill": 962, "mcfadden": 962, "d2_tweedie_score_15": 962, "d2_pinball_score_08": 962, "heteroschedast": 962, "homoschedast": 962, "pear": 963, "y_dens": 963, "y_spars": 963, "advoc": 963, "financ": 963, "f3": 963, "y3": 963, "documentat": 963, "multi_target_forest": 963, "75474165": 963, "03498585": 963, "03812219": 963, "12165031": 963, "12914884": 963, "46081961": 963, "8948621": 963, "44373091": 963, "88978285": 963, "62745778": 963, "02891072": 963, "48204257": 963, "03260883": 963, "34867495": 963, "52003279": 963, "92529176": 963, "25719016": 963, "84253": 963, "25193977": 963, "16443186": 963, "12274212": 963, "170388": 963, "80956739": 963, "16979946": 963, "72667194": 963, "50941682": 963, "50447799": 963, "37967282": 963, "15699552": 963, "72850319": 963, "prod_": 964, "downarrow": 964, "spite": 964, "famous": 964, "serious": 964, "flair": 964, "2_y": 964, "mu_i": 964, "sigma_i": 964, "theta_i": 964, "cnb": 964, "mnb": 964, "inventor": 964, "alpha_i": [964, 977], "cj": [964, 1007, 1008, 1009, 1010, 1011], "summat": [964, 966], "min_c": 964, "t_i": 964, "poorest": 964, "n_i": 964, "satellit": 965, "kdt": 965, "farawai": 965, "invent": 965, "orthotrop": 965, "bentlei": 965, "1975": 965, "omohundro": 965, "characteris": 965, "unaffect": 965, "amort": 965, "cache_path": 965, "gettempdir": 965, "unsort": [965, 1005, 1008, 1012], "5807": 965, "nca_pip": 965, "96190476": 965, "limits_": 965, "lx": 965, "x_m": 966, "leftmost": 966, "w_1x_1": 966, "w_2x_2": 966, "w_mx_m": 966, "backpropag": 966, "998": 966, "b_1": 966, "b_2": 966, "z_l": 966, "dfrac": [966, 972], "nabla": 966, "deduct": 966, "rumelhart": 966, "jiquan": 966, "ngiam": 966, "chuan": 966, "yifan": 966, "carolin": 966, "suen": 966, "backprop": [966, 976], "lecun": [966, 976], "orr": [966, 976], "strai": 967, "v_ih_j": 967, "b_iv_i": 967, "c_jh_j": 967, "h_j": 967, "v_i": 967, "b_i": 967, "sum_h": 967, "fantasi": 967, "particl": 967, "thoroughli": 967, "hereund": 968, "1443": 968, "1471": 968, "outlying": 968, "h2009": 969, "g2015": 969, "absurd": 969, "m2019": 969, "mc_clf": 969, "624": 969, "overlaid": 969, "obscur": 969, "cice": [969, 1018], "pd_": 969, "dx_c": 969, "footnot": [969, 982], "opaqu": 970, "x_val": 970, "y_val": 970, "356": 970, "probe": 970, "204": [970, 975], "050": 970, "048": 970, "056": 970, "r_multi": 970, "081": 970, "1013": 970, "866": 970, "246": [970, 1004], "726": 970, "022": 970, "277": [970, 1006], "376": 970, "115": 970, "i_j": 970, "min_max_scal": [972, 1009], "x_train_minmax": 972, "x_test_minmax": 972, "max_abs_scal": 972, "x_train_maxab": 972, "x_test_maxab": 972, "excess": [972, 1011], "unintention": 972, "kernelcenter": [972, 1014, 1018], "scholkopf1998": 972, "1_": 972, "x_train_tran": 972, "x_test_tran": 972, "8pt": 972, "x_normal": 972, "firefox": 972, "chrome": 972, "safari": 972, "africa": 972, "dragon": 972, "lexicon": 972, "infant": 972, "kid": 972, "teen": 972, "adult": 972, "senior": [972, 986], "citizen": 972, "retbin": 972, "x_1x_2": 972, "x_1x_3": 972, "x_2x_3": 972, "x_1x_2x_3": 972, "rung": 972, "eiler": 972, "marx": 972, "perperogl": 972, "sauerbrei": 972, "abrahamowicz": 972, "bmc": 972, "methodol": 972, "38629436": 972, "sixteenth": 974, "uai": 974, "craig": [974, 1007, 1012], "boutili": 974, "mois\u00e9": 974, "goldszmidt": 974, "morgan": [974, 978, 980], "kaufmann": [974, 978, 1016], "ella": 974, "bingham": 974, "heikki": 974, "mannila": 974, "245": [974, 1006], "explic": 974, "3947": 974, "687": 974, "kenneth": [974, 1004, 1005, 1010, 1011, 1018, 1019], "12th": 974, "296": 974, "x_new_invers": 974, "x_new_again": 974, "delalleau": 975, "aistat": 975, "gatsbi": 975, "ucl": 975, "uk": [975, 997], "fullpap": 975, "xi_i": 976, "slack": 976, "varepsilon": [976, 977], "t_0": 976, "l\u00e9on": [976, 1018, 1020], "_init_t": 976, "basesgd": 976, "eta_0": 976, "_t": 976, "svmsgd": 976, "pegaso": 976, "srebro": 976, "tsuruoka": 976, "tsujii": 976, "ananiad": 976, "afnlp": 976, "lin_clf": 977, "grasp": [977, 983], "sv": 977, "builtin": 977, "qp": 977, "linear_svc": 977, "gram_train": 977, "gram_test": 977, "zeta": 977, "zeta_i": 977, "textrm": [977, 995], "q_": 977, "equiv": 977, "reparameter": 977, "wu": [977, 1008, 1016], "weng": 977, "1005": 977, "rong": 977, "aug": 977, "1871": 977, "1874": 977, "ofmulticlass": 977, "fitter": 978, "pariti": 978, "multiplex": 978, "export_graphviz": [978, 1009, 1011, 1017, 1019], "export_text": [978, 1013, 1020], "dumont": 978, "subwindow": 978, "beforehand": 978, "dichotomis": 978, "quinlan": 978, "multiwai": 978, "proprietari": 978, "ruleset": 978, "q_m": 978, "n_m": 978, "t_m": 978, "setminu": 978, "mk": 978, "probalist": 978, "_m": 978, "ge0": 978, "widetild": 978, "tradition": 978, "t_t": 978, "eff": 978, "predictive_analyt": 978, "troubleshoot": 980, "artwork": 980, "fund": 980, "spotifi": 980, "betawork": 980, "evernot": 980, "aweb": 980, "yhat": 980, "rangespan": 980, "birchbox": 980, "bestofmedia": 980, "phimeca": 980, "howaboutw": 980, "peerindex": 980, "datarobot": 980, "okcupid": 980, "love": [980, 997], "publica": 980, "machinali": 980, "solido": 980, "infonea": 980, "dataiku": 980, "otto": 980, "zopa": 980, "bnp": 980, "pariba": 980, "cardif": 980, "post1": [980, 1002], "foot": 981, "gear": 981, "neuroimag": [981, 986], "astronom": 981, "pycon": 981, "thirti": 981, "nyc": [981, 986], "sister": 982, "sklearn_panda": 982, "sklearn_xarrai": 982, "xarrai": 982, "autoviml": 982, "tpot": 982, "featuretool": 982, "tempor": [982, 983], "neuraxl": 982, "neat": [982, 1004], "checkpoint": 982, "funki": 982, "saver": 982, "evalml": 982, "neptun": 982, "mlop": 982, "sacr": 982, "dtreeviz": 982, "eli5": 982, "mlxtend": 982, "yellowbrick": 982, "deap": 982, "evolutionari": 982, "interchang": 982, "skop": [982, 999], "jpmml": 982, "porter": 982, "transpil": 982, "javascript": 982, "m2cgen": 982, "dart": 982, "haskel": 982, "rust": 982, "treelit": 982, "tslearn": 982, "sktime": 982, "hmmlearn": 982, "pomegran": 982, "crfsuit": 982, "nolearn": 982, "lasagn": 982, "theano": 982, "skorch": 982, "scikera": 982, "scikit_learn": 982, "feder": 982, "lego": 982, "subsembl": 982, "lightn": 982, "sdca": 982, "adagrad": 982, "svrg": 982, "nadaraya": 982, "gplearn": 982, "genet": 982, "multilearn": 982, "seglearn": 982, "libopf": 982, "fastfm": 982, "kmode": 982, "sphereclust": 982, "mise": 982, "giotto": 982, "tda": 982, "pymc": 982, "censor": 982, "lightfm": 982, "openrec": 982, "spotlight": 982, "gensim": 982, "nilearn": 982, "neuro": 982, "astroml": 982, "astronomi": 982, "msmbuilder": 982, "dissemin": 982, "chines": 982, "persian": 982, "spanish": 982, "korean": 982, "disclaim": 982, "promis": 983, "eleven": 983, "incept": 983, "scala": 983, "reinforc": 983, "era": 983, "7242": 983, "12147": 983, "5523": 983, "10733": 983, "13902": [983, 1014], "12800": 983, "12866": 983, "15550": 983, "5853": 983, "11805": 983, "15319": 983, "11977": 983, "12852": [983, 1014], "13911": [983, 1014], "amput": 983, "6284": 983, "beginn": 983, "priorit": [983, 1011], "4497": 983, "7646": 983, "6425": 983, "6424": 983, "8480": 983, "6231": 983, "8100": 983, "6599": 983, "6715": 983, "14582": 983, "3855": 983, "13227": 983, "6323": 983, "14180": [983, 1015], "9173": 983, "13146": [983, 1014], "8614": 983, "7608": 983, "5082": 983, "8243": 983, "searchgrid": 983, "6929": 983, "__array_function__": [983, 1014], "etl": [983, 986], "8370": 983, "6451": 983, "lifecycl": 983, "8157": 983, "7382": 983, "drift": 983, "11047": [983, 1014], "9326": 983, "slep011": 983, "1626": 983, "10463": 983, "id3": [984, 999], "cart": [984, 999], "touch": 985, "gdb": 985, "savetxt": 985, "cloneabl": 985, "datafil": 985, "printabl": 985, "indispens": 986, "stephen": [986, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1017], "simmon": 986, "vp": 986, "athena": 986, "music": 986, "bernhardsson": 986, "pariet": [986, 1004], "lear": 986, "visag": 986, "fantast": 986, "startup": 986, "bitli": 986, "chartbeat": 986, "digg": [986, 1011], "poncho": 986, "gilad": 986, "lotan": 986, "chief": 986, "chat": 986, "bread": 986, "butter": 986, "chaumond": [986, 1012], "offic": 986, "ayzenshtat": [986, 1012], "undergrad": 986, "professor": 986, "hotel": 986, "destin": 986, "agent": 986, "melani": [986, 1011, 1012], "awesom": 986, "stuff": 986, "randomizedpca": [986, 1004, 1006, 1007, 1009, 1010, 1011], "boston": 986, "mdbecker": 986, "pydata_2013": 986, "ninja": 986, "thorough": 986, "notch": 986, "production": 986, "greg": [986, 1010, 1011, 1013, 1014], "lamp": 986, "founder": 986, "prototyp": 986, "jurgen": 986, "director": 986, "commerc": 986, "inventori": 986, "bertin": 986, "mahieux": 986, "invalu": 986, "vijai": [986, 1007], "traine": 986, "impress": 986, "traffic": 986, "tenur": 986, "matchmak": 986, "weitzenfeld": 986, "tweet": 986, "ferenc": 986, "huszar": 986, "shop": 986, "ourselv": 986, "jeremi": [986, 1009, 1010, 1011, 1012, 1015, 1016], "achin": 986, "ceo": 986, "marketplac": 986, "frid": [986, 1007], "radar": 986, "partnership": 986, "lebourgeoi": 986, "charron": [986, 1007, 1008, 1015, 1016, 1017], "cornerston": 986, "sheep": 986, "featureforg": 986, "rafael": [986, 1005, 1006, 1008, 1011], "carrascosa": [986, 1008], "law": 986, "semiconductor": 986, "fab": [986, 1014, 1015], "bleed": 986, "chip": 986, "smartphon": 986, "automobil": 986, "trent": [986, 1010], "mcconaghi": 986, "rapid": 986, "immens": 986, "thorsten": 986, "kranz": 986, "coma": 986, "dss": 986, "douetteau": 986, "b2c": 986, "retail": 986, "palladium": 986, "rammig": [986, 1010], "peer": 986, "billion": 986, "gbp": 986, "grate": 986, "vlasio": [986, 1011], "vasilei": [986, 1011], "petfood": 986, "cocoa": 986, "worldwid": 986, "toolset": 986, "equip": 986, "fitzk": 986, "sr": 986, "fondat": 986, "s\u00e9bastien": [986, 1010, 1012], "conort": 986, "salmon": 988, "nine": 988, "sentiment": 989, "cli": 989, "doctest_mod": 989, "hardest": 990, "tightli": 991, "knit": 991, "x_fold": 992, "array_split": 992, "y_fold": 992, "934": 992, "train_indic": 992, "test_indic": 992, "963": 992, "922": 992, "930": 992, "96388889": 992, "92222222": 992, "9637883": 992, "93036212": 992, "96578289": 992, "92708922": 992, "96681476": 992, "96362897": 992, "93192644": 992, "0077": 992, "943": 992, "00375": 992, "lfw_": 993, "_lfw": 993, "gerhard_schroed": 993, "donald_rumsfeld": 993, "tony_blair": 993, "colin_powel": 993, "george_w_bush": 993, "282": [993, 1004], "estimated_param_": 994, "iris_x": 995, "iris_i": 995, "iris_x_train": 995, "iris_y_train": 995, "iris_x_test": 995, "iris_y_test": 995, "pave": 995, "paltri": 995, "exabyt": 995, "30349955": 995, "237": 995, "63931533": 995, "53060544": 995, "73698041": 995, "13170937": 995, "81458798": 995, "84845219": 995, "60648906": 995, "51961675": 995, "09517222": 995, "5854": 995, "5855": 995, "occam": 995, "razor": 995, "best_alpha": [995, 1004], "025118864315095794": 995, "508": 995, "knew": 996, "taxonomist": 996, "face_compress": 996, "x_approx": 996, "images_approx": 996, "18565811e": 996, "19346747e": 996, "43026679e": 996, "text_analyt": 997, "skeleton": [997, 1007], "sklearn_tut_workspac": 997, "cp": 997, "work_directori": 997, "tutorial_hom": 997, "fetch_data": 997, "lang": 997, "newsweed": 997, "netnew": 997, "bydat": 997, "twenty_train": 997, "holder": 997, "2257": 997, "sd345": 997, "collier": 997, "laserjet": 997, "iii": [997, 1018], "hampton": 997, "4gb": 997, "count_vect": 997, "x_train_count": 997, "35788": 997, "4690": 997, "downscal": 997, "tf_transform": 997, "x_train_tf": 997, "tfidf_transform": 997, "x_train_tfidf": 997, "na\u00efv": 997, "docs_new": 997, "opengl": 997, "x_new_count": 997, "x_new_tfidf": 997, "text_clf": 997, "twenty_test": 997, "docs_test": 997, "8348": 997, "9101": [997, 1012], "1502": 997, "380": 997, "tfidf__use_idf": 997, "searcher": 997, "gs_clf": 997, "workspac": 997, "fear": 997, "fire": 997, "exercise_xx_script": 997, "arg1": 997, "arg2": 997, "arg3": 997, "mortem": 997, "charngramanalyz": 997, "exercise_01_language_train_model": 997, "exercise_02_senti": 997, "movie_review": 997, "txt_sentoken": 997, "cpickl": 997, "polar": 997, "subtleti": 999, "subscrib": 1002, "gzip": 1004, "bzip2": 1004, "decompress": 1004, "auc_scor": [1004, 1006], "kernc": [1004, 1018, 1019], "led": 1004, "probabilisticpca": [1004, 1007], "hmm": [1004, 1005, 1006, 1007, 1009], "gaussianhmm": 1004, "multinomialhmm": 1004, "n_gram_rang": 1004, "267": 1004, "alexi": [1004, 1007, 1008, 1011], "mignon": [1004, 1007, 1008, 1011], "subhodeep": [1004, 1005, 1006], "moitra": [1004, 1005, 1006], "yannick": [1004, 1006], "schwartz": [1004, 1006, 1018], "duckworth": 1004, "benediktsson": [1004, 1005, 1006], "marko": [1004, 1013, 1014], "burjek": 1004, "pinto": 1004, "abraham": [1004, 1005, 1010, 1014], "hoenig": 1004, "flyingimmidev": 1004, "francoi": [1004, 1017], "savard": 1004, "hann": 1004, "schulz": 1004, "welind": 1004, "companioni": 1004, "brandyn": 1004, "bussonni": [1004, 1016], "matthia": [1004, 1006, 1007, 1010, 1011, 1012, 1016, 1019], "pierr": [1004, 1012, 1013, 1015, 1017, 1019], "astolfi": 1004, "huiginn": 1004, "goodman": [1004, 1009], "ludwig": 1004, "schwardt": 1004, "hervieu": 1004, "sergio": [1004, 1006, 1007, 1016, 1019], "medina": [1004, 1006], "sheerman": 1004, "buguen": 1004, "seq_dataset": [1004, 1014], "weight_vector": [1004, 1014], "reuben": 1004, "costin": 1004, "_basehmm": 1004, "neighborsregressor": 1004, "gone": [1004, 1005], "vbgmm": [1004, 1008, 1010], "_pvalu": 1004, "charset": [1004, 1006], "test_fract": 1004, "train_fract": 1004, "239": 1004, "198": 1004, "marek": 1004, "fcostin": 1004, "adrien": 1004, "gaidon": 1004, "joona": 1004, "sillanp\u00e4\u00e4": 1004, "mccarthi": [1004, 1012], "roi": [1004, 1018], "hyunjin": 1004, "ibay": 1004, "scheidegg": 1004, "clair": 1004, "revillet": 1004, "conrad": [1004, 1005, 1019], "meng": [1004, 1005, 1008, 1010, 1011], "xinfan": [1004, 1005, 1008], "udi": 1004, "weinsberg": 1004, "janso": 1004, "palafox": 1004, "overwrite_": 1004, "copy_": 1004, "buffer_mb": 1004, "sparse_encode_parallel": 1004, "accident": [1004, 1008, 1013], "basedictionarylearn": 1004, "sparsecodingmixin": 1004, "fast_svd": 1004, "arnold": [1004, 1005], "bala": [1004, 1007], "subrahmanyam": [1004, 1007], "varanasi": [1004, 1007], "draxu": 1004, "eickenberg": [1004, 1006, 1007, 1008, 1009], "bogdan": 1004, "trach": 1004, "f\u00e9lix": [1004, 1006, 1007, 1008, 1012], "antoin": [1004, 1006, 1007, 1008, 1011], "fortin": [1004, 1006, 1007, 1008], "manuel": [1004, 1008, 1012, 1013, 1016, 1017], "caicedo": 1004, "carvaj": 1004, "tiziano": 1004, "zito": [1004, 1017], "jean": [1004, 1007, 1008, 1009, 1010, 1011, 1017], "kossaifi": [1004, 1008, 1009], "thumbnail": 1004, "univariate_select": 1004, "mldata": [1004, 1012], "pietro": [1004, 1007], "berk": 1004, "macosx": 1004, "xarg": 1004, "bscikit": 1004, "cross_val": 1004, "bcross_val": 1004, "lurk": 1004, "l1_distanc": 1004, "387": 1004, "168": 1004, "andi": [1004, 1011], "amit": [1004, 1018, 1019], "salvator": [1004, 1018, 1019], "masecchia": 1004, "schut": 1004, "metaireau": [1004, 1007], "bryan": [1004, 1007, 1013, 1014, 1017], "silverthorn": 1004, "minwoo": 1004, "luca": [1004, 1014, 1015, 1016, 1017], "wiman": 1004, "schl\u00fcter": [1004, 1012], "malet": 1004, "miott": [1004, 1007], "feth": 1004, "arezki": 1004, "yamin": 1004, "notes_neighbor": 1004, "netbsd": 1004, "kamel": 1004, "ibn": 1004, "hassen": 1004, "derouich": 1004, "virgilefritsch": 1004, "example_gaussian_process_plot_gp_regress": 1004, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1004, "tast": 1004, "2x": 1004, "10x": 1004, "200x": 1004, "ann": [1004, 1016, 1018], "laur": 1004, "fouqu": 1004, "ronan": [1004, 1007, 1012], "amicel": [1004, 1007], "osendorf": [1004, 1005], "gmmhmm": [1004, 1005], "latex": 1004, "mlcomp": 1004, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1004, "pybrain": 1004, "116": 1004, "rokem": [1004, 1010], "100x": [1004, 1007], "obsolet": 1004, "attrselect": 1004, "unmaintain": 1004, "lite": 1004, "filo": [1004, 1007], "mailhot": 1004, "huard": 1004, "dave": [1004, 1011, 1012, 1018], "morril": 1004, "schofield": 1004, "travi": [1004, 1012], "oliph": 1004, "pearu": 1004, "peterson": [1004, 1006], "0d": 1005, "marchman": [1005, 1006], "hrishikesh": [1005, 1006], "huilgolkar": [1005, 1006], "bastiaan": [1005, 1006], "diego": [1005, 1006], "molla": [1005, 1006], "cunha": [1005, 1006], "almeida": [1005, 1006, 1017], "rolando": [1005, 1006], "espinoza": [1005, 1006], "fuent": [1005, 1006], "formerli": [1005, 1008, 1010, 1011], "beauchamp": [1005, 1008], "longstand": [1005, 1011], "shaun": 1005, "jackman": 1005, "winterman": 1005, "seberg": 1005, "n_atom": 1005, "label_propag": 1005, "learn_rat": 1005, "basegradientboost": 1005, "mean_square_error": 1005, "gmm_": 1005, "eig_tol": 1005, "chunk_siz": 1005, "zero_one_scor": 1005, "117": 1005, "aymer": 1005, "masurel": 1005, "syhw": [1005, 1006], "corei": [1005, 1012, 1013], "lynch": [1005, 1011], "shu": [1005, 1008, 1012], "tadej": [1005, 1006], "jane\u017e": [1005, 1006], "caje": 1005, "tiago": [1005, 1009], "nune": 1005, "cow": 1005, "anz": 1005, "jauvin": 1005, "jacqu": [1005, 1007], "kvam": [1005, 1007], "doug": [1005, 1006, 1016], "coleman": [1005, 1006], "dickerson": 1005, "approximateident": 1005, "veronda": 1005, "matti": [1005, 1008, 1009], "lyra": [1005, 1008, 1009], "mikhail": [1005, 1006, 1007, 1010, 1011], "korobov": [1005, 1006, 1007, 1010, 1011], "alejandro": [1005, 1010], "weinstein": 1005, "deil": [1005, 1015, 1016], "nizhibitski": 1005, "coelho": [1005, 1007, 1008, 1012], "miroslav": [1005, 1006, 1009], "batchkarov": [1005, 1009], "pavel": [1005, 1013], "bob": [1005, 1011], "dengemann": 1005, "emanuel": 1005, "x006": 1005, "justin": [1006, 1012, 1016], "stochastic_gradi": [1006, 1007, 1013], "crombach": 1006, "sheet": 1006, "jaccard_similarity_scor": [1006, 1008, 1013], "jochen": 1006, "wersd\u00f6rfer": 1006, "sinayev": 1006, "unpleas": 1006, "novic": 1006, "tini": [1006, 1019], "hyperlink": 1006, "luessi": 1006, "philipp": [1006, 1007, 1010, 1019], "gervai": [1006, 1007], "cleverless": 1006, "nosetest": 1006, "compute_import": 1006, "return_model": [1006, 1008], "itergrid": 1006, "tacitli": 1006, "charset_error": 1006, "precompute_gram": 1006, "2224": 1006, "jim": 1006, "holmstr\u00f6m": 1006, "steven": [1006, 1007, 1009, 1011, 1012, 1017, 1019], "gryze": [1006, 1009], "sergeyf": 1006, "ben": [1006, 1007, 1008, 1011, 1012, 1013, 1016], "speer": 1006, "federico": [1006, 1007, 1012, 1013, 1018], "vaggi": [1006, 1007], "raul": [1006, 1007], "garreta": [1006, 1007], "gei": 1006, "flaxman": [1006, 1008], "denton": 1006, "cockburn": 1006, "dougal": [1006, 1008, 1009, 1011, 1012, 1013, 1014], "sutherland": [1006, 1008, 1009, 1011, 1012, 1013, 1014], "ian": [1006, 1008, 1013, 1014, 1016, 1020], "ozsvald": 1006, "johann": [1006, 1007, 1012, 1014, 1015, 1018], "sch\u00f6nberger": [1006, 1007], "szabo": [1006, 1007], "roland": [1006, 1007], "imran": [1006, 1007, 1008], "haqu": [1006, 1007, 1008], "karayev": 1006, "jamestwebb": [1006, 1007], "abhijeet": 1006, "kolh": 1006, "velkov": 1006, "fazlul": 1006, "shahriar": 1006, "felix": [1006, 1011, 1012, 1014, 1016, 1017, 1018], "brockherd": 1006, "harikrishnan": 1006, "jack": [1006, 1009, 1017, 1018], "hale": [1006, 1018], "jakemick": 1006, "mcdermott": 1006, "zwinck": 1006, "vredevoogd": [1006, 1007], "pati": 1006, "ekman": [1006, 1010], "shubernetskii": 1006, "naoki": [1006, 1016], "orii": 1006, "seamu": 1006, "absher": 1006, "feldman": [1006, 1011, 1012, 1013, 1014], "stefano": 1006, "lattarini": 1006, "steve": [1006, 1008, 1012, 1017, 1019], "koch": [1006, 1012, 1013, 1015, 1016], "sturla": 1006, "molden": 1006, "jarosch": 1006, "nikolai": [1007, 1008, 1009, 1010, 1012, 1013, 1018], "mayorov": [1007, 1008, 1009, 1010], "msvc": 1007, "mingw": 1007, "resourcewarn": 1007, "calvin": [1007, 1008], "gile": [1007, 1008], "billing": [1007, 1008, 1009], "safe_realloc": 1007, "bradshaw": [1007, 1008, 1011], "pico": [1007, 1008], "restor": [1007, 1012, 1013, 1014, 1015, 1019], "raff": 1007, "__array__": [1007, 1014], "jeffrei": [1007, 1010], "blackburn": [1007, 1010], "danni": [1007, 1008, 1009], "sullivan": [1007, 1008, 1009], "wignal": [1007, 1008, 1014, 1015], "grid_tograph": 1007, "gracefulli": [1007, 1008], "gaussianprocess": 1007, "novak": 1007, "tulloch": [1007, 1008], "wardagglomer": 1007, "wardclust": 1007, "mean_l1_ratio": 1007, "phlypo": 1007, "148": 1007, "bommarito": [1007, 1008], "brook": [1007, 1008, 1016], "osborn": [1007, 1008], "eltermann": 1007, "bwignal": 1007, "ankit": [1007, 1014, 1016, 1018], "agraw": [1007, 1012, 1018, 1019], "carei": [1007, 1008, 1009, 1010, 1011], "ugurthemast": [1007, 1008], "schumach": [1007, 1008, 1009], "baptist": [1007, 1015], "lagard": 1007, "rajat": [1007, 1014], "khanduja": 1007, "pascual": 1007, "ignacio": 1007, "rossi": 1007, "s\u00e4ger": [1007, 1010], "ilambharathi": [1007, 1008], "kanniah": [1007, 1008], "sdenton4": 1007, "alyssa": [1007, 1011], "amo": 1007, "waterland": 1007, "murad": 1007, "maud": 1007, "karol": 1007, "pysniak": 1007, "cgohlk": [1007, 1008], "jacobsen": 1007, "collin": 1007, "kaushik94": 1007, "erwin": 1007, "marsi": 1007, "csytraci": 1007, "lk": 1007, "laurent": [1007, 1008, 1011, 1012, 1019], "direr": [1007, 1008, 1011, 1012], "shilt": 1007, "yoshiki": [1007, 1010], "v\u00e1zquez": 1007, "yung": [1007, 1010], "siang": 1007, "liau": 1007, "abhishek": [1007, 1008, 1014, 1018], "thakur": [1007, 1008], "rohit": [1007, 1008, 1012, 1013], "sivaprasad": [1007, 1008], "amormachin": 1007, "oscar": [1007, 1011], "carlsson": 1007, "nanta": 1007, "nardelli": 1007, "jess010": 1007, "kowalski87": 1007, "clegg": 1007, "ralf": [1007, 1010, 1011], "gommer": [1007, 1010, 1011], "aft": 1007, "rupesh": 1007, "srivastava": [1007, 1019], "ryan": [1007, 1010, 1012, 1013], "skipper": [1007, 1009, 1010], "seabold": [1007, 1009, 1010], "stefan": [1007, 1008, 1012, 1014], "walt": [1007, 1008, 1012], "riddel": [1007, 1009, 1011], "valentin": [1007, 1009, 1019], "haenel": 1007, "myer": [1007, 1011], "yoni": 1007, "meshulam": 1007, "yuri": [1007, 1009], "zaytsev": 1007, "adrinjalali": [1007, 1016], "ai8rahim": 1007, "alemagnani": 1007, "chalmerlow": 1007, "dziki": 1007, "dro\u017cd\u017c": 1007, "matrixorz": 1007, "popo": 1007, "samuela": 1007, "fran\u00e7oi": 1007, "boulogn": 1007, "ethan": [1007, 1010], "guilherm": 1007, "trein": 1007, "heuer": 1007, "ivicajov": 1007, "rouli": 1007, "eduardo": [1007, 1009, 1017, 1018], "ari\u00f1o": 1007, "rubia": 1007, "jell": 1007, "zijlstra": 1007, "eddi": 1007, "jansson": [1007, 1019], "ca\u00f1ardo": 1007, "alastuei": 1007, "joseph": [1007, 1008, 1009, 1010, 1016, 1018, 1019], "perla": 1007, "ricardo": [1007, 1017, 1018], "kenta": 1007, "sato": 1007, "medri": 1007, "luce": 1007, "pierron": 1007, "danielweitzenfeld": 1007, "thompson": [1007, 1020], "brett": [1007, 1009, 1010, 1011, 1012, 1019], "feurer": [1007, 1012], "earl": 1007, "hank": 1007, "orr\u00f9": 1007, "lunt": 1007, "kearn": 1007, "pawe\u0142": [1007, 1011, 1016, 1017], "mandera": 1007, "zambelli": 1007, "staubda": 1007, "dedupl": 1008, "heilman": [1008, 1009], "precompute_dist": [1008, 1015], "lshforest": [1008, 1011], "qiang": 1008, "luo": 1008, "clemen": 1008, "brunner": 1008, "matteo": [1008, 1010, 1018], "visconti": 1008, "oleggio": 1008, "castello": 1008, "linkage_tre": 1008, "jatin": [1008, 1010], "shah": [1008, 1009, 1010, 1016], "saurabh": [1008, 1009, 1010, 1011, 1012, 1016], "jha": [1008, 1014, 1018], "blanchard": [1008, 1009], "michal": [1008, 1011, 1017, 1018], "romaniuk": 1008, "gilmor": 1008, "stapl": 1008, "hedyati": 1008, "antoni": [1008, 1010, 1016, 1019], "parel": 1008, "herv\u00e9": 1008, "bredin": 1008, "hasil": 1008, "sharma": [1008, 1010, 1012, 1013, 1015, 1016, 1018], "download_20newsgroup": 1008, "friend": 1008, "cathi": [1008, 1014], "deng": [1008, 1009, 1010], "dawson": 1008, "garret": 1008, "hanna": [1008, 1009, 1015], "wallach": [1008, 1009], "yan": [1008, 1016], "artem": [1008, 1011], "sobolev": 1008, "fit_ovr": 1008, "predict_ovr": 1008, "predict_proba_ovr": 1008, "fit_ovo": 1008, "predict_ovo": 1008, "fit_ecoc": 1008, "predict_ecoc": 1008, "lamond": 1008, "outweigh": 1008, "thresh": 1008, "akshai": [1008, 1011, 1016], "akshayah3": 1008, "aldrian": 1008, "obaja": 1008, "ander": [1008, 1014], "aagaard": 1008, "cranenburgh": 1008, "walker": 1008, "banilo": [1008, 1009], "barmalei": [1008, 1009], "benedikt": 1008, "koehler": 1008, "bhsu": 1008, "bori": [1008, 1016], "feld": 1008, "borja": 1008, "ayerdi": 1008, "boyuan": [1008, 1009, 1010], "brent": [1008, 1012, 1013], "pedersen": 1008, "celeo": 1008, "chebee7i": 1008, "stade": 1008, "schuldt": 1008, "christof": [1008, 1009], "angermuel": [1008, 1009], "daiki": 1008, "aminaka": 1008, "danfrankj": 1008, "dmitrij": 1008, "milajev": 1008, "floydsoft": 1008, "garrett": 1008, "gpassino": 1008, "gwulf": [1008, 1009], "hampu": 1008, "bengtsson": 1008, "harri": [1008, 1010, 1016, 1017], "mavroforaki": [1008, 1010], "helder": [1008, 1017, 1018], "herv": 1008, "hugu": 1008, "salamin": 1008, "ism": 1008, "dlabal": 1008, "javier": 1008, "l\u00f3pez": [1008, 1012, 1013, 1016], "pe\u00f1a": 1008, "jdcaballero": 1008, "jeff": [1008, 1010, 1017, 1018], "hammerbach": 1008, "helmu": 1008, "kaicheng": 1008, "markham": [1008, 1015, 1016], "lagacheri": 1008, "leepei": 1008, "loic": [1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "estev": [1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "luka": [1008, 1015], "michelbach": 1008, "mario": [1008, 1010, 1018, 1020], "krell": [1008, 1010], "ku": [1008, 1009], "mateusz": [1008, 1015, 1016], "susik": 1008, "mehdi": [1008, 1017], "cherti": 1008, "mlg": 1008, "montecchio": 1008, "okal": 1008, "billi": 1008, "\u00f3scar": [1008, 1009, 1010, 1011], "n\u00e1jera": [1008, 1009, 1010, 1011], "puggioni": 1008, "pratap": [1008, 1011, 1018], "vardhan": 1008, "pvnguyen": 1008, "queqichao": 1008, "rahiel": 1008, "kasim": 1008, "mason": 1008, "saket": [1008, 1009, 1016], "choudhari": [1008, 1009, 1018], "sam": [1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019], "nichol": 1008, "sethdandridg": 1008, "sinhrk": [1008, 1009], "snuderl": 1008, "ott": 1008, "tjoa": 1008, "swu": 1008, "zimmer": [1008, 1018], "tejesh95": 1008, "terrycojon": 1008, "delteil": 1008, "toma": 1008, "kazmar": 1008, "trevorstephen": [1008, 1010], "tttthomasssss": 1008, "tzu": 1008, "kuo": 1008, "ugurcaliskan": 1008, "vinayak": [1008, 1009, 1010, 1012, 1013], "mehta": [1008, 1009, 1010, 1012, 1013, 1014, 1015], "vjacheslav": 1008, "murashkin": 1008, "wadawson": 1008, "x0l": 1008, "vendor": [1009, 1012, 1013], "6147": 1009, "presort": [1009, 1014], "5857": 1009, "mcculloh": [1009, 1010], "6258": 1009, "giorgio": [1009, 1010, 1011], "patrini": [1009, 1010, 1011], "joe": 1009, "jevnik": 1009, "labelkfold": [1009, 1010], "labelshufflesplit": [1009, 1010], "mcfee": [1009, 1010], "3659": 1009, "4738": 1009, "projectedgradientnmf": 1009, "nls_max_it": 1009, "erick": 1009, "moodi": 1009, "4025": 1009, "mean_shift_": 1009, "mean_shift": [1009, 1012], "martino": 1009, "sorbaro": 1009, "cori": 1009, "konstantin": [1009, 1010, 1011], "shmelkov": 1009, "backlink": 1009, "jaidev": 1009, "deshpand": [1009, 1010], "dictlearn": 1009, "kashif": 1009, "rasul": [1009, 1011, 1012], "galvez": 1009, "sonni": 1009, "hu": [1009, 1012, 1014], "santi": [1009, 1011, 1012], "villalba": [1009, 1012, 1016], "5186": 1009, "stolbunov": 1009, "booster": 1009, "graham": [1009, 1010], "clenaghan": [1009, 1010], "clyde": 1009, "subproblem": 1009, "forestclassifi": 1009, "ankur": 1009, "ankan": 1009, "henri": [1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019], "5431": 1009, "buddha": 1009, "prakash": [1009, 1011, 1017], "5182": 1009, "lamb": [1009, 1017], "5282": 1009, "5355": 1009, "5360": 1009, "4478": 1009, "5337": 1009, "4362": 1009, "5495": 1009, "elvi": [1009, 1010, 1011], "dohmatob": [1009, 1010, 1011], "data_min": 1009, "data_max": 1009, "data_rang": 1009, "_learntselectormixin": 1009, "gradientboost": 1009, "metatransfom": 1009, "load_lfw_pair": 1009, "wardagglom": 1009, "residues_": 1009, "indicator_matrix_": 1009, "adithya": 1009, "ganesh": 1009, "akitti": 1009, "alexei": 1009, "grigorev": 1009, "ali": [1009, 1012, 1013, 1016, 1017], "baharev": 1009, "ando": 1009, "saaba": 1009, "anish": [1009, 1010], "anthoni": [1009, 1011, 1012], "erling": 1009, "rouvinen": 1009, "rachez": [1009, 1010], "benjaminirv": 1009, "naul": [1009, 1010], "gohlk": 1009, "bourguignat": 1009, "cindi": [1009, 1017], "sridharan": 1009, "kronovet": 1009, "data1010": 1009, "dotson": 1009, "djipei": [1009, 1010], "dmitri": [1009, 1011, 1012, 1013, 1017], "spikhalskii": 1009, "donn": 1009, "duart": [1009, 1017, 1019], "caro": 1009, "larson": [1009, 1013, 1014, 1016, 1018], "fernando": [1009, 1016], "carrillo": 1009, "eckert": 1009, "zalkow": 1009, "ganiev": [1009, 1010, 1011], "ibraim": [1009, 1010, 1011], "giorgiop": 1009, "gryllo": [1009, 1012], "prokopi": [1009, 1012], "hsuan": 1009, "tien": 1009, "ishank": [1009, 1010, 1011], "gulati": [1009, 1010, 1011], "jeffrey04": [1009, 1010], "jfraj": 1009, "jiali": 1009, "mei": [1009, 1014], "kirkham": [1009, 1010, 1012], "wittenau": 1009, "loyal": 1009, "jungkook": 1009, "park": [1009, 1014, 1016], "kamalakerdadi": [1009, 1010], "kyler": 1009, "lilian": [1009, 1010], "besson": [1009, 1010], "tiao": [1009, 1010], "marktab": 1009, "spacek": 1009, "martinbpr": [1009, 1010], "martinosorb": 1009, "maryanmorel": [1009, 1010], "masafumi": 1009, "oyamada": 1009, "krump": 1009, "kolganov": 1009, "mbilling": 1009, "mhg": 1009, "patterson": 1009, "omer": 1009, "katz": [1009, 1016, 1017], "pauli": 1009, "virtanen": 1009, "fischer": [1009, 1010], "pianomania": 1009, "preston": [1009, 1010, 1011], "parri": [1009, 1010, 1011], "rohan": [1009, 1010, 1012, 1013, 1017], "ramanath": 1009, "bansod": [1009, 1010, 1011], "scls19fr": 1009, "saeger": [1009, 1010, 1011], "shivan": 1009, "sornarajah": 1009, "simonpl": 1009, "sseg": 1009, "hoover": [1009, 1010, 1011, 1013], "seguin": 1009, "theodor": 1009, "vasiloudi": 1009, "freita": [1009, 1011, 1012], "pereira": [1009, 1012, 1013], "timothi": [1009, 1017], "hopper": 1009, "tokoroten": 1009, "vstolbunov": 1009, "wangz10": 1009, "yucheng": 1009, "zhauniarovich": 1009, "zac": 1009, "stewart": [1009, 1014, 1017, 1019], "zhai_pro": 1009, "zichen": 1009, "7946": 1010, "8355": 1010, "9010": 1010, "8040": 1010, "9149": 1010, "aman": [1010, 1011, 1012, 1018, 1019], "dalmia": [1010, 1011, 1012], "nate": [1010, 1011, 1017], "guerin": [1010, 1011], "lebedev": [1010, 1011], "utilis": 1010, "6497": 1010, "7724": 1010, "bing": [1010, 1011], "explained_variance_ratio": 1010, "7632": 1010, "jpfrancoia": [1010, 1011], "7676": 1010, "moham": [1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "affan": 1010, "7756": 1010, "7786": 1010, "srivatsan": [1010, 1011, 1014], "7799": 1010, "7490": [1010, 1011], "6282": 1010, "7301": 1010, "6178": 1010, "7680": 1010, "n_iters_": 1010, "7553": 1010, "ekaterina": [1010, 1011, 1012, 1013, 1015], "krivich": [1010, 1011, 1013], "5874": 1010, "7593": 1010, "7594": 1010, "7660": 1010, "7750": 1010, "7732": 1010, "artsion": 1010, "lieu": [1010, 1011], "grid_scores_": [1010, 1016, 1017], "leaveonelabelout": 1010, "leaveplabelout": 1010, "plural": 1010, "mean_tim": 1010, "std_time": 1010, "3204": 1010, "5291": 1010, "sounder": 1010, "7295": 1010, "5299": 1010, "bravi": 1010, "fouchet": 1010, "calinski_harabaz_scor": [1010, 1012], "harabaz": 1010, "6586": 1010, "4294": 1010, "6667": 1010, "6954": 1010, "unveil": 1010, "yelit": 1010, "basebag": [1010, 1012], "staub": 1010, "5805": 1010, "5251": 1010, "imacul": 1010, "1000x": 1010, "arfa": 1010, "6691": 1010, "6913": 1010, "5762": 1010, "utkarsh": [1010, 1011, 1012, 1013], "upadhyai": [1010, 1011, 1012, 1013], "6846": 1010, "5929": 1010, "podshumok": [1010, 1011], "6173": 1010, "ryad": 1010, "zenin": 1010, "devashish": 1010, "asish": [1010, 1011], "dowl": 1010, "6697": 1010, "ori": 1010, "ziv": 1010, "sear": 1010, "merritt": 1010, "7325": 1010, "7239": 1010, "hong": [1010, 1012, 1016, 1017, 1018], "guangguo": 1010, "jensen": [1010, 1016], "7419": 1010, "gregori": [1010, 1014, 1015, 1016, 1017], "stupp": [1010, 1011], "bernardo": 1010, "stein": 1010, "sparse_func": [1010, 1016], "incr_mean_variance_axi": [1010, 1016], "fuse": 1010, "7049": 1010, "7152": 1010, "load_boston": [1010, 1012, 1017], "7154": 1010, "manvendra": [1010, 1011], "singh": [1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "5540": 1010, "7248": 1010, "6764": 1010, "wenhua": 1010, "6817": 1010, "6902": 1010, "leonieborn": 1010, "5141": 1010, "4995": 1010, "5012": 1010, "_transform_select": 1010, "7194": 1010, "caio": [1010, 1012, 1014], "oliveira": [1010, 1012, 1014, 1018], "6182": 1010, "6121": 1010, "6472": 1010, "7350": 1010, "russel": [1010, 1011], "smith": [1010, 1011, 1012, 1013, 1014, 1016], "7159": 1010, "yichuan": [1010, 1011], "5460": 1010, "document_clust": 1010, "7353": 1010, "_search": 1010, "_check_param_grid": 1010, "xrang": 1010, "7323": 1010, "viacheslav": 1010, "kovalevskyi": 1010, "7101": 1010, "residual_metr": 1010, "6651": 1010, "reorgan": 1010, "7187": 1010, "7260": 1010, "sebasti\u00e1n": 1010, "vanrel": 1010, "leaveplabelsout": 1010, "6660": 1010, "unprefix": 1010, "7261": 1010, "aditya": [1010, 1012, 1013, 1014, 1018, 1019], "joshi": [1010, 1012, 1018], "loginov": 1010, "minyushkin": 1010, "rudi": 1010, "abadi": [1010, 1011], "saint": 1010, "alexfield": 1010, "alvaro": [1010, 1012], "ulloa": 1010, "alyssaq": 1010, "amlan": 1010, "kar": 1010, "giessel": 1010, "jackson": [1010, 1011, 1013], "murrai": [1010, 1011], "arafat": 1010, "archit": 1010, "asnt": 1010, "b0noi": 1010, "behzad": 1010, "tabibian": 1010, "kratzwald": 1010, "bhargav": 1010, "mangipudi": 1010, "blakeflei": 1010, "brandon": [1010, 1011, 1018, 1019], "carter": [1010, 1011, 1019], "camilo": 1010, "lamu": 1010, "carol": [1010, 1011], "Willing": [1010, 1011], "cass": 1010, "ceshin": 1010, "truong": 1010, "codevig": 1010, "shiebler": 1010, "hnyk": [1010, 1011], "elli": [1010, 1013], "nicholson": [1010, 1011, 1012], "thaler": 1010, "warshaw": 1010, "lasagna": 1010, "deborah": [1010, 1011], "definitelyuncertain": 1010, "didi": [1010, 1011, 1012, 1013], "zev": [1010, 1011, 1012, 1013], "dsquareindia": 1010, "edwinensa": 1010, "elia": 1010, "kuth": 1010, "fabio": 1010, "ticconi": 1010, "fisach": 1010, "donovan": 1010, "ghg": 1010, "giovanni": [1010, 1012], "cherubin": 1010, "lanzani": 1010, "glenn": 1010, "qian": [1010, 1015], "mohr": 1010, "govin": 1010, "vatsan": 1010, "reda": 1010, "gustav": 1010, "m\u00f6rtberg": 1010, "halwai": 1010, "harizo": [1010, 1011], "rajaona": [1010, 1011], "hashcode55": 1010, "hdmetor": 1010, "hobson": 1010, "lane": 1010, "bown": 1010, "igor": [1010, 1011, 1017], "andriushchenko": [1010, 1011], "inki": 1010, "hwang": 1010, "isaac": [1010, 1011, 1013, 1014], "sijaranamu": 1010, "iver": 1010, "jordal": 1010, "jackmartin": 1010, "fiedler": 1010, "routlei": 1010, "zike": 1010, "janna": 1010, "brettingen": 1010, "jarfa": 1010, "laska": 1010, "jblackburn": 1010, "levesqu": 1010, "hintz": 1010, "jeremynixon": 1010, "jeroen": 1010, "jessica": 1010, "jill": 1010, "j\u00eann": 1010, "vie": 1010, "jia": 1010, "jiyuan": 1010, "johannah": 1010, "boersma": 1010, "moeller": 1010, "striebel": [1010, 1011], "joncral": 1010, "jordi": 1010, "munoz": [1010, 1016], "jrfiedler": 1010, "juliankahnert": 1010, "juliathebrav": 1010, "kaichogami": 1010, "lyon": [1010, 1011], "kingjr": 1010, "kjell": 1010, "krishna": [1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019], "kalyan": 1010, "krishnakalyan3": 1010, "kvle": 1010, "putnam": 1010, "ldavid": 1010, "leig": 1010, "leightonzhang": 1010, "leland": [1010, 1011, 1012, 1014, 1015], "mcinn": [1010, 1011, 1012, 1014, 1015], "liang": [1010, 1015, 1016], "hsieh": 1010, "lizsz": 1010, "l\u00e9oni": 1010, "born": 1010, "maniteja": [1010, 1011, 1012], "nandana": [1010, 1011, 1012], "marco": [1010, 1012, 1013, 1017, 1018, 1019], "bao": [1010, 1018], "szepieniec": 1010, "madsen": [1010, 1012], "massil": 1010, "matheu": 1010, "duboi": [1010, 1012], "moroz": 1010, "scherer": 1010, "michiaki": 1010, "ariga": 1010, "moussa": 1010, "taifi": 1010, "mrandrewandrad": 1010, "mridul": 1010, "seth": 1010, "nadya": 1010, "naoya": [1010, 1011, 1012, 1013], "kanai": [1010, 1011, 1012], "nickledav": 1010, "nico": [1010, 1017], "ningchi": 1010, "nlathia": 1010, "okbalefthand": 1010, "okhlopkov": [1010, 1011], "pano": 1010, "lourida": 1010, "strickland": 1010, "perrin": 1010, "letelli": 1010, "pestrickland": 1010, "practicalswift": 1010, "qimu": 1010, "zheng": [1010, 1011, 1016], "rachit": [1010, 1016, 1019], "kansal": 1010, "ramana": [1010, 1011], "randi": 1010, "olson": 1010, "lutz": [1010, 1014, 1017], "schucker": 1010, "jain": [1010, 1011, 1012, 1016, 1018, 1019], "ruifeng": [1010, 1011, 1016], "r\u00e9my": 1010, "l\u00e9one": 1010, "saihttam": 1010, "saiw": 1010, "yeung": 1010, "shleifer": [1010, 1011], "sartaj": 1010, "sasank": 1010, "chilamkurthi": 1010, "seal": 1010, "shagun": 1010, "sodhani": 1010, "shanmuga": 1010, "shashank": [1010, 1016], "shekhar": 1010, "shawpan": 1010, "shengxiduan": 1010, "shota": 1010, "shuckle16": 1010, "smedbergm": 1010, "srvanrel": 1010, "leriqu": [1010, 1012], "taranjeet": 1010, "themrmax": [1010, 1011], "hallock": 1010, "moreau": [1010, 1011, 1012, 1013, 1014], "tkammi": 1010, "toastedcornflak": [1010, 1011], "tomdlt": 1010, "toshihiro": [1010, 1011, 1017], "kamishima": [1010, 1011], "tracer0tong": 1010, "hauck": 1010, "vo": [1010, 1018], "varun": [1010, 1011, 1012, 1018, 1019], "jewalikar": 1010, "vikram": [1010, 1019], "villu": 1010, "ruusmann": 1010, "walter": 1010, "waterponei": [1010, 1011], "wenjian": 1010, "welch": 1010, "wyseguy7": 1010, "xyguo": [1010, 1012], "yanlend": 1010, "yen": [1010, 1011], "yenchenlin": 1010, "yoav": 1010, "zivori": 1010, "10723": [1011, 1012], "9623": 1011, "undocu": 1011, "deleteri": 1011, "9677": 1011, "ashutosh": [1011, 1012, 1014, 1016], "correlation_model": 1011, "regression_model": 1011, "belatedli": 1011, "9717": 1011, "9693": 1011, "steingold": [1011, 1012], "9711": 1011, "goncalo": [1011, 1012], "rodrigu": [1011, 1012, 1017], "9641": 1011, "bourbeau": [1011, 1012, 1013], "9865": 1011, "sachin": [1011, 1012, 1018], "kelkar": [1011, 1012, 1014], "9922": 1011, "charli": [1011, 1012], "brummitt": [1011, 1012], "9945": 1011, "9830": 1011, "9600": 1011, "kerimov": [1011, 1012], "9593": 1011, "reiichiro": [1011, 1012], "nakano": [1011, 1012], "9604": 1011, "interim": 1011, "9558": 1011, "9847": 1011, "joan": [1011, 1012, 1013, 1014], "massich": [1011, 1012, 1013, 1014], "oli": 1011, "blum": 1011, "9697": 1011, "9750": 1011, "9788": 1011, "9815": 1011, "9802": 1011, "vrishank": [1011, 1012], "bhardwaj": [1011, 1012], "nagarjuna": [1011, 1012], "nathaniel": [1011, 1012, 1014], "diegodlh": [1011, 1012], "jkleint": [1011, 1012], "oliblum90": [1011, 1012], "pasbi": [1011, 1012], "lawson": [1011, 1012, 1013], "nielsenmarkus11": [1011, 1012], "excit": 1011, "cautiou": 1011, "min_impurity_split": 1011, "7823": [1011, 1012], "8446": 1011, "5279": 1011, "8363": 1011, "5295": 1011, "7388": 1011, "userguid": 1011, "7655": 1011, "karan": [1011, 1012, 1013], "desai": [1011, 1013, 1016, 1017, 1019], "7739": 1011, "gasquez": 1011, "8120": 1011, "neeraj": 1011, "gangwar": 1011, "7548": 1011, "9206": 1011, "7441": 1011, "6101": 1011, "8698": 1011, "7794": 1011, "herilalaina": [1011, 1012, 1014], "rakotoarison": [1011, 1012, 1014], "5036": 1011, "4939": 1011, "esuli": [1011, 1016], "n_skips_": 1011, "7914": 1011, "horrel": 1011, "8591": 1011, "hadrien": [1011, 1014], "7838": 1011, "8835": 1011, "8061": 1011, "cordier": 1011, "6288": 1011, "9145": 1011, "reddi": [1011, 1012, 1013, 1018], "chinthala": 1011, "7721": 1011, "crall": [1011, 1017], "7685": 1011, "tommi": [1011, 1012, 1013], "l\u00f6fstedt": 1011, "9277": 1011, "hongkahjun": 1011, "7089": 1011, "randomized_svd_low_rank": 1011, "9067": 1011, "6181": 1011, "wendling": 1011, "8065": 1011, "lejeun": 1011, "7567": 1011, "jay": 1011, "doepk": 1011, "7573": 1011, "romain": [1011, 1016], "brault": 1011, "5229": 1011, "7990": 1011, "8586": 1011, "7723": 1011, "8028": 1011, "booth": 1011, "8005": 1011, "7863": 1011, "7506": 1011, "5991": 1011, "8845": 1011, "8053": 1011, "8282": 1011, "8117": 1011, "9259": 1011, "8094": 1011, "8335": 1011, "poughon": 1011, "7880": 1011, "karnofski": 1011, "8931": 1011, "attractador": [1011, 1012], "8002": 1011, "8549": 1011, "zerodivisionerror": [1011, 1014, 1020], "7501": 1011, "dominik": 1011, "krzeminski": 1011, "7970": 1011, "8006": 1011, "p\u00f6lsterl": [1011, 1014, 1017], "8936": 1011, "8672": 1011, "mike": 1011, "benfield": 1011, "broke": 1011, "8068": 1011, "5732": 1011, "ytrue": 1011, "ypred": 1011, "8087": 1011, "7983": 1011, "8512": 1011, "8251": 1011, "aivision2020": 1011, "5814": 1011, "7849": 1011, "jair": 1011, "montoya": 1011, "martinez": 1011, "randomizedlasso": 1011, "5359": 1011, "9302": 1011, "8160": 1011, "8224": 1011, "gedeck": 1011, "vathsala": [1011, 1012, 1013, 1014], "achar": [1011, 1012, 1013, 1014], "9022": 1011, "mehmet": [1011, 1017], "basbug": 1011, "9024": 1011, "8973": 1011, "paulo": [1011, 1017, 1019], "haddad": 1011, "unmeaning": 1011, "6573": 1011, "quazi": [1011, 1012], "marufur": 1011, "rahman": [1011, 1012, 1016], "9239": 1011, "andr": [1011, 1018], "ambrosio": 1011, "boechat": 1011, "early_exager": 1011, "assertionerror": 1011, "8992": 1011, "7954": 1011, "foreman": 1011, "9105": 1011, "9108": 1011, "8306": 1011, "7872": 1011, "_c_step": 1011, "3367": 1011, "steward": 1011, "8768": 1011, "detomaso": 1011, "6507": 1011, "7819": 1011, "jayzed82": 1011, "6126": 1011, "7814": 1011, "7702": 1011, "9219": 1011, "7771": 1011, "ang": 1011, "randomizedlogisticregress": 1011, "8259": 1011, "mandatorili": 1011, "7565": 1011, "8181": 1011, "basesearchcv": [1011, 1012], "8344": 1011, "eriksson": 1011, "7661": 1011, "8295": 1011, "batula": 1011, "dylan": [1011, 1014], "werner": [1011, 1016], "meier": 1011, "7365": 1011, "aleksandr": 1011, "sandrovskii": 1011, "5697": 1011, "stijn": 1011, "tonk": 1011, "6250": 1011, "8093": 1011, "bull": 1011, "9507": 1011, "7356": 1011, "dingwal": 1011, "_check_target": 1011, "8377": 1011, "5211": 1011, "rhinehart": 1011, "8159": 1011, "8198": 1011, "fetch_": 1011, "7944": 1011, "7825": 1011, "kathleen": 1011, "7376": 1011, "7331": 1011, "yangarbit": 1011, "__getstate__": [1011, 1019], "obstruct": 1011, "8316": 1011, "holger": 1011, "8010": 1011, "7986": 1011, "najera": 1011, "9289": 1011, "makedir": 1011, "9284": 1011, "sebastin": [1011, 1012], "alert": 1011, "lgtm": 1011, "9278": 1011, "heli": 1011, "8449": 1011, "9078": 1011, "purport": 1011, "sergul": [1011, 1012, 1015], "aydor": [1011, 1012, 1015], "8922": 1011, "8137": 1011, "8139": 1011, "8995": 1011, "2879": 1011, "7459": 1011, "7812": 1011, "9100": 1011, "8481": 1011, "8174": 1011, "tahar": 1011, "zanouda": 1011, "8854": 1011, "8874": 1011, "7998": 1011, "jiacheng": 1011, "argpartit": 1011, "frombuffer_empti": 1011, "rankdata": 1011, "safe_copi": 1011, "eig": 1011, "fast_dot": 1011, "pinvh": [1011, 1013], "graph_laplacian": 1011, "sparsetool": 1011, "connected_compon": 1011, "check_decision_proba_consist": 1011, "shubham": [1011, 1014], "9019": 1011, "baseensembl": [1011, 1014], "7464": 1011, "rishikesh": 1011, "taehoon": [1011, 1012], "aashil": 1011, "balakumaran": [1011, 1012], "manoharan": [1011, 1012], "petrov": [1011, 1012], "minghui": [1011, 1012], "jc": [1011, 1012], "alexandercbooth": 1011, "chkoar": 1011, "aarshai": [1011, 1012], "gilliam": 1011, "subramanyam": 1011, "clement": [1011, 1012, 1016], "joudet": [1011, 1012], "robl": 1011, "kati": 1011, "luangkot": 1011, "lacchia": 1011, "akshay0724": 1011, "omtcyfz": 1011, "rickiepark": 1011, "jbdelafoss": 1011, "vivek": [1011, 1012, 1013], "elliott": 1011, "ldirer": 1011, "sid": 1011, "kapur": 1011, "midina": 1011, "mikebenfield": 1011, "sourav": [1011, 1014], "aseem": 1011, "bansal": 1011, "aishwaryark": 1011, "howel": 1011, "dokato": 1011, "kathi": [1011, 1014], "ferria": 1011, "nikita": [1011, 1012, 1014, 1017, 1018, 1019], "basil": 1011, "beirouti": 1011, "possa": 1011, "bednar": 1011, "janin": 1011, "harper": 1011, "artsiom": 1011, "ligo": 1011, "rahn": [1011, 1014], "seanpwilliam": 1011, "julian": [1011, 1012], "kuhlmann": [1011, 1012], "aubert": 1011, "j\u00f6rn": 1011, "hee": [1011, 1014], "shivamgargsya": [1011, 1015, 1017], "kat": 1011, "hempstalk": 1011, "kaushik": [1011, 1018, 1020], "lakshmikanth": 1011, "kennedi": [1011, 1014], "yap": 1011, "kiril": [1011, 1012, 1014, 1016], "bobyrev": 1011, "imbert": [1011, 1013, 1016, 1018], "lera": 1011, "douillard": 1011, "mainak": 1011, "tobychees": [1011, 1012], "manraj": 1011, "marc": [1011, 1013, 1014], "meketon": 1011, "marcofalk": 1011, "gilch": 1011, "mehul": 1011, "ahuja": [1011, 1018, 1019], "goetz": [1011, 1012], "dezub": 1011, "baumgartn": 1011, "vibrantabhi19": 1011, "golubin": 1011, "milen": 1011, "paskov": 1011, "antonin": 1011, "carett": 1011, "morikko": 1011, "mrmjauh": 1011, "nalepa": 1011, "namiya": 1011, "narinek": [1011, 1012], "angu": [1011, 1012, 1018], "nicol": 1011, "vavrova": 1011, "nitish": 1011, "pandei": [1011, 1016], "daniil": 1011, "olegovich": 1011, "craze": 1011, "om": 1011, "parmind": 1011, "patrick": [1011, 1012, 1017, 1018], "carlson": 1011, "pei": 1011, "ganssl": 1011, "lorek": 1011, "pete": [1011, 1015, 1016], "bachant": 1011, "csizsek": 1011, "jong": 1011, "puneet": 1011, "mathur": [1011, 1013, 1014, 1019, 1020], "quentin": [1011, 1012, 1013], "hibon": 1011, "1kastner": 1011, "rameshwar": [1011, 1012], "bhaskaran": [1011, 1012], "rebecca": 1011, "bilbro": 1011, "remi": 1011, "rampin": 1011, "pratik": 1011, "agarw": [1011, 1012, 1014], "sailesh": [1011, 1012], "choyal": [1011, 1012], "samson": 1011, "samu\u00ebl": 1011, "weber": 1011, "sarah": [1011, 1013, 1016], "abhyudai": 1011, "sharan": [1011, 1012], "yalburgi": [1011, 1012], "willduan": 1011, "siddharth": [1011, 1015], "almer": 1011, "theofilo": 1011, "papapanagiot": 1011, "alison": 1011, "boucher": 1011, "folkman": 1011, "jung": [1011, 1015, 1019], "shenoi": 1011, "vilhelm": [1011, 1012], "ehrenheim": [1011, 1012], "alan": [1011, 1012, 1015, 1017, 1018], "yee": [1011, 1012], "warut": [1011, 1012], "vijitbenjaronk": [1011, 1012], "yuichi": 1011, "fujikawa": 1011, "affanv14": 1011, "andreh7": 1011, "bradi": 1011, "salz": 1011, "campustrampu": 1011, "agamemnon": [1011, 1012, 1013, 1014, 1016, 1017], "krasouli": [1011, 1012, 1013, 1014, 1016, 1017], "ditenberg": 1011, "elena": 1011, "sharova": 1011, "filipj8": [1011, 1012], "fukatani": 1011, "guiniol": 1011, "guoci": 1011, "hakaa1": [1011, 1012], "xhy": 1011, "jakirkham": [1011, 1012, 1013, 1019], "jaroslaw": 1011, "jeroko": 1011, "jmontoyam": 1011, "josephsalmon": [1011, 1012, 1013], "jschendel": [1011, 1012], "leereev": 1011, "hahn": [1011, 1012], "mathurinm": [1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019], "mehak": 1011, "sachdeva": 1011, "mlewis1729": 1011, "mlliou112": 1011, "mthorrel": [1011, 1014], "ndingwal": 1011, "nuff": 1011, "plagre": 1011, "pldtc325": 1011, "breno": [1011, 1012], "olsen": 1011, "alfano": 1011, "burn": [1011, 1012], "polmauri": 1011, "charlton": 1011, "austin": 1011, "chayant": 1011, "t15h": 1011, "chinmaya": 1011, "pancholi": 1011, "danielsen": 1011, "chung": [1011, 1012], "pravarmahajan": [1011, 1012], "dariu": [1011, 1012], "morawiec": [1011, 1012], "haberth\u00fcr": 1011, "heryanto": 1011, "kirkbi": [1011, 1012], "rashchedrin": 1011, "gertrud": 1011, "devansh": [1011, 1012], "dickson": 1011, "baxlei": 1011, "don86": 1011, "klarup": 1011, "elizabeth": [1011, 1013, 1016], "ferriss": 1011, "ellen": 1011, "egli": 1011, "chieh": [1011, 1012], "chou": [1011, 1012], "grzegorz": [1011, 1014], "szpak": [1011, 1014], "zxcvbniu": 1011, "icyblad": 1011, "ilya": 1011, "laughlin": 1011, "iv\u00e1n": [1011, 1017], "vall\u00e9": 1011, "aur\u00e9lien": [1011, 1012, 1013, 1017, 1018], "bellet": [1011, 1012, 1013], "mahapatra": 1011, "bundl": [1012, 1013], "indexerror": [1012, 1013], "11756": [1012, 1013], "14237": [1012, 1013], "schuder": [1012, 1013, 1014], "13903": [1012, 1013], "13124": [1012, 1013], "13772": [1012, 1013], "vya": [1012, 1013, 1014], "12949": 1012, "prabakaran": [1012, 1013, 1016, 1018, 1019], "kumaresshan": [1012, 1013, 1016], "12946": 1012, "tallott": 1012, "13276": 1012, "13005": 1012, "13312": 1012, "11295": 1012, "vacaliuc": [1012, 1013], "13046": 1012, "12360": 1012, "aakanksha": 1012, "13134": 1012, "sandro": [1012, 1019], "casagrand": [1012, 1013], "12881": 1012, "13165": 1012, "13221": 1012, "bertrandhaut": [1012, 1013], "raghunathan": [1012, 1013, 1014, 1015, 1016, 1017, 1018], "dowon": [1012, 1013], "aria": [1012, 1013, 1019], "fibins": [1012, 1013], "finn": [1012, 1013], "shea": [1012, 1013], "joaak": [1012, 1013], "m\u00e9hault": [1012, 1013], "kms15": [1012, 1013], "kossori": [1012, 1013], "aruku": [1012, 1013], "lakshya": [1012, 1013, 1014], "ib\u00e1\u00f1ez": [1012, 1013, 1016], "gorelli": [1012, 1013, 1017, 1019], "marcogorelli": [1012, 1013], "mferrari3": [1012, 1013], "micka\u00ebl": [1012, 1013], "schoentgen": [1012, 1013], "pavlo": [1012, 1013], "kalli": [1012, 1013], "glaser": [1012, 1013], "pierretallott": [1012, 1013, 1014], "kapoor": [1012, 1013], "sandrocasagrand": [1012, 1013], "tashai": [1012, 1013], "vishaal": [1012, 1013], "zhuyi": [1012, 1013], "ziji": [1012, 1013], "zj": [1012, 1013], "poh": [1012, 1013], "12704": 1012, "12701": 1012, "12685": 1012, "12699": 1012, "adanhawth": [1012, 1013], "stine": [1012, 1013], "feda": [1012, 1013], "curic": [1012, 1013], "jeremiedbb": [1012, 1013, 1014], "katrin": [1012, 1013], "leinweb": [1012, 1013], "muhammad": [1012, 1013, 1017], "hassaan": [1012, 1013], "rafiqu": [1012, 1013], "paczuski": [1012, 1013], "waterburi": [1012, 1013], "shivam": [1012, 1013, 1014], "kotwalia": [1012, 1013], "12159": 1012, "12105": 1012, "11912": 1012, "12304": 1012, "12339": 1012, "12246": 1012, "10811": 1012, "feldbauer": [1012, 1013, 1014, 1015, 1018], "12441": 1012, "12517": 1012, "12234": 1012, "12165": 1012, "12388": 1012, "connor": [1012, 1017], "tann": [1012, 1017], "12393": 1012, "12122": 1012, "sharedmem": 1012, "12518": 1012, "12481": 1012, "12612": 1012, "12211": 1012, "lisa": [1012, 1013, 1015, 1016, 1018, 1019], "hannel": [1012, 1013], "melissa": 1012, "ferrari": 1012, "12451": 1012, "12171": 1012, "12365": 1012, "_encod": 1012, "12514": 1012, "12522": 1012, "12471": 1012, "marzinotto": [1012, 1013], "12317": 1012, "12338": 1012, "bauk": [1012, 1013], "12625": 1012, "sklearn_site_joblib": 1012, "12350": 1012, "12467": 1012, "unvendor": 1012, "12345": 1012, "navarret": [1012, 1013, 1014], "benjastudio": [1012, 1013], "cheuk": [1012, 1013], "connossor": [1012, 1013], "levinson": [1012, 1013], "kieker": [1012, 1013], "kataev": [1012, 1013], "dillon": [1012, 1013, 1014], "gardner": [1012, 1013], "vukolov": [1012, 1013], "caselli": [1012, 1013], "gauravahlawat": [1012, 1013], "gustavo": [1012, 1013, 1018], "haroldfox": [1012, 1013], "jacklangerman": [1012, 1013], "jacopo": [1012, 1013], "notarstefano": [1012, 1013], "janvanrijn": [1012, 1013], "jdethuren": [1012, 1013], "koen": [1012, 1013], "kushal": [1012, 1013], "chauhan": [1012, 1013], "jie": [1012, 1013, 1016], "lili": [1012, 1013], "xiong": [1012, 1013, 1018], "liam": [1012, 1013], "melsyt": [1012, 1013], "nichola": [1012, 1013, 1015], "shebanov": [1012, 1013], "oleksandr": [1012, 1013, 1014, 1015, 1018], "pavlyk": [1012, 1013, 1014, 1015], "hausamann": [1012, 1013], "pulkit": [1012, 1013, 1015], "maloo": [1012, 1013], "batista": [1012, 1013, 1017], "radostin": [1012, 1013], "stoyanov": [1012, 1013], "ramil": [1012, 1013], "nugmanov": [1012, 1013], "rebekah": [1012, 1013, 1014], "roopam": [1012, 1013], "tiernei": [1012, 1013, 1014], "sylvainlan": [1012, 1013, 1014, 1015, 1016], "takingitcasu": [1012, 1013], "tulio": [1012, 1013], "xing": [1012, 1013], "zach": [1012, 1013, 1018], "mountain": 1012, "sorri": 1012, "basemultilayerperceptron": [1012, 1014], "11924": 1012, "macbook": 1012, "9354": 1012, "9372": 1012, "astel": 1012, "10933": 1012, "hansen": 1012, "10471": 1012, "gaurav": [1012, 1013, 1014, 1015, 1016, 1018], "dhingra": [1012, 1013, 1016], "8003": 1012, "jo\u00ebl": 1012, "billaud": 1012, "10059": 1012, "braun": 1012, "9612": 1012, "jonatan": 1012, "samoocha": 1012, "8129": 1012, "margeta": 1012, "k_means_elkan": 1012, "11353": 1012, "11901": 1012, "9875": 1012, "9012": 1012, "11315": 1012, "9041": 1012, "9858": 1012, "artiem": 1012, "krinitsyn": 1012, "9908": 1012, "8617": 1012, "maskani": [1012, 1014, 1015, 1016], "filali": 1012, "konstantino": 1012, "katriopla": 1012, "10774": 1012, "catalfo": 1012, "10795": 1012, "takeshi": [1012, 1017, 1018, 1019], "yoshizawa": 1012, "11082": 1012, "sadhana": 1012, "srinivasan": [1012, 1015], "9731": 1012, "10045": 1012, "fetch_mldata": 1012, "11466": 1012, "6374": 1012, "normalize_compon": [1012, 1014], "11585": 1012, "ivan": [1012, 1013, 1016, 1019], "panico": [1012, 1016], "11420": 1012, "6452": 1012, "walli": 1012, "gauz": 1012, "9492": 1012, "8484": 1012, "9886": 1012, "underflow": [1012, 1017], "10142": 1012, "5956": 1012, "_class_mean": 1012, "_class_cov": 1012, "10898": 1012, "nanxin": 1012, "9832": 1012, "11951": 1012, "r\u00fcdiger": [1012, 1013, 1015], "busch": [1012, 1013, 1015], "9707": 1012, "wan": 1012, "7071": 1012, "9157": 1012, "11176": 1012, "forsyth": 1012, "11542": 1012, "anna": 1012, "9524": 1012, "9723": 1012, "10908": 1012, "10899": 1012, "melderi": 1012, "10101": 1012, "10\u2079": 1012, "9147": 1012, "clae": 1012, "fredrik": 1012, "mannbi": 1012, "10441": 1012, "mayur": 1012, "kulkarni": 1012, "6689": 1012, "nihar": 1012, "sheth": 1012, "11293": 1012, "9656": 1012, "greenhal": 1012, "n_features_to_comput": 1012, "9222": 1012, "hoh": 1012, "9234": 1012, "andrewww": 1012, "8075": 1012, "11211": 1012, "9484": 1012, "dalla": 1012, "card": 1012, "9043": 1012, "10112": 1012, "logistic_regression_path": [1012, 1013], "11724": 1012, "9939": 1012, "westov": 1012, "10998": 1012, "vazelh": [1012, 1013, 1014], "10071": 1012, "10153": 1012, "d\u00f6pfert": 1012, "10095": 1012, "cv_valu": 1012, "10297": 1012, "mabel": [1012, 1016], "10581": 1012, "yacin": 1012, "mazari": 1012, "10687": 1012, "10836": 1012, "aishwarya": 1012, "10397": 1012, "10992": 1012, "11327": 1012, "11905": 1012, "9837": 1012, "10593": 1012, "10610": 1012, "8554": 1012, "9775": 1012, "10827": 1012, "osa": 1012, "8066": 1012, "10587": 1012, "3840": 1012, "niederb\u00fchl": 1012, "9521": 1012, "11124": 1012, "arya": 1012, "11160": 1012, "barkhorn": 1012, "11679": 1012, "pacha": 1012, "10845": 1012, "perez": [1012, 1019], "parra": 1012, "toledano": 1012, "10999": 1012, "memoryerror": [1012, 1016], "11135": 1012, "10377": 1012, "9786": 1012, "10093": 1012, "alexryndin": 1012, "9772": 1012, "9515": 1012, "liddel": 1012, "manh": 1012, "dao": 1012, "9851": 1012, "10280": 1012, "10336": 1012, "haoran": 1012, "basemixtur": [1012, 1013], "10740": 1012, "10869": 1012, "g\u00e9ron": 1012, "9686": 1012, "11310": 1012, "_fit_and_scor": 1012, "11576": 1012, "ronsin": [1012, 1013], "_run_search": 1012, "9599": 1012, "11006": 1012, "11557": 1012, "boucaud": 1012, "iid": 1012, "9085": 1012, "10677": 1012, "zhdanovich": 1012, "10982": 1012, "juliet": 1012, "lawton": 1012, "10928": 1012, "solutu": 1012, "immensu": 1012, "9257": 1012, "8190": 1012, "alcorn": 1012, "9681": 1012, "mottl": [1012, 1013], "10005": 1012, "10346": 1012, "tobia": [1012, 1017, 1019], "10887": 1012, "11136": 1012, "4394": 1012, "9579": 1012, "kober": 1012, "9655": 1012, "bjerr": 1012, "11556": 1012, "11774": 1012, "9456": 1012, "unexpectedli": 1012, "9304": 1012, "11144": [1012, 1013], "9151": 1012, "10521": 1012, "7668": 1012, "9647": 1012, "10195": 1012, "10192": 1012, "11272": 1012, "11467": 1012, "11505": 1012, "giusepp": [1012, 1013], "costa": [1012, 1017], "10210": 1012, "11520": 1012, "11011": 1012, "11005": 1012, "11308": 1012, "11206": 1012, "11306": 1012, "10437": 1012, "lucija": 1012, "gregov": 1012, "10452": 1012, "10181": 1012, "nirvan": [1012, 1016], "anjirbag": 1012, "9399": 1012, "10913": 1012, "rodrigo": 1012, "agundez": 1012, "10458": 1012, "9816": 1012, "newei": 1012, "11042": 1012, "11235": 1012, "active_features_": 1012, "feature_indices_": 1012, "n_values_": 1012, "9726": 1012, "10829": 1012, "gilberto": 1012, "olimpio": 1012, "10655": 1012, "python2": 1012, "10412": 1012, "jiongyan": 1012, "9497": 1012, "8361": 1012, "neo": 1012, "_criterion": 1012, "classificationcriterion": 1012, "regressioncriterion": 1012, "10325": 1012, "camil": 1012, "stap": 1012, "basedecisiontre": [1012, 1013, 1016], "10536": 1012, "ohayon": [1012, 1013, 1020], "11464": 1012, "stott": 1012, "10663": 1012, "10229": 1012, "11553": 1012, "10881": 1012, "sevin": 1012, "ridge_regress": [1012, 1013, 1019], "10306": 1012, "siebert": 1012, "11741": 1012, "11166": 1012, "11010": 1012, "lami": 1012, "11596": 1012, "marcu": 1012, "voss": 1012, "9569": 1012, "12462": 1012, "zachariah": 1012, "10474": 1012, "10500": 1012, "9701": 1012, "9378": 1012, "check_set_param": 1012, "7738": 1012, "alvin": 1012, "chiang": 1012, "8102": 1012, "ankita": 1012, "sinha": 1012, "check_methods_subset_invari": [1012, 1018], "10428": 1012, "check_sample_weights_pandas_seri": 1012, "11558": 1012, "211217613": 1012, "absolutelynowarranti": 1012, "richi": 1012, "halford": 1012, "adelr": 1012, "adityadaflapurkar": 1012, "aidan": 1012, "fitzgerald": 1012, "aishgrt1": 1012, "akash": 1012, "shivram": 1012, "lenail": [1012, 1016], "egg": 1012, "diaz": 1012, "amanda": [1012, 1015, 1016, 1017, 1018], "aniruddha": 1012, "annaayzenshtat": 1012, "antonio": [1012, 1014], "quinonez": 1012, "anubhav": 1012, "marwaha": 1012, "arik": 1012, "pamnani": 1012, "ozga": 1012, "arunava": 1012, "geron": [1012, 1017, 1018], "ayush": [1012, 1017], "bangda": 1012, "bastian": 1012, "venthur": 1012, "benn": 1012, "koonc": 1012, "cclauss": 1012, "chadi": 1012, "kamar": 1012, "holdgraf": 1012, "hirsch": 1012, "hogan": 1012, "cnx": 1012, "cwitt": 1012, "ferreira": [1012, 1017, 1018], "gomez": [1012, 1019], "klevebr": 1012, "shwed": 1012, "mohn": [1012, 1016], "danil": 1012, "baibak": [1012, 1013], "beach": 1012, "pickup": 1012, "derek": 1012, "niederhut": [1012, 1014], "dilutedsauc": 1012, "dlovel": 1012, "dor": 1012, "dougla": 1012, "duhaim": 1012, "tuzova": 1012, "eunji": 1012, "farahsae": 1012, "raimundo": 1012, "fenx": 1012, "frankhui": 1012, "franz": 1012, "wompner": 1012, "freija": 1012, "descamp": 1012, "frsi": 1012, "calvo": [1012, 1013], "georgi": [1012, 1015], "peev": [1012, 1015], "gkevinyen5418": 1012, "vermeil": 1012, "hongh": 1012, "hossein": [1012, 1013, 1014], "pourbozorg": [1012, 1013, 1014], "hristo": [1012, 1019], "hunan": 1012, "rostomyan": 1012, "iampat": 1012, "jaewon": 1012, "malcolm": 1012, "jami": 1012, "wolosonovich": 1012, "jeb": 1012, "bearer": 1012, "jinkun": 1012, "jjabl": 1012, "johnstott": 1012, "jotasi": 1012, "julietcl": 1012, "shenk": 1012, "karl": 1012, "kasper": 1012, "primdal": 1012, "lauritzen": 1012, "ksemb": 1012, "kuai": [1012, 1013], "kyeongpil": 1012, "kang": [1012, 1014], "kye": 1012, "kyledrogo": 1012, "l\u00e9o": 1012, "liutong": 1012, "lizao": 1012, "lkjcalc": 1012, "louib": [1012, 1013], "luciano": [1012, 1019], "luke": 1012, "persola": 1012, "markiwanchyshyn": 1012, "marsgui": 1012, "gubri": [1012, 1013], "koko": [1012, 1018, 1019], "copeland": [1012, 1013], "meghann": [1012, 1014], "minh": 1012, "jamaoui": [1012, 1013, 1016], "mohammad": [1012, 1013], "shahebaz": 1012, "muayyad": 1012, "alsadi": 1012, "nabarun": 1012, "pal": [1012, 1018], "narendran": 1012, "santhanam": 1012, "suh": 1012, "eng": 1012, "av": 1012, "nicolau": 1012, "werneck": 1012, "titov": [1012, 1014, 1017, 1018], "nilesh": 1012, "kevlani": 1012, "notmatthancock": [1012, 1014], "nzw": 1012, "oren": 1012, "milman": 1012, "osaid": 1012, "rehman": 1012, "nasir": 1012, "fernand": [1012, 1018, 1019], "olden": 1012, "pierreablin": 1012, "pietruh": 1012, "pinaki": 1012, "nath": 1012, "chowdhuri": [1012, 1018], "piotr": [1012, 1013], "szyma\u0144ski": [1012, 1013], "pradeep": [1012, 1013], "raamana": [1012, 1013], "pravar": 1012, "mahajan": [1012, 1014], "qingi": 1012, "rajendra": 1012, "arora": [1012, 1019], "rankylau": 1012, "kosobrodov": 1012, "rragundez": 1012, "sagnik": 1012, "bhattacharya": 1012, "radhakrishnan": 1012, "saqib": 1012, "nizam": 1012, "shamsi": 1012, "satish": 1012, "gigant": [1012, 1014, 1019], "flennerhag": 1012, "sebastien": 1012, "shalil": 1012, "awalei": 1012, "shangwu": [1012, 1013], "sharad": 1012, "vijalapuram": 1012, "shenhanc78": 1012, "rastogi": 1012, "siftikha": 1012, "sinclert": 1012, "p\u00e9rez": 1012, "solutusimmensu": 1012, "somya": 1012, "anand": [1012, 1016], "srajan": 1012, "paliw": 1012, "sriharsha": [1012, 1013], "hatwar": [1012, 1013], "mcdowel": 1012, "syonekura": 1012, "takanori": 1012, "hayashi": 1012, "tarcusx": 1012, "theriley106": 1012, "heavei": 1012, "augspurg": [1012, 1014], "trishnendu": 1012, "ghorai": 1012, "twosigmajab": 1012, "umar": [1012, 1013], "farouk": [1012, 1013], "urvang": [1012, 1014], "patel": [1012, 1014, 1015, 1016, 1018], "vadim": [1012, 1016, 1017], "markovtsev": 1012, "vinit": 1012, "vinod": 1012, "viraj": 1012, "mavani": 1012, "navkal": 1012, "vqean3": [1012, 1013], "vufg": 1012, "wallygauz": 1012, "wdevazelh": 1012, "barnett": 1012, "rosenfeld": 1012, "yime": 1012, "ymazari": 1012, "yufeng": 1012, "griffith": [1012, 1013], "z\u00e9": 1012, "vin\u00edciu": 1012, "zhenq": 1012, "zhiqe": 1012, "xiao": [1012, 1014, 1017, 1018, 1019], "couldn": [1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "12955": 1013, "klopfer": 1013, "14197": 1013, "14024": 1013, "nicolashug": 1013, "13974": 1013, "hoang": [1013, 1014], "fhoang7": 1013, "14393": 1013, "guillem": [1013, 1014, 1019], "subi": [1013, 1014, 1019], "14087": 1013, "14067": 1013, "stalei": [1013, 1014], "14092": 1013, "14053": 1013, "13947": 1013, "instanci": 1013, "suffient": 1013, "13910": 1013, "13894": 1013, "myatt": [1013, 1014], "min_max_axi": 1013, "13741": 1013, "roddi": [1013, 1014], "macsween": [1013, 1014], "14309": 1013, "13864": 1013, "paresh": [1013, 1014], "13877": 1013, "_sag": 1013, "sag_solv": 1013, "3591": 1013, "13317": 1013, "13157": 1013, "13086": 1013, "cole": 1013, "13485": 1013, "assia": 1013, "benbihi": 1013, "13651": 1013, "reloc": 1013, "13486": 1013, "13427": 1013, "couvreur": [1013, 1014], "9069": 1013, "13835": 1013, "10727": 1013, "wood": 1013, "13250": 1013, "13241": 1013, "12143": 1013, "11650": 1013, "non_negative_factor": [1013, 1015, 1016, 1017], "12988": 1013, "8769": 1013, "11000": 1013, "thibault": 1013, "sejourn": 1013, "changedbehaviourwarn": 1013, "11526": 1013, "6848": 1013, "glemaitr": [1013, 1014, 1016], "11727": 1013, "13266": 1013, "13545": 1013, "sorro": 1013, "12807": 1013, "12513": 1013, "12543": 1013, "storch": 1013, "13260": 1013, "13283": 1013, "13524": 1013, "13174": 1013, "13496": 1013, "13620": 1013, "12436": 1013, "12983": 1013, "13251": 1013, "joshuakennethjon": 1013, "12715": 1013, "13164": 1013, "12834": 1013, "leastsquareserror": 1013, "update_terminal_region": 1013, "6463": 1013, "movelikeriv": 1013, "13193": 1013, "12599": 1013, "13779": 1013, "13780": 1013, "12916": 1013, "13641": 1013, "8478": 1013, "12177": 1013, "12583": 1013, "13601": 1013, "danylo": 1013, "densif": 1013, "13240": 1013, "bartosz": 1013, "13562": 1013, "11646": 1013, "11699": 1013, "make_dataset": 1013, "13336": 1013, "toleranbc": 1013, "11754": 1013, "13397": 1013, "fagan": 1013, "12174": 1013, "12972": 1013, "lucio": 1013, "fernandez": 1013, "arjona": 1013, "coeffeci": 1013, "13279": 1013, "13328": 1013, "13389": 1013, "basesgdclassifi": 1013, "13422": 1013, "cl\u00e9ment": [1013, 1017, 1019], "doumouro": 1013, "unhandl": 1013, "13363": 1013, "12821": 1013, "13350": 1013, "j\u00e9r\u00f4me": [1013, 1014, 1015], "dock\u00e8": [1013, 1014, 1015], "9907": 1013, "12232": 1013, "sangeeth": 1013, "11179": 1013, "13151": 1013, "12568": 1013, "8216": 1013, "romuald": 1013, "menuet": 1013, "12732": 1013, "12334": 1013, "13607": 1013, "12855": 1013, "pawel": 1013, "sendyk": 1013, "13628": 1013, "13447": 1013, "10580": 1013, "sandra": [1013, 1019], "mitrov": 1013, "13554": 1013, "celelibi": 1013, "13142": 1013, "11354": 1013, "12613": 1013, "12669": 1013, "torrella": [1013, 1014], "12861": 1013, "8773": 1013, "13366": 1013, "fournier": 1013, "10440": 1013, "12222": 1013, "10058": 1013, "chiotelli": 1013, "12279": 1013, "12582": 1013, "my_pipelin": 1013, "2568": 1013, "make_": 1013, "11364": 1013, "baze": 1013, "petrushev": 1013, "__len__": 1013, "13439": 1013, "12908": 1013, "drew": 1013, "13253": 1013, "12116": 1013, "12197": 1013, "12251": 1013, "float16": 1013, "13007": 1013, "raffaello": 1013, "baluyot": 1013, "13333": 1013, "13459": 1013, "hunter": 1013, "mcgushion": 1013, "8508": 1013, "6261": 1013, "vettigli": 1013, "justglow": 1013, "12300": 1013, "11458": 1013, "mitar": 1013, "milutinov": 1013, "12344": 1013, "13549": 1013, "warn_on_dtyp": 1013, "check_pairwise_arrai": 1013, "13382": 1013, "prathmesh": 1013, "saval": 1013, "11705": 1013, "11973": 1013, "our_rand_r": 1013, "madhura": [1013, 1015, 1016, 1019], "parikh": [1013, 1018, 1019, 1020], "13531": 1013, "check_fit_idempot": 1013, "alberto": [1013, 1017, 1018], "torr": 1013, "amourav": 1013, "assiaben": 1013, "micha\u0142owski": 1013, "brentfagan": 1013, "chenal": [1013, 1014, 1016], "choe": 1013, "drewmjohnston": 1013, "dror": 1013, "atariah": 1013, "esvhd": 1013, "falak": 1013, "gandenberg": 1013, "luqi": 1013, "jf": 1013, "kulbear": 1013, "leandro": [1013, 1017], "hermida": [1013, 1017], "luk": 1013, "manimaran": [1013, 1015, 1016, 1017, 1018], "gaido": 1013, "marinelm": 1013, "masstran": 1013, "roeschk": 1013, "aftab": 1013, "abdela": 1013, "ibraheem": 1013, "mwestt": 1013, "iijima": 1013, "oresti": 1013, "osman": [1013, 1019], "flanagan": [1013, 1014], "soriano": 1013, "peai": 1013, "pim": 1013, "haan": 1013, "raf": 1013, "rajdeep": 1013, "dua": 1013, "ra\u00fal": 1013, "garc\u00eda": [1013, 1014, 1019], "lekhwani": 1013, "varma": 1013, "shiyu": 1013, "duan": [1013, 1015], "smari": [1013, 1014, 1015], "st\u00e9phane": [1013, 1014, 1018, 1019], "surgan12": 1013, "thibsej": 1013, "xhan": 1013, "xinyuliu12": 1013, "zayd": 1013, "hammoudeh": 1013, "16397": [1014, 1015], "16500": 1014, "16505": 1014, "16076": 1014, "shack": [1014, 1015, 1016], "15930": 1014, "inder128": 1014, "15810": 1014, "15898": 1014, "gargsya": 1014, "15933": 1014, "15760": 1014, "15888": 1014, "15936": 1014, "dizietasahi": 1014, "15879": 1014, "bibhash": [1014, 1015], "chandra": [1014, 1015, 1018], "mitra": [1014, 1015, 1019], "15937": 1014, "blyston": [1014, 1015], "15863": 1014, "abstractmethod": 1014, "_check_x": 1014, "basenb": 1014, "15996": 1014, "brigitta": [1014, 1015, 1016], "sip\u0151cz": [1014, 1015, 1016], "15751": 1014, "tirth": [1014, 1015], "15868": 1014, "nikla": [1014, 1015], "smedemark": 1014, "marguli": 1014, "15797": 1014, "15947": 1014, "revamp": 1014, "14849": 1014, "_name_estim": 1014, "_gb": 1014, "facto": 1014, "_birch": 1014, "9250": 1014, "12927": 1014, "deprecationwarn": 1014, "interfer": 1014, "hinder": 1014, "15080": 1014, "14464": 1014, "13575": 1014, "10482": 1014, "13726": 1014, "shuzh": 1014, "9288": 1014, "15057": 1014, "korolev": 1014, "15120": 1014, "7943": 1014, "12303": 1014, "14510": 1014, "14890": 1014, "miguel": 1014, "cabrera": 1014, "14544": 1014, "15304": 1014, "jaim": 1014, "ferrando": 1014, "huerta": 1014, "12068": 1014, "12145": 1014, "13609": 1014, "camila": 1014, "williamson": 1014, "15661": 1014, "15160": 1014, "14259": 1014, "14764": 1014, "14740": 1014, "st\u00e9phan": 1014, "tulken": 1014, "14623": 1014, "sarra": 1014, "habchi": 1014, "15257": 1014, "willocx": 1014, "12650": 1014, "13960": 1014, "multiouput": 1014, "14908": 1014, "martina": [1014, 1016], "vila": [1014, 1016], "15382": 1014, "14933": 1014, "15138": 1014, "cusick": 1014, "14406": 1014, "14012": 1014, "faouzi": [1014, 1015], "13769": 1014, "14194": 1014, "least_absolute_devi": [1014, 1016, 1017], "13896": 1014, "13933": 1014, "14710": 1014, "14869": 1014, "14682": 1014, "hancock": 1014, "5963": 1014, "pablo": [1014, 1017, 1018], "dubou": 1014, "14287": 1014, "15375": 1014, "14305": 1014, "14114": 1014, "15084": 1014, "14294": 1014, "14907": 1014, "14602": 1014, "chawla": 1014, "vectorizermixin": 1014, "14430": 1014, "strip_accents_unicod": 1014, "15100": 1014, "gradi": 1014, "overflowerror": 1014, "15463": 1014, "norvan": 1014, "sahin": 1014, "14520": 1014, "11635": 1014, "alec": 1014, "13704": 1014, "15557": 1014, "14378": 1014, "masashi": [1014, 1016], "shibata": 1014, "ashim": 1014, "bhattarai": 1014, "15010": 1014, "skip_comput": 1014, "13773": 1014, "14356": 1014, "15393": 1014, "venkatachalam": [1014, 1015, 1016, 1017, 1018], "14646": 1014, "14028": 1014, "15429": 1014, "14706": 1014, "14108": 1014, "14170": 1014, "14296": 1014, "13618": 1014, "13995": 1014, "14458": 1014, "14591": 1014, "14864": 1014, "15044": 1014, "15086": 1014, "15038": 1014, "15082": 1014, "13213": 1014, "14647": 1014, "linalgerror": 1014, "13393": 1014, "13707": 1014, "training_data_": 1014, "14357": 1014, "14900": 1014, "socastro": 1014, "9951": 1014, "14936": 1014, "15083": 1014, "12789": 1014, "15274": 1014, "13938": 1014, "15049": 1014, "toccac": 1014, "ptocca": 1014, "13231": 1014, "dong": 1014, "13467": 1014, "14595": 1014, "14865": 1014, "l\u00e9onard": [1014, 1019], "binet": [1014, 1019], "14732": 1014, "14417": 1014, "15625": 1014, "12258": 1014, "14898": 1014, "matcovici": 1014, "14593": 1014, "reboul": 1014, "14549": 1014, "14704": 1014, "15096": 1014, "14629": 1014, "15488": 1014, "15490": 1014, "12569": 1014, "bicker": 1014, "9597": 1014, "wenbo": [1014, 1016], "zhao": [1014, 1016, 1017, 1018, 1019], "14336": 1014, "dexter": 1014, "9274": 1014, "perri": 1014, "13806": 1014, "ana\u00ebl": 1014, "beaugnon": 1014, "15119": 1014, "15053": 1014, "13290": 1014, "13987": 1014, "_pairwis": [1014, 1016], "13925": 1014, "robson": 1014, "15524": 1014, "xun": [1014, 1016], "12557": 1014, "border": 1014, "14286": 1014, "15099": 1014, "baselibsvm": 1014, "_sparse_fit": 1014, "14894": 1014, "danna": 1014, "naser": 1014, "12887": 1014, "15028": 1014, "guan": 1014, "14381": 1014, "11232": 1014, "sievert": 1014, "10815": 1014, "14035": 1014, "14475": 1014, "14538": 1014, "14872": 1014, "upcast": [1014, 1018], "15094": 1014, "choose_check_classifiers_label": 1014, "enforce_estimator_tags_i": 1014, "mock": 1014, "mockdatafram": 1014, "checkingclassifi": 1014, "newton_cg": 1014, "random_choice_csc": 1014, "fast_dict": 1014, "parallel_help": 1014, "14902": 1014, "14971": 1014, "nep": 1014, "14702": 1014, "13013": 1014, "13875": 1014, "14680": 1014, "check_classifier_multioutput": 1014, "check_regressor_multioutput": 1014, "13392": 1014, "rok": 1014, "mihevc": 1014, "check_transformer_data_not_an_arrai": 1014, "mro": [1014, 1015], "14884": 1014, "alphonsu": 1014, "abbi": [1014, 1015], "popa": [1014, 1015], "abdur": 1014, "rahmaan": 1014, "janhang": 1014, "abenbihi": 1014, "abhinav": [1014, 1017], "sagar": 1014, "jana": 1014, "lagat": 1014, "alessandro": [1014, 1016, 1019], "surac": 1014, "siqueira": 1014, "alexgoryainov": 1014, "itk": [1014, 1015, 1016], "alexshack": [1014, 1015, 1016], "akinkunl": 1014, "kaseorg": 1014, "maldonado": [1014, 1017], "angela": [1014, 1015, 1019], "ambroz": [1014, 1015], "anisha": 1014, "keshavan": 1014, "gutierrez": 1014, "anuja": 1014, "archana": [1014, 1016], "alva": 1014, "arnaudstiegl": 1014, "arpanchowdhri": 1014, "ashimb9": 1014, "ayomid": 1014, "bamidel": 1014, "baran": 1014, "buluttekin": 1014, "barrycg": 1014, "bill": [1014, 1015], "mill": 1014, "biswadip": 1014, "mandal": 1014, "blackd0t": 1014, "barklei": 1014, "c56poni": 1014, "camilaagw": 1014, "cartman_nabana": 1014, "catajara": 1014, "cgsavard": [1014, 1015], "vesteghem": 1014, "dakota": 1014, "grusak": 1014, "datenbergwerk": 1014, "dormagen": 1014, "deeplook": 1014, "drgfreeman": 1014, "cashman": 1014, "edvardlindelof": 1014, "ndirangu": [1014, 1018], "eunseop": 1014, "jeong": 1014, "fanni": 1014, "federicopisanu": 1014, "divo": 1014, "flaviomorelli": 1014, "francidona": 1014, "franco": 1014, "luqu": 1014, "freder": 1014, "haas": 1014, "g0g0gadget": 1014, "altai": 1014, "vale": 1014, "rio": [1014, 1016, 1017, 1018], "ganevgv": 1014, "gdex1": 1014, "getgaurav2": 1014, "gideon": 1014, "sonoiya": 1014, "gpapadok": [1014, 1018], "mogavero": 1014, "h4dr1en": 1014, "hadshirt": 1014, "hailei": [1014, 1015], "nguyen": [1014, 1015, 1018, 1019], "hannah": [1014, 1016, 1018], "bruce": [1014, 1015], "macdonald": [1014, 1015], "honglu": 1014, "ingrid": 1014, "spielman": 1014, "a16": [1014, 1015], "jaehong": 1014, "jai": [1014, 1018], "jeromedock": 1014, "jesper": 1014, "dramsch": 1014, "joanna": 1014, "ortiz": 1014, "kanika": 1014, "sabharw": 1014, "katarina": [1014, 1016], "slama": [1014, 1016], "kellycarmodi": 1014, "eth": 1014, "kensuk": 1014, "arai": 1014, "kesshi": [1014, 1015], "kevad": 1014, "lofti": [1014, 1015], "winata": [1014, 1016], "sheng": 1014, "dolmatov": 1014, "kirthi": 1014, "shankar": 1014, "sivamani": 1014, "katyal": 1014, "lakshmi": 1014, "krishnan": 1014, "lalliacqua": [1014, 1017], "lbfin": 1014, "loopym": 1014, "lostcoast": 1014, "huynh": [1014, 1016], "lrjball": [1014, 1015], "roeder": 1014, "maggiecheg": [1014, 1018], "maithreyi": 1014, "venkatesh": 1014, "maltimor": 1014, "maocx": 1014, "douriez": [1014, 1015], "oywa": 1014, "aladago": 1014, "mbillingr": 1014, "clare": 1014, "micah": 1014, "miguelbarao": 1014, "mina": [1014, 1015], "naghshhnejad": [1014, 1015], "motmoti": 1014, "mschaffenroth": 1014, "natasha": 1014, "nezar": 1014, "nidhin": 1014, "pattaniyil": 1014, "nishan": 1014, "mann": 1014, "nitya": 1014, "mandyam": 1014, "novaya": [1014, 1017], "nxorabl": 1014, "oleg": 1014, "stikhin": 1014, "omar": [1014, 1019, 1020], "saleem": 1014, "panpiort8": [1014, 1016], "paula": [1014, 1015], "poorna": [1014, 1016], "pspachtholz": [1014, 1015, 1016], "qdeffens": [1014, 1017], "garg": [1014, 1015], "rapha\u00ebl": 1014, "bournhonesqu": 1014, "reza": 1014, "gharibi": 1014, "payn": 1014, "rlm": 1014, "juergen": [1014, 1019], "sanjabi": 1014, "ruchitagard": 1014, "ruth": 1014, "waithera": 1014, "sackei": 1014, "samesh": [1014, 1015], "lakhotia": [1014, 1015], "sewook": 1014, "dare": 1014, "shreya": 1014, "simoncw": 1014, "smujjiga": 1014, "s\u00f6nke": 1014, "behrend": 1014, "soumirai": 1014, "steinfurt": [1014, 1016], "cowlei": 1014, "th0rwa": [1014, 1015], "theoptip": [1014, 1015], "theotheo": 1014, "thierno": 1014, "ibrahima": 1014, "diop": 1014, "schmitt": [1014, 1015], "tilen": 1014, "kusterl": 1014, "timsaur": 1014, "tola": 1014, "topisan": 1014, "ttang131": 1014, "veerlosar": 1014, "luzgin": 1014, "jeanselm": 1014, "lostanlen": 1014, "vnherdeiro": 1014, "wendi": 1014, "willdarnel": 1014, "wolframalpha": 1014, "xcjason": 1014, "martian": 1014, "xsat": 1014, "yinglr": 1014, "yokasr": 1014, "maxin": [1014, 1015], "yulia": 1014, "zamrii": 1014, "feng": [1014, 1016, 1017, 1018], "17959": 1015, "17848": 1015, "17742": 1015, "17995": 1015, "thomaz": 1015, "santana": [1015, 1018], "dsouza": [1015, 1016, 1017, 1018], "17433": 1015, "17985": 1015, "multinomialdevi": 1015, "logloss": [1015, 1019], "17694": 1015, "rempfler": 1015, "tsutomu": 1015, "kusanagi": [1015, 1017], "17357": 1015, "18016": 1015, "x_copi": 1015, "17914": 1015, "15730": 1015, "forrest": [1015, 1016], "17309": 1015, "swier": [1015, 1016], "heer": 1015, "17812": 1015, "bruno": [1015, 1016, 1017], "idl": 1015, "17210": 1015, "17235": 1015, "17204": 1015, "changed_onli": 1015, "17205": 1015, "15005": [1015, 1017], "slep009": [1015, 1017, 1018], "estimator_samples_": 1015, "16149": 1015, "11950": 1015, "11514": 1015, "16075": 1015, "16484": 1015, "agglomerativecluclust": 1015, "16257": 1015, "simona": [1015, 1016, 1017], "maggio": [1015, 1016, 1017], "16801": 1015, "rcwoolston": 1015, "16431": 1015, "14048": 1015, "15963": 1015, "16084": 1015, "15950": 1015, "stephani": 1015, "15980": 1015, "wconnel": 1015, "15709": 1015, "15707": 1015, "maciej": 1015, "mikulski": 1015, "16006": 1015, "rushabh": 1015, "vasani": 1015, "streamhandl": 1015, "logger": 1015, "handler": 1015, "16451": 1015, "16280": 1015, "16837": 1015, "wornbb": 1015, "15669": 1015, "chaitanya": 1015, "16224": 1015, "schwetlick": [1015, 1016], "gelavizh": 1015, "ahmadi": 1015, "marija": [1015, 1016], "vlajic": [1015, 1016], "wheeler": [1015, 1016], "16841": 1015, "16655": 1015, "16718": 1015, "miotto": 1015, "16981": 1015, "g\u00f3rski": [1015, 1016], "14696": 1015, "14516": 1015, "15582": 1015, "16069": 1015, "bail": 1015, "16183": 1015, "16182": 1015, "santhosh": 1015, "16437": 1015, "hwan": 1015, "cho": 1015, "16539": 1015, "deros": 1015, "16692": 1015, "16663": 1015, "15834": 1015, "santiago": 1015, "mola": 1015, "16103": 1015, "divyaprabha": 1015, "selectormixin": 1015, "16132": 1015, "trimeta": 1015, "15503": 1015, "15782": 1015, "plgreenliru": 1015, "16403": 1015, "narendra": 1015, "mukherje": 1015, "16508": 1015, "15864": 1015, "14300": 1015, "15436": 1015, "15652": 1015, "15179": 1015, "angelaambroz": 1015, "15773": 1015, "15655": 1015, "14848": 1015, "absgrad": 1015, "_newton_cg": 1015, "16266": 1015, "standard_coef_": 1015, "standard_intercept_": 1015, "average_coef_": 1015, "average_intercept_": 1015, "16261": 1015, "brandt": 1015, "16849": 1015, "14264": 1015, "17021": 1015, "16323": 1015, "16362": 1015, "16442": 1015, "parson": [1015, 1017], "rick": 1015, "mackenbach": 1015, "16993": 1015, "emit": 1015, "15622": 1015, "mors": 1015, "15918": 1015, "kubin": 1015, "fit_grid_point": 1015, "16401": 1015, "pratama": 1015, "sutiono": 1015, "15953": 1015, "15959": 1015, "16111": 1015, "16090": 1015, "jayaratn": [1015, 1016, 1019], "14075": 1015, "meyer89": 1015, "16117": 1015, "15785": 1015, "16245": 1015, "16585": 1015, "15762": 1015, "16466": 1015, "16632": 1015, "maura": 1015, "pintor": 1015, "battista": 1015, "biggio": 1015, "15946": 1015, "ngshya": 1015, "32767": 1015, "mersenn": 1015, "twister": 1015, "31bit": 1015, "63bit": 1015, "crude": 1015, "postprocessor": 1015, "lemir": 1015, "13511": 1015, "kennel": 1015, "11296": 1015, "15558": 1015, "15806": 1015, "16331": 1015, "batiss": 1015, "15926": 1015, "16021": 1015, "sparsearrai": 1015, "16728": 1015, "uint": 1015, "17032": 1015, "_safe_tag": 1015, "16950": 1015, "15380": 1015, "acitiv": 1015, "16726": 1015, "16112": 1015, "16622": 1015, "17061": 1015, "aleksandra": 1015, "kocot": 1015, "alonso": [1015, 1017], "allend": [1015, 1017], "ana": [1015, 1017], "casado": 1015, "ankit810": 1015, "arunav": 1015, "konwar": 1015, "maingret": 1015, "beier": 1015, "berni": 1015, "bharathi": 1015, "brigi": [1015, 1016], "castachick": 1015, "castor": 1015, "corri": 1015, "bartelheim": 1015, "dani\u00ebl": 1015, "gelder": 1015, "daphn": 1015, "breuer": 1015, "cort": [1015, 1016, 1019], "dbauer9": 1015, "borovikova": 1015, "eln": 1015, "emili": [1015, 1016], "leung": 1015, "evgeni": 1015, "chasnovski": 1015, "fabiana": 1015, "facundo": [1015, 1018], "ferr\u00edn": 1015, "franziska": 1015, "boenisch": 1015, "bolmier": [1015, 1016], "gholdman1": 1015, "gonthier": 1015, "hao": [1015, 1016, 1018, 1019], "chun": [1015, 1016, 1018, 1019], "haoyin": [1015, 1017, 1018], "h\u00e9lion": 1015, "bourboux": 1015, "himanshu": [1015, 1018], "hirofumi": [1015, 1016], "suzuki": [1015, 1016], "huangk10": 1015, "kemenad": 1015, "hye": 1015, "sung": 1015, "indecisiveus": [1015, 1016], "inderjeet": 1015, "jjmistri": 1015, "haitz": [1015, 1017, 1018], "legarreta": [1015, 1017, 1018], "gorro\u00f1o": [1015, 1017, 1018], "judithabk6": 1015, "jumon": 1015, "kathryn": 1015, "krishnachaitanya9": 1015, "gia": 1015, "thuan": 1015, "lkubin": 1015, "lopusz": 1015, "lucgiffon": 1015, "lucyleeow": 1015, "kemk": 1015, "magda": 1015, "zielinska": 1015, "mandi": [1015, 1018], "gu": [1015, 1016, 1018], "manish": 1015, "aradwad": 1015, "maren": [1015, 1016, 1017, 1018, 1019], "westermann": [1015, 1016, 1017, 1018, 1019], "mariana": 1015, "meirel": 1015, "mariel": 1015, "mc4229": 1015, "shoemak": 1015, "micha\u0142": 1015, "s\u0142apek": 1015, "mojca": 1015, "bertoncelj": 1015, "narendramukherje": 1015, "nicolasservel": 1015, "nkish": 1015, "noa": 1015, "tamir": [1015, 1018], "olicairn": 1015, "ur": 1015, "lenz": [1015, 1019], "delanou": 1015, "qizhi": 1015, "quang": 1015, "rachelcjordan": 1015, "raduspaimoc": 1015, "riccardo": 1015, "folloni": 1015, "ritchi": 1015, "rori": 1015, "hartong": 1015, "redden": 1015, "sambhav": 1015, "kothari": 1015, "santhoshbala18": 1015, "sarat": 1015, "addep": 1015, "scibol": 1015, "kie\u00dfl": 1015, "sergiodsr": 1015, "shiki": 1015, "shubh": 1015, "chatterje": 1015, "simonamaggio": [1015, 1016, 1017], "snowhit": 1015, "stareh": 1015, "marsh": 1015, "sunmi": 1015, "yoon": 1015, "talgatomarov": 1015, "tamirlan1": 1015, "nonner": 1015, "vink": [1015, 1017], "tiphain": 1015, "viard": 1015, "titu": 1015, "vachan": 1015, "vandana": 1015, "iyer": 1015, "waelbenamara": 1015, "wderos": 1015, "wenliwyan": 1015, "windber": 1015, "19579": 1016, "19646": 1016, "stopiter": 1016, "19922": 1016, "19732": 1016, "ishikawa": [1016, 1017], "19407": 1016, "ushtanit": [1016, 1017], "19982": 1016, "19939": 1016, "halvic": 1016, "19703": 1016, "sobkevich": 1016, "villaz\u00f3n": 1016, "terraza": 1016, "fonari": [1016, 1017], "19182": 1016, "yosuk": [1016, 1017], "kobayashi": [1016, 1017], "19721": 1016, "19659": 1016, "19211": 1016, "19847": 1016, "xiaoyu": 1016, "chai": [1016, 1019], "19308": 1016, "19234": 1016, "19727": 1016, "delong": [1016, 1017], "transfrom": 1016, "19888": 1016, "19924": 1016, "19271": 1016, "zhaowei": 1016, "19580": 1016, "brice": [1016, 1017], "adamson": 1016, "wil": 1016, "yegelwel": 1016, "css": 1016, "19417": 1016, "19179": 1016, "19126": 1016, "17448": 1016, "17107": 1016, "17546": 1016, "17856": 1016, "17984": 1016, "riedmann": 1016, "francesco": [1016, 1019], "casalegno": 1016, "18052": 1016, "sean": [1016, 1017, 1019], "stallei": 1016, "17937": 1016, "counts_": 1016, "init_size_": 1016, "17864": 1016, "17616": 1016, "18167": 1016, "18256": 1016, "jayratn": 1016, "16392": 1016, "17095": 1016, "18746": 1016, "18525": 1016, "norm_y_weight": 1016, "x_mean_": 1016, "y_mean_": 1016, "x_std_": 1016, "y_std_": 1016, "18768": 1016, "18302": 1016, "md5": 1016, "checksum": 1016, "14800": 1016, "17396": 1016, "jiaxiang": 1016, "17491": 1016, "18280": 1016, "17499": 1016, "17610": 1016, "11064": 1016, "17414": 1016, "18149": 1016, "17679": 1016, "18528": 1016, "villanova": [1016, 1017], "14446": 1016, "18394": 1016, "16985": 1016, "garbag": 1016, "18334": 1016, "multicor": [1016, 1017], "18341": 1016, "egor": 1016, "smirnov": 1016, "18410": 1016, "17702": 1016, "18326": 1016, "changedbehaviorwarn": 1016, "nonblasdotwarn": 1016, "17804": 1016, "17367": 1016, "15427": 1016, "gangesh": 1016, "gudmalwar": 1016, "erin": 1016, "6545": 1016, "17159": 1016, "15361": 1016, "17878": 1016, "17090": 1016, "_check_bounds_param": 1016, "12638": 1016, "lannuzel": 1016, "17526": 1016, "ayako": 1016, "yagi": 1016, "17612": 1016, "srimukh": 1016, "sripada": 1016, "16493": 1016, "darshan": 1016, "15636": 1016, "18987": 1016, "16619": 1016, "16906": 1016, "roei": 1016, "kahni": 1016, "18293": 1016, "16289": 1016, "kishimoto": 1016, "18639": 1016, "13003": 1016, "s\u00e1nchez": 1016, "18545": 1016, "laurenz": 1016, "reitsam": 1016, "17578": 1016, "knox": 1016, "6624": 1016, "marijn": 1016, "vliet": 1016, "18121": 1016, "18607": 1016, "fhaselbeck": 1016, "18622": 1016, "haesun": 1016, "10493": 1016, "17997": 1016, "maisonneuv": 1016, "17662": 1016, "18278": 1016, "17412": 1016, "16625": 1016, "10591": 1016, "karnowski": 1016, "plot_det_curv": [1016, 1017], "18176": 1016, "10708": 1016, "15007": 1016, "hathidara": 1016, "10711": 1016, "17192": 1016, "avi": [1016, 1017], "17225": 1016, "17569": 1016, "17651": 1016, "mato": 1016, "17777": 1016, "shubhanshu": 1016, "mishra": [1016, 1017], "17826": 1016, "decal": 1016, "willard": 1016, "17935": 1016, "cari": 1016, "goltermann": 1016, "18114": 1016, "18405": 1016, "yakov": 1016, "pchelintsev": 1016, "13900": 1016, "17478": 1016, "teon": 1016, "13204": 1016, "kosic": 1016, "18527": 1016, "18343": 1016, "devi": 1016, "sandeep": 1016, "18595": 1016, "18222": 1016, "18266": 1016, "subrat": 1016, "sahu": 1016, "15126": 1016, "17987": 1016, "17233": 1016, "zolisa": 1016, "bleki": 1016, "histgradientboost": 1016, "18124": 1016, "brocchini": 1016, "armstrong": 1016, "17427": 1016, "17038": 1016, "neighborsbas": [1016, 1019], "17148": 1016, "18691": 1016, "18370": 1016, "18612": 1016, "17603": 1016, "17604": 1016, "17606": 1016, "17608": 1016, "17609": 1016, "17633": 1016, "17661": 1016, "17932": 1016, "16352": 1016, "17759": 1016, "18269": 1016, "17876": 1016, "18429": 1016, "biernat": 1016, "17317": 1016, "17406": 1016, "wick": 1016, "18406": 1016, "17833": 1016, "yashika": 1016, "18510": 1016, "18447": 1016, "16066": 1016, "18682": 1016, "16935": 1016, "17193": 1016, "16335": 1016, "14982": 1016, "11682": 1016, "patric": [1016, 1017], "15763": 1016, "16530": 1016, "shuhua": 1016, "17386": 1016, "17187": 1016, "x_idx_sort": 1016, "17614": 1016, "check_methods_sample_order_invari": [1016, 1018], "17598": 1016, "ngo": 1016, "17992": 1016, "endian": 1016, "17644": 1016, "18508": 1016, "abo7atm": 1016, "spannbauer": 1016, "deodhar": 1016, "alexandracraciun": 1016, "amy12xx": 1016, "tiwari": 1016, "choraria": 1016, "subramaniyan": 1016, "kushwaha": 1016, "atsushi": [1016, 1017], "nukariya": [1016, 1017], "aura": 1016, "autoviz": 1016, "auto_viml": 1016, "avinash": 1016, "anak": 1016, "barankaraku": 1016, "barberogaston": 1016, "beatrizsmg": 1016, "mainy": 1016, "bossan": [1016, 1018, 1019], "pedigo": [1016, 1017], "bhavika": 1016, "devnani": 1016, "biprateep": 1016, "dei": 1016, "bmaisonn": 1016, "byron": 1016, "ceethinwa": [1016, 1017], "chaitanyamog": 1016, "clmbst": 1016, "coelhudo": 1016, "crispinlogan": [1016, 1019, 1020], "cristina": 1016, "mula": 1016, "darioka": [1016, 1018, 1019], "declan": 1016, "neill": 1016, "deeksha": 1016, "madan": 1016, "fiegel": [1016, 1017, 1019], "khoo": 1016, "eschibli": 1016, "fran": [1016, 1017, 1018], "larsson": [1016, 1017, 1018], "sheni": 1016, "genvalen": [1016, 1017, 1018], "kiragu": 1016, "gesa": 1016, "stupperich": 1016, "ghislain": 1016, "vaillant": 1016, "gim": 1016, "seng": 1016, "chevali": 1016, "bohl": [1016, 1018], "schole": 1016, "hitesh": 1016, "somani": 1016, "hoda1394": 1016, "moin": 1016, "hugorichard": 1016, "isuru": 1016, "wiryadi": 1016, "j0rd1smit": 1016, "jaehyun": 1016, "ahn": 1016, "tae": 1016, "hoctor": 1016, "vese": 1016, "jeevan": 1016, "jeroenpeterbo": 1016, "jhay": 1016, "jigna": 1016, "panchal": 1016, "jim0421": 1016, "joaquin": 1016, "gorb": 1016, "moya": 1016, "kartik": 1016, "chugh": 1016, "kaylani2": 1016, "kendrick": 1016, "cetina": 1016, "kenni": 1016, "isakov": 1016, "koki": 1016, "nishihara": 1016, "krum": [1016, 1018], "arnaudov": [1016, 1018], "oldja": 1016, "guitton": 1016, "mariam": 1016, "l\u00f6ning": 1016, "scheubrein": 1016, "megasari": 1016, "mathschi": 1016, "giudic": 1016, "milan": 1016, "straka": 1016, "muoki": 1016, "caleb": 1016, "haiat": 1016, "nadia": 1016, "tahiri": 1016, "ph": 1016, "hamada": 1016, "neil": 1016, "botelho": 1016, "nil": 1016, "noelano": 1016, "oj_lappi": 1016, "oleh": [1016, 1018], "kozynet": [1016, 1018], "pankaj": 1016, "jindal": 1016, "pardeep": 1016, "parthiv": 1016, "chigurupati": 1016, "pgithub": 1016, "probinette4": 1016, "pwalchessen": 1016, "rachel": [1016, 1019], "fischoff": 1016, "toshniw": 1016, "rafei": 1016, "iqbal": 1016, "rahul": 1016, "jakhar": 1016, "rachum": 1016, "ramyanp": [1016, 1017], "rauwuckl": 1016, "ravi": [1016, 1019], "kiran": 1016, "boggavarapu": 1016, "rishi": 1016, "advani": 1016, "rithvik": 1016, "romijnd": 1016, "tavenard": 1016, "rubi": 1016, "werman": 1016, "ryotaro": 1016, "tsukada": 1016, "sadak": 1016, "khandelw": 1016, "ezebunandu": 1016, "kimbinyi": 1016, "shail": 1016, "keller": 1016, "shao": [1016, 1017, 1018], "shooter23": [1016, 1017], "soledad": 1016, "galli": 1016, "subrat93": 1016, "sunitha": 1016, "selvan": 1016, "kusanagi2": 1016, "terenc": [1016, 1017], "honl": [1016, 1017], "thij": [1016, 1020], "thomas9292": 1016, "thorben": 1016, "tijanajovanov": 1016, "timo": 1016, "tnwei": 1016, "ufmay": 1016, "umberto": 1016, "lupo": 1016, "vika": [1016, 1018], "viniciu": [1016, 1017], "fuck": [1016, 1017], "violeta": 1016, "watchtheblur": 1016, "willpeppo": 1016, "xethan": 1016, "qianm": 1016, "yue": 1016, "yutaro": 1016, "ikeda": 1016, "zacchari": 1016, "ramzi": 1016, "zoj613": 1016, "21271": 1017, "21833": 1017, "siavash": 1017, "rezazadeh": 1017, "19210": 1017, "21295": 1017, "22050": 1017, "21991": 1017, "19869": 1017, "21481": [1017, 1018], "andr\u00e9": [1017, 1018], "babino": [1017, 1018], "disconnect": 1017, "21915": 1017, "21694": 1017, "minknowski": 1017, "21741": 1017, "21871": 1017, "21845": 1017, "21517": 1017, "21917": 1017, "21552": 1017, "escap": 1017, "21493": 1017, "21199": 1017, "20638": 1017, "bohn\u00e9": 1017, "21179": 1017, "21195": 1017, "21130": 1017, "20761": 1017, "21251": 1017, "min_idf": 1017, "max_idf": 1017, "20752": 1017, "alek": [1017, 1018], "lefebvr": [1017, 1018], "21340": 1017, "21093": 1017, "21351": 1017, "cve": 1017, "28975": 1017, "21336": 1017, "_check_sample_weight": 1017, "only_non_neg": 1017, "20880": 1017, "andr\u00e1": [1017, 1018, 1019], "if_delegate_has_method": [1017, 1018], "21145": 1017, "zahlii": 1017, "21389": 1017, "20002": 1017, "19310": 1017, "least_squar": 1017, "19733": 1017, "lad": 1017, "absolute_loss": 1017, "20165": 1017, "18444": 1017, "18010": 1017, "threadsaf": 1017, "18736": 1017, "17443": 1017, "19641": 1017, "20087": 1017, "fauchereau": 1017, "19002": 1017, "19052": 1017, "yusuk": 1017, "nagasaka": 1017, "17622": 1017, "19024": 1017, "franki": 1017, "robertson": 1017, "20117": 1017, "natchiappan": [1017, 1018], "19883": 1017, "20597": 1017, "20899": 1017, "20200": 1017, "fit_": 1017, "partial_fit_": 1017, "19297": 1017, "20560": 1017, "18393": 1017, "bittarello": 1017, "19263": 1017, "19244": 1017, "18459": 1017, "nd": 1017, "18898": 1017, "ora": 1017, "phongpanagnam": 1017, "21080": 1017, "ledoit_wolf_shrinkag": 1017, "20416": 1017, "defoi": 1017, "20583": 1017, "19365": 1017, "ateif": 1017, "sara": 1017, "19669": 1017, "importlib": 1017, "pyoxid": 1017, "20297": 1017, "20209": 1017, "19011": 1017, "20729": 1017, "12069": 1017, "19046": 1017, "surya": [1017, 1018], "18433": 1017, "19198": 1017, "19159": 1017, "beno\u00eet": 1017, "mal\u00e9zieux": 1017, "19908": 1017, "20512": 1017, "20960": 1017, "cgroup": [1017, 1018], "quota": [1017, 1018], "20477": 1017, "19799": 1017, "19564": 1017, "19836": 1017, "19162": 1017, "10096": 1017, "fenil": 1017, "suchak": 1017, "20159": 1017, "murata": [1017, 1018], "20534": 1017, "19296": 1017, "19035": 1017, "19520": 1017, "18964": 1017, "19401": 1017, "relova": 1017, "17169": 1017, "dmytro": 1017, "lituiev": 1017, "20380": 1017, "pulido": 1017, "felip": [1017, 1018, 1019, 1020], "bidu": [1017, 1018], "rutter": 1017, "20515": 1017, "carsten": 1017, "allefeld": 1017, "19568": 1017, "shyam": 1017, "20207": 1017, "tomohiro": 1017, "endo": 1017, "20161": 1017, "shuhei": 1017, "kayawari": 1017, "arka204": [1017, 1019], "20431": 1017, "pfaffel": 1017, "19428": 1017, "hamoumi": 1017, "19411": 1017, "20959": 1017, "20554": 1017, "xiangyin": 1017, "kong": 1017, "9978": 1017, "10027": 1017, "16449": 1017, "20231": 1017, "naka": 1017, "19571": 1017, "20155": 1017, "oura": [1017, 1018, 1019], "19004": 1017, "midvidi": 1017, "19055": 1017, "19172": 1017, "19426": 1017, "19499": 1017, "strubel": 1017, "19616": 1017, "19391": 1017, "19390": 1017, "linearmodel": 1017, "17743": 1017, "17772": 1017, "17746": 1017, "17785": 1017, "17750": 1017, "17769": 1017, "20683": 1017, "19491": 1017, "19472": 1017, "shortest_path": 1017, "20531": 1017, "19415": 1017, "17036": 1017, "20326": 1017, "uttam": 1017, "9843": 1017, "19643": 1017, "attard": 1017, "19784": 1017, "18328": 1017, "20312": 1017, "divyanshu": 1017, "deoli": 1017, "18543": 1017, "20552": 1017, "19278": 1017, "20030": 1017, "tingshan": 1017, "18649": 1017, "rodion": 1017, "martynov": 1017, "20619": 1017, "baseshufflesplit": 1017, "20056": 1017, "pabloduque0": 1017, "prematur": 1017, "20904": 1017, "tomasz": 1017, "jakubek": [1017, 1018], "18925": 1017, "poznik": [1017, 1018, 1019], "18842": 1017, "19473": 1017, "jiefangxuanyan": 1017, "20072": 1017, "20842": 1017, "mart\u00edn": [1017, 1018], "19631": 1017, "19790": 1017, "flynn": [1017, 1019], "18368": 1017, "19483": 1017, "20526": 1017, "19069": 1017, "19041": 1017, "20250": 1017, "20652": 1017, "19934": 1017, "gleb": [1017, 1019, 1020], "levitskii": 1017, "19734": 1017, "robinson": 1017, "19752": 1017, "zhehao": [1017, 1018, 1019], "19527": 1017, "19788": 1017, "19356": 1017, "makoeppel": 1017, "19879": 1017, "19906": 1017, "20727": 1017, "20961": 1017, "n_input_features_": 1017, "20240": 1017, "20843": 1017, "18959": 1017, "wstate": 1017, "20023": 1017, "19336": 1017, "20272": 1017, "19459": 1017, "bezuidenhout": 1017, "clifford": 1017, "akai": 1017, "nettei": 1017, "19948": 1017, "20657": 1017, "19766": 1017, "propreti": 1017, "20385": 1017, "_weighted_percentil": 1017, "huberlossfunct": 1017, "20528": 1017, "_safe_index": 1017, "20673": 1017, "is_scalar_nan": 1017, "assert_warn": 1017, "assert_warns_messag": 1017, "20521": 1017, "abdulelah": 1017, "mesfer": 1017, "adrian": [1017, 1018, 1019], "garcia": 1017, "badaracco": 1017, "sad\u0142ocha": 1017, "rubial": 1017, "alessia": 1017, "marcolini": 1017, "alihan": 1017, "zihna": 1017, "alin": 1017, "amol": 1017, "deshmukh": 1017, "pessoa": 1017, "anavelyz": 1017, "ashish": 1017, "ashvith": 1017, "shetti": 1017, "baam": [1017, 1018], "baptbillard": 1017, "bmalezieux": 1017, "bumblebe": 1017, "caherrera": 1017, "meli": [1017, 1018, 1019], "chrissobel": 1017, "yeh": 1017, "chuliang": 1017, "cliffordemmanuel": 1017, "conner": 1017, "shen": 1017, "dimitri": [1017, 1018, 1019], "papadopoulo": [1017, 1018, 1019], "orfano": [1017, 1018, 1019], "dmallia17": 1017, "ds_ana": 1017, "jardim": 1017, "edwinwenink": 1017, "eleni": 1017, "markou": 1017, "ericellwang": [1017, 1018], "ezri": 1017, "mudd": 1017, "fato": 1017, "morina": 1017, "hafner": 1017, "flyingdutchman23": 1017, "uwha": [1017, 1018], "bereng": 1017, "frederick": 1017, "frellwan": 1017, "vicent": [1017, 1018, 1019], "geroldcsend": 1017, "glen": 1017, "gl\u00f2ria": [1017, 1019], "mu\u00f1oz": [1017, 1019], "gregorystrubel": 1017, "groceryheist": 1017, "guiweb": 1017, "haidar": [1017, 1018], "almubarak": [1017, 1018], "moritz": [1017, 1019], "g\u00fcnther": 1017, "mirza": 1017, "harutaka": 1017, "kawamura": 1017, "hassan": 1017, "alsawadi": 1017, "geovan": [1017, 1018], "gome": [1017, 1018], "lima": [1017, 1018], "ilic": 1017, "ikko": 1017, "ashimin": 1017, "isaack": 1017, "mungui": 1017, "ishaan": 1017, "bhat": 1017, "ishan": [1017, 1018], "iwhalv": 1017, "preiss": 1017, "budarz": 1017, "jannik": 1017, "jennif": 1017, "jianzhu": 1017, "guo": 1017, "jnboehm": 1017, "johanwork": 1017, "paton": 1017, "n\u00e1pole": 1017, "julio": 1017, "julyrashchenko": 1017, "jvm": 1017, "kadatatlu": 1017, "kishor": 1017, "karen": 1017, "palacio": 1017, "kmatt10": 1017, "kobaski": 1017, "kot271828": 1017, "kunj": 1017, "kurumeyuta": 1017, "kxytim": 1017, "lacrosse91": 1017, "laveen": 1017, "bagai": 1017, "leonardo": 1017, "rocco": [1017, 1018, 1019], "uieda": 1017, "leopoldo": 1017, "corona": 1017, "lsturtew": 1017, "lucca": 1017, "quadro": 1017, "ly648499246": 1017, "mabu": 1017, "manaileng": 1017, "mariangela": 1017, "marielaraj": 1017, "hirzel": 1017, "mateo": 1017, "nore\u00f1a": 1017, "mathi": 1017, "batoul": 1017, "calcot": 1017, "prieur": 1017, "\u00f6zer": 1017, "miao": 1017, "cai": 1017, "karbownik": 1017, "michalkrawczyk": [1017, 1018], "mitzi": [1017, 1018], "mlondschien": 1017, "haseeb": [1017, 1018], "khoual": 1017, "jarir": 1017, "kanji": 1017, "nadim": 1017, "kawwa": 1017, "nanshan": 1017, "naozin555": 1017, "fultz": 1017, "nic": 1017, "annau": 1017, "stefani": [1017, 1019], "nigel": 1017, "bosch": 1017, "nodar": 1017, "okroshiashvili": 1017, "ogbonna": 1017, "chibuik": 1017, "ogordon100": 1017, "phongpanangam": 1017, "duqu": 1017, "ibieta": 1017, "jimenez": [1017, 1018], "lacouth": 1017, "olszewski": 1017, "dye": 1017, "pierreattard": [1017, 1018], "yve": 1017, "borgn": 1017, "pranayanchuri": 1017, "princ": 1017, "canuma": 1017, "putschblo": 1017, "ranjanikrishnan": 1017, "rene": 1017, "corneil": 1017, "ricardojnf": 1017, "richardscottoz": 1017, "sandi": 1017, "khosasi": 1017, "benhur": 1017, "flore": 1017, "shinehid": 1017, "shinnar": 1017, "tootoonian": 1017, "solosil": 1017, "kolawol": 1017, "stagg": 1017, "swpeas": 1017, "tfifi": 1017, "caswel": 1017, "timotheemathieu": 1017, "wolodzko": 1017, "tliu68": 1017, "uhmann": 1017, "tom1092": 1017, "tom\u00e1": [1017, 1018], "moreyra": 1017, "tommaso": 1017, "noto": 1017, "tsuga": 1017, "vang": 1017, "gkiasta": 1017, "vil\u00e9m": 1017, "zouhar": 1017, "vlasovet": 1017, "waijean": 1017, "whidou": 1017, "xiaoyuchai": 1017, "yasmeen": 1017, "alsaedi": 1017, "yoch": 1017, "yusukenagasaka": 1017, "yzhenman": 1017, "zeyusun": 1017, "zhaoweiwang": 1017, "msvcp140": 1018, "dll": 1018, "24631": 1018, "24446": 1018, "10805": 1018, "mathia": 1018, "23471": 1018, "24015": 1018, "23990": 1018, "23833": 1018, "24017": 1018, "sorski": [1018, 1019], "23395": 1018, "23636": 1018, "22063": 1018, "22059": 1018, "kurz": [1018, 1019], "23608": 1018, "23548": 1018, "24087": 1018, "23273": 1018, "23194": 1018, "23198": 1018, "lise": 1018, "kleiber": 1018, "23358": 1018, "23264": 1018, "feature_names_in": 1018, "23299": 1018, "23214": 1018, "collot": [1018, 1019], "baak": 1018, "23370": 1018, "23410": 1018, "compute_sample_weight": 1018, "23115": 1018, "22868": 1018, "multiindex": 1018, "22410": 1018, "23271": 1018, "21987": 1018, "22064": 1018, "22065": 1018, "22288": 1018, "22320": 1018, "21219": 1018, "21542": 1018, "23098": 1018, "22318": 1018, "23036": 1018, "23040": 1018, "23046": 1018, "22856": 1018, "21032": 1018, "18170": 1018, "21038": 1018, "14975": 1018, "22526": 1018, "23095": 1018, "silk": 1018, "20031": 1018, "krawczyk": 1018, "21148": 1018, "22255": 1018, "21881": 1018, "vassard": 1018, "22217": 1018, "21735": 1018, "22154": 1018, "22537": 1018, "iofal": 1018, "arisa": [1018, 1019], "22775": 1018, "22913": 1018, "randomgeek78": 1018, "22493": 1018, "19680": 1018, "thibaut": 1018, "22119": 1018, "22016": 1018, "22015": 1018, "19747": 1018, "attalla": 1018, "22498": 1018, "21482": 1018, "pujalt": 1018, "22412": 1018, "16605": 1018, "21901": 1018, "rileran": 1018, "23113": 1018, "ilion": 1018, "beyst": 1018, "21425": 1018, "stefanini": 1018, "16948": 1018, "patricio": 1018, "cerda": 1018, "22002": 1018, "21109": 1018, "inner_stats_": 1018, "iter_offset_": 1018, "18975": 1018, "22111": 1018, "22181": 1018, "21334": 1018, "21705": 1018, "stanlei": 1018, "21432": 1018, "22806": 1018, "jihan": 1018, "benni": 1018, "21713": 1018, "haya": 1018, "21567": 1018, "maggi": 1018, "chege": 1018, "22300": 1018, "15948": 1018, "sysuresh": 1018, "22553": 1018, "19490": 1018, "ferrin": 1018, "22120": 1018, "15984": 1018, "okon": 1018, "22696": 1018, "22486": 1018, "21800": 1018, "20567": 1018, "22159": 1018, "20811": 1018, "21814": 1018, "16748": 1018, "siqi": 1018, "22215": 1018, "23047": 1018, "22695": 1018, "22697": 1018, "21762": 1018, "22106": 1018, "gijsber": 1018, "21632": 1018, "genesi": 1018, "valencia": 1018, "22566": 1018, "22908": 1018, "23097": 1018, "23079": 1018, "20803": 1018, "23023": 1018, "21573": 1018, "21832": 1018, "20145": 1018, "22356": 1018, "18482": 1018, "gameiro": 1018, "kharsa": 1018, "22370": 1018, "17819": 1018, "22235": 1018, "21837": 1018, "wagner": 1018, "22199": 1018, "aidar": 1018, "shakerimoff": 1018, "tenavi": 1018, "nakamura": 1018, "22223": 1018, "marcom": 1018, "21617": 1018, "ritter": [1018, 1019], "21114": 1018, "21078": 1018, "21448": 1018, "16061": 1018, "19438": 1018, "18310": 1018, "elfner": 1018, "22249": 1018, "22137": 1018, "22694": 1018, "22808": 1018, "22950": 1018, "21086": 1018, "22206": 1018, "21808": 1018, "22548": 1018, "22062": 1018, "trujillo": [1018, 1019], "22148": 1018, "22240": 1018, "9087": 1018, "22525": 1018, "19689": 1018, "21606": 1018, "21341": 1018, "preservs": 1018, "21767": 1018, "21724": 1018, "yar": 1018, "khine": 1018, "phyo": 1018, "21998": 1018, "22891": 1018, "22899": 1018, "23256": 1018, "19794": 1018, "21534": 1018, "22254": 1018, "21805": 1018, "jeann": 1018, "dionisi": 1018, "22685": 1018, "n_neighbour": 1018, "18832": 1018, "23033": 1018, "21565": 1018, "17266": 1018, "interpet": 1018, "22118": 1018, "ohad": 1018, "22284": 1018, "19158": 1018, "nicki": 1018, "skaft": 1018, "20753": 1018, "22108": 1018, "22635": 1018, "19085": 1018, "22866": 1018, "21576": 1018, "emil": 1018, "dugnat": 1018, "21873": 1018, "21177": 1018, "20408": 1018, "ceballo": 1018, "22058": 1018, "23034": 1018, "22203": 1018, "21026": 1018, "21880": 1018, "mrinal": 1018, "tyagi": 1018, "22982": 1018, "22508": 1018, "comb": 1018, "22604": 1018, "22212": 1018, "21430": 1018, "desislava": 1018, "vasileva": 1018, "22687": 1018, "22150": 1018, "22248": 1018, "20860": 1018, "shubhraneel": 1018, "21888": 1018, "21954": 1018, "22953": 1018, "16018": 1018, "21445": 1018, "21988": 1018, "get_output_feature_nam": 1018, "21569": 1018, "21079": 1018, "20653": 1018, "21434": 1018, "19916": 1018, "22735": 1018, "compute_inverse_transform": 1018, "21701": 1018, "22114": 1018, "21330": 1018, "21408": 1018, "22149": 1018, "21436": 1018, "22191": 1018, "22476": 1018, "21278": 1018, "21316": 1018, "clickabl": 1018, "21298": 1018, "22237": 1018, "check_scalar": 1018, "22218": 1018, "validationerror": 1018, "check_requires_y_non": 1018, "22578": 1018, "arcidiacono": [1018, 1019], "22595": 1018, "21310": 1018, "22027": 1018, "lanterni": 1018, "23077": 1018, "22188": 1018, "22830": 1018, "2357juan": [1018, 1019], "adamgonzo": 1018, "adijohar": 1018, "kumawat": 1018, "raghuwanshi": 1018, "duron": 1018, "ahmadjubair33": 1018, "aj": 1018, "druck": 1018, "peixinho": 1018, "arroyo": 1018, "alexanmv": 1018, "almeidayoel": 1018, "amar": [1018, 1020], "amrcod": 1018, "griva": [1018, 1019], "andrii": 1018, "herrou": 1018, "ducout": 1018, "arth": 1018, "arthurmello": 1018, "arturoamor": 1018, "atharva": 1018, "patil": 1018, "aufarkari": 1018, "avm19": [1018, 1019], "ayan": 1018, "bardiya": [1018, 1019], "behrouz": 1018, "ben3940": 1018, "bijil": 1018, "subhash": 1018, "bmreinig": 1018, "brenden": 1018, "kadota": 1018, "cdrig": 1018, "chalmer": 1018, "chitteti": 1018, "srinath": [1018, 1019], "chloe": 1018, "agath": 1018, "azencott": 1018, "christopherlim98": 1018, "weidemann": 1018, "combsccod": 1018, "daniela": [1018, 1019], "darren": [1018, 1019], "eargl": 1018, "gilbertson": [1018, 1019], "dea": [1018, 1020], "mar\u00eda": [1018, 1020], "denni": 1018, "osei": 1018, "dessyvv": 1018, "dev514": 1018, "diwakar": 1018, "ries": 1018, "drskd": 1018, "emiko": 1018, "sano": 1018, "emmanouil": 1018, "gionanidi": 1018, "ermolaevpa": [1018, 1019], "estefania": 1018, "barreto": 1018, "ojeda": 1018, "eyast": 1018, "fatima": 1018, "gasmi": 1018, "luna": 1018, "glushchenkov": 1018, "fkaren27": 1018, "fpgawesom": 1018, "ftorres16": [1018, 1019], "gabor": 1018, "berei": 1018, "kertesz": 1018, "gauthier": 1018, "giancarlo": 1018, "glennfrutiz": 1018, "guillermo": 1018, "fern\u00e1ndez": 1018, "hansin": [1018, 1019], "henrymooresc": [1018, 1019], "hideaki": 1018, "imamura": 1018, "hind": 1018, "hmasdev": 1018, "hvassard": 1018, "aki": [1018, 1019], "iasoon": 1018, "ingela": 1018, "cowton": 1018, "jalexand3r": 1018, "jauhar": 1018, "jaya": 1018, "kommireddi": 1018, "je": 1018, "jelfner": 1018, "jenni": 1018, "jirka": 1018, "borovec": 1018, "cipri\u00e1n": 1018, "loayza": 1018, "chazalon": 1018, "mess": 1018, "jovan": [1018, 1019], "stojanov": [1018, 1019], "jschuerz": 1018, "katotten": 1018, "ken4git": 1018, "doucet": 1018, "kimayoung": 1018, "koushik": 1018, "kranthi": 1018, "sedamaki": 1018, "krumetoft": 1018, "lesne": 1018, "casino": [1018, 1019], "logan": 1018, "lucieclair": 1018, "luiz": 1018, "magali": 1018, "mandjev": 1018, "wurp": [1018, 1019], "boerner": 1018, "wimld": 1018, "martel": 1018, "corentin": 1018, "mat\u00eda": 1018, "matjansen": 1018, "francia": 1018, "megabyt": 1018, "mehrdad": 1018, "moradizadeh": 1018, "melemo2": 1018, "micky774": [1018, 1019], "milana2": 1018, "millawel": 1018, "miwojc": 1018, "mizuki": 1018, "mlant": 1018, "mohit": 1018, "moonkyung94": 1018, "mpoemsl": 1018, "mrinaltyagi": 1018, "leu": 1018, "msabati": 1018, "nadirhan": 1018, "\u015fahin": 1018, "naipawat": [1018, 1019], "poolsawat": [1018, 1019], "nartayxd": 1018, "nastegiano": 1018, "nathansquan": 1018, "detlefsen": 1018, "niket": 1018, "nikhil": 1018, "suresh": 1018, "kondratyev": 1018, "husak": 1018, "partev": 1018, "pelennor": 1018, "piet": [1018, 1019], "br\u00f6mmel": [1018, 1019], "pinki": 1018, "poloso": 1018, "pramod": 1018, "anantharam": 1018, "puhuk": [1018, 1019], "purna": 1018, "mansingh": 1018, "quadv": 1018, "rahil": [1018, 1019, 1020], "boy": 1018, "raz": 1018, "hoshia": 1018, "rishabh": 1018, "barnowski": [1018, 1019], "rsnegrin": 1018, "yadav": 1018, "sakinaouisrani": 1018, "sanjai": 1018, "marreddi": 1018, "seel": 1018, "sele": [1018, 1019], "seyedsaman": 1018, "emami": 1018, "shandeng123": 1018, "sharmadharmp": 1018, "shaymernaturalint": 1018, "shuangchi": [1018, 1019], "siavrez": 1018, "slishak": 1018, "spikebh": 1018, "sply88": 1018, "kailasa": [1018, 1019], "sultan": 1018, "orazbayev": 1018, "sumit": 1018, "saha": 1018, "sven": [1018, 1019], "eschlbeck": 1018, "stehl": [1018, 1019], "swapnil": 1018, "teunp": 1018, "ferr\u00e9": 1018, "hjortkj\u00e6r": 1018, "thiruvenkadam": 1018, "toastedyeast": [1018, 1019], "mctiernan": [1018, 1019], "udit": 1018, "ugo": 1018, "marchand": 1018, "vera": [1018, 1019], "komey": [1018, 1019], "victoireloui": 1018, "vishwakarma": 1018, "vikrant": 1018, "khedkar": 1018, "chernyi": 1018, "weijiadu": 1018, "yuan": [1018, 1019], "yiyangq": 1018, "yosshi999": 1018, "yuki": 1018, "koyama": 1018, "zeel": 1018, "zempleni": 1018, "zhenfish": 1018, "\u8d75\u4e30": 1018, "base_estimator__": 1019, "25477": 1019, "25563": 1019, "25570": 1019, "25664": 1019, "25500": 1019, "25619": 1019, "2023": 1019, "25354": 1019, "25174": 1019, "25089": 1019, "25129": 1019, "auxillari": 1019, "25363": 1019, "25188": 1019, "25295": 1019, "spec": 1019, "25312": 1019, "25172": 1019, "25341": 1019, "25094": 1019, "25250": 1019, "25370": 1019, "23101": 1019, "24873": 1019, "25274": 1019, "25296": 1019, "25147": 1019, "23619": 1019, "24354": 1019, "safiuddin": 1019, "khaja": 1019, "gsiisg": 1019, "23935": 1019, "22527": 1019, "_sgd_fast": 1019, "_plain_sgd": 1019, "oversc": 1019, "23798": 1019, "24543": 1019, "24465": 1019, "23734": 1019, "24699": 1019, "23865": 1019, "simd": 1019, "primit": 1019, "23446": 1019, "23197": 1019, "23604": 1019, "23585": 1019, "24556": 1019, "maladi\u00e8r": [1019, 1020], "24617": 1019, "sim4n6": 1019, "24688": 1019, "22054": 1019, "roic": 1019, "24264": 1019, "maladier": 1019, "14736": 1019, "hunt": 1019, "zhan": 1019, "20802": 1019, "pokorni": 1019, "22965": 1019, "22968": 1019, "23038": 1019, "propog": 1019, "23210": 1019, "24258": 1019, "23470": 1019, "21938": 1019, "23127": 1019, "19075": 1019, "ramo": 1019, "carre\u00f1o": 1019, "24951": 1019, "22268": 1019, "mohamedbsh": 1019, "23905": 1019, "11860": 1019, "ablin": 1019, "24528": 1019, "23726": 1019, "24421": 1019, "kshitij": 1019, "22554": 1019, "24218": 1019, "molin": 1019, "21020": 1019, "24856": 1019, "22014": 1019, "23252": 1019, "24538": 1019, "24889": 1019, "24146": 1019, "peretti": 1019, "nestor": 1019, "navarro": 1019, "nati": 1019, "tomatti": 1019, "24855": 1019, "24849": 1019, "20415": 1019, "24283": 1019, "24894": 1019, "23819": 1019, "edoardo": 1019, "abati": 1019, "24747": 1019, "24245": 1019, "24405": 1019, "salman": [1019, 1020], "16695": 1019, "vitor": 1019, "rosa": 1019, "18298": 1019, "25077": 1019, "24317": 1019, "24350": 1019, "24755": 1019, "levitski": [1019, 1020], "24637": 1019, "24767": 1019, "23275": 1019, "maxwelllzh": 1019, "24433": 1019, "yogendrasingh": 1019, "23637": 1019, "23877": 1019, "10168": 1019, "\u0142ukasz": 1019, "borchmann": 1019, "12285": 1019, "miltenberg": 1019, "13042": 1019, "parizi": 1019, "18094": 1019, "22562": 1019, "24714": 1019, "foor": 1019, "23834": 1019, "24051": 1019, "22518": 1019, "18020": 1019, "24338": 1019, "23442": 1019, "atukorala": 1019, "22710": 1019, "conroi": 1019, "trinh": 1019, "23461": 1019, "24365": 1019, "24630": 1019, "rushil": 1019, "24084": 1019, "iinfo": 1019, "24141": 1019, "24539": 1019, "23977": 1019, "23683": 1019, "andrei": 1019, "melnik": 1019, "16747": 1019, "18805": 1019, "hongshaoyang": 1019, "22269": 1019, "23139": 1019, "24645": 1019, "10468": 1019, "ruben": 1019, "22993": 1019, "24750": 1019, "rudresh": 1019, "veerkhar": 1019, "23874": 1019, "24075": 1019, "22665": 1019, "24683": 1019, "24058": 1019, "perdok": 1019, "20331": 1019, "23993": 1019, "22629": 1019, "24412": 1019, "22898": 1019, "23480": 1019, "21469": 1019, "lapack_svd_driv": 1019, "20617": 1019, "ouptut": 1019, "25067": 1019, "14862": 1019, "24512": 1019, "24667": 1019, "25080": 1019, "24523": 1019, "mia": 1019, "bajic": 1019, "3llobo": 1019, "anulekh": 1019, "aiko": 1019, "akshita": 1019, "prasanth": 1019, "miola": 1019, "lebel": 1019, "bera": 1019, "maennel": 1019, "aniket": 1019, "shirsat": 1019, "apostolo": 1019, "tsetogl": 1019, "aravindh": 1019, "artur": 1019, "hermano": 1019, "ashwin": [1019, 1020], "b0rxington": 1019, "badr": 1019, "moufad": 1019, "bart\u0142omiej": 1019, "go\u0144da": 1019, "bdegraaff": 1019, "berkecanrizai": 1019, "bernd": 1019, "fritzk": 1019, "bhoomika": 1019, "biswaroop": 1019, "cannon": 1019, "bsh": 1019, "ceh": 1019, "chalulu": 1019, "zablit": 1019, "christianwaldmann": 1019, "christin": 1019, "verrier": 1019, "dangonite57": 1019, "danielgaerb": 1019, "khant": 1019, "dhanshre": 1019, "diadochokinet": 1019, "diederikwp": 1019, "drewhogg": 1019, "oc": 1019, "dwight": 1019, "lindquist": 1019, "eden": 1019, "brekk": 1019, "eleanor": 1019, "eliaschiavon": 1019, "fabrizio": 1019, "damicelli": 1019, "fcharra": 1019, "tuveri": 1019, "franck": 1019, "charra": 1019, "geevarghes": 1019, "georgiamaydai": 1019, "gianr": 1019, "lazz": 1019, "guitar": 1019, "gunesbayir": 1019, "harshit5674": 1019, "hasan": 1019, "yaman": 1019, "vrigazov": 1019, "htsedebenham": 1019, "humahn": 1019, "ido": 1019, "iglesi": 1019, "iliya": 1019, "zhechev": 1019, "iren": 1019, "sedykh": 1019, "ivanllt": 1019, "jiten": 1019, "sidhpura": 1019, "jkarolczak": 1019, "koumenti": 1019, "panga": [1019, 1020], "johnthagen": 1019, "fleme": 1019, "choo": 1019, "yun": 1019, "keat": 1019, "jo\u00e3o": 1019, "juanfe88": 1019, "jygerardi": 1019, "kanishk": 1019, "sachdev": 1019, "kanissh": 1019, "kendal": 1019, "kento": 1019, "nozawa": 1019, "eliasi": 1019, "kluge": 1019, "lieret": 1019, "kirandevraj": 1019, "kraig": 1019, "vamsi": 1019, "kapadni": 1019, "lingyi1110": 1019, "mantovani": 1019, "bou": 1019, "maascha": 1019, "madinak": 1019, "maksym": 1019, "mansi": 1019, "mauroantonioserrano": 1019, "maxi": 1019, "marufo": 1019, "smolskii": 1019, "mehgarg": 1019, "mehmetcanakbai": 1019, "baji\u0107": 1019, "flak": 1019, "hornstein": 1019, "ruiter": 1019, "paradi": 1019, "misa": 1019, "ogura": 1019, "wilksch": 1019, "mrastgoo": 1019, "naois": 1019, "holohan": 1019, "nass": 1019, "jacobi": 1019, "nguy\u1ec5n": 1019, "v\u0103n": 1019, "di\u1ec5n": 1019, "nihal": 1019, "thukarama": 1019, "jare": 1019, "nima": 1019, "sarajpoor": 1019, "nima10khodaveisi": 1019, "nitinramvelraj": 1019, "nwanna": 1019, "nymark": 1019, "kho": 1019, "holman": 1019, "oll": 1019, "lukowski": 1019, "hassoun": 1019, "tamer": 1019, "oyindamola": 1019, "olatunji": 1019, "pab": 1019, "pandata": 1019, "soar": 1019, "petar": 1019, "mlinari\u0107": 1019, "priyam": 1019, "kakati": 1019, "freeland": 1019, "keerti": 1019, "rafal": 1019, "wojdyla": 1019, "makhija": 1019, "rehan": 1019, "guha": 1019, "klima": 1019, "crockett": 1019, "homm": 1019, "roman4oo": 1019, "rowan": 1019, "mankoo": 1019, "sabri": 1019, "monaf": 1019, "safikh": 1019, "salahuddin": 1019, "yojana": 1019, "menes": 1019, "ephrem": 1019, "sangam": 1019, "sangamswadik": 1019, "sarahremu": 1019, "savkomax": 1019, "gustafson": 1019, "sec65": 1019, "seljak": 1019, "shellyfung": 1019, "shinsuk": 1019, "mori": 1019, "shoaib": 1019, "khan": 1019, "shogo": 1019, "hida": 1019, "shrankhla": 1019, "stellalin7": 1019, "schmerler": 1019, "vaerenbergh": 1019, "syd": 1019, "sre": 1019, "thedevpanda": 1019, "bonald": 1019, "germer": 1019, "ion": 1019, "timofei": 1019, "kornev": 1019, "pitter": 1019, "mathew": 1019, "tspeng": 1019, "egashira": 1019, "rey": 1019, "puerta": 1019, "vishal": 1019, "wattai": 1019, "wchathura": 1019, "wen": 1019, "x110": 1019, "xuniu": 1019, "yanhong": 1019, "ef": 1019, "adil": 1019, "khwaja": 1019, "25196": 1020, "24871": 1020, "25294": 1020, "25308": 1020, "25291": 1020, "25367": 1020, "25402": 1020, "buzenet": 1020, "25102": 1020, "24568": 1020, "25251": 1020, "22409": 1020, "25177": 1020, "24882": 1020, "25186": 1020, "breve": 1020, "siola": 1020, "25506": 1020, "sckit": 1020, "verion": 1020, "25297": 1020, "25232": 1020, "weezel": 1020, "25432": 1020, "25299": 1020, "omarmanzoor": 1020, "24140": 1020, "25417": 1020, "25443": 1020, "marvin": 1020, "krawutschk": 1020, "feature_union": 1020, "25093": 1020, "25220": 1020, "22506": 1020, "kostelac": 1020, "24935": 1020, "seladu": 1020, "25257": 1020, "25190": 1020, "25387": 1020, "check_transformers_unfitted_stateless": 1020, "25638": 1020, "19664": 1020}, "objects": {"sklearn": [[391, 0, 0, "-", "base"], [391, 0, 0, "-", "calibration"], [391, 0, 0, "-", "cluster"], [391, 0, 0, "-", "compose"], [448, 4, 1, "", "config_context"], [391, 0, 0, "-", "covariance"], [391, 0, 0, "-", "cross_decomposition"], [391, 0, 0, "-", "datasets"], [391, 0, 0, "-", "decomposition"], [391, 0, 0, "-", "discriminant_analysis"], [391, 0, 0, "-", "dummy"], [391, 0, 0, "-", "ensemble"], [391, 0, 0, "-", "exceptions"], [391, 0, 0, "-", "experimental"], [391, 0, 0, "-", "feature_extraction"], [391, 0, 0, "-", "feature_selection"], [391, 0, 0, "-", "gaussian_process"], [607, 4, 1, "", "get_config"], [391, 0, 0, "-", "impute"], [391, 0, 0, "-", "inspection"], [391, 0, 0, "-", "isotonic"], [391, 0, 0, "-", "kernel_approximation"], [391, 0, 0, "-", "kernel_ridge"], [391, 0, 0, "-", "linear_model"], [391, 0, 0, "-", "manifold"], [391, 0, 0, "-", "metrics"], [391, 0, 0, "-", "mixture"], [391, 0, 0, "-", "model_selection"], [391, 0, 0, "-", "multiclass"], [391, 0, 0, "-", "multioutput"], [391, 0, 0, "-", "naive_bayes"], [391, 0, 0, "-", "neighbors"], [391, 0, 0, "-", "neural_network"], [391, 0, 0, "-", "pipeline"], [391, 0, 0, "-", "preprocessing"], [391, 0, 0, "-", "random_projection"], [391, 0, 0, "-", "semi_supervised"], [876, 4, 1, "", "set_config"], [877, 4, 1, "", "show_versions"], [391, 0, 0, "-", "svm"], [391, 0, 0, "-", "tree"], [391, 0, 0, "-", "utils"]], "sklearn.base": [[406, 1, 1, "", "BaseEstimator"], [407, 1, 1, "", "BiclusterMixin"], [408, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [409, 1, 1, "", "ClassifierMixin"], [410, 1, 1, "", "ClusterMixin"], [411, 1, 1, "", "DensityMixin"], [412, 1, 1, "", "OneToOneFeatureMixin"], [413, 1, 1, "", "RegressorMixin"], [414, 1, 1, "", "TransformerMixin"], [415, 4, 1, "", "clone"], [416, 4, 1, "", "is_classifier"], [417, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[406, 2, 1, "", "get_params"], [406, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[407, 3, 1, "", "biclusters_"], [407, 2, 1, "", "get_indices"], [407, 2, 1, "", "get_shape"], [407, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[408, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[409, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[410, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[411, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[412, 2, 1, "", "get_feature_names_out"]], "sklearn.base.RegressorMixin": [[413, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[414, 2, 1, "", "fit_transform"], [414, 2, 1, "", "set_output"]], "sklearn.calibration": [[418, 1, 1, "", "CalibratedClassifierCV"], [419, 1, 1, "", "CalibrationDisplay"], [420, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[418, 2, 1, "", "fit"], [418, 2, 1, "", "get_params"], [418, 2, 1, "", "predict"], [418, 2, 1, "", "predict_proba"], [418, 2, 1, "", "score"], [418, 2, 1, "", "set_params"]], "sklearn.calibration.CalibrationDisplay": [[419, 2, 1, "", "from_estimator"], [419, 2, 1, "", "from_predictions"], [419, 2, 1, "", "plot"]], "sklearn.cluster": [[421, 1, 1, "", "AffinityPropagation"], [422, 1, 1, "", "AgglomerativeClustering"], [423, 1, 1, "", "Birch"], [424, 1, 1, "", "BisectingKMeans"], [425, 1, 1, "", "DBSCAN"], [426, 1, 1, "", "FeatureAgglomeration"], [427, 1, 1, "", "KMeans"], [428, 1, 1, "", "MeanShift"], [429, 1, 1, "", "MiniBatchKMeans"], [430, 1, 1, "", "OPTICS"], [431, 1, 1, "", "SpectralBiclustering"], [432, 1, 1, "", "SpectralClustering"], [433, 1, 1, "", "SpectralCoclustering"], [434, 4, 1, "", "affinity_propagation"], [435, 4, 1, "", "cluster_optics_dbscan"], [436, 4, 1, "", "cluster_optics_xi"], [437, 4, 1, "", "compute_optics_graph"], [403, 4, 1, "", "dbscan"], [438, 4, 1, "", "estimate_bandwidth"], [439, 4, 1, "", "k_means"], [440, 4, 1, "", "kmeans_plusplus"], [441, 4, 1, "", "mean_shift"], [442, 4, 1, "", "spectral_clustering"], [443, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[421, 2, 1, "", "fit"], [421, 2, 1, "", "fit_predict"], [421, 2, 1, "", "get_params"], [421, 2, 1, "", "predict"], [421, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[422, 2, 1, "", "fit"], [422, 2, 1, "", "fit_predict"], [422, 2, 1, "", "get_params"], [422, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[423, 2, 1, "", "fit"], [423, 2, 1, "", "fit_predict"], [423, 2, 1, "", "fit_transform"], [423, 2, 1, "", "get_feature_names_out"], [423, 2, 1, "", "get_params"], [423, 2, 1, "", "partial_fit"], [423, 2, 1, "", "predict"], [423, 2, 1, "", "set_output"], [423, 2, 1, "", "set_params"], [423, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[424, 2, 1, "", "fit"], [424, 2, 1, "", "fit_predict"], [424, 2, 1, "", "fit_transform"], [424, 2, 1, "", "get_feature_names_out"], [424, 2, 1, "", "get_params"], [424, 2, 1, "", "predict"], [424, 2, 1, "", "score"], [424, 2, 1, "", "set_output"], [424, 2, 1, "", "set_params"], [424, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[425, 2, 1, "", "fit"], [425, 2, 1, "", "fit_predict"], [425, 2, 1, "", "get_params"], [425, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[426, 2, 1, "", "fit"], [426, 3, 1, "", "fit_predict"], [426, 2, 1, "", "fit_transform"], [426, 2, 1, "", "get_feature_names_out"], [426, 2, 1, "", "get_params"], [426, 2, 1, "", "inverse_transform"], [426, 2, 1, "", "set_output"], [426, 2, 1, "", "set_params"], [426, 2, 1, "", "transform"]], "sklearn.cluster.KMeans": [[427, 2, 1, "", "fit"], [427, 2, 1, "", "fit_predict"], [427, 2, 1, "", "fit_transform"], [427, 2, 1, "", "get_feature_names_out"], [427, 2, 1, "", "get_params"], [427, 2, 1, "", "predict"], [427, 2, 1, "", "score"], [427, 2, 1, "", "set_output"], [427, 2, 1, "", "set_params"], [427, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[428, 2, 1, "", "fit"], [428, 2, 1, "", "fit_predict"], [428, 2, 1, "", "get_params"], [428, 2, 1, "", "predict"], [428, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[429, 2, 1, "", "fit"], [429, 2, 1, "", "fit_predict"], [429, 2, 1, "", "fit_transform"], [429, 2, 1, "", "get_feature_names_out"], [429, 2, 1, "", "get_params"], [429, 2, 1, "", "partial_fit"], [429, 2, 1, "", "predict"], [429, 2, 1, "", "score"], [429, 2, 1, "", "set_output"], [429, 2, 1, "", "set_params"], [429, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[430, 2, 1, "", "fit"], [430, 2, 1, "", "fit_predict"], [430, 2, 1, "", "get_params"], [430, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[431, 3, 1, "", "biclusters_"], [431, 2, 1, "", "fit"], [431, 2, 1, "", "get_indices"], [431, 2, 1, "", "get_params"], [431, 2, 1, "", "get_shape"], [431, 2, 1, "", "get_submatrix"], [431, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[432, 2, 1, "", "fit"], [432, 2, 1, "", "fit_predict"], [432, 2, 1, "", "get_params"], [432, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[433, 3, 1, "", "biclusters_"], [433, 2, 1, "", "fit"], [433, 2, 1, "", "get_indices"], [433, 2, 1, "", "get_params"], [433, 2, 1, "", "get_shape"], [433, 2, 1, "", "get_submatrix"], [433, 2, 1, "", "set_params"]], "sklearn.compose": [[444, 1, 1, "", "ColumnTransformer"], [445, 1, 1, "", "TransformedTargetRegressor"], [446, 4, 1, "", "make_column_selector"], [447, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[444, 2, 1, "", "fit"], [444, 2, 1, "", "fit_transform"], [444, 2, 1, "", "get_feature_names_out"], [444, 2, 1, "", "get_params"], [444, 3, 1, "", "named_transformers_"], [444, 2, 1, "", "set_output"], [444, 2, 1, "", "set_params"], [444, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[445, 2, 1, "", "fit"], [445, 2, 1, "", "get_params"], [445, 3, 1, "", "n_features_in_"], [445, 2, 1, "", "predict"], [445, 2, 1, "", "score"], [445, 2, 1, "", "set_params"]], "sklearn.covariance": [[449, 1, 1, "", "EllipticEnvelope"], [450, 1, 1, "", "EmpiricalCovariance"], [451, 1, 1, "", "GraphicalLasso"], [452, 1, 1, "", "GraphicalLassoCV"], [453, 1, 1, "", "LedoitWolf"], [454, 1, 1, "", "MinCovDet"], [455, 1, 1, "", "OAS"], [456, 1, 1, "", "ShrunkCovariance"], [457, 4, 1, "", "empirical_covariance"], [458, 4, 1, "", "graphical_lasso"], [459, 4, 1, "", "ledoit_wolf"], [460, 4, 1, "", "ledoit_wolf_shrinkage"], [405, 4, 1, "", "oas"], [461, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[449, 2, 1, "", "correct_covariance"], [449, 2, 1, "", "decision_function"], [449, 2, 1, "", "error_norm"], [449, 2, 1, "", "fit"], [449, 2, 1, "", "fit_predict"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "get_precision"], [449, 2, 1, "", "mahalanobis"], [449, 2, 1, "", "predict"], [449, 2, 1, "", "reweight_covariance"], [449, 2, 1, "", "score"], [449, 2, 1, "", "score_samples"], [449, 2, 1, "", "set_params"]], "sklearn.covariance.EmpiricalCovariance": [[450, 2, 1, "", "error_norm"], [450, 2, 1, "", "fit"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "get_precision"], [450, 2, 1, "", "mahalanobis"], [450, 2, 1, "", "score"], [450, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLasso": [[451, 2, 1, "", "error_norm"], [451, 2, 1, "", "fit"], [451, 2, 1, "", "get_params"], [451, 2, 1, "", "get_precision"], [451, 2, 1, "", "mahalanobis"], [451, 2, 1, "", "score"], [451, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLassoCV": [[452, 2, 1, "", "error_norm"], [452, 2, 1, "", "fit"], [452, 2, 1, "", "get_params"], [452, 2, 1, "", "get_precision"], [452, 2, 1, "", "mahalanobis"], [452, 2, 1, "", "score"], [452, 2, 1, "", "set_params"]], "sklearn.covariance.LedoitWolf": [[453, 2, 1, "", "error_norm"], [453, 2, 1, "", "fit"], [453, 2, 1, "", "get_params"], [453, 2, 1, "", "get_precision"], [453, 2, 1, "", "mahalanobis"], [453, 2, 1, "", "score"], [453, 2, 1, "", "set_params"]], "sklearn.covariance.MinCovDet": [[454, 2, 1, "", "correct_covariance"], [454, 2, 1, "", "error_norm"], [454, 2, 1, "", "fit"], [454, 2, 1, "", "get_params"], [454, 2, 1, "", "get_precision"], [454, 2, 1, "", "mahalanobis"], [454, 2, 1, "", "reweight_covariance"], [454, 2, 1, "", "score"], [454, 2, 1, "", "set_params"]], "sklearn.covariance.OAS": [[455, 2, 1, "", "error_norm"], [455, 2, 1, "", "fit"], [455, 2, 1, "", "get_params"], [455, 2, 1, "", "get_precision"], [455, 2, 1, "", "mahalanobis"], [455, 2, 1, "", "score"], [455, 2, 1, "", "set_params"]], "sklearn.covariance.ShrunkCovariance": [[456, 2, 1, "", "error_norm"], [456, 2, 1, "", "fit"], [456, 2, 1, "", "get_params"], [456, 2, 1, "", "get_precision"], [456, 2, 1, "", "mahalanobis"], [456, 2, 1, "", "score"], [456, 2, 1, "", "set_params"]], "sklearn.cross_decomposition": [[462, 1, 1, "", "CCA"], [463, 1, 1, "", "PLSCanonical"], [464, 1, 1, "", "PLSRegression"], [465, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[462, 3, 1, "", "coef_"], [462, 2, 1, "", "fit"], [462, 2, 1, "", "fit_transform"], [462, 2, 1, "", "get_feature_names_out"], [462, 2, 1, "", "get_params"], [462, 2, 1, "", "inverse_transform"], [462, 2, 1, "", "predict"], [462, 2, 1, "", "score"], [462, 2, 1, "", "set_output"], [462, 2, 1, "", "set_params"], [462, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[463, 3, 1, "", "coef_"], [463, 2, 1, "", "fit"], [463, 2, 1, "", "fit_transform"], [463, 2, 1, "", "get_feature_names_out"], [463, 2, 1, "", "get_params"], [463, 2, 1, "", "inverse_transform"], [463, 2, 1, "", "predict"], [463, 2, 1, "", "score"], [463, 2, 1, "", "set_output"], [463, 2, 1, "", "set_params"], [463, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[464, 3, 1, "", "coef_"], [464, 2, 1, "", "fit"], [464, 2, 1, "", "fit_transform"], [464, 2, 1, "", "get_feature_names_out"], [464, 2, 1, "", "get_params"], [464, 2, 1, "", "inverse_transform"], [464, 2, 1, "", "predict"], [464, 2, 1, "", "score"], [464, 2, 1, "", "set_output"], [464, 2, 1, "", "set_params"], [464, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[465, 2, 1, "", "fit"], [465, 2, 1, "", "fit_transform"], [465, 2, 1, "", "get_feature_names_out"], [465, 2, 1, "", "get_params"], [465, 2, 1, "", "set_output"], [465, 2, 1, "", "set_params"], [465, 2, 1, "", "transform"]], "sklearn.datasets": [[466, 4, 1, "", "clear_data_home"], [467, 4, 1, "", "dump_svmlight_file"], [468, 4, 1, "", "fetch_20newsgroups"], [469, 4, 1, "", "fetch_20newsgroups_vectorized"], [470, 4, 1, "", "fetch_california_housing"], [471, 4, 1, "", "fetch_covtype"], [472, 4, 1, "", "fetch_kddcup99"], [473, 4, 1, "", "fetch_lfw_pairs"], [474, 4, 1, "", "fetch_lfw_people"], [475, 4, 1, "", "fetch_olivetti_faces"], [476, 4, 1, "", "fetch_openml"], [477, 4, 1, "", "fetch_rcv1"], [478, 4, 1, "", "fetch_species_distributions"], [479, 4, 1, "", "get_data_home"], [480, 4, 1, "", "load_breast_cancer"], [481, 4, 1, "", "load_diabetes"], [482, 4, 1, "", "load_digits"], [483, 4, 1, "", "load_files"], [484, 4, 1, "", "load_iris"], [485, 4, 1, "", "load_linnerud"], [486, 4, 1, "", "load_sample_image"], [487, 4, 1, "", "load_sample_images"], [488, 4, 1, "", "load_svmlight_file"], [489, 4, 1, "", "load_svmlight_files"], [490, 4, 1, "", "load_wine"], [491, 4, 1, "", "make_biclusters"], [492, 4, 1, "", "make_blobs"], [493, 4, 1, "", "make_checkerboard"], [494, 4, 1, "", "make_circles"], [495, 4, 1, "", "make_classification"], [496, 4, 1, "", "make_friedman1"], [497, 4, 1, "", "make_friedman2"], [498, 4, 1, "", "make_friedman3"], [499, 4, 1, "", "make_gaussian_quantiles"], [500, 4, 1, "", "make_hastie_10_2"], [501, 4, 1, "", "make_low_rank_matrix"], [502, 4, 1, "", "make_moons"], [503, 4, 1, "", "make_multilabel_classification"], [504, 4, 1, "", "make_regression"], [505, 4, 1, "", "make_s_curve"], [506, 4, 1, "", "make_sparse_coded_signal"], [507, 4, 1, "", "make_sparse_spd_matrix"], [508, 4, 1, "", "make_sparse_uncorrelated"], [509, 4, 1, "", "make_spd_matrix"], [510, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[511, 1, 1, "", "DictionaryLearning"], [512, 1, 1, "", "FactorAnalysis"], [513, 1, 1, "", "FastICA"], [514, 1, 1, "", "IncrementalPCA"], [515, 1, 1, "", "KernelPCA"], [516, 1, 1, "", "LatentDirichletAllocation"], [517, 1, 1, "", "MiniBatchDictionaryLearning"], [518, 1, 1, "", "MiniBatchNMF"], [519, 1, 1, "", "MiniBatchSparsePCA"], [520, 1, 1, "", "NMF"], [521, 1, 1, "", "PCA"], [522, 1, 1, "", "SparseCoder"], [523, 1, 1, "", "SparsePCA"], [524, 1, 1, "", "TruncatedSVD"], [525, 4, 1, "", "dict_learning"], [526, 4, 1, "", "dict_learning_online"], [404, 4, 1, "", "fastica"], [527, 4, 1, "", "non_negative_factorization"], [528, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[511, 2, 1, "", "fit"], [511, 2, 1, "", "fit_transform"], [511, 2, 1, "", "get_feature_names_out"], [511, 2, 1, "", "get_params"], [511, 2, 1, "", "set_output"], [511, 2, 1, "", "set_params"], [511, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[512, 2, 1, "", "fit"], [512, 2, 1, "", "fit_transform"], [512, 2, 1, "", "get_covariance"], [512, 2, 1, "", "get_feature_names_out"], [512, 2, 1, "", "get_params"], [512, 2, 1, "", "get_precision"], [512, 2, 1, "", "score"], [512, 2, 1, "", "score_samples"], [512, 2, 1, "", "set_output"], [512, 2, 1, "", "set_params"], [512, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[513, 2, 1, "", "fit"], [513, 2, 1, "", "fit_transform"], [513, 2, 1, "", "get_feature_names_out"], [513, 2, 1, "", "get_params"], [513, 2, 1, "", "inverse_transform"], [513, 2, 1, "", "set_output"], [513, 2, 1, "", "set_params"], [513, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[514, 2, 1, "", "fit"], [514, 2, 1, "", "fit_transform"], [514, 2, 1, "", "get_covariance"], [514, 2, 1, "", "get_feature_names_out"], [514, 2, 1, "", "get_params"], [514, 2, 1, "", "get_precision"], [514, 2, 1, "", "inverse_transform"], [514, 2, 1, "", "partial_fit"], [514, 2, 1, "", "set_output"], [514, 2, 1, "", "set_params"], [514, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[515, 2, 1, "", "fit"], [515, 2, 1, "", "fit_transform"], [515, 2, 1, "", "get_feature_names_out"], [515, 2, 1, "", "get_params"], [515, 2, 1, "", "inverse_transform"], [515, 2, 1, "", "set_output"], [515, 2, 1, "", "set_params"], [515, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[516, 2, 1, "", "fit"], [516, 2, 1, "", "fit_transform"], [516, 2, 1, "", "get_feature_names_out"], [516, 2, 1, "", "get_params"], [516, 2, 1, "", "partial_fit"], [516, 2, 1, "", "perplexity"], [516, 2, 1, "", "score"], [516, 2, 1, "", "set_output"], [516, 2, 1, "", "set_params"], [516, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[517, 2, 1, "", "fit"], [517, 2, 1, "", "fit_transform"], [517, 2, 1, "", "get_feature_names_out"], [517, 2, 1, "", "get_params"], [517, 2, 1, "", "partial_fit"], [517, 2, 1, "", "set_output"], [517, 2, 1, "", "set_params"], [517, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[518, 2, 1, "", "fit"], [518, 2, 1, "", "fit_transform"], [518, 2, 1, "", "get_feature_names_out"], [518, 2, 1, "", "get_params"], [518, 2, 1, "", "inverse_transform"], [518, 2, 1, "", "partial_fit"], [518, 2, 1, "", "set_output"], [518, 2, 1, "", "set_params"], [518, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[519, 2, 1, "", "fit"], [519, 2, 1, "", "fit_transform"], [519, 2, 1, "", "get_feature_names_out"], [519, 2, 1, "", "get_params"], [519, 2, 1, "", "inverse_transform"], [519, 2, 1, "", "set_output"], [519, 2, 1, "", "set_params"], [519, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[520, 2, 1, "", "fit"], [520, 2, 1, "", "fit_transform"], [520, 2, 1, "", "get_feature_names_out"], [520, 2, 1, "", "get_params"], [520, 2, 1, "", "inverse_transform"], [520, 2, 1, "", "set_output"], [520, 2, 1, "", "set_params"], [520, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[521, 2, 1, "", "fit"], [521, 2, 1, "", "fit_transform"], [521, 2, 1, "", "get_covariance"], [521, 2, 1, "", "get_feature_names_out"], [521, 2, 1, "", "get_params"], [521, 2, 1, "", "get_precision"], [521, 2, 1, "", "inverse_transform"], [521, 2, 1, "", "score"], [521, 2, 1, "", "score_samples"], [521, 2, 1, "", "set_output"], [521, 2, 1, "", "set_params"], [521, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[522, 2, 1, "", "fit"], [522, 2, 1, "", "fit_transform"], [522, 2, 1, "", "get_feature_names_out"], [522, 2, 1, "", "get_params"], [522, 3, 1, "", "n_components_"], [522, 3, 1, "", "n_features_in_"], [522, 2, 1, "", "set_output"], [522, 2, 1, "", "set_params"], [522, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[523, 2, 1, "", "fit"], [523, 2, 1, "", "fit_transform"], [523, 2, 1, "", "get_feature_names_out"], [523, 2, 1, "", "get_params"], [523, 2, 1, "", "inverse_transform"], [523, 2, 1, "", "set_output"], [523, 2, 1, "", "set_params"], [523, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[524, 2, 1, "", "fit"], [524, 2, 1, "", "fit_transform"], [524, 2, 1, "", "get_feature_names_out"], [524, 2, 1, "", "get_params"], [524, 2, 1, "", "inverse_transform"], [524, 2, 1, "", "set_output"], [524, 2, 1, "", "set_params"], [524, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[529, 1, 1, "", "LinearDiscriminantAnalysis"], [530, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[529, 2, 1, "", "decision_function"], [529, 2, 1, "", "fit"], [529, 2, 1, "", "fit_transform"], [529, 2, 1, "", "get_feature_names_out"], [529, 2, 1, "", "get_params"], [529, 2, 1, "", "predict"], [529, 2, 1, "", "predict_log_proba"], [529, 2, 1, "", "predict_proba"], [529, 2, 1, "", "score"], [529, 2, 1, "", "set_output"], [529, 2, 1, "", "set_params"], [529, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[530, 2, 1, "", "decision_function"], [530, 2, 1, "", "fit"], [530, 2, 1, "", "get_params"], [530, 2, 1, "", "predict"], [530, 2, 1, "", "predict_log_proba"], [530, 2, 1, "", "predict_proba"], [530, 2, 1, "", "score"], [530, 2, 1, "", "set_params"]], "sklearn.dummy": [[531, 1, 1, "", "DummyClassifier"], [532, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[531, 2, 1, "", "fit"], [531, 2, 1, "", "get_params"], [531, 2, 1, "", "predict"], [531, 2, 1, "", "predict_log_proba"], [531, 2, 1, "", "predict_proba"], [531, 2, 1, "", "score"], [531, 2, 1, "", "set_params"]], "sklearn.dummy.DummyRegressor": [[532, 2, 1, "", "fit"], [532, 2, 1, "", "get_params"], [532, 2, 1, "", "predict"], [532, 2, 1, "", "score"], [532, 2, 1, "", "set_params"]], "sklearn.ensemble": [[533, 1, 1, "", "AdaBoostClassifier"], [534, 1, 1, "", "AdaBoostRegressor"], [535, 1, 1, "", "BaggingClassifier"], [536, 1, 1, "", "BaggingRegressor"], [537, 1, 1, "", "ExtraTreesClassifier"], [538, 1, 1, "", "ExtraTreesRegressor"], [539, 1, 1, "", "GradientBoostingClassifier"], [540, 1, 1, "", "GradientBoostingRegressor"], [541, 1, 1, "", "HistGradientBoostingClassifier"], [542, 1, 1, "", "HistGradientBoostingRegressor"], [543, 1, 1, "", "IsolationForest"], [544, 1, 1, "", "RandomForestClassifier"], [545, 1, 1, "", "RandomForestRegressor"], [546, 1, 1, "", "RandomTreesEmbedding"], [547, 1, 1, "", "StackingClassifier"], [548, 1, 1, "", "StackingRegressor"], [549, 1, 1, "", "VotingClassifier"], [550, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[533, 3, 1, "", "base_estimator_"], [533, 2, 1, "", "decision_function"], [533, 3, 1, "", "estimator_"], [533, 3, 1, "", "feature_importances_"], [533, 2, 1, "", "fit"], [533, 2, 1, "", "get_params"], [533, 2, 1, "", "predict"], [533, 2, 1, "", "predict_log_proba"], [533, 2, 1, "", "predict_proba"], [533, 2, 1, "", "score"], [533, 2, 1, "", "set_params"], [533, 2, 1, "", "staged_decision_function"], [533, 2, 1, "", "staged_predict"], [533, 2, 1, "", "staged_predict_proba"], [533, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[534, 3, 1, "", "base_estimator_"], [534, 3, 1, "", "estimator_"], [534, 3, 1, "", "feature_importances_"], [534, 2, 1, "", "fit"], [534, 2, 1, "", "get_params"], [534, 2, 1, "", "predict"], [534, 2, 1, "", "score"], [534, 2, 1, "", "set_params"], [534, 2, 1, "", "staged_predict"], [534, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[535, 3, 1, "", "base_estimator_"], [535, 2, 1, "", "decision_function"], [535, 3, 1, "", "estimator_"], [535, 3, 1, "", "estimators_samples_"], [535, 2, 1, "", "fit"], [535, 2, 1, "", "get_params"], [535, 2, 1, "", "predict"], [535, 2, 1, "", "predict_log_proba"], [535, 2, 1, "", "predict_proba"], [535, 2, 1, "", "score"], [535, 2, 1, "", "set_params"]], "sklearn.ensemble.BaggingRegressor": [[536, 3, 1, "", "base_estimator_"], [536, 3, 1, "", "estimator_"], [536, 3, 1, "", "estimators_samples_"], [536, 2, 1, "", "fit"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "predict"], [536, 2, 1, "", "score"], [536, 2, 1, "", "set_params"]], "sklearn.ensemble.ExtraTreesClassifier": [[537, 2, 1, "", "apply"], [537, 3, 1, "", "base_estimator_"], [537, 2, 1, "", "decision_path"], [537, 3, 1, "", "estimator_"], [537, 3, 1, "", "feature_importances_"], [537, 2, 1, "", "fit"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "predict"], [537, 2, 1, "", "predict_log_proba"], [537, 2, 1, "", "predict_proba"], [537, 2, 1, "", "score"], [537, 2, 1, "", "set_params"]], "sklearn.ensemble.ExtraTreesRegressor": [[538, 2, 1, "", "apply"], [538, 3, 1, "", "base_estimator_"], [538, 2, 1, "", "decision_path"], [538, 3, 1, "", "estimator_"], [538, 3, 1, "", "feature_importances_"], [538, 2, 1, "", "fit"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "predict"], [538, 2, 1, "", "score"], [538, 2, 1, "", "set_params"]], "sklearn.ensemble.GradientBoostingClassifier": [[539, 2, 1, "", "apply"], [539, 3, 1, "", "base_estimator_"], [539, 2, 1, "", "decision_function"], [539, 3, 1, "", "estimator_"], [539, 3, 1, "", "feature_importances_"], [539, 2, 1, "", "fit"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "predict"], [539, 2, 1, "", "predict_log_proba"], [539, 2, 1, "", "predict_proba"], [539, 2, 1, "", "score"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "staged_decision_function"], [539, 2, 1, "", "staged_predict"], [539, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[540, 2, 1, "", "apply"], [540, 3, 1, "", "base_estimator_"], [540, 3, 1, "", "estimator_"], [540, 3, 1, "", "feature_importances_"], [540, 2, 1, "", "fit"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "predict"], [540, 2, 1, "", "score"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[541, 2, 1, "", "decision_function"], [541, 2, 1, "", "fit"], [541, 2, 1, "", "get_params"], [541, 3, 1, "", "n_iter_"], [541, 2, 1, "", "predict"], [541, 2, 1, "", "predict_proba"], [541, 2, 1, "", "score"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "staged_decision_function"], [541, 2, 1, "", "staged_predict"], [541, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[542, 2, 1, "", "fit"], [542, 2, 1, "", "get_params"], [542, 3, 1, "", "n_iter_"], [542, 2, 1, "", "predict"], [542, 2, 1, "", "score"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[543, 3, 1, "", "base_estimator_"], [543, 2, 1, "", "decision_function"], [543, 3, 1, "", "estimator_"], [543, 3, 1, "", "estimators_samples_"], [543, 2, 1, "", "fit"], [543, 2, 1, "", "fit_predict"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "predict"], [543, 2, 1, "", "score_samples"], [543, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[544, 2, 1, "", "apply"], [544, 3, 1, "", "base_estimator_"], [544, 2, 1, "", "decision_path"], [544, 3, 1, "", "estimator_"], [544, 3, 1, "", "feature_importances_"], [544, 2, 1, "", "fit"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "predict"], [544, 2, 1, "", "predict_log_proba"], [544, 2, 1, "", "predict_proba"], [544, 2, 1, "", "score"], [544, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestRegressor": [[545, 2, 1, "", "apply"], [545, 3, 1, "", "base_estimator_"], [545, 2, 1, "", "decision_path"], [545, 3, 1, "", "estimator_"], [545, 3, 1, "", "feature_importances_"], [545, 2, 1, "", "fit"], [545, 2, 1, "", "get_params"], [545, 2, 1, "", "predict"], [545, 2, 1, "", "score"], [545, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomTreesEmbedding": [[546, 2, 1, "", "apply"], [546, 3, 1, "", "base_estimator_"], [546, 2, 1, "", "decision_path"], [546, 3, 1, "", "estimator_"], [546, 3, 1, "", "feature_importances_"], [546, 2, 1, "", "fit"], [546, 2, 1, "", "fit_transform"], [546, 2, 1, "", "get_feature_names_out"], [546, 2, 1, "", "get_params"], [546, 2, 1, "", "set_output"], [546, 2, 1, "", "set_params"], [546, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[547, 2, 1, "", "decision_function"], [547, 2, 1, "", "fit"], [547, 2, 1, "", "fit_transform"], [547, 2, 1, "", "get_feature_names_out"], [547, 2, 1, "", "get_params"], [547, 3, 1, "", "n_features_in_"], [547, 3, 1, "", "named_estimators"], [547, 2, 1, "", "predict"], [547, 2, 1, "", "predict_proba"], [547, 2, 1, "", "score"], [547, 2, 1, "", "set_output"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[548, 2, 1, "", "fit"], [548, 2, 1, "", "fit_transform"], [548, 2, 1, "", "get_feature_names_out"], [548, 2, 1, "", "get_params"], [548, 3, 1, "", "n_features_in_"], [548, 3, 1, "", "named_estimators"], [548, 2, 1, "", "predict"], [548, 2, 1, "", "score"], [548, 2, 1, "", "set_output"], [548, 2, 1, "", "set_params"], [548, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[549, 2, 1, "", "fit"], [549, 2, 1, "", "fit_transform"], [549, 2, 1, "", "get_feature_names_out"], [549, 2, 1, "", "get_params"], [549, 3, 1, "", "n_features_in_"], [549, 3, 1, "", "named_estimators"], [549, 2, 1, "", "predict"], [549, 2, 1, "", "predict_proba"], [549, 2, 1, "", "score"], [549, 2, 1, "", "set_output"], [549, 2, 1, "", "set_params"], [549, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[550, 2, 1, "", "fit"], [550, 2, 1, "", "fit_transform"], [550, 2, 1, "", "get_feature_names_out"], [550, 2, 1, "", "get_params"], [550, 3, 1, "", "n_features_in_"], [550, 3, 1, "", "named_estimators"], [550, 2, 1, "", "predict"], [550, 2, 1, "", "score"], [550, 2, 1, "", "set_output"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "transform"]], "sklearn.exceptions": [[551, 1, 1, "", "ConvergenceWarning"], [552, 1, 1, "", "DataConversionWarning"], [553, 1, 1, "", "DataDimensionalityWarning"], [554, 1, 1, "", "EfficiencyWarning"], [555, 1, 1, "", "FitFailedWarning"], [556, 1, 1, "", "InconsistentVersionWarning"], [557, 1, 1, "", "NotFittedError"], [558, 1, 1, "", "UndefinedMetricWarning"]], "sklearn.exceptions.ConvergenceWarning": [[551, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataConversionWarning": [[552, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataDimensionalityWarning": [[553, 2, 1, "", "with_traceback"]], "sklearn.exceptions.EfficiencyWarning": [[554, 2, 1, "", "with_traceback"]], "sklearn.exceptions.FitFailedWarning": [[555, 2, 1, "", "with_traceback"]], "sklearn.exceptions.InconsistentVersionWarning": [[556, 2, 1, "", "with_traceback"]], "sklearn.exceptions.NotFittedError": [[557, 2, 1, "", "with_traceback"]], "sklearn.exceptions.UndefinedMetricWarning": [[558, 2, 1, "", "with_traceback"]], "sklearn.experimental": [[559, 0, 0, "-", "enable_halving_search_cv"], [560, 0, 0, "-", "enable_hist_gradient_boosting"], [561, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[562, 1, 1, "", "DictVectorizer"], [563, 1, 1, "", "FeatureHasher"], [391, 0, 0, "-", "image"], [391, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[562, 2, 1, "", "fit"], [562, 2, 1, "", "fit_transform"], [562, 2, 1, "", "get_feature_names_out"], [562, 2, 1, "", "get_params"], [562, 2, 1, "", "inverse_transform"], [562, 2, 1, "", "restrict"], [562, 2, 1, "", "set_output"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[563, 2, 1, "", "fit"], [563, 2, 1, "", "fit_transform"], [563, 2, 1, "", "get_params"], [563, 2, 1, "", "set_output"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[564, 1, 1, "", "PatchExtractor"], [565, 4, 1, "", "extract_patches_2d"], [566, 4, 1, "", "grid_to_graph"], [567, 4, 1, "", "img_to_graph"], [568, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[564, 2, 1, "", "fit"], [564, 2, 1, "", "get_params"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[569, 1, 1, "", "CountVectorizer"], [570, 1, 1, "", "HashingVectorizer"], [571, 1, 1, "", "TfidfTransformer"], [572, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[569, 2, 1, "", "build_analyzer"], [569, 2, 1, "", "build_preprocessor"], [569, 2, 1, "", "build_tokenizer"], [569, 2, 1, "", "decode"], [569, 2, 1, "", "fit"], [569, 2, 1, "", "fit_transform"], [569, 2, 1, "", "get_feature_names_out"], [569, 2, 1, "", "get_params"], [569, 2, 1, "", "get_stop_words"], [569, 2, 1, "", "inverse_transform"], [569, 2, 1, "", "set_params"], [569, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[570, 2, 1, "", "build_analyzer"], [570, 2, 1, "", "build_preprocessor"], [570, 2, 1, "", "build_tokenizer"], [570, 2, 1, "", "decode"], [570, 2, 1, "", "fit"], [570, 2, 1, "", "fit_transform"], [570, 2, 1, "", "get_params"], [570, 2, 1, "", "get_stop_words"], [570, 2, 1, "", "partial_fit"], [570, 2, 1, "", "set_output"], [570, 2, 1, "", "set_params"], [570, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[571, 2, 1, "", "fit"], [571, 2, 1, "", "fit_transform"], [571, 2, 1, "", "get_feature_names_out"], [571, 2, 1, "", "get_params"], [571, 3, 1, "", "idf_"], [571, 2, 1, "", "set_output"], [571, 2, 1, "", "set_params"], [571, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[572, 2, 1, "", "build_analyzer"], [572, 2, 1, "", "build_preprocessor"], [572, 2, 1, "", "build_tokenizer"], [572, 2, 1, "", "decode"], [572, 2, 1, "", "fit"], [572, 2, 1, "", "fit_transform"], [572, 2, 1, "", "get_feature_names_out"], [572, 2, 1, "", "get_params"], [572, 2, 1, "", "get_stop_words"], [572, 3, 1, "", "idf_"], [572, 2, 1, "", "inverse_transform"], [572, 2, 1, "", "set_params"], [572, 2, 1, "", "transform"]], "sklearn.feature_selection": [[573, 1, 1, "", "GenericUnivariateSelect"], [574, 1, 1, "", "RFE"], [575, 1, 1, "", "RFECV"], [576, 1, 1, "", "SelectFdr"], [577, 1, 1, "", "SelectFpr"], [578, 1, 1, "", "SelectFromModel"], [579, 1, 1, "", "SelectFwe"], [580, 1, 1, "", "SelectKBest"], [581, 1, 1, "", "SelectPercentile"], [582, 1, 1, "", "SelectorMixin"], [583, 1, 1, "", "SequentialFeatureSelector"], [584, 1, 1, "", "VarianceThreshold"], [585, 4, 1, "", "chi2"], [586, 4, 1, "", "f_classif"], [587, 4, 1, "", "f_regression"], [588, 4, 1, "", "mutual_info_classif"], [589, 4, 1, "", "mutual_info_regression"], [590, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[573, 2, 1, "", "fit"], [573, 2, 1, "", "fit_transform"], [573, 2, 1, "", "get_feature_names_out"], [573, 2, 1, "", "get_params"], [573, 2, 1, "", "get_support"], [573, 2, 1, "", "inverse_transform"], [573, 2, 1, "", "set_output"], [573, 2, 1, "", "set_params"], [573, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[574, 3, 1, "", "classes_"], [574, 2, 1, "", "decision_function"], [574, 2, 1, "", "fit"], [574, 2, 1, "", "fit_transform"], [574, 2, 1, "", "get_feature_names_out"], [574, 2, 1, "", "get_params"], [574, 2, 1, "", "get_support"], [574, 2, 1, "", "inverse_transform"], [574, 2, 1, "", "predict"], [574, 2, 1, "", "predict_log_proba"], [574, 2, 1, "", "predict_proba"], [574, 2, 1, "", "score"], [574, 2, 1, "", "set_output"], [574, 2, 1, "", "set_params"], [574, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[575, 3, 1, "", "classes_"], [575, 2, 1, "", "decision_function"], [575, 2, 1, "", "fit"], [575, 2, 1, "", "fit_transform"], [575, 2, 1, "", "get_feature_names_out"], [575, 2, 1, "", "get_params"], [575, 2, 1, "", "get_support"], [575, 2, 1, "", "inverse_transform"], [575, 2, 1, "", "predict"], [575, 2, 1, "", "predict_log_proba"], [575, 2, 1, "", "predict_proba"], [575, 2, 1, "", "score"], [575, 2, 1, "", "set_output"], [575, 2, 1, "", "set_params"], [575, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[576, 2, 1, "", "fit"], [576, 2, 1, "", "fit_transform"], [576, 2, 1, "", "get_feature_names_out"], [576, 2, 1, "", "get_params"], [576, 2, 1, "", "get_support"], [576, 2, 1, "", "inverse_transform"], [576, 2, 1, "", "set_output"], [576, 2, 1, "", "set_params"], [576, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[577, 2, 1, "", "fit"], [577, 2, 1, "", "fit_transform"], [577, 2, 1, "", "get_feature_names_out"], [577, 2, 1, "", "get_params"], [577, 2, 1, "", "get_support"], [577, 2, 1, "", "inverse_transform"], [577, 2, 1, "", "set_output"], [577, 2, 1, "", "set_params"], [577, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[578, 2, 1, "", "fit"], [578, 2, 1, "", "fit_transform"], [578, 2, 1, "", "get_feature_names_out"], [578, 2, 1, "", "get_params"], [578, 2, 1, "", "get_support"], [578, 2, 1, "", "inverse_transform"], [578, 3, 1, "", "n_features_in_"], [578, 2, 1, "", "partial_fit"], [578, 2, 1, "", "set_output"], [578, 2, 1, "", "set_params"], [578, 3, 1, "", "threshold_"], [578, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[579, 2, 1, "", "fit"], [579, 2, 1, "", "fit_transform"], [579, 2, 1, "", "get_feature_names_out"], [579, 2, 1, "", "get_params"], [579, 2, 1, "", "get_support"], [579, 2, 1, "", "inverse_transform"], [579, 2, 1, "", "set_output"], [579, 2, 1, "", "set_params"], [579, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[580, 2, 1, "", "fit"], [580, 2, 1, "", "fit_transform"], [580, 2, 1, "", "get_feature_names_out"], [580, 2, 1, "", "get_params"], [580, 2, 1, "", "get_support"], [580, 2, 1, "", "inverse_transform"], [580, 2, 1, "", "set_output"], [580, 2, 1, "", "set_params"], [580, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[581, 2, 1, "", "fit"], [581, 2, 1, "", "fit_transform"], [581, 2, 1, "", "get_feature_names_out"], [581, 2, 1, "", "get_params"], [581, 2, 1, "", "get_support"], [581, 2, 1, "", "inverse_transform"], [581, 2, 1, "", "set_output"], [581, 2, 1, "", "set_params"], [581, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[582, 2, 1, "", "fit_transform"], [582, 2, 1, "", "get_feature_names_out"], [582, 2, 1, "", "get_support"], [582, 2, 1, "", "inverse_transform"], [582, 2, 1, "", "set_output"], [582, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[583, 2, 1, "", "fit"], [583, 2, 1, "", "fit_transform"], [583, 2, 1, "", "get_feature_names_out"], [583, 2, 1, "", "get_params"], [583, 2, 1, "", "get_support"], [583, 2, 1, "", "inverse_transform"], [583, 2, 1, "", "set_output"], [583, 2, 1, "", "set_params"], [583, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[584, 2, 1, "", "fit"], [584, 2, 1, "", "fit_transform"], [584, 2, 1, "", "get_feature_names_out"], [584, 2, 1, "", "get_params"], [584, 2, 1, "", "get_support"], [584, 2, 1, "", "inverse_transform"], [584, 2, 1, "", "set_output"], [584, 2, 1, "", "set_params"], [584, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[591, 1, 1, "", "GaussianProcessClassifier"], [592, 1, 1, "", "GaussianProcessRegressor"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[591, 2, 1, "", "fit"], [591, 2, 1, "", "get_params"], [591, 3, 1, "", "kernel_"], [591, 2, 1, "", "log_marginal_likelihood"], [591, 2, 1, "", "predict"], [591, 2, 1, "", "predict_proba"], [591, 2, 1, "", "score"], [591, 2, 1, "", "set_params"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[592, 2, 1, "", "fit"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "log_marginal_likelihood"], [592, 2, 1, "", "predict"], [592, 2, 1, "", "sample_y"], [592, 2, 1, "", "score"], [592, 2, 1, "", "set_params"]], "sklearn.gaussian_process.kernels": [[593, 1, 1, "", "CompoundKernel"], [594, 1, 1, "", "ConstantKernel"], [595, 1, 1, "", "DotProduct"], [596, 1, 1, "", "ExpSineSquared"], [597, 1, 1, "", "Exponentiation"], [598, 1, 1, "", "Hyperparameter"], [599, 1, 1, "", "Kernel"], [600, 1, 1, "", "Matern"], [601, 1, 1, "", "PairwiseKernel"], [602, 1, 1, "", "Product"], [603, 1, 1, "", "RBF"], [604, 1, 1, "", "RationalQuadratic"], [605, 1, 1, "", "Sum"], [606, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[593, 2, 1, "", "__call__"], [593, 3, 1, "", "bounds"], [593, 2, 1, "", "clone_with_theta"], [593, 2, 1, "", "diag"], [593, 2, 1, "", "get_params"], [593, 3, 1, "", "hyperparameters"], [593, 2, 1, "", "is_stationary"], [593, 3, 1, "", "n_dims"], [593, 3, 1, "", "requires_vector_input"], [593, 2, 1, "", "set_params"], [593, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[594, 2, 1, "", "__call__"], [594, 3, 1, "", "bounds"], [594, 2, 1, "", "clone_with_theta"], [594, 2, 1, "", "diag"], [594, 2, 1, "", "get_params"], [594, 3, 1, "", "hyperparameters"], [594, 2, 1, "", "is_stationary"], [594, 3, 1, "", "n_dims"], [594, 3, 1, "", "requires_vector_input"], [594, 2, 1, "", "set_params"], [594, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[595, 2, 1, "", "__call__"], [595, 3, 1, "", "bounds"], [595, 2, 1, "", "clone_with_theta"], [595, 2, 1, "", "diag"], [595, 2, 1, "", "get_params"], [595, 3, 1, "", "hyperparameters"], [595, 2, 1, "", "is_stationary"], [595, 3, 1, "", "n_dims"], [595, 3, 1, "", "requires_vector_input"], [595, 2, 1, "", "set_params"], [595, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[596, 2, 1, "", "__call__"], [596, 3, 1, "", "bounds"], [596, 2, 1, "", "clone_with_theta"], [596, 2, 1, "", "diag"], [596, 2, 1, "", "get_params"], [596, 3, 1, "", "hyperparameter_length_scale"], [596, 3, 1, "", "hyperparameters"], [596, 2, 1, "", "is_stationary"], [596, 3, 1, "", "n_dims"], [596, 3, 1, "", "requires_vector_input"], [596, 2, 1, "", "set_params"], [596, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[597, 2, 1, "", "__call__"], [597, 3, 1, "", "bounds"], [597, 2, 1, "", "clone_with_theta"], [597, 2, 1, "", "diag"], [597, 2, 1, "", "get_params"], [597, 3, 1, "", "hyperparameters"], [597, 2, 1, "", "is_stationary"], [597, 3, 1, "", "n_dims"], [597, 3, 1, "", "requires_vector_input"], [597, 2, 1, "", "set_params"], [597, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[598, 2, 1, "", "__call__"], [598, 5, 1, "", "bounds"], [598, 2, 1, "", "count"], [598, 5, 1, "", "fixed"], [598, 2, 1, "", "index"], [598, 5, 1, "", "n_elements"], [598, 5, 1, "", "name"], [598, 5, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[599, 2, 1, "", "__call__"], [599, 3, 1, "", "bounds"], [599, 2, 1, "", "clone_with_theta"], [599, 2, 1, "", "diag"], [599, 2, 1, "", "get_params"], [599, 3, 1, "", "hyperparameters"], [599, 2, 1, "", "is_stationary"], [599, 3, 1, "", "n_dims"], [599, 3, 1, "", "requires_vector_input"], [599, 2, 1, "", "set_params"], [599, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[600, 2, 1, "", "__call__"], [600, 3, 1, "", "bounds"], [600, 2, 1, "", "clone_with_theta"], [600, 2, 1, "", "diag"], [600, 2, 1, "", "get_params"], [600, 3, 1, "", "hyperparameters"], [600, 2, 1, "", "is_stationary"], [600, 3, 1, "", "n_dims"], [600, 3, 1, "", "requires_vector_input"], [600, 2, 1, "", "set_params"], [600, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[601, 2, 1, "", "__call__"], [601, 3, 1, "", "bounds"], [601, 2, 1, "", "clone_with_theta"], [601, 2, 1, "", "diag"], [601, 2, 1, "", "get_params"], [601, 3, 1, "", "hyperparameters"], [601, 2, 1, "", "is_stationary"], [601, 3, 1, "", "n_dims"], [601, 3, 1, "", "requires_vector_input"], [601, 2, 1, "", "set_params"], [601, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[602, 2, 1, "", "__call__"], [602, 3, 1, "", "bounds"], [602, 2, 1, "", "clone_with_theta"], [602, 2, 1, "", "diag"], [602, 2, 1, "", "get_params"], [602, 3, 1, "", "hyperparameters"], [602, 2, 1, "", "is_stationary"], [602, 3, 1, "", "n_dims"], [602, 3, 1, "", "requires_vector_input"], [602, 2, 1, "", "set_params"], [602, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[603, 2, 1, "", "__call__"], [603, 3, 1, "", "bounds"], [603, 2, 1, "", "clone_with_theta"], [603, 2, 1, "", "diag"], [603, 2, 1, "", "get_params"], [603, 3, 1, "", "hyperparameters"], [603, 2, 1, "", "is_stationary"], [603, 3, 1, "", "n_dims"], [603, 3, 1, "", "requires_vector_input"], [603, 2, 1, "", "set_params"], [603, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[604, 2, 1, "", "__call__"], [604, 3, 1, "", "bounds"], [604, 2, 1, "", "clone_with_theta"], [604, 2, 1, "", "diag"], [604, 2, 1, "", "get_params"], [604, 3, 1, "", "hyperparameters"], [604, 2, 1, "", "is_stationary"], [604, 3, 1, "", "n_dims"], [604, 3, 1, "", "requires_vector_input"], [604, 2, 1, "", "set_params"], [604, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[605, 2, 1, "", "__call__"], [605, 3, 1, "", "bounds"], [605, 2, 1, "", "clone_with_theta"], [605, 2, 1, "", "diag"], [605, 2, 1, "", "get_params"], [605, 3, 1, "", "hyperparameters"], [605, 2, 1, "", "is_stationary"], [605, 3, 1, "", "n_dims"], [605, 3, 1, "", "requires_vector_input"], [605, 2, 1, "", "set_params"], [605, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[606, 2, 1, "", "__call__"], [606, 3, 1, "", "bounds"], [606, 2, 1, "", "clone_with_theta"], [606, 2, 1, "", "diag"], [606, 2, 1, "", "get_params"], [606, 3, 1, "", "hyperparameters"], [606, 2, 1, "", "is_stationary"], [606, 3, 1, "", "n_dims"], [606, 3, 1, "", "requires_vector_input"], [606, 2, 1, "", "set_params"], [606, 3, 1, "", "theta"]], "sklearn.impute": [[608, 1, 1, "", "IterativeImputer"], [609, 1, 1, "", "KNNImputer"], [610, 1, 1, "", "MissingIndicator"], [611, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[608, 2, 1, "", "fit"], [608, 2, 1, "", "fit_transform"], [608, 2, 1, "", "get_feature_names_out"], [608, 2, 1, "", "get_params"], [608, 2, 1, "", "set_output"], [608, 2, 1, "", "set_params"], [608, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[609, 2, 1, "", "fit"], [609, 2, 1, "", "fit_transform"], [609, 2, 1, "", "get_feature_names_out"], [609, 2, 1, "", "get_params"], [609, 2, 1, "", "set_output"], [609, 2, 1, "", "set_params"], [609, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[610, 2, 1, "", "fit"], [610, 2, 1, "", "fit_transform"], [610, 2, 1, "", "get_feature_names_out"], [610, 2, 1, "", "get_params"], [610, 2, 1, "", "set_output"], [610, 2, 1, "", "set_params"], [610, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[611, 2, 1, "", "fit"], [611, 2, 1, "", "fit_transform"], [611, 2, 1, "", "get_feature_names_out"], [611, 2, 1, "", "get_params"], [611, 2, 1, "", "inverse_transform"], [611, 2, 1, "", "set_output"], [611, 2, 1, "", "set_params"], [611, 2, 1, "", "transform"]], "sklearn.inspection": [[612, 1, 1, "", "DecisionBoundaryDisplay"], [613, 1, 1, "", "PartialDependenceDisplay"], [614, 4, 1, "", "partial_dependence"], [615, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[612, 2, 1, "", "from_estimator"], [612, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[613, 2, 1, "", "from_estimator"], [613, 2, 1, "", "plot"]], "sklearn.isotonic": [[616, 1, 1, "", "IsotonicRegression"], [617, 4, 1, "", "check_increasing"], [618, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[616, 2, 1, "", "fit"], [616, 2, 1, "", "fit_transform"], [616, 2, 1, "", "get_feature_names_out"], [616, 2, 1, "", "get_params"], [616, 2, 1, "", "predict"], [616, 2, 1, "", "score"], [616, 2, 1, "", "set_output"], [616, 2, 1, "", "set_params"], [616, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[619, 1, 1, "", "AdditiveChi2Sampler"], [620, 1, 1, "", "Nystroem"], [621, 1, 1, "", "PolynomialCountSketch"], [622, 1, 1, "", "RBFSampler"], [623, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[619, 2, 1, "", "fit"], [619, 2, 1, "", "fit_transform"], [619, 2, 1, "", "get_feature_names_out"], [619, 2, 1, "", "get_params"], [619, 2, 1, "", "set_output"], [619, 2, 1, "", "set_params"], [619, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[620, 2, 1, "", "fit"], [620, 2, 1, "", "fit_transform"], [620, 2, 1, "", "get_feature_names_out"], [620, 2, 1, "", "get_params"], [620, 2, 1, "", "set_output"], [620, 2, 1, "", "set_params"], [620, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[621, 2, 1, "", "fit"], [621, 2, 1, "", "fit_transform"], [621, 2, 1, "", "get_feature_names_out"], [621, 2, 1, "", "get_params"], [621, 2, 1, "", "set_output"], [621, 2, 1, "", "set_params"], [621, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[622, 2, 1, "", "fit"], [622, 2, 1, "", "fit_transform"], [622, 2, 1, "", "get_feature_names_out"], [622, 2, 1, "", "get_params"], [622, 2, 1, "", "set_output"], [622, 2, 1, "", "set_params"], [622, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[623, 2, 1, "", "fit"], [623, 2, 1, "", "fit_transform"], [623, 2, 1, "", "get_feature_names_out"], [623, 2, 1, "", "get_params"], [623, 2, 1, "", "set_output"], [623, 2, 1, "", "set_params"], [623, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[624, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[624, 2, 1, "", "fit"], [624, 2, 1, "", "get_params"], [624, 2, 1, "", "predict"], [624, 2, 1, "", "score"], [624, 2, 1, "", "set_params"]], "sklearn.linear_model": [[625, 1, 1, "", "ARDRegression"], [626, 1, 1, "", "BayesianRidge"], [627, 1, 1, "", "ElasticNet"], [628, 1, 1, "", "ElasticNetCV"], [629, 1, 1, "", "GammaRegressor"], [630, 1, 1, "", "HuberRegressor"], [631, 1, 1, "", "Lars"], [632, 1, 1, "", "LarsCV"], [633, 1, 1, "", "Lasso"], [634, 1, 1, "", "LassoCV"], [635, 1, 1, "", "LassoLars"], [636, 1, 1, "", "LassoLarsCV"], [637, 1, 1, "", "LassoLarsIC"], [638, 1, 1, "", "LinearRegression"], [639, 1, 1, "", "LogisticRegression"], [640, 1, 1, "", "LogisticRegressionCV"], [641, 1, 1, "", "MultiTaskElasticNet"], [642, 1, 1, "", "MultiTaskElasticNetCV"], [643, 1, 1, "", "MultiTaskLasso"], [644, 1, 1, "", "MultiTaskLassoCV"], [645, 1, 1, "", "OrthogonalMatchingPursuit"], [646, 1, 1, "", "OrthogonalMatchingPursuitCV"], [647, 1, 1, "", "PassiveAggressiveClassifier"], [648, 4, 1, "", "PassiveAggressiveRegressor"], [649, 1, 1, "", "Perceptron"], [650, 1, 1, "", "PoissonRegressor"], [651, 1, 1, "", "QuantileRegressor"], [652, 1, 1, "", "RANSACRegressor"], [653, 1, 1, "", "Ridge"], [654, 1, 1, "", "RidgeCV"], [655, 1, 1, "", "RidgeClassifier"], [656, 1, 1, "", "RidgeClassifierCV"], [657, 1, 1, "", "SGDClassifier"], [658, 1, 1, "", "SGDOneClassSVM"], [659, 1, 1, "", "SGDRegressor"], [660, 1, 1, "", "TheilSenRegressor"], [661, 1, 1, "", "TweedieRegressor"], [662, 4, 1, "", "enet_path"], [663, 4, 1, "", "lars_path"], [664, 4, 1, "", "lars_path_gram"], [665, 4, 1, "", "lasso_path"], [666, 4, 1, "", "orthogonal_mp"], [667, 4, 1, "", "orthogonal_mp_gram"], [668, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[625, 2, 1, "", "fit"], [625, 2, 1, "", "get_params"], [625, 2, 1, "", "predict"], [625, 2, 1, "", "score"], [625, 2, 1, "", "set_params"]], "sklearn.linear_model.BayesianRidge": [[626, 2, 1, "", "fit"], [626, 2, 1, "", "get_params"], [626, 2, 1, "", "predict"], [626, 2, 1, "", "score"], [626, 2, 1, "", "set_params"]], "sklearn.linear_model.ElasticNet": [[627, 2, 1, "", "fit"], [627, 2, 1, "", "get_params"], [627, 2, 1, "", "path"], [627, 2, 1, "", "predict"], [627, 2, 1, "", "score"], [627, 2, 1, "", "set_params"], [627, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[628, 2, 1, "", "fit"], [628, 2, 1, "", "get_params"], [628, 2, 1, "", "path"], [628, 2, 1, "", "predict"], [628, 2, 1, "", "score"], [628, 2, 1, "", "set_params"]], "sklearn.linear_model.GammaRegressor": [[629, 3, 1, "", "family"], [629, 2, 1, "", "fit"], [629, 2, 1, "", "get_params"], [629, 2, 1, "", "predict"], [629, 2, 1, "", "score"], [629, 2, 1, "", "set_params"]], "sklearn.linear_model.HuberRegressor": [[630, 2, 1, "", "fit"], [630, 2, 1, "", "get_params"], [630, 2, 1, "", "predict"], [630, 2, 1, "", "score"], [630, 2, 1, "", "set_params"]], "sklearn.linear_model.Lars": [[631, 2, 1, "", "fit"], [631, 2, 1, "", "get_params"], [631, 2, 1, "", "predict"], [631, 2, 1, "", "score"], [631, 2, 1, "", "set_params"]], "sklearn.linear_model.LarsCV": [[632, 2, 1, "", "fit"], [632, 2, 1, "", "get_params"], [632, 2, 1, "", "predict"], [632, 2, 1, "", "score"], [632, 2, 1, "", "set_params"]], "sklearn.linear_model.Lasso": [[633, 2, 1, "", "fit"], [633, 2, 1, "", "get_params"], [633, 2, 1, "", "path"], [633, 2, 1, "", "predict"], [633, 2, 1, "", "score"], [633, 2, 1, "", "set_params"], [633, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[634, 2, 1, "", "fit"], [634, 2, 1, "", "get_params"], [634, 2, 1, "", "path"], [634, 2, 1, "", "predict"], [634, 2, 1, "", "score"], [634, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLars": [[635, 2, 1, "", "fit"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "predict"], [635, 2, 1, "", "score"], [635, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLarsCV": [[636, 2, 1, "", "fit"], [636, 2, 1, "", "get_params"], [636, 2, 1, "", "predict"], [636, 2, 1, "", "score"], [636, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLarsIC": [[637, 2, 1, "", "fit"], [637, 2, 1, "", "get_params"], [637, 2, 1, "", "predict"], [637, 2, 1, "", "score"], [637, 2, 1, "", "set_params"]], "sklearn.linear_model.LinearRegression": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "predict"], [638, 2, 1, "", "score"], [638, 2, 1, "", "set_params"]], "sklearn.linear_model.LogisticRegression": [[639, 2, 1, "", "decision_function"], [639, 2, 1, "", "densify"], [639, 2, 1, "", "fit"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "predict"], [639, 2, 1, "", "predict_log_proba"], [639, 2, 1, "", "predict_proba"], [639, 2, 1, "", "score"], [639, 2, 1, "", "set_params"], [639, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[640, 2, 1, "", "decision_function"], [640, 2, 1, "", "densify"], [640, 2, 1, "", "fit"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "predict"], [640, 2, 1, "", "predict_log_proba"], [640, 2, 1, "", "predict_proba"], [640, 2, 1, "", "score"], [640, 2, 1, "", "set_params"], [640, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "path"], [641, 2, 1, "", "predict"], [641, 2, 1, "", "score"], [641, 2, 1, "", "set_params"], [641, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "path"], [642, 2, 1, "", "predict"], [642, 2, 1, "", "score"], [642, 2, 1, "", "set_params"]], "sklearn.linear_model.MultiTaskLasso": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "path"], [643, 2, 1, "", "predict"], [643, 2, 1, "", "score"], [643, 2, 1, "", "set_params"], [643, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "path"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_params"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "predict"], [645, 2, 1, "", "score"], [645, 2, 1, "", "set_params"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_params"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[647, 2, 1, "", "decision_function"], [647, 2, 1, "", "densify"], [647, 2, 1, "", "fit"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "partial_fit"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[649, 2, 1, "", "decision_function"], [649, 2, 1, "", "densify"], [649, 2, 1, "", "fit"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "partial_fit"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[650, 3, 1, "", "family"], [650, 2, 1, "", "fit"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_params"]], "sklearn.linear_model.QuantileRegressor": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_params"]], "sklearn.linear_model.RANSACRegressor": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeCV": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeClassifier": [[655, 3, 1, "", "classes_"], [655, 2, 1, "", "decision_function"], [655, 2, 1, "", "fit"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeClassifierCV": [[656, 3, 1, "", "classes_"], [656, 2, 1, "", "decision_function"], [656, 2, 1, "", "fit"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_params"]], "sklearn.linear_model.SGDClassifier": [[657, 2, 1, "", "decision_function"], [657, 2, 1, "", "densify"], [657, 2, 1, "", "fit"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "partial_fit"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "predict_log_proba"], [657, 2, 1, "", "predict_proba"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[658, 2, 1, "", "decision_function"], [658, 2, 1, "", "densify"], [658, 2, 1, "", "fit"], [658, 2, 1, "", "fit_predict"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "partial_fit"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score_samples"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[659, 2, 1, "", "densify"], [659, 2, 1, "", "fit"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "partial_fit"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[660, 2, 1, "", "fit"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_params"]], "sklearn.linear_model.TweedieRegressor": [[661, 3, 1, "", "family"], [661, 2, 1, "", "fit"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_params"]], "sklearn.manifold": [[669, 1, 1, "", "Isomap"], [670, 1, 1, "", "LocallyLinearEmbedding"], [671, 1, 1, "", "MDS"], [672, 1, 1, "", "SpectralEmbedding"], [673, 1, 1, "", "TSNE"], [674, 4, 1, "", "locally_linear_embedding"], [675, 4, 1, "", "smacof"], [676, 4, 1, "", "spectral_embedding"], [677, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[669, 2, 1, "", "fit"], [669, 2, 1, "", "fit_transform"], [669, 2, 1, "", "get_feature_names_out"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "reconstruction_error"], [669, 2, 1, "", "set_output"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[670, 2, 1, "", "fit"], [670, 2, 1, "", "fit_transform"], [670, 2, 1, "", "get_feature_names_out"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "set_output"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[671, 2, 1, "", "fit"], [671, 2, 1, "", "fit_transform"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[672, 2, 1, "", "fit"], [672, 2, 1, "", "fit_transform"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[673, 2, 1, "", "fit"], [673, 2, 1, "", "fit_transform"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "set_params"]], "sklearn.metrics": [[678, 1, 1, "", "ConfusionMatrixDisplay"], [679, 1, 1, "", "DetCurveDisplay"], [680, 1, 1, "", "DistanceMetric"], [681, 1, 1, "", "PrecisionRecallDisplay"], [682, 1, 1, "", "PredictionErrorDisplay"], [683, 1, 1, "", "RocCurveDisplay"], [684, 4, 1, "", "accuracy_score"], [685, 4, 1, "", "adjusted_mutual_info_score"], [686, 4, 1, "", "adjusted_rand_score"], [687, 4, 1, "", "auc"], [688, 4, 1, "", "average_precision_score"], [689, 4, 1, "", "balanced_accuracy_score"], [690, 4, 1, "", "brier_score_loss"], [691, 4, 1, "", "calinski_harabasz_score"], [692, 4, 1, "", "check_scoring"], [693, 4, 1, "", "class_likelihood_ratios"], [694, 4, 1, "", "classification_report"], [391, 0, 0, "-", "cluster"], [697, 4, 1, "", "cohen_kappa_score"], [698, 4, 1, "", "completeness_score"], [699, 4, 1, "", "confusion_matrix"], [700, 4, 1, "", "consensus_score"], [701, 4, 1, "", "coverage_error"], [702, 4, 1, "", "d2_absolute_error_score"], [703, 4, 1, "", "d2_pinball_score"], [704, 4, 1, "", "d2_tweedie_score"], [705, 4, 1, "", "davies_bouldin_score"], [706, 4, 1, "", "dcg_score"], [707, 4, 1, "", "det_curve"], [708, 4, 1, "", "explained_variance_score"], [709, 4, 1, "", "f1_score"], [710, 4, 1, "", "fbeta_score"], [711, 4, 1, "", "fowlkes_mallows_score"], [712, 4, 1, "", "get_scorer"], [713, 4, 1, "", "get_scorer_names"], [714, 4, 1, "", "hamming_loss"], [715, 4, 1, "", "hinge_loss"], [716, 4, 1, "", "homogeneity_completeness_v_measure"], [717, 4, 1, "", "homogeneity_score"], [718, 4, 1, "", "jaccard_score"], [719, 4, 1, "", "label_ranking_average_precision_score"], [720, 4, 1, "", "label_ranking_loss"], [721, 4, 1, "", "log_loss"], [722, 4, 1, "", "make_scorer"], [723, 4, 1, "", "matthews_corrcoef"], [724, 4, 1, "", "max_error"], [725, 4, 1, "", "mean_absolute_error"], [726, 4, 1, "", "mean_absolute_percentage_error"], [727, 4, 1, "", "mean_gamma_deviance"], [728, 4, 1, "", "mean_pinball_loss"], [729, 4, 1, "", "mean_poisson_deviance"], [730, 4, 1, "", "mean_squared_error"], [731, 4, 1, "", "mean_squared_log_error"], [732, 4, 1, "", "mean_tweedie_deviance"], [733, 4, 1, "", "median_absolute_error"], [734, 4, 1, "", "multilabel_confusion_matrix"], [735, 4, 1, "", "mutual_info_score"], [736, 4, 1, "", "ndcg_score"], [737, 4, 1, "", "normalized_mutual_info_score"], [391, 0, 0, "-", "pairwise"], [758, 4, 1, "", "pairwise_distances"], [759, 4, 1, "", "pairwise_distances_argmin"], [760, 4, 1, "", "pairwise_distances_argmin_min"], [761, 4, 1, "", "pairwise_distances_chunked"], [762, 4, 1, "", "precision_recall_curve"], [763, 4, 1, "", "precision_recall_fscore_support"], [764, 4, 1, "", "precision_score"], [765, 4, 1, "", "r2_score"], [766, 4, 1, "", "rand_score"], [767, 4, 1, "", "recall_score"], [768, 4, 1, "", "roc_auc_score"], [769, 4, 1, "", "roc_curve"], [770, 4, 1, "", "silhouette_samples"], [771, 4, 1, "", "silhouette_score"], [772, 4, 1, "", "top_k_accuracy_score"], [773, 4, 1, "", "v_measure_score"], [774, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[678, 2, 1, "", "from_estimator"], [678, 2, 1, "", "from_predictions"], [678, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[679, 2, 1, "", "from_estimator"], [679, 2, 1, "", "from_predictions"], [679, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[680, 2, 1, "", "dist_to_rdist"], [680, 2, 1, "", "get_metric"], [680, 2, 1, "", "pairwise"], [680, 2, 1, "", "rdist_to_dist"]], "sklearn.metrics.PrecisionRecallDisplay": [[681, 2, 1, "", "from_estimator"], [681, 2, 1, "", "from_predictions"], [681, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[682, 2, 1, "", "from_estimator"], [682, 2, 1, "", "from_predictions"], [682, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[683, 2, 1, "", "from_estimator"], [683, 2, 1, "", "from_predictions"], [683, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[695, 4, 1, "", "contingency_matrix"], [696, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[738, 4, 1, "", "additive_chi2_kernel"], [739, 4, 1, "", "chi2_kernel"], [740, 4, 1, "", "cosine_distances"], [741, 4, 1, "", "cosine_similarity"], [742, 4, 1, "", "distance_metrics"], [743, 4, 1, "", "euclidean_distances"], [744, 4, 1, "", "haversine_distances"], [745, 4, 1, "", "kernel_metrics"], [746, 4, 1, "", "laplacian_kernel"], [747, 4, 1, "", "linear_kernel"], [748, 4, 1, "", "manhattan_distances"], [749, 4, 1, "", "nan_euclidean_distances"], [750, 4, 1, "", "paired_cosine_distances"], [751, 4, 1, "", "paired_distances"], [752, 4, 1, "", "paired_euclidean_distances"], [753, 4, 1, "", "paired_manhattan_distances"], [754, 4, 1, "", "pairwise_kernels"], [755, 4, 1, "", "polynomial_kernel"], [756, 4, 1, "", "rbf_kernel"], [757, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[775, 1, 1, "", "BayesianGaussianMixture"], [776, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[775, 2, 1, "", "fit"], [775, 2, 1, "", "fit_predict"], [775, 2, 1, "", "get_params"], [775, 2, 1, "", "predict"], [775, 2, 1, "", "predict_proba"], [775, 2, 1, "", "sample"], [775, 2, 1, "", "score"], [775, 2, 1, "", "score_samples"], [775, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[776, 2, 1, "", "aic"], [776, 2, 1, "", "bic"], [776, 2, 1, "", "fit"], [776, 2, 1, "", "fit_predict"], [776, 2, 1, "", "get_params"], [776, 2, 1, "", "predict"], [776, 2, 1, "", "predict_proba"], [776, 2, 1, "", "sample"], [776, 2, 1, "", "score"], [776, 2, 1, "", "score_samples"], [776, 2, 1, "", "set_params"]], "sklearn.model_selection": [[777, 1, 1, "", "GridSearchCV"], [778, 1, 1, "", "GroupKFold"], [779, 1, 1, "", "GroupShuffleSplit"], [780, 1, 1, "", "HalvingGridSearchCV"], [781, 1, 1, "", "HalvingRandomSearchCV"], [782, 1, 1, "", "KFold"], [783, 1, 1, "", "LearningCurveDisplay"], [784, 1, 1, "", "LeaveOneGroupOut"], [785, 1, 1, "", "LeaveOneOut"], [786, 1, 1, "", "LeavePGroupsOut"], [787, 1, 1, "", "LeavePOut"], [788, 1, 1, "", "ParameterGrid"], [789, 1, 1, "", "ParameterSampler"], [790, 1, 1, "", "PredefinedSplit"], [791, 1, 1, "", "RandomizedSearchCV"], [792, 1, 1, "", "RepeatedKFold"], [793, 1, 1, "", "RepeatedStratifiedKFold"], [794, 1, 1, "", "ShuffleSplit"], [795, 1, 1, "", "StratifiedGroupKFold"], [796, 1, 1, "", "StratifiedKFold"], [797, 1, 1, "", "StratifiedShuffleSplit"], [798, 1, 1, "", "TimeSeriesSplit"], [799, 4, 1, "", "check_cv"], [800, 4, 1, "", "cross_val_predict"], [801, 4, 1, "", "cross_val_score"], [802, 4, 1, "", "cross_validate"], [803, 4, 1, "", "learning_curve"], [804, 4, 1, "", "permutation_test_score"], [805, 4, 1, "", "train_test_split"], [806, 4, 1, "", "validation_curve"]], "sklearn.model_selection.GridSearchCV": [[777, 3, 1, "", "classes_"], [777, 2, 1, "", "decision_function"], [777, 2, 1, "", "fit"], [777, 2, 1, "", "get_params"], [777, 2, 1, "", "inverse_transform"], [777, 3, 1, "", "n_features_in_"], [777, 2, 1, "", "predict"], [777, 2, 1, "", "predict_log_proba"], [777, 2, 1, "", "predict_proba"], [777, 2, 1, "", "score"], [777, 2, 1, "", "score_samples"], [777, 2, 1, "", "set_params"], [777, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[778, 2, 1, "", "get_n_splits"], [778, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[779, 2, 1, "", "get_n_splits"], [779, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[780, 3, 1, "", "classes_"], [780, 2, 1, "", "decision_function"], [780, 2, 1, "", "fit"], [780, 2, 1, "", "get_params"], [780, 2, 1, "", "inverse_transform"], [780, 3, 1, "", "n_features_in_"], [780, 2, 1, "", "predict"], [780, 2, 1, "", "predict_log_proba"], [780, 2, 1, "", "predict_proba"], [780, 2, 1, "", "score"], [780, 2, 1, "", "score_samples"], [780, 2, 1, "", "set_params"], [780, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[781, 3, 1, "", "classes_"], [781, 2, 1, "", "decision_function"], [781, 2, 1, "", "fit"], [781, 2, 1, "", "get_params"], [781, 2, 1, "", "inverse_transform"], [781, 3, 1, "", "n_features_in_"], [781, 2, 1, "", "predict"], [781, 2, 1, "", "predict_log_proba"], [781, 2, 1, "", "predict_proba"], [781, 2, 1, "", "score"], [781, 2, 1, "", "score_samples"], [781, 2, 1, "", "set_params"], [781, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[782, 2, 1, "", "get_n_splits"], [782, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[783, 2, 1, "", "from_estimator"], [783, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[784, 2, 1, "", "get_n_splits"], [784, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[785, 2, 1, "", "get_n_splits"], [785, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[786, 2, 1, "", "get_n_splits"], [786, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[787, 2, 1, "", "get_n_splits"], [787, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[790, 2, 1, "", "get_n_splits"], [790, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[791, 3, 1, "", "classes_"], [791, 2, 1, "", "decision_function"], [791, 2, 1, "", "fit"], [791, 2, 1, "", "get_params"], [791, 2, 1, "", "inverse_transform"], [791, 3, 1, "", "n_features_in_"], [791, 2, 1, "", "predict"], [791, 2, 1, "", "predict_log_proba"], [791, 2, 1, "", "predict_proba"], [791, 2, 1, "", "score"], [791, 2, 1, "", "score_samples"], [791, 2, 1, "", "set_params"], [791, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[792, 2, 1, "", "get_n_splits"], [792, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[793, 2, 1, "", "get_n_splits"], [793, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[794, 2, 1, "", "get_n_splits"], [794, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[795, 2, 1, "", "get_n_splits"], [795, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[796, 2, 1, "", "get_n_splits"], [796, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[797, 2, 1, "", "get_n_splits"], [797, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[798, 2, 1, "", "get_n_splits"], [798, 2, 1, "", "split"]], "sklearn.multiclass": [[807, 1, 1, "", "OneVsOneClassifier"], [808, 1, 1, "", "OneVsRestClassifier"], [809, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[807, 2, 1, "", "decision_function"], [807, 2, 1, "", "fit"], [807, 2, 1, "", "get_params"], [807, 3, 1, "", "n_classes_"], [807, 2, 1, "", "partial_fit"], [807, 2, 1, "", "predict"], [807, 2, 1, "", "score"], [807, 2, 1, "", "set_params"]], "sklearn.multiclass.OneVsRestClassifier": [[808, 2, 1, "", "decision_function"], [808, 2, 1, "", "fit"], [808, 2, 1, "", "get_params"], [808, 3, 1, "", "multilabel_"], [808, 3, 1, "", "n_classes_"], [808, 2, 1, "", "partial_fit"], [808, 2, 1, "", "predict"], [808, 2, 1, "", "predict_proba"], [808, 2, 1, "", "score"], [808, 2, 1, "", "set_params"]], "sklearn.multiclass.OutputCodeClassifier": [[809, 2, 1, "", "fit"], [809, 2, 1, "", "get_params"], [809, 2, 1, "", "predict"], [809, 2, 1, "", "score"], [809, 2, 1, "", "set_params"]], "sklearn.multioutput": [[810, 1, 1, "", "ClassifierChain"], [811, 1, 1, "", "MultiOutputClassifier"], [812, 1, 1, "", "MultiOutputRegressor"], [813, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[810, 2, 1, "", "decision_function"], [810, 2, 1, "", "fit"], [810, 2, 1, "", "get_params"], [810, 2, 1, "", "predict"], [810, 2, 1, "", "predict_proba"], [810, 2, 1, "", "score"], [810, 2, 1, "", "set_params"]], "sklearn.multioutput.MultiOutputClassifier": [[811, 2, 1, "", "fit"], [811, 2, 1, "", "get_params"], [811, 2, 1, "", "partial_fit"], [811, 2, 1, "", "predict"], [811, 2, 1, "", "predict_proba"], [811, 2, 1, "", "score"], [811, 2, 1, "", "set_params"]], "sklearn.multioutput.MultiOutputRegressor": [[812, 2, 1, "", "fit"], [812, 2, 1, "", "get_params"], [812, 2, 1, "", "partial_fit"], [812, 2, 1, "", "predict"], [812, 2, 1, "", "score"], [812, 2, 1, "", "set_params"]], "sklearn.multioutput.RegressorChain": [[813, 2, 1, "", "fit"], [813, 2, 1, "", "get_params"], [813, 2, 1, "", "predict"], [813, 2, 1, "", "score"], [813, 2, 1, "", "set_params"]], "sklearn.naive_bayes": [[814, 1, 1, "", "BernoulliNB"], [815, 1, 1, "", "CategoricalNB"], [816, 1, 1, "", "ComplementNB"], [817, 1, 1, "", "GaussianNB"], [818, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[814, 2, 1, "", "fit"], [814, 2, 1, "", "get_params"], [814, 2, 1, "", "partial_fit"], [814, 2, 1, "", "predict"], [814, 2, 1, "", "predict_joint_log_proba"], [814, 2, 1, "", "predict_log_proba"], [814, 2, 1, "", "predict_proba"], [814, 2, 1, "", "score"], [814, 2, 1, "", "set_params"]], "sklearn.naive_bayes.CategoricalNB": [[815, 2, 1, "", "fit"], [815, 2, 1, "", "get_params"], [815, 2, 1, "", "partial_fit"], [815, 2, 1, "", "predict"], [815, 2, 1, "", "predict_joint_log_proba"], [815, 2, 1, "", "predict_log_proba"], [815, 2, 1, "", "predict_proba"], [815, 2, 1, "", "score"], [815, 2, 1, "", "set_params"]], "sklearn.naive_bayes.ComplementNB": [[816, 2, 1, "", "fit"], [816, 2, 1, "", "get_params"], [816, 2, 1, "", "partial_fit"], [816, 2, 1, "", "predict"], [816, 2, 1, "", "predict_joint_log_proba"], [816, 2, 1, "", "predict_log_proba"], [816, 2, 1, "", "predict_proba"], [816, 2, 1, "", "score"], [816, 2, 1, "", "set_params"]], "sklearn.naive_bayes.GaussianNB": [[817, 2, 1, "", "fit"], [817, 2, 1, "", "get_params"], [817, 2, 1, "", "partial_fit"], [817, 2, 1, "", "predict"], [817, 2, 1, "", "predict_joint_log_proba"], [817, 2, 1, "", "predict_log_proba"], [817, 2, 1, "", "predict_proba"], [817, 2, 1, "", "score"], [817, 2, 1, "", "set_params"]], "sklearn.naive_bayes.MultinomialNB": [[818, 2, 1, "", "fit"], [818, 2, 1, "", "get_params"], [818, 2, 1, "", "partial_fit"], [818, 2, 1, "", "predict"], [818, 2, 1, "", "predict_joint_log_proba"], [818, 2, 1, "", "predict_log_proba"], [818, 2, 1, "", "predict_proba"], [818, 2, 1, "", "score"], [818, 2, 1, "", "set_params"]], "sklearn.neighbors": [[819, 1, 1, "", "BallTree"], [820, 1, 1, "", "KDTree"], [821, 1, 1, "", "KNeighborsClassifier"], [822, 1, 1, "", "KNeighborsRegressor"], [823, 1, 1, "", "KNeighborsTransformer"], [824, 1, 1, "", "KernelDensity"], [825, 1, 1, "", "LocalOutlierFactor"], [826, 1, 1, "", "NearestCentroid"], [827, 1, 1, "", "NearestNeighbors"], [828, 1, 1, "", "NeighborhoodComponentsAnalysis"], [829, 1, 1, "", "RadiusNeighborsClassifier"], [830, 1, 1, "", "RadiusNeighborsRegressor"], [831, 1, 1, "", "RadiusNeighborsTransformer"], [832, 4, 1, "", "kneighbors_graph"], [833, 4, 1, "", "radius_neighbors_graph"], [834, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[819, 2, 1, "", "get_arrays"], [819, 2, 1, "", "get_n_calls"], [819, 2, 1, "", "get_tree_stats"], [819, 2, 1, "", "kernel_density"], [819, 2, 1, "", "query"], [819, 2, 1, "", "query_radius"], [819, 2, 1, "", "reset_n_calls"], [819, 2, 1, "", "two_point_correlation"], [819, 2, 1, "", "valid_metrics"]], "sklearn.neighbors.KDTree": [[820, 2, 1, "", "get_arrays"], [820, 2, 1, "", "get_n_calls"], [820, 2, 1, "", "get_tree_stats"], [820, 2, 1, "", "kernel_density"], [820, 2, 1, "", "query"], [820, 2, 1, "", "query_radius"], [820, 2, 1, "", "reset_n_calls"], [820, 2, 1, "", "two_point_correlation"], [820, 2, 1, "", "valid_metrics"]], "sklearn.neighbors.KNeighborsClassifier": [[821, 2, 1, "", "fit"], [821, 2, 1, "", "get_params"], [821, 2, 1, "", "kneighbors"], [821, 2, 1, "", "kneighbors_graph"], [821, 2, 1, "", "predict"], [821, 2, 1, "", "predict_proba"], [821, 2, 1, "", "score"], [821, 2, 1, "", "set_params"]], "sklearn.neighbors.KNeighborsRegressor": [[822, 2, 1, "", "fit"], [822, 2, 1, "", "get_params"], [822, 2, 1, "", "kneighbors"], [822, 2, 1, "", "kneighbors_graph"], [822, 2, 1, "", "predict"], [822, 2, 1, "", "score"], [822, 2, 1, "", "set_params"]], "sklearn.neighbors.KNeighborsTransformer": [[823, 2, 1, "", "fit"], [823, 2, 1, "", "fit_transform"], [823, 2, 1, "", "get_feature_names_out"], [823, 2, 1, "", "get_params"], [823, 2, 1, "", "kneighbors"], [823, 2, 1, "", "kneighbors_graph"], [823, 2, 1, "", "set_output"], [823, 2, 1, "", "set_params"], [823, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[824, 2, 1, "", "fit"], [824, 2, 1, "", "get_params"], [824, 2, 1, "", "sample"], [824, 2, 1, "", "score"], [824, 2, 1, "", "score_samples"], [824, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[825, 2, 1, "", "decision_function"], [825, 2, 1, "", "fit"], [825, 2, 1, "", "fit_predict"], [825, 2, 1, "", "get_params"], [825, 2, 1, "", "kneighbors"], [825, 2, 1, "", "kneighbors_graph"], [825, 2, 1, "", "predict"], [825, 2, 1, "", "score_samples"], [825, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[826, 2, 1, "", "fit"], [826, 2, 1, "", "get_params"], [826, 2, 1, "", "predict"], [826, 2, 1, "", "score"], [826, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestNeighbors": [[827, 2, 1, "", "fit"], [827, 2, 1, "", "get_params"], [827, 2, 1, "", "kneighbors"], [827, 2, 1, "", "kneighbors_graph"], [827, 2, 1, "", "radius_neighbors"], [827, 2, 1, "", "radius_neighbors_graph"], [827, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[828, 2, 1, "", "fit"], [828, 2, 1, "", "fit_transform"], [828, 2, 1, "", "get_feature_names_out"], [828, 2, 1, "", "get_params"], [828, 2, 1, "", "set_output"], [828, 2, 1, "", "set_params"], [828, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[829, 2, 1, "", "fit"], [829, 2, 1, "", "get_params"], [829, 2, 1, "", "predict"], [829, 2, 1, "", "predict_proba"], [829, 2, 1, "", "radius_neighbors"], [829, 2, 1, "", "radius_neighbors_graph"], [829, 2, 1, "", "score"], [829, 2, 1, "", "set_params"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[830, 2, 1, "", "fit"], [830, 2, 1, "", "get_params"], [830, 2, 1, "", "predict"], [830, 2, 1, "", "radius_neighbors"], [830, 2, 1, "", "radius_neighbors_graph"], [830, 2, 1, "", "score"], [830, 2, 1, "", "set_params"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[831, 2, 1, "", "fit"], [831, 2, 1, "", "fit_transform"], [831, 2, 1, "", "get_feature_names_out"], [831, 2, 1, "", "get_params"], [831, 2, 1, "", "radius_neighbors"], [831, 2, 1, "", "radius_neighbors_graph"], [831, 2, 1, "", "set_output"], [831, 2, 1, "", "set_params"], [831, 2, 1, "", "transform"]], "sklearn.neural_network": [[835, 1, 1, "", "BernoulliRBM"], [836, 1, 1, "", "MLPClassifier"], [837, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[835, 2, 1, "", "fit"], [835, 2, 1, "", "fit_transform"], [835, 2, 1, "", "get_feature_names_out"], [835, 2, 1, "", "get_params"], [835, 2, 1, "", "gibbs"], [835, 2, 1, "", "partial_fit"], [835, 2, 1, "", "score_samples"], [835, 2, 1, "", "set_output"], [835, 2, 1, "", "set_params"], [835, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[836, 2, 1, "", "fit"], [836, 2, 1, "", "get_params"], [836, 2, 1, "", "partial_fit"], [836, 2, 1, "", "predict"], [836, 2, 1, "", "predict_log_proba"], [836, 2, 1, "", "predict_proba"], [836, 2, 1, "", "score"], [836, 2, 1, "", "set_params"]], "sklearn.neural_network.MLPRegressor": [[837, 2, 1, "", "fit"], [837, 2, 1, "", "get_params"], [837, 2, 1, "", "partial_fit"], [837, 2, 1, "", "predict"], [837, 2, 1, "", "score"], [837, 2, 1, "", "set_params"]], "sklearn.pipeline": [[838, 1, 1, "", "FeatureUnion"], [839, 1, 1, "", "Pipeline"], [840, 4, 1, "", "make_pipeline"], [841, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[838, 3, 1, "", "feature_names_in_"], [838, 2, 1, "", "fit"], [838, 2, 1, "", "fit_transform"], [838, 2, 1, "", "get_feature_names_out"], [838, 2, 1, "", "get_params"], [838, 3, 1, "", "n_features_in_"], [838, 2, 1, "", "set_output"], [838, 2, 1, "", "set_params"], [838, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[839, 3, 1, "", "classes_"], [839, 2, 1, "", "decision_function"], [839, 3, 1, "", "feature_names_in_"], [839, 2, 1, "", "fit"], [839, 2, 1, "", "fit_predict"], [839, 2, 1, "", "fit_transform"], [839, 2, 1, "", "get_feature_names_out"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "inverse_transform"], [839, 3, 1, "", "n_features_in_"], [839, 3, 1, "", "named_steps"], [839, 2, 1, "", "predict"], [839, 2, 1, "", "predict_log_proba"], [839, 2, 1, "", "predict_proba"], [839, 2, 1, "", "score"], [839, 2, 1, "", "score_samples"], [839, 2, 1, "", "set_output"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "transform"]], "sklearn.preprocessing": [[842, 1, 1, "", "Binarizer"], [843, 1, 1, "", "FunctionTransformer"], [844, 1, 1, "", "KBinsDiscretizer"], [845, 1, 1, "", "KernelCenterer"], [846, 1, 1, "", "LabelBinarizer"], [847, 1, 1, "", "LabelEncoder"], [848, 1, 1, "", "MaxAbsScaler"], [849, 1, 1, "", "MinMaxScaler"], [850, 1, 1, "", "MultiLabelBinarizer"], [851, 1, 1, "", "Normalizer"], [852, 1, 1, "", "OneHotEncoder"], [853, 1, 1, "", "OrdinalEncoder"], [854, 1, 1, "", "PolynomialFeatures"], [855, 1, 1, "", "PowerTransformer"], [856, 1, 1, "", "QuantileTransformer"], [857, 1, 1, "", "RobustScaler"], [858, 1, 1, "", "SplineTransformer"], [859, 1, 1, "", "StandardScaler"], [860, 4, 1, "", "add_dummy_feature"], [861, 4, 1, "", "binarize"], [862, 4, 1, "", "label_binarize"], [863, 4, 1, "", "maxabs_scale"], [864, 4, 1, "", "minmax_scale"], [865, 4, 1, "", "normalize"], [866, 4, 1, "", "power_transform"], [867, 4, 1, "", "quantile_transform"], [868, 4, 1, "", "robust_scale"], [869, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "fit_transform"], [842, 2, 1, "", "get_feature_names_out"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "set_output"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "fit_transform"], [843, 2, 1, "", "get_feature_names_out"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "inverse_transform"], [843, 2, 1, "", "set_output"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "fit_transform"], [844, 2, 1, "", "get_feature_names_out"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "inverse_transform"], [844, 2, 1, "", "set_output"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "fit_transform"], [845, 2, 1, "", "get_feature_names_out"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "set_output"], [845, 2, 1, "", "set_params"], [845, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "fit_transform"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "inverse_transform"], [846, 2, 1, "", "set_output"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "fit_transform"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "inverse_transform"], [847, 2, 1, "", "set_output"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "fit_transform"], [848, 2, 1, "", "get_feature_names_out"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "inverse_transform"], [848, 2, 1, "", "partial_fit"], [848, 2, 1, "", "set_output"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "fit_transform"], [849, 2, 1, "", "get_feature_names_out"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "inverse_transform"], [849, 2, 1, "", "partial_fit"], [849, 2, 1, "", "set_output"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "fit_transform"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "inverse_transform"], [850, 2, 1, "", "set_output"], [850, 2, 1, "", "set_params"], [850, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[851, 2, 1, "", "fit"], [851, 2, 1, "", "fit_transform"], [851, 2, 1, "", "get_feature_names_out"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "set_output"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[852, 2, 1, "", "fit"], [852, 2, 1, "", "fit_transform"], [852, 2, 1, "", "get_feature_names_out"], [852, 2, 1, "", "get_params"], [852, 3, 1, "", "infrequent_categories_"], [852, 2, 1, "", "inverse_transform"], [852, 2, 1, "", "set_output"], [852, 2, 1, "", "set_params"], [852, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[853, 2, 1, "", "fit"], [853, 2, 1, "", "fit_transform"], [853, 2, 1, "", "get_feature_names_out"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "inverse_transform"], [853, 2, 1, "", "set_output"], [853, 2, 1, "", "set_params"], [853, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[854, 2, 1, "", "fit"], [854, 2, 1, "", "fit_transform"], [854, 2, 1, "", "get_feature_names_out"], [854, 2, 1, "", "get_params"], [854, 3, 1, "", "powers_"], [854, 2, 1, "", "set_output"], [854, 2, 1, "", "set_params"], [854, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "fit_transform"], [855, 2, 1, "", "get_feature_names_out"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "inverse_transform"], [855, 2, 1, "", "set_output"], [855, 2, 1, "", "set_params"], [855, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "fit_transform"], [856, 2, 1, "", "get_feature_names_out"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "inverse_transform"], [856, 2, 1, "", "set_output"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "fit_transform"], [857, 2, 1, "", "get_feature_names_out"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "inverse_transform"], [857, 2, 1, "", "set_output"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[858, 2, 1, "", "fit"], [858, 2, 1, "", "fit_transform"], [858, 2, 1, "", "get_feature_names_out"], [858, 2, 1, "", "get_params"], [858, 2, 1, "", "set_output"], [858, 2, 1, "", "set_params"], [858, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[859, 2, 1, "", "fit"], [859, 2, 1, "", "fit_transform"], [859, 2, 1, "", "get_feature_names_out"], [859, 2, 1, "", "get_params"], [859, 2, 1, "", "inverse_transform"], [859, 2, 1, "", "partial_fit"], [859, 2, 1, "", "set_output"], [859, 2, 1, "", "set_params"], [859, 2, 1, "", "transform"]], "sklearn.random_projection": [[870, 1, 1, "", "GaussianRandomProjection"], [871, 1, 1, "", "SparseRandomProjection"], [872, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[870, 2, 1, "", "fit"], [870, 2, 1, "", "fit_transform"], [870, 2, 1, "", "get_feature_names_out"], [870, 2, 1, "", "get_params"], [870, 2, 1, "", "inverse_transform"], [870, 2, 1, "", "set_output"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[871, 2, 1, "", "fit"], [871, 2, 1, "", "fit_transform"], [871, 2, 1, "", "get_feature_names_out"], [871, 2, 1, "", "get_params"], [871, 2, 1, "", "inverse_transform"], [871, 2, 1, "", "set_output"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[873, 1, 1, "", "LabelPropagation"], [874, 1, 1, "", "LabelSpreading"], [875, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[873, 2, 1, "", "fit"], [873, 2, 1, "", "get_params"], [873, 2, 1, "", "predict"], [873, 2, 1, "", "predict_proba"], [873, 2, 1, "", "score"], [873, 2, 1, "", "set_params"]], "sklearn.semi_supervised.LabelSpreading": [[874, 2, 1, "", "fit"], [874, 2, 1, "", "get_params"], [874, 2, 1, "", "predict"], [874, 2, 1, "", "predict_proba"], [874, 2, 1, "", "score"], [874, 2, 1, "", "set_params"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[875, 2, 1, "", "decision_function"], [875, 2, 1, "", "fit"], [875, 2, 1, "", "get_params"], [875, 2, 1, "", "predict"], [875, 2, 1, "", "predict_log_proba"], [875, 2, 1, "", "predict_proba"], [875, 2, 1, "", "score"], [875, 2, 1, "", "set_params"]], "sklearn.svm": [[878, 1, 1, "", "LinearSVC"], [879, 1, 1, "", "LinearSVR"], [880, 1, 1, "", "NuSVC"], [881, 1, 1, "", "NuSVR"], [882, 1, 1, "", "OneClassSVM"], [883, 1, 1, "", "SVC"], [884, 1, 1, "", "SVR"], [885, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[878, 2, 1, "", "decision_function"], [878, 2, 1, "", "densify"], [878, 2, 1, "", "fit"], [878, 2, 1, "", "get_params"], [878, 2, 1, "", "predict"], [878, 2, 1, "", "score"], [878, 2, 1, "", "set_params"], [878, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[879, 2, 1, "", "fit"], [879, 2, 1, "", "get_params"], [879, 2, 1, "", "predict"], [879, 2, 1, "", "score"], [879, 2, 1, "", "set_params"]], "sklearn.svm.NuSVC": [[880, 3, 1, "", "coef_"], [880, 2, 1, "", "decision_function"], [880, 2, 1, "", "fit"], [880, 2, 1, "", "get_params"], [880, 3, 1, "", "n_support_"], [880, 2, 1, "", "predict"], [880, 2, 1, "", "predict_log_proba"], [880, 2, 1, "", "predict_proba"], [880, 3, 1, "", "probA_"], [880, 3, 1, "", "probB_"], [880, 2, 1, "", "score"], [880, 2, 1, "", "set_params"]], "sklearn.svm.NuSVR": [[881, 3, 1, "", "coef_"], [881, 2, 1, "", "fit"], [881, 2, 1, "", "get_params"], [881, 3, 1, "", "n_support_"], [881, 2, 1, "", "predict"], [881, 2, 1, "", "score"], [881, 2, 1, "", "set_params"]], "sklearn.svm.OneClassSVM": [[882, 3, 1, "", "coef_"], [882, 2, 1, "", "decision_function"], [882, 2, 1, "", "fit"], [882, 2, 1, "", "fit_predict"], [882, 2, 1, "", "get_params"], [882, 3, 1, "", "n_support_"], [882, 2, 1, "", "predict"], [882, 2, 1, "", "score_samples"], [882, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[883, 3, 1, "", "coef_"], [883, 2, 1, "", "decision_function"], [883, 2, 1, "", "fit"], [883, 2, 1, "", "get_params"], [883, 3, 1, "", "n_support_"], [883, 2, 1, "", "predict"], [883, 2, 1, "", "predict_log_proba"], [883, 2, 1, "", "predict_proba"], [883, 3, 1, "", "probA_"], [883, 3, 1, "", "probB_"], [883, 2, 1, "", "score"], [883, 2, 1, "", "set_params"]], "sklearn.svm.SVR": [[884, 3, 1, "", "coef_"], [884, 2, 1, "", "fit"], [884, 2, 1, "", "get_params"], [884, 3, 1, "", "n_support_"], [884, 2, 1, "", "predict"], [884, 2, 1, "", "score"], [884, 2, 1, "", "set_params"]], "sklearn.tree": [[886, 1, 1, "", "DecisionTreeClassifier"], [887, 1, 1, "", "DecisionTreeRegressor"], [888, 1, 1, "", "ExtraTreeClassifier"], [889, 1, 1, "", "ExtraTreeRegressor"], [890, 4, 1, "", "export_graphviz"], [891, 4, 1, "", "export_text"], [892, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[886, 2, 1, "", "apply"], [886, 2, 1, "", "cost_complexity_pruning_path"], [886, 2, 1, "", "decision_path"], [886, 3, 1, "", "feature_importances_"], [886, 2, 1, "", "fit"], [886, 2, 1, "", "get_depth"], [886, 2, 1, "", "get_n_leaves"], [886, 2, 1, "", "get_params"], [886, 2, 1, "", "predict"], [886, 2, 1, "", "predict_log_proba"], [886, 2, 1, "", "predict_proba"], [886, 2, 1, "", "score"], [886, 2, 1, "", "set_params"]], "sklearn.tree.DecisionTreeRegressor": [[887, 2, 1, "", "apply"], [887, 2, 1, "", "cost_complexity_pruning_path"], [887, 2, 1, "", "decision_path"], [887, 3, 1, "", "feature_importances_"], [887, 2, 1, "", "fit"], [887, 2, 1, "", "get_depth"], [887, 2, 1, "", "get_n_leaves"], [887, 2, 1, "", "get_params"], [887, 2, 1, "", "predict"], [887, 2, 1, "", "score"], [887, 2, 1, "", "set_params"]], "sklearn.tree.ExtraTreeClassifier": [[888, 2, 1, "", "apply"], [888, 2, 1, "", "cost_complexity_pruning_path"], [888, 2, 1, "", "decision_path"], [888, 3, 1, "", "feature_importances_"], [888, 2, 1, "", "fit"], [888, 2, 1, "", "get_depth"], [888, 2, 1, "", "get_n_leaves"], [888, 2, 1, "", "get_params"], [888, 2, 1, "", "predict"], [888, 2, 1, "", "predict_log_proba"], [888, 2, 1, "", "predict_proba"], [888, 2, 1, "", "score"], [888, 2, 1, "", "set_params"]], "sklearn.tree.ExtraTreeRegressor": [[889, 2, 1, "", "apply"], [889, 2, 1, "", "cost_complexity_pruning_path"], [889, 2, 1, "", "decision_path"], [889, 3, 1, "", "feature_importances_"], [889, 2, 1, "", "fit"], [889, 2, 1, "", "get_depth"], [889, 2, 1, "", "get_n_leaves"], [889, 2, 1, "", "get_params"], [889, 2, 1, "", "predict"], [889, 2, 1, "", "score"], [889, 2, 1, "", "set_params"]], "sklearn.utils": [[893, 1, 1, "", "Bunch"], [894, 4, 1, "", "_safe_indexing"], [896, 4, 1, "", "as_float_array"], [897, 4, 1, "", "assert_all_finite"], [898, 4, 1, "", "check_X_y"], [899, 4, 1, "", "check_array"], [900, 4, 1, "", "check_consistent_length"], [901, 4, 1, "", "check_random_state"], [902, 4, 1, "", "check_scalar"], [905, 4, 1, "", "deprecated"], [911, 4, 1, "", "estimator_html_repr"], [918, 4, 1, "", "gen_batches"], [919, 4, 1, "", "gen_even_slices"], [921, 4, 1, "", "indexable"], [927, 4, 1, "", "murmurhash3_32"], [930, 4, 1, "", "parallel_backend"], [932, 4, 1, "", "register_parallel_backend"], [933, 4, 1, "", "resample"], [934, 4, 1, "", "safe_mask"], [935, 4, 1, "", "safe_sqr"], [936, 4, 1, "", "shuffle"]], "sklearn.utils.Bunch": [[893, 2, 1, "", "clear"], [893, 2, 1, "", "copy"], [893, 2, 1, "", "fromkeys"], [893, 2, 1, "", "get"], [893, 2, 1, "", "items"], [893, 2, 1, "", "keys"], [893, 2, 1, "", "pop"], [893, 2, 1, "", "popitem"], [893, 2, 1, "", "setdefault"], [893, 2, 1, "", "update"], [893, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[895, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[903, 4, 1, "", "compute_class_weight"], [904, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.discovery": [[906, 4, 1, "", "all_displays"], [907, 4, 1, "", "all_estimators"], [908, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[909, 4, 1, "", "check_estimator"], [910, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[912, 4, 1, "", "density"], [913, 4, 1, "", "fast_logdet"], [914, 4, 1, "", "randomized_range_finder"], [915, 4, 1, "", "randomized_svd"], [916, 4, 1, "", "safe_sparse_dot"], [917, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[920, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metaestimators": [[922, 4, 1, "", "available_if"], [923, 4, 1, "", "if_delegate_has_method"]], "sklearn.utils.multiclass": [[924, 4, 1, "", "is_multilabel"], [925, 4, 1, "", "type_of_target"], [926, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[928, 1, 1, "", "Parallel"], [929, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[928, 2, 1, "", "dispatch_next"], [928, 2, 1, "", "dispatch_one_batch"], [928, 2, 1, "", "format"], [928, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[931, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[937, 4, 1, "", "incr_mean_variance_axis"], [938, 4, 1, "", "inplace_column_scale"], [939, 4, 1, "", "inplace_csr_column_scale"], [940, 4, 1, "", "inplace_row_scale"], [941, 4, 1, "", "inplace_swap_column"], [942, 4, 1, "", "inplace_swap_row"], [943, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[944, 4, 1, "", "inplace_csr_row_normalize_l1"], [945, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[946, 4, 1, "", "check_is_fitted"], [947, 4, 1, "", "check_memory"], [948, 4, 1, "", "check_symmetric"], [949, 4, 1, "", "column_or_1d"], [950, 4, 1, "", "has_fit_parameter"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"about": [0, 378], "u": 0, "histori": [0, 1002], "govern": [0, 381], "author": [0, 1004], "contributor": [0, 367, 368, 381, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "experi": [0, 37, 367, 381], "team": [0, 367, 381], "commun": [0, 368, 381], "emeritu": 0, "core": [0, 8, 357, 367, 371, 373, 378, 381, 400, 964], "develop": [0, 366, 369, 370, 371, 373, 374, 375, 376, 381, 951], "cite": 0, "scikit": [0, 252, 307, 308, 309, 310, 311, 312, 354, 355, 366, 369, 371, 372, 378, 381, 383, 980, 982, 983, 986, 988, 989, 994, 997, 1000], "learn": [0, 5, 12, 50, 95, 98, 148, 164, 166, 167, 168, 173, 217, 218, 219, 220, 232, 252, 259, 287, 294, 307, 308, 309, 310, 311, 312, 315, 316, 317, 354, 355, 357, 364, 366, 368, 369, 371, 372, 378, 381, 383, 391, 397, 399, 957, 959, 967, 975, 980, 982, 983, 984, 986, 988, 989, 991, 994, 995, 996, 997, 998, 1000], "artwork": 0, "fund": 0, "past": 0, "sponsor": 0, "sprint": 0, "donat": 0, "project": [0, 85, 100, 104, 230, 368, 369, 378, 391, 974, 979, 982], "infrastructur": 0, "support": [0, 25, 119, 164, 191, 307, 308, 309, 310, 312, 322, 325, 334, 378, 383, 388, 390, 391, 399, 977, 985, 995, 1010], "exampl": [3, 6, 9, 53, 58, 74, 87, 102, 125, 156, 164, 193, 194, 332, 336, 357, 362, 363, 372, 378, 382, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 406, 414, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 440, 442, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 459, 462, 463, 464, 467, 468, 469, 470, 471, 472, 474, 475, 476, 478, 479, 480, 481, 482, 484, 486, 490, 491, 492, 493, 494, 495, 499, 500, 502, 503, 504, 505, 506, 507, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 565, 568, 569, 570, 571, 572, 574, 575, 578, 580, 581, 583, 585, 586, 587, 588, 589, 591, 592, 594, 595, 596, 598, 599, 600, 603, 604, 606, 608, 609, 611, 612, 613, 614, 615, 616, 620, 621, 622, 624, 625, 626, 627, 629, 630, 633, 634, 636, 637, 638, 639, 640, 643, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 669, 670, 671, 672, 673, 674, 678, 681, 682, 683, 684, 685, 686, 687, 688, 690, 693, 694, 698, 699, 700, 707, 709, 714, 717, 718, 721, 722, 725, 728, 729, 730, 732, 733, 735, 737, 758, 759, 762, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 808, 810, 812, 814, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 832, 835, 836, 837, 838, 839, 840, 843, 844, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 864, 867, 871, 872, 874, 875, 876, 878, 880, 881, 882, 883, 884, 885, 886, 887, 892, 893, 901, 910, 912, 919, 922, 936, 946, 951, 954, 956, 957, 958, 959, 961, 962, 963, 965, 966, 967, 968, 969, 970, 972, 974, 975, 976, 977, 978, 979, 988, 994, 995, 996, 1001, 1004], "base": [3, 4, 84, 116, 117, 146, 164, 232, 307, 308, 310, 312, 368, 391, 392, 396, 399, 401, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 958, 970, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "real": [3, 9, 74, 109, 164, 363], "world": [3, 74, 164, 363], "dataset": [3, 4, 5, 8, 24, 25, 27, 32, 34, 44, 57, 61, 69, 84, 87, 88, 89, 90, 91, 95, 104, 118, 119, 129, 135, 136, 149, 151, 153, 154, 156, 158, 164, 166, 167, 168, 176, 179, 186, 197, 199, 206, 215, 218, 219, 226, 231, 236, 255, 263, 264, 319, 320, 324, 340, 346, 360, 361, 362, 363, 364, 365, 372, 378, 391, 402, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 988, 994, 995, 997, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "time": [4, 15, 22, 28, 35, 67, 75, 82, 86, 92, 107, 120, 133, 139, 147, 159, 163, 171, 174, 191, 216, 224, 231, 232, 240, 249, 273, 276, 291, 297, 305, 313, 321, 338, 340, 343, 350, 396], "relat": [4, 8, 362, 368, 970, 982, 1011], "featur": [4, 51, 54, 73, 100, 115, 116, 117, 119, 123, 126, 127, 140, 142, 144, 145, 146, 164, 169, 170, 173, 176, 191, 194, 215, 231, 236, 258, 296, 300, 301, 304, 307, 309, 310, 330, 340, 341, 355, 357, 368, 371, 391, 393, 399, 400, 401, 952, 970, 972, 979, 996, 997, 1007, 1008, 1009, 1010, 1011], "engin": [4, 169, 982, 986], "data": [4, 7, 9, 12, 17, 24, 26, 38, 47, 49, 50, 56, 57, 62, 63, 65, 66, 69, 74, 77, 79, 81, 84, 85, 96, 97, 100, 101, 102, 103, 109, 111, 116, 117, 123, 125, 129, 142, 145, 146, 154, 155, 157, 162, 166, 169, 170, 173, 177, 181, 183, 190, 191, 227, 232, 235, 238, 247, 252, 254, 258, 263, 264, 266, 267, 270, 289, 296, 299, 303, 304, 315, 327, 330, 334, 341, 342, 351, 355, 357, 363, 372, 378, 380, 392, 393, 395, 396, 401, 402, 972, 976, 986, 988, 991, 994, 996, 997], "explor": 4, "bike": [4, 168], "share": [4, 168], "demand": 4, "cross": [4, 83, 84, 135, 136, 145, 164, 186, 252, 253, 255, 256, 260, 262, 267, 330, 351, 368, 391, 395, 396, 951, 958, 992], "valid": [4, 135, 136, 145, 186, 230, 252, 253, 255, 256, 260, 262, 267, 272, 330, 351, 355, 369, 376, 391, 396, 946, 947, 948, 949, 950, 951, 957, 958, 965, 992], "gradient": [4, 119, 120, 121, 122, 123, 124, 168, 197, 205, 211, 307, 308, 310, 312, 399, 958, 976], "boost": [4, 119, 120, 121, 122, 123, 124, 168, 197, 307, 308, 310, 312, 399], "naiv": [4, 24, 25, 391, 964], "linear": [4, 25, 33, 34, 122, 149, 164, 167, 175, 176, 193, 197, 200, 203, 218, 219, 231, 308, 326, 333, 334, 355, 376, 378, 391, 956, 958, 959, 960, 972, 995], "regress": [4, 72, 74, 84, 85, 111, 122, 123, 132, 149, 154, 155, 156, 157, 176, 177, 180, 186, 188, 189, 190, 193, 195, 197, 199, 212, 214, 215, 229, 232, 289, 334, 347, 348, 364, 391, 393, 399, 402, 953, 955, 958, 962, 963, 965, 966, 976, 977, 978, 995], "step": [4, 237, 379, 393], "categori": [4, 311, 972], "trigonometr": 4, "period": [4, 198], "spline": [4, 198, 310, 972], "qualit": 4, "analysi": [4, 33, 34, 59, 95, 101, 103, 106, 122, 242, 259, 260, 267, 285, 286, 287, 340, 391, 395, 397, 956, 965, 979, 996, 997], "impact": [4, 60, 1019, 1020], "model": [4, 7, 11, 56, 74, 84, 96, 103, 109, 116, 117, 119, 123, 125, 145, 146, 149, 154, 164, 167, 168, 169, 173, 175, 176, 185, 186, 191, 197, 200, 215, 227, 232, 236, 241, 243, 247, 248, 250, 256, 257, 259, 264, 289, 296, 304, 308, 310, 334, 340, 355, 369, 378, 379, 381, 386, 387, 391, 396, 951, 957, 958, 961, 962, 964, 966, 967, 988, 992, 995, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "predict": [4, 10, 24, 85, 111, 122, 132, 150, 166, 177, 197, 232, 235, 253, 264, 315, 355, 378, 379, 395, 396, 402, 962, 973, 988, 995], "pairwis": [4, 257, 391, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 960], "interact": [4, 168, 312, 399, 995], "polynomi": [4, 173, 176, 177, 198, 954, 958, 960, 972, 995], "non": [4, 14, 95, 122, 192, 197, 218, 262, 326, 333, 334, 397, 958, 972], "kernel": [4, 5, 100, 149, 154, 155, 157, 158, 164, 172, 173, 231, 232, 281, 282, 290, 309, 323, 326, 331, 334, 391, 397, 398, 402, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 954, 955, 960, 972, 977, 995], "conclud": [4, 109, 222], "remark": [4, 56, 109, 222, 230], "imag": [5, 47, 50, 53, 65, 98, 362, 391, 400, 564, 565, 566, 567, 568], "denois": [5, 98], "us": [5, 6, 12, 17, 48, 95, 96, 98, 126, 127, 129, 184, 200, 211, 213, 257, 261, 266, 300, 334, 340, 341, 351, 357, 372, 373, 375, 378, 396, 397, 399, 400, 401, 406, 414, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 440, 442, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 459, 462, 463, 464, 467, 468, 469, 470, 471, 472, 474, 475, 476, 478, 479, 480, 481, 482, 484, 486, 490, 491, 492, 493, 494, 495, 499, 500, 502, 503, 504, 505, 506, 507, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 565, 568, 569, 570, 571, 572, 574, 575, 578, 580, 581, 583, 585, 586, 587, 588, 589, 591, 592, 594, 595, 596, 598, 599, 600, 603, 604, 606, 608, 609, 611, 612, 613, 614, 615, 616, 620, 621, 622, 624, 625, 626, 627, 629, 630, 633, 634, 636, 637, 638, 639, 640, 643, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 669, 670, 671, 672, 673, 674, 678, 681, 682, 683, 684, 685, 686, 687, 688, 690, 693, 694, 698, 699, 700, 707, 709, 714, 717, 718, 721, 722, 725, 728, 729, 730, 732, 733, 735, 737, 758, 759, 762, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 808, 810, 812, 814, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 832, 835, 836, 837, 838, 839, 840, 843, 844, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 864, 867, 871, 872, 874, 875, 876, 878, 880, 881, 882, 883, 884, 885, 886, 887, 892, 893, 901, 910, 912, 919, 922, 936, 946, 956, 958, 959, 962, 966, 976, 977, 978, 986, 995, 997, 1014], "pca": [5, 57, 72, 95, 96, 99, 100, 101, 102, 103, 104, 304, 397, 521, 979, 996], "refer": [5, 11, 25, 27, 79, 80, 98, 113, 169, 173, 185, 257, 262, 263, 290, 362, 363, 365, 389, 390, 391, 392, 394, 395, 396, 397, 399, 400, 401, 402, 951, 952, 954, 955, 956, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 974, 975, 976, 977, 978], "load": [5, 7, 17, 50, 57, 117, 119, 123, 135, 146, 169, 190, 215, 219, 227, 231, 238, 258, 266, 267, 304, 327, 330, 340, 341, 342, 361, 362, 372, 378, 400, 988, 996, 997], "via": [5, 53, 185, 186, 215, 399, 954], "openml": [5, 307, 362], "basi": [5, 158, 402, 954, 958, 995], "reconstruct": [5, 13, 98], "test": [5, 77, 141, 260, 263, 270, 340, 345, 366, 368, 369, 375, 376, 396, 988, 995, 997], "face": [6, 50, 95, 234, 363, 986, 993], "recognit": [6, 363, 365, 993], "eigenfac": [6, 95, 993], "svm": [6, 138, 142, 143, 173, 211, 231, 310, 320, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 391, 878, 879, 880, 881, 882, 883, 884, 885, 958, 968, 976, 995, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "complex": [7, 228, 237, 256, 259, 317, 345, 355, 392, 958, 959, 965, 966, 976, 977, 978], "influenc": [7, 10, 355], "benchmark": [7, 10, 57, 340], "choos": [7, 951, 988, 990, 992], "paramet": [7, 77, 122, 255, 309, 327, 335, 368, 369, 379, 380, 391, 393, 399, 951, 958, 962, 977, 988, 992, 997], "run": [7, 57, 261], "code": [7, 95, 105, 368, 369, 372, 373, 375, 397, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "plot": [7, 8, 10, 24, 30, 34, 38, 41, 47, 49, 50, 56, 62, 63, 65, 66, 77, 81, 84, 90, 91, 96, 97, 101, 109, 111, 118, 123, 125, 129, 130, 131, 132, 135, 145, 162, 168, 176, 177, 181, 189, 190, 191, 201, 202, 206, 219, 227, 231, 235, 236, 238, 247, 253, 254, 259, 261, 264, 266, 270, 272, 296, 307, 309, 310, 315, 324, 325, 330, 340, 346, 374, 391, 957, 969, 1001], "result": [7, 8, 38, 47, 49, 50, 56, 57, 62, 63, 66, 77, 79, 81, 96, 97, 109, 111, 129, 132, 162, 173, 202, 232, 235, 261, 270, 334, 341, 351, 951], "conclus": [7, 149, 186], "out": [8, 121, 357, 375, 396, 400, 951, 958, 964], "classif": [8, 26, 29, 30, 32, 33, 69, 90, 137, 150, 151, 152, 153, 157, 164, 213, 233, 260, 263, 264, 267, 280, 288, 296, 307, 314, 319, 340, 364, 391, 399, 402, 958, 962, 963, 965, 966, 976, 977, 978, 995, 997], "text": [8, 164, 228, 258, 319, 339, 340, 341, 342, 363, 391, 400, 569, 570, 571, 572, 997], "document": [8, 19, 164, 309, 310, 339, 340, 341, 368, 982, 983, 985, 1000, 1004, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "reuter": 8, "routin": [8, 356, 376], "main": [8, 197], "outlier": [9, 179, 214, 226, 235, 283, 284, 299, 391, 958, 968, 972], "detect": [9, 226, 235, 254, 283, 284, 962, 968, 977], "set": [9, 74, 77, 102, 129, 162, 264, 327, 345, 378, 396, 958, 988, 994, 995, 997], "first": [9, 37, 368], "second": [9, 37], "latenc": [10, 355], "helper": [10, 158, 219, 376], "function": [10, 34, 94, 158, 187, 201, 202, 207, 219, 235, 252, 270, 309, 330, 342, 376, 391, 396, 399, 402, 954, 958, 962, 977, 995], "bulk": [10, 355], "atom": [10, 355], "speed": [10, 373], "variou": [10, 52, 204, 223], "regressor": [10, 111, 122, 176, 307, 310, 391, 399], "n_featur": 10, "throughput": [10, 355], "speci": [11, 290], "distribut": [11, 215, 218, 290, 303, 383, 959, 972], "visual": [12, 57, 106, 227, 232, 238, 252, 295, 308, 327, 391, 392, 393, 962, 1001], "stock": [12, 993], "market": [12, 993], "structur": [12, 39, 47, 66, 157, 317, 349, 993], "retriev": [12, 307], "from": [12, 98, 146, 169, 307, 356, 362, 366, 378, 391, 400, 958, 962, 988, 995, 996, 997, 1014], "internet": 12, "graph": [12, 307, 376, 378, 392, 400, 920], "cluster": [12, 19, 21, 36, 37, 38, 39, 40, 41, 44, 45, 47, 49, 52, 55, 57, 59, 62, 63, 64, 65, 66, 95, 164, 311, 341, 364, 389, 391, 392, 397, 403, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 695, 696, 962, 996, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "affin": [12, 38, 392, 960], "propag": [12, 38, 315, 316, 317, 392, 975], "embed": [12, 52, 218, 219, 230, 287, 399, 959], "2d": [12, 52, 97, 104, 168], "space": [12, 100, 393, 951, 959], "compress": [13, 53, 355, 401], "sens": [13, 401], "tomographi": 13, "l1": [13, 188, 190, 213, 335, 401], "prior": [13, 158, 242], "lasso": [13, 181, 182, 183, 184, 185, 186, 191, 308, 633, 958], "topic": 14, "extract": [14, 73, 98, 215, 258, 341, 355, 357, 391, 400, 997], "neg": [14, 95, 192, 397, 958], "matrix": [14, 17, 157, 178, 251, 391, 392, 397, 962, 977], "factor": [14, 95, 103, 106, 283, 284, 397, 968], "latent": [14, 84, 397], "dirichlet": [14, 397, 961], "alloc": [14, 397], "comput": [15, 17, 22, 28, 35, 38, 47, 49, 62, 63, 66, 67, 75, 77, 82, 86, 92, 107, 133, 139, 147, 159, 163, 171, 174, 190, 202, 216, 224, 240, 249, 270, 273, 276, 291, 297, 305, 313, 321, 338, 343, 350, 354, 355, 392, 393, 396, 969], "libsvm": [16, 362], "gui": 16, "wikipedia": 17, "princip": [17, 85, 101, 397, 979, 996], "eigenvector": 17, "download": [17, 129, 162, 362], "alreadi": 17, "disk": 17, "redirect": 17, "file": [17, 383, 400, 997], "adjac": 17, "singular": [17, 397], "vector": [17, 25, 53, 164, 322, 325, 334, 340, 342, 363, 391, 400, 977, 995, 996], "random": [17, 95, 114, 127, 128, 169, 170, 230, 238, 263, 265, 351, 369, 376, 391, 396, 397, 399, 931, 951, 958, 974, 979], "svd": [17, 95, 397], "central": 17, "score": [17, 84, 120, 135, 145, 162, 176, 247, 256, 263, 264, 330, 392, 396, 957, 962, 977, 992], "biclust": [18, 19, 20, 164, 364, 389, 391], "spectral": [19, 20, 21, 65, 218, 389, 392, 959], "co": [19, 21, 389], "algorithm": [19, 20, 21, 38, 44, 49, 62, 63, 64, 218, 226, 373, 378, 956, 958, 961, 963, 965, 966, 970, 978, 995], "A": [20, 21, 47, 57, 62, 197, 310, 367, 373, 386, 396, 991, 994], "demo": [20, 21, 38, 47, 49, 57, 62, 64], "calibr": [23, 24, 25, 26, 27, 122, 164, 197, 390, 391, 418, 419, 420, 1013, 1014, 1016, 1017, 1018, 1019], "probabl": [24, 25, 26, 30, 131, 152, 390, 391, 399, 977], "classifi": [24, 25, 27, 31, 132, 180, 237, 254, 275, 307, 320, 324, 327, 340, 349, 390, 391, 399, 956, 965, 995, 997], "gener": [24, 34, 38, 47, 49, 56, 62, 63, 65, 66, 77, 79, 81, 90, 91, 96, 97, 98, 116, 125, 142, 145, 149, 155, 156, 158, 164, 175, 176, 177, 181, 191, 197, 199, 232, 247, 254, 270, 289, 296, 308, 315, 334, 351, 364, 368, 380, 391, 397, 399, 958, 972, 983, 992], "synthet": [24, 74, 176, 254, 372], "gaussian": [24, 25, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 241, 242, 243, 246, 247, 248, 299, 391, 402, 961, 964, 972, 974], "bay": [24, 25, 391, 964], "curv": [25, 27, 177, 232, 238, 248, 254, 259, 264, 266, 272, 390, 957], "summari": [25, 186, 341, 342, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "3": [26, 180, 391, 997, 1012, 1013, 1018, 1020], "class": [26, 37, 110, 112, 131, 180, 206, 211, 260, 264, 266, 310, 326, 329, 380, 391, 396, 399, 400, 961, 962, 965, 968, 976, 977, 1004, 1005], "fit": [26, 56, 96, 103, 116, 117, 120, 122, 123, 154, 176, 177, 178, 191, 194, 199, 203, 264, 289, 334, 351, 369, 379, 399, 964, 968, 988], "compar": [26, 42, 44, 61, 77, 84, 120, 128, 142, 173, 176, 183, 199, 204, 226, 232, 257, 265, 285, 294, 299, 378], "comparison": [27, 31, 43, 63, 79, 104, 119, 141, 149, 218, 219, 232, 257, 268, 342, 392, 402, 958], "recogn": 32, "hand": 32, "written": 32, "digit": [32, 52, 57, 88, 136, 137, 219, 296, 315, 316, 365, 994], "normal": [33, 173, 197, 299, 303, 391, 851, 865, 962, 972], "ledoit": [33, 78, 394], "wolf": [33, 78, 394], "oa": [33, 77, 78, 405, 455], "discrimin": [33, 34, 391, 956], "quadrat": [34, 402, 956], "covari": [34, 76, 77, 79, 80, 81, 164, 244, 391, 394, 405, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 956, 1012, 1016, 1017, 1018], "ellipsoid": [34, 243], "colormap": 34, "adjust": 37, "chanc": 37, "perform": [37, 43, 260, 304, 309, 311, 315, 341, 355, 368, 373, 392, 396, 400, 997], "evalu": [37, 57, 60, 80, 197, 235, 258, 261, 296, 341, 379, 387, 389, 392, 396, 399, 951, 957, 962, 997], "defin": [37, 47, 57, 66, 218, 235, 252, 254, 255, 342, 962], "list": [37, 985], "metric": [37, 40, 122, 261, 391, 392, 396, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 951, 959, 960, 962, 965, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "fix": [37, 371, 1004, 1007, 1008, 1009, 1010, 1011, 1017], "ground": [37, 176], "truth": [37, 176], "label": [37, 264, 315, 316, 317, 363, 364, 392, 396, 399, 962, 973, 975], "grow": 37, "number": [37, 59, 119, 145, 269, 355, 369, 951, 952, 961], "vari": [37, 293, 318, 392], "sampl": [38, 62, 77, 96, 97, 142, 178, 210, 232, 258, 270, 289, 308, 334, 337, 362, 376, 380, 391, 392, 399, 958], "agglom": [39, 40, 52, 996], "without": [39, 120, 285, 340], "differ": [40, 44, 61, 77, 158, 168, 299, 302, 324, 369, 378, 392, 958, 995], "hierarch": [41, 47, 61, 66, 392, 996], "dendrogram": 41, "birch": [42, 392, 423], "minibatchkmean": [42, 63, 95, 429], "bisect": [43, 392], "k": [43, 45, 48, 56, 57, 58, 60, 63, 66, 84, 304, 341, 392, 396, 962, 965, 972, 995, 996], "mean": [43, 45, 48, 56, 57, 58, 60, 62, 63, 116, 117, 162, 169, 341, 392, 962, 972, 996], "regular": [43, 77, 124, 167, 190, 201, 202, 293, 335, 958, 966], "toi": [44, 61, 226, 365], "segment": [46, 65], "pictur": 46, "greek": 46, "coin": [46, 47], "region": [46, 257], "ward": [47, 66, 392, 996], "an": [47, 58, 162, 178, 186, 235, 287, 307, 311, 378, 400, 951, 968, 988, 994, 995], "color": 48, "quantiz": [48, 53, 996], "dbscan": [49, 392, 403, 425], "onlin": [50, 204, 310, 311, 976], "dictionari": [50, 95, 98, 105, 397], "part": [50, 401], "agglomer": [51, 54, 979, 996], "origin": [53, 100, 263, 287, 299], "encod": [53, 119, 972, 973], "strategi": [53, 255, 294, 302, 357, 391, 392, 962], "memori": [53, 355, 373, 375, 392], "footprint": 53, "v": [54, 66, 77, 78, 80, 85, 100, 145, 169, 179, 189, 215, 260, 266, 270, 271, 345, 392, 952, 972, 988], "univari": [54, 84, 142, 330, 401, 952], "select": [54, 59, 71, 103, 135, 140, 142, 145, 146, 164, 185, 186, 191, 247, 250, 330, 378, 387, 391, 396, 401, 951, 958, 961, 992, 1010], "induct": 55, "demonstr": [56, 261, 302, 315], "assumpt": 56, "possibl": [56, 372], "solut": 56, "final": [56, 149], "handwritten": [57, 219, 365], "our": [57, 252, 255, 368], "reduc": [57, 355], "initi": [58, 60, 245, 961], "silhouett": [59, 392], "kmean": [59, 63, 308, 427], "empir": [60, 80, 230, 394], "linkag": [61, 392], "method": [61, 73, 84, 108, 149, 164, 218, 220, 245, 274, 380, 391, 392, 399, 954, 961, 968, 969, 996], "shift": [62, 392], "meanshift": [62, 428], "establish": [63, 173], "pariti": 63, "between": [63, 268], "optic": [64, 365, 392, 430], "four": 65, "circl": 65, "two": [65, 112, 183, 236, 257], "unstructur": 66, "we": 66, "ar": [66, 310, 378], "nearest": [66, 164, 277, 278, 279, 280, 285, 288, 289, 307, 391, 952, 965, 995], "neighbor": [66, 164, 218, 277, 278, 279, 280, 285, 289, 304, 307, 391, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 952, 959, 965, 995, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "10": [66, 1004], "pipelin": [68, 69, 71, 72, 129, 143, 164, 167, 228, 237, 258, 330, 369, 378, 379, 391, 393, 401, 838, 839, 840, 841, 979, 993, 997, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "composit": [68, 164, 391, 393, 951], "estim": [68, 76, 77, 78, 79, 80, 81, 113, 119, 121, 128, 155, 162, 164, 176, 200, 203, 228, 234, 235, 246, 265, 281, 282, 290, 307, 308, 309, 312, 351, 369, 378, 379, 380, 388, 391, 393, 394, 396, 398, 399, 402, 951, 952, 956, 958, 961, 962, 977, 982, 990, 992, 994, 1005, 1012, 1013, 1014], "column": [69, 70, 237], "transform": [69, 70, 71, 74, 84, 115, 127, 237, 309, 310, 311, 360, 378, 379, 393, 395, 396, 965, 972, 973, 974, 996], "heterogen": [69, 393], "sourc": [69, 96, 366], "20": [69, 340, 363, 997, 1012], "newsgroup": [69, 340, 363, 997], "creat": [69, 101, 103, 227, 264, 330, 378], "mix": 70, "type": [70, 242, 369, 380, 392, 988], "dimension": [71, 218, 221, 237, 286, 304, 341, 956, 959, 965, 979, 995], "reduct": [71, 218, 222, 237, 286, 304, 341, 956, 965, 979], "gridsearchcv": [71, 135, 261, 399, 777], "illustr": [71, 153, 158, 287, 402], "cach": [71, 279, 393], "within": 71, "chain": [72, 237, 275, 379, 393], "logist": [72, 180, 187, 188, 189, 190, 212, 213, 958, 995], "concaten": 73, "multipl": [73, 237, 261, 351, 374, 396, 951, 952, 962, 1012, 1013], "effect": [74, 166, 223, 299, 304, 318, 345, 965], "target": [74, 156, 215, 378, 380, 393, 395, 963, 973], "shrinkag": [77, 394, 399, 956, 995], "ledoitwolf": [77, 453], "max": [77, 962], "likelihood": [77, 176, 177, 260, 962, 967], "approach": [77, 186, 257], "robust": [79, 80, 176, 200, 203, 351, 391, 394, 951, 958], "mahalanobi": [79, 965], "distanc": [79, 391, 965], "relev": [79, 958], "minimum": [80, 394], "determin": [80, 394, 958, 962], "spars": [81, 95, 105, 167, 181, 183, 212, 307, 340, 341, 376, 394, 397, 401, 972, 974, 976], "invers": [81, 394, 974], "decomposit": [83, 84, 93, 95, 113, 164, 364, 391, 395, 397, 404, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 996, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "variabl": [84, 166, 167, 356, 378, 391, 995], "canon": [84, 395], "symmetr": 84, "pl": 84, "scatter": 84, "multivari": [84, 952], "respons": [84, 381], "pls2": 84, "pls1": 84, "cca": [84, 462], "mode": [84, 355, 366], "b": 84, "deflat": 84, "compon": [85, 95, 101, 285, 286, 287, 397, 961, 965, 979, 996], "partial": [85, 166, 168, 236, 969], "least": [85, 122, 186, 192, 195, 958], "squar": [85, 122, 158, 192, 195, 402, 954, 958, 960, 962], "The": [85, 88, 89, 166, 167, 197, 223, 230, 255, 264, 363, 371, 396, 400, 961, 962, 974, 995, 996], "one": [85, 119, 236, 958, 962], "power": [85, 197], "iri": [89, 102, 104, 118, 151, 206, 320, 324, 346, 365, 402, 994], "randomli": [90, 91], "multilabel": [91, 233, 364, 376, 391, 962, 963, 988], "beta": [94, 397], "diverg": [94, 397], "loss": [94, 197, 207, 308, 311, 399, 962], "prepar": [95, 109, 111, 173, 218, 266, 267, 304, 327, 371], "nmf": [95, 311, 397, 520], "independ": [95, 397, 996], "fastica": [95, 96, 97, 404, 513], "minibatchsparsepca": [95, 397, 519], "center": [95, 972], "fa": [95, 103], "posit": [95, 310], "blind": 96, "separ": [96, 209, 328, 329], "ica": [96, 397, 996], "point": [97, 287], "cloud": 97, "distort": 98, "displai": [98, 202, 227, 228, 237, 312, 375, 1001], "patch": [98, 400], "noisi": [98, 156], "them": [98, 367], "increment": [99, 357, 397], "kernelpca": [100, 515], "figur": 101, "probabilist": [103, 150, 397, 402], "lda": [104, 397, 956], "precomput": [105, 178, 307, 397], "rotat": 106, "pattern": 106, "ensembl": [108, 115, 118, 164, 311, 391, 399, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "discret": [109, 125, 157, 300, 301, 972], "versu": [109, 113, 211, 262, 320, 355], "adaboost": [109, 110, 111, 112, 399], "baselin": [109, 173, 197], "samm": 109, "r": 109, "multi": [110, 128, 191, 206, 221, 234, 261, 264, 293, 348, 373, 391, 958, 959, 962, 966, 977, 978], "decis": [110, 111, 118, 125, 130, 164, 231, 320, 344, 345, 346, 347, 348, 349, 378, 381, 391, 978], "tree": [110, 111, 115, 116, 117, 118, 127, 164, 169, 197, 307, 312, 344, 345, 346, 347, 348, 349, 378, 391, 399, 401, 886, 887, 888, 889, 890, 891, 892, 965, 970, 978, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "train": [111, 123, 125, 132, 145, 227, 232, 236, 238, 247, 270, 296, 309, 318, 327, 340, 345, 346, 349, 363, 396, 965, 975, 988, 995, 997], "decisiontre": 111, "singl": [113, 129, 215, 227, 364, 392, 952], "bag": [113, 121, 340, 399, 400, 951, 997], "bia": 113, "varianc": [113, 195, 401, 962, 972], "oob": 114, "error": [114, 122, 135, 176, 254, 270, 375, 383, 958, 962], "forest": [114, 116, 117, 128, 169, 170, 238, 363, 399, 968], "import": [116, 117, 123, 146, 169, 170, 231, 304, 307, 399, 970], "decreas": [116, 117, 169], "impur": [116, 117, 169, 345, 970], "permut": [116, 169, 170, 263, 307, 396, 970], "pixel": 117, "parallel": [117, 356, 366, 373, 392, 399, 928, 929, 951], "mdi": [117, 169], "surfac": [118, 231, 346], "categor": [119, 309, 378, 399, 964, 972], "am": 119, "hous": [119, 363], "drop": 119, "hot": 119, "ordin": 119, "nativ": [119, 307, 309], "limit": [119, 149, 355, 383, 386, 400], "split": [119, 309, 351, 396], "earli": [120, 205], "stop": [120, 205, 400, 976], "interv": 122, "quantil": [122, 199, 310, 311, 958], "confid": 122, "tune": [122, 255, 258, 309, 951, 997], "hyper": [122, 255, 309, 391, 951], "preprocess": [123, 129, 164, 167, 168, 235, 237, 298, 342, 351, 378, 391, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 972, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "devianc": [123, 962], "isolationforest": [125, 543], "boundari": [125, 130, 320], "path": [125, 184, 190, 202, 349, 383], "length": [125, 383], "monoton": [126, 399], "constraint": [126, 312, 392, 399], "name": [126, 310, 378], "specifi": [126, 378, 951], "hash": [127, 376, 400], "total": [127, 345, 399], "output": [128, 234, 299, 312, 348, 978, 995], "meta": [128, 309, 399], "combin": [129, 227], "predictor": 129, "stack": [129, 307, 399], "make": [129, 132, 162, 368, 371, 381], "measur": [129, 260, 392, 962], "votingclassifi": [130, 131, 399, 549], "calcul": 131, "individu": [132, 168, 309, 969], "vote": [132, 399], "tutori": [134, 164, 981, 989, 991, 997], "exercis": [134, 135, 136, 137, 138, 164, 992, 995, 997], "diabet": [135, 236, 365, 995], "appli": 135, "line": [135, 152], "show": [135, 266], "std": [135, 176], "bonu": 135, "how": [135, 351, 368, 373, 378], "much": 135, "can": [135, 378], "you": [135, 378], "trust": 135, "alpha": [135, 345], "f": [141, 962], "mutual": [141, 392], "inform": [141, 162, 185, 186, 371, 392, 951, 958], "anova": [143, 330], "recurs": [144, 145, 401], "elimin": [144, 145, 401, 951], "sequenti": [146, 401], "coeffici": [146, 167, 176, 201, 202, 392, 962], "discuss": [146, 367], "process": [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 167, 351, 381, 391, 402, 961, 991], "machin": [148, 164, 166, 167, 168, 296, 322, 375, 391, 967, 977, 988, 995], "ridg": [149, 177, 179, 195, 201, 202, 232, 391, 402, 653, 955, 958], "simpl": [149, 282, 373, 994], "gpc": [150, 151, 152, 153, 402], "iso": [152, 264], "xor": [153, 402], "gpr": [154, 155, 402], "mauna": [154, 402], "loa": [154, 402], "co2": [154, 402], "build": [154, 162, 366, 368, 375, 997], "design": 154, "proper": 154, "extrapol": 154, "interpret": [154, 167, 235, 397, 399], "hyperparamet": [154, 155, 258, 265, 598], "nois": [155, 156, 177, 402], "level": [155, 356, 392, 399, 402], "optimis": 155, "basic": [156, 215, 379, 394, 402], "introductori": 156, "free": 156, "sequenc": [157, 378], "similar": [157, 960, 962], "under": [157, 378], "posterior": 158, "cookbook": 158, "radial": [158, 402, 954, 995], "ration": [158, 402], "quadradt": 158, "exp": [158, 402], "sine": [158, 248, 402], "dot": [158, 402], "product": [158, 215, 375, 378, 402, 602], "mat\u00e9rn": [158, 402], "miss": [160, 161, 162, 164, 307, 399, 952, 972], "valu": [160, 161, 162, 164, 223, 307, 368, 397, 399, 952, 962, 970, 972], "imput": [160, 161, 162, 164, 307, 391, 608, 609, 610, 611, 952, 972, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "variant": 161, "iterativeimput": [161, 608, 952], "befor": [162, 371], "replac": 162, "0": [162, 307, 308, 309, 310, 978, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "knn": [162, 307], "iter": [162, 269, 396, 951], "releas": [164, 306, 307, 308, 309, 310, 311, 312, 371, 383, 1002, 1010], "highlight": [164, 306, 307, 308, 309, 310, 311, 312, 1004, 1007, 1008, 1011, 1012], "mixtur": [164, 241, 242, 243, 246, 247, 248, 391, 775, 776, 961, 1012, 1013, 1017, 1018], "inspect": [164, 165, 382, 391, 612, 613, 614, 615, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "approxim": [164, 172, 173, 231, 277, 309, 391, 394, 954], "manifold": [164, 217, 218, 219, 220, 364, 391, 669, 670, 671, 672, 673, 674, 675, 676, 677, 959, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "miscellan": [164, 225, 391, 1012, 1013, 1014, 1015, 1016, 1017], "multioutput": [164, 274, 391, 810, 811, 812, 813, 963, 1012, 1013, 1014, 1015, 1016, 1019], "neural": [164, 168, 292, 391, 966, 967], "network": [164, 168, 292, 391, 966, 967], "semi": [164, 314, 315, 319, 320, 391, 975], "supervis": [164, 314, 315, 319, 320, 391, 966, 975, 984, 995], "work": [164, 339, 355, 367, 378, 997], "failur": [166, 951], "infer": [166, 961], "causal": [166, 167], "simul": 166, "hourli": 166, "wage": [166, 167], "descript": 166, "incom": 166, "fulli": 166, "observ": [166, 995, 996], "lesson": [166, 167], "common": [167, 351, 380, 400, 962], "pitfal": [167, 351], "scale": [167, 218, 221, 304, 335, 357, 400, 869, 959, 968, 972, 979], "matter": 167, "check": [167, 259, 307, 375, 1012, 1013, 1014], "problem": [167, 397, 977, 978, 988, 993, 995, 996], "correl": [167, 170, 395, 962, 970], "numer": [167, 356, 369], "wrong": [167, 378], "depend": [168, 236, 366, 969, 1004, 1017, 1018], "condit": [168, 309, 969], "expect": [168, 309, 961, 969], "preprocessor": 168, "1": [168, 194, 310, 311, 312, 378, 391, 997, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "wai": [168, 368, 378], "accuraci": [169, 231, 340, 345, 962], "": [169, 304, 370, 378, 399, 962], "multicollinear": 170, "breast": [170, 365], "cancer": [170, 365], "handl": [170, 952], "scalabl": [173, 259, 308], "partit": 173, "bayesian": [176, 177, 242, 257, 391, 958, 961], "recov": 176, "weight": [176, 178, 210, 295, 308, 337, 399, 400], "true": [176, 177], "margin": [176, 177, 209, 328, 332], "log": [176, 177, 962], "expans": 176, "sinusoid": 177, "cubic": 177, "l": 177, "elast": [178, 181, 182, 958], "net": [178, 181, 182, 958], "gram": [178, 977], "huberregressor": [179, 630], "strong": 179, "signal": [181, 397, 996], "elasticnet": [181, 308, 627], "dens": 183, "implement": [183, 378, 392, 400, 962, 965, 976, 977], "lar": [184, 631, 958], "criteria": [185, 378, 958, 978], "aic": 186, "bic": [186, 247], "criterion": [186, 309, 951, 976], "coordin": 186, "descent": [186, 205, 211, 958, 976], "angl": [186, 958], "penalti": [188, 208, 335], "sparsiti": [188, 194, 400, 995], "multinomi": [189, 213, 958, 964], "One": [189, 211, 266, 310, 326, 396, 968, 976], "rest": [189, 266], "joint": 191, "task": [191, 391, 958, 982], "seri": [191, 396], "onli": [194, 214, 1015, 1017], "2": [194, 312, 997, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "ordinari": [195, 958], "orthogon": [196, 958], "match": [196, 958], "pursuit": [196, 958], "poisson": [197, 215, 308, 309, 962], "french": 197, "motor": 197, "third": [197, 383], "parti": [197, 383], "liabil": 197, "claim": [197, 215], "constant": [197, 952], "rank": [197, 391, 962], "takeawai": 197, "interpol": 198, "quantileregressor": [199, 651], "linearregress": [199, 638], "ransac": [200, 958], "l2": [201, 335], "solver": [204, 397, 958], "stochast": [205, 211, 218, 294, 958, 959, 967, 976], "sgd": [206, 207, 208, 209, 210, 958, 976], "convex": 207, "maximum": [209, 328, 967], "hyperplan": [209, 328, 329], "multiclass": [212, 266, 307, 376, 390, 391, 807, 808, 809, 924, 925, 926, 962, 963, 988, 995, 1013, 1016, 1017, 1018], "20newgroup": 212, "mnist": [213, 295], "theil": [214, 958], "sen": [214, 958], "y": [214, 378, 395, 973, 975], "direct": 214, "x": 214, "tweedi": [215, 962], "insur": 215, "definit": [215, 296, 969, 1014], "frequenc": [215, 997], "sever": [215, 220], "gamma": [215, 962], "pure": 215, "premium": 215, "tweedieregressor": [215, 661], "local": [218, 219, 283, 284, 959, 968], "isomap": [218, 219, 669, 959], "multidimension": 218, "t": [218, 223, 959], "techniqu": 219, "sphere": 220, "swiss": 222, "roll": [222, 369], "And": [222, 381], "hole": 222, "sne": [223, 959], "perplex": 223, "shape": [223, 988], "anomali": 226, "object": [227, 252, 369, 378, 951, 962, 994, 1001], "confusionmatrixdisplai": [227, 678], "roccurvedisplai": [227, 683], "precisionrecalldisplai": [227, 681], "compact": 228, "represent": [228, 308, 355, 400, 996], "rich": [228, 308], "html": 228, "isoton": [229, 390, 391, 616, 617, 618, 953, 1012, 1013, 1014, 1016, 1018, 1019], "johnson": [230, 974], "lindenstrauss": [230, 974], "bound": 230, "theoret": [230, 958], "explicit": 231, "map": [231, 303, 972], "rbf": [231, 326, 327, 402, 603, 960, 977, 995], "python": [231, 356, 373, 386, 977, 981, 982, 1010], "packag": [231, 982, 1016], "svr": [232, 334, 884, 977], "construct": [232, 393], "look": [232, 334], "complet": [234, 392], "advanc": 236, "With": [236, 997], "togeth": [236, 266, 993, 996], "grid": [237, 255, 257, 265, 268, 951, 992, 997], "search": [237, 255, 257, 265, 268, 379, 951, 992, 997], "over": 237, "roc": [238, 254, 266, 267, 307, 962], "api": [238, 239, 307, 310, 312, 356, 369, 374, 380, 388, 391, 402, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014], "svc": [238, 335, 883, 977], "introduc": 239, "set_output": [239, 312, 369], "concentr": 242, "variat": [242, 961], "gmm": [244, 245], "densiti": [246, 281, 282, 290, 398, 912, 977], "best": [247, 378], "confus": [251, 392, 962], "behavior": 252, "indic": 252, "mani": [252, 312, 356, 378], "cv": [252, 351], "tradeoff": [254, 962], "det": [254, 962], "custom": [255, 323, 400, 972, 977], "refit": [255, 988], "balanc": [256, 962], "statist": [257, 982, 991, 994], "frequentist": 257, "practic": [257, 351, 372, 958, 959, 966, 976, 977, 978], "equival": 257, "all": [257, 266, 311, 383, 993, 1019, 1020], "take": 257, "home": 257, "messag": 257, "ratio": [260, 962], "pre": [260, 351, 379], "post": [260, 345], "invari": 260, "respect": 260, "preval": 260, "cross_val_scor": [261, 801], "nest": [262, 393, 992], "see": [262, 393], "also": [262, 371, 393], "signific": 263, "precis": [264, 962], "recal": [264, 962], "In": 264, "binari": [264, 958, 962], "averag": [264, 266, 392, 399, 962], "micro": [264, 266], "each": [264, 269, 340, 951], "f1": 264, "receiv": [266, 267, 962], "oper": [266, 267, 367, 376, 402, 962], "characterist": [266, 267, 962], "specif": [266, 366, 369, 386, 951, 982, 983], "ovr": 266, "macro": 266, "ovo": 266, "success": [268, 269, 309, 951], "halv": [268, 269, 309, 951], "candid": [269, 951], "amount": [269, 951], "resourc": [269, 356, 368, 951, 981, 985], "underfit": 271, "overfit": 271, "tsne": [277, 673], "1d": 282, "novelti": [283, 968, 977], "lof": [283, 284], "neighborhood": [285, 286, 287, 965], "centroid": [288, 965], "layer": [293, 966], "perceptron": [293, 649, 958, 966], "mlpclassifi": [294, 836], "mlp": 295, "restrict": [296, 967], "boltzmann": [296, 967], "scaler": 299, "standardscal": [299, 859], "minmaxscal": [299, 849], "maxabsscal": [299, 848], "robustscal": [299, 857], "powertransform": [299, 855], "quantiletransform": [299, 856], "uniform": [299, 972], "kbinsdiscret": [300, 302, 844], "continu": [300, 368], "rescal": 304, "22": [307, 1014], "new": [307, 309, 310, 312, 368, 378, 981, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "prune": [307, 345, 978], "datafram": [307, 378], "compat": [307, 368, 369, 388], "auc": [307, 687], "now": [307, 310, 1014], "23": [308, 1015], "stabil": 308, "improv": [308, 309, 310, 311, 312, 367, 368, 1007, 1008], "histogram": [308, 310, 312, 398, 399], "24": [309, 1016], "histgradientboost": 309, "self": [309, 318, 975], "sequentialfeatureselector": [309, 583], "polynomialcountsketch": [309, 621], "decisiontreeregressor": [309, 887], "keyword": [310, 1015, 1017], "argument": [310, 369, 1015, 1017], "more": [310, 363, 378, 386, 966], "flexibl": [310, 952], "stabl": 310, "histgradientboostingregressor": [311, 542], "get_feature_names_out": 311, "avail": [311, 951, 1000, 1001], "group": [311, 396, 986, 996], "infrequ": [311, 972], "onehotencod": [311, 852], "minibatchnmf": [311, 518], "version": [311, 362, 366, 371, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "bisectingkmean": [311, 424], "divid": 311, "panda": [312, 372, 378], "enhanc": [312, 381, 982, 1007, 1008, 1009, 1010, 1011], "faster": [312, 399], "parser": [312, 362], "fetch_openml": [312, 476], "experiment": [312, 371, 388, 391, 559, 560, 561], "arrai": [312, 376, 388, 988], "lineardiscriminantanalysi": [312, 529], "effici": [312, 376], "most": 315, "uncertain": 315, "activ": 316, "threshold": 318, "linearsvc": [325, 878, 977], "unbalanc": [329, 977], "some": 330, "plai": 330, "percentil": 330, "case": [335, 958, 962], "tie": 336, "break": 336, "word": [340, 400, 997], "metadata": 340, "strip": 340, "quantifi": [341, 962], "qualiti": [341, 962], "tfidfvector": [341, 342, 572], "lsa": 341, "top": [341, 962], "term": [341, 380, 400], "per": 341, "hashingvector": [341, 400, 570], "featurehash": [342, 563], "dictvector": [342, 562], "special": 342, "purpos": [342, 983], "cost": [345, 978], "leav": [345, 396, 958], "understand": 349, "recommend": [351, 363, 982], "inconsist": 351, "leakag": 351, "dure": 351, "avoid": [351, 393], "control": [351, 399, 966], "none": 351, "randomst": 351, "instanc": [351, 357], "repeat": [351, 393, 396], "call": [351, 367], "splitter": [351, 391], "subtleti": 351, "get": [351, 378, 379], "reproduc": [351, 372], "across": 351, "execut": [351, 378], "configur": [355, 356], "overhead": 355, "input": [355, 369, 388, 392, 972], "tip": [355, 373, 375, 951, 959, 966, 976, 977, 978], "trick": [355, 373, 375, 400], "algebra": [355, 376], "librari": [355, 356], "reshap": [355, 994], "link": [355, 362, 962], "manag": [356, 383], "higher": 356, "joblib": [356, 373], "lower": 356, "openmp": [356, 373], "numpi": [356, 372], "scipi": 356, "oversubscript": 356, "spawn": 356, "too": 356, "thread": 356, "switch": 356, "environ": 356, "sklearn_assume_finit": 356, "sklearn_working_memori": 356, "sklearn_se": 356, "sklearn_tests_global_random_se": 356, "sklearn_skip_network_test": 356, "sklearn_run_float32_test": 356, "sklearn_enable_debug_cython_direct": 356, "sklearn_build_enable_debug_symbol": 356, "sklearn_pairwise_dist_chunk_s": 356, "computation": 357, "bigger": 357, "stream": 357, "note": [357, 393, 396, 958], "tabl": [358, 378], "Of": 358, "content": [358, 378, 988], "util": [361, 372, 376, 391, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 997, 1001, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "other": [362, 378, 982, 1004], "svmlight": 362, "format": [362, 372, 378, 386, 963], "org": [362, 371, 986], "repositori": 362, "arff": 362, "extern": [362, 981, 988, 1004, 1013], "olivetti": 363, "usag": [363, 373, 378, 388, 390, 393, 399, 400, 958], "convert": 363, "filter": 363, "realist": 363, "consider": [363, 958], "wild": 363, "covertyp": 363, "rcv1": 363, "kddcup": 363, "99": 363, "california": 363, "plant": 365, "linnerrud": 365, "wine": 365, "wisconsin": 365, "diagnost": 365, "instal": [366, 383], "nightli": 366, "runtim": 366, "tag": [366, 368, 369], "edit": 366, "platform": [366, 375, 383], "instruct": 366, "window": [366, 383], "maco": 366, "compil": [366, 373], "conda": [366, 383], "forg": 366, "homebrew": 366, "linux": [366, 378, 383], "system": 366, "freebsd": 366, "altern": [366, 951], "bug": [367, 368, 371, 985, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "triag": 367, "issu": [367, 368], "curat": 367, "fruit": 367, "pr": [367, 371], "help": [367, 368, 378], "review": [367, 368, 375, 997], "member": 367, "close": 367, "tough": 367, "typic": 367, "workflow": [367, 368], "contribut": [368, 378], "submit": 368, "report": [368, 372, 962], "request": [368, 371, 375, 378], "good": [368, 372], "video": [368, 981], "git": 368, "pull": [368, 371, 375, 378], "checklist": [368, 371], "integr": 368, "ci": 368, "stall": 368, "unclaim": 368, "easi": 368, "want": 368, "guidelin": [368, 369], "write": 368, "referenc": 368, "github": 368, "action": 368, "coverag": [368, 375, 962], "matplotlib": 368, "monitor": 368, "tracker": [368, 985], "maintain": [368, 371, 386], "backward": 368, "deprec": [368, 391, 905, 1014], "chang": [368, 381, 986, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "default": 368, "read": 368, "exist": 368, "instanti": 369, "attribut": [369, 380, 951], "option": 369, "univers": 369, "your": [369, 372, 962], "own": [369, 378, 962], "templat": 369, "baseestim": [369, 406], "mixin": 369, "get_param": 369, "set_param": 369, "init": 369, "clone": [369, 415], "assert": 369, "guid": [370, 999], "major": [371, 399, 1012, 1013], "minor": 371, "known": [371, 1012, 1013], "merg": 371, "web": 371, "site": 371, "craft": 372, "minim": [372, 978, 1017, 1018], "provid": 372, "fail": 372, "comment": 372, "boil": 372, "down": 372, "script": 372, "someth": 372, "small": 372, "do": [372, 378], "NOT": 372, "unless": 372, "i": [372, 378, 396, 986], "extrem": [372, 399], "necessari": 372, "markdown": 372, "make_regress": [372, 504], "make_classif": [372, 495], "make_blob": [372, 492], "optim": [373, 391, 951, 959], "cython": [373, 375], "c": 373, "profil": 373, "extens": 373, "yep": 373, "gperftool": 373, "gprof": 373, "valgrind": [373, 375], "callgrind": 373, "kcachegrind": 373, "warm": 373, "restart": 373, "overview": [374, 392, 968], "ax": 374, "saniti": 375, "preserv": 375, "fold": [375, 396], "unfold": 375, "outdat": 375, "diff": 375, "remot": 375, "track": 375, "branch": 375, "pytest": 375, "alias": 375, "flag": 375, "standard": [375, 972], "repli": 375, "debug": 375, "arm64": 375, "x86_64": 375, "tool": [376, 378], "matric": [376, 972], "warn": [376, 391], "except": [376, 391, 551, 552, 553, 554, 555, 556, 557, 558, 1016, 1020], "dispatch": 377, "frequent": 378, "ask": 378, "question": [378, 985], "what": 378, "lot": 378, "peopl": [378, 1004, 1005, 1006, 1007], "pronounc": 378, "why": [378, 399], "pypi": 378, "deep": 378, "reinforc": 378, "Will": 378, "add": 378, "graphic": [378, 967], "did": 378, "remov": [378, 391, 401, 972, 1004], "hmm": 378, "gpu": 378, "need": 378, "doe": 378, "directli": 378, "plan": 378, "so": 378, "my": 378, "ani": 378, "attent": 378, "inclus": 378, "includ": 378, "should": 378, "save": 378, "export": 378, "deploi": 378, "bunch": [378, 893], "usabl": 378, "deal": 378, "string": 378, "sometim": 378, "crash": 378, "freez": 378, "n_job": 378, "osx": [378, 383], "job": 378, "than": 378, "random_st": 378, "entir": 378, "start": 379, "processor": 379, "automat": [379, 958], "next": 379, "glossari": 380, "element": 380, "concept": [380, 958], "properti": 380, "role": 381, "technic": 381, "committe": 381, "propos": 381, "slep": 381, "latest": 383, "appl": 383, "silicon": 383, "m1": 383, "hardwar": 383, "alpin": 383, "arch": 383, "debian": 383, "ubuntu": 383, "fedora": 383, "netbsd": 383, "macport": 383, "mac": 383, "anaconda": 383, "enthought": 383, "deploy": 383, "intel": 383, "channel": 383, "winpython": 383, "troubleshoot": 383, "caus": 383, "persist": 386, "serial": 386, "secur": 386, "skop": 386, "interoper": [386, 982], "mathemat": [389, 392, 399, 954, 956, 958, 965, 966, 969, 976, 977, 978], "formul": [389, 392, 399, 956, 958, 965, 966, 976, 977, 978], "sigmoid": [390, 960], "sklearn": [391, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "compos": [391, 444, 445, 446, 447, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "cross_decomposit": [391, 462, 463, 464, 465, 1014, 1016, 1018], "loader": 391, "discriminant_analysi": [391, 529, 530, 1012, 1013, 1016, 1018, 1019], "dummi": [391, 531, 532, 962, 1012, 1013, 1014, 1017, 1018], "feature_extract": [391, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "feature_select": [391, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "gaussian_process": [391, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "kernel_approxim": [391, 619, 620, 621, 622, 623, 1014, 1016, 1017, 1018, 1019], "kernel_ridg": [391, 624], "linear_model": [391, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "classic": [391, 961], "glm": 391, "interfac": 391, "model_select": [391, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "naive_bay": [391, 814, 815, 816, 817, 818, 1012, 1014, 1015, 1016, 1017, 1019, 1020], "neural_network": [391, 835, 836, 837, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "random_project": [391, 870, 871, 872, 1018], "semi_supervis": [391, 873, 874, 875, 1014, 1015, 1016, 1020], "recent": 391, "To": 391, "low": [392, 399, 401], "mini": [392, 397], "batch": [392, 397], "assign": 392, "featureagglomer": [392, 426], "hierarchi": 392, "ad": 392, "connect": [392, 400, 996], "consumpt": 392, "larg": [392, 400], "size": [392, 399], "rand": 392, "index": [392, 921], "advantag": 392, "drawback": 392, "homogen": 392, "fowlk": 392, "mallow": 392, "calinski": 392, "harabasz": 392, "davi": 392, "bouldin": 392, "conting": 392, "pair": 392, "access": 393, "featureunion": [393, 838], "columntransform": [393, 444], "shrunk": 394, "oracl": 394, "plscanon": [395, 463], "plssvd": [395, 465], "plsregress": [395, 464], "held": 396, "cross_valid": [396, 802], "obtain": 396, "d": [396, 965], "loo": 396, "p": [396, 986], "lpo": 396, "shuffl": [396, 936], "stratif": 396, "stratifi": 396, "stratifiedgroupkfold": [396, 795], "predefin": [396, 962], "decompos": 397, "exact": 397, "sparsepca": [397, 523], "kpca": 397, "choic": [397, 961, 965], "truncat": 397, "semant": 397, "nnmf": 397, "frobeniu": 397, "norm": 397, "addit": [399, 954], "weak": 399, "learner": 399, "rate": 399, "subsampl": 399, "hard": 399, "soft": 399, "dict": 400, "detail": [400, 954, 958, 976, 977], "tf": 400, "idf": 400, "decod": 400, "applic": [400, 996], "corpu": 400, "selectfrommodel": [401, 578], "recoveri": 401, "biclustermixin": 407, "classnameprefixfeaturesoutmixin": 408, "classifiermixin": 409, "clustermixin": 410, "densitymixin": 411, "onetoonefeaturemixin": 412, "regressormixin": 413, "transformermixin": 414, "is_classifi": 416, "is_regressor": 417, "calibratedclassifiercv": 418, "calibrationdisplai": 419, "calibration_curv": 420, "affinitypropag": 421, "agglomerativeclust": 422, "spectralbiclust": 431, "spectralclust": 432, "spectralcoclust": 433, "affinity_propag": 434, "cluster_optics_dbscan": 435, "cluster_optics_xi": 436, "compute_optics_graph": 437, "estimate_bandwidth": 438, "k_mean": 439, "kmeans_plusplu": 440, "mean_shift": 441, "spectral_clust": 442, "ward_tre": 443, "transformedtargetregressor": 445, "make_column_selector": 446, "make_column_transform": 447, "config_context": 448, "ellipticenvelop": 449, "empiricalcovari": 450, "graphicallasso": 451, "graphicallassocv": 452, "mincovdet": 454, "shrunkcovari": 456, "empirical_covari": 457, "graphical_lasso": 458, "ledoit_wolf": 459, "ledoit_wolf_shrinkag": 460, "shrunk_covari": 461, "clear_data_hom": 466, "dump_svmlight_fil": 467, "fetch_20newsgroup": 468, "fetch_20newsgroups_vector": 469, "fetch_california_h": 470, "fetch_covtyp": 471, "fetch_kddcup99": 472, "fetch_lfw_pair": 473, "fetch_lfw_peopl": 474, "fetch_olivetti_fac": 475, "fetch_rcv1": 477, "fetch_species_distribut": 478, "get_data_hom": 479, "load_breast_canc": 480, "load_diabet": 481, "load_digit": 482, "load_fil": 483, "load_iri": 484, "load_linnerud": 485, "load_sample_imag": [486, 487], "load_svmlight_fil": [488, 489], "load_win": 490, "make_biclust": 491, "make_checkerboard": 493, "make_circl": 494, "make_friedman1": 496, "make_friedman2": 497, "make_friedman3": 498, "make_gaussian_quantil": 499, "make_hastie_10_2": 500, "make_low_rank_matrix": 501, "make_moon": 502, "make_multilabel_classif": 503, "make_s_curv": 505, "make_sparse_coded_sign": 506, "make_sparse_spd_matrix": 507, "make_sparse_uncorrel": 508, "make_spd_matrix": 509, "make_swiss_rol": 510, "dictionarylearn": 511, "factoranalysi": 512, "incrementalpca": 514, "latentdirichletalloc": 516, "minibatchdictionarylearn": 517, "sparsecod": 522, "truncatedsvd": 524, "dict_learn": 525, "dict_learning_onlin": 526, "non_negative_factor": 527, "sparse_encod": 528, "quadraticdiscriminantanalysi": 530, "dummyclassifi": 531, "dummyregressor": 532, "adaboostclassifi": 533, "adaboostregressor": 534, "baggingclassifi": 535, "baggingregressor": 536, "extratreesclassifi": 537, "extratreesregressor": 538, "gradientboostingclassifi": 539, "gradientboostingregressor": 540, "histgradientboostingclassifi": 541, "randomforestclassifi": 544, "randomforestregressor": 545, "randomtreesembed": 546, "stackingclassifi": 547, "stackingregressor": 548, "votingregressor": 550, "convergencewarn": 551, "dataconversionwarn": 552, "datadimensionalitywarn": 553, "efficiencywarn": 554, "fitfailedwarn": 555, "inconsistentversionwarn": 556, "notfittederror": 557, "undefinedmetricwarn": 558, "enable_halving_search_cv": 559, "enable_hist_gradient_boost": 560, "enable_iterative_imput": 561, "patchextractor": 564, "extract_patches_2d": 565, "grid_to_graph": 566, "img_to_graph": 567, "reconstruct_from_patches_2d": 568, "countvector": 569, "tfidftransform": 571, "genericunivariateselect": 573, "rfe": 574, "rfecv": 575, "selectfdr": 576, "selectfpr": 577, "selectfw": 579, "selectkbest": 580, "selectpercentil": 581, "selectormixin": 582, "variancethreshold": 584, "chi2": 585, "f_classif": 586, "f_regress": 587, "mutual_info_classif": 588, "mutual_info_regress": 589, "r_regress": 590, "gaussianprocessclassifi": 591, "gaussianprocessregressor": 592, "compoundkernel": 593, "constantkernel": 594, "dotproduct": 595, "expsinesquar": 596, "exponenti": 597, "matern": 600, "pairwisekernel": 601, "rationalquadrat": 604, "sum": 605, "whitekernel": 606, "get_config": 607, "knnimput": 609, "missingind": 610, "simpleimput": 611, "decisionboundarydisplai": 612, "partialdependencedisplai": 613, "partial_depend": 614, "permutation_import": 615, "isotonicregress": 616, "check_increas": 617, "isotonic_regress": 618, "additivechi2sampl": 619, "nystroem": [620, 954], "rbfsampler": 622, "skewedchi2sampl": 623, "kernelridg": 624, "ardregress": 625, "bayesianridg": 626, "elasticnetcv": 628, "gammaregressor": 629, "larscv": 632, "lassocv": 634, "lassolar": 635, "lassolarscv": 636, "lassolars": 637, "logisticregress": 639, "logisticregressioncv": 640, "multitaskelasticnet": 641, "multitaskelasticnetcv": 642, "multitasklasso": 643, "multitasklassocv": 644, "orthogonalmatchingpursuit": 645, "orthogonalmatchingpursuitcv": 646, "passiveaggressiveclassifi": 647, "passiveaggressiveregressor": 648, "poissonregressor": 650, "ransacregressor": 652, "ridgecv": 654, "ridgeclassifi": 655, "ridgeclassifiercv": 656, "sgdclassifi": 657, "sgdoneclasssvm": 658, "sgdregressor": 659, "theilsenregressor": 660, "enet_path": 662, "lars_path": 663, "lars_path_gram": 664, "lasso_path": 665, "orthogonal_mp": 666, "orthogonal_mp_gram": 667, "ridge_regress": 668, "locallylinearembed": 670, "md": [671, 959], "spectralembed": 672, "locally_linear_embed": 674, "smacof": 675, "spectral_embed": 676, "trustworthi": 677, "detcurvedisplai": 679, "distancemetr": 680, "predictionerrordisplai": 682, "accuracy_scor": 684, "adjusted_mutual_info_scor": 685, "adjusted_rand_scor": 686, "average_precision_scor": 688, "balanced_accuracy_scor": 689, "brier_score_loss": 690, "calinski_harabasz_scor": 691, "check_scor": 692, "class_likelihood_ratio": 693, "classification_report": 694, "contingency_matrix": 695, "pair_confusion_matrix": 696, "cohen_kappa_scor": 697, "completeness_scor": 698, "confusion_matrix": 699, "consensus_scor": 700, "coverage_error": 701, "d2_absolute_error_scor": 702, "d2_pinball_scor": 703, "d2_tweedie_scor": 704, "davies_bouldin_scor": 705, "dcg_score": 706, "det_curv": 707, "explained_variance_scor": 708, "f1_score": 709, "fbeta_scor": 710, "fowlkes_mallows_scor": 711, "get_scor": 712, "get_scorer_nam": 713, "hamming_loss": 714, "hinge_loss": 715, "homogeneity_completeness_v_measur": 716, "homogeneity_scor": 717, "jaccard_scor": 718, "label_ranking_average_precision_scor": 719, "label_ranking_loss": 720, "log_loss": 721, "make_scor": 722, "matthews_corrcoef": 723, "max_error": 724, "mean_absolute_error": 725, "mean_absolute_percentage_error": 726, "mean_gamma_devi": 727, "mean_pinball_loss": 728, "mean_poisson_devi": 729, "mean_squared_error": 730, "mean_squared_log_error": 731, "mean_tweedie_devi": 732, "median_absolute_error": 733, "multilabel_confusion_matrix": 734, "mutual_info_scor": 735, "ndcg_score": 736, "normalized_mutual_info_scor": 737, "additive_chi2_kernel": 738, "chi2_kernel": 739, "cosine_dist": 740, "cosine_similar": 741, "distance_metr": 742, "euclidean_dist": 743, "haversine_dist": 744, "kernel_metr": 745, "laplacian_kernel": 746, "linear_kernel": 747, "manhattan_dist": 748, "nan_euclidean_dist": 749, "paired_cosine_dist": 750, "paired_dist": 751, "paired_euclidean_dist": 752, "paired_manhattan_dist": 753, "pairwise_kernel": 754, "polynomial_kernel": 755, "rbf_kernel": 756, "sigmoid_kernel": 757, "pairwise_dist": 758, "pairwise_distances_argmin": 759, "pairwise_distances_argmin_min": 760, "pairwise_distances_chunk": 761, "precision_recall_curv": 762, "precision_recall_fscore_support": 763, "precision_scor": 764, "r2_score": 765, "rand_scor": 766, "recall_scor": 767, "roc_auc_scor": 768, "roc_curv": 769, "silhouette_sampl": 770, "silhouette_scor": 771, "top_k_accuracy_scor": 772, "v_measure_scor": 773, "zero_one_loss": 774, "bayesiangaussianmixtur": [775, 961], "gaussianmixtur": [776, 961], "groupkfold": 778, "groupshufflesplit": 779, "halvinggridsearchcv": 780, "halvingrandomsearchcv": 781, "kfold": 782, "learningcurvedisplai": 783, "leaveonegroupout": 784, "leaveoneout": 785, "leavepgroupsout": 786, "leavepout": 787, "parametergrid": 788, "parametersampl": 789, "predefinedsplit": 790, "randomizedsearchcv": 791, "repeatedkfold": 792, "repeatedstratifiedkfold": 793, "shufflesplit": 794, "stratifiedkfold": 796, "stratifiedshufflesplit": 797, "timeseriessplit": 798, "check_cv": 799, "cross_val_predict": 800, "learning_curv": 803, "permutation_test_scor": 804, "train_test_split": 805, "validation_curv": 806, "onevsoneclassifi": [807, 963], "onevsrestclassifi": [808, 963], "outputcodeclassifi": [809, 963], "classifierchain": [810, 963], "multioutputclassifi": [811, 963], "multioutputregressor": [812, 963], "regressorchain": [813, 963], "bernoullinb": 814, "categoricalnb": 815, "complementnb": 816, "gaussiannb": 817, "multinomialnb": 818, "balltre": [819, 965], "kdtree": [820, 965], "kneighborsclassifi": 821, "kneighborsregressor": 822, "kneighborstransform": 823, "kerneldens": 824, "localoutlierfactor": 825, "nearestcentroid": 826, "nearestneighbor": 827, "neighborhoodcomponentsanalysi": 828, "radiusneighborsclassifi": 829, "radiusneighborsregressor": 830, "radiusneighborstransform": 831, "kneighbors_graph": 832, "radius_neighbors_graph": 833, "sort_graph_by_row_valu": 834, "bernoullirbm": 835, "mlpregressor": 837, "make_pipelin": 840, "make_union": 841, "binar": [842, 861, 972, 973], "functiontransform": 843, "kernelcenter": 845, "labelbinar": [846, 973], "labelencod": 847, "multilabelbinar": [850, 973], "ordinalencod": 853, "polynomialfeatur": 854, "splinetransform": 858, "add_dummy_featur": 860, "label_binar": 862, "maxabs_scal": 863, "minmax_scal": 864, "power_transform": 866, "quantile_transform": 867, "robust_scal": 868, "gaussianrandomproject": 870, "sparserandomproject": 871, "johnson_lindenstrauss_min_dim": 872, "labelpropag": 873, "labelspread": 874, "selftrainingclassifi": 875, "set_config": 876, "show_vers": 877, "linearsvr": [879, 977], "nusvc": [880, 977], "nusvr": 881, "oneclasssvm": 882, "l1_min_c": 885, "decisiontreeclassifi": 886, "extratreeclassifi": 888, "extratreeregressor": 889, "export_graphviz": 890, "export_text": 891, "plot_tre": 892, "_safe_index": 894, "arrayfunc": 895, "min_po": 895, "as_float_arrai": 896, "assert_all_finit": 897, "check_x_i": 898, "check_arrai": 899, "check_consistent_length": 900, "check_random_st": 901, "check_scalar": 902, "class_weight": [903, 904], "compute_class_weight": 903, "compute_sample_weight": 904, "discoveri": [906, 907, 908], "all_displai": 906, "all_estim": 907, "all_funct": 908, "estimator_check": [909, 910], "check_estim": 909, "parametrize_with_check": 910, "estimator_html_repr": 911, "extmath": [912, 913, 914, 915, 916, 917], "fast_logdet": 913, "randomized_range_find": 914, "randomized_svd": 915, "safe_sparse_dot": 916, "weighted_mod": 917, "gen_batch": 918, "gen_even_slic": 919, "single_source_shortest_path_length": 920, "metaestim": [922, 923], "available_if": 922, "if_delegate_has_method": 923, "is_multilabel": 924, "type_of_target": 925, "unique_label": 926, "murmurhash3_32": 927, "delai": 929, "parallel_backend": 930, "sample_without_replac": 931, "register_parallel_backend": 932, "resampl": 933, "safe_mask": 934, "safe_sqr": 935, "sparsefunc": [937, 938, 939, 940, 941, 942, 943, 1013], "incr_mean_variance_axi": 937, "inplace_column_scal": 938, "inplace_csr_column_scal": 939, "inplace_row_scal": 940, "inplace_swap_column": 941, "inplace_swap_row": 942, "mean_variance_axi": 943, "sparsefuncs_fast": [944, 945], "inplace_csr_row_normalize_l1": 944, "inplace_csr_row_normalize_l2": 945, "check_is_fit": 946, "check_memori": 947, "check_symmetr": 948, "column_or_1d": 949, "has_fit_paramet": 950, "exhaust": 951, "min_resourc": 951, "aggress": [951, 958], "analyz": 951, "cv_results_": 951, "brute": [951, 965], "forc": [951, 965], "keep": 952, "mark": 952, "nan": 952, "chi": [954, 960], "skew": 954, "tensor": 954, "sketch": 954, "qda": 956, "omp": 958, "ard": 958, "liblinear": 958, "passiv": 958, "scenario": 958, "trade": 958, "off": 958, "which": 958, "consensu": 958, "median": [958, 962], "huber": 958, "extend": 958, "introduct": [959, 988], "modifi": 959, "hessian": 959, "eigenmap": 959, "tangent": 959, "align": 959, "nonmetr": 959, "barn": 959, "hut": 959, "cosin": 960, "laplacian": 960, "pro": 961, "con": 961, "maxim": 961, "rule": 962, "cohen": 962, "kappa": 962, "ham": 962, "jaccard": 962, "hing": 962, "matthew": 962, "zero": 962, "brier": 962, "discount": 962, "cumul": 962, "gain": 962, "r\u00b2": 962, "absolut": 962, "logarithm": 962, "percentag": 962, "explain": 962, "pinbal": 962, "d\u00b2": 962, "complement": 964, "bernoulli": [964, 967], "unsupervis": [965, 967, 979, 996, 998], "find": 965, "ball": 965, "leaf_siz": 965, "shrunken": 965, "warm_start": 966, "parametr": 967, "up": 968, "ellipt": 968, "envelop": 968, "isol": 968, "ic": 969, "outlin": 970, "mislead": 970, "strongli": 970, "rang": 972, "whiten": 972, "bin": 972, "lemma": 974, "unlabel": 975, "entri": 975, "id3": 978, "c4": 978, "5": [978, 1004], "c5": 978, "cart": 978, "welcom": 980, "talk": 981, "scientif": [981, 991], "framework": 982, "domain": 982, "translat": 982, "roadmap": 983, "thi": 983, "statement": 983, "2018": 983, "architectur": 983, "goal": 983, "subpackag": 983, "mail": 985, "user": [985, 999], "gitter": 985, "who": 986, "j": 986, "morgan": 986, "spotifi": 986, "inria": 986, "betawork": 986, "hug": 986, "evernot": 986, "t\u00e9l\u00e9com": 986, "paristech": 986, "book": 986, "com": 986, "aweb": 986, "yhat": 986, "rangespan": 986, "birchbox": 986, "bestofmedia": 986, "phimeca": 986, "howaboutw": 986, "peerindex": 986, "datarobot": 986, "okcupid": 986, "love": 986, "publica": 986, "machinali": 986, "solido": 986, "infonea": 986, "dataiku": 986, "otto": 986, "zopa": 986, "mar": 986, "bnp": 986, "pariba": 986, "cardif": 986, "section": 988, "convent": 988, "cast": 988, "updat": [988, 1014], "right": 990, "put": 993, "open": 993, "ship": 994, "would": 994, "high": 995, "solv": [995, 996], "vocabulari": 995, "curs": 995, "iris": 995, "same": 995, "seek": 996, "constrain": 996, "inverse_transform": 996, "setup": 997, "token": 997, "occurr": 997, "languag": 997, "identif": 997, "sentiment": 997, "movi": 997, "cli": 997, "where": 997, "here": 997, "12": 1004, "changelog": [1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "11": 1004, "9": 1004, "8": 1004, "7": 1004, "6": [1004, 1010], "modul": [1004, 1012, 1013, 1019, 1020], "misc": 1004, "4": [1004, 1012], "earlier": 1004, "13": 1005, "14": 1006, "15": 1007, "16": 1008, "17": 1009, "18": 1010, "last": 1010, "19": 1011, "21": 1013, "legend": [1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "post1": 1014, "websit": 1014, "clear": 1014, "public": 1014, "futurewarn": 1014, "enforc": [1015, 1017]}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Pipelining: chaining a PCA and a logistic regression": [[72, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "FastICA on 2D point clouds": [[97, "fastica-on-2d-point-clouds"]], "Generate sample data": [[97, "generate-sample-data"], [96, "generate-sample-data"], [77, "generate-sample-data"], [62, "generate-sample-data"], [38, "generate-sample-data"], [289, "generate-sample-data"], [334, "generate-sample-data"], [232, "generate-sample-data"], [270, "generate-sample-data"], [142, "generate-sample-data"]], "Plot results": [[97, "plot-results"], [96, "plot-results"], [77, "plot-results"], [49, "plot-results"], [8, "plot-results"]], "Computation times": [[92, "computation-times"], [133, "computation-times"], [75, "computation-times"], [86, "computation-times"], [82, "computation-times"], [107, "computation-times"], [139, "computation-times"], [35, "computation-times"], [15, "computation-times"], [28, "computation-times"], [67, "computation-times"], [22, "computation-times"], [343, "computation-times"], [305, "computation-times"], [291, "computation-times"], [313, "computation-times"], [297, "computation-times"], [321, "computation-times"], [350, "computation-times"], [338, "computation-times"], [240, "computation-times"], [224, "computation-times"], [249, "computation-times"], [216, "computation-times"], [273, "computation-times"], [276, "computation-times"], [159, "computation-times"], [174, "computation-times"], [171, "computation-times"], [147, "computation-times"], [163, "computation-times"]], "Factor Analysis (with rotation) to visualize patterns": [[106, "factor-analysis-with-rotation-to-visualize-patterns"]], "OOB Errors for Random Forests": [[114, "oob-errors-for-random-forests"]], "Pixel importances with a parallel forest of trees": [[117, "pixel-importances-with-a-parallel-forest-of-trees"]], "Loading the data and model fitting": [[117, "loading-the-data-and-model-fitting"]], "Feature importance based on mean decrease in impurity (MDI)": [[117, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Feature transformations with ensembles of trees": [[115, "feature-transformations-with-ensembles-of-trees"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[71, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Illustration of Pipeline and GridSearchCV": [[71, "illustration-of-pipeline-and-gridsearchcv"]], "Caching transformers within a Pipeline": [[71, "caching-transformers-within-a-pipeline"]], "Prediction Intervals for Gradient Boosting Regression": [[122, "prediction-intervals-for-gradient-boosting-regression"]], "Fitting non-linear quantile and least squares regressors": [[122, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Analysis of the error metrics": [[122, "analysis-of-the-error-metrics"]], "Calibration of the confidence interval": [[122, "calibration-of-the-confidence-interval"]], "Tuning the hyper-parameters of the quantile regressors": [[122, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Plot randomly generated classification dataset": [[90, "plot-randomly-generated-classification-dataset"]], "Combine predictors using stacking": [[129, "combine-predictors-using-stacking"]], "Download the dataset": [[129, "download-the-dataset"]], "Make pipeline to preprocess the data": [[129, "make-pipeline-to-preprocess-the-data"]], "Stack of predictors on a single data set": [[129, "stack-of-predictors-on-a-single-data-set"]], "Measure and plot the results": [[129, "measure-and-plot-the-results"]], "Ensemble methods": [[108, "ensemble-methods"], [399, "ensemble-methods"], [164, "ensemble-methods"]], "Incremental PCA": [[99, "incremental-pca"], [397, "incremental-pca"]], "Concatenating multiple feature extraction methods": [[73, "concatenating-multiple-feature-extraction-methods"]], "Gradient Boosting regression": [[123, "gradient-boosting-regression"]], "Load the data": [[123, "load-the-data"], [7, "load-the-data"], [50, "load-the-data"]], "Data preprocessing": [[123, "data-preprocessing"]], "Fit regression model": [[123, "fit-regression-model"], [289, "fit-regression-model"], [334, "fit-regression-model"]], "Plot training deviance": [[123, "plot-training-deviance"]], "Plot feature importance": [[123, "plot-feature-importance"]], "Blind source separation using FastICA": [[96, "blind-source-separation-using-fastica"]], "Fit ICA and PCA models": [[96, "fit-ica-and-pca-models"]], "The Iris Dataset": [[89, "the-iris-dataset"]], "IsolationForest example": [[125, "isolationforest-example"]], "Data generation": [[125, "data-generation"], [49, "data-generation"], [56, "data-generation"], [315, "data-generation"], [247, "data-generation"], [155, "data-generation"], [145, "data-generation"]], "Training of the model": [[125, "training-of-the-model"]], "Plot discrete decision boundary": [[125, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[125, "plot-path-length-decision-boundary"]], "Hashing feature transformation using Totally Random Trees": [[127, "hashing-feature-transformation-using-totally-random-trees"]], "Feature Selection": [[140, "feature-selection"], [164, "feature-selection"]], "Two-class AdaBoost": [[112, "two-class-adaboost"]], "Monotonic Constraints": [[126, "monotonic-constraints"], [399, "monotonic-constraints"]], "Using feature names to specify monotonic constraints": [[126, "using-feature-names-to-specify-monotonic-constraints"]], "Plot randomly generated multilabel dataset": [[91, "plot-randomly-generated-multilabel-dataset"]], "Principal components analysis (PCA)": [[101, "principal-components-analysis-pca"]], "Create the data": [[101, "create-the-data"], [103, "create-the-data"]], "Plot the figures": [[101, "plot-the-figures"]], "Beta-divergence loss functions": [[94, "beta-divergence-loss-functions"]], "The Digit Dataset": [[88, "the-digit-dataset"]], "Discrete versus Real AdaBoost": [[109, "discrete-versus-real-adaboost"]], "Preparing the data and baseline models": [[109, "preparing-the-data-and-baseline-models"]], "Adaboost with discrete SAMME and real SAMME.R": [[109, "adaboost-with-discrete-samme-and-real-samme-r"]], "Plotting the results": [[109, "plotting-the-results"], [111, "plotting-the-results"], [63, "plotting-the-results"]], "Concluding remarks": [[109, "concluding-remarks"], [4, "concluding-remarks"], [222, "concluding-remarks"]], "Comparing random forests and the multi-output meta estimator": [[128, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Early stopping of Gradient Boosting": [[120, "early-stopping-of-gradient-boosting"]], "Compare scores with and without early stopping": [[120, "compare-scores-with-and-without-early-stopping"]], "Compare fit times with and without early stopping": [[120, "compare-fit-times-with-and-without-early-stopping"]], "Plot the decision boundaries of a VotingClassifier": [[130, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Ledoit-Wolf vs OAS estimation": [[78, "ledoit-wolf-vs-oas-estimation"]], "Gradient Boosting Out-of-Bag estimates": [[121, "gradient-boosting-out-of-bag-estimates"]], "Categorical Feature Support in Gradient Boosting": [[119, "categorical-feature-support-in-gradient-boosting"]], "Load Ames Housing dataset": [[119, "load-ames-housing-dataset"]], "Gradient boosting estimator with dropped categorical features": [[119, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with one-hot encoding": [[119, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[119, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient boosting estimator with native categorical support": [[119, "gradient-boosting-estimator-with-native-categorical-support"]], "Model comparison": [[119, "model-comparison"]], "Limiting the number of splits": [[119, "limiting-the-number-of-splits"]], "Plot individual and voting regression predictions": [[132, "plot-individual-and-voting-regression-predictions"]], "Training classifiers": [[132, "training-classifiers"]], "Making predictions": [[132, "making-predictions"]], "Plot the results": [[132, "plot-the-results"], [81, "plot-the-results"], [50, "plot-the-results"], [162, "plot-the-results"]], "PCA example with Iris Data-set": [[102, "pca-example-with-iris-data-set"]], "Cross-validation on Digits Dataset Exercise": [[136, "cross-validation-on-digits-dataset-exercise"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[103, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Fit the models": [[103, "fit-the-models"]], "Robust vs Empirical covariance estimate": [[80, "robust-vs-empirical-covariance-estimate"]], "Minimum Covariance Determinant Estimator": [[80, "minimum-covariance-determinant-estimator"]], "Evaluation": [[80, "evaluation"], [296, "evaluation"]], "References": [[80, "references"], [113, "references"], [27, "references"], [5, null], [11, "references"], [25, "references"], [972, null], [975, null], [975, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [952, "references"], [952, null], [969, null], [290, "references"], [402, "references"], [392, null], [392, null], [392, null], [392, null], [392, null], [392, null], [392, null], [392, null], [392, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [363, null], [363, null], [363, null], [365, null], [365, null], [365, null], [365, null], [365, null], [400, null], [257, null], [185, null], [173, "references"]], "Plot class probabilities calculated by the VotingClassifier": [[131, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Cross-validation on diabetes Dataset Exercise": [[135, "cross-validation-on-diabetes-dataset-exercise"]], "Load dataset and apply GridSearchCV": [[135, "load-dataset-and-apply-gridsearchcv"]], "Plot error lines showing +/- std. errors of the scores": [[135, "plot-error-lines-showing-std-errors-of-the-scores"]], "Bonus: how much can you trust the selection of alpha?": [[135, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Comparison of F-test and mutual information": [[141, "comparison-of-f-test-and-mutual-information"]], "Feature importances with a forest of trees": [[116, "feature-importances-with-a-forest-of-trees"]], "Data generation and model fitting": [[116, "data-generation-and-model-fitting"]], "Feature importance based on mean decrease in impurity": [[116, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on feature permutation": [[116, "feature-importance-based-on-feature-permutation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[79, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "References:": [[79, null], [978, null], [978, null], [956, null], [972, null], [972, null], [954, null], [965, null], [965, null], [965, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [968, null], [968, null], [968, null], [968, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [967, null], [974, null], [974, null], [974, null], [959, null], [959, null], [959, null], [959, null], [959, null], [959, null], [959, null], [959, null], [960, null], [960, null], [966, null], [963, null], [963, null], [963, null], [970, null], [951, null], [951, null], [964, null], [964, null], [964, null], [976, null], [976, null], [977, null], [955, null], [401, null], [389, null], [389, null], [389, null], [390, null], [392, null], [392, null], [392, null], [392, null], [392, null], [392, null], [392, null], [392, null], [392, null], [396, null], [396, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [362, null], [363, null], [394, null], [394, null], [394, null], [394, null], [400, null], [263, null], [262, null], [169, null]], "Generate data": [[79, "generate-data"], [47, "generate-data"], [66, "generate-data"], [296, "generate-data"], [191, "generate-data"]], "Comparison of results": [[79, "comparison-of-results"]], "Sparse coding with a precomputed dictionary": [[105, "sparse-coding-with-a-precomputed-dictionary"], [397, "sparse-coding-with-a-precomputed-dictionary"]], "Gradient Boosting regularization": [[124, "gradient-boosting-regularization"]], "Single estimator versus bagging: bias-variance decomposition": [[113, "single-estimator-versus-bagging-bias-variance-decomposition"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[118, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[104, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Faces dataset decompositions": [[95, "faces-dataset-decompositions"]], "Dataset preparation": [[95, "dataset-preparation"], [218, "dataset-preparation"]], "Decomposition": [[95, "decomposition"], [93, "decomposition"], [164, "decomposition"]], "Eigenfaces - PCA using randomized SVD": [[95, "eigenfaces-pca-using-randomized-svd"]], "Non-negative components - NMF": [[95, "non-negative-components-nmf"]], "Independent components - FastICA": [[95, "independent-components-fastica"]], "Sparse components - MiniBatchSparsePCA": [[95, "sparse-components-minibatchsparsepca"]], "Dictionary learning": [[95, "dictionary-learning"]], "Cluster centers - MiniBatchKMeans": [[95, "cluster-centers-minibatchkmeans"]], "Factor Analysis components - FA": [[95, "factor-analysis-components-fa"]], "Decomposition: Dictionary learning": [[95, "decomposition-dictionary-learning"]], "Dictionary learning - positive dictionary": [[95, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive code": [[95, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary & code": [[95, "dictionary-learning-positive-dictionary-code"]], "Kernel PCA": [[100, "kernel-pca"]], "Projecting data: PCA vs. KernelPCA": [[100, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[100, "projecting-into-the-original-feature-space"]], "SVM Exercise": [[138, "svm-exercise"]], "Effect of transforming the targets in regression model": [[74, "effect-of-transforming-the-targets-in-regression-model"]], "Synthetic example": [[74, "synthetic-example"]], "Real-world data set": [[74, "real-world-data-set"]], "Principal Component Regression vs Partial Least Squares Regression": [[85, "principal-component-regression-vs-partial-least-squares-regression"]], "The data": [[85, "the-data"]], "Projection on one component and predictive power": [[85, "projection-on-one-component-and-predictive-power"]], "Covariance estimation": [[76, "covariance-estimation"], [394, "covariance-estimation"], [164, "covariance-estimation"]], "Dataset examples": [[87, "dataset-examples"], [164, "dataset-examples"]], "Decision Tree Regression with AdaBoost": [[111, "decision-tree-regression-with-adaboost"]], "Preparing the data": [[111, "preparing-the-data"], [173, "preparing-the-data"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[111, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Compare cross decomposition methods": [[84, "compare-cross-decomposition-methods"]], "Dataset based latent variables model": [[84, "dataset-based-latent-variables-model"]], "Canonical (symmetric) PLS": [[84, "canonical-symmetric-pls"]], "Transform data": [[84, "transform-data"]], "Scatter plot of scores": [[84, "scatter-plot-of-scores"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[84, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[84, "pls-regression-with-univariate-response-a-k-a-pls1"]], "CCA (PLS mode B with symmetric deflation)": [[84, "cca-pls-mode-b-with-symmetric-deflation"]], "Multi-class AdaBoosted Decision Trees": [[110, "multi-class-adaboosted-decision-trees"]], "Cross decomposition": [[83, "cross-decomposition"], [395, "cross-decomposition"], [164, "cross-decomposition"]], "Digits Classification Exercise": [[137, "digits-classification-exercise"]], "Image denoising using dictionary learning": [[98, "image-denoising-using-dictionary-learning"]], "Generate distorted image": [[98, "generate-distorted-image"]], "Display the distorted image": [[98, "display-the-distorted-image"]], "Extract reference patches": [[98, "extract-reference-patches"]], "Learn the dictionary from reference patches": [[98, "learn-the-dictionary-from-reference-patches"]], "Extract noisy patches and reconstruct them using the dictionary": [[98, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Sparse inverse covariance estimation": [[81, "sparse-inverse-covariance-estimation"]], "Generate the data": [[81, "generate-the-data"], [65, "generate-the-data"], [63, "generate-the-data"]], "Estimate the covariance": [[81, "estimate-the-covariance"]], "Tutorial exercises": [[134, "tutorial-exercises"], [164, "tutorial-exercises"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[77, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Compute the likelihood on test data": [[77, "compute-the-likelihood-on-test-data"]], "Compare different approaches to setting the regularization parameter": [[77, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Inductive Clustering": [[55, "inductive-clustering"]], "Visualizing the stock market structure": [[12, "visualizing-the-stock-market-structure"]], "Retrieve the data from Internet": [[12, "retrieve-the-data-from-internet"]], "Learning a graph structure": [[12, "learning-a-graph-structure"]], "Clustering using affinity propagation": [[12, "clustering-using-affinity-propagation"]], "Embedding in 2D space": [[12, "embedding-in-2d-space"]], "Visualization": [[12, "visualization"], [327, "visualization"], [391, "visualization"]], "Color Quantization using K-Means": [[48, "color-quantization-using-k-means"]], "Empirical evaluation of the impact of k-means initialization": [[60, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Examples based on real world datasets": [[3, "examples-based-on-real-world-datasets"], [164, "examples-based-on-real-world-datasets"]], "About us": [[0, "about-us"]], "History": [[0, "history"]], "Governance": [[0, "governance"]], "Authors": [[0, "authors"], [1004, "authors"], [1004, "id20"]], "Contributor Experience Team": [[0, "contributor-experience-team"], [381, "contributor-experience-team"]], "Communication Team": [[0, "communication-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Artwork": [[0, "artwork"]], "Funding": [[0, "funding"]], "Past Sponsors": [[0, "past-sponsors"]], "Sprints": [[0, "sprints"]], "Donating to the project": [[0, "donating-to-the-project"]], "Infrastructure support": [[0, "infrastructure-support"]], "A demo of the mean-shift clustering algorithm": [[62, "a-demo-of-the-mean-shift-clustering-algorithm"]], "Compute clustering with MeanShift": [[62, "compute-clustering-with-meanshift"]], "Plot result": [[62, "plot-result"], [38, "plot-result"], [66, "plot-result"], [66, "id2"]], "Feature agglomeration": [[51, "feature-agglomeration"], [979, "feature-agglomeration"], [996, "feature-agglomeration"]], "Plot Hierarchical Clustering Dendrogram": [[41, "plot-hierarchical-clustering-dendrogram"]], "Comparing different clustering algorithms on toy datasets": [[44, "comparing-different-clustering-algorithms-on-toy-datasets"]], "Plot classification probability": [[30, "plot-classification-probability"]], "Model Complexity Influence": [[7, "model-complexity-influence"]], "Benchmark influence": [[7, "benchmark-influence"]], "Choose parameters": [[7, "choose-parameters"]], "Run the code and plot the results": [[7, "run-the-code-and-plot-the-results"]], "Conclusion": [[7, "conclusion"], [186, "conclusion"]], "Demo of OPTICS clustering algorithm": [[64, "demo-of-optics-clustering-algorithm"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[14, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Comparison of Calibration of Classifiers": [[27, "comparison-of-calibration-of-classifiers"]], "Dataset": [[27, "dataset"], [25, "dataset"], [263, "dataset"], [186, "dataset"]], "Calibration curves": [[27, "calibration-curves"], [25, "calibration-curves"], [390, "calibration-curves"]], "Faces recognition example using eigenfaces and SVMs": [[6, "faces-recognition-example-using-eigenfaces-and-svms"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[34, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Colormap": [[34, "colormap"]], "Datasets generation functions": [[34, "datasets-generation-functions"]], "Plot functions": [[34, "plot-functions"]], "Plot": [[34, "plot"], [181, "plot"]], "Outlier detection on a real data set": [[9, "outlier-detection-on-a-real-data-set"]], "First example": [[9, "first-example"]], "Second example": [[9, "second-example"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[47, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "Define structure of the data": [[47, "define-structure-of-the-data"]], "Compute clustering": [[47, "compute-clustering"], [66, "compute-clustering"], [66, "id1"]], "Plot the results on an image": [[47, "plot-the-results-on-an-image"]], "Image denoising using kernel PCA": [[5, "image-denoising-using-kernel-pca"]], "Load the dataset via OpenML": [[5, "load-the-dataset-via-openml"]], "Learn the PCA basis": [[5, "learn-the-pca-basis"]], "Reconstruct and denoise test images": [[5, "reconstruct-and-denoise-test-images"]], "Segmenting the picture of greek coins in regions": [[46, "segmenting-the-picture-of-greek-coins-in-regions"]], "Feature agglomeration vs. univariate selection": [[54, "feature-agglomeration-vs-univariate-selection"]], "Prediction Latency": [[10, "prediction-latency"], [355, "prediction-latency"]], "Benchmark and plot helper functions": [[10, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[10, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark n_features influence on prediction speed": [[10, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[10, "benchmark-throughput"]], "Spectral clustering for image segmentation": [[65, "spectral-clustering-for-image-segmentation"]], "Plotting four circles": [[65, "plotting-four-circles"]], "Plotting two circles": [[65, "plotting-two-circles"]], "Column Transformer with Mixed Types": [[70, "column-transformer-with-mixed-types"]], "Comparing different hierarchical linkage methods on toy datasets": [[61, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "Pipelines and composite estimators": [[68, "pipelines-and-composite-estimators"], [393, "pipelines-and-composite-estimators"], [164, "pipelines-and-composite-estimators"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[63, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Compute clustering with KMeans": [[63, "compute-clustering-with-kmeans"]], "Compute clustering with MiniBatchKMeans": [[63, "compute-clustering-with-minibatchkmeans"]], "Establishing parity between clusters": [[63, "establishing-parity-between-clusters"]], "Species distribution modeling": [[11, "species-distribution-modeling"]], "Demo of DBSCAN clustering algorithm": [[49, "demo-of-dbscan-clustering-algorithm"]], "Compute DBSCAN": [[49, "compute-dbscan"]], "Vector Quantization Example": [[53, "vector-quantization-example"]], "Original image": [[53, "original-image"]], "Compression via vector quantization": [[53, "compression-via-vector-quantization"]], "Encoding strategy": [[53, "encoding-strategy"]], "Memory footprint": [[53, "memory-footprint"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[19, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[33, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Demo of affinity propagation clustering algorithm": [[38, "demo-of-affinity-propagation-clustering-algorithm"]], "Compute Affinity Propagation": [[38, "compute-affinity-propagation"]], "An example of K-Means++ initialization": [[58, "an-example-of-k-means-initialization"]], "Out-of-core classification of text documents": [[8, "out-of-core-classification-of-text-documents"]], "Reuters Dataset related routines": [[8, "reuters-dataset-related-routines"]], "Main": [[8, "main"]], "A demo of K-Means clustering on the handwritten digits data": [[57, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "Load the dataset": [[57, "load-the-dataset"]], "Define our evaluation benchmark": [[57, "define-our-evaluation-benchmark"]], "Run the benchmark": [[57, "run-the-benchmark"]], "Visualize the results on PCA-reduced data": [[57, "visualize-the-results-on-pca-reduced-data"]], "Libsvm GUI": [[16, "libsvm-gui"]], "Compare BIRCH and MiniBatchKMeans": [[42, "compare-birch-and-minibatchkmeans"]], "Classification": [[29, "classification"], [32, "classification"], [978, "classification"], [965, "id4"], [958, "classification"], [966, "classification"], [976, "classification"], [977, "classification"], [995, "classification"], [399, "classification"], [399, "id18"], [164, "classification"], [157, "classification"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[13, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Classifier comparison": [[31, "classifier-comparison"]], "Probability calibration of classifiers": [[24, "probability-calibration-of-classifiers"]], "Generate synthetic dataset": [[24, "generate-synthetic-dataset"], [176, "generate-synthetic-dataset"], [176, "id1"]], "Gaussian Naive-Bayes": [[24, "gaussian-naive-bayes"]], "Plot data and the predicted probabilities": [[24, "plot-data-and-the-predicted-probabilities"]], "Hierarchical clustering: structured vs unstructured ward": [[66, "hierarchical-clustering-structured-vs-unstructured-ward"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[66, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Probability Calibration for 3-class classification": [[26, "probability-calibration-for-3-class-classification"]], "Data": [[26, "data"]], "Fitting and calibration": [[26, "fitting-and-calibration"]], "Compare probabilities": [[26, "compare-probabilities"]], "Adjustment for chance in clustering performance evaluation": [[37, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Defining the list of metrics to evaluate": [[37, "defining-the-list-of-metrics-to-evaluate"]], "First experiment: fixed ground truth labels and growing number of clusters": [[37, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Second experiment: varying number of classes and clusters": [[37, "second-experiment-varying-number-of-classes-and-clusters"]], "Recognizing hand-written digits": [[32, "recognizing-hand-written-digits"]], "Digits dataset": [[32, "digits-dataset"]], "Online learning of a dictionary of parts of faces": [[50, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Learn the dictionary of images": [[50, "learn-the-dictionary-of-images"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[52, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Demonstration of k-means assumptions": [[56, "demonstration-of-k-means-assumptions"]], "Fit models and plot results": [[56, "fit-models-and-plot-results"]], "Possible solutions": [[56, "possible-solutions"]], "Final remarks": [[56, "final-remarks"]], "Biclustering": [[18, "biclustering"], [389, "biclustering"], [364, "biclustering"], [164, "biclustering"]], "Clustering": [[36, "clustering"], [392, "clustering"], [164, "clustering"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[43, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[59, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Time-related feature engineering": [[4, "time-related-feature-engineering"]], "Data exploration on the Bike Sharing Demand dataset": [[4, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Time-based cross-validation": [[4, "time-based-cross-validation"]], "Gradient Boosting": [[4, "gradient-boosting"]], "Naive linear regression": [[4, "naive-linear-regression"]], "Time-steps as categories": [[4, "time-steps-as-categories"]], "Trigonometric features": [[4, "trigonometric-features"]], "Periodic spline features": [[4, "periodic-spline-features"]], "Qualitative analysis of the impact of features on linear model predictions": [[4, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Modeling pairwise interactions with splines and polynomial features": [[4, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling non-linear feature interactions with kernels": [[4, "modeling-non-linear-feature-interactions-with-kernels"]], "Calibration": [[23, "calibration"], [164, "calibration"]], "Column Transformer with Heterogeneous Data Sources": [[69, "column-transformer-with-heterogeneous-data-sources"]], "20 newsgroups dataset": [[69, "newsgroups-dataset"]], "Creating transformers": [[69, "creating-transformers"]], "Classification pipeline": [[69, "classification-pipeline"]], "K-means Clustering": [[45, "k-means-clustering"]], "Probability Calibration curves": [[25, "probability-calibration-curves"]], "Gaussian Naive Bayes": [[25, "gaussian-naive-bayes"], [964, "gaussian-naive-bayes"]], "Linear support vector classifier": [[25, "linear-support-vector-classifier"]], "Summary": [[25, "summary"], [342, "summary"]], "Agglomerative clustering with different metrics": [[40, "agglomerative-clustering-with-different-metrics"]], "A demo of the Spectral Co-Clustering algorithm": [[21, "a-demo-of-the-spectral-co-clustering-algorithm"]], "A demo of the Spectral Biclustering algorithm": [[20, "a-demo-of-the-spectral-biclustering-algorithm"]], "Agglomerative clustering with and without structure": [[39, "agglomerative-clustering-with-and-without-structure"]], "Wikipedia principal eigenvector": [[17, "wikipedia-principal-eigenvector"]], "Download data, if not already on disk": [[17, "download-data-if-not-already-on-disk"]], "Loading the redirect files": [[17, "loading-the-redirect-files"]], "Computing the Adjacency matrix": [[17, "computing-the-adjacency-matrix"]], "Computing Principal Singular Vector using Randomized SVD": [[17, "computing-principal-singular-vector-using-randomized-svd"]], "Computing Centrality scores": [[17, "computing-centrality-scores"]], "Decision Trees": [[978, "decision-trees"], [344, "decision-trees"], [164, "decision-trees"]], "Examples:": [[978, null], [978, null], [978, null], [978, null], [956, null], [956, null], [956, null], [972, null], [972, null], [954, null], [954, null], [965, null], [965, null], [965, null], [965, null], [965, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [968, null], [968, null], [968, null], [968, null], [968, null], [968, null], [962, null], [962, null], [962, null], [962, null], [962, null], [957, null], [967, null], [959, null], [966, null], [966, null], [961, null], [961, null], [961, null], [961, null], [963, null], [970, null], [951, null], [951, null], [951, null], [976, null], [976, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [969, null], [1001, null], [393, null], [393, null], [393, null], [393, null], [393, null], [401, null], [401, null], [401, null], [401, null], [389, null], [389, null], [390, null], [392, null], [392, null], [392, null], [392, null], [392, null], [392, null], [392, null], [392, null], [392, null], [392, null], [392, null], [392, null], [392, null], [392, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [362, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [394, null], [394, null], [394, null], [394, null], [394, null], [394, null], [398, null], [395, null], [382, null]], "Regression": [[978, "regression"], [958, "regression"], [966, "regression"], [976, "regression"], [977, "regression"], [399, "regression"], [399, "id17"], [157, "regression"]], "Multi-output problems": [[978, "multi-output-problems"]], "Complexity": [[978, "complexity"], [965, "complexity"], [959, "complexity"], [959, "id3"], [959, "id4"], [959, "id5"], [959, "id7"], [959, "id8"], [966, "complexity"], [976, "complexity"], [977, "complexity"]], "Tips on practical use": [[978, "tips-on-practical-use"], [959, "tips-on-practical-use"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[978, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Mathematical formulation": [[978, "mathematical-formulation"], [965, "mathematical-formulation"], [958, "mathematical-formulation"], [966, "mathematical-formulation"], [976, "mathematical-formulation"], [977, "mathematical-formulation"], [389, "mathematical-formulation"], [389, "id3"], [392, "mathematical-formulation"], [392, "id12"], [392, "id19"], [392, "id29"], [392, "id33"], [399, "mathematical-formulation"]], "Classification criteria": [[978, "classification-criteria"]], "Regression criteria": [[978, "regression-criteria"]], "Minimal Cost-Complexity Pruning": [[978, "minimal-cost-complexity-pruning"]], "Linear and Quadratic Discriminant Analysis": [[956, "linear-and-quadratic-discriminant-analysis"]], "Dimensionality reduction using Linear Discriminant Analysis": [[956, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Mathematical formulation of the LDA and QDA classifiers": [[956, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "QDA": [[956, "qda"]], "LDA": [[956, "lda"]], "Mathematical formulation of LDA dimensionality reduction": [[956, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Shrinkage and Covariance Estimator": [[956, "shrinkage-and-covariance-estimator"]], "Estimation algorithms": [[956, "estimation-algorithms"]], "Preprocessing data": [[972, "preprocessing-data"]], "Standardization, or mean removal and variance scaling": [[972, "standardization-or-mean-removal-and-variance-scaling"]], "Scaling features to a range": [[972, "scaling-features-to-a-range"]], "Scaling sparse data": [[972, "scaling-sparse-data"]], "Scaling data with outliers": [[972, "scaling-data-with-outliers"]], "Scaling vs Whitening": [[972, null]], "Centering kernel matrices": [[972, "centering-kernel-matrices"]], "Non-linear transformation": [[972, "non-linear-transformation"]], "Mapping to a Uniform distribution": [[972, "mapping-to-a-uniform-distribution"]], "Mapping to a Gaussian distribution": [[972, "mapping-to-a-gaussian-distribution"]], "Normalization": [[972, "normalization"]], "Sparse input": [[972, null], [972, null]], "Encoding categorical features": [[972, "encoding-categorical-features"]], "Infrequent categories": [[972, "infrequent-categories"]], "Discretization": [[972, "discretization"]], "K-bins discretization": [[972, "k-bins-discretization"]], "Feature binarization": [[972, "feature-binarization"]], "Imputation of missing values": [[972, "imputation-of-missing-values"], [952, "imputation-of-missing-values"]], "Generating polynomial features": [[972, "generating-polynomial-features"]], "Polynomial features": [[972, "polynomial-features"]], "Spline transformer": [[972, "spline-transformer"]], "Custom transformers": [[972, "custom-transformers"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2": [[945, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l2"]], "sklearn.utils.validation.has_fit_parameter": [[950, "sklearn-utils-validation-has-fit-parameter"]], "Semi-supervised learning": [[975, "semi-supervised-learning"], [315, "semi-supervised-learning"]], "Unlabeled entries in y": [[975, null]], "Self Training": [[975, "self-training"]], "Examples": [[975, null], [975, null], [979, null], [979, null], [979, null], [1004, "examples"], [401, null], [401, null], [396, null], [396, null], [357, "examples"], [363, null], [363, "examples"], [164, "examples"]], "Label Propagation": [[975, "label-propagation"]], "Model selection: choosing estimators and their parameters": [[992, "model-selection-choosing-estimators-and-their-parameters"]], "Score, and cross-validated scores": [[992, "score-and-cross-validated-scores"]], "Cross-validation generators": [[992, "cross-validation-generators"]], "Exercise": [[992, null], [992, null], [995, null], [995, null]], "Grid-search and cross-validated estimators": [[992, "grid-search-and-cross-validated-estimators"]], "Grid-search": [[992, "grid-search"]], "Nested cross-validation": [[992, null]], "Cross-validated estimators": [[992, "cross-validated-estimators"]], "Kernel Approximation": [[954, "kernel-approximation"], [164, "kernel-approximation"], [172, "kernel-approximation"]], "Nystroem Method for Kernel Approximation": [[954, "nystroem-method-for-kernel-approximation"]], "Radial Basis Function Kernel": [[954, "radial-basis-function-kernel"]], "Additive Chi Squared Kernel": [[954, "additive-chi-squared-kernel"]], "Skewed Chi Squared Kernel": [[954, "skewed-chi-squared-kernel"]], "Polynomial Kernel Approximation via Tensor Sketch": [[954, "polynomial-kernel-approximation-via-tensor-sketch"]], "Mathematical Details": [[954, "mathematical-details"]], "Nearest Neighbors": [[965, "nearest-neighbors"], [278, "nearest-neighbors"], [164, "nearest-neighbors"]], "Unsupervised Nearest Neighbors": [[965, "unsupervised-nearest-neighbors"]], "Finding the Nearest Neighbors": [[965, "finding-the-nearest-neighbors"]], "KDTree and BallTree Classes": [[965, "kdtree-and-balltree-classes"]], "Nearest Neighbors Classification": [[965, "nearest-neighbors-classification"], [280, "nearest-neighbors-classification"]], "Nearest Neighbors Regression": [[965, "nearest-neighbors-regression"]], "Nearest Neighbor Algorithms": [[965, "nearest-neighbor-algorithms"]], "Brute Force": [[965, "brute-force"]], "K-D Tree": [[965, "k-d-tree"]], "Ball Tree": [[965, "ball-tree"]], "Choice of Nearest Neighbors Algorithm": [[965, "choice-of-nearest-neighbors-algorithm"]], "Effect of leaf_size": [[965, "effect-of-leaf-size"]], "Valid Metrics for Nearest Neighbor Algorithms": [[965, "valid-metrics-for-nearest-neighbor-algorithms"]], "Nearest Centroid Classifier": [[965, "nearest-centroid-classifier"]], "Nearest Shrunken Centroid": [[965, "nearest-shrunken-centroid"]], "Nearest Neighbors Transformer": [[965, "nearest-neighbors-transformer"]], "Neighborhood Components Analysis": [[965, "neighborhood-components-analysis"]], "Dimensionality reduction": [[965, "dimensionality-reduction"]], "Mahalanobis distance": [[965, "mahalanobis-distance"]], "Implementation": [[965, "implementation"], [392, null]], "Training": [[965, "training"], [296, "training"]], "Transform": [[965, "transform"]], "sklearn.utils.multiclass.unique_labels": [[926, "sklearn-utils-multiclass-unique-labels"]], "Choosing the right estimator": [[990, "choosing-the-right-estimator"]], "An introduction to machine learning with scikit-learn": [[988, "an-introduction-to-machine-learning-with-scikit-learn"]], "Section contents": [[988, null]], "Machine learning: the problem setting": [[988, "machine-learning-the-problem-setting"]], "Training set and testing set": [[988, null], [995, null]], "Loading an example dataset": [[988, "loading-an-example-dataset"]], "Shape of the data arrays": [[988, null]], "Loading from external datasets": [[988, null], [362, "loading-from-external-datasets"]], "Learning and predicting": [[988, "learning-and-predicting"]], "Choosing the parameters of the model": [[988, null]], "Conventions": [[988, "conventions"]], "Type casting": [[988, "type-casting"]], "Refitting and updating parameters": [[988, "refitting-and-updating-parameters"]], "Multiclass vs. multilabel fitting": [[988, "multiclass-vs-multilabel-fitting"]], "sklearn.utils.multiclass.is_multilabel": [[924, "sklearn-utils-multiclass-is-multilabel"]], "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [[939, "sklearn-utils-sparsefuncs-inplace-csr-column-scale"]], "Welcome to scikit-learn": [[980, "welcome-to-scikit-learn"]], "sklearn.utils.multiclass.type_of_target": [[925, "sklearn-utils-multiclass-type-of-target"]], "sklearn.utils.register_parallel_backend": [[932, "sklearn-utils-register-parallel-backend"]], "sklearn.utils.shuffle": [[936, "sklearn-utils-shuffle"]], "Examples using sklearn.utils.shuffle": [[936, "examples-using-sklearn-utils-shuffle"]], "sklearn.utils.validation.check_is_fitted": [[946, "sklearn-utils-validation-check-is-fitted"]], "Examples using sklearn.utils.validation.check_is_fitted": [[946, "examples-using-sklearn-utils-validation-check-is-fitted"]], "Linear Models": [[958, "linear-models"]], "Ordinary Least Squares": [[958, "ordinary-least-squares"]], "Non-Negative Least Squares": [[958, "non-negative-least-squares"]], "Ordinary Least Squares Complexity": [[958, "ordinary-least-squares-complexity"]], "Ridge regression and classification": [[958, "ridge-regression-and-classification"]], "Ridge Complexity": [[958, "ridge-complexity"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[958, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Lasso": [[958, "lasso"], [181, "lasso"]], "Setting regularization parameter": [[958, "setting-regularization-parameter"]], "Using cross-validation": [[958, "using-cross-validation"]], "Information-criteria based model selection": [[958, "information-criteria-based-model-selection"]], "Comparison with the regularization parameter of SVM": [[958, "comparison-with-the-regularization-parameter-of-svm"]], "Multi-task Lasso": [[958, "multi-task-lasso"]], "Elastic-Net": [[958, "elastic-net"]], "Multi-task Elastic-Net": [[958, "multi-task-elastic-net"]], "Least Angle Regression": [[958, "least-angle-regression"]], "LARS Lasso": [[958, "lars-lasso"]], "Orthogonal Matching Pursuit (OMP)": [[958, "orthogonal-matching-pursuit-omp"]], "Bayesian Regression": [[958, "bayesian-regression"]], "Bayesian Ridge Regression": [[958, "bayesian-ridge-regression"]], "Automatic Relevance Determination - ARD": [[958, "automatic-relevance-determination-ard"]], "Logistic regression": [[958, "logistic-regression"]], "Binary Case": [[958, "binary-case"]], "Multinomial Case": [[958, "multinomial-case"]], "Solvers": [[958, "solvers"]], "Differences from liblinear:": [[958, "liblinear-differences"]], "Generalized Linear Models": [[958, "generalized-linear-models"], [164, "generalized-linear-models"], [175, "generalized-linear-models"]], "Usage": [[958, "usage"], [393, "usage"], [393, "id1"], [390, "usage"], [399, "usage"], [399, "id26"], [399, "id31"], [399, "id32"], [399, "id34"], [363, "usage"], [363, "id2"]], "Practical considerations": [[958, "practical-considerations"]], "Stochastic Gradient Descent - SGD": [[958, "stochastic-gradient-descent-sgd"]], "Perceptron": [[958, "perceptron"]], "Passive Aggressive Algorithms": [[958, "passive-aggressive-algorithms"]], "Robustness regression: outliers and modeling errors": [[958, "robustness-regression-outliers-and-modeling-errors"]], "Different scenario and useful concepts": [[958, "different-scenario-and-useful-concepts"]], "Trade-offs: which estimator?": [[958, null]], "RANSAC: RANdom SAmple Consensus": [[958, "ransac-random-sample-consensus"]], "Details of the algorithm": [[958, "details-of-the-algorithm"]], "Theil-Sen estimator: generalized-median-based estimator": [[958, "theil-sen-estimator-generalized-median-based-estimator"]], "Theoretical considerations": [[958, "theoretical-considerations"]], "Huber Regression": [[958, "huber-regression"]], "Notes": [[958, "notes"], [393, "notes"], [357, "notes"]], "Quantile Regression": [[958, "quantile-regression"]], "Polynomial regression: extending linear models with basis functions": [[958, "polynomial-regression-extending-linear-models-with-basis-functions"]], "sklearn.utils.random.sample_without_replacement": [[931, "sklearn-utils-random-sample-without-replacement"]], "Novelty and Outlier Detection": [[968, "novelty-and-outlier-detection"]], "Overview of outlier detection methods": [[968, "overview-of-outlier-detection-methods"]], "Novelty Detection": [[968, "novelty-detection"]], "Scaling up the One-Class SVM": [[968, "scaling-up-the-one-class-svm"]], "Outlier Detection": [[968, "id1"]], "Fitting an elliptic envelope": [[968, "fitting-an-elliptic-envelope"]], "Isolation Forest": [[968, "isolation-forest"]], "Local Outlier Factor": [[968, "local-outlier-factor"]], "Novelty detection with Local Outlier Factor": [[968, "novelty-detection-with-local-outlier-factor"]], "Transforming the prediction target (y)": [[973, "transforming-the-prediction-target-y"]], "Label binarization": [[973, "label-binarization"]], "LabelBinarizer": [[973, "labelbinarizer"]], "MultiLabelBinarizer": [[973, "multilabelbinarizer"]], "Label encoding": [[973, "label-encoding"]], "sklearn.utils.parallel_backend": [[930, "sklearn-utils-parallel-backend"]], "Isotonic regression": [[953, "isotonic-regression"]], "sklearn.utils.resample": [[933, "sklearn-utils-resample"]], "Metrics and scoring: quantifying the quality of predictions": [[962, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "The scoring parameter: defining model evaluation rules": [[962, "the-scoring-parameter-defining-model-evaluation-rules"]], "Common cases: predefined values": [[962, "common-cases-predefined-values"]], "Defining your scoring strategy from metric functions": [[962, "defining-your-scoring-strategy-from-metric-functions"]], "Implementing your own scoring object": [[962, "implementing-your-own-scoring-object"]], "Using multiple metric evaluation": [[962, "using-multiple-metric-evaluation"]], "Classification metrics": [[962, "classification-metrics"], [391, "classification-metrics"]], "From binary to multiclass and multilabel": [[962, "from-binary-to-multiclass-and-multilabel"]], "Accuracy score": [[962, "accuracy-score"]], "Example:": [[962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [974, null], [995, null]], "Top-k accuracy score": [[962, "top-k-accuracy-score"]], "Balanced accuracy score": [[962, "balanced-accuracy-score"]], "Cohen\u2019s kappa": [[962, "cohen-s-kappa"]], "Confusion matrix": [[962, "confusion-matrix"], [251, "confusion-matrix"]], "Classification report": [[962, "classification-report"]], "Hamming loss": [[962, "hamming-loss"]], "Precision, recall and F-measures": [[962, "precision-recall-and-f-measures"]], "Binary classification": [[962, "binary-classification"]], "Multiclass and multilabel classification": [[962, "multiclass-and-multilabel-classification"]], "Jaccard similarity coefficient score": [[962, "jaccard-similarity-coefficient-score"]], "Hinge loss": [[962, "hinge-loss"]], "Log loss": [[962, "log-loss"]], "Matthews correlation coefficient": [[962, "matthews-correlation-coefficient"]], "Multi-label confusion matrix": [[962, "multi-label-confusion-matrix"]], "Receiver operating characteristic (ROC)": [[962, "receiver-operating-characteristic-roc"]], "Binary case": [[962, "binary-case"]], "Multi-class case": [[962, "multi-class-case"]], "Multi-label case": [[962, "multi-label-case"]], "Detection error tradeoff (DET)": [[962, "detection-error-tradeoff-det"]], "Zero one loss": [[962, "zero-one-loss"]], "Brier score loss": [[962, "brier-score-loss"]], "Class likelihood ratios": [[962, "class-likelihood-ratios"]], "Multilabel ranking metrics": [[962, "multilabel-ranking-metrics"], [391, "multilabel-ranking-metrics"]], "Coverage error": [[962, "coverage-error"]], "Label ranking average precision": [[962, "label-ranking-average-precision"]], "Ranking loss": [[962, "ranking-loss"]], "Normalized Discounted Cumulative Gain": [[962, "normalized-discounted-cumulative-gain"]], "Regression metrics": [[962, "regression-metrics"], [391, "regression-metrics"]], "R\u00b2 score, the coefficient of determination": [[962, "r2-score-the-coefficient-of-determination"]], "Mean absolute error": [[962, "mean-absolute-error"]], "Mean squared error": [[962, "mean-squared-error"]], "Mean squared logarithmic error": [[962, "mean-squared-logarithmic-error"]], "Mean absolute percentage error": [[962, "mean-absolute-percentage-error"]], "Median absolute error": [[962, "median-absolute-error"]], "Max error": [[962, "max-error"]], "Explained variance score": [[962, "explained-variance-score"]], "Link to R\u00b2 score, the coefficient of determination": [[962, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[962, "mean-poisson-gamma-and-tweedie-deviances"]], "Pinball loss": [[962, "pinball-loss"]], "D\u00b2 score": [[962, "d2-score"]], "D\u00b2 Tweedie score": [[962, "d2-tweedie-score"]], "D\u00b2 pinball score": [[962, "d2-pinball-score"]], "D\u00b2 absolute error score": [[962, "d2-absolute-error-score"]], "Visual evaluation of regression models": [[962, "visual-evaluation-of-regression-models"]], "Clustering metrics": [[962, "clustering-metrics"], [391, "clustering-metrics"]], "Dummy estimators": [[962, "dummy-estimators"]], "sklearn.utils.sparsefuncs.mean_variance_axis": [[943, "sklearn-utils-sparsefuncs-mean-variance-axis"]], "Unsupervised dimensionality reduction": [[979, "unsupervised-dimensionality-reduction"]], "Pipelining": [[979, null], [993, "pipelining"]], "PCA: principal component analysis": [[979, "pca-principal-component-analysis"]], "Random projections": [[979, "random-projections"]], "Feature scaling": [[979, null]], "sklearn.utils.parallel.delayed": [[929, "sklearn-utils-parallel-delayed"]], "sklearn.utils.sparsefuncs.inplace_column_scale": [[938, "sklearn-utils-sparsefuncs-inplace-column-scale"]], "sklearn.utils.validation.check_memory": [[947, "sklearn-utils-validation-check-memory"]], "Validation curves: plotting scores to evaluate models": [[957, "validation-curves-plotting-scores-to-evaluate-models"]], "Validation curve": [[957, "validation-curve"]], "Learning curve": [[957, "learning-curve"]], "Neural network models (unsupervised)": [[967, "neural-network-models-unsupervised"]], "Restricted Boltzmann machines": [[967, "restricted-boltzmann-machines"]], "Graphical model and parametrization": [[967, "graphical-model-and-parametrization"]], "Bernoulli Restricted Boltzmann machines": [[967, "bernoulli-restricted-boltzmann-machines"]], "Stochastic Maximum Likelihood learning": [[967, "stochastic-maximum-likelihood-learning"]], "sklearn.utils.sparsefuncs.inplace_swap_column": [[941, "sklearn-utils-sparsefuncs-inplace-swap-column"]], "sklearn.utils.safe_sqr": [[935, "sklearn-utils-safe-sqr"]], "Random Projection": [[974, "random-projection"]], "The Johnson-Lindenstrauss lemma": [[974, "the-johnson-lindenstrauss-lemma"]], "Gaussian random projection": [[974, "gaussian-random-projection"]], "Sparse random projection": [[974, "sparse-random-projection"]], "Inverse Transform": [[974, "inverse-transform"]], "Roadmap": [[983, "id1"]], "Purpose of this document": [[983, "purpose-of-this-document"]], "Statement of purpose: Scikit-learn in 2018": [[983, "statement-of-purpose-scikit-learn-in-2018"]], "Architectural / general goals": [[983, "architectural-general-goals"]], "Subpackage-specific goals": [[983, "subpackage-specific-goals"]], "sklearn.utils.sparsefuncs.inplace_swap_row": [[942, "sklearn-utils-sparsefuncs-inplace-swap-row"]], "sklearn.utils.murmurhash3_32": [[927, "sklearn-utils-murmurhash3-32"]], "sklearn.utils.validation.check_symmetric": [[948, "sklearn-utils-validation-check-symmetric"]], "Univariate vs. Multivariate Imputation": [[952, "univariate-vs-multivariate-imputation"]], "Univariate feature imputation": [[952, "univariate-feature-imputation"]], "Multivariate feature imputation": [[952, "multivariate-feature-imputation"]], "Flexibility of IterativeImputer": [[952, "flexibility-of-iterativeimputer"]], "Multiple vs. Single Imputation": [[952, "multiple-vs-single-imputation"]], "Nearest neighbors imputation": [[952, "nearest-neighbors-imputation"]], "Keeping the number of features constants": [[952, "keeping-the-number-of-features-constants"]], "Marking imputed values": [[952, "marking-imputed-values"]], "Estimators that handle NaN values": [[952, "estimators-that-handle-nan-values"]], "Manifold learning": [[959, "manifold-learning"], [217, "manifold-learning"], [164, "manifold-learning"]], "Introduction": [[959, "introduction"]], "Isomap": [[959, "isomap"]], "Locally Linear Embedding": [[959, "locally-linear-embedding"]], "Modified Locally Linear Embedding": [[959, "modified-locally-linear-embedding"]], "Hessian Eigenmapping": [[959, "hessian-eigenmapping"]], "Spectral Embedding": [[959, "spectral-embedding"]], "Local Tangent Space Alignment": [[959, "local-tangent-space-alignment"]], "Multi-dimensional Scaling (MDS)": [[959, "multi-dimensional-scaling-mds"]], "Metric MDS": [[959, "metric-mds"]], "Nonmetric MDS": [[959, "nonmetric-mds"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[959, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "Optimizing t-SNE": [[959, "optimizing-t-sne"]], "Barnes-Hut t-SNE": [[959, "barnes-hut-t-sne"]], "Pairwise metrics, Affinities and Kernels": [[960, "pairwise-metrics-affinities-and-kernels"]], "Cosine similarity": [[960, "cosine-similarity"]], "Linear kernel": [[960, "linear-kernel"], [995, "linear-kernel"]], "Polynomial kernel": [[960, "polynomial-kernel"], [995, "polynomial-kernel"]], "Sigmoid kernel": [[960, "sigmoid-kernel"]], "RBF kernel": [[960, "rbf-kernel"]], "Laplacian kernel": [[960, "laplacian-kernel"]], "Chi-squared kernel": [[960, "chi-squared-kernel"]], "Support": [[985, "support"]], "Mailing List": [[985, "mailing-list"]], "User questions": [[985, "user-questions"]], "Bug tracker": [[985, "bug-tracker"]], "Gitter": [[985, "gitter"]], "Documentation resources": [[985, "documentation-resources"]], "scikit-learn Tutorials": [[989, "scikit-learn-tutorials"]], "sklearn.utils.safe_mask": [[934, "sklearn-utils-safe-mask"]], "Supervised learning": [[984, "supervised-learning"]], "Who is using scikit-learn?": [[986, "who-is-using-scikit-learn"]], "J.P.Morgan": [[986, "id1"]], "Spotify": [[986, "id2"]], "Inria": [[986, "id3"]], "betaworks": [[986, "id4"]], "Hugging Face": [[986, "id5"]], "Evernote": [[986, "id6"]], "T\u00e9l\u00e9com ParisTech": [[986, "id7"]], "Booking.com": [[986, "id8"]], "AWeber": [[986, "id9"]], "Yhat": [[986, "id10"]], "Rangespan": [[986, "id11"]], "Birchbox": [[986, "id12"]], "Bestofmedia Group": [[986, "id13"]], "Change.org": [[986, "id14"]], "PHIMECA Engineering": [[986, "id15"]], "HowAboutWe": [[986, "id16"]], "PeerIndex": [[986, "id17"]], "DataRobot": [[986, "id18"]], "OkCupid": [[986, "id19"]], "Lovely": [[986, "id20"]], "Data Publica": [[986, "id21"]], "Machinalis": [[986, "id22"]], "solido": [[986, "id23"]], "INFONEA": [[986, "id24"]], "Dataiku": [[986, "id25"]], "Otto Group": [[986, "id26"]], "Zopa": [[986, "id27"]], "MARS": [[986, "id28"]], "BNP Paribas Cardif": [[986, "id29"]], "A tutorial on statistical-learning for scientific data processing": [[991, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "Statistical learning": [[991, null]], "sklearn.utils.metaestimators.if_delegate_has_method": [[923, "sklearn-utils-metaestimators-if-delegate-has-method"]], "Neural network models (supervised)": [[966, "neural-network-models-supervised"]], "Multi-layer Perceptron": [[966, "multi-layer-perceptron"]], "Regularization": [[966, "regularization"]], "Algorithms": [[966, "algorithms"]], "Tips on Practical Use": [[966, "tips-on-practical-use"], [976, "tips-on-practical-use"], [977, "tips-on-practical-use"]], "More control with warm_start": [[966, "more-control-with-warm-start"]], "Gaussian mixture models": [[961, "gaussian-mixture-models"]], "Gaussian Mixture": [[961, "gaussian-mixture"]], "Pros and cons of class GaussianMixture": [[961, "pros-and-cons-of-class-gaussianmixture"]], "Pros": [[961, "pros"], [961, "id2"]], "Cons": [[961, "cons"], [961, "id3"]], "Selecting the number of components in a classical Gaussian Mixture Model": [[961, "selecting-the-number-of-components-in-a-classical-gaussian-mixture-model"]], "Estimation algorithm Expectation-maximization": [[961, "estimation-algorithm-expectation-maximization"]], "Choice of the Initialization Method": [[961, "choice-of-the-initialization-method"]], "Variational Bayesian Gaussian Mixture": [[961, "variational-bayesian-gaussian-mixture"]], "Estimation algorithm: variational inference": [[961, "estimation-algorithm-variational-inference"]], "Pros and cons of variational inference with BayesianGaussianMixture": [[961, "pros-and-cons-of-variational-inference-with-bayesiangaussianmixture"]], "The Dirichlet Process": [[961, "the-dirichlet-process"]], "Multiclass and multioutput algorithms": [[963, "multiclass-and-multioutput-algorithms"]], "Multiclass classification": [[963, "multiclass-classification"], [995, null]], "Target format": [[963, "target-format"], [963, "id5"], [963, "id8"], [963, "id10"]], "OneVsRestClassifier": [[963, "onevsrestclassifier"]], "OneVsOneClassifier": [[963, "onevsoneclassifier"]], "OutputCodeClassifier": [[963, "outputcodeclassifier"]], "Multilabel classification": [[963, "multilabel-classification"], [233, "multilabel-classification"]], "MultiOutputClassifier": [[963, "multioutputclassifier"]], "ClassifierChain": [[963, "classifierchain"]], "Multiclass-multioutput classification": [[963, "multiclass-multioutput-classification"]], "Multioutput regression": [[963, "multioutput-regression"]], "MultiOutputRegressor": [[963, "multioutputregressor"]], "RegressorChain": [[963, "regressorchain"]], "Related Projects": [[982, "related-projects"]], "Interoperability and framework enhancements": [[982, "interoperability-and-framework-enhancements"]], "Other estimators and tasks": [[982, "other-estimators-and-tasks"]], "Statistical learning with Python": [[982, "statistical-learning-with-python"]], "Recommendation Engine packages": [[982, "recommendation-engine-packages"]], "Domain specific packages": [[982, "domain-specific-packages"]], "Translations of scikit-learn documentation": [[982, "translations-of-scikit-learn-documentation"]], "External Resources, Videos and Talks": [[981, "external-resources-videos-and-talks"]], "New to Scientific Python?": [[981, "new-to-scientific-python"]], "External Tutorials": [[981, "external-tutorials"]], "Videos": [[981, "videos"]], "Permutation feature importance": [[970, "permutation-feature-importance"]], "Outline of the permutation importance algorithm": [[970, "outline-of-the-permutation-importance-algorithm"]], "Relation to impurity-based importance in trees": [[970, "relation-to-impurity-based-importance-in-trees"]], "Misleading values on strongly correlated features": [[970, "misleading-values-on-strongly-correlated-features"]], "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [[937, "sklearn-utils-sparsefuncs-incr-mean-variance-axis"]], "Tuning the hyper-parameters of an estimator": [[951, "tuning-the-hyper-parameters-of-an-estimator"]], "Exhaustive Grid Search": [[951, "exhaustive-grid-search"]], "Randomized Parameter Optimization": [[951, "randomized-parameter-optimization"]], "Searching for optimal parameters with successive halving": [[951, "searching-for-optimal-parameters-with-successive-halving"]], "Choosing min_resources and the number of candidates": [[951, "choosing-min-resources-and-the-number-of-candidates"]], "Amount of resource and number of candidates at each iteration": [[951, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "Choosing a resource": [[951, "choosing-a-resource"]], "Exhausting the available resources": [[951, "exhausting-the-available-resources"]], "Aggressive elimination of candidates": [[951, "aggressive-elimination-of-candidates"]], "Analyzing results with the cv_results_ attribute": [[951, "analyzing-results-with-the-cv-results-attribute"]], "Tips for parameter search": [[951, "tips-for-parameter-search"]], "Specifying an objective metric": [[951, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[951, "specifying-multiple-metrics-for-evaluation"]], "Composite estimators and parameter spaces": [[951, "composite-estimators-and-parameter-spaces"]], "Model selection: development and evaluation": [[951, "model-selection-development-and-evaluation"]], "Parallelism": [[951, "parallelism"], [356, "parallelism"]], "Robustness to failure": [[951, "robustness-to-failure"]], "Alternatives to brute force parameter search": [[951, "alternatives-to-brute-force-parameter-search"]], "Model specific cross-validation": [[951, "model-specific-cross-validation"]], "Information Criterion": [[951, "information-criterion"]], "Out of Bag Estimates": [[951, "out-of-bag-estimates"]], "sklearn.utils.validation.column_or_1d": [[949, "sklearn-utils-validation-column-or-1d"]], "sklearn.utils.parallel.Parallel": [[928, "sklearn-utils-parallel-parallel"]], "Naive Bayes": [[964, "naive-bayes"]], "Multinomial Naive Bayes": [[964, "multinomial-naive-bayes"]], "Complement Naive Bayes": [[964, "complement-naive-bayes"]], "Bernoulli Naive Bayes": [[964, "bernoulli-naive-bayes"]], "Categorical Naive Bayes": [[964, "categorical-naive-bayes"]], "Out-of-core naive Bayes model fitting": [[964, "out-of-core-naive-bayes-model-fitting"]], "Stochastic Gradient Descent": [[976, "stochastic-gradient-descent"]], "Online One-Class SVM": [[976, "online-one-class-svm"], [310, "online-one-class-svm"]], "Stochastic Gradient Descent for sparse data": [[976, "stochastic-gradient-descent-for-sparse-data"]], "Stopping criterion": [[976, "stopping-criterion"]], "SGD": [[976, "id5"]], "Implementation details": [[976, "implementation-details"], [977, "implementation-details"], [400, "implementation-details"]], "sklearn.utils.sparsefuncs.inplace_row_scale": [[940, "sklearn-utils-sparsefuncs-inplace-row-scale"]], "Support Vector Machines": [[977, "support-vector-machines"], [322, "support-vector-machines"], [164, "support-vector-machines"]], "Multi-class classification": [[977, "multi-class-classification"]], "Scores and probabilities": [[977, "scores-and-probabilities"]], "Unbalanced problems": [[977, "unbalanced-problems"]], "Density estimation, novelty detection": [[977, "density-estimation-novelty-detection"]], "Kernel functions": [[977, "kernel-functions"]], "Parameters of the RBF Kernel": [[977, "parameters-of-the-rbf-kernel"]], "Custom Kernels": [[977, "custom-kernels"]], "Using Python functions as kernels": [[977, "using-python-functions-as-kernels"]], "Using the Gram matrix": [[977, "using-the-gram-matrix"]], "SVC": [[977, "svc"]], "LinearSVC": [[977, "linearsvc"]], "NuSVC": [[977, "nusvc"]], "SVR": [[977, "svr"]], "LinearSVR": [[977, "linearsvr"]], "Putting it all together": [[993, "putting-it-all-together"]], "Face recognition with eigenfaces": [[993, "face-recognition-with-eigenfaces"]], "Open problem: Stock Market Structure": [[993, "open-problem-stock-market-structure"]], "Kernel ridge regression": [[955, "kernel-ridge-regression"]], "Partial Dependence and Individual Conditional Expectation plots": [[969, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[969, "partial-dependence-plots"]], "Individual conditional expectation (ICE) plot": [[969, "individual-conditional-expectation-ice-plot"]], "Mathematical Definition": [[969, "mathematical-definition"]], "Computation methods": [[969, "computation-methods"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1": [[944, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l1"]], "Version 1.1.3": [[1018, "version-1-1-3"]], "Version 1.1.2": [[1018, "version-1-1-2"]], "Changed models": [[1018, "changed-models"], [1018, "id6"], [1014, "changed-models"], [1016, "changed-models"], [1019, "changed-models"], [1019, "id1"], [1019, "id6"], [1011, "changed-models"], [1020, "changed-models"], [1013, "changed-models"], [1013, "id6"], [1012, "changed-models"], [1012, "id9"], [1012, "id22"], [1015, "changed-models"], [1015, "id3"], [1017, "changed-models"]], "Changelog": [[1018, "changelog"], [1018, "id1"], [1018, "id7"], [1006, "changelog"], [1004, "changelog"], [1004, "id1"], [1004, "id3"], [1004, "id6"], [1004, "id9"], [1004, "id12"], [1004, "id14"], [1004, "id16"], [1004, "id18"], [1004, "id19"], [1007, "changelog"], [1014, "changelog"], [1014, "id1"], [1014, "id4"], [1005, "changelog"], [1005, "id1"], [1010, "changelog"], [1010, "id1"], [1010, "id2"], [1016, "changelog"], [1016, "id1"], [1016, "id4"], [1019, "changelog"], [1019, "id3"], [1019, "id8"], [1009, "changelog"], [1009, "id1"], [1011, "changelog"], [1011, "id1"], [1020, "changelog"], [1013, "changelog"], [1013, "id1"], [1013, "id2"], [1013, "id7"], [1008, "changelog"], [1008, "id1"], [1012, "changelog"], [1012, "id1"], [1012, "id5"], [1012, "id10"], [1012, "id23"], [1015, "changelog"], [1015, "id1"], [1015, "id4"], [1017, "changelog"], [1017, "id1"], [1017, "id7"]], "sklearn.base": [[1018, "sklearn-base"], [1014, "sklearn-base"], [1016, "sklearn-base"], [1019, "sklearn-base"], [1019, "id9"], [1020, "sklearn-base"], [1013, "sklearn-base"], [1017, "sklearn-base"]], "sklearn.cluster": [[1018, "sklearn-cluster"], [1018, "id8"], [1014, "sklearn-cluster"], [1014, "id5"], [1016, "sklearn-cluster"], [1019, "sklearn-cluster"], [1019, "id11"], [1020, "sklearn-cluster"], [1013, "sklearn-cluster"], [1013, "id8"], [1012, "sklearn-cluster"], [1012, "id2"], [1012, "id11"], [1012, "id24"], [1015, "sklearn-cluster"], [1015, "id2"], [1015, "id5"], [1017, "sklearn-cluster"], [1017, "id2"], [1017, "id9"]], "sklearn.feature_selection": [[1018, "sklearn-feature-selection"], [1018, "id2"], [1018, "id11"], [1014, "sklearn-feature-selection"], [1016, "sklearn-feature-selection"], [1019, "sklearn-feature-selection"], [1019, "id15"], [1020, "sklearn-feature-selection"], [1012, "sklearn-feature-selection"], [1015, "sklearn-feature-selection"], [1017, "sklearn-feature-selection"], [1017, "id14"]], "sklearn.impute": [[1018, "sklearn-impute"], [1018, "id12"], [1014, "sklearn-impute"], [1014, "id6"], [1016, "sklearn-impute"], [1019, "sklearn-impute"], [1020, "sklearn-impute"], [1013, "sklearn-impute"], [1013, "id13"], [1012, "sklearn-impute"], [1012, "id31"], [1015, "sklearn-impute"], [1017, "sklearn-impute"]], "sklearn.linear_model": [[1018, "sklearn-linear-model"], [1018, "id13"], [1014, "sklearn-linear-model"], [1016, "sklearn-linear-model"], [1016, "id10"], [1019, "sklearn-linear-model"], [1019, "id16"], [1013, "sklearn-linear-model"], [1013, "id15"], [1012, "sklearn-linear-model"], [1012, "id16"], [1012, "id32"], [1015, "sklearn-linear-model"], [1015, "id9"], [1017, "sklearn-linear-model"], [1017, "id4"], [1017, "id15"]], "sklearn.manifold": [[1018, "sklearn-manifold"], [1018, "id14"], [1014, "sklearn-manifold"], [1016, "sklearn-manifold"], [1019, "sklearn-manifold"], [1019, "id17"], [1013, "sklearn-manifold"], [1012, "sklearn-manifold"], [1015, "sklearn-manifold"], [1017, "sklearn-manifold"], [1017, "id16"]], "sklearn.metrics": [[1018, "sklearn-metrics"], [1018, "id3"], [1018, "id15"], [1014, "sklearn-metrics"], [1014, "id2"], [1014, "id8"], [1016, "sklearn-metrics"], [1016, "id2"], [1016, "id11"], [1019, "sklearn-metrics"], [1020, "sklearn-metrics"], [1013, "sklearn-metrics"], [1013, "id4"], [1013, "id16"], [1012, "sklearn-metrics"], [1012, "id17"], [1012, "id33"], [1015, "sklearn-metrics"], [1015, "id10"], [1017, "sklearn-metrics"], [1017, "id17"]], "sklearn.preprocessing": [[1018, "sklearn-preprocessing"], [1018, "id4"], [1018, "id16"], [1014, "sklearn-preprocessing"], [1014, "id12"], [1016, "sklearn-preprocessing"], [1016, "id14"], [1019, "sklearn-preprocessing"], [1019, "id20"], [1020, "sklearn-preprocessing"], [1013, "sklearn-preprocessing"], [1013, "id18"], [1012, "sklearn-preprocessing"], [1012, "id19"], [1012, "id37"], [1015, "sklearn-preprocessing"], [1017, "sklearn-preprocessing"], [1017, "id20"]], "sklearn.tree": [[1018, "sklearn-tree"], [1018, "id5"], [1018, "id17"], [1014, "sklearn-tree"], [1016, "sklearn-tree"], [1016, "id16"], [1019, "sklearn-tree"], [1019, "id21"], [1020, "sklearn-tree"], [1013, "sklearn-tree"], [1013, "id19"], [1012, "sklearn-tree"], [1015, "sklearn-tree"], [1017, "sklearn-tree"], [1017, "id22"]], "Version 1.1.1": [[1018, "version-1-1-1"]], "sklearn.datasets": [[1018, "sklearn-datasets"], [1018, "id9"], [1014, "sklearn-datasets"], [1016, "sklearn-datasets"], [1019, "sklearn-datasets"], [1019, "id12"], [1013, "sklearn-datasets"], [1013, "id10"], [1012, "sklearn-datasets"], [1012, "id13"], [1012, "id27"], [1015, "sklearn-datasets"], [1017, "sklearn-datasets"], [1017, "id10"]], "sklearn.decomposition": [[1018, "sklearn-decomposition"], [1018, "id10"], [1014, "sklearn-decomposition"], [1016, "sklearn-decomposition"], [1016, "id7"], [1019, "sklearn-decomposition"], [1019, "id13"], [1020, "sklearn-decomposition"], [1013, "sklearn-decomposition"], [1013, "id11"], [1012, "sklearn-decomposition"], [1012, "id4"], [1012, "id14"], [1012, "id28"], [1015, "sklearn-decomposition"], [1015, "id6"], [1017, "sklearn-decomposition"], [1017, "id11"]], "sklearn.utils": [[1018, "sklearn-utils"], [1018, "id18"], [1014, "sklearn-utils"], [1014, "id14"], [1016, "sklearn-utils"], [1016, "id17"], [1019, "sklearn-utils"], [1019, "id5"], [1019, "id22"], [1020, "sklearn-utils"], [1013, "sklearn-utils"], [1012, "sklearn-utils"], [1012, "id20"], [1012, "id39"], [1015, "sklearn-utils"], [1015, "id12"], [1017, "sklearn-utils"], [1017, "id6"], [1017, "id23"]], "Version 1.1.0": [[1018, "version-1-1-0"]], "Legend for changelogs": [[1018, "legend-for-changelogs"], [1014, "legend-for-changelogs"], [1016, "legend-for-changelogs"], [1019, "legend-for-changelogs"], [1020, "legend-for-changelogs"], [1013, "legend-for-changelogs"], [1015, "legend-for-changelogs"], [1017, "legend-for-changelogs"]], "Minimal dependencies": [[1018, "minimal-dependencies"], [1017, "minimal-dependencies"]], "sklearn.calibration": [[1018, "sklearn-calibration"], [1014, "sklearn-calibration"], [1016, "sklearn-calibration"], [1019, "sklearn-calibration"], [1019, "id10"], [1013, "sklearn-calibration"], [1017, "sklearn-calibration"], [1017, "id8"]], "sklearn.compose": [[1018, "sklearn-compose"], [1014, "sklearn-compose"], [1016, "sklearn-compose"], [1016, "id5"], [1019, "sklearn-compose"], [1013, "sklearn-compose"], [1013, "id9"], [1012, "sklearn-compose"], [1012, "id3"], [1012, "id6"], [1012, "id12"], [1012, "id25"], [1015, "sklearn-compose"], [1017, "sklearn-compose"]], "sklearn.covariance": [[1018, "sklearn-covariance"], [1016, "sklearn-covariance"], [1012, "sklearn-covariance"], [1012, "id26"], [1017, "sklearn-covariance"]], "sklearn.cross_decomposition": [[1018, "sklearn-cross-decomposition"], [1014, "sklearn-cross-decomposition"], [1016, "sklearn-cross-decomposition"], [1016, "id6"]], "sklearn.discriminant_analysis": [[1018, "sklearn-discriminant-analysis"], [1016, "sklearn-discriminant-analysis"], [1019, "sklearn-discriminant-analysis"], [1013, "sklearn-discriminant-analysis"], [1012, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[1018, "sklearn-dummy"], [1014, "sklearn-dummy"], [1013, "sklearn-dummy"], [1012, "sklearn-dummy"], [1017, "sklearn-dummy"]], "sklearn.ensemble": [[1018, "sklearn-ensemble"], [1014, "sklearn-ensemble"], [1016, "sklearn-ensemble"], [1016, "id8"], [1019, "sklearn-ensemble"], [1019, "id4"], [1019, "id14"], [1020, "sklearn-ensemble"], [1013, "sklearn-ensemble"], [1013, "id12"], [1012, "sklearn-ensemble"], [1012, "id29"], [1015, "sklearn-ensemble"], [1015, "id7"], [1017, "sklearn-ensemble"], [1017, "id3"], [1017, "id12"]], "sklearn.feature_extraction": [[1018, "sklearn-feature-extraction"], [1014, "sklearn-feature-extraction"], [1016, "sklearn-feature-extraction"], [1019, "sklearn-feature-extraction"], [1013, "sklearn-feature-extraction"], [1012, "sklearn-feature-extraction"], [1012, "id15"], [1012, "id30"], [1015, "sklearn-feature-extraction"], [1015, "id8"], [1017, "sklearn-feature-extraction"], [1017, "id13"]], "sklearn.gaussian_process": [[1018, "sklearn-gaussian-process"], [1014, "sklearn-gaussian-process"], [1016, "sklearn-gaussian-process"], [1016, "id9"], [1019, "sklearn-gaussian-process"], [1012, "sklearn-gaussian-process"], [1015, "sklearn-gaussian-process"], [1017, "sklearn-gaussian-process"]], "sklearn.inspection": [[1018, "sklearn-inspection"], [1014, "sklearn-inspection"], [1014, "id7"], [1016, "sklearn-inspection"], [1019, "sklearn-inspection"], [1013, "sklearn-inspection"], [1013, "id3"], [1013, "id14"], [1015, "sklearn-inspection"], [1015, "id11"], [1017, "sklearn-inspection"]], "sklearn.isotonic": [[1018, "sklearn-isotonic"], [1014, "sklearn-isotonic"], [1016, "sklearn-isotonic"], [1019, "sklearn-isotonic"], [1013, "sklearn-isotonic"], [1012, "sklearn-isotonic"]], "sklearn.kernel_approximation": [[1018, "sklearn-kernel-approximation"], [1014, "sklearn-kernel-approximation"], [1016, "sklearn-kernel-approximation"], [1019, "sklearn-kernel-approximation"], [1017, "sklearn-kernel-approximation"]], "sklearn.mixture": [[1018, "sklearn-mixture"], [1013, "sklearn-mixture"], [1012, "sklearn-mixture"], [1012, "id34"], [1017, "sklearn-mixture"]], "sklearn.model_selection": [[1018, "sklearn-model-selection"], [1014, "sklearn-model-selection"], [1014, "id9"], [1014, "id13"], [1016, "sklearn-model-selection"], [1016, "id12"], [1019, "sklearn-model-selection"], [1019, "id18"], [1013, "sklearn-model-selection"], [1012, "sklearn-model-selection"], [1012, "id35"], [1015, "sklearn-model-selection"], [1017, "sklearn-model-selection"]], "sklearn.multiclass": [[1018, "sklearn-multiclass"], [1016, "sklearn-multiclass"], [1013, "sklearn-multiclass"], [1017, "sklearn-multiclass"]], "sklearn.neighbors": [[1018, "sklearn-neighbors"], [1014, "sklearn-neighbors"], [1014, "id11"], [1016, "sklearn-neighbors"], [1019, "sklearn-neighbors"], [1020, "sklearn-neighbors"], [1013, "sklearn-neighbors"], [1013, "id5"], [1013, "id17"], [1012, "sklearn-neighbors"], [1012, "id7"], [1012, "id18"], [1012, "id36"], [1017, "sklearn-neighbors"], [1017, "id5"], [1017, "id18"]], "sklearn.neural_network": [[1018, "sklearn-neural-network"], [1014, "sklearn-neural-network"], [1016, "sklearn-neural-network"], [1019, "sklearn-neural-network"], [1019, "id19"], [1020, "sklearn-neural-network"], [1013, "sklearn-neural-network"], [1012, "sklearn-neural-network"], [1015, "sklearn-neural-network"], [1017, "sklearn-neural-network"]], "sklearn.pipeline": [[1018, "sklearn-pipeline"], [1014, "sklearn-pipeline"], [1016, "sklearn-pipeline"], [1019, "sklearn-pipeline"], [1020, "sklearn-pipeline"], [1013, "sklearn-pipeline"], [1012, "sklearn-pipeline"], [1015, "sklearn-pipeline"], [1017, "sklearn-pipeline"], [1017, "id19"]], "sklearn.random_projection": [[1018, "sklearn-random-projection"]], "sklearn.svm": [[1018, "sklearn-svm"], [1014, "sklearn-svm"], [1016, "sklearn-svm"], [1019, "sklearn-svm"], [1013, "sklearn-svm"], [1012, "sklearn-svm"], [1012, "id38"], [1015, "sklearn-svm"], [1017, "sklearn-svm"], [1017, "id21"]], "Code and Documentation Contributors": [[1018, "code-and-documentation-contributors"], [1014, "code-and-documentation-contributors"], [1016, "code-and-documentation-contributors"], [1019, "code-and-documentation-contributors"], [1011, "code-and-documentation-contributors"], [1011, "id9"], [1020, "code-and-documentation-contributors"], [1013, "code-and-documentation-contributors"], [1012, "code-and-documentation-contributors"], [1012, "id8"], [1012, "id21"], [1012, "id41"], [1015, "code-and-documentation-contributors"], [1017, "code-and-documentation-contributors"]], "Version 0.14": [[1006, "version-0-14"]], "API changes summary": [[1006, "api-changes-summary"], [1004, "api-changes-summary"], [1004, "id4"], [1004, "id7"], [1004, "id10"], [1007, "api-changes-summary"], [1005, "api-changes-summary"], [1010, "api-changes-summary"], [1010, "id5"], [1009, "api-changes-summary"], [1011, "api-changes-summary"], [1008, "api-changes-summary"]], "People": [[1006, "people"], [1004, "people"], [1004, "id2"], [1004, "id5"], [1004, "id8"], [1004, "id11"], [1004, "id13"], [1004, "id15"], [1004, "id17"], [1007, "people"], [1005, "people"], [1005, "id2"]], "Version 0.12.1": [[1004, "version-0-12-1"]], "Version 0.12": [[1004, "version-0-12"]], "Version 0.11": [[1004, "version-0-11"]], "Highlights": [[1004, "highlights"], [1007, "highlights"], [1011, "highlights"], [1008, "highlights"], [1012, "highlights"]], "Other changes": [[1004, "other-changes"]], "Version 0.10": [[1004, "version-0-10"]], "Version 0.9": [[1004, "version-0-9"]], "Version 0.8": [[1004, "version-0-8"]], "Version 0.7": [[1004, "version-0-7"]], "Version 0.6": [[1004, "version-0-6"]], "Version 0.5": [[1004, "version-0-5"]], "New classes": [[1004, "new-classes"]], "Documentation": [[1004, "documentation"], [368, "documentation"]], "Fixes": [[1004, "fixes"]], "External dependencies": [[1004, "external-dependencies"]], "Removed modules": [[1004, "removed-modules"]], "Misc": [[1004, "misc"]], "Version 0.4": [[1004, "version-0-4"]], "Earlier versions": [[1004, "earlier-versions"]], "Version 0.15.2": [[1007, "version-0-15-2"]], "Bug fixes": [[1007, "bug-fixes"], [1007, "id1"], [1007, "id2"], [1010, "bug-fixes"], [1010, "id4"], [1009, "bug-fixes"], [1009, "id2"], [1011, "bug-fixes"], [1011, "id3"], [1008, "bug-fixes"], [1008, "id2"]], "Version 0.15.1": [[1007, "version-0-15-1"]], "Version 0.15": [[1007, "version-0-15"]], "New features": [[1007, "new-features"], [1010, "new-features"], [1009, "new-features"], [1011, "new-features"], [1008, "new-features"]], "Enhancements": [[1007, "enhancements"], [1010, "enhancements"], [1010, "id3"], [1009, "enhancements"], [1011, "enhancements"], [1011, "id2"], [1008, "enhancements"]], "Documentation improvements": [[1007, "documentation-improvements"], [1008, "documentation-improvements"]], "Version 0.22.2.post1": [[1014, "version-0-22-2-post1"]], "Version 0.22.1": [[1014, "version-0-22-1"]], "sklearn.naive_bayes": [[1014, "sklearn-naive-bayes"], [1014, "id10"], [1016, "sklearn-naive-bayes"], [1019, "sklearn-naive-bayes"], [1020, "sklearn-naive-bayes"], [1012, "sklearn-naive-bayes"], [1015, "sklearn-naive-bayes"], [1017, "sklearn-naive-bayes"]], "sklearn.semi_supervised": [[1014, "sklearn-semi-supervised"], [1016, "sklearn-semi-supervised"], [1016, "id3"], [1016, "id15"], [1020, "sklearn-semi-supervised"], [1015, "sklearn-semi-supervised"]], "Version 0.22.0": [[1014, "version-0-22-0"]], "Website update": [[1014, "website-update"]], "Clear definition of the public API": [[1014, "clear-definition-of-the-public-api"]], "Deprecations: using FutureWarning from now on": [[1014, "deprecations-using-futurewarning-from-now-on"]], "sklearn.multioutput": [[1014, "sklearn-multioutput"], [1016, "sklearn-multioutput"], [1016, "id13"], [1019, "sklearn-multioutput"], [1013, "sklearn-multioutput"], [1012, "sklearn-multioutput"], [1015, "sklearn-multioutput"]], "Miscellaneous": [[1014, "miscellaneous"], [1016, "miscellaneous"], [1013, "miscellaneous"], [1012, "miscellaneous"], [1012, "id40"], [1015, "miscellaneous"], [1015, "id13"], [1017, "miscellaneous"], [391, "miscellaneous"], [225, "miscellaneous"], [164, "miscellaneous"]], "Changes to estimator checks": [[1014, "changes-to-estimator-checks"], [1013, "changes-to-estimator-checks"], [1012, "changes-to-estimator-checks"]], "Working With Text Data": [[997, "working-with-text-data"]], "Tutorial setup": [[997, "tutorial-setup"]], "Loading the 20 newsgroups dataset": [[997, "loading-the-20-newsgroups-dataset"]], "Extracting features from text files": [[997, "extracting-features-from-text-files"]], "Bags of words": [[997, "bags-of-words"]], "Tokenizing text with scikit-learn": [[997, "tokenizing-text-with-scikit-learn"]], "From occurrences to frequencies": [[997, "from-occurrences-to-frequencies"]], "Training a classifier": [[997, "training-a-classifier"]], "Building a pipeline": [[997, "building-a-pipeline"]], "Evaluation of the performance on the test set": [[997, "evaluation-of-the-performance-on-the-test-set"]], "Parameter tuning using grid search": [[997, "parameter-tuning-using-grid-search"]], "Exercises": [[997, "exercises"]], "Exercise 1: Language identification": [[997, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[997, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[997, "exercise-3-cli-text-classification-utility"]], "Where to from here": [[997, "where-to-from-here"]], "Version 0.13.1": [[1005, "version-0-13-1"]], "Version 0.13": [[1005, "version-0-13"]], "New Estimator Classes": [[1005, "new-estimator-classes"]], "Unsupervised learning": [[998, "unsupervised-learning"]], "Release History": [[1002, "release-history"]], "User Guide": [[999, "user-guide"]], "Version 0.18.2": [[1010, "version-0-18-2"]], "Last release with Python 2.6 support": [[1010, null], [1010, null]], "Code Contributors": [[1010, "code-contributors"], [1010, "id6"], [1009, "code-contributors"], [1008, "code-contributors"]], "Version 0.18.1": [[1010, "version-0-18-1"]], "Version 0.18": [[1010, "version-0-18"]], "Model Selection Enhancements and API Changes": [[1010, "model-selection-enhancements-and-api-changes"]], "Version 0.24.2": [[1016, "version-0-24-2"]], "feature_extraction": [[1016, "feature-extraction"]], "Version 0.24.1": [[1016, "version-0-24-1"]], "Packaging": [[1016, "packaging"]], "Version 0.24.0": [[1016, "version-0-24-0"]], "sklearn.exceptions": [[1016, "sklearn-exceptions"]], "Unsupervised learning: seeking representations of the data": [[996, "unsupervised-learning-seeking-representations-of-the-data"]], "Clustering: grouping observations together": [[996, "clustering-grouping-observations-together"]], "The problem solved in clustering": [[996, null]], "K-means clustering": [[996, "k-means-clustering"]], "Application example: vector quantization": [[996, null]], "Hierarchical agglomerative clustering: Ward": [[996, "hierarchical-agglomerative-clustering-ward"]], "Connectivity-constrained clustering": [[996, "connectivity-constrained-clustering"]], "transform and inverse_transform methods": [[996, null]], "Decompositions: from a signal to components and loadings": [[996, "decompositions-from-a-signal-to-components-and-loadings"]], "Components and loadings": [[996, null]], "Principal component analysis: PCA": [[996, "principal-component-analysis-pca"]], "Independent Component Analysis: ICA": [[996, "independent-component-analysis-ica"]], "Version 1.2.2": [[1019, "version-1-2-2"]], "Changes impacting all modules": [[1019, "changes-impacting-all-modules"], [1019, "id2"], [1019, "id7"], [1020, "changes-impacting-all-modules"]], "Version 1.2.1": [[1019, "version-1-2-1"]], "Version 1.2.0": [[1019, "version-1-2-0"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[995, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "The problem solved in supervised learning": [[995, null]], "Vocabulary: classification and regression": [[995, null]], "Nearest neighbor and the curse of dimensionality": [[995, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Classifying irises:": [[995, null]], "k-Nearest neighbors classifier": [[995, "k-nearest-neighbors-classifier"]], "The curse of dimensionality": [[995, "the-curse-of-dimensionality"]], "Linear model: from regression to sparsity": [[995, "linear-model-from-regression-to-sparsity"]], "Diabetes dataset": [[995, null], [365, "diabetes-dataset"]], "Linear regression": [[995, "linear-regression"]], "Shrinkage": [[995, "shrinkage"]], "Sparsity": [[995, "sparsity"], [400, "sparsity"]], "Different algorithms for the same problem": [[995, null]], "Shrinkage and sparsity with logistic regression": [[995, null]], "Support vector machines (SVMs)": [[995, "support-vector-machines-svms"]], "Linear SVMs": [[995, "linear-svms"]], "Using kernels": [[995, "using-kernels"]], "RBF kernel (Radial Basis Function)": [[995, "rbf-kernel-radial-basis-function"]], "Interactive example": [[995, null]], "Version 0.17.1": [[1009, "version-0-17-1"]], "Version 0.17": [[1009, "version-0-17"]], "Version 0.19.2": [[1011, "version-0-19-2"]], "Related changes": [[1011, "related-changes"]], "Version 0.19.1": [[1011, "version-0-19-1"]], "API changes": [[1011, "api-changes"]], "Version 0.19": [[1011, "version-0-19"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[994, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Datasets": [[994, "datasets"]], "A simple example shipped with scikit-learn: iris dataset": [[994, null]], "An example of reshaping data would be the digits dataset": [[994, null]], "Estimators objects": [[994, "estimators-objects"]], "Available documentation for Scikit-learn": [[1000, "available-documentation-for-scikit-learn"]], "Version 1.3.0": [[1020, "version-1-3-0"]], "sklearn.exception": [[1020, "sklearn-exception"]], "Version 0.21.3": [[1013, "version-0-21-3"]], "Version 0.21.2": [[1013, "version-0-21-2"]], "sklearn.utils.sparsefuncs": [[1013, "sklearn-utils-sparsefuncs"]], "Version 0.21.1": [[1013, "version-0-21-1"]], "Version 0.21.0": [[1013, "version-0-21-0"]], "Known Major Bugs": [[1013, "known-major-bugs"], [1012, "known-major-bugs"]], "sklearn.externals": [[1013, "sklearn-externals"]], "Multiple modules": [[1013, "multiple-modules"], [1012, "multiple-modules"]], "Version 0.16.1": [[1008, "version-0-16-1"]], "Version 0.16": [[1008, "version-0-16"]], "Visualizations": [[1001, "visualizations"]], "Available Plotting Utilities": [[1001, "available-plotting-utilities"]], "Display Objects": [[1001, "display-objects"]], "Version 0.20.4": [[1012, "version-0-20-4"]], "Version 0.20.3": [[1012, "version-0-20-3"]], "Version 0.20.2": [[1012, "version-0-20-2"]], "Version 0.20.1": [[1012, "version-0-20-1"]], "Version 0.20.0": [[1012, "version-0-20-0"]], "Version 0.23.2": [[1015, "version-0-23-2"]], "Version 0.23.1": [[1015, "version-0-23-1"]], "Version 0.23.0": [[1015, "version-0-23-0"]], "Enforcing keyword-only arguments": [[1015, "enforcing-keyword-only-arguments"], [1017, "enforcing-keyword-only-arguments"]], "Version 1.0.2": [[1017, "version-1-0-2"]], "Version 1.0.1": [[1017, "version-1-0-1"]], "Fixed models": [[1017, "fixed-models"]], "Version 1.0.0": [[1017, "version-1-0-0"]], "sklearn.utils.discovery.all_estimators": [[907, "sklearn-utils-discovery-all-estimators"]], "sklearn.preprocessing.robust_scale": [[868, "sklearn-preprocessing-robust-scale"]], "sklearn.random_projection.GaussianRandomProjection": [[870, "sklearn-random-projection-gaussianrandomprojection"]], "sklearn.preprocessing.OneHotEncoder": [[852, "sklearn-preprocessing-onehotencoder"]], "Examples using sklearn.preprocessing.OneHotEncoder": [[852, "examples-using-sklearn-preprocessing-onehotencoder"]], "sklearn.preprocessing.OrdinalEncoder": [[853, "sklearn-preprocessing-ordinalencoder"]], "Examples using sklearn.preprocessing.OrdinalEncoder": [[853, "examples-using-sklearn-preprocessing-ordinalencoder"]], "sklearn.tree.DecisionTreeClassifier": [[886, "sklearn-tree-decisiontreeclassifier"]], "Examples using sklearn.tree.DecisionTreeClassifier": [[886, "examples-using-sklearn-tree-decisiontreeclassifier"]], "sklearn.preprocessing.power_transform": [[866, "sklearn-preprocessing-power-transform"]], "sklearn.utils.estimator_html_repr": [[911, "sklearn-utils-estimator-html-repr"]], "sklearn.utils.extmath.fast_logdet": [[913, "sklearn-utils-extmath-fast-logdet"]], "sklearn.utils.metaestimators.available_if": [[922, "sklearn-utils-metaestimators-available-if"]], "Examples using sklearn.utils.metaestimators.available_if": [[922, "examples-using-sklearn-utils-metaestimators-available-if"]], "sklearn.set_config": [[876, "sklearn-set-config"]], "Examples using sklearn.set_config": [[876, "examples-using-sklearn-set-config"]], "sklearn.utils.extmath.safe_sparse_dot": [[916, "sklearn-utils-extmath-safe-sparse-dot"]], "sklearn.semi_supervised.LabelPropagation": [[873, "sklearn-semi-supervised-labelpropagation"]], "sklearn.tree.DecisionTreeRegressor": [[887, "sklearn-tree-decisiontreeregressor"]], "Examples using sklearn.tree.DecisionTreeRegressor": [[887, "examples-using-sklearn-tree-decisiontreeregressor"]], "sklearn.svm.NuSVC": [[880, "sklearn-svm-nusvc"]], "Examples using sklearn.svm.NuSVC": [[880, "examples-using-sklearn-svm-nusvc"]], "sklearn.random_projection.johnson_lindenstrauss_min_dim": [[872, "sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "Examples using sklearn.random_projection.johnson_lindenstrauss_min_dim": [[872, "examples-using-sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "sklearn.tree.export_text": [[891, "sklearn-tree-export-text"]], "sklearn.show_versions": [[877, "sklearn-show-versions"]], "sklearn.utils.indexable": [[921, "sklearn-utils-indexable"]], "sklearn.svm.NuSVR": [[881, "sklearn-svm-nusvr"]], "Examples using sklearn.svm.NuSVR": [[881, "examples-using-sklearn-svm-nusvr"]], "sklearn.preprocessing.binarize": [[861, "sklearn-preprocessing-binarize"]], "sklearn.svm.l1_min_c": [[885, "sklearn-svm-l1-min-c"]], "Examples using sklearn.svm.l1_min_c": [[885, "examples-using-sklearn-svm-l1-min-c"]], "sklearn.utils.assert_all_finite": [[897, "sklearn-utils-assert-all-finite"]], "sklearn.random_projection.SparseRandomProjection": [[871, "sklearn-random-projection-sparserandomprojection"]], "Examples using sklearn.random_projection.SparseRandomProjection": [[871, "examples-using-sklearn-random-projection-sparserandomprojection"]], "sklearn.utils.check_X_y": [[898, "sklearn-utils-check-x-y"]], "sklearn.utils.extmath.weighted_mode": [[917, "sklearn-utils-extmath-weighted-mode"]], "sklearn.utils.check_consistent_length": [[900, "sklearn-utils-check-consistent-length"]], "sklearn.utils.graph.single_source_shortest_path_length": [[920, "sklearn-utils-graph-single-source-shortest-path-length"]], "sklearn.utils._safe_indexing": [[894, "sklearn-utils-safe-indexing"]], "sklearn.utils.discovery.all_displays": [[906, "sklearn-utils-discovery-all-displays"]], "sklearn.utils.gen_even_slices": [[919, "sklearn-utils-gen-even-slices"]], "Examples using sklearn.utils.gen_even_slices": [[919, "examples-using-sklearn-utils-gen-even-slices"]], "sklearn.preprocessing.quantile_transform": [[867, "sklearn-preprocessing-quantile-transform"]], "Examples using sklearn.preprocessing.quantile_transform": [[867, "examples-using-sklearn-preprocessing-quantile-transform"]], "sklearn.preprocessing.label_binarize": [[862, "sklearn-preprocessing-label-binarize"]], "Examples using sklearn.preprocessing.label_binarize": [[862, "examples-using-sklearn-preprocessing-label-binarize"]], "sklearn.svm.SVC": [[883, "sklearn-svm-svc"]], "Examples using sklearn.svm.SVC": [[883, "examples-using-sklearn-svm-svc"]], "sklearn.semi_supervised.LabelSpreading": [[874, "sklearn-semi-supervised-labelspreading"]], "Examples using sklearn.semi_supervised.LabelSpreading": [[874, "examples-using-sklearn-semi-supervised-labelspreading"]], "sklearn.preprocessing.scale": [[869, "sklearn-preprocessing-scale"]], "sklearn.tree.plot_tree": [[892, "sklearn-tree-plot-tree"]], "Examples using sklearn.tree.plot_tree": [[892, "examples-using-sklearn-tree-plot-tree"]], "sklearn.utils.extmath.density": [[912, "sklearn-utils-extmath-density"]], "Examples using sklearn.utils.extmath.density": [[912, "examples-using-sklearn-utils-extmath-density"]], "sklearn.utils.check_array": [[899, "sklearn-utils-check-array"]], "sklearn.svm.LinearSVC": [[878, "sklearn-svm-linearsvc"]], "Examples using sklearn.svm.LinearSVC": [[878, "examples-using-sklearn-svm-linearsvc"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[875, "sklearn-semi-supervised-selftrainingclassifier"]], "Examples using sklearn.semi_supervised.SelfTrainingClassifier": [[875, "examples-using-sklearn-semi-supervised-selftrainingclassifier"]], "sklearn.utils.arrayfuncs.min_pos": [[895, "sklearn-utils-arrayfuncs-min-pos"]], "sklearn.preprocessing.PolynomialFeatures": [[854, "sklearn-preprocessing-polynomialfeatures"]], "Examples using sklearn.preprocessing.PolynomialFeatures": [[854, "examples-using-sklearn-preprocessing-polynomialfeatures"]], "sklearn.preprocessing.RobustScaler": [[857, "sklearn-preprocessing-robustscaler"]], "Examples using sklearn.preprocessing.RobustScaler": [[857, "examples-using-sklearn-preprocessing-robustscaler"]], "sklearn.preprocessing.minmax_scale": [[864, "sklearn-preprocessing-minmax-scale"]], "Examples using sklearn.preprocessing.minmax_scale": [[864, "examples-using-sklearn-preprocessing-minmax-scale"]], "sklearn.utils.class_weight.compute_class_weight": [[903, "sklearn-utils-class-weight-compute-class-weight"]], "sklearn.preprocessing.PowerTransformer": [[855, "sklearn-preprocessing-powertransformer"]], "Examples using sklearn.preprocessing.PowerTransformer": [[855, "examples-using-sklearn-preprocessing-powertransformer"]], "sklearn.tree.ExtraTreeClassifier": [[888, "sklearn-tree-extratreeclassifier"]], "sklearn.tree.export_graphviz": [[890, "sklearn-tree-export-graphviz"]], "sklearn.svm.OneClassSVM": [[882, "sklearn-svm-oneclasssvm"]], "Examples using sklearn.svm.OneClassSVM": [[882, "examples-using-sklearn-svm-oneclasssvm"]], "sklearn.utils.as_float_array": [[896, "sklearn-utils-as-float-array"]], "sklearn.utils.discovery.all_functions": [[908, "sklearn-utils-discovery-all-functions"]], "sklearn.preprocessing.maxabs_scale": [[863, "sklearn-preprocessing-maxabs-scale"]], "sklearn.utils.estimator_checks.check_estimator": [[909, "sklearn-utils-estimator-checks-check-estimator"]], "sklearn.utils.estimator_checks.parametrize_with_checks": [[910, "sklearn-utils-estimator-checks-parametrize-with-checks"]], "Examples using sklearn.utils.estimator_checks.parametrize_with_checks": [[910, "examples-using-sklearn-utils-estimator-checks-parametrize-with-checks"]], "sklearn.preprocessing.SplineTransformer": [[858, "sklearn-preprocessing-splinetransformer"]], "Examples using sklearn.preprocessing.SplineTransformer": [[858, "examples-using-sklearn-preprocessing-splinetransformer"]], "sklearn.preprocessing.StandardScaler": [[859, "sklearn-preprocessing-standardscaler"]], "Examples using sklearn.preprocessing.StandardScaler": [[859, "examples-using-sklearn-preprocessing-standardscaler"]], "sklearn.utils.check_scalar": [[902, "sklearn-utils-check-scalar"]], "sklearn.utils.check_random_state": [[901, "sklearn-utils-check-random-state"]], "Examples using sklearn.utils.check_random_state": [[901, "examples-using-sklearn-utils-check-random-state"]], "sklearn.preprocessing.add_dummy_feature": [[860, "sklearn-preprocessing-add-dummy-feature"]], "sklearn.preprocessing.normalize": [[865, "sklearn-preprocessing-normalize"]], "sklearn.tree.ExtraTreeRegressor": [[889, "sklearn-tree-extratreeregressor"]], "sklearn.utils.class_weight.compute_sample_weight": [[904, "sklearn-utils-class-weight-compute-sample-weight"]], "sklearn.preprocessing.QuantileTransformer": [[856, "sklearn-preprocessing-quantiletransformer"]], "Examples using sklearn.preprocessing.QuantileTransformer": [[856, "examples-using-sklearn-preprocessing-quantiletransformer"]], "sklearn.utils.extmath.randomized_range_finder": [[914, "sklearn-utils-extmath-randomized-range-finder"]], "sklearn.utils.gen_batches": [[918, "sklearn-utils-gen-batches"]], "sklearn.svm.SVR": [[884, "sklearn-svm-svr"]], "Examples using sklearn.svm.SVR": [[884, "examples-using-sklearn-svm-svr"]], "sklearn.utils.extmath.randomized_svd": [[915, "sklearn-utils-extmath-randomized-svd"]], "sklearn.utils.Bunch": [[893, "sklearn-utils-bunch"]], "Examples using sklearn.utils.Bunch": [[893, "examples-using-sklearn-utils-bunch"]], "sklearn.svm.LinearSVR": [[879, "sklearn-svm-linearsvr"]], "sklearn.utils.deprecated": [[905, "sklearn-utils-deprecated"]], "sklearn.neural_network.MLPRegressor": [[837, "sklearn-neural-network-mlpregressor"]], "Examples using sklearn.neural_network.MLPRegressor": [[837, "examples-using-sklearn-neural-network-mlpregressor"]], "sklearn.model_selection.RandomizedSearchCV": [[791, "sklearn-model-selection-randomizedsearchcv"]], "Examples using sklearn.model_selection.RandomizedSearchCV": [[791, "examples-using-sklearn-model-selection-randomizedsearchcv"]], "sklearn.model_selection.StratifiedGroupKFold": [[795, "sklearn-model-selection-stratifiedgroupkfold"]], "Examples using sklearn.model_selection.StratifiedGroupKFold": [[795, "examples-using-sklearn-model-selection-stratifiedgroupkfold"]], "sklearn.neighbors.sort_graph_by_row_values": [[834, "sklearn-neighbors-sort-graph-by-row-values"]], "sklearn.neural_network.BernoulliRBM": [[835, "sklearn-neural-network-bernoullirbm"]], "Examples using sklearn.neural_network.BernoulliRBM": [[835, "examples-using-sklearn-neural-network-bernoullirbm"]], "sklearn.model_selection.StratifiedKFold": [[796, "sklearn-model-selection-stratifiedkfold"]], "Examples using sklearn.model_selection.StratifiedKFold": [[796, "examples-using-sklearn-model-selection-stratifiedkfold"]], "sklearn.neighbors.KDTree": [[820, "sklearn-neighbors-kdtree"]], "sklearn.model_selection.permutation_test_score": [[804, "sklearn-model-selection-permutation-test-score"]], "Examples using sklearn.model_selection.permutation_test_score": [[804, "examples-using-sklearn-model-selection-permutation-test-score"]], "sklearn.preprocessing.MultiLabelBinarizer": [[850, "sklearn-preprocessing-multilabelbinarizer"]], "sklearn.model_selection.LeaveOneGroupOut": [[784, "sklearn-model-selection-leaveonegroupout"]], "sklearn.naive_bayes.CategoricalNB": [[815, "sklearn-naive-bayes-categoricalnb"]], "sklearn.model_selection.ParameterSampler": [[789, "sklearn-model-selection-parametersampler"]], "sklearn.model_selection.LearningCurveDisplay": [[783, "sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay": [[783, "examples-using-sklearn-model-selection-learningcurvedisplay"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[830, "sklearn-neighbors-radiusneighborsregressor"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[829, "sklearn-neighbors-radiusneighborsclassifier"]], "sklearn.model_selection.cross_val_predict": [[800, "sklearn-model-selection-cross-val-predict"]], "Examples using sklearn.model_selection.cross_val_predict": [[800, "examples-using-sklearn-model-selection-cross-val-predict"]], "sklearn.model_selection.PredefinedSplit": [[790, "sklearn-model-selection-predefinedsplit"]], "sklearn.preprocessing.Binarizer": [[842, "sklearn-preprocessing-binarizer"]], "sklearn.preprocessing.KernelCenterer": [[845, "sklearn-preprocessing-kernelcenterer"]], "sklearn.neighbors.radius_neighbors_graph": [[833, "sklearn-neighbors-radius-neighbors-graph"]], "sklearn.model_selection.KFold": [[782, "sklearn-model-selection-kfold"]], "Examples using sklearn.model_selection.KFold": [[782, "examples-using-sklearn-model-selection-kfold"]], "sklearn.model_selection.learning_curve": [[803, "sklearn-model-selection-learning-curve"]], "Examples using sklearn.model_selection.learning_curve": [[803, "examples-using-sklearn-model-selection-learning-curve"]], "sklearn.multiclass.OneVsOneClassifier": [[807, "sklearn-multiclass-onevsoneclassifier"]], "sklearn.model_selection.RepeatedKFold": [[792, "sklearn-model-selection-repeatedkfold"]], "Examples using sklearn.model_selection.RepeatedKFold": [[792, "examples-using-sklearn-model-selection-repeatedkfold"]], "sklearn.naive_bayes.MultinomialNB": [[818, "sklearn-naive-bayes-multinomialnb"]], "Examples using sklearn.naive_bayes.MultinomialNB": [[818, "examples-using-sklearn-naive-bayes-multinomialnb"]], "sklearn.pipeline.make_union": [[841, "sklearn-pipeline-make-union"]], "sklearn.model_selection.HalvingRandomSearchCV": [[781, "sklearn-model-selection-halvingrandomsearchcv"]], "Examples using sklearn.model_selection.HalvingRandomSearchCV": [[781, "examples-using-sklearn-model-selection-halvingrandomsearchcv"]], "sklearn.preprocessing.MinMaxScaler": [[849, "sklearn-preprocessing-minmaxscaler"]], "Examples using sklearn.preprocessing.MinMaxScaler": [[849, "examples-using-sklearn-preprocessing-minmaxscaler"]], "sklearn.neighbors.KNeighborsTransformer": [[823, "sklearn-neighbors-kneighborstransformer"]], "Examples using sklearn.neighbors.KNeighborsTransformer": [[823, "examples-using-sklearn-neighbors-kneighborstransformer"]], "sklearn.model_selection.StratifiedShuffleSplit": [[797, "sklearn-model-selection-stratifiedshufflesplit"]], "Examples using sklearn.model_selection.StratifiedShuffleSplit": [[797, "examples-using-sklearn-model-selection-stratifiedshufflesplit"]], "sklearn.preprocessing.LabelEncoder": [[847, "sklearn-preprocessing-labelencoder"]], "sklearn.model_selection.LeavePGroupsOut": [[786, "sklearn-model-selection-leavepgroupsout"]], "sklearn.neighbors.KNeighborsClassifier": [[821, "sklearn-neighbors-kneighborsclassifier"]], "Examples using sklearn.neighbors.KNeighborsClassifier": [[821, "examples-using-sklearn-neighbors-kneighborsclassifier"]], "sklearn.neighbors.BallTree": [[819, "sklearn-neighbors-balltree"]], "sklearn.multioutput.MultiOutputClassifier": [[811, "sklearn-multioutput-multioutputclassifier"]], "sklearn.neighbors.kneighbors_graph": [[832, "sklearn-neighbors-kneighbors-graph"]], "Examples using sklearn.neighbors.kneighbors_graph": [[832, "examples-using-sklearn-neighbors-kneighbors-graph"]], "sklearn.model_selection.cross_val_score": [[801, "sklearn-model-selection-cross-val-score"]], "Examples using sklearn.model_selection.cross_val_score": [[801, "examples-using-sklearn-model-selection-cross-val-score"]], "sklearn.model_selection.train_test_split": [[805, "sklearn-model-selection-train-test-split"]], "Examples using sklearn.model_selection.train_test_split": [[805, "examples-using-sklearn-model-selection-train-test-split"]], "sklearn.naive_bayes.GaussianNB": [[817, "sklearn-naive-bayes-gaussiannb"]], "Examples using sklearn.naive_bayes.GaussianNB": [[817, "examples-using-sklearn-naive-bayes-gaussiannb"]], "sklearn.neural_network.MLPClassifier": [[836, "sklearn-neural-network-mlpclassifier"]], "Examples using sklearn.neural_network.MLPClassifier": [[836, "examples-using-sklearn-neural-network-mlpclassifier"]], "sklearn.model_selection.LeaveOneOut": [[785, "sklearn-model-selection-leaveoneout"]], "sklearn.model_selection.validation_curve": [[806, "sklearn-model-selection-validation-curve"]], "Examples using sklearn.model_selection.validation_curve": [[806, "examples-using-sklearn-model-selection-validation-curve"]], "sklearn.multioutput.ClassifierChain": [[810, "sklearn-multioutput-classifierchain"]], "Examples using sklearn.multioutput.ClassifierChain": [[810, "examples-using-sklearn-multioutput-classifierchain"]], "sklearn.preprocessing.KBinsDiscretizer": [[844, "sklearn-preprocessing-kbinsdiscretizer"]], "Examples using sklearn.preprocessing.KBinsDiscretizer": [[844, "examples-using-sklearn-preprocessing-kbinsdiscretizer"]], "sklearn.preprocessing.MaxAbsScaler": [[848, "sklearn-preprocessing-maxabsscaler"]], "Examples using sklearn.preprocessing.MaxAbsScaler": [[848, "examples-using-sklearn-preprocessing-maxabsscaler"]], "sklearn.preprocessing.Normalizer": [[851, "sklearn-preprocessing-normalizer"]], "Examples using sklearn.preprocessing.Normalizer": [[851, "examples-using-sklearn-preprocessing-normalizer"]], "sklearn.preprocessing.LabelBinarizer": [[846, "sklearn-preprocessing-labelbinarizer"]], "Examples using sklearn.preprocessing.LabelBinarizer": [[846, "examples-using-sklearn-preprocessing-labelbinarizer"]], "sklearn.model_selection.ParameterGrid": [[788, "sklearn-model-selection-parametergrid"]], "sklearn.pipeline.Pipeline": [[839, "sklearn-pipeline-pipeline"]], "Examples using sklearn.pipeline.Pipeline": [[839, "examples-using-sklearn-pipeline-pipeline"]], "sklearn.pipeline.make_pipeline": [[840, "sklearn-pipeline-make-pipeline"]], "Examples using sklearn.pipeline.make_pipeline": [[840, "examples-using-sklearn-pipeline-make-pipeline"]], "sklearn.multioutput.RegressorChain": [[813, "sklearn-multioutput-regressorchain"]], "sklearn.neighbors.NearestNeighbors": [[827, "sklearn-neighbors-nearestneighbors"]], "Examples using sklearn.neighbors.NearestNeighbors": [[827, "examples-using-sklearn-neighbors-nearestneighbors"]], "sklearn.multiclass.OneVsRestClassifier": [[808, "sklearn-multiclass-onevsrestclassifier"]], "Examples using sklearn.multiclass.OneVsRestClassifier": [[808, "examples-using-sklearn-multiclass-onevsrestclassifier"]], "sklearn.neighbors.LocalOutlierFactor": [[825, "sklearn-neighbors-localoutlierfactor"]], "Examples using sklearn.neighbors.LocalOutlierFactor": [[825, "examples-using-sklearn-neighbors-localoutlierfactor"]], "sklearn.model_selection.check_cv": [[799, "sklearn-model-selection-check-cv"]], "sklearn.pipeline.FeatureUnion": [[838, "sklearn-pipeline-featureunion"]], "Examples using sklearn.pipeline.FeatureUnion": [[838, "examples-using-sklearn-pipeline-featureunion"]], "sklearn.model_selection.ShuffleSplit": [[794, "sklearn-model-selection-shufflesplit"]], "Examples using sklearn.model_selection.ShuffleSplit": [[794, "examples-using-sklearn-model-selection-shufflesplit"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[793, "sklearn-model-selection-repeatedstratifiedkfold"]], "Examples using sklearn.model_selection.RepeatedStratifiedKFold": [[793, "examples-using-sklearn-model-selection-repeatedstratifiedkfold"]], "sklearn.model_selection.cross_validate": [[802, "sklearn-model-selection-cross-validate"]], "Examples using sklearn.model_selection.cross_validate": [[802, "examples-using-sklearn-model-selection-cross-validate"]], "sklearn.neighbors.NearestCentroid": [[826, "sklearn-neighbors-nearestcentroid"]], "Examples using sklearn.neighbors.NearestCentroid": [[826, "examples-using-sklearn-neighbors-nearestcentroid"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[828, "sklearn-neighbors-neighborhoodcomponentsanalysis"]], "Examples using sklearn.neighbors.NeighborhoodComponentsAnalysis": [[828, "examples-using-sklearn-neighbors-neighborhoodcomponentsanalysis"]], "sklearn.preprocessing.FunctionTransformer": [[843, "sklearn-preprocessing-functiontransformer"]], "Examples using sklearn.preprocessing.FunctionTransformer": [[843, "examples-using-sklearn-preprocessing-functiontransformer"]], "sklearn.neighbors.KNeighborsRegressor": [[822, "sklearn-neighbors-kneighborsregressor"]], "Examples using sklearn.neighbors.KNeighborsRegressor": [[822, "examples-using-sklearn-neighbors-kneighborsregressor"]], "sklearn.naive_bayes.BernoulliNB": [[814, "sklearn-naive-bayes-bernoullinb"]], "Examples using sklearn.naive_bayes.BernoulliNB": [[814, "examples-using-sklearn-naive-bayes-bernoullinb"]], "sklearn.model_selection.LeavePOut": [[787, "sklearn-model-selection-leavepout"]], "sklearn.neighbors.KernelDensity": [[824, "sklearn-neighbors-kerneldensity"]], "Examples using sklearn.neighbors.KernelDensity": [[824, "examples-using-sklearn-neighbors-kerneldensity"]], "sklearn.naive_bayes.ComplementNB": [[816, "sklearn-naive-bayes-complementnb"]], "Examples using sklearn.naive_bayes.ComplementNB": [[816, "examples-using-sklearn-naive-bayes-complementnb"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[831, "sklearn-neighbors-radiusneighborstransformer"]], "sklearn.model_selection.TimeSeriesSplit": [[798, "sklearn-model-selection-timeseriessplit"]], "Examples using sklearn.model_selection.TimeSeriesSplit": [[798, "examples-using-sklearn-model-selection-timeseriessplit"]], "sklearn.multioutput.MultiOutputRegressor": [[812, "sklearn-multioutput-multioutputregressor"]], "Examples using sklearn.multioutput.MultiOutputRegressor": [[812, "examples-using-sklearn-multioutput-multioutputregressor"]], "sklearn.multiclass.OutputCodeClassifier": [[809, "sklearn-multiclass-outputcodeclassifier"]], "sklearn.metrics.jaccard_score": [[718, "sklearn-metrics-jaccard-score"]], "Examples using sklearn.metrics.jaccard_score": [[718, "examples-using-sklearn-metrics-jaccard-score"]], "sklearn.metrics.precision_score": [[764, "sklearn-metrics-precision-score"]], "Examples using sklearn.metrics.precision_score": [[764, "examples-using-sklearn-metrics-precision-score"]], "sklearn.metrics.pairwise.polynomial_kernel": [[755, "sklearn-metrics-pairwise-polynomial-kernel"]], "sklearn.metrics.label_ranking_average_precision_score": [[719, "sklearn-metrics-label-ranking-average-precision-score"]], "sklearn.metrics.pairwise.distance_metrics": [[742, "sklearn-metrics-pairwise-distance-metrics"]], "sklearn.metrics.pairwise.paired_cosine_distances": [[750, "sklearn-metrics-pairwise-paired-cosine-distances"]], "sklearn.metrics.pairwise.pairwise_kernels": [[754, "sklearn-metrics-pairwise-pairwise-kernels"]], "sklearn.metrics.mean_squared_log_error": [[731, "sklearn-metrics-mean-squared-log-error"]], "sklearn.metrics.fbeta_score": [[710, "sklearn-metrics-fbeta-score"]], "sklearn.metrics.pairwise.rbf_kernel": [[756, "sklearn-metrics-pairwise-rbf-kernel"]], "sklearn.metrics.roc_curve": [[769, "sklearn-metrics-roc-curve"]], "Examples using sklearn.metrics.roc_curve": [[769, "examples-using-sklearn-metrics-roc-curve"]], "sklearn.metrics.pairwise_distances_argmin_min": [[760, "sklearn-metrics-pairwise-distances-argmin-min"]], "sklearn.metrics.pairwise_distances": [[758, "sklearn-metrics-pairwise-distances"]], "Examples using sklearn.metrics.pairwise_distances": [[758, "examples-using-sklearn-metrics-pairwise-distances"]], "sklearn.mixture.GaussianMixture": [[776, "sklearn-mixture-gaussianmixture"]], "Examples using sklearn.mixture.GaussianMixture": [[776, "examples-using-sklearn-mixture-gaussianmixture"]], "sklearn.metrics.mean_gamma_deviance": [[727, "sklearn-metrics-mean-gamma-deviance"]], "sklearn.metrics.mean_absolute_error": [[725, "sklearn-metrics-mean-absolute-error"]], "Examples using sklearn.metrics.mean_absolute_error": [[725, "examples-using-sklearn-metrics-mean-absolute-error"]], "sklearn.metrics.pairwise.sigmoid_kernel": [[757, "sklearn-metrics-pairwise-sigmoid-kernel"]], "sklearn.metrics.roc_auc_score": [[768, "sklearn-metrics-roc-auc-score"]], "Examples using sklearn.metrics.roc_auc_score": [[768, "examples-using-sklearn-metrics-roc-auc-score"]], "sklearn.metrics.top_k_accuracy_score": [[772, "sklearn-metrics-top-k-accuracy-score"]], "sklearn.metrics.matthews_corrcoef": [[723, "sklearn-metrics-matthews-corrcoef"]], "sklearn.model_selection.GroupKFold": [[778, "sklearn-model-selection-groupkfold"]], "Examples using sklearn.model_selection.GroupKFold": [[778, "examples-using-sklearn-model-selection-groupkfold"]], "sklearn.metrics.pairwise.cosine_distances": [[740, "sklearn-metrics-pairwise-cosine-distances"]], "sklearn.metrics.recall_score": [[767, "sklearn-metrics-recall-score"]], "Examples using sklearn.metrics.recall_score": [[767, "examples-using-sklearn-metrics-recall-score"]], "sklearn.metrics.hinge_loss": [[715, "sklearn-metrics-hinge-loss"]], "sklearn.metrics.make_scorer": [[722, "sklearn-metrics-make-scorer"]], "Examples using sklearn.metrics.make_scorer": [[722, "examples-using-sklearn-metrics-make-scorer"]], "sklearn.metrics.pairwise.kernel_metrics": [[745, "sklearn-metrics-pairwise-kernel-metrics"]], "sklearn.metrics.pairwise.haversine_distances": [[744, "sklearn-metrics-pairwise-haversine-distances"]], "sklearn.metrics.label_ranking_loss": [[720, "sklearn-metrics-label-ranking-loss"]], "sklearn.metrics.mean_squared_error": [[730, "sklearn-metrics-mean-squared-error"]], "Examples using sklearn.metrics.mean_squared_error": [[730, "examples-using-sklearn-metrics-mean-squared-error"]], "sklearn.metrics.precision_recall_curve": [[762, "sklearn-metrics-precision-recall-curve"]], "Examples using sklearn.metrics.precision_recall_curve": [[762, "examples-using-sklearn-metrics-precision-recall-curve"]], "sklearn.metrics.mean_poisson_deviance": [[729, "sklearn-metrics-mean-poisson-deviance"]], "Examples using sklearn.metrics.mean_poisson_deviance": [[729, "examples-using-sklearn-metrics-mean-poisson-deviance"]], "sklearn.metrics.pairwise.linear_kernel": [[747, "sklearn-metrics-pairwise-linear-kernel"]], "sklearn.metrics.pairwise.laplacian_kernel": [[746, "sklearn-metrics-pairwise-laplacian-kernel"]], "sklearn.model_selection.GridSearchCV": [[777, "sklearn-model-selection-gridsearchcv"]], "Examples using sklearn.model_selection.GridSearchCV": [[777, "examples-using-sklearn-model-selection-gridsearchcv"]], "sklearn.metrics.zero_one_loss": [[774, "sklearn-metrics-zero-one-loss"]], "Examples using sklearn.metrics.zero_one_loss": [[774, "examples-using-sklearn-metrics-zero-one-loss"]], "sklearn.metrics.homogeneity_score": [[717, "sklearn-metrics-homogeneity-score"]], "Examples using sklearn.metrics.homogeneity_score": [[717, "examples-using-sklearn-metrics-homogeneity-score"]], "sklearn.metrics.silhouette_samples": [[770, "sklearn-metrics-silhouette-samples"]], "Examples using sklearn.metrics.silhouette_samples": [[770, "examples-using-sklearn-metrics-silhouette-samples"]], "sklearn.metrics.log_loss": [[721, "sklearn-metrics-log-loss"]], "Examples using sklearn.metrics.log_loss": [[721, "examples-using-sklearn-metrics-log-loss"]], "sklearn.metrics.normalized_mutual_info_score": [[737, "sklearn-metrics-normalized-mutual-info-score"]], "Examples using sklearn.metrics.normalized_mutual_info_score": [[737, "examples-using-sklearn-metrics-normalized-mutual-info-score"]], "sklearn.metrics.pairwise.manhattan_distances": [[748, "sklearn-metrics-pairwise-manhattan-distances"]], "sklearn.model_selection.HalvingGridSearchCV": [[780, "sklearn-model-selection-halvinggridsearchcv"]], "Examples using sklearn.model_selection.HalvingGridSearchCV": [[780, "examples-using-sklearn-model-selection-halvinggridsearchcv"]], "sklearn.metrics.r2_score": [[765, "sklearn-metrics-r2-score"]], "Examples using sklearn.metrics.r2_score": [[765, "examples-using-sklearn-metrics-r2-score"]], "sklearn.metrics.silhouette_score": [[771, "sklearn-metrics-silhouette-score"]], "Examples using sklearn.metrics.silhouette_score": [[771, "examples-using-sklearn-metrics-silhouette-score"]], "sklearn.metrics.pairwise.additive_chi2_kernel": [[738, "sklearn-metrics-pairwise-additive-chi2-kernel"]], "sklearn.metrics.pairwise_distances_chunked": [[761, "sklearn-metrics-pairwise-distances-chunked"]], "sklearn.metrics.mean_tweedie_deviance": [[732, "sklearn-metrics-mean-tweedie-deviance"]], "Examples using sklearn.metrics.mean_tweedie_deviance": [[732, "examples-using-sklearn-metrics-mean-tweedie-deviance"]], "sklearn.metrics.pairwise.chi2_kernel": [[739, "sklearn-metrics-pairwise-chi2-kernel"]], "sklearn.model_selection.GroupShuffleSplit": [[779, "sklearn-model-selection-groupshufflesplit"]], "Examples using sklearn.model_selection.GroupShuffleSplit": [[779, "examples-using-sklearn-model-selection-groupshufflesplit"]], "sklearn.metrics.mean_absolute_percentage_error": [[726, "sklearn-metrics-mean-absolute-percentage-error"]], "sklearn.metrics.pairwise.paired_euclidean_distances": [[752, "sklearn-metrics-pairwise-paired-euclidean-distances"]], "sklearn.metrics.precision_recall_fscore_support": [[763, "sklearn-metrics-precision-recall-fscore-support"]], "sklearn.metrics.fowlkes_mallows_score": [[711, "sklearn-metrics-fowlkes-mallows-score"]], "sklearn.metrics.pairwise.paired_manhattan_distances": [[753, "sklearn-metrics-pairwise-paired-manhattan-distances"]], "sklearn.metrics.mean_pinball_loss": [[728, "sklearn-metrics-mean-pinball-loss"]], "Examples using sklearn.metrics.mean_pinball_loss": [[728, "examples-using-sklearn-metrics-mean-pinball-loss"]], "sklearn.metrics.ndcg_score": [[736, "sklearn-metrics-ndcg-score"]], "sklearn.metrics.pairwise.paired_distances": [[751, "sklearn-metrics-pairwise-paired-distances"]], "sklearn.metrics.pairwise.nan_euclidean_distances": [[749, "sklearn-metrics-pairwise-nan-euclidean-distances"]], "sklearn.metrics.get_scorer_names": [[713, "sklearn-metrics-get-scorer-names"]], "sklearn.metrics.v_measure_score": [[773, "sklearn-metrics-v-measure-score"]], "Examples using sklearn.metrics.v_measure_score": [[773, "examples-using-sklearn-metrics-v-measure-score"]], "sklearn.metrics.median_absolute_error": [[733, "sklearn-metrics-median-absolute-error"]], "Examples using sklearn.metrics.median_absolute_error": [[733, "examples-using-sklearn-metrics-median-absolute-error"]], "sklearn.metrics.hamming_loss": [[714, "sklearn-metrics-hamming-loss"]], "Examples using sklearn.metrics.hamming_loss": [[714, "examples-using-sklearn-metrics-hamming-loss"]], "sklearn.metrics.pairwise_distances_argmin": [[759, "sklearn-metrics-pairwise-distances-argmin"]], "Examples using sklearn.metrics.pairwise_distances_argmin": [[759, "examples-using-sklearn-metrics-pairwise-distances-argmin"]], "sklearn.metrics.homogeneity_completeness_v_measure": [[716, "sklearn-metrics-homogeneity-completeness-v-measure"]], "sklearn.metrics.rand_score": [[766, "sklearn-metrics-rand-score"]], "Examples using sklearn.metrics.rand_score": [[766, "examples-using-sklearn-metrics-rand-score"]], "sklearn.metrics.mutual_info_score": [[735, "sklearn-metrics-mutual-info-score"]], "Examples using sklearn.metrics.mutual_info_score": [[735, "examples-using-sklearn-metrics-mutual-info-score"]], "sklearn.metrics.get_scorer": [[712, "sklearn-metrics-get-scorer"]], "sklearn.mixture.BayesianGaussianMixture": [[775, "sklearn-mixture-bayesiangaussianmixture"]], "Examples using sklearn.mixture.BayesianGaussianMixture": [[775, "examples-using-sklearn-mixture-bayesiangaussianmixture"]], "sklearn.metrics.pairwise.euclidean_distances": [[743, "sklearn-metrics-pairwise-euclidean-distances"]], "sklearn.metrics.multilabel_confusion_matrix": [[734, "sklearn-metrics-multilabel-confusion-matrix"]], "sklearn.metrics.max_error": [[724, "sklearn-metrics-max-error"]], "sklearn.metrics.pairwise.cosine_similarity": [[741, "sklearn-metrics-pairwise-cosine-similarity"]], "sklearn.metrics.d2_tweedie_score": [[704, "sklearn-metrics-d2-tweedie-score"]], "sklearn.metrics.auc": [[687, "sklearn-metrics-auc"]], "Examples using sklearn.metrics.auc": [[687, "examples-using-sklearn-metrics-auc"]], "sklearn.metrics.brier_score_loss": [[690, "sklearn-metrics-brier-score-loss"]], "Examples using sklearn.metrics.brier_score_loss": [[690, "examples-using-sklearn-metrics-brier-score-loss"]], "sklearn.metrics.classification_report": [[694, "sklearn-metrics-classification-report"]], "Examples using sklearn.metrics.classification_report": [[694, "examples-using-sklearn-metrics-classification-report"]], "sklearn.metrics.det_curve": [[707, "sklearn-metrics-det-curve"]], "Examples using sklearn.metrics.det_curve": [[707, "examples-using-sklearn-metrics-det-curve"]], "sklearn.linear_model.SGDRegressor": [[659, "sklearn-linear-model-sgdregressor"]], "Examples using sklearn.linear_model.SGDRegressor": [[659, "examples-using-sklearn-linear-model-sgdregressor"]], "sklearn.metrics.DistanceMetric": [[680, "sklearn-metrics-distancemetric"]], "sklearn.metrics.davies_bouldin_score": [[705, "sklearn-metrics-davies-bouldin-score"]], "sklearn.manifold.LocallyLinearEmbedding": [[670, "sklearn-manifold-locallylinearembedding"]], "Examples using sklearn.manifold.LocallyLinearEmbedding": [[670, "examples-using-sklearn-manifold-locallylinearembedding"]], "sklearn.metrics.average_precision_score": [[688, "sklearn-metrics-average-precision-score"]], "Examples using sklearn.metrics.average_precision_score": [[688, "examples-using-sklearn-metrics-average-precision-score"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[648, "sklearn-linear-model-passiveaggressiveregressor"]], "sklearn.linear_model.RidgeClassifier": [[655, "sklearn-linear-model-ridgeclassifier"]], "Examples using sklearn.linear_model.RidgeClassifier": [[655, "examples-using-sklearn-linear-model-ridgeclassifier"]], "sklearn.linear_model.orthogonal_mp_gram": [[667, "sklearn-linear-model-orthogonal-mp-gram"]], "sklearn.metrics.adjusted_rand_score": [[686, "sklearn-metrics-adjusted-rand-score"]], "Examples using sklearn.metrics.adjusted_rand_score": [[686, "examples-using-sklearn-metrics-adjusted-rand-score"]], "sklearn.metrics.balanced_accuracy_score": [[689, "sklearn-metrics-balanced-accuracy-score"]], "sklearn.manifold.Isomap": [[669, "sklearn-manifold-isomap"]], "Examples using sklearn.manifold.Isomap": [[669, "examples-using-sklearn-manifold-isomap"]], "sklearn.metrics.consensus_score": [[700, "sklearn-metrics-consensus-score"]], "Examples using sklearn.metrics.consensus_score": [[700, "examples-using-sklearn-metrics-consensus-score"]], "sklearn.linear_model.RidgeClassifierCV": [[656, "sklearn-linear-model-ridgeclassifiercv"]], "sklearn.manifold.trustworthiness": [[677, "sklearn-manifold-trustworthiness"]], "sklearn.metrics.PrecisionRecallDisplay": [[681, "sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay": [[681, "examples-using-sklearn-metrics-precisionrecalldisplay"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[646, "sklearn-linear-model-orthogonalmatchingpursuitcv"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuitCV": [[646, "examples-using-sklearn-linear-model-orthogonalmatchingpursuitcv"]], "sklearn.linear_model.RidgeCV": [[654, "sklearn-linear-model-ridgecv"]], "Examples using sklearn.linear_model.RidgeCV": [[654, "examples-using-sklearn-linear-model-ridgecv"]], "sklearn.linear_model.TheilSenRegressor": [[660, "sklearn-linear-model-theilsenregressor"]], "Examples using sklearn.linear_model.TheilSenRegressor": [[660, "examples-using-sklearn-linear-model-theilsenregressor"]], "sklearn.metrics.adjusted_mutual_info_score": [[685, "sklearn-metrics-adjusted-mutual-info-score"]], "Examples using sklearn.metrics.adjusted_mutual_info_score": [[685, "examples-using-sklearn-metrics-adjusted-mutual-info-score"]], "sklearn.manifold.smacof": [[675, "sklearn-manifold-smacof"]], "sklearn.metrics.class_likelihood_ratios": [[693, "sklearn-metrics-class-likelihood-ratios"]], "Examples using sklearn.metrics.class_likelihood_ratios": [[693, "examples-using-sklearn-metrics-class-likelihood-ratios"]], "sklearn.metrics.PredictionErrorDisplay": [[682, "sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay": [[682, "examples-using-sklearn-metrics-predictionerrordisplay"]], "sklearn.metrics.ConfusionMatrixDisplay": [[678, "sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay": [[678, "examples-using-sklearn-metrics-confusionmatrixdisplay"]], "sklearn.linear_model.RANSACRegressor": [[652, "sklearn-linear-model-ransacregressor"]], "Examples using sklearn.linear_model.RANSACRegressor": [[652, "examples-using-sklearn-linear-model-ransacregressor"]], "sklearn.linear_model.Perceptron": [[649, "sklearn-linear-model-perceptron"]], "Examples using sklearn.linear_model.Perceptron": [[649, "examples-using-sklearn-linear-model-perceptron"]], "sklearn.linear_model.PoissonRegressor": [[650, "sklearn-linear-model-poissonregressor"]], "Examples using sklearn.linear_model.PoissonRegressor": [[650, "examples-using-sklearn-linear-model-poissonregressor"]], "sklearn.linear_model.lasso_path": [[665, "sklearn-linear-model-lasso-path"]], "Examples using sklearn.linear_model.lasso_path": [[665, "examples-using-sklearn-linear-model-lasso-path"]], "sklearn.metrics.RocCurveDisplay": [[683, "sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay": [[683, "examples-using-sklearn-metrics-roccurvedisplay"]], "sklearn.metrics.DetCurveDisplay": [[679, "sklearn-metrics-detcurvedisplay"]], "sklearn.metrics.accuracy_score": [[684, "sklearn-metrics-accuracy-score"]], "Examples using sklearn.metrics.accuracy_score": [[684, "examples-using-sklearn-metrics-accuracy-score"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[642, "sklearn-linear-model-multitaskelasticnetcv"]], "sklearn.linear_model.enet_path": [[662, "sklearn-linear-model-enet-path"]], "Examples using sklearn.linear_model.enet_path": [[662, "examples-using-sklearn-linear-model-enet-path"]], "sklearn.manifold.locally_linear_embedding": [[674, "sklearn-manifold-locally-linear-embedding"]], "Examples using sklearn.manifold.locally_linear_embedding": [[674, "examples-using-sklearn-manifold-locally-linear-embedding"]], "sklearn.metrics.check_scoring": [[692, "sklearn-metrics-check-scoring"]], "sklearn.manifold.SpectralEmbedding": [[672, "sklearn-manifold-spectralembedding"]], "Examples using sklearn.manifold.SpectralEmbedding": [[672, "examples-using-sklearn-manifold-spectralembedding"]], "sklearn.linear_model.SGDClassifier": [[657, "sklearn-linear-model-sgdclassifier"]], "Examples using sklearn.linear_model.SGDClassifier": [[657, "examples-using-sklearn-linear-model-sgdclassifier"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[647, "sklearn-linear-model-passiveaggressiveclassifier"]], "Examples using sklearn.linear_model.PassiveAggressiveClassifier": [[647, "examples-using-sklearn-linear-model-passiveaggressiveclassifier"]], "sklearn.metrics.dcg_score": [[706, "sklearn-metrics-dcg-score"]], "sklearn.metrics.d2_absolute_error_score": [[702, "sklearn-metrics-d2-absolute-error-score"]], "sklearn.metrics.confusion_matrix": [[699, "sklearn-metrics-confusion-matrix"]], "Examples using sklearn.metrics.confusion_matrix": [[699, "examples-using-sklearn-metrics-confusion-matrix"]], "sklearn.metrics.completeness_score": [[698, "sklearn-metrics-completeness-score"]], "Examples using sklearn.metrics.completeness_score": [[698, "examples-using-sklearn-metrics-completeness-score"]], "sklearn.linear_model.lars_path": [[663, "sklearn-linear-model-lars-path"]], "Examples using sklearn.linear_model.lars_path": [[663, "examples-using-sklearn-linear-model-lars-path"]], "sklearn.metrics.d2_pinball_score": [[703, "sklearn-metrics-d2-pinball-score"]], "sklearn.metrics.cohen_kappa_score": [[697, "sklearn-metrics-cohen-kappa-score"]], "sklearn.metrics.cluster.contingency_matrix": [[695, "sklearn-metrics-cluster-contingency-matrix"]], "sklearn.manifold.MDS": [[671, "sklearn-manifold-mds"]], "Examples using sklearn.manifold.MDS": [[671, "examples-using-sklearn-manifold-mds"]], "sklearn.manifold.spectral_embedding": [[676, "sklearn-manifold-spectral-embedding"]], "sklearn.linear_model.lars_path_gram": [[664, "sklearn-linear-model-lars-path-gram"]], "sklearn.linear_model.MultiTaskElasticNet": [[641, "sklearn-linear-model-multitaskelasticnet"]], "sklearn.metrics.coverage_error": [[701, "sklearn-metrics-coverage-error"]], "sklearn.linear_model.ridge_regression": [[668, "sklearn-linear-model-ridge-regression"]], "sklearn.linear_model.LogisticRegression": [[639, "sklearn-linear-model-logisticregression"]], "Examples using sklearn.linear_model.LogisticRegression": [[639, "examples-using-sklearn-linear-model-logisticregression"]], "sklearn.linear_model.Ridge": [[653, "sklearn-linear-model-ridge"]], "Examples using sklearn.linear_model.Ridge": [[653, "examples-using-sklearn-linear-model-ridge"]], "sklearn.metrics.explained_variance_score": [[708, "sklearn-metrics-explained-variance-score"]], "sklearn.metrics.calinski_harabasz_score": [[691, "sklearn-metrics-calinski-harabasz-score"]], "sklearn.linear_model.MultiTaskLasso": [[643, "sklearn-linear-model-multitasklasso"]], "Examples using sklearn.linear_model.MultiTaskLasso": [[643, "examples-using-sklearn-linear-model-multitasklasso"]], "sklearn.linear_model.LogisticRegressionCV": [[640, "sklearn-linear-model-logisticregressioncv"]], "Examples using sklearn.linear_model.LogisticRegressionCV": [[640, "examples-using-sklearn-linear-model-logisticregressioncv"]], "sklearn.metrics.f1_score": [[709, "sklearn-metrics-f1-score"]], "Examples using sklearn.metrics.f1_score": [[709, "examples-using-sklearn-metrics-f1-score"]], "sklearn.linear_model.QuantileRegressor": [[651, "sklearn-linear-model-quantileregressor"]], "Examples using sklearn.linear_model.QuantileRegressor": [[651, "examples-using-sklearn-linear-model-quantileregressor"]], "sklearn.linear_model.TweedieRegressor": [[661, "sklearn-linear-model-tweedieregressor"]], "Examples using sklearn.linear_model.TweedieRegressor": [[661, "examples-using-sklearn-linear-model-tweedieregressor"]], "sklearn.linear_model.orthogonal_mp": [[666, "sklearn-linear-model-orthogonal-mp"]], "sklearn.metrics.cluster.pair_confusion_matrix": [[696, "sklearn-metrics-cluster-pair-confusion-matrix"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[645, "sklearn-linear-model-orthogonalmatchingpursuit"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuit": [[645, "examples-using-sklearn-linear-model-orthogonalmatchingpursuit"]], "sklearn.linear_model.MultiTaskLassoCV": [[644, "sklearn-linear-model-multitasklassocv"]], "sklearn.manifold.TSNE": [[673, "sklearn-manifold-tsne"]], "Examples using sklearn.manifold.TSNE": [[673, "examples-using-sklearn-manifold-tsne"]], "sklearn.linear_model.SGDOneClassSVM": [[658, "sklearn-linear-model-sgdoneclasssvm"]], "Examples using sklearn.linear_model.SGDOneClassSVM": [[658, "examples-using-sklearn-linear-model-sgdoneclasssvm"]], "sklearn.feature_selection.SelectFdr": [[576, "sklearn-feature-selection-selectfdr"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[623, "sklearn-kernel-approximation-skewedchi2sampler"]], "sklearn.linear_model.LassoLars": [[635, "sklearn-linear-model-lassolars"]], "sklearn.feature_selection.SelectPercentile": [[581, "sklearn-feature-selection-selectpercentile"]], "Examples using sklearn.feature_selection.SelectPercentile": [[581, "examples-using-sklearn-feature-selection-selectpercentile"]], "sklearn.feature_selection.RFE": [[574, "sklearn-feature-selection-rfe"]], "Examples using sklearn.feature_selection.RFE": [[574, "examples-using-sklearn-feature-selection-rfe"]], "sklearn.feature_selection.VarianceThreshold": [[584, "sklearn-feature-selection-variancethreshold"]], "sklearn.feature_selection.r_regression": [[590, "sklearn-feature-selection-r-regression"]], "sklearn.isotonic.isotonic_regression": [[618, "sklearn-isotonic-isotonic-regression"]], "sklearn.linear_model.BayesianRidge": [[626, "sklearn-linear-model-bayesianridge"]], "Examples using sklearn.linear_model.BayesianRidge": [[626, "examples-using-sklearn-linear-model-bayesianridge"]], "sklearn.feature_selection.SelectFromModel": [[578, "sklearn-feature-selection-selectfrommodel"]], "Examples using sklearn.feature_selection.SelectFromModel": [[578, "examples-using-sklearn-feature-selection-selectfrommodel"]], "sklearn.feature_selection.mutual_info_classif": [[588, "sklearn-feature-selection-mutual-info-classif"]], "Examples using sklearn.feature_selection.mutual_info_classif": [[588, "examples-using-sklearn-feature-selection-mutual-info-classif"]], "sklearn.kernel_approximation.Nystroem": [[620, "sklearn-kernel-approximation-nystroem"]], "Examples using sklearn.kernel_approximation.Nystroem": [[620, "examples-using-sklearn-kernel-approximation-nystroem"]], "sklearn.feature_selection.RFECV": [[575, "sklearn-feature-selection-rfecv"]], "Examples using sklearn.feature_selection.RFECV": [[575, "examples-using-sklearn-feature-selection-rfecv"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[594, "sklearn-gaussian-process-kernels-constantkernel"]], "Examples using sklearn.gaussian_process.kernels.ConstantKernel": [[594, "examples-using-sklearn-gaussian-process-kernels-constantkernel"]], "sklearn.kernel_approximation.RBFSampler": [[622, "sklearn-kernel-approximation-rbfsampler"]], "Examples using sklearn.kernel_approximation.RBFSampler": [[622, "examples-using-sklearn-kernel-approximation-rbfsampler"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[593, "sklearn-gaussian-process-kernels-compoundkernel"]], "sklearn.linear_model.Lasso": [[633, "sklearn-linear-model-lasso"]], "Examples using sklearn.linear_model.Lasso": [[633, "examples-using-sklearn-linear-model-lasso"]], "sklearn.gaussian_process.kernels.Product": [[602, "sklearn-gaussian-process-kernels-product"]], "sklearn.impute.SimpleImputer": [[611, "sklearn-impute-simpleimputer"]], "Examples using sklearn.impute.SimpleImputer": [[611, "examples-using-sklearn-impute-simpleimputer"]], "sklearn.gaussian_process.kernels.DotProduct": [[595, "sklearn-gaussian-process-kernels-dotproduct"]], "Examples using sklearn.gaussian_process.kernels.DotProduct": [[595, "examples-using-sklearn-gaussian-process-kernels-dotproduct"]], "sklearn.kernel_ridge.KernelRidge": [[624, "sklearn-kernel-ridge-kernelridge"]], "Examples using sklearn.kernel_ridge.KernelRidge": [[624, "examples-using-sklearn-kernel-ridge-kernelridge"]], "sklearn.inspection.permutation_importance": [[615, "sklearn-inspection-permutation-importance"]], "Examples using sklearn.inspection.permutation_importance": [[615, "examples-using-sklearn-inspection-permutation-importance"]], "sklearn.feature_extraction.text.CountVectorizer": [[569, "sklearn-feature-extraction-text-countvectorizer"]], "Examples using sklearn.feature_extraction.text.CountVectorizer": [[569, "examples-using-sklearn-feature-extraction-text-countvectorizer"]], "sklearn.feature_selection.SequentialFeatureSelector": [[583, "sklearn-feature-selection-sequentialfeatureselector"]], "Examples using sklearn.feature_selection.SequentialFeatureSelector": [[583, "examples-using-sklearn-feature-selection-sequentialfeatureselector"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[619, "sklearn-kernel-approximation-additivechi2sampler"]], "sklearn.linear_model.LinearRegression": [[638, "sklearn-linear-model-linearregression"]], "Examples using sklearn.linear_model.LinearRegression": [[638, "examples-using-sklearn-linear-model-linearregression"]], "sklearn.feature_selection.SelectorMixin": [[582, "sklearn-feature-selection-selectormixin"]], "sklearn.get_config": [[607, "sklearn-get-config"]], "sklearn.feature_selection.mutual_info_regression": [[589, "sklearn-feature-selection-mutual-info-regression"]], "Examples using sklearn.feature_selection.mutual_info_regression": [[589, "examples-using-sklearn-feature-selection-mutual-info-regression"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[596, "sklearn-gaussian-process-kernels-expsinesquared"]], "Examples using sklearn.gaussian_process.kernels.ExpSineSquared": [[596, "examples-using-sklearn-gaussian-process-kernels-expsinesquared"]], "sklearn.linear_model.LassoLarsIC": [[637, "sklearn-linear-model-lassolarsic"]], "Examples using sklearn.linear_model.LassoLarsIC": [[637, "examples-using-sklearn-linear-model-lassolarsic"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[598, "sklearn-gaussian-process-kernels-hyperparameter"]], "Examples using sklearn.gaussian_process.kernels.Hyperparameter": [[598, "examples-using-sklearn-gaussian-process-kernels-hyperparameter"]], "sklearn.linear_model.Lars": [[631, "sklearn-linear-model-lars"]], "sklearn.linear_model.LarsCV": [[632, "sklearn-linear-model-larscv"]], "sklearn.linear_model.LassoLarsCV": [[636, "sklearn-linear-model-lassolarscv"]], "Examples using sklearn.linear_model.LassoLarsCV": [[636, "examples-using-sklearn-linear-model-lassolarscv"]], "sklearn.feature_selection.GenericUnivariateSelect": [[573, "sklearn-feature-selection-genericunivariateselect"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[621, "sklearn-kernel-approximation-polynomialcountsketch"]], "Examples using sklearn.kernel_approximation.PolynomialCountSketch": [[621, "examples-using-sklearn-kernel-approximation-polynomialcountsketch"]], "sklearn.gaussian_process.kernels.RBF": [[603, "sklearn-gaussian-process-kernels-rbf"]], "Examples using sklearn.gaussian_process.kernels.RBF": [[603, "examples-using-sklearn-gaussian-process-kernels-rbf"]], "sklearn.linear_model.LassoCV": [[634, "sklearn-linear-model-lassocv"]], "Examples using sklearn.linear_model.LassoCV": [[634, "examples-using-sklearn-linear-model-lassocv"]], "sklearn.inspection.PartialDependenceDisplay": [[613, "sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay": [[613, "examples-using-sklearn-inspection-partialdependencedisplay"]], "sklearn.feature_selection.f_regression": [[587, "sklearn-feature-selection-f-regression"]], "Examples using sklearn.feature_selection.f_regression": [[587, "examples-using-sklearn-feature-selection-f-regression"]], "sklearn.feature_selection.SelectKBest": [[580, "sklearn-feature-selection-selectkbest"]], "Examples using sklearn.feature_selection.SelectKBest": [[580, "examples-using-sklearn-feature-selection-selectkbest"]], "sklearn.linear_model.ARDRegression": [[625, "sklearn-linear-model-ardregression"]], "Examples using sklearn.linear_model.ARDRegression": [[625, "examples-using-sklearn-linear-model-ardregression"]], "sklearn.gaussian_process.kernels.Matern": [[600, "sklearn-gaussian-process-kernels-matern"]], "Examples using sklearn.gaussian_process.kernels.Matern": [[600, "examples-using-sklearn-gaussian-process-kernels-matern"]], "sklearn.linear_model.GammaRegressor": [[629, "sklearn-linear-model-gammaregressor"]], "Examples using sklearn.linear_model.GammaRegressor": [[629, "examples-using-sklearn-linear-model-gammaregressor"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[592, "sklearn-gaussian-process-gaussianprocessregressor"]], "Examples using sklearn.gaussian_process.GaussianProcessRegressor": [[592, "examples-using-sklearn-gaussian-process-gaussianprocessregressor"]], "sklearn.gaussian_process.kernels.Kernel": [[599, "sklearn-gaussian-process-kernels-kernel"]], "Examples using sklearn.gaussian_process.kernels.Kernel": [[599, "examples-using-sklearn-gaussian-process-kernels-kernel"]], "sklearn.gaussian_process.kernels.Sum": [[605, "sklearn-gaussian-process-kernels-sum"]], "sklearn.feature_extraction.text.TfidfTransformer": [[571, "sklearn-feature-extraction-text-tfidftransformer"]], "Examples using sklearn.feature_extraction.text.TfidfTransformer": [[571, "examples-using-sklearn-feature-extraction-text-tfidftransformer"]], "sklearn.feature_selection.SelectFpr": [[577, "sklearn-feature-selection-selectfpr"]], "sklearn.feature_extraction.text.HashingVectorizer": [[570, "sklearn-feature-extraction-text-hashingvectorizer"]], "Examples using sklearn.feature_extraction.text.HashingVectorizer": [[570, "examples-using-sklearn-feature-extraction-text-hashingvectorizer"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[591, "sklearn-gaussian-process-gaussianprocessclassifier"]], "Examples using sklearn.gaussian_process.GaussianProcessClassifier": [[591, "examples-using-sklearn-gaussian-process-gaussianprocessclassifier"]], "sklearn.impute.IterativeImputer": [[608, "sklearn-impute-iterativeimputer"]], "Examples using sklearn.impute.IterativeImputer": [[608, "examples-using-sklearn-impute-iterativeimputer"]], "sklearn.isotonic.IsotonicRegression": [[616, "sklearn-isotonic-isotonicregression"]], "Examples using sklearn.isotonic.IsotonicRegression": [[616, "examples-using-sklearn-isotonic-isotonicregression"]], "sklearn.gaussian_process.kernels.Exponentiation": [[597, "sklearn-gaussian-process-kernels-exponentiation"]], "sklearn.linear_model.ElasticNet": [[627, "sklearn-linear-model-elasticnet"]], "Examples using sklearn.linear_model.ElasticNet": [[627, "examples-using-sklearn-linear-model-elasticnet"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[601, "sklearn-gaussian-process-kernels-pairwisekernel"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[572, "sklearn-feature-extraction-text-tfidfvectorizer"]], "Examples using sklearn.feature_extraction.text.TfidfVectorizer": [[572, "examples-using-sklearn-feature-extraction-text-tfidfvectorizer"]], "sklearn.inspection.DecisionBoundaryDisplay": [[612, "sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay": [[612, "examples-using-sklearn-inspection-decisionboundarydisplay"]], "sklearn.feature_selection.SelectFwe": [[579, "sklearn-feature-selection-selectfwe"]], "sklearn.feature_selection.chi2": [[585, "sklearn-feature-selection-chi2"]], "Examples using sklearn.feature_selection.chi2": [[585, "examples-using-sklearn-feature-selection-chi2"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[604, "sklearn-gaussian-process-kernels-rationalquadratic"]], "Examples using sklearn.gaussian_process.kernels.RationalQuadratic": [[604, "examples-using-sklearn-gaussian-process-kernels-rationalquadratic"]], "sklearn.linear_model.HuberRegressor": [[630, "sklearn-linear-model-huberregressor"]], "Examples using sklearn.linear_model.HuberRegressor": [[630, "examples-using-sklearn-linear-model-huberregressor"]], "sklearn.linear_model.ElasticNetCV": [[628, "sklearn-linear-model-elasticnetcv"]], "sklearn.impute.MissingIndicator": [[610, "sklearn-impute-missingindicator"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[606, "sklearn-gaussian-process-kernels-whitekernel"]], "Examples using sklearn.gaussian_process.kernels.WhiteKernel": [[606, "examples-using-sklearn-gaussian-process-kernels-whitekernel"]], "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[568, "sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "Examples using sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[568, "examples-using-sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "sklearn.impute.KNNImputer": [[609, "sklearn-impute-knnimputer"]], "Examples using sklearn.impute.KNNImputer": [[609, "examples-using-sklearn-impute-knnimputer"]], "sklearn.feature_selection.f_classif": [[586, "sklearn-feature-selection-f-classif"]], "Examples using sklearn.feature_selection.f_classif": [[586, "examples-using-sklearn-feature-selection-f-classif"]], "sklearn.inspection.partial_dependence": [[614, "sklearn-inspection-partial-dependence"]], "Examples using sklearn.inspection.partial_dependence": [[614, "examples-using-sklearn-inspection-partial-dependence"]], "sklearn.isotonic.check_increasing": [[617, "sklearn-isotonic-check-increasing"]], "sklearn.ensemble.StackingRegressor": [[548, "sklearn-ensemble-stackingregressor"]], "Examples using sklearn.ensemble.StackingRegressor": [[548, "examples-using-sklearn-ensemble-stackingregressor"]], "sklearn.exceptions.EfficiencyWarning": [[554, "sklearn-exceptions-efficiencywarning"]], "sklearn.decomposition.dict_learning_online": [[526, "sklearn-decomposition-dict-learning-online"]], "sklearn.decomposition.dict_learning": [[525, "sklearn-decomposition-dict-learning"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[529, "sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[529, "examples-using-sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "sklearn.ensemble.ExtraTreesRegressor": [[538, "sklearn-ensemble-extratreesregressor"]], "Examples using sklearn.ensemble.ExtraTreesRegressor": [[538, "examples-using-sklearn-ensemble-extratreesregressor"]], "sklearn.exceptions.DataDimensionalityWarning": [[553, "sklearn-exceptions-datadimensionalitywarning"]], "sklearn.datasets.make_gaussian_quantiles": [[499, "sklearn-datasets-make-gaussian-quantiles"]], "Examples using sklearn.datasets.make_gaussian_quantiles": [[499, "examples-using-sklearn-datasets-make-gaussian-quantiles"]], "sklearn.feature_extraction.image.img_to_graph": [[567, "sklearn-feature-extraction-image-img-to-graph"]], "sklearn.decomposition.TruncatedSVD": [[524, "sklearn-decomposition-truncatedsvd"]], "Examples using sklearn.decomposition.TruncatedSVD": [[524, "examples-using-sklearn-decomposition-truncatedsvd"]], "sklearn.ensemble.GradientBoostingRegressor": [[540, "sklearn-ensemble-gradientboostingregressor"]], "Examples using sklearn.ensemble.GradientBoostingRegressor": [[540, "examples-using-sklearn-ensemble-gradientboostingregressor"]], "sklearn.feature_extraction.image.grid_to_graph": [[566, "sklearn-feature-extraction-image-grid-to-graph"]], "sklearn.ensemble.StackingClassifier": [[547, "sklearn-ensemble-stackingclassifier"]], "Examples using sklearn.ensemble.StackingClassifier": [[547, "examples-using-sklearn-ensemble-stackingclassifier"]], "sklearn.feature_extraction.DictVectorizer": [[562, "sklearn-feature-extraction-dictvectorizer"]], "Examples using sklearn.feature_extraction.DictVectorizer": [[562, "examples-using-sklearn-feature-extraction-dictvectorizer"]], "sklearn.ensemble.BaggingClassifier": [[535, "sklearn-ensemble-baggingclassifier"]], "sklearn.datasets.make_multilabel_classification": [[503, "sklearn-datasets-make-multilabel-classification"]], "Examples using sklearn.datasets.make_multilabel_classification": [[503, "examples-using-sklearn-datasets-make-multilabel-classification"]], "sklearn.decomposition.KernelPCA": [[515, "sklearn-decomposition-kernelpca"]], "Examples using sklearn.decomposition.KernelPCA": [[515, "examples-using-sklearn-decomposition-kernelpca"]], "sklearn.ensemble.RandomTreesEmbedding": [[546, "sklearn-ensemble-randomtreesembedding"]], "Examples using sklearn.ensemble.RandomTreesEmbedding": [[546, "examples-using-sklearn-ensemble-randomtreesembedding"]], "sklearn.datasets.make_spd_matrix": [[509, "sklearn-datasets-make-spd-matrix"]], "sklearn.ensemble.AdaBoostRegressor": [[534, "sklearn-ensemble-adaboostregressor"]], "Examples using sklearn.ensemble.AdaBoostRegressor": [[534, "examples-using-sklearn-ensemble-adaboostregressor"]], "sklearn.decomposition.MiniBatchNMF": [[518, "sklearn-decomposition-minibatchnmf"]], "Examples using sklearn.decomposition.MiniBatchNMF": [[518, "examples-using-sklearn-decomposition-minibatchnmf"]], "sklearn.decomposition.sparse_encode": [[528, "sklearn-decomposition-sparse-encode"]], "sklearn.ensemble.RandomForestRegressor": [[545, "sklearn-ensemble-randomforestregressor"]], "Examples using sklearn.ensemble.RandomForestRegressor": [[545, "examples-using-sklearn-ensemble-randomforestregressor"]], "sklearn.experimental.enable_hist_gradient_boosting": [[560, "module-sklearn.experimental.enable_hist_gradient_boosting"]], "sklearn.datasets.make_low_rank_matrix": [[501, "sklearn-datasets-make-low-rank-matrix"]], "sklearn.decomposition.IncrementalPCA": [[514, "sklearn-decomposition-incrementalpca"]], "Examples using sklearn.decomposition.IncrementalPCA": [[514, "examples-using-sklearn-decomposition-incrementalpca"]], "sklearn.exceptions.NotFittedError": [[557, "sklearn-exceptions-notfittederror"]], "sklearn.experimental.enable_iterative_imputer": [[561, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.feature_extraction.FeatureHasher": [[563, "sklearn-feature-extraction-featurehasher"]], "Examples using sklearn.feature_extraction.FeatureHasher": [[563, "examples-using-sklearn-feature-extraction-featurehasher"]], "sklearn.decomposition.non_negative_factorization": [[527, "sklearn-decomposition-non-negative-factorization"]], "sklearn.exceptions.UndefinedMetricWarning": [[558, "sklearn-exceptions-undefinedmetricwarning"]], "sklearn.feature_extraction.image.extract_patches_2d": [[565, "sklearn-feature-extraction-image-extract-patches-2d"]], "Examples using sklearn.feature_extraction.image.extract_patches_2d": [[565, "examples-using-sklearn-feature-extraction-image-extract-patches-2d"]], "sklearn.ensemble.VotingRegressor": [[550, "sklearn-ensemble-votingregressor"]], "Examples using sklearn.ensemble.VotingRegressor": [[550, "examples-using-sklearn-ensemble-votingregressor"]], "sklearn.ensemble.AdaBoostClassifier": [[533, "sklearn-ensemble-adaboostclassifier"]], "Examples using sklearn.ensemble.AdaBoostClassifier": [[533, "examples-using-sklearn-ensemble-adaboostclassifier"]], "sklearn.ensemble.RandomForestClassifier": [[544, "sklearn-ensemble-randomforestclassifier"]], "Examples using sklearn.ensemble.RandomForestClassifier": [[544, "examples-using-sklearn-ensemble-randomforestclassifier"]], "sklearn.ensemble.VotingClassifier": [[549, "sklearn-ensemble-votingclassifier"]], "Examples using sklearn.ensemble.VotingClassifier": [[549, "examples-using-sklearn-ensemble-votingclassifier"]], "sklearn.datasets.make_s_curve": [[505, "sklearn-datasets-make-s-curve"]], "Examples using sklearn.datasets.make_s_curve": [[505, "examples-using-sklearn-datasets-make-s-curve"]], "sklearn.ensemble.ExtraTreesClassifier": [[537, "sklearn-ensemble-extratreesclassifier"]], "Examples using sklearn.ensemble.ExtraTreesClassifier": [[537, "examples-using-sklearn-ensemble-extratreesclassifier"]], "sklearn.datasets.make_hastie_10_2": [[500, "sklearn-datasets-make-hastie-10-2"]], "Examples using sklearn.datasets.make_hastie_10_2": [[500, "examples-using-sklearn-datasets-make-hastie-10-2"]], "sklearn.ensemble.BaggingRegressor": [[536, "sklearn-ensemble-baggingregressor"]], "Examples using sklearn.ensemble.BaggingRegressor": [[536, "examples-using-sklearn-ensemble-baggingregressor"]], "sklearn.exceptions.InconsistentVersionWarning": [[556, "sklearn-exceptions-inconsistentversionwarning"]], "sklearn.ensemble.GradientBoostingClassifier": [[539, "sklearn-ensemble-gradientboostingclassifier"]], "Examples using sklearn.ensemble.GradientBoostingClassifier": [[539, "examples-using-sklearn-ensemble-gradientboostingclassifier"]], "sklearn.datasets.make_friedman2": [[497, "sklearn-datasets-make-friedman2"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[530, "sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[530, "examples-using-sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "sklearn.experimental.enable_halving_search_cv": [[559, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.datasets.make_sparse_coded_signal": [[506, "sklearn-datasets-make-sparse-coded-signal"]], "Examples using sklearn.datasets.make_sparse_coded_signal": [[506, "examples-using-sklearn-datasets-make-sparse-coded-signal"]], "sklearn.decomposition.NMF": [[520, "sklearn-decomposition-nmf"]], "Examples using sklearn.decomposition.NMF": [[520, "examples-using-sklearn-decomposition-nmf"]], "sklearn.decomposition.FastICA": [[513, "sklearn-decomposition-fastica"]], "Examples using sklearn.decomposition.FastICA": [[513, "examples-using-sklearn-decomposition-fastica"]], "sklearn.datasets.make_swiss_roll": [[510, "sklearn-datasets-make-swiss-roll"]], "Examples using sklearn.datasets.make_swiss_roll": [[510, "examples-using-sklearn-datasets-make-swiss-roll"]], "sklearn.decomposition.SparsePCA": [[523, "sklearn-decomposition-sparsepca"]], "sklearn.datasets.make_sparse_spd_matrix": [[507, "sklearn-datasets-make-sparse-spd-matrix"]], "Examples using sklearn.datasets.make_sparse_spd_matrix": [[507, "examples-using-sklearn-datasets-make-sparse-spd-matrix"]], "sklearn.datasets.make_regression": [[504, "sklearn-datasets-make-regression"]], "Examples using sklearn.datasets.make_regression": [[504, "examples-using-sklearn-datasets-make-regression"]], "sklearn.decomposition.MiniBatchSparsePCA": [[519, "sklearn-decomposition-minibatchsparsepca"]], "Examples using sklearn.decomposition.MiniBatchSparsePCA": [[519, "examples-using-sklearn-decomposition-minibatchsparsepca"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[542, "sklearn-ensemble-histgradientboostingregressor"]], "Examples using sklearn.ensemble.HistGradientBoostingRegressor": [[542, "examples-using-sklearn-ensemble-histgradientboostingregressor"]], "sklearn.ensemble.IsolationForest": [[543, "sklearn-ensemble-isolationforest"]], "Examples using sklearn.ensemble.IsolationForest": [[543, "examples-using-sklearn-ensemble-isolationforest"]], "sklearn.datasets.make_moons": [[502, "sklearn-datasets-make-moons"]], "Examples using sklearn.datasets.make_moons": [[502, "examples-using-sklearn-datasets-make-moons"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[541, "sklearn-ensemble-histgradientboostingclassifier"]], "Examples using sklearn.ensemble.HistGradientBoostingClassifier": [[541, "examples-using-sklearn-ensemble-histgradientboostingclassifier"]], "sklearn.exceptions.ConvergenceWarning": [[551, "sklearn-exceptions-convergencewarning"]], "Examples using sklearn.exceptions.ConvergenceWarning": [[551, "examples-using-sklearn-exceptions-convergencewarning"]], "sklearn.datasets.make_sparse_uncorrelated": [[508, "sklearn-datasets-make-sparse-uncorrelated"]], "sklearn.decomposition.SparseCoder": [[522, "sklearn-decomposition-sparsecoder"]], "Examples using sklearn.decomposition.SparseCoder": [[522, "examples-using-sklearn-decomposition-sparsecoder"]], "sklearn.dummy.DummyRegressor": [[532, "sklearn-dummy-dummyregressor"]], "Examples using sklearn.dummy.DummyRegressor": [[532, "examples-using-sklearn-dummy-dummyregressor"]], "sklearn.feature_extraction.image.PatchExtractor": [[564, "sklearn-feature-extraction-image-patchextractor"]], "sklearn.datasets.make_friedman3": [[498, "sklearn-datasets-make-friedman3"]], "sklearn.decomposition.DictionaryLearning": [[511, "sklearn-decomposition-dictionarylearning"]], "sklearn.decomposition.PCA": [[521, "sklearn-decomposition-pca"]], "Examples using sklearn.decomposition.PCA": [[521, "examples-using-sklearn-decomposition-pca"]], "sklearn.decomposition.FactorAnalysis": [[512, "sklearn-decomposition-factoranalysis"]], "Examples using sklearn.decomposition.FactorAnalysis": [[512, "examples-using-sklearn-decomposition-factoranalysis"]], "sklearn.decomposition.LatentDirichletAllocation": [[516, "sklearn-decomposition-latentdirichletallocation"]], "Examples using sklearn.decomposition.LatentDirichletAllocation": [[516, "examples-using-sklearn-decomposition-latentdirichletallocation"]], "sklearn.exceptions.FitFailedWarning": [[555, "sklearn-exceptions-fitfailedwarning"]], "sklearn.exceptions.DataConversionWarning": [[552, "sklearn-exceptions-dataconversionwarning"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[517, "sklearn-decomposition-minibatchdictionarylearning"]], "Examples using sklearn.decomposition.MiniBatchDictionaryLearning": [[517, "examples-using-sklearn-decomposition-minibatchdictionarylearning"]], "sklearn.dummy.DummyClassifier": [[531, "sklearn-dummy-dummyclassifier"]], "Examples using sklearn.dummy.DummyClassifier": [[531, "examples-using-sklearn-dummy-dummyclassifier"]], "sklearn.datasets.fetch_covtype": [[471, "sklearn-datasets-fetch-covtype"]], "Examples using sklearn.datasets.fetch_covtype": [[471, "examples-using-sklearn-datasets-fetch-covtype"]], "sklearn.covariance.ShrunkCovariance": [[456, "sklearn-covariance-shrunkcovariance"]], "Examples using sklearn.covariance.ShrunkCovariance": [[456, "examples-using-sklearn-covariance-shrunkcovariance"]], "sklearn.covariance.ledoit_wolf_shrinkage": [[460, "sklearn-covariance-ledoit-wolf-shrinkage"]], "sklearn.cluster.cluster_optics_xi": [[436, "sklearn-cluster-cluster-optics-xi"]], "sklearn.datasets.load_files": [[483, "sklearn-datasets-load-files"]], "sklearn.datasets.fetch_california_housing": [[470, "sklearn-datasets-fetch-california-housing"]], "Examples using sklearn.datasets.fetch_california_housing": [[470, "examples-using-sklearn-datasets-fetch-california-housing"]], "sklearn.covariance.GraphicalLassoCV": [[452, "sklearn-covariance-graphicallassocv"]], "Examples using sklearn.covariance.GraphicalLassoCV": [[452, "examples-using-sklearn-covariance-graphicallassocv"]], "sklearn.datasets.fetch_lfw_people": [[474, "sklearn-datasets-fetch-lfw-people"]], "Examples using sklearn.datasets.fetch_lfw_people": [[474, "examples-using-sklearn-datasets-fetch-lfw-people"]], "sklearn.datasets.load_diabetes": [[481, "sklearn-datasets-load-diabetes"]], "Examples using sklearn.datasets.load_diabetes": [[481, "examples-using-sklearn-datasets-load-diabetes"]], "sklearn.cluster.KMeans": [[427, "sklearn-cluster-kmeans"]], "Examples using sklearn.cluster.KMeans": [[427, "examples-using-sklearn-cluster-kmeans"]], "sklearn.datasets.load_sample_images": [[487, "sklearn-datasets-load-sample-images"]], "sklearn.datasets.fetch_kddcup99": [[472, "sklearn-datasets-fetch-kddcup99"]], "Examples using sklearn.datasets.fetch_kddcup99": [[472, "examples-using-sklearn-datasets-fetch-kddcup99"]], "sklearn.covariance.EmpiricalCovariance": [[450, "sklearn-covariance-empiricalcovariance"]], "Examples using sklearn.covariance.EmpiricalCovariance": [[450, "examples-using-sklearn-covariance-empiricalcovariance"]], "sklearn.datasets.fetch_species_distributions": [[478, "sklearn-datasets-fetch-species-distributions"]], "Examples using sklearn.datasets.fetch_species_distributions": [[478, "examples-using-sklearn-datasets-fetch-species-distributions"]], "sklearn.datasets.make_classification": [[495, "sklearn-datasets-make-classification"]], "Examples using sklearn.datasets.make_classification": [[495, "examples-using-sklearn-datasets-make-classification"]], "sklearn.datasets.fetch_20newsgroups": [[468, "sklearn-datasets-fetch-20newsgroups"]], "Examples using sklearn.datasets.fetch_20newsgroups": [[468, "examples-using-sklearn-datasets-fetch-20newsgroups"]], "sklearn.covariance.OAS": [[455, "sklearn-covariance-oas"]], "Examples using sklearn.covariance.OAS": [[455, "examples-using-sklearn-covariance-oas"]], "sklearn.datasets.make_biclusters": [[491, "sklearn-datasets-make-biclusters"]], "Examples using sklearn.datasets.make_biclusters": [[491, "examples-using-sklearn-datasets-make-biclusters"]], "sklearn.cluster.ward_tree": [[443, "sklearn-cluster-ward-tree"]], "sklearn.datasets.make_friedman1": [[496, "sklearn-datasets-make-friedman1"]], "sklearn.datasets.load_sample_image": [[486, "sklearn-datasets-load-sample-image"]], "Examples using sklearn.datasets.load_sample_image": [[486, "examples-using-sklearn-datasets-load-sample-image"]], "sklearn.cluster.SpectralClustering": [[432, "sklearn-cluster-spectralclustering"]], "Examples using sklearn.cluster.SpectralClustering": [[432, "examples-using-sklearn-cluster-spectralclustering"]], "sklearn.covariance.graphical_lasso": [[458, "sklearn-covariance-graphical-lasso"]], "sklearn.datasets.load_wine": [[490, "sklearn-datasets-load-wine"]], "Examples using sklearn.datasets.load_wine": [[490, "examples-using-sklearn-datasets-load-wine"]], "sklearn.cluster.mean_shift": [[441, "sklearn-cluster-mean-shift"]], "sklearn.cluster.estimate_bandwidth": [[438, "sklearn-cluster-estimate-bandwidth"]], "Examples using sklearn.cluster.estimate_bandwidth": [[438, "examples-using-sklearn-cluster-estimate-bandwidth"]], "sklearn.covariance.empirical_covariance": [[457, "sklearn-covariance-empirical-covariance"]], "Examples using sklearn.covariance.empirical_covariance": [[457, "examples-using-sklearn-covariance-empirical-covariance"]], "sklearn.datasets.load_iris": [[484, "sklearn-datasets-load-iris"]], "Examples using sklearn.datasets.load_iris": [[484, "examples-using-sklearn-datasets-load-iris"]], "sklearn.cluster.cluster_optics_dbscan": [[435, "sklearn-cluster-cluster-optics-dbscan"]], "Examples using sklearn.cluster.cluster_optics_dbscan": [[435, "examples-using-sklearn-cluster-cluster-optics-dbscan"]], "sklearn.cluster.SpectralBiclustering": [[431, "sklearn-cluster-spectralbiclustering"]], "Examples using sklearn.cluster.SpectralBiclustering": [[431, "examples-using-sklearn-cluster-spectralbiclustering"]], "sklearn.config_context": [[448, "sklearn-config-context"]], "Examples using sklearn.config_context": [[448, "examples-using-sklearn-config-context"]], "sklearn.datasets.load_svmlight_file": [[488, "sklearn-datasets-load-svmlight-file"]], "sklearn.datasets.make_checkerboard": [[493, "sklearn-datasets-make-checkerboard"]], "Examples using sklearn.datasets.make_checkerboard": [[493, "examples-using-sklearn-datasets-make-checkerboard"]], "sklearn.covariance.MinCovDet": [[454, "sklearn-covariance-mincovdet"]], "Examples using sklearn.covariance.MinCovDet": [[454, "examples-using-sklearn-covariance-mincovdet"]], "sklearn.datasets.clear_data_home": [[466, "sklearn-datasets-clear-data-home"]], "sklearn.cluster.OPTICS": [[430, "sklearn-cluster-optics"]], "Examples using sklearn.cluster.OPTICS": [[430, "examples-using-sklearn-cluster-optics"]], "sklearn.compose.TransformedTargetRegressor": [[445, "sklearn-compose-transformedtargetregressor"]], "Examples using sklearn.compose.TransformedTargetRegressor": [[445, "examples-using-sklearn-compose-transformedtargetregressor"]], "sklearn.covariance.ledoit_wolf": [[459, "sklearn-covariance-ledoit-wolf"]], "Examples using sklearn.covariance.ledoit_wolf": [[459, "examples-using-sklearn-covariance-ledoit-wolf"]], "sklearn.datasets.make_circles": [[494, "sklearn-datasets-make-circles"]], "Examples using sklearn.datasets.make_circles": [[494, "examples-using-sklearn-datasets-make-circles"]], "sklearn.cluster.spectral_clustering": [[442, "sklearn-cluster-spectral-clustering"]], "Examples using sklearn.cluster.spectral_clustering": [[442, "examples-using-sklearn-cluster-spectral-clustering"]], "sklearn.compose.ColumnTransformer": [[444, "sklearn-compose-columntransformer"]], "Examples using sklearn.compose.ColumnTransformer": [[444, "examples-using-sklearn-compose-columntransformer"]], "sklearn.cross_decomposition.PLSRegression": [[464, "sklearn-cross-decomposition-plsregression"]], "Examples using sklearn.cross_decomposition.PLSRegression": [[464, "examples-using-sklearn-cross-decomposition-plsregression"]], "sklearn.cross_decomposition.CCA": [[462, "sklearn-cross-decomposition-cca"]], "Examples using sklearn.cross_decomposition.CCA": [[462, "examples-using-sklearn-cross-decomposition-cca"]], "sklearn.cross_decomposition.PLSSVD": [[465, "sklearn-cross-decomposition-plssvd"]], "sklearn.cluster.SpectralCoclustering": [[433, "sklearn-cluster-spectralcoclustering"]], "Examples using sklearn.cluster.SpectralCoclustering": [[433, "examples-using-sklearn-cluster-spectralcoclustering"]], "sklearn.compose.make_column_transformer": [[447, "sklearn-compose-make-column-transformer"]], "Examples using sklearn.compose.make_column_transformer": [[447, "examples-using-sklearn-compose-make-column-transformer"]], "sklearn.covariance.shrunk_covariance": [[461, "sklearn-covariance-shrunk-covariance"]], "sklearn.datasets.fetch_openml": [[476, "sklearn-datasets-fetch-openml"]], "Examples using sklearn.datasets.fetch_openml": [[476, "examples-using-sklearn-datasets-fetch-openml"]], "sklearn.datasets.fetch_lfw_pairs": [[473, "sklearn-datasets-fetch-lfw-pairs"]], "sklearn.datasets.load_svmlight_files": [[489, "sklearn-datasets-load-svmlight-files"]], "sklearn.cluster.k_means": [[439, "sklearn-cluster-k-means"]], "sklearn.datasets.dump_svmlight_file": [[467, "sklearn-datasets-dump-svmlight-file"]], "Examples using sklearn.datasets.dump_svmlight_file": [[467, "examples-using-sklearn-datasets-dump-svmlight-file"]], "sklearn.cluster.affinity_propagation": [[434, "sklearn-cluster-affinity-propagation"]], "Examples using sklearn.cluster.affinity_propagation": [[434, "examples-using-sklearn-cluster-affinity-propagation"]], "sklearn.datasets.get_data_home": [[479, "sklearn-datasets-get-data-home"]], "Examples using sklearn.datasets.get_data_home": [[479, "examples-using-sklearn-datasets-get-data-home"]], "sklearn.cluster.MiniBatchKMeans": [[429, "sklearn-cluster-minibatchkmeans"]], "Examples using sklearn.cluster.MiniBatchKMeans": [[429, "examples-using-sklearn-cluster-minibatchkmeans"]], "sklearn.cluster.FeatureAgglomeration": [[426, "sklearn-cluster-featureagglomeration"]], "Examples using sklearn.cluster.FeatureAgglomeration": [[426, "examples-using-sklearn-cluster-featureagglomeration"]], "sklearn.datasets.make_blobs": [[492, "sklearn-datasets-make-blobs"]], "Examples using sklearn.datasets.make_blobs": [[492, "examples-using-sklearn-datasets-make-blobs"]], "sklearn.covariance.LedoitWolf": [[453, "sklearn-covariance-ledoitwolf"]], "Examples using sklearn.covariance.LedoitWolf": [[453, "examples-using-sklearn-covariance-ledoitwolf"]], "sklearn.datasets.fetch_olivetti_faces": [[475, "sklearn-datasets-fetch-olivetti-faces"]], "Examples using sklearn.datasets.fetch_olivetti_faces": [[475, "examples-using-sklearn-datasets-fetch-olivetti-faces"]], "sklearn.covariance.GraphicalLasso": [[451, "sklearn-covariance-graphicallasso"]], "sklearn.datasets.load_digits": [[482, "sklearn-datasets-load-digits"]], "Examples using sklearn.datasets.load_digits": [[482, "examples-using-sklearn-datasets-load-digits"]], "sklearn.cluster.MeanShift": [[428, "sklearn-cluster-meanshift"]], "Examples using sklearn.cluster.MeanShift": [[428, "examples-using-sklearn-cluster-meanshift"]], "sklearn.cluster.kmeans_plusplus": [[440, "sklearn-cluster-kmeans-plusplus"]], "Examples using sklearn.cluster.kmeans_plusplus": [[440, "examples-using-sklearn-cluster-kmeans-plusplus"]], "sklearn.datasets.fetch_rcv1": [[477, "sklearn-datasets-fetch-rcv1"]], "sklearn.cluster.compute_optics_graph": [[437, "sklearn-cluster-compute-optics-graph"]], "sklearn.covariance.EllipticEnvelope": [[449, "sklearn-covariance-ellipticenvelope"]], "Examples using sklearn.covariance.EllipticEnvelope": [[449, "examples-using-sklearn-covariance-ellipticenvelope"]], "sklearn.compose.make_column_selector": [[446, "sklearn-compose-make-column-selector"]], "Examples using sklearn.compose.make_column_selector": [[446, "examples-using-sklearn-compose-make-column-selector"]], "sklearn.datasets.load_linnerud": [[485, "sklearn-datasets-load-linnerud"]], "sklearn.cross_decomposition.PLSCanonical": [[463, "sklearn-cross-decomposition-plscanonical"]], "Examples using sklearn.cross_decomposition.PLSCanonical": [[463, "examples-using-sklearn-cross-decomposition-plscanonical"]], "sklearn.datasets.fetch_20newsgroups_vectorized": [[469, "sklearn-datasets-fetch-20newsgroups-vectorized"]], "Examples using sklearn.datasets.fetch_20newsgroups_vectorized": [[469, "examples-using-sklearn-datasets-fetch-20newsgroups-vectorized"]], "sklearn.datasets.load_breast_cancer": [[480, "sklearn-datasets-load-breast-cancer"]], "Examples using sklearn.datasets.load_breast_cancer": [[480, "examples-using-sklearn-datasets-load-breast-cancer"]], "Release Highlights for scikit-learn 1.2": [[312, "release-highlights-for-scikit-learn-1-2"]], "Pandas output with set_output API": [[312, "pandas-output-with-set-output-api"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[312, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "New and enhanced displays": [[312, "new-and-enhanced-displays"]], "Faster parser in fetch_openml": [[312, "faster-parser-in-fetch-openml"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[312, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Improved efficiency of many estimators": [[312, "improved-efficiency-of-many-estimators"]], "Importance of Feature Scaling": [[304, "importance-of-feature-scaling"]], "Load and prepare data": [[304, "load-and-prepare-data"], [267, "load-and-prepare-data"], [266, "load-and-prepare-data"]], "Effect of rescaling on a k-neighbors models": [[304, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on a PCA dimensional reduction": [[304, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on model\u2019s performance": [[304, "effect-of-rescaling-on-model-s-performance"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[286, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[285, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Plot different SVM classifiers in the iris dataset": [[324, "plot-different-svm-classifiers-in-the-iris-dataset"]], "Outlier detection with Local Outlier Factor (LOF)": [[284, "outlier-detection-with-local-outlier-factor-lof"]], "Restricted Boltzmann Machine features for digit classification": [[296, "restricted-boltzmann-machine-features-for-digit-classification"]], "Models definition": [[296, "models-definition"]], "Plotting": [[296, "plotting"], [391, "plotting"], [391, "id7"], [391, "id9"]], "Post pruning decision trees with cost complexity pruning": [[345, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Total impurity of leaves vs effective alphas of pruned tree": [[345, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Accuracy vs alpha for training and testing sets": [[345, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Common pitfalls and recommended practices": [[351, "common-pitfalls-and-recommended-practices"]], "Inconsistent preprocessing": [[351, "inconsistent-preprocessing"]], "Data leakage": [[351, "data-leakage"]], "Data leakage during pre-processing": [[351, "data-leakage-during-pre-processing"]], "How to avoid data leakage": [[351, "how-to-avoid-data-leakage"]], "Controlling randomness": [[351, "controlling-randomness"]], "Using None or RandomState instances, and repeated calls to fit and split": [[351, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Estimators": [[351, "estimators"], [351, "id2"], [391, "estimators"], [369, "estimators"]], "CV splitters": [[351, "cv-splitters"], [351, "id3"]], "Common pitfalls and subtleties": [[351, "common-pitfalls-and-subtleties"]], "General recommendations": [[351, "general-recommendations"]], "Getting reproducible results across multiple executions": [[351, "getting-reproducible-results-across-multiple-executions"]], "Robustness of cross-validation results": [[351, "robustness-of-cross-validation-results"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[320, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "Computing with scikit-learn": [[354, "computing-with-scikit-learn"]], "Map data to a normal distribution": [[303, "map-data-to-a-normal-distribution"]], "Compare Stochastic learning strategies for MLPClassifier": [[294, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "SVM: Weighted samples": [[337, "svm-weighted-samples"]], "Semi Supervised Classification": [[314, "semi-supervised-classification"], [164, "semi-supervised-classification"]], "One-class SVM with non-linear kernel (RBF)": [[326, "one-class-svm-with-non-linear-kernel-rbf"]], "Varying regularization in Multi-layer Perceptron": [[293, "varying-regularization-in-multi-layer-perceptron"]], "SVM with custom kernel": [[323, "svm-with-custom-kernel"]], "Semi-supervised Classification on a Text Dataset": [[319, "semi-supervised-classification-on-a-text-dataset"]], "SVM-Anova: SVM with univariate feature selection": [[330, "svm-anova-svm-with-univariate-feature-selection"]], "Load some data to play with": [[330, "load-some-data-to-play-with"]], "Create the pipeline": [[330, "create-the-pipeline"]], "Plot the cross-validation score as a function of percentile of features": [[330, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Multi-output Decision Tree Regression": [[348, "multi-output-decision-tree-regression"]], "SVM-Kernels": [[331, "svm-kernels"]], "Understanding the decision tree structure": [[349, "understanding-the-decision-tree-structure"]], "Train tree classifier": [[349, "train-tree-classifier"]], "Tree structure": [[349, "tree-structure"]], "Decision path": [[349, "decision-path"]], "Non-linear SVM": [[333, "non-linear-svm"]], "Clustering text documents using k-means": [[341, "clustering-text-documents-using-k-means"]], "Loading text data": [[341, "loading-text-data"]], "Quantifying the quality of clustering results": [[341, "quantifying-the-quality-of-clustering-results"]], "K-means clustering on text features": [[341, "k-means-clustering-on-text-features"]], "Feature Extraction using TfidfVectorizer": [[341, "feature-extraction-using-tfidfvectorizer"]], "Clustering sparse data with k-means": [[341, "clustering-sparse-data-with-k-means"]], "Performing dimensionality reduction using LSA": [[341, "performing-dimensionality-reduction-using-lsa"]], "Top terms per cluster": [[341, "top-terms-per-cluster"]], "HashingVectorizer": [[341, "hashingvectorizer"]], "Clustering evaluation summary": [[341, "clustering-evaluation-summary"]], "Nearest Neighbors regression": [[289, "nearest-neighbors-regression"]], "Label Propagation learning a complex structure": [[317, "label-propagation-learning-a-complex-structure"]], "FeatureHasher and DictVectorizer Comparison": [[342, "featurehasher-and-dictvectorizer-comparison"]], "Load Data": [[342, "load-data"]], "Define preprocessing functions": [[342, "define-preprocessing-functions"]], "DictVectorizer": [[342, "dictvectorizer"]], "FeatureHasher": [[342, "featurehasher"]], "Comparison with special purpose text vectorizers": [[342, "comparison-with-special-purpose-text-vectorizers"]], "TfidfVectorizer": [[342, "tfidfvectorizer"]], "Release Highlights": [[306, "release-highlights"], [164, "release-highlights"]], "Nearest Centroid Classification": [[288, "nearest-centroid-classification"]], "Release Highlights for scikit-learn 0.22": [[307, "release-highlights-for-scikit-learn-0-22"]], "New plotting API": [[307, "new-plotting-api"]], "Stacking Classifier and Regressor": [[307, "stacking-classifier-and-regressor"]], "Permutation-based feature importance": [[307, "permutation-based-feature-importance"]], "Native support for missing values for gradient boosting": [[307, "native-support-for-missing-values-for-gradient-boosting"]], "Precomputed sparse nearest neighbors graph": [[307, "precomputed-sparse-nearest-neighbors-graph"]], "KNN Based Imputation": [[307, "knn-based-imputation"]], "Tree pruning": [[307, "tree-pruning"]], "Retrieve dataframes from OpenML": [[307, "retrieve-dataframes-from-openml"]], "Checking scikit-learn compatibility of an estimator": [[307, "checking-scikit-learn-compatibility-of-an-estimator"]], "ROC AUC now supports multiclass classification": [[307, "roc-auc-now-supports-multiclass-classification"]], "SVM Tie Breaking Example": [[336, "svm-tie-breaking-example"]], "Label Propagation digits: Demonstrating performance": [[315, "label-propagation-digits-demonstrating-performance"]], "Plot the most uncertain predictions": [[315, "plot-the-most-uncertain-predictions"]], "Plot the support vectors in LinearSVC": [[325, "plot-the-support-vectors-in-linearsvc"]], "SVM Margins Example": [[332, "svm-margins-example"]], "Scaling the regularization parameter for SVCs": [[335, "scaling-the-regularization-parameter-for-svcs"]], "L1-penalty case": [[335, "l1-penalty-case"]], "L2-penalty case": [[335, "l2-penalty-case"]], "Release Highlights for scikit-learn 0.23": [[308, "release-highlights-for-scikit-learn-0-23"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[308, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Rich visual representation of estimators": [[308, "rich-visual-representation-of-estimators"]], "Scalability and stability improvements to KMeans": [[308, "scalability-and-stability-improvements-to-kmeans"]], "Improvements to the histogram-based Gradient Boosting estimators": [[308, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Sample-weight support for Lasso and ElasticNet": [[308, "sample-weight-support-for-lasso-and-elasticnet"]], "Release Highlights for scikit-learn 1.1": [[311, "release-highlights-for-scikit-learn-1-1"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[311, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "get_feature_names_out Available in all Transformers": [[311, "get-feature-names-out-available-in-all-transformers"]], "Grouping infrequent categories in OneHotEncoder": [[311, "grouping-infrequent-categories-in-onehotencoder"]], "Performance improvements": [[311, "performance-improvements"]], "MiniBatchNMF: an online version of NMF": [[311, "minibatchnmf-an-online-version-of-nmf"]], "BisectingKMeans: divide and cluster": [[311, "bisectingkmeans-divide-and-cluster"]], "Working with text documents": [[339, "working-with-text-documents"], [164, "working-with-text-documents"]], "Compare the effect of different scalers on data with outliers": [[299, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "Original data": [[299, "original-data"], [263, "original-data"]], "StandardScaler": [[299, "standardscaler"]], "MinMaxScaler": [[299, "minmaxscaler"]], "MaxAbsScaler": [[299, "maxabsscaler"]], "RobustScaler": [[299, "robustscaler"]], "PowerTransformer": [[299, "powertransformer"]], "QuantileTransformer (uniform output)": [[299, "quantiletransformer-uniform-output"]], "QuantileTransformer (Gaussian output)": [[299, "quantiletransformer-gaussian-output"]], "Normalizer": [[299, "normalizer"]], "Feature discretization": [[301, "feature-discretization"]], "Visualization of MLP weights on MNIST": [[295, "visualization-of-mlp-weights-on-mnist"]], "Preprocessing": [[298, "preprocessing"], [164, "preprocessing"]], "Demonstrating the different strategies of KBinsDiscretizer": [[302, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Label Propagation digits active learning": [[316, "label-propagation-digits-active-learning"]], "Release Highlights for scikit-learn 1.0": [[310, "release-highlights-for-scikit-learn-1-0"]], "Keyword and positional arguments": [[310, "keyword-and-positional-arguments"]], "Spline Transformers": [[310, "spline-transformers"]], "Quantile Regressor": [[310, "quantile-regressor"]], "Feature Names Support": [[310, "feature-names-support"]], "A more flexible plotting API": [[310, "a-more-flexible-plotting-api"]], "Histogram-based Gradient Boosting Models are now stable": [[310, "histogram-based-gradient-boosting-models-are-now-stable"]], "New documentation improvements": [[310, "new-documentation-improvements"], [309, "new-documentation-improvements"]], "Plot the decision surface of decision trees trained on the iris dataset": [[346, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "RBF SVM parameters": [[327, "rbf-svm-parameters"]], "Load and prepare data set": [[327, "load-and-prepare-data-set"]], "Train classifiers": [[327, "train-classifiers"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[334, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Look at the results": [[334, "look-at-the-results"], [232, "look-at-the-results"]], "Neural Networks": [[292, "neural-networks"], [164, "neural-networks"]], "Classification of text documents using sparse features": [[340, "classification-of-text-documents-using-sparse-features"]], "Loading and vectorizing the 20 newsgroups text dataset": [[340, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Analysis of a bag-of-words document classifier": [[340, "analysis-of-a-bag-of-words-document-classifier"]], "Model without metadata stripping": [[340, "model-without-metadata-stripping"]], "Model with metadata stripping": [[340, "model-with-metadata-stripping"]], "Benchmarking classifiers": [[340, "benchmarking-classifiers"]], "Plot accuracy, training and test time of each classifier": [[340, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Release Highlights for scikit-learn 0.24": [[309, "release-highlights-for-scikit-learn-0-24"]], "Successive Halving estimators for tuning hyper-parameters": [[309, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Native support for categorical features in HistGradientBoosting estimators": [[309, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Improved performances of HistGradientBoosting estimators": [[309, "improved-performances-of-histgradientboosting-estimators"]], "New self-training meta-estimator": [[309, "new-self-training-meta-estimator"]], "New SequentialFeatureSelector transformer": [[309, "new-sequentialfeatureselector-transformer"]], "New PolynomialCountSketch kernel approximation function": [[309, "new-polynomialcountsketch-kernel-approximation-function"]], "Individual Conditional Expectation plots": [[309, "individual-conditional-expectation-plots"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[309, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "Using KBinsDiscretizer to discretize continuous features": [[300, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Decision Tree Regression": [[347, "decision-tree-regression"]], "SVM: Separating hyperplane for unbalanced classes": [[329, "svm-separating-hyperplane-for-unbalanced-classes"]], "Kernel Density Estimate of Species Distributions": [[290, "kernel-density-estimate-of-species-distributions"]], "Neighborhood Components Analysis Illustration": [[287, "neighborhood-components-analysis-illustration"]], "Original points": [[287, "original-points"]], "Learning an embedding": [[287, "learning-an-embedding"]], "SVM: Maximum margin separating hyperplane": [[328, "svm-maximum-margin-separating-hyperplane"]], "Effect of varying threshold for self-training": [[318, "effect-of-varying-threshold-for-self-training"]], "Array API support (experimental)": [[388, "array-api-support-experimental"]], "Example usage": [[388, "example-usage"]], "Estimators with support for Array API-compatible inputs": [[388, "estimators-with-support-for-array-api-compatible-inputs"]], "Pipeline: chaining estimators": [[393, "pipeline-chaining-estimators"]], "Construction": [[393, "construction"]], "Accessing steps": [[393, "accessing-steps"]], "Nested parameters": [[393, "nested-parameters"]], "See Also:": [[393, null], [262, null]], "Caching transformers: avoid repeated computation": [[393, "caching-transformers-avoid-repeated-computation"]], "Transforming target in regression": [[393, "transforming-target-in-regression"]], "FeatureUnion: composite feature spaces": [[393, "featureunion-composite-feature-spaces"]], "ColumnTransformer for heterogeneous data": [[393, "columntransformer-for-heterogeneous-data"]], "Visualizing Composite Estimators": [[393, "visualizing-composite-estimators"]], "Developing with the Plotting API": [[374, "developing-with-the-plotting-api"]], "Plotting API Overview": [[374, "plotting-api-overview"]], "Plotting with Multiple Axes": [[374, "plotting-with-multiple-axes"]], "sklearn.base.BiclusterMixin": [[407, "sklearn-base-biclustermixin"]], "Gaussian Processes": [[402, "gaussian-processes"]], "Gaussian Process Regression (GPR)": [[402, "gaussian-process-regression-gpr"]], "GPR examples": [[402, "gpr-examples"]], "GPR with noise-level estimation": [[402, "gpr-with-noise-level-estimation"]], "Comparison of GPR and Kernel Ridge Regression": [[402, "comparison-of-gpr-and-kernel-ridge-regression"]], "GPR on Mauna Loa CO2 data": [[402, "gpr-on-mauna-loa-co2-data"]], "Gaussian Process Classification (GPC)": [[402, "gaussian-process-classification-gpc"]], "GPC examples": [[402, "gpc-examples"]], "Probabilistic predictions with GPC": [[402, "probabilistic-predictions-with-gpc"]], "Illustration of GPC on the XOR dataset": [[402, "illustration-of-gpc-on-the-xor-dataset"]], "Gaussian process classification (GPC) on iris dataset": [[402, "gaussian-process-classification-gpc-on-iris-dataset"], [151, "gaussian-process-classification-gpc-on-iris-dataset"]], "Kernels for Gaussian Processes": [[402, "kernels-for-gaussian-processes"]], "Gaussian Process Kernel API": [[402, "gaussian-process-kernel-api"]], "Basic kernels": [[402, "basic-kernels"]], "Kernel operators": [[402, "kernel-operators"]], "Radial basis function (RBF) kernel": [[402, "radial-basis-function-rbf-kernel"]], "Mat\u00e9rn kernel": [[402, "matern-kernel"], [158, "matern-kernel"]], "Rational quadratic kernel": [[402, "rational-quadratic-kernel"]], "Exp-Sine-Squared kernel": [[402, "exp-sine-squared-kernel"], [158, "exp-sine-squared-kernel"]], "Dot-Product kernel": [[402, "dot-product-kernel"]], "Maintainer / core-developer information": [[371, "maintainer-core-developer-information"]], "Releasing": [[371, "releasing"]], "Before a release": [[371, "before-a-release"]], "Preparing a release PR": [[371, "preparing-a-release-pr"]], "Major version release": [[371, "major-version-release"]], "Minor version release (also known as bug-fix release)": [[371, "minor-version-release-also-known-as-bug-fix-release"]], "Making a release": [[371, "making-a-release"]], "Release checklist": [[371, "release-checklist"]], "Merging Pull Requests": [[371, "merging-pull-requests"]], "The scikit-learn.org web site": [[371, "the-scikit-learn-org-web-site"]], "Experimental features": [[371, "experimental-features"]], "Utilities for Developers": [[376, "utilities-for-developers"]], "Validation Tools": [[376, "validation-tools"]], "Efficient Linear Algebra & Array Operations": [[376, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[376, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[376, "efficient-routines-for-sparse-matrices"]], "Graph Routines": [[376, "graph-routines"]], "Testing Functions": [[376, "testing-functions"]], "Multiclass and multilabel utility function": [[376, "multiclass-and-multilabel-utility-function"]], "Helper Functions": [[376, "helper-functions"]], "Hash Functions": [[376, "hash-functions"]], "Warnings and Exceptions": [[376, "warnings-and-exceptions"]], "Frequently Asked Questions": [[378, "frequently-asked-questions"]], "Table of Contents": [[378, "table-of-contents"]], "About the project": [[378, "about-the-project"]], "What is the project name (a lot of people get it wrong)?": [[378, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "How do you pronounce the project name?": [[378, "how-do-you-pronounce-the-project-name"]], "Why scikit?": [[378, "why-scikit"]], "Do you support PyPy?": [[378, "do-you-support-pypy"]], "Implementation decisions": [[378, "implementation-decisions"]], "Why is there no support for deep or reinforcement learning / Will there be support for deep or reinforcement learning in scikit-learn?": [[378, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-support-for-deep-or-reinforcement-learning-in-scikit-learn"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[378, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[378, "why-did-you-remove-hmms-from-scikit-learn"]], "Will you add GPU support?": [[378, "will-you-add-gpu-support"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[378, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does Scikit-learn not directly work with, for example, pandas.DataFrame?": [[378, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Do you plan to implement transform for target y in a pipeline?": [[378, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Why are there so many different estimators for linear models?": [[378, "why-are-there-so-many-different-estimators-for-linear-models"]], "Contributing": [[378, "contributing"], [368, "contributing"]], "How can I contribute to scikit-learn?": [[378, "how-can-i-contribute-to-scikit-learn"]], "Why is my pull request not getting any attention?": [[378, "why-is-my-pull-request-not-getting-any-attention"]], "What are the inclusion criteria for new algorithms ?": [[378, "what-are-the-inclusion-criteria-for-new-algorithms"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[378, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Using scikit-learn": [[378, "using-scikit-learn"]], "What\u2019s the best way to get help on scikit-learn usage?": [[378, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "How should I save, export or deploy estimators for production?": [[378, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How can I create a bunch object?": [[378, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[378, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How do I deal with string data (or trees, graphs\u2026)?": [[378, "how-do-i-deal-with-string-data-or-trees-graphs"]], "Why do I sometime get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[378, "why-do-i-sometime-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why does my job use more cores than specified with n_jobs?": [[378, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "How do I set a random_state for an entire execution?": [[378, "how-do-i-set-a-random-state-for-an-entire-execution"]], "sklearn.base.TransformerMixin": [[414, "sklearn-base-transformermixin"]], "Examples using sklearn.base.TransformerMixin": [[414, "examples-using-sklearn-base-transformermixin"]], "sklearn.base.RegressorMixin": [[413, "sklearn-base-regressormixin"]], "API Reference": [[391, "api-reference"]], "sklearn.base: Base classes and utility functions": [[391, "module-sklearn.base"]], "Base classes": [[391, "base-classes"]], "Functions": [[391, "functions"], [391, "id1"]], "sklearn.calibration: Probability Calibration": [[391, "module-sklearn.calibration"]], "sklearn.cluster: Clustering": [[391, "module-sklearn.cluster"]], "Classes": [[391, "classes"]], "sklearn.compose: Composite Estimators": [[391, "module-sklearn.compose"]], "sklearn.covariance: Covariance Estimators": [[391, "module-sklearn.covariance"]], "sklearn.cross_decomposition: Cross decomposition": [[391, "module-sklearn.cross_decomposition"]], "sklearn.datasets: Datasets": [[391, "module-sklearn.datasets"]], "Loaders": [[391, "loaders"]], "Samples generator": [[391, "samples-generator"]], "sklearn.decomposition: Matrix Decomposition": [[391, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis: Discriminant Analysis": [[391, "module-sklearn.discriminant_analysis"]], "sklearn.dummy: Dummy estimators": [[391, "module-sklearn.dummy"]], "sklearn.ensemble: Ensemble Methods": [[391, "module-sklearn.ensemble"]], "sklearn.exceptions: Exceptions and warnings": [[391, "module-sklearn.exceptions"]], "sklearn.experimental: Experimental": [[391, "module-sklearn.experimental"]], "sklearn.feature_extraction: Feature Extraction": [[391, "module-sklearn.feature_extraction"]], "From images": [[391, "module-sklearn.feature_extraction.image"]], "From text": [[391, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection: Feature Selection": [[391, "module-sklearn.feature_selection"]], "sklearn.gaussian_process: Gaussian Processes": [[391, "module-sklearn.gaussian_process"]], "sklearn.impute: Impute": [[391, "module-sklearn.impute"]], "sklearn.inspection: Inspection": [[391, "module-sklearn.inspection"]], "sklearn.isotonic: Isotonic regression": [[391, "module-sklearn.isotonic"]], "sklearn.kernel_approximation: Kernel Approximation": [[391, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge: Kernel Ridge Regression": [[391, "module-sklearn.kernel_ridge"]], "sklearn.linear_model: Linear Models": [[391, "module-sklearn.linear_model"]], "Linear classifiers": [[391, "linear-classifiers"]], "Classical linear regressors": [[391, "classical-linear-regressors"]], "Regressors with variable selection": [[391, "regressors-with-variable-selection"]], "Bayesian regressors": [[391, "bayesian-regressors"]], "Multi-task linear regressors with variable selection": [[391, "multi-task-linear-regressors-with-variable-selection"]], "Outlier-robust regressors": [[391, "outlier-robust-regressors"]], "Generalized linear models (GLM) for regression": [[391, "generalized-linear-models-glm-for-regression"]], "sklearn.manifold: Manifold Learning": [[391, "module-sklearn.manifold"]], "sklearn.metrics: Metrics": [[391, "sklearn-metrics-metrics"]], "Model Selection Interface": [[391, "model-selection-interface"]], "Biclustering metrics": [[391, "biclustering-metrics"]], "Distance metrics": [[391, "distance-metrics"]], "Pairwise metrics": [[391, "pairwise-metrics"]], "sklearn.mixture: Gaussian Mixture Models": [[391, "module-sklearn.mixture"]], "sklearn.model_selection: Model Selection": [[391, "module-sklearn.model_selection"]], "Splitter Classes": [[391, "splitter-classes"]], "Splitter Functions": [[391, "splitter-functions"]], "Hyper-parameter optimizers": [[391, "hyper-parameter-optimizers"]], "Model validation": [[391, "model-validation"]], "sklearn.multiclass: Multiclass classification": [[391, "module-sklearn.multiclass"]], "Multiclass classification strategies": [[391, "multiclass-classification-strategies"]], "sklearn.multioutput: Multioutput regression and classification": [[391, "module-sklearn.multioutput"]], "sklearn.naive_bayes: Naive Bayes": [[391, "module-sklearn.naive_bayes"]], "sklearn.neighbors: Nearest Neighbors": [[391, "module-sklearn.neighbors"]], "sklearn.neural_network: Neural network models": [[391, "module-sklearn.neural_network"]], "sklearn.pipeline: Pipeline": [[391, "module-sklearn.pipeline"]], "sklearn.preprocessing: Preprocessing and Normalization": [[391, "module-sklearn.preprocessing"]], "sklearn.random_projection: Random projection": [[391, "module-sklearn.random_projection"]], "sklearn.semi_supervised: Semi-Supervised Learning": [[391, "module-sklearn.semi_supervised"]], "sklearn.svm: Support Vector Machines": [[391, "module-sklearn.svm"]], "sklearn.tree: Decision Trees": [[391, "module-sklearn.tree"]], "sklearn.utils: Utilities": [[391, "module-sklearn.utils"]], "Recently deprecated": [[391, "recently-deprecated"]], "To be removed in 1.3": [[391, "to-be-removed-in-1-3"]], "Installing the development version of scikit-learn": [[366, "installing-the-development-version-of-scikit-learn"]], "Installing nightly builds": [[366, "installing-nightly-builds"]], "Building from source": [[366, "building-from-source"]], "Dependencies": [[366, "dependencies"]], "Runtime dependencies": [[366, "runtime-dependencies"]], "Build dependencies": [[366, "build-dependencies"]], "Test dependencies": [[366, "test-dependencies"]], "Building a specific version from a tag": [[366, "building-a-specific-version-from-a-tag"]], "Editable mode": [[366, "editable-mode"]], "Platform-specific instructions": [[366, "platform-specific-instructions"]], "Windows": [[366, "windows"]], "macOS": [[366, "macos"]], "macOS compilers from conda-forge": [[366, "macos-compilers-from-conda-forge"]], "macOS compilers from Homebrew": [[366, "macos-compilers-from-homebrew"]], "Linux": [[366, "linux"]], "Linux compilers from the system": [[366, "linux-compilers-from-the-system"]], "Linux compilers from conda-forge": [[366, "linux-compilers-from-conda-forge"]], "FreeBSD": [[366, "freebsd"]], "Alternative compilers": [[366, "alternative-compilers"]], "Parallel builds": [[366, "parallel-builds"]], "Feature selection": [[401, "feature-selection"]], "Removing features with low variance": [[401, "removing-features-with-low-variance"]], "Univariate feature selection": [[401, "univariate-feature-selection"], [142, "id1"]], "Feature selection with sparse data": [[401, null]], "Recursive feature elimination": [[401, "recursive-feature-elimination"], [144, "recursive-feature-elimination"]], "Feature selection using SelectFromModel": [[401, "feature-selection-using-selectfrommodel"]], "L1-based feature selection": [[401, "l1-based-feature-selection"]], "L1-recovery and compressive sensing": [[401, "compressive-sensing"]], "Tree-based feature selection": [[401, "tree-based-feature-selection"]], "Sequential Feature Selection": [[401, "sequential-feature-selection"]], "Feature selection as part of a pipeline": [[401, "feature-selection-as-part-of-a-pipeline"]], "Model selection and evaluation": [[387, "model-selection-and-evaluation"]], "How to optimize for speed": [[373, "how-to-optimize-for-speed"]], "Python, Cython or C/C++?": [[373, "python-cython-or-c-c"]], "Profiling Python code": [[373, "profiling-python-code"]], "Memory usage profiling": [[373, "memory-usage-profiling"]], "Performance tips for the Cython developer": [[373, "performance-tips-for-the-cython-developer"]], "Using OpenMP": [[373, "using-openmp"]], "Profiling compiled extensions": [[373, "profiling-compiled-extensions"]], "Using yep and gperftools": [[373, "using-yep-and-gperftools"]], "Using gprof": [[373, "using-gprof"]], "Using valgrind / callgrind / kcachegrind": [[373, "using-valgrind-callgrind-kcachegrind"]], "kcachegrind": [[373, "kcachegrind"]], "Multi-core parallelism using joblib.Parallel": [[373, "multi-core-parallelism-using-joblib-parallel"]], "A simple algorithmic trick: warm restarts": [[373, "a-simple-algorithmic-trick-warm-restarts"]], "sklearn.covariance.oas": [[405, "sklearn-covariance-oas"]], "sklearn.base.BaseEstimator": [[406, "sklearn-base-baseestimator"]], "Examples using sklearn.base.BaseEstimator": [[406, "examples-using-sklearn-base-baseestimator"]], "Our community, our values": [[368, null]], "Ways to contribute": [[368, "ways-to-contribute"]], "Contributing to related projects": [[368, null]], "Submitting a bug report or a feature request": [[368, "submitting-a-bug-report-or-a-feature-request"]], "How to make a good bug report": [[368, "how-to-make-a-good-bug-report"]], "Contributing code": [[368, "contributing-code"]], "Video resources": [[368, "video-resources"]], "How to contribute": [[368, "how-to-contribute"]], "Learning git:": [[368, null]], "Pull request checklist": [[368, "pull-request-checklist"]], "Continuous Integration (CI)": [[368, "continuous-integration-ci"]], "Stalled pull requests": [[368, "stalled-pull-requests"]], "Stalled and Unclaimed Issues": [[368, "stalled-and-unclaimed-issues"]], "Issues for New Contributors": [[368, "issues-for-new-contributors"]], "good first issue tag": [[368, null]], "Easy tag": [[368, null]], "help wanted tag": [[368, null]], "Building the documentation": [[368, "building-the-documentation"]], "Guidelines for writing documentation": [[368, "guidelines-for-writing-documentation"]], "Cross-referencing": [[368, "cross-referencing"]], "Generated documentation on GitHub Actions": [[368, "generated-documentation-on-github-actions"]], "Testing and improving test coverage": [[368, "testing-and-improving-test-coverage"]], "Writing matplotlib related tests": [[368, "writing-matplotlib-related-tests"]], "Workflow to improve test coverage": [[368, "workflow-to-improve-test-coverage"]], "Monitoring performance": [[368, "monitoring-performance"]], "Issue Tracker Tags": [[368, "issue-tracker-tags"]], "Maintaining backwards compatibility": [[368, "maintaining-backwards-compatibility"]], "Deprecation": [[368, "deprecation"]], "Change the default value of a parameter": [[368, "change-the-default-value-of-a-parameter"]], "Code Review Guidelines": [[368, "code-review-guidelines"]], "Communication Guidelines": [[368, "communication-guidelines"]], "Reading the existing code base": [[368, "reading-the-existing-code-base"]], "Spectral Co-Clustering": [[389, "spectral-co-clustering"]], "Spectral Biclustering": [[389, "spectral-biclustering"]], "Biclustering evaluation": [[389, "biclustering-evaluation"]], "sklearn.base.is_regressor": [[417, "sklearn-base-is-regressor"]], "Parallelism, resource management, and configuration": [[356, "parallelism-resource-management-and-configuration"]], "Higher-level parallelism with joblib": [[356, "higher-level-parallelism-with-joblib"]], "Lower-level parallelism with OpenMP": [[356, "lower-level-parallelism-with-openmp"]], "Parallel NumPy and SciPy routines from numerical libraries": [[356, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Oversubscription: spawning too many threads": [[356, "oversubscription-spawning-too-many-threads"]], "Configuration switches": [[356, "configuration-switches"]], "Python API": [[356, "python-api"]], "Environment variables": [[356, "environment-variables"]], "SKLEARN_ASSUME_FINITE": [[356, "sklearn-assume-finite"]], "SKLEARN_WORKING_MEMORY": [[356, "sklearn-working-memory"]], "SKLEARN_SEED": [[356, "sklearn-seed"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[356, "sklearn-tests-global-random-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[356, "sklearn-skip-network-tests"]], "SKLEARN_RUN_FLOAT32_TESTS": [[356, "sklearn-run-float32-tests"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[356, "sklearn-enable-debug-cython-directives"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[356, "sklearn-build-enable-debug-symbols"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[356, "sklearn-pairwise-dist-chunk-size"]], "sklearn.base.ClassifierMixin": [[409, "sklearn-base-classifiermixin"]], "Glossary of Common Terms and API Elements": [[380, "glossary-of-common-terms-and-api-elements"]], "General Concepts": [[380, "general-concepts"]], "Class APIs and Estimator Types": [[380, "class-apis-and-estimator-types"]], "Target Types": [[380, "target-types"]], "Methods": [[380, "methods"]], "Parameters": [[380, "parameters"], [399, "parameters"]], "Attributes": [[380, "attributes"]], "Data and sample properties": [[380, "data-and-sample-properties"]], "Installing scikit-learn": [[383, "installing-scikit-learn"]], "Installing the latest release": [[383, "installing-the-latest-release"]], "Installing on Apple Silicon M1 hardware": [[383, "installing-on-apple-silicon-m1-hardware"]], "Third party distributions of scikit-learn": [[383, "third-party-distributions-of-scikit-learn"]], "Alpine Linux": [[383, "alpine-linux"]], "Arch Linux": [[383, "arch-linux"]], "Debian/Ubuntu": [[383, "debian-ubuntu"]], "Fedora": [[383, "fedora"]], "NetBSD": [[383, "netbsd"]], "MacPorts for Mac OSX": [[383, "macports-for-mac-osx"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[383, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Intel conda channel": [[383, "intel-conda-channel"]], "WinPython for Windows": [[383, "winpython-for-windows"]], "Troubleshooting": [[383, "troubleshooting"]], "Error caused by file path length limit on Windows": [[383, "error-caused-by-file-path-length-limit-on-windows"]], "Developers\u2019 Tips and Tricks": [[375, "developers-tips-and-tricks"]], "Productivity and sanity-preserving tips": [[375, "productivity-and-sanity-preserving-tips"]], "Folding and unfolding outdated diffs on pull requests": [[375, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Checking out pull requests as remote-tracking branches": [[375, "checking-out-pull-requests-as-remote-tracking-branches"]], "Display code coverage in pull requests": [[375, "display-code-coverage-in-pull-requests"]], "Useful pytest aliases and flags": [[375, "useful-pytest-aliases-and-flags"]], "Standard replies for reviewing": [[375, "standard-replies-for-reviewing"]], "Debugging memory errors in Cython with valgrind": [[375, "debugging-memory-errors-in-cython-with-valgrind"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[375, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Probability calibration": [[390, "probability-calibration"]], "Calibrating a classifier": [[390, "calibrating-a-classifier"]], "Sigmoid": [[390, "sigmoid"]], "Isotonic": [[390, "isotonic"]], "Multiclass support": [[390, "multiclass-support"]], "Input data": [[392, null]], "Overview of clustering methods": [[392, "overview-of-clustering-methods"]], "K-means": [[392, "k-means"]], "Low-level parallelism": [[392, "low-level-parallelism"], [399, "low-level-parallelism"]], "Mini Batch K-Means": [[392, "mini-batch-k-means"]], "Affinity Propagation": [[392, "affinity-propagation"]], "Mean Shift": [[392, "mean-shift"]], "Spectral clustering": [[392, "spectral-clustering"]], "Different label assignment strategies": [[392, "different-label-assignment-strategies"]], "Spectral Clustering Graphs": [[392, "spectral-clustering-graphs"]], "Hierarchical clustering": [[392, "hierarchical-clustering"]], "FeatureAgglomeration": [[392, null]], "Different linkage type: Ward, complete, average, and single linkage": [[392, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Visualization of cluster hierarchy": [[392, "visualization-of-cluster-hierarchy"]], "Adding connectivity constraints": [[392, "adding-connectivity-constraints"]], "Varying the metric": [[392, "varying-the-metric"]], "Bisecting K-Means": [[392, "bisecting-k-means"]], "DBSCAN": [[392, "dbscan"]], "Memory consumption for large sample sizes": [[392, null]], "OPTICS": [[392, "optics"]], "Comparison with DBSCAN": [[392, null]], "Computational Complexity": [[392, null]], "BIRCH": [[392, "birch"]], "Clustering performance evaluation": [[392, "clustering-performance-evaluation"]], "Rand index": [[392, "rand-index"]], "Advantages": [[392, "advantages"], [392, "id10"], [392, "id17"], [392, "id21"], [392, "id24"], [392, "id27"], [392, "id31"], [392, "id35"]], "Drawbacks": [[392, "drawbacks"], [392, "id11"], [392, "id18"], [392, "id22"], [392, "id25"], [392, "id28"], [392, "id32"], [392, "id36"]], "Mutual Information based scores": [[392, "mutual-information-based-scores"]], "Homogeneity, completeness and V-measure": [[392, "homogeneity-completeness-and-v-measure"]], "Fowlkes-Mallows scores": [[392, "fowlkes-mallows-scores"]], "Silhouette Coefficient": [[392, "silhouette-coefficient"]], "Calinski-Harabasz Index": [[392, "calinski-harabasz-index"]], "Davies-Bouldin Index": [[392, "davies-bouldin-index"]], "Contingency Matrix": [[392, "contingency-matrix"]], "Pair Confusion Matrix": [[392, "pair-confusion-matrix"]], "sklearn.cluster.dbscan": [[403, "sklearn-cluster-dbscan"]], "Dataset loading utilities": [[361, "dataset-loading-utilities"], [372, "dataset-loading-utilities"]], "sklearn.base.OneToOneFeatureMixin": [[412, "sklearn-base-onetoonefeaturemixin"]], "Model persistence": [[386, "model-persistence"]], "Python specific serialization": [[386, "python-specific-serialization"]], "Security & maintainability limitations": [[386, "security-maintainability-limitations"]], "A more secure format: skops": [[386, "a-more-secure-format-skops"]], "Interoperable formats": [[386, "interoperable-formats"]], "Developer\u2019s Guide": [[370, "developer-s-guide"]], "Cross-validation: evaluating estimator performance": [[396, "cross-validation-evaluating-estimator-performance"]], "Computing cross-validated metrics": [[396, "computing-cross-validated-metrics"]], "Data transformation with held out data": [[396, null]], "The cross_validate function and multiple metric evaluation": [[396, "the-cross-validate-function-and-multiple-metric-evaluation"]], "Obtaining predictions by cross-validation": [[396, "obtaining-predictions-by-cross-validation"]], "Cross validation iterators": [[396, "cross-validation-iterators"]], "Cross-validation iterators for i.i.d. data": [[396, "cross-validation-iterators-for-i-i-d-data"]], "K-fold": [[396, "k-fold"]], "Repeated K-Fold": [[396, "repeated-k-fold"]], "Leave One Out (LOO)": [[396, "leave-one-out-loo"]], "Leave P Out (LPO)": [[396, "leave-p-out-lpo"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[396, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Cross-validation iterators with stratification based on class labels.": [[396, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Stratified k-fold": [[396, "stratified-k-fold"]], "Stratified Shuffle Split": [[396, "stratified-shuffle-split"]], "Cross-validation iterators for grouped data": [[396, "cross-validation-iterators-for-grouped-data"]], "Group k-fold": [[396, "group-k-fold"]], "StratifiedGroupKFold": [[396, "stratifiedgroupkfold"]], "Leave One Group Out": [[396, "leave-one-group-out"]], "Leave P Groups Out": [[396, "leave-p-groups-out"]], "Group Shuffle Split": [[396, "group-shuffle-split"]], "Predefined Fold-Splits / Validation-Sets": [[396, "predefined-fold-splits-validation-sets"]], "Using cross-validation iterators to split train and test": [[396, "using-cross-validation-iterators-to-split-train-and-test"]], "Cross validation of time series data": [[396, "cross-validation-of-time-series-data"]], "Time Series Split": [[396, "time-series-split"]], "A note on shuffling": [[396, "a-note-on-shuffling"]], "Cross validation and model selection": [[396, "cross-validation-and-model-selection"]], "Permutation test score": [[396, "permutation-test-score"], [263, "permutation-test-score"]], "Strategies to scale computationally: bigger data": [[357, "strategies-to-scale-computationally-bigger-data"]], "Scaling with instances using out-of-core learning": [[357, "scaling-with-instances-using-out-of-core-learning"]], "Streaming instances": [[357, "streaming-instances"]], "Extracting features": [[357, "extracting-features"]], "Incremental learning": [[357, "incremental-learning"]], "Developing scikit-learn estimators": [[369, "developing-scikit-learn-estimators"]], "APIs of scikit-learn objects": [[369, "apis-of-scikit-learn-objects"]], "Different objects": [[369, "different-objects"]], "Instantiation": [[369, "instantiation"]], "Fitting": [[369, "fitting"]], "Estimated Attributes": [[369, "estimated-attributes"]], "Optional Arguments": [[369, "optional-arguments"]], "Universal attributes": [[369, "universal-attributes"]], "Rolling your own estimator": [[369, "rolling-your-own-estimator"]], "Project template:": [[369, null]], "BaseEstimator and mixins:": [[369, null]], "get_params and set_params": [[369, "get-params-and-set-params"]], "Parameters and init": [[369, "parameters-and-init"]], "Cloning": [[369, "cloning"]], "Pipeline compatibility": [[369, "pipeline-compatibility"]], "Estimator types": [[369, "estimator-types"]], "Specific models": [[369, "specific-models"]], "Estimator Tags": [[369, "estimator-tags"]], "Developer API for set_output": [[369, "developer-api-for-set-output"]], "Coding guidelines": [[369, "coding-guidelines"]], "Input validation": [[369, "input-validation"]], "Random Numbers": [[369, "random-numbers"]], "Numerical assertions in tests": [[369, "numerical-assertions-in-tests"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[408, "sklearn-base-classnameprefixfeaturesoutmixin"]], "Decomposing signals in components (matrix factorization problems)": [[397, "decomposing-signals-in-components-matrix-factorization-problems"]], "Principal component analysis (PCA)": [[397, "principal-component-analysis-pca"]], "Exact PCA and probabilistic interpretation": [[397, "exact-pca-and-probabilistic-interpretation"]], "PCA using randomized SVD": [[397, "pca-using-randomized-svd"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[397, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Kernel Principal Component Analysis (kPCA)": [[397, "kernel-principal-component-analysis-kpca"]], "Exact Kernel PCA": [[397, "exact-kernel-pca"]], "Choice of solver for Kernel PCA": [[397, "choice-of-solver-for-kernel-pca"]], "Truncated singular value decomposition and latent semantic analysis": [[397, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "Dictionary Learning": [[397, "dictionary-learning"]], "Generic dictionary learning": [[397, "generic-dictionary-learning"]], "Mini-batch dictionary learning": [[397, "mini-batch-dictionary-learning"]], "Clustering for dictionary learning": [[397, null]], "Factor Analysis": [[397, "factor-analysis"]], "Independent component analysis (ICA)": [[397, "independent-component-analysis-ica"]], "Non-negative matrix factorization (NMF or NNMF)": [[397, "non-negative-matrix-factorization-nmf-or-nnmf"]], "NMF with the Frobenius norm": [[397, "nmf-with-the-frobenius-norm"]], "NMF with a beta-divergence": [[397, "nmf-with-a-beta-divergence"]], "Mini-batch Non Negative Matrix Factorization": [[397, "mini-batch-non-negative-matrix-factorization"]], "Latent Dirichlet Allocation (LDA)": [[397, "latent-dirichlet-allocation-lda"]], "Loading other datasets": [[362, "loading-other-datasets"]], "Sample images": [[362, "sample-images"]], "Datasets in svmlight / libsvm format": [[362, "datasets-in-svmlight-libsvm-format"]], "Related links:": [[362, null]], "Downloading datasets from the openml.org repository": [[362, "downloading-datasets-from-the-openml-org-repository"]], "Dataset Versions": [[362, "dataset-versions"]], "ARFF parser": [[362, "arff-parser"]], "Getting Started": [[379, "getting-started"]], "Fitting and predicting: estimator basics": [[379, "fitting-and-predicting-estimator-basics"]], "Transformers and pre-processors": [[379, "transformers-and-pre-processors"]], "Pipelines: chaining pre-processors and estimators": [[379, "pipelines-chaining-pre-processors-and-estimators"]], "Model evaluation": [[379, "model-evaluation"]], "Automatic parameter searches": [[379, "automatic-parameter-searches"]], "Next steps": [[379, "next-steps"]], "sklearn.calibration.CalibratedClassifierCV": [[418, "sklearn-calibration-calibratedclassifiercv"]], "Examples using sklearn.calibration.CalibratedClassifierCV": [[418, "examples-using-sklearn-calibration-calibratedclassifiercv"]], "sklearn.calibration.calibration_curve": [[420, "sklearn-calibration-calibration-curve"]], "Bagging meta-estimator": [[399, "bagging-meta-estimator"]], "Forests of randomized trees": [[399, "forests-of-randomized-trees"]], "Random Forests": [[399, "random-forests"]], "Extremely Randomized Trees": [[399, "extremely-randomized-trees"]], "Parallelization": [[399, "parallelization"]], "Feature importance evaluation": [[399, "feature-importance-evaluation"]], "Totally Random Trees Embedding": [[399, "totally-random-trees-embedding"]], "AdaBoost": [[399, "adaboost"]], "Gradient Tree Boosting": [[399, "gradient-tree-boosting"]], "Fitting additional weak-learners": [[399, "fitting-additional-weak-learners"]], "Controlling the tree size": [[399, "controlling-the-tree-size"]], "Loss Functions": [[399, "loss-functions"]], "Shrinkage via learning rate": [[399, "shrinkage-via-learning-rate"]], "Subsampling": [[399, "subsampling"]], "Interpretation with feature importance": [[399, "interpretation-with-feature-importance"]], "Histogram-Based Gradient Boosting": [[399, "histogram-based-gradient-boosting"]], "Missing values support": [[399, "missing-values-support"]], "Sample weight support": [[399, "sample-weight-support"]], "Categorical Features Support": [[399, "categorical-features-support"]], "Interaction constraints": [[399, "interaction-constraints"]], "Why it\u2019s faster": [[399, "why-it-s-faster"]], "Voting Classifier": [[399, "voting-classifier"]], "Majority Class Labels (Majority/Hard Voting)": [[399, "majority-class-labels-majority-hard-voting"]], "Weighted Average Probabilities (Soft Voting)": [[399, "weighted-average-probabilities-soft-voting"]], "Using the VotingClassifier with GridSearchCV": [[399, "using-the-votingclassifier-with-gridsearchcv"]], "Voting Regressor": [[399, "voting-regressor"]], "Stacked generalization": [[399, "stacked-generalization"]], "sklearn.cluster.DBSCAN": [[425, "sklearn-cluster-dbscan"]], "Examples using sklearn.cluster.DBSCAN": [[425, "examples-using-sklearn-cluster-dbscan"]], "sklearn.base.clone": [[415, "sklearn-base-clone"]], "Real world datasets": [[363, "real-world-datasets"]], "The Olivetti faces dataset": [[363, "the-olivetti-faces-dataset"]], "The 20 newsgroups text dataset": [[363, "the-20-newsgroups-text-dataset"]], "Converting text to vectors": [[363, "converting-text-to-vectors"]], "Filtering text for more realistic training": [[363, "filtering-text-for-more-realistic-training"]], "Data Considerations": [[363, null]], "Recommendation": [[363, null]], "The Labeled Faces in the Wild face recognition dataset": [[363, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "Forest covertypes": [[363, "forest-covertypes"]], "RCV1 dataset": [[363, "rcv1-dataset"]], "Kddcup 99 dataset": [[363, "kddcup-99-dataset"]], "California Housing dataset": [[363, "california-housing-dataset"]], "Generated datasets": [[364, "generated-datasets"]], "Generators for classification and clustering": [[364, "generators-for-classification-and-clustering"]], "Single label": [[364, "single-label"]], "Multilabel": [[364, "multilabel"]], "Generators for regression": [[364, "generators-for-regression"]], "Generators for manifold learning": [[364, "generators-for-manifold-learning"]], "Generators for decomposition": [[364, "generators-for-decomposition"]], "sklearn.calibration.CalibrationDisplay": [[419, "sklearn-calibration-calibrationdisplay"]], "Table Of Contents": [[358, "table-of-contents"]], "sklearn.base.ClusterMixin": [[410, "sklearn-base-clustermixin"]], "Computational Performance": [[355, "computational-performance"]], "Bulk versus Atomic mode": [[355, "bulk-versus-atomic-mode"]], "Configuring Scikit-learn for reduced validation overhead": [[355, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Influence of the Number of Features": [[355, "influence-of-the-number-of-features"]], "Influence of the Input Data Representation": [[355, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[355, "influence-of-the-model-complexity"]], "Feature Extraction Latency": [[355, "feature-extraction-latency"]], "Prediction Throughput": [[355, "prediction-throughput"]], "Tips and Tricks": [[355, "tips-and-tricks"]], "Linear algebra libraries": [[355, "linear-algebra-libraries"]], "Limiting Working Memory": [[355, "limiting-working-memory"]], "Model Compression": [[355, "model-compression"]], "Model Reshaping": [[355, "model-reshaping"]], "Links": [[355, "links"]], "Crafting a minimal reproducer for scikit-learn": [[372, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Good practices": [[372, "good-practices"]], "Provide a failing code example with minimal comments": [[372, "provide-a-failing-code-example-with-minimal-comments"]], "Boil down your script to something as small as possible": [[372, "boil-down-your-script-to-something-as-small-as-possible"]], "DO NOT report your data unless it is extremely necessary": [[372, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Use markdown formatting": [[372, "use-markdown-formatting"]], "Synthetic dataset": [[372, "synthetic-dataset"]], "NumPy": [[372, "numpy"]], "Pandas": [[372, "pandas"]], "make_regression": [[372, "make-regression"]], "make_classification": [[372, "make-classification"]], "make_blobs": [[372, "make-blobs"]], "sklearn.cluster.BisectingKMeans": [[424, "sklearn-cluster-bisectingkmeans"]], "Examples using sklearn.cluster.BisectingKMeans": [[424, "examples-using-sklearn-cluster-bisectingkmeans"]], "Dataset transformations": [[360, "dataset-transformations"]], "Empirical covariance": [[394, "empirical-covariance"]], "Shrunk Covariance": [[394, "shrunk-covariance"]], "Basic shrinkage": [[394, "basic-shrinkage"]], "Ledoit-Wolf shrinkage": [[394, "ledoit-wolf-shrinkage"]], "Oracle Approximating Shrinkage": [[394, "oracle-approximating-shrinkage"]], "Sparse inverse covariance": [[394, "sparse-inverse-covariance"]], "Robust Covariance Estimation": [[394, "robust-covariance-estimation"]], "Minimum Covariance Determinant": [[394, "minimum-covariance-determinant"]], "sklearn.base.is_classifier": [[416, "sklearn-base-is-classifier"]], "Toy datasets": [[365, "toy-datasets"]], "Iris plants dataset": [[365, "iris-plants-dataset"]], "Optical recognition of handwritten digits dataset": [[365, "optical-recognition-of-handwritten-digits-dataset"]], "Linnerrud dataset": [[365, "linnerrud-dataset"]], "Wine recognition dataset": [[365, "wine-recognition-dataset"]], "Breast cancer wisconsin (diagnostic) dataset": [[365, "breast-cancer-wisconsin-diagnostic-dataset"]], "sklearn.cluster.AffinityPropagation": [[421, "sklearn-cluster-affinitypropagation"]], "Examples using sklearn.cluster.AffinityPropagation": [[421, "examples-using-sklearn-cluster-affinitypropagation"]], "sklearn.decomposition.fastica": [[404, "sklearn-decomposition-fastica"]], "Scikit-learn governance and decision-making": [[381, "scikit-learn-governance-and-decision-making"]], "Roles And Responsibilities": [[381, "roles-and-responsibilities"]], "Contributors": [[381, "contributors"]], "Communication team": [[381, "communication-team"]], "Core developers": [[381, "core-developers"]], "Technical Committee": [[381, "technical-committee"]], "Decision Making Process": [[381, "decision-making-process"]], "Governance Model Changes": [[381, "governance-model-changes"]], "Enhancement proposals (SLEPs)": [[381, "enhancement-proposals-sleps"]], "sklearn.base.DensityMixin": [[411, "sklearn-base-densitymixin"]], "Dispatching": [[377, "dispatching"]], "sklearn.cluster.AgglomerativeClustering": [[422, "sklearn-cluster-agglomerativeclustering"]], "Examples using sklearn.cluster.AgglomerativeClustering": [[422, "examples-using-sklearn-cluster-agglomerativeclustering"]], "sklearn.cluster.Birch": [[423, "sklearn-cluster-birch"]], "Examples using sklearn.cluster.Birch": [[423, "examples-using-sklearn-cluster-birch"]], "Density Estimation": [[398, "density-estimation"]], "Density Estimation: Histograms": [[398, "density-estimation-histograms"]], "Kernel Density Estimation": [[398, "kernel-density-estimation"], [281, "kernel-density-estimation"]], "Feature extraction": [[400, "feature-extraction"]], "Loading features from dicts": [[400, "loading-features-from-dicts"]], "Feature hashing": [[400, "feature-hashing"]], "Text feature extraction": [[400, "text-feature-extraction"]], "The Bag of Words representation": [[400, "the-bag-of-words-representation"]], "Common Vectorizer usage": [[400, "common-vectorizer-usage"]], "Using stop words": [[400, "using-stop-words"]], "Tf\u2013idf term weighting": [[400, "tfidf-term-weighting"]], "Decoding text files": [[400, "decoding-text-files"]], "Applications and examples": [[400, "applications-and-examples"]], "Limitations of the Bag of Words representation": [[400, "limitations-of-the-bag-of-words-representation"]], "Vectorizing a large text corpus with the hashing trick": [[400, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Performing out-of-core scaling with HashingVectorizer": [[400, "performing-out-of-core-scaling-with-hashingvectorizer"]], "Customizing the vectorizer classes": [[400, "customizing-the-vectorizer-classes"]], "Image feature extraction": [[400, "image-feature-extraction"]], "Patch extraction": [[400, "patch-extraction"]], "Connectivity graph of an image": [[400, "connectivity-graph-of-an-image"]], "Bug triaging and issue curation": [[367, "bug-triaging-and-issue-curation"]], "Working on issues to improve them": [[367, "working-on-issues-to-improve-them"]], "Fruitful discussions": [[367, null]], "Working on PRs to help review": [[367, "working-on-prs-to-help-review"]], "Triaging operations for members of the core and contributor experience teams": [[367, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Closing issues: a tough call": [[367, null]], "A typical workflow for triaging issues": [[367, "a-typical-workflow-for-triaging-issues"]], "PLSCanonical": [[395, "plscanonical"]], "Transforming data": [[395, "transforming-data"]], "Predicting the targets Y": [[395, "predicting-the-targets-y"]], "PLSSVD": [[395, "plssvd"]], "PLSRegression": [[395, "plsregression"]], "Canonical Correlation Analysis": [[395, "canonical-correlation-analysis"]], "Reference:": [[395, null]], "Inspection": [[382, "inspection"], [164, "inspection"], [165, "inspection"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[259, "plotting-learning-curves-and-checking-models-scalability"]], "Learning Curve": [[259, "learning-curve"]], "Complexity analysis": [[259, "complexity-analysis"]], "Evaluation of outlier detection estimators": [[235, "evaluation-of-outlier-detection-estimators"]], "Define a data preprocessing function": [[235, "define-a-data-preprocessing-function"]], "Define an outlier prediction function": [[235, "define-an-outlier-prediction-function"]], "Plot and interpret results": [[235, "plot-and-interpret-results"]], "Novelty detection with Local Outlier Factor (LOF)": [[283, "novelty-detection-with-local-outlier-factor-lof"]], "Theil-Sen Regression": [[214, "theil-sen-regression"]], "Outliers only in the y direction": [[214, "outliers-only-in-the-y-direction"]], "Outliers in the X direction": [[214, "outliers-in-the-x-direction"]], "Face completion with a multi-output estimators": [[234, "face-completion-with-a-multi-output-estimators"]], "Comparison of Manifold Learning methods": [[218, "comparison-of-manifold-learning-methods"]], "Define algorithms for the manifold learning": [[218, "define-algorithms-for-the-manifold-learning"]], "Locally Linear Embeddings": [[218, "locally-linear-embeddings"]], "Isomap Embedding": [[218, "isomap-embedding"]], "Multidimensional scaling": [[218, "multidimensional-scaling"]], "Spectral embedding for non-linear dimensionality reduction": [[218, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "T-distributed Stochastic Neighbor Embedding": [[218, "t-distributed-stochastic-neighbor-embedding"]], "Precision-Recall": [[264, "precision-recall"]], "In binary classification settings": [[264, "in-binary-classification-settings"]], "Dataset and model": [[264, "dataset-and-model"]], "Plot the Precision-Recall curve": [[264, "plot-the-precision-recall-curve"]], "In multi-label settings": [[264, "in-multi-label-settings"]], "Create multi-label data, fit, and predict": [[264, "create-multi-label-data-fit-and-predict"]], "The average precision score in multi-label settings": [[264, "the-average-precision-score-in-multi-label-settings"]], "Plot the micro-averaged Precision-Recall curve": [[264, "plot-the-micro-averaged-precision-recall-curve"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[264, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Comparison of kernel ridge regression and SVR": [[232, "comparison-of-kernel-ridge-regression-and-svr"]], "Construct the kernel-based regression models": [[232, "construct-the-kernel-based-regression-models"]], "Compare times of SVR and Kernel Ridge Regression": [[232, "compare-times-of-svr-and-kernel-ridge-regression"]], "Visualize training and prediction times": [[232, "visualize-training-and-prediction-times"]], "Visualize the learning curves": [[232, "visualize-the-learning-curves"]], "Advanced Plotting With Partial Dependence": [[236, "advanced-plotting-with-partial-dependence"]], "Train models on the diabetes dataset": [[236, "train-models-on-the-diabetes-dataset"]], "Plotting partial dependence for two features": [[236, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[236, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting partial dependence for one feature": [[236, "plotting-partial-dependence-for-one-feature"]], "Detection error tradeoff (DET) curve": [[254, "detection-error-tradeoff-det-curve"]], "Generate synthetic data": [[254, "generate-synthetic-data"]], "Define the classifiers": [[254, "define-the-classifiers"]], "Plot ROC and DET curves": [[254, "plot-roc-and-det-curves"]], "Gaussian Mixture Model Sine Curve": [[248, "gaussian-mixture-model-sine-curve"]], "Custom refit strategy of a grid search with cross-validation": [[255, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "The dataset": [[255, "the-dataset"]], "Define our grid-search strategy": [[255, "define-our-grid-search-strategy"]], "Tuning hyper-parameters": [[255, "tuning-hyper-parameters"]], "Swiss Roll And Swiss-Hole Reduction": [[222, "swiss-roll-and-swiss-hole-reduction"]], "Swiss Roll": [[222, "swiss-roll"]], "Swiss-Hole": [[222, "swiss-hole"]], "GMM Initialization Methods": [[245, "gmm-initialization-methods"]], "Explicit feature map approximation for RBF kernels": [[231, "explicit-feature-map-approximation-for-rbf-kernels"]], "Python package and dataset imports, load dataset": [[231, "python-package-and-dataset-imports-load-dataset"]], "Timing and accuracy plots": [[231, "timing-and-accuracy-plots"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[231, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Tweedie regression on insurance claims": [[215, "tweedie-regression-on-insurance-claims"]], "Loading datasets, basic feature extraction and target definitions": [[215, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Frequency model \u2013 Poisson distribution": [[215, "frequency-model-poisson-distribution"]], "Severity Model -  Gamma distribution": [[215, "severity-model-gamma-distribution"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[215, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Statistical comparison of models using grid search": [[257, "statistical-comparison-of-models-using-grid-search"]], "Comparing two models: frequentist approach": [[257, "comparing-two-models-frequentist-approach"]], "Comparing two models: Bayesian approach": [[257, "comparing-two-models-bayesian-approach"]], "Region of Practical Equivalence": [[257, "region-of-practical-equivalence"]], "Pairwise comparison of all models: frequentist approach": [[257, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise comparison of all models: Bayesian approach": [[257, "pairwise-comparison-of-all-models-bayesian-approach"]], "Take-home messages": [[257, "take-home-messages"]], "Sample pipeline for text feature extraction and evaluation": [[258, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Data loading": [[258, "data-loading"]], "Pipeline with hyperparameter tuning": [[258, "pipeline-with-hyperparameter-tuning"]], "Classifier Chain": [[275, "classifier-chain"]], "Approximate nearest neighbors in TSNE": [[277, "approximate-nearest-neighbors-in-tsne"]], "GMM covariances": [[244, "gmm-covariances"]], "Balance model complexity and cross-validated score": [[256, "balance-model-complexity-and-cross-validated-score"]], "Successive Halving Iterations": [[269, "successive-halving-iterations"]], "Number of candidates and amount of resource at each iteration": [[269, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Gaussian Mixture Model Selection": [[247, "gaussian-mixture-model-selection"]], "Model training and selection": [[247, "model-training-and-selection"], [145, "model-training-and-selection"]], "Plot the BIC scores": [[247, "plot-the-bic-scores"]], "Plot the best model": [[247, "plot-the-best-model"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[219, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Load digits dataset": [[219, "load-digits-dataset"]], "Helper function to plot embedding": [[219, "helper-function-to-plot-embedding"]], "Embedding techniques comparison": [[219, "embedding-techniques-comparison"]], "Underfitting vs. Overfitting": [[271, "underfitting-vs-overfitting"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[230, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "Theoretical bounds": [[230, "theoretical-bounds"]], "Empirical validation": [[230, "empirical-validation"]], "Remarks": [[230, "remarks"]], "Introducing the set_output API": [[239, "introducing-the-set-output-api"]], "Gaussian Mixture Model Ellipsoids": [[243, "gaussian-mixture-model-ellipsoids"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[261, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Running GridSearchCV using multiple evaluation metrics": [[261, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Plotting the result": [[261, "plotting-the-result"]], "Multi-dimensional scaling": [[221, "multi-dimensional-scaling"]], "MNIST classification using multinomial logistic + L1": [[213, "mnist-classification-using-multinomial-logistic-l1"]], "Multioutput methods": [[274, "multioutput-methods"], [164, "multioutput-methods"]], "Simple 1D Kernel Density Estimation": [[282, "simple-1d-kernel-density-estimation"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[242, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Caching nearest neighbors": [[279, "caching-nearest-neighbors"]], "Visualizations with Display Objects": [[227, "visualizations-with-display-objects"]], "Load Data and train model": [[227, "load-data-and-train-model"]], "Create ConfusionMatrixDisplay": [[227, "create-confusionmatrixdisplay"]], "Create RocCurveDisplay": [[227, "create-roccurvedisplay"]], "Create PrecisionRecallDisplay": [[227, "create-precisionrecalldisplay"]], "Combining the display objects into a single plot": [[227, "combining-the-display-objects-into-a-single-plot"]], "Test with permutations the significance of a classification score": [[263, "test-with-permutations-the-significance-of-a-classification-score"]], "Random data": [[263, "random-data"]], "Comparing randomized search and grid search for hyperparameter estimation": [[265, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Isotonic Regression": [[229, "isotonic-regression"]], "ROC Curve with Visualization API": [[238, "roc-curve-with-visualization-api"]], "Load Data and Train a SVC": [[238, "load-data-and-train-a-svc"]], "Plotting the ROC Curve": [[238, "plotting-the-roc-curve"]], "Training a Random Forest and Plotting the ROC Curve": [[238, "training-a-random-forest-and-plotting-the-roc-curve"]], "Receiver Operating Characteristic (ROC) with cross validation": [[267, "receiver-operating-characteristic-roc-with-cross-validation"]], "Classification and ROC analysis": [[267, "classification-and-roc-analysis"]], "Plotting Validation Curves": [[272, "plotting-validation-curves"]], "t-SNE: The effect of various perplexity values on the shape": [[223, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "Gaussian Mixture Models": [[241, "gaussian-mixture-models"], [164, "gaussian-mixture-models"]], "Train error vs Test error": [[270, "train-error-vs-test-error"]], "Compute train and test errors": [[270, "compute-train-and-test-errors"]], "Plot results functions": [[270, "plot-results-functions"]], "Density Estimation for a Gaussian mixture": [[246, "density-estimation-for-a-gaussian-mixture"]], "Nested versus non-nested cross-validation": [[262, "nested-versus-non-nested-cross-validation"]], "Class Likelihood Ratios to measure classification performance": [[260, "class-likelihood-ratios-to-measure-classification-performance"]], "Pre-test vs. post-test analysis": [[260, "pre-test-vs-post-test-analysis"]], "Cross-validation of likelihood ratios": [[260, "cross-validation-of-likelihood-ratios"]], "Invariance with respect to prevalence": [[260, "invariance-with-respect-to-prevalence"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[226, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Displaying estimators and complex pipelines": [[228, "displaying-estimators-and-complex-pipelines"]], "Compact text representation": [[228, "compact-text-representation"]], "Rich HTML representation": [[228, "rich-html-representation"]], "Comparison between grid search and successive halving": [[268, "comparison-between-grid-search-and-successive-halving"]], "Plotting Cross-Validated Predictions": [[253, "plotting-cross-validated-predictions"]], "Model Selection": [[250, "model-selection"], [164, "model-selection"]], "Manifold Learning methods on a severed sphere": [[220, "manifold-learning-methods-on-a-severed-sphere"]], "Multiclass Receiver Operating Characteristic (ROC)": [[266, "multiclass-receiver-operating-characteristic-roc"]], "One-vs-Rest multiclass ROC": [[266, "one-vs-rest-multiclass-roc"]], "ROC curve showing a specific class": [[266, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[266, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvR macro-average": [[266, "roc-curve-using-the-ovr-macro-average"]], "Plot all OvR ROC curves together": [[266, "plot-all-ovr-roc-curves-together"]], "One-vs-One multiclass ROC": [[266, "one-vs-one-multiclass-roc"]], "ROC curve using the OvO macro-average": [[266, "roc-curve-using-the-ovo-macro-average"]], "Plot all OvO ROC curves together": [[266, "plot-all-ovo-roc-curves-together"]], "Visualizing cross-validation behavior in scikit-learn": [[252, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualize our data": [[252, "visualize-our-data"]], "Define a function to visualize cross-validation behavior": [[252, "define-a-function-to-visualize-cross-validation-behavior"]], "Visualize cross-validation indices for many CV objects": [[252, "visualize-cross-validation-indices-for-many-cv-objects"]], "Displaying Pipelines": [[237, "displaying-pipelines"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[237, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[237, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[237, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[237, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[237, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[152, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "Comparing Linear Bayesian Regressors": [[176, "comparing-linear-bayesian-regressors"]], "Models robustness to recover the ground truth weights": [[176, "models-robustness-to-recover-the-ground-truth-weights"]], "Fit the regressors": [[176, "fit-the-regressors"], [176, "id2"]], "Plot the true and estimated coefficients": [[176, "plot-the-true-and-estimated-coefficients"]], "Plot the marginal log-likelihood": [[176, "plot-the-marginal-log-likelihood"]], "Bayesian regressions with polynomial feature expansion": [[176, "bayesian-regressions-with-polynomial-feature-expansion"]], "Plotting polynomial regressions with std errors of the scores": [[176, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Plot multi-class SGD on the iris dataset": [[206, "plot-multi-class-sgd-on-the-iris-dataset"]], "Plot Ridge coefficients as a function of the L2 regularization": [[201, "plot-ridge-coefficients-as-a-function-of-the-l2-regularization"]], "SGD: Maximum margin separating hyperplane": [[209, "sgd-maximum-margin-separating-hyperplane"]], "Gaussian Process for Machine Learning": [[164, "gaussian-process-for-machine-learning"], [148, "gaussian-process-for-machine-learning"]], "Missing Value Imputation": [[164, "missing-value-imputation"], [160, "missing-value-imputation"]], "Failure of Machine Learning to infer causal effects": [[166, "failure-of-machine-learning-to-infer-causal-effects"]], "The dataset: simulated hourly wages": [[166, "the-dataset-simulated-hourly-wages"]], "Description of the simulated data": [[166, "description-of-the-simulated-data"]], "Income prediction with fully observed variables": [[166, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[166, "income-prediction-with-partial-observations"]], "Lessons learned": [[166, "lessons-learned"], [167, "lessons-learned"]], "Regularization path of L1- Logistic Regression": [[190, "regularization-path-of-l1-logistic-regression"]], "Load data": [[190, "load-data"]], "Compute regularization path": [[190, "compute-regularization-path"]], "Plot regularization path": [[190, "plot-regularization-path"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[179, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Imputing missing values before building an estimator": [[162, "imputing-missing-values-before-building-an-estimator"]], "Download the data and make missing values sets": [[162, "download-the-data-and-make-missing-values-sets"]], "Impute the missing data and score": [[162, "impute-the-missing-data-and-score"]], "Missing information": [[162, "missing-information"]], "Estimate the score": [[162, "estimate-the-score"]], "Replace missing values by 0": [[162, "replace-missing-values-by-0"]], "kNN-imputation of the missing values": [[162, "knn-imputation-of-the-missing-values"]], "Impute missing values with mean": [[162, "impute-missing-values-with-mean"]], "Iterative imputation of the missing values": [[162, "iterative-imputation-of-the-missing-values"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[169, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Data Loading and Feature Engineering": [[169, "data-loading-and-feature-engineering"]], "Accuracy of the Model": [[169, "accuracy-of-the-model"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[169, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[153, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Gaussian processes on discrete data structures": [[157, "gaussian-processes-on-discrete-data-structures"]], "Sequence similarity matrix under the kernel": [[157, "sequence-similarity-matrix-under-the-kernel"]], "Lasso model selection via information criteria": [[185, "lasso-model-selection-via-information-criteria"]], "Curve Fitting with Bayesian Ridge Regression": [[177, "curve-fitting-with-bayesian-ridge-regression"]], "Generate sinusoidal data with noise": [[177, "generate-sinusoidal-data-with-noise"]], "Fit by cubic polynomial": [[177, "fit-by-cubic-polynomial"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[177, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Lasso and Elastic Net": [[182, "lasso-and-elastic-net"]], "Logistic function": [[187, "logistic-function"]], "Poisson regression and non-normal loss": [[197, "poisson-regression-and-non-normal-loss"]], "The French Motor Third-Party Liability Claims dataset": [[197, "the-french-motor-third-party-liability-claims-dataset"]], "A constant prediction baseline": [[197, "a-constant-prediction-baseline"]], "(Generalized) linear models": [[197, "generalized-linear-models"]], "Gradient Boosting Regression Trees for Poisson regression": [[197, "gradient-boosting-regression-trees-for-poisson-regression"]], "Evaluation of the calibration of predictions": [[197, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[197, "evaluation-of-the-ranking-power"]], "Main takeaways": [[197, "main-takeaways"]], "Comparing various online solvers": [[204, "comparing-various-online-solvers"]], "Scalable learning with polynomial kernel approximation": [[173, "scalable-learning-with-polynomial-kernel-approximation"]], "Partitioning the data": [[173, "partitioning-the-data"]], "Feature normalization": [[173, "feature-normalization"]], "Establishing a baseline model": [[173, "establishing-a-baseline-model"]], "Establishing the kernel approximation model": [[173, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[173, "establishing-the-kernelized-svm-model"]], "Comparing the results": [[173, "comparing-the-results"]], "Joint feature selection with multi-task Lasso": [[191, "joint-feature-selection-with-multi-task-lasso"]], "Fit models": [[191, "fit-models"]], "Plot support and time series": [[191, "plot-support-and-time-series"]], "Linear Regression Example": [[193, "linear-regression-example"]], "Ordinary Least Squares and Ridge Regression Variance": [[195, "ordinary-least-squares-and-ridge-regression-variance"]], "Gaussian process regression (GPR) with noise-level estimation": [[155, "gaussian-process-regression-gpr-with-noise-level-estimation"]], "Optimisation of kernel hyperparameters in GPR": [[155, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[189, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Early stopping of Stochastic Gradient Descent": [[205, "early-stopping-of-stochastic-gradient-descent"]], "Gaussian Processes regression: basic introductory example": [[156, "gaussian-processes-regression-basic-introductory-example"]], "Dataset generation": [[156, "dataset-generation"], [199, "dataset-generation"]], "Example with noise-free target": [[156, "example-with-noise-free-target"]], "Example with noisy targets": [[156, "example-with-noisy-targets"]], "Recursive feature elimination with cross-validation": [[145, "recursive-feature-elimination-with-cross-validation"]], "Plot number of features VS. cross-validation scores": [[145, "plot-number-of-features-vs-cross-validation-scores"]], "Plot Ridge coefficients as a function of the regularization": [[202, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Compute paths": [[202, "compute-paths"]], "Display results": [[202, "display-results"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[178, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "L1 Penalty and Sparsity in Logistic Regression": [[188, "l1-penalty-and-sparsity-in-logistic-regression"]], "Gaussian process regression (GPR) on Mauna Loa CO2 data": [[154, "gaussian-process-regression-gpr-on-mauna-loa-co2-data"]], "Build the dataset": [[154, "build-the-dataset"]], "Design the proper kernel": [[154, "design-the-proper-kernel"]], "Model fitting and extrapolation": [[154, "model-fitting-and-extrapolation"]], "Interpretation of kernel hyperparameters": [[154, "interpretation-of-kernel-hyperparameters"]], "Robust linear estimator fitting": [[203, "robust-linear-estimator-fitting"]], "Univariate Feature Selection": [[142, "univariate-feature-selection"]], "Compare with SVMs": [[142, "compare-with-svms"]], "Orthogonal Matching Pursuit": [[196, "orthogonal-matching-pursuit"]], "SGD: Penalties": [[208, "sgd-penalties"]], "SGD: Weighted samples": [[210, "sgd-weighted-samples"]], "Lasso model selection: AIC-BIC / cross-validation": [[186, "lasso-model-selection-aic-bic-cross-validation"]], "Selecting Lasso via an information criterion": [[186, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[186, "selecting-lasso-via-cross-validation"]], "Lasso via coordinate descent": [[186, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[186, "lasso-via-least-angle-regression"]], "Summary of cross-validation approach": [[186, "summary-of-cross-validation-approach"]], "Lasso and Elastic Net for Sparse Signals": [[181, "lasso-and-elastic-net-for-sparse-signals"]], "Data Generation": [[181, "data-generation"]], "ElasticNet": [[181, "elasticnet"]], "Common pitfalls in the interpretation of coefficients of linear models": [[167, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "The dataset: wages": [[167, "the-dataset-wages"]], "The machine-learning pipeline": [[167, "the-machine-learning-pipeline"]], "Processing the dataset": [[167, "processing-the-dataset"]], "Interpreting coefficients: scale matters": [[167, "interpreting-coefficients-scale-matters"]], "Checking the variability of the coefficients": [[167, "checking-the-variability-of-the-coefficients"]], "The problem of correlated variables": [[167, "the-problem-of-correlated-variables"]], "Preprocessing numerical variables": [[167, "preprocessing-numerical-variables"]], "Linear models with regularization": [[167, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[167, "linear-models-with-sparse-coefficients"]], "Wrong causal interpretation": [[167, "wrong-causal-interpretation"]], "Multiclass sparse logistic regression on 20newgroups": [[212, "multiclass-sparse-logistic-regression-on-20newgroups"]], "Sparsity Example: Fitting only features 1  and 2": [[194, "sparsity-example-fitting-only-features-1-and-2"]], "Lasso on dense and sparse data": [[183, "lasso-on-dense-and-sparse-data"]], "Comparing the two Lasso implementations on Dense data": [[183, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[183, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Lasso path using LARS": [[184, "lasso-path-using-lars"]], "Quantile regression": [[199, "quantile-regression"]], "Fitting a QuantileRegressor": [[199, "fitting-a-quantileregressor"]], "Comparing QuantileRegressor and LinearRegression": [[199, "comparing-quantileregressor-and-linearregression"]], "Robust linear model estimation using RANSAC": [[200, "robust-linear-model-estimation-using-ransac"]], "SGD: convex loss functions": [[207, "sgd-convex-loss-functions"]], "Illustration of prior and posterior Gaussian process for different kernels": [[158, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Helper function": [[158, "helper-function"]], "Dataset and Gaussian process generation": [[158, "dataset-and-gaussian-process-generation"]], "Kernel cookbook": [[158, "kernel-cookbook"]], "Radial Basis Function kernel": [[158, "radial-basis-function-kernel"]], "Rational Quadradtic kernel": [[158, "rational-quadradtic-kernel"]], "Dot-product kernel": [[158, "dot-product-kernel"]], "Non-negative least squares": [[192, "non-negative-least-squares"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[150, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Polynomial and Spline interpolation": [[198, "polynomial-and-spline-interpolation"]], "Periodic Splines": [[198, "periodic-splines"]], "Pipeline ANOVA SVM": [[143, "pipeline-anova-svm"]], "Model-based and sequential feature selection": [[146, "model-based-and-sequential-feature-selection"]], "Loading the data": [[146, "loading-the-data"]], "Feature importance from coefficients": [[146, "feature-importance-from-coefficients"]], "Selecting features based on importance": [[146, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[146, "selecting-features-with-sequential-feature-selection"]], "Discussion": [[146, "discussion"]], "Permutation Importance with Multicollinear or Correlated Features": [[170, "permutation-importance-with-multicollinear-or-correlated-features"]], "Random Forest Feature Importance on Breast Cancer Data": [[170, "random-forest-feature-importance-on-breast-cancer-data"]], "Handling Multicollinear Features": [[170, "handling-multicollinear-features"]], "Comparison of kernel ridge and Gaussian process regression": [[149, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Generating a dataset": [[149, "generating-a-dataset"]], "Limitations of a simple linear model": [[149, "limitations-of-a-simple-linear-model"]], "Kernel methods: kernel ridge and Gaussian process": [[149, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel ridge": [[149, "kernel-ridge"]], "Gaussian process regression": [[149, "gaussian-process-regression"]], "Final conclusion": [[149, "final-conclusion"]], "Imputing missing values with variants of IterativeImputer": [[161, "imputing-missing-values-with-variants-of-iterativeimputer"]], "Partial Dependence and Individual Conditional Expectation Plots": [[168, "partial-dependence-and-individual-conditional-expectation-plots"]], "Bike sharing dataset preprocessing": [[168, "bike-sharing-dataset-preprocessing"]], "Preprocessor for machine-learning models": [[168, "preprocessor-for-machine-learning-models"]], "Preprocessor for the neural network model": [[168, "preprocessor-for-the-neural-network-model"]], "Preprocessor for the gradient boosting model": [[168, "preprocessor-for-the-gradient-boosting-model"]], "1-way partial dependence with different models": [[168, "way-partial-dependence-with-different-models"]], "2D interaction plots": [[168, "d-interaction-plots"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[211, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "Logistic Regression 3-class Classifier": [[180, "logistic-regression-3-class-classifier"]]}, "indexentries": {"1d": [[380, "term-1d"]], "1d array": [[380, "term-1d-array"]], "2d": [[380, "term-2d"]], "2d array": [[380, "term-2d-array"]], "api": [[380, "term-API"]], "cv splitter": [[380, "term-CV-splitter"]], "slep": [[380, "term-SLEP"]], "sleps": [[380, "term-SLEPs"]], "x": [[380, "term-X"]], "xt": [[380, "term-Xt"]], "y": [[380, "term-Y"], [380, "term-y"]], "_estimator_type": [[380, "term-_estimator_type"]], "array-like": [[380, "term-array-like"]], "attribute": [[380, "term-attribute"]], "attributes": [[380, "term-attributes"]], "backwards compatibility": [[380, "term-backwards-compatibility"]], "binary": [[380, "term-binary"]], "callable": [[380, "term-callable"]], "categorical feature": [[380, "term-categorical-feature"]], "class_weight": [[380, "term-class_weight"]], "classes_": [[380, "term-classes_"]], "classifier": [[380, "term-classifier"]], "classifiers": [[380, "term-classifiers"]], "clone": [[380, "term-clone"]], "cloned": [[380, "term-cloned"]], "clusterer": [[380, "term-clusterer"]], "clusterers": [[380, "term-clusterers"]], "coef_": [[380, "term-coef_"]], "common tests": [[380, "term-common-tests"]], "components_": [[380, "term-components_"]], "continuous": [[380, "term-continuous"]], "continuous multi-output": [[380, "term-continuous-multi-output"]], "continuous multioutput": [[380, "term-continuous-multioutput"]], "cross-validation estimator": [[380, "term-cross-validation-estimator"]], "cross-validation generator": [[380, "term-cross-validation-generator"]], "cross-validation splitter": [[380, "term-cross-validation-splitter"]], "cv": [[380, "term-cv"]], "data leakage": [[380, "term-data-leakage"]], "data type": [[380, "term-data-type"]], "decision_function": [[380, "term-decision_function"]], "density estimator": [[380, "term-density-estimator"]], "deprecation": [[380, "term-deprecation"]], "dimensionality": [[380, "term-dimensionality"]], "docstring": [[380, "term-docstring"]], "double underscore": [[380, "term-double-underscore"]], "double underscore notation": [[380, "term-double-underscore-notation"]], "dtype": [[380, "term-dtype"]], "duck typing": [[380, "term-duck-typing"]], "early stopping": [[380, "term-early-stopping"]], "embedding_": [[380, "term-embedding_"]], "estimator": [[380, "term-estimator"]], "estimator instance": [[380, "term-estimator-instance"]], "estimator tags": [[380, "term-estimator-tags"]], "estimators": [[380, "term-estimators"]], "evaluation metric": [[380, "term-evaluation-metric"]], "evaluation metrics": [[380, "term-evaluation-metrics"]], "examples": [[380, "term-examples"]], "experimental": [[380, "term-experimental"]], "feature": [[380, "term-feature"]], "feature extractor": [[380, "term-feature-extractor"]], "feature extractors": [[380, "term-feature-extractors"]], "feature vector": [[380, "term-feature-vector"]], "feature_importances_": [[380, "term-feature_importances_"]], "features": [[380, "term-features"]], "fit": [[380, "term-fit"]], "fit_predict": [[380, "term-fit_predict"]], "fit_transform": [[380, "term-fit_transform"]], "fitted": [[380, "term-fitted"]], "fitting": [[380, "term-fitting"]], "function": [[380, "term-function"]], "gallery": [[380, "term-gallery"]], "get_feature_names_out": [[380, "term-get_feature_names_out"]], "get_n_splits": [[380, "term-get_n_splits"]], "get_params": [[380, "term-get_params"]], "groups": [[380, "term-groups"]], "hyper-parameter": [[380, "term-hyper-parameter"]], "hyperparameter": [[380, "term-hyperparameter"]], "imputation": [[380, "term-imputation"]], "impute": [[380, "term-impute"]], "indexable": [[380, "term-indexable"]], "induction": [[380, "term-induction"]], "inductive": [[380, "term-inductive"]], "joblib": [[380, "term-joblib"]], "kernel": [[380, "term-kernel"]], "label indicator matrix": [[380, "term-label-indicator-matrix"]], "labels_": [[380, "term-labels_"]], "leakage": [[380, "term-leakage"]], "max_iter": [[380, "term-max_iter"]], "memmapping": [[380, "term-memmapping"]], "memory": [[380, "term-memory"]], "memory map": [[380, "term-memory-map"]], "memory mapping": [[380, "term-memory-mapping"]], "meta-estimator": [[380, "term-meta-estimator"]], "meta-estimators": [[380, "term-meta-estimators"]], "metaestimator": [[380, "term-metaestimator"]], "metaestimators": [[380, "term-metaestimators"]], "metric": [[380, "term-metric"]], "missing values": [[380, "term-missing-values"]], "multi-class": [[380, "term-multi-class"]], "multi-class multi-output": [[380, "term-multi-class-multi-output"]], "multi-label": [[380, "term-multi-label"]], "multi-output": [[380, "term-multi-output"]], "multi-output continuous": [[380, "term-multi-output-continuous"]], "multi-output multi-class": [[380, "term-multi-output-multi-class"]], "multiclass": [[380, "term-multiclass"]], "multiclass multioutput": [[380, "term-multiclass-multioutput"]], "multilabel": [[380, "term-multilabel"]], "multilabel indicator matrices": [[380, "term-multilabel-indicator-matrices"]], "multilabel indicator matrix": [[380, "term-multilabel-indicator-matrix"]], "multioutput": [[380, "term-multioutput"]], "multioutput continuous": [[380, "term-multioutput-continuous"]], "multioutput multiclass": [[380, "term-multioutput-multiclass"]], "n_components": [[380, "term-n_components"]], "n_features": [[380, "term-n_features"]], "n_iter_": [[380, "term-n_iter_"]], "n_iter_no_change": [[380, "term-n_iter_no_change"]], "n_jobs": [[380, "term-n_jobs"]], "n_outputs": [[380, "term-n_outputs"]], "n_samples": [[380, "term-n_samples"]], "n_targets": [[380, "term-n_targets"]], "narrative docs": [[380, "term-narrative-docs"]], "narrative documentation": [[380, "term-narrative-documentation"]], "np": [[380, "term-np"]], "online learning": [[380, "term-online-learning"]], "out-of-core": [[380, "term-out-of-core"]], "outlier detector": [[380, "term-outlier-detector"]], "outlier detectors": [[380, "term-outlier-detectors"]], "outputs": [[380, "term-outputs"]], "pair": [[380, "term-pair"]], "pairwise metric": [[380, "term-pairwise-metric"]], "pairwise metrics": [[380, "term-pairwise-metrics"]], "param": [[380, "term-param"]], "parameter": [[380, "term-parameter"]], "parameters": [[380, "term-parameters"]], "params": [[380, "term-params"]], "partial_fit": [[380, "term-partial_fit"]], "pd": [[380, "term-pd"]], "pos_label": [[380, "term-pos_label"]], "precomputed": [[380, "term-precomputed"]], "predict": [[380, "term-predict"]], "predict_log_proba": [[380, "term-predict_log_proba"]], "predict_proba": [[380, "term-predict_proba"]], "predictor": [[380, "term-predictor"]], "predictors": [[380, "term-predictors"]], "random_state": [[380, "term-random_state"]], "rectangular": [[380, "term-rectangular"]], "regressor": [[380, "term-regressor"]], "regressors": [[380, "term-regressors"]], "sample": [[380, "term-sample"]], "sample properties": [[380, "term-sample-properties"]], "sample property": [[380, "term-sample-property"]], "sample_weight": [[380, "term-sample_weight"]], "samples": [[380, "term-samples"]], "scikit-learn enhancement proposals": [[380, "term-scikit-learn-enhancement-proposals"]], "scikit-learn-contrib": [[380, "term-scikit-learn-contrib"]], "score": [[380, "term-score"]], "score_samples": [[380, "term-score_samples"]], "scorer": [[380, "term-scorer"]], "scoring": [[380, "term-scoring"]], "semi-supervised": [[380, "term-semi-supervised"]], "semi-supervised learning": [[380, "term-semi-supervised-learning"]], "semisupervised": [[380, "term-semisupervised"]], "set_params": [[380, "term-set_params"]], "sparse graph": [[380, "term-sparse-graph"]], "sparse matrix": [[380, "term-sparse-matrix"]], "split": [[380, "term-split"]], "stateless": [[380, "term-stateless"]], "supervised": [[380, "term-supervised"]], "supervised learning": [[380, "term-supervised-learning"]], "target": [[380, "term-target"]], "targets": [[380, "term-targets"]], "transduction": [[380, "term-transduction"]], "transductive": [[380, "term-transductive"]], "transform": [[380, "term-transform"]], "transformer": [[380, "term-transformer"]], "transformers": [[380, "term-transformers"]], "unlabeled": [[380, "term-unlabeled"]], "unlabeled data": [[380, "term-unlabeled-data"]], "unsupervised": [[380, "term-unsupervised"]], "unsupervised learning": [[380, "term-unsupervised-learning"]], "vectorizer": [[380, "term-vectorizer"]], "vectorizers": [[380, "term-vectorizers"]], "verbose": [[380, "term-verbose"]], "warm_start": [[380, "term-warm_start"]], "module": [[391, "module-sklearn.base"], [391, "module-sklearn.calibration"], [391, "module-sklearn.cluster"], [391, "module-sklearn.compose"], [391, "module-sklearn.covariance"], [391, "module-sklearn.cross_decomposition"], [391, "module-sklearn.datasets"], [391, "module-sklearn.decomposition"], [391, "module-sklearn.discriminant_analysis"], [391, "module-sklearn.dummy"], [391, "module-sklearn.ensemble"], [391, "module-sklearn.exceptions"], [391, "module-sklearn.experimental"], [391, "module-sklearn.feature_extraction"], [391, "module-sklearn.feature_extraction.image"], [391, "module-sklearn.feature_extraction.text"], [391, "module-sklearn.feature_selection"], [391, "module-sklearn.gaussian_process"], [391, "module-sklearn.impute"], [391, "module-sklearn.inspection"], [391, "module-sklearn.isotonic"], [391, "module-sklearn.kernel_approximation"], [391, "module-sklearn.kernel_ridge"], [391, "module-sklearn.linear_model"], [391, "module-sklearn.manifold"], [391, "module-sklearn.metrics"], [391, "module-sklearn.metrics.cluster"], [391, "module-sklearn.metrics.pairwise"], [391, "module-sklearn.mixture"], [391, "module-sklearn.model_selection"], [391, "module-sklearn.multiclass"], [391, "module-sklearn.multioutput"], [391, "module-sklearn.naive_bayes"], [391, "module-sklearn.neighbors"], [391, "module-sklearn.neural_network"], [391, "module-sklearn.pipeline"], [391, "module-sklearn.preprocessing"], [391, "module-sklearn.random_projection"], [391, "module-sklearn.semi_supervised"], [391, "module-sklearn.svm"], [391, "module-sklearn.tree"], [391, "module-sklearn.utils"], [559, "module-sklearn.experimental.enable_halving_search_cv"], [560, "module-sklearn.experimental.enable_hist_gradient_boosting"], [561, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.base": [[391, "module-sklearn.base"]], "sklearn.calibration": [[391, "module-sklearn.calibration"]], "sklearn.cluster": [[391, "module-sklearn.cluster"]], "sklearn.compose": [[391, "module-sklearn.compose"]], "sklearn.covariance": [[391, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[391, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[391, "module-sklearn.datasets"]], "sklearn.decomposition": [[391, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[391, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[391, "module-sklearn.dummy"]], "sklearn.ensemble": [[391, "module-sklearn.ensemble"]], "sklearn.exceptions": [[391, "module-sklearn.exceptions"]], "sklearn.experimental": [[391, "module-sklearn.experimental"]], "sklearn.feature_extraction": [[391, "module-sklearn.feature_extraction"]], "sklearn.feature_extraction.image": [[391, "module-sklearn.feature_extraction.image"]], "sklearn.feature_extraction.text": [[391, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection": [[391, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[391, "module-sklearn.gaussian_process"]], "sklearn.impute": [[391, "module-sklearn.impute"]], "sklearn.inspection": [[391, "module-sklearn.inspection"]], "sklearn.isotonic": [[391, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[391, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[391, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[391, "module-sklearn.linear_model"]], "sklearn.manifold": [[391, "module-sklearn.manifold"]], "sklearn.metrics": [[391, "module-sklearn.metrics"]], "sklearn.metrics.cluster": [[391, "module-sklearn.metrics.cluster"]], "sklearn.metrics.pairwise": [[391, "module-sklearn.metrics.pairwise"]], "sklearn.mixture": [[391, "module-sklearn.mixture"]], "sklearn.model_selection": [[391, "module-sklearn.model_selection"]], "sklearn.multiclass": [[391, "module-sklearn.multiclass"]], "sklearn.multioutput": [[391, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[391, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[391, "module-sklearn.neighbors"]], "sklearn.neural_network": [[391, "module-sklearn.neural_network"]], "sklearn.pipeline": [[391, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[391, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[391, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[391, "module-sklearn.semi_supervised"]], "sklearn.svm": [[391, "module-sklearn.svm"]], "sklearn.tree": [[391, "module-sklearn.tree"]], "sklearn.utils": [[391, "module-sklearn.utils"]], "dbscan() (in module sklearn.cluster)": [[403, "sklearn.cluster.dbscan"]], "fastica() (in module sklearn.decomposition)": [[404, "sklearn.decomposition.fastica"]], "oas() (in module sklearn.covariance)": [[405, "sklearn.covariance.oas"]], "baseestimator (class in sklearn.base)": [[406, "sklearn.base.BaseEstimator"]], "get_params() (sklearn.base.baseestimator method)": [[406, "sklearn.base.BaseEstimator.get_params"]], "set_params() (sklearn.base.baseestimator method)": [[406, "sklearn.base.BaseEstimator.set_params"]], "biclustermixin (class in sklearn.base)": [[407, "sklearn.base.BiclusterMixin"]], "biclusters_ (sklearn.base.biclustermixin property)": [[407, "sklearn.base.BiclusterMixin.biclusters_"]], "get_indices() (sklearn.base.biclustermixin method)": [[407, "sklearn.base.BiclusterMixin.get_indices"]], "get_shape() (sklearn.base.biclustermixin method)": [[407, "sklearn.base.BiclusterMixin.get_shape"]], "get_submatrix() (sklearn.base.biclustermixin method)": [[407, "sklearn.base.BiclusterMixin.get_submatrix"]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[408, "sklearn.base.ClassNamePrefixFeaturesOutMixin"]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[408, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out"]], "classifiermixin (class in sklearn.base)": [[409, "sklearn.base.ClassifierMixin"]], "score() (sklearn.base.classifiermixin method)": [[409, "sklearn.base.ClassifierMixin.score"]], "clustermixin (class in sklearn.base)": [[410, "sklearn.base.ClusterMixin"]], "fit_predict() (sklearn.base.clustermixin method)": [[410, "sklearn.base.ClusterMixin.fit_predict"]], "densitymixin (class in sklearn.base)": [[411, "sklearn.base.DensityMixin"]], "score() (sklearn.base.densitymixin method)": [[411, "sklearn.base.DensityMixin.score"]], "onetoonefeaturemixin (class in sklearn.base)": [[412, "sklearn.base.OneToOneFeatureMixin"]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[412, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out"]], "regressormixin (class in sklearn.base)": [[413, "sklearn.base.RegressorMixin"]], "score() (sklearn.base.regressormixin method)": [[413, "sklearn.base.RegressorMixin.score"]], "transformermixin (class in sklearn.base)": [[414, "sklearn.base.TransformerMixin"]], "fit_transform() (sklearn.base.transformermixin method)": [[414, "sklearn.base.TransformerMixin.fit_transform"]], "set_output() (sklearn.base.transformermixin method)": [[414, "sklearn.base.TransformerMixin.set_output"]], "clone() (in module sklearn.base)": [[415, "sklearn.base.clone"]], "is_classifier() (in module sklearn.base)": [[416, "sklearn.base.is_classifier"]], "is_regressor() (in module sklearn.base)": [[417, "sklearn.base.is_regressor"]], "calibratedclassifiercv (class in sklearn.calibration)": [[418, "sklearn.calibration.CalibratedClassifierCV"]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[418, "sklearn.calibration.CalibratedClassifierCV.fit"]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[418, "sklearn.calibration.CalibratedClassifierCV.get_params"]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[418, "sklearn.calibration.CalibratedClassifierCV.predict"]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[418, "sklearn.calibration.CalibratedClassifierCV.predict_proba"]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[418, "sklearn.calibration.CalibratedClassifierCV.score"]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[418, "sklearn.calibration.CalibratedClassifierCV.set_params"]], "calibrationdisplay (class in sklearn.calibration)": [[419, "sklearn.calibration.CalibrationDisplay"]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[419, "sklearn.calibration.CalibrationDisplay.from_estimator"]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[419, "sklearn.calibration.CalibrationDisplay.from_predictions"]], "plot() (sklearn.calibration.calibrationdisplay method)": [[419, "sklearn.calibration.CalibrationDisplay.plot"]], "calibration_curve() (in module sklearn.calibration)": [[420, "sklearn.calibration.calibration_curve"]], "affinitypropagation (class in sklearn.cluster)": [[421, "sklearn.cluster.AffinityPropagation"]], "fit() (sklearn.cluster.affinitypropagation method)": [[421, "sklearn.cluster.AffinityPropagation.fit"]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[421, "sklearn.cluster.AffinityPropagation.fit_predict"]], "get_params() (sklearn.cluster.affinitypropagation method)": [[421, "sklearn.cluster.AffinityPropagation.get_params"]], "predict() (sklearn.cluster.affinitypropagation method)": [[421, "sklearn.cluster.AffinityPropagation.predict"]], "set_params() (sklearn.cluster.affinitypropagation method)": [[421, "sklearn.cluster.AffinityPropagation.set_params"]], "agglomerativeclustering (class in sklearn.cluster)": [[422, "sklearn.cluster.AgglomerativeClustering"]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[422, "sklearn.cluster.AgglomerativeClustering.fit"]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[422, "sklearn.cluster.AgglomerativeClustering.fit_predict"]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[422, "sklearn.cluster.AgglomerativeClustering.get_params"]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[422, "sklearn.cluster.AgglomerativeClustering.set_params"]], "birch (class in sklearn.cluster)": [[423, "sklearn.cluster.Birch"]], "fit() (sklearn.cluster.birch method)": [[423, "sklearn.cluster.Birch.fit"]], "fit_predict() (sklearn.cluster.birch method)": [[423, "sklearn.cluster.Birch.fit_predict"]], "fit_transform() (sklearn.cluster.birch method)": [[423, "sklearn.cluster.Birch.fit_transform"]], "get_feature_names_out() (sklearn.cluster.birch method)": [[423, "sklearn.cluster.Birch.get_feature_names_out"]], "get_params() (sklearn.cluster.birch method)": [[423, "sklearn.cluster.Birch.get_params"]], "partial_fit() (sklearn.cluster.birch method)": [[423, "sklearn.cluster.Birch.partial_fit"]], "predict() (sklearn.cluster.birch method)": [[423, "sklearn.cluster.Birch.predict"]], "set_output() (sklearn.cluster.birch method)": [[423, "sklearn.cluster.Birch.set_output"]], "set_params() (sklearn.cluster.birch method)": [[423, "sklearn.cluster.Birch.set_params"]], "transform() (sklearn.cluster.birch method)": [[423, "sklearn.cluster.Birch.transform"]], "bisectingkmeans (class in sklearn.cluster)": [[424, "sklearn.cluster.BisectingKMeans"]], "fit() (sklearn.cluster.bisectingkmeans method)": [[424, "sklearn.cluster.BisectingKMeans.fit"]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[424, "sklearn.cluster.BisectingKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[424, "sklearn.cluster.BisectingKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[424, "sklearn.cluster.BisectingKMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[424, "sklearn.cluster.BisectingKMeans.get_params"]], "predict() (sklearn.cluster.bisectingkmeans method)": [[424, "sklearn.cluster.BisectingKMeans.predict"]], "score() (sklearn.cluster.bisectingkmeans method)": [[424, "sklearn.cluster.BisectingKMeans.score"]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[424, "sklearn.cluster.BisectingKMeans.set_output"]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[424, "sklearn.cluster.BisectingKMeans.set_params"]], "transform() (sklearn.cluster.bisectingkmeans method)": [[424, "sklearn.cluster.BisectingKMeans.transform"]], "dbscan (class in sklearn.cluster)": [[425, "sklearn.cluster.DBSCAN"]], "fit() (sklearn.cluster.dbscan method)": [[425, "sklearn.cluster.DBSCAN.fit"]], "fit_predict() (sklearn.cluster.dbscan method)": [[425, "sklearn.cluster.DBSCAN.fit_predict"]], "get_params() (sklearn.cluster.dbscan method)": [[425, "sklearn.cluster.DBSCAN.get_params"]], "set_params() (sklearn.cluster.dbscan method)": [[425, "sklearn.cluster.DBSCAN.set_params"]], "featureagglomeration (class in sklearn.cluster)": [[426, "sklearn.cluster.FeatureAgglomeration"]], "fit() (sklearn.cluster.featureagglomeration method)": [[426, "sklearn.cluster.FeatureAgglomeration.fit"]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[426, "sklearn.cluster.FeatureAgglomeration.fit_predict"]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[426, "sklearn.cluster.FeatureAgglomeration.fit_transform"]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[426, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out"]], "get_params() (sklearn.cluster.featureagglomeration method)": [[426, "sklearn.cluster.FeatureAgglomeration.get_params"]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[426, "sklearn.cluster.FeatureAgglomeration.inverse_transform"]], "set_output() (sklearn.cluster.featureagglomeration method)": [[426, "sklearn.cluster.FeatureAgglomeration.set_output"]], "set_params() (sklearn.cluster.featureagglomeration method)": [[426, "sklearn.cluster.FeatureAgglomeration.set_params"]], "transform() (sklearn.cluster.featureagglomeration method)": [[426, "sklearn.cluster.FeatureAgglomeration.transform"]], "kmeans (class in sklearn.cluster)": [[427, "sklearn.cluster.KMeans"]], "fit() (sklearn.cluster.kmeans method)": [[427, "sklearn.cluster.KMeans.fit"]], "fit_predict() (sklearn.cluster.kmeans method)": [[427, "sklearn.cluster.KMeans.fit_predict"]], "fit_transform() (sklearn.cluster.kmeans method)": [[427, "sklearn.cluster.KMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[427, "sklearn.cluster.KMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.kmeans method)": [[427, "sklearn.cluster.KMeans.get_params"]], "predict() (sklearn.cluster.kmeans method)": [[427, "sklearn.cluster.KMeans.predict"]], "score() (sklearn.cluster.kmeans method)": [[427, "sklearn.cluster.KMeans.score"]], "set_output() (sklearn.cluster.kmeans method)": [[427, "sklearn.cluster.KMeans.set_output"]], "set_params() (sklearn.cluster.kmeans method)": [[427, "sklearn.cluster.KMeans.set_params"]], "transform() (sklearn.cluster.kmeans method)": [[427, "sklearn.cluster.KMeans.transform"]], "meanshift (class in sklearn.cluster)": [[428, "sklearn.cluster.MeanShift"]], "fit() (sklearn.cluster.meanshift method)": [[428, "sklearn.cluster.MeanShift.fit"]], "fit_predict() (sklearn.cluster.meanshift method)": [[428, "sklearn.cluster.MeanShift.fit_predict"]], "get_params() (sklearn.cluster.meanshift method)": [[428, "sklearn.cluster.MeanShift.get_params"]], "predict() (sklearn.cluster.meanshift method)": [[428, "sklearn.cluster.MeanShift.predict"]], "set_params() (sklearn.cluster.meanshift method)": [[428, "sklearn.cluster.MeanShift.set_params"]], "minibatchkmeans (class in sklearn.cluster)": [[429, "sklearn.cluster.MiniBatchKMeans"]], "fit() (sklearn.cluster.minibatchkmeans method)": [[429, "sklearn.cluster.MiniBatchKMeans.fit"]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[429, "sklearn.cluster.MiniBatchKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[429, "sklearn.cluster.MiniBatchKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[429, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[429, "sklearn.cluster.MiniBatchKMeans.get_params"]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[429, "sklearn.cluster.MiniBatchKMeans.partial_fit"]], "predict() (sklearn.cluster.minibatchkmeans method)": [[429, "sklearn.cluster.MiniBatchKMeans.predict"]], "score() (sklearn.cluster.minibatchkmeans method)": [[429, "sklearn.cluster.MiniBatchKMeans.score"]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[429, "sklearn.cluster.MiniBatchKMeans.set_output"]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[429, "sklearn.cluster.MiniBatchKMeans.set_params"]], "transform() (sklearn.cluster.minibatchkmeans method)": [[429, "sklearn.cluster.MiniBatchKMeans.transform"]], "optics (class in sklearn.cluster)": [[430, "sklearn.cluster.OPTICS"]], "fit() (sklearn.cluster.optics method)": [[430, "sklearn.cluster.OPTICS.fit"]], "fit_predict() (sklearn.cluster.optics method)": [[430, "sklearn.cluster.OPTICS.fit_predict"]], "get_params() (sklearn.cluster.optics method)": [[430, "sklearn.cluster.OPTICS.get_params"]], "set_params() (sklearn.cluster.optics method)": [[430, "sklearn.cluster.OPTICS.set_params"]], "spectralbiclustering (class in sklearn.cluster)": [[431, "sklearn.cluster.SpectralBiclustering"]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[431, "sklearn.cluster.SpectralBiclustering.biclusters_"]], "fit() (sklearn.cluster.spectralbiclustering method)": [[431, "sklearn.cluster.SpectralBiclustering.fit"]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[431, "sklearn.cluster.SpectralBiclustering.get_indices"]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[431, "sklearn.cluster.SpectralBiclustering.get_params"]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[431, "sklearn.cluster.SpectralBiclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[431, "sklearn.cluster.SpectralBiclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[431, "sklearn.cluster.SpectralBiclustering.set_params"]], "spectralclustering (class in sklearn.cluster)": [[432, "sklearn.cluster.SpectralClustering"]], "fit() (sklearn.cluster.spectralclustering method)": [[432, "sklearn.cluster.SpectralClustering.fit"]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[432, "sklearn.cluster.SpectralClustering.fit_predict"]], "get_params() (sklearn.cluster.spectralclustering method)": [[432, "sklearn.cluster.SpectralClustering.get_params"]], "set_params() (sklearn.cluster.spectralclustering method)": [[432, "sklearn.cluster.SpectralClustering.set_params"]], "spectralcoclustering (class in sklearn.cluster)": [[433, "sklearn.cluster.SpectralCoclustering"]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[433, "sklearn.cluster.SpectralCoclustering.biclusters_"]], "fit() (sklearn.cluster.spectralcoclustering method)": [[433, "sklearn.cluster.SpectralCoclustering.fit"]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[433, "sklearn.cluster.SpectralCoclustering.get_indices"]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[433, "sklearn.cluster.SpectralCoclustering.get_params"]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[433, "sklearn.cluster.SpectralCoclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[433, "sklearn.cluster.SpectralCoclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[433, "sklearn.cluster.SpectralCoclustering.set_params"]], "affinity_propagation() (in module sklearn.cluster)": [[434, "sklearn.cluster.affinity_propagation"]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[435, "sklearn.cluster.cluster_optics_dbscan"]], "cluster_optics_xi() (in module sklearn.cluster)": [[436, "sklearn.cluster.cluster_optics_xi"]], "compute_optics_graph() (in module sklearn.cluster)": [[437, "sklearn.cluster.compute_optics_graph"]], "estimate_bandwidth() (in module sklearn.cluster)": [[438, "sklearn.cluster.estimate_bandwidth"]], "k_means() (in module sklearn.cluster)": [[439, "sklearn.cluster.k_means"]], "kmeans_plusplus() (in module sklearn.cluster)": [[440, "sklearn.cluster.kmeans_plusplus"]], "mean_shift() (in module sklearn.cluster)": [[441, "sklearn.cluster.mean_shift"]], "spectral_clustering() (in module sklearn.cluster)": [[442, "sklearn.cluster.spectral_clustering"]], "ward_tree() (in module sklearn.cluster)": [[443, "sklearn.cluster.ward_tree"]], "columntransformer (class in sklearn.compose)": [[444, "sklearn.compose.ColumnTransformer"]], "fit() (sklearn.compose.columntransformer method)": [[444, "sklearn.compose.ColumnTransformer.fit"]], "fit_transform() (sklearn.compose.columntransformer method)": [[444, "sklearn.compose.ColumnTransformer.fit_transform"]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[444, "sklearn.compose.ColumnTransformer.get_feature_names_out"]], "get_params() (sklearn.compose.columntransformer method)": [[444, "sklearn.compose.ColumnTransformer.get_params"]], "named_transformers_ (sklearn.compose.columntransformer property)": [[444, "sklearn.compose.ColumnTransformer.named_transformers_"]], "set_output() (sklearn.compose.columntransformer method)": [[444, "sklearn.compose.ColumnTransformer.set_output"]], "set_params() (sklearn.compose.columntransformer method)": [[444, "sklearn.compose.ColumnTransformer.set_params"]], "transform() (sklearn.compose.columntransformer method)": [[444, "sklearn.compose.ColumnTransformer.transform"]], "transformedtargetregressor (class in sklearn.compose)": [[445, "sklearn.compose.TransformedTargetRegressor"]], "fit() (sklearn.compose.transformedtargetregressor method)": [[445, "sklearn.compose.TransformedTargetRegressor.fit"]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[445, "sklearn.compose.TransformedTargetRegressor.get_params"]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[445, "sklearn.compose.TransformedTargetRegressor.n_features_in_"]], "predict() (sklearn.compose.transformedtargetregressor method)": [[445, "sklearn.compose.TransformedTargetRegressor.predict"]], "score() (sklearn.compose.transformedtargetregressor method)": [[445, "sklearn.compose.TransformedTargetRegressor.score"]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[445, "sklearn.compose.TransformedTargetRegressor.set_params"]], "make_column_selector() (in module sklearn.compose)": [[446, "sklearn.compose.make_column_selector"]], "make_column_transformer() (in module sklearn.compose)": [[447, "sklearn.compose.make_column_transformer"]], "config_context() (in module sklearn)": [[448, "sklearn.config_context"]], "ellipticenvelope (class in sklearn.covariance)": [[449, "sklearn.covariance.EllipticEnvelope"]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[449, "sklearn.covariance.EllipticEnvelope.correct_covariance"]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[449, "sklearn.covariance.EllipticEnvelope.decision_function"]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[449, "sklearn.covariance.EllipticEnvelope.error_norm"]], "fit() (sklearn.covariance.ellipticenvelope method)": [[449, "sklearn.covariance.EllipticEnvelope.fit"]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[449, "sklearn.covariance.EllipticEnvelope.fit_predict"]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[449, "sklearn.covariance.EllipticEnvelope.get_params"]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[449, "sklearn.covariance.EllipticEnvelope.get_precision"]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[449, "sklearn.covariance.EllipticEnvelope.mahalanobis"]], "predict() (sklearn.covariance.ellipticenvelope method)": [[449, "sklearn.covariance.EllipticEnvelope.predict"]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[449, "sklearn.covariance.EllipticEnvelope.reweight_covariance"]], "score() (sklearn.covariance.ellipticenvelope method)": [[449, "sklearn.covariance.EllipticEnvelope.score"]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[449, "sklearn.covariance.EllipticEnvelope.score_samples"]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[449, "sklearn.covariance.EllipticEnvelope.set_params"]], "empiricalcovariance (class in sklearn.covariance)": [[450, "sklearn.covariance.EmpiricalCovariance"]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[450, "sklearn.covariance.EmpiricalCovariance.error_norm"]], "fit() (sklearn.covariance.empiricalcovariance method)": [[450, "sklearn.covariance.EmpiricalCovariance.fit"]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[450, "sklearn.covariance.EmpiricalCovariance.get_params"]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[450, "sklearn.covariance.EmpiricalCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[450, "sklearn.covariance.EmpiricalCovariance.mahalanobis"]], "score() (sklearn.covariance.empiricalcovariance method)": [[450, "sklearn.covariance.EmpiricalCovariance.score"]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[450, "sklearn.covariance.EmpiricalCovariance.set_params"]], "graphicallasso (class in sklearn.covariance)": [[451, "sklearn.covariance.GraphicalLasso"]], "error_norm() (sklearn.covariance.graphicallasso method)": [[451, "sklearn.covariance.GraphicalLasso.error_norm"]], "fit() (sklearn.covariance.graphicallasso method)": [[451, "sklearn.covariance.GraphicalLasso.fit"]], "get_params() (sklearn.covariance.graphicallasso method)": [[451, "sklearn.covariance.GraphicalLasso.get_params"]], "get_precision() (sklearn.covariance.graphicallasso method)": [[451, "sklearn.covariance.GraphicalLasso.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[451, "sklearn.covariance.GraphicalLasso.mahalanobis"]], "score() (sklearn.covariance.graphicallasso method)": [[451, "sklearn.covariance.GraphicalLasso.score"]], "set_params() (sklearn.covariance.graphicallasso method)": [[451, "sklearn.covariance.GraphicalLasso.set_params"]], "graphicallassocv (class in sklearn.covariance)": [[452, "sklearn.covariance.GraphicalLassoCV"]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[452, "sklearn.covariance.GraphicalLassoCV.error_norm"]], "fit() (sklearn.covariance.graphicallassocv method)": [[452, "sklearn.covariance.GraphicalLassoCV.fit"]], "get_params() (sklearn.covariance.graphicallassocv method)": [[452, "sklearn.covariance.GraphicalLassoCV.get_params"]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[452, "sklearn.covariance.GraphicalLassoCV.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[452, "sklearn.covariance.GraphicalLassoCV.mahalanobis"]], "score() (sklearn.covariance.graphicallassocv method)": [[452, "sklearn.covariance.GraphicalLassoCV.score"]], "set_params() (sklearn.covariance.graphicallassocv method)": [[452, "sklearn.covariance.GraphicalLassoCV.set_params"]], "ledoitwolf (class in sklearn.covariance)": [[453, "sklearn.covariance.LedoitWolf"]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[453, "sklearn.covariance.LedoitWolf.error_norm"]], "fit() (sklearn.covariance.ledoitwolf method)": [[453, "sklearn.covariance.LedoitWolf.fit"]], "get_params() (sklearn.covariance.ledoitwolf method)": [[453, "sklearn.covariance.LedoitWolf.get_params"]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[453, "sklearn.covariance.LedoitWolf.get_precision"]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[453, "sklearn.covariance.LedoitWolf.mahalanobis"]], "score() (sklearn.covariance.ledoitwolf method)": [[453, "sklearn.covariance.LedoitWolf.score"]], "set_params() (sklearn.covariance.ledoitwolf method)": [[453, "sklearn.covariance.LedoitWolf.set_params"]], "mincovdet (class in sklearn.covariance)": [[454, "sklearn.covariance.MinCovDet"]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[454, "sklearn.covariance.MinCovDet.correct_covariance"]], "error_norm() (sklearn.covariance.mincovdet method)": [[454, "sklearn.covariance.MinCovDet.error_norm"]], "fit() (sklearn.covariance.mincovdet method)": [[454, "sklearn.covariance.MinCovDet.fit"]], "get_params() (sklearn.covariance.mincovdet method)": [[454, "sklearn.covariance.MinCovDet.get_params"]], "get_precision() (sklearn.covariance.mincovdet method)": [[454, "sklearn.covariance.MinCovDet.get_precision"]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[454, "sklearn.covariance.MinCovDet.mahalanobis"]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[454, "sklearn.covariance.MinCovDet.reweight_covariance"]], "score() (sklearn.covariance.mincovdet method)": [[454, "sklearn.covariance.MinCovDet.score"]], "set_params() (sklearn.covariance.mincovdet method)": [[454, "sklearn.covariance.MinCovDet.set_params"]], "oas (class in sklearn.covariance)": [[455, "sklearn.covariance.OAS"]], "error_norm() (sklearn.covariance.oas method)": [[455, "sklearn.covariance.OAS.error_norm"]], "fit() (sklearn.covariance.oas method)": [[455, "sklearn.covariance.OAS.fit"]], "get_params() (sklearn.covariance.oas method)": [[455, "sklearn.covariance.OAS.get_params"]], "get_precision() (sklearn.covariance.oas method)": [[455, "sklearn.covariance.OAS.get_precision"]], "mahalanobis() (sklearn.covariance.oas method)": [[455, "sklearn.covariance.OAS.mahalanobis"]], "score() (sklearn.covariance.oas method)": [[455, "sklearn.covariance.OAS.score"]], "set_params() (sklearn.covariance.oas method)": [[455, "sklearn.covariance.OAS.set_params"]], "shrunkcovariance (class in sklearn.covariance)": [[456, "sklearn.covariance.ShrunkCovariance"]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[456, "sklearn.covariance.ShrunkCovariance.error_norm"]], "fit() (sklearn.covariance.shrunkcovariance method)": [[456, "sklearn.covariance.ShrunkCovariance.fit"]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[456, "sklearn.covariance.ShrunkCovariance.get_params"]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[456, "sklearn.covariance.ShrunkCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[456, "sklearn.covariance.ShrunkCovariance.mahalanobis"]], "score() (sklearn.covariance.shrunkcovariance method)": [[456, "sklearn.covariance.ShrunkCovariance.score"]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[456, "sklearn.covariance.ShrunkCovariance.set_params"]], "empirical_covariance() (in module sklearn.covariance)": [[457, "sklearn.covariance.empirical_covariance"]], "graphical_lasso() (in module sklearn.covariance)": [[458, "sklearn.covariance.graphical_lasso"]], "ledoit_wolf() (in module sklearn.covariance)": [[459, "sklearn.covariance.ledoit_wolf"]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[460, "sklearn.covariance.ledoit_wolf_shrinkage"]], "shrunk_covariance() (in module sklearn.covariance)": [[461, "sklearn.covariance.shrunk_covariance"]], "cca (class in sklearn.cross_decomposition)": [[462, "sklearn.cross_decomposition.CCA"]], "coef_ (sklearn.cross_decomposition.cca property)": [[462, "sklearn.cross_decomposition.CCA.coef_"]], "fit() (sklearn.cross_decomposition.cca method)": [[462, "sklearn.cross_decomposition.CCA.fit"]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[462, "sklearn.cross_decomposition.CCA.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[462, "sklearn.cross_decomposition.CCA.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.cca method)": [[462, "sklearn.cross_decomposition.CCA.get_params"]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[462, "sklearn.cross_decomposition.CCA.inverse_transform"]], "predict() (sklearn.cross_decomposition.cca method)": [[462, "sklearn.cross_decomposition.CCA.predict"]], "score() (sklearn.cross_decomposition.cca method)": [[462, "sklearn.cross_decomposition.CCA.score"]], "set_output() (sklearn.cross_decomposition.cca method)": [[462, "sklearn.cross_decomposition.CCA.set_output"]], "set_params() (sklearn.cross_decomposition.cca method)": [[462, "sklearn.cross_decomposition.CCA.set_params"]], "transform() (sklearn.cross_decomposition.cca method)": [[462, "sklearn.cross_decomposition.CCA.transform"]], "plscanonical (class in sklearn.cross_decomposition)": [[463, "sklearn.cross_decomposition.PLSCanonical"]], "coef_ (sklearn.cross_decomposition.plscanonical property)": [[463, "sklearn.cross_decomposition.PLSCanonical.coef_"]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[463, "sklearn.cross_decomposition.PLSCanonical.fit"]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[463, "sklearn.cross_decomposition.PLSCanonical.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[463, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[463, "sklearn.cross_decomposition.PLSCanonical.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[463, "sklearn.cross_decomposition.PLSCanonical.inverse_transform"]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[463, "sklearn.cross_decomposition.PLSCanonical.predict"]], "score() (sklearn.cross_decomposition.plscanonical method)": [[463, "sklearn.cross_decomposition.PLSCanonical.score"]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[463, "sklearn.cross_decomposition.PLSCanonical.set_output"]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[463, "sklearn.cross_decomposition.PLSCanonical.set_params"]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[463, "sklearn.cross_decomposition.PLSCanonical.transform"]], "plsregression (class in sklearn.cross_decomposition)": [[464, "sklearn.cross_decomposition.PLSRegression"]], "coef_ (sklearn.cross_decomposition.plsregression property)": [[464, "sklearn.cross_decomposition.PLSRegression.coef_"]], "fit() (sklearn.cross_decomposition.plsregression method)": [[464, "sklearn.cross_decomposition.PLSRegression.fit"]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[464, "sklearn.cross_decomposition.PLSRegression.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[464, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[464, "sklearn.cross_decomposition.PLSRegression.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[464, "sklearn.cross_decomposition.PLSRegression.inverse_transform"]], "predict() (sklearn.cross_decomposition.plsregression method)": [[464, "sklearn.cross_decomposition.PLSRegression.predict"]], "score() (sklearn.cross_decomposition.plsregression method)": [[464, "sklearn.cross_decomposition.PLSRegression.score"]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[464, "sklearn.cross_decomposition.PLSRegression.set_output"]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[464, "sklearn.cross_decomposition.PLSRegression.set_params"]], "transform() (sklearn.cross_decomposition.plsregression method)": [[464, "sklearn.cross_decomposition.PLSRegression.transform"]], "plssvd (class in sklearn.cross_decomposition)": [[465, "sklearn.cross_decomposition.PLSSVD"]], "fit() (sklearn.cross_decomposition.plssvd method)": [[465, "sklearn.cross_decomposition.PLSSVD.fit"]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[465, "sklearn.cross_decomposition.PLSSVD.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[465, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[465, "sklearn.cross_decomposition.PLSSVD.get_params"]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[465, "sklearn.cross_decomposition.PLSSVD.set_output"]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[465, "sklearn.cross_decomposition.PLSSVD.set_params"]], "transform() (sklearn.cross_decomposition.plssvd method)": [[465, "sklearn.cross_decomposition.PLSSVD.transform"]], "clear_data_home() (in module sklearn.datasets)": [[466, "sklearn.datasets.clear_data_home"]], "dump_svmlight_file() (in module sklearn.datasets)": [[467, "sklearn.datasets.dump_svmlight_file"]], "fetch_20newsgroups() (in module sklearn.datasets)": [[468, "sklearn.datasets.fetch_20newsgroups"]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[469, "sklearn.datasets.fetch_20newsgroups_vectorized"]], "fetch_california_housing() (in module sklearn.datasets)": [[470, "sklearn.datasets.fetch_california_housing"]], "fetch_covtype() (in module sklearn.datasets)": [[471, "sklearn.datasets.fetch_covtype"]], "fetch_kddcup99() (in module sklearn.datasets)": [[472, "sklearn.datasets.fetch_kddcup99"]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[473, "sklearn.datasets.fetch_lfw_pairs"]], "fetch_lfw_people() (in module sklearn.datasets)": [[474, "sklearn.datasets.fetch_lfw_people"]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[475, "sklearn.datasets.fetch_olivetti_faces"]], "fetch_openml() (in module sklearn.datasets)": [[476, "sklearn.datasets.fetch_openml"]], "fetch_rcv1() (in module sklearn.datasets)": [[477, "sklearn.datasets.fetch_rcv1"]], "fetch_species_distributions() (in module sklearn.datasets)": [[478, "sklearn.datasets.fetch_species_distributions"]], "get_data_home() (in module sklearn.datasets)": [[479, "sklearn.datasets.get_data_home"]], "load_breast_cancer() (in module sklearn.datasets)": [[480, "sklearn.datasets.load_breast_cancer"]], "load_diabetes() (in module sklearn.datasets)": [[481, "sklearn.datasets.load_diabetes"]], "load_digits() (in module sklearn.datasets)": [[482, "sklearn.datasets.load_digits"]], "load_files() (in module sklearn.datasets)": [[483, "sklearn.datasets.load_files"]], "load_iris() (in module sklearn.datasets)": [[484, "sklearn.datasets.load_iris"]], "load_linnerud() (in module sklearn.datasets)": [[485, "sklearn.datasets.load_linnerud"]], "load_sample_image() (in module sklearn.datasets)": [[486, "sklearn.datasets.load_sample_image"]], "load_sample_images() (in module sklearn.datasets)": [[487, "sklearn.datasets.load_sample_images"]], "load_svmlight_file() (in module sklearn.datasets)": [[488, "sklearn.datasets.load_svmlight_file"]], "load_svmlight_files() (in module sklearn.datasets)": [[489, "sklearn.datasets.load_svmlight_files"]], "load_wine() (in module sklearn.datasets)": [[490, "sklearn.datasets.load_wine"]], "make_biclusters() (in module sklearn.datasets)": [[491, "sklearn.datasets.make_biclusters"]], "make_blobs() (in module sklearn.datasets)": [[492, "sklearn.datasets.make_blobs"]], "make_checkerboard() (in module sklearn.datasets)": [[493, "sklearn.datasets.make_checkerboard"]], "make_circles() (in module sklearn.datasets)": [[494, "sklearn.datasets.make_circles"]], "make_classification() (in module sklearn.datasets)": [[495, "sklearn.datasets.make_classification"]], "make_friedman1() (in module sklearn.datasets)": [[496, "sklearn.datasets.make_friedman1"]], "make_friedman2() (in module sklearn.datasets)": [[497, "sklearn.datasets.make_friedman2"]], "make_friedman3() (in module sklearn.datasets)": [[498, "sklearn.datasets.make_friedman3"]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[499, "sklearn.datasets.make_gaussian_quantiles"]], "make_hastie_10_2() (in module sklearn.datasets)": [[500, "sklearn.datasets.make_hastie_10_2"]], "make_low_rank_matrix() (in module sklearn.datasets)": [[501, "sklearn.datasets.make_low_rank_matrix"]], "make_moons() (in module sklearn.datasets)": [[502, "sklearn.datasets.make_moons"]], "make_multilabel_classification() (in module sklearn.datasets)": [[503, "sklearn.datasets.make_multilabel_classification"]], "make_regression() (in module sklearn.datasets)": [[504, "sklearn.datasets.make_regression"]], "make_s_curve() (in module sklearn.datasets)": [[505, "sklearn.datasets.make_s_curve"]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[506, "sklearn.datasets.make_sparse_coded_signal"]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[507, "sklearn.datasets.make_sparse_spd_matrix"]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[508, "sklearn.datasets.make_sparse_uncorrelated"]], "make_spd_matrix() (in module sklearn.datasets)": [[509, "sklearn.datasets.make_spd_matrix"]], "make_swiss_roll() (in module sklearn.datasets)": [[510, "sklearn.datasets.make_swiss_roll"]], "dictionarylearning (class in sklearn.decomposition)": [[511, "sklearn.decomposition.DictionaryLearning"]], "fit() (sklearn.decomposition.dictionarylearning method)": [[511, "sklearn.decomposition.DictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[511, "sklearn.decomposition.DictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[511, "sklearn.decomposition.DictionaryLearning.get_feature_names_out"]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[511, "sklearn.decomposition.DictionaryLearning.get_params"]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[511, "sklearn.decomposition.DictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[511, "sklearn.decomposition.DictionaryLearning.set_params"]], "transform() (sklearn.decomposition.dictionarylearning method)": [[511, "sklearn.decomposition.DictionaryLearning.transform"]], "factoranalysis (class in sklearn.decomposition)": [[512, "sklearn.decomposition.FactorAnalysis"]], "fit() (sklearn.decomposition.factoranalysis method)": [[512, "sklearn.decomposition.FactorAnalysis.fit"]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[512, "sklearn.decomposition.FactorAnalysis.fit_transform"]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[512, "sklearn.decomposition.FactorAnalysis.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[512, "sklearn.decomposition.FactorAnalysis.get_feature_names_out"]], "get_params() (sklearn.decomposition.factoranalysis method)": [[512, "sklearn.decomposition.FactorAnalysis.get_params"]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[512, "sklearn.decomposition.FactorAnalysis.get_precision"]], "score() (sklearn.decomposition.factoranalysis method)": [[512, "sklearn.decomposition.FactorAnalysis.score"]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[512, "sklearn.decomposition.FactorAnalysis.score_samples"]], "set_output() (sklearn.decomposition.factoranalysis method)": [[512, "sklearn.decomposition.FactorAnalysis.set_output"]], "set_params() (sklearn.decomposition.factoranalysis method)": [[512, "sklearn.decomposition.FactorAnalysis.set_params"]], "transform() (sklearn.decomposition.factoranalysis method)": [[512, "sklearn.decomposition.FactorAnalysis.transform"]], "fastica (class in sklearn.decomposition)": [[513, "sklearn.decomposition.FastICA"]], "fit() (sklearn.decomposition.fastica method)": [[513, "sklearn.decomposition.FastICA.fit"]], "fit_transform() (sklearn.decomposition.fastica method)": [[513, "sklearn.decomposition.FastICA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[513, "sklearn.decomposition.FastICA.get_feature_names_out"]], "get_params() (sklearn.decomposition.fastica method)": [[513, "sklearn.decomposition.FastICA.get_params"]], "inverse_transform() (sklearn.decomposition.fastica method)": [[513, "sklearn.decomposition.FastICA.inverse_transform"]], "set_output() (sklearn.decomposition.fastica method)": [[513, "sklearn.decomposition.FastICA.set_output"]], "set_params() (sklearn.decomposition.fastica method)": [[513, "sklearn.decomposition.FastICA.set_params"]], "transform() (sklearn.decomposition.fastica method)": [[513, "sklearn.decomposition.FastICA.transform"]], "incrementalpca (class in sklearn.decomposition)": [[514, "sklearn.decomposition.IncrementalPCA"]], "fit() (sklearn.decomposition.incrementalpca method)": [[514, "sklearn.decomposition.IncrementalPCA.fit"]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[514, "sklearn.decomposition.IncrementalPCA.fit_transform"]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[514, "sklearn.decomposition.IncrementalPCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[514, "sklearn.decomposition.IncrementalPCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.incrementalpca method)": [[514, "sklearn.decomposition.IncrementalPCA.get_params"]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[514, "sklearn.decomposition.IncrementalPCA.get_precision"]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[514, "sklearn.decomposition.IncrementalPCA.inverse_transform"]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[514, "sklearn.decomposition.IncrementalPCA.partial_fit"]], "set_output() (sklearn.decomposition.incrementalpca method)": [[514, "sklearn.decomposition.IncrementalPCA.set_output"]], "set_params() (sklearn.decomposition.incrementalpca method)": [[514, "sklearn.decomposition.IncrementalPCA.set_params"]], "transform() (sklearn.decomposition.incrementalpca method)": [[514, "sklearn.decomposition.IncrementalPCA.transform"]], "kernelpca (class in sklearn.decomposition)": [[515, "sklearn.decomposition.KernelPCA"]], "fit() (sklearn.decomposition.kernelpca method)": [[515, "sklearn.decomposition.KernelPCA.fit"]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[515, "sklearn.decomposition.KernelPCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[515, "sklearn.decomposition.KernelPCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.kernelpca method)": [[515, "sklearn.decomposition.KernelPCA.get_params"]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[515, "sklearn.decomposition.KernelPCA.inverse_transform"]], "set_output() (sklearn.decomposition.kernelpca method)": [[515, "sklearn.decomposition.KernelPCA.set_output"]], "set_params() (sklearn.decomposition.kernelpca method)": [[515, "sklearn.decomposition.KernelPCA.set_params"]], "transform() (sklearn.decomposition.kernelpca method)": [[515, "sklearn.decomposition.KernelPCA.transform"]], "latentdirichletallocation (class in sklearn.decomposition)": [[516, "sklearn.decomposition.LatentDirichletAllocation"]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[516, "sklearn.decomposition.LatentDirichletAllocation.fit"]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[516, "sklearn.decomposition.LatentDirichletAllocation.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[516, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out"]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[516, "sklearn.decomposition.LatentDirichletAllocation.get_params"]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[516, "sklearn.decomposition.LatentDirichletAllocation.partial_fit"]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[516, "sklearn.decomposition.LatentDirichletAllocation.perplexity"]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[516, "sklearn.decomposition.LatentDirichletAllocation.score"]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[516, "sklearn.decomposition.LatentDirichletAllocation.set_output"]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[516, "sklearn.decomposition.LatentDirichletAllocation.set_params"]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[516, "sklearn.decomposition.LatentDirichletAllocation.transform"]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[517, "sklearn.decomposition.MiniBatchDictionaryLearning"]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[517, "sklearn.decomposition.MiniBatchDictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[517, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[517, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[517, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params"]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[517, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit"]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[517, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[517, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params"]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[517, "sklearn.decomposition.MiniBatchDictionaryLearning.transform"]], "minibatchnmf (class in sklearn.decomposition)": [[518, "sklearn.decomposition.MiniBatchNMF"]], "fit() (sklearn.decomposition.minibatchnmf method)": [[518, "sklearn.decomposition.MiniBatchNMF.fit"]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[518, "sklearn.decomposition.MiniBatchNMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[518, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[518, "sklearn.decomposition.MiniBatchNMF.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[518, "sklearn.decomposition.MiniBatchNMF.inverse_transform"]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[518, "sklearn.decomposition.MiniBatchNMF.partial_fit"]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[518, "sklearn.decomposition.MiniBatchNMF.set_output"]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[518, "sklearn.decomposition.MiniBatchNMF.set_params"]], "transform() (sklearn.decomposition.minibatchnmf method)": [[518, "sklearn.decomposition.MiniBatchNMF.transform"]], "minibatchsparsepca (class in sklearn.decomposition)": [[519, "sklearn.decomposition.MiniBatchSparsePCA"]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[519, "sklearn.decomposition.MiniBatchSparsePCA.fit"]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[519, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[519, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[519, "sklearn.decomposition.MiniBatchSparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[519, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[519, "sklearn.decomposition.MiniBatchSparsePCA.set_output"]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[519, "sklearn.decomposition.MiniBatchSparsePCA.set_params"]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[519, "sklearn.decomposition.MiniBatchSparsePCA.transform"]], "nmf (class in sklearn.decomposition)": [[520, "sklearn.decomposition.NMF"]], "fit() (sklearn.decomposition.nmf method)": [[520, "sklearn.decomposition.NMF.fit"]], "fit_transform() (sklearn.decomposition.nmf method)": [[520, "sklearn.decomposition.NMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[520, "sklearn.decomposition.NMF.get_feature_names_out"]], "get_params() (sklearn.decomposition.nmf method)": [[520, "sklearn.decomposition.NMF.get_params"]], "inverse_transform() (sklearn.decomposition.nmf method)": [[520, "sklearn.decomposition.NMF.inverse_transform"]], "set_output() (sklearn.decomposition.nmf method)": [[520, "sklearn.decomposition.NMF.set_output"]], "set_params() (sklearn.decomposition.nmf method)": [[520, "sklearn.decomposition.NMF.set_params"]], "transform() (sklearn.decomposition.nmf method)": [[520, "sklearn.decomposition.NMF.transform"]], "pca (class in sklearn.decomposition)": [[521, "sklearn.decomposition.PCA"]], "fit() (sklearn.decomposition.pca method)": [[521, "sklearn.decomposition.PCA.fit"]], "fit_transform() (sklearn.decomposition.pca method)": [[521, "sklearn.decomposition.PCA.fit_transform"]], "get_covariance() (sklearn.decomposition.pca method)": [[521, "sklearn.decomposition.PCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[521, "sklearn.decomposition.PCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.pca method)": [[521, "sklearn.decomposition.PCA.get_params"]], "get_precision() (sklearn.decomposition.pca method)": [[521, "sklearn.decomposition.PCA.get_precision"]], "inverse_transform() (sklearn.decomposition.pca method)": [[521, "sklearn.decomposition.PCA.inverse_transform"]], "score() (sklearn.decomposition.pca method)": [[521, "sklearn.decomposition.PCA.score"]], "score_samples() (sklearn.decomposition.pca method)": [[521, "sklearn.decomposition.PCA.score_samples"]], "set_output() (sklearn.decomposition.pca method)": [[521, "sklearn.decomposition.PCA.set_output"]], "set_params() (sklearn.decomposition.pca method)": [[521, "sklearn.decomposition.PCA.set_params"]], "transform() (sklearn.decomposition.pca method)": [[521, "sklearn.decomposition.PCA.transform"]], "sparsecoder (class in sklearn.decomposition)": [[522, "sklearn.decomposition.SparseCoder"]], "fit() (sklearn.decomposition.sparsecoder method)": [[522, "sklearn.decomposition.SparseCoder.fit"]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[522, "sklearn.decomposition.SparseCoder.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[522, "sklearn.decomposition.SparseCoder.get_feature_names_out"]], "get_params() (sklearn.decomposition.sparsecoder method)": [[522, "sklearn.decomposition.SparseCoder.get_params"]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[522, "sklearn.decomposition.SparseCoder.n_components_"]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[522, "sklearn.decomposition.SparseCoder.n_features_in_"]], "set_output() (sklearn.decomposition.sparsecoder method)": [[522, "sklearn.decomposition.SparseCoder.set_output"]], "set_params() (sklearn.decomposition.sparsecoder method)": [[522, "sklearn.decomposition.SparseCoder.set_params"]], "transform() (sklearn.decomposition.sparsecoder method)": [[522, "sklearn.decomposition.SparseCoder.transform"]], "sparsepca (class in sklearn.decomposition)": [[523, "sklearn.decomposition.SparsePCA"]], "fit() (sklearn.decomposition.sparsepca method)": [[523, "sklearn.decomposition.SparsePCA.fit"]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[523, "sklearn.decomposition.SparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[523, "sklearn.decomposition.SparsePCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.sparsepca method)": [[523, "sklearn.decomposition.SparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[523, "sklearn.decomposition.SparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.sparsepca method)": [[523, "sklearn.decomposition.SparsePCA.set_output"]], "set_params() (sklearn.decomposition.sparsepca method)": [[523, "sklearn.decomposition.SparsePCA.set_params"]], "transform() (sklearn.decomposition.sparsepca method)": [[523, "sklearn.decomposition.SparsePCA.transform"]], "truncatedsvd (class in sklearn.decomposition)": [[524, "sklearn.decomposition.TruncatedSVD"]], "fit() (sklearn.decomposition.truncatedsvd method)": [[524, "sklearn.decomposition.TruncatedSVD.fit"]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[524, "sklearn.decomposition.TruncatedSVD.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[524, "sklearn.decomposition.TruncatedSVD.get_feature_names_out"]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[524, "sklearn.decomposition.TruncatedSVD.get_params"]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[524, "sklearn.decomposition.TruncatedSVD.inverse_transform"]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[524, "sklearn.decomposition.TruncatedSVD.set_output"]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[524, "sklearn.decomposition.TruncatedSVD.set_params"]], "transform() (sklearn.decomposition.truncatedsvd method)": [[524, "sklearn.decomposition.TruncatedSVD.transform"]], "dict_learning() (in module sklearn.decomposition)": [[525, "sklearn.decomposition.dict_learning"]], "dict_learning_online() (in module sklearn.decomposition)": [[526, "sklearn.decomposition.dict_learning_online"]], "non_negative_factorization() (in module sklearn.decomposition)": [[527, "sklearn.decomposition.non_negative_factorization"]], "sparse_encode() (in module sklearn.decomposition)": [[528, "sklearn.decomposition.sparse_encode"]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[529, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[529, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[529, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[529, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[529, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out"]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[529, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[529, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[529, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[529, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[529, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score"]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[529, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output"]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[529, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params"]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[529, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform"]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[530, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[530, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[530, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit"]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[530, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[530, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[530, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[530, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[530, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score"]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[530, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params"]], "dummyclassifier (class in sklearn.dummy)": [[531, "sklearn.dummy.DummyClassifier"]], "fit() (sklearn.dummy.dummyclassifier method)": [[531, "sklearn.dummy.DummyClassifier.fit"]], "get_params() (sklearn.dummy.dummyclassifier method)": [[531, "sklearn.dummy.DummyClassifier.get_params"]], "predict() (sklearn.dummy.dummyclassifier method)": [[531, "sklearn.dummy.DummyClassifier.predict"]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[531, "sklearn.dummy.DummyClassifier.predict_log_proba"]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[531, "sklearn.dummy.DummyClassifier.predict_proba"]], "score() (sklearn.dummy.dummyclassifier method)": [[531, "sklearn.dummy.DummyClassifier.score"]], "set_params() (sklearn.dummy.dummyclassifier method)": [[531, "sklearn.dummy.DummyClassifier.set_params"]], "dummyregressor (class in sklearn.dummy)": [[532, "sklearn.dummy.DummyRegressor"]], "fit() (sklearn.dummy.dummyregressor method)": [[532, "sklearn.dummy.DummyRegressor.fit"]], "get_params() (sklearn.dummy.dummyregressor method)": [[532, "sklearn.dummy.DummyRegressor.get_params"]], "predict() (sklearn.dummy.dummyregressor method)": [[532, "sklearn.dummy.DummyRegressor.predict"]], "score() (sklearn.dummy.dummyregressor method)": [[532, "sklearn.dummy.DummyRegressor.score"]], "set_params() (sklearn.dummy.dummyregressor method)": [[532, "sklearn.dummy.DummyRegressor.set_params"]], "adaboostclassifier (class in sklearn.ensemble)": [[533, "sklearn.ensemble.AdaBoostClassifier"]], "base_estimator_ (sklearn.ensemble.adaboostclassifier property)": [[533, "sklearn.ensemble.AdaBoostClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[533, "sklearn.ensemble.AdaBoostClassifier.decision_function"]], "estimator_ (sklearn.ensemble.adaboostclassifier property)": [[533, "sklearn.ensemble.AdaBoostClassifier.estimator_"]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[533, "sklearn.ensemble.AdaBoostClassifier.feature_importances_"]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[533, "sklearn.ensemble.AdaBoostClassifier.fit"]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[533, "sklearn.ensemble.AdaBoostClassifier.get_params"]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[533, "sklearn.ensemble.AdaBoostClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[533, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[533, "sklearn.ensemble.AdaBoostClassifier.predict_proba"]], "score() (sklearn.ensemble.adaboostclassifier method)": [[533, "sklearn.ensemble.AdaBoostClassifier.score"]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[533, "sklearn.ensemble.AdaBoostClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[533, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[533, "sklearn.ensemble.AdaBoostClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[533, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba"]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[533, "sklearn.ensemble.AdaBoostClassifier.staged_score"]], "adaboostregressor (class in sklearn.ensemble)": [[534, "sklearn.ensemble.AdaBoostRegressor"]], "base_estimator_ (sklearn.ensemble.adaboostregressor property)": [[534, "sklearn.ensemble.AdaBoostRegressor.base_estimator_"]], "estimator_ (sklearn.ensemble.adaboostregressor property)": [[534, "sklearn.ensemble.AdaBoostRegressor.estimator_"]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[534, "sklearn.ensemble.AdaBoostRegressor.feature_importances_"]], "fit() (sklearn.ensemble.adaboostregressor method)": [[534, "sklearn.ensemble.AdaBoostRegressor.fit"]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[534, "sklearn.ensemble.AdaBoostRegressor.get_params"]], "predict() (sklearn.ensemble.adaboostregressor method)": [[534, "sklearn.ensemble.AdaBoostRegressor.predict"]], "score() (sklearn.ensemble.adaboostregressor method)": [[534, "sklearn.ensemble.AdaBoostRegressor.score"]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[534, "sklearn.ensemble.AdaBoostRegressor.set_params"]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[534, "sklearn.ensemble.AdaBoostRegressor.staged_predict"]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[534, "sklearn.ensemble.AdaBoostRegressor.staged_score"]], "baggingclassifier (class in sklearn.ensemble)": [[535, "sklearn.ensemble.BaggingClassifier"]], "base_estimator_ (sklearn.ensemble.baggingclassifier property)": [[535, "sklearn.ensemble.BaggingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[535, "sklearn.ensemble.BaggingClassifier.decision_function"]], "estimator_ (sklearn.ensemble.baggingclassifier property)": [[535, "sklearn.ensemble.BaggingClassifier.estimator_"]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[535, "sklearn.ensemble.BaggingClassifier.estimators_samples_"]], "fit() (sklearn.ensemble.baggingclassifier method)": [[535, "sklearn.ensemble.BaggingClassifier.fit"]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[535, "sklearn.ensemble.BaggingClassifier.get_params"]], "predict() (sklearn.ensemble.baggingclassifier method)": [[535, "sklearn.ensemble.BaggingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[535, "sklearn.ensemble.BaggingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[535, "sklearn.ensemble.BaggingClassifier.predict_proba"]], "score() (sklearn.ensemble.baggingclassifier method)": [[535, "sklearn.ensemble.BaggingClassifier.score"]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[535, "sklearn.ensemble.BaggingClassifier.set_params"]], "baggingregressor (class in sklearn.ensemble)": [[536, "sklearn.ensemble.BaggingRegressor"]], "base_estimator_ (sklearn.ensemble.baggingregressor property)": [[536, "sklearn.ensemble.BaggingRegressor.base_estimator_"]], "estimator_ (sklearn.ensemble.baggingregressor property)": [[536, "sklearn.ensemble.BaggingRegressor.estimator_"]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[536, "sklearn.ensemble.BaggingRegressor.estimators_samples_"]], "fit() (sklearn.ensemble.baggingregressor method)": [[536, "sklearn.ensemble.BaggingRegressor.fit"]], "get_params() (sklearn.ensemble.baggingregressor method)": [[536, "sklearn.ensemble.BaggingRegressor.get_params"]], "predict() (sklearn.ensemble.baggingregressor method)": [[536, "sklearn.ensemble.BaggingRegressor.predict"]], "score() (sklearn.ensemble.baggingregressor method)": [[536, "sklearn.ensemble.BaggingRegressor.score"]], "set_params() (sklearn.ensemble.baggingregressor method)": [[536, "sklearn.ensemble.BaggingRegressor.set_params"]], "extratreesclassifier (class in sklearn.ensemble)": [[537, "sklearn.ensemble.ExtraTreesClassifier"]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[537, "sklearn.ensemble.ExtraTreesClassifier.apply"]], "base_estimator_ (sklearn.ensemble.extratreesclassifier property)": [[537, "sklearn.ensemble.ExtraTreesClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[537, "sklearn.ensemble.ExtraTreesClassifier.decision_path"]], "estimator_ (sklearn.ensemble.extratreesclassifier property)": [[537, "sklearn.ensemble.ExtraTreesClassifier.estimator_"]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[537, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_"]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[537, "sklearn.ensemble.ExtraTreesClassifier.fit"]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[537, "sklearn.ensemble.ExtraTreesClassifier.get_params"]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[537, "sklearn.ensemble.ExtraTreesClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[537, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[537, "sklearn.ensemble.ExtraTreesClassifier.predict_proba"]], "score() (sklearn.ensemble.extratreesclassifier method)": [[537, "sklearn.ensemble.ExtraTreesClassifier.score"]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[537, "sklearn.ensemble.ExtraTreesClassifier.set_params"]], "extratreesregressor (class in sklearn.ensemble)": [[538, "sklearn.ensemble.ExtraTreesRegressor"]], "apply() (sklearn.ensemble.extratreesregressor method)": [[538, "sklearn.ensemble.ExtraTreesRegressor.apply"]], "base_estimator_ (sklearn.ensemble.extratreesregressor property)": [[538, "sklearn.ensemble.ExtraTreesRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[538, "sklearn.ensemble.ExtraTreesRegressor.decision_path"]], "estimator_ (sklearn.ensemble.extratreesregressor property)": [[538, "sklearn.ensemble.ExtraTreesRegressor.estimator_"]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[538, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_"]], "fit() (sklearn.ensemble.extratreesregressor method)": [[538, "sklearn.ensemble.ExtraTreesRegressor.fit"]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[538, "sklearn.ensemble.ExtraTreesRegressor.get_params"]], "predict() (sklearn.ensemble.extratreesregressor method)": [[538, "sklearn.ensemble.ExtraTreesRegressor.predict"]], "score() (sklearn.ensemble.extratreesregressor method)": [[538, "sklearn.ensemble.ExtraTreesRegressor.score"]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[538, "sklearn.ensemble.ExtraTreesRegressor.set_params"]], "gradientboostingclassifier (class in sklearn.ensemble)": [[539, "sklearn.ensemble.GradientBoostingClassifier"]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[539, "sklearn.ensemble.GradientBoostingClassifier.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingclassifier property)": [[539, "sklearn.ensemble.GradientBoostingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[539, "sklearn.ensemble.GradientBoostingClassifier.decision_function"]], "estimator_ (sklearn.ensemble.gradientboostingclassifier property)": [[539, "sklearn.ensemble.GradientBoostingClassifier.estimator_"]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[539, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[539, "sklearn.ensemble.GradientBoostingClassifier.fit"]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[539, "sklearn.ensemble.GradientBoostingClassifier.get_params"]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[539, "sklearn.ensemble.GradientBoostingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[539, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[539, "sklearn.ensemble.GradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[539, "sklearn.ensemble.GradientBoostingClassifier.score"]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[539, "sklearn.ensemble.GradientBoostingClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[539, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[539, "sklearn.ensemble.GradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[539, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba"]], "gradientboostingregressor (class in sklearn.ensemble)": [[540, "sklearn.ensemble.GradientBoostingRegressor"]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[540, "sklearn.ensemble.GradientBoostingRegressor.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingregressor property)": [[540, "sklearn.ensemble.GradientBoostingRegressor.base_estimator_"]], "estimator_ (sklearn.ensemble.gradientboostingregressor property)": [[540, "sklearn.ensemble.GradientBoostingRegressor.estimator_"]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[540, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[540, "sklearn.ensemble.GradientBoostingRegressor.fit"]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[540, "sklearn.ensemble.GradientBoostingRegressor.get_params"]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[540, "sklearn.ensemble.GradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[540, "sklearn.ensemble.GradientBoostingRegressor.score"]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[540, "sklearn.ensemble.GradientBoostingRegressor.set_params"]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[540, "sklearn.ensemble.GradientBoostingRegressor.staged_predict"]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[541, "sklearn.ensemble.HistGradientBoostingClassifier"]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[541, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function"]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[541, "sklearn.ensemble.HistGradientBoostingClassifier.fit"]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[541, "sklearn.ensemble.HistGradientBoostingClassifier.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[541, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[541, "sklearn.ensemble.HistGradientBoostingClassifier.predict"]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[541, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[541, "sklearn.ensemble.HistGradientBoostingClassifier.score"]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[541, "sklearn.ensemble.HistGradientBoostingClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[541, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[541, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[541, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba"]], "histgradientboostingregressor (class in sklearn.ensemble)": [[542, "sklearn.ensemble.HistGradientBoostingRegressor"]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[542, "sklearn.ensemble.HistGradientBoostingRegressor.fit"]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[542, "sklearn.ensemble.HistGradientBoostingRegressor.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[542, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[542, "sklearn.ensemble.HistGradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[542, "sklearn.ensemble.HistGradientBoostingRegressor.score"]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[542, "sklearn.ensemble.HistGradientBoostingRegressor.set_params"]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[542, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict"]], "isolationforest (class in sklearn.ensemble)": [[543, "sklearn.ensemble.IsolationForest"]], "base_estimator_ (sklearn.ensemble.isolationforest property)": [[543, "sklearn.ensemble.IsolationForest.base_estimator_"]], "decision_function() (sklearn.ensemble.isolationforest method)": [[543, "sklearn.ensemble.IsolationForest.decision_function"]], "estimator_ (sklearn.ensemble.isolationforest property)": [[543, "sklearn.ensemble.IsolationForest.estimator_"]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[543, "sklearn.ensemble.IsolationForest.estimators_samples_"]], "fit() (sklearn.ensemble.isolationforest method)": [[543, "sklearn.ensemble.IsolationForest.fit"]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[543, "sklearn.ensemble.IsolationForest.fit_predict"]], "get_params() (sklearn.ensemble.isolationforest method)": [[543, "sklearn.ensemble.IsolationForest.get_params"]], "predict() (sklearn.ensemble.isolationforest method)": [[543, "sklearn.ensemble.IsolationForest.predict"]], "score_samples() (sklearn.ensemble.isolationforest method)": [[543, "sklearn.ensemble.IsolationForest.score_samples"]], "set_params() (sklearn.ensemble.isolationforest method)": [[543, "sklearn.ensemble.IsolationForest.set_params"]], "randomforestclassifier (class in sklearn.ensemble)": [[544, "sklearn.ensemble.RandomForestClassifier"]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[544, "sklearn.ensemble.RandomForestClassifier.apply"]], "base_estimator_ (sklearn.ensemble.randomforestclassifier property)": [[544, "sklearn.ensemble.RandomForestClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[544, "sklearn.ensemble.RandomForestClassifier.decision_path"]], "estimator_ (sklearn.ensemble.randomforestclassifier property)": [[544, "sklearn.ensemble.RandomForestClassifier.estimator_"]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[544, "sklearn.ensemble.RandomForestClassifier.feature_importances_"]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[544, "sklearn.ensemble.RandomForestClassifier.fit"]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[544, "sklearn.ensemble.RandomForestClassifier.get_params"]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[544, "sklearn.ensemble.RandomForestClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[544, "sklearn.ensemble.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[544, "sklearn.ensemble.RandomForestClassifier.predict_proba"]], "score() (sklearn.ensemble.randomforestclassifier method)": [[544, "sklearn.ensemble.RandomForestClassifier.score"]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[544, "sklearn.ensemble.RandomForestClassifier.set_params"]], "randomforestregressor (class in sklearn.ensemble)": [[545, "sklearn.ensemble.RandomForestRegressor"]], "apply() (sklearn.ensemble.randomforestregressor method)": [[545, "sklearn.ensemble.RandomForestRegressor.apply"]], "base_estimator_ (sklearn.ensemble.randomforestregressor property)": [[545, "sklearn.ensemble.RandomForestRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[545, "sklearn.ensemble.RandomForestRegressor.decision_path"]], "estimator_ (sklearn.ensemble.randomforestregressor property)": [[545, "sklearn.ensemble.RandomForestRegressor.estimator_"]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[545, "sklearn.ensemble.RandomForestRegressor.feature_importances_"]], "fit() (sklearn.ensemble.randomforestregressor method)": [[545, "sklearn.ensemble.RandomForestRegressor.fit"]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[545, "sklearn.ensemble.RandomForestRegressor.get_params"]], "predict() (sklearn.ensemble.randomforestregressor method)": [[545, "sklearn.ensemble.RandomForestRegressor.predict"]], "score() (sklearn.ensemble.randomforestregressor method)": [[545, "sklearn.ensemble.RandomForestRegressor.score"]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[545, "sklearn.ensemble.RandomForestRegressor.set_params"]], "randomtreesembedding (class in sklearn.ensemble)": [[546, "sklearn.ensemble.RandomTreesEmbedding"]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[546, "sklearn.ensemble.RandomTreesEmbedding.apply"]], "base_estimator_ (sklearn.ensemble.randomtreesembedding property)": [[546, "sklearn.ensemble.RandomTreesEmbedding.base_estimator_"]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[546, "sklearn.ensemble.RandomTreesEmbedding.decision_path"]], "estimator_ (sklearn.ensemble.randomtreesembedding property)": [[546, "sklearn.ensemble.RandomTreesEmbedding.estimator_"]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[546, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_"]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[546, "sklearn.ensemble.RandomTreesEmbedding.fit"]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[546, "sklearn.ensemble.RandomTreesEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[546, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out"]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[546, "sklearn.ensemble.RandomTreesEmbedding.get_params"]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[546, "sklearn.ensemble.RandomTreesEmbedding.set_output"]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[546, "sklearn.ensemble.RandomTreesEmbedding.set_params"]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[546, "sklearn.ensemble.RandomTreesEmbedding.transform"]], "stackingclassifier (class in sklearn.ensemble)": [[547, "sklearn.ensemble.StackingClassifier"]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[547, "sklearn.ensemble.StackingClassifier.decision_function"]], "fit() (sklearn.ensemble.stackingclassifier method)": [[547, "sklearn.ensemble.StackingClassifier.fit"]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[547, "sklearn.ensemble.StackingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[547, "sklearn.ensemble.StackingClassifier.get_feature_names_out"]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[547, "sklearn.ensemble.StackingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[547, "sklearn.ensemble.StackingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[547, "sklearn.ensemble.StackingClassifier.named_estimators"]], "predict() (sklearn.ensemble.stackingclassifier method)": [[547, "sklearn.ensemble.StackingClassifier.predict"]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[547, "sklearn.ensemble.StackingClassifier.predict_proba"]], "score() (sklearn.ensemble.stackingclassifier method)": [[547, "sklearn.ensemble.StackingClassifier.score"]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[547, "sklearn.ensemble.StackingClassifier.set_output"]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[547, "sklearn.ensemble.StackingClassifier.set_params"]], "transform() (sklearn.ensemble.stackingclassifier method)": [[547, "sklearn.ensemble.StackingClassifier.transform"]], "stackingregressor (class in sklearn.ensemble)": [[548, "sklearn.ensemble.StackingRegressor"]], "fit() (sklearn.ensemble.stackingregressor method)": [[548, "sklearn.ensemble.StackingRegressor.fit"]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[548, "sklearn.ensemble.StackingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[548, "sklearn.ensemble.StackingRegressor.get_feature_names_out"]], "get_params() (sklearn.ensemble.stackingregressor method)": [[548, "sklearn.ensemble.StackingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[548, "sklearn.ensemble.StackingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[548, "sklearn.ensemble.StackingRegressor.named_estimators"]], "predict() (sklearn.ensemble.stackingregressor method)": [[548, "sklearn.ensemble.StackingRegressor.predict"]], "score() (sklearn.ensemble.stackingregressor method)": [[548, "sklearn.ensemble.StackingRegressor.score"]], "set_output() (sklearn.ensemble.stackingregressor method)": [[548, "sklearn.ensemble.StackingRegressor.set_output"]], "set_params() (sklearn.ensemble.stackingregressor method)": [[548, "sklearn.ensemble.StackingRegressor.set_params"]], "transform() (sklearn.ensemble.stackingregressor method)": [[548, "sklearn.ensemble.StackingRegressor.transform"]], "votingclassifier (class in sklearn.ensemble)": [[549, "sklearn.ensemble.VotingClassifier"]], "fit() (sklearn.ensemble.votingclassifier method)": [[549, "sklearn.ensemble.VotingClassifier.fit"]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[549, "sklearn.ensemble.VotingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[549, "sklearn.ensemble.VotingClassifier.get_feature_names_out"]], "get_params() (sklearn.ensemble.votingclassifier method)": [[549, "sklearn.ensemble.VotingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[549, "sklearn.ensemble.VotingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[549, "sklearn.ensemble.VotingClassifier.named_estimators"]], "predict() (sklearn.ensemble.votingclassifier method)": [[549, "sklearn.ensemble.VotingClassifier.predict"]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[549, "sklearn.ensemble.VotingClassifier.predict_proba"]], "score() (sklearn.ensemble.votingclassifier method)": [[549, "sklearn.ensemble.VotingClassifier.score"]], "set_output() (sklearn.ensemble.votingclassifier method)": [[549, "sklearn.ensemble.VotingClassifier.set_output"]], "set_params() (sklearn.ensemble.votingclassifier method)": [[549, "sklearn.ensemble.VotingClassifier.set_params"]], "transform() (sklearn.ensemble.votingclassifier method)": [[549, "sklearn.ensemble.VotingClassifier.transform"]], "votingregressor (class in sklearn.ensemble)": [[550, "sklearn.ensemble.VotingRegressor"]], "fit() (sklearn.ensemble.votingregressor method)": [[550, "sklearn.ensemble.VotingRegressor.fit"]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[550, "sklearn.ensemble.VotingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[550, "sklearn.ensemble.VotingRegressor.get_feature_names_out"]], "get_params() (sklearn.ensemble.votingregressor method)": [[550, "sklearn.ensemble.VotingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[550, "sklearn.ensemble.VotingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.votingregressor property)": [[550, "sklearn.ensemble.VotingRegressor.named_estimators"]], "predict() (sklearn.ensemble.votingregressor method)": [[550, "sklearn.ensemble.VotingRegressor.predict"]], "score() (sklearn.ensemble.votingregressor method)": [[550, "sklearn.ensemble.VotingRegressor.score"]], "set_output() (sklearn.ensemble.votingregressor method)": [[550, "sklearn.ensemble.VotingRegressor.set_output"]], "set_params() (sklearn.ensemble.votingregressor method)": [[550, "sklearn.ensemble.VotingRegressor.set_params"]], "transform() (sklearn.ensemble.votingregressor method)": [[550, "sklearn.ensemble.VotingRegressor.transform"]], "convergencewarning (class in sklearn.exceptions)": [[551, "sklearn.exceptions.ConvergenceWarning"]], "with_traceback() (sklearn.exceptions.convergencewarning method)": [[551, "sklearn.exceptions.ConvergenceWarning.with_traceback"]], "dataconversionwarning (class in sklearn.exceptions)": [[552, "sklearn.exceptions.DataConversionWarning"]], "with_traceback() (sklearn.exceptions.dataconversionwarning method)": [[552, "sklearn.exceptions.DataConversionWarning.with_traceback"]], "datadimensionalitywarning (class in sklearn.exceptions)": [[553, "sklearn.exceptions.DataDimensionalityWarning"]], "with_traceback() (sklearn.exceptions.datadimensionalitywarning method)": [[553, "sklearn.exceptions.DataDimensionalityWarning.with_traceback"]], "efficiencywarning (class in sklearn.exceptions)": [[554, "sklearn.exceptions.EfficiencyWarning"]], "with_traceback() (sklearn.exceptions.efficiencywarning method)": [[554, "sklearn.exceptions.EfficiencyWarning.with_traceback"]], "fitfailedwarning (class in sklearn.exceptions)": [[555, "sklearn.exceptions.FitFailedWarning"]], "with_traceback() (sklearn.exceptions.fitfailedwarning method)": [[555, "sklearn.exceptions.FitFailedWarning.with_traceback"]], "inconsistentversionwarning (class in sklearn.exceptions)": [[556, "sklearn.exceptions.InconsistentVersionWarning"]], "with_traceback() (sklearn.exceptions.inconsistentversionwarning method)": [[556, "sklearn.exceptions.InconsistentVersionWarning.with_traceback"]], "notfittederror (class in sklearn.exceptions)": [[557, "sklearn.exceptions.NotFittedError"]], "with_traceback() (sklearn.exceptions.notfittederror method)": [[557, "sklearn.exceptions.NotFittedError.with_traceback"]], "undefinedmetricwarning (class in sklearn.exceptions)": [[558, "sklearn.exceptions.UndefinedMetricWarning"]], "with_traceback() (sklearn.exceptions.undefinedmetricwarning method)": [[558, "sklearn.exceptions.UndefinedMetricWarning.with_traceback"]], "sklearn.experimental.enable_halving_search_cv": [[559, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_hist_gradient_boosting": [[560, "module-sklearn.experimental.enable_hist_gradient_boosting"]], "sklearn.experimental.enable_iterative_imputer": [[561, "module-sklearn.experimental.enable_iterative_imputer"]], "dictvectorizer (class in sklearn.feature_extraction)": [[562, "sklearn.feature_extraction.DictVectorizer"]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[562, "sklearn.feature_extraction.DictVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[562, "sklearn.feature_extraction.DictVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[562, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[562, "sklearn.feature_extraction.DictVectorizer.get_params"]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[562, "sklearn.feature_extraction.DictVectorizer.inverse_transform"]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[562, "sklearn.feature_extraction.DictVectorizer.restrict"]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[562, "sklearn.feature_extraction.DictVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[562, "sklearn.feature_extraction.DictVectorizer.set_params"]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[562, "sklearn.feature_extraction.DictVectorizer.transform"]], "featurehasher (class in sklearn.feature_extraction)": [[563, "sklearn.feature_extraction.FeatureHasher"]], "fit() (sklearn.feature_extraction.featurehasher method)": [[563, "sklearn.feature_extraction.FeatureHasher.fit"]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[563, "sklearn.feature_extraction.FeatureHasher.fit_transform"]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[563, "sklearn.feature_extraction.FeatureHasher.get_params"]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[563, "sklearn.feature_extraction.FeatureHasher.set_output"]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[563, "sklearn.feature_extraction.FeatureHasher.set_params"]], "transform() (sklearn.feature_extraction.featurehasher method)": [[563, "sklearn.feature_extraction.FeatureHasher.transform"]], "patchextractor (class in sklearn.feature_extraction.image)": [[564, "sklearn.feature_extraction.image.PatchExtractor"]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[564, "sklearn.feature_extraction.image.PatchExtractor.fit"]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[564, "sklearn.feature_extraction.image.PatchExtractor.get_params"]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[564, "sklearn.feature_extraction.image.PatchExtractor.set_params"]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[564, "sklearn.feature_extraction.image.PatchExtractor.transform"]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[565, "sklearn.feature_extraction.image.extract_patches_2d"]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[566, "sklearn.feature_extraction.image.grid_to_graph"]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[567, "sklearn.feature_extraction.image.img_to_graph"]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[568, "sklearn.feature_extraction.image.reconstruct_from_patches_2d"]], "countvectorizer (class in sklearn.feature_extraction.text)": [[569, "sklearn.feature_extraction.text.CountVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[569, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[569, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[569, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[569, "sklearn.feature_extraction.text.CountVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[569, "sklearn.feature_extraction.text.CountVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[569, "sklearn.feature_extraction.text.CountVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[569, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[569, "sklearn.feature_extraction.text.CountVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[569, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words"]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[569, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform"]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[569, "sklearn.feature_extraction.text.CountVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[569, "sklearn.feature_extraction.text.CountVectorizer.transform"]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[570, "sklearn.feature_extraction.text.HashingVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[570, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[570, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[570, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[570, "sklearn.feature_extraction.text.HashingVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[570, "sklearn.feature_extraction.text.HashingVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[570, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform"]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[570, "sklearn.feature_extraction.text.HashingVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[570, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words"]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[570, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit"]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[570, "sklearn.feature_extraction.text.HashingVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[570, "sklearn.feature_extraction.text.HashingVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[570, "sklearn.feature_extraction.text.HashingVectorizer.transform"]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[571, "sklearn.feature_extraction.text.TfidfTransformer"]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[571, "sklearn.feature_extraction.text.TfidfTransformer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[571, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[571, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[571, "sklearn.feature_extraction.text.TfidfTransformer.get_params"]], "idf_ (sklearn.feature_extraction.text.tfidftransformer property)": [[571, "sklearn.feature_extraction.text.TfidfTransformer.idf_"]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[571, "sklearn.feature_extraction.text.TfidfTransformer.set_output"]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[571, "sklearn.feature_extraction.text.TfidfTransformer.set_params"]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[571, "sklearn.feature_extraction.text.TfidfTransformer.transform"]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words"]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.idf_"]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform"]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.transform"]], "genericunivariateselect (class in sklearn.feature_selection)": [[573, "sklearn.feature_selection.GenericUnivariateSelect"]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[573, "sklearn.feature_selection.GenericUnivariateSelect.fit"]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[573, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[573, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out"]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[573, "sklearn.feature_selection.GenericUnivariateSelect.get_params"]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[573, "sklearn.feature_selection.GenericUnivariateSelect.get_support"]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[573, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform"]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[573, "sklearn.feature_selection.GenericUnivariateSelect.set_output"]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[573, "sklearn.feature_selection.GenericUnivariateSelect.set_params"]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[573, "sklearn.feature_selection.GenericUnivariateSelect.transform"]], "rfe (class in sklearn.feature_selection)": [[574, "sklearn.feature_selection.RFE"]], "classes_ (sklearn.feature_selection.rfe property)": [[574, "sklearn.feature_selection.RFE.classes_"]], "decision_function() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.decision_function"]], "fit() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.fit"]], "fit_transform() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.get_feature_names_out"]], "get_params() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.get_params"]], "get_support() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.get_support"]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.inverse_transform"]], "predict() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.predict"]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.predict_proba"]], "score() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.score"]], "set_output() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.set_output"]], "set_params() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.set_params"]], "transform() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.transform"]], "rfecv (class in sklearn.feature_selection)": [[575, "sklearn.feature_selection.RFECV"]], "classes_ (sklearn.feature_selection.rfecv property)": [[575, "sklearn.feature_selection.RFECV.classes_"]], "decision_function() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.decision_function"]], "fit() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.fit"]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.get_feature_names_out"]], "get_params() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.get_params"]], "get_support() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.get_support"]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.inverse_transform"]], "predict() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.predict"]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.predict_proba"]], "score() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.score"]], "set_output() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.set_output"]], "set_params() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.set_params"]], "transform() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.transform"]], "selectfdr (class in sklearn.feature_selection)": [[576, "sklearn.feature_selection.SelectFdr"]], "fit() (sklearn.feature_selection.selectfdr method)": [[576, "sklearn.feature_selection.SelectFdr.fit"]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[576, "sklearn.feature_selection.SelectFdr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[576, "sklearn.feature_selection.SelectFdr.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfdr method)": [[576, "sklearn.feature_selection.SelectFdr.get_params"]], "get_support() (sklearn.feature_selection.selectfdr method)": [[576, "sklearn.feature_selection.SelectFdr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[576, "sklearn.feature_selection.SelectFdr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfdr method)": [[576, "sklearn.feature_selection.SelectFdr.set_output"]], "set_params() (sklearn.feature_selection.selectfdr method)": [[576, "sklearn.feature_selection.SelectFdr.set_params"]], "transform() (sklearn.feature_selection.selectfdr method)": [[576, "sklearn.feature_selection.SelectFdr.transform"]], "selectfpr (class in sklearn.feature_selection)": [[577, "sklearn.feature_selection.SelectFpr"]], "fit() (sklearn.feature_selection.selectfpr method)": [[577, "sklearn.feature_selection.SelectFpr.fit"]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[577, "sklearn.feature_selection.SelectFpr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[577, "sklearn.feature_selection.SelectFpr.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfpr method)": [[577, "sklearn.feature_selection.SelectFpr.get_params"]], "get_support() (sklearn.feature_selection.selectfpr method)": [[577, "sklearn.feature_selection.SelectFpr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[577, "sklearn.feature_selection.SelectFpr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfpr method)": [[577, "sklearn.feature_selection.SelectFpr.set_output"]], "set_params() (sklearn.feature_selection.selectfpr method)": [[577, "sklearn.feature_selection.SelectFpr.set_params"]], "transform() (sklearn.feature_selection.selectfpr method)": [[577, "sklearn.feature_selection.SelectFpr.transform"]], "selectfrommodel (class in sklearn.feature_selection)": [[578, "sklearn.feature_selection.SelectFromModel"]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[578, "sklearn.feature_selection.SelectFromModel.fit"]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[578, "sklearn.feature_selection.SelectFromModel.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[578, "sklearn.feature_selection.SelectFromModel.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[578, "sklearn.feature_selection.SelectFromModel.get_params"]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[578, "sklearn.feature_selection.SelectFromModel.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[578, "sklearn.feature_selection.SelectFromModel.inverse_transform"]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[578, "sklearn.feature_selection.SelectFromModel.n_features_in_"]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[578, "sklearn.feature_selection.SelectFromModel.partial_fit"]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[578, "sklearn.feature_selection.SelectFromModel.set_output"]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[578, "sklearn.feature_selection.SelectFromModel.set_params"]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[578, "sklearn.feature_selection.SelectFromModel.threshold_"]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[578, "sklearn.feature_selection.SelectFromModel.transform"]], "selectfwe (class in sklearn.feature_selection)": [[579, "sklearn.feature_selection.SelectFwe"]], "fit() (sklearn.feature_selection.selectfwe method)": [[579, "sklearn.feature_selection.SelectFwe.fit"]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[579, "sklearn.feature_selection.SelectFwe.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[579, "sklearn.feature_selection.SelectFwe.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfwe method)": [[579, "sklearn.feature_selection.SelectFwe.get_params"]], "get_support() (sklearn.feature_selection.selectfwe method)": [[579, "sklearn.feature_selection.SelectFwe.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[579, "sklearn.feature_selection.SelectFwe.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfwe method)": [[579, "sklearn.feature_selection.SelectFwe.set_output"]], "set_params() (sklearn.feature_selection.selectfwe method)": [[579, "sklearn.feature_selection.SelectFwe.set_params"]], "transform() (sklearn.feature_selection.selectfwe method)": [[579, "sklearn.feature_selection.SelectFwe.transform"]], "selectkbest (class in sklearn.feature_selection)": [[580, "sklearn.feature_selection.SelectKBest"]], "fit() (sklearn.feature_selection.selectkbest method)": [[580, "sklearn.feature_selection.SelectKBest.fit"]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[580, "sklearn.feature_selection.SelectKBest.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[580, "sklearn.feature_selection.SelectKBest.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectkbest method)": [[580, "sklearn.feature_selection.SelectKBest.get_params"]], "get_support() (sklearn.feature_selection.selectkbest method)": [[580, "sklearn.feature_selection.SelectKBest.get_support"]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[580, "sklearn.feature_selection.SelectKBest.inverse_transform"]], "set_output() (sklearn.feature_selection.selectkbest method)": [[580, "sklearn.feature_selection.SelectKBest.set_output"]], "set_params() (sklearn.feature_selection.selectkbest method)": [[580, "sklearn.feature_selection.SelectKBest.set_params"]], "transform() (sklearn.feature_selection.selectkbest method)": [[580, "sklearn.feature_selection.SelectKBest.transform"]], "selectpercentile (class in sklearn.feature_selection)": [[581, "sklearn.feature_selection.SelectPercentile"]], "fit() (sklearn.feature_selection.selectpercentile method)": [[581, "sklearn.feature_selection.SelectPercentile.fit"]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[581, "sklearn.feature_selection.SelectPercentile.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[581, "sklearn.feature_selection.SelectPercentile.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[581, "sklearn.feature_selection.SelectPercentile.get_params"]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[581, "sklearn.feature_selection.SelectPercentile.get_support"]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[581, "sklearn.feature_selection.SelectPercentile.inverse_transform"]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[581, "sklearn.feature_selection.SelectPercentile.set_output"]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[581, "sklearn.feature_selection.SelectPercentile.set_params"]], "transform() (sklearn.feature_selection.selectpercentile method)": [[581, "sklearn.feature_selection.SelectPercentile.transform"]], "selectormixin (class in sklearn.feature_selection)": [[582, "sklearn.feature_selection.SelectorMixin"]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[582, "sklearn.feature_selection.SelectorMixin.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[582, "sklearn.feature_selection.SelectorMixin.get_feature_names_out"]], "get_support() (sklearn.feature_selection.selectormixin method)": [[582, "sklearn.feature_selection.SelectorMixin.get_support"]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[582, "sklearn.feature_selection.SelectorMixin.inverse_transform"]], "set_output() (sklearn.feature_selection.selectormixin method)": [[582, "sklearn.feature_selection.SelectorMixin.set_output"]], "transform() (sklearn.feature_selection.selectormixin method)": [[582, "sklearn.feature_selection.SelectorMixin.transform"]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[583, "sklearn.feature_selection.SequentialFeatureSelector"]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[583, "sklearn.feature_selection.SequentialFeatureSelector.fit"]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[583, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[583, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out"]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[583, "sklearn.feature_selection.SequentialFeatureSelector.get_params"]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[583, "sklearn.feature_selection.SequentialFeatureSelector.get_support"]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[583, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform"]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[583, "sklearn.feature_selection.SequentialFeatureSelector.set_output"]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[583, "sklearn.feature_selection.SequentialFeatureSelector.set_params"]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[583, "sklearn.feature_selection.SequentialFeatureSelector.transform"]], "variancethreshold (class in sklearn.feature_selection)": [[584, "sklearn.feature_selection.VarianceThreshold"]], "fit() (sklearn.feature_selection.variancethreshold method)": [[584, "sklearn.feature_selection.VarianceThreshold.fit"]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[584, "sklearn.feature_selection.VarianceThreshold.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[584, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out"]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[584, "sklearn.feature_selection.VarianceThreshold.get_params"]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[584, "sklearn.feature_selection.VarianceThreshold.get_support"]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[584, "sklearn.feature_selection.VarianceThreshold.inverse_transform"]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[584, "sklearn.feature_selection.VarianceThreshold.set_output"]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[584, "sklearn.feature_selection.VarianceThreshold.set_params"]], "transform() (sklearn.feature_selection.variancethreshold method)": [[584, "sklearn.feature_selection.VarianceThreshold.transform"]], "chi2() (in module sklearn.feature_selection)": [[585, "sklearn.feature_selection.chi2"]], "f_classif() (in module sklearn.feature_selection)": [[586, "sklearn.feature_selection.f_classif"]], "f_regression() (in module sklearn.feature_selection)": [[587, "sklearn.feature_selection.f_regression"]], "mutual_info_classif() (in module sklearn.feature_selection)": [[588, "sklearn.feature_selection.mutual_info_classif"]], "mutual_info_regression() (in module sklearn.feature_selection)": [[589, "sklearn.feature_selection.mutual_info_regression"]], "r_regression() (in module sklearn.feature_selection)": [[590, "sklearn.feature_selection.r_regression"]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[591, "sklearn.gaussian_process.GaussianProcessClassifier"]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[591, "sklearn.gaussian_process.GaussianProcessClassifier.fit"]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[591, "sklearn.gaussian_process.GaussianProcessClassifier.get_params"]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[591, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[591, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[591, "sklearn.gaussian_process.GaussianProcessClassifier.predict"]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[591, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba"]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[591, "sklearn.gaussian_process.GaussianProcessClassifier.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[591, "sklearn.gaussian_process.GaussianProcessClassifier.set_params"]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[592, "sklearn.gaussian_process.GaussianProcessRegressor"]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[592, "sklearn.gaussian_process.GaussianProcessRegressor.fit"]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[592, "sklearn.gaussian_process.GaussianProcessRegressor.get_params"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[592, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[592, "sklearn.gaussian_process.GaussianProcessRegressor.predict"]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[592, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y"]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[592, "sklearn.gaussian_process.GaussianProcessRegressor.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[592, "sklearn.gaussian_process.GaussianProcessRegressor.set_params"]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[593, "sklearn.gaussian_process.kernels.CompoundKernel"]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[593, "sklearn.gaussian_process.kernels.CompoundKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[593, "sklearn.gaussian_process.kernels.CompoundKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[593, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[593, "sklearn.gaussian_process.kernels.CompoundKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[593, "sklearn.gaussian_process.kernels.CompoundKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[593, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[593, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[593, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[593, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[593, "sklearn.gaussian_process.kernels.CompoundKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[593, "sklearn.gaussian_process.kernels.CompoundKernel.theta"]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[594, "sklearn.gaussian_process.kernels.ConstantKernel"]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[594, "sklearn.gaussian_process.kernels.ConstantKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[594, "sklearn.gaussian_process.kernels.ConstantKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[594, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[594, "sklearn.gaussian_process.kernels.ConstantKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[594, "sklearn.gaussian_process.kernels.ConstantKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[594, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[594, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[594, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[594, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[594, "sklearn.gaussian_process.kernels.ConstantKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[594, "sklearn.gaussian_process.kernels.ConstantKernel.theta"]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[595, "sklearn.gaussian_process.kernels.DotProduct"]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[595, "sklearn.gaussian_process.kernels.DotProduct.__call__"]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[595, "sklearn.gaussian_process.kernels.DotProduct.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[595, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[595, "sklearn.gaussian_process.kernels.DotProduct.diag"]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[595, "sklearn.gaussian_process.kernels.DotProduct.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[595, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[595, "sklearn.gaussian_process.kernels.DotProduct.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[595, "sklearn.gaussian_process.kernels.DotProduct.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[595, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[595, "sklearn.gaussian_process.kernels.DotProduct.set_params"]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[595, "sklearn.gaussian_process.kernels.DotProduct.theta"]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared"]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__"]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared.diag"]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params"]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale"]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params"]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared.theta"]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[597, "sklearn.gaussian_process.kernels.Exponentiation"]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[597, "sklearn.gaussian_process.kernels.Exponentiation.__call__"]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[597, "sklearn.gaussian_process.kernels.Exponentiation.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[597, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[597, "sklearn.gaussian_process.kernels.Exponentiation.diag"]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[597, "sklearn.gaussian_process.kernels.Exponentiation.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[597, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[597, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[597, "sklearn.gaussian_process.kernels.Exponentiation.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[597, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[597, "sklearn.gaussian_process.kernels.Exponentiation.set_params"]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[597, "sklearn.gaussian_process.kernels.Exponentiation.theta"]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[598, "sklearn.gaussian_process.kernels.Hyperparameter"]], "__call__() (sklearn.gaussian_process.kernels.hyperparameter method)": [[598, "sklearn.gaussian_process.kernels.Hyperparameter.__call__"]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[598, "sklearn.gaussian_process.kernels.Hyperparameter.bounds"]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[598, "sklearn.gaussian_process.kernels.Hyperparameter.count"]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[598, "sklearn.gaussian_process.kernels.Hyperparameter.fixed"]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[598, "sklearn.gaussian_process.kernels.Hyperparameter.index"]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[598, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements"]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[598, "sklearn.gaussian_process.kernels.Hyperparameter.name"]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[598, "sklearn.gaussian_process.kernels.Hyperparameter.value_type"]], "kernel (class in sklearn.gaussian_process.kernels)": [[599, "sklearn.gaussian_process.kernels.Kernel"]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[599, "sklearn.gaussian_process.kernels.Kernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[599, "sklearn.gaussian_process.kernels.Kernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[599, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[599, "sklearn.gaussian_process.kernels.Kernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[599, "sklearn.gaussian_process.kernels.Kernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[599, "sklearn.gaussian_process.kernels.Kernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[599, "sklearn.gaussian_process.kernels.Kernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[599, "sklearn.gaussian_process.kernels.Kernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[599, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[599, "sklearn.gaussian_process.kernels.Kernel.set_params"]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[599, "sklearn.gaussian_process.kernels.Kernel.theta"]], "matern (class in sklearn.gaussian_process.kernels)": [[600, "sklearn.gaussian_process.kernels.Matern"]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[600, "sklearn.gaussian_process.kernels.Matern.__call__"]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[600, "sklearn.gaussian_process.kernels.Matern.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[600, "sklearn.gaussian_process.kernels.Matern.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[600, "sklearn.gaussian_process.kernels.Matern.diag"]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[600, "sklearn.gaussian_process.kernels.Matern.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[600, "sklearn.gaussian_process.kernels.Matern.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[600, "sklearn.gaussian_process.kernels.Matern.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[600, "sklearn.gaussian_process.kernels.Matern.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[600, "sklearn.gaussian_process.kernels.Matern.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[600, "sklearn.gaussian_process.kernels.Matern.set_params"]], "theta (sklearn.gaussian_process.kernels.matern property)": [[600, "sklearn.gaussian_process.kernels.Matern.theta"]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[601, "sklearn.gaussian_process.kernels.PairwiseKernel"]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[601, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[601, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[601, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[601, "sklearn.gaussian_process.kernels.PairwiseKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[601, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[601, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[601, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[601, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[601, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[601, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[601, "sklearn.gaussian_process.kernels.PairwiseKernel.theta"]], "product (class in sklearn.gaussian_process.kernels)": [[602, "sklearn.gaussian_process.kernels.Product"]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[602, "sklearn.gaussian_process.kernels.Product.__call__"]], "bounds (sklearn.gaussian_process.kernels.product property)": [[602, "sklearn.gaussian_process.kernels.Product.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[602, "sklearn.gaussian_process.kernels.Product.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.product method)": [[602, "sklearn.gaussian_process.kernels.Product.diag"]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[602, "sklearn.gaussian_process.kernels.Product.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[602, "sklearn.gaussian_process.kernels.Product.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[602, "sklearn.gaussian_process.kernels.Product.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[602, "sklearn.gaussian_process.kernels.Product.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[602, "sklearn.gaussian_process.kernels.Product.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[602, "sklearn.gaussian_process.kernels.Product.set_params"]], "theta (sklearn.gaussian_process.kernels.product property)": [[602, "sklearn.gaussian_process.kernels.Product.theta"]], "rbf (class in sklearn.gaussian_process.kernels)": [[603, "sklearn.gaussian_process.kernels.RBF"]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[603, "sklearn.gaussian_process.kernels.RBF.__call__"]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[603, "sklearn.gaussian_process.kernels.RBF.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[603, "sklearn.gaussian_process.kernels.RBF.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[603, "sklearn.gaussian_process.kernels.RBF.diag"]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[603, "sklearn.gaussian_process.kernels.RBF.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[603, "sklearn.gaussian_process.kernels.RBF.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[603, "sklearn.gaussian_process.kernels.RBF.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[603, "sklearn.gaussian_process.kernels.RBF.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[603, "sklearn.gaussian_process.kernels.RBF.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[603, "sklearn.gaussian_process.kernels.RBF.set_params"]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[603, "sklearn.gaussian_process.kernels.RBF.theta"]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[604, "sklearn.gaussian_process.kernels.RationalQuadratic"]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[604, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__"]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[604, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[604, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[604, "sklearn.gaussian_process.kernels.RationalQuadratic.diag"]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[604, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[604, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[604, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[604, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[604, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[604, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params"]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[604, "sklearn.gaussian_process.kernels.RationalQuadratic.theta"]], "sum (class in sklearn.gaussian_process.kernels)": [[605, "sklearn.gaussian_process.kernels.Sum"]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[605, "sklearn.gaussian_process.kernels.Sum.__call__"]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[605, "sklearn.gaussian_process.kernels.Sum.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[605, "sklearn.gaussian_process.kernels.Sum.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[605, "sklearn.gaussian_process.kernels.Sum.diag"]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[605, "sklearn.gaussian_process.kernels.Sum.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[605, "sklearn.gaussian_process.kernels.Sum.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[605, "sklearn.gaussian_process.kernels.Sum.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[605, "sklearn.gaussian_process.kernels.Sum.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[605, "sklearn.gaussian_process.kernels.Sum.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[605, "sklearn.gaussian_process.kernels.Sum.set_params"]], "theta (sklearn.gaussian_process.kernels.sum property)": [[605, "sklearn.gaussian_process.kernels.Sum.theta"]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[606, "sklearn.gaussian_process.kernels.WhiteKernel"]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[606, "sklearn.gaussian_process.kernels.WhiteKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[606, "sklearn.gaussian_process.kernels.WhiteKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[606, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[606, "sklearn.gaussian_process.kernels.WhiteKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[606, "sklearn.gaussian_process.kernels.WhiteKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[606, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[606, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[606, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[606, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[606, "sklearn.gaussian_process.kernels.WhiteKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[606, "sklearn.gaussian_process.kernels.WhiteKernel.theta"]], "get_config() (in module sklearn)": [[607, "sklearn.get_config"]], "iterativeimputer (class in sklearn.impute)": [[608, "sklearn.impute.IterativeImputer"]], "fit() (sklearn.impute.iterativeimputer method)": [[608, "sklearn.impute.IterativeImputer.fit"]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[608, "sklearn.impute.IterativeImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[608, "sklearn.impute.IterativeImputer.get_feature_names_out"]], "get_params() (sklearn.impute.iterativeimputer method)": [[608, "sklearn.impute.IterativeImputer.get_params"]], "set_output() (sklearn.impute.iterativeimputer method)": [[608, "sklearn.impute.IterativeImputer.set_output"]], "set_params() (sklearn.impute.iterativeimputer method)": [[608, "sklearn.impute.IterativeImputer.set_params"]], "transform() (sklearn.impute.iterativeimputer method)": [[608, "sklearn.impute.IterativeImputer.transform"]], "knnimputer (class in sklearn.impute)": [[609, "sklearn.impute.KNNImputer"]], "fit() (sklearn.impute.knnimputer method)": [[609, "sklearn.impute.KNNImputer.fit"]], "fit_transform() (sklearn.impute.knnimputer method)": [[609, "sklearn.impute.KNNImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[609, "sklearn.impute.KNNImputer.get_feature_names_out"]], "get_params() (sklearn.impute.knnimputer method)": [[609, "sklearn.impute.KNNImputer.get_params"]], "set_output() (sklearn.impute.knnimputer method)": [[609, "sklearn.impute.KNNImputer.set_output"]], "set_params() (sklearn.impute.knnimputer method)": [[609, "sklearn.impute.KNNImputer.set_params"]], "transform() (sklearn.impute.knnimputer method)": [[609, "sklearn.impute.KNNImputer.transform"]], "missingindicator (class in sklearn.impute)": [[610, "sklearn.impute.MissingIndicator"]], "fit() (sklearn.impute.missingindicator method)": [[610, "sklearn.impute.MissingIndicator.fit"]], "fit_transform() (sklearn.impute.missingindicator method)": [[610, "sklearn.impute.MissingIndicator.fit_transform"]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[610, "sklearn.impute.MissingIndicator.get_feature_names_out"]], "get_params() (sklearn.impute.missingindicator method)": [[610, "sklearn.impute.MissingIndicator.get_params"]], "set_output() (sklearn.impute.missingindicator method)": [[610, "sklearn.impute.MissingIndicator.set_output"]], "set_params() (sklearn.impute.missingindicator method)": [[610, "sklearn.impute.MissingIndicator.set_params"]], "transform() (sklearn.impute.missingindicator method)": [[610, "sklearn.impute.MissingIndicator.transform"]], "simpleimputer (class in sklearn.impute)": [[611, "sklearn.impute.SimpleImputer"]], "fit() (sklearn.impute.simpleimputer method)": [[611, "sklearn.impute.SimpleImputer.fit"]], "fit_transform() (sklearn.impute.simpleimputer method)": [[611, "sklearn.impute.SimpleImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[611, "sklearn.impute.SimpleImputer.get_feature_names_out"]], "get_params() (sklearn.impute.simpleimputer method)": [[611, "sklearn.impute.SimpleImputer.get_params"]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[611, "sklearn.impute.SimpleImputer.inverse_transform"]], "set_output() (sklearn.impute.simpleimputer method)": [[611, "sklearn.impute.SimpleImputer.set_output"]], "set_params() (sklearn.impute.simpleimputer method)": [[611, "sklearn.impute.SimpleImputer.set_params"]], "transform() (sklearn.impute.simpleimputer method)": [[611, "sklearn.impute.SimpleImputer.transform"]], "decisionboundarydisplay (class in sklearn.inspection)": [[612, "sklearn.inspection.DecisionBoundaryDisplay"]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[612, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator"]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[612, "sklearn.inspection.DecisionBoundaryDisplay.plot"]], "partialdependencedisplay (class in sklearn.inspection)": [[613, "sklearn.inspection.PartialDependenceDisplay"]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[613, "sklearn.inspection.PartialDependenceDisplay.from_estimator"]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[613, "sklearn.inspection.PartialDependenceDisplay.plot"]], "partial_dependence() (in module sklearn.inspection)": [[614, "sklearn.inspection.partial_dependence"]], "permutation_importance() (in module sklearn.inspection)": [[615, "sklearn.inspection.permutation_importance"]], "isotonicregression (class in sklearn.isotonic)": [[616, "sklearn.isotonic.IsotonicRegression"]], "fit() (sklearn.isotonic.isotonicregression method)": [[616, "sklearn.isotonic.IsotonicRegression.fit"]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[616, "sklearn.isotonic.IsotonicRegression.fit_transform"]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[616, "sklearn.isotonic.IsotonicRegression.get_feature_names_out"]], "get_params() (sklearn.isotonic.isotonicregression method)": [[616, "sklearn.isotonic.IsotonicRegression.get_params"]], "predict() (sklearn.isotonic.isotonicregression method)": [[616, "sklearn.isotonic.IsotonicRegression.predict"]], "score() (sklearn.isotonic.isotonicregression method)": [[616, "sklearn.isotonic.IsotonicRegression.score"]], "set_output() (sklearn.isotonic.isotonicregression method)": [[616, "sklearn.isotonic.IsotonicRegression.set_output"]], "set_params() (sklearn.isotonic.isotonicregression method)": [[616, "sklearn.isotonic.IsotonicRegression.set_params"]], "transform() (sklearn.isotonic.isotonicregression method)": [[616, "sklearn.isotonic.IsotonicRegression.transform"]], "check_increasing() (in module sklearn.isotonic)": [[617, "sklearn.isotonic.check_increasing"]], "isotonic_regression() (in module sklearn.isotonic)": [[618, "sklearn.isotonic.isotonic_regression"]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[619, "sklearn.kernel_approximation.AdditiveChi2Sampler"]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[619, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[619, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[619, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[619, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[619, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[619, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[619, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform"]], "nystroem (class in sklearn.kernel_approximation)": [[620, "sklearn.kernel_approximation.Nystroem"]], "fit() (sklearn.kernel_approximation.nystroem method)": [[620, "sklearn.kernel_approximation.Nystroem.fit"]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[620, "sklearn.kernel_approximation.Nystroem.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[620, "sklearn.kernel_approximation.Nystroem.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[620, "sklearn.kernel_approximation.Nystroem.get_params"]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[620, "sklearn.kernel_approximation.Nystroem.set_output"]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[620, "sklearn.kernel_approximation.Nystroem.set_params"]], "transform() (sklearn.kernel_approximation.nystroem method)": [[620, "sklearn.kernel_approximation.Nystroem.transform"]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[621, "sklearn.kernel_approximation.PolynomialCountSketch"]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[621, "sklearn.kernel_approximation.PolynomialCountSketch.fit"]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[621, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[621, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[621, "sklearn.kernel_approximation.PolynomialCountSketch.get_params"]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[621, "sklearn.kernel_approximation.PolynomialCountSketch.set_output"]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[621, "sklearn.kernel_approximation.PolynomialCountSketch.set_params"]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[621, "sklearn.kernel_approximation.PolynomialCountSketch.transform"]], "rbfsampler (class in sklearn.kernel_approximation)": [[622, "sklearn.kernel_approximation.RBFSampler"]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[622, "sklearn.kernel_approximation.RBFSampler.fit"]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[622, "sklearn.kernel_approximation.RBFSampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[622, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[622, "sklearn.kernel_approximation.RBFSampler.get_params"]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[622, "sklearn.kernel_approximation.RBFSampler.set_output"]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[622, "sklearn.kernel_approximation.RBFSampler.set_params"]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[622, "sklearn.kernel_approximation.RBFSampler.transform"]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[623, "sklearn.kernel_approximation.SkewedChi2Sampler"]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[623, "sklearn.kernel_approximation.SkewedChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[623, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[623, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[623, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[623, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[623, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[623, "sklearn.kernel_approximation.SkewedChi2Sampler.transform"]], "kernelridge (class in sklearn.kernel_ridge)": [[624, "sklearn.kernel_ridge.KernelRidge"]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[624, "sklearn.kernel_ridge.KernelRidge.fit"]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[624, "sklearn.kernel_ridge.KernelRidge.get_params"]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[624, "sklearn.kernel_ridge.KernelRidge.predict"]], "score() (sklearn.kernel_ridge.kernelridge method)": [[624, "sklearn.kernel_ridge.KernelRidge.score"]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[624, "sklearn.kernel_ridge.KernelRidge.set_params"]], "ardregression (class in sklearn.linear_model)": [[625, "sklearn.linear_model.ARDRegression"]], "fit() (sklearn.linear_model.ardregression method)": [[625, "sklearn.linear_model.ARDRegression.fit"]], "get_params() (sklearn.linear_model.ardregression method)": [[625, "sklearn.linear_model.ARDRegression.get_params"]], "predict() (sklearn.linear_model.ardregression method)": [[625, "sklearn.linear_model.ARDRegression.predict"]], "score() (sklearn.linear_model.ardregression method)": [[625, "sklearn.linear_model.ARDRegression.score"]], "set_params() (sklearn.linear_model.ardregression method)": [[625, "sklearn.linear_model.ARDRegression.set_params"]], "bayesianridge (class in sklearn.linear_model)": [[626, "sklearn.linear_model.BayesianRidge"]], "fit() (sklearn.linear_model.bayesianridge method)": [[626, "sklearn.linear_model.BayesianRidge.fit"]], "get_params() (sklearn.linear_model.bayesianridge method)": [[626, "sklearn.linear_model.BayesianRidge.get_params"]], "predict() (sklearn.linear_model.bayesianridge method)": [[626, "sklearn.linear_model.BayesianRidge.predict"]], "score() (sklearn.linear_model.bayesianridge method)": [[626, "sklearn.linear_model.BayesianRidge.score"]], "set_params() (sklearn.linear_model.bayesianridge method)": [[626, "sklearn.linear_model.BayesianRidge.set_params"]], "elasticnet (class in sklearn.linear_model)": [[627, "sklearn.linear_model.ElasticNet"]], "fit() (sklearn.linear_model.elasticnet method)": [[627, "sklearn.linear_model.ElasticNet.fit"]], "get_params() (sklearn.linear_model.elasticnet method)": [[627, "sklearn.linear_model.ElasticNet.get_params"]], "path() (sklearn.linear_model.elasticnet static method)": [[627, "sklearn.linear_model.ElasticNet.path"]], "predict() (sklearn.linear_model.elasticnet method)": [[627, "sklearn.linear_model.ElasticNet.predict"]], "score() (sklearn.linear_model.elasticnet method)": [[627, "sklearn.linear_model.ElasticNet.score"]], "set_params() (sklearn.linear_model.elasticnet method)": [[627, "sklearn.linear_model.ElasticNet.set_params"]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[627, "sklearn.linear_model.ElasticNet.sparse_coef_"]], "elasticnetcv (class in sklearn.linear_model)": [[628, "sklearn.linear_model.ElasticNetCV"]], "fit() (sklearn.linear_model.elasticnetcv method)": [[628, "sklearn.linear_model.ElasticNetCV.fit"]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[628, "sklearn.linear_model.ElasticNetCV.get_params"]], "path() (sklearn.linear_model.elasticnetcv static method)": [[628, "sklearn.linear_model.ElasticNetCV.path"]], "predict() (sklearn.linear_model.elasticnetcv method)": [[628, "sklearn.linear_model.ElasticNetCV.predict"]], "score() (sklearn.linear_model.elasticnetcv method)": [[628, "sklearn.linear_model.ElasticNetCV.score"]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[628, "sklearn.linear_model.ElasticNetCV.set_params"]], "gammaregressor (class in sklearn.linear_model)": [[629, "sklearn.linear_model.GammaRegressor"]], "family (sklearn.linear_model.gammaregressor property)": [[629, "sklearn.linear_model.GammaRegressor.family"]], "fit() (sklearn.linear_model.gammaregressor method)": [[629, "sklearn.linear_model.GammaRegressor.fit"]], "get_params() (sklearn.linear_model.gammaregressor method)": [[629, "sklearn.linear_model.GammaRegressor.get_params"]], "predict() (sklearn.linear_model.gammaregressor method)": [[629, "sklearn.linear_model.GammaRegressor.predict"]], "score() (sklearn.linear_model.gammaregressor method)": [[629, "sklearn.linear_model.GammaRegressor.score"]], "set_params() (sklearn.linear_model.gammaregressor method)": [[629, "sklearn.linear_model.GammaRegressor.set_params"]], "huberregressor (class in sklearn.linear_model)": [[630, "sklearn.linear_model.HuberRegressor"]], "fit() (sklearn.linear_model.huberregressor method)": [[630, "sklearn.linear_model.HuberRegressor.fit"]], "get_params() (sklearn.linear_model.huberregressor method)": [[630, "sklearn.linear_model.HuberRegressor.get_params"]], "predict() (sklearn.linear_model.huberregressor method)": [[630, "sklearn.linear_model.HuberRegressor.predict"]], "score() (sklearn.linear_model.huberregressor method)": [[630, "sklearn.linear_model.HuberRegressor.score"]], "set_params() (sklearn.linear_model.huberregressor method)": [[630, "sklearn.linear_model.HuberRegressor.set_params"]], "lars (class in sklearn.linear_model)": [[631, "sklearn.linear_model.Lars"]], "fit() (sklearn.linear_model.lars method)": [[631, "sklearn.linear_model.Lars.fit"]], "get_params() (sklearn.linear_model.lars method)": [[631, "sklearn.linear_model.Lars.get_params"]], "predict() (sklearn.linear_model.lars method)": [[631, "sklearn.linear_model.Lars.predict"]], "score() (sklearn.linear_model.lars method)": [[631, "sklearn.linear_model.Lars.score"]], "set_params() (sklearn.linear_model.lars method)": [[631, "sklearn.linear_model.Lars.set_params"]], "larscv (class in sklearn.linear_model)": [[632, "sklearn.linear_model.LarsCV"]], "fit() (sklearn.linear_model.larscv method)": [[632, "sklearn.linear_model.LarsCV.fit"]], "get_params() (sklearn.linear_model.larscv method)": [[632, "sklearn.linear_model.LarsCV.get_params"]], "predict() (sklearn.linear_model.larscv method)": [[632, "sklearn.linear_model.LarsCV.predict"]], "score() (sklearn.linear_model.larscv method)": [[632, "sklearn.linear_model.LarsCV.score"]], "set_params() (sklearn.linear_model.larscv method)": [[632, "sklearn.linear_model.LarsCV.set_params"]], "lasso (class in sklearn.linear_model)": [[633, "sklearn.linear_model.Lasso"]], "fit() (sklearn.linear_model.lasso method)": [[633, "sklearn.linear_model.Lasso.fit"]], "get_params() (sklearn.linear_model.lasso method)": [[633, "sklearn.linear_model.Lasso.get_params"]], "path() (sklearn.linear_model.lasso static method)": [[633, "sklearn.linear_model.Lasso.path"]], "predict() (sklearn.linear_model.lasso method)": [[633, "sklearn.linear_model.Lasso.predict"]], "score() (sklearn.linear_model.lasso method)": [[633, "sklearn.linear_model.Lasso.score"]], "set_params() (sklearn.linear_model.lasso method)": [[633, "sklearn.linear_model.Lasso.set_params"]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[633, "sklearn.linear_model.Lasso.sparse_coef_"]], "lassocv (class in sklearn.linear_model)": [[634, "sklearn.linear_model.LassoCV"]], "fit() (sklearn.linear_model.lassocv method)": [[634, "sklearn.linear_model.LassoCV.fit"]], "get_params() (sklearn.linear_model.lassocv method)": [[634, "sklearn.linear_model.LassoCV.get_params"]], "path() (sklearn.linear_model.lassocv static method)": [[634, "sklearn.linear_model.LassoCV.path"]], "predict() (sklearn.linear_model.lassocv method)": [[634, "sklearn.linear_model.LassoCV.predict"]], "score() (sklearn.linear_model.lassocv method)": [[634, "sklearn.linear_model.LassoCV.score"]], "set_params() (sklearn.linear_model.lassocv method)": [[634, "sklearn.linear_model.LassoCV.set_params"]], "lassolars (class in sklearn.linear_model)": [[635, "sklearn.linear_model.LassoLars"]], "fit() (sklearn.linear_model.lassolars method)": [[635, "sklearn.linear_model.LassoLars.fit"]], "get_params() (sklearn.linear_model.lassolars method)": [[635, "sklearn.linear_model.LassoLars.get_params"]], "predict() (sklearn.linear_model.lassolars method)": [[635, "sklearn.linear_model.LassoLars.predict"]], "score() (sklearn.linear_model.lassolars method)": [[635, "sklearn.linear_model.LassoLars.score"]], "set_params() (sklearn.linear_model.lassolars method)": [[635, "sklearn.linear_model.LassoLars.set_params"]], "lassolarscv (class in sklearn.linear_model)": [[636, "sklearn.linear_model.LassoLarsCV"]], "fit() (sklearn.linear_model.lassolarscv method)": [[636, "sklearn.linear_model.LassoLarsCV.fit"]], "get_params() (sklearn.linear_model.lassolarscv method)": [[636, "sklearn.linear_model.LassoLarsCV.get_params"]], "predict() (sklearn.linear_model.lassolarscv method)": [[636, "sklearn.linear_model.LassoLarsCV.predict"]], "score() (sklearn.linear_model.lassolarscv method)": [[636, "sklearn.linear_model.LassoLarsCV.score"]], "set_params() (sklearn.linear_model.lassolarscv method)": [[636, "sklearn.linear_model.LassoLarsCV.set_params"]], "lassolarsic (class in sklearn.linear_model)": [[637, "sklearn.linear_model.LassoLarsIC"]], "fit() (sklearn.linear_model.lassolarsic method)": [[637, "sklearn.linear_model.LassoLarsIC.fit"]], "get_params() (sklearn.linear_model.lassolarsic method)": [[637, "sklearn.linear_model.LassoLarsIC.get_params"]], "predict() (sklearn.linear_model.lassolarsic method)": [[637, "sklearn.linear_model.LassoLarsIC.predict"]], "score() (sklearn.linear_model.lassolarsic method)": [[637, "sklearn.linear_model.LassoLarsIC.score"]], "set_params() (sklearn.linear_model.lassolarsic method)": [[637, "sklearn.linear_model.LassoLarsIC.set_params"]], "linearregression (class in sklearn.linear_model)": [[638, "sklearn.linear_model.LinearRegression"]], "fit() (sklearn.linear_model.linearregression method)": [[638, "sklearn.linear_model.LinearRegression.fit"]], "get_params() (sklearn.linear_model.linearregression method)": [[638, "sklearn.linear_model.LinearRegression.get_params"]], "predict() (sklearn.linear_model.linearregression method)": [[638, "sklearn.linear_model.LinearRegression.predict"]], "score() (sklearn.linear_model.linearregression method)": [[638, "sklearn.linear_model.LinearRegression.score"]], "set_params() (sklearn.linear_model.linearregression method)": [[638, "sklearn.linear_model.LinearRegression.set_params"]], "logisticregression (class in sklearn.linear_model)": [[639, "sklearn.linear_model.LogisticRegression"]], "decision_function() (sklearn.linear_model.logisticregression method)": [[639, "sklearn.linear_model.LogisticRegression.decision_function"]], "densify() (sklearn.linear_model.logisticregression method)": [[639, "sklearn.linear_model.LogisticRegression.densify"]], "fit() (sklearn.linear_model.logisticregression method)": [[639, "sklearn.linear_model.LogisticRegression.fit"]], "get_params() (sklearn.linear_model.logisticregression method)": [[639, "sklearn.linear_model.LogisticRegression.get_params"]], "predict() (sklearn.linear_model.logisticregression method)": [[639, "sklearn.linear_model.LogisticRegression.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[639, "sklearn.linear_model.LogisticRegression.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[639, "sklearn.linear_model.LogisticRegression.predict_proba"]], "score() (sklearn.linear_model.logisticregression method)": [[639, "sklearn.linear_model.LogisticRegression.score"]], "set_params() (sklearn.linear_model.logisticregression method)": [[639, "sklearn.linear_model.LogisticRegression.set_params"]], "sparsify() (sklearn.linear_model.logisticregression method)": [[639, "sklearn.linear_model.LogisticRegression.sparsify"]], "logisticregressioncv (class in sklearn.linear_model)": [[640, "sklearn.linear_model.LogisticRegressionCV"]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[640, "sklearn.linear_model.LogisticRegressionCV.decision_function"]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[640, "sklearn.linear_model.LogisticRegressionCV.densify"]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[640, "sklearn.linear_model.LogisticRegressionCV.fit"]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[640, "sklearn.linear_model.LogisticRegressionCV.get_params"]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[640, "sklearn.linear_model.LogisticRegressionCV.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[640, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[640, "sklearn.linear_model.LogisticRegressionCV.predict_proba"]], "score() (sklearn.linear_model.logisticregressioncv method)": [[640, "sklearn.linear_model.LogisticRegressionCV.score"]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[640, "sklearn.linear_model.LogisticRegressionCV.set_params"]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[640, "sklearn.linear_model.LogisticRegressionCV.sparsify"]], "multitaskelasticnet (class in sklearn.linear_model)": [[641, "sklearn.linear_model.MultiTaskElasticNet"]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[641, "sklearn.linear_model.MultiTaskElasticNet.fit"]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[641, "sklearn.linear_model.MultiTaskElasticNet.get_params"]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[641, "sklearn.linear_model.MultiTaskElasticNet.path"]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[641, "sklearn.linear_model.MultiTaskElasticNet.predict"]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[641, "sklearn.linear_model.MultiTaskElasticNet.score"]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[641, "sklearn.linear_model.MultiTaskElasticNet.set_params"]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[641, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_"]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[642, "sklearn.linear_model.MultiTaskElasticNetCV"]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[642, "sklearn.linear_model.MultiTaskElasticNetCV.fit"]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[642, "sklearn.linear_model.MultiTaskElasticNetCV.get_params"]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[642, "sklearn.linear_model.MultiTaskElasticNetCV.path"]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[642, "sklearn.linear_model.MultiTaskElasticNetCV.predict"]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[642, "sklearn.linear_model.MultiTaskElasticNetCV.score"]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[642, "sklearn.linear_model.MultiTaskElasticNetCV.set_params"]], "multitasklasso (class in sklearn.linear_model)": [[643, "sklearn.linear_model.MultiTaskLasso"]], "fit() (sklearn.linear_model.multitasklasso method)": [[643, "sklearn.linear_model.MultiTaskLasso.fit"]], "get_params() (sklearn.linear_model.multitasklasso method)": [[643, "sklearn.linear_model.MultiTaskLasso.get_params"]], "path() (sklearn.linear_model.multitasklasso static method)": [[643, "sklearn.linear_model.MultiTaskLasso.path"]], "predict() (sklearn.linear_model.multitasklasso method)": [[643, "sklearn.linear_model.MultiTaskLasso.predict"]], "score() (sklearn.linear_model.multitasklasso method)": [[643, "sklearn.linear_model.MultiTaskLasso.score"]], "set_params() (sklearn.linear_model.multitasklasso method)": [[643, "sklearn.linear_model.MultiTaskLasso.set_params"]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[643, "sklearn.linear_model.MultiTaskLasso.sparse_coef_"]], "multitasklassocv (class in sklearn.linear_model)": [[644, "sklearn.linear_model.MultiTaskLassoCV"]], "fit() (sklearn.linear_model.multitasklassocv method)": [[644, "sklearn.linear_model.MultiTaskLassoCV.fit"]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[644, "sklearn.linear_model.MultiTaskLassoCV.get_params"]], "path() (sklearn.linear_model.multitasklassocv static method)": [[644, "sklearn.linear_model.MultiTaskLassoCV.path"]], "predict() (sklearn.linear_model.multitasklassocv method)": [[644, "sklearn.linear_model.MultiTaskLassoCV.predict"]], "score() (sklearn.linear_model.multitasklassocv method)": [[644, "sklearn.linear_model.MultiTaskLassoCV.score"]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[644, "sklearn.linear_model.MultiTaskLassoCV.set_params"]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[645, "sklearn.linear_model.OrthogonalMatchingPursuit"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[645, "sklearn.linear_model.OrthogonalMatchingPursuit.fit"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[645, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[645, "sklearn.linear_model.OrthogonalMatchingPursuit.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[645, "sklearn.linear_model.OrthogonalMatchingPursuit.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[645, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params"]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[646, "sklearn.linear_model.OrthogonalMatchingPursuitCV"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[646, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[646, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[646, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[646, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[646, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params"]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[647, "sklearn.linear_model.PassiveAggressiveClassifier"]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[647, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function"]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[647, "sklearn.linear_model.PassiveAggressiveClassifier.densify"]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[647, "sklearn.linear_model.PassiveAggressiveClassifier.fit"]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[647, "sklearn.linear_model.PassiveAggressiveClassifier.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[647, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[647, "sklearn.linear_model.PassiveAggressiveClassifier.predict"]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[647, "sklearn.linear_model.PassiveAggressiveClassifier.score"]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[647, "sklearn.linear_model.PassiveAggressiveClassifier.set_params"]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[647, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify"]], "passiveaggressiveregressor() (in module sklearn.linear_model)": [[648, "sklearn.linear_model.PassiveAggressiveRegressor"]], "perceptron (class in sklearn.linear_model)": [[649, "sklearn.linear_model.Perceptron"]], "decision_function() (sklearn.linear_model.perceptron method)": [[649, "sklearn.linear_model.Perceptron.decision_function"]], "densify() (sklearn.linear_model.perceptron method)": [[649, "sklearn.linear_model.Perceptron.densify"]], "fit() (sklearn.linear_model.perceptron method)": [[649, "sklearn.linear_model.Perceptron.fit"]], "get_params() (sklearn.linear_model.perceptron method)": [[649, "sklearn.linear_model.Perceptron.get_params"]], "partial_fit() (sklearn.linear_model.perceptron method)": [[649, "sklearn.linear_model.Perceptron.partial_fit"]], "predict() (sklearn.linear_model.perceptron method)": [[649, "sklearn.linear_model.Perceptron.predict"]], "score() (sklearn.linear_model.perceptron method)": [[649, "sklearn.linear_model.Perceptron.score"]], "set_params() (sklearn.linear_model.perceptron method)": [[649, "sklearn.linear_model.Perceptron.set_params"]], "sparsify() (sklearn.linear_model.perceptron method)": [[649, "sklearn.linear_model.Perceptron.sparsify"]], "poissonregressor (class in sklearn.linear_model)": [[650, "sklearn.linear_model.PoissonRegressor"]], "family (sklearn.linear_model.poissonregressor property)": [[650, "sklearn.linear_model.PoissonRegressor.family"]], "fit() (sklearn.linear_model.poissonregressor method)": [[650, "sklearn.linear_model.PoissonRegressor.fit"]], "get_params() (sklearn.linear_model.poissonregressor method)": [[650, "sklearn.linear_model.PoissonRegressor.get_params"]], "predict() (sklearn.linear_model.poissonregressor method)": [[650, "sklearn.linear_model.PoissonRegressor.predict"]], "score() (sklearn.linear_model.poissonregressor method)": [[650, "sklearn.linear_model.PoissonRegressor.score"]], "set_params() (sklearn.linear_model.poissonregressor method)": [[650, "sklearn.linear_model.PoissonRegressor.set_params"]], "quantileregressor (class in sklearn.linear_model)": [[651, "sklearn.linear_model.QuantileRegressor"]], "fit() (sklearn.linear_model.quantileregressor method)": [[651, "sklearn.linear_model.QuantileRegressor.fit"]], "get_params() (sklearn.linear_model.quantileregressor method)": [[651, "sklearn.linear_model.QuantileRegressor.get_params"]], "predict() (sklearn.linear_model.quantileregressor method)": [[651, "sklearn.linear_model.QuantileRegressor.predict"]], "score() (sklearn.linear_model.quantileregressor method)": [[651, "sklearn.linear_model.QuantileRegressor.score"]], "set_params() (sklearn.linear_model.quantileregressor method)": [[651, "sklearn.linear_model.QuantileRegressor.set_params"]], "ransacregressor (class in sklearn.linear_model)": [[652, "sklearn.linear_model.RANSACRegressor"]], "fit() (sklearn.linear_model.ransacregressor method)": [[652, "sklearn.linear_model.RANSACRegressor.fit"]], "get_params() (sklearn.linear_model.ransacregressor method)": [[652, "sklearn.linear_model.RANSACRegressor.get_params"]], "predict() (sklearn.linear_model.ransacregressor method)": [[652, "sklearn.linear_model.RANSACRegressor.predict"]], "score() (sklearn.linear_model.ransacregressor method)": [[652, "sklearn.linear_model.RANSACRegressor.score"]], "set_params() (sklearn.linear_model.ransacregressor method)": [[652, "sklearn.linear_model.RANSACRegressor.set_params"]], "ridge (class in sklearn.linear_model)": [[653, "sklearn.linear_model.Ridge"]], "fit() (sklearn.linear_model.ridge method)": [[653, "sklearn.linear_model.Ridge.fit"]], "get_params() (sklearn.linear_model.ridge method)": [[653, "sklearn.linear_model.Ridge.get_params"]], "predict() (sklearn.linear_model.ridge method)": [[653, "sklearn.linear_model.Ridge.predict"]], "score() (sklearn.linear_model.ridge method)": [[653, "sklearn.linear_model.Ridge.score"]], "set_params() (sklearn.linear_model.ridge method)": [[653, "sklearn.linear_model.Ridge.set_params"]], "ridgecv (class in sklearn.linear_model)": [[654, "sklearn.linear_model.RidgeCV"]], "fit() (sklearn.linear_model.ridgecv method)": [[654, "sklearn.linear_model.RidgeCV.fit"]], "get_params() (sklearn.linear_model.ridgecv method)": [[654, "sklearn.linear_model.RidgeCV.get_params"]], "predict() (sklearn.linear_model.ridgecv method)": [[654, "sklearn.linear_model.RidgeCV.predict"]], "score() (sklearn.linear_model.ridgecv method)": [[654, "sklearn.linear_model.RidgeCV.score"]], "set_params() (sklearn.linear_model.ridgecv method)": [[654, "sklearn.linear_model.RidgeCV.set_params"]], "ridgeclassifier (class in sklearn.linear_model)": [[655, "sklearn.linear_model.RidgeClassifier"]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[655, "sklearn.linear_model.RidgeClassifier.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[655, "sklearn.linear_model.RidgeClassifier.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[655, "sklearn.linear_model.RidgeClassifier.fit"]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[655, "sklearn.linear_model.RidgeClassifier.get_params"]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[655, "sklearn.linear_model.RidgeClassifier.predict"]], "score() (sklearn.linear_model.ridgeclassifier method)": [[655, "sklearn.linear_model.RidgeClassifier.score"]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[655, "sklearn.linear_model.RidgeClassifier.set_params"]], "ridgeclassifiercv (class in sklearn.linear_model)": [[656, "sklearn.linear_model.RidgeClassifierCV"]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[656, "sklearn.linear_model.RidgeClassifierCV.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[656, "sklearn.linear_model.RidgeClassifierCV.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[656, "sklearn.linear_model.RidgeClassifierCV.fit"]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[656, "sklearn.linear_model.RidgeClassifierCV.get_params"]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[656, "sklearn.linear_model.RidgeClassifierCV.predict"]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[656, "sklearn.linear_model.RidgeClassifierCV.score"]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[656, "sklearn.linear_model.RidgeClassifierCV.set_params"]], "sgdclassifier (class in sklearn.linear_model)": [[657, "sklearn.linear_model.SGDClassifier"]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[657, "sklearn.linear_model.SGDClassifier.decision_function"]], "densify() (sklearn.linear_model.sgdclassifier method)": [[657, "sklearn.linear_model.SGDClassifier.densify"]], "fit() (sklearn.linear_model.sgdclassifier method)": [[657, "sklearn.linear_model.SGDClassifier.fit"]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[657, "sklearn.linear_model.SGDClassifier.get_params"]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[657, "sklearn.linear_model.SGDClassifier.partial_fit"]], "predict() (sklearn.linear_model.sgdclassifier method)": [[657, "sklearn.linear_model.SGDClassifier.predict"]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[657, "sklearn.linear_model.SGDClassifier.predict_log_proba"]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[657, "sklearn.linear_model.SGDClassifier.predict_proba"]], "score() (sklearn.linear_model.sgdclassifier method)": [[657, "sklearn.linear_model.SGDClassifier.score"]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[657, "sklearn.linear_model.SGDClassifier.set_params"]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[657, "sklearn.linear_model.SGDClassifier.sparsify"]], "sgdoneclasssvm (class in sklearn.linear_model)": [[658, "sklearn.linear_model.SGDOneClassSVM"]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[658, "sklearn.linear_model.SGDOneClassSVM.decision_function"]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[658, "sklearn.linear_model.SGDOneClassSVM.densify"]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[658, "sklearn.linear_model.SGDOneClassSVM.fit"]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[658, "sklearn.linear_model.SGDOneClassSVM.fit_predict"]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[658, "sklearn.linear_model.SGDOneClassSVM.get_params"]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[658, "sklearn.linear_model.SGDOneClassSVM.partial_fit"]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[658, "sklearn.linear_model.SGDOneClassSVM.predict"]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[658, "sklearn.linear_model.SGDOneClassSVM.score_samples"]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[658, "sklearn.linear_model.SGDOneClassSVM.set_params"]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[658, "sklearn.linear_model.SGDOneClassSVM.sparsify"]], "sgdregressor (class in sklearn.linear_model)": [[659, "sklearn.linear_model.SGDRegressor"]], "densify() (sklearn.linear_model.sgdregressor method)": [[659, "sklearn.linear_model.SGDRegressor.densify"]], "fit() (sklearn.linear_model.sgdregressor method)": [[659, "sklearn.linear_model.SGDRegressor.fit"]], "get_params() (sklearn.linear_model.sgdregressor method)": [[659, "sklearn.linear_model.SGDRegressor.get_params"]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[659, "sklearn.linear_model.SGDRegressor.partial_fit"]], "predict() (sklearn.linear_model.sgdregressor method)": [[659, "sklearn.linear_model.SGDRegressor.predict"]], "score() (sklearn.linear_model.sgdregressor method)": [[659, "sklearn.linear_model.SGDRegressor.score"]], "set_params() (sklearn.linear_model.sgdregressor method)": [[659, "sklearn.linear_model.SGDRegressor.set_params"]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[659, "sklearn.linear_model.SGDRegressor.sparsify"]], "theilsenregressor (class in sklearn.linear_model)": [[660, "sklearn.linear_model.TheilSenRegressor"]], "fit() (sklearn.linear_model.theilsenregressor method)": [[660, "sklearn.linear_model.TheilSenRegressor.fit"]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[660, "sklearn.linear_model.TheilSenRegressor.get_params"]], "predict() (sklearn.linear_model.theilsenregressor method)": [[660, "sklearn.linear_model.TheilSenRegressor.predict"]], "score() (sklearn.linear_model.theilsenregressor method)": [[660, "sklearn.linear_model.TheilSenRegressor.score"]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[660, "sklearn.linear_model.TheilSenRegressor.set_params"]], "tweedieregressor (class in sklearn.linear_model)": [[661, "sklearn.linear_model.TweedieRegressor"]], "family (sklearn.linear_model.tweedieregressor property)": [[661, "sklearn.linear_model.TweedieRegressor.family"]], "fit() (sklearn.linear_model.tweedieregressor method)": [[661, "sklearn.linear_model.TweedieRegressor.fit"]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[661, "sklearn.linear_model.TweedieRegressor.get_params"]], "predict() (sklearn.linear_model.tweedieregressor method)": [[661, "sklearn.linear_model.TweedieRegressor.predict"]], "score() (sklearn.linear_model.tweedieregressor method)": [[661, "sklearn.linear_model.TweedieRegressor.score"]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[661, "sklearn.linear_model.TweedieRegressor.set_params"]], "enet_path() (in module sklearn.linear_model)": [[662, "sklearn.linear_model.enet_path"]], "lars_path() (in module sklearn.linear_model)": [[663, "sklearn.linear_model.lars_path"]], "lars_path_gram() (in module sklearn.linear_model)": [[664, "sklearn.linear_model.lars_path_gram"]], "lasso_path() (in module sklearn.linear_model)": [[665, "sklearn.linear_model.lasso_path"]], "orthogonal_mp() (in module sklearn.linear_model)": [[666, "sklearn.linear_model.orthogonal_mp"]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[667, "sklearn.linear_model.orthogonal_mp_gram"]], "ridge_regression() (in module sklearn.linear_model)": [[668, "sklearn.linear_model.ridge_regression"]], "isomap (class in sklearn.manifold)": [[669, "sklearn.manifold.Isomap"]], "fit() (sklearn.manifold.isomap method)": [[669, "sklearn.manifold.Isomap.fit"]], "fit_transform() (sklearn.manifold.isomap method)": [[669, "sklearn.manifold.Isomap.fit_transform"]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[669, "sklearn.manifold.Isomap.get_feature_names_out"]], "get_params() (sklearn.manifold.isomap method)": [[669, "sklearn.manifold.Isomap.get_params"]], "reconstruction_error() (sklearn.manifold.isomap method)": [[669, "sklearn.manifold.Isomap.reconstruction_error"]], "set_output() (sklearn.manifold.isomap method)": [[669, "sklearn.manifold.Isomap.set_output"]], "set_params() (sklearn.manifold.isomap method)": [[669, "sklearn.manifold.Isomap.set_params"]], "transform() (sklearn.manifold.isomap method)": [[669, "sklearn.manifold.Isomap.transform"]], "locallylinearembedding (class in sklearn.manifold)": [[670, "sklearn.manifold.LocallyLinearEmbedding"]], "fit() (sklearn.manifold.locallylinearembedding method)": [[670, "sklearn.manifold.LocallyLinearEmbedding.fit"]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[670, "sklearn.manifold.LocallyLinearEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[670, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out"]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[670, "sklearn.manifold.LocallyLinearEmbedding.get_params"]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[670, "sklearn.manifold.LocallyLinearEmbedding.set_output"]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[670, "sklearn.manifold.LocallyLinearEmbedding.set_params"]], "transform() (sklearn.manifold.locallylinearembedding method)": [[670, "sklearn.manifold.LocallyLinearEmbedding.transform"]], "mds (class in sklearn.manifold)": [[671, "sklearn.manifold.MDS"]], "fit() (sklearn.manifold.mds method)": [[671, "sklearn.manifold.MDS.fit"]], "fit_transform() (sklearn.manifold.mds method)": [[671, "sklearn.manifold.MDS.fit_transform"]], "get_params() (sklearn.manifold.mds method)": [[671, "sklearn.manifold.MDS.get_params"]], "set_params() (sklearn.manifold.mds method)": [[671, "sklearn.manifold.MDS.set_params"]], "spectralembedding (class in sklearn.manifold)": [[672, "sklearn.manifold.SpectralEmbedding"]], "fit() (sklearn.manifold.spectralembedding method)": [[672, "sklearn.manifold.SpectralEmbedding.fit"]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[672, "sklearn.manifold.SpectralEmbedding.fit_transform"]], "get_params() (sklearn.manifold.spectralembedding method)": [[672, "sklearn.manifold.SpectralEmbedding.get_params"]], "set_params() (sklearn.manifold.spectralembedding method)": [[672, "sklearn.manifold.SpectralEmbedding.set_params"]], "tsne (class in sklearn.manifold)": [[673, "sklearn.manifold.TSNE"]], "fit() (sklearn.manifold.tsne method)": [[673, "sklearn.manifold.TSNE.fit"]], "fit_transform() (sklearn.manifold.tsne method)": [[673, "sklearn.manifold.TSNE.fit_transform"]], "get_params() (sklearn.manifold.tsne method)": [[673, "sklearn.manifold.TSNE.get_params"]], "set_params() (sklearn.manifold.tsne method)": [[673, "sklearn.manifold.TSNE.set_params"]], "locally_linear_embedding() (in module sklearn.manifold)": [[674, "sklearn.manifold.locally_linear_embedding"]], "smacof() (in module sklearn.manifold)": [[675, "sklearn.manifold.smacof"]], "spectral_embedding() (in module sklearn.manifold)": [[676, "sklearn.manifold.spectral_embedding"]], "trustworthiness() (in module sklearn.manifold)": [[677, "sklearn.manifold.trustworthiness"]], "confusionmatrixdisplay (class in sklearn.metrics)": [[678, "sklearn.metrics.ConfusionMatrixDisplay"]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[678, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[678, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions"]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[678, "sklearn.metrics.ConfusionMatrixDisplay.plot"]], "detcurvedisplay (class in sklearn.metrics)": [[679, "sklearn.metrics.DetCurveDisplay"]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[679, "sklearn.metrics.DetCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[679, "sklearn.metrics.DetCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.detcurvedisplay method)": [[679, "sklearn.metrics.DetCurveDisplay.plot"]], "distancemetric (class in sklearn.metrics)": [[680, "sklearn.metrics.DistanceMetric"]], "dist_to_rdist() (sklearn.metrics.distancemetric method)": [[680, "sklearn.metrics.DistanceMetric.dist_to_rdist"]], "get_metric() (sklearn.metrics.distancemetric method)": [[680, "sklearn.metrics.DistanceMetric.get_metric"]], "pairwise() (sklearn.metrics.distancemetric method)": [[680, "sklearn.metrics.DistanceMetric.pairwise"]], "rdist_to_dist() (sklearn.metrics.distancemetric method)": [[680, "sklearn.metrics.DistanceMetric.rdist_to_dist"]], "precisionrecalldisplay (class in sklearn.metrics)": [[681, "sklearn.metrics.PrecisionRecallDisplay"]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[681, "sklearn.metrics.PrecisionRecallDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[681, "sklearn.metrics.PrecisionRecallDisplay.from_predictions"]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[681, "sklearn.metrics.PrecisionRecallDisplay.plot"]], "predictionerrordisplay (class in sklearn.metrics)": [[682, "sklearn.metrics.PredictionErrorDisplay"]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[682, "sklearn.metrics.PredictionErrorDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[682, "sklearn.metrics.PredictionErrorDisplay.from_predictions"]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[682, "sklearn.metrics.PredictionErrorDisplay.plot"]], "roccurvedisplay (class in sklearn.metrics)": [[683, "sklearn.metrics.RocCurveDisplay"]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[683, "sklearn.metrics.RocCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[683, "sklearn.metrics.RocCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.roccurvedisplay method)": [[683, "sklearn.metrics.RocCurveDisplay.plot"]], "accuracy_score() (in module sklearn.metrics)": [[684, "sklearn.metrics.accuracy_score"]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[685, "sklearn.metrics.adjusted_mutual_info_score"]], "adjusted_rand_score() (in module sklearn.metrics)": [[686, "sklearn.metrics.adjusted_rand_score"]], "auc() (in module sklearn.metrics)": [[687, "sklearn.metrics.auc"]], "average_precision_score() (in module sklearn.metrics)": [[688, "sklearn.metrics.average_precision_score"]], "balanced_accuracy_score() (in module sklearn.metrics)": [[689, "sklearn.metrics.balanced_accuracy_score"]], "brier_score_loss() (in module sklearn.metrics)": [[690, "sklearn.metrics.brier_score_loss"]], "calinski_harabasz_score() (in module sklearn.metrics)": [[691, "sklearn.metrics.calinski_harabasz_score"]], "check_scoring() (in module sklearn.metrics)": [[692, "sklearn.metrics.check_scoring"]], "class_likelihood_ratios() (in module sklearn.metrics)": [[693, "sklearn.metrics.class_likelihood_ratios"]], "classification_report() (in module sklearn.metrics)": [[694, "sklearn.metrics.classification_report"]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[695, "sklearn.metrics.cluster.contingency_matrix"]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[696, "sklearn.metrics.cluster.pair_confusion_matrix"]], "cohen_kappa_score() (in module sklearn.metrics)": [[697, "sklearn.metrics.cohen_kappa_score"]], "completeness_score() (in module sklearn.metrics)": [[698, "sklearn.metrics.completeness_score"]], "confusion_matrix() (in module sklearn.metrics)": [[699, "sklearn.metrics.confusion_matrix"]], "consensus_score() (in module sklearn.metrics)": [[700, "sklearn.metrics.consensus_score"]], "coverage_error() (in module sklearn.metrics)": [[701, "sklearn.metrics.coverage_error"]], "d2_absolute_error_score() (in module sklearn.metrics)": [[702, "sklearn.metrics.d2_absolute_error_score"]], "d2_pinball_score() (in module sklearn.metrics)": [[703, "sklearn.metrics.d2_pinball_score"]], "d2_tweedie_score() (in module sklearn.metrics)": [[704, "sklearn.metrics.d2_tweedie_score"]], "davies_bouldin_score() (in module sklearn.metrics)": [[705, "sklearn.metrics.davies_bouldin_score"]], "dcg_score() (in module sklearn.metrics)": [[706, "sklearn.metrics.dcg_score"]], "det_curve() (in module sklearn.metrics)": [[707, "sklearn.metrics.det_curve"]], "explained_variance_score() (in module sklearn.metrics)": [[708, "sklearn.metrics.explained_variance_score"]], "f1_score() (in module sklearn.metrics)": [[709, "sklearn.metrics.f1_score"]], "fbeta_score() (in module sklearn.metrics)": [[710, "sklearn.metrics.fbeta_score"]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[711, "sklearn.metrics.fowlkes_mallows_score"]], "get_scorer() (in module sklearn.metrics)": [[712, "sklearn.metrics.get_scorer"]], "get_scorer_names() (in module sklearn.metrics)": [[713, "sklearn.metrics.get_scorer_names"]], "hamming_loss() (in module sklearn.metrics)": [[714, "sklearn.metrics.hamming_loss"]], "hinge_loss() (in module sklearn.metrics)": [[715, "sklearn.metrics.hinge_loss"]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[716, "sklearn.metrics.homogeneity_completeness_v_measure"]], "homogeneity_score() (in module sklearn.metrics)": [[717, "sklearn.metrics.homogeneity_score"]], "jaccard_score() (in module sklearn.metrics)": [[718, "sklearn.metrics.jaccard_score"]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[719, "sklearn.metrics.label_ranking_average_precision_score"]], "label_ranking_loss() (in module sklearn.metrics)": [[720, "sklearn.metrics.label_ranking_loss"]], "log_loss() (in module sklearn.metrics)": [[721, "sklearn.metrics.log_loss"]], "make_scorer() (in module sklearn.metrics)": [[722, "sklearn.metrics.make_scorer"]], "matthews_corrcoef() (in module sklearn.metrics)": [[723, "sklearn.metrics.matthews_corrcoef"]], "max_error() (in module sklearn.metrics)": [[724, "sklearn.metrics.max_error"]], "mean_absolute_error() (in module sklearn.metrics)": [[725, "sklearn.metrics.mean_absolute_error"]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[726, "sklearn.metrics.mean_absolute_percentage_error"]], "mean_gamma_deviance() (in module sklearn.metrics)": [[727, "sklearn.metrics.mean_gamma_deviance"]], "mean_pinball_loss() (in module sklearn.metrics)": [[728, "sklearn.metrics.mean_pinball_loss"]], "mean_poisson_deviance() (in module sklearn.metrics)": [[729, "sklearn.metrics.mean_poisson_deviance"]], "mean_squared_error() (in module sklearn.metrics)": [[730, "sklearn.metrics.mean_squared_error"]], "mean_squared_log_error() (in module sklearn.metrics)": [[731, "sklearn.metrics.mean_squared_log_error"]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[732, "sklearn.metrics.mean_tweedie_deviance"]], "median_absolute_error() (in module sklearn.metrics)": [[733, "sklearn.metrics.median_absolute_error"]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[734, "sklearn.metrics.multilabel_confusion_matrix"]], "mutual_info_score() (in module sklearn.metrics)": [[735, "sklearn.metrics.mutual_info_score"]], "ndcg_score() (in module sklearn.metrics)": [[736, "sklearn.metrics.ndcg_score"]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[737, "sklearn.metrics.normalized_mutual_info_score"]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[738, "sklearn.metrics.pairwise.additive_chi2_kernel"]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[739, "sklearn.metrics.pairwise.chi2_kernel"]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[740, "sklearn.metrics.pairwise.cosine_distances"]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[741, "sklearn.metrics.pairwise.cosine_similarity"]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[742, "sklearn.metrics.pairwise.distance_metrics"]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[743, "sklearn.metrics.pairwise.euclidean_distances"]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[744, "sklearn.metrics.pairwise.haversine_distances"]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[745, "sklearn.metrics.pairwise.kernel_metrics"]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[746, "sklearn.metrics.pairwise.laplacian_kernel"]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[747, "sklearn.metrics.pairwise.linear_kernel"]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[748, "sklearn.metrics.pairwise.manhattan_distances"]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[749, "sklearn.metrics.pairwise.nan_euclidean_distances"]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[750, "sklearn.metrics.pairwise.paired_cosine_distances"]], "paired_distances() (in module sklearn.metrics.pairwise)": [[751, "sklearn.metrics.pairwise.paired_distances"]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[752, "sklearn.metrics.pairwise.paired_euclidean_distances"]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[753, "sklearn.metrics.pairwise.paired_manhattan_distances"]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[754, "sklearn.metrics.pairwise.pairwise_kernels"]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[755, "sklearn.metrics.pairwise.polynomial_kernel"]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[756, "sklearn.metrics.pairwise.rbf_kernel"]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[757, "sklearn.metrics.pairwise.sigmoid_kernel"]], "pairwise_distances() (in module sklearn.metrics)": [[758, "sklearn.metrics.pairwise_distances"]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[759, "sklearn.metrics.pairwise_distances_argmin"]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[760, "sklearn.metrics.pairwise_distances_argmin_min"]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[761, "sklearn.metrics.pairwise_distances_chunked"]], "precision_recall_curve() (in module sklearn.metrics)": [[762, "sklearn.metrics.precision_recall_curve"]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[763, "sklearn.metrics.precision_recall_fscore_support"]], "precision_score() (in module sklearn.metrics)": [[764, "sklearn.metrics.precision_score"]], "r2_score() (in module sklearn.metrics)": [[765, "sklearn.metrics.r2_score"]], "rand_score() (in module sklearn.metrics)": [[766, "sklearn.metrics.rand_score"]], "recall_score() (in module sklearn.metrics)": [[767, "sklearn.metrics.recall_score"]], "roc_auc_score() (in module sklearn.metrics)": [[768, "sklearn.metrics.roc_auc_score"]], "roc_curve() (in module sklearn.metrics)": [[769, "sklearn.metrics.roc_curve"]], "silhouette_samples() (in module sklearn.metrics)": [[770, "sklearn.metrics.silhouette_samples"]], "silhouette_score() (in module sklearn.metrics)": [[771, "sklearn.metrics.silhouette_score"]], "top_k_accuracy_score() (in module sklearn.metrics)": [[772, "sklearn.metrics.top_k_accuracy_score"]], "v_measure_score() (in module sklearn.metrics)": [[773, "sklearn.metrics.v_measure_score"]], "zero_one_loss() (in module sklearn.metrics)": [[774, "sklearn.metrics.zero_one_loss"]], "bayesiangaussianmixture (class in sklearn.mixture)": [[775, "sklearn.mixture.BayesianGaussianMixture"]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[775, "sklearn.mixture.BayesianGaussianMixture.fit"]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[775, "sklearn.mixture.BayesianGaussianMixture.fit_predict"]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[775, "sklearn.mixture.BayesianGaussianMixture.get_params"]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[775, "sklearn.mixture.BayesianGaussianMixture.predict"]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[775, "sklearn.mixture.BayesianGaussianMixture.predict_proba"]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[775, "sklearn.mixture.BayesianGaussianMixture.sample"]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[775, "sklearn.mixture.BayesianGaussianMixture.score"]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[775, "sklearn.mixture.BayesianGaussianMixture.score_samples"]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[775, "sklearn.mixture.BayesianGaussianMixture.set_params"]], "gaussianmixture (class in sklearn.mixture)": [[776, "sklearn.mixture.GaussianMixture"]], "aic() (sklearn.mixture.gaussianmixture method)": [[776, "sklearn.mixture.GaussianMixture.aic"]], "bic() (sklearn.mixture.gaussianmixture method)": [[776, "sklearn.mixture.GaussianMixture.bic"]], "fit() (sklearn.mixture.gaussianmixture method)": [[776, "sklearn.mixture.GaussianMixture.fit"]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[776, "sklearn.mixture.GaussianMixture.fit_predict"]], "get_params() (sklearn.mixture.gaussianmixture method)": [[776, "sklearn.mixture.GaussianMixture.get_params"]], "predict() (sklearn.mixture.gaussianmixture method)": [[776, "sklearn.mixture.GaussianMixture.predict"]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[776, "sklearn.mixture.GaussianMixture.predict_proba"]], "sample() (sklearn.mixture.gaussianmixture method)": [[776, "sklearn.mixture.GaussianMixture.sample"]], "score() (sklearn.mixture.gaussianmixture method)": [[776, "sklearn.mixture.GaussianMixture.score"]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[776, "sklearn.mixture.GaussianMixture.score_samples"]], "set_params() (sklearn.mixture.gaussianmixture method)": [[776, "sklearn.mixture.GaussianMixture.set_params"]], "gridsearchcv (class in sklearn.model_selection)": [[777, "sklearn.model_selection.GridSearchCV"]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[777, "sklearn.model_selection.GridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[777, "sklearn.model_selection.GridSearchCV.decision_function"]], "fit() (sklearn.model_selection.gridsearchcv method)": [[777, "sklearn.model_selection.GridSearchCV.fit"]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[777, "sklearn.model_selection.GridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[777, "sklearn.model_selection.GridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[777, "sklearn.model_selection.GridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.gridsearchcv method)": [[777, "sklearn.model_selection.GridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[777, "sklearn.model_selection.GridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[777, "sklearn.model_selection.GridSearchCV.predict_proba"]], "score() (sklearn.model_selection.gridsearchcv method)": [[777, "sklearn.model_selection.GridSearchCV.score"]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[777, "sklearn.model_selection.GridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[777, "sklearn.model_selection.GridSearchCV.set_params"]], "transform() (sklearn.model_selection.gridsearchcv method)": [[777, "sklearn.model_selection.GridSearchCV.transform"]], "groupkfold (class in sklearn.model_selection)": [[778, "sklearn.model_selection.GroupKFold"]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[778, "sklearn.model_selection.GroupKFold.get_n_splits"]], "split() (sklearn.model_selection.groupkfold method)": [[778, "sklearn.model_selection.GroupKFold.split"]], "groupshufflesplit (class in sklearn.model_selection)": [[779, "sklearn.model_selection.GroupShuffleSplit"]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[779, "sklearn.model_selection.GroupShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.groupshufflesplit method)": [[779, "sklearn.model_selection.GroupShuffleSplit.split"]], "halvinggridsearchcv (class in sklearn.model_selection)": [[780, "sklearn.model_selection.HalvingGridSearchCV"]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[780, "sklearn.model_selection.HalvingGridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[780, "sklearn.model_selection.HalvingGridSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[780, "sklearn.model_selection.HalvingGridSearchCV.fit"]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[780, "sklearn.model_selection.HalvingGridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[780, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[780, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[780, "sklearn.model_selection.HalvingGridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[780, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[780, "sklearn.model_selection.HalvingGridSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[780, "sklearn.model_selection.HalvingGridSearchCV.score"]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[780, "sklearn.model_selection.HalvingGridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[780, "sklearn.model_selection.HalvingGridSearchCV.set_params"]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[780, "sklearn.model_selection.HalvingGridSearchCV.transform"]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[781, "sklearn.model_selection.HalvingRandomSearchCV"]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.fit"]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.score"]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.set_params"]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.transform"]], "kfold (class in sklearn.model_selection)": [[782, "sklearn.model_selection.KFold"]], "get_n_splits() (sklearn.model_selection.kfold method)": [[782, "sklearn.model_selection.KFold.get_n_splits"]], "split() (sklearn.model_selection.kfold method)": [[782, "sklearn.model_selection.KFold.split"]], "learningcurvedisplay (class in sklearn.model_selection)": [[783, "sklearn.model_selection.LearningCurveDisplay"]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[783, "sklearn.model_selection.LearningCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[783, "sklearn.model_selection.LearningCurveDisplay.plot"]], "leaveonegroupout (class in sklearn.model_selection)": [[784, "sklearn.model_selection.LeaveOneGroupOut"]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[784, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits"]], "split() (sklearn.model_selection.leaveonegroupout method)": [[784, "sklearn.model_selection.LeaveOneGroupOut.split"]], "leaveoneout (class in sklearn.model_selection)": [[785, "sklearn.model_selection.LeaveOneOut"]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[785, "sklearn.model_selection.LeaveOneOut.get_n_splits"]], "split() (sklearn.model_selection.leaveoneout method)": [[785, "sklearn.model_selection.LeaveOneOut.split"]], "leavepgroupsout (class in sklearn.model_selection)": [[786, "sklearn.model_selection.LeavePGroupsOut"]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[786, "sklearn.model_selection.LeavePGroupsOut.get_n_splits"]], "split() (sklearn.model_selection.leavepgroupsout method)": [[786, "sklearn.model_selection.LeavePGroupsOut.split"]], "leavepout (class in sklearn.model_selection)": [[787, "sklearn.model_selection.LeavePOut"]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[787, "sklearn.model_selection.LeavePOut.get_n_splits"]], "split() (sklearn.model_selection.leavepout method)": [[787, "sklearn.model_selection.LeavePOut.split"]], "parametergrid (class in sklearn.model_selection)": [[788, "sklearn.model_selection.ParameterGrid"]], "parametersampler (class in sklearn.model_selection)": [[789, "sklearn.model_selection.ParameterSampler"]], "predefinedsplit (class in sklearn.model_selection)": [[790, "sklearn.model_selection.PredefinedSplit"]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[790, "sklearn.model_selection.PredefinedSplit.get_n_splits"]], "split() (sklearn.model_selection.predefinedsplit method)": [[790, "sklearn.model_selection.PredefinedSplit.split"]], "randomizedsearchcv (class in sklearn.model_selection)": [[791, "sklearn.model_selection.RandomizedSearchCV"]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[791, "sklearn.model_selection.RandomizedSearchCV.classes_"]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[791, "sklearn.model_selection.RandomizedSearchCV.decision_function"]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[791, "sklearn.model_selection.RandomizedSearchCV.fit"]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[791, "sklearn.model_selection.RandomizedSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[791, "sklearn.model_selection.RandomizedSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[791, "sklearn.model_selection.RandomizedSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[791, "sklearn.model_selection.RandomizedSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[791, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[791, "sklearn.model_selection.RandomizedSearchCV.predict_proba"]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[791, "sklearn.model_selection.RandomizedSearchCV.score"]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[791, "sklearn.model_selection.RandomizedSearchCV.score_samples"]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[791, "sklearn.model_selection.RandomizedSearchCV.set_params"]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[791, "sklearn.model_selection.RandomizedSearchCV.transform"]], "repeatedkfold (class in sklearn.model_selection)": [[792, "sklearn.model_selection.RepeatedKFold"]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[792, "sklearn.model_selection.RepeatedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedkfold method)": [[792, "sklearn.model_selection.RepeatedKFold.split"]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[793, "sklearn.model_selection.RepeatedStratifiedKFold"]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[793, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[793, "sklearn.model_selection.RepeatedStratifiedKFold.split"]], "shufflesplit (class in sklearn.model_selection)": [[794, "sklearn.model_selection.ShuffleSplit"]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[794, "sklearn.model_selection.ShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.shufflesplit method)": [[794, "sklearn.model_selection.ShuffleSplit.split"]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[795, "sklearn.model_selection.StratifiedGroupKFold"]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[795, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[795, "sklearn.model_selection.StratifiedGroupKFold.split"]], "stratifiedkfold (class in sklearn.model_selection)": [[796, "sklearn.model_selection.StratifiedKFold"]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[796, "sklearn.model_selection.StratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedkfold method)": [[796, "sklearn.model_selection.StratifiedKFold.split"]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[797, "sklearn.model_selection.StratifiedShuffleSplit"]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[797, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[797, "sklearn.model_selection.StratifiedShuffleSplit.split"]], "timeseriessplit (class in sklearn.model_selection)": [[798, "sklearn.model_selection.TimeSeriesSplit"]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[798, "sklearn.model_selection.TimeSeriesSplit.get_n_splits"]], "split() (sklearn.model_selection.timeseriessplit method)": [[798, "sklearn.model_selection.TimeSeriesSplit.split"]], "check_cv() (in module sklearn.model_selection)": [[799, "sklearn.model_selection.check_cv"]], "cross_val_predict() (in module sklearn.model_selection)": [[800, "sklearn.model_selection.cross_val_predict"]], "cross_val_score() (in module sklearn.model_selection)": [[801, "sklearn.model_selection.cross_val_score"]], "cross_validate() (in module sklearn.model_selection)": [[802, "sklearn.model_selection.cross_validate"]], "learning_curve() (in module sklearn.model_selection)": [[803, "sklearn.model_selection.learning_curve"]], "permutation_test_score() (in module sklearn.model_selection)": [[804, "sklearn.model_selection.permutation_test_score"]], "train_test_split() (in module sklearn.model_selection)": [[805, "sklearn.model_selection.train_test_split"]], "validation_curve() (in module sklearn.model_selection)": [[806, "sklearn.model_selection.validation_curve"]], "onevsoneclassifier (class in sklearn.multiclass)": [[807, "sklearn.multiclass.OneVsOneClassifier"]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[807, "sklearn.multiclass.OneVsOneClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[807, "sklearn.multiclass.OneVsOneClassifier.fit"]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[807, "sklearn.multiclass.OneVsOneClassifier.get_params"]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[807, "sklearn.multiclass.OneVsOneClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[807, "sklearn.multiclass.OneVsOneClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[807, "sklearn.multiclass.OneVsOneClassifier.predict"]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[807, "sklearn.multiclass.OneVsOneClassifier.score"]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[807, "sklearn.multiclass.OneVsOneClassifier.set_params"]], "onevsrestclassifier (class in sklearn.multiclass)": [[808, "sklearn.multiclass.OneVsRestClassifier"]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[808, "sklearn.multiclass.OneVsRestClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[808, "sklearn.multiclass.OneVsRestClassifier.fit"]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[808, "sklearn.multiclass.OneVsRestClassifier.get_params"]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[808, "sklearn.multiclass.OneVsRestClassifier.multilabel_"]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[808, "sklearn.multiclass.OneVsRestClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[808, "sklearn.multiclass.OneVsRestClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[808, "sklearn.multiclass.OneVsRestClassifier.predict"]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[808, "sklearn.multiclass.OneVsRestClassifier.predict_proba"]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[808, "sklearn.multiclass.OneVsRestClassifier.score"]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[808, "sklearn.multiclass.OneVsRestClassifier.set_params"]], "outputcodeclassifier (class in sklearn.multiclass)": [[809, "sklearn.multiclass.OutputCodeClassifier"]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[809, "sklearn.multiclass.OutputCodeClassifier.fit"]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[809, "sklearn.multiclass.OutputCodeClassifier.get_params"]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[809, "sklearn.multiclass.OutputCodeClassifier.predict"]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[809, "sklearn.multiclass.OutputCodeClassifier.score"]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[809, "sklearn.multiclass.OutputCodeClassifier.set_params"]], "classifierchain (class in sklearn.multioutput)": [[810, "sklearn.multioutput.ClassifierChain"]], "decision_function() (sklearn.multioutput.classifierchain method)": [[810, "sklearn.multioutput.ClassifierChain.decision_function"]], "fit() (sklearn.multioutput.classifierchain method)": [[810, "sklearn.multioutput.ClassifierChain.fit"]], "get_params() (sklearn.multioutput.classifierchain method)": [[810, "sklearn.multioutput.ClassifierChain.get_params"]], "predict() (sklearn.multioutput.classifierchain method)": [[810, "sklearn.multioutput.ClassifierChain.predict"]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[810, "sklearn.multioutput.ClassifierChain.predict_proba"]], "score() (sklearn.multioutput.classifierchain method)": [[810, "sklearn.multioutput.ClassifierChain.score"]], "set_params() (sklearn.multioutput.classifierchain method)": [[810, "sklearn.multioutput.ClassifierChain.set_params"]], "multioutputclassifier (class in sklearn.multioutput)": [[811, "sklearn.multioutput.MultiOutputClassifier"]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[811, "sklearn.multioutput.MultiOutputClassifier.fit"]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[811, "sklearn.multioutput.MultiOutputClassifier.get_params"]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[811, "sklearn.multioutput.MultiOutputClassifier.partial_fit"]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[811, "sklearn.multioutput.MultiOutputClassifier.predict"]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[811, "sklearn.multioutput.MultiOutputClassifier.predict_proba"]], "score() (sklearn.multioutput.multioutputclassifier method)": [[811, "sklearn.multioutput.MultiOutputClassifier.score"]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[811, "sklearn.multioutput.MultiOutputClassifier.set_params"]], "multioutputregressor (class in sklearn.multioutput)": [[812, "sklearn.multioutput.MultiOutputRegressor"]], "fit() (sklearn.multioutput.multioutputregressor method)": [[812, "sklearn.multioutput.MultiOutputRegressor.fit"]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[812, "sklearn.multioutput.MultiOutputRegressor.get_params"]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[812, "sklearn.multioutput.MultiOutputRegressor.partial_fit"]], "predict() (sklearn.multioutput.multioutputregressor method)": [[812, "sklearn.multioutput.MultiOutputRegressor.predict"]], "score() (sklearn.multioutput.multioutputregressor method)": [[812, "sklearn.multioutput.MultiOutputRegressor.score"]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[812, "sklearn.multioutput.MultiOutputRegressor.set_params"]], "regressorchain (class in sklearn.multioutput)": [[813, "sklearn.multioutput.RegressorChain"]], "fit() (sklearn.multioutput.regressorchain method)": [[813, "sklearn.multioutput.RegressorChain.fit"]], "get_params() (sklearn.multioutput.regressorchain method)": [[813, "sklearn.multioutput.RegressorChain.get_params"]], "predict() (sklearn.multioutput.regressorchain method)": [[813, "sklearn.multioutput.RegressorChain.predict"]], "score() (sklearn.multioutput.regressorchain method)": [[813, "sklearn.multioutput.RegressorChain.score"]], "set_params() (sklearn.multioutput.regressorchain method)": [[813, "sklearn.multioutput.RegressorChain.set_params"]], "bernoullinb (class in sklearn.naive_bayes)": [[814, "sklearn.naive_bayes.BernoulliNB"]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[814, "sklearn.naive_bayes.BernoulliNB.fit"]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[814, "sklearn.naive_bayes.BernoulliNB.get_params"]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[814, "sklearn.naive_bayes.BernoulliNB.partial_fit"]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[814, "sklearn.naive_bayes.BernoulliNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[814, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[814, "sklearn.naive_bayes.BernoulliNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[814, "sklearn.naive_bayes.BernoulliNB.predict_proba"]], "score() (sklearn.naive_bayes.bernoullinb method)": [[814, "sklearn.naive_bayes.BernoulliNB.score"]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[814, "sklearn.naive_bayes.BernoulliNB.set_params"]], "categoricalnb (class in sklearn.naive_bayes)": [[815, "sklearn.naive_bayes.CategoricalNB"]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[815, "sklearn.naive_bayes.CategoricalNB.fit"]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[815, "sklearn.naive_bayes.CategoricalNB.get_params"]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[815, "sklearn.naive_bayes.CategoricalNB.partial_fit"]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[815, "sklearn.naive_bayes.CategoricalNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[815, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[815, "sklearn.naive_bayes.CategoricalNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[815, "sklearn.naive_bayes.CategoricalNB.predict_proba"]], "score() (sklearn.naive_bayes.categoricalnb method)": [[815, "sklearn.naive_bayes.CategoricalNB.score"]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[815, "sklearn.naive_bayes.CategoricalNB.set_params"]], "complementnb (class in sklearn.naive_bayes)": [[816, "sklearn.naive_bayes.ComplementNB"]], "fit() (sklearn.naive_bayes.complementnb method)": [[816, "sklearn.naive_bayes.ComplementNB.fit"]], "get_params() (sklearn.naive_bayes.complementnb method)": [[816, "sklearn.naive_bayes.ComplementNB.get_params"]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[816, "sklearn.naive_bayes.ComplementNB.partial_fit"]], "predict() (sklearn.naive_bayes.complementnb method)": [[816, "sklearn.naive_bayes.ComplementNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[816, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[816, "sklearn.naive_bayes.ComplementNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[816, "sklearn.naive_bayes.ComplementNB.predict_proba"]], "score() (sklearn.naive_bayes.complementnb method)": [[816, "sklearn.naive_bayes.ComplementNB.score"]], "set_params() (sklearn.naive_bayes.complementnb method)": [[816, "sklearn.naive_bayes.ComplementNB.set_params"]], "gaussiannb (class in sklearn.naive_bayes)": [[817, "sklearn.naive_bayes.GaussianNB"]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[817, "sklearn.naive_bayes.GaussianNB.fit"]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[817, "sklearn.naive_bayes.GaussianNB.get_params"]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[817, "sklearn.naive_bayes.GaussianNB.partial_fit"]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[817, "sklearn.naive_bayes.GaussianNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[817, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[817, "sklearn.naive_bayes.GaussianNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[817, "sklearn.naive_bayes.GaussianNB.predict_proba"]], "score() (sklearn.naive_bayes.gaussiannb method)": [[817, "sklearn.naive_bayes.GaussianNB.score"]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[817, "sklearn.naive_bayes.GaussianNB.set_params"]], "multinomialnb (class in sklearn.naive_bayes)": [[818, "sklearn.naive_bayes.MultinomialNB"]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[818, "sklearn.naive_bayes.MultinomialNB.fit"]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[818, "sklearn.naive_bayes.MultinomialNB.get_params"]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[818, "sklearn.naive_bayes.MultinomialNB.partial_fit"]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[818, "sklearn.naive_bayes.MultinomialNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[818, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[818, "sklearn.naive_bayes.MultinomialNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[818, "sklearn.naive_bayes.MultinomialNB.predict_proba"]], "score() (sklearn.naive_bayes.multinomialnb method)": [[818, "sklearn.naive_bayes.MultinomialNB.score"]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[818, "sklearn.naive_bayes.MultinomialNB.set_params"]], "balltree (class in sklearn.neighbors)": [[819, "sklearn.neighbors.BallTree"]], "get_arrays() (sklearn.neighbors.balltree method)": [[819, "sklearn.neighbors.BallTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.balltree method)": [[819, "sklearn.neighbors.BallTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[819, "sklearn.neighbors.BallTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.balltree method)": [[819, "sklearn.neighbors.BallTree.kernel_density"]], "query() (sklearn.neighbors.balltree method)": [[819, "sklearn.neighbors.BallTree.query"]], "query_radius() (sklearn.neighbors.balltree method)": [[819, "sklearn.neighbors.BallTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[819, "sklearn.neighbors.BallTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[819, "sklearn.neighbors.BallTree.two_point_correlation"]], "valid_metrics() (sklearn.neighbors.balltree method)": [[819, "sklearn.neighbors.BallTree.valid_metrics"]], "kdtree (class in sklearn.neighbors)": [[820, "sklearn.neighbors.KDTree"]], "get_arrays() (sklearn.neighbors.kdtree method)": [[820, "sklearn.neighbors.KDTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[820, "sklearn.neighbors.KDTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[820, "sklearn.neighbors.KDTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.kdtree method)": [[820, "sklearn.neighbors.KDTree.kernel_density"]], "query() (sklearn.neighbors.kdtree method)": [[820, "sklearn.neighbors.KDTree.query"]], "query_radius() (sklearn.neighbors.kdtree method)": [[820, "sklearn.neighbors.KDTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[820, "sklearn.neighbors.KDTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[820, "sklearn.neighbors.KDTree.two_point_correlation"]], "valid_metrics() (sklearn.neighbors.kdtree method)": [[820, "sklearn.neighbors.KDTree.valid_metrics"]], "kneighborsclassifier (class in sklearn.neighbors)": [[821, "sklearn.neighbors.KNeighborsClassifier"]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[821, "sklearn.neighbors.KNeighborsClassifier.fit"]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[821, "sklearn.neighbors.KNeighborsClassifier.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[821, "sklearn.neighbors.KNeighborsClassifier.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[821, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[821, "sklearn.neighbors.KNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[821, "sklearn.neighbors.KNeighborsClassifier.predict_proba"]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[821, "sklearn.neighbors.KNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[821, "sklearn.neighbors.KNeighborsClassifier.set_params"]], "kneighborsregressor (class in sklearn.neighbors)": [[822, "sklearn.neighbors.KNeighborsRegressor"]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[822, "sklearn.neighbors.KNeighborsRegressor.fit"]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[822, "sklearn.neighbors.KNeighborsRegressor.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[822, "sklearn.neighbors.KNeighborsRegressor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[822, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[822, "sklearn.neighbors.KNeighborsRegressor.predict"]], "score() (sklearn.neighbors.kneighborsregressor method)": [[822, "sklearn.neighbors.KNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[822, "sklearn.neighbors.KNeighborsRegressor.set_params"]], "kneighborstransformer (class in sklearn.neighbors)": [[823, "sklearn.neighbors.KNeighborsTransformer"]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[823, "sklearn.neighbors.KNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[823, "sklearn.neighbors.KNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[823, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out"]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[823, "sklearn.neighbors.KNeighborsTransformer.get_params"]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[823, "sklearn.neighbors.KNeighborsTransformer.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[823, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph"]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[823, "sklearn.neighbors.KNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[823, "sklearn.neighbors.KNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[823, "sklearn.neighbors.KNeighborsTransformer.transform"]], "kerneldensity (class in sklearn.neighbors)": [[824, "sklearn.neighbors.KernelDensity"]], "fit() (sklearn.neighbors.kerneldensity method)": [[824, "sklearn.neighbors.KernelDensity.fit"]], "get_params() (sklearn.neighbors.kerneldensity method)": [[824, "sklearn.neighbors.KernelDensity.get_params"]], "sample() (sklearn.neighbors.kerneldensity method)": [[824, "sklearn.neighbors.KernelDensity.sample"]], "score() (sklearn.neighbors.kerneldensity method)": [[824, "sklearn.neighbors.KernelDensity.score"]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[824, "sklearn.neighbors.KernelDensity.score_samples"]], "set_params() (sklearn.neighbors.kerneldensity method)": [[824, "sklearn.neighbors.KernelDensity.set_params"]], "localoutlierfactor (class in sklearn.neighbors)": [[825, "sklearn.neighbors.LocalOutlierFactor"]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[825, "sklearn.neighbors.LocalOutlierFactor.decision_function"]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[825, "sklearn.neighbors.LocalOutlierFactor.fit"]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[825, "sklearn.neighbors.LocalOutlierFactor.fit_predict"]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[825, "sklearn.neighbors.LocalOutlierFactor.get_params"]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[825, "sklearn.neighbors.LocalOutlierFactor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[825, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph"]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[825, "sklearn.neighbors.LocalOutlierFactor.predict"]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[825, "sklearn.neighbors.LocalOutlierFactor.score_samples"]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[825, "sklearn.neighbors.LocalOutlierFactor.set_params"]], "nearestcentroid (class in sklearn.neighbors)": [[826, "sklearn.neighbors.NearestCentroid"]], "fit() (sklearn.neighbors.nearestcentroid method)": [[826, "sklearn.neighbors.NearestCentroid.fit"]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[826, "sklearn.neighbors.NearestCentroid.get_params"]], "predict() (sklearn.neighbors.nearestcentroid method)": [[826, "sklearn.neighbors.NearestCentroid.predict"]], "score() (sklearn.neighbors.nearestcentroid method)": [[826, "sklearn.neighbors.NearestCentroid.score"]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[826, "sklearn.neighbors.NearestCentroid.set_params"]], "nearestneighbors (class in sklearn.neighbors)": [[827, "sklearn.neighbors.NearestNeighbors"]], "fit() (sklearn.neighbors.nearestneighbors method)": [[827, "sklearn.neighbors.NearestNeighbors.fit"]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[827, "sklearn.neighbors.NearestNeighbors.get_params"]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[827, "sklearn.neighbors.NearestNeighbors.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[827, "sklearn.neighbors.NearestNeighbors.kneighbors_graph"]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[827, "sklearn.neighbors.NearestNeighbors.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[827, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph"]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[827, "sklearn.neighbors.NearestNeighbors.set_params"]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[828, "sklearn.neighbors.NeighborhoodComponentsAnalysis"]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[828, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit"]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[828, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[828, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out"]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[828, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params"]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[828, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output"]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[828, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params"]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[828, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform"]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[829, "sklearn.neighbors.RadiusNeighborsClassifier"]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[829, "sklearn.neighbors.RadiusNeighborsClassifier.fit"]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[829, "sklearn.neighbors.RadiusNeighborsClassifier.get_params"]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[829, "sklearn.neighbors.RadiusNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[829, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[829, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[829, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[829, "sklearn.neighbors.RadiusNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[829, "sklearn.neighbors.RadiusNeighborsClassifier.set_params"]], "radiusneighborsregressor (class in sklearn.neighbors)": [[830, "sklearn.neighbors.RadiusNeighborsRegressor"]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[830, "sklearn.neighbors.RadiusNeighborsRegressor.fit"]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[830, "sklearn.neighbors.RadiusNeighborsRegressor.get_params"]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[830, "sklearn.neighbors.RadiusNeighborsRegressor.predict"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[830, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[830, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[830, "sklearn.neighbors.RadiusNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[830, "sklearn.neighbors.RadiusNeighborsRegressor.set_params"]], "radiusneighborstransformer (class in sklearn.neighbors)": [[831, "sklearn.neighbors.RadiusNeighborsTransformer"]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[831, "sklearn.neighbors.RadiusNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[831, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[831, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out"]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[831, "sklearn.neighbors.RadiusNeighborsTransformer.get_params"]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[831, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[831, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph"]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[831, "sklearn.neighbors.RadiusNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[831, "sklearn.neighbors.RadiusNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[831, "sklearn.neighbors.RadiusNeighborsTransformer.transform"]], "kneighbors_graph() (in module sklearn.neighbors)": [[832, "sklearn.neighbors.kneighbors_graph"]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[833, "sklearn.neighbors.radius_neighbors_graph"]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[834, "sklearn.neighbors.sort_graph_by_row_values"]], "bernoullirbm (class in sklearn.neural_network)": [[835, "sklearn.neural_network.BernoulliRBM"]], "fit() (sklearn.neural_network.bernoullirbm method)": [[835, "sklearn.neural_network.BernoulliRBM.fit"]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[835, "sklearn.neural_network.BernoulliRBM.fit_transform"]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[835, "sklearn.neural_network.BernoulliRBM.get_feature_names_out"]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[835, "sklearn.neural_network.BernoulliRBM.get_params"]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[835, "sklearn.neural_network.BernoulliRBM.gibbs"]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[835, "sklearn.neural_network.BernoulliRBM.partial_fit"]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[835, "sklearn.neural_network.BernoulliRBM.score_samples"]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[835, "sklearn.neural_network.BernoulliRBM.set_output"]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[835, "sklearn.neural_network.BernoulliRBM.set_params"]], "transform() (sklearn.neural_network.bernoullirbm method)": [[835, "sklearn.neural_network.BernoulliRBM.transform"]], "mlpclassifier (class in sklearn.neural_network)": [[836, "sklearn.neural_network.MLPClassifier"]], "fit() (sklearn.neural_network.mlpclassifier method)": [[836, "sklearn.neural_network.MLPClassifier.fit"]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[836, "sklearn.neural_network.MLPClassifier.get_params"]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[836, "sklearn.neural_network.MLPClassifier.partial_fit"]], "predict() (sklearn.neural_network.mlpclassifier method)": [[836, "sklearn.neural_network.MLPClassifier.predict"]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[836, "sklearn.neural_network.MLPClassifier.predict_log_proba"]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[836, "sklearn.neural_network.MLPClassifier.predict_proba"]], "score() (sklearn.neural_network.mlpclassifier method)": [[836, "sklearn.neural_network.MLPClassifier.score"]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[836, "sklearn.neural_network.MLPClassifier.set_params"]], "mlpregressor (class in sklearn.neural_network)": [[837, "sklearn.neural_network.MLPRegressor"]], "fit() (sklearn.neural_network.mlpregressor method)": [[837, "sklearn.neural_network.MLPRegressor.fit"]], "get_params() (sklearn.neural_network.mlpregressor method)": [[837, "sklearn.neural_network.MLPRegressor.get_params"]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[837, "sklearn.neural_network.MLPRegressor.partial_fit"]], "predict() (sklearn.neural_network.mlpregressor method)": [[837, "sklearn.neural_network.MLPRegressor.predict"]], "score() (sklearn.neural_network.mlpregressor method)": [[837, "sklearn.neural_network.MLPRegressor.score"]], "set_params() (sklearn.neural_network.mlpregressor method)": [[837, "sklearn.neural_network.MLPRegressor.set_params"]], "featureunion (class in sklearn.pipeline)": [[838, "sklearn.pipeline.FeatureUnion"]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[838, "sklearn.pipeline.FeatureUnion.feature_names_in_"]], "fit() (sklearn.pipeline.featureunion method)": [[838, "sklearn.pipeline.FeatureUnion.fit"]], "fit_transform() (sklearn.pipeline.featureunion method)": [[838, "sklearn.pipeline.FeatureUnion.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[838, "sklearn.pipeline.FeatureUnion.get_feature_names_out"]], "get_params() (sklearn.pipeline.featureunion method)": [[838, "sklearn.pipeline.FeatureUnion.get_params"]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[838, "sklearn.pipeline.FeatureUnion.n_features_in_"]], "set_output() (sklearn.pipeline.featureunion method)": [[838, "sklearn.pipeline.FeatureUnion.set_output"]], "set_params() (sklearn.pipeline.featureunion method)": [[838, "sklearn.pipeline.FeatureUnion.set_params"]], "transform() (sklearn.pipeline.featureunion method)": [[838, "sklearn.pipeline.FeatureUnion.transform"]], "pipeline (class in sklearn.pipeline)": [[839, "sklearn.pipeline.Pipeline"]], "classes_ (sklearn.pipeline.pipeline property)": [[839, "sklearn.pipeline.Pipeline.classes_"]], "decision_function() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.decision_function"]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[839, "sklearn.pipeline.Pipeline.feature_names_in_"]], "fit() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.fit"]], "fit_predict() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.fit_predict"]], "fit_transform() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.get_feature_names_out"]], "get_params() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.get_params"]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.inverse_transform"]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[839, "sklearn.pipeline.Pipeline.n_features_in_"]], "named_steps (sklearn.pipeline.pipeline property)": [[839, "sklearn.pipeline.Pipeline.named_steps"]], "predict() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.predict"]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.predict_log_proba"]], "predict_proba() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.predict_proba"]], "score() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.score"]], "score_samples() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.score_samples"]], "set_output() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.set_output"]], "set_params() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.set_params"]], "transform() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.transform"]], "make_pipeline() (in module sklearn.pipeline)": [[840, "sklearn.pipeline.make_pipeline"]], "make_union() (in module sklearn.pipeline)": [[841, "sklearn.pipeline.make_union"]], "binarizer (class in sklearn.preprocessing)": [[842, "sklearn.preprocessing.Binarizer"]], "fit() (sklearn.preprocessing.binarizer method)": [[842, "sklearn.preprocessing.Binarizer.fit"]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[842, "sklearn.preprocessing.Binarizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[842, "sklearn.preprocessing.Binarizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.binarizer method)": [[842, "sklearn.preprocessing.Binarizer.get_params"]], "set_output() (sklearn.preprocessing.binarizer method)": [[842, "sklearn.preprocessing.Binarizer.set_output"]], "set_params() (sklearn.preprocessing.binarizer method)": [[842, "sklearn.preprocessing.Binarizer.set_params"]], "transform() (sklearn.preprocessing.binarizer method)": [[842, "sklearn.preprocessing.Binarizer.transform"]], "functiontransformer (class in sklearn.preprocessing)": [[843, "sklearn.preprocessing.FunctionTransformer"]], "fit() (sklearn.preprocessing.functiontransformer method)": [[843, "sklearn.preprocessing.FunctionTransformer.fit"]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[843, "sklearn.preprocessing.FunctionTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[843, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[843, "sklearn.preprocessing.FunctionTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[843, "sklearn.preprocessing.FunctionTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[843, "sklearn.preprocessing.FunctionTransformer.set_output"]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[843, "sklearn.preprocessing.FunctionTransformer.set_params"]], "transform() (sklearn.preprocessing.functiontransformer method)": [[843, "sklearn.preprocessing.FunctionTransformer.transform"]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[844, "sklearn.preprocessing.KBinsDiscretizer"]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[844, "sklearn.preprocessing.KBinsDiscretizer.fit"]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[844, "sklearn.preprocessing.KBinsDiscretizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[844, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[844, "sklearn.preprocessing.KBinsDiscretizer.get_params"]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[844, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform"]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[844, "sklearn.preprocessing.KBinsDiscretizer.set_output"]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[844, "sklearn.preprocessing.KBinsDiscretizer.set_params"]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[844, "sklearn.preprocessing.KBinsDiscretizer.transform"]], "kernelcenterer (class in sklearn.preprocessing)": [[845, "sklearn.preprocessing.KernelCenterer"]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[845, "sklearn.preprocessing.KernelCenterer.fit"]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[845, "sklearn.preprocessing.KernelCenterer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[845, "sklearn.preprocessing.KernelCenterer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[845, "sklearn.preprocessing.KernelCenterer.get_params"]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[845, "sklearn.preprocessing.KernelCenterer.set_output"]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[845, "sklearn.preprocessing.KernelCenterer.set_params"]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[845, "sklearn.preprocessing.KernelCenterer.transform"]], "labelbinarizer (class in sklearn.preprocessing)": [[846, "sklearn.preprocessing.LabelBinarizer"]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[846, "sklearn.preprocessing.LabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[846, "sklearn.preprocessing.LabelBinarizer.fit_transform"]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[846, "sklearn.preprocessing.LabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[846, "sklearn.preprocessing.LabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[846, "sklearn.preprocessing.LabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[846, "sklearn.preprocessing.LabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[846, "sklearn.preprocessing.LabelBinarizer.transform"]], "labelencoder (class in sklearn.preprocessing)": [[847, "sklearn.preprocessing.LabelEncoder"]], "fit() (sklearn.preprocessing.labelencoder method)": [[847, "sklearn.preprocessing.LabelEncoder.fit"]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[847, "sklearn.preprocessing.LabelEncoder.fit_transform"]], "get_params() (sklearn.preprocessing.labelencoder method)": [[847, "sklearn.preprocessing.LabelEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[847, "sklearn.preprocessing.LabelEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.labelencoder method)": [[847, "sklearn.preprocessing.LabelEncoder.set_output"]], "set_params() (sklearn.preprocessing.labelencoder method)": [[847, "sklearn.preprocessing.LabelEncoder.set_params"]], "transform() (sklearn.preprocessing.labelencoder method)": [[847, "sklearn.preprocessing.LabelEncoder.transform"]], "maxabsscaler (class in sklearn.preprocessing)": [[848, "sklearn.preprocessing.MaxAbsScaler"]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[848, "sklearn.preprocessing.MaxAbsScaler.fit"]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[848, "sklearn.preprocessing.MaxAbsScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[848, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[848, "sklearn.preprocessing.MaxAbsScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[848, "sklearn.preprocessing.MaxAbsScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[848, "sklearn.preprocessing.MaxAbsScaler.partial_fit"]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[848, "sklearn.preprocessing.MaxAbsScaler.set_output"]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[848, "sklearn.preprocessing.MaxAbsScaler.set_params"]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[848, "sklearn.preprocessing.MaxAbsScaler.transform"]], "minmaxscaler (class in sklearn.preprocessing)": [[849, "sklearn.preprocessing.MinMaxScaler"]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[849, "sklearn.preprocessing.MinMaxScaler.fit"]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[849, "sklearn.preprocessing.MinMaxScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[849, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[849, "sklearn.preprocessing.MinMaxScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[849, "sklearn.preprocessing.MinMaxScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[849, "sklearn.preprocessing.MinMaxScaler.partial_fit"]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[849, "sklearn.preprocessing.MinMaxScaler.set_output"]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[849, "sklearn.preprocessing.MinMaxScaler.set_params"]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[849, "sklearn.preprocessing.MinMaxScaler.transform"]], "multilabelbinarizer (class in sklearn.preprocessing)": [[850, "sklearn.preprocessing.MultiLabelBinarizer"]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[850, "sklearn.preprocessing.MultiLabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[850, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform"]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[850, "sklearn.preprocessing.MultiLabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[850, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[850, "sklearn.preprocessing.MultiLabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[850, "sklearn.preprocessing.MultiLabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[850, "sklearn.preprocessing.MultiLabelBinarizer.transform"]], "normalizer (class in sklearn.preprocessing)": [[851, "sklearn.preprocessing.Normalizer"]], "fit() (sklearn.preprocessing.normalizer method)": [[851, "sklearn.preprocessing.Normalizer.fit"]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[851, "sklearn.preprocessing.Normalizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[851, "sklearn.preprocessing.Normalizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.normalizer method)": [[851, "sklearn.preprocessing.Normalizer.get_params"]], "set_output() (sklearn.preprocessing.normalizer method)": [[851, "sklearn.preprocessing.Normalizer.set_output"]], "set_params() (sklearn.preprocessing.normalizer method)": [[851, "sklearn.preprocessing.Normalizer.set_params"]], "transform() (sklearn.preprocessing.normalizer method)": [[851, "sklearn.preprocessing.Normalizer.transform"]], "onehotencoder (class in sklearn.preprocessing)": [[852, "sklearn.preprocessing.OneHotEncoder"]], "fit() (sklearn.preprocessing.onehotencoder method)": [[852, "sklearn.preprocessing.OneHotEncoder.fit"]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[852, "sklearn.preprocessing.OneHotEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[852, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out"]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[852, "sklearn.preprocessing.OneHotEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[852, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[852, "sklearn.preprocessing.OneHotEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[852, "sklearn.preprocessing.OneHotEncoder.set_output"]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[852, "sklearn.preprocessing.OneHotEncoder.set_params"]], "transform() (sklearn.preprocessing.onehotencoder method)": [[852, "sklearn.preprocessing.OneHotEncoder.transform"]], "ordinalencoder (class in sklearn.preprocessing)": [[853, "sklearn.preprocessing.OrdinalEncoder"]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[853, "sklearn.preprocessing.OrdinalEncoder.fit"]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[853, "sklearn.preprocessing.OrdinalEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[853, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out"]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[853, "sklearn.preprocessing.OrdinalEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[853, "sklearn.preprocessing.OrdinalEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[853, "sklearn.preprocessing.OrdinalEncoder.set_output"]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[853, "sklearn.preprocessing.OrdinalEncoder.set_params"]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[853, "sklearn.preprocessing.OrdinalEncoder.transform"]], "polynomialfeatures (class in sklearn.preprocessing)": [[854, "sklearn.preprocessing.PolynomialFeatures"]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[854, "sklearn.preprocessing.PolynomialFeatures.fit"]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[854, "sklearn.preprocessing.PolynomialFeatures.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[854, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out"]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[854, "sklearn.preprocessing.PolynomialFeatures.get_params"]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[854, "sklearn.preprocessing.PolynomialFeatures.powers_"]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[854, "sklearn.preprocessing.PolynomialFeatures.set_output"]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[854, "sklearn.preprocessing.PolynomialFeatures.set_params"]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[854, "sklearn.preprocessing.PolynomialFeatures.transform"]], "powertransformer (class in sklearn.preprocessing)": [[855, "sklearn.preprocessing.PowerTransformer"]], "fit() (sklearn.preprocessing.powertransformer method)": [[855, "sklearn.preprocessing.PowerTransformer.fit"]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[855, "sklearn.preprocessing.PowerTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[855, "sklearn.preprocessing.PowerTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.powertransformer method)": [[855, "sklearn.preprocessing.PowerTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[855, "sklearn.preprocessing.PowerTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.powertransformer method)": [[855, "sklearn.preprocessing.PowerTransformer.set_output"]], "set_params() (sklearn.preprocessing.powertransformer method)": [[855, "sklearn.preprocessing.PowerTransformer.set_params"]], "transform() (sklearn.preprocessing.powertransformer method)": [[855, "sklearn.preprocessing.PowerTransformer.transform"]], "quantiletransformer (class in sklearn.preprocessing)": [[856, "sklearn.preprocessing.QuantileTransformer"]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[856, "sklearn.preprocessing.QuantileTransformer.fit"]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[856, "sklearn.preprocessing.QuantileTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[856, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[856, "sklearn.preprocessing.QuantileTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[856, "sklearn.preprocessing.QuantileTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[856, "sklearn.preprocessing.QuantileTransformer.set_output"]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[856, "sklearn.preprocessing.QuantileTransformer.set_params"]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[856, "sklearn.preprocessing.QuantileTransformer.transform"]], "robustscaler (class in sklearn.preprocessing)": [[857, "sklearn.preprocessing.RobustScaler"]], "fit() (sklearn.preprocessing.robustscaler method)": [[857, "sklearn.preprocessing.RobustScaler.fit"]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[857, "sklearn.preprocessing.RobustScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[857, "sklearn.preprocessing.RobustScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.robustscaler method)": [[857, "sklearn.preprocessing.RobustScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[857, "sklearn.preprocessing.RobustScaler.inverse_transform"]], "set_output() (sklearn.preprocessing.robustscaler method)": [[857, "sklearn.preprocessing.RobustScaler.set_output"]], "set_params() (sklearn.preprocessing.robustscaler method)": [[857, "sklearn.preprocessing.RobustScaler.set_params"]], "transform() (sklearn.preprocessing.robustscaler method)": [[857, "sklearn.preprocessing.RobustScaler.transform"]], "splinetransformer (class in sklearn.preprocessing)": [[858, "sklearn.preprocessing.SplineTransformer"]], "fit() (sklearn.preprocessing.splinetransformer method)": [[858, "sklearn.preprocessing.SplineTransformer.fit"]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[858, "sklearn.preprocessing.SplineTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[858, "sklearn.preprocessing.SplineTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[858, "sklearn.preprocessing.SplineTransformer.get_params"]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[858, "sklearn.preprocessing.SplineTransformer.set_output"]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[858, "sklearn.preprocessing.SplineTransformer.set_params"]], "transform() (sklearn.preprocessing.splinetransformer method)": [[858, "sklearn.preprocessing.SplineTransformer.transform"]], "standardscaler (class in sklearn.preprocessing)": [[859, "sklearn.preprocessing.StandardScaler"]], "fit() (sklearn.preprocessing.standardscaler method)": [[859, "sklearn.preprocessing.StandardScaler.fit"]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[859, "sklearn.preprocessing.StandardScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[859, "sklearn.preprocessing.StandardScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.standardscaler method)": [[859, "sklearn.preprocessing.StandardScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[859, "sklearn.preprocessing.StandardScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[859, "sklearn.preprocessing.StandardScaler.partial_fit"]], "set_output() (sklearn.preprocessing.standardscaler method)": [[859, "sklearn.preprocessing.StandardScaler.set_output"]], "set_params() (sklearn.preprocessing.standardscaler method)": [[859, "sklearn.preprocessing.StandardScaler.set_params"]], "transform() (sklearn.preprocessing.standardscaler method)": [[859, "sklearn.preprocessing.StandardScaler.transform"]], "add_dummy_feature() (in module sklearn.preprocessing)": [[860, "sklearn.preprocessing.add_dummy_feature"]], "binarize() (in module sklearn.preprocessing)": [[861, "sklearn.preprocessing.binarize"]], "label_binarize() (in module sklearn.preprocessing)": [[862, "sklearn.preprocessing.label_binarize"]], "maxabs_scale() (in module sklearn.preprocessing)": [[863, "sklearn.preprocessing.maxabs_scale"]], "minmax_scale() (in module sklearn.preprocessing)": [[864, "sklearn.preprocessing.minmax_scale"]], "normalize() (in module sklearn.preprocessing)": [[865, "sklearn.preprocessing.normalize"]], "power_transform() (in module sklearn.preprocessing)": [[866, "sklearn.preprocessing.power_transform"]], "quantile_transform() (in module sklearn.preprocessing)": [[867, "sklearn.preprocessing.quantile_transform"]], "robust_scale() (in module sklearn.preprocessing)": [[868, "sklearn.preprocessing.robust_scale"]], "scale() (in module sklearn.preprocessing)": [[869, "sklearn.preprocessing.scale"]], "gaussianrandomprojection (class in sklearn.random_projection)": [[870, "sklearn.random_projection.GaussianRandomProjection"]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[870, "sklearn.random_projection.GaussianRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[870, "sklearn.random_projection.GaussianRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[870, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out"]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[870, "sklearn.random_projection.GaussianRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[870, "sklearn.random_projection.GaussianRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[870, "sklearn.random_projection.GaussianRandomProjection.set_output"]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[870, "sklearn.random_projection.GaussianRandomProjection.set_params"]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[870, "sklearn.random_projection.GaussianRandomProjection.transform"]], "sparserandomprojection (class in sklearn.random_projection)": [[871, "sklearn.random_projection.SparseRandomProjection"]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[871, "sklearn.random_projection.SparseRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[871, "sklearn.random_projection.SparseRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[871, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out"]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[871, "sklearn.random_projection.SparseRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[871, "sklearn.random_projection.SparseRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[871, "sklearn.random_projection.SparseRandomProjection.set_output"]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[871, "sklearn.random_projection.SparseRandomProjection.set_params"]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[871, "sklearn.random_projection.SparseRandomProjection.transform"]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[872, "sklearn.random_projection.johnson_lindenstrauss_min_dim"]], "labelpropagation (class in sklearn.semi_supervised)": [[873, "sklearn.semi_supervised.LabelPropagation"]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[873, "sklearn.semi_supervised.LabelPropagation.fit"]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[873, "sklearn.semi_supervised.LabelPropagation.get_params"]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[873, "sklearn.semi_supervised.LabelPropagation.predict"]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[873, "sklearn.semi_supervised.LabelPropagation.predict_proba"]], "score() (sklearn.semi_supervised.labelpropagation method)": [[873, "sklearn.semi_supervised.LabelPropagation.score"]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[873, "sklearn.semi_supervised.LabelPropagation.set_params"]], "labelspreading (class in sklearn.semi_supervised)": [[874, "sklearn.semi_supervised.LabelSpreading"]], "fit() (sklearn.semi_supervised.labelspreading method)": [[874, "sklearn.semi_supervised.LabelSpreading.fit"]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[874, "sklearn.semi_supervised.LabelSpreading.get_params"]], "predict() (sklearn.semi_supervised.labelspreading method)": [[874, "sklearn.semi_supervised.LabelSpreading.predict"]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[874, "sklearn.semi_supervised.LabelSpreading.predict_proba"]], "score() (sklearn.semi_supervised.labelspreading method)": [[874, "sklearn.semi_supervised.LabelSpreading.score"]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[874, "sklearn.semi_supervised.LabelSpreading.set_params"]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[875, "sklearn.semi_supervised.SelfTrainingClassifier"]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[875, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function"]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[875, "sklearn.semi_supervised.SelfTrainingClassifier.fit"]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[875, "sklearn.semi_supervised.SelfTrainingClassifier.get_params"]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[875, "sklearn.semi_supervised.SelfTrainingClassifier.predict"]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[875, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba"]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[875, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba"]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[875, "sklearn.semi_supervised.SelfTrainingClassifier.score"]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[875, "sklearn.semi_supervised.SelfTrainingClassifier.set_params"]], "set_config() (in module sklearn)": [[876, "sklearn.set_config"]], "show_versions() (in module sklearn)": [[877, "sklearn.show_versions"]], "linearsvc (class in sklearn.svm)": [[878, "sklearn.svm.LinearSVC"]], "decision_function() (sklearn.svm.linearsvc method)": [[878, "sklearn.svm.LinearSVC.decision_function"]], "densify() (sklearn.svm.linearsvc method)": [[878, "sklearn.svm.LinearSVC.densify"]], "fit() (sklearn.svm.linearsvc method)": [[878, "sklearn.svm.LinearSVC.fit"]], "get_params() (sklearn.svm.linearsvc method)": [[878, "sklearn.svm.LinearSVC.get_params"]], "predict() (sklearn.svm.linearsvc method)": [[878, "sklearn.svm.LinearSVC.predict"]], "score() (sklearn.svm.linearsvc method)": [[878, "sklearn.svm.LinearSVC.score"]], "set_params() (sklearn.svm.linearsvc method)": [[878, "sklearn.svm.LinearSVC.set_params"]], "sparsify() (sklearn.svm.linearsvc method)": [[878, "sklearn.svm.LinearSVC.sparsify"]], "linearsvr (class in sklearn.svm)": [[879, "sklearn.svm.LinearSVR"]], "fit() (sklearn.svm.linearsvr method)": [[879, "sklearn.svm.LinearSVR.fit"]], "get_params() (sklearn.svm.linearsvr method)": [[879, "sklearn.svm.LinearSVR.get_params"]], "predict() (sklearn.svm.linearsvr method)": [[879, "sklearn.svm.LinearSVR.predict"]], "score() (sklearn.svm.linearsvr method)": [[879, "sklearn.svm.LinearSVR.score"]], "set_params() (sklearn.svm.linearsvr method)": [[879, "sklearn.svm.LinearSVR.set_params"]], "nusvc (class in sklearn.svm)": [[880, "sklearn.svm.NuSVC"]], "coef_ (sklearn.svm.nusvc property)": [[880, "sklearn.svm.NuSVC.coef_"]], "decision_function() (sklearn.svm.nusvc method)": [[880, "sklearn.svm.NuSVC.decision_function"]], "fit() (sklearn.svm.nusvc method)": [[880, "sklearn.svm.NuSVC.fit"]], "get_params() (sklearn.svm.nusvc method)": [[880, "sklearn.svm.NuSVC.get_params"]], "n_support_ (sklearn.svm.nusvc property)": [[880, "sklearn.svm.NuSVC.n_support_"]], "predict() (sklearn.svm.nusvc method)": [[880, "sklearn.svm.NuSVC.predict"]], "predict_log_proba() (sklearn.svm.nusvc method)": [[880, "sklearn.svm.NuSVC.predict_log_proba"]], "predict_proba() (sklearn.svm.nusvc method)": [[880, "sklearn.svm.NuSVC.predict_proba"]], "proba_ (sklearn.svm.nusvc property)": [[880, "sklearn.svm.NuSVC.probA_"]], "probb_ (sklearn.svm.nusvc property)": [[880, "sklearn.svm.NuSVC.probB_"]], "score() (sklearn.svm.nusvc method)": [[880, "sklearn.svm.NuSVC.score"]], "set_params() (sklearn.svm.nusvc method)": [[880, "sklearn.svm.NuSVC.set_params"]], "nusvr (class in sklearn.svm)": [[881, "sklearn.svm.NuSVR"]], "coef_ (sklearn.svm.nusvr property)": [[881, "sklearn.svm.NuSVR.coef_"]], "fit() (sklearn.svm.nusvr method)": [[881, "sklearn.svm.NuSVR.fit"]], "get_params() (sklearn.svm.nusvr method)": [[881, "sklearn.svm.NuSVR.get_params"]], "n_support_ (sklearn.svm.nusvr property)": [[881, "sklearn.svm.NuSVR.n_support_"]], "predict() (sklearn.svm.nusvr method)": [[881, "sklearn.svm.NuSVR.predict"]], "score() (sklearn.svm.nusvr method)": [[881, "sklearn.svm.NuSVR.score"]], "set_params() (sklearn.svm.nusvr method)": [[881, "sklearn.svm.NuSVR.set_params"]], "oneclasssvm (class in sklearn.svm)": [[882, "sklearn.svm.OneClassSVM"]], "coef_ (sklearn.svm.oneclasssvm property)": [[882, "sklearn.svm.OneClassSVM.coef_"]], "decision_function() (sklearn.svm.oneclasssvm method)": [[882, "sklearn.svm.OneClassSVM.decision_function"]], "fit() (sklearn.svm.oneclasssvm method)": [[882, "sklearn.svm.OneClassSVM.fit"]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[882, "sklearn.svm.OneClassSVM.fit_predict"]], "get_params() (sklearn.svm.oneclasssvm method)": [[882, "sklearn.svm.OneClassSVM.get_params"]], "n_support_ (sklearn.svm.oneclasssvm property)": [[882, "sklearn.svm.OneClassSVM.n_support_"]], "predict() (sklearn.svm.oneclasssvm method)": [[882, "sklearn.svm.OneClassSVM.predict"]], "score_samples() (sklearn.svm.oneclasssvm method)": [[882, "sklearn.svm.OneClassSVM.score_samples"]], "set_params() (sklearn.svm.oneclasssvm method)": [[882, "sklearn.svm.OneClassSVM.set_params"]], "svc (class in sklearn.svm)": [[883, "sklearn.svm.SVC"]], "coef_ (sklearn.svm.svc property)": [[883, "sklearn.svm.SVC.coef_"]], "decision_function() (sklearn.svm.svc method)": [[883, "sklearn.svm.SVC.decision_function"]], "fit() (sklearn.svm.svc method)": [[883, "sklearn.svm.SVC.fit"]], "get_params() (sklearn.svm.svc method)": [[883, "sklearn.svm.SVC.get_params"]], "n_support_ (sklearn.svm.svc property)": [[883, "sklearn.svm.SVC.n_support_"]], "predict() (sklearn.svm.svc method)": [[883, "sklearn.svm.SVC.predict"]], "predict_log_proba() (sklearn.svm.svc method)": [[883, "sklearn.svm.SVC.predict_log_proba"]], "predict_proba() (sklearn.svm.svc method)": [[883, "sklearn.svm.SVC.predict_proba"]], "proba_ (sklearn.svm.svc property)": [[883, "sklearn.svm.SVC.probA_"]], "probb_ (sklearn.svm.svc property)": [[883, "sklearn.svm.SVC.probB_"]], "score() (sklearn.svm.svc method)": [[883, "sklearn.svm.SVC.score"]], "set_params() (sklearn.svm.svc method)": [[883, "sklearn.svm.SVC.set_params"]], "svr (class in sklearn.svm)": [[884, "sklearn.svm.SVR"]], "coef_ (sklearn.svm.svr property)": [[884, "sklearn.svm.SVR.coef_"]], "fit() (sklearn.svm.svr method)": [[884, "sklearn.svm.SVR.fit"]], "get_params() (sklearn.svm.svr method)": [[884, "sklearn.svm.SVR.get_params"]], "n_support_ (sklearn.svm.svr property)": [[884, "sklearn.svm.SVR.n_support_"]], "predict() (sklearn.svm.svr method)": [[884, "sklearn.svm.SVR.predict"]], "score() (sklearn.svm.svr method)": [[884, "sklearn.svm.SVR.score"]], "set_params() (sklearn.svm.svr method)": [[884, "sklearn.svm.SVR.set_params"]], "l1_min_c() (in module sklearn.svm)": [[885, "sklearn.svm.l1_min_c"]], "decisiontreeclassifier (class in sklearn.tree)": [[886, "sklearn.tree.DecisionTreeClassifier"]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[886, "sklearn.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[886, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[886, "sklearn.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[886, "sklearn.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[886, "sklearn.tree.DecisionTreeClassifier.fit"]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[886, "sklearn.tree.DecisionTreeClassifier.get_depth"]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[886, "sklearn.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[886, "sklearn.tree.DecisionTreeClassifier.get_params"]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[886, "sklearn.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[886, "sklearn.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[886, "sklearn.tree.DecisionTreeClassifier.predict_proba"]], "score() (sklearn.tree.decisiontreeclassifier method)": [[886, "sklearn.tree.DecisionTreeClassifier.score"]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[886, "sklearn.tree.DecisionTreeClassifier.set_params"]], "decisiontreeregressor (class in sklearn.tree)": [[887, "sklearn.tree.DecisionTreeRegressor"]], "apply() (sklearn.tree.decisiontreeregressor method)": [[887, "sklearn.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[887, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[887, "sklearn.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[887, "sklearn.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.decisiontreeregressor method)": [[887, "sklearn.tree.DecisionTreeRegressor.fit"]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[887, "sklearn.tree.DecisionTreeRegressor.get_depth"]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[887, "sklearn.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[887, "sklearn.tree.DecisionTreeRegressor.get_params"]], "predict() (sklearn.tree.decisiontreeregressor method)": [[887, "sklearn.tree.DecisionTreeRegressor.predict"]], "score() (sklearn.tree.decisiontreeregressor method)": [[887, "sklearn.tree.DecisionTreeRegressor.score"]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[887, "sklearn.tree.DecisionTreeRegressor.set_params"]], "extratreeclassifier (class in sklearn.tree)": [[888, "sklearn.tree.ExtraTreeClassifier"]], "apply() (sklearn.tree.extratreeclassifier method)": [[888, "sklearn.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[888, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[888, "sklearn.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[888, "sklearn.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.extratreeclassifier method)": [[888, "sklearn.tree.ExtraTreeClassifier.fit"]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[888, "sklearn.tree.ExtraTreeClassifier.get_depth"]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[888, "sklearn.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.extratreeclassifier method)": [[888, "sklearn.tree.ExtraTreeClassifier.get_params"]], "predict() (sklearn.tree.extratreeclassifier method)": [[888, "sklearn.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[888, "sklearn.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[888, "sklearn.tree.ExtraTreeClassifier.predict_proba"]], "score() (sklearn.tree.extratreeclassifier method)": [[888, "sklearn.tree.ExtraTreeClassifier.score"]], "set_params() (sklearn.tree.extratreeclassifier method)": [[888, "sklearn.tree.ExtraTreeClassifier.set_params"]], "extratreeregressor (class in sklearn.tree)": [[889, "sklearn.tree.ExtraTreeRegressor"]], "apply() (sklearn.tree.extratreeregressor method)": [[889, "sklearn.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[889, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeregressor method)": [[889, "sklearn.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[889, "sklearn.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.extratreeregressor method)": [[889, "sklearn.tree.ExtraTreeRegressor.fit"]], "get_depth() (sklearn.tree.extratreeregressor method)": [[889, "sklearn.tree.ExtraTreeRegressor.get_depth"]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[889, "sklearn.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.extratreeregressor method)": [[889, "sklearn.tree.ExtraTreeRegressor.get_params"]], "predict() (sklearn.tree.extratreeregressor method)": [[889, "sklearn.tree.ExtraTreeRegressor.predict"]], "score() (sklearn.tree.extratreeregressor method)": [[889, "sklearn.tree.ExtraTreeRegressor.score"]], "set_params() (sklearn.tree.extratreeregressor method)": [[889, "sklearn.tree.ExtraTreeRegressor.set_params"]], "export_graphviz() (in module sklearn.tree)": [[890, "sklearn.tree.export_graphviz"]], "export_text() (in module sklearn.tree)": [[891, "sklearn.tree.export_text"]], "plot_tree() (in module sklearn.tree)": [[892, "sklearn.tree.plot_tree"]], "bunch (class in sklearn.utils)": [[893, "sklearn.utils.Bunch"]], "clear() (sklearn.utils.bunch method)": [[893, "sklearn.utils.Bunch.clear"]], "copy() (sklearn.utils.bunch method)": [[893, "sklearn.utils.Bunch.copy"]], "fromkeys() (sklearn.utils.bunch method)": [[893, "sklearn.utils.Bunch.fromkeys"]], "get() (sklearn.utils.bunch method)": [[893, "sklearn.utils.Bunch.get"]], "items() (sklearn.utils.bunch method)": [[893, "sklearn.utils.Bunch.items"]], "keys() (sklearn.utils.bunch method)": [[893, "sklearn.utils.Bunch.keys"]], "pop() (sklearn.utils.bunch method)": [[893, "sklearn.utils.Bunch.pop"]], "popitem() (sklearn.utils.bunch method)": [[893, "sklearn.utils.Bunch.popitem"]], "setdefault() (sklearn.utils.bunch method)": [[893, "sklearn.utils.Bunch.setdefault"]], "update() (sklearn.utils.bunch method)": [[893, "sklearn.utils.Bunch.update"]], "values() (sklearn.utils.bunch method)": [[893, "sklearn.utils.Bunch.values"]], "_safe_indexing() (in module sklearn.utils)": [[894, "sklearn.utils._safe_indexing"]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[895, "sklearn.utils.arrayfuncs.min_pos"]], "as_float_array() (in module sklearn.utils)": [[896, "sklearn.utils.as_float_array"]], "assert_all_finite() (in module sklearn.utils)": [[897, "sklearn.utils.assert_all_finite"]], "check_x_y() (in module sklearn.utils)": [[898, "sklearn.utils.check_X_y"]], "check_array() (in module sklearn.utils)": [[899, "sklearn.utils.check_array"]], "check_consistent_length() (in module sklearn.utils)": [[900, "sklearn.utils.check_consistent_length"]], "check_random_state() (in module sklearn.utils)": [[901, "sklearn.utils.check_random_state"]], "check_scalar() (in module sklearn.utils)": [[902, "sklearn.utils.check_scalar"]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[903, "sklearn.utils.class_weight.compute_class_weight"]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[904, "sklearn.utils.class_weight.compute_sample_weight"]], "deprecated() (in module sklearn.utils)": [[905, "sklearn.utils.deprecated"]], "all_displays() (in module sklearn.utils.discovery)": [[906, "sklearn.utils.discovery.all_displays"]], "all_estimators() (in module sklearn.utils.discovery)": [[907, "sklearn.utils.discovery.all_estimators"]], "all_functions() (in module sklearn.utils.discovery)": [[908, "sklearn.utils.discovery.all_functions"]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[909, "sklearn.utils.estimator_checks.check_estimator"]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[910, "sklearn.utils.estimator_checks.parametrize_with_checks"]], "estimator_html_repr() (in module sklearn.utils)": [[911, "sklearn.utils.estimator_html_repr"]], "density() (in module sklearn.utils.extmath)": [[912, "sklearn.utils.extmath.density"]], "fast_logdet() (in module sklearn.utils.extmath)": [[913, "sklearn.utils.extmath.fast_logdet"]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[914, "sklearn.utils.extmath.randomized_range_finder"]], "randomized_svd() (in module sklearn.utils.extmath)": [[915, "sklearn.utils.extmath.randomized_svd"]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[916, "sklearn.utils.extmath.safe_sparse_dot"]], "weighted_mode() (in module sklearn.utils.extmath)": [[917, "sklearn.utils.extmath.weighted_mode"]], "gen_batches() (in module sklearn.utils)": [[918, "sklearn.utils.gen_batches"]], "gen_even_slices() (in module sklearn.utils)": [[919, "sklearn.utils.gen_even_slices"]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[920, "sklearn.utils.graph.single_source_shortest_path_length"]], "indexable() (in module sklearn.utils)": [[921, "sklearn.utils.indexable"]], "available_if() (in module sklearn.utils.metaestimators)": [[922, "sklearn.utils.metaestimators.available_if"]], "if_delegate_has_method() (in module sklearn.utils.metaestimators)": [[923, "sklearn.utils.metaestimators.if_delegate_has_method"]], "is_multilabel() (in module sklearn.utils.multiclass)": [[924, "sklearn.utils.multiclass.is_multilabel"]], "type_of_target() (in module sklearn.utils.multiclass)": [[925, "sklearn.utils.multiclass.type_of_target"]], "unique_labels() (in module sklearn.utils.multiclass)": [[926, "sklearn.utils.multiclass.unique_labels"]], "murmurhash3_32() (in module sklearn.utils)": [[927, "sklearn.utils.murmurhash3_32"]], "parallel (class in sklearn.utils.parallel)": [[928, "sklearn.utils.parallel.Parallel"]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[928, "sklearn.utils.parallel.Parallel.dispatch_next"]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[928, "sklearn.utils.parallel.Parallel.dispatch_one_batch"]], "format() (sklearn.utils.parallel.parallel method)": [[928, "sklearn.utils.parallel.Parallel.format"]], "print_progress() (sklearn.utils.parallel.parallel method)": [[928, "sklearn.utils.parallel.Parallel.print_progress"]], "delayed() (in module sklearn.utils.parallel)": [[929, "sklearn.utils.parallel.delayed"]], "parallel_backend() (in module sklearn.utils)": [[930, "sklearn.utils.parallel_backend"]], "sample_without_replacement() (in module sklearn.utils.random)": [[931, "sklearn.utils.random.sample_without_replacement"]], "register_parallel_backend() (in module sklearn.utils)": [[932, "sklearn.utils.register_parallel_backend"]], "resample() (in module sklearn.utils)": [[933, "sklearn.utils.resample"]], "safe_mask() (in module sklearn.utils)": [[934, "sklearn.utils.safe_mask"]], "safe_sqr() (in module sklearn.utils)": [[935, "sklearn.utils.safe_sqr"]], "shuffle() (in module sklearn.utils)": [[936, "sklearn.utils.shuffle"]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[937, "sklearn.utils.sparsefuncs.incr_mean_variance_axis"]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[938, "sklearn.utils.sparsefuncs.inplace_column_scale"]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[939, "sklearn.utils.sparsefuncs.inplace_csr_column_scale"]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[940, "sklearn.utils.sparsefuncs.inplace_row_scale"]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[941, "sklearn.utils.sparsefuncs.inplace_swap_column"]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[942, "sklearn.utils.sparsefuncs.inplace_swap_row"]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[943, "sklearn.utils.sparsefuncs.mean_variance_axis"]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[944, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1"]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[945, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2"]], "check_is_fitted() (in module sklearn.utils.validation)": [[946, "sklearn.utils.validation.check_is_fitted"]], "check_memory() (in module sklearn.utils.validation)": [[947, "sklearn.utils.validation.check_memory"]], "check_symmetric() (in module sklearn.utils.validation)": [[948, "sklearn.utils.validation.check_symmetric"]], "column_or_1d() (in module sklearn.utils.validation)": [[949, "sklearn.utils.validation.column_or_1d"]], "has_fit_parameter() (in module sklearn.utils.validation)": [[950, "sklearn.utils.validation.has_fit_parameter"]]}})