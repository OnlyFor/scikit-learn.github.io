Search.setIndex({"docnames": ["about", "authors", "authors_emeritus", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_time_series_lagged_features", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/sg_execution_times", "auto_examples/applications/svm_gui", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/bicluster/sg_execution_times", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/calibration/sg_execution_times", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/classification/sg_execution_times", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/cluster/sg_execution_times", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/compose/sg_execution_times", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/covariance/sg_execution_times", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/cross_decomposition/sg_execution_times", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/datasets/sg_execution_times", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_3d", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/decomposition/sg_execution_times", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sg_execution_times", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/ensemble/sg_execution_times", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_cv_digits", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/exercises/sg_execution_times", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/feature_selection/sg_execution_times", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/gaussian_process/sg_execution_times", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/impute/sg_execution_times", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/inspection/sg_execution_times", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/kernel_approximation/sg_execution_times", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/linear_model/sg_execution_times", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/manifold/sg_execution_times", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/miscellaneous/sg_execution_times", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/mixture/sg_execution_times", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/model_selection/sg_execution_times", "auto_examples/multiclass/index", "auto_examples/multiclass/plot_multiclass_overview", "auto_examples/multiclass/sg_execution_times", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/multioutput/sg_execution_times", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neighbors/sg_execution_times", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/neural_networks/sg_execution_times", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/preprocessing/sg_execution_times", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/sg_execution_times", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/semi_supervised/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_nonlinear", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/svm/sg_execution_times", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/text/sg_execution_times", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "auto_examples/tree/sg_execution_times", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contents", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "documentation_team", "faq", "getting_started", "glossary", "governance", "inspection", "install", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classes", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.root_mean_squared_error", "modules/generated/sklearn.metrics.root_mean_squared_log_error", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "preface", "presentations", "related_projects", "roadmap", "sg_execution_times", "supervised_learning", "support", "testimonials/testimonials", "tune_toc", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4"], "filenames": ["about.rst", "authors.rst", "authors_emeritus.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_time_series_lagged_features.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/applications/svm_gui.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/bicluster/sg_execution_times.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/classification/sg_execution_times.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/cluster/sg_execution_times.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/compose/sg_execution_times.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/covariance/sg_execution_times.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/cross_decomposition/sg_execution_times.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/datasets/sg_execution_times.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_3d.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/decomposition/sg_execution_times.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sg_execution_times.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/ensemble/sg_execution_times.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_cv_digits.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/exercises/sg_execution_times.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/gaussian_process/sg_execution_times.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/impute/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/inspection/sg_execution_times.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/kernel_approximation/sg_execution_times.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/linear_model/sg_execution_times.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/manifold/sg_execution_times.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/miscellaneous/sg_execution_times.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/mixture/sg_execution_times.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/model_selection/sg_execution_times.rst", "auto_examples/multiclass/index.rst", "auto_examples/multiclass/plot_multiclass_overview.rst", "auto_examples/multiclass/sg_execution_times.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/multioutput/sg_execution_times.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neighbors/sg_execution_times.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/neural_networks/sg_execution_times.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/preprocessing/sg_execution_times.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/sg_execution_times.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/semi_supervised/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_nonlinear.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/svm/sg_execution_times.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/text/sg_execution_times.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "auto_examples/tree/sg_execution_times.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contents.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "documentation_team.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "inspection.rst", "install.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classes.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.root_mean_squared_error.rst", "modules/generated/sklearn.metrics.root_mean_squared_log_error.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "preface.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "sg_execution_times.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tune_toc.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst"], "titles": ["About us", "&lt;no title&gt;", "&lt;no title&gt;", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Lagged features for time series forecasting", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Computation times", "Libsvm GUI", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Computation times", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Computation times", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Computation times", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Computation times", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Computation times", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Computation times", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Computation times", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Computation times", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "Principal components analysis (PCA)", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Computation times", "Developing Estimators", "Computation times", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping in Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Computation times", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Cross-validation on Digits Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Computation times", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Computation times", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)", "Ability of Gaussian process regression (GPR) to estimate data noise-level", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Computation times", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Computation times", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Computation times", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Computation times", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Computation times", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Computation times", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Computation times", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Computation times", "Model Selection", "Confusion matrix", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Computation times", "Multiclass methods", "Overview of multiclass training meta-estimators", "Computation times", "Multioutput methods", "Multilabel classification using a classifier chain", "Computation times", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Computation times", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Computation times", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Computation times", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Computation times", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Computation times", "Computation times", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "Plot classification boundaries with different SVM Kernels", "SVM Margins Example", "Non-linear SVM", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Computation times", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Computation times", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "Computation times", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "Table Of Contents", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "&lt;no title&gt;", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "API Reference", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.fastica", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.oas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BaseEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BiclusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassNamePrefixFeaturesOutMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassifierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.DensityMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.MetaEstimatorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OneToOneFeatureMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OutlierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.RegressorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.TransformerMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.clone", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibratedClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibrationDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.calibration_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AffinityPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AgglomerativeClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.Birch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.BisectingKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.DBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.FeatureAgglomeration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.HDBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.KMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MeanShift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MiniBatchKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.OPTICS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralBiclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralCoclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.affinity_propagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_xi", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.compute_optics_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.estimate_bandwidth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.k_means", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.kmeans_plusplus", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.mean_shift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.spectral_clustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.ward_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.ColumnTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.TransformedTargetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_selector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_transformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.config_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EllipticEnvelope", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.MinCovDet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.empirical_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.graphical_lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf_shrinkage", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.shrunk_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.CCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSCanonical", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.clear_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.dump_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups_vectorized", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_california_housing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_covtype", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_kddcup99", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_pairs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_people", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_olivetti_faces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_openml", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_rcv1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_species_distributions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.get_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_breast_cancer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_diabetes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_digits", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_iris", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_linnerud", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_wine", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_biclusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_blobs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_checkerboard", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_circles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_gaussian_quantiles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_hastie_10_2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_low_rank_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_moons", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_multilabel_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_s_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_coded_signal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_uncorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_swiss_roll", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.DictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FactorAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FastICA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.IncrementalPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.KernelPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.LatentDirichletAllocation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchDictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchNMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchSparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.NMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparseCoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.TruncatedSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning_online", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.non_negative_factorization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.sparse_encode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.LinearDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.QuadraticDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomTreesEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.ConvergenceWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataConversionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataDimensionalityWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.EfficiencyWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.FitFailedWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.InconsistentVersionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.NotFittedError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.UndefinedMetricWarning", "sklearn.experimental.enable_halving_search_cv", "sklearn.experimental.enable_iterative_imputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.DictVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.FeatureHasher", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.PatchExtractor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.extract_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.grid_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.img_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.reconstruct_from_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.CountVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.HashingVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.GenericUnivariateSelect", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFECV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFdr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFpr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFromModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFwe", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectKBest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectPercentile", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SequentialFeatureSelector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.VarianceThreshold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.chi2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.r_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.CompoundKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ConstantKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.DotProduct", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ExpSineSquared", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Exponentiation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Hyperparameter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Matern", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.PairwiseKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Product", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RBF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RationalQuadratic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.WhiteKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.get_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.IterativeImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.KNNImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.MissingIndicator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.SimpleImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.DecisionBoundaryDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.PartialDependenceDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.partial_dependence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.permutation_importance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.IsotonicRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.check_increasing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.isotonic_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.AdditiveChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.Nystroem", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.PolynomialCountSketch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.RBFSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.SkewedChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_ridge</span></code>.KernelRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ARDRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.BayesianRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.GammaRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.HuberRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsIC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LinearRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegressionCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuitCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveClassifier", "sklearn.linear_model.PassiveAggressiveRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Perceptron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PoissonRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.QuantileRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RANSACRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Ridge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDOneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TheilSenRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TweedieRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.enet_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lasso_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ridge_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.Isomap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.LocallyLinearEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.MDS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.SpectralEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.TSNE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.locally_linear_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.smacof", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.spectral_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.trustworthiness", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ConfusionMatrixDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DetCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DistanceMetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PrecisionRecallDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PredictionErrorDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.RocCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.auc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.balanced_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.brier_score_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.calinski_harabasz_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.check_scoring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.class_likelihood_ratios", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.classification_report", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.contingency_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.pair_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.cohen_kappa_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.completeness_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.consensus_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.coverage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_absolute_error_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_pinball_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_tweedie_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.davies_bouldin_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.dcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.det_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.explained_variance_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.f1_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fbeta_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fowlkes_mallows_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer_names", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hamming_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hinge_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_completeness_v_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.jaccard_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.log_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.matthews_corrcoef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.max_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_percentage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_gamma_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_pinball_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_poisson_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_tweedie_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.median_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.multilabel_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ndcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.normalized_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.additive_chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_similarity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.distance_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.haversine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.kernel_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.laplacian_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.linear_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.nan_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.pairwise_kernels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.polynomial_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.rbf_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.sigmoid_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin_min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_chunked", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_fscore_support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.r2_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.recall_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_auc_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.root_mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.root_mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_samples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.top_k_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.v_measure_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.zero_one_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.BayesianGaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.GaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingGridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingRandomSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.KFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LearningCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneGroupOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePGroupsOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterGrid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.PredefinedSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RandomizedSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedStratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedGroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TimeSeriesSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ValidationCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.check_cv", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_validate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.learning_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.permutation_test_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.train_test_split", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.validation_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsOneClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsRestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OutputCodeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.ClassifierChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.RegressorChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.BernoulliNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.CategoricalNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.ComplementNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.GaussianNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.MultinomialNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.BallTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KDTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KernelDensity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.LocalOutlierFactor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestCentroid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestNeighbors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NeighborhoodComponentsAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.kneighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.radius_neighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.sort_graph_by_row_values", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.BernoulliRBM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.FeatureUnion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.Pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_union", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Binarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.FunctionTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KBinsDiscretizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KernelCenterer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MaxAbsScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MinMaxScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MultiLabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Normalizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OneHotEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OrdinalEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PolynomialFeatures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PowerTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.QuantileTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.RobustScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.SplineTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.StandardScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.TargetEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.add_dummy_feature", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.label_binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.maxabs_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.minmax_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.power_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.quantile_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.robust_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.GaussianRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.SparseRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.johnson_lindenstrauss_min_dim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelSpreading", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.SelfTrainingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.set_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.show_versions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.l1_min_c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_graphviz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_text", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.plot_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.Bunch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>._safe_indexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.arrayfuncs</span></code>.min_pos", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.as_float_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.assert_all_finite", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_X_y", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_consistent_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_scalar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_class_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_sample_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.deprecated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_estimators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.check_estimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.parametrize_with_checks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.estimator_html_repr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.fast_logdet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_range_finder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_svd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.safe_sparse_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.weighted_mode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_batches", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_even_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.graph</span></code>.single_source_shortest_path_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.indexable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRequest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRouter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MethodMapping", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.get_routing_for_object", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.process_routing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.available_if", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.is_multilabel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.type_of_target", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.unique_labels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.murmurhash3_32", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.Parallel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.delayed", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.random</span></code>.sample_without_replacement", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.register_parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.resample", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_mask", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_sqr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.shuffle", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.incr_mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_csr_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_row_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_column", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_row", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_is_fitted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_memory", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.column_or_1d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.4. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.3. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "Welcome to scikit-learn", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "Computation times", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Who is using scikit-learn?", "&lt;no title&gt;", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User guide: contents", "Available documentation for Scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Version 0.12.1", "Version 0.13.1", "Version 0.14", "Version 0.15.2", "Version 0.16.1", "Version 0.17.1", "Version 0.18.2", "Version 0.19.2", "Version 0.20.4", "Version 0.21.3", "Version 0.22.2.post1", "Version 0.23.2", "Version 0.24.2", "Version 1.0.2", "Version 1.1.3", "Version 1.2.2", "Version 1.3.2", "Version 1.4.0"], "terms": {"click": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "more": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "detail": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "thi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 363, 367, 368, 369, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 397, 398, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 429, 431, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 481, 482, 483, 484, 486, 488, 489, 492, 495, 496, 497, 498, 500, 501, 502, 504, 507, 508, 514, 515, 516, 517, 518, 519, 520, 522, 523, 525, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 698, 699, 700, 701, 702, 703, 705, 706, 708, 711, 712, 713, 715, 716, 717, 719, 720, 721, 722, 724, 725, 726, 727, 728, 730, 734, 735, 736, 737, 738, 739, 740, 741, 746, 752, 753, 754, 755, 756, 757, 759, 760, 761, 763, 766, 767, 772, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 915, 916, 920, 921, 926, 927, 929, 931, 932, 937, 939, 944, 945, 946, 947, 948, 949, 951, 954, 955, 956, 958, 959, 962, 963, 972, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "wa": [0, 4, 8, 14, 17, 41, 71, 72, 81, 87, 93, 130, 133, 150, 162, 171, 177, 205, 226, 240, 253, 256, 258, 260, 262, 268, 269, 280, 303, 312, 317, 318, 322, 328, 329, 352, 354, 361, 363, 367, 376, 378, 379, 381, 385, 386, 395, 398, 399, 402, 404, 405, 408, 411, 412, 416, 420, 432, 439, 440, 441, 442, 444, 445, 446, 448, 449, 453, 456, 459, 463, 467, 468, 473, 481, 482, 483, 484, 514, 522, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 552, 553, 554, 555, 556, 557, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 649, 650, 653, 654, 655, 657, 663, 664, 684, 685, 687, 688, 691, 712, 727, 728, 766, 781, 782, 785, 795, 796, 797, 800, 801, 811, 823, 825, 837, 844, 847, 849, 852, 856, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 897, 898, 903, 904, 906, 931, 932, 955, 976, 977, 978, 987, 988, 991, 994, 998, 1001, 1004, 1008, 1015, 1023, 1024, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "start": [0, 4, 7, 10, 12, 13, 21, 27, 54, 59, 65, 68, 75, 87, 99, 118, 124, 126, 147, 150, 158, 160, 172, 177, 181, 182, 190, 201, 202, 203, 209, 219, 222, 226, 235, 237, 250, 262, 270, 285, 321, 323, 327, 352, 361, 363, 367, 368, 369, 370, 374, 381, 382, 383, 385, 386, 387, 393, 395, 398, 405, 408, 412, 413, 417, 418, 439, 441, 449, 453, 455, 537, 609, 616, 631, 644, 652, 658, 665, 666, 667, 675, 676, 677, 689, 693, 779, 780, 787, 795, 796, 797, 800, 801, 811, 842, 843, 844, 846, 848, 856, 942, 972, 977, 984, 987, 992, 993, 1002, 1009, 1013, 1015, 1023, 1024, 1034, 1036, 1039, 1041, 1043, 1044, 1045, 1046, 1047], "2007": [0, 39, 189, 376, 408, 417, 439, 451, 453, 459, 461, 565, 655, 690, 716, 732, 735, 756, 757, 793, 980, 984, 986, 988], "googl": [0, 18, 393, 408, 441, 1007, 1020, 1031], "summer": [0, 4, 13, 49, 1031], "code": [0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 363, 367, 368, 375, 379, 380, 382, 384, 385, 390, 393, 395, 396, 398, 399, 402, 404, 407, 408, 415, 416, 441, 442, 446, 448, 458, 495, 525, 529, 530, 536, 537, 541, 542, 544, 545, 547, 565, 571, 580, 581, 584, 585, 645, 646, 649, 650, 651, 652, 653, 654, 655, 659, 660, 661, 662, 663, 664, 681, 682, 684, 685, 828, 829, 830, 867, 874, 956, 985, 989, 998, 1000, 1002, 1003, 1008, 1009, 1010, 1012, 1013, 1016, 1024, 1031, 1033, 1034], "david": [0, 2, 38, 58, 82, 119, 180, 185, 203, 240, 263, 265, 312, 352, 353, 354, 376, 408, 415, 418, 461, 531, 535, 566, 567, 621, 622, 627, 723, 795, 897, 978, 984, 992, 1001, 1013, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "cournapeau": [0, 2, 1031, 1034], "later": [0, 11, 54, 113, 118, 127, 153, 172, 177, 180, 240, 280, 298, 354, 363, 387, 393, 394, 398, 402, 846, 869, 870, 878, 880, 980, 998, 1019, 1024, 1034, 1037, 1039, 1043], "year": [0, 4, 13, 136, 150, 158, 170, 171, 172, 201, 202, 219, 378, 380, 385, 393, 412, 416, 799, 804, 806, 879, 984, 988, 1009, 1013, 1022], "matthieu": [0, 2, 1031, 1035, 1046], "brucher": [0, 2, 1031], "work": [0, 4, 9, 13, 18, 33, 45, 46, 49, 53, 68, 79, 116, 123, 136, 150, 159, 160, 170, 171, 172, 190, 205, 218, 237, 247, 249, 260, 280, 291, 292, 313, 318, 320, 321, 323, 341, 353, 354, 363, 368, 369, 370, 375, 376, 379, 381, 382, 383, 384, 385, 386, 387, 389, 394, 395, 396, 404, 405, 406, 408, 409, 410, 413, 415, 416, 417, 420, 421, 422, 423, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 459, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 481, 482, 483, 484, 503, 507, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 694, 707, 740, 772, 776, 777, 778, 779, 786, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 888, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 937, 941, 956, 977, 978, 980, 982, 983, 984, 985, 987, 988, 990, 991, 994, 995, 998, 1001, 1002, 1008, 1009, 1013, 1015, 1016, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "part": [0, 5, 6, 13, 32, 37, 52, 62, 69, 72, 83, 96, 99, 116, 119, 121, 122, 126, 131, 139, 140, 141, 142, 147, 158, 168, 180, 237, 239, 250, 257, 259, 276, 301, 309, 312, 314, 354, 369, 376, 378, 381, 383, 387, 389, 394, 395, 398, 404, 406, 408, 412, 413, 415, 416, 418, 445, 448, 492, 493, 494, 520, 530, 536, 541, 573, 583, 584, 585, 612, 624, 791, 865, 883, 885, 886, 887, 888, 889, 890, 891, 977, 978, 980, 985, 989, 1007, 1008, 1009, 1010, 1011, 1013, 1017, 1024, 1026, 1031, 1039, 1040, 1042, 1044, 1046], "hi": [0, 409, 988, 1024], "thesi": [0, 378, 408, 415], "In": [0, 4, 5, 7, 9, 11, 12, 13, 14, 15, 26, 27, 28, 35, 38, 40, 49, 50, 54, 56, 58, 59, 61, 67, 68, 72, 73, 75, 76, 79, 81, 82, 83, 87, 90, 91, 96, 98, 101, 104, 105, 111, 113, 116, 118, 119, 120, 121, 122, 123, 126, 128, 129, 130, 131, 133, 136, 146, 147, 149, 150, 153, 157, 158, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 185, 189, 190, 192, 196, 201, 202, 203, 204, 205, 206, 209, 218, 219, 230, 231, 232, 233, 235, 236, 237, 238, 240, 241, 242, 243, 244, 250, 252, 256, 259, 260, 262, 263, 264, 265, 267, 268, 271, 272, 274, 276, 277, 280, 285, 288, 291, 292, 294, 304, 307, 308, 309, 312, 313, 314, 317, 318, 319, 321, 322, 328, 330, 339, 343, 347, 352, 353, 354, 357, 361, 363, 367, 368, 369, 374, 375, 376, 377, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 436, 439, 440, 441, 442, 443, 446, 447, 448, 451, 461, 462, 463, 468, 471, 474, 492, 495, 502, 507, 508, 510, 522, 533, 535, 537, 539, 540, 541, 543, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 587, 590, 601, 605, 608, 609, 610, 629, 631, 632, 633, 635, 642, 643, 644, 646, 647, 648, 650, 652, 654, 657, 658, 660, 662, 664, 665, 667, 668, 673, 674, 675, 678, 679, 683, 684, 685, 695, 698, 702, 711, 717, 719, 724, 726, 727, 732, 733, 736, 738, 740, 752, 754, 755, 779, 781, 783, 786, 792, 794, 795, 796, 797, 800, 801, 803, 811, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 842, 843, 844, 846, 847, 848, 850, 851, 852, 857, 865, 867, 873, 874, 878, 879, 881, 885, 886, 888, 889, 890, 891, 892, 893, 895, 896, 897, 900, 901, 902, 905, 908, 910, 915, 919, 921, 937, 977, 978, 980, 981, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1009, 1012, 1013, 1015, 1022, 1023, 1024, 1028, 1031, 1032, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "2010": [0, 48, 68, 80, 172, 267, 268, 405, 408, 410, 412, 413, 421, 474, 535, 703, 707, 718, 719, 738, 825, 857, 858, 980, 984, 988, 992, 1002, 1007, 1031], "fabian": [0, 2, 188, 206, 223, 297, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1040], "pedregosa": [0, 2, 188, 206, 223, 297, 1031, 1032, 1033, 1034, 1035, 1037], "gael": [0, 1, 12, 33, 40, 41, 47, 53, 54, 67, 68, 83, 98, 102, 190, 191, 223, 235, 249, 1007, 1009, 1013, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "varoquaux": [0, 1, 12, 32, 33, 40, 41, 46, 47, 52, 53, 54, 67, 68, 74, 83, 90, 91, 98, 102, 103, 184, 190, 191, 198, 199, 223, 225, 233, 235, 249, 309, 343, 344, 396, 1007, 1013, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "alexandr": [0, 1, 2, 25, 26, 31, 43, 48, 55, 68, 96, 98, 104, 186, 188, 189, 190, 192, 194, 195, 230, 233, 268, 275, 297, 396, 1013, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "gramfort": [0, 1, 25, 26, 31, 43, 48, 55, 68, 96, 98, 104, 186, 188, 189, 190, 192, 194, 195, 230, 233, 268, 275, 297, 396, 1013, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "vincent": [0, 2, 48, 68, 156, 160, 1013, 1031, 1033, 1035, 1036, 1038, 1041, 1046, 1047], "michel": [0, 2, 48, 68, 1031, 1033, 1034, 1036, 1038, 1045, 1046], "inria": [0, 5, 9, 31, 38, 53, 55, 58, 76, 83, 119, 159, 180, 185, 186, 188, 192, 194, 195, 206, 223, 224, 230, 233, 240, 263, 265, 268, 275, 297, 312, 347, 352, 353, 354, 657, 1006, 1031], "took": [0, 4, 43, 270], "leadership": 0, "made": [0, 13, 71, 82, 90, 101, 113, 119, 136, 160, 171, 172, 201, 219, 240, 253, 266, 313, 318, 339, 358, 367, 376, 378, 381, 385, 395, 396, 408, 415, 416, 420, 442, 445, 446, 448, 458, 495, 502, 587, 588, 590, 629, 630, 655, 664, 684, 685, 733, 781, 797, 800, 801, 811, 815, 816, 817, 837, 840, 841, 989, 994, 1004, 1008, 1013, 1021, 1023, 1031, 1032, 1033, 1034, 1035, 1038, 1040, 1041, 1044, 1045], "first": [0, 4, 5, 7, 8, 11, 13, 18, 21, 26, 27, 31, 32, 33, 35, 40, 56, 57, 59, 62, 65, 66, 67, 68, 71, 72, 73, 76, 81, 86, 87, 90, 91, 92, 101, 105, 113, 114, 118, 120, 121, 122, 123, 125, 127, 130, 133, 134, 135, 136, 146, 147, 150, 153, 154, 155, 158, 159, 160, 161, 166, 170, 171, 172, 174, 177, 180, 182, 184, 190, 197, 198, 199, 202, 203, 209, 210, 215, 223, 226, 234, 235, 237, 238, 239, 241, 243, 244, 249, 253, 257, 262, 264, 265, 269, 271, 273, 274, 280, 283, 285, 287, 290, 294, 295, 296, 301, 303, 307, 309, 312, 313, 314, 318, 319, 327, 330, 335, 336, 339, 341, 352, 353, 354, 357, 358, 361, 363, 368, 369, 375, 376, 378, 379, 380, 383, 385, 386, 387, 389, 393, 395, 405, 406, 408, 411, 412, 413, 415, 416, 417, 418, 420, 442, 445, 446, 449, 458, 459, 463, 471, 482, 486, 487, 489, 490, 491, 493, 496, 499, 501, 503, 507, 508, 509, 527, 532, 533, 537, 540, 552, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 581, 583, 587, 588, 589, 590, 592, 609, 610, 616, 620, 623, 630, 631, 632, 633, 645, 651, 658, 665, 667, 673, 675, 687, 694, 697, 698, 699, 701, 711, 715, 734, 740, 761, 762, 780, 792, 795, 796, 800, 801, 802, 803, 804, 809, 811, 818, 819, 828, 829, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 845, 848, 849, 850, 851, 852, 853, 854, 857, 858, 859, 860, 865, 873, 877, 878, 879, 881, 882, 889, 890, 902, 905, 908, 909, 910, 911, 913, 915, 920, 921, 922, 939, 941, 955, 959, 962, 974, 977, 978, 982, 983, 984, 985, 987, 988, 989, 990, 991, 995, 998, 999, 1002, 1003, 1004, 1013, 1015, 1021, 1022, 1023, 1024, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "public": [0, 80, 375, 381, 383, 385, 386, 393, 394, 395, 396, 412, 415, 467, 663, 670, 684, 685, 691, 898, 984, 992, 1031, 1036, 1037, 1042, 1043, 1044, 1047], "releas": [0, 13, 15, 56, 72, 111, 117, 118, 119, 120, 123, 130, 147, 150, 165, 166, 172, 173, 177, 182, 189, 201, 202, 203, 232, 237, 241, 242, 243, 244, 259, 271, 274, 280, 283, 287, 324, 368, 370, 379, 381, 382, 384, 389, 393, 395, 416, 442, 445, 446, 463, 466, 489, 490, 495, 500, 501, 503, 511, 514, 520, 523, 537, 560, 561, 563, 564, 566, 598, 601, 627, 629, 631, 633, 639, 645, 647, 651, 657, 668, 679, 687, 700, 701, 716, 746, 786, 793, 797, 800, 801, 803, 811, 819, 822, 826, 842, 844, 861, 865, 870, 873, 874, 875, 879, 880, 881, 897, 898, 900, 905, 908, 909, 932, 956, 1004, 1006, 1010, 1031, 1032, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "februari": [0, 410, 472, 988, 1032, 1036], "1st": [0, 4, 61, 91, 161, 202, 312, 878, 879], "sinc": [0, 4, 5, 11, 13, 26, 28, 35, 38, 50, 54, 56, 67, 71, 72, 73, 97, 123, 139, 147, 150, 153, 158, 171, 172, 174, 177, 183, 201, 203, 205, 218, 231, 235, 236, 237, 249, 252, 258, 262, 264, 265, 271, 272, 280, 283, 285, 287, 288, 313, 320, 321, 331, 336, 339, 347, 352, 353, 354, 363, 368, 376, 379, 381, 382, 383, 385, 386, 389, 393, 394, 395, 398, 399, 406, 408, 409, 410, 411, 412, 413, 415, 416, 418, 425, 436, 440, 444, 445, 446, 448, 449, 452, 455, 468, 477, 495, 525, 526, 535, 536, 537, 538, 539, 545, 546, 548, 549, 550, 551, 552, 554, 556, 558, 560, 561, 562, 563, 566, 568, 587, 588, 590, 609, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 631, 632, 637, 643, 644, 649, 650, 653, 654, 655, 657, 658, 663, 664, 665, 667, 673, 674, 675, 678, 706, 708, 733, 739, 740, 748, 749, 766, 787, 800, 801, 803, 821, 822, 823, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 847, 850, 857, 858, 865, 873, 890, 891, 895, 896, 900, 902, 903, 904, 905, 906, 908, 910, 934, 937, 945, 977, 980, 981, 982, 984, 985, 989, 990, 991, 992, 994, 996, 998, 1002, 1003, 1004, 1013, 1015, 1024, 1031, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "sever": [0, 4, 9, 12, 13, 26, 32, 35, 38, 56, 57, 58, 62, 75, 92, 116, 124, 131, 133, 136, 147, 150, 153, 158, 159, 168, 171, 177, 185, 190, 201, 205, 221, 222, 225, 226, 227, 228, 234, 249, 257, 262, 267, 285, 287, 302, 307, 320, 347, 352, 353, 367, 375, 376, 378, 381, 383, 386, 393, 395, 405, 407, 408, 409, 412, 414, 415, 416, 418, 446, 448, 463, 486, 498, 507, 508, 537, 554, 555, 558, 559, 562, 563, 564, 569, 587, 588, 590, 609, 644, 645, 651, 687, 688, 689, 690, 691, 692, 795, 796, 797, 800, 801, 811, 828, 829, 835, 836, 837, 838, 839, 859, 860, 867, 884, 908, 909, 910, 911, 923, 977, 980, 985, 988, 989, 991, 996, 998, 1002, 1004, 1005, 1007, 1008, 1010, 1012, 1013, 1015, 1022, 1023, 1024, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1044, 1047, 1048], "have": [0, 4, 5, 7, 8, 9, 11, 12, 13, 14, 25, 26, 27, 28, 38, 40, 43, 44, 46, 47, 48, 51, 54, 56, 58, 61, 63, 65, 66, 71, 72, 79, 81, 87, 90, 92, 93, 101, 103, 113, 120, 122, 123, 124, 126, 146, 147, 150, 153, 154, 158, 159, 160, 166, 170, 171, 172, 173, 174, 177, 180, 185, 201, 202, 203, 205, 219, 226, 230, 232, 237, 238, 240, 241, 248, 249, 250, 252, 256, 262, 263, 265, 268, 269, 276, 280, 285, 287, 288, 291, 292, 307, 312, 313, 314, 317, 319, 320, 327, 328, 329, 336, 342, 343, 344, 347, 352, 353, 361, 363, 367, 368, 369, 375, 376, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 398, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 486, 491, 493, 494, 495, 507, 508, 513, 522, 523, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 580, 581, 582, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 684, 686, 687, 688, 689, 690, 691, 698, 703, 704, 711, 714, 719, 724, 729, 734, 740, 754, 755, 756, 757, 780, 783, 784, 790, 793, 795, 796, 797, 800, 801, 802, 803, 808, 811, 815, 819, 821, 824, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 885, 886, 888, 889, 890, 891, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 920, 922, 924, 926, 937, 963, 977, 978, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1013, 1015, 1016, 1019, 1020, 1022, 1023, 1024, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "appear": [0, 8, 47, 49, 116, 171, 174, 257, 259, 260, 291, 292, 301, 303, 308, 327, 343, 352, 353, 354, 376, 379, 381, 386, 395, 410, 413, 487, 488, 554, 566, 567, 578, 609, 626, 627, 629, 696, 699, 701, 711, 715, 717, 780, 787, 798, 815, 835, 836, 837, 838, 839, 902, 905, 939, 984, 990, 994, 1031, 1039, 1043, 1044], "follow": [0, 4, 7, 20, 27, 33, 38, 46, 55, 56, 58, 64, 68, 72, 73, 93, 96, 106, 113, 116, 126, 130, 145, 158, 165, 170, 171, 172, 173, 174, 180, 182, 185, 189, 190, 199, 201, 202, 216, 219, 231, 237, 238, 240, 253, 262, 271, 272, 280, 307, 313, 314, 317, 318, 320, 321, 322, 336, 347, 352, 353, 354, 357, 361, 363, 367, 368, 375, 376, 378, 379, 380, 381, 383, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 398, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 432, 440, 442, 444, 445, 446, 447, 448, 452, 460, 462, 463, 464, 467, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 514, 533, 537, 539, 540, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 569, 580, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 626, 627, 628, 629, 630, 632, 633, 645, 651, 657, 658, 669, 670, 679, 691, 693, 698, 704, 708, 712, 717, 816, 837, 842, 843, 844, 846, 848, 850, 851, 852, 859, 863, 864, 865, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 889, 898, 900, 901, 908, 909, 910, 911, 915, 916, 936, 956, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1015, 1024, 1028, 1031, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "3": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 74, 75, 76, 79, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 139, 145, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 171, 172, 173, 177, 179, 180, 181, 182, 183, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 227, 230, 234, 235, 236, 237, 238, 240, 242, 244, 247, 248, 249, 251, 252, 253, 257, 260, 261, 262, 263, 264, 265, 266, 268, 270, 271, 272, 273, 274, 275, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 324, 326, 327, 329, 330, 331, 335, 336, 338, 339, 342, 343, 344, 345, 346, 347, 348, 352, 353, 354, 355, 358, 359, 361, 363, 368, 369, 375, 376, 378, 379, 381, 382, 383, 386, 387, 393, 394, 395, 398, 400, 401, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 433, 436, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 457, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 492, 493, 495, 496, 501, 503, 504, 505, 506, 509, 511, 514, 515, 516, 517, 518, 520, 524, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 576, 580, 581, 582, 583, 586, 587, 589, 590, 592, 593, 601, 602, 606, 607, 609, 610, 611, 616, 626, 627, 628, 629, 630, 631, 632, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 686, 687, 688, 689, 691, 692, 693, 698, 699, 701, 702, 703, 704, 706, 708, 712, 715, 716, 720, 721, 722, 724, 726, 727, 728, 729, 732, 733, 734, 735, 739, 741, 742, 743, 744, 746, 748, 749, 750, 751, 752, 754, 755, 766, 767, 773, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 926, 935, 936, 937, 939, 940, 941, 942, 944, 945, 946, 947, 948, 951, 952, 954, 955, 956, 962, 977, 978, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 994, 995, 998, 999, 1001, 1003, 1004, 1006, 1007, 1008, 1010, 1015, 1016, 1019, 1020, 1022, 1023, 1027, 1029, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1041, 1043, 1044, 1046, 1048], "month": [0, 4, 13, 158, 172, 313, 376, 381, 385, 396, 1031], "cycl": [0, 4, 43, 45, 51, 63, 96, 186, 248, 253, 269, 271, 320, 321, 381, 385, 399, 407, 413, 578, 579, 626, 800, 801, 916, 977, 978, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048], "thrive": [0, 381], "intern": [0, 4, 27, 72, 83, 101, 119, 127, 139, 150, 154, 165, 168, 183, 201, 285, 287, 306, 313, 315, 328, 354, 363, 368, 376, 378, 383, 387, 390, 393, 395, 399, 402, 404, 405, 408, 412, 413, 415, 416, 418, 419, 436, 438, 443, 464, 467, 510, 533, 534, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 592, 593, 609, 610, 637, 639, 642, 645, 651, 667, 671, 675, 677, 695, 707, 729, 732, 756, 757, 781, 826, 840, 841, 856, 857, 858, 860, 861, 865, 879, 881, 895, 896, 898, 900, 901, 902, 905, 908, 909, 910, 911, 956, 984, 985, 986, 988, 991, 994, 998, 1000, 1003, 1004, 1010, 1013, 1031, 1034, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "ha": [0, 4, 5, 8, 11, 12, 13, 17, 26, 31, 35, 38, 45, 51, 56, 57, 58, 61, 75, 81, 82, 87, 96, 111, 118, 122, 124, 126, 130, 135, 149, 153, 158, 159, 160, 166, 171, 172, 173, 174, 177, 194, 198, 201, 202, 203, 207, 218, 219, 222, 230, 234, 236, 237, 240, 241, 244, 247, 248, 250, 252, 253, 257, 260, 261, 262, 265, 266, 268, 273, 274, 283, 288, 291, 292, 293, 295, 303, 307, 308, 310, 312, 317, 318, 319, 320, 321, 323, 326, 329, 339, 343, 344, 346, 352, 361, 363, 367, 368, 369, 375, 376, 378, 379, 380, 381, 382, 383, 385, 386, 389, 390, 393, 394, 395, 396, 398, 399, 402, 405, 406, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 420, 433, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 460, 461, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 492, 493, 496, 497, 507, 508, 515, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 618, 626, 627, 628, 629, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 684, 686, 687, 688, 689, 690, 691, 694, 710, 712, 719, 739, 761, 772, 776, 777, 778, 791, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 811, 815, 818, 819, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 860, 863, 864, 865, 866, 867, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 915, 919, 920, 921, 939, 973, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 998, 1000, 1001, 1002, 1003, 1004, 1009, 1013, 1015, 1019, 1022, 1024, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "been": [0, 4, 9, 17, 27, 45, 54, 61, 82, 101, 111, 113, 150, 153, 158, 160, 171, 226, 230, 232, 237, 238, 260, 262, 268, 317, 318, 319, 320, 321, 323, 328, 352, 363, 368, 375, 376, 378, 379, 380, 381, 383, 385, 387, 389, 390, 393, 394, 395, 396, 399, 402, 405, 406, 408, 410, 412, 413, 415, 418, 433, 436, 468, 470, 471, 473, 477, 486, 522, 533, 535, 548, 549, 566, 567, 580, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 610, 632, 633, 657, 658, 665, 666, 667, 672, 674, 675, 676, 677, 719, 776, 777, 778, 791, 797, 800, 801, 803, 811, 819, 824, 825, 849, 897, 900, 978, 980, 981, 983, 984, 985, 988, 989, 991, 994, 998, 1000, 1002, 1003, 1009, 1013, 1015, 1024, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "lead": [0, 7, 26, 32, 38, 53, 56, 62, 73, 119, 123, 126, 149, 150, 171, 172, 173, 180, 185, 190, 192, 201, 205, 235, 237, 240, 262, 263, 265, 269, 290, 291, 303, 307, 309, 312, 313, 319, 339, 347, 353, 357, 363, 367, 368, 375, 380, 389, 390, 394, 395, 402, 405, 406, 408, 410, 412, 413, 414, 415, 417, 451, 461, 464, 467, 495, 514, 526, 534, 537, 538, 539, 542, 546, 550, 556, 557, 558, 559, 562, 563, 564, 565, 605, 629, 645, 646, 649, 651, 652, 653, 659, 660, 661, 662, 678, 690, 694, 744, 795, 800, 801, 828, 840, 841, 845, 864, 871, 881, 892, 893, 898, 900, 908, 909, 910, 911, 977, 982, 984, 985, 987, 988, 989, 991, 992, 994, 996, 998, 1001, 1002, 1004, 1013, 1015, 1034, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1048], "The": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 27, 31, 32, 33, 35, 38, 40, 41, 45, 46, 47, 48, 49, 51, 52, 53, 54, 56, 58, 59, 61, 62, 63, 64, 66, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 89, 92, 93, 94, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 136, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 172, 173, 174, 177, 180, 182, 183, 184, 185, 186, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 207, 209, 210, 218, 219, 221, 222, 224, 225, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 249, 250, 252, 253, 256, 259, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 283, 285, 287, 289, 290, 291, 292, 293, 294, 295, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 336, 337, 339, 343, 344, 345, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 363, 367, 368, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 430, 431, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 750, 751, 752, 753, 754, 755, 756, 757, 760, 762, 763, 764, 765, 768, 769, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 918, 919, 920, 921, 923, 924, 925, 926, 927, 931, 932, 933, 934, 935, 936, 937, 939, 940, 944, 945, 948, 951, 953, 954, 955, 956, 958, 959, 962, 972, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1024, 1026, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "decis": [0, 4, 17, 26, 28, 32, 35, 42, 57, 59, 61, 91, 100, 112, 115, 116, 117, 118, 124, 131, 132, 133, 135, 136, 137, 142, 150, 155, 157, 161, 171, 183, 184, 193, 210, 211, 214, 230, 231, 233, 238, 241, 265, 268, 280, 293, 296, 301, 307, 308, 309, 312, 325, 330, 332, 335, 336, 337, 338, 339, 340, 341, 345, 348, 349, 352, 362, 367, 370, 377, 378, 381, 395, 406, 408, 415, 436, 468, 499, 503, 518, 535, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 592, 593, 630, 631, 632, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 697, 699, 701, 702, 706, 719, 724, 725, 733, 737, 738, 740, 754, 780, 786, 787, 792, 797, 800, 801, 811, 826, 828, 829, 831, 842, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 982, 988, 989, 990, 991, 992, 994, 995, 996, 1001, 1002, 1003, 1006, 1008, 1009, 1010, 1011, 1013, 1022, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1044, 1045, 1047, 1048], "make": [0, 4, 7, 8, 11, 13, 15, 18, 21, 22, 26, 27, 28, 40, 41, 44, 45, 57, 62, 63, 68, 74, 101, 113, 119, 123, 126, 131, 147, 150, 153, 158, 161, 170, 171, 172, 173, 180, 185, 187, 190, 193, 194, 195, 197, 201, 202, 203, 205, 207, 219, 223, 232, 234, 236, 237, 238, 240, 247, 249, 252, 253, 257, 262, 264, 265, 271, 272, 273, 283, 294, 303, 307, 308, 313, 321, 323, 339, 349, 352, 353, 354, 363, 367, 368, 369, 370, 375, 376, 379, 380, 382, 383, 384, 386, 387, 389, 393, 395, 398, 402, 405, 406, 408, 409, 410, 412, 413, 415, 416, 417, 420, 439, 440, 441, 442, 444, 446, 448, 450, 451, 452, 457, 458, 459, 461, 487, 502, 513, 514, 521, 522, 526, 531, 533, 540, 550, 551, 554, 555, 560, 561, 582, 583, 606, 607, 630, 648, 654, 655, 670, 690, 694, 728, 735, 740, 766, 767, 779, 795, 796, 797, 799, 802, 808, 812, 813, 814, 816, 817, 822, 823, 830, 831, 834, 867, 876, 879, 880, 884, 888, 890, 891, 892, 893, 906, 914, 920, 921, 931, 937, 943, 949, 974, 977, 978, 980, 982, 984, 985, 987, 988, 989, 990, 991, 993, 994, 995, 996, 998, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1012, 1013, 1015, 1020, 1022, 1024, 1028, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "process": [0, 4, 5, 17, 20, 27, 31, 32, 35, 46, 47, 48, 49, 51, 58, 67, 71, 73, 75, 80, 82, 92, 97, 98, 100, 113, 122, 126, 130, 131, 139, 140, 141, 142, 163, 170, 180, 183, 203, 205, 211, 212, 213, 214, 236, 237, 238, 240, 247, 248, 251, 253, 262, 264, 265, 274, 280, 301, 307, 310, 314, 319, 323, 327, 331, 343, 344, 345, 353, 354, 357, 367, 368, 369, 370, 376, 380, 381, 383, 385, 387, 390, 393, 394, 395, 402, 408, 409, 410, 412, 413, 414, 415, 416, 417, 421, 447, 448, 474, 495, 503, 522, 533, 534, 535, 536, 537, 560, 561, 562, 587, 588, 590, 609, 610, 612, 613, 614, 616, 617, 618, 621, 622, 624, 626, 631, 632, 638, 642, 663, 671, 684, 685, 702, 721, 739, 779, 795, 797, 800, 801, 811, 821, 822, 823, 832, 833, 849, 863, 867, 869, 870, 871, 880, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 954, 956, 977, 980, 984, 988, 991, 998, 1000, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1015, 1016, 1023, 1024, 1026, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1047], "structur": [0, 3, 9, 13, 14, 15, 16, 18, 21, 22, 37, 41, 42, 43, 44, 45, 47, 53, 54, 55, 56, 57, 63, 67, 69, 83, 107, 129, 152, 163, 168, 222, 223, 226, 232, 237, 253, 257, 268, 287, 290, 312, 318, 321, 325, 332, 339, 343, 356, 357, 358, 362, 367, 376, 378, 381, 383, 386, 393, 395, 396, 398, 405, 408, 410, 411, 412, 413, 415, 416, 417, 418, 440, 441, 444, 445, 449, 450, 451, 452, 453, 456, 461, 462, 471, 495, 502, 503, 507, 510, 512, 513, 520, 529, 534, 540, 543, 562, 609, 610, 611, 615, 616, 617, 688, 695, 708, 712, 826, 848, 853, 880, 892, 893, 896, 908, 909, 910, 911, 914, 936, 937, 959, 962, 985, 987, 988, 991, 993, 994, 998, 1001, 1004, 1008, 1009, 1010, 1018, 1023, 1024, 1031, 1032, 1034, 1035, 1037, 1041], "i": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 35, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 93, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 149, 150, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 337, 338, 339, 343, 344, 345, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 363, 367, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 394, 395, 396, 397, 398, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 574, 575, 576, 577, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 764, 765, 766, 767, 768, 769, 771, 772, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 935, 936, 937, 939, 942, 943, 945, 946, 947, 948, 949, 950, 951, 953, 954, 955, 956, 958, 959, 960, 962, 963, 969, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "laid": [0, 170, 381], "out": [0, 3, 4, 7, 9, 10, 12, 13, 15, 16, 18, 27, 31, 41, 51, 56, 71, 72, 104, 112, 117, 119, 120, 127, 128, 137, 142, 168, 170, 173, 185, 201, 203, 205, 209, 219, 240, 247, 249, 260, 262, 265, 270, 274, 280, 283, 312, 313, 320, 329, 331, 335, 336, 339, 347, 352, 366, 376, 378, 379, 381, 383, 384, 385, 387, 393, 395, 408, 411, 413, 415, 416, 418, 424, 434, 435, 441, 442, 444, 445, 446, 448, 471, 481, 482, 483, 484, 498, 514, 515, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 548, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 587, 588, 590, 603, 606, 607, 633, 638, 639, 640, 641, 650, 654, 665, 667, 672, 674, 675, 687, 688, 691, 700, 725, 739, 740, 797, 799, 800, 801, 802, 804, 805, 806, 807, 811, 826, 835, 836, 837, 838, 839, 844, 849, 852, 856, 857, 858, 866, 870, 877, 889, 892, 893, 915, 950, 952, 978, 982, 983, 987, 988, 989, 991, 996, 998, 1009, 1010, 1011, 1012, 1013, 1019, 1022, 1024, 1026, 1031, 1033, 1035, 1037, 1039, 1040, 1043, 1044, 1047], "peopl": [0, 6, 71, 171, 239, 265, 352, 353, 368, 369, 376, 378, 380, 381, 385, 396, 414, 492, 493, 640, 837, 1008, 1020], "ar": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 33, 35, 38, 40, 41, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 65, 67, 71, 72, 73, 75, 76, 79, 80, 81, 82, 83, 86, 87, 91, 93, 96, 98, 101, 104, 107, 111, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 131, 132, 133, 134, 135, 146, 147, 149, 150, 153, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 189, 190, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 205, 210, 212, 219, 222, 223, 224, 225, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 244, 248, 249, 250, 252, 256, 257, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 280, 283, 285, 287, 290, 291, 295, 298, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 321, 322, 323, 326, 328, 329, 330, 331, 337, 339, 341, 343, 347, 348, 352, 353, 354, 357, 361, 363, 367, 368, 369, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 394, 395, 396, 398, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 429, 432, 433, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 487, 488, 492, 494, 495, 497, 499, 500, 501, 502, 503, 507, 508, 509, 511, 514, 515, 516, 517, 518, 519, 522, 523, 525, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 703, 704, 706, 708, 711, 712, 714, 715, 716, 717, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 732, 733, 734, 735, 736, 738, 739, 740, 741, 743, 744, 746, 748, 749, 751, 752, 754, 755, 759, 760, 761, 763, 765, 766, 767, 771, 772, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 803, 804, 806, 809, 811, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 924, 925, 926, 929, 931, 936, 937, 938, 941, 942, 944, 945, 948, 951, 952, 954, 956, 959, 962, 963, 967, 968, 969, 972, 974, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "current": [0, 8, 47, 113, 158, 171, 219, 307, 317, 368, 369, 376, 379, 381, 382, 383, 386, 390, 393, 395, 396, 404, 405, 407, 408, 412, 415, 416, 417, 418, 439, 445, 449, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 531, 534, 540, 552, 553, 556, 557, 558, 559, 561, 563, 564, 565, 575, 590, 592, 609, 616, 625, 626, 645, 657, 666, 670, 674, 675, 676, 677, 786, 795, 796, 845, 849, 857, 858, 876, 888, 898, 908, 909, 910, 911, 914, 955, 963, 977, 982, 984, 988, 991, 992, 998, 1009, 1022, 1039, 1043, 1045, 1046, 1047], "": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 17, 18, 20, 21, 25, 28, 35, 39, 40, 41, 43, 44, 45, 47, 48, 49, 53, 54, 56, 58, 59, 60, 61, 62, 63, 65, 66, 68, 71, 72, 79, 80, 83, 86, 91, 92, 93, 96, 97, 98, 101, 102, 105, 106, 107, 111, 113, 115, 119, 120, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 142, 145, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 166, 168, 171, 172, 174, 177, 181, 182, 183, 185, 187, 189, 190, 191, 192, 193, 199, 201, 203, 205, 207, 208, 210, 213, 214, 215, 216, 217, 218, 222, 223, 224, 225, 226, 227, 230, 231, 234, 236, 237, 238, 240, 247, 249, 250, 252, 257, 262, 263, 264, 265, 266, 269, 273, 275, 276, 285, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 304, 306, 307, 310, 313, 315, 317, 319, 320, 321, 322, 323, 327, 328, 336, 337, 338, 339, 340, 343, 344, 345, 346, 349, 352, 353, 354, 358, 359, 360, 361, 363, 367, 368, 369, 370, 374, 375, 376, 378, 379, 380, 381, 382, 383, 385, 387, 388, 389, 390, 395, 396, 397, 398, 399, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 416, 418, 420, 422, 429, 433, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 458, 459, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 488, 495, 497, 499, 503, 509, 510, 518, 524, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 571, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 684, 686, 687, 688, 689, 690, 691, 692, 699, 700, 701, 707, 710, 715, 719, 733, 739, 756, 757, 777, 778, 795, 796, 797, 799, 800, 801, 806, 811, 815, 816, 821, 822, 823, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 915, 918, 920, 921, 924, 937, 939, 945, 946, 948, 972, 976, 977, 979, 980, 982, 984, 985, 986, 989, 990, 991, 992, 993, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1008, 1009, 1010, 1013, 1015, 1019, 1020, 1022, 1023, 1024, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "mainten": [0, 381, 389, 393, 398, 401, 984, 1009, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "j\u00e9r\u00e9mie": [0, 1, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "du": [0, 1, 2, 1031, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "boisberrang": [0, 1, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "jori": [0, 1, 1038, 1039, 1040, 1043, 1044], "van": [0, 1, 375, 410, 468, 473, 533, 626, 691, 695, 978, 985, 988, 994, 1013, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1047], "den": [0, 1, 1032, 1033, 1038, 1039, 1040, 1043, 1044], "bossch": [0, 1, 1038, 1039, 1040, 1044], "lo\u00efc": [0, 1, 1039, 1042, 1044, 1045, 1046, 1047], "est\u00e8v": [0, 1, 1039, 1042, 1044, 1045, 1046, 1047], "thoma": [0, 1, 104, 230, 307, 368, 371, 396, 896, 984, 998, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "j": [0, 1, 11, 18, 38, 39, 41, 44, 62, 71, 80, 81, 82, 113, 116, 117, 128, 154, 166, 172, 213, 225, 239, 247, 261, 262, 267, 273, 289, 295, 298, 311, 322, 361, 368, 375, 376, 378, 385, 387, 393, 405, 406, 408, 410, 412, 413, 415, 416, 418, 419, 436, 439, 443, 445, 452, 453, 468, 473, 497, 512, 515, 516, 517, 519, 527, 530, 533, 535, 536, 537, 539, 540, 546, 552, 558, 559, 592, 593, 631, 632, 636, 643, 644, 647, 648, 665, 666, 668, 679, 687, 688, 689, 691, 692, 693, 695, 704, 707, 709, 713, 715, 717, 720, 721, 722, 724, 753, 754, 756, 757, 772, 776, 786, 787, 790, 791, 829, 830, 837, 842, 843, 844, 846, 848, 849, 850, 851, 852, 853, 854, 871, 880, 881, 908, 909, 977, 978, 982, 984, 985, 986, 988, 989, 990, 991, 992, 994, 995, 996, 998, 1000, 1002, 1003, 1004, 1006, 1024, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "fan": [0, 1, 368, 396, 1003, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "olivi": [0, 1, 15, 18, 38, 49, 62, 190, 201, 219, 223, 263, 265, 352, 353, 354, 396, 896, 1001, 1007, 1009, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "grisel": [0, 1, 15, 18, 38, 49, 62, 190, 201, 219, 223, 263, 265, 352, 353, 354, 396, 1007, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "yaroslav": [0, 1, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1047, 1048], "halchenko": [0, 1, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1047], "tim": [0, 1, 118, 132, 1031, 1036, 1037, 1040, 1041, 1042, 1044, 1046, 1047, 1048], "head": [0, 1, 13, 27, 72, 118, 132, 158, 171, 189, 190, 219, 244, 252, 313, 317, 322, 381, 389, 413, 1013, 1036, 1037, 1046, 1047, 1048], "nicola": [0, 1, 150, 311, 657, 984, 1001, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "hug": [0, 1, 150, 311, 1006, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "adrin": [0, 1, 66, 348, 396, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "jalali": [0, 1, 66, 348, 396, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "julien": [0, 1, 657, 984, 1013, 1031, 1034, 1038, 1039, 1043, 1044, 1045, 1046, 1047, 1048], "jerphanion": [0, 1, 1043, 1044, 1045, 1046, 1047, 1048], "guillaum": [0, 1, 5, 7, 73, 76, 101, 133, 153, 158, 159, 160, 162, 189, 190, 203, 223, 307, 1013, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "lemaitr": [0, 1, 5, 7, 73, 76, 101, 133, 153, 158, 159, 160, 162, 189, 190, 203, 223, 307, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "christian": [0, 1, 20, 201, 202, 203, 219, 352, 353, 376, 1013, 1024, 1031, 1032, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "lorentzen": [0, 1, 201, 202, 203, 219, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "jan": [0, 1, 25, 26, 27, 28, 153, 154, 156, 157, 158, 159, 160, 162, 202, 236, 280, 879, 1031, 1034, 1035, 1036, 1037, 1039, 1040, 1043, 1047], "hendrik": [0, 1, 25, 26, 27, 28, 153, 154, 156, 157, 158, 159, 160, 162, 236, 1031, 1034, 1035, 1036, 1037], "metzen": [0, 1, 25, 26, 27, 28, 153, 154, 156, 157, 158, 159, 160, 162, 236, 1031, 1034, 1035, 1036, 1037], "andrea": [0, 1, 32, 75, 101, 117, 192, 235, 308, 309, 328, 347, 348, 396, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "mueller": [0, 1, 75, 101, 117, 192, 235, 328, 347, 348, 1013, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "vlad": [0, 1, 96, 238, 304, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040], "nicula": [0, 1, 96, 238, 304, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040], "joel": [0, 1, 73, 396, 416, 534, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "nothman": [0, 1, 73, 396, 416, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "hanmin": [0, 1, 308, 1038, 1039, 1040, 1041, 1042], "qin": [0, 1, 308, 378, 416, 1038, 1039, 1040, 1041, 1042], "omar": [0, 1, 1041, 1046, 1047, 1048], "salman": [0, 1, 1046, 1047, 1048], "bertrand": [0, 1, 1031, 1037, 1038, 1043, 1044], "thirion": [0, 1, 1031, 1037, 1038, 1044], "tom": [0, 1, 193, 209, 285, 287, 309, 310, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "dupr\u00e9": [0, 1, 309, 310, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "la": [0, 1, 193, 209, 285, 287, 309, 310, 313, 378, 1013, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "tour": [0, 1, 193, 209, 285, 287, 309, 310, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "nell": [0, 1, 40, 225, 233, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1043], "roman": [0, 1, 201, 219, 626, 914, 1033, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "yurchak": [0, 1, 201, 219, 416, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "meekail": [0, 1, 1045, 1046, 1047, 1048], "zain": [0, 1, 1045, 1046, 1047, 1048], "pleas": [0, 12, 18, 27, 72, 73, 118, 120, 121, 127, 129, 130, 133, 136, 147, 158, 171, 172, 173, 182, 205, 231, 232, 233, 235, 237, 240, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 285, 295, 304, 313, 317, 318, 319, 320, 321, 322, 323, 328, 343, 361, 368, 375, 376, 379, 381, 382, 383, 385, 389, 393, 394, 395, 398, 399, 402, 404, 407, 408, 415, 416, 422, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 495, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 602, 609, 610, 627, 628, 629, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 823, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 889, 892, 893, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 977, 988, 992, 998, 1002, 1003, 1008, 1009, 1012, 1015, 1022, 1024, 1031, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "do": [0, 4, 10, 13, 26, 43, 56, 62, 68, 75, 91, 100, 102, 103, 106, 117, 120, 122, 124, 126, 127, 133, 140, 147, 158, 165, 171, 172, 173, 198, 201, 205, 219, 222, 224, 237, 238, 240, 253, 257, 260, 263, 265, 283, 285, 287, 291, 320, 331, 336, 339, 343, 344, 347, 352, 353, 354, 361, 363, 367, 368, 369, 376, 378, 380, 381, 382, 383, 384, 385, 387, 388, 389, 395, 396, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 449, 460, 502, 535, 537, 541, 543, 551, 554, 580, 581, 587, 588, 590, 631, 632, 644, 645, 651, 654, 655, 658, 665, 667, 675, 735, 761, 776, 780, 814, 817, 832, 833, 837, 864, 865, 867, 874, 878, 880, 885, 886, 888, 889, 890, 891, 908, 909, 910, 911, 919, 962, 977, 980, 982, 984, 985, 988, 989, 991, 992, 996, 998, 1003, 1004, 1008, 1009, 1013, 1015, 1022, 1023, 1024, 1031, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "email": [0, 352, 381, 393, 416, 835, 990, 1013], "directli": [0, 6, 20, 28, 46, 47, 57, 72, 118, 123, 150, 161, 185, 189, 201, 207, 219, 231, 267, 304, 307, 321, 354, 363, 367, 379, 381, 382, 383, 385, 387, 394, 395, 396, 404, 405, 406, 408, 409, 410, 411, 412, 416, 418, 441, 451, 461, 463, 468, 473, 526, 566, 567, 568, 569, 596, 610, 619, 631, 642, 645, 646, 651, 652, 659, 660, 661, 662, 663, 676, 680, 683, 689, 772, 776, 779, 790, 791, 797, 800, 801, 811, 843, 845, 859, 860, 861, 867, 877, 879, 882, 889, 956, 977, 984, 986, 991, 993, 995, 998, 1003, 1004, 1009, 1016, 1019, 1020, 1031, 1039, 1040, 1042, 1043, 1044, 1047, 1048], "ask": [0, 165, 166, 262, 370, 380, 381, 385, 386, 389, 395, 396, 417, 842, 843, 844, 846, 848, 850, 851, 852, 1006, 1012, 1047], "assist": [0, 381, 393, 998, 1013], "report": [0, 4, 8, 13, 33, 71, 76, 147, 161, 189, 260, 270, 280, 317, 326, 363, 376, 380, 382, 383, 384, 387, 389, 393, 395, 398, 402, 408, 412, 610, 648, 657, 663, 684, 685, 699, 712, 727, 728, 736, 781, 782, 785, 829, 838, 857, 858, 895, 913, 931, 984, 991, 1008, 1009, 1012, 1032, 1035, 1038, 1039, 1041, 1042, 1044, 1046, 1047], "issu": [0, 4, 26, 80, 87, 201, 219, 267, 314, 368, 370, 375, 384, 385, 386, 389, 390, 393, 395, 396, 397, 398, 399, 402, 404, 408, 410, 411, 416, 448, 451, 461, 472, 481, 482, 483, 533, 538, 542, 572, 584, 585, 587, 588, 590, 610, 626, 690, 694, 767, 871, 876, 888, 927, 977, 978, 985, 991, 996, 998, 1003, 1008, 1009, 1012, 1023, 1024, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046], "instead": [0, 4, 5, 6, 13, 21, 49, 54, 56, 57, 58, 72, 101, 116, 121, 130, 147, 150, 153, 201, 203, 216, 219, 226, 240, 253, 258, 259, 263, 264, 283, 290, 307, 317, 318, 319, 320, 321, 339, 341, 343, 352, 354, 361, 363, 367, 368, 375, 376, 379, 380, 381, 382, 383, 385, 386, 389, 390, 393, 394, 395, 402, 404, 408, 409, 411, 412, 413, 414, 415, 416, 417, 419, 431, 436, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 455, 458, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 508, 509, 532, 533, 534, 536, 537, 538, 539, 540, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 593, 606, 607, 609, 610, 611, 612, 613, 614, 615, 618, 619, 620, 621, 622, 623, 624, 626, 629, 631, 634, 637, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 686, 689, 693, 706, 740, 744, 748, 749, 772, 776, 777, 778, 781, 795, 796, 797, 798, 799, 801, 803, 804, 806, 809, 811, 815, 816, 817, 821, 822, 823, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 845, 847, 850, 851, 857, 858, 860, 861, 862, 863, 865, 866, 867, 872, 873, 878, 879, 880, 890, 891, 894, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 914, 926, 932, 937, 945, 956, 963, 977, 978, 980, 984, 985, 987, 988, 989, 992, 993, 998, 1002, 1003, 1004, 1008, 1012, 1020, 1022, 1024, 1028, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "see": [0, 4, 5, 7, 13, 21, 25, 26, 28, 38, 45, 50, 51, 54, 56, 58, 59, 63, 65, 66, 68, 70, 81, 87, 90, 91, 96, 101, 103, 107, 113, 114, 115, 116, 119, 120, 121, 122, 123, 125, 127, 130, 133, 139, 146, 147, 148, 150, 153, 158, 159, 160, 165, 168, 171, 172, 174, 177, 180, 181, 182, 185, 192, 202, 203, 204, 205, 207, 218, 219, 222, 224, 232, 234, 237, 240, 241, 242, 244, 248, 249, 250, 256, 257, 259, 261, 262, 263, 264, 265, 269, 271, 272, 273, 276, 277, 280, 285, 291, 292, 294, 298, 307, 313, 314, 317, 318, 319, 320, 321, 322, 323, 328, 339, 343, 347, 352, 353, 354, 357, 358, 359, 360, 363, 367, 368, 369, 373, 374, 375, 376, 378, 379, 380, 381, 383, 385, 387, 388, 389, 393, 394, 395, 398, 404, 406, 407, 408, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 432, 436, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 486, 487, 490, 491, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 608, 609, 610, 613, 618, 621, 622, 626, 627, 628, 629, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 700, 705, 707, 710, 712, 741, 761, 772, 776, 777, 778, 779, 786, 790, 791, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 808, 809, 811, 812, 813, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 936, 937, 959, 962, 972, 977, 978, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1013, 1015, 1017, 1022, 1023, 1024, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "what": [0, 4, 9, 12, 13, 41, 46, 53, 54, 87, 97, 101, 122, 170, 171, 190, 207, 209, 217, 232, 237, 244, 303, 352, 354, 357, 363, 368, 376, 381, 382, 383, 385, 387, 389, 394, 395, 396, 397, 399, 408, 414, 415, 416, 502, 535, 587, 588, 590, 645, 651, 695, 885, 886, 888, 889, 890, 891, 908, 909, 910, 911, 987, 988, 989, 991, 1004, 1009, 1012, 1015, 1031, 1038], "best": [0, 4, 6, 8, 12, 13, 14, 20, 25, 27, 41, 47, 55, 56, 62, 71, 72, 73, 74, 79, 86, 96, 100, 104, 105, 106, 116, 119, 123, 124, 125, 126, 127, 133, 136, 150, 153, 154, 159, 165, 171, 180, 185, 189, 190, 197, 215, 216, 217, 222, 225, 230, 235, 236, 240, 249, 253, 256, 260, 261, 262, 263, 266, 269, 270, 273, 274, 276, 283, 289, 294, 308, 313, 319, 320, 339, 342, 343, 352, 353, 354, 360, 367, 368, 370, 375, 378, 380, 381, 384, 387, 394, 395, 398, 399, 405, 406, 408, 412, 413, 415, 416, 417, 418, 431, 442, 445, 446, 448, 450, 451, 452, 458, 461, 464, 471, 481, 482, 483, 537, 544, 545, 551, 553, 555, 556, 557, 558, 559, 561, 563, 564, 565, 567, 569, 592, 593, 596, 601, 609, 610, 634, 636, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 666, 668, 669, 670, 671, 672, 674, 675, 677, 678, 679, 687, 688, 689, 692, 693, 702, 707, 718, 719, 720, 721, 722, 726, 727, 737, 738, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 754, 781, 782, 783, 785, 788, 789, 790, 791, 792, 794, 795, 796, 797, 800, 801, 811, 823, 825, 828, 833, 834, 843, 851, 857, 858, 901, 903, 906, 908, 909, 910, 911, 977, 982, 983, 984, 985, 988, 991, 992, 994, 1002, 1004, 1008, 1009, 1013, 1015, 1020, 1024, 1031, 1034, 1037, 1039, 1040, 1041, 1044, 1045, 1046, 1047], "wai": [0, 4, 18, 28, 51, 61, 72, 75, 118, 125, 129, 131, 150, 160, 171, 173, 174, 202, 205, 206, 216, 232, 233, 236, 237, 240, 241, 257, 262, 269, 271, 307, 308, 320, 322, 323, 363, 367, 368, 369, 375, 377, 379, 380, 383, 384, 389, 390, 395, 396, 398, 399, 402, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 423, 442, 443, 450, 451, 452, 458, 459, 461, 462, 468, 495, 554, 555, 562, 571, 588, 598, 599, 610, 631, 665, 666, 675, 676, 677, 698, 703, 705, 716, 734, 735, 752, 753, 755, 761, 772, 776, 786, 793, 821, 829, 846, 867, 873, 878, 884, 910, 911, 959, 962, 977, 978, 982, 983, 984, 985, 986, 987, 988, 989, 991, 993, 994, 995, 996, 998, 1000, 1002, 1003, 1004, 1008, 1009, 1012, 1013, 1015, 1023, 1024, 1031, 1033, 1039, 1044, 1045], "question": [0, 139, 170, 262, 347, 370, 380, 381, 386, 389, 412, 415, 829, 902, 905, 984, 987, 988, 994, 1006, 1013], "faq": [0, 389, 412, 691, 985, 998], "how": [0, 4, 5, 7, 8, 9, 10, 13, 21, 22, 26, 27, 33, 34, 38, 51, 52, 53, 54, 58, 61, 70, 71, 72, 75, 79, 81, 87, 102, 106, 113, 114, 117, 121, 122, 123, 124, 126, 127, 131, 133, 147, 158, 160, 168, 171, 172, 173, 174, 177, 182, 190, 191, 197, 202, 203, 204, 205, 208, 209, 215, 219, 226, 227, 232, 235, 237, 239, 240, 241, 243, 253, 257, 258, 260, 262, 263, 264, 269, 271, 272, 274, 275, 276, 283, 285, 287, 288, 289, 291, 292, 303, 312, 314, 318, 319, 320, 323, 336, 337, 339, 342, 343, 347, 352, 353, 357, 361, 367, 368, 369, 370, 376, 379, 380, 382, 383, 384, 386, 389, 394, 395, 396, 399, 402, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 422, 432, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 503, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 621, 622, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 703, 719, 755, 790, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 823, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 972, 977, 978, 982, 983, 984, 985, 987, 988, 994, 995, 996, 998, 1000, 1001, 1003, 1004, 1007, 1009, 1012, 1013, 1015, 1017, 1019, 1024, 1026, 1031, 1033, 1036, 1042, 1045, 1046, 1047], "you": [0, 15, 17, 21, 25, 72, 91, 121, 122, 125, 127, 147, 150, 166, 172, 189, 202, 203, 205, 232, 237, 244, 250, 257, 262, 263, 269, 277, 291, 317, 318, 321, 323, 327, 330, 352, 363, 367, 368, 369, 375, 376, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 394, 395, 398, 399, 402, 404, 406, 407, 408, 409, 410, 412, 415, 416, 417, 419, 420, 425, 436, 442, 443, 445, 446, 448, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 499, 502, 503, 508, 509, 531, 532, 533, 535, 537, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 578, 579, 580, 581, 587, 588, 589, 590, 593, 606, 607, 609, 610, 626, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 686, 689, 698, 699, 783, 796, 798, 799, 800, 801, 802, 804, 806, 812, 813, 814, 815, 816, 817, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 850, 851, 857, 858, 859, 860, 863, 864, 865, 866, 867, 872, 873, 874, 879, 880, 885, 886, 888, 889, 890, 891, 893, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 937, 954, 956, 977, 978, 983, 984, 988, 989, 992, 994, 995, 998, 999, 1002, 1003, 1004, 1007, 1008, 1012, 1013, 1015, 1016, 1019, 1022, 1024, 1031, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "can": [0, 4, 5, 7, 8, 9, 10, 12, 13, 15, 17, 20, 21, 25, 26, 27, 28, 32, 33, 34, 38, 41, 43, 44, 47, 49, 50, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 71, 72, 73, 74, 79, 80, 81, 82, 83, 87, 91, 97, 99, 100, 101, 102, 104, 106, 107, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 145, 146, 147, 149, 150, 153, 158, 159, 160, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 185, 186, 189, 190, 192, 194, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 209, 217, 218, 219, 222, 223, 224, 230, 231, 232, 233, 234, 236, 237, 240, 241, 244, 247, 248, 249, 250, 252, 253, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 269, 271, 273, 274, 276, 277, 280, 283, 285, 287, 289, 290, 291, 292, 294, 302, 303, 304, 307, 308, 309, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 327, 328, 330, 331, 336, 337, 339, 342, 343, 347, 352, 353, 354, 359, 360, 361, 363, 367, 368, 369, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 394, 395, 396, 397, 398, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 431, 433, 436, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 453, 455, 456, 457, 458, 460, 461, 463, 464, 465, 466, 467, 471, 481, 482, 483, 486, 495, 498, 502, 507, 508, 511, 520, 523, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 578, 579, 580, 581, 582, 583, 587, 588, 590, 591, 593, 596, 601, 602, 603, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 629, 631, 633, 634, 637, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 686, 688, 690, 691, 692, 693, 694, 697, 698, 699, 700, 701, 703, 706, 708, 710, 711, 717, 719, 720, 721, 722, 724, 725, 727, 728, 730, 731, 735, 736, 737, 738, 740, 741, 744, 750, 753, 754, 755, 756, 757, 761, 777, 778, 780, 781, 782, 783, 785, 786, 787, 792, 793, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 848, 850, 851, 852, 857, 858, 859, 860, 863, 864, 865, 867, 868, 869, 873, 874, 875, 878, 879, 880, 885, 892, 893, 898, 900, 901, 902, 903, 905, 906, 908, 909, 910, 911, 912, 913, 916, 918, 920, 924, 926, 931, 936, 937, 943, 945, 946, 948, 951, 954, 956, 958, 959, 962, 969, 972, 973, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "contribut": [0, 14, 21, 127, 158, 185, 205, 271, 312, 370, 378, 379, 383, 384, 385, 389, 395, 396, 398, 413, 414, 415, 446, 448, 552, 553, 558, 559, 724, 727, 754, 982, 988, 991, 996, 1003, 1006, 1008, 1009, 1013, 1022, 1031, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "help": [0, 4, 9, 11, 17, 56, 71, 75, 101, 107, 172, 185, 219, 222, 263, 265, 280, 304, 336, 339, 353, 354, 363, 367, 368, 379, 382, 383, 384, 385, 386, 387, 389, 390, 395, 396, 397, 402, 408, 409, 412, 416, 418, 432, 535, 576, 626, 649, 653, 664, 684, 685, 691, 713, 836, 908, 909, 910, 911, 978, 982, 983, 985, 987, 988, 990, 992, 998, 999, 1004, 1007, 1008, 1009, 1012, 1013, 1024, 1037, 1038, 1039, 1042, 1045], "arturo": [0, 38, 58, 119, 180, 185, 240, 263, 265, 312, 352, 353, 354, 392, 1045, 1046, 1047], "amor": [0, 38, 58, 119, 180, 185, 240, 263, 265, 312, 352, 353, 354, 392, 1045, 1046, 1047], "luci": [0, 268, 371, 392, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "liu": [0, 268, 371, 392, 562, 724, 754, 988, 994, 1034, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "activ": [0, 33, 168, 209, 239, 247, 253, 263, 325, 326, 328, 332, 354, 375, 376, 379, 381, 382, 387, 389, 393, 395, 396, 398, 409, 495, 501, 525, 631, 634, 636, 649, 650, 652, 653, 654, 662, 663, 664, 681, 682, 683, 684, 685, 712, 717, 795, 856, 857, 858, 896, 954, 984, 985, 986, 987, 991, 992, 993, 1001, 1010, 1042], "who": [0, 71, 368, 370, 376, 381, 388, 396, 398, 842, 843, 844, 846, 848, 850, 851, 852, 1006, 1008, 1033, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "also": [0, 4, 7, 11, 13, 18, 20, 21, 25, 26, 27, 28, 33, 47, 49, 54, 58, 59, 61, 65, 71, 72, 79, 81, 86, 87, 96, 104, 106, 113, 116, 119, 121, 123, 125, 126, 127, 131, 133, 146, 147, 148, 150, 153, 155, 158, 166, 171, 172, 173, 174, 177, 181, 182, 184, 190, 193, 194, 197, 201, 202, 203, 205, 206, 210, 218, 219, 222, 233, 235, 237, 240, 241, 253, 260, 262, 263, 264, 265, 268, 269, 271, 272, 273, 280, 283, 285, 293, 296, 298, 301, 307, 308, 309, 311, 312, 317, 318, 319, 320, 331, 335, 336, 337, 339, 341, 343, 352, 353, 354, 357, 358, 361, 363, 367, 368, 369, 374, 375, 376, 378, 379, 380, 381, 383, 384, 387, 389, 390, 393, 394, 395, 396, 398, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 436, 437, 438, 440, 441, 444, 445, 446, 447, 449, 451, 461, 462, 464, 466, 481, 483, 491, 495, 497, 502, 507, 531, 532, 534, 535, 540, 545, 548, 550, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 606, 607, 608, 609, 610, 621, 631, 632, 634, 642, 643, 644, 645, 646, 649, 651, 652, 653, 655, 657, 658, 659, 660, 661, 662, 671, 675, 677, 680, 683, 686, 690, 693, 694, 698, 709, 712, 721, 727, 728, 736, 741, 761, 777, 778, 781, 782, 785, 795, 796, 797, 800, 801, 811, 814, 817, 822, 823, 824, 825, 826, 827, 829, 839, 842, 843, 844, 846, 847, 848, 850, 851, 852, 856, 857, 858, 860, 862, 863, 868, 869, 873, 877, 880, 885, 889, 902, 905, 908, 909, 910, 911, 920, 939, 945, 952, 956, 977, 978, 980, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 998, 999, 1001, 1002, 1003, 1004, 1008, 1009, 1012, 1013, 1015, 1020, 1022, 1023, 1024, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "triag": [0, 370, 381, 384, 396], "pr": [0, 135, 368, 381, 384, 389, 416, 739, 988, 1041, 1043, 1048], "gener": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 26, 27, 28, 30, 31, 32, 33, 34, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 66, 71, 72, 73, 74, 75, 76, 80, 82, 86, 87, 89, 90, 91, 94, 96, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 147, 148, 150, 154, 155, 156, 157, 158, 161, 165, 166, 170, 171, 172, 173, 174, 177, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 253, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 298, 301, 302, 303, 307, 308, 309, 310, 311, 312, 313, 314, 317, 319, 320, 321, 322, 323, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 367, 368, 370, 373, 374, 376, 378, 382, 383, 384, 385, 386, 387, 389, 390, 393, 394, 402, 405, 406, 408, 412, 414, 416, 417, 418, 420, 424, 429, 431, 436, 439, 442, 445, 446, 448, 451, 453, 457, 458, 459, 461, 463, 464, 466, 468, 471, 473, 481, 482, 483, 487, 490, 491, 494, 495, 496, 502, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 535, 537, 539, 540, 542, 543, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 581, 582, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 609, 610, 613, 614, 617, 618, 619, 621, 622, 626, 627, 628, 629, 631, 632, 633, 634, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 668, 669, 670, 671, 672, 674, 676, 677, 678, 679, 684, 685, 688, 689, 690, 691, 692, 693, 694, 700, 703, 705, 716, 720, 721, 722, 735, 741, 755, 776, 779, 783, 791, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 830, 831, 832, 833, 834, 840, 841, 843, 845, 846, 848, 849, 850, 851, 852, 856, 857, 858, 860, 863, 864, 865, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 885, 886, 888, 889, 890, 891, 892, 893, 900, 901, 902, 903, 905, 906, 909, 911, 912, 913, 914, 931, 932, 936, 937, 940, 941, 953, 959, 962, 977, 978, 980, 982, 983, 985, 987, 988, 989, 991, 993, 994, 995, 996, 1000, 1001, 1003, 1004, 1006, 1008, 1010, 1011, 1012, 1013, 1015, 1018, 1022, 1023, 1026, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047], "juan": [0, 371, 1031, 1042, 1043, 1044, 1045, 1046], "carlo": [0, 235, 371, 415, 418, 610, 640, 641, 980, 993, 1031, 1042, 1043, 1044, 1045, 1046, 1047], "alfaro": [0, 371, 1042, 1043, 1044, 1045, 1046], "jim\u00e9nez": [0, 371, 1039, 1042, 1043, 1044, 1045, 1046], "maxwel": [0, 371, 1041, 1044, 1045, 1046, 1047], "martin": [0, 371, 720, 721, 722, 984, 988, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048], "loyola": [0, 371, 1044, 1045], "sylvain": [0, 371, 1035, 1040, 1041, 1042, 1043, 1044, 1045], "mari\u00e9": [0, 371, 1040, 1041, 1042, 1043, 1044, 1045], "norbert": [0, 371, 1033, 1043, 1044, 1045], "prein": [0, 371, 1043, 1044, 1045], "reshama": [0, 365, 371, 1039, 1040, 1042, 1043, 1044, 1045, 1046], "shaikh": [0, 365, 371, 1039, 1040, 1042, 1043, 1044, 1045, 1046], "albert": [0, 230, 371, 1038, 1039, 1040, 1043, 1044], "maren": [0, 371, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "westermann": [0, 371, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "around": [0, 4, 27, 38, 53, 86, 113, 116, 126, 159, 172, 177, 237, 240, 265, 304, 326, 328, 329, 339, 342, 343, 352, 353, 354, 363, 376, 378, 381, 387, 393, 399, 408, 412, 413, 416, 470, 471, 514, 543, 619, 639, 648, 667, 703, 740, 795, 803, 819, 846, 848, 850, 851, 852, 880, 984, 985, 987, 988, 994, 998, 1002, 1008, 1009, 1013, 1022, 1024, 1035, 1036], "lauren": [0, 364, 691, 695, 985, 1043, 1046], "burk": [0, 364, 1046], "francoisgoupil": [0, 364, 1045], "longer": [0, 4, 35, 54, 116, 172, 186, 303, 320, 381, 383, 408, 412, 415, 416, 448, 535, 562, 983, 987, 988, 990, 993, 1003, 1013, 1024, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "mathieu": [0, 2, 25, 49, 101, 192, 202, 223, 238, 263, 352, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1044], "blondel": [0, 2, 25, 49, 101, 192, 202, 223, 238, 263, 352, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1044], "lar": [0, 2, 15, 99, 150, 168, 171, 179, 186, 187, 190, 194, 195, 206, 220, 275, 352, 353, 354, 378, 470, 471, 477, 500, 530, 536, 538, 541, 542, 544, 545, 547, 650, 651, 652, 653, 654, 655, 662, 663, 664, 677, 681, 682, 683, 684, 685, 1010, 1011, 1022, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1044], "buitinck": [0, 2, 15, 352, 353, 354, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "noel": [0, 2, 113, 114, 115, 1031, 1032, 1033, 1034, 1035, 1043], "daw": [0, 2, 113, 114, 115, 1031, 1032, 1033, 1034, 1035], "dubourg": [0, 2, 156, 160, 1013, 1031, 1035], "edouard": [0, 2, 1031], "duchesnai": [0, 2, 1031], "alexand": [0, 2, 408, 413, 534, 866, 1033, 1034, 1035, 1037, 1038, 1039, 1043, 1044, 1045, 1048], "fabisch": [0, 2, 1033, 1034, 1035, 1037], "virgil": [0, 2, 9, 1031, 1032, 1034], "fritsch": [0, 2, 9, 1031, 1032, 1034], "satrajit": [0, 2, 1031, 1032], "ghosh": [0, 2, 408, 1031, 1032], "angel": [0, 2], "soler": [0, 2], "gollonet": [0, 2], "chri": [0, 2, 1031, 1034, 1039, 1040, 1041, 1042, 1045], "gorgolewski": [0, 2, 1031, 1034], "jaqu": [0, 2, 32, 46, 52, 54, 74, 90, 91, 102, 184, 197, 198, 199, 224, 344, 347, 1031, 1032, 1033, 1034], "grobler": [0, 2, 32, 46, 52, 54, 74, 90, 91, 102, 184, 197, 198, 199, 224, 344, 347, 1031, 1032, 1033, 1034], "brian": [0, 2, 47, 707, 988, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1044, 1045], "holt": [0, 2, 1031], "arnaud": [0, 2, 1032, 1033, 1034, 1035, 1036, 1037], "joli": [0, 2, 1032, 1033, 1034, 1035, 1036, 1037], "thoui": [0, 2, 1031], "rai": [0, 2, 956, 988, 1031, 1041, 1043, 1044], "jone": [0, 2, 376, 1031], "kyle": [0, 2, 100, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1042, 1043], "kastner": [0, 2, 100, 1033, 1034, 1035, 1042, 1043], "manoj": [0, 2, 43, 150, 183, 1034, 1035, 1036, 1037, 1038], "kumar": [0, 2, 43, 150, 183, 376, 408, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "robert": [0, 2, 49, 73, 150, 189, 280, 378, 413, 527, 534, 627, 655, 720, 721, 722, 733, 866, 978, 984, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1046], "layton": [0, 2, 49, 1031, 1032, 1033, 1034, 1036], "wei": [0, 2, 1002, 1031, 1032, 1035, 1036, 1037, 1038, 1040, 1044, 1047], "li": [0, 2, 329, 376, 638, 641, 695, 724, 754, 893, 977, 980, 988, 991, 998, 1000, 1003, 1031, 1032, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "paolo": [0, 2, 1031, 1035, 1041], "losi": [0, 2, 1031], "gill": [0, 2, 116, 117, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "loupp": [0, 2, 116, 117, 415, 554, 555, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "jarrod": [0, 2, 1040, 1047], "millman": [0, 2, 1040, 1047], "passo": [0, 2, 1031, 1032], "peter": [0, 2, 11, 17, 64, 125, 127, 128, 263, 352, 353, 408, 447, 449, 456, 648, 790, 791, 984, 988, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1046, 1047], "prettenhof": [0, 2, 11, 17, 125, 127, 128, 263, 352, 353, 1031, 1032, 1033, 1034, 1035, 1036], "venkat": [0, 2], "raghav": [0, 2, 124, 266, 307, 1035, 1036, 1037, 1038, 1039, 1043], "rajagopalan": [0, 2, 1039, 1043], "jacob": [0, 2, 1036, 1037, 1038], "schreiber": [0, 2, 1036, 1037, 1038], "\u675c\u4e16\u6a4b": [0, 2], "shiqiao": [0, 2, 1031, 1032], "jake": [0, 2, 11, 160, 202, 222, 250, 290, 298, 1007, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1043, 1045], "vanderpla": [0, 2, 11, 160, 202, 222, 250, 290, 298, 1007, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "ward": [0, 2, 14, 22, 37, 40, 41, 42, 43, 45, 47, 53, 54, 55, 57, 63, 69, 168, 174, 226, 416, 440, 444, 462, 529, 853, 1010, 1031, 1034, 1036], "farlei": [0, 2, 1031], "ron": [0, 2, 249, 1031], "weiss": [0, 2, 249, 408, 690, 1031], "respons": [0, 150, 172, 197, 201, 204, 237, 272, 352, 378, 387, 395, 407, 408, 409, 415, 445, 463, 481, 482, 483, 630, 631, 632, 673, 674, 697, 699, 701, 740, 795, 796, 989, 995, 1006, 1015, 1048], "chiara": [0, 372, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "marmo": [0, 372, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "If": [0, 4, 11, 13, 17, 28, 33, 43, 50, 56, 72, 83, 99, 111, 121, 126, 133, 162, 166, 171, 182, 201, 216, 218, 237, 240, 262, 269, 277, 290, 298, 307, 312, 313, 339, 343, 347, 348, 352, 353, 354, 361, 363, 367, 368, 375, 376, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 393, 395, 396, 398, 399, 402, 405, 406, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 429, 432, 433, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 507, 508, 509, 511, 513, 514, 518, 521, 522, 523, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 706, 710, 711, 712, 713, 715, 716, 717, 724, 725, 726, 727, 728, 729, 730, 734, 736, 739, 740, 743, 744, 746, 748, 749, 751, 752, 753, 754, 755, 756, 757, 759, 761, 762, 764, 765, 766, 767, 769, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 803, 809, 811, 814, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 923, 924, 925, 926, 929, 935, 937, 939, 941, 945, 947, 951, 954, 956, 959, 962, 963, 969, 972, 973, 974, 975, 977, 978, 980, 982, 983, 984, 985, 986, 988, 991, 992, 994, 995, 998, 1000, 1002, 1003, 1004, 1005, 1008, 1009, 1012, 1015, 1016, 1022, 1023, 1024, 1031, 1034, 1035, 1036, 1037, 1040, 1041, 1043, 1044, 1045, 1047], "us": [0, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 20, 21, 22, 25, 26, 27, 28, 31, 33, 35, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 87, 91, 92, 93, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 139, 140, 141, 142, 146, 147, 149, 152, 153, 154, 159, 160, 161, 162, 163, 165, 166, 168, 170, 171, 172, 173, 174, 177, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 202, 203, 205, 206, 207, 209, 210, 213, 216, 218, 219, 220, 222, 223, 224, 225, 227, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 278, 280, 282, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 302, 303, 304, 306, 307, 309, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 326, 327, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 350, 351, 354, 355, 357, 359, 360, 366, 367, 368, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 388, 390, 394, 395, 396, 397, 398, 399, 402, 404, 405, 406, 408, 409, 410, 411, 414, 418, 419, 420, 421, 424, 426, 427, 429, 430, 438, 455, 456, 458, 460, 462, 470, 477, 479, 480, 484, 492, 502, 507, 508, 515, 530, 544, 545, 546, 547, 554, 571, 573, 574, 576, 577, 582, 584, 585, 591, 594, 595, 597, 600, 602, 608, 615, 619, 620, 623, 628, 635, 637, 641, 649, 650, 653, 659, 660, 662, 666, 674, 682, 684, 685, 686, 693, 694, 695, 698, 710, 713, 714, 715, 720, 721, 722, 724, 726, 728, 730, 734, 737, 741, 749, 754, 756, 757, 761, 762, 764, 765, 766, 767, 769, 772, 773, 774, 775, 778, 779, 781, 789, 792, 804, 805, 806, 807, 808, 809, 810, 820, 832, 834, 836, 840, 841, 850, 851, 852, 854, 862, 863, 866, 868, 871, 882, 883, 885, 887, 888, 890, 891, 892, 895, 899, 901, 910, 911, 912, 913, 916, 919, 920, 921, 926, 927, 936, 937, 944, 951, 955, 956, 959, 960, 964, 965, 966, 970, 971, 977, 978, 980, 981, 983, 986, 987, 989, 990, 991, 993, 994, 995, 996, 998, 999, 1000, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1018, 1019, 1020, 1021, 1023, 1025, 1026, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "scientif": [0, 33, 139, 140, 141, 142, 235, 370, 375, 379, 393, 398, 408, 451, 461, 500, 1013, 1016], "we": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 25, 26, 27, 28, 31, 33, 35, 38, 41, 42, 43, 45, 48, 50, 51, 54, 56, 57, 58, 59, 63, 65, 66, 67, 71, 72, 73, 74, 76, 79, 81, 82, 83, 87, 90, 91, 93, 96, 97, 98, 99, 101, 104, 105, 107, 113, 114, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 129, 130, 131, 133, 135, 136, 139, 145, 146, 147, 149, 150, 153, 155, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 184, 185, 187, 189, 190, 192, 194, 196, 198, 201, 202, 203, 204, 205, 207, 209, 210, 213, 214, 215, 216, 217, 219, 222, 223, 226, 227, 230, 231, 233, 234, 235, 237, 238, 240, 241, 243, 244, 247, 248, 249, 250, 252, 253, 257, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 271, 272, 273, 274, 276, 280, 283, 285, 287, 288, 290, 293, 294, 295, 296, 298, 301, 302, 303, 304, 307, 308, 309, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 331, 335, 336, 337, 339, 340, 341, 342, 343, 344, 347, 349, 352, 353, 354, 357, 358, 359, 360, 361, 363, 367, 368, 369, 375, 376, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 393, 394, 395, 396, 399, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 449, 468, 469, 470, 471, 472, 473, 474, 475, 500, 522, 530, 531, 533, 536, 548, 560, 561, 562, 568, 569, 581, 582, 588, 610, 616, 626, 631, 632, 637, 639, 650, 654, 657, 658, 665, 667, 672, 673, 674, 675, 676, 691, 710, 717, 719, 724, 744, 754, 762, 779, 803, 819, 821, 842, 843, 844, 846, 848, 849, 850, 851, 852, 863, 872, 873, 874, 880, 885, 886, 888, 889, 890, 891, 893, 896, 900, 904, 952, 954, 977, 978, 980, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1013, 1015, 1019, 1020, 1021, 1022, 1023, 1024, 1028, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047], "would": [0, 4, 6, 9, 13, 27, 33, 46, 54, 56, 59, 71, 79, 81, 82, 87, 93, 101, 102, 113, 126, 150, 153, 158, 159, 171, 172, 173, 174, 177, 185, 191, 201, 202, 203, 216, 219, 230, 237, 240, 249, 258, 262, 263, 268, 270, 272, 280, 285, 291, 303, 307, 308, 312, 313, 320, 323, 329, 339, 343, 347, 348, 352, 354, 361, 363, 367, 376, 377, 381, 382, 383, 387, 389, 390, 393, 394, 395, 396, 399, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 431, 445, 464, 467, 481, 482, 483, 488, 526, 531, 533, 535, 540, 543, 551, 553, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 567, 569, 582, 583, 586, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 610, 634, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 674, 675, 677, 678, 699, 701, 707, 711, 712, 719, 754, 780, 783, 787, 797, 799, 811, 825, 833, 834, 843, 851, 858, 885, 886, 888, 889, 890, 891, 892, 893, 898, 900, 901, 903, 906, 908, 909, 910, 911, 945, 948, 977, 978, 981, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 998, 1003, 1008, 1009, 1013, 1015, 1020, 1022, 1024, 1028, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "appreci": [0, 381], "citat": [0, 375, 378, 393], "paper": [0, 150, 177, 262, 378, 387, 393, 408, 410, 441, 448, 477, 503, 533, 540, 562, 640, 657, 665, 666, 670, 675, 678, 691, 786, 837, 846, 849, 892, 893, 984, 988, 991, 994, 1003, 1024, 1031, 1038, 1039], "machin": [0, 4, 6, 8, 9, 13, 28, 64, 74, 86, 119, 146, 147, 150, 153, 158, 169, 173, 175, 191, 196, 213, 216, 243, 262, 265, 268, 280, 300, 305, 307, 312, 314, 319, 322, 335, 340, 343, 347, 352, 354, 367, 368, 370, 374, 375, 376, 378, 379, 381, 384, 387, 388, 393, 394, 395, 397, 402, 406, 408, 412, 413, 415, 416, 418, 436, 438, 447, 470, 471, 477, 501, 503, 509, 515, 516, 517, 529, 531, 533, 540, 543, 554, 555, 556, 557, 558, 559, 563, 564, 565, 592, 593, 609, 610, 613, 618, 621, 633, 637, 638, 640, 642, 643, 644, 649, 650, 653, 654, 655, 656, 657, 658, 675, 681, 682, 691, 707, 712, 723, 733, 739, 741, 783, 786, 795, 825, 826, 840, 841, 846, 849, 856, 857, 858, 860, 878, 880, 886, 900, 901, 902, 903, 905, 906, 910, 911, 956, 977, 978, 980, 981, 984, 985, 986, 988, 989, 991, 994, 995, 996, 998, 1002, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1020, 1024, 1025, 1026, 1028, 1031, 1033, 1043, 1044, 1045, 1046], "python": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 367, 369, 375, 379, 381, 382, 383, 384, 385, 386, 389, 390, 393, 395, 398, 409, 416, 495, 507, 508, 580, 698, 808, 874, 956, 988, 998, 1003, 1004, 1006, 1009, 1012, 1013, 1015, 1016, 1018, 1024, 1026, 1031, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046], "et": [0, 11, 79, 80, 113, 128, 189, 298, 378, 405, 408, 410, 413, 415, 416, 417, 450, 497, 518, 519, 527, 534, 540, 543, 562, 681, 682, 718, 719, 835, 837, 857, 858, 893, 936, 937, 984, 985, 988, 994, 998, 1000, 1003, 1004, 1039, 1047], "al": [0, 11, 79, 80, 113, 128, 189, 298, 378, 405, 408, 410, 413, 415, 416, 417, 450, 497, 518, 519, 527, 534, 540, 543, 562, 681, 682, 718, 719, 835, 837, 857, 858, 893, 936, 937, 984, 985, 988, 994, 998, 1000, 1003, 1004, 1039, 1044, 1047], "jmlr": [0, 408, 665, 666, 675, 703, 984, 1003], "12": [0, 4, 6, 13, 15, 16, 21, 35, 36, 41, 43, 44, 54, 56, 57, 58, 74, 75, 86, 99, 108, 122, 123, 127, 150, 156, 157, 158, 166, 171, 172, 174, 175, 181, 185, 187, 201, 209, 219, 222, 225, 226, 228, 230, 231, 233, 234, 241, 244, 245, 249, 250, 261, 262, 264, 265, 268, 274, 288, 304, 311, 312, 313, 322, 347, 354, 378, 379, 386, 394, 396, 398, 400, 401, 408, 412, 416, 442, 446, 448, 481, 482, 483, 484, 531, 533, 540, 569, 663, 668, 670, 684, 685, 688, 691, 692, 795, 796, 798, 815, 818, 831, 852, 868, 977, 978, 980, 984, 986, 989, 998, 1002, 1003, 1006, 1010, 1015, 1020, 1029, 1032, 1034, 1038, 1039, 1041, 1042, 1047], "pp": [0, 64, 150, 261, 378, 408, 410, 416, 419, 420, 443, 447, 451, 461, 510, 532, 533, 540, 589, 634, 642, 663, 684, 685, 719, 724, 728, 738, 754, 767, 781, 835, 837, 839, 856, 876, 888, 981, 988, 990, 991, 1001], "2825": 0, "2830": 0, "2011": [0, 48, 172, 223, 387, 413, 416, 534, 537, 539, 540, 546, 589, 626, 637, 657, 728, 978, 992, 1002, 1007, 1031], "bibtex": 0, "entri": [0, 17, 72, 76, 133, 166, 171, 172, 258, 317, 353, 363, 385, 387, 389, 394, 395, 405, 406, 408, 413, 415, 418, 462, 471, 530, 531, 536, 544, 545, 560, 561, 587, 590, 593, 610, 619, 631, 637, 639, 646, 650, 652, 654, 655, 658, 660, 662, 663, 664, 672, 674, 681, 682, 684, 685, 698, 703, 706, 708, 711, 714, 715, 717, 724, 727, 728, 729, 732, 733, 736, 741, 754, 756, 757, 781, 783, 786, 787, 790, 791, 810, 824, 840, 841, 848, 849, 850, 851, 852, 871, 877, 889, 974, 977, 978, 984, 988, 991, 998, 1003, 1009, 1015, 1038, 1041, 1042, 1044, 1048], "articl": [0, 18, 71, 352, 376, 380, 381, 389, 412, 421, 474, 704, 984, 988, 1024, 1044], "titl": [0, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 21, 22, 25, 26, 27, 28, 31, 33, 38, 39, 40, 42, 45, 46, 47, 49, 50, 52, 53, 55, 56, 57, 58, 59, 60, 62, 63, 64, 79, 80, 82, 83, 86, 87, 91, 92, 96, 97, 98, 99, 100, 104, 105, 106, 114, 115, 116, 119, 121, 122, 123, 126, 127, 129, 132, 135, 136, 142, 145, 146, 148, 149, 150, 153, 154, 155, 157, 158, 159, 160, 161, 171, 180, 181, 183, 185, 186, 188, 189, 190, 193, 194, 200, 201, 203, 205, 206, 207, 209, 210, 215, 218, 219, 222, 223, 224, 230, 234, 235, 236, 238, 239, 240, 247, 248, 249, 250, 251, 252, 253, 256, 257, 261, 262, 263, 265, 266, 267, 271, 272, 276, 287, 288, 291, 292, 293, 294, 296, 297, 298, 307, 311, 312, 313, 314, 328, 331, 335, 336, 337, 338, 339, 342, 343, 348, 349, 352, 358, 359, 360, 380, 381, 385, 389, 409, 988, 1012, 1020], "p": [0, 11, 14, 25, 27, 28, 42, 62, 81, 82, 86, 93, 104, 125, 146, 150, 156, 177, 213, 218, 219, 222, 224, 234, 250, 262, 268, 269, 298, 375, 376, 378, 379, 386, 389, 405, 406, 408, 410, 411, 413, 415, 417, 418, 419, 421, 441, 443, 445, 446, 449, 456, 468, 470, 473, 474, 477, 497, 527, 533, 537, 539, 540, 546, 548, 549, 550, 552, 554, 555, 556, 557, 558, 560, 563, 564, 565, 589, 591, 592, 593, 594, 595, 597, 598, 599, 603, 604, 605, 606, 607, 608, 614, 615, 626, 639, 642, 687, 689, 691, 693, 698, 704, 714, 722, 739, 750, 784, 786, 799, 805, 806, 807, 810, 825, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 856, 860, 861, 876, 888, 894, 910, 911, 912, 981, 982, 984, 985, 986, 988, 990, 991, 992, 993, 994, 995, 998, 1002, 1003, 1006, 1019, 1022, 1031, 1032, 1034, 1037, 1039, 1046, 1047], "ython": 0, "f": [0, 4, 5, 7, 11, 12, 13, 15, 17, 18, 21, 27, 31, 33, 38, 44, 48, 49, 50, 53, 54, 56, 59, 65, 68, 72, 76, 87, 99, 113, 116, 119, 120, 121, 123, 126, 133, 134, 141, 144, 146, 149, 150, 151, 153, 159, 160, 162, 168, 170, 171, 172, 173, 174, 177, 185, 187, 190, 201, 202, 203, 205, 211, 215, 219, 223, 234, 236, 237, 240, 244, 252, 260, 262, 263, 264, 265, 268, 269, 271, 272, 274, 285, 288, 301, 302, 303, 304, 309, 312, 313, 317, 319, 321, 323, 326, 327, 338, 343, 347, 352, 353, 354, 363, 376, 381, 382, 383, 385, 387, 393, 406, 409, 413, 415, 416, 417, 418, 486, 507, 508, 530, 531, 536, 537, 565, 580, 581, 582, 591, 594, 595, 597, 598, 599, 603, 604, 605, 606, 607, 608, 616, 626, 631, 634, 657, 712, 721, 724, 727, 728, 754, 781, 782, 785, 786, 798, 799, 802, 804, 805, 806, 807, 810, 812, 813, 814, 815, 816, 817, 818, 824, 857, 858, 862, 871, 874, 875, 879, 880, 881, 915, 920, 921, 980, 983, 992, 995, 996, 998, 1002, 1010, 1033, 1039, 1040, 1041, 1043, 1045], "g": [0, 4, 7, 8, 10, 12, 17, 25, 26, 27, 28, 33, 54, 56, 66, 71, 74, 83, 87, 104, 113, 116, 117, 125, 126, 133, 140, 153, 154, 155, 156, 158, 160, 161, 162, 166, 170, 183, 186, 201, 202, 203, 205, 219, 223, 227, 236, 237, 247, 262, 266, 267, 273, 283, 291, 307, 312, 329, 346, 347, 354, 363, 367, 373, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 393, 395, 399, 402, 404, 406, 407, 408, 410, 412, 413, 415, 416, 417, 418, 420, 436, 442, 443, 446, 448, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 502, 527, 530, 532, 533, 536, 537, 540, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 587, 588, 589, 590, 592, 593, 596, 603, 609, 610, 616, 621, 622, 629, 632, 633, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 685, 689, 691, 696, 719, 726, 736, 738, 761, 783, 798, 799, 800, 801, 803, 804, 806, 815, 819, 821, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 847, 849, 850, 851, 852, 856, 857, 858, 860, 863, 865, 866, 867, 870, 872, 873, 876, 878, 879, 880, 881, 883, 885, 886, 887, 888, 889, 890, 891, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 936, 937, 948, 956, 977, 978, 982, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 998, 1002, 1003, 1004, 1009, 1012, 1013, 1024, 1031, 1035, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "A": [0, 14, 17, 18, 19, 20, 23, 26, 28, 32, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 54, 55, 57, 58, 60, 61, 62, 63, 65, 68, 69, 76, 79, 82, 87, 93, 97, 98, 99, 104, 114, 115, 120, 121, 123, 132, 136, 139, 140, 141, 142, 147, 148, 149, 153, 156, 158, 160, 161, 162, 168, 171, 172, 185, 189, 202, 205, 211, 215, 216, 219, 223, 237, 240, 250, 262, 263, 265, 269, 276, 280, 301, 307, 309, 312, 317, 319, 322, 327, 328, 329, 331, 333, 339, 344, 352, 353, 354, 359, 361, 363, 367, 369, 370, 375, 376, 378, 379, 381, 383, 384, 386, 389, 393, 394, 395, 396, 397, 399, 403, 405, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 419, 420, 421, 422, 431, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 457, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 487, 489, 490, 491, 493, 496, 499, 500, 501, 502, 503, 507, 509, 510, 511, 512, 513, 519, 521, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 606, 607, 609, 610, 616, 619, 626, 627, 628, 629, 631, 632, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 703, 704, 709, 710, 711, 715, 716, 718, 720, 721, 722, 723, 724, 729, 734, 735, 738, 740, 741, 742, 745, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 762, 764, 765, 772, 773, 774, 775, 776, 779, 786, 788, 789, 791, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 888, 889, 890, 891, 892, 893, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 935, 936, 937, 944, 945, 946, 947, 948, 973, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 998, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1010, 1015, 1016, 1022, 1023, 1024, 1026, 1031, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "v": [0, 4, 9, 13, 14, 17, 18, 20, 28, 31, 34, 35, 37, 38, 39, 40, 41, 42, 45, 48, 50, 56, 57, 59, 69, 71, 76, 78, 81, 83, 84, 85, 86, 88, 96, 98, 99, 102, 104, 117, 119, 120, 121, 126, 127, 128, 139, 146, 153, 168, 169, 174, 175, 179, 181, 190, 199, 200, 201, 202, 204, 205, 206, 207, 210, 216, 220, 226, 234, 248, 249, 252, 253, 255, 258, 277, 278, 280, 296, 314, 317, 336, 348, 353, 363, 368, 373, 378, 379, 381, 387, 389, 395, 404, 405, 406, 407, 410, 411, 413, 416, 431, 440, 444, 451, 461, 462, 463, 464, 469, 472, 473, 474, 475, 476, 481, 482, 483, 495, 511, 523, 529, 530, 536, 540, 544, 545, 549, 551, 553, 555, 557, 559, 561, 563, 564, 567, 569, 580, 588, 592, 593, 599, 605, 610, 629, 630, 633, 634, 638, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 669, 671, 672, 675, 677, 678, 687, 694, 698, 700, 703, 716, 734, 735, 737, 752, 753, 755, 786, 793, 797, 802, 809, 811, 822, 826, 828, 829, 830, 833, 834, 835, 843, 851, 853, 856, 858, 860, 861, 864, 867, 873, 874, 875, 880, 881, 884, 894, 900, 901, 902, 903, 905, 906, 909, 911, 915, 982, 983, 984, 985, 988, 989, 990, 993, 996, 1002, 1003, 1005, 1010, 1026, 1031, 1034, 1035, 1036, 1039, 1041, 1042, 1045, 1046], "b": [0, 8, 10, 25, 27, 60, 66, 81, 102, 104, 115, 116, 122, 126, 127, 136, 139, 140, 154, 155, 156, 161, 166, 183, 185, 186, 201, 202, 207, 219, 238, 240, 261, 265, 267, 272, 276, 283, 320, 329, 363, 376, 378, 381, 385, 386, 387, 405, 406, 408, 411, 412, 413, 416, 436, 481, 499, 540, 565, 587, 588, 589, 590, 606, 607, 609, 610, 627, 645, 646, 647, 648, 657, 668, 671, 673, 675, 679, 686, 687, 704, 718, 728, 729, 790, 791, 808, 809, 847, 873, 874, 875, 876, 879, 880, 888, 915, 937, 938, 951, 978, 980, 984, 985, 986, 988, 991, 993, 998, 1002, 1003, 1019, 1031, 1039, 1042, 1044, 1045, 1046], "o": [0, 18, 20, 28, 31, 39, 50, 56, 61, 62, 64, 65, 83, 86, 92, 98, 130, 150, 161, 189, 194, 199, 201, 216, 236, 247, 262, 264, 271, 307, 308, 312, 318, 321, 330, 343, 357, 367, 376, 378, 381, 398, 408, 410, 413, 415, 419, 421, 443, 446, 447, 449, 472, 474, 533, 603, 626, 665, 666, 691, 828, 856, 871, 912, 956, 980, 982, 984, 985, 988, 989, 991, 992, 1002, 1003, 1004, 1031, 1034, 1037, 1039, 1040, 1043, 1044, 1046, 1047, 1048], "m": [0, 4, 8, 11, 20, 27, 28, 45, 59, 60, 64, 65, 66, 81, 82, 96, 113, 136, 158, 183, 201, 219, 262, 266, 298, 330, 335, 346, 352, 367, 368, 375, 376, 378, 379, 385, 387, 395, 398, 405, 406, 408, 410, 413, 415, 417, 419, 443, 444, 445, 449, 456, 472, 473, 499, 512, 527, 531, 533, 535, 540, 638, 644, 648, 663, 670, 684, 685, 688, 692, 707, 715, 724, 739, 754, 756, 757, 795, 796, 846, 871, 937, 967, 968, 978, 980, 982, 984, 985, 986, 988, 989, 990, 991, 992, 996, 998, 1002, 1004, 1013, 1039, 1040, 1041, 1042, 1045, 1046, 1047], "r": [0, 8, 10, 11, 12, 14, 17, 25, 26, 27, 28, 40, 44, 66, 76, 79, 80, 81, 82, 87, 96, 104, 107, 113, 116, 117, 122, 126, 127, 128, 136, 146, 154, 155, 156, 160, 161, 162, 165, 166, 171, 183, 185, 186, 190, 201, 208, 211, 219, 227, 233, 236, 247, 250, 253, 261, 262, 265, 267, 268, 269, 272, 275, 277, 283, 287, 288, 292, 296, 298, 313, 321, 341, 343, 354, 363, 376, 378, 382, 385, 393, 395, 405, 406, 408, 410, 411, 412, 413, 415, 416, 425, 431, 436, 445, 450, 452, 464, 468, 473, 477, 481, 482, 483, 497, 503, 512, 519, 533, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 566, 567, 568, 569, 587, 588, 589, 590, 605, 608, 609, 610, 626, 634, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 684, 685, 691, 695, 715, 720, 721, 722, 726, 728, 779, 783, 786, 797, 811, 814, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 850, 851, 857, 858, 871, 876, 888, 895, 896, 900, 901, 902, 903, 905, 906, 908, 909, 910, 911, 913, 954, 978, 980, 982, 984, 985, 988, 989, 990, 991, 992, 995, 996, 998, 1002, 1003, 1004, 1008, 1024, 1031, 1035, 1038, 1041, 1042, 1043, 1044, 1046, 1048], "d": [0, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 20, 32, 33, 38, 39, 43, 49, 50, 51, 61, 62, 64, 71, 72, 83, 90, 93, 96, 99, 104, 106, 124, 153, 161, 201, 209, 217, 219, 227, 231, 233, 234, 235, 236, 250, 261, 262, 270, 283, 291, 292, 298, 303, 326, 327, 330, 339, 343, 344, 354, 375, 376, 378, 383, 387, 393, 406, 408, 410, 411, 413, 415, 416, 418, 419, 443, 445, 446, 451, 459, 462, 487, 492, 502, 525, 533, 535, 556, 557, 564, 565, 580, 581, 589, 613, 614, 618, 621, 622, 643, 644, 647, 668, 669, 670, 679, 687, 688, 691, 692, 696, 698, 704, 707, 720, 721, 722, 724, 754, 762, 766, 776, 779, 786, 809, 835, 837, 839, 840, 841, 856, 867, 871, 873, 874, 876, 888, 893, 910, 911, 915, 980, 982, 984, 985, 986, 987, 988, 990, 996, 998, 1000, 1003, 1004, 1012, 1020, 1021, 1022, 1034, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047], "perrot": [0, 1031], "e": [0, 4, 8, 10, 11, 13, 17, 26, 27, 33, 35, 54, 56, 58, 62, 71, 79, 81, 82, 83, 86, 87, 91, 99, 101, 102, 113, 116, 123, 125, 126, 129, 139, 146, 149, 150, 161, 170, 171, 172, 177, 181, 185, 190, 191, 201, 202, 203, 205, 219, 222, 223, 236, 237, 258, 262, 263, 265, 267, 268, 276, 277, 280, 283, 291, 298, 309, 312, 317, 319, 347, 354, 359, 360, 361, 363, 367, 368, 369, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 393, 394, 395, 398, 399, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 436, 438, 440, 442, 443, 444, 446, 448, 449, 453, 462, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 495, 497, 499, 500, 501, 502, 523, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 576, 580, 581, 587, 588, 589, 590, 592, 593, 596, 602, 603, 605, 606, 607, 608, 609, 610, 616, 621, 622, 629, 632, 633, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 686, 687, 689, 691, 693, 696, 698, 700, 703, 704, 707, 708, 726, 727, 728, 729, 736, 739, 740, 753, 761, 765, 783, 786, 795, 796, 797, 798, 799, 800, 801, 803, 804, 806, 810, 811, 815, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 856, 857, 858, 860, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 885, 886, 887, 888, 889, 890, 891, 895, 896, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 915, 931, 936, 937, 939, 942, 943, 945, 948, 956, 963, 974, 977, 978, 980, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 998, 999, 1002, 1003, 1004, 1009, 1012, 1013, 1022, 1023, 1024, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "journal": [0, 82, 172, 262, 268, 280, 375, 376, 378, 406, 408, 410, 415, 451, 461, 472, 533, 540, 626, 634, 644, 688, 691, 692, 704, 714, 729, 732, 733, 756, 757, 784, 825, 830, 876, 888, 977, 978, 982, 984, 985, 986, 989, 995, 1000, 1002, 1003], "research": [0, 150, 170, 262, 268, 280, 376, 378, 393, 408, 500, 512, 634, 644, 691, 733, 825, 830, 977, 985, 989, 991, 1003, 1008, 1009, 1013], "volum": [0, 67, 80, 150, 158, 376, 378, 408, 410, 472, 533, 767, 984, 1003, 1013], "page": [0, 12, 18, 27, 72, 73, 118, 120, 121, 129, 130, 133, 136, 147, 150, 158, 171, 172, 173, 182, 222, 231, 232, 233, 237, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 304, 313, 318, 319, 321, 322, 328, 361, 367, 376, 378, 381, 383, 385, 387, 389, 396, 407, 408, 410, 472, 515, 516, 517, 627, 643, 830, 895, 937, 978, 984, 988, 989, 1015, 1024, 1029, 1031, 1035, 1036], "want": [0, 4, 12, 21, 25, 26, 27, 56, 65, 72, 150, 166, 171, 201, 202, 203, 237, 240, 253, 262, 276, 280, 288, 303, 331, 336, 352, 363, 367, 368, 369, 379, 380, 382, 383, 385, 386, 387, 393, 394, 395, 396, 398, 399, 402, 406, 407, 408, 409, 410, 415, 416, 417, 499, 502, 503, 509, 534, 548, 653, 654, 655, 657, 658, 665, 667, 673, 674, 675, 762, 846, 849, 865, 872, 893, 900, 977, 984, 987, 988, 989, 992, 994, 998, 999, 1003, 1008, 1009, 1015, 1023, 1031, 1045], "its": [0, 4, 9, 12, 13, 14, 20, 27, 35, 38, 56, 66, 67, 79, 81, 83, 87, 91, 92, 93, 101, 111, 113, 119, 122, 126, 139, 150, 153, 158, 160, 171, 172, 174, 177, 180, 190, 214, 218, 219, 224, 230, 237, 239, 240, 242, 244, 247, 252, 253, 261, 265, 267, 269, 271, 285, 287, 291, 292, 309, 320, 329, 336, 343, 349, 352, 353, 357, 361, 363, 368, 369, 374, 375, 376, 377, 381, 382, 383, 385, 386, 389, 393, 394, 395, 396, 398, 399, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 424, 439, 440, 441, 443, 444, 445, 449, 453, 455, 459, 462, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 496, 502, 522, 530, 532, 533, 536, 537, 539, 540, 541, 543, 549, 552, 554, 555, 556, 557, 558, 559, 563, 564, 565, 582, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 610, 611, 612, 613, 614, 615, 618, 619, 620, 621, 622, 623, 624, 626, 643, 644, 670, 671, 673, 684, 685, 686, 687, 691, 695, 698, 707, 723, 727, 728, 734, 735, 739, 776, 779, 781, 795, 796, 797, 821, 828, 829, 831, 842, 843, 844, 846, 847, 848, 850, 851, 852, 859, 860, 864, 869, 872, 873, 875, 892, 893, 896, 900, 901, 908, 910, 920, 921, 926, 932, 956, 958, 977, 980, 983, 984, 985, 987, 988, 989, 990, 991, 994, 995, 996, 1001, 1002, 1003, 1004, 1008, 1013, 1015, 1017, 1019, 1022, 1023, 1024, 1033, 1034, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "api": [0, 12, 51, 57, 72, 109, 110, 118, 168, 229, 231, 237, 241, 242, 245, 259, 264, 271, 272, 285, 353, 354, 369, 370, 374, 375, 381, 382, 384, 385, 390, 391, 393, 394, 396, 398, 402, 413, 415, 416, 418, 422, 425, 426, 427, 430, 432, 437, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 495, 503, 507, 509, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 562, 563, 565, 566, 567, 568, 569, 578, 579, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 610, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 657, 676, 687, 688, 689, 690, 691, 701, 795, 796, 800, 801, 803, 819, 826, 844, 846, 848, 849, 852, 856, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 898, 904, 905, 954, 956, 972, 977, 986, 987, 988, 991, 998, 1002, 1008, 1009, 1010, 1013, 1015, 1019, 1021, 1026, 1028, 1029, 1030, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "design": [0, 14, 21, 81, 113, 133, 156, 170, 171, 182, 252, 307, 313, 361, 369, 375, 381, 386, 393, 394, 395, 396, 397, 408, 415, 417, 514, 527, 631, 632, 647, 664, 668, 675, 679, 684, 797, 815, 816, 835, 837, 978, 984, 985, 988, 989, 998, 1008, 1009, 1013, 1017, 1033, 1040], "mai": [0, 8, 20, 26, 40, 45, 47, 57, 72, 87, 96, 123, 150, 157, 159, 161, 171, 174, 177, 181, 185, 190, 205, 207, 227, 237, 240, 265, 267, 269, 270, 301, 312, 327, 339, 343, 347, 352, 353, 354, 363, 367, 368, 369, 373, 375, 376, 377, 378, 380, 381, 383, 385, 386, 389, 393, 395, 396, 399, 402, 405, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 431, 438, 439, 440, 442, 443, 444, 445, 446, 448, 450, 451, 452, 453, 458, 461, 464, 468, 471, 481, 482, 483, 486, 487, 488, 495, 507, 508, 514, 533, 534, 537, 539, 543, 546, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 571, 573, 580, 593, 596, 601, 609, 610, 616, 619, 633, 634, 636, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 675, 676, 677, 678, 680, 683, 685, 687, 688, 690, 691, 692, 694, 696, 704, 711, 714, 715, 717, 718, 720, 721, 722, 724, 736, 754, 761, 783, 784, 797, 799, 800, 801, 802, 811, 812, 813, 814, 816, 817, 821, 825, 828, 833, 834, 835, 836, 837, 839, 842, 843, 844, 846, 848, 850, 851, 852, 858, 859, 860, 863, 865, 875, 877, 878, 879, 880, 881, 883, 889, 892, 893, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 918, 940, 941, 956, 977, 978, 980, 982, 984, 985, 988, 989, 990, 991, 992, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1009, 1015, 1021, 1022, 1031, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "consid": [0, 4, 12, 13, 14, 21, 26, 40, 56, 67, 72, 82, 91, 96, 100, 123, 124, 126, 145, 149, 150, 166, 172, 201, 203, 237, 262, 265, 269, 273, 285, 288, 291, 292, 307, 319, 336, 343, 344, 347, 352, 363, 367, 368, 369, 373, 380, 381, 383, 387, 389, 393, 395, 396, 404, 408, 413, 414, 415, 416, 417, 418, 419, 420, 437, 443, 445, 449, 456, 473, 507, 508, 520, 532, 548, 549, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 584, 585, 587, 588, 590, 592, 606, 607, 619, 630, 631, 632, 645, 651, 657, 658, 659, 661, 670, 678, 687, 688, 689, 691, 692, 693, 695, 699, 701, 704, 706, 708, 714, 724, 728, 732, 754, 784, 786, 792, 842, 843, 844, 846, 848, 850, 851, 852, 855, 857, 858, 863, 873, 874, 881, 895, 896, 905, 906, 908, 909, 910, 911, 972, 977, 983, 984, 985, 986, 988, 989, 991, 994, 995, 996, 998, 1002, 1003, 1004, 1009, 1015, 1022, 1034, 1035, 1039, 1043, 1044, 1046, 1047, 1048], "softwar": [0, 150, 367, 378, 381, 389, 393, 395, 416, 626, 634, 657, 978, 1013], "from": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 172, 174, 175, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 314, 315, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 367, 369, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 394, 395, 396, 397, 398, 399, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 431, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 501, 503, 505, 506, 507, 508, 509, 511, 514, 518, 520, 522, 523, 525, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 683, 686, 687, 688, 689, 690, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 716, 717, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 732, 733, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 761, 762, 766, 767, 769, 771, 772, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 927, 928, 929, 930, 931, 932, 935, 937, 939, 940, 941, 942, 945, 946, 947, 949, 950, 951, 952, 953, 955, 956, 959, 962, 976, 977, 978, 980, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1010, 1013, 1016, 1018, 1019, 1020, 1021, 1026, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "2013": [0, 177, 378, 408, 412, 413, 535, 724, 754, 980, 988, 1007, 1032, 1033], "inproceed": 0, "sklearn_api": 0, "ga": 0, "l": [0, 7, 14, 17, 18, 41, 47, 48, 67, 68, 82, 116, 150, 173, 193, 196, 205, 210, 211, 267, 268, 269, 280, 302, 311, 347, 378, 379, 387, 389, 405, 406, 408, 412, 413, 415, 418, 473, 515, 516, 517, 537, 539, 546, 554, 555, 556, 557, 564, 565, 589, 606, 607, 609, 610, 614, 618, 621, 622, 633, 647, 648, 657, 668, 671, 673, 679, 686, 688, 691, 692, 704, 714, 723, 724, 729, 754, 784, 837, 871, 908, 909, 910, 911, 977, 982, 984, 985, 988, 990, 991, 992, 996, 1000, 1002, 1004, 1023, 1034, 1039, 1043, 1044, 1045, 1046], "booktitl": 0, "ecml": 0, "pkdd": 0, "workshop": [0, 408, 416, 835, 990, 1007], "languag": [0, 354, 386, 402, 413, 416, 1002, 1008, 1009, 1013, 1016], "data": [0, 3, 6, 8, 11, 13, 14, 15, 16, 17, 20, 22, 26, 31, 32, 33, 34, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 52, 53, 54, 55, 57, 60, 61, 62, 63, 66, 69, 70, 72, 73, 75, 77, 80, 82, 91, 93, 95, 96, 99, 100, 105, 107, 108, 111, 113, 115, 116, 118, 119, 122, 123, 124, 125, 126, 130, 131, 132, 134, 136, 139, 140, 141, 142, 147, 152, 153, 154, 155, 157, 158, 160, 162, 163, 165, 168, 171, 172, 179, 180, 183, 184, 185, 186, 190, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 214, 215, 217, 218, 219, 220, 222, 223, 224, 225, 226, 230, 233, 234, 235, 237, 239, 240, 241, 244, 247, 248, 249, 250, 251, 253, 256, 260, 262, 264, 265, 266, 267, 270, 276, 280, 283, 285, 289, 291, 293, 294, 295, 296, 298, 302, 303, 306, 308, 309, 310, 314, 315, 317, 319, 321, 322, 323, 327, 328, 330, 331, 335, 336, 338, 343, 344, 352, 358, 359, 360, 361, 366, 368, 370, 373, 374, 375, 377, 378, 381, 383, 384, 387, 388, 389, 390, 394, 398, 399, 402, 404, 405, 406, 407, 410, 413, 414, 415, 416, 418, 419, 420, 421, 423, 425, 426, 427, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 512, 513, 514, 519, 520, 521, 522, 523, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 616, 617, 621, 624, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 696, 697, 698, 699, 700, 701, 703, 704, 706, 707, 709, 710, 712, 716, 717, 719, 723, 725, 726, 727, 728, 729, 732, 734, 735, 736, 738, 739, 752, 753, 755, 759, 761, 762, 767, 781, 782, 783, 785, 786, 787, 791, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 918, 919, 920, 921, 924, 925, 926, 936, 937, 951, 954, 959, 960, 962, 963, 964, 965, 966, 969, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1017, 1019, 1020, 1022, 1026, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "mine": [0, 262, 353, 376, 408, 419, 443, 510, 562, 719, 732, 738, 781, 984, 988, 994, 1000], "108": [0, 8, 1032], "122": [0, 13, 26, 29, 115, 158, 166, 172, 235, 251, 254, 387, 989, 1010], "high": [0, 4, 9, 11, 12, 26, 28, 32, 38, 41, 45, 50, 56, 58, 63, 66, 71, 75, 81, 82, 98, 99, 116, 118, 119, 120, 121, 126, 127, 129, 131, 141, 142, 150, 153, 159, 166, 170, 172, 173, 174, 185, 196, 202, 203, 205, 215, 222, 223, 224, 230, 234, 247, 253, 260, 264, 268, 269, 277, 291, 292, 301, 303, 309, 311, 312, 313, 314, 323, 329, 336, 338, 339, 352, 353, 359, 360, 367, 376, 378, 381, 386, 389, 390, 393, 394, 405, 406, 407, 408, 412, 414, 415, 416, 417, 418, 443, 446, 448, 449, 451, 468, 481, 482, 483, 552, 553, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 643, 669, 670, 678, 688, 691, 692, 724, 729, 740, 744, 754, 787, 790, 805, 807, 840, 841, 845, 874, 875, 879, 881, 902, 904, 905, 908, 909, 910, 911, 977, 982, 983, 984, 985, 987, 988, 991, 992, 994, 996, 998, 1000, 1003, 1004, 1005, 1008, 1009, 1015, 1016, 1018, 1024, 1031, 1032, 1034, 1035, 1039, 1042, 1043, 1044, 1045, 1046], "qualiti": [0, 6, 21, 25, 38, 47, 49, 50, 59, 99, 122, 171, 207, 256, 260, 269, 270, 271, 343, 381, 389, 393, 395, 402, 403, 407, 408, 410, 413, 451, 461, 468, 473, 556, 557, 558, 559, 563, 564, 741, 811, 892, 893, 908, 909, 910, 911, 937, 983, 985, 993, 1000, 1004, 1008, 1009, 1013, 1019, 1020, 1026], "png": [0, 33, 912], "svg": 0, "logo": [0, 412, 804], "avail": [0, 5, 11, 12, 14, 42, 57, 58, 99, 121, 124, 125, 150, 153, 158, 162, 170, 171, 172, 190, 201, 209, 219, 223, 237, 240, 259, 260, 265, 266, 269, 290, 291, 292, 298, 312, 317, 318, 319, 320, 322, 323, 329, 331, 363, 367, 375, 376, 378, 379, 380, 381, 382, 386, 390, 394, 395, 398, 402, 405, 407, 408, 409, 412, 413, 414, 415, 416, 417, 419, 446, 449, 450, 451, 452, 468, 469, 470, 471, 472, 473, 474, 475, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 507, 534, 548, 554, 555, 556, 557, 558, 559, 563, 564, 587, 590, 592, 593, 609, 610, 631, 632, 646, 650, 652, 654, 656, 660, 662, 664, 667, 669, 671, 672, 673, 675, 688, 695, 698, 730, 731, 797, 800, 801, 811, 822, 823, 828, 829, 830, 831, 832, 833, 834, 846, 857, 858, 860, 867, 876, 879, 884, 888, 893, 944, 949, 956, 978, 982, 985, 987, 988, 989, 990, 991, 994, 998, 1001, 1002, 1003, 1007, 1008, 1009, 1013, 1015, 1019, 1024, 1026, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1047], "doc": [0, 4, 8, 20, 352, 354, 368, 379, 381, 385, 386, 389, 395, 398, 401, 402, 416, 587, 588, 590, 776, 779, 790, 791, 823, 1024, 1031, 1035, 1045], "sourc": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 363, 375, 378, 380, 381, 382, 384, 385, 387, 389, 390, 393, 394, 398, 402, 405, 409, 413, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 973, 974, 975, 976, 985, 998, 1004, 1008, 1010, 1013, 1023, 1024, 1041, 1045], "directori": [0, 8, 287, 375, 379, 381, 383, 387, 389, 395, 398, 409, 440, 444, 449, 485, 498, 860, 861, 1045], "driven": [0, 174, 1013], "howev": [0, 4, 5, 7, 13, 14, 25, 26, 28, 38, 48, 50, 54, 56, 61, 73, 76, 79, 83, 86, 101, 104, 116, 118, 119, 123, 126, 127, 133, 147, 150, 153, 158, 159, 172, 173, 182, 190, 201, 205, 223, 226, 227, 230, 236, 237, 262, 269, 276, 280, 283, 285, 290, 302, 307, 319, 343, 347, 352, 353, 363, 367, 368, 369, 375, 376, 378, 379, 380, 381, 383, 387, 389, 393, 395, 399, 402, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 439, 442, 446, 448, 450, 453, 458, 495, 507, 531, 550, 566, 580, 581, 582, 588, 605, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 629, 631, 632, 637, 642, 654, 655, 671, 686, 691, 694, 699, 761, 763, 797, 800, 801, 811, 823, 827, 828, 839, 857, 858, 863, 872, 873, 878, 902, 903, 905, 916, 977, 978, 981, 982, 983, 984, 985, 987, 988, 989, 991, 992, 993, 995, 996, 998, 1002, 1003, 1004, 1015, 1019, 1022, 1040, 1041, 1043, 1044, 1047], "institut": [0, 378, 991], "privat": [0, 385, 395, 396, 916, 1013, 1031, 1039, 1041, 1042, 1044, 1045, 1048], "grant": [0, 240, 381], "assur": [0, 395, 795, 796, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "sustain": 0, "like": [0, 4, 12, 13, 20, 53, 56, 59, 61, 71, 90, 93, 99, 104, 106, 111, 113, 115, 120, 126, 129, 153, 159, 171, 181, 201, 253, 262, 265, 266, 269, 270, 276, 294, 304, 307, 312, 313, 317, 329, 339, 343, 352, 353, 363, 367, 369, 373, 375, 376, 379, 380, 381, 383, 385, 388, 389, 390, 393, 394, 395, 402, 404, 406, 408, 409, 411, 412, 413, 415, 416, 417, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 432, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 458, 459, 460, 461, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 511, 512, 514, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 578, 580, 581, 582, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 925, 926, 934, 939, 942, 951, 952, 956, 959, 960, 961, 973, 975, 977, 980, 982, 983, 984, 985, 988, 990, 991, 992, 994, 995, 998, 1003, 1004, 1008, 1009, 1012, 1013, 1015, 1022, 1024, 1028, 1031, 1034, 1035, 1038, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1048], "thank": [0, 4, 18, 26, 56, 87, 173, 177, 201, 271, 352, 353, 380, 389, 1008, 1013, 1031, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "funder": 0, "member": [0, 352, 353, 376, 381, 384, 396, 408, 423, 441, 445, 447, 450, 452, 491, 554, 555, 556, 557, 562, 563, 564, 565, 580, 657, 658, 665, 666, 667, 675, 676, 677, 703, 704, 714, 716, 729, 734, 735, 755, 784, 793, 797, 900, 984, 991, 1015, 1031, 1043, 1046], "consortium": [0, 1013], "foundat": [0, 133, 381, 406, 991], "fran\u00e7oi": [0, 1034], "goupil": 0, "nvidia": [0, 393], "2022": [0, 368, 415, 704, 998, 1045, 1046], "face": [0, 3, 5, 15, 16, 37, 49, 52, 54, 69, 95, 99, 101, 104, 106, 107, 108, 121, 168, 177, 229, 234, 236, 245, 352, 374, 381, 385, 408, 413, 415, 417, 448, 471, 492, 493, 494, 520, 531, 532, 536, 538, 539, 540, 542, 557, 583, 656, 672, 696, 712, 811, 826, 843, 880, 905, 923, 991, 1004, 1005, 1006, 1010, 1018, 1023, 1026, 1031, 1039], "2023": [0, 406, 1046, 1047], "microsoft": [0, 12, 379, 382, 398], "m\u00fcller": [0, 32, 308, 309, 396, 413, 534, 866, 992, 998, 1002, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1045], "2020": [0, 376, 1041, 1042, 1043, 1044], "quansight": 0, "lab": [0, 376, 467, 535, 898, 1013, 1042], "2021": [0, 379, 381, 670, 1043, 1044], "columbia": 0, "univers": [0, 161, 352, 376, 378, 384, 408, 413, 416, 589, 786, 835, 839, 895, 984, 986, 988, 990], "2016": [0, 227, 375, 408, 977, 1036, 1037], "sydnei": 0, "2017": [0, 262, 375, 406, 408, 419, 443, 988, 1037, 1038], "receiv": [0, 20, 139, 168, 231, 237, 243, 255, 257, 259, 264, 269, 278, 329, 354, 363, 381, 383, 389, 395, 412, 415, 503, 657, 701, 705, 707, 725, 780, 786, 787, 816, 826, 828, 829, 867, 905, 989, 992, 993, 1002, 1010, 1041, 1042], "improv": [0, 4, 25, 26, 34, 79, 80, 83, 101, 107, 113, 114, 119, 122, 124, 125, 126, 128, 133, 146, 166, 171, 177, 187, 201, 209, 219, 263, 265, 280, 285, 288, 304, 312, 323, 342, 343, 353, 363, 368, 379, 384, 386, 387, 389, 390, 393, 395, 396, 402, 407, 413, 415, 417, 448, 449, 530, 531, 533, 536, 537, 538, 540, 541, 542, 545, 553, 556, 557, 558, 559, 560, 561, 563, 564, 609, 610, 642, 651, 663, 665, 666, 667, 671, 672, 673, 674, 675, 677, 684, 686, 691, 727, 728, 782, 785, 786, 849, 857, 858, 874, 876, 888, 908, 909, 911, 937, 982, 984, 985, 988, 991, 992, 1002, 1003, 1004, 1007, 1008, 1009, 1013, 1022, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "alfr": 0, "sloan": 0, "posit": [0, 4, 6, 8, 11, 12, 17, 25, 26, 28, 68, 107, 130, 135, 170, 171, 185, 186, 196, 201, 202, 203, 205, 219, 225, 234, 240, 259, 262, 265, 269, 271, 272, 307, 318, 319, 323, 352, 361, 367, 376, 380, 381, 383, 388, 390, 395, 396, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 420, 437, 438, 441, 445, 446, 448, 463, 466, 493, 497, 499, 503, 507, 508, 509, 524, 526, 528, 529, 530, 532, 534, 535, 536, 541, 544, 545, 547, 548, 549, 556, 560, 561, 562, 563, 591, 592, 593, 594, 595, 597, 598, 599, 605, 609, 610, 619, 630, 631, 642, 645, 646, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 668, 671, 672, 673, 674, 676, 679, 680, 681, 682, 683, 686, 689, 697, 699, 701, 706, 708, 711, 712, 714, 717, 719, 722, 725, 727, 728, 729, 733, 734, 736, 737, 738, 739, 740, 741, 742, 750, 752, 756, 764, 780, 781, 782, 785, 786, 787, 795, 796, 800, 801, 823, 840, 841, 842, 844, 846, 848, 850, 852, 853, 863, 864, 867, 873, 876, 879, 884, 888, 892, 893, 895, 896, 900, 901, 904, 905, 906, 908, 910, 917, 935, 937, 953, 955, 979, 980, 984, 986, 988, 989, 991, 992, 993, 995, 998, 1003, 1020, 1022, 1024, 1032, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "It": [0, 4, 7, 8, 9, 13, 17, 21, 26, 35, 38, 41, 54, 56, 59, 73, 79, 81, 83, 96, 99, 100, 106, 113, 116, 118, 119, 122, 126, 133, 150, 158, 159, 160, 165, 166, 171, 172, 173, 181, 185, 189, 190, 198, 201, 205, 215, 218, 219, 222, 223, 230, 235, 237, 240, 257, 258, 260, 262, 263, 265, 268, 269, 280, 285, 291, 292, 293, 295, 296, 298, 307, 311, 312, 314, 317, 323, 335, 339, 343, 347, 352, 353, 354, 363, 367, 368, 369, 374, 376, 378, 379, 381, 383, 385, 386, 387, 389, 390, 393, 394, 395, 398, 399, 402, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 433, 436, 437, 440, 441, 442, 443, 444, 446, 447, 448, 451, 458, 461, 466, 467, 468, 473, 477, 484, 486, 495, 507, 514, 523, 532, 534, 535, 537, 539, 540, 548, 549, 552, 553, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 588, 595, 601, 605, 606, 607, 610, 613, 614, 618, 619, 621, 622, 626, 629, 630, 631, 632, 640, 641, 642, 645, 646, 649, 651, 652, 653, 654, 657, 659, 660, 661, 662, 665, 666, 667, 669, 670, 671, 673, 675, 676, 677, 680, 681, 682, 683, 686, 688, 690, 691, 692, 694, 695, 696, 697, 698, 699, 701, 703, 707, 708, 709, 715, 721, 732, 740, 741, 745, 756, 757, 760, 763, 779, 781, 797, 799, 800, 801, 803, 809, 810, 811, 819, 821, 824, 827, 836, 837, 842, 843, 844, 846, 849, 850, 851, 852, 856, 857, 858, 862, 863, 864, 868, 869, 870, 874, 877, 879, 889, 892, 893, 897, 898, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 924, 937, 945, 946, 956, 959, 962, 964, 965, 966, 967, 968, 969, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 998, 999, 1001, 1002, 1003, 1004, 1008, 1013, 1015, 1021, 1022, 1023, 1024, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "provid": [0, 5, 8, 11, 13, 25, 28, 31, 35, 38, 43, 56, 61, 82, 96, 115, 120, 121, 131, 133, 153, 159, 171, 172, 180, 187, 189, 190, 193, 202, 205, 210, 223, 227, 231, 232, 237, 252, 262, 263, 264, 268, 295, 298, 303, 307, 311, 317, 318, 320, 322, 337, 343, 344, 347, 352, 353, 357, 358, 361, 363, 367, 369, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 389, 390, 393, 394, 395, 397, 398, 399, 402, 404, 405, 407, 408, 409, 410, 412, 413, 415, 416, 417, 418, 419, 420, 429, 436, 439, 441, 442, 443, 445, 446, 448, 449, 451, 458, 459, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 492, 493, 495, 497, 500, 531, 532, 533, 534, 537, 539, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 587, 589, 590, 592, 593, 600, 604, 609, 610, 626, 631, 632, 633, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 689, 693, 698, 710, 733, 739, 740, 762, 772, 776, 786, 790, 792, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 809, 810, 811, 815, 816, 817, 818, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 857, 858, 860, 863, 865, 866, 867, 870, 871, 872, 875, 877, 879, 880, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 915, 926, 931, 945, 947, 964, 965, 966, 977, 978, 980, 983, 984, 985, 987, 988, 989, 991, 992, 993, 994, 995, 996, 998, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1013, 1015, 1019, 1022, 1024, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "2012": [0, 82, 406, 415, 554, 555, 562, 638, 741, 977, 981, 988, 1007, 1031], "full": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 367, 368, 369, 374, 376, 379, 381, 383, 386, 389, 393, 395, 396, 398, 404, 407, 408, 410, 412, 413, 416, 440, 444, 446, 448, 458, 487, 488, 491, 495, 496, 499, 500, 501, 502, 503, 504, 506, 509, 534, 536, 540, 558, 559, 566, 567, 631, 647, 649, 653, 668, 679, 720, 721, 726, 743, 744, 746, 748, 749, 751, 783, 788, 789, 795, 796, 808, 837, 926, 977, 984, 987, 990, 991, 995, 998, 1001, 1009, 1022, 1031, 1035, 1037, 1039, 1041, 1042, 1044, 1045, 1047, 1048], "time": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 353, 354, 357, 358, 359, 360, 361, 363, 367, 368, 369, 375, 376, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 393, 395, 396, 399, 404, 405, 406, 407, 408, 410, 411, 413, 415, 416, 419, 436, 440, 442, 443, 444, 445, 446, 449, 451, 454, 456, 457, 458, 460, 461, 462, 463, 464, 466, 467, 471, 495, 498, 500, 518, 522, 533, 535, 537, 539, 546, 561, 566, 567, 568, 569, 589, 609, 618, 626, 627, 628, 629, 633, 638, 639, 642, 645, 649, 651, 653, 659, 661, 663, 665, 666, 672, 675, 676, 677, 684, 685, 689, 691, 693, 700, 740, 743, 744, 746, 788, 792, 795, 796, 797, 799, 800, 801, 802, 804, 806, 811, 812, 813, 816, 818, 821, 822, 823, 824, 825, 826, 828, 830, 835, 836, 837, 838, 839, 840, 841, 848, 850, 851, 852, 856, 857, 858, 859, 860, 861, 862, 864, 865, 867, 870, 873, 875, 879, 884, 892, 893, 897, 898, 902, 905, 906, 914, 939, 954, 977, 978, 980, 981, 984, 985, 987, 988, 989, 990, 991, 992, 993, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1008, 1013, 1015, 1020, 1022, 1023, 1024, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "host": [0, 119, 323, 352, 376, 381, 385, 389, 390, 893, 956, 1024, 1047], "other": [0, 4, 8, 12, 13, 25, 28, 31, 32, 34, 38, 41, 45, 53, 58, 67, 70, 72, 73, 87, 98, 99, 101, 104, 116, 118, 119, 122, 123, 127, 129, 135, 145, 165, 166, 168, 170, 171, 172, 173, 177, 180, 194, 201, 205, 219, 222, 223, 224, 226, 230, 231, 232, 234, 236, 237, 240, 241, 249, 252, 257, 259, 262, 263, 264, 271, 272, 280, 290, 291, 292, 306, 307, 311, 312, 314, 315, 317, 318, 320, 326, 339, 343, 346, 349, 352, 353, 357, 361, 363, 367, 373, 374, 376, 377, 378, 381, 383, 385, 386, 387, 389, 390, 394, 395, 396, 398, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 436, 442, 443, 445, 446, 447, 448, 449, 451, 456, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 487, 495, 496, 502, 532, 533, 534, 537, 540, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 587, 588, 589, 590, 593, 596, 601, 609, 610, 611, 612, 619, 626, 627, 629, 634, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 686, 689, 691, 695, 698, 703, 717, 761, 772, 776, 783, 790, 797, 798, 799, 800, 801, 802, 803, 804, 806, 811, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 845, 847, 850, 851, 855, 857, 858, 860, 861, 863, 865, 866, 867, 869, 870, 872, 873, 874, 876, 877, 878, 879, 880, 881, 888, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 931, 945, 977, 978, 980, 981, 982, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 1001, 1002, 1003, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1015, 1019, 1022, 1023, 1026, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1044, 1045, 1046, 1047], "event": [0, 4, 17, 201, 219, 265, 406, 408, 587, 588, 635, 835, 925, 984, 989, 990, 1008, 1013, 1037], "pari": [0, 378, 409, 465, 762, 868, 999, 1045], "saclai": 0, "center": [0, 4, 7, 8, 9, 14, 25, 27, 34, 35, 38, 39, 41, 43, 44, 46, 49, 50, 51, 54, 56, 57, 60, 61, 62, 64, 65, 82, 92, 101, 103, 106, 124, 125, 126, 127, 150, 166, 172, 182, 193, 195, 201, 202, 212, 213, 225, 226, 230, 231, 240, 247, 250, 251, 257, 263, 273, 290, 293, 295, 302, 307, 309, 310, 321, 328, 337, 339, 340, 341, 346, 353, 354, 376, 377, 378, 386, 407, 408, 410, 411, 413, 414, 415, 421, 439, 441, 442, 445, 446, 447, 448, 451, 453, 458, 459, 460, 461, 462, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 481, 482, 483, 484, 500, 511, 523, 533, 534, 540, 543, 549, 605, 608, 609, 610, 631, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 677, 689, 693, 795, 865, 866, 869, 878, 880, 890, 891, 900, 901, 982, 984, 985, 987, 995, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045], "scienc": [0, 39, 81, 150, 161, 280, 375, 378, 393, 408, 439, 453, 537, 539, 546, 687, 688, 692, 847, 978, 980, 984, 985, 988, 991, 1000, 1009, 1013, 1018, 1039], "one": [0, 4, 8, 9, 10, 13, 15, 17, 18, 26, 27, 28, 33, 34, 35, 38, 41, 48, 54, 56, 58, 59, 61, 62, 65, 67, 72, 82, 90, 91, 92, 96, 99, 101, 102, 106, 118, 119, 126, 129, 133, 136, 149, 150, 153, 160, 161, 165, 170, 171, 172, 173, 174, 177, 180, 181, 185, 190, 191, 193, 194, 195, 197, 201, 203, 210, 211, 216, 219, 224, 230, 237, 238, 240, 249, 252, 258, 259, 260, 262, 263, 265, 266, 269, 270, 271, 272, 280, 283, 285, 290, 304, 308, 309, 312, 313, 317, 319, 320, 321, 329, 338, 339, 348, 352, 353, 354, 357, 361, 363, 367, 368, 369, 375, 376, 377, 378, 380, 381, 383, 385, 386, 387, 388, 389, 390, 393, 395, 396, 397, 398, 399, 402, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 440, 443, 444, 445, 446, 448, 449, 450, 451, 452, 454, 455, 456, 459, 461, 463, 468, 473, 486, 487, 489, 490, 491, 492, 493, 494, 495, 499, 500, 501, 502, 503, 504, 507, 508, 509, 511, 513, 533, 538, 539, 542, 546, 550, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 568, 580, 582, 583, 587, 588, 589, 590, 609, 610, 614, 615, 619, 626, 629, 631, 632, 633, 634, 642, 646, 647, 648, 649, 653, 656, 657, 658, 660, 665, 667, 668, 670, 672, 673, 674, 675, 677, 679, 687, 691, 694, 698, 702, 708, 719, 727, 728, 732, 736, 748, 749, 752, 761, 769, 772, 776, 777, 778, 779, 781, 782, 785, 786, 788, 789, 790, 791, 794, 795, 796, 797, 800, 801, 803, 804, 805, 807, 809, 811, 815, 816, 819, 821, 823, 824, 826, 827, 828, 829, 830, 832, 833, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 856, 860, 863, 864, 865, 867, 868, 870, 871, 872, 873, 874, 879, 880, 881, 884, 886, 900, 902, 903, 904, 905, 906, 908, 909, 910, 911, 916, 926, 929, 939, 946, 959, 977, 978, 980, 982, 983, 985, 986, 987, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1002, 1003, 1004, 1005, 1007, 1008, 1013, 1015, 1019, 1021, 1022, 1023, 1024, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "2014": [0, 53, 375, 413, 415, 418, 529, 606, 607, 621, 622, 657, 691, 857, 858, 936, 937, 985, 992, 1013, 1034], "2015": [0, 172, 375, 707, 720, 721, 722, 857, 858, 988, 995, 1013, 1035, 1036], "50": [0, 4, 7, 10, 13, 15, 17, 25, 33, 34, 39, 51, 53, 60, 61, 66, 67, 71, 72, 86, 93, 96, 99, 106, 113, 116, 119, 126, 131, 132, 150, 151, 154, 156, 157, 158, 159, 170, 171, 172, 181, 185, 196, 201, 204, 208, 209, 213, 215, 217, 219, 222, 226, 227, 233, 234, 236, 244, 257, 262, 264, 265, 275, 285, 304, 307, 311, 319, 321, 327, 329, 331, 337, 346, 353, 376, 378, 381, 386, 412, 415, 416, 417, 420, 441, 472, 499, 503, 522, 532, 538, 543, 552, 553, 568, 592, 593, 614, 616, 657, 658, 665, 666, 667, 669, 675, 676, 677, 691, 712, 797, 811, 829, 849, 900, 909, 983, 984, 988, 989, 991, 994, 998, 1010, 1031, 1048], "2018": [0, 201, 219, 416, 449, 977, 988, 1006, 1013, 1038, 1039], "nyu": [0, 124, 183, 849], "moor": [0, 733, 988, 1013], "environ": [0, 12, 27, 72, 73, 118, 120, 121, 129, 130, 133, 136, 147, 158, 171, 172, 173, 182, 231, 232, 233, 237, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 304, 313, 318, 319, 321, 322, 328, 361, 367, 376, 378, 379, 381, 383, 387, 389, 393, 398, 402, 404, 407, 409, 498, 1009, 1013, 1038, 1039, 1048], "student": [0, 98, 262, 985, 1009, 1013], "t\u00e9l\u00e9com": [0, 1006], "paristech": [0, 25, 26, 43, 230, 1006], "rv": [0, 124, 266, 307, 801, 809, 811, 977, 1031, 1032, 1035, 1036, 1037, 1038, 1039], "thierri": [0, 247, 249, 1013, 1037, 1038, 1045], "guillemot": [0, 247, 249, 1037, 1038], "labex": 0, "digicosm": 0, "goix": [0, 1035, 1037, 1038, 1039, 1040], "mathurin": [0, 1042, 1044, 1045], "massia": [0, 1042, 1044, 1045], "2019": [0, 172, 379, 408, 451, 461, 691, 985, 995, 998, 1039, 1040, 1041], "dure": [0, 4, 5, 12, 13, 51, 56, 59, 73, 76, 87, 101, 117, 123, 130, 147, 153, 158, 171, 172, 174, 190, 202, 209, 260, 264, 285, 319, 320, 343, 367, 369, 379, 381, 383, 386, 395, 396, 408, 409, 413, 415, 416, 418, 419, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 458, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 612, 613, 614, 616, 618, 619, 621, 622, 624, 626, 627, 628, 629, 631, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 699, 787, 795, 796, 797, 800, 801, 811, 821, 822, 823, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 885, 888, 891, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 977, 978, 980, 984, 985, 991, 998, 1000, 1004, 1019, 1024, 1026, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "phd": [0, 408, 415, 1009, 1013], "chan": [0, 838, 880], "zuckerberg": 0, "initi": [0, 7, 12, 18, 37, 43, 44, 46, 58, 59, 61, 64, 65, 69, 82, 111, 127, 134, 135, 136, 154, 159, 168, 171, 181, 194, 216, 222, 223, 227, 246, 248, 249, 254, 262, 285, 319, 328, 339, 353, 363, 368, 376, 381, 383, 389, 390, 393, 395, 408, 413, 415, 417, 418, 420, 441, 442, 446, 447, 448, 449, 450, 451, 452, 458, 459, 460, 461, 477, 511, 514, 530, 531, 532, 536, 537, 539, 542, 544, 545, 546, 547, 552, 553, 558, 559, 592, 606, 607, 609, 610, 618, 619, 626, 639, 644, 645, 646, 647, 651, 652, 657, 659, 660, 661, 662, 665, 666, 667, 668, 670, 675, 676, 677, 679, 680, 683, 689, 690, 691, 693, 694, 795, 796, 830, 849, 856, 857, 858, 896, 923, 936, 937, 962, 963, 980, 984, 985, 987, 992, 993, 994, 1002, 1004, 1008, 1010, 1021, 1023, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "were": [0, 4, 33, 71, 72, 75, 81, 82, 119, 123, 126, 147, 150, 158, 166, 201, 202, 205, 231, 240, 271, 273, 303, 304, 312, 318, 319, 321, 322, 323, 329, 343, 352, 354, 361, 363, 375, 376, 378, 381, 382, 385, 393, 395, 399, 405, 409, 415, 416, 463, 466, 467, 495, 560, 561, 587, 590, 601, 800, 801, 816, 824, 897, 898, 934, 977, 980, 988, 989, 1004, 1012, 1023, 1024, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "through": [0, 7, 13, 35, 118, 150, 161, 171, 205, 222, 235, 237, 257, 262, 265, 290, 311, 312, 337, 344, 354, 361, 378, 379, 381, 383, 388, 390, 395, 396, 398, 399, 408, 411, 413, 415, 417, 418, 445, 463, 466, 471, 534, 556, 557, 560, 563, 564, 565, 580, 592, 593, 596, 646, 650, 652, 654, 657, 658, 660, 662, 664, 667, 675, 676, 687, 690, 719, 803, 819, 876, 888, 892, 893, 908, 909, 910, 911, 943, 946, 977, 978, 985, 988, 990, 991, 992, 994, 996, 998, 1002, 1003, 1004, 1013, 1015, 1022, 1024, 1031, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1048], "program": [0, 51, 150, 353, 363, 368, 369, 378, 379, 381, 383, 387, 393, 507, 634, 669, 890, 891, 984, 1003, 1004, 1008, 1009, 1031, 1033], "immanuel": [0, 1031, 1032, 1036], "bayer": [0, 1031, 1032, 1036], "kemal": [0, 21, 22, 1033, 1034], "eren": [0, 21, 22, 1033, 1034], "tr\u00e9segni": [0, 1033], "hamzeh": [0, 1034, 1035], "alsalhi": [0, 1034, 1035], "issam": [0, 301, 1037], "laradji": [0, 301, 1037], "maheshakya": [0, 1034, 1035, 1036], "wijewardena": [0, 1034, 1035, 1036], "xue": [0, 1035, 1036, 1037, 1039, 1040, 1043], "nelson": [0, 1037, 1038, 1043], "yenchen": [0, 1037], "lin": [0, 533, 657, 1003, 1036, 1037, 1038, 1039], "neurodebian": 0, "debian": [0, 367, 379, 387], "packag": [0, 47, 54, 165, 237, 285, 368, 374, 375, 378, 379, 381, 382, 383, 385, 387, 390, 393, 395, 398, 407, 410, 415, 416, 451, 477, 645, 646, 978, 984, 987, 991, 998, 1004, 1013, 1018, 1031, 1037, 1039, 1040, 1041], "dr": [0, 150, 378, 408, 1045], "jame": [0, 378, 412, 830, 989, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1047], "haxbi": 0, "dartmouth": 0, "colleg": [0, 170], "organ": [0, 11, 13, 71, 81, 352, 375, 380, 381, 396, 848, 1008], "kindli": 0, "axa": 0, "some": [0, 3, 4, 5, 8, 9, 13, 20, 25, 26, 28, 38, 45, 51, 54, 56, 57, 59, 63, 68, 72, 75, 79, 81, 82, 87, 96, 114, 115, 126, 129, 130, 133, 134, 146, 153, 155, 158, 159, 160, 161, 162, 165, 166, 168, 171, 172, 173, 174, 177, 180, 182, 184, 185, 189, 190, 191, 195, 196, 201, 202, 205, 209, 210, 215, 218, 219, 222, 224, 230, 234, 237, 240, 248, 249, 250, 256, 257, 262, 263, 264, 265, 268, 270, 280, 283, 288, 291, 296, 302, 303, 307, 312, 318, 319, 320, 321, 322, 323, 335, 336, 338, 339, 347, 349, 352, 353, 354, 361, 363, 367, 368, 369, 374, 375, 376, 378, 379, 381, 382, 383, 385, 386, 387, 388, 389, 390, 393, 394, 395, 398, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 431, 436, 442, 443, 446, 448, 450, 452, 458, 462, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 495, 498, 507, 508, 514, 522, 523, 532, 533, 535, 537, 540, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 573, 580, 581, 587, 589, 590, 593, 605, 608, 609, 610, 631, 632, 634, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 688, 689, 691, 692, 696, 697, 699, 700, 701, 706, 707, 714, 719, 724, 725, 736, 737, 738, 744, 752, 754, 755, 761, 780, 782, 785, 786, 787, 792, 795, 798, 799, 804, 806, 815, 816, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 845, 847, 850, 851, 857, 858, 860, 863, 865, 866, 867, 872, 879, 880, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 920, 921, 945, 956, 977, 978, 980, 983, 984, 985, 987, 988, 989, 990, 991, 992, 994, 995, 998, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1012, 1013, 1015, 1020, 1022, 1023, 1024, 1028, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "particip": [0, 380, 381, 396, 1013], "could": [0, 4, 9, 13, 14, 28, 38, 43, 54, 72, 73, 96, 99, 114, 115, 123, 126, 147, 153, 158, 166, 170, 171, 172, 201, 202, 205, 210, 219, 226, 235, 236, 237, 256, 262, 283, 293, 296, 320, 335, 336, 352, 357, 369, 381, 387, 389, 395, 398, 402, 406, 412, 415, 416, 420, 473, 532, 537, 606, 607, 628, 670, 799, 804, 806, 977, 978, 984, 985, 995, 996, 998, 1003, 1009, 1023, 1028, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047], "attend": 0, "psf": [0, 381], "dataia": 0, "possibl": [0, 4, 13, 18, 27, 38, 50, 56, 72, 79, 96, 116, 119, 130, 153, 171, 172, 173, 174, 201, 218, 219, 235, 237, 262, 263, 264, 265, 267, 268, 269, 271, 272, 283, 317, 339, 347, 352, 353, 363, 367, 368, 369, 374, 375, 376, 379, 381, 382, 383, 384, 385, 387, 389, 393, 394, 395, 398, 402, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 418, 420, 422, 431, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 461, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 495, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 686, 687, 688, 689, 690, 691, 708, 720, 721, 722, 726, 740, 754, 776, 781, 783, 786, 795, 796, 797, 799, 800, 801, 803, 809, 810, 811, 815, 816, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 918, 920, 921, 924, 929, 956, 959, 962, 977, 980, 983, 984, 985, 987, 988, 989, 990, 991, 996, 998, 1003, 1004, 1009, 1013, 1015, 1022, 1023, 1024, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1045, 1046, 1047], "tinyclu": 0, "french": [0, 219, 313], "associ": [0, 11, 25, 26, 81, 113, 153, 170, 171, 205, 250, 313, 326, 328, 352, 389, 408, 410, 412, 413, 415, 416, 445, 448, 468, 469, 470, 471, 472, 473, 474, 475, 492, 493, 494, 523, 556, 560, 563, 604, 605, 629, 644, 657, 658, 665, 667, 673, 674, 675, 688, 694, 698, 729, 737, 823, 843, 851, 865, 877, 889, 897, 906, 908, 910, 926, 987, 988, 991, 998, 1001, 1013, 1023, 1031, 1043, 1047], "fond": [0, 1013], "de": [0, 12, 25, 26, 27, 28, 75, 117, 133, 153, 154, 156, 157, 158, 159, 160, 162, 192, 235, 236, 313, 328, 347, 378, 634, 687, 762, 984, 985, 1009, 1032, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "recherch": 0, "scientifiqu": 0, "granada": 0, "interest": [0, 4, 6, 13, 43, 45, 51, 56, 63, 67, 73, 113, 121, 126, 133, 147, 150, 158, 165, 172, 173, 190, 201, 202, 203, 219, 223, 235, 256, 259, 262, 263, 265, 271, 280, 339, 347, 353, 361, 367, 376, 378, 381, 386, 387, 389, 393, 396, 408, 410, 413, 416, 418, 492, 493, 499, 503, 509, 645, 646, 900, 978, 984, 985, 988, 993, 994, 995, 1009, 1013, 1020, 1022, 1023, 1031, 1048], "our": [0, 4, 5, 7, 11, 12, 13, 43, 54, 57, 71, 72, 81, 82, 87, 96, 97, 113, 114, 120, 123, 126, 127, 145, 150, 153, 158, 160, 170, 171, 172, 173, 174, 201, 205, 219, 224, 226, 237, 256, 262, 265, 268, 269, 288, 303, 307, 313, 318, 320, 331, 336, 342, 344, 347, 352, 353, 354, 363, 368, 380, 385, 386, 389, 393, 394, 395, 396, 399, 408, 412, 415, 416, 418, 419, 443, 449, 562, 643, 691, 707, 719, 724, 736, 754, 842, 843, 844, 846, 848, 850, 851, 852, 977, 978, 984, 985, 988, 994, 998, 1001, 1002, 1003, 1009, 1013, 1015, 1022, 1023, 1024, 1038, 1039, 1041, 1042, 1045, 1046, 1048], "via": [0, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 172, 173, 174, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 363, 367, 368, 373, 378, 379, 382, 383, 385, 389, 393, 394, 395, 396, 398, 399, 402, 405, 406, 408, 409, 411, 412, 413, 417, 418, 436, 500, 534, 538, 540, 542, 545, 558, 559, 596, 610, 615, 620, 623, 637, 638, 639, 640, 655, 665, 667, 672, 675, 686, 688, 691, 692, 708, 797, 820, 821, 822, 823, 828, 829, 830, 832, 838, 846, 857, 860, 861, 880, 881, 977, 982, 984, 985, 987, 988, 989, 995, 996, 1002, 1003, 1009, 1010, 1013, 1015, 1026, 1031, 1035, 1036, 1039, 1043, 1044, 1045, 1046, 1047, 1048], "numfocu": 0, "all": [0, 4, 5, 7, 8, 11, 14, 17, 20, 25, 26, 28, 35, 39, 40, 41, 43, 44, 49, 53, 54, 55, 56, 61, 65, 76, 83, 92, 96, 98, 99, 111, 118, 119, 121, 122, 126, 135, 136, 150, 158, 159, 161, 168, 170, 171, 172, 174, 180, 185, 187, 193, 194, 195, 201, 202, 203, 204, 205, 210, 212, 216, 218, 219, 222, 223, 230, 236, 237, 240, 241, 244, 248, 250, 252, 260, 263, 264, 265, 266, 268, 269, 270, 272, 274, 280, 285, 288, 290, 303, 307, 308, 312, 317, 318, 319, 320, 322, 323, 326, 328, 329, 330, 336, 339, 343, 344, 347, 348, 352, 353, 354, 358, 361, 363, 367, 368, 369, 374, 376, 377, 378, 379, 381, 383, 385, 386, 387, 389, 390, 393, 394, 395, 396, 399, 404, 405, 406, 407, 408, 409, 412, 413, 415, 416, 417, 418, 419, 420, 422, 423, 425, 426, 427, 430, 431, 432, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 502, 507, 508, 514, 526, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 582, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 698, 699, 700, 701, 704, 708, 712, 713, 714, 715, 716, 717, 719, 720, 721, 724, 726, 727, 728, 730, 731, 733, 734, 735, 736, 740, 743, 744, 746, 748, 749, 751, 754, 759, 767, 772, 776, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 803, 804, 806, 807, 809, 811, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 920, 921, 922, 926, 928, 929, 930, 931, 942, 945, 946, 951, 956, 963, 972, 977, 978, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 993, 995, 998, 1001, 1002, 1003, 1004, 1008, 1009, 1010, 1013, 1015, 1016, 1018, 1019, 1021, 1022, 1023, 1024, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "handl": [0, 4, 9, 72, 119, 123, 129, 133, 177, 185, 236, 237, 264, 269, 271, 280, 283, 285, 292, 313, 317, 352, 354, 361, 367, 373, 375, 379, 381, 382, 383, 390, 393, 395, 399, 415, 416, 418, 495, 543, 576, 580, 581, 584, 585, 587, 588, 590, 609, 634, 645, 646, 651, 657, 658, 659, 660, 661, 667, 674, 675, 677, 680, 719, 786, 864, 873, 874, 900, 901, 905, 912, 938, 945, 948, 985, 988, 989, 990, 991, 994, 996, 1003, 1004, 1008, 1009, 1013, 1026, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "non": [0, 3, 5, 6, 9, 10, 11, 13, 14, 16, 25, 26, 34, 35, 38, 50, 58, 63, 72, 76, 81, 83, 97, 98, 99, 101, 115, 123, 130, 131, 133, 142, 146, 147, 149, 155, 157, 159, 166, 168, 170, 171, 172, 173, 174, 179, 180, 185, 187, 191, 194, 195, 197, 200, 202, 203, 207, 211, 212, 214, 215, 216, 217, 219, 220, 225, 226, 227, 231, 232, 233, 234, 236, 238, 240, 247, 249, 251, 253, 255, 256, 257, 262, 271, 278, 280, 285, 289, 291, 292, 298, 301, 304, 307, 309, 310, 311, 312, 318, 319, 320, 321, 323, 330, 331, 334, 336, 339, 341, 342, 343, 344, 347, 348, 349, 350, 352, 353, 354, 361, 363, 367, 368, 373, 376, 377, 381, 382, 383, 386, 387, 389, 390, 393, 395, 396, 406, 407, 408, 409, 412, 414, 415, 416, 417, 418, 420, 436, 440, 444, 445, 449, 451, 455, 461, 462, 463, 464, 466, 467, 487, 495, 496, 502, 503, 507, 525, 531, 534, 535, 537, 539, 543, 546, 548, 550, 551, 552, 556, 557, 558, 559, 560, 561, 563, 564, 565, 571, 587, 588, 590, 591, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 630, 634, 637, 642, 649, 651, 656, 657, 658, 659, 663, 664, 665, 666, 667, 668, 671, 675, 676, 677, 684, 685, 686, 687, 688, 689, 690, 691, 693, 697, 698, 701, 705, 706, 711, 714, 716, 718, 719, 724, 725, 726, 733, 735, 737, 738, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 756, 757, 780, 783, 786, 787, 788, 789, 792, 795, 796, 797, 798, 802, 804, 805, 806, 807, 809, 815, 822, 826, 829, 848, 850, 851, 852, 855, 860, 861, 863, 864, 865, 868, 872, 873, 874, 875, 876, 877, 879, 880, 887, 888, 889, 890, 891, 893, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 920, 921, 935, 937, 941, 943, 951, 977, 978, 979, 980, 981, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1009, 1010, 1022, 1023, 1024, 1025, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "profit": 0, "which": [0, 4, 7, 10, 12, 13, 14, 15, 17, 18, 20, 21, 22, 26, 27, 28, 35, 38, 40, 41, 44, 45, 47, 50, 54, 56, 57, 58, 59, 66, 68, 71, 72, 73, 76, 79, 81, 82, 87, 91, 93, 98, 100, 101, 102, 107, 113, 116, 117, 118, 119, 123, 124, 125, 126, 129, 131, 132, 133, 134, 135, 136, 139, 145, 147, 149, 150, 153, 154, 158, 159, 160, 165, 166, 170, 171, 172, 174, 177, 180, 181, 185, 190, 194, 201, 202, 203, 205, 207, 209, 215, 217, 218, 219, 222, 223, 224, 226, 230, 231, 234, 235, 236, 237, 238, 240, 241, 247, 248, 252, 253, 256, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 276, 277, 280, 283, 285, 290, 291, 292, 302, 307, 309, 310, 311, 312, 313, 314, 317, 319, 320, 321, 322, 323, 326, 328, 329, 330, 339, 343, 347, 349, 352, 353, 354, 357, 361, 363, 367, 368, 369, 373, 375, 376, 378, 379, 381, 382, 383, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 397, 398, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 458, 459, 461, 462, 463, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 486, 522, 530, 531, 532, 533, 536, 537, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 578, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 609, 610, 611, 612, 613, 614, 616, 618, 621, 626, 627, 628, 629, 631, 632, 633, 639, 641, 642, 643, 646, 647, 648, 650, 651, 652, 653, 654, 655, 657, 658, 660, 662, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 679, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 706, 708, 715, 716, 718, 719, 721, 723, 724, 732, 733, 734, 735, 740, 741, 744, 754, 756, 776, 777, 778, 779, 780, 781, 787, 795, 796, 797, 800, 801, 802, 803, 805, 807, 811, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 850, 851, 852, 853, 854, 857, 860, 864, 867, 871, 873, 874, 875, 878, 879, 880, 881, 882, 884, 892, 893, 895, 896, 897, 900, 902, 905, 906, 908, 909, 910, 911, 912, 916, 929, 932, 936, 937, 939, 944, 945, 946, 948, 956, 960, 963, 969, 972, 977, 978, 979, 980, 981, 982, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1013, 1015, 1017, 1019, 1022, 1023, 1024, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "manag": [0, 87, 244, 366, 375, 379, 382, 383, 385, 389, 393, 395, 396, 415, 449, 467, 625, 898, 956, 982, 1004, 1008, 1009, 1013, 1024, 1026, 1044, 1047], "board": 0, "scipi": [0, 6, 14, 18, 20, 42, 47, 48, 54, 55, 79, 80, 83, 97, 99, 102, 104, 125, 153, 171, 174, 187, 191, 203, 248, 252, 253, 259, 262, 270, 274, 285, 290, 295, 304, 318, 319, 326, 327, 367, 375, 376, 379, 381, 383, 387, 390, 393, 394, 395, 398, 401, 407, 408, 413, 416, 449, 450, 451, 452, 456, 461, 462, 495, 502, 507, 531, 533, 534, 540, 543, 580, 581, 584, 585, 587, 588, 609, 610, 647, 648, 652, 656, 657, 658, 662, 665, 666, 667, 668, 669, 671, 673, 675, 676, 677, 679, 683, 686, 690, 691, 694, 758, 761, 776, 777, 778, 779, 790, 791, 801, 809, 811, 826, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 857, 863, 872, 873, 878, 879, 880, 883, 887, 890, 891, 900, 902, 903, 905, 906, 939, 959, 962, 977, 978, 984, 986, 989, 991, 992, 998, 1002, 1003, 1007, 1009, 1018, 1020, 1023, 1024, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "mission": [0, 353, 1013], "foster": [0, 1039], "comput": [0, 4, 6, 7, 11, 13, 14, 21, 27, 38, 40, 42, 43, 47, 53, 55, 58, 59, 61, 62, 71, 73, 80, 81, 82, 83, 97, 106, 116, 120, 121, 125, 126, 127, 128, 149, 150, 153, 158, 160, 161, 165, 171, 172, 173, 174, 177, 181, 182, 185, 186, 187, 188, 189, 190, 201, 203, 205, 209, 215, 218, 219, 223, 226, 231, 233, 234, 236, 240, 241, 243, 258, 260, 262, 263, 264, 265, 269, 271, 273, 285, 287, 289, 291, 292, 294, 295, 298, 307, 317, 321, 322, 327, 329, 339, 343, 347, 352, 353, 354, 361, 368, 369, 370, 375, 376, 378, 381, 386, 387, 388, 390, 393, 394, 395, 397, 398, 402, 403, 404, 405, 406, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 456, 458, 460, 461, 462, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 515, 530, 531, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 573, 581, 584, 585, 588, 589, 590, 592, 593, 602, 603, 604, 605, 608, 609, 611, 612, 613, 614, 615, 618, 619, 620, 621, 622, 623, 624, 626, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 714, 715, 716, 717, 718, 719, 723, 724, 725, 727, 728, 729, 732, 734, 736, 737, 738, 740, 741, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 790, 791, 792, 794, 795, 796, 797, 800, 801, 803, 811, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 856, 857, 858, 865, 866, 869, 870, 875, 876, 877, 878, 879, 880, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 934, 935, 936, 937, 953, 954, 961, 963, 969, 977, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 998, 1000, 1001, 1002, 1003, 1004, 1008, 1009, 1013, 1019, 1020, 1023, 1024, 1026, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "particular": [0, 4, 11, 14, 38, 40, 41, 61, 72, 79, 93, 101, 105, 123, 126, 129, 157, 165, 171, 172, 201, 203, 209, 235, 259, 263, 265, 271, 285, 294, 298, 307, 317, 318, 321, 353, 354, 363, 367, 375, 376, 379, 380, 381, 383, 385, 386, 387, 389, 390, 394, 395, 398, 408, 409, 412, 413, 415, 416, 417, 418, 445, 468, 472, 495, 543, 562, 608, 652, 657, 662, 671, 673, 683, 686, 711, 726, 783, 832, 847, 919, 921, 978, 980, 982, 984, 988, 991, 992, 993, 994, 996, 998, 1009, 1013, 1023, 1031, 1034, 1038, 1039, 1040, 1042, 1044, 1045, 1046, 1048], "As": [0, 4, 7, 21, 26, 28, 31, 41, 44, 54, 56, 58, 59, 67, 83, 87, 101, 113, 114, 120, 123, 125, 127, 132, 145, 153, 158, 166, 171, 173, 174, 177, 180, 183, 185, 190, 192, 201, 205, 209, 219, 227, 237, 250, 257, 259, 260, 262, 263, 265, 275, 283, 290, 308, 320, 329, 339, 353, 354, 357, 359, 360, 363, 367, 368, 376, 379, 380, 381, 383, 385, 386, 394, 395, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 445, 492, 553, 561, 565, 618, 631, 654, 655, 671, 673, 686, 733, 756, 762, 842, 843, 844, 846, 848, 879, 977, 982, 984, 985, 987, 988, 989, 991, 995, 998, 1002, 1003, 1004, 1008, 1009, 1013, 1015, 1019, 1022, 1023, 1024, 1031, 1037, 1042, 1047], "fiscal": 0, "home": [0, 12, 115, 133, 157, 159, 161, 162, 193, 210, 248, 304, 322, 344, 358, 376, 379, 389, 398, 407, 485, 498, 678, 1013], "ensur": [0, 21, 42, 58, 83, 93, 113, 119, 120, 174, 201, 223, 257, 265, 303, 361, 363, 367, 368, 381, 383, 385, 386, 387, 396, 398, 399, 406, 408, 409, 412, 420, 468, 532, 533, 540, 610, 626, 695, 704, 780, 787, 821, 893, 920, 921, 937, 943, 954, 984, 985, 988, 998, 1004, 1019, 1033, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "monei": [0, 219, 1013], "when": [0, 4, 9, 10, 11, 13, 21, 25, 26, 27, 28, 35, 40, 41, 44, 57, 61, 68, 71, 72, 73, 79, 81, 82, 87, 96, 99, 100, 101, 104, 116, 119, 122, 123, 124, 126, 129, 133, 134, 135, 147, 153, 165, 170, 171, 172, 173, 174, 180, 181, 185, 190, 192, 194, 198, 201, 203, 205, 206, 217, 230, 231, 232, 236, 237, 244, 248, 250, 258, 261, 262, 263, 264, 265, 269, 271, 272, 280, 285, 287, 288, 291, 292, 293, 307, 309, 311, 312, 313, 314, 317, 318, 319, 320, 321, 328, 329, 331, 339, 342, 343, 347, 352, 353, 354, 357, 363, 367, 368, 369, 375, 376, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 393, 394, 395, 398, 399, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 424, 431, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 481, 482, 483, 484, 488, 489, 490, 491, 495, 499, 500, 501, 502, 503, 504, 507, 508, 509, 511, 514, 523, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 574, 575, 577, 580, 581, 582, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 605, 608, 609, 610, 611, 612, 613, 614, 615, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 699, 700, 701, 703, 704, 706, 707, 711, 712, 715, 725, 726, 727, 728, 730, 732, 733, 736, 744, 746, 749, 752, 753, 755, 759, 761, 765, 766, 767, 769, 772, 776, 779, 780, 781, 782, 783, 785, 786, 787, 789, 790, 791, 793, 795, 796, 797, 800, 801, 802, 803, 811, 815, 816, 819, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 886, 887, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 916, 919, 920, 921, 927, 931, 935, 936, 937, 938, 940, 941, 946, 949, 956, 977, 978, 980, 982, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1009, 1013, 1015, 1021, 1022, 1023, 1024, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "need": [0, 4, 9, 12, 33, 47, 49, 54, 56, 58, 83, 98, 111, 119, 123, 125, 126, 127, 133, 150, 153, 158, 165, 166, 171, 189, 203, 218, 219, 223, 230, 233, 235, 237, 241, 247, 248, 252, 253, 260, 262, 264, 265, 267, 280, 283, 285, 287, 312, 317, 329, 339, 352, 353, 363, 367, 368, 369, 375, 376, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 394, 395, 396, 397, 398, 399, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 424, 436, 440, 444, 448, 464, 502, 540, 550, 571, 581, 582, 587, 588, 589, 590, 626, 634, 637, 638, 639, 641, 648, 665, 667, 670, 675, 678, 691, 719, 720, 721, 722, 779, 783, 795, 796, 797, 800, 801, 811, 812, 813, 821, 829, 832, 840, 841, 857, 860, 863, 867, 872, 873, 877, 895, 902, 905, 945, 977, 978, 980, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 998, 999, 1001, 1002, 1003, 1004, 1009, 1013, 1021, 1022, 1023, 1024, 1031, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "keep": [0, 6, 13, 43, 76, 99, 101, 119, 149, 165, 170, 171, 172, 173, 174, 185, 201, 202, 203, 209, 219, 252, 257, 260, 311, 312, 320, 327, 339, 352, 353, 357, 363, 367, 368, 373, 381, 385, 394, 395, 406, 408, 409, 410, 411, 412, 413, 431, 449, 464, 481, 482, 483, 484, 492, 493, 533, 539, 540, 543, 546, 553, 555, 557, 559, 561, 564, 567, 569, 594, 597, 599, 602, 610, 633, 634, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 669, 671, 672, 675, 676, 677, 678, 707, 815, 833, 834, 843, 851, 857, 858, 896, 901, 903, 906, 909, 911, 984, 989, 993, 996, 998, 1009, 1013, 1015, 1020, 1022, 1024, 1026, 1031, 1036, 1039, 1040, 1044, 1045, 1047], "while": [0, 4, 7, 8, 10, 12, 18, 21, 25, 28, 35, 38, 40, 44, 45, 49, 56, 63, 67, 71, 74, 76, 93, 100, 101, 113, 116, 119, 120, 130, 133, 150, 154, 159, 161, 162, 165, 170, 171, 172, 173, 177, 180, 182, 185, 190, 195, 201, 203, 205, 217, 230, 233, 234, 237, 238, 248, 249, 253, 256, 257, 261, 262, 263, 265, 269, 270, 271, 272, 273, 275, 287, 307, 308, 309, 312, 313, 314, 317, 320, 323, 336, 339, 352, 354, 361, 363, 368, 373, 374, 375, 376, 377, 380, 381, 383, 385, 386, 387, 389, 390, 393, 395, 396, 402, 406, 407, 408, 411, 412, 413, 415, 416, 417, 418, 419, 420, 443, 463, 466, 467, 482, 484, 495, 520, 531, 551, 556, 557, 558, 559, 563, 564, 565, 566, 567, 568, 569, 574, 581, 587, 588, 589, 590, 593, 596, 601, 605, 633, 642, 645, 646, 648, 655, 656, 657, 658, 675, 676, 677, 678, 707, 728, 752, 772, 776, 786, 792, 795, 797, 798, 799, 802, 803, 804, 805, 806, 807, 811, 812, 813, 814, 815, 819, 821, 822, 823, 824, 825, 827, 835, 846, 848, 850, 851, 852, 859, 860, 861, 862, 863, 876, 888, 893, 898, 900, 901, 908, 909, 910, 911, 916, 941, 977, 978, 980, 981, 982, 984, 985, 987, 988, 989, 990, 991, 994, 995, 998, 1000, 1003, 1004, 1008, 1009, 1015, 1021, 1022, 1024, 1031, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "complianc": 0, "tax": 0, "regul": 0, "mostli": [0, 47, 71, 201, 219, 312, 389, 393, 395, 413, 415, 416, 520, 777, 778, 1003, 1008, 1013, 1039, 1040, 1041, 1047], "go": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 376, 381, 383, 386, 390, 396, 398, 409, 413, 415, 417, 442, 560, 561, 584, 585, 719, 940, 941, 998, 1004, 1008, 1009, 1015, 1024, 1042], "toward": [0, 27, 28, 64, 83, 120, 126, 132, 153, 173, 180, 205, 206, 227, 240, 347, 381, 395, 408, 447, 451, 461, 675, 677, 694, 874, 987, 1002, 1004, 1007, 1009], "cover": [0, 53, 177, 201, 219, 363, 373, 376, 381, 394, 634, 719, 792, 988, 989, 1007], "travel": 0, "expens": [0, 57, 119, 133, 153, 170, 172, 231, 259, 271, 339, 343, 352, 353, 354, 369, 387, 395, 408, 409, 412, 415, 416, 448, 467, 507, 797, 800, 801, 811, 823, 898, 900, 985, 987, 998, 1003, 1008, 1013, 1024, 1035], "well": [0, 4, 9, 12, 21, 25, 26, 28, 35, 40, 49, 54, 58, 59, 63, 71, 79, 87, 113, 114, 116, 119, 124, 126, 131, 133, 150, 158, 160, 170, 171, 172, 173, 177, 185, 189, 199, 201, 202, 203, 205, 209, 222, 223, 224, 227, 230, 234, 237, 240, 249, 262, 269, 271, 273, 277, 280, 285, 288, 290, 291, 292, 314, 318, 319, 320, 321, 322, 323, 343, 347, 352, 353, 354, 363, 376, 378, 380, 381, 385, 387, 389, 390, 393, 394, 395, 396, 406, 408, 410, 412, 413, 415, 419, 422, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 458, 459, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 523, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 699, 720, 721, 722, 783, 786, 790, 793, 795, 796, 797, 800, 801, 811, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 935, 936, 956, 977, 978, 980, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 998, 1001, 1002, 1004, 1005, 1008, 1009, 1013, 1023, 1024, 1031, 1032, 1035, 1037, 1038, 1039, 1042], "budget": [0, 123, 835, 836, 837, 838, 839, 977], "1": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 281, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 324, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 363, 367, 368, 369, 375, 376, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 394, 395, 396, 398, 399, 400, 401, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 426, 429, 430, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 490, 492, 494, 495, 496, 499, 500, 501, 503, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 576, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 761, 762, 764, 766, 767, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 920, 921, 926, 931, 934, 935, 937, 939, 941, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 959, 962, 963, 969, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1027, 1029, 1033], "note": [0, 4, 5, 7, 8, 11, 12, 14, 20, 21, 27, 33, 38, 54, 67, 72, 73, 81, 83, 86, 87, 93, 99, 116, 117, 119, 122, 126, 127, 130, 150, 153, 160, 165, 170, 171, 172, 173, 174, 177, 189, 190, 194, 201, 202, 203, 205, 209, 215, 217, 219, 222, 223, 224, 226, 230, 231, 233, 235, 236, 237, 238, 240, 248, 257, 258, 262, 265, 268, 269, 270, 283, 285, 287, 291, 292, 302, 307, 308, 311, 317, 318, 319, 320, 321, 322, 323, 327, 329, 331, 339, 343, 352, 361, 367, 368, 375, 378, 379, 381, 382, 383, 385, 387, 388, 393, 394, 395, 398, 399, 403, 406, 407, 408, 410, 411, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 431, 433, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 458, 459, 460, 461, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 486, 489, 495, 497, 503, 508, 514, 518, 526, 529, 532, 533, 537, 538, 539, 540, 542, 543, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 584, 585, 587, 588, 589, 590, 592, 593, 596, 598, 599, 601, 602, 603, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 628, 629, 631, 632, 634, 635, 637, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 695, 698, 699, 702, 706, 707, 712, 714, 719, 720, 721, 722, 726, 727, 728, 730, 732, 736, 739, 744, 752, 753, 756, 761, 762, 766, 768, 772, 776, 780, 781, 782, 783, 785, 786, 787, 790, 791, 792, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 811, 812, 813, 814, 815, 816, 817, 818, 821, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 916, 926, 927, 936, 937, 948, 951, 956, 963, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 994, 995, 996, 998, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1012, 1015, 1022, 1023, 1024, 1026, 1029, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047], "regard": [0, 5, 7, 11, 13, 54, 56, 72, 91, 101, 141, 153, 158, 172, 173, 190, 198, 203, 224, 236, 240, 264, 271, 272, 288, 353, 377, 381, 382, 386, 393, 395, 402, 407, 408, 413, 415, 416, 418, 442, 446, 451, 458, 461, 500, 613, 618, 655, 657, 700, 741, 796, 803, 819, 824, 842, 843, 981, 984, 988, 990, 991, 993, 995, 1002, 1003, 1004, 1017, 1024, 1038, 1041], "might": [0, 4, 5, 13, 32, 43, 45, 61, 63, 71, 122, 131, 147, 159, 166, 171, 172, 173, 177, 201, 219, 230, 262, 264, 288, 302, 319, 343, 349, 363, 367, 368, 375, 379, 381, 382, 383, 385, 386, 387, 389, 393, 395, 396, 398, 402, 406, 409, 412, 413, 414, 415, 416, 418, 433, 442, 487, 495, 500, 502, 507, 514, 522, 535, 554, 555, 556, 560, 561, 563, 578, 579, 581, 609, 610, 626, 649, 653, 654, 655, 657, 658, 675, 677, 691, 755, 792, 800, 801, 824, 849, 865, 880, 893, 912, 914, 916, 920, 921, 937, 977, 978, 980, 982, 984, 985, 987, 988, 990, 991, 995, 996, 998, 1003, 1004, 1024, 1032, 1034, 1039, 1040, 1042, 1045, 1046, 1047, 1048], "pai": [0, 219, 381], "dn": [0, 991], "continu": [0, 7, 13, 18, 20, 43, 76, 93, 123, 124, 153, 168, 172, 181, 202, 209, 219, 223, 226, 240, 241, 243, 248, 252, 253, 295, 303, 306, 312, 313, 315, 319, 320, 359, 361, 376, 379, 383, 384, 385, 386, 389, 393, 395, 396, 398, 408, 413, 415, 467, 491, 591, 594, 595, 598, 599, 606, 607, 608, 631, 645, 646, 651, 652, 656, 659, 660, 661, 662, 724, 740, 754, 809, 811, 863, 865, 867, 869, 870, 879, 880, 881, 897, 898, 909, 951, 977, 984, 985, 988, 989, 991, 992, 998, 1004, 1009, 1010, 1012, 1013, 1015, 1022, 1028, 1031, 1033, 1034, 1039, 1044, 1045, 1046], "integr": [0, 43, 72, 147, 161, 190, 303, 319, 379, 383, 384, 385, 387, 389, 395, 398, 413, 418, 445, 714, 753, 784, 963, 987, 995, 1013, 1018, 1032, 1034, 1035, 1043, 1044], "servic": [0, 4, 231, 240, 381, 385, 1013, 1039], "azur": [0, 381], "cirru": [0, 381], "cl": [0, 8, 12, 17, 388, 395, 910], "circlecl": 0, "free": [0, 5, 56, 158, 159, 166, 200, 252, 307, 375, 380, 381, 382, 389, 393, 398, 416, 451, 608, 670, 856, 906, 977, 980, 984, 988, 1009, 1039], "cpu": [0, 62, 263, 285, 322, 367, 368, 379, 387, 395, 398, 404, 416, 495, 631, 646, 650, 652, 654, 657, 658, 660, 662, 664, 665, 667, 675, 678, 797, 811, 821, 822, 823, 844, 852, 893, 956, 988, 1015, 1019, 1024, 1036, 1045, 1046, 1048], "server": [0, 150, 367, 378, 379, 495, 1039], "anaconda": [0, 368, 379, 385], "inc": [0, 71, 261, 978, 1000, 1013], "storag": [0, 354, 395, 657, 658, 665, 666, 667, 675, 676, 677, 900, 991, 1003, 1034, 1039], "thei": [0, 4, 13, 27, 28, 38, 51, 58, 83, 98, 111, 114, 120, 121, 123, 125, 127, 129, 146, 149, 150, 153, 154, 158, 171, 172, 185, 187, 190, 196, 201, 202, 219, 223, 226, 230, 236, 237, 240, 256, 259, 262, 263, 265, 271, 280, 285, 287, 302, 307, 312, 319, 321, 343, 352, 353, 359, 360, 363, 367, 368, 369, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 389, 390, 393, 394, 395, 396, 399, 405, 407, 408, 409, 410, 411, 413, 415, 417, 418, 420, 439, 441, 445, 446, 452, 453, 458, 466, 495, 507, 508, 532, 534, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 587, 590, 596, 609, 618, 628, 642, 645, 646, 651, 657, 658, 659, 660, 661, 669, 671, 675, 677, 680, 686, 760, 761, 763, 766, 772, 787, 797, 811, 829, 835, 836, 837, 838, 839, 857, 860, 862, 868, 879, 880, 902, 905, 908, 909, 910, 911, 915, 977, 978, 980, 982, 984, 987, 988, 989, 990, 991, 993, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1013, 1015, 1019, 1021, 1022, 1024, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047], "stage": [0, 7, 27, 73, 113, 118, 124, 127, 379, 385, 395, 404, 408, 415, 447, 552, 553, 558, 559, 560, 561, 587, 588, 590, 601, 985, 998, 1007, 1039, 1043], "nightli": [0, 368, 384, 385], "build": [0, 4, 7, 18, 33, 44, 56, 68, 75, 100, 113, 122, 124, 130, 136, 147, 149, 164, 165, 167, 168, 171, 209, 267, 270, 280, 283, 285, 303, 304, 308, 313, 314, 354, 363, 367, 368, 369, 377, 383, 384, 385, 386, 387, 395, 398, 401, 407, 408, 412, 415, 416, 441, 489, 500, 502, 523, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 584, 585, 587, 588, 590, 626, 627, 629, 690, 712, 713, 798, 802, 806, 815, 820, 822, 861, 878, 880, 908, 909, 910, 911, 913, 933, 977, 978, 985, 988, 992, 994, 998, 1003, 1004, 1008, 1009, 1010, 1013, 1016, 1018, 1022, 1023, 1031, 1034, 1036, 1037, 1038, 1040, 1043], "applic": [3, 5, 16, 20, 50, 56, 81, 168, 177, 201, 218, 224, 256, 265, 307, 367, 369, 376, 378, 381, 383, 387, 389, 390, 393, 395, 406, 408, 412, 413, 414, 415, 418, 420, 443, 445, 451, 495, 497, 531, 532, 533, 552, 553, 628, 687, 688, 689, 693, 711, 727, 728, 736, 781, 782, 785, 826, 977, 984, 985, 986, 987, 988, 992, 994, 1000, 1004, 1008, 1009, 1010, 1013, 1022, 1024, 1031, 1032, 1037, 1039, 1042], "problem": [3, 4, 5, 6, 11, 13, 14, 15, 27, 38, 55, 56, 58, 67, 96, 113, 116, 119, 121, 126, 127, 153, 168, 173, 177, 180, 185, 187, 190, 194, 195, 201, 203, 205, 218, 219, 224, 230, 231, 238, 240, 243, 260, 262, 267, 271, 272, 276, 280, 283, 285, 290, 297, 311, 320, 336, 339, 343, 347, 348, 352, 353, 361, 363, 367, 376, 377, 378, 379, 380, 382, 383, 386, 387, 390, 393, 395, 406, 407, 408, 410, 412, 414, 415, 416, 417, 418, 419, 420, 443, 446, 448, 449, 451, 456, 461, 464, 477, 502, 507, 508, 514, 515, 516, 517, 522, 523, 527, 530, 532, 536, 538, 541, 542, 543, 544, 545, 546, 547, 550, 551, 556, 560, 563, 566, 570, 572, 588, 609, 630, 642, 647, 649, 651, 653, 654, 655, 656, 657, 658, 663, 664, 665, 667, 668, 671, 672, 673, 674, 675, 676, 678, 679, 684, 685, 686, 687, 688, 690, 692, 694, 707, 715, 727, 728, 733, 736, 737, 781, 782, 785, 786, 795, 796, 798, 799, 800, 801, 802, 804, 805, 806, 807, 812, 813, 814, 815, 816, 817, 820, 828, 829, 830, 840, 841, 842, 843, 844, 845, 846, 848, 850, 851, 852, 866, 867, 873, 881, 884, 890, 891, 900, 901, 908, 910, 926, 937, 978, 979, 983, 984, 985, 987, 988, 989, 990, 991, 992, 996, 998, 1002, 1005, 1009, 1011, 1013, 1016, 1017, 1018, 1024, 1025, 1026, 1031, 1032, 1034, 1036, 1037, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "medium": [3, 168, 236, 277, 314, 339, 408, 642, 874, 981, 984], "size": [3, 4, 5, 6, 8, 11, 12, 13, 14, 25, 32, 34, 38, 40, 41, 43, 45, 47, 48, 53, 55, 56, 58, 59, 61, 62, 63, 67, 68, 74, 79, 80, 81, 82, 83, 86, 87, 93, 96, 97, 98, 99, 100, 102, 104, 106, 116, 125, 126, 129, 130, 146, 153, 155, 156, 159, 160, 168, 170, 172, 173, 180, 181, 182, 183, 187, 191, 196, 199, 202, 203, 204, 207, 214, 215, 222, 227, 230, 233, 234, 235, 236, 237, 239, 240, 249, 256, 258, 260, 262, 264, 265, 267, 268, 269, 280, 291, 292, 293, 301, 304, 308, 309, 310, 311, 314, 318, 321, 323, 327, 331, 335, 337, 338, 339, 347, 349, 352, 353, 354, 357, 367, 368, 369, 376, 377, 381, 386, 390, 393, 394, 395, 398, 399, 405, 406, 407, 410, 412, 413, 416, 418, 419, 443, 444, 445, 447, 448, 449, 456, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 479, 492, 493, 494, 514, 526, 533, 535, 537, 539, 546, 556, 557, 558, 559, 560, 561, 563, 564, 582, 586, 587, 590, 593, 631, 632, 642, 656, 665, 666, 678, 682, 691, 694, 704, 718, 736, 738, 741, 779, 791, 799, 802, 803, 807, 814, 817, 818, 821, 824, 826, 835, 836, 837, 839, 842, 843, 844, 845, 846, 848, 850, 851, 852, 857, 858, 875, 877, 889, 894, 898, 902, 903, 904, 905, 906, 908, 909, 910, 911, 914, 936, 940, 941, 951, 952, 954, 963, 978, 980, 981, 983, 984, 985, 987, 988, 989, 990, 991, 992, 995, 998, 1000, 1002, 1003, 1004, 1013, 1018, 1020, 1022, 1023, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1046, 1047], "interact": [3, 127, 168, 201, 227, 232, 263, 318, 380, 382, 383, 385, 387, 393, 395, 396, 409, 558, 559, 560, 561, 631, 632, 875, 879, 977, 980, 984, 985, 986, 993, 995, 998, 1007, 1009, 1033, 1038, 1045, 1046], "user": [3, 26, 56, 70, 96, 119, 162, 168, 171, 189, 222, 237, 252, 259, 269, 271, 280, 285, 291, 292, 295, 313, 317, 318, 319, 320, 321, 322, 323, 363, 367, 368, 370, 375, 379, 380, 381, 383, 385, 387, 388, 389, 393, 394, 395, 398, 399, 402, 406, 407, 408, 409, 410, 412, 413, 415, 416, 417, 419, 420, 421, 422, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 573, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 618, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 696, 697, 698, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 914, 933, 937, 977, 978, 984, 985, 987, 988, 989, 991, 998, 1002, 1006, 1008, 1009, 1013, 1017, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "interfac": [3, 113, 168, 374, 375, 382, 383, 390, 393, 395, 412, 418, 419, 440, 444, 449, 495, 552, 698, 797, 800, 801, 811, 860, 861, 886, 973, 977, 991, 1003, 1008, 1009, 1013, 1031, 1033, 1036, 1037, 1039, 1040, 1045, 1047], "compress": [3, 11, 16, 18, 49, 67, 168, 280, 307, 376, 408, 413, 416, 417, 651, 671, 691, 830, 873, 959, 962, 984, 998, 1010, 1023, 1031, 1040], "sens": [3, 4, 13, 16, 18, 26, 56, 67, 159, 168, 171, 177, 234, 237, 307, 313, 327, 339, 352, 363, 367, 381, 382, 395, 408, 410, 412, 417, 461, 468, 469, 470, 471, 472, 473, 474, 475, 651, 654, 655, 671, 798, 808, 897, 982, 984, 991, 992, 994, 998, 1001, 1010], "tomographi": [3, 16, 18, 67, 168, 651, 671, 984, 1010], "reconstruct": [3, 16, 18, 21, 67, 96, 97, 101, 168, 200, 225, 226, 321, 413, 416, 481, 482, 483, 530, 532, 534, 536, 537, 538, 539, 541, 542, 547, 582, 586, 651, 671, 687, 688, 692, 892, 893, 984, 985, 1010, 1045], "l1": [3, 7, 16, 18, 31, 41, 67, 83, 86, 168, 170, 179, 180, 186, 187, 188, 189, 190, 195, 196, 205, 206, 212, 216, 220, 232, 263, 285, 303, 320, 390, 393, 407, 408, 410, 413, 440, 444, 449, 456, 463, 468, 469, 470, 471, 472, 473, 474, 475, 477, 495, 501, 503, 530, 536, 537, 538, 539, 541, 542, 546, 547, 557, 564, 588, 589, 590, 596, 643, 644, 645, 646, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 669, 671, 675, 676, 677, 678, 680, 687, 733, 760, 766, 771, 776, 777, 778, 783, 811, 818, 826, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 872, 880, 887, 900, 901, 907, 909, 911, 923, 970, 984, 986, 988, 991, 998, 1002, 1003, 1004, 1010, 1022, 1036, 1038, 1044, 1047], "prior": [3, 7, 16, 18, 47, 48, 58, 66, 67, 68, 93, 152, 153, 154, 159, 163, 166, 168, 173, 180, 182, 185, 246, 248, 252, 253, 254, 262, 273, 295, 329, 381, 383, 385, 395, 398, 408, 411, 413, 415, 418, 464, 522, 535, 547, 548, 549, 550, 558, 584, 585, 610, 612, 613, 614, 618, 621, 622, 629, 643, 644, 645, 646, 650, 651, 653, 654, 655, 659, 660, 661, 671, 677, 680, 715, 795, 835, 836, 837, 838, 839, 860, 861, 875, 902, 905, 955, 977, 980, 982, 984, 987, 988, 990, 996, 1004, 1005, 1010, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1047], "lasso": [3, 16, 18, 67, 106, 133, 139, 168, 171, 179, 182, 192, 194, 200, 206, 209, 220, 234, 252, 275, 320, 347, 367, 393, 410, 411, 413, 415, 416, 417, 470, 471, 477, 500, 523, 530, 536, 538, 541, 542, 544, 545, 547, 596, 645, 646, 648, 649, 650, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 669, 671, 677, 680, 681, 682, 683, 684, 685, 720, 721, 722, 821, 822, 823, 861, 880, 977, 988, 1002, 1010, 1011, 1019, 1022, 1026, 1031, 1035, 1036, 1037, 1039, 1040, 1042, 1044, 1045], "recognit": [3, 9, 15, 16, 49, 96, 168, 236, 239, 304, 312, 352, 374, 386, 413, 415, 417, 493, 501, 531, 533, 540, 696, 707, 712, 739, 767, 786, 787, 795, 811, 826, 880, 905, 980, 984, 988, 989, 993, 1003, 1005, 1010, 1015, 1018, 1026, 1031], "eigenfac": [3, 15, 16, 49, 168, 236, 239, 352, 376, 413, 493, 540, 696, 712, 811, 826, 880, 905, 1005, 1010, 1018, 1031], "svm": [3, 7, 9, 10, 11, 15, 16, 17, 26, 28, 31, 32, 33, 49, 71, 73, 75, 96, 111, 122, 131, 134, 138, 140, 141, 143, 144, 148, 149, 150, 151, 155, 157, 161, 168, 179, 182, 184, 193, 194, 210, 211, 212, 213, 214, 220, 230, 236, 238, 239, 242, 243, 251, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 272, 273, 276, 277, 280, 291, 292, 296, 297, 298, 301, 303, 309, 310, 317, 319, 325, 329, 330, 332, 334, 337, 346, 347, 350, 352, 367, 370, 376, 383, 387, 395, 402, 409, 412, 413, 415, 417, 436, 493, 503, 511, 514, 540, 554, 555, 562, 566, 567, 576, 592, 593, 598, 599, 604, 630, 638, 642, 667, 675, 676, 677, 688, 696, 697, 699, 701, 712, 733, 740, 759, 797, 811, 817, 822, 823, 826, 828, 829, 846, 860, 861, 873, 875, 880, 896, 897, 976, 977, 980, 983, 985, 986, 988, 989, 993, 1001, 1003, 1005, 1010, 1011, 1015, 1018, 1019, 1020, 1024, 1026, 1028, 1031, 1032, 1033, 1035, 1036, 1037, 1038], "imag": [3, 6, 14, 16, 18, 21, 22, 33, 37, 40, 41, 42, 43, 45, 47, 49, 52, 55, 57, 59, 63, 68, 69, 71, 90, 95, 96, 101, 106, 108, 121, 148, 150, 157, 168, 192, 223, 232, 235, 239, 260, 294, 303, 304, 318, 326, 327, 352, 353, 373, 374, 376, 378, 381, 386, 389, 393, 395, 398, 401, 408, 413, 440, 444, 451, 461, 492, 493, 494, 495, 501, 502, 505, 506, 533, 534, 536, 540, 606, 607, 690, 696, 736, 826, 870, 984, 988, 989, 991, 993, 1000, 1004, 1008, 1010, 1013, 1015, 1020, 1021, 1023, 1024, 1026, 1031, 1034, 1039, 1040, 1044, 1046, 1047], "denois": [3, 16, 49, 51, 52, 54, 67, 95, 101, 106, 108, 168, 413, 495, 534, 536, 540, 583, 586, 826, 870, 1010], "kernel": [3, 6, 9, 10, 11, 16, 17, 31, 32, 52, 58, 67, 75, 87, 95, 97, 102, 106, 108, 111, 134, 140, 142, 148, 152, 154, 155, 156, 157, 160, 163, 165, 178, 183, 184, 202, 210, 215, 229, 230, 238, 242, 245, 256, 260, 262, 264, 267, 268, 272, 276, 277, 286, 291, 292, 296, 299, 312, 314, 320, 328, 331, 334, 336, 337, 339, 340, 341, 342, 344, 345, 348, 350, 363, 367, 370, 373, 383, 393, 395, 406, 408, 409, 412, 415, 416, 431, 439, 447, 451, 460, 461, 464, 481, 482, 483, 490, 495, 497, 501, 503, 513, 532, 533, 534, 540, 543, 553, 555, 557, 559, 561, 564, 567, 569, 592, 593, 609, 610, 630, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 669, 671, 672, 675, 676, 677, 678, 687, 689, 690, 691, 694, 733, 756, 757, 759, 764, 765, 772, 773, 774, 775, 797, 803, 808, 811, 826, 828, 833, 834, 840, 841, 843, 845, 851, 858, 860, 861, 866, 870, 872, 873, 875, 880, 895, 896, 900, 901, 902, 903, 904, 905, 906, 909, 911, 977, 983, 984, 985, 988, 989, 991, 994, 1001, 1002, 1010, 1011, 1015, 1019, 1020, 1025, 1026, 1031, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "pca": [3, 6, 16, 34, 46, 52, 67, 70, 71, 73, 75, 76, 77, 79, 87, 95, 98, 106, 107, 108, 141, 168, 198, 223, 225, 233, 235, 238, 242, 261, 270, 273, 274, 285, 289, 294, 304, 320, 363, 373, 383, 395, 404, 407, 408, 409, 414, 424, 472, 475, 495, 501, 503, 513, 531, 532, 533, 534, 538, 539, 542, 543, 548, 642, 657, 687, 689, 691, 797, 822, 826, 849, 856, 859, 860, 862, 870, 878, 880, 980, 982, 985, 991, 998, 1002, 1004, 1010, 1020, 1025, 1026, 1031, 1033, 1034, 1035, 1037, 1038, 1039, 1042, 1044, 1045, 1046, 1048], "lag": [3, 4, 16, 126, 168, 201, 203, 219, 262, 266, 495, 561, 700, 740, 743, 744, 746, 788, 818, 822, 823, 826, 1010], "featur": [3, 5, 6, 7, 8, 10, 11, 12, 15, 16, 20, 21, 26, 27, 28, 31, 32, 33, 34, 37, 43, 46, 48, 51, 59, 61, 64, 69, 70, 71, 72, 73, 74, 76, 77, 81, 82, 86, 87, 90, 91, 92, 93, 96, 98, 100, 102, 103, 104, 105, 107, 112, 117, 119, 122, 124, 126, 128, 132, 133, 134, 135, 136, 137, 139, 140, 145, 147, 151, 153, 154, 155, 158, 159, 161, 165, 166, 169, 170, 171, 172, 175, 179, 181, 183, 184, 185, 187, 188, 190, 191, 197, 200, 201, 202, 203, 205, 206, 208, 210, 216, 217, 218, 220, 223, 229, 232, 234, 237, 239, 240, 243, 244, 245, 255, 256, 257, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 280, 283, 288, 289, 290, 293, 294, 295, 296, 300, 301, 303, 305, 306, 307, 310, 314, 315, 316, 318, 321, 322, 323, 326, 327, 329, 330, 334, 335, 336, 339, 343, 347, 350, 351, 354, 355, 358, 359, 360, 361, 363, 370, 373, 374, 375, 376, 377, 378, 379, 383, 384, 386, 388, 389, 390, 393, 394, 395, 396, 397, 398, 402, 406, 408, 410, 411, 412, 413, 414, 418, 419, 420, 421, 424, 429, 431, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 507, 508, 509, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 578, 579, 580, 581, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 617, 618, 619, 621, 622, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 684, 685, 686, 687, 688, 689, 690, 691, 696, 700, 701, 702, 712, 720, 721, 722, 739, 740, 743, 744, 746, 756, 757, 761, 762, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 779, 783, 786, 788, 790, 791, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 920, 921, 934, 953, 963, 964, 965, 969, 977, 980, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1020, 1021, 1022, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "seri": [3, 4, 12, 16, 21, 83, 120, 126, 168, 170, 173, 174, 183, 201, 203, 205, 219, 222, 244, 262, 266, 267, 314, 321, 326, 373, 376, 386, 395, 408, 488, 489, 490, 491, 495, 499, 500, 501, 503, 504, 509, 540, 561, 689, 693, 700, 740, 743, 744, 746, 788, 818, 822, 823, 826, 916, 979, 984, 985, 989, 991, 1002, 1008, 1010, 1034, 1037, 1038, 1039, 1043, 1046], "forecast": [3, 4, 16, 126, 152, 153, 159, 160, 163, 168, 201, 203, 219, 262, 266, 406, 418, 495, 561, 610, 614, 621, 622, 624, 700, 740, 743, 744, 746, 788, 818, 822, 823, 826, 988, 1008, 1010], "libsvm": [3, 16, 168, 177, 337, 374, 387, 486, 507, 562, 900, 901, 902, 903, 904, 905, 906, 1003, 1010, 1026, 1031, 1033, 1039, 1042, 1045], "gui": [3, 16, 168, 486, 904, 905, 1010, 1022, 1031, 1032, 1042], "model": [3, 5, 6, 9, 10, 12, 14, 15, 16, 17, 21, 22, 25, 26, 28, 35, 40, 41, 42, 49, 50, 55, 56, 57, 59, 62, 70, 72, 73, 74, 77, 79, 81, 83, 87, 95, 96, 106, 107, 108, 112, 113, 116, 118, 122, 124, 125, 126, 128, 130, 132, 133, 136, 137, 139, 140, 142, 144, 146, 147, 151, 156, 157, 159, 160, 161, 162, 166, 169, 170, 174, 175, 181, 183, 186, 187, 188, 191, 192, 194, 196, 197, 198, 202, 203, 205, 206, 207, 209, 213, 214, 216, 217, 218, 220, 230, 233, 238, 247, 249, 250, 251, 254, 256, 257, 258, 260, 263, 265, 266, 267, 268, 270, 271, 275, 276, 278, 280, 285, 287, 288, 289, 291, 294, 298, 308, 311, 313, 314, 317, 319, 321, 322, 323, 326, 327, 336, 338, 339, 340, 341, 342, 344, 345, 347, 349, 353, 354, 358, 359, 360, 363, 370, 373, 375, 376, 384, 387, 395, 397, 399, 404, 405, 406, 408, 409, 411, 413, 414, 415, 416, 417, 418, 427, 431, 433, 436, 441, 448, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 487, 488, 489, 495, 497, 499, 500, 501, 502, 508, 521, 523, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 587, 588, 590, 592, 593, 596, 601, 605, 608, 609, 610, 614, 626, 631, 632, 633, 634, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 700, 705, 710, 720, 721, 722, 732, 733, 739, 748, 751, 783, 786, 787, 790, 795, 796, 797, 800, 801, 802, 803, 811, 812, 813, 814, 818, 819, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 843, 845, 846, 847, 849, 851, 856, 857, 858, 860, 861, 863, 865, 867, 872, 873, 875, 876, 877, 879, 880, 881, 885, 886, 888, 889, 890, 891, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 915, 978, 980, 981, 982, 985, 986, 989, 991, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1008, 1009, 1010, 1011, 1013, 1016, 1018, 1020, 1024, 1025, 1026, 1031, 1032, 1033, 1034, 1035, 1036], "complex": [3, 9, 10, 15, 16, 17, 21, 73, 119, 133, 149, 153, 158, 165, 168, 205, 215, 218, 229, 236, 237, 245, 255, 260, 263, 266, 271, 278, 308, 317, 320, 321, 325, 332, 339, 343, 354, 356, 361, 362, 377, 381, 386, 393, 409, 413, 415, 419, 439, 443, 446, 447, 449, 466, 488, 499, 500, 501, 513, 533, 540, 550, 556, 557, 558, 559, 561, 563, 564, 603, 629, 637, 655, 657, 675, 676, 732, 748, 797, 826, 828, 856, 860, 861, 865, 873, 880, 896, 900, 903, 906, 908, 909, 910, 911, 977, 978, 980, 981, 983, 985, 987, 989, 994, 998, 1001, 1009, 1010, 1011, 1013, 1026, 1032, 1034, 1040, 1041, 1044], "influenc": [3, 9, 13, 16, 81, 82, 113, 168, 171, 183, 236, 247, 270, 307, 314, 339, 343, 347, 363, 369, 410, 413, 415, 431, 439, 453, 464, 481, 482, 483, 488, 500, 553, 555, 557, 559, 561, 564, 567, 569, 610, 627, 634, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 669, 671, 672, 675, 677, 678, 732, 748, 826, 833, 834, 842, 843, 850, 851, 858, 877, 878, 889, 901, 903, 906, 909, 911, 920, 977, 982, 983, 984, 991, 994, 998, 1002, 1003, 1010, 1013, 1034, 1039, 1040], "core": [3, 10, 16, 50, 56, 66, 72, 113, 119, 121, 122, 168, 171, 172, 322, 366, 368, 370, 379, 381, 384, 389, 395, 398, 408, 413, 415, 416, 419, 443, 445, 448, 449, 454, 456, 498, 537, 588, 593, 657, 658, 665, 667, 675, 835, 836, 837, 838, 839, 844, 852, 984, 991, 994, 1003, 1006, 1009, 1010, 1011, 1013, 1022, 1024, 1026, 1033, 1035, 1036, 1038, 1041, 1045, 1046, 1047], "classif": [3, 6, 7, 10, 15, 16, 17, 20, 24, 25, 26, 28, 29, 32, 35, 36, 46, 72, 73, 74, 79, 80, 86, 89, 93, 94, 99, 113, 115, 117, 119, 120, 121, 122, 124, 127, 128, 129, 131, 134, 135, 138, 142, 143, 145, 146, 147, 148, 149, 150, 152, 158, 159, 160, 163, 171, 172, 177, 179, 191, 192, 193, 194, 201, 209, 211, 212, 213, 214, 216, 220, 229, 231, 235, 236, 237, 240, 243, 245, 250, 251, 255, 256, 259, 260, 261, 262, 263, 271, 276, 277, 278, 280, 282, 284, 286, 287, 293, 294, 295, 297, 298, 299, 300, 301, 303, 305, 309, 310, 311, 312, 326, 331, 332, 334, 335, 339, 342, 344, 345, 346, 347, 348, 350, 351, 353, 354, 355, 363, 367, 369, 370, 374, 375, 376, 378, 383, 386, 390, 394, 395, 403, 406, 408, 409, 412, 413, 416, 417, 425, 436, 468, 474, 481, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 509, 511, 513, 514, 518, 519, 521, 522, 540, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 568, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 603, 604, 605, 608, 609, 610, 612, 613, 621, 630, 631, 632, 642, 657, 658, 665, 667, 673, 674, 675, 696, 702, 704, 707, 711, 712, 714, 715, 717, 724, 725, 727, 728, 732, 733, 736, 739, 740, 741, 752, 754, 756, 757, 759, 780, 781, 782, 784, 785, 786, 787, 792, 794, 797, 798, 800, 801, 802, 803, 811, 815, 816, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 842, 847, 849, 850, 856, 857, 858, 860, 864, 867, 872, 873, 874, 875, 880, 881, 884, 886, 895, 896, 897, 900, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 923, 926, 934, 977, 978, 980, 981, 982, 985, 986, 990, 993, 995, 996, 998, 999, 1001, 1007, 1008, 1010, 1011, 1012, 1013, 1015, 1016, 1020, 1021, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "text": [3, 6, 7, 10, 11, 12, 15, 16, 17, 18, 20, 32, 33, 38, 41, 45, 54, 58, 59, 61, 62, 63, 65, 71, 81, 82, 119, 124, 174, 181, 195, 196, 230, 234, 237, 241, 242, 247, 249, 255, 256, 261, 266, 268, 269, 273, 278, 290, 293, 295, 301, 309, 320, 325, 327, 332, 346, 355, 357, 367, 369, 370, 373, 374, 375, 381, 386, 393, 395, 406, 408, 409, 411, 412, 413, 415, 418, 446, 448, 467, 486, 487, 488, 498, 502, 507, 520, 535, 543, 563, 614, 624, 651, 657, 665, 667, 673, 675, 696, 702, 704, 706, 712, 716, 727, 735, 791, 793, 797, 811, 826, 835, 837, 839, 842, 847, 860, 861, 863, 864, 872, 896, 897, 898, 900, 912, 913, 914, 934, 977, 980, 984, 986, 988, 989, 990, 992, 995, 998, 1000, 1002, 1003, 1007, 1009, 1010, 1013, 1016, 1026, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "document": [3, 6, 7, 10, 12, 15, 16, 18, 19, 22, 23, 27, 32, 38, 46, 52, 58, 59, 61, 62, 65, 71, 72, 73, 74, 90, 91, 93, 96, 118, 120, 121, 129, 130, 133, 136, 147, 158, 171, 172, 173, 182, 184, 198, 199, 216, 231, 232, 233, 234, 237, 238, 240, 241, 242, 243, 244, 252, 256, 260, 262, 263, 269, 274, 303, 304, 313, 318, 321, 322, 328, 330, 344, 347, 354, 355, 361, 367, 368, 369, 370, 375, 376, 377, 379, 380, 382, 383, 384, 385, 386, 387, 389, 393, 395, 398, 399, 402, 405, 407, 408, 413, 416, 419, 443, 446, 447, 448, 449, 452, 456, 463, 487, 488, 498, 500, 510, 520, 522, 535, 543, 563, 587, 588, 589, 590, 593, 603, 630, 638, 642, 657, 658, 665, 667, 672, 673, 674, 675, 695, 696, 698, 702, 704, 710, 716, 735, 756, 757, 767, 776, 777, 778, 791, 793, 797, 800, 801, 803, 811, 819, 822, 824, 827, 830, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 861, 872, 900, 905, 916, 919, 921, 934, 954, 977, 984, 986, 988, 989, 990, 991, 992, 996, 1002, 1005, 1006, 1007, 1010, 1013, 1017, 1022, 1024, 1032, 1033, 1037], "outlier": [3, 11, 16, 35, 45, 55, 81, 82, 83, 126, 129, 153, 168, 179, 181, 199, 203, 204, 205, 206, 207, 215, 220, 229, 245, 286, 299, 306, 311, 314, 315, 338, 349, 376, 395, 408, 410, 415, 430, 445, 463, 465, 468, 469, 472, 473, 474, 475, 489, 490, 491, 495, 509, 511, 521, 523, 562, 630, 638, 648, 669, 670, 671, 675, 676, 677, 678, 691, 701, 826, 846, 850, 861, 869, 870, 872, 873, 874, 876, 877, 878, 879, 880, 885, 886, 887, 888, 889, 890, 891, 903, 904, 906, 988, 1002, 1003, 1008, 1010, 1011, 1025, 1026, 1031, 1036, 1037, 1039], "detect": [3, 8, 10, 11, 16, 21, 35, 64, 66, 81, 82, 83, 120, 129, 168, 182, 205, 215, 218, 229, 243, 245, 255, 262, 265, 271, 272, 278, 286, 299, 307, 313, 338, 376, 379, 381, 385, 393, 395, 406, 407, 408, 410, 412, 416, 430, 445, 448, 463, 465, 468, 469, 472, 473, 474, 475, 487, 488, 490, 491, 495, 509, 511, 514, 521, 536, 537, 538, 545, 562, 563, 587, 590, 595, 630, 638, 676, 697, 701, 725, 787, 826, 846, 850, 861, 870, 873, 874, 878, 879, 880, 900, 904, 980, 984, 1008, 1009, 1010, 1011, 1013, 1019, 1024, 1025, 1026, 1031, 1034, 1037, 1038, 1039, 1041, 1043, 1044, 1046, 1047], "set": [3, 4, 5, 6, 7, 8, 11, 13, 14, 16, 17, 21, 26, 27, 28, 31, 32, 35, 38, 42, 43, 45, 46, 47, 50, 51, 54, 55, 56, 58, 59, 61, 63, 65, 66, 67, 71, 72, 74, 81, 82, 83, 87, 91, 95, 96, 100, 101, 102, 105, 108, 111, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 135, 139, 146, 147, 150, 153, 159, 160, 161, 162, 168, 170, 171, 172, 173, 174, 180, 185, 186, 189, 190, 192, 194, 196, 197, 198, 200, 201, 202, 203, 206, 209, 214, 215, 219, 222, 223, 224, 230, 231, 232, 233, 235, 236, 237, 240, 244, 247, 249, 251, 252, 256, 257, 260, 262, 263, 264, 265, 266, 267, 270, 271, 272, 273, 276, 280, 283, 287, 291, 292, 293, 294, 295, 298, 302, 303, 304, 307, 309, 311, 312, 313, 314, 317, 319, 320, 326, 327, 330, 331, 336, 338, 341, 343, 347, 352, 353, 354, 359, 360, 363, 367, 368, 369, 370, 373, 374, 376, 378, 379, 381, 383, 385, 386, 388, 389, 394, 395, 396, 398, 399, 404, 405, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 422, 425, 432, 433, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 487, 488, 492, 494, 495, 496, 498, 501, 502, 503, 507, 508, 509, 514, 522, 523, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 696, 697, 698, 699, 700, 701, 702, 712, 713, 718, 720, 721, 724, 725, 726, 727, 728, 729, 732, 736, 738, 739, 743, 744, 746, 748, 749, 751, 754, 777, 778, 780, 781, 782, 783, 785, 787, 788, 789, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 915, 920, 921, 931, 932, 937, 941, 944, 945, 956, 958, 959, 962, 963, 969, 972, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1016, 1018, 1019, 1020, 1023, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "predict": [3, 6, 7, 8, 11, 16, 24, 26, 27, 28, 31, 33, 35, 38, 45, 49, 57, 58, 59, 63, 71, 72, 73, 74, 76, 86, 107, 111, 112, 113, 115, 116, 117, 119, 121, 122, 123, 124, 127, 129, 130, 131, 132, 133, 134, 135, 137, 141, 142, 147, 150, 152, 153, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 168, 171, 172, 173, 174, 177, 180, 183, 184, 185, 193, 196, 197, 198, 199, 202, 203, 204, 205, 207, 208, 209, 210, 215, 216, 218, 219, 230, 231, 233, 235, 237, 239, 248, 249, 250, 251, 252, 253, 255, 256, 260, 262, 264, 265, 268, 271, 272, 276, 278, 280, 283, 288, 291, 292, 293, 296, 297, 304, 307, 308, 312, 313, 317, 318, 319, 320, 321, 323, 327, 329, 330, 331, 335, 336, 338, 339, 343, 345, 346, 347, 348, 352, 353, 358, 359, 360, 361, 363, 366, 368, 370, 373, 376, 378, 381, 383, 388, 390, 395, 397, 399, 402, 403, 404, 406, 407, 408, 409, 413, 415, 416, 417, 425, 431, 436, 437, 438, 439, 441, 442, 443, 446, 447, 448, 464, 468, 481, 482, 483, 486, 500, 507, 523, 533, 540, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 576, 581, 592, 593, 601, 605, 609, 610, 612, 613, 614, 615, 621, 624, 626, 627, 629, 630, 631, 632, 633, 634, 636, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 696, 697, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 711, 713, 714, 717, 720, 721, 722, 723, 724, 725, 726, 727, 728, 732, 733, 736, 739, 740, 741, 744, 746, 748, 750, 754, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 794, 795, 796, 797, 800, 801, 803, 811, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 846, 847, 850, 851, 857, 858, 860, 867, 880, 881, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 962, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 989, 990, 991, 992, 994, 995, 996, 998, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1010, 1012, 1013, 1016, 1018, 1019, 1020, 1024, 1026, 1028, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "latenc": [3, 7, 8, 16, 124, 168, 366, 523, 564, 671, 677, 826, 880, 906, 953, 962, 1008, 1010, 1026, 1034], "speci": [3, 16, 91, 168, 240, 286, 299, 352, 376, 414, 497, 705, 787, 845, 904, 915, 988, 994, 1010, 1031], "distribut": [3, 4, 8, 9, 10, 13, 16, 21, 28, 35, 38, 40, 45, 53, 54, 56, 58, 63, 76, 80, 81, 82, 87, 93, 113, 115, 126, 129, 145, 150, 153, 162, 168, 170, 171, 174, 177, 180, 201, 203, 205, 224, 226, 230, 234, 240, 247, 252, 253, 258, 262, 268, 270, 280, 286, 290, 299, 306, 307, 309, 312, 315, 323, 326, 327, 344, 347, 352, 367, 368, 376, 377, 378, 379, 381, 382, 385, 386, 387, 395, 402, 406, 407, 408, 410, 412, 413, 414, 420, 446, 448, 468, 469, 470, 471, 472, 473, 474, 475, 487, 497, 502, 514, 515, 516, 517, 518, 522, 531, 532, 535, 549, 550, 551, 562, 610, 624, 639, 641, 643, 644, 647, 657, 658, 668, 678, 679, 687, 688, 689, 691, 705, 707, 722, 750, 787, 795, 796, 801, 802, 809, 811, 815, 816, 826, 836, 839, 845, 849, 856, 863, 876, 877, 878, 879, 880, 888, 889, 890, 895, 896, 904, 915, 939, 956, 977, 982, 984, 986, 987, 988, 990, 991, 993, 994, 1000, 1001, 1006, 1008, 1009, 1010, 1015, 1019, 1023, 1025, 1026, 1031, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047], "relat": [3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 169, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 370, 376, 377, 380, 384, 385, 386, 388, 389, 390, 393, 395, 396, 397, 399, 402, 407, 408, 409, 410, 411, 412, 413, 415, 418, 449, 463, 468, 495, 548, 549, 561, 562, 638, 672, 676, 691, 700, 721, 741, 818, 823, 858, 859, 861, 864, 865, 870, 873, 875, 876, 879, 888, 904, 977, 980, 982, 988, 989, 991, 992, 995, 998, 1003, 1004, 1005, 1006, 1009, 1010, 1026, 1031, 1035, 1036, 1037, 1039, 1040, 1043, 1044, 1047], "engin": [3, 16, 41, 118, 123, 158, 168, 171, 172, 202, 313, 367, 375, 378, 408, 414, 416, 463, 495, 561, 638, 672, 700, 818, 823, 858, 859, 861, 864, 865, 870, 873, 875, 879, 978, 980, 988, 998, 1006, 1010, 1037], "topic": [3, 6, 7, 8, 16, 71, 168, 227, 352, 353, 354, 376, 377, 412, 413, 416, 487, 496, 535, 537, 539, 546, 587, 590, 984, 989, 1008, 1009, 1010, 1024, 1036, 1038], "extract": [3, 4, 6, 8, 11, 12, 16, 18, 51, 56, 70, 71, 72, 73, 77, 86, 96, 119, 146, 150, 168, 216, 227, 255, 261, 266, 267, 268, 270, 278, 304, 330, 342, 352, 354, 363, 370, 373, 376, 378, 383, 387, 390, 393, 408, 409, 412, 413, 449, 451, 454, 455, 461, 463, 487, 488, 492, 493, 502, 503, 530, 533, 534, 535, 536, 537, 538, 539, 540, 542, 544, 545, 546, 582, 583, 587, 588, 590, 592, 593, 596, 598, 630, 717, 786, 797, 811, 837, 859, 860, 905, 937, 945, 952, 977, 985, 989, 993, 998, 1002, 1008, 1010, 1013, 1016, 1020, 1021, 1026, 1031, 1032, 1040, 1043], "neg": [3, 4, 6, 16, 17, 25, 61, 76, 79, 87, 119, 125, 126, 130, 168, 170, 171, 179, 191, 197, 201, 219, 220, 227, 251, 252, 259, 262, 265, 269, 271, 272, 285, 307, 311, 321, 352, 387, 395, 396, 408, 412, 415, 416, 417, 419, 420, 431, 439, 443, 451, 464, 468, 481, 482, 483, 487, 530, 532, 534, 535, 536, 537, 539, 541, 543, 546, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 569, 587, 590, 591, 594, 595, 597, 598, 599, 601, 603, 604, 605, 606, 607, 608, 610, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 668, 669, 671, 672, 676, 677, 678, 679, 686, 697, 698, 703, 704, 711, 712, 714, 717, 718, 720, 721, 722, 725, 727, 728, 729, 733, 736, 739, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 780, 781, 782, 783, 785, 788, 789, 791, 795, 796, 803, 819, 821, 826, 833, 834, 843, 846, 851, 858, 867, 876, 878, 879, 884, 888, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 935, 937, 956, 986, 988, 989, 991, 992, 993, 994, 1002, 1003, 1010, 1024, 1025, 1026, 1031, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "matrix": [3, 6, 7, 9, 13, 14, 16, 20, 21, 22, 33, 35, 40, 42, 45, 55, 63, 71, 80, 81, 82, 83, 86, 96, 97, 98, 107, 160, 168, 174, 179, 187, 202, 206, 220, 227, 231, 234, 235, 237, 252, 255, 269, 278, 297, 303, 321, 326, 327, 343, 352, 353, 354, 361, 367, 370, 376, 377, 378, 381, 383, 387, 390, 393, 394, 395, 405, 409, 410, 411, 416, 417, 418, 419, 420, 430, 431, 437, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 453, 456, 458, 459, 461, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 491, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 509, 518, 520, 522, 523, 525, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 584, 585, 587, 588, 589, 590, 592, 593, 602, 603, 604, 605, 606, 607, 608, 610, 619, 628, 629, 630, 632, 634, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 706, 711, 712, 713, 714, 715, 717, 727, 728, 729, 732, 736, 737, 738, 739, 752, 753, 756, 757, 758, 759, 761, 762, 764, 765, 766, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 785, 786, 790, 791, 794, 795, 796, 797, 800, 801, 811, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 869, 871, 872, 873, 875, 877, 878, 879, 880, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 916, 918, 919, 920, 921, 926, 935, 936, 937, 938, 941, 942, 943, 951, 952, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 974, 978, 980, 982, 984, 985, 989, 990, 991, 992, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1010, 1023, 1024, 1025, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "factor": [3, 6, 9, 16, 27, 32, 45, 47, 54, 56, 63, 79, 86, 95, 101, 106, 108, 131, 168, 171, 215, 227, 230, 240, 273, 274, 285, 286, 299, 301, 302, 307, 309, 319, 321, 338, 367, 368, 381, 387, 390, 395, 405, 407, 408, 415, 416, 418, 439, 441, 453, 468, 470, 471, 472, 473, 475, 477, 487, 503, 513, 514, 526, 531, 534, 535, 537, 539, 540, 543, 544, 545, 546, 548, 549, 560, 561, 562, 587, 590, 596, 612, 648, 649, 650, 653, 654, 655, 681, 682, 691, 718, 781, 797, 800, 801, 822, 846, 880, 894, 896, 904, 936, 937, 977, 984, 985, 991, 998, 1001, 1005, 1008, 1010, 1025, 1026, 1031, 1032, 1034, 1035, 1037, 1045, 1047], "latent": [3, 6, 16, 18, 107, 168, 227, 304, 353, 411, 416, 418, 487, 531, 535, 537, 538, 539, 542, 543, 587, 590, 856, 987, 1008, 1010, 1024, 1025, 1026, 1033, 1036], "dirichlet": [3, 6, 16, 168, 227, 247, 248, 253, 257, 416, 487, 535, 537, 539, 587, 590, 795, 1008, 1010, 1025, 1026, 1031, 1036, 1037], "alloc": [3, 6, 16, 26, 62, 168, 227, 274, 319, 377, 381, 382, 408, 416, 442, 446, 458, 487, 535, 537, 539, 583, 587, 590, 645, 651, 659, 661, 800, 801, 803, 819, 824, 827, 977, 998, 1008, 1010, 1025, 1026, 1035, 1036, 1041, 1042, 1048], "visual": [3, 4, 9, 13, 16, 17, 21, 26, 31, 33, 44, 47, 50, 53, 58, 61, 62, 81, 86, 92, 95, 96, 98, 100, 104, 106, 108, 118, 119, 127, 129, 131, 135, 136, 149, 161, 166, 168, 172, 174, 185, 192, 201, 203, 219, 222, 223, 226, 227, 229, 232, 235, 241, 242, 245, 252, 255, 256, 258, 259, 263, 264, 267, 269, 271, 272, 278, 290, 294, 295, 300, 302, 305, 307, 311, 312, 317, 319, 327, 343, 370, 373, 377, 379, 387, 388, 405, 410, 412, 413, 414, 415, 437, 440, 444, 445, 453, 471, 495, 501, 503, 506, 509, 513, 521, 531, 533, 540, 563, 565, 570, 630, 632, 657, 688, 691, 696, 697, 699, 700, 701, 717, 725, 780, 787, 798, 799, 802, 803, 814, 815, 816, 817, 818, 819, 826, 857, 861, 865, 869, 870, 872, 876, 877, 878, 880, 902, 905, 914, 933, 983, 985, 986, 991, 992, 994, 995, 998, 1004, 1008, 1010, 1015, 1026, 1034, 1041, 1042, 1043, 1045], "stock": [3, 16, 47, 53, 168, 222, 223, 226, 408, 410, 453, 471, 688, 1010, 1018], "market": [3, 16, 47, 53, 168, 222, 223, 226, 408, 410, 453, 471, 688, 1010, 1013, 1018], "wikipedia": [3, 16, 25, 168, 389, 407, 408, 594, 606, 607, 635, 655, 667, 670, 681, 682, 694, 703, 704, 706, 708, 711, 715, 717, 724, 727, 728, 729, 732, 733, 736, 741, 754, 781, 783, 784, 786, 787, 790, 791, 842, 843, 848, 849, 850, 851, 878, 894, 908, 909, 980, 984, 988, 991, 1000, 1004, 1010, 1024, 1031, 1038], "princip": [3, 16, 46, 85, 86, 88, 91, 95, 98, 100, 101, 103, 105, 108, 131, 168, 198, 222, 235, 238, 294, 312, 319, 373, 408, 411, 420, 483, 530, 531, 532, 533, 534, 536, 538, 539, 540, 541, 542, 543, 544, 545, 549, 656, 687, 688, 689, 691, 692, 826, 849, 861, 880, 936, 937, 985, 991, 1010, 1025, 1026, 1031], "eigenvector": [3, 16, 47, 87, 91, 168, 247, 408, 451, 461, 533, 534, 540, 549, 687, 688, 690, 694, 985, 1010, 1031, 1035, 1045], "end": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 379, 381, 383, 385, 393, 395, 396, 398, 399, 405, 408, 409, 411, 415, 449, 455, 467, 487, 488, 507, 508, 536, 545, 556, 557, 558, 559, 563, 564, 565, 644, 645, 646, 649, 650, 651, 652, 653, 654, 659, 660, 661, 662, 680, 681, 682, 683, 797, 800, 801, 811, 818, 821, 858, 860, 898, 908, 909, 910, 911, 941, 942, 972, 977, 980, 984, 985, 987, 988, 998, 1000, 1002, 1008, 1013, 1021, 1024, 1036, 1038, 1041, 1044, 1045], "download": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 168, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 374, 376, 378, 379, 385, 386, 389, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 509, 1004, 1020, 1022, 1024, 1026, 1035, 1036, 1039, 1043, 1044, 1045], "exampl": [4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 367, 368, 370, 378, 380, 381, 383, 384, 385, 387, 388, 389, 390, 391, 394, 395, 398, 401, 402, 407, 419, 420, 424, 438, 455, 460, 470, 484, 506, 507, 530, 546, 554, 571, 572, 576, 582, 591, 594, 595, 597, 600, 602, 611, 615, 619, 620, 623, 628, 637, 641, 649, 650, 653, 659, 660, 662, 666, 674, 698, 707, 713, 714, 720, 721, 722, 724, 726, 728, 729, 737, 741, 742, 745, 749, 752, 754, 761, 762, 766, 767, 769, 771, 779, 781, 789, 792, 794, 804, 805, 806, 807, 808, 809, 810, 832, 834, 836, 840, 841, 850, 851, 852, 854, 862, 863, 866, 868, 871, 882, 888, 892, 895, 901, 910, 911, 912, 913, 926, 935, 937, 939, 940, 942, 950, 951, 952, 956, 959, 976, 978, 986, 1009, 1010, 1011, 1013, 1016, 1019, 1020, 1024, 1026, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1041, 1044, 1046, 1047], "run": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 363, 367, 368, 379, 381, 382, 383, 385, 386, 387, 388, 389, 393, 395, 396, 398, 404, 408, 410, 412, 415, 418, 419, 420, 436, 442, 443, 445, 446, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 461, 463, 466, 467, 470, 471, 530, 531, 532, 533, 534, 536, 538, 540, 541, 542, 544, 545, 547, 554, 555, 556, 557, 562, 563, 564, 565, 566, 567, 568, 569, 581, 591, 593, 594, 595, 597, 598, 599, 601, 609, 610, 633, 639, 645, 646, 648, 650, 651, 652, 654, 655, 659, 660, 661, 662, 681, 682, 687, 688, 689, 690, 691, 692, 693, 779, 797, 800, 801, 803, 811, 819, 821, 822, 823, 824, 825, 827, 832, 833, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 857, 858, 859, 862, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 931, 932, 956, 959, 962, 977, 987, 989, 992, 1001, 1003, 1004, 1008, 1009, 1013, 1015, 1022, 1024, 1031, 1034, 1036, 1038, 1039, 1040, 1041, 1045, 1046, 1047], "your": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 363, 367, 368, 369, 375, 379, 380, 381, 382, 384, 385, 387, 389, 390, 393, 394, 395, 398, 402, 404, 407, 408, 409, 410, 415, 416, 419, 420, 443, 445, 502, 532, 560, 561, 601, 633, 645, 686, 797, 800, 801, 803, 811, 819, 823, 825, 931, 985, 992, 998, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1012, 1013, 1017, 1024, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "browser": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 381, 389, 998, 1048], "jupyterlit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361], "binder": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361], "notebook": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 382, 383, 387, 409, 467, 898, 1004, 1007, 1008, 1009, 1042, 1045], "introduc": [4, 72, 79, 81, 82, 101, 149, 168, 173, 180, 185, 205, 229, 234, 237, 240, 242, 245, 269, 322, 323, 354, 374, 377, 379, 381, 383, 385, 386, 389, 393, 395, 399, 406, 408, 410, 412, 413, 415, 416, 432, 440, 441, 442, 444, 446, 448, 458, 463, 467, 481, 482, 483, 484, 495, 503, 514, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 554, 555, 565, 566, 567, 568, 569, 580, 581, 582, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 657, 663, 684, 685, 687, 688, 691, 826, 844, 849, 852, 856, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 894, 898, 982, 984, 987, 990, 991, 994, 998, 1000, 1002, 1003, 1010, 1015, 1022, 1031, 1032, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "differ": [4, 5, 7, 10, 12, 14, 15, 17, 21, 22, 25, 28, 31, 32, 35, 37, 38, 40, 42, 43, 44, 46, 47, 48, 50, 53, 54, 56, 57, 58, 59, 61, 65, 66, 67, 68, 69, 71, 72, 73, 75, 81, 86, 87, 91, 92, 93, 96, 98, 99, 101, 104, 105, 106, 113, 116, 118, 119, 122, 123, 126, 128, 129, 133, 134, 135, 136, 139, 142, 145, 150, 152, 153, 154, 155, 158, 159, 160, 163, 165, 166, 168, 170, 171, 173, 177, 180, 181, 184, 187, 188, 189, 190, 192, 198, 201, 202, 203, 205, 206, 207, 208, 209, 218, 219, 222, 223, 224, 225, 227, 230, 232, 235, 236, 237, 240, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 276, 277, 280, 283, 285, 288, 291, 292, 294, 301, 302, 306, 308, 309, 311, 312, 315, 317, 334, 335, 337, 338, 339, 341, 342, 347, 348, 350, 352, 353, 354, 363, 367, 368, 369, 375, 376, 378, 379, 380, 381, 384, 386, 388, 390, 394, 395, 398, 402, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 433, 436, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 457, 458, 461, 463, 474, 477, 489, 492, 493, 495, 502, 503, 507, 508, 511, 513, 521, 536, 537, 538, 539, 545, 546, 548, 549, 554, 555, 562, 580, 581, 587, 588, 589, 590, 593, 610, 612, 613, 614, 618, 621, 622, 626, 630, 631, 632, 633, 637, 642, 643, 646, 648, 650, 652, 654, 657, 660, 665, 666, 667, 671, 673, 675, 676, 677, 679, 689, 691, 693, 697, 699, 700, 703, 704, 705, 706, 708, 714, 716, 717, 725, 726, 727, 728, 729, 732, 733, 735, 741, 755, 756, 757, 759, 766, 776, 780, 781, 782, 784, 785, 787, 790, 791, 793, 796, 797, 799, 800, 801, 802, 803, 806, 811, 812, 813, 814, 815, 816, 817, 819, 821, 823, 824, 827, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 850, 853, 856, 860, 865, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 885, 886, 887, 888, 889, 890, 891, 900, 901, 902, 905, 908, 909, 910, 911, 945, 952, 977, 978, 980, 981, 983, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 998, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1017, 1018, 1019, 1023, 1024, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "strategi": [4, 13, 53, 55, 59, 62, 72, 123, 128, 133, 141, 147, 149, 165, 166, 168, 173, 185, 190, 201, 208, 209, 219, 231, 232, 240, 242, 255, 261, 263, 265, 266, 267, 269, 270, 271, 272, 274, 278, 283, 300, 303, 305, 306, 308, 309, 313, 314, 315, 317, 318, 321, 354, 366, 383, 387, 394, 395, 412, 415, 416, 417, 420, 436, 437, 438, 446, 451, 461, 471, 501, 503, 511, 513, 521, 532, 537, 550, 551, 560, 561, 563, 564, 566, 567, 570, 587, 588, 590, 591, 593, 601, 626, 627, 629, 633, 644, 646, 650, 652, 654, 660, 662, 664, 672, 674, 690, 694, 703, 712, 753, 755, 793, 797, 800, 801, 803, 811, 814, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 857, 865, 870, 881, 895, 900, 902, 905, 908, 909, 910, 911, 959, 977, 978, 987, 989, 990, 991, 992, 994, 996, 998, 1002, 1003, 1004, 1008, 1010, 1019, 1024, 1026, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047], "leverag": [4, 8, 38, 50, 87, 219, 352, 353, 367, 368, 379, 412, 415, 875, 977, 984, 1015, 1034, 1046], "task": [4, 7, 99, 120, 121, 127, 148, 149, 161, 168, 179, 185, 187, 188, 190, 200, 201, 217, 220, 222, 240, 259, 283, 343, 354, 367, 369, 376, 378, 379, 380, 381, 385, 386, 387, 390, 393, 394, 395, 413, 415, 416, 417, 418, 447, 460, 492, 504, 514, 591, 594, 595, 597, 598, 599, 603, 604, 605, 608, 631, 632, 645, 646, 651, 652, 659, 660, 661, 662, 673, 680, 683, 725, 727, 728, 752, 780, 782, 785, 787, 798, 802, 815, 820, 954, 955, 985, 988, 989, 990, 991, 999, 1001, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1022, 1023, 1024, 1026, 1031, 1036, 1040, 1046], "highli": [4, 9, 73, 81, 82, 98, 107, 129, 185, 196, 206, 262, 265, 271, 302, 343, 353, 367, 368, 381, 383, 387, 406, 408, 412, 415, 416, 451, 461, 495, 562, 670, 691, 809, 811, 856, 984, 988, 991, 992, 994, 1002, 1003, 1007, 1008], "depend": [4, 5, 7, 13, 38, 54, 76, 100, 119, 123, 126, 127, 130, 133, 145, 149, 159, 165, 168, 169, 171, 174, 175, 177, 181, 185, 219, 223, 229, 230, 236, 240, 245, 252, 262, 263, 267, 268, 269, 285, 302, 307, 312, 319, 322, 336, 343, 347, 353, 354, 363, 367, 368, 369, 374, 381, 383, 384, 389, 390, 393, 394, 395, 396, 397, 398, 401, 402, 404, 407, 408, 410, 412, 413, 415, 416, 417, 418, 419, 437, 438, 439, 443, 445, 446, 448, 449, 451, 453, 456, 458, 459, 461, 463, 468, 483, 488, 489, 490, 492, 495, 499, 500, 501, 503, 504, 509, 533, 534, 540, 543, 550, 558, 559, 561, 587, 588, 589, 590, 601, 603, 606, 607, 610, 626, 631, 632, 637, 639, 647, 657, 658, 668, 670, 672, 675, 676, 677, 679, 686, 689, 690, 693, 694, 727, 728, 736, 739, 776, 779, 781, 782, 785, 790, 791, 795, 796, 816, 825, 842, 843, 844, 846, 848, 849, 850, 851, 852, 858, 859, 861, 873, 874, 877, 880, 894, 901, 902, 905, 909, 918, 977, 978, 980, 981, 982, 984, 985, 987, 988, 990, 991, 992, 993, 996, 1000, 1002, 1003, 1004, 1010, 1015, 1022, 1024, 1026, 1028, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1046, 1047, 1048], "busi": [4, 201, 262, 389, 393, 786, 984, 988, 1013], "dai": [4, 12, 13, 158, 172, 202, 368, 378, 381, 879, 1013, 1037, 1038, 1045, 1046], "week": [4, 13, 380, 381, 396, 1013, 1045], "yearli": 4, "season": [4, 13, 158, 172, 202, 380], "perform": [4, 7, 13, 20, 25, 26, 27, 28, 33, 37, 39, 41, 49, 50, 54, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 71, 72, 75, 79, 87, 90, 99, 106, 111, 113, 119, 121, 123, 125, 127, 128, 132, 133, 139, 145, 148, 149, 150, 154, 162, 165, 166, 168, 171, 172, 173, 174, 177, 185, 190, 201, 203, 205, 207, 208, 209, 218, 219, 223, 224, 226, 230, 235, 238, 240, 249, 252, 255, 257, 258, 259, 260, 262, 263, 264, 267, 268, 270, 271, 273, 275, 277, 278, 280, 283, 285, 298, 304, 307, 309, 311, 313, 314, 317, 323, 325, 327, 328, 332, 339, 342, 343, 345, 347, 352, 354, 363, 366, 368, 369, 376, 378, 383, 384, 385, 387, 389, 390, 393, 394, 395, 397, 399, 402, 403, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 426, 430, 439, 441, 442, 443, 445, 446, 447, 449, 451, 453, 454, 458, 460, 467, 468, 481, 482, 483, 484, 493, 501, 511, 514, 530, 531, 532, 534, 536, 541, 542, 543, 544, 545, 547, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 580, 581, 582, 587, 588, 589, 590, 593, 600, 601, 602, 609, 610, 626, 629, 630, 637, 639, 644, 650, 653, 654, 655, 657, 663, 664, 665, 666, 667, 669, 672, 674, 675, 676, 677, 681, 682, 684, 686, 688, 689, 692, 693, 696, 702, 703, 704, 706, 707, 711, 712, 724, 727, 728, 736, 738, 740, 753, 754, 755, 776, 781, 782, 784, 785, 786, 792, 793, 794, 795, 796, 797, 800, 801, 808, 809, 811, 815, 821, 822, 823, 825, 826, 829, 832, 833, 835, 836, 837, 838, 839, 840, 841, 847, 849, 855, 856, 857, 858, 860, 861, 863, 866, 867, 869, 870, 872, 873, 874, 876, 877, 880, 881, 883, 885, 886, 887, 888, 889, 890, 891, 895, 896, 898, 902, 903, 904, 905, 906, 908, 909, 910, 911, 920, 921, 961, 972, 977, 978, 980, 982, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 1001, 1002, 1003, 1004, 1008, 1009, 1010, 1013, 1015, 1016, 1019, 1022, 1025, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "sklearn": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 363, 367, 368, 369, 370, 374, 375, 376, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 393, 394, 395, 397, 398, 399, 402, 404, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 977, 978, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1008, 1009, 1015, 1019, 1020, 1021, 1022, 1023, 1024, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "preprocess": [4, 5, 6, 10, 32, 43, 45, 50, 54, 56, 59, 63, 71, 72, 73, 74, 76, 87, 96, 107, 118, 123, 146, 150, 158, 162, 173, 177, 180, 182, 189, 190, 192, 201, 202, 207, 217, 219, 223, 231, 232, 241, 244, 259, 269, 271, 276, 288, 293, 294, 301, 302, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 330, 339, 342, 353, 369, 370, 373, 375, 378, 381, 386, 394, 395, 404, 405, 408, 409, 412, 415, 416, 417, 463, 464, 465, 466, 488, 566, 580, 581, 587, 588, 590, 629, 657, 658, 671, 673, 675, 677, 686, 829, 860, 861, 900, 901, 902, 903, 905, 906, 978, 984, 989, 992, 999, 1002, 1003, 1005, 1008, 1010, 1012, 1013, 1015, 1020, 1021, 1024, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "splinetransform": [4, 202, 240, 320, 875, 998, 1044, 1046, 1047], "class": [4, 8, 9, 10, 11, 14, 17, 20, 24, 25, 26, 28, 29, 31, 35, 41, 55, 56, 57, 59, 72, 73, 91, 92, 93, 101, 105, 107, 111, 112, 114, 117, 119, 121, 124, 129, 134, 137, 150, 153, 154, 156, 157, 161, 162, 165, 168, 171, 172, 177, 179, 191, 192, 193, 209, 213, 216, 217, 220, 223, 230, 237, 238, 240, 247, 248, 249, 255, 256, 257, 262, 264, 268, 272, 273, 278, 280, 283, 285, 288, 290, 291, 292, 293, 294, 295, 296, 302, 312, 317, 321, 323, 326, 328, 329, 334, 335, 336, 337, 339, 340, 343, 348, 350, 352, 353, 354, 358, 361, 369, 370, 373, 375, 376, 377, 378, 381, 382, 383, 385, 386, 387, 388, 390, 393, 394, 398, 404, 406, 408, 409, 411, 413, 417, 418, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 460, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 499, 501, 502, 503, 507, 508, 509, 511, 513, 514, 518, 521, 522, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 580, 581, 582, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 711, 712, 713, 714, 715, 716, 717, 719, 725, 727, 728, 729, 733, 734, 735, 736, 737, 738, 739, 740, 741, 752, 753, 755, 780, 781, 782, 784, 785, 786, 787, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 823, 824, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 925, 926, 927, 928, 929, 931, 932, 944, 945, 946, 949, 954, 956, 958, 959, 972, 977, 978, 979, 980, 982, 983, 984, 985, 987, 989, 990, 992, 995, 996, 998, 999, 1001, 1004, 1009, 1010, 1011, 1013, 1015, 1019, 1022, 1024, 1026, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "extrapol": [4, 153, 180, 202, 233, 265, 879, 988, 998, 1004, 1044, 1046], "option": [4, 31, 47, 53, 104, 119, 127, 159, 166, 182, 185, 202, 240, 265, 271, 318, 352, 357, 363, 369, 375, 376, 377, 379, 381, 382, 384, 386, 387, 389, 390, 393, 395, 396, 398, 402, 408, 409, 411, 412, 413, 415, 416, 419, 432, 436, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 458, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 611, 612, 613, 614, 615, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 686, 687, 688, 689, 691, 693, 694, 710, 712, 716, 727, 728, 733, 734, 735, 755, 756, 757, 762, 764, 765, 769, 772, 773, 774, 775, 776, 779, 781, 782, 785, 790, 791, 793, 798, 799, 800, 801, 803, 804, 806, 815, 819, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 914, 927, 974, 977, 978, 984, 987, 988, 991, 998, 1001, 1003, 1004, 1009, 1012, 1022, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "load": [4, 6, 11, 12, 13, 15, 27, 33, 47, 49, 54, 72, 73, 90, 96, 107, 118, 120, 122, 129, 130, 133, 134, 136, 147, 148, 158, 171, 172, 177, 182, 197, 198, 201, 209, 217, 232, 233, 237, 239, 240, 241, 242, 244, 252, 258, 260, 262, 267, 269, 274, 280, 285, 289, 294, 302, 303, 304, 318, 319, 321, 322, 328, 329, 330, 358, 361, 367, 370, 373, 376, 378, 384, 387, 394, 402, 407, 411, 412, 413, 415, 481, 482, 483, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 531, 533, 542, 840, 841, 937, 998, 1009, 1016, 1018, 1020, 1026, 1031, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "openml": [4, 13, 72, 133, 158, 171, 201, 209, 217, 219, 231, 280, 283, 303, 374, 398, 495, 1026, 1039, 1041, 1044], "repositori": [4, 8, 13, 177, 323, 374, 376, 378, 379, 381, 383, 385, 389, 396, 398, 503, 1008, 1012, 1026], "import": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 145, 146, 147, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 169, 170, 171, 172, 175, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 363, 367, 368, 369, 375, 376, 379, 380, 381, 383, 385, 386, 387, 388, 389, 390, 393, 394, 395, 397, 398, 399, 402, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 459, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 481, 482, 483, 484, 487, 494, 495, 499, 501, 502, 503, 505, 506, 507, 509, 511, 514, 520, 523, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 576, 578, 579, 580, 581, 582, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 687, 688, 689, 690, 691, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 714, 716, 717, 720, 721, 722, 724, 725, 726, 727, 728, 729, 732, 733, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 761, 762, 766, 767, 769, 771, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 888, 889, 892, 893, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 927, 932, 935, 937, 939, 940, 941, 942, 949, 950, 951, 952, 956, 959, 962, 976, 977, 978, 980, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1009, 1010, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1028, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046], "fetch_openml": [4, 5, 13, 72, 76, 123, 133, 158, 171, 172, 173, 201, 209, 217, 219, 231, 240, 244, 280, 283, 285, 303, 313, 317, 321, 375, 385, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "bike_shar": [4, 13], "bike_sharing_demand": [4, 13, 172], "version": [4, 13, 47, 54, 56, 72, 96, 101, 113, 155, 166, 172, 173, 177, 185, 199, 202, 203, 209, 215, 217, 237, 240, 244, 283, 303, 312, 317, 318, 319, 320, 322, 323, 339, 352, 367, 370, 376, 380, 381, 382, 383, 384, 387, 389, 390, 393, 395, 396, 398, 401, 402, 407, 408, 409, 411, 413, 415, 416, 418, 419, 420, 426, 430, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 499, 500, 501, 503, 504, 507, 508, 509, 511, 513, 521, 522, 525, 526, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 580, 581, 582, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 699, 700, 701, 703, 706, 707, 712, 713, 717, 720, 721, 722, 723, 725, 726, 727, 728, 729, 732, 737, 738, 739, 740, 741, 744, 748, 749, 751, 752, 754, 755, 756, 757, 759, 764, 765, 766, 767, 776, 780, 781, 782, 783, 785, 787, 788, 789, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 810, 811, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 886, 888, 889, 890, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 918, 920, 921, 931, 932, 934, 936, 937, 944, 945, 946, 947, 948, 951, 954, 955, 956, 958, 963, 969, 974, 975, 977, 980, 982, 985, 988, 990, 992, 994, 996, 1001, 1002, 1004, 1006, 1008, 1009, 1012, 1023, 1027, 1029], "2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 88, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 142, 146, 147, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 177, 179, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 363, 367, 368, 369, 375, 376, 378, 379, 381, 383, 385, 386, 387, 388, 390, 393, 394, 395, 398, 399, 400, 401, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 431, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 456, 458, 459, 461, 462, 463, 464, 467, 468, 470, 471, 472, 473, 474, 477, 481, 482, 483, 484, 492, 495, 499, 500, 503, 506, 507, 508, 509, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 576, 580, 581, 583, 584, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 602, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 702, 703, 704, 705, 706, 707, 712, 713, 714, 715, 716, 717, 720, 721, 722, 723, 724, 726, 727, 728, 729, 732, 733, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 761, 762, 766, 767, 769, 771, 774, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 884, 888, 893, 894, 896, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 915, 920, 921, 926, 934, 935, 936, 937, 939, 940, 941, 942, 949, 950, 951, 952, 953, 954, 956, 959, 961, 962, 975, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1010, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1027, 1028, 1029, 1031, 1032, 1033, 1035, 1036], "as_fram": [4, 5, 13, 72, 76, 119, 123, 133, 158, 171, 172, 173, 174, 189, 190, 201, 209, 217, 219, 240, 244, 280, 285, 288, 303, 312, 313, 317, 319, 321, 322, 375, 376, 488, 489, 490, 491, 495, 499, 500, 501, 503, 504, 509, 1041, 1042, 1043, 1044, 1047], "true": [4, 5, 6, 7, 8, 10, 11, 13, 15, 17, 18, 20, 27, 31, 33, 35, 38, 45, 50, 51, 54, 55, 56, 58, 59, 61, 64, 71, 72, 73, 74, 76, 79, 80, 81, 82, 83, 86, 93, 96, 97, 98, 99, 101, 107, 111, 113, 117, 119, 123, 124, 125, 126, 128, 129, 130, 133, 134, 136, 139, 140, 141, 146, 149, 153, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 185, 186, 188, 189, 190, 192, 194, 196, 197, 198, 201, 203, 204, 205, 208, 209, 215, 216, 217, 219, 222, 225, 226, 230, 231, 234, 236, 237, 238, 239, 240, 243, 244, 247, 250, 252, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 290, 291, 294, 298, 301, 302, 303, 304, 308, 312, 313, 314, 317, 319, 321, 322, 323, 327, 329, 330, 331, 342, 346, 347, 348, 352, 353, 354, 357, 358, 361, 363, 367, 368, 374, 376, 377, 381, 382, 383, 386, 387, 388, 390, 394, 395, 397, 399, 402, 404, 405, 406, 408, 409, 410, 412, 413, 415, 416, 417, 418, 420, 421, 422, 425, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 458, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 512, 513, 514, 518, 521, 522, 523, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 696, 697, 698, 699, 700, 701, 702, 704, 706, 707, 708, 711, 712, 713, 714, 717, 719, 722, 724, 725, 726, 727, 728, 729, 732, 733, 736, 737, 738, 739, 740, 741, 748, 749, 750, 752, 754, 759, 765, 766, 767, 776, 780, 781, 782, 783, 784, 785, 786, 787, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 808, 809, 811, 815, 816, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 918, 919, 920, 921, 931, 937, 938, 949, 950, 953, 954, 958, 959, 961, 969, 974, 976, 977, 978, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 998, 1000, 1001, 1002, 1003, 1004, 1008, 1015, 1019, 1020, 1022, 1023, 1024, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "df": [4, 13, 26, 28, 133, 170, 172, 180, 185, 201, 219, 252, 262, 311, 313, 353, 386, 416, 589, 590, 977, 978, 1048], "frame": [4, 13, 17, 72, 158, 171, 172, 201, 313, 376, 381, 393, 396, 488, 489, 490, 491, 495, 499, 500, 501, 503, 504, 509, 1008, 1020, 1043], "To": [4, 8, 17, 27, 28, 33, 47, 56, 58, 79, 81, 83, 87, 101, 113, 123, 126, 127, 135, 139, 150, 158, 159, 162, 165, 166, 170, 171, 177, 182, 185, 189, 201, 202, 203, 205, 209, 219, 234, 235, 237, 240, 242, 244, 252, 257, 259, 260, 262, 264, 265, 267, 269, 280, 283, 303, 307, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 349, 353, 357, 363, 367, 368, 374, 375, 379, 381, 382, 383, 385, 386, 387, 389, 393, 395, 396, 399, 402, 404, 405, 408, 409, 410, 411, 412, 413, 415, 416, 445, 447, 448, 449, 460, 463, 466, 491, 495, 501, 502, 506, 507, 530, 536, 537, 538, 540, 542, 543, 544, 545, 556, 557, 558, 559, 563, 564, 568, 596, 610, 626, 631, 645, 646, 651, 652, 655, 657, 658, 659, 660, 661, 662, 683, 699, 711, 726, 761, 783, 791, 800, 801, 822, 829, 860, 871, 876, 890, 891, 900, 901, 908, 909, 910, 911, 927, 937, 956, 975, 977, 978, 980, 983, 984, 985, 986, 988, 989, 990, 991, 994, 995, 998, 1002, 1003, 1004, 1012, 1013, 1015, 1019, 1021, 1022, 1024, 1031, 1034, 1036, 1037, 1038, 1040, 1042], "get": [4, 5, 9, 12, 17, 18, 20, 38, 49, 53, 57, 97, 101, 126, 135, 147, 150, 153, 158, 159, 165, 171, 172, 173, 174, 194, 203, 216, 219, 222, 238, 260, 263, 264, 266, 270, 273, 280, 285, 290, 298, 308, 317, 327, 330, 336, 339, 341, 344, 349, 352, 354, 357, 368, 370, 374, 375, 376, 379, 381, 382, 383, 386, 387, 388, 389, 395, 398, 402, 404, 406, 407, 408, 409, 410, 412, 413, 415, 416, 417, 418, 422, 423, 424, 429, 431, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 461, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 694, 698, 720, 721, 722, 724, 730, 731, 740, 754, 761, 762, 767, 783, 786, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 915, 928, 929, 930, 936, 937, 947, 977, 983, 984, 985, 987, 988, 998, 1001, 1002, 1003, 1004, 1009, 1012, 1019, 1022, 1023, 1024, 1028, 1031, 1034, 1037, 1039, 1042, 1044, 1045, 1048], "quick": [4, 101, 243, 381, 383, 387, 398, 605, 826, 988, 989, 998, 1013, 1022, 1028], "understand": [4, 9, 13, 42, 113, 158, 168, 172, 237, 257, 260, 319, 320, 336, 343, 352, 356, 357, 362, 363, 380, 381, 382, 387, 393, 397, 408, 415, 416, 503, 826, 857, 858, 908, 909, 910, 911, 914, 977, 978, 985, 987, 1004, 1007, 1008, 1010, 1013, 1031, 1045], "pattern": [4, 13, 17, 21, 64, 83, 86, 91, 95, 96, 104, 108, 153, 165, 168, 172, 185, 205, 237, 240, 320, 352, 353, 354, 363, 378, 381, 383, 396, 405, 408, 409, 413, 415, 416, 447, 463, 465, 503, 531, 533, 540, 554, 555, 637, 707, 723, 739, 767, 786, 787, 795, 880, 980, 982, 984, 988, 989, 995, 1003, 1005, 1009, 1010, 1013, 1043], "let": [4, 5, 13, 54, 56, 65, 72, 76, 91, 96, 101, 120, 123, 126, 127, 130, 153, 159, 160, 166, 171, 172, 173, 182, 190, 201, 203, 219, 222, 226, 237, 244, 257, 262, 265, 269, 352, 354, 361, 363, 376, 381, 383, 387, 393, 405, 408, 412, 415, 416, 499, 503, 509, 533, 645, 646, 649, 650, 651, 652, 653, 654, 655, 659, 660, 661, 662, 680, 683, 866, 873, 874, 984, 985, 986, 987, 988, 995, 996, 998, 1003, 1004, 1013, 1022, 1024, 1041], "u": [4, 10, 11, 12, 13, 17, 18, 35, 51, 53, 57, 91, 96, 104, 123, 124, 153, 162, 170, 171, 172, 198, 202, 205, 209, 219, 223, 226, 234, 237, 243, 244, 248, 249, 253, 257, 262, 265, 269, 311, 313, 343, 352, 361, 368, 370, 376, 381, 385, 387, 389, 393, 398, 405, 408, 411, 413, 415, 416, 431, 462, 464, 481, 482, 483, 530, 536, 544, 545, 549, 551, 553, 555, 557, 559, 561, 564, 567, 569, 587, 588, 590, 610, 634, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 669, 671, 672, 677, 678, 680, 683, 688, 692, 703, 719, 738, 753, 833, 834, 843, 851, 858, 880, 894, 901, 903, 906, 909, 911, 937, 980, 982, 987, 988, 995, 998, 1006, 1013, 1024, 1028, 1041], "look": [4, 5, 54, 56, 96, 99, 101, 126, 127, 153, 158, 159, 166, 171, 172, 203, 222, 226, 230, 237, 253, 257, 262, 264, 303, 352, 353, 363, 368, 369, 375, 376, 379, 381, 383, 385, 387, 389, 393, 394, 408, 411, 413, 414, 415, 416, 447, 487, 488, 556, 557, 558, 559, 563, 564, 601, 602, 630, 658, 691, 880, 908, 909, 910, 911, 984, 985, 998, 1002, 1003, 1005, 1024, 1031, 1039, 1041], "averag": [4, 13, 26, 28, 38, 40, 41, 45, 53, 61, 63, 116, 117, 122, 126, 129, 134, 135, 136, 150, 158, 172, 182, 190, 201, 208, 219, 240, 265, 267, 270, 272, 283, 307, 317, 323, 330, 352, 363, 367, 376, 378, 383, 405, 406, 410, 412, 416, 417, 419, 420, 436, 437, 440, 443, 444, 445, 446, 448, 489, 492, 493, 522, 530, 531, 532, 536, 537, 539, 540, 546, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 568, 569, 586, 593, 631, 632, 647, 657, 658, 665, 666, 668, 671, 673, 675, 676, 677, 679, 686, 699, 702, 703, 705, 706, 707, 712, 719, 720, 721, 723, 724, 726, 727, 728, 732, 733, 734, 736, 737, 738, 741, 743, 744, 746, 748, 749, 751, 754, 762, 779, 780, 781, 782, 783, 785, 786, 788, 789, 793, 794, 795, 796, 824, 846, 866, 881, 974, 978, 983, 984, 989, 992, 994, 995, 1002, 1003, 1004, 1022, 1024, 1031, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048], "per": [4, 10, 21, 35, 49, 54, 65, 92, 118, 119, 123, 158, 160, 171, 172, 201, 216, 219, 240, 244, 248, 258, 269, 271, 307, 313, 319, 347, 352, 354, 367, 376, 377, 381, 386, 387, 390, 393, 395, 406, 408, 412, 413, 414, 415, 416, 418, 445, 447, 449, 456, 460, 463, 467, 486, 499, 501, 502, 503, 507, 509, 511, 514, 522, 531, 533, 534, 535, 538, 540, 542, 548, 549, 560, 561, 568, 582, 587, 590, 609, 610, 631, 632, 640, 641, 657, 658, 665, 666, 667, 670, 672, 673, 674, 675, 677, 691, 695, 712, 715, 719, 739, 752, 756, 757, 779, 781, 795, 796, 821, 828, 829, 830, 832, 833, 836, 838, 856, 859, 865, 867, 869, 870, 873, 874, 880, 881, 898, 900, 901, 902, 903, 904, 905, 906, 925, 926, 937, 963, 977, 980, 984, 987, 988, 989, 992, 995, 1002, 1003, 1004, 1008, 1009, 1022, 1024, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1047, 1048], "hour": [4, 171, 172, 381, 387, 985, 1007], "sundai": 4, "weekend": 4, "clearli": [4, 61, 99, 172, 235, 343, 380, 381, 393, 395, 413, 415, 989, 995], "distinguish": [4, 21, 41, 81, 93, 101, 203, 259, 280, 376, 383, 395, 396, 418, 977, 988, 991, 994], "commut": [4, 13], "morn": 4, "even": [4, 13, 14, 28, 41, 43, 53, 76, 87, 99, 119, 126, 159, 171, 172, 173, 190, 201, 202, 209, 219, 226, 227, 236, 248, 268, 280, 307, 309, 311, 312, 331, 347, 352, 353, 354, 363, 369, 376, 380, 381, 382, 383, 385, 386, 389, 393, 395, 406, 407, 408, 409, 410, 412, 413, 415, 416, 418, 440, 442, 444, 445, 446, 447, 448, 458, 460, 531, 534, 556, 557, 558, 559, 563, 564, 581, 588, 593, 626, 627, 629, 638, 657, 658, 694, 699, 704, 711, 741, 759, 765, 772, 776, 779, 784, 786, 823, 860, 861, 892, 893, 908, 909, 910, 911, 937, 977, 978, 980, 982, 984, 987, 988, 991, 993, 994, 996, 998, 1000, 1002, 1003, 1004, 1013, 1024, 1038, 1039, 1040, 1043, 1045], "leisur": 4, "spread": [4, 41, 224, 263, 307, 326, 327, 328, 331, 347, 367, 381, 408, 451, 461, 514, 877, 889, 897, 988], "peak": [4, 13, 28, 172, 406, 412, 1045], "middl": [4, 25, 35, 61, 101, 185, 348, 378, 995, 998], "matplotlib": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 142, 145, 146, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 174, 177, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 233, 234, 235, 236, 238, 239, 240, 241, 243, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 321, 322, 326, 327, 328, 329, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 375, 384, 388, 398, 401, 437, 501, 630, 631, 696, 697, 699, 700, 701, 803, 819, 914, 983, 1008, 1018, 1020, 1021, 1022, 1028, 1040, 1043, 1044, 1045, 1046], "pyplot": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 142, 145, 146, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 174, 177, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 233, 234, 235, 236, 238, 239, 240, 241, 243, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 321, 322, 326, 327, 328, 329, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 381, 388, 437, 501, 630, 631, 696, 697, 699, 700, 701, 803, 819, 1020, 1021, 1022, 1028, 1045], "plt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 142, 145, 146, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 174, 177, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 233, 234, 235, 236, 238, 239, 240, 241, 243, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 321, 322, 326, 327, 328, 329, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 388, 437, 501, 630, 631, 696, 697, 699, 700, 701, 803, 819, 914, 995, 1020, 1021, 1022, 1028], "fig": [4, 5, 7, 8, 9, 10, 13, 15, 26, 28, 31, 35, 43, 44, 46, 54, 56, 58, 61, 65, 67, 74, 79, 81, 87, 91, 96, 101, 102, 103, 107, 113, 119, 120, 123, 126, 127, 130, 131, 133, 135, 156, 162, 165, 172, 174, 177, 181, 189, 192, 195, 196, 198, 199, 201, 202, 205, 209, 214, 216, 219, 222, 223, 224, 225, 226, 227, 231, 233, 240, 241, 252, 257, 258, 259, 262, 263, 264, 265, 268, 271, 272, 273, 283, 285, 287, 289, 290, 298, 302, 303, 307, 308, 309, 311, 312, 313, 317, 321, 322, 336, 343, 346, 347, 348, 349, 352, 353, 354, 357, 388, 1020], "ax": [4, 5, 7, 8, 9, 10, 12, 13, 15, 17, 26, 28, 31, 32, 33, 35, 41, 43, 44, 46, 54, 56, 57, 58, 65, 67, 73, 74, 76, 81, 83, 87, 91, 93, 96, 102, 103, 107, 113, 115, 118, 120, 123, 130, 131, 133, 134, 135, 156, 157, 162, 165, 170, 171, 172, 173, 174, 177, 180, 181, 184, 185, 190, 192, 193, 196, 198, 199, 201, 202, 203, 205, 206, 209, 210, 212, 214, 215, 216, 219, 222, 223, 224, 225, 226, 227, 231, 236, 240, 241, 243, 247, 249, 252, 257, 258, 259, 262, 264, 265, 266, 268, 269, 271, 272, 273, 274, 276, 280, 283, 285, 287, 288, 289, 290, 293, 295, 296, 301, 302, 303, 307, 309, 310, 311, 312, 313, 314, 317, 318, 321, 322, 335, 336, 337, 338, 340, 341, 343, 346, 347, 348, 349, 352, 353, 354, 357, 358, 383, 384, 413, 418, 437, 533, 540, 549, 630, 631, 696, 697, 699, 700, 701, 717, 803, 819, 914, 988, 991, 995, 1028, 1041, 1047], "subplot": [4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 31, 32, 33, 35, 40, 44, 45, 51, 52, 54, 55, 56, 57, 58, 61, 63, 66, 67, 74, 76, 80, 81, 82, 83, 86, 87, 91, 92, 93, 96, 97, 98, 99, 101, 106, 107, 113, 115, 116, 118, 119, 120, 122, 123, 127, 130, 131, 133, 134, 135, 145, 155, 157, 162, 165, 166, 171, 172, 174, 177, 181, 184, 192, 193, 195, 196, 199, 200, 201, 202, 203, 205, 209, 214, 215, 217, 219, 222, 223, 226, 227, 230, 231, 233, 235, 236, 238, 239, 240, 241, 247, 248, 249, 250, 252, 253, 257, 258, 259, 262, 264, 265, 267, 268, 269, 271, 272, 273, 275, 276, 283, 285, 287, 288, 289, 290, 293, 294, 296, 297, 298, 301, 302, 303, 304, 308, 309, 310, 311, 312, 313, 317, 321, 322, 329, 331, 336, 337, 338, 339, 343, 346, 347, 348, 349, 352, 353, 354, 357, 358, 388, 1020], "figsiz": [4, 5, 6, 10, 12, 13, 14, 15, 26, 27, 28, 31, 32, 33, 35, 40, 41, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 74, 76, 81, 83, 86, 87, 90, 91, 92, 93, 96, 99, 100, 101, 102, 103, 106, 107, 113, 115, 116, 123, 124, 125, 126, 127, 131, 133, 134, 145, 155, 157, 161, 162, 165, 166, 171, 172, 174, 177, 180, 181, 184, 185, 191, 195, 198, 199, 200, 201, 202, 203, 205, 207, 209, 212, 215, 217, 219, 222, 223, 224, 226, 227, 230, 231, 233, 235, 238, 239, 240, 241, 247, 249, 250, 253, 257, 258, 259, 264, 265, 266, 269, 271, 272, 276, 283, 285, 287, 288, 301, 302, 304, 307, 308, 309, 310, 311, 312, 313, 321, 322, 326, 328, 337, 339, 343, 344, 346, 347, 348, 349, 352, 353, 354, 914, 1020], "4": [4, 5, 6, 7, 8, 9, 10, 12, 13, 18, 20, 21, 26, 27, 28, 29, 32, 33, 34, 35, 39, 40, 41, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 63, 65, 66, 67, 71, 72, 73, 74, 75, 82, 83, 86, 87, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 105, 106, 113, 114, 116, 119, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 139, 143, 146, 150, 153, 156, 158, 159, 161, 162, 165, 166, 171, 172, 173, 177, 180, 181, 182, 183, 184, 185, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 205, 207, 208, 209, 211, 214, 215, 219, 222, 230, 234, 235, 236, 237, 238, 239, 240, 242, 244, 247, 248, 249, 250, 252, 253, 257, 258, 259, 260, 262, 263, 264, 265, 267, 269, 270, 271, 273, 274, 276, 283, 285, 287, 289, 290, 291, 292, 295, 301, 303, 304, 305, 307, 308, 310, 311, 313, 317, 318, 320, 322, 323, 326, 327, 328, 329, 330, 336, 338, 342, 343, 344, 347, 348, 349, 352, 353, 354, 361, 363, 368, 375, 376, 378, 379, 381, 386, 387, 390, 393, 394, 395, 398, 399, 400, 401, 406, 408, 409, 410, 412, 413, 415, 416, 417, 418, 420, 426, 430, 432, 436, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 458, 459, 461, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 495, 503, 511, 512, 515, 516, 517, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 576, 580, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 613, 616, 618, 621, 626, 627, 628, 629, 630, 632, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 673, 676, 678, 679, 683, 686, 687, 688, 689, 691, 692, 697, 698, 701, 705, 706, 714, 715, 724, 725, 732, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 754, 766, 767, 779, 780, 786, 787, 788, 789, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 826, 828, 829, 830, 831, 834, 835, 836, 837, 839, 844, 848, 849, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 888, 892, 893, 894, 898, 900, 901, 903, 904, 906, 908, 909, 910, 911, 926, 934, 936, 937, 939, 941, 942, 944, 945, 952, 956, 959, 977, 978, 981, 982, 983, 984, 986, 988, 989, 990, 991, 998, 999, 1002, 1003, 1006, 1012, 1015, 1019, 1020, 1021, 1022, 1024, 1027, 1029, 1032, 1033, 1034, 1036, 1037, 1038, 1040, 1044, 1045, 1046], "average_week_demand": 4, "groupbi": [4, 74, 172, 209, 219], "weekdai": [4, 13, 172], "count": [4, 13, 15, 26, 28, 42, 50, 54, 71, 72, 93, 134, 135, 171, 172, 201, 203, 234, 244, 271, 280, 285, 318, 319, 353, 354, 361, 376, 378, 385, 390, 395, 396, 406, 407, 408, 413, 415, 416, 445, 448, 488, 535, 543, 580, 587, 588, 589, 590, 593, 603, 616, 639, 696, 704, 714, 717, 727, 728, 736, 752, 781, 782, 784, 785, 835, 839, 840, 841, 849, 852, 863, 912, 914, 939, 953, 977, 980, 984, 988, 990, 991, 998, 1004, 1013, 1024, 1031, 1034, 1036, 1039, 1040, 1042, 1043], "mean": [4, 5, 6, 8, 11, 13, 14, 15, 18, 20, 25, 26, 28, 35, 37, 38, 39, 41, 43, 45, 47, 50, 51, 54, 55, 56, 61, 69, 72, 80, 81, 82, 83, 87, 91, 93, 96, 99, 100, 101, 102, 103, 104, 113, 115, 116, 119, 122, 123, 126, 127, 133, 134, 135, 140, 149, 150, 153, 158, 160, 162, 165, 168, 171, 172, 181, 183, 190, 192, 194, 197, 198, 201, 203, 207, 208, 210, 216, 217, 218, 219, 225, 227, 230, 233, 234, 235, 236, 237, 238, 240, 241, 242, 244, 247, 248, 249, 250, 252, 253, 258, 259, 262, 263, 264, 265, 267, 269, 270, 271, 272, 273, 274, 276, 277, 280, 283, 285, 296, 307, 310, 312, 313, 314, 317, 320, 323, 329, 339, 342, 343, 347, 349, 351, 352, 354, 355, 363, 367, 373, 375, 376, 378, 381, 382, 383, 385, 386, 387, 389, 390, 393, 394, 395, 399, 405, 406, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 431, 436, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 457, 458, 459, 460, 461, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 481, 482, 483, 487, 500, 501, 503, 505, 511, 518, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 582, 587, 588, 589, 590, 593, 596, 601, 605, 606, 607, 608, 609, 610, 612, 621, 626, 627, 629, 631, 632, 633, 634, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 683, 687, 688, 689, 690, 691, 692, 693, 694, 703, 704, 706, 708, 711, 712, 715, 716, 722, 724, 727, 728, 729, 734, 735, 736, 739, 740, 743, 744, 745, 746, 747, 748, 749, 750, 751, 755, 772, 776, 777, 779, 781, 782, 783, 785, 786, 788, 789, 790, 791, 793, 795, 796, 797, 800, 801, 803, 811, 815, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 846, 847, 848, 850, 851, 853, 854, 856, 857, 858, 859, 861, 862, 864, 865, 869, 870, 872, 876, 878, 880, 881, 886, 888, 889, 891, 893, 895, 896, 900, 901, 902, 903, 905, 906, 908, 909, 910, 911, 916, 920, 921, 923, 962, 963, 969, 973, 977, 978, 979, 982, 984, 985, 987, 990, 991, 992, 993, 995, 996, 1001, 1002, 1003, 1004, 1008, 1010, 1013, 1019, 1022, 1024, 1025, 1026, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "plot": [4, 5, 6, 11, 12, 13, 15, 17, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 41, 43, 44, 46, 55, 56, 57, 59, 60, 61, 62, 63, 66, 69, 73, 74, 75, 76, 80, 81, 82, 87, 89, 94, 96, 99, 100, 104, 105, 106, 107, 112, 113, 115, 116, 117, 118, 120, 125, 126, 128, 130, 131, 132, 137, 140, 142, 145, 146, 148, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 173, 174, 175, 177, 179, 183, 184, 186, 188, 189, 190, 191, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 211, 213, 214, 216, 217, 218, 219, 220, 224, 225, 226, 227, 229, 230, 233, 234, 236, 238, 239, 244, 245, 247, 248, 249, 251, 253, 255, 256, 257, 262, 263, 265, 267, 268, 272, 273, 274, 276, 278, 280, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 301, 302, 303, 307, 308, 309, 310, 311, 312, 314, 318, 321, 322, 323, 327, 328, 329, 331, 334, 335, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 353, 354, 356, 357, 359, 360, 361, 362, 370, 381, 384, 390, 393, 397, 398, 403, 406, 408, 410, 412, 414, 415, 437, 440, 445, 449, 455, 463, 470, 495, 500, 501, 503, 511, 514, 518, 522, 552, 556, 559, 561, 563, 564, 568, 569, 609, 621, 630, 631, 632, 656, 657, 671, 675, 696, 697, 699, 700, 701, 702, 717, 725, 733, 759, 780, 782, 785, 786, 787, 797, 803, 814, 819, 821, 822, 823, 824, 827, 838, 842, 858, 861, 873, 874, 875, 877, 880, 900, 902, 905, 908, 909, 914, 981, 982, 984, 985, 987, 988, 991, 992, 994, 1002, 1003, 1004, 1008, 1009, 1010, 1019, 1020, 1022, 1026, 1032, 1034, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "_": [4, 5, 7, 8, 9, 11, 12, 13, 15, 21, 26, 27, 28, 31, 33, 34, 41, 44, 51, 54, 56, 59, 64, 68, 71, 83, 91, 93, 96, 101, 102, 104, 106, 116, 117, 118, 145, 153, 158, 159, 160, 170, 171, 172, 174, 177, 180, 184, 185, 186, 188, 189, 190, 193, 198, 199, 201, 203, 205, 214, 215, 218, 223, 226, 231, 236, 240, 244, 257, 262, 264, 265, 266, 268, 269, 271, 280, 288, 293, 296, 304, 309, 312, 313, 314, 318, 321, 322, 323, 327, 328, 338, 343, 347, 352, 354, 358, 383, 387, 395, 413, 415, 416, 445, 531, 532, 533, 534, 535, 537, 538, 539, 542, 546, 565, 596, 651, 652, 662, 683, 687, 688, 689, 690, 695, 697, 699, 762, 797, 803, 811, 819, 844, 852, 873, 874, 881, 978, 984, 985, 988, 990, 991, 992, 995, 996, 998, 1003, 1004, 1022, 1038], "hourli": [4, 171], "xtick": [4, 6, 8, 11, 31, 35, 41, 45, 47, 51, 52, 53, 59, 60, 63, 83, 86, 99, 123, 124, 125, 155, 156, 157, 161, 184, 191, 197, 214, 230, 238, 248, 249, 250, 253, 261, 262, 276, 289, 298, 304, 313, 326, 339, 342, 344, 345, 696, 1020], "24": [4, 5, 13, 67, 123, 130, 137, 147, 150, 168, 172, 177, 185, 189, 220, 241, 264, 274, 278, 285, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 385, 398, 408, 415, 416, 436, 439, 440, 441, 443, 444, 446, 447, 448, 449, 450, 451, 452, 459, 461, 463, 468, 469, 470, 471, 472, 473, 474, 475, 488, 489, 490, 491, 495, 503, 514, 515, 516, 517, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 542, 543, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 568, 569, 580, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 612, 626, 627, 628, 629, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 697, 698, 699, 701, 707, 713, 725, 744, 751, 795, 796, 797, 800, 801, 811, 818, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 861, 863, 864, 865, 866, 869, 870, 872, 874, 875, 876, 877, 878, 880, 890, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 931, 932, 963, 969, 977, 995, 998, 1006, 1010, 1027, 1029, 1031, 1039, 1040, 1041, 1042, 1044], "rang": [4, 5, 6, 7, 8, 10, 12, 17, 18, 20, 21, 26, 27, 28, 33, 34, 38, 39, 41, 43, 47, 48, 49, 51, 52, 56, 61, 62, 64, 65, 66, 79, 80, 82, 83, 113, 115, 116, 117, 120, 126, 132, 145, 149, 154, 171, 172, 177, 185, 190, 191, 195, 199, 201, 202, 205, 208, 209, 217, 219, 223, 225, 233, 234, 239, 240, 247, 249, 252, 253, 257, 261, 262, 263, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 283, 289, 295, 298, 304, 307, 312, 313, 317, 321, 322, 327, 339, 347, 352, 353, 358, 361, 368, 375, 376, 378, 381, 383, 387, 390, 395, 402, 408, 412, 415, 418, 439, 460, 468, 470, 471, 472, 473, 474, 475, 477, 480, 490, 493, 494, 513, 526, 540, 552, 553, 558, 559, 562, 587, 588, 590, 628, 631, 637, 639, 647, 648, 668, 670, 675, 679, 691, 711, 729, 744, 786, 826, 832, 846, 848, 850, 851, 856, 870, 877, 878, 879, 885, 886, 889, 890, 893, 894, 936, 937, 956, 977, 984, 988, 992, 1002, 1009, 1013, 1018, 1019, 1020, 1022, 1036, 1037, 1038, 1039, 1041, 1044, 1047], "7": [4, 6, 8, 12, 13, 14, 15, 17, 20, 27, 31, 33, 34, 35, 40, 43, 45, 47, 54, 55, 56, 57, 61, 65, 66, 68, 72, 73, 75, 81, 83, 99, 113, 116, 126, 128, 129, 133, 134, 150, 162, 170, 171, 172, 174, 177, 182, 183, 200, 201, 202, 203, 217, 219, 222, 230, 235, 236, 242, 244, 247, 248, 251, 252, 254, 257, 262, 266, 268, 269, 273, 275, 280, 283, 285, 287, 290, 291, 293, 303, 304, 307, 311, 317, 320, 321, 322, 324, 326, 327, 329, 330, 336, 343, 347, 348, 352, 353, 354, 363, 376, 378, 379, 385, 386, 387, 398, 400, 401, 406, 412, 413, 415, 416, 417, 438, 443, 447, 449, 450, 451, 452, 461, 470, 471, 490, 531, 532, 533, 534, 535, 537, 543, 560, 561, 587, 590, 599, 626, 627, 629, 646, 648, 657, 660, 691, 698, 706, 720, 721, 722, 724, 726, 742, 743, 744, 748, 749, 751, 783, 788, 789, 792, 795, 798, 799, 804, 807, 814, 815, 818, 823, 826, 830, 840, 841, 849, 858, 859, 872, 873, 895, 896, 937, 940, 941, 952, 977, 978, 983, 984, 986, 988, 989, 991, 992, 994, 998, 1002, 1003, 1006, 1015, 1019, 1022, 1027, 1029, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1044], "xticklabel": [4, 10, 123, 172, 313], "sun": [4, 172, 1039, 1044, 1045], "mon": [4, 172], "tue": [4, 172, 1037], "wed": [4, 172], "thu": [4, 5, 25, 26, 27, 28, 41, 54, 56, 61, 79, 83, 99, 101, 116, 118, 119, 121, 123, 146, 153, 158, 159, 172, 185, 189, 190, 201, 203, 219, 230, 236, 241, 249, 260, 262, 267, 268, 269, 288, 314, 317, 320, 357, 363, 367, 368, 376, 383, 387, 393, 395, 406, 408, 412, 413, 415, 416, 418, 419, 436, 438, 462, 514, 526, 552, 553, 554, 555, 556, 557, 562, 563, 564, 565, 602, 605, 609, 621, 626, 631, 632, 642, 644, 657, 676, 704, 717, 723, 786, 793, 799, 804, 806, 818, 831, 834, 869, 900, 979, 980, 981, 982, 983, 984, 985, 988, 989, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1009, 1012, 1013, 1031, 1033, 1037, 1039, 1040, 1041, 1043, 1047], "fri": [4, 172, 376], "sat": [4, 172, 416], "xlabel": [4, 8, 9, 13, 25, 26, 27, 28, 34, 38, 42, 62, 79, 80, 82, 83, 86, 87, 91, 98, 104, 114, 115, 117, 123, 124, 125, 126, 127, 128, 132, 136, 139, 140, 145, 146, 149, 153, 154, 155, 156, 158, 159, 160, 171, 180, 183, 184, 185, 186, 188, 189, 190, 191, 194, 195, 201, 203, 204, 206, 208, 210, 211, 215, 219, 234, 236, 238, 240, 257, 261, 262, 266, 267, 271, 272, 275, 276, 287, 288, 291, 292, 313, 314, 336, 338, 339, 342, 352, 358, 359, 360, 630], "ylabel": [4, 8, 9, 13, 25, 26, 27, 28, 34, 38, 62, 79, 80, 82, 83, 86, 87, 91, 98, 104, 114, 115, 117, 124, 125, 126, 127, 128, 132, 136, 139, 140, 145, 146, 149, 153, 154, 155, 156, 158, 159, 160, 171, 180, 183, 184, 185, 186, 188, 189, 190, 191, 194, 195, 201, 203, 204, 206, 208, 210, 211, 219, 234, 236, 238, 257, 261, 262, 265, 266, 267, 271, 272, 275, 276, 288, 314, 336, 339, 342, 352, 358, 359, 360, 630], "number": [4, 5, 7, 8, 10, 12, 13, 14, 20, 21, 26, 27, 28, 33, 34, 37, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 54, 55, 56, 58, 62, 63, 64, 66, 68, 69, 71, 72, 73, 74, 76, 83, 86, 87, 92, 93, 96, 98, 100, 101, 104, 113, 114, 116, 119, 121, 122, 124, 125, 126, 127, 129, 133, 135, 146, 147, 150, 161, 162, 166, 168, 171, 172, 177, 185, 190, 200, 201, 202, 203, 208, 209, 215, 216, 217, 218, 219, 222, 230, 234, 238, 240, 241, 247, 248, 250, 252, 253, 256, 257, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 280, 285, 287, 291, 292, 307, 309, 310, 313, 317, 318, 319, 320, 321, 322, 323, 330, 339, 344, 347, 353, 354, 357, 361, 363, 368, 369, 373, 375, 376, 377, 378, 379, 381, 384, 385, 387, 388, 389, 390, 393, 394, 395, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 431, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 580, 581, 582, 583, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 702, 703, 704, 706, 711, 712, 713, 715, 717, 719, 722, 726, 727, 728, 729, 732, 733, 736, 738, 750, 753, 772, 776, 779, 780, 781, 782, 783, 784, 785, 786, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 920, 921, 924, 936, 937, 940, 941, 956, 959, 962, 963, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 1000, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1012, 1015, 1022, 1023, 1024, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "rental": [4, 13, 172, 995], "target": [4, 6, 10, 13, 18, 20, 27, 31, 33, 34, 46, 53, 70, 72, 74, 75, 77, 87, 91, 100, 103, 105, 114, 121, 122, 123, 126, 127, 130, 132, 133, 134, 136, 142, 145, 148, 150, 153, 155, 158, 159, 166, 168, 170, 171, 172, 173, 180, 183, 184, 185, 194, 197, 201, 203, 205, 206, 209, 210, 223, 231, 233, 234, 235, 236, 239, 240, 241, 249, 256, 258, 260, 263, 265, 267, 268, 271, 272, 280, 283, 285, 288, 293, 296, 297, 302, 306, 307, 315, 318, 319, 321, 323, 326, 327, 330, 331, 335, 336, 339, 343, 345, 346, 352, 353, 358, 359, 360, 361, 363, 367, 369, 370, 373, 374, 375, 376, 377, 378, 383, 385, 386, 389, 390, 394, 397, 408, 412, 415, 418, 432, 436, 437, 438, 441, 444, 463, 464, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 507, 509, 519, 523, 530, 531, 533, 535, 536, 538, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 566, 567, 568, 569, 572, 581, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 626, 627, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 683, 684, 685, 686, 696, 697, 699, 700, 701, 706, 707, 708, 711, 712, 717, 719, 720, 721, 722, 724, 725, 726, 727, 728, 733, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 780, 781, 782, 783, 785, 786, 787, 788, 789, 792, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 847, 849, 850, 851, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 877, 878, 879, 880, 881, 884, 889, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 920, 950, 951, 952, 979, 980, 981, 984, 985, 988, 992, 995, 996, 1002, 1003, 1004, 1009, 1010, 1012, 1013, 1015, 1020, 1022, 1024, 1026, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "absolut": [4, 13, 76, 100, 123, 150, 171, 201, 203, 207, 219, 383, 408, 410, 412, 413, 415, 416, 417, 418, 419, 443, 449, 455, 456, 530, 536, 541, 544, 545, 547, 548, 549, 557, 559, 560, 561, 564, 587, 589, 590, 592, 596, 601, 618, 626, 631, 645, 648, 649, 651, 653, 655, 670, 671, 673, 675, 677, 681, 682, 703, 716, 720, 734, 735, 743, 744, 746, 751, 753, 755, 766, 793, 799, 803, 814, 817, 824, 826, 838, 840, 841, 845, 864, 869, 872, 885, 909, 911, 974, 984, 985, 998, 1002, 1004, 1022, 1023, 1032, 1037, 1042, 1043, 1044, 1045], "basi": [4, 6, 14, 101, 153, 158, 160, 202, 303, 320, 339, 343, 373, 379, 382, 408, 413, 415, 451, 533, 621, 631, 638, 690, 879, 986, 998, 1003, 1011, 1019, 1020, 1023, 1026, 1039, 1041, 1044], "max": [4, 8, 10, 11, 12, 13, 18, 20, 26, 28, 32, 34, 41, 45, 53, 59, 63, 68, 73, 78, 80, 83, 84, 96, 99, 104, 107, 113, 115, 122, 128, 131, 139, 141, 142, 145, 146, 150, 155, 157, 158, 166, 168, 171, 183, 188, 189, 190, 194, 196, 203, 204, 207, 215, 217, 219, 225, 234, 238, 260, 261, 262, 273, 275, 283, 285, 287, 291, 292, 296, 298, 301, 303, 307, 309, 310, 312, 320, 329, 331, 345, 348, 367, 408, 410, 413, 468, 469, 470, 471, 472, 473, 474, 475, 476, 511, 535, 554, 555, 556, 557, 558, 559, 562, 563, 564, 605, 626, 630, 631, 647, 648, 668, 671, 673, 679, 690, 691, 695, 698, 703, 704, 739, 755, 790, 791, 797, 857, 858, 869, 870, 872, 879, 886, 887, 908, 909, 910, 911, 956, 984, 986, 991, 998, 1002, 1003, 1010, 1022, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "977": [4, 13, 412], "rescal": [4, 47, 48, 56, 101, 182, 189, 225, 240, 307, 349, 410, 420, 468, 469, 470, 471, 472, 473, 474, 475, 532, 537, 645, 648, 651, 872, 878, 902, 903, 904, 905, 906, 988, 998, 1023, 1035, 1036], "variabl": [4, 9, 11, 12, 13, 17, 38, 71, 116, 120, 123, 126, 127, 141, 142, 145, 150, 160, 161, 165, 166, 172, 173, 177, 185, 190, 201, 205, 206, 219, 224, 240, 253, 262, 265, 272, 280, 283, 312, 313, 314, 363, 367, 369, 376, 378, 379, 381, 383, 385, 386, 389, 395, 404, 408, 409, 410, 411, 413, 415, 416, 417, 449, 481, 482, 483, 486, 498, 500, 507, 514, 531, 533, 535, 540, 543, 552, 558, 559, 603, 605, 606, 607, 639, 649, 650, 653, 654, 660, 681, 682, 694, 708, 745, 798, 799, 802, 804, 805, 806, 807, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 825, 828, 832, 833, 863, 874, 877, 881, 889, 901, 977, 978, 980, 984, 987, 988, 989, 990, 991, 993, 995, 996, 998, 1002, 1004, 1008, 1009, 1012, 1015, 1016, 1018, 1020, 1031, 1036, 1039, 1041, 1044, 1046], "rel": [4, 6, 8, 18, 21, 28, 56, 62, 101, 120, 158, 174, 177, 181, 201, 219, 250, 291, 292, 308, 318, 321, 339, 343, 352, 353, 376, 380, 383, 389, 395, 406, 408, 412, 415, 416, 418, 439, 442, 446, 448, 458, 520, 523, 530, 533, 536, 540, 556, 557, 558, 559, 563, 564, 565, 603, 648, 657, 658, 670, 671, 673, 689, 693, 727, 745, 797, 800, 801, 803, 811, 819, 824, 827, 840, 841, 845, 857, 858, 869, 870, 880, 896, 900, 901, 902, 905, 907, 908, 909, 910, 911, 984, 985, 988, 990, 991, 992, 994, 1012, 1020], "so": [4, 9, 12, 13, 17, 18, 43, 49, 56, 57, 62, 66, 82, 119, 122, 123, 125, 132, 153, 158, 171, 173, 177, 181, 201, 202, 230, 237, 240, 262, 280, 285, 291, 292, 295, 302, 303, 308, 313, 314, 318, 329, 339, 352, 354, 361, 363, 367, 368, 369, 375, 376, 380, 381, 383, 385, 386, 387, 389, 390, 395, 399, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 421, 422, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 495, 507, 508, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 606, 607, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 694, 704, 707, 715, 724, 739, 754, 786, 795, 796, 797, 800, 801, 803, 804, 811, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 890, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 937, 954, 963, 977, 978, 980, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 994, 998, 1000, 1001, 1002, 1003, 1008, 1009, 1013, 1022, 1023, 1024, 1031, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1047, 1048], "error": [4, 5, 7, 13, 14, 18, 28, 55, 76, 79, 80, 82, 100, 106, 112, 116, 119, 120, 123, 125, 127, 137, 150, 153, 165, 168, 171, 185, 190, 197, 200, 201, 203, 204, 207, 208, 215, 219, 233, 236, 237, 243, 253, 255, 258, 262, 263, 267, 271, 272, 276, 278, 280, 291, 292, 321, 338, 347, 352, 353, 378, 379, 381, 383, 384, 385, 386, 390, 393, 395, 399, 402, 406, 407, 408, 409, 410, 412, 413, 415, 416, 417, 436, 442, 443, 446, 448, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 495, 502, 514, 523, 530, 532, 533, 536, 537, 541, 542, 544, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 574, 580, 581, 587, 589, 590, 591, 593, 594, 595, 597, 598, 599, 605, 609, 610, 628, 631, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 684, 687, 688, 689, 691, 692, 695, 697, 700, 701, 708, 711, 719, 720, 721, 725, 738, 741, 742, 743, 744, 745, 746, 748, 749, 751, 754, 762, 776, 780, 786, 787, 788, 789, 797, 798, 799, 800, 801, 803, 804, 806, 811, 815, 819, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 847, 848, 850, 851, 852, 855, 857, 858, 860, 861, 863, 865, 866, 867, 872, 873, 874, 879, 880, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 918, 919, 920, 921, 924, 951, 972, 975, 977, 978, 979, 981, 982, 983, 985, 989, 992, 996, 998, 1002, 1003, 1004, 1010, 1011, 1022, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "easili": [4, 9, 32, 91, 147, 174, 204, 217, 235, 237, 241, 244, 262, 264, 271, 290, 309, 381, 383, 395, 396, 409, 415, 416, 418, 448, 982, 984, 985, 998, 1002, 1003, 1004, 1016, 1019, 1024, 1037], "interpret": [4, 28, 150, 160, 168, 169, 170, 172, 175, 197, 201, 202, 206, 217, 219, 256, 262, 264, 265, 304, 308, 311, 319, 352, 354, 367, 379, 381, 382, 387, 389, 390, 395, 397, 406, 408, 409, 414, 416, 451, 463, 464, 466, 495, 540, 571, 610, 638, 642, 652, 671, 672, 690, 691, 694, 700, 727, 751, 756, 757, 781, 790, 791, 803, 812, 823, 824, 826, 829, 861, 873, 880, 956, 982, 984, 988, 989, 995, 998, 1004, 1008, 1010, 1015, 1023, 1031, 1032, 1036, 1039, 1044, 1045, 1046], "fraction": [4, 26, 28, 124, 126, 201, 209, 219, 347, 353, 406, 412, 415, 437, 438, 448, 449, 455, 456, 514, 526, 556, 557, 558, 559, 563, 564, 565, 589, 592, 601, 665, 666, 667, 670, 675, 676, 677, 702, 720, 721, 722, 732, 792, 794, 799, 803, 824, 825, 839, 867, 902, 903, 904, 908, 909, 910, 911, 954, 984, 988, 991, 995, 996, 998, 1003, 1004, 1009, 1032, 1033, 1034, 1045], "maximum": [4, 8, 11, 17, 28, 34, 38, 58, 79, 80, 81, 82, 83, 92, 98, 113, 115, 118, 119, 122, 124, 154, 156, 160, 168, 179, 189, 220, 240, 272, 287, 291, 292, 298, 307, 334, 335, 337, 338, 341, 343, 350, 353, 357, 359, 360, 367, 386, 387, 394, 395, 405, 406, 408, 410, 411, 413, 415, 416, 418, 419, 420, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 453, 456, 458, 460, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 481, 482, 483, 497, 508, 510, 511, 512, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 582, 583, 596, 609, 626, 630, 631, 634, 636, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 673, 675, 676, 677, 678, 681, 682, 684, 685, 686, 687, 688, 689, 691, 692, 693, 715, 742, 779, 795, 797, 800, 801, 803, 811, 818, 824, 849, 856, 857, 858, 864, 865, 869, 870, 872, 875, 876, 877, 879, 888, 889, 894, 895, 896, 897, 900, 901, 905, 908, 909, 910, 911, 912, 914, 917, 924, 977, 983, 984, 985, 987, 988, 990, 991, 992, 994, 998, 1002, 1003, 1004, 1010, 1023, 1038, 1039, 1041, 1042, 1045, 1046], "fit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 22, 25, 26, 28, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 62, 63, 64, 65, 66, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 122, 123, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 141, 142, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 159, 160, 161, 162, 168, 170, 171, 172, 173, 174, 177, 179, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 196, 197, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 225, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 272, 273, 274, 275, 276, 280, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 298, 301, 302, 303, 304, 306, 308, 309, 310, 311, 312, 313, 315, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 347, 348, 349, 352, 353, 357, 358, 359, 360, 361, 367, 369, 370, 373, 376, 378, 381, 384, 386, 387, 390, 393, 395, 402, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 424, 426, 430, 431, 432, 433, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 500, 508, 509, 523, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 574, 576, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 612, 613, 614, 615, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 686, 687, 688, 689, 690, 691, 693, 696, 697, 699, 700, 701, 710, 721, 733, 748, 786, 795, 796, 797, 800, 801, 803, 811, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 929, 945, 946, 948, 956, 972, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1008, 1009, 1010, 1011, 1013, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "method": [4, 8, 12, 13, 18, 20, 21, 25, 26, 27, 28, 37, 38, 40, 41, 42, 45, 48, 50, 51, 53, 54, 55, 57, 58, 59, 60, 62, 66, 68, 69, 70, 73, 77, 80, 81, 85, 87, 88, 92, 93, 96, 99, 101, 105, 106, 107, 111, 113, 118, 120, 121, 127, 133, 145, 146, 150, 165, 177, 188, 190, 202, 209, 218, 221, 223, 225, 226, 227, 228, 230, 234, 236, 237, 238, 240, 244, 246, 249, 254, 264, 267, 268, 269, 270, 271, 280, 285, 291, 292, 294, 307, 311, 314, 317, 319, 320, 342, 352, 353, 354, 361, 363, 367, 368, 369, 370, 373, 378, 379, 381, 382, 383, 387, 388, 390, 393, 394, 397, 399, 402, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 456, 458, 461, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 503, 511, 513, 521, 524, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 580, 581, 582, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 704, 709, 710, 729, 730, 733, 734, 739, 740, 761, 766, 767, 772, 776, 781, 786, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 888, 889, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 915, 923, 937, 944, 945, 946, 947, 948, 949, 954, 957, 972, 973, 976, 977, 978, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1010, 1013, 1015, 1019, 1021, 1022, 1024, 1025, 1026, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "minim": [4, 12, 13, 58, 67, 79, 80, 126, 153, 161, 180, 197, 199, 201, 203, 205, 209, 219, 222, 233, 234, 247, 252, 263, 271, 272, 307, 317, 320, 336, 343, 347, 357, 370, 380, 381, 384, 389, 393, 395, 406, 408, 410, 413, 415, 439, 440, 444, 445, 449, 462, 537, 539, 546, 556, 557, 558, 559, 563, 564, 608, 609, 610, 640, 645, 648, 656, 657, 666, 670, 671, 673, 677, 678, 686, 691, 693, 694, 746, 778, 847, 849, 858, 876, 888, 894, 908, 909, 910, 911, 979, 984, 985, 988, 991, 992, 998, 1000, 1001, 1002, 1003, 1008, 1011, 1022, 1023, 1026, 1035, 1040, 1041], "squar": [4, 5, 13, 62, 72, 80, 81, 82, 85, 86, 88, 97, 98, 107, 116, 127, 129, 150, 153, 158, 168, 170, 171, 179, 180, 182, 183, 185, 190, 191, 197, 201, 203, 206, 211, 218, 219, 220, 233, 234, 236, 250, 276, 311, 319, 320, 322, 336, 352, 373, 378, 381, 387, 390, 395, 408, 410, 411, 413, 414, 415, 419, 420, 431, 439, 441, 442, 443, 445, 446, 448, 449, 456, 458, 459, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 500, 530, 536, 538, 540, 542, 546, 548, 551, 553, 555, 557, 558, 559, 561, 564, 567, 569, 589, 590, 591, 594, 595, 597, 598, 599, 603, 604, 605, 608, 610, 614, 621, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 681, 682, 684, 685, 686, 687, 689, 691, 693, 695, 708, 720, 721, 722, 748, 749, 756, 757, 761, 767, 768, 783, 788, 789, 826, 833, 834, 842, 843, 846, 848, 850, 851, 858, 861, 880, 900, 901, 903, 905, 906, 907, 909, 911, 935, 961, 974, 979, 981, 982, 991, 992, 996, 1002, 1004, 1010, 1011, 1022, 1023, 1026, 1031, 1034, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "estim": [4, 6, 7, 8, 9, 10, 11, 12, 13, 25, 27, 28, 31, 34, 35, 38, 39, 45, 46, 50, 51, 55, 56, 57, 58, 59, 62, 64, 72, 73, 74, 75, 84, 86, 87, 96, 97, 98, 102, 104, 106, 112, 113, 117, 118, 119, 120, 122, 124, 126, 127, 128, 130, 133, 134, 135, 136, 137, 139, 140, 148, 149, 150, 152, 153, 154, 156, 158, 160, 161, 162, 163, 164, 165, 167, 170, 171, 179, 182, 185, 189, 190, 191, 196, 201, 202, 203, 205, 206, 208, 209, 218, 219, 220, 229, 230, 231, 236, 242, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 259, 260, 262, 263, 264, 265, 266, 267, 269, 271, 272, 273, 274, 275, 276, 278, 279, 281, 283, 285, 286, 292, 296, 299, 307, 309, 312, 320, 321, 323, 342, 343, 347, 353, 354, 357, 358, 360, 367, 368, 369, 370, 373, 379, 381, 384, 385, 388, 389, 390, 391, 398, 399, 402, 403, 406, 408, 411, 413, 416, 417, 418, 419, 420, 421, 422, 423, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 489, 490, 491, 494, 495, 497, 500, 501, 523, 526, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 574, 575, 576, 578, 579, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 686, 687, 688, 689, 690, 691, 696, 697, 699, 700, 701, 706, 707, 710, 711, 712, 715, 717, 719, 720, 721, 722, 724, 725, 726, 727, 728, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 780, 781, 782, 783, 785, 786, 787, 788, 789, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 808, 809, 811, 813, 815, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 885, 886, 888, 889, 891, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 919, 920, 921, 923, 925, 926, 929, 931, 932, 933, 944, 945, 946, 948, 956, 972, 976, 983, 985, 987, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1009, 1010, 1011, 1013, 1015, 1016, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1028, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "condit": [4, 12, 13, 26, 28, 83, 121, 126, 130, 168, 169, 171, 175, 190, 203, 206, 219, 237, 241, 265, 320, 361, 387, 393, 397, 405, 406, 408, 410, 413, 415, 417, 450, 463, 470, 471, 472, 477, 495, 512, 522, 523, 535, 538, 539, 540, 542, 544, 546, 548, 549, 561, 626, 631, 632, 642, 649, 650, 651, 653, 654, 655, 669, 671, 672, 673, 674, 681, 682, 686, 696, 711, 716, 717, 734, 735, 793, 835, 836, 837, 838, 839, 858, 861, 864, 873, 874, 877, 881, 937, 982, 984, 985, 986, 988, 990, 991, 993, 998, 1004, 1008, 1010, 1022, 1026, 1032, 1034, 1035, 1036, 1038, 1039, 1041, 1043, 1045, 1046, 1047], "median": [4, 13, 38, 72, 76, 81, 82, 126, 165, 166, 171, 203, 207, 218, 232, 240, 307, 318, 320, 321, 376, 410, 415, 417, 439, 453, 457, 460, 473, 551, 553, 557, 564, 596, 626, 629, 634, 669, 670, 678, 720, 751, 847, 878, 890, 909, 911, 978, 998, 1004, 1034, 1035], "nevertheless": [4, 174, 415], "measur": [4, 7, 8, 10, 11, 13, 20, 26, 38, 39, 50, 59, 61, 62, 97, 116, 117, 126, 129, 136, 150, 153, 158, 168, 170, 171, 172, 177, 190, 195, 200, 201, 205, 207, 219, 255, 260, 262, 268, 269, 275, 278, 312, 343, 352, 353, 367, 376, 378, 383, 387, 395, 405, 407, 410, 412, 413, 414, 415, 416, 448, 451, 461, 497, 514, 537, 539, 546, 550, 556, 557, 558, 559, 562, 563, 564, 603, 606, 607, 610, 626, 630, 657, 689, 691, 697, 701, 703, 704, 706, 708, 711, 712, 715, 716, 719, 723, 724, 725, 727, 729, 734, 735, 737, 738, 741, 745, 753, 754, 755, 780, 781, 782, 784, 785, 787, 790, 793, 821, 823, 826, 846, 877, 889, 908, 909, 910, 911, 978, 984, 986, 991, 993, 994, 996, 1002, 1004, 1010, 1019, 1022, 1031, 1034, 1036, 1037, 1039, 1041], "test": [4, 6, 8, 10, 11, 13, 17, 25, 26, 27, 28, 32, 33, 34, 55, 71, 72, 86, 101, 113, 116, 118, 119, 120, 121, 124, 125, 126, 127, 128, 139, 142, 144, 146, 149, 151, 153, 154, 168, 170, 171, 172, 173, 174, 177, 185, 190, 196, 197, 200, 201, 202, 203, 204, 205, 208, 209, 216, 217, 219, 226, 231, 236, 237, 239, 249, 255, 256, 257, 260, 261, 262, 263, 264, 266, 267, 269, 270, 272, 273, 274, 278, 283, 288, 293, 294, 301, 303, 309, 311, 312, 313, 314, 330, 339, 347, 354, 363, 367, 368, 375, 376, 378, 384, 385, 386, 387, 393, 394, 395, 397, 398, 401, 403, 404, 406, 409, 410, 413, 415, 416, 417, 418, 425, 427, 431, 434, 435, 436, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 487, 488, 492, 496, 497, 501, 503, 523, 530, 536, 538, 542, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 566, 567, 568, 569, 591, 593, 594, 595, 597, 598, 599, 601, 603, 604, 605, 607, 608, 609, 610, 626, 627, 629, 634, 635, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 711, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 847, 850, 851, 857, 858, 860, 885, 886, 888, 889, 890, 891, 895, 896, 898, 900, 901, 902, 903, 905, 906, 908, 909, 910, 911, 929, 931, 932, 983, 984, 987, 988, 991, 992, 996, 998, 1002, 1003, 1004, 1008, 1009, 1010, 1012, 1013, 1016, 1019, 1020, 1026, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047], "discuss": [4, 54, 59, 150, 171, 190, 222, 227, 265, 280, 352, 363, 369, 376, 378, 381, 386, 387, 389, 393, 395, 396, 408, 410, 414, 415, 418, 497, 681, 682, 842, 843, 848, 850, 851, 978, 982, 984, 985, 988, 991, 998, 1005, 1009, 1034], "choos": [4, 11, 12, 45, 46, 47, 51, 54, 61, 63, 67, 79, 102, 103, 122, 133, 139, 140, 150, 171, 174, 194, 238, 257, 267, 274, 357, 363, 367, 368, 369, 370, 383, 386, 389, 395, 408, 410, 412, 415, 416, 419, 442, 443, 446, 448, 458, 522, 531, 537, 558, 559, 581, 601, 657, 658, 671, 673, 678, 686, 687, 688, 692, 724, 754, 797, 800, 801, 811, 867, 900, 901, 908, 909, 910, 911, 978, 979, 983, 984, 985, 986, 987, 991, 998, 1001, 1002, 1003, 1016, 1018, 1022, 1023, 1033, 1034, 1038, 1040, 1042], "focu": [4, 9, 28, 96, 113, 153, 253, 295, 367, 386, 406, 415, 552, 553, 558, 560, 561, 677, 985, 991, 998, 1008, 1009], "root": [4, 17, 81, 150, 182, 361, 378, 381, 389, 408, 441, 500, 540, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 638, 748, 749, 788, 789, 908, 909, 910, 911, 912, 914, 988, 994, 1004, 1033, 1039, 1040, 1041, 1042, 1045, 1046], "becaus": [4, 5, 13, 20, 26, 28, 41, 48, 51, 72, 83, 87, 113, 118, 121, 126, 150, 154, 157, 160, 171, 172, 174, 181, 187, 194, 201, 205, 207, 209, 219, 236, 237, 248, 259, 262, 263, 268, 283, 285, 302, 303, 304, 307, 311, 312, 313, 314, 328, 339, 343, 352, 353, 354, 357, 361, 363, 367, 368, 376, 379, 383, 386, 389, 393, 394, 395, 399, 402, 405, 406, 408, 409, 412, 413, 414, 415, 416, 418, 421, 431, 446, 447, 460, 464, 474, 481, 482, 483, 533, 535, 551, 553, 555, 557, 559, 561, 564, 567, 569, 587, 590, 606, 607, 610, 631, 632, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 671, 672, 675, 676, 677, 678, 679, 688, 698, 708, 711, 712, 720, 721, 722, 744, 761, 783, 786, 792, 797, 811, 824, 828, 833, 834, 843, 846, 848, 850, 851, 852, 858, 869, 870, 878, 880, 881, 885, 886, 888, 889, 890, 891, 901, 903, 906, 909, 911, 952, 978, 980, 981, 982, 983, 984, 985, 986, 988, 989, 991, 993, 995, 998, 1003, 1004, 1013, 1023, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1047], "intuit": [4, 13, 32, 45, 53, 63, 101, 113, 116, 123, 145, 153, 171, 172, 202, 203, 224, 230, 263, 280, 290, 309, 312, 336, 339, 343, 353, 381, 395, 406, 408, 410, 412, 414, 780, 781, 782, 785, 871, 902, 905, 980, 984, 985, 988, 989, 995, 998, 999, 1003, 1013, 1022, 1024, 1031], "studi": [4, 61, 126, 201, 219, 265, 268, 269, 352, 376, 378, 412, 417, 695, 707, 756, 757, 825, 986, 988, 1002, 1015], "metric": [4, 6, 7, 11, 13, 20, 21, 22, 25, 26, 27, 31, 33, 37, 39, 43, 45, 48, 49, 50, 53, 59, 61, 63, 65, 69, 71, 76, 83, 113, 118, 125, 127, 128, 133, 147, 150, 154, 165, 168, 170, 171, 173, 185, 190, 196, 197, 201, 203, 205, 207, 219, 225, 231, 234, 235, 240, 243, 255, 256, 258, 259, 260, 262, 263, 265, 269, 271, 272, 278, 283, 285, 287, 295, 298, 304, 307, 312, 317, 318, 320, 321, 322, 323, 326, 327, 329, 330, 352, 353, 363, 367, 370, 373, 376, 381, 383, 393, 394, 395, 397, 399, 403, 406, 413, 414, 415, 418, 419, 425, 436, 440, 443, 444, 445, 449, 456, 468, 519, 534, 548, 549, 550, 552, 554, 556, 557, 558, 560, 561, 563, 564, 566, 568, 577, 601, 609, 619, 627, 630, 633, 637, 638, 639, 640, 641, 642, 657, 658, 662, 665, 667, 673, 674, 675, 687, 689, 691, 693, 695, 797, 800, 801, 803, 811, 819, 821, 822, 823, 825, 828, 829, 830, 831, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 857, 866, 872, 895, 896, 900, 902, 905, 908, 910, 978, 980, 983, 985, 989, 994, 996, 1008, 1009, 1010, 1019, 1020, 1024, 1026, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "ones": [4, 11, 35, 44, 56, 72, 82, 129, 153, 177, 185, 205, 206, 230, 233, 237, 262, 270, 273, 292, 311, 327, 349, 367, 368, 381, 389, 395, 408, 410, 412, 415, 449, 531, 565, 580, 609, 610, 643, 644, 657, 658, 669, 675, 702, 794, 799, 804, 815, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 875, 879, 942, 984, 988, 993, 994, 998, 1003, 1022, 1031, 1039, 1040, 1041], "term": [4, 14, 15, 26, 33, 59, 101, 116, 119, 123, 126, 158, 170, 185, 189, 190, 201, 203, 205, 215, 218, 219, 240, 260, 264, 285, 301, 320, 343, 347, 352, 354, 369, 370, 381, 383, 385, 393, 402, 406, 407, 408, 410, 412, 413, 415, 442, 446, 448, 451, 458, 461, 523, 534, 537, 539, 543, 546, 548, 587, 588, 589, 590, 603, 606, 607, 631, 632, 639, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 671, 672, 673, 674, 675, 677, 679, 686, 694, 727, 728, 736, 781, 782, 785, 857, 858, 875, 879, 882, 900, 901, 902, 903, 904, 905, 906, 977, 979, 980, 982, 983, 984, 985, 988, 989, 990, 992, 993, 998, 1002, 1003, 1015, 1024, 1039, 1045, 1046, 1047], "y": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 25, 26, 27, 28, 31, 32, 34, 35, 40, 41, 43, 44, 45, 46, 53, 55, 57, 58, 61, 62, 63, 66, 67, 72, 73, 74, 75, 76, 82, 86, 87, 92, 93, 98, 100, 101, 102, 103, 105, 106, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 142, 145, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 170, 171, 172, 173, 174, 177, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 216, 217, 219, 222, 223, 224, 227, 231, 233, 234, 235, 236, 237, 238, 240, 241, 243, 244, 247, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 357, 358, 359, 360, 361, 363, 373, 374, 375, 376, 379, 381, 383, 386, 388, 390, 394, 395, 399, 402, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 421, 425, 426, 427, 430, 431, 432, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 486, 497, 499, 501, 504, 507, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 525, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 696, 697, 698, 699, 700, 701, 705, 710, 724, 733, 739, 740, 754, 756, 757, 758, 759, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 783, 786, 787, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 920, 925, 926, 948, 950, 951, 952, 956, 959, 962, 975, 977, 978, 979, 980, 982, 983, 984, 986, 988, 989, 990, 991, 992, 993, 995, 998, 1002, 1003, 1004, 1009, 1015, 1019, 1020, 1022, 1026, 1028, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "hist": [4, 26, 28, 54, 76, 115, 119, 201, 203, 234, 240, 268, 290, 307, 311, 313, 321, 415], "bin": [4, 25, 26, 28, 54, 76, 115, 119, 201, 234, 240, 268, 290, 307, 308, 309, 310, 311, 313, 314, 379, 389, 398, 406, 414, 415, 437, 438, 447, 460, 560, 561, 863, 865, 879, 939, 1023, 1039, 1040, 1041, 1045], "30": [4, 8, 10, 15, 20, 35, 40, 41, 45, 55, 61, 72, 74, 79, 93, 102, 104, 113, 122, 126, 132, 139, 150, 153, 154, 157, 159, 172, 177, 180, 195, 199, 201, 219, 222, 223, 227, 235, 239, 240, 251, 262, 267, 276, 280, 285, 294, 295, 311, 312, 313, 322, 323, 326, 327, 331, 337, 340, 342, 345, 367, 376, 378, 386, 387, 412, 416, 419, 443, 449, 456, 499, 530, 534, 536, 537, 538, 540, 542, 569, 591, 594, 595, 597, 647, 691, 733, 781, 840, 841, 842, 843, 844, 846, 848, 850, 851, 852, 881, 896, 909, 977, 982, 988, 989, 991, 996, 1020, 1031, 1032, 1038, 1039, 1040], "rent": 4, "fleet": 4, "input": [4, 6, 10, 32, 34, 74, 96, 100, 122, 126, 127, 159, 160, 161, 171, 177, 180, 201, 204, 205, 209, 216, 219, 233, 234, 236, 237, 244, 257, 280, 289, 290, 303, 308, 309, 310, 311, 317, 320, 322, 339, 343, 345, 348, 354, 375, 378, 381, 384, 386, 390, 391, 393, 394, 395, 405, 406, 409, 412, 413, 414, 415, 416, 417, 418, 420, 426, 429, 430, 431, 432, 433, 436, 437, 438, 439, 440, 441, 444, 447, 448, 449, 453, 456, 457, 460, 463, 464, 466, 467, 468, 470, 471, 481, 482, 483, 488, 502, 508, 515, 516, 517, 519, 523, 527, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 610, 619, 621, 626, 627, 628, 629, 630, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 684, 685, 686, 687, 688, 689, 691, 692, 695, 696, 697, 698, 699, 700, 701, 720, 721, 722, 726, 743, 744, 746, 748, 749, 751, 752, 759, 765, 766, 769, 770, 772, 776, 777, 778, 779, 783, 788, 789, 795, 796, 797, 800, 801, 803, 811, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 846, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 917, 918, 919, 920, 921, 922, 926, 931, 936, 945, 947, 948, 952, 961, 963, 969, 974, 975, 978, 980, 982, 984, 985, 986, 987, 988, 990, 991, 992, 993, 995, 996, 1000, 1001, 1002, 1003, 1004, 1008, 1009, 1013, 1015, 1019, 1020, 1026, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "annot": [4, 9, 27, 135, 177, 223, 266, 269, 352, 381, 382, 383, 408, 715, 914, 988, 1004, 1040], "log": [4, 21, 26, 27, 28, 79, 96, 113, 126, 133, 146, 150, 154, 155, 157, 158, 159, 162, 186, 189, 190, 194, 201, 206, 211, 219, 234, 236, 251, 295, 312, 352, 376, 378, 379, 381, 385, 389, 390, 395, 405, 406, 408, 409, 410, 413, 415, 416, 418, 447, 450, 459, 464, 469, 470, 471, 472, 473, 474, 475, 531, 535, 540, 548, 549, 550, 552, 554, 556, 558, 561, 563, 589, 590, 592, 593, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 641, 644, 647, 657, 658, 668, 670, 675, 679, 739, 749, 753, 795, 796, 797, 800, 801, 811, 835, 836, 837, 838, 839, 840, 841, 845, 856, 857, 864, 865, 894, 897, 902, 905, 907, 908, 910, 935, 977, 980, 982, 984, 985, 990, 991, 993, 996, 998, 1002, 1004, 1008, 1009, 1022, 1033, 1034, 1035, 1040, 1041, 1042, 1045], "describ": [4, 13, 57, 133, 150, 171, 219, 235, 262, 271, 363, 367, 368, 374, 376, 378, 380, 381, 383, 386, 389, 395, 396, 405, 408, 410, 411, 412, 413, 415, 416, 461, 468, 472, 473, 490, 492, 494, 495, 496, 499, 500, 501, 502, 503, 504, 509, 515, 516, 517, 527, 606, 607, 644, 658, 667, 713, 795, 796, 835, 837, 875, 937, 977, 980, 983, 984, 987, 988, 990, 994, 1002, 1003, 1004, 1012, 1015, 1021, 1022, 1039, 1041], "weather": [4, 13, 158, 172, 984, 988], "includ": [4, 33, 35, 56, 81, 119, 123, 125, 170, 171, 173, 185, 201, 205, 219, 237, 263, 280, 285, 302, 307, 320, 321, 323, 339, 344, 352, 354, 363, 367, 368, 375, 377, 379, 381, 382, 383, 385, 386, 387, 389, 390, 395, 396, 398, 405, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 443, 445, 449, 455, 465, 468, 469, 470, 471, 472, 473, 474, 475, 488, 489, 490, 495, 499, 500, 501, 503, 504, 509, 533, 540, 556, 563, 573, 631, 637, 645, 646, 651, 659, 660, 661, 664, 680, 687, 688, 696, 712, 727, 728, 733, 735, 736, 769, 781, 782, 785, 793, 797, 799, 800, 801, 810, 811, 814, 817, 823, 826, 848, 850, 851, 852, 873, 874, 875, 879, 897, 900, 901, 908, 910, 912, 914, 920, 921, 924, 926, 929, 945, 977, 984, 987, 988, 989, 991, 992, 998, 1002, 1003, 1004, 1008, 1009, 1012, 1013, 1022, 1024, 1031, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "both": [4, 5, 7, 9, 10, 13, 15, 17, 21, 26, 27, 35, 43, 55, 56, 65, 72, 79, 81, 86, 87, 101, 104, 111, 116, 119, 120, 123, 132, 133, 136, 145, 146, 150, 153, 160, 162, 170, 171, 172, 173, 180, 185, 187, 189, 190, 201, 202, 203, 205, 206, 207, 209, 219, 226, 236, 237, 238, 247, 248, 249, 250, 251, 252, 262, 263, 264, 265, 269, 271, 273, 277, 285, 297, 307, 311, 312, 317, 319, 323, 328, 329, 336, 341, 343, 352, 353, 354, 361, 363, 367, 368, 369, 374, 375, 376, 377, 379, 381, 383, 387, 388, 390, 393, 394, 395, 396, 398, 399, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 418, 421, 436, 445, 446, 451, 458, 461, 467, 474, 481, 482, 483, 484, 487, 488, 495, 496, 499, 501, 504, 506, 507, 508, 533, 537, 539, 546, 550, 554, 555, 556, 562, 563, 564, 565, 566, 576, 587, 588, 590, 596, 606, 607, 626, 631, 632, 642, 656, 657, 658, 671, 673, 675, 677, 686, 698, 703, 711, 715, 727, 728, 729, 734, 736, 755, 759, 765, 772, 776, 781, 782, 785, 786, 787, 793, 800, 801, 803, 819, 829, 857, 858, 872, 874, 876, 888, 893, 898, 900, 901, 908, 910, 924, 938, 951, 963, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 998, 1001, 1002, 1003, 1004, 1008, 1009, 1012, 1013, 1019, 1022, 1023, 1024, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "numer": [4, 13, 20, 67, 72, 76, 121, 123, 133, 150, 158, 161, 172, 173, 190, 201, 219, 240, 242, 244, 295, 313, 320, 354, 375, 376, 378, 384, 386, 387, 393, 394, 395, 408, 410, 415, 416, 417, 418, 420, 421, 439, 442, 446, 458, 470, 471, 474, 477, 488, 489, 490, 495, 499, 500, 501, 503, 504, 509, 530, 532, 534, 539, 546, 566, 580, 589, 610, 616, 619, 626, 629, 631, 632, 645, 651, 653, 671, 686, 689, 693, 713, 786, 792, 797, 800, 801, 803, 811, 819, 822, 823, 824, 827, 835, 836, 837, 838, 839, 857, 858, 863, 868, 873, 874, 881, 912, 913, 914, 920, 921, 936, 937, 977, 978, 984, 985, 989, 996, 998, 999, 1004, 1012, 1013, 1015, 1024, 1031, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "categor": [4, 72, 112, 118, 133, 137, 168, 171, 172, 173, 201, 219, 240, 242, 244, 265, 280, 314, 320, 322, 323, 369, 373, 375, 376, 383, 386, 395, 409, 416, 465, 466, 488, 489, 495, 504, 560, 561, 580, 581, 606, 607, 631, 632, 647, 657, 658, 668, 679, 708, 823, 835, 836, 837, 838, 839, 861, 863, 867, 868, 871, 873, 874, 881, 895, 896, 978, 984, 995, 996, 1004, 1008, 1009, 1010, 1011, 1012, 1013, 1024, 1026, 1031, 1032, 1035, 1036, 1039, 1041, 1043, 1046, 1047, 1048], "inform": [4, 5, 8, 11, 12, 14, 26, 28, 34, 35, 38, 39, 50, 54, 59, 67, 68, 71, 72, 87, 90, 91, 92, 103, 119, 120, 121, 144, 146, 147, 149, 150, 151, 153, 158, 168, 171, 172, 174, 177, 179, 180, 181, 185, 202, 205, 209, 216, 218, 219, 220, 237, 241, 249, 250, 252, 257, 259, 262, 263, 264, 267, 269, 271, 288, 291, 292, 295, 314, 320, 342, 347, 352, 353, 354, 358, 361, 363, 367, 370, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 386, 387, 389, 393, 394, 395, 396, 399, 402, 405, 412, 413, 415, 416, 417, 418, 422, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 461, 463, 468, 469, 470, 472, 473, 474, 475, 481, 482, 483, 484, 491, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 509, 514, 523, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 580, 581, 582, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 605, 606, 607, 608, 609, 610, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 675, 676, 677, 678, 679, 686, 687, 688, 689, 690, 691, 694, 696, 700, 703, 704, 714, 724, 728, 741, 753, 754, 755, 784, 786, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 823, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 885, 886, 888, 889, 890, 891, 892, 893, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 914, 945, 978, 980, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 998, 999, 1002, 1004, 1009, 1010, 1013, 1021, 1022, 1023, 1024, 1031, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "alreadi": [4, 6, 10, 17, 56, 59, 91, 101, 113, 133, 150, 171, 231, 238, 240, 243, 263, 269, 285, 320, 323, 381, 382, 386, 393, 395, 406, 410, 412, 414, 415, 420, 436, 498, 522, 532, 566, 567, 633, 645, 648, 663, 664, 665, 666, 667, 673, 675, 676, 677, 684, 685, 766, 835, 855, 863, 869, 870, 872, 877, 883, 885, 886, 887, 889, 890, 891, 897, 900, 901, 923, 947, 977, 980, 994, 998, 999, 1009, 1015, 1020, 1024, 1028, 1032, 1036, 1039, 1043, 1044, 1045, 1046], "expand": [4, 17, 50, 66, 232, 313, 318, 363, 373, 415, 443, 449, 498, 556, 557, 558, 559, 563, 564, 565, 908, 909, 910, 911, 988, 1032, 1039, 1040, 1047], "complementari": [4, 416], "column": [4, 8, 13, 21, 22, 61, 70, 73, 76, 77, 91, 120, 122, 123, 126, 130, 133, 150, 158, 165, 168, 170, 171, 172, 173, 174, 190, 201, 202, 205, 209, 219, 232, 239, 240, 241, 244, 252, 262, 263, 273, 274, 283, 303, 312, 313, 314, 319, 320, 321, 322, 352, 353, 354, 367, 375, 376, 378, 381, 383, 387, 390, 393, 394, 395, 405, 408, 409, 411, 413, 415, 416, 417, 420, 423, 450, 452, 463, 465, 466, 470, 471, 477, 486, 487, 488, 489, 490, 491, 493, 495, 499, 500, 501, 503, 504, 507, 508, 509, 510, 512, 514, 525, 530, 533, 536, 540, 541, 547, 554, 556, 557, 563, 564, 565, 566, 580, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 609, 626, 629, 631, 632, 633, 645, 647, 651, 657, 659, 661, 663, 664, 668, 679, 684, 685, 696, 712, 717, 718, 727, 728, 736, 752, 761, 766, 767, 768, 771, 781, 782, 785, 786, 797, 800, 801, 811, 821, 826, 831, 834, 835, 836, 837, 838, 839, 840, 841, 860, 864, 865, 866, 867, 873, 874, 875, 879, 880, 881, 882, 884, 900, 902, 905, 908, 910, 916, 920, 921, 926, 937, 951, 964, 965, 967, 975, 977, 978, 980, 984, 986, 988, 989, 996, 998, 1003, 1009, 1010, 1031, 1033, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "x": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 25, 26, 27, 28, 31, 32, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 80, 81, 82, 83, 86, 87, 92, 93, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 142, 145, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 222, 223, 224, 227, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 363, 367, 374, 375, 376, 381, 382, 383, 385, 386, 387, 388, 389, 390, 393, 394, 395, 399, 402, 406, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 427, 429, 430, 431, 432, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 481, 482, 483, 484, 486, 492, 493, 494, 497, 499, 500, 501, 504, 505, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 705, 709, 710, 723, 733, 740, 756, 757, 758, 759, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 786, 790, 791, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 924, 936, 937, 939, 948, 949, 956, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 977, 978, 979, 980, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 998, 1000, 1001, 1002, 1003, 1004, 1009, 1015, 1019, 1020, 1022, 1023, 1024, 1028, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048], "drop": [4, 5, 13, 72, 76, 87, 158, 170, 171, 172, 174, 201, 205, 219, 240, 244, 272, 313, 319, 322, 353, 385, 389, 409, 413, 415, 463, 466, 566, 567, 568, 569, 694, 699, 701, 780, 787, 859, 873, 879, 978, 984, 988, 996, 998, 1008, 1031, 1032, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "axi": [4, 5, 7, 11, 12, 13, 14, 15, 18, 20, 26, 27, 38, 40, 41, 48, 49, 51, 53, 54, 55, 56, 62, 72, 73, 76, 83, 87, 92, 93, 96, 97, 98, 99, 100, 106, 115, 116, 120, 122, 129, 132, 136, 142, 146, 157, 158, 162, 165, 170, 171, 182, 186, 188, 190, 193, 194, 195, 201, 206, 210, 213, 215, 216, 218, 219, 223, 224, 227, 230, 234, 235, 239, 247, 249, 251, 252, 258, 259, 263, 264, 269, 271, 272, 283, 285, 290, 291, 292, 295, 296, 297, 304, 307, 311, 314, 327, 329, 331, 335, 338, 339, 342, 344, 345, 346, 347, 349, 352, 353, 358, 359, 360, 361, 383, 390, 395, 406, 408, 416, 420, 437, 444, 463, 466, 530, 532, 535, 536, 538, 540, 542, 549, 584, 611, 630, 631, 684, 685, 700, 761, 777, 778, 779, 780, 803, 819, 828, 869, 870, 877, 878, 880, 883, 885, 886, 887, 889, 890, 891, 914, 916, 920, 921, 939, 963, 969, 978, 988, 995, 998, 1003, 1021, 1023, 1039, 1041, 1043, 1048], "holidai": [4, 172], "workingdai": [4, 172], "temp": [4, 13, 172], "feel_temp": [4, 13, 172], "humid": [4, 13, 172, 995], "windspe": [4, 13, 172], "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 367, 368, 375, 376, 378, 379, 381, 382, 383, 385, 386, 387, 388, 390, 393, 394, 395, 398, 399, 400, 401, 402, 404, 405, 406, 408, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 431, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 714, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 757, 758, 759, 761, 762, 764, 765, 766, 767, 769, 771, 773, 774, 775, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 918, 920, 921, 926, 931, 932, 934, 936, 937, 939, 940, 941, 942, 949, 950, 951, 953, 954, 956, 958, 959, 962, 963, 969, 977, 978, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1006, 1008, 1009, 1010, 1011, 1015, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029], "spring": [4, 13, 172], "fals": [4, 5, 7, 8, 10, 11, 14, 15, 17, 21, 22, 25, 27, 28, 33, 34, 35, 40, 43, 45, 47, 48, 55, 56, 65, 68, 71, 72, 73, 74, 80, 82, 93, 100, 102, 105, 106, 113, 119, 120, 123, 126, 127, 136, 139, 153, 158, 159, 160, 161, 171, 172, 173, 174, 180, 181, 185, 187, 201, 202, 206, 207, 209, 217, 219, 222, 225, 237, 238, 240, 244, 247, 259, 260, 262, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 285, 289, 295, 298, 302, 303, 307, 308, 313, 314, 317, 319, 320, 321, 322, 328, 339, 341, 347, 348, 352, 353, 375, 381, 382, 383, 386, 395, 399, 406, 408, 409, 410, 412, 413, 415, 416, 417, 418, 420, 421, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 458, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 507, 508, 509, 511, 514, 522, 523, 525, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 634, 636, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 693, 694, 696, 697, 698, 699, 700, 701, 702, 707, 708, 710, 711, 712, 713, 714, 717, 724, 725, 726, 727, 728, 729, 736, 740, 741, 748, 749, 752, 754, 759, 761, 765, 766, 767, 772, 776, 780, 781, 782, 783, 785, 787, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 808, 811, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 918, 919, 920, 921, 931, 938, 949, 950, 953, 954, 958, 959, 962, 969, 974, 975, 977, 978, 984, 988, 991, 998, 1002, 1003, 1023, 1024, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "6": [4, 6, 8, 9, 10, 11, 12, 13, 17, 20, 27, 32, 33, 41, 45, 47, 50, 51, 53, 57, 58, 61, 62, 63, 64, 65, 66, 68, 74, 75, 76, 77, 79, 80, 81, 83, 86, 91, 96, 98, 106, 114, 122, 126, 127, 130, 132, 139, 145, 150, 151, 153, 156, 158, 160, 161, 165, 166, 171, 172, 174, 177, 180, 181, 182, 185, 190, 194, 199, 201, 202, 203, 205, 215, 219, 222, 223, 224, 226, 228, 230, 233, 234, 238, 241, 242, 247, 248, 249, 250, 252, 253, 256, 257, 260, 261, 262, 263, 264, 265, 267, 271, 272, 273, 274, 275, 277, 283, 287, 290, 298, 301, 303, 304, 307, 309, 311, 312, 314, 317, 320, 321, 322, 323, 326, 327, 330, 331, 332, 339, 340, 342, 344, 347, 349, 353, 354, 360, 363, 375, 376, 378, 379, 381, 386, 387, 394, 398, 400, 401, 406, 408, 409, 412, 413, 415, 416, 417, 445, 447, 448, 449, 450, 451, 452, 461, 481, 482, 483, 484, 504, 523, 526, 529, 536, 537, 538, 539, 540, 545, 546, 552, 560, 561, 562, 568, 569, 592, 593, 610, 613, 614, 624, 626, 627, 629, 643, 644, 669, 688, 692, 698, 720, 726, 736, 740, 743, 744, 748, 749, 751, 767, 783, 786, 788, 795, 796, 798, 799, 804, 806, 807, 809, 814, 815, 818, 821, 822, 823, 824, 826, 835, 836, 837, 839, 840, 841, 848, 850, 851, 852, 867, 868, 870, 873, 875, 878, 879, 884, 915, 937, 940, 942, 951, 977, 978, 982, 984, 985, 988, 998, 999, 1002, 1003, 1004, 1006, 1015, 1019, 1020, 1022, 1027, 1029, 1032, 1033, 1034, 1039, 1044, 1048], "clear": [4, 17, 56, 61, 73, 171, 172, 312, 376, 380, 381, 383, 393, 394, 395, 406, 409, 414, 914, 915, 977, 982, 1042, 1043, 1044], "9": [4, 7, 9, 12, 13, 14, 25, 27, 28, 32, 33, 35, 43, 45, 51, 56, 59, 63, 65, 75, 83, 86, 92, 99, 122, 123, 124, 125, 126, 131, 133, 139, 141, 142, 150, 156, 160, 166, 170, 171, 172, 182, 183, 192, 201, 214, 215, 218, 219, 222, 225, 234, 235, 244, 247, 248, 249, 250, 256, 260, 265, 269, 271, 283, 287, 289, 290, 293, 294, 295, 301, 302, 304, 307, 309, 310, 311, 313, 314, 322, 323, 326, 327, 329, 330, 331, 339, 343, 349, 354, 363, 378, 379, 387, 394, 398, 400, 401, 406, 409, 410, 412, 415, 416, 438, 442, 449, 456, 481, 482, 483, 484, 489, 519, 526, 533, 537, 538, 539, 546, 559, 566, 569, 582, 590, 606, 607, 626, 629, 633, 638, 646, 657, 660, 691, 698, 708, 721, 724, 739, 746, 767, 776, 777, 778, 795, 798, 800, 801, 815, 818, 824, 826, 829, 837, 838, 842, 843, 848, 851, 857, 858, 866, 872, 875, 937, 941, 977, 983, 984, 988, 992, 998, 1002, 1003, 1006, 1015, 1019, 1024, 1027, 1029, 1032, 1033, 1034, 1036, 1045, 1047], "84": [4, 6, 71, 147, 192, 219, 309, 326, 363, 378, 415, 416, 786, 811, 988, 998, 1020], "14": [4, 8, 11, 13, 16, 39, 50, 56, 61, 63, 64, 67, 69, 75, 82, 101, 145, 150, 172, 185, 190, 192, 219, 224, 227, 230, 235, 240, 261, 267, 268, 276, 283, 285, 299, 310, 311, 322, 346, 349, 352, 355, 368, 376, 378, 379, 394, 398, 400, 401, 408, 412, 497, 509, 552, 553, 584, 585, 634, 642, 691, 811, 815, 866, 981, 984, 988, 998, 1003, 1006, 1010, 1015, 1029, 1031, 1032, 1034, 1035, 1039, 1044], "395": 4, "81": [4, 51, 244, 326, 327, 408, 698, 786, 797, 811, 988, 989, 991, 998], "0000": [4, 322], "02": [4, 12, 13, 29, 31, 36, 45, 51, 53, 59, 63, 65, 69, 77, 83, 84, 86, 96, 99, 115, 122, 137, 150, 155, 160, 163, 170, 171, 175, 182, 219, 230, 238, 240, 245, 257, 263, 269, 278, 290, 301, 304, 305, 307, 309, 315, 331, 335, 353, 358, 375, 378, 386, 412, 440, 444, 596, 657, 675, 797, 811, 879, 895, 909, 984, 1010], "13": [4, 6, 8, 10, 11, 13, 45, 75, 101, 106, 122, 124, 125, 127, 165, 167, 171, 177, 187, 210, 227, 256, 263, 266, 268, 299, 304, 305, 307, 311, 339, 376, 378, 381, 387, 394, 412, 420, 509, 512, 531, 532, 550, 551, 581, 634, 638, 732, 815, 844, 859, 866, 892, 893, 984, 988, 989, 994, 995, 998, 1003, 1006, 1015, 1029, 1031, 1033, 1034, 1037, 1038, 1039, 1040, 1043], "635": [4, 615], "80": [4, 6, 11, 17, 28, 68, 82, 99, 102, 133, 142, 147, 172, 180, 238, 309, 313, 326, 342, 344, 352, 359, 363, 376, 378, 381, 406, 412, 417, 443, 509, 540, 712, 797, 811, 881, 894, 913, 977, 983, 984, 988, 995, 1001, 1004, 1024], "75": [4, 6, 7, 10, 13, 34, 45, 56, 83, 116, 147, 160, 161, 166, 171, 177, 180, 183, 192, 208, 219, 244, 249, 250, 262, 271, 275, 290, 307, 320, 349, 352, 363, 448, 550, 657, 705, 711, 732, 737, 743, 751, 754, 792, 797, 878, 890, 897, 913, 988, 990, 998, 1004, 1007, 1020, 1033], "17374": [4, 13], "19": [4, 13, 51, 158, 171, 177, 178, 201, 205, 216, 220, 224, 227, 252, 311, 312, 324, 327, 353, 378, 379, 385, 395, 398, 400, 401, 408, 409, 416, 419, 443, 491, 515, 516, 517, 535, 539, 540, 546, 548, 549, 556, 557, 558, 559, 563, 564, 565, 581, 588, 647, 657, 658, 665, 666, 667, 670, 671, 673, 675, 677, 686, 706, 779, 783, 797, 811, 823, 828, 829, 831, 832, 846, 847, 866, 877, 898, 902, 905, 908, 909, 910, 911, 977, 988, 998, 1006, 1010, 1027, 1029, 1031, 1032, 1033, 1034, 1036, 1039], "misti": [4, 172], "10": [4, 5, 6, 7, 8, 10, 12, 13, 15, 16, 17, 18, 21, 26, 27, 28, 31, 32, 33, 38, 40, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 72, 73, 75, 79, 80, 81, 82, 83, 86, 87, 93, 98, 99, 100, 101, 102, 106, 107, 113, 115, 116, 118, 119, 120, 122, 123, 124, 126, 127, 130, 131, 134, 136, 140, 142, 147, 150, 154, 155, 157, 159, 160, 162, 163, 165, 166, 170, 171, 172, 173, 174, 177, 180, 185, 191, 192, 194, 195, 199, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 217, 218, 219, 223, 224, 230, 233, 234, 235, 236, 237, 239, 240, 241, 243, 250, 251, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 270, 273, 276, 280, 283, 290, 301, 302, 303, 304, 307, 308, 310, 311, 312, 317, 318, 319, 320, 321, 323, 326, 327, 328, 330, 337, 338, 339, 341, 342, 344, 346, 347, 349, 352, 353, 354, 363, 367, 375, 376, 377, 378, 381, 383, 386, 387, 393, 394, 395, 398, 399, 405, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 421, 437, 442, 446, 448, 450, 451, 452, 458, 459, 461, 474, 491, 492, 499, 500, 501, 503, 509, 510, 511, 512, 515, 519, 520, 523, 527, 530, 534, 535, 536, 537, 538, 540, 541, 543, 545, 547, 551, 554, 555, 556, 557, 560, 561, 563, 564, 565, 566, 567, 569, 581, 582, 592, 593, 598, 599, 610, 616, 618, 626, 629, 631, 633, 634, 639, 641, 642, 643, 648, 658, 663, 664, 665, 666, 668, 669, 671, 672, 674, 675, 676, 677, 684, 685, 690, 691, 698, 704, 714, 724, 740, 754, 767, 795, 796, 797, 798, 799, 800, 801, 808, 811, 812, 813, 814, 815, 817, 818, 819, 824, 826, 828, 829, 835, 836, 837, 839, 840, 841, 847, 856, 857, 858, 860, 866, 870, 873, 874, 877, 889, 897, 903, 906, 908, 909, 913, 937, 941, 952, 956, 958, 974, 977, 978, 983, 984, 985, 986, 988, 989, 991, 992, 994, 995, 998, 1002, 1003, 1006, 1010, 1015, 1019, 1020, 1022, 1023, 1024, 1028, 1029, 1032, 1033, 1034, 1039, 1041, 1042, 1043, 1045, 1046], "66": [4, 224, 226, 313, 378, 408, 531, 631, 711, 781, 782, 793, 879, 988, 1000], "880": 4, "60": [4, 6, 17, 60, 74, 83, 201, 213, 219, 222, 223, 244, 250, 270, 275, 327, 342, 352, 375, 408, 412, 449, 456, 712, 797, 988, 998, 1020, 1031, 1034], "11": [4, 13, 20, 75, 82, 98, 143, 150, 156, 171, 172, 185, 201, 202, 203, 206, 224, 240, 259, 267, 268, 274, 278, 288, 289, 291, 311, 319, 322, 323, 324, 338, 342, 347, 352, 354, 375, 378, 379, 387, 394, 408, 411, 412, 415, 449, 456, 481, 482, 483, 484, 500, 516, 517, 611, 649, 655, 669, 714, 720, 721, 722, 776, 777, 778, 798, 801, 815, 818, 825, 852, 909, 952, 980, 984, 986, 998, 1002, 1003, 1006, 1010, 1015, 1022, 1024, 1029, 1033, 1037, 1039, 1040, 1042, 1045, 1046], "0014": 4, "17375": [4, 13], "20": [4, 7, 8, 13, 15, 17, 20, 26, 27, 28, 34, 35, 40, 41, 44, 47, 48, 51, 55, 56, 62, 68, 79, 83, 93, 96, 102, 104, 106, 115, 119, 122, 123, 126, 129, 133, 134, 136, 142, 145, 146, 147, 150, 159, 163, 170, 172, 173, 183, 190, 191, 193, 197, 198, 200, 201, 202, 205, 210, 213, 214, 215, 216, 218, 225, 234, 240, 249, 251, 252, 262, 263, 265, 266, 268, 273, 274, 276, 280, 285, 289, 290, 291, 292, 293, 296, 304, 311, 312, 313, 318, 319, 320, 321, 323, 326, 327, 330, 336, 338, 342, 344, 349, 353, 354, 359, 360, 374, 378, 381, 383, 385, 386, 387, 398, 408, 415, 416, 440, 445, 446, 448, 463, 464, 468, 470, 471, 477, 487, 488, 489, 490, 491, 493, 495, 496, 499, 501, 503, 504, 511, 514, 515, 522, 530, 535, 536, 541, 544, 545, 547, 551, 554, 555, 558, 559, 560, 561, 562, 568, 569, 581, 588, 591, 593, 596, 598, 628, 629, 644, 648, 657, 665, 666, 667, 675, 677, 695, 703, 707, 712, 715, 723, 724, 737, 754, 755, 765, 790, 791, 795, 796, 797, 811, 822, 823, 824, 827, 829, 832, 833, 834, 837, 838, 845, 846, 857, 858, 859, 860, 862, 864, 865, 873, 874, 875, 876, 881, 895, 896, 898, 899, 904, 912, 918, 920, 921, 977, 984, 988, 991, 994, 995, 998, 1001, 1006, 1012, 1013, 1016, 1022, 1026, 1027, 1029, 1031, 1037, 1040, 1043, 1045, 1046], "17376": [4, 13], "21": [4, 13, 74, 150, 171, 172, 175, 190, 202, 219, 252, 285, 304, 309, 311, 323, 378, 379, 383, 385, 398, 405, 415, 416, 440, 444, 473, 531, 560, 561, 562, 568, 569, 587, 588, 590, 626, 668, 686, 752, 797, 799, 811, 823, 866, 873, 875, 881, 898, 914, 980, 984, 989, 998, 1006, 1010, 1027, 1029, 1031, 1032, 1034, 1038, 1039, 1041], "17377": [4, 13], "22": [4, 13, 43, 93, 111, 117, 118, 119, 120, 165, 166, 168, 171, 172, 173, 209, 218, 220, 240, 243, 252, 259, 271, 278, 280, 283, 287, 304, 307, 311, 316, 319, 322, 323, 324, 327, 354, 381, 385, 386, 398, 405, 436, 447, 471, 487, 488, 494, 495, 503, 514, 523, 530, 536, 541, 544, 545, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 593, 626, 627, 631, 633, 644, 646, 650, 652, 654, 657, 658, 660, 662, 664, 668, 687, 691, 701, 703, 712, 755, 767, 776, 781, 782, 786, 797, 798, 802, 811, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 844, 846, 848, 850, 851, 852, 857, 858, 859, 861, 864, 880, 900, 902, 903, 904, 905, 906, 908, 909, 910, 911, 931, 932, 980, 988, 998, 1006, 1010, 1027, 1029, 1031, 1034, 1039, 1042, 1044], "56": [4, 13, 43, 210, 219, 234, 387, 712, 733, 988, 998, 1027, 1031], "8": [4, 5, 6, 7, 8, 9, 12, 13, 14, 20, 26, 27, 28, 32, 33, 35, 38, 44, 45, 46, 49, 51, 54, 56, 61, 63, 65, 66, 71, 73, 75, 76, 82, 86, 91, 92, 93, 96, 97, 100, 101, 105, 107, 113, 116, 118, 119, 123, 125, 126, 128, 131, 134, 135, 139, 149, 150, 154, 156, 158, 159, 161, 162, 166, 170, 171, 172, 174, 177, 180, 181, 186, 187, 192, 195, 201, 202, 205, 208, 209, 211, 217, 219, 222, 223, 224, 226, 227, 231, 234, 235, 236, 238, 242, 243, 244, 247, 248, 249, 251, 252, 253, 257, 258, 260, 261, 262, 263, 265, 266, 267, 269, 272, 273, 280, 283, 287, 289, 293, 297, 301, 303, 304, 307, 309, 310, 311, 312, 313, 315, 317, 322, 326, 327, 328, 330, 331, 336, 339, 343, 344, 346, 347, 348, 352, 353, 354, 360, 363, 368, 375, 376, 378, 379, 381, 386, 387, 398, 406, 408, 412, 413, 415, 416, 417, 438, 442, 443, 446, 448, 449, 451, 461, 468, 469, 470, 471, 472, 473, 474, 475, 482, 483, 484, 486, 489, 501, 502, 513, 530, 533, 537, 539, 542, 544, 546, 548, 549, 554, 555, 564, 569, 581, 587, 588, 589, 590, 627, 628, 647, 657, 669, 675, 688, 691, 692, 693, 694, 698, 701, 705, 706, 708, 714, 720, 725, 726, 727, 739, 743, 744, 748, 749, 751, 780, 781, 783, 786, 787, 788, 789, 793, 795, 798, 799, 804, 807, 814, 815, 818, 819, 826, 829, 838, 840, 841, 847, 857, 858, 859, 865, 872, 879, 881, 902, 905, 935, 937, 941, 977, 978, 984, 985, 986, 988, 991, 996, 998, 1002, 1006, 1013, 1015, 1019, 1020, 1021, 1022, 1023, 1027, 1028, 1029, 1032, 1033, 1034, 1038, 1039, 1044, 1045, 1047], "9981": 4, "17378": [4, 13], "23": [4, 13, 20, 27, 35, 43, 51, 99, 130, 150, 168, 182, 201, 227, 232, 242, 244, 252, 304, 311, 316, 319, 320, 321, 323, 324, 327, 330, 378, 379, 381, 387, 398, 400, 401, 415, 421, 431, 439, 446, 451, 453, 461, 464, 466, 467, 474, 481, 482, 483, 489, 491, 499, 500, 501, 503, 504, 509, 511, 513, 521, 523, 537, 538, 539, 542, 546, 553, 555, 557, 559, 560, 561, 564, 567, 568, 569, 606, 607, 610, 626, 629, 631, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 666, 668, 669, 671, 672, 674, 677, 678, 679, 716, 728, 776, 826, 832, 833, 834, 843, 851, 858, 861, 873, 880, 888, 889, 898, 901, 903, 906, 909, 911, 918, 920, 921, 931, 932, 937, 988, 1006, 1010, 1027, 1029, 1031, 1032, 1038, 1039, 1040, 1043], "65": [4, 13, 34, 172, 201, 271, 313, 408, 438, 501, 596, 698, 739, 790, 791, 995, 1020, 1031, 1032, 1033], "17379": [4, 13, 1043], "row": [4, 20, 21, 22, 26, 28, 35, 45, 61, 76, 91, 93, 119, 122, 131, 134, 165, 201, 202, 203, 231, 234, 240, 241, 309, 361, 367, 376, 383, 390, 394, 395, 405, 408, 411, 416, 423, 441, 442, 446, 448, 449, 450, 452, 455, 456, 458, 463, 467, 487, 489, 490, 491, 492, 493, 494, 499, 500, 501, 503, 504, 509, 510, 512, 533, 541, 547, 550, 589, 590, 619, 631, 642, 645, 646, 651, 652, 659, 660, 661, 662, 680, 683, 691, 695, 696, 709, 717, 718, 723, 756, 757, 761, 764, 766, 767, 768, 769, 771, 772, 774, 776, 777, 778, 779, 795, 796, 829, 835, 836, 837, 838, 839, 845, 848, 849, 850, 851, 852, 855, 866, 870, 872, 873, 875, 887, 890, 891, 894, 898, 916, 920, 921, 937, 959, 962, 966, 968, 970, 971, 975, 977, 978, 980, 982, 984, 986, 988, 989, 991, 998, 999, 1002, 1003, 1009, 1038, 1039, 1040, 1041, 1046], "onli": [4, 7, 11, 14, 15, 21, 25, 26, 27, 28, 31, 34, 35, 38, 40, 41, 46, 50, 54, 56, 59, 67, 71, 72, 73, 75, 76, 82, 91, 99, 100, 102, 103, 107, 113, 115, 120, 121, 122, 123, 125, 132, 133, 145, 146, 147, 150, 153, 155, 158, 160, 162, 166, 168, 170, 171, 172, 177, 179, 184, 185, 190, 197, 201, 202, 204, 207, 209, 210, 219, 220, 222, 223, 230, 232, 234, 236, 237, 241, 244, 247, 248, 249, 252, 253, 258, 260, 262, 264, 265, 268, 269, 270, 271, 273, 274, 280, 283, 285, 291, 293, 296, 298, 303, 307, 308, 312, 313, 319, 320, 326, 327, 329, 335, 336, 339, 343, 344, 347, 348, 352, 353, 354, 357, 358, 361, 363, 367, 368, 369, 374, 375, 376, 378, 379, 381, 383, 385, 386, 387, 388, 389, 390, 393, 395, 396, 398, 399, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 488, 489, 490, 491, 493, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 509, 511, 515, 518, 522, 523, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 698, 706, 708, 712, 724, 727, 728, 732, 734, 735, 736, 739, 740, 741, 754, 756, 758, 772, 776, 777, 778, 779, 781, 782, 785, 786, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 803, 804, 806, 811, 815, 819, 821, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 918, 920, 921, 924, 926, 929, 937, 939, 942, 944, 949, 954, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1008, 1009, 1010, 1013, 1022, 1023, 1024, 1028, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1048], "present": [4, 5, 13, 44, 50, 93, 96, 104, 118, 119, 126, 129, 149, 150, 159, 162, 180, 183, 185, 190, 201, 230, 233, 237, 252, 260, 265, 268, 271, 272, 285, 307, 310, 312, 353, 378, 379, 383, 386, 393, 395, 399, 408, 410, 413, 415, 416, 426, 427, 430, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 488, 489, 490, 491, 495, 499, 500, 501, 502, 503, 504, 509, 530, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 548, 549, 560, 561, 562, 565, 568, 569, 580, 581, 582, 587, 588, 590, 616, 626, 627, 628, 629, 649, 653, 676, 687, 688, 689, 690, 711, 727, 728, 736, 767, 781, 782, 785, 795, 796, 797, 800, 801, 809, 811, 824, 842, 843, 844, 846, 848, 850, 851, 852, 859, 864, 872, 873, 874, 875, 876, 878, 881, 892, 893, 904, 912, 914, 915, 937, 972, 987, 988, 989, 990, 995, 998, 1007, 1009, 1034, 1039, 1041, 1042, 1043, 1045, 1046], "date": [4, 71, 150, 158, 172, 376, 378, 381, 385, 396, 409, 1009], "datetim": [4, 18, 158, 172], "panda": [4, 12, 26, 71, 72, 73, 74, 113, 119, 120, 123, 126, 130, 158, 165, 170, 171, 172, 173, 174, 180, 185, 190, 201, 205, 209, 219, 240, 241, 244, 252, 260, 262, 263, 265, 273, 274, 280, 312, 313, 314, 317, 320, 321, 347, 352, 353, 375, 376, 379, 380, 381, 383, 384, 395, 398, 401, 409, 432, 441, 442, 444, 446, 448, 463, 465, 467, 481, 482, 483, 484, 488, 489, 490, 491, 495, 499, 500, 501, 503, 504, 509, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 560, 561, 565, 566, 567, 568, 569, 580, 581, 582, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 626, 627, 628, 629, 631, 632, 634, 637, 638, 639, 640, 641, 687, 688, 691, 797, 800, 801, 811, 826, 844, 849, 852, 856, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 898, 916, 977, 978, 998, 1008, 1009, 1024, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "http": [4, 6, 7, 8, 12, 18, 25, 72, 127, 133, 150, 162, 166, 177, 201, 209, 217, 219, 227, 231, 280, 283, 285, 303, 375, 376, 378, 379, 381, 385, 386, 387, 389, 393, 395, 398, 404, 408, 412, 417, 441, 448, 451, 461, 486, 491, 495, 499, 501, 507, 508, 509, 529, 530, 533, 535, 536, 540, 594, 635, 640, 643, 648, 657, 663, 665, 666, 667, 670, 675, 678, 681, 682, 684, 685, 690, 691, 694, 704, 720, 721, 722, 756, 757, 767, 835, 837, 838, 839, 842, 843, 848, 849, 850, 851, 856, 878, 893, 894, 895, 908, 909, 984, 986, 988, 991, 1001, 1004, 1012, 1013, 1020, 1036, 1041, 1048], "pydata": [4, 1007, 1013], "org": [4, 12, 14, 15, 18, 25, 27, 33, 38, 47, 49, 62, 67, 72, 73, 118, 120, 121, 129, 130, 133, 136, 147, 158, 162, 171, 172, 173, 177, 182, 192, 193, 201, 209, 217, 219, 223, 231, 232, 233, 235, 237, 241, 242, 243, 244, 252, 260, 262, 263, 265, 269, 274, 283, 303, 304, 313, 318, 319, 321, 322, 326, 327, 328, 331, 352, 353, 354, 361, 368, 374, 379, 381, 384, 387, 389, 396, 398, 412, 594, 635, 667, 670, 675, 694, 704, 767, 842, 843, 848, 849, 850, 851, 878, 894, 908, 909, 984, 988, 1004, 1006, 1026, 1039, 1043], "stabl": [4, 162, 171, 195, 199, 203, 285, 318, 347, 353, 379, 381, 385, 387, 390, 395, 398, 412, 416, 420, 470, 471, 477, 532, 654, 671, 673, 686, 691, 722, 750, 936, 937, 984, 990, 991, 998, 1009, 1027, 1031, 1032, 1037, 1042, 1044], "user_guid": 4, "timeseri": 4, "html": [4, 8, 12, 27, 72, 73, 118, 120, 121, 129, 130, 133, 136, 147, 150, 158, 162, 171, 172, 173, 177, 182, 231, 233, 237, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 304, 313, 318, 319, 321, 322, 328, 361, 376, 378, 381, 382, 384, 385, 389, 409, 412, 416, 486, 507, 508, 657, 835, 839, 933, 986, 1008, 1009, 1042, 1043, 1044, 1045, 1046, 1048], "compon": [4, 5, 18, 34, 45, 46, 59, 63, 71, 74, 85, 86, 88, 91, 95, 97, 98, 100, 101, 103, 104, 105, 107, 108, 131, 141, 158, 166, 168, 170, 185, 198, 222, 234, 235, 238, 247, 248, 251, 252, 253, 261, 263, 285, 286, 287, 288, 296, 297, 299, 304, 312, 319, 367, 373, 376, 381, 383, 387, 390, 393, 404, 407, 408, 409, 411, 416, 418, 420, 422, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 461, 462, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 501, 503, 514, 520, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 572, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 694, 795, 796, 797, 800, 801, 811, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 890, 891, 892, 893, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 936, 937, 980, 985, 987, 998, 1000, 1003, 1008, 1009, 1010, 1011, 1013, 1018, 1024, 1025, 1026, 1031, 1033, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "now": [4, 5, 7, 13, 18, 21, 54, 58, 72, 87, 101, 113, 114, 118, 120, 122, 123, 126, 127, 133, 136, 150, 153, 158, 159, 160, 166, 170, 171, 172, 173, 177, 180, 182, 187, 189, 190, 202, 203, 205, 226, 235, 237, 258, 262, 265, 273, 274, 280, 288, 312, 318, 319, 321, 322, 323, 328, 339, 352, 353, 354, 363, 367, 369, 376, 381, 382, 383, 387, 393, 394, 395, 405, 408, 412, 413, 415, 416, 420, 492, 507, 508, 511, 535, 548, 578, 579, 581, 626, 629, 648, 652, 657, 662, 683, 724, 754, 795, 796, 800, 801, 832, 847, 860, 963, 977, 978, 984, 988, 994, 997, 998, 1003, 1004, 1007, 1009, 1015, 1022, 1024, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "introspect": [4, 6, 72, 387, 558, 559, 587, 588, 590, 998, 1020], "value_count": [4, 13, 172, 280], "11413": 4, "4544": 4, "rain": [4, 13, 172, 984], "1419": 4, "heavy_rain": [4, 172], "name": [4, 6, 7, 9, 10, 11, 12, 13, 18, 20, 26, 28, 31, 32, 38, 45, 46, 59, 63, 72, 74, 76, 83, 97, 103, 116, 117, 118, 119, 123, 124, 126, 133, 171, 172, 173, 190, 199, 201, 203, 205, 207, 208, 216, 218, 219, 222, 223, 230, 236, 237, 239, 240, 244, 249, 257, 259, 260, 263, 265, 266, 269, 271, 272, 280, 285, 293, 294, 301, 302, 309, 311, 313, 321, 322, 330, 344, 352, 353, 354, 368, 369, 375, 376, 379, 381, 383, 385, 386, 388, 389, 395, 398, 402, 405, 408, 412, 415, 416, 418, 422, 424, 429, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 487, 488, 489, 490, 491, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 509, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 575, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 686, 687, 688, 689, 690, 691, 696, 697, 698, 699, 701, 707, 708, 712, 730, 731, 740, 777, 778, 795, 796, 797, 798, 799, 800, 801, 803, 804, 806, 809, 811, 815, 819, 823, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 919, 920, 921, 924, 928, 929, 930, 932, 944, 945, 946, 948, 951, 958, 972, 976, 977, 982, 984, 988, 989, 995, 996, 998, 1004, 1009, 1019, 1020, 1022, 1024, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "dtype": [4, 8, 10, 11, 13, 18, 49, 50, 54, 66, 71, 72, 123, 125, 127, 128, 129, 154, 155, 156, 166, 171, 172, 203, 219, 244, 247, 260, 266, 270, 280, 292, 298, 313, 320, 321, 323, 327, 361, 375, 376, 381, 383, 393, 395, 404, 409, 412, 423, 426, 441, 442, 446, 447, 448, 449, 450, 452, 463, 465, 466, 468, 471, 473, 487, 488, 489, 490, 495, 496, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 513, 521, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 580, 581, 584, 585, 587, 588, 590, 592, 593, 601, 605, 626, 627, 628, 629, 631, 632, 639, 640, 643, 644, 645, 651, 655, 656, 659, 660, 661, 662, 663, 664, 670, 672, 674, 696, 698, 704, 713, 714, 729, 736, 739, 753, 784, 803, 821, 823, 824, 836, 840, 841, 843, 851, 865, 871, 873, 874, 880, 881, 894, 902, 903, 904, 905, 906, 908, 909, 910, 911, 917, 918, 920, 921, 953, 963, 964, 965, 966, 969, 975, 978, 998, 1001, 1003, 1015, 1032, 1034, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "int64": [4, 13, 14, 55, 72, 171, 172, 280, 313, 361, 395, 416, 426, 441, 447, 449, 587, 639, 713, 714, 836, 865, 1039, 1042, 1044, 1046, 1047, 1048], "cannot": [4, 13, 41, 57, 76, 83, 96, 101, 121, 171, 172, 185, 201, 219, 237, 307, 339, 347, 369, 380, 382, 387, 395, 396, 408, 409, 410, 412, 413, 415, 416, 418, 464, 520, 537, 538, 539, 542, 546, 609, 612, 613, 614, 616, 618, 619, 621, 622, 624, 650, 654, 681, 691, 710, 716, 776, 800, 801, 847, 848, 850, 851, 852, 860, 861, 870, 871, 882, 918, 920, 921, 977, 978, 982, 984, 985, 989, 994, 998, 1003, 1004, 1009, 1013, 1019, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "train": [4, 5, 6, 7, 8, 10, 11, 13, 17, 25, 27, 28, 31, 32, 33, 34, 55, 57, 59, 65, 66, 71, 72, 76, 86, 87, 91, 93, 96, 99, 100, 101, 111, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 133, 134, 135, 139, 147, 153, 154, 155, 158, 159, 160, 161, 162, 168, 170, 171, 172, 173, 174, 177, 184, 185, 187, 189, 190, 192, 193, 194, 196, 197, 200, 201, 202, 203, 204, 208, 209, 210, 213, 215, 216, 219, 230, 233, 235, 239, 249, 251, 255, 256, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 281, 283, 285, 288, 291, 292, 293, 294, 296, 298, 301, 302, 303, 307, 309, 311, 312, 317, 320, 325, 326, 327, 330, 331, 332, 335, 336, 338, 346, 347, 354, 356, 359, 360, 362, 363, 367, 368, 369, 373, 376, 378, 383, 386, 393, 394, 395, 402, 404, 406, 408, 409, 410, 411, 413, 415, 416, 417, 418, 420, 436, 439, 440, 442, 443, 446, 448, 450, 451, 452, 453, 458, 464, 468, 469, 471, 472, 473, 474, 475, 481, 482, 483, 484, 486, 487, 488, 492, 495, 496, 497, 499, 503, 523, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 626, 627, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 686, 687, 688, 690, 691, 695, 702, 739, 786, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 860, 865, 866, 869, 870, 873, 874, 878, 879, 880, 881, 885, 886, 888, 889, 890, 891, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 914, 962, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 998, 1002, 1003, 1004, 1008, 1009, 1010, 1011, 1013, 1016, 1019, 1020, 1026, 1028, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "learn": [4, 6, 7, 8, 9, 10, 13, 15, 17, 18, 21, 26, 27, 28, 32, 33, 35, 37, 38, 49, 50, 52, 53, 54, 56, 57, 68, 69, 71, 72, 76, 82, 83, 95, 101, 106, 108, 111, 113, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 131, 132, 133, 139, 140, 141, 142, 147, 149, 150, 153, 156, 158, 162, 165, 166, 169, 173, 174, 175, 176, 178, 182, 187, 189, 190, 196, 201, 202, 203, 205, 208, 215, 219, 225, 226, 227, 228, 229, 230, 232, 234, 235, 238, 239, 240, 241, 242, 243, 244, 255, 259, 261, 262, 265, 267, 268, 270, 271, 274, 276, 278, 280, 283, 285, 287, 289, 290, 291, 292, 293, 294, 298, 300, 303, 304, 305, 307, 308, 312, 314, 316, 324, 325, 329, 331, 332, 338, 343, 345, 347, 352, 353, 354, 357, 358, 359, 360, 363, 368, 370, 373, 374, 375, 376, 378, 380, 384, 387, 388, 389, 390, 394, 395, 397, 399, 402, 403, 404, 405, 406, 408, 409, 410, 412, 414, 416, 417, 418, 422, 423, 425, 426, 427, 430, 431, 432, 436, 437, 438, 441, 442, 445, 446, 448, 449, 456, 458, 463, 464, 466, 467, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 507, 508, 509, 511, 513, 514, 515, 516, 517, 519, 520, 521, 523, 524, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 570, 575, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 598, 601, 602, 609, 610, 613, 618, 621, 625, 627, 629, 631, 633, 637, 639, 640, 642, 643, 644, 645, 647, 651, 656, 657, 667, 668, 675, 676, 677, 679, 687, 688, 689, 690, 691, 695, 699, 700, 701, 707, 712, 716, 717, 720, 721, 722, 724, 733, 739, 740, 741, 746, 754, 776, 777, 778, 783, 786, 793, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 834, 835, 836, 837, 838, 839, 842, 844, 849, 856, 857, 858, 859, 860, 861, 863, 865, 867, 870, 872, 873, 874, 875, 878, 879, 880, 881, 884, 892, 893, 895, 896, 897, 898, 900, 901, 902, 905, 908, 909, 910, 911, 923, 931, 932, 954, 955, 956, 977, 978, 980, 981, 982, 984, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 998, 999, 1002, 1003, 1004, 1005, 1007, 1010, 1012, 1017, 1019, 1020, 1026, 1028, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "simplifi": [4, 72, 189, 339, 380, 382, 386, 408, 411, 514, 561, 859, 860, 988, 990, 998], "represent": [4, 12, 18, 21, 27, 54, 72, 73, 96, 99, 118, 120, 121, 129, 130, 131, 133, 136, 147, 158, 171, 173, 177, 182, 185, 222, 223, 224, 231, 233, 237, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 280, 295, 304, 313, 319, 321, 322, 328, 353, 354, 361, 363, 373, 375, 384, 395, 402, 408, 409, 413, 414, 415, 462, 530, 534, 536, 539, 541, 547, 565, 587, 589, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 629, 642, 645, 651, 657, 658, 659, 661, 665, 666, 667, 675, 676, 677, 767, 795, 796, 803, 819, 856, 869, 873, 874, 878, 880, 893, 900, 912, 914, 917, 933, 954, 980, 985, 987, 989, 991, 992, 993, 995, 998, 1003, 1009, 1015, 1016, 1018, 1022, 1024, 1031, 1032, 1035, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "collaps": [4, 172, 240, 307, 339, 393], "those": [4, 7, 12, 18, 20, 56, 61, 72, 114, 126, 150, 162, 170, 172, 173, 174, 201, 203, 205, 219, 227, 234, 237, 239, 240, 253, 256, 262, 265, 268, 280, 302, 307, 312, 336, 339, 352, 353, 354, 367, 368, 375, 381, 383, 385, 386, 387, 388, 393, 395, 396, 398, 405, 406, 408, 412, 413, 415, 416, 418, 447, 449, 460, 463, 467, 493, 494, 495, 502, 556, 557, 563, 564, 568, 569, 580, 691, 696, 711, 717, 734, 797, 800, 801, 809, 811, 818, 842, 843, 844, 846, 848, 849, 850, 851, 852, 900, 901, 902, 905, 908, 909, 910, 911, 948, 977, 980, 984, 987, 988, 990, 991, 992, 995, 998, 1004, 1007, 1008, 1013, 1015, 1024, 1031, 1034, 1037, 1038, 1039, 1044, 1045, 1046, 1047], "replac": [4, 26, 81, 100, 113, 153, 160, 165, 172, 187, 202, 265, 285, 309, 314, 319, 341, 379, 381, 383, 385, 387, 390, 395, 402, 409, 412, 415, 416, 440, 444, 463, 502, 514, 554, 555, 562, 581, 587, 588, 589, 590, 606, 607, 626, 629, 633, 638, 640, 726, 783, 803, 809, 811, 819, 859, 860, 863, 883, 896, 903, 959, 962, 977, 978, 980, 984, 988, 998, 1003, 1004, 1008, 1009, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1048], "to_replac": [4, 172], "valu": [4, 5, 7, 11, 12, 13, 14, 17, 18, 20, 21, 22, 27, 28, 33, 38, 41, 43, 45, 47, 54, 56, 61, 62, 63, 67, 72, 74, 76, 79, 81, 83, 96, 99, 107, 111, 113, 115, 117, 118, 119, 120, 121, 123, 126, 127, 129, 130, 132, 133, 145, 146, 149, 153, 156, 157, 159, 161, 167, 170, 171, 172, 173, 174, 177, 180, 181, 183, 185, 187, 189, 190, 191, 192, 194, 199, 201, 202, 203, 205, 207, 216, 219, 221, 222, 224, 225, 228, 230, 231, 232, 233, 234, 235, 236, 240, 243, 244, 247, 253, 256, 258, 260, 262, 263, 265, 267, 268, 269, 271, 273, 274, 275, 277, 285, 288, 298, 301, 302, 304, 307, 308, 309, 310, 311, 312, 313, 314, 319, 329, 339, 343, 344, 347, 352, 353, 354, 357, 363, 367, 368, 369, 370, 373, 374, 375, 376, 378, 382, 383, 384, 386, 387, 388, 390, 393, 394, 395, 397, 398, 399, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 419, 420, 421, 422, 431, 432, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 486, 489, 490, 492, 495, 496, 497, 500, 507, 508, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 696, 697, 698, 699, 700, 701, 703, 704, 706, 707, 708, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 767, 769, 772, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 808, 809, 811, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 915, 917, 918, 919, 920, 921, 924, 925, 926, 927, 929, 937, 939, 945, 948, 949, 950, 951, 952, 956, 964, 965, 966, 977, 980, 981, 982, 983, 984, 985, 987, 989, 990, 991, 992, 993, 994, 995, 999, 1001, 1002, 1003, 1010, 1011, 1013, 1015, 1020, 1022, 1023, 1024, 1025, 1026, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "inplac": [4, 172, 219, 240, 274, 453, 481, 482, 483, 484, 855, 863, 866, 869, 870, 872, 876, 877, 878, 880, 883, 885, 886, 887, 888, 889, 890, 891, 961, 964, 965, 966, 970, 971, 1040], "1422": 4, "expect": [4, 5, 10, 13, 25, 38, 45, 54, 87, 93, 101, 113, 116, 118, 120, 123, 126, 130, 147, 153, 159, 168, 169, 173, 175, 187, 192, 201, 202, 203, 205, 209, 219, 234, 237, 240, 241, 248, 249, 252, 253, 269, 285, 312, 347, 352, 353, 363, 367, 368, 381, 383, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 397, 399, 404, 406, 408, 409, 410, 412, 415, 416, 417, 431, 463, 464, 466, 467, 468, 481, 482, 483, 495, 522, 531, 535, 537, 540, 551, 553, 554, 555, 556, 557, 559, 561, 562, 563, 564, 565, 566, 567, 569, 571, 584, 585, 587, 588, 590, 594, 596, 605, 610, 626, 631, 632, 634, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 669, 671, 672, 673, 674, 677, 678, 694, 703, 704, 715, 733, 786, 792, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 846, 850, 851, 852, 853, 858, 861, 866, 873, 874, 877, 880, 881, 890, 891, 898, 900, 901, 902, 903, 904, 905, 906, 909, 911, 951, 977, 984, 987, 988, 990, 994, 998, 1002, 1003, 1004, 1010, 1012, 1020, 1023, 1024, 1026, 1031, 1032, 1033, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "balanc": [4, 6, 13, 54, 67, 73, 113, 119, 149, 168, 205, 206, 255, 260, 263, 265, 266, 278, 307, 369, 393, 395, 406, 412, 413, 415, 501, 514, 533, 539, 540, 546, 556, 560, 563, 639, 657, 658, 665, 667, 673, 674, 675, 702, 707, 727, 741, 780, 785, 797, 798, 815, 860, 900, 902, 905, 908, 910, 925, 926, 977, 1003, 1004, 1010, 1020, 1031, 1033, 1036, 1037, 1040, 1041, 1045], "fall": [4, 13, 126, 160, 261, 262, 381, 383, 407, 408, 416, 433, 445, 446, 507, 508, 725, 726, 792, 877, 889, 987, 988, 998, 1015, 1023, 1040], "4496": [4, 13], "4409": [4, 13], "4242": [4, 13], "winter": [4, 13], "4232": [4, 13], "order": [4, 14, 21, 25, 48, 56, 65, 66, 73, 79, 90, 106, 121, 122, 123, 127, 142, 158, 170, 171, 174, 177, 190, 194, 197, 201, 202, 207, 215, 219, 224, 234, 237, 240, 244, 249, 257, 260, 262, 269, 283, 304, 307, 312, 313, 314, 319, 320, 347, 352, 354, 363, 367, 368, 376, 381, 383, 386, 387, 390, 395, 398, 399, 402, 408, 409, 410, 412, 413, 414, 415, 416, 418, 420, 439, 442, 445, 446, 448, 449, 454, 455, 456, 458, 463, 487, 488, 489, 494, 496, 514, 533, 534, 538, 539, 540, 542, 546, 550, 552, 554, 555, 556, 557, 558, 562, 563, 564, 565, 566, 580, 587, 590, 592, 593, 596, 605, 606, 607, 609, 621, 626, 630, 639, 657, 658, 664, 675, 684, 685, 687, 688, 692, 696, 698, 699, 701, 703, 711, 712, 717, 724, 727, 728, 736, 738, 739, 740, 752, 754, 776, 780, 781, 782, 785, 786, 787, 792, 797, 798, 800, 801, 802, 804, 808, 811, 815, 816, 821, 828, 829, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 850, 857, 860, 871, 873, 874, 875, 879, 880, 881, 884, 885, 886, 888, 889, 890, 891, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 920, 921, 926, 937, 952, 978, 984, 985, 988, 989, 991, 992, 998, 1001, 1002, 1003, 1004, 1009, 1019, 1021, 1022, 1024, 1031, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "sensit": [4, 45, 56, 81, 82, 116, 126, 172, 203, 204, 205, 230, 307, 339, 368, 369, 396, 410, 415, 451, 461, 691, 711, 712, 786, 880, 983, 984, 985, 987, 988, 992, 994, 1002, 1003, 1015, 1023, 1035], "splitter": [4, 323, 395, 399, 412, 436, 471, 563, 564, 566, 567, 593, 601, 646, 650, 652, 654, 658, 660, 662, 664, 672, 674, 797, 799, 800, 801, 802, 803, 811, 812, 813, 814, 816, 817, 819, 820, 821, 822, 823, 824, 825, 827, 831, 834, 908, 909, 910, 911, 1004, 1009, 1037, 1038, 1039, 1040, 1047, 1048], "evalu": [4, 5, 6, 10, 11, 25, 33, 37, 39, 43, 44, 50, 56, 60, 64, 65, 69, 72, 73, 99, 113, 119, 120, 121, 123, 124, 126, 145, 146, 156, 168, 174, 177, 181, 190, 203, 208, 219, 229, 230, 245, 255, 256, 259, 260, 261, 262, 265, 267, 268, 269, 271, 273, 274, 276, 278, 283, 292, 294, 298, 307, 312, 314, 319, 323, 330, 339, 343, 352, 363, 370, 374, 376, 383, 387, 395, 397, 407, 409, 416, 417, 418, 446, 448, 463, 465, 487, 490, 491, 492, 495, 508, 519, 535, 550, 560, 561, 562, 566, 567, 590, 593, 601, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 630, 631, 632, 633, 646, 652, 658, 672, 674, 696, 698, 700, 701, 702, 703, 704, 710, 712, 713, 714, 716, 717, 724, 725, 734, 735, 740, 752, 753, 754, 755, 784, 793, 795, 796, 797, 800, 801, 803, 811, 819, 821, 822, 823, 824, 825, 826, 827, 831, 837, 840, 841, 846, 858, 860, 861, 867, 870, 873, 874, 878, 879, 880, 885, 886, 888, 889, 890, 891, 902, 905, 908, 923, 931, 962, 980, 984, 986, 990, 991, 994, 995, 996, 999, 1002, 1004, 1008, 1010, 1013, 1015, 1016, 1019, 1020, 1022, 1025, 1026, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "realist": [4, 8, 264, 271, 272, 336, 376, 988], "gap": [4, 13, 352, 376, 412, 470, 471, 477, 587, 645, 646, 651, 652, 659, 660, 661, 662, 680, 683, 818, 908, 909, 910, 911, 984, 985, 1039, 1043, 1045], "between": [4, 5, 8, 9, 11, 12, 13, 21, 35, 38, 39, 40, 41, 43, 44, 54, 61, 62, 67, 86, 91, 99, 101, 105, 113, 116, 119, 123, 126, 145, 153, 158, 159, 161, 168, 170, 171, 172, 173, 180, 185, 187, 192, 196, 197, 201, 202, 203, 205, 206, 209, 219, 222, 230, 235, 237, 240, 255, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 278, 280, 283, 287, 291, 292, 294, 295, 307, 312, 314, 320, 329, 339, 343, 346, 347, 352, 353, 354, 361, 363, 367, 368, 376, 381, 383, 390, 393, 394, 395, 396, 399, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 429, 439, 440, 443, 444, 445, 449, 451, 452, 453, 455, 456, 457, 462, 468, 469, 470, 471, 472, 473, 474, 475, 490, 492, 493, 494, 495, 496, 497, 501, 513, 514, 520, 523, 526, 533, 535, 536, 537, 538, 539, 540, 545, 546, 548, 552, 553, 558, 559, 561, 562, 563, 564, 583, 587, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 601, 603, 604, 605, 606, 607, 608, 610, 619, 626, 631, 632, 633, 638, 641, 644, 645, 646, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 669, 675, 677, 678, 680, 683, 687, 689, 691, 693, 694, 695, 698, 700, 702, 703, 704, 706, 708, 709, 713, 714, 715, 716, 718, 722, 723, 724, 727, 728, 729, 732, 734, 735, 741, 750, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 784, 785, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 802, 806, 814, 815, 816, 817, 818, 825, 826, 828, 830, 842, 843, 844, 846, 847, 848, 850, 851, 852, 853, 854, 857, 858, 864, 867, 868, 870, 871, 873, 874, 877, 878, 879, 881, 886, 889, 890, 894, 900, 901, 905, 908, 909, 910, 911, 913, 934, 945, 946, 977, 980, 982, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1005, 1009, 1010, 1022, 1023, 1031, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "side": [4, 17, 28, 60, 126, 194, 205, 219, 224, 233, 307, 343, 352, 363, 376, 393, 406, 409, 412, 413, 416, 514, 984, 985, 988, 990, 1003, 1040], "split": [4, 5, 6, 11, 13, 15, 18, 25, 27, 32, 33, 71, 101, 113, 118, 119, 120, 122, 125, 126, 127, 128, 129, 139, 146, 150, 170, 171, 174, 185, 196, 197, 201, 204, 209, 219, 231, 237, 240, 248, 249, 256, 257, 260, 262, 267, 269, 272, 280, 288, 294, 301, 303, 308, 309, 314, 321, 323, 329, 339, 352, 354, 361, 376, 381, 388, 394, 395, 398, 399, 406, 408, 413, 415, 416, 417, 436, 441, 442, 471, 472, 478, 479, 496, 530, 536, 538, 541, 545, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 587, 588, 590, 593, 601, 646, 650, 652, 654, 660, 662, 664, 672, 674, 694, 703, 704, 716, 729, 735, 755, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 834, 840, 841, 857, 858, 881, 885, 886, 888, 889, 890, 891, 908, 909, 910, 911, 959, 977, 980, 984, 985, 991, 994, 995, 996, 998, 1002, 1004, 1009, 1015, 1019, 1020, 1022, 1023, 1024, 1026, 1031, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "limit": [4, 8, 18, 38, 43, 58, 67, 83, 113, 120, 121, 127, 133, 165, 171, 172, 173, 180, 201, 202, 218, 234, 269, 309, 313, 320, 347, 354, 363, 368, 382, 383, 386, 393, 395, 396, 406, 408, 411, 413, 417, 445, 462, 467, 558, 559, 560, 561, 631, 649, 657, 658, 678, 681, 682, 687, 776, 818, 848, 850, 851, 852, 873, 874, 898, 902, 903, 904, 905, 906, 956, 977, 984, 985, 987, 988, 995, 996, 998, 1009, 1015, 1026, 1039, 1041, 1044, 1045, 1048], "cv": [4, 12, 13, 25, 26, 27, 55, 72, 73, 74, 75, 79, 104, 119, 123, 125, 139, 140, 149, 165, 166, 171, 190, 200, 203, 258, 260, 261, 262, 263, 264, 265, 267, 268, 272, 276, 280, 313, 322, 339, 347, 394, 395, 399, 406, 412, 415, 417, 436, 471, 566, 567, 593, 601, 646, 650, 652, 654, 658, 660, 662, 664, 672, 674, 797, 799, 800, 801, 802, 803, 811, 812, 813, 814, 816, 817, 819, 820, 821, 822, 823, 824, 825, 827, 831, 834, 881, 908, 909, 977, 980, 983, 984, 988, 998, 1009, 1019, 1020, 1024, 1033, 1037, 1038, 1039, 1040, 1041, 1043, 1045, 1047, 1048], "fold": [4, 68, 75, 79, 119, 122, 125, 139, 149, 171, 190, 249, 257, 258, 260, 262, 263, 265, 272, 314, 329, 347, 363, 376, 381, 384, 385, 394, 395, 399, 408, 417, 436, 471, 492, 535, 566, 567, 593, 601, 646, 650, 652, 654, 658, 660, 662, 664, 672, 674, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 831, 834, 881, 902, 905, 977, 984, 988, 998, 1003, 1019, 1031, 1033, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1048], "1000": [4, 7, 8, 15, 27, 32, 38, 51, 73, 76, 86, 106, 116, 118, 120, 125, 126, 130, 135, 141, 145, 159, 177, 187, 193, 204, 224, 233, 234, 236, 247, 251, 260, 262, 268, 271, 273, 290, 292, 308, 311, 318, 319, 321, 323, 340, 341, 348, 352, 353, 386, 387, 394, 406, 416, 436, 472, 478, 479, 530, 531, 536, 538, 541, 542, 544, 545, 547, 552, 563, 631, 645, 646, 650, 651, 652, 654, 659, 660, 661, 662, 665, 666, 667, 671, 675, 676, 677, 686, 691, 697, 700, 762, 877, 889, 895, 900, 901, 977, 981, 1003, 1019, 1022, 1038, 1040], "datapoint": [4, 43, 53, 57, 157, 160, 184, 235, 236, 240, 257, 262, 283, 345, 418, 445, 501, 556, 557, 558, 559, 563, 564, 565, 610, 908, 909, 910, 911, 981], "should": [4, 5, 6, 8, 9, 13, 15, 18, 26, 28, 32, 38, 54, 111, 113, 116, 119, 123, 126, 150, 165, 171, 177, 180, 181, 185, 201, 203, 219, 230, 235, 236, 237, 240, 262, 265, 268, 269, 271, 280, 285, 308, 309, 314, 328, 339, 347, 353, 363, 367, 368, 369, 376, 379, 380, 381, 383, 385, 386, 388, 389, 390, 394, 395, 398, 399, 402, 404, 406, 408, 410, 412, 413, 415, 416, 417, 418, 419, 420, 422, 436, 439, 441, 442, 443, 444, 446, 448, 449, 451, 453, 456, 457, 458, 461, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 486, 495, 502, 507, 508, 515, 520, 522, 523, 526, 531, 532, 533, 535, 537, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 584, 585, 587, 588, 589, 590, 592, 593, 596, 601, 606, 607, 609, 610, 619, 626, 627, 628, 630, 631, 632, 634, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 686, 688, 689, 690, 691, 692, 693, 694, 695, 700, 708, 725, 726, 740, 764, 769, 772, 776, 777, 778, 779, 780, 783, 786, 787, 790, 798, 799, 804, 805, 806, 807, 814, 815, 816, 817, 822, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 857, 858, 860, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 879, 880, 881, 883, 887, 890, 891, 892, 893, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 920, 924, 926, 929, 937, 945, 949, 954, 959, 962, 963, 964, 965, 966, 967, 968, 969, 977, 978, 982, 983, 984, 985, 988, 989, 991, 993, 994, 995, 998, 1001, 1002, 1003, 1004, 1009, 1012, 1013, 1020, 1024, 1028, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "enough": [4, 13, 38, 45, 63, 119, 122, 153, 165, 172, 173, 190, 201, 235, 238, 240, 311, 352, 354, 363, 379, 381, 385, 396, 406, 407, 408, 410, 412, 415, 566, 567, 588, 797, 800, 801, 803, 811, 824, 937, 977, 982, 985, 987, 994, 998, 1003, 1008, 1013, 1037, 1047, 1048], "quantifi": [4, 38, 50, 79, 158, 219, 269, 383, 395, 403, 407, 572, 863, 983, 996, 998, 1026], "repres": [4, 8, 10, 12, 13, 15, 21, 27, 33, 35, 45, 49, 50, 51, 54, 92, 96, 98, 105, 106, 120, 121, 129, 171, 180, 188, 193, 203, 205, 206, 210, 224, 226, 235, 240, 250, 256, 259, 262, 265, 269, 290, 309, 343, 352, 354, 361, 369, 373, 376, 378, 383, 393, 394, 395, 396, 402, 406, 408, 412, 413, 414, 415, 416, 417, 437, 441, 445, 451, 462, 469, 470, 471, 472, 473, 474, 475, 487, 489, 490, 491, 493, 495, 497, 499, 500, 501, 503, 504, 509, 526, 533, 535, 537, 539, 540, 546, 554, 562, 580, 587, 590, 628, 631, 633, 639, 675, 677, 696, 698, 700, 728, 741, 787, 797, 799, 810, 811, 814, 817, 823, 825, 826, 829, 830, 836, 842, 843, 844, 846, 847, 848, 850, 851, 852, 857, 858, 867, 873, 874, 897, 900, 901, 920, 921, 941, 946, 978, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 996, 998, 999, 1001, 1002, 1004, 1015, 1020, 1021, 1023, 1037, 1039, 1042, 1043, 1046], "bit": [4, 13, 49, 54, 79, 99, 199, 203, 280, 307, 339, 353, 363, 367, 376, 379, 415, 416, 581, 588, 657, 830, 920, 921, 985, 989, 1007, 1017, 1024, 1031, 1034, 1037, 1039, 1040, 1043, 1044, 1045], "less": [4, 5, 8, 53, 54, 61, 93, 96, 99, 107, 113, 120, 126, 127, 153, 160, 171, 183, 185, 201, 203, 205, 236, 240, 248, 250, 262, 263, 271, 273, 276, 308, 311, 312, 313, 319, 321, 343, 352, 353, 363, 367, 369, 376, 381, 383, 393, 395, 408, 412, 413, 415, 416, 420, 438, 440, 442, 444, 447, 449, 451, 456, 459, 461, 462, 481, 482, 483, 495, 514, 530, 534, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 589, 595, 618, 626, 633, 646, 660, 675, 677, 691, 700, 720, 721, 722, 723, 734, 750, 762, 777, 778, 783, 793, 795, 796, 799, 800, 801, 807, 824, 835, 836, 837, 839, 840, 841, 842, 843, 844, 846, 848, 849, 850, 851, 852, 863, 875, 877, 878, 880, 883, 889, 890, 900, 901, 908, 909, 910, 911, 926, 940, 977, 978, 980, 981, 982, 985, 987, 988, 991, 993, 998, 1002, 1003, 1004, 1008, 1022, 1024, 1031, 1032, 1034, 1035, 1037, 1038, 1039, 1041, 1045, 1046, 1048], "than": [4, 5, 7, 11, 12, 14, 20, 28, 31, 32, 41, 45, 48, 54, 56, 73, 76, 81, 83, 87, 93, 96, 99, 101, 104, 113, 115, 116, 118, 119, 120, 122, 123, 126, 150, 153, 159, 162, 165, 171, 172, 173, 177, 180, 185, 187, 190, 201, 203, 207, 217, 218, 219, 226, 230, 236, 237, 238, 240, 248, 259, 260, 262, 263, 264, 265, 268, 271, 280, 283, 285, 291, 292, 304, 307, 311, 312, 313, 314, 319, 321, 323, 327, 343, 352, 353, 354, 363, 367, 368, 369, 375, 376, 377, 380, 381, 383, 386, 387, 389, 395, 396, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 418, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 451, 453, 456, 459, 462, 463, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 492, 493, 495, 508, 513, 514, 522, 530, 533, 534, 535, 536, 537, 539, 540, 541, 543, 546, 547, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 572, 580, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 626, 627, 629, 633, 639, 641, 642, 643, 644, 645, 646, 651, 652, 654, 657, 658, 659, 660, 661, 662, 665, 666, 667, 670, 671, 673, 675, 676, 677, 678, 681, 686, 691, 693, 695, 703, 704, 711, 719, 720, 721, 722, 733, 734, 737, 762, 777, 778, 779, 781, 783, 793, 795, 796, 797, 800, 801, 807, 811, 816, 818, 821, 822, 823, 824, 825, 828, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 854, 857, 858, 863, 873, 874, 875, 877, 878, 880, 883, 889, 890, 894, 897, 900, 901, 902, 905, 906, 908, 909, 910, 911, 912, 926, 937, 939, 940, 945, 951, 959, 962, 977, 978, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 998, 1002, 1003, 1004, 1008, 1009, 1015, 1019, 1022, 1023, 1024, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "half": [4, 25, 99, 235, 239, 260, 262, 274, 376, 377, 413, 462, 521, 561, 592, 596, 601, 768, 859, 867, 988, 991, 1004], "contigu": [4, 22, 383, 393, 405, 412, 416, 442, 446, 448, 458, 645, 646, 651, 652, 659, 660, 661, 662, 680, 683, 779, 816, 840, 841, 900, 902, 903, 904, 905, 906, 1003, 1034, 1041, 1045], "model_select": [4, 5, 6, 7, 10, 13, 25, 26, 28, 32, 33, 55, 72, 73, 74, 75, 76, 79, 87, 101, 104, 113, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 132, 133, 139, 140, 146, 147, 149, 153, 165, 166, 168, 170, 171, 173, 174, 177, 185, 196, 201, 203, 208, 209, 216, 217, 219, 231, 236, 240, 242, 243, 244, 249, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 283, 287, 288, 289, 293, 294, 301, 303, 304, 309, 311, 312, 313, 314, 317, 318, 319, 322, 329, 330, 339, 342, 347, 357, 361, 363, 370, 381, 383, 386, 394, 395, 399, 404, 409, 412, 415, 436, 437, 557, 559, 566, 567, 578, 658, 696, 697, 699, 701, 740, 828, 831, 849, 857, 858, 860, 908, 909, 910, 911, 956, 977, 978, 983, 988, 990, 991, 996, 998, 1003, 1009, 1010, 1019, 1020, 1024, 1028, 1035, 1037, 1038], "timeseriessplit": [4, 13, 185, 257, 412, 1037, 1038, 1043], "ts_cv": [4, 13], "n_split": [4, 13, 119, 125, 165, 166, 171, 249, 257, 262, 264, 267, 272, 280, 329, 339, 347, 363, 412, 798, 799, 800, 801, 802, 804, 805, 806, 807, 810, 812, 813, 814, 815, 816, 817, 818, 823, 1019, 1037, 1039], "5": [4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 20, 22, 25, 26, 27, 32, 33, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 65, 66, 67, 68, 71, 72, 74, 75, 76, 80, 81, 82, 83, 84, 86, 87, 93, 96, 97, 98, 99, 100, 102, 103, 104, 106, 111, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 139, 140, 142, 145, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 175, 177, 181, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 195, 196, 198, 199, 201, 202, 203, 204, 207, 209, 212, 213, 214, 215, 216, 217, 219, 223, 224, 225, 227, 230, 233, 234, 235, 236, 238, 239, 240, 241, 242, 244, 247, 248, 249, 250, 251, 252, 253, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 273, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 297, 298, 301, 302, 303, 304, 307, 309, 310, 311, 312, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 329, 330, 331, 337, 338, 339, 340, 341, 343, 344, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 362, 363, 376, 378, 379, 381, 383, 386, 387, 393, 394, 395, 398, 400, 401, 406, 408, 409, 412, 413, 415, 416, 417, 418, 419, 420, 436, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 461, 463, 465, 468, 471, 477, 481, 482, 483, 484, 489, 492, 493, 503, 515, 516, 520, 522, 523, 525, 527, 530, 532, 533, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 551, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 581, 591, 592, 593, 596, 601, 609, 612, 613, 614, 615, 618, 619, 621, 622, 624, 626, 627, 628, 629, 630, 631, 632, 633, 637, 640, 642, 643, 644, 645, 646, 650, 651, 652, 654, 655, 656, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 671, 675, 676, 677, 679, 680, 683, 687, 688, 690, 691, 694, 695, 698, 702, 704, 706, 708, 711, 712, 720, 721, 722, 724, 725, 726, 728, 733, 736, 737, 739, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 767, 779, 780, 782, 783, 785, 786, 787, 788, 789, 792, 794, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 857, 858, 859, 860, 865, 866, 867, 869, 870, 872, 873, 874, 875, 876, 877, 879, 880, 881, 888, 889, 894, 900, 901, 902, 903, 904, 905, 906, 908, 910, 926, 935, 936, 937, 939, 941, 942, 951, 952, 956, 959, 977, 978, 980, 983, 984, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 998, 1000, 1002, 1003, 1006, 1011, 1015, 1019, 1020, 1022, 1023, 1024, 1026, 1027, 1029, 1032, 1033, 1034, 1036, 1038, 1039, 1041, 1045, 1046, 1047], "48": [4, 13, 46, 86, 103, 158, 244, 313, 378, 387, 408, 509, 596, 698, 744, 824, 835, 977, 990, 998, 1027], "max_train_s": [4, 13, 412, 818, 1038], "10000": [4, 11, 13, 31, 44, 64, 73, 74, 127, 139, 187, 194, 201, 209, 217, 234, 236, 275, 319, 336, 338, 363, 369, 415, 416, 560, 561, 643, 678, 877, 906, 1000, 1020, 1024], "test_siz": [4, 5, 6, 10, 13, 25, 26, 28, 32, 33, 72, 118, 124, 125, 127, 128, 132, 170, 177, 185, 196, 201, 208, 209, 216, 217, 259, 260, 264, 269, 271, 275, 283, 293, 294, 301, 303, 304, 309, 311, 312, 319, 339, 347, 363, 386, 412, 697, 799, 814, 817, 818, 826, 828, 849, 978, 990, 991, 1019, 1020, 1031, 1032, 1037, 1038, 1043], "manual": [4, 47, 56, 171, 172, 174, 202, 212, 264, 285, 329, 337, 352, 354, 367, 368, 376, 381, 385, 386, 394, 398, 408, 412, 413, 414, 436, 448, 566, 850, 873, 879, 977, 982, 983, 984, 987, 988, 991, 998, 1009, 1015, 1016, 1024, 1039, 1041, 1047], "inspect": [4, 9, 31, 32, 35, 57, 62, 115, 120, 127, 129, 130, 134, 147, 153, 158, 159, 171, 172, 173, 174, 175, 184, 193, 210, 215, 241, 262, 265, 274, 288, 293, 296, 312, 317, 318, 319, 320, 322, 335, 336, 337, 338, 340, 341, 343, 352, 358, 368, 370, 383, 395, 408, 409, 415, 416, 463, 552, 553, 556, 557, 558, 559, 563, 564, 565, 829, 860, 861, 908, 909, 910, 911, 976, 988, 989, 992, 995, 996, 1003, 1008, 1010, 1024, 1026, 1034], "variou": [4, 12, 37, 38, 40, 42, 56, 57, 59, 61, 62, 63, 69, 82, 86, 90, 99, 148, 168, 171, 179, 209, 211, 220, 221, 222, 223, 224, 228, 234, 280, 285, 302, 311, 318, 326, 327, 352, 354, 361, 363, 367, 375, 376, 377, 378, 381, 383, 386, 394, 396, 406, 407, 408, 410, 436, 440, 471, 501, 513, 514, 524, 556, 557, 558, 559, 560, 561, 563, 564, 566, 567, 568, 569, 593, 601, 646, 650, 652, 654, 657, 660, 662, 664, 665, 667, 672, 674, 675, 690, 691, 698, 797, 800, 801, 803, 811, 819, 820, 821, 822, 823, 824, 825, 826, 827, 860, 900, 901, 977, 978, 985, 988, 991, 995, 998, 1002, 1004, 1008, 1010, 1013, 1023, 1024, 1031, 1034, 1035], "check": [4, 5, 8, 18, 47, 54, 57, 100, 111, 119, 133, 153, 168, 170, 172, 173, 187, 189, 190, 201, 223, 237, 248, 255, 271, 278, 280, 320, 328, 361, 367, 368, 379, 380, 381, 382, 383, 384, 385, 387, 388, 390, 391, 393, 395, 398, 399, 402, 407, 409, 422, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 472, 473, 474, 475, 481, 482, 483, 484, 501, 507, 508, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 580, 581, 582, 587, 588, 589, 590, 591, 594, 595, 596, 597, 598, 599, 602, 609, 610, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 675, 676, 677, 678, 679, 680, 686, 687, 688, 689, 690, 691, 692, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 824, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 920, 921, 922, 931, 932, 943, 944, 945, 949, 950, 972, 973, 974, 976, 983, 984, 985, 988, 1003, 1004, 1009, 1010, 1013, 1026, 1031, 1032, 1034, 1038, 1042, 1043, 1044, 1045, 1046, 1048], "all_split": [4, 13], "list": [4, 8, 10, 12, 13, 14, 17, 18, 20, 21, 26, 33, 41, 45, 50, 63, 71, 106, 107, 117, 119, 125, 133, 140, 174, 205, 240, 241, 257, 260, 262, 263, 265, 266, 271, 275, 294, 309, 313, 317, 318, 319, 320, 321, 322, 323, 330, 342, 353, 354, 369, 375, 376, 379, 380, 381, 383, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 398, 399, 406, 408, 409, 412, 414, 415, 416, 431, 433, 436, 449, 455, 456, 463, 464, 465, 470, 471, 477, 481, 482, 483, 487, 488, 489, 490, 491, 495, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 522, 531, 549, 550, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 587, 588, 590, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 631, 633, 634, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 669, 671, 672, 677, 678, 680, 683, 685, 691, 695, 696, 698, 709, 711, 712, 715, 717, 723, 731, 740, 744, 752, 776, 779, 781, 786, 792, 795, 796, 797, 800, 801, 803, 808, 809, 811, 819, 821, 822, 823, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 857, 858, 859, 860, 861, 862, 864, 868, 871, 873, 874, 879, 881, 897, 901, 903, 906, 908, 909, 910, 911, 914, 916, 920, 921, 922, 926, 928, 929, 930, 932, 940, 941, 943, 954, 959, 962, 972, 977, 978, 984, 988, 990, 991, 992, 995, 996, 999, 1004, 1006, 1008, 1009, 1013, 1015, 1019, 1021, 1024, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "train_0": 4, "test_0": 4, "iloc": [4, 13, 133, 171, 172, 219, 262, 288], "12379": 4, "25": [4, 5, 6, 7, 9, 10, 11, 13, 20, 25, 27, 43, 46, 55, 56, 81, 86, 92, 102, 104, 106, 117, 126, 133, 137, 146, 147, 154, 165, 171, 181, 191, 205, 227, 230, 249, 262, 298, 301, 304, 307, 309, 322, 326, 327, 352, 360, 363, 367, 387, 412, 415, 416, 443, 476, 500, 503, 569, 596, 677, 732, 794, 814, 826, 852, 870, 875, 877, 878, 881, 889, 890, 892, 893, 984, 988, 989, 991, 998, 1010, 1020, 1031, 1033, 1039, 1042], "760": [4, 59, 69, 350, 1010], "68": [4, 8, 13, 162, 192, 304, 326, 408, 534, 540, 589, 1031], "27": [4, 6, 13, 20, 32, 48, 55, 99, 108, 227, 326, 327, 348, 355, 378, 408, 416, 523, 712, 786, 787, 881, 901, 988, 998, 1010, 1023, 1031, 1033], "9993": [4, 652, 654, 1039], "12380": 4, "32": [4, 5, 13, 20, 52, 93, 170, 173, 239, 240, 321, 327, 375, 379, 386, 395, 405, 415, 416, 444, 563, 564, 581, 588, 633, 675, 879, 881, 920, 921, 953, 996, 998, 1023, 1031, 1034, 1037, 1039, 1040, 1043, 1044, 1045], "000": [4, 5, 16, 22, 26, 28, 43, 75, 110, 154, 173, 177, 234, 260, 262, 264, 299, 312, 320, 333, 352, 353, 363, 376, 387, 415, 416, 489, 560, 561, 643, 676, 1002, 1010, 1024, 1042], "77": [4, 6, 45, 150, 177, 240, 271, 327, 375, 378, 533, 706], "0028": 4, "12381": 4, "72": [4, 6, 7, 13, 119, 156, 386, 824], "9995": 4, "12382": 4, "240": [4, 45, 261, 278, 996, 1010, 1031], "82": [4, 31, 54, 59, 122, 147, 204, 296, 326, 786, 797, 811, 988, 991, 1020, 1031], "9980": [4, 1039], "12383": 4, "13374": 4, "34": [4, 126, 150, 153, 290, 304, 326, 327, 361, 378, 412, 519, 569, 596, 648, 666, 715, 762, 1020, 1031], "44": [4, 158, 171, 172, 185, 280, 289, 779, 881, 901, 904, 988, 995, 1031], "40": [4, 13, 15, 55, 67, 79, 91, 96, 102, 129, 135, 153, 185, 192, 193, 195, 218, 220, 224, 226, 238, 240, 251, 263, 291, 297, 303, 309, 326, 327, 337, 338, 340, 342, 344, 346, 361, 368, 376, 412, 445, 494, 516, 517, 840, 841, 845, 857, 858, 977, 989, 998, 1031, 1032], "150": [4, 6, 91, 93, 117, 126, 139, 223, 227, 228, 230, 275, 343, 347, 378, 412, 417, 503, 601, 821, 822, 823, 988, 1019, 1020, 1021], "53": [4, 47, 54, 240, 330, 408, 415, 534, 540, 790, 791], "15": [4, 6, 7, 8, 12, 13, 14, 15, 31, 32, 35, 41, 45, 54, 55, 62, 63, 67, 74, 75, 81, 83, 93, 99, 106, 117, 119, 122, 123, 126, 145, 147, 149, 153, 157, 165, 170, 171, 172, 190, 198, 203, 215, 219, 223, 224, 227, 228, 230, 245, 249, 250, 257, 265, 267, 270, 273, 274, 276, 289, 293, 301, 302, 307, 309, 311, 323, 327, 332, 337, 339, 342, 346, 349, 350, 358, 375, 376, 379, 381, 394, 398, 400, 401, 412, 415, 416, 439, 453, 489, 496, 530, 536, 554, 555, 597, 643, 651, 660, 662, 667, 675, 677, 691, 739, 815, 829, 852, 881, 977, 983, 984, 985, 988, 991, 992, 998, 1003, 1006, 1010, 1015, 1020, 1027, 1029, 1033, 1043, 1045, 1046], "0013": 4, "13375": 4, "39": [4, 8, 13, 150, 244, 376, 378, 379, 385, 408, 416, 494, 909], "49": [4, 13, 77, 150, 205, 240, 375, 376, 378, 386, 408, 449, 456, 712, 724, 754, 762, 795, 797, 881, 988, 998, 1034], "13376": 4, "0012": 4, "13377": 4, "36": [4, 6, 7, 8, 13, 14, 98, 150, 159, 171, 219, 240, 342, 378, 387, 415, 416, 554, 555, 569, 733, 988, 1024, 1031], "08": [4, 16, 45, 51, 99, 108, 137, 167, 171, 172, 185, 220, 245, 254, 304, 315, 378, 530, 542, 544, 562, 640, 657, 797, 857, 858, 879, 994, 1010], "910": 4, "42": [4, 5, 6, 13, 21, 25, 26, 27, 28, 32, 45, 47, 57, 73, 77, 79, 86, 98, 104, 108, 113, 120, 121, 123, 126, 127, 129, 133, 146, 147, 166, 171, 173, 174, 177, 180, 190, 193, 195, 196, 203, 207, 208, 209, 215, 216, 218, 222, 223, 224, 230, 235, 236, 237, 240, 243, 261, 263, 266, 285, 291, 292, 293, 301, 307, 308, 309, 310, 312, 314, 317, 319, 321, 329, 337, 339, 352, 353, 363, 368, 383, 386, 387, 395, 399, 408, 412, 415, 416, 419, 436, 443, 487, 491, 523, 530, 536, 543, 556, 557, 564, 565, 566, 567, 569, 676, 795, 799, 824, 826, 840, 841, 845, 849, 852, 892, 893, 895, 896, 897, 910, 911, 991, 998, 1010, 1020, 1024, 1027, 1028, 1031], "0015": 4, "13378": 4, "35": [4, 6, 7, 8, 9, 11, 13, 56, 72, 115, 135, 171, 172, 180, 189, 230, 280, 312, 326, 327, 543, 647, 648, 655, 701, 705, 706, 725, 739, 754, 780, 787, 833, 977, 984, 988, 994, 995, 998, 1020, 1024, 1031, 1033], "26": [4, 13, 47, 55, 81, 98, 158, 171, 227, 239, 240, 263, 275, 313, 315, 327, 347, 350, 387, 569, 647, 727, 781, 876, 888, 937, 988, 998, 1010, 1031, 1034, 1035, 1043], "47": [4, 13, 47, 162, 193, 197, 245, 376, 492, 493, 534, 540], "16": [4, 5, 10, 13, 16, 20, 28, 44, 51, 52, 55, 67, 75, 81, 96, 99, 145, 172, 194, 200, 201, 202, 219, 222, 223, 224, 226, 227, 228, 235, 239, 240, 245, 264, 265, 266, 289, 304, 307, 311, 317, 343, 353, 359, 376, 378, 379, 387, 394, 398, 400, 401, 412, 413, 416, 441, 470, 471, 477, 496, 501, 533, 534, 569, 588, 594, 595, 606, 607, 638, 649, 650, 653, 654, 655, 656, 681, 682, 810, 815, 826, 875, 901, 909, 977, 984, 988, 998, 1003, 1006, 1010, 1015, 1024, 1027, 1029, 1031, 1032, 1036, 1037, 1039, 1040], "9979": 4, "2331": 4, "31": [4, 13, 69, 71, 80, 216, 219, 290, 320, 326, 327, 405, 416, 499, 560, 561, 596, 648, 670, 678, 953, 989, 1031], "060": [4, 60, 69, 196, 220, 749, 1010], "0032": 4, "2332": 4, "2333": 4, "78": [4, 11, 54, 93, 177, 219, 271, 309, 327, 492, 493, 652, 654, 663, 664, 797, 803, 824, 988, 1009, 1020], "275": [4, 327, 1034], "2334": 4, "96": [4, 13, 33, 49, 63, 160, 230, 240, 260, 304, 309, 312, 313, 326, 327, 378, 412, 552, 977, 983, 988, 998, 1031], "515": 4, "64": [4, 13, 33, 47, 49, 54, 59, 90, 96, 158, 171, 223, 234, 235, 239, 260, 271, 289, 294, 367, 368, 378, 379, 387, 413, 494, 501, 598, 599, 645, 657, 687, 688, 689, 690, 901, 991, 1021, 1027, 1031, 1033, 1039, 1040, 1043, 1044, 1045], "2335": 4, "12326": 4, "12327": 4, "12328": [4, 1040], "12329": 4, "46": [4, 13, 54, 93, 175, 201, 240, 363, 387, 592, 593, 715, 904, 909, 998, 1027], "12330": [4, 1039], "52": [4, 119, 137, 158, 201, 530, 632, 795, 1010, 1031], "last": [4, 21, 45, 59, 90, 124, 126, 171, 180, 201, 202, 209, 214, 230, 253, 265, 273, 274, 312, 319, 321, 329, 357, 367, 376, 379, 383, 385, 386, 389, 395, 398, 408, 409, 416, 420, 437, 441, 446, 458, 463, 467, 514, 532, 558, 559, 560, 561, 582, 583, 586, 592, 593, 596, 609, 681, 682, 684, 685, 696, 697, 699, 700, 701, 706, 780, 795, 796, 800, 801, 816, 840, 841, 845, 860, 861, 865, 873, 879, 915, 940, 963, 977, 983, 984, 985, 987, 989, 992, 1002, 1009, 1015, 1022, 1031, 1038, 1039, 1040, 1045, 1047, 1048], "train_4": 4, "test_4": 4, "16379": 4, "94": [4, 33, 35, 55, 98, 122, 200, 238, 275, 309, 326, 327, 415, 662, 786, 983, 988, 989, 998, 1024, 1031], "665": 4, "16380": 4, "71": [4, 13, 93, 150, 205, 219, 378, 509, 728, 988, 1022, 1027, 1033], "16381": 4, "76": [4, 177, 201, 240, 327, 352, 363, 378, 387, 779, 860, 1022], "16382": 4, "16383": 4, "18": [4, 7, 8, 13, 20, 41, 45, 50, 54, 61, 63, 75, 104, 126, 137, 162, 171, 212, 230, 235, 262, 280, 281, 304, 311, 313, 327, 352, 353, 354, 381, 387, 409, 412, 413, 416, 446, 458, 491, 499, 500, 501, 503, 504, 509, 534, 535, 537, 539, 540, 556, 557, 558, 559, 562, 563, 564, 565, 568, 570, 571, 572, 573, 574, 576, 577, 588, 593, 598, 599, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 645, 648, 657, 658, 670, 713, 717, 729, 732, 733, 739, 741, 795, 796, 818, 833, 856, 857, 858, 864, 870, 878, 879, 890, 900, 901, 908, 909, 910, 911, 912, 936, 937, 977, 986, 988, 998, 1006, 1010, 1027, 1029, 1031, 1032, 1035, 1036, 1038, 1039, 1041, 1042], "940": 4, "6331": 4, "28": [4, 67, 126, 150, 171, 217, 263, 271, 278, 303, 326, 327, 378, 387, 408, 412, 449, 456, 998, 1010, 1020, 1031, 1034, 1037], "790": [4, 71], "89": [4, 8, 13, 33, 158, 192, 326, 327, 352, 983, 988, 998, 1024, 1031, 1034, 1042], "6332": 4, "6333": 4, "88": [4, 6, 8, 33, 192, 205, 240, 261, 304, 326, 327, 357, 376, 378, 381, 410, 472, 860, 1020, 1031], "820": [4, 840, 841], "79": [4, 6, 31, 33, 81, 82, 99, 150, 177, 304, 327, 378, 386, 410, 473, 523, 596, 838, 1031, 1033], "6334": 4, "6335": 4, "70": [4, 6, 8, 11, 13, 67, 72, 74, 113, 172, 240, 247, 262, 327, 376, 378, 412, 492, 493, 712, 724, 754, 797, 811, 977, 998, 1020], "33": [4, 13, 81, 201, 322, 327, 361, 376, 378, 379, 385, 386, 387, 398, 400, 401, 408, 416, 531, 647, 711, 712, 727, 728, 736, 741, 781, 782, 785, 803, 824, 826, 828, 911, 984, 988, 998, 1020, 1031, 1039], "335": 4, "74": [4, 13, 217, 326, 327, 378, 589, 797, 811, 879, 1027], "16326": [4, 1043], "16327": 4, "16328": 4, "16329": 4, "16330": 4, "readi": [4, 7, 158, 202, 376, 385, 389], "tree": [4, 7, 12, 13, 27, 28, 32, 42, 45, 56, 63, 91, 100, 112, 115, 116, 117, 119, 123, 124, 125, 126, 127, 129, 132, 133, 134, 135, 136, 137, 150, 161, 165, 172, 174, 184, 210, 223, 237, 239, 240, 241, 259, 266, 268, 280, 283, 285, 288, 290, 298, 307, 308, 312, 319, 331, 336, 362, 363, 367, 370, 376, 378, 387, 394, 395, 397, 406, 408, 414, 419, 436, 440, 441, 442, 443, 444, 445, 447, 449, 456, 462, 494, 499, 503, 513, 514, 518, 543, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 630, 631, 632, 633, 657, 687, 691, 701, 702, 786, 803, 824, 826, 835, 840, 841, 842, 843, 844, 845, 846, 848, 850, 851, 852, 861, 864, 873, 932, 978, 985, 988, 989, 994, 995, 1008, 1009, 1010, 1011, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "often": [4, 20, 25, 26, 34, 71, 75, 119, 131, 157, 165, 171, 172, 202, 219, 223, 240, 249, 264, 267, 307, 312, 339, 349, 352, 353, 354, 367, 368, 375, 376, 378, 381, 383, 386, 389, 393, 394, 395, 397, 402, 406, 408, 409, 410, 412, 413, 415, 416, 418, 420, 467, 520, 523, 532, 535, 631, 645, 646, 651, 652, 659, 660, 661, 662, 671, 673, 686, 726, 870, 878, 886, 898, 977, 978, 980, 983, 984, 985, 986, 987, 988, 990, 991, 993, 994, 995, 998, 1001, 1002, 1004, 1015, 1017, 1022, 1023, 1024, 1032, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "flexibl": [4, 26, 123, 165, 201, 308, 336, 354, 383, 388, 412, 418, 673, 900, 901, 977, 982, 984, 988, 992, 998, 1008, 1009, 1013, 1040, 1044], "effici": [4, 5, 12, 14, 43, 47, 54, 56, 96, 119, 131, 177, 190, 194, 203, 209, 290, 352, 367, 373, 375, 381, 383, 384, 386, 387, 393, 395, 402, 405, 407, 408, 413, 414, 415, 418, 420, 441, 442, 445, 446, 448, 449, 451, 453, 456, 458, 460, 461, 495, 532, 533, 534, 537, 539, 540, 543, 562, 565, 573, 580, 581, 587, 588, 590, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 631, 632, 633, 637, 639, 654, 657, 658, 663, 665, 666, 667, 672, 674, 675, 676, 677, 678, 684, 685, 687, 724, 754, 761, 777, 778, 795, 796, 797, 811, 829, 840, 841, 842, 843, 844, 846, 848, 850, 851, 852, 865, 877, 889, 893, 900, 909, 911, 937, 956, 977, 980, 982, 984, 985, 987, 988, 989, 991, 992, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1008, 1013, 1015, 1019, 1022, 1023, 1024, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "heterogen": [4, 8, 9, 25, 56, 70, 72, 77, 168, 172, 201, 244, 312, 317, 354, 373, 375, 393, 463, 487, 540, 580, 590, 712, 860, 864, 900, 985, 995, 998, 1008, 1010, 1026, 1035, 1039, 1041, 1042], "tabular": [4, 13, 172, 383, 415, 996], "mix": [4, 63, 70, 71, 77, 97, 98, 123, 168, 201, 232, 242, 244, 263, 307, 313, 375, 383, 393, 395, 409, 413, 420, 463, 465, 466, 495, 532, 537, 539, 546, 599, 603, 629, 645, 646, 651, 657, 658, 659, 660, 661, 662, 667, 675, 677, 680, 797, 811, 826, 860, 873, 874, 880, 881, 952, 959, 962, 984, 993, 1010, 1023, 1043, 1045, 1046], "long": [4, 11, 12, 45, 63, 126, 158, 166, 171, 173, 201, 237, 238, 240, 265, 298, 307, 318, 352, 353, 363, 368, 381, 389, 393, 395, 396, 402, 407, 408, 452, 497, 537, 675, 676, 677, 800, 801, 835, 836, 837, 838, 839, 857, 858, 868, 988, 994, 998, 999, 1001, 1002, 1007, 1012, 1033, 1037, 1043, 1045], "sampl": [4, 5, 8, 11, 14, 25, 26, 27, 28, 33, 34, 35, 38, 40, 42, 43, 44, 47, 49, 50, 54, 57, 58, 59, 60, 61, 66, 81, 82, 83, 87, 91, 93, 96, 100, 101, 105, 106, 113, 114, 115, 116, 117, 118, 119, 122, 123, 125, 126, 127, 129, 134, 135, 136, 147, 149, 150, 153, 157, 158, 159, 160, 162, 165, 168, 171, 172, 177, 179, 185, 187, 189, 190, 201, 203, 205, 208, 209, 211, 212, 213, 215, 217, 218, 219, 220, 222, 230, 234, 235, 237, 238, 240, 247, 248, 250, 251, 252, 253, 255, 257, 261, 262, 264, 265, 266, 268, 270, 274, 276, 278, 283, 285, 289, 290, 291, 292, 294, 295, 296, 303, 304, 307, 309, 310, 311, 312, 314, 317, 319, 320, 322, 326, 328, 329, 330, 331, 334, 335, 337, 339, 341, 343, 344, 345, 347, 348, 350, 352, 353, 358, 361, 367, 370, 374, 376, 377, 380, 381, 383, 384, 393, 394, 399, 405, 406, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 425, 427, 430, 431, 432, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 453, 455, 456, 457, 460, 461, 462, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 609, 610, 626, 627, 628, 629, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 686, 687, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 706, 707, 708, 709, 711, 712, 713, 714, 715, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 732, 733, 734, 735, 736, 737, 738, 739, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 758, 759, 761, 762, 766, 767, 768, 769, 771, 772, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 920, 921, 925, 926, 937, 941, 959, 962, 963, 966, 969, 977, 978, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1008, 1009, 1010, 1012, 1015, 1021, 1022, 1023, 1024, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "larg": [4, 12, 13, 14, 22, 27, 38, 40, 44, 48, 50, 51, 53, 54, 56, 74, 76, 96, 100, 116, 118, 119, 126, 129, 131, 146, 158, 159, 173, 174, 180, 181, 190, 192, 201, 203, 205, 206, 207, 219, 235, 240, 259, 265, 268, 271, 287, 294, 303, 307, 309, 320, 321, 339, 344, 347, 353, 354, 367, 376, 381, 387, 390, 393, 394, 395, 398, 402, 407, 410, 412, 413, 414, 415, 417, 419, 421, 441, 443, 445, 446, 449, 450, 451, 452, 457, 461, 472, 474, 498, 513, 533, 535, 537, 539, 543, 546, 548, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 566, 567, 581, 587, 588, 590, 633, 640, 642, 649, 653, 656, 657, 658, 663, 670, 671, 673, 676, 678, 684, 686, 688, 690, 691, 692, 694, 744, 777, 778, 797, 805, 807, 811, 815, 825, 835, 836, 837, 838, 839, 840, 841, 846, 857, 858, 865, 869, 870, 878, 880, 892, 893, 900, 901, 905, 906, 908, 909, 910, 911, 936, 937, 977, 980, 982, 984, 985, 987, 990, 991, 992, 996, 998, 1001, 1002, 1003, 1004, 1008, 1009, 1013, 1020, 1022, 1023, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "here": [4, 8, 9, 12, 13, 14, 18, 25, 58, 59, 67, 79, 83, 90, 91, 93, 98, 99, 101, 103, 104, 105, 107, 113, 116, 119, 123, 127, 133, 147, 150, 153, 161, 162, 171, 172, 173, 177, 180, 185, 190, 194, 201, 205, 207, 216, 217, 219, 222, 224, 230, 235, 237, 240, 241, 248, 249, 250, 256, 259, 260, 262, 264, 265, 267, 271, 272, 274, 280, 285, 287, 294, 302, 303, 304, 309, 312, 319, 321, 326, 328, 339, 343, 347, 349, 354, 357, 363, 367, 368, 369, 375, 376, 379, 380, 381, 382, 383, 385, 386, 387, 389, 393, 394, 399, 402, 404, 405, 408, 409, 411, 412, 413, 414, 415, 416, 419, 421, 436, 439, 440, 441, 442, 443, 444, 446, 448, 451, 463, 471, 474, 535, 537, 538, 542, 543, 566, 567, 568, 569, 580, 581, 583, 587, 590, 593, 601, 627, 629, 646, 650, 652, 654, 660, 662, 664, 672, 674, 688, 690, 694, 698, 711, 724, 744, 754, 792, 797, 800, 801, 803, 811, 819, 820, 821, 822, 823, 824, 825, 827, 836, 840, 841, 864, 872, 875, 878, 881, 892, 893, 903, 954, 977, 980, 984, 985, 986, 987, 988, 991, 994, 998, 1000, 1001, 1002, 1003, 1008, 1009, 1012, 1013, 1015, 1016, 1022, 1031, 1039, 1044], "modern": [4, 416, 467, 502, 589, 689, 693, 728, 898, 985, 1008, 1009, 1047], "histgradientboostingregressor": [4, 7, 13, 119, 123, 126, 127, 130, 133, 165, 172, 201, 313, 317, 318, 319, 320, 322, 323, 385, 415, 559, 564, 631, 632, 634, 978, 995, 1008, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "nativ": [4, 132, 165, 368, 376, 395, 415, 560, 561, 832, 833, 956, 984, 988, 1008, 1041, 1043], "support": [4, 6, 7, 8, 9, 10, 17, 25, 28, 31, 33, 47, 71, 72, 73, 112, 117, 124, 132, 133, 137, 146, 147, 172, 202, 211, 212, 213, 219, 235, 236, 237, 243, 256, 260, 265, 267, 269, 280, 285, 304, 307, 311, 321, 326, 327, 330, 331, 335, 336, 339, 340, 341, 342, 343, 344, 347, 350, 367, 368, 369, 370, 375, 379, 381, 383, 385, 386, 387, 388, 390, 391, 394, 395, 396, 408, 412, 413, 416, 418, 436, 439, 449, 451, 452, 463, 464, 465, 466, 468, 471, 473, 486, 495, 511, 537, 539, 540, 543, 546, 548, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 612, 613, 614, 616, 618, 619, 621, 622, 624, 626, 630, 631, 632, 642, 644, 656, 657, 658, 669, 670, 671, 672, 673, 674, 675, 676, 677, 686, 689, 693, 698, 706, 712, 727, 728, 736, 741, 766, 776, 777, 778, 781, 782, 785, 786, 797, 800, 801, 803, 811, 823, 824, 832, 833, 838, 840, 841, 844, 846, 847, 852, 859, 860, 861, 865, 871, 873, 874, 876, 880, 888, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 926, 931, 932, 976, 977, 978, 980, 981, 982, 984, 987, 988, 989, 990, 991, 992, 994, 995, 998, 999, 1002, 1006, 1008, 1009, 1010, 1011, 1013, 1015, 1018, 1020, 1024, 1026, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "therefor": [4, 9, 14, 21, 25, 35, 38, 53, 54, 72, 73, 76, 81, 87, 101, 106, 113, 116, 118, 126, 131, 133, 149, 170, 173, 201, 205, 217, 218, 247, 252, 253, 263, 265, 280, 283, 288, 303, 307, 312, 326, 339, 347, 348, 352, 353, 361, 367, 375, 379, 386, 393, 399, 404, 408, 409, 410, 412, 413, 415, 416, 436, 534, 548, 550, 552, 553, 558, 559, 563, 564, 603, 605, 657, 658, 664, 667, 670, 675, 677, 678, 700, 711, 733, 755, 795, 860, 861, 873, 877, 881, 889, 978, 982, 984, 985, 988, 990, 991, 992, 993, 996, 998, 1003, 1004, 1009, 1015, 1022, 1023, 1024, 1040, 1041, 1044, 1045, 1046, 1047], "categorical_featur": [4, 72, 123, 172, 313, 319, 320, 321, 322, 386, 415, 560, 561, 631, 632, 995, 1039, 1043, 1046, 1048], "from_dtyp": [4, 123, 560, 561, 1048], "For": [4, 8, 9, 12, 13, 14, 20, 28, 33, 38, 41, 45, 47, 49, 50, 54, 56, 58, 59, 61, 68, 74, 81, 87, 92, 97, 116, 118, 119, 121, 126, 127, 129, 131, 146, 147, 150, 153, 155, 160, 165, 166, 171, 172, 185, 189, 190, 201, 202, 205, 206, 209, 218, 219, 222, 224, 227, 230, 231, 233, 234, 235, 237, 244, 252, 259, 262, 263, 269, 277, 283, 285, 295, 301, 303, 304, 309, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 329, 331, 339, 341, 343, 347, 352, 353, 354, 357, 358, 361, 363, 367, 369, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 399, 402, 404, 405, 406, 407, 408, 409, 412, 413, 415, 416, 417, 418, 419, 424, 431, 436, 439, 441, 442, 443, 444, 445, 446, 448, 449, 450, 453, 455, 456, 457, 459, 460, 461, 463, 464, 465, 467, 471, 473, 481, 482, 483, 484, 488, 495, 497, 502, 511, 513, 514, 518, 522, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 548, 549, 550, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 571, 572, 580, 581, 582, 583, 584, 585, 587, 588, 590, 591, 592, 593, 596, 601, 606, 607, 608, 609, 610, 613, 618, 621, 622, 626, 627, 628, 629, 630, 631, 632, 634, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 686, 687, 688, 689, 691, 692, 694, 700, 703, 705, 706, 727, 728, 736, 739, 740, 761, 767, 776, 781, 782, 785, 786, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 829, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 865, 866, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 885, 886, 887, 888, 889, 890, 891, 892, 893, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 920, 926, 951, 972, 977, 978, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1002, 1003, 1004, 1007, 1012, 1013, 1015, 1022, 1023, 1024, 1031, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "refer": [4, 38, 39, 61, 64, 72, 91, 127, 133, 150, 162, 219, 237, 240, 269, 288, 295, 307, 317, 318, 319, 320, 321, 322, 323, 353, 368, 370, 378, 379, 381, 382, 383, 385, 386, 387, 388, 389, 393, 394, 395, 396, 398, 399, 402, 409, 419, 420, 421, 436, 437, 438, 439, 441, 443, 445, 446, 447, 449, 450, 451, 452, 453, 456, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 497, 502, 510, 512, 514, 515, 516, 517, 518, 519, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 543, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 589, 592, 593, 594, 601, 606, 607, 609, 610, 613, 618, 621, 622, 626, 627, 630, 631, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 646, 648, 650, 652, 654, 655, 657, 660, 662, 664, 665, 666, 667, 670, 672, 674, 675, 677, 678, 681, 682, 687, 688, 689, 690, 691, 692, 693, 694, 695, 700, 703, 704, 706, 707, 708, 709, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 732, 733, 734, 735, 736, 738, 739, 741, 754, 756, 757, 767, 781, 783, 784, 786, 787, 790, 791, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 830, 831, 835, 836, 837, 839, 842, 845, 846, 847, 849, 856, 857, 858, 860, 865, 866, 867, 869, 870, 872, 873, 874, 876, 877, 878, 880, 881, 888, 893, 894, 895, 896, 897, 898, 900, 902, 903, 905, 906, 908, 909, 910, 911, 925, 937, 954, 990, 999, 1004, 1009, 1015, 1019, 1023, 1024, 1031, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "datafram": [4, 13, 26, 71, 72, 73, 74, 113, 119, 123, 126, 130, 158, 165, 170, 171, 172, 173, 180, 185, 190, 205, 209, 219, 241, 244, 252, 260, 262, 263, 265, 273, 274, 280, 312, 313, 314, 320, 321, 322, 347, 352, 353, 375, 376, 381, 383, 386, 395, 409, 432, 441, 442, 444, 446, 448, 463, 465, 466, 467, 481, 482, 483, 484, 488, 489, 490, 491, 495, 499, 500, 501, 503, 504, 509, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 560, 561, 565, 566, 567, 568, 569, 580, 581, 582, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 687, 688, 691, 797, 800, 801, 811, 826, 844, 849, 852, 856, 859, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 898, 916, 943, 959, 962, 977, 978, 1009, 1024, 1034, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "dedic": [4, 260, 349, 379, 385, 387, 393, 396, 404, 408, 583, 671, 673, 686, 977, 984, 1008, 1015, 1039, 1048], "rule": [4, 119, 177, 358, 361, 363, 367, 378, 381, 382, 383, 393, 395, 396, 403, 406, 407, 408, 412, 413, 415, 417, 535, 548, 549, 550, 551, 552, 560, 561, 568, 569, 601, 633, 644, 657, 658, 665, 666, 667, 675, 676, 677, 705, 706, 797, 800, 801, 803, 811, 819, 823, 825, 849, 900, 913, 977, 982, 990, 991, 1002, 1004, 1009, 1015, 1022, 1026, 1033, 1036, 1043], "sake": [4, 126, 166, 171, 201, 312, 343, 352, 354, 389, 393, 669], "simplic": [4, 14, 32, 185, 343, 352, 354, 395, 414, 991, 992, 993, 1003], "try": [4, 6, 11, 12, 13, 15, 17, 26, 27, 40, 54, 72, 73, 99, 113, 118, 119, 120, 121, 122, 129, 130, 133, 136, 147, 153, 158, 166, 170, 171, 172, 173, 177, 180, 182, 190, 231, 232, 233, 237, 241, 242, 243, 244, 248, 249, 252, 260, 262, 263, 269, 274, 280, 285, 298, 304, 313, 318, 319, 321, 322, 328, 341, 347, 352, 353, 361, 376, 379, 380, 381, 383, 386, 387, 389, 393, 395, 399, 402, 408, 411, 412, 415, 416, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 502, 566, 576, 588, 657, 672, 674, 688, 692, 797, 800, 801, 809, 811, 821, 822, 823, 825, 878, 880, 900, 977, 984, 985, 994, 1003, 1004, 1009, 1012, 1013, 1015, 1017, 1020, 1022, 1023, 1024, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "default": [4, 13, 15, 26, 28, 31, 43, 46, 47, 49, 56, 60, 96, 119, 146, 153, 165, 172, 180, 181, 190, 201, 202, 219, 232, 234, 240, 242, 244, 250, 257, 265, 271, 283, 285, 307, 311, 314, 317, 318, 322, 343, 347, 348, 352, 353, 354, 357, 363, 367, 368, 375, 376, 379, 383, 384, 385, 386, 387, 388, 390, 393, 394, 395, 398, 399, 402, 406, 408, 409, 412, 413, 415, 416, 417, 419, 420, 421, 422, 424, 425, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 706, 707, 708, 710, 711, 712, 713, 715, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 732, 733, 734, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 764, 765, 766, 767, 769, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 924, 926, 927, 929, 931, 936, 937, 938, 939, 940, 941, 942, 951, 953, 954, 956, 958, 959, 961, 962, 963, 969, 972, 974, 975, 977, 978, 980, 982, 984, 987, 988, 989, 991, 992, 994, 995, 998, 1000, 1002, 1003, 1004, 1015, 1019, 1022, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "hyper": [4, 72, 119, 256, 262, 267, 304, 339, 363, 383, 393, 394, 395, 403, 412, 415, 417, 467, 643, 644, 801, 809, 811, 856, 898, 983, 984, 988, 991, 1002, 1003, 1015, 1026, 1031, 1045], "paramet": [4, 5, 9, 10, 11, 14, 15, 17, 35, 45, 55, 56, 59, 61, 62, 63, 72, 73, 74, 80, 82, 83, 93, 96, 111, 113, 115, 117, 119, 122, 123, 127, 128, 139, 140, 147, 150, 153, 154, 157, 158, 159, 160, 161, 162, 165, 166, 168, 171, 172, 180, 181, 182, 183, 185, 186, 188, 189, 190, 192, 193, 201, 203, 205, 206, 209, 210, 217, 218, 219, 226, 227, 230, 232, 235, 236, 237, 247, 248, 249, 250, 252, 253, 256, 257, 261, 262, 263, 264, 266, 267, 270, 273, 274, 275, 277, 280, 285, 287, 288, 291, 292, 298, 301, 302, 304, 307, 308, 309, 311, 312, 317, 318, 320, 321, 322, 323, 330, 334, 336, 341, 343, 344, 346, 348, 349, 350, 352, 353, 354, 357, 358, 359, 360, 363, 367, 368, 369, 370, 373, 374, 376, 384, 386, 387, 388, 389, 390, 393, 399, 403, 406, 408, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 575, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 955, 956, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 985, 987, 990, 991, 992, 993, 994, 995, 996, 998, 1000, 1001, 1002, 1004, 1008, 1009, 1010, 1016, 1018, 1020, 1021, 1022, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "compos": [4, 5, 26, 70, 71, 72, 76, 77, 87, 115, 123, 133, 168, 171, 172, 173, 201, 203, 219, 232, 240, 242, 244, 280, 313, 318, 320, 321, 322, 370, 394, 399, 408, 409, 412, 514, 611, 987, 1010, 1031], "columntransform": [4, 71, 72, 133, 171, 172, 173, 201, 219, 232, 240, 242, 244, 313, 318, 320, 321, 322, 373, 375, 393, 394, 399, 465, 466, 628, 865, 977, 978, 1009, 1026, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "ensembl": [4, 7, 10, 12, 13, 27, 28, 32, 57, 113, 114, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 161, 165, 166, 172, 173, 174, 201, 223, 230, 239, 240, 242, 243, 259, 274, 280, 283, 309, 313, 317, 318, 319, 320, 322, 323, 331, 352, 358, 359, 360, 363, 367, 370, 385, 386, 394, 395, 399, 406, 408, 412, 417, 436, 503, 514, 631, 632, 634, 657, 701, 800, 801, 826, 830, 831, 861, 864, 873, 904, 908, 910, 911, 977, 988, 989, 994, 995, 1004, 1008, 1009, 1010, 1011, 1026, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "cross_valid": [4, 13, 123, 133, 171, 203, 258, 265, 280, 313, 381, 394, 399, 574, 821, 822, 988, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1048], "pipelin": [4, 32, 55, 59, 72, 75, 76, 77, 87, 100, 118, 119, 123, 141, 144, 146, 149, 150, 151, 165, 166, 172, 173, 177, 180, 189, 190, 201, 202, 207, 215, 219, 223, 229, 230, 231, 233, 235, 240, 241, 244, 245, 255, 259, 260, 261, 266, 269, 270, 273, 274, 276, 278, 285, 287, 288, 293, 294, 301, 304, 309, 312, 314, 317, 318, 319, 320, 321, 322, 323, 330, 352, 353, 363, 367, 370, 373, 375, 376, 381, 384, 395, 399, 412, 416, 418, 422, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 487, 501, 514, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 604, 606, 609, 610, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 696, 697, 699, 700, 701, 712, 795, 796, 797, 798, 799, 800, 801, 804, 806, 811, 815, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 977, 978, 980, 984, 991, 992, 997, 998, 1002, 1003, 1008, 1009, 1010, 1011, 1013, 1016, 1018, 1026, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1048], "make_pipelin": [4, 32, 59, 87, 118, 123, 133, 146, 147, 150, 165, 166, 171, 172, 177, 180, 189, 190, 201, 202, 207, 215, 219, 223, 230, 231, 232, 240, 241, 242, 244, 259, 269, 285, 294, 301, 309, 312, 313, 314, 317, 318, 319, 320, 321, 322, 353, 363, 394, 399, 409, 412, 566, 675, 677, 852, 860, 885, 886, 888, 889, 890, 891, 900, 901, 902, 903, 905, 906, 978, 991, 998, 1002, 1003, 1034, 1041, 1044], "gbrt": [4, 13, 201, 415], "random_st": [4, 5, 6, 7, 10, 12, 13, 15, 20, 21, 22, 25, 26, 27, 28, 31, 32, 39, 43, 44, 45, 47, 49, 50, 51, 54, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 76, 83, 87, 93, 96, 98, 101, 113, 114, 115, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 135, 136, 139, 146, 147, 149, 153, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 182, 183, 187, 193, 200, 201, 204, 205, 207, 208, 209, 213, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 235, 238, 239, 240, 241, 243, 244, 247, 249, 250, 253, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 280, 283, 285, 288, 289, 293, 294, 295, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 329, 337, 339, 340, 341, 347, 348, 352, 353, 357, 361, 363, 383, 386, 390, 394, 395, 404, 408, 409, 412, 413, 415, 416, 420, 433, 436, 437, 439, 442, 446, 448, 450, 451, 452, 453, 457, 458, 459, 461, 468, 473, 487, 490, 491, 494, 496, 502, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 582, 583, 592, 593, 606, 607, 609, 610, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 631, 632, 633, 634, 637, 638, 639, 640, 641, 645, 646, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 673, 675, 676, 677, 678, 686, 688, 689, 690, 691, 692, 693, 694, 696, 697, 699, 700, 701, 733, 786, 791, 795, 796, 799, 800, 801, 802, 803, 809, 811, 812, 813, 814, 815, 816, 817, 819, 824, 825, 826, 828, 830, 831, 832, 833, 834, 845, 849, 856, 857, 858, 860, 865, 877, 881, 889, 892, 893, 900, 901, 902, 905, 908, 909, 910, 911, 913, 914, 936, 937, 957, 959, 962, 977, 978, 980, 983, 988, 989, 990, 991, 992, 995, 996, 998, 1003, 1004, 1015, 1019, 1020, 1024, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "categorical_column": [4, 123, 171, 173, 240, 466], "print": [4, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 20, 21, 22, 25, 27, 31, 33, 39, 43, 44, 47, 48, 49, 50, 51, 53, 54, 59, 61, 62, 64, 68, 71, 72, 74, 75, 76, 81, 86, 87, 93, 96, 99, 104, 105, 107, 113, 116, 119, 120, 121, 122, 123, 125, 127, 139, 141, 146, 147, 149, 150, 153, 154, 156, 158, 162, 170, 172, 173, 174, 177, 185, 186, 187, 188, 192, 193, 196, 197, 201, 203, 204, 205, 208, 209, 216, 217, 219, 223, 224, 227, 232, 234, 236, 237, 240, 244, 250, 256, 260, 261, 262, 263, 265, 267, 270, 271, 275, 285, 289, 296, 298, 302, 303, 304, 309, 312, 314, 317, 318, 319, 321, 323, 326, 327, 330, 339, 352, 353, 354, 357, 361, 363, 367, 375, 376, 379, 382, 383, 389, 395, 399, 402, 409, 412, 415, 416, 418, 463, 466, 467, 471, 477, 501, 511, 540, 543, 548, 549, 558, 559, 560, 561, 563, 564, 568, 569, 576, 582, 583, 587, 588, 590, 611, 616, 629, 645, 646, 648, 649, 651, 652, 653, 655, 659, 660, 661, 662, 665, 666, 675, 676, 683, 712, 716, 735, 793, 795, 796, 798, 799, 802, 804, 805, 806, 807, 810, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 829, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 857, 858, 859, 860, 861, 862, 870, 876, 880, 888, 898, 899, 900, 901, 902, 905, 913, 924, 949, 956, 978, 988, 989, 990, 991, 996, 1004, 1015, 1019, 1020, 1022, 1023, 1024, 1031, 1033, 1039, 1040, 1042, 1046], "tolist": [4, 125, 165, 261, 319, 376], "across": [4, 13, 56, 62, 68, 86, 91, 119, 139, 171, 190, 195, 223, 257, 259, 262, 285, 307, 312, 343, 382, 383, 390, 395, 402, 407, 408, 412, 416, 417, 420, 436, 439, 449, 451, 453, 456, 459, 461, 468, 471, 473, 487, 490, 491, 494, 496, 502, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 566, 567, 587, 590, 593, 601, 606, 607, 609, 610, 631, 632, 633, 638, 639, 640, 641, 645, 646, 649, 651, 652, 653, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 675, 677, 678, 684, 685, 688, 689, 690, 691, 692, 693, 694, 703, 704, 716, 729, 755, 786, 791, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 809, 811, 812, 813, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 845, 849, 856, 857, 858, 865, 869, 870, 877, 878, 880, 881, 889, 892, 893, 895, 896, 900, 901, 902, 905, 908, 909, 936, 937, 956, 959, 962, 977, 984, 986, 988, 998, 1002, 1004, 1009, 1013, 1024, 1031, 1034, 1037, 1038, 1039, 1040, 1041], "numpi": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 34, 35, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 76, 79, 80, 81, 82, 83, 86, 87, 91, 93, 96, 97, 98, 99, 100, 102, 103, 104, 106, 107, 114, 115, 116, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 139, 140, 142, 145, 146, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 180, 181, 182, 183, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 227, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 283, 285, 289, 290, 291, 292, 294, 295, 296, 297, 298, 301, 304, 307, 308, 309, 310, 311, 312, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 358, 359, 360, 361, 363, 367, 374, 375, 376, 379, 381, 382, 383, 384, 385, 387, 389, 390, 393, 394, 395, 398, 399, 401, 402, 404, 405, 408, 409, 412, 413, 414, 415, 416, 438, 439, 440, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 459, 461, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 484, 489, 492, 493, 495, 502, 505, 507, 508, 526, 530, 533, 536, 537, 538, 539, 540, 541, 542, 543, 546, 548, 549, 550, 551, 568, 569, 580, 581, 587, 588, 590, 626, 627, 628, 629, 630, 631, 632, 642, 645, 646, 648, 651, 652, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 669, 671, 675, 676, 677, 683, 687, 690, 691, 692, 694, 698, 701, 702, 705, 706, 708, 711, 713, 724, 725, 727, 728, 732, 733, 736, 737, 752, 754, 771, 777, 779, 780, 781, 782, 785, 786, 787, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 823, 826, 828, 829, 832, 833, 835, 836, 837, 838, 839, 840, 841, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 863, 864, 867, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 900, 902, 903, 905, 906, 908, 923, 935, 937, 941, 942, 943, 950, 951, 959, 962, 975, 977, 978, 983, 984, 986, 988, 989, 991, 994, 998, 1000, 1003, 1004, 1007, 1009, 1012, 1015, 1018, 1019, 1020, 1022, 1023, 1024, 1031, 1034, 1035, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "np": [4, 5, 7, 8, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 34, 35, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 76, 79, 80, 81, 82, 83, 86, 87, 93, 97, 98, 99, 100, 102, 103, 104, 106, 107, 114, 115, 116, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 139, 140, 142, 145, 146, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 180, 181, 182, 183, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 227, 230, 233, 234, 235, 236, 237, 238, 239, 240, 242, 247, 248, 249, 250, 251, 252, 253, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 283, 285, 289, 290, 291, 292, 294, 295, 296, 297, 298, 301, 304, 307, 308, 309, 310, 311, 312, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 358, 359, 360, 361, 363, 367, 375, 376, 381, 383, 386, 387, 390, 393, 395, 399, 405, 408, 409, 412, 413, 414, 415, 416, 418, 421, 423, 426, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 456, 459, 461, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 484, 495, 496, 507, 508, 519, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 548, 549, 550, 551, 556, 557, 558, 559, 560, 562, 563, 564, 565, 568, 569, 580, 581, 584, 585, 587, 588, 592, 593, 596, 605, 608, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 640, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 667, 669, 670, 671, 673, 674, 675, 676, 677, 680, 681, 682, 683, 690, 691, 694, 698, 701, 702, 705, 706, 708, 711, 712, 713, 714, 724, 725, 727, 728, 732, 733, 736, 737, 739, 752, 754, 761, 767, 771, 776, 779, 780, 781, 782, 785, 786, 787, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 826, 827, 828, 829, 832, 833, 835, 836, 837, 838, 839, 840, 841, 845, 846, 847, 848, 850, 851, 852, 856, 857, 864, 865, 867, 873, 874, 875, 876, 877, 879, 880, 881, 888, 889, 892, 893, 895, 896, 897, 900, 902, 903, 905, 906, 908, 909, 910, 911, 918, 920, 921, 923, 925, 926, 935, 937, 942, 950, 951, 953, 959, 962, 964, 965, 966, 977, 978, 983, 984, 986, 988, 989, 991, 992, 994, 998, 999, 1000, 1002, 1003, 1004, 1015, 1019, 1020, 1022, 1023, 1024, 1032, 1034, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "def": [4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 18, 20, 26, 28, 34, 35, 38, 41, 42, 49, 53, 56, 57, 59, 62, 71, 76, 93, 96, 98, 99, 102, 104, 106, 111, 113, 116, 118, 123, 124, 125, 126, 133, 156, 159, 161, 162, 166, 174, 181, 189, 190, 193, 198, 201, 202, 209, 210, 211, 219, 222, 223, 237, 238, 240, 247, 248, 249, 250, 252, 253, 257, 260, 261, 262, 263, 265, 270, 273, 276, 285, 290, 292, 295, 298, 302, 304, 307, 309, 312, 313, 317, 330, 335, 339, 343, 349, 352, 353, 354, 367, 376, 381, 383, 387, 388, 393, 409, 412, 416, 420, 507, 532, 596, 609, 610, 779, 873, 927, 932, 949, 988, 995, 1003, 1020], "model_prop": 4, "none": [4, 8, 9, 10, 13, 17, 18, 27, 31, 34, 40, 42, 43, 45, 53, 55, 56, 57, 63, 98, 101, 106, 117, 122, 123, 125, 128, 142, 150, 154, 160, 161, 174, 180, 201, 202, 209, 212, 219, 222, 236, 237, 238, 240, 256, 262, 263, 274, 290, 292, 296, 311, 314, 319, 320, 327, 330, 337, 339, 340, 343, 344, 346, 352, 353, 376, 378, 381, 383, 388, 390, 395, 399, 408, 412, 415, 418, 419, 420, 424, 425, 426, 427, 429, 430, 431, 432, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 502, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 699, 700, 701, 702, 706, 707, 708, 710, 711, 712, 713, 715, 717, 719, 720, 721, 722, 724, 725, 726, 727, 728, 730, 732, 733, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 761, 762, 764, 765, 766, 767, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 889, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 917, 919, 920, 921, 923, 924, 925, 926, 929, 931, 936, 937, 940, 941, 942, 943, 947, 948, 951, 954, 956, 957, 959, 962, 963, 969, 972, 973, 975, 977, 984, 988, 998, 1001, 1004, 1015, 1019, 1024, 1026, 1031, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "model_step": 4, "cv_result": [4, 13, 72, 119, 260, 261, 263, 265, 399, 811, 823, 988], "score": [4, 6, 8, 11, 13, 17, 21, 22, 25, 26, 27, 32, 33, 34, 38, 59, 61, 71, 72, 73, 74, 75, 76, 79, 83, 87, 104, 111, 113, 115, 122, 123, 125, 126, 129, 132, 133, 140, 141, 145, 146, 147, 150, 165, 168, 170, 171, 172, 173, 174, 177, 185, 192, 193, 196, 201, 203, 207, 209, 217, 219, 230, 235, 236, 237, 240, 244, 251, 255, 260, 262, 263, 264, 265, 266, 267, 270, 271, 273, 274, 275, 276, 277, 278, 280, 283, 292, 293, 294, 301, 302, 303, 304, 309, 311, 312, 313, 314, 317, 318, 319, 320, 326, 327, 329, 330, 339, 347, 352, 353, 357, 363, 376, 381, 383, 386, 394, 395, 402, 403, 405, 406, 407, 409, 411, 413, 415, 417, 425, 427, 431, 436, 442, 446, 448, 451, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 501, 503, 531, 535, 540, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 591, 592, 593, 594, 595, 597, 598, 599, 601, 602, 603, 605, 608, 609, 610, 612, 613, 614, 615, 618, 619, 620, 621, 622, 623, 624, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 697, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 734, 735, 736, 737, 738, 740, 753, 754, 755, 780, 781, 782, 783, 784, 785, 786, 787, 792, 793, 794, 795, 796, 797, 800, 801, 803, 811, 816, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 845, 846, 847, 849, 850, 851, 856, 857, 858, 860, 880, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 939, 946, 977, 980, 984, 986, 991, 994, 996, 998, 1002, 1009, 1010, 1018, 1020, 1022, 1024, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "neg_mean_absolute_error": [4, 133, 203, 988], "neg_root_mean_squared_error": [4, 313, 988], "return_estim": [4, 171, 412, 823, 1039], "getattr": [4, 8, 307, 383, 395, 1047], "els": [4, 8, 11, 12, 13, 17, 20, 35, 42, 45, 50, 56, 57, 63, 83, 100, 116, 122, 123, 126, 161, 171, 172, 190, 203, 219, 223, 230, 234, 236, 237, 238, 239, 240, 262, 263, 266, 273, 285, 290, 298, 301, 302, 309, 352, 353, 361, 381, 385, 387, 415, 416, 418, 420, 436, 448, 507, 519, 532, 568, 624, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 669, 671, 672, 673, 675, 678, 680, 681, 682, 683, 702, 708, 766, 786, 792, 794, 800, 801, 826, 864, 873, 876, 879, 887, 900, 901, 915, 950, 952, 954, 975, 1004], "mae": [4, 13, 133, 201, 203, 557, 564, 743, 909, 911, 988, 1004, 1038, 1039, 1043, 1044], "test_neg_mean_absolute_error": [4, 203], "rmse": [4, 13, 82, 313, 748, 988, 1042], "test_neg_root_mean_squared_error": 4, "3f": [4, 6, 8, 11, 13, 15, 18, 22, 25, 27, 39, 41, 48, 49, 50, 59, 72, 74, 76, 87, 113, 120, 121, 146, 150, 153, 154, 155, 157, 162, 170, 172, 173, 181, 185, 187, 193, 201, 203, 207, 216, 217, 219, 223, 234, 236, 260, 262, 263, 265, 268, 270, 273, 285, 301, 330, 352, 353, 354, 996, 1020], "std": [4, 11, 12, 13, 38, 47, 51, 55, 62, 67, 80, 82, 83, 97, 98, 99, 120, 122, 123, 133, 140, 162, 165, 166, 171, 181, 186, 210, 234, 260, 261, 262, 264, 265, 267, 270, 272, 276, 313, 329, 342, 353, 363, 395, 408, 412, 415, 514, 605, 608, 880, 891, 998, 1023, 1039, 1043], "n": [4, 5, 7, 8, 10, 11, 15, 18, 20, 33, 34, 38, 40, 41, 59, 71, 76, 81, 86, 93, 96, 99, 101, 104, 106, 107, 113, 115, 116, 120, 124, 135, 145, 150, 153, 157, 162, 172, 174, 181, 185, 197, 201, 202, 205, 216, 218, 219, 222, 233, 234, 235, 238, 247, 249, 250, 260, 262, 265, 267, 268, 269, 271, 272, 285, 288, 290, 304, 309, 311, 312, 319, 322, 327, 333, 343, 347, 361, 367, 375, 378, 379, 381, 385, 387, 390, 395, 398, 399, 405, 406, 408, 411, 412, 413, 414, 415, 416, 418, 419, 443, 444, 446, 447, 449, 468, 470, 473, 477, 488, 514, 515, 516, 517, 522, 527, 537, 539, 540, 546, 556, 557, 558, 559, 562, 563, 564, 565, 587, 588, 589, 590, 606, 607, 613, 626, 648, 670, 678, 691, 695, 698, 705, 706, 753, 802, 805, 807, 812, 813, 816, 836, 840, 841, 845, 865, 892, 894, 908, 909, 910, 911, 935, 940, 941, 963, 967, 968, 977, 980, 982, 984, 985, 988, 989, 990, 991, 992, 994, 995, 998, 1000, 1002, 1003, 1004, 1015, 1022, 1024, 1031, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "n_iter_": [4, 99, 209, 250, 395, 439, 446, 447, 448, 470, 471, 481, 482, 483, 530, 531, 532, 535, 536, 537, 538, 539, 542, 560, 561, 626, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 675, 676, 677, 678, 679, 689, 691, 795, 796, 849, 857, 858, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 1035, 1038, 1039, 1041, 1044, 1045, 1047], "100": [4, 5, 7, 10, 12, 13, 17, 18, 20, 26, 28, 38, 43, 51, 54, 58, 62, 67, 72, 73, 76, 80, 81, 96, 98, 99, 106, 114, 119, 129, 132, 135, 154, 158, 161, 162, 171, 172, 174, 177, 180, 181, 183, 185, 187, 191, 192, 193, 195, 200, 201, 202, 203, 205, 210, 211, 212, 214, 216, 217, 219, 224, 225, 227, 233, 234, 235, 236, 237, 241, 247, 249, 253, 257, 258, 260, 262, 265, 267, 272, 273, 276, 290, 291, 292, 304, 308, 309, 311, 313, 314, 320, 330, 331, 335, 337, 338, 340, 341, 342, 346, 347, 349, 350, 352, 353, 357, 360, 361, 367, 369, 376, 378, 381, 383, 386, 387, 399, 405, 408, 409, 412, 413, 414, 415, 416, 436, 440, 444, 448, 470, 471, 477, 489, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 527, 529, 533, 535, 538, 543, 544, 545, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 609, 630, 631, 632, 638, 639, 640, 641, 645, 646, 647, 648, 651, 652, 657, 658, 659, 660, 661, 662, 664, 666, 668, 670, 679, 680, 683, 687, 688, 689, 690, 692, 744, 795, 796, 799, 824, 825, 830, 835, 836, 837, 839, 840, 841, 845, 857, 858, 876, 878, 881, 890, 977, 978, 981, 985, 988, 989, 995, 998, 1000, 1010, 1015, 1019, 1023, 1024, 1039, 1040, 1041, 1044, 1045], "044": [4, 260, 749, 988], "003": [4, 150], "068": [4, 13, 213, 220, 262, 1010], "005": [4, 120, 262, 266, 290, 307, 353, 387], "max_it": [4, 8, 13, 15, 18, 26, 31, 32, 73, 74, 96, 99, 118, 119, 123, 135, 139, 141, 162, 165, 166, 171, 172, 180, 187, 193, 194, 208, 209, 210, 213, 214, 216, 222, 223, 224, 225, 241, 242, 247, 248, 249, 250, 253, 275, 295, 301, 302, 303, 313, 319, 320, 321, 326, 327, 336, 352, 353, 387, 395, 415, 420, 439, 442, 446, 447, 448, 453, 458, 460, 470, 471, 477, 481, 482, 483, 530, 531, 532, 534, 535, 536, 537, 538, 539, 542, 544, 545, 546, 547, 560, 561, 626, 637, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 671, 673, 675, 676, 677, 678, 679, 681, 682, 686, 687, 688, 689, 692, 693, 795, 796, 811, 849, 857, 858, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 978, 980, 984, 991, 992, 1001, 1002, 1020, 1024, 1032, 1035, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1048], "earli": [4, 15, 45, 63, 112, 119, 122, 125, 137, 168, 179, 189, 190, 220, 318, 395, 415, 440, 444, 448, 462, 495, 503, 514, 519, 535, 536, 537, 538, 545, 552, 553, 558, 559, 560, 561, 570, 626, 644, 655, 665, 666, 667, 675, 677, 691, 826, 857, 858, 962, 985, 991, 998, 1007, 1009, 1010, 1013, 1031, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046], "stop": [4, 12, 18, 45, 63, 112, 119, 125, 137, 158, 160, 168, 172, 179, 189, 190, 203, 220, 318, 381, 383, 389, 390, 395, 408, 413, 415, 417, 439, 440, 442, 444, 446, 448, 451, 453, 461, 462, 470, 471, 477, 481, 482, 483, 495, 503, 507, 508, 514, 519, 531, 535, 536, 537, 538, 539, 542, 544, 545, 546, 552, 553, 556, 557, 558, 559, 560, 561, 563, 564, 570, 587, 588, 590, 601, 616, 626, 643, 644, 645, 647, 648, 651, 655, 657, 658, 665, 666, 667, 668, 670, 675, 676, 677, 679, 690, 691, 694, 713, 795, 796, 826, 857, 858, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 942, 962, 977, 984, 992, 993, 1003, 1004, 1009, 1010, 1011, 1013, 1026, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048], "place": [4, 17, 61, 231, 241, 289, 367, 379, 381, 382, 383, 386, 388, 396, 406, 416, 418, 440, 444, 445, 481, 482, 483, 514, 580, 589, 627, 629, 630, 766, 779, 795, 967, 968, 1008, 1031, 1038, 1041, 1042, 1044], "an": [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 22, 26, 27, 28, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 47, 49, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 76, 79, 80, 81, 82, 90, 96, 97, 98, 99, 100, 101, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 129, 130, 131, 132, 133, 136, 140, 141, 142, 146, 150, 153, 154, 155, 158, 159, 160, 162, 164, 165, 167, 168, 170, 171, 172, 173, 177, 179, 180, 181, 184, 185, 189, 196, 201, 202, 203, 205, 206, 208, 209, 215, 217, 218, 219, 220, 222, 223, 224, 225, 227, 230, 231, 233, 234, 235, 236, 237, 238, 240, 244, 247, 248, 250, 252, 253, 256, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 271, 273, 275, 277, 283, 285, 288, 291, 292, 293, 296, 297, 298, 307, 312, 313, 314, 318, 319, 320, 322, 323, 327, 331, 335, 336, 338, 339, 341, 342, 343, 352, 353, 354, 357, 360, 361, 363, 367, 368, 369, 370, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 429, 432, 433, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 502, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 574, 575, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 609, 610, 611, 618, 621, 622, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 708, 710, 711, 717, 719, 720, 725, 727, 728, 732, 733, 735, 740, 741, 743, 744, 746, 748, 749, 751, 754, 756, 757, 761, 762, 764, 765, 766, 767, 768, 771, 773, 774, 775, 776, 779, 780, 781, 782, 785, 786, 787, 788, 789, 790, 791, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 808, 809, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 915, 917, 918, 920, 921, 923, 924, 927, 931, 932, 933, 935, 936, 937, 939, 941, 944, 945, 946, 947, 948, 949, 951, 952, 953, 956, 958, 959, 962, 963, 969, 972, 974, 975, 976, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1013, 1016, 1018, 1019, 1023, 1024, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "quit": [4, 13, 54, 58, 87, 116, 139, 150, 171, 172, 199, 219, 270, 280, 320, 352, 367, 386, 394, 408, 416, 983, 985, 990, 1013, 1039], "good": [4, 9, 21, 26, 28, 41, 45, 47, 50, 53, 54, 56, 59, 75, 82, 87, 106, 119, 122, 125, 126, 154, 158, 165, 171, 185, 190, 201, 202, 207, 216, 227, 230, 234, 237, 240, 248, 250, 256, 262, 268, 277, 304, 312, 313, 319, 326, 331, 339, 352, 353, 363, 367, 368, 369, 380, 382, 383, 384, 385, 387, 393, 395, 402, 405, 406, 408, 410, 412, 413, 415, 416, 417, 418, 436, 438, 443, 533, 558, 560, 561, 589, 629, 639, 646, 647, 655, 657, 658, 660, 668, 679, 689, 693, 721, 729, 740, 762, 825, 894, 937, 977, 983, 984, 985, 988, 989, 991, 992, 993, 995, 996, 998, 1002, 1003, 1004, 1009, 1013, 1015, 1019, 1022, 1024, 1037], "trial": [4, 267, 446, 448, 459, 670, 795, 796, 984, 1037], "without": [4, 5, 13, 14, 25, 37, 43, 45, 48, 53, 56, 57, 63, 67, 68, 69, 76, 101, 119, 125, 128, 130, 133, 141, 146, 150, 160, 168, 170, 171, 172, 185, 190, 209, 230, 234, 237, 238, 241, 243, 256, 263, 267, 269, 280, 285, 286, 287, 288, 294, 295, 296, 297, 299, 307, 308, 312, 314, 317, 343, 347, 353, 369, 376, 377, 379, 381, 382, 383, 385, 386, 387, 390, 393, 394, 395, 399, 402, 408, 409, 413, 415, 416, 417, 418, 433, 438, 440, 445, 457, 468, 473, 495, 503, 514, 531, 533, 554, 555, 562, 578, 579, 610, 626, 630, 633, 638, 658, 691, 699, 779, 800, 801, 802, 809, 811, 825, 826, 842, 849, 853, 859, 860, 863, 866, 869, 870, 872, 876, 877, 878, 880, 885, 900, 916, 977, 978, 980, 982, 984, 985, 988, 991, 994, 998, 1002, 1003, 1004, 1008, 1009, 1010, 1015, 1016, 1024, 1028, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048], "ani": [4, 8, 9, 13, 14, 20, 45, 47, 56, 58, 68, 130, 145, 150, 158, 159, 160, 170, 171, 172, 173, 174, 190, 201, 205, 219, 230, 233, 234, 237, 248, 252, 253, 262, 263, 265, 268, 271, 280, 298, 307, 308, 311, 317, 319, 320, 322, 339, 343, 354, 363, 367, 368, 369, 375, 376, 378, 379, 381, 383, 385, 386, 387, 389, 394, 395, 396, 398, 399, 404, 405, 406, 407, 408, 409, 412, 413, 414, 415, 416, 417, 433, 439, 445, 447, 448, 449, 451, 453, 455, 456, 460, 463, 466, 487, 488, 507, 508, 522, 533, 536, 538, 545, 550, 556, 557, 558, 559, 563, 564, 565, 566, 567, 568, 569, 578, 579, 581, 587, 588, 590, 592, 602, 609, 610, 619, 626, 631, 632, 644, 647, 657, 658, 665, 666, 667, 668, 675, 676, 677, 678, 679, 691, 695, 698, 699, 703, 715, 716, 718, 722, 734, 735, 750, 753, 755, 772, 776, 777, 778, 779, 790, 791, 793, 797, 800, 801, 809, 810, 829, 832, 840, 841, 846, 850, 859, 860, 864, 865, 869, 871, 873, 874, 881, 890, 891, 894, 897, 900, 901, 908, 909, 910, 911, 912, 914, 916, 920, 921, 958, 972, 977, 978, 980, 983, 984, 985, 988, 989, 990, 991, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1008, 1015, 1017, 1021, 1022, 1024, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "tune": [4, 45, 56, 72, 101, 113, 119, 149, 153, 165, 172, 190, 205, 206, 218, 226, 240, 256, 267, 287, 308, 339, 343, 347, 352, 363, 367, 368, 369, 394, 395, 403, 407, 408, 412, 415, 417, 418, 451, 461, 558, 559, 593, 612, 613, 614, 616, 618, 619, 621, 622, 624, 642, 658, 689, 693, 856, 982, 983, 984, 985, 987, 988, 991, 992, 994, 1002, 1003, 1016, 1026, 1031, 1045, 1047], "just": [4, 13, 32, 71, 87, 96, 119, 123, 150, 191, 198, 223, 235, 262, 269, 273, 285, 301, 339, 352, 353, 361, 363, 376, 380, 381, 382, 383, 385, 386, 389, 393, 394, 395, 405, 408, 409, 412, 415, 417, 420, 467, 532, 534, 541, 545, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 578, 583, 609, 610, 645, 651, 656, 657, 659, 661, 665, 666, 667, 675, 676, 677, 803, 819, 849, 857, 858, 977, 984, 987, 988, 989, 992, 996, 998, 1002, 1009, 1022, 1031, 1035, 1037, 1039, 1043, 1047], "had": [4, 9, 48, 126, 158, 237, 307, 313, 320, 363, 381, 382, 416, 419, 443, 978, 988, 1013, 1015, 1031, 1032, 1038, 1039, 1040, 1041, 1042, 1046], "explicit": [4, 168, 172, 177, 229, 237, 245, 343, 367, 368, 369, 380, 382, 393, 395, 396, 409, 416, 422, 471, 498, 500, 501, 540, 550, 551, 630, 637, 638, 640, 675, 797, 798, 805, 844, 852, 860, 900, 905, 952, 956, 980, 982, 984, 988, 998, 1004, 1008, 1010, 1031, 1035, 1040, 1041, 1044, 1048], "pass": [4, 7, 8, 21, 22, 35, 39, 119, 130, 147, 182, 185, 202, 231, 233, 234, 237, 240, 241, 243, 252, 260, 263, 314, 317, 320, 344, 354, 363, 367, 368, 369, 376, 381, 382, 383, 386, 387, 388, 389, 390, 393, 395, 399, 402, 404, 408, 409, 412, 413, 415, 416, 418, 419, 420, 426, 430, 436, 437, 439, 441, 442, 443, 445, 446, 447, 448, 449, 451, 453, 456, 458, 459, 461, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 487, 490, 491, 494, 495, 496, 502, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 580, 581, 587, 588, 589, 590, 592, 593, 596, 606, 607, 609, 610, 616, 619, 625, 630, 631, 633, 634, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 730, 731, 740, 761, 772, 776, 777, 778, 779, 786, 790, 791, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 809, 811, 812, 813, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 871, 872, 873, 874, 875, 877, 879, 880, 881, 889, 890, 891, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 920, 921, 927, 931, 932, 936, 937, 939, 941, 943, 945, 948, 949, 956, 958, 959, 962, 977, 978, 984, 986, 988, 989, 990, 991, 992, 995, 998, 1001, 1002, 1003, 1009, 1013, 1015, 1019, 1028, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "them": [4, 5, 8, 33, 40, 41, 50, 54, 56, 57, 61, 66, 67, 71, 72, 87, 96, 98, 101, 114, 129, 145, 150, 153, 165, 166, 171, 172, 173, 177, 180, 185, 196, 202, 203, 205, 219, 234, 237, 240, 241, 260, 262, 263, 265, 271, 280, 287, 307, 312, 314, 320, 330, 339, 354, 361, 367, 369, 376, 379, 381, 382, 383, 384, 385, 389, 393, 395, 396, 397, 399, 402, 406, 407, 408, 409, 412, 413, 415, 416, 418, 443, 446, 448, 449, 456, 463, 466, 492, 493, 507, 566, 567, 568, 569, 606, 607, 615, 619, 620, 623, 631, 638, 663, 691, 766, 769, 772, 776, 777, 778, 779, 787, 797, 811, 818, 825, 860, 864, 869, 870, 874, 878, 880, 881, 890, 891, 897, 908, 909, 945, 954, 977, 978, 984, 987, 988, 989, 991, 992, 993, 998, 1003, 1004, 1007, 1008, 1012, 1013, 1015, 1022, 1023, 1024, 1031, 1032, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "But": [4, 9, 54, 170, 202, 203, 262, 285, 307, 381, 393, 408, 411, 414, 415, 461, 744, 908, 909, 977, 988, 1003, 1009], "much": [4, 6, 7, 9, 13, 20, 26, 41, 56, 81, 83, 93, 99, 106, 118, 126, 127, 133, 134, 135, 153, 165, 166, 171, 172, 173, 174, 177, 198, 199, 203, 234, 237, 262, 264, 265, 268, 273, 303, 308, 312, 313, 314, 319, 320, 322, 339, 344, 352, 353, 363, 367, 369, 376, 381, 382, 383, 386, 389, 393, 394, 398, 406, 407, 410, 411, 412, 413, 414, 415, 416, 417, 446, 447, 495, 533, 534, 535, 537, 558, 559, 560, 561, 657, 658, 665, 666, 667, 675, 676, 677, 691, 777, 778, 800, 801, 815, 875, 893, 900, 977, 980, 983, 984, 985, 987, 988, 989, 991, 992, 994, 996, 1000, 1001, 1003, 1004, 1009, 1013, 1019, 1020, 1022, 1023, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "monoton": [4, 26, 112, 137, 168, 172, 219, 233, 241, 318, 406, 556, 557, 560, 561, 563, 564, 631, 634, 635, 693, 705, 876, 888, 902, 905, 908, 909, 910, 911, 985, 989, 998, 1003, 1010, 1038, 1042, 1046, 1048], "relationship": [4, 13, 21, 113, 114, 159, 170, 171, 180, 185, 201, 203, 204, 269, 283, 308, 314, 395, 408, 410, 412, 461, 635, 713, 985, 988, 990, 991, 995, 996, 1022, 1036], "ordin": [4, 54, 72, 133, 240, 310, 313, 314, 319, 322, 375, 395, 415, 495, 566, 708, 865, 868, 873, 874, 881, 984, 985, 998, 1009, 1039, 1045], "case": [4, 7, 8, 13, 26, 28, 35, 38, 50, 53, 56, 58, 62, 67, 72, 73, 82, 87, 101, 104, 116, 118, 119, 126, 127, 133, 147, 149, 150, 153, 160, 171, 172, 174, 185, 187, 190, 192, 201, 202, 203, 205, 206, 209, 215, 217, 218, 219, 230, 234, 235, 236, 237, 240, 241, 252, 256, 259, 261, 262, 263, 265, 268, 269, 271, 280, 285, 288, 292, 303, 307, 309, 312, 314, 317, 320, 343, 352, 353, 354, 361, 363, 367, 368, 369, 375, 376, 379, 381, 382, 383, 385, 386, 387, 388, 390, 393, 394, 395, 396, 398, 399, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 436, 439, 442, 443, 445, 446, 450, 452, 462, 463, 464, 466, 473, 495, 507, 508, 514, 538, 540, 541, 542, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 580, 581, 587, 590, 592, 593, 596, 601, 605, 608, 609, 610, 624, 626, 627, 629, 631, 646, 647, 652, 655, 656, 657, 658, 660, 662, 665, 667, 668, 671, 673, 674, 675, 679, 681, 682, 683, 684, 685, 686, 698, 702, 707, 708, 711, 717, 719, 720, 721, 724, 726, 727, 728, 732, 733, 736, 740, 741, 743, 744, 746, 748, 751, 752, 754, 761, 776, 779, 781, 782, 783, 785, 786, 787, 788, 792, 794, 796, 797, 800, 801, 803, 811, 815, 819, 820, 821, 822, 823, 824, 825, 827, 829, 837, 840, 841, 842, 843, 844, 846, 848, 849, 850, 851, 852, 860, 867, 869, 870, 873, 874, 875, 878, 879, 880, 881, 884, 890, 891, 892, 893, 900, 902, 905, 908, 909, 915, 916, 926, 937, 938, 956, 977, 978, 980, 982, 983, 985, 986, 987, 989, 990, 991, 992, 994, 995, 998, 1002, 1003, 1004, 1008, 1009, 1012, 1013, 1015, 1024, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "usual": [4, 13, 41, 79, 80, 82, 125, 126, 128, 133, 170, 172, 187, 201, 202, 256, 259, 262, 271, 272, 308, 320, 339, 363, 367, 368, 379, 381, 383, 389, 393, 394, 395, 399, 405, 408, 409, 412, 413, 415, 416, 417, 449, 455, 537, 539, 541, 546, 558, 559, 606, 607, 629, 639, 657, 658, 665, 666, 667, 675, 676, 677, 691, 724, 756, 803, 824, 828, 900, 937, 977, 978, 980, 983, 984, 985, 987, 988, 989, 992, 993, 994, 995, 998, 1002, 1003, 1004, 1015, 1021, 1022, 1046, 1048], "hot": [4, 72, 118, 121, 133, 171, 201, 271, 308, 309, 313, 319, 339, 395, 415, 416, 550, 565, 580, 647, 657, 658, 668, 679, 863, 865, 867, 868, 871, 873, 874, 881, 984, 998, 1039, 1045, 1046], "encod": [4, 8, 11, 49, 56, 72, 96, 118, 133, 168, 171, 172, 173, 183, 200, 201, 240, 271, 306, 308, 309, 310, 315, 319, 321, 322, 339, 352, 354, 373, 375, 377, 383, 386, 393, 395, 409, 412, 413, 415, 416, 418, 463, 486, 495, 502, 525, 530, 536, 538, 539, 541, 543, 544, 545, 547, 550, 561, 565, 566, 568, 580, 587, 588, 590, 629, 647, 657, 658, 668, 671, 679, 733, 799, 804, 806, 823, 826, 860, 861, 863, 865, 867, 868, 871, 873, 874, 881, 884, 898, 977, 978, 984, 985, 988, 990, 991, 993, 1002, 1008, 1009, 1010, 1026, 1032, 1033, 1039, 1043, 1045, 1046, 1047], "consist": [4, 7, 27, 33, 38, 57, 58, 71, 81, 91, 93, 96, 119, 123, 129, 136, 150, 156, 158, 161, 166, 174, 201, 219, 236, 240, 268, 271, 303, 312, 317, 320, 347, 353, 363, 367, 374, 376, 378, 381, 383, 387, 388, 389, 390, 394, 395, 396, 406, 408, 410, 414, 415, 416, 426, 427, 430, 431, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 489, 496, 530, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 553, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 590, 610, 626, 627, 628, 629, 634, 637, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 669, 671, 672, 673, 676, 677, 678, 686, 687, 688, 689, 690, 699, 733, 795, 796, 804, 828, 829, 830, 832, 833, 834, 835, 843, 844, 846, 848, 851, 852, 858, 863, 864, 865, 867, 871, 872, 875, 876, 878, 879, 881, 892, 893, 896, 900, 901, 903, 904, 906, 909, 911, 920, 922, 943, 959, 962, 977, 980, 981, 982, 984, 985, 987, 988, 989, 991, 992, 998, 1001, 1003, 1004, 1007, 1009, 1013, 1015, 1022, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "scale": [4, 5, 12, 26, 28, 38, 41, 44, 47, 48, 57, 59, 62, 72, 73, 80, 83, 87, 98, 101, 102, 130, 150, 153, 154, 155, 158, 159, 160, 162, 168, 172, 177, 181, 182, 189, 192, 201, 203, 205, 215, 216, 217, 219, 221, 224, 228, 230, 236, 240, 252, 259, 262, 263, 264, 265, 269, 288, 290, 302, 303, 304, 306, 307, 311, 315, 318, 321, 323, 331, 334, 336, 339, 343, 350, 363, 366, 367, 373, 374, 375, 378, 381, 386, 390, 393, 394, 395, 407, 408, 409, 413, 415, 416, 417, 418, 445, 446, 449, 450, 456, 463, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 500, 509, 513, 514, 523, 533, 537, 539, 540, 546, 548, 549, 560, 561, 581, 589, 590, 596, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 630, 631, 640, 643, 644, 645, 646, 648, 651, 657, 658, 659, 660, 661, 671, 673, 675, 676, 677, 680, 686, 687, 688, 689, 691, 693, 698, 702, 715, 739, 745, 755, 757, 767, 773, 775, 803, 811, 814, 826, 827, 828, 840, 841, 842, 857, 858, 861, 864, 869, 870, 872, 875, 877, 878, 880, 885, 886, 887, 889, 890, 892, 893, 900, 901, 902, 903, 904, 905, 906, 964, 965, 966, 977, 980, 981, 984, 988, 989, 990, 991, 992, 996, 1002, 1003, 1009, 1010, 1013, 1015, 1022, 1023, 1025, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "same": [4, 7, 8, 13, 17, 21, 27, 35, 38, 41, 45, 54, 56, 58, 59, 65, 71, 72, 73, 93, 96, 98, 101, 104, 106, 114, 116, 120, 123, 124, 126, 127, 131, 150, 153, 171, 172, 174, 187, 189, 190, 195, 201, 202, 203, 209, 219, 237, 241, 252, 257, 258, 259, 260, 262, 263, 265, 267, 268, 270, 275, 285, 288, 290, 303, 307, 308, 310, 312, 313, 317, 319, 329, 339, 352, 353, 354, 361, 363, 367, 368, 369, 375, 376, 378, 380, 381, 383, 385, 387, 390, 393, 394, 395, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 433, 437, 438, 445, 449, 455, 464, 468, 469, 470, 471, 472, 473, 474, 475, 477, 492, 494, 495, 497, 503, 507, 508, 530, 531, 534, 535, 536, 537, 538, 539, 542, 546, 548, 550, 551, 552, 553, 556, 558, 559, 560, 561, 563, 564, 566, 567, 588, 589, 601, 602, 605, 609, 610, 612, 621, 626, 627, 628, 631, 632, 645, 648, 651, 652, 654, 657, 658, 662, 665, 666, 667, 671, 672, 673, 674, 675, 676, 677, 683, 686, 698, 703, 704, 711, 712, 714, 716, 724, 729, 730, 734, 740, 753, 754, 755, 776, 777, 778, 784, 786, 790, 792, 793, 795, 796, 797, 798, 800, 801, 803, 805, 806, 811, 815, 816, 819, 821, 822, 823, 824, 825, 826, 827, 842, 843, 844, 848, 850, 851, 852, 863, 864, 865, 869, 870, 872, 874, 875, 876, 877, 878, 879, 880, 882, 889, 900, 901, 908, 910, 922, 926, 937, 954, 959, 962, 963, 973, 977, 978, 980, 982, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 998, 1002, 1003, 1004, 1008, 1009, 1019, 1024, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "minmaxscal": [4, 5, 73, 146, 177, 223, 240, 302, 319, 369, 404, 409, 463, 886, 978, 998, 1033, 1036, 1039, 1041, 1042, 1043, 1047, 1048], "although": [4, 9, 26, 120, 133, 170, 198, 219, 230, 249, 283, 343, 363, 369, 383, 395, 408, 409, 413, 416, 495, 814, 817, 871, 987, 989, 990, 991, 994, 1004, 1015, 1022, 1023, 1024, 1031, 1039, 1046], "doe": [4, 7, 8, 9, 12, 13, 25, 26, 28, 32, 35, 41, 47, 54, 56, 58, 71, 73, 74, 87, 107, 113, 118, 119, 122, 123, 128, 133, 150, 159, 171, 172, 185, 198, 201, 207, 219, 222, 223, 224, 227, 230, 233, 234, 235, 237, 238, 240, 249, 250, 257, 262, 264, 265, 269, 271, 272, 283, 285, 298, 307, 309, 311, 313, 314, 320, 321, 329, 330, 337, 339, 347, 349, 352, 353, 354, 367, 375, 379, 381, 382, 383, 385, 389, 394, 395, 399, 402, 406, 407, 408, 409, 412, 413, 415, 416, 417, 418, 433, 439, 441, 445, 446, 448, 449, 453, 455, 464, 466, 471, 472, 478, 486, 498, 502, 507, 526, 534, 536, 537, 538, 540, 543, 545, 548, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 566, 567, 568, 569, 580, 581, 582, 587, 588, 590, 592, 593, 596, 601, 605, 609, 626, 631, 637, 648, 649, 650, 653, 654, 655, 658, 670, 672, 674, 681, 682, 697, 699, 701, 706, 726, 727, 728, 732, 734, 736, 741, 744, 776, 781, 782, 785, 786, 792, 797, 800, 801, 811, 857, 859, 861, 862, 863, 865, 867, 869, 872, 873, 874, 877, 880, 881, 889, 892, 893, 897, 900, 901, 908, 909, 910, 911, 915, 920, 924, 937, 940, 941, 954, 956, 972, 977, 978, 980, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 994, 996, 998, 1002, 1003, 1004, 1024, 1031, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "result": [4, 5, 6, 9, 13, 14, 20, 25, 26, 27, 28, 31, 33, 35, 38, 41, 43, 44, 45, 46, 47, 49, 54, 55, 56, 61, 63, 67, 72, 74, 76, 82, 87, 96, 99, 101, 103, 107, 116, 117, 118, 120, 123, 126, 127, 129, 131, 132, 142, 149, 150, 153, 155, 157, 161, 165, 171, 172, 173, 174, 181, 186, 187, 190, 191, 196, 202, 203, 205, 209, 215, 216, 219, 222, 223, 226, 230, 233, 235, 241, 247, 252, 253, 256, 257, 260, 262, 263, 265, 268, 269, 270, 271, 273, 274, 277, 280, 285, 287, 291, 301, 302, 303, 307, 308, 309, 312, 317, 319, 321, 322, 323, 326, 329, 331, 339, 343, 344, 347, 352, 354, 359, 360, 361, 367, 368, 369, 375, 376, 378, 381, 383, 385, 386, 387, 389, 393, 394, 395, 396, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 433, 439, 440, 442, 444, 445, 446, 449, 450, 451, 452, 453, 454, 456, 458, 461, 463, 466, 468, 469, 470, 471, 472, 473, 474, 475, 478, 488, 507, 508, 510, 512, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 568, 578, 579, 580, 581, 583, 587, 588, 590, 606, 607, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 629, 630, 631, 633, 635, 639, 642, 651, 652, 657, 663, 664, 665, 666, 675, 676, 677, 685, 688, 689, 690, 691, 692, 693, 694, 707, 709, 711, 716, 723, 724, 726, 727, 728, 729, 730, 734, 735, 736, 752, 754, 755, 762, 769, 772, 776, 777, 778, 779, 781, 782, 783, 785, 791, 792, 795, 796, 797, 799, 800, 801, 802, 807, 811, 812, 813, 814, 816, 817, 821, 827, 828, 829, 831, 832, 833, 834, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 862, 864, 865, 873, 874, 877, 878, 881, 889, 893, 897, 900, 902, 905, 908, 909, 910, 911, 912, 913, 920, 921, 936, 937, 939, 943, 953, 959, 962, 978, 980, 982, 983, 984, 985, 987, 988, 989, 991, 992, 993, 994, 995, 996, 998, 1000, 1002, 1003, 1004, 1008, 1009, 1012, 1015, 1019, 1020, 1022, 1023, 1024, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "compar": [4, 5, 9, 11, 13, 20, 21, 25, 26, 28, 35, 37, 38, 40, 41, 42, 44, 48, 50, 53, 55, 56, 57, 58, 59, 62, 65, 68, 69, 72, 73, 74, 75, 81, 82, 85, 87, 88, 92, 93, 99, 104, 106, 112, 113, 114, 116, 118, 122, 123, 126, 128, 129, 131, 133, 136, 137, 141, 150, 157, 165, 166, 168, 171, 172, 173, 174, 179, 181, 183, 185, 189, 190, 196, 198, 201, 202, 204, 205, 207, 209, 211, 215, 218, 219, 220, 222, 223, 226, 229, 232, 235, 238, 240, 241, 243, 245, 249, 250, 255, 257, 259, 260, 261, 263, 265, 267, 269, 271, 273, 274, 276, 278, 280, 285, 286, 287, 288, 290, 291, 292, 294, 295, 296, 297, 299, 300, 303, 305, 306, 308, 311, 312, 314, 315, 319, 343, 352, 353, 354, 360, 361, 363, 369, 376, 378, 381, 383, 405, 406, 408, 410, 411, 412, 413, 415, 417, 418, 439, 440, 441, 443, 444, 445, 447, 448, 449, 451, 457, 462, 463, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 489, 495, 501, 503, 511, 513, 521, 523, 527, 530, 536, 550, 551, 560, 561, 562, 563, 564, 570, 630, 638, 643, 644, 652, 654, 656, 657, 662, 665, 667, 675, 676, 683, 694, 704, 711, 714, 729, 736, 741, 784, 796, 797, 802, 811, 823, 826, 833, 842, 846, 849, 853, 857, 860, 861, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 885, 886, 887, 888, 889, 890, 891, 900, 901, 902, 904, 905, 977, 980, 981, 982, 984, 985, 987, 988, 989, 990, 991, 992, 994, 998, 999, 1002, 1003, 1004, 1007, 1008, 1010, 1022, 1023, 1031, 1033, 1038, 1039, 1044], "linear_model": [4, 7, 8, 10, 14, 26, 28, 31, 55, 72, 74, 76, 87, 118, 133, 135, 136, 139, 141, 149, 150, 153, 165, 168, 170, 171, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 230, 231, 232, 233, 237, 239, 242, 244, 258, 265, 270, 271, 275, 276, 283, 304, 308, 309, 312, 314, 317, 318, 319, 320, 321, 323, 330, 352, 363, 367, 369, 370, 380, 381, 383, 387, 389, 390, 394, 395, 399, 409, 415, 437, 464, 536, 538, 541, 542, 544, 545, 547, 566, 567, 568, 569, 596, 630, 631, 633, 634, 637, 639, 640, 641, 642, 699, 700, 786, 811, 819, 821, 822, 823, 831, 832, 833, 834, 858, 875, 879, 900, 901, 904, 907, 932, 980, 984, 988, 989, 994, 996, 998, 1002, 1010, 1019, 1020, 1022, 1024, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "ridgecv": [4, 76, 133, 150, 171, 239, 395, 399, 415, 567, 642, 671, 674, 984, 1031, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "onehotencod": [4, 72, 118, 123, 133, 171, 172, 201, 219, 232, 240, 242, 244, 313, 318, 320, 323, 375, 395, 409, 415, 465, 466, 565, 580, 581, 863, 867, 868, 871, 874, 881, 978, 998, 1032, 1035, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "one_hot_encod": [4, 123], "handle_unknown": [4, 72, 118, 123, 133, 172, 173, 232, 240, 242, 244, 313, 318, 321, 873, 874, 998, 1035, 1039, 1043, 1044], "ignor": [4, 6, 8, 18, 45, 50, 56, 63, 72, 113, 115, 118, 123, 130, 133, 172, 189, 193, 201, 210, 216, 232, 237, 242, 244, 253, 302, 303, 312, 313, 318, 321, 343, 344, 353, 358, 381, 383, 385, 387, 395, 398, 408, 409, 415, 416, 426, 427, 430, 433, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 459, 460, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 487, 502, 507, 508, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 578, 580, 581, 582, 587, 588, 589, 590, 593, 596, 601, 602, 609, 610, 626, 627, 628, 629, 631, 632, 634, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 706, 712, 713, 724, 727, 728, 736, 753, 754, 761, 767, 772, 776, 781, 782, 785, 786, 795, 796, 798, 799, 800, 802, 804, 805, 806, 807, 810, 812, 813, 814, 815, 816, 817, 818, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 857, 858, 859, 860, 863, 864, 865, 866, 867, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 892, 893, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 934, 963, 984, 985, 988, 990, 994, 998, 1003, 1020, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1048], "sparse_output": [4, 123, 244, 313, 321, 565, 867, 871, 873, 879, 884, 998, 1046, 1047], "alpha": [4, 5, 7, 8, 10, 12, 13, 14, 17, 18, 25, 27, 32, 35, 38, 41, 43, 46, 53, 57, 61, 66, 76, 83, 87, 96, 98, 99, 101, 102, 103, 105, 106, 113, 115, 116, 122, 126, 129, 130, 132, 133, 134, 150, 153, 156, 158, 159, 160, 161, 162, 165, 166, 171, 180, 181, 182, 183, 185, 186, 187, 189, 190, 195, 196, 198, 199, 201, 202, 203, 205, 206, 210, 213, 214, 219, 222, 223, 226, 235, 236, 243, 247, 262, 263, 264, 265, 266, 269, 270, 272, 274, 275, 283, 285, 288, 290, 293, 295, 301, 303, 307, 308, 309, 310, 312, 314, 318, 320, 321, 328, 330, 336, 337, 340, 341, 343, 344, 347, 348, 349, 352, 367, 376, 383, 387, 393, 410, 411, 413, 415, 417, 418, 420, 445, 470, 471, 477, 526, 530, 532, 534, 535, 536, 537, 538, 539, 541, 542, 544, 545, 546, 547, 559, 594, 595, 597, 610, 612, 614, 615, 622, 630, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 659, 660, 661, 662, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 686, 721, 746, 835, 836, 837, 839, 857, 858, 896, 908, 909, 910, 911, 977, 984, 988, 990, 992, 996, 1001, 1002, 1003, 1004, 1019, 1022, 1024, 1028, 1031, 1033, 1034, 1035, 1036, 1038, 1039, 1043, 1044, 1045, 1046, 1047], "logspac": [4, 12, 74, 79, 104, 139, 140, 150, 154, 159, 171, 194, 205, 206, 234, 236, 251, 263, 275, 277, 289, 301, 309, 312, 339, 347, 819, 983, 984, 1019, 1020, 1022], "naive_linear_pipelin": 4, "transform": [4, 5, 6, 8, 10, 12, 14, 26, 28, 45, 47, 48, 49, 52, 55, 58, 63, 70, 74, 75, 77, 87, 90, 91, 98, 99, 101, 103, 105, 106, 112, 117, 119, 123, 124, 132, 133, 135, 137, 147, 159, 166, 168, 171, 172, 173, 177, 193, 201, 202, 209, 215, 217, 219, 223, 226, 230, 232, 233, 235, 237, 238, 240, 244, 249, 258, 259, 260, 263, 271, 283, 285, 287, 293, 294, 295, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 322, 339, 342, 343, 352, 354, 363, 370, 375, 376, 377, 378, 381, 383, 386, 390, 395, 399, 404, 406, 407, 408, 410, 413, 415, 416, 417, 418, 424, 429, 432, 436, 440, 441, 442, 444, 446, 448, 451, 463, 464, 465, 466, 467, 481, 482, 483, 484, 487, 488, 495, 502, 507, 508, 513, 514, 523, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 548, 549, 556, 558, 560, 563, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 634, 635, 637, 638, 639, 640, 641, 652, 657, 662, 672, 675, 683, 687, 688, 689, 690, 691, 693, 700, 701, 712, 751, 752, 783, 797, 800, 801, 811, 826, 829, 835, 844, 849, 852, 856, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 898, 900, 902, 905, 906, 929, 931, 946, 977, 978, 980, 982, 984, 985, 988, 989, 992, 1002, 1003, 1005, 1008, 1009, 1010, 1011, 1015, 1020, 1021, 1024, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "remaind": [4, 123, 171, 190, 201, 203, 219, 240, 322, 357, 409, 463, 466, 1031, 1038, 1039, 1040, 1043, 1044, 1047], "alpha_": [4, 83, 139, 171, 181, 189, 190, 471, 610, 643, 644, 646, 650, 652, 654, 655, 660, 662, 672, 674, 984, 1004, 1019, 1031, 1038], "7298221281347033": 4, "142": [4, 13, 59, 415], "014": [4, 270, 320, 324, 387, 1010], "184": [4, 154, 163, 201, 238, 245, 304, 387, 1010, 1022], "020": [4, 996], "affirm": 4, "select": [4, 7, 9, 10, 21, 35, 37, 38, 45, 48, 56, 58, 63, 66, 69, 70, 72, 75, 77, 79, 83, 93, 95, 96, 100, 106, 107, 108, 113, 115, 121, 123, 126, 133, 140, 145, 147, 151, 158, 160, 171, 172, 174, 177, 179, 181, 183, 185, 187, 188, 200, 205, 209, 216, 219, 220, 223, 230, 234, 236, 240, 246, 247, 248, 249, 253, 254, 260, 261, 262, 263, 267, 275, 289, 307, 312, 313, 319, 323, 326, 327, 330, 334, 339, 347, 350, 352, 353, 354, 363, 367, 368, 370, 376, 378, 379, 381, 383, 389, 394, 395, 405, 408, 409, 410, 413, 415, 416, 418, 442, 444, 445, 446, 448, 450, 452, 457, 458, 459, 463, 465, 466, 471, 472, 475, 487, 488, 491, 492, 495, 496, 499, 500, 501, 503, 511, 514, 531, 533, 534, 539, 540, 543, 548, 550, 557, 558, 559, 562, 564, 580, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 626, 630, 631, 644, 645, 646, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 670, 672, 675, 677, 681, 682, 690, 691, 696, 711, 715, 717, 752, 786, 790, 791, 795, 796, 797, 800, 801, 802, 803, 811, 822, 823, 824, 826, 828, 842, 843, 844, 846, 848, 850, 851, 852, 860, 861, 865, 870, 876, 880, 897, 900, 901, 905, 908, 909, 910, 911, 916, 958, 982, 983, 985, 987, 988, 989, 991, 992, 994, 998, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1013, 1015, 1016, 1018, 1022, 1023, 1024, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048], "specifi": [4, 21, 56, 96, 123, 124, 154, 157, 159, 160, 161, 190, 202, 209, 247, 270, 367, 368, 375, 379, 381, 383, 390, 394, 395, 399, 402, 408, 409, 412, 413, 415, 417, 418, 420, 422, 436, 440, 444, 449, 451, 462, 463, 466, 468, 469, 471, 472, 473, 474, 475, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 502, 514, 526, 530, 532, 536, 537, 539, 540, 545, 546, 551, 556, 558, 559, 560, 561, 563, 566, 567, 582, 583, 592, 593, 596, 601, 609, 610, 619, 630, 631, 632, 637, 642, 645, 646, 647, 650, 651, 652, 654, 655, 657, 658, 659, 660, 661, 662, 664, 667, 668, 671, 672, 673, 674, 675, 676, 679, 680, 681, 682, 683, 686, 690, 697, 699, 701, 708, 710, 727, 728, 736, 740, 752, 769, 777, 778, 781, 782, 785, 797, 799, 800, 801, 803, 804, 806, 810, 811, 814, 819, 820, 821, 822, 823, 824, 825, 827, 831, 834, 835, 836, 838, 839, 840, 841, 845, 850, 873, 874, 875, 878, 879, 881, 896, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 932, 939, 972, 978, 984, 985, 987, 988, 991, 995, 996, 998, 1001, 1002, 1003, 1019, 1023, 1031, 1037, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048], "three": [4, 7, 27, 35, 41, 42, 47, 56, 59, 79, 91, 92, 113, 118, 120, 123, 125, 134, 135, 136, 147, 150, 161, 171, 185, 193, 198, 201, 203, 210, 212, 236, 237, 247, 250, 283, 313, 314, 318, 368, 374, 378, 385, 398, 405, 408, 412, 413, 414, 416, 450, 461, 497, 708, 939, 981, 983, 984, 985, 988, 991, 998, 1002, 1003, 1007, 1015, 1023, 1031], "higher": [4, 13, 58, 81, 99, 104, 113, 116, 118, 119, 126, 129, 153, 155, 160, 161, 171, 172, 173, 177, 201, 202, 205, 219, 226, 227, 253, 256, 260, 262, 265, 276, 290, 312, 339, 343, 352, 353, 354, 363, 367, 376, 379, 383, 405, 408, 410, 415, 417, 418, 419, 443, 447, 448, 470, 477, 508, 531, 538, 542, 547, 552, 553, 556, 557, 558, 559, 560, 561, 563, 564, 565, 572, 587, 590, 606, 607, 618, 626, 630, 634, 636, 645, 646, 651, 652, 659, 660, 661, 662, 675, 677, 678, 703, 722, 726, 750, 783, 795, 797, 800, 801, 803, 811, 818, 819, 824, 827, 846, 849, 875, 892, 893, 894, 900, 901, 902, 903, 904, 905, 906, 913, 980, 984, 985, 987, 988, 991, 995, 998, 1002, 1003, 1022, 1024, 1032, 1037, 1039, 1046, 1048], "suspect": 4, "origin": [4, 5, 14, 17, 21, 22, 47, 48, 49, 52, 57, 59, 75, 76, 91, 96, 98, 99, 106, 131, 146, 147, 150, 153, 155, 157, 158, 165, 166, 172, 177, 189, 190, 205, 222, 223, 224, 226, 227, 234, 235, 236, 240, 253, 259, 265, 288, 293, 304, 308, 312, 323, 327, 343, 345, 352, 354, 363, 376, 378, 380, 381, 383, 385, 386, 393, 395, 402, 405, 408, 409, 412, 413, 415, 416, 418, 419, 420, 421, 433, 436, 440, 442, 443, 444, 445, 446, 448, 449, 458, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 492, 493, 494, 500, 518, 530, 532, 533, 534, 536, 537, 538, 539, 540, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 575, 580, 581, 583, 587, 589, 590, 593, 606, 607, 609, 610, 613, 629, 631, 634, 637, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 689, 691, 695, 700, 726, 761, 767, 798, 799, 804, 806, 815, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 845, 846, 847, 850, 851, 857, 858, 860, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 876, 877, 878, 879, 880, 889, 892, 893, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 918, 920, 921, 925, 926, 947, 959, 962, 981, 982, 984, 985, 987, 988, 991, 994, 999, 1000, 1001, 1002, 1005, 1008, 1013, 1015, 1024, 1034, 1035, 1037, 1039, 1041, 1043, 1045, 1047], "mere": [4, 262, 395, 827, 1002], "min": [4, 10, 11, 12, 13, 14, 26, 28, 32, 53, 59, 76, 96, 99, 113, 115, 122, 125, 126, 131, 142, 150, 155, 157, 158, 159, 166, 171, 183, 189, 190, 196, 203, 204, 207, 223, 234, 235, 238, 283, 291, 292, 298, 301, 303, 307, 309, 310, 312, 331, 345, 348, 390, 408, 411, 413, 481, 482, 483, 484, 511, 533, 534, 537, 539, 540, 548, 549, 562, 626, 630, 631, 653, 654, 655, 656, 681, 682, 703, 739, 755, 778, 800, 801, 849, 857, 858, 870, 879, 886, 937, 953, 984, 988, 991, 998, 1037, 1040, 1042, 1043, 1046], "prevent": [4, 56, 126, 147, 170, 202, 205, 307, 313, 314, 339, 352, 357, 363, 381, 383, 385, 393, 394, 408, 413, 416, 441, 448, 487, 488, 560, 561, 589, 590, 610, 726, 783, 857, 858, 885, 886, 888, 889, 890, 891, 988, 990, 993, 994, 998, 1004, 1022, 1033, 1034, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "properli": [4, 13, 26, 56, 130, 158, 257, 317, 369, 379, 381, 385, 389, 414, 900, 901, 902, 903, 904, 905, 906, 977, 1034, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "automat": [4, 8, 12, 47, 64, 66, 72, 104, 139, 149, 180, 204, 247, 248, 260, 263, 307, 314, 318, 322, 330, 341, 343, 368, 370, 376, 379, 381, 383, 385, 389, 395, 398, 404, 408, 409, 410, 413, 415, 416, 417, 432, 449, 451, 455, 461, 463, 464, 466, 495, 498, 514, 537, 539, 540, 546, 548, 550, 556, 560, 563, 582, 587, 590, 593, 601, 642, 644, 645, 646, 651, 652, 657, 658, 659, 660, 661, 662, 665, 666, 667, 671, 673, 674, 675, 677, 680, 683, 686, 687, 690, 694, 799, 814, 817, 826, 836, 857, 858, 861, 862, 864, 873, 874, 881, 892, 893, 900, 901, 902, 905, 908, 910, 914, 926, 959, 962, 977, 979, 982, 987, 992, 998, 1002, 1004, 1008, 1009, 1019, 1031, 1034, 1035, 1036, 1042, 1045, 1046, 1047, 1048], "raw": [4, 12, 15, 38, 82, 98, 133, 158, 171, 177, 304, 314, 328, 354, 367, 376, 383, 389, 395, 406, 407, 408, 410, 413, 416, 468, 473, 500, 501, 502, 558, 559, 560, 562, 581, 587, 588, 589, 590, 633, 676, 689, 693, 704, 784, 846, 904, 985, 988, 992, 994, 995, 998, 1001, 1021, 1023, 1032, 1036, 1039, 1042], "recogn": [4, 5, 30, 36, 52, 54, 87, 90, 99, 121, 148, 168, 202, 256, 260, 289, 304, 320, 326, 327, 387, 399, 408, 416, 501, 696, 712, 826, 905, 988, 1010, 1015, 1048], "increas": [4, 7, 15, 27, 38, 44, 56, 58, 59, 62, 76, 99, 113, 114, 116, 119, 122, 130, 146, 150, 153, 157, 158, 159, 162, 171, 172, 177, 181, 183, 192, 201, 202, 203, 205, 219, 227, 234, 248, 249, 262, 263, 264, 269, 275, 301, 308, 309, 312, 319, 327, 339, 347, 353, 354, 357, 367, 368, 369, 380, 389, 390, 406, 408, 410, 413, 415, 416, 419, 439, 443, 445, 451, 462, 470, 471, 477, 531, 535, 552, 553, 556, 557, 558, 559, 560, 561, 563, 564, 566, 567, 587, 590, 626, 634, 635, 636, 644, 649, 650, 653, 654, 655, 657, 658, 665, 666, 667, 675, 676, 677, 681, 682, 684, 685, 691, 705, 706, 711, 780, 787, 800, 801, 829, 848, 850, 851, 852, 855, 857, 858, 874, 900, 908, 909, 910, 911, 937, 977, 979, 983, 984, 985, 987, 988, 991, 998, 1002, 1003, 1004, 1013, 1031, 1033, 1036, 1040, 1042, 1043, 1046], "strong": [4, 13, 55, 153, 168, 170, 171, 179, 181, 194, 198, 199, 205, 206, 207, 220, 236, 283, 314, 347, 407, 413, 415, 523, 648, 671, 981, 982, 984, 985, 987, 995, 1003, 1010, 1022], "similar": [4, 5, 7, 12, 18, 21, 26, 27, 35, 38, 50, 52, 58, 61, 76, 87, 96, 100, 113, 126, 149, 153, 160, 170, 171, 172, 173, 185, 201, 203, 215, 222, 224, 225, 226, 230, 236, 237, 253, 259, 262, 265, 268, 269, 270, 280, 283, 285, 307, 320, 338, 343, 347, 353, 354, 363, 367, 373, 375, 377, 379, 380, 381, 383, 386, 387, 390, 393, 395, 402, 405, 406, 408, 411, 412, 413, 415, 416, 417, 418, 419, 439, 440, 442, 443, 444, 449, 451, 453, 454, 502, 507, 508, 535, 581, 588, 589, 590, 609, 676, 691, 694, 702, 704, 714, 718, 723, 726, 727, 729, 732, 736, 738, 753, 758, 759, 784, 790, 791, 794, 795, 796, 822, 827, 872, 893, 896, 900, 901, 902, 903, 921, 977, 980, 981, 983, 984, 985, 987, 989, 991, 992, 994, 995, 998, 1000, 1001, 1002, 1003, 1004, 1008, 1009, 1015, 1023, 1026, 1031, 1035, 1036, 1037, 1039, 1043, 1044], "magnitud": [4, 106, 115, 154, 166, 171, 218, 240, 267, 307, 312, 320, 367, 376, 387, 408, 415, 418, 612, 651, 703, 880, 984, 988, 992, 998, 1002, 1004, 1033, 1040], "discret": [4, 7, 32, 47, 76, 93, 106, 113, 131, 152, 163, 168, 172, 181, 201, 208, 219, 241, 280, 295, 301, 306, 310, 315, 359, 369, 373, 376, 377, 385, 394, 395, 408, 413, 416, 418, 437, 438, 447, 451, 459, 460, 461, 491, 513, 514, 521, 552, 558, 570, 587, 588, 591, 594, 595, 598, 599, 606, 607, 609, 610, 611, 615, 616, 617, 656, 657, 740, 797, 808, 826, 835, 836, 839, 861, 865, 873, 874, 877, 880, 889, 900, 905, 909, 951, 977, 984, 985, 986, 988, 989, 991, 1004, 1008, 1010, 1015, 1026, 1033, 1036, 1044, 1045, 1046], "manner": [4, 76, 96, 147, 172, 177, 249, 321, 322, 368, 381, 387, 408, 413, 415, 416, 708, 840, 841, 977, 988, 1004, 1034, 1041], "integ": [4, 18, 49, 54, 72, 171, 201, 219, 318, 319, 363, 367, 375, 376, 378, 383, 386, 390, 394, 395, 408, 409, 412, 413, 415, 416, 433, 436, 461, 463, 466, 471, 486, 495, 497, 500, 501, 502, 504, 507, 508, 511, 513, 514, 518, 521, 549, 558, 559, 560, 561, 562, 566, 567, 571, 581, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 626, 627, 628, 629, 631, 632, 643, 650, 654, 658, 664, 672, 674, 675, 698, 713, 733, 797, 799, 800, 801, 802, 804, 806, 811, 812, 813, 814, 816, 817, 820, 823, 831, 834, 836, 839, 840, 841, 865, 873, 874, 879, 880, 881, 884, 894, 896, 908, 909, 910, 911, 916, 951, 952, 953, 978, 984, 989, 991, 998, 1001, 1003, 1004, 1015, 1022, 1024, 1031, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "uniqu": [4, 17, 25, 31, 43, 48, 49, 58, 59, 64, 68, 120, 121, 127, 128, 171, 173, 185, 216, 219, 249, 271, 294, 313, 314, 323, 329, 352, 353, 354, 375, 383, 390, 395, 408, 409, 412, 415, 416, 439, 449, 453, 455, 463, 466, 495, 548, 549, 550, 552, 553, 556, 557, 558, 559, 560, 561, 563, 564, 565, 609, 632, 633, 634, 665, 667, 675, 696, 708, 752, 780, 797, 799, 811, 823, 828, 829, 832, 838, 847, 850, 852, 857, 871, 873, 874, 881, 884, 900, 902, 908, 909, 910, 911, 925, 937, 951, 952, 984, 989, 998, 1013, 1022, 1039, 1042, 1043, 1045, 1046, 1047], "decid": [4, 11, 58, 61, 72, 253, 259, 262, 269, 376, 381, 396, 416, 418, 449, 456, 558, 559, 610, 634, 645, 646, 649, 650, 651, 652, 653, 654, 655, 659, 660, 661, 662, 670, 680, 683, 795, 842, 843, 844, 846, 848, 850, 851, 852, 863, 987, 994, 1013, 1044, 1047], "treat": [4, 6, 72, 123, 133, 165, 171, 201, 271, 313, 319, 329, 363, 381, 393, 395, 405, 415, 416, 441, 560, 561, 587, 588, 590, 606, 607, 631, 637, 644, 670, 673, 727, 728, 736, 752, 781, 782, 785, 786, 869, 870, 876, 877, 880, 881, 885, 888, 889, 891, 900, 901, 945, 978, 980, 984, 988, 989, 995, 998, 1002, 1004, 1020, 1035, 1043, 1047, 1048], "therebi": [4, 171, 412, 415, 980, 1041], "assumpt": [4, 9, 13, 26, 28, 37, 44, 69, 79, 80, 99, 158, 162, 168, 170, 201, 203, 230, 258, 283, 307, 387, 393, 394, 397, 406, 407, 408, 410, 412, 413, 416, 418, 446, 450, 452, 487, 502, 511, 531, 533, 540, 649, 653, 796, 797, 800, 801, 811, 837, 892, 893, 982, 984, 988, 989, 990, 991, 993, 994, 995, 998, 1001, 1004, 1010, 1038, 1044], "impli": [4, 153, 352, 353, 354, 413, 415, 418, 473, 572, 581, 609, 610, 621, 733, 924, 984, 985, 1024, 1042], "give": [4, 12, 13, 14, 25, 26, 40, 45, 50, 61, 63, 65, 71, 72, 76, 98, 125, 153, 158, 162, 165, 171, 172, 190, 192, 198, 201, 202, 203, 230, 253, 259, 264, 271, 287, 291, 294, 304, 320, 321, 330, 367, 369, 376, 378, 380, 381, 383, 387, 389, 393, 394, 395, 396, 402, 405, 406, 407, 408, 409, 410, 413, 415, 416, 418, 420, 433, 445, 446, 448, 450, 458, 471, 495, 498, 502, 532, 537, 548, 549, 550, 551, 556, 557, 563, 564, 565, 592, 593, 596, 606, 607, 637, 646, 660, 664, 675, 719, 728, 734, 737, 792, 797, 800, 801, 811, 821, 822, 823, 825, 840, 841, 842, 843, 844, 846, 848, 850, 851, 852, 877, 878, 880, 881, 889, 984, 988, 991, 992, 993, 995, 996, 998, 1002, 1003, 1004, 1008, 1013, 1015, 1017, 1022, 1023, 1024, 1031, 1035, 1038, 1039, 1041, 1042, 1043, 1045, 1047], "lot": [4, 83, 171, 205, 376, 381, 382, 383, 389, 413, 415, 800, 801, 892, 893, 977, 1000, 1002, 1003, 1008, 1009, 1013, 1023, 1024, 1031, 1036, 1038, 1039, 1040, 1041, 1043], "addit": [4, 5, 7, 12, 14, 15, 67, 72, 83, 91, 96, 99, 113, 117, 119, 120, 123, 124, 149, 158, 159, 160, 166, 171, 172, 180, 185, 190, 202, 203, 205, 226, 241, 264, 271, 276, 283, 307, 318, 319, 328, 343, 354, 359, 363, 367, 368, 373, 374, 375, 376, 377, 379, 380, 381, 383, 386, 387, 389, 393, 394, 396, 398, 402, 407, 408, 410, 412, 413, 416, 417, 418, 419, 432, 440, 441, 443, 444, 445, 449, 456, 468, 473, 495, 502, 531, 533, 535, 536, 538, 540, 541, 542, 548, 552, 553, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 581, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 610, 611, 618, 627, 629, 630, 634, 637, 638, 639, 640, 641, 642, 643, 644, 669, 686, 687, 691, 697, 698, 701, 740, 756, 757, 786, 790, 795, 796, 803, 819, 829, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 856, 863, 864, 865, 866, 869, 870, 872, 873, 874, 875, 877, 878, 879, 880, 882, 892, 893, 900, 901, 931, 937, 977, 982, 984, 988, 989, 991, 992, 995, 998, 1000, 1001, 1002, 1003, 1004, 1008, 1015, 1026, 1031, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "level": [4, 9, 11, 12, 17, 28, 35, 42, 54, 96, 97, 118, 122, 142, 150, 152, 153, 154, 157, 160, 161, 162, 163, 168, 171, 172, 212, 213, 214, 215, 216, 219, 230, 234, 235, 251, 262, 265, 271, 272, 291, 298, 337, 338, 340, 341, 343, 345, 347, 353, 361, 367, 376, 378, 379, 381, 383, 387, 395, 397, 398, 399, 406, 413, 416, 418, 422, 453, 467, 492, 493, 495, 502, 520, 530, 535, 536, 546, 560, 561, 566, 567, 610, 614, 621, 622, 624, 665, 666, 667, 675, 676, 677, 686, 689, 691, 693, 699, 701, 715, 721, 726, 783, 821, 822, 823, 825, 828, 829, 856, 857, 858, 898, 913, 977, 984, 988, 989, 991, 996, 1002, 1004, 1008, 1009, 1010, 1024, 1034, 1042, 1045, 1046, 1047], "one_hot_linear_pipelin": 4, "one_hot_tim": 4, "099": 4, "011": [4, 270, 285, 353, 387], "131": [4, 14, 57, 387, 988, 1032], "rate": [4, 113, 117, 123, 145, 172, 201, 208, 219, 234, 240, 259, 262, 269, 271, 272, 302, 303, 304, 369, 381, 408, 409, 413, 417, 445, 465, 535, 552, 553, 558, 559, 560, 561, 591, 594, 595, 597, 598, 599, 605, 643, 644, 667, 675, 676, 677, 691, 697, 701, 725, 780, 787, 856, 857, 858, 894, 977, 984, 985, 988, 991, 992, 1002, 1004, 1013, 1035, 1039, 1040], "better": [4, 5, 9, 13, 20, 21, 25, 32, 51, 56, 75, 76, 79, 80, 81, 82, 87, 91, 96, 99, 116, 119, 125, 126, 133, 145, 157, 158, 159, 161, 165, 173, 181, 185, 187, 190, 201, 202, 203, 209, 216, 218, 219, 226, 235, 236, 237, 240, 252, 256, 262, 264, 265, 268, 271, 272, 280, 283, 304, 311, 312, 321, 322, 339, 347, 352, 353, 354, 357, 363, 367, 376, 380, 381, 382, 383, 385, 386, 387, 389, 395, 397, 402, 404, 406, 408, 410, 412, 413, 414, 415, 416, 418, 448, 449, 537, 539, 546, 558, 559, 560, 561, 606, 607, 629, 670, 676, 691, 708, 723, 732, 737, 740, 761, 796, 825, 835, 836, 837, 838, 839, 840, 841, 846, 857, 858, 877, 878, 881, 889, 892, 893, 900, 901, 977, 978, 980, 981, 982, 984, 985, 987, 988, 990, 991, 992, 996, 998, 1001, 1002, 1004, 1009, 1012, 1013, 1017, 1019, 1024, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "confirm": [4, 13, 87, 116, 123, 126, 173, 201, 203, 265, 268, 271, 312, 354, 385, 977, 998, 1039], "benefit": [4, 47, 57, 75, 76, 113, 171, 215, 226, 233, 235, 287, 321, 367, 381, 390, 395, 406, 408, 447, 460, 467, 507, 566, 567, 657, 658, 665, 666, 667, 675, 676, 677, 831, 898, 900, 977, 983, 991, 996, 998, 1009, 1013, 1031, 1034, 1035, 1036, 1043, 1044, 1045, 1046], "ad": [4, 14, 21, 76, 104, 106, 113, 119, 124, 146, 153, 159, 160, 180, 185, 203, 205, 226, 236, 237, 262, 263, 264, 307, 318, 319, 320, 321, 322, 323, 330, 343, 353, 380, 381, 385, 387, 393, 395, 396, 413, 415, 416, 417, 418, 432, 440, 441, 442, 444, 446, 448, 451, 458, 461, 463, 467, 481, 482, 483, 484, 513, 521, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 610, 612, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 647, 649, 653, 657, 658, 668, 675, 677, 679, 687, 688, 691, 694, 712, 713, 727, 728, 773, 775, 781, 782, 785, 787, 795, 796, 797, 811, 821, 828, 838, 844, 849, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 892, 893, 897, 898, 900, 901, 908, 909, 910, 911, 927, 977, 981, 983, 984, 985, 989, 991, 992, 994, 1009, 1013, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "progress": [4, 7, 8, 96, 136, 150, 166, 194, 290, 321, 378, 381, 385, 386, 396, 399, 404, 408, 558, 559, 691, 829, 831, 834, 849, 857, 858, 1013, 1022, 1024, 1031, 1033, 1040, 1045], "veri": [4, 13, 26, 28, 40, 41, 43, 45, 51, 53, 61, 63, 81, 82, 83, 86, 93, 99, 102, 126, 131, 139, 158, 165, 171, 172, 173, 190, 201, 202, 203, 206, 209, 219, 226, 230, 236, 237, 240, 247, 264, 265, 268, 269, 271, 272, 277, 285, 303, 307, 320, 326, 329, 339, 343, 349, 352, 354, 363, 367, 376, 380, 381, 383, 386, 387, 389, 393, 394, 395, 402, 406, 408, 410, 412, 413, 414, 415, 416, 417, 418, 441, 446, 451, 461, 470, 471, 477, 499, 503, 509, 556, 557, 560, 561, 563, 564, 566, 567, 588, 589, 621, 649, 650, 653, 654, 655, 663, 681, 682, 684, 690, 691, 694, 704, 741, 744, 790, 795, 797, 805, 807, 811, 814, 817, 840, 841, 865, 869, 870, 871, 880, 892, 893, 902, 905, 908, 909, 910, 911, 937, 977, 980, 981, 983, 984, 985, 986, 987, 988, 991, 992, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1012, 1013, 1022, 1023, 1031, 1036, 1037, 1039, 1042, 1044, 1046, 1047], "new": [4, 7, 8, 10, 51, 57, 59, 61, 71, 72, 91, 104, 113, 115, 117, 118, 119, 126, 132, 133, 147, 150, 153, 159, 166, 173, 174, 201, 207, 215, 230, 261, 264, 269, 283, 289, 291, 313, 318, 321, 327, 330, 338, 343, 363, 368, 369, 375, 376, 378, 379, 380, 383, 384, 385, 387, 389, 390, 394, 395, 396, 398, 406, 408, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 426, 430, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 499, 500, 501, 503, 504, 507, 508, 509, 511, 522, 525, 526, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 573, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 699, 700, 701, 703, 707, 712, 713, 717, 720, 721, 722, 723, 725, 726, 727, 728, 729, 732, 737, 738, 739, 740, 741, 744, 751, 752, 755, 759, 764, 765, 767, 776, 780, 781, 782, 783, 785, 786, 787, 788, 789, 795, 796, 797, 798, 799, 800, 801, 803, 804, 806, 810, 811, 815, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 886, 888, 889, 890, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 918, 920, 921, 923, 931, 932, 936, 937, 944, 945, 946, 947, 948, 951, 954, 956, 958, 963, 969, 975, 977, 978, 980, 984, 988, 989, 991, 992, 993, 994, 998, 1000, 1001, 1002, 1003, 1009, 1013, 1015, 1016, 1019, 1022, 1024, 1029, 1033, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "minut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 376, 381, 985, 1007], "1440": 4, "caus": [4, 26, 28, 126, 154, 171, 199, 201, 205, 206, 219, 283, 314, 343, 354, 363, 379, 386, 406, 408, 413, 414, 416, 418, 442, 446, 448, 458, 508, 531, 581, 588, 609, 610, 835, 836, 837, 839, 864, 873, 875, 878, 879, 920, 921, 977, 978, 984, 988, 996, 998, 1001, 1009, 1015, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048], "signific": [4, 56, 119, 126, 145, 146, 168, 205, 219, 255, 262, 278, 283, 285, 311, 352, 363, 375, 376, 393, 408, 411, 412, 415, 503, 531, 533, 548, 549, 626, 657, 658, 665, 666, 667, 675, 676, 677, 816, 825, 900, 902, 903, 904, 905, 906, 987, 988, 991, 1010, 1031, 1033, 1034, 1035, 1039], "overfit": [4, 118, 126, 168, 172, 173, 174, 180, 202, 205, 230, 249, 255, 257, 263, 267, 277, 278, 301, 308, 309, 311, 312, 313, 314, 339, 347, 357, 359, 360, 376, 395, 406, 412, 415, 436, 487, 488, 560, 561, 566, 567, 656, 797, 800, 801, 811, 822, 823, 857, 858, 860, 875, 879, 983, 992, 994, 996, 998, 1004, 1010, 1013, 1022, 1034], "avoid": [4, 7, 12, 13, 45, 58, 63, 73, 118, 119, 171, 172, 203, 205, 210, 219, 225, 237, 240, 257, 263, 267, 293, 295, 296, 311, 312, 335, 336, 353, 368, 379, 381, 382, 383, 385, 386, 387, 395, 396, 398, 402, 406, 408, 410, 412, 415, 416, 419, 439, 441, 443, 451, 461, 467, 492, 493, 494, 498, 507, 508, 533, 538, 542, 584, 585, 633, 645, 646, 651, 652, 659, 660, 661, 662, 680, 683, 688, 690, 692, 694, 711, 790, 797, 798, 802, 808, 811, 821, 822, 823, 860, 863, 869, 870, 872, 877, 878, 879, 880, 883, 885, 886, 887, 889, 890, 891, 893, 898, 937, 982, 985, 987, 988, 991, 992, 994, 996, 998, 1003, 1004, 1009, 1024, 1026, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "kbinsdiscret": [4, 7, 54, 76, 93, 168, 181, 201, 219, 241, 295, 306, 309, 314, 315, 322, 359, 511, 656, 863, 879, 909, 998, 1010, 1039, 1043, 1044, 1045, 1047], "re": [4, 8, 14, 27, 57, 71, 72, 113, 123, 156, 170, 219, 237, 248, 252, 265, 267, 271, 318, 352, 354, 368, 381, 382, 385, 389, 394, 396, 399, 406, 412, 416, 468, 469, 470, 471, 472, 473, 474, 475, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 645, 651, 659, 661, 799, 814, 817, 908, 909, 910, 911, 984, 989, 991, 998, 1003, 1009, 1013, 1024, 1031, 1035, 1036, 1038, 1040], "fine": [4, 38, 122, 150, 205, 217, 253, 260, 343, 359, 360, 378, 385, 395, 416, 445, 937, 956, 991, 994, 1003, 1009, 1041], "grain": [4, 32, 38, 235, 253, 309, 387, 416, 445, 956, 1009], "still": [4, 13, 33, 45, 54, 56, 58, 63, 83, 91, 100, 121, 126, 133, 153, 159, 170, 171, 173, 174, 180, 185, 201, 203, 219, 235, 265, 271, 307, 319, 320, 323, 352, 353, 363, 369, 375, 380, 381, 383, 385, 386, 387, 389, 393, 395, 408, 412, 415, 416, 419, 439, 443, 453, 473, 495, 626, 631, 634, 636, 716, 754, 776, 779, 790, 791, 800, 801, 814, 817, 878, 880, 900, 918, 977, 978, 982, 984, 987, 991, 994, 996, 1003, 1004, 1007, 1009, 1013, 1031, 1033, 1036, 1037, 1039, 1040, 1041, 1044, 1045, 1046, 1047], "express": [4, 7, 12, 113, 119, 153, 158, 171, 262, 263, 313, 319, 336, 343, 354, 375, 376, 381, 382, 387, 408, 413, 414, 416, 449, 455, 456, 587, 588, 590, 715, 797, 803, 811, 819, 821, 822, 823, 824, 827, 847, 980, 984, 988, 992, 998, 999, 1004, 1039], "advantag": [4, 5, 40, 56, 58, 96, 101, 201, 202, 230, 248, 263, 283, 321, 363, 395, 406, 412, 413, 416, 418, 440, 444, 459, 533, 588, 648, 673, 674, 761, 828, 829, 830, 860, 861, 900, 901, 902, 903, 904, 905, 906, 977, 980, 983, 984, 985, 988, 989, 991, 992, 998, 1002, 1003, 1004, 1034], "final": [4, 13, 27, 35, 41, 43, 56, 71, 72, 81, 83, 87, 92, 101, 113, 114, 116, 118, 123, 124, 127, 133, 136, 147, 158, 166, 170, 172, 174, 177, 180, 185, 189, 190, 198, 201, 203, 218, 219, 223, 230, 244, 251, 260, 268, 280, 285, 313, 314, 317, 318, 339, 343, 367, 369, 379, 381, 382, 383, 385, 394, 395, 405, 406, 408, 409, 412, 415, 416, 417, 436, 441, 446, 447, 451, 458, 461, 463, 535, 554, 555, 566, 567, 569, 593, 626, 646, 652, 658, 678, 689, 693, 718, 797, 828, 829, 860, 861, 897, 900, 977, 978, 980, 984, 985, 988, 991, 994, 995, 998, 1001, 1013, 1022, 1036, 1039, 1040, 1041, 1042, 1044], "observ": [4, 5, 7, 9, 11, 13, 14, 17, 21, 25, 28, 35, 38, 41, 44, 54, 63, 72, 79, 81, 82, 83, 97, 98, 101, 104, 113, 116, 117, 119, 120, 126, 129, 132, 141, 142, 150, 153, 156, 158, 159, 160, 162, 171, 172, 173, 180, 181, 196, 197, 199, 201, 202, 203, 205, 215, 219, 226, 227, 233, 234, 240, 258, 262, 264, 265, 269, 285, 288, 291, 298, 312, 323, 329, 338, 339, 343, 344, 352, 353, 354, 359, 360, 376, 378, 395, 398, 406, 408, 410, 411, 412, 413, 414, 417, 418, 440, 442, 444, 445, 446, 448, 458, 459, 468, 469, 470, 471, 472, 473, 474, 475, 523, 531, 550, 551, 562, 609, 610, 645, 651, 656, 700, 715, 717, 756, 818, 838, 846, 879, 881, 984, 987, 988, 992, 993, 994, 995, 998, 1001, 1002, 1003, 1004, 1012, 1016, 1018, 1019, 1021, 1032, 1044, 1045, 1046, 1047], "complet": [4, 38, 39, 40, 45, 50, 51, 53, 59, 63, 87, 131, 145, 147, 150, 168, 173, 174, 207, 229, 230, 237, 240, 245, 260, 312, 314, 317, 353, 363, 376, 381, 385, 386, 389, 393, 409, 412, 413, 415, 416, 440, 444, 448, 451, 461, 462, 463, 466, 494, 535, 536, 537, 538, 543, 545, 557, 568, 569, 580, 586, 587, 588, 590, 626, 627, 628, 629, 644, 648, 656, 670, 672, 703, 704, 714, 715, 716, 729, 734, 735, 755, 784, 793, 828, 831, 834, 843, 859, 860, 861, 862, 923, 973, 977, 982, 984, 988, 989, 991, 1003, 1004, 1010, 1015, 1024, 1031, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "induct": [4, 37, 69, 111, 126, 168, 395, 408, 415, 422, 440, 511, 563, 626, 630, 895, 896, 949, 972, 984, 1001, 1010, 1033], "bia": [4, 28, 79, 98, 112, 120, 121, 126, 137, 168, 171, 173, 180, 181, 183, 267, 301, 343, 347, 363, 376, 383, 395, 406, 410, 414, 415, 418, 523, 555, 558, 559, 606, 607, 613, 641, 647, 648, 657, 658, 668, 669, 679, 857, 858, 873, 875, 879, 885, 886, 888, 889, 890, 891, 909, 983, 984, 987, 988, 992, 993, 996, 1002, 1010, 1022], "preserv": [4, 49, 101, 226, 234, 257, 383, 384, 407, 412, 413, 416, 580, 587, 588, 590, 645, 651, 695, 740, 772, 776, 815, 816, 817, 884, 920, 921, 978, 984, 985, 998, 1000, 1008, 1019, 1031, 1034, 1035, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047], "smooth": [4, 47, 48, 55, 150, 158, 194, 202, 217, 313, 339, 378, 396, 408, 414, 418, 447, 448, 536, 537, 538, 545, 556, 557, 558, 559, 563, 564, 565, 589, 590, 618, 621, 675, 835, 836, 837, 839, 877, 881, 889, 908, 909, 910, 911, 984, 990, 998, 1002, 1003, 1004, 1024], "local": [4, 9, 12, 21, 40, 53, 58, 62, 96, 99, 118, 119, 130, 150, 158, 159, 168, 172, 202, 215, 221, 224, 226, 228, 230, 234, 240, 285, 286, 294, 295, 299, 338, 359, 360, 368, 378, 379, 381, 385, 387, 389, 398, 408, 413, 415, 416, 418, 446, 451, 461, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 501, 537, 539, 543, 546, 548, 558, 559, 562, 565, 609, 610, 687, 688, 689, 690, 691, 692, 694, 695, 756, 757, 843, 846, 849, 851, 861, 870, 893, 896, 904, 954, 956, 986, 987, 991, 992, 1004, 1010, 1023, 1025, 1026, 1035, 1039, 1043, 1046], "attempt": [4, 55, 172, 197, 207, 257, 352, 367, 380, 395, 408, 420, 445, 449, 456, 467, 630, 687, 688, 692, 815, 842, 843, 844, 846, 848, 850, 851, 852, 878, 880, 898, 920, 921, 984, 985, 991, 1004, 1015, 1038, 1043, 1048], "each": [4, 7, 8, 10, 11, 12, 15, 18, 21, 26, 27, 28, 33, 35, 38, 42, 44, 45, 48, 50, 54, 56, 59, 61, 62, 71, 72, 74, 75, 76, 86, 87, 90, 91, 92, 93, 96, 97, 101, 104, 105, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 129, 131, 132, 133, 134, 135, 136, 146, 148, 150, 155, 157, 162, 165, 166, 170, 171, 172, 174, 177, 180, 187, 188, 190, 195, 199, 201, 202, 203, 205, 206, 209, 216, 219, 223, 230, 231, 234, 235, 236, 237, 238, 240, 241, 242, 244, 247, 250, 252, 256, 257, 258, 260, 262, 263, 265, 267, 268, 271, 272, 280, 283, 285, 288, 290, 294, 296, 298, 301, 302, 304, 307, 308, 309, 310, 312, 313, 314, 317, 319, 320, 321, 323, 326, 327, 328, 331, 339, 343, 345, 347, 353, 354, 357, 358, 361, 363, 367, 368, 369, 375, 376, 377, 378, 379, 381, 382, 383, 385, 386, 387, 389, 390, 393, 394, 395, 399, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 425, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 503, 504, 507, 508, 509, 510, 511, 512, 513, 514, 518, 521, 522, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 706, 707, 709, 712, 718, 723, 726, 727, 728, 736, 737, 743, 744, 746, 748, 749, 751, 752, 756, 757, 760, 761, 762, 763, 764, 766, 767, 768, 769, 771, 772, 774, 776, 777, 778, 779, 781, 782, 783, 785, 786, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 889, 890, 891, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 926, 931, 932, 937, 939, 940, 944, 945, 956, 964, 965, 966, 969, 978, 980, 982, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1013, 1015, 1019, 1021, 1022, 1023, 1024, 1031, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "sine": [4, 153, 158, 159, 168, 195, 207, 246, 247, 248, 249, 250, 251, 252, 254, 359, 377, 614, 795, 796, 987, 1004, 1010], "cosin": [4, 41, 276, 285, 290, 373, 376, 395, 408, 413, 414, 440, 444, 449, 456, 534, 589, 590, 619, 695, 758, 759, 760, 763, 768, 769, 772, 776, 777, 778, 840, 841, 845, 872, 991, 1004, 1026, 1041], "match": [4, 21, 38, 46, 55, 96, 97, 99, 103, 106, 119, 168, 177, 179, 201, 220, 224, 233, 240, 275, 343, 354, 376, 379, 383, 385, 408, 413, 415, 416, 429, 448, 463, 465, 507, 508, 514, 525, 530, 536, 541, 547, 550, 566, 567, 571, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 626, 627, 628, 629, 657, 663, 664, 684, 685, 698, 702, 703, 704, 712, 714, 718, 732, 776, 777, 778, 784, 840, 841, 845, 849, 863, 864, 865, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 900, 907, 913, 924, 956, 985, 987, 988, 990, 991, 1010, 1011, 1015, 1024, 1026, 1031, 1037, 1038, 1039, 1041, 1043, 1044, 1047], "togeth": [4, 12, 52, 61, 72, 122, 133, 153, 159, 171, 182, 223, 226, 240, 258, 313, 321, 342, 358, 363, 383, 385, 393, 394, 395, 402, 408, 415, 416, 417, 423, 450, 452, 566, 567, 593, 688, 714, 797, 811, 860, 861, 874, 984, 985, 989, 995, 998, 1004, 1005, 1013, 1016, 1018, 1037], "equival": [4, 15, 35, 56, 58, 123, 129, 149, 153, 158, 171, 185, 219, 252, 271, 285, 312, 343, 354, 363, 367, 379, 387, 390, 394, 395, 408, 409, 410, 411, 412, 413, 415, 417, 418, 440, 442, 443, 444, 445, 446, 448, 449, 456, 463, 468, 473, 508, 533, 540, 557, 560, 561, 562, 563, 564, 587, 590, 612, 615, 618, 620, 623, 645, 646, 647, 651, 653, 657, 658, 665, 666, 667, 668, 671, 675, 676, 679, 682, 686, 687, 692, 707, 708, 721, 732, 739, 740, 745, 746, 747, 759, 768, 777, 778, 795, 796, 800, 801, 805, 807, 831, 834, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 857, 863, 869, 870, 872, 875, 876, 877, 878, 880, 888, 890, 891, 924, 935, 974, 977, 982, 984, 985, 986, 988, 994, 998, 1002, 1003, 1004, 1039, 1040, 1041, 1042, 1044, 1045, 1048], "importantli": [4, 14, 97, 172, 177, 307, 408], "jump": [4, 202, 307, 378, 381, 416, 879], "functiontransform": [4, 71, 118, 201, 219, 330, 463, 464, 998, 1036, 1037, 1039, 1044, 1045, 1046, 1048], "sin_transform": 4, "return": [4, 6, 7, 8, 10, 11, 13, 14, 17, 18, 20, 25, 26, 28, 34, 35, 38, 41, 49, 54, 57, 62, 71, 76, 93, 102, 104, 106, 111, 113, 116, 118, 125, 126, 129, 133, 150, 156, 159, 161, 166, 174, 180, 181, 189, 190, 193, 201, 202, 209, 210, 211, 219, 237, 240, 243, 244, 250, 252, 257, 258, 259, 260, 261, 262, 263, 265, 266, 269, 276, 285, 290, 295, 298, 304, 307, 309, 312, 317, 335, 339, 352, 354, 357, 361, 367, 374, 375, 376, 381, 382, 383, 387, 388, 390, 393, 395, 406, 407, 408, 409, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 923, 924, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 954, 955, 958, 959, 960, 961, 962, 963, 969, 972, 973, 974, 975, 976, 978, 988, 991, 995, 996, 1003, 1004, 1009, 1015, 1020, 1022, 1024, 1028, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "lambda": [4, 7, 8, 10, 13, 20, 57, 74, 125, 140, 181, 219, 262, 263, 311, 330, 404, 408, 413, 415, 416, 643, 644, 645, 646, 864, 876, 980, 984, 998, 1019, 1039, 1045], "sin": [4, 14, 20, 40, 97, 114, 125, 126, 130, 132, 145, 153, 159, 160, 162, 180, 181, 185, 195, 202, 207, 224, 236, 253, 297, 308, 318, 346, 359, 360, 418, 515, 614, 698, 762, 1023], "pi": [4, 14, 35, 40, 41, 97, 106, 130, 132, 145, 153, 181, 185, 189, 195, 202, 224, 247, 248, 249, 252, 253, 276, 298, 318, 360, 398, 414, 418, 515, 516, 517, 614, 641, 982, 983, 984, 990, 1023], "cos_transform": 4, "co": [4, 8, 12, 14, 19, 21, 23, 40, 41, 71, 130, 132, 158, 168, 171, 202, 224, 262, 276, 321, 330, 352, 353, 354, 360, 385, 414, 416, 448, 450, 452, 487, 510, 590, 698, 718, 762, 793, 983, 998, 1010, 1013, 1025, 1026], "effect": [4, 6, 10, 28, 38, 40, 41, 46, 47, 54, 58, 63, 66, 70, 74, 77, 87, 93, 99, 101, 113, 126, 128, 129, 130, 133, 149, 153, 154, 158, 160, 168, 169, 171, 172, 174, 175, 185, 196, 201, 202, 203, 205, 206, 207, 218, 221, 222, 224, 226, 228, 233, 240, 244, 248, 252, 258, 262, 263, 264, 267, 270, 271, 272, 285, 304, 306, 308, 311, 315, 318, 325, 332, 339, 343, 344, 347, 348, 349, 352, 353, 354, 363, 368, 381, 383, 386, 393, 395, 406, 408, 409, 413, 414, 415, 416, 418, 419, 436, 442, 443, 445, 446, 448, 449, 464, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 489, 495, 499, 513, 523, 524, 532, 533, 537, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 587, 588, 589, 590, 593, 605, 608, 609, 610, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 686, 689, 690, 691, 700, 702, 751, 783, 795, 798, 799, 802, 804, 806, 808, 815, 816, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 845, 846, 847, 850, 851, 857, 858, 860, 863, 864, 865, 866, 867, 869, 870, 872, 876, 877, 878, 879, 880, 881, 885, 886, 887, 888, 889, 890, 891, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 920, 921, 937, 954, 962, 977, 982, 984, 985, 987, 988, 989, 995, 998, 1001, 1003, 1004, 1010, 1020, 1022, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "expans": [4, 165, 319, 449, 875, 1040], "synthet": [4, 14, 26, 28, 32, 35, 38, 43, 50, 120, 126, 131, 153, 158, 160, 172, 191, 203, 218, 301, 309, 347, 363, 367, 374, 384, 396, 408, 410, 417, 657, 658, 900, 901, 907, 982, 1022, 1037], "beyond": [4, 28, 202, 203, 367, 369, 380, 381, 393, 406, 415, 727, 728, 736, 781, 782, 785, 905, 985, 989, 998, 1003, 1009, 1039], "pd": [4, 12, 13, 26, 72, 73, 74, 113, 119, 120, 126, 130, 158, 165, 170, 171, 172, 173, 174, 180, 185, 190, 201, 205, 209, 219, 241, 244, 252, 260, 262, 263, 265, 273, 274, 280, 312, 313, 314, 320, 321, 347, 352, 353, 386, 395, 409, 463, 465, 626, 627, 628, 629, 631, 776, 918, 920, 921, 977, 978, 995, 998, 1042, 1044, 1045, 1046], "hour_df": 4, "arang": [4, 11, 13, 14, 17, 41, 59, 61, 66, 74, 80, 81, 104, 107, 122, 123, 124, 125, 127, 128, 131, 135, 146, 153, 155, 160, 161, 165, 166, 174, 185, 201, 204, 206, 210, 225, 233, 235, 257, 262, 265, 270, 273, 283, 285, 298, 301, 309, 320, 326, 327, 329, 331, 339, 346, 352, 354, 359, 360, 361, 363, 393, 405, 412, 416, 464, 543, 826, 875, 879, 983, 984, 992, 998, 1002, 1020], "reshap": [4, 5, 6, 14, 17, 25, 33, 47, 48, 49, 51, 52, 54, 55, 59, 73, 81, 86, 96, 99, 106, 116, 121, 122, 131, 142, 148, 153, 155, 156, 157, 158, 159, 160, 162, 180, 192, 198, 214, 215, 217, 218, 223, 225, 227, 230, 235, 239, 251, 260, 289, 291, 298, 301, 303, 304, 308, 309, 310, 314, 317, 320, 321, 323, 331, 338, 339, 344, 345, 348, 349, 393, 405, 413, 415, 416, 444, 464, 583, 630, 826, 875, 879, 984, 998, 1004, 1020, 1023, 1036], "hour_sin": 4, "fit_transform": [4, 5, 6, 10, 12, 15, 20, 45, 50, 53, 54, 59, 63, 91, 97, 100, 107, 131, 177, 192, 217, 219, 222, 223, 224, 225, 226, 227, 233, 234, 237, 238, 244, 285, 289, 302, 307, 308, 312, 313, 314, 317, 320, 322, 323, 339, 352, 353, 354, 363, 373, 376, 383, 386, 387, 395, 404, 409, 413, 416, 417, 424, 432, 441, 442, 444, 446, 448, 463, 465, 467, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 687, 688, 689, 690, 691, 844, 849, 852, 856, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 898, 978, 980, 984, 989, 991, 998, 999, 1000, 1015, 1020, 1023, 1024, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1045, 1047, 1048], "hour_co": 4, "2d": [4, 34, 37, 40, 42, 45, 48, 49, 50, 54, 57, 62, 63, 69, 90, 91, 95, 97, 100, 107, 108, 131, 148, 168, 195, 202, 207, 222, 223, 224, 227, 230, 233, 234, 294, 326, 327, 336, 339, 361, 375, 377, 381, 383, 390, 395, 408, 409, 413, 416, 418, 440, 451, 461, 463, 466, 487, 489, 490, 491, 492, 493, 499, 500, 501, 503, 509, 513, 532, 540, 548, 583, 585, 634, 642, 656, 671, 690, 736, 777, 821, 825, 829, 867, 916, 920, 921, 936, 951, 974, 975, 982, 984, 985, 988, 995, 999, 1004, 1010, 1015, 1021, 1031, 1035, 1038, 1039, 1040, 1043, 1045], "scatter": [4, 9, 11, 12, 17, 25, 31, 32, 35, 39, 40, 43, 44, 45, 46, 50, 53, 57, 58, 59, 60, 61, 63, 68, 81, 87, 92, 93, 98, 100, 101, 102, 103, 105, 114, 115, 119, 122, 129, 131, 132, 134, 142, 145, 153, 154, 155, 157, 159, 160, 161, 162, 170, 171, 177, 181, 184, 191, 193, 197, 198, 199, 202, 203, 204, 210, 213, 214, 215, 218, 222, 223, 224, 225, 226, 227, 230, 235, 236, 238, 247, 248, 249, 250, 251, 252, 253, 257, 263, 265, 276, 285, 288, 291, 292, 293, 294, 295, 296, 297, 301, 307, 309, 310, 312, 321, 328, 331, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 352, 358, 359, 360, 410, 630, 700, 956, 982, 984, 1022], "color": [4, 6, 7, 8, 9, 10, 11, 12, 13, 17, 21, 25, 26, 27, 28, 32, 34, 35, 37, 39, 41, 43, 45, 46, 47, 48, 50, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 79, 80, 81, 82, 83, 87, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 105, 106, 113, 114, 119, 122, 123, 124, 125, 128, 129, 130, 131, 133, 135, 139, 142, 153, 155, 156, 157, 158, 159, 160, 161, 162, 166, 168, 171, 173, 174, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 193, 195, 197, 199, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 215, 218, 219, 223, 224, 225, 227, 230, 234, 235, 236, 238, 241, 247, 248, 249, 250, 251, 252, 253, 257, 261, 263, 265, 266, 267, 268, 269, 271, 272, 273, 275, 283, 287, 290, 291, 292, 293, 296, 297, 298, 301, 307, 308, 309, 311, 312, 313, 318, 328, 329, 331, 337, 338, 339, 340, 341, 343, 345, 346, 347, 348, 358, 359, 375, 376, 378, 389, 408, 415, 416, 446, 492, 493, 505, 582, 583, 777, 962, 1002, 1004, 1010, 1036, 1041, 1043, 1048], "map": [4, 5, 10, 11, 18, 20, 27, 54, 87, 101, 117, 125, 128, 131, 140, 153, 168, 177, 201, 219, 222, 224, 229, 237, 240, 245, 263, 266, 271, 293, 296, 298, 306, 307, 315, 330, 339, 343, 345, 353, 354, 375, 382, 393, 395, 399, 406, 407, 408, 409, 412, 413, 415, 416, 422, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 495, 497, 501, 508, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 760, 763, 795, 796, 797, 800, 801, 808, 809, 811, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 888, 889, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 942, 945, 946, 977, 980, 985, 988, 990, 1000, 1003, 1004, 1010, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048], "space": [4, 8, 10, 20, 32, 47, 49, 54, 58, 59, 61, 62, 64, 66, 71, 72, 75, 87, 96, 98, 105, 107, 118, 122, 126, 131, 147, 150, 153, 159, 177, 185, 202, 222, 223, 224, 226, 234, 235, 236, 240, 241, 248, 253, 270, 273, 274, 285, 294, 295, 309, 319, 343, 352, 353, 354, 361, 363, 367, 373, 376, 377, 378, 381, 388, 393, 394, 395, 405, 407, 408, 411, 413, 414, 415, 416, 418, 442, 446, 447, 448, 451, 461, 463, 464, 465, 466, 481, 482, 483, 497, 531, 533, 534, 537, 538, 539, 540, 542, 543, 548, 572, 581, 587, 588, 590, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 631, 632, 637, 639, 640, 641, 642, 687, 688, 689, 691, 692, 693, 695, 698, 797, 800, 801, 803, 811, 819, 830, 840, 841, 848, 849, 850, 851, 860, 865, 866, 872, 877, 892, 893, 894, 913, 941, 980, 981, 982, 983, 984, 986, 988, 989, 991, 992, 993, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1008, 1009, 1015, 1022, 1024, 1025, 1026, 1031, 1032, 1034, 1039, 1040, 1041, 1045, 1046, 1047], "akin": [4, 202, 395], "sort": [4, 8, 10, 12, 20, 21, 25, 61, 71, 111, 116, 123, 126, 132, 150, 180, 185, 201, 202, 219, 239, 262, 263, 266, 276, 297, 346, 352, 359, 360, 381, 385, 389, 390, 395, 412, 415, 416, 418, 533, 540, 554, 565, 580, 609, 616, 696, 711, 717, 727, 728, 736, 752, 781, 782, 785, 787, 797, 823, 835, 836, 837, 838, 839, 840, 841, 848, 850, 851, 852, 855, 865, 871, 873, 874, 877, 879, 881, 889, 902, 905, 937, 942, 984, 991, 994, 998, 1013, 1024, 1031, 1035, 1041, 1042, 1043, 1045, 1046], "analog": [4, 20, 128, 387, 415, 988, 989, 1003, 1040], "clock": 4, "25th": [4, 240, 878], "back": [4, 101, 242, 368, 381, 383, 396, 402, 409, 416, 433, 442, 445, 446, 458, 481, 482, 483, 507, 508, 532, 533, 534, 537, 539, 540, 543, 580, 629, 657, 658, 665, 666, 667, 675, 676, 677, 726, 865, 867, 868, 869, 873, 874, 875, 877, 878, 880, 892, 893, 900, 984, 988, 992, 1009, 1015, 1024, 1034, 1039, 1041, 1042, 1045], "natur": [4, 32, 119, 126, 160, 171, 172, 177, 185, 201, 202, 218, 219, 226, 240, 247, 253, 271, 283, 352, 381, 383, 395, 413, 415, 416, 419, 443, 449, 456, 550, 589, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 691, 703, 739, 753, 755, 842, 843, 844, 846, 848, 850, 851, 852, 879, 935, 984, 985, 987, 988, 991, 993, 998, 1002, 1008, 1012, 1031, 1039], "sp": [4, 171, 978, 1023], "c": [4, 6, 7, 8, 11, 12, 17, 20, 25, 26, 28, 31, 32, 35, 40, 41, 43, 44, 46, 53, 57, 58, 60, 61, 62, 66, 72, 73, 75, 87, 91, 92, 93, 101, 102, 103, 113, 115, 116, 122, 123, 129, 131, 132, 134, 135, 140, 142, 148, 150, 154, 155, 156, 157, 161, 177, 184, 186, 191, 192, 193, 194, 196, 198, 199, 208, 210, 212, 213, 214, 215, 217, 218, 222, 223, 224, 226, 227, 235, 236, 238, 242, 248, 250, 251, 252, 253, 256, 257, 259, 260, 261, 262, 265, 267, 271, 273, 285, 288, 290, 291, 293, 294, 295, 296, 297, 298, 301, 302, 304, 307, 308, 309, 312, 317, 318, 319, 320, 321, 322, 323, 328, 331, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 352, 358, 359, 360, 367, 368, 375, 376, 378, 379, 381, 382, 383, 384, 386, 389, 390, 393, 398, 399, 405, 406, 408, 409, 410, 411, 412, 413, 415, 417, 421, 436, 441, 442, 445, 446, 448, 458, 467, 474, 522, 527, 533, 537, 539, 540, 546, 548, 549, 589, 606, 607, 609, 630, 638, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 671, 672, 678, 684, 685, 687, 688, 691, 692, 707, 713, 714, 717, 729, 733, 739, 740, 756, 757, 797, 811, 819, 825, 835, 836, 837, 838, 839, 840, 841, 847, 849, 856, 871, 873, 874, 875, 879, 881, 895, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 915, 920, 921, 951, 977, 980, 981, 983, 984, 985, 986, 988, 990, 991, 993, 995, 998, 1000, 1002, 1003, 1004, 1008, 1013, 1015, 1019, 1020, 1022, 1023, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1047], "colorbar": [4, 11, 31, 41, 96, 107, 121, 129, 148, 154, 156, 157, 159, 172, 222, 234, 251, 273, 307, 339, 696, 1043], "cyclic_cossin_transform": 4, "month_sin": 4, "month_co": 4, "weekday_sin": 4, "weekday_co": 4, "cyclic_cossin_linear_pipelin": 4, "125": [4, 13, 54, 81, 99, 320, 533, 977, 988, 998], "166": [4, 304, 387, 988, 1031], "simpl": [4, 17, 28, 56, 72, 76, 79, 86, 87, 96, 102, 119, 124, 160, 168, 172, 185, 202, 218, 243, 263, 280, 286, 289, 298, 299, 312, 321, 335, 352, 354, 358, 363, 379, 381, 383, 384, 385, 386, 388, 393, 394, 395, 396, 399, 405, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 422, 429, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 461, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 513, 521, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 784, 786, 795, 796, 797, 800, 801, 811, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 944, 980, 982, 983, 984, 985, 987, 988, 991, 998, 1000, 1002, 1004, 1009, 1010, 1013, 1015, 1024, 1028, 1031], "wors": [4, 87, 113, 154, 172, 207, 262, 270, 283, 312, 363, 406, 408, 418, 431, 464, 481, 482, 483, 551, 553, 555, 557, 559, 561, 564, 567, 569, 609, 610, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 668, 669, 671, 672, 677, 678, 679, 704, 720, 721, 722, 726, 783, 833, 834, 843, 851, 858, 901, 903, 906, 909, 911, 988, 998, 1040], "further": [4, 26, 43, 72, 79, 87, 96, 116, 122, 124, 149, 153, 158, 171, 173, 180, 185, 222, 227, 237, 259, 262, 263, 269, 322, 339, 353, 361, 367, 381, 393, 395, 407, 408, 410, 413, 415, 416, 418, 451, 461, 514, 531, 534, 581, 613, 621, 627, 657, 658, 665, 666, 667, 675, 676, 677, 690, 694, 735, 772, 776, 779, 790, 791, 836, 842, 843, 850, 851, 878, 880, 900, 902, 905, 937, 987, 988, 990, 991, 992, 994, 998, 1002, 1003, 1022, 1024, 1040, 1044], "analyz": [4, 7, 18, 185, 264, 271, 322, 352, 354, 386, 387, 408, 416, 502, 587, 588, 590, 786, 985, 988, 995, 996, 1004, 1024, 1031, 1040], "reason": [4, 8, 12, 43, 54, 71, 126, 150, 171, 172, 177, 201, 202, 209, 219, 230, 234, 235, 237, 240, 259, 262, 263, 268, 280, 285, 308, 312, 353, 354, 363, 367, 368, 369, 376, 380, 381, 383, 385, 389, 393, 394, 395, 396, 408, 409, 410, 413, 415, 416, 507, 531, 573, 637, 645, 651, 653, 671, 686, 691, 761, 797, 811, 844, 849, 856, 875, 897, 977, 978, 983, 984, 985, 988, 990, 991, 992, 994, 998, 1002, 1003, 1013, 1024, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "disappoint": 4, "outcom": [4, 119, 171, 395, 415, 568, 657, 708, 740, 792, 828, 895, 896, 897, 902, 905, 984, 988, 1004, 1012, 1024, 1035, 1039, 1041], "altern": [4, 27, 72, 87, 120, 121, 127, 133, 173, 185, 201, 219, 231, 250, 253, 271, 317, 343, 352, 353, 354, 363, 376, 384, 385, 387, 393, 395, 396, 398, 403, 405, 406, 408, 409, 410, 412, 413, 415, 416, 418, 440, 441, 444, 445, 446, 451, 457, 462, 498, 537, 539, 540, 546, 552, 553, 556, 557, 558, 559, 563, 564, 565, 581, 587, 588, 590, 616, 619, 642, 691, 705, 707, 769, 772, 776, 779, 799, 829, 864, 870, 873, 886, 893, 895, 908, 909, 910, 911, 955, 956, 982, 984, 985, 987, 988, 991, 992, 996, 998, 1000, 1001, 1003, 1004, 1009, 1019, 1024, 1026, 1036, 1038, 1044, 1045], "larger": [4, 7, 28, 38, 40, 43, 48, 56, 81, 83, 93, 106, 116, 127, 154, 159, 160, 166, 171, 172, 177, 181, 185, 216, 217, 218, 227, 234, 236, 247, 253, 263, 265, 271, 272, 280, 285, 287, 301, 302, 304, 307, 339, 343, 353, 354, 374, 376, 381, 387, 393, 395, 405, 406, 408, 409, 410, 412, 413, 415, 416, 418, 439, 442, 448, 449, 451, 453, 455, 514, 526, 540, 543, 560, 561, 562, 566, 567, 581, 588, 642, 651, 671, 672, 673, 674, 678, 686, 691, 703, 718, 734, 795, 845, 846, 877, 879, 880, 881, 889, 894, 936, 937, 959, 962, 980, 981, 984, 985, 987, 988, 991, 992, 996, 998, 1002, 1003, 1022, 1024, 1035, 1036, 1039, 1040, 1041, 1044, 1045], "periodic_spline_transform": 4, "n_spline": [4, 879], "degre": [4, 17, 35, 98, 115, 158, 165, 170, 172, 177, 180, 185, 189, 190, 202, 205, 236, 242, 247, 248, 249, 252, 253, 262, 276, 304, 319, 320, 336, 343, 346, 413, 417, 445, 451, 497, 534, 540, 638, 639, 642, 655, 773, 795, 797, 846, 875, 879, 902, 903, 904, 905, 906, 980, 981, 983, 984, 985, 986, 988, 989, 991, 994, 995, 998, 1001, 1003, 1022, 1034, 1040, 1044, 1045], "n_knot": [4, 202, 320, 879, 998, 1044], "include_bia": [4, 180, 276, 875, 879, 1045], "knot": [4, 202, 320, 879, 998, 1044], "linspac": [4, 8, 10, 11, 14, 25, 27, 38, 39, 41, 43, 50, 56, 81, 82, 97, 106, 114, 124, 126, 153, 154, 156, 157, 158, 159, 160, 162, 172, 180, 181, 183, 185, 191, 195, 201, 202, 203, 207, 211, 212, 213, 214, 215, 219, 227, 230, 233, 234, 236, 238, 251, 262, 264, 265, 269, 270, 271, 272, 276, 290, 291, 297, 298, 308, 310, 321, 322, 338, 339, 342, 344, 345, 347, 348, 349, 630, 631, 803, 824, 840, 841, 1023], "again": [4, 21, 68, 73, 126, 157, 159, 161, 171, 226, 263, 352, 363, 385, 390, 395, 396, 408, 409, 410, 415, 416, 471, 566, 567, 633, 646, 650, 652, 654, 660, 662, 664, 691, 977, 984, 988, 1002, 1028, 1031, 1039, 1048], "splines_df": 4, "spline_": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 13, 14, 17, 18, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 42, 47, 48, 49, 52, 53, 54, 55, 56, 59, 61, 62, 67, 71, 75, 76, 81, 96, 97, 99, 102, 114, 119, 120, 121, 122, 123, 126, 127, 128, 131, 132, 142, 146, 148, 154, 155, 157, 159, 160, 165, 166, 168, 172, 173, 189, 190, 201, 203, 208, 210, 213, 214, 215, 216, 217, 221, 222, 223, 224, 225, 228, 230, 233, 234, 235, 236, 237, 239, 240, 247, 249, 251, 252, 253, 260, 262, 264, 265, 268, 269, 271, 272, 285, 290, 291, 295, 298, 301, 303, 309, 310, 317, 319, 322, 323, 328, 329, 331, 336, 339, 342, 343, 344, 345, 348, 349, 352, 353, 361, 367, 374, 375, 376, 381, 383, 395, 405, 406, 408, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 430, 431, 432, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 922, 925, 926, 931, 935, 937, 939, 942, 950, 952, 959, 963, 964, 965, 966, 967, 968, 969, 978, 983, 984, 988, 989, 990, 991, 992, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1010, 1020, 1021, 1023, 1024, 1031, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1045, 1047, 1048], "concat": [4, 13, 165, 170, 190, 219, 873], "cmap": [4, 5, 6, 11, 12, 14, 17, 21, 22, 31, 32, 33, 35, 40, 41, 47, 48, 51, 52, 54, 55, 59, 81, 83, 90, 96, 99, 103, 107, 115, 121, 122, 142, 148, 156, 157, 172, 180, 184, 185, 192, 193, 210, 213, 214, 215, 217, 223, 224, 225, 234, 235, 239, 256, 257, 285, 289, 291, 293, 294, 296, 298, 301, 303, 304, 307, 309, 326, 327, 331, 335, 336, 337, 338, 339, 340, 341, 344, 345, 348, 349, 358, 696, 1020, 1021], "cm": [4, 6, 11, 12, 14, 17, 21, 22, 25, 31, 32, 33, 39, 40, 47, 48, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62, 68, 81, 83, 90, 96, 99, 103, 115, 121, 122, 142, 148, 156, 157, 172, 184, 193, 210, 213, 214, 217, 223, 224, 225, 231, 234, 235, 239, 244, 256, 257, 285, 288, 289, 291, 295, 298, 301, 303, 304, 307, 309, 319, 322, 326, 327, 331, 335, 336, 337, 339, 340, 341, 345, 348, 349, 358, 378, 409, 696, 913, 988, 998, 1004, 1020, 1021], "tab20b": 4, "stai": [4, 13, 27, 38, 106, 171, 353, 380, 381, 385, 395, 396, 993, 1037], "midnight": 4, "fewer": [4, 14, 27, 56, 113, 122, 124, 201, 367, 382, 408, 417, 418, 447, 460, 552, 593, 695, 830, 941, 984, 989, 991, 1036, 1037, 1038], "most": [4, 6, 8, 12, 14, 20, 25, 28, 53, 54, 56, 63, 79, 86, 87, 105, 113, 119, 120, 127, 133, 145, 146, 147, 149, 150, 158, 166, 170, 171, 172, 173, 174, 177, 185, 201, 202, 219, 237, 241, 247, 253, 259, 260, 265, 269, 270, 272, 280, 283, 294, 307, 313, 314, 317, 320, 323, 327, 339, 343, 352, 353, 354, 363, 367, 368, 369, 376, 377, 379, 381, 383, 385, 386, 387, 389, 393, 395, 396, 398, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 442, 443, 445, 449, 455, 456, 459, 467, 495, 502, 520, 523, 531, 533, 538, 542, 548, 550, 560, 561, 565, 566, 587, 588, 590, 592, 603, 610, 626, 629, 648, 657, 671, 673, 675, 677, 686, 687, 691, 694, 723, 726, 744, 756, 757, 761, 783, 792, 795, 796, 800, 801, 816, 828, 829, 842, 843, 844, 846, 848, 849, 850, 851, 852, 875, 877, 885, 886, 888, 889, 890, 891, 898, 936, 937, 939, 951, 956, 977, 978, 982, 983, 984, 985, 986, 987, 988, 989, 991, 994, 995, 996, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1013, 1020, 1022, 1024, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1046, 1048], "cyclic_spline_transform": 4, "cyclic_month": 4, "cyclic_weekdai": 4, "cyclic_hour": 4, "cyclic_spline_linear_pipelin": 4, "097": [4, 150, 378], "132": [4, 8, 14, 57, 116, 121, 137, 415, 1010], "013": [4, 59, 270], "successfulli": [4, 14, 311, 380, 385, 408, 416, 1002], "reduc": [4, 7, 43, 46, 47, 48, 49, 54, 72, 73, 79, 116, 124, 126, 128, 131, 147, 171, 180, 181, 185, 199, 205, 206, 209, 232, 234, 237, 240, 263, 269, 280, 294, 309, 312, 313, 322, 353, 354, 363, 373, 375, 378, 381, 387, 393, 395, 406, 407, 408, 410, 412, 413, 415, 416, 417, 419, 443, 444, 449, 456, 459, 492, 533, 543, 548, 554, 555, 556, 557, 562, 563, 564, 565, 572, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 609, 626, 642, 651, 671, 672, 673, 674, 686, 691, 694, 779, 797, 800, 801, 803, 811, 819, 821, 822, 823, 824, 827, 869, 870, 877, 889, 892, 893, 900, 901, 908, 909, 910, 911, 977, 980, 982, 983, 984, 985, 988, 991, 1000, 1001, 1003, 1005, 1015, 1023, 1031, 1033, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1045, 1047], "choic": [4, 7, 41, 47, 56, 66, 71, 79, 104, 153, 154, 160, 165, 190, 202, 240, 256, 260, 262, 265, 290, 314, 319, 352, 353, 363, 367, 379, 383, 386, 393, 398, 408, 410, 412, 414, 415, 417, 418, 451, 461, 470, 471, 472, 473, 474, 475, 477, 537, 539, 540, 546, 558, 637, 646, 647, 655, 657, 658, 660, 668, 679, 691, 704, 740, 829, 842, 843, 848, 850, 851, 877, 880, 889, 891, 900, 901, 924, 977, 982, 984, 985, 986, 987, 988, 989, 994, 996, 1001, 1002, 1003, 1004, 1038, 1041, 1042, 1046, 1047], "arbitrari": [4, 56, 87, 96, 97, 98, 118, 160, 180, 201, 218, 219, 260, 307, 311, 313, 319, 352, 361, 368, 381, 393, 395, 409, 412, 413, 415, 416, 420, 445, 449, 454, 456, 464, 531, 532, 558, 559, 580, 638, 647, 668, 679, 687, 740, 787, 798, 799, 804, 806, 840, 841, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 864, 866, 879, 977, 979, 980, 984, 985, 988, 991, 998, 1009, 1024, 1031, 1032, 1035, 1037, 1038, 1039, 1041, 1045, 1047], "held": [4, 8, 72, 104, 127, 173, 209, 249, 265, 270, 283, 415, 558, 559, 560, 561, 700, 797, 800, 801, 811, 857, 858, 870, 977, 978, 987, 996, 1024], "point": [4, 9, 11, 13, 14, 17, 27, 32, 38, 39, 41, 42, 49, 50, 53, 56, 59, 61, 65, 68, 81, 82, 86, 91, 92, 93, 95, 97, 99, 101, 102, 108, 113, 115, 119, 122, 123, 131, 150, 155, 160, 161, 168, 171, 172, 173, 180, 184, 190, 193, 195, 197, 199, 201, 202, 203, 205, 207, 210, 213, 214, 218, 219, 222, 223, 224, 225, 226, 230, 233, 235, 249, 253, 256, 259, 263, 264, 269, 271, 272, 283, 285, 288, 289, 290, 291, 292, 293, 294, 296, 298, 301, 308, 309, 311, 313, 326, 327, 331, 335, 339, 340, 341, 343, 344, 348, 349, 352, 353, 354, 358, 363, 367, 368, 369, 375, 376, 377, 378, 379, 380, 381, 383, 385, 386, 387, 389, 393, 395, 396, 407, 408, 413, 414, 415, 416, 419, 420, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 451, 453, 454, 455, 456, 457, 459, 460, 468, 471, 473, 497, 503, 511, 513, 514, 518, 521, 524, 529, 532, 534, 540, 551, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 609, 610, 627, 630, 631, 632, 636, 637, 638, 643, 644, 650, 654, 656, 669, 670, 672, 674, 675, 677, 678, 681, 682, 687, 688, 689, 690, 691, 692, 693, 700, 705, 706, 709, 712, 716, 721, 723, 729, 734, 735, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 762, 777, 778, 788, 789, 795, 796, 797, 811, 821, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 857, 858, 865, 870, 879, 894, 895, 896, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 914, 918, 980, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 998, 1000, 1001, 1003, 1004, 1008, 1009, 1010, 1019, 1022, 1023, 1024, 1031, 1032, 1033, 1035, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047], "naive_linear_predict": 4, "one_hot_linear_predict": 4, "cyclic_cossin_linear_predict": 4, "cyclic_spline_linear_predict": 4, "zoom": [4, 118, 307], "insight": [4, 7, 171, 172, 202, 203, 219, 303, 307, 352, 361, 406, 797, 800, 801, 811, 823, 995, 1004, 1013], "last_hour": [4, 13], "slice": [4, 13, 18, 122, 210, 224, 227, 235, 293, 296, 320, 321, 335, 376, 382, 383, 390, 409, 463, 466, 492, 493, 507, 545, 638, 772, 776, 779, 916, 940, 941, 959, 1043, 1045], "suptitl": [4, 5, 13, 15, 33, 34, 35, 40, 41, 51, 54, 58, 61, 68, 76, 96, 99, 107, 113, 122, 123, 130, 133, 162, 171, 172, 174, 195, 200, 216, 217, 222, 223, 224, 239, 250, 258, 304, 307, 309, 317, 319, 326, 327, 331, 346, 347, 358], "label": [4, 6, 7, 9, 11, 12, 13, 14, 17, 21, 25, 26, 27, 28, 31, 33, 34, 39, 41, 43, 44, 46, 47, 48, 49, 50, 52, 53, 56, 57, 59, 61, 64, 65, 66, 67, 68, 74, 76, 79, 80, 81, 82, 86, 87, 90, 92, 93, 98, 100, 103, 104, 105, 106, 113, 114, 115, 116, 117, 124, 125, 126, 127, 128, 129, 130, 132, 133, 136, 140, 146, 148, 153, 154, 158, 159, 160, 161, 162, 165, 168, 171, 174, 177, 180, 181, 183, 184, 185, 189, 190, 191, 195, 201, 202, 203, 204, 207, 208, 209, 210, 211, 215, 216, 218, 219, 223, 224, 225, 230, 235, 236, 238, 239, 240, 241, 249, 256, 257, 260, 261, 263, 264, 265, 266, 268, 271, 272, 273, 274, 275, 276, 283, 290, 292, 294, 297, 302, 304, 307, 308, 312, 317, 318, 321, 325, 329, 330, 331, 332, 341, 343, 346, 347, 352, 353, 357, 358, 359, 360, 369, 373, 374, 375, 380, 381, 383, 386, 390, 395, 396, 405, 406, 418, 419, 425, 426, 430, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 461, 464, 468, 486, 487, 488, 492, 493, 494, 495, 501, 502, 507, 508, 511, 513, 514, 518, 521, 522, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 566, 568, 569, 591, 592, 593, 594, 595, 597, 598, 599, 603, 604, 605, 608, 609, 630, 657, 658, 665, 666, 667, 672, 673, 674, 675, 676, 677, 696, 697, 699, 701, 702, 703, 704, 706, 708, 709, 711, 712, 713, 714, 715, 716, 717, 719, 723, 724, 725, 727, 728, 729, 732, 733, 734, 735, 736, 737, 738, 739, 741, 752, 753, 754, 755, 780, 781, 782, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 811, 812, 813, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 846, 847, 849, 850, 857, 858, 860, 864, 867, 868, 871, 873, 874, 881, 884, 895, 896, 897, 900, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 914, 920, 925, 926, 951, 952, 959, 977, 984, 985, 989, 990, 991, 992, 994, 995, 998, 1002, 1003, 1004, 1008, 1010, 1011, 1015, 1020, 1022, 1023, 1024, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "actual": [4, 13, 28, 47, 61, 76, 87, 119, 150, 177, 190, 201, 205, 209, 249, 258, 265, 354, 363, 367, 369, 378, 379, 381, 383, 386, 387, 393, 394, 395, 406, 408, 413, 416, 417, 433, 508, 514, 515, 526, 534, 537, 539, 546, 561, 562, 643, 644, 647, 657, 658, 665, 666, 667, 668, 669, 671, 673, 675, 676, 677, 679, 686, 690, 694, 700, 703, 708, 714, 720, 721, 722, 783, 795, 800, 801, 816, 817, 846, 877, 900, 906, 928, 929, 930, 963, 980, 987, 988, 991, 995, 996, 1038, 1039, 1045, 1046, 1047], "black": [4, 9, 10, 11, 13, 27, 35, 45, 50, 56, 57, 81, 82, 93, 96, 122, 145, 153, 154, 158, 159, 162, 166, 171, 172, 180, 189, 190, 191, 193, 197, 201, 202, 203, 207, 210, 213, 214, 219, 230, 240, 247, 250, 290, 301, 302, 304, 331, 349, 358, 359, 360, 381, 398, 401, 408, 415, 418, 554, 555, 630, 994, 995, 1004, 1008, 1015], "One": [4, 9, 12, 25, 31, 50, 56, 92, 101, 104, 121, 123, 126, 129, 168, 171, 174, 179, 205, 210, 216, 220, 230, 241, 252, 262, 269, 272, 280, 291, 292, 294, 308, 334, 336, 337, 348, 350, 353, 367, 378, 381, 394, 395, 408, 411, 413, 414, 415, 416, 419, 443, 448, 471, 473, 477, 511, 565, 630, 638, 657, 665, 667, 672, 674, 675, 676, 786, 804, 805, 828, 829, 830, 861, 862, 873, 904, 951, 978, 980, 984, 985, 986, 987, 988, 989, 991, 992, 995, 996, 998, 1003, 1010, 1011, 1026, 1035, 1037, 1044, 1046], "legend": [4, 7, 8, 9, 11, 13, 25, 27, 34, 38, 41, 62, 73, 74, 76, 79, 80, 81, 82, 86, 87, 91, 98, 100, 104, 105, 106, 113, 114, 115, 116, 117, 119, 124, 125, 126, 127, 128, 129, 130, 132, 133, 135, 136, 146, 153, 154, 158, 159, 160, 161, 162, 171, 172, 177, 180, 181, 183, 186, 189, 190, 191, 195, 201, 202, 203, 204, 207, 208, 209, 210, 211, 214, 215, 216, 218, 219, 225, 233, 234, 235, 236, 238, 241, 249, 257, 259, 261, 262, 264, 265, 266, 267, 269, 272, 274, 275, 276, 280, 288, 290, 291, 292, 297, 302, 308, 312, 318, 321, 328, 338, 341, 343, 346, 352, 357, 358, 359, 360, 699, 1020], "draw": [4, 7, 17, 61, 162, 171, 197, 241, 264, 269, 339, 388, 411, 413, 414, 415, 554, 555, 556, 557, 562, 563, 564, 565, 610, 633, 700, 803, 819, 912, 914, 987, 1008, 1018, 1044, 1045], "conclus": [4, 101, 171, 173, 201, 203, 262, 264, 363, 415, 1018], "abov": [4, 26, 27, 38, 45, 67, 71, 115, 118, 119, 124, 126, 136, 149, 150, 171, 172, 187, 201, 203, 207, 212, 234, 237, 238, 262, 268, 280, 290, 309, 312, 313, 318, 320, 353, 354, 361, 363, 367, 368, 369, 375, 376, 378, 379, 380, 381, 383, 385, 387, 393, 395, 396, 408, 409, 410, 412, 413, 414, 416, 418, 440, 444, 463, 466, 488, 494, 495, 496, 522, 589, 633, 703, 753, 797, 801, 809, 811, 821, 863, 864, 877, 883, 889, 897, 951, 977, 978, 980, 982, 984, 985, 988, 991, 993, 995, 998, 1002, 1003, 1004, 1009, 1015, 1016, 1022, 1023, 1024, 1037], "problemat": [4, 258, 409, 978, 1039], "captur": [4, 9, 12, 13, 38, 40, 87, 126, 130, 145, 158, 171, 180, 185, 201, 205, 253, 283, 318, 339, 343, 389, 408, 415, 416, 417, 570, 587, 588, 590, 846, 955, 988, 993, 1001, 1005, 1022, 1043], "big": [4, 45, 61, 63, 206, 223, 240, 253, 368, 381, 387, 396, 410, 416, 420, 537, 560, 561, 563, 564, 803, 824, 835, 836, 837, 838, 839, 1009, 1013, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "goe": [4, 38, 118, 361, 381, 415, 470, 471, 477, 556, 557, 563, 564, 565, 908, 909, 910, 911, 998, 1002], "artifact": [4, 14, 47, 48, 307, 369, 385], "discontinu": [4, 393], "fail": [4, 55, 67, 97, 104, 161, 162, 180, 185, 205, 237, 262, 317, 368, 379, 381, 383, 384, 389, 396, 398, 411, 412, 439, 471, 473, 675, 676, 677, 857, 858, 931, 977, 985, 1031, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048], "intra": [4, 587, 590, 790, 791], "variat": [4, 7, 12, 38, 66, 93, 130, 150, 158, 159, 166, 168, 171, 206, 246, 248, 253, 254, 259, 273, 283, 295, 318, 329, 339, 378, 412, 413, 442, 446, 458, 535, 642, 671, 673, 674, 795, 796, 815, 816, 818, 977, 988, 998, 1001, 1004, 1008, 1010, 1020, 1022, 1025, 1026, 1034, 1036, 1037], "harmon": [4, 38, 269, 353, 408, 534, 540, 727, 728, 734, 781, 793, 988], "phase": [4, 185, 195, 367, 626, 980, 985, 991, 1013, 1039, 1041], "potenti": [4, 56, 79, 166, 170, 172, 180, 291, 292, 301, 323, 343, 354, 367, 368, 395, 398, 399, 408, 412, 415, 416, 467, 481, 482, 483, 484, 495, 523, 548, 556, 557, 560, 561, 563, 564, 572, 605, 610, 633, 761, 890, 891, 898, 908, 909, 910, 911, 994, 1002, 1004, 1008, 1024, 1034, 1041, 1042, 1045], "fix": [4, 8, 21, 26, 35, 47, 72, 106, 118, 119, 122, 153, 154, 158, 161, 171, 185, 203, 219, 240, 253, 265, 301, 317, 318, 319, 320, 321, 322, 323, 353, 367, 368, 375, 377, 379, 380, 381, 383, 384, 389, 393, 395, 396, 399, 408, 409, 412, 413, 415, 416, 418, 451, 461, 471, 503, 511, 530, 536, 539, 541, 547, 548, 558, 559, 563, 564, 587, 590, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 629, 652, 662, 667, 669, 683, 686, 690, 694, 706, 783, 795, 811, 818, 842, 843, 845, 848, 850, 851, 867, 870, 884, 908, 909, 937, 955, 977, 984, 987, 988, 991, 998, 1009, 1012, 1024, 1029, 1030, 1032, 1033, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048], "two": [4, 7, 9, 11, 15, 17, 21, 25, 27, 31, 35, 38, 40, 41, 44, 56, 61, 65, 71, 72, 76, 81, 86, 87, 91, 92, 93, 96, 98, 99, 101, 105, 112, 113, 114, 121, 122, 123, 126, 129, 130, 131, 134, 137, 147, 150, 153, 154, 155, 156, 159, 160, 165, 166, 168, 171, 172, 173, 180, 184, 185, 189, 190, 191, 192, 197, 201, 202, 203, 209, 210, 213, 218, 219, 224, 226, 227, 230, 235, 237, 238, 240, 247, 248, 249, 251, 252, 253, 257, 259, 263, 269, 280, 288, 290, 293, 294, 296, 298, 307, 309, 312, 317, 318, 320, 321, 328, 335, 336, 339, 340, 341, 343, 348, 352, 353, 354, 358, 363, 374, 375, 376, 377, 378, 379, 381, 383, 385, 387, 388, 389, 393, 395, 396, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 440, 441, 442, 443, 444, 446, 449, 450, 451, 452, 456, 458, 463, 468, 469, 470, 471, 472, 473, 474, 475, 487, 489, 490, 491, 492, 493, 495, 497, 499, 500, 501, 502, 503, 504, 506, 509, 513, 518, 521, 535, 537, 539, 543, 546, 548, 549, 552, 559, 569, 580, 583, 589, 590, 591, 594, 595, 597, 598, 599, 601, 602, 605, 606, 607, 609, 610, 619, 620, 623, 627, 630, 631, 638, 642, 644, 669, 670, 672, 691, 698, 702, 703, 704, 711, 714, 715, 718, 720, 721, 722, 729, 730, 733, 734, 736, 739, 741, 752, 753, 755, 761, 762, 769, 772, 775, 776, 777, 778, 779, 783, 784, 792, 793, 794, 795, 829, 840, 841, 842, 843, 844, 846, 848, 850, 851, 852, 857, 858, 864, 865, 872, 873, 874, 875, 894, 895, 896, 900, 901, 908, 910, 911, 951, 967, 968, 974, 977, 978, 980, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1010, 1015, 1019, 1022, 1023, 1024, 1028, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "onc": [4, 8, 51, 147, 150, 153, 223, 237, 240, 260, 263, 280, 285, 313, 317, 321, 352, 354, 361, 363, 367, 369, 375, 376, 381, 385, 386, 387, 388, 389, 394, 395, 396, 408, 409, 411, 412, 413, 415, 416, 417, 418, 448, 450, 452, 471, 507, 508, 537, 543, 550, 558, 559, 589, 590, 596, 610, 618, 626, 646, 650, 652, 654, 660, 662, 664, 665, 666, 667, 675, 676, 677, 696, 711, 715, 717, 734, 779, 798, 802, 805, 815, 835, 836, 837, 838, 839, 912, 984, 985, 991, 998, 1002, 1003, 1004, 1015, 1024, 1028, 1031, 1039, 1041, 1042, 1043, 1044], "specif": [4, 11, 12, 21, 28, 35, 45, 56, 63, 66, 71, 73, 119, 133, 158, 161, 171, 172, 177, 205, 219, 257, 262, 280, 307, 317, 318, 322, 343, 352, 353, 354, 363, 367, 368, 376, 381, 384, 386, 387, 389, 393, 395, 398, 404, 407, 408, 409, 412, 413, 415, 416, 417, 418, 495, 502, 533, 550, 556, 563, 566, 567, 568, 569, 573, 587, 590, 592, 611, 612, 613, 614, 616, 617, 618, 619, 621, 622, 624, 639, 642, 645, 646, 651, 657, 671, 686, 696, 698, 711, 712, 744, 797, 798, 799, 804, 805, 806, 811, 823, 836, 929, 931, 932, 951, 964, 965, 966, 982, 984, 985, 987, 988, 990, 991, 993, 995, 998, 1002, 1004, 1005, 1006, 1007, 1024, 1026, 1031, 1035, 1039, 1040, 1041, 1042, 1045, 1046, 1048], "furthermor": [4, 13, 38, 119, 159, 172, 173, 240, 241, 243, 285, 352, 353, 367, 369, 388, 408, 413, 415, 416, 561, 589, 605, 618, 703, 734, 744, 753, 755, 793, 900, 984, 996, 1034, 1038], "enforc": [4, 12, 35, 54, 96, 158, 195, 294, 367, 381, 410, 413, 415, 507, 526, 530, 536, 538, 541, 542, 544, 545, 547, 556, 557, 560, 561, 563, 564, 879, 908, 909, 910, 911, 920, 921, 978, 985, 1033, 1039, 1041, 1043, 1047], "behav": [4, 12, 49, 53, 58, 205, 257, 307, 319, 339, 363, 381, 387, 393, 394, 408, 409, 412, 880, 984, 998, 1003, 1005, 1009, 1024, 1031, 1038, 1040, 1044, 1045], "similarli": [4, 12, 38, 56, 93, 129, 172, 174, 185, 190, 201, 231, 240, 262, 301, 307, 323, 339, 363, 368, 377, 379, 383, 386, 395, 405, 411, 412, 416, 727, 728, 736, 781, 782, 785, 983, 985, 986, 988, 995, 1002, 1003, 1005, 1015, 1019, 1039, 1045, 1047], "spiki": 4, "instanc": [4, 8, 10, 13, 25, 27, 28, 54, 57, 59, 116, 147, 150, 166, 172, 173, 184, 185, 232, 237, 240, 258, 260, 271, 273, 274, 296, 317, 331, 335, 336, 342, 343, 352, 353, 354, 366, 367, 368, 375, 376, 378, 379, 380, 381, 383, 385, 386, 387, 389, 390, 393, 395, 398, 399, 405, 406, 408, 409, 412, 413, 415, 416, 417, 418, 419, 420, 422, 432, 433, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 458, 459, 461, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 487, 490, 491, 494, 495, 496, 502, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 576, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 609, 610, 619, 626, 627, 628, 629, 631, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 706, 719, 727, 728, 736, 769, 772, 776, 777, 778, 779, 781, 782, 785, 786, 787, 790, 791, 795, 796, 797, 799, 800, 801, 802, 803, 804, 806, 809, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 889, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 920, 921, 923, 931, 932, 936, 937, 944, 945, 946, 947, 956, 958, 959, 962, 972, 973, 977, 978, 984, 985, 988, 990, 991, 994, 996, 998, 1002, 1003, 1004, 1009, 1012, 1015, 1022, 1023, 1024, 1026, 1031, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "shorter": [4, 159, 250, 393, 408, 413, 449, 456, 562, 696, 990, 994, 1024, 1042], "necessarili": [4, 32, 73, 99, 171, 201, 209, 219, 235, 236, 248, 309, 352, 353, 375, 385, 404, 406, 408, 415, 626, 848, 850, 851, 852, 982, 985, 987, 988], "59": [4, 8, 177, 185, 219, 344, 378, 387, 408, 409, 509, 988, 1027, 1031], "37": [4, 13, 185, 265, 326, 350, 361, 376, 415, 523, 715, 880, 998, 1031], "creat": [4, 5, 8, 11, 13, 17, 21, 22, 27, 28, 31, 33, 35, 38, 40, 42, 44, 45, 47, 50, 53, 59, 61, 63, 72, 73, 81, 87, 91, 98, 101, 115, 118, 122, 123, 126, 129, 132, 148, 149, 153, 155, 158, 159, 160, 162, 166, 170, 172, 180, 182, 184, 187, 197, 202, 203, 213, 214, 224, 235, 237, 240, 241, 243, 252, 257, 258, 260, 262, 272, 293, 295, 296, 309, 311, 312, 317, 320, 321, 331, 335, 336, 340, 341, 344, 347, 348, 349, 354, 357, 359, 360, 363, 368, 376, 377, 379, 380, 381, 383, 385, 386, 387, 388, 389, 390, 394, 395, 398, 406, 408, 409, 412, 414, 415, 416, 418, 437, 450, 452, 464, 465, 498, 514, 515, 516, 517, 545, 552, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 587, 588, 590, 596, 627, 629, 630, 631, 632, 696, 697, 699, 700, 701, 780, 787, 797, 799, 803, 807, 811, 815, 819, 821, 822, 830, 861, 873, 902, 905, 908, 909, 910, 911, 915, 918, 940, 941, 947, 956, 961, 973, 978, 984, 987, 988, 989, 991, 995, 998, 999, 1000, 1002, 1003, 1004, 1008, 1009, 1013, 1020, 1022, 1023, 1028, 1031, 1032, 1034, 1037, 1041, 1044, 1045, 1046, 1047, 1048], "turn": [4, 33, 79, 165, 166, 171, 185, 216, 217, 235, 262, 289, 354, 367, 369, 376, 393, 395, 396, 407, 408, 409, 411, 413, 416, 417, 418, 580, 581, 588, 606, 607, 829, 833, 902, 905, 923, 978, 982, 990, 993, 998, 1013, 1024, 1036, 1038, 1039, 1044], "downstream": [4, 81, 314, 354, 416, 530, 533, 536, 540, 541, 605, 873, 998, 1041], "freedom": [4, 98, 158, 189, 190, 192, 262, 540, 655, 795, 984, 1034], "underfit": [4, 35, 126, 153, 168, 173, 202, 205, 255, 277, 278, 301, 313, 347, 415, 656, 797, 800, 801, 811, 822, 823, 860, 875, 983, 984, 1010], "approxim": [4, 5, 28, 34, 47, 54, 81, 100, 101, 106, 117, 125, 126, 150, 154, 171, 178, 181, 197, 201, 202, 215, 219, 224, 227, 229, 230, 233, 236, 245, 253, 262, 267, 276, 286, 287, 294, 299, 307, 309, 310, 312, 317, 320, 352, 354, 359, 360, 363, 370, 373, 378, 390, 393, 395, 405, 406, 409, 411, 412, 413, 415, 418, 420, 421, 422, 432, 448, 468, 469, 472, 473, 474, 475, 481, 482, 483, 490, 495, 501, 520, 523, 532, 533, 534, 535, 537, 538, 539, 540, 542, 543, 544, 545, 546, 558, 559, 581, 588, 609, 610, 618, 637, 638, 639, 640, 641, 656, 657, 658, 671, 673, 675, 676, 678, 686, 691, 756, 757, 762, 795, 798, 815, 821, 825, 826, 840, 841, 844, 848, 850, 851, 852, 856, 860, 861, 866, 870, 872, 873, 877, 889, 900, 905, 906, 936, 937, 962, 981, 982, 983, 984, 985, 987, 991, 992, 993, 994, 995, 996, 1000, 1002, 1003, 1004, 1008, 1009, 1010, 1024, 1026, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045], "especi": [4, 8, 13, 56, 57, 123, 126, 171, 201, 237, 313, 322, 353, 363, 368, 375, 381, 389, 393, 395, 406, 408, 416, 442, 448, 500, 537, 556, 557, 558, 559, 563, 564, 565, 645, 646, 647, 649, 651, 652, 653, 657, 658, 659, 660, 661, 662, 668, 679, 694, 704, 744, 835, 836, 837, 838, 839, 908, 909, 910, 911, 984, 990, 991, 996, 998, 1013, 1034, 1039, 1043, 1044, 1045], "sharp": [4, 172, 995, 998], "rush": [4, 13, 381], "flatter": [4, 26], "accur": [4, 9, 13, 22, 26, 27, 81, 96, 128, 153, 160, 171, 172, 205, 216, 219, 262, 269, 273, 280, 321, 352, 353, 363, 380, 406, 408, 410, 413, 415, 416, 417, 436, 442, 446, 450, 452, 458, 530, 537, 539, 541, 542, 544, 545, 546, 606, 607, 633, 800, 801, 840, 841, 936, 937, 980, 985, 988, 1004, 1045], "tend": [4, 12, 28, 38, 40, 44, 53, 56, 58, 150, 171, 172, 190, 201, 206, 219, 247, 250, 259, 263, 283, 304, 343, 354, 367, 369, 381, 383, 395, 406, 408, 410, 413, 415, 417, 436, 447, 652, 846, 877, 889, 937, 984, 985, 991, 1004, 1024], "under": [4, 7, 11, 25, 26, 28, 42, 68, 79, 80, 104, 123, 126, 172, 201, 230, 240, 262, 269, 271, 272, 308, 323, 370, 375, 381, 383, 385, 387, 389, 395, 398, 402, 406, 408, 410, 412, 413, 416, 417, 445, 450, 452, 469, 470, 471, 472, 473, 474, 475, 531, 538, 540, 542, 653, 654, 655, 701, 705, 706, 707, 714, 740, 752, 786, 787, 795, 796, 845, 944, 984, 985, 986, 988, 991, 998, 1002, 1003, 1004, 1008, 1009, 1024, 1031, 1033, 1034, 1036, 1039, 1043], "These": [4, 5, 7, 28, 52, 96, 98, 102, 118, 122, 168, 172, 190, 201, 202, 203, 231, 269, 280, 285, 289, 304, 307, 314, 316, 321, 327, 329, 363, 367, 368, 374, 377, 378, 381, 383, 385, 388, 390, 393, 395, 398, 402, 405, 406, 407, 408, 411, 413, 415, 416, 417, 418, 441, 445, 447, 497, 507, 508, 514, 537, 566, 567, 601, 602, 667, 675, 676, 698, 705, 731, 754, 776, 792, 797, 800, 801, 803, 811, 819, 821, 822, 823, 824, 825, 827, 845, 846, 865, 977, 979, 982, 984, 985, 988, 989, 999, 1001, 1003, 1008, 1015, 1019, 1024, 1031, 1037, 1039, 1040, 1041, 1044, 1048], "systemat": [4, 262, 383, 711, 726, 988, 1046], "reveal": [4, 13, 171, 173, 352, 387, 405, 985, 1047], "form": [4, 9, 20, 33, 43, 61, 68, 96, 136, 160, 161, 171, 236, 237, 253, 262, 326, 363, 375, 378, 381, 383, 385, 395, 396, 405, 407, 408, 411, 412, 413, 414, 415, 416, 418, 420, 422, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 458, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 684, 686, 687, 688, 689, 690, 691, 692, 698, 795, 796, 797, 800, 801, 802, 805, 807, 811, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 926, 945, 948, 977, 979, 981, 982, 984, 985, 988, 989, 992, 993, 994, 998, 1003, 1008, 1015, 1022, 1037, 1041, 1043], "explain": [4, 5, 12, 57, 74, 86, 87, 105, 126, 153, 158, 159, 172, 173, 201, 219, 230, 237, 253, 272, 275, 313, 352, 353, 368, 379, 381, 385, 402, 404, 411, 413, 418, 492, 520, 523, 533, 540, 543, 548, 624, 647, 655, 668, 679, 720, 721, 722, 726, 783, 984, 991, 1004, 1007, 1008, 1020, 1022, 1023, 1042, 1044, 1045], "lack": [4, 343, 381, 383, 393, 412, 825, 915, 1003, 1045], "deriv": [4, 20, 106, 107, 125, 158, 161, 173, 189, 190, 194, 202, 368, 376, 383, 410, 412, 414, 415, 416, 418, 420, 440, 444, 445, 464, 532, 605, 616, 621, 647, 668, 675, 679, 857, 858, 873, 879, 900, 901, 982, 984, 985, 988, 992, 994, 1003, 1031, 1032, 1033, 1038, 1039, 1040, 1046], "address": [4, 49, 205, 352, 376, 381, 408, 416, 656, 984, 985, 990, 991, 992, 993, 994, 998, 1013, 1022, 1039], "section": [4, 38, 96, 101, 116, 133, 139, 140, 141, 142, 158, 162, 170, 171, 172, 174, 180, 185, 189, 190, 203, 226, 231, 237, 240, 242, 260, 262, 265, 271, 312, 313, 314, 319, 352, 353, 354, 363, 374, 376, 379, 381, 382, 383, 385, 386, 387, 388, 389, 396, 399, 402, 406, 407, 409, 411, 412, 413, 415, 416, 417, 418, 438, 442, 458, 533, 613, 618, 621, 636, 644, 786, 796, 902, 905, 977, 982, 984, 988, 989, 991, 992, 994, 995, 1002, 1003, 1005, 1007, 1022, 1024, 1031, 1033, 1034, 1035, 1038], "margin": [4, 12, 17, 26, 28, 92, 115, 142, 154, 155, 156, 157, 158, 159, 168, 171, 172, 179, 211, 212, 214, 220, 238, 240, 262, 280, 307, 310, 313, 334, 335, 337, 338, 339, 341, 343, 345, 348, 349, 350, 378, 406, 407, 413, 415, 418, 511, 609, 610, 630, 644, 675, 733, 829, 877, 889, 902, 905, 984, 988, 990, 994, 995, 998, 1002, 1003, 1010, 1022, 1038, 1040], "construct": [4, 11, 71, 73, 113, 115, 117, 121, 133, 150, 219, 231, 237, 242, 244, 298, 308, 310, 318, 321, 375, 378, 383, 390, 395, 408, 409, 412, 413, 415, 416, 419, 433, 440, 441, 443, 444, 449, 451, 456, 462, 464, 466, 518, 534, 540, 543, 554, 555, 580, 586, 638, 687, 689, 690, 811, 840, 841, 842, 843, 844, 846, 848, 850, 851, 852, 859, 860, 861, 862, 864, 905, 919, 921, 936, 937, 946, 947, 951, 977, 978, 980, 984, 985, 988, 989, 991, 998, 1001, 1003, 1004, 1009, 1015, 1019, 1036, 1038, 1039, 1042, 1045], "polynomialfeatur": [4, 180, 201, 202, 207, 242, 276, 319, 343, 879, 984, 998, 1035, 1039, 1040, 1041, 1044, 1045, 1047, 1048], "coars": [4, 122, 387, 447, 460], "explicitli": [4, 47, 120, 153, 160, 165, 166, 202, 233, 237, 343, 354, 363, 368, 375, 377, 381, 382, 383, 385, 393, 395, 399, 404, 412, 416, 418, 534, 548, 549, 578, 579, 596, 626, 647, 657, 658, 668, 679, 708, 725, 780, 786, 787, 800, 801, 831, 834, 840, 841, 866, 890, 891, 956, 977, 978, 980, 982, 984, 985, 988, 990, 991, 998, 1013, 1024, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1044, 1045], "too": [4, 7, 12, 13, 18, 45, 51, 56, 58, 63, 71, 75, 83, 100, 126, 165, 173, 185, 202, 205, 223, 234, 240, 248, 256, 260, 269, 277, 303, 313, 339, 352, 359, 360, 367, 378, 381, 387, 389, 393, 395, 408, 410, 412, 415, 416, 417, 420, 436, 448, 537, 587, 590, 678, 691, 706, 835, 836, 837, 838, 839, 865, 878, 880, 983, 985, 987, 988, 990, 991, 995, 1022, 1032, 1035, 1038, 1039, 1040, 1041, 1043], "mani": [4, 7, 10, 20, 56, 57, 75, 79, 83, 113, 119, 120, 121, 122, 124, 127, 146, 150, 173, 201, 222, 234, 248, 256, 262, 269, 270, 274, 285, 307, 312, 313, 317, 318, 319, 320, 321, 323, 352, 363, 367, 369, 376, 378, 380, 381, 394, 395, 396, 398, 399, 405, 406, 408, 409, 410, 413, 415, 416, 417, 418, 420, 502, 552, 553, 556, 557, 558, 559, 563, 564, 565, 587, 590, 605, 608, 626, 638, 649, 653, 657, 658, 665, 666, 667, 675, 676, 677, 691, 694, 772, 776, 797, 801, 811, 857, 858, 873, 878, 880, 900, 908, 909, 910, 911, 977, 978, 980, 984, 985, 987, 988, 989, 990, 991, 994, 995, 996, 998, 1001, 1003, 1005, 1007, 1008, 1009, 1013, 1022, 1024, 1031, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1045, 1046, 1047, 1048], "featureunion": [4, 75, 373, 395, 399, 407, 463, 628, 862, 978, 1009, 1013, 1026, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047], "hour_workday_interact": 4, "interaction_onli": [4, 875, 984, 998], "combin": [4, 12, 13, 21, 26, 28, 62, 71, 72, 74, 75, 76, 91, 96, 105, 106, 112, 113, 123, 124, 128, 136, 137, 153, 159, 165, 166, 168, 171, 185, 201, 205, 218, 219, 226, 230, 232, 235, 240, 258, 262, 263, 271, 273, 274, 294, 302, 313, 319, 320, 322, 342, 343, 354, 358, 367, 373, 377, 378, 381, 386, 394, 395, 405, 406, 407, 408, 409, 412, 413, 414, 415, 416, 417, 418, 420, 421, 444, 463, 465, 466, 472, 474, 475, 478, 479, 480, 488, 495, 507, 508, 514, 520, 523, 525, 530, 536, 537, 539, 541, 546, 548, 559, 561, 564, 566, 567, 609, 613, 615, 620, 623, 629, 633, 642, 645, 646, 651, 652, 657, 658, 659, 660, 661, 662, 665, 667, 671, 672, 673, 674, 675, 677, 678, 680, 683, 700, 728, 786, 797, 800, 801, 808, 809, 821, 823, 827, 859, 860, 861, 865, 873, 874, 875, 880, 900, 962, 977, 980, 981, 984, 988, 989, 991, 994, 998, 1001, 1002, 1004, 1005, 1010, 1013, 1020, 1022, 1024, 1031, 1036, 1039, 1042, 1043, 1044, 1046, 1047], "previou": [4, 44, 54, 72, 96, 116, 123, 126, 133, 153, 158, 159, 170, 171, 172, 185, 187, 202, 234, 236, 237, 262, 265, 269, 307, 312, 321, 352, 353, 354, 363, 367, 376, 381, 383, 386, 387, 389, 393, 395, 396, 398, 408, 415, 416, 467, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 629, 645, 647, 651, 652, 657, 659, 661, 665, 666, 667, 668, 675, 676, 677, 679, 706, 816, 831, 834, 849, 857, 858, 897, 914, 984, 988, 992, 998, 1009, 1015, 1024, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "nice": [4, 68, 202, 237, 307, 367, 413, 1024], "cyclic_spline_interactions_pipelin": 4, "078": [4, 36], "009": [4, 353, 387], "104": [4, 13, 25, 61, 69, 1010], "highlight": [4, 13, 15, 56, 72, 81, 93, 111, 117, 118, 119, 120, 123, 130, 147, 150, 153, 154, 159, 165, 166, 172, 173, 177, 182, 189, 201, 202, 203, 219, 232, 237, 241, 242, 243, 244, 259, 271, 274, 280, 283, 287, 311, 324, 352, 354, 370, 381, 385, 386, 389, 393, 418, 442, 445, 446, 463, 466, 489, 490, 495, 500, 501, 503, 511, 514, 520, 523, 537, 560, 561, 563, 564, 566, 598, 601, 627, 629, 631, 633, 639, 645, 647, 651, 657, 668, 679, 687, 700, 701, 716, 746, 786, 793, 797, 800, 801, 803, 811, 819, 822, 826, 842, 844, 861, 865, 870, 873, 874, 875, 879, 880, 881, 897, 898, 900, 905, 908, 909, 932, 985, 988, 996, 998, 1003, 1010, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "anoth": [4, 38, 96, 101, 113, 128, 150, 153, 161, 166, 171, 190, 205, 209, 227, 230, 237, 241, 248, 262, 264, 265, 268, 272, 295, 352, 354, 357, 363, 367, 369, 375, 376, 379, 381, 383, 387, 393, 395, 399, 402, 405, 408, 412, 413, 415, 416, 417, 419, 441, 443, 451, 454, 461, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 507, 537, 539, 546, 672, 675, 691, 708, 718, 803, 819, 859, 860, 881, 977, 978, 983, 984, 985, 988, 989, 991, 994, 998, 1002, 1003, 1015, 1022, 1023, 1024, 1040, 1041], "either": [4, 10, 31, 72, 119, 122, 123, 171, 189, 191, 231, 240, 257, 266, 271, 290, 347, 352, 361, 367, 368, 373, 376, 379, 381, 382, 383, 387, 395, 399, 402, 406, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 420, 441, 446, 451, 486, 495, 511, 523, 532, 533, 535, 543, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 581, 582, 583, 587, 588, 589, 590, 592, 593, 596, 601, 606, 607, 609, 610, 621, 626, 629, 631, 632, 649, 653, 655, 663, 675, 677, 681, 682, 689, 696, 697, 701, 705, 706, 710, 711, 719, 722, 724, 725, 726, 727, 728, 733, 736, 737, 738, 740, 750, 754, 767, 772, 776, 780, 781, 782, 783, 785, 786, 787, 792, 797, 800, 801, 803, 811, 819, 820, 821, 822, 823, 824, 825, 827, 830, 860, 890, 891, 897, 900, 901, 908, 909, 910, 911, 915, 945, 949, 977, 984, 988, 989, 990, 991, 992, 993, 996, 998, 1002, 1003, 1015, 1023, 1024, 1031, 1034, 1040, 1041, 1042, 1045], "after": [4, 18, 21, 22, 27, 47, 54, 56, 71, 72, 76, 82, 98, 113, 124, 131, 133, 136, 146, 150, 158, 160, 162, 165, 171, 177, 194, 201, 240, 241, 244, 250, 262, 271, 283, 285, 293, 295, 307, 308, 311, 312, 352, 353, 369, 376, 378, 380, 381, 383, 385, 387, 388, 389, 393, 395, 402, 404, 405, 406, 408, 409, 412, 413, 416, 417, 420, 441, 446, 449, 450, 451, 452, 455, 461, 514, 531, 535, 552, 553, 558, 559, 560, 561, 596, 626, 629, 657, 658, 665, 666, 667, 672, 674, 675, 676, 677, 691, 711, 724, 754, 792, 795, 796, 800, 801, 849, 856, 860, 873, 879, 900, 905, 906, 977, 978, 982, 984, 988, 992, 993, 998, 1000, 1002, 1003, 1004, 1009, 1015, 1022, 1024, 1031, 1034, 1038, 1039, 1042, 1043, 1046], "quadrat": [4, 9, 30, 34, 36, 81, 82, 83, 158, 162, 168, 215, 252, 264, 320, 407, 439, 457, 460, 548, 549, 622, 630, 647, 657, 658, 668, 675, 679, 715, 905, 906, 984, 985, 988, 991, 994, 998, 1002, 1003, 1010, 1011, 1026, 1032], "tractabl": [4, 412, 633, 1008, 1044], "nystr\u00f6m": [4, 980], "latter": [4, 15, 252, 262, 271, 272, 293, 312, 347, 369, 378, 395, 412, 415, 416, 422, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 740, 795, 796, 797, 800, 801, 806, 811, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 955, 991, 1040], "kernel_approxim": [4, 165, 168, 176, 177, 178, 215, 230, 235, 319, 370, 676, 756, 757, 866, 980, 1010, 1015, 1032, 1038, 1048], "nystroem": [4, 165, 215, 230, 235, 373, 639, 640, 641, 676, 866, 905, 906, 1026, 1032, 1038, 1041, 1043, 1044, 1045], "cyclic_spline_poly_pipelin": 4, "poli": [4, 17, 142, 177, 262, 336, 343, 346, 451, 534, 619, 763, 772, 797, 875, 902, 903, 904, 905, 906, 984, 998, 1022], "n_compon": [4, 5, 6, 12, 15, 45, 53, 58, 59, 60, 71, 74, 75, 86, 87, 91, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 131, 177, 200, 222, 223, 224, 225, 226, 227, 230, 234, 235, 238, 242, 247, 248, 249, 250, 251, 252, 253, 261, 289, 294, 304, 312, 319, 321, 353, 383, 386, 387, 395, 411, 413, 420, 450, 451, 461, 463, 481, 482, 483, 484, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 638, 639, 640, 641, 687, 688, 689, 690, 691, 692, 693, 694, 695, 795, 796, 849, 856, 859, 892, 893, 894, 937, 980, 982, 985, 987, 991, 1020, 1023, 1032, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1048], "300": [4, 21, 22, 35, 39, 51, 59, 99, 113, 114, 115, 119, 166, 191, 227, 230, 234, 251, 265, 267, 278, 295, 310, 319, 326, 345, 347, 383, 442, 446, 447, 458, 460, 638, 643, 644, 678, 689, 691, 693, 857, 984, 1010, 1041], "053": [4, 150, 378, 387], "002": [4, 12, 150, 153, 378], "076": [4, 15, 361, 362, 888, 1010], "004": [4, 174, 175, 353, 1010], "almost": [4, 35, 119, 124, 125, 203, 209, 237, 240, 276, 312, 329, 363, 374, 376, 385, 387, 393, 394, 395, 399, 408, 412, 413, 469, 470, 471, 472, 474, 475, 476, 795, 977, 983, 984, 987, 988, 1003, 1023, 1024, 1039, 1044], "rival": [4, 897, 1001], "intermedi": [4, 7, 53, 56, 118, 126, 240, 339, 416, 558, 559, 618, 860, 988, 1043], "compound": [4, 219, 416, 609, 611, 679, 722, 750, 984, 1024], "one_hot_poly_pipelin": 4, "passthrough": [4, 73, 123, 171, 172, 201, 219, 240, 313, 322, 409, 463, 466, 566, 567, 859, 860, 998, 1040, 1042, 1045, 1046, 1048], "082": 4, "006": [4, 69, 270, 387], "111": [4, 7, 8, 17, 68, 72, 77, 91, 102, 103, 194, 198, 216, 220, 226, 230, 245, 262, 285, 852, 1010, 1034], "competit": [4, 126, 352, 415, 643, 991], "low": [4, 11, 12, 38, 51, 82, 87, 98, 100, 104, 113, 116, 129, 150, 173, 194, 196, 201, 203, 205, 215, 222, 224, 230, 234, 240, 247, 248, 250, 253, 256, 262, 264, 268, 269, 277, 291, 292, 303, 311, 313, 314, 323, 329, 338, 339, 352, 361, 377, 378, 381, 386, 389, 395, 398, 405, 406, 407, 412, 413, 416, 441, 443, 448, 467, 520, 523, 534, 581, 588, 602, 678, 691, 695, 704, 724, 740, 787, 845, 874, 881, 898, 937, 953, 956, 977, 983, 984, 985, 987, 988, 991, 993, 994, 995, 996, 998, 1000, 1003, 1004, 1011, 1026, 1032, 1035, 1036, 1037, 1039, 1040, 1045, 1046], "rank": [4, 18, 26, 81, 100, 104, 120, 148, 173, 174, 219, 260, 262, 270, 377, 403, 405, 406, 410, 411, 413, 415, 416, 507, 508, 520, 523, 548, 549, 592, 593, 605, 647, 656, 668, 679, 695, 719, 724, 725, 737, 738, 754, 792, 800, 801, 937, 977, 979, 980, 985, 996, 998, 1013, 1026, 1032, 1037, 1040, 1041, 1045, 1046], "fact": [4, 11, 20, 26, 82, 87, 113, 126, 173, 234, 244, 280, 283, 352, 375, 388, 393, 395, 411, 413, 414, 415, 416, 648, 667, 669, 703, 982, 984, 991, 998, 1002, 1003, 1009, 1013, 1045], "smoother": [4, 5, 126, 172, 303, 414], "allow": [4, 21, 57, 59, 75, 76, 91, 100, 101, 116, 117, 131, 153, 158, 160, 162, 195, 201, 205, 219, 223, 231, 234, 241, 243, 244, 247, 262, 283, 317, 318, 319, 320, 322, 343, 344, 352, 361, 363, 367, 375, 379, 381, 382, 383, 385, 388, 390, 395, 396, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 436, 440, 442, 443, 444, 445, 446, 448, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 495, 522, 523, 532, 533, 537, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 592, 593, 596, 602, 609, 610, 614, 626, 627, 629, 633, 634, 637, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 687, 689, 691, 698, 740, 760, 763, 772, 776, 779, 790, 791, 795, 796, 797, 798, 799, 800, 801, 804, 806, 808, 811, 815, 818, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 845, 846, 847, 850, 851, 855, 857, 858, 860, 862, 863, 865, 866, 867, 872, 879, 880, 884, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 918, 920, 921, 931, 932, 952, 956, 977, 978, 980, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 998, 1000, 1001, 1002, 1003, 1004, 1008, 1009, 1013, 1015, 1028, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "find": [4, 5, 6, 12, 18, 41, 47, 48, 49, 50, 53, 54, 56, 58, 66, 74, 81, 82, 96, 98, 100, 101, 107, 124, 133, 153, 157, 159, 161, 172, 185, 189, 190, 203, 209, 222, 224, 226, 227, 233, 240, 252, 261, 262, 263, 273, 288, 293, 294, 295, 312, 317, 323, 341, 342, 343, 347, 352, 353, 357, 368, 378, 379, 381, 382, 383, 386, 387, 390, 393, 394, 395, 396, 405, 408, 410, 411, 413, 415, 416, 417, 419, 440, 443, 444, 445, 449, 450, 451, 452, 461, 530, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 557, 564, 581, 588, 609, 610, 646, 649, 652, 653, 654, 655, 657, 658, 670, 687, 706, 727, 728, 736, 780, 781, 782, 785, 786, 792, 797, 811, 842, 843, 844, 846, 848, 850, 851, 852, 873, 874, 879, 892, 893, 894, 908, 909, 911, 917, 936, 937, 939, 977, 978, 980, 983, 984, 985, 987, 988, 989, 992, 994, 998, 1002, 1003, 1004, 1007, 1009, 1013, 1015, 1017, 1019, 1020, 1022, 1023, 1024, 1031, 1038, 1039, 1040, 1041, 1043, 1045, 1046], "function": [4, 5, 6, 7, 8, 13, 15, 21, 22, 38, 47, 54, 55, 56, 58, 60, 67, 71, 72, 73, 76, 80, 96, 99, 101, 106, 111, 118, 119, 123, 125, 126, 127, 128, 139, 146, 153, 156, 157, 158, 159, 160, 161, 166, 168, 170, 171, 172, 174, 179, 180, 183, 185, 188, 194, 196, 197, 198, 199, 201, 202, 207, 208, 209, 214, 217, 218, 219, 220, 222, 231, 233, 236, 237, 240, 241, 243, 244, 252, 260, 262, 263, 264, 265, 270, 271, 276, 280, 285, 301, 304, 307, 314, 317, 318, 320, 321, 323, 331, 336, 337, 338, 339, 340, 341, 343, 345, 347, 349, 352, 353, 358, 363, 367, 368, 370, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 393, 394, 395, 398, 399, 402, 406, 408, 409, 410, 411, 413, 414, 416, 417, 419, 420, 436, 439, 442, 443, 444, 446, 447, 449, 451, 453, 456, 457, 458, 459, 460, 463, 464, 467, 468, 470, 471, 473, 477, 487, 488, 490, 491, 494, 496, 502, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 571, 574, 580, 581, 587, 588, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 603, 606, 607, 608, 609, 610, 614, 616, 618, 619, 621, 622, 626, 627, 630, 631, 632, 633, 634, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 686, 687, 688, 689, 690, 691, 692, 693, 697, 698, 699, 701, 702, 703, 705, 710, 711, 715, 718, 720, 721, 722, 726, 730, 732, 733, 736, 738, 739, 740, 748, 753, 755, 759, 760, 761, 763, 766, 769, 772, 776, 777, 778, 779, 780, 781, 783, 787, 790, 791, 792, 794, 795, 796, 797, 799, 800, 801, 802, 803, 808, 809, 811, 812, 813, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 869, 870, 872, 876, 877, 878, 879, 880, 881, 884, 886, 889, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 915, 918, 927, 929, 930, 931, 936, 937, 947, 948, 954, 955, 956, 958, 959, 962, 963, 972, 977, 978, 979, 981, 983, 985, 986, 989, 991, 992, 993, 994, 995, 996, 998, 1001, 1002, 1004, 1008, 1009, 1010, 1011, 1015, 1018, 1019, 1020, 1024, 1026, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "abl": [4, 5, 9, 25, 48, 56, 62, 83, 87, 100, 101, 130, 159, 171, 174, 185, 190, 201, 217, 219, 226, 268, 273, 339, 363, 367, 368, 369, 375, 379, 381, 383, 385, 386, 393, 408, 410, 412, 416, 484, 502, 533, 825, 872, 977, 978, 984, 987, 988, 989, 994, 998, 1001, 1004, 1005, 1009, 1015, 1023, 1024, 1037, 1038, 1042], "gbrt_predict": 4, "one_hot_poly_predict": 4, "cyclic_spline_poly_predict": 4, "grow": [4, 13, 40, 177, 185, 287, 347, 354, 367, 404, 410, 416, 556, 557, 558, 559, 563, 564, 565, 807, 840, 841, 908, 909, 910, 911, 977, 988, 991, 1004, 1013, 1018, 1022, 1034, 1035], "depth": [4, 118, 123, 127, 129, 134, 280, 357, 359, 360, 361, 367, 379, 381, 385, 394, 415, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 840, 841, 845, 908, 909, 910, 911, 912, 914, 942, 993, 994, 1004, 1033, 1034, 1042], "accuraci": [4, 6, 7, 8, 17, 26, 31, 32, 33, 34, 71, 72, 73, 74, 113, 119, 120, 124, 125, 131, 146, 147, 149, 154, 174, 177, 201, 205, 209, 216, 217, 249, 260, 261, 262, 263, 264, 266, 268, 277, 280, 287, 293, 294, 295, 304, 309, 312, 323, 326, 327, 329, 339, 342, 343, 347, 363, 367, 383, 394, 395, 407, 408, 412, 415, 416, 417, 425, 436, 448, 468, 470, 471, 477, 531, 533, 540, 548, 549, 550, 552, 554, 556, 557, 558, 560, 563, 564, 566, 568, 609, 633, 657, 658, 665, 667, 670, 673, 674, 675, 691, 696, 702, 707, 712, 717, 732, 736, 741, 752, 761, 785, 792, 794, 824, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 842, 847, 849, 850, 857, 895, 896, 900, 902, 905, 908, 910, 936, 937, 977, 982, 983, 984, 985, 989, 991, 992, 996, 1000, 1002, 1004, 1019, 1024, 1039, 1040], "On": [4, 12, 13, 18, 27, 68, 72, 73, 86, 87, 101, 113, 116, 118, 120, 121, 126, 129, 130, 133, 136, 145, 147, 157, 158, 171, 172, 173, 182, 189, 190, 203, 205, 231, 232, 233, 234, 236, 237, 240, 241, 242, 243, 244, 247, 249, 252, 257, 258, 259, 260, 262, 263, 264, 265, 267, 269, 274, 304, 307, 309, 311, 312, 313, 318, 319, 321, 322, 328, 339, 347, 361, 367, 379, 382, 383, 385, 393, 395, 402, 404, 406, 408, 412, 413, 415, 417, 418, 642, 655, 690, 733, 759, 865, 881, 977, 981, 984, 987, 988, 990, 994, 1001, 1003, 1019, 1022], "contrari": [4, 14, 171, 223, 227, 240, 247, 265, 307, 352, 375, 408, 495, 543, 605, 814, 881, 984, 990, 994], "significantli": [4, 25, 26, 38, 79, 80, 113, 119, 124, 126, 150, 171, 172, 173, 201, 205, 209, 217, 219, 262, 285, 318, 319, 353, 354, 363, 368, 385, 408, 413, 415, 416, 421, 468, 473, 478, 479, 537, 539, 546, 557, 564, 645, 646, 651, 652, 659, 660, 661, 662, 683, 691, 840, 841, 980, 984, 985, 991, 996, 1003, 1031, 1033, 1034, 1038, 1039, 1044, 1045, 1046], "over": [4, 7, 8, 9, 17, 21, 25, 27, 28, 32, 38, 51, 56, 57, 73, 75, 96, 116, 119, 129, 145, 149, 153, 161, 165, 170, 172, 183, 195, 201, 209, 219, 230, 240, 262, 263, 265, 267, 269, 270, 271, 274, 290, 298, 301, 302, 309, 320, 321, 323, 326, 352, 353, 367, 368, 369, 376, 377, 380, 381, 382, 383, 387, 394, 395, 404, 406, 407, 408, 409, 412, 413, 414, 415, 416, 420, 445, 448, 463, 471, 508, 532, 533, 535, 536, 537, 538, 545, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 580, 581, 587, 588, 590, 593, 601, 631, 632, 633, 643, 644, 645, 646, 651, 652, 657, 659, 660, 661, 662, 664, 665, 666, 667, 675, 676, 677, 684, 685, 696, 715, 717, 737, 761, 786, 791, 795, 797, 800, 801, 803, 808, 809, 811, 819, 821, 822, 823, 824, 825, 827, 856, 857, 858, 859, 875, 879, 900, 908, 910, 917, 926, 956, 977, 984, 985, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 1001, 1002, 1003, 1004, 1008, 1009, 1013, 1020, 1023, 1031, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "compet": 4, "access": [4, 50, 79, 240, 248, 253, 352, 361, 367, 368, 381, 382, 383, 389, 393, 395, 396, 404, 408, 410, 411, 415, 416, 418, 449, 456, 463, 535, 566, 567, 568, 569, 616, 858, 859, 860, 915, 977, 984, 987, 988, 994, 995, 996, 1002, 1003, 1009, 1013, 1015, 1023, 1024, 1031, 1033, 1037, 1038, 1039, 1040, 1043, 1045, 1046, 1047], "requir": [4, 7, 14, 26, 46, 47, 49, 54, 56, 58, 59, 68, 71, 91, 100, 102, 103, 118, 119, 123, 127, 129, 133, 150, 172, 185, 190, 198, 201, 219, 222, 224, 231, 234, 237, 240, 244, 263, 271, 273, 285, 287, 307, 312, 319, 320, 352, 353, 354, 375, 378, 379, 381, 383, 385, 387, 389, 393, 395, 396, 398, 399, 404, 407, 408, 409, 410, 412, 413, 415, 416, 417, 419, 425, 436, 437, 438, 443, 445, 449, 451, 456, 461, 463, 466, 468, 481, 482, 483, 495, 507, 520, 523, 534, 540, 548, 549, 550, 552, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 571, 578, 579, 580, 609, 610, 618, 626, 631, 632, 633, 642, 657, 658, 665, 666, 667, 670, 673, 674, 675, 676, 677, 685, 688, 690, 691, 692, 694, 698, 722, 727, 728, 740, 745, 747, 750, 761, 782, 785, 797, 800, 801, 804, 806, 811, 823, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 850, 851, 852, 857, 860, 861, 862, 864, 874, 875, 876, 880, 888, 892, 893, 895, 896, 900, 901, 902, 905, 908, 909, 910, 911, 945, 948, 954, 974, 977, 982, 983, 984, 985, 988, 989, 990, 991, 992, 994, 995, 998, 1002, 1003, 1004, 1009, 1015, 1022, 1024, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "geograph": [4, 11, 298, 376, 497], "repartit": 4, "immobil": 4, "quantit": [4, 5, 6, 13, 26, 62, 126, 136, 150, 258, 276, 378, 1020], "predictionerrordisplai": [4, 13, 76, 133, 171, 258, 322, 988, 1046], "nrow": [4, 5, 31, 33, 35, 58, 67, 74, 96, 162, 172, 201, 203, 209, 219, 222, 223, 226, 240, 264, 265, 285, 309, 311, 312, 322, 327, 346, 347, 1020], "ncol": [4, 5, 13, 31, 33, 35, 54, 58, 67, 96, 101, 107, 172, 201, 202, 203, 209, 219, 222, 223, 233, 240, 258, 264, 265, 273, 285, 288, 302, 308, 309, 311, 312, 322, 346, 347, 353], "sharex": [4, 7, 15, 35, 74, 93, 101, 134, 162, 172, 203, 264, 290, 329, 1020], "sharei": [4, 13, 35, 76, 93, 101, 107, 134, 162, 172, 201, 203, 209, 264, 273, 290, 308, 313, 346, 347, 353], "npolynomi": 4, "ntree": 4, "plot_kind": 4, "actual_vs_predict": [4, 76, 133, 171, 258, 322, 700], "residual_vs_predict": [4, 13, 76, 258, 322, 700], "axis_idx": 4, "kind": [4, 9, 12, 13, 25, 26, 76, 105, 119, 133, 145, 171, 172, 252, 256, 258, 271, 314, 319, 322, 336, 339, 352, 368, 369, 374, 376, 381, 383, 387, 393, 394, 406, 408, 411, 412, 413, 415, 416, 417, 487, 488, 502, 507, 508, 520, 523, 587, 631, 632, 700, 929, 984, 990, 995, 1004, 1034, 1043, 1045, 1046, 1047], "enumer": [4, 8, 10, 11, 12, 14, 15, 18, 20, 26, 28, 31, 32, 38, 40, 41, 42, 43, 44, 45, 46, 51, 56, 60, 61, 62, 63, 71, 80, 82, 83, 87, 97, 99, 106, 116, 119, 124, 125, 127, 128, 139, 155, 157, 162, 174, 181, 183, 192, 201, 223, 224, 227, 230, 235, 239, 240, 247, 248, 249, 250, 252, 253, 257, 264, 265, 271, 272, 290, 294, 295, 297, 304, 309, 310, 326, 327, 329, 331, 337, 339, 346, 347, 352, 358, 376, 558, 559, 563, 564, 779, 798, 799, 802, 804, 805, 806, 807, 810, 812, 813, 814, 815, 816, 817, 818], "pred": [4, 7, 11, 13, 33, 348, 352, 376, 647, 668, 679, 696, 701, 705, 717, 727, 728, 736, 781, 782, 785, 786, 988], "zip": [4, 5, 8, 9, 12, 13, 25, 27, 32, 33, 35, 38, 39, 41, 43, 46, 50, 56, 64, 65, 66, 76, 87, 93, 96, 97, 100, 105, 106, 107, 115, 117, 133, 134, 159, 165, 168, 171, 172, 173, 186, 192, 193, 201, 209, 210, 222, 234, 240, 248, 252, 253, 260, 264, 265, 266, 269, 271, 285, 288, 290, 293, 301, 302, 303, 309, 311, 312, 313, 330, 336, 347, 348, 358, 379, 415, 824, 998, 1024, 1027], "disp": [4, 31, 33, 115, 129, 130, 256, 265, 277, 288, 312, 318, 336, 341, 437, 630, 696, 699, 700, 849], "from_predict": [4, 13, 33, 76, 133, 171, 240, 258, 269, 271, 320, 326, 352, 388, 437, 630, 697, 717, 725, 780, 782, 785, 786, 787, 988, 1028, 1044, 1045, 1046, 1047], "y_true": [4, 13, 20, 33, 60, 76, 113, 133, 156, 201, 211, 219, 240, 250, 329, 381, 431, 437, 438, 464, 481, 482, 483, 551, 553, 555, 556, 557, 559, 561, 563, 564, 567, 569, 610, 634, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 669, 671, 672, 677, 678, 696, 697, 699, 700, 701, 702, 706, 707, 708, 711, 712, 717, 719, 720, 721, 722, 724, 725, 726, 727, 728, 732, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 780, 781, 782, 783, 785, 786, 787, 788, 789, 792, 794, 833, 834, 843, 851, 858, 901, 903, 906, 909, 911, 988, 1032, 1037, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1048], "y_pred": [4, 6, 7, 13, 26, 31, 33, 35, 45, 58, 63, 71, 76, 113, 126, 127, 133, 147, 171, 201, 203, 208, 211, 216, 218, 219, 230, 231, 240, 258, 260, 265, 292, 296, 304, 312, 329, 330, 363, 381, 388, 395, 415, 431, 438, 464, 481, 482, 483, 548, 551, 553, 555, 556, 557, 559, 561, 563, 564, 566, 567, 569, 610, 630, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 677, 678, 679, 696, 697, 699, 700, 701, 702, 707, 711, 712, 717, 720, 721, 722, 726, 727, 728, 732, 736, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 781, 782, 783, 785, 786, 788, 789, 794, 797, 800, 801, 811, 821, 831, 833, 834, 843, 851, 858, 860, 900, 901, 902, 903, 904, 905, 906, 909, 911, 988, 990, 1020, 1037, 1038, 1040, 1042, 1046, 1047, 1048], "scatter_kwarg": [4, 13, 76, 133, 171, 700], "set_xtick": [4, 8, 10, 17, 32, 44, 61, 65, 107, 131, 135, 172, 174, 192, 217, 235, 247, 273, 274, 283, 301, 303, 309, 310, 336], "num": [4, 12, 72, 150, 153, 158, 159, 160, 172, 173, 203, 269, 270, 321, 323, 631], "set_ytick": [4, 17, 32, 44, 61, 65, 107, 131, 165, 166, 174, 192, 217, 247, 273, 301, 303, 309, 310, 336, 354], "loc": [4, 7, 8, 9, 25, 27, 34, 41, 73, 76, 80, 81, 82, 86, 91, 98, 100, 104, 105, 106, 113, 115, 116, 117, 124, 125, 126, 127, 128, 130, 133, 135, 136, 140, 146, 153, 154, 160, 162, 171, 172, 183, 186, 191, 195, 201, 202, 203, 204, 207, 208, 211, 214, 215, 218, 219, 225, 233, 234, 235, 236, 238, 240, 249, 250, 257, 260, 261, 262, 265, 266, 269, 272, 275, 276, 288, 290, 291, 302, 308, 311, 312, 318, 321, 328, 338, 341, 343, 346, 347, 352, 358, 360, 811, 877, 889], "upper": [4, 7, 9, 25, 73, 76, 80, 81, 82, 115, 116, 117, 125, 126, 127, 128, 133, 135, 146, 157, 159, 162, 171, 195, 201, 207, 208, 211, 215, 218, 219, 234, 238, 239, 261, 262, 263, 290, 291, 302, 312, 329, 338, 341, 343, 346, 408, 414, 462, 587, 588, 590, 594, 612, 613, 614, 616, 618, 619, 621, 622, 624, 631, 632, 634, 636, 649, 653, 676, 733, 873, 874, 902, 903, 904, 924, 987, 988, 991, 998, 1002, 1003, 1004, 1039], "bbox_to_anchor": [4, 38, 162, 267, 346], "set_aspect": [4, 156, 212, 249, 348], "equal": [4, 11, 12, 27, 35, 38, 40, 54, 61, 81, 87, 113, 126, 156, 171, 202, 203, 212, 218, 241, 249, 252, 256, 260, 262, 271, 295, 309, 313, 339, 341, 348, 353, 376, 377, 381, 383, 395, 405, 406, 408, 412, 413, 415, 416, 421, 436, 439, 440, 441, 442, 444, 446, 448, 453, 458, 459, 462, 468, 473, 478, 479, 502, 511, 514, 518, 531, 532, 533, 538, 540, 542, 543, 548, 549, 550, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 587, 592, 593, 596, 598, 599, 606, 607, 624, 627, 628, 631, 632, 633, 634, 636, 640, 641, 644, 648, 657, 658, 670, 698, 702, 717, 719, 727, 766, 781, 785, 786, 792, 794, 797, 798, 800, 801, 810, 811, 815, 821, 828, 832, 833, 840, 841, 842, 843, 848, 849, 850, 851, 852, 857, 858, 863, 864, 865, 872, 875, 878, 879, 880, 881, 883, 890, 897, 900, 901, 907, 908, 909, 910, 911, 926, 937, 963, 969, 982, 984, 988, 989, 991, 992, 994, 998, 1002, 1003, 1004, 1023, 1024, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "adjust": [4, 9, 37, 39, 50, 59, 69, 79, 113, 126, 145, 168, 205, 230, 235, 243, 263, 280, 317, 330, 347, 353, 388, 408, 409, 413, 415, 416, 523, 552, 553, 556, 558, 560, 561, 563, 657, 658, 665, 667, 673, 674, 675, 703, 704, 707, 713, 714, 753, 755, 784, 793, 835, 836, 838, 839, 870, 892, 893, 900, 901, 902, 905, 908, 910, 926, 987, 988, 992, 998, 1010, 1022, 1028, 1031, 1037, 1047], "box": [4, 10, 31, 56, 172, 173, 223, 280, 307, 311, 388, 413, 415, 511, 554, 555, 876, 888, 912, 914, 988, 989, 995, 998, 1004, 1008, 1015, 1039, 1047], "show": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 142, 145, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 161, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 326, 327, 328, 329, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 357, 358, 359, 360, 361, 368, 369, 381, 387, 393, 394, 398, 399, 405, 406, 410, 412, 413, 414, 415, 417, 418, 437, 501, 558, 592, 593, 630, 631, 696, 697, 699, 700, 701, 712, 803, 819, 842, 860, 912, 913, 914, 977, 980, 982, 983, 985, 987, 988, 990, 991, 992, 994, 995, 998, 1002, 1003, 1009, 1019, 1020, 1024, 1033, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1045, 1047], "seem": [4, 9, 13, 47, 56, 126, 172, 201, 226, 230, 263, 280, 302, 311, 347, 352, 353, 380, 381, 386, 412, 500, 984, 988], "regim": [4, 395, 900, 901, 987], "overal": [4, 44, 49, 113, 116, 119, 133, 158, 219, 259, 285, 312, 313, 353, 367, 380, 381, 387, 405, 406, 415, 446, 448, 463, 470, 471, 477, 548, 881, 985, 988, 1004, 1013, 1041], "closer": [4, 28, 38, 99, 101, 132, 150, 153, 172, 180, 205, 343, 354, 406, 408, 413, 448, 552, 627, 711, 842, 843, 848, 850, 851, 852, 1003, 1038], "diagon": [4, 26, 41, 83, 86, 219, 240, 249, 252, 253, 256, 339, 405, 408, 410, 418, 452, 470, 471, 477, 480, 510, 512, 526, 531, 549, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 649, 650, 653, 654, 655, 681, 682, 700, 714, 790, 795, 796, 844, 852, 980, 982, 984, 987, 988, 991, 998, 1037, 1039, 1040, 1041], "obtain": [4, 7, 9, 12, 13, 21, 28, 49, 56, 58, 59, 72, 75, 76, 101, 104, 113, 123, 126, 127, 131, 139, 150, 155, 157, 171, 172, 185, 201, 203, 205, 215, 226, 240, 247, 248, 249, 258, 262, 263, 264, 268, 271, 288, 312, 320, 337, 343, 353, 354, 361, 363, 376, 378, 383, 393, 395, 402, 406, 408, 410, 411, 413, 415, 416, 417, 418, 436, 441, 468, 495, 531, 532, 554, 555, 556, 557, 558, 559, 562, 563, 564, 592, 605, 613, 644, 658, 660, 665, 667, 671, 673, 675, 676, 686, 707, 711, 724, 737, 754, 791, 803, 819, 825, 828, 829, 832, 846, 857, 877, 889, 902, 905, 908, 909, 937, 978, 980, 982, 984, 985, 987, 988, 989, 991, 992, 994, 995, 998, 1002, 1003, 1037, 1039, 1042, 1044, 1045, 1046, 1047, 1048], "slightli": [4, 26, 65, 83, 116, 119, 123, 126, 129, 133, 150, 153, 154, 155, 173, 180, 201, 219, 225, 227, 237, 240, 270, 285, 317, 336, 354, 380, 381, 393, 406, 408, 415, 416, 418, 420, 445, 587, 588, 590, 637, 657, 800, 801, 900, 902, 905, 936, 937, 977, 984, 998, 1002, 1003, 1040, 1044, 1045, 1047], "cost": [4, 40, 99, 119, 153, 168, 177, 222, 235, 264, 271, 317, 339, 353, 354, 356, 361, 362, 381, 387, 389, 393, 408, 415, 477, 499, 536, 537, 538, 545, 556, 557, 558, 559, 563, 564, 601, 609, 618, 626, 645, 646, 651, 652, 659, 660, 661, 662, 667, 671, 673, 675, 677, 686, 687, 691, 826, 900, 901, 902, 905, 908, 909, 910, 911, 937, 980, 984, 985, 988, 991, 1001, 1002, 1003, 1010, 1011, 1026, 1037, 1040, 1041], "durat": [4, 8, 201, 219, 240, 287, 354, 368, 954, 955, 984], "regressor": [4, 76, 87, 127, 132, 133, 136, 153, 158, 165, 166, 168, 171, 179, 181, 183, 185, 201, 202, 204, 207, 218, 219, 220, 237, 265, 276, 290, 312, 318, 319, 367, 381, 383, 393, 395, 406, 409, 418, 431, 435, 464, 481, 482, 483, 484, 523, 550, 551, 552, 553, 554, 555, 556, 557, 559, 561, 564, 565, 566, 567, 568, 569, 604, 605, 608, 610, 631, 632, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 668, 669, 671, 672, 677, 678, 700, 828, 829, 832, 833, 834, 843, 851, 856, 857, 858, 861, 867, 875, 880, 881, 901, 903, 906, 908, 909, 910, 911, 914, 929, 931, 977, 978, 984, 988, 989, 991, 996, 1002, 1008, 1010, 1011, 1019, 1026, 1031, 1032, 1036, 1037, 1038, 1040, 1041, 1044, 1045, 1046, 1048], "mlpregressor": [4, 172, 241, 369, 856, 857, 992, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "hidden": [4, 172, 303, 304, 381, 389, 405, 413, 856, 857, 858, 992, 993, 1008, 1031, 1042], "layer": [4, 32, 122, 131, 142, 155, 157, 168, 208, 217, 241, 300, 303, 304, 305, 309, 310, 331, 344, 348, 349, 367, 389, 415, 513, 514, 521, 566, 826, 856, 857, 858, 861, 880, 993, 1010, 1011, 1026, 1037], "cyclic": [4, 645, 646, 651, 652, 659, 660, 661, 662, 1043], "within": [4, 21, 61, 118, 120, 121, 132, 147, 149, 150, 197, 202, 203, 213, 219, 241, 260, 261, 265, 275, 307, 308, 319, 337, 340, 343, 347, 354, 363, 367, 376, 381, 385, 390, 393, 395, 396, 405, 406, 407, 408, 409, 412, 414, 415, 419, 443, 447, 460, 462, 463, 465, 468, 473, 514, 548, 566, 567, 568, 569, 592, 593, 631, 691, 695, 698, 709, 723, 779, 795, 796, 802, 803, 815, 816, 824, 825, 840, 841, 842, 843, 848, 850, 851, 852, 859, 860, 861, 873, 881, 885, 886, 888, 889, 890, 891, 902, 903, 904, 905, 906, 908, 909, 910, 911, 977, 982, 984, 985, 991, 994, 998, 1001, 1003, 1004, 1009, 1013, 1015, 1019, 1022, 1024, 1033, 1034, 1038, 1039, 1044, 1045, 1047], "finer": [4, 13, 38, 287, 339, 368, 408, 412, 977, 991, 1041], "resolut": [4, 11, 18, 106, 172, 297, 298, 339, 396, 406, 1015, 1041], "taken": [4, 7, 32, 43, 54, 56, 128, 150, 158, 171, 234, 235, 250, 268, 280, 309, 376, 378, 380, 381, 385, 395, 402, 407, 408, 412, 416, 420, 439, 532, 560, 561, 582, 583, 645, 646, 649, 651, 652, 653, 657, 658, 659, 660, 661, 662, 676, 678, 680, 683, 694, 873, 874, 894, 897, 903, 904, 947, 988, 990, 998, 1000, 1037, 1040, 1043, 1044], "everi": [4, 96, 165, 199, 202, 223, 236, 248, 253, 271, 320, 363, 376, 379, 381, 383, 385, 389, 395, 408, 410, 412, 413, 416, 439, 453, 507, 530, 535, 538, 544, 556, 558, 559, 560, 561, 563, 589, 590, 602, 645, 646, 648, 651, 652, 658, 659, 660, 661, 662, 663, 664, 665, 667, 671, 672, 673, 674, 675, 684, 685, 686, 691, 695, 752, 769, 777, 778, 810, 849, 908, 910, 912, 914, 926, 981, 983, 988, 989, 990, 998, 1004, 1013, 1019, 1031, 1035, 1037, 1040, 1044, 1048], "offer": [4, 119, 383, 389, 393, 394, 398, 412, 413, 415, 416, 977, 978, 989, 992, 1004, 1008, 1009, 1013, 1037], "view": [4, 17, 43, 47, 79, 98, 172, 198, 242, 367, 369, 381, 408, 416, 535, 644, 656, 840, 841, 915, 984, 985], "gaussian": [4, 5, 7, 9, 17, 27, 28, 31, 32, 35, 45, 47, 48, 56, 58, 62, 66, 79, 80, 81, 82, 83, 92, 93, 97, 98, 99, 106, 114, 115, 122, 126, 129, 131, 142, 163, 166, 180, 183, 185, 189, 191, 211, 212, 213, 214, 230, 234, 236, 249, 250, 254, 273, 290, 295, 298, 301, 310, 311, 314, 329, 331, 336, 343, 344, 345, 370, 373, 377, 383, 386, 395, 408, 410, 413, 414, 420, 451, 468, 469, 470, 471, 472, 473, 474, 475, 495, 503, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 523, 524, 529, 531, 543, 548, 549, 562, 609, 610, 612, 613, 614, 616, 617, 618, 621, 622, 624, 626, 642, 643, 671, 676, 679, 702, 722, 739, 750, 774, 795, 796, 797, 811, 835, 836, 837, 838, 839, 840, 841, 845, 876, 880, 888, 892, 893, 894, 982, 984, 985, 986, 994, 1010, 1011, 1013, 1023, 1025, 1026, 1031, 1032, 1034, 1035, 1037, 1038, 1039, 1041, 1043, 1045], "random": [4, 5, 6, 7, 11, 12, 13, 14, 21, 22, 25, 26, 27, 28, 32, 34, 35, 38, 40, 41, 45, 46, 49, 51, 53, 55, 56, 58, 59, 61, 62, 63, 65, 66, 67, 72, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 93, 97, 98, 99, 102, 103, 104, 112, 113, 114, 116, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 133, 136, 137, 142, 145, 146, 149, 153, 154, 157, 159, 160, 162, 165, 166, 168, 169, 170, 175, 177, 180, 181, 182, 183, 185, 190, 191, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 210, 214, 215, 218, 219, 222, 223, 225, 226, 227, 229, 230, 235, 236, 237, 239, 240, 245, 247, 248, 250, 251, 252, 253, 255, 257, 259, 260, 261, 262, 263, 265, 267, 269, 271, 272, 273, 274, 276, 278, 283, 285, 290, 291, 292, 297, 301, 308, 310, 311, 314, 318, 319, 321, 323, 326, 327, 330, 331, 338, 339, 341, 342, 344, 345, 346, 349, 352, 353, 359, 360, 367, 368, 370, 373, 377, 384, 386, 393, 394, 395, 399, 403, 404, 406, 408, 416, 417, 433, 439, 442, 446, 448, 450, 451, 452, 453, 457, 458, 459, 461, 463, 468, 469, 470, 471, 472, 473, 474, 475, 487, 488, 489, 490, 491, 494, 495, 496, 501, 502, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 534, 535, 537, 538, 539, 540, 543, 546, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 572, 581, 582, 583, 588, 606, 607, 609, 610, 626, 629, 631, 633, 638, 639, 640, 641, 642, 645, 646, 648, 649, 651, 652, 653, 657, 659, 660, 661, 662, 669, 670, 671, 675, 676, 677, 678, 688, 689, 690, 691, 692, 693, 694, 700, 703, 704, 707, 729, 741, 779, 791, 795, 796, 797, 799, 800, 801, 802, 809, 811, 812, 813, 814, 815, 816, 817, 818, 825, 826, 831, 833, 834, 835, 836, 837, 839, 840, 841, 845, 849, 856, 857, 858, 860, 863, 865, 874, 877, 881, 889, 892, 893, 894, 895, 896, 897, 900, 901, 902, 903, 905, 906, 908, 909, 910, 911, 923, 936, 937, 959, 962, 978, 980, 983, 985, 987, 988, 992, 993, 994, 996, 998, 1003, 1004, 1008, 1009, 1010, 1011, 1015, 1019, 1020, 1022, 1023, 1026, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "constant": [4, 106, 116, 156, 160, 166, 171, 189, 202, 203, 205, 219, 232, 237, 242, 265, 297, 302, 304, 308, 310, 318, 347, 349, 363, 373, 383, 390, 395, 405, 415, 418, 431, 445, 464, 481, 482, 483, 510, 512, 533, 537, 539, 546, 548, 549, 550, 551, 553, 555, 557, 559, 561, 564, 567, 569, 589, 605, 608, 610, 612, 626, 629, 631, 632, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 675, 676, 677, 678, 679, 686, 688, 692, 694, 720, 721, 722, 726, 773, 775, 783, 833, 834, 843, 851, 857, 858, 865, 876, 879, 888, 900, 901, 902, 903, 904, 905, 906, 907, 909, 911, 980, 982, 984, 985, 988, 990, 991, 998, 1002, 1004, 1026, 1034, 1039, 1041, 1043, 1044, 1045, 1047], "varianc": [4, 5, 13, 28, 45, 56, 58, 63, 74, 79, 81, 86, 87, 91, 96, 97, 98, 101, 104, 105, 107, 112, 128, 137, 160, 162, 168, 171, 179, 181, 183, 185, 190, 191, 197, 201, 203, 206, 219, 220, 252, 259, 262, 265, 271, 272, 275, 294, 301, 307, 312, 353, 363, 373, 377, 390, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 420, 440, 444, 448, 462, 520, 523, 531, 532, 533, 540, 543, 548, 549, 554, 555, 557, 558, 559, 564, 602, 606, 607, 610, 624, 642, 643, 644, 651, 655, 656, 659, 661, 671, 672, 673, 674, 675, 686, 709, 726, 783, 795, 796, 838, 849, 864, 870, 876, 878, 880, 886, 888, 890, 891, 909, 911, 963, 964, 965, 969, 982, 983, 984, 986, 991, 992, 993, 1000, 1002, 1003, 1004, 1005, 1010, 1011, 1020, 1022, 1023, 1026, 1031, 1039, 1041, 1042, 1043, 1044, 1045, 1046], "poisson": [4, 13, 168, 179, 220, 238, 377, 415, 463, 464, 495, 522, 551, 557, 561, 564, 647, 668, 671, 679, 705, 722, 743, 747, 748, 750, 826, 860, 861, 864, 865, 873, 874, 875, 880, 909, 911, 941, 984, 1004, 1010, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "gamma": [4, 5, 6, 7, 9, 11, 17, 32, 33, 101, 134, 142, 177, 215, 230, 235, 236, 260, 262, 264, 267, 273, 277, 319, 326, 327, 329, 331, 336, 338, 339, 342, 343, 345, 346, 349, 411, 413, 418, 451, 534, 561, 618, 619, 638, 639, 640, 642, 643, 644, 647, 679, 684, 690, 722, 745, 750, 757, 764, 773, 774, 775, 795, 808, 811, 895, 896, 897, 902, 903, 904, 905, 906, 977, 980, 983, 984, 986, 1001, 1003, 1015, 1019, 1020, 1022, 1031, 1032, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1045, 1046, 1047], "achiev": [4, 12, 18, 20, 28, 32, 99, 113, 122, 124, 131, 161, 177, 201, 209, 259, 262, 269, 312, 329, 339, 342, 343, 347, 352, 363, 367, 369, 375, 376, 378, 383, 387, 393, 395, 405, 406, 408, 412, 413, 415, 416, 552, 557, 564, 639, 648, 675, 677, 706, 727, 728, 736, 738, 761, 781, 782, 785, 800, 801, 836, 880, 977, 978, 980, 984, 988, 998, 1001, 1003, 1012, 1024, 1044], "gridsearchcv": [4, 55, 70, 72, 74, 75, 77, 79, 100, 104, 119, 168, 236, 242, 252, 255, 260, 261, 262, 263, 267, 270, 273, 278, 280, 287, 289, 304, 309, 319, 323, 339, 343, 363, 368, 383, 393, 395, 399, 409, 412, 418, 501, 519, 539, 540, 574, 598, 606, 652, 702, 740, 808, 811, 860, 870, 900, 908, 956, 977, 984, 988, 992, 1002, 1003, 1008, 1009, 1010, 1019, 1020, 1024, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048], "tweedieregressor": [4, 318, 321, 647, 668, 984, 1042, 1045, 1046], "power": [4, 7, 18, 119, 124, 170, 202, 219, 253, 265, 270, 289, 307, 308, 311, 326, 336, 367, 368, 394, 406, 408, 411, 414, 415, 416, 419, 443, 481, 482, 483, 531, 534, 540, 543, 629, 679, 693, 722, 745, 747, 750, 842, 843, 850, 851, 853, 854, 875, 876, 877, 888, 889, 936, 937, 984, 985, 988, 996, 998, 1002, 1003, 1013, 1034, 1037, 1039, 1041, 1042, 1044, 1048], "param_grid": [4, 6, 72, 73, 74, 75, 119, 126, 236, 242, 252, 260, 261, 262, 266, 267, 270, 273, 280, 287, 309, 339, 395, 399, 409, 415, 740, 797, 800, 808, 809, 956, 977, 988, 1019, 1020], "total": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 283, 284, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 358, 359, 360, 361, 362, 368, 375, 376, 378, 387, 395, 405, 408, 414, 416, 419, 431, 443, 464, 481, 482, 483, 487, 488, 489, 490, 491, 492, 493, 494, 496, 499, 500, 501, 503, 504, 509, 511, 513, 514, 518, 521, 522, 535, 543, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 567, 569, 582, 583, 589, 593, 595, 610, 634, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 675, 676, 677, 678, 696, 703, 704, 712, 727, 728, 729, 732, 736, 737, 755, 767, 781, 782, 785, 792, 793, 794, 797, 811, 821, 822, 823, 833, 834, 835, 836, 843, 845, 851, 858, 875, 879, 901, 903, 906, 908, 909, 910, 911, 937, 977, 984, 985, 988, 989, 990, 991, 998, 1002, 1003, 1004, 1010, 1020, 1024, 1032, 1037, 1039, 1047], "script": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 363, 368, 381, 382, 383, 384, 385, 387, 393, 395, 398, 416, 1009, 1012, 1024], "937": [4, 16, 1010], "second": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 363, 367, 376, 383, 385, 387, 395, 405, 408, 412, 413, 415, 416, 418, 463, 466, 487, 489, 490, 491, 493, 495, 499, 501, 503, 509, 552, 582, 587, 588, 589, 590, 620, 623, 630, 631, 698, 711, 715, 756, 757, 761, 762, 764, 765, 772, 773, 774, 775, 776, 779, 797, 800, 801, 811, 824, 830, 831, 834, 837, 848, 850, 851, 852, 857, 858, 977, 978, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 998, 999, 1004, 1015, 1021, 1023, 1046], "jupyt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 382, 383, 409, 467, 898, 1004, 1008, 1009, 1042, 1045], "plot_cyclical_feature_engin": [4, 16, 1010], "ipynb": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361], "py": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 170, 171, 172, 173, 174, 175, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 368, 379, 381, 382, 385, 387, 389, 395, 398, 416, 419, 439, 443, 453, 460, 497, 529, 643, 645, 646, 651, 652, 659, 660, 661, 662, 680, 683, 875, 879, 932, 988, 1008, 1010, 1022, 1024, 1031, 1033, 1037, 1041, 1045], "interpol": [4, 14, 33, 41, 51, 52, 55, 59, 83, 90, 96, 99, 145, 157, 160, 168, 179, 180, 192, 217, 220, 233, 239, 271, 276, 289, 290, 297, 304, 327, 339, 345, 418, 634, 644, 652, 662, 671, 683, 699, 706, 843, 851, 861, 875, 879, 979, 984, 988, 998, 1010, 1038, 1043], "partial": [4, 8, 12, 51, 85, 86, 88, 98, 130, 168, 169, 175, 219, 229, 245, 319, 322, 378, 395, 397, 410, 411, 413, 415, 418, 463, 481, 482, 483, 484, 495, 500, 533, 535, 540, 561, 588, 631, 632, 656, 786, 826, 828, 829, 856, 857, 858, 861, 873, 874, 877, 880, 909, 985, 992, 1002, 1010, 1024, 1026, 1028, 1032, 1039, 1040, 1044], "individu": [4, 47, 61, 81, 112, 116, 126, 130, 132, 133, 137, 145, 162, 168, 169, 174, 175, 197, 201, 219, 231, 240, 241, 265, 267, 283, 317, 343, 347, 368, 382, 385, 388, 390, 395, 397, 405, 409, 412, 415, 416, 436, 451, 461, 463, 495, 500, 502, 508, 554, 555, 558, 559, 561, 562, 564, 566, 567, 568, 569, 602, 608, 609, 631, 632, 642, 644, 656, 657, 658, 667, 670, 671, 672, 673, 674, 675, 676, 677, 686, 711, 718, 726, 732, 748, 749, 783, 788, 789, 797, 811, 828, 832, 833, 835, 836, 837, 838, 839, 858, 861, 869, 870, 872, 873, 874, 877, 879, 880, 885, 886, 887, 900, 901, 988, 989, 998, 1003, 1010, 1019, 1024, 1026, 1032, 1035, 1037, 1043, 1045, 1047], "common": [4, 13, 15, 18, 20, 99, 147, 150, 168, 169, 170, 175, 197, 205, 206, 257, 262, 269, 280, 319, 343, 352, 354, 361, 367, 370, 375, 381, 383, 389, 391, 393, 394, 397, 399, 405, 406, 407, 408, 409, 412, 414, 417, 418, 464, 466, 495, 589, 631, 652, 671, 672, 700, 744, 751, 767, 798, 799, 802, 812, 814, 815, 816, 817, 818, 823, 826, 861, 863, 871, 872, 873, 878, 880, 885, 886, 888, 889, 890, 891, 939, 977, 978, 984, 991, 994, 998, 1003, 1004, 1008, 1009, 1010, 1013, 1015, 1026, 1031, 1039, 1041, 1042, 1046], "pitfal": [4, 150, 168, 169, 170, 173, 175, 197, 205, 206, 262, 319, 370, 394, 395, 397, 412, 464, 466, 495, 652, 671, 672, 700, 751, 812, 823, 826, 861, 873, 880, 984, 1010, 1026], "coeffici": [4, 7, 10, 39, 50, 59, 61, 79, 80, 83, 96, 99, 139, 147, 153, 168, 169, 170, 175, 179, 183, 185, 186, 187, 188, 192, 194, 195, 196, 197, 198, 199, 203, 204, 216, 219, 220, 244, 262, 275, 303, 314, 319, 320, 321, 343, 347, 352, 353, 354, 367, 377, 381, 383, 395, 397, 407, 410, 411, 413, 417, 418, 421, 431, 451, 464, 466, 472, 474, 475, 477, 478, 479, 480, 481, 482, 483, 495, 523, 525, 526, 530, 534, 536, 538, 541, 542, 547, 551, 553, 555, 557, 559, 561, 564, 567, 569, 581, 588, 592, 596, 608, 610, 613, 626, 634, 635, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 700, 702, 715, 718, 727, 732, 736, 741, 748, 751, 773, 775, 783, 784, 790, 791, 794, 812, 823, 826, 833, 834, 843, 851, 858, 861, 873, 880, 900, 901, 902, 903, 904, 905, 906, 909, 911, 979, 982, 984, 1002, 1003, 1010, 1022, 1031, 1035, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1048], "galleri": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 376, 381, 383, 395, 398, 401, 1010, 1020, 1031, 1035, 1038], "sphinx": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 381, 385, 395, 398, 401, 1024, 1031, 1038], "kernelpca": [5, 409, 413, 532, 533, 540, 543, 687, 689, 691, 866, 998, 1032, 1033, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1047], "short": [5, 91, 123, 129, 192, 260, 303, 352, 381, 389, 412, 416, 420, 984, 985, 991, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "take": [5, 8, 13, 21, 31, 47, 54, 56, 58, 67, 76, 81, 93, 96, 113, 122, 153, 155, 158, 162, 171, 177, 184, 205, 209, 210, 226, 237, 249, 250, 257, 263, 267, 271, 272, 283, 285, 288, 291, 292, 293, 295, 296, 307, 321, 329, 335, 336, 339, 349, 353, 354, 358, 367, 368, 369, 375, 376, 381, 383, 386, 387, 388, 389, 393, 395, 396, 406, 408, 409, 411, 412, 413, 415, 416, 417, 418, 420, 436, 442, 445, 446, 448, 449, 451, 456, 457, 458, 460, 462, 468, 518, 532, 537, 538, 539, 545, 546, 580, 591, 594, 595, 597, 598, 599, 609, 610, 615, 619, 620, 623, 631, 642, 648, 670, 672, 673, 674, 675, 678, 690, 691, 698, 704, 706, 708, 718, 727, 728, 736, 740, 741, 754, 769, 772, 776, 777, 778, 779, 781, 782, 785, 786, 797, 798, 802, 803, 811, 815, 824, 842, 843, 844, 846, 848, 849, 850, 851, 852, 864, 874, 895, 896, 900, 901, 902, 903, 904, 905, 906, 924, 958, 977, 980, 984, 985, 987, 988, 989, 991, 993, 994, 995, 998, 1003, 1004, 1013, 1015, 1019, 1021, 1028, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "exact": [5, 7, 83, 101, 119, 158, 205, 235, 285, 363, 367, 368, 375, 381, 383, 390, 393, 394, 395, 408, 415, 417, 433, 481, 482, 483, 487, 495, 533, 534, 540, 560, 561, 637, 641, 645, 691, 797, 811, 821, 822, 823, 902, 905, 977, 980, 984, 985, 994, 998, 1002, 1003, 1038, 1039, 1041], "usp": 5, "digit": [5, 12, 13, 30, 36, 37, 39, 40, 42, 44, 46, 47, 49, 50, 52, 54, 57, 58, 60, 62, 63, 69, 73, 74, 86, 89, 94, 99, 118, 138, 139, 143, 148, 150, 168, 191, 192, 208, 216, 217, 221, 222, 224, 226, 228, 234, 235, 239, 250, 256, 260, 261, 264, 267, 276, 277, 285, 289, 294, 295, 300, 302, 303, 305, 323, 325, 328, 332, 342, 353, 374, 381, 387, 408, 414, 415, 417, 440, 444, 446, 501, 540, 543, 548, 565, 657, 687, 688, 689, 690, 691, 696, 703, 704, 712, 716, 717, 735, 791, 793, 822, 826, 842, 849, 856, 860, 861, 870, 880, 886, 893, 896, 905, 912, 913, 914, 977, 983, 985, 988, 991, 993, 1001, 1010, 1015, 1019, 1022, 1023, 1026, 1035], "reproduc": [5, 12, 61, 113, 171, 177, 189, 271, 280, 304, 368, 370, 380, 381, 383, 384, 389, 393, 395, 402, 408, 412, 413, 416, 420, 439, 453, 459, 468, 473, 487, 490, 491, 494, 496, 502, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 550, 552, 553, 554, 555, 558, 559, 560, 561, 562, 606, 607, 609, 610, 633, 638, 639, 640, 641, 645, 646, 649, 651, 652, 653, 659, 660, 661, 662, 665, 666, 667, 670, 675, 677, 678, 688, 689, 691, 692, 693, 791, 795, 796, 799, 800, 801, 802, 803, 809, 811, 812, 813, 814, 815, 816, 817, 824, 825, 826, 830, 831, 834, 845, 849, 856, 857, 858, 865, 877, 881, 889, 892, 893, 900, 901, 902, 905, 936, 937, 959, 962, 980, 1008, 1012, 1031, 1039, 1044, 1045], "sect": 5, "bak\u0131r": [5, 413, 534], "g\u00f6khan": [5, 413, 534], "h": [5, 6, 49, 59, 96, 97, 113, 114, 131, 150, 155, 171, 249, 290, 293, 301, 309, 321, 331, 335, 354, 378, 387, 406, 408, 410, 413, 414, 415, 416, 419, 443, 518, 531, 534, 537, 539, 546, 552, 566, 567, 581, 589, 606, 607, 688, 692, 703, 707, 755, 835, 839, 840, 841, 846, 856, 871, 880, 980, 982, 984, 985, 986, 988, 990, 992, 993, 1002, 1004, 1020, 1037, 1042, 1046, 1047, 1048], "jason": [5, 413, 534, 896, 1037, 1039, 1043, 1046], "weston": [5, 413, 534, 592, 593, 896], "bernhard": [5, 413, 534, 831, 866, 896, 989, 994, 1003, 1037], "sch\u00f6lkopf": [5, 413, 534, 866, 994, 998, 1003], "pre": [5, 72, 171, 190, 307, 354, 370, 379, 381, 395, 398, 410, 412, 413, 415, 416, 417, 419, 420, 442, 443, 446, 458, 532, 534, 689, 711, 761, 863, 905, 988, 993, 998, 1003, 1004, 1008, 1009, 1026, 1034, 1039, 1045], "advanc": [5, 130, 168, 172, 229, 231, 245, 262, 283, 369, 408, 413, 488, 500, 534, 631, 638, 781, 795, 849, 858, 861, 880, 909, 980, 988, 991, 998, 1010, 1013, 1028, 1033], "neural": [5, 6, 32, 262, 303, 370, 393, 395, 402, 412, 413, 415, 420, 532, 534, 537, 539, 546, 566, 567, 638, 644, 695, 739, 795, 849, 856, 857, 858, 866, 980, 984, 985, 986, 988, 991, 994, 998, 1002, 1004, 1008, 1011, 1013, 1020, 1025, 1026, 1031, 1043], "system": [5, 101, 185, 262, 269, 363, 367, 368, 369, 376, 378, 381, 382, 383, 384, 389, 393, 398, 408, 413, 415, 419, 443, 470, 471, 477, 534, 538, 542, 549, 638, 644, 649, 650, 653, 654, 655, 681, 682, 724, 754, 767, 795, 849, 895, 896, 956, 984, 988, 991, 1000, 1008, 1009, 1013, 1024, 1031, 1039, 1040], "2004": [5, 150, 262, 280, 376, 378, 408, 410, 413, 472, 534, 606, 607, 688, 692, 704, 741, 781, 896, 982, 984, 985, 990, 1003, 1022], "449": [5, 413, 534], "456": [5, 413, 534], "author": [5, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 21, 22, 25, 26, 27, 28, 31, 33, 38, 40, 41, 43, 47, 48, 49, 53, 54, 55, 57, 58, 62, 66, 67, 68, 71, 72, 73, 75, 76, 83, 96, 98, 100, 101, 102, 104, 107, 111, 114, 115, 116, 117, 118, 119, 124, 125, 127, 128, 132, 133, 150, 153, 154, 156, 157, 158, 159, 160, 162, 166, 177, 180, 181, 183, 185, 186, 188, 189, 190, 192, 193, 194, 195, 201, 202, 203, 205, 206, 208, 209, 216, 217, 218, 219, 222, 223, 224, 225, 227, 230, 233, 235, 236, 238, 240, 247, 249, 250, 261, 263, 265, 266, 268, 275, 283, 285, 287, 290, 297, 298, 301, 304, 307, 308, 310, 311, 312, 326, 327, 328, 329, 331, 347, 352, 353, 354, 375, 381, 385, 389, 393, 395, 396, 412, 450, 533, 867, 980, 1006, 1008, 1034], "fr": [5, 7, 8, 9, 10, 25, 26, 31, 38, 43, 55, 58, 76, 83, 119, 159, 180, 185, 186, 188, 192, 194, 195, 206, 223, 224, 230, 233, 240, 263, 265, 268, 275, 297, 312, 347, 352, 353, 354, 530, 536, 657, 663, 684, 685, 756, 757, 986, 988], "licenc": [5, 375], "bsd": [5, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 21, 22, 25, 26, 27, 28, 31, 32, 33, 38, 40, 41, 43, 46, 47, 48, 49, 52, 53, 54, 55, 58, 62, 66, 67, 68, 71, 72, 74, 75, 76, 83, 90, 91, 96, 98, 100, 101, 102, 103, 104, 107, 111, 113, 114, 115, 116, 117, 118, 119, 124, 125, 127, 128, 132, 133, 150, 153, 154, 156, 157, 158, 159, 160, 162, 166, 177, 183, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 206, 208, 209, 217, 218, 219, 223, 224, 225, 227, 230, 233, 235, 236, 238, 240, 247, 249, 263, 266, 268, 275, 283, 285, 287, 293, 294, 295, 297, 298, 301, 304, 307, 308, 309, 310, 311, 312, 326, 327, 328, 329, 331, 343, 344, 347, 348, 352, 353, 354, 387], "claus": [5, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 21, 22, 26, 28, 31, 32, 33, 38, 40, 41, 43, 46, 47, 48, 49, 52, 53, 54, 55, 58, 62, 66, 67, 68, 71, 72, 74, 75, 76, 83, 90, 91, 96, 98, 100, 101, 102, 103, 104, 107, 111, 113, 114, 115, 116, 117, 118, 119, 124, 125, 127, 128, 132, 133, 150, 153, 154, 156, 157, 158, 159, 160, 162, 166, 177, 183, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 206, 208, 209, 217, 218, 219, 223, 224, 230, 235, 236, 238, 240, 247, 249, 263, 268, 275, 283, 285, 287, 293, 294, 295, 297, 298, 301, 307, 308, 309, 310, 311, 312, 343, 344, 347, 348, 352, 353, 354], "normal": [5, 10, 12, 13, 15, 18, 20, 21, 27, 30, 35, 36, 38, 41, 45, 47, 58, 62, 63, 67, 74, 76, 79, 80, 81, 86, 87, 97, 102, 113, 114, 116, 119, 125, 126, 129, 130, 145, 156, 159, 160, 166, 168, 170, 171, 179, 180, 181, 182, 183, 185, 191, 194, 196, 199, 203, 204, 205, 207, 215, 219, 220, 225, 240, 247, 252, 253, 256, 259, 262, 268, 290, 291, 294, 306, 308, 312, 315, 318, 321, 329, 339, 353, 354, 363, 370, 373, 376, 377, 378, 381, 386, 390, 394, 395, 404, 405, 406, 408, 409, 411, 414, 415, 416, 420, 439, 448, 450, 451, 452, 461, 463, 464, 474, 481, 482, 483, 488, 495, 511, 514, 518, 525, 526, 532, 535, 540, 541, 543, 547, 548, 551, 552, 553, 556, 557, 558, 559, 561, 562, 563, 564, 565, 578, 579, 581, 587, 588, 589, 590, 610, 624, 626, 638, 649, 650, 653, 654, 655, 657, 658, 663, 664, 668, 671, 675, 679, 686, 690, 694, 696, 702, 703, 705, 717, 722, 724, 732, 734, 739, 743, 747, 748, 750, 753, 754, 755, 759, 768, 792, 793, 794, 800, 801, 826, 828, 837, 839, 845, 846, 849, 860, 861, 864, 865, 868, 870, 873, 874, 875, 876, 877, 878, 880, 885, 886, 888, 889, 890, 891, 895, 896, 908, 909, 910, 911, 936, 937, 941, 964, 965, 970, 971, 977, 980, 982, 984, 985, 986, 987, 990, 994, 999, 1001, 1003, 1004, 1010, 1020, 1022, 1023, 1024, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "pixel": [5, 6, 14, 21, 33, 48, 49, 54, 96, 112, 120, 137, 148, 168, 173, 174, 177, 234, 260, 303, 304, 378, 408, 413, 415, 416, 417, 492, 493, 494, 563, 584, 585, 606, 607, 633, 991, 993, 1004, 1010, 1020, 1023], "train_test_split": [5, 6, 7, 10, 13, 25, 26, 28, 32, 33, 72, 76, 87, 101, 113, 118, 120, 124, 125, 126, 127, 128, 129, 132, 146, 147, 170, 171, 173, 174, 177, 185, 196, 201, 208, 209, 216, 217, 219, 231, 240, 243, 244, 256, 259, 260, 265, 269, 271, 275, 283, 288, 293, 294, 301, 303, 304, 309, 311, 312, 314, 317, 318, 319, 330, 357, 361, 363, 386, 394, 404, 409, 412, 415, 436, 437, 557, 559, 566, 567, 696, 697, 699, 701, 797, 828, 831, 849, 857, 858, 860, 910, 911, 977, 978, 988, 990, 991, 996, 998, 1003, 1020, 1028, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1044, 1048], "data_id": [5, 123, 158, 171, 201, 219, 231, 280, 313, 375, 495], "41082": 5, "return_x_i": [5, 7, 15, 59, 71, 72, 73, 74, 96, 119, 123, 124, 136, 139, 140, 141, 146, 165, 166, 173, 174, 177, 186, 188, 189, 190, 192, 197, 198, 208, 216, 217, 231, 239, 240, 243, 244, 258, 261, 264, 269, 270, 277, 280, 283, 287, 294, 302, 303, 304, 312, 317, 319, 321, 322, 323, 329, 342, 354, 357, 374, 386, 387, 394, 402, 408, 409, 412, 415, 417, 445, 487, 488, 489, 490, 491, 493, 494, 495, 496, 499, 500, 501, 503, 504, 509, 531, 532, 533, 534, 557, 560, 561, 566, 567, 591, 594, 595, 597, 598, 599, 601, 609, 618, 619, 621, 622, 637, 638, 657, 658, 667, 672, 673, 674, 687, 688, 689, 690, 700, 786, 800, 801, 803, 828, 833, 844, 849, 852, 909, 910, 911, 978, 983, 988, 989, 990, 991, 998, 1015, 1019, 1020, 1022, 1023, 1028, 1037, 1039, 1041, 1044], "idea": [5, 54, 81, 82, 119, 150, 158, 171, 202, 222, 290, 339, 357, 367, 368, 381, 386, 387, 410, 411, 412, 413, 414, 415, 417, 606, 607, 984, 985, 988, 991, 994, 1007, 1013, 1024], "noisi": [5, 34, 50, 56, 63, 97, 113, 146, 153, 159, 185, 200, 203, 225, 233, 253, 263, 269, 271, 272, 312, 359, 360, 363, 408, 416, 418, 419, 443, 445, 449, 520, 523, 937, 983, 985, 991, 1003, 1008], "nois": [5, 10, 14, 21, 22, 28, 32, 34, 41, 45, 50, 53, 55, 56, 62, 63, 68, 76, 87, 96, 97, 99, 101, 104, 114, 116, 126, 130, 131, 152, 153, 154, 158, 161, 162, 163, 168, 180, 182, 183, 185, 190, 191, 196, 199, 200, 203, 204, 205, 206, 218, 225, 227, 230, 232, 233, 236, 262, 270, 275, 276, 297, 301, 302, 309, 314, 318, 346, 359, 360, 363, 377, 383, 386, 406, 408, 413, 415, 417, 418, 419, 443, 445, 451, 510, 512, 513, 514, 515, 516, 517, 521, 523, 524, 529, 531, 533, 540, 606, 607, 610, 612, 613, 614, 615, 616, 620, 621, 623, 624, 643, 644, 648, 649, 650, 652, 653, 654, 655, 662, 663, 664, 670, 678, 691, 877, 889, 895, 981, 983, 984, 985, 988, 991, 1001, 1010, 1022, 1023, 1032, 1037, 1042, 1044, 1045], "approach": [5, 8, 59, 64, 67, 100, 150, 153, 165, 171, 174, 183, 189, 201, 203, 209, 219, 222, 280, 313, 343, 352, 353, 354, 369, 380, 381, 387, 390, 395, 398, 402, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 436, 442, 445, 447, 451, 461, 519, 531, 581, 588, 610, 634, 657, 658, 673, 674, 829, 845, 937, 977, 978, 984, 985, 988, 989, 991, 992, 998, 1002, 1003, 1007, 1008, 1013, 1017, 1022, 1023, 1035, 1047], "copi": [5, 12, 13, 18, 45, 63, 76, 99, 116, 150, 165, 166, 171, 172, 173, 187, 194, 207, 217, 219, 223, 285, 326, 327, 329, 331, 353, 358, 368, 378, 381, 383, 385, 386, 387, 393, 395, 433, 436, 439, 441, 442, 443, 445, 446, 448, 453, 458, 481, 482, 483, 484, 499, 501, 509, 531, 532, 533, 534, 540, 547, 552, 553, 558, 560, 561, 571, 589, 596, 606, 607, 609, 610, 627, 629, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 664, 670, 671, 673, 678, 680, 683, 684, 685, 730, 767, 790, 797, 811, 840, 841, 855, 863, 866, 869, 870, 871, 872, 876, 877, 878, 880, 883, 885, 886, 887, 888, 889, 890, 891, 895, 896, 900, 902, 903, 904, 905, 906, 915, 918, 920, 921, 947, 959, 961, 962, 998, 1003, 1004, 1009, 1016, 1019, 1024, 1031, 1034, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "add": [5, 12, 17, 18, 21, 26, 27, 28, 33, 34, 41, 45, 55, 76, 81, 82, 87, 97, 122, 125, 146, 150, 153, 158, 159, 160, 165, 166, 183, 190, 196, 202, 204, 205, 216, 225, 230, 234, 236, 237, 269, 271, 272, 285, 297, 309, 311, 317, 319, 320, 342, 343, 346, 347, 353, 367, 379, 380, 381, 382, 383, 385, 387, 389, 395, 398, 404, 406, 412, 415, 416, 417, 514, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 601, 626, 627, 629, 631, 657, 658, 693, 696, 818, 840, 841, 897, 927, 945, 946, 956, 977, 978, 987, 994, 998, 1001, 1002, 1009, 1022, 1023, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "corrupt": [5, 104, 185, 207, 218, 393, 856, 984, 996], "uncorrupt": 5, "base": [5, 12, 13, 14, 15, 18, 21, 26, 27, 28, 35, 50, 57, 58, 59, 68, 71, 72, 76, 81, 91, 96, 97, 111, 113, 114, 119, 125, 126, 127, 131, 133, 136, 144, 147, 151, 153, 158, 159, 161, 170, 172, 173, 174, 179, 180, 186, 187, 189, 190, 195, 196, 201, 202, 209, 218, 219, 220, 222, 230, 237, 238, 240, 259, 260, 265, 280, 283, 285, 298, 304, 307, 308, 310, 312, 319, 321, 331, 337, 343, 353, 357, 367, 368, 370, 375, 376, 377, 378, 379, 382, 383, 384, 389, 395, 396, 397, 406, 409, 413, 414, 416, 418, 419, 420, 436, 443, 445, 446, 447, 448, 449, 451, 455, 456, 460, 462, 463, 464, 465, 466, 486, 499, 500, 507, 508, 531, 532, 534, 535, 536, 537, 538, 540, 545, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 577, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 605, 606, 607, 609, 610, 615, 616, 617, 620, 623, 631, 632, 634, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 657, 663, 668, 670, 671, 672, 673, 674, 679, 681, 682, 684, 685, 686, 689, 691, 703, 716, 724, 733, 734, 735, 737, 739, 753, 754, 755, 783, 786, 793, 797, 799, 800, 801, 803, 804, 806, 811, 815, 816, 817, 818, 824, 826, 830, 831, 834, 842, 843, 844, 846, 848, 850, 851, 852, 857, 858, 861, 862, 865, 872, 873, 875, 879, 880, 881, 889, 892, 893, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 923, 931, 956, 977, 979, 980, 982, 983, 985, 988, 989, 990, 991, 992, 993, 994, 995, 998, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1010, 1013, 1019, 1024, 1026, 1027, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042], "solv": [5, 6, 67, 153, 190, 235, 262, 283, 380, 381, 382, 383, 386, 393, 408, 410, 412, 413, 418, 446, 452, 461, 477, 530, 536, 537, 538, 542, 544, 545, 546, 547, 634, 636, 645, 651, 653, 654, 663, 664, 669, 671, 673, 676, 684, 685, 686, 830, 900, 901, 904, 937, 979, 982, 984, 985, 988, 989, 1002, 1003, 1004, 1007, 1008, 1013, 1017, 1020, 1024, 1037, 1041, 1044], "x_train": [5, 6, 7, 8, 10, 13, 25, 26, 27, 28, 32, 33, 71, 72, 76, 79, 86, 87, 101, 113, 116, 120, 124, 125, 126, 127, 128, 129, 132, 141, 142, 146, 147, 159, 160, 161, 162, 170, 171, 172, 173, 174, 177, 181, 185, 196, 198, 199, 202, 208, 209, 215, 216, 217, 219, 231, 239, 243, 244, 249, 251, 256, 259, 260, 265, 269, 271, 275, 283, 288, 291, 293, 294, 301, 303, 304, 309, 311, 312, 314, 317, 318, 319, 329, 330, 338, 352, 357, 361, 363, 367, 375, 383, 386, 394, 409, 412, 415, 436, 437, 508, 557, 558, 559, 566, 567, 696, 697, 699, 701, 826, 828, 831, 849, 857, 858, 860, 874, 910, 911, 978, 988, 990, 991, 992, 994, 996, 998, 1002, 1003, 1019, 1020, 1028], "x_test": [5, 6, 7, 8, 10, 13, 25, 26, 27, 28, 32, 33, 71, 72, 76, 79, 86, 87, 101, 113, 116, 118, 120, 124, 125, 126, 127, 128, 129, 132, 141, 142, 146, 147, 158, 161, 170, 171, 172, 173, 174, 177, 181, 185, 191, 196, 198, 199, 207, 208, 209, 215, 216, 217, 219, 231, 233, 239, 243, 244, 249, 256, 259, 260, 265, 269, 271, 275, 276, 283, 288, 291, 293, 294, 301, 303, 304, 309, 311, 312, 314, 317, 318, 319, 329, 330, 338, 352, 357, 359, 360, 361, 363, 367, 375, 383, 386, 394, 409, 412, 415, 437, 469, 470, 471, 472, 473, 474, 475, 508, 557, 558, 559, 566, 567, 696, 697, 699, 701, 826, 828, 831, 849, 857, 858, 860, 874, 910, 911, 978, 988, 990, 991, 992, 994, 998, 1002, 1003, 1004, 1019, 1020, 1022, 1028, 1031], "y_train": [5, 6, 7, 8, 10, 13, 25, 26, 27, 28, 32, 33, 71, 72, 76, 86, 87, 101, 113, 116, 120, 124, 125, 126, 127, 128, 129, 132, 141, 142, 146, 147, 159, 160, 161, 162, 170, 171, 172, 173, 174, 177, 181, 185, 196, 198, 199, 202, 208, 209, 216, 217, 231, 239, 243, 244, 249, 256, 259, 260, 265, 269, 271, 275, 283, 288, 293, 294, 301, 303, 304, 309, 312, 314, 317, 318, 319, 326, 327, 329, 330, 331, 352, 357, 361, 363, 367, 375, 383, 386, 394, 409, 412, 415, 436, 437, 557, 558, 559, 566, 567, 696, 697, 699, 701, 826, 828, 831, 849, 857, 858, 860, 910, 911, 978, 988, 990, 991, 996, 998, 1003, 1019, 1020, 1028], "y_test": [5, 6, 7, 8, 10, 13, 25, 26, 27, 28, 32, 33, 71, 72, 76, 86, 87, 101, 113, 116, 118, 120, 124, 125, 126, 127, 128, 129, 132, 141, 142, 146, 147, 161, 170, 171, 172, 173, 174, 177, 185, 196, 198, 201, 207, 208, 209, 216, 217, 219, 231, 239, 243, 244, 249, 256, 259, 260, 265, 269, 271, 275, 283, 288, 293, 294, 301, 303, 304, 309, 312, 314, 317, 318, 319, 329, 330, 352, 357, 361, 363, 375, 386, 394, 409, 412, 415, 437, 557, 558, 559, 566, 567, 696, 697, 699, 701, 826, 828, 831, 849, 857, 858, 860, 910, 911, 988, 990, 991, 998, 1003, 1019, 1020, 1028, 1031], "stratifi": [5, 101, 120, 129, 146, 173, 216, 231, 240, 244, 257, 262, 265, 271, 288, 293, 294, 317, 383, 395, 550, 558, 566, 567, 601, 658, 665, 667, 675, 797, 800, 801, 803, 811, 812, 813, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 834, 849, 857, 959, 988, 991, 1019, 1036, 1037, 1038, 1040, 1041, 1044], "train_siz": [5, 7, 10, 113, 132, 154, 177, 217, 236, 240, 264, 275, 319, 322, 347, 799, 803, 814, 817, 824, 826, 983, 1019, 1031, 1032, 1037, 1038], "1_000": [5, 35, 49, 73, 101, 153, 158, 160, 172, 234, 259, 347, 536, 538, 700, 819], "rng": [5, 21, 22, 32, 35, 38, 45, 51, 63, 82, 87, 96, 98, 104, 114, 126, 129, 130, 132, 153, 154, 157, 159, 160, 162, 165, 166, 170, 173, 180, 181, 182, 183, 185, 190, 195, 202, 203, 208, 215, 230, 236, 237, 239, 247, 257, 265, 268, 273, 274, 301, 311, 314, 318, 319, 321, 323, 326, 327, 331, 342, 359, 360, 363, 368, 383, 386, 399, 469, 473, 474, 475, 642, 648, 669, 671, 677, 809, 835, 836, 837, 839, 840, 841, 845, 848, 850, 851, 852, 877, 889, 892, 893, 895, 896, 897, 906, 1015], "randomst": [5, 14, 21, 22, 25, 32, 35, 38, 45, 51, 62, 63, 82, 83, 87, 96, 98, 104, 114, 125, 126, 129, 130, 132, 146, 153, 154, 157, 159, 160, 162, 165, 166, 170, 173, 180, 181, 182, 183, 185, 190, 195, 202, 203, 208, 215, 225, 230, 236, 237, 247, 250, 257, 265, 268, 269, 271, 272, 273, 274, 301, 308, 310, 311, 314, 318, 319, 321, 323, 326, 327, 331, 342, 359, 360, 383, 386, 390, 395, 399, 413, 420, 439, 442, 446, 448, 450, 451, 452, 453, 457, 458, 459, 461, 468, 469, 473, 474, 475, 487, 490, 491, 494, 496, 502, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 582, 583, 606, 607, 609, 610, 626, 631, 633, 638, 639, 640, 641, 642, 645, 646, 648, 649, 651, 652, 653, 657, 658, 659, 660, 661, 662, 665, 666, 667, 669, 670, 671, 673, 675, 676, 677, 678, 686, 688, 689, 690, 691, 692, 693, 694, 700, 779, 791, 795, 796, 799, 800, 801, 802, 803, 809, 811, 812, 813, 814, 815, 816, 817, 824, 825, 826, 830, 831, 834, 835, 836, 837, 839, 840, 841, 845, 849, 856, 857, 858, 865, 877, 881, 889, 892, 893, 895, 896, 897, 900, 901, 902, 905, 906, 908, 909, 910, 911, 923, 936, 937, 959, 962, 998, 1015, 1026], "x_test_noisi": 5, "x_train_noisi": 5, "helper": [5, 6, 99, 219, 273, 374, 383, 384, 394, 395, 412, 467, 574, 898, 1019, 1020, 1031, 1038, 1039, 1040, 1044], "qualit": [5, 6, 54, 56, 62, 119, 126, 201, 322, 376, 408, 438, 700, 1020, 1046], "assess": [5, 13, 38, 61, 113, 124, 126, 171, 201, 219, 240, 258, 259, 261, 265, 406, 415, 700, 741, 987, 988, 994, 1009, 1046], "plot_digit": 5, "small": [5, 11, 13, 22, 28, 40, 49, 50, 54, 56, 71, 79, 83, 87, 92, 101, 114, 116, 123, 125, 126, 158, 160, 171, 172, 181, 187, 191, 192, 202, 205, 207, 216, 218, 219, 249, 262, 269, 274, 287, 298, 302, 304, 307, 309, 311, 319, 326, 331, 339, 344, 347, 352, 353, 369, 374, 376, 378, 381, 384, 390, 395, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 421, 440, 442, 444, 445, 446, 448, 457, 458, 462, 474, 495, 497, 537, 539, 546, 554, 555, 556, 560, 561, 563, 581, 588, 589, 601, 606, 607, 649, 653, 654, 655, 657, 658, 678, 681, 682, 744, 800, 801, 815, 825, 828, 857, 858, 865, 893, 902, 905, 937, 977, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 995, 996, 998, 1000, 1001, 1004, 1009, 1013, 1022, 1023, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048], "img": [5, 51, 67, 505, 585], "ravel": [5, 14, 17, 18, 20, 27, 43, 54, 55, 59, 81, 106, 114, 116, 122, 126, 131, 132, 133, 142, 153, 155, 157, 158, 159, 160, 171, 180, 191, 192, 194, 201, 214, 215, 223, 227, 230, 234, 236, 240, 244, 249, 251, 265, 269, 271, 285, 290, 291, 297, 298, 301, 302, 303, 304, 309, 310, 321, 331, 339, 344, 345, 346, 348, 349, 352, 359, 360, 464, 492, 493, 494, 630, 717, 975, 988, 1047], "imshow": [5, 6, 14, 33, 41, 47, 48, 49, 51, 52, 54, 55, 59, 83, 90, 96, 99, 107, 155, 156, 157, 161, 174, 192, 217, 223, 239, 273, 289, 304, 326, 327, 339, 345, 348, 375, 631, 696, 1020, 1021, 1045], "grei": [5, 272, 307, 347, 376], "off": [5, 12, 14, 38, 40, 41, 48, 49, 53, 54, 79, 83, 86, 96, 119, 205, 223, 235, 239, 256, 261, 263, 264, 307, 327, 331, 339, 349, 352, 376, 381, 383, 408, 410, 417, 441, 552, 553, 558, 559, 587, 590, 633, 655, 691, 714, 795, 796, 797, 800, 801, 811, 823, 941, 987, 993, 1003, 1009, 1031, 1035, 1036, 1038], "fontsiz": [5, 8, 10, 15, 35, 51, 61, 92, 99, 122, 145, 156, 157, 159, 162, 172, 181, 191, 200, 212, 223, 224, 250, 257, 266, 267, 268, 273, 274, 304, 311, 346, 914], "mse": [5, 7, 79, 80, 126, 127, 165, 166, 201, 203, 205, 207, 276, 646, 652, 748, 988, 1004, 1042, 1044], "nmse": [5, 276], "2f": [5, 8, 11, 13, 20, 32, 40, 43, 45, 47, 51, 53, 63, 65, 68, 86, 93, 99, 106, 126, 132, 133, 145, 171, 172, 177, 181, 190, 192, 197, 201, 216, 217, 218, 219, 230, 234, 240, 261, 265, 266, 268, 270, 271, 272, 293, 294, 301, 309, 312, 321, 339, 352, 353, 363, 409, 412, 415, 824], "linear": [5, 9, 10, 11, 12, 13, 14, 15, 17, 28, 30, 31, 32, 36, 38, 53, 58, 75, 76, 79, 80, 81, 82, 83, 87, 91, 96, 101, 105, 116, 118, 131, 133, 136, 139, 140, 142, 145, 148, 150, 155, 157, 159, 165, 166, 169, 170, 172, 175, 177, 181, 183, 185, 187, 189, 190, 191, 196, 198, 199, 202, 203, 205, 206, 209, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 224, 226, 228, 233, 234, 236, 238, 239, 242, 251, 252, 256, 258, 259, 260, 262, 265, 267, 268, 269, 270, 271, 272, 276, 285, 290, 291, 292, 293, 294, 295, 298, 301, 304, 307, 308, 309, 310, 312, 314, 319, 320, 331, 334, 336, 339, 340, 341, 344, 347, 348, 349, 350, 352, 359, 360, 368, 370, 373, 377, 378, 379, 383, 384, 386, 395, 397, 408, 411, 412, 413, 414, 415, 416, 417, 418, 420, 441, 454, 464, 466, 474, 481, 482, 483, 495, 500, 501, 511, 514, 520, 523, 531, 532, 533, 534, 535, 538, 540, 542, 543, 547, 548, 549, 553, 565, 581, 588, 592, 593, 605, 608, 613, 619, 630, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 686, 687, 688, 689, 690, 691, 692, 700, 706, 715, 748, 751, 763, 765, 772, 783, 797, 808, 812, 823, 826, 840, 841, 845, 849, 856, 857, 858, 861, 865, 866, 867, 870, 873, 875, 877, 878, 879, 880, 889, 893, 900, 901, 902, 903, 904, 905, 906, 977, 979, 980, 981, 983, 988, 991, 992, 993, 994, 995, 996, 1002, 1003, 1008, 1010, 1011, 1013, 1015, 1018, 1019, 1024, 1025, 1026, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045], "radial": [5, 101, 153, 158, 160, 339, 343, 373, 451, 621, 690, 986, 1003, 1026], "rbf": [5, 6, 7, 10, 11, 17, 31, 32, 101, 134, 142, 153, 154, 155, 157, 158, 159, 160, 161, 162, 168, 177, 215, 229, 230, 236, 245, 257, 260, 262, 263, 264, 267, 273, 277, 280, 291, 292, 331, 334, 336, 345, 346, 350, 373, 409, 413, 415, 451, 501, 503, 534, 540, 609, 610, 611, 612, 615, 618, 619, 620, 622, 623, 630, 638, 639, 640, 641, 642, 675, 690, 763, 772, 774, 797, 808, 811, 817, 860, 880, 895, 896, 900, 902, 903, 904, 905, 906, 977, 980, 981, 983, 985, 988, 994, 998, 1001, 1010, 1015, 1020, 1026, 1037, 1042], "decomposit": [5, 6, 15, 18, 51, 59, 71, 73, 74, 75, 87, 88, 91, 92, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 131, 137, 177, 222, 223, 225, 234, 235, 238, 239, 242, 261, 289, 294, 312, 321, 353, 369, 370, 374, 387, 390, 395, 404, 405, 406, 409, 415, 448, 450, 451, 452, 461, 481, 482, 483, 494, 548, 555, 610, 649, 650, 651, 652, 653, 654, 655, 662, 663, 664, 671, 672, 673, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 795, 796, 849, 856, 859, 862, 878, 909, 936, 937, 984, 985, 988, 1005, 1008, 1010, 1011, 1018, 1020, 1025, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "kernel_pca": [5, 101, 409], "400": [5, 27, 51, 96, 128, 132, 153, 166, 207, 215, 220, 227, 274, 302, 353, 376, 413, 494, 1010, 1024], "1e": [5, 6, 7, 10, 18, 27, 47, 96, 150, 153, 156, 158, 159, 160, 161, 162, 165, 171, 181, 194, 201, 202, 208, 215, 219, 225, 230, 236, 241, 247, 250, 253, 260, 270, 273, 303, 314, 320, 323, 330, 337, 339, 347, 352, 387, 420, 442, 446, 451, 458, 461, 470, 471, 477, 481, 482, 483, 530, 531, 532, 535, 536, 537, 538, 539, 541, 542, 544, 545, 546, 558, 559, 560, 561, 591, 596, 610, 612, 613, 614, 618, 619, 621, 622, 624, 626, 637, 639, 640, 641, 643, 644, 645, 646, 647, 648, 651, 652, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 686, 688, 689, 690, 691, 692, 693, 694, 726, 739, 783, 795, 796, 811, 835, 836, 837, 838, 839, 840, 841, 849, 857, 858, 865, 895, 896, 900, 901, 902, 903, 904, 905, 906, 974, 977, 988, 992, 996, 998, 1002, 1020, 1024, 1039, 1044, 1045, 1046], "fit_inverse_transform": [5, 101, 534, 1040], "5e": [5, 96, 186, 594, 595, 597], "inde": [5, 7, 26, 35, 40, 41, 54, 56, 59, 83, 87, 101, 113, 116, 149, 150, 153, 171, 173, 180, 185, 189, 190, 201, 203, 264, 265, 269, 271, 280, 285, 307, 312, 347, 353, 363, 367, 380, 386, 394, 395, 396, 408, 410, 415, 566, 567, 984, 998, 1002, 1045], "least": [5, 13, 15, 81, 82, 85, 86, 88, 98, 99, 116, 124, 127, 150, 161, 168, 170, 179, 180, 183, 185, 191, 194, 197, 201, 203, 205, 206, 209, 218, 219, 220, 234, 240, 262, 280, 283, 312, 319, 320, 339, 353, 354, 367, 374, 376, 378, 380, 381, 385, 387, 389, 393, 395, 396, 399, 407, 408, 410, 411, 412, 413, 415, 416, 417, 418, 419, 443, 447, 449, 455, 456, 457, 460, 473, 481, 482, 483, 484, 493, 515, 530, 536, 538, 540, 541, 542, 544, 545, 546, 547, 548, 556, 557, 558, 559, 561, 563, 564, 565, 592, 601, 634, 642, 645, 647, 649, 650, 651, 652, 653, 654, 655, 656, 662, 663, 664, 665, 666, 667, 668, 670, 671, 673, 675, 677, 678, 679, 681, 682, 683, 684, 685, 686, 691, 696, 711, 715, 717, 783, 798, 802, 803, 809, 811, 812, 813, 815, 816, 818, 821, 824, 825, 826, 857, 858, 861, 872, 880, 905, 908, 909, 910, 911, 929, 951, 978, 981, 985, 988, 991, 1000, 1002, 1003, 1004, 1009, 1010, 1011, 1013, 1022, 1026, 1031, 1033, 1034, 1037, 1038, 1042], "hope": [5, 219, 395, 407, 1040], "remov": [5, 15, 17, 18, 55, 56, 71, 76, 150, 165, 166, 171, 174, 263, 307, 314, 317, 318, 319, 352, 353, 357, 363, 373, 376, 380, 381, 382, 385, 386, 390, 395, 408, 409, 412, 415, 416, 418, 419, 441, 443, 446, 448, 449, 456, 458, 477, 487, 488, 525, 526, 533, 534, 536, 538, 540, 545, 552, 566, 567, 568, 569, 578, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 610, 629, 632, 637, 643, 644, 649, 650, 653, 654, 655, 657, 663, 664, 739, 740, 748, 749, 766, 776, 777, 778, 803, 819, 821, 822, 823, 824, 847, 859, 860, 864, 865, 873, 877, 878, 880, 889, 903, 904, 906, 915, 931, 932, 934, 978, 985, 991, 1004, 1011, 1016, 1026, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "think": [5, 38, 172, 352, 353, 381, 414, 987, 1009, 1012, 1013, 1015], "happen": [5, 118, 189, 307, 313, 353, 363, 367, 368, 379, 380, 381, 385, 386, 387, 393, 395, 396, 398, 408, 410, 412, 415, 436, 514, 571, 657, 783, 878, 880, 900, 984, 988, 989, 1003, 1009, 1024, 1039, 1043, 1044, 1046, 1047], "ridg": [5, 10, 14, 55, 76, 97, 98, 116, 133, 139, 150, 152, 158, 160, 162, 163, 165, 168, 170, 171, 172, 179, 180, 185, 188, 191, 194, 196, 197, 201, 202, 207, 220, 229, 239, 245, 275, 308, 311, 346, 347, 352, 367, 370, 393, 413, 415, 418, 523, 534, 538, 542, 610, 614, 621, 624, 642, 643, 644, 646, 648, 656, 660, 672, 673, 674, 677, 686, 700, 748, 797, 803, 811, 833, 906, 988, 996, 998, 1002, 1003, 1010, 1011, 1022, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1040, 1041, 1044, 1045, 1046, 1047], "x_reconstructed_kernel_pca": [5, 101], "inverse_transform": [5, 52, 55, 101, 147, 237, 289, 353, 399, 413, 416, 444, 464, 481, 482, 483, 532, 533, 534, 537, 538, 539, 540, 542, 543, 580, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 629, 797, 800, 801, 811, 860, 864, 865, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 880, 892, 893, 998, 999, 1000, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "x_reconstructed_pca": [5, 101], "lower": [5, 13, 17, 27, 32, 34, 59, 80, 87, 91, 96, 98, 104, 113, 116, 119, 122, 126, 129, 153, 155, 157, 159, 161, 172, 173, 185, 186, 187, 191, 201, 202, 203, 204, 214, 222, 226, 233, 234, 239, 249, 253, 261, 262, 264, 265, 269, 270, 272, 275, 288, 289, 291, 292, 309, 312, 321, 329, 339, 345, 352, 353, 354, 358, 376, 381, 406, 407, 408, 411, 412, 413, 414, 415, 416, 419, 443, 447, 463, 466, 497, 508, 531, 533, 540, 543, 552, 558, 559, 560, 561, 562, 587, 588, 590, 602, 610, 612, 613, 614, 616, 618, 619, 621, 622, 624, 631, 632, 634, 636, 676, 678, 711, 715, 723, 726, 732, 737, 795, 796, 846, 848, 850, 851, 852, 854, 881, 900, 901, 902, 903, 904, 907, 924, 983, 984, 985, 987, 988, 989, 991, 992, 993, 994, 995, 996, 1000, 1002, 1003, 1004, 1022, 1033, 1034, 1039, 1046, 1048], "analysi": [5, 7, 9, 10, 15, 21, 26, 30, 36, 37, 38, 46, 58, 64, 66, 69, 79, 80, 81, 82, 83, 86, 87, 91, 93, 95, 97, 98, 100, 101, 103, 105, 106, 108, 123, 141, 166, 168, 171, 190, 198, 223, 246, 248, 252, 253, 254, 259, 262, 263, 267, 273, 285, 286, 287, 288, 296, 297, 299, 307, 312, 329, 347, 353, 370, 373, 376, 378, 381, 383, 396, 405, 408, 410, 415, 416, 420, 438, 446, 447, 472, 474, 475, 481, 482, 484, 501, 503, 511, 514, 530, 531, 532, 533, 534, 536, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 554, 555, 630, 637, 687, 689, 690, 691, 692, 709, 718, 723, 724, 754, 786, 787, 790, 791, 795, 797, 822, 826, 842, 849, 860, 861, 866, 876, 880, 888, 936, 937, 978, 984, 985, 987, 988, 998, 1007, 1008, 1010, 1011, 1013, 1016, 1025, 1026, 1031, 1032, 1033, 1035, 1040], "favor": [5, 83, 119, 247, 253, 393, 410, 415, 632, 728, 805, 807, 859, 977, 996, 1033, 1035, 1037, 1038, 1040, 1043, 1044, 1045, 1046, 1047, 1048], "background": [5, 11, 48, 67, 129, 304, 309, 376, 381, 389, 408, 492, 493, 985, 993, 1002, 1041], "087": [5, 16, 1010], "plot_digits_denois": [5, 16, 1010], "agglomer": [5, 33, 37, 48, 51, 69, 90, 146, 148, 168, 183, 200, 239, 275, 289, 373, 408, 416, 444, 501, 599, 605, 644, 797, 802, 860, 1010, 1026], "hand": [5, 30, 36, 52, 54, 87, 90, 98, 99, 101, 119, 126, 145, 148, 158, 168, 171, 172, 194, 205, 208, 226, 233, 234, 236, 237, 240, 256, 259, 260, 264, 271, 289, 304, 326, 327, 339, 367, 375, 376, 378, 381, 383, 387, 389, 394, 402, 413, 414, 415, 417, 501, 642, 696, 712, 786, 826, 881, 905, 977, 981, 984, 988, 990, 992, 996, 1001, 1003, 1010, 1013, 1015, 1018, 1021, 1022], "written": [5, 7, 30, 36, 52, 54, 90, 99, 148, 168, 208, 256, 260, 289, 304, 320, 326, 327, 368, 378, 381, 382, 383, 387, 389, 393, 395, 407, 409, 414, 486, 501, 507, 696, 712, 826, 905, 912, 982, 984, 988, 992, 993, 1002, 1007, 1010, 1015, 1016, 1021, 1024, 1040], "onlin": [5, 6, 8, 15, 37, 52, 69, 96, 99, 121, 168, 179, 209, 215, 220, 239, 302, 369, 376, 380, 386, 395, 408, 413, 416, 418, 441, 445, 446, 448, 494, 501, 530, 535, 536, 537, 538, 544, 545, 581, 583, 657, 665, 666, 667, 675, 677, 826, 835, 836, 837, 838, 839, 842, 843, 848, 850, 851, 869, 870, 880, 900, 901, 980, 984, 992, 994, 1007, 1010, 1011, 1013, 1022, 1026, 1031, 1035, 1036, 1038, 1046], "dictionari": [5, 6, 7, 8, 37, 49, 52, 54, 69, 95, 97, 108, 121, 130, 168, 200, 237, 239, 353, 354, 374, 375, 376, 383, 393, 395, 408, 416, 448, 463, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 506, 509, 525, 530, 536, 537, 538, 539, 541, 542, 543, 544, 545, 547, 566, 567, 568, 569, 580, 581, 583, 586, 587, 588, 631, 632, 633, 663, 684, 685, 700, 712, 797, 800, 801, 808, 809, 811, 823, 859, 864, 873, 908, 909, 910, 911, 915, 925, 945, 948, 977, 984, 988, 1003, 1010, 1015, 1024, 1025, 1026, 1031, 1039, 1042, 1043, 1044, 1045, 1046], "dataset": [6, 7, 9, 10, 11, 14, 15, 17, 18, 20, 21, 22, 27, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 68, 69, 72, 73, 74, 75, 76, 81, 82, 83, 87, 94, 95, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 112, 114, 115, 116, 117, 118, 120, 121, 124, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 142, 143, 146, 147, 148, 149, 150, 152, 154, 156, 159, 161, 163, 165, 166, 173, 174, 177, 179, 181, 182, 184, 186, 187, 188, 189, 191, 192, 193, 194, 197, 198, 199, 200, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 224, 226, 227, 229, 231, 234, 236, 238, 239, 243, 244, 245, 247, 249, 250, 251, 253, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 285, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 332, 334, 335, 337, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 353, 354, 356, 357, 359, 360, 361, 362, 363, 368, 369, 370, 383, 384, 385, 387, 394, 395, 397, 398, 402, 404, 405, 406, 408, 409, 412, 413, 414, 415, 416, 417, 423, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 457, 458, 468, 469, 472, 473, 474, 475, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 545, 548, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 582, 583, 587, 588, 589, 591, 592, 593, 594, 595, 597, 598, 599, 601, 602, 609, 610, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 627, 630, 631, 632, 633, 634, 637, 638, 639, 642, 644, 645, 646, 648, 650, 651, 652, 654, 656, 657, 658, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 678, 687, 688, 689, 690, 691, 696, 697, 699, 700, 701, 702, 703, 707, 727, 753, 755, 785, 786, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 811, 812, 813, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 842, 843, 844, 846, 848, 849, 850, 851, 852, 853, 856, 857, 858, 860, 861, 864, 865, 873, 874, 878, 880, 882, 890, 891, 892, 893, 894, 895, 896, 897, 900, 901, 902, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 920, 921, 925, 926, 977, 978, 980, 981, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1008, 1009, 1010, 1012, 1013, 1016, 1018, 1019, 1020, 1023, 1026, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "excerpt": [6, 1000, 1020], "wild": [6, 374, 492, 493, 507, 508, 1020, 1026, 1031], "aka": [6, 301, 352, 393, 416, 451, 535, 537, 539, 543, 546, 580, 581, 614, 621, 650, 651, 653, 654, 655, 657, 658, 661, 665, 666, 667, 669, 675, 676, 677, 739, 867, 871, 873, 984, 992, 1002, 1015, 1020, 1033, 1045], "lfw": [6, 376, 492, 493, 1020, 1031], "vi": [6, 8, 376, 698, 1020, 1039, 1042], "www": [6, 72, 177, 201, 217, 219, 231, 283, 303, 375, 376, 381, 389, 398, 408, 412, 441, 448, 486, 507, 508, 530, 533, 536, 540, 643, 657, 663, 670, 684, 685, 849, 856, 908, 909, 984, 1001, 1020], "umass": [6, 20, 376, 1020], "edu": [6, 8, 11, 18, 47, 124, 150, 160, 177, 183, 222, 250, 261, 280, 290, 298, 311, 352, 375, 376, 378, 408, 448, 486, 499, 501, 507, 508, 509, 533, 640, 643, 648, 657, 665, 666, 675, 678, 681, 682, 835, 837, 838, 839, 849, 856, 893, 895, 908, 909, 984, 986, 1020], "funnel": [6, 492, 493, 1020], "tgz": [6, 1020], "233mb": [6, 1020], "stat": [6, 8, 10, 71, 81, 102, 150, 153, 174, 259, 262, 270, 274, 290, 319, 326, 327, 378, 390, 394, 410, 473, 591, 594, 595, 597, 598, 599, 603, 604, 605, 608, 681, 682, 801, 809, 811, 908, 909, 939, 977, 984, 998, 1020, 1038, 1040, 1044], "loguniform": [6, 153, 270, 977, 1020, 1041], "fetch_lfw_peopl": [6, 376, 1020, 1046], "confusionmatrixdisplai": [6, 33, 256, 320, 326, 352, 630, 717, 988, 1020, 1041, 1042, 1044, 1045, 1046], "classification_report": [6, 33, 71, 147, 260, 304, 326, 327, 988, 1020, 1024, 1033, 1035, 1039, 1040, 1041, 1043, 1047], "randomizedsearchcv": [6, 72, 153, 263, 270, 319, 363, 394, 399, 574, 977, 988, 1002, 1008, 1020, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1048], "standardscal": [6, 10, 32, 45, 50, 56, 59, 63, 72, 74, 87, 107, 133, 150, 171, 180, 189, 190, 192, 201, 217, 219, 231, 232, 240, 241, 242, 244, 259, 269, 288, 293, 294, 301, 309, 312, 317, 318, 320, 321, 322, 339, 342, 363, 369, 381, 383, 386, 390, 394, 409, 412, 429, 465, 466, 566, 649, 650, 653, 654, 655, 663, 664, 675, 677, 860, 861, 864, 877, 891, 900, 901, 902, 903, 905, 906, 978, 985, 992, 998, 1002, 1003, 1005, 1020, 1033, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1047], "svc": [6, 17, 26, 28, 31, 32, 33, 71, 75, 134, 140, 142, 148, 154, 168, 177, 192, 205, 217, 235, 238, 242, 256, 260, 262, 264, 267, 268, 269, 272, 273, 277, 309, 311, 312, 317, 319, 329, 331, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 348, 349, 350, 352, 367, 383, 387, 395, 402, 406, 409, 412, 415, 436, 467, 514, 554, 696, 697, 699, 701, 797, 814, 827, 829, 860, 897, 898, 900, 902, 976, 977, 983, 986, 988, 989, 998, 1010, 1015, 1019, 1020, 1022, 1028, 1031, 1032, 1033, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "disk": [6, 14, 376, 379, 381, 386, 395, 402, 1020], "arrai": [6, 7, 8, 10, 11, 12, 13, 14, 17, 20, 33, 34, 35, 41, 45, 47, 49, 54, 55, 62, 63, 65, 71, 73, 82, 86, 93, 97, 98, 125, 127, 129, 132, 135, 140, 147, 150, 154, 155, 156, 161, 171, 180, 182, 185, 194, 195, 198, 201, 202, 208, 218, 223, 224, 230, 234, 237, 240, 241, 244, 247, 248, 249, 251, 252, 257, 258, 260, 262, 263, 266, 267, 271, 283, 298, 310, 317, 320, 321, 323, 327, 335, 342, 343, 352, 360, 363, 367, 368, 374, 375, 376, 381, 382, 383, 384, 386, 387, 389, 391, 393, 394, 395, 402, 405, 408, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 432, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 489, 490, 491, 492, 493, 495, 496, 497, 499, 500, 501, 502, 503, 505, 507, 508, 509, 510, 511, 512, 514, 523, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 580, 581, 582, 583, 585, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 920, 921, 922, 925, 926, 934, 935, 936, 937, 938, 939, 941, 942, 943, 950, 951, 952, 959, 960, 961, 962, 963, 964, 965, 966, 974, 975, 978, 983, 984, 986, 988, 989, 991, 992, 994, 995, 998, 999, 1000, 1002, 1003, 1004, 1007, 1013, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "lfw_peopl": [6, 376, 1020], "min_faces_per_person": [6, 376, 493, 1020], "resiz": [6, 47, 48, 241, 376, 492, 493, 1020], "n_sampl": [6, 7, 10, 15, 25, 26, 27, 28, 33, 34, 35, 38, 39, 40, 42, 43, 44, 45, 49, 50, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 68, 71, 76, 79, 80, 81, 82, 83, 87, 93, 96, 97, 101, 104, 113, 115, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 129, 130, 141, 142, 149, 150, 162, 165, 166, 170, 180, 182, 183, 185, 187, 189, 191, 193, 195, 196, 200, 201, 202, 204, 205, 209, 213, 216, 218, 219, 222, 223, 224, 225, 226, 227, 230, 234, 235, 237, 240, 248, 250, 251, 252, 253, 259, 260, 262, 265, 266, 269, 271, 272, 273, 274, 275, 276, 285, 295, 309, 310, 311, 314, 318, 319, 321, 323, 328, 337, 340, 341, 347, 352, 353, 363, 374, 378, 381, 383, 386, 390, 393, 394, 395, 399, 408, 410, 411, 412, 413, 415, 419, 420, 421, 423, 425, 426, 427, 430, 431, 432, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 493, 500, 503, 507, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 620, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 768, 769, 770, 771, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 925, 926, 937, 939, 941, 950, 957, 959, 962, 963, 964, 965, 966, 967, 968, 969, 977, 980, 984, 988, 989, 991, 992, 998, 999, 1000, 1002, 1003, 1004, 1015, 1020, 1021, 1022, 1023, 1024, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "w": [6, 12, 14, 17, 31, 35, 41, 43, 46, 49, 59, 65, 103, 106, 150, 165, 200, 205, 218, 237, 238, 247, 248, 249, 252, 253, 273, 304, 320, 321, 343, 344, 347, 354, 363, 376, 378, 387, 402, 408, 409, 413, 415, 416, 420, 425, 431, 436, 464, 468, 471, 473, 481, 482, 483, 522, 537, 539, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 566, 567, 568, 569, 587, 588, 590, 609, 610, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 692, 698, 723, 724, 754, 797, 811, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 842, 843, 846, 847, 850, 851, 857, 858, 893, 895, 896, 900, 901, 902, 903, 905, 906, 908, 909, 910, 911, 934, 939, 984, 988, 992, 993, 998, 1000, 1002, 1003, 1020, 1024, 1041, 1045, 1046, 1047, 1048], "info": [6, 43, 72, 96, 171, 172, 237, 260, 378, 380, 385, 395, 416, 944, 954, 1020], "n_featur": [6, 8, 15, 26, 27, 28, 31, 32, 33, 34, 35, 41, 53, 59, 61, 62, 79, 80, 81, 82, 83, 92, 93, 96, 104, 113, 115, 117, 119, 120, 147, 149, 150, 165, 166, 177, 180, 183, 185, 187, 195, 196, 200, 204, 205, 216, 218, 223, 230, 234, 235, 237, 247, 252, 259, 265, 269, 271, 272, 274, 275, 295, 301, 309, 317, 318, 319, 321, 323, 347, 352, 353, 354, 363, 367, 374, 375, 381, 383, 386, 393, 394, 395, 399, 408, 410, 411, 413, 415, 416, 419, 420, 421, 423, 425, 426, 427, 430, 431, 432, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 457, 458, 459, 460, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 488, 489, 490, 491, 493, 500, 503, 507, 508, 511, 514, 515, 518, 520, 522, 523, 525, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 696, 697, 699, 700, 701, 709, 723, 756, 757, 758, 759, 761, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 790, 791, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 863, 864, 865, 866, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 937, 963, 964, 965, 966, 967, 968, 969, 980, 984, 989, 991, 992, 998, 1002, 1003, 1004, 1015, 1020, 1021, 1023, 1024, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "id": [6, 20, 219, 298, 361, 375, 376, 381, 389, 410, 412, 416, 493, 494, 495, 912, 914, 932, 1020, 1024, 1039, 1040, 1043], "person": [6, 265, 376, 380, 412, 416, 492, 493, 494, 998, 1020, 1039], "target_nam": [6, 20, 31, 53, 91, 100, 105, 170, 210, 223, 249, 256, 263, 271, 272, 288, 313, 330, 352, 358, 374, 376, 487, 488, 490, 491, 492, 493, 495, 496, 499, 501, 502, 503, 504, 509, 712, 988, 1004, 1015, 1020, 1024, 1041], "n_class": [6, 38, 92, 93, 113, 115, 120, 122, 147, 149, 216, 223, 235, 238, 249, 269, 270, 271, 294, 295, 317, 358, 361, 363, 381, 383, 395, 415, 436, 487, 488, 501, 514, 518, 522, 548, 549, 550, 552, 554, 556, 558, 560, 563, 566, 568, 592, 593, 603, 609, 633, 638, 657, 658, 665, 666, 667, 673, 674, 675, 676, 696, 706, 715, 717, 733, 736, 739, 752, 786, 792, 797, 800, 801, 811, 821, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 842, 847, 849, 850, 857, 860, 867, 868, 871, 874, 881, 884, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 910, 912, 913, 925, 926, 984, 988, 989, 992, 999, 1002, 1003, 1012, 1020, 1036, 1037, 1038, 1040, 1041, 1042, 1048], "1288": [6, 376], "1850": [6, 376], "scaler": [6, 72, 74, 129, 168, 217, 218, 235, 240, 242, 244, 288, 293, 306, 311, 312, 315, 322, 339, 342, 363, 386, 409, 412, 489, 657, 658, 671, 673, 686, 860, 869, 870, 872, 876, 877, 878, 880, 885, 886, 887, 888, 889, 890, 891, 992, 998, 1002, 1010, 1020, 1031, 1036, 1039, 1044], "unlabel": [6, 238, 319, 326, 327, 328, 330, 331, 395, 407, 408, 895, 896, 897, 987, 1015, 1018, 1020, 1022, 1043], "unsupervis": [6, 12, 38, 50, 73, 74, 87, 96, 118, 131, 230, 238, 291, 292, 338, 352, 353, 363, 370, 373, 376, 383, 394, 395, 407, 408, 411, 413, 414, 415, 416, 432, 441, 444, 531, 533, 535, 536, 538, 541, 542, 548, 562, 565, 566, 568, 569, 581, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 627, 629, 633, 634, 637, 638, 639, 640, 641, 676, 797, 800, 801, 803, 811, 819, 824, 827, 842, 843, 846, 848, 849, 850, 851, 856, 863, 864, 865, 866, 869, 870, 872, 873, 874, 875, 877, 878, 879, 880, 881, 892, 893, 897, 904, 985, 988, 994, 1001, 1011, 1015, 1016, 1018, 1020, 1026, 1031, 1034, 1044], "dimension": [6, 9, 10, 20, 32, 34, 41, 45, 55, 56, 58, 59, 63, 70, 72, 74, 75, 77, 86, 87, 93, 96, 100, 104, 105, 113, 118, 131, 141, 142, 150, 153, 155, 156, 160, 168, 185, 197, 202, 218, 221, 223, 224, 226, 228, 230, 234, 235, 238, 248, 249, 261, 286, 289, 293, 295, 299, 309, 336, 343, 352, 363, 367, 373, 376, 377, 378, 381, 390, 395, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 444, 446, 448, 464, 468, 472, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 496, 499, 500, 501, 503, 504, 509, 514, 518, 531, 533, 534, 537, 538, 539, 540, 543, 546, 548, 562, 565, 572, 598, 606, 630, 639, 640, 641, 651, 687, 688, 689, 690, 691, 692, 693, 695, 698, 709, 723, 795, 796, 797, 826, 840, 841, 842, 845, 848, 849, 856, 860, 861, 864, 870, 875, 880, 892, 893, 894, 900, 904, 937, 974, 979, 980, 983, 984, 989, 990, 994, 1000, 1001, 1002, 1003, 1004, 1010, 1011, 1013, 1015, 1016, 1018, 1020, 1021, 1023, 1024, 1025, 1026, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1040, 1043, 1046, 1047], "reduct": [6, 20, 34, 55, 58, 70, 74, 77, 87, 96, 100, 105, 116, 131, 168, 221, 223, 224, 227, 228, 234, 238, 261, 286, 293, 295, 299, 321, 336, 363, 367, 373, 407, 408, 409, 411, 413, 415, 417, 467, 481, 482, 483, 484, 501, 529, 531, 533, 534, 537, 538, 539, 540, 543, 546, 548, 552, 553, 556, 557, 558, 559, 563, 564, 565, 598, 606, 657, 658, 687, 688, 689, 690, 691, 692, 779, 797, 826, 842, 849, 856, 860, 861, 870, 880, 898, 900, 908, 909, 910, 911, 980, 985, 1000, 1004, 1009, 1010, 1011, 1013, 1020, 1026, 1032, 1033, 1034, 1037, 1045, 1046, 1047], "top": [6, 12, 14, 15, 17, 18, 35, 38, 40, 42, 43, 44, 45, 46, 52, 63, 65, 72, 92, 98, 111, 118, 119, 122, 133, 136, 171, 201, 203, 212, 216, 230, 240, 241, 247, 249, 250, 253, 259, 263, 271, 272, 290, 307, 309, 313, 318, 326, 327, 339, 343, 352, 363, 379, 381, 383, 387, 393, 405, 406, 408, 413, 414, 415, 486, 586, 587, 590, 598, 724, 754, 792, 912, 914, 977, 980, 984, 986, 996, 1008, 1013, 1020, 1023, 1024, 1045], "t0": [6, 8, 11, 15, 18, 40, 43, 45, 47, 49, 51, 53, 59, 63, 65, 99, 185, 187, 216, 217, 218, 224, 227, 230, 234, 236, 263, 352, 353, 354, 675, 676, 677, 1020], "svd_solver": [6, 71, 96, 104, 404, 413, 534, 540, 1020, 1037], "whiten": [6, 96, 97, 98, 289, 413, 420, 532, 533, 540, 878, 880, 1020, 1035, 1037, 1045, 1046], "done": [6, 8, 9, 11, 13, 15, 18, 20, 49, 51, 53, 54, 99, 147, 150, 158, 171, 172, 177, 180, 185, 187, 205, 218, 236, 237, 252, 260, 263, 266, 271, 285, 310, 319, 352, 353, 354, 363, 368, 375, 379, 381, 383, 385, 388, 389, 390, 393, 395, 399, 408, 410, 412, 413, 415, 440, 441, 444, 449, 451, 471, 481, 482, 483, 484, 488, 534, 560, 561, 581, 605, 627, 629, 631, 633, 642, 643, 644, 658, 739, 795, 796, 797, 811, 816, 817, 864, 878, 973, 977, 978, 981, 984, 985, 988, 990, 991, 992, 998, 1001, 1002, 1003, 1004, 1009, 1015, 1019, 1020, 1022, 1024, 1031, 1033, 1038, 1041, 1043, 1047], "components_": [6, 15, 59, 87, 96, 98, 99, 102, 107, 234, 235, 304, 312, 321, 395, 409, 413, 443, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 542, 543, 638, 849, 856, 892, 893, 980, 1000, 1020, 1035, 1037, 1043, 1046], "project": [6, 8, 11, 14, 18, 34, 46, 56, 59, 68, 91, 95, 96, 98, 100, 102, 103, 107, 108, 115, 157, 159, 161, 162, 168, 172, 177, 193, 198, 210, 222, 223, 224, 226, 229, 235, 238, 245, 248, 289, 294, 298, 304, 336, 344, 353, 358, 367, 370, 373, 375, 379, 380, 386, 387, 390, 395, 396, 398, 405, 411, 413, 414, 420, 439, 445, 450, 451, 461, 473, 481, 482, 483, 484, 488, 501, 503, 530, 532, 533, 534, 536, 538, 540, 541, 542, 543, 547, 548, 572, 581, 588, 640, 641, 648, 671, 673, 687, 690, 694, 695, 830, 849, 877, 892, 893, 894, 936, 937, 982, 984, 985, 986, 989, 991, 992, 994, 1001, 1004, 1006, 1010, 1012, 1013, 1015, 1020, 1023, 1026, 1031, 1032, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "orthonorm": [6, 390, 936, 980, 1020], "x_train_pca": [6, 1020], "x_test_pca": [6, 101, 1020], "966": [6, 117, 137, 1010], "083": [6, 220, 260], "008": [6, 150, 311, 315, 353, 378, 387, 1010], "classifi": [6, 7, 8, 9, 24, 27, 29, 30, 31, 33, 35, 36, 57, 71, 72, 73, 74, 75, 91, 101, 105, 107, 113, 114, 115, 116, 117, 120, 121, 122, 125, 131, 134, 135, 142, 146, 147, 149, 155, 168, 173, 174, 177, 179, 191, 192, 193, 199, 201, 208, 210, 213, 216, 219, 220, 230, 233, 235, 237, 238, 243, 256, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 277, 280, 282, 284, 287, 293, 294, 296, 301, 304, 309, 319, 320, 325, 326, 327, 329, 330, 332, 334, 335, 337, 338, 340, 341, 342, 343, 348, 349, 350, 354, 376, 378, 381, 383, 386, 393, 395, 408, 409, 412, 416, 417, 418, 425, 434, 436, 437, 438, 487, 488, 495, 503, 511, 513, 514, 521, 530, 535, 536, 541, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 562, 563, 565, 566, 567, 568, 569, 592, 593, 601, 605, 609, 621, 628, 630, 631, 632, 648, 657, 658, 665, 667, 670, 671, 672, 673, 674, 675, 696, 697, 699, 701, 702, 706, 707, 708, 711, 712, 717, 719, 724, 725, 727, 728, 732, 733, 736, 737, 738, 739, 740, 741, 752, 754, 780, 781, 782, 785, 786, 787, 792, 794, 797, 800, 801, 803, 811, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 847, 848, 850, 851, 856, 857, 858, 860, 861, 867, 880, 881, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 914, 929, 931, 977, 978, 980, 983, 984, 985, 988, 989, 990, 993, 996, 998, 1001, 1002, 1003, 1004, 1008, 1009, 1010, 1011, 1013, 1015, 1016, 1018, 1019, 1020, 1026, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048], "1e3": [6, 7, 10, 153, 159, 165, 236, 273, 323, 977, 1020], "1e5": [6, 158, 182, 184, 191, 273, 612, 613, 614, 618, 619, 621, 622, 624, 889, 894, 1000, 1020, 1022], "clf": [6, 10, 11, 12, 17, 25, 26, 27, 28, 32, 33, 39, 49, 52, 55, 59, 64, 72, 102, 103, 117, 125, 128, 129, 134, 139, 142, 146, 147, 149, 155, 157, 174, 191, 193, 194, 198, 199, 205, 208, 210, 213, 214, 215, 217, 225, 231, 232, 235, 238, 244, 251, 259, 263, 267, 268, 270, 273, 274, 288, 291, 292, 293, 296, 301, 309, 312, 317, 318, 319, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 352, 357, 358, 361, 367, 376, 394, 395, 402, 409, 412, 415, 417, 437, 548, 549, 552, 554, 556, 558, 560, 562, 563, 566, 592, 593, 596, 631, 633, 637, 638, 639, 640, 641, 643, 644, 647, 651, 657, 658, 659, 660, 661, 665, 667, 668, 671, 672, 673, 674, 675, 676, 679, 696, 697, 699, 701, 786, 797, 800, 801, 811, 828, 829, 830, 832, 835, 836, 837, 838, 839, 846, 847, 857, 900, 902, 904, 905, 908, 912, 914, 978, 980, 984, 988, 989, 991, 992, 994, 995, 1002, 1003, 1004, 1015, 1019, 1020, 1024], "class_weight": [6, 341, 395, 407, 556, 560, 563, 657, 658, 665, 667, 673, 674, 675, 676, 900, 902, 903, 904, 905, 906, 907, 908, 910, 977, 1002, 1003, 1020, 1031, 1032, 1034, 1035, 1036, 1037, 1039, 1045, 1046], "n_iter": [6, 18, 72, 153, 209, 222, 223, 227, 263, 270, 285, 304, 341, 383, 387, 394, 420, 453, 477, 531, 532, 543, 544, 545, 546, 643, 644, 645, 646, 651, 652, 659, 660, 661, 662, 680, 681, 682, 683, 684, 685, 686, 691, 693, 800, 801, 809, 811, 856, 858, 936, 937, 977, 1002, 1020, 1032, 1037, 1038, 1039, 1043, 1045, 1046, 1047], "found": [6, 20, 21, 22, 107, 120, 149, 153, 157, 159, 161, 205, 238, 260, 263, 264, 265, 312, 317, 320, 322, 323, 339, 354, 367, 369, 375, 378, 380, 381, 383, 393, 395, 396, 405, 408, 411, 412, 413, 415, 416, 418, 433, 440, 443, 444, 458, 471, 556, 557, 558, 559, 563, 564, 587, 589, 609, 610, 627, 635, 646, 650, 652, 654, 660, 662, 664, 670, 671, 673, 675, 677, 686, 687, 711, 718, 797, 800, 801, 811, 837, 842, 843, 849, 871, 873, 874, 908, 909, 910, 911, 915, 972, 976, 977, 980, 984, 985, 987, 989, 990, 991, 992, 998, 1002, 1003, 1004, 1009, 1012, 1015, 1020, 1024, 1031, 1034, 1035, 1038, 1039, 1041, 1045, 1048], "grid": [6, 8, 10, 11, 21, 26, 27, 28, 43, 55, 62, 72, 73, 74, 75, 79, 83, 122, 124, 131, 145, 147, 149, 157, 168, 170, 171, 172, 190, 219, 227, 231, 235, 236, 237, 241, 247, 252, 255, 259, 261, 263, 266, 267, 269, 274, 278, 283, 287, 289, 290, 298, 304, 309, 310, 312, 336, 338, 339, 345, 346, 352, 383, 388, 393, 395, 403, 409, 412, 414, 415, 416, 447, 460, 463, 471, 497, 501, 514, 521, 630, 631, 632, 646, 649, 652, 653, 655, 658, 660, 662, 675, 712, 726, 740, 783, 786, 797, 800, 801, 808, 811, 813, 826, 827, 860, 905, 981, 983, 988, 991, 995, 1009, 1010, 1015, 1016, 1018, 1020, 1022, 1026, 1031, 1034, 1035, 1036, 1038, 1039, 1045, 1047, 1048], "search": [6, 47, 55, 72, 73, 74, 75, 126, 145, 147, 149, 150, 153, 168, 219, 231, 236, 237, 252, 255, 261, 263, 266, 267, 269, 274, 278, 283, 285, 287, 289, 304, 309, 322, 339, 346, 352, 363, 370, 378, 379, 381, 383, 393, 395, 403, 408, 409, 412, 415, 416, 417, 419, 442, 447, 449, 451, 456, 457, 460, 463, 470, 471, 477, 501, 514, 521, 556, 557, 558, 559, 563, 564, 565, 578, 598, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 627, 652, 675, 687, 688, 691, 692, 712, 726, 783, 786, 797, 800, 801, 808, 809, 811, 813, 826, 827, 840, 841, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 860, 905, 908, 909, 910, 911, 942, 976, 981, 983, 985, 988, 991, 992, 1002, 1004, 1008, 1009, 1010, 1015, 1016, 1018, 1020, 1026, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1043, 1045, 1046, 1048], "best_estimator_": [6, 55, 74, 75, 79, 104, 236, 252, 263, 266, 289, 797, 800, 801, 811, 977, 1019, 1020, 1038], "756": 6, "76823": 6, "03433306456": 6, "0034189458230957995": 6, "from_estim": [6, 9, 26, 28, 31, 32, 35, 57, 115, 118, 129, 130, 134, 172, 184, 193, 210, 215, 236, 241, 243, 256, 259, 264, 265, 269, 272, 277, 288, 293, 296, 312, 317, 318, 319, 320, 322, 323, 335, 336, 337, 338, 340, 341, 343, 358, 388, 406, 632, 717, 725, 780, 782, 785, 786, 787, 983, 988, 995, 1020, 1028, 1044, 1045, 1046, 1047], "display_label": [6, 256, 696, 1020, 1043], "xticks_rot": [6, 696, 1020], "vertic": [6, 18, 61, 125, 174, 190, 234, 235, 266, 283, 307, 310, 344, 346, 395, 405, 408, 413, 514, 696, 779, 1020], "tight_layout": [6, 8, 26, 28, 32, 41, 53, 56, 66, 74, 76, 87, 96, 97, 98, 107, 113, 115, 120, 122, 127, 131, 133, 135, 155, 157, 162, 165, 170, 171, 173, 174, 180, 181, 185, 191, 199, 201, 209, 212, 216, 219, 222, 235, 240, 257, 258, 274, 283, 285, 287, 297, 308, 309, 310, 311, 312, 317, 321, 337, 353, 357, 358, 1020], "046": [6, 353], "precis": [6, 13, 26, 33, 71, 76, 83, 96, 147, 159, 160, 168, 177, 231, 255, 256, 260, 278, 304, 307, 326, 327, 381, 383, 395, 405, 406, 407, 408, 410, 413, 415, 442, 468, 469, 470, 471, 472, 473, 474, 475, 477, 503, 522, 531, 533, 540, 543, 643, 644, 645, 647, 649, 650, 651, 653, 654, 655, 668, 671, 673, 679, 681, 682, 686, 698, 699, 705, 706, 707, 712, 725, 727, 728, 729, 737, 761, 780, 781, 782, 785, 786, 795, 796, 826, 829, 840, 841, 846, 861, 880, 884, 900, 905, 912, 914, 937, 982, 984, 991, 992, 1003, 1010, 1020, 1024, 1031, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "recal": [6, 26, 33, 71, 83, 101, 147, 168, 231, 255, 260, 278, 280, 304, 326, 327, 381, 395, 408, 503, 603, 699, 705, 706, 707, 711, 712, 725, 727, 728, 729, 780, 781, 782, 785, 786, 826, 829, 861, 880, 884, 900, 984, 1004, 1010, 1020, 1024, 1034, 1035, 1038, 1040, 1041, 1043, 1044, 1045, 1047], "f1": [6, 26, 33, 71, 147, 260, 304, 326, 327, 330, 412, 712, 727, 728, 736, 781, 988, 989, 1020, 1024, 1035, 1047], "ariel": [6, 376, 1031, 1037], "sharon": [6, 376], "69": [6, 8, 192, 312, 327, 408, 470, 471, 606, 607, 754, 988, 998, 1022], "colin": [6, 376, 1037], "powel": [6, 376], "87": [6, 33, 71, 162, 260, 327, 596, 666, 786, 797, 876, 888, 988, 1024], "donald": [6, 376, 408, 723, 978], "rumsfeld": [6, 376], "63": [6, 358, 378, 415, 556, 557, 564, 565, 698, 724, 797, 811, 910, 911, 988], "georg": [6, 376, 408, 1037, 1043, 1044, 1045, 1046], "bush": [6, 376], "95": [6, 13, 15, 33, 45, 53, 58, 68, 92, 102, 103, 122, 126, 160, 171, 180, 201, 203, 208, 219, 249, 250, 253, 262, 263, 290, 298, 309, 313, 321, 327, 339, 363, 415, 526, 631, 632, 635, 646, 660, 746, 897, 984, 988, 989, 1001, 1024, 1034], "91": [6, 33, 52, 158, 304, 326, 327, 415, 983, 1020, 1024], "146": [6, 415], "gerhard": [6, 376], "schroeder": [6, 376], "hugo": [6, 376, 1037, 1042, 1043, 1044, 1045], "chavez": [6, 376], "90": [6, 10, 13, 15, 33, 75, 106, 107, 125, 126, 127, 147, 158, 174, 181, 192, 198, 200, 203, 208, 219, 247, 271, 273, 309, 313, 323, 326, 327, 363, 367, 381, 387, 412, 562, 779, 797, 824, 829, 881, 983, 988, 1020, 1024, 1046, 1047], "toni": [6, 376, 562, 880, 994, 1044, 1045], "blair": [6, 376], "93": [6, 13, 33, 150, 201, 244, 260, 327, 352, 378, 786, 797, 824, 908, 983, 988, 1020, 1024], "83": [6, 31, 35, 40, 326, 378, 383, 706, 784, 983, 988, 1020, 1024, 1034], "322": [6, 92, 353, 470, 471], "macro": [6, 33, 71, 147, 260, 304, 317, 326, 327, 376, 412, 706, 712, 727, 728, 736, 781, 782, 785, 786, 988, 1024, 1031, 1039, 1047], "avg": [6, 33, 71, 147, 260, 304, 326, 327, 568, 703, 712, 988, 1020, 1024, 1047], "weight": [6, 11, 13, 14, 15, 20, 25, 33, 55, 71, 107, 126, 134, 135, 146, 147, 157, 158, 166, 168, 171, 179, 185, 190, 192, 201, 205, 206, 208, 211, 212, 213, 215, 216, 217, 219, 220, 237, 242, 247, 251, 260, 265, 269, 271, 288, 297, 300, 301, 302, 304, 305, 312, 314, 317, 320, 326, 327, 334, 339, 341, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 361, 363, 377, 378, 390, 393, 395, 408, 410, 411, 413, 414, 417, 419, 425, 431, 436, 439, 442, 443, 445, 446, 448, 452, 458, 459, 462, 463, 464, 466, 468, 473, 481, 482, 483, 495, 514, 523, 537, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 585, 588, 589, 590, 592, 596, 601, 602, 609, 610, 627, 631, 632, 633, 634, 636, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 686, 688, 692, 696, 697, 699, 701, 702, 706, 707, 708, 711, 712, 715, 717, 719, 720, 721, 722, 724, 725, 726, 727, 728, 732, 733, 734, 736, 737, 738, 739, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 756, 757, 767, 780, 781, 782, 783, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 856, 857, 858, 859, 862, 865, 879, 880, 881, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 925, 926, 939, 963, 969, 978, 979, 984, 985, 987, 988, 990, 991, 992, 993, 995, 998, 1001, 1002, 1003, 1004, 1009, 1010, 1015, 1022, 1024, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "85": [6, 17, 18, 33, 51, 56, 71, 99, 147, 216, 219, 273, 304, 327, 363, 415, 438, 499, 554, 555, 596, 651, 657, 743, 751, 786, 797, 824, 988, 989, 1020, 1031], "plot_galleri": [6, 96, 1020], "n_row": [6, 20, 96, 405, 423, 450, 452, 510, 512, 1020], "n_col": [6, 20, 96, 239, 423, 450, 452, 510, 512, 631, 1020], "portrait": [6, 413, 1020], "figur": [6, 7, 8, 10, 12, 14, 17, 25, 26, 27, 28, 32, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 51, 52, 53, 55, 57, 59, 60, 62, 63, 64, 65, 66, 68, 79, 83, 86, 90, 91, 92, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 113, 114, 115, 116, 124, 125, 126, 127, 128, 131, 132, 136, 139, 140, 142, 145, 146, 149, 154, 155, 156, 157, 160, 161, 166, 171, 172, 173, 174, 180, 185, 186, 191, 194, 195, 198, 200, 202, 203, 207, 212, 216, 217, 218, 224, 225, 226, 230, 234, 235, 236, 238, 239, 241, 247, 249, 250, 253, 256, 261, 266, 267, 276, 290, 294, 295, 298, 301, 304, 307, 309, 310, 314, 317, 319, 326, 327, 328, 337, 339, 344, 358, 359, 360, 381, 408, 414, 415, 416, 418, 437, 630, 631, 696, 697, 699, 700, 701, 803, 819, 914, 977, 981, 984, 987, 988, 991, 992, 995, 1002, 1003, 1004, 1020, 1022, 1023, 1044], "subplots_adjust": [6, 7, 14, 15, 40, 43, 45, 46, 51, 52, 55, 63, 65, 81, 83, 92, 93, 98, 99, 106, 115, 116, 133, 171, 200, 201, 216, 219, 230, 238, 247, 249, 250, 253, 257, 273, 275, 290, 298, 301, 304, 309, 319, 327, 336, 339, 1020], "bottom": [6, 8, 12, 14, 15, 35, 38, 40, 43, 45, 46, 52, 54, 63, 65, 92, 93, 124, 131, 136, 201, 212, 230, 247, 249, 250, 253, 259, 262, 273, 290, 307, 327, 329, 339, 381, 406, 408, 414, 586, 912, 982, 984, 988, 1009, 1020, 1023], "left": [6, 7, 12, 14, 15, 17, 25, 34, 35, 40, 43, 45, 46, 52, 56, 63, 65, 73, 76, 82, 83, 92, 93, 98, 99, 113, 116, 118, 119, 120, 123, 126, 133, 135, 156, 162, 166, 171, 174, 186, 194, 201, 202, 203, 205, 212, 214, 215, 218, 219, 230, 234, 238, 240, 241, 247, 249, 250, 253, 258, 259, 260, 261, 263, 271, 272, 274, 288, 290, 291, 298, 301, 304, 307, 321, 323, 327, 338, 339, 343, 361, 381, 383, 385, 405, 408, 411, 412, 414, 415, 416, 418, 445, 471, 481, 482, 483, 484, 492, 497, 548, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 586, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 634, 638, 642, 650, 654, 795, 796, 797, 800, 801, 804, 811, 873, 880, 908, 909, 910, 911, 912, 924, 937, 959, 962, 977, 980, 982, 984, 986, 988, 990, 995, 1000, 1002, 1004, 1019, 1020, 1022, 1023, 1038, 1040, 1045], "01": [6, 8, 10, 13, 14, 16, 17, 29, 36, 41, 45, 52, 63, 69, 77, 96, 98, 99, 116, 124, 125, 127, 130, 131, 137, 150, 158, 162, 163, 171, 172, 182, 185, 192, 208, 213, 214, 219, 220, 222, 223, 230, 234, 235, 236, 240, 241, 245, 249, 253, 254, 256, 261, 262, 263, 267, 269, 270, 271, 278, 284, 290, 299, 302, 304, 305, 307, 315, 318, 324, 332, 341, 350, 353, 359, 360, 362, 376, 378, 386, 408, 417, 448, 470, 514, 531, 538, 542, 594, 595, 597, 641, 645, 653, 657, 677, 695, 714, 797, 811, 894, 984, 988, 992, 998, 1000, 1002, 1010, 1020, 1024], "right": [6, 7, 11, 12, 14, 15, 17, 32, 35, 40, 43, 44, 45, 46, 52, 54, 61, 63, 65, 80, 81, 83, 91, 92, 93, 98, 99, 101, 104, 106, 113, 115, 116, 117, 126, 127, 128, 135, 146, 153, 156, 166, 174, 191, 202, 203, 204, 205, 207, 208, 211, 212, 230, 233, 234, 237, 247, 249, 250, 252, 253, 257, 258, 262, 265, 269, 272, 273, 275, 290, 298, 301, 304, 307, 309, 312, 323, 327, 339, 341, 343, 347, 349, 352, 358, 361, 363, 370, 381, 393, 396, 405, 408, 411, 413, 414, 415, 418, 463, 481, 482, 483, 484, 533, 540, 543, 556, 557, 558, 559, 560, 561, 563, 564, 565, 586, 611, 612, 613, 614, 615, 618, 619, 620, 621, 622, 623, 624, 626, 634, 675, 677, 865, 908, 909, 910, 911, 912, 924, 937, 977, 980, 982, 984, 986, 988, 990, 991, 995, 1000, 1002, 1003, 1004, 1008, 1009, 1013, 1016, 1020, 1022, 1023, 1033, 1039, 1045, 1047], "99": [6, 13, 26, 33, 45, 52, 63, 96, 219, 230, 234, 240, 247, 249, 260, 263, 307, 327, 368, 374, 378, 385, 412, 415, 416, 491, 646, 660, 670, 786, 847, 983, 988, 998, 1002, 1020, 1026, 1033], "hspace": [6, 14, 15, 45, 46, 63, 96, 219, 230, 247, 249, 250, 253, 290, 319, 327, 336, 1020], "grai": [6, 14, 47, 48, 51, 52, 54, 96, 99, 128, 150, 199, 201, 219, 234, 238, 239, 269, 303, 378, 413, 492, 493, 501, 520, 1020, 1023, 1042], "ytick": [6, 11, 31, 35, 41, 45, 47, 51, 52, 53, 59, 60, 63, 83, 86, 99, 124, 127, 140, 146, 155, 156, 157, 161, 184, 191, 197, 214, 230, 238, 248, 249, 250, 253, 257, 276, 289, 298, 304, 326, 339, 344, 345, 352, 1020], "portion": [6, 8, 82, 150, 271, 367, 376, 378, 381, 387, 395, 786, 821, 838, 977, 987, 991, 1020, 1024], "pred_nam": [6, 1020], "rsplit": [6, 18, 263, 1020], "true_nam": [6, 1020], "ntrue": [6, 326, 327, 1020], "prediction_titl": [6, 1020], "signif": [6, 980, 1020], "eigenface_titl": [6, 1020], "convolut": [6, 161, 1020], "network": [6, 240, 303, 367, 368, 369, 370, 375, 376, 393, 395, 396, 402, 408, 413, 415, 420, 495, 532, 534, 566, 567, 695, 739, 857, 858, 984, 986, 988, 1002, 1004, 1008, 1011, 1020, 1025, 1026, 1031, 1045], "famili": [6, 367, 369, 395, 408, 411, 413, 416, 417, 591, 594, 595, 597, 598, 599, 605, 857, 858, 876, 888, 984, 998, 1002, 1020, 1022, 1035, 1045], "outsid": [6, 9, 20, 122, 202, 203, 233, 244, 393, 416, 445, 634, 879, 994, 1020, 1039], "scope": [6, 20, 367, 369, 381, 393, 416, 1008, 1009, 1020], "scikit": [6, 8, 10, 12, 13, 15, 17, 18, 32, 33, 51, 56, 71, 72, 111, 117, 118, 119, 120, 123, 130, 133, 147, 149, 150, 162, 165, 166, 168, 171, 172, 173, 174, 177, 182, 189, 190, 201, 202, 203, 219, 229, 232, 240, 241, 242, 243, 244, 255, 259, 267, 271, 274, 278, 280, 283, 285, 287, 290, 292, 316, 324, 343, 352, 353, 357, 358, 363, 368, 369, 370, 373, 375, 376, 377, 378, 380, 381, 384, 387, 388, 389, 390, 394, 395, 399, 401, 402, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 422, 423, 425, 426, 427, 430, 431, 432, 437, 442, 445, 446, 449, 456, 458, 463, 464, 466, 467, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 511, 514, 520, 523, 537, 560, 561, 563, 564, 566, 575, 580, 581, 582, 584, 585, 588, 598, 601, 610, 625, 627, 629, 631, 633, 637, 639, 645, 647, 651, 657, 668, 679, 687, 699, 700, 701, 716, 740, 746, 776, 777, 778, 786, 793, 797, 798, 799, 800, 801, 802, 803, 811, 814, 815, 816, 817, 818, 819, 822, 826, 828, 829, 842, 844, 860, 861, 863, 865, 867, 870, 872, 873, 874, 875, 879, 880, 881, 884, 897, 898, 900, 905, 908, 909, 931, 932, 954, 955, 956, 977, 978, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 998, 1001, 1002, 1003, 1004, 1007, 1010, 1012, 1018, 1019, 1020, 1022, 1023, 1026, 1028, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "librari": [6, 262, 320, 322, 359, 363, 373, 375, 376, 379, 380, 381, 382, 387, 393, 394, 395, 398, 404, 657, 900, 901, 902, 903, 905, 906, 956, 984, 988, 1003, 1004, 1008, 1009, 1013, 1020, 1024, 1029, 1034, 1038, 1039, 1040, 1041, 1042, 1044], "reader": [6, 43, 320, 369, 381, 1020], "pytorch": [6, 393, 1008, 1009, 1020, 1047], "tensorflow": [6, 393, 1008, 1020], "implement": [6, 7, 13, 14, 17, 18, 47, 57, 82, 96, 119, 166, 174, 177, 185, 186, 190, 215, 219, 222, 230, 236, 237, 260, 262, 271, 280, 283, 285, 287, 290, 310, 317, 318, 319, 320, 321, 323, 352, 354, 367, 368, 369, 375, 376, 378, 379, 381, 382, 383, 386, 387, 389, 390, 395, 398, 399, 402, 404, 405, 407, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 436, 441, 442, 443, 445, 446, 447, 448, 449, 474, 492, 495, 507, 531, 532, 533, 534, 535, 537, 540, 541, 542, 552, 553, 554, 556, 557, 560, 561, 562, 566, 571, 581, 587, 588, 590, 592, 596, 600, 609, 610, 631, 632, 639, 640, 644, 645, 652, 656, 657, 658, 662, 663, 667, 670, 671, 673, 674, 675, 676, 677, 683, 684, 685, 686, 687, 690, 691, 694, 706, 710, 719, 733, 736, 740, 776, 780, 786, 787, 795, 797, 800, 801, 803, 811, 815, 816, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 832, 833, 835, 836, 837, 838, 839, 842, 843, 845, 848, 850, 851, 856, 857, 858, 860, 882, 890, 891, 897, 900, 901, 902, 903, 904, 905, 906, 936, 937, 945, 948, 953, 956, 959, 977, 978, 980, 982, 984, 985, 986, 987, 989, 990, 992, 993, 994, 998, 1000, 1001, 1004, 1005, 1006, 1008, 1009, 1011, 1013, 1015, 1020, 1021, 1022, 1023, 1024, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "602": [6, 16, 1010], "plot_face_recognit": [6, 16, 1010], "quantiz": [6, 37, 47, 59, 69, 99, 168, 375, 376, 408, 442, 446, 448, 505, 777, 865, 962, 998, 1010], "k": [6, 11, 12, 15, 17, 18, 20, 25, 27, 31, 32, 37, 38, 39, 41, 43, 47, 50, 51, 54, 56, 57, 61, 64, 66, 69, 75, 76, 81, 91, 92, 93, 96, 99, 102, 103, 104, 113, 115, 122, 126, 129, 131, 132, 134, 135, 139, 142, 146, 147, 150, 154, 156, 157, 161, 162, 166, 168, 171, 172, 173, 174, 181, 183, 184, 186, 195, 198, 203, 205, 213, 215, 234, 236, 238, 239, 240, 247, 250, 258, 262, 265, 266, 271, 272, 275, 285, 287, 290, 291, 292, 293, 294, 296, 297, 298, 308, 309, 310, 311, 314, 317, 321, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 351, 352, 354, 355, 361, 363, 368, 375, 376, 378, 381, 389, 390, 395, 399, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 439, 442, 445, 446, 447, 448, 449, 450, 451, 452, 458, 459, 461, 468, 471, 487, 501, 503, 505, 511, 522, 530, 536, 540, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 580, 588, 589, 590, 591, 593, 594, 595, 597, 598, 599, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 630, 638, 639, 647, 649, 650, 652, 653, 654, 655, 657, 658, 662, 663, 664, 665, 666, 668, 678, 679, 681, 682, 683, 684, 685, 687, 690, 694, 695, 703, 704, 707, 716, 724, 735, 741, 754, 756, 757, 759, 764, 767, 772, 773, 774, 775, 777, 791, 792, 793, 795, 796, 798, 802, 804, 805, 806, 809, 812, 813, 815, 816, 818, 824, 835, 840, 841, 842, 843, 844, 845, 846, 848, 850, 851, 852, 853, 854, 861, 865, 866, 867, 871, 872, 873, 875, 876, 880, 888, 893, 907, 915, 923, 932, 937, 962, 977, 978, 980, 981, 982, 984, 985, 986, 987, 990, 992, 993, 994, 996, 1001, 1002, 1003, 1004, 1008, 1010, 1012, 1019, 1025, 1026, 1031, 1032, 1033, 1034, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046], "spars": [6, 7, 8, 12, 14, 18, 20, 31, 35, 40, 41, 55, 56, 58, 71, 78, 79, 80, 82, 84, 95, 97, 108, 118, 131, 168, 170, 179, 180, 186, 189, 190, 193, 195, 196, 200, 217, 220, 234, 236, 237, 256, 263, 269, 285, 302, 304, 318, 322, 330, 351, 354, 355, 361, 367, 373, 375, 376, 377, 381, 383, 384, 385, 386, 393, 394, 395, 408, 409, 415, 416, 418, 419, 423, 430, 437, 439, 441, 442, 443, 445, 446, 448, 449, 450, 451, 452, 456, 458, 459, 461, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 486, 487, 488, 495, 496, 502, 507, 522, 523, 525, 526, 527, 528, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 580, 581, 584, 585, 587, 588, 589, 590, 592, 593, 602, 603, 604, 605, 606, 607, 608, 628, 629, 630, 632, 637, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 694, 695, 696, 697, 699, 700, 701, 702, 711, 712, 713, 727, 728, 729, 732, 736, 737, 738, 752, 753, 758, 759, 761, 762, 764, 765, 766, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 785, 790, 791, 794, 797, 800, 801, 811, 818, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 842, 843, 844, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 867, 869, 870, 871, 872, 873, 875, 877, 878, 879, 880, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 916, 918, 919, 920, 921, 926, 934, 937, 938, 941, 942, 943, 951, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 974, 978, 981, 984, 985, 986, 988, 989, 991, 1001, 1003, 1004, 1009, 1010, 1011, 1022, 1023, 1024, 1025, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "demonstr": [7, 13, 20, 21, 22, 26, 33, 37, 41, 44, 56, 62, 69, 71, 73, 90, 113, 117, 127, 147, 148, 161, 162, 168, 174, 202, 203, 237, 243, 244, 249, 253, 255, 258, 265, 268, 271, 276, 278, 287, 290, 297, 306, 308, 309, 311, 314, 315, 319, 325, 327, 328, 331, 332, 337, 343, 352, 353, 354, 363, 369, 376, 377, 381, 386, 393, 399, 404, 408, 412, 415, 446, 501, 511, 519, 696, 702, 712, 740, 796, 797, 865, 896, 908, 977, 978, 982, 988, 989, 990, 991, 998, 1001, 1004, 1007, 1010], "diabet": [7, 127, 136, 138, 140, 143, 149, 150, 166, 168, 188, 189, 190, 197, 198, 257, 258, 275, 374, 415, 500, 651, 652, 797, 802, 821, 822, 823, 996, 1010, 1015, 1019, 1026], "regress": [7, 10, 14, 26, 28, 31, 55, 70, 72, 73, 77, 81, 82, 85, 88, 91, 97, 98, 99, 105, 107, 112, 113, 116, 118, 119, 120, 121, 124, 125, 128, 132, 133, 137, 141, 150, 152, 154, 162, 163, 165, 166, 168, 170, 171, 172, 173, 174, 179, 183, 185, 186, 187, 188, 191, 195, 196, 198, 202, 204, 205, 206, 207, 210, 212, 217, 220, 225, 229, 231, 239, 240, 241, 242, 244, 245, 258, 270, 273, 274, 275, 276, 283, 286, 288, 293, 296, 299, 302, 303, 304, 307, 308, 311, 312, 314, 319, 320, 321, 322, 334, 335, 336, 347, 348, 350, 352, 356, 357, 361, 362, 368, 369, 370, 373, 374, 376, 378, 381, 383, 386, 389, 390, 393, 394, 395, 403, 406, 410, 411, 412, 413, 417, 431, 436, 463, 464, 473, 483, 488, 489, 491, 495, 500, 501, 503, 504, 511, 515, 516, 517, 523, 527, 530, 534, 536, 538, 540, 541, 542, 544, 545, 547, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 563, 564, 565, 566, 569, 570, 591, 592, 593, 594, 595, 596, 597, 598, 599, 603, 604, 605, 608, 609, 610, 613, 614, 621, 622, 624, 630, 631, 632, 633, 634, 636, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 693, 700, 705, 720, 721, 722, 726, 739, 740, 743, 744, 745, 746, 747, 748, 749, 750, 751, 783, 788, 789, 797, 800, 801, 803, 811, 819, 823, 824, 826, 827, 831, 833, 834, 842, 843, 848, 850, 851, 857, 858, 860, 861, 864, 865, 867, 873, 874, 875, 877, 880, 881, 884, 889, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 914, 920, 923, 925, 941, 977, 978, 980, 983, 985, 995, 996, 998, 999, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1018, 1021, 1026, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "patient": [7, 136, 150, 166, 378, 389, 412, 984, 1022], "diseas": [7, 136, 150, 166, 265, 378, 711, 988, 1022], "newsgroup": [7, 15, 20, 234, 263, 330, 353, 354, 374, 405, 416, 487, 488, 1016, 1026], "post": [7, 15, 20, 71, 168, 321, 352, 353, 354, 356, 361, 362, 367, 376, 380, 381, 385, 386, 394, 408, 447, 487, 488, 499, 711, 826, 908, 988, 1004, 1010, 1013, 1024, 1042], "about": [7, 11, 30, 45, 54, 58, 63, 71, 87, 90, 122, 147, 162, 168, 170, 171, 174, 205, 218, 230, 237, 259, 260, 262, 264, 269, 283, 290, 312, 317, 319, 320, 321, 322, 323, 327, 352, 354, 361, 363, 367, 368, 370, 374, 376, 380, 381, 385, 386, 387, 394, 395, 396, 402, 407, 412, 413, 416, 418, 437, 491, 493, 494, 495, 496, 499, 500, 501, 503, 504, 509, 514, 560, 561, 592, 593, 606, 607, 613, 632, 639, 675, 677, 741, 797, 803, 811, 819, 829, 921, 978, 984, 985, 987, 989, 991, 994, 995, 998, 999, 1001, 1003, 1004, 1006, 1008, 1013, 1015, 1016, 1022, 1024, 1036, 1037, 1047], "sgdclassifi": [7, 8, 208, 209, 210, 211, 212, 213, 214, 235, 270, 330, 341, 352, 363, 367, 369, 387, 395, 406, 407, 416, 637, 639, 640, 641, 645, 657, 665, 667, 900, 905, 980, 984, 989, 1002, 1003, 1024, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1046, 1047], "stochast": [7, 59, 124, 125, 128, 141, 168, 177, 179, 189, 190, 208, 220, 224, 226, 230, 235, 291, 293, 294, 300, 303, 305, 320, 337, 338, 408, 413, 415, 461, 487, 495, 501, 502, 503, 513, 521, 535, 543, 558, 559, 570, 603, 626, 630, 638, 657, 658, 667, 671, 673, 675, 676, 677, 678, 686, 687, 688, 689, 691, 826, 849, 856, 857, 858, 861, 870, 904, 936, 937, 962, 977, 991, 992, 994, 1010, 1011, 1025, 1026, 1031, 1032, 1035, 1036, 1038, 1040, 1042], "gradient": [7, 13, 47, 67, 72, 112, 113, 117, 118, 120, 121, 130, 133, 136, 137, 158, 159, 160, 168, 173, 174, 179, 181, 189, 190, 203, 220, 225, 230, 235, 261, 263, 265, 280, 291, 302, 307, 313, 337, 338, 395, 407, 408, 418, 451, 461, 465, 466, 487, 489, 495, 500, 502, 503, 514, 519, 552, 553, 558, 559, 560, 561, 563, 564, 570, 585, 609, 610, 611, 612, 613, 614, 615, 618, 619, 620, 621, 622, 623, 624, 630, 633, 634, 638, 647, 648, 657, 658, 667, 668, 671, 673, 675, 676, 677, 679, 686, 691, 693, 694, 739, 740, 746, 748, 797, 800, 801, 802, 823, 826, 856, 857, 858, 861, 873, 874, 904, 962, 985, 988, 991, 992, 993, 994, 1008, 1010, 1011, 1026, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1044, 1046, 1048], "descent": [7, 14, 124, 125, 168, 179, 186, 189, 220, 230, 235, 291, 320, 337, 338, 413, 415, 470, 471, 477, 487, 495, 502, 530, 536, 537, 538, 539, 541, 542, 544, 545, 546, 547, 570, 630, 638, 645, 646, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 667, 671, 673, 675, 676, 677, 680, 681, 682, 683, 686, 693, 826, 857, 858, 861, 900, 904, 962, 985, 992, 994, 1003, 1010, 1011, 1022, 1026, 1031, 1034, 1035, 1036, 1038, 1040, 1042, 1044, 1045, 1046], "nusvr": [7, 367, 906, 1003, 1033, 1039, 1041, 1042, 1043, 1045, 1046], "nu": [7, 9, 11, 162, 215, 230, 338, 367, 415, 418, 618, 676, 902, 903, 904, 994, 1002, 1003, 1042, 1046], "vector": [7, 8, 9, 10, 12, 15, 17, 20, 21, 27, 28, 31, 33, 37, 41, 49, 69, 73, 90, 96, 98, 99, 146, 153, 161, 182, 188, 205, 206, 213, 217, 235, 236, 243, 260, 262, 263, 267, 291, 304, 307, 331, 335, 336, 339, 340, 341, 342, 343, 344, 347, 349, 350, 353, 367, 369, 370, 376, 386, 387, 390, 393, 395, 405, 406, 408, 410, 411, 412, 413, 415, 418, 419, 420, 436, 442, 443, 444, 446, 448, 449, 450, 452, 463, 464, 466, 467, 481, 482, 483, 484, 486, 488, 496, 508, 511, 520, 523, 530, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 548, 549, 550, 551, 566, 567, 568, 569, 580, 581, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 616, 617, 618, 619, 621, 622, 624, 630, 637, 639, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 690, 691, 692, 694, 698, 718, 733, 761, 766, 767, 768, 769, 771, 772, 773, 775, 776, 797, 800, 801, 811, 824, 827, 828, 829, 835, 836, 837, 838, 839, 842, 843, 844, 846, 847, 848, 850, 851, 852, 857, 858, 865, 867, 872, 880, 884, 887, 898, 900, 901, 902, 903, 904, 905, 906, 907, 920, 934, 936, 937, 951, 977, 980, 981, 982, 984, 985, 986, 988, 989, 990, 992, 993, 994, 998, 1002, 1004, 1010, 1011, 1015, 1018, 1021, 1024, 1026, 1028, 1031, 1032, 1033, 1034, 1035, 1037, 1039, 1040, 1042, 1044], "gradientboostingregressor": [7, 126, 127, 133, 136, 367, 386, 393, 553, 561, 631, 632, 984, 988, 989, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048], "forward": [7, 113, 150, 237, 319, 367, 381, 399, 417, 507, 508, 538, 542, 552, 558, 559, 584, 585, 601, 667, 684, 685, 860, 864, 984, 1009, 1043], "wise": [7, 27, 49, 161, 202, 230, 272, 307, 353, 367, 395, 406, 408, 412, 413, 417, 457, 530, 533, 536, 540, 544, 545, 548, 549, 552, 554, 555, 558, 559, 591, 594, 595, 597, 598, 599, 605, 639, 651, 699, 752, 828, 877, 890, 891, 894, 961, 963, 964, 965, 966, 969, 980, 982, 984, 988, 989, 1002, 1009, 1031, 1036, 1039, 1040, 1041], "fashion": [7, 118, 124, 209, 271, 368, 395, 405, 406, 408, 413, 415, 552, 556, 557, 558, 559, 563, 564, 565, 601, 626, 826, 849, 864, 867, 873, 884, 908, 909, 910, 911, 959, 978, 984, 988, 998, 1040], "notic": [7, 13, 26, 27, 35, 54, 58, 81, 116, 118, 119, 126, 149, 180, 185, 230, 243, 259, 260, 262, 263, 265, 271, 272, 285, 312, 343, 352, 353, 354, 363, 386, 396, 412, 495, 540, 562, 977, 987, 988, 994, 1024, 1028, 1044], "faster": [7, 20, 40, 65, 74, 96, 118, 119, 123, 126, 150, 172, 177, 187, 201, 203, 216, 217, 219, 236, 285, 287, 303, 318, 320, 321, 352, 353, 354, 367, 375, 381, 389, 390, 395, 407, 408, 413, 417, 418, 420, 442, 446, 448, 450, 451, 452, 461, 507, 530, 531, 532, 535, 536, 537, 538, 539, 541, 542, 544, 545, 546, 547, 552, 558, 559, 560, 561, 642, 645, 646, 651, 652, 657, 658, 659, 660, 661, 662, 671, 673, 683, 686, 690, 694, 724, 754, 776, 777, 778, 840, 841, 845, 857, 858, 875, 877, 879, 889, 893, 937, 977, 981, 984, 989, 991, 992, 995, 1000, 1002, 1003, 1004, 1008, 1012, 1020, 1024, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "10_000": [7, 26, 76, 118, 126, 170, 177, 234, 265, 285, 558, 559, 563, 564, 877], "vari": [7, 13, 32, 35, 45, 47, 56, 63, 66, 76, 93, 119, 120, 122, 131, 142, 149, 155, 157, 168, 171, 172, 174, 190, 192, 195, 199, 208, 227, 235, 240, 252, 258, 262, 265, 272, 300, 305, 307, 309, 310, 312, 323, 325, 331, 332, 339, 342, 344, 348, 349, 363, 367, 369, 376, 395, 440, 444, 445, 499, 507, 513, 514, 521, 558, 559, 563, 564, 645, 646, 649, 650, 651, 652, 653, 654, 659, 660, 661, 662, 680, 683, 702, 761, 816, 819, 824, 826, 827, 857, 861, 865, 880, 897, 905, 908, 909, 962, 980, 983, 984, 988, 991, 992, 1001, 1004, 1010, 1013, 1038, 1039, 1047], "relev": [7, 9, 20, 78, 82, 84, 104, 148, 150, 168, 180, 195, 204, 262, 263, 269, 363, 367, 369, 376, 378, 380, 381, 383, 385, 386, 387, 395, 396, 399, 410, 411, 417, 418, 436, 442, 443, 446, 448, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 532, 533, 537, 540, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 587, 589, 590, 593, 609, 610, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 689, 724, 738, 754, 798, 799, 800, 801, 804, 806, 815, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 845, 847, 850, 851, 857, 858, 860, 863, 865, 866, 867, 872, 878, 879, 880, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 988, 989, 994, 1005, 1009, 1010, 1034, 1039, 1043, 1045], "next": [7, 26, 61, 81, 122, 123, 127, 136, 160, 170, 174, 194, 198, 201, 231, 239, 243, 244, 249, 257, 268, 283, 312, 313, 314, 319, 327, 352, 357, 361, 363, 370, 379, 381, 383, 385, 405, 408, 409, 412, 415, 507, 508, 609, 633, 691, 697, 699, 701, 779, 795, 796, 826, 954, 977, 981, 987, 988, 998, 1013, 1028, 1031, 1044, 1045], "ham": [7, 449, 456, 580, 698, 702, 708, 732, 739, 776, 777, 778, 794, 991], "loss": [7, 13, 25, 26, 27, 28, 80, 106, 119, 124, 125, 126, 127, 128, 153, 154, 168, 179, 183, 191, 194, 203, 205, 206, 208, 209, 213, 219, 220, 236, 270, 302, 303, 312, 320, 330, 336, 337, 341, 343, 347, 352, 393, 395, 406, 407, 413, 418, 463, 464, 495, 507, 508, 531, 537, 538, 539, 542, 546, 551, 552, 553, 557, 558, 559, 560, 561, 564, 642, 645, 648, 657, 658, 665, 666, 667, 668, 669, 670, 671, 675, 676, 677, 678, 702, 705, 708, 721, 732, 733, 738, 739, 740, 743, 744, 745, 746, 747, 748, 749, 750, 751, 788, 789, 794, 797, 800, 801, 811, 822, 823, 826, 857, 858, 860, 861, 864, 865, 873, 874, 875, 880, 900, 901, 906, 907, 909, 911, 937, 941, 981, 984, 992, 996, 1001, 1002, 1003, 1004, 1010, 1024, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "eustach": [7, 8, 10, 1013, 1033, 1034], "diemert": [7, 8, 10, 1013, 1033, 1034], "maria": [7, 127, 133, 150, 166, 408, 1042, 1043, 1044, 1045, 1046], "telenczuk": [7, 127, 133, 150, 166, 1040, 1043, 1044, 1046], "github": [7, 8, 12, 27, 72, 73, 118, 120, 121, 127, 129, 130, 133, 136, 147, 158, 166, 171, 172, 173, 182, 231, 232, 233, 237, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 285, 304, 313, 318, 319, 321, 322, 328, 361, 375, 379, 380, 384, 385, 386, 387, 389, 393, 395, 396, 398, 402, 404, 451, 461, 507, 535, 690, 691, 694, 991, 1007, 1008, 1012, 1013, 1024, 1036, 1041, 1048], "com": [7, 8, 11, 12, 15, 17, 21, 22, 25, 43, 49, 58, 66, 71, 72, 111, 113, 114, 115, 116, 117, 118, 124, 125, 127, 128, 132, 133, 153, 156, 158, 160, 162, 166, 181, 201, 203, 208, 218, 219, 223, 225, 227, 233, 247, 249, 250, 263, 266, 285, 307, 308, 311, 312, 352, 353, 375, 376, 379, 381, 385, 386, 387, 389, 393, 398, 404, 408, 441, 451, 461, 507, 533, 535, 540, 670, 690, 694, 704, 991, 1006, 1012, 1036, 1038, 1041, 1048], "maikia": [7, 127, 133, 166, 1039, 1040, 1042, 1043], "lemaitre58": [7, 133, 153, 158, 160, 162, 223, 307], "gmail": [7, 11, 15, 17, 25, 43, 49, 58, 66, 71, 72, 111, 113, 114, 115, 116, 117, 118, 124, 125, 127, 128, 132, 133, 153, 156, 158, 160, 162, 181, 201, 203, 218, 219, 223, 225, 233, 247, 249, 250, 263, 266, 307, 312, 352, 353], "licens": [7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 21, 22, 25, 26, 27, 28, 31, 32, 33, 38, 40, 41, 43, 46, 47, 48, 49, 52, 53, 54, 55, 58, 62, 66, 67, 68, 71, 72, 74, 75, 76, 83, 90, 91, 96, 98, 100, 101, 102, 103, 104, 107, 111, 113, 114, 115, 116, 117, 118, 119, 124, 125, 127, 128, 132, 133, 150, 153, 154, 156, 157, 158, 159, 160, 162, 166, 177, 183, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 206, 208, 209, 217, 218, 219, 223, 224, 225, 227, 230, 233, 235, 236, 238, 240, 247, 249, 263, 266, 268, 275, 283, 285, 287, 293, 294, 295, 297, 298, 301, 304, 307, 308, 309, 310, 311, 312, 326, 327, 328, 329, 331, 343, 344, 347, 348, 352, 353, 354, 375, 395, 402, 1004, 1013], "hamming_loss": [7, 702, 794, 988, 1033, 1037, 1040], "mean_squared_error": [7, 126, 127, 197, 201, 203, 205, 207, 219, 363, 415, 750, 988, 1032, 1034, 1041, 1042, 1048], "seed": [7, 11, 27, 35, 40, 41, 45, 46, 53, 55, 58, 60, 61, 65, 66, 72, 79, 80, 81, 93, 97, 102, 103, 116, 122, 142, 145, 173, 191, 196, 199, 204, 207, 210, 214, 218, 225, 248, 250, 251, 252, 253, 265, 268, 276, 290, 291, 292, 297, 344, 345, 349, 353, 363, 368, 383, 390, 393, 395, 408, 412, 413, 442, 446, 447, 449, 451, 456, 458, 459, 460, 461, 470, 471, 472, 535, 543, 552, 553, 554, 555, 558, 559, 626, 645, 646, 651, 652, 659, 660, 661, 662, 676, 688, 690, 692, 694, 795, 796, 801, 831, 834, 849, 903, 923, 936, 937, 953, 977, 978, 983, 985, 1022, 1035, 1036, 1040, 1041, 1047], "fetch_20newsgroups_vector": [7, 216, 234, 376, 1031, 1041, 1043, 1048], "generate_data": [7, 34], "load_diabet": [7, 127, 136, 139, 150, 166, 186, 188, 189, 190, 197, 198, 241, 258, 322, 415, 557, 561, 567, 672, 700, 821, 822, 823, 909, 911, 996, 1019, 1022, 1037, 1042, 1045], "elif": [7, 8, 17, 181, 203, 238, 249, 290, 876], "subset": [7, 20, 21, 27, 28, 33, 71, 72, 81, 82, 120, 122, 123, 139, 147, 150, 172, 174, 190, 202, 216, 217, 218, 219, 233, 235, 239, 240, 260, 263, 265, 271, 272, 274, 280, 312, 313, 319, 326, 330, 352, 353, 354, 363, 376, 381, 389, 393, 395, 405, 406, 408, 409, 412, 415, 416, 418, 425, 436, 448, 463, 465, 466, 468, 487, 488, 491, 492, 496, 507, 548, 549, 550, 552, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 568, 601, 609, 628, 638, 639, 640, 641, 650, 654, 657, 665, 666, 667, 670, 673, 674, 675, 676, 677, 678, 696, 702, 703, 712, 715, 717, 729, 732, 753, 755, 791, 794, 799, 824, 826, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 847, 850, 857, 866, 895, 896, 900, 902, 905, 908, 910, 916, 977, 984, 988, 989, 999, 1001, 1003, 1004, 1024, 1034, 1039, 1040, 1042, 1044], "regression_data": 7, "classification_data": 7, "calcul": [7, 25, 27, 28, 34, 47, 60, 81, 111, 112, 113, 117, 134, 137, 166, 168, 174, 197, 205, 206, 218, 235, 237, 261, 262, 268, 272, 276, 283, 337, 343, 344, 363, 367, 388, 395, 405, 406, 408, 412, 413, 415, 419, 437, 440, 442, 443, 444, 445, 447, 449, 450, 452, 454, 455, 470, 471, 477, 480, 535, 546, 552, 563, 568, 596, 610, 619, 631, 632, 633, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 671, 672, 673, 674, 678, 680, 683, 687, 689, 691, 693, 706, 715, 727, 728, 733, 734, 736, 742, 748, 749, 752, 762, 767, 769, 770, 771, 772, 776, 779, 781, 782, 785, 786, 787, 790, 791, 793, 804, 806, 821, 825, 838, 840, 841, 878, 879, 880, 886, 890, 900, 901, 926, 939, 980, 982, 984, 985, 986, 988, 990, 991, 992, 996, 998, 1001, 1003, 1010, 1019, 1022, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "given": [7, 10, 11, 13, 28, 31, 38, 50, 59, 61, 79, 86, 97, 101, 119, 129, 131, 133, 153, 160, 171, 172, 185, 201, 202, 205, 219, 223, 230, 234, 235, 237, 239, 240, 241, 258, 262, 263, 264, 265, 271, 288, 291, 292, 293, 309, 313, 320, 352, 353, 354, 360, 367, 369, 376, 380, 381, 383, 385, 387, 389, 390, 393, 395, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 425, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 455, 457, 458, 459, 460, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 480, 481, 482, 483, 486, 495, 500, 502, 504, 522, 532, 533, 535, 537, 538, 539, 542, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 587, 588, 589, 590, 592, 593, 600, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 630, 631, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 686, 687, 689, 690, 696, 697, 698, 699, 700, 701, 703, 704, 705, 711, 713, 716, 717, 719, 722, 724, 725, 732, 734, 735, 738, 750, 753, 754, 756, 757, 762, 772, 776, 779, 780, 782, 785, 786, 787, 792, 793, 795, 796, 797, 798, 799, 800, 801, 803, 804, 806, 809, 811, 815, 819, 821, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 886, 887, 889, 892, 893, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 915, 924, 925, 926, 944, 945, 946, 947, 972, 976, 977, 980, 982, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 998, 1001, 1002, 1003, 1004, 1013, 1015, 1019, 1020, 1022, 1023, 1024, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "round": [7, 9, 26, 86, 119, 165, 166, 208, 219, 262, 268, 309, 311, 352, 395, 449, 455, 456, 563, 564, 592, 593, 596, 626, 691, 712, 799, 809, 865, 897, 912, 914, 978, 992, 1004, 1033, 1035, 1037, 1039, 1040, 1042, 1044, 1045, 1047, 1048], "changing_param": 7, "collect": [7, 10, 12, 13, 17, 20, 26, 117, 129, 136, 150, 158, 166, 174, 189, 194, 225, 233, 265, 269, 353, 354, 367, 376, 378, 385, 398, 407, 412, 413, 415, 416, 445, 463, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 568, 569, 580, 582, 583, 587, 588, 589, 590, 631, 727, 728, 736, 781, 782, 785, 799, 803, 804, 806, 819, 946, 959, 962, 977, 983, 984, 988, 994, 999, 1009, 1013, 1019, 1024, 1033, 1043], "chang": [7, 17, 26, 27, 96, 100, 101, 116, 119, 127, 154, 165, 170, 171, 174, 202, 203, 205, 206, 241, 242, 257, 262, 269, 272, 311, 317, 318, 319, 320, 321, 322, 323, 327, 339, 343, 354, 361, 363, 367, 368, 369, 376, 383, 384, 385, 386, 389, 393, 395, 399, 408, 412, 415, 416, 418, 420, 433, 436, 439, 442, 443, 446, 448, 451, 453, 458, 461, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 492, 493, 495, 503, 507, 508, 511, 512, 513, 521, 525, 526, 530, 532, 533, 534, 535, 536, 537, 538, 539, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 576, 577, 578, 579, 580, 581, 587, 588, 589, 590, 592, 593, 596, 601, 609, 610, 612, 613, 614, 616, 618, 619, 621, 622, 624, 626, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 686, 689, 691, 699, 703, 706, 711, 715, 716, 727, 728, 734, 735, 739, 753, 754, 755, 776, 782, 783, 785, 793, 795, 796, 797, 798, 799, 800, 801, 802, 804, 806, 811, 815, 816, 818, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 850, 851, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 872, 873, 879, 880, 881, 888, 889, 894, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 914, 918, 920, 921, 932, 937, 947, 954, 955, 956, 958, 977, 978, 979, 987, 988, 989, 991, 998, 1001, 1002, 1003, 1004, 1006, 1009, 1015, 1022, 1024, 1029, 1030], "affect": [7, 26, 81, 160, 170, 171, 205, 226, 240, 241, 265, 272, 312, 323, 363, 367, 368, 369, 377, 395, 397, 406, 408, 411, 412, 414, 416, 419, 421, 443, 449, 456, 472, 474, 478, 548, 549, 568, 698, 711, 786, 797, 800, 801, 802, 811, 815, 816, 840, 841, 842, 843, 844, 846, 848, 850, 851, 852, 880, 881, 891, 905, 987, 991, 1003, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "complexity_comput": [7, 10], "benchmark_influ": 7, "conf": [7, 28, 385, 406, 412, 835, 990, 1045], "prediction_tim": [7, 8], "prediction_pow": 7, "param_valu": 7, "changing_param_valu": 7, "tuned_param": 7, "postfit_hook": 7, "append": [7, 8, 9, 12, 13, 17, 18, 26, 34, 38, 41, 45, 51, 62, 72, 104, 116, 117, 119, 124, 126, 140, 166, 174, 194, 205, 206, 208, 209, 216, 219, 235, 236, 262, 265, 271, 272, 275, 301, 302, 313, 329, 339, 342, 352, 353, 354, 357, 361, 387, 395, 409, 416, 657, 658, 900, 901, 907, 927, 998, 1019], "start_tim": [7, 10, 20, 120, 121, 133, 153, 190, 223], "elapsed_tim": [7, 40, 68, 120, 121, 133, 218], "float": [7, 10, 12, 13, 17, 20, 42, 46, 47, 48, 49, 54, 61, 62, 66, 67, 68, 72, 99, 103, 142, 161, 171, 187, 191, 225, 261, 262, 266, 270, 347, 354, 367, 375, 376, 381, 390, 395, 408, 409, 416, 417, 419, 420, 421, 425, 427, 431, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 453, 454, 455, 456, 457, 458, 460, 461, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 486, 491, 492, 493, 495, 497, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 523, 524, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 582, 583, 587, 590, 591, 592, 593, 594, 595, 596, 597, 601, 602, 609, 610, 612, 613, 614, 615, 616, 618, 619, 621, 622, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 757, 764, 767, 773, 774, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 803, 811, 814, 817, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 863, 866, 867, 873, 874, 876, 878, 880, 881, 882, 883, 892, 893, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 918, 920, 921, 924, 934, 935, 951, 963, 969, 974, 978, 988, 989, 991, 992, 998, 1003, 1004, 1031, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047], "pred_scor": 7, "prediction_performance_comput": 7, "4f": [7, 8, 20, 116, 125, 127, 216, 217, 219, 312], "prediction_performance_label": 7, "necessari": [7, 14, 117, 185, 201, 206, 247, 262, 263, 269, 287, 343, 359, 367, 376, 379, 380, 381, 382, 383, 384, 385, 389, 393, 408, 410, 415, 451, 461, 487, 488, 490, 491, 492, 493, 494, 496, 533, 643, 644, 645, 651, 655, 656, 659, 660, 661, 662, 663, 664, 670, 672, 674, 675, 690, 694, 793, 863, 872, 883, 887, 893, 977, 980, 984, 987, 990, 998, 1004, 1024, 1031, 1039], "defin": [7, 12, 35, 54, 56, 58, 67, 71, 72, 74, 87, 96, 101, 111, 113, 114, 133, 150, 153, 160, 161, 162, 172, 173, 174, 180, 202, 209, 218, 219, 230, 234, 237, 241, 243, 247, 252, 262, 263, 265, 269, 271, 272, 273, 274, 280, 285, 304, 307, 318, 339, 343, 347, 352, 353, 367, 377, 380, 381, 382, 383, 387, 388, 390, 393, 394, 395, 402, 403, 404, 405, 407, 408, 409, 410, 412, 413, 414, 415, 416, 418, 424, 429, 431, 432, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 458, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 488, 518, 519, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 621, 622, 626, 627, 628, 629, 631, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 695, 696, 698, 707, 709, 715, 720, 721, 722, 723, 726, 729, 736, 739, 743, 744, 746, 748, 749, 751, 752, 755, 758, 764, 779, 783, 788, 789, 790, 791, 795, 796, 797, 800, 801, 803, 811, 819, 823, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 860, 863, 864, 865, 866, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 887, 892, 893, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 924, 926, 929, 935, 946, 948, 972, 977, 978, 984, 985, 986, 987, 989, 990, 991, 993, 994, 995, 996, 998, 1000, 1002, 1003, 1004, 1009, 1020, 1023, 1026, 1028, 1033, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1048], "complexity_label": [7, 10], "type": [7, 17, 54, 55, 66, 70, 71, 77, 82, 91, 93, 106, 122, 123, 125, 158, 166, 168, 170, 171, 172, 177, 185, 201, 203, 232, 237, 242, 244, 246, 248, 249, 252, 253, 254, 257, 263, 268, 269, 271, 272, 273, 280, 295, 313, 329, 343, 352, 354, 361, 363, 368, 370, 374, 375, 376, 378, 379, 381, 382, 384, 385, 386, 387, 393, 394, 398, 402, 404, 405, 409, 416, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 495, 507, 508, 514, 566, 571, 580, 581, 584, 585, 587, 588, 590, 599, 603, 616, 626, 628, 629, 637, 655, 657, 671, 673, 678, 686, 688, 691, 692, 698, 700, 706, 713, 715, 727, 728, 736, 739, 781, 782, 785, 786, 795, 796, 797, 803, 811, 819, 824, 826, 827, 842, 843, 844, 846, 847, 848, 850, 851, 852, 853, 854, 860, 861, 862, 865, 867, 873, 874, 880, 881, 898, 902, 903, 904, 905, 906, 916, 918, 920, 921, 924, 928, 929, 951, 952, 959, 962, 975, 978, 980, 985, 987, 988, 989, 990, 991, 992, 998, 1000, 1004, 1010, 1012, 1013, 1017, 1022, 1023, 1024, 1031, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "_count_nonzero_coeffici": 7, "coef_": [7, 10, 14, 55, 86, 146, 147, 150, 170, 171, 180, 183, 185, 186, 187, 191, 192, 193, 194, 195, 196, 197, 200, 204, 205, 206, 210, 216, 217, 238, 244, 275, 314, 321, 337, 344, 348, 352, 363, 376, 383, 395, 411, 417, 464, 481, 482, 483, 548, 592, 593, 596, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 900, 901, 902, 903, 904, 905, 906, 972, 982, 984, 1002, 1003, 1022, 1031, 1033, 1036, 1038, 1043, 1045, 1048], "toarrai": [7, 330, 361, 409, 416, 565, 581, 587, 589, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 873, 890, 891, 959, 962, 978, 991, 998, 1048], "count_nonzero": [7, 10, 367], "configur": [7, 10, 72, 73, 172, 242, 244, 314, 352, 366, 379, 381, 383, 387, 389, 393, 395, 398, 399, 404, 407, 409, 416, 417, 432, 441, 442, 444, 446, 448, 451, 461, 463, 467, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 565, 566, 567, 568, 569, 580, 581, 582, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 625, 626, 627, 628, 629, 631, 634, 637, 638, 639, 640, 641, 687, 688, 689, 690, 691, 693, 694, 786, 844, 849, 852, 856, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 898, 954, 955, 956, 985, 988, 998, 1003, 1008, 1024, 1026, 1035, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1048], "penalti": [7, 10, 31, 83, 168, 179, 180, 185, 186, 190, 194, 201, 205, 216, 217, 220, 232, 270, 301, 320, 330, 344, 352, 367, 389, 393, 407, 410, 413, 417, 470, 471, 472, 473, 474, 475, 477, 501, 530, 536, 537, 538, 539, 541, 542, 546, 547, 596, 642, 645, 646, 647, 648, 651, 652, 653, 656, 657, 658, 659, 660, 661, 667, 668, 669, 671, 675, 677, 679, 680, 686, 811, 880, 900, 901, 903, 905, 906, 907, 977, 984, 987, 992, 998, 1002, 1003, 1010, 1022, 1024, 1033, 1036, 1038, 1040, 1041, 1043, 1044, 1046, 1047], "elasticnet": [7, 10, 182, 192, 270, 275, 367, 387, 393, 413, 646, 651, 656, 657, 658, 659, 660, 661, 662, 667, 675, 677, 680, 984, 1002, 1031, 1032, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1045], "001": [7, 14, 33, 45, 63, 150, 153, 171, 185, 210, 230, 234, 240, 245, 247, 260, 262, 264, 329, 353, 378, 387, 412, 535, 536, 538, 545, 626, 643, 644, 645, 646, 651, 652, 659, 660, 661, 662, 665, 666, 667, 675, 676, 677, 678, 680, 683, 688, 689, 692, 693, 795, 796, 857, 858, 895, 896, 902, 903, 904, 905, 906, 977, 1010, 1015, 1024], "modified_hub": [7, 675, 1002], "fit_intercept": [7, 180, 181, 187, 206, 215, 230, 270, 314, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 686, 900, 901, 907, 984, 1002, 1035, 1039, 1040, 1041, 1043, 1044, 1045], "tol": [7, 10, 18, 74, 96, 124, 150, 165, 181, 192, 194, 208, 209, 215, 217, 230, 241, 248, 250, 304, 320, 347, 352, 383, 387, 415, 420, 442, 446, 448, 451, 458, 461, 470, 471, 477, 481, 482, 483, 530, 531, 532, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 548, 549, 558, 559, 560, 561, 601, 626, 637, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 671, 673, 675, 676, 677, 678, 679, 681, 682, 684, 685, 686, 687, 688, 690, 692, 694, 795, 796, 811, 849, 857, 858, 895, 896, 900, 901, 902, 903, 904, 905, 906, 974, 984, 1002, 1003, 1020, 1024, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1048], "n_iter_no_chang": [7, 119, 124, 209, 320, 352, 386, 395, 415, 558, 559, 560, 561, 665, 666, 667, 675, 676, 677, 857, 858, 1002, 1039, 1042], "l1_ratio": [7, 10, 15, 185, 186, 192, 270, 275, 367, 393, 413, 537, 539, 546, 645, 646, 651, 657, 658, 659, 660, 661, 662, 667, 675, 677, 680, 984, 1002, 1032, 1034, 1036, 1043, 1045], "non_zero": [7, 12], "misclassif": [7, 113, 343, 794, 1002, 1003, 1004, 1032], "ratio": [7, 54, 67, 74, 105, 168, 234, 236, 250, 255, 278, 367, 381, 408, 410, 412, 415, 449, 455, 492, 493, 514, 540, 548, 549, 550, 630, 657, 709, 711, 715, 723, 728, 734, 737, 780, 781, 782, 785, 793, 823, 826, 846, 893, 982, 994, 1004, 1010, 1020, 1046, 1048], "sparsifi": [7, 185, 367, 657, 658, 665, 666, 667, 675, 676, 677, 900, 972, 1033], "05": [7, 8, 13, 15, 16, 23, 25, 27, 29, 38, 45, 53, 61, 63, 65, 66, 68, 69, 76, 86, 92, 101, 116, 119, 124, 126, 131, 139, 143, 146, 150, 158, 161, 162, 171, 175, 181, 182, 200, 203, 215, 220, 226, 227, 228, 230, 240, 247, 249, 250, 253, 254, 262, 263, 271, 273, 290, 293, 298, 307, 309, 317, 321, 327, 329, 332, 344, 350, 355, 378, 417, 449, 455, 530, 591, 594, 595, 597, 612, 613, 614, 618, 619, 621, 622, 624, 631, 632, 648, 689, 693, 754, 797, 849, 900, 901, 984, 992, 998, 1010], "n_support_vector": 7, "len": [7, 8, 10, 11, 17, 18, 20, 31, 32, 33, 38, 39, 42, 44, 45, 50, 51, 52, 56, 61, 62, 63, 64, 65, 66, 71, 73, 99, 102, 106, 107, 111, 116, 119, 122, 123, 124, 141, 142, 148, 149, 153, 161, 166, 172, 174, 200, 201, 219, 225, 230, 233, 234, 235, 237, 239, 240, 247, 249, 250, 257, 260, 262, 263, 270, 271, 273, 276, 283, 285, 292, 294, 295, 301, 308, 309, 310, 313, 323, 326, 327, 330, 339, 346, 349, 352, 353, 354, 361, 393, 395, 418, 436, 444, 449, 455, 463, 506, 514, 549, 568, 569, 581, 596, 631, 632, 780, 797, 811, 822, 826, 828, 830, 831, 881, 895, 896, 1022, 1023, 1024, 1040, 1043], "support_vectors_": [7, 10, 17, 340, 343, 344, 902, 903, 904, 905, 906, 1003], "squared_error": [7, 13, 106, 126, 127, 320, 415, 557, 558, 559, 561, 564, 670, 675, 677, 692, 909, 911, 1002, 1004, 1044, 1047, 1048], "learning_r": [7, 113, 125, 126, 127, 128, 227, 285, 302, 304, 318, 320, 415, 552, 553, 558, 559, 560, 561, 667, 675, 676, 677, 691, 856, 857, 858, 985, 995, 1002, 1032, 1040, 1044], "max_depth": [7, 32, 114, 115, 118, 122, 123, 125, 126, 127, 128, 131, 132, 134, 165, 223, 259, 274, 280, 319, 320, 357, 359, 360, 361, 394, 395, 415, 552, 553, 556, 557, 558, 559, 560, 561, 563, 564, 565, 800, 801, 824, 908, 909, 910, 911, 912, 913, 914, 977, 995, 1004, 1040, 1042], "n_estim": [7, 10, 27, 32, 113, 114, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 131, 132, 135, 165, 174, 223, 239, 243, 249, 259, 274, 309, 317, 319, 367, 394, 395, 415, 417, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 631, 800, 801, 977, 994, 995, 1028, 1039, 1047], "n_tree": 7, "loop": [7, 8, 116, 126, 171, 257, 267, 352, 361, 367, 381, 382, 387, 408, 412, 417, 645, 646, 651, 652, 658, 659, 660, 661, 662, 977, 1001, 1002, 1019, 1034, 1035, 1038, 1043, 1044, 1047], "previous": [7, 54, 58, 72, 113, 159, 171, 260, 269, 321, 376, 389, 393, 398, 408, 413, 416, 439, 442, 453, 523, 533, 540, 648, 657, 658, 665, 666, 667, 675, 676, 677, 900, 956, 984, 998, 1008, 1028, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "subsequ": [7, 33, 59, 76, 99, 113, 147, 189, 203, 264, 267, 285, 287, 339, 363, 381, 383, 387, 395, 408, 409, 415, 418, 436, 495, 507, 552, 553, 558, 560, 561, 665, 667, 675, 800, 801, 828, 829, 832, 835, 836, 837, 838, 839, 857, 875, 879, 978, 987, 989, 1040, 1041, 1045, 1047], "relax": [7, 408, 416, 452, 1001, 1038], "sgd": [7, 8, 11, 17, 80, 92, 106, 115, 125, 126, 134, 156, 157, 168, 179, 182, 184, 186, 192, 193, 208, 215, 220, 230, 237, 251, 270, 302, 303, 320, 335, 340, 341, 344, 345, 349, 352, 358, 363, 369, 503, 511, 630, 648, 665, 666, 667, 670, 675, 676, 677, 678, 857, 858, 977, 992, 1010, 1011, 1026, 1031, 1034, 1035, 1036, 1038, 1042, 1044], "svr": [7, 10, 168, 229, 245, 317, 334, 350, 367, 555, 566, 567, 592, 593, 642, 677, 797, 803, 901, 903, 905, 981, 1010, 1022, 1031, 1033, 1035, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046], "optim": [7, 14, 28, 54, 55, 58, 61, 73, 79, 80, 96, 125, 127, 149, 150, 153, 154, 157, 158, 159, 160, 161, 185, 189, 190, 194, 209, 217, 236, 240, 260, 267, 270, 275, 280, 283, 289, 304, 307, 312, 321, 329, 341, 347, 352, 353, 354, 363, 367, 370, 375, 378, 381, 383, 384, 393, 395, 398, 403, 405, 408, 410, 412, 413, 415, 417, 418, 419, 443, 447, 448, 449, 451, 456, 460, 461, 471, 472, 478, 530, 533, 534, 536, 538, 542, 556, 557, 558, 559, 573, 609, 610, 618, 619, 634, 637, 639, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 671, 672, 673, 675, 676, 677, 679, 680, 681, 682, 683, 686, 689, 691, 693, 694, 700, 721, 728, 797, 811, 842, 843, 844, 846, 848, 849, 850, 851, 852, 857, 858, 876, 888, 892, 893, 900, 901, 902, 903, 904, 905, 906, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 993, 1002, 1003, 1004, 1008, 1013, 1019, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1046, 1047], "few": [7, 15, 20, 40, 47, 53, 100, 123, 156, 159, 160, 190, 199, 201, 203, 219, 236, 237, 247, 264, 265, 269, 303, 307, 311, 317, 318, 319, 320, 321, 322, 323, 326, 347, 354, 367, 376, 377, 378, 381, 383, 394, 396, 399, 402, 405, 406, 408, 412, 413, 415, 417, 418, 436, 448, 560, 561, 587, 590, 654, 691, 694, 893, 937, 956, 984, 985, 987, 988, 991, 992, 1001, 1003, 1004, 1013, 1015, 1022, 1023, 1024, 1037, 1047], "drawn": [7, 53, 81, 116, 149, 153, 162, 170, 241, 269, 289, 352, 377, 408, 414, 415, 418, 420, 468, 469, 470, 471, 472, 473, 474, 475, 514, 522, 532, 554, 555, 556, 557, 562, 563, 564, 565, 610, 626, 631, 640, 836, 892, 893, 910, 911, 984, 998, 1000, 1034], "boost": [7, 13, 72, 112, 113, 114, 117, 118, 120, 121, 130, 133, 136, 137, 160, 168, 173, 174, 181, 203, 209, 225, 261, 263, 265, 280, 302, 313, 387, 395, 407, 417, 447, 465, 466, 489, 495, 500, 503, 514, 519, 552, 553, 558, 559, 560, 561, 563, 564, 631, 632, 633, 634, 739, 740, 746, 748, 797, 800, 801, 802, 823, 826, 861, 873, 874, 984, 988, 1008, 1010, 1011, 1026, 1031, 1032, 1034, 1036, 1037, 1038, 1040, 1044], "detriment": [7, 149, 368, 417, 984], "plot_influ": 7, "mse_valu": 7, "ax1": [7, 10, 58, 61, 66, 68, 74, 76, 81, 93, 123, 166, 174, 201, 231, 233, 241, 247, 265, 273, 308, 312, 313, 329, 352, 353, 1020], "add_subplot": [7, 17, 26, 28, 43, 46, 65, 68, 91, 102, 103, 172, 198, 216, 224, 226, 326, 327, 388], "line1": [7, 12, 225], "tab": [7, 9, 35, 54, 81, 113, 130, 133, 153, 158, 160, 189, 190, 318, 409, 1038], "blue": [7, 9, 13, 21, 22, 27, 35, 81, 93, 96, 113, 116, 120, 128, 130, 133, 135, 148, 158, 160, 177, 181, 189, 190, 197, 199, 225, 234, 256, 257, 262, 302, 312, 318, 328, 378, 408, 413, 1048], "set_xlabel": [7, 10, 46, 54, 61, 73, 74, 76, 91, 93, 101, 162, 165, 166, 170, 172, 173, 174, 177, 190, 196, 198, 199, 201, 203, 216, 217, 235, 262, 264, 268, 273, 274, 277, 280, 290, 307, 308, 312, 329, 353, 354, 357], "y1_label": 7, "set_ylabel": [7, 8, 10, 31, 35, 46, 54, 61, 66, 73, 74, 76, 81, 91, 93, 101, 107, 113, 120, 162, 172, 177, 190, 192, 196, 198, 199, 201, 203, 205, 216, 235, 247, 262, 264, 268, 273, 274, 283, 290, 307, 308, 312, 317, 329, 347, 353, 357, 1020], "spine": [7, 15, 35, 212, 307], "set_color": [7, 212], "get_color": 7, "yaxi": [7, 10, 46, 61, 91, 102, 103, 119, 198, 222, 224, 227, 247, 285, 290, 352], "tick_param": [7, 15, 136, 247, 262, 311, 329], "ax2": [7, 58, 61, 66, 68, 81, 93, 123, 166, 174, 201, 231, 241, 247, 265, 273, 295, 308, 312, 313, 329, 352], "frameon": [7, 207], "line2": [7, 12, 225, 348], "orang": [7, 9, 54, 81, 93, 97, 98, 104, 113, 128, 130, 160, 166, 189, 190, 211, 238, 250, 296, 318, 360, 989, 1048], "tick_right": 7, "set_label_posit": 7, "y2_label": 7, "__name__": [7, 17, 26, 62, 165, 201, 203, 237, 240, 244, 257, 264, 309, 330, 352, 353, 354, 388, 393, 873], "prediction_perform": 7, "4948": 7, "2675": 7, "062742": 7, "1847": 7, "3264": 7, "048814": 7, "997": [7, 41, 126, 137, 150, 1010], "3383": 7, "039324": 7, "802": [7, 150, 378], "3582": 7, "036004": 7, "0517578125e": 7, "5558": 7, "7313": 7, "000188": 7, "5289": 7, "8022": [7, 395, 472, 1040], "000438": 7, "5193": 7, "8353": 7, "000431": 7, "124": [7, 104, 108, 415, 1010, 1033], "5131": [7, 1036], "3279": 7, "000642": 7, "178": [7, 378, 387, 509, 844], "5149": 7, "0779": 7, "000877": 7, "4066": 7, "4812": 7, "000172": 7, "3551": 7, "1723": 7, "000354": 7, "3445": 7, "2171": [7, 8], "000222": 7, "3433": 7, "0358": 7, "000264": 7, "3456": 7, "0602": 7, "000292": 7, "deduc": 7, "guarante": [7, 8, 81, 82, 171, 209, 234, 283, 285, 307, 353, 363, 369, 375, 389, 390, 408, 412, 413, 416, 445, 535, 644, 657, 658, 667, 671, 673, 675, 677, 686, 693, 814, 817, 840, 841, 878, 880, 893, 894, 907, 980, 984, 985, 987, 991, 996, 1000, 1004, 1023, 1041], "aspect": [7, 59, 87, 96, 157, 172, 222, 230, 271, 294, 345, 367, 368, 369, 381, 395, 396, 408, 657, 658, 1004, 1013, 1048], "572": [7, 16, 1010], "plot_model_complexity_influ": [7, 16, 1010], "concentr": [7, 9, 66, 93, 101, 113, 131, 158, 166, 168, 227, 246, 248, 253, 254, 273, 295, 309, 328, 329, 377, 381, 415, 442, 518, 795, 987, 994, 1010], "bayesian": [7, 28, 55, 66, 93, 165, 166, 168, 179, 185, 189, 202, 205, 207, 220, 246, 248, 252, 253, 254, 265, 273, 276, 290, 295, 308, 311, 312, 329, 413, 436, 523, 527, 531, 610, 643, 644, 655, 656, 795, 796, 861, 863, 875, 880, 977, 1008, 1010, 1011, 1025, 1026, 1037, 1044], "mixtur": [7, 9, 35, 45, 56, 58, 66, 93, 156, 166, 189, 249, 250, 254, 273, 290, 295, 298, 329, 370, 376, 377, 395, 408, 413, 414, 418, 622, 797, 1008, 1009, 1010, 1025, 1026, 1031, 1035, 1036, 1037, 1038], "doesn": [8, 201, 237, 248, 283, 303, 339, 389, 395, 398, 399, 408, 416, 417, 421, 433, 474, 631, 632, 665, 667, 675, 715, 824, 827, 832, 842, 843, 857, 869, 870, 987, 988, 1004, 1035], "t": [8, 11, 12, 17, 18, 27, 35, 40, 41, 43, 44, 45, 53, 55, 59, 71, 73, 79, 80, 81, 83, 86, 93, 97, 98, 102, 104, 106, 107, 113, 116, 117, 124, 125, 126, 127, 128, 132, 133, 150, 154, 156, 157, 158, 161, 162, 168, 171, 172, 173, 174, 180, 182, 185, 188, 195, 198, 199, 200, 201, 202, 219, 221, 223, 224, 225, 226, 228, 237, 238, 248, 251, 253, 261, 262, 283, 285, 297, 298, 303, 317, 320, 321, 323, 326, 327, 329, 335, 336, 339, 340, 344, 352, 353, 354, 360, 361, 363, 367, 368, 375, 376, 378, 381, 383, 385, 387, 389, 393, 394, 395, 398, 399, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 421, 425, 431, 433, 436, 446, 447, 449, 455, 462, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 494, 495, 512, 513, 514, 518, 519, 524, 529, 531, 533, 540, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 566, 567, 568, 569, 589, 590, 593, 606, 607, 609, 610, 626, 627, 629, 630, 631, 632, 634, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 691, 695, 703, 709, 715, 716, 724, 734, 735, 753, 754, 755, 765, 786, 787, 792, 793, 797, 800, 801, 811, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 846, 847, 850, 851, 856, 857, 858, 866, 869, 870, 871, 873, 874, 880, 881, 893, 895, 896, 900, 901, 902, 903, 905, 906, 908, 909, 910, 911, 937, 952, 977, 980, 982, 984, 987, 988, 989, 990, 991, 992, 993, 994, 995, 998, 1002, 1003, 1004, 1010, 1012, 1015, 1022, 1023, 1024, 1025, 1026, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "memori": [8, 55, 72, 73, 100, 124, 171, 172, 287, 313, 317, 319, 321, 322, 352, 353, 354, 368, 369, 375, 381, 384, 390, 395, 409, 412, 413, 416, 419, 420, 440, 441, 442, 443, 444, 445, 446, 448, 449, 453, 456, 458, 467, 472, 478, 495, 502, 507, 532, 533, 534, 537, 554, 555, 556, 557, 562, 563, 564, 565, 580, 581, 587, 588, 590, 645, 646, 647, 651, 652, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 675, 676, 677, 678, 679, 680, 683, 776, 777, 778, 779, 797, 803, 811, 819, 821, 822, 823, 824, 827, 828, 829, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 848, 850, 851, 852, 860, 861, 878, 880, 890, 891, 893, 898, 900, 901, 908, 909, 910, 911, 921, 973, 984, 990, 991, 998, 1000, 1001, 1003, 1004, 1009, 1013, 1015, 1024, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "partial_fit": [8, 51, 96, 237, 321, 369, 383, 395, 408, 413, 441, 448, 533, 535, 536, 537, 588, 596, 657, 658, 665, 666, 667, 675, 676, 677, 828, 829, 832, 833, 835, 836, 837, 838, 839, 856, 857, 858, 869, 870, 880, 900, 984, 990, 992, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1044, 1045, 1046, 1047, 1048], "fed": [8, 133, 363, 376, 416, 977, 993, 998, 1042], "batch": [8, 11, 65, 96, 100, 298, 321, 369, 390, 395, 416, 439, 441, 446, 448, 450, 452, 530, 532, 533, 535, 536, 537, 538, 539, 541, 542, 544, 545, 663, 684, 685, 802, 815, 816, 835, 836, 837, 838, 839, 857, 858, 869, 870, 880, 893, 940, 954, 992, 993, 1002, 1031, 1035, 1036, 1039, 1040, 1041, 1042, 1044, 1046, 1047], "remain": [8, 26, 28, 72, 113, 120, 125, 127, 149, 171, 201, 205, 217, 247, 260, 264, 268, 271, 405, 408, 409, 410, 412, 416, 445, 463, 466, 514, 515, 520, 527, 533, 569, 609, 610, 761, 767, 799, 800, 801, 802, 805, 807, 835, 836, 837, 839, 941, 977, 978, 980, 987, 988, 992, 998, 1004, 1009, 1033, 1039, 1045], "hashingvector": [8, 354, 369, 416, 488, 587, 589, 1032, 1038, 1039, 1040, 1041, 1044], "where": [8, 11, 12, 14, 17, 18, 20, 21, 25, 26, 27, 33, 54, 56, 58, 81, 87, 93, 96, 99, 102, 106, 107, 113, 115, 117, 119, 123, 124, 126, 130, 147, 150, 153, 159, 162, 166, 171, 180, 185, 193, 202, 205, 210, 211, 212, 214, 218, 219, 222, 224, 225, 230, 231, 234, 237, 238, 240, 242, 253, 258, 259, 262, 264, 268, 269, 271, 273, 274, 280, 283, 304, 307, 309, 310, 311, 312, 313, 314, 317, 319, 320, 327, 328, 337, 343, 347, 348, 349, 352, 357, 358, 363, 367, 368, 369, 375, 377, 378, 380, 381, 383, 385, 387, 388, 389, 393, 394, 395, 396, 398, 402, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 431, 436, 443, 446, 447, 451, 460, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 486, 495, 530, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 581, 582, 583, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 608, 609, 610, 612, 614, 618, 621, 622, 624, 626, 627, 628, 629, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 687, 690, 691, 692, 695, 706, 711, 715, 723, 727, 728, 729, 737, 753, 761, 766, 767, 768, 771, 779, 780, 781, 782, 785, 790, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 823, 824, 825, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 843, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 863, 870, 873, 875, 876, 879, 880, 886, 888, 894, 895, 896, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 928, 929, 930, 931, 937, 945, 948, 973, 977, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1009, 1012, 1015, 1016, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "word": [8, 15, 20, 71, 153, 234, 238, 339, 353, 354, 367, 376, 377, 381, 383, 386, 395, 405, 408, 410, 411, 412, 413, 452, 510, 522, 533, 535, 540, 587, 588, 590, 695, 829, 839, 897, 982, 986, 990, 993, 998, 1001, 1002, 1013, 1022, 1023, 1031, 1039], "federicov": 8, "itertool": [8, 43, 45, 63, 134, 172, 186, 248, 253, 262, 269, 271, 415], "sy": [8, 12, 17, 20, 209, 234, 285, 330, 354, 376, 393, 616], "tarfil": 8, "hashlib": 8, "sha256": [8, 1046], "parser": [8, 13, 317, 321, 495, 1046, 1047], "htmlparser": 8, "pathlib": [8, 1046, 1047], "path": [8, 17, 18, 168, 171, 179, 186, 187, 190, 192, 195, 205, 217, 220, 275, 347, 357, 375, 379, 381, 385, 389, 390, 395, 440, 444, 449, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 507, 508, 547, 556, 557, 562, 563, 564, 565, 592, 593, 596, 645, 646, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 680, 681, 682, 683, 684, 685, 687, 860, 861, 907, 908, 909, 910, 911, 942, 977, 984, 985, 994, 1009, 1010, 1031, 1032, 1035, 1037, 1038, 1040, 1041, 1043, 1044, 1046, 1047], "urllib": [8, 18], "request": [8, 18, 47, 201, 219, 237, 320, 368, 375, 379, 380, 384, 395, 396, 399, 402, 413, 416, 417, 436, 442, 443, 446, 448, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 532, 533, 537, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 580, 581, 587, 589, 590, 593, 609, 610, 631, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 689, 698, 798, 799, 804, 806, 815, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 845, 847, 850, 851, 857, 858, 860, 863, 865, 866, 867, 872, 879, 880, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 944, 945, 947, 988, 991, 1024, 1037, 1038, 1039, 1048], "urlretriev": 8, "rcparam": [8, 230, 235, 314], "get_data_hom": 8, "feature_extract": [8, 15, 20, 47, 48, 51, 52, 55, 67, 71, 99, 168, 263, 330, 351, 352, 353, 354, 369, 370, 376, 408, 409, 416, 463, 543, 873, 986, 1023, 1024, 1031, 1032, 1033, 1034, 1037, 1038, 1048], "passiveaggressiveclassifi": [8, 208, 367, 369, 984, 989, 1032, 1035, 1036, 1038, 1039, 1042, 1044], "perceptron": [8, 32, 122, 131, 142, 155, 157, 168, 208, 211, 217, 241, 300, 305, 309, 310, 331, 344, 348, 349, 369, 393, 416, 513, 514, 521, 665, 675, 826, 856, 857, 858, 861, 880, 986, 989, 993, 1002, 1010, 1011, 1026, 1035, 1037, 1038, 1039, 1043], "naive_bay": [8, 25, 26, 28, 32, 131, 135, 263, 264, 352, 363, 369, 370, 376, 415, 436, 568, 861, 982, 989, 990, 1024, 1032, 1033, 1035, 1036, 1037, 1038], "multinomialnb": [8, 369, 376, 416, 835, 836, 837, 838, 990, 1024, 1033, 1035, 1038, 1039, 1043, 1044, 1046], "_not_in_sphinx": [8, 10], "hack": [8, 10], "whether": [8, 10, 13, 17, 72, 111, 129, 156, 159, 161, 171, 172, 201, 205, 219, 223, 231, 237, 260, 307, 361, 363, 368, 376, 379, 380, 381, 383, 385, 386, 387, 395, 399, 408, 409, 410, 412, 413, 415, 417, 420, 439, 441, 450, 452, 453, 458, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 486, 487, 490, 491, 495, 496, 502, 507, 508, 513, 521, 526, 530, 531, 536, 537, 538, 539, 541, 544, 545, 547, 551, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 580, 587, 588, 589, 590, 596, 601, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 628, 630, 631, 632, 634, 635, 636, 637, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 689, 693, 694, 696, 697, 699, 701, 703, 711, 740, 759, 765, 772, 776, 780, 787, 797, 800, 801, 802, 803, 811, 815, 816, 819, 820, 823, 824, 826, 829, 831, 834, 835, 836, 837, 839, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 857, 858, 864, 881, 887, 900, 901, 902, 903, 904, 905, 906, 912, 914, 918, 920, 921, 922, 924, 936, 937, 944, 945, 961, 972, 976, 977, 978, 983, 984, 988, 993, 994, 1000, 1002, 1003, 1013, 1038, 1039, 1040, 1048], "builder": [8, 10, 347, 385], "__file__": [8, 10, 1044], "global": [8, 10, 43, 58, 96, 201, 222, 223, 244, 271, 303, 318, 363, 367, 368, 387, 393, 395, 407, 408, 418, 441, 451, 461, 467, 589, 625, 631, 687, 690, 691, 694, 706, 727, 728, 736, 781, 782, 785, 786, 815, 881, 896, 898, 956, 958, 977, 985, 988, 994, 998, 1004, 1013, 1039, 1046], "21578": [8, 1044], "uci": [8, 150, 312, 375, 378, 499, 501, 503, 509], "ml": [8, 150, 280, 375, 378, 386, 499, 501, 509, 984, 986, 1008, 1009, 1013], "uncompress": [8, 507, 508, 1024], "reuterspars": 8, "util": [8, 10, 11, 49, 56, 57, 62, 90, 111, 113, 133, 201, 203, 209, 217, 224, 233, 237, 239, 250, 268, 270, 285, 309, 317, 329, 339, 343, 352, 368, 370, 375, 376, 379, 381, 382, 383, 384, 393, 394, 395, 404, 408, 409, 412, 413, 416, 436, 442, 443, 446, 448, 452, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 532, 533, 537, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 576, 580, 581, 587, 589, 590, 593, 609, 610, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 689, 797, 798, 799, 804, 806, 815, 820, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 845, 847, 850, 851, 857, 858, 860, 863, 865, 866, 867, 872, 879, 880, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 977, 983, 986, 988, 989, 998, 999, 1008, 1013, 1016, 1026, 1031, 1032, 1034, 1035, 1037, 1038], "pars": [8, 18, 367, 375, 376, 382, 507], "sgml": [8, 367], "file": [8, 12, 16, 17, 23, 29, 33, 36, 49, 69, 77, 84, 88, 94, 108, 110, 137, 143, 151, 163, 167, 175, 178, 220, 228, 245, 254, 278, 281, 284, 299, 305, 315, 324, 332, 333, 350, 352, 353, 355, 362, 367, 369, 375, 376, 378, 379, 381, 385, 386, 387, 389, 393, 402, 409, 413, 486, 492, 493, 495, 502, 507, 508, 533, 578, 579, 587, 588, 590, 912, 991, 1004, 1010, 1012, 1016, 1031, 1032, 1034, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047], "yield": [8, 9, 26, 46, 56, 79, 80, 81, 82, 124, 126, 185, 196, 201, 216, 219, 267, 283, 301, 307, 336, 341, 352, 353, 363, 367, 369, 375, 386, 395, 405, 408, 410, 412, 413, 415, 416, 417, 436, 448, 467, 471, 507, 508, 536, 537, 538, 540, 545, 552, 553, 558, 559, 560, 561, 566, 567, 593, 601, 646, 650, 651, 652, 654, 660, 662, 664, 672, 674, 685, 724, 779, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 823, 824, 825, 827, 831, 834, 892, 893, 931, 938, 940, 941, 946, 980, 982, 984, 985, 988, 1003, 1004, 1019, 1036, 1037, 1039, 1042, 1044], "__init__": [8, 17, 57, 111, 161, 237, 285, 339, 381, 383, 385, 386, 387, 388, 395, 416, 422, 949, 1032, 1037, 1039, 1044, 1045, 1046, 1047], "self": [8, 17, 20, 26, 28, 57, 66, 93, 111, 161, 168, 174, 237, 272, 285, 325, 331, 332, 339, 352, 375, 381, 382, 383, 386, 387, 388, 389, 408, 416, 418, 422, 425, 431, 432, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 499, 507, 508, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 702, 795, 796, 797, 798, 799, 800, 801, 804, 806, 811, 815, 816, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 945, 946, 948, 949, 954, 962, 991, 1009, 1010, 1011, 1013, 1026, 1033, 1038, 1045], "latin": [8, 416], "_reset": 8, "handle_starttag": 8, "tag": [8, 50, 72, 230, 328, 375, 380, 384, 385, 389, 393, 395, 404, 416, 495, 828, 1009, 1012, 1036, 1040, 1041, 1042, 1045, 1046, 1047], "attr": [8, 57], "start_": 8, "handle_endtag": 8, "end_": 8, "in_titl": 8, "in_bodi": 8, "in_top": 8, "in_topic_d": 8, "bodi": [8, 71, 150, 241, 322, 378], "topic_d": 8, "fd": 8, "chunk": [8, 51, 367, 368, 408, 413, 419, 443, 448, 467, 537, 776, 779, 828, 829, 835, 836, 837, 838, 839, 898, 990, 1038, 1039, 1040, 1041, 1042], "feed": [8, 87, 202, 354, 376, 386, 393, 408, 416, 740, 873, 989], "decod": [8, 298, 376, 395, 502, 568, 587, 588, 590, 1031, 1032], "close": [8, 12, 18, 25, 26, 28, 39, 40, 47, 55, 61, 67, 79, 80, 83, 101, 116, 123, 126, 129, 133, 153, 154, 157, 158, 159, 160, 161, 171, 173, 185, 205, 207, 223, 230, 236, 240, 247, 253, 262, 263, 291, 292, 307, 317, 339, 343, 344, 353, 363, 376, 381, 383, 389, 393, 395, 396, 406, 407, 408, 411, 412, 415, 418, 449, 454, 471, 507, 508, 531, 562, 627, 642, 646, 660, 671, 673, 686, 704, 744, 795, 815, 816, 835, 836, 837, 839, 846, 921, 977, 981, 982, 984, 985, 987, 988, 989, 991, 994, 995, 998, 1003, 1008, 1013, 1022, 1034, 1038, 1039, 1040], "handle_data": 8, "start_reut": 8, "attribut": [8, 26, 33, 50, 72, 105, 111, 113, 120, 121, 124, 146, 150, 201, 209, 237, 252, 260, 261, 266, 274, 294, 298, 320, 343, 354, 361, 369, 370, 374, 375, 376, 378, 381, 384, 388, 393, 404, 405, 406, 408, 409, 410, 411, 413, 415, 416, 417, 418, 423, 424, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 506, 509, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 696, 697, 699, 700, 701, 734, 793, 795, 796, 797, 800, 801, 803, 811, 819, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 914, 915, 949, 972, 980, 982, 984, 989, 991, 992, 994, 998, 1001, 1002, 1003, 1004, 1013, 1015, 1021, 1024, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "end_reut": 8, "sub": [8, 38, 49, 54, 56, 58, 61, 71, 106, 237, 239, 247, 319, 326, 327, 336, 339, 348, 376, 381, 383, 387, 395, 409, 415, 416, 436, 442, 443, 446, 448, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 532, 533, 535, 537, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 587, 589, 590, 593, 596, 609, 610, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 689, 798, 799, 804, 806, 815, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 845, 847, 850, 851, 857, 858, 860, 863, 865, 866, 867, 872, 879, 880, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 946, 984, 988, 1002, 1024, 1041, 1045, 1047], "start_titl": 8, "end_titl": 8, "start_bodi": 8, "end_bodi": 8, "start_top": 8, "end_top": 8, "start_d": 8, "end_d": 8, "stream_reuters_docu": 8, "data_path": 8, "iter": [8, 15, 18, 32, 47, 73, 83, 96, 99, 113, 116, 119, 122, 124, 125, 127, 128, 150, 162, 165, 168, 180, 181, 209, 216, 249, 250, 255, 257, 270, 273, 278, 301, 303, 304, 309, 319, 327, 329, 330, 339, 381, 383, 387, 389, 390, 394, 395, 403, 408, 411, 413, 415, 417, 420, 436, 439, 440, 442, 444, 446, 447, 448, 451, 453, 458, 460, 461, 462, 470, 471, 477, 481, 482, 483, 514, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 558, 559, 560, 561, 563, 566, 567, 580, 581, 587, 588, 590, 592, 593, 601, 609, 626, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 831, 834, 849, 856, 857, 858, 859, 860, 864, 871, 873, 875, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 915, 936, 937, 943, 944, 945, 946, 954, 978, 984, 985, 987, 988, 991, 992, 993, 1001, 1002, 1003, 1004, 1009, 1010, 1013, 1019, 1023, 1024, 1026, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "archiv": [8, 280, 375, 376, 378, 379, 402, 408, 441, 499, 501, 509, 756, 757, 986, 1003, 1024], "exist": [8, 9, 13, 18, 20, 54, 219, 262, 303, 307, 343, 375, 380, 383, 384, 387, 393, 395, 396, 398, 402, 408, 412, 413, 415, 416, 423, 433, 436, 442, 443, 446, 448, 450, 452, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 498, 532, 533, 537, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 584, 587, 588, 589, 590, 593, 596, 602, 609, 610, 631, 632, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 689, 697, 699, 701, 760, 763, 767, 798, 799, 802, 804, 805, 806, 807, 810, 812, 813, 814, 815, 816, 817, 818, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 845, 847, 850, 851, 857, 858, 860, 863, 865, 866, 867, 872, 873, 874, 879, 880, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 972, 980, 985, 987, 988, 992, 994, 995, 998, 1013, 1023, 1031, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "str": [8, 10, 17, 59, 61, 105, 107, 122, 219, 240, 262, 274, 285, 295, 337, 352, 375, 376, 390, 416, 419, 420, 424, 429, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 456, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 526, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 575, 580, 581, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 616, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 691, 695, 696, 697, 698, 699, 701, 706, 708, 710, 712, 725, 727, 728, 730, 731, 736, 740, 769, 772, 776, 777, 778, 779, 780, 781, 782, 785, 787, 790, 791, 797, 798, 799, 800, 801, 803, 804, 806, 808, 809, 811, 815, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 919, 920, 921, 924, 927, 929, 933, 944, 945, 946, 948, 951, 972, 973, 976, 1046], "kei": [8, 10, 13, 18, 20, 43, 119, 123, 133, 165, 170, 219, 237, 240, 243, 263, 265, 266, 318, 319, 320, 321, 322, 323, 369, 374, 383, 386, 387, 388, 393, 395, 396, 398, 399, 408, 409, 412, 418, 463, 471, 560, 561, 566, 567, 568, 569, 587, 590, 593, 616, 625, 631, 632, 633, 658, 797, 800, 801, 809, 811, 823, 859, 860, 915, 925, 953, 1009, 1024, 1028, 1037, 1043, 1044, 1046, 1047], "download_url": 8, "ic": [8, 280, 319, 375, 378, 397, 499, 501, 509, 631, 632, 1026, 1043, 1044], "databas": [8, 150, 312, 367, 369, 376, 378, 408, 413, 415, 416, 419, 441, 443, 509, 554, 555, 893, 1000], "reuters21578": 8, "mld": 8, "tar": [8, 385], "gz": [8, 385, 398, 507, 508], "archive_sha256": 8, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 8, "archive_filenam": 8, "mkdir": [8, 387, 389], "parent": [8, 170, 237, 381, 385, 395, 408, 441, 462, 945, 946, 1031], "exist_ok": 8, "blocknum": 8, "total_sz_mb": 8, "mb": [8, 16, 23, 29, 36, 69, 77, 84, 88, 94, 108, 110, 137, 143, 151, 163, 167, 175, 178, 220, 228, 234, 245, 254, 278, 281, 284, 299, 305, 315, 324, 332, 333, 350, 352, 354, 355, 362, 376, 387, 902, 903, 904, 905, 906, 1003, 1010, 1027], "1e6": [8, 10, 194, 234, 352, 354, 367, 535, 894, 988, 1000], "current_sz_mb": 8, "stdout": [8, 96, 209, 829, 849, 857, 858], "write": [8, 18, 166, 237, 352, 367, 368, 375, 379, 380, 384, 385, 386, 387, 389, 390, 393, 395, 404, 409, 413, 416, 999, 1009, 1024, 1032, 1044], "rdownload": 8, "archive_path": 8, "filenam": [8, 18, 330, 376, 387, 402, 487, 499, 502, 503, 506, 587, 588, 590, 1024, 1031, 1036, 1039, 1040], "reporthook": 8, "tamper": 8, "assert": [8, 18, 49, 97, 234, 262, 271, 368, 384, 1009], "read_byt": 8, "hexdigest": 8, "untar": 8, "open": [8, 12, 18, 224, 375, 376, 379, 380, 381, 385, 387, 393, 394, 396, 402, 409, 416, 486, 495, 507, 508, 978, 1008, 1013, 1018, 1034, 1038, 1039, 1041, 1047], "extractal": 8, "glob": 8, "sgm": 8, "rb": 8, "decode_error": [8, 416, 502, 587, 588, 590, 1033], "alternate_sign": [8, 416, 581, 588, 1038], "data_stream": 8, "binari": [8, 14, 26, 28, 117, 119, 129, 131, 147, 161, 171, 177, 192, 194, 201, 209, 223, 231, 240, 243, 259, 260, 265, 271, 277, 280, 289, 339, 343, 345, 361, 363, 375, 376, 377, 383, 385, 386, 395, 398, 402, 405, 406, 407, 408, 415, 416, 418, 436, 437, 438, 451, 486, 499, 507, 508, 519, 522, 548, 549, 552, 554, 558, 560, 565, 566, 567, 580, 587, 588, 590, 592, 593, 601, 609, 626, 627, 628, 629, 630, 631, 632, 657, 658, 665, 667, 672, 673, 674, 675, 699, 702, 706, 707, 708, 711, 712, 714, 717, 719, 725, 727, 728, 732, 733, 736, 737, 738, 739, 740, 741, 780, 781, 782, 785, 786, 787, 792, 794, 797, 798, 800, 801, 802, 803, 811, 815, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 835, 846, 856, 867, 871, 873, 881, 884, 900, 902, 905, 951, 978, 989, 990, 991, 992, 993, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1012, 1015, 1028, 1032, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1045, 1046, 1048], "acq": 8, "chosen": [8, 21, 47, 74, 133, 154, 171, 172, 190, 202, 218, 238, 256, 257, 259, 265, 353, 363, 367, 393, 408, 410, 411, 415, 418, 439, 445, 448, 450, 452, 453, 459, 495, 522, 534, 556, 557, 558, 559, 560, 561, 563, 564, 646, 652, 655, 657, 658, 660, 662, 670, 675, 676, 677, 678, 679, 689, 693, 792, 795, 796, 797, 800, 801, 811, 830, 849, 900, 901, 908, 909, 910, 911, 937, 977, 980, 982, 984, 985, 987, 989, 994, 995, 1002, 1019, 1020, 1022, 1023, 1039, 1047, 1048], "evenli": [8, 40, 53, 126, 174, 205, 257, 416, 941, 1024], "care": [8, 56, 127, 280, 343, 367, 369, 385, 387, 393, 395, 396, 408, 410, 416, 436, 459, 468, 639, 657, 658, 665, 666, 667, 675, 676, 677, 694, 900, 985, 1003, 1013, 1047], "all_class": 8, "positive_class": [8, 711], "partial_fit_classifi": 8, "nb": [8, 104, 131, 363, 837, 990], "multinomi": [8, 31, 168, 179, 192, 194, 210, 216, 220, 238, 257, 271, 303, 347, 348, 376, 377, 381, 413, 415, 495, 511, 522, 550, 552, 558, 560, 568, 630, 657, 658, 739, 826, 834, 835, 836, 837, 838, 839, 880, 923, 988, 989, 1004, 1010, 1011, 1024, 1026, 1031, 1035, 1037, 1038, 1039, 1044, 1045], "passiv": [8, 208, 665, 666, 1011, 1026, 1032], "aggress": [8, 208, 665, 666, 800, 801, 1011, 1026, 1032], "get_minibatch": 8, "doc_it": 8, "pos_class": 8, "minibatch": [8, 45, 408, 413, 448, 533, 675, 856, 857, 858, 1008, 1031], "tupl": [8, 13, 49, 50, 56, 106, 172, 219, 374, 375, 376, 383, 395, 412, 420, 433, 450, 452, 463, 466, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 500, 501, 503, 504, 507, 509, 510, 511, 512, 513, 521, 532, 560, 561, 566, 567, 568, 569, 581, 582, 583, 586, 587, 588, 590, 626, 631, 632, 633, 711, 718, 740, 779, 781, 795, 797, 811, 823, 840, 841, 859, 860, 870, 871, 875, 878, 886, 890, 902, 903, 904, 905, 906, 915, 921, 922, 924, 928, 929, 930, 931, 946, 955, 972, 995, 1037, 1038, 1042, 1043, 1044], "x_text": 8, "befor": [8, 12, 26, 43, 71, 73, 76, 87, 133, 146, 160, 162, 164, 165, 167, 168, 171, 172, 174, 182, 185, 189, 190, 194, 237, 262, 269, 287, 288, 308, 311, 312, 314, 320, 342, 363, 367, 368, 376, 379, 381, 383, 384, 386, 387, 389, 390, 393, 395, 396, 397, 402, 404, 406, 408, 409, 410, 412, 413, 417, 420, 421, 442, 446, 447, 448, 458, 460, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 481, 482, 483, 484, 489, 500, 533, 536, 537, 538, 539, 540, 543, 545, 546, 560, 561, 564, 566, 568, 569, 576, 587, 588, 590, 610, 626, 627, 629, 644, 649, 650, 653, 654, 655, 663, 664, 665, 666, 667, 670, 675, 677, 686, 691, 693, 795, 796, 802, 803, 815, 816, 818, 822, 824, 826, 840, 841, 848, 849, 850, 851, 852, 855, 860, 861, 864, 867, 874, 878, 879, 880, 881, 885, 886, 888, 889, 890, 891, 897, 908, 909, 937, 972, 978, 984, 985, 988, 994, 998, 1002, 1003, 1004, 1009, 1010, 1024, 1031, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "exclud": [8, 13, 20, 170, 307, 381, 385, 395, 445, 463, 465, 727, 728, 736, 781, 782, 785, 810, 818, 875, 963, 988, 991, 1040, 1047], "invalid": [8, 201, 395, 445, 577, 670, 711, 772, 984, 988, 1037, 1039, 1041, 1042, 1044, 1045, 1047], "assign": [8, 18, 21, 35, 38, 47, 50, 58, 59, 61, 113, 118, 129, 131, 146, 155, 214, 219, 230, 235, 238, 301, 309, 314, 331, 347, 353, 376, 381, 383, 395, 405, 412, 413, 415, 416, 417, 418, 439, 440, 441, 442, 444, 445, 446, 447, 448, 451, 453, 455, 458, 459, 460, 461, 514, 535, 560, 561, 592, 593, 606, 607, 609, 657, 658, 665, 666, 667, 675, 676, 677, 703, 704, 714, 715, 716, 719, 727, 728, 729, 736, 737, 741, 753, 755, 781, 782, 784, 785, 791, 792, 793, 797, 800, 801, 803, 806, 811, 819, 821, 822, 823, 824, 827, 844, 850, 852, 853, 854, 867, 895, 896, 900, 901, 902, 903, 904, 905, 906, 982, 984, 987, 988, 989, 990, 991, 992, 993, 998, 1001, 1013, 1015, 1024, 1031, 1036, 1038, 1039], "format": [8, 11, 12, 13, 20, 22, 49, 55, 59, 62, 71, 81, 96, 106, 116, 122, 125, 127, 139, 145, 146, 177, 181, 187, 192, 201, 219, 257, 267, 269, 270, 273, 276, 289, 290, 293, 294, 311, 317, 346, 357, 361, 367, 374, 380, 381, 383, 384, 389, 390, 394, 395, 409, 412, 415, 416, 432, 441, 442, 444, 446, 448, 449, 451, 458, 463, 467, 481, 482, 483, 484, 486, 488, 495, 496, 497, 507, 508, 509, 522, 526, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 550, 556, 557, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 583, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 645, 651, 657, 658, 659, 661, 665, 666, 667, 675, 676, 677, 687, 688, 691, 696, 712, 719, 737, 738, 749, 766, 789, 790, 829, 842, 843, 844, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 887, 892, 893, 898, 900, 912, 920, 921, 942, 950, 954, 959, 962, 964, 965, 966, 967, 968, 969, 978, 988, 991, 996, 998, 999, 1002, 1004, 1008, 1015, 1016, 1026, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1044, 1046, 1048], "islic": [8, 45, 63], "asarrai": [8, 18, 201, 219, 304, 328, 352, 353, 383, 395, 404, 584, 585, 724, 754, 848, 850, 851, 852, 998, 1003, 1048], "int": [8, 10, 13, 14, 17, 18, 20, 38, 45, 63, 82, 116, 125, 129, 141, 142, 154, 155, 156, 162, 166, 170, 182, 192, 194, 201, 219, 227, 230, 236, 240, 247, 257, 260, 261, 262, 285, 290, 292, 298, 314, 327, 354, 376, 381, 383, 393, 395, 406, 409, 412, 416, 419, 420, 423, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 481, 482, 483, 484, 487, 490, 491, 493, 494, 495, 496, 501, 502, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 606, 607, 609, 610, 616, 626, 627, 628, 629, 630, 631, 632, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 699, 700, 701, 702, 703, 704, 706, 708, 712, 724, 725, 727, 728, 729, 732, 736, 754, 755, 767, 772, 776, 777, 778, 779, 780, 781, 782, 785, 787, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 920, 921, 923, 924, 936, 937, 939, 940, 941, 942, 953, 959, 962, 967, 968, 984, 995, 1031, 1037, 1041, 1042], "iter_minibatch": 8, "minibatch_s": [8, 369], "statist": [8, 13, 82, 113, 116, 117, 128, 139, 140, 141, 142, 145, 149, 150, 168, 170, 171, 172, 173, 185, 189, 205, 255, 259, 261, 264, 271, 278, 280, 283, 307, 313, 319, 363, 370, 374, 376, 378, 381, 387, 395, 406, 408, 409, 410, 412, 413, 415, 417, 433, 468, 473, 492, 493, 515, 516, 517, 519, 521, 540, 552, 558, 559, 561, 603, 604, 605, 608, 626, 629, 633, 634, 643, 648, 655, 689, 693, 695, 709, 715, 720, 721, 722, 729, 741, 786, 797, 813, 830, 857, 858, 876, 877, 878, 880, 885, 888, 889, 891, 905, 908, 909, 963, 977, 978, 982, 984, 985, 987, 988, 989, 990, 995, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1016, 1022, 1023, 1036, 1039, 1042, 1043, 1045, 1046], "test_stat": 8, "n_test": [8, 10, 34, 116, 262, 1031, 1034], "n_test_po": 8, "hold": [8, 13, 17, 27, 28, 201, 205, 263, 361, 374, 381, 382, 383, 395, 406, 408, 412, 415, 416, 418, 502, 556, 560, 563, 588, 631, 632, 633, 734, 797, 800, 801, 811, 836, 867, 868, 873, 874, 881, 884, 908, 910, 978, 982, 988, 992, 1002, 1003, 1004, 1012, 1015, 1024, 1039, 1043], "n_test_docu": 8, "tick": [8, 44, 61, 156, 241, 273, 631, 824], "x_test_text": 8, "parsing_tim": 8, "vectorizing_tim": 8, "sum": [8, 18, 20, 27, 62, 82, 93, 99, 106, 125, 126, 146, 150, 161, 171, 182, 188, 197, 201, 205, 216, 219, 223, 225, 240, 271, 285, 292, 295, 321, 330, 343, 344, 347, 352, 353, 354, 361, 378, 387, 395, 405, 406, 407, 408, 410, 411, 413, 414, 415, 416, 418, 431, 441, 442, 446, 448, 458, 463, 464, 481, 482, 483, 514, 519, 522, 530, 533, 535, 536, 540, 543, 544, 545, 548, 549, 551, 553, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 567, 568, 569, 589, 590, 610, 612, 622, 624, 634, 640, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 672, 675, 676, 677, 678, 680, 683, 689, 693, 695, 698, 708, 709, 718, 724, 739, 754, 756, 757, 761, 786, 828, 829, 833, 834, 843, 847, 851, 858, 859, 879, 880, 900, 901, 903, 906, 908, 909, 910, 911, 939, 963, 969, 974, 984, 988, 989, 990, 991, 1003, 1004, 1022, 1034, 1035, 1037, 1039, 1040, 1042, 1047, 1048], "cls_name": [8, 10], "string": [8, 72, 122, 161, 219, 232, 266, 320, 354, 367, 375, 376, 381, 382, 383, 387, 395, 402, 409, 412, 415, 416, 417, 419, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 486, 488, 489, 495, 504, 526, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 580, 581, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 616, 619, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 698, 708, 710, 718, 730, 760, 763, 769, 772, 776, 777, 778, 779, 790, 791, 795, 796, 797, 800, 801, 803, 811, 819, 823, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 918, 920, 921, 928, 929, 930, 946, 952, 956, 972, 973, 977, 978, 988, 1001, 1003, 1015, 1022, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "n_train": [8, 10, 34, 116, 262, 1031, 1034], "6d": 8, "n_train_po": 8, "5d": 8, "cls_stat": 8, "accuracy_histori": 8, "runtime_histori": 8, "total_fit_tim": 8, "discard": [8, 56, 182, 265, 367, 405, 410, 417, 507, 508, 548, 596, 626, 629, 643, 873, 877, 889, 978, 984, 1039, 1043], "mini": [8, 65, 96, 321, 369, 395, 416, 439, 441, 446, 448, 450, 452, 530, 532, 535, 536, 537, 538, 539, 541, 542, 544, 545, 992, 993, 1031, 1042, 1044], "smaller": [8, 25, 41, 47, 56, 83, 113, 150, 158, 159, 162, 165, 186, 190, 192, 205, 234, 280, 291, 292, 301, 307, 339, 347, 353, 381, 405, 407, 408, 410, 412, 413, 415, 417, 438, 439, 445, 449, 453, 455, 513, 533, 534, 556, 557, 558, 559, 560, 561, 563, 564, 592, 609, 618, 632, 645, 646, 648, 649, 651, 652, 653, 655, 657, 658, 659, 660, 661, 662, 671, 673, 681, 682, 691, 708, 795, 800, 801, 846, 849, 873, 874, 892, 893, 900, 908, 909, 910, 911, 937, 982, 984, 985, 987, 988, 989, 991, 992, 994, 998, 1000, 1002, 1003, 1004, 1009, 1024, 1039, 1044], "bigger": [8, 41, 61, 214, 262, 304, 343, 349, 353, 366, 368, 416, 437, 438, 507, 537, 846, 1019, 1026], "overhead": [8, 285, 368, 369, 381, 387, 390, 393, 395, 415, 440, 444, 448, 533, 698, 832, 833, 835, 836, 837, 838, 839, 840, 841, 956, 990, 991, 1034, 1039, 1040, 1043], "stream": [8, 408, 413, 416, 461, 588, 869, 870, 880, 980, 1008, 1039, 1042], "minibatch_iter": 8, "total_vect_tim": 8, "x_train_text": 8, "item": [8, 9, 10, 11, 12, 13, 18, 20, 31, 44, 56, 76, 117, 119, 123, 126, 133, 171, 199, 203, 209, 223, 236, 237, 239, 249, 259, 265, 321, 327, 353, 374, 381, 382, 383, 390, 409, 463, 525, 560, 561, 587, 588, 590, 631, 809, 873, 895, 896, 915, 916, 942, 980, 1001, 1009, 1015], "updat": [8, 17, 45, 63, 113, 119, 128, 235, 317, 354, 379, 380, 381, 385, 389, 395, 408, 413, 415, 422, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 462, 464, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 795, 796, 797, 798, 799, 800, 801, 804, 806, 811, 815, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 915, 963, 984, 991, 992, 993, 1002, 1012, 1013, 1032, 1038, 1039, 1040, 1042, 1044, 1046, 1047, 1048], "accumul": [8, 51, 120, 121, 190, 385, 387, 408, 416, 988, 1032, 1039], "acc_histori": 8, "run_histori": 8, "878": 8, "962": [8, 136, 137, 355, 1010], "915": 8, "1404": 8, "855": [8, 153], "1397": [8, 387], "877": [8, 260], "1380": 8, "933": [8, 75, 412], "1373": [8, 985], "3911": 8, "517": [8, 71, 77, 451, 461, 1010, 1022], "938": [8, 197, 783, 988, 1019], "2085": 8, "936": [8, 436, 988], "2080": 8, "885": [8, 150, 378], "2069": 8, "941": 8, "2066": 8, "6821": 8, "891": 8, "952": [8, 50], "2178": 8, "2176": 8, "900": [8, 51, 75, 76], "2170": 8, "953": [8, 50], "2168": 8, "9759": 8, "1276": 8, "949": 8, "2244": 8, "2242": 8, "909": 8, "2238": 8, "958": [8, 38, 69, 1010], "2237": 8, "11680": 8, "1499": 8, "944": [8, 1019], "38": [8, 93, 172, 192, 200, 205, 256, 270, 271, 290, 323, 361, 415, 631, 728, 881, 988, 998, 1031, 1032, 1033], "956": [8, 1019], "2166": 8, "950": [8, 190, 220, 1010], "2165": 8, "14625": 8, "1865": 8, "965": [8, 988], "58": [8, 67, 80, 278, 378, 410, 421, 474, 762, 998, 1020], "2223": 8, "903": 8, "2222": [8, 655], "924": 8, "2219": 8, "957": [8, 726, 988], "2218": 8, "17360": [8, 1042], "2179": 8, "2261": 8, "2260": 8, "932": [8, 11, 16, 1010], "2257": [8, 1024], "2256": 8, "curv": [8, 11, 24, 25, 27, 29, 38, 76, 79, 116, 118, 119, 125, 129, 140, 168, 179, 180, 191, 201, 219, 220, 222, 224, 227, 229, 231, 233, 240, 241, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 262, 272, 278, 302, 308, 311, 317, 339, 343, 359, 388, 403, 407, 412, 414, 436, 437, 438, 501, 509, 514, 520, 524, 563, 631, 644, 657, 697, 699, 701, 705, 706, 707, 708, 725, 727, 739, 740, 780, 782, 785, 786, 787, 795, 796, 803, 814, 819, 824, 826, 827, 838, 861, 880, 900, 905, 984, 985, 987, 988, 994, 1004, 1010, 1011, 1013, 1026, 1028, 1033, 1034, 1037, 1041, 1043, 1044, 1045, 1046, 1047], "evolut": [8, 10, 274, 367, 369], "cours": [8, 9, 177, 367, 381, 383, 413, 416, 417, 978, 983, 984, 1013], "valid": [8, 13, 14, 27, 55, 56, 57, 58, 72, 73, 75, 76, 79, 83, 104, 111, 117, 119, 122, 123, 124, 125, 126, 129, 138, 141, 143, 144, 147, 148, 150, 151, 161, 168, 171, 173, 179, 185, 187, 188, 189, 195, 201, 203, 209, 219, 220, 231, 237, 239, 243, 249, 252, 255, 259, 262, 263, 264, 266, 268, 269, 270, 271, 274, 275, 276, 278, 280, 289, 304, 308, 313, 317, 319, 329, 339, 347, 357, 368, 376, 381, 384, 393, 394, 395, 399, 402, 403, 406, 408, 409, 410, 413, 414, 415, 416, 417, 424, 436, 441, 442, 444, 445, 446, 448, 449, 456, 462, 463, 467, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 492, 500, 501, 503, 514, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 548, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 571, 574, 576, 581, 582, 588, 592, 593, 596, 601, 631, 633, 637, 638, 639, 640, 641, 642, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 687, 688, 691, 698, 700, 701, 705, 712, 726, 760, 763, 772, 776, 777, 778, 783, 790, 791, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 834, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 863, 864, 866, 872, 880, 892, 893, 895, 896, 898, 900, 902, 905, 907, 908, 909, 910, 911, 920, 921, 924, 931, 943, 945, 948, 978, 987, 988, 989, 992, 996, 998, 1000, 1002, 1003, 1004, 1008, 1009, 1010, 1013, 1015, 1018, 1026, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "consumpt": [8, 367, 533, 556, 557, 563, 564, 797, 811, 821, 822, 823, 908, 909, 910, 911, 954, 1015, 1031, 1033, 1037, 1039, 1040, 1045], "queue": [8, 991, 1034], "up": [8, 11, 38, 45, 47, 48, 49, 53, 56, 58, 63, 71, 81, 82, 90, 93, 111, 118, 166, 172, 180, 185, 194, 202, 217, 218, 249, 264, 267, 285, 298, 304, 308, 313, 321, 327, 336, 343, 347, 352, 354, 369, 375, 376, 381, 385, 387, 388, 389, 390, 393, 395, 396, 406, 408, 413, 415, 416, 442, 446, 447, 448, 449, 451, 455, 458, 459, 460, 507, 508, 535, 548, 549, 556, 557, 558, 559, 560, 561, 563, 564, 565, 609, 626, 631, 632, 638, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 659, 660, 661, 662, 663, 680, 681, 682, 683, 691, 704, 767, 795, 796, 799, 800, 801, 803, 824, 874, 875, 878, 890, 908, 909, 910, 911, 914, 937, 940, 941, 977, 980, 984, 985, 988, 991, 998, 1002, 1003, 1009, 1012, 1013, 1023, 1024, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048], "amount": [8, 12, 46, 54, 67, 79, 82, 96, 100, 114, 116, 159, 171, 185, 205, 219, 235, 319, 326, 329, 331, 339, 347, 354, 367, 368, 369, 393, 407, 408, 410, 413, 415, 416, 417, 442, 453, 468, 537, 538, 540, 542, 562, 595, 645, 646, 649, 650, 651, 652, 653, 654, 655, 659, 660, 661, 662, 664, 680, 683, 691, 800, 801, 840, 841, 846, 881, 896, 897, 910, 911, 983, 984, 987, 990, 992, 998, 1000, 1001, 1002, 1003, 1022, 1023, 1044, 1048], "learner": [8, 114, 124, 133, 369, 556, 557, 558, 559, 560, 561, 563, 564, 565, 581, 588, 629, 842, 843, 848, 850, 851, 990, 993, 1004, 1008, 1009, 1024, 1047], "plot_accuraci": 8, "x_legend": 8, "n_exampl": 8, "gca": [8, 45, 63, 87, 156, 206, 210, 212, 230, 243, 266, 293, 295, 308, 335, 337, 340, 341, 995, 1028], "set_ylim": [8, 10, 17, 32, 43, 61, 73, 93, 118, 130, 131, 162, 172, 181, 199, 201, 202, 235, 247, 266, 277, 283, 290, 301, 307, 309, 310, 312, 318, 329, 348], "runtim": [8, 10, 59, 113, 187, 216, 218, 235, 304, 309, 368, 383, 384, 393, 395, 407, 408, 415, 449, 562, 678, 811, 900, 901, 902, 903, 904, 905, 906, 1002, 1003, 1034, 1038, 1039, 1045, 1046, 1048], "gcf": [8, 995], "cls_runtim": 8, "bar_color": 8, "rectangl": 8, "bar": [8, 10, 15, 73, 119, 120, 123, 124, 127, 135, 146, 150, 161, 165, 172, 180, 247, 252, 261, 263, 267, 283, 312, 313, 321, 322, 353, 383, 411, 580, 631, 647, 668, 679, 988, 995, 1002, 1004, 1037, 1038, 1039, 1040], "width": [8, 10, 13, 17, 46, 54, 81, 91, 98, 99, 105, 106, 107, 116, 122, 123, 126, 135, 146, 155, 161, 184, 244, 247, 261, 288, 307, 309, 310, 313, 319, 322, 336, 378, 409, 437, 438, 451, 463, 492, 493, 505, 520, 585, 865, 913, 998, 1002, 1004, 1021, 1022, 1039], "set_xticklabel": [8, 10, 81, 107, 135, 156, 172, 174, 273, 274, 283], "ymax": [8, 10, 11, 79, 188, 190, 193, 194, 202, 210, 262, 298], "set_titl": [8, 10, 15, 26, 28, 31, 32, 33, 35, 43, 44, 46, 54, 56, 58, 61, 65, 66, 73, 76, 81, 91, 93, 101, 107, 113, 118, 120, 129, 131, 133, 134, 162, 165, 166, 170, 171, 172, 173, 174, 180, 181, 190, 192, 199, 201, 202, 203, 209, 222, 223, 226, 227, 233, 235, 236, 240, 241, 247, 256, 257, 258, 259, 262, 264, 265, 269, 273, 274, 277, 280, 283, 285, 288, 289, 290, 295, 301, 302, 307, 308, 309, 310, 311, 312, 317, 321, 326, 327, 336, 343, 347, 348, 349, 352, 357], "autolabel": [8, 124], "attach": [8, 124, 352, 433, 845, 1032, 1042], "rect": [8, 53, 124, 180], "height": [8, 15, 54, 99, 123, 150, 307, 313, 352, 414, 445, 492, 493, 505, 585], "get_height": [8, 124], "get_x": [8, 124], "get_width": [8, 124], "va": [8, 124, 273, 293, 295, 346], "setp": [8, 10, 273, 276], "rotat": [8, 41, 86, 95, 96, 98, 101, 104, 108, 125, 135, 168, 174, 225, 273, 274, 283, 339, 346, 411, 413, 418, 420, 503, 531, 540, 549, 613, 696, 880, 912, 984, 1010, 1042, 1043], "read": [8, 13, 18, 96, 222, 269, 317, 318, 319, 321, 323, 367, 375, 379, 382, 383, 384, 385, 386, 388, 389, 393, 394, 395, 408, 419, 420, 421, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 458, 460, 461, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 609, 610, 612, 613, 614, 615, 618, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 696, 697, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 856, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 914, 933, 977, 984, 988, 989, 1008, 1013, 1024, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "feat": [8, 10, 385, 416], "extr": 8, "hash": [8, 112, 137, 168, 353, 354, 367, 369, 373, 381, 384, 393, 415, 513, 543, 556, 565, 580, 581, 588, 639, 835, 953, 980, 1010, 1024, 1026, 1032, 1035, 1038], "vect": [8, 71, 263, 330, 416, 1024], "759": [8, 16, 285, 1010], "plot_out_of_core_classif": [8, 16, 1010], "featurehash": [8, 20, 71, 168, 330, 351, 352, 353, 355, 369, 376, 416, 463, 487, 580, 587, 588, 589, 590, 873, 1010, 1032, 1037, 1038, 1039, 1045, 1046], "dictvector": [8, 20, 71, 168, 330, 351, 352, 353, 355, 376, 416, 487, 581, 587, 588, 589, 590, 873, 1010, 1031, 1032, 1035, 1041, 1043, 1044, 1047], "comparison": [8, 12, 14, 20, 24, 25, 26, 27, 29, 30, 34, 36, 37, 39, 41, 43, 49, 51, 58, 59, 60, 61, 62, 64, 69, 71, 80, 91, 95, 97, 98, 100, 107, 108, 113, 116, 119, 126, 131, 135, 136, 144, 146, 151, 152, 158, 160, 162, 163, 168, 173, 183, 185, 187, 189, 192, 199, 201, 205, 216, 219, 221, 224, 225, 226, 227, 228, 229, 233, 234, 245, 249, 255, 257, 258, 259, 266, 270, 274, 278, 283, 294, 301, 309, 311, 312, 314, 317, 319, 330, 331, 336, 346, 351, 352, 353, 355, 363, 376, 378, 395, 406, 410, 411, 413, 417, 418, 436, 437, 442, 445, 446, 448, 487, 503, 511, 513, 514, 521, 524, 540, 548, 549, 552, 563, 564, 580, 581, 587, 588, 589, 590, 605, 607, 609, 610, 614, 621, 624, 630, 638, 642, 657, 671, 687, 688, 689, 690, 691, 703, 736, 741, 777, 786, 797, 798, 799, 800, 802, 803, 811, 813, 814, 815, 816, 817, 818, 826, 835, 838, 842, 857, 861, 873, 874, 878, 880, 881, 885, 886, 887, 888, 889, 890, 891, 900, 902, 903, 905, 906, 908, 977, 982, 985, 988, 990, 991, 994, 1003, 1010, 1028], "biclust": [8, 22, 23, 71, 328, 330, 352, 353, 354, 370, 416, 423, 448, 450, 452, 487, 510, 512, 590, 718, 793, 988, 1010, 1025, 1026, 1033, 1037], "spectral": [8, 14, 18, 19, 23, 37, 45, 47, 50, 56, 69, 71, 168, 223, 224, 328, 330, 352, 353, 354, 381, 416, 448, 450, 451, 452, 461, 468, 469, 470, 471, 472, 473, 474, 475, 487, 510, 512, 590, 687, 688, 689, 690, 691, 694, 718, 793, 991, 1001, 1010, 1025, 1026, 1031, 1032], "cluster": [8, 9, 14, 15, 18, 19, 21, 23, 25, 43, 44, 47, 49, 51, 52, 54, 55, 58, 60, 62, 63, 69, 71, 81, 90, 91, 92, 102, 103, 111, 115, 122, 129, 145, 148, 174, 198, 223, 225, 226, 227, 234, 240, 247, 248, 249, 250, 263, 287, 291, 292, 294, 310, 318, 322, 326, 327, 328, 330, 341, 351, 352, 354, 355, 361, 369, 370, 374, 376, 378, 381, 383, 386, 393, 395, 403, 409, 414, 416, 422, 423, 426, 487, 501, 502, 503, 510, 511, 512, 513, 514, 521, 529, 540, 543, 563, 565, 588, 589, 590, 630, 690, 691, 694, 703, 704, 709, 716, 718, 723, 729, 734, 735, 753, 755, 776, 777, 784, 790, 791, 793, 795, 796, 852, 853, 861, 865, 872, 880, 929, 931, 949, 956, 972, 978, 985, 987, 991, 994, 996, 998, 1001, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1021, 1024, 1025, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "algorithm": [8, 9, 11, 14, 18, 19, 23, 30, 32, 37, 38, 40, 43, 44, 46, 47, 51, 57, 58, 59, 60, 61, 62, 63, 67, 68, 69, 71, 80, 81, 86, 96, 98, 113, 114, 115, 119, 122, 129, 168, 177, 188, 190, 204, 215, 217, 218, 224, 226, 229, 233, 234, 240, 245, 248, 249, 250, 253, 259, 262, 271, 285, 291, 292, 294, 298, 307, 309, 312, 317, 318, 319, 322, 328, 330, 338, 352, 353, 354, 363, 367, 369, 374, 375, 376, 377, 378, 381, 382, 383, 384, 389, 390, 394, 395, 397, 404, 405, 407, 408, 410, 411, 412, 413, 415, 416, 418, 419, 420, 421, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 468, 473, 474, 477, 481, 482, 483, 487, 502, 510, 511, 512, 513, 514, 521, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 543, 544, 545, 546, 547, 552, 553, 554, 555, 558, 559, 562, 590, 602, 603, 609, 610, 634, 636, 638, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 673, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 703, 704, 707, 716, 718, 733, 735, 741, 772, 776, 777, 791, 793, 795, 796, 828, 837, 838, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 856, 861, 865, 867, 880, 884, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 920, 936, 937, 939, 953, 963, 978, 980, 983, 985, 986, 987, 988, 990, 993, 994, 998, 1001, 1002, 1003, 1007, 1008, 1009, 1010, 1011, 1013, 1015, 1018, 1019, 1021, 1023, 1024, 1026, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "illustr": [9, 24, 25, 27, 32, 34, 53, 57, 58, 71, 72, 75, 76, 79, 81, 87, 93, 98, 102, 113, 116, 121, 124, 128, 130, 132, 133, 145, 150, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 166, 168, 170, 172, 173, 177, 190, 197, 198, 201, 203, 205, 209, 211, 212, 214, 215, 218, 219, 222, 223, 225, 227, 230, 232, 233, 235, 236, 237, 239, 247, 251, 262, 269, 274, 275, 286, 294, 299, 310, 312, 316, 317, 319, 329, 339, 340, 344, 345, 347, 348, 353, 354, 360, 363, 367, 378, 381, 386, 389, 394, 411, 413, 415, 416, 514, 609, 610, 612, 613, 614, 618, 621, 622, 849, 977, 984, 988, 991, 994, 1000, 1001, 1002, 1003, 1010, 1013, 1015], "robust": [9, 35, 62, 64, 78, 80, 84, 104, 126, 150, 166, 168, 171, 172, 179, 191, 203, 205, 218, 220, 230, 240, 276, 307, 323, 369, 378, 383, 389, 408, 415, 416, 445, 447, 468, 469, 472, 473, 474, 475, 523, 533, 558, 559, 648, 656, 669, 670, 677, 678, 748, 830, 861, 875, 877, 878, 889, 895, 935, 988, 992, 994, 998, 1001, 1002, 1008, 1010, 1011, 1013, 1025, 1026, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1047], "covari": [9, 12, 30, 34, 36, 80, 84, 86, 104, 107, 128, 129, 153, 160, 204, 230, 246, 248, 250, 251, 252, 253, 254, 269, 296, 370, 390, 395, 399, 408, 411, 413, 418, 481, 482, 483, 484, 503, 514, 518, 526, 531, 533, 540, 547, 548, 549, 562, 609, 610, 612, 621, 622, 630, 643, 644, 649, 653, 655, 681, 682, 685, 688, 692, 795, 796, 797, 816, 987, 994, 998, 1010, 1011, 1025, 1026, 1031, 1033, 1034, 1035, 1036, 1038, 1040], "wine": [9, 243, 312, 313, 374, 509, 1026], "tool": [9, 11, 171, 237, 260, 265, 363, 370, 374, 375, 376, 379, 381, 383, 384, 385, 386, 387, 388, 389, 394, 395, 396, 397, 398, 399, 402, 408, 409, 410, 486, 691, 700, 977, 983, 984, 988, 994, 998, 1003, 1005, 1008, 1009, 1013, 1015, 1024, 1038, 1041, 1044, 1045, 1046], "purpos": [9, 12, 17, 38, 87, 165, 215, 216, 217, 222, 224, 238, 250, 252, 258, 259, 339, 340, 347, 352, 353, 363, 376, 381, 383, 394, 395, 396, 398, 401, 405, 408, 409, 413, 415, 416, 417, 418, 637, 822, 823, 860, 985, 988, 989, 991, 994, 1006, 1008, 1015, 1043, 1045], "awar": [9, 15, 147, 162, 336, 352, 379, 381, 383, 393, 396, 412, 416, 566, 567, 647, 653, 654, 655, 657, 658, 668, 679, 846, 875, 994, 998, 1004, 1028, 1031, 1032, 1045], "thing": [9, 35, 223, 257, 352, 368, 369, 376, 380, 381, 383, 393, 396, 408, 410, 416, 558, 559, 984, 998, 1013, 1037], "trivial": [9, 203, 357, 381, 408, 815, 902, 905, 985, 1009, 1031], "dimens": [9, 12, 13, 15, 38, 41, 54, 83, 86, 91, 96, 150, 155, 157, 159, 161, 172, 184, 185, 199, 224, 226, 230, 234, 235, 241, 248, 249, 289, 290, 294, 310, 343, 352, 353, 354, 376, 378, 382, 395, 407, 408, 413, 414, 418, 420, 441, 442, 444, 446, 447, 448, 451, 463, 464, 481, 482, 483, 492, 493, 514, 523, 524, 528, 529, 532, 540, 548, 581, 582, 583, 584, 586, 588, 596, 610, 618, 621, 640, 643, 658, 689, 690, 691, 693, 694, 698, 762, 821, 840, 841, 845, 859, 892, 893, 894, 902, 903, 904, 905, 906, 920, 921, 922, 951, 959, 962, 978, 980, 982, 984, 985, 986, 989, 991, 992, 994, 1000, 1003, 1015, 1022, 1023, 1038, 1040, 1041, 1043], "below": [9, 13, 26, 27, 28, 33, 35, 56, 61, 71, 76, 81, 90, 91, 96, 111, 117, 120, 121, 126, 145, 170, 172, 184, 197, 198, 201, 203, 217, 218, 223, 227, 232, 237, 240, 242, 244, 257, 260, 265, 267, 268, 269, 307, 311, 317, 318, 319, 320, 321, 322, 323, 344, 352, 361, 363, 368, 374, 375, 379, 381, 383, 385, 386, 390, 395, 396, 398, 408, 410, 411, 412, 413, 415, 416, 417, 418, 445, 447, 470, 471, 477, 490, 491, 493, 494, 495, 496, 497, 499, 500, 501, 503, 504, 509, 530, 536, 541, 547, 581, 594, 595, 596, 597, 598, 599, 632, 645, 651, 657, 658, 666, 667, 672, 674, 691, 698, 704, 741, 761, 795, 796, 797, 808, 811, 829, 860, 863, 873, 874, 877, 883, 889, 977, 978, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 994, 995, 996, 998, 1002, 1003, 1004, 1005, 1008, 1017, 1024, 1027, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "main": [9, 17, 33, 63, 87, 100, 123, 168, 230, 271, 283, 316, 347, 352, 367, 368, 369, 374, 379, 381, 383, 385, 387, 389, 393, 394, 395, 397, 398, 406, 407, 408, 413, 415, 416, 418, 502, 524, 529, 548, 549, 624, 712, 830, 900, 901, 977, 985, 987, 988, 995, 1000, 1009, 1012, 1021, 1024, 1031, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "empir": [9, 13, 25, 26, 35, 37, 43, 44, 60, 64, 65, 69, 78, 80, 81, 83, 84, 168, 181, 219, 268, 307, 406, 412, 415, 418, 446, 448, 459, 468, 469, 470, 473, 476, 477, 531, 533, 538, 540, 542, 548, 550, 564, 589, 602, 638, 648, 666, 670, 677, 678, 715, 720, 721, 722, 825, 835, 836, 837, 839, 858, 881, 923, 962, 980, 982, 988, 990, 992, 998, 1000, 1002, 1010, 1025, 1026], "mode": [9, 10, 47, 48, 81, 201, 230, 285, 287, 304, 317, 381, 384, 389, 390, 393, 405, 411, 415, 419, 442, 443, 446, 448, 451, 458, 461, 470, 471, 477, 481, 486, 507, 508, 556, 560, 563, 591, 594, 595, 597, 598, 599, 609, 626, 643, 644, 657, 658, 665, 667, 672, 673, 674, 675, 678, 681, 682, 688, 692, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 856, 900, 902, 905, 908, 910, 926, 936, 937, 939, 991, 994, 1008, 1015, 1016, 1023, 1032, 1040, 1045, 1048], "stick": [9, 795, 987], "bias": [9, 28, 83, 99, 126, 132, 170, 171, 173, 267, 376, 397, 406, 415, 523, 548, 856, 880, 891, 983, 987, 996, 1002, 1004], "yet": [9, 58, 185, 219, 252, 263, 354, 369, 376, 380, 385, 393, 397, 398, 399, 412, 413, 415, 416, 418, 447, 451, 460, 461, 464, 471, 552, 553, 554, 555, 566, 567, 568, 569, 576, 592, 593, 601, 626, 670, 672, 674, 776, 859, 897, 972, 977, 984, 988, 994, 1002, 1009, 1040, 1048], "extent": [9, 59, 155, 156, 157, 234, 345, 348, 439, 534, 695, 795, 988], "assum": [9, 35, 56, 58, 160, 166, 170, 171, 190, 201, 219, 230, 233, 253, 262, 271, 307, 347, 354, 368, 380, 381, 383, 385, 387, 393, 394, 395, 397, 402, 405, 406, 408, 410, 412, 413, 415, 416, 418, 419, 424, 429, 436, 438, 443, 445, 449, 456, 462, 468, 469, 470, 471, 472, 473, 474, 475, 502, 507, 508, 531, 541, 547, 548, 560, 561, 566, 567, 586, 587, 588, 590, 619, 631, 642, 643, 645, 646, 651, 657, 658, 659, 660, 661, 665, 666, 667, 670, 671, 675, 676, 677, 680, 684, 686, 687, 691, 708, 724, 733, 739, 754, 762, 767, 772, 776, 779, 797, 800, 801, 811, 836, 842, 843, 846, 847, 848, 850, 851, 856, 867, 880, 948, 964, 965, 966, 978, 982, 984, 986, 987, 988, 990, 991, 993, 994, 995, 998, 1002, 1004, 1037, 1043], "parametr": [9, 25, 26, 83, 233, 289, 311, 320, 406, 409, 414, 415, 436, 550, 552, 634, 684, 695, 876, 888, 931, 932, 984, 987, 990, 991, 998, 1001, 1004, 1039, 1041, 1044], "minimum": [9, 13, 56, 58, 81, 126, 127, 149, 190, 211, 234, 240, 272, 291, 292, 383, 390, 398, 401, 405, 408, 415, 416, 440, 444, 445, 449, 453, 455, 468, 469, 472, 473, 474, 475, 510, 512, 540, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 593, 626, 630, 631, 634, 636, 667, 670, 675, 677, 678, 681, 682, 691, 704, 723, 777, 778, 800, 801, 821, 836, 857, 858, 869, 870, 873, 874, 875, 879, 893, 894, 907, 908, 909, 910, 911, 917, 920, 921, 924, 940, 985, 988, 992, 994, 998, 1000, 1004, 1031, 1034, 1038, 1039, 1043, 1044], "determin": [9, 11, 14, 20, 47, 56, 81, 113, 115, 119, 158, 171, 180, 181, 197, 204, 262, 307, 312, 343, 354, 361, 363, 380, 381, 383, 390, 394, 395, 405, 406, 408, 412, 413, 415, 416, 417, 418, 431, 436, 440, 441, 442, 444, 446, 448, 449, 455, 458, 459, 460, 464, 468, 469, 471, 472, 473, 474, 475, 481, 482, 483, 487, 490, 491, 494, 496, 502, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 536, 538, 541, 542, 551, 552, 553, 555, 557, 558, 559, 560, 561, 562, 564, 566, 567, 569, 581, 582, 583, 587, 590, 593, 601, 606, 607, 609, 610, 611, 612, 613, 614, 615, 618, 619, 620, 621, 622, 623, 624, 626, 634, 635, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 671, 672, 673, 674, 675, 677, 678, 679, 686, 688, 689, 691, 692, 693, 706, 710, 721, 727, 728, 736, 781, 782, 783, 785, 786, 791, 797, 799, 800, 801, 803, 811, 819, 820, 821, 822, 823, 824, 825, 827, 831, 833, 834, 836, 843, 845, 846, 851, 856, 857, 858, 864, 865, 873, 874, 875, 877, 881, 889, 900, 901, 903, 906, 909, 911, 914, 935, 951, 959, 962, 977, 980, 982, 987, 991, 993, 994, 998, 1001, 1002, 1004, 1015, 1031, 1036, 1039, 1040, 1042, 1043, 1044], "outli": [9, 81, 395, 468, 473, 984, 994], "skew": [9, 126, 204, 234, 240, 307, 323, 373, 412, 638, 639, 640, 641, 876, 888, 984, 998, 1026, 1034, 1038, 1047], "Of": [9, 26, 28, 165, 367, 383, 408, 416, 978], "screen": [9, 1044], "presenc": [9, 61, 63, 81, 82, 111, 170, 174, 185, 205, 240, 307, 379, 382, 395, 410, 413, 711, 724, 754, 767, 829, 863, 871, 873, 880, 972, 978, 984, 988, 989, 1002, 1034, 1035, 1037, 1041, 1043, 1045], "univari": [9, 10, 37, 48, 69, 73, 75, 140, 144, 145, 147, 151, 168, 183, 200, 216, 275, 334, 350, 373, 407, 408, 409, 416, 444, 503, 524, 529, 591, 594, 595, 597, 598, 599, 601, 604, 605, 606, 607, 608, 626, 627, 628, 629, 644, 797, 802, 822, 826, 860, 861, 870, 875, 879, 880, 900, 905, 984, 1003, 1005, 1010, 1011, 1023, 1026, 1031, 1037], "appli": [9, 13, 15, 20, 26, 28, 33, 41, 45, 47, 48, 56, 57, 59, 63, 72, 74, 76, 87, 91, 96, 97, 103, 105, 107, 118, 119, 126, 146, 153, 171, 173, 185, 190, 205, 206, 215, 222, 223, 224, 230, 235, 237, 262, 263, 265, 274, 283, 294, 307, 311, 312, 318, 339, 343, 354, 361, 363, 367, 373, 381, 383, 389, 393, 394, 395, 405, 406, 407, 408, 409, 410, 412, 413, 415, 416, 417, 418, 420, 439, 445, 451, 461, 463, 464, 466, 468, 473, 481, 482, 483, 484, 507, 508, 515, 516, 517, 523, 530, 531, 532, 533, 534, 536, 538, 540, 541, 542, 547, 548, 549, 552, 553, 556, 557, 558, 559, 563, 564, 565, 587, 588, 589, 590, 626, 631, 632, 637, 638, 640, 641, 657, 658, 667, 675, 676, 677, 690, 698, 700, 706, 724, 754, 756, 757, 779, 786, 790, 791, 797, 811, 826, 829, 835, 836, 837, 838, 839, 849, 859, 860, 869, 876, 877, 880, 885, 886, 888, 889, 890, 891, 896, 907, 908, 909, 910, 911, 920, 926, 929, 936, 937, 960, 978, 980, 984, 985, 986, 987, 988, 990, 992, 994, 998, 1002, 1003, 1004, 1005, 1007, 1013, 1032, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1045], "ellipticenvelop": [9, 230, 469, 472, 473, 474, 475, 562, 994, 1031, 1034, 1038, 1039, 1044], "decisionboundarydisplai": [9, 31, 32, 35, 57, 115, 129, 134, 184, 193, 210, 215, 265, 288, 293, 296, 312, 335, 336, 337, 338, 340, 341, 343, 358, 1045, 1046, 1048], "oneclasssvm": [9, 11, 17, 215, 230, 320, 338, 562, 676, 846, 994, 1002, 1003, 1033, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046], "support_fract": [9, 468, 473], "contamin": [9, 81, 82, 230, 240, 291, 292, 468, 562, 846, 994, 1039, 1047], "ocsvm": [9, 215], "line": [9, 11, 13, 17, 18, 41, 44, 61, 71, 81, 92, 96, 101, 113, 119, 125, 152, 163, 165, 166, 168, 171, 172, 189, 190, 191, 193, 196, 197, 199, 202, 203, 204, 209, 210, 212, 213, 215, 230, 234, 235, 238, 240, 259, 266, 268, 269, 291, 295, 298, 308, 319, 338, 341, 343, 344, 348, 349, 352, 375, 376, 379, 381, 382, 383, 385, 386, 387, 388, 389, 393, 413, 414, 415, 437, 486, 487, 488, 507, 508, 541, 552, 553, 554, 555, 609, 612, 613, 631, 669, 685, 699, 700, 701, 803, 819, 956, 982, 988, 992, 995, 1002, 1008, 1010, 1012, 1022, 1024, 1033, 1042, 1044, 1047, 1048], "mline": [9, 81, 215, 291, 338, 341], "load_win": [9, 243, 312, 844, 852, 1028, 1042], "red": [9, 10, 11, 27, 34, 35, 61, 81, 93, 96, 97, 98, 116, 133, 136, 162, 177, 180, 181, 191, 199, 227, 241, 257, 268, 298, 302, 308, 312, 313, 328, 339, 360, 379, 395, 408, 413, 989], "frontier": [9, 215, 291, 338, 994, 1022], "legend_lin": 9, "response_method": [9, 31, 35, 57, 115, 129, 134, 184, 193, 210, 215, 265, 288, 293, 296, 312, 335, 336, 338, 343, 358, 630, 631, 632, 697, 699, 701, 740, 988, 1048], "decision_funct": [9, 11, 17, 26, 28, 57, 115, 129, 142, 213, 214, 215, 231, 237, 240, 269, 291, 292, 301, 309, 337, 338, 339, 343, 344, 345, 349, 383, 395, 406, 415, 436, 468, 548, 549, 552, 554, 558, 560, 562, 566, 592, 593, 630, 631, 632, 657, 658, 665, 667, 673, 674, 675, 676, 697, 699, 701, 706, 719, 724, 725, 733, 737, 738, 740, 754, 780, 786, 787, 792, 797, 800, 801, 811, 821, 828, 829, 830, 831, 846, 860, 867, 897, 900, 902, 904, 905, 984, 988, 994, 995, 1002, 1003, 1022, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1048], "plot_method": [9, 35, 184, 215, 288, 293, 335, 337, 338, 340, 341, 343, 630], "contour": [9, 11, 17, 35, 47, 48, 81, 122, 142, 150, 156, 157, 159, 212, 213, 214, 215, 230, 235, 251, 291, 298, 337, 338, 340, 341, 343, 344, 345, 378, 388, 630, 631, 994, 1002], "line2d": [9, 81, 215, 291, 338, 341, 803, 819], "bbox_arg": 9, "dict": [9, 10, 11, 12, 18, 27, 40, 46, 71, 74, 75, 103, 119, 126, 128, 199, 207, 230, 239, 249, 260, 261, 263, 266, 269, 271, 285, 289, 309, 313, 321, 330, 339, 353, 354, 369, 373, 375, 383, 393, 395, 409, 412, 419, 420, 422, 426, 430, 432, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 495, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 696, 697, 699, 700, 701, 712, 760, 763, 769, 777, 778, 795, 796, 797, 800, 801, 803, 808, 809, 811, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 915, 925, 926, 942, 945, 948, 977, 988, 998, 1019, 1020, 1024, 1026, 1031, 1037, 1038, 1047, 1048], "boxstyl": [9, 309], "fc": [9, 290, 376], "arrow_arg": 9, "arrowstyl": 9, "xy": [9, 27, 50, 269, 298, 344, 398, 645, 646, 649, 650, 651, 652, 653, 654, 659, 660, 661, 662, 663, 680, 681, 682, 683, 685], "xycoord": [9, 27], "textcoord": [9, 177], "xytext": [9, 27, 177], "bbox": [9, 12, 35, 46, 103, 247, 248, 249, 252, 253, 309], "arrowprop": [9, 27], "ash": [9, 378, 1034, 1037], "malic_acid": 9, "abil": [9, 13, 62, 81, 97, 126, 152, 153, 154, 158, 160, 161, 162, 163, 165, 168, 170, 171, 173, 201, 205, 219, 230, 352, 369, 398, 415, 416, 418, 610, 621, 624, 780, 781, 782, 785, 985, 988, 991, 994, 1004, 1009, 1010, 1031, 1033, 1038, 1040, 1044, 1045], "locat": [9, 26, 54, 55, 73, 81, 82, 195, 298, 319, 339, 374, 379, 381, 385, 386, 389, 390, 398, 408, 410, 414, 447, 459, 460, 468, 469, 470, 471, 472, 473, 474, 475, 487, 499, 500, 503, 504, 511, 514, 973, 978, 984, 989, 994, 998, 1004, 1039], "hard": [9, 201, 230, 234, 262, 264, 369, 380, 393, 395, 408, 413, 416, 533, 540, 568, 675, 902, 903, 904, 905, 906, 984, 1001, 1003, 1004, 1009, 1022, 1023, 1024, 1040, 1041], "due": [9, 13, 27, 28, 54, 56, 61, 76, 113, 116, 153, 171, 172, 180, 185, 192, 199, 201, 203, 218, 219, 234, 240, 248, 270, 271, 283, 285, 312, 313, 343, 347, 352, 353, 354, 379, 381, 387, 395, 398, 406, 408, 412, 413, 415, 418, 442, 445, 446, 458, 534, 538, 542, 543, 573, 670, 797, 800, 801, 805, 807, 811, 821, 822, 825, 828, 832, 833, 865, 869, 870, 880, 978, 984, 985, 987, 988, 989, 991, 995, 1002, 1003, 1009, 1023, 1031, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "banana": [9, 988], "anywai": [9, 352, 383, 664, 684, 685], "rid": [9, 1002], "difficulti": [9, 28, 219, 307, 369, 381, 406, 857, 858, 987, 991], "bandwidth": [9, 45, 64, 236, 289, 290, 298, 393, 395, 408, 414, 447, 457, 460, 840, 841, 845, 981, 994, 1042, 1046], "compromis": [9, 172, 367, 381, 646, 678, 991, 1034], "risk": [9, 56, 201, 205, 219, 308, 347, 363, 380, 381, 395, 407, 412, 415, 566, 567, 885, 886, 888, 889, 890, 891, 984, 988, 1013, 1038], "flavanoid": [9, 378], "color_intens": 9, "407": [9, 16, 150, 378, 1010], "plot_outlier_detection_win": [9, 16, 1010], "anomali": [9, 11, 81, 129, 168, 215, 218, 229, 240, 245, 291, 292, 376, 407, 468, 511, 521, 562, 638, 676, 846, 861, 904, 994, 1008, 1010, 1037, 1038], "toi": [9, 11, 21, 37, 40, 41, 42, 43, 48, 50, 53, 54, 56, 57, 58, 68, 69, 81, 87, 100, 116, 129, 134, 135, 168, 183, 191, 205, 215, 218, 229, 240, 245, 247, 291, 292, 302, 336, 346, 374, 387, 393, 415, 416, 439, 440, 441, 443, 445, 447, 448, 449, 451, 457, 468, 511, 513, 521, 562, 638, 676, 724, 754, 796, 846, 853, 861, 880, 904, 985, 987, 988, 994, 998, 1010, 1026], "lof": [9, 168, 215, 230, 240, 286, 299, 338, 562, 846, 904, 994, 1010], "discrimin": [9, 10, 15, 30, 36, 79, 80, 81, 82, 83, 105, 145, 147, 150, 168, 177, 216, 223, 238, 252, 294, 370, 378, 406, 415, 474, 511, 548, 549, 565, 630, 781, 849, 977, 985, 988, 991, 1002, 1004, 1010, 1011, 1022, 1026, 1034], "ellipsoid": [9, 30, 34, 36, 81, 82, 83, 168, 246, 247, 249, 250, 251, 252, 253, 254, 548, 549, 630, 795, 796, 982, 987, 1010], "mahalanobi": [9, 78, 82, 84, 104, 168, 204, 408, 410, 449, 456, 468, 469, 470, 471, 472, 473, 474, 475, 698, 776, 777, 778, 847, 982, 994, 1010, 1039, 1042, 1043], "distanc": [9, 40, 41, 56, 58, 61, 62, 66, 68, 78, 82, 84, 101, 104, 150, 165, 168, 174, 187, 202, 204, 222, 224, 227, 234, 240, 285, 287, 288, 293, 295, 297, 298, 307, 312, 317, 321, 322, 343, 352, 353, 367, 378, 390, 393, 395, 405, 408, 410, 413, 414, 418, 419, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 454, 455, 456, 457, 458, 460, 461, 462, 467, 468, 469, 470, 471, 472, 473, 474, 475, 537, 539, 546, 606, 607, 614, 618, 619, 621, 622, 627, 657, 658, 665, 667, 673, 674, 675, 676, 677, 687, 688, 689, 691, 692, 693, 694, 695, 698, 702, 723, 732, 756, 758, 760, 761, 762, 763, 766, 767, 768, 769, 770, 771, 776, 777, 778, 779, 790, 791, 794, 829, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 879, 894, 898, 900, 902, 904, 905, 906, 908, 909, 910, 911, 978, 982, 985, 986, 988, 994, 998, 1000, 1002, 1003, 1009, 1010, 1022, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "goal": [10, 18, 21, 53, 58, 87, 165, 172, 177, 201, 216, 219, 239, 240, 259, 260, 352, 368, 369, 376, 383, 386, 387, 395, 396, 397, 413, 417, 541, 547, 589, 592, 737, 988, 991, 993, 994, 1002, 1003, 1004, 1006, 1013, 1015, 1018, 1022, 1024, 1039], "boxplot": [10, 81, 127, 171, 174, 317], "gc": 10, "defaultdict": [10, 13, 20, 26, 174, 265, 353, 354], "make_regress": [10, 76, 180, 182, 183, 187, 204, 205, 275, 318, 363, 377, 383, 384, 394, 553, 555, 559, 564, 634, 645, 646, 648, 650, 652, 654, 662, 663, 664, 666, 670, 678, 858, 901, 988, 989, 991], "randomforestregressor": [10, 119, 132, 133, 136, 165, 166, 319, 394, 415, 556, 557, 559, 561, 565, 567, 569, 631, 632, 910, 978, 1036, 1037, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "sgdregressor": [10, 212, 367, 369, 393, 407, 645, 648, 666, 670, 675, 678, 858, 901, 906, 984, 1002, 1033, 1035, 1037, 1038, 1039, 1042, 1044, 1045, 1046, 1047], "shuffl": [10, 13, 15, 21, 22, 25, 28, 33, 49, 61, 62, 96, 119, 120, 122, 133, 166, 185, 209, 210, 215, 230, 263, 267, 268, 275, 285, 314, 326, 327, 328, 329, 341, 352, 353, 363, 376, 390, 395, 403, 468, 473, 487, 488, 490, 491, 494, 496, 502, 510, 511, 512, 513, 514, 518, 521, 523, 530, 536, 538, 539, 545, 546, 552, 553, 554, 555, 563, 564, 566, 567, 601, 657, 658, 665, 666, 667, 671, 673, 675, 676, 677, 686, 797, 799, 800, 801, 802, 803, 811, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 830, 857, 858, 881, 900, 901, 902, 905, 936, 937, 959, 983, 984, 989, 996, 1002, 1003, 1019, 1024, 1026, 1031, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042], "atomic_benchmark_estim": 10, "verbos": [10, 43, 51, 55, 65, 71, 73, 75, 133, 188, 263, 303, 304, 307, 320, 330, 352, 379, 385, 395, 402, 439, 442, 446, 448, 451, 453, 458, 461, 463, 466, 470, 471, 477, 530, 535, 536, 537, 538, 539, 542, 544, 545, 546, 547, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 592, 593, 626, 631, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 675, 676, 677, 678, 679, 680, 681, 682, 683, 686, 689, 691, 693, 763, 776, 795, 796, 797, 800, 801, 803, 811, 819, 821, 822, 823, 824, 825, 827, 829, 831, 834, 849, 856, 857, 858, 859, 860, 861, 862, 897, 900, 901, 902, 903, 904, 905, 906, 954, 1009, 1033, 1034, 1036, 1038, 1039, 1040, 1042, 1043, 1045, 1046], "n_instanc": [10, 632], "zero": [10, 11, 14, 28, 35, 38, 41, 42, 53, 55, 80, 82, 83, 96, 99, 101, 115, 116, 125, 127, 128, 132, 147, 150, 166, 180, 185, 187, 192, 194, 195, 200, 201, 202, 205, 206, 207, 211, 216, 219, 234, 237, 238, 240, 247, 251, 253, 259, 262, 267, 271, 272, 290, 307, 318, 319, 343, 347, 353, 354, 357, 361, 367, 368, 376, 383, 387, 395, 406, 407, 408, 410, 413, 415, 416, 417, 418, 421, 445, 451, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 486, 496, 507, 508, 522, 525, 526, 530, 531, 534, 536, 537, 538, 539, 541, 542, 546, 547, 551, 556, 557, 558, 559, 560, 561, 563, 564, 565, 580, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 610, 635, 638, 642, 643, 644, 649, 657, 658, 663, 664, 665, 666, 667, 670, 675, 676, 677, 684, 685, 702, 708, 711, 712, 714, 715, 723, 727, 728, 732, 736, 738, 744, 781, 782, 783, 785, 794, 795, 812, 813, 816, 817, 829, 840, 841, 842, 843, 844, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 863, 870, 872, 873, 875, 876, 877, 879, 880, 886, 887, 888, 889, 893, 900, 908, 909, 910, 911, 935, 974, 978, 984, 986, 987, 990, 991, 992, 998, 999, 1000, 1002, 1003, 1004, 1015, 1022, 1024, 1031, 1033, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "atomic_benchmark": 10, "percentil": [10, 13, 72, 126, 240, 244, 307, 367, 591, 594, 595, 597, 598, 599, 602, 605, 631, 632, 746, 998, 1036, 1044], "bulk_benchmark_estim": 10, "n_bulk_repeat": 10, "whole": [10, 51, 75, 124, 136, 166, 202, 259, 266, 339, 343, 357, 367, 379, 381, 393, 394, 409, 411, 415, 418, 448, 482, 537, 554, 555, 556, 557, 562, 563, 564, 565, 569, 684, 685, 797, 800, 801, 811, 824, 835, 836, 837, 838, 839, 977, 988, 998, 1024, 1039, 1041], "bulk_benchmark": 10, "benchmark_estim": 10, "repeat": [10, 34, 67, 80, 82, 125, 150, 153, 159, 160, 172, 177, 203, 257, 262, 263, 274, 280, 327, 353, 354, 383, 390, 395, 396, 405, 406, 407, 408, 413, 416, 417, 587, 592, 606, 607, 614, 626, 633, 658, 802, 812, 813, 816, 926, 978, 987, 1026, 1039, 1041], "atomic_runtim": 10, "bulk_runtim": 10, "pair": [10, 13, 38, 45, 59, 65, 101, 115, 117, 122, 126, 142, 157, 161, 181, 184, 193, 210, 213, 219, 234, 257, 262, 269, 271, 331, 335, 337, 339, 340, 341, 343, 345, 353, 358, 376, 393, 395, 405, 406, 409, 412, 416, 418, 436, 439, 440, 444, 449, 456, 462, 470, 471, 477, 492, 507, 508, 581, 591, 594, 595, 597, 598, 599, 609, 612, 613, 614, 616, 618, 619, 621, 622, 624, 626, 631, 632, 642, 691, 698, 699, 704, 705, 706, 714, 729, 738, 756, 757, 761, 764, 767, 768, 769, 770, 771, 772, 774, 776, 777, 778, 779, 780, 784, 828, 840, 841, 915, 988, 989, 990, 991, 998, 1004, 1031, 1043, 1044, 1046, 1047, 1048], "contain": [10, 13, 20, 25, 28, 34, 41, 50, 57, 59, 71, 72, 115, 117, 121, 129, 159, 171, 172, 174, 177, 192, 205, 219, 230, 237, 240, 241, 244, 252, 260, 262, 268, 271, 272, 283, 291, 292, 294, 307, 320, 327, 330, 352, 353, 374, 375, 376, 378, 381, 383, 385, 386, 387, 388, 389, 390, 394, 395, 402, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 420, 422, 432, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 461, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 495, 499, 501, 502, 503, 507, 508, 509, 513, 514, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 684, 685, 687, 688, 689, 690, 691, 695, 696, 697, 699, 700, 701, 708, 711, 733, 734, 735, 766, 770, 777, 778, 786, 792, 795, 796, 797, 800, 801, 803, 811, 815, 816, 819, 823, 824, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 919, 920, 921, 940, 941, 943, 944, 951, 955, 977, 978, 980, 986, 989, 992, 994, 998, 999, 1001, 1004, 1008, 1015, 1024, 1031, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "generate_dataset": 10, "coef": [10, 55, 106, 170, 171, 180, 185, 188, 192, 193, 195, 200, 204, 205, 206, 210, 217, 244, 275, 303, 323, 348, 523, 645, 646, 648, 651, 652, 658, 659, 660, 661, 662, 668, 671, 673, 679, 680, 681, 682, 683, 684, 685, 686, 992], "random_se": [10, 93, 122], "x_scaler": 10, "y_scaler": 10, "ok": [10, 381, 994], "boxplot_runtim": 10, "pred_typ": 10, "micro": [10, 298, 330, 367, 706, 712, 727, 728, 736, 781, 782, 785, 786, 988, 1031, 1039, 1040, 1046], "bp": [10, 127, 150, 189, 190, 378, 996], "cls_info": 10, "estimator_conf": 10, "whisker": 10, "flier": 10, "marker": [10, 11, 18, 28, 31, 35, 38, 39, 43, 53, 56, 59, 60, 61, 64, 65, 86, 92, 93, 98, 102, 119, 132, 160, 161, 177, 189, 194, 196, 198, 199, 201, 203, 204, 216, 218, 223, 247, 249, 250, 257, 262, 264, 265, 266, 292, 307, 312, 328, 357, 381, 385, 416, 1039, 1041, 1042, 1047], "linestyl": [10, 11, 17, 34, 61, 74, 81, 104, 106, 113, 125, 135, 139, 142, 153, 156, 158, 160, 162, 173, 174, 186, 188, 189, 190, 201, 202, 203, 207, 211, 213, 214, 219, 238, 240, 259, 261, 265, 266, 271, 290, 298, 302, 308, 337, 340, 341, 343, 344, 345, 347, 1020], "major": [10, 15, 35, 119, 269, 307, 311, 317, 318, 319, 320, 321, 322, 323, 343, 354, 367, 376, 380, 381, 384, 387, 393, 396, 408, 412, 414, 416, 550, 568, 569, 693, 912, 914, 988, 991, 1002, 1009, 1013, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "lightgrei": 10, "set_axisbelow": 10, "capit": [10, 26, 803, 819], "clf_name": [10, 352], "n_feature_influ": 10, "nber": 10, "estimator_nam": [10, 209, 383, 388, 437, 575, 697, 699, 701, 919], "percentile_perf_in_u": 10, "plot_n_features_influ": 10, "il": [10, 663, 684, 685, 984, 988], "benchmark_throughput": 10, "duration_sec": 10, "estimator_config": 10, "n_predict": 10, "plot_benchmark_throughput": 10, "cls_valu": 10, "sec": [10, 209, 224, 227, 285], "1e2": [10, 153, 160, 236, 253, 339, 744], "randomforest": [10, 122, 367, 415, 908, 909, 1036], "0001": [10, 150, 209, 260, 383, 420, 442, 446, 458, 470, 471, 477, 532, 537, 539, 546, 548, 549, 558, 559, 645, 646, 647, 648, 651, 652, 657, 658, 659, 660, 661, 662, 667, 668, 671, 673, 675, 677, 679, 686, 688, 692, 857, 858, 900, 901, 977], "250": [10, 66, 126, 177, 222, 343, 492, 691, 977, 1000, 1038], "500": [10, 45, 51, 58, 61, 62, 64, 86, 87, 104, 106, 117, 119, 127, 149, 153, 177, 214, 215, 223, 241, 242, 247, 248, 252, 262, 265, 275, 285, 291, 297, 311, 318, 323, 345, 349, 367, 415, 468, 469, 473, 474, 475, 481, 482, 483, 610, 612, 613, 615, 620, 623, 624, 649, 650, 653, 654, 655, 679, 681, 682, 858, 977, 1003], "867": [10, 16, 75, 1010], "plot_prediction_lat": [10, 16, 1010], "anova": [10, 55, 75, 140, 144, 146, 149, 150, 151, 168, 260, 334, 350, 409, 503, 514, 591, 594, 595, 597, 598, 599, 603, 604, 605, 608, 712, 822, 826, 860, 861, 880, 900, 905, 1003, 1010], "ledoit": [10, 15, 30, 35, 36, 78, 79, 82, 83, 84, 168, 294, 472, 474, 478, 479, 511, 548, 982, 1010], "wolf": [10, 15, 30, 35, 36, 78, 79, 82, 83, 84, 168, 294, 472, 474, 478, 479, 511, 548, 982, 1010, 1038], "oa": [10, 15, 30, 35, 36, 78, 82, 83, 84, 104, 128, 168, 294, 296, 410, 468, 469, 472, 473, 475, 476, 511, 548, 797, 982, 1010], "conserv": [11, 395, 581, 588, 892, 893, 987, 1000], "biologi": 11, "south": [11, 171, 298, 414], "american": [11, 12, 71, 82, 376, 408, 410, 414, 415, 416, 468, 473, 729, 880], "mammal": 11, "past": [11, 13, 385, 386, 389, 393, 396, 412, 413, 415, 537, 554, 555, 677, 1013, 1016, 1047], "environment": [11, 185, 219], "unsuccess": 11, "cast": [11, 54, 201, 223, 375, 395, 396, 416, 495, 643, 644, 645, 651, 655, 656, 659, 660, 661, 662, 663, 664, 672, 674, 953, 1038, 1039, 1040, 1041, 1044, 1046], "densiti": [11, 50, 56, 61, 66, 76, 102, 106, 150, 156, 168, 187, 201, 202, 216, 219, 226, 230, 234, 246, 247, 248, 253, 254, 262, 268, 280, 286, 291, 292, 299, 307, 312, 339, 352, 378, 390, 395, 408, 415, 419, 427, 443, 445, 447, 449, 451, 463, 466, 497, 501, 535, 540, 548, 549, 795, 796, 797, 840, 841, 845, 846, 893, 982, 984, 987, 991, 993, 994, 1000, 1008, 1010, 1011, 1015, 1025, 1026, 1033, 1035, 1039, 1040, 1046, 1047], "phillip": [11, 298, 497], "2006": [11, 298, 415, 418, 461, 497, 556, 557, 564, 565, 609, 610, 613, 618, 621, 648, 665, 666, 739, 786, 787, 795, 835, 893, 910, 911, 984, 988, 990, 993, 1000, 1001], "basemap": [11, 298], "coast": [11, 298], "nation": [11, 81, 298, 376, 847], "boundari": [11, 14, 26, 27, 28, 32, 35, 59, 61, 112, 115, 122, 131, 135, 137, 142, 154, 155, 157, 168, 172, 184, 202, 210, 230, 235, 238, 265, 276, 293, 295, 296, 298, 301, 307, 309, 312, 325, 330, 332, 334, 336, 337, 338, 339, 341, 348, 349, 350, 358, 377, 406, 415, 416, 418, 449, 455, 503, 535, 548, 549, 568, 587, 588, 590, 630, 733, 759, 797, 829, 842, 848, 850, 851, 852, 875, 879, 896, 897, 902, 904, 905, 908, 924, 982, 991, 994, 998, 1001, 1002, 1003, 1010, 1031, 1033, 1035, 1044, 1045, 1046, 1048], "america": [11, 12, 81, 298, 847, 998], "bradypu": [11, 298, 497], "variegatu": [11, 298, 497], "brown": [11, 93, 298, 497, 627, 978, 1036, 1038, 1039, 1040, 1043], "throat": [11, 298, 497], "sloth": [11, 298, 497], "microryzomi": [11, 298, 497], "minutu": [11, 298, 497], "known": [11, 18, 26, 28, 40, 50, 58, 59, 82, 105, 106, 133, 158, 160, 166, 185, 201, 202, 219, 230, 262, 264, 271, 294, 298, 308, 320, 326, 336, 343, 353, 369, 378, 379, 381, 384, 389, 393, 395, 404, 405, 406, 408, 409, 410, 411, 412, 413, 415, 416, 418, 437, 462, 481, 483, 497, 507, 508, 543, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 587, 588, 590, 593, 608, 621, 632, 657, 658, 671, 681, 682, 693, 703, 709, 712, 717, 727, 741, 753, 755, 793, 829, 835, 836, 837, 838, 839, 842, 847, 850, 856, 884, 908, 909, 910, 911, 978, 980, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 998, 1003, 1004, 1015, 1020, 1022, 1023], "forest": [11, 28, 32, 112, 113, 118, 122, 124, 125, 127, 128, 129, 131, 133, 136, 137, 165, 168, 169, 175, 177, 230, 259, 261, 263, 298, 319, 352, 360, 363, 374, 394, 395, 406, 407, 417, 462, 463, 489, 490, 494, 495, 497, 514, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 629, 633, 797, 802, 826, 833, 860, 874, 904, 908, 909, 910, 977, 978, 989, 996, 1009, 1010, 1011, 1026, 1028, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1048], "rice": [11, 298, 497, 1044], "rat": [11, 298, 497], "rodent": [11, 298, 497], "live": [11, 71, 171, 298, 381, 408, 497, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624], "peru": [11, 298, 497], "colombia": [11, 298, 497], "ecuador": [11, 298, 497], "venezuela": [11, 298, 497], "entropi": [11, 242, 274, 298, 319, 326, 327, 363, 408, 415, 420, 497, 532, 556, 563, 606, 607, 657, 716, 734, 735, 739, 793, 908, 910, 984, 985, 988, 992, 1004, 1033, 1035, 1039, 1040, 1045, 1047, 1048], "anderson": [11, 298, 497, 1037, 1043], "schapir": [11, 280, 298, 415, 497, 552, 553], "ecolog": [11, 298, 497], "190": [11, 105, 108, 125, 219, 271, 298, 387, 497, 1010], "231": [11, 298, 408, 419, 443, 497, 583], "259": [11, 150, 199, 220, 224, 298, 415, 497, 566, 567, 1010], "________________________________________________________________________________": [11, 55, 352], "coastlin": [11, 150, 298, 378], "coverag": [11, 13, 126, 201, 219, 298, 384, 404, 497, 626, 719], "area": [11, 13, 129, 150, 201, 219, 240, 259, 262, 269, 271, 272, 339, 343, 344, 348, 378, 381, 385, 393, 408, 416, 701, 705, 706, 707, 740, 786, 787, 985, 988, 991, 1007, 1033], "roc": [11, 26, 118, 150, 168, 229, 231, 240, 241, 245, 255, 257, 264, 269, 278, 329, 388, 406, 412, 503, 509, 563, 657, 701, 705, 706, 707, 725, 740, 780, 786, 787, 816, 826, 829, 867, 905, 994, 1010, 1028, 1033, 1034, 1036, 1037, 1041, 1043, 1047], "868443": 11, "993919": 11, "elaps": [11, 48, 68, 119, 120, 121, 367, 463, 466, 568, 569, 859, 860, 861, 862], "astro": [11, 160, 222, 250], "washington": [11, 160, 222, 250, 290, 298], "fetch_species_distribut": [11, 298, 1040], "bunch": [11, 374, 375, 376, 463, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 506, 509, 566, 567, 568, 569, 631, 632, 633, 859, 860, 908, 909, 910, 911, 945, 948, 1013, 1024, 1036, 1038, 1041, 1043, 1047], "ll": [11, 56, 121, 257, 298, 381, 393, 531, 540, 980, 991, 1004, 1015], "otherwis": [11, 57, 63, 115, 162, 166, 182, 203, 209, 298, 343, 347, 363, 369, 379, 383, 385, 387, 395, 399, 408, 410, 412, 416, 418, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 448, 450, 452, 453, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 495, 525, 526, 532, 533, 534, 535, 537, 539, 540, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 587, 589, 590, 593, 596, 601, 609, 610, 613, 630, 631, 632, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 684, 685, 689, 691, 695, 696, 697, 699, 701, 702, 706, 708, 712, 713, 722, 724, 725, 726, 727, 728, 736, 739, 750, 752, 753, 754, 764, 772, 776, 779, 780, 781, 782, 783, 785, 786, 787, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 811, 815, 816, 819, 824, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 857, 858, 860, 863, 864, 865, 866, 867, 871, 872, 879, 880, 881, 882, 885, 886, 887, 889, 890, 891, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 915, 921, 923, 936, 937, 947, 949, 972, 974, 983, 984, 985, 988, 991, 992, 994, 995, 998, 1000, 1002, 1003, 1008, 1013, 1015, 1033, 1039, 1040, 1041, 1044, 1047], "improvis": [11, 298], "mpl_toolkit": [11, 46, 68, 91, 102, 103, 172, 198, 222, 224, 298], "except": [11, 17, 45, 54, 99, 111, 119, 209, 216, 230, 237, 270, 285, 298, 302, 303, 307, 309, 322, 370, 374, 381, 383, 384, 385, 386, 393, 395, 399, 402, 405, 409, 412, 413, 415, 416, 418, 431, 459, 464, 467, 481, 482, 483, 508, 553, 555, 556, 557, 559, 561, 563, 564, 567, 569, 610, 626, 629, 634, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 669, 671, 672, 677, 678, 686, 710, 776, 804, 833, 834, 840, 841, 843, 846, 851, 857, 858, 864, 878, 880, 898, 901, 903, 906, 909, 911, 941, 974, 984, 988, 1003, 1015, 1023, 1024, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1048], "importerror": [11, 17, 54, 99, 285, 298, 389], "construct_grid": [11, 298], "object": [11, 14, 15, 20, 27, 45, 51, 63, 67, 71, 72, 99, 111, 133, 139, 148, 149, 158, 168, 172, 185, 197, 201, 217, 219, 229, 237, 241, 243, 244, 245, 260, 269, 271, 272, 274, 298, 313, 320, 321, 323, 326, 353, 354, 363, 374, 375, 376, 381, 382, 384, 386, 387, 388, 390, 394, 395, 396, 399, 402, 408, 409, 410, 413, 416, 417, 418, 422, 424, 429, 431, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 698, 699, 700, 701, 710, 717, 730, 731, 740, 756, 757, 779, 780, 787, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 915, 920, 921, 922, 923, 924, 927, 931, 933, 943, 944, 945, 946, 947, 948, 949, 951, 953, 954, 956, 973, 974, 976, 984, 985, 986, 987, 991, 994, 995, 998, 1001, 1002, 1003, 1008, 1009, 1010, 1015, 1016, 1018, 1019, 1022, 1024, 1026, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "func": [11, 76, 118, 171, 181, 219, 298, 381, 409, 464, 698, 864, 998, 1035, 1037, 1039, 1040, 1048], "xgrid": [11, 298], "ygrid": [11, 298], "correspond": [11, 13, 14, 17, 21, 27, 33, 42, 54, 66, 79, 83, 98, 113, 116, 119, 120, 122, 129, 146, 149, 150, 154, 159, 162, 171, 190, 193, 201, 202, 205, 210, 219, 231, 236, 237, 244, 252, 261, 263, 265, 266, 271, 272, 298, 312, 319, 320, 321, 353, 357, 358, 363, 368, 375, 376, 377, 380, 381, 383, 385, 388, 389, 394, 395, 396, 405, 406, 408, 410, 411, 412, 413, 415, 416, 417, 418, 423, 429, 436, 438, 440, 444, 447, 450, 452, 458, 460, 462, 463, 471, 481, 482, 483, 489, 490, 491, 492, 493, 494, 495, 533, 540, 543, 544, 545, 548, 549, 551, 554, 556, 558, 559, 560, 563, 581, 583, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 616, 629, 631, 632, 634, 642, 643, 644, 645, 646, 647, 651, 657, 658, 659, 660, 661, 667, 668, 670, 671, 672, 673, 674, 675, 677, 679, 680, 681, 682, 686, 689, 690, 691, 693, 702, 709, 712, 722, 723, 732, 736, 740, 750, 752, 772, 776, 780, 786, 787, 792, 794, 795, 796, 797, 800, 801, 803, 811, 819, 821, 829, 832, 835, 836, 837, 838, 839, 840, 841, 845, 846, 847, 849, 857, 858, 867, 870, 871, 873, 874, 877, 881, 889, 900, 901, 902, 905, 908, 909, 910, 911, 925, 931, 945, 948, 963, 977, 978, 980, 981, 982, 984, 985, 987, 988, 989, 991, 992, 993, 994, 995, 998, 999, 1002, 1003, 1007, 1015, 1021, 1024, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "coordin": [11, 12, 14, 55, 101, 132, 157, 186, 222, 263, 298, 367, 413, 418, 442, 446, 447, 448, 460, 470, 471, 477, 530, 536, 537, 538, 539, 541, 542, 544, 545, 546, 547, 549, 613, 645, 646, 650, 651, 652, 653, 654, 655, 657, 659, 660, 661, 662, 680, 681, 682, 683, 687, 688, 689, 692, 693, 705, 762, 767, 900, 984, 985, 1003, 1022, 1031, 1034, 1035, 1036, 1040, 1042, 1044, 1045, 1046], "corner": [11, 14, 27, 54, 170, 259, 263, 271, 272, 298, 381, 497, 912, 914, 988, 1045], "cell": [11, 12, 21, 27, 33, 72, 73, 118, 120, 121, 129, 130, 133, 136, 147, 150, 158, 171, 172, 173, 182, 231, 232, 233, 237, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 298, 304, 313, 318, 319, 321, 322, 328, 361, 378, 386, 691, 988, 989, 1037, 1045], "xmin": [11, 79, 191, 193, 210, 211, 298], "x_left_lower_corn": [11, 298, 497], "grid_siz": [11, 62, 298, 497], "xmax": [11, 79, 191, 193, 210, 211, 298], "nx": [11, 298, 497], "ymin": [11, 79, 188, 190, 193, 194, 202, 210, 262, 298], "y_left_lower_corn": [11, 298, 497], "ny": [11, 13, 261, 298, 378, 497, 978, 1000], "create_species_bunch": 11, "species_nam": [11, 298], "record": [11, 97, 117, 173, 237, 313, 354, 367, 381, 408, 410, 449, 456, 497, 619, 642, 691, 769, 772, 776, 777, 778, 779, 823, 846, 1044, 1045], "join": [11, 12, 20, 56, 165, 219, 262, 309, 376, 396, 462, 1024, 1031, 1039], "ascii": [11, 298, 416, 486, 587, 588, 590], "pt": [11, 376, 417, 876, 998], "desir": [11, 25, 115, 150, 166, 201, 203, 307, 311, 374, 381, 383, 385, 389, 402, 405, 408, 411, 412, 413, 417, 502, 537, 539, 543, 546, 566, 592, 601, 602, 663, 669, 684, 685, 698, 707, 734, 840, 841, 845, 860, 865, 867, 870, 871, 873, 874, 876, 877, 881, 884, 886, 888, 889, 924, 980, 982, 985, 991, 998, 1002, 1003, 1004, 1015, 1031, 1039, 1040, 1041, 1044], "pts_": 11, "ix": [11, 271, 346], "searchsort": 11, "dd": [11, 12, 131, 298, 497], "ii": [11, 97, 172, 208, 257, 378, 416, 581, 582, 588, 637, 665, 666, 863, 872, 984, 998, 1007], "lat": [11, 298, 497, 762], "cov_": [11, 83], "plot_species_distribut": 11, "bradypus_variegatus_0": 11, "microryzomys_minutus_0": 11, "meshgrid": [11, 17, 27, 43, 59, 81, 122, 131, 154, 155, 156, 157, 159, 172, 212, 213, 214, 215, 227, 230, 251, 291, 298, 301, 309, 310, 331, 338, 339, 344, 345, 348, 349, 630], "bv_bunch": 11, "mm_bunch": 11, "background_point": 11, "c_": [11, 17, 26, 27, 28, 59, 81, 97, 102, 122, 125, 130, 131, 140, 142, 155, 199, 214, 217, 230, 291, 310, 312, 331, 339, 345, 348, 349, 408, 658, 713, 714, 717, 988, 1019, 1022, 1023], "randint": [11, 38, 82, 93, 125, 166, 173, 225, 233, 237, 239, 274, 319, 383, 386, 394, 399, 801, 818, 835, 836, 837, 839, 977, 978], "land": [11, 298, 396, 415], "water": 11, "land_refer": [11, 298], "standard": [11, 12, 13, 21, 27, 33, 35, 56, 62, 71, 72, 74, 81, 82, 87, 97, 113, 116, 118, 119, 120, 121, 122, 129, 133, 150, 153, 158, 160, 162, 171, 180, 186, 190, 199, 201, 210, 222, 223, 224, 235, 240, 252, 257, 260, 261, 262, 263, 265, 307, 312, 337, 352, 367, 368, 373, 374, 375, 377, 378, 379, 381, 383, 384, 386, 387, 390, 393, 395, 398, 402, 404, 408, 410, 411, 412, 416, 418, 445, 467, 471, 487, 495, 500, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 521, 523, 524, 529, 531, 534, 540, 551, 589, 593, 610, 633, 643, 644, 649, 650, 653, 654, 655, 663, 664, 671, 672, 673, 674, 675, 677, 686, 688, 692, 786, 803, 818, 819, 837, 840, 841, 842, 843, 844, 846, 848, 849, 850, 851, 852, 853, 854, 864, 869, 870, 873, 876, 877, 878, 880, 888, 889, 890, 891, 898, 900, 901, 920, 977, 980, 984, 985, 988, 990, 991, 992, 994, 1002, 1003, 1009, 1013, 1015, 1020, 1022, 1023, 1024, 1026, 1037, 1038, 1039, 1040, 1042, 1043, 1044], "cov_train": 11, "train_cover_std": 11, "cyl": [11, 298], "llcrnrlat": [11, 298], "urcrnrlat": [11, 298], "llcrnrlon": [11, 298], "urcrnrlon": [11, 298], "drawcoastlin": [11, 298], "drawcountri": [11, 298], "9998": [11, 298], "solid": [11, 17, 32, 34, 125, 156, 213, 214, 230, 240, 298, 309, 1013], "z": [11, 17, 59, 102, 122, 142, 155, 157, 172, 211, 213, 214, 222, 224, 230, 235, 251, 291, 298, 301, 309, 312, 331, 339, 344, 345, 349, 378, 405, 413, 415, 552, 553, 584, 638, 663, 670, 684, 685, 688, 692, 698, 722, 783, 880, 984, 985, 992, 993, 1046], "float64": [11, 14, 49, 54, 72, 125, 127, 128, 171, 172, 273, 321, 322, 368, 375, 381, 383, 395, 416, 470, 471, 477, 495, 496, 507, 508, 541, 580, 581, 588, 590, 640, 657, 672, 674, 698, 736, 865, 873, 874, 902, 903, 905, 906, 909, 911, 918, 920, 959, 962, 964, 965, 966, 1003, 1015, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "idx": [11, 17, 20, 46, 56, 106, 115, 119, 122, 134, 162, 172, 174, 185, 193, 200, 201, 210, 223, 358, 409, 412], "9999": [11, 219, 298, 329, 497, 626, 1039], "coverages_land": 11, "contourf": [11, 17, 122, 215, 235, 291, 298, 301, 309, 310, 331, 338, 344, 349, 630, 631], "pts_train": 11, "pts_test": 11, "auc": [11, 26, 150, 201, 219, 240, 259, 262, 266, 269, 271, 272, 406, 701, 707, 786, 988, 1036, 1039, 1043], "pred_background": 11, "pred_test": 11, "cov_test": 11, "r_": [11, 102, 106, 214, 215, 248, 269, 291, 292, 338, 344, 349, 408, 706, 988, 1004], "fpr": [11, 231, 240, 259, 271, 272, 388, 591, 595, 697, 701, 705, 725, 787, 988, 1028, 1031, 1047], "tpr": [11, 231, 240, 259, 271, 272, 388, 701, 705, 787, 988, 1028, 1031, 1047], "threshold": [11, 26, 43, 66, 93, 99, 106, 150, 168, 172, 174, 196, 231, 233, 259, 260, 261, 269, 272, 283, 323, 325, 332, 358, 361, 395, 408, 413, 415, 417, 440, 441, 444, 445, 468, 499, 507, 508, 530, 536, 541, 547, 548, 549, 562, 587, 590, 592, 596, 601, 602, 643, 666, 670, 675, 677, 691, 697, 699, 701, 702, 705, 706, 719, 724, 725, 737, 738, 754, 780, 786, 787, 792, 795, 796, 816, 835, 846, 847, 863, 865, 867, 883, 895, 896, 897, 905, 912, 914, 962, 984, 988, 991, 992, 994, 998, 1001, 1003, 1004, 1009, 1010, 1031, 1035, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1048], "roc_curv": [11, 231, 259, 271, 701, 705, 725, 780, 786, 988, 1031, 1032, 1033, 1036, 1037, 1039, 1044, 1047], "roc_auc": [11, 150, 262, 266, 271, 272, 388, 633, 701, 988, 1028], "ntime": [11, 273], "plot_species_distribution_model": [11, 16, 497, 1010], "multi": [11, 32, 51, 92, 112, 114, 116, 117, 122, 124, 131, 134, 136, 137, 142, 155, 157, 168, 179, 184, 185, 187, 188, 190, 193, 200, 208, 217, 220, 221, 224, 228, 229, 230, 238, 241, 245, 255, 259, 271, 278, 283, 300, 302, 305, 308, 309, 310, 317, 322, 331, 335, 344, 348, 349, 352, 356, 357, 358, 359, 361, 362, 368, 376, 378, 383, 384, 390, 395, 398, 408, 415, 416, 418, 425, 436, 451, 461, 468, 473, 494, 495, 503, 504, 509, 513, 514, 518, 519, 521, 540, 548, 549, 550, 552, 554, 556, 557, 558, 560, 563, 564, 566, 568, 609, 630, 632, 642, 645, 646, 651, 652, 656, 657, 659, 660, 661, 662, 665, 667, 671, 672, 673, 674, 675, 680, 683, 689, 702, 712, 719, 732, 738, 740, 781, 797, 811, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 847, 848, 850, 856, 857, 858, 861, 867, 880, 884, 895, 896, 900, 902, 905, 908, 909, 910, 912, 913, 914, 920, 923, 926, 977, 989, 991, 995, 998, 1002, 1008, 1009, 1010, 1011, 1015, 1021, 1025, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1047, 1048], "iri": [11, 18, 31, 32, 34, 42, 46, 75, 89, 94, 95, 98, 100, 101, 102, 107, 108, 112, 113, 114, 115, 117, 124, 131, 134, 137, 142, 146, 152, 154, 157, 158, 161, 163, 168, 177, 179, 184, 193, 194, 198, 220, 235, 238, 244, 249, 256, 267, 268, 271, 272, 277, 288, 294, 296, 301, 302, 309, 319, 325, 330, 332, 334, 335, 337, 339, 341, 342, 343, 350, 356, 357, 359, 360, 361, 362, 374, 375, 394, 408, 409, 412, 413, 415, 495, 503, 540, 548, 552, 556, 563, 609, 621, 630, 675, 797, 811, 895, 896, 897, 900, 905, 908, 912, 913, 914, 977, 978, 982, 987, 988, 991, 995, 998, 1001, 1002, 1003, 1004, 1010, 1015, 1022, 1023, 1026, 1044], "emploi": [12, 153, 236, 410, 416, 449, 477, 581, 588, 996, 1013, 1023, 1037], "techniqu": [12, 19, 71, 73, 98, 107, 114, 124, 141, 149, 150, 166, 168, 170, 209, 224, 226, 267, 280, 289, 320, 327, 343, 357, 369, 378, 393, 395, 406, 407, 408, 412, 413, 414, 415, 416, 417, 446, 447, 448, 449, 533, 553, 676, 688, 692, 693, 724, 754, 980, 984, 985, 987, 988, 991, 994, 996, 1000, 1002, 1004, 1009, 1013, 1018, 1023, 1024, 1044], "histor": [12, 201, 1009], "quot": [12, 15, 71, 263, 352, 353, 368, 375, 376, 379, 385, 404, 407, 487, 488, 495, 988, 1000, 1003, 1024, 1046], "quantiti": [12, 123, 262, 269, 319, 367, 395, 408, 415, 720, 721, 722, 783, 856, 977, 979, 982, 984, 1036], "daili": [12, 1013], "price": [12, 76, 123, 133, 240, 313, 978, 984, 1013, 1020], "link": [12, 18, 113, 171, 172, 180, 201, 205, 219, 247, 265, 295, 357, 368, 379, 380, 381, 382, 383, 385, 389, 395, 406, 408, 410, 413, 418, 560, 561, 609, 647, 668, 679, 687, 704, 919, 921, 984, 991, 1004, 1005, 1008, 1012, 1018, 1022, 1024, 1029, 1031, 1034, 1035, 1038, 1039, 1042, 1048], "fluctuat": [12, 61, 201, 269, 1039], "normalesup": [12, 33, 47, 67, 235], "2003": [12, 405, 408, 413, 416, 450, 451, 461, 512, 514, 688, 692, 835, 837, 984, 985, 990, 1000, 1039], "2008": [12, 410, 412, 413, 477, 533, 562, 589, 644, 663, 684, 685, 691, 715, 724, 754, 830, 835, 839, 856, 982, 985, 986, 988, 989, 990, 993, 994, 1003], "calm": 12, "ago": [12, 1009], "tech": [12, 378, 838], "firm": [12, 408], "crash": [12, 381, 467, 890, 891, 898, 998, 1035, 1039, 1047, 1048], "nasdaq": 12, "alphavantag": 12, "symbol_dict": 12, "tot": 12, "xom": 12, "exxon": 12, "cvx": 12, "chevron": 12, "cop": 12, "conocophillip": 12, "vlo": 12, "valero": 12, "energi": [12, 389, 856, 993, 1022], "msft": 12, "ibm": [12, 20, 330, 354, 376], "twx": 12, "warner": [12, 1046, 1047], "cmcsa": 12, "comcast": 12, "cvc": 12, "cablevis": 12, "yhoo": 12, "yahoo": 12, "dell": 12, "hpq": 12, "hp": [12, 1024], "amzn": 12, "amazon": 12, "tm": [12, 991], "toyota": 12, "caj": 12, "canon": [12, 395, 406, 415, 481, 482, 484, 766, 1009, 1011, 1026], "sne": [12, 168, 221, 222, 223, 224, 226, 228, 285, 513, 524, 691, 1010, 1025, 1026], "soni": [12, 1041, 1043], "ford": 12, "hmc": 12, "honda": 12, "nav": 12, "navistar": 12, "noc": 12, "northrop": 12, "grumman": 12, "ba": [12, 857, 858, 992], "boe": 12, "ko": [12, 27, 154], "coca": 12, "cola": 12, "mmm": 12, "3m": 12, "mcd": [12, 81, 82, 410, 468, 473], "mcdonald": 12, "pep": [12, 389, 1031], "pepsi": 12, "kellogg": 12, "un": [12, 381, 406, 416, 420, 532, 588, 793, 863, 872, 883, 887, 1040], "unilev": 12, "mar": [12, 1006], "marriott": 12, "pg": [12, 387, 648, 984, 1036], "procter": 12, "gambl": 12, "colgat": [12, 18], "palmol": 12, "ge": [12, 979, 990, 1043], "electr": [12, 378, 408], "wfc": 12, "fargo": 12, "jpm": 12, "jpmorgan": [12, 1013], "chase": [12, 1031], "aig": 12, "axp": 12, "bac": 12, "bank": [12, 20, 1013], "goldman": 12, "sach": 12, "aapl": 12, "appl": [12, 367, 379, 393, 989], "sap": 12, "csco": 12, "cisco": 12, "txn": 12, "texa": [12, 71], "instrument": [12, 71, 97, 170], "xrx": 12, "xerox": 12, "wmt": 12, "wal": 12, "mart": [12, 1041], "hd": 12, "depot": 12, "gsk": 12, "glaxosmithklin": 12, "pfe": 12, "pfizer": 12, "sny": 12, "sanofi": 12, "aventi": 12, "nv": 12, "novarti": 12, "kmb": 12, "kimberli": 12, "clark": 12, "ryder": 12, "gd": [12, 136], "dynam": [12, 13, 172, 554, 555, 556, 557, 562, 563, 564, 565, 578, 579, 675, 676, 677, 1004, 1013, 1037, 1043, 1048], "rtn": 12, "raytheon": 12, "cat": [12, 72, 172, 173, 240, 320, 321, 322, 323, 376, 416, 581, 711, 717, 752, 781, 881, 988, 998, 1040, 1041, 1043], "caterpillar": 12, "dupont": 12, "nemour": 12, "symbol": [12, 354, 368, 383, 387, 410, 416, 498, 581, 587, 588, 590, 912, 914, 1008], "fetch": [12, 18, 133, 171, 219, 374, 375, 376, 381, 385, 386, 389, 407, 413, 495, 554, 555, 556, 557, 562, 563, 564, 565, 587, 588, 590, 1039, 1047], "histori": [12, 370, 558, 559, 1006, 1031], "stderr": [12, 829], "url": [12, 18, 150, 375, 378, 383, 385], "githubusercont": 12, "master": [12, 17, 285, 322, 381, 385, 1013, 1036], "financi": [12, 408, 415, 984], "csv": [12, 375, 378, 386, 1012, 1039, 1044], "read_csv": [12, 386, 495, 1046], "close_pric": 12, "vstack": [12, 27, 58, 66, 156, 157, 183, 247, 251, 285, 298, 344, 630, 989, 1039], "q": [12, 72, 86, 126, 201, 320, 405, 408, 413, 936, 984, 1003], "open_pric": 12, "carri": [12, 32, 113, 166, 262, 265, 270, 302, 309, 354, 396, 402, 416, 556, 557, 558, 559, 563, 564, 565, 908, 909, 910, 911, 1013, 1023], "invers": [12, 35, 55, 78, 79, 80, 82, 84, 113, 168, 252, 269, 271, 277, 288, 339, 353, 354, 373, 395, 407, 409, 411, 412, 413, 416, 420, 444, 464, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 526, 532, 533, 534, 538, 540, 542, 556, 560, 563, 588, 589, 590, 627, 643, 644, 657, 658, 665, 667, 673, 674, 675, 676, 677, 679, 722, 741, 750, 795, 796, 842, 843, 850, 851, 857, 858, 860, 864, 867, 873, 874, 876, 892, 893, 900, 901, 902, 905, 906, 908, 910, 926, 982, 984, 988, 991, 992, 998, 1002, 1003, 1010, 1022, 1024, 1025, 1026, 1031, 1034, 1039, 1042, 1043, 1045], "correl": [12, 28, 83, 86, 87, 107, 120, 121, 127, 130, 146, 149, 150, 158, 168, 169, 170, 172, 173, 175, 185, 190, 196, 219, 262, 268, 283, 313, 318, 319, 329, 374, 377, 378, 386, 395, 397, 405, 410, 412, 417, 449, 456, 481, 482, 484, 492, 493, 499, 523, 563, 605, 608, 626, 633, 634, 635, 681, 682, 741, 755, 776, 777, 778, 826, 840, 841, 877, 878, 880, 889, 979, 984, 989, 995, 998, 1002, 1004, 1009, 1010, 1011, 1026, 1031, 1032, 1033, 1044, 1045], "condition": [12, 28, 201, 406, 410, 756, 982], "connect": [12, 40, 45, 48, 52, 55, 63, 67, 68, 379, 381, 390, 395, 410, 440, 444, 451, 461, 462, 584, 585, 694, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 986, 991, 993, 1001, 1035, 1044], "edge_model": 12, "graphicallassocv": [12, 83, 399, 410, 470, 472, 473, 474, 475, 477, 1039, 1043, 1045, 1047], "rather": [12, 54, 83, 113, 116, 165, 171, 201, 202, 215, 240, 311, 312, 352, 353, 363, 368, 377, 381, 383, 386, 387, 389, 393, 394, 395, 396, 408, 412, 413, 415, 416, 418, 447, 460, 462, 564, 580, 587, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 628, 645, 646, 651, 652, 659, 660, 661, 662, 779, 811, 831, 833, 834, 863, 900, 901, 912, 937, 982, 984, 985, 988, 990, 991, 995, 1009, 1019, 1022, 1031, 1032, 1033, 1034, 1038, 1039, 1040, 1041, 1046, 1047], "former": [12, 354, 415, 416, 564, 799, 806, 815, 990, 1031, 1037, 1040], "recoveri": [12, 83, 185, 200, 410, 417], "03162278": 12, "05994843": 12, "11364637": 12, "21544347": 12, "40842387": 12, "77426368": 12, "46779927": 12, "7825594": 12, "27499706": 12, "rerun": [12, 27, 43, 72, 73, 118, 120, 121, 129, 130, 133, 136, 147, 158, 171, 172, 173, 182, 231, 232, 233, 237, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 304, 313, 318, 319, 321, 322, 328, 361, 389], "trust": [12, 27, 72, 73, 82, 113, 118, 120, 121, 129, 130, 133, 136, 147, 158, 171, 172, 173, 174, 182, 231, 232, 233, 237, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 304, 313, 318, 319, 321, 322, 328, 361, 385, 396, 402, 406, 1019, 1045], "unabl": [12, 27, 72, 73, 118, 120, 121, 129, 130, 133, 136, 147, 158, 170, 171, 172, 173, 182, 185, 201, 231, 232, 233, 237, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 304, 313, 318, 319, 321, 322, 328, 361, 369, 880, 998, 1040], "render": [12, 27, 54, 72, 73, 118, 120, 121, 129, 130, 133, 136, 147, 158, 171, 172, 173, 182, 196, 205, 231, 232, 233, 237, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 304, 313, 318, 319, 321, 322, 328, 361, 381, 383, 385, 386, 387, 395, 550, 588, 630, 699, 701, 877, 889, 912, 914, 987, 1004, 1044, 1048], "nbviewer": [12, 27, 72, 73, 118, 120, 121, 129, 130, 133, 136, 147, 158, 171, 172, 173, 182, 231, 232, 233, 237, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 304, 313, 318, 319, 321, 322, 328, 361], "nbsp": [12, 13, 27, 72, 73, 118, 120, 121, 126, 129, 130, 133, 136, 147, 158, 171, 172, 173, 182, 190, 231, 232, 233, 237, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 304, 313, 318, 319, 321, 322, 328, 361], "graphicallassocvifittedgraphicallassocv": 12, "group": [12, 38, 41, 56, 59, 61, 135, 172, 174, 201, 223, 237, 253, 257, 313, 328, 353, 361, 376, 386, 395, 396, 399, 408, 414, 415, 416, 433, 445, 494, 587, 588, 590, 593, 717, 786, 797, 798, 799, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 827, 873, 874, 910, 911, 984, 985, 987, 988, 989, 998, 1004, 1005, 1006, 1008, 1015, 1018, 1019, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1047, 1048], "amongst": [12, 1004], "indic": [12, 20, 21, 26, 27, 28, 49, 60, 61, 67, 76, 87, 91, 96, 113, 118, 158, 161, 166, 170, 172, 198, 224, 234, 237, 256, 264, 265, 268, 269, 285, 298, 326, 327, 330, 352, 353, 354, 361, 368, 376, 381, 382, 383, 385, 389, 390, 393, 395, 404, 405, 406, 408, 410, 412, 413, 415, 416, 419, 423, 436, 439, 443, 449, 450, 451, 452, 454, 455, 456, 459, 463, 466, 471, 486, 507, 508, 510, 511, 512, 522, 531, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 580, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 619, 626, 627, 628, 629, 631, 632, 638, 646, 649, 650, 652, 653, 654, 660, 662, 664, 672, 674, 681, 682, 689, 691, 693, 695, 702, 706, 711, 712, 717, 718, 719, 723, 726, 727, 728, 729, 732, 736, 737, 738, 739, 752, 769, 776, 777, 778, 779, 781, 782, 783, 785, 786, 790, 791, 792, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 831, 833, 834, 840, 841, 842, 843, 844, 846, 848, 850, 851, 852, 864, 867, 871, 873, 881, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 914, 916, 920, 921, 926, 941, 951, 952, 978, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 998, 999, 1002, 1003, 1009, 1015, 1019, 1022, 1024, 1031, 1032, 1033, 1034, 1035, 1036, 1039, 1041, 1042, 1044, 1046, 1047, 1048], "reflect": [12, 41, 47, 48, 81, 93, 97, 123, 172, 173, 201, 219, 271, 289, 353, 377, 380, 385, 395, 397, 405, 449, 455, 985, 988, 994, 996, 1023, 1032, 1040], "properti": [12, 26, 160, 161, 203, 218, 248, 287, 312, 361, 367, 370, 374, 381, 383, 398, 405, 406, 408, 410, 413, 415, 417, 418, 423, 441, 444, 450, 451, 452, 463, 464, 541, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 589, 590, 592, 593, 596, 609, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 631, 645, 651, 654, 659, 661, 673, 674, 698, 703, 704, 707, 797, 800, 801, 811, 828, 829, 859, 860, 873, 874, 875, 881, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 977, 980, 983, 984, 985, 988, 989, 991, 994, 998, 1001, 1003, 1004, 1005, 1009, 1015, 1036, 1040, 1041, 1044, 1045, 1048], "impact": [12, 13, 26, 37, 38, 43, 44, 60, 64, 65, 69, 76, 113, 146, 168, 170, 171, 172, 181, 203, 205, 219, 240, 256, 280, 288, 312, 322, 347, 353, 363, 367, 368, 374, 393, 396, 406, 408, 413, 446, 448, 535, 539, 546, 589, 665, 666, 667, 671, 673, 675, 676, 677, 691, 792, 797, 800, 801, 811, 823, 840, 841, 842, 877, 889, 900, 901, 923, 937, 959, 962, 977, 987, 995, 1003, 1010, 1038, 1041, 1044], "affinity_propag": [12, 45], "covariance_": [12, 35, 81, 83, 468, 469, 470, 471, 472, 473, 474, 475, 548, 549, 982, 1038], "n_label": [12, 93, 238, 395, 486, 522, 712, 719, 724, 737, 738, 752, 754, 790, 791, 817, 988, 1037, 1039], "lai": [12, 312, 343, 994], "canva": [12, 17], "manifold": [12, 40, 53, 68, 118, 225, 226, 227, 228, 234, 285, 294, 295, 317, 321, 322, 328, 370, 374, 395, 408, 413, 415, 501, 524, 529, 543, 548, 565, 849, 861, 870, 893, 923, 991, 1010, 1025, 1026, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1048], "dens": [12, 14, 56, 168, 179, 185, 195, 220, 321, 322, 330, 367, 390, 395, 408, 413, 415, 417, 442, 445, 446, 448, 463, 466, 495, 522, 523, 526, 533, 534, 543, 565, 584, 585, 606, 607, 628, 651, 656, 657, 658, 665, 666, 667, 671, 672, 675, 676, 677, 686, 687, 688, 691, 692, 758, 759, 765, 777, 790, 857, 858, 865, 872, 873, 875, 877, 878, 879, 880, 889, 890, 891, 892, 893, 900, 901, 902, 903, 905, 906, 938, 959, 962, 978, 981, 984, 985, 988, 989, 991, 994, 998, 1000, 1001, 1002, 1003, 1004, 1010, 1031, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "eigen_solv": [12, 45, 47, 67, 222, 223, 413, 451, 461, 534, 687, 688, 690, 692, 694, 985, 1032, 1041, 1044, 1045, 1046], "arpack": [12, 20, 45, 47, 67, 71, 223, 413, 450, 451, 452, 461, 534, 540, 543, 687, 688, 690, 692, 694, 985, 1037, 1038, 1043, 1047, 1048], "don": [12, 55, 71, 124, 171, 223, 237, 238, 262, 285, 329, 336, 340, 352, 353, 367, 375, 381, 383, 385, 387, 389, 393, 394, 399, 409, 416, 645, 651, 828, 908, 909, 910, 911, 952, 977, 984, 987, 989, 992, 994, 1002, 1012, 1024, 1035, 1040, 1047, 1048], "control": [12, 17, 35, 62, 100, 101, 119, 139, 158, 160, 185, 202, 205, 209, 233, 234, 263, 265, 280, 287, 304, 318, 320, 343, 357, 359, 360, 367, 368, 374, 377, 381, 383, 386, 389, 393, 395, 398, 402, 407, 408, 411, 412, 413, 414, 417, 418, 433, 439, 448, 453, 470, 471, 477, 530, 535, 536, 537, 538, 539, 542, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 592, 593, 595, 613, 618, 624, 626, 631, 633, 638, 640, 641, 645, 646, 648, 649, 650, 651, 653, 654, 655, 671, 673, 675, 676, 681, 682, 686, 691, 700, 708, 795, 796, 797, 799, 800, 801, 802, 803, 811, 812, 813, 814, 815, 816, 817, 819, 821, 822, 823, 824, 826, 827, 830, 831, 834, 857, 858, 879, 881, 892, 893, 900, 901, 902, 903, 905, 906, 908, 909, 910, 911, 914, 954, 956, 975, 977, 984, 985, 987, 988, 989, 991, 994, 995, 998, 1000, 1002, 1003, 1004, 1008, 1009, 1011, 1022, 1026, 1031, 1033, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "neighbor": [12, 32, 40, 45, 48, 61, 67, 73, 129, 131, 134, 141, 165, 166, 223, 224, 226, 227, 230, 233, 239, 240, 256, 265, 277, 289, 290, 291, 292, 294, 295, 296, 298, 299, 303, 319, 321, 322, 352, 370, 373, 378, 390, 395, 398, 408, 414, 415, 416, 419, 422, 432, 440, 443, 444, 447, 449, 451, 456, 457, 460, 462, 495, 501, 503, 562, 569, 601, 606, 607, 626, 627, 630, 687, 688, 689, 690, 691, 692, 695, 779, 797, 826, 860, 861, 880, 896, 904, 962, 989, 994, 1009, 1010, 1011, 1018, 1023, 1025, 1026, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "node": [12, 42, 123, 127, 185, 317, 323, 357, 361, 389, 390, 408, 410, 413, 415, 440, 441, 444, 462, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 649, 653, 655, 681, 682, 691, 840, 841, 908, 909, 910, 911, 912, 914, 942, 956, 991, 993, 994, 995, 1004, 1034, 1035, 1036, 1037, 1038, 1040, 1043, 1044, 1045, 1046], "plane": [12, 150, 213, 235, 291, 341, 343, 344, 349, 378, 451, 461, 982, 984, 1003, 1022], "node_position_model": 12, "locallylinearembed": [12, 222, 223, 224, 321, 687, 689, 691, 985, 991, 1036, 1037, 1045, 1046, 1047], "n_neighbor": [12, 45, 63, 68, 134, 165, 222, 223, 224, 226, 230, 240, 285, 287, 288, 291, 292, 293, 294, 297, 312, 317, 319, 352, 415, 451, 601, 606, 607, 627, 687, 688, 690, 692, 695, 842, 843, 844, 846, 848, 849, 853, 895, 896, 978, 985, 991, 994, 1001, 1038, 1045, 1047, 1048], "output": [12, 15, 17, 26, 28, 38, 51, 54, 60, 99, 112, 113, 114, 116, 122, 133, 136, 137, 141, 142, 153, 161, 165, 166, 168, 171, 197, 229, 237, 241, 244, 245, 250, 256, 260, 262, 265, 269, 271, 272, 280, 285, 308, 311, 313, 314, 317, 320, 321, 323, 353, 354, 356, 357, 359, 361, 362, 374, 375, 376, 378, 381, 383, 387, 389, 393, 394, 395, 406, 407, 408, 409, 411, 412, 415, 416, 417, 418, 424, 429, 432, 436, 440, 441, 442, 444, 445, 446, 448, 449, 451, 458, 459, 461, 462, 463, 464, 465, 466, 467, 481, 482, 483, 484, 487, 490, 491, 492, 493, 494, 495, 496, 502, 504, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 610, 626, 627, 628, 629, 630, 631, 632, 634, 637, 638, 639, 640, 641, 645, 646, 649, 651, 652, 653, 656, 657, 659, 660, 661, 662, 665, 666, 667, 670, 672, 673, 675, 677, 678, 680, 681, 682, 683, 687, 688, 689, 691, 693, 695, 698, 699, 712, 713, 720, 721, 722, 724, 726, 733, 743, 744, 746, 748, 749, 750, 751, 752, 754, 759, 765, 770, 783, 786, 788, 789, 795, 796, 799, 800, 801, 802, 803, 809, 811, 812, 813, 814, 815, 816, 817, 821, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 843, 844, 845, 849, 850, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 888, 889, 892, 893, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 921, 923, 926, 937, 938, 944, 945, 947, 955, 975, 977, 978, 980, 982, 984, 985, 988, 989, 990, 991, 992, 995, 998, 1003, 1010, 1011, 1015, 1016, 1018, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "edg": [12, 27, 47, 67, 99, 123, 225, 269, 389, 395, 405, 408, 410, 452, 560, 561, 584, 585, 587, 588, 590, 795, 837, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 865, 913, 998, 1001, 1013, 1037, 1039, 1042, 1045], "displai": [12, 13, 26, 28, 35, 38, 47, 49, 61, 72, 82, 83, 86, 87, 90, 96, 119, 124, 129, 130, 133, 165, 168, 171, 172, 186, 188, 219, 229, 230, 240, 243, 244, 245, 251, 259, 263, 264, 269, 271, 272, 276, 295, 313, 318, 319, 338, 358, 367, 381, 383, 384, 388, 390, 398, 407, 409, 413, 416, 417, 437, 463, 466, 467, 495, 540, 563, 629, 630, 631, 657, 686, 696, 697, 699, 700, 701, 712, 717, 780, 787, 797, 803, 811, 819, 826, 860, 861, 873, 875, 880, 898, 905, 912, 913, 914, 928, 954, 975, 988, 992, 1008, 1010, 1026, 1040, 1042, 1043, 1045, 1046], "strength": [12, 133, 160, 201, 205, 263, 317, 367, 411, 415, 445, 566, 567, 642, 647, 648, 651, 657, 658, 668, 671, 672, 673, 674, 675, 677, 679, 686, 781, 857, 858, 900, 901, 905, 906, 977, 984, 991, 994, 1002, 1003], "plan": [12, 375, 379, 381, 382, 396, 998, 1034], "fair": [12, 415, 689, 693, 829, 989, 1013], "crucial": [12, 170, 205, 257, 367, 380, 381, 396, 408, 418, 1003], "challeng": [12, 133, 153, 172, 180, 219, 230, 369, 376, 377, 408, 410, 461, 471, 988, 994, 1013, 1015], "overlap": [12, 13, 38, 56, 91, 127, 149, 225, 249, 353, 379, 405, 408, 412, 415, 416, 586, 790, 791, 798, 802, 804, 805, 806, 807, 815, 985, 998, 1037], "heurist": [12, 15, 125, 240, 352, 368, 408, 417, 448, 451, 460, 461, 507, 508, 536, 538, 545, 675, 676, 677, 690, 694, 800, 801, 902, 903, 904, 905, 906, 925, 985, 986, 991, 1002, 1004, 1013, 1022, 1031, 1032, 1036, 1040, 1043, 1044], "direct": [12, 86, 87, 96, 98, 102, 105, 150, 207, 247, 253, 259, 294, 304, 312, 339, 344, 379, 381, 382, 385, 389, 396, 398, 408, 411, 413, 416, 417, 451, 461, 470, 471, 477, 533, 540, 548, 587, 588, 590, 601, 640, 687, 849, 982, 983, 984, 989, 991, 993, 1009, 1023, 1031, 1034], "nearest": [12, 14, 32, 33, 40, 41, 51, 52, 55, 59, 62, 67, 73, 79, 83, 90, 96, 99, 128, 129, 134, 141, 157, 166, 192, 213, 217, 224, 227, 233, 239, 256, 265, 277, 289, 291, 294, 295, 299, 303, 304, 312, 335, 339, 344, 345, 349, 370, 373, 378, 390, 395, 408, 414, 415, 419, 422, 432, 443, 445, 447, 449, 451, 456, 460, 461, 495, 501, 503, 606, 607, 626, 627, 629, 630, 634, 687, 688, 690, 691, 695, 790, 791, 797, 826, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 860, 861, 865, 880, 962, 985, 994, 1003, 1009, 1010, 1011, 1018, 1026, 1031, 1033, 1034, 1035, 1036, 1038, 1040, 1041, 1043], "along": [12, 14, 57, 60, 67, 87, 120, 126, 188, 201, 235, 237, 266, 317, 353, 354, 363, 381, 385, 387, 389, 390, 395, 398, 399, 402, 405, 413, 415, 416, 417, 420, 532, 549, 586, 610, 611, 629, 645, 646, 649, 650, 651, 652, 653, 654, 655, 659, 660, 661, 662, 675, 677, 680, 681, 682, 683, 684, 685, 777, 778, 790, 797, 811, 869, 870, 873, 874, 877, 878, 879, 880, 885, 886, 887, 889, 890, 891, 916, 939, 963, 969, 977, 984, 991, 998, 1001, 1013, 1031, 1036, 1037, 1039, 1043, 1044], "linecollect": [12, 225, 233, 631], "facecolor": [12, 17, 27, 35, 46, 61, 96, 103, 115, 142, 161, 222, 238, 262, 292, 309, 337, 340, 343, 344, 346], "partial_correl": 12, "precision_": [12, 83, 468, 469, 470, 471, 472, 473, 474, 475], "sqrt": [12, 81, 82, 83, 99, 102, 106, 117, 139, 174, 180, 182, 225, 227, 242, 247, 248, 249, 252, 253, 262, 344, 347, 408, 415, 416, 418, 462, 468, 469, 470, 471, 472, 473, 474, 475, 537, 539, 546, 556, 557, 558, 559, 563, 564, 618, 645, 646, 651, 652, 659, 660, 661, 662, 680, 683, 698, 729, 761, 762, 767, 880, 893, 908, 909, 910, 911, 980, 984, 985, 988, 990, 1000, 1045], "diag": [12, 83, 161, 249, 252, 413, 418, 531, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 795, 796, 984, 1046], "newaxi": [12, 14, 20, 25, 43, 83, 106, 114, 154, 182, 191, 197, 202, 203, 204, 206, 207, 218, 233, 235, 276, 290, 297, 359, 360, 405, 535, 984], "ab": [12, 18, 41, 76, 100, 107, 115, 123, 133, 146, 150, 174, 188, 192, 212, 214, 217, 219, 225, 262, 307, 337, 349, 408, 537, 539, 546, 626, 744, 840, 841, 875, 988], "triu": 12, "nipy_spectr": [12, 40, 47, 48, 52, 53, 61, 62, 103], "start_idx": [12, 225], "end_idx": [12, 225], "sequenc": [12, 113, 122, 189, 225, 383, 395, 409, 412, 413, 415, 416, 502, 511, 560, 561, 568, 569, 580, 581, 587, 588, 590, 645, 797, 800, 808, 826, 860, 884, 940, 941, 951, 959, 962, 1008, 1031, 1034, 1036, 1037], "line0": [12, 225], "linen": [12, 225], "x0": [12, 193, 210, 225, 307, 336, 395, 429, 463, 566, 567, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 626, 627, 628, 629, 863, 864, 865, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881], "y0": [12, 225], "x1": [12, 17, 86, 92, 115, 125, 156, 213, 225, 307, 336, 383, 395, 429, 463, 508, 566, 567, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 626, 627, 628, 629, 698, 863, 864, 865, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 1023], "y1": [12, 92, 115, 225, 508, 715, 989, 990], "xm": [12, 225], "ym": [12, 225], "segment": [12, 14, 18, 22, 37, 48, 49, 54, 69, 99, 168, 225, 233, 376, 389, 408, 416, 451, 461, 507, 508, 690, 856, 988, 1008, 1010, 1013, 1039, 1041, 1043], "lc": [12, 225, 233], "zorder": [12, 59, 98, 130, 142, 154, 162, 191, 199, 223, 225, 233, 236, 247, 318, 344], "hot_r": [12, 307], "norm": [12, 14, 15, 18, 31, 35, 41, 55, 99, 102, 156, 159, 180, 185, 187, 192, 225, 247, 248, 249, 251, 253, 259, 263, 290, 307, 339, 353, 387, 390, 395, 408, 416, 417, 441, 442, 446, 458, 459, 463, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 488, 530, 533, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 588, 589, 590, 596, 642, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 671, 673, 675, 677, 680, 683, 684, 685, 689, 691, 692, 693, 768, 837, 872, 887, 900, 902, 905, 970, 971, 981, 984, 986, 988, 998, 1002, 1034, 1036, 1038, 1042], "set_arrai": [12, 225, 233], "set_linewidth": [12, 225, 233], "add_collect": [12, 225, 233], "index": [12, 13, 15, 18, 38, 39, 40, 41, 42, 50, 51, 59, 72, 73, 113, 118, 120, 124, 147, 150, 158, 165, 170, 171, 172, 173, 174, 201, 205, 219, 241, 244, 248, 249, 253, 257, 260, 261, 262, 263, 265, 273, 274, 285, 307, 312, 313, 314, 321, 326, 327, 353, 354, 376, 378, 379, 381, 383, 385, 390, 393, 395, 405, 409, 412, 413, 415, 416, 423, 442, 446, 447, 448, 449, 450, 452, 453, 456, 458, 459, 463, 466, 502, 508, 556, 557, 558, 559, 563, 564, 565, 586, 587, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 616, 631, 632, 639, 696, 703, 704, 711, 715, 717, 729, 736, 755, 777, 778, 784, 786, 792, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 826, 840, 841, 842, 843, 844, 846, 848, 850, 851, 852, 873, 908, 909, 910, 911, 941, 959, 962, 967, 968, 988, 990, 991, 992, 1002, 1004, 1008, 1022, 1024, 1031, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "dx": [12, 14, 525, 698], "dy": [12, 698], "this_dx": 12, "argmin": [12, 125, 261, 383, 410, 530, 536, 544, 545, 684, 777, 778, 1004], "this_di": 12, "horizontalalign": [12, 27, 32, 41, 45, 46, 63, 103, 230, 247, 301, 309], "verticalalign": [12, 27, 40, 41], "edgecolor": [12, 17, 25, 31, 32, 35, 43, 46, 57, 61, 68, 92, 93, 103, 115, 122, 129, 131, 132, 134, 135, 142, 145, 154, 155, 157, 161, 172, 184, 193, 203, 210, 213, 214, 215, 234, 235, 236, 238, 240, 247, 250, 262, 265, 276, 288, 291, 292, 293, 296, 301, 309, 310, 312, 331, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 349, 358, 359, 360, 630], "xlim": [12, 27, 45, 59, 63, 74, 79, 80, 81, 98, 115, 116, 117, 132, 139, 154, 155, 171, 180, 191, 193, 200, 207, 210, 215, 230, 238, 248, 253, 257, 271, 276, 291, 292, 338, 343, 344, 348, 360], "ptp": 12, "ylim": [12, 25, 27, 34, 38, 45, 59, 63, 79, 80, 81, 98, 115, 116, 123, 124, 126, 132, 135, 140, 154, 155, 171, 188, 190, 191, 193, 194, 195, 207, 210, 211, 215, 230, 238, 248, 253, 257, 261, 265, 271, 275, 276, 291, 292, 338, 343, 344, 348, 352, 360], "03": [12, 16, 20, 53, 69, 81, 96, 108, 137, 150, 151, 158, 163, 171, 182, 219, 228, 234, 245, 247, 253, 263, 299, 315, 327, 378, 416, 746, 797, 984, 988, 1010], "461": [12, 16, 387, 1010], "plot_stock_market": [12, 16, 1010], "handwritten": [12, 37, 39, 44, 46, 47, 49, 50, 53, 58, 60, 62, 69, 118, 168, 221, 222, 224, 226, 228, 234, 250, 260, 285, 294, 295, 303, 304, 326, 327, 353, 374, 408, 415, 446, 501, 540, 543, 548, 565, 687, 688, 689, 690, 691, 703, 704, 716, 735, 791, 793, 849, 861, 870, 880, 893, 985, 991, 1010, 1015, 1026], "isomap": [12, 53, 118, 168, 221, 224, 226, 228, 234, 285, 294, 295, 317, 321, 415, 501, 543, 548, 565, 688, 689, 690, 691, 849, 861, 870, 893, 991, 1010, 1025, 1026, 1039, 1041, 1044, 1045, 1046, 1047, 1048], "agglom": [12, 21, 22, 37, 38, 42, 43, 45, 48, 57, 61, 63, 67, 68, 69, 90, 148, 168, 223, 225, 287, 326, 327, 408, 440, 444, 501, 690, 776, 853, 1010, 1034], "pictur": [12, 18, 22, 37, 49, 54, 67, 69, 99, 168, 234, 253, 376, 396, 408, 413, 416, 461, 492, 493, 520, 1009, 1010], "greek": [12, 18, 22, 37, 49, 54, 67, 69, 99, 168, 408, 461, 1010], "coin": [12, 14, 18, 22, 37, 40, 41, 42, 43, 45, 49, 54, 55, 57, 63, 67, 68, 69, 99, 168, 408, 416, 440, 461, 1000, 1010, 1023], "region": [12, 17, 18, 22, 26, 37, 48, 49, 50, 54, 57, 67, 69, 99, 134, 160, 168, 171, 201, 219, 230, 234, 235, 253, 310, 339, 347, 378, 388, 395, 408, 415, 418, 447, 449, 455, 461, 586, 985, 988, 991, 994, 998, 1002, 1004, 1010, 1023], "explor": [13, 38, 116, 117, 174, 226, 227, 240, 263, 264, 270, 271, 280, 314, 319, 339, 353, 363, 375, 378, 380, 387, 402, 408, 415, 471, 797, 800, 808, 881, 977, 984, 985, 987, 993, 995, 996, 998, 1013, 1018, 1024, 1037], "demo": [13, 14, 19, 20, 23, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 54, 55, 57, 58, 60, 61, 62, 63, 65, 68, 69, 129, 168, 174, 185, 207, 234, 250, 252, 263, 271, 312, 328, 352, 353, 383, 405, 408, 416, 439, 440, 443, 445, 446, 447, 449, 450, 452, 454, 457, 501, 510, 511, 512, 540, 703, 704, 716, 718, 735, 791, 793, 861, 880, 881, 1010], "period": [13, 153, 158, 162, 385, 395, 396, 406, 418, 614, 818, 879, 1039, 1044, 1046], "summari": [13, 150, 321, 361, 363, 378, 393, 691, 712, 913, 986, 989, 1008, 1024], "style": [13, 25, 27, 82, 126, 190, 209, 219, 266, 381, 388, 408, 416, 442, 446, 458, 699, 803, 819, 920, 921, 1031, 1034, 1045], "background_gradi": 13, "set_table_attribut": 13, "inlin": [13, 212, 381, 382, 1004], "set_capt": 13, "set_table_styl": 13, "selector": [13, 72, 146, 147, 240, 347, 389, 416, 417, 465, 580, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 1033, 1041, 1043, 1047], "caption": [13, 71], "prop": [13, 74, 82, 207, 249, 291, 338, 361, 945, 948, 1020], "font": [13, 126, 190, 215, 235, 912, 914], "16px": 13, "000000": [13, 45, 171, 190, 219, 262, 311, 735], "502561": 13, "537775": 13, "546752": 13, "003683": 13, "376474": 13, "788755": 13, "627229": 13, "736540": 13, "189": [13, 201, 289, 299, 387, 897, 1001, 1010], "463088": 13, "500008": 13, "438776": 13, "914405": 13, "005771": 13, "894801": 13, "592511": 13, "192930": 13, "196795": 13, "181": [13, 65, 69, 280, 304, 387, 1010], "387599": 13, "820000": 13, "940000": [13, 302], "665000": 13, "480000": 13, "001500": 13, "500000": [13, 302], "240000": 13, "630000": 13, "998000": 13, "060000": 13, "780000": 13, "997900": 13, "281": 13, "41": [13, 16, 150, 201, 240, 361, 376, 378, 468, 491, 620, 623, 634, 657, 663, 684, 685, 698, 779, 835, 990, 994], "996900": 13, "sequenti": [13, 122, 144, 147, 151, 168, 195, 263, 319, 379, 413, 415, 416, 499, 500, 533, 592, 596, 601, 602, 604, 605, 645, 646, 651, 652, 657, 659, 660, 661, 662, 672, 786, 860, 861, 880, 978, 996, 1002, 1008, 1010, 1011, 1026, 1031, 1040, 1043], "lagged_df": 13, "shift": [13, 37, 39, 45, 50, 65, 69, 168, 180, 225, 252, 290, 304, 307, 343, 410, 414, 439, 447, 457, 460, 468, 511, 514, 688, 692, 846, 869, 998, 1010, 1025, 1026, 1031, 1035, 1039], "renam": [13, 252, 263, 381, 385, 408, 440, 444, 445, 446, 458, 470, 471, 477, 526, 535, 552, 553, 554, 555, 556, 557, 562, 563, 564, 565, 873, 1031, 1032, 1033, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "lagged_count_1h": 13, "lagged_count_2h": 13, "lagged_count_3h": 13, "lagged_count_1d": 13, "lagged_count_1d_1h": 13, "lagged_count_7d": 13, "lagged_count_7d_1h": 13, "roll": [13, 68, 168, 221, 222, 223, 224, 227, 228, 384, 408, 529, 691, 692, 931, 1010, 1013, 1041, 1046, 1048], "lagged_mean_24h": 13, "lagged_max_24h": 13, "lagged_min_24h": 13, "lagged_mean_7d": 13, "lagged_max_7d": 13, "lagged_min_7d": 13, "tail": [13, 126, 166, 171, 201, 203, 262, 307, 520, 523, 984], "17369": 13, "247": [13, 880], "203": [13, 54], "224": [13, 54, 86, 131, 408, 723], "157": [13, 122, 137, 387, 1010], "160": [13, 238, 295, 299, 977, 1010, 1022], "169": [13, 59, 304], "135": [13, 150, 322, 378], "67": [13, 43, 67, 171, 219, 378, 515, 516, 517, 626, 666, 712, 811, 978, 988, 1002, 1027, 1031], "732143": 13, "271": 13, "17370": 13, "315": [13, 285, 378], "138": [13, 156, 163, 322, 324, 387, 415, 988, 1010], "97": [13, 33, 106, 150, 174, 238, 253, 327, 339, 378, 387, 394, 412, 657, 983, 989, 998, 1031], "125000": 13, "785714": 13, "17371": 13, "214": [13, 154, 248, 254, 583, 1010], "133": [13, 14, 57], "386905": 13, "17372": 13, "164": [13, 29, 256, 278, 303, 305, 338, 350, 415, 1010], "123": [13, 93, 94, 117, 135, 353, 363, 415, 515, 516, 517, 554, 555, 833, 989, 996, 1010], "107": [13, 58, 69, 322, 408, 895, 989, 1010, 1033], "875000": 13, "464286": 13, "17373": 13, "109": [13, 25, 54, 989, 1033], "583333": 13, "244048": 13, "119": [13, 982, 1034], "102": [13, 54, 69, 183, 220, 387, 1010, 1022, 1033], "458333": 13, "815476": 13, "110": [13, 91, 180, 198, 208, 210, 220, 233, 313, 436, 982, 983, 1010], "166667": 13, "73": [13, 93, 115, 266, 327, 394, 797, 811, 846, 909, 998, 1020, 1031, 1033], "369048": 13, "791667": 13, "61": [13, 82, 99, 172, 219, 375, 378, 387, 409, 540, 559, 712], "112": [13, 45, 55, 69, 150, 191, 220, 242, 245, 319, 324, 376, 378, 1010, 1033], "666667": 13, "190476": 13, "113": [13, 280, 387, 1034], "708333": 13, "422619": 13, "watch": [13, 368], "undefin": [13, 265, 395, 711, 727, 736, 739, 781, 988, 1039, 1043, 1047], "own": [13, 35, 119, 219, 237, 252, 285, 287, 328, 353, 368, 375, 384, 385, 386, 389, 390, 398, 407, 408, 420, 424, 439, 453, 532, 556, 563, 645, 795, 796, 842, 843, 844, 846, 848, 850, 851, 852, 874, 908, 910, 926, 931, 956, 984, 990, 991, 994, 998, 1003, 1008, 1013, 1023, 1024, 1038, 1039, 1041, 1048], "unknown": [13, 17, 57, 171, 237, 262, 326, 328, 369, 376, 395, 402, 405, 416, 867, 873, 874, 951, 987, 998, 1015, 1035, 1039, 1043, 1044], "nan": [13, 76, 123, 165, 166, 171, 219, 240, 242, 244, 257, 265, 313, 317, 322, 323, 367, 373, 383, 390, 395, 415, 445, 467, 495, 554, 555, 556, 560, 561, 563, 592, 593, 596, 602, 605, 608, 626, 627, 628, 629, 634, 711, 712, 713, 720, 721, 722, 726, 727, 728, 767, 776, 781, 782, 783, 785, 797, 800, 801, 803, 811, 819, 822, 823, 824, 827, 869, 870, 874, 876, 877, 880, 881, 885, 888, 889, 891, 918, 919, 920, 921, 963, 977, 988, 998, 1004, 1026, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048], "separ": [13, 14, 17, 25, 26, 31, 32, 41, 56, 61, 63, 67, 74, 81, 92, 95, 96, 98, 101, 108, 113, 115, 118, 121, 131, 150, 156, 166, 168, 172, 173, 177, 179, 200, 202, 220, 223, 238, 249, 262, 265, 271, 272, 307, 309, 312, 319, 329, 334, 335, 337, 338, 339, 343, 344, 350, 352, 363, 367, 377, 378, 383, 386, 389, 393, 395, 406, 408, 409, 410, 413, 415, 416, 418, 463, 511, 518, 532, 537, 539, 540, 546, 548, 580, 587, 588, 590, 609, 630, 637, 645, 646, 672, 675, 676, 689, 693, 723, 730, 743, 744, 746, 751, 790, 816, 832, 833, 859, 860, 902, 904, 905, 910, 911, 977, 978, 980, 982, 984, 985, 987, 994, 995, 998, 1002, 1003, 1010, 1020, 1022, 1023, 1031, 1034, 1036, 1037, 1041, 1043, 1044, 1047, 1048], "dropna": [13, 158], "17210": [13, 1042], "randomli": [13, 38, 49, 51, 62, 72, 86, 89, 94, 115, 116, 129, 156, 165, 168, 172, 213, 218, 234, 238, 252, 257, 268, 280, 283, 326, 329, 363, 368, 390, 393, 394, 408, 412, 415, 418, 448, 457, 511, 514, 518, 522, 530, 536, 544, 545, 550, 558, 559, 560, 561, 562, 563, 564, 609, 610, 670, 678, 689, 693, 715, 795, 796, 856, 894, 908, 909, 910, 911, 987, 989, 991, 994, 996, 1000, 1004, 1010, 1022, 1024, 1042, 1046, 1048], "percentag": [13, 55, 105, 123, 192, 219, 257, 265, 268, 412, 417, 533, 540, 543, 548, 592, 593, 647, 668, 679, 702, 732, 744, 815, 816, 817, 830, 912, 914, 989, 1004, 1033, 1037, 1043, 1044], "mape": [13, 744, 988], "aim": [13, 21, 82, 166, 205, 293, 328, 343, 369, 376, 379, 381, 395, 402, 408, 410, 416, 447, 984, 988, 991, 998, 1003, 1008, 1015, 1023, 1045], "futur": [13, 158, 202, 243, 320, 323, 379, 381, 383, 385, 393, 395, 396, 402, 412, 416, 495, 533, 634, 958, 988, 989, 1003, 1004, 1013, 1028, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "ulterior": 13, "independ": [13, 26, 28, 38, 47, 97, 98, 100, 118, 122, 160, 172, 239, 240, 262, 265, 267, 271, 283, 307, 314, 317, 353, 363, 367, 368, 377, 383, 385, 394, 395, 398, 405, 406, 407, 408, 409, 410, 411, 412, 416, 420, 448, 463, 487, 502, 514, 515, 516, 517, 519, 531, 532, 534, 536, 538, 539, 545, 546, 550, 551, 603, 606, 607, 624, 639, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 671, 672, 673, 674, 703, 704, 716, 734, 735, 753, 755, 793, 799, 825, 829, 831, 833, 834, 872, 876, 877, 878, 880, 884, 885, 886, 887, 889, 890, 891, 894, 902, 903, 904, 905, 906, 931, 977, 980, 982, 984, 985, 988, 989, 990, 993, 995, 998, 1003, 1004, 1025, 1026, 1031, 1032, 1037, 1039, 1041, 1046], "ident": [13, 20, 65, 125, 196, 201, 219, 230, 234, 331, 352, 376, 383, 395, 405, 408, 409, 410, 412, 418, 421, 437, 438, 451, 463, 464, 472, 474, 475, 478, 479, 480, 487, 502, 550, 558, 559, 563, 564, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 642, 678, 679, 698, 703, 704, 734, 783, 793, 799, 802, 812, 813, 814, 816, 817, 842, 843, 849, 857, 858, 864, 865, 877, 889, 908, 909, 981, 982, 985, 988, 991, 992, 1003, 1035, 1039, 1040, 1041, 1045], "tempor": [13, 185, 1008, 1009], "mean_absolute_percentage_error": [13, 123, 988, 1043, 1045], "3889873516666431": 13, "account": [13, 14, 56, 98, 105, 113, 158, 165, 171, 219, 237, 262, 288, 294, 347, 349, 353, 367, 377, 381, 395, 396, 402, 408, 411, 412, 413, 415, 416, 462, 560, 561, 566, 567, 626, 627, 629, 631, 632, 648, 672, 678, 703, 706, 726, 727, 728, 736, 741, 754, 781, 782, 785, 786, 798, 802, 815, 874, 980, 982, 986, 988, 989, 990, 991, 998, 1002, 1004, 1036, 1038, 1039, 1040, 1043, 1044, 1046, 1048], "cheat": [13, 339, 992, 1002, 1033], "fast": [13, 63, 177, 185, 190, 216, 217, 235, 236, 308, 354, 367, 376, 381, 390, 408, 410, 412, 413, 415, 416, 420, 445, 446, 468, 473, 507, 531, 532, 534, 537, 539, 543, 546, 563, 564, 565, 587, 588, 590, 631, 632, 639, 657, 658, 671, 673, 686, 698, 797, 811, 821, 822, 832, 833, 840, 841, 845, 856, 937, 980, 984, 987, 990, 991, 993, 994, 1004, 1008, 1013, 1024, 1031, 1032, 1037, 1038, 1041, 1042], "laptop": [13, 389, 467, 898, 1045, 1046, 1047], "3000": [13, 65, 225, 892, 893], "train_idx": [13, 171, 395], "test_idx": [13, 395], "44300751539296973": 13, "optimist": [13, 190, 267, 352, 363, 706, 984, 988], "cross": [13, 14, 35, 55, 58, 59, 72, 73, 75, 76, 79, 83, 87, 88, 92, 93, 104, 119, 122, 123, 125, 126, 138, 141, 143, 144, 147, 148, 150, 151, 171, 172, 179, 183, 185, 187, 188, 189, 195, 201, 203, 209, 219, 220, 231, 238, 243, 249, 250, 252, 255, 259, 262, 263, 264, 266, 268, 269, 270, 271, 274, 275, 276, 277, 278, 280, 289, 304, 306, 308, 313, 315, 317, 319, 329, 339, 347, 370, 376, 381, 383, 390, 393, 394, 395, 399, 402, 403, 406, 409, 410, 413, 415, 416, 417, 418, 436, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 492, 500, 501, 503, 514, 540, 566, 567, 574, 592, 593, 596, 601, 605, 608, 641, 642, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 671, 672, 673, 674, 675, 677, 678, 680, 681, 682, 683, 684, 685, 700, 701, 705, 712, 726, 739, 783, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 834, 860, 861, 865, 880, 881, 898, 900, 902, 905, 943, 987, 988, 991, 992, 996, 998, 1003, 1004, 1008, 1009, 1010, 1011, 1013, 1015, 1018, 1026, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048], "cross_val_scor": [13, 104, 140, 165, 166, 168, 255, 258, 267, 276, 278, 323, 342, 363, 381, 383, 393, 399, 412, 415, 519, 574, 702, 740, 797, 821, 823, 908, 909, 977, 988, 1010, 1019, 1031, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1043, 1044, 1047, 1048], "cv_mape_scor": 13, "neg_mean_absolute_percentage_error": [13, 123, 988, 996], "44300752": 13, "27772182": 13, "3697178": 13, "real": [13, 16, 32, 35, 56, 58, 71, 75, 79, 81, 82, 83, 113, 156, 171, 205, 226, 230, 240, 256, 268, 276, 289, 292, 308, 309, 338, 343, 354, 367, 370, 374, 375, 378, 385, 387, 390, 393, 394, 395, 405, 406, 408, 410, 412, 413, 415, 416, 468, 488, 489, 492, 493, 494, 495, 496, 499, 500, 503, 509, 550, 551, 552, 554, 555, 556, 557, 558, 559, 563, 564, 591, 593, 594, 595, 596, 597, 598, 599, 630, 698, 703, 722, 726, 750, 753, 755, 783, 793, 825, 857, 858, 902, 903, 904, 905, 906, 909, 911, 978, 979, 980, 985, 988, 990, 992, 993, 994, 1004, 1007, 1010, 1026, 1031, 1044], "life": [13, 256, 389, 985], "advis": [13, 202, 237, 363, 379, 381, 408, 416, 436, 645, 651, 653, 659, 661, 671, 686, 956, 980, 984, 990, 992, 1003, 1045], "deviat": [13, 21, 35, 62, 81, 116, 119, 120, 121, 122, 150, 153, 158, 160, 162, 171, 180, 207, 240, 259, 260, 261, 262, 263, 265, 291, 292, 307, 312, 373, 377, 378, 386, 390, 395, 412, 415, 418, 449, 471, 500, 510, 511, 512, 513, 515, 516, 517, 521, 523, 524, 529, 551, 593, 610, 633, 643, 644, 670, 722, 750, 803, 819, 846, 869, 870, 880, 889, 890, 891, 984, 988, 994, 998, 1022, 1037, 1038, 1039, 1042, 1043, 1044], "363": [13, 98, 108, 1010], "make_scor": [13, 126, 266, 399, 412, 797, 822, 823, 988, 1040, 1048], "mean_absolute_error": [13, 201, 203, 219, 988, 1032, 1034], "mean_pinball_loss": [13, 126, 320, 984, 988, 1044], "root_mean_squared_error": [13, 748, 988, 1048], "consolidate_scor": 13, "1f": [13, 21, 51, 54, 99, 181, 201, 234, 247, 249, 269, 317, 353, 354], "pinball_loss_05": 13, "pinball_loss_50": 13, "pinball_loss_95": 13, "loss_funct": 13, "absolute_error": [13, 415, 557, 559, 561, 564, 670, 909, 911, 1044], "loss_func": 13, "n_job": [13, 55, 73, 74, 119, 120, 121, 126, 127, 133, 140, 149, 150, 165, 171, 172, 173, 174, 223, 225, 242, 261, 263, 264, 266, 277, 280, 285, 317, 318, 319, 322, 347, 368, 381, 395, 415, 419, 436, 443, 445, 447, 449, 451, 456, 457, 460, 463, 466, 471, 530, 534, 535, 536, 538, 541, 542, 544, 545, 547, 554, 555, 556, 557, 562, 563, 564, 565, 566, 567, 568, 569, 593, 601, 609, 631, 633, 638, 646, 650, 652, 654, 656, 657, 658, 660, 662, 664, 665, 667, 675, 678, 687, 688, 689, 690, 691, 692, 693, 772, 776, 779, 797, 800, 801, 803, 811, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 832, 833, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 859, 862, 895, 896, 954, 956, 977, 988, 989, 991, 1019, 1020, 1024, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046], "fit_tim": [13, 59, 123, 190, 209, 264, 412, 823, 824], "startswith": [13, 71, 223, 298], "test_": [13, 133, 412], "x_i": [13, 81, 117, 145, 171, 202, 320, 347, 408, 413, 414, 415, 418, 613, 614, 618, 621, 622, 624, 835, 836, 839, 979, 980, 984, 990, 991, 992, 998, 1002, 1003, 1004], "fulli": [13, 45, 56, 120, 126, 367, 375, 376, 395, 408, 414, 415, 417, 442, 446, 556, 557, 563, 564, 908, 909, 910, 911, 912, 914, 977, 978, 984, 993, 1001, 1008, 1044, 1045], "anticip": 13, "call": [13, 14, 18, 47, 49, 51, 55, 72, 93, 111, 118, 125, 147, 153, 157, 159, 161, 170, 172, 189, 201, 202, 205, 219, 237, 241, 243, 244, 262, 263, 271, 276, 277, 280, 285, 287, 312, 314, 319, 320, 352, 353, 354, 361, 367, 368, 369, 376, 379, 381, 382, 383, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 398, 399, 406, 408, 409, 410, 411, 412, 413, 415, 416, 418, 420, 431, 439, 442, 445, 446, 448, 449, 450, 451, 452, 453, 456, 459, 461, 463, 464, 467, 468, 473, 481, 482, 483, 487, 490, 491, 494, 496, 502, 507, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 576, 581, 582, 584, 585, 587, 588, 590, 596, 601, 606, 607, 609, 610, 613, 616, 619, 626, 627, 628, 629, 630, 631, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 688, 689, 690, 691, 692, 693, 694, 696, 698, 699, 700, 703, 730, 740, 753, 769, 772, 776, 777, 778, 779, 791, 795, 796, 797, 799, 800, 801, 802, 803, 809, 811, 812, 813, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 845, 846, 849, 851, 856, 857, 858, 859, 860, 863, 864, 865, 867, 869, 870, 872, 877, 880, 881, 884, 889, 890, 891, 892, 893, 897, 900, 901, 902, 903, 905, 906, 909, 911, 927, 931, 936, 937, 945, 946, 948, 954, 955, 956, 959, 962, 972, 977, 978, 980, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 996, 998, 1000, 1001, 1003, 1004, 1008, 1013, 1015, 1019, 1022, 1023, 1024, 1026, 1028, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "aleator": 13, "descript": [13, 150, 171, 313, 374, 375, 380, 381, 385, 386, 389, 395, 408, 416, 451, 461, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 506, 509, 543, 629, 675, 760, 763, 776, 988, 1002, 1003, 1009, 1012, 1024, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "quantile_list": 13, "styled_df_copi": 13, "extract_numer": 13, "mean_valu": 13, "std_valu": 13, "convert": [13, 18, 35, 47, 49, 67, 72, 99, 158, 174, 201, 222, 240, 243, 248, 249, 252, 253, 298, 367, 375, 376, 390, 393, 395, 402, 416, 439, 442, 443, 446, 448, 449, 450, 451, 458, 463, 464, 495, 533, 540, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 571, 580, 581, 587, 588, 589, 590, 592, 593, 605, 626, 627, 628, 629, 645, 651, 657, 658, 659, 661, 665, 666, 667, 669, 673, 675, 676, 677, 691, 776, 855, 864, 865, 867, 871, 873, 874, 875, 877, 900, 908, 909, 910, 911, 918, 920, 921, 943, 973, 974, 977, 984, 985, 986, 988, 998, 999, 1003, 1004, 1024, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1046, 1047, 1048], "cols_to_convert": 13, "col": [13, 20, 26, 28, 39, 43, 50, 56, 60, 64, 65, 71, 119, 134, 222, 240, 348, 510, 512], "min_valu": [13, 626, 1042, 1043], "mask": [13, 14, 43, 67, 121, 201, 209, 240, 260, 261, 330, 390, 395, 409, 415, 468, 473, 560, 561, 580, 584, 585, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 628, 629, 631, 632, 648, 670, 797, 800, 801, 811, 960, 978, 995, 1031, 1034, 1036, 1037, 1039, 1041], "bold": [13, 61, 126, 190, 196, 381], "07": [13, 36, 68, 86, 106, 137, 171, 197, 219, 220, 271, 278, 312, 332, 355, 363, 376, 408, 560, 561, 691, 988, 1002, 1010], "62": [13, 172, 177, 219, 256, 322, 327, 363, 376, 492, 493, 840, 841, 1027, 1034], "17": [13, 20, 40, 53, 75, 81, 150, 154, 171, 200, 234, 265, 301, 311, 376, 379, 386, 398, 400, 401, 408, 412, 443, 460, 486, 496, 499, 522, 530, 535, 539, 546, 548, 549, 554, 558, 559, 568, 569, 596, 627, 648, 656, 657, 658, 665, 668, 671, 673, 686, 691, 727, 728, 738, 759, 764, 782, 785, 787, 815, 838, 849, 864, 869, 870, 878, 880, 886, 902, 905, 908, 909, 910, 911, 977, 978, 989, 991, 998, 1006, 1027, 1029, 1031, 1032, 1033, 1034, 1037, 1040, 1045], "06": [13, 16, 23, 53, 69, 84, 137, 162, 171, 192, 200, 201, 240, 262, 263, 278, 304, 305, 309, 346, 387, 481, 482, 483, 643, 644, 688, 692, 795, 796, 797, 811, 909, 984, 998, 1000, 1010], "145": [13, 408], "92": [13, 33, 51, 99, 147, 177, 260, 304, 326, 327, 339, 376, 378, 537, 539, 546, 561, 596, 797, 811, 983, 1024], "86": [13, 33, 71, 147, 192, 309, 326, 327, 786, 908, 988, 1020], "wherea": [13, 35, 49, 54, 68, 81, 129, 215, 240, 263, 264, 265, 271, 288, 312, 343, 347, 348, 369, 396, 412, 415, 443, 564, 657, 658, 799, 815, 828, 980, 987, 989, 991, 998, 1004, 1044], "That": [13, 96, 113, 150, 190, 230, 262, 266, 353, 354, 368, 375, 389, 395, 412, 417, 418, 442, 445, 446, 556, 563, 592, 815, 908, 909, 977, 985, 986, 988, 994, 1004, 1040, 1041], "pinbal": [13, 126, 320, 561, 669, 721, 746, 984, 1044, 1045], "5th": [13, 126, 161, 408], "95th": [13, 126, 746], "gbrt_mean_poisson": 13, "mean_predict": [13, 160], "gbrt_median": 13, "median_predict": 13, "gbrt_percentile_5": 13, "percentile_5_predict": 13, "gbrt_percentile_95": 13, "percentile_95_predict": 13, "fill_between": [13, 126, 139, 153, 158, 160, 162, 180, 181, 219, 262, 264, 265, 266, 272, 803, 819], "interv": [13, 28, 112, 136, 137, 160, 168, 185, 201, 202, 203, 219, 262, 376, 395, 406, 412, 415, 418, 437, 438, 515, 516, 517, 556, 557, 559, 561, 563, 564, 634, 635, 637, 676, 740, 746, 748, 801, 818, 826, 863, 865, 879, 902, 903, 904, 924, 980, 984, 988, 998, 1004, 1010, 1038, 1042], "At": [13, 76, 113, 206, 274, 280, 283, 326, 329, 367, 368, 385, 396, 399, 404, 411, 415, 436, 439, 464, 587, 588, 590, 601, 828, 830, 867, 952, 977, 984, 987, 989, 993, 1002, 1013], "night": 13, "band": [13, 265, 309, 998], "narrow": [13, 116, 126, 307, 309, 386, 840, 841], "certain": [13, 56, 171, 206, 218, 237, 262, 285, 311, 343, 363, 376, 377, 379, 385, 395, 397, 408, 413, 417, 637, 648, 652, 657, 662, 683, 860, 865, 900, 977, 980, 984, 985, 988, 989, 992, 998, 1003, 1008, 1015, 1019, 1036, 1040, 1043, 1046], "And": [13, 168, 221, 222, 223, 224, 227, 228, 237, 262, 352, 389, 402, 408, 412, 416, 529, 587, 588, 590, 691, 692, 984, 988, 1006, 1010, 1038], "correct": [13, 27, 28, 58, 82, 113, 161, 171, 185, 190, 201, 219, 247, 256, 262, 269, 271, 280, 283, 339, 341, 352, 363, 378, 381, 383, 385, 396, 406, 407, 408, 412, 413, 415, 416, 449, 455, 468, 473, 487, 500, 502, 634, 666, 675, 677, 702, 703, 707, 711, 712, 717, 720, 721, 722, 726, 727, 728, 732, 736, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 781, 782, 783, 785, 788, 789, 792, 794, 828, 829, 830, 837, 845, 871, 973, 984, 988, 989, 1003, 1015, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "wider": [13, 203, 416, 913, 984], "probabl": [13, 17, 24, 28, 29, 30, 35, 36, 56, 76, 92, 93, 112, 134, 137, 145, 152, 153, 154, 155, 163, 168, 171, 193, 213, 216, 217, 222, 226, 231, 233, 234, 237, 262, 264, 265, 268, 269, 272, 304, 307, 311, 317, 319, 329, 331, 346, 347, 367, 370, 376, 377, 383, 387, 393, 395, 408, 412, 413, 416, 417, 418, 434, 435, 436, 437, 438, 445, 446, 448, 503, 511, 514, 522, 526, 548, 549, 550, 552, 554, 556, 558, 560, 563, 566, 568, 569, 592, 593, 609, 612, 613, 621, 626, 630, 631, 632, 657, 658, 670, 675, 691, 697, 699, 701, 702, 705, 706, 708, 711, 715, 719, 724, 725, 727, 737, 738, 739, 740, 754, 780, 782, 785, 786, 787, 792, 795, 796, 797, 800, 801, 811, 825, 826, 829, 831, 832, 835, 836, 837, 838, 839, 842, 845, 850, 856, 857, 881, 893, 894, 895, 896, 897, 900, 902, 905, 908, 910, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 998, 1000, 1001, 1002, 1004, 1009, 1010, 1011, 1012, 1024, 1026, 1031, 1033, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1045], "visibl": [13, 171, 172, 203, 349, 375, 381, 408, 856, 993, 1036, 1046], "lie": [13, 61, 86, 149, 171, 235, 307, 328, 337, 339, 413, 415, 605, 848, 850, 851, 852, 900, 901, 982, 985, 988, 998, 1003], "span": [13, 56, 79, 126, 235, 259, 376, 408, 416, 548, 635, 797, 800, 988, 1023], "underestim": [13, 126, 172, 201, 219, 262, 381], "calibr": [13, 29, 31, 116, 135, 219, 233, 237, 262, 264, 269, 370, 395, 399, 511, 514, 563, 568, 657, 675, 708, 727, 739, 782, 785, 786, 826, 838, 897, 900, 977, 984, 988, 1001, 1003, 1010, 1011, 1026, 1028, 1035, 1037], "confid": [13, 25, 26, 27, 28, 158, 160, 248, 262, 265, 329, 396, 406, 418, 635, 657, 658, 665, 667, 670, 673, 674, 675, 697, 701, 706, 719, 724, 725, 737, 738, 754, 787, 828, 867, 900, 902, 905, 984, 987, 988, 989, 994, 1001, 1002, 1003, 1013, 1024, 1041], "produc": [13, 14, 26, 27, 45, 58, 71, 99, 126, 127, 128, 129, 185, 268, 304, 329, 363, 376, 377, 381, 383, 386, 395, 396, 408, 409, 412, 413, 415, 439, 442, 445, 451, 518, 535, 558, 562, 580, 587, 592, 593, 631, 632, 799, 800, 801, 809, 814, 817, 821, 865, 875, 902, 905, 979, 980, 984, 986, 987, 988, 991, 994, 995, 999, 1001, 1002, 1003, 1015, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "overli": [13, 26, 27, 190, 267, 363, 413, 988], "mapi": 13, "recent": [13, 203, 237, 370, 379, 382, 386, 389, 395, 408, 467, 537, 564, 1002, 1013, 1034, 1043], "conform": [13, 580, 627, 828, 829, 988, 1008, 1009, 1038, 1044], "epistem": 13, "sktime": [13, 1008], "extend": [13, 56, 57, 68, 111, 202, 251, 269, 339, 378, 379, 393, 395, 406, 407, 408, 413, 415, 630, 719, 829, 832, 833, 865, 867, 884, 900, 901, 915, 980, 988, 989, 1003, 1009, 1011, 1026, 1036, 1037, 1038, 1039, 1041, 1046], "recurs": [13, 33, 52, 90, 129, 139, 140, 144, 147, 150, 151, 168, 257, 261, 267, 289, 326, 327, 329, 357, 383, 407, 408, 412, 439, 440, 441, 444, 462, 501, 514, 562, 592, 593, 596, 601, 631, 632, 657, 816, 905, 988, 991, 994, 995, 1004, 1010, 1011, 1023, 1026, 1031, 1041, 1042], "enabl": [13, 31, 51, 73, 124, 172, 209, 224, 237, 309, 318, 320, 321, 323, 348, 379, 381, 386, 389, 393, 395, 398, 399, 404, 407, 408, 409, 413, 415, 416, 448, 463, 467, 533, 534, 540, 558, 559, 560, 561, 562, 578, 579, 589, 590, 601, 609, 795, 796, 797, 800, 821, 822, 823, 860, 861, 873, 874, 897, 898, 900, 901, 902, 903, 904, 905, 906, 915, 948, 955, 978, 980, 985, 987, 988, 991, 998, 999, 1002, 1003, 1009, 1013, 1031, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "434": [13, 16, 157, 159, 1010], "plot_time_series_lagged_featur": [13, 16, 1010], "parallel": [14, 112, 117, 119, 120, 122, 137, 168, 172, 173, 174, 203, 263, 318, 319, 321, 344, 361, 366, 373, 381, 382, 384, 385, 393, 395, 409, 417, 419, 420, 436, 443, 445, 447, 448, 449, 451, 456, 457, 460, 463, 466, 471, 494, 530, 532, 533, 534, 536, 538, 540, 541, 542, 544, 545, 547, 554, 555, 556, 557, 562, 563, 564, 565, 566, 567, 568, 569, 588, 593, 601, 609, 631, 633, 638, 657, 687, 688, 689, 690, 691, 692, 693, 772, 776, 779, 797, 800, 801, 803, 808, 811, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 832, 833, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 859, 862, 895, 896, 956, 958, 1009, 1010, 1019, 1024, 1026, 1031, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1046, 1047], "acquir": [14, 121, 264, 1043], "angl": [14, 35, 99, 150, 247, 248, 249, 252, 253, 378, 413, 530, 536, 538, 541, 542, 544, 545, 547, 649, 650, 651, 652, 653, 654, 655, 662, 663, 664, 677, 681, 682, 683, 684, 685, 691, 985, 986, 1011, 1026, 1031], "Such": [14, 129, 153, 158, 170, 180, 185, 190, 202, 265, 352, 395, 396, 412, 413, 415, 554, 555, 655, 978, 988, 991, 998, 1004, 1022, 1041, 1046, 1048], "ct": [14, 161, 244, 409, 463, 465, 466], "cellular": 14, "materi": [14, 396, 580, 890, 891, 1007], "haar": 14, "wavelet": [14, 106, 413], "sparsiti": [14, 31, 46, 83, 102, 103, 168, 179, 185, 186, 194, 212, 216, 217, 220, 236, 347, 353, 367, 395, 410, 413, 415, 417, 500, 501, 526, 530, 536, 537, 538, 539, 542, 544, 545, 546, 645, 651, 656, 657, 675, 677, 720, 721, 722, 869, 875, 880, 885, 981, 984, 991, 998, 1010, 1018, 1023, 1033], "oper": [14, 20, 150, 161, 168, 231, 236, 243, 255, 257, 259, 264, 269, 278, 329, 354, 367, 368, 378, 379, 381, 384, 387, 393, 395, 396, 398, 402, 404, 412, 413, 415, 416, 417, 421, 447, 460, 467, 474, 481, 482, 483, 484, 503, 532, 533, 540, 550, 551, 565, 571, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 615, 620, 623, 629, 634, 642, 657, 688, 692, 701, 705, 706, 707, 725, 772, 779, 780, 786, 787, 816, 826, 829, 840, 841, 863, 867, 872, 883, 884, 898, 905, 908, 939, 956, 961, 984, 991, 998, 1003, 1008, 1010, 1013, 1022, 1035, 1037, 1038, 1039, 1041, 1042, 1047], "fidel": 14, "penal": [14, 31, 83, 133, 185, 190, 194, 201, 205, 217, 219, 312, 347, 408, 410, 413, 417, 468, 469, 470, 471, 472, 473, 474, 475, 477, 646, 651, 652, 660, 662, 675, 704, 714, 732, 784, 793, 873, 900, 901, 907, 984, 988, 990, 992, 1002, 1003, 1022], "computation": [14, 79, 96, 119, 125, 133, 153, 285, 343, 352, 366, 382, 407, 408, 409, 412, 413, 415, 418, 537, 631, 632, 670, 761, 797, 799, 800, 801, 811, 823, 984, 985, 987, 995, 996, 1000, 1023, 1026, 1035], "l2": [14, 31, 41, 83, 86, 168, 170, 171, 179, 180, 185, 186, 192, 194, 196, 197, 199, 201, 206, 212, 216, 217, 219, 220, 263, 275, 285, 307, 314, 330, 352, 353, 383, 390, 393, 408, 410, 413, 416, 440, 444, 449, 456, 523, 537, 539, 546, 557, 560, 561, 564, 588, 589, 590, 642, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 671, 675, 677, 679, 680, 685, 686, 687, 733, 748, 759, 760, 776, 777, 778, 811, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 857, 858, 872, 880, 887, 900, 901, 905, 906, 907, 909, 911, 971, 977, 981, 984, 986, 991, 992, 998, 1002, 1004, 1010, 1022, 1024, 1033, 1035, 1036, 1038, 1040], "circular": 14, "central": [14, 203, 408, 994, 1008], "emmanuel": [14, 67, 1031, 1038, 1039, 1040], "gouillart": [14, 67, 1031], "nsup": 14, "ndimag": [14, 47, 48, 55, 304, 1023], "_weight": [14, 219], "orig": [14, 292], "floor_x": 14, "floor": 14, "astyp": [14, 38, 42, 45, 46, 54, 61, 63, 67, 82, 103, 123, 125, 142, 170, 191, 192, 219, 225, 236, 240, 273, 285, 314, 416, 978, 984, 1038], "hstack": [14, 34, 43, 135, 146, 227, 239, 257, 342, 412, 859], "_generate_center_coordin": 14, "l_x": 14, "mgrid": [14, 142], "build_projection_oper": 14, "n_dir": 14, "endpoint": [14, 308, 342, 634], "data_ind": 14, "camera_ind": 14, "data_unravel_indic": 14, "xrot": 14, "ind": [14, 43, 125, 135, 353, 840, 841], "logical_and": [14, 126], "proj_oper": 14, "coo_matrix": [14, 187, 451, 584, 585, 959, 962], "generate_synthetic_data": 14, "n_pt": 14, "ogrid": 14, "mask_out": 14, "rand": [14, 25, 38, 39, 40, 41, 45, 50, 59, 63, 104, 116, 130, 132, 145, 180, 185, 224, 225, 230, 236, 237, 276, 297, 318, 319, 330, 331, 346, 353, 359, 360, 390, 399, 543, 703, 704, 714, 755, 779, 784, 892, 893, 895, 896, 897, 1000, 1015, 1031, 1042, 1043], "gaussian_filt": [14, 47, 48, 55, 1023], "sigma": [14, 47, 48, 55, 81, 104, 126, 260, 262, 405, 410, 413, 415, 613, 648, 982, 984, 986, 990, 993, 1023], "logical_xor": [14, 157, 345], "binary_eros": 14, "128": [14, 15, 201, 236, 367, 535], "proj": [14, 648], "randn": [14, 34, 35, 40, 55, 66, 67, 81, 82, 99, 104, 129, 145, 153, 157, 170, 173, 190, 195, 196, 200, 214, 215, 218, 248, 251, 252, 257, 269, 271, 272, 276, 291, 292, 314, 318, 319, 338, 344, 345, 349, 383, 386, 642, 669, 671, 677, 818, 903, 906], "rgr_ridg": 14, "rec_l2": 14, "lassocv": [14, 133, 139, 171, 185, 190, 399, 415, 417, 650, 651, 653, 654, 655, 662, 683, 984, 1019, 1031, 1034, 1038, 1041, 1042, 1044, 1045, 1048], "rgr_lasso": 14, "rec_l1": 14, "wspace": [14, 15, 40, 45, 46, 63, 81, 96, 115, 201, 219, 230, 247, 249, 250, 253, 290, 298, 327, 336], "554": [14, 16, 209, 217, 288, 299, 303, 1010], "plot_tomography_l1_reconstruct": [14, 16, 1010], "hierarch": [14, 22, 37, 40, 41, 43, 45, 47, 53, 54, 55, 57, 58, 69, 168, 174, 226, 321, 361, 395, 416, 440, 442, 444, 445, 503, 511, 513, 521, 529, 546, 729, 853, 880, 1005, 1009, 1010, 1025, 1026, 1031, 1034, 1035, 1047], "signal": [14, 82, 96, 97, 98, 106, 126, 153, 158, 159, 168, 170, 179, 180, 186, 187, 189, 190, 195, 196, 200, 202, 220, 253, 320, 407, 408, 410, 416, 417, 418, 421, 474, 502, 520, 525, 530, 533, 536, 540, 624, 643, 644, 645, 646, 651, 652, 662, 663, 671, 683, 684, 685, 783, 818, 826, 874, 984, 988, 1005, 1010, 1013, 1018, 1025, 1026], "unstructur": [14, 37, 40, 41, 42, 45, 48, 57, 69, 168, 226, 303, 408, 440, 444, 462, 502, 529, 853, 1000, 1010, 1013, 1035], "nmf": [15, 73, 387, 407, 416, 534, 537, 543, 546, 1025, 1026, 1031, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "latentdirichletalloc": [15, 369, 386, 413, 1008, 1036, 1038, 1045, 1046], "corpu": [15, 353, 354, 376, 413, 587, 588, 589, 590, 1024, 1032], "frobeniu": [15, 99, 442, 446, 458, 468, 469, 470, 471, 472, 473, 474, 475, 530, 536, 537, 539, 544, 545, 546, 984, 1038], "kullback": [15, 222, 413, 537, 539, 546, 691, 985, 1038], "leibler": [15, 222, 413, 537, 539, 546, 691, 985, 1038], "diverg": [15, 125, 222, 227, 290, 537, 539, 546, 691, 856, 985, 987, 988, 993, 995, 1038, 1039, 1044], "probabilist": [15, 27, 28, 31, 79, 83, 95, 96, 106, 107, 108, 152, 153, 156, 159, 160, 163, 168, 236, 352, 395, 406, 414, 415, 436, 472, 475, 531, 533, 534, 540, 558, 587, 588, 609, 621, 642, 644, 675, 702, 739, 797, 822, 867, 902, 903, 905, 906, 981, 982, 984, 987, 988, 993, 998, 1003, 1004, 1008, 1010, 1013, 1031, 1034, 1038], "semant": [15, 352, 353, 395, 543, 1024, 1025, 1026, 1033], "runnabl": [15, 385, 386], "coupl": [15, 53, 54, 56, 223, 375, 376, 405, 406, 408, 417, 588, 906, 977, 1003], "ten": [15, 20, 113, 119, 150, 223, 253, 376, 378, 415, 519, 905, 1040], "polynomi": [15, 145, 165, 168, 176, 178, 179, 201, 207, 220, 235, 242, 262, 276, 290, 319, 320, 336, 346, 373, 377, 451, 490, 619, 638, 639, 640, 642, 671, 763, 772, 773, 826, 861, 870, 872, 875, 879, 900, 902, 903, 904, 905, 906, 983, 1003, 1010, 1011, 1026, 1043, 1044], "lda": [15, 34, 91, 95, 98, 100, 107, 108, 168, 294, 363, 378, 404, 503, 535, 540, 548, 549, 849, 1008, 1010, 1011, 1025, 1026, 1036], "proport": [15, 27, 41, 149, 187, 201, 208, 214, 230, 240, 265, 288, 292, 295, 347, 349, 367, 376, 406, 408, 410, 412, 413, 415, 416, 437, 438, 445, 468, 473, 514, 548, 549, 554, 556, 558, 559, 560, 561, 562, 563, 582, 583, 587, 590, 626, 631, 657, 658, 665, 666, 667, 673, 674, 675, 677, 695, 700, 711, 798, 799, 800, 801, 814, 817, 826, 846, 857, 858, 874, 900, 901, 902, 905, 906, 908, 910, 912, 914, 926, 977, 987, 988, 991, 994, 1002, 1003, 1004, 1036, 1048], "210": 15, "tf": [15, 20, 234, 352, 353, 354, 376, 413, 520, 543, 587, 588, 589, 590, 839, 847, 872, 977, 986, 990, 998, 1008, 1024], "idf": [15, 20, 234, 352, 353, 354, 376, 413, 520, 543, 587, 588, 589, 590, 839, 847, 872, 977, 986, 990, 998, 1024, 1031], "254": [15, 150, 151, 1010], "260": [15, 261, 1044], "2000": [15, 27, 41, 51, 76, 97, 104, 124, 177, 250, 253, 262, 280, 301, 321, 353, 376, 378, 408, 409, 415, 420, 451, 461, 532, 533, 558, 688, 690, 692, 741, 786, 795, 846, 876, 888, 985, 988, 994, 1000, 1015, 1023], "339": 15, "minibatchnmf": [15, 369, 413, 1045, 1047, 1048], "batch_siz": [15, 20, 43, 65, 96, 99, 100, 353, 413, 448, 533, 535, 536, 537, 538, 545, 856, 857, 858, 940, 941, 954, 1032, 1039, 1042, 1044, 1045], "094": [15, 185, 471], "255": [15, 49, 99, 285, 303, 313, 320, 376, 492, 493, 560, 561], "362": 15, "ensta": [15, 18, 38, 49, 62, 201, 219, 223, 263, 265, 352, 353, 354], "chyi": [15, 1034, 1035, 1036, 1037, 1038], "kwei": [15, 1034, 1035, 1036, 1037, 1038], "yau": [15, 1034, 1035, 1036, 1037, 1038], "chyikwei": 15, "fetch_20newsgroup": [15, 20, 71, 263, 330, 352, 353, 354, 376, 488, 1024, 1036, 1041], "countvector": [15, 330, 354, 376, 386, 409, 413, 416, 488, 535, 581, 588, 589, 590, 1024, 1031, 1033, 1036, 1039, 1040, 1041, 1042, 1043, 1044], "tfidfvector": [15, 20, 71, 263, 352, 376, 413, 416, 488, 587, 588, 589, 1024, 1031, 1033, 1039, 1040, 1041, 1044, 1045], "n_top_word": 15, "init": [15, 43, 46, 59, 60, 62, 65, 172, 181, 222, 223, 225, 226, 227, 248, 250, 285, 353, 384, 389, 408, 413, 415, 442, 446, 448, 450, 452, 458, 459, 537, 539, 546, 547, 558, 559, 631, 632, 689, 691, 693, 849, 985, 1031, 1040, 1043, 1045, 1046, 1047], "nndsvda": [15, 413, 537, 539, 546, 1040, 1043], "plot_top_word": 15, "feature_nam": [15, 20, 91, 107, 120, 127, 130, 150, 171, 173, 210, 241, 288, 307, 317, 318, 319, 336, 352, 358, 374, 376, 386, 409, 489, 490, 491, 495, 499, 500, 501, 503, 504, 509, 581, 630, 631, 632, 881, 912, 913, 914, 996, 1004, 1047], "flatten": [15, 33, 225, 235, 260, 311, 336, 348, 387, 501, 568, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 849], "topic_idx": 15, "top_features_ind": 15, "argsort": [15, 18, 20, 21, 22, 125, 127, 173, 174, 201, 219, 317, 326, 327, 352, 353, 376, 996], "top_featur": 15, "barh": [15, 127, 165, 166, 170, 171, 173, 174, 244, 314, 352, 353, 354], "fontdict": [15, 40], "labels": [15, 311], "set_vis": [15, 35, 289, 295, 307], "filter": [15, 47, 48, 207, 219, 260, 262, 287, 352, 376, 383, 387, 390, 407, 408, 416, 447, 487, 488, 502, 587, 590, 594, 595, 596, 597, 772, 835, 929, 953, 990, 991, 1021, 1024, 1041], "useless": [15, 122, 265, 387, 417, 514, 527, 657, 711, 984, 998, 1040], "strip": [15, 219, 353, 367, 375, 376, 495], "header": [15, 71, 263, 352, 353, 376, 379, 416, 487, 488, 797, 800, 801, 811], "footer": [15, 71, 263, 352, 353, 376, 487, 488], "repli": [15, 352, 380, 381, 384], "english": [15, 20, 71, 352, 353, 354, 386, 416, 587, 588, 590, 1008, 1009, 1024, 1044], "occur": [15, 71, 201, 205, 219, 347, 363, 381, 383, 389, 396, 405, 408, 410, 412, 416, 443, 507, 508, 571, 580, 587, 589, 590, 626, 670, 796, 797, 800, 801, 803, 811, 819, 822, 823, 824, 827, 870, 925, 988, 990, 998, 1024, 1031, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "data_sampl": 15, "tfidf_vector": 15, "max_df": [15, 263, 330, 352, 353, 587, 590, 1042], "min_df": [15, 20, 71, 263, 330, 352, 353, 416, 587, 590, 1031, 1033, 1042], "max_featur": [15, 32, 117, 128, 239, 259, 274, 319, 415, 417, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 587, 590, 596, 908, 909, 910, 911, 977, 984, 1031, 1033, 1034, 1038, 1039, 1042, 1045, 1048], "stop_word": [15, 20, 352, 353, 416, 587, 588, 590], "tfidf": [15, 71, 330, 416, 590, 1024], "tf_vector": 15, "beta_loss": [15, 537, 539, 546, 1038], "alpha_w": [15, 413, 537, 539, 546, 1044], "00005": 15, "alpha_h": [15, 413, 537, 539, 546, 1044], "tfidf_feature_nam": 15, "get_feature_names_out": [15, 20, 171, 173, 320, 352, 353, 354, 376, 383, 395, 409, 416, 424, 429, 432, 441, 442, 444, 446, 448, 463, 466, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 565, 566, 567, 568, 569, 580, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 687, 688, 691, 844, 849, 852, 856, 859, 860, 863, 864, 865, 866, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 998, 1044, 1045, 1046, 1047], "solver": [15, 31, 34, 35, 47, 67, 168, 179, 190, 192, 193, 194, 201, 203, 209, 216, 217, 219, 220, 301, 302, 303, 304, 314, 352, 387, 393, 395, 398, 404, 408, 420, 451, 461, 470, 471, 477, 501, 532, 534, 539, 540, 543, 546, 548, 645, 646, 647, 651, 652, 657, 658, 659, 660, 661, 662, 665, 667, 668, 669, 671, 673, 675, 679, 680, 683, 686, 687, 688, 690, 692, 694, 786, 811, 826, 831, 834, 857, 858, 902, 903, 904, 905, 906, 982, 985, 988, 992, 1002, 1003, 1008, 1010, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "mu": [15, 81, 82, 262, 413, 421, 472, 474, 475, 478, 479, 480, 539, 546, 982, 984, 1038, 1041], "mbnmf": 15, "learning_method": [15, 386, 535], "learning_offset": [15, 535], "tf_feature_nam": 15, "036": [15, 16, 387, 471, 1010], "plot_topics_extraction_with_nmf_lda": [15, 16, 1010], "649": [16, 115, 137, 1010], "execut": [16, 23, 29, 36, 69, 77, 84, 88, 94, 108, 110, 137, 143, 151, 163, 165, 167, 175, 178, 185, 190, 220, 228, 236, 245, 254, 267, 278, 281, 284, 299, 305, 315, 324, 332, 333, 350, 355, 362, 368, 381, 387, 402, 404, 408, 413, 419, 442, 460, 797, 803, 811, 819, 821, 822, 823, 824, 827, 845, 954, 955, 998, 1001, 1010, 1016, 1024, 1033, 1036, 1039], "auto_exampl": [16, 23, 29, 36, 69, 77, 84, 88, 94, 108, 110, 137, 143, 151, 163, 167, 175, 178, 220, 228, 245, 254, 278, 281, 284, 299, 305, 315, 324, 332, 333, 350, 355, 362], "mem": [16, 23, 29, 36, 55, 69, 77, 84, 88, 94, 108, 110, 137, 143, 151, 163, 167, 175, 178, 220, 228, 245, 254, 278, 281, 284, 299, 305, 315, 324, 332, 333, 350, 355, 362, 387, 507, 1010], "00": [16, 23, 29, 33, 36, 69, 77, 81, 84, 88, 94, 99, 108, 110, 137, 143, 151, 158, 163, 167, 171, 172, 175, 178, 192, 219, 220, 228, 234, 245, 254, 260, 263, 270, 278, 281, 284, 299, 304, 305, 315, 324, 326, 327, 332, 333, 350, 353, 355, 362, 375, 378, 387, 408, 415, 416, 712, 714, 786, 797, 811, 824, 909, 984, 988, 998, 1000, 1002, 1010, 1023], "09": [16, 98, 99, 106, 137, 171, 234, 238, 275, 278, 304, 408, 733, 838, 988, 998, 1002, 1010], "svm_gui": [16, 17, 1010, 1022], "wikipedia_principal_eigenvector": [16, 18, 1010], "graphic": [17, 20, 82, 172, 330, 352, 353, 354, 376, 387, 407, 408, 410, 413, 790, 791, 795, 830, 912, 988, 989, 995, 1008, 1024], "frontend": [17, 387], "mainli": [17, 28, 54, 113, 116, 153, 271, 280, 367, 383, 406, 610, 990, 995], "intend": [17, 58, 59, 100, 202, 343, 352, 381, 382, 383, 388, 393, 412, 467, 581, 672, 698, 869, 870, 880, 898, 983, 984, 988, 992, 999], "didact": [17, 381, 1009], "induc": [17, 27, 57, 171, 185, 192, 194, 199, 202, 216, 236, 240, 347, 354, 405, 407, 413, 415, 445, 448, 538, 542, 552, 556, 557, 558, 559, 563, 564, 565, 642, 724, 754, 873, 908, 909, 910, 911, 981, 988, 1002, 1022], "mous": [17, 375], "button": [17, 381, 389, 1022], "prettenho": 17, "tkagg": 17, "backend": [17, 368, 395, 467, 898, 954, 956, 958, 988, 1034, 1039, 1040, 1041, 1042], "backend_tkagg": 17, "figurecanvastkagg": 17, "navigationtoolbar2tk": 17, "navigationtoolbar2tkagg": 17, "deprec": [17, 320, 370, 384, 385, 390, 395, 399, 440, 444, 445, 446, 448, 449, 456, 458, 477, 525, 526, 535, 536, 537, 538, 539, 545, 552, 568, 569, 578, 579, 581, 626, 632, 637, 643, 644, 649, 650, 653, 654, 655, 657, 663, 664, 739, 740, 748, 749, 754, 766, 776, 777, 778, 800, 801, 803, 821, 822, 823, 847, 859, 873, 902, 903, 904, 905, 906, 916, 931, 932, 934, 977, 978, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "tkinter": 17, "tk": 17, "contourset": 17, "dump_svmlight_fil": [17, 1031, 1032, 1036, 1046], "y_min": [17, 32, 59, 115, 122, 131, 142, 155, 235, 301, 309, 331, 343, 344, 634, 636], "y_max": [17, 32, 59, 115, 122, 131, 142, 155, 219, 235, 301, 309, 331, 343, 344, 634, 636], "x_min": [17, 32, 53, 59, 115, 122, 126, 131, 142, 155, 190, 235, 301, 309, 331, 343, 344], "x_max": [17, 32, 53, 59, 115, 122, 131, 142, 155, 235, 301, 309, 331, 343, 344], "notifi": [17, 571, 572, 573, 1012, 1029, 1041], "regist": [17, 185, 352, 387, 956, 958], "surfac": [17, 32, 91, 100, 112, 113, 114, 115, 117, 134, 137, 161, 168, 184, 193, 210, 268, 288, 331, 335, 336, 356, 357, 359, 360, 361, 362, 415, 503, 552, 556, 563, 630, 762, 908, 914, 982, 987, 1002, 1003, 1004, 1010], "surface_typ": 17, "add_observ": 17, "set_surfac": 17, "intvar": 17, "coef0": [17, 177, 343, 346, 451, 534, 638, 639, 642, 773, 775, 902, 903, 904, 905, 906, 986, 1003], "kernel_map": 17, "hasattr": [17, 45, 57, 63, 83, 111, 122, 219, 234, 301, 309, 352, 395, 949, 1041], "x2": [17, 86, 92, 115, 125, 156, 213, 383, 409, 587, 628, 698, 1023], "decision_surfac": 17, "delta": [17, 411, 451], "clear_data": 17, "add_exampl": 17, "example_ad": 17, "refit": [17, 120, 139, 147, 149, 168, 231, 255, 261, 263, 266, 269, 270, 274, 278, 395, 412, 418, 501, 566, 626, 658, 664, 712, 797, 800, 801, 811, 826, 905, 977, 984, 988, 1010, 1038, 1039, 1040], "docstr": [17, 381, 383, 387, 395, 447, 460, 471, 698, 700, 927, 977, 988, 991, 992, 1002, 1031, 1038, 1039, 1044, 1045], "set_xlim": [17, 32, 43, 61, 76, 81, 93, 118, 131, 166, 172, 199, 201, 206, 235, 247, 266, 268, 280, 290, 301, 307, 309, 310, 311, 312, 318, 348], "attributeerror": [17, 409, 558, 576, 949, 1023, 1040, 1041, 1043, 1047, 1048], "get_tk_widget": 17, "pack": [17, 390, 1039], "fill": [17, 35, 122, 139, 173, 257, 290, 358, 395, 409, 413, 514, 526, 537, 539, 546, 586, 629, 912, 914, 978, 991, 1004], "_tkcanva": 17, "mpl_connect": 17, "button_press_ev": 17, "onclick": 17, "toolbar": 17, "controllbar": 17, "c_label": 17, "plot_kernel": 17, "exp": [17, 47, 55, 67, 102, 106, 116, 126, 154, 185, 211, 290, 295, 298, 318, 319, 323, 343, 406, 408, 409, 414, 420, 451, 464, 520, 532, 535, 614, 615, 621, 640, 757, 764, 774, 857, 858, 876, 982, 984, 986, 990, 991, 992, 1001, 1002, 1003, 1022], "xdata": 17, "ydata": 17, "update_exampl": 17, "scalex": 17, "scalei": 17, "examples_load": 17, "remove_surfac": 17, "plot_support_vector": 17, "plot_decision_surfac": 17, "old": [17, 219, 381, 385, 387, 408, 467, 535, 645, 651, 898, 985, 1009, 1012, 1031, 1036, 1037, 1039, 1044, 1045, 1046], "isinst": [17, 35, 122, 219, 395], "lineset": 17, "support_vector": [17, 337], "circl": [17, 35, 61, 101, 131, 132, 142, 227, 238, 292, 295, 302, 307, 309, 328, 343, 360, 377, 385, 389, 408, 451, 461, 513, 521, 762, 1003], "dash": [17, 34, 81, 113, 125, 135, 153, 156, 158, 171, 188, 193, 196, 202, 203, 210, 213, 214, 240, 262, 272, 341, 345, 1002], "bone": [17, 214, 349], "rais": [17, 111, 202, 237, 238, 265, 311, 320, 381, 383, 385, 386, 387, 390, 393, 395, 399, 402, 409, 412, 436, 442, 443, 446, 448, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 508, 532, 533, 537, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 575, 576, 580, 581, 587, 588, 589, 590, 592, 593, 601, 602, 609, 610, 616, 626, 628, 631, 634, 635, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 689, 695, 697, 701, 708, 710, 711, 712, 713, 725, 727, 728, 736, 754, 776, 780, 781, 782, 785, 786, 787, 795, 796, 797, 798, 799, 800, 801, 803, 804, 806, 811, 815, 819, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 845, 847, 849, 850, 851, 855, 857, 858, 859, 860, 863, 864, 865, 866, 867, 872, 873, 874, 878, 879, 880, 887, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 915, 918, 920, 921, 923, 924, 941, 945, 949, 972, 973, 974, 975, 988, 998, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "valueerror": [17, 237, 238, 383, 387, 399, 467, 576, 602, 616, 634, 670, 713, 832, 850, 859, 865, 879, 919, 923, 924, 973, 974, 975, 998, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048], "fm": 17, "kernel_group": 17, "radiobutton": 17, "command": [17, 234, 367, 368, 379, 381, 385, 387, 389, 398, 416, 507, 1008, 1024, 1033], "anchor": [17, 273], "valbox": 17, "stringvar": 17, "textvari": 17, "cmap_group": 17, "hyperplan": [17, 92, 115, 156, 168, 179, 193, 210, 220, 238, 265, 334, 335, 336, 337, 338, 339, 343, 344, 350, 511, 630, 657, 658, 665, 667, 673, 674, 675, 676, 900, 902, 904, 905, 1002, 1003, 1010], "train_button": 17, "get_pars": 17, "optpars": 17, "optionpars": 17, "op": [17, 385, 657, 658, 665, 666, 667, 675, 676, 677, 857, 858, 900, 998], "add_opt": 17, "action": [17, 320, 352, 380, 384, 385, 398, 998, 1041], "store": [17, 33, 54, 55, 71, 73, 82, 91, 147, 161, 177, 187, 190, 205, 223, 231, 241, 252, 267, 271, 326, 354, 361, 367, 375, 376, 381, 383, 388, 389, 390, 393, 395, 409, 411, 413, 415, 416, 418, 419, 437, 439, 443, 445, 449, 456, 468, 469, 472, 473, 474, 475, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 502, 507, 533, 534, 540, 548, 549, 554, 555, 556, 557, 562, 563, 564, 565, 568, 569, 588, 609, 610, 626, 630, 631, 634, 637, 648, 649, 653, 659, 660, 661, 662, 665, 666, 672, 674, 675, 676, 677, 687, 688, 689, 691, 696, 697, 699, 700, 701, 779, 795, 796, 797, 803, 811, 819, 840, 841, 842, 843, 844, 846, 848, 849, 850, 851, 852, 855, 871, 878, 880, 881, 895, 896, 897, 920, 921, 945, 946, 959, 962, 978, 980, 984, 991, 1000, 1003, 1004, 1008, 1015, 1024, 1028, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "dest": [17, 322], "dump": [17, 18, 402, 486, 840, 841], "argv": [17, 234], "opt": [17, 379, 383], "arg": [17, 237, 302, 382, 395, 413, 415, 422, 570, 571, 572, 573, 574, 575, 576, 577, 616, 698, 864, 984, 990, 991], "parse_arg": 17, "wm_titl": 17, "mainloop": 17, "__main__": [17, 330, 393], "iso": [17, 92, 152, 163, 168, 213, 224, 609, 612, 613, 1010], "gpc": [17, 27, 31, 32, 92, 122, 131, 142, 152, 158, 159, 160, 161, 163, 168, 211, 212, 213, 214, 236, 251, 301, 310, 331, 344, 345, 503, 609, 610, 612, 613, 618, 619, 621, 622, 702, 739, 1010, 1011, 1026, 1041], "adaboost": [17, 32, 92, 112, 116, 117, 122, 124, 129, 132, 133, 136, 137, 156, 168, 308, 343, 358, 359, 360, 518, 550, 552, 553, 558, 630, 702, 826, 908, 909, 1010, 1011, 1026, 1033], "exercis": [17, 74, 122, 131, 143, 149, 155, 157, 211, 214, 257, 267, 275, 276, 277, 331, 342, 344, 345, 349, 369, 370, 378, 381, 500, 501, 503, 504, 651, 652, 657, 797, 802, 822, 842, 905, 1010, 1016, 1034], "classic": [18, 196, 226, 247, 253, 378, 385, 410, 412, 413, 442, 446, 448, 458, 491, 499, 503, 509, 631, 632, 910, 911, 982, 984, 987, 990, 998, 1008, 1018, 1031, 1032, 1036, 1045], "graph": [18, 26, 40, 45, 47, 67, 68, 161, 222, 259, 285, 287, 329, 367, 381, 384, 395, 405, 410, 419, 440, 443, 444, 451, 452, 456, 461, 462, 470, 471, 477, 510, 584, 585, 687, 690, 691, 694, 780, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 855, 896, 985, 988, 991, 993, 1001, 1004, 1008, 1013, 1020, 1023, 1031, 1038, 1039, 1041, 1044, 1046], "vertex": [18, 27, 408, 452, 1044], "en": [18, 25, 389, 530, 536, 594, 635, 663, 667, 670, 684, 685, 694, 704, 842, 843, 848, 849, 850, 851, 878, 894, 908, 909, 984, 988, 1003, 1004], "wiki": [18, 25, 387, 389, 594, 635, 667, 670, 694, 704, 842, 843, 848, 849, 850, 851, 878, 894, 908, 909, 984, 1004], "eigenvector_centr": 18, "webpag": [18, 177, 381], "pagerank": 18, "insid": [18, 20, 27, 172, 203, 237, 262, 328, 339, 369, 375, 376, 383, 387, 399, 408, 416, 436, 442, 443, 446, 448, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 532, 533, 537, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 587, 588, 589, 590, 593, 609, 610, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 689, 798, 799, 804, 806, 815, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 845, 847, 850, 851, 857, 858, 860, 863, 865, 866, 867, 872, 879, 880, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 945, 948, 956, 995, 1013], "accord": [18, 25, 27, 38, 50, 79, 119, 125, 150, 154, 184, 201, 219, 234, 317, 343, 353, 363, 381, 383, 393, 394, 395, 396, 405, 408, 410, 412, 413, 415, 416, 418, 436, 449, 451, 455, 459, 461, 464, 468, 503, 515, 516, 517, 524, 529, 531, 534, 535, 537, 539, 549, 552, 553, 560, 561, 562, 565, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 640, 641, 643, 644, 648, 657, 658, 669, 679, 690, 694, 733, 777, 778, 797, 798, 799, 800, 801, 804, 805, 806, 811, 821, 835, 836, 837, 838, 839, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 863, 870, 878, 890, 892, 893, 900, 901, 902, 903, 905, 906, 982, 984, 988, 990, 991, 998, 1001, 1002, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "tradit": [18, 56, 201, 216, 353, 369, 406, 415, 416, 631, 693, 984, 987, 998, 1008, 1013], "power_iter": 18, "martinsson": [18, 534, 540, 937], "dbpedia": 18, "content": [18, 312, 352, 354, 376, 381, 385, 387, 402, 407, 416, 485, 502, 507, 508, 587, 588, 590, 670, 914, 997, 1013, 1024, 1032, 1041], "bz2": [18, 507, 508], "bz2file": 18, "pprint": [18, 126, 237, 263, 376, 932], "urlopen": 18, "randomized_svd": [18, 390, 450, 452, 531, 540, 543, 545, 1031, 1032, 1037, 1044, 1045, 1046], "redirects_url": 18, "redirects_en": 18, "nt": 18, "redirects_filenam": 18, "page_links_url": 18, "page_links_en": 18, "page_links_filenam": 18, "resourc": [18, 43, 126, 165, 201, 303, 319, 366, 370, 384, 394, 415, 800, 801, 989, 1006, 1009, 1013, 1016, 1026, 1039, 1044, 1045], "wait": [18, 381, 385, 395, 665, 666, 667, 675, 677, 1043], "wb": 18, "index_map": 18, "setdefault": [18, 915], "dbpedia_resource_prefix_len": 18, "shortname_slic": 18, "short_nam": 18, "nt_uri": 18, "uri": 18, "prefix": [18, 71, 263, 287, 317, 381, 385, 387, 389, 418, 424, 441, 442, 444, 446, 448, 463, 466, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 638, 639, 640, 641, 687, 688, 691, 803, 824, 844, 849, 852, 856, 860, 866, 892, 893, 1037, 1038, 1044, 1046], "get_redirect": 18, "transit": [18, 347, 385, 1042], "malform": [18, 1035], "1000000": [18, 535], "08d": 18, "isoformat": 18, "closur": 18, "transitive_target": 18, "seen": [18, 26, 41, 56, 67, 83, 99, 106, 120, 126, 171, 172, 197, 226, 233, 237, 302, 307, 339, 352, 376, 383, 385, 394, 395, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 424, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 520, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 622, 626, 627, 628, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 795, 796, 797, 800, 801, 811, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 963, 969, 977, 983, 991, 992, 998, 1004, 1013, 1019, 1020, 1022, 1023, 1043, 1044, 1045, 1046, 1047, 1048], "break": [18, 40, 47, 71, 82, 168, 190, 193, 207, 237, 249, 280, 320, 327, 334, 350, 352, 354, 381, 383, 385, 387, 394, 408, 468, 511, 638, 772, 776, 779, 795, 873, 880, 885, 902, 905, 984, 987, 996, 998, 1003, 1009, 1010, 1031, 1032, 1038, 1039, 1041, 1043, 1047], "get_adjacency_matrix": 18, "resolv": [18, 380, 381, 385, 389, 396, 416, 445, 451, 461, 690, 694, 937, 978, 988, 1038, 1040, 1041, 1044], "lil_matrix": 18, "float32": [18, 125, 225, 304, 322, 368, 376, 381, 383, 404, 556, 557, 558, 559, 562, 563, 564, 565, 592, 593, 639, 640, 657, 698, 761, 865, 908, 909, 910, 911, 918, 964, 965, 966, 1004, 1015, 1024, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "del": [18, 387, 1043, 1044], "csr": [18, 354, 367, 375, 376, 390, 393, 395, 416, 419, 442, 445, 446, 448, 449, 458, 496, 507, 522, 526, 552, 553, 556, 557, 563, 564, 565, 629, 657, 691, 713, 766, 790, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 855, 863, 867, 869, 871, 872, 873, 875, 878, 879, 880, 883, 884, 885, 887, 890, 893, 908, 909, 910, 911, 916, 920, 921, 943, 951, 963, 964, 965, 966, 967, 968, 969, 991, 998, 1002, 1031, 1032, 1037, 1039, 1040, 1046, 1047, 1048], "tocsr": 18, "convers": [18, 126, 192, 352, 363, 369, 375, 381, 383, 389, 393, 402, 416, 571, 855, 864, 872, 920, 921, 974, 985, 1009, 1013, 1039, 1040, 1041, 1044, 1047], "5m": 18, "ram": [18, 54, 369, 415, 892, 893, 990, 1003, 1024, 1037, 1043, 1046, 1047], "5000000": 18, "strongest": [18, 194], "highest": [18, 20, 27, 83, 146, 150, 205, 260, 262, 273, 319, 352, 381, 393, 406, 408, 412, 415, 417, 436, 554, 556, 563, 591, 594, 595, 597, 598, 599, 602, 603, 605, 634, 636, 724, 754, 792, 795, 797, 800, 801, 811, 897, 908, 939, 977, 984, 988, 989, 992, 1002, 1004, 1043], "centrality_scor": 18, "networkx": [18, 390], "copyright": [18, 83], "aric": 18, "hagberg": 18, "lanl": 18, "gov": [18, 378], "dan": [18, 1031, 1035, 1036, 1037, 1039, 1040], "schult": 18, "dschult": 18, "pieter": [18, 1037, 1038, 1045], "swart": 18, "incoming_count": 18, "nonzero": [18, 20, 106, 200, 234, 266, 354, 405, 419, 443, 522, 523, 530, 536, 541, 547, 587, 590, 684, 685, 698, 842, 843, 846, 848, 850, 851, 984, 988], "indptr": [18, 285, 361, 1039, 1047], "dangl": 18, "isclos": 18, "guess": [18, 113, 122, 412, 415, 416, 477, 531, 537, 539, 540, 546, 988, 1002], "prev_scor": 18, "dot": [18, 33, 34, 45, 50, 55, 58, 63, 79, 80, 81, 83, 86, 87, 97, 98, 99, 104, 106, 113, 116, 153, 154, 160, 161, 171, 182, 185, 193, 195, 196, 208, 235, 248, 249, 251, 252, 266, 335, 337, 343, 367, 383, 387, 390, 395, 405, 413, 416, 532, 537, 539, 546, 589, 590, 613, 645, 646, 649, 651, 652, 653, 656, 659, 660, 661, 662, 680, 683, 686, 759, 761, 872, 912, 938, 986, 990, 998, 1002, 1003, 1023, 1040], "converg": [18, 58, 62, 79, 80, 124, 126, 153, 159, 162, 194, 203, 209, 217, 248, 250, 302, 303, 307, 312, 327, 369, 390, 395, 405, 408, 413, 416, 418, 420, 439, 442, 445, 446, 447, 448, 451, 453, 458, 459, 460, 461, 470, 471, 477, 481, 482, 483, 532, 534, 535, 536, 537, 538, 545, 552, 570, 609, 643, 644, 645, 646, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 667, 671, 673, 675, 677, 681, 682, 686, 687, 689, 690, 693, 694, 795, 796, 849, 857, 858, 895, 896, 902, 978, 983, 984, 985, 987, 992, 1002, 1031, 1034, 1035, 1036, 1038, 1039, 1042, 1044, 1045, 1046, 1047, 1048], "l_inf": 18, "scores_max": 18, "err": [18, 86, 100, 113], "6f": [18, 100, 267, 735, 793], "concern": [19, 37, 78, 85, 89, 95, 109, 112, 144, 152, 164, 168, 176, 179, 221, 246, 252, 279, 282, 286, 300, 306, 325, 334, 351, 356, 367, 383, 407, 985, 1000], "twenti": [20, 234, 378, 405, 408, 1024], "comp": [20, 86, 87, 99, 107, 304, 330, 352, 353, 354, 376, 1024], "window": [20, 330, 376, 381, 383, 384, 416, 1008, 1031, 1034, 1038, 1042, 1044, 1045], "misc": [20, 54, 99, 263, 330, 352, 353, 354, 376, 1023], "categori": [20, 45, 63, 71, 72, 123, 133, 171, 172, 201, 209, 216, 240, 263, 302, 303, 309, 313, 314, 319, 322, 330, 352, 353, 354, 375, 376, 390, 407, 408, 409, 415, 416, 418, 487, 495, 496, 502, 560, 561, 647, 657, 658, 668, 679, 741, 756, 757, 836, 873, 874, 881, 978, 984, 985, 986, 990, 996, 1015, 1024, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "noth": [20, 71, 352, 353, 386, 541, 713, 863, 872, 921, 998], "frequenc": [20, 28, 153, 172, 185, 195, 201, 234, 318, 319, 352, 353, 354, 376, 393, 406, 412, 413, 415, 416, 417, 550, 556, 558, 559, 560, 563, 587, 588, 589, 590, 603, 657, 658, 663, 665, 667, 673, 674, 675, 684, 685, 829, 864, 873, 874, 900, 902, 905, 908, 910, 926, 984, 985, 990, 998, 1002, 1004, 1033, 1035, 1036, 1042], "dhillon": [20, 405, 450, 452, 510], "cut": [20, 44, 47, 66, 67, 224, 385, 393, 405, 408, 445, 451, 452, 461, 587, 590, 690, 694, 998], "minibatchkmean": [20, 37, 39, 41, 44, 45, 51, 59, 60, 61, 62, 64, 69, 92, 168, 353, 369, 408, 413, 439, 441, 446, 511, 777, 1010, 1032, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "coclust": [20, 405, 450, 512], "4415": 20, "3015": 20, "talk": [20, 71, 263, 352, 353, 354, 370, 376, 395, 402, 1013, 1016, 1024], "polit": [20, 352, 376, 380, 984, 989], "mideast": [20, 376], "cosmo": 20, "angmar": 20, "alfalfa": 20, "alphalpha": 20, "prolin": [20, 312, 378], "benson": 20, "1948": 20, "4325": 20, "gun": [20, 376], "sci": [20, 71, 352, 353, 354, 376, 393, 688, 692, 871, 985, 998, 1024], "med": [20, 71, 271, 376, 998, 1024], "geb": 20, "gordon": [20, 250, 1037, 1041, 1043, 1045], "clinton": 20, "pitt": 20, "cdt": 20, "surrend": 20, "veal": 20, "1259": 20, "3534": 20, "soc": [20, 376, 1024], "religion": [20, 263, 352, 353, 354, 376, 989, 1024], "alt": [20, 263, 330, 352, 353, 354, 376, 389, 1024], "atheism": [20, 263, 330, 352, 353, 354, 376, 1024], "god": [20, 352, 353, 1024], "jesu": [20, 352, 353], "kent": 20, "belief": [20, 262, 856, 993], "christ": 20, "faith": [20, 159, 344], "moral": [20, 72, 352, 657, 1039, 1043, 1044], "775": [20, 73, 77, 1010], "1623": 20, "pc": [20, 330, 354, 376], "hardwar": [20, 330, 354, 367, 368, 376, 379, 398, 404, 1008, 1045, 1046], "scsi": 20, "nada": 20, "vga": 20, "esdi": 20, "isa": 20, "kth": [20, 818], "s3": [20, 97, 150, 189, 190, 378, 1023], "vlb": 20, "bmug": 20, "2180": 20, "2802": 20, "mac": [20, 313, 330, 376, 381, 707, 988], "electron": [20, 150, 376, 378, 537, 539, 546, 626], "voltag": 20, "ship": [20, 133, 166, 358, 368, 379, 398, 416, 984, 1031, 1040], "circuit": [20, 985], "mpce": 20, "kolstad": 20, "spectralcoclust": [20, 22, 405, 450, 1033, 1038, 1042], "v_measure_scor": [20, 38, 39, 50, 59, 323, 353, 408, 716, 734, 735, 755, 988, 1040], "number_norm": 20, "token": [20, 354, 367, 376, 385, 416, 535, 587, 588, 589, 590, 1031, 1039, 1043], "placehold": [20, 385, 626, 627, 628, 629, 812, 813, 816, 817, 978], "begin": [20, 111, 150, 153, 257, 264, 283, 320, 352, 363, 381, 386, 387, 395, 405, 408, 415, 552, 553, 558, 560, 561, 665, 666, 675, 676, 677, 977, 980, 984, 988, 998, 1000, 1002, 1039, 1045, 1046], "By": [20, 46, 96, 129, 130, 180, 205, 237, 271, 280, 307, 317, 323, 343, 352, 368, 381, 383, 387, 388, 395, 399, 408, 409, 411, 412, 413, 414, 415, 417, 437, 440, 444, 445, 449, 463, 466, 467, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 523, 525, 548, 549, 556, 557, 558, 559, 563, 564, 584, 585, 587, 588, 590, 605, 608, 631, 632, 670, 672, 674, 676, 689, 691, 693, 696, 698, 699, 701, 702, 717, 727, 728, 732, 736, 781, 782, 785, 792, 794, 800, 801, 846, 860, 861, 873, 874, 876, 878, 888, 890, 898, 903, 904, 908, 909, 910, 911, 920, 921, 956, 977, 978, 980, 984, 988, 995, 998, 1000, 1004, 1015, 1019, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1043, 1045, 1048], "isdigit": [20, 416], "numbernormalizingvector": 20, "build_token": [20, 416, 587, 588, 590], "super": [20, 26, 28, 383, 416, 1039], "forsal": [20, 354, 376], "rec": [20, 354, 376, 640], "auto": [20, 26, 28, 34, 58, 59, 93, 146, 147, 150, 157, 177, 184, 222, 223, 224, 225, 227, 235, 242, 259, 261, 269, 285, 288, 293, 309, 317, 318, 319, 320, 321, 322, 335, 336, 337, 342, 345, 346, 354, 375, 376, 383, 415, 417, 418, 419, 440, 443, 444, 445, 446, 448, 449, 451, 456, 458, 461, 495, 507, 508, 534, 537, 539, 540, 543, 546, 548, 556, 557, 560, 561, 562, 563, 564, 566, 567, 592, 593, 596, 601, 606, 607, 628, 630, 631, 632, 634, 638, 645, 646, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 679, 680, 681, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 699, 701, 733, 739, 800, 801, 828, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 857, 858, 873, 874, 881, 892, 893, 897, 900, 901, 902, 903, 904, 905, 906, 910, 911, 936, 937, 954, 957, 979, 982, 984, 985, 988, 989, 991, 998, 1003, 1008, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "motorcycl": [20, 376], "sport": [20, 376], "basebal": [20, 376], "hockei": [20, 376], "crypt": [20, 376], "n_cluster": [20, 21, 22, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 96, 321, 353, 381, 395, 408, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 458, 459, 460, 461, 462, 510, 512, 1023, 1031, 1035, 1037, 1039, 1040, 1042, 1045], "svd_method": [20, 450, 452, 531, 1034], "kmean": [20, 21, 37, 38, 44, 46, 47, 49, 51, 54, 58, 59, 62, 66, 69, 168, 250, 253, 310, 321, 353, 390, 408, 439, 442, 447, 448, 451, 461, 511, 790, 791, 795, 796, 865, 991, 998, 1009, 1010, 1023, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "20000": [20, 98], "n_init": [20, 43, 44, 46, 51, 58, 59, 62, 65, 222, 223, 224, 225, 318, 321, 353, 408, 442, 446, 448, 450, 451, 452, 458, 461, 689, 693, 795, 796, 1023, 1031, 1039, 1045, 1046, 1047], "y_coclust": 20, "row_labels_": [20, 21, 22, 405, 450, 452], "y_kmean": 20, "fit_predict": [20, 57, 58, 61, 230, 237, 240, 292, 383, 395, 408, 426, 430, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 468, 562, 676, 795, 796, 846, 852, 860, 904, 994, 1036, 1039, 1040, 1044, 1046, 1048], "document_nam": 20, "bicluster_ncut": 20, "get_indic": [20, 423, 450, 452], "float_info": 20, "row_compl": 20, "logical_not": [20, 65, 106, 204], "rows_": [20, 405, 423, 450, 452], "col_compl": 20, "columns_": [20, 405, 423, 450, 452], "most_common": 20, "counter": [20, 113, 269, 408, 675, 676, 677, 1044], "itemgett": 20, "revers": [20, 76, 150, 206, 262, 533, 540, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 610, 787, 860, 988, 1031, 1032, 1041, 1043, 1047], "best_idx": [20, 261], "get_shap": [20, 423, 450, 452], "cluster_doc": 20, "cluster_word": 20, "cat_str": 20, "0f": [20, 59], "out_of_cluster_doc": 20, "word_col": 20, "word_scor": 20, "important_word": 20, "827": [20, 23, 40, 69, 1010], "plot_bicluster_newsgroup": [20, 23, 1010], "semi": [20, 32, 71, 122, 131, 142, 155, 235, 238, 301, 309, 319, 332, 336, 343, 354, 370, 376, 395, 487, 503, 534, 587, 589, 675, 727, 826, 860, 864, 895, 896, 897, 905, 986, 991, 994, 1010, 1011, 1026, 1031, 1043, 1046], "supervis": [20, 26, 28, 32, 38, 50, 55, 59, 71, 87, 105, 118, 122, 131, 141, 142, 155, 223, 235, 238, 249, 262, 294, 301, 309, 319, 329, 332, 336, 343, 353, 354, 367, 370, 376, 383, 394, 395, 406, 408, 411, 412, 413, 415, 416, 418, 436, 438, 463, 487, 502, 503, 552, 587, 589, 592, 593, 633, 675, 727, 798, 799, 802, 804, 805, 806, 807, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 825, 826, 849, 859, 860, 864, 874, 881, 895, 896, 897, 905, 982, 985, 988, 990, 991, 994, 998, 999, 1003, 1004, 1005, 1008, 1009, 1010, 1012, 1015, 1016, 1018, 1024, 1026, 1031, 1037, 1043], "checkerboard": [21, 405, 450, 452, 510, 512], "simultan": [21, 56, 97, 266, 270, 323, 347, 360, 373, 405, 408, 977, 988, 989, 1004, 1013, 1038], "identifi": [21, 91, 98, 105, 126, 127, 170, 171, 201, 204, 205, 250, 252, 260, 265, 271, 294, 314, 319, 343, 352, 353, 375, 376, 380, 381, 385, 386, 395, 408, 409, 412, 415, 416, 445, 449, 456, 486, 495, 507, 508, 554, 555, 556, 557, 562, 563, 564, 565, 605, 642, 648, 698, 711, 772, 825, 846, 865, 895, 896, 977, 984, 988, 994, 1001, 1013, 1022, 1038, 1040, 1045, 1046], "particularli": [21, 32, 71, 72, 75, 106, 131, 202, 232, 262, 309, 318, 349, 363, 367, 381, 390, 395, 408, 409, 411, 414, 416, 495, 803, 819, 837, 937, 956, 984, 985, 988, 990, 1009, 1013, 1023, 1031, 1036, 1038, 1039, 1045], "suit": [21, 96, 131, 171, 201, 202, 230, 252, 320, 321, 323, 352, 368, 381, 383, 386, 387, 389, 393, 398, 411, 413, 415, 449, 451, 502, 676, 837, 881, 931, 977, 980, 985, 988, 990, 991, 1002, 1008, 1009, 1013, 1017, 1038, 1045], "arrang": [21, 283, 631, 831, 832, 833, 834, 988], "genom": [21, 512], "rearrang": [21, 22, 405], "kemaleren": [21, 22], "make_checkerboard": [21, 510, 1033], "uniform": [21, 32, 38, 54, 125, 126, 129, 146, 154, 159, 162, 180, 181, 215, 227, 230, 233, 270, 288, 291, 292, 297, 301, 308, 310, 311, 314, 321, 323, 338, 383, 386, 408, 437, 438, 550, 568, 569, 609, 610, 627, 638, 648, 649, 653, 667, 675, 676, 677, 698, 720, 721, 726, 743, 744, 746, 748, 749, 751, 783, 788, 789, 801, 809, 811, 835, 836, 839, 842, 843, 850, 851, 865, 877, 879, 889, 925, 939, 977, 978, 987, 988, 991, 1037, 1039, 1041, 1045, 1047], "matshow": [21, 22, 67, 121, 148, 303, 501], "afterward": [21, 385, 534, 540, 824], "row_idx_shuffl": 21, "permut": [21, 22, 38, 82, 119, 121, 127, 142, 145, 150, 168, 169, 175, 217, 255, 262, 278, 311, 314, 329, 397, 403, 408, 415, 463, 495, 499, 503, 558, 559, 563, 564, 626, 629, 633, 678, 703, 704, 716, 734, 735, 753, 755, 793, 814, 816, 825, 826, 860, 874, 905, 908, 909, 937, 959, 962, 988, 1002, 1010, 1019, 1022, 1026, 1031, 1037, 1044, 1046], "col_idx_shuffl": 21, "redefin": [21, 126, 171], "lost": [21, 58, 83, 376, 382, 393, 985, 988], "ground": [21, 33, 41, 46, 50, 58, 59, 62, 79, 83, 87, 99, 129, 161, 185, 195, 201, 202, 240, 253, 265, 353, 395, 407, 408, 702, 703, 704, 707, 711, 712, 713, 714, 716, 717, 720, 721, 722, 726, 727, 728, 732, 734, 735, 736, 737, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 781, 782, 783, 784, 785, 788, 789, 793, 794, 988, 1001, 1015, 1023, 1039], "truth": [21, 33, 41, 46, 50, 58, 59, 62, 79, 83, 87, 99, 104, 129, 161, 185, 195, 201, 202, 240, 253, 265, 353, 395, 407, 408, 702, 703, 704, 707, 711, 712, 713, 714, 716, 717, 720, 721, 722, 724, 726, 727, 728, 732, 734, 735, 736, 737, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 781, 782, 783, 784, 785, 788, 789, 793, 794, 988, 1015, 1023, 1039, 1045], "consensus_scor": [21, 22, 405, 1033], "biclusters_": [21, 22, 423, 450, 452], "consensu": [21, 22, 38, 380, 381, 396, 405, 408, 648, 670, 677, 678, 718, 988], "perfect": [21, 27, 38, 71, 82, 99, 101, 197, 201, 352, 353, 381, 385, 408, 412, 552, 553, 689, 693, 703, 704, 707, 716, 724, 726, 729, 735, 741, 754, 755, 783, 784, 793, 984, 988, 991, 1003, 1013, 1022, 1045], "ascend": [21, 72, 173, 313, 415, 449, 455, 626, 634, 912, 913, 914, 1002, 1041, 1047], "column_labels_": [21, 22, 405, 450, 452], "reorder": [21, 46, 103, 395, 696, 717, 1009, 1039], "reordered_row": 21, "reordered_data": 21, "step": [21, 27, 34, 43, 55, 56, 59, 68, 71, 72, 73, 74, 75, 82, 87, 99, 104, 113, 118, 122, 123, 133, 147, 148, 149, 155, 158, 171, 173, 201, 209, 219, 231, 232, 235, 241, 244, 253, 260, 263, 269, 271, 285, 287, 288, 293, 301, 304, 309, 312, 313, 318, 321, 331, 335, 339, 353, 354, 357, 363, 367, 370, 376, 379, 380, 381, 383, 385, 386, 389, 393, 395, 405, 406, 408, 410, 411, 413, 415, 416, 417, 441, 446, 448, 535, 536, 537, 538, 545, 562, 587, 588, 590, 592, 593, 596, 605, 626, 643, 647, 665, 666, 668, 675, 677, 678, 679, 693, 699, 795, 796, 797, 800, 801, 811, 831, 832, 833, 834, 856, 857, 858, 860, 861, 863, 900, 901, 902, 903, 905, 906, 936, 937, 959, 963, 978, 984, 987, 992, 993, 998, 1002, 1004, 1005, 1008, 1012, 1020, 1024, 1031, 1035, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1047], "outer": [21, 101, 267, 328, 450, 513, 639, 649, 650, 653, 980, 1032], "product": [21, 72, 96, 134, 153, 158, 172, 343, 363, 367, 383, 384, 387, 390, 402, 405, 413, 415, 450, 537, 539, 546, 581, 588, 589, 590, 612, 613, 632, 639, 663, 664, 684, 685, 759, 761, 773, 775, 872, 875, 892, 893, 938, 977, 980, 984, 986, 998, 1000, 1002, 1003, 1008, 1013, 1039], "shade": [21, 54, 184, 288, 293, 335, 413], "481": [21, 23, 162, 1010], "plot_spectral_biclust": [21, 23, 1010], "silhouett": [21, 37, 38, 39, 50, 58, 59, 66, 69, 168, 353, 381, 446, 511, 790, 791, 1010, 1031, 1035], "propag": [21, 33, 37, 38, 50, 56, 64, 65, 69, 90, 148, 168, 239, 325, 332, 376, 407, 439, 453, 501, 511, 513, 696, 703, 704, 712, 713, 716, 717, 735, 791, 793, 860, 874, 895, 896, 897, 954, 955, 992, 1010, 1011, 1025, 1026, 1031, 1043, 1046], "make_biclust": [22, 512, 1033], "implant": 22, "row_idx": [22, 201], "col_idx": 22, "fit_data": 22, "330": [22, 23, 327, 1010], "plot_spectral_coclust": [22, 23, 1010], "638": [23, 387], "being": [25, 28, 35, 46, 53, 56, 83, 87, 91, 101, 113, 117, 130, 153, 158, 171, 173, 177, 195, 237, 240, 256, 262, 304, 311, 312, 339, 343, 352, 354, 379, 380, 381, 383, 385, 386, 393, 395, 396, 402, 408, 410, 412, 415, 416, 417, 418, 419, 421, 440, 441, 443, 444, 449, 455, 468, 474, 492, 522, 568, 639, 648, 655, 671, 673, 686, 689, 693, 711, 717, 727, 732, 734, 781, 787, 795, 840, 841, 846, 848, 850, 851, 852, 875, 893, 938, 977, 978, 984, 987, 988, 991, 994, 995, 996, 998, 1000, 1002, 1003, 1004, 1031, 1032, 1037, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048], "postprocess": [25, 406, 534, 540], "brier": [25, 26, 406, 708], "brier_scor": 25, "sigmoid": [25, 26, 27, 28, 373, 415, 436, 451, 534, 560, 619, 638, 642, 763, 772, 775, 857, 858, 902, 903, 904, 905, 906, 993, 1003, 1026, 1044, 1048], "isoton": [25, 26, 74, 76, 168, 225, 229, 245, 370, 436, 656, 923, 1010, 1011, 1026, 1032, 1033, 1034, 1035, 1037, 1044, 1047], "belong": [25, 28, 31, 56, 61, 240, 262, 317, 323, 328, 375, 376, 405, 406, 408, 409, 411, 412, 415, 423, 439, 442, 446, 447, 448, 450, 452, 522, 711, 729, 804, 810, 821, 847, 867, 881, 944, 945, 984, 987, 988, 990, 991, 992, 994, 1003, 1008, 1015, 1022], "mblondel": [25, 49, 192, 223, 263, 352, 375, 507], "telecom": [25, 26, 43, 230, 1013], "balaz": [25, 1035], "kegl": [25, 1035], "jhm": [25, 26, 27, 28, 153, 154, 156, 157, 158, 159, 160, 162, 236], "informatik": [25, 26, 27, 28, 153, 154, 156, 157, 158, 159, 160, 162, 236, 988], "uni": [25, 26, 27, 28, 75, 117, 153, 154, 156, 157, 158, 159, 160, 162, 192, 235, 236, 328, 347], "bremen": [25, 26, 27, 28, 153, 154, 156, 157, 158, 159, 160, 162, 236], "make_blob": [25, 27, 34, 39, 43, 44, 45, 50, 56, 57, 58, 60, 61, 63, 64, 65, 92, 193, 213, 230, 250, 310, 318, 321, 337, 340, 341, 348, 377, 383, 384, 415, 514, 1039, 1042, 1045], "50000": 25, "n_bin": [25, 26, 28, 54, 201, 219, 308, 310, 314, 437, 438, 865, 998], "calibration_curv": [25, 406, 436, 437, 1040, 1045], "blob": [25, 34, 35, 43, 45, 58, 63, 65, 92, 408, 447, 511, 1036], "sample_weight": [25, 182, 201, 214, 219, 237, 318, 323, 349, 381, 395, 399, 408, 415, 419, 425, 431, 436, 442, 443, 446, 448, 458, 459, 464, 468, 481, 482, 483, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 609, 610, 631, 632, 633, 634, 636, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 686, 696, 697, 699, 701, 702, 706, 707, 708, 711, 712, 715, 717, 719, 720, 721, 722, 724, 725, 726, 727, 728, 732, 733, 736, 737, 738, 739, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 780, 781, 782, 783, 785, 786, 787, 788, 789, 792, 794, 797, 811, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 845, 847, 850, 851, 857, 858, 860, 865, 879, 880, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 914, 948, 976, 988, 1002, 1003, 1004, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047], "sw_train": [25, 318], "sw_test": [25, 318], "calibratedclassifiercv": [25, 26, 27, 363, 395, 399, 406, 675, 977, 1003, 1009, 1035, 1037, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "brier_score_loss": [25, 26, 406, 988, 1039, 1040, 1041], "gaussiannb": [25, 26, 28, 32, 135, 264, 363, 406, 415, 436, 568, 835, 836, 837, 839, 861, 982, 989, 990, 1035, 1036, 1037, 1039, 1044, 1047], "With": [25, 35, 45, 68, 76, 91, 101, 124, 130, 146, 168, 172, 201, 203, 229, 231, 236, 238, 244, 245, 262, 289, 367, 370, 376, 381, 383, 395, 408, 409, 412, 415, 417, 436, 438, 500, 581, 631, 632, 657, 766, 858, 861, 863, 874, 880, 881, 907, 909, 981, 984, 985, 988, 989, 991, 992, 995, 1002, 1004, 1010, 1015, 1016, 1023, 1028, 1034, 1038, 1039, 1041, 1043, 1045], "itself": [25, 50, 56, 113, 126, 129, 172, 185, 199, 237, 243, 271, 285, 314, 339, 353, 367, 369, 380, 381, 383, 385, 395, 399, 407, 408, 419, 439, 440, 443, 444, 445, 468, 469, 470, 471, 472, 473, 474, 475, 526, 530, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 550, 565, 568, 582, 591, 594, 595, 597, 598, 599, 601, 602, 638, 639, 640, 641, 642, 644, 654, 688, 690, 790, 791, 835, 836, 837, 838, 839, 840, 841, 845, 853, 854, 865, 866, 867, 895, 896, 945, 980, 984, 985, 987, 991, 992, 996, 1008, 1035, 1046], "prob_pos_clf": 25, "predict_proba": [25, 26, 27, 28, 31, 35, 131, 135, 150, 154, 155, 156, 157, 237, 271, 283, 301, 309, 312, 317, 319, 352, 383, 388, 395, 406, 407, 415, 436, 437, 548, 549, 550, 552, 554, 556, 558, 560, 563, 566, 568, 592, 593, 609, 618, 619, 621, 622, 630, 631, 632, 657, 658, 675, 697, 699, 701, 739, 740, 786, 795, 796, 797, 800, 801, 811, 821, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 842, 850, 857, 860, 867, 895, 896, 897, 902, 905, 908, 910, 984, 988, 990, 992, 995, 1001, 1002, 1003, 1004, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "clf_isoton": 25, "prob_pos_isoton": 25, "clf_sigmoid": 25, "prob_pos_sigmoid": 25, "clf_score": 25, "No": [25, 115, 128, 185, 193, 207, 209, 210, 237, 327, 344, 347, 358, 378, 389, 393, 398, 408, 473, 558, 559, 589, 590, 634, 644, 663, 675, 677, 684, 685, 795, 984], "clf_isotonic_scor": 25, "clf_sigmoid_scor": 25, "084": 25, "y_uniqu": 25, "rainbow": [25, 224], "this_i": [25, 207], "this_x": [25, 199, 207, 1022], "this_sw": 25, "lexsort": 25, "linewidth": [25, 34, 35, 38, 41, 59, 74, 79, 87, 93, 114, 126, 130, 153, 157, 161, 190, 191, 195, 196, 197, 199, 202, 204, 207, 215, 218, 230, 238, 240, 271, 275, 291, 295, 308, 318, 337, 338, 340, 345, 359, 1020], "51": [25, 158, 219, 280, 285, 408, 409, 779, 984, 1027], "uncalibr": [25, 26, 27, 436], "gnb": [25, 26, 28, 135, 415, 568, 990], "351": [25, 29, 1010], "plot_calibr": [25, 29, 1010], "metadata": [25, 111, 168, 182, 229, 245, 353, 370, 375, 376, 402, 422, 425, 428, 431, 432, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 487, 488, 495, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 944, 945, 946, 947, 948, 972, 988, 1008, 1009, 1010, 1015, 1026, 1047], "rout": [25, 111, 168, 182, 229, 245, 370, 422, 425, 428, 431, 432, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 945, 946, 947, 948, 972, 1010, 1026, 1045, 1047], "votingclassifi": [25, 27, 28, 112, 137, 168, 210, 288, 358, 399, 503, 563, 569, 630, 657, 838, 842, 905, 908, 977, 1010, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045], "reliabl": [26, 28, 406, 412, 437, 438, 645, 1004, 1013], "diagram": [26, 28, 72, 242, 318, 383, 406, 408, 437, 438, 467, 898, 998, 1042, 1043, 1048], "redund": [26, 28, 107, 149, 248, 253, 363, 377, 380, 381, 386, 395, 406, 514, 633, 1009, 1024, 1043], "uninform": [26, 28, 314, 377, 386, 416, 977, 984, 1039], "rest": [26, 31, 123, 127, 168, 179, 185, 210, 216, 220, 237, 240, 250, 280, 317, 330, 336, 348, 387, 395, 407, 418, 511, 609, 630, 643, 657, 658, 675, 752, 786, 828, 829, 830, 849, 900, 902, 905, 984, 988, 989, 992, 995, 1003, 1010, 1013, 1035, 1036, 1045, 1046, 1047], "make_classif": [26, 28, 32, 92, 117, 118, 120, 124, 147, 149, 259, 265, 273, 274, 295, 301, 309, 317, 319, 323, 347, 363, 377, 384, 404, 436, 437, 511, 552, 554, 556, 563, 665, 696, 697, 699, 701, 819, 824, 830, 857, 860, 900, 977, 988, 989, 998, 1003, 1037, 1038, 1039, 1041], "100_000": [26, 28, 171], "n_inform": [26, 28, 32, 92, 117, 120, 147, 149, 180, 185, 204, 205, 259, 265, 275, 295, 301, 309, 317, 347, 383, 386, 514, 523, 552, 553, 554, 555, 563, 564, 664, 830, 989, 1039], "n_redund": [26, 28, 32, 92, 120, 147, 149, 259, 265, 295, 301, 309, 386, 436, 514, 552, 554, 563, 830], "logisticregress": [26, 28, 31, 72, 74, 118, 135, 141, 149, 150, 184, 191, 192, 193, 194, 208, 216, 217, 231, 232, 242, 244, 265, 271, 304, 309, 317, 318, 319, 320, 321, 323, 352, 367, 381, 383, 387, 389, 394, 399, 406, 409, 415, 417, 437, 566, 568, 596, 630, 633, 642, 651, 658, 671, 672, 673, 674, 675, 686, 699, 786, 811, 819, 831, 832, 834, 885, 886, 888, 889, 890, 891, 907, 932, 984, 988, 989, 998, 1002, 1003, 1020, 1022, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "baselin": [26, 113, 123, 126, 136, 150, 174, 180, 219, 272, 283, 319, 353, 378, 408, 417, 550, 551, 633, 988, 991, 1024, 1047], "regular": [26, 32, 37, 41, 58, 60, 61, 62, 69, 72, 74, 80, 101, 112, 122, 125, 127, 131, 137, 139, 142, 153, 154, 155, 157, 160, 162, 165, 168, 170, 179, 180, 181, 183, 185, 186, 188, 189, 190, 192, 196, 197, 199, 201, 208, 215, 217, 219, 220, 236, 248, 256, 258, 263, 264, 266, 275, 290, 291, 300, 302, 303, 304, 305, 309, 310, 311, 312, 313, 314, 331, 334, 336, 338, 339, 340, 343, 344, 348, 349, 350, 352, 354, 357, 367, 381, 393, 394, 406, 408, 410, 411, 413, 414, 415, 418, 436, 442, 446, 470, 471, 475, 477, 478, 479, 480, 503, 511, 513, 514, 519, 521, 523, 527, 537, 538, 539, 542, 546, 547, 549, 558, 560, 561, 587, 588, 590, 637, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 686, 688, 692, 733, 739, 748, 795, 796, 814, 826, 827, 857, 858, 861, 880, 900, 901, 902, 903, 905, 906, 907, 977, 978, 980, 981, 982, 985, 987, 993, 994, 998, 1001, 1002, 1003, 1010, 1011, 1013, 1019, 1020, 1022, 1026, 1031, 1032, 1033, 1035, 1036, 1040, 1041, 1043, 1044], "logist": [26, 28, 31, 70, 72, 73, 76, 77, 91, 105, 107, 118, 141, 168, 179, 186, 188, 196, 198, 199, 205, 206, 207, 210, 212, 218, 220, 231, 233, 242, 244, 270, 273, 274, 283, 296, 302, 303, 304, 312, 321, 335, 336, 347, 348, 352, 395, 396, 406, 409, 415, 417, 418, 436, 488, 495, 501, 503, 511, 540, 558, 560, 570, 609, 630, 645, 656, 657, 658, 665, 667, 675, 739, 797, 811, 826, 856, 857, 858, 860, 880, 907, 923, 925, 988, 992, 993, 1002, 1003, 1010, 1011, 1013, 1020, 1026, 1035, 1038, 1039, 1041, 1042], "guid": [26, 56, 70, 96, 119, 162, 168, 171, 172, 189, 222, 269, 291, 292, 295, 313, 317, 318, 319, 320, 321, 322, 323, 370, 379, 380, 381, 386, 387, 388, 394, 395, 396, 399, 407, 409, 415, 419, 420, 421, 422, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 458, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 618, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 696, 697, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 914, 933, 988, 989, 1017, 1024, 1031, 1032, 1033, 1034, 1036, 1038, 1040, 1041, 1048], "gridspec": [26, 28, 66, 247, 388], "calibrationdisplai": [26, 28, 406, 1044, 1045], "lr": [26, 28, 118, 135, 136, 204, 216, 232, 233, 258, 265, 394, 399, 415, 567, 568, 569, 711], "gnb_isoton": 26, "gnb_sigmoid": 26, "clf_list": [26, 28], "get_cmap": [26, 28, 344], "dark2": [26, 28, 223], "ax_calibration_curv": [26, 28], "calibration_displai": [26, 28], "histogram": [26, 28, 54, 112, 118, 124, 137, 168, 201, 234, 261, 263, 268, 290, 307, 319, 406, 489, 558, 559, 560, 561, 563, 564, 641, 756, 757, 797, 802, 980, 986, 998, 1010, 1025, 1026, 1043, 1046], "grid_posit": [26, 28], "y_prob": [26, 28, 156, 437, 438, 708, 831, 857, 988, 1045], "poorli": [26, 63, 79, 87, 116, 128, 226, 368, 408, 415, 527, 629, 984, 985, 1037], "violat": [26, 339, 389, 393, 395, 634, 924, 995, 1002, 1004], "typic": [26, 28, 100, 111, 177, 185, 201, 205, 219, 236, 264, 265, 269, 271, 272, 291, 292, 319, 339, 353, 367, 374, 375, 376, 379, 383, 384, 385, 390, 394, 395, 406, 407, 408, 409, 412, 413, 415, 416, 418, 442, 446, 448, 495, 550, 552, 554, 555, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 628, 637, 639, 642, 653, 654, 655, 670, 681, 682, 711, 867, 874, 878, 881, 936, 937, 945, 948, 973, 977, 981, 984, 985, 987, 988, 989, 990, 994, 996, 1013, 1024, 1040, 1044, 1047], "transpos": [26, 262, 420, 525, 537, 539, 546, 659, 660, 661, 662, 786, 937, 974, 980, 988, 1000, 1023, 1031, 1045], "nearli": [26, 265, 376, 395, 407, 762, 988, 991, 1000, 1024], "albeit": 26, "strongli": [26, 28, 83, 87, 99, 123, 127, 171, 183, 216, 237, 268, 352, 381, 397, 398, 406, 415, 657, 734, 793, 984, 985, 1026, 1040, 1047], "plenti": 26, "greater": [26, 93, 113, 115, 171, 218, 235, 240, 250, 268, 283, 291, 292, 357, 367, 377, 386, 395, 406, 408, 411, 415, 440, 444, 448, 451, 462, 471, 535, 540, 556, 557, 558, 559, 560, 561, 563, 564, 565, 592, 593, 596, 609, 610, 627, 639, 641, 644, 663, 665, 666, 670, 675, 676, 677, 691, 708, 711, 719, 733, 734, 737, 740, 786, 793, 795, 796, 830, 842, 843, 850, 851, 857, 858, 863, 878, 890, 894, 897, 900, 901, 908, 909, 910, 911, 937, 977, 983, 984, 985, 988, 989, 994, 998, 1003, 1004, 1034, 1039, 1042, 1044, 1045, 1046], "exploit": [26, 283, 989, 1009, 1034], "f1_score": [26, 269, 330, 376, 736, 988, 1031, 1033, 1034, 1035, 1036, 1040, 1041, 1047], "log_loss": [26, 27, 125, 128, 154, 312, 330, 352, 395, 406, 415, 556, 558, 560, 563, 645, 657, 675, 908, 910, 977, 984, 988, 1002, 1004, 1033, 1035, 1037, 1045, 1046, 1047, 1048], "precision_scor": [26, 269, 707, 785, 988, 1031, 1033, 1034, 1035, 1036, 1041, 1047], "recall_scor": [26, 269, 412, 707, 782, 988, 1031, 1033, 1034, 1035, 1036, 1041, 1047], "roc_auc_scor": [26, 150, 262, 271, 317, 701, 705, 706, 707, 787, 988, 1033, 1034, 1039, 1041, 1045, 1046], "score_nam": [26, 38, 236, 264, 277, 323, 353, 803, 819], "score_df": 26, "set_index": [26, 113, 126, 158, 190, 219, 262, 313, 353], "decim": [26, 159, 470, 471, 913, 1038, 1039], "098932": 26, "323200": 26, "937443": 26, "871965": 26, "851348": 26, "861533": 26, "117608": 26, "782755": 26, "940374": 26, "857400": 26, "875941": 26, "866571": 26, "098332": 26, "370738": 26, "938613": 26, "883065": 26, "836224": 26, "859007": 26, "108880": 26, "368896": 26, "940201": 26, "861106": 26, "871277": 26, "866161": 26, "refin": [26, 83, 471, 708, 988, 1024], "alter": [26, 166, 383, 395, 727, 728, 736, 781, 782, 785, 1036, 1040, 1043], "uncertainti": [26, 153, 160, 180, 264, 406, 408, 566, 567, 642, 860, 978, 1000], "linearsvc": [26, 28, 71, 73, 146, 147, 168, 177, 235, 259, 261, 269, 309, 317, 334, 336, 340, 341, 347, 350, 352, 367, 383, 387, 406, 416, 417, 436, 511, 566, 576, 630, 638, 642, 651, 671, 672, 673, 674, 675, 686, 733, 740, 823, 828, 901, 902, 905, 907, 984, 988, 989, 1003, 1010, 1031, 1032, 1033, 1037, 1039, 1042, 1047], "naivelycalibratedlinearsvc": [26, 28], "df_min_": [26, 28], "df_max_": [26, 28], "calibrated_df": [26, 28], "proba_pos_class": [26, 28], "clip": [26, 28, 219, 233, 307, 339, 634, 675, 739, 870, 998, 1035, 1042, 1043], "proba_neg_class": [26, 28], "proba": [26, 28, 135, 436, 908, 910], "dual": [26, 28, 71, 73, 146, 147, 177, 235, 259, 261, 269, 309, 317, 336, 337, 347, 352, 416, 417, 470, 471, 477, 566, 567, 610, 638, 645, 646, 651, 652, 657, 658, 659, 660, 661, 662, 680, 683, 733, 828, 840, 841, 900, 901, 902, 905, 988, 989, 1003, 1033, 1042, 1045, 1047], "svc_isoton": 26, "svc_sigmoid": 26, "opposit": [26, 28, 54, 68, 101, 171, 172, 190, 269, 395, 406, 410, 412, 417, 442, 446, 448, 468, 537, 539, 546, 562, 711, 728, 846, 904, 1031], "behavior": [26, 28, 38, 40, 53, 149, 165, 168, 171, 172, 201, 219, 237, 253, 255, 265, 267, 278, 303, 304, 307, 309, 314, 339, 363, 368, 375, 378, 381, 383, 385, 389, 390, 395, 406, 408, 412, 416, 535, 550, 565, 665, 666, 667, 675, 676, 677, 698, 700, 727, 728, 781, 782, 785, 798, 799, 802, 814, 815, 816, 817, 818, 837, 873, 900, 901, 977, 984, 989, 994, 998, 1003, 1010, 1013, 1015, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "hing": [26, 208, 211, 213, 270, 336, 337, 341, 343, 395, 665, 675, 733, 900, 907, 984, 1002, 1003, 1024], "focus": [26, 79, 190, 280, 376, 393, 985, 998, 1008], "far": [26, 61, 83, 123, 154, 160, 171, 201, 219, 339, 343, 352, 354, 381, 390, 418, 719, 880, 963, 993, 994, 1003, 1013, 1022], "awai": [26, 27, 28, 61, 79, 122, 153, 154, 158, 204, 343, 344, 376, 406, 418, 627, 842, 843, 850, 851, 987, 988, 1003, 1022], "shown": [26, 49, 58, 90, 111, 115, 119, 126, 162, 170, 172, 185, 191, 199, 219, 227, 230, 235, 240, 249, 262, 265, 268, 271, 280, 290, 302, 303, 307, 308, 309, 326, 347, 352, 353, 381, 386, 396, 406, 408, 409, 412, 413, 414, 416, 418, 437, 459, 631, 697, 699, 700, 701, 712, 797, 811, 912, 914, 983, 984, 985, 988, 991, 996, 998, 1002, 1003, 1004, 1024, 1035, 1040, 1041, 1042, 1045], "varieti": [26, 165, 249, 313, 339, 389, 393, 407, 408, 410, 416, 642, 991, 1004, 1008, 1013, 1033, 1046, 1047], "niculescu": [26, 28, 406, 436, 438], "mizil": [26, 28, 406, 436, 438], "caruana": [26, 28, 406, 436, 438], "144943": 26, "465660": 26, "937597": 26, "872186": 26, "851792": 26, "861868": 26, "099820": 26, "376999": 26, "936480": 26, "853174": 26, "877981": 26, "865400": 26, "098758": 26, "321301": 26, "937532": 26, "873724": 26, "848743": 26, "861053": 26, "deal": [26, 58, 72, 165, 171, 185, 226, 280, 343, 354, 381, 386, 409, 416, 417, 418, 473, 495, 702, 707, 761, 785, 866, 937, 984, 1013, 1021, 1034, 1046, 1047], "situat": [26, 45, 58, 73, 170, 171, 207, 230, 265, 381, 389, 410, 412, 413, 415, 467, 527, 533, 581, 873, 876, 888, 898, 982, 984, 990, 991, 1001, 1004, 1039], "icml": [26, 28, 406, 408, 416, 436, 438, 835, 837, 856, 988, 990, 1002, 1007], "2005": [26, 28, 82, 378, 406, 436, 438, 849, 984, 991, 1001], "plot_calibration_curv": [26, 29, 1010], "simplex": [27, 669, 795, 875], "arrow": [27, 1045], "green": [27, 82, 93, 116, 130, 135, 153, 177, 227, 302, 308, 312, 318, 395, 989, 1039, 1040, 1042, 1043], "600": [27, 51, 132, 133, 376, 679], "x_train_valid": 27, "y_train_valid": 27, "cluster_std": [27, 39, 45, 50, 56, 57, 58, 60, 61, 63, 64, 65, 213, 230, 250, 310, 341, 511], "x_valid": 27, "y_valid": 27, "randomforestclassifi": [27, 28, 32, 57, 117, 118, 119, 120, 121, 122, 135, 173, 174, 242, 243, 259, 274, 317, 319, 352, 363, 394, 395, 406, 415, 417, 556, 557, 558, 560, 565, 566, 568, 800, 801, 830, 910, 977, 978, 989, 1013, 1028, 1035, 1036, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048], "concaten": [27, 35, 40, 51, 62, 70, 73, 77, 82, 115, 129, 146, 161, 168, 180, 183, 215, 223, 230, 247, 251, 252, 258, 267, 268, 269, 270, 271, 272, 290, 304, 311, 314, 327, 338, 342, 352, 409, 463, 466, 503, 508, 530, 536, 540, 541, 598, 779, 797, 859, 860, 862, 865, 873, 905, 989, 1010, 1019, 1032], "randomforestclassifierifittedrandomforestclassifi": [27, 120, 121], "cal_clf": 27, "prefit": [27, 395, 406, 417, 436, 566, 567, 596, 1009, 1043, 1044, 1045], "x27": [27, 72, 73, 118, 133, 136, 147, 171, 172, 173, 231, 232, 241, 242, 244, 252, 260, 262, 263, 269, 274, 304, 313, 318, 319, 321, 328], "calibratedclassifiercvifittedcalibratedclassifiercv": 27, "randomforestclassifierrandomforestclassifi": [27, 173, 242, 274], "clf_prob": 27, "cal_clf_prob": 27, "head_width": 27, "ro": 27, "bo": [27, 1043], "unit": [27, 71, 81, 171, 177, 201, 219, 290, 303, 307, 353, 376, 381, 382, 383, 387, 389, 390, 413, 416, 420, 463, 488, 489, 518, 523, 531, 532, 533, 540, 541, 588, 589, 590, 606, 607, 610, 657, 658, 675, 684, 698, 768, 847, 856, 857, 858, 864, 870, 872, 876, 878, 880, 886, 887, 888, 890, 891, 900, 901, 984, 986, 987, 988, 993, 998, 1004, 1008, 1022, 1035, 1039, 1045, 1046], "mid": [27, 339, 988, 990], "frac": [27, 81, 82, 113, 262, 269, 271, 320, 405, 406, 408, 410, 413, 414, 415, 416, 418, 431, 462, 464, 481, 482, 483, 553, 555, 557, 559, 561, 564, 567, 569, 610, 614, 618, 621, 622, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 668, 669, 671, 672, 677, 678, 679, 695, 753, 767, 833, 834, 843, 851, 858, 901, 903, 906, 909, 911, 980, 982, 983, 984, 985, 986, 988, 990, 991, 992, 993, 995, 996, 998, 1000, 1002, 1003, 1004, 1022], "shrink": [27, 83, 96, 127, 172, 185, 196, 199, 205, 222, 251, 307, 347, 413, 558, 559, 675, 677, 847, 857, 858, 902, 903, 904, 905, 906, 991, 1003, 1022], "perfectli": [27, 38, 265, 276, 343, 397, 408, 415, 437, 566, 605, 703, 704, 714, 716, 734, 735, 755, 784, 793, 873, 983, 985, 988, 1003, 1044, 1045], "incur": [27, 618, 900, 1003, 1039], "decreas": [27, 40, 47, 56, 59, 67, 76, 130, 149, 150, 161, 171, 172, 174, 209, 233, 234, 264, 269, 275, 301, 309, 312, 317, 357, 367, 369, 381, 406, 408, 415, 440, 444, 462, 520, 533, 534, 540, 556, 557, 558, 559, 560, 561, 563, 564, 565, 601, 634, 635, 636, 675, 676, 677, 705, 711, 725, 780, 787, 857, 858, 908, 909, 910, 911, 977, 979, 980, 984, 985, 988, 991, 992, 995, 996, 1002, 1003, 1013, 1022, 1033, 1038, 1041, 1044], "cal_scor": 27, "327": [27, 728, 1022], "549": 27, "p1d": 27, "p0": 27, "p1": [27, 135], "p2": [27, 135, 219], "calibrated_classifi": 27, "calibrated_classifiers_": [27, 406, 436], "this_p": 27, "sure": [27, 57, 194, 207, 237, 238, 363, 367, 368, 375, 379, 380, 381, 382, 383, 385, 386, 389, 393, 406, 409, 416, 492, 522, 648, 920, 921, 931, 974, 978, 985, 1002, 1008, 1009, 1038, 1039, 1041, 1046], "renorm": 27, "multiclass": [27, 31, 119, 179, 193, 217, 220, 231, 238, 240, 243, 255, 259, 267, 269, 272, 278, 281, 283, 302, 304, 336, 348, 357, 370, 376, 377, 383, 384, 386, 395, 399, 408, 415, 436, 451, 461, 488, 495, 503, 556, 558, 560, 563, 566, 567, 570, 593, 601, 609, 630, 631, 632, 657, 658, 665, 667, 672, 673, 674, 675, 701, 705, 707, 727, 728, 732, 733, 736, 741, 752, 781, 782, 785, 786, 787, 792, 797, 798, 800, 801, 802, 803, 811, 813, 815, 819, 820, 821, 822, 823, 824, 825, 826, 827, 867, 881, 900, 902, 905, 908, 910, 982, 984, 998, 999, 1003, 1004, 1010, 1011, 1012, 1024, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1046, 1047, 1048], "argmax": [27, 104, 261, 275, 383, 415, 568, 828, 908, 1003, 1044], "483": [27, 29, 160, 163, 647, 1010], "plot_calibration_multiclass": [27, 29, 1010], "gave": [28, 406, 797, 800, 801, 811, 867], "four": [28, 146, 161, 177, 183, 202, 249, 250, 327, 336, 377, 381, 395, 556, 563, 718, 908, 910, 926, 984, 986, 987, 988, 998, 1007], "naiv": [28, 32, 131, 262, 264, 283, 352, 354, 370, 376, 406, 415, 416, 436, 543, 835, 836, 837, 838, 839, 982, 983, 991, 1011, 1026, 1031, 1032, 1033, 1034, 1039, 1041, 1044, 1046], "bay": [28, 32, 116, 131, 153, 190, 252, 264, 352, 370, 376, 406, 413, 415, 416, 535, 548, 549, 655, 835, 836, 837, 838, 839, 881, 982, 983, 984, 998, 1011, 1024, 1026, 1031, 1032, 1033, 1034, 1039, 1041, 1044, 1046], "train_sampl": [28, 216, 217], "against": [28, 38, 87, 106, 116, 127, 145, 177, 192, 193, 210, 218, 237, 271, 313, 317, 339, 376, 381, 396, 406, 408, 412, 416, 437, 508, 541, 547, 550, 675, 677, 753, 755, 786, 799, 804, 806, 825, 829, 954, 980, 984, 988, 989, 991, 1003, 1007, 1015], "rfc": [28, 243, 317, 1028], "contrast": [28, 105, 172, 203, 236, 262, 264, 294, 312, 353, 395, 406, 408, 411, 415, 418, 448, 451, 461, 618, 642, 811, 856, 978, 981, 983, 984, 988, 991, 993, 996, 998, 1001, 1002, 1004, 1041], "push": [28, 381, 385, 406, 1012], "equat": [28, 347, 381, 408, 413, 415, 556, 557, 558, 559, 563, 564, 565, 589, 626, 657, 658, 681, 682, 686, 761, 880, 908, 909, 910, 911, 978, 985, 988, 993, 1039], "twice": [28, 274, 352, 354, 383, 418, 618, 728, 730, 939, 1040, 1048], "approx": [28, 96, 235, 413, 415, 416, 988, 995, 1002], "rare": [28, 172, 313, 363, 385, 393, 395, 397, 406, 408, 412, 588, 647, 657, 658, 668, 679, 900, 925, 956, 984, 998, 1013, 1038, 1039, 1040, 1044, 1046], "explan": [28, 87, 237, 367, 380, 381, 406, 416, 977, 987, 989, 1004, 1013, 1034], "bag": [28, 71, 98, 112, 117, 119, 127, 128, 137, 168, 173, 209, 280, 353, 354, 377, 406, 407, 515, 516, 517, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 739, 802, 826, 909, 986, 989, 1010, 1011, 1026, 1031, 1033, 1034, 1035, 1036, 1037, 1044, 1045, 1047], "underli": [28, 57, 81, 132, 150, 174, 202, 204, 205, 237, 267, 289, 290, 343, 360, 368, 381, 393, 395, 397, 399, 404, 406, 408, 410, 412, 413, 414, 415, 417, 418, 436, 450, 451, 452, 461, 463, 464, 470, 471, 477, 523, 563, 564, 566, 567, 568, 569, 592, 593, 596, 601, 657, 658, 664, 667, 679, 690, 694, 797, 800, 801, 811, 821, 822, 823, 828, 829, 830, 831, 832, 833, 834, 843, 845, 900, 908, 909, 910, 911, 953, 984, 985, 989, 994, 1001, 1003, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1047, 1048], "restrict": [28, 67, 68, 74, 86, 165, 168, 191, 216, 218, 300, 305, 383, 387, 393, 406, 408, 415, 416, 464, 492, 501, 531, 580, 609, 652, 653, 654, 655, 657, 681, 682, 712, 780, 786, 787, 826, 848, 850, 851, 852, 854, 856, 857, 858, 860, 886, 988, 1004, 1010, 1025, 1026, 1031, 1033, 1041, 1043], "move": [28, 122, 263, 304, 339, 380, 381, 385, 387, 406, 408, 548, 549, 570, 571, 572, 574, 576, 577, 955, 1023, 1031, 1032, 1036, 1039, 1041, 1044, 1045], "characterist": [28, 45, 63, 150, 158, 168, 230, 231, 243, 255, 257, 259, 264, 269, 278, 307, 329, 363, 376, 378, 386, 406, 412, 415, 418, 502, 503, 622, 637, 657, 701, 705, 707, 725, 780, 786, 787, 816, 826, 829, 867, 905, 984, 1010], "difficult": [28, 56, 113, 171, 209, 240, 381, 389, 406, 413, 415, 552, 553, 558, 560, 561, 983, 985, 987, 991, 993, 995, 1004, 1013, 1031, 1045], "domingo": [28, 786, 988], "pazzani": 28, "proc": [28, 80, 406, 416, 449, 688, 692, 835, 977, 985, 990, 994], "13th": 28, "intl": [28, 412], "1996": [28, 408, 415, 419, 443, 515, 516, 517, 554, 555, 998], "zadrozni": [28, 406, 436, 675], "bianca": 28, "charl": [28, 762, 1031, 1034, 1037, 1041, 1043, 1046], "elkan": [28, 318, 406, 436, 442, 446, 458, 675, 1037, 1041, 1042, 1044, 1045], "vol": [28, 161, 185, 268, 378, 408, 473, 558, 559, 627, 634, 644, 663, 684, 685, 795, 825, 837, 978, 990, 991], "2001": [28, 158, 173, 261, 405, 408, 415, 436, 450, 451, 452, 461, 510, 558, 559, 563, 564, 627, 633, 638, 644, 690, 695, 733, 786, 881, 893, 925, 978, 980, 984, 988, 994, 996, 998, 1000, 1003], "208": [28, 29, 150, 285, 336, 350, 378, 1010], "plot_compare_calibr": [28, 29, 1010], "built": [31, 87, 111, 113, 114, 122, 124, 173, 209, 265, 280, 298, 317, 358, 361, 367, 379, 381, 382, 383, 385, 387, 389, 390, 393, 394, 395, 398, 402, 407, 408, 409, 412, 415, 417, 444, 502, 552, 553, 554, 555, 558, 559, 560, 561, 587, 588, 592, 596, 638, 639, 640, 641, 642, 645, 646, 651, 657, 659, 660, 661, 662, 671, 672, 673, 674, 680, 800, 801, 808, 831, 834, 840, 841, 910, 911, 972, 984, 988, 989, 1001, 1002, 1004, 1008, 1013, 1024, 1031, 1034, 1035, 1037, 1043], "troubl": [31, 416], "ovr": [31, 193, 216, 280, 283, 317, 348, 657, 658, 786, 829, 900, 902, 905, 984, 988, 989, 1003, 1031, 1036, 1037, 1039, 1040, 1041, 1045, 1046], "gaussian_process": [31, 32, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 168, 370, 395, 418, 642, 989, 1010, 1034, 1037, 1038], "gaussianprocessclassifi": [31, 32, 154, 155, 156, 157, 161, 395, 418, 610, 618, 619, 621, 622, 989, 1037, 1039, 1041, 1045], "accuracy_scor": [31, 113, 154, 266, 312, 329, 352, 363, 394, 399, 404, 556, 563, 707, 727, 728, 732, 736, 781, 782, 785, 792, 794, 977, 988, 1032, 1033, 1034, 1043, 1048], "load_iri": [31, 42, 46, 75, 91, 100, 103, 105, 107, 122, 124, 134, 142, 146, 155, 184, 194, 210, 244, 249, 256, 267, 268, 269, 271, 272, 288, 293, 296, 302, 317, 319, 322, 331, 335, 336, 339, 342, 358, 361, 394, 402, 408, 409, 412, 415, 417, 560, 566, 601, 609, 618, 619, 621, 622, 630, 657, 658, 786, 797, 800, 801, 803, 811, 828, 849, 895, 896, 897, 908, 910, 912, 913, 914, 978, 983, 988, 989, 990, 991, 995, 998, 1004, 1015, 1021, 1022, 1023, 1037, 1039, 1042], "saga": [31, 192, 216, 217, 657, 658, 671, 673, 686, 811, 984, 1038, 1040], "multi_class": [31, 193, 216, 271, 317, 568, 609, 657, 658, 786, 834, 900, 984, 989, 1003, 1031, 1035, 1039, 1044, 1046], "n_classifi": [31, 568, 569], "classifier_idx": 31, "class_of_interest": [31, 271, 630, 1048], "vmin": [31, 41, 83, 96, 99, 107, 156, 159, 180, 185, 192, 217, 235, 251, 257, 303, 339], "vmax": [31, 52, 83, 96, 99, 107, 156, 159, 180, 185, 192, 217, 235, 251, 257, 303, 339], "mask_y_pr": 31, "04": [31, 41, 43, 55, 86, 98, 106, 137, 150, 158, 163, 167, 171, 175, 182, 200, 219, 238, 247, 253, 262, 263, 275, 278, 298, 299, 324, 346, 378, 415, 417, 470, 471, 786, 797, 811, 984, 988, 992, 1002, 1010], "scalarmapp": 31, "viridi": [31, 39, 285, 696], "cax": [31, 156, 273], "orient": [31, 96, 171, 222, 307, 395, 912, 985], "horizont": [31, 96, 222, 235, 307, 310, 386, 395, 463, 514, 696, 700], "385": [31, 36, 353, 1010], "plot_classification_prob": [31, 36, 1010], "20newgroup": [31, 168, 179, 193, 217, 220, 302, 304, 488, 570, 657, 826, 984, 1010], "mnist": [31, 168, 179, 192, 194, 209, 216, 220, 285, 300, 302, 305, 347, 495, 570, 657, 826, 857, 880, 923, 984, 992, 1010], "salt": [32, 235, 309, 1045], "convei": [32, 227, 309, 1022], "linearli": [32, 101, 115, 150, 171, 180, 215, 223, 230, 271, 272, 309, 312, 343, 352, 367, 378, 393, 413, 415, 514, 641, 706, 869, 870, 988, 991, 994, 1003, 1022, 1038, 1047], "transpar": [32, 309, 973, 1013], "ga\u00ebl": [32, 46, 52, 74, 90, 91, 103, 184, 198, 199, 309, 343, 344, 396, 1013], "modifi": [32, 46, 52, 74, 76, 90, 91, 184, 185, 198, 199, 211, 222, 223, 224, 237, 240, 249, 323, 344, 349, 379, 381, 383, 385, 395, 408, 415, 418, 442, 446, 453, 458, 467, 481, 482, 483, 484, 494, 509, 580, 609, 610, 612, 618, 675, 677, 688, 692, 727, 728, 766, 781, 782, 785, 918, 984, 1001, 1002, 1009, 1021, 1025, 1026, 1031, 1033, 1034, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1046], "listedcolormap": [32, 35, 122, 293, 296, 301, 309], "make_circl": [32, 45, 63, 101, 131, 227, 301, 302, 309, 328, 377, 1032, 1039, 1042], "make_moon": [32, 45, 63, 230, 262, 301, 302, 309, 377, 977, 1038, 1042], "discriminant_analysi": [32, 34, 35, 105, 223, 294, 363, 370, 404, 535, 849, 982, 989, 1031, 1034, 1035, 1036, 1037, 1038], "quadraticdiscriminantanalysi": [32, 35, 548, 982, 989, 991, 1031, 1036, 1038, 1046], "adaboostclassifi": [32, 115, 122, 399, 415, 553, 558, 560, 1033, 1034, 1037, 1038, 1040, 1041, 1044, 1046, 1047, 1048], "kneighborsclassifi": [32, 134, 141, 287, 288, 293, 294, 312, 319, 321, 352, 415, 601, 843, 847, 848, 849, 850, 851, 989, 991, 1022, 1031, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "neural_network": [32, 168, 172, 241, 300, 301, 302, 303, 304, 305, 369, 370, 393, 989, 992, 1010, 1033, 1048], "mlpclassifi": [32, 128, 141, 168, 208, 300, 301, 303, 305, 369, 501, 503, 513, 521, 570, 856, 858, 870, 989, 992, 1010, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "decisiontreeclassifi": [32, 113, 115, 122, 134, 266, 280, 323, 357, 358, 361, 395, 415, 552, 554, 556, 558, 560, 563, 630, 803, 824, 909, 910, 912, 913, 914, 978, 989, 1004, 1032, 1033, 1035, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "net": [32, 168, 179, 185, 187, 188, 192, 195, 212, 220, 234, 237, 275, 297, 387, 407, 412, 470, 471, 477, 500, 523, 556, 557, 558, 559, 563, 564, 565, 645, 646, 651, 656, 657, 658, 659, 660, 661, 662, 667, 675, 677, 680, 683, 856, 908, 909, 910, 911, 977, 988, 993, 1002, 1010, 1011, 1013, 1026, 1031, 1036, 1040, 1041, 1043], "qda": [32, 378, 548, 549, 1011, 1026, 1036], "025": [32, 203, 240, 259, 689, 693], "samm": [32, 113, 115, 122, 415, 552, 1047, 1048], "n_clusters_per_class": [32, 92, 117, 147, 149, 259, 295, 301, 309, 386, 514], "linearly_separ": [32, 301], "ds_cnt": [32, 309, 310], "rdbu": [32, 35, 96, 217, 301, 339, 344], "cm_bright": [32, 301, 309], "ff0000": [32, 293, 301], "0000ff": [32, 293, 301], "ep": [32, 45, 47, 50, 56, 66, 184, 186, 225, 234, 393, 408, 419, 443, 449, 454, 470, 471, 477, 630, 645, 646, 649, 650, 651, 652, 653, 654, 655, 659, 660, 661, 662, 680, 681, 682, 683, 689, 693, 713, 739, 852, 892, 893, 894, 1000, 1046, 1047], "lstrip": [32, 45, 63, 230, 301, 309], "179": [32, 36, 91, 94, 341, 350, 378, 387, 415, 1010, 1031], "plot_classifier_comparison": [32, 36, 309, 1010], "versu": [32, 98, 112, 122, 131, 133, 137, 142, 155, 168, 171, 179, 210, 216, 220, 230, 235, 236, 238, 250, 255, 257, 278, 280, 291, 293, 301, 309, 325, 330, 332, 336, 337, 338, 343, 408, 412, 415, 418, 503, 533, 555, 609, 630, 638, 657, 658, 665, 667, 673, 674, 675, 676, 781, 797, 802, 822, 832, 861, 896, 897, 904, 905, 909, 977, 984, 988, 989, 994, 1001, 1002, 1003, 1010, 1022, 1039], "8x8": [33, 90, 192, 234, 294, 304, 378, 501, 1021], "grayscal": 33, "imread": 33, "load_digit": [33, 52, 53, 59, 73, 74, 90, 140, 141, 148, 192, 208, 223, 234, 235, 260, 261, 264, 270, 277, 287, 289, 294, 302, 304, 323, 326, 327, 387, 409, 444, 445, 531, 532, 533, 534, 598, 599, 637, 638, 667, 687, 688, 689, 690, 1015, 1019, 1020, 1021, 1022, 1023, 1037, 1042], "set_axis_off": 33, "gray_r": [33, 90, 99, 156, 223, 304, 326, 327, 1021], "entir": [33, 165, 201, 209, 304, 307, 318, 343, 361, 363, 375, 382, 383, 395, 402, 408, 412, 414, 416, 471, 491, 533, 587, 588, 589, 590, 646, 650, 652, 654, 657, 658, 660, 662, 664, 665, 667, 675, 681, 682, 732, 794, 828, 829, 832, 857, 859, 860, 873, 885, 886, 888, 889, 890, 891, 977, 978, 988, 998, 1002, 1004, 1022, 1040, 1041], "98": [33, 43, 45, 55, 63, 65, 83, 99, 150, 230, 260, 301, 309, 327, 378, 385, 412, 415, 658, 835, 983, 990, 1019, 1024], "899": [33, 260], "confus": [33, 168, 231, 255, 271, 278, 326, 327, 352, 395, 467, 503, 630, 651, 696, 712, 714, 717, 727, 728, 736, 752, 782, 785, 826, 898, 905, 1010, 1024, 1031, 1032, 1036, 1040, 1041, 1043, 1044, 1045, 1046], "figure_": [33, 172, 241, 317, 319, 388, 437, 630, 631, 696, 697, 699, 700, 701, 803, 819], "confusion_matrix": [33, 231, 256, 326, 327, 696, 712, 752, 823, 988, 1024, 1032, 1037, 1038, 1041, 1042, 1044, 1048], "gt": [33, 72, 73, 118, 133, 171, 252, 260, 274, 379, 381, 385], "rebuilt": [33, 840, 841], "424": [33, 36, 161, 219, 1010], "plot_digits_classif": [33, 36, 1010], "elimin": [33, 52, 90, 139, 140, 144, 147, 150, 151, 168, 257, 261, 267, 289, 326, 327, 329, 407, 408, 412, 447, 501, 514, 592, 593, 596, 601, 657, 800, 801, 816, 905, 974, 988, 1010, 1011, 1013, 1026, 1031], "oracl": [34, 201, 219, 421, 468, 469, 472, 473, 474, 475, 982, 1031], "shrinkag": [34, 78, 80, 83, 84, 104, 128, 168, 296, 421, 468, 469, 472, 473, 474, 475, 476, 478, 479, 480, 538, 542, 548, 560, 561, 797, 984, 998, 1010, 1011, 1026, 1031, 1035, 1036, 1038], "lineardiscriminantanalysi": [34, 35, 105, 223, 294, 363, 404, 535, 549, 849, 982, 989, 991, 1031, 1034, 1035, 1036, 1037, 1038, 1040, 1043, 1045, 1046, 1047], "200": [34, 35, 45, 51, 55, 61, 76, 99, 115, 124, 126, 132, 157, 187, 196, 202, 205, 206, 207, 213, 218, 223, 242, 247, 263, 269, 271, 272, 307, 310, 328, 338, 339, 360, 363, 376, 383, 393, 413, 415, 420, 439, 453, 467, 470, 471, 532, 533, 534, 537, 538, 539, 542, 546, 583, 648, 650, 670, 678, 691, 811, 857, 858, 898, 902, 903, 904, 905, 906, 1003], "n_averag": 34, "n_features_max": 34, "ish": 34, "acc_clf1": 34, "acc_clf2": 34, "acc_clf3": 34, "n_features_rang": 34, "score_clf1": 34, "score_clf2": 34, "score_clf3": 34, "clf1": [34, 134, 135, 415, 568], "lsqr": [34, 314, 548, 671, 673, 686, 982, 1032, 1038, 1045], "clf2": [34, 134, 135, 383, 402, 415, 568], "store_precis": [34, 80, 468, 469, 472, 473, 474, 475], "assume_cent": [34, 80, 410, 421, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479], "clf3": [34, 134, 135, 383, 415, 568], "covariance_estim": [34, 548, 982, 1043], "features_samples_ratio": 34, "gold": [34, 195, 202, 204, 207, 211, 215, 218, 248, 253, 269, 291, 338, 387], "navi": [34, 71, 80, 100, 105, 106, 132, 180, 204, 212, 225, 248, 249, 250, 253, 269, 271, 290, 297, 328, 360], "692": [34, 36, 113, 1010], "plot_lda": [34, 36, 1010], "ledoitwolf": [34, 78, 80, 83, 84, 104, 128, 168, 296, 410, 468, 469, 473, 474, 475, 476, 797, 1010, 1035], "likelihood": [34, 58, 78, 80, 81, 82, 83, 84, 104, 128, 153, 154, 155, 157, 158, 159, 160, 162, 168, 189, 219, 251, 255, 262, 268, 278, 296, 304, 307, 383, 395, 406, 410, 413, 415, 418, 436, 468, 469, 470, 471, 472, 473, 474, 475, 476, 514, 531, 535, 540, 548, 549, 550, 609, 610, 630, 644, 657, 711, 739, 795, 796, 797, 823, 826, 845, 856, 876, 888, 902, 903, 905, 906, 984, 987, 990, 998, 1003, 1010, 1034, 1035, 1040, 1046], "neighborhood": [34, 56, 83, 87, 105, 141, 166, 168, 222, 247, 285, 286, 287, 288, 296, 297, 299, 378, 395, 408, 413, 419, 443, 445, 449, 456, 501, 503, 514, 540, 548, 627, 630, 695, 826, 842, 843, 846, 848, 849, 850, 851, 852, 854, 860, 861, 880, 985, 994, 1010, 1011, 1026, 1040], "doubl": [35, 119, 274, 381, 395, 413, 537, 539, 546, 840, 841, 851, 972, 978, 1003, 1004, 1031, 1041, 1042], "dispers": [35, 408, 709, 723, 984], "cov_class_1": 35, "cov_class_2": 35, "matric": [35, 40, 41, 81, 83, 96, 206, 248, 249, 251, 252, 253, 285, 298, 318, 330, 352, 353, 373, 375, 383, 384, 393, 394, 395, 408, 409, 410, 411, 413, 416, 417, 423, 449, 450, 452, 463, 472, 481, 482, 483, 533, 534, 537, 539, 540, 543, 546, 548, 549, 554, 555, 562, 565, 580, 581, 588, 642, 657, 663, 671, 673, 686, 752, 758, 766, 772, 776, 777, 778, 779, 790, 795, 796, 826, 844, 847, 852, 863, 867, 869, 872, 875, 877, 878, 880, 883, 885, 887, 889, 890, 891, 892, 893, 902, 903, 905, 906, 916, 937, 943, 952, 959, 961, 962, 978, 980, 982, 985, 986, 987, 989, 991, 992, 1000, 1002, 1003, 1008, 1024, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "make_data": [35, 62], "share": [35, 86, 131, 171, 252, 352, 361, 363, 367, 368, 383, 389, 408, 413, 416, 548, 667, 703, 707, 795, 796, 800, 801, 982, 995, 1031, 1033, 1039, 1041, 1043, 1046], "spheric": [35, 58, 86, 129, 224, 249, 251, 252, 298, 377, 762, 795, 796, 984, 987, 991, 1008], "isotrop": [35, 56, 58, 62, 101, 155, 157, 222, 224, 408, 410, 418, 511, 518, 531, 614, 618, 619, 621, 622], "third": [35, 122, 127, 145, 150, 161, 219, 230, 253, 280, 290, 309, 323, 368, 376, 380, 393, 396, 416, 533, 587, 588, 589, 590, 799, 800, 801, 806, 842, 843, 844, 846, 848, 878, 890, 956, 977, 999, 1006, 1031, 1042, 1047, 1048], "x_isotropic_covari": 35, "y_isotropic_covari": 35, "x_shared_covari": 35, "y_shared_covari": 35, "x_different_covari": 35, "y_different_covari": 35, "piec": [35, 48, 202, 368, 987], "misclassifi": [35, 113, 256, 343, 352, 1003], "mark": [35, 59, 93, 145, 166, 266, 273, 373, 381, 383, 385, 389, 390, 395, 408, 534, 606, 607, 610, 631, 657, 853, 854, 895, 896, 913, 927, 932, 937, 984, 1013, 1026, 1031, 1032, 1037, 1039, 1040, 1047], "star": [35, 93, 136, 381], "ellips": [35, 230, 247, 248, 249, 252, 253, 994], "mpl": [35, 247, 248, 249, 253, 307], "plot_ellips": [35, 247], "cov": [35, 83, 87, 115, 252, 381, 395, 398, 401, 411, 421, 468, 469, 470, 471, 472, 473, 474, 475, 478, 479, 480, 518, 531, 533, 540, 547], "linalg": [35, 55, 79, 80, 83, 102, 104, 106, 187, 247, 248, 249, 252, 253, 381, 387, 413, 450, 451, 452, 461, 531, 534, 540, 543, 656, 671, 673, 686, 690, 694, 935], "eigh": [35, 247, 248, 249, 252, 253, 413, 420, 532, 534, 1046], "arctan": [35, 248, 253, 377, 517], "180": [35, 247, 248, 249, 252, 253, 294, 298, 353, 387, 501], "ell": [35, 247, 248, 249, 253, 405], "patch": [35, 51, 240, 247, 248, 249, 252, 253, 257, 376, 385, 393, 413, 415, 554, 555, 582, 583, 586, 1031, 1039], "set_clip_box": [35, 247, 248, 249, 252, 253], "set_alpha": [35, 247, 248, 249, 252, 253], "add_artist": [35, 223, 247, 248, 249, 252, 253], "plot_result": [35, 123, 247, 248, 253], "pcolormesh": [35, 131, 142, 184, 288, 293, 335, 339, 343, 630], "x_right": 35, "y_right": 35, "x_wrong": 35, "y_wrong": 35, "means_": [35, 247, 248, 249, 250, 252, 253, 548, 549, 795, 796], "yellow": [35, 93, 339, 989], "set_box_aspect": 35, "svd": [35, 102, 104, 131, 223, 353, 390, 404, 411, 420, 450, 452, 481, 482, 484, 531, 532, 533, 534, 538, 539, 540, 543, 545, 548, 549, 663, 671, 672, 673, 684, 685, 686, 859, 937, 982, 1024, 1033, 1037, 1038, 1044, 1046], "store_covari": [35, 548, 549, 1036, 1038], "ax_row": 35, "align": [35, 127, 166, 222, 247, 273, 354, 395, 688, 692, 980, 991, 1002, 1025, 1026, 1047, 1048], "perpendicular": [35, 344], "bisector": 35, "singl": [35, 40, 49, 53, 54, 56, 59, 62, 63, 73, 98, 112, 113, 114, 122, 123, 124, 132, 137, 150, 153, 159, 165, 168, 172, 174, 177, 185, 201, 203, 205, 241, 243, 252, 258, 271, 280, 303, 321, 323, 339, 352, 353, 354, 358, 360, 363, 367, 368, 375, 376, 381, 386, 388, 389, 390, 393, 394, 395, 406, 407, 409, 411, 412, 413, 415, 416, 417, 433, 436, 439, 440, 444, 445, 446, 448, 453, 463, 465, 466, 492, 493, 495, 505, 508, 533, 552, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 581, 591, 598, 599, 601, 605, 626, 631, 633, 642, 665, 666, 672, 675, 676, 677, 689, 691, 693, 709, 720, 721, 722, 723, 734, 735, 736, 739, 772, 783, 795, 796, 797, 800, 801, 811, 818, 822, 823, 825, 826, 829, 837, 840, 841, 845, 857, 858, 859, 869, 870, 873, 874, 875, 880, 881, 895, 896, 908, 909, 910, 911, 916, 946, 952, 956, 975, 977, 983, 984, 985, 988, 989, 991, 993, 995, 996, 998, 1002, 1003, 1004, 1008, 1010, 1013, 1015, 1022, 1024, 1031, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "399": [35, 36, 1010], "plot_lda_qda": [35, 36, 1010], "modul": [37, 38, 50, 54, 78, 85, 89, 95, 96, 112, 144, 152, 162, 164, 168, 169, 176, 179, 216, 221, 222, 246, 255, 279, 280, 282, 286, 300, 302, 303, 306, 325, 334, 351, 356, 359, 375, 376, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 393, 395, 397, 398, 402, 406, 407, 408, 411, 415, 416, 417, 419, 443, 502, 534, 578, 579, 658, 929, 977, 982, 984, 986, 988, 989, 992, 994, 995, 998, 1000, 1002, 1004, 1005, 1013, 1018, 1019, 1024, 1032, 1033, 1034, 1036, 1037, 1041, 1043, 1045], "chanc": [37, 39, 50, 69, 113, 145, 168, 174, 201, 209, 216, 219, 262, 268, 271, 272, 313, 347, 353, 363, 380, 408, 412, 699, 701, 703, 704, 707, 715, 753, 755, 784, 793, 825, 988, 996, 1004, 1010, 1047], "bisect": [37, 41, 58, 60, 61, 62, 69, 162, 168, 258, 442, 446, 511, 1010, 1045], "birch": [37, 41, 45, 62, 65, 69, 92, 168, 321, 369, 395, 445, 448, 511, 1010, 1025, 1026, 1035, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047], "linkag": [37, 40, 41, 42, 45, 48, 53, 56, 57, 58, 68, 69, 168, 174, 439, 440, 444, 445, 462, 511, 513, 521, 880, 1008, 1010, 1023, 1034, 1039, 1042], "dbscan": [37, 38, 39, 45, 56, 59, 61, 64, 66, 69, 168, 323, 328, 393, 395, 445, 449, 451, 454, 511, 703, 704, 716, 735, 791, 793, 852, 880, 991, 1010, 1025, 1026, 1031, 1033, 1035, 1036, 1038, 1039, 1040, 1047], "hdbscan": [37, 45, 50, 66, 69, 168, 234, 443, 511, 880, 978, 1008, 1010, 1025, 1026, 1047, 1048], "optic": [37, 45, 69, 168, 321, 374, 419, 443, 445, 454, 455, 456, 501, 1010, 1025, 1026, 1040, 1044, 1045, 1046, 1047, 1048], "affin": [37, 38, 45, 50, 56, 64, 65, 69, 168, 307, 328, 373, 383, 395, 407, 413, 439, 440, 444, 451, 453, 461, 511, 534, 690, 694, 703, 704, 716, 735, 791, 793, 896, 982, 985, 988, 1010, 1025, 1026, 1031, 1032, 1035, 1041, 1042, 1044, 1046], "dendrogram": [37, 68, 69, 168, 174, 361, 408, 440, 444, 503, 1010, 1043], "embed": [37, 40, 42, 45, 47, 56, 57, 63, 69, 90, 118, 148, 153, 168, 177, 221, 224, 226, 228, 229, 245, 285, 294, 326, 327, 387, 395, 407, 408, 440, 451, 461, 488, 501, 543, 548, 565, 581, 638, 687, 688, 689, 690, 691, 692, 693, 694, 695, 849, 861, 870, 892, 893, 894, 980, 991, 994, 1000, 1005, 1008, 1010, 1025, 1026, 1031, 1032, 1042, 1043, 1045], "uniformli": [38, 119, 126, 145, 230, 247, 317, 383, 515, 516, 517, 550, 641, 801, 809, 811, 879, 977, 978, 988, 991, 998, 1035, 1040], "divid": [38, 44, 49, 92, 96, 147, 158, 201, 240, 247, 353, 363, 377, 378, 405, 408, 412, 413, 468, 469, 470, 471, 472, 473, 474, 475, 511, 518, 533, 540, 649, 650, 653, 654, 655, 663, 664, 675, 676, 677, 718, 724, 732, 736, 754, 792, 794, 857, 858, 902, 905, 937, 940, 941, 977, 985, 987, 988, 991, 998, 1002, 1024, 1031, 1038, 1039, 1042], "quiroz": [38, 58, 119, 180, 185, 240, 263, 265, 312, 352, 353, 354], "fundament": [38, 50, 82, 353, 379, 394, 411, 495, 537, 539, 546, 707, 984, 988], "homogen": [38, 39, 40, 45, 47, 50, 56, 59, 353, 376, 393, 395, 410, 415, 418, 445, 613, 703, 716, 729, 734, 735, 755, 793, 985, 986, 988, 1040], "frequent": [38, 113, 166, 265, 271, 272, 353, 370, 378, 381, 416, 550, 589, 629, 850, 873, 874, 877, 889, 978, 980, 988, 1002, 1006, 1009], "ari": [38, 59, 353, 408, 704, 1036, 1042], "mutual": [38, 39, 50, 56, 59, 144, 146, 151, 168, 395, 415, 417, 445, 591, 594, 595, 598, 599, 605, 606, 607, 608, 703, 704, 714, 753, 755, 784, 793, 977, 984, 988, 989, 1010, 1031, 1037, 1047], "mi": [38, 145, 408, 606, 607, 703, 753, 755, 978, 988, 1002], "theoret": [38, 58, 153, 407, 408, 415, 552, 553, 638, 703, 724, 754, 900, 977, 984, 985, 987, 988, 990, 1000, 1002, 1003, 1012, 1013], "nmi": [38, 408, 716, 734, 735, 755], "ami": [38, 50, 59, 408, 703], "score_func": [38, 72, 73, 591, 594, 595, 597, 598, 599, 740, 1031, 1033], "rand_scor": [38, 408, 714, 988, 1043], "adjusted_rand_scor": [38, 39, 50, 59, 353, 408, 703, 714, 755, 784, 988, 1044], "mutual_info_scor": [38, 408, 703, 988, 1039, 1042, 1043], "normalized_mutual_info_scor": [38, 408, 734, 753, 793, 988, 1039, 1045], "adjusted_mutual_info_scor": [38, 39, 50, 59, 408, 704, 714, 753, 755, 784, 988, 1031, 1039, 1043, 1047], "random_label": 38, "labels_a": 38, "labels_b": 38, "fixed_classes_uniform_labelings_scor": 38, "n_clusters_rang": 38, "n_run": [38, 62, 177, 353], "seaborn": [38, 114, 170, 171, 180, 185, 252, 262, 381, 398, 401, 1008], "sn": [38, 114, 170, 171, 180, 185, 252, 262], "color_palett": [38, 114, 252], "colorblind": [38, 114], "vx": 38, "errorbar": [38, 62, 80, 82, 149, 159, 160, 287, 329, 342, 803, 819], "satur": [38, 171, 307], "uniform_labelings_scor": 38, "nwith": [38, 58, 62, 149, 353], "constantli": [38, 201, 1013], "unbound": [38, 987, 1045], "cardin": [38, 120, 121, 127, 173, 174, 313, 314, 323, 408, 415, 462, 552, 553, 556, 557, 558, 559, 563, 564, 565, 678, 873, 874, 881, 908, 909, 910, 911, 988, 989, 996, 998, 1045, 1046], "why": [38, 53, 96, 113, 119, 171, 173, 177, 190, 259, 262, 280, 352, 353, 381, 389, 395, 408, 410, 413, 419, 443, 446, 450, 988, 990, 1003, 1019, 1022, 1034], "chart": [38, 267, 989, 1017, 1034], "henc": [38, 61, 73, 171, 205, 234, 271, 339, 352, 353, 367, 376, 383, 385, 387, 395, 398, 408, 412, 415, 416, 486, 507, 538, 540, 541, 542, 562, 589, 642, 645, 651, 659, 661, 671, 686, 703, 704, 708, 714, 729, 755, 784, 793, 816, 817, 835, 836, 837, 838, 839, 875, 945, 985, 987, 988, 989, 994, 995, 998, 1009, 1038, 1039, 1042, 1043, 1045], "safe": [38, 171, 190, 237, 353, 381, 383, 408, 409, 433, 507, 508, 587, 590, 596, 772, 776, 894, 954, 960, 991, 1037, 1038, 1039, 1044, 1045], "stabil": [38, 117, 171, 223, 267, 307, 347, 353, 395, 405, 445, 649, 653, 669, 838, 857, 858, 876, 888, 936, 978, 984, 987, 998, 1009, 1015, 1031, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "mislead": [38, 120, 121, 127, 171, 382, 397, 415, 552, 553, 556, 557, 558, 559, 563, 564, 565, 908, 909, 910, 911, 1026, 1044], "meaning": [38, 174, 227, 294, 354, 405, 412, 416, 417, 547, 727, 728, 736, 781, 782, 785, 849, 992, 1002, 1003, 1031, 1047], "plot_adjusted_for_chance_measur": [38, 69, 1010], "brendan": [39, 439, 453, 1047], "frei": [39, 439, 453, 1041], "delbert": [39, 439, 453], "dueck": [39, 439, 453], "messag": [39, 45, 63, 71, 96, 237, 352, 353, 376, 379, 380, 381, 385, 386, 389, 390, 408, 439, 453, 467, 538, 542, 547, 573, 626, 711, 797, 800, 801, 803, 811, 819, 824, 827, 829, 849, 857, 858, 898, 919, 920, 921, 924, 927, 951, 972, 988, 998, 1031, 1035, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "feb": [39, 439, 453], "affinitypropag": [39, 45, 321, 408, 1031, 1034, 1035, 1039, 1042, 1044, 1045, 1046, 1047], "labels_tru": [39, 50, 56, 65, 408, 703, 704, 713, 714, 716, 729, 734, 735, 753, 755, 784, 793], "af": 39, "prefer": [39, 45, 56, 253, 271, 307, 363, 367, 368, 369, 379, 381, 382, 383, 395, 408, 412, 413, 415, 416, 439, 453, 470, 471, 477, 486, 507, 508, 626, 631, 632, 653, 657, 658, 700, 724, 726, 740, 755, 756, 849, 875, 900, 901, 942, 954, 977, 980, 982, 984, 988, 993, 1003, 1004, 1008, 1022, 1032, 1038, 1040, 1044, 1045, 1048], "cluster_centers_indic": [39, 453], "cluster_centers_indices_": [39, 439], "labels_": [39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 56, 59, 62, 63, 64, 66, 68, 321, 323, 353, 381, 395, 408, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 454, 1023, 1036], "n_clusters_": [39, 50, 56, 64, 440, 444], "homogeneity_scor": [39, 50, 59, 353, 408, 716, 734, 793, 988], "completeness_scor": [39, 50, 59, 318, 353, 408, 734, 735, 793, 988], "silhouette_scor": [39, 50, 59, 61, 353, 381, 408, 1031, 1035, 1037, 1039, 1041, 1045], "sqeuclidean": [39, 449, 456, 776, 777, 778], "872": [39, 996], "912": 39, "871": [39, 81, 82, 410, 473], "753": [39, 124, 137, 352, 354, 1010], "cycler": 39, "class_memb": 39, "cluster_cent": [39, 62, 64, 65, 460], "307": [39, 69, 231, 245, 1010], "plot_affinity_propag": [39, 69, 439, 453, 1010], "impos": [40, 58, 130, 195, 205, 313, 393, 408, 413, 415, 416, 526, 656, 984], "simpli": [40, 87, 131, 153, 161, 226, 238, 240, 271, 298, 319, 320, 367, 376, 381, 383, 386, 393, 395, 410, 411, 412, 413, 415, 416, 484, 694, 760, 763, 867, 939, 980, 988, 989, 990, 991, 1002, 1016, 1024, 1038, 1039, 1040], "There": [40, 47, 119, 153, 219, 226, 237, 253, 257, 259, 262, 283, 352, 374, 376, 378, 381, 382, 383, 386, 393, 395, 396, 398, 405, 407, 408, 413, 415, 416, 417, 445, 451, 461, 533, 552, 553, 558, 559, 587, 588, 590, 605, 644, 978, 984, 985, 986, 987, 988, 991, 995, 998, 1002, 1003, 1004, 1007, 1012, 1023, 1031, 1039], "unstabl": [40, 67, 171, 408, 410, 411, 688, 692, 936, 937, 1004, 1035, 1036, 1038, 1043, 1045, 1047], "quickli": [40, 241, 302, 317, 378, 381, 382, 412, 415, 691, 984, 991, 992, 1013, 1024, 1042], "fight": [40, 205, 1013], "percol": 40, "merg": [40, 42, 47, 52, 320, 379, 381, 384, 389, 393, 396, 408, 439, 440, 441, 444, 445, 462, 817, 1023, 1031, 1038], "exagger": [40, 171, 691, 985], "behaviour": [40, 101, 202, 203, 219, 341, 381, 395, 408, 415, 558, 559, 563, 564, 601, 740, 798, 799, 802, 814, 815, 816, 817, 818, 898, 908, 909, 961, 977, 978, 988, 998, 1039, 1042, 1043, 1046, 1047], "shortest": [40, 386, 390, 687, 942, 985, 1044], "mechan": [40, 237, 348, 352, 368, 381, 383, 408, 416, 422, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 602, 609, 610, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 986, 1004, 1013], "resembl": [40, 205], "brittl": [40, 408], "pronounc": [40, 41, 53, 158], "kneighbors_graph": [40, 45, 63, 68, 285, 395, 408, 440, 444, 842, 843, 844, 846, 848, 850, 851, 852, 854, 991, 1031, 1035, 1040], "geometri": [40, 408, 985, 991], "instabl": [40, 171, 295, 418, 451, 534, 538, 542, 694, 1038, 1041, 1044], "agglomerativeclust": [40, 41, 42, 45, 48, 53, 57, 63, 68, 395, 408, 439, 441, 444, 1023, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1046], "1500": [40, 51, 58, 63, 68, 93, 222, 226, 247], "knn_graph": 40, "include_self": [40, 45, 68, 853, 854, 1035], "plot_agglomerative_clust": [40, 69, 1010], "waveform": 41, "euclidean": [41, 58, 59, 187, 234, 240, 285, 288, 293, 317, 322, 343, 353, 405, 407, 408, 413, 414, 415, 416, 418, 439, 440, 443, 444, 445, 449, 451, 456, 459, 462, 530, 536, 588, 614, 618, 621, 622, 675, 677, 689, 691, 694, 695, 698, 760, 761, 767, 768, 769, 770, 776, 777, 778, 779, 790, 791, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 894, 978, 982, 986, 989, 991, 1000, 1009, 1035, 1038, 1039, 1040, 1041, 1047, 1048], "cityblock": [41, 45, 408, 449, 456, 760, 776, 777, 778, 991], "invari": [41, 378, 395, 408, 418, 613, 688, 745, 815, 816, 984, 985, 988, 1003, 1009, 1039, 1042, 1043, 1044], "ie": [41, 67, 97, 439, 703, 766, 984, 998], "inter": [41, 120, 363, 415, 715, 943], "character": [41, 219, 357, 408, 412, 985], "ill": [41, 83, 206, 304, 470, 471, 477, 649, 650, 653, 654, 655, 681, 682, 984, 987, 1023, 1041], "recov": [41, 66, 83, 97, 98, 104, 123, 153, 170, 185, 200, 201, 205, 222, 354, 410, 414, 417, 420, 459, 532, 558, 984, 985, 987, 1009, 1023, 1037], "put": [41, 59, 142, 153, 155, 235, 242, 247, 301, 309, 321, 331, 344, 349, 369, 383, 385, 386, 389, 418, 442, 446, 458, 514, 613, 646, 660, 795, 877, 881, 889, 902, 903, 904, 905, 906, 927, 978, 985, 987, 988, 989, 995, 998, 1012, 1016, 1018, 1024, 1043], "cc": [41, 379], "patheffect": 41, "pairwise_dist": [41, 395, 408, 419, 440, 443, 444, 445, 449, 456, 687, 695, 760, 769, 777, 778, 790, 791, 844, 846, 848, 852, 986, 1031, 1035, 1037, 1039, 1040, 1042, 1043, 1048], "sqr": 41, "sign": [41, 80, 87, 97, 100, 115, 185, 252, 301, 347, 381, 408, 413, 416, 543, 581, 588, 605, 634, 635, 657, 658, 665, 667, 673, 674, 675, 676, 733, 740, 900, 904, 935, 937, 953, 984, 988, 993, 998, 1002, 1003, 1023, 1031, 1035, 1040, 1044, 1046], "phi": [41, 413, 741, 866, 980, 988, 998, 1003], "phase_nois": 41, "amplitude_nois": 41, "additional_nois": 41, "f7bd01": 41, "377eb8": [41, 45, 63, 64, 230], "f781bf": [41, 45, 63, 64], "set_label": [41, 156, 234], "tight": [41, 106, 115, 122, 142, 146, 186, 188, 193, 194, 195, 206, 210, 213, 218, 224, 227, 251, 285, 291, 292, 296, 297, 335, 339, 342, 344, 358, 581, 691, 1043], "avg_dist": [41, 779], "set_path_effect": 41, "withstrok": 41, "foreground": [41, 67], "cividi": 41, "45": [41, 65, 74, 86, 146, 158, 173, 190, 201, 219, 269, 273, 274, 327, 339, 412, 415, 416, 563, 564, 626, 633, 786, 795, 904, 978, 988, 996, 1007, 1020, 1027, 1031, 1034], "interclass": 41, "063": [41, 69, 260, 262, 436, 1010], "plot_agglomerative_clustering_metr": [41, 69, 1010], "hierarchi": [42, 174, 381, 449, 455, 462, 993, 1023], "plot_dendrogram": 42, "kwarg": [42, 99, 237, 383, 388, 422, 426, 430, 437, 441, 447, 449, 463, 468, 534, 537, 539, 562, 616, 630, 645, 646, 651, 652, 659, 660, 661, 662, 676, 680, 683, 697, 698, 699, 701, 740, 840, 841, 859, 860, 864, 904, 915, 934, 948, 1038, 1042, 1044, 1048], "children_": [42, 440, 444, 462], "current_count": 42, "child_idx": 42, "leaf": [42, 118, 129, 131, 357, 361, 408, 415, 419, 440, 441, 442, 443, 444, 445, 449, 456, 462, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 840, 841, 842, 843, 844, 845, 846, 848, 850, 851, 852, 908, 909, 910, 911, 912, 913, 991, 1004, 1034, 1036, 1038, 1042, 1045], "linkage_matrix": 42, "column_stack": [42, 301, 309], "distances_": [42, 440, 444, 1043], "distance_threshold": [42, 440, 444, 1040, 1043], "truncate_mod": 42, "parenthesi": [42, 381], "120": [42, 69, 129, 223, 417, 589, 1010, 1031], "plot_agglomerative_dendrogram": [42, 69, 1010], "scalabl": [43, 45, 63, 168, 176, 178, 235, 255, 278, 322, 353, 381, 408, 415, 416, 447, 490, 501, 588, 639, 803, 814, 824, 826, 838, 861, 870, 872, 900, 902, 905, 906, 980, 983, 985, 988, 1001, 1003, 1010, 1013, 1031, 1034, 1035, 1041, 1042, 1045, 1046], "hundr": [43, 125, 223, 311, 376, 412, 415, 560, 561, 985, 1042], "thousand": [43, 119, 234, 236, 311, 353, 376, 408, 415, 857, 858, 905, 985, 1024, 1040, 1042], "million": [43, 57, 158, 177, 416, 691, 985, 1003, 1013, 1045, 1046], "chose": [43, 171, 1019], "usag": [43, 54, 72, 75, 86, 100, 111, 124, 147, 171, 172, 231, 235, 237, 256, 294, 296, 303, 335, 354, 367, 376, 380, 381, 383, 384, 388, 389, 391, 395, 396, 398, 407, 408, 412, 413, 418, 419, 443, 445, 449, 463, 488, 511, 514, 518, 522, 560, 561, 590, 608, 639, 647, 657, 658, 659, 665, 666, 667, 668, 675, 676, 677, 678, 679, 689, 776, 779, 790, 791, 859, 900, 908, 909, 910, 911, 937, 977, 978, 980, 987, 988, 989, 991, 1003, 1011, 1015, 1019, 1026, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "enjoi": 43, "edit": [43, 378, 380, 381, 384, 385, 389, 393, 398, 529, 533, 830, 982, 984, 989, 995, 1024], "158": [43, 415, 668], "manojkumarsivaraj334": 43, "joblib": [43, 55, 73, 119, 285, 318, 376, 379, 381, 384, 390, 393, 395, 398, 401, 402, 407, 409, 419, 436, 440, 443, 444, 445, 447, 449, 451, 456, 457, 460, 463, 466, 471, 507, 530, 534, 535, 536, 538, 541, 542, 544, 545, 547, 554, 555, 556, 557, 562, 563, 564, 565, 566, 567, 568, 569, 593, 601, 609, 631, 633, 638, 646, 650, 652, 654, 656, 657, 658, 660, 662, 664, 665, 667, 675, 678, 687, 688, 689, 690, 691, 692, 693, 772, 776, 779, 797, 800, 801, 803, 811, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 832, 833, 842, 843, 846, 848, 850, 851, 853, 854, 859, 860, 861, 862, 895, 896, 954, 955, 956, 958, 973, 988, 1009, 1031, 1032, 1034, 1036, 1038, 1039, 1040, 1042, 1043, 1046, 1048], "cpu_count": [43, 119, 285, 956], "xx": [43, 59, 81, 122, 126, 131, 142, 155, 156, 157, 172, 188, 208, 211, 212, 213, 214, 215, 227, 230, 238, 251, 291, 301, 309, 310, 331, 338, 339, 344, 345, 348, 349, 385], "yy": [43, 59, 81, 122, 131, 142, 155, 157, 172, 208, 212, 213, 214, 215, 227, 230, 238, 291, 301, 309, 310, 331, 338, 339, 344, 345, 348, 349], "n_center": [43, 511], "25000": 43, "colors_": 43, "cname": 43, "birch_model": 43, "final_step": 43, "centroid": [43, 46, 58, 59, 79, 128, 168, 286, 293, 299, 310, 321, 335, 353, 377, 408, 441, 442, 445, 446, 447, 448, 451, 458, 459, 461, 503, 548, 630, 847, 1010, 1011, 1026, 1031, 1035, 1038, 1043, 1047], "subcluster_centers_": [43, 441], "this_centroid": 43, "set_autoscaley_on": 43, "mbk": [43, 65], "256": [43, 49, 54, 125, 313, 368, 376, 408, 415, 448, 467, 536, 545, 562, 856, 888, 898, 1024, 1045], "max_no_improv": [43, 62, 65, 448, 536, 537, 538, 545, 1045, 1046], "t_mini_batch": [43, 65], "mbk_means_labels_uniqu": 43, "cluster_centers_": [43, 44, 49, 51, 59, 61, 62, 64, 65, 96, 321, 353, 439, 442, 446, 447, 448, 1023], "929": [43, 69, 1010], "plot_birch_vs_minibatchkmean": [43, 69, 1010], "cloud": [44, 86, 95, 97, 102, 108, 168, 389, 413, 532, 540, 691, 988, 1007, 1008, 1010, 1023], "bisectingkmean": [44, 408, 1045, 1046, 1047], "__doc__": [44, 76, 158, 250, 395], "n_clusters_list": 44, "clustering_algorithm": [44, 45, 63], "variant": [44, 96, 164, 166, 167, 168, 232, 262, 320, 321, 353, 354, 387, 408, 411, 413, 416, 418, 448, 459, 489, 492, 493, 511, 514, 542, 558, 559, 564, 614, 618, 621, 622, 626, 629, 637, 638, 640, 644, 671, 703, 798, 802, 804, 805, 806, 815, 822, 843, 861, 897, 978, 984, 985, 986, 987, 988, 990, 991, 1002, 1009, 1010, 1024, 1031, 1039], "algorithm_nam": 44, "algo": [44, 106], "hide": [44, 381, 389, 835, 836, 837, 838, 839, 1034, 1039, 1047], "flat": [44, 96, 102, 172, 222, 223, 224, 260, 408, 416, 439, 445, 447, 460, 508, 995, 1023, 1031, 1032, 1047], "label_out": 44, "085": [44, 69, 1010], "plot_bisect_kmean": [44, 69, 1010], "null": [45, 72, 171, 172, 173, 262, 268, 408, 412, 647, 668, 679, 703, 729, 755, 793, 825, 984, 985, 988, 1003, 1041], "mismatch": [45, 987, 1040], "warn": [45, 63, 73, 201, 216, 237, 265, 285, 302, 303, 311, 367, 370, 381, 384, 385, 386, 395, 402, 409, 416, 495, 537, 539, 546, 549, 552, 553, 556, 557, 558, 559, 560, 561, 563, 564, 565, 570, 571, 572, 573, 574, 575, 577, 601, 635, 669, 689, 692, 693, 711, 712, 727, 728, 736, 781, 782, 785, 850, 864, 865, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 920, 921, 927, 937, 945, 954, 958, 974, 975, 977, 988, 998, 1022, 1031, 1033, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "noisy_circl": [45, 63], "noisy_moon": [45, 63], "no_structur": [45, 63], "anisotropicli": [45, 63], "170": [45, 58, 59, 63, 387], "x_aniso": [45, 58, 63], "aniso": [45, 63], "plot_num": [45, 63, 230], "default_bas": [45, 63], "quantil": [45, 54, 64, 92, 113, 115, 168, 179, 220, 258, 307, 310, 311, 393, 415, 437, 438, 457, 518, 551, 559, 561, 656, 669, 721, 743, 746, 748, 823, 865, 877, 878, 879, 889, 890, 988, 998, 1010, 1011, 1026, 1031, 1035, 1038, 1040, 1044, 1045, 1047], "damp": [45, 408, 439, 453], "min_sampl": [45, 50, 66, 393, 395, 408, 419, 443, 445, 449, 455, 456, 670, 984, 1040, 1044], "xi": [45, 66, 378, 408, 411, 416, 449, 455, 508, 1002, 1042], "min_cluster_s": [45, 66, 323, 408, 445, 449, 455, 1040], "allow_single_clust": [45, 445], "hdbscan_min_cluster_s": 45, "hdbscan_min_sampl": 45, "220": [45, 143, 258, 278, 1010, 1031], "i_dataset": [45, 63, 230], "algo_param": [45, 63], "param": [45, 56, 62, 63, 72, 125, 127, 128, 222, 236, 237, 260, 262, 270, 274, 289, 302, 381, 383, 395, 399, 415, 418, 422, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 687, 688, 689, 690, 691, 795, 796, 797, 800, 801, 809, 811, 821, 822, 823, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 944, 945, 977, 1037, 1041, 1042, 1044, 1045, 1048], "easier": [45, 63, 67, 83, 123, 180, 186, 232, 240, 259, 260, 307, 339, 352, 363, 376, 381, 383, 386, 389, 393, 398, 410, 412, 467, 514, 898, 931, 983, 988, 995, 1004, 1009, 1013, 1024, 1040, 1045], "estimate_bandwidth": [45, 64, 408, 447, 460], "symmetr": [45, 126, 174, 203, 395, 406, 408, 451, 461, 462, 473, 518, 526, 528, 689, 693, 694, 703, 704, 714, 715, 716, 722, 726, 734, 735, 753, 755, 761, 783, 793, 795, 796, 974, 977, 984, 988, 991, 1047], "meanshift": [45, 321, 408, 439, 1034, 1035, 1036, 1039, 1041, 1042, 1045, 1046, 1047], "bin_seed": [45, 64, 447, 460, 1042], "two_mean": 45, "spectralclust": [45, 321, 408, 439, 991, 1031, 1032, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "nearest_neighbor": [45, 451, 690], "average_linkag": 45, "gmm": [45, 60, 111, 168, 246, 248, 251, 252, 253, 254, 503, 511, 796, 816, 987, 1010, 1031, 1032, 1035, 1036, 1037], "gaussianmixtur": [45, 58, 248, 249, 250, 251, 252, 253, 414, 795, 987, 1037, 1039, 1040, 1044, 1045, 1047], "covariance_typ": [45, 248, 249, 251, 252, 253, 795, 796, 1047], "nkmean": 45, "npropag": 45, "ncluster": 45, "nmixtur": 45, "catch": [45, 63, 303, 389, 390], "catch_warn": [45, 63, 237, 302, 303], "filterwarn": [45, 63, 216, 302, 303, 381, 998], "userwarn": [45, 63, 115, 162, 193, 210, 344, 358, 386, 711, 998, 1037, 1039, 1044], "t1": [45, 47, 63, 216, 224, 227, 230], "ff7f00": [45, 63, 230], "4daf4a": [45, 63], "a65628": [45, 63], "984ea3": [45, 63], "999999": [45, 63], "e41a1c": [45, 63], "dede00": [45, 63, 64], "transax": [45, 63, 226, 230, 249, 293, 309], "plot_cluster_comparison": [45, 69, 1010], "bad": [46, 61, 62, 154, 171, 352, 363, 381, 408, 418, 691, 744, 977, 984, 985, 990, 996, 1023, 1031], "eight": [46, 1024], "deliv": [46, 367, 1013], "though": [46, 56, 119, 150, 177, 180, 240, 268, 290, 309, 311, 353, 354, 363, 367, 375, 378, 381, 383, 394, 395, 408, 413, 414, 415, 416, 417, 698, 804, 806, 900, 977, 978, 980, 985, 988, 991, 998, 1002, 1024, 1039], "3d": [46, 49, 68, 91, 102, 103, 198, 222, 224, 226, 361, 416, 505, 585, 951, 1038, 1039, 1041], "mplot3d": [46, 68, 91, 102, 103, 172, 198, 222, 224], "noqa": [46, 68, 91, 102, 103, 126, 150, 165, 166, 172, 198, 222, 224, 273, 274, 319, 352, 385, 578, 579, 626, 800, 801, 977, 1040], "f401": [46, 68, 91, 102, 103, 172, 198, 222, 224], "k_means_iris_8": 46, "k_means_iris_3": 46, "k_means_iris_bad_init": 46, "est": [46, 133, 171, 237, 239, 309, 319, 363, 402, 415, 561, 733, 865, 977, 988, 998, 1002, 1042, 1043], "elev": [46, 68, 91, 102, 103, 172, 198, 222, 226], "azim": [46, 68, 91, 102, 103, 172, 198, 222, 226], "134": [46, 54, 103, 125, 262, 1034], "xaxi": [46, 91, 102, 103, 119, 198, 222, 224, 227, 285, 290, 352], "set_ticklabel": [46, 91, 102, 103, 198, 352], "zaxi": [46, 91, 102, 103, 198, 222], "petal": [46, 91, 105, 107, 122, 244, 319, 322, 378, 409, 913, 1004, 1021, 1022], "sepal": [46, 91, 105, 107, 122, 155, 184, 244, 288, 319, 322, 336, 378, 998, 1021, 1022], "length": [46, 71, 90, 91, 93, 105, 107, 122, 150, 153, 154, 155, 158, 159, 161, 177, 184, 237, 238, 241, 244, 288, 319, 322, 336, 354, 374, 378, 381, 389, 390, 395, 409, 413, 415, 416, 418, 444, 489, 507, 508, 511, 514, 522, 550, 562, 580, 581, 588, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 631, 645, 646, 649, 650, 651, 652, 653, 655, 656, 659, 660, 661, 662, 680, 683, 779, 797, 800, 801, 811, 826, 828, 831, 832, 834, 842, 843, 844, 846, 848, 887, 913, 920, 922, 926, 942, 943, 959, 962, 987, 994, 998, 1015, 1021, 1022, 1031, 1034, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1047], "set_zlabel": [46, 91, 198], "setosa": [46, 91, 103, 105, 271, 272, 378, 503, 1015, 1022], "versicolour": [46, 91, 103, 105, 378, 1022], "virginica": [46, 91, 103, 105, 271, 272, 378, 503, 988, 1022], "text3d": [46, 103], "292": [46, 69, 353, 398, 415, 733, 1010], "plot_cluster_iri": [46, 69, 1010], "voxel": [47, 67, 584], "multipl": [47, 70, 73, 77, 93, 106, 113, 119, 121, 122, 146, 168, 171, 195, 235, 262, 267, 268, 270, 274, 280, 283, 287, 317, 323, 342, 367, 368, 369, 375, 377, 378, 381, 383, 384, 385, 386, 393, 395, 407, 408, 409, 410, 411, 413, 415, 416, 417, 418, 419, 420, 443, 459, 463, 465, 466, 468, 473, 487, 490, 491, 494, 495, 496, 502, 503, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 550, 552, 553, 554, 555, 558, 559, 560, 561, 562, 580, 598, 606, 607, 609, 610, 626, 631, 633, 638, 639, 640, 641, 645, 646, 649, 651, 652, 653, 656, 659, 660, 661, 662, 665, 666, 667, 670, 672, 675, 677, 678, 688, 689, 691, 692, 693, 720, 721, 726, 743, 744, 746, 748, 749, 751, 783, 786, 788, 789, 791, 795, 796, 797, 799, 800, 801, 802, 803, 809, 811, 812, 813, 814, 815, 816, 817, 822, 823, 824, 826, 830, 831, 832, 833, 834, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 862, 865, 877, 881, 889, 892, 893, 900, 901, 902, 905, 916, 931, 936, 937, 959, 962, 980, 983, 984, 985, 989, 990, 991, 995, 996, 1001, 1002, 1004, 1008, 1009, 1010, 1015, 1024, 1031, 1032, 1034, 1037, 1038, 1041, 1042, 1043, 1044, 1046, 1047], "partli": [47, 767], "procedur": [47, 57, 119, 126, 150, 181, 189, 252, 264, 310, 314, 339, 352, 363, 381, 383, 393, 394, 395, 396, 406, 407, 410, 412, 413, 415, 417, 530, 536, 537, 539, 544, 545, 546, 552, 553, 554, 555, 558, 559, 592, 594, 601, 608, 643, 671, 673, 686, 726, 783, 857, 858, 877, 889, 959, 977, 984, 990, 996, 998, 1001, 1002, 1003, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "solut": [47, 180, 185, 190, 192, 206, 215, 230, 236, 320, 339, 379, 383, 395, 405, 408, 410, 412, 413, 416, 417, 448, 450, 452, 530, 536, 537, 538, 539, 541, 542, 544, 545, 546, 547, 548, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 609, 645, 647, 649, 651, 653, 654, 655, 657, 659, 661, 663, 664, 665, 666, 667, 668, 671, 673, 675, 676, 677, 678, 679, 681, 682, 684, 685, 686, 795, 796, 811, 849, 857, 858, 981, 982, 984, 985, 987, 992, 994, 1002, 1003, 1007, 1013, 1019, 1022, 1024, 1031, 1034, 1044, 1045, 1046], "closest": [47, 65, 205, 383, 408, 439, 441, 442, 446, 447, 448, 458, 652, 777, 778, 830, 840, 841, 842, 843, 844, 846, 848, 850, 851, 852, 979, 982, 989, 991, 1022], "partit": [47, 67, 71, 129, 131, 262, 303, 395, 405, 406, 408, 412, 415, 448, 450, 452, 461, 510, 556, 557, 558, 559, 562, 563, 564, 703, 704, 714, 784, 848, 908, 909, 910, 911, 987, 991, 994, 998, 1004, 1024], "cluster_qr": [47, 408, 451, 461, 1045], "qr": [47, 203, 404, 533, 540, 543, 936, 937, 985, 1037, 1048], "pivot": [47, 273, 274], "cheung": [47, 1032], "andrew": [47, 408, 461, 690, 694, 716, 735, 793, 875, 992, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "knyazev": [47, 408, 451, 461, 694, 1041, 1044, 1045], "ucdenv": 47, "skimag": [47, 48, 375, 1023], "spectral_clust": [47, 67, 1039, 1041, 1043, 1044, 1045, 1046, 1048], "orig_coin": [47, 48], "speed": [47, 48, 58, 71, 99, 111, 119, 166, 172, 187, 190, 194, 285, 319, 327, 352, 354, 369, 370, 381, 384, 390, 393, 395, 404, 406, 408, 413, 415, 416, 419, 442, 443, 446, 447, 448, 449, 451, 456, 458, 459, 460, 461, 530, 531, 609, 626, 631, 632, 633, 638, 645, 646, 649, 650, 651, 652, 653, 654, 655, 659, 660, 661, 662, 663, 680, 683, 691, 795, 796, 803, 824, 840, 841, 842, 843, 844, 846, 848, 850, 851, 852, 875, 937, 977, 980, 985, 987, 989, 1002, 1013, 1023, 1024, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "down": [47, 48, 82, 113, 216, 217, 224, 234, 235, 237, 265, 280, 304, 307, 343, 363, 375, 384, 389, 410, 413, 442, 449, 455, 589, 592, 593, 638, 648, 772, 776, 779, 869, 870, 875, 878, 879, 890, 902, 905, 912, 984, 1015, 1023, 1039], "alias": [47, 48, 237, 379, 381, 384, 399, 446, 458, 596, 1031, 1035, 1045], "smoothened_coin": [47, 48], "rescaled_coin": [47, 48, 1023], "anti_alias": [47, 48, 1023], "img_to_graph": [47, 67, 416, 1034, 1044], "exponenti": [47, 76, 153, 158, 290, 295, 414, 415, 418, 448, 535, 553, 558, 613, 618, 621, 638, 642, 756, 757, 840, 841, 845, 857, 858, 875, 980, 984, 988, 1003, 1022, 1038, 1044], "beta": [47, 86, 170, 205, 387, 406, 408, 411, 535, 537, 539, 546, 643, 727, 728, 734, 740, 781, 793, 795, 988, 1022, 1033, 1036, 1038, 1040, 1041], "voronoi": [47, 67, 408], "n_region": 47, "extra": [47, 122, 239, 285, 354, 379, 380, 382, 385, 395, 415, 416, 437, 442, 446, 458, 463, 531, 556, 557, 565, 589, 590, 699, 700, 701, 821, 844, 910, 911, 927, 987, 988, 991, 1031, 1034, 1036, 1037, 1039, 1044, 1046], "n_regions_plu": 47, "lobpcg": [47, 451, 461, 687, 690, 694, 1041, 1044, 1045, 1046], "amg": [47, 67, 408, 451, 461, 690, 694, 1041, 1045, 1046], "pyamg": [47, 398, 401, 408, 451, 461, 690, 694], "toler": [47, 74, 165, 192, 194, 217, 218, 343, 354, 376, 383, 390, 408, 420, 442, 446, 451, 458, 461, 470, 471, 477, 481, 482, 483, 530, 531, 532, 534, 535, 539, 540, 541, 542, 543, 544, 546, 547, 558, 559, 560, 561, 626, 645, 646, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 675, 677, 678, 680, 681, 682, 683, 687, 688, 689, 690, 692, 693, 694, 840, 841, 845, 849, 857, 858, 895, 896, 900, 901, 902, 903, 904, 905, 906, 974, 984, 988, 1002, 1003, 1020, 1043, 1044, 1045, 1046], "eigen_tol": [47, 451, 461, 690, 694, 1032, 1045, 1046], "todo": [47, 234, 385, 389, 395, 408, 1048], "21243": 47, "assign_label": [47, 408, 451, 461], "comment": [47, 352, 379, 380, 381, 382, 384, 385, 389, 486, 578, 988], "paus": 47, "21194": [47, 1044], "023": [47, 69, 270, 901, 996, 1010], "plot_coin_segment": [47, 69, 1010], "spatial": [48, 50, 56, 174, 185, 218, 303, 376, 395, 408, 419, 443, 445, 449, 451, 456, 678, 691, 758, 761, 776, 777, 778, 779, 790, 791, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 984, 991, 998, 1033, 1037, 1044, 1047], "constrain": [48, 96, 123, 130, 172, 192, 301, 318, 337, 339, 374, 395, 407, 408, 413, 415, 508, 560, 561, 634, 657, 658, 689, 693, 825, 984, 987, 1035], "grid_to_graph": [48, 52, 55, 408, 416, 1023, 1044], "st": [48, 68, 262, 322, 1034, 1037, 1039], "154": [48, 304, 650, 989], "4697": 48, "323": [48, 69, 92, 234, 1010], "plot_coin_ward_segment": [48, 69, 1010], "vq": [49, 59], "palac": 49, "china": [49, 408, 505, 506, 583], "615": 49, "literatur": [49, 158, 262, 280, 353, 378, 381, 387, 389, 393, 394, 408, 411, 413, 415, 442, 446, 448, 500, 535, 537, 539, 546, 554, 555, 587, 590, 707, 795, 977, 980, 984, 988, 1041], "codebook": [49, 280, 565, 830], "palett": [49, 171, 262], "byte": [49, 54, 416, 486, 502, 507, 508, 581, 587, 588, 590, 953, 1022, 1024, 1031, 1038, 1039, 1046], "rgb": [49, 376, 416, 492, 493, 582, 583, 586], "gif": 49, "pick": [49, 56, 61, 174, 238, 270, 321, 326, 376, 381, 385, 408, 415, 442, 459, 522, 672, 910, 911, 977, 984, 985, 987, 1002, 1042], "019": [49, 150, 353, 378, 387, 470], "041": 49, "081": [49, 188, 214, 220, 354, 996, 1010], "robertlayton": 49, "load_sample_imag": [49, 582, 583, 1040], "pairwise_distances_argmin": [49, 65, 321, 778, 1039, 1045, 1046, 1047], "n_color": 49, "photo": 49, "jpg": [49, 505, 583], "original_shap": 49, "image_arrai": 49, "image_array_sampl": 49, "codebook_random": 49, "labels_random": 49, "recreate_imag": 49, "recreat": [49, 241], "book": [49, 71, 442, 446, 448, 830, 835, 839, 984, 985, 986, 989, 1006, 1043], "alongsid": [49, 381, 387, 395, 398, 417, 821, 822, 823, 988, 995, 1008, 1009], "552": [49, 69, 1010], "plot_color_quant": [49, 69, 1010], "750": [50, 56, 121, 262], "math": [50, 71, 150, 240, 262, 263, 378, 398, 762], "db": [50, 56, 408], "n_noise_": 50, "come": [50, 68, 71, 81, 87, 101, 102, 150, 153, 235, 317, 352, 353, 367, 369, 374, 378, 381, 382, 385, 389, 393, 395, 398, 408, 412, 415, 416, 438, 449, 455, 471, 549, 704, 793, 818, 902, 905, 977, 978, 982, 985, 987, 991, 994, 1003, 1015, 1031, 1042, 1045, 1047], "handi": [50, 72, 353, 354, 382, 1047], "883": [50, 266, 278, 1010], "917": [50, 321, 324, 1010], "916": 50, "626": [50, 187], "unique_label": [50, 56, 353, 383, 390], "core_samples_mask": 50, "zeros_lik": [50, 203, 271], "bool": [50, 67, 82, 166, 219, 361, 381, 420, 421, 422, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 458, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 512, 513, 514, 518, 521, 522, 523, 525, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 696, 697, 699, 701, 702, 706, 707, 708, 710, 711, 712, 713, 724, 725, 726, 727, 728, 729, 736, 739, 740, 748, 749, 752, 754, 759, 761, 765, 766, 767, 772, 776, 780, 781, 782, 783, 785, 787, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 811, 815, 816, 819, 820, 823, 824, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 918, 919, 920, 921, 931, 937, 938, 950, 953, 959, 961, 969, 974, 975, 976, 978, 1040, 1043, 1044], "core_sample_indices_": [50, 443], "class_member_mask": 50, "markerfacecolor": [50, 56, 62, 64, 65], "markeredgecolor": [50, 56, 62, 64, 65], "markers": [50, 56, 59, 62, 64, 65, 126, 156, 160, 233, 321], "171": [50, 54, 69, 150, 272, 278, 378, 387, 786, 988, 1010], "plot_dbscan": [50, 69, 419, 443, 1010], "constitut": [51, 395, 412, 415, 449, 455, 587, 588, 590, 992], "standpoint": 51, "proce": [51, 147, 182, 379, 385, 411, 412, 415, 439, 984], "reassign": [51, 381, 446, 448, 1032, 1036], "success": [51, 145, 168, 255, 266, 269, 270, 278, 346, 363, 403, 408, 412, 413, 415, 514, 563, 578, 797, 800, 801, 818, 905, 991, 1010, 1013, 1019, 1023, 1026, 1043], "becom": [51, 56, 58, 73, 81, 203, 205, 237, 240, 264, 285, 308, 312, 339, 343, 352, 363, 375, 381, 383, 385, 389, 395, 396, 408, 410, 415, 416, 418, 439, 449, 453, 454, 456, 552, 580, 587, 588, 590, 618, 626, 657, 658, 675, 677, 874, 900, 901, 907, 983, 984, 985, 987, 991, 998, 1003, 1022, 1024, 1032, 1039, 1040, 1043, 1044, 1045, 1046, 1048], "fetch_olivetti_fac": [51, 96, 121, 239, 376, 1039, 1040, 1041], "extract_patches_2d": [51, 99, 416, 1039], "patch_siz": [51, 99, 416, 582, 583], "buffer": [51, 1044], "max_patch": [51, 416, 582, 583, 1039], "4i": 51, "dt": [51, 99, 134, 415, 416, 1004], "2400": 51, "700": [51, 304, 305, 319, 1010], "800": [51, 124, 320, 345, 350, 376, 583, 691, 1010], "1100": 51, "1200": [51, 125, 307, 415], "1300": 51, "1400": [51, 473], "1600": 51, "1700": 51, "1800": 51, "1900": 51, "2100": [51, 320], "2200": [51, 376, 492], "2300": [51, 190], "ntrain": 51, "293": [51, 69, 234, 1010], "plot_dict_face_patch": [51, 69, 1010], "agglo": [52, 444, 1023], "featureagglomer": [52, 55, 439, 440, 1005, 1023, 1034, 1040, 1041, 1044, 1045, 1047], "x_reduc": [52, 91, 131, 444, 1023], "x_restor": 52, "images_restor": 52, "130": [52, 69, 387, 1010], "plot_digits_agglomer": [52, 69, 1010], "rich": [53, 389, 393, 408, 438, 1013, 1042, 1045], "richer": [53, 106, 408], "uneven": [53, 257, 408, 412], "patholog": [53, 987, 1037], "clean": [53, 72, 200, 363, 373, 379, 414, 994, 998, 1041], "fring": [53, 408], "sensibl": [53, 165, 280, 353, 383, 984, 998], "resampl": [53, 126, 158, 171, 219, 289, 390, 393, 395, 554, 555, 962, 1009, 1040, 1044], "plot_clust": 53, "x_red": 53, "spectralembed": [53, 222, 223, 224, 687, 688, 689, 691, 985, 1032, 1037, 1041, 1045, 1046, 1048], "585": [53, 69, 1010, 1022], "plot_digits_linkag": [53, 69, 1010], "raccoon": [54, 99, 413], "addition": [54, 73, 115, 171, 201, 219, 237, 318, 320, 353, 381, 393, 406, 416, 609, 610, 645, 651, 670, 877, 977, 978, 988, 996, 1008, 1037, 1048], "adapt": [54, 56, 113, 125, 126, 156, 247, 248, 309, 343, 368, 379, 380, 381, 390, 408, 415, 418, 514, 515, 516, 517, 675, 676, 677, 857, 858, 984, 990, 992, 998, 1002, 1008, 1009, 1039, 1040, 1047, 1048], "pooch": [54, 381, 398, 401], "instal": [54, 244, 285, 317, 318, 319, 320, 321, 322, 323, 367, 368, 370, 381, 382, 384, 385, 387, 389, 393, 394, 401, 404, 408, 416, 451, 461, 495, 690, 694, 1004, 1006, 1024, 1038, 1039, 1040, 1044, 1045], "raccoon_fac": [54, 99], "nbyte": [54, 234], "768": 54, "1024": [54, 106, 448, 467, 537, 898, 1044], "uint8": [54, 99, 375, 496, 505, 506, 1043], "786432": 54, "unsign": [54, 100, 376, 581, 953], "786": [54, 72], "kilobyt": 54, "behind": [54, 81, 113, 280, 383, 385, 389, 407, 410, 415, 987, 991, 1000, 1047], "simplest": [54, 412, 985, 988, 1022, 1023], "know": [54, 67, 123, 147, 150, 153, 162, 171, 219, 237, 238, 262, 280, 283, 321, 326, 347, 353, 367, 381, 393, 399, 402, 408, 411, 412, 413, 416, 499, 503, 509, 645, 651, 657, 658, 724, 754, 797, 811, 885, 886, 888, 889, 890, 891, 908, 909, 910, 911, 977, 987, 988, 989, 991, 1000, 1037, 1038, 1041, 1043], "certainli": [54, 71, 353], "subsampl": [54, 106, 125, 128, 172, 201, 218, 219, 258, 310, 314, 319, 457, 558, 559, 560, 561, 562, 631, 678, 700, 800, 801, 826, 865, 877, 889, 916, 926, 980, 984, 1009, 1012, 1031, 1041, 1045, 1047], "200_000": [54, 310, 865, 1047], "compressed_raccoon_uniform": 54, "spot": [54, 232, 408], "leav": [54, 113, 118, 127, 172, 174, 219, 269, 312, 361, 363, 367, 378, 380, 386, 395, 408, 415, 440, 441, 444, 445, 462, 502, 556, 557, 558, 559, 560, 561, 563, 564, 565, 672, 674, 799, 804, 805, 806, 807, 815, 816, 840, 841, 889, 908, 909, 910, 911, 977, 985, 991, 995, 1004, 1019, 1022, 1031, 1038, 1040, 1042, 1043, 1047], "bin_edg": 54, "bin_edges_": [54, 308, 865], "bin_cent": [54, 201], "625": [54, 201, 707], "875": [54, 154, 668], "375": [54, 68, 69, 448, 748, 988, 1010], "140": [54, 233, 245, 415, 509, 515, 516, 517, 554, 555, 989, 1010], "234": [54, 835, 839, 857, 858, 990], "axvlin": [54, 61, 74, 83, 104, 125, 135, 171, 173, 174, 190, 268, 347, 1020], "get_ybound": 54, "state": [54, 58, 71, 73, 81, 203, 234, 242, 248, 268, 319, 363, 368, 369, 381, 383, 387, 389, 393, 395, 396, 407, 416, 421, 439, 442, 446, 448, 453, 458, 474, 543, 588, 678, 800, 801, 809, 811, 813, 840, 841, 847, 895, 896, 923, 977, 978, 984, 990, 993, 1000, 1008, 1009, 1013, 1033, 1035, 1037, 1039, 1041, 1044, 1047], "compressed_raccoon_kmean": 54, "90885631": 54, "34346583": 54, "64447187": 54, "28225276": 54, "70763101": 54, "159": [54, 102, 108, 208, 220, 376, 1010, 1031], "78681467": 54, "185": [54, 150, 162, 259, 278, 378, 387, 857, 858, 1010], "17226834": 54, "02069427": 54, "save": [54, 71, 73, 240, 304, 380, 381, 385, 387, 388, 389, 395, 402, 412, 420, 467, 533, 534, 626, 840, 841, 898, 984, 988, 998, 1004, 1013, 1024, 1031, 1034, 1038, 1041], "verifi": [54, 61, 111, 171, 201, 381, 386, 404, 972, 991], "6291456": 54, "surpris": [54, 172, 984, 1008, 1033], "x8": 54, "ndarrai": [54, 59, 91, 201, 244, 260, 261, 262, 381, 382, 383, 387, 388, 404, 416, 419, 420, 423, 424, 426, 429, 430, 432, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 496, 499, 500, 501, 502, 503, 504, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 696, 697, 699, 700, 701, 714, 717, 720, 721, 722, 725, 726, 736, 743, 744, 746, 748, 749, 751, 752, 756, 757, 758, 759, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 783, 787, 788, 789, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 918, 919, 920, 925, 926, 936, 937, 938, 939, 943, 950, 952, 953, 960, 961, 963, 964, 965, 966, 969, 974, 975, 988, 1003, 1009, 1034, 1038, 1041, 1042, 1045, 1046, 1047, 1048], "practic": [54, 72, 81, 87, 99, 119, 123, 153, 170, 171, 177, 185, 203, 230, 236, 263, 270, 291, 292, 319, 339, 343, 368, 370, 381, 383, 384, 387, 389, 394, 395, 408, 410, 412, 413, 414, 415, 416, 418, 446, 451, 461, 520, 523, 588, 631, 632, 669, 795, 839, 893, 900, 977, 978, 982, 984, 987, 988, 989, 990, 991, 994, 995, 998, 1008, 1009, 1011, 1013, 1015, 1024, 1025, 1026, 1033, 1037, 1039, 1041, 1043], "gain": [54, 224, 269, 285, 287, 327, 352, 353, 361, 380, 387, 389, 393, 415, 531, 556, 560, 561, 563, 724, 754, 795, 796, 829, 908, 910, 989, 993, 1001, 1004, 1034, 1038, 1041], "plot_face_compress": [54, 69, 1010], "bayesianridg": [55, 165, 180, 181, 185, 319, 626, 643, 984, 1038, 1039, 1040, 1041, 1044, 1045, 1047], "shutil": [55, 73, 409], "tempfil": [55, 287, 317, 409, 991], "feature_select": [55, 72, 73, 75, 144, 145, 146, 147, 148, 149, 150, 151, 168, 244, 319, 321, 342, 363, 370, 395, 399, 409, 417, 580, 977, 1010, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "kfold": [55, 119, 125, 139, 257, 267, 363, 412, 436, 471, 566, 567, 593, 601, 646, 650, 652, 654, 660, 662, 664, 672, 797, 800, 801, 803, 805, 807, 811, 816, 818, 819, 820, 821, 822, 823, 824, 825, 827, 831, 834, 881, 1019, 1032, 1033, 1034, 1036, 1037, 1039, 1041], "roi_siz": 55, "snr": 55, "noise_coef": 55, "gridsearch": [55, 79, 273, 1008], "cachedir": [55, 73, 390, 409], "mkdtemp": [55, 409], "n_x": [55, 584], "n_y": [55, 584, 990, 998], "parcel": [55, 68, 408], "ward__n_clust": 55, "coef_agglomeration_": 55, "_agglom": 55, "ward_tre": [55, 440, 444, 1031, 1035], "451933": 55, "675318": 55, "275706": 55, "085711": 55, "1600x1600": 55, "7840": 55, "element": [55, 96, 116, 117, 128, 232, 256, 261, 269, 271, 318, 353, 357, 361, 370, 378, 380, 381, 383, 390, 396, 405, 407, 408, 412, 413, 415, 416, 419, 443, 445, 451, 463, 486, 507, 511, 513, 519, 521, 525, 526, 530, 536, 537, 539, 549, 556, 557, 558, 559, 563, 564, 565, 566, 567, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 616, 631, 657, 658, 665, 666, 667, 675, 676, 677, 706, 716, 725, 732, 734, 744, 761, 767, 776, 780, 786, 787, 830, 840, 841, 842, 843, 844, 846, 848, 850, 851, 855, 857, 858, 863, 879, 880, 883, 887, 900, 905, 908, 909, 910, 911, 939, 940, 941, 959, 961, 962, 982, 984, 988, 989, 992, 995, 998, 999, 1000, 1004, 1013, 1015, 1036, 1037, 1039, 1041, 1042, 1043, 1045, 1047], "return_dist": [55, 462, 840, 841, 842, 843, 844, 846, 848, 850, 851, 852, 991, 1035], "________________________________________________________ward_tre": 55, "0min": 55, "905206": 55, "161245": 55, "849835": 55, "091621": 55, "f_regress": [55, 145, 417, 591, 594, 595, 597, 598, 599, 603, 604, 608, 1034, 1038, 1045, 1048], "cach": [55, 67, 168, 263, 285, 286, 288, 293, 297, 299, 367, 368, 376, 395, 440, 444, 449, 467, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 501, 507, 797, 842, 844, 860, 861, 898, 902, 903, 904, 905, 906, 973, 991, 1003, 1010, 1034, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1047], "selectpercentil": [55, 72, 244, 342, 417, 591, 594, 595, 597, 598, 602, 605, 1032, 1037, 1047], "anova__percentil": [55, 342], "coef_selection_": 55, "_univariate_select": 55, "267703": 55, "026711": 55, "_____________________________________________________f_regress": 55, "447268": 55, "638768": 55, "rdbu_r": [55, 83, 107, 339], "temporari": [55, 71, 73, 367, 467, 686, 779, 898, 991, 1034, 1035, 1038, 1044, 1045], "worri": [55, 985, 1016], "rmtree": [55, 73, 409], "ignore_error": 55, "495": [55, 69, 1010], "plot_feature_agglomeration_vs_univariate_select": [55, 69, 1010], "huberregressor": [55, 153, 168, 179, 181, 199, 205, 206, 207, 220, 314, 523, 669, 670, 671, 677, 678, 984, 1010, 1037, 1038, 1039, 1040], "orthogon": [55, 97, 98, 99, 106, 168, 179, 220, 275, 407, 413, 525, 530, 536, 538, 541, 542, 547, 663, 664, 684, 685, 1000, 1010, 1011, 1026, 1031], "pursuit": [55, 97, 99, 106, 168, 179, 220, 275, 413, 473, 525, 530, 536, 541, 547, 663, 664, 684, 685, 1010, 1011, 1026, 1031], "perspect": [56, 61, 201, 367, 376, 393, 396, 529, 642, 900, 981], "conveni": [56, 205, 240, 373, 389, 393, 409, 412, 416, 418, 423, 442, 446, 448, 450, 452, 463, 488, 610, 675, 677, 698, 726, 783, 859, 860, 962, 978, 980, 984, 985, 995, 1013, 1024, 1031], "ground_truth": [56, 292], "proba_map": 56, "class_index": 56, "ci": [56, 368, 384, 385, 389, 990, 1037, 1039], "preambl": 56, "parameters_str": 56, "greatest": [56, 398, 408, 867, 1039], "remark": [56, 87, 150, 369, 381, 998], "unlik": [56, 57, 119, 171, 172, 222, 224, 252, 307, 337, 381, 383, 387, 393, 395, 399, 410, 412, 413, 416, 445, 449, 534, 649, 650, 653, 654, 655, 681, 682, 783, 818, 840, 841, 880, 891, 903, 984, 987, 988, 995, 1003, 1031, 1037], "bi": [56, 416], "worth": [56, 122, 172, 201, 381, 389, 1013], "rememb": [56, 383, 386, 398, 416, 991, 995, 1004], "hardli": [56, 606, 607], "proper": [56, 190, 219, 369, 387, 406, 415, 448, 540, 552, 675, 937, 963, 983, 984, 985, 988, 1003, 1031, 1041, 1042, 1043, 1044, 1045, 1046], "must": [56, 171, 172, 174, 182, 185, 218, 219, 230, 241, 257, 291, 308, 313, 352, 363, 376, 380, 381, 382, 383, 385, 387, 389, 395, 396, 399, 404, 406, 408, 409, 412, 413, 415, 416, 417, 418, 419, 429, 437, 440, 443, 444, 445, 446, 448, 449, 450, 454, 456, 458, 460, 461, 463, 465, 466, 468, 473, 486, 507, 508, 511, 522, 530, 536, 537, 538, 539, 540, 542, 543, 546, 552, 553, 558, 559, 560, 561, 566, 567, 580, 581, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 609, 610, 616, 619, 626, 627, 628, 629, 631, 632, 637, 641, 642, 647, 648, 651, 657, 658, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 684, 685, 686, 687, 688, 691, 692, 693, 694, 695, 698, 702, 705, 708, 733, 744, 762, 769, 772, 776, 779, 786, 790, 791, 792, 794, 795, 796, 797, 798, 800, 801, 802, 804, 806, 807, 809, 811, 812, 813, 815, 816, 818, 821, 824, 826, 827, 835, 836, 837, 838, 839, 842, 843, 844, 846, 848, 849, 850, 851, 852, 855, 856, 857, 858, 860, 863, 864, 865, 867, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 900, 901, 902, 903, 904, 905, 906, 907, 913, 956, 963, 972, 974, 977, 978, 984, 985, 986, 988, 991, 992, 994, 995, 1002, 1003, 1004, 1015, 1024, 1031, 1034, 1038, 1042, 1044, 1045], "maintain": [56, 206, 219, 222, 237, 262, 368, 370, 380, 384, 387, 388, 389, 393, 395, 398, 408, 415, 439, 441, 869, 870, 876, 877, 880, 885, 888, 889, 891, 984, 985, 998, 1008, 1009, 1015, 1026, 1046], "mitig": [56, 173, 314, 368, 369, 985, 1004, 1022, 1023, 1043], "great": [56, 170, 171, 199, 363, 381, 393, 413, 762, 1009, 1013, 1031, 1038], "appropri": [56, 58, 104, 158, 171, 205, 237, 271, 357, 363, 379, 381, 383, 389, 395, 407, 408, 412, 414, 415, 419, 443, 449, 456, 488, 489, 490, 495, 499, 500, 501, 503, 504, 509, 576, 581, 590, 591, 594, 595, 597, 598, 599, 671, 673, 686, 708, 842, 843, 844, 846, 848, 850, 851, 852, 972, 984, 987, 988, 998, 1035, 1038, 1044, 1047], "immedi": [56, 381, 393, 797, 811, 821, 822, 1039], "hdb": [56, 445], "probabilities_": [56, 445], "capabl": [56, 57, 87, 158, 205, 226, 383, 395, 398, 989, 992, 1003, 1004, 1013, 1031, 1040, 1048], "constraint": [56, 58, 68, 96, 112, 137, 168, 196, 205, 240, 241, 257, 302, 303, 304, 318, 381, 393, 413, 416, 486, 507, 508, 556, 557, 560, 561, 563, 564, 631, 634, 815, 816, 908, 909, 910, 911, 977, 979, 984, 985, 1002, 1010, 1035, 1038, 1039, 1042, 1044, 1046, 1048], "reachabl": [56, 66, 445, 449, 454, 455, 456, 846, 942], "fragment": [56, 99], "sparser": [56, 180, 192, 413, 470, 477, 538, 542, 984, 991, 1002], "Not": [56, 139, 172, 367, 393, 408, 426, 427, 430, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 468, 469, 470, 471, 472, 473, 474, 475, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 562, 565, 568, 569, 580, 581, 582, 587, 588, 590, 626, 627, 628, 629, 676, 687, 688, 689, 690, 692, 766, 792, 795, 796, 797, 800, 801, 811, 837, 840, 841, 844, 845, 846, 848, 852, 864, 872, 875, 876, 878, 881, 892, 893, 904, 988, 994, 1008, 1040], "mention": [56, 87, 113, 219, 318, 363, 367, 381, 385, 386, 393, 395, 408, 695, 892, 893, 977, 982, 984, 1009, 1013, 1024, 1038, 1039, 1040], "until": [56, 124, 150, 209, 274, 319, 321, 386, 395, 396, 405, 408, 412, 417, 507, 508, 556, 557, 558, 559, 563, 564, 565, 592, 645, 646, 651, 652, 657, 658, 659, 660, 661, 662, 665, 666, 667, 670, 675, 676, 677, 693, 795, 796, 800, 801, 857, 858, 897, 900, 908, 909, 910, 911, 963, 977, 984, 985, 993, 1001, 1004, 1024, 1034, 1038, 1039, 1045], "tradeoff": [56, 116, 168, 235, 243, 255, 269, 270, 271, 272, 278, 352, 367, 381, 389, 414, 514, 563, 697, 701, 725, 787, 826, 861, 880, 900, 985, 1010, 1022, 1040, 1043], "comfort": [56, 415], "epsilon": [56, 66, 183, 225, 236, 323, 346, 413, 445, 454, 642, 648, 666, 675, 677, 744, 857, 858, 901, 903, 906, 981, 984, 988, 992, 1002, 1003, 1022, 1031], "incap": 56, "suffici": [56, 124, 133, 209, 276, 339, 367, 395, 408, 417, 531, 656, 681, 682, 816, 817, 989, 991, 1009, 1040, 1046, 1047], "intervent": 56, "inaccess": 56, "ultim": [56, 226, 382], "world": [56, 71, 75, 171, 205, 226, 240, 352, 367, 370, 374, 378, 408, 413, 416, 978, 988, 990, 1007, 1009, 1013, 1018, 1026, 1031], "whose": [56, 80, 81, 82, 150, 158, 201, 337, 376, 389, 390, 395, 406, 408, 410, 415, 417, 418, 421, 436, 437, 438, 447, 460, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 514, 533, 537, 539, 540, 543, 546, 548, 571, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 639, 670, 694, 717, 797, 804, 811, 825, 846, 865, 892, 893, 936, 967, 968, 982, 989, 993, 994, 995, 1003, 1034, 1039, 1040, 1042, 1045], "respect": [56, 68, 91, 101, 113, 117, 119, 122, 130, 161, 177, 180, 185, 190, 203, 215, 218, 222, 224, 231, 234, 236, 240, 252, 271, 291, 292, 304, 312, 321, 336, 343, 367, 368, 376, 377, 381, 406, 408, 411, 413, 415, 416, 418, 445, 463, 466, 469, 470, 471, 472, 473, 474, 475, 533, 539, 540, 546, 552, 560, 561, 596, 609, 610, 611, 612, 613, 614, 615, 618, 619, 620, 621, 622, 623, 624, 635, 642, 670, 689, 693, 711, 726, 780, 783, 795, 796, 836, 846, 857, 858, 912, 914, 977, 981, 982, 984, 985, 988, 991, 992, 993, 994, 998, 1003, 1008, 1013, 1034, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "recomput": [56, 57, 241, 243, 287, 317, 468, 473, 984, 1000, 1036, 1047], "cut_dist": [56, 445], "431": [56, 69, 378, 1010], "plot_hdbscan": [56, 69, 1010], "johnson": [56, 168, 177, 229, 245, 307, 311, 373, 407, 488, 501, 876, 888, 892, 893, 894, 998, 1005, 1010, 1026, 1039, 1045, 1047], "lindenstrauss": [56, 168, 177, 229, 245, 373, 407, 488, 501, 892, 893, 894, 1005, 1010, 1026], "bound": [56, 157, 159, 161, 168, 177, 203, 219, 229, 245, 261, 379, 388, 408, 413, 416, 418, 419, 443, 488, 501, 511, 522, 535, 594, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 631, 634, 636, 649, 653, 657, 676, 704, 733, 795, 796, 840, 841, 877, 889, 892, 893, 894, 902, 903, 904, 907, 924, 956, 984, 987, 988, 991, 1000, 1002, 1003, 1005, 1010, 1039, 1042, 1043, 1045], "intract": [57, 413, 985, 993], "inferenti": 57, "meta": [57, 71, 112, 136, 137, 168, 201, 237, 267, 271, 279, 281, 283, 323, 357, 360, 363, 375, 379, 383, 385, 393, 395, 399, 404, 406, 417, 418, 436, 442, 443, 446, 448, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 495, 532, 533, 537, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 574, 580, 581, 587, 589, 590, 593, 596, 602, 609, 610, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 689, 797, 798, 799, 804, 806, 813, 815, 823, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 845, 847, 850, 851, 857, 858, 860, 863, 865, 866, 867, 872, 879, 880, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 948, 977, 989, 1009, 1010, 1011, 1026, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1045, 1046, 1048], "chirag": 57, "nagpal": 57, "christo": [57, 1040, 1041, 1043, 1045], "arida": [57, 1040, 1041, 1043, 1045], "baseestim": [57, 111, 237, 285, 381, 394, 395, 418, 432, 631, 632, 929, 1031, 1038, 1041, 1043, 1045, 1046], "clone": [57, 126, 161, 172, 237, 304, 363, 379, 381, 384, 385, 387, 389, 395, 406, 409, 418, 436, 464, 568, 569, 596, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 803, 819, 824, 827, 831, 834, 860, 861, 897, 1009, 1031, 1037, 1039, 1043, 1047, 1048], "metaestim": [57, 383, 395, 407, 897, 1035, 1044, 1045], "available_if": [57, 395, 1044, 1045], "check_is_fit": [57, 111, 237, 384, 390, 395, 1041, 1044, 1045], "5000": [57, 187, 216, 217, 219, 319, 881], "_classifier_ha": 57, "deleg": [57, 387, 433, 913, 1035, 1037, 1043], "unfit": [57, 409, 433, 463, 568, 569, 601, 610, 1039, 1041, 1048], "classifier_": [57, 237], "inductivecluster": 57, "clusterer_": 57, "plot_scatt": 57, "cluster_label": [57, 61], "x_new": [57, 409, 413, 417, 432, 441, 442, 444, 446, 448, 530, 531, 532, 533, 534, 535, 536, 538, 540, 541, 542, 543, 548, 566, 568, 569, 581, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 627, 629, 634, 637, 638, 639, 640, 641, 687, 688, 689, 690, 691, 849, 856, 863, 864, 865, 866, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 892, 893, 1000, 1015], "y_new": 57, "declar": [57, 223, 237, 363, 381, 382, 383, 387, 395, 442, 445, 446, 458, 470, 471, 477, 689, 693, 1038, 1042], "membership": [57, 396, 405, 407, 408, 510, 511, 512, 513, 514, 518, 521, 1003], "inductive_learn": 57, "probable_clust": 57, "069": [57, 69, 260, 340, 350, 1010], "plot_inductive_clust": [57, 69, 1010], "__sklearn_is_fitted__": [57, 109, 110, 168, 383, 422, 425, 972, 1010, 1044, 1045], "develop": [57, 110, 219, 260, 262, 280, 317, 323, 352, 367, 370, 376, 380, 381, 387, 393, 395, 396, 397, 399, 402, 405, 407, 410, 411, 415, 416, 422, 425, 432, 492, 797, 972, 984, 988, 991, 1004, 1006, 1008, 1009, 1010, 1012, 1013, 1022, 1031, 1039, 1040, 1041, 1044, 1046, 1048], "meant": [58, 150, 240, 376, 383, 390, 473, 492, 676, 846, 954, 955, 978, 992, 994, 998, 1032], "unintuit": 58, "possibli": [58, 87, 150, 201, 216, 343, 353, 378, 380, 389, 402, 408, 415, 416, 450, 452, 588, 835, 836, 837, 838, 839, 905, 906, 908, 909, 910, 911, 977, 980, 985, 991, 998, 1046], "undesir": [58, 154, 418], "phil": [58, 1036, 1047], "roth": [58, 1036, 1039, 1046], "mr": [58, 322, 1032, 1035, 1045], "anisotrop": [58, 155, 418, 616, 618, 621], "ellipt": [58, 984], "60834549": 58, "63667341": 58, "40887718": 58, "85253229": 58, "x_vari": 58, "y_vari": 58, "unequ": [58, 1039], "x_filter": 58, "unevenli": [58, 201, 257], "y_filter": 58, "set_i": 58, "scenario": [58, 71, 153, 177, 205, 265, 363, 388, 398, 412, 415, 536, 542, 544, 545, 982, 988, 998, 1041], "criteria": [58, 119, 168, 179, 190, 209, 220, 252, 262, 389, 408, 417, 465, 481, 482, 483, 500, 556, 557, 558, 559, 563, 564, 645, 651, 655, 657, 658, 670, 691, 861, 880, 900, 901, 908, 909, 910, 911, 978, 987, 992, 1002, 1010, 1023, 1034, 1039, 1042], "knowledg": [58, 121, 171, 218, 240, 262, 370, 376, 381, 384, 387, 394, 395, 408, 412, 415, 419, 443, 510, 554, 555, 562, 719, 734, 738, 781, 829, 988, 989, 1000, 1024], "consequ": [58, 104, 219, 262, 263, 307, 336, 363, 413, 415, 560, 561, 565, 654, 655, 978, 984, 988, 1004, 1040, 1042, 1047], "inertia": [58, 59, 62, 353, 408, 442, 446, 448, 451, 458, 459, 461, 462, 1042], "common_param": [58, 126, 172, 236, 264, 265, 343], "unexpect": [58, 237, 363, 381, 386, 389, 402, 534, 695, 988, 1003, 1033, 1039, 1040, 1043, 1045, 1047], "suffic": [58, 59, 383, 1024], "propos": [58, 79, 80, 285, 376, 381, 383, 393, 395, 408, 410, 415, 420, 421, 449, 474, 534, 606, 607, 675, 676, 677, 857, 858, 984, 987, 991, 1002, 1006, 1038], "inflat": [58, 170, 171, 173, 408, 412, 988, 998], "allevi": [58, 180, 185, 408, 990], "fastest": [58, 260, 354, 446, 669, 671, 673, 686, 936, 937, 987], "restart": [58, 384, 389, 446, 530, 536, 537, 542, 544, 545, 609, 610, 985, 1044], "plot_kmeans_assumpt": [58, 69, 1010], "posterior": [58, 152, 153, 154, 159, 163, 168, 180, 262, 413, 418, 548, 549, 551, 609, 610, 612, 613, 614, 618, 621, 622, 626, 643, 644, 707, 795, 982, 1008, 1010, 1037, 1040], "judg": [59, 207, 408, 1019], "definit": [59, 82, 189, 201, 269, 285, 353, 381, 382, 383, 395, 397, 408, 410, 411, 413, 526, 528, 534, 610, 627, 691, 707, 717, 726, 756, 795, 796, 977, 980, 982, 984, 986, 988, 991, 1002, 1007, 1026, 1035, 1039, 1046], "shorthand": [59, 395, 409, 466, 560, 561, 861, 862, 1034], "homo": 59, "compl": 59, "mea": 59, "context": [59, 240, 244, 285, 367, 368, 375, 380, 382, 394, 395, 408, 409, 414, 415, 416, 418, 419, 436, 443, 445, 447, 449, 451, 456, 457, 460, 463, 466, 467, 471, 530, 534, 535, 536, 538, 541, 542, 543, 544, 545, 547, 554, 555, 556, 557, 562, 563, 564, 565, 566, 567, 568, 569, 593, 601, 609, 625, 626, 629, 631, 633, 638, 646, 650, 652, 654, 656, 657, 658, 660, 662, 664, 665, 667, 675, 678, 687, 688, 689, 690, 691, 692, 693, 772, 776, 779, 797, 800, 801, 803, 811, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 832, 833, 842, 843, 846, 848, 850, 851, 853, 854, 859, 862, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 956, 978, 984, 988, 994, 998, 1002, 1009, 1013, 1022, 1031, 1038, 1039, 1044, 1047], "n_digit": 59, "1797": [59, 90, 260, 304, 326, 378, 444, 501, 531, 532, 533, 534, 598, 599, 687, 688, 689, 690, 991, 1021], "bench_k_mean": 59, "tabl": [59, 219, 262, 381, 382, 385, 390, 408, 416, 581, 657, 679, 797, 811, 837, 953, 984, 988, 989, 994, 1008, 1032], "inertia_": [59, 62, 65, 442, 446, 448, 1042], "clustering_metr": 59, "sample_s": [59, 235, 353, 791], "formatter_result": 59, "determinist": [59, 126, 368, 377, 383, 395, 408, 442, 446, 448, 450, 451, 452, 457, 458, 461, 550, 558, 559, 563, 564, 582, 583, 690, 694, 808, 809, 856, 908, 909, 980, 984, 1032, 1035, 1037, 1039, 1040, 1043, 1046, 1047], "ttime": 59, "tinertia": 59, "thomo": 59, "tcompl": 59, "tv": 59, "tari": 59, "tami": 59, "tsilhouett": 59, "__________________________________________________________________________________": 59, "035": 59, "69545": 59, "598": [59, 104, 154, 540], "645": [59, 134, 137, 1010], "621": [59, 767], "469": [59, 142, 143, 1010], "617": [59, 265, 408, 767], "152": [59, 387], "042": [59, 387], "69735": 59, "681": [59, 387], "723": [59, 236], "701": 59, "574": [59, 533, 540], "698": 59, "72686": 59, "636": [59, 185, 353, 387], "658": [59, 87, 247, 254, 309, 315, 1010], "647": 59, "521": 59, "643": [59, 260], "reduced_data": 59, "mesh": [59, 122, 131, 155, 235, 293, 301, 309, 331, 335], "white": [59, 61, 96, 158, 171, 215, 222, 291, 304, 309, 331, 338, 413, 416, 624, 1004, 1031, 1034, 1037, 1041, 1045], "plot_kmeans_digit": [59, 69, 1010], "kmeans_plusplu": [60, 408, 1043, 1048], "4000": [60, 128, 250], "centers_init": 60, "4eacc5": [60, 65], "ff9c34": [60, 65], "4e9a06": [60, 65], "cluster_data": 60, "plot_kmeans_plusplu": [60, 69, 1010], "wrong": [61, 201, 291, 352, 363, 378, 381, 383, 416, 503, 724, 754, 791, 988, 994, 1003, 1034, 1036, 1038, 1039, 1040, 1041, 1044], "wide": [61, 62, 91, 116, 234, 308, 393, 408, 413, 416, 977, 984, 1008, 1013, 1024, 1031, 1033, 1047], "ambival": 61, "thick": [61, 295, 991], "ow": 61, "7049787496083262": 61, "5882004012129721": 61, "6505186632729437": 61, "561464362648773": 61, "4857596147013469": 61, "silhouette_sampl": [61, 791, 1035, 1037, 1039, 1047], "distinct": [61, 262, 328, 352, 354, 376, 383, 386, 395, 396, 412, 415, 416, 588, 798, 807, 815, 874, 875, 895, 896, 977, 984, 991, 994, 1024, 1039], "center_box": [61, 511], "range_n_clust": 61, "set_size_inch": [61, 139, 241], "insert": [61, 171, 201, 393, 408, 486, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 915], "blank": [61, 386, 978, 1004], "demarc": 61, "silhouette_avg": 61, "sample_silhouette_valu": 61, "y_lower": [61, 126], "aggreg": [61, 117, 219, 265, 271, 321, 323, 408, 415, 417, 533, 554, 555, 593, 720, 721, 726, 743, 744, 746, 748, 749, 751, 783, 788, 789, 989, 991, 998, 1047], "ith_cluster_silhouette_valu": 61, "size_cluster_i": 61, "y_upper": [61, 126], "fill_betweenx": 61, "2nd": [61, 91, 161, 312, 408, 419, 443, 529, 998, 1046], "lw": [61, 79, 80, 82, 100, 105, 106, 195, 202, 204, 207, 211, 218, 225, 250, 257, 272, 290, 307, 328, 346], "fontweight": [61, 196], "plot_kmeans_silhouette_analysi": [61, 69, 1010], "reach": [62, 119, 150, 201, 203, 217, 219, 264, 321, 339, 361, 386, 396, 398, 408, 413, 417, 449, 456, 507, 508, 592, 593, 626, 643, 644, 645, 646, 651, 652, 653, 654, 655, 659, 660, 661, 662, 665, 666, 667, 675, 676, 677, 678, 680, 681, 682, 683, 727, 728, 781, 795, 796, 857, 858, 897, 977, 988, 992, 1002, 1004, 1013, 1042, 1046, 1047, 1048], "optimum": [62, 159, 171, 177, 275, 413, 471, 984, 987], "stuck": [62, 691, 985], "check_random_st": [62, 217, 224, 233, 239, 383, 390, 395], "trade": [62, 79, 119, 173, 205, 261, 263, 264, 339, 352, 407, 408, 410, 552, 553, 558, 559, 633, 655, 691, 797, 800, 801, 811, 823, 985, 992, 1000, 1002, 1003, 1009], "n_init_rang": 62, "n_samples_per_cent": 62, "n_clusters_tru": 62, "init_s": [62, 353, 448], "factori": [62, 262, 416, 958, 988], "empti": [62, 71, 106, 213, 329, 367, 376, 383, 385, 408, 420, 482, 532, 560, 561, 630, 808, 865, 905, 907, 915, 920, 921, 927, 947, 948, 978, 1003, 1022, 1033, 1035, 1039, 1040, 1042, 1043, 1045, 1046, 1047], "run_id": 62, "km": [62, 321, 353], "fmt": [62, 212], "my_memb": [62, 64, 65], "228": [62, 69, 1010], "plot_kmeans_stability_low_dim_dens": [62, 69, 1010], "globular": [63, 408], "cleanli": [63, 1031], "947": [63, 69, 1010], "plot_linkage_comparison": [63, 69, 1010], "dorin": [64, 447], "comaniciu": [64, 408, 447], "meer": [64, 408, 447], "ieee": [64, 80, 82, 378, 408, 410, 417, 421, 447, 474, 533, 562, 663, 684, 685, 723, 767, 984, 988, 994], "transact": [64, 378, 408, 410, 419, 421, 443, 447, 474, 533, 537, 539, 546, 562, 643, 663, 684, 685, 723, 724, 754, 767, 984, 988], "intellig": [64, 150, 352, 378, 408, 415, 447, 554, 555, 637, 695, 723, 830, 857, 858, 989, 1000, 1009, 1013], "2002": [64, 406, 408, 415, 436, 447, 592, 593, 724, 754, 847, 895, 980, 988], "603": [64, 447], "619": [64, 353, 447], "labels_uniqu": 64, "420": [64, 69, 1010], "plot_mean_shift": [64, 69, 460, 1010], "k_mean": [65, 390, 395, 1023, 1039, 1047], "t_batch": 65, "pairwis": [65, 170, 171, 234, 271, 317, 321, 322, 352, 367, 373, 383, 395, 408, 413, 418, 445, 457, 460, 461, 467, 486, 507, 508, 534, 560, 561, 619, 637, 638, 639, 640, 641, 642, 687, 689, 691, 693, 695, 698, 776, 779, 786, 790, 791, 828, 844, 848, 852, 866, 898, 980, 988, 991, 1000, 1003, 1026, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1045, 1046, 1047, 1048], "k_means_cluster_cent": 65, "mbk_means_cluster_cent": 65, "k_means_label": 65, "mbk_means_label": 65, "ninertia": 65, "bbbbbb": 65, "plot_mini_batch_kmean": [65, 69, 1010], "shane": [66, 1040, 1043, 1046], "grigsbi": 66, "refug": 66, "rocktalu": 66, "cluster_optics_dbscan": [66, 408], "n_points_per_clust": 66, "c1": [66, 123, 161, 233, 313], "c2": [66, 123, 161, 233, 313], "c3": [66, 123, 313], "c4": [66, 313, 1011, 1026], "c5": [66, 1011, 1026], "c6": 66, "clust": [66, 449, 456], "labels_050": 66, "reachability_": [66, 408, 449, 454, 455, 456], "core_dist": [66, 454], "core_distances_": [66, 449, 454, 456], "ordering_": [66, 408, 449, 454, 455, 456], "labels_200": 66, "ax3": [66, 329], "ax4": 66, "klass": 66, "xk": [66, 549], "rk": 66, "full_lik": 66, "noptic": 66, "ndbscan": 66, "462": [66, 69, 1010], "plot_opt": [66, 69, 1010], "tri": [67, 105, 222, 294, 343, 368, 383, 386, 393, 396, 406, 448, 450, 452, 630, 631, 632, 669, 691, 697, 699, 701, 811, 956, 993, 1012, 1015, 1033, 1039, 1043], "intens": [67, 99, 285, 378, 382, 413, 442, 446, 458, 606, 607, 631, 632, 799, 977, 995, 1013, 1039], "weakli": 67, "outlin": [67, 122, 381, 383, 395, 396, 397, 408, 977, 1026], "center1": 67, "center2": 67, "center3": 67, "center4": 67, "radius1": 67, "radius2": 67, "radius3": 67, "radius4": 67, "circle1": 67, "circle2": 67, "circle3": 67, "circle4": 67, "label_im": 67, "cleaner": 67, "492": [67, 69, 642, 981, 1010, 1022], "plot_segmentation_toi": [67, 69, 1010], "swiss": [68, 168, 221, 222, 223, 224, 227, 228, 408, 529, 691, 692, 1010, 1045], "sole": [68, 393, 408], "oppos": [68, 237, 385, 404, 408, 896, 991, 1003, 1015, 1031], "make_swiss_rol": [68, 226, 1045], "thinner": 68, "fig1": 68, "set_posit": [68, 102, 103, 212, 307], "jet": 68, "fig2": 68, "121": [68, 115, 166, 235, 668, 998], "plot_ward_structured_vs_unstructur": [68, 69, 1010], "54": [69, 93, 150, 151, 177, 185, 201, 204, 228, 240, 376, 378, 408, 490, 1032, 1033], "chain": [70, 73, 76, 77, 113, 141, 168, 233, 270, 273, 274, 280, 282, 284, 285, 288, 304, 363, 370, 373, 393, 395, 407, 418, 495, 501, 540, 610, 626, 657, 736, 797, 826, 829, 831, 832, 833, 834, 860, 861, 880, 977, 978, 989, 993, 1005, 1008, 1010, 1013, 1024, 1026], "raster": 71, "serv": [71, 100, 113, 159, 265, 343, 409, 550, 637, 980, 1045], "matt": [71, 1034, 1035, 1036, 1041, 1042, 1046, 1047], "terri": [71, 1035], "compris": [71, 126, 260, 352, 353, 354, 376, 393, 413, 415, 514, 804, 985], "subject": [71, 130, 253, 265, 352, 376, 381, 383, 385, 393, 395, 396, 406, 407, 410, 412, 413, 494, 657, 658, 684, 863, 958, 979, 984, 1003, 1007, 1024, 1040, 1041, 1044, 1046, 1048], "mccall": 71, "mksol": 71, "dseg": 71, "ti": [71, 201, 249, 252, 260, 348, 367, 406, 408, 598, 599, 634, 719, 724, 754, 795, 796, 902, 905, 908, 987, 988, 1003, 1032, 1034, 1035, 1039, 1041, 1045, 1046, 1047], "fred": [71, 1031, 1044], "575": [71, 201, 353], "3539": 71, "1993apr6": 71, "131900": 71, "8407": 71, "perhap": [71, 122, 378, 380, 389, 395, 414, 1009], "militari": 71, "slug": 71, "school": [71, 378, 408, 786, 988], "physic": [71, 119, 368, 504, 953, 984, 1047], "teacher": 71, "ex": [71, 379, 382, 398, 1035, 1036], "fighter": 71, "jock": 71, "wasn": [71, 237, 1040], "poundal": 71, "flink": 71, "funni": 71, "propon": 71, "si": 71, "insist": 71, "safeti": [71, 393, 409, 954, 1009, 1041], "ball": [71, 290, 298, 408, 414, 447, 691, 840, 841, 845, 848, 850, 851, 852, 1031, 1033, 1036, 1042], "mari": [71, 1039, 1040, 1041, 1042, 1045], "shafer": 71, "nasa": [71, 352, 353, 378], "am": [71, 76, 81, 133, 172, 352, 386, 410, 473, 492, 1038], "dryden": 71, "stateless": [71, 353, 369, 383, 395, 416, 581, 582, 588, 637, 863, 864, 872, 998, 1047], "subject_body_extractor": 71, "subject_body_transform": 71, "sentenc": [71, 352, 354, 376, 396, 416], "text_stat": 71, "num_sent": 71, "text_stats_transform": 71, "subjectbodyextractor": 71, "subjectbodi": 71, "union": [71, 171, 409, 736, 752, 859, 1038], "body_bow": 71, "pull": [71, 320, 368, 379, 384, 395, 396, 1041], "body_stat": 71, "transformer_weight": [71, 463, 466, 859, 1036, 1043], "396": [71, 150, 270, 278, 352, 378, 1010, 1024], "394": [71, 162], "plot_column_transform": [71, 77, 1010], "imput": [72, 133, 167, 173, 232, 242, 244, 318, 321, 370, 373, 385, 394, 395, 399, 409, 415, 489, 500, 564, 579, 638, 644, 671, 822, 843, 861, 919, 921, 1008, 1009, 1010, 1026, 1033, 1034, 1048], "miss": [72, 133, 150, 167, 173, 232, 242, 262, 285, 318, 322, 363, 367, 370, 373, 376, 378, 380, 381, 383, 385, 386, 395, 404, 407, 408, 409, 410, 445, 471, 489, 495, 497, 500, 556, 557, 560, 561, 563, 564, 565, 626, 627, 628, 629, 638, 644, 671, 689, 693, 725, 767, 822, 843, 861, 869, 870, 874, 876, 877, 880, 881, 885, 888, 889, 891, 908, 909, 910, 911, 984, 985, 988, 1008, 1009, 1010, 1011, 1013, 1026, 1033, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "chi": [72, 81, 113, 311, 373, 417, 518, 591, 594, 595, 597, 598, 599, 603, 604, 605, 608, 637, 638, 639, 640, 641, 756, 757, 1026, 1031, 1036, 1037], "dispatch": [72, 370, 404, 467, 797, 811, 821, 822, 823, 898, 954, 955, 1019, 1026, 1046], "processor": [72, 133, 171, 370, 419, 436, 443, 445, 447, 449, 451, 456, 457, 460, 463, 466, 471, 530, 534, 535, 536, 538, 541, 542, 544, 545, 547, 554, 555, 556, 557, 562, 563, 564, 565, 566, 567, 568, 569, 593, 601, 609, 631, 633, 638, 646, 650, 652, 654, 656, 657, 658, 660, 662, 664, 665, 667, 675, 678, 687, 688, 689, 690, 691, 692, 693, 772, 776, 779, 797, 800, 801, 803, 811, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 842, 843, 846, 848, 850, 851, 853, 854, 859, 862, 895, 896], "pedro": [72, 1032, 1034, 1035, 1039], "chi2": [72, 416, 417, 451, 580, 591, 594, 595, 597, 598, 599, 604, 605, 608, 619, 637, 638, 639, 640, 641, 642, 757, 763, 772, 1031, 1038, 1045], "simpleimput": [72, 133, 165, 166, 173, 232, 242, 244, 318, 321, 363, 395, 626, 627, 628, 978, 998, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048], "40945": 72, "titan": [72, 173, 244, 317, 321, 322], "surviv": [72, 173, 977, 1008], "ag": [72, 150, 171, 173, 189, 190, 201, 219, 241, 242, 244, 307, 320, 321, 322, 376, 378, 1013, 1015, 1022], "fare": [72, 173, 244, 321, 322, 1035, 1036], "embark": [72, 173, 244, 317, 321, 322], "sex": [72, 150, 171, 173, 189, 190, 244, 322, 378, 996, 1022], "femal": [72, 171, 322, 386, 873, 874, 998], "male": [72, 171, 322, 386, 873, 874, 998], "pclass": [72, 173, 244, 317, 321, 322], "numeric_featur": [72, 321], "numeric_transform": [72, 321], "categorical_transform": 72, "preprocessor": [72, 133, 171, 201, 232, 240, 242, 313, 318, 320, 321, 322, 409, 416, 587, 588, 590, 1008, 1024, 1031, 1034, 1039, 1041], "798": [72, 415], "lt": [72, 73, 118, 133, 171, 252, 260, 274, 379, 381], "0x7f2bbf0f44c0": 72, "pipelineifittedpipelin": [72, 118, 147, 171, 173, 231, 241, 244, 269, 321], "columntransformercolumntransform": [72, 133, 171, 173, 232, 242, 313, 318, 321], "simpleimputersimpleimput": [72, 133, 173, 232, 242, 318, 321], "standardscalerstandardscal": [72, 133, 171, 231, 232, 241, 242, 244, 269, 318, 321], "onehotencoderonehotencod": [72, 118, 133, 171, 172, 232, 242, 318, 321], "selectpercentileselectpercentil": [72, 244], "logisticregressionlogisticregress": [72, 118, 231, 232, 242, 244, 318, 321], "make_column_selector": [72, 123, 133, 240, 409, 463, 466, 1041], "subset_featur": 72, "Then": [72, 114, 118, 121, 133, 136, 147, 171, 177, 185, 189, 201, 205, 226, 231, 237, 243, 264, 265, 280, 352, 375, 385, 387, 389, 398, 405, 406, 408, 411, 413, 416, 417, 569, 592, 718, 754, 797, 811, 900, 901, 978, 987, 988, 994, 1003, 1024, 1040], "1047": 72, "1118": 72, "684": [72, 81], "1045": 72, "841": 72, "1046": [72, 252], "kb": [72, 171, 172], "numerical_transform": 72, "yourself": [72, 380, 381, 382, 386, 389, 992], "dtype_exclud": [72, 465], "dtype_includ": [72, 123, 133, 240, 409, 465], "_column_transform": [72, 133], "0x7f2b9a5a4250": 72, "0x7f2b9a5a43a0": 72, "exactli": [72, 113, 170, 180, 185, 194, 201, 205, 253, 270, 308, 347, 352, 381, 383, 405, 408, 412, 413, 416, 421, 445, 452, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 514, 525, 589, 590, 614, 675, 677, 702, 704, 761, 798, 815, 821, 980, 984, 985, 986, 988, 989, 1004, 1023, 1024, 1031, 1037, 1038, 1044], "hyperparamet": [72, 74, 75, 153, 154, 160, 161, 165, 168, 172, 180, 185, 190, 215, 219, 230, 240, 255, 260, 265, 267, 273, 274, 278, 287, 304, 352, 383, 395, 408, 412, 413, 415, 418, 501, 534, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 642, 652, 658, 664, 672, 675, 726, 783, 797, 811, 977, 982, 983, 984, 987, 988, 990, 992, 994, 1002, 1009, 1010, 1024, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1047], "cartesian": [72, 405, 632, 991, 1046], "preprocessor__num__imputer__strategi": 72, "preprocessor__cat__selector__percentil": 72, "classifier__c": 72, "search_cv": 72, "param_distribut": [72, 153, 263, 270, 274, 319, 394, 801, 809, 811, 1047], "randomizedsearchcvinot": 72, "fittedrandomizedsearchcv": 72, "pipelinepipelin": [72, 73, 242], "trigger": [72, 73, 385, 409, 857, 858, 860, 861, 920, 921, 937, 984, 1024, 1039, 1045, 1046], "best_params_": [72, 74, 126, 153, 236, 252, 260, 266, 319, 339, 394, 797, 800, 801, 811, 977, 1020, 1024], "best_score_": [72, 74, 236, 263, 266, 267, 339, 672, 674, 797, 800, 801, 811, 1019, 1020, 1024, 1042], "cv_results_": [72, 73, 74, 83, 119, 139, 149, 252, 260, 261, 262, 263, 266, 270, 273, 274, 287, 339, 471, 593, 797, 800, 801, 811, 1024, 1037, 1041, 1043, 1044], "sort_valu": [72, 173, 174, 244, 252, 262, 273, 313, 314], "mean_test_scor": [72, 73, 74, 83, 119, 139, 149, 252, 261, 262, 263, 270, 273, 274, 287, 339, 471, 593, 797, 811, 977, 1037, 1044], "std_test_scor": [72, 74, 119, 139, 149, 261, 262, 263, 270, 287, 471, 593, 797, 811, 1037, 1044], "param_preprocessor__num__imputer__strategi": 72, "param_preprocessor__cat__selector__percentil": 72, "param_classifier__c": 72, "786015": 72, "031020": 72, "785063": 72, "030498": 72, "783149": 72, "030462": 72, "plot_column_transformer_mixed_typ": [72, 77, 1010], "set_output": [72, 168, 172, 229, 242, 245, 312, 313, 384, 432, 441, 442, 444, 446, 448, 463, 467, 481, 482, 483, 484, 495, 503, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 565, 566, 567, 568, 569, 580, 581, 582, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 657, 687, 688, 691, 826, 844, 849, 852, 856, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 898, 1010, 1046, 1047, 1048], "instanti": [73, 156, 320, 384, 399, 415, 449, 566, 567, 601, 629, 797, 800, 801, 803, 811, 819, 821, 822, 823, 824, 825, 827, 927, 994, 1021, 1031, 1039, 1043, 1047], "argument": [73, 202, 231, 234, 237, 368, 375, 376, 381, 382, 384, 386, 387, 389, 390, 393, 395, 408, 409, 412, 413, 415, 417, 419, 420, 422, 426, 430, 437, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 453, 456, 458, 460, 462, 467, 468, 492, 495, 502, 507, 532, 534, 535, 537, 539, 550, 558, 559, 562, 566, 567, 568, 569, 576, 580, 581, 587, 588, 590, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 630, 638, 642, 645, 646, 649, 650, 651, 652, 653, 654, 655, 659, 660, 661, 662, 665, 667, 675, 676, 680, 683, 687, 691, 695, 697, 698, 699, 700, 701, 713, 718, 733, 740, 761, 777, 778, 803, 819, 821, 822, 823, 828, 829, 832, 842, 843, 844, 846, 848, 849, 850, 851, 852, 853, 854, 857, 860, 864, 898, 904, 914, 918, 927, 932, 934, 955, 956, 958, 972, 977, 980, 984, 985, 986, 988, 991, 995, 996, 1003, 1004, 1015, 1019, 1031, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1048], "memoiz": [73, 376, 395], "costli": [73, 79, 120, 165, 263, 348, 368, 382, 387, 408, 442, 626, 805, 807, 892, 893, 937, 988, 991, 1000, 1009], "mcgibbon": [73, 1033, 1034, 1037], "selectkbest": [73, 75, 146, 147, 321, 363, 381, 399, 409, 417, 580, 591, 594, 595, 597, 599, 605, 977, 1032, 1037, 1047], "mutual_info_classif": [73, 417, 591, 594, 595, 598, 599, 1037, 1043, 1046], "pipe": [73, 74, 123, 242, 261, 313, 319, 320, 394, 399, 409, 416, 589, 860, 885, 886, 888, 889, 890, 891, 977, 998, 1020], "reduce_dim": [73, 242, 261, 409], "popul": [73, 79, 81, 171, 201, 240, 265, 307, 376, 390, 395, 410, 439, 711, 717, 842, 843, 844, 846, 848, 850, 851, 852, 988, 994, 998, 1004], "n_features_opt": 73, "c_option": 73, "iterated_pow": [73, 531, 534, 540, 1037], "reduce_dim__n_compon": [73, 261, 409], "classify__c": 73, "reduce_dim__k": 73, "reducer_label": 73, "kbest": [73, 591], "0x7f2bbf0d4940": 73, "gridsearchcvifittedgridsearchcv": [73, 252, 260, 262], "minmaxscalerminmaxscal": 73, "passthroughpassthrough": [73, 171, 172, 313], "linearsvclinearsvc": [73, 147, 269], "mean_scor": [73, 271, 274, 353, 1044], "alphabet": [73, 395, 739], "eas": [73, 174, 252, 312, 381, 384, 387, 984, 1002, 1008, 1009, 1013, 1042, 1043, 1045], "sometim": [73, 133, 170, 262, 303, 353, 363, 368, 369, 381, 383, 385, 387, 394, 395, 408, 410, 413, 415, 416, 448, 533, 534, 537, 539, 540, 865, 866, 867, 915, 983, 984, 985, 988, 993, 998, 999, 1003, 1015, 1023, 1028, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1047], "worthwhil": [73, 395], "slower": [73, 99, 119, 123, 165, 236, 271, 354, 415, 416, 417, 445, 450, 452, 537, 539, 546, 554, 555, 556, 557, 562, 563, 564, 565, 587, 588, 590, 630, 631, 632, 642, 658, 671, 673, 686, 691, 703, 828, 832, 833, 981, 985, 986, 987, 989, 991, 1004, 1024, 1035, 1042], "constructor": [73, 233, 368, 383, 395, 407, 409, 416, 463, 466, 548, 549, 554, 566, 567, 568, 569, 580, 581, 587, 588, 596, 667, 675, 676, 842, 843, 844, 846, 847, 848, 850, 851, 852, 859, 860, 861, 862, 956, 977, 989, 998, 1003, 1009, 1015, 1031, 1032, 1034, 1035, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046], "folder": [73, 376, 379, 381, 385, 389, 398, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 502, 991, 1024], "cached_pip": [73, 409], "delet": [73, 327, 329, 385, 386, 468, 473, 485], "exit": [73, 285, 385, 389, 467], "benefici": [73, 75, 79, 96, 131, 307, 308, 379, 985], "plot_compare_reduct": [73, 77, 1010], "increment": [73, 75, 95, 101, 103, 104, 105, 108, 168, 265, 385, 387, 441, 446, 462, 503, 532, 533, 534, 535, 538, 540, 543, 601, 645, 657, 665, 803, 824, 832, 833, 835, 836, 837, 838, 839, 869, 870, 880, 900, 901, 963, 984, 990, 1010, 1034, 1035], "874": [74, 786, 787, 988], "logistic__c": [74, 1020], "54434690031882": 74, "pca__n_compon": [74, 1020], "truncat": [74, 131, 223, 390, 533, 534, 538, 539, 540, 543, 675, 677, 724, 754, 795, 849, 913, 937, 977, 987, 988, 1002, 1020, 1024, 1025, 1026, 1037, 1039], "x_digit": [74, 141, 302, 409, 1019, 1020, 1022], "y_digit": [74, 141, 302, 409, 1019, 1020, 1022], "__": [74, 263, 395, 409, 422, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 795, 796, 797, 800, 801, 811, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 977, 1020, 1039, 1040], "spectrum": [74, 523, 543, 694, 937, 1013, 1020, 1039], "ax0": [74, 76, 201, 233, 353, 1020], "n_components_": [74, 104, 395, 440, 444, 533, 537, 538, 539, 540, 541, 542, 892, 893, 1020, 1040, 1042], "explained_variance_ratio_": [74, 105, 353, 413, 533, 540, 543, 548, 1020, 1034, 1037], "named_step": [74, 87, 409, 592, 593, 596, 860, 861, 900, 901, 984, 1020, 1038, 1040], "components_col": 74, "param_pca__n_compon": 74, "best_clf": 74, "nlargest": 74, "yerr": [74, 80, 82, 120, 123, 149, 287, 313, 329], "val": [74, 213, 262, 939], "608": [74, 77, 1010], "plot_digits_pip": [74, 77, 1010], "boltzmann": [74, 86, 168, 191, 216, 300, 305, 501, 657, 712, 826, 856, 857, 858, 860, 886, 1010, 1025, 1026, 1033], "candid": [75, 252, 260, 263, 270, 319, 369, 381, 385, 408, 415, 447, 449, 797, 800, 801, 809, 811, 984, 991, 1004, 1037], "features__pca__n_compon": 75, "features__univ_select__k": 75, "svm__c": 75, "967": [75, 988, 992], "transformer_list": [75, 409, 859, 862, 978, 1042, 1043], "univ_select": 75, "amuel": [75, 117, 192, 235, 328, 347], "ai": [75, 117, 192, 235, 328, 347, 412], "bonn": [75, 117, 192, 235, 328, 347], "mayb": [75, 303, 395, 416, 1003, 1009], "combined_featur": 75, "x_featur": [75, 639, 640, 641, 980], "grid_search": [75, 119, 242, 252, 260, 270, 409, 956, 1033, 1034, 1035, 1036, 1037, 1038], "386": [75, 77, 876, 1010], "plot_feature_union": [75, 77, 1010], "overview": [76, 168, 267, 279, 281, 283, 357, 382, 384, 394, 395, 495, 732, 741, 797, 813, 823, 828, 829, 830, 908, 990, 1002, 1010, 1025, 1026], "transformedtargetregressor": [76, 171, 201, 393, 399, 409, 592, 593, 596, 1039, 1041, 1044], "hous": [76, 133, 165, 166, 307, 319, 374, 489, 1026], "translat": [76, 383, 418, 526, 613, 869, 870, 886, 985, 988, 1006, 1013], "lowest": [76, 87, 172, 185, 252, 375, 408, 412, 634, 636, 800, 801, 804, 907, 908, 985, 988, 1004, 1046], "logarithm": [76, 133, 171, 205, 234, 263, 339, 395, 417, 459, 589, 657, 658, 675, 703, 724, 739, 749, 753, 754, 755, 789, 803, 840, 841, 935, 1004, 1019, 1038], "log1p": [76, 233, 864, 988, 998], "expm1": 76, "y_tran": 76, "meda": [76, 171, 988], "median_absolute_error": [76, 171, 988, 1035, 1041, 1043], "r2_score": [76, 170, 185, 196, 197, 415, 431, 464, 481, 482, 483, 553, 555, 557, 559, 561, 564, 567, 569, 610, 634, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 669, 671, 672, 677, 678, 722, 726, 833, 834, 843, 851, 858, 901, 903, 906, 909, 911, 977, 988, 1032, 1034, 1040, 1044, 1045], "compute_scor": [76, 104, 180, 181, 643, 644, 1040], "r2": [76, 114, 119, 133, 170, 172, 196, 236, 383, 409, 415, 553, 569, 672, 823, 858, 988, 996, 1040], "ridge_cv": 76, "y_pred_ridg": 76, "ridge_cv_with_trans_target": 76, "inverse_func": [76, 171, 409, 464, 864, 998, 1039], "y_pred_ridge_with_trans_target": 76, "sell": 76, "quantile_transform": [76, 877, 888, 998, 1038, 1039, 1040], "house_pric": [76, 133], "select_dtyp": [76, 123, 322, 465], "inf": [76, 156, 295, 390, 408, 418, 445, 449, 456, 460, 470, 471, 477, 552, 553, 558, 559, 592, 593, 596, 605, 606, 607, 618, 626, 634, 636, 647, 648, 649, 651, 668, 670, 671, 675, 679, 686, 726, 728, 744, 776, 783, 787, 856, 865, 872, 918, 920, 921, 935, 988, 998, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047], "lotfrontag": 76, "garageyrblt": 76, "masvnrarea": [76, 133], "to_fram": 76, "n_quantil": [76, 172, 311, 877, 889, 1040], "output_distribut": [76, 307, 311, 409, 876, 877, 888, 889, 998], "squeez": [76, 159, 160, 240, 285, 307, 1023], "quantiletransform": [76, 172, 311, 409, 464, 876, 889, 978, 998, 1038, 1039, 1040, 1041, 1042, 1047], "weaker": [76, 560, 561], "residu": [76, 197, 203, 258, 431, 464, 481, 482, 483, 551, 553, 555, 557, 559, 561, 564, 567, 569, 610, 634, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 669, 670, 671, 672, 673, 677, 678, 684, 685, 700, 742, 783, 833, 834, 843, 851, 858, 901, 903, 906, 909, 911, 984, 988, 1022, 1043, 1044, 1046], "smile": [76, 376, 1045], "345": [76, 77, 150, 378, 1010], "plot_transformed_target": [76, 77, 1010], "predictor": [76, 112, 113, 123, 136, 137, 165, 166, 168, 201, 219, 232, 240, 258, 313, 383, 394, 395, 409, 411, 412, 415, 418, 465, 466, 481, 482, 483, 495, 515, 516, 517, 554, 555, 561, 564, 567, 601, 609, 629, 631, 632, 647, 652, 656, 668, 672, 679, 700, 821, 823, 832, 833, 860, 861, 873, 874, 880, 962, 984, 989, 1010, 1032, 1038, 1041], "stack": [76, 112, 113, 123, 136, 137, 165, 166, 168, 201, 232, 240, 258, 290, 313, 361, 380, 389, 393, 395, 407, 414, 463, 465, 466, 495, 514, 561, 564, 566, 567, 611, 626, 627, 629, 652, 672, 700, 821, 823, 861, 865, 873, 874, 880, 962, 978, 1008, 1009, 1010, 1011, 1012, 1026, 1031, 1034, 1038, 1039, 1040, 1041, 1042], "741": 77, "empiricalcovari": [79, 81, 82, 410, 468, 472, 473, 474, 475, 994], "unbias": [79, 406, 410, 413, 436, 549, 655, 671, 673, 686, 984, 1019], "shrunk": [79, 104, 307, 314, 323, 421, 472, 474, 475, 478, 479, 480, 548, 881, 982, 1002, 1025, 1026], "base_x_train": 79, "base_x_test": 79, "coloring_matrix": [79, 80], "shrunkcovari": [79, 104, 410, 468, 469, 472, 473, 474], "empirical_covari": [79, 410, 1047], "log_likelihood": [79, 609, 610, 795, 796], "negative_loglik": 79, "real_cov": [79, 80, 469, 472, 473, 474, 475], "emp_cov": [79, 81, 83, 477, 480], "loglik_r": 79, "inv": [79, 83, 302], "formula": [79, 80, 405, 408, 410, 421, 472, 474, 515, 516, 517, 589, 642, 645, 646, 649, 650, 651, 652, 653, 654, 655, 659, 660, 661, 662, 663, 675, 677, 703, 727, 753, 762, 977, 982, 984, 988, 993, 994, 998, 1002, 1036, 1038, 1040], "asymptot": [79, 80, 190, 367, 410, 473, 535, 728, 984, 987, 1041], "criterion": [79, 80, 174, 189, 209, 252, 274, 318, 383, 390, 395, 408, 413, 440, 444, 448, 451, 458, 461, 531, 536, 538, 545, 552, 553, 556, 557, 558, 559, 563, 564, 565, 605, 626, 643, 644, 647, 655, 665, 666, 667, 668, 670, 671, 673, 675, 676, 677, 679, 690, 694, 709, 796, 897, 902, 903, 904, 905, 906, 908, 909, 910, 911, 984, 987, 988, 996, 1001, 1004, 1011, 1023, 1026, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1048], "chen": [79, 80, 410, 415, 421, 474, 724, 754, 980, 988, 1034, 1037, 1038, 1039, 1041, 1044, 1045, 1046, 1047], "Its": [79, 260, 264, 377, 383, 395, 413, 418, 537, 983, 984, 993, 996, 1002, 1008, 1013, 1034, 1048], "tuned_paramet": [79, 139, 260], "loglik_lw": 79, "loglik_oa": 79, "unseen": [79, 124, 147, 190, 205, 209, 275, 291, 343, 369, 373, 383, 394, 395, 408, 412, 846, 877, 889, 979, 988, 994, 996, 998, 1004, 1015, 1034, 1039, 1043], "loglog": [79, 234], "lik_max": 79, "amax": [79, 124], "lik_min": 79, "amin": 79, "vline": [79, 98, 188, 189, 190, 202, 262, 275, 308], "shrinkage_": [79, 80, 472, 474], "magenta": [79, 128], "purpl": [79, 93, 226], "cyan": [79, 116, 171, 296], "realli": [79, 173, 190, 385, 386, 387, 988, 994, 1013, 1045], "interestingli": [79, 150, 998], "outperform": [79, 87, 133, 280, 312, 393, 412, 415, 451, 461, 990, 998], "408": [79, 84, 1010], "plot_covariance_estim": [79, 84, 1010], "fa": [79, 95, 106, 107, 108, 168, 387, 413, 472, 475, 531, 540, 797, 822, 1010], "inspir": [80, 130, 172, 219, 381, 393, 415, 560, 561, 925, 978, 1008, 1040], "mmse": [80, 410, 421, 474], "tran": 80, "octob": [80, 376, 1031, 1038, 1044, 1045, 1047], "choleski": [80, 201, 219, 390, 470, 471, 477, 526, 610, 647, 649, 650, 653, 654, 655, 657, 658, 668, 671, 673, 679, 681, 682, 686, 795, 796, 984, 1034, 1038, 1040, 1043, 1046, 1047], "toeplitz": 80, "simul": [80, 98, 171, 195, 238, 262, 1013], "n_samples_rang": [80, 234], "lw_mse": 80, "oa_ms": 80, "lw_shrinkag": 80, "oa_shrinkag": 80, "error_norm": [80, 82, 468, 469, 470, 471, 472, 473, 474, 475], "darkorang": [80, 100, 105, 106, 202, 212, 225, 248, 249, 250, 253, 269, 271, 290, 296, 297, 328, 359], "326": [80, 84, 92, 1010], "plot_lw_vs_oa": [80, 84, 1010], "convex": [80, 106, 125, 126, 168, 179, 208, 220, 222, 348, 353, 408, 410, 413, 421, 445, 451, 461, 472, 474, 475, 478, 479, 480, 657, 675, 691, 984, 985, 991, 992, 1002, 1010, 1044], "d_": [81, 408, 413, 647, 668, 679, 776, 985, 990], "mle": [81, 104, 540, 1039, 1042], "resist": [81, 82, 381], "erron": [81, 82, 413, 984, 1032, 1039, 1043], "breakdown": [81, 82, 218, 678, 984], "n_": [81, 82, 174, 262, 320, 408, 413, 415, 645, 651, 684, 695, 980, 984, 988, 990, 991, 995, 998, 1000, 1003, 1004], "smallest": [81, 82, 201, 285, 357, 376, 408, 410, 417, 526, 540, 629, 653, 654, 655, 681, 682, 689, 693, 694, 797, 800, 801, 811, 816, 870, 1004, 1044], "pure": [81, 82, 87, 185, 201, 395, 408, 472, 478, 495, 556, 557, 558, 559, 563, 564, 565, 704, 714, 784, 793, 908, 909, 910, 911, 998], "rousseuw": [81, 82], "rousseeuw": [81, 82, 408, 410, 468, 473, 790, 791, 994], "ass": [81, 82, 410, 473], "1984": [81, 82, 410, 473, 908, 909, 1004], "wilson": [81, 378, 1031, 1034], "hilferti": 81, "1931": 81, "proceed": [81, 150, 376, 378, 408, 419, 438, 443, 510, 695, 707, 724, 754, 847, 897, 988, 1000, 1001, 1002], "academi": [81, 847], "688": 81, "n_outlier": [81, 82, 129, 204, 230, 292], "gen_cov": 81, "ey": [81, 82, 249, 253, 339, 376, 533, 540, 549], "outliers_cov": 81, "mincovdet": [81, 82, 410, 468, 469, 472, 474, 475, 994, 1031, 1038], "robust_cov": 81, "nmcd": 81, "nmle": 81, "26253567e": 81, "06695631e": 81, "22747343e": 81, "23773583": 81, "24640578": 81, "51963999": 81, "inlier": [81, 129, 204, 230, 240, 307, 395, 410, 430, 468, 562, 670, 676, 846, 877, 889, 903, 904, 906, 984, 994, 1038, 1039, 1044], "inlier_plot": 81, "outlier_plot": 81, "get_xlim": [81, 196, 206, 307], "zz": 81, "mahal_emp_cov": 81, "emp_cov_contour": 81, "pubu_r": 81, "mahal_robust_cov": 81, "robust_contour": 81, "ylorbr_r": 81, "dist": [81, 223, 234, 385, 468, 469, 470, 471, 472, 473, 474, 475, 698, 761, 767, 840, 841], "borderaxespad": 81, "cubic": [81, 418], "suggest": [81, 99, 116, 120, 171, 174, 262, 339, 367, 380, 381, 388, 395, 412, 413, 415, 468, 473, 564, 644, 825, 982, 984, 985, 993, 1003, 1024, 1035, 1042, 1045, 1048], "emp_mah": 81, "markeredgewidth": [81, 266], "rm": [81, 156, 385, 389, 410], "mahal": 81, "robust_mah": 81, "location_": [81, 82, 468, 469, 470, 471, 472, 473, 474, 475], "267": [81, 84, 1010, 1031], "plot_mahalanobis_dist": [81, 84, 1010], "ransac": [81, 168, 179, 207, 218, 220, 523, 648, 656, 670, 677, 678, 1010], "compens": [82, 170, 172, 177, 201, 219, 263, 410, 413], "soon": [82, 395, 1022], "5n_": 82, "johanna": 82, "hardin": 82, "rock": 82, "decemb": [82, 158, 376, 663, 684, 685, 1031, 1039, 1041, 1043, 1046], "928": [82, 436], "946": 82, "zoubir": 82, "koivunen": 82, "chakhchoukh": 82, "muma": 82, "tutori": [82, 139, 140, 141, 142, 190, 203, 219, 262, 370, 381, 382, 387, 389, 394, 402, 408, 451, 461, 690, 1003, 1022, 1034], "treatment": [82, 170, 375, 413, 468, 473], "concept": [82, 119, 124, 237, 271, 370, 381, 393, 407, 408, 414, 416, 980, 988, 991, 1004, 1013], "magazin": [82, 417], "29": [82, 93, 154, 158, 192, 201, 205, 218, 322, 327, 378, 379, 398, 400, 401, 415, 558, 559, 689, 693, 779, 795, 852, 984, 985, 1002], "font_manag": [82, 291, 338], "range_n_outli": 82, "err_loc_mcd": 82, "err_cov_mcd": 82, "err_loc_emp_ful": 82, "err_cov_emp_ful": 82, "err_loc_emp_pur": 82, "err_cov_emp_pur": 82, "outliers_index": 82, "outliers_offset": 82, "inliers_mask": 82, "pure_x": 82, "pure_loc": 82, "pure_emp_cov": 82, "font_prop": 82, "fontproperti": [82, 291, 338], "hat": [82, 106, 258, 262, 290, 320, 379, 406, 410, 414, 415, 979, 984, 985, 988, 990, 992], "_2": [82, 158, 343, 413, 416, 530, 536, 544, 545, 645, 651, 984, 992, 1002, 1003], "x_size": 82, "743": [82, 84, 260, 1010, 1022], "plot_robust_vs_empirical_covari": [82, 84, 1010], "graphicallasso": [83, 410, 468, 469, 471, 472, 473, 474, 475, 477, 1039, 1047], "largest": [83, 98, 119, 150, 203, 378, 408, 410, 413, 442, 526, 540, 556, 557, 558, 559, 563, 564, 587, 708, 795, 796, 816, 838, 870, 908, 909, 910, 911, 937, 985, 988, 998, 1003, 1004], "invert": [83, 101, 147, 223, 353, 354, 393, 410, 416, 629, 688, 692, 998, 1040], "fairli": [83, 125, 224, 277, 302, 389, 408, 558, 559, 698, 989, 1022], "tweak": [83, 237, 412, 954, 987, 1024, 1042], "readabl": [83, 263, 320, 386, 387, 389, 402, 533, 1040, 1043, 1044, 1045, 1046], "make_sparse_spd_matrix": [83, 528, 1048], "prng": 83, "prec": [83, 231, 526, 988], "smallest_coef": [83, 526], "largest_coef": [83, 526], "multivariate_norm": [83, 87, 247, 468, 469, 470, 471, 472, 473, 474, 475], "ledoit_wolf": [83, 410, 1044], "prec_": 83, "lw_cov_": 83, "lw_prec_": 83, "this_cov": 83, "this_prec": 83, "ma": [83, 313, 339, 984, 1037, 1042], "masked_equ": 83, "set_facecolor": [83, 247], "set_axis_bgcolor": 83, "504": [83, 84, 185, 220, 1010], "plot_sparse_cov": [83, 84, 1010], "249": [84, 195, 220, 1010], "cross_decomposit": [85, 86, 87, 88, 168, 238, 370, 1010, 1035, 1036, 1038, 1039, 1040], "plscanon": [86, 481, 483, 484, 1011, 1026, 1035, 1039, 1041, 1043, 1045], "plsregress": [86, 87, 1011, 1026, 1038, 1041, 1043, 1045, 1047], "appar": [86, 990, 1013], "scatterplot": [86, 180, 262], "maxim": [86, 87, 91, 96, 107, 126, 180, 252, 253, 263, 267, 271, 272, 295, 312, 319, 339, 343, 357, 361, 378, 395, 405, 408, 411, 413, 417, 418, 548, 593, 609, 610, 643, 644, 647, 668, 678, 679, 719, 797, 800, 801, 811, 869, 875, 885, 982, 984, 987, 988, 991, 993, 1003, 1019, 1022, 1034, 1036, 1041, 1044, 1046], "weak": [86, 124, 127, 205, 219, 268, 412, 556, 557, 558, 563, 564, 565, 629, 991, 1013, 1047], "var": [86, 87, 102, 116, 150, 181, 262, 378, 382, 417, 640, 644, 902, 903, 904, 905, 906, 988, 1039], "corr": [86, 174, 262], "corrcoef": [86, 107], "plsca": [86, 482], "x_train_r": 86, "y_train_r": 86, "x_test_r": 86, "y_test_r": 86, "221": [86, 131, 1034], "222": [86, 131, 1003], "223": [86, 131, 150, 161, 163, 352, 378, 1010], "yj": [86, 311], "noiz": 86, "xb": [86, 879], "11693539": 86, "19803308": 86, "12190903": 86, "77322639": 86, "77777215": 86, "04995982": 86, "34990341": 86, "37257991": 86, "27597342": 86, "95433992": 86, "9403917": 86, "02818216": 86, "06880943": 86, "08604995": 86, "05216586": 86, "72295655": 86, "70432034": 86, "79769376": 86, "exce": [86, 283, 318, 418, 441, 514, 601, 648, 657, 1040, 1043, 1045], "201": [86, 88, 125, 150, 378, 583, 1010], "plot_compare_cross_decomposit": [86, 88, 1010], "multilabel": [86, 89, 94, 168, 229, 245, 269, 280, 282, 284, 329, 376, 383, 384, 395, 403, 481, 486, 495, 496, 507, 508, 514, 522, 540, 556, 563, 566, 657, 673, 674, 702, 706, 712, 724, 727, 728, 732, 733, 736, 737, 752, 754, 781, 782, 785, 786, 792, 794, 826, 829, 831, 833, 857, 864, 867, 871, 873, 884, 905, 908, 910, 926, 950, 951, 952, 999, 1010, 1011, 1012, 1024, 1026, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1047], "pcr": [87, 411], "pl": [87, 205, 378, 411, 481, 482, 483, 484, 1036], "greedili": [87, 150, 408, 412, 417, 459], "despit": [87, 199, 201, 219, 236, 294, 395, 399, 410, 626, 627, 629, 984, 991, 1013, 1039, 1040], "suffer": [87, 121, 173, 285, 307, 353, 367, 408, 415, 543, 761, 983, 984, 988, 991, 1023, 1040], "dive": [87, 381, 387], "explained_variance_": [87, 533, 540, 543, 1023, 1038], "onto": [87, 223, 224, 235, 307, 393, 413, 416, 420, 445, 447, 460, 532, 538, 542, 626, 627, 629, 687, 982, 986, 991], "recommend": [87, 121, 165, 218, 231, 237, 258, 271, 311, 319, 343, 367, 368, 370, 375, 379, 381, 383, 387, 389, 393, 398, 411, 412, 413, 415, 417, 437, 446, 448, 450, 459, 495, 507, 534, 537, 543, 548, 560, 561, 568, 581, 582, 588, 605, 610, 630, 631, 637, 669, 675, 691, 696, 697, 699, 701, 803, 809, 811, 819, 856, 863, 865, 872, 879, 880, 885, 886, 888, 889, 890, 891, 893, 902, 905, 937, 956, 977, 985, 988, 990, 992, 995, 998, 1000, 1002, 1003, 1004, 1007, 1013, 1026, 1033, 1034, 1040, 1041, 1042, 1043, 1045, 1047], "linearregress": [87, 136, 170, 180, 191, 196, 197, 198, 199, 204, 207, 218, 233, 237, 239, 258, 276, 308, 363, 381, 393, 394, 409, 415, 464, 569, 631, 634, 645, 648, 651, 653, 670, 671, 686, 984, 988, 998, 1022, 1035, 1036, 1040, 1043, 1044, 1045, 1047], "retriev": [87, 171, 205, 269, 353, 361, 385, 395, 413, 416, 417, 467, 495, 589, 592, 593, 625, 652, 662, 683, 698, 724, 728, 730, 731, 754, 779, 835, 839, 872, 898, 984, 986, 988, 990, 1008, 1009, 1023, 1036, 1041, 1043, 1045, 1048], "026": 87, "predit": 87, "pca_2": 87, "673": [87, 216, 220, 387, 1010], "512": [87, 88, 200, 1010], "plot_pcr_vs_pl": [87, 88, 1010], "713": 88, "051": [90, 94, 471, 1010], "plot_digits_last_imag": [90, 94, 1010], "iris": [91, 268, 269, 1021], "150x4": 91, "legend_el": [91, 129, 214, 265, 288, 343], "flower": [91, 105, 271, 505, 506, 988, 1008], "versicolor": [91, 271, 272, 503], "differenti": [91, 269, 415, 418, 558, 559, 618, 621], "unus": [91, 102, 103, 172, 198, 222, 224, 462, 578, 761, 769, 977, 985, 1031, 1039, 1041, 1042, 1044, 1046], "3rd": [91, 161, 835, 878, 990, 998], "eigenvalu": [91, 252, 405, 408, 410, 451, 461, 468, 469, 470, 471, 472, 473, 474, 475, 534, 540, 548, 672, 687, 688, 690, 692, 694, 866, 980, 985, 998, 1033, 1037, 1040, 1041, 1042, 1043], "plot_iris_dataset": [91, 94, 1010], "easi": [92, 172, 209, 219, 250, 260, 262, 339, 352, 363, 376, 387, 389, 393, 394, 408, 415, 499, 503, 509, 867, 977, 983, 987, 995, 998, 1008, 1009, 1013, 1024, 1041, 1046, 1047], "make_gaussian_quantil": [92, 113, 115, 377, 469, 473, 474, 475, 519], "321": [92, 206, 220, 354, 355, 1010], "y2": [92, 115, 715, 989], "324": [92, 135, 137, 376, 1010], "325": 92, "312": [92, 94, 268, 278, 1010, 1034], "plot_random_dataset": [92, 94, 1010], "make_multilabel_classif": [93, 238, 377, 514, 535, 786, 831, 832, 988, 1033, 1034, 1036, 1042], "degener": [93, 248, 420, 439, 453, 532, 719, 984, 988, 1040, 1044, 1045], "vocabulari": [93, 216, 352, 353, 393, 416, 587, 588, 589, 590, 990, 1015, 1024, 1031, 1033, 1036, 1039, 1042, 1044], "w0": 93, "w1": [93, 415, 656], "make_ml_clf": 93, "ff3333": 93, "0198e1": 93, "bf5fff": 93, "fcd116": 93, "ff7216": 93, "4dbd33": 93, "87421f": 93, "plot_2d": [93, 222], "p_c": [93, 522], "p_w_c": [93, 522], "allow_unlabel": [93, 238, 522], "return_distribut": [93, 522], "sep": [93, 271], "p_w": 93, "plot_random_multilabel_dataset": [93, 94, 1010], "666": [94, 156, 330, 408, 842, 978], "blind": [95, 98, 108, 168, 200, 352, 413, 532, 540, 1010], "fastica": [95, 108, 168, 200, 413, 531, 534, 540, 1010, 1023, 1031, 1033, 1039, 1045, 1046], "precomput": [95, 96, 97, 108, 168, 179, 200, 220, 225, 237, 285, 287, 297, 383, 390, 393, 395, 408, 416, 419, 431, 439, 440, 443, 444, 445, 449, 451, 456, 464, 470, 481, 482, 483, 523, 530, 534, 536, 539, 541, 547, 553, 555, 557, 559, 561, 564, 567, 569, 609, 610, 619, 634, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 669, 671, 672, 677, 678, 680, 681, 683, 684, 687, 689, 690, 691, 695, 772, 776, 779, 790, 791, 833, 834, 842, 843, 844, 846, 847, 848, 850, 851, 852, 858, 901, 902, 903, 904, 905, 906, 909, 911, 964, 965, 966, 980, 986, 991, 1003, 1009, 1010, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1045, 1046, 1047], "olivetti": [96, 121, 374, 413, 494, 1026, 1031, 1039], "chapter": [96, 363, 383, 408, 413, 415, 418, 529, 531, 533, 613, 618, 621, 642, 978, 981, 984, 1003, 1004], "decompos": [96, 100, 116, 309, 407, 533, 537, 708, 821, 937, 983, 984, 988, 1005, 1025, 1026], "basicconfig": 96, "asctim": 96, "levelnam": 96, "faces_cent": 96, "image_shap": [96, 239], "constrained_layout": [96, 172, 222, 313, 314, 322], "set_constrained_layout_pad": 96, "w_pad": [96, 122, 358], "h_pad": [96, 122, 358], "set_edgecolor": 96, "vec": [96, 416, 537, 539, 546], "im": [96, 107, 273, 289, 1012], "pad": [96, 122, 165, 172, 222, 240, 352, 358, 416, 587, 588, 590], "initialis": [96, 537, 539, 546, 1031, 1039, 1040], "mathbb": [96, 116, 156, 411, 988, 995, 1003], "4096": [96, 376, 413, 494], "human": [96, 172, 352, 402, 408, 413, 857, 858, 988, 995, 1040], "friendli": [96, 368, 381, 389, 413, 893, 1000, 1001, 1008, 1009], "visualis": [96, 99, 107, 238, 543, 798, 799, 802, 814, 815, 816, 817, 818, 991, 1009], "64x64": [96, 376, 413], "singular": [96, 390, 405, 408, 411, 450, 452, 481, 482, 483, 484, 520, 523, 533, 537, 539, 540, 543, 546, 548, 549, 656, 671, 672, 673, 686, 937, 984, 985, 987, 1025, 1026, 1037, 1038], "scalar": [96, 320, 387, 395, 409, 418, 420, 463, 466, 523, 532, 614, 615, 616, 621, 622, 626, 627, 736, 740, 916, 924, 980, 992, 994, 998, 1002, 1008, 1041, 1042, 1045, 1047], "noise_variance_": [96, 189, 531, 533, 540, 655, 1038, 1045], "pixelwis": 96, "pca_estim": 96, "nmf_estim": 96, "multivari": [96, 171, 373, 410, 413, 416, 472, 515, 516, 517, 626, 627, 628, 629, 648, 670, 677, 678, 835, 836, 837, 838, 839, 982, 984, 987, 990, 1008, 1015, 1023, 1026], "subcompon": [96, 413], "ica_estim": 96, "15e": 96, "sparsepca": [96, 530, 532, 533, 534, 536, 538, 539, 540, 541, 544, 545, 1031, 1038, 1039, 1041, 1042, 1044, 1045, 1046], "batch_pca_estim": 96, "minibatchdictionarylearn": [96, 99, 369, 413, 530, 537, 541, 544, 545, 1032, 1034, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "batch_dict_estim": 96, "enhanc": [96, 205, 380, 381, 385, 393, 395, 408, 988, 1006, 1029, 1030, 1031, 1032, 1033, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "consum": [96, 363, 375, 383, 395, 399, 408, 412, 415, 448, 800, 801, 860, 861, 944, 945, 984, 1013, 1036, 1048], "kmeans_estim": 96, "factoranalysi": [96, 104, 107, 413, 543, 1032, 1034, 1043, 1045], "heteroscedast": [96, 104, 126, 203, 413, 876, 888], "fa_estim": 96, "wrap": [96, 118, 126, 285, 375, 383, 395, 432, 507, 584, 585, 656, 675, 826, 884, 978, 988, 991, 1003, 1008, 1031, 1036, 1039, 1041, 1042, 1044, 1046], "colormap": [96, 115, 161, 193, 210, 339, 344, 358, 696, 1044], "uv": [96, 413], "x_1": [96, 145, 156, 198, 202, 411, 413, 415, 418, 612, 624, 656, 873, 900, 901, 984, 990, 992, 998, 1002], "x_n": [96, 413, 900, 901, 990, 992, 1002], "dict_pos_dict_estim": 96, "positive_dict": [96, 530, 536, 544, 545], "dict_pos_code_estim": 96, "fit_algorithm": [96, 530, 536, 1046, 1047], "cd": [96, 150, 378, 379, 381, 385, 387, 413, 470, 471, 477, 530, 536, 538, 539, 542, 544, 545, 546, 984, 1024, 1036, 1046], "positive_cod": [96, 530, 536, 541, 544, 545], "dict_pos_estim": 96, "704": [96, 108, 352, 1010], "plot_faces_decomposit": [96, 108, 1010], "imagin": [97, 153, 237, 343, 412, 413, 416, 984], "plai": [97, 127, 155, 184, 210, 256, 296, 335, 336, 367, 393, 1024], "microphon": 97, "s1": [97, 150, 161, 189, 190, 378, 1023], "sinusoid": [97, 114, 126, 185, 236, 981, 1023], "s2": [97, 150, 161, 189, 190, 378, 549, 1023], "sawtooth": [97, 1023], "saw": [97, 202, 205, 1023], "tooth": [97, 1023], "s_": [97, 266, 985, 996, 998, 1023], "a_": [97, 405, 408, 537, 539, 546, 984, 1023], "mixing_": [97, 98, 532, 1023], "prove": [97, 1013], "revert": [97, 629, 631, 632, 1038, 1043], "unmix": [97, 420, 532], "allclos": [97, 130, 1000, 1023], "mean_": [97, 266, 531, 532, 533, 538, 540, 542, 880, 998, 1023, 1039], "steelblu": [97, 98, 135], "sig": 97, "347": [97, 108, 1010], "plot_ica_blind_source_separ": [97, 108, 1010], "gpr": [97, 152, 153, 154, 160, 161, 162, 163, 168, 495, 609, 610, 612, 613, 614, 615, 620, 621, 622, 623, 624, 1010, 1011, 1026, 1041], "ica": [98, 407, 420, 1004, 1025, 1026], "geometr": [98, 408, 687, 703, 729, 755, 985, 1039], "standard_t": 98, "s_pca_": 98, "s_ica_": 98, "plot_sampl": [98, 253], "axis_list": 98, "x_axi": [98, 209, 266], "y_axi": [98, 209], "quiver": 98, "hline": 98, "set_zord": 98, "plot_ica_vs_pca": [98, 108, 1010], "ordinari": [98, 116, 168, 179, 180, 183, 185, 191, 197, 203, 204, 206, 218, 220, 320, 634, 645, 651, 653, 654, 655, 656, 671, 677, 681, 682, 686, 1002, 1010, 1011, 1026], "firstli": [99, 367, 393, 656, 1024], "undistort": 99, "noiseless": [99, 986], "omp": [99, 106, 200, 413, 530, 536, 541, 547, 663, 664, 684, 685, 1011, 1026, 1031, 1039], "promin": [99, 395], "reminisc": 99, "downsampl": 99, "075": [99, 265, 278, 353, 1010], "show_with_diff": 99, "puor": 99, "22692": 99, "dico": 99, "n_steps_": [99, 448, 536, 537, 1044], "reconstruct_from_patches_2d": [99, 416, 582], "intercept": [99, 193, 210, 218, 348, 395, 481, 482, 483, 548, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 686, 875, 879, 882, 900, 901, 907, 984, 986, 988, 993, 1002, 1003, 1034, 1036, 1040, 1041], "transform_algorithm": [99, 106, 530, 536, 541, 1047], "n1": 99, "atom": [99, 106, 413, 530, 536, 538, 541, 542, 544, 545, 652, 662, 683, 984, 1031, 1044], "transform_n_nonzero_coef": [99, 106, 530, 536, 541], "n2": 99, "n4": 99, "transform_alpha": [99, 106, 530, 536, 541, 1044], "set_param": [99, 107, 117, 123, 126, 172, 173, 181, 189, 190, 194, 205, 209, 235, 240, 275, 288, 317, 342, 353, 384, 395, 408, 409, 415, 418, 422, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 795, 796, 797, 800, 801, 811, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 978, 994, 1015, 1022, 1031, 1037, 1038, 1039, 1044, 1045], "857": [99, 108, 263, 353, 1010], "plot_image_denois": [99, 108, 1010], "ipca": [100, 532, 533], "flip": [100, 581, 740, 937, 990, 1035, 1044], "incrementalpca": [100, 369, 413, 532, 534, 538, 540, 543, 1035, 1038, 1039, 1041, 1042, 1045], "x_ipca": 100, "x_pca": 100, "turquois": [100, 105, 106, 128, 207, 218, 225, 249, 250, 269], "x_transform": [100, 131, 237, 484, 530, 531, 532, 533, 534, 536, 538, 542, 565, 637, 638, 687, 688, 689, 690], "nmean": 100, "shadow": [100, 105, 106, 225, 328, 346, 354, 416], "scatterpoint": [100, 105, 225, 249, 328], "226": [100, 108, 408, 419, 443, 1010], "plot_incremental_pca": [100, 108, 1010], "nest": [101, 113, 168, 190, 237, 255, 257, 278, 280, 368, 387, 395, 398, 408, 412, 418, 422, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 461, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 503, 518, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 795, 796, 797, 800, 801, 802, 811, 822, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 977, 988, 991, 1010, 1031, 1032, 1035, 1037, 1038, 1039, 1045], "train_ax": 101, "test_ax": 101, "straight": [101, 191, 197, 199, 259, 343, 367], "inner": [101, 126, 263, 267, 283, 328, 367, 416, 442, 513, 581, 588, 647, 668, 679, 773, 775, 980, 988, 998, 1003, 1032, 1035, 1045], "x_test_kernel_pca": 101, "orig_data_ax": 101, "pca_proj_ax": 101, "kernel_pca_proj_ax": 101, "unfold": [101, 384, 985], "untangl": 101, "mind": [101, 170, 171, 172, 219, 311, 312, 352, 353, 363, 381, 402, 410, 412, 415, 645, 646, 703, 984, 1003, 1008, 1015, 1022], "investig": [101, 107, 113, 166, 347, 381, 984], "pca_back_proj_ax": 101, "kernel_pca_back_proj_ax": 101, "reli": [101, 119, 123, 150, 174, 189, 190, 280, 285, 318, 322, 352, 367, 368, 383, 386, 389, 390, 393, 395, 404, 405, 408, 413, 415, 416, 548, 584, 585, 592, 596, 606, 607, 824, 827, 865, 954, 977, 980, 982, 984, 988, 991, 998, 1003, 1013, 1039, 1040, 1041, 1045, 1047, 1048], "analyt": [101, 413, 418, 531, 619, 707, 978, 982, 988, 1007, 1013], "kernelridg": [101, 153, 236, 671, 981, 1035], "kernal": 101, "relianc": [101, 205], "546": [101, 108, 354, 1010], "plot_kernel_pca": [101, 108, 1010], "aid": [102, 259, 408, 790, 791, 985, 1013, 1031, 1043], "kevin": [102, 642, 1033, 1035, 1037, 1038, 1041, 1042, 1043, 1045, 1046], "hugh": [102, 875, 1033, 1044], "pdf": [102, 150, 262, 290, 307, 378, 381, 408, 417, 441, 448, 530, 533, 536, 540, 640, 643, 648, 657, 663, 665, 666, 670, 675, 678, 681, 682, 684, 685, 691, 837, 838, 849, 856, 893, 895, 984, 1001, 1004, 1012, 1027, 1031], "30000": [102, 376], "pdf_z": 102, "plot_fig": [102, 198], "fig_num": [102, 198], "pca_scor": [102, 104], "vt": [102, 549], "full_matric": 102, "x_pca_axi": 102, "y_pca_axi": 102, "z_pca_axi": 102, "x_pca_plan": 102, "y_pca_plan": 102, "z_pca_plan": 102, "plot_surfac": [102, 172, 198], "plot_pca_3d": [102, 108, 1010], "1d": [102, 114, 116, 168, 172, 202, 234, 286, 289, 298, 299, 312, 346, 359, 381, 388, 390, 394, 395, 409, 414, 463, 466, 616, 632, 652, 656, 659, 662, 683, 702, 711, 712, 718, 727, 728, 732, 736, 740, 781, 782, 785, 794, 842, 843, 844, 845, 846, 848, 850, 851, 852, 865, 916, 920, 921, 951, 975, 989, 1010, 1015, 1022, 1031, 1036, 1037, 1038, 1040, 1044, 1045], "cla": 103, "080": [103, 108, 292, 299, 1010], "plot_pca_iri": [103, 108, 1010], "homoscedast": [104, 233, 311, 988, 1039], "succe": [104, 185], "subspac": [104, 411, 415, 451, 514, 554, 555, 690, 694, 937, 982, 991, 994, 1000, 1013, 1023], "overestim": [104, 363, 412], "circumst": [104, 219, 991, 1008], "nip": [104, 378, 514, 540, 565, 640, 988], "604": [104, 540], "minka": [104, 540, 984], "deni": [104, 1033, 1034, 1038, 1039, 1040, 1046, 1047], "engemann": [104, 1033, 1034, 1038], "x_homo": 104, "x_hetero": 104, "fa_scor": 104, "shrunk_cov_scor": 104, "lw_score": 104, "n_components_pca": 104, "n_components_fa": 104, "n_components_pca_ml": 104, "axhlin": [104, 139, 191, 261, 265], "violet": [104, 1047], "plot_pca_vs_fa_model_select": [104, 108, 1010], "92461872": 105, "05306648": 105, "x_r": [105, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602], "x_r2": 105, "plot_pca_vs_lda": [105, 108, 1010], "ricker": 106, "sparsecod": [106, 413, 530, 536, 539, 547, 1038, 1039, 1041, 1043, 1045], "mexican": 106, "piecewis": [106, 320, 405, 979, 984, 998, 1004], "matter": [106, 253, 343, 363, 408, 409, 415, 566, 667, 675, 677, 984, 1035], "motiv": [106, 381, 383, 395, 980, 988, 998, 1013, 1044], "heavier": [106, 410, 984], "ricker_funct": 106, "ricker_matrix": 106, "d_fix": 106, "d_multi": 106, "first_quart": 106, "transform_n_nozero_coef": 106, "lasso_lar": [106, 530, 536, 541, 547, 1041], "n_nonzero": 106, "coder": [106, 541, 715], "flatnonzero": [106, 189, 261, 270, 271, 779], "soft": [106, 134, 135, 381, 395, 568, 569, 896, 904, 1002, 1013, 1036], "debias": 106, "lstsq": [106, 381, 656, 669], "rcond": 106, "264": [106, 108, 1010], "plot_sparse_cod": [106, 108, 1010], "uncov": [107, 694], "inher": [107, 196, 363, 408, 413, 978, 980, 982, 983, 985, 989], "varimax": [107, 413, 531, 1043], "jona": [107, 1043], "sassenhagen": [107, 1043], "set_yticklabel": [107, 156, 165, 166, 174, 273, 354], "n_comp": [107, 177], "unrot": 107, "52106591": 107, "37741762": 107, "26934744": 107, "92329566": 107, "5804131": 107, "02449161": 107, "56485654": 107, "06694199": 107, "88096009": 107, "4472869": 107, "41691605": 107, "55390036": 107, "99918858": 107, "01915283": 107, "96228895": 107, "05840206": 107, "98633022": 107, "05752333": 107, "16052385": 107, "67443065": 107, "90809432": 107, "41726413": 107, "85857475": 107, "43847489": 107, "405": [107, 108, 353, 1010], "plot_varimax_fa": [107, 108, 1010], "265": [108, 145, 151, 733, 835, 839, 990, 1010], "custom": [109, 147, 149, 168, 184, 210, 231, 235, 241, 255, 261, 263, 266, 269, 270, 274, 278, 287, 292, 296, 317, 334, 336, 337, 339, 340, 342, 350, 352, 354, 373, 376, 379, 383, 388, 389, 390, 393, 394, 395, 407, 408, 409, 412, 418, 467, 488, 492, 493, 501, 503, 537, 539, 546, 548, 556, 557, 563, 564, 570, 572, 601, 630, 689, 698, 712, 797, 826, 864, 898, 905, 972, 977, 982, 988, 991, 1008, 1009, 1010, 1013, 1024, 1026, 1031, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1046, 1047, 1048], "developing_estim": [110, 1010], "sklearn_is_fit": [110, 111, 1010], "convent": [111, 262, 370, 381, 383, 384, 385, 387, 395, 426, 427, 430, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 468, 469, 470, 471, 472, 473, 474, 475, 507, 508, 530, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 546, 562, 565, 568, 569, 580, 581, 582, 587, 588, 590, 626, 627, 628, 629, 676, 687, 688, 689, 690, 717, 795, 796, 828, 829, 844, 846, 848, 852, 864, 872, 875, 876, 878, 881, 892, 893, 904, 931, 932, 988, 1016, 1031, 1038, 1039, 1042, 1044, 1045, 1047, 1048], "subclass": [111, 383, 418, 573, 954, 1036, 1039, 1044], "showcas": [111, 383], "statu": [111, 162, 375, 385, 398, 495, 840, 841], "_is_fit": 111, "snippet": [111, 363, 381, 386, 389, 393, 404, 415, 416, 417, 978, 998, 1012, 1044], "customestim": 111, "classifiermixin": [111, 237, 381, 383, 395, 412, 1042], "kushan": 111, "kushansharma1": 111, "classes_": [111, 193, 210, 231, 237, 271, 326, 327, 381, 383, 395, 436, 437, 548, 549, 550, 552, 554, 556, 558, 560, 563, 566, 568, 592, 593, 609, 630, 657, 658, 665, 667, 673, 674, 675, 696, 699, 701, 786, 797, 800, 801, 811, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 842, 847, 850, 857, 860, 867, 868, 871, 881, 895, 896, 897, 900, 902, 905, 908, 910, 913, 988, 999, 1002, 1032, 1035, 1036, 1038, 1041, 1043], "track": [111, 117, 125, 327, 381, 384, 385, 404, 533, 989, 1008, 1009, 1038, 1041], "notfittederror": [111, 395, 849, 972, 1035, 1037, 1040, 1041, 1047, 1048], "logic": [111, 368, 382, 383, 388, 404, 415, 1004, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "boolean": [111, 361, 376, 381, 383, 390, 409, 415, 416, 417, 463, 560, 561, 580, 581, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 628, 631, 632, 635, 648, 670, 698, 829, 835, 856, 863, 883, 916, 972, 978, 984, 990, 995, 998, 1004, 1031, 1034, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1045, 1046], "isolationforest": [112, 115, 137, 168, 204, 230, 240, 277, 307, 630, 826, 904, 994, 1010, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1046, 1047], "oob": [112, 113, 125, 137, 168, 415, 514, 563, 1009, 1010, 1033, 1044, 1048], "vote": [112, 119, 126, 132, 133, 134, 135, 137, 168, 197, 283, 343, 395, 396, 407, 500, 554, 555, 556, 559, 563, 564, 568, 569, 656, 828, 842, 843, 848, 850, 989, 991, 1010, 1011, 1022, 1026, 1031, 1034, 1036, 1041], "experi": [113, 156, 160, 170, 171, 172, 173, 177, 203, 280, 312, 347, 353, 354, 368, 375, 381, 384, 407, 412, 514, 726, 783, 984, 989, 1000, 1006, 1007, 1008, 1013, 1022, 1024], "depict": [113, 264, 415, 987], "zhu": [113, 415, 518, 552, 657, 895], "principl": [113, 160, 290, 354, 381, 393, 395, 396, 412, 415, 937, 977, 987, 991, 1002, 1038], "repeatedli": [113, 321, 363, 395, 408, 415, 418, 507, 545, 665, 666, 675, 676, 677, 779, 978, 992, 1019], "zou": [113, 189, 415, 518, 552, 655, 984, 1002], "rosset": [113, 415, 518, 552], "hasti": [113, 116, 117, 124, 128, 150, 189, 261, 378, 412, 415, 518, 519, 552, 558, 559, 627, 655, 720, 721, 722, 830, 847, 893, 908, 909, 978, 982, 984, 989, 995, 1000, 1002, 1004], "2009": [113, 116, 117, 128, 185, 408, 412, 413, 415, 416, 518, 519, 527, 530, 536, 537, 539, 540, 543, 546, 552, 558, 559, 634, 670, 678, 695, 831, 908, 909, 936, 937, 984, 988, 989, 995, 1004], "349": [113, 387, 552], "360": [113, 552], "sphere": [113, 168, 221, 222, 225, 226, 227, 228, 285, 353, 414, 518, 588, 687, 688, 689, 690, 691, 762, 923, 982, 986, 991, 1010], "roughli": [113, 126, 190, 253, 272, 285, 312, 367, 395, 413, 416, 518, 985, 1031], "2_000": 113, "percent": [113, 491, 599, 1001], "predecessor": [113, 449, 455, 456], "mistak": [113, 147, 327, 363, 408, 412, 733, 871, 885, 886, 888, 889, 890, 891, 984, 989], "incorrect": [113, 170, 269, 329, 363, 381, 408, 606, 607, 631, 632, 732, 1031, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "consecut": [113, 202, 406, 412, 416, 442, 446, 448, 449, 451, 455, 458, 461, 536, 537, 538, 545, 601, 644, 665, 666, 667, 675, 676, 677, 795, 796, 802, 835, 836, 837, 838, 839, 857, 858, 977, 998, 1024, 1039], "weak_learn": 113, "max_leaf_nod": [113, 119, 128, 201, 320, 361, 415, 556, 557, 558, 559, 560, 561, 563, 564, 565, 908, 909, 910, 911, 1034, 1040, 1042], "adaboost_clf": 113, "misclassification_error": 113, "dummyclassifi": [113, 265, 551, 988, 1032, 1034, 1035, 1036, 1038, 1039, 1040, 1041], "preval": [113, 317, 395, 699, 711, 988], "dummi": [113, 114, 201, 219, 237, 265, 370, 383, 386, 403, 873, 882, 998, 1004, 1026, 1032, 1034, 1035, 1036, 1038], "dummy_clf": [113, 550], "weak_learners_misclassification_error": 113, "dummy_classifiers_misclassification_error": 113, "475": 113, "surpass": [113, 343, 857, 858], "staged_predict": [113, 127, 415, 552, 553, 558, 559, 560, 561, 1031, 1043], "conclud": [113, 171, 181, 219, 262, 354, 363, 396, 860], "boosting_error": 113, "missclassif": 113, "jitter": [113, 649, 653, 1042], "stagewis": 113, "estimator_errors_": [113, 552, 553], "estimator_weights_": [113, 552, 553], "weak_learners_info": 113, "layout": [113, 307, 393, 900, 901, 902, 905, 921, 1003, 1034, 1036, 1048], "get_figur": 113, "reweight": [113, 353, 395, 410, 415, 589, 590, 647, 668, 679], "formul": [113, 153, 162, 205, 271, 381, 410, 413, 416, 418, 421, 474, 548, 549, 556, 563, 649, 650, 653, 654, 655, 657, 658, 664, 669, 761, 767, 796, 902, 905, 908, 910, 984, 988, 989, 998, 1011, 1026], "mathemat": [113, 171, 189, 218, 265, 373, 378, 381, 395, 397, 410, 413, 414, 418, 548, 549, 556, 563, 634, 645, 655, 790, 791, 796, 858, 902, 905, 908, 910, 984, 988, 998, 1000, 1011, 1013, 1022, 1026, 1045], "th": [113, 240, 320, 361, 394, 408, 412, 415, 423, 440, 444, 450, 452, 458, 462, 471, 556, 557, 558, 559, 560, 561, 563, 564, 565, 592, 593, 631, 647, 648, 668, 670, 679, 695, 717, 778, 818, 881, 925, 978, 984, 988, 992, 995, 1002, 1003, 1046], "boil": [113, 384, 410], "forc": [113, 153, 186, 205, 285, 311, 352, 375, 379, 385, 403, 412, 415, 449, 456, 495, 605, 608, 645, 646, 651, 652, 656, 659, 660, 661, 662, 671, 672, 673, 680, 683, 686, 752, 776, 779, 840, 841, 842, 843, 844, 846, 848, 850, 851, 852, 902, 903, 904, 905, 906, 918, 920, 921, 998, 1026, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1047], "225": [113, 137, 415, 1010], "plot_adaboost_multiclass": [113, 137, 1010], "299": [114, 679], "drucker": [114, 415, 553], "1997": [114, 376, 413, 415, 534, 553, 689, 693, 984, 985, 988], "decisiontreeregressor": [114, 116, 241, 308, 317, 323, 359, 360, 386, 553, 555, 557, 558, 559, 561, 563, 564, 631, 632, 908, 911, 913, 932, 978, 1004, 1032, 1033, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "adaboostregressor": [114, 399, 415, 552, 561, 1033, 1034, 1037, 1040, 1041, 1044, 1046, 1047], "regr_1": [114, 359, 360], "regr_2": [114, 359, 360], "y_1": [114, 359, 360, 411, 988, 992, 1002], "y_2": [114, 359, 360, 992], "443": [114, 137, 1010], "plot_adaboost_regress": [114, 137, 1010], "stump": [115, 415, 558, 1042], "puriti": [115, 912, 914], "circleci": [115, 157, 159, 161, 162, 193, 210, 248, 304, 344, 358, 381], "plot_adaboost_twoclass": [115, 137, 1010], "bdt": 115, "plot_color": [115, 358], "br": 115, "plot_step": [115, 122, 358], "class_nam": [115, 256, 881, 912, 913, 914, 1004, 1047], "xx0": [115, 630], "xx1": [115, 630], "twoclass_output": 115, "plot_rang": 115, "irreduc": [116, 988], "dark": [116, 171, 339, 376, 1048], "light": [116, 376], "beam": [116, 1031], "pointwis": [116, 160, 419, 443], "offset": [116, 177, 393, 410, 413, 468, 507, 508, 562, 631, 632, 640, 641, 643, 644, 676, 726, 773, 775, 846, 904, 988, 1002, 1022, 1039], "bootstrap": [116, 117, 125, 165, 265, 274, 319, 412, 415, 553, 554, 555, 556, 557, 562, 563, 564, 926, 959, 984, 1031, 1032, 1034, 1036, 1039, 1041, 1044], "stem": [116, 173, 200, 253, 412, 416, 980, 990], "tibshirani": [116, 117, 128, 150, 189, 261, 378, 412, 415, 519, 558, 559, 627, 655, 720, 721, 722, 830, 847, 908, 909, 978, 982, 984, 989, 995, 1004], "friedman": [116, 117, 128, 261, 410, 412, 415, 477, 515, 516, 517, 519, 557, 558, 559, 564, 592, 593, 830, 908, 909, 911, 982, 984, 989, 995, 1004], "springer": [116, 117, 128, 261, 406, 408, 412, 413, 415, 519, 534, 558, 559, 689, 693, 695, 704, 719, 724, 738, 739, 754, 795, 908, 909, 985, 988, 989, 995, 1004], "0255": 116, "0003": 116, "0152": 116, "0098": 116, "0196": 116, "0004": [116, 312], "0092": 116, "baggingregressor": [116, 399, 415, 554, 911, 978, 1034, 1037, 1039, 1042, 1046, 1047], "n_repeat": [116, 120, 127, 149, 171, 173, 174, 262, 280, 317, 412, 514, 633, 812, 813, 996], "knn": [116, 134, 141, 165, 288, 293, 294, 297, 312, 319, 328, 352, 415, 601, 849, 895, 896, 991, 1001, 1022, 1037], "y_predict": [116, 383, 1031], "y_error": [116, 207], "y_nois": 116, "y_bia": 116, "y_var": 116, "plot_bias_vari": [116, 137, 1010], "z_i": [117, 992], "y_i": [117, 320, 347, 406, 415, 979, 980, 984, 988, 992, 1002, 1003, 1004], "whilst": [117, 224], "practition": [117, 205], "suitabl": [117, 126, 185, 187, 205, 302, 354, 375, 376, 387, 390, 408, 413, 416, 451, 461, 467, 486, 504, 507, 626, 634, 835, 836, 839, 874, 875, 898, 953, 982, 984, 987, 998, 1000, 1002, 1008, 1012, 1024, 1045, 1046], "ed": [117, 128, 408, 415, 519, 558, 559, 1000, 1031, 1038], "p592": 117, "593": [117, 170, 175, 1010], "kian": [117, 1036, 1046, 1047], "ho": [117, 415, 554, 555, 988, 1036, 1039, 1040, 1045], "hui": [117, 189, 537, 539, 546, 655, 984], "ordereddict": 117, "warm_start": [117, 157, 194, 320, 383, 387, 395, 415, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 609, 645, 647, 648, 651, 657, 659, 661, 665, 666, 667, 668, 675, 676, 677, 679, 795, 796, 849, 857, 858, 994, 1011, 1026, 1031, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1045, 1047], "disabl": [117, 314, 352, 379, 381, 399, 416, 448, 459, 467, 536, 537, 538, 545, 558, 559, 560, 561, 859, 898, 920, 921, 998, 1037, 1040, 1044, 1046], "trajectori": 117, "ensemble_clf": 117, "oob_scor": [117, 415, 554, 555, 556, 557, 563, 564, 1036, 1038], "log2": [117, 211, 242, 556, 557, 558, 559, 563, 564, 908, 909, 910, 911, 989], "error_r": 117, "min_estim": 117, "max_estim": 117, "oob_error": 117, "oob_score_": [117, 554, 555, 556, 557, 558, 559, 563, 564, 1033, 1047], "clf_err": 117, "plot_ensemble_oob": [117, 137, 1010], "betatim": [118, 132, 1046], "leak": [118, 267, 352, 363, 409, 412, 860, 885, 886, 888, 889, 890, 891, 998, 1031, 1038, 1041, 1047, 1048], "80_000": 118, "x_full_train": 118, "y_full_train": 118, "x_train_ensembl": 118, "x_train_linear": 118, "y_train_ensembl": 118, "y_train_linear": 118, "gradientboostingclassifi": [118, 124, 125, 128, 309, 363, 393, 552, 560, 631, 632, 989, 995, 1031, 1032, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "random_forest": 118, "gradient_boost": [118, 1033, 1034, 1040], "histgradientboostingclassifi": [118, 119, 317, 318, 319, 320, 322, 368, 558, 563, 631, 632, 978, 1008, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "randomtreesembed": [118, 131, 223, 415, 910, 1032, 1039, 1040, 1044, 1045, 1046], "random_tree_embed": 118, "rt_model": 118, "randomtreesembeddingrandomtreesembed": 118, "rf_appli": 118, "rf_leaves_yield": 118, "kw_arg": [118, 864, 998, 1037], "rf_model": 118, "0x7f2b9bed6430": 118, "functiontransformerfunctiontransform": 118, "gbdt_appli": 118, "gbdt_leaves_yield": 118, "gbdt_model": 118, "0x7f2bac7674c0": 118, "roccurvedisplai": [118, 240, 243, 259, 271, 272, 317, 388, 786, 787, 994, 1028, 1041, 1047, 1048], "rt": 118, "rf": [118, 119, 132, 135, 136, 173, 317, 363, 415, 566, 568, 569], "gbdt": [118, 172, 317, 318, 323, 386, 415], "model_displai": 118, "620": [118, 137, 497, 1010], "plot_feature_transform": [118, 137, 1010], "hgbt": [119, 415], "fetch_california_h": [119, 165, 166, 307, 319, 376, 394, 409, 1040, 1042], "20640": [119, 166, 376, 489], "n_core": 119, "only_physical_cor": 119, "unnecessari": [119, 247, 386, 442, 645, 646, 651, 652, 659, 660, 661, 662, 680, 683, 704, 991, 998, 1009, 1013, 1034, 1036, 1041, 1042, 1044, 1047], "min_samples_leaf": [119, 125, 126, 173, 317, 320, 357, 415, 556, 557, 558, 559, 560, 561, 563, 564, 565, 908, 909, 910, 911, 1004, 1037], "early_stop": [119, 172, 209, 301, 320, 352, 395, 415, 560, 561, 665, 666, 667, 675, 676, 677, 857, 858, 1002, 1039, 1042, 1045, 1046], "return_train_scor": [119, 266, 313, 412, 797, 800, 801, 811, 823, 1037, 1038, 1040], "wast": [119, 387, 412, 413, 977], "plotli": [119, 263, 381, 398, 401], "cursor": [119, 263], "px": [119, 263], "make_subplot": 119, "shared_yax": 119, "subplot_titl": 119, "model_nam": [119, 240, 283], "colors_list": 119, "param_nam": [119, 263, 277, 323, 347, 399, 819, 827, 983, 1024], "param_": 119, "scatter_fig": 119, "mean_fit_tim": [119, 287, 797, 811], "error_x": [119, 263], "std_fit_tim": [119, 287, 797, 811], "error_i": [119, 263], "hover_data": [119, 263], "line_fig": 119, "scatter_trac": 119, "line_trac": 119, "add_trac": 119, "mean_score_tim": [119, 260, 263, 797, 811], "std_score_tim": [119, 263, 797, 811], "update_layout": [119, 263], "xaxis2": 119, "traceord": 119, "borderwidth": 119, "plateau": [119, 149, 260, 264], "earlier": [119, 172, 205, 375, 381, 411, 831, 834, 998, 1006, 1029, 1032, 1044, 1046], "never": [119, 238, 363, 381, 390, 393, 402, 408, 409, 411, 412, 449, 456, 522, 554, 555, 556, 563, 860, 861, 980, 998, 1041, 1044], "hgbdt": 119, "domin": [119, 166, 174, 201, 206, 240, 271, 312, 376, 387, 406, 880, 990, 998, 1004, 1047], "ever": [119, 132, 390, 415, 1013], "disput": 119, "alwai": [119, 123, 126, 180, 201, 219, 227, 234, 265, 268, 272, 314, 336, 343, 347, 353, 363, 367, 368, 375, 379, 381, 382, 383, 387, 394, 395, 398, 406, 408, 409, 412, 415, 416, 417, 418, 431, 442, 448, 463, 464, 466, 468, 481, 482, 483, 487, 495, 507, 508, 543, 548, 550, 551, 553, 555, 557, 558, 559, 560, 561, 563, 564, 567, 569, 580, 587, 588, 590, 593, 610, 626, 627, 629, 631, 632, 634, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 669, 670, 671, 672, 675, 677, 678, 694, 704, 708, 714, 720, 721, 722, 730, 732, 733, 737, 780, 783, 784, 795, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 833, 834, 843, 844, 851, 852, 858, 865, 873, 878, 880, 893, 901, 902, 903, 905, 906, 908, 909, 911, 938, 947, 948, 977, 978, 980, 982, 984, 987, 988, 991, 994, 996, 1000, 1001, 1003, 1004, 1013, 1015, 1022, 1031, 1033, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1048], "thumb": [119, 177, 367, 381, 382, 393, 408, 657, 658, 665, 666, 667, 675, 676, 677, 900, 988], "863": [119, 137, 1010], "plot_forest_hist_grad_boosting_comparison": [119, 137, 1010], "mdi": [119, 120, 127, 168, 169, 174, 175, 415, 463, 495, 563, 629, 633, 826, 860, 874, 996, 1010], "artifici": [120, 123, 130, 150, 166, 205, 222, 236, 304, 352, 376, 377, 378, 386, 405, 407, 408, 412, 413, 534, 695, 830, 857, 858, 981, 985, 987, 989, 995, 1000, 1004, 1009, 1013, 1031], "feature_importances_": [120, 121, 127, 150, 173, 174, 395, 415, 417, 552, 553, 556, 557, 558, 559, 563, 564, 565, 592, 593, 596, 908, 909, 910, 911, 1033, 1036, 1040], "estimators_": [120, 122, 238, 317, 395, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 828, 829, 830, 831, 832, 833, 834, 1032, 1038, 1045], "forest_import": 120, "overcom": [120, 205, 367, 416], "permutation_import": [120, 121, 127, 173, 174, 317, 415, 552, 553, 556, 557, 558, 559, 563, 564, 565, 908, 909, 910, 911, 996, 1041, 1043, 1044], "importances_mean": [120, 127, 173, 174, 317, 633, 996], "479": [120, 162], "importances_std": [120, 633, 996], "omit": [120, 170, 171, 331, 386, 421, 474, 533, 665, 667, 675, 804, 806, 828, 829, 832, 835, 836, 837, 838, 839, 857, 986, 993], "959": [120, 137, 175, 876, 888, 1010], "plot_forest_import": [120, 137, 1010], "multicollinear": [120, 121, 127, 150, 168, 169, 173, 175, 268, 329, 411, 499, 563, 633, 654, 826, 984, 996, 1010], "hotter": 121, "job": [121, 250, 381, 385, 389, 415, 419, 436, 443, 445, 447, 449, 451, 456, 457, 460, 463, 466, 467, 471, 530, 534, 535, 536, 538, 541, 542, 544, 545, 547, 554, 555, 556, 557, 562, 563, 564, 565, 566, 567, 568, 569, 601, 609, 633, 638, 656, 687, 688, 689, 690, 691, 692, 693, 772, 776, 779, 797, 800, 801, 803, 811, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 832, 833, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 859, 862, 895, 896, 898, 954, 1013, 1017], "five": [121, 248, 327, 330, 376, 530, 538, 544, 985, 991, 1003, 1013, 1031], "drawback": [121, 218, 980, 983], "img_shap": 121, "imp_reshap": 121, "092": [121, 353], "met": [121, 237, 383, 417, 533, 540, 626, 670, 984, 988, 1039], "plot_forest_importances_fac": [121, 137, 1010], "fourth": [122, 1015], "descend": [122, 626, 1041], "extratreesclassifi": [122, 131, 415, 417, 557, 563, 565, 910, 911, 989, 1034, 1035, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048], "decisiontre": [122, 1036], "consol": [122, 379, 1016], "extratre": [122, 131, 367, 1034], "9266666666666666": 122, "9933333333333333": 122, "9866666666666667": 122, "rdylbu": [122, 358], "plot_step_coars": 122, "plot_idx": 122, "model_titl": 122, "model_detail": 122, "blend": [122, 133, 313, 395, 412, 1008], "estimator_alpha": 122, "coarser": [122, 126], "regularli": [122, 280, 393, 990], "xx_coarser": 122, "yy_coars": 122, "z_points_coars": 122, "cs_point": 122, "plot_forest_iri": [122, 137, 1010], "ordinalencod": [123, 133, 172, 173, 201, 240, 313, 322, 375, 395, 415, 580, 836, 868, 873, 881, 978, 990, 998, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048], "equidist": [123, 691], "lowa": 123, "sale": [123, 240, 262, 988, 1013], "42165": 123, "categorical_columns_subset": 123, "bldgtype": 123, "garagefinish": 123, "lotconfig": 123, "masvnrtyp": [123, 133], "housestyl": [123, 133], "fireplacequ": 123, "extercond": 123, "exterqu": [123, 133], "poolqc": 123, "numerical_columns_subset": 123, "3ssnporch": 123, "fireplac": 123, "bsmthalfbath": 123, "halfbath": 123, "garagecar": [123, 133], "totrmsabvgrd": 123, "bsmtfinsf1": [123, 133], "bsmtfinsf2": 123, "grlivarea": 123, "screenporch": 123, "n_categorical_featur": [123, 560, 561, 631, 632], "n_numerical_featur": 123, "1460": [123, 133], "make_column_transform": [123, 133, 171, 232, 318, 409, 463, 465, 1039], "dropper": 123, "hist_drop": 123, "hist_one_hot": 123, "etc": [123, 201, 219, 257, 266, 267, 363, 367, 369, 381, 383, 385, 386, 393, 394, 395, 399, 405, 409, 412, 416, 488, 502, 526, 556, 557, 563, 564, 667, 675, 691, 717, 769, 797, 811, 831, 834, 864, 875, 908, 909, 910, 911, 912, 914, 920, 921, 931, 946, 977, 978, 982, 988, 991, 1008, 1009, 1013, 1031, 1038, 1040, 1041], "ordinal_encod": [123, 240], "use_encoded_valu": [123, 133, 173, 240, 313, 874, 998, 1043], "unknown_valu": [123, 133, 173, 240, 313, 874, 998, 1043, 1045, 1046], "verbose_feature_names_out": [123, 171, 172, 173, 244, 313, 320, 321, 322, 409, 463, 466, 1044], "hist_ordin": 123, "hist_n": 123, "n_cv_fold": [123, 313, 803, 819, 824, 827], "dropped_result": 123, "one_hot_result": 123, "ordinal_result": 123, "native_result": 123, "figure_titl": 123, "plot_info": 123, "test_scor": [123, 125, 127, 209, 261, 264, 280, 313, 347, 357, 394, 412, 803, 819, 823, 824, 827], "y_limit": 123, "mape_cv_mean": 123, "mape_cv_std": 123, "c0": [123, 233, 313], "slowest": [123, 936, 937], "theori": [123, 236, 252, 347, 378, 407, 408, 412, 415, 689, 693, 724, 754, 892, 893, 937, 977, 984, 985, 987, 988, 989, 1003, 1004], "poorer": [123, 363, 413], "slight": [123, 206, 319, 415, 448, 1041], "acf": 123, "bde": 123, "isol": [123, 129, 230, 240, 353, 379, 381, 387, 398, 562, 846, 904, 1040, 1041], "bcde": 123, "histgradientboostingregressor__max_depth": 123, "histgradientboostingregressor__max_it": 123, "altogeth": [123, 387, 1039], "766": [123, 137, 1010], "plot_gradient_boosting_categor": [123, 137, 1010], "validation_fract": [124, 209, 320, 415, 558, 559, 560, 561, 665, 666, 667, 675, 677, 857, 858, 1002, 1039, 1045], "denot": [124, 390, 395, 398, 406, 408, 412, 415, 587, 588, 590, 797, 803, 811, 819, 873, 874, 973, 977, 980, 984, 986, 988, 989, 998, 1001, 1015, 1048], "kept": [124, 252, 285, 347, 375, 385, 402, 418, 495, 534, 537, 539, 540, 546, 596, 609, 610, 618, 619, 643, 694, 795, 796, 921, 998, 1039, 1040], "asid": [124, 209, 402, 558, 559, 560, 561, 665, 666, 667, 675, 677, 857, 858], "n_estimators_": [124, 558, 559], "vighnesh": [124, 1036, 1037, 1039], "birodkar": [124, 1036, 1037, 1039], "vighneshbirodkar": 124, "rvraghav93": [124, 266, 307], "data_list": 124, "make_hastie_10_2": [124, 128, 266, 377, 415, 558, 995], "n_gb": 124, "score_gb": 124, "time_gb": 124, "n_gbe": 124, "gbe": 124, "gb": [124, 136, 415, 552, 632], "bar_width": 124, "bar1": 124, "crimson": 124, "bar2": 124, "coral": 124, "n_est": 124, "max_i": [124, 238, 990], "plot_gradient_boosting_early_stop": [124, 137, 1010], "fly": [125, 386, 389, 507, 508, 581, 1031, 1033, 1040], "pessimist": [125, 415], "cumul": [125, 201, 219, 408, 724, 733, 754, 877, 889, 998, 1002, 1038, 1040, 1041], "demand": [125, 416, 797, 811, 821, 822], "6860": 125, "special": [125, 171, 191, 219, 280, 295, 313, 339, 375, 377, 383, 387, 393, 395, 408, 411, 413, 463, 466, 552, 554, 558, 821, 912, 977, 982, 984, 986, 987, 988, 989, 991, 1004, 1038, 1041, 1043, 1045], "expit": [125, 191, 415, 560, 984, 1038], "ridgewai": [125, 415], "gbm": [125, 415, 1034], "x3": [125, 409, 1023], "binomi": [125, 128, 415, 552, 558, 560, 984, 1045], "acc": 125, "heldout_scor": 125, "devianc": [125, 128, 201, 219, 323, 415, 552, 557, 558, 560, 561, 564, 647, 668, 679, 720, 721, 722, 745, 747, 750, 909, 911, 984, 1004, 1032, 1041, 1042, 1044, 1045, 1047], "y_proba": [125, 128, 312, 395, 860], "staged_predict_proba": [125, 128, 552, 558, 560, 1031], "cv_estim": 125, "cv_clf": 125, "val_scor": 125, "cv_score": 125, "cumsum": [125, 201, 219, 1038], "oob_improvement_": [125, 415, 558, 559, 1033], "oob_best_it": 125, "test_best_it": 125, "cv_best_it": 125, "brew": [125, 379, 398], "oob_color": 125, "174": [125, 304, 387, 583], "212": [125, 150, 267, 329, 378, 468, 499, 994, 1022], "test_color": 125, "127": [125, 317, 324, 1010, 1031], "cv_color": 125, "253": [125, 533], "192": [125, 387, 1031], "oob_lin": 125, "test_lin": 125, "cv_line": 125, "dashdot": [125, 153, 156, 240], "xticks_po": 125, "xticks_label": 125, "428": [125, 137, 1010], "plot_gradient_boosting_oob": [125, 137, 1010], "atleast_2d": [126, 383], "expected_i": 126, "amplitud": [126, 158, 160, 195, 984], "lognorm": [126, 159, 182, 251, 311, 998], "imposs": [126, 354, 1009], "all_model": 126, "min_samples_split": [126, 127, 128, 266, 274, 308, 319, 415, 556, 557, 558, 559, 563, 564, 565, 800, 801, 908, 909, 910, 911, 977, 1004, 1037], "gbr": 126, "gbr_l": 126, "y_med": 126, "unfortun": [126, 170, 171, 219, 389, 393, 415, 507, 508], "sinoisoid": 126, "highlight_min": [126, 190], "pbl": 126, "715413": 126, "750348": 126, "127128": 126, "253445": 126, "379763": 126, "933253": 126, "305438": 126, "622811": 126, "940184": 126, "827917": 126, "909909": 126, "145957": 126, "382005": 126, "667219": 126, "asymmetr": [126, 203, 395, 1036], "nor": [126, 265, 352, 363, 367, 386, 393, 416, 436, 445, 593, 924, 992, 1004, 1042], "917281": 126, "767498": 126, "617715": 126, "692901": 126, "144204": 126, "245961": 126, "347717": 126, "648026": 126, "412021": 126, "607752": 126, "803483": 126, "874771": 126, "354394": 126, "355445": 126, "356497": 126, "852774": 126, "extrem": [126, 201, 203, 239, 240, 307, 314, 329, 353, 381, 384, 408, 413, 556, 557, 563, 564, 565, 631, 632, 678, 722, 750, 910, 911, 912, 914, 988, 990], "coverage_fract": 126, "y_low": 126, "y_high": 126, "868": [126, 146], "hypothesi": [126, 262, 268, 412, 689, 693, 825, 985], "experiment": [126, 165, 166, 201, 273, 274, 319, 320, 370, 381, 383, 384, 391, 393, 395, 399, 412, 495, 548, 626, 695, 800, 801, 958, 977, 978, 984, 987, 988, 1008, 1009, 1018, 1026, 1039, 1040, 1043, 1044, 1045, 1046, 1048], "enable_halving_search_cv": [126, 273, 274, 319, 385, 800, 801, 977], "halvingrandomsearchcv": [126, 274, 319, 399, 578, 800, 977, 1043, 1045, 1046, 1047, 1048], "neg_mean_pinball_loss_05p_scor": 126, "greater_is_bett": [126, 740, 988], "search_05p": 126, "max_resourc": [126, 800, 801, 977], "min_resourc": [126, 800, 801], "neg_mean_pinball_loss_95p_scor": 126, "search_95p": 126, "estimator__alpha": 126, "did": [126, 153, 171, 174, 201, 209, 219, 248, 314, 376, 626, 711, 816, 902, 1023, 1032, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1046], "untun": 126, "joint": [126, 168, 172, 179, 185, 187, 188, 190, 200, 220, 222, 409, 610, 651, 661, 691, 835, 836, 837, 838, 839, 900, 984, 985, 989, 993, 995, 999, 1010, 1031], "9026666666666666": 126, "796": 126, "sadli": 126, "plot_gradient_boosting_quantil": [126, 137, 1010], "basic": [126, 152, 153, 158, 159, 161, 162, 163, 166, 168, 199, 314, 344, 367, 369, 370, 381, 383, 385, 393, 395, 408, 412, 413, 415, 610, 621, 896, 908, 909, 910, 911, 977, 978, 991, 1002, 1007, 1008, 1009, 1010, 1013, 1022], "introductori": [126, 152, 153, 158, 159, 161, 162, 163, 168, 229, 418, 610, 621, 1010, 1013], "tackl": [127, 262, 368, 381, 408, 837, 990, 1013, 1018], "katrina": [127, 1042], "ni": [127, 1037, 1042], "nilichen": 127, "reg": [127, 171, 181, 237, 308, 318, 344, 415, 557, 559, 567, 649, 650, 652, 653, 654, 655, 656, 662, 663, 664, 669, 670, 677, 678, 688, 692, 911, 984, 1036], "3025": 127, "3785": 127, "train_score_": [127, 415, 558, 559, 560, 561], "impur": [127, 174, 361, 397, 415, 417, 552, 553, 556, 557, 558, 559, 563, 564, 565, 908, 909, 910, 911, 912, 914, 1004, 1026, 1036, 1037, 1038, 1039], "feature_import": 127, "sorted_idx": [127, 317], "po": [127, 225, 416], "vert": [127, 173, 174, 317, 1002], "318": [127, 137, 449, 1010], "plot_gradient_boosting_regress": [127, 137, 1010], "consider": [128, 154, 157, 240, 257, 263, 269, 381, 418, 618, 797, 811, 977, 984, 990, 994, 1002, 1013, 1048], "return_invers": [128, 383], "original_param": 128, "test_devi": 128, "671": [128, 137, 1000, 1010], "plot_gradient_boosting_regular": [128, 137, 1010], "deform": [129, 252, 349], "notat": [129, 395, 409, 413, 416, 589, 711, 984, 988, 1015, 1040, 1047], "cluster_1": 129, "cluster_2": 129, "nuniformli": 129, "max_sampl": [129, 165, 415, 554, 555, 556, 557, 562, 563, 564, 633, 1041, 1044, 1047], "isolationforestifittedisolationforest": 129, "ax_": [129, 256, 265, 269, 271, 277, 288, 312, 317, 388, 437, 630, 696, 697, 699, 700, 701, 803, 819], "nof": 129, "426": [129, 137, 1010], "plot_isolation_forest": [129, 137, 1010], "trend": [130, 158, 172, 233, 302, 1013, 1038], "xgboost": [130, 415, 1008], "partialdependencedisplai": [130, 172, 241, 318, 319, 320, 322, 388, 632, 995, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "f_0": 130, "f_1": [130, 269, 988], "gbdt_no_cst": [130, 318], "histgradientboostingregressorifittedhistgradientboostingregressor": [130, 322], "gbdt_with_monotonic_cst": 130, "monotonic_cst": [130, 318, 320, 415, 556, 557, 560, 561, 563, 564, 908, 909, 910, 911, 1046], "line_kw": [130, 241, 264, 318, 631, 803, 819], "unconstrain": [130, 172, 318, 376, 1002], "axes_": [130, 241, 318, 388, 631], "f_idx": 130, "oscil": [130, 172, 206, 408, 439], "x_df": 130, "gbdt_with_monotonic_cst_df": 130, "634": [130, 137, 1010], "plot_monotonic_constraint": [130, 137, 1010], "excel": [131, 375, 381, 415, 689, 693, 984, 1013], "bernoullinb": [131, 369, 836, 837, 838, 839, 989, 990, 1032, 1033, 1035, 1038, 1043, 1044, 1046], "truncatedsvd": [131, 223, 353, 413, 533, 534, 538, 539, 540, 691, 859, 862, 1033, 1038, 1042, 1043, 1045], "hasher": [131, 354, 416], "transformed_grid": 131, "y_grid_pr": 131, "373": [131, 137, 1010], "plot_random_forest_embed": [131, 137, 1010], "multioutput": [132, 271, 283, 284, 370, 383, 395, 399, 431, 464, 481, 482, 483, 550, 553, 555, 556, 557, 559, 561, 563, 564, 567, 569, 610, 631, 632, 634, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 669, 671, 672, 677, 678, 720, 721, 726, 743, 744, 746, 748, 749, 751, 783, 786, 788, 789, 821, 829, 843, 851, 858, 867, 901, 903, 906, 908, 909, 910, 911, 926, 951, 952, 988, 1010, 1011, 1026, 1031, 1032, 1033, 1037, 1038, 1044, 1045, 1048], "multioutputregressor": [132, 399, 431, 464, 481, 482, 483, 553, 555, 557, 559, 561, 564, 567, 569, 610, 634, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 669, 671, 672, 677, 678, 832, 834, 843, 851, 858, 901, 903, 906, 909, 911, 1037, 1038, 1040, 1042, 1043, 1047], "centr": 132, "regr_multirf": 132, "regr_rf": 132, "y_multirf": 132, "y_rf": 132, "cornflowerblu": [132, 195, 204, 211, 248, 250, 253, 269, 271, 290, 296, 359, 360], "547": [132, 137, 1010], "plot_random_forest_regression_multioutput": [132, 137, 1010], "compil": [133, 285, 354, 367, 368, 381, 382, 383, 384, 389, 390, 393, 1008, 1031], "dean": [133, 1039, 1045, 1047], "cock": [133, 1040], "becam": [133, 396, 1039], "kaggl": [133, 394], "residenti": 133, "iowa": [133, 240], "won": [133, 303, 353, 385, 408, 467, 495, 626, 627, 629, 686, 703, 716, 734, 735, 753, 755, 793, 987, 998, 1036, 1037, 1042], "load_ames_h": 133, "yrsold": 133, "heatingqc": 133, "street": [133, 150, 378], "yearremodadd": 133, "heat": [133, 339, 408, 451, 461, 694], "bsmtunfsf": 133, "mssubclass": 133, "condition2": 133, "garagetyp": 133, "overallqu": 133, "totalbsmtsf": 133, "miscfeatur": 133, "mosold": 133, "cat_selector": 133, "num_selector": 133, "besid": [133, 233, 381, 386, 588, 977, 1039], "cat_tree_processor": 133, "encoded_missing_valu": [133, 173, 874, 998, 1045, 1046], "num_tree_processor": 133, "add_ind": [133, 166, 626, 627, 629, 978, 1040, 1043, 1047], "tree_preprocessor": [133, 201], "0x7f2b992f7100": 133, "0x7f2b992f7af0": 133, "columntransformerinot": [133, 172], "fittedcolumntransform": [133, 172], "ordinalencoderordinalencod": [133, 172, 173, 313], "cat_linear_processor": 133, "num_linear_processor": 133, "linear_preprocessor": 133, "tediou": 133, "wrote": [133, 376], "lasso_pipelin": 133, "pipelineinot": [133, 232, 242, 263, 313, 318], "fittedpipelin": [133, 232, 242, 263, 313, 318], "lassocvlassocv": 133, "rf_pipelin": 133, "randomforestregressorrandomforestregressor": [133, 136], "gbdt_pipelin": 133, "histgradientboostingregressorhistgradientboostingregressor": [133, 313], "stackingregressor": [133, 317, 395, 399, 415, 566, 1041, 1042, 1043, 1044, 1045], "stacking_regressor": 133, "final_estim": [133, 317, 415, 566, 567], "unknown_v": 133, "stackingregressorinot": 133, "fittedstackingregressor": 133, "ridgecvridgecv": [133, 171], "cross_val_predict": [133, 258, 317, 399, 406, 412, 415, 436, 566, 567, 822, 823, 1035, 1036, 1037, 1038, 1040, 1042, 1044, 1048], "scorer": [133, 219, 266, 383, 395, 399, 412, 415, 417, 560, 561, 593, 601, 633, 658, 672, 674, 710, 730, 731, 740, 797, 800, 801, 803, 811, 819, 822, 823, 824, 827, 946, 977, 984, 988, 996, 1009, 1035, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "line_kwarg": [133, 700], "nevalu": 133, "114": [133, 137, 322, 1010, 1031], "plot_stack_predictor": [133, 137, 1010], "exemplari": [134, 135], "eclf": [134, 135, 415], "axarr": [134, 307], "tt": [134, 257, 464], "plot_voting_decision_region": [134, 137, 1010], "class1_1": 135, "class2_1": 135, "lightgreen": [135, 207, 218], "p3": 135, "p4": 135, "nweight": 135, "plot_voting_proba": [135, 137, 1010], "votingregressor": [136, 399, 415, 568, 1040, 1041, 1042, 1045], "cohort": 136, "reg1": [136, 415], "reg2": [136, 415], "reg3": [136, 415], "ereg": [136, 415], "votingregressorifittedvotingregressor": 136, "gradientboostingregressorgradientboostingregressor": 136, "linearregressionlinearregress": 136, "xt": [136, 285, 395, 444, 537, 539, 626, 628, 797, 800, 801, 811, 844, 852, 860, 865, 870, 877, 889, 918, 1047], "pred1": 136, "pred2": 136, "pred3": 136, "pred4": 136, "labelbottom": [136, 262], "plot_voting_regressor": [136, 137, 1010], "106": [137, 150, 244, 378, 876, 982, 1032], "n_fold": [139, 646, 650, 652, 654, 658, 660, 662, 1032, 1033, 1037], "scores_std": [139, 140], "semilogx": [139, 140, 190, 275], "std_error": 139, "transluc": 139, "999999999999999e": 139, "31622776601683794": 139, "answer": [139, 170, 262, 381, 393, 724, 754, 988, 1013], "extern": [139, 153, 369, 370, 374, 378, 381, 383, 386, 393, 395, 405, 408, 416, 417, 418, 592, 609, 610, 716, 735, 793, 984, 987, 988, 991, 1004, 1009, 1016, 1022, 1026, 1039, 1043], "lasso_cv": 139, "k_fold": [139, 1019], "maximis": [139, 248, 293, 982, 991], "5f": [139, 321], "moreov": [139, 159, 309, 321, 363, 385, 408, 412, 418, 893, 958, 988, 1013, 1039, 1045, 1046], "substanti": [139, 287, 291, 292, 308, 381, 846, 994, 1035, 1038], "05968": 139, "54209": 139, "04520": 139, "15521": 139, "07880": 139, "45192": 139, "542": [139, 143, 150, 185, 240, 245, 378, 1010], "plot_cv_diabet": [139, 143, 1010], "aic": [139, 168, 179, 185, 187, 188, 189, 195, 209, 220, 252, 500, 650, 652, 653, 654, 655, 796, 861, 880, 977, 1010, 1031, 1038, 1044, 1045], "bic": [139, 168, 179, 185, 187, 188, 189, 195, 209, 220, 417, 500, 650, 652, 653, 654, 655, 796, 861, 880, 977, 987, 1010, 1031, 1038, 1044, 1045], "this_scor": [140, 342], "136": [140, 143, 1010], "plot_cv_digit": [140, 143, 1010], "961111": 141, "933333": [141, 849], "073": [141, 143, 260, 470, 471, 1010], "plot_digits_classification_exercis": [141, 143, 1010], "200j": 142, "plot_iris_exercis": [142, 143, 1010], "x_2": [145, 156, 198, 413, 415, 416, 418, 612, 624, 984, 992, 998], "x_3": [145, 998], "irrelev": [145, 185, 363, 387, 410, 415, 417, 603, 738, 988], "agre": [145, 389, 396, 407, 408, 784, 1015], "percept": [145, 172, 995], "correctli": [145, 149, 201, 219, 237, 269, 271, 276, 295, 314, 328, 339, 381, 390, 413, 415, 425, 436, 468, 492, 548, 549, 550, 552, 554, 556, 558, 560, 563, 566, 568, 609, 657, 665, 667, 673, 674, 675, 702, 792, 794, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 847, 850, 857, 880, 895, 896, 900, 902, 903, 904, 905, 906, 908, 910, 938, 985, 988, 991, 992, 998, 1003, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "mutual_info_regress": [145, 321, 417, 591, 594, 595, 598, 599, 608, 1037, 1038, 1043, 1045, 1046, 1047], "f_test": 145, "x_": [145, 154, 253, 262, 317, 383, 408, 411, 413, 626, 634, 762, 895, 896, 984, 990, 995, 1037], "plot_f_test_vs_mi": [145, 151, 1010], "halv": [145, 168, 255, 266, 270, 278, 346, 403, 514, 563, 578, 797, 800, 801, 905, 1010, 1026, 1043], "spline": [145, 168, 179, 180, 220, 276, 290, 515, 516, 517, 671, 861, 875, 879, 1008, 1010, 1044], "examin": [146, 387, 389, 408, 849], "f_classif": [146, 147, 342, 417, 591, 594, 595, 597, 598, 599, 603, 605, 608], "log10": [146, 159, 171, 186, 194, 263, 339], "pvalues_": [146, 591, 594, 595, 597, 598, 599, 1031], "x_indic": 146, "p_": [146, 988, 991, 1004], "svm_weight": 146, "789": [146, 415], "clf_select": 146, "svm_weights_select": 146, "get_support": [146, 150, 319, 580, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 1033], "191": [146, 151, 387, 989, 1010], "plot_feature_select": [146, 151, 1010], "anova_filt": 147, "anova_svm": 147, "selectkbestselectkbest": [147, 321], "Be": [147, 162, 352, 381, 410, 566, 567, 647, 653, 654, 655, 657, 658, 668, 679, 703, 815, 816, 875, 998, 1028, 1032], "75788833": 147, "27161955": 147, "26113448": 147, "015": [147, 151, 353, 357, 996, 1010], "plot_feature_selection_pipelin": [147, 151, 1010], "rfe": [148, 149, 399, 417, 593, 596, 601, 1031, 1035, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "n_features_to_select": [148, 150, 319, 417, 592, 601, 1043, 1045], "ranking_": [148, 592, 593], "770": [148, 151, 312, 315, 1010], "plot_rfe_digit": [148, 151, 1010], "introduct": [149, 219, 260, 370, 381, 412, 413, 416, 589, 786, 787, 835, 839, 984, 986, 988, 990, 1007, 1016, 1022, 1025, 1026], "class_sep": [149, 295, 514], "rfecv": [149, 399, 417, 592, 596, 601, 1035, 1037, 1039, 1041, 1042, 1043, 1044, 1047, 1048], "stratifiedkfold": [149, 249, 257, 268, 272, 329, 412, 436, 566, 567, 593, 601, 658, 672, 797, 798, 800, 801, 802, 803, 805, 807, 811, 815, 817, 819, 820, 821, 822, 823, 824, 825, 827, 881, 1019, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1044], "min_features_to_select": [149, 593, 1039], "n_features_": [149, 540, 592, 593, 1044, 1046], "n_score": 149, "473": [149, 151, 1010], "plot_rfe_with_cross_valid": [149, 151, 1010], "selectfrommodel": [150, 395, 399, 592, 601, 602, 1011, 1026, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1047, 1048], "sequentialfeatureselector": [150, 399, 417, 592, 596, 602, 1043, 1044, 1045, 1046, 1047], "greedi": [150, 415, 417, 446, 448, 459, 558, 559, 601, 984, 1004], "442": [150, 166, 378, 500, 1022], "descr": [150, 374, 375, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 506, 509, 1021, 1039], "_diabetes_dataset": 150, "mass": [150, 241, 378, 445, 795, 984, 995], "blood": [150, 231, 378, 1022], "pressur": [150, 378, 1022], "six": [150, 202, 223, 311, 378, 1040], "serum": [150, 378], "bmi": [150, 189, 190, 241, 378, 996], "tc": [150, 378, 396], "cholesterol": [150, 378], "ldl": [150, 378], "lipoprotein": [150, 378], "hdl": [150, 378], "s4": [150, 189, 190, 378], "tch": [150, 378], "s5": [150, 189, 190, 378, 996], "ltg": [150, 378, 500], "triglycerid": [150, 378], "s6": [150, 189, 190, 378], "glu": [150, 378], "sugar": [150, 378], "www4": [150, 378], "ncsu": [150, 378], "boo": [150, 378], "bradlei": [150, 378, 984], "efron": [150, 378, 681, 682, 984], "trevor": [150, 189, 322, 378, 627, 655, 720, 721, 722, 978, 984, 1000, 1035, 1036, 1039, 1040, 1041, 1043], "iain": [150, 378, 984], "johnston": [150, 378, 984, 1040], "annal": [150, 185, 189, 378, 415, 473, 515, 516, 517, 558, 559, 655, 984], "499": [150, 378, 387], "web": [150, 375, 376, 378, 381, 384, 389, 408, 416, 520, 893, 988, 998, 1027, 1031], "stanford": [150, 378, 648, 681, 682, 835, 838, 839, 893, 986], "leastangle_2002": [150, 378], "e501": [150, 352], "accept": [150, 153, 237, 259, 317, 339, 352, 354, 363, 367, 368, 375, 381, 383, 390, 393, 394, 395, 396, 399, 402, 404, 408, 416, 436, 440, 443, 444, 447, 460, 463, 466, 507, 508, 554, 555, 560, 561, 568, 569, 580, 581, 592, 593, 596, 627, 634, 638, 642, 678, 725, 740, 776, 795, 796, 800, 801, 842, 843, 850, 851, 860, 864, 918, 920, 921, 924, 984, 986, 988, 991, 996, 998, 1003, 1008, 1009, 1019, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "tic": [150, 172, 240, 273, 990], "sfm": 150, "toc": [150, 240], "sf": [150, 262, 319, 376, 417, 491, 601], "backward": [150, 237, 319, 384, 395, 417, 495, 576, 601, 613, 614, 617, 618, 619, 621, 622, 913, 916, 988, 992, 1009, 1031, 1034, 1039, 1040, 1041, 1043, 1045, 1047], "tic_fwd": 150, "sfs_forward": 150, "toc_fwd": 150, "tic_bwd": 150, "sfs_backward": 150, "toc_bwd": 150, "197": 150, "570": [150, 378, 1022], "isn": [150, 317, 352, 354, 363, 368, 381, 389, 514, 560, 561, 593, 792, 800, 801, 873, 991, 1003, 1041], "sound": [150, 363], "finish": [150, 250, 985], "expos": [150, 237, 280, 320, 322, 368, 374, 378, 395, 399, 406, 409, 415, 417, 418, 436, 463, 552, 553, 566, 567, 568, 569, 592, 593, 601, 610, 797, 800, 801, 811, 829, 830, 831, 832, 833, 834, 915, 956, 984, 988, 990, 1019, 1021, 1023, 1028, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "breast": [150, 374, 499, 1026, 1036], "cancer": [150, 374, 499, 592, 593, 847, 1026, 1036], "569": [150, 329, 378, 499, 591, 594, 595, 597], "load_breast_canc": [150, 174, 329, 357, 386, 591, 594, 595, 597, 673, 674, 786, 988, 1036, 1037, 1042], "breast_cancer_data": 150, "_breast_cancer_dataset": 150, "wisconsin": [150, 174, 374, 499, 1026, 1036], "diagnost": [150, 174, 265, 374, 395, 499, 711, 822, 823, 988, 1008, 1009, 1026], "radiu": [150, 277, 292, 339, 378, 408, 441, 449, 687, 762, 779, 840, 841, 842, 843, 844, 848, 850, 851, 852, 854, 991, 1033, 1035, 1045, 1048], "perimet": [150, 378], "textur": [150, 378, 756, 757, 986], "compact": [150, 177, 307, 367, 378, 840, 841, 1004, 1033], "concav": [150, 378], "symmetri": [150, 378, 698, 873, 876, 888, 986], "fractal": [150, 378], "worst": [150, 201, 313, 378, 408, 443, 446, 707, 727, 728, 781, 782, 785, 790, 791, 825, 988, 1013, 1031, 1044], "field": [150, 219, 378, 405, 408, 409, 416, 497, 500, 616, 984, 986, 995, 1003, 1008, 1012, 1024, 1032], "se": [150, 224, 378, 398], "wdbc": [150, 378], "malign": [150, 378, 499], "benign": [150, 378, 499], "981": [150, 378, 988], "43": [150, 160, 198, 234, 262, 285, 315, 378, 386, 797, 811, 881], "188": [150, 158, 198, 220, 378, 387, 583, 1010], "143": [150, 378, 470, 471, 1000, 1031, 1032], "2501": [150, 378], "163": [150, 280, 378, 996], "427": [150, 378, 505, 506, 582, 583], "304": [150, 311, 378], "873": [150, 378], "757": [150, 260, 285, 378], "031": [150, 172, 378], "079": [150, 378], "251": [150, 224, 273, 278, 280, 281, 378, 1010], "4254": [150, 378], "071": [150, 378, 436], "027": [150, 232, 245, 353, 378, 1010], "058": [150, 260, 378], "252": [150, 224, 234, 378, 533, 876, 888], "291": [150, 314, 315, 376, 378, 1010], "156": [150, 171, 378], "664": [150, 378], "055": [150, 378, 988], "357": [150, 353, 378, 499, 901], "creator": [150, 375, 378], "william": [150, 376, 378, 418, 609, 610, 613, 618, 621, 638, 980, 988, 992, 1038, 1039, 1040, 1041, 1046, 1047], "wolberg": [150, 378], "nick": [150, 378, 1031, 1037, 1038, 1039, 1040], "olvi": [150, 378], "mangasarian": [150, 378], "donor": [150, 378], "novemb": [150, 201, 219, 378, 1036, 1037, 1039], "1995": [150, 262, 378, 406, 415, 552, 553, 830, 897, 989], "goo": [150, 378], "gl": [150, 378], "u2uwz2": [150, 378], "needl": [150, 378], "aspir": [150, 378, 381], "fna": [150, 378], "nuclei": [150, 378], "multisurfac": [150, 378], "msm": [150, 378], "bennett": [150, 378, 988], "4th": [150, 161, 378], "midwest": [150, 378], "cognit": [150, 378], "societi": [150, 378, 408, 410, 468, 473, 540, 626, 876, 888, 984, 1002], "101": [150, 280, 378, 846, 1032], "1992": [150, 376, 378, 412, 415, 566, 567, 644, 984], "exhaust": [150, 263, 317, 318, 319, 320, 321, 322, 323, 367, 378, 386, 394, 403, 408, 415, 797, 800, 801, 811, 890, 891, 893, 984, 1024, 1026], "insepar": [150, 378], "uw": [150, 378, 1043], "ftp": [150, 378, 681, 682], "wisc": [150, 378, 895], "prog": [150, 378], "cpo": [150, 378], "nuclear": [150, 378], "tumor": [150, 378], "diagnosi": [150, 265, 378, 847], "spie": [150, 378], "1993": [150, 378, 473, 663, 684, 685, 1004], "symposium": [150, 378, 408, 459], "technologi": [150, 378, 408, 1008, 1013], "1905": [150, 378], "861": [150, 352, 355, 378, 786, 787, 988, 1010], "870": [150, 278, 378], "san": [150, 378, 416, 1000], "jose": [150, 378, 657, 988, 1039, 1041], "ca": [150, 378, 408, 441, 908, 909, 1000, 1004], "prognosi": [150, 378], "577": [150, 378], "juli": [150, 378, 417, 732, 881, 998, 1034, 1038, 1039, 1040], "august": [150, 378, 408, 510, 533, 1003, 1031, 1033, 1034, 1038, 1045], "diagnos": [150, 265, 378, 389, 397, 409], "letter": [150, 161, 376, 378, 385, 416, 786, 787, 803, 819, 988], "1994": [150, 376, 378, 643], "feature_selector": 150, "ntol": 150, "975": [150, 170, 1003], "823": [150, 285], "286": [150, 181, 220, 415, 1010], "998": [150, 992], "plot_select_from_model_diabet": [150, 151, 1010], "970": 151, "co2": [152, 153, 159, 160, 163, 168, 418, 495, 610, 614, 621, 622, 624, 1010, 1038], "mona": [152, 153, 159, 160, 163, 168, 418, 495, 610, 614, 621, 622, 624, 1010], "loa": [152, 153, 159, 160, 163, 168, 418, 495, 610, 614, 621, 622, 624, 1010], "xor": [152, 154, 155, 156, 158, 159, 160, 163, 168, 211, 212, 214, 251, 310, 344, 345, 609, 613, 621, 984, 1004, 1010, 1038], "trick": [153, 236, 295, 343, 354, 366, 369, 370, 384, 393, 409, 581, 588, 642, 671, 980, 981, 992, 1002, 1003, 1022, 1023, 1026, 1032, 1040], "drastic": [153, 234, 270, 408, 412, 991, 1001], "theorem": [153, 347, 407, 990], "reus": [153, 194, 263, 317, 354, 383, 395, 408, 409, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 633, 645, 647, 648, 651, 657, 659, 661, 665, 666, 667, 668, 675, 676, 677, 679, 857, 858, 996, 1000, 1013, 1038], "training_sample_indic": 153, "training_data": 153, "training_noisy_target": 153, "newer": [153, 380, 398, 413], "expsinesquar": [153, 158, 162, 418], "emb": [153, 223, 234, 294, 374, 375, 461, 694, 985], "kernel_ridg": [153, 236, 370, 1035], "length_scal": [153, 154, 157, 158, 159, 160, 162, 418, 611, 614, 618, 620, 621, 622, 623], "tell": [153, 171, 172, 237, 262, 339, 344, 368, 376, 408, 416, 562, 578, 977, 982, 995, 1024], "1e0": [153, 236, 253, 270, 977], "kernel__length_scal": 153, "kernel__period": 153, "1e1": [153, 159, 201, 236, 339], "kernel_ridge_tun": 153, "9915849773450223": 153, "7986499491396727": 153, "607275806426107": 153, "predictions_kr": 153, "gaussianprocessregressor": [153, 158, 159, 160, 161, 162, 418, 609, 612, 613, 614, 615, 616, 620, 623, 624, 642, 1034, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "whitekernel": [153, 158, 159, 418, 610, 611, 613, 1042], "periodicity_bound": [153, 158, 162, 614], "034": [153, 470], "kernel_": [153, 154, 155, 156, 157, 158, 159, 160, 162, 609, 610], "675": [153, 362], "57": [153, 171, 217, 271, 304, 378, 379, 398, 400, 401, 409, 704, 779, 833, 988, 998, 1031], "noise_level": [153, 158, 159, 611, 624], "182": [153, 304, 387, 415], "mean_predictions_gpr": 153, "std_predictions_gpr": 153, "return_std": [153, 158, 159, 160, 162, 180, 181, 395, 551, 566, 567, 610, 612, 613, 614, 615, 624, 626, 643, 644, 860, 1038, 1039, 1043], "capac": [153, 173], "length_scale_bound": [153, 159, 160, 162, 418, 610, 614, 618, 621, 622], "attenu": 153, "537": [153, 163, 1010], "plot_compare_gpr_krr": [153, 163, 1010], "arbitrarili": [154, 248, 253, 352, 395, 418, 431, 464, 481, 482, 483, 551, 553, 555, 557, 559, 561, 564, 567, 569, 610, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 668, 669, 671, 672, 677, 678, 679, 720, 721, 722, 744, 783, 787, 833, 834, 843, 851, 858, 881, 901, 903, 906, 909, 911, 988, 991, 998, 1004], "lml": [154, 155, 159, 418], "exhibit": [154, 206, 343, 352, 397, 412, 413, 415, 418, 996], "steep": [154, 172, 271, 272, 408, 412, 418, 449, 455], "laplac": [154, 418, 609, 610, 835, 836, 837, 839, 990], "319": [154, 1024], "gp_fix": 154, "gp_opt": 154, "log_marginal_likelihood": [154, 155, 157, 159, 162, 418, 609, 610, 1041], "theta": [154, 155, 157, 159, 161, 162, 238, 413, 418, 522, 535, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 691, 990, 1004], "landscap": 154, "theta0": 154, "theta1": 154, "pcolor": 154, "xscale": [154, 159, 236, 803], "yscale": [154, 159, 201, 236, 352, 803], "plot_gpc": [154, 163, 1010], "gpc_rbf_isotrop": 155, "gpc_rbf_anisotrop": 155, "m_max": 155, "289": [155, 163, 171, 1010], "plot_gpc_iri": [155, 163, 1010], "0256": 156, "dotproduct": [156, 157, 162, 418, 610, 624], "sigma_0": [156, 157, 162, 418, 613], "constantkernel": [156, 162, 418, 610, 616, 620, 623], "lim": [156, 533], "61611719": 156, "00099547": 156, "10469096": 156, "32782448": 156, "00000000": 156, "50000000": 156, "17289014": 156, "6984743": 156, "3109306": 156, "93271427": 156, "03823144": 156, "10584743": 156, "87600388": 156, "74310541": 156, "21301203": 156, "26386883": 156, "gp": [156, 161, 418, 609, 610, 621, 1037], "cb": [156, 234, 251], "widehat": 156, "mathbf": [156, 343, 413, 984, 988, 992, 993, 1002], "leq": [156, 413, 415, 984, 988, 991, 1002, 1003, 1004], "clim": 156, "clabel": [156, 212], "334": 156, "plot_gpc_isoprob": [156, 163, 1010], "stationari": [157, 418, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624], "coincid": [157, 203, 418], "convergencewarn": [157, 159, 161, 162, 209, 216, 248, 302, 303, 309, 390, 395, 795, 796, 1039, 1040, 1043], "k1__constant_valu": 157, "100000": [157, 236, 247, 381, 612, 613, 614, 618, 619, 621, 622, 624, 889, 981, 1022, 1024], "puor_r": [157, 345], "489": [157, 163, 1010], "plot_gpc_xor": [157, 163, 1010], "rw2006": [158, 418, 609, 610], "ascent": [158, 418], "monthli": [158, 396, 988], "atmospher": 158, "ppm": 158, "mauna": 158, "observatori": 158, "hawaii": 158, "1958": [158, 413, 415, 531], "air": [158, 762], "41187": 158, "flag": [158, 240, 379, 381, 382, 384, 399, 404, 463, 609, 610, 626, 672, 674, 726, 783, 1003, 1037, 1041, 1042, 1044, 1045, 1046, 1047], "station": 158, "mlo": 158, "316": [158, 162, 610, 613, 624, 876], "317": 158, "co2_data": 158, "to_datetim": 158, "timestamp": 158, "march": [158, 724, 754, 988, 1031, 1035, 1039, 1041, 1046], "nfrom": 158, "upcom": [158, 379], "to_numpi": 158, "rise": 158, "irregular": [158, 343, 408, 991], "long_term_trend_kernel": 158, "decai": [158, 543, 857, 858, 937, 988, 1002, 1035], "seasonal_kernel": 158, "ration": [158, 622, 986], "diffus": 158, "accommod": [158, 1039], "rationalquadrat": [158, 162, 418, 615], "irregularities_kernel": 158, "shall": 158, "phenomena": 158, "noise_kernel": 158, "noise_level_bound": [158, 159, 624], "co2_kernel": 158, "subtract": [158, 171, 240, 411, 413, 442, 446, 458, 533, 643, 644, 649, 650, 653, 654, 655, 663, 664, 1038], "normalize_i": [158, 418, 610, 1045], "y_mean": [158, 159, 162, 610, 643, 644], "gaussianprocessregressorifittedgaussianprocessregressor": 158, "todai": [158, 393, 1024], "current_month": 158, "mean_y_pr": 158, "std_y_pr": 158, "536": [158, 163, 285, 1010], "968": [158, 170, 260], "0367": 158, "6ppm": 158, "plot_gpr_co2": [158, 163, 1010], "target_gener": 159, "add_nois": 159, "minima": [159, 189, 413, 446, 691, 985, 1023, 1039], "y_std": [159, 162, 551, 610, 643, 644, 1044], "k1__k2__length_scal": [159, 418], "noptimum": 159, "nlog": 159, "length_scale_grid": 159, "noise_level_grid": 159, "newshap": 159, "806": [159, 163, 648, 1010], "plot_gpr_noisi": [159, 163, 1010], "tikhonov": [160, 418, 671], "training_indic": 160, "n_restarts_optim": [160, 418, 609, 610], "std_predict": 160, "whenev": [160, 170, 363, 375, 389, 395, 398, 406, 481, 482, 483, 495, 627, 629, 979, 987, 1009, 1041], "noise_std": 160, "y_train_noisi": 160, "plot_gpr_noisy_target": [160, 163, 1010], "gene": [161, 375, 405, 450, 512, 592, 593, 847, 880], "among": [161, 172, 174, 177, 201, 252, 283, 361, 369, 376, 383, 395, 396, 406, 407, 411, 446, 448, 511, 518, 792, 825, 843, 848, 850, 902, 905, 908, 909, 910, 911, 977, 980, 988, 989, 995, 998, 1003, 1031, 1037, 1038, 1041], "brighter": 161, "6th": 161, "haussler": 161, "1999": [161, 376, 406, 408, 410, 413, 415, 436, 449, 456, 468, 473, 533, 540, 554, 555, 558, 559, 721, 894, 902, 903, 905, 906, 994, 1000], "646": 161, "technic": [161, 202, 223, 321, 376, 378, 381, 395, 415, 651, 663, 684, 685, 895, 984, 985, 991], "depart": [161, 408], "california": [161, 165, 166, 307, 313, 319, 374, 378, 489, 1026], "santa": [161, 1046], "cruz": 161, "generickernelmixin": [161, 1041], "sequencekernel": 161, "baseline_similar": 161, "baseline_similarity_bound": 161, "hyperparameter_baseline_similar": 161, "_f": [161, 984], "_g": 161, "__call__": [161, 339, 395, 416, 418, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 1038], "eval_gradi": [161, 418, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624], "is_stationari": [161, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624], "clone_with_theta": [161, 418, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624], "agct": 161, "agc": 161, "aact": 161, "taa": 161, "aaa": 161, "gaaca": 161, "training_idx": 161, "cga": 161, "taac": 161, "tcg": 161, "cttt": 161, "tgct": 161, "atag": 161, "ctc": 161, "plot_gpr_on_structured_data": [161, 163, 1010], "plot_gpr_sampl": 162, "gpr_model": 162, "y_sampl": [162, 610], "sample_i": [162, 418, 610, 1045], "single_prior": 162, "pm": [162, 172, 272, 415, 988], "dev": [162, 171, 219, 267, 272, 379, 381, 385, 387, 389, 988, 1013, 1027, 1038, 1043, 1046, 1047], "594": [162, 201], "279": [162, 984], "067": 162, "alpha_bound": [162, 622], "1e15": 162, "05e": 162, "799": [162, 353], "791": 162, "sigma_0_bound": [162, 613], "_gpr": 162, "663": [162, 894, 996, 1000], "lbfg": [162, 301, 383, 647, 648, 657, 658, 668, 671, 673, 679, 686, 831, 834, 857, 858, 984, 992, 1035, 1036, 1038, 1039, 1044, 1045, 1046, 1048], "abnormal_termination_in_lnsrch": 162, "7337046907": 162, "matern": [162, 418, 1042, 1046], "609": [162, 353, 387], "484": 162, "611": [162, 163, 260, 262, 540, 1010], "plot_gpr_prior_posterior": [162, 163, 1010], "297": [163, 376], "iterativeimput": [164, 166, 167, 168, 232, 399, 489, 564, 579, 627, 628, 629, 638, 644, 671, 822, 843, 861, 1010, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048], "robin": [165, 166, 626, 978, 1037, 1040, 1045, 1046], "kneighborsregressor": [165, 239, 297, 321, 415, 569, 842, 848, 850, 851, 991, 1031, 1033, 1035, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "mimic": [165, 201, 352, 815], "missforest": [165, 978], "popular": [165, 226, 376, 379, 386, 389, 393, 395, 407, 414, 415, 416, 418, 451, 461, 978, 980, 984, 986, 993, 1002, 1009, 1019, 1024], "enable_iterative_imput": [165, 166, 385, 626, 978, 1040], "x_full": [165, 166, 307], "y_full": [165, 166, 307], "2k": 165, "br_estim": 165, "score_full_data": 165, "neg_mean_squared_error": [165, 166, 203, 236, 276, 823, 988, 996, 1037], "x_miss": [165, 166], "y_miss": [165, 166], "missing_sampl": [165, 166], "missing_featur": [165, 166], "score_simple_imput": 165, "missing_valu": [165, 166, 242, 395, 626, 627, 628, 629, 767, 978, 1039, 1040], "score_iterative_imput": 165, "stricter": 165, "impute_estim": 165, "__class__": [165, 201, 203, 237, 240, 264, 309, 352, 353, 354, 388], "xerr": [165, 166, 353], "913": [165, 167, 415, 558, 1010], "plot_iterative_imputer_variants_comparison": [165, 167, 1010], "ness": [166, 219], "auxiliari": [166, 379, 407, 1013, 1046], "district": [166, 376], "neither": [166, 171, 317, 352, 363, 393, 436, 593, 627, 924, 991, 1004], "feel": [166, 307, 380, 381, 389, 408, 445, 1004], "x_diabet": [166, 1019], "y_diabet": [166, 1019], "x_california": 166, "y_california": 166, "add_missing_valu": 166, "missing_r": 166, "n_missing_sampl": 166, "x_miss_california": 166, "y_miss_california": 166, "x_miss_diabet": 166, "y_miss_diabet": 166, "knnimput": [166, 317, 626, 629, 978, 1041, 1042, 1045, 1046, 1047, 1048], "get_scores_for_imput": 166, "impute_scor": 166, "x_label": 166, "mses_california": 166, "stds_california": 166, "mses_diabet": 166, "stds_diabet": 166, "get_full_scor": 166, "full_scor": 166, "get_impute_zero_scor": 166, "fill_valu": [166, 232, 242, 318, 626, 629, 998, 1039, 1047], "zero_impute_scor": 166, "unweight": [166, 214, 462, 646, 652, 677, 706, 712, 727, 728, 736, 781, 782, 785, 786, 835, 836, 837, 838, 839, 978], "get_impute_knn_scor": 166, "knn_impute_scor": 166, "get_impute_mean": 166, "mean_impute_scor": 166, "obvious": [166, 367, 1024], "get_impute_it": 166, "n_nearest_featur": [166, 626], "sample_posterior": [166, 626, 978], "iterative_impute_scor": 166, "n_bar": 166, "xval": 166, "invert_yaxi": [166, 354], "532": [166, 167, 327, 332, 1010], "plot_missing_valu": [166, 167, 1010], "444": [167, 357, 362, 1010], "prune": [168, 356, 361, 362, 417, 499, 556, 557, 558, 559, 563, 564, 592, 643, 826, 908, 909, 910, 911, 991, 1010, 1011, 1026, 1031, 1034, 1041, 1042], "elast": [168, 179, 185, 187, 188, 192, 195, 212, 220, 234, 237, 275, 297, 407, 470, 471, 477, 500, 523, 645, 646, 651, 656, 657, 658, 659, 660, 661, 662, 667, 675, 677, 680, 683, 977, 988, 1002, 1010, 1011, 1026, 1031, 1036, 1040, 1041], "gram": [168, 179, 220, 237, 297, 383, 413, 416, 488, 523, 547, 587, 588, 589, 590, 645, 646, 649, 650, 651, 652, 653, 654, 655, 659, 660, 661, 662, 663, 664, 680, 681, 682, 683, 684, 685, 765, 773, 775, 977, 998, 1003, 1010, 1024, 1031, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1042, 1044, 1045], "theil": [168, 179, 204, 207, 220, 307, 648, 656, 670, 677, 678, 1010], "sen": [168, 179, 204, 207, 220, 307, 648, 656, 670, 677, 678, 1010], "tweedi": [168, 179, 201, 220, 463, 495, 551, 647, 668, 679, 705, 722, 743, 745, 747, 748, 750, 826, 861, 864, 865, 873, 880, 984, 1010, 1041, 1042, 1044], "insur": [168, 179, 201, 220, 463, 495, 551, 647, 668, 679, 705, 743, 748, 750, 826, 861, 864, 865, 873, 880, 984, 1010], "claim": [168, 179, 220, 381, 463, 495, 551, 647, 668, 679, 705, 743, 748, 750, 826, 861, 864, 865, 873, 880, 984, 1010], "failur": [168, 169, 171, 175, 196, 381, 389, 656, 783, 826, 920, 921, 1010, 1012, 1013, 1044, 1045], "infer": [168, 169, 171, 175, 196, 248, 252, 253, 262, 358, 375, 383, 393, 407, 412, 413, 495, 507, 508, 514, 533, 535, 537, 539, 546, 548, 549, 552, 558, 559, 631, 634, 656, 708, 721, 739, 783, 795, 796, 803, 819, 826, 836, 874, 881, 895, 896, 908, 909, 910, 911, 951, 978, 984, 987, 988, 993, 998, 1001, 1004, 1008, 1009, 1010, 1018, 1032, 1036, 1037, 1042, 1045, 1048], "causal": [168, 169, 175, 196, 656, 783, 826, 1010], "hole": [168, 221, 222, 223, 224, 227, 228, 529, 691, 692, 1010, 1045], "perplex": [168, 221, 222, 224, 226, 228, 285, 513, 524, 535, 691, 985, 1010, 1036, 1038, 1045], "det": [168, 243, 255, 271, 272, 278, 381, 410, 514, 563, 697, 701, 725, 787, 826, 861, 880, 900, 935, 1010, 1043], "tsne": [168, 222, 223, 224, 226, 227, 286, 287, 299, 321, 395, 422, 432, 495, 687, 688, 689, 844, 848, 861, 962, 985, 991, 1010, 1034, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "novelti": [168, 215, 230, 240, 286, 292, 299, 338, 846, 1010, 1011, 1025, 1026, 1031, 1039], "mlp": [168, 172, 241, 300, 302, 305, 495, 570, 826, 857, 858, 992, 1010], "semi_supervis": [168, 319, 321, 325, 326, 327, 328, 329, 330, 331, 332, 370, 399, 989, 1001, 1010, 1032, 1037, 1038, 1045, 1046], "tie": [168, 193, 334, 350, 393, 415, 511, 828, 905, 989, 1003, 1004, 1010, 1032, 1047], "unbalanc": [168, 265, 334, 337, 340, 350, 412, 511, 630, 905, 925, 926, 977, 1002, 1010], "auto_examples_python": 168, "auto_examples_jupyt": 168, "unless": [170, 237, 248, 253, 381, 383, 384, 393, 395, 406, 408, 411, 419, 436, 443, 445, 447, 449, 451, 456, 457, 460, 463, 466, 471, 488, 495, 507, 508, 530, 534, 535, 536, 538, 541, 542, 544, 545, 546, 547, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 593, 601, 609, 610, 631, 633, 638, 645, 646, 650, 651, 652, 654, 656, 657, 658, 660, 662, 664, 665, 667, 675, 678, 687, 688, 689, 690, 691, 692, 693, 708, 713, 772, 776, 779, 797, 800, 801, 803, 811, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 832, 833, 842, 843, 846, 848, 850, 851, 853, 854, 857, 858, 859, 862, 881, 885, 886, 888, 889, 890, 891, 895, 896, 908, 909, 910, 911, 916, 920, 921, 937, 956, 984, 987, 989, 1031, 1033, 1037, 1039, 1042, 1043], "willing": [170, 259], "econom": [170, 171, 262], "educ": [170, 171, 381, 715, 989], "earn": [170, 171, 396], "polici": [170, 171, 201, 219, 395, 534, 540, 984, 1046, 1048], "maker": [170, 171], "ovb": [170, 171], "parent_hourly_wag": 170, "college_degre": 170, "true_coef": [170, 185, 196], "hourly_wag": 170, "stori": [170, 262, 280, 376, 987], "pairplot": [170, 171], "diag_kind": [170, 171], "kde": [170, 171, 280, 289, 290, 298, 414, 845], "features_nam": [170, 1038], "regressor_with_": 170, "y_pred_with_": 170, "r2_with_abl": 170, "model_coef": 170, "intellectu": 170, "proxi": [170, 171, 413, 856, 1019, 1036], "inadvert": [170, 395], "iq": 170, "regressor_without_": 170, "y_pred_without_": 170, "r2_without_": 170, "brought": [170, 552, 553, 556, 557, 558, 559, 563, 564, 565, 908, 909, 910, 911], "unobserv": [170, 171, 413], "confound": [170, 171], "conduct": [170, 262, 418, 1045], "prohibit": [170, 412, 415, 626, 993, 1001, 1038], "uneth": 170, "iv": [170, 988], "plot_causal_interpret": [170, 175, 1010], "hint": [171, 367, 382, 386, 402, 447, 988, 1022], "aris": [171, 265, 347, 368, 386, 408, 714, 984, 985, 1043], "survei": [171, 411], "1985": [171, 408, 704, 714, 784], "534": [171, 260, 278, 1010], "race": [171, 376, 1034], "occup": [171, 307], "sector": 171, "marr": 171, "not_memb": 171, "marri": 171, "freq": [171, 185, 354], "378": [171, 353, 415, 1024, 1031], "438": [171, 996], "440": 171, "411": [171, 410, 420, 472, 532], "350": 171, "018727": 171, "822097": 171, "833333": 171, "615373": 171, "379710": 171, "726573": 171, "55": [171, 177, 196, 201, 219, 224, 327, 386, 408, 412, 490, 596, 797, 803, 811, 824, 988, 1031], "thereaft": [171, 180], "hispan": 171, "manufactur": 171, "unmarri": 171, "dollar": [171, 376], "exploratori": [171, 1013], "emul": [171, 389], "train_dataset": [171, 375], "rangeindex": 171, "533": 171, "normalis": [171, 610, 1024], "numerical_column": [171, 173, 466], "if_binari": [171, 244, 873, 998, 1042], "prepend": [171, 1031], "exp10": 171, "ufunc": 171, "transformedtargetregressortransformedtargetregressor": 171, "ridgeridg": 171, "mae_train": 171, "mae_test": 171, "learnt": [171, 314, 363, 395, 412, 881, 977, 998], "obviou": [171, 343, 363, 367, 405, 413], "regressor_": [171, 464, 592, 593, 596], "race_hispan": 171, "013519": 171, "race_oth": 171, "009075": 171, "race_whit": 171, "022594": 171, "occupation_cler": 171, "000045": 171, "occupation_manag": 171, "090528": 171, "occupation_oth": 171, "025102": 171, "occupation_profession": 171, "071964": 171, "occupation_sal": 171, "046636": 171, "occupation_servic": 171, "091053": 171, "sector_construct": 171, "000198": 171, "sector_manufactur": 171, "031255": 171, "sector_oth": 171, "031025": 171, "marr_unmarri": 171, "032405": 171, "union_not_memb": 171, "117154": 171, "sex_mal": 171, "090808": 171, "south_y": 171, "033823": 171, "054699": 171, "035005": 171, "030867": 171, "adimension": 171, "Their": [171, 376, 378, 396, 408, 643, 1031], "gaug": 171, "decad": [171, 1009], "x_train_preprocess": 171, "multipli": [171, 205, 219, 262, 367, 390, 395, 413, 415, 416, 421, 463, 474, 514, 537, 539, 540, 546, 556, 560, 563, 645, 647, 651, 653, 657, 658, 659, 661, 667, 668, 669, 671, 675, 676, 677, 679, 685, 686, 688, 692, 762, 902, 903, 904, 905, 906, 908, 910, 926, 964, 965, 966, 977, 980, 984, 988, 1002, 1042], "coef_i": 171, "std_i": 171, "emphas": [171, 349, 387, 413, 988], "perturb": [171, 218, 304, 413, 415, 987], "caution": [171, 385, 439, 453, 1039], "repeatedkfold": [171, 412, 802, 813, 1038], "cv_model": 171, "stripplot": 171, "whi": [171, 173], "collinear": [171, 174, 206, 219, 415, 566, 647, 668, 679, 873, 984, 1031], "teas": 171, "apart": [171, 320, 339, 393, 395, 409, 411, 417, 723, 1003, 1013, 1039], "vice": [171, 259, 352, 408, 418, 441, 606, 607, 829, 1035], "versa": [171, 259, 352, 408, 418, 441, 606, 607, 829, 1035], "column_to_drop": 171, "said": [171, 230, 263, 376, 381, 790, 986, 994, 1015, 1022], "unchang": [171, 219, 269, 415, 432, 436, 441, 442, 443, 444, 445, 446, 448, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 691, 761, 798, 799, 804, 806, 815, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 847, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 889, 892, 893, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 991, 1015, 1039, 1045, 1047], "neglig": [171, 991, 1034, 1048], "littl": [171, 172, 173, 174, 230, 376, 416, 461, 643, 797, 811, 937, 978, 985, 987, 1003, 1004, 1022, 1032, 1043, 1048], "alon": [171, 205, 268, 339, 395, 402, 406, 647, 668, 679, 740, 1038, 1040], "suppress": [171, 367, 389, 691, 991, 1038], "themselv": [171, 307, 377, 383, 389, 395, 399, 405, 408, 415, 416, 418, 445, 614, 790, 1004, 1024, 1041], "bring": [171, 307, 413, 675, 677, 985, 1008, 1013], "entic": 171, "pursu": 171, "tempt": 171, "deflat": [171, 411, 420, 532], "presum": [171, 283, 408, 416, 835], "respond": [171, 381, 408], "894": [171, 175, 1010], "plot_linear_model_coefficient_interpret": [171, 175, 1010], "complement": [172, 272, 352, 631, 632, 799, 814, 817, 826, 835, 836, 837, 838, 839, 995, 1011, 1026, 1039], "molnar": [172, 995], "christoph": [172, 413, 418, 531, 609, 610, 613, 618, 621, 795, 984, 989, 1032, 1036, 1039, 1042, 1043, 1044, 1045, 1046], "goldstein": [172, 995], "kapeln": [172, 995], "bleich": [172, 995], "pitkin": [172, 995], "peek": [172, 381, 995], "settingwithcopywarn": 172, "2284": 172, "904": [172, 260, 330, 409], "287": [172, 1000], "1747": 172, "1729": 172, "mask_train": [172, 219], "accordingli": [172, 240, 343, 381, 385, 386, 1038, 1039, 1046], "8640": 172, "115": [172, 996], "nomin": [172, 375, 395, 396, 415, 416, 580, 581, 715, 998, 1009], "numerical_featur": [172, 313], "xtick_start": 172, "xtick_period": 172, "average_bike_rent": 172, "numeric_onli": 172, "decor": [172, 317, 381, 382, 383, 390, 803, 819, 927, 931, 932, 949, 955, 1041, 1044, 1047], "strike": [172, 205], "mlp_preprocessor": 172, "quantiletransformerquantiletransform": 172, "catindex": 172, "hgbdt_preprocessor": 172, "sparse_threshold": [172, 463, 466, 1039], "mlp_model": 172, "hidden_layer_s": [172, 241, 301, 303, 857, 858, 992], "learning_rate_init": [172, 302, 303, 857, 858], "650": [172, 406], "forget": [172, 363, 368, 375, 385, 393, 413, 985, 1012], "poor": [172, 177, 268, 277, 329, 406, 412, 413, 689, 693, 736, 837, 840, 841, 982, 983, 985, 990, 1009, 1015, 1038, 1039, 1040, 1042, 1044], "grid_resolut": [172, 319, 337, 630, 631, 632], "features_info": 172, "927": [172, 436], "hgbdt_model": 172, "cheaper": [172, 408, 418, 672, 980, 984], "temperatur": [172, 416, 995], "wind": [172, 989], "meaningless": [172, 416, 902, 905, 1034], "429": [172, 280], "celsiu": [172, 995], "interaction_cst": [172, 322, 415, 560, 561, 1046], "hgbdt_model_without_interact": 172, "histgradientboostingregressor__interaction_cst": 172, "heatmap": [172, 174, 180, 185, 273, 322, 339, 631, 995], "340": [172, 236, 275, 278, 326, 1010], "slope": [172, 199, 203, 218, 408, 721, 746, 986, 988], "dry": 172, "wetter": 172, "126": [172, 415], "spike": 172, "degrad": [172, 230, 307, 347, 353, 414], "somehow": 172, "forbidden": [172, 415], "noisili": 172, "555": [172, 277, 278, 715, 1010], "partial_depend": [172, 631, 995, 1032, 1040, 1041, 1042, 1043, 1046, 1047], "grid_valu": [172, 632, 1047], "add_ax": [172, 226, 273], "surf": 172, "rstride": 172, "cstride": 172, "bupu": 172, "nthe": [172, 260, 361], "pretti": [172, 226, 260, 352, 367, 381, 393, 857, 858, 992, 1040], "view_init": [172, 222, 224, 226], "clb": 172, "ndepend": 172, "840": [172, 175, 387, 1010], "plot_partial_depend": [172, 175, 317, 318, 319, 1010, 1036, 1040, 1041, 1042, 1043, 1044, 1045], "breiman": [173, 412, 415, 515, 516, 517, 554, 555, 563, 564, 633, 908, 909, 996, 1004], "random_num": 173, "random_cat": 173, "sibsp": [173, 322], "parch": [173, 322], "categorical_encod": 173, "numerical_pip": 173, "memor": 173, "814": [173, 1022], "mdi_import": [173, 174], "sorted_importances_idx": 173, "retri": [173, 495, 1039, 1045], "classifier__min_samples_leaf": 173, "anymor": [173, 201, 264, 317, 318, 339, 363, 385, 409, 669, 1037, 1040, 1043, 1044, 1045, 1047, 1048], "810": 173, "832": [173, 415, 554, 555], "train_result": 173, "test_result": 173, "train_import": 173, "test_import": 173, "628": [173, 175, 353, 1010], "plot_permutation_import": [173, 174, 175, 1010], "contradict": [174, 1009], "spearman": [174, 634, 635, 979], "perm_sorted_idx": 174, "tree_importance_sorted_idx": 174, "tree_indic": 174, "gini": [174, 201, 219, 242, 274, 319, 552, 553, 556, 557, 558, 559, 563, 564, 565, 908, 909, 910, 911, 977, 996, 1004, 1039, 1040, 1047, 1048], "dilut": [174, 378], "012": [174, 177], "squareform": 174, "spearmanr": 174, "fill_diagon": [174, 225], "distance_matrix": 174, "dist_linkag": 174, "dendro": 174, "to_list": 174, "leaf_rot": 174, "dendro_idx": 174, "ivl": 174, "cluster_id": [174, 353], "fcluster": 174, "cluster_id_to_feature_id": 174, "selected_featur": 174, "selected_features_nam": 174, "x_train_sel": 174, "x_test_sel": 174, "clf_sel": 174, "plot_permutation_importance_multicollinear": [174, 175, 1010], "polynomialcountsketch": [177, 638, 640, 980, 1043, 1045, 1048], "covtyp": 177, "tensor": [177, 373, 404, 413, 537, 539, 546, 638, 639, 640, 1026, 1043], "sketch": [177, 369, 373, 390, 407, 638, 639, 640, 953, 1026, 1043], "daniel": [177, 322, 367, 881, 998, 1013, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1041, 1043, 1045, 1048], "lopez": 177, "sanchez": [177, 1039, 1040], "lope": 177, "usal": 177, "581": 177, "cartograph": 177, "remot": [177, 327, 381, 384], "fetch_covtyp": [177, 240, 319, 376, 1040, 1043, 1045], "5_000": 177, "mm": 177, "lsvm": 177, "lsvm_time": 177, "lsvm_score": 177, "condens": [177, 445], "ps_lsvm_time": 177, "ps_lsvm_score": 177, "ksvm": 177, "ksvm_time": 177, "ksvm_score": 177, "pham": [177, 980, 1038], "ninh": 177, "rasmu": [177, 1038], "pagh": [177, 980], "kdd": [177, 376, 406, 436, 1000], "doi": [177, 201, 219, 381, 408, 675], "1145": [177, 408, 675], "2487575": 177, "2487591": 177, "csie": [177, 375, 486, 507, 508, 657], "ntu": [177, 375, 486, 507, 508, 657], "tw": [177, 375, 486, 507, 508, 657, 1003], "cjlin": [177, 375, 486, 507, 508, 657, 1034], "libsvmtool": [177, 375, 486, 507, 508], "724": [177, 178, 1010], "plot_scalable_poly_kernel": [177, 178, 1010], "ard": [180, 643, 644], "ol": [180, 191, 196, 198, 199, 207, 218, 320, 655, 984], "true_weight": 180, "ardregress": [180, 185, 644, 984, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1047], "olr": 180, "brr": 180, "symlognorm": [180, 185], "linthresh": [180, 185], "10e": [180, 185], "cbar_kw": [180, 185], "seismic_r": [180, 185], "stabilis": 180, "retain": [180, 395, 408, 411, 412, 416, 436, 442, 443, 446, 448, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 493, 532, 533, 537, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 689, 694, 695, 798, 799, 804, 806, 815, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 845, 847, 850, 851, 857, 858, 860, 863, 865, 866, 867, 872, 873, 879, 880, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 977, 1001, 1031], "ard_scor": 180, "scores_": [180, 181, 591, 594, 595, 597, 598, 599, 643, 644, 658, 1031, 1041], "brr_score": 180, "cutoff": [180, 942, 998, 1040], "full_data": 180, "input_featur": [180, 383, 395, 424, 429, 441, 442, 444, 446, 448, 463, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 565, 566, 567, 568, 569, 580, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 687, 688, 691, 844, 849, 852, 856, 859, 860, 863, 864, 865, 866, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 1047], "x_plot": [180, 202, 207, 236, 265, 290, 312], "y_plot": [180, 202, 207, 265], "ard_poli": 180, "brr_poli": 180, "y_ard": 180, "y_ard_std": 180, "y_brr": 180, "y_brr_std": 180, "queri": [180, 288, 298, 367, 385, 414, 419, 443, 445, 449, 456, 551, 609, 610, 627, 643, 644, 724, 754, 840, 841, 842, 843, 844, 845, 846, 848, 850, 851, 852, 988, 991, 1004, 1008, 1033, 1035, 1036, 1039], "lambda_init": [180, 181, 644, 984, 1041], "intrins": [180, 395, 413, 415, 991, 996, 1002, 1043], "661": [180, 220, 1010], "plot_ard": [180, 220, 643, 1010], "alpha_init": [181, 644, 984, 1041], "yoshihiro": [181, 1041], "uchida": [181, 1041], "nimbus1after2a1sun7show": 181, "1234": [181, 250, 265, 381], "n_order": 181, "vander": 181, "ymean": 181, "ystd": 181, "pink": 181, "_init": 181, "lambda_": [181, 643, 644, 876, 984, 1038], "plot_bayesian_ridge_curvefit": [181, 220, 1010], "normalized_weight": 182, "x_offset": 182, "x_center": 182, "x_scale": [182, 870, 886, 998], "uncent": 182, "incorrectli": [182, 415, 416, 552, 558, 560, 732, 738, 988, 1032, 1037, 1039, 1040, 1042, 1047], "lm": 182, "98809919e": 182, "48938813e": 182, "03237920e": 182, "25349312e": 182, "53959628e": 182, "67451144e": 182, "00768662e": 182, "19112072e": 182, "07963978e": 182, "47987268e": 182, "76195467e": 182, "00393284e": 182, "07582983e": 182, "66670169e": 182, "65799352e": 182, "99891212e": 182, "58195950e": 182, "58667835e": 182, "98350372e": 182, "60836363e": 182, "00911944e": 182, "elasticnetifittedelasticnet": 182, "816": [182, 220, 263, 470, 471, 1010], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [182, 220, 1010], "huber": [183, 211, 407, 415, 559, 648, 675, 677, 1002, 1031, 1033, 1034, 1043], "mks542": 183, "x_outlier": [183, 215, 291, 292, 338], "y_outlier": 183, "epsilon_valu": 183, "intercept_": [183, 191, 193, 210, 238, 337, 344, 348, 383, 395, 481, 482, 483, 548, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 900, 901, 902, 903, 904, 905, 906, 982, 984, 1002, 1003, 1031, 1038, 1043, 1045, 1048], "coef_ridg": 183, "plot_huber_vs_ridg": [183, 220, 1010], "logreg": [184, 834], "048": [184, 220, 996, 1010], "plot_iris_logist": [184, 220, 1010], "underdetermin": 185, "time_step": [185, 858], "anti": [185, 363, 605, 835, 990], "9502547": 185, "8059798": 185, "63394388": 185, "70359377": 185, "62241605": 185, "84077985": 185, "30506066": 185, "63327171": 185, "74495357": 185, "02456369": 185, "random_sampl": [185, 840, 841, 845], "sensor": 185, "monitor": [185, 209, 384, 395, 552, 553, 558, 559, 560, 561, 992, 1034, 1039, 1041, 1043], "superposit": 185, "y_pred_lasso": 185, "r2_score_lasso": 185, "480": 185, "y_pred_ard": 185, "r2_score_ard": 185, "elasticnetcv": [185, 395, 399, 645, 651, 659, 660, 661, 662, 680, 984, 1031, 1034, 1042, 1044, 1045, 1048], "enet": [185, 275], "y_pred_enet": 185, "r2_score_enet": 185, "nlasso": 185, "meinshausen": 185, "yu": [185, 408, 451, 461, 657, 984, 992, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "246": [185, 996, 1031], "270": [185, 327], "plot_lasso_and_elasticnet": [185, 220, 1010], "penalis": [186, 199, 216, 695], "enet_path": [186, 395, 646, 1033, 1035, 1044], "lasso_path": [186, 650, 651, 652, 653, 654, 655, 662, 681, 682, 984, 1031, 1033, 1035, 1044], "alphas_lasso": 186, "coefs_lasso": 186, "alphas_positive_lasso": 186, "coefs_positive_lasso": 186, "alphas_enet": 186, "coefs_enet": 186, "alphas_positive_enet": 186, "coefs_positive_enet": 186, "neg_log_alphas_lasso": 186, "neg_log_alphas_enet": 186, "coef_l": 186, "neg_log_alphas_positive_lasso": 186, "coef_pl": 186, "neg_log_alphas_positive_enet": 186, "coef_p": 186, "303": [186, 219, 220, 634, 1010], "plot_lasso_coordinate_descent_path": [186, 220, 645, 646, 651, 652, 659, 660, 661, 662, 680, 683, 1010], "sai": [187, 230, 347, 352, 353, 381, 406, 408, 409, 413, 415, 416, 445, 446, 499, 503, 509, 676, 977, 994, 1001, 1013, 1021, 1022, 1024], "x_sp": 187, "sparse_lasso": 187, "dense_lasso": 187, "coeff_diff": 187, "2e": [187, 276], "105": [187, 311], "043": [187, 353, 387], "01e": 187, "xs_sp": 187, "tocsc": 187, "nnz": [187, 353, 376, 698], "183": [187, 225, 228, 327, 387, 989, 1010, 1031], "948": [187, 783, 988], "65e": 187, "342": [187, 220, 1010], "plot_lasso_dense_vs_sparse_data": [187, 220, 1010], "lars_path": [188, 390, 530, 536, 538, 541, 542, 544, 545, 547, 649, 650, 651, 652, 653, 654, 655, 662, 663, 664, 682, 683, 684, 685, 984, 1031, 1033, 1036, 1040, 1042], "plot_lasso_lar": [188, 220, 1010], "zht2007": 189, "lassolars": [189, 190, 417, 650, 653, 654, 984, 1031, 1038, 1040, 1044, 1045], "2173": [189, 655, 984], "2192": [189, 655, 984], "038076": [189, 190], "050680": [189, 190], "061696": [189, 190], "021872": [189, 190], "044223": [189, 190], "034821": [189, 190], "043401": [189, 190], "002592": [189, 190], "019907": [189, 190], "017646": [189, 190], "001882": [189, 190], "044642": [189, 190], "051474": [189, 190], "026328": [189, 190], "008449": [189, 190], "019163": [189, 190], "074412": [189, 190], "039493": [189, 190], "068332": [189, 190], "092204": [189, 190], "085299": [189, 190], "044451": [189, 190], "005670": [189, 190], "045599": [189, 190], "034194": [189, 190], "032356": [189, 190], "002861": [189, 190], "025930": [189, 190], "089063": [189, 190], "011595": [189, 190], "036656": [189, 190], "012191": [189, 190], "024991": [189, 190], "036038": [189, 190], "034309": [189, 190], "022688": [189, 190], "009362": [189, 190], "005383": [189, 190], "036385": [189, 190], "003935": [189, 190], "015596": [189, 190], "008142": [189, 190], "031988": [189, 190], "046641": [189, 190], "akaik": [189, 190, 252, 655, 796, 977, 984], "lasso_lars_": [189, 190], "zou_et_al_criterion_resc": 189, "noise_vari": [189, 531, 655, 984, 1045], "aic_criterion": 189, "criterion_": [189, 190, 655], "index_alpha_path_a": 189, "alphas_": [189, 190, 646, 649, 650, 652, 653, 654, 655, 660, 662, 681, 682, 1031, 1034, 1044], "lassolarsic__criterion": [189, 190], "bic_criterion": 189, "index_alpha_path_b": 189, "098": [189, 220, 1010], "plot_lasso_lars_": [189, 220, 1010], "n_random_featur": 190, "x_random": 190, "random_": 190, "02d": 190, "random_02": 190, "random_05": 190, "random_08": 190, "random_11": 190, "647689": 190, "234137": 190, "469474": 190, "465730": 190, "012831": 190, "412304": 190, "067528": 190, "110923": 190, "601707": 190, "057711": 190, "208864": 190, "196861": 190, "478522": 190, "057122": 190, "324084": 190, "611676": 190, "331263": 190, "185659": 190, "812526": 190, "003533": 190, "alpha_a": 190, "alpha_b": 190, "160030": 190, "5244": 190, "764779": 190, "300343": 190, "5208": 190, "250639": 190, "5212": 190, "341949": 190, "542052": 190, "4928": 190, "018900": 190, "4936": 190, "201520": 190, "034077": 190, "4869": 190, "678359": 190, "4881": [190, 1036], "952289": 190, "189631": 190, "4815": 190, "437362": 190, "4831": [190, 654], "802601": 190, "329616": 190, "4810": 190, "423641": 190, "4830": 190, "880191": 190, "306012": 190, "4803": 190, "573491": 190, "4828": 190, "121351": 190, "124225": 190, "4804": 190, "126502": 190, "4832": 190, "765671": 190, "820705": 190, "621645": 190, "4836": 190, "352124": 190, "750389": 190, "4805": 190, "012521": 190, "4841": 190, "834310": 190, "570655": 190, "290075": 190, "4846": 190, "203174": 190, "550213": 190, "4807": 190, "075887": 190, "4852": 190, "080295": 190, "358295": 190, "4806": 190, "878051": 190, "4855": 190, "973770": 190, "259297": 190, "706026": 190, "4860": 190, "893055": 190, "237703": 190, "4809": [190, 265], "440409": 190, "4866": 190, "718747": 190, "850031": 190, "989341": 190, "4867": 190, "358990": 190, "384338": 190, "4801": 190, "702266": 190, "163224": 190, "296575": 190, "4802": 190, "594754": 190, "4872": 190, "147022": 190, "031555": 190, "236720": 190, "4874": 190, "880298": 190, "618263": 190, "4798": 190, "484109": 190, "4876": 190, "218997": 190, "526599": 190, "4799": 190, "543841": 190, "370039": 190, "586798": 190, "4794": 190, "238744": 190, "4880": 190, "156252": 190, "445978": 190, "4795": 190, "589715": 190, "4885": 190, "598533": 190, "259031": 190, "4796": 190, "966981": 190, "4891": 190, "067109": 190, "032179": 190, "662409": 190, "4894": 190, "853846": 190, "019069": 190, "652739": 190, "4888": 190, "752867": 190, "626286": 190, "817724": 190, "set_xscal": [190, 206, 803], "badli": [190, 201, 352, 369, 880, 984, 998], "lassolarscv": [190, 399, 417, 651, 652, 653, 655, 662, 664, 681, 682, 683, 984, 1031, 1038, 1044, 1048], "3800": 190, "mse_path_": [190, 646, 650, 652, 654, 660, 662], "cv_alphas_": [190, 650, 654, 1043], "kink": 190, "heavili": [190, 367, 368, 381, 389, 648, 654, 1005], "efficaci": 190, "plot_lasso_model_select": [190, 220, 646, 652, 1010], "plot_logist": [191, 220, 1010], "axes_row": 192, "clf_l1_lr": 192, "clf_l2_lr": 192, "clf_en_lr": 192, "coef_l1_lr": 192, "coef_l2_lr": 192, "coef_en_lr": 192, "sparsity_l1_lr": 192, "sparsity_l2_lr": 192, "sparsity_en_lr": 192, "nl1_ratio": 192, "467": [192, 220, 1010], "plot_logistic_l1_l2_spars": [192, 220, 1010], "995": [193, 329, 332, 1010], "plot_logistic_multinomi": [193, 220, 1010], "976": [193, 270], "dupr": [193, 209, 285, 287, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "m4x": [193, 217], "sag": [193, 208, 657, 658, 671, 673, 686, 984, 1002, 1008, 1036, 1037, 1038, 1040, 1041], "bry": [193, 210], "plot_hyperplan": [193, 210, 238], "193": [193, 220, 387, 415, 714, 784, 1001, 1010], "looser": 194, "liblinear": [194, 337, 387, 657, 658, 786, 900, 901, 902, 905, 906, 984, 988, 1003, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1047], "l1_min_c": [194, 984, 1003, 1031], "intercept_sc": [194, 657, 658, 900, 901, 907, 984, 1003], "coefs_": [194, 303, 857, 858, 992, 1036], "plot_logistic_path": [194, 220, 1010], "jointli": [195, 269, 407, 408, 413, 984], "instant": 195, "wave": [195, 381, 987], "n_task": [195, 984], "n_relevant_featur": 195, "multitasklasso": [195, 651, 659, 662, 984, 1031, 1039, 1042, 1044], "coef_lasso_": 195, "coef_multi_task_lasso_": 195, "spy": 195, "feature_to_plot": 195, "seagreen": 195, "plot_multi_task_lasso_support": [195, 220, 1010], "reg_nnl": 196, "y_pred_nnl": 196, "r2_score_nnl": 196, "nnl": [196, 656], "8225220806196526": 196, "reg_ol": 196, "y_pred_ol": 196, "r2_score_ol": 196, "7436926291700353": 196, "low_x": 196, "high_x": 196, "low_i": 196, "high_i": 196, "get_ylim": [196, 307, 308], "847222222222214": 196, "plot_nnl": [196, 220, 1010], "23786125": 197, "2548": 197, "diabetes_x": [197, 1022], "diabetes_i": [197, 1022], "diabetes_x_train": [197, 1022], "diabetes_x_test": [197, 1022], "diabetes_y_train": [197, 1022], "diabetes_y_test": [197, 1022], "regr": [197, 409, 553, 555, 564, 645, 646, 666, 833, 858, 901, 903, 906, 1003, 1022], "diabetes_y_pr": 197, "040": [197, 220, 1010], "plot_ol": [197, 220, 1010], "plot_ols_3d": [198, 220, 1010], "greatli": [199, 235, 322, 381, 389, 451, 991, 1004, 1037, 1045], "plot_ols_ridge_vari": [199, 220, 1010], "make_sparse_coded_sign": [200, 530, 536, 1045, 1047], "orthogonalmatchingpursuit": [200, 664, 684, 685, 984, 1031, 1033, 1036, 1039, 1044], "orthogonalmatchingpursuitcv": [200, 399, 663, 1033, 1044, 1048], "n_nonzero_coef": [200, 525, 530, 536, 541, 547, 649, 663, 684, 685], "xw": [200, 320, 645, 646, 648, 651, 652, 653, 654, 655, 659, 660, 661, 662, 671, 680, 681, 682, 683, 984], "_0": [200, 684, 984, 988, 1003], "distort": [200, 234, 378, 406, 407, 877, 889, 894, 985, 998, 1000], "y_noisi": 200, "idx_r": 200, "omp_cv": 200, "195": [200, 220, 236, 276, 278, 492, 493, 1010], "plot_omp": [200, 220, 1010], "contract": [201, 219, 343, 368, 395, 1009], "compani": [201, 219, 408, 1013], "policyhold": [201, 219, 984], "vehicl": [201, 219], "driver": [201, 219, 1046], "exposur": [201, 219, 984], "car": 201, "accid": [201, 219], "noll": [201, 219], "salzmann": [201, 219], "wuthrich": [201, 219], "2139": [201, 219], "ssrn": [201, 219], "3164764": [201, 219], "ch": [201, 203, 219, 329, 331], "rth": [201, 219], "41214": [201, 219], "idpol": [201, 219], "claimnb": [201, 219], "vehpow": [201, 219], "vehag": [201, 219], "drivag": [201, 219], "bonusmalu": [201, 219], "vehbrand": [201, 219], "vehga": [201, 219], "b12": [201, 219], "1217": 201, "r82": 201, "77000": 201, "75000": 201, "diesel": [201, 219], "r22": 201, "09000": 201, "r72": 201, "84000": 201, "678008": 201, "6114326": 201, "00274": 201, "3317": 201, "r93": 201, "678009": 201, "6114327": 201, "9850": 201, "r11": [201, 219], "678010": 201, "6114328": 201, "1323": 201, "678011": 201, "6114329": 201, "r26": 201, "678012": 201, "6114330": 201, "678013": [201, 219], "10070308464041304": 201, "log_scale_transform": [201, 219], "linear_model_preprocessor": 201, "passthrough_numer": [201, 219], "binned_numer": [201, 219], "2e5": [201, 219], "log_scaled_numer": [201, 219], "onehot_categor": [201, 219], "imbalanc": [201, 265, 269, 271, 353, 393, 406, 412, 702, 707, 785, 798, 802, 837, 988, 990, 996, 1008], "simplist": [201, 416], "pertin": 201, "dummyregressor": [201, 219, 550, 988, 1032, 1034, 1035, 1038, 1039, 1041, 1044, 1045], "df_train": [201, 219], "df_test": [201, 219], "regressor__sample_weight": 201, "mean_poisson_devi": [201, 988, 1041], "score_estim": [201, 219], "n_mask": 201, "564": [201, 250, 254, 1010], "commonli": [201, 259, 343, 374, 395, 408, 409, 418, 613, 756, 757, 795, 829, 872, 985, 986, 988, 989, 991, 1047], "ridge_glm": 201, "strictli": [201, 219, 237, 307, 323, 353, 386, 395, 406, 411, 413, 416, 507, 508, 534, 540, 543, 560, 561, 587, 590, 641, 669, 670, 694, 699, 737, 764, 797, 800, 801, 807, 811, 823, 849, 876, 888, 892, 893, 895, 896, 900, 901, 905, 906, 935, 977, 979, 984, 988, 998, 1002, 1032, 1042, 1047], "domain": [201, 313, 395, 397, 412, 634, 720, 721, 722, 798, 799, 804, 805, 806, 984, 1009], "560": [201, 516, 517], "186": [201, 304, 330, 387, 786, 988], "595": 201, "223745": 201, "597": 201, "glm": [201, 219, 318, 647, 668, 679, 984, 1031, 1042], "vanilla": [201, 404, 408, 446, 448, 459, 628], "poissonregressor": [201, 219, 318, 321, 647, 679, 984, 1042, 1045, 1046], "poisson_glm": 201, "newton": [201, 219, 304, 609, 647, 657, 658, 668, 679, 857, 858, 984, 1035, 1036, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "deep": [201, 383, 395, 415, 422, 433, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 767, 795, 796, 797, 800, 801, 811, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 992, 993, 1008, 1009, 1013, 1036, 1042, 1043, 1045], "implicit": [201, 395, 415, 416, 571, 681, 682, 982, 987, 1008, 1040], "concis": [201, 381, 386, 1042, 1044], "poisson_gbrt": 201, "566": 201, "prone": [201, 249, 311, 393, 406], "set_yscal": [201, 803], "5e5": 201, "realiz": [201, 1013], "priori": [201, 218, 271, 283, 307, 395, 408, 415, 587, 593, 987, 1047], "wrongli": [201, 339], "gen_even_slic": [201, 390, 940], "_mean_frequency_by_risk_group": 201, "y_true_bin": 201, "y_pred_bin": 201, "idx_sort": 201, "sl": 201, "y_true_seg": 201, "y_pred_seg": 201, "11935": 201, "11933": 201, "11932": 201, "12196": 201, "11931": 201, "portfolio": [201, 219, 982], "riskiest": [201, 219], "safest": [201, 219, 363, 375], "irrespect": [201, 234, 271, 285, 605], "lorenz": [201, 219, 1036], "summar": [201, 253, 269, 271, 354, 381, 383, 397, 415, 520, 657, 693, 705, 706, 984, 985, 988, 994], "lorenz_curv": [201, 219], "ranked_frequ": 201, "ranked_exposur": [201, 219], "cumulated_claim": 201, "cumulated_exposur": 201, "cum_exposur": 201, "cum_claim": [201, 219], "0x7f2b9a9a41f0": 201, "occurr": [201, 313, 353, 354, 376, 381, 408, 416, 568, 569, 580, 588, 589, 616, 626, 627, 628, 629, 781, 835, 863, 990, 1032, 1037], "circumstanti": 201, "extractor": [201, 304, 369, 376, 395, 416, 502, 580, 581, 587, 588, 590, 977, 1031], "discrim": 201, "profil": [201, 367, 381, 384, 520, 523, 984, 1013], "ideal": [201, 203, 219, 259, 262, 269, 271, 272, 363, 380, 381, 385, 386, 389, 393, 395, 406, 724, 754, 977, 987, 1002, 1003, 1009], "meaningfulli": [201, 988], "667": [201, 220, 719, 738, 988, 1010], "plot_poisson_regression_non_normal_loss": [201, 220, 1010], "monomi": 202, "vandermond": [202, 998], "x_0": [202, 656], "pseudo": [202, 304, 383, 412, 420, 439, 451, 453, 461, 468, 469, 470, 472, 473, 474, 475, 532, 560, 561, 562, 626, 633, 638, 640, 641, 645, 646, 651, 652, 659, 660, 661, 662, 676, 690, 694, 800, 801, 809, 811, 849, 856, 892, 893, 897, 900, 901, 902, 905, 936, 937, 984, 1000, 1036, 1045], "basis_1": 202, "basis_2": 202, "infinit": [202, 247, 265, 343, 367, 418, 445, 621, 622, 776, 795, 918, 920, 921, 980, 987, 998, 1003, 1039, 1041, 1044, 1045, 1046], "malt": [202, 1044, 1045, 1046], "londschien": [202, 1044], "prepar": [202, 237, 352, 367, 383, 384, 387, 389, 1004, 1013, 1039, 1047], "set_prop_cycl": 202, "teal": [202, 211, 269], "yellowgreen": [202, 204, 211, 359], "tomato": 202, "unwant": [202, 352], "oscillatori": [202, 998], "danger": [202, 412], "pft": 202, "splt": 202, "bsplines_": [202, 879], "refrain": [202, 381], "dec": [202, 280, 676, 879, 904, 1003], "31st": [202, 879], "x_plot_ext": 202, "y_plot_ext": 202, "487": [202, 220, 722, 1010], "plot_polynomial_interpol": [202, 220, 875, 879, 1010], "pareto": 203, "dale": [203, 1044], "mail": [203, 312, 376, 381, 385, 389, 393, 396, 1006, 1039, 1040], "ru": 203, "glemaitre58": 203, "y_true_mean": 203, "y_normal": 203, "y_pareto": 203, "huge": [203, 206, 367, 387, 626, 1034], "heavi": [203, 405, 1009], "parse_vers": [203, 669], "sp_version": [203, 669], "incompat": [203, 385, 495, 978, 1039, 1040], "older": [203, 237, 380, 385, 1034, 1041, 1043], "interior": [203, 669, 984, 1046], "out_bounds_predict": 203, "bool_": 203, "logical_or": [203, 209, 271, 387], "hit": [203, 387], "asymmetri": [203, 352], "linger": 203, "linear_regress": [203, 276], "quantile_regress": 203, "y_pred_lr": 203, "y_pred_qr": 203, "805": 203, "486": [203, 313, 315, 1010], "670": 203, "cv_results_lr": 203, "cv_results_qr": 203, "test_neg_mean_squared_error": [203, 823], "732": 203, "690": 203, "679": [203, 900], "129": [203, 1020, 1031], "639": [203, 220, 1010], "plot_quantile_regress": [203, 220, 1010], "robustli": [204, 407], "faulti": [204, 1031], "1903908407869": 204, "17236387": 204, "08533159": 204, "ransacregressor": [204, 207, 218, 399, 648, 677, 678, 984, 1034, 1036, 1037, 1038, 1039, 1042, 1044, 1045], "inlier_mask": 204, "inlier_mask_": [204, 670], "outlier_mask": 204, "line_x": [204, 218], "line_i": 204, "line_y_ransac": 204, "estimator_": [204, 237, 552, 553, 554, 555, 556, 557, 562, 563, 564, 565, 592, 593, 596, 670, 972, 1046], "093": [204, 220, 236, 470, 1010, 1036], "plot_ransac": [204, 220, 1010], "mathcal": [205, 347, 413, 415, 626, 695, 980, 982, 984, 988, 1002, 1044], "discourag": [205, 393, 398, 688], "beta_": [205, 413], "excess": [205, 445, 998, 1038], "encourag": [205, 301, 339, 380, 381, 393, 1003, 1008], "kornel": [205, 1037], "kielczewski": [205, 1037], "plusnet": 205, "32634568": 205, "49665188": 205, "75747153": 205, "08699432": 205, "44381023": 205, "69892343": 205, "28808734": 205, "75949622": 205, "errors_coef": 205, "regularis": [205, 421, 472, 474], "logx": [205, 347], "gradual": [205, 857, 858, 1002], "formerli": [205, 1032, 1035, 1037, 1038], "intric": [205, 511], "rapidli": [205, 264, 1003, 1013, 1018], "influenti": [205, 353, 1013], "pose": [205, 270, 984, 1023], "lose": [205, 218, 354, 376, 395, 411, 416, 418, 936, 937, 978, 984, 1024], "concret": [205, 382, 396, 417, 667, 673, 674, 675, 676, 892, 893, 984, 1002, 1008], "662": [205, 220, 1010], "plot_ridge_coeff": [205, 220, 1010], "practis": 206, "10x10": 206, "hilbert": [206, 866, 980, 998], "n_alpha": [206, 471, 645, 646, 649, 650, 651, 652, 653, 654, 655, 659, 660, 661, 662, 672, 674, 680, 681, 682, 683, 1034], "plot_ridge_path": [206, 220, 1010], "theilsen": 207, "lessen": [207, 657, 658], "theilsenregressor": [207, 218, 648, 670, 677, 984, 1035, 1043, 1045], "x_error": 207, "y_errors_larg": 207, "x_errors_larg": 207, "deviant": [207, 994], "legend_titl": 207, "nabsolut": 207, "nto": [207, 271], "804": [207, 220, 1010], "plot_robust_fit": [207, 220, 1010], "asgd": [208, 1002], "rob": [208, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1043, 1046], "zinkov": [208, 1031, 1032, 1033, 1035, 1036], "heldout": 208, "squared_hing": [208, 347, 665, 675, 900, 907, 984, 1003], "0e4": 208, "yy_": 208, "plot_sgd_comparison": [208, 220, 1010], "_test": [209, 309, 383, 1044], "ignore_warn": [209, 309, 1037], "load_mnist": [209, 285], "class_0": [209, 378, 509], "class_1": [209, 378, 509], "mnist_784": [209, 217, 285, 303], "fit_and_scor": 209, "train_scor": [209, 313, 347, 357, 803, 819, 823, 824, 827, 983], "estimator_dict": 209, "flush": 209, "results_df": [209, 262, 313], "group_df": 209, "525": [209, 220, 438, 627, 978, 1010], "plot_sgd_early_stop": [209, 220, 1010], "ova": [210, 665, 667, 675, 1002], "plot_sgd_iri": [210, 220, 1010], "ugli": [210, 293, 296, 335], "dim": [210, 234, 293, 294, 296, 335, 336, 526, 698, 1048], "modified_huber_loss": 211, "darkorchid": 211, "103": [211, 220, 283, 285, 359, 362, 376, 415, 496, 554, 555, 1010, 1031], "plot_sgd_loss_funct": [211, 220, 1010], "l1_color": 212, "l2_color": 212, "elastic_net_color": 212, "1001": [212, 244], "rho": [212, 413, 676, 984, 1002, 1032], "elastic_net": 212, "dpi": [212, 914, 1044], "elastic_net_contour": 212, "l2_contour": 212, "l1_contour": 212, "262": [212, 220, 263, 324, 1010, 1031], "plot_sgd_penalti": [212, 220, 1010], "ndenumer": 213, "plot_sgd_separating_hyperplan": [213, 220, 1010], "no_weight": 214, "samples_weight": 214, "no_weights_handl": 214, "weights_handl": 214, "plot_sgd_weighted_sampl": [214, 220, 1010], "sgdoneclasssvm": [215, 230, 320, 904, 994, 1002, 1044, 1046, 1047], "rc": [215, 385], "novel": [215, 291, 338, 363, 406, 977], "abnorm": [215, 230, 291, 338, 376, 491, 562, 846, 994, 1039], "y_pred_train": [215, 338], "y_pred_test": [215, 291, 338], "y_pred_outli": [215, 291, 338], "n_error_train": [215, 338], "n_error_test": [215, 291, 338], "n_error_outli": [215, 291, 338], "clf_sgd": 215, "pipe_sgd": 215, "y_pred_train_sgd": 215, "y_pred_test_sgd": 215, "y_pred_outliers_sgd": 215, "n_error_train_sgd": 215, "n_error_test_sgd": 215, "n_error_outliers_sgd": 215, "pubu": [215, 234, 291, 338], "darkr": [215, 291, 338], "palevioletr": [215, 291, 338], "b1": [215, 291, 338], "b2": [215, 291, 338], "blueviolet": [215, 291, 338], "plot_sgdocsvm_vs_ocsvm": [215, 220, 1010], "newgroups20": 216, "trim": [216, 408, 840, 841], "20newsgroup": [216, 374, 1031], "4500": 216, "130107": [216, 234, 488], "epoch": [216, 395, 535, 665, 666, 667, 675, 676, 677, 857, 858, 1002, 1038, 1039, 1044], "5960": 216, "26593496": 216, "43348936": 216, "26362917": 216, "31973683": 216, "37815029": 216, "2928359": 216, "27054655": 216, "62717609": 216, "19522393": 216, "30897646": 216, "34586917": 216, "28207552": 216, "34125758": 216, "29898468": 216, "34279478": 216, "59489497": 216, "38353048": 216, "35278655": 216, "19829832": 216, "14603365": 216, "6440": 216, "36047253": 216, "1268187": 216, "10606655": 216, "17985197": 216, "5395559": 216, "07993421": 216, "06686804": 216, "21443888": 216, "11528972": 216, "2075215": 216, "10914094": 216, "11144673": 216, "13988486": 216, "09684337": 216, "26286057": 216, "11682692": 216, "55800226": 216, "17370318": 216, "11452112": 216, "606": [216, 612, 830, 989], "arthur": [216, 217, 408, 446, 459, 1036, 1037, 1038, 1039, 1040, 1043, 1045], "mensch": [216, 217, 1036, 1037, 1038, 1039], "timeit": [216, 250, 387], "default_tim": [216, 250], "model_param": 216, "this_max_it": 216, "train_tim": [216, 236, 352, 353], "ndataset": [216, 309], "run_tim": [216, 217], "plot_sparse_logistic_regression_20newsgroup": [216, 220, 1010], "8253": 217, "371": 217, "l1_plot": 217, "437": [217, 220, 353, 1010], "plot_sparse_logistic_regression_mnist": [217, 220, 1010], "subpopul": [218, 678, 984], "residual_threshold": [218, 670, 984, 1044], "remedi": 218, "max_subpopul": [218, 678, 1045], "florian": [218, 1013, 1031, 1035, 1037, 1041], "wilhelm": [218, 1035, 1037, 1041], "indigo": 218, "561": [218, 220, 408, 1010], "plot_theilsen": [218, 220, 1010], "motor": 219, "parti": [219, 280, 323, 368, 380, 393, 799, 806, 956, 1006, 1031, 1042, 1047, 1048], "liabil": 219, "functool": 219, "mean_tweedie_devi": [219, 988, 1041], "load_mtpl2": 219, "fremtpl2freq": 219, "df_freq": 219, "fremtpl2sev": 219, "41215": 219, "df_sev": 219, "claimamount": 219, "fillna": [219, 240], "unquot": 219, "column_nam": 219, "plot_obs_pr": 219, "y_label": 219, "fill_legend": 219, "df_": 219, "tweedie_pow": 219, "d\u00b2": 219, "subset_label": 219, "score_label": [219, 268], "est_freq": 219, "est_sev": 219, "unstack": [219, 265], "fremtpl2": 219, "unreason": [219, 412], "exception": 219, "200000": 219, "column_tran": [219, 409], "purepremium": 219, "indirectli": [219, 343], "avgclaimamount": 219, "fmax": 219, "option_context": 219, "max_column": 219, "139": [219, 285, 387, 415, 451, 461, 690, 694, 989], "414": [219, 409, 724, 754, 876, 888, 988], "463": [219, 280], "27000": 219, "404": 219, "333333": 219, "r25": 219, "1981": [219, 984], "14156": 219, "142857": 219, "4792": 219, "1456": 219, "10403": 219, "928571": 219, "10834": 219, "17474": 219, "193548": 219, "225806": 219, "r73": 219, "3986": 219, "12860": [219, 1040], "5417": 219, "seemingli": [219, 363, 393], "169504": 219, "6237": 219, "upon": [219, 227, 298, 376, 381, 393, 395, 402, 560, 561, 626, 629, 670, 787, 795, 796, 840, 841, 977, 984, 1004, 1015, 1024, 1045], "glm_freq": 219, "0448": 219, "0427": [219, 468, 473], "1379": 219, "1378": 219, "2441": 219, "2246": 219, "surprisingli": [219, 376, 416], "bonu": [219, 381, 1019, 1024], "malu": 219, "younger": 219, "infti": [219, 418, 618, 984, 998, 1038], "gammaregressor": [219, 318, 321, 679, 984, 1042, 1045, 1046], "mask_test": 219, "glm_sev": 219, "900000e": 219, "400000e": 219, "756746e": 219, "744042e": 219, "801770e": 219, "030677e": 219, "dummy_sev": 219, "000000e": 219, "756687e": 219, "744497e": 219, "803882e": 219, "033764e": 219, "avgclaim": 219, "nbclaim": 219, "1951": 219, "1940": 219, "1978": [219, 984], "apriori": 219, "regardless": [219, 263, 264, 265, 368, 381, 408, 534, 631, 632, 657, 703, 714, 988, 1000, 1039, 1046, 1047], "glm_pure_premium": 219, "999": [219, 262, 385, 415, 716, 857, 858], "scores_product_model": 219, "scores_glm_pure_premium": 219, "expand_frame_repr": 219, "640000e": 219, "370000e": 219, "669930e": 219, "617050e": 219, "640770e": 219, "640880e": 219, "7000": 219, "695740e": 219, "683980e": 219, "682880e": 219, "692270e": 219, "8000": [219, 265, 266], "046010e": 219, "040530e": 219, "037600e": 219, "045390e": 219, "9000": 219, "387580e": 219, "385000e": 219, "382120e": 219, "387830e": 219, "9900": 219, "015716e": 219, "015414e": 219, "015347e": 219, "015587e": 219, "9990": 219, "914573e": 219, "914370e": 219, "914538e": 219, "914387e": 219, "904751e": 219, "904556e": 219, "904747e": 219, "904558e": 219, "730119e": 219, "722128e": 219, "739865e": 219, "731249e": 219, "295040e": 219, "212197e": 219, "295505e": 219, "213056e": 219, "917618e": 219, "299546e": 219, "916555e": 219, "313276e": 219, "951751e": 219, "325198e": 219, "riski": 219, "operation": [219, 1013], "simpler": [219, 339, 367, 380, 408, 413, 984, 989, 1022, 1036], "ranked_pure_premium": 219, "cumulated_claim_amount": 219, "cumulated_sampl": 219, "y_pred_product": 219, "y_pred_tot": 219, "ordered_sampl": 219, "971": [219, 220, 1010], "plot_tweedie_regression_insurance_claim": [219, 220, 1010], "md": [222, 223, 224, 225, 385, 687, 691, 693, 1025, 1026, 1031, 1043, 1046], "seek": [222, 224, 226, 380, 381, 393, 396, 507, 508, 985, 1016, 1018], "ticker": [222, 224, 227, 285], "s_point": 222, "s_color": 222, "make_s_curv": [222, 227], "plot_3d": 222, "points_color": 222, "subplot_kw": [222, 289], "set_major_loc": [222, 290], "multipleloc": [222, 290], "add_2d_scatt": 222, "set_major_formatt": [222, 224, 227, 285, 290], "nullformatt": [222, 224, 227, 285], "lle": [222, 223, 224, 226, 529, 688, 692, 985, 1043], "thought": [222, 290, 395, 408, 445, 985, 989], "analys": [222, 361, 413, 800, 801, 985, 1008, 1013], "lle_standard": 222, "s_standard": 222, "lle_ltsa": 222, "ltsa": [222, 223, 224, 688, 692, 985], "s_ltsa": 222, "lle_hessian": 222, "hessian": [222, 223, 224, 415, 647, 657, 658, 668, 679, 688, 692, 984, 992, 1025, 1026, 1046], "s_hessian": 222, "lle_mod": 222, "s_mod": 222, "lle_method": 222, "tangent": [222, 343, 688, 692, 986, 1025, 1026], "eigenmap": [222, 688, 690, 692, 694, 1025, 1026, 1032], "isometr": [222, 687, 689, 690, 691, 985], "geodes": [222, 687, 985], "s_isomap": 222, "md_scale": 222, "normalized_stress": [222, 223, 224, 225, 689, 693, 985, 1046], "s_scale": 222, "laplacian": [222, 373, 405, 439, 451, 461, 619, 638, 642, 690, 694, 763, 764, 772, 896, 984, 985, 1001, 1026, 1032, 1037], "s_spectral": 222, "t_sne": [222, 1039], "s_t_sne": 222, "892": [222, 228, 1010], "plot_compare_method": [222, 228, 1010], "offsetbox": 223, "plot_embed": 223, "425": [223, 614], "shown_imag": 223, "someth": [223, 237, 280, 352, 381, 383, 384, 385, 389, 416, 988, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "4e": 223, "imagebox": 223, "annotationbbox": 223, "offsetimag": 223, "neighborhoodcomponentsanalysi": [223, 293, 294, 295, 991, 1040, 1045], "random_project": [223, 234, 370, 1000, 1005, 1032, 1037, 1047, 1048], "sparserandomproject": [223, 234, 892, 1000, 1032, 1037, 1045, 1047, 1048], "n_iter_without_progress": [223, 691, 1036, 1037], "nca": [223, 293, 294, 295, 849, 991], "660": [223, 228, 244, 271, 278, 1010], "plot_lle_digit": [223, 228, 1010], "pole": 224, "thin": [224, 619], "earth": [224, 353, 762, 1008], "064": [224, 387, 996], "045": [224, 227, 228, 237, 245, 721, 1010], "sphere_data": 224, "trans_data": 224, "2g": [224, 227, 696, 1042], "257": [224, 260], "258": 224, "544": [224, 228, 1010], "plot_manifold_spher": [224, 228, 1010], "euclidean_dist": [225, 234, 383, 449, 456, 687, 760, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 1031, 1036, 1039, 1040, 1048], "finfo": [225, 470, 471, 477, 605, 649, 650, 653, 654, 655, 681, 682, 739, 1046], "x_true": 225, "dissimilar": [225, 343, 395, 405, 451, 689, 693, 985, 1037, 1047], "embedding_": [225, 395, 687, 688, 689, 690, 691], "nmd": 225, "npo": 225, "plot_md": [225, 228, 1010], "sr_point": 226, "sr_color": 226, "ambient": 226, "text2d": 226, "unrol": 226, "unnecessarili": [226, 1038, 1041], "clump": 226, "sr_lle": 226, "sr_err": 226, "locally_linear_embed": [226, 985], "sr_tsne": 226, "stretch": [226, 251], "byproduct": 226, "sh_point": 226, "sh_color": 226, "topologi": [226, 227], "sh_lle": 226, "sh_err": 226, "sh_tsne": 226, "826": [226, 228, 1010], "plot_swissrol": [226, 228, 1010], "tendenc": [227, 984, 985, 987, 990, 993], "clearer": [227, 1003], "distil": 227, "pub": [227, 838, 895], "misread": 227, "narin": [227, 1038, 1039], "kokhlikyan": [227, 1038, 1039], "plot_t_sne_perplex": [227, 228, 1010], "cope": [230, 369, 376, 984], "multimod": 230, "inli": [230, 984, 994], "unimod": [230, 473], "localoutlierfactor": [230, 240, 291, 292, 321, 395, 562, 904, 994, 1038, 1039, 1041, 1045, 1046, 1047, 1048], "modal": [230, 473, 939], "hypercub": [230, 514], "decent": [230, 261, 376, 990], "handpick": 230, "absenc": [230, 265, 395, 711, 863, 987, 988], "negative_linestyl": 230, "outliers_fract": 230, "n_inlier": 230, "anomaly_algorithm": 230, "blobs_param": 230, "plot_anomaly_comparison": [230, 245, 1010], "transfus": 231, "1464": 231, "donat": 231, "cm_displai": 231, "y_score": [231, 269, 271, 395, 481, 482, 483, 706, 719, 724, 725, 737, 738, 754, 780, 786, 787, 792, 797, 800, 801, 811, 860, 988, 1037, 1045, 1047], "pos_label": [231, 240, 395, 437, 438, 697, 699, 701, 705, 706, 708, 725, 727, 728, 736, 780, 781, 782, 785, 787, 867, 884, 988, 1039, 1043, 1045], "roc_displai": 231, "previs": 231, "precision_recall_curv": [231, 269, 699, 705, 706, 725, 988, 1032, 1033, 1037, 1044, 1045, 1047], "pr_displai": 231, "easlii": 231, "plot_display_object_visu": [231, 245, 1010], "summaris": [232, 318], "composit": [232, 318, 370, 373, 412, 657, 786, 978, 984, 997, 1026, 1032], "num_proc": [232, 318], "cat_proc": [232, 318], "feat1": [232, 318, 416], "feat3": [232, 318, 416], "feat0": [232, 318], "feat2": [232, 318, 416], "plot_estimator_represent": [232, 245, 1010], "isotonicregress": [233, 979, 1032, 1033, 1034, 1035, 1037, 1039, 1040, 1041, 1043, 1045, 1046, 1047], "ir": [233, 413, 589, 724, 754, 835, 839, 986, 988], "out_of_bound": [233, 634], "y_": [233, 248, 252, 253, 297, 383, 411, 413, 636, 647, 668, 679, 727, 728, 736, 762, 781, 782, 785, 984, 988, 1037], "linearregressionifittedlinearregress": 233, "x_thresholds_": [233, 634, 1043], "y_thresholds_": [233, 634, 1043], "plot_isotonic_regress": [233, 245, 1010], "lemma": [234, 373, 407, 533, 540, 548, 892, 893, 894, 982, 1026, 1034], "johnson_lindenstrauss_min_dim": [234, 1000, 1032], "achliopta": [234, 893, 894, 1000], "_compon": [234, 535], "geq": [234, 406, 413, 415, 984, 988, 998, 1002, 1003], "_sampl": [234, 413, 537, 539, 546], "admiss": [234, 368], "eps_rang": 234, "min_n_compon": 234, "nn_sampl": [234, 274], "semilogi": 234, "nn_compon": [234, 235], "100k": 234, "n_components_rang": 234, "rp": 234, "projected_data": 234, "n_byte": 234, "projected_dist": 234, "min_dist": 234, "max_dist": 234, "hexbin": 234, "gridsiz": 234, "830": 234, "471": [234, 378], "268": [234, 248], "jl": [234, 893], "436": 234, "plot_johnson_lindenstrauss_bound": [234, 245, 1010], "rbfsampler": [235, 638, 639, 641, 980, 1015, 1035, 1045, 1046], "mont": [235, 418, 610, 640, 641, 980, 993], "fourier": [235, 407, 637, 638, 639, 640, 641, 756, 757, 980], "acceler": [235, 322, 367, 393, 404, 408, 467, 691, 898, 985, 1008, 1013, 1040, 1044, 1046, 1048], "data_train": [235, 263, 352], "targets_train": 235, "data_test": [235, 263, 352], "targets_test": 235, "kernel_svm": 235, "linear_svm": 235, "feature_map_fouri": 235, "feature_map_nystroem": [235, 638], "fourier_approx_svm": 235, "feature_map": [235, 307], "nystroem_approx_svm": 235, "kernel_svm_tim": 235, "kernel_svm_scor": 235, "linear_svm_tim": 235, "linear_svm_scor": 235, "fourier_scor": 235, "nystroem_scor": 235, "fourier_tim": 235, "nystroem_tim": 235, "feature_map__n_compon": 235, "timescal": 235, "ly": [235, 848, 850, 851, 852, 1035], "flat_grid": 235, "lv_ep": 235, "tab10": [235, 252], "747": [235, 245, 1010], "plot_kernel_approxim": [235, 245, 1010], "krr": [236, 642, 981], "insensit": [236, 642, 675, 677, 786, 901, 981, 1002, 1003, 1031], "fifth": [236, 981, 1015], "kr": [236, 262, 1045], "svr_fit": 236, "kr_fit": 236, "sv_ratio": 236, "support_": [236, 346, 468, 473, 592, 593, 601, 902, 903, 904, 905, 906, 1003], "y_svr": 236, "svr_predict": 236, "y_kr": 236, "kr_predict": 236, "09999999999999999": [236, 270, 339], "737": [236, 523], "510": [236, 1022], "sv_ind": 236, "arithmet": [236, 387, 389, 408, 550, 647, 668, 679, 703, 716, 734, 735, 755, 793, 988, 1039], "test_tim": [236, 352], "train_test_s": 236, "learningcurvedisplai": [236, 264, 322, 983, 1046, 1047], "negate_scor": [236, 803, 819], "score_typ": [236, 264, 277, 323, 803, 819, 1047], "std_display_styl": [236, 264, 803, 819], "get_legend_handles_label": [236, 264, 269], "412": [236, 245, 495, 984, 1010], "plot_kernel_ridge_regress": [236, 245, 1010], "set_config": [237, 242, 244, 314, 318, 367, 368, 399, 409, 436, 442, 443, 446, 448, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 532, 533, 537, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 587, 589, 590, 593, 596, 609, 610, 625, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 689, 798, 799, 804, 806, 815, 821, 822, 823, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 845, 847, 850, 851, 857, 858, 860, 863, 865, 866, 867, 872, 879, 880, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 1040, 1042, 1045, 1047], "metaestimatormixin": 237, "regressormixin": [237, 383, 395, 464, 1042], "transformermixin": [237, 285, 383, 395, 464, 1039, 1046, 1047, 1048], "metadata_rout": [237, 407, 436, 442, 443, 446, 448, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 532, 533, 537, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 587, 589, 590, 593, 609, 610, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 689, 798, 799, 804, 806, 815, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 845, 847, 850, 851, 857, 858, 860, 863, 865, 866, 867, 872, 879, 880, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911], "metadatarout": [237, 436, 463, 596, 646, 650, 652, 654, 658, 660, 662, 664, 797, 800, 801, 811, 828, 829, 830, 831, 832, 833, 834, 860, 947, 1048], "methodmap": [237, 945], "get_routing_for_object": [237, 945], "process_rout": [237, 1048], "my_group": [237, 399], "my_weight": [237, 399], "my_other_weight": [237, 399], "enable_metadata_rout": [237, 399, 436, 442, 443, 446, 448, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 532, 533, 537, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 587, 589, 590, 593, 596, 609, 610, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 689, 797, 798, 799, 800, 801, 804, 806, 811, 815, 821, 822, 823, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 845, 847, 850, 851, 857, 858, 860, 863, 865, 866, 867, 872, 879, 880, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 1047], "check_metadata": 237, "obj": [237, 402, 566, 567, 945, 946, 947, 948, 949, 954], "print_rout": 237, "get_metadata_rout": [237, 422, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 944, 945, 946, 947, 948, 988, 1048], "_serial": 237, "exampleclassifi": 237, "smart": [237, 442, 458, 459, 589], "accomplish": [237, 383, 406, 545, 985, 989, 991, 1013, 1048], "magic": [237, 382, 387, 418, 615, 620, 623], "set_fit_request": [237, 399, 436, 442, 443, 446, 448, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 587, 590, 593, 634, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 689, 832, 833, 835, 836, 837, 838, 839, 845, 865, 866, 879, 880, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911], "set_predict_request": [237, 442, 446, 448, 481, 482, 483, 551, 610, 634, 643, 644, 908, 909, 910, 911], "set_score_request": [237, 399, 436, 442, 446, 448, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 566, 567, 568, 569, 609, 610, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 677, 678, 679, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 842, 843, 847, 850, 851, 857, 858, 860, 895, 896, 900, 901, 902, 903, 905, 906, 908, 909, 910, 911, 988], "inherit": [237, 381, 383, 394, 395, 576, 675, 929, 931, 984, 1031, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1046, 1047, 1048], "metaclassifi": [237, 238], "owner": [237, 376, 378, 944, 945], "method_map": [237, 945], "fit_param": [237, 395, 432, 436, 441, 444, 464, 531, 533, 535, 536, 538, 541, 542, 548, 566, 568, 569, 581, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 627, 629, 634, 637, 638, 639, 640, 641, 664, 803, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 844, 849, 852, 856, 859, 863, 864, 865, 866, 869, 870, 872, 873, 874, 875, 877, 878, 879, 880, 892, 893, 948, 1038, 1041, 1042, 1043, 1045, 1047, 1048], "metadatarequest": [237, 422, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 468, 469, 470, 472, 473, 474, 475, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 580, 581, 582, 587, 588, 589, 590, 591, 594, 595, 597, 598, 599, 602, 609, 610, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 651, 653, 655, 656, 657, 659, 661, 663, 665, 666, 667, 668, 669, 671, 673, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 795, 796, 798, 799, 802, 804, 805, 806, 807, 810, 812, 813, 814, 815, 816, 817, 818, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 945, 947, 1048], "request_rout": 237, "validate_metadata": [237, 945], "routed_param": [237, 948], "route_param": [237, 945], "caller": [237, 409, 645, 646, 651, 659, 660, 661, 680, 890, 891, 945, 946, 956, 964, 965, 966, 1040], "predict_param": [237, 464, 566, 567, 1044], "object_nam": [237, 945, 948], "method_nam": [237, 945, 948], "silent": [237, 416, 580, 856, 998, 1036, 1037, 1039, 1040, 1044, 1045], "bug": [237, 317, 318, 319, 320, 321, 322, 323, 370, 379, 383, 384, 386, 389, 393, 395, 1006, 1009, 1031, 1032, 1033, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "notabl": [237, 307, 375, 395, 495, 726, 873, 985, 987, 991, 1035, 1038, 1045], "metaclassifierifittedmetaclassifi": 237, "exampleclassifierexampleclassifi": 237, "typeerror": [237, 320, 386, 710, 924, 945, 972, 1038, 1039, 1042, 1044, 1048], "got": [237, 269, 363, 386, 550, 648, 664, 1044, 1046, 1048], "sample_weight1": 237, "sample_weight2": 237, "aliased_sample_weight": 237, "alia": [237, 382, 385, 389, 395, 436, 442, 443, 446, 448, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 532, 533, 537, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 587, 589, 590, 593, 609, 610, 616, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 689, 798, 799, 804, 806, 815, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 845, 847, 850, 851, 857, 858, 860, 863, 865, 866, 867, 872, 879, 880, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 962, 994, 1009, 1031, 1045], "calle": [237, 946], "predict_log_proba": [237, 383, 395, 548, 549, 550, 552, 554, 556, 558, 563, 592, 593, 657, 658, 675, 797, 800, 801, 811, 821, 835, 836, 837, 838, 839, 857, 860, 897, 902, 905, 908, 910, 1003, 1031, 1044], "meta_est": 237, "routerconsumerclassifi": 237, "add_self_request": [237, 945], "self_request": 237, "clf_sample_weight": 237, "meta_clf_sample_weight": 237, "routerconsumerclassifierifittedrouterconsumerclassifi": 237, "complic": [237, 301, 387, 418, 693, 991], "simplepipelin": 237, "_required_paramet": [237, 383], "transformer_": [237, 464], "child": [237, 352, 361, 368, 393, 395, 399, 408, 415, 441, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 908, 909, 910, 911, 945, 946, 948, 956, 1004, 1038], "boilerpl": [237, 383, 1013, 1024], "exampletransform": 237, "set_transform_request": [237, 481, 482, 483, 532, 581, 587, 589, 590, 634, 863, 866, 872, 880], "metaregressor": 237, "weightedmetaregressor": 237, "__metadata_request__fit": 237, "compat": [237, 265, 285, 318, 375, 384, 390, 391, 393, 395, 398, 399, 416, 462, 468, 507, 565, 576, 584, 585, 588, 602, 613, 614, 617, 618, 619, 621, 622, 631, 632, 633, 657, 658, 672, 674, 772, 776, 798, 799, 802, 804, 805, 806, 807, 810, 812, 813, 814, 815, 816, 817, 818, 844, 845, 860, 865, 873, 874, 912, 913, 916, 951, 985, 988, 991, 993, 1008, 1009, 1013, 1026, 1031, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "silenc": 237, "exampleregressor": 237, "commun": [237, 374, 380, 384, 386, 389, 395, 408, 415, 537, 539, 546, 691, 709, 872, 978, 985, 991, 998, 1002, 1006, 1008, 1013, 1039, 1040], "vendor": [237, 1036, 1039, 1040], "NOT": [237, 291, 378, 384, 807, 840, 841], "signatur": [237, 352, 353, 376, 487, 488, 556, 557, 563, 564, 593, 609, 610, 658, 672, 674, 710, 740, 803, 819, 822, 824, 827, 873, 948, 977, 1038, 1044, 1048], "plot_metadata_rout": [237, 245, 1010], "theta_c": [238, 522], "reject": [238, 395, 396, 522, 670, 725, 920, 921, 984, 988, 1039], "likewis": [238, 408, 522], "surround": [238, 381, 846, 994], "cca": [238, 411, 482, 484, 1035, 1039, 1040, 1041, 1043, 1045], "onevsrestclassifi": [238, 269, 271, 280, 399, 406, 828, 830, 900, 1015, 1032, 1033, 1035, 1037, 1038, 1044, 1045, 1048], "min_x": 238, "max_x": 238, "plot_subfigur": 238, "min_i": 238, "zero_class": 238, "one_class": 238, "nfor": 238, "plot_multilabel": [238, 245, 1010], "extratreesregressor": [239, 415, 556, 564, 565, 910, 911, 1034, 1037, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048], "n_face": 239, "face_id": 239, "n_pixel": [239, 260], "nn": [239, 416, 694, 1022], "y_test_predict": 239, "true_fac": 239, "completed_fac": 239, "719": [239, 245, 1010], "plot_multioutput_face_complet": [239, 245, 1010], "iforest": 240, "pharuj": 240, "rajborirug": 240, "ra": 240, "kmitl": 240, "ac": [240, 529, 663, 684, 685, 984, 1001, 1024], "robustscal": [240, 877, 890, 978, 998, 1036, 1037, 1039, 1041, 1042, 1043, 1047], "make_estim": 240, "iforest_kw": 240, "lof_kw": 240, "outlier_detector": 240, "perf_count": 240, "negative_outlier_factor_": [240, 292, 846, 994], "expected_n_anomali": 240, "expected_anomaly_fract": 240, "kddcup": [240, 374, 491, 1026], "inject": [240, 376, 415], "attack": [240, 376], "fetch_kddcup99": [240, 376, 1038, 1039, 1040, 1043, 1044], "percent10": [240, 491], "int32": [240, 285, 314, 381, 395, 442, 446, 448, 450, 452, 902, 903, 904, 905, 906, 953, 1003, 1040, 1046, 1047, 1048], "anomaly_frac": 240, "10065": 240, "338": 240, "protocol_typ": 240, "cat_column": 240, "wilderness_area": 240, "soil_typ": 240, "x_forestcov": 240, "14302": 240, "137": [240, 244, 245, 387, 1010, 1032], "forestcov": 240, "usd": 240, "sqft": 240, "ames_h": 240, "div": 240, "lot_area": 240, "misc_featur": 240, "add_categori": 240, "noinfo": 240, "mas_vnr_typ": 240, "2714": 240, "categorical_columns_selector": 240, "fetal": 240, "cardiotocogram": 240, "heart": 240, "fhr": 240, "minor": [240, 265, 269, 376, 384, 396, 495, 988, 1031, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "x_cardiotocographi": 240, "2126": 240, "datasets_nam": 240, "ceil": [240, 556, 557, 558, 559, 562, 563, 564, 565, 593, 670, 800, 801, 908, 909, 910, 911, 1002], "dataset_nam": [240, 285], "model_idx": 240, "plot_chance_level": [240, 269, 271, 272, 699, 701, 1047], "chance_level_kw": [240, 699, 701, 1047], "privileg": [240, 389], "n_neighbors_list": [240, 287], "localoutlierfactor__n_neighbor": 240, "preprocessor_list": 240, "interquartil": [240, 878, 890], "iqr": [240, 878, 890], "75th": [240, 878], "squash": [240, 385, 418, 530, 536, 541, 547], "plot_outlier_detection_bench": [240, 245, 1010], "recalcul": [241, 243, 408, 1028, 1031], "mlpregressormlpregressor": 241, "tree_disp": 241, "mlp_disp": 241, "0x7f2bbcc85880": 241, "445": [241, 245, 996, 1010], "plot_partial_dependence_visualization_api": [241, 245, 1010], "deactiv": [242, 375, 382, 387, 398, 409, 800, 801, 1045], "standard_scal": 242, "polynomialfeaturespolynomialfeatur": 242, "pcapca": 242, "svcsvc": [242, 260, 262, 319], "numeric_preprocessor": 242, "imputation_mean": 242, "categorical_preprocessor": [242, 313], "imputation_const": 242, "onehot": [242, 308, 309, 409, 865, 998], "gender": [242, 873, 998], "classifier__n_estim": 242, "classifier__max_featur": 242, "classifier__max_depth": 242, "classifier__criterion": 242, "gridsearchcvinot": 242, "fittedgridsearchcv": 242, "plot_pipeline_displai": [242, 245, 1010], "svcifittedsvc": 243, "svc_disp": [243, 317, 1028], "rfc_disp": [243, 317, 1028], "148": [243, 245, 1010, 1034], "plot_roc_curve_visualization_api": [243, 245, 1010], "transform_output": [244, 314, 467, 898, 1046, 1047], "slep018": [244, 383, 1046], "x_test_scal": 244, "894264": 244, "798301": 244, "271411": 244, "327605": 244, "244466": 244, "086944": 244, "327407": 244, "459074": 244, "660797": 244, "462234": 244, "576989": 244, "159419": 244, "933197": 244, "427329": 244, "414810": 244, "039497": 244, "275851": 244, "scaler2": 244, "x_test_np": 244, "x_test_df": 244, "feature_names_in_": [244, 314, 320, 395, 429, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 626, 627, 628, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 795, 796, 797, 800, 801, 811, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 1044, 1045, 1046, 1047], "num_pip": 244, "num_col": 244, "7621951219512195": 244, "log_reg": [244, 321], "config_context": [244, 367, 368, 404, 625, 898, 1038, 1044, 1047], "reset": [244, 363, 389, 533, 675, 676, 677, 840, 841, 869, 870, 880, 1033], "standardscalerifittedstandardscal": 244, "1088": 244, "151101": 244, "479229": 244, "188153": 244, "393297": 244, "263234": 244, "657": [244, 262], "975455": 244, "285": [244, 327, 722], "532843": 244, "546068": 244, "1511007": 244, "47922861": 244, "18815268": 244, "39329747": 244, "26323428": 244, "97545464": 244, "53284267": 244, "54606834": 244, "plot_set_output": [244, 245, 1010], "077": [245, 285], "miscellan": [245, 370, 374, 375, 1010, 1037, 1038, 1045, 1046, 1048], "bayesiangaussianmixtur": [247, 248, 253, 796, 987, 1037, 1039, 1040, 1044, 1045], "weight_concentration_prior_typ": [247, 253, 795, 987, 1037], "dirichlet_distribut": [247, 795, 987, 1037], "dirichlet_process": [247, 253, 795, 987, 1037], "weight_concentration_prior": [247, 253, 795, 987], "finit": [247, 253, 367, 376, 395, 467, 537, 550, 581, 605, 608, 609, 610, 657, 726, 776, 783, 795, 821, 898, 918, 920, 921, 984, 987, 988, 1013, 1015, 1022, 1038, 1039, 1043, 1045, 1046], "covar": [247, 248, 253], "eig_val": 247, "eig_vec": 247, "unit_eig_vec": 247, "arctan2": [247, 249, 252], "56b4e9": 247, "plot_titl": 247, "weights_": [247, 795, 796, 1045], "covariances_": [247, 248, 249, 252, 253, 795, 796, 1038], "get_xaxi": [247, 295, 307], "set_tick_param": 247, "007": [247, 270, 285, 331, 332, 353, 1010], "labelleft": 247, "0072b2": 247, "f0e442": 247, "d55e00": 247, "mean_precision_prior": [247, 253, 795], "nprior": 247, "gamma_0": [247, 253], "reg_covar": [247, 795, 796], "init_param": [247, 250, 253, 795, 796], "concentrations_prior": 247, "plot_concentration_prior": [247, 254, 1010], "_base": [248, 383], "color_it": [248, 252, 253], "splot": [248, 253], "dp": [248, 253], "shouldn": [248, 253, 381], "em": [248, 249, 253, 442, 446, 458, 535, 795, 796, 987, 1045], "dpgmm": [248, 253, 1031, 1035, 1037], "plot_gmm": [248, 254, 1010], "ronweiss": 249, "make_ellips": 249, "datalim": 249, "skf": [249, 412, 816], "train_index": [249, 329, 412, 798, 799, 802, 804, 805, 806, 807, 810, 812, 813, 814, 815, 816, 817, 818], "test_index": [249, 329, 412, 798, 799, 802, 804, 805, 806, 807, 810, 812, 813, 814, 815, 816, 817, 818], "cov_typ": 249, "means_init": [249, 250, 796], "y_train_pr": 249, "train_accuraci": 249, "y_test_pr": 249, "test_accuraci": [249, 263], "219": [249, 254, 261, 1010], "plot_gmm_covari": [249, 254, 1010], "random_from_data": [250, 795, 796, 987], "diamond": 250, "colour": [250, 378, 416, 586, 989], "eventu": [250, 407, 408, 417, 592, 1013], "walsh": [250, 1043, 1045], "timer": [250, 387], "_samples_gener": 250, "extmath": [250, 352, 390, 407, 452, 1031, 1032, 1037, 1038, 1041, 1045, 1046, 1048], "row_norm": 250, "x_squared_norm": [250, 459], "get_initial_mean": 250, "times_init": 250, "relative_tim": 250, "ini": 250, "init_tim": 250, "2fx": 250, "plot_gmm_init": [250, 254, 1010], "shifted_gaussian": 251, "stretched_gaussian": 251, "score_sampl": [251, 290, 291, 292, 298, 395, 414, 468, 531, 540, 562, 676, 795, 796, 797, 800, 801, 811, 845, 846, 856, 860, 904, 994, 1034, 1039, 1041, 1043], "plot_gmm_pdf": [251, 254, 1010], "component_1": 252, "component_2": 252, "best_parameters_": 252, "gmm_bic_scor": 252, "callabl": [252, 266, 395, 412, 416, 417, 419, 420, 440, 442, 443, 444, 445, 446, 448, 449, 451, 456, 458, 459, 463, 464, 465, 466, 530, 532, 534, 536, 538, 544, 545, 556, 557, 558, 559, 560, 561, 563, 564, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 609, 610, 619, 627, 633, 638, 642, 658, 665, 670, 672, 674, 687, 690, 691, 695, 710, 718, 730, 740, 769, 772, 776, 777, 778, 779, 790, 791, 797, 800, 801, 803, 811, 819, 822, 823, 824, 825, 827, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 864, 873, 895, 896, 902, 903, 904, 905, 906, 949, 955, 958, 972, 977, 988, 998, 1031, 1035, 1038, 1039, 1040, 1041, 1043, 1045, 1047], "0x7f2b9b56f700": 252, "gaussianmixturegaussianmixtur": 252, "param_n_compon": 252, "param_covariance_typ": 252, "829429": 252, "1084": 252, "038689": 252, "1114": 252, "517272": 252, "1148": 252, "512281": 252, "1179": 252, "977890": 252, "catplot": 252, "hue": [252, 262, 312, 378], "409": [252, 254, 1010], "plot_gmm_select": [252, 254, 1010], "loos": [253, 259, 1003, 1039], "liberti": 253, "judgment": [253, 988], "panel": [253, 290, 307, 414, 1008], "primarili": [253, 267, 381, 395, 404, 408, 946, 1013, 1040, 1041], "covariance_prior": [253, 795], "466": [253, 254, 262, 278, 995, 1010], "plot_gmm_sin": [253, 254, 1010], "652": 254, "mislabel": [256, 415, 990], "imbal": [256, 265, 412, 706, 727, 728, 736, 781, 782, 785, 786, 988], "set_printopt": 256, "titles_opt": 256, "plot_confusion_matrix": [256, 278, 317, 1010, 1041, 1042, 1043, 1044], "groupkfold": [257, 267, 399, 412, 593, 802, 803, 804, 805, 806, 815, 819, 821, 822, 823, 824, 827, 1019, 1037, 1044], "groupshufflesplit": [257, 412, 1019, 1037], "shufflesplit": [257, 264, 347, 412, 799, 805, 807, 817, 826, 1019, 1031, 1032, 1034, 1036, 1037], "stratifiedgroupkfold": [257, 1044], "stratifiedshufflesplit": [257, 339, 412, 1019, 1031, 1032, 1037, 1038, 1044], "1338": 257, "cmap_data": 257, "cmap_cv": 257, "coolwarm": [257, 336], "n_point": [257, 840, 841], "percentiles_class": 257, "perc": 257, "group_prior": 257, "visualize_group": 257, "yticklabel": [257, 352], "ngroup": 257, "nclass": 257, "plot_cv_indic": [257, 278, 1010], "tr": [257, 378, 385, 408, 410, 468, 469, 470, 471, 472, 473, 474, 475, 838], "this_cv": 257, "242": [257, 278, 880, 1010, 1031], "plot_cv_predict": [258, 278, 1010], "fnr": [259, 697, 725], "det_curv": [259, 697, 780, 787, 988, 1043, 1044], "detcurvedisplai": [259, 320, 725, 1043, 1044], "ax_roc": 259, "ax_det": 259, "feedback": [259, 380, 381, 382, 396, 1008, 1039], "plot_det": [259, 278, 1010], "n_imag": 260, "print_datafram": 260, "filtered_cv_result": 260, "mean_precis": 260, "std_precis": 260, "mean_recal": 260, "std_recal": 260, "mean_test_precis": [260, 266], "std_test_precis": 260, "mean_test_recal": 260, "std_test_recal": 260, "03f": 260, "refit_strategi": 260, "best_index": [260, 266], "precision_threshold": 260, "high_precision_cv_result": 260, "rank_test_recal": 260, "rank_test_precis": [260, 266], "best_recall_std": 260, "best_recal": 260, "best_recall_threshold": 260, "high_recall_cv_result": 260, "fastest_top_recall_high_precision_index": 260, "idxmin": 260, "854": 260, "061": 260, "039": [260, 749, 779, 988], "780": [260, 353, 355, 1010], "905": 260, "889": [260, 436], "074": 260, "890": 260, "695": 260, "065": [260, 387], "066": [260, 647], "028": [260, 353], "744": [260, 285], "618": 260, "004879": 260, "877206": 260, "069196": 260, "0x7f2b994d83a0": 260, "807": [260, 262], "plot_grid_search_digit": [260, 278, 1010], "minimis": [261, 408, 412, 657, 658, 1004], "york": [261, 786, 795, 978, 988, 1000], "usa": [261, 376, 897, 978, 985, 1000, 1001], "best_index_": [261, 266, 797, 800, 801, 811], "wenhao": [261, 1039, 1040], "zhang": [261, 408, 441, 663, 678, 684, 685, 688, 692, 756, 757, 984, 985, 986, 990, 1002, 1035, 1036, 1038, 1039, 1040, 1041, 1043, 1047], "wenhaoz": 261, "ucla": [261, 984], "lower_bound": 261, "best_score_idx": 261, "best_low_complex": 261, "fewest": [261, 626], "candidate_idx": 261, "param_reduce_dim__n_compon": 261, "plot_grid_search_refit_cal": [261, 278, 1010], "moon": [262, 302, 309, 352, 353, 521], "moder": [262, 381, 418, 453, 994], "352": [262, 264, 278, 387, 1010], "repeatedstratifiedkfold": [262, 280, 412, 812, 816, 1038], "repetit": [262, 280, 386, 412, 812, 813, 996, 1045], "rank_test_scor": [262, 270, 797, 811, 1037], "rename_axi": 262, "9400": 262, "079297": 262, "9300": 262, "077846": 262, "3_poli": 262, "9044": [262, 1038], "098776": 262, "2_poli": 262, "6852": 262, "169106": 262, "certainti": [262, 383, 740, 988], "repreat": 262, "model_scor": [262, 283], "regex": [262, 354, 463, 465], "_test_scor": [262, 471, 593, 1044], "lineplot": 262, "set1": [262, 294, 295], "labelpad": 262, "882561": 262, "783392": 262, "351390": 262, "746492": 262, "298688": 262, "355440": 262, "nadeau": [262, 1039], "bengio": [262, 857, 858, 977, 1001], "framework": [262, 367, 383, 393, 395, 402, 408, 636, 687, 795, 984, 985, 992, 1006, 1009, 1013, 1031, 1037], "diebold": 262, "mariano": 262, "proven": [262, 982, 986, 1013], "replic": [262, 380, 383], "cdot": [262, 343, 405, 408, 413, 414, 418, 613, 614, 618, 621, 622, 866, 980, 982, 988, 992, 998], "sum_": [262, 271, 347, 405, 406, 408, 413, 414, 415, 537, 539, 546, 695, 753, 982, 984, 985, 988, 990, 992, 993, 995, 996, 998, 1002, 1003, 1004], "ij": [262, 295, 405, 408, 413, 537, 539, 546, 645, 646, 651, 652, 659, 660, 661, 662, 680, 683, 984, 985, 988, 990, 993, 998, 1003], "corrected_std": 262, "crossvalid": [262, 276], "corrected_var": 262, "ddof": [262, 880, 891], "compute_corrected_ttest": 262, "t_stat": 262, "p_val": 262, "model_1_scor": 262, "model_2_scor": 262, "ncorrect": 262, "227": [262, 408, 723], "uncorrect": [262, 594, 597], "t_stat_uncorrect": 262, "p_val_uncorrect": 262, "benavoli": 262, "colleagu": 262, "conjug": [262, 451, 461, 671, 673, 686, 694, 984], "overlin": [262, 405], "t_post": 262, "ppf": 262, "infin": [262, 347, 540, 681, 682, 711, 821, 907, 919, 991], "minu": [262, 758, 988], "better_prob": 262, "cdf": 262, "773": [262, 647, 838], "essenti": [262, 322, 379, 383, 408, 412, 413, 508, 988, 991, 1009, 1013, 1039], "rope": 262, "rope_interv": 262, "rope_prob": 262, "432": [262, 410], "x_rope": 262, "uncertain": [262, 327, 380], "credibl": 262, "cred_interv": 262, "cred_int_df": 262, "000977": 262, "019023": 262, "005422": 262, "025422": 262, "016445": 262, "036445": 262, "bonferroni": 262, "n_comparison": 262, "pairwise_t_test": 262, "model_i": 262, "model_k": 262, "model_i_scor": 262, "model_k_scor": 262, "pairwise_comp_df": 262, "model_1": 262, "model_2": 262, "302": [262, 626], "565": 262, "276": [262, 339, 350, 1010], "851": 262, "pairwise_bayesian": 262, "worse_prob": 262, "pairwise_bayesian_df": 262, "018": [262, 471], "882": [262, 301, 305, 1010], "187": [262, 387, 583, 989, 1022, 1033], "dietterich": [262, 830, 989], "1998": [262, 376, 378, 413, 415, 554, 555, 830, 835, 866, 989, 990, 992, 998, 1002], "bouckaert": 262, "frank": [262, 831, 989, 1036, 1040, 1041], "pacif": 262, "asia": [262, 998], "confer": [262, 376, 408, 413, 419, 438, 443, 449, 510, 534, 562, 695, 707, 724, 754, 856, 857, 858, 988, 994, 1000, 1004], "discoveri": [262, 376, 387, 390, 408, 415, 417, 419, 443, 510, 554, 555, 562, 591, 594, 595, 597, 598, 599, 605, 719, 738, 781, 988, 1000, 1013, 1045, 1046], "corani": 262, "dem\u0161ar": 262, "zaffalon": 262, "accompani": [262, 1039], "144": [262, 387, 1031], "plot_grid_search_stat": [262, 278, 1010], "loader": [263, 330, 352, 374, 375, 376, 497, 498, 507, 1009, 1024, 1031, 1036, 1038, 1039, 1042], "complementnb": [263, 352, 835, 836, 838, 839, 990, 1039, 1043, 1044, 1046], "tfidfvectorizertfidfvector": 263, "complementnbcomplementnb": 263, "vect__": 263, "clf__": 263, "parameter_grid": 263, "vect__max_df": 263, "vect__min_df": 263, "vect__ngram_rang": [263, 1024], "unigram": [263, 376, 416, 587, 588, 590, 1038], "bigram": [263, 416, 587, 588, 590, 1024], "vect__norm": 263, "clf__alpha": [263, 1024], "parallelis": [263, 467, 898, 1038], "random_search": [263, 270], "best_paramet": 263, "get_param": [263, 384, 395, 418, 422, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 795, 796, 797, 800, 801, 811, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 977, 1041, 1042, 1043, 1045, 1046], "709": 263, "ambigu": [263, 386, 416, 571, 711, 937, 991, 1040, 1042, 1044], "shorten_param": 263, "xanchor": 263, "yanchor": 263, "autom": [263, 385, 398, 691, 977, 984, 985, 988, 1008, 1013], "parallel_coordin": 263, "understood": [263, 381, 408, 945, 1021], "column_result": 263, "transform_func": 263, "fromkei": [263, 915], "ngram_rang": [263, 330, 416, 587, 588, 590], "color_continuous_scal": 263, "viridis_r": 263, "slide": [263, 643, 984, 1007, 1008], "intersect": [263, 336, 405, 408, 736], "undo": [263, 870, 1035], "stronger": [263, 642, 651, 657, 658, 671, 672, 673, 674, 675, 677, 686], "452": [263, 278, 1010], "plot_grid_search_text_feature_extract": [263, 278, 1010], "ax_idx": 264, "resort": [264, 376, 554, 1041], "learning_curv": [264, 322, 399, 803, 983, 1034, 1037, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1048], "return_tim": [264, 824, 1041], "test_scores_nb": 264, "fit_times_nb": 264, "score_times_nb": 264, "test_scores_svm": 264, "fit_times_svm": 264, "score_times_svm": 264, "score_tim": [264, 412, 823, 824], "inflect": 264, "plot_learning_curv": [264, 278, 1010], "class_likelihood_ratio": [265, 988, 1046], "medicin": [265, 711, 988], "medic": [265, 412, 711, 984, 1013], "truli": [265, 269, 369, 711, 988], "odd": [265, 415, 513, 711, 988, 1038, 1039], "suppos": [265, 326, 367, 368, 383, 387, 410, 415, 416, 417, 556, 560, 563, 657, 658, 665, 667, 673, 674, 675, 740, 846, 900, 902, 905, 908, 910, 926, 992, 1040, 1042, 1048], "physiolog": [265, 378, 1022], "hopefulli": [265, 389, 1031], "indirect": [265, 382, 395], "bio": 265, "pos_lr": 265, "neg_lr": 265, "raise_warn": [265, 711, 974], "positive_likelihood_ratio": [265, 711], "negative_likelihood_ratio": [265, 711], "extract_scor": 265, "test_positive_likelihood_ratio": 265, "test_negative_likelihood_ratio": 265, "661086": 265, "724702": 265, "383973": 265, "054045": 265, "108843": 265, "986989": 265, "268147": 265, "034278": 265, "most_frequ": [265, 550, 626, 629, 850, 978, 988, 1039, 1041, 1043], "373333": 265, "5557": 265, "235430": 265, "stand": [265, 354, 385, 393, 413, 530, 536, 544, 545, 595, 608, 677, 704, 716, 734, 735, 755, 784, 786, 793, 987, 988, 994], "lr_base": 265, "pos_lr_bas": 265, "pos_lr_base_std": 265, "neg_lr_bas": 265, "neg_lr_base_std": 265, "plot_indic": 265, "scoring_on_bootstrap": 265, "n_bootstrap": [265, 1032], "results_for_preval": 265, "bootstrap_indic": 265, "default_rng": 265, "2039": 265, "507943": 265, "113516": 265, "207667": 265, "009778": 265, "3419": 265, "443238": 265, "125140": 265, "198766": 265, "008915": 265, "421087": 265, "123828": 265, "192913": 265, "006360": 265, "6196": [265, 1036], "409717": 265, "164009": 265, "193949": 265, "005861": 265, "7578": [265, 1038], "334795": 265, "175298": 265, "189267": 265, "005840": 265, "8963": 265, "197666": 265, "238955": 265, "185654": 265, "005027": 265, "plot_likelihood_ratio": [265, 278, 1010], "scorer_nam": [266, 797, 811], "predefin": [266, 810, 977, 991, 1019, 1046], "403": 266, "402": 266, "maskedarrai": [266, 1037], "param_min_samples_split": 266, "sample_score_mean": 266, "sample_score_std": 266, "std_": [266, 1036], "rank_test_": 266, "best_scor": 266, "mean_test_": 266, "plot_multi_metric_evalu": [266, 278, 1010], "cawlei": [267, 988], "talbot": 267, "mach": [267, 406, 412, 592, 593], "2079": 267, "2107": 267, "007581": 267, "007833": 267, "num_trial": 267, "x_iri": [267, 1023], "y_iri": [267, 1023], "p_grid": 267, "non_nested_scor": 267, "nested_scor": 267, "leaveoneout": [267, 412, 1019], "leaveonegroupout": [267, 412, 798, 805, 806, 1019, 1037], "inner_cv": 267, "outer_cv": 267, "non_nest": 267, "score_differ": 267, "211": [267, 322, 329, 876, 888], "non_nested_scores_lin": 267, "nested_lin": 267, "difference_plot": 267, "plot_nested_cross_validation_iri": [267, 278, 1010], "permutation_test_scor": [268, 399, 412, 1031, 1038, 1043], "plant": [268, 271, 272, 374, 988, 1026], "uncorrel": [268, 377, 527, 533, 540, 988, 1022], "n_uncorrelated_featur": 268, "x_rand": 268, "undergo": 268, "score_iri": 268, "perm_scores_iri": 268, "pvalue_iri": 268, "n_permut": [268, 412, 825], "score_rand": 268, "perm_scores_rand": 268, "pvalue_rand": 268, "evid": [268, 352, 389, 408, 412, 413, 415, 643, 795, 987], "ndata": 268, "destroi": [268, 416, 793, 869, 998], "ojala": [268, 412, 825], "garriga": [268, 412, 825], "plot_permutation_tests_for_classif": [268, 278, 1010], "t_p": 269, "plu": [269, 378, 386, 678, 831, 834, 989, 1002], "f_p": 269, "f_n": 269, "denomin": [269, 416, 421, 474, 589, 703, 755, 982], "stairstep": 269, "ap": [269, 706, 707, 988], "sum_n": [269, 706, 988], "r_n": [269, 706, 988], "p_n": [269, 706, 988], "nth": [269, 706, 988], "r_k": 269, "p_k": [269, 988], "trapezoid": [269, 705, 706, 988], "binar": [269, 271, 272, 373, 375, 407, 752, 835, 864, 865, 867, 871, 873, 881, 884, 988, 990, 1015, 1026, 1045, 1047], "average_precision_scor": [269, 699, 705, 707, 780, 786, 988, 1031, 1034, 1038, 1039, 1045, 1047], "mt19937": [269, 274, 1042], "0x7f2bac672c40": 269, "precisionrecalldisplai": [269, 320, 780, 782, 785, 988, 1041, 1044, 1047, 1048], "label_binar": [269, 271, 867, 1035], "average_precis": [269, 699, 706, 740, 988], "prevalence_pos_label": [269, 699], "setup": [269, 271, 367, 379, 383, 387, 389, 991, 1016], "f_score": 269, "extens": [269, 271, 290, 367, 368, 375, 376, 379, 382, 384, 385, 389, 390, 393, 402, 408, 413, 495, 502, 533, 739, 931, 939, 985, 987, 988, 1007, 1008, 1013, 1031, 1037, 1044, 1045, 1047], "369": [269, 278, 1010], "plot_precision_recal": [269, 278, 1010], "deem": [270, 271, 533, 996, 1044], "991": [270, 988], "05063247886572012": 270, "13822072286080167": 270, "987": [270, 353], "010877306503748912": 270, "9226260871125187": 270, "7271482064048191": 270, "25183501383331797": 270, "993": 270, "1111111111111111": 270, "5555555555555556": 270, "n_top": 270, "param_dist": [270, 274, 319], "n_iter_search": 270, "plot_randomized_search": [270, 278, 1010], "unambigu": [271, 989, 1037], "notion": [271, 343, 353, 369, 393, 408, 413, 415, 984, 988], "scheme": [271, 290, 313, 314, 376, 395, 408, 412, 414, 416, 565, 589, 657, 658, 704, 810, 867, 868, 871, 873, 877, 881, 884, 889, 900, 905, 977, 984, 998, 1002, 1031, 1039, 1042, 1043, 1048], "harder": [271, 272, 311, 376, 380, 383, 389, 408, 514, 560, 561, 1012], "bulk": [271, 419, 443], "scrutin": 271, "labelbinar": [271, 395, 739, 829, 864, 873, 881, 884, 989, 1015, 1034, 1035, 1036, 1040, 1045], "y_onehot_test": 271, "class_id": [271, 272], "nvirginica": 271, "tp_c": 271, "fn_c": 271, "fp_c": 271, "tn_c": 271, "briefli": [271, 380, 394, 415, 977, 1041], "nreceiv": 271, "micro_roc_auc_ovr": 271, "mcclish": [271, 786], "deci": 271, "1989": [271, 634, 786, 857, 858, 984, 991], "jul": 271, "fpr_grid": 271, "mean_tpr": [271, 272], "interp": [271, 272, 339], "macro_roc_auc_ovr": 271, "deeppink": 271, "aqua": 271, "role": [271, 367, 380, 393, 413, 1006], "pair_list": 271, "pair_scor": 271, "label_a": 271, "label_b": 271, "a_mask": 271, "b_mask": 271, "ab_mask": 271, "a_tru": 271, "b_true": 271, "idx_a": 271, "idx_b": 271, "fpr_a": 271, "tpr_a": 271, "fpr_b": 271, "tpr_b": 271, "macro_roc_auc_ovo": 271, "ovo_tpr": 271, "pool": [271, 393, 444, 634, 1009, 1042], "plot_roc": [271, 278, 1010], "mean_fpr": 272, "viz": [272, 388], "interp_tpr": 272, "mean_auc": 272, "std_auc": 272, "std_tpr": 272, "tprs_upper": 272, "tprs_lower": 272, "plot_roc_crossv": [272, 278, 1010], "halvinggridsearchcv": [273, 274, 319, 399, 578, 801, 977, 1043, 1045, 1046, 1048], "1e4": [273, 658, 678, 894, 1000], "gsh": 273, "gsh_time": 273, "gs_time": 273, "make_heatmap": 273, "is_sh": 273, "make_cbar": 273, "param_c": [273, 797], "param_gamma": [273, 797, 811], "sh": [273, 385, 389, 977], "scores_matrix": 273, "pivot_t": 273, "aggfunc": 273, "0e": [273, 548, 549], "get_xticklabel": 273, "rotation_mod": 273, "cbar_ax": 273, "plot_successive_halving_heatmap": [273, 278, 1010], "rsh": [274, 319], "0x7f2bbce3f440": 274, "_distn_infrastructur": 274, "rv_discrete_frozen": 274, "0x7f2bbc9c01f0": 274, "0x7f2b9b48b2b0": 274, "halvingrandomsearchcvifittedhalvingrandomsearchcv": 274, "params_str": 274, "drop_dupl": 274, "n_resources_": [274, 800, 801, 977], "nn_candid": 274, "n_candidates_": [274, 800, 801, 977], "n_iterations_": [274, 800, 801], "multialign": 274, "508": [274, 278, 1010, 1022], "plot_successive_halving_iter": [274, 278, 1010], "n_samples_train": [275, 902, 903, 904, 905, 906], "n_samples_test": [275, 902, 903, 904, 905, 906, 991, 998], "train_error": 275, "test_error": 275, "i_alpha_optim": 275, "alpha_optim": 275, "00020991037201085544": 275, "plot_train_error_vs_test_error": [275, 278, 1010], "nonlinear": [276, 320, 643, 687, 688, 692, 695, 866, 984, 985, 993, 998], "true_fun": 276, "polynomial_featur": 276, "plot_underfitting_overfit": [276, 278, 1010], "validationcurvedisplai": [277, 983, 1047], "subset_mask": 277, "isin": [277, 327], "param_rang": [277, 323, 347, 819, 827, 983, 1047], "plot_validation_curv": [277, 278, 1010], "ovo": [280, 317, 786, 828, 902, 905, 988, 989, 1003], "onevsoneclassifi": [280, 399, 829, 830, 1032, 1034, 1035, 1037, 1038, 1040, 1043, 1045, 1048], "review": [280, 313, 367, 376, 383, 384, 385, 386, 387, 393, 396, 412, 413, 534, 540, 988, 998, 1016], "sort_index": 280, "class_protein_loc": 280, "cyt": 280, "erl": 280, "exc": 280, "me1": 280, "me2": 280, "me3": 280, "mit": [280, 376, 387, 408, 418, 609, 610, 613, 618, 621, 642, 665, 666, 675, 837, 981], "244": [280, 583], "nuc": 280, "pox": 280, "vac": 280, "outputcodeclassifi": [280, 399, 828, 829, 1038, 1043, 1047, 1048], "code_s": [280, 830, 989], "ovo_tre": 280, "ovr_tre": 280, "ecoc": 280, "cv_results_tre": 280, "cv_results_ovo": 280, "cv_results_ovr": 280, "cv_results_ecoc": 280, "glanc": [280, 380], "tree_optim": 280, "unifi": [280, 382, 390, 393, 394, 415, 636, 1008, 1031], "allwein": 280, "erin": [280, 1043], "yoram": [280, 733], "singer": [280, 665, 666, 733, 984, 988, 1002, 1003], "141": [280, 533, 900, 989], "defens": 280, "plot_multiclass_overview": [280, 281, 1010], "classifierchain": [283, 395, 399, 832, 834, 1038, 1043, 1046], "assembl": [283, 314, 354, 860], "multitask": [283, 416, 989], "jaccard": [283, 405, 449, 456, 698, 702, 718, 727, 732, 736, 776, 777, 778, 794, 991, 1039, 1040], "adam": [283, 302, 857, 858, 992, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "kleczewski": [283, 1038, 1039], "yeast": [283, 831], "417": [283, 287, 299, 1010], "40597": 283, "jaccard_scor": [283, 702, 727, 732, 794, 988, 1040, 1043], "base_lr": [283, 831], "y_pred_ovr": 283, "ovr_jaccard_scor": 283, "y_pred_chain": 283, "chain_jaccard_scor": 283, "y_pred_ensembl": 283, "ensemble_jaccard_scor": 283, "x_po": 283, "takeawai": 283, "818": [283, 284, 1010], "plot_classifier_chain_yeast": [283, 284, 1010], "kneighborstransform": [285, 287, 317, 852, 991, 1041, 1045, 1046], "nmslib": 285, "pynndesc": 285, "pip": [285, 317, 318, 319, 320, 321, 322, 323, 368, 379, 381, 385, 387, 398, 404, 1004], "wrapper": [285, 387, 390, 412, 418, 543, 619, 667, 670, 740, 900, 984, 1004, 1008, 1035, 1043], "pynndescenttransform": 285, "csr_matrix": [285, 318, 439, 443, 451, 495, 533, 543, 556, 557, 558, 559, 562, 563, 564, 565, 587, 592, 593, 713, 826, 873, 875, 902, 903, 905, 906, 908, 909, 910, 911, 989, 998, 1002, 1003, 1004, 1046], "nmslibtransform": 285, "sw": 285, "n_samples_fit_": [285, 842, 843, 844, 846, 848, 850, 851, 852], "cosinesimil": 285, "nmslib_": 285, "adddatapointbatch": 285, "createindex": 285, "n_samples_transform": [285, 844, 852], "thread": [285, 318, 321, 379, 393, 395, 408, 415, 832, 833, 954, 955, 956, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1046, 1047, 1048], "num_thread": 285, "knnquerybatch": 285, "benchmark": [285, 319, 353, 354, 367, 374, 376, 381, 393, 398, 401, 406, 467, 514, 898], "mnist_10000": 285, "mnist_20000": 285, "20_000": 285, "tsne_param": 285, "barnes_hut": [285, 691, 1038, 1039], "parallel_batch_queri": 285, "msg": [285, 972], "transformer_nam": 285, "longest": 285, "fit_dur": 285, "transform_dur": 285, "884": 285, "769": 285, "733": 285, "448": 285, "numba": [285, 1009], "cold": 285, "nearestneighbor": [285, 321, 398, 408, 419, 443, 445, 447, 460, 687, 688, 692, 842, 843, 844, 846, 850, 851, 852, 991, 1031, 1035, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "i_ax": 285, "828": 285, "955": [285, 412, 653], "994": 285, "brute": [285, 393, 403, 412, 419, 443, 445, 449, 456, 631, 632, 687, 688, 840, 841, 842, 843, 844, 846, 848, 850, 851, 852, 995, 1026, 1035, 1039, 1043, 1046, 1047, 1048], "spent": [285, 313, 382, 387, 824, 1046], "approximate_nearest_neighbor": [285, 299, 1010], "slow": [287, 307, 352, 367, 375, 379, 381, 413, 416, 446, 698, 874, 875, 879, 902, 905, 937, 985, 991, 1009, 1023, 1038], "temporarydirectori": [287, 317], "graph_model": 287, "classifier_model": 287, "sklearn_graph_cache_": 287, "tmpdir": [287, 317], "full_model": 287, "classifier__n_neighbor": 287, "grid_model": 287, "plot_caching_nearest_neighbor": [287, 299, 1010], "beforehand": [288, 1004], "entitl": [288, 446, 610, 842, 980], "knn__weight": 288, "unifom": 288, "plot_classif": [288, 299, 1010], "79269019073225": 289, "kerneldens": [289, 290, 298, 414, 1033, 1039, 1040, 1044, 1045, 1046], "new_data": [289, 383], "4x11": 289, "real_data": 289, "set_clim": 289, "plot_digits_kde_sampl": [289, 299, 1010], "block": [290, 307, 321, 376, 378, 381, 386, 389, 395, 405, 408, 411, 414, 451, 452, 461, 472, 478, 479, 487, 488, 510, 512, 694, 956, 991, 993], "wildli": [290, 987], "kd": [290, 408, 414, 991, 1039, 1040, 1041], "jakevdp": [290, 298], "aaaaff": [290, 293], "tophat": [290, 414, 840, 841, 845], "log_den": 290, "x_src": 290, "format_func": 290, "ih": 290, "epanechnikov": [290, 414, 840, 841, 845], "funcformatt": 290, "nullloc": 290, "true_den": 290, "587": [290, 299, 1010], "plot_kde_1d": [290, 299, 1010], "637": [291, 299, 1010], "plot_lof_novelty_detect": [291, 299, 1010], "x_inlier": 292, "n_error": 292, "x_score": [292, 481, 482, 483, 484], "legend_handl": 292, "handlerpathcollect": 292, "update_legend_marker_s": 292, "update_from": 292, "set_siz": 292, "handler_map": 292, "update_func": 292, "plot_lof_outlier_detect": [292, 299, 1010], "cmap_light": [293, 296], "ffaaaa": 293, "aaffaa": 293, "cmap_bold": [293, 296], "00ff00": 293, "797": [293, 299, 1010], "plot_nca_classif": [293, 299, 1010], "neighborhoodcomponentanalysi": 294, "dim_reduction_method": 294, "acc_knn": 294, "x_embed": [294, 295, 691, 695, 849, 991], "ntest": 294, "895": [294, 299, 1010], "plot_nca_dim_reduct": [294, 299, 1010], "logsumexp": [295, 1038], "get_yaxi": [295, 307], "link_thickness_i": 295, "diff_embed": 295, "dist_embed": 295, "einsum": 295, "exp_dist_embed": 295, "relate_point": 295, "pt_i": 295, "pt_j": 295, "plot_nca_illustr": [295, 299, 1010], "8133333333333334": 296, "nearestcentroid": [296, 352, 989, 991, 1031, 1035, 1038, 1043, 1046], "darkblu": 296, "shrink_threshold": [296, 847, 991, 1031, 1043], "155": [296, 299, 1010], "plot_nearest_centroid": [296, 299, 1010], "barycent": [297, 1031], "215": [297, 299, 583, 1010], "plot_regress": [297, 299, 1010], "geospati": [298, 414], "haversin": [298, 414, 698, 760, 762, 991, 1040, 1043], "latitud": [298, 307, 376, 497, 698, 762], "longitud": [298, 307, 376, 497, 698, 762], "xtrain": 298, "ytrain": 298, "radian": [298, 698, 762], "land_mask": 298, "ball_tre": [298, 419, 443, 445, 449, 456, 687, 688, 842, 843, 844, 845, 846, 848, 850, 851, 852, 991, 1031, 1048], "ocean": 298, "519": [298, 299, 1010], "plot_species_kd": [298, 299, 1010], "204": [299, 996, 1001], "combat": [301, 413], "lesser": [301, 395, 441, 540, 984], "curvatur": 301, "plot_mlp_alpha": [301, 305, 1010], "bfg": [302, 609, 610, 647, 648, 657, 668, 671, 673, 679, 686, 991, 992, 1046], "980000": 302, "096950": 302, "momentum": [302, 857, 858, 992], "049530": 302, "nesterov": [302, 857, 858, 992, 1047], "049540": 302, "360000": 302, "978444": 302, "860000": 302, "503452": 302, "504185": 302, "045311": 302, "956038": 302, "243802": 302, "992766": 302, "041297": 302, "993879": 302, "042898": 302, "638843": 302, "855465": 302, "912632": 302, "290584": 302, "909293": 302, "318387": 302, "991653": 302, "045934": 302, "840000": 302, "601052": 302, "157334": 302, "154453": 302, "692470": 302, "689143": 302, "689751": 302, "150527": 302, "850000": 302, "341523": 302, "336188": 302, "335919": 302, "689015": 302, "830000": 302, "512595": 302, "513034": 302, "930000": 302, "170087": 302, "schedul": [302, 368, 675, 676, 677, 857, 858, 1002, 1013, 1038], "nesterovs_momentum": [302, 857, 858], "invscal": [302, 675, 676, 677, 857, 858, 1002], "plot_arg": 302, "plot_on_dataset": 302, "nlearn": 302, "loss_": [302, 857, 858, 992, 1045], "loss_curve_": [302, 857, 858], "data_set": 302, "get_lin": 302, "943": [302, 305, 1010, 1019], "plot_mlp_training_curv": [302, 305, 1010], "28x28": 303, "784": 303, "throw": [303, 390, 919, 1035, 1038, 1039, 1040, 1041, 1045], "infrastructur": [303, 323, 1006, 1008, 1009], "44139186": 303, "19174891": 303, "13983521": 303, "11378556": 303, "09443967": 303, "07846529": 303, "06506307": 303, "05534985": 303, "986429": 303, "953061": 303, "plot_mnist_filt": [303, 305, 1010], "greyscal": 304, "bernoulli": [304, 416, 417, 835, 836, 837, 838, 839, 856, 857, 858, 863, 984, 998, 1011, 1026, 1031], "bernoullirbm": [304, 857, 858, 993, 998, 1033, 1034, 1043, 1045, 1048], "yann": [304, 1031, 1033], "dauphin": [304, 1033], "gabriel": [304, 1039, 1040, 1041, 1044, 1045], "synnaev": 304, "convolv": 304, "minmax_scal": [304, 307, 870, 1036, 1039], "nudge_dataset": 304, "1px": 304, "direction_vector": 304, "apply_along_axi": 304, "feature_rang": [304, 870, 886, 998, 1033, 1043], "cg": [304, 657, 658, 671, 673, 686, 984, 1035, 1036, 1038, 1042, 1044, 1045, 1048], "rbm": [304, 856, 857, 858, 993], "rbm_features_classifi": 304, "6000": [304, 626], "raw_pixel_classifi": 304, "logisticregressionifittedlogisticregress": 304, "_classif": 304, "1498": 304, "undefinedmetricwarn": [304, 727, 728, 781, 782, 785, 1040], "zero_divis": [304, 712, 727, 728, 736, 781, 782, 785, 1041, 1043, 1047], "194": 304, "207": [304, 1031], "plot_rbm_logistic_classif": [304, 305, 1010], "689": 305, "incom": [307, 376, 439], "unscal": [307, 312, 984, 988, 1039, 1045], "unterthin": [307, 1034, 1035, 1036], "medinc": [307, 319, 376], "houseag": [307, 319, 376], "averoom": [307, 319, 376], "room": [307, 376, 386, 408, 1012], "avebedrm": [307, 376], "bedroom": [307, 376], "aveoccup": [307, 319, 376], "features_idx": 307, "quantile_rang": [307, 878, 890, 1037], "yeo": [307, 311, 876, 888, 998, 1039, 1045, 1047], "cox": [307, 311, 876, 888, 998, 1039, 1047], "plasma": 307, "plasma_r": 307, "create_ax": 307, "bottom_h": 307, "left_h": 307, "rect_scatt": 307, "rect_histx": 307, "rect_histi": 307, "ax_scatt": 307, "ax_histx": 307, "ax_histi": 307, "ax_scatter_zoom": 307, "ax_histx_zoom": 307, "ax_histy_zoom": 307, "rect_colorbar": 307, "ax_colorbar": 307, "plot_distribut": 307, "hist_nbin": 307, "x0_label": 307, "x1_label": 307, "hist_x1": 307, "hist_x0": 307, "aesthet": [307, 1004, 1036], "tick_bottom": 307, "tick_left": 307, "outward": 307, "ec": [307, 529], "make_plot": 307, "item_idx": 307, "ax_zoom_out": 307, "ax_zoom_in": 307, "zoom_in_percentile_rang": 307, "cutoffs_x0": 307, "cutoffs_x1": 307, "non_outliers_mask": 307, "colorbarbas": 307, "OR": [307, 408, 419, 443, 1042], "indistinguish": 307, "quadrant": 307, "697": [307, 315, 1010], "plot_all_sc": [307, 315, 1010], "straightforward": [308, 380, 413, 1013], "anywher": 308, "qinhanmin2005": 308, "sina": [308, 1044], "rnd": 308, "enc": [308, 310, 321, 323, 873, 874, 998], "x_bin": 308, "line_bin": 308, "263": [308, 315, 1010], "plot_discret": [308, 315, 1010], "get_nam": 309, "broader": [309, 984], "logisticregression__c": 309, "linearsvc__c": 309, "kbinsdiscretizer__n_bin": 309, "gradientboostingclassifier__learning_r": 309, "svc__c": [309, 860], "cm_piyg": 309, "piyg": 309, "b30065": 309, "178000": 309, "est_idx": 309, "plot_discretization_classif": [309, 315, 1010], "centers_0": 310, "centers_1": 310, "x_list": 310, "grid_encod": 310, "stripe": 310, "706": [310, 315, 1010], "plot_discretization_strategi": [310, 315, 1010], "powertransform": [311, 877, 888, 978, 998, 1039, 1042, 1045, 1047], "johnwon": 311, "weibul": 311, "bimod": [311, 414], "ineffect": [311, 998, 1039, 1040], "eric": [311, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "ericchang2017": 311, "northwestern": [311, 657], "contact": [311, 393, 1008], "font_siz": 311, "bc": 311, "qt": [311, 877], "x_lognorm": [311, 998], "x_chisq": 311, "chisquar": 311, "x_weibul": 311, "x_gaussian": 311, "x_uniform": 311, "loc_a": 311, "loc_b": 311, "x_a": 311, "x_b": 311, "x_bimod": 311, "d81b60": 311, "0188ff": 311, "ffc107": 311, "b7a2ff": 311, "2ec5ac": 311, "figaspect": 311, "axes_idx": 311, "axes_list": 311, "x_trans_bc": 311, "lmbda_bc": 311, "lambdas_": [311, 876, 1044, 1047], "x_trans_yj": 311, "lmbda_yj": 311, "x_trans_qt": 311, "ax_origin": 311, "ax_bc": 311, "ax_yj": 311, "ax_qt": 311, "x_tran": [311, 323, 383, 404, 441, 463, 876, 881, 888, 998], "meth_nam": 311, "lmbda": 311, "plot_map_data_to_norm": [311, 315, 1010], "involv": [312, 314, 317, 339, 343, 367, 369, 376, 381, 385, 395, 396, 411, 418, 698, 828, 829, 985, 989, 991, 995, 1003, 1008, 1013, 1022, 1039], "kneighbor": [312, 321, 842, 843, 844, 846, 848, 991, 1035, 1040, 1044, 1045, 1046, 1047], "obatin": 312, "tyler": [312, 1038, 1044, 1045, 1046], "lanigan": [312, 1038], "tylerlanigan": 312, "sebastian": [312, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "raschka": [312, 1036, 1037, 1038, 1039, 1040, 1043], "sebastianraschka": 312, "alcohol": [312, 378], "malic": [312, 378], "acid": [312, 378], "scaled_x_train": 312, "x_plot_scal": 312, "fit_and_plot_model": 312, "scaled_pca": 312, "x_train_transform": [312, 363, 412], "x_train_std_transform": 312, "first_pca_compon": 312, "target_class": 312, "repercuss": 312, "logisticregressioncv": [312, 395, 399, 657, 984, 989, 1035, 1036, 1037, 1039, 1040, 1041, 1045, 1046, 1048], "unscaled_clf": 312, "scaled_clf": 312, "y_pred_scal": 312, "y_proba_sc": 312, "0825": 312, "vastli": 312, "plot_scaling_import": [312, 315, 1010], "targetencod": [313, 314, 395, 873, 874, 978, 998, 1008, 1047, 1048], "wine_review": 313, "42074": 313, "countri": [313, 985], "provinc": 313, "region_1": 313, "region_2": 313, "wineri": 313, "tremend": [313, 415], "variet": 313, "hail": 313, "martha": 313, "vineyard": 313, "235": 313, "napa": 313, "vallei": 313, "cabernet": 313, "sauvignon": 313, "heitz": 313, "spain": 313, "ripe": 313, "aroma": 313, "blackberri": 313, "cassi": 313, "carodorum": 313, "selecci\u00f3n": 313, "reserva": 313, "northern": 313, "toro": 313, "tinta": 313, "bodega": 313, "carmen": 313, "rodr\u00edguez": 313, "watson": [313, 409], "honor": 313, "late": [313, 369], "harvest": 313, "knight": 313, "sonoma": 313, "blanc": 313, "macaulei": 313, "oak": 313, "reserv": [313, 560, 561, 1013, 1015], "oregon": 313, "willamett": 313, "pinot": 313, "noir": 313, "ponzi": 313, "franc": [313, 762], "b\u00e9gude": 313, "aft": [313, 1034], "br\u00fblade": 313, "provenc": 313, "bandol": 313, "one_hot": 313, "max_categori": [313, 321, 323, 873, 874, 998, 1045, 1047], "target_typ": [313, 881, 924, 951, 1048], "evaluate_model_and_stor": 313, "rmse_test_scor": 313, "rmse_train_scor": 313, "rmse_test_mean": 313, "rmse_test_std": 313, "rmse_train_mean": 313, "rmse_train_std": 313, "n_unique_categori": 313, "nuniqu": 313, "14810": 313, "1236": 313, "632": 313, "455": 313, "workaround": [313, 381, 797, 811], "high_cardinality_featur": 313, "low_cardinality_featur": 313, "mixed_encoded_preprocessor": 313, "high_cardin": 313, "low_cardin": 313, "mixed_pip": 313, "high_cardinalityindex": 313, "targetencodertargetencod": 313, "low_cardinalityindex": 313, "mixed_target": 313, "name_to_color": 313, "rmse_": 313, "_mean": 313, "_std": 313, "explod": 313, "unrel": [313, 368, 386, 389, 416, 514], "plot_target_encod": [313, 315, 1010], "near_uniqu": 314, "50_000": [314, 353], "n_categori": [314, 836, 874, 998], "kbin": [314, 322], "x_inform": 314, "permuted_categori": 314, "x_shuffl": 314, "catastroph": [314, 761, 1009], "x_near_unique_categori": 314, "raw_model": 314, "0049896314219657345": 314, "00457762158159003": 314, "model_with_cf": 314, "cf": [314, 408, 411, 441, 699, 984, 998, 1009], "8000184677460285": 314, "7927845601690948": 314, "coefs_cf": 314, "target_encod": 314, "x_train_no_cf_encod": 314, "x_test_no_cf_encod": 314, "model_no_cf": 314, "858486250088675": 314, "6338211367110066": 314, "coefs_no_cf": 314, "plot_target_encoder_cross_v": [314, 315, 1010], "879": 315, "announc": [317, 318, 319, 320, 321, 322, 323, 385], "latest": [317, 318, 319, 320, 321, 322, 323, 379, 381, 385, 387, 389, 1004, 1006, 1045], "upgrad": [317, 318, 319, 320, 321, 322, 323, 398, 1009, 1031, 1036, 1039], "conda": [317, 318, 319, 320, 321, 322, 323, 368, 381, 382, 384, 385, 387, 389, 398, 401, 1004], "forg": [317, 318, 319, 320, 321, 322, 323, 368, 382, 384, 385, 389, 398], "plot_roc_curv": [317, 1041, 1043], "plot_precision_recall_curv": [317, 1041, 1043, 1044], "stackingclassifi": [317, 363, 395, 399, 415, 567, 1041, 1042, 1043, 1044, 1045, 1046], "9473684210526315": 317, "radiusneighborstransform": [317, 844, 991, 1041, 1043, 1045, 1046], "sklearn_cache_": 317, "isomap__n_neighbor": 317, "nan_euclidean_dist": [317, 760, 978, 1041], "ccp_alpha": [317, 357, 556, 557, 558, 559, 563, 564, 908, 909, 910, 911, 1004, 1041], "tree_": [317, 357, 361, 845, 908, 909, 910, 911], "node_count": [317, 357, 361, 908, 909, 910, 911], "check_estim": [317, 383, 395, 932, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046], "pytest": [317, 368, 379, 381, 383, 384, 398, 401, 404, 931, 932, 1041, 1044], "estimator_check": [317, 383, 395, 407, 1038, 1039, 1041, 1042, 1045, 1046, 1047], "parametrize_with_check": [317, 383, 931, 1041, 1042], "test_sklearn_compatible_estim": [317, 932], "decision_function_shap": [317, 348, 902, 905, 1003, 1036, 1037, 1040, 1041], "9824": 317, "plot_release_highlights_0_22_0": [317, 324, 1010], "await": 318, "lam": [318, 319, 1042], "35776189065725783": 318, "42425183539869404": 318, "openmp": [318, 379, 384, 393, 395, 408, 415, 956, 1042, 1044, 1047], "8359690672211884": 318, "10k": [318, 446], "monotoinc": 318, "gbdt_cst": 318, "999791942438998": 318, "586": [318, 324, 1010], "plot_release_highlights_0_23_0": [318, 324, 1010], "art": [319, 387, 648, 691, 1008, 1013], "footprint": [319, 322, 367, 369, 408, 413, 554, 555, 556, 557, 562, 563, 564, 565, 1033, 1036, 1037, 1042, 1043, 1046], "yarowski": [319, 897, 1001], "selftrainingclassifi": [319, 329, 330, 331, 399, 1001, 1043], "random_unlabeled_point": [319, 895, 896, 897], "self_training_model": [319, 897], "base_estim": [319, 383, 406, 552, 553, 554, 555, 831, 834, 897, 977, 984, 1042, 1044, 1045, 1046, 1047], "selftrainingclassifierifittedselftrainingclassifi": 319, "7338": 319, "linear_baselin": 319, "714": 319, "decisiontreeregressorifitteddecisiontreeregressor": 319, "effort": [319, 381, 387, 1008, 1013, 1042, 1044], "plot_release_highlights_0_24_0": [319, 324, 1010], "l2_regular": [320, 415, 560, 561], "max_bin": [320, 321, 415, 560, 561], "quantileregressor": [320, 984, 988, 1044, 1045, 1046], "min_": [320, 408, 415, 870, 984, 998, 1002, 1003, 1004], "sum_i": [320, 645, 646, 651, 652, 659, 660, 661, 662, 680, 683, 979, 980, 984, 986, 988, 993], "pb_q": [320, 984], "_1": [320, 343, 410, 413, 416, 530, 536, 537, 539, 544, 545, 546, 645, 646, 651, 652, 653, 654, 655, 659, 660, 661, 662, 680, 681, 682, 683, 764, 984, 986, 988, 1003], "get_feature_nam": [320, 1039, 1040, 1042, 1043, 1044], "pet": [320, 786, 988], "dog": [320, 321, 323, 581, 781, 881, 998], "fish": 320, "pet_cat": 320, "pet_dog": 320, "pet_fish": 320, "plot_": [320, 398], "plot_release_highlights_1_0_0": [320, 324, 1010], "x_1d": 321, "hist_quantil": 321, "log_reg_input_featur": 321, "gather": [321, 323, 389, 396, 407, 408, 998, 1013], "min_frequ": [321, 323, 873, 874, 998, 1045, 1047], "rabbit": [321, 323, 998], "snake": [321, 323, 581, 881, 998], "infrequent_categories_": [321, 323, 873, 874, 881, 998], "x0_cat": [321, 998], "x0_rabbit": [321, 998], "x0_infrequent_sklearn": [321, 998], "refactor": [321, 1031, 1033, 1034, 1035, 1041, 1044, 1045, 1046], "radius_neighbor": [321, 848, 850, 851, 852, 1035, 1040, 1041, 1043, 1044, 1045, 1046], "pairwise_distances_argmin_min": [321, 777, 1034, 1039, 1045, 1046, 1047], "radiusneighborsclassifi": [321, 842, 843, 848, 851, 989, 991, 1031, 1033, 1037, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "radiusneighborsregressor": [321, 842, 843, 848, 850, 991, 1031, 1033, 1039, 1041, 1043, 1044, 1045, 1046, 1047], "trustworthi": [321, 1039, 1040, 1045, 1046, 1047, 1048], "labelpropag": [321, 328, 896, 897, 989, 1001, 1032, 1037, 1038, 1041, 1042, 1043, 1045, 1046, 1047], "labelspread": [321, 326, 327, 328, 330, 331, 895, 897, 989, 1001, 1032, 1037, 1038, 1041, 1042, 1045, 1046, 1047], "blog": [321, 367, 381, 387, 389, 396, 1042], "cython": [321, 367, 368, 370, 379, 381, 384, 390, 393, 398, 401, 404, 407, 408, 415, 507, 998, 999, 1002, 1003, 1008, 1009, 1031, 1034, 1035, 1037, 1043, 1046, 1047, 1048], "readili": [321, 413, 1004, 1013], "true_w": 321, "true_h": 321, "x_reconstruct": [321, 481, 482, 483, 582], "00364": 321, "divis": [321, 408, 416, 589, 590, 593, 711, 712, 727, 728, 736, 744, 781, 782, 785, 988, 1023, 1035, 1039, 1040, 1043, 1047], "bisect_km": 321, "plot_release_highlights_1_1_0": [321, 324, 1010], "video": [322, 370, 375, 384, 502, 989, 1013, 1016], "sepal_col": 322, "petal_col": 322, "x_out": [322, 864, 873, 874], "052506": 322, "592373": 322, "189830": 322, "973554": 322, "416010": 322, "630382": 322, "765012": 322, "362176": 322, "021849": 322, "788808": 322, "hist_no_interact": 322, "v1": [322, 375, 398, 560, 561, 754, 795, 796, 1043, 1046, 1047, 1048], "liac": [322, 375, 381, 495, 1046, 1047], "arff": [322, 381, 495, 1043, 1046, 1047], "ticket": [322, 381], "cabin": 322, "boat": 322, "allen": [322, 1034, 1036, 1038, 1041], "elisabeth": 322, "walton": 322, "24160": 322, "3375": 322, "b5": 322, "loui": [322, 1036, 1037, 1041, 1043, 1045, 1047], "mo": [322, 1042], "allison": 322, "hudson": 322, "9167": 322, "113781": 322, "151": [322, 387, 415, 1000], "5500": [322, 687, 985], "c22": 322, "c26": 322, "montreal": 322, "pq": 322, "chestervil": 322, "ON": 322, "helen": 322, "lorain": 322, "joshua": [322, 376, 1033, 1034, 1036, 1037, 1043, 1046, 1047], "creighton": 322, "bessi": 322, "waldo": 322, "compliant": [322, 381], "cupi": [322, 404], "gpu": [322, 404, 992, 1009, 1024], "changelog": [322, 385, 395], "plot_release_highlights_1_2_0": [322, 324, 1010], "throughout": [323, 363, 395, 626, 798, 857, 858, 1015, 1034, 1039], "codebas": [323, 363, 381, 382, 383, 416, 1031, 1037], "ongo": [323, 382, 396], "incorpor": [323, 381, 409, 415, 987, 1008, 1013], "contrib": [323, 381, 383, 389, 393, 395, 408, 1008, 1009, 1047], "adpot": 323, "true_label": [323, 326, 327], "non_noisy_label": 323, "9694149248180188": 323, "encodings_": [323, 881, 998], "validation_curv": [323, 347, 399, 819, 983, 1038, 1039, 1040, 1043, 1047], "geomspac": 323, "make_low_rank_matrix": [323, 523], "46858513287221654": 323, "367": [323, 324, 353, 415, 1010, 1031], "plot_release_highlights_1_3_0": [323, 324, 1010], "release_highlight": [324, 1010], "semisupervis": [326, 395], "clai": [326, 327, 328, 331, 1031], "woolam": [326, 327, 328, 331, 1031], "n_total_sampl": [326, 327], "n_labeled_point": [326, 327], "unlabeled_set": 326, "everyth": [326, 363, 385, 387, 393, 463, 943, 1008, 1009, 1031], "lp_model": [326, 327], "predicted_label": [326, 327], "transduction_": [326, 327, 328, 895, 896, 897], "_plot": 326, "0x7f2b99f426d0": 326, "pred_entropi": [326, 327], "label_distributions_": [326, 327, 895, 896, 1042], "uncertainty_index": [326, 327], "image_index": [326, 327], "331": [326, 332, 1010], "plot_label_propagation_digit": [326, 332, 1010], "max_iter": 327, "______________________________________________________________________": 327, "290": [327, 687, 688, 692, 985], "280": 327, "unlabeled_indic": 327, "transduc": 327, "delete_indic": 327, "nfit": 327, "delete_index": 327, "plot_label_propagation_digits_active_learn": [327, 332, 1010], "label_spread": 328, "labelspreadingifittedlabelspread": 328, "output_label": 328, "output_label_arrai": 328, "outer_numb": 328, "inner_numb": 328, "167": [328, 332, 387, 1010, 1031], "plot_label_propagation_structur": [328, 332, 1010], "breast_canc": 329, "augment": [329, 629, 882, 1013], "oliv": [329, 331, 1039, 1040, 1042, 1043, 1044], "rausch": [329, 331, 1039, 1040, 1043], "rauscho": [329, 331], "ethz": [329, 331], "total_sampl": [329, 535], "base_classifi": [329, 331, 1001], "x_valu": 329, "99999": 329, "amount_label": 329, "amount_iter": 329, "self_training_clf": 329, "skfold": 329, "y_test_tru": 329, "labeled_iter_": [329, 897], "return_count": [329, 353, 852], "capsiz": 329, "twinx": 329, "plot_self_training_varying_threshold": [329, 332, 1010], "2823": 330, "2117": 330, "441": 330, "758": 330, "1676": 330, "1108": 330, "847": 330, "tfidftransform": [330, 353, 354, 416, 488, 590, 1024, 1038, 1039, 1045, 1047, 1048], "sdg_param": 330, "vectorizer_param": 330, "selftrain": 330, "st_pipelin": 330, "ls_pipelin": 330, "eval_and_print_metr": 330, "y_mask": 330, "x_20": 330, "y_20": 330, "720": [330, 332, 1010], "plot_semi_supervised_newsgroup": [330, 332, 1010], "y_rand": 331, "y_30": 331, "y_50": 331, "ls30": 331, "ls50": 331, "ls100": 331, "st30": 331, "st50": 331, "rbf_svc": [331, 1003], "color_map": 331, "plot_semi_supervised_versus_svm_iri": [331, 332, 1010], "752": [332, 352], "my_kernel": [335, 1003], "plot_custom_kernel": [335, 350, 1010], "2x2": [336, 408, 752], "plot_iris_svc": [336, 350, 1010], "convention": [337, 395, 896], "support_vector_indic": 337, "198": [337, 350, 1010, 1031], "plot_linearsvc_support_vector": [337, 350, 1010], "plot_oneclass": [338, 350, 1010], "midpoint": 339, "blink": 339, "act": [339, 352, 381, 394, 414, 415, 712, 727, 728, 736, 781, 782, 785, 875, 879, 985, 988, 991, 1003, 1039], "spuriou": [339, 389, 998, 1044, 1045, 1046], "c_rang": 339, "gamma_rang": 339, "midpointnorm": 339, "masked_arrai": [339, 797, 811], "x_2d": 339, "y_2d": 339, "c_2d_rang": 339, "gamma_2d_rang": 339, "bright": 339, "brutal": 339, "plot_rbf_paramet": [339, 350, 1010], "plot_separating_hyperplan": [340, 350, 1010], "plain": [341, 418, 656, 1002], "n_samples_1": [341, 1003], "n_samples_2": [341, 1003], "clusters_std": 341, "wclf": 341, "wdisp": 341, "plot_separating_hyperplane_unbalanc": [341, 350, 1010], "blown": 342, "score_mean": 342, "score_std": 342, "346": [342, 350, 415, 500, 554, 555, 1010], "plot_svm_anova": [342, 350, 1010], "outermost": 343, "hinge_loss": [343, 988, 1035, 1043, 1044], "enrich": 343, "plot_training_data_with_decision_boundari": 343, "cosine_similar": [343, 758, 763, 986, 1036], "untransform": [343, 463, 466, 999], "bend": 343, "tanh": [343, 775, 857, 858, 986, 1003], "hyperbol": [343, 641, 857, 858, 986, 992], "generaliz": [343, 415], "comprehens": [343, 416, 756, 757, 986, 1013, 1039], "522": [343, 350, 901, 1010], "plot_svm_kernel": [343, 350, 1010], "plot_svm_margin": [344, 350, 1010], "fignum": 344, "unreg": 344, "yy_down": 344, "yy_up": 344, "072": [344, 350, 436, 647, 1010], "nusvc": [345, 367, 436, 903, 989, 1003, 1031, 1032, 1033, 1036, 1039, 1041, 1042, 1043, 1045], "plot_svm_nonlinear": [345, 350, 1010], "svr_rbf": 346, "svr_lin": 346, "svr_poli": 346, "kernel_label": 346, "model_color": 346, "setdiff1d": 346, "fancybox": 346, "410": [346, 350, 1010], "plot_svm_regress": [346, 350, 1010], "omega": [347, 411, 982], "dependen": 347, "reparametr": 347, "model_l1": 347, "shuffle_param": 347, "best_c": 347, "idxmax": 347, "train_size_idx": 347, "results_sc": 347, "c_scale": 347, "best_c_scal": 347, "somewhat": [347, 363, 369, 381, 383, 413, 415, 902, 905, 984, 1003, 1004], "dantzig": 347, "model_l2": 347, "787": [347, 350, 1010], "plot_svm_scale_c": [347, 350, 1010], "break_ti": [348, 902, 905, 1003, 1041], "accent": [348, 587, 588, 590, 1041], "090": [348, 350, 1010], "plot_svm_tie_break": [348, 350, 1010], "emphasi": [349, 411, 902, 903, 904, 905, 906, 995, 1008], "subtl": [349, 363, 987, 1009], "plot_decision_funct": 349, "sample_weight_last_ten": 349, "sample_weight_const": 349, "clf_no_weight": 349, "clf_weight": 349, "541": [349, 350, 451, 461, 1010], "plot_weighted_sampl": [349, 350, 1010], "size_mb": 352, "utf": [352, 354, 416, 486, 502, 581, 587, 588, 590], "load_dataset": 352, "sublinear_tf": [352, 413, 416, 589, 590], "duration_train": 352, "duration_test": 352, "data_train_size_mb": 352, "data_test_size_mb": 352, "2034": [352, 376], "98mb": 352, "1353": 352, "87mb": 352, "055mb": 352, "7831": 352, "248": 352, "573mb": 352, "ridgeclassifi": [352, 367, 671, 672, 674, 984, 989, 1036, 1040, 1044, 1045, 1046], "sparse_cg": [352, 671, 673, 686, 984, 1032, 1038, 1040, 1041, 1045, 1047], "rarer": [352, 354, 416], "deeper": [352, 1004], "plot_feature_effect": 352, "average_feature_effect": 352, "top5": 352, "top_indic": 352, "predictive_word": 352, "bar_siz": 352, "y_loc": 352, "keyword": [352, 375, 381, 383, 386, 388, 395, 408, 419, 422, 437, 443, 444, 449, 451, 456, 463, 466, 495, 502, 534, 537, 539, 558, 559, 566, 567, 568, 569, 619, 627, 630, 631, 638, 642, 645, 646, 651, 652, 659, 660, 661, 662, 680, 683, 687, 691, 696, 697, 698, 699, 700, 701, 772, 776, 777, 778, 779, 790, 791, 803, 819, 840, 841, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 860, 864, 932, 934, 955, 977, 985, 988, 991, 1001, 1031, 1035, 1037, 1038, 1039, 1041, 1043, 1045, 1046, 1047, 1048], "keith": [352, 1031, 1036], "atheist": 352, "orbit": [352, 353], "caltech": 352, "expectedli": 352, "pollut": [352, 726, 783, 988, 994], "sender": [352, 376], "livesei": 352, "solntz": 352, "wpd": 352, "sgi": 352, "jon": [352, 1038, 1041, 1042, 1044, 1045], "nntp": [352, 376, 1024], "1qlettinn8oi": 352, "cco": 352, "allan": [352, 406, 1043], "schneider": [352, 1044], "me": 352, "instinct": 352, "happi": [352, 393, 396, 815, 816], "listen": 352, "murder": 352, "voluntari": 352, "disregard": [352, 395, 416, 431, 464, 481, 482, 483, 551, 553, 555, 557, 559, 561, 564, 567, 569, 610, 634, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 669, 671, 672, 677, 678, 720, 721, 722, 783, 833, 834, 843, 851, 858, 869, 870, 876, 877, 880, 885, 888, 889, 891, 901, 903, 906, 909, 911, 988, 1039], "beings": 352, "bahavior": 352, "theirs": 352, "mimicri": 352, "imit": 352, "parrot": 352, "polli": 352, "pulchritud": 352, "anim": [352, 416], "kill": 352, "Or": [352, 361, 412, 413, 873, 988, 994, 1002], "sigh": 352, "wonder": 352, "bahaviour": 352, "believ": [352, 353, 389, 393, 1013], "primat": 352, "arbitarili": 352, "poster": [352, 380, 381, 1023], "weren": [352, 874, 1040], "slai": 352, "mate": 352, "ritual": 352, "whatnot": 352, "aren": [352, 376, 385, 398, 407, 724, 754, 993, 1041, 1043], "ye": [352, 389, 395, 867, 884, 984], "gorilla": 352, "dolphin": 352, "platypu": 352, "writer": 352, "launch": [352, 353, 398, 1013], "custom_nam": 352, "clf_descr": 352, "rocchio": [352, 847], "000936": 352, "772": [352, 721], "5316": 352, "0456": 352, "000656": 352, "00098": 352, "0693": [352, 618], "0395": 352, "000634": 352, "0297": 352, "00064": 352, "762": 352, "00325": 352, "00226": 352, "748": [352, 387], "00319": 352, "000866": 352, "779": 352, "training_tim": 352, "txt": [352, 375, 492, 502], "curs": [352, 353, 408, 414, 990, 991, 1018, 1023], "harm": [352, 383, 416, 793], "plot_document_classification_20newsgroup": [352, 355, 1010], "discov": [353, 407, 408, 413, 416, 419, 443, 447, 1015, 1046], "category_s": 353, "true_k": 353, "3387": 353, "evaluations_std": 353, "fit_and_evalu": 353, "evaluation_std": 353, "score_valu": 353, "std_score": [353, 1044], "collis": [353, 354, 416, 581, 588], "x_tfidf": 353, "453": 353, "7929": [353, 1038], "prod": [353, 620], "phenomenon": [353, 998], "cluster_s": 353, "2050": 353, "711": 353, "446": [353, 724, 754, 988], "485": [353, 695], "1708": 353, "3384": 353, "1887": 353, "311": 353, "332": [353, 888], "1688": 353, "454": 353, "973": [353, 412], "358": 353, "380": [353, 1024], "217": [353, 534, 540], "redo": 353, "x_lsa": 353, "explained_vari": [353, 988], "398": [353, 646, 1024], "010": [353, 387, 996], "435": 353, "416": [353, 737, 988], "320": [353, 376, 977, 1002, 1031], "030": 353, "minibatch_kmean": 353, "348": 353, "376": [353, 996], "047": [353, 387], "original_space_centroid": 353, "order_centroid": 353, "ve": [353, 381, 416, 1012, 1013, 1024, 1038], "shuttl": 353, "bibl": 353, "sparciti": 353, "lsa_vector": 353, "x_hashed_lsa": 353, "812": 353, "392": 353, "413": 353, "328": [353, 728], "022": [353, 996], "df_std": 353, "speak": [353, 367, 381, 1002], "safer": [353, 363, 379, 408, 412, 1031], "plot_document_clust": [353, 355, 1010], "18000": [354, 376], "raw_data": 354, "data_size_mb": 354, "3803": 354, "245mb": 354, "anyth": [354, 385, 387, 395, 399, 409, 412, 948, 952, 1045], "unicod": [354, 416, 486, 502, 581, 587, 588, 590, 953, 1031, 1039, 1043], "charact": [354, 381, 386, 395, 416, 502, 507, 508, 587, 588, 590, 912, 993, 1024, 1031, 1044, 1046], "underscor": [354, 383, 395, 972, 1021, 1031, 1041, 1044], "tok": [354, 416], "findal": 354, "token_freq": 354, "dict_count_vector": 354, "47928": 354, "vocabulary_": [354, 416, 580, 587, 590, 1024, 1031], "19145": 354, "n_nonzero_column": 354, "601": 354, "43873": 354, "inact": [354, 375, 381], "584": 354, "47668": 354, "input_typ": [354, 416, 463, 581], "y_po": 354, "downsid": 354, "featureheash": 354, "implicitli": [354, 390, 415, 596, 631, 632, 879, 978, 980, 995, 998, 1003], "token_pattern": [354, 416, 587, 588, 590], "712": 354, "47885": 354, "526": [354, 900], "plot_hashing_vs_dict_vector": [354, 355, 1010], "parameter": [357, 418, 613, 614, 621, 622, 795, 796, 984, 985, 993, 998, 1004], "weakest": [357, 1004], "cost_complexity_pruning_path": [357, 908, 909, 910, 911], "drawstyl": [357, 699], "3272984419327777": 357, "plot_cost_complexity_prun": [357, 362, 1010], "ryb": 358, "pairidx": 358, "borderpad": 358, "handletextpad": 358, "plot_iris_dtc": [358, 362, 1010], "plot_tre": [358, 361, 1004, 1040, 1042, 1043, 1044, 1046, 1047], "817": [358, 362, 1010], "plot_tree_regress": [359, 362, 1010], "regr_3": 360, "y_3": 360, "236": [360, 362, 1010], "plot_tree_regression_multioutput": [360, 362, 1010], "decision_path": [361, 556, 557, 563, 564, 565, 908, 909, 910, 911, 1037, 1042], "decisiontreeclassifierifitteddecisiontreeclassifi": 361, "compute_node_depth": 361, "children_left": 361, "children_right": 361, "n_node_sampl": 361, "weighted_n_node_sampl": 361, "travers": [361, 991, 995], "n_node": [361, 440, 444, 462, 556, 557, 563, 564, 565, 908, 909, 910, 911, 942], "node_depth": 361, "is_leav": 361, "pop": [361, 393, 915, 1019, 1039], "visit": [361, 381, 995], "node_id": [361, 912, 914], "is_split_nod": 361, "children": [361, 408, 415, 440, 444, 462, 565, 1035], "800000011920929": 361, "950000047683716": 361, "n_output": [361, 395, 415, 425, 431, 432, 436, 441, 444, 464, 468, 481, 482, 483, 531, 533, 535, 536, 538, 541, 542, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 566, 567, 568, 569, 581, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 627, 629, 632, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 674, 675, 677, 678, 720, 721, 726, 743, 744, 746, 748, 749, 751, 752, 783, 786, 788, 789, 797, 800, 801, 803, 811, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 847, 849, 850, 851, 856, 857, 858, 859, 863, 864, 865, 866, 869, 870, 872, 873, 874, 875, 877, 878, 879, 880, 892, 893, 895, 896, 900, 901, 902, 903, 905, 906, 908, 909, 910, 911, 926, 959, 988, 989, 1004, 1038, 1041], "node_index": 361, "node_ind": 361, "leaf_id": 361, "sample_id": [361, 376, 496], "threshold_sign": 361, "inequ": [361, 395, 408, 442, 446, 458, 698, 985, 986, 991], "common_nod": 361, "common_node_id": 361, "plot_unveil_tree_structur": [361, 362, 1010], "x_test_transform": [363, 412], "standard_norm": 363, "unfair": 363, "x_select": 363, "gbc": 363, "x_train_select": 363, "x_test_select": 363, "tip": [363, 366, 370, 381, 384, 387, 403, 416, 533, 540, 644, 691, 984, 1011, 1025, 1026, 1029, 1034], "glossari": [363, 370, 381, 383, 387, 407, 419, 420, 436, 439, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 463, 466, 468, 471, 473, 487, 490, 491, 494, 496, 502, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 582, 583, 593, 601, 606, 607, 609, 610, 626, 631, 633, 638, 639, 640, 641, 645, 646, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 691, 692, 693, 694, 700, 772, 776, 779, 791, 795, 796, 797, 799, 800, 801, 802, 803, 809, 811, 812, 813, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 842, 843, 845, 846, 848, 849, 850, 851, 853, 854, 856, 857, 858, 859, 862, 865, 877, 881, 889, 892, 893, 895, 896, 900, 901, 902, 905, 908, 909, 910, 911, 936, 937, 959, 962, 977, 978, 984, 1015, 1039], "mtrand": 363, "_rand": 363, "85418642": 363, "79084103": 363, "13077794": 363, "11915045": 363, "56479934": 363, "70814003": 363, "25291366": 363, "55212743": 363, "18197458": 363, "37845099": 363, "mutat": [363, 1039], "debug": [363, 368, 382, 384, 387, 395, 397, 626, 899, 954, 1008, 1024, 1039, 1043], "govern": [363, 367, 370, 381, 395, 1006, 1013], "implic": [363, 381], "rf_123": 363, "rf_inst": 363, "didn": [363, 395, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "strict": [363, 379, 395, 413, 502, 534, 587, 588, 590, 984, 1031, 1040, 1043], "pervas": [363, 381], "unlucki": 363, "lucki": 363, "fairer": 363, "temptat": [363, 381], "throughput": [366, 1008, 1026, 1034], "switch": [366, 677, 703, 716, 735, 753, 755, 793, 840, 841, 936, 937, 988, 991, 1026, 1031], "offlin": [367, 381], "bottleneck": [367, 387, 415, 447, 857, 858], "hurt": [367, 533, 1039], "toolkit": [367, 1008, 1013], "branch": [367, 379, 381, 384, 385, 408, 415, 441, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 908, 909, 910, 911, 913, 991, 995, 1004], "sklearn_assume_finit": 367, "assume_finit": [367, 368, 467, 898], "assert_all_finit": [367, 390, 467], "nm": 367, "csc": [367, 393, 395, 416, 526, 550, 552, 553, 669, 691, 867, 869, 875, 880, 883, 885, 891, 916, 920, 921, 951, 963, 964, 966, 967, 968, 969, 991, 998, 1039, 1040, 1042, 1045], "32bit": [367, 953], "speedup": [367, 413, 415, 649, 653, 656, 1031, 1032, 1033, 1034, 1046], "multithread": [367, 408, 900, 901, 902, 903, 904, 905, 906], "bla": [367, 368, 379, 382, 387, 1031, 1039, 1040, 1042, 1043], "sparsity_ratio": 367, "gbt": 367, "speedi": 367, "packet": 367, "reuter": [367, 376], "carefulli": [367, 413, 1003], "spawn": [367, 393, 797, 811, 821, 822, 823, 1042], "gil": [367, 368, 382, 956, 1034, 1039, 1040, 1043, 1044, 1048], "ought": 367, "lapack": [367, 368, 379, 531, 534, 540, 687, 1046], "dgemm": 367, "show_vers": [367, 379, 381, 389, 398, 1039], "atla": [367, 379], "rebuild": [367, 402, 416, 441], "openbla": [367, 368, 379, 393, 956, 1044, 1048], "mkl": [367, 368, 379, 393, 956, 1031], "veclib": [367, 393], "osx": 367, "nouri": [367, 1032, 1034], "instruct": [367, 381, 382, 383, 384, 385, 386, 389, 393, 394, 502, 587, 588, 590, 1015, 1024, 1031], "ubuntu": [367, 379, 387, 389], "1gb": 367, "mib": [367, 467, 898], "working_memori": [367, 368, 467, 779, 898, 1039], "adher": [367, 383, 395, 931, 932, 1031, 1032], "pairwise_distances_chunk": [367, 776, 1039, 1042, 1048], "facilit": [367, 395, 402, 1008, 1009, 1037, 1040], "moment": [367, 413, 418, 439, 614, 622, 857, 858, 952, 992, 993], "000024": 367, "027400": 367, "mileag": 367, "deploi": [367, 397, 402, 1009, 1013], "upstream": [367, 381, 385, 389, 393, 998, 1040], "lighter": [367, 699, 701, 780, 787, 1047], "threadpoolctl": [368, 379, 398, 401], "subsect": [368, 381, 407], "worker": [368, 395, 416, 954, 955, 956, 1046], "14228": 368, "loki": [368, 956, 988, 1039, 1042], "duplic": [368, 380, 381, 395, 408, 419, 443, 447, 448, 514, 634, 645, 646, 651, 652, 659, 660, 661, 662, 680, 683, 824, 871, 974, 991, 1031, 1034, 1043, 1045, 1047, 1048], "memmap": [368, 376, 395, 413, 507, 533, 1039], "1mb": [368, 1036], "parallel_backend": [368, 419, 436, 443, 445, 447, 449, 451, 456, 457, 460, 463, 466, 471, 530, 534, 535, 536, 538, 541, 542, 544, 545, 547, 554, 555, 556, 557, 562, 563, 564, 565, 566, 567, 568, 569, 593, 601, 609, 631, 633, 638, 646, 650, 652, 654, 656, 657, 658, 660, 662, 664, 665, 667, 675, 678, 687, 688, 689, 690, 691, 692, 693, 772, 776, 779, 797, 800, 801, 803, 811, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 832, 833, 842, 843, 846, 848, 850, 851, 853, 854, 859, 862, 895, 896, 1039], "exclus": [368, 393, 395, 413, 415, 626, 627, 629, 977, 984, 988, 989, 1013, 1038, 1042], "omp_num_thread": 368, "my_script": 368, "algebra": [368, 379, 384, 393, 413, 416, 461, 866, 998], "bli": [368, 379, 393], "mkl_num_thread": 368, "openblas_num_thread": 368, "blis_num_thread": 368, "bash": [368, 389], "zsh": 368, "termin": [368, 386, 387, 389, 398, 408, 447, 460, 552, 553, 557, 558, 559, 562, 564, 665, 666, 667, 675, 677, 857, 858, 909, 911, 994, 1004], "prompt": [368, 379, 381, 398, 401, 416, 1015], "pypi": [368, 379, 381, 383, 385, 387, 398, 1004, 1039, 1043, 1045, 1046, 1048], "channel": [368, 376, 379, 393, 398, 416, 492, 493, 582, 583, 585, 586], "subscript": [368, 1044], "max_thread": [368, 382], "n_cpu": [368, 395], "preced": [368, 381, 486, 988, 1031], "lib": [368, 379, 398, 1008], "_num_thread": 368, "singleton": [368, 805, 923, 1044, 1047], "aforement": [368, 989], "global_random_se": 368, "fixtur": [368, 381], "build_numb": 368, "disrupt": 368, "config": [368, 381, 382, 389, 625, 1039], "contributor": [368, 384, 385, 386, 389, 393, 395, 988, 1006, 1009, 1032, 1033, 1034], "encount": [368, 379, 402, 408, 415, 416, 495, 560, 561, 580, 835, 836, 837, 839, 873, 963, 998, 1002, 1008, 1012, 1013, 1024, 1039, 1042], "annoi": 368, "test_your_test_nam": 368, "skip": [368, 381, 383, 390, 404, 416, 467, 567, 645, 646, 651, 659, 660, 661, 670, 680, 898, 1024, 1035, 1038, 1041, 1043, 1045, 1047], "global_dtyp": 368, "boundscheck": [368, 382], "segfault": [368, 382, 1031, 1039, 1044], "posix": [368, 393], "pairwisedistancesreduct": 368, "adequ": [368, 387, 566, 1015, 1044], "drive": [369, 413, 414, 548, 1002, 1013, 1024], "passiveaggressiveregressor": [369, 984, 1032, 1035, 1038, 1039, 1042, 1044], "maxabsscal": [369, 404, 864, 885, 978, 998, 1036, 1039, 1040, 1041, 1042, 1047, 1048], "routin": [369, 375, 378, 381, 382, 383, 384, 389, 393, 395, 417, 671, 673, 686, 843, 902, 903, 904, 905, 906, 985, 991, 998, 999, 1002, 1008, 1013, 1031, 1045, 1046, 1047], "passiveaggress": [369, 416], "fledg": [369, 416], "naivebay": 369, "dramat": 369, "welcom": [370, 380, 381, 389, 396, 1009, 1012], "roadmap": [370, 1006], "persist": [370, 389, 393, 413, 445, 609, 610, 856, 993, 1008, 1026, 1037, 1040], "craft": [370, 384], "curat": [370, 381, 384, 385], "fetcher": [374, 1036, 1038, 1047], "linnerrud": [374, 1026], "covertyp": [374, 490, 1026], "rcv1": [374, 496, 1026, 1036], "svmlight": [374, 486, 507, 508, 1026, 1031, 1032, 1038, 1040], "jpeg": [375, 376, 492, 493], "publish": [375, 376, 383, 385, 389, 395, 1000, 1009, 1043], "creativ": 375, "spare": [375, 673, 674], "pyplpt": 375, "load_svmlight_fil": [375, 1031, 1032, 1037, 1038, 1039, 1046], "test_dataset": 375, "everybodi": [375, 381], "upload": [375, 379, 385, 393, 670], "mice": [375, 626, 978], "brain": 375, "miceprotein": 375, "1080": [375, 408], "sc": [375, 408], "clara": [375, 1043], "higuera": 375, "katheleen": 375, "gardin": 375, "krzysztof": 375, "cio": 375, "protein": 375, "cite": [375, 408, 1006], "kj": [375, 990], "critic": [375, 381, 394, 402, 415, 691, 985, 988, 996, 1003, 1013, 1042], "syndrom": 375, "plo": [375, 606, 607], "ONE": [375, 606, 607], "e0129126": 375, "40966": 375, "upload_d": 375, "08t16": 375, "17928620": 375, "file_id": 375, "default_target_attribut": 375, "row_id_attribut": 375, "mouseid": 375, "ignore_attribut": 375, "genotyp": 375, "cc18": 375, "study_135": 375, "study_98": 375, "study_99": 375, "md5_checksum": 375, "3c479a6885bfa0438971388283a1ce32": 375, "websit": [375, 376, 378, 381, 396, 992, 1002, 1013, 1024, 1032, 1033, 1034], "4550": 375, "17t14": 375, "1804243": 375, "pone": 375, "0129126": 375, "openml100": 375, "study_14": 375, "study_34": 375, "earliest": [375, 985], "iris_61": 375, "iris_969": 375, "969": 375, "iris_version_3": 375, "vanschoren": [375, 1043], "rijn": [375, 1039], "bischl": 375, "torgo": 375, "acm": [375, 376, 408, 419, 443, 449, 456, 459, 510, 562, 675, 724, 754, 846, 988, 991, 994, 1000], "sigkdd": [375, 376, 510, 675, 881, 998, 1000], "newslett": 375, "legaci": [375, 385, 395, 956, 1031, 1038, 1043], "my": [375, 381, 386, 389, 495], "columnar": [375, 463, 1008], "usabl": [375, 381, 383, 395, 402, 416, 797, 956, 1031, 1038, 1045, 1046], "io": [375, 378, 379, 381, 385, 387, 389, 395, 402, 691, 1008, 1029], "json": [375, 381, 398], "sql": 375, "smoothli": 375, "manipul": [375, 404, 506, 956, 1008, 1037], "mat": [375, 416], "load_fil": [375, 376, 1024, 1033, 1045], "audio": [375, 502], "wish": [375, 381, 388, 390, 398, 408, 649, 650, 653, 654, 655, 663, 664, 937, 1016, 1024, 1038], "imageio": 375, "wavfil": 375, "wav": 375, "hdf5": 375, "h5py": 375, "pytabl": 375, "april": [376, 663, 684, 685, 1035, 1043], "AT": [376, 494], "laboratori": [376, 1008], "cambridg": [376, 413, 589, 835, 839, 984, 986, 990], "facial": 376, "glass": 376, "upright": 376, "frontal": 376, "movement": 376, "credit": [376, 389, 415, 984, 1013], "18846": [376, 487, 488], "scikit_learn_data": [376, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498], "20news_hom": 376, "newsgroups_train": 376, "11314": 376, "1073": 376, "20new": [376, 1024], "34118": 376, "01327": 376, "newsgroups_test": 376, "vectors_test": 376, "class_prior": [376, 835, 836, 837, 839, 1032, 1035], "fit_prior": [376, 835, 836, 837, 839], "88213": 376, "suspici": 376, "show_top10": 376, "top10": 376, "affili": 376, "abund": 376, "clue": [376, 389, 985], "bare": [376, 985, 1024], "quotat": 376, "77310": 376, "76995": 376, "cleveland": 376, "indian": 376, "leagu": 376, "team": [376, 384, 393, 395, 1006, 1008, 1013, 1031], "ohio": 376, "spark": [376, 1009], "death": 376, "floyd": [376, 687, 985], "reckon": 376, "coloni": 376, "paul": [376, 1034, 1037, 1038, 1039, 1040, 1044, 1045], "dolan": 376, "nicknam": 376, "tribe": 376, "theme": [376, 1031], "mlb": [376, 871], "inappropri": [376, 412, 418, 708, 818], "nlp": [376, 413, 416, 835, 839, 986, 1013], "cultur": 376, "inflammatori": 376, "famou": [376, 378, 415, 1003], "internet": [376, 386, 998, 1022], "offici": [376, 383, 395, 398, 492, 496, 1008, 1024, 1039, 1040, 1043], "verif": [376, 988, 1013], "identif": [376, 381, 408, 496, 977, 1016], "viola": [376, 1039], "opencv": 376, "detector": [376, 395, 846], "5749": [376, 492, 493], "13233": [376, 492, 493], "5828": [376, 492, 493], "200m": 376, "lfw_home": 376, "rectangular": [376, 395, 937, 1009], "1140": 376, "fetch_lfw_pair": [376, 1036, 1046], "lfw_pairs_train": 376, "subdivid": [376, 418], "10_fold": [376, 492], "gari": [376, 1038], "huang": [376, 657, 1037, 1042], "manu": 376, "ramesh": [376, 1013, 1034, 1037, 1041], "tamara": 376, "berg": [376, 1032, 1033, 1043], "erik": [376, 1013, 1034], "miller": [376, 1039, 1040, 1044], "massachusett": 376, "amherst": 376, "30m": 376, "seven": [376, 981], "homepag": [376, 529, 1004], "581012": [376, 490], "newswir": 376, "ltd": [376, 1013], "804414": [376, 496], "47236": [376, 496], "fetch_rcv1": [376, 1036, 1040], "v2": [376, 496, 663, 684, 685, 984], "chronolog": [376, 496], "23149": [376, 496, 1045], "781265": [376, 496], "lyrl2004": [376, 496], "2286": 376, "810596": 376, "2287": 376, "2288": 376, "uint32": [376, 496], "gmil": 376, "381327": 376, "ccat": 376, "e11": 376, "ecat": 376, "m11": 376, "656": 376, "lewi": [376, 1038, 1042], "yang": [376, 408, 413, 533, 638, 1037, 1038, 1041, 1043, 1044, 1045, 1047], "rose": 376, "361": [376, 415, 554, 555], "397": 376, "cup": [376, 988], "tcpdump": 376, "darpa": 376, "intrus": 376, "lincoln": 376, "unrealist": 376, "sa": [376, 491], "logged_in": 376, "smtp": [376, 491], "resp": [376, 415, 596, 795, 796, 1002, 1039], "4898431": [376, 491], "976158": 376, "699691": 376, "619052": 376, "95373": 376, "kddcup99": [376, 491], "richard": [376, 417, 657, 1032, 1041, 1043, 1045, 1046], "lippmann": 376, "hain": 376, "jonathan": [376, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1047], "korba": 376, "da": [376, 1046, 1047], "yamanishi": 376, "takeuchi": 376, "miln": 376, "discount": [376, 408, 724, 754, 1038, 1041], "sixth": 376, "press": [376, 408, 413, 418, 419, 443, 589, 609, 610, 613, 618, 621, 642, 835, 839, 981, 984, 986, 990], "household": 376, "statlib": 376, "dcc": 376, "ltorgo": 376, "cal_hous": 376, "1990": 376, "censu": 376, "bureau": 376, "resid": 376, "vacat": 376, "pace": 376, "kellei": [376, 1033, 1034], "ronald": [376, 992, 1034, 1044], "barri": [376, 1039], "autoregress": 376, "hyperspher": [377, 1008], "interleav": [377, 521], "simplif": [377, 380, 386, 1031, 1037], "realiti": 377, "make_sparse_uncorrel": 377, "make_friedman1": [377, 415, 538, 542, 592, 593, 631], "make_friedman2": [377, 610, 612, 613, 614, 615, 616, 620, 623, 624], "reciproc": [377, 988], "make_friedman3": 377, "7826": 378, "4194": 378, "9490": 378, "9565": 378, "fisher": [378, 415, 503, 635, 1008], "michael": [378, 406, 408, 449, 627, 636, 690, 795, 978, 984, 1013, 1024, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1045, 1046], "marshal": 378, "arc": [378, 415], "1988": 378, "sir": 378, "referenc": [378, 381, 383, 389, 395, 892, 893, 991, 1038, 1044], "duda": [378, 982], "hart": [378, 982, 1039], "taxonom": 378, "annual": [378, 408, 724, 754, 897, 988, 1001], "eugen": [378, 1032, 1037], "1936": 378, "john": [378, 416, 535, 707, 733, 767, 875, 902, 903, 905, 906, 978, 984, 988, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1044, 1046, 1047], "wilei": [378, 978], "1950": [378, 988], "1973": [378, 406], "scene": [378, 991, 993, 1044], "q327": 378, "d83": 378, "son": [378, 978], "isbn": [378, 408, 984], "22361": 378, "218": [378, 470, 714, 784], "dasarathi": 378, "1980": 378, "nose": [378, 1034, 1038], "pami": [378, 408, 723], "gate": [378, 1044], "1972": 378, "433": 378, "mlc": 378, "cheeseman": 378, "autoclass": 378, "conceptu": [378, 415, 986], "alpaydin": 378, "boun": 378, "nist": [378, 988], "bitmap": 378, "preprint": 378, "32x32": 378, "nonoverlap": 378, "4x4": [378, 413, 416], "garri": 378, "candela": 378, "dimmick": 378, "geist": 378, "grother": 378, "janet": 378, "handprint": 378, "nistir": 378, "5469": 378, "kaynak": 378, "msc": 378, "graduat": 378, "bogazici": 378, "cascad": 378, "kybernetika": 378, "ken": [378, 1024, 1033, 1040], "tang": [378, 1041, 1042, 1043], "ponnuthurai": 378, "suganthan": 378, "yao": [378, 1037, 1038, 1039, 1040, 1047, 1048], "kai": [378, 562, 994, 1038], "dimensionalityreduct": 378, "nanyang": 378, "technolog": 378, "claudio": [378, 1045, 1046], "gentil": [378, 1043], "linnerud": [378, 504], "men": 378, "club": 378, "waist": 378, "puls": 378, "chin": [378, 1035], "situp": 378, "tenenhau": 378, "pratiqu": 378, "alcalin": 378, "magnesium": 378, "phenol": 378, "nonflavanoid": 378, "proanthocyanin": 378, "od280": 378, "od315": 378, "class_2": [378, 509], "162": 378, "278": [378, 840, 841], "1680": 378, "746": 378, "chemic": 378, "grown": [378, 415, 552, 553, 554, 555, 556, 557, 563, 564, 908, 909, 910, 911, 1004], "itali": 378, "cultiv": 378, "thirteen": 378, "constitu": 378, "forina": 378, "parvu": 378, "pharmaceut": 378, "food": 378, "brigata": 378, "salerno": 378, "16147": 378, "genoa": 378, "lichman": 378, "irvin": 378, "aeberhard": 378, "cooman": 378, "vel": 378, "rep": 378, "dept": 378, "cook": [378, 1031, 1037], "north": [378, 408], "queensland": 378, "submit": [378, 379, 380, 383, 384, 385, 386, 389, 395, 396], "technometr": [378, 410, 468, 473, 994], "rda": 378, "1nn": 378, "THE": 378, "OF": 378, "chemometr": 378, "272": [379, 398, 400, 401], "wheel": [379, 381, 385, 398, 1041, 1043, 1045], "quickest": 379, "registri": [379, 398, 1008], "uninstal": 379, "git": [379, 383, 385, 387, 389, 1012, 1027, 1031, 1047], "fork": [379, 381, 385, 389, 393], "miniforge3": [379, 389], "miniforg": [379, 389, 398], "env": [379, 389, 398], "newli": [379, 394, 415, 462, 995, 1037, 1038, 1046], "virtualenv": [379, 381, 398], "python3": [379, 398], "venv": [379, 398], "pep517": [379, 381], "dev0": [379, 385, 1012, 1027], "pyx": [379, 381, 382, 387, 389], "pxd": [379, 381], "sklearn_fail_no_openmp": 379, "checkout": [379, 381, 385, 389], "cumbersom": 379, "reinstal": [379, 398], "setuptool": 379, "unix": [379, 416], "makefil": 379, "studio": [379, 1013], "vs_buildtool": 379, "desktop": 379, "screenshot": 379, "secondli": [379, 393, 408, 415, 656, 984, 1024], "architectur": [379, 383, 389, 393, 398, 402, 467, 898, 992, 1006, 1013, 1031, 1048], "cmd": 379, "powershel": 379, "struct": [379, 395, 1034], "calcsiz": 379, "distutils_use_sdk": 379, "x86": 379, "buildtool": 379, "vc": 379, "vcvarsal": 379, "bat": 379, "x64": 379, "clang": [379, 382], "confusingli": 379, "usr": 379, "gcc": [379, 382, 387, 393], "libomp": [379, 1043], "silicon": 379, "m1": [379, 404], "januari": [379, 381, 1031, 1032, 1041, 1043, 1046], "arm64": [379, 384], "llvm": 379, "toolchain": 379, "xcode": 379, "conflict": [379, 381, 385, 389, 398, 1038, 1039], "condarc": 379, "channel_prior": 379, "echo": [379, 385], "cxx": 379, "cflag": 379, "cxxflag": 379, "ldflag": 379, "subfold": [379, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 502, 1044], "fopenmp": [379, 382], "export": [379, 382, 383, 398, 402, 912, 913, 1004, 1008, 1012, 1040], "cppflag": 379, "xpreprocessor": 379, "wl": 379, "rpath": 379, "lomp": 379, "sudo": [379, 398], "apt": [379, 389, 398], "pip3": [379, 398], "pythonx": 379, "site": [379, 381, 384, 389, 398, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 1013, 1039], "precompil": 379, "arm": [379, 381, 389, 977], "cython3": 379, "cento": 379, "yum": 379, "devel": 379, "gnu": 379, "port": [379, 398, 1041], "pkg": 379, "build_ext": [379, 387], "build_clib": 379, "linker": [379, 382], "sysconfig": 379, "counterpart": [379, 977, 985, 1003, 1019], "get_config_var": 379, "sklearn_build_parallel": 379, "tracker": [380, 384, 389, 393, 396, 398, 402, 1006, 1009], "prioriti": [380, 631, 828, 829, 1009, 1034], "guidelin": [380, 384, 386, 387, 389, 407, 408, 415], "reformul": 380, "xyz": 380, "someestim": 380, "relabel": [380, 815, 816, 897], "stall": [380, 384], "sprint": [380, 381, 1006, 1031], "unfinish": [380, 381], "supersed": [380, 1036], "overflow": [380, 389, 393, 1034, 1038, 1039, 1040, 1041, 1042, 1044], "submitt": 380, "strive": [380, 396, 1013], "expertis": [380, 381, 393], "unclear": [380, 381, 500], "pleasant": [380, 1013], "chime": 380, "permiss": [380, 385, 396, 398, 1013, 1046], "matthew": [380, 386, 535, 741, 1031, 1034, 1038, 1040, 1044, 1045], "rocklin": [380, 386], "acknowledg": [380, 608], "struggl": [380, 396, 408], "everyon": [381, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "underrepres": 381, "merit": [381, 385, 396], "teach": 381, "priceless": 381, "abid": 381, "codeofconduct": 381, "hesit": 381, "typo": [381, 396, 399, 1031], "send": [381, 408, 420, 532], "valuabl": [381, 978, 1013], "burden": [381, 872, 1009], "slep": [381, 395, 1006], "templat": [381, 385, 386, 395, 396, 556, 557, 562, 563, 564, 565, 1008], "ecosystem": [381, 978, 1007, 1013], "numpydoc": [381, 395, 398, 401], "compli": [381, 395, 931, 1009], "fulfil": [381, 408, 415, 797, 800, 801, 811, 860, 864, 984], "anyon": [381, 396, 1013], "gist": [381, 389, 1012], "repo": [381, 385, 1009], "feasibl": [381, 869, 870, 880], "traceback": [381, 386, 389, 393, 467, 1012], "doubt": [381, 382, 385, 984, 994, 1008], "companion": [381, 998], "transcript": 381, "inclus": [381, 383, 389, 449, 455, 752, 784, 988, 989, 1031, 1045], "yourlogin": 381, "ruff": [381, 398, 401], "mypi": [381, 385, 398, 401, 1042], "synchron": [381, 416], "my_featur": 381, "commit": [381, 385, 389, 1012, 1031, 1032, 1033, 1034], "modified_fil": 381, "committ": [381, 1031], "modif": [381, 411, 415, 416, 445, 1001], "approv": [381, 396, 415], "mrg": [381, 389], "incomplet": [381, 398, 404, 408, 704, 793, 978, 985, 1024, 1035, 1037], "wip": [381, 389, 398], "matur": [381, 1008, 1009], "broad": [381, 395, 1008], "collabor": 381, "_logist": 381, "doctest": [381, 395, 1016, 1031], "test_logist": [381, 389], "rst": [381, 385, 389, 1024, 1031, 1036], "test_common": [381, 389], "caught": [381, 389, 402], "submodul": [381, 385, 387, 407, 980, 986, 1031], "intricaci": 381, "narr": [381, 395, 657, 900, 905, 1031, 1032], "unittest": 381, "tests_for_packag": 381, "static": [381, 383, 387, 389, 645, 646, 651, 652, 659, 660, 661, 662], "astropi": 381, "linux": [381, 383, 384, 389, 1008, 1031], "gh": 381, "lint": [381, 389], "nogil": [381, 382], "cpython": [381, 382, 387, 1046], "pyodid": [381, 956], "sklearn_run_float32_test": 381, "lengthi": [381, 393], "etiquett": 381, "she": [381, 890, 891, 1041], "he": [381, 724, 754, 857, 858, 890, 891, 988, 1024, 1038, 1045, 1046], "shorten": [381, 1003, 1044], "leader": [381, 1013], "grab": 381, "familiar": [381, 414, 1039], "acquaint": 381, "experienc": 381, "abandon": 381, "someon": [381, 385, 395, 1031], "glad": 381, "restructuredtext": 381, "some_param": 381, "hello": [381, 389, 949], "goodby": 381, "liter": [381, 385, 1013], "array_paramet": 381, "list_param": 381, "typed_ndarrai": 381, "multioutput_arrai": 381, "bracket": [381, 984], "delimit": [381, 994, 1046], "colon": 381, "selectfpr": [381, 417, 591, 594, 597, 598, 599, 605, 1047], "defer": 381, "backtick": [381, 386], "nowadai": 381, "dropdown": 381, "syntax": [381, 386, 389, 409, 467, 859, 860, 898, 977, 1015, 1042, 1044], "pragmat": 381, "bibliograph": 381, "arxiv": [381, 461], "_my": 381, "ref": [381, 389, 978, 1037], "currentmodul": 381, "succeed": 381, "editor": [381, 389, 393], "_build": 381, "viewabl": 381, "pillow": [381, 398, 401], "sphinxext": [381, 398, 401], "opengraph": [381, 398, 401], "copybutton": [381, 398, 401], "vast": 381, "examples_pattern": 381, "your_regex_goes_her": 381, "no_mathjax": 381, "latexpdf": 381, "stone": [381, 908, 909, 1004], "subdirectori": 381, "subpackag": [381, 385, 1006, 1035, 1040], "cleanup": [381, 1031], "charg": 381, "test_requiring_mpl_fixtur": 381, "hang": [381, 1012, 1041, 1042], "fruit": [381, 989], "asv": 381, "asv_benchmark": 381, "airspe": 381, "veloc": 381, "publicli": [381, 1041], "zero_on": [381, 1032], "zero_one_loss": [381, 404, 702, 732, 988, 1032, 1033, 1034, 1048], "futurewarn": [381, 389, 1038, 1039, 1040, 1042, 1044, 1047], "example_funct": 381, "exampleestim": 381, "_n_cluster": 381, "versionchang": 381, "meet": [381, 393, 396, 417, 571, 602, 857, 858, 897, 988, 1001, 1013, 1039, 1040, 1041], "nit": 381, "retract": 381, "grammar": 381, "disambigu": [381, 828, 897, 1001, 1046], "Will": [381, 496, 533, 626, 643, 644, 645, 651, 655, 656, 659, 660, 661, 662, 663, 664, 672, 674, 706, 713, 786, 865, 869, 873, 879, 880, 1034, 1035, 1037, 1039], "clariti": [381, 389], "unhelp": 381, "extran": 381, "rewritten": [381, 648, 1033, 1035], "generos": 381, "reward": 381, "heard": 381, "enemi": 381, "courtesi": 381, "justifi": [381, 387, 406, 564], "occas": 381, "deserv": [381, 387], "digest": [381, 1046], "overwhelm": 381, "sheer": [381, 1013], "myself": 381, "trickiest": 381, "buri": 381, "mixin": [381, 395, 423, 424, 425, 426, 427, 429, 430, 431, 432, 600, 931, 1033, 1042, 1046], "grep": 381, "delai": [381, 495, 797, 811, 821, 822, 956, 1045, 1046], "some_funct": [381, 927], "some_iter": 381, "flavor": [381, 991], "pointer": [381, 389, 441, 1040], "mandatori": [381, 416, 630], "favorit": [381, 393, 1013], "Being": [381, 395, 396, 402, 984, 991], "killer": [381, 1013], "blame": 381, "migrat": [381, 1031], "ignorerevsfil": 381, "rev": [381, 606, 607], "ruin": 381, "maco": [382, 384, 398, 404, 1039, 1043, 1045], "sklearn_enable_debug_cython_direct": 382, "scratch": [382, 441, 988, 1033], "gdb": [382, 384, 1012], "entrypoint_to_bug_reproduc": 382, "cdef": 382, "state_to_print": 382, "test_val": 382, "fuse": [382, 1037, 1047], "shell": [382, 389, 393, 1015, 1024], "cythonx": 382, "language_level": 382, "wraparound": 382, "initializedcheck": 382, "nonecheck": 382, "cdivis": 382, "recompil": [382, 387, 398], "pep073": 382, "pathwai": 382, "memoryview": 382, "cnp": 382, "lightweight": [382, 797, 811, 821, 822, 1008], "virtual": [382, 398, 412, 1013], "enter": [382, 385, 408, 441, 995], "prang": 382, "void": 382, "my_func": [382, 387], "st\u00e9fan": 382, "benhel": 382, "_cython_bla": 382, "protect": [382, 385, 954], "_openmp_help": 382, "cimport": [382, 390, 1039], "omp_get_max_thread": 382, "prolifer": 383, "adopt": [383, 395, 896, 988, 1002, 1039, 1046, 1048], "predomin": [383, 1032], "overrid": [383, 416, 445, 449, 456, 541, 547, 587, 588, 590, 592, 593, 596, 655, 663, 684, 685, 803, 819, 842, 843, 844, 846, 848, 850, 851, 852, 1031, 1039, 1041, 1045, 1047], "creation": [383, 510, 511, 512, 514, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 655, 840, 841, 1013, 1038, 1039, 1040, 1044], "optimis": [383, 408, 991, 1034, 1044, 1046], "param1": [383, 1021], "param2": [383, 1021], "param3": 383, "postpon": [383, 385], "requisit": 383, "liner": [383, 826], "ipython": [383, 386, 387, 389, 1016, 1024], "session": [383, 387, 393, 398, 1007, 1013, 1024], "trainabl": 383, "trail": [383, 972], "overridden": [383, 395, 418, 541, 547, 615, 620, 623, 693, 1039, 1040, 1047], "n_features_in_": [383, 395, 429, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 626, 627, 628, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 795, 796, 797, 800, 801, 811, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 1042, 1044, 1046], "slep010": [383, 1042], "duck": [383, 395, 1041], "check_x_i": [383, 390, 1035, 1039, 1040, 1045], "check_arrai": [383, 390, 467, 533, 898, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "templateclassifi": 383, "demo_param": 383, "myestim": 383, "subestim": 383, "my_extra_param": 383, "my_estim": [383, 409], "subestimator__c": 383, "subestimator__class_weight": 383, "subestimator__du": 383, "subestimator__fit_intercept": 383, "subestimator__intercept_sc": 383, "subestimator__l1_ratio": 383, "subestimator__max_it": 383, "subestimator__multi_class": 383, "subestimator__n_job": 383, "subestimator__penalti": 383, "subestimator__random_st": 383, "subestimator__solv": 383, "subestimator__tol": 383, "subestimator__verbos": 383, "subestimator__warm_start": 383, "__c": 383, "__class_weight": 383, "unpack": 383, "easiest": [383, 389, 409, 985], "__repr__": [383, 1009, 1040], "setattr": 383, "deepcopi": 383, "__sklearn_clone__": [383, 433, 1047], "frozen": 383, "frozentransform": 383, "fitted_transform": [383, 463], "__getattr__": 383, "_estimator_typ": [383, 395, 1036], "clustermixin": [383, 1048], "is_classifi": [383, 395], "programmat": [383, 498, 1040], "_get_tag": [383, 1042], "allow_nan": [383, 919, 921, 1047], "array_api_support": [383, 404], "binary_onli": [383, 1041, 1042], "multioutput_onli": 383, "no_valid": 383, "non_determinist": [383, 1045], "primari": [383, 395, 413, 514, 995, 1013], "_safe_split": 383, "preserves_dtyp": 383, "poor_scor": 383, "requires_fit": 383, "requires_positive_x": [383, 1041, 1046], "requires_i": [383, 1042], "requires_positive_i": 383, "_skip_test": 383, "_xfail_check": 383, "check_nam": 383, "xfail": [383, 389], "skiptestwarn": 383, "x_type": 383, "2darrai": 383, "signifi": [383, 408, 580, 808, 993], "1dlabel": 383, "2dlabel": 383, "_more_tag": 383, "mymultioutputestim": 383, "ridgeregress": 383, "idiosyncrat": 383, "onetoonefeaturemixin": [383, 432], "classnameprefixfeaturesoutmixin": [383, 432, 1046], "auto_wrap_output_kei": 383, "mytransform": 383, "__init_subclass__": 383, "invok": [383, 530, 536, 538, 544, 545, 566, 568, 569, 821, 897, 1043, 1048], "estimator_html_repr": [383, 409, 1042, 1043, 1044, 1045, 1048], "icon": 383, "_doc_link_modul": 383, "_doc_link_templ": 383, "_doc_link_url_param_gener": 383, "estimator_modul": 383, "ownership": 383, "pep8": [383, 385, 389], "indent": [383, 954], "nsampl": [383, 795, 796], "statement": [383, 386, 389, 393, 395, 413, 1006, 1024], "flow": 383, "client": [383, 956], "corollari": 383, "foo": [383, 580, 992], "baz": [383, 580], "pyflak": 383, "asanyarrai": 383, "hadamard": 383, "choose_random_sampl": 383, "freestand": 383, "unmodifi": [383, 395], "random_state_": [383, 535, 626, 849, 1045], "gaussiannois": 383, "quasi": [383, 857, 858, 984], "assert_allclos": 383, "rtol": [383, 840, 841, 845], "atol": [383, 671, 673, 840, 841, 845], "checklist": 384, "unclaim": 384, "workflow": [384, 385, 394, 412], "markdown": 384, "saniti": [384, 864, 988, 1031, 1032], "outdat": 384, "diff": [384, 988], "valgrind": 384, "platform": [384, 393, 395, 396, 402, 1008, 1013, 1036, 1039, 1040, 1042, 1044, 1045], "x86_64": [384, 398], "yep": 384, "gperftool": 384, "debugg": [384, 389], "gprof": 384, "callgrind": 384, "kcachegrind": 384, "warm": [384, 395, 530, 536, 542, 544, 545, 609, 652, 658, 665, 666, 667, 675, 676, 677, 984, 1009, 1041, 1043, 1045], "homebrew": [384, 398], "freebsd": 384, "rrrcn": 385, "pep101": 385, "build_tool": 385, "blocker": 385, "mileston": 385, "maint_tool": 385, "sort_whats_new": 385, "whats_miss": 385, "fixm": [385, 395], "feedstock": 385, "recip": [385, 985, 1013], "yaml": 385, "whats_new": [385, 389], "v0": [385, 470, 471, 477, 511, 587, 588, 590, 797, 811, 859, 862, 1032, 1039, 1040, 1041], "freez": [385, 398, 402, 1009, 1013, 1039], "0rc1": 385, "__version__": 385, "draft": [385, 396], "rebas": 385, "bugfix": [385, 1031, 1045], "backport": [385, 390, 1038], "maint": 385, "enh": 385, "blindli": 385, "invit": 385, "cherri": 385, "shortlog": 385, "f2": [385, 989], "sed": [385, 1031], "front": [385, 1038], "rc1": 385, "suffix": [385, 398, 823, 988, 1041], "brows": 385, "3a": 385, "22wheel": 385, "pyproject": 385, "toml": 385, "oldest": [385, 495], "abi": 385, "acronym": 385, "deliveri": 385, "whl": 385, "22publish": 385, "went": [385, 988], "bot": [385, 993, 1045], "sync": 385, "testpypi": 385, "tarbal": [385, 1046], "wheelhouse_upload": 385, "twine": 385, "rrr": 385, "symlink": 385, "latestst": 385, "tmp": 385, "ln": [385, 984, 992, 998], "versionwarn": 385, "secur": [385, 395, 1008, 1009, 1013, 1026], "twitter": 385, "linkedin": 385, "authorship": 385, "permalink": 385, "_hist_gradient_boost": 385, "_iter": 385, "pickl": [385, 395, 402, 416, 587, 588, 590, 840, 841, 1008, 1009, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1047], "checker": [385, 820], "type_check": 385, "test_enable_hist_gradient_boost": 385, "enable_hist_gradient_boost": [385, 1040], "enable_my_experimental_featur": 385, "indefinit": 385, "incentiv": 385, "workabl": 386, "stackoverflow": [386, 389, 393, 1012], "blogpost": 386, "mcve": [386, 393], "my_data": 386, "with_mean": [386, 880, 891, 998, 1039, 1044], "default_scor": 386, "other_scor": 386, "scrollbar": 386, "tripl": 386, "fenc": 386, "qualifi": 386, "a674e682c281": 386, "lda_featur": 386, "lda_model": 386, "n_topic": [386, 535, 1038], "minimalist": [386, 416, 1012], "continuous_featur": 386, "positive_featur": 386, "invest": [387, 1013], "idiom": 387, "crunch": 387, "performancetip": 387, "reimplement": [387, 395, 1037, 1041], "spottabl": 387, "amen": [387, 418, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 977], "cpp": 387, "engag": [387, 396], "tent": 387, "somewher": [387, 988, 1024], "prun": 387, "14496": [387, 1040], "682": 387, "ncall": 387, "tottim": 387, "percal": 387, "cumtim": 387, "lineno": 387, "017": [387, 470, 471], "_nls_subproblem": 387, "1263": 387, "_po": 387, "057": 387, "_initialize_nmf": 387, "_spars": 387, "_neg": 387, "337": 387, "hotspot": 387, "16159": [387, 1042], "2833": 387, "653": [387, 610, 613, 624], "_dotbla": 387, "651": 387, "2780": 387, "1542": 387, "2734": 387, "fromnumer": 387, "1185": 387, "lapack_lit": 387, "dgesdd": 387, "rewrit": [387, 1004, 1023, 1031], "shallow": [387, 415, 560, 561, 915], "4x": [387, 1046], "line_profil": 387, "wire": [387, 533, 540], "profile_default": 387, "ipython_config": 387, "terminalipythonapp": 387, "interactiveshellapp": 387, "lprun": 387, "qtconsol": 387, "_nmf": 387, "73153": 387, "h_init": 387, "5863": 387, "172": [387, 492, 493, 648, 984], "nl": 387, "173": [387, 583], "175": [387, 998], "112141": 387, "2336": 387, "wtv": 387, "176": [387, 833, 989, 996], "16144": 387, "336": [387, 998], "wtw": 387, "177": 387, "1880": 387, "195133": 387, "305": 387, "grad": [387, 1013], "495761": 387, "777": 387, "proj_gradi": 387, "2449": 387, "1474": 387, "4474": 387, "inner_it": 387, "83833": 387, "hn": 387, "194239": 387, "48858": 387, "150407": 387, "gradd": 387, "515390": 387, "dqd": 387, "pin": 387, "memory_profil": [387, 398, 401], "memit": 387, "mprun": 387, "1e7": 387, "402344": 387, "standalon": [387, 657, 900, 1012], "bianp": 387, "reactiv": 387, "conda_prefix": 387, "pydebug": 387, "extra_cflag": 387, "dpy_debug": 387, "num_cor": 387, "dbg": 387, "fortun": [387, 415, 1024, 1044, 1045], "my_fil": 387, "callgrin": 387, "prof": 387, "encapsul": [388, 409, 422, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 468, 469, 470, 472, 473, 474, 475, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 580, 581, 582, 587, 588, 589, 590, 591, 594, 595, 596, 597, 598, 599, 602, 609, 610, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911], "artist": [388, 437, 631, 697, 699, 700, 701, 803, 819, 914], "classmethod": [388, 437, 630, 631, 696, 697, 698, 699, 700, 701, 803, 819, 946], "line_": [388, 437, 697, 699, 700, 701, 803, 819], "gridspecfromsubplotspec": 388, "subplot_spec": 388, "get_subplotspec": 388, "ax_top_left": 388, "ax_top_right": 388, "ax_bottom": 388, "bounding_ax_": [388, 631], "lines_": [388, 631, 803, 819], "contours_": [388, 631], "advic": [389, 418, 621, 622], "forth": 389, "userscript": 389, "tampermonkei": 389, "greasemonkei": 389, "shortcut": [389, 418], "pr_number": 389, "navig": [389, 1033], "overlai": [389, 631], "codecov": 389, "test_sparsifi": 389, "pdb": 389, "ipdb": [389, 1024], "pdbcl": 389, "terminalpdb": 389, "lf": 389, "ff": 389, "tb": [389, 570, 571, 572, 573, 574, 575, 576, 577], "runxfail": 389, "werror": 389, "mailman": 389, "listinfo": 389, "crowd": [389, 396, 985, 1009, 1012], "imped": 389, "attent": [389, 606, 607, 1002], "minimal_reproduc": 389, "pytb": 389, "stdin": [389, 1024], "perman": 389, "25163598": 389, "issuenumb": 389, "1506": 389, "volunt": 389, "establish": [389, 393, 396, 978], "clarifi": [389, 396, 791], "regression_test": 389, "0008": 389, "patienc": [389, 395], "crop": [389, 1046], "manifest": [389, 985, 991], "fault": [389, 1039, 1041, 1043], "glibc": 389, "uniniti": 389, "trace": [389, 408, 421, 472, 474, 475, 478, 479, 480, 688, 692, 985, 1042], "supp": 389, "readm": [389, 416, 492], "my_test_script": 389, "mobil": 389, "deploy": [389, 1008, 1009, 1013], "scalewai": 389, "aw": 389, "graviton": 389, "workstat": 389, "qemu": 389, "docker": [389, 402, 1044, 1045], "multiarch": 389, "ppc64le": 389, "filesystem": [389, 398, 1044], "pushd": 389, "wget": 389, "aarch64": 389, "arm64v8": 389, "mount": 389, "pwd": 389, "reinit": 389, "bashrc": 389, "ephemer": 389, "evolv": [390, 1046, 1048], "as_float_arrai": 390, "column_or_1d": [390, 1042, 1046], "multitarget": 390, "multi_output": [390, 920], "safe_index": [390, 1041], "check_memori": [390, 395, 1038], "5488135": 390, "71518937": 390, "60276338": 390, "54488318": 390, "has_fit_paramet": 390, "randomized_range_find": [390, 1032, 1037], "arrayfunc": [390, 407], "cholesky_delet": 390, "min_po": 390, "least_angl": 390, "fast_logdet": 390, "safe_sparse_dot": [390, 1041], "weighted_mod": 390, "sample_without_replac": [390, 1037], "n_popul": [390, 957], "sparsefunc": [390, 407, 1044], "mean_variance_axi": [390, 1037, 1044], "sparsefuncs_fast": [390, 407], "inplace_csr_row_normalize_l1": 390, "inplace_csr_row_normalize_l2": 390, "inplace_csr_column_scal": 390, "sort_graph_by_row_valu": [390, 1046], "single_source_shortest_path_length": 390, "dijkstra": [390, 687, 985], "graph_shortest_path": [390, 1044], "all_estim": [390, 1041, 1042, 1046], "all_displai": [390, 1046], "all_funct": [390, 1046], "is_multilabel": [390, 1048], "dict_learn": [390, 530, 536, 545, 1032, 1039, 1041, 1044, 1045, 1047], "gen_batch": [390, 941], "safe_mask": 390, "safe_sqr": 390, "murmurhash3_32": 390, "murmurhash3_x86_32": [390, 953], "cryptograph": 390, "lookup": [390, 953, 1040], "bloom": [390, 953], "384616559": 390, "3910350737": 390, "murmurhash": 390, "graphical_lasso": [390, 470, 471, 1039, 1047], "kit": 393, "toolbox": [393, 1008, 1013], "multilay": [393, 986], "kera": [393, 1008], "forese": 393, "redesign": [393, 1031], "pystruct": [393, 1008], "ssvm": 393, "seqlearn": 393, "4143": 393, "meanwhil": [393, 1003], "pipegraph": 393, "squared_loss": [393, 1044], "undertak": 393, "slowli": [393, 395, 543, 937], "ordinarili": [393, 395], "corrobor": 393, "proof": [393, 415, 894, 1000], "road": 393, "bridg": [393, 985, 1008], "reproduct": [393, 984, 1012], "guidanc": [393, 418], "gitter": [393, 1006, 1038, 1039], "value_kei": [393, 915], "levenshtein": 393, "dna": [393, 627, 978], "rna": 393, "pain": 393, "suppli": [393, 408, 645, 920, 921, 991, 1013, 1035, 1037, 1039, 1044], "leven": 393, "acctcctagaag": 393, "acctactagaagtt": 393, "gaatattaggccga": 393, "lev_metr": 393, "multiprocess": [393, 395, 954, 956, 991, 1031, 1039, 1045], "exec": 393, "cuda": [393, 404], "reiniti": 393, "culprit": 393, "refus": [393, 890, 891], "forkserv": 393, "joblib_start_method": 393, "set_start_method": 393, "dozen": [394, 418], "leakag": [394, 395, 409, 1026], "disclos": 394, "entail": [394, 878, 880, 1002], "r_squar": 394, "searchcv": [394, 1046], "tacit": 395, "inconsist": [395, 402, 416, 507, 508, 575, 902, 905, 924, 994, 1003, 1026, 1031, 1036, 1037, 1038, 1039, 1041, 1044, 1046, 1047], "elsewher": [395, 461, 462, 470, 471, 477], "formal": [395, 396, 408, 415, 840, 841, 985, 988, 989, 992], "thereof": 395, "transduct": [395, 408, 895, 896, 1009], "position": 395, "serial": [395, 944, 1008, 1009, 1026, 1031, 1039, 1043, 1048], "unpickl": [395, 402, 575, 840, 841, 1037, 1043, 1047], "pep257": 395, "nuanc": 395, "flaw": [395, 415], "terminologi": [395, 1039], "est1": [395, 631], "est2": [395, 631], "exemplifi": 395, "_score": [395, 797, 811, 823, 988, 1031, 1044], "_loss": [395, 988], "divers": [395, 415], "abstract": [395, 413, 418, 617, 767, 1008, 1031], "descriptor": [395, 507, 508], "hoc": 395, "spectral_embed": [395, 985, 1032, 1035, 1037, 1039, 1041, 1044, 1045, 1046, 1048], "maxabs_scal": [395, 869, 1039], "astrai": 395, "readthedoc": 395, "entireti": 395, "shield": 395, "n_target": [395, 411, 481, 482, 483, 484, 523, 555, 610, 642, 645, 646, 649, 650, 651, 652, 653, 655, 656, 659, 660, 661, 662, 663, 664, 670, 671, 672, 673, 674, 680, 681, 682, 683, 684, 685, 686, 989, 1043, 1045, 1047], "synonym": [395, 842, 843, 844, 850, 851, 852], "themat": 395, "alphanumer": [395, 587, 588, 590], "statistician": [395, 880], "prescrib": 395, "baggingclassifi": [395, 399, 415, 555, 910, 978, 1034, 1037, 1038, 1039, 1042, 1046, 1047], "estimator__max_depth": [395, 977], "improp": [395, 1038], "pairwise_kernel": [395, 418, 451, 642, 763, 866, 986, 1031, 1038, 1048], "redundantli": 395, "distancemetr": [395, 414, 843, 991, 1039, 1043, 1044, 1045, 1048], "di": [395, 408, 413, 530, 536, 663, 684, 685, 893, 1035, 1044], "vectori": [395, 1041], "noun": 395, "venu": [395, 1012], "broadli": [395, 408], "consolid": [395, 396, 1031], "coo": [395, 552, 553, 691, 867, 916, 920, 921, 991, 1032, 1048], "lil": [395, 552, 553, 867, 916, 942, 991], "csgraph": [395, 1044], "absent": [395, 416, 752, 821], "densifi": [395, 657, 658, 665, 666, 667, 675, 676, 677, 900, 978, 1033], "lossili": 395, "unnorm": [395, 535, 985, 1037, 1038], "encompass": [395, 449, 455, 554, 555, 985], "is_regressor": 395, "get_n_split": [395, 798, 799, 802, 804, 805, 806, 807, 810, 812, 813, 814, 815, 816, 817, 818], "estimatorcv": [395, 1009], "loo": [395, 805, 1042], "router": [395, 399, 945, 946, 947, 948], "lexicograph": [395, 566, 786, 792, 842, 850], "type_of_target": [395, 867, 881, 989, 1045, 1046, 1048], "hashabl": [395, 868, 871, 999], "labelencod": [395, 568, 874, 999, 1031, 1039, 1046, 1047], "canonic": 395, "xxx": 395, "everywher": 395, "multilabelbinar": [395, 829, 864, 873, 989, 1015, 1034, 1036, 1037, 1039, 1040], "nonetheless": [395, 988], "wherein": 395, "amber": 395, "return_cov": [395, 566, 567, 610, 860], "_idx": 395, "label1": 395, "label2": 395, "class_label": [395, 556, 560, 563, 657, 658, 665, 667, 673, 674, 675, 908, 910, 926, 1003], "bincount": [395, 412, 556, 560, 563, 657, 658, 665, 667, 673, 674, 675, 900, 902, 905, 908, 910, 925, 926, 1038], "rebalanc": 395, "compute_class_weight": [395, 1034, 1045], "check_cv": [395, 1036], "obei": [395, 986], "triangl": [395, 413, 442, 446, 458, 698, 986, 991], "concurr": [395, 416, 954, 1043, 1045], "unset": [395, 1039], "get_scor": [395, 731, 1038, 1047], "check_scor": 395, "uppercas": [395, 1044], "unavail": [395, 657, 658, 949, 1038, 1044], "deadlock": 396, "meritocrat": 396, "somebodi": 396, "unanim": 396, "emeritu": [396, 1006], "recant": 396, "outreach": 396, "brand": [396, 398], "social": [396, 408, 1013], "authorit": 396, "strateg": 396, "entiti": [396, 724, 754], "duti": 396, "resign": 396, "occasion": [396, 725, 1040], "escal": 396, "fallback": [396, 398, 828, 829, 988], "hereaft": 396, "lazi": [396, 416, 1002, 1035], "opinion": 396, "slep020": 396, "veto": 396, "appeal": 396, "revis": [396, 669], "slep000": 396, "insuffici": [397, 987, 1023], "afraid": 398, "64bit": [398, 1031], "miniconda": 398, "administr": 398, "dnf": 398, "pacman": 398, "raspberri": 398, "polar": [398, 401, 432, 441, 442, 444, 446, 448, 463, 467, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 565, 566, 567, 568, 569, 580, 581, 582, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 687, 688, 691, 844, 849, 852, 856, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 898, 1024, 1048], "pyarrow": [398, 401], "lock": [398, 401, 954, 956], "py3": 398, "apk": 398, "bind": [398, 1008, 1031, 1038, 1039], "pkgsrc": 398, "py39": 398, "intelex": [398, 1008], "oned": 398, "sklearnex": 398, "plugin": 398, "appdata": 398, "usernam": 398, "windowsapp": 398, "oserror": [398, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497], "errno": 398, "pythonsoftwarefound": 398, "7_qbz5n2kfra8p0": 398, "localcach": 398, "python37": 398, "data_nam": 398, "australian": 398, "data_vers": 398, "lift": 398, "regedit": 398, "menu": 398, "hkey_local_machin": 398, "currentcontrolset": 398, "longpathsen": 398, "broken": [398, 412, 598, 599, 634, 719, 916, 988, 1004, 1034, 1038, 1039, 1040, 1042, 1045], "unsupport": [399, 402, 492, 1039, 1044], "set_": 399, "_request": 399, "weighted_acc": 399, "sample_weigh": 399, "sel": [399, 417], "scoring_weight": 399, "fitting_weight": 399, "hasn": 399, "larscv": [399, 649, 664, 681, 682, 1038, 1044, 1048], "multitaskelasticnetcv": [399, 645, 646, 651, 659, 661, 662, 680, 984, 1034, 1041, 1042, 1044, 1048], "multitasklassocv": [399, 660, 661, 1034, 1041, 1042, 1044, 1048], "multioutputclassifi": [399, 786, 829, 831, 833, 988, 1038, 1040, 1041, 1042, 1043, 1047], "regressorchain": [399, 831, 833, 1039, 1042, 1046], "ridgeclassifiercv": [399, 672, 673, 786, 988, 989, 1039, 1041, 1042, 1044, 1045], "retrain": [402, 1009, 1047], "inconsistentversionwarn": [402, 1047], "simplefilt": 402, "model_from_prevision_vers": 402, "original_sklearn_vers": [402, 575], "untrust": 402, "malici": 402, "inadvis": 402, "immut": 402, "snapshot": [402, 558, 559, 1009], "portabl": [402, 1008], "alex": [402, 416, 1003, 1031, 1034, 1039, 1041, 1042, 1043, 1045, 1046, 1047], "gaynor": 402, "sio": 402, "get_untrusted_typ": 402, "unknown_typ": 402, "exchang": [402, 1012], "markup": 402, "pmml": [402, 1008], "onnx": [402, 1008, 1009], "xml": 402, "sklearn2pmml": [402, 1008], "affero": 402, "gplv3": 402, "datastructur": [404, 1039, 1043], "namespac": 404, "array_api": 404, "x_np": 404, "y_np": 404, "x_cu": 404, "y_cu": 404, "array_api_dispatch": [404, 467, 898], "_estimator_with_converted_arrai": 404, "transfer": [404, 984, 1009], "_array_api": 404, "cupy_to_ndarrai": 404, "lda_np": 404, "torch": 404, "x_torch": 404, "y_torch": 404, "power_iteration_norm": [404, 540, 543, 936, 937, 1045], "kernelcenter": [404, 998, 1041, 1045, 1047, 1048], "array_api_compat": 404, "metal": 404, "shader": 404, "m2": 404, "chip": [404, 1013], "77764": 404, "pytorch_enable_mps_fallback": 404, "submatrix": [405, 423, 450, 452], "unusu": [405, 994, 998, 1039], "submatric": 405, "bipartit": [405, 452, 510, 993], "subgraph": 405, "a_n": 405, "lceil": [405, 994], "log_2": [405, 562, 994], "rceil": [405, 994], "bmatrix": [405, 980], "u_2": [405, 980], "u_": [405, 481, 482, 483], "n_column": [405, 450, 452], "inderjit": [405, 452], "spectralbiclust": [405, 452, 1033, 1037, 1038, 1042], "blockwis": [405, 984], "bistochast": [405, 450], "l_": [405, 610, 651, 739, 988], "k_": [405, 418, 615, 618, 620, 623, 772, 980, 998], "u_1": [405, 980], "v_1": 405, "v_2": 405, "v_": [405, 416], "kluger": [405, 450, 512], "yuval": [405, 450], "microarrai": [405, 450, 512, 627, 978], "cap": [405, 408, 753, 988, 1040], "hochreit": [405, 718], "hungarian": [405, 718], "bodenhof": [405, 718], "fabia": [405, 718], "acquisit": [405, 718], "murphi": [406, 642, 981], "discriminatori": 406, "wilk": 406, "tricki": [406, 985], "logit": [406, 418, 657, 658, 984], "f_i": 406, "train_set": 406, "test_set": 406, "disjoint": [406, 408, 409, 436, 703, 729, 753, 755, 985], "platt": [406, 436, 902, 903, 905, 906, 1003], "_i": [406, 415, 979, 984, 988, 992, 1003], "_j": [406, 979], "f_j": [406, 996], "meteorologi": 406, "climatologi": 406, "precipit": 406, "wea": 406, "640": [406, 489, 505, 506, 582, 583, 977], "1990a": 406, "menon": 406, "ak": [406, 1045, 1046], "jiang": [406, 1035, 1042], "xj": 406, "vembu": 406, "ohno": 406, "machado": [406, 721], "703": [406, 512], "710": 406, "kull": [406, 988], "silva": [406, 687, 985, 1042, 1044], "filho": 406, "flach": [406, 988], "mario": [406, 1035, 1037, 1045, 1046, 1047], "w\u00fcthrich": 406, "merz": 406, "actuari": 406, "refurbish": 407, "rough": [407, 994, 1017], "uniti": 407, "lipschitz": [407, 1000], "mod": 407, "usecas": 408, "mu_j": 408, "coher": 408, "elong": 408, "lloyd": [408, 442, 446, 448, 458, 1045, 1046], "distant": [408, 691, 708, 991], "sergei": [408, 1033, 1037, 1038, 1039, 1040, 1041], "vassilvitskii": [408, 446, 459], "eighteenth": 408, "siam": [408, 412, 451, 459, 461, 534, 540], "industri": [408, 1008], "predetermin": [408, 985], "scullei": 408, "19th": 408, "exemplar": [408, 439, 453, 1023], "sent": [408, 829], "leftarrow": [408, 992, 1002], "foral": [408, 418, 612], "neq": [408, 988, 990, 998], "notin": 408, "hill": [408, 447, 460, 1041], "climb": [408, 447, 460], "maxima": 408, "x_j": [408, 418, 613, 614, 618, 621, 622, 624, 979, 980, 984, 991, 1003, 1004], "dictat": 408, "solvabl": 408, "stella": [408, 451, 461], "jianbo": [408, 451, 461, 690], "shi": [408, 451, 461, 690], "anil": [408, 451, 461], "daml": [408, 451, 461], "victor": [408, 451, 461, 1038, 1041], "minden": [408, 451, 461], "lex": [408, 451, 461], "ying": [408, 451, 461, 1045], "adjac": [408, 413, 451, 461, 584, 585, 634, 690, 694, 942, 985, 991, 1023], "adjacency_matrix": 408, "ulrik": [408, 451, 461, 690], "von": [408, 451, 461, 690, 1008, 1038, 1039], "luxburg": [408, 451, 461, 690], "jitendra": [408, 451, 461, 690], "malik": [408, 451, 461, 690], "walk": [408, 414, 1034], "marina": 408, "meila": 408, "ng": [408, 413, 690, 846, 992, 994, 1042], "jordan": [408, 413, 690, 795, 1041, 1042, 1045, 1046], "yair": [408, 690], "precondit": [408, 451, 461, 694, 1004, 1047], "zhuzhunashvili": [408, 461], "forbid": [408, 415], "macroscop": 408, "occupi": [408, 988], "manhattan": [408, 440, 444, 449, 456, 698, 760, 769, 776, 777, 778, 847, 986, 991, 1035, 1040, 1047], "bisecting_strategi": [408, 442], "largest_clust": [408, 442], "biggest_inertia": [408, 442], "biggest": [408, 411, 413, 442], "steinbach": [408, 1046], "karypi": 408, "vipin": 408, "egin": 408, "minnesota": 408, "june": [408, 985, 1037, 1047], "weblog": 408, "abirami": 408, "mayilvahanan": 408, "emerg": [408, 1013], "ijet": 408, "jian": 408, "xinyu": 408, "gou": 408, "baod": 408, "hebei": 408, "knee": 408, "triangular": [408, 462, 610, 985], "whichev": [408, 415, 445, 543, 560, 561, 632, 649, 653, 655, 663, 681, 682, 696], "conjunct": [408, 593, 803, 819, 821, 822, 823, 824, 827, 955, 978, 984, 1046], "extract_dbscan": 408, "radius_neighbors_graph": [408, 419, 443, 842, 843, 844, 846, 848, 850, 851, 852, 853, 991, 1035, 1040, 1043], "ester": [408, 419, 443], "kriegel": [408, 419, 443, 449, 456, 846, 994], "sander": [408, 419, 443, 445, 449, 456, 846, 994, 1040, 1041], "xu": [408, 411, 419, 443, 1002, 1044, 1045, 1048], "portland": [408, 419, 443], "aaai": [408, 419, 443, 835, 990], "revisit": [408, 419, 443], "schubert": [408, 419, 443, 449, 1035, 1036, 1039, 1040, 1042, 1043, 1044, 1045], "tod": [408, 419, 443], "lj2017": 408, "d_c": 408, "x_p": [408, 984], "d_m": 408, "x_q": 408, "g_": 408, "varepsilon": [408, 1002, 1003], "cm2013": 408, "mst": 408, "minimum_cluster_s": 408, "campello": [408, 445], "moulavi": [408, 445], "pei": [408, 1038], "tseng": 408, "cao": 408, "motoda": 408, "pakdd": 408, "lectur": [408, 643, 980, 1007], "7819": [408, 1038], "berlin": [408, 413, 534, 695, 724, 754, 988], "heidelberg": [408, 413, 534, 695, 724, 754, 988], "mcinn": [408, 1037, 1038, 1039, 1041, 1042, 1047], "heali": 408, "icdmw": 408, "max_ep": [408, 449, 454, 456], "nearbi": [408, 991], "cluster_hierarchy_": [408, 449], "planar": 408, "peripheri": 408, "wall": 408, "ankerst": [408, 449, 456], "mihael": [408, 449, 456], "marku": [408, 449, 456, 1039, 1041, 1042, 1043], "breunig": [408, 449, 456, 846, 994], "han": [408, 441, 449, 456, 1031, 1039, 1040, 1044], "j\u00f6rg": [408, 449, 456, 1039], "sigmod": [408, 449, 456, 846, 994], "cft": 408, "lossi": 408, "subclust": [408, 441], "till": [408, 441, 786, 988], "temporarili": [408, 1036], "farthest": 408, "brc": [408, 441], "tian": [408, 441, 1036, 1037, 1038], "raghu": [408, 441], "ramakrishnan": [408, 441], "maron": [408, 441], "livni": [408, 441], "sfu": [408, 441], "coursecentr": [408, 441], "459": [408, 441], "zhang96": [408, 441], "roberto": [408, 441], "perdisci": [408, 441], "jbirch": [408, 441], "java": [408, 441, 1008], "satisfi": [408, 649, 653, 698, 716, 734, 735, 840, 841], "labels_pr": [408, 703, 704, 713, 714, 716, 729, 734, 735, 753, 755, 784, 793], "unadjust": [408, 988, 1043], "swap": [408, 413, 715, 734, 967, 968, 1031], "ri": [408, 704, 784], "c_2": [408, 985], "unord": [408, 415, 998], "esp": [408, 1031], "hubert": [408, 704, 714, 784], "arabi": [408, 704, 714, 784], "steinlei": [408, 704], "psycholog": [408, 704, 715], "agreement": [408, 703, 715, 753, 755, 793, 988], "22504": 408, "10526": 408, "u_i": [408, 481, 482, 483, 753], "v_j": [408, 753, 993], "veb2009": 408, "a_i": 408, "b_j": 408, "yat2016": 408, "average_method": [408, 703, 755, 1039], "vinh": [408, 703], "veb2010": 408, "strehl": 408, "joydeep": 408, "583": [408, 1022], "1162": 408, "153244303321897735": 408, "epp": [408, 703], "bailei": [408, 703], "26th": [408, 724, 754, 988], "1553374": 408, "1553511": 408, "9781605585161": 408, "csail": [408, 665, 666, 675, 837], "volume11": 408, "vinh10a": 408, "algesheim": 408, "tesson": 408, "30750": 408, "1038": 408, "srep30750": 408, "rosenberg": [408, 716, 735, 793], "hirschberg": [408, 716, 735, 793], "b2011": 408, "homogeneity_completeness_v_measur": [408, 1040], "n_k": [408, 549], "n_c": [408, 658], "julia": [408, 716, 735, 793], "media": [408, 1013], "hila": 408, "becker": [408, 1013, 1034, 1043], "fowlkes_mallows_scor": [408, 988, 1037, 1039], "fmi": [408, 729], "tp": [408, 711, 717, 729, 780, 781, 782, 785, 912, 988], "fp": [408, 711, 717, 729, 780, 781, 782, 785, 988], "fn": [408, 711, 717, 729, 780, 781, 782, 785, 988, 989], "47140": 408, "fowkl": [408, 729], "1983": [408, 729, 880], "tandfonlin": 408, "01621459": 408, "10478008": 408, "kmeans_model": 408, "1987": [408, 606, 607, 790, 791], "calinski_harabasz_scor": [408, 1039], "n_e": 408, "mathrm": [408, 410, 413, 417, 984, 1004], "b_k": 408, "w_k": [408, 984], "c_q": 408, "n_q": 408, "c_e": 408, "cali\u0144ski": 408, "1974": [408, 416, 709], "dendrit": [408, 709], "davies_bouldin_scor": [408, 1039], "bould": 408, "c_i": [408, 991], "c_j": [408, 993], "s_i": [408, 984, 998], "diamet": 408, "nonneg": [408, 413, 452, 537, 539, 546, 877], "s_j": 408, "max_": [408, 988], "1979": [408, 723, 767], "halkidi": 408, "batistaki": 408, "yanni": 408, "vazirgianni": 408, "michali": 408, "contingency_matrix": [408, 753, 1039], "pair_confusion_matrix": [408, 1043], "permit": [409, 466, 587, 588, 590, 797, 800, 801, 811, 822, 861, 862, 988, 989, 990, 1037], "clf__c": 409, "pca1": [409, 424], "svm1": 409, "77484909e": 409, "07058917e": 409, "pca2": [409, 424], "svm2": 409, "raw_target_regr": 409, "bypass": [409, 598, 645, 651, 908, 909, 910, 911, 1047], "check_invers": [409, 464, 864, 998, 1039, 1045, 1046], "linear_pca": 409, "make_union": [409, 859, 1034, 1038], "unreli": 409, "citi": [409, 416, 465, 1024], "london": [409, 416, 465], "sallisaw": [409, 465], "bow": 409, "moveabl": 409, "feast": 409, "grape": 409, "wrath": 409, "expert_r": 409, "user_r": 409, "city_categori": 409, "title_bow": 409, "city_london": 409, "city_pari": 409, "city_sallisaw": 409, "507": 409, "301": [409, 1002], "ignored_new_col": 409, "shrunk_covari": 410, "sigma_": [410, 643, 644, 1044], "365": [410, 472], "wiesel": [410, 421, 474], "eldar": [410, 421, 474], "hero": [410, 421, 474], "5016": [410, 421, 474], "5029": [410, 421, 474], "_k": [410, 982, 984], "glasso": [410, 477], "biostatist": [410, 477], "uncommon": [410, 657, 900, 1003], "downweight": [410, 535], "driessen": [410, 468, 473, 994], "fastmcd": [410, 468, 473], "raw_location_": [410, 468, 473], "raw_covariance_": [410, 468, 473], "multidimension": [411, 687, 689, 691, 693, 985, 991], "plsw2a": 411, "u_k": [411, 413], "v_k": [411, 413, 530, 536, 544, 545], "x_k": [411, 413, 982, 991], "y_k": [411, 998], "xi_k": 411, "omega_k": [411, 982], "gamma_k": 411, "delta_k": 411, "nipal": [411, 482, 483], "xp": [411, 875], "x_rotations_": [411, 481, 482, 483], "y_rotations_": [411, 481, 482, 483], "ty": 411, "x_weights_": [411, 481, 482, 483, 484], "y_weights_": [411, 481, 482, 483, 484], "yv": 411, "tx": 411, "pls1": [411, 483], "pls2": [411, 483], "tx_k": [411, 982], "ty_k": 411, "ja": [411, 1038], "wegelin": 411, "methodolog": [412, 1012], "academ": [412, 1013], "commerci": [412, 1013], "flowchart": [412, 1017], "f1_macro": [412, 988, 1035], "custom_cv_2fold": 412, "custom_cv": 412, "9333": 412, "scorer1_nam": 412, "scorer2_nam": 412, "return_indic": [412, 823, 1047], "precision_macro": [412, 1019], "recall_macro": [412, 988], "test_precision_macro": 412, "test_recall_macro": 412, "prec_macro": 412, "rec_macro": 412, "test_prec_macro": 412, "test_rec_macro": 412, "train_prec_macro": 412, "train_rec_macro": 412, "undistinguish": 412, "devic": [412, 581, 1008], "kf": [412, 802], "12883823": 412, "rkf": [412, 812], "weigh": [412, 1038], "caveat": [412, 418], "part3": 412, "spector": 412, "submodel": 412, "kohavi": 412, "jnt": 412, "bharat": [412, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "rao": [412, 1043, 1046], "fung": 412, "rosal": 412, "witten": 412, "leavepout": [412, 805, 1019], "ss": 412, "gkf": 412, "sgkf": [412, 815], "suboptim": [412, 699, 701, 780, 787, 991, 1039, 1047], "leavepgroupsout": [412, 799, 1019, 1037], "n_group": [412, 806, 1019, 1037], "lpgo": [412, 806], "gss": [412, 799], "withheld": 412, "predefinedsplit": [412, 1019, 1035], "test_fold": [412, 810], "train_indx": 412, "test_indx": 412, "autocorrel": 412, "superset": [412, 818, 988], "surplu": 412, "tscv": [412, 818], "inbuilt": 412, "some_integ": 412, "n_cv": [412, 436], "isotropi": 413, "alik": [413, 986], "halko": [413, 534, 540, 543, 936, 937], "szlam": [413, 936, 937], "disadvantag": [413, 418, 984, 985, 992, 1002, 1003, 1004], "parsimoni": [413, 998], "jen09": 413, "mrl09": 413, "ell_1": [413, 984], "underset": [413, 984, 991, 1004], "operatornam": [413, 739, 984, 988, 1004], "fro": [413, 537, 539, 546, 692, 984], "gentli": 413, "spirit": 413, "mairal": [413, 530, 536], "bach": [413, 530, 535, 536, 537, 657, 984], "ponc": [413, 530, 536], "sapiro": [413, 530, 536], "jenatton": 413, "obozinski": 413, "scholkopf1997": 413, "bakir2003": 413, "smola": [413, 416, 534, 866, 998, 1003], "klau": [413, 534, 866], "eigendecompos": 413, "eigensolv": [413, 451, 461, 534, 543, 694, 985], "eigsh": [413, 534, 1037, 1038], "lehoucq": 413, "sorensen": 413, "lsa": [413, 543, 1033], "synonymi": 413, "polysemi": 413, "lsi": 413, "sigma_k": [413, 982], "columnwis": 413, "sublinear": [413, 589, 590], "use_idf": [413, 416, 589, 590, 1024], "textual": [413, 1004, 1040], "man": [413, 589, 767, 835, 839, 986, 988, 990], "prabhakar": 413, "raghavan": [413, 589, 835, 839, 986, 988, 990], "hinrich": 413, "sch\u00fctze": [413, 589, 986, 988, 990], "transform_method": 413, "split_cod": 413, "dictionarylearn": [413, 536, 538, 539, 541, 542, 543, 544, 545, 1032, 1036, 1038, 1041, 1044, 1045, 1046, 1047], "overcomplet": 413, "mammalian": 413, "cortex": 413, "inpaint": 413, "h_i": [413, 993], "psi": 413, "sim": [413, 1022], "wh_i": 413, "ww": 413, "superflu": 413, "psi_1": 413, "psi_2": 413, "psi_n": 413, "superimpos": 413, "plug": [413, 984, 1013, 1024], "wh": [413, 537, 539, 546], "hoyer": [413, 1034], "nndsvd": [413, 537, 539, 546, 1040, 1043], "nndsvdar": [413, 537, 539, 546, 1040], "elementwis": [413, 537, 539, 546], "_featur": [413, 537, 539, 546], "kl": [413, 985, 1039], "itakura": [413, 537, 539, 546, 1038], "saito": [413, 537, 539, 546, 1038], "w_new": 413, "forget_factor": [413, 537], "lee": [413, 1031, 1032, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1046], "seung": 413, "boutsidi": 413, "gallopoulo": 413, "cichocki": [413, 537, 539, 546], "phan": 413, "fevott": [413, 537, 539, 546], "idier": [413, 537, 539, 546], "lefevr": [413, 537], "corpora": 413, "hoffman": [413, 535, 1036, 1043], "unshad": 413, "beta_k": 413, "eta": [413, 535, 675, 676, 677, 992, 1002, 1036], "topic_word_prior": [413, 535], "theta_d": 413, "doc_topic_prior": [413, 535], "z_": 413, "w_": [413, 645, 646, 651, 652, 659, 660, 661, 662, 680, 683, 984, 988, 990, 993], "elbo": 413, "overset": [413, 995], "e_": 413, "blei": [413, 535, 795], "wang": [413, 535, 678, 688, 692, 724, 754, 984, 985, 988, 1034, 1036, 1037, 1038, 1039, 1043, 1046, 1047], "paislei": [413, 535], "kaiser": [413, 531], "talli": 414, "disproportion": 414, "41075698": 414, "41076071": 414, "rho_k": 414, "unsmooth": 414, "scott": [414, 845, 1031, 1032, 1037, 1039, 1040, 1041, 1046, 1047], "silvermann": 414, "propto": [414, 990], "2h": 414, "angular": [414, 691, 762], "contin": [414, 713, 998], "semin": 415, "friedman2001": 415, "lightgbm": [415, 560, 561, 1008, 1040, 1047], "8965": 415, "grower": [415, 560, 561], "missing": [415, 626, 627, 629, 1040], "fisher1958": 415, "loan": [415, 533, 984, 1013], "mayer2022": 415, "mayer": [415, 1043, 1045], "bourassa": 415, "hoesli": 415, "scognamiglio": 415, "valuat": 415, "tianqi": 415, "guestrin": 415, "ke": [415, 1042, 1043], "boostingdecis": 415, "nr": 415, "f_m": 415, "h_m": 415, "f_": [415, 634, 988], "l_m": 415, "taylor": [415, 1039, 1041, 1042, 1045], "g_i": [415, 648], "sum_m": 415, "softmax": [415, 560, 657, 658, 984, 991, 992], "superior": 415, "ineffici": [415, 442, 573, 828, 829, 991, 993], "htf": 415, "r2007": 415, "friedman2002": 415, "1189": 415, "1232": 415, "b1998": 415, "decoupl": [415, 990], "cancel": [415, 416, 761], "b2001": 415, "bear": [415, 1008], "geurt": [415, 554, 555, 556, 557, 564, 565, 910, 911], "ernst": [415, 556, 557, 564, 565, 910, 911], "wehenkel": [415, 556, 557, 564, 565, 910, 911], "l2014": 415, "lieg": 415, "flavour": 415, "b1999": 415, "b1996": 415, "h1998": 415, "lg2012": 415, "bootstrap_featur": [415, 554, 555], "844": [415, 554, 555], "w2": 415, "w3": 415, "lr__c": 415, "rf__n_estim": 415, "w1992": 415, "knr": 415, "stack_method": [415, 566], "stack_method_": [415, 566, 567], "final_layer_rfr": 415, "final_layer_gbr": 415, "final_lay": 415, "multi_layer_regressor": 415, "wolpert": [415, 566, 567], "241": [415, 566, 567], "freund": [415, 552, 553], "fs1995": 415, "w_1": [415, 984, 992], "w_2": [415, 984, 992], "w_n": 415, "w_i": [415, 979, 988], "reappli": 415, "zzrh2009": 415, "d1997": 415, "dubai": 416, "francisco": [416, 1000], "movi": [416, 1016], "movie_entri": 416, "thriller": [416, 871], "drama": 416, "000e": 416, "003e": 416, "011e": 416, "974e": 416, "unseen_featur": [416, 580], "speech": [416, 988], "chunker": 416, "pos_window": 416, "pos_vector": 416, "1x6": 416, "part_of_speech": 416, "token_featur": 416, "isupp": 416, "uppercase_initi": 416, "all_uppercas": 416, "raw_x": [416, 581], "pos_tagg": 416, "murmurhash3": [416, 581, 588, 953], "weinberg": 416, "modulo": [416, 1042], "kilian": [416, 1046, 1047], "anirban": 416, "dasgupta": [416, 445, 894, 1000], "langford": [416, 687, 985], "josh": [416, 1038], "attenberg": 416, "punctuat": [416, 587, 588, 590], "diminish": 416, "4x9": 416, "build_analyz": [416, 587, 588, 590, 1041], "interrog": 416, "bigram_vector": 416, "cool": [416, 1031], "feature_index": 416, "him": 416, "constru": 416, "nqy18": 416, "smooth_idf": [416, 589, 590], "_n": [416, 988], "textbook": [416, 589], "6x3": 416, "81940995": 416, "57320793": 416, "47330339": 416, "88089948": 416, "58149261": 416, "81355169": 416, "term1": 416, "term2": 416, "term3": 416, "0986": [416, 864], "819": 416, "573": 416, "8473": 416, "8515": [416, 1038], "5243": 416, "85151335": 416, "52433293": 416, "55422893": 416, "83236428": 416, "63035731": 416, "77630514": 416, "idf_": [416, 589, 590, 1039], "western": 416, "europ": [416, 998], "koi8": 416, "russian": 416, "unicodedecodeerror": [416, 587, 588, 590], "told": 416, "troubleshoot": [416, 1006], "chardet": 416, "chardetect": 416, "damag": 416, "sloppili": 416, "ftfy": 416, "mish": 416, "mash": 416, "text1": 416, "sei": 416, "mir": 416, "gegr": 416, "xc3": 416, "xbc": 416, "x9ft": 416, "mein": 416, "sauerkraut": 416, "text2": 416, "holdselig": 416, "sind": 416, "dein": 416, "ger": 416, "xfcche": 416, "text3": 416, "xff": 416, "xfea": 416, "x00u": 416, "x00f": 416, "x00": 416, "x00l": 416, "xfc": 416, "x00g": 416, "x00e": 416, "x00n": 416, "x00d": 416, "x00a": 416, "x00h": 416, "x00r": 416, "x00z": 416, "x00i": 416, "x00b": 416, "x00c": 416, "x00t": 416, "x00o": 416, "spolski": 416, "nnmf": [416, 1025, 1026, 1031], "phrase": 416, "misspel": 416, "rescu": 416, "resili": 416, "wprd": 416, "ngram_vector": 416, "char_wb": [416, 587, 588, 590], "rd": 416, "wo": 416, "wp": [416, 656, 670], "char": [416, 587, 588, 590, 1031], "jumpi": 416, "fox": [416, 1047], "1x4": 416, "umpi": 416, "1x5": 416, "mpy": 416, "fo": 416, "paragraph": [416, 502, 1024], "barrier": 416, "hv": 416, "4x10": 416, "discrep": [416, 1024, 1035], "4x1048576": 416, "collid": 416, "ingest": 416, "spend": 416, "my_token": 416, "lowercas": [416, 424, 441, 442, 444, 446, 448, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 587, 588, 590, 638, 639, 640, 641, 687, 688, 691, 844, 849, 852, 856, 861, 866, 892, 893, 1044], "lucen": 416, "build_preprocessor": [416, 587, 588, 590, 1041], "whitespac": 416, "fanci": 416, "lemmat": 416, "nltk": [416, 1007, 1008], "word_token": 416, "wordnetlemmat": 416, "lemmatoken": 416, "wnl": 416, "british": 416, "spell": 416, "to_british": 416, "1or": 416, "bt": 416, "1er": 416, "ing": 416, "ation": 416, "1z": 416, "ogu": 416, "og": 416, "customvector": 416, "asian": 416, "one_imag": [416, 583], "fake": 416, "assert_array_equ": 416, "patchextractor": [416, 1047], "five_imag": 416, "variancethreshold": [417, 865, 978, 1034, 1041, 1044, 1047], "selectfdr": [417, 591, 595, 597, 598, 599, 605, 1035, 1037, 1038, 1047], "selectfw": [417, 591, 594, 595, 598, 599, 605, 1047], "genericunivariateselect": [417, 594, 595, 597, 598, 599, 601, 1045, 1047], "r_regress": [417, 605, 1044, 1045, 1048], "nonparametr": [417, 418, 606, 607], "bewar": 417, "importance_gett": [417, 592, 593, 596, 1043], "unimport": 417, "lsvc": 417, "baraniuk": 417, "isr": 417, "ist": 417, "utl": 417, "aguiar": 417, "cs_note": 417, "ferri": [417, 988], "versatil": [418, 1003, 1013], "optima": 418, "markov": [418, 610, 993, 1008, 1031], "nuisanc": 418, "one_vs_on": [418, 609, 989], "ingredi": 418, "duv2014": 418, "theta_l": 418, "x_bound": [418, 616], "operand": 418, "k1__": 418, "k2__": 418, "constant_valu": [418, 612, 616], "constant_value_bound": [418, 610, 612, 616], "k1__k1__constant_valu": 418, "value_typ": [418, 616], "n_element": [418, 616], "k2__length_scal": 418, "k1": [418, 620, 623], "k1__k1": 418, "k1__k1__constant_value_bound": 418, "k1__k2": 418, "k1__k2__length_scale_bound": 418, "k2": [418, 620, 623], "k2__length_scale_bound": 418, "69314718": [418, 611, 998], "30258509": 418, "interoper": [418, 1006, 1009, 1026], "pairwisekernel": 418, "_valu": [418, 612], "_level": [418, 624], "k_1": [418, 620, 623], "k_2": [418, 620, 623], "__add__": [418, 623], "__mul___": 418, "__pow__": [418, 615], "2l": [418, 621], "bigg": [418, 618], "bessel": [418, 618], "rightarrow": [418, 618, 992], "quad": [418, 991, 1002], "tfrac": 418, "3l": 418, "pp84": 418, "x_d": [418, 613], "inhomogen": [418, 613], "expon": [418, 615, 675, 676, 677, 809, 857, 858, 875, 977], "carl": [418, 609, 610, 613, 618, 621], "rasmussen": [418, 609, 610, 613, 618, 621], "duvenaud": [418, 621, 622], "cookbook": [418, 621, 622], "minkowski": [419, 443, 449, 456, 687, 698, 776, 777, 778, 840, 841, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 991, 1031, 1034, 1045, 1046, 1047], "metric_param": [419, 443, 445, 449, 456, 687, 691, 842, 843, 844, 845, 846, 848, 850, 851, 852, 853, 854, 1035, 1038, 1045], "leaf_siz": [419, 443, 445, 449, 456, 840, 841, 842, 843, 844, 845, 846, 848, 850, 851, 852], "kd_tree": [419, 443, 445, 449, 456, 687, 688, 842, 843, 844, 845, 846, 848, 850, 851, 852, 991, 1044, 1048], "balltre": [419, 443, 445, 449, 456, 687, 688, 698, 842, 843, 844, 845, 846, 848, 850, 851, 852, 985, 1031, 1033, 1035, 1039, 1044, 1047, 1048], "ckdtree": [419, 443, 1033], "inhibit": [419, 443], "core_sampl": 419, "n_core_sampl": [419, 443], "attract": [419, 443, 982, 991, 1008], "fun": [420, 532, 1013], "logcosh": [420, 532], "fun_arg": [420, 532], "w_init": [420, 532], "whiten_solv": [420, 532, 1046], "return_x_mean": 420, "compute_sourc": 420, "return_n_it": [420, 453, 458, 477, 544, 545, 645, 646, 651, 652, 659, 660, 661, 662, 680, 681, 682, 683, 684, 685, 686, 693, 1045], "cube": [420, 532], "my_g": [420, 532], "x_mean": 420, "AS": 420, "fortran": [420, 540, 645, 646, 651, 652, 659, 660, 661, 662, 664, 680, 683, 684, 685, 920, 921, 1031, 1034, 1035, 1039], "hyvarinen": [420, 532], "oja": [420, 532], "430": [420, 532], "shrunk_cov": [421, 478, 480], "eq": [421, 474, 720, 721, 722], "subobject": [422, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 795, 796, 797, 800, 801, 811, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911], "row_ind": [423, 450, 452], "intp": [423, 450, 452], "col_ind": [423, 450, 452], "get_submatrix": [423, 450, 452], "pca0": 424, "_n_features_out": 424, "class_name0": [424, 441, 442, 444, 446, 448, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 638, 639, 640, 641, 687, 688, 691, 844, 849, 852, 856, 866, 892, 893], "class_name1": [424, 441, 442, 444, 446, 448, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 638, 639, 640, 641, 687, 688, 691, 844, 849, 852, 856, 866, 892, 893], "class_name2": [424, 441, 442, 444, 446, 448, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 638, 639, 640, 641, 687, 688, 691, 844, 849, 852, 856, 866, 892, 893], "feature_names_out": [424, 429, 441, 442, 444, 446, 448, 463, 481, 482, 483, 484, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 565, 566, 567, 568, 569, 580, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 626, 627, 628, 629, 634, 637, 638, 639, 640, 641, 687, 688, 691, 844, 849, 852, 856, 859, 860, 863, 864, 865, 866, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 1045], "harsh": [425, 436, 468, 548, 549, 550, 552, 554, 556, 558, 560, 563, 566, 568, 609, 657, 665, 667, 673, 674, 675, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 847, 850, 857, 895, 896, 900, 902, 905, 908, 910, 1041, 1043, 1046], "n_samples_fit": [431, 464, 481, 482, 483, 553, 555, 557, 559, 561, 564, 567, 569, 610, 634, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 669, 671, 672, 677, 678, 687, 833, 834, 842, 843, 844, 846, 848, 850, 851, 852, 858, 901, 903, 906, 909, 911], "uniform_averag": [431, 464, 481, 482, 483, 553, 555, 557, 559, 561, 564, 567, 569, 610, 634, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 669, 671, 672, 677, 678, 720, 721, 726, 743, 744, 746, 748, 749, 751, 783, 788, 789, 833, 834, 843, 851, 858, 901, 903, 906, 909, 911, 988, 1040], "n_features_new": [432, 441, 444, 531, 533, 535, 536, 538, 541, 542, 548, 566, 568, 569, 581, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 627, 629, 634, 637, 638, 639, 640, 641, 849, 856, 863, 864, 865, 866, 869, 870, 872, 873, 874, 875, 877, 878, 879, 880, 892, 893], "base_clf": 436, "calibrated_clf": 436, "x_calib": 436, "y_calib": 436, "prob_tru": [437, 438], "prob_pr": [437, 438], "ref_lin": 437, "alexandru": 438, "22nd": 438, "convergence_it": [439, 453], "hardcod": [439, 453, 1039], "affinity_matrix_": [439, 451, 690], "cluster_center_indic": [439, 453], "compute_full_tre": [440, 444, 1035], "compute_dist": [440, 444, 1043], "inferior": [440, 444, 1042], "n_leaves_": [440, 444], "n_connected_components_": [440, 444, 1040], "branching_factor": 441, "compute_label": [441, 448], "promot": [441, 707, 1008, 1042, 1044], "redistribut": 441, "overwritten": [441, 531, 532, 533, 535, 540, 547, 606, 607, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 671, 673, 678, 680, 681, 682, 683, 685, 956, 958, 1044], "root_": 441, "_cfnode": 441, "cftree": 441, "dummy_leaf_": 441, "subcluster_labels_": 441, "centroids_": [441, 445, 847], "copy_x": [442, 446, 458, 534, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 671, 673, 678, 680, 681, 682, 683, 684, 1033, 1039, 1040], "k_init": [442, 458], "sse": 442, "bisect_mean": 442, "denser": 443, "pooling_func": [444, 1039], "xred": [444, 1047], "cluster_selection_epsilon": 445, "max_cluster_s": 445, "cluster_selection_method": 445, "eom": 445, "store_cent": 445, "kdtree": [445, 449, 456, 687, 688, 840, 842, 843, 844, 845, 846, 848, 850, 851, 852, 1033, 1035, 1039, 1043, 1044, 1047, 1048], "neighbour": [445, 461, 691, 993], "medoid": 445, "overwrit": [445, 495, 630, 1015, 1031, 1042, 1047], "medoids_": 445, "zimek": 445, "chaudhuri": 445, "jaskowiak": 445, "malzer": 445, "baum": 445, "hybrid": [445, 648, 1008], "dbscan_clust": 445, "border": [445, 1041], "unclust": 445, "socg2006": 446, "min_bin_freq": [447, 460], "cluster_al": [447, 460], "get_bin_se": 447, "orphan": [447, 460, 1031], "reassignment_ratio": 448, "eec": [448, 640], "tuft": 448, "dscullei": 448, "fastkmean": 448, "55102041": 448, "48979592": 448, "06896552": 448, "set_partial_fit_request": [448, 533, 537, 665, 666, 667, 675, 676, 677, 828, 829, 832, 833, 835, 836, 837, 838, 839, 857, 880], "cluster_method": 449, "predecessor_correct": [449, 455], "unprocess": [449, 587, 588, 590], "heap": 449, "braycurti": [449, 456, 698, 776, 777, 778, 991], "canberra": [449, 456, 698, 776, 777, 778, 991], "chebyshev": [449, 456, 698, 776, 777, 778, 991], "dice": [449, 456, 698, 776, 777, 778, 991], "kulsinski": [449, 456, 698, 776, 777, 778], "rogerstanimoto": [449, 456, 698, 776, 777, 778, 991], "russellrao": [449, 456, 698, 776, 777, 778, 991], "seuclidean": [449, 456, 698, 776, 777, 778, 847, 991, 1039, 1042, 1043], "sokalmichen": [449, 456, 698, 776, 777, 778, 991], "sokalsneath": [449, 456, 698, 776, 777, 778, 991], "yule": [449, 456, 776, 777, 778], "manhattan_dist": [449, 456, 687, 760, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 1031, 1041, 1046, 1047], "minkowski_dist": [449, 456, 687, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854], "l_p": [449, 456, 687, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854], "upward": [449, 455], "successor": [449, 455, 1004, 1008], "predecessor_": [449, 456], "erich": [449, 1035, 1036, 1039, 1040, 1042, 1043, 1044, 1045], "gertz": 449, "lernen": 449, "wissen": 449, "daten": [449, 1039, 1040], "analysen": 449, "lwda": 449, "329": 449, "n_best": 450, "n_svd_vec": [450, 452], "mini_batch": [450, 452], "n_row_clust": [450, 452, 512], "n_column_clust": [450, 452, 512], "ncv": [450, 452], "n_oversampl": [450, 452, 540, 543, 937, 1045], "kernel_param": [451, 534, 638, 642], "precomputed_nearest_neighbor": [451, 690], "eigen": [451, 548, 672, 690, 694, 982, 1037, 1040], "dist_matrix": 451, "csc_matrix": [451, 556, 557, 562, 563, 564, 565, 877, 908, 909, 910, 911, 978, 998, 1004, 1036], "best_n_it": 458, "n_local_tri": 459, "n_seed": 460, "multigrid": 461, "eigendecomposit": [461, 672, 690, 694, 866, 980], "multiscal": 461, "preliminari": 461, "heapq": 462, "topolog": [462, 1008], "n_connected_compon": 462, "n_leav": [462, 908, 909, 910, 911], "transformers_": [463, 1048], "remaining_column": 463, "named_transformers_": 463, "sparse_output_": [463, 550], "output_indices_": [463, 1044], "datatyp": [463, 465, 1038, 1041], "norm1": 463, "norm2": 463, "text_preprocess": 463, "num_preprocess": 463, "x_t": [463, 626, 859], "sum_n_compon": [463, 859], "notimplementederror": [464, 471, 552, 553, 554, 555, 566, 567, 568, 569, 592, 593, 601, 626, 670, 672, 674, 859, 887, 897, 1038, 1048], "y_hat": 464, "90453403": 465, "50755672": 465, "30151134": 465, "print_changed_onli": [467, 898, 1040, 1042, 1043], "pairwise_dist_chunk_s": [467, 898], "enable_cython_pairwise_dist": [467, 898], "skip_parameter_valid": [467, 898, 1047], "cache_s": [467, 898, 902, 903, 904, 905, 906, 1003], "get_config": [467, 779, 898, 955, 1046], "offset_": [468, 562, 676, 846, 904, 1039], "raw_support_": [468, 473], "dist_": [468, 473], "true_cov": [468, 470, 471], "7411": [468, 473, 1037], "2535": [468, 473], "3053": [468, 473], "0813": [468, 473], "correct_covari": [468, 473], "rvd": [468, 473], "covariance_correct": [468, 473], "comp_cov": [468, 469, 470, 471, 472, 473, 474, 475], "get_precis": [468, 469, 470, 471, 472, 473, 474, 475, 531, 533, 540], "getter": [468, 469, 470, 471, 472, 473, 474, 475, 592, 593, 596], "is_inli": [468, 562, 846], "reweight_covari": [468, 473], "rvdriessen": [468, 473], "location_reweight": [468, 473], "covariance_reweight": [468, 473], "support_reweight": [468, 473], "negative_mahal_dist": 468, "7569": 469, "2818": 469, "3928": 469, "0622": [469, 475], "0193": [469, 475], "enet_tol": [470, 471, 477, 1036], "220446049250313e": [470, 471, 477, 649, 650, 653, 654, 655, 681, 682], "graphlasso": [470, 1036, 1039], "costs_": [470, 471, 1047], "dual_gap": [470, 471, 477, 645, 646, 651, 652, 659, 660, 661, 662, 680, 683], "return_cost": [470, 471, 477], "049": 470, "364": [470, 471, 1032], "038": [470, 471, 857], "n_refin": 471, "graphlassocv": [471, 1033, 1039], "dualiti": [471, 984], "block_siz": [472, 478, 479, 1035], "4406": 472, "1616": 472, "0595": 472, "0075": [472, 540], "rouseeuw1984": 473, "butlerdavi": 473, "butler": [473, 1034, 1042, 1043], "davi": [473, 723, 988, 1035], "jhun": 473, "1385": 473, "7533": [474, 1038], "2763": 474, "3964": 474, "7833": 474, "2431": 474, "3889": 474, "0195": 474, "7387": 475, "2536": 475, "4110": 475, "cov_init": [477, 1047], "graph_lasso": [477, 1039], "x_loadings_": [481, 482, 483], "y_loadings_": [481, 482, 483], "plssvd": [481, 482, 1011, 1026, 1043, 1045], "x_c": [481, 482, 484, 995], "y_c": [481, 482, 484], "y_reconstruct": [481, 482, 483], "x_scores_": [483, 1043], "y_scores_": [483, 1043], "y_transform": 484, "data_hom": [485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 1038, 1047], "zero_bas": [486, 507, 508], "query_id": [486, 507, 508], "grok": 486, "qid": [486, 507, 508, 1032, 1037], "download_if_miss": [487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 1038], "stopword": [488, 1024], "target_column": [488, 489, 495], "494021": 491, "slice_": [492, 493, 1046], "unrestrict": 492, "2914": 493, "5748": 493, "pathlik": [495, 1047], "n_retri": [495, 1045], "read_csv_kwarg": [495, 1047], "timeout": [495, 954, 1045], "ith": [495, 772, 776, 836, 857, 858, 873, 874], "1592": 497, "1212": 497, "1624": 497, "data_filenam": [500, 504], "target_filenam": [500, 504], "container_path": 502, "load_cont": 502, "allowed_extens": 502, "container_fold": 502, "category_1_fold": 502, "file_1": 502, "file_2": 502, "file_42": 502, "category_2_fold": 502, "file_43": 502, "file_44": 502, "image_nam": 505, "first_img_data": 506, "backup": [507, 1031], "instantan": 507, "mycach": 507, "get_data": 507, "mysvmlightfil": 507, "xn": 508, "yn": [508, 989, 990], "q1": 508, "qn": 508, "yi": [508, 990, 1035, 1039, 1040, 1043], "qi": [508, 1043], "triplet": 508, "minval": [510, 512], "maxval": [510, 512], "seventh": [510, 1000], "269": 510, "274": 510, "return_cent": [511, 1042], "basri": 512, "gerstein": 512, "716": 512, "flip_i": 514, "interdepend": 514, "polytop": 514, "guyon": [514, 592, 593, 988], "madelon": 514, "1991": [515, 516, 517], "12000": 519, "effective_rank": [520, 523], "tail_strength": [520, 523], "bell": [520, 1039, 1041, 1043, 1044], "fat": [520, 523], "crawl": [520, 929], "return_ind": 522, "4967": 523, "1382": 523, "6476": 523, "523": 523, "2341": 523, "4694": 523, "5425": 523, "579": 523, "7674": [523, 1038], "4017": 523, "data_transpos": [525, 1045, 1047], "n_dim": [526, 528, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 1048], "norm_diag": 526, "sparse_format": [526, 1048], "make_spd_matrix": 526, "celeux": 527, "el": [527, 1044, 1046, 1047], "anbari": 527, "marin": 527, "frequentist": 527, "marsland": 529, "vuw": 529, "nz": 529, "marslast": 529, "ch6": 529, "code_init": [530, 544], "dict_init": [530, 536, 544, 545], "callback": [530, 536, 538, 544, 545, 849, 954, 1009, 1047], "split_sign": [530, 536, 541], "transform_max_it": [530, 536, 537, 541, 1041], "_fro": [530, 536, 544, 545, 645, 646, 651, 659, 660, 661, 680], "lasso_cd": [530, 536, 541, 547], "error_": [530, 542], "minibatchsparsepca": [530, 532, 536, 539, 541, 542, 544, 545, 1031, 1032, 1042, 1044, 1045, 1046, 1047, 1048], "sierra": [530, 536], "icml09": [530, 536], "x_hat": [530, 536], "noise_variance_init": 531, "quartimax": [531, 1043], "loglike_": 531, "barber": 531, "bishop": [531, 533, 540, 739, 795, 984, 989, 1003], "get_covari": [531, 533, 540], "unmixing_matrix": 532, "whitening_": 532, "kpca": [532, 533, 534, 1025, 1026, 1031], "set_inverse_transform_request": [532, 580, 867, 880], "unsaf": 533, "singular_values_": [533, 540, 543, 1038], "var_": [533, 838, 880, 1044], "miketip": [533, 540], "mppca": [533, 540], "n_samples_seen_": [533, 869, 870, 880, 1039], "batch_size_": 533, "ross": [533, 606, 607, 1004, 1045, 1046], "vision": [533, 756, 757, 980, 984, 986, 1004, 1008, 1013, 1032], "toronto": [533, 643, 856], "dross": 533, "ivt": 533, "rosslimlinyang_ijcv": 533, "karhunen": 533, "loev": 533, "levi": [533, 1038], "lindenbaum": 533, "1371": 533, "1374": 533, "abstain": 533, "holub": 533, "opportun": [533, 1002], "golub": [533, 838, 880], "x_spars": [533, 959, 962], "sigma2": [533, 540], "x_origin": [533, 538, 540, 542, 543, 629, 892, 893], "check_input": [533, 547, 645, 646, 651, 659, 660, 661, 680, 686, 908, 909, 910, 911, 1039], "remove_zero_eig": [534, 1033, 1040], "x_fit_": [534, 642], "eigenvalues_": [534, 1044], "eigenvectors_": [534, 1044], "dual_coef_": [534, 642, 902, 903, 904, 905, 906, 1003, 1035], "x_transformed_fit_": 534, "gamma_": [534, 1047], "nathan": [534, 1039, 1043, 1046], "gunnar": [534, 937], "tropp": [534, 540], "288": [534, 540], "vladimir": [534, 937, 984, 1041, 1045], "rokhlin": [534, 540, 937], "tygert": [534, 540, 937], "learning_decai": 535, "evaluate_everi": 535, "perp_tol": 535, "mean_change_tol": 535, "max_doc_update_it": 535, "kappa": [535, 715], "tau_0": 535, "pseudocount": [535, 1039], "exp_dirichlet_component_": 535, "n_batch_iter_": 535, "bound_": 535, "doc_topic_prior_": 535, "topic_word_prior_": 535, "franci": [535, 657, 984, 1037], "onlineldavb": 535, "chong": 535, "00360392": 535, "25499205": 535, "0036211": 535, "64236448": 535, "09541846": 535, "15297572": 535, "00362644": 535, "44412786": 535, "39568399": 535, "003586": 535, "vb": 535, "sub_sampl": 535, "doc_topic_distr": [535, 1038], "052": 536, "fresh_restart": 537, "fresh_restarts_max_it": 537, "_w": [537, 539, 546], "_ratio": [537, 539, 546], "_h": [537, 539, 546], "fresh": [537, 1009, 1041], "reconstruction_err_": [537, 539], "andrzej": [537, 539, 546], "anh": [537, 539, 546], "ieic": [537, 539, 546], "708": [537, 539, 546, 748], "721": [537, 539, 546], "waspa": 537, "ridge_alpha": [538, 542, 1038], "500x500": 540, "lu": [540, 543, 936, 937, 1037, 1038, 1039, 1040, 1047], "n_samples_": 540, "royal": [540, 626, 876, 888, 1002], "methodologi": [540, 873, 978, 988, 1013], "622": 540, "9924": 540, "30061": 540, "54980": 540, "00755": 540, "99244": 540, "ascontiguousarrai": 540, "sparse_encod": [541, 649, 650, 651, 652, 653, 654, 655, 662, 663, 664, 681, 682, 683, 684, 685, 1031, 1038, 1039, 1041, 1045], "u_init": 542, "v_init": 542, "9666": 542, "oversampl": [543, 1031], "indeterminaci": 543, "x_dens": 543, "0157": 543, "0512": 543, "0499": 543, "0479": 543, "0453": 543, "2102": 543, "2410": 543, "5981": 543, "5420": 543, "4486": 543, "3288": 543, "method_max_it": [544, 545, 1041], "dict_learning_onlin": [544, 1032, 1041, 1044, 1045, 1048], "return_cod": 545, "update_h": 546, "_n_compon": 546, "hal": [546, 657, 756, 757, 986], "copy_cov": 547, "orthogonal_mp": [547, 663, 664, 685, 984], "sum_k": [548, 1004], "prior_k": 548, "c_k": 548, "priors_": [548, 549], "scalings_": [548, 549], "xbar_": 548, "reg_param": 549, "scaling_": 549, "colinear": 549, "rotations_": 549, "n_classes_": [550, 552, 554, 556, 558, 563, 609, 828, 829, 908, 910, 1032, 1041, 1043], "class_prior_": [550, 838], "n_outputs_": [550, 551, 556, 557, 563, 564, 565, 857, 858, 908, 909, 910, 911], "constant_": 551, "dummy_regr": 551, "base_estimator_": [552, 553, 554, 555, 556, 557, 562, 563, 564, 565, 609, 897, 1046], "dok": [552, 553, 867, 1044], "staged_decision_funct": [552, 558, 560], "staged_scor": [552, 553], "7972": 553, "9771": 553, "estimators_samples_": [554, 555, 556, 557, 562, 563, 564, 565, 1037, 1039, 1042, 1048], "estimators_features_": [554, 555, 562], "oob_decision_function_": [554, 556, 563], "oob_prediction_": [555, 557, 564], "8720": [555, 1039], "min_weight_fraction_leaf": [556, 557, 558, 559, 563, 564, 565, 908, 909, 910, 911, 1004, 1034, 1037, 1038], "min_impurity_decreas": [556, 557, 558, 559, 563, 564, 565, 908, 909, 910, 911, 1004, 1038], "shannon": [556, 563, 908, 910, 985, 1004], "unlimit": [556, 557, 558, 559, 563, 564, 565, 908, 909, 910, 911], "n_t": [556, 557, 558, 559, 563, 564, 565, 908, 909, 910, 911], "n_t_r": [556, 557, 558, 559, 563, 564, 565, 908, 909, 910, 911], "right_impur": [556, 557, 558, 559, 563, 564, 565, 908, 909, 910, 911], "n_t_l": [556, 557, 558, 559, 563, 564, 565, 908, 909, 910, 911], "left_impur": [556, 557, 558, 559, 563, 564, 565, 908, 909, 910, 911], "balanced_subsampl": [556, 563, 1039], "subtre": [556, 557, 558, 559, 563, 564, 908, 909, 910, 911, 1004], "extratreeclassifi": [556, 565, 911, 989, 1035, 1040, 1041, 1042, 1044, 1045, 1046, 1048], "unprun": [556, 557, 563, 564, 908, 909, 910, 911], "x_leav": [556, 557, 558, 559, 563, 564, 565, 908, 909, 910, 911], "n_nodes_ptr": [556, 557, 563, 564, 565], "friedman_ms": [557, 558, 559, 564, 909, 911, 1004, 1047, 1048], "extratreeregressor": [557, 562, 565, 910, 994, 1040, 1041, 1042, 1044, 1045, 1046, 1048], "2727": 557, "dummyestim": [558, 559], "eras": [558, 559, 645, 651, 657, 659, 661, 665, 666, 667, 675, 676, 677, 857, 858], "n_trees_per_iteration_": [558, 559, 560, 561], "oob_scores_": [558, 559, 1047], "init_": [558, 559], "max_features_": [558, 559, 596, 908, 909, 910, 911, 1045], "_fit_stag": [558, 559], "crossentropi": 560, "deepest": [560, 561, 1042], "no_interact": [560, 561, 1046], "do_early_stopping_": [560, 561], "validation_score_": [560, 561], "is_categorical_": [560, 561], "n_trees_per_iter": 560, "max_samples_": 562, "fei": [562, 994], "ting": [562, 994, 1039, 1040], "ming": [562, 994, 1035, 1039, 1040, 1041, 1045], "zhou": [562, 638, 896, 994, 1039, 1047], "zhi": [562, 994], "hua": [562, 994], "icdm": [562, 994], "eighth": [562, 994], "tkdd": 562, "n_left": 562, "32987858": 564, "n_out": 565, "one_hot_encoder_": 565, "moosmann": 565, "trigg": 565, "juri": 565, "random_tre": 565, "x_sparse_embed": 565, "randomtreesembedding_": 565, "final_estimator_": [566, 567], "named_estimators_": [566, 567, 568, 569, 1039, 1041], "named_estim": [566, 567, 568, 569], "parameter_nam": [566, 567, 568, 569], "new_valu": [566, 567, 568, 569], "linearsvr": [567, 906, 1003, 1035, 1037, 1042, 1047], "flatten_transform": [568, 1038], "le_": 568, "eclf1": 568, "array_equ": [568, 1038], "eclf2": 568, "eclf3": 568, "maj": 568, "probabilities_or_label": 568, "n_regressor": 569, "r1": 569, "r3": 569, "er": 569, "with_traceback": [570, 571, 572, 573, 574, 575, 576, 577], "__traceback__": [570, 571, 572, 573, 574, 575, 576, 577], "current_sklearn_vers": 575, "repr": [576, 1042, 1043, 1045], "linter": 578, "flake8": 578, "spam": [580, 708, 739, 835, 988, 990, 1013], "feature_names_": 580, "xa": 580, "dict_typ": 580, "1048576": [581, 588], "non_neg": [581, 1038], "eleph": 581, "bird": [581, 717, 752, 988], "patch_height": [582, 583, 586], "patch_width": [582, 583, 586], "img_height": 582, "img_width": 582, "pe": 582, "pe_tran": 582, "263758": 582, "image_height": [582, 583, 586], "image_width": [582, 583, 586], "n_channel": [582, 583, 586], "n_patch": [582, 583, 586], "272214": 583, "230": 583, "243": 583, "n_z": 584, "return_a": [584, 585, 954, 1034], "_coo": [584, 585], "image_s": 586, "strip_acc": [587, 588, 590], "nfkd": [587, 588, 590, 1041], "unicodedata": [587, 588, 590], "regexp": [587, 588, 590], "min_n": [587, 588, 590, 1031], "max_n": [587, 588, 590, 1031], "fixed_vocabulary_": [587, 590], "stop_words_": [587, 590], "delattr": [587, 590, 1043], "vectorizer2": 587, "raw_docu": [587, 590], "get_stop_word": [587, 588, 590], "x_inv": [587, 590], "con": 588, "yates2011": 589, "baeza": [589, 728, 1034], "yate": [589, 728], "ribeiro": [589, 728, 1044], "neto": [589, 728], "addison": [589, 728], "weslei": [589, 728], "mrs2008": 589, "118": 589, "tfid": 589, "22314355": 589, "51082562": 589, "91629073": 589, "_check_stop_list": 590, "pvalu": [591, 594, 595, 597, 598, 599, 825], "k_best": [591, 897, 1001], "fdr": 591, "fwe": 591, "iff": [591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 871], "retent": [591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602], "n_selected_featur": [591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602], "n_original_featur": [591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602], "attrgett": [592, 596], "barnhil": [592, 593], "vapnik": [592, 593], "389": [592, 593, 1024], "422": [592, 593, 724, 754, 988], "n_subsets_of_featur": 593, "narrai": 593, "benjamini": [594, 1037, 1038], "hochberg": [594, 1037, 1038], "false_discovery_r": 594, "norm_ord": [596, 1038], "threshold_": [596, 1038], "3252": 596, "8345": 596, "4976": 596, "55249": 596, "half_cal": 596, "half_selector": 596, "partial_fit_param": [596, 828, 829, 832, 833], "unspecifi": [598, 599, 799, 985], "_get_support_mask": 600, "n_features_to_select_": 601, "variances_": 602, "weed": 603, "p_valu": [603, 604, 605], "f_statist": [604, 605], "force_finit": [605, 608, 726, 783, 988, 1045], "pearson": [605, 608, 1044], "discrete_featur": [606, 607], "nat": [606, 607, 703, 753, 755, 1045], "essenc": [606, 607, 741, 985, 988], "kraskov": [606, 607], "stogbauer": [606, 607], "grassberg": [606, 607], "phy": [606, 607], "kozachenko": [606, 607], "leonenko": [606, 607], "probl": [606, 607], "peredachi": [606, 607], "correlation_coeffici": 608, "fmin_l_bfgs_b": [609, 610], "max_iter_predict": 609, "copy_x_train": [609, 610], "one_vs_rest": [609, 989], "compoundkernel": [609, 1045], "obj_func": [609, 610], "initial_theta": [609, 610], "theta_opt": [609, 610], "func_min": [609, 610], "_posterior_mod": 609, "log_marginal_likelihood_value_": [609, 610], "9866": [609, 618, 621], "83548752": 609, "03228706": 609, "13222543": 609, "79064206": 609, "06525643": 609, "14410151": 609, "clone_kernel": [609, 610, 1041], "n_kernel_param": [609, 610], "log_likelihood_gradi": [609, 610], "x_train_": 610, "y_train_": 610, "3680": [610, 613, 624], "592": [610, 613, 624, 995], "y_cov": 610, "n_samples_x": [610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 756, 757, 758, 759, 761, 762, 764, 765, 766, 767, 772, 773, 774, 775, 776, 777, 778, 779], "requires_vector_input": [611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624], "51292546": 611, "09861229": [611, 998], "n_samples_i": [611, 612, 613, 614, 615, 618, 619, 620, 621, 622, 623, 624, 756, 757, 758, 759, 761, 762, 764, 765, 766, 767, 772, 773, 774, 775, 776, 777, 778, 779], "n_kernel": 611, "k_gradient": [611, 612, 613, 614, 615, 618, 619, 620, 621, 622, 623, 624], "k_diag": [611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624], "hyperparameter_constant_valu": 612, "3696": 612, "hyperparameter_sigma_0": 613, "edward": [613, 618, 621, 1034, 1039, 1040, 1041, 1042, 1046], "hyperparameter_length_scal": [614, 618, 621, 622], "hyperparameter_period": 614, "0144": 614, "457": 614, "3894": 614, "3467": 614, "419": 615, "559": 615, "namedtupl": [616, 946, 1047], "maxsiz": 616, "mat\u00e9rn": 618, "appr": 618, "8513": 618, "0368": 618, "1117": 618, "8086": [618, 1038], "1220": 618, "gamma_bound": 619, "pairwise_kernels_kwarg": 619, "additive_chi2": [619, 637, 763, 772], "pairwise_kernel_funct": [619, 642, 772], "hyperparameter_gamma": 619, "9733": [619, 622], "8880": 619, "05663": 619, "05532": 619, "8676": [619, 1038], "07073": 619, "06165": 619, "__mul__": 620, "8354": [621, 1038], "03228": 621, "1322": 621, "7906": [621, 648], "0652": 621, "1441": 621, "hyperparameter_alpha": 622, "8881": 622, "0566": 622, "05518": 622, "8678": 622, "0707": 622, "0614": 622, "hyperparameter_noise_level": 624, "initial_strategi": 626, "imputation_ord": [626, 1041], "skip_complet": 626, "max_valu": [626, 1042, 1043], "keep_empty_featur": [626, 627, 629, 978, 1046], "nullabl": [626, 627, 628, 629, 1042, 1046], "na": [626, 627, 628, 629, 767, 776, 918, 920, 921, 1041, 1042, 1045, 1046, 1047], "known_val": 626, "Nearness": 626, "arab": 626, "broadcast": 626, "missingind": [626, 627, 629, 978, 1039, 1040, 1041, 1045, 1047], "initial_imputer_": 626, "imputation_sequence_": 626, "feat_idx": 626, "neighbor_feat_idx": 626, "n_features_with_missing_": 626, "indicator_": [626, 627, 629], "knp": 626, "stef": [626, 978], "buuren": [626, 978], "karin": [626, 978], "groothui": [626, 978], "oudshoorn": [626, 978], "buck": 626, "1960": [626, 715], "306": 626, "imp_mean": [626, 629], "9584": [626, 1038], "nan_euclidean": [627, 760, 776], "_pairwise_cal": 627, "kwd": [627, 769, 772, 776, 779, 790, 791], "olga": [627, 978], "troyanskaya": [627, 978], "cantor": [627, 978], "gavin": [627, 978], "sherlock": [627, 978], "pat": [627, 978], "botstein": [627, 978], "russ": [627, 978], "altman": [627, 978], "bioinformat": [627, 978], "520": [627, 849, 978, 991], "n_output_featur": 627, "error_on_new": 628, "features_": [628, 978], "n_missing_featur": 628, "x2_tr": 628, "n_features_with_miss": 628, "statistics_": 629, "n_features_missing_ind": 629, "x_imput": 629, "n_features_out": 629, "surface_": 630, "quadcontourset": 630, "quadmesh": 630, "feature_1": [630, 913], "feature_2": 630, "nicer": 630, "pd_result": 631, "target_idx": 631, "decil": [631, 1042], "is_categor": 631, "pdp": [631, 995, 1045], "nonexist": 631, "deciles_vlines_": 631, "vlines_": 631, "deciles_hlines_": 631, "bars_": 631, "heatmaps_": 631, "pdp_lim": 631, "ice_lines_kw": 631, "pd_line_kw": 631, "contour_kw": 631, "disp1": 631, "disp2": 631, "pdp_line_kw": 631, "bar_kw": 631, "heatmap_kw": 631, "seq": 632, "n_values_feature_j": 632, "bre": [633, 1004], "4666": 633, "2211": 633, "x_min_": 634, "x_max_": 634, "n_threshold": [634, 725, 780, 787], "stepwis": [634, 653, 654, 655, 681, 682, 984], "increasing_": 634, "isotonic_regress": [634, 1044], "secondari": [634, 1035], "leeuw": 634, "1977": 634, "nilotp": [634, 636], "chakravarti": [634, 636], "308": 634, "pava": 634, "hornik": 634, "mair": 634, "kruskal": [634, 689, 693, 985], "psychometrica": 634, "iso_reg": 634, "8628": 634, "7256": 634, "isotonicregression0": 634, "increasing_bool": 635, "fisher_transform": 635, "sample_step": 637, "sample_interv": 637, "sample_interval_": [637, 1047], "skewedchi2sampl": [637, 638, 639, 640, 980, 1038, 1045, 1046], "chi2_kernel": [637, 641, 756, 763, 986, 1032], "additive_chi2_kernel": [637, 757, 763, 980], "vedaldi": [637, 980], "zisserman": [637, 980, 988], "chi2sampl": 637, "9499": 637, "component_indices_": [638, 1044], "normalization_": [638, 980], "additivechi2sampl": [638, 639, 640, 641, 756, 757, 980, 1045, 1047], "kernel_metr": [638, 639, 640, 641], "seeger": [638, 980], "mahdavi": 638, "jin": [638, 1042, 1043], "data_transform": 638, "9987": 638, "fft": 639, "indexhash": 639, "bithash": 639, "indexhash_": 639, "bithash_": 639, "kitchen": [640, 980], "sink": [640, 980], "random_offset_": [640, 641], "random_weights_": [640, 641], "rahimi": [640, 980], "benjamin": [640, 1033, 1034, 1042, 1043, 1044, 1045, 1046, 1047], "recht": [640, 980], "berkelei": [640, 908, 909], "brecht": 640, "rah": 640, "rbf_featur": [640, 980], "skewed": [641, 1038], "secant": 641, "fuxin": 641, "catalin": 641, "ionescu": [641, 980, 1041], "cristian": 641, "sminchisescu": [641, 980], "chi2_featur": 641, "2c": [642, 651, 671, 672, 673, 674, 686, 980], "493": [642, 900, 981], "alpha_1": [643, 644, 984], "alpha_2": [643, 644, 984], "lambda_1": [643, 644, 984], "lambda_2": [643, 644, 984], "threshold_lambda": 643, "x_offset_": [643, 644, 1043], "x_scale_": [643, 644, 1043], "mackai": [643, 644, 984], "ashra": 643, "salakhutdinov": [643, 849, 991], "utstat": 643, "rsalakhu": 643, "sta4273": 643, "lecture2": 643, "computed_scor": 644, "appendix": [644, 675, 984, 998], "wipf": [644, 984], "nagarajan": [644, 984], "2_2": [645, 646, 651, 652, 653, 654, 655, 659, 660, 661, 662, 671, 680, 681, 682, 683], "glmnet": [645, 646, 1031], "sparse_coef_": [645, 651, 659, 661, 1031], "dual_gap_": [645, 646, 651, 652, 659, 660, 661, 662, 1044], "max_j": [645, 651], "w_j": [645, 651, 988, 1002], "ext": 645, "83816048": 645, "55968825": 645, "451": 645, "coef_init": [645, 646, 651, 652, 659, 660, 661, 662, 665, 666, 667, 675, 676, 677, 680, 683], "mono": [645, 646, 651, 652, 659, 660, 661, 662, 680, 683], "_21": [645, 646, 651, 652, 659, 660, 661, 662, 680, 683], "sum_j": [645, 646, 651, 652, 659, 660, 661, 662, 680, 683, 984, 988, 993], "alpha_min": [645, 646, 649, 651, 652, 653, 655, 659, 660, 661, 662, 680, 681, 682, 683], "alpha_max": [645, 646, 651, 652, 659, 660, 661, 662, 680, 683], "ndim": [645, 646, 651, 652, 659, 660, 661, 662, 680, 683, 920, 921], "multitaskelasticnet": [645, 646, 651, 660, 661, 662, 680, 984, 1031, 1038, 1039, 1042, 1044], "l1_ratio_": [646, 658, 660], "n_l1_ratio": [646, 658, 660, 1034], "199": [646, 789, 1003], "unpen": [647, 668, 679, 984], "raphson": [647, 668, 679], "g_j": [647, 668, 679], "896": 647, "795": 647, "pg_i": 648, "scale_": [648, 869, 870, 878, 880, 890, 998, 1036], "outliers_": 648, "elvezio": [648, 984], "ronchetti": [648, 984], "concomit": [648, 984], "owen": [648, 1040, 1041], "statweb": [648, 681, 682], "hhu": [648, 1040], "284": 648, "7200": 648, "4923": 648, "1698": 648, "0106": 648, "9221": 648, "0226": 648, "fit_path": [649, 653, 654, 655, 681, 682], "coef_path_": [649, 650, 653, 654, 984], "active_": [649, 650, 653, 654], "1111": [649, 655], "max_n_alpha": [650, 654], "n_cv_alpha": [650, 654], "cv_alpha": [650, 654], "lassolar": [650, 651, 652, 654, 655, 662, 663, 664, 681, 682, 683, 984, 1022, 1031, 1032, 1034, 1038, 1041, 1042, 1044], "9996": 650, "2961": 650, "3996": 650, "2_f": 651, "_11": 651, "4951": 652, "2_fro": [652, 661, 662, 683], "coef_path": [652, 662, 683], "46874778": [652, 662, 683], "2159048": [652, 662, 683], "4425765": [652, 662, 683], "23689075": [652, 662, 683], "coef_path_lar": [652, 662, 683], "coef_path_continu": [652, 662, 683], "interp1d": [652, 662, 683], "46915237": [652, 662, 683], "23668876": [652, 662, 683], "congruenc": [653, 654, 655, 681, 682], "fragil": 654, "3972": 654, "rank_": 656, "singular_": 656, "maxent": [657, 658, 984], "primal": [657, 658, 676, 900, 901, 1002, 1003], "synthetic_feature_weight": [657, 658], "ciyou": 657, "byrd": 657, "jorg": [657, 1034, 1043, 1045], "noced": 657, "lui": [657, 1032, 1034, 1035, 1039], "iem": 657, "lbfgsb": 657, "schmidt": [657, 984, 1034], "le": [657, 868, 979, 984, 991, 999, 1001, 1039, 1043, 1044], "roux": [657, 984, 1001], "00860051": 657, "defazio": [657, 984], "lacost": [657, 984], "hsiang": [657, 1035], "fu": [657, 1035], "fang": [657, 1038, 1039], "lan": [657, 1046, 1047], "chih": [657, 1036], "jen": [657, 1039], "maxent_du": 657, "cs_": 658, "l1_ratios_": 658, "coefs_paths_": [658, 1041], "coefs_path": 658, "n_l1_ratios_": 658, "score_param": [658, 1048], "w_ij": 659, "eps_": [659, 661], "45663524": 659, "45612256": 659, "0872422": 659, "fro_2": [660, 662], "52875032": 660, "46958558": 660, "00166409": 660, "60809415": 661, "94592424": 661, "41888636": 661, "87382323": 661, "9994": 662, "5713": 662, "153": 662, "7971": 662, "9015": [662, 1039], "n_nonzero_coefs_": [663, 664], "orthogonal_mp_gram": [663, 664, 684, 1045], "mallat": [663, 684, 685, 984], "3397": [663, 684, 685], "3415": [663, 684, 685], "papier": [663, 684, 685], "mallatpursuit93": [663, 684, 685], "rubinstein": [663, 684, 685], "zibulevski": [663, 684, 685], "elad": [663, 684, 685], "technion": [663, 684, 685, 984], "ronrubin": [663, 684, 685, 984], "ksvd": [663, 684, 685, 984], "9991": [663, 664, 1039], "3854": [663, 664], "previous_loss": [665, 666, 667, 676], "pa": [665, 666, 897, 984, 988, 1001], "preset": [665, 667, 675, 992], "t_": [665, 666, 667, 675, 676, 677, 857, 858, 1002], "loss_function_": [665, 667, 675, 676], "volume7": [665, 666], "crammer06a": [665, 666], "crammer": [665, 666, 733, 984, 988, 1003], "dekel": [665, 666, 984], "keshat": [665, 666, 984], "shalev": [665, 666, 984, 1002], "shwartz": [665, 666, 984, 1002], "26642044": 665, "45070924": 665, "67251877": 665, "64185414": 665, "84127814": 665, "intercept_init": [665, 666, 667, 675, 677], "y_all": [665, 667, 675, 828, 829, 857], "epsilon_insensit": [666, 675, 677, 901, 984, 1002], "squared_epsilon_insensit": [666, 675, 677, 901, 984, 1037], "48736655": 666, "18818427": 666, "59122734": 666, "94731329": 666, "02306214": 666, "eta0": [667, 675, 676, 677, 1002], "lossfunct": [667, 675, 676, 1040], "therein": 667, "939": [667, 1019], "990": [668, 988], "088": [668, 996], "676": 668, "solver_opt": 669, "ipm": 669, "linprog": [669, 984], "is_data_valid": [670, 984], "is_model_valid": [670, 984], "max_trial": [670, 984], "max_skip": 670, "stop_n_inli": [670, 984], "stop_scor": [670, 984], "stop_prob": 670, "mad": [670, 1037], "costlier": 670, "n_trials_": 670, "n_skips_no_inliers_": 670, "n_skips_invalid_data_": 670, "n_skips_invalid_model_": 670, "sri": [670, 984, 1038, 1039], "bmva": 670, "bmvc": [670, 984], "paper355": 670, "9885": 670, "9417": 670, "15000": [671, 686, 857, 858], "btol": [671, 673], "gcv_mode": [672, 1033], "store_cv_valu": [672, 674, 1039, 1042], "alpha_per_target": [672, 1043], "cv_values_": [672, 674], "5166": 672, "gcv": [672, 674], "9595": 673, "9630": 674, "power_t": [675, 676, 677, 857, 858, 1002], "best_loss": [675, 677], "leon": [675, 676, 677, 1031], "bottou": [675, 676, 677, 992, 1002], "pow": [675, 676, 677, 857, 858], "dl": 675, "775047": 675, "775151": 675, "justif": 675, "volume2": 675, "zhang02c": 675, "offset_init": 676, "unshifft": 676, "n_subsampl": [678, 926], "breakdown_": 678, "n_subpopulation_": 678, "xin": [678, 984, 1039], "dang": [678, 984], "hanxiang": [678, 984], "peng": [678, 984, 1037, 1038, 1039, 1041, 1043], "xueqin": [678, 984], "hepe": [678, 984], "olemiss": 678, "xdang": 678, "mtse": 678, "9884": 678, "5871": 678, "coeff": 679, "839": 679, "599": 679, "copy_gram": [681, 682, 685], "return_path": [681, 682, 684, 685], "lars_path_gram": [681, 984, 1040], "tib": [681, 682], "xgamma": 684, "norms_squar": 685, "copy_xi": 685, "return_intercept": [686, 1040], "linearoper": 686, "_preprocess_data": 686, "path_method": [687, 985], "neighbors_algorithm": [687, 688], "arnoldi": [687, 688, 692], "fw": 687, "warshal": [687, 985], "kernel_pca_": 687, "nbrs_": [687, 688], "dist_matrix_": 687, "tenenbaum": [687, 985], "reconstruction_error": 687, "frobenius_norm": 687, "d_fit": 687, "x_fit": 687, "n_queri": [687, 842, 843, 844, 846, 848, 850, 851, 852], "hessian_tol": [688, 692], "modified_tol": [688, 692], "reconstruction_error_": 688, "rowei": [688, 692, 849, 985, 991], "saul": [688, 692, 985, 1038, 1039, 1041], "2323": [688, 692, 985], "donoho": [688, 692, 985], "grime": [688, 692, 985], "natl": [688, 692, 985], "acad": [688, 692, 985], "5591": [688, 692, 985], "mlle": [688, 692, 985], "zha": [688, 692, 985], "shanghai": [688, 692, 985], "univ": [688, 692, 985], "406": [688, 692, 985], "immers": [689, 693], "nonmetr": [689, 693, 985], "smacof": [689, 1046], "stress": [689, 693, 985, 1046], "stress_": 689, "dispar": [689, 693, 985], "dissimilarity_matrix_": 689, "psychometrika": [689, 693, 985], "1964": [689, 693, 876, 888, 985], "borg": [689, 693, 985], "groenen": [689, 693, 985], "affinity_matrix": 690, "n_neighbors_": [690, 846], "early_exagger": 691, "min_grad_norm": [691, 1037], "der": [691, 695, 985, 1034, 1035, 1039], "maaten": [691, 695, 985], "bhtsne": [691, 1038], "opentsn": 691, "abort": 691, "pdist": [691, 776, 779], "pairwise_distance_funct": [691, 695, 776, 779, 991], "barn": [691, 985, 1036, 1038, 1041], "hut": [691, 985, 1036, 1038, 1041], "nlogn": 691, "kl_divergence_": [691, 1038], "learning_rate_": [691, 858], "hinton": [691, 849, 856, 857, 858, 985, 991, 992, 993], "2579": 691, "2605": 691, "lvdmaaten": [691, 1038], "oct": [691, 767, 985, 991], "3221": [691, 985], "3245": [691, 985], "jmlr_2014": 691, "belkina": [691, 985], "ciccolella": [691, 985], "anno": [691, 985], "halpert": [691, 985], "spidlen": [691, 985], "snyder": [691, 985], "cappion": [691, 985], "kobak": [691, 1044], "beren": 691, "transcriptom": 691, "guttman": 693, "norm_laplacian": 694, "drop_first": 694, "nk": 695, "2n": [695, 980, 992], "3k": 695, "cosine_dist": [695, 760, 991, 1037], "jarkko": 695, "venna": 695, "samuel": [695, 1013, 1034, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048], "kaski": 695, "icann": 695, "verlag": 695, "491": 695, "twelfth": 695, "pmlr": 695, "384": [695, 901], "391": 695, "im_": 696, "axesimag": 696, "text_": 696, "include_valu": 696, "values_format": [696, 1041], "im_kw": [696, 1045], "text_kw": [696, 1046], "get_metr": 698, "euclideandist": 698, "manhattandist": 698, "chebyshevdist": 698, "minkowskidist": [698, 1044], "seuclideandist": 698, "mahalanobisdist": 698, "haversinedist": 698, "arcsin": [698, 762], "hammingdist": 698, "n_unequ": 698, "n_tot": 698, "canberradist": 698, "braycurtisdist": 698, "abbrevi": 698, "ntt": 698, "ntf": 698, "nft": 698, "nff": 698, "nneq": 698, "jaccarddist": 698, "matchingdist": 698, "dicedist": 698, "kulsinskidist": [698, 1047], "rogerstanimotodist": 698, "russellraodist": 698, "sokalmichenerdist": 698, "sokalsneathdist": 698, "pyfunc": [698, 991], "pyfuncdist": 698, "metric_obj": 698, "chance_level_": [699, 701, 1047], "drop_intermedi": [699, 701, 780, 787, 1047], "errors_lines_": 700, "with_error": 700, "scatter_": 700, "balanced_accuracy_scor": [702, 785, 988, 1039], "imperfectli": [702, 732, 988], "label_tru": [703, 716, 735, 753, 755, 793], "upperlimit": 703, "expected_ri": 704, "discord": 704, "hubert1985": 704, "1007": 704, "2fbf01908075": 704, "steinley2004": 704, "wk": 704, "rand_index": 704, "adjusted_rand_index": 704, "chacon": 704, "chac\u00f3n": 704, "rastrojo": 704, "balanced_accuraci": [707, 988, 1039], "brodersen": 707, "ong": 707, "stephan": [707, 1034, 1040, 1041, 1043], "buhmann": 707, "20th": 707, "3121": 707, "kelleh": [707, 988], "aoif": [707, 988], "arci": [707, 988], "y_true_categor": [708, 988], "037": 708, "calinski": [709, 1037], "harabasz": 709, "allow_non": 710, "thrown": [710, 1040, 1041], "tn": [711, 717, 988], "negative_class": 711, "zebra": 711, "output_dict": [712, 1039, 1043], "precision_recall_fscore_support": [712, 727, 728, 782, 785, 988, 1035, 1039, 1041, 1047], "multilabel_confusion_matrix": [712, 727, 728, 736, 782, 785, 988, 1040], "conting": [713, 714, 729, 753, 1037], "n_classes_tru": [713, 753], "n_classes_pr": [713, 753], "cohen": [715, 1039], "p_o": 715, "p_e": 715, "artstein": 715, "poesio": 715, "linguist": [715, 897, 1001], "596": 715, "label_pr": [716, 734, 735, 753, 755, 793], "ant": [717, 752, 988], "a_row": 718, "a_column": 718, "b_row": 718, "b_column": 718, "tsoumaka": [719, 732, 738, 988], "kataki": [719, 732, 738, 988], "vlahava": [719, 738, 988], "handbook": [719, 738, 988], "685": [719, 738, 988], "raw_valu": [720, 721, 726, 743, 744, 746, 748, 749, 751, 783, 788, 789, 988, 1039, 1042], "wainwright": [720, 721, 722], "su": [720, 721, 722], "statlearnspars": [720, 721, 722], "764": [720, 988], "691": 720, "8125": 720, "57142857": 720, "d2": 721, "d2_absolute_error_scor": [721, 988, 1045], "koenker": [721, 984], "roger": [721, 1038, 1039, 1043], "jos\u00e9": [721, 1034, 1044], "630": 722, "bouldin": 723, "farther": 723, "log_bas": 724, "ignore_ti": [724, 754], "ndcg": [724, 754, 988, 1038], "ndcg_score": [724, 988, 1038, 1041, 1046, 1047], "sharper": 724, "discounted_cumulative_gain": 724, "dcg": [724, 754, 988, 1038], "jarvelin": [724, 754, 988], "kekalainen": [724, 754, 988], "colt": [724, 754, 988], "mcsherri": [724, 754, 988], "najork": [724, 754, 988], "european": [724, 754, 988], "421": [724, 754, 988], "groud": [724, 754], "true_relev": [724, 754], "imperfect": [726, 783, 988, 1033], "variance_weight": [726, 783, 988], "983": 726, "n_unique_label": [727, 728, 736, 781, 782, 785, 952], "fbeta_scor": [727, 740, 781, 988, 1033, 1034, 1035, 1036, 1041, 1047], "y_true_empti": 727, "y_pred_empti": [727, 728], "66666667": [727, 780, 850, 998], "fowlk": [729, 1037], "mallow": [729, 1037], "get_scorer_nam": [730, 988, 1045], "forgiv": 732, "upperbound": 732, "grigorio": 732, "ioanni": 732, "wareh": 732, "septemb": [732, 988, 1031, 1034, 1037, 1039, 1044, 1047], "pred_decis": [733, 988, 1044], "disagre": [733, 995], "kobi": 733, "AND": 733, "denero": 733, "gluster": 734, "v_measur": [734, 793], "6666": [736, 988, 1037], "5833": [736, 988], "lrap": [737, 988], "209": [739, 876], "21616": 739, "needs_proba": [740, 1040, 1048], "needs_threshold": [740, 1048], "ftwo_scor": [740, 988], "mcc": [741, 988, 1045], "baldi": 741, "brunak": 741, "chauvin": 741, "andersen": [741, 1045], "nielsen": [741, 1039], "gorodkin": 741, "jurman": 741, "riccadonna": 741, "furlanello": 741, "cen": 741, "3273": 744, "5515": 744, "6198": 744, "112589990684262": 744, "0568": 745, "4260": [747, 750], "41666667": 748, "825": 748, "msle": [749, 988], "rmsle": [749, 988], "root_mean_squared_log_error": [749, 988, 1048], "00462428": 749, "08377444": 749, "samplewis": [752, 988], "mcm": [752, 988], "mcm_": 752, "multi_confus": 752, "normalized_discounted_cumulative_gain": 754, "dcg_score": [754, 988, 1038, 1041], "kernel_matrix": [756, 757, 764, 774], "marszalek": [756, 757, 986], "lazebnik": [756, 757, 986], "schmid": [756, 757, 986], "ouvert": [756, 757, 986], "00171412": [756, 757, 986], "dense_output": [759, 765, 893, 938, 1039], "linear_kernel": [759, 763, 986, 1039], "haversine_dist": [760, 1040], "y_norm_squar": 761, "x_norm_squar": [761, 1036, 1048], "paired_dist": [761, 767, 776, 1035], "41421356": [761, 767, 991], "lon": 762, "ezeiza": 762, "airport": 762, "bueno": 762, "argentina": 762, "gaull": 762, "bsa": 762, "83333": 762, "5166646": 762, "0083899664": 762, "53844117956": 762, "bsas_in_radian": 762, "paris_in_radian": 762, "6371000": 762, "kilomet": 762, "11099": 762, "54035582": 762, "polynomial_kernel": [763, 986], "rbf_kernel": [763, 986, 1035], "laplacian_kernel": [763, 986, 1036], "sigmoid_kernel": [763, 986], "sum_over_featur": [766, 1031, 1046], "componentwis": 766, "sq": 767, "dixon": [767, 1041, 1042], "cybernet": 767, "ieeexplor": 767, "4310090": 767, "filter_param": 772, "jth": [772, 776], "force_all_finit": [776, 918, 920, 921, 1042, 1045], "distance_metr": [776, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854], "metric_kwarg": [777, 778], "reduce_func": [779, 1042], "d_chunk": 779, "sought": 779, "neigh": [779, 842, 843, 844, 846, 848, 850, 851, 852], "gen": 779, "probas_pr": 780, "warn_for": 781, "shantanu": 781, "godbol": 781, "sunita": 781, "sarawagi": 781, "pig": 781, "max_fpr": [786, 988, 1039], "provost": [786, 988], "ceder": [786, 988], "stern": [786, 988], "fawcett": [786, 787, 988], "generalis": [786, 988, 1009], "612": 788, "822": 788, "n_samples_a": [790, 791], "favour": [790, 985, 987, 1040], "mean_prior": 795, "degrees_of_freedom_prior": 795, "verbose_interv": [795, 796], "wishart": 795, "emipr": 795, "precisions_": [795, 796], "precisions_cholesky_": [795, 796, 1045], "converged_": [795, 796], "lower_bound_": [795, 796, 1039], "weight_concentration_prior_": 795, "weight_concentration_": 795, "mean_precision_prior_": 795, "mean_precision_": 795, "mean_prior_": 795, "degrees_of_freedom_prior_": 795, "degrees_of_freedom_": 795, "covariance_prior_": 795, "hagai": 795, "attia": 795, "bgm": 795, "n_dimens": [795, 796], "log_prob": [795, 796], "weights_init": 796, "precisions_init": [796, 1045, 1047], "gm": 796, "pre_dispatch": [797, 803, 811, 819, 821, 822, 823, 824, 827, 954, 1034], "error_scor": [797, 800, 801, 803, 811, 819, 822, 823, 824, 827, 977, 1035, 1039, 1043, 1046], "explos": [797, 811, 821, 822, 823], "fitfailedwarn": [797, 800, 801, 803, 811, 819, 822, 823, 824, 827], "param_kernel": [797, 811], "param_degre": 797, "split0_test_scor": [797, 811, 1037], "rank_t": 797, "split1_test_scor": [797, 811], "split0_train_scor": [797, 811, 1037], "split1_train_scor": [797, 811], "mean_train_scor": [797, 811, 1037], "std_train_scor": [797, 811, 1037], "split0_test_precis": [797, 811], "mean_train_precis": [797, 811], "best_estim": [797, 800, 801, 811], "scorer_": [797, 800, 801, 811], "n_splits_": [797, 800, 801, 811], "refit_time_": [797, 800, 801, 811, 1039], "multimetric_": [797, 800, 801, 811], "parametergrid": [797, 1033, 1039], "split2_test_scor": 797, "num_sampl": [797, 811, 1046], "versionad": [797, 800, 801, 811], "stratif": [798, 799, 805, 806, 815, 816, 817, 959, 1040], "group_kfold": 798, "set_split_request": [798, 799, 804, 806, 815], "aggressive_elimin": [800, 801, 977], "r0": [800, 801], "replai": [800, 801], "n_remaining_candidates_": [800, 801], "n_candid": [800, 801, 977], "max_resources_": [800, 801], "min_resources_": [800, 801], "n_required_iterations_": [800, 801], "n_possible_iterations_": [800, 801], "exceed": [800, 801, 1037], "n_unique_tick": [803, 824], "n_tick": [803, 819, 824, 827], "neg_": [803, 819, 1037], "errorbar_": [803, 819], "errorbarcontain": [803, 819], "fill_between_": [803, 819], "polycollect": [803, 819], "exploit_incremental_learn": [803, 824], "log_scal": [803, 1047], "fill_between_kw": [803, 819], "errorbar_kw": [803, 819], "predispatch": [803, 819, 824, 827], "negat": [803, 819, 988], "combinator": 807, "lpo": 807, "param_list": 809, "rounded_list": 809, "89856": 809, "923223": 809, "878964": 809, "038159": 809, "parametersampl": [811, 1033, 1039, 1043], "2652124": 812, "rskf": 813, "36851234": 813, "sizeabl": [814, 817], "sad": [815, 816], "sss": 817, "logistic_regress": 819, "n_valu": [819, 827, 1039], "checked_cv": 820, "3315057": [822, 823], "08022103": [822, 823], "03531816": [822, 823], "test_r2": 823, "test_auc": 823, "train_r2": 823, "train_auc": 823, "3635": 823, "3573": 823, "6114": 823, "28009951": 823, "3908844": 823, "22784907": 823, "train_sizes_ab": 824, "train_size_ab": 824, "cv_train_scor": 824, "cv_test_scor": 824, "permutation_scor": 825, "pairwise_indices_": 828, "label_binarizer_": 829, "multilabel_": [829, 1036], "code_book_": 830, "bakiri": [830, 989], "pict": [830, 989], "order_": [831, 834], "jess": [831, 989, 1044], "pfahring": [831, 989], "geoff": [831, 989], "holm": [831, 989], "eib": [831, 989], "8387": 831, "9431": 831, "4576": 831, "8878": 831, "3684": 831, "2640": 831, "0321": 831, "9935": 831, "0626": 831, "y_decis": 831, "load_linnerud": [833, 1037, 1042], "force_alpha": [835, 836, 837, 839, 1046], "lidston": [835, 836, 837, 839, 990], "class_count_": [835, 836, 837, 838, 839], "class_log_prior_": [835, 836, 837, 839], "feature_count_": [835, 837, 839], "feature_log_prob_": [835, 836, 837, 839], "categoricalnb": [835, 837, 838, 839, 990, 1041, 1042, 1043, 1044, 1046], "renni": [835, 837, 990, 1039], "schuetz": [835, 839], "htmledit": [835, 839, 986], "mccallum": [835, 990], "nigam": [835, 990], "metsi": [835, 990], "androutsopoulo": [835, 990], "palioura": [835, 990], "cea": [835, 990], "predict_joint_log_proba": [835, 836, 837, 838, 839, 1046], "min_categori": [836, 1043], "category_count_": 836, "n_categories_": 836, "mirror": [837, 977], "mahout": 837, "weka": 837, "feature_all_": 837, "shih": [837, 990], "teevan": [837, 990], "karger": [837, 990], "616": [837, 990, 998], "623": [837, 990], "jrenni": 837, "icml03": 837, "var_smooth": [838, 1039], "stan": 838, "levequ": [838, 880], "cstr": 838, "epsilon_": 838, "theta_": [838, 990], "clf_pf": 838, "distancemetric64": [840, 841], "valid_metr": [840, 841, 991, 1047], "19662693": [840, 841], "29473397": [840, 841], "tree_copi": [840, 841], "query_radiu": [840, 841], "count_onli": [840, 841], "kernel_dens": [840, 841], "94114649": [840, 841], "83281226": [840, 841], "2071716": [840, 841], "two_point_correl": [840, 841], "580": [840, 841], "get_arrai": [840, 841], "get_n_cal": [840, 841], "n_call": [840, 841], "get_tree_stat": [840, 841], "tree_stat": [840, 841], "breadth_first": [840, 841, 845], "return_log": [840, 841], "k_true": [840, 841], "k_ret": [840, 841], "breadth": [840, 841, 845, 1013, 1033], "dualtre": [840, 841], "sort_result": [840, 841, 848, 850, 851, 852, 1043], "radii": [840, 841], "reset_n_cal": [840, 841], "effective_metric_": [842, 843, 844, 846, 848, 850, 851, 852, 991], "callbl": 842, "effective_metric_params_": [842, 843, 844, 846, 848, 850, 851, 852], "outputs_2d_": [842, 850, 1041], "nearest_neighbor_algorithm": [842, 850, 851], "333": 842, "n_index": [842, 843, 844, 846, 848, 850, 851], "neigh_dist": [842, 843, 844, 846, 848, 850, 851, 852], "neigh_ind": [842, 843, 844, 846, 848, 850, 851, 852], "nearest_neighbors_algorithm": [843, 848], "nearer": [844, 852, 991], "x_dist_graph": 844, "silverman": [845, 1046], "binarytre": [845, 1035, 1039, 1043], "bandwidth_": 845, "log_dens": 845, "52955942": 845, "51462041": 845, "60244657": 845, "logprob": 845, "negative_outlier_factor": 846, "9821": 846, "0370": 846, "3697": 846, "shifted_opposite_lof_scor": 846, "opposite_lof_scor": 846, "wminkowski": [847, 1043, 1045], "narasimhan": 847, "chu": [847, 1047], "shrunken": [847, 1031], "6567": 847, "6572": 847, "nbr": [848, 991], "neighborsclassifi": [848, 850, 851, 852, 1031], "n_features_a": 849, "n_features_b": 849, "goldberg": [849, 991], "neighbourhood": [849, 991], "513": [849, 991], "ncanip": 849, "neighbourhood_components_analysi": 849, "961904": 849, "outlier_label": [850, 1041], "outlier_label_": 850, "33333333": [850, 998], "x_cluster": 852, "warn_when_not_sort": 855, "efficiencywarn": [855, 1046], "sml": [856, 993], "pcd": [856, 993], "sweep": 856, "gibb": [856, 993, 1008], "intercept_hidden_": 856, "intercept_visible_": 856, "h_samples_": 856, "osindero": [856, 993], "teh": [856, 993], "1527": 856, "1554": 856, "absp": 856, "fastnc": 856, "tieleman": [856, 993], "v_new": 856, "pseudo_likelihood": 856, "relu": [857, 858], "beta_1": [857, 858], "beta_2": [857, 858], "max_fun": [857, 858, 1041], "n_layer": [857, 858], "neuron": [857, 858, 986, 992], "tan": [857, 858, 992, 1038], "rectifi": [857, 858], "kingma": [857, 858, 992], "diederik": [857, 858, 992, 1046], "jimmi": [857, 858, 992, 1037, 1039], "effective_learning_r": [857, 858], "best_loss_": [857, 858, 1046], "best_validation_score_": [857, 858, 1046], "validation_scores_": [857, 858, 1046], "intercepts_": [857, 858, 992], "n_layers_": [857, 858], "out_activation_": [857, 858], "geoffrei": [857, 858, 992, 1042, 1043, 1044, 1045, 1047], "connectionist": [857, 858], "glorot": [857, 858], "xavier": [857, 858, 1039, 1040, 1041, 1043, 1044], "yoshua": [857, 858, 1001], "feedforward": [857, 858], "kaim": [857, 858], "delv": [857, 858], "imagenet": [857, 858], "961": 857, "log_y_prob": 857, "named_transform": [859, 1046], "svd__n_compon": 859, "transform_list": 859, "s__p": 860, "n_transformed_featur": 860, "y_log_proba": 860, "analyst": 863, "x_tr": [863, 869, 872, 873, 874, 878, 880, 883, 885, 886, 890, 891], "accept_spars": [864, 920, 921, 1038, 1048], "inv_kw_arg": 864, "pickleabl": [864, 1037], "6931": 864, "3862": 864, "n_bins_": 865, "regener": 865, "xinv": 865, "tild": [866, 996, 998], "k_fit_rows_": 866, "k_fit_all_": 866, "1299": [866, 998], "1319": [866, 998], "n_samples1": 866, "n_samples2": 866, "k_new": 866, "neg_label": [867, 884], "y_type_": 867, "sparse_input_": 867, "lb": [867, 999], "tokyo": [868, 999], "amsterdam": [868, 999], "max_abs_": 869, "x_std": [870, 886, 998], "data_min_": [870, 1036], "data_max_": [870, 1036], "data_range_": [870, 1036], "unwieldi": 871, "fi": 871, "comedi": 871, "y_indic": 871, "yt": 871, "ands": 871, "feature_name_combin": [873, 1047], "categories_": [873, 874, 881, 998, 1039, 1046], "unregular": [873, 896, 1022, 1040], "intact": [873, 1024], "infrequ": [873, 874, 881, 988, 1031, 1045, 1046, 1047], "infrequent_if_exist": [873, 998], "x_6": 873, "x_7": 873, "drop_idx_": [873, 1042, 1046], "drop_idx": 873, "gender_femal": 873, "gender_mal": 873, "group_1": 873, "group_2": 873, "group_3": 873, "drop_enc": [873, 998], "drop_binary_enc": 873, "custom_combin": 873, "custom_fnames_enc": 873, "x0_str_femal": 873, "x0_str_male": 873, "x1_int_1": 873, "x1_int_2": 873, "x1_int_3": 873, "oh": [873, 1041], "infrequent_sklearn": [873, 998], "n_encoded_featur": [873, 874], "_csr": 873, "onward": [874, 1035], "bpo": 874, "43475": 874, "lenient": [874, 1009], "min_degre": [875, 1044], "max_degre": [875, 1044], "powers_": 875, "n_output_features_": 875, "nystrom": [875, 1040, 1041], "featurewis": 876, "power_transform": [876, 889, 1039], "biometrika": [876, 888], "954": [876, 888], "707": [876, 888], "ignore_implicit_zero": [877, 889], "landmark": [877, 889, 998], "n_quantiles_": 877, "quantiles_": [877, 998, 1041], "references_": 877, "with_cent": [878, 890], "with_scal": [878, 890], "unit_vari": [878, 890, 1043], "quartil": 878, "q_min": [878, 890], "q_max": [878, 890], "center_": 878, "robust_scal": [878, 889, 1039], "interquartile_rang": 878, "bspline": 879, "n_features_out_": 879, "with_std": [880, 891, 998, 1039], "n_samples_seen": 880, "5a": 880, "randal": [880, 1035, 1045], "mic": [881, 998], "target_mean_": [881, 998], "target_type_": 881, "f0_c0": 881, "f0_c1": 881, "f0_c2": 881, "f1_c0": 881, "f1_c1": 881, "f1_c2": 881, "micci": [881, 998], "barreca": [881, 998], "newsl": [881, 998], "enc_auto": 881, "enc_high_smooth": 881, "enc_low_smooth": 881, "type_of_target_": 881, "ahead": 884, "return_norm": [887, 1038], "compute_inverse_compon": [892, 893, 1000], "inverse_components_": [892, 893, 1000, 1045], "2759": [892, 893], "afor": [892, 893], "baserandomproject": [892, 893], "ping": [893, 1000, 1037, 1038], "density_": 893, "gaussianrandomproject": [893, 1000, 1032, 1045, 1047, 1048], "church": [893, 1000], "kdd06_rp": 893, "cgi": 893, "uoa": 893, "gr": 893, "opta": 893, "0182": 893, "e2": [894, 984], "93lindenstrauss_lemma": 894, "sanjoi": [894, 1000], "anupam": [894, 1000, 1046], "gupta": [894, 1000, 1038, 1039, 1042, 1043, 1044, 1045, 1047], "elementari": [894, 1000], "11841": [894, 1000], "1112658": [894, 1000], "7894": [894, 1000], "9868": [894, 1000], "steadi": [895, 896], "xiaojin": 895, "zoubin": 895, "ghahramani": 895, "cmu": 895, "cald": 895, "carnegi": 895, "mellon": 895, "jerryzhu": 895, "label_prop_model": [895, 896], "clamp": [896, 1001], "dengyong": 896, "bousquet": 896, "navin": 896, "lal": 896, "schoelkopf": 896, "termination_condition_": 897, "no_chang": 897, "all_label": 897, "33rd": [897, 1001], "acl": [897, 1001, 1002], "stroudsburg": [897, 1001], "196": [897, 1001], "crammer_sing": [900, 989, 1003, 1031], "seldom": 900, "w_x_1": [900, 901], "w_x_n": [900, 901], "w_intercept": [900, 901], "readonli": [900, 901, 1044, 1046, 1047], "raw_coef_": [900, 901], "smo": [900, 901], "1693": 900, "unsur": 901, "582": 901, "class_weight_": [902, 903, 904, 905, 906, 1046], "n_sv": [902, 903, 904, 905, 906, 1003, 1041], "fit_status_": [902, 903, 904, 905, 906], "n_support_": [902, 903, 904, 905, 906, 1003, 1041], "proba_": [902, 905, 1042], "probb_": [902, 905, 1042], "shape_fit_": [902, 903, 904, 905, 906], "n_dimensions_of_x": [902, 903, 904, 905, 906], "7798": 904, "0547": 904, "0556": 904, "0561": 904, "7332": 904, "unshift": 904, "impract": 905, "tube": [906, 1003], "_tree": [908, 909, 910, 911, 1032, 1034], "decision_tree_learn": [908, 909, 1004], "olshen": [908, 909, 1004], "wadsworth": [908, 909, 1004], "belmont": [908, 909, 1004], "cutler": [908, 909], "cc_home": [908, 909], "htm": [908, 909], "ccp_path": [908, 909, 910, 911], "get_depth": [908, 909, 910, 911, 1040], "get_n_leav": [908, 909, 910, 911, 1040], "set_predict_proba_request": [908, 910], "extra_tre": [910, 911], "8947": 910, "decision_tre": [912, 913, 914, 1004], "out_fil": [912, 1004], "leaves_parallel": 912, "special_charact": [912, 1004], "fontnam": [912, 1044], "helvetica": [912, 914], "graphviz": [912, 1004], "postscript": 912, "tpng": 912, "paint": [912, 914], "dot_data": [912, 1004], "digraph": 912, "show_weight": 913, "feature_0": 913, "unrepresent": 915, "keyerror": [915, 1041], "popitem": 915, "lifo": 915, "input_nam": [919, 921, 951, 1045], "accept_large_spars": [920, 921, 1039], "ensure_2d": [920, 921], "allow_nd": [920, 921], "ensure_min_sampl": [920, 921], "ensure_min_featur": [920, 921], "y_numer": 920, "bsr": [920, 921, 1044], "x_convert": 920, "y_convert": 920, "array_convert": 921, "min_val": 924, "max_val": 924, "include_boundari": [924, 1045], "y_org": 925, "class_weight_vect": 925, "king": 925, "zen": 925, "sample_weight_vect": 926, "parenthes": 927, "type_filt": 929, "generate_onli": [931, 1041], "checks_gener": 931, "test_check_estim": 932, "check_estimators_fit_returns_self": 932, "array_lik": 935, "logdet": 935, "slogdet": 935, "6375861597263857": 935, "flip_sign": 937, "svd_lapack_driv": 937, "gesdd": 937, "p5": 937, "transposit": 937, "gesvd": 937, "conquer": 937, "unitari": 937, "vh": 937, "dot_product": 938, "deweight": 939, "min_batch_s": 940, "n_pack": [940, 941], "path_length": 942, "sliceabl": 943, "methodmetadatarequest": 944, "routemappingpair": 945, "routing_info": 945, "from_str": [945, 946], "methodpair": 946, "_obj": 948, "_method": 948, "any_method": 948, "truthi": 949, "helloifeven": 949, "_x_is_even": 949, "say_hello": 949, "temp_fold": 954, "max_nbyt": 954, "1m": 954, "mmap_mod": 954, "dispatch_next": 954, "dispatch_one_batch": 954, "unprotect": 954, "prefetch": 954, "print_progress": 954, "inner_max_num_thread": 956, "backend_param": 956, "parallel_config": 956, "register_parallel_backend": [956, 1039], "dask": [956, 1009, 1039], "localclust": 956, "workload": [956, 1008], "register_rai": 956, "backend_nam": 956, "oversubscript": [956, 1045], "threadpool": 956, "effective_n_job": 956, "make_default": 958, "parallelbackendbas": 958, "resampled_arrai": 959, "3x2": [959, 962], "shuffled_arrai": 962, "last_mean": 963, "last_var": 963, "last_n": 963, "return_sum_weight": 969, "sum_weight": 969, "all_or_ani": [972, 1041], "is_fit": 972, "eg": 972, "substitut": [972, 1009, 1037], "raise_except": 974, "array_sym": 974, "is_paramet": 976, "enclos": 977, "set_stat": 977, "bergstra": [977, 1031, 1032], "tournament": 977, "dispos": [977, 1024], "n_resources_i": 977, "n_resources_0": 977, "n_candidates_i": 977, "n_candidates_0": 977, "r_0": 977, "n_resourc": 977, "983667": 977, "951958": 977, "947958": 977, "961009": 977, "955989": 977, "jamieson": 977, "talwalkar": 977, "desalvo": 977, "rostamizadeh": 977, "hyperband": 977, "bandit": 977, "multimetr": [977, 1041, 1046], "calibrated_forest": 977, "select__k": 977, "model__estimator__max_depth": 977, "imp": 978, "sophist": [978, 990], "14338": 978, "13286": 978, "15611": 978, "amelia": 978, "scientist": [978, 1013], "roderick": 978, "rubin": 978, "1986": [978, 1004], "ol2001": 978, "mask_missing_values_onli": 978, "mask_al": 978, "3_": 980, "2_": 980, "ws2001": 980, "unsampl": 980, "equiv": [980, 1003], "\u028c": 980, "elucid": 980, "frac12": 980, "rr2007": 980, "2x_iy_i": 980, "vz2010": 980, "vvz2010": 980, "prod_i": 980, "ls2010": 980, "c_0": [980, 986], "tensorsketch": 980, "pp2013": 980, "wikic": 980, "ccf2002": 980, "mercer": 980, "langl": [980, 988, 1002, 1003], "rangl": [980, 988, 1002, 1003], "y_j": [980, 988, 990, 998, 1003], "obviat": 980, "dagm": 980, "vempati": 980, "jawahar": 980, "charikar": 980, "farach": 980, "colton": 980, "m2012": 981, "mu_k": 982, "cst": 982, "omega_": 982, "k0": 982, "h_l": 982, "extrema": 982, "honei": 982, "stork": 982, "dilemma": 983, "valid_scor": 983, "w_0": 984, "w_p": 984, "34545455": 984, "13636": [984, 1040], "rifkin": 984, "lippert": 984, "2n_": 984, "softw": 984, "kim": [984, 1039, 1040, 1041, 1045], "koh": [984, 1013], "lustig": 984, "boyd": 984, "gorinevski": 984, "c_p": 984, "cherkasski": 984, "yunqian": 984, "1691": 984, "1714": 984, "ell_2": 984, "equiangular": 984, "weisberg": 984, "ell_0": [984, 988], "_coef": 984, "mp": 984, "ell_": 984, "posteriori": [984, 990], "radford": 984, "neal": [984, 1044], "50000013": 984, "49999993": 984, "lambda_i": [984, 998], "srikantan": 984, "tristan": 984, "fletcher": [984, 1031, 1035], "nomenclatur": [984, 1037], "deliber": 984, "overparameter": 984, "ldot": [984, 988, 990, 992, 1002], "w_l": 984, "min_w": 984, "iverson": 984, "hood": [984, 1003], "broyden": 984, "goldfarb": 984, "shanno": 984, "shortcom": 984, "aaron": [984, 1034, 1035, 1036, 1041], "simon": [984, 1013, 1034, 1035, 1044, 1045, 1046, 1047], "93fletcher": 984, "93goldfarb": 984, "93shanno_algorithm": 984, "noah": 984, "multirespons": 984, "statsmodel": [984, 1008], "edm": 984, "agricultur": 984, "rainfal": 984, "paid": 984, "fraud": [984, 1013], "cash": 984, "fraudul": [984, 1013], "interrupt": 984, "drug": 984, "cure": 984, "entertain": 984, "mccullagh": 984, "nelder": 984, "boca": 984, "raton": 984, "chapman": 984, "hall": [984, 1038, 1042], "crc": 984, "31760": 984, "j\u00f8rgensen": 984, "monografia": 984, "matem\u00e1tica": 984, "2463": 984, "4337": 984, "7638": 984, "disappear": [984, 1031], "photogrammetr": 984, "hypothes": 984, "paradigm": 984, "cartographi": 984, "fischler": 984, "boll": 984, "sunglok": 984, "choi": 984, "taemin": 984, "wonpil": 984, "binom": 984, "infeas": [984, 991, 993], "k\u00e4rkk\u00e4inen": 984, "\u00e4yr\u00e4m\u00f6": 984, "h_": 984, "oarc": 984, "dae": 984, "bassett": 984, "jr": 984, "econometrica": 984, "econometr": 984, "portnoi": [984, 1048], "hare": 984, "tortois": 984, "paraboloid": 984, "w_3": 984, "w_4": 984, "w_5": 984, "z_1": 984, "z_2": 984, "z_3": 984, "z_4": 984, "z_5": 984, "streamlin": 984, "gotten": [984, 998], "necess": [985, 991], "strife": 985, "mother": 985, "baloo": 985, "song": 985, "jungl": 985, "rubric": 985, "defici": [985, 1002], "hlle": 985, "revolv": 985, "belkin": 985, "niyogi": 985, "1396": 985, "molecul": 985, "jk": 985, "delta_": 985, "c_1": 985, "disentangl": 985, "legitim": 985, "die": 985, "noisier": 985, "5415": 985, "brief": 986, "num_featur": [986, 1046], "quantum": 986, "nutshel": 986, "36787944": 986, "89483932": 986, "58364548": 986, "51341712": 986, "83822343": 986, "7768366": 986, "facil": 987, "equi": 987, "agnost": [987, 996], "cue": 987, "came": 987, "quicker": 987, "unpract": 987, "analogi": [987, 988], "top_k_accuraci": 988, "top_k_accuracy_scor": [988, 1043, 1045], "neg_brier_scor": [988, 1041], "f1_micro": [988, 1035], "f1_weight": [988, 1035], "f1_sampl": 988, "neg_log_loss": 988, "roc_auc_ovr": [988, 1041], "roc_auc_ovo": [988, 1041], "roc_auc_ovr_weight": [988, 1041], "roc_auc_ovo_weight": [988, 1041], "explained_variance_scor": [988, 1034, 1038, 1045], "max_error": [988, 1040], "neg_mean_squared_log_error": 988, "mean_squared_log_error": [988, 1038, 1044, 1048], "neg_root_mean_squared_log_error": 988, "neg_median_absolute_error": 988, "neg_mean_poisson_devi": 988, "neg_mean_gamma_devi": 988, "mean_gamma_devi": [988, 1041], "d2_pinball_scor": [988, 1045], "d2_tweedie_scor": [988, 1044], "invalidparametererror": 988, "_error": 988, "my_custom_loss_func": 988, "693": 988, "protocol": [988, 1034, 1047, 1048], "custom_scoring_funct": 988, "custom_scorer_modul": 988, "confusion_matrix_scor": 988, "test_tp": 988, "test_fn": 988, "untru": 988, "dividend": 988, "divisor": 988, "quotient": 988, "texttt": 988, "_class": 988, "youden": 988, "informed": 988, "mosley2013": 988, "kelleher2015": 988, "guyon2015": 988, "urbanowicz2015": 988, "escalant": 988, "escalera": 988, "maci\u00e0": [988, 1044, 1046], "saeed": 988, "statnikov": 988, "viega": 988, "chalearn": 988, "automl": [988, 1008], "ijcnn": 988, "moslei": 988, "ijcv": 988, "urbanowicz": 988, "exstrac": 988, "evol": 988, "intel": [988, 1008], "cohen_kappa_scor": [988, 1036, 1038], "4285714285714286": 988, "manning2008": 988, "everingham2010": 988, "davis2006": 988, "flach2015": 988, "everingham": 988, "gool": 988, "winn": 988, "pascal": 988, "voc": 988, "goadrich": 988, "y_l": 988, "_l": 988, "emptyset": 988, "f_beta": 988, "ne": [988, 991], "1738": 988, "matthews_corrcoef": [988, 1031, 1037, 1038, 1045], "t_k": [988, 1004], "ik": 988, "ki": 988, "kk": 988, "auroc": 988, "ht2001": 988, "fc2009": 988, "pd2000": 988, "f2006": 988, "f2001": 988, "inner_clf": 988, "c\u00e8sar": 988, "hernandez": 988, "orallo": 988, "modroiu": 988, "wikipediadet2017": 988, "martin1997": 988, "navratil2007": 988, "consult": 988, "encyclopedia": 988, "utc": 988, "php": [988, 1008], "detection_error_tradeoff": 988, "oldid": 988, "798982054": 988, "doddington": 988, "kamm": 988, "ordowski": 988, "przybocki": 988, "navractil": 988, "klusacek": 988, "acoust": 988, "icassp": 988, "honolulu": 988, "229": 988, "232": 988, "brier1950": 988, "p_i": [988, 991], "bella2012": 988, "flach2008": 988, "bella": 988, "hern\u00e1ndez": 988, "ram\u00edrez": 988, "quintana": 988, "khosrow": 988, "pour": 988, "hershei": 988, "edson": [988, 1036], "matsubara": 988, "dagstuhl": 988, "seminar": 988, "schloss": 988, "leibniz": 988, "zentrum": 988, "lr_": 988, "brenner": 988, "gefel": 988, "coverage_error": [988, 1035, 1045], "label_ranking_average_precision_scor": [988, 1035, 1039, 1040, 1046], "label_ranking_loss": [988, 1036], "grade": 988, "unalt": 988, "epsilon_i": 988, "908": 988, "925": [988, 1019], "7083": 988, "rsme": 988, "log_": 988, "growth": [988, 1036, 1037], "commod": 988, "mapd": 988, "2e6": 988, "2666": 988, "y_n": [988, 992, 1002], "elicit": 988, "2500": 988, "mean_pinball_loss_95p": 988, "skill": 988, "mcfadden": 988, "d2_tweedie_score_15": 988, "d2_pinball_score_08": 988, "heteroschedast": 988, "homoschedast": 988, "pear": 989, "y_dens": 989, "y_spars": 989, "advoc": 989, "elabor": 989, "financ": 989, "f3": 989, "y3": 989, "multi_target_forest": 989, "75474165": 989, "147": 989, "03498585": 989, "03812219": 989, "12165031": 989, "12914884": 989, "46081961": 989, "8948621": 989, "44373091": 989, "88978285": 989, "62745778": 989, "02891072": 989, "48204257": 989, "03260883": 989, "165": 989, "34867495": 989, "52003279": 989, "92529176": 989, "25719016": 989, "84253": 989, "25193977": 989, "16443186": 989, "12274212": 989, "170388": 989, "80956739": 989, "16979946": 989, "72667194": 989, "50941682": 989, "50447799": 989, "149": [989, 1031], "37967282": 989, "15699552": 989, "72850319": 989, "prod_": 990, "downarrow": 990, "spite": 990, "famous": 990, "serious": 990, "flair": 990, "2_y": 990, "mu_i": 990, "sigma_i": [990, 998], "theta_i": 990, "cnb": 990, "mnb": 990, "inventor": 990, "alpha_i": [990, 1003], "cj": [990, 1034, 1035, 1036, 1037, 1038], "summat": [990, 992], "min_c": 990, "t_i": 990, "poorest": 990, "n_i": [990, 998], "satellit": 991, "kdt": 991, "farawai": 991, "invent": 991, "orthotrop": 991, "bentlei": 991, "1975": 991, "omohundro": 991, "characteris": 991, "unaffect": 991, "amort": 991, "cache_path": 991, "gettempdir": 991, "unsort": [991, 1032, 1035, 1039], "5807": 991, "nca_pip": 991, "96190476": 991, "limits_": 991, "lx": 991, "x_m": 992, "leftmost": 992, "w_1x_1": 992, "w_2x_2": 992, "w_mx_m": 992, "backpropag": 992, "b_1": 992, "b_2": 992, "z_l": 992, "dfrac": [992, 998], "nabla": 992, "deduct": 992, "rumelhart": 992, "jiquan": 992, "ngiam": 992, "chuan": 992, "yifan": 992, "carolin": 992, "suen": 992, "backprop": [992, 1002], "lecun": [992, 1002], "orr": [992, 1002], "strai": 993, "v_ih_j": 993, "b_iv_i": 993, "c_jh_j": 993, "h_j": 993, "v_i": 993, "b_i": 993, "sum_h": 993, "fantasi": 993, "particl": 993, "thoroughli": 993, "hereund": 994, "1443": 994, "1471": 994, "outlying": 994, "h2009": 995, "g2015": 995, "absurd": 995, "m2019": 995, "bike": 995, "mc_clf": 995, "624": 995, "overlaid": 995, "obscur": [995, 1047], "cice": [995, 1045], "pd_": 995, "dx_c": 995, "footnot": [995, 1008], "opaqu": 996, "x_val": 996, "y_val": 996, "356": 996, "probe": 996, "050": 996, "033": 996, "056": 996, "r_multi": 996, "029": 996, "1013": 996, "866": 996, "726": 996, "298": 996, "277": [996, 1033], "i_j": 996, "min_max_scal": 998, "x_train_minmax": 998, "x_test_minmax": 998, "max_abs_scal": 998, "x_train_maxab": 998, "x_test_maxab": 998, "unintention": 998, "semidefinit": [998, 1003], "scholkopf1998": 998, "1_": 998, "x_train_tran": 998, "x_test_tran": 998, "8pt": 998, "x_normal": 998, "firefox": 998, "chrome": 998, "safari": 998, "africa": 998, "dragon": 998, "lexicon": 998, "par": 998, "tau": 998, "iy_j": 998, "l_i": 998, "pargent": 998, "pfister": 998, "2671": 998, "2692": 998, "infant": 998, "kid": 998, "teen": 998, "adult": 998, "senior": [998, 1013], "citizen": 998, "retbin": 998, "x_1x_2": 998, "x_1x_3": 998, "x_2x_3": 998, "x_1x_2x_3": 998, "rung": 998, "eiler": 998, "marx": 998, "perperogl": 998, "sauerbrei": 998, "abrahamowicz": 998, "bmc": 998, "methodol": 998, "38629436": 998, "sixteenth": 1000, "uai": 1000, "craig": [1000, 1034, 1039], "boutili": 1000, "mois\u00e9": 1000, "goldszmidt": 1000, "morgan": [1000, 1004, 1006], "kaufmann": [1000, 1004, 1043], "ella": 1000, "bingham": 1000, "heikki": 1000, "mannila": 1000, "245": [1000, 1033], "explic": 1000, "3947": 1000, "687": 1000, "kenneth": [1000, 1031, 1032, 1037, 1038, 1045, 1046], "12th": 1000, "296": 1000, "x_new_invers": 1000, "x_new_again": 1000, "delalleau": 1001, "216": 1001, "aistat": 1001, "gatsbi": 1001, "ucl": 1001, "uk": [1001, 1024], "fullpap": 1001, "xi_i": 1002, "slack": 1002, "t_0": 1002, "l\u00e9on": [1002, 1045, 1046, 1047], "_init_t": 1002, "basesgd": 1002, "eta_0": 1002, "_t": 1002, "svmsgd": 1002, "pegaso": 1002, "srebro": 1002, "tsuruoka": 1002, "tsujii": 1002, "ananiad": 1002, "afnlp": 1002, "lin_clf": 1003, "grasp": [1003, 1009], "sv": 1003, "builtin": 1003, "qp": 1003, "linear_svc": 1003, "gram_train": 1003, "gram_test": 1003, "zeta": 1003, "zeta_i": 1003, "textrm": [1003, 1022], "q_": 1003, "reparameter": 1003, "wu": [1003, 1035, 1043], "weng": 1003, "1005": 1003, "rong": 1003, "aug": 1003, "1871": 1003, "1874": 1003, "ofmulticlass": 1003, "fitter": 1004, "pariti": 1004, "multiplex": 1004, "export_graphviz": [1004, 1036, 1038, 1044, 1046, 1047], "export_text": [1004, 1040, 1047], "dumont": 1004, "subwindow": 1004, "dichotomis": 1004, "quinlan": 1004, "multiwai": 1004, "proprietari": 1004, "ruleset": 1004, "q_m": 1004, "n_m": 1004, "t_m": 1004, "setminu": 1004, "mk": 1004, "_m": 1004, "ge0": 1004, "widetild": 1004, "tradition": 1004, "t_t": 1004, "eff": 1004, "predictive_analyt": 1004, "artwork": 1006, "fund": 1006, "spotifi": 1006, "betawork": 1006, "evernot": 1006, "aweb": 1006, "yhat": 1006, "rangespan": 1006, "birchbox": 1006, "bestofmedia": 1006, "phimeca": 1006, "howaboutw": 1006, "peerindex": 1006, "datarobot": 1006, "okcupid": 1006, "love": [1006, 1024], "publica": 1006, "machinali": 1006, "solido": 1006, "infonea": 1006, "dataiku": 1006, "otto": 1006, "zopa": 1006, "bnp": 1006, "pariba": 1006, "cardif": 1006, "post1": [1006, 1029], "foot": 1007, "gear": 1007, "neuroimag": [1007, 1013], "astronom": 1007, "pycon": 1007, "thirti": 1007, "nyc": [1007, 1013], "sister": 1008, "sklearn_panda": 1008, "sklearn_xarrai": 1008, "xarrai": 1008, "autoviml": 1008, "tpot": 1008, "featuretool": 1008, "neuraxl": 1008, "neat": [1008, 1031], "checkpoint": 1008, "funki": 1008, "saver": 1008, "evalml": 1008, "mlflow": 1008, "lifecycl": [1008, 1009], "neptun": 1008, "mlop": 1008, "sacr": 1008, "dtreeviz": 1008, "eli5": 1008, "yellowbrick": 1008, "deap": 1008, "evolutionari": 1008, "interchang": [1008, 1048], "skop": [1008, 1026], "jpmml": 1008, "porter": 1008, "transpil": 1008, "javascript": 1008, "m2cgen": 1008, "dart": 1008, "haskel": 1008, "rust": 1008, "treelit": 1008, "micromlgen": 1008, "microml": 1008, "microcontrol": 1008, "emlearn": 1008, "c99": 1008, "arima": 1008, "skforecast": 1008, "tslearn": 1008, "hmmlearn": 1008, "pomegran": 1008, "crfsuit": 1008, "skorch": 1008, "scikera": 1008, "scikit_learn": 1008, "feder": 1008, "privaci": 1008, "homomorph": 1008, "encrypt": 1008, "mlxtend": 1008, "lego": 1008, "subsembl": 1008, "lightn": 1008, "sdca": 1008, "adagrad": 1008, "svrg": 1008, "gplearn": 1008, "genet": 1008, "multilearn": 1008, "seglearn": 1008, "fastfm": 1008, "kmode": 1008, "sphereclust": 1008, "mise": 1008, "giotto": 1008, "tda": 1008, "pymc": 1008, "censor": 1008, "lightfm": 1008, "openrec": 1008, "gensim": 1008, "nilearn": 1008, "neuro": 1008, "astroml": 1008, "astronomi": 1008, "dissemin": 1008, "chines": 1008, "persian": 1008, "spanish": 1008, "korean": 1008, "disclaim": 1008, "promis": 1009, "eleven": 1009, "incept": 1009, "scala": 1009, "reinforc": 1009, "era": 1009, "7242": 1009, "12147": 1009, "5523": 1009, "10733": 1009, "13902": [1009, 1041], "12800": 1009, "12866": 1009, "15550": 1009, "5853": 1009, "11805": 1009, "15319": 1009, "11977": 1009, "12852": [1009, 1041], "13911": [1009, 1041], "amput": 1009, "6284": 1009, "beginn": 1009, "priorit": [1009, 1038], "4497": 1009, "7646": 1009, "6425": 1009, "6424": 1009, "8480": 1009, "6231": 1009, "8100": 1009, "6599": 1009, "6715": 1009, "14582": 1009, "3855": 1009, "13227": 1009, "6323": 1009, "14180": [1009, 1042], "9173": 1009, "13146": [1009, 1041], "8614": 1009, "7608": 1009, "5082": 1009, "8243": 1009, "searchgrid": 1009, "6929": 1009, "__array_function__": [1009, 1041], "etl": [1009, 1013], "8370": 1009, "6451": 1009, "8157": 1009, "7382": 1009, "drift": 1009, "11047": [1009, 1041], "9326": 1009, "slep011": 1009, "1626": 1009, "10463": 1009, "972": 1010, "id3": [1011, 1026], "cart": [1011, 1026], "touch": 1012, "savetxt": 1012, "cloneabl": 1012, "datafil": 1012, "printabl": 1012, "indispens": 1013, "stephen": [1013, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044], "simmon": 1013, "vp": 1013, "athena": 1013, "music": 1013, "bernhardsson": 1013, "pariet": [1013, 1031], "lear": 1013, "visag": 1013, "fantast": 1013, "startup": 1013, "bitli": 1013, "chartbeat": 1013, "digg": [1013, 1038], "poncho": 1013, "gilad": 1013, "lotan": 1013, "chief": 1013, "chat": 1013, "bread": 1013, "butter": 1013, "chaumond": [1013, 1039], "offic": 1013, "ayzenshtat": [1013, 1039], "undergrad": 1013, "professor": 1013, "hotel": 1013, "destin": 1013, "agent": 1013, "melani": [1013, 1038, 1039], "awesom": 1013, "stuff": 1013, "randomizedpca": [1013, 1031, 1033, 1034, 1036, 1037, 1038], "boston": 1013, "mdbecker": 1013, "pydata_2013": 1013, "ninja": 1013, "thorough": 1013, "notch": 1013, "production": 1013, "greg": [1013, 1037, 1038, 1040, 1041], "lamp": 1013, "founder": 1013, "prototyp": 1013, "jurgen": 1013, "director": 1013, "commerc": 1013, "inventori": 1013, "bertin": 1013, "mahieux": 1013, "invalu": 1013, "vijai": [1013, 1034], "surrog": 1013, "traine": 1013, "impress": 1013, "traffic": 1013, "tenur": 1013, "matchmak": 1013, "weitzenfeld": 1013, "tweet": 1013, "ferenc": 1013, "huszar": 1013, "shop": 1013, "ourselv": 1013, "jeremi": [1013, 1036, 1037, 1038, 1039, 1042, 1043], "achin": 1013, "ceo": 1013, "marketplac": 1013, "frid": [1013, 1034], "radar": 1013, "partnership": 1013, "lebourgeoi": 1013, "charron": [1013, 1034, 1035, 1042, 1043, 1044], "cornerston": 1013, "sheep": 1013, "featureforg": 1013, "rafael": [1013, 1032, 1033, 1035, 1038], "carrascosa": [1013, 1035], "law": 1013, "semiconductor": 1013, "fab": [1013, 1041, 1042], "bleed": 1013, "smartphon": 1013, "automobil": 1013, "trent": [1013, 1037], "mcconaghi": 1013, "rapid": 1013, "immens": 1013, "thorsten": 1013, "kranz": 1013, "coma": 1013, "dss": 1013, "douetteau": 1013, "b2c": 1013, "retail": 1013, "palladium": 1013, "rammig": [1013, 1037], "peer": 1013, "lend": 1013, "billion": 1013, "gbp": 1013, "grate": 1013, "vlasio": [1013, 1038], "vasilei": [1013, 1038], "petfood": 1013, "cocoa": 1013, "worldwid": 1013, "toolset": 1013, "equip": 1013, "fitzk": 1013, "sr": 1013, "fondat": 1013, "s\u00e9bastien": [1013, 1037, 1039], "conort": 1013, "salmon": 1015, "nine": 1015, "sentiment": 1016, "cli": 1016, "doctest_mod": 1016, "hardest": 1017, "tightli": 1018, "knit": 1018, "x_fold": 1019, "array_split": 1019, "y_fold": 1019, "934": 1019, "train_indic": 1019, "test_indic": 1019, "963": 1019, "922": 1019, "930": 1019, "96388889": 1019, "92222222": 1019, "9637883": 1019, "93036212": 1019, "96578289": 1019, "92708922": 1019, "96681476": 1019, "96362897": 1019, "93192644": 1019, "0077": 1019, "00375": 1019, "lfw_": 1020, "_lfw": 1020, "gerhard_schroed": 1020, "donald_rumsfeld": 1020, "tony_blair": 1020, "colin_powel": 1020, "george_w_bush": 1020, "282": [1020, 1031], "estimated_param_": 1021, "iris_x": 1022, "iris_i": 1022, "iris_x_train": 1022, "iris_y_train": 1022, "iris_x_test": 1022, "iris_y_test": 1022, "pave": 1022, "paltri": 1022, "exabyt": 1022, "30349955": 1022, "237": 1022, "63931533": 1022, "53060544": 1022, "73698041": 1022, "13170937": 1022, "81458798": 1022, "84845219": 1022, "60648906": 1022, "51961675": 1022, "09517222": 1022, "5854": 1022, "5855": 1022, "occam": 1022, "razor": 1022, "best_alpha": [1022, 1031], "025118864315095794": 1022, "313": 1022, "knew": 1023, "taxonomist": 1023, "face_compress": 1023, "x_approx": 1023, "images_approx": 1023, "18565811e": 1023, "19346747e": 1023, "43026679e": 1023, "text_analyt": 1024, "skeleton": [1024, 1034], "sklearn_tut_workspac": 1024, "cp": 1024, "work_directori": 1024, "tutorial_hom": 1024, "fetch_data": 1024, "lang": 1024, "newsweed": 1024, "netnew": 1024, "bydat": 1024, "twenty_train": 1024, "holder": 1024, "sd345": 1024, "collier": 1024, "laserjet": 1024, "iii": [1024, 1045], "hampton": 1024, "4gb": 1024, "count_vect": 1024, "x_train_count": 1024, "35788": 1024, "4690": 1024, "downscal": 1024, "tf_transform": 1024, "x_train_tf": 1024, "tfidf_transform": 1024, "x_train_tfidf": 1024, "na\u00efv": 1024, "docs_new": 1024, "opengl": 1024, "x_new_count": 1024, "x_new_tfidf": 1024, "text_clf": 1024, "twenty_test": 1024, "docs_test": 1024, "8348": 1024, "9101": [1024, 1039], "1502": 1024, "353": 1024, "tfidf__use_idf": 1024, "searcher": 1024, "gs_clf": 1024, "workspac": 1024, "fear": 1024, "fire": 1024, "exercise_xx_script": 1024, "arg1": 1024, "arg2": 1024, "arg3": 1024, "mortem": 1024, "exercise_01_language_train_model": 1024, "exercise_02_senti": 1024, "movie_review": 1024, "txt_sentoken": 1024, "cpickl": 1024, "subtleti": 1026, "subscrib": 1029, "gzip": 1031, "bzip2": 1031, "decompress": 1031, "auc_scor": [1031, 1033], "kernc": [1031, 1045, 1046], "led": 1031, "probabilisticpca": [1031, 1034], "hmm": [1031, 1032, 1033, 1034, 1036], "gaussianhmm": 1031, "multinomialhmm": 1031, "n_gram_rang": 1031, "alexi": [1031, 1034, 1035, 1038], "mignon": [1031, 1034, 1035, 1038], "subhodeep": [1031, 1032, 1033], "moitra": [1031, 1032, 1033], "yannick": [1031, 1033], "schwartz": [1031, 1033, 1045], "duckworth": 1031, "benediktsson": [1031, 1032, 1033], "marko": [1031, 1040, 1041, 1047], "burjek": 1031, "pinto": 1031, "abraham": [1031, 1032, 1037, 1041], "hoenig": 1031, "flyingimmidev": 1031, "francoi": [1031, 1044], "savard": 1031, "hann": 1031, "schulz": 1031, "welind": 1031, "companioni": 1031, "brandyn": 1031, "bussonni": [1031, 1043], "matthia": [1031, 1033, 1034, 1037, 1038, 1039, 1043, 1046], "pierr": [1031, 1039, 1040, 1042, 1044, 1046], "astolfi": 1031, "huiginn": 1031, "goodman": [1031, 1036], "ludwig": 1031, "schwardt": 1031, "hervieu": 1031, "sergio": [1031, 1033, 1034, 1043, 1046], "medina": [1031, 1033], "sheerman": 1031, "buguen": 1031, "seq_dataset": [1031, 1041], "weight_vector": [1031, 1041], "reuben": 1031, "costin": 1031, "_basehmm": 1031, "neighborsregressor": 1031, "gone": [1031, 1032], "vbgmm": [1031, 1035, 1037], "_pvalu": 1031, "charset": [1031, 1033], "test_fract": 1031, "train_fract": 1031, "239": 1031, "marek": 1031, "fcostin": 1031, "adrien": 1031, "gaidon": 1031, "joona": 1031, "sillanp\u00e4\u00e4": 1031, "mccarthi": [1031, 1039], "roi": [1031, 1045], "hyunjin": 1031, "ibay": 1031, "scheidegg": 1031, "clair": 1031, "revillet": 1031, "conrad": [1031, 1032, 1046], "meng": [1031, 1032, 1035, 1037, 1038], "xinfan": [1031, 1032, 1035], "udi": 1031, "weinsberg": 1031, "janso": 1031, "palafox": 1031, "overwrite_": 1031, "copy_": 1031, "buffer_mb": 1031, "sparse_encode_parallel": 1031, "accident": [1031, 1035, 1040], "basedictionarylearn": 1031, "sparsecodingmixin": 1031, "fast_svd": 1031, "arnold": [1031, 1032], "bala": [1031, 1034], "subrahmanyam": [1031, 1034], "varanasi": [1031, 1034], "draxu": 1031, "eickenberg": [1031, 1033, 1034, 1035, 1036], "bogdan": 1031, "trach": 1031, "f\u00e9lix": [1031, 1033, 1034, 1035, 1039], "antoin": [1031, 1033, 1034, 1035, 1038], "fortin": [1031, 1033, 1034, 1035], "manuel": [1031, 1035, 1039, 1040, 1043, 1044], "caicedo": 1031, "carvaj": 1031, "tiziano": 1031, "zito": [1031, 1044], "jean": [1031, 1034, 1035, 1036, 1037, 1038, 1044], "kossaifi": [1031, 1035, 1036], "thumbnail": 1031, "mldata": [1031, 1039], "pietro": [1031, 1034], "berk": 1031, "macosx": 1031, "xarg": 1031, "bscikit": 1031, "cross_val": 1031, "bcross_val": 1031, "lurk": 1031, "l1_distanc": 1031, "387": 1031, "168": 1031, "andi": [1031, 1038], "amit": [1031, 1045, 1046], "salvator": [1031, 1045, 1046], "masecchia": 1031, "schut": 1031, "metaireau": [1031, 1034], "bryan": [1031, 1034, 1040, 1041, 1044], "silverthorn": 1031, "minwoo": 1031, "luca": [1031, 1041, 1042, 1043, 1044], "wiman": 1031, "schl\u00fcter": [1031, 1039], "malet": 1031, "miott": [1031, 1034], "feth": 1031, "arezki": 1031, "yamin": 1031, "notes_neighbor": 1031, "netbsd": 1031, "kamel": 1031, "ibn": 1031, "hassen": 1031, "derouich": 1031, "virgilefritsch": 1031, "example_gaussian_process_plot_gp_regress": 1031, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1031, "tast": 1031, "2x": 1031, "10x": 1031, "200x": 1031, "ann": [1031, 1043, 1045], "laur": 1031, "fouqu": 1031, "ronan": [1031, 1034, 1039], "amicel": [1031, 1034], "osendorf": [1031, 1032], "gmmhmm": [1031, 1032], "latex": 1031, "mlcomp": 1031, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1031, "pybrain": 1031, "116": 1031, "rokem": [1031, 1037], "100x": [1031, 1034, 1048], "obsolet": [1031, 1047], "attrselect": 1031, "unmaintain": 1031, "lite": 1031, "filo": [1031, 1034], "mailhot": 1031, "huard": 1031, "dave": [1031, 1038, 1039, 1045, 1047], "morril": 1031, "schofield": 1031, "travi": [1031, 1039], "oliph": 1031, "pearu": 1031, "peterson": [1031, 1033], "0d": 1032, "marchman": [1032, 1033], "hrishikesh": [1032, 1033], "huilgolkar": [1032, 1033], "bastiaan": [1032, 1033], "diego": [1032, 1033], "molla": [1032, 1033], "cunha": [1032, 1033], "almeida": [1032, 1033, 1044], "rolando": [1032, 1033], "espinoza": [1032, 1033], "fuent": [1032, 1033], "beauchamp": [1032, 1035], "longstand": [1032, 1038], "shaun": 1032, "jackman": 1032, "winterman": 1032, "seberg": 1032, "n_atom": 1032, "label_propag": 1032, "learn_rat": 1032, "basegradientboost": 1032, "mean_square_error": 1032, "gmm_": 1032, "eig_tol": 1032, "chunk_siz": 1032, "zero_one_scor": 1032, "117": 1032, "aymer": 1032, "masurel": 1032, "syhw": [1032, 1033], "corei": [1032, 1039, 1040], "lynch": [1032, 1038], "shu": [1032, 1035, 1039], "tadej": [1032, 1033], "jane\u017e": [1032, 1033], "caje": 1032, "tiago": [1032, 1036], "nune": 1032, "cow": 1032, "anz": 1032, "jauvin": 1032, "jacqu": [1032, 1034], "kvam": [1032, 1034], "doug": [1032, 1033, 1043], "coleman": [1032, 1033], "dickerson": 1032, "approximateident": 1032, "veronda": 1032, "matti": [1032, 1035, 1036], "lyra": [1032, 1035, 1036], "mikhail": [1032, 1033, 1034, 1037, 1038, 1046, 1047], "korobov": [1032, 1033, 1034, 1037, 1038], "alejandro": [1032, 1037, 1048], "weinstein": 1032, "deil": [1032, 1042, 1043], "nizhibitski": 1032, "coelho": [1032, 1034, 1035, 1039], "miroslav": [1032, 1033, 1036], "batchkarov": [1032, 1036], "pavel": [1032, 1040], "bob": [1032, 1038], "dengemann": 1032, "emanuel": 1032, "x006": 1032, "justin": [1033, 1039, 1043], "stochastic_gradi": [1033, 1034, 1040], "crombach": 1033, "sheet": 1033, "jaccard_similarity_scor": [1033, 1035, 1040], "jochen": 1033, "wersd\u00f6rfer": 1033, "sinayev": 1033, "unpleas": 1033, "novic": 1033, "tini": [1033, 1046], "hyperlink": 1033, "luessi": 1033, "philipp": [1033, 1034, 1037, 1046], "gervai": [1033, 1034], "cleverless": 1033, "nosetest": 1033, "compute_import": 1033, "return_model": [1033, 1035], "itergrid": 1033, "tacitli": 1033, "charset_error": 1033, "precompute_gram": 1033, "2224": 1033, "jim": 1033, "holmstr\u00f6m": 1033, "steven": [1033, 1034, 1036, 1038, 1039, 1044, 1046, 1047], "gryze": [1033, 1036], "sergeyf": 1033, "ben": [1033, 1034, 1035, 1038, 1039, 1040, 1043], "speer": 1033, "federico": [1033, 1034, 1039, 1040, 1045], "vaggi": [1033, 1034], "raul": [1033, 1034], "garreta": [1033, 1034], "gei": 1033, "flaxman": [1033, 1035], "denton": 1033, "cockburn": 1033, "dougal": [1033, 1035, 1036, 1038, 1039, 1040, 1041], "sutherland": [1033, 1035, 1036, 1038, 1039, 1040, 1041], "ian": [1033, 1035, 1040, 1041, 1043, 1046, 1047], "ozsvald": 1033, "johann": [1033, 1034, 1039, 1041, 1042, 1045], "sch\u00f6nberger": [1033, 1034], "szabo": [1033, 1034], "roland": [1033, 1034], "imran": [1033, 1034, 1035], "haqu": [1033, 1034, 1035], "karayev": 1033, "jamestwebb": [1033, 1034], "abhijeet": 1033, "kolh": 1033, "velkov": 1033, "fazlul": 1033, "shahriar": 1033, "felix": [1033, 1038, 1039, 1041, 1043, 1044, 1045], "brockherd": 1033, "harikrishnan": 1033, "jack": [1033, 1036, 1044, 1045, 1046, 1047], "hale": [1033, 1045], "jakemick": 1033, "mcdermott": 1033, "zwinck": 1033, "vredevoogd": [1033, 1034], "pati": 1033, "ekman": [1033, 1037], "shubernetskii": 1033, "naoki": [1033, 1043], "orii": 1033, "seamu": 1033, "absher": 1033, "feldman": [1033, 1038, 1039, 1040, 1041], "stefano": 1033, "lattarini": 1033, "steve": [1033, 1035, 1039, 1044, 1046], "koch": [1033, 1039, 1040, 1042, 1043], "sturla": 1033, "molden": 1033, "jarosch": 1033, "nikolai": [1034, 1035, 1036, 1037, 1039, 1040, 1045, 1047], "mayorov": [1034, 1035, 1036, 1037], "msvc": 1034, "mingw": 1034, "resourcewarn": 1034, "calvin": [1034, 1035], "gile": [1034, 1035], "billing": [1034, 1035, 1036], "safe_realloc": 1034, "bradshaw": [1034, 1035, 1038], "pico": [1034, 1035], "restor": [1034, 1039, 1040, 1041, 1042, 1046], "raff": 1034, "__array__": [1034, 1041], "jeffrei": [1034, 1037], "blackburn": [1034, 1037], "danni": [1034, 1035, 1036], "sullivan": [1034, 1035, 1036], "wignal": [1034, 1035, 1041, 1042], "grid_tograph": 1034, "gracefulli": [1034, 1035], "novak": 1034, "tulloch": [1034, 1035], "wardagglomer": 1034, "wardclust": 1034, "mean_l1_ratio": 1034, "phlypo": 1034, "bommarito": [1034, 1035], "brook": [1034, 1035, 1043], "osborn": [1034, 1035], "eltermann": 1034, "bwignal": 1034, "ankit": [1034, 1041, 1043, 1045], "agraw": [1034, 1039, 1045, 1046], "carei": [1034, 1035, 1036, 1037, 1038], "ugurthemast": [1034, 1035], "schumach": [1034, 1035, 1036], "baptist": [1034, 1042], "lagard": 1034, "rajat": [1034, 1041], "khanduja": 1034, "pascual": 1034, "ignacio": 1034, "rossi": 1034, "s\u00e4ger": [1034, 1037], "ilambharathi": [1034, 1035], "kanniah": [1034, 1035], "sdenton4": 1034, "alyssa": [1034, 1038], "amo": 1034, "waterland": 1034, "murad": 1034, "maud": 1034, "karol": 1034, "pysniak": 1034, "cgohlk": [1034, 1035], "jacobsen": 1034, "collin": 1034, "kaushik94": 1034, "erwin": 1034, "marsi": 1034, "csytraci": 1034, "lk": 1034, "laurent": [1034, 1035, 1038, 1039, 1046, 1047], "direr": [1034, 1035, 1038, 1039], "shilt": 1034, "yoshiki": [1034, 1037], "v\u00e1zquez": 1034, "yung": [1034, 1037], "siang": 1034, "liau": 1034, "abhishek": [1034, 1035, 1041, 1045, 1047], "thakur": [1034, 1035], "rohit": [1034, 1035, 1039, 1040], "sivaprasad": [1034, 1035], "amormachin": 1034, "oscar": [1034, 1038], "carlsson": 1034, "nanta": 1034, "nardelli": 1034, "jess010": 1034, "kowalski87": 1034, "clegg": 1034, "ralf": [1034, 1037, 1038, 1046, 1047], "gommer": [1034, 1037, 1038, 1046, 1047], "rupesh": 1034, "srivastava": [1034, 1046], "ryan": [1034, 1037, 1039, 1040], "skipper": [1034, 1036, 1037], "seabold": [1034, 1036, 1037], "stefan": [1034, 1035, 1039, 1041], "walt": [1034, 1035, 1039], "riddel": [1034, 1036, 1038], "valentin": [1034, 1036, 1046, 1047], "haenel": 1034, "myer": [1034, 1038], "yoni": 1034, "meshulam": 1034, "yuri": [1034, 1036], "zaytsev": 1034, "adrinjalali": [1034, 1043], "ai8rahim": 1034, "alemagnani": 1034, "chalmerlow": 1034, "dziki": 1034, "dro\u017cd\u017c": 1034, "matrixorz": 1034, "popo": 1034, "samuela": 1034, "boulogn": 1034, "ethan": [1034, 1037], "guilherm": 1034, "trein": 1034, "heuer": 1034, "ivicajov": 1034, "rouli": 1034, "eduardo": [1034, 1036, 1044, 1045], "ari\u00f1o": 1034, "rubia": 1034, "jell": 1034, "zijlstra": 1034, "eddi": 1034, "jansson": [1034, 1046], "ca\u00f1ardo": 1034, "alastuei": 1034, "joseph": [1034, 1035, 1036, 1037, 1043, 1045, 1046], "perla": 1034, "ricardo": [1034, 1044, 1045], "kenta": 1034, "sato": 1034, "medri": 1034, "luce": 1034, "pierron": 1034, "danielweitzenfeld": 1034, "thompson": [1034, 1046, 1047], "brett": [1034, 1036, 1037, 1038, 1039, 1046], "feurer": [1034, 1039], "earl": 1034, "hank": 1034, "orr\u00f9": 1034, "lunt": 1034, "kearn": 1034, "pawe\u0142": [1034, 1038, 1043, 1044], "mandera": 1034, "zambelli": 1034, "staubda": 1034, "dedupl": 1035, "heilman": [1035, 1036], "precompute_dist": [1035, 1042], "lshforest": [1035, 1038], "qiang": 1035, "luo": 1035, "clemen": 1035, "brunner": 1035, "matteo": [1035, 1037, 1045], "visconti": 1035, "oleggio": 1035, "castello": 1035, "linkage_tre": 1035, "jatin": [1035, 1037], "shah": [1035, 1036, 1037, 1043], "saurabh": [1035, 1036, 1037, 1038, 1039, 1043], "jha": [1035, 1041, 1045], "blanchard": [1035, 1036], "michal": [1035, 1038, 1044, 1045], "romaniuk": 1035, "gilmor": 1035, "stapl": 1035, "hedyati": 1035, "antoni": [1035, 1037, 1043, 1046], "parel": 1035, "herv\u00e9": 1035, "bredin": 1035, "hasil": 1035, "sharma": [1035, 1037, 1039, 1040, 1042, 1043, 1045], "ducktyp": 1035, "download_20newsgroup": 1035, "friend": 1035, "cathi": [1035, 1041], "deng": [1035, 1036, 1037], "dawson": 1035, "garret": 1035, "hanna": [1035, 1036, 1042], "wallach": [1035, 1036], "yan": [1035, 1043], "artem": [1035, 1038], "sobolev": 1035, "fit_ovr": 1035, "predict_ovr": 1035, "predict_proba_ovr": 1035, "fit_ovo": 1035, "predict_ovo": 1035, "fit_ecoc": 1035, "predict_ecoc": 1035, "lamond": 1035, "outweigh": 1035, "thresh": 1035, "akshai": [1035, 1038, 1043], "akshayah3": 1035, "aldrian": 1035, "obaja": 1035, "ander": [1035, 1041], "aagaard": 1035, "cranenburgh": 1035, "walker": 1035, "banilo": [1035, 1036], "barmalei": [1035, 1036], "benedikt": 1035, "koehler": 1035, "bhsu": 1035, "bori": [1035, 1043, 1047], "feld": [1035, 1047], "borja": 1035, "ayerdi": 1035, "boyuan": [1035, 1036, 1037], "brent": [1035, 1039, 1040], "pedersen": [1035, 1047], "celeo": 1035, "chebee7i": 1035, "stade": 1035, "schuldt": 1035, "christof": [1035, 1036], "angermuel": [1035, 1036], "daiki": 1035, "aminaka": 1035, "danfrankj": 1035, "dmitrij": 1035, "milajev": 1035, "floydsoft": 1035, "garrett": 1035, "gpassino": 1035, "gwulf": [1035, 1036], "hampu": 1035, "bengtsson": 1035, "harri": [1035, 1037, 1043, 1044], "mavroforaki": [1035, 1037], "helder": [1035, 1044, 1045], "herv": 1035, "hugu": 1035, "salamin": 1035, "ism": 1035, "dlabal": 1035, "javier": 1035, "l\u00f3pez": [1035, 1039, 1040, 1043], "pe\u00f1a": 1035, "jdcaballero": 1035, "jeff": [1035, 1037, 1044, 1045], "hammerbach": 1035, "helmu": 1035, "kaicheng": 1035, "markham": [1035, 1042, 1043], "lagacheri": 1035, "leepei": 1035, "loic": [1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047], "estev": [1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047], "luka": [1035, 1042], "michelbach": 1035, "krell": [1035, 1037], "ku": [1035, 1036], "mateusz": [1035, 1042, 1043, 1048], "susik": 1035, "mehdi": [1035, 1044], "cherti": 1035, "mlg": 1035, "montecchio": 1035, "okal": 1035, "billi": 1035, "\u00f3scar": [1035, 1036, 1037, 1038], "n\u00e1jera": [1035, 1036, 1037, 1038], "puggioni": 1035, "pratap": [1035, 1038, 1045], "vardhan": 1035, "pvnguyen": 1035, "queqichao": 1035, "rahiel": 1035, "kasim": 1035, "mason": 1035, "saket": [1035, 1036, 1043], "choudhari": [1035, 1036, 1045, 1047], "sam": [1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046], "nichol": 1035, "sethdandridg": 1035, "sinhrk": [1035, 1036], "snuderl": 1035, "ott": 1035, "tjoa": 1035, "swu": 1035, "zimmer": [1035, 1045], "tejesh95": 1035, "terrycojon": 1035, "delteil": 1035, "toma": 1035, "kazmar": 1035, "trevorstephen": [1035, 1037], "tttthomasssss": 1035, "tzu": 1035, "kuo": 1035, "ugurcaliskan": 1035, "vinayak": [1035, 1036, 1037, 1039, 1040, 1046, 1047], "mehta": [1035, 1036, 1037, 1039, 1040, 1041, 1042, 1046, 1047], "vjacheslav": 1035, "murashkin": 1035, "wadawson": 1035, "x0l": 1035, "6147": 1036, "presort": [1036, 1041], "5857": 1036, "mcculloh": [1036, 1037], "6258": 1036, "giorgio": [1036, 1037, 1038], "patrini": [1036, 1037, 1038], "joe": 1036, "jevnik": 1036, "labelkfold": [1036, 1037], "labelshufflesplit": [1036, 1037], "mcfee": [1036, 1037], "3659": 1036, "4738": 1036, "projectedgradientnmf": 1036, "nls_max_it": 1036, "erick": 1036, "moodi": 1036, "4025": 1036, "mean_shift": [1036, 1039], "martino": 1036, "sorbaro": 1036, "cori": 1036, "konstantin": [1036, 1037, 1038], "shmelkov": 1036, "backlink": 1036, "jaidev": 1036, "deshpand": [1036, 1037], "dictlearn": 1036, "kashif": 1036, "rasul": [1036, 1038, 1039], "galvez": 1036, "sonni": 1036, "hu": [1036, 1039, 1041], "santi": [1036, 1038, 1039], "villalba": [1036, 1039, 1043], "5186": 1036, "stolbunov": 1036, "booster": 1036, "graham": [1036, 1037], "clenaghan": [1036, 1037], "clyde": 1036, "subproblem": 1036, "forestclassifi": 1036, "ankur": [1036, 1047], "ankan": 1036, "henri": [1036, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1046], "5431": 1036, "buddha": 1036, "prakash": [1036, 1038, 1044], "5182": 1036, "lamb": [1036, 1044], "5282": 1036, "5355": 1036, "5360": 1036, "4478": 1036, "5337": 1036, "4362": 1036, "5495": 1036, "elvi": [1036, 1037, 1038], "dohmatob": [1036, 1037, 1038], "data_min": 1036, "data_max": 1036, "data_rang": 1036, "_learntselectormixin": 1036, "gradientboost": 1036, "metatransfom": 1036, "load_lfw_pair": 1036, "wardagglom": 1036, "residues_": 1036, "indicator_matrix_": 1036, "adithya": 1036, "ganesh": 1036, "akitti": 1036, "alexei": 1036, "grigorev": 1036, "ali": [1036, 1039, 1040, 1043, 1044, 1046, 1047], "baharev": 1036, "ando": 1036, "saaba": 1036, "anish": [1036, 1037], "anthoni": [1036, 1038, 1039], "erling": 1036, "rouvinen": 1036, "rachez": [1036, 1037], "benjaminirv": 1036, "naul": [1036, 1037], "gohlk": 1036, "bourguignat": 1036, "cindi": [1036, 1044], "sridharan": 1036, "kronovet": 1036, "data1010": 1036, "dotson": 1036, "djipei": [1036, 1037], "dmitri": [1036, 1038, 1039, 1040, 1044, 1047], "spikhalskii": 1036, "donn": 1036, "duart": [1036, 1044, 1046], "caro": 1036, "larson": [1036, 1040, 1041, 1043, 1045], "fernando": [1036, 1043], "carrillo": 1036, "eckert": 1036, "zalkow": 1036, "ganiev": [1036, 1037, 1038], "ibraim": [1036, 1037, 1038], "giorgiop": 1036, "gryllo": [1036, 1039], "prokopi": [1036, 1039], "hsuan": 1036, "tien": 1036, "ishank": [1036, 1037, 1038], "gulati": [1036, 1037, 1038], "jeffrey04": [1036, 1037], "jfraj": 1036, "jiali": 1036, "mei": [1036, 1041], "kirkham": [1036, 1037, 1039], "wittenau": 1036, "loyal": 1036, "jungkook": 1036, "park": [1036, 1041, 1043, 1046, 1047], "kamalakerdadi": [1036, 1037], "kyler": 1036, "lilian": [1036, 1037, 1048], "besson": [1036, 1037], "tiao": [1036, 1037], "marktab": 1036, "spacek": 1036, "martinbpr": [1036, 1037], "martinosorb": 1036, "maryanmorel": [1036, 1037], "masafumi": 1036, "oyamada": 1036, "krump": 1036, "kolganov": 1036, "mbilling": 1036, "mhg": 1036, "patterson": 1036, "omer": 1036, "katz": [1036, 1043, 1044], "pauli": 1036, "virtanen": 1036, "fischer": [1036, 1037], "pianomania": 1036, "preston": [1036, 1037, 1038], "parri": [1036, 1037, 1038], "rohan": [1036, 1037, 1039, 1040, 1044], "ramanath": 1036, "bansod": [1036, 1037, 1038], "scls19fr": 1036, "saeger": [1036, 1037, 1038], "shivan": 1036, "sornarajah": 1036, "simonpl": 1036, "sseg": 1036, "hoover": [1036, 1037, 1038, 1040], "seguin": 1036, "theodor": 1036, "vasiloudi": 1036, "freita": [1036, 1038, 1039], "pereira": [1036, 1039, 1040], "timothi": [1036, 1044], "hopper": 1036, "tokoroten": 1036, "vstolbunov": 1036, "wangz10": 1036, "yucheng": 1036, "zhauniarovich": 1036, "zac": 1036, "stewart": [1036, 1041, 1044, 1046], "zhai_pro": 1036, "zichen": 1036, "7946": 1037, "8355": 1037, "9010": 1037, "8040": 1037, "9149": 1037, "aman": [1037, 1038, 1039, 1045, 1046], "dalmia": [1037, 1038, 1039], "nate": [1037, 1038, 1044], "guerin": [1037, 1038], "lebedev": [1037, 1038], "utilis": 1037, "6497": 1037, "7724": 1037, "bing": [1037, 1038], "explained_variance_ratio": 1037, "7632": 1037, "jpfrancoia": [1037, 1038], "7676": 1037, "moham": [1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "affan": 1037, "7756": 1037, "7786": 1037, "srivatsan": [1037, 1038, 1041], "7799": 1037, "7490": [1037, 1038], "6282": 1037, "7301": 1037, "6178": 1037, "7680": 1037, "n_iters_": 1037, "7553": 1037, "ekaterina": [1037, 1038, 1039, 1040, 1042, 1047], "krivich": [1037, 1038, 1040], "5874": 1037, "7593": 1037, "7594": 1037, "7660": 1037, "7750": 1037, "7732": 1037, "artsion": 1037, "lieu": [1037, 1038], "grid_scores_": [1037, 1043, 1044], "leaveonelabelout": 1037, "leaveplabelout": 1037, "plural": 1037, "mean_tim": 1037, "std_time": 1037, "3204": 1037, "5291": 1037, "sounder": 1037, "7295": 1037, "5299": 1037, "bravi": 1037, "fouchet": 1037, "calinski_harabaz_scor": [1037, 1039], "harabaz": 1037, "6586": 1037, "4294": 1037, "6667": 1037, "6954": 1037, "unveil": 1037, "yelit": 1037, "basebag": [1037, 1039], "staub": 1037, "5805": 1037, "5251": 1037, "imacul": 1037, "1000x": 1037, "arfa": 1037, "6691": 1037, "6913": 1037, "5762": 1037, "utkarsh": [1037, 1038, 1039, 1040], "upadhyai": [1037, 1038, 1039, 1040], "6846": 1037, "5929": 1037, "podshumok": [1037, 1038], "6173": 1037, "ryad": 1037, "zenin": 1037, "devashish": 1037, "asish": [1037, 1038], "dowl": 1037, "6697": 1037, "ori": 1037, "ziv": 1037, "sear": 1037, "merritt": 1037, "7325": 1037, "7239": 1037, "hong": [1037, 1039, 1043, 1044, 1045, 1047], "guangguo": 1037, "jensen": [1037, 1043], "7419": 1037, "gregori": [1037, 1041, 1042, 1043, 1044], "stupp": [1037, 1038], "bernardo": 1037, "stein": 1037, "sparse_func": [1037, 1043], "incr_mean_variance_axi": [1037, 1043], "7049": 1037, "7152": 1037, "load_boston": [1037, 1039, 1044], "7154": 1037, "manvendra": [1037, 1038], "singh": [1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "5540": 1037, "7248": 1037, "6764": 1037, "wenhua": 1037, "6817": 1037, "6902": 1037, "leonieborn": 1037, "5141": 1037, "4995": 1037, "5012": 1037, "_transform_select": 1037, "7194": 1037, "caio": [1037, 1039, 1041], "oliveira": [1037, 1039, 1041, 1045], "6182": 1037, "6121": 1037, "6472": 1037, "7350": 1037, "russel": [1037, 1038], "smith": [1037, 1038, 1039, 1040, 1041, 1043], "7159": 1037, "yichuan": [1037, 1038], "5460": 1037, "document_clust": 1037, "7353": 1037, "_search": 1037, "_check_param_grid": 1037, "xrang": 1037, "7323": 1037, "viacheslav": 1037, "kovalevskyi": 1037, "7101": 1037, "residual_metr": 1037, "6651": 1037, "reorgan": 1037, "7187": 1037, "7260": 1037, "sebasti\u00e1n": 1037, "vanrel": 1037, "leaveplabelsout": 1037, "6660": 1037, "unprefix": 1037, "7261": 1037, "aditya": [1037, 1039, 1040, 1041, 1045, 1046], "joshi": [1037, 1039, 1045, 1048], "loginov": 1037, "minyushkin": 1037, "rudi": 1037, "abadi": [1037, 1038], "saint": 1037, "alexfield": 1037, "alvaro": [1037, 1039], "ulloa": 1037, "alyssaq": 1037, "amlan": 1037, "kar": 1037, "giessel": 1037, "jackson": [1037, 1038, 1040], "murrai": [1037, 1038], "arafat": 1037, "archit": 1037, "asnt": 1037, "b0noi": 1037, "behzad": 1037, "tabibian": 1037, "kratzwald": 1037, "bhargav": 1037, "mangipudi": 1037, "blakeflei": 1037, "brandon": [1037, 1038, 1045, 1046], "carter": [1037, 1038, 1046], "camilo": 1037, "lamu": 1037, "carol": [1037, 1038], "Willing": [1037, 1038], "cass": 1037, "ceshin": 1037, "truong": 1037, "codevig": 1037, "shiebler": 1037, "hnyk": [1037, 1038], "elli": [1037, 1040], "nicholson": [1037, 1038, 1039], "thaler": 1037, "warshaw": 1037, "lasagna": 1037, "deborah": [1037, 1038], "definitelyuncertain": 1037, "didi": [1037, 1038, 1039, 1040], "zev": [1037, 1038, 1039, 1040], "dsquareindia": 1037, "edwinensa": 1037, "elia": 1037, "kuth": 1037, "fabio": 1037, "ticconi": 1037, "fisach": 1037, "donovan": 1037, "ghg": 1037, "giovanni": [1037, 1039], "cherubin": 1037, "lanzani": 1037, "glenn": 1037, "qian": [1037, 1042], "mohr": 1037, "govin": 1037, "vatsan": 1037, "reda": 1037, "gustav": 1037, "m\u00f6rtberg": 1037, "halwai": 1037, "harizo": [1037, 1038], "rajaona": [1037, 1038], "hashcode55": 1037, "hdmetor": 1037, "hobson": 1037, "lane": 1037, "bown": 1037, "igor": [1037, 1038, 1044], "andriushchenko": [1037, 1038], "inki": 1037, "hwang": 1037, "isaac": [1037, 1038, 1040, 1041, 1048], "sijaranamu": 1037, "iver": 1037, "jordal": 1037, "jackmartin": 1037, "fiedler": 1037, "routlei": 1037, "zike": 1037, "janna": 1037, "brettingen": 1037, "jarfa": 1037, "laska": 1037, "jblackburn": 1037, "levesqu": 1037, "hintz": 1037, "jeremynixon": 1037, "jeroen": 1037, "jessica": 1037, "jill": 1037, "j\u00eann": 1037, "vie": 1037, "jia": 1037, "jiyuan": 1037, "johannah": 1037, "boersma": 1037, "moeller": 1037, "striebel": [1037, 1038], "joncral": 1037, "jordi": 1037, "munoz": [1037, 1043], "jrfiedler": 1037, "juliankahnert": 1037, "juliathebrav": 1037, "kaichogami": 1037, "lyon": [1037, 1038], "kingjr": 1037, "kjell": 1037, "krishna": [1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046], "kalyan": 1037, "krishnakalyan3": 1037, "kvle": 1037, "putnam": 1037, "ldavid": 1037, "leig": 1037, "leightonzhang": 1037, "leland": [1037, 1038, 1039, 1041, 1042, 1047], "liang": [1037, 1042, 1043], "hsieh": 1037, "lizsz": 1037, "l\u00e9oni": 1037, "born": 1037, "maniteja": [1037, 1038, 1039], "nandana": [1037, 1038, 1039], "marco": [1037, 1039, 1040, 1044, 1045, 1046], "bao": [1037, 1045], "szepieniec": 1037, "madsen": [1037, 1039], "massil": 1037, "matheu": 1037, "duboi": [1037, 1039], "moroz": 1037, "scherer": 1037, "michiaki": 1037, "ariga": 1037, "moussa": 1037, "taifi": 1037, "mrandrewandrad": 1037, "mridul": 1037, "seth": 1037, "nadya": 1037, "naoya": [1037, 1038, 1039, 1040], "kanai": [1037, 1038, 1039], "nickledav": 1037, "nico": [1037, 1044], "ningchi": 1037, "nlathia": 1037, "okbalefthand": 1037, "okhlopkov": [1037, 1038], "pano": 1037, "lourida": 1037, "strickland": 1037, "perrin": 1037, "letelli": 1037, "pestrickland": 1037, "practicalswift": 1037, "qimu": 1037, "zheng": [1037, 1038, 1043], "rachit": [1037, 1043, 1046], "kansal": 1037, "ramana": [1037, 1038], "randi": 1037, "olson": 1037, "lutz": [1037, 1041, 1044], "schucker": 1037, "jain": [1037, 1038, 1039, 1043, 1045, 1046], "ruifeng": [1037, 1038, 1043], "r\u00e9my": 1037, "l\u00e9one": 1037, "saihttam": 1037, "saiw": 1037, "yeung": 1037, "shleifer": [1037, 1038], "sartaj": 1037, "sasank": 1037, "chilamkurthi": 1037, "seal": 1037, "shagun": 1037, "sodhani": 1037, "shanmuga": 1037, "shashank": [1037, 1043], "shekhar": 1037, "shawpan": 1037, "shengxiduan": 1037, "shota": 1037, "shuckle16": 1037, "smedbergm": 1037, "srvanrel": 1037, "leriqu": [1037, 1039], "taranjeet": 1037, "themrmax": [1037, 1038], "hallock": 1037, "moreau": [1037, 1038, 1039, 1040, 1041], "tkammi": 1037, "toastedcornflak": [1037, 1038], "tomdlt": 1037, "toshihiro": [1037, 1038, 1044], "kamishima": [1037, 1038], "tracer0tong": 1037, "hauck": 1037, "vo": [1037, 1045], "varun": [1037, 1038, 1039, 1045, 1046], "jewalikar": 1037, "vikram": [1037, 1046, 1047], "villu": 1037, "ruusmann": 1037, "walter": 1037, "waterponei": [1037, 1038], "wenjian": 1037, "welch": 1037, "wyseguy7": 1037, "xyguo": [1037, 1039], "yanlend": 1037, "yen": [1037, 1038], "yenchenlin": 1037, "yoav": 1037, "zivori": 1037, "10723": [1038, 1039], "9623": 1038, "undocu": 1038, "deleteri": 1038, "9677": 1038, "ashutosh": [1038, 1039, 1041, 1043], "correlation_model": 1038, "regression_model": 1038, "belatedli": 1038, "9717": 1038, "9693": 1038, "steingold": [1038, 1039], "9711": 1038, "goncalo": [1038, 1039], "rodrigu": [1038, 1039, 1044], "9641": 1038, "bourbeau": [1038, 1039, 1040], "9865": 1038, "sachin": [1038, 1039, 1045], "kelkar": [1038, 1039, 1041], "9922": 1038, "charli": [1038, 1039, 1047], "brummitt": [1038, 1039], "9945": 1038, "9830": 1038, "9600": 1038, "kerimov": [1038, 1039], "9593": 1038, "reiichiro": [1038, 1039], "nakano": [1038, 1039], "9604": 1038, "interim": 1038, "9558": 1038, "9847": 1038, "joan": [1038, 1039, 1040, 1041], "massich": [1038, 1039, 1040, 1041], "oli": 1038, "blum": 1038, "9697": 1038, "9750": 1038, "9788": 1038, "9815": 1038, "9802": 1038, "vrishank": [1038, 1039], "bhardwaj": [1038, 1039], "nagarjuna": [1038, 1039], "nathaniel": [1038, 1039, 1041], "diegodlh": [1038, 1039], "jkleint": [1038, 1039], "oliblum90": [1038, 1039], "pasbi": [1038, 1039], "lawson": [1038, 1039, 1040], "nielsenmarkus11": [1038, 1039], "excit": 1038, "cautiou": 1038, "min_impurity_split": 1038, "7823": [1038, 1039], "8446": 1038, "5279": 1038, "8363": 1038, "5295": 1038, "7388": 1038, "userguid": 1038, "7655": 1038, "karan": [1038, 1039, 1040], "desai": [1038, 1040, 1043, 1044, 1046, 1047], "7739": 1038, "gasquez": 1038, "8120": 1038, "neeraj": 1038, "gangwar": 1038, "7548": 1038, "9206": 1038, "7441": 1038, "6101": 1038, "8698": 1038, "7794": 1038, "herilalaina": [1038, 1039, 1041], "rakotoarison": [1038, 1039, 1041], "5036": 1038, "4939": 1038, "esuli": [1038, 1043], "n_skips_": 1038, "7914": 1038, "horrel": 1038, "8591": 1038, "hadrien": [1038, 1041], "7838": 1038, "8835": 1038, "8061": 1038, "cordier": 1038, "6288": 1038, "9145": 1038, "reddi": [1038, 1039, 1040, 1045], "chinthala": 1038, "7721": 1038, "crall": [1038, 1044], "7685": 1038, "tommi": [1038, 1039, 1040], "l\u00f6fstedt": 1038, "9277": 1038, "hongkahjun": 1038, "7089": 1038, "randomized_svd_low_rank": 1038, "9067": 1038, "6181": 1038, "wendling": 1038, "8065": 1038, "lejeun": 1038, "7567": 1038, "jay": 1038, "doepk": 1038, "7573": 1038, "romain": [1038, 1043], "brault": 1038, "5229": 1038, "7990": 1038, "8586": 1038, "7723": 1038, "8028": 1038, "booth": 1038, "8005": 1038, "7863": 1038, "7506": 1038, "5991": 1038, "8845": 1038, "8053": 1038, "8282": 1038, "8117": 1038, "9259": 1038, "8094": 1038, "8335": 1038, "poughon": 1038, "7880": 1038, "karnofski": 1038, "935": 1038, "8931": 1038, "attractador": [1038, 1039], "8002": 1038, "8549": 1038, "zerodivisionerror": [1038, 1041, 1047], "7501": 1038, "dominik": [1038, 1047], "krzeminski": 1038, "7970": 1038, "8006": 1038, "p\u00f6lsterl": [1038, 1041, 1044], "8936": 1038, "8672": 1038, "mike": 1038, "benfield": 1038, "broke": 1038, "8068": 1038, "5732": 1038, "ytrue": 1038, "ypred": 1038, "8087": 1038, "7983": 1038, "8512": 1038, "8251": 1038, "aivision2020": 1038, "5814": 1038, "7849": 1038, "jair": 1038, "montoya": 1038, "martinez": 1038, "randomizedlasso": 1038, "5359": 1038, "9302": 1038, "8160": 1038, "8224": 1038, "gedeck": 1038, "vathsala": [1038, 1039, 1040, 1041], "achar": [1038, 1039, 1040, 1041], "9022": 1038, "mehmet": [1038, 1044], "basbug": 1038, "9024": 1038, "8973": 1038, "paulo": [1038, 1044, 1046], "haddad": 1038, "unmeaning": 1038, "6573": 1038, "quazi": [1038, 1039], "marufur": 1038, "rahman": [1038, 1039, 1043], "baselabelpropag": 1038, "9239": 1038, "andr": [1038, 1045], "ambrosio": 1038, "boechat": 1038, "early_exager": 1038, "assertionerror": 1038, "8992": 1038, "7954": 1038, "foreman": 1038, "9105": 1038, "9108": 1038, "8306": 1038, "7872": 1038, "_c_step": 1038, "3367": 1038, "steward": 1038, "8768": 1038, "detomaso": 1038, "6507": 1038, "jayzed82": 1038, "6126": 1038, "7814": 1038, "7702": 1038, "9219": 1038, "7771": 1038, "ang": 1038, "randomizedlogisticregress": 1038, "8259": 1038, "mandatorili": 1038, "7565": 1038, "8181": 1038, "basesearchcv": [1038, 1039], "8344": 1038, "eriksson": 1038, "7661": 1038, "8295": 1038, "batula": 1038, "dylan": [1038, 1041], "werner": [1038, 1043], "meier": 1038, "7365": 1038, "aleksandr": 1038, "sandrovskii": 1038, "5697": 1038, "stijn": 1038, "tonk": 1038, "6250": 1038, "8093": 1038, "bull": 1038, "9507": 1038, "7356": 1038, "dingwal": 1038, "_check_target": 1038, "8377": 1038, "5211": 1038, "rhinehart": 1038, "8159": 1038, "8198": 1038, "fetch_": 1038, "7944": 1038, "7825": 1038, "kathleen": 1038, "7376": 1038, "7331": 1038, "yangarbit": 1038, "__getstate__": [1038, 1046], "obstruct": 1038, "8316": 1038, "holger": 1038, "8010": 1038, "7986": 1038, "najera": 1038, "9289": 1038, "makedir": 1038, "9284": 1038, "sebastin": [1038, 1039], "alert": 1038, "lgtm": 1038, "9278": 1038, "heli": 1038, "8449": 1038, "9078": 1038, "purport": 1038, "sergul": [1038, 1039, 1042], "aydor": [1038, 1039, 1042], "8922": 1038, "8137": 1038, "8139": 1038, "8995": 1038, "2879": 1038, "7459": 1038, "7812": 1038, "9100": 1038, "8481": 1038, "8174": 1038, "tahar": 1038, "zanouda": 1038, "8854": 1038, "8874": 1038, "7998": 1038, "jiacheng": 1038, "argpartit": 1038, "frombuffer_empti": 1038, "in1d": 1038, "rankdata": 1038, "safe_copi": 1038, "eig": 1038, "fast_dot": 1038, "pinvh": [1038, 1040], "graph_laplacian": 1038, "sparsetool": 1038, "connected_compon": 1038, "check_decision_proba_consist": 1038, "shubham": [1038, 1041], "9019": 1038, "baseensembl": [1038, 1041], "7464": 1038, "rishikesh": 1038, "taehoon": [1038, 1039], "aashil": 1038, "balakumaran": [1038, 1039], "manoharan": [1038, 1039], "petrov": [1038, 1039, 1047], "minghui": [1038, 1039], "jc": [1038, 1039], "alexandercbooth": 1038, "chkoar": 1038, "aarshai": [1038, 1039], "gilliam": 1038, "subramanyam": 1038, "clement": [1038, 1039, 1043], "joudet": [1038, 1039], "robl": 1038, "kati": 1038, "luangkot": 1038, "lacchia": 1038, "akshay0724": 1038, "omtcyfz": 1038, "rickiepark": 1038, "jbdelafoss": 1038, "vivek": [1038, 1039, 1040], "elliott": 1038, "ldirer": 1038, "sid": 1038, "kapur": 1038, "midina": 1038, "mikebenfield": 1038, "sourav": [1038, 1041], "aseem": 1038, "bansal": 1038, "aishwaryark": 1038, "howel": 1038, "dokato": 1038, "kathi": [1038, 1041], "ferria": 1038, "nikita": [1038, 1039, 1041, 1044, 1045, 1046], "basil": 1038, "beirouti": 1038, "possa": 1038, "bednar": 1038, "janin": 1038, "harper": 1038, "artsiom": 1038, "ligo": 1038, "rahn": [1038, 1041], "seanpwilliam": 1038, "julian": [1038, 1039], "kuhlmann": [1038, 1039], "aubert": 1038, "j\u00f6rn": 1038, "hee": [1038, 1041], "shivamgargsya": [1038, 1042, 1044], "kat": 1038, "hempstalk": 1038, "kaushik": [1038, 1045, 1046, 1047], "lakshmikanth": 1038, "kennedi": [1038, 1041], "yap": 1038, "kiril": [1038, 1039, 1041, 1043], "bobyrev": 1038, "imbert": [1038, 1040, 1043, 1045], "lera": 1038, "douillard": 1038, "mainak": 1038, "tobychees": [1038, 1039], "manraj": 1038, "marc": [1038, 1040, 1041, 1047], "meketon": 1038, "marcofalk": 1038, "gilch": 1038, "mehul": 1038, "ahuja": [1038, 1045, 1046], "goetz": [1038, 1039], "dezub": 1038, "baumgartn": 1038, "vibrantabhi19": 1038, "golubin": 1038, "milen": 1038, "paskov": 1038, "antonin": 1038, "carett": 1038, "morikko": 1038, "mrmjauh": 1038, "nalepa": 1038, "namiya": 1038, "narinek": [1038, 1039], "angu": [1038, 1039, 1045], "nicol": 1038, "vavrova": 1038, "nitish": 1038, "pandei": [1038, 1043], "daniil": 1038, "olegovich": 1038, "craze": 1038, "om": 1038, "parmind": 1038, "patrick": [1038, 1039, 1044, 1045, 1048], "carlson": 1038, "ganssl": 1038, "lorek": 1038, "pete": [1038, 1042, 1043], "bachant": 1038, "csizsek": 1038, "jong": 1038, "puneet": 1038, "mathur": [1038, 1040, 1041, 1046, 1047], "quentin": [1038, 1039, 1040, 1047], "hibon": 1038, "1kastner": 1038, "rameshwar": [1038, 1039], "bhaskaran": [1038, 1039], "rebecca": 1038, "bilbro": 1038, "remi": 1038, "rampin": 1038, "pratik": 1038, "agarw": [1038, 1039, 1041], "sailesh": [1038, 1039], "choyal": [1038, 1039], "samson": 1038, "samu\u00ebl": 1038, "weber": 1038, "sarah": [1038, 1040, 1043], "abhyudai": 1038, "sharan": [1038, 1039], "yalburgi": [1038, 1039], "willduan": 1038, "siddharth": [1038, 1042], "almer": 1038, "theofilo": 1038, "papapanagiot": 1038, "alison": 1038, "boucher": 1038, "folkman": 1038, "jung": [1038, 1042, 1046], "shenoi": 1038, "vilhelm": [1038, 1039], "ehrenheim": [1038, 1039], "alan": [1038, 1039, 1042, 1044, 1045], "yee": [1038, 1039], "warut": [1038, 1039], "vijitbenjaronk": [1038, 1039], "yuichi": 1038, "fujikawa": 1038, "affanv14": 1038, "andreh7": 1038, "bradi": 1038, "salz": 1038, "campustrampu": 1038, "agamemnon": [1038, 1039, 1040, 1041, 1043, 1044], "krasouli": [1038, 1039, 1040, 1041, 1043, 1044], "ditenberg": 1038, "elena": 1038, "sharova": 1038, "filipj8": [1038, 1039], "fukatani": 1038, "guiniol": 1038, "guoci": 1038, "hakaa1": [1038, 1039], "xhy": 1038, "jakirkham": [1038, 1039, 1040, 1046, 1047], "jaroslaw": 1038, "jeroko": 1038, "jmontoyam": 1038, "josephsalmon": [1038, 1039, 1040], "jschendel": [1038, 1039], "leereev": 1038, "hahn": [1038, 1039], "mathurinm": [1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047], "mehak": 1038, "sachdeva": 1038, "mlewis1729": 1038, "mlliou112": 1038, "mthorrel": [1038, 1041], "ndingwal": 1038, "nuff": 1038, "plagre": 1038, "pldtc325": 1038, "breno": [1038, 1039], "olsen": 1038, "alfano": 1038, "burn": [1038, 1039], "polmauri": 1038, "charlton": 1038, "austin": 1038, "chayant": 1038, "t15h": 1038, "chinmaya": 1038, "pancholi": 1038, "danielsen": 1038, "chung": [1038, 1039], "pravarmahajan": [1038, 1039], "dariu": [1038, 1039], "morawiec": [1038, 1039], "haberth\u00fcr": 1038, "heryanto": 1038, "kirkbi": [1038, 1039], "rashchedrin": 1038, "gertrud": 1038, "devansh": [1038, 1039], "dickson": 1038, "baxlei": 1038, "don86": 1038, "klarup": 1038, "elizabeth": [1038, 1040, 1043], "ferriss": 1038, "ellen": 1038, "egli": 1038, "chieh": [1038, 1039], "chou": [1038, 1039], "grzegorz": [1038, 1041], "szpak": [1038, 1041], "zxcvbniu": 1038, "icyblad": 1038, "ilya": 1038, "laughlin": 1038, "iv\u00e1n": [1038, 1044], "vall\u00e9": 1038, "aur\u00e9lien": [1038, 1039, 1040, 1044, 1045], "bellet": [1038, 1039, 1040], "mahapatra": 1038, "bundl": [1039, 1040], "indexerror": [1039, 1040], "11756": [1039, 1040], "14237": [1039, 1040], "schuder": [1039, 1040, 1041], "13903": [1039, 1040], "13124": [1039, 1040], "13772": [1039, 1040], "vya": [1039, 1040, 1041], "12949": 1039, "prabakaran": [1039, 1040, 1043, 1045, 1046], "kumaresshan": [1039, 1040, 1043], "12946": 1039, "tallott": 1039, "13276": 1039, "13005": 1039, "13312": 1039, "11295": 1039, "vacaliuc": [1039, 1040], "13046": 1039, "12360": 1039, "aakanksha": 1039, "13134": 1039, "sandro": [1039, 1046], "casagrand": [1039, 1040], "12881": 1039, "13165": 1039, "13221": 1039, "bertrandhaut": [1039, 1040], "raghunathan": [1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "dowon": [1039, 1040], "aria": [1039, 1040, 1046], "fibins": [1039, 1040], "finn": [1039, 1040], "shea": [1039, 1040], "joaak": [1039, 1040], "m\u00e9hault": [1039, 1040], "kms15": [1039, 1040], "kossori": [1039, 1040], "aruku": [1039, 1040], "lakshya": [1039, 1040, 1041], "ib\u00e1\u00f1ez": [1039, 1040, 1043], "gorelli": [1039, 1040, 1044, 1046], "marcogorelli": [1039, 1040], "mferrari3": [1039, 1040], "micka\u00ebl": [1039, 1040], "schoentgen": [1039, 1040], "pavlo": [1039, 1040], "kalli": [1039, 1040], "glaser": [1039, 1040], "pierretallott": [1039, 1040, 1041], "kapoor": [1039, 1040], "sandrocasagrand": [1039, 1040], "tashai": [1039, 1040], "vishaal": [1039, 1040], "zhuyi": [1039, 1040], "ziji": [1039, 1040], "zj": [1039, 1040], "poh": [1039, 1040], "12704": 1039, "12701": 1039, "12685": 1039, "12699": 1039, "adanhawth": [1039, 1040], "stine": [1039, 1040], "feda": [1039, 1040], "curic": [1039, 1040], "jeremiedbb": [1039, 1040, 1041], "katrin": [1039, 1040], "leinweb": [1039, 1040], "muhammad": [1039, 1040, 1044], "hassaan": [1039, 1040], "rafiqu": [1039, 1040], "paczuski": [1039, 1040], "waterburi": [1039, 1040], "shivam": [1039, 1040, 1041], "kotwalia": [1039, 1040], "12159": 1039, "12105": 1039, "11912": 1039, "12304": 1039, "12339": 1039, "12246": 1039, "10811": 1039, "feldbauer": [1039, 1040, 1041, 1042, 1045], "12441": 1039, "12517": 1039, "12234": 1039, "12165": 1039, "12388": 1039, "connor": [1039, 1044], "tann": [1039, 1044], "12393": 1039, "12122": 1039, "sharedmem": 1039, "12518": 1039, "12481": 1039, "12612": 1039, "12211": 1039, "lisa": [1039, 1040, 1042, 1043, 1045, 1046], "hannel": [1039, 1040], "melissa": 1039, "ferrari": 1039, "12451": 1039, "12171": 1039, "12365": 1039, "_encod": 1039, "12514": 1039, "12522": 1039, "12471": 1039, "marzinotto": [1039, 1040], "12317": 1039, "12338": 1039, "bauk": [1039, 1040], "12625": 1039, "sklearn_site_joblib": 1039, "12350": 1039, "12467": 1039, "unvendor": 1039, "12345": 1039, "navarret": [1039, 1040, 1041], "benjastudio": [1039, 1040], "cheuk": [1039, 1040], "connossor": [1039, 1040], "levinson": [1039, 1040], "kieker": [1039, 1040], "kataev": [1039, 1040], "dillon": [1039, 1040, 1041], "gardner": [1039, 1040], "vukolov": [1039, 1040], "caselli": [1039, 1040], "gauravahlawat": [1039, 1040], "gustavo": [1039, 1040, 1045], "haroldfox": [1039, 1040], "jacklangerman": [1039, 1040], "jacopo": [1039, 1040], "notarstefano": [1039, 1040], "janvanrijn": [1039, 1040], "jdethuren": [1039, 1040], "koen": [1039, 1040], "kushal": [1039, 1040], "chauhan": [1039, 1040, 1046, 1047], "jie": [1039, 1040, 1043], "lili": [1039, 1040], "xiong": [1039, 1040, 1045], "liam": [1039, 1040], "melsyt": [1039, 1040], "nichola": [1039, 1040, 1042], "shebanov": [1039, 1040], "oleksandr": [1039, 1040, 1041, 1042, 1045], "pavlyk": [1039, 1040, 1041, 1042], "hausamann": [1039, 1040], "pulkit": [1039, 1040, 1042], "maloo": [1039, 1040], "batista": [1039, 1040, 1044], "radostin": [1039, 1040], "stoyanov": [1039, 1040], "ramil": [1039, 1040], "nugmanov": [1039, 1040], "rebekah": [1039, 1040, 1041], "roopam": [1039, 1040], "tiernei": [1039, 1040, 1041], "sylvainlan": [1039, 1040, 1041, 1042, 1043], "takingitcasu": [1039, 1040], "tulio": [1039, 1040], "xing": [1039, 1040], "zach": [1039, 1040, 1045], "mountain": 1039, "sorri": 1039, "basemultilayerperceptron": [1039, 1041], "11924": 1039, "macbook": 1039, "9354": 1039, "9372": 1039, "astel": 1039, "10933": 1039, "hansen": 1039, "10471": 1039, "gaurav": [1039, 1040, 1041, 1042, 1043, 1045], "dhingra": [1039, 1040, 1043], "8003": 1039, "jo\u00ebl": 1039, "billaud": 1039, "10059": 1039, "braun": 1039, "9612": 1039, "jonatan": 1039, "samoocha": 1039, "8129": 1039, "margeta": 1039, "k_means_elkan": 1039, "11353": 1039, "11901": 1039, "9875": 1039, "9012": 1039, "11315": 1039, "9041": 1039, "9858": 1039, "artiem": 1039, "krinitsyn": 1039, "9908": 1039, "8617": 1039, "maskani": [1039, 1041, 1042, 1043], "filali": 1039, "konstantino": 1039, "katriopla": 1039, "10774": 1039, "catalfo": 1039, "10795": 1039, "takeshi": [1039, 1044, 1045, 1046], "yoshizawa": 1039, "11082": 1039, "sadhana": 1039, "srinivasan": [1039, 1042], "9731": 1039, "10045": 1039, "fetch_mldata": 1039, "11466": 1039, "6374": 1039, "normalize_compon": [1039, 1041], "11585": 1039, "ivan": [1039, 1040, 1043, 1046], "panico": [1039, 1043], "11420": 1039, "6452": 1039, "walli": 1039, "gauz": 1039, "9492": 1039, "8484": 1039, "9886": 1039, "underflow": [1039, 1044], "10142": 1039, "5956": 1039, "_class_mean": 1039, "_class_cov": 1039, "10898": 1039, "nanxin": 1039, "9832": 1039, "11951": 1039, "r\u00fcdiger": [1039, 1040, 1042], "busch": [1039, 1040, 1042], "9707": 1039, "wan": 1039, "7071": 1039, "9157": 1039, "11176": 1039, "forsyth": 1039, "11542": 1039, "anna": 1039, "9524": 1039, "9723": 1039, "10908": 1039, "10899": 1039, "melderi": 1039, "10101": 1039, "10\u2079": 1039, "9147": 1039, "clae": 1039, "fredrik": 1039, "mannbi": 1039, "10441": 1039, "mayur": 1039, "kulkarni": 1039, "6689": 1039, "nihar": 1039, "sheth": 1039, "11293": 1039, "9656": 1039, "greenhal": 1039, "n_features_to_comput": 1039, "9222": 1039, "hoh": 1039, "9234": 1039, "andrewww": 1039, "8075": 1039, "11211": 1039, "9484": 1039, "dalla": 1039, "card": 1039, "9043": 1039, "10112": 1039, "logistic_regression_path": [1039, 1040], "11724": 1039, "9939": 1039, "westov": 1039, "10998": 1039, "vazelh": [1039, 1040, 1041], "10071": 1039, "10153": 1039, "d\u00f6pfert": 1039, "10095": 1039, "cv_valu": 1039, "10297": 1039, "mabel": [1039, 1043], "10581": 1039, "yacin": 1039, "mazari": 1039, "10687": 1039, "10836": 1039, "aishwarya": 1039, "10397": 1039, "10992": 1039, "11327": 1039, "11905": 1039, "9837": 1039, "10593": 1039, "10610": 1039, "8554": 1039, "9775": 1039, "10827": 1039, "osa": 1039, "8066": 1039, "10587": 1039, "3840": 1039, "niederb\u00fchl": 1039, "9521": 1039, "11124": 1039, "arya": 1039, "11160": 1039, "barkhorn": 1039, "11679": 1039, "pacha": 1039, "10845": 1039, "perez": [1039, 1046], "parra": 1039, "toledano": 1039, "10999": 1039, "memoryerror": [1039, 1043], "11135": 1039, "10377": 1039, "9786": 1039, "10093": 1039, "alexryndin": 1039, "9772": 1039, "9515": 1039, "liddel": 1039, "manh": 1039, "dao": 1039, "9851": 1039, "10280": 1039, "10336": 1039, "haoran": 1039, "basemixtur": [1039, 1040], "10740": 1039, "10869": 1039, "g\u00e9ron": 1039, "9686": 1039, "11310": 1039, "_fit_and_scor": 1039, "11576": 1039, "ronsin": [1039, 1040, 1048], "_run_search": 1039, "9599": 1039, "11006": 1039, "11557": 1039, "boucaud": 1039, "iid": 1039, "9085": 1039, "10677": 1039, "zhdanovich": 1039, "10982": 1039, "juliet": 1039, "lawton": 1039, "10928": 1039, "solutu": 1039, "immensu": 1039, "9257": 1039, "8190": 1039, "alcorn": 1039, "9681": 1039, "mottl": [1039, 1040], "10005": 1039, "10346": 1039, "tobia": [1039, 1044, 1046], "10887": 1039, "11136": 1039, "4394": 1039, "9579": 1039, "kober": 1039, "9655": 1039, "bjerr": 1039, "11556": 1039, "11774": 1039, "9456": 1039, "unexpectedli": 1039, "9304": 1039, "11144": [1039, 1040], "9151": 1039, "10521": 1039, "7668": 1039, "9647": 1039, "10195": 1039, "10192": 1039, "11272": 1039, "11467": 1039, "11505": 1039, "giusepp": [1039, 1040], "costa": [1039, 1044], "10210": 1039, "11520": 1039, "11011": 1039, "11005": 1039, "11308": 1039, "11206": 1039, "11306": 1039, "10437": 1039, "lucija": 1039, "gregov": 1039, "10452": 1039, "10181": 1039, "nirvan": [1039, 1043], "anjirbag": 1039, "9399": 1039, "10913": 1039, "rodrigo": 1039, "agundez": 1039, "10458": 1039, "9816": 1039, "newei": 1039, "11042": 1039, "11235": 1039, "active_features_": 1039, "feature_indices_": 1039, "n_values_": 1039, "9726": 1039, "10829": 1039, "gilberto": 1039, "olimpio": 1039, "10655": 1039, "python2": 1039, "10412": 1039, "jiongyan": 1039, "9497": 1039, "8361": 1039, "neo": 1039, "_criterion": 1039, "classificationcriterion": 1039, "regressioncriterion": 1039, "10325": 1039, "camil": [1039, 1047], "stap": 1039, "basedecisiontre": [1039, 1040, 1043], "10536": 1039, "ohayon": [1039, 1040, 1047], "11464": 1039, "stott": 1039, "10663": 1039, "10229": 1039, "11553": 1039, "10881": 1039, "sevin": 1039, "ridge_regress": [1039, 1040, 1046], "10306": 1039, "siebert": 1039, "11741": 1039, "11166": 1039, "pypy3": 1039, "v5": 1039, "11010": 1039, "lami": 1039, "11596": 1039, "marcu": 1039, "voss": 1039, "9569": 1039, "12462": 1039, "zachariah": 1039, "10474": 1039, "10500": 1039, "9701": 1039, "9378": 1039, "check_set_param": 1039, "7738": 1039, "alvin": 1039, "chiang": 1039, "8102": 1039, "ankita": 1039, "sinha": 1039, "check_methods_subset_invari": [1039, 1045], "10428": 1039, "check_sample_weights_pandas_seri": 1039, "11558": 1039, "211217613": 1039, "absolutelynowarranti": 1039, "richi": 1039, "halford": [1039, 1046, 1047], "adelr": 1039, "adityadaflapurkar": 1039, "aidan": 1039, "fitzgerald": 1039, "aishgrt1": 1039, "akash": 1039, "shivram": 1039, "lenail": [1039, 1043], "egg": 1039, "diaz": 1039, "amanda": [1039, 1042, 1043, 1044, 1045], "aniruddha": 1039, "annaayzenshtat": 1039, "antonio": [1039, 1041], "quinonez": 1039, "anubhav": 1039, "marwaha": 1039, "arik": 1039, "pamnani": 1039, "ozga": 1039, "arunava": 1039, "geron": [1039, 1044, 1045], "ayush": [1039, 1044], "bangda": 1039, "bastian": 1039, "venthur": 1039, "benn": 1039, "koonc": 1039, "cclauss": 1039, "chadi": 1039, "kamar": 1039, "holdgraf": 1039, "hirsch": 1039, "hogan": 1039, "cnx": 1039, "cwitt": 1039, "ferreira": [1039, 1044, 1045], "gomez": [1039, 1046], "klevebr": 1039, "shwed": 1039, "mohn": [1039, 1043], "danil": 1039, "baibak": [1039, 1040], "beach": 1039, "pickup": 1039, "derek": 1039, "niederhut": [1039, 1041], "dilutedsauc": 1039, "dlovel": 1039, "dor": 1039, "dougla": 1039, "duhaim": 1039, "tuzova": 1039, "eunji": 1039, "farahsae": 1039, "raimundo": 1039, "fenx": 1039, "frankhui": 1039, "franz": 1039, "wompner": 1039, "freija": 1039, "descamp": 1039, "frsi": 1039, "calvo": [1039, 1040], "georgi": [1039, 1042], "peev": [1039, 1042], "gkevinyen5418": 1039, "vermeil": 1039, "hongh": 1039, "hossein": [1039, 1040, 1041], "pourbozorg": [1039, 1040, 1041], "hristo": [1039, 1046], "hunan": 1039, "rostomyan": 1039, "iampat": 1039, "jaewon": 1039, "malcolm": 1039, "jami": 1039, "wolosonovich": 1039, "jeb": 1039, "bearer": 1039, "jinkun": 1039, "jjabl": 1039, "johnstott": 1039, "jotasi": 1039, "julietcl": 1039, "shenk": 1039, "karl": 1039, "kasper": 1039, "primdal": 1039, "lauritzen": 1039, "ksemb": 1039, "kuai": [1039, 1040], "kyeongpil": 1039, "kang": [1039, 1041], "kye": 1039, "kyledrogo": 1039, "l\u00e9o": 1039, "liutong": 1039, "lizao": 1039, "lkjcalc": 1039, "louib": [1039, 1040], "luciano": [1039, 1046], "luke": 1039, "persola": 1039, "markiwanchyshyn": 1039, "marsgui": 1039, "gubri": [1039, 1040], "koko": [1039, 1045, 1046], "copeland": [1039, 1040], "meghann": [1039, 1041], "minh": 1039, "jamaoui": [1039, 1040, 1043], "mohammad": [1039, 1040], "shahebaz": 1039, "muayyad": 1039, "alsadi": 1039, "nabarun": 1039, "pal": [1039, 1045], "narendran": 1039, "santhanam": 1039, "suh": 1039, "eng": 1039, "av": 1039, "nicolau": 1039, "werneck": 1039, "titov": [1039, 1041, 1044, 1045], "nilesh": 1039, "kevlani": 1039, "notmatthancock": [1039, 1041], "nzw": 1039, "oren": 1039, "milman": 1039, "osaid": 1039, "rehman": 1039, "nasir": 1039, "fernand": [1039, 1045, 1046], "olden": 1039, "pierreablin": 1039, "pietruh": 1039, "pinaki": 1039, "nath": 1039, "chowdhuri": [1039, 1045], "piotr": [1039, 1040], "szyma\u0144ski": [1039, 1040], "pradeep": [1039, 1040], "raamana": [1039, 1040], "pravar": 1039, "mahajan": [1039, 1041], "qingi": 1039, "rajendra": 1039, "arora": [1039, 1046], "rankylau": 1039, "kosobrodov": 1039, "rragundez": 1039, "sagnik": 1039, "bhattacharya": 1039, "radhakrishnan": 1039, "saqib": 1039, "nizam": 1039, "shamsi": 1039, "satish": 1039, "gigant": [1039, 1041, 1046, 1047], "flennerhag": 1039, "sebastien": 1039, "shalil": 1039, "awalei": 1039, "shangwu": [1039, 1040], "sharad": 1039, "vijalapuram": 1039, "shenhanc78": 1039, "rastogi": 1039, "siftikha": 1039, "sinclert": 1039, "p\u00e9rez": 1039, "solutusimmensu": 1039, "somya": 1039, "anand": [1039, 1043], "srajan": 1039, "paliw": 1039, "sriharsha": [1039, 1040], "hatwar": [1039, 1040], "mcdowel": 1039, "syonekura": 1039, "takanori": 1039, "hayashi": 1039, "tarcusx": 1039, "theriley106": 1039, "heavei": 1039, "augspurg": [1039, 1041], "trishnendu": 1039, "ghorai": 1039, "twosigmajab": 1039, "umar": [1039, 1040], "farouk": [1039, 1040], "urvang": [1039, 1041], "patel": [1039, 1041, 1042, 1043, 1045], "vadim": [1039, 1043, 1044], "markovtsev": 1039, "vinit": 1039, "vinod": 1039, "viraj": 1039, "mavani": 1039, "navkal": 1039, "vqean3": [1039, 1040], "vufg": 1039, "wallygauz": 1039, "wdevazelh": 1039, "barnett": 1039, "rosenfeld": 1039, "yime": 1039, "ymazari": 1039, "yufeng": 1039, "griffith": [1039, 1040], "z\u00e9": 1039, "vin\u00edciu": 1039, "zhenq": 1039, "zhiqe": 1039, "xiao": [1039, 1041, 1044, 1045, 1046, 1047, 1048], "couldn": [1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "12955": 1040, "klopfer": 1040, "14197": 1040, "14024": 1040, "nicolashug": 1040, "13974": 1040, "hoang": [1040, 1041], "fhoang7": 1040, "14393": 1040, "guillem": [1040, 1041, 1046], "subi": [1040, 1041, 1046], "14087": 1040, "14067": 1040, "stalei": [1040, 1041], "14092": 1040, "14053": 1040, "13947": 1040, "instanci": 1040, "13910": 1040, "13894": 1040, "myatt": [1040, 1041], "min_max_axi": 1040, "13741": 1040, "roddi": [1040, 1041], "macsween": [1040, 1041], "14309": 1040, "13864": 1040, "paresh": [1040, 1041], "13877": 1040, "_sag": 1040, "sag_solv": 1040, "3591": 1040, "13317": 1040, "13157": 1040, "13086": 1040, "cole": 1040, "13485": 1040, "assia": 1040, "benbihi": 1040, "13651": 1040, "reloc": 1040, "13486": 1040, "13427": 1040, "couvreur": [1040, 1041], "9069": 1040, "13835": 1040, "10727": 1040, "wood": 1040, "13250": 1040, "13241": 1040, "12143": 1040, "11650": 1040, "non_negative_factor": [1040, 1042, 1043, 1044, 1048], "12988": 1040, "8769": 1040, "11000": 1040, "thibault": 1040, "sejourn": 1040, "changedbehaviourwarn": 1040, "11526": 1040, "6848": 1040, "glemaitr": [1040, 1041, 1043], "11727": 1040, "13266": 1040, "13545": 1040, "sorro": 1040, "12807": 1040, "12513": 1040, "12543": 1040, "storch": 1040, "13260": 1040, "13283": 1040, "13524": 1040, "13174": 1040, "13496": 1040, "13620": 1040, "12436": 1040, "12983": 1040, "13251": 1040, "joshuakennethjon": 1040, "12715": 1040, "13164": 1040, "12834": 1040, "leastsquareserror": 1040, "update_terminal_region": 1040, "6463": 1040, "movelikeriv": 1040, "13193": 1040, "12599": 1040, "13779": 1040, "13780": 1040, "12916": 1040, "13641": 1040, "8478": 1040, "12177": 1040, "12583": 1040, "13601": 1040, "danylo": 1040, "densif": 1040, "13240": 1040, "bartosz": 1040, "13562": 1040, "11646": 1040, "11699": 1040, "make_dataset": 1040, "13336": 1040, "toleranbc": 1040, "11754": 1040, "13397": 1040, "fagan": 1040, "12174": 1040, "12972": 1040, "lucio": 1040, "fernandez": 1040, "arjona": 1040, "coeffeci": 1040, "13279": 1040, "13328": 1040, "13389": 1040, "basesgdclassifi": 1040, "13422": 1040, "cl\u00e9ment": [1040, 1044, 1046], "doumouro": 1040, "unhandl": 1040, "13363": 1040, "12821": 1040, "13350": 1040, "j\u00e9r\u00f4me": [1040, 1041, 1042, 1048], "dock\u00e8": [1040, 1041, 1042, 1048], "9907": 1040, "12232": 1040, "sangeeth": 1040, "11179": 1040, "13151": 1040, "12568": 1040, "8216": 1040, "romuald": 1040, "menuet": 1040, "12732": 1040, "12334": 1040, "13607": 1040, "12855": 1040, "pawel": 1040, "sendyk": 1040, "13628": 1040, "13447": 1040, "10580": 1040, "sandra": [1040, 1046], "mitrov": 1040, "13554": 1040, "celelibi": 1040, "13142": 1040, "11354": 1040, "12613": 1040, "12669": 1040, "torrella": [1040, 1041, 1047], "12861": 1040, "8773": 1040, "13366": 1040, "fournier": 1040, "10440": 1040, "12222": 1040, "10058": 1040, "chiotelli": 1040, "12279": 1040, "12582": 1040, "my_pipelin": 1040, "2568": 1040, "make_": 1040, "11364": 1040, "baze": 1040, "petrushev": 1040, "__len__": 1040, "13439": 1040, "12908": 1040, "drew": 1040, "13253": 1040, "12116": 1040, "12197": 1040, "12251": 1040, "float16": 1040, "13007": 1040, "raffaello": 1040, "baluyot": 1040, "13333": 1040, "13459": 1040, "hunter": 1040, "mcgushion": 1040, "8508": 1040, "6261": 1040, "vettigli": 1040, "justglow": 1040, "12300": 1040, "11458": 1040, "mitar": 1040, "milutinov": 1040, "12344": 1040, "13549": 1040, "warn_on_dtyp": 1040, "check_pairwise_arrai": 1040, "13382": 1040, "prathmesh": 1040, "saval": 1040, "11705": 1040, "11973": 1040, "our_rand_r": 1040, "madhura": [1040, 1042, 1043, 1046, 1047], "parikh": [1040, 1045, 1046, 1047, 1048], "13531": 1040, "check_fit_idempot": 1040, "alberto": [1040, 1044, 1045], "torr": 1040, "amourav": 1040, "assiaben": 1040, "micha\u0142owski": 1040, "brentfagan": 1040, "chenal": [1040, 1041, 1043], "choe": 1040, "drewmjohnston": 1040, "dror": 1040, "atariah": 1040, "esvhd": 1040, "falak": 1040, "gandenberg": 1040, "luqi": 1040, "jf": 1040, "kulbear": 1040, "leandro": [1040, 1044], "hermida": [1040, 1044], "luk": 1040, "manimaran": [1040, 1042, 1043, 1044, 1045], "gaido": 1040, "marinelm": 1040, "masstran": 1040, "roeschk": 1040, "aftab": 1040, "abdela": 1040, "ibraheem": 1040, "mwestt": 1040, "iijima": 1040, "oresti": 1040, "osman": [1040, 1046], "flanagan": [1040, 1041], "soriano": 1040, "peai": 1040, "pim": 1040, "haan": 1040, "raf": 1040, "rajdeep": 1040, "dua": 1040, "ra\u00fal": 1040, "garc\u00eda": [1040, 1041, 1046], "lekhwani": 1040, "varma": 1040, "shiyu": 1040, "duan": [1040, 1042], "smari": [1040, 1041, 1042], "st\u00e9phane": [1040, 1041, 1045, 1046], "surgan12": 1040, "thibsej": 1040, "xhan": 1040, "xinyuliu12": 1040, "zayd": 1040, "hammoudeh": 1040, "16397": [1041, 1042], "16500": 1041, "16505": 1041, "16076": 1041, "shack": [1041, 1042, 1043], "15930": 1041, "inder128": 1041, "15810": 1041, "15898": 1041, "gargsya": 1041, "15933": 1041, "15760": 1041, "15888": 1041, "15936": 1041, "dizietasahi": 1041, "15879": 1041, "bibhash": [1041, 1042], "chandra": [1041, 1042, 1045], "mitra": [1041, 1042, 1046], "15937": 1041, "blyston": [1041, 1042], "15863": 1041, "abstractmethod": 1041, "_check_x": 1041, "basenb": 1041, "15996": 1041, "brigitta": [1041, 1042, 1043, 1047], "sip\u0151cz": [1041, 1042, 1043, 1047], "15751": 1041, "tirth": [1041, 1042], "15868": 1041, "nikla": [1041, 1042], "smedemark": 1041, "marguli": 1041, "15797": 1041, "15947": 1041, "revamp": 1041, "14849": 1041, "_name_estim": 1041, "_gb": 1041, "facto": 1041, "_birch": 1041, "9250": 1041, "12927": 1041, "deprecationwarn": 1041, "interfer": 1041, "hinder": 1041, "15080": 1041, "14464": 1041, "13575": 1041, "10482": 1041, "13726": 1041, "shuzh": 1041, "9288": 1041, "15057": 1041, "korolev": 1041, "15120": 1041, "7943": 1041, "12303": 1041, "14510": 1041, "14890": 1041, "miguel": 1041, "cabrera": 1041, "14544": 1041, "15304": 1041, "jaim": 1041, "ferrando": 1041, "huerta": 1041, "12068": 1041, "12145": 1041, "13609": 1041, "camila": 1041, "williamson": 1041, "15661": 1041, "15160": 1041, "14259": 1041, "14764": 1041, "14740": 1041, "st\u00e9phan": 1041, "tulken": 1041, "14623": 1041, "sarra": 1041, "habchi": 1041, "15257": 1041, "willocx": 1041, "12650": 1041, "13960": 1041, "multiouput": 1041, "14908": 1041, "martina": [1041, 1043], "vila": [1041, 1043], "15382": 1041, "14933": 1041, "15138": 1041, "cusick": 1041, "14406": 1041, "14012": 1041, "faouzi": [1041, 1042], "13769": 1041, "14194": 1041, "least_absolute_devi": [1041, 1043, 1044], "13896": 1041, "13933": 1041, "14710": 1041, "categorical_crossentropi": [1041, 1045], "14869": 1041, "14682": 1041, "hancock": 1041, "5963": 1041, "pablo": [1041, 1044, 1045], "dubou": 1041, "14287": 1041, "15375": 1041, "14305": 1041, "14114": 1041, "15084": 1041, "14294": 1041, "14907": 1041, "14602": 1041, "chawla": 1041, "vectorizermixin": 1041, "14430": 1041, "strip_accents_unicod": 1041, "15100": 1041, "gradi": 1041, "overflowerror": 1041, "15463": 1041, "norvan": 1041, "sahin": 1041, "14520": 1041, "11635": 1041, "alec": 1041, "13704": 1041, "15557": 1041, "14378": 1041, "masashi": [1041, 1043], "shibata": 1041, "ashim": 1041, "bhattarai": 1041, "15010": 1041, "skip_comput": 1041, "13773": 1041, "14356": 1041, "15393": 1041, "venkatachalam": [1041, 1042, 1043, 1044, 1045], "14646": 1041, "14028": 1041, "15429": 1041, "14706": 1041, "14108": 1041, "14170": 1041, "14296": 1041, "13618": 1041, "13995": 1041, "14458": 1041, "14591": 1041, "14864": 1041, "15044": 1041, "15086": 1041, "15038": 1041, "15082": 1041, "13213": 1041, "14647": 1041, "linalgerror": 1041, "13393": 1041, "13707": 1041, "training_data_": 1041, "14357": 1041, "14900": 1041, "socastro": [1041, 1047], "9951": 1041, "14936": 1041, "15083": 1041, "12789": 1041, "15274": 1041, "13938": 1041, "15049": 1041, "toccac": 1041, "ptocca": 1041, "13231": 1041, "dong": 1041, "13467": 1041, "14595": 1041, "14865": 1041, "l\u00e9onard": [1041, 1046], "binet": [1041, 1046], "14732": 1041, "14417": 1041, "15625": 1041, "12258": 1041, "14898": 1041, "matcovici": 1041, "14593": 1041, "reboul": 1041, "14549": 1041, "14704": 1041, "15096": 1041, "14629": 1041, "15488": 1041, "15490": 1041, "12569": 1041, "bicker": 1041, "9597": 1041, "wenbo": [1041, 1043], "zhao": [1041, 1043, 1044, 1045, 1046], "14336": 1041, "dexter": 1041, "9274": 1041, "perri": 1041, "13806": 1041, "ana\u00ebl": 1041, "beaugnon": 1041, "15119": 1041, "15053": 1041, "13290": 1041, "13987": 1041, "_pairwis": [1041, 1043], "13925": 1041, "robson": 1041, "15524": 1041, "xun": [1041, 1043], "12557": 1041, "14286": 1041, "15099": 1041, "baselibsvm": 1041, "_sparse_fit": 1041, "14894": 1041, "danna": 1041, "naser": 1041, "12887": 1041, "15028": 1041, "guan": 1041, "14381": 1041, "11232": 1041, "sievert": 1041, "10815": 1041, "14035": 1041, "14475": 1041, "14538": 1041, "14872": 1041, "upcast": [1041, 1045], "15094": 1041, "choose_check_classifiers_label": 1041, "enforce_estimator_tags_i": 1041, "mock": 1041, "mockdatafram": 1041, "checkingclassifi": 1041, "newton_cg": 1041, "random_choice_csc": 1041, "fast_dict": 1041, "parallel_help": 1041, "14902": 1041, "14971": 1041, "nep": 1041, "14702": 1041, "13013": 1041, "13875": 1041, "14680": 1041, "check_classifier_multioutput": 1041, "check_regressor_multioutput": 1041, "13392": 1041, "rok": 1041, "mihevc": 1041, "check_transformer_data_not_an_arrai": 1041, "mro": [1041, 1042], "14884": 1041, "alphonsu": 1041, "abbi": [1041, 1042], "popa": [1041, 1042], "abdur": 1041, "rahmaan": 1041, "janhang": 1041, "abenbihi": 1041, "abhinav": [1041, 1044], "sagar": 1041, "jana": 1041, "lagat": 1041, "alessandro": [1041, 1043, 1046], "surac": 1041, "siqueira": 1041, "alexgoryainov": 1041, "itk": [1041, 1042, 1043], "alexshack": [1041, 1042, 1043], "akinkunl": 1041, "kaseorg": 1041, "maldonado": [1041, 1044], "angela": [1041, 1042, 1046], "ambroz": [1041, 1042], "anisha": 1041, "keshavan": 1041, "gutierrez": 1041, "anuja": 1041, "archana": [1041, 1043], "alva": 1041, "arnaudstiegl": 1041, "arpanchowdhri": 1041, "ashimb9": 1041, "ayomid": 1041, "bamidel": 1041, "baran": 1041, "buluttekin": 1041, "barrycg": 1041, "bill": [1041, 1042], "mill": 1041, "biswadip": 1041, "mandal": 1041, "blackd0t": 1041, "barklei": 1041, "c56poni": 1041, "camilaagw": 1041, "cartman_nabana": 1041, "catajara": 1041, "cgsavard": [1041, 1042], "vesteghem": 1041, "dakota": 1041, "grusak": 1041, "datenbergwerk": 1041, "dormagen": 1041, "deeplook": 1041, "drgfreeman": 1041, "cashman": 1041, "edvardlindelof": 1041, "ndirangu": [1041, 1045], "eunseop": 1041, "jeong": 1041, "fanni": 1041, "federicopisanu": 1041, "divo": 1041, "flaviomorelli": 1041, "francidona": 1041, "franco": 1041, "luqu": 1041, "freder": 1041, "haas": 1041, "g0g0gadget": 1041, "altai": 1041, "vale": 1041, "rio": [1041, 1043, 1044, 1045], "ganevgv": 1041, "gdex1": 1041, "getgaurav2": 1041, "gideon": 1041, "sonoiya": 1041, "gpapadok": [1041, 1045], "mogavero": 1041, "h4dr1en": 1041, "hadshirt": 1041, "hailei": [1041, 1042], "nguyen": [1041, 1042, 1045, 1046], "hannah": [1041, 1043, 1045], "bruce": [1041, 1042], "macdonald": [1041, 1042], "honglu": 1041, "ingrid": 1041, "spielman": 1041, "a16": [1041, 1042], "jaehong": 1041, "jai": [1041, 1045], "jeromedock": 1041, "jesper": 1041, "dramsch": 1041, "joanna": 1041, "ortiz": [1041, 1047], "kanika": 1041, "sabharw": 1041, "katarina": [1041, 1043], "slama": [1041, 1043], "kellycarmodi": 1041, "eth": 1041, "kensuk": 1041, "arai": 1041, "kesshi": [1041, 1042], "kevad": 1041, "lofti": [1041, 1042], "winata": [1041, 1043], "sheng": 1041, "dolmatov": 1041, "kirthi": 1041, "shankar": 1041, "sivamani": 1041, "katyal": 1041, "lakshmi": 1041, "krishnan": 1041, "lalliacqua": [1041, 1044], "lbfin": 1041, "loopym": 1041, "lostcoast": 1041, "huynh": [1041, 1043], "lrjball": [1041, 1042], "roeder": 1041, "maggiecheg": [1041, 1045], "maithreyi": 1041, "venkatesh": 1041, "maltimor": 1041, "maocx": 1041, "douriez": [1041, 1042], "oywa": 1041, "aladago": 1041, "mbillingr": 1041, "clare": 1041, "micah": 1041, "miguelbarao": 1041, "mina": [1041, 1042], "naghshhnejad": [1041, 1042], "motmoti": 1041, "mschaffenroth": 1041, "natasha": 1041, "nezar": 1041, "nidhin": 1041, "pattaniyil": 1041, "nishan": 1041, "mann": 1041, "nitya": 1041, "mandyam": 1041, "novaya": [1041, 1044], "nxorabl": 1041, "oleg": 1041, "stikhin": 1041, "saleem": 1041, "panpiort8": [1041, 1043], "paula": [1041, 1042], "poorna": [1041, 1043], "pspachtholz": [1041, 1042, 1043], "qdeffens": [1041, 1044], "garg": [1041, 1042], "rapha\u00ebl": 1041, "bournhonesqu": 1041, "reza": 1041, "gharibi": 1041, "payn": 1041, "rlm": 1041, "juergen": [1041, 1046], "sanjabi": 1041, "ruchitagard": 1041, "ruth": 1041, "waithera": 1041, "sackei": 1041, "samesh": [1041, 1042], "lakhotia": [1041, 1042], "sewook": 1041, "dare": 1041, "shreya": 1041, "simoncw": 1041, "smujjiga": 1041, "s\u00f6nke": 1041, "behrend": 1041, "soumirai": 1041, "steinfurt": [1041, 1043], "cowlei": 1041, "th0rwa": [1041, 1042], "theoptip": [1041, 1042], "theotheo": 1041, "thierno": 1041, "ibrahima": 1041, "diop": 1041, "schmitt": [1041, 1042], "tilen": 1041, "kusterl": 1041, "timsaur": 1041, "tola": 1041, "topisan": 1041, "ttang131": 1041, "veerlosar": 1041, "luzgin": 1041, "jeanselm": 1041, "lostanlen": 1041, "vnherdeiro": 1041, "wendi": 1041, "willdarnel": 1041, "wolframalpha": 1041, "xcjason": 1041, "martian": 1041, "xsat": 1041, "yinglr": 1041, "yokasr": 1041, "maxin": [1041, 1042], "yulia": 1041, "zamrii": 1041, "feng": [1041, 1043, 1044, 1045], "17959": 1042, "17848": 1042, "17742": 1042, "17995": 1042, "thomaz": 1042, "santana": [1042, 1045], "dsouza": [1042, 1043, 1044, 1045], "17433": 1042, "17985": 1042, "multinomialdevi": 1042, "logloss": 1042, "17694": 1042, "rempfler": 1042, "tsutomu": 1042, "kusanagi": [1042, 1044], "17357": 1042, "18016": 1042, "x_copi": 1042, "17914": 1042, "15730": 1042, "forrest": [1042, 1043], "17309": 1042, "swier": [1042, 1043], "heer": 1042, "17812": 1042, "bruno": [1042, 1043, 1044], "idl": 1042, "17235": 1042, "17204": 1042, "changed_onli": 1042, "17205": 1042, "15005": [1042, 1044], "slep009": [1042, 1044, 1045], "estimator_samples_": 1042, "16149": 1042, "11950": 1042, "11514": 1042, "16075": 1042, "16484": 1042, "16257": 1042, "simona": [1042, 1043, 1044], "maggio": [1042, 1043, 1044], "16801": 1042, "rcwoolston": 1042, "16431": 1042, "14048": 1042, "15963": 1042, "16084": 1042, "15950": 1042, "stephani": 1042, "15980": 1042, "wconnel": 1042, "15709": 1042, "15707": 1042, "maciej": 1042, "mikulski": 1042, "16006": 1042, "rushabh": 1042, "vasani": 1042, "streamhandl": 1042, "logger": 1042, "handler": 1042, "16451": 1042, "16280": 1042, "16837": 1042, "wornbb": 1042, "15669": 1042, "chaitanya": 1042, "16224": 1042, "schwetlick": [1042, 1043], "gelavizh": 1042, "ahmadi": 1042, "marija": [1042, 1043], "vlajic": [1042, 1043], "wheeler": [1042, 1043], "16841": 1042, "16655": 1042, "16718": 1042, "miotto": 1042, "16981": 1042, "g\u00f3rski": [1042, 1043], "14696": 1042, "14516": 1042, "15582": 1042, "16069": 1042, "bail": 1042, "16183": 1042, "16182": 1042, "santhosh": 1042, "16437": 1042, "hwan": 1042, "cho": 1042, "16539": 1042, "deros": 1042, "16692": 1042, "16663": 1042, "15834": 1042, "santiago": 1042, "mola": 1042, "16103": 1042, "divyaprabha": 1042, "selectormixin": 1042, "16132": 1042, "trimeta": 1042, "15503": 1042, "15782": 1042, "plgreenliru": 1042, "16403": 1042, "narendra": 1042, "mukherje": 1042, "16508": 1042, "15864": 1042, "14300": 1042, "15436": 1042, "15652": 1042, "15179": 1042, "angelaambroz": 1042, "15773": 1042, "15655": 1042, "14848": 1042, "absgrad": 1042, "_newton_cg": 1042, "16266": 1042, "standard_coef_": 1042, "standard_intercept_": 1042, "average_coef_": 1042, "average_intercept_": 1042, "16261": 1042, "brandt": 1042, "16849": 1042, "14264": 1042, "17021": 1042, "16323": 1042, "16362": 1042, "16442": 1042, "parson": [1042, 1044], "rick": 1042, "mackenbach": 1042, "16993": 1042, "emit": 1042, "15622": 1042, "mors": 1042, "15918": 1042, "kubin": 1042, "fit_grid_point": 1042, "16401": 1042, "pratama": 1042, "sutiono": 1042, "15953": 1042, "15959": 1042, "16111": 1042, "16090": 1042, "jayaratn": [1042, 1043, 1046, 1047], "14075": 1042, "meyer89": 1042, "16117": 1042, "15785": 1042, "16245": 1042, "16585": 1042, "15762": 1042, "16466": 1042, "16632": 1042, "maura": 1042, "pintor": 1042, "battista": 1042, "biggio": 1042, "15946": 1042, "ngshya": 1042, "32767": 1042, "mersenn": 1042, "twister": 1042, "31bit": 1042, "63bit": 1042, "crude": 1042, "postprocessor": 1042, "lemir": 1042, "13511": 1042, "kennel": 1042, "11296": 1042, "15558": 1042, "15806": 1042, "16331": 1042, "batiss": 1042, "15926": 1042, "16021": 1042, "sparsearrai": 1042, "16728": 1042, "uint": 1042, "17032": 1042, "_safe_tag": 1042, "16950": 1042, "15380": 1042, "16726": 1042, "16112": 1042, "16622": 1042, "17061": 1042, "aleksandra": 1042, "kocot": 1042, "alonso": [1042, 1044], "allend": [1042, 1044], "ana": [1042, 1044], "casado": 1042, "ankit810": 1042, "arunav": 1042, "konwar": 1042, "maingret": 1042, "beier": 1042, "berni": 1042, "bharathi": 1042, "brigi": [1042, 1043], "castachick": 1042, "castor": 1042, "corri": 1042, "bartelheim": 1042, "dani\u00ebl": 1042, "gelder": 1042, "daphn": 1042, "breuer": 1042, "cort": [1042, 1043, 1046, 1047], "dbauer9": 1042, "borovikova": 1042, "eln": 1042, "emili": [1042, 1043], "leung": 1042, "evgeni": 1042, "chasnovski": 1042, "fabiana": 1042, "facundo": [1042, 1045], "ferr\u00edn": 1042, "franziska": 1042, "boenisch": 1042, "bolmier": [1042, 1043, 1047], "gholdman1": 1042, "gonthier": 1042, "hao": [1042, 1043, 1045, 1046], "chun": [1042, 1043, 1045, 1046, 1047], "haoyin": [1042, 1044, 1045], "h\u00e9lion": 1042, "bourboux": 1042, "himanshu": [1042, 1045], "hirofumi": [1042, 1043], "suzuki": [1042, 1043], "huangk10": 1042, "kemenad": 1042, "hye": 1042, "sung": 1042, "indecisiveus": [1042, 1043], "inderjeet": 1042, "jjmistri": 1042, "haitz": [1042, 1044, 1045], "legarreta": [1042, 1044, 1045], "gorro\u00f1o": [1042, 1044, 1045], "judithabk6": 1042, "jumon": 1042, "kathryn": 1042, "krishnachaitanya9": 1042, "gia": 1042, "thuan": 1042, "lkubin": 1042, "lopusz": 1042, "lucgiffon": 1042, "lucyleeow": 1042, "kemk": 1042, "magda": 1042, "zielinska": 1042, "mandi": [1042, 1045], "gu": [1042, 1043, 1045], "manish": 1042, "aradwad": 1042, "mariana": 1042, "meirel": 1042, "mariel": 1042, "mc4229": 1042, "shoemak": 1042, "micha\u0142": 1042, "s\u0142apek": 1042, "mojca": 1042, "bertoncelj": 1042, "narendramukherje": 1042, "nicolasservel": 1042, "nkish": 1042, "noa": 1042, "tamir": [1042, 1045], "olicairn": 1042, "ur": 1042, "lenz": [1042, 1046], "delanou": 1042, "qizhi": 1042, "quang": 1042, "rachelcjordan": 1042, "raduspaimoc": 1042, "riccardo": [1042, 1048], "folloni": 1042, "ritchi": 1042, "rori": 1042, "hartong": 1042, "redden": 1042, "sambhav": 1042, "kothari": 1042, "santhoshbala18": 1042, "sarat": 1042, "addep": 1042, "scibol": 1042, "kie\u00dfl": 1042, "sergiodsr": 1042, "shiki": 1042, "shubh": 1042, "chatterje": 1042, "simonamaggio": [1042, 1043, 1044], "snowhit": 1042, "stareh": 1042, "marsh": 1042, "sunmi": 1042, "yoon": 1042, "talgatomarov": 1042, "tamirlan1": 1042, "nonner": 1042, "vink": [1042, 1044], "tiphain": 1042, "viard": 1042, "titu": 1042, "vachan": 1042, "vandana": 1042, "iyer": 1042, "waelbenamara": 1042, "wderos": 1042, "wenliwyan": 1042, "windber": 1042, "19579": 1043, "19646": 1043, "stopiter": 1043, "19922": 1043, "19732": 1043, "ishikawa": [1043, 1044], "19407": 1043, "ushtanit": [1043, 1044], "19982": 1043, "19939": 1043, "halvic": 1043, "19703": 1043, "sobkevich": 1043, "villaz\u00f3n": 1043, "terraza": 1043, "fonari": [1043, 1044], "19182": 1043, "yosuk": [1043, 1044], "kobayashi": [1043, 1044], "19721": 1043, "19659": 1043, "19211": 1043, "19847": 1043, "xiaoyu": 1043, "chai": [1043, 1046, 1047], "19308": 1043, "19234": 1043, "19727": 1043, "delong": [1043, 1044], "19888": 1043, "19924": 1043, "19271": 1043, "zhaowei": 1043, "19580": 1043, "brice": [1043, 1044], "adamson": 1043, "wil": 1043, "yegelwel": 1043, "css": 1043, "19417": 1043, "19179": 1043, "19126": 1043, "17448": 1043, "17107": 1043, "17546": 1043, "17856": 1043, "17984": 1043, "riedmann": 1043, "francesco": [1043, 1046], "casalegno": 1043, "18052": 1043, "sean": [1043, 1044, 1046], "stallei": 1043, "17937": 1043, "counts_": 1043, "init_size_": 1043, "17864": 1043, "17616": 1043, "18167": 1043, "18256": 1043, "jayratn": 1043, "16392": 1043, "17095": 1043, "18746": 1043, "norm_y_weight": 1043, "x_mean_": 1043, "y_mean_": 1043, "x_std_": 1043, "y_std_": 1043, "18768": 1043, "18302": 1043, "md5": 1043, "checksum": 1043, "14800": 1043, "17396": 1043, "jiaxiang": 1043, "17491": 1043, "18280": 1043, "17499": 1043, "17610": 1043, "18525": 1043, "11064": 1043, "17414": 1043, "18149": 1043, "17679": 1043, "18528": 1043, "villanova": [1043, 1044], "14446": 1043, "18394": 1043, "16985": 1043, "garbag": 1043, "18334": 1043, "multicor": [1043, 1044], "18341": 1043, "egor": 1043, "smirnov": 1043, "18410": 1043, "17702": 1043, "18326": 1043, "changedbehaviorwarn": 1043, "nonblasdotwarn": 1043, "17804": 1043, "17367": 1043, "15427": 1043, "gangesh": 1043, "gudmalwar": 1043, "6545": 1043, "17159": 1043, "15361": 1043, "17878": 1043, "17090": 1043, "_check_bounds_param": 1043, "12638": 1043, "lannuzel": 1043, "17526": 1043, "ayako": 1043, "yagi": 1043, "17612": 1043, "srimukh": 1043, "sripada": 1043, "16493": 1043, "darshan": 1043, "15636": 1043, "18987": 1043, "16619": 1043, "16906": 1043, "roei": 1043, "kahni": 1043, "18293": 1043, "16289": 1043, "kishimoto": 1043, "18639": 1043, "13003": 1043, "s\u00e1nchez": 1043, "18545": 1043, "laurenz": 1043, "reitsam": 1043, "17578": 1043, "knox": 1043, "6624": 1043, "marijn": 1043, "vliet": 1043, "18121": 1043, "18607": 1043, "fhaselbeck": 1043, "18622": 1043, "haesun": [1043, 1046, 1047], "10493": 1043, "17997": 1043, "maisonneuv": 1043, "square_dist": 1043, "17662": 1043, "18278": 1043, "17412": 1043, "16625": 1043, "10591": 1043, "karnowski": 1043, "plot_det_curv": [1043, 1044], "18176": 1043, "10708": 1043, "15007": 1043, "hathidara": 1043, "10711": 1043, "17192": 1043, "avi": [1043, 1044], "17225": 1043, "17569": 1043, "17651": 1043, "mato": 1043, "17777": 1043, "shubhanshu": 1043, "mishra": [1043, 1044], "17826": 1043, "decal": 1043, "willard": 1043, "17935": 1043, "cari": 1043, "goltermann": 1043, "18114": 1043, "18405": 1043, "yakov": 1043, "pchelintsev": 1043, "13900": 1043, "17478": 1043, "teon": 1043, "13204": 1043, "kosic": 1043, "18527": 1043, "18343": 1043, "devi": 1043, "sandeep": 1043, "18595": 1043, "18222": 1043, "18266": 1043, "subrat": 1043, "sahu": 1043, "15126": 1043, "17987": 1043, "17233": 1043, "zolisa": 1043, "bleki": 1043, "histgradientboost": 1043, "18124": 1043, "brocchini": 1043, "armstrong": 1043, "17427": 1043, "17038": 1043, "neighborsbas": [1043, 1046], "17148": 1043, "18691": 1043, "18370": 1043, "18612": 1043, "17603": 1043, "17604": 1043, "17606": 1043, "17608": 1043, "17609": 1043, "17633": 1043, "17661": 1043, "17932": 1043, "16352": 1043, "17759": 1043, "18269": 1043, "17876": 1043, "18429": 1043, "biernat": 1043, "17317": 1043, "17406": 1043, "wick": 1043, "18406": 1043, "17833": 1043, "yashika": 1043, "18510": 1043, "18447": 1043, "16066": 1043, "18682": 1043, "16935": 1043, "17193": 1043, "16335": 1043, "14982": 1043, "11682": 1043, "patric": [1043, 1044], "15763": 1043, "16530": 1043, "shuhua": 1043, "17386": 1043, "17187": 1043, "x_idx_sort": 1043, "17614": 1043, "check_methods_sample_order_invari": [1043, 1045], "17598": 1043, "ngo": 1043, "17992": 1043, "endian": 1043, "17644": 1043, "18508": 1043, "abo7atm": 1043, "spannbauer": 1043, "deodhar": 1043, "alexandracraciun": 1043, "amy12xx": 1043, "tiwari": 1043, "choraria": 1043, "subramaniyan": 1043, "kushwaha": 1043, "atsushi": [1043, 1044], "nukariya": [1043, 1044], "aura": 1043, "autoviz": 1043, "auto_viml": 1043, "avinash": 1043, "anak": 1043, "barankaraku": 1043, "barberogaston": 1043, "beatrizsmg": 1043, "mainy": 1043, "bossan": [1043, 1045, 1046, 1047], "pedigo": [1043, 1044], "bhavika": 1043, "devnani": 1043, "biprateep": 1043, "dei": 1043, "bmaisonn": 1043, "byron": 1043, "ceethinwa": [1043, 1044], "chaitanyamog": 1043, "clmbst": 1043, "coelhudo": 1043, "crispinlogan": [1043, 1046, 1047], "cristina": 1043, "mula": 1043, "darioka": [1043, 1045, 1046], "declan": 1043, "neill": 1043, "deeksha": 1043, "madan": 1043, "fiegel": [1043, 1044, 1046], "khoo": 1043, "eschibli": 1043, "fran": [1043, 1044, 1045], "larsson": [1043, 1044, 1045], "sheni": 1043, "genvalen": [1043, 1044, 1045, 1046, 1047], "kiragu": 1043, "gesa": 1043, "stupperich": 1043, "ghislain": 1043, "vaillant": 1043, "gim": 1043, "seng": 1043, "chevali": 1043, "bohl": [1043, 1045], "schole": 1043, "hitesh": 1043, "somani": 1043, "hoda1394": 1043, "moin": 1043, "hugorichard": 1043, "isuru": 1043, "wiryadi": 1043, "j0rd1smit": 1043, "jaehyun": 1043, "ahn": 1043, "tae": 1043, "hoctor": 1043, "vese": 1043, "jeevan": 1043, "jeroenpeterbo": 1043, "jhay": 1043, "jigna": 1043, "panchal": 1043, "jim0421": 1043, "joaquin": 1043, "gorb": 1043, "moya": 1043, "kartik": 1043, "chugh": 1043, "kaylani2": 1043, "kendrick": 1043, "cetina": 1043, "kenni": 1043, "isakov": 1043, "koki": 1043, "nishihara": 1043, "krum": [1043, 1045], "arnaudov": [1043, 1045], "oldja": 1043, "guitton": 1043, "mariam": 1043, "l\u00f6ning": 1043, "scheubrein": 1043, "megasari": 1043, "mathschi": 1043, "giudic": 1043, "milan": 1043, "straka": 1043, "muoki": 1043, "caleb": 1043, "haiat": 1043, "nadia": 1043, "tahiri": 1043, "ph": 1043, "hamada": 1043, "neil": 1043, "botelho": 1043, "nil": 1043, "noelano": 1043, "oj_lappi": 1043, "oleh": [1043, 1045], "kozynet": [1043, 1045], "pankaj": 1043, "jindal": 1043, "pardeep": 1043, "parthiv": 1043, "chigurupati": 1043, "pgithub": 1043, "probinette4": 1043, "pwalchessen": 1043, "rachel": [1043, 1046], "fischoff": 1043, "toshniw": 1043, "rafei": 1043, "iqbal": 1043, "rahul": 1043, "jakhar": 1043, "rachum": 1043, "ramyanp": [1043, 1044], "rauwuckl": 1043, "ravi": [1043, 1046], "kiran": 1043, "boggavarapu": 1043, "rishi": 1043, "advani": 1043, "rithvik": 1043, "romijnd": 1043, "tavenard": 1043, "rubi": 1043, "werman": 1043, "ryotaro": 1043, "tsukada": 1043, "sadak": 1043, "khandelw": 1043, "ezebunandu": 1043, "kimbinyi": 1043, "shail": 1043, "keller": 1043, "shao": [1043, 1044, 1045], "shooter23": [1043, 1044], "soledad": 1043, "galli": 1043, "subrat93": 1043, "sunitha": 1043, "selvan": 1043, "kusanagi2": 1043, "terenc": [1043, 1044], "honl": [1043, 1044], "thij": [1043, 1046, 1047], "thomas9292": 1043, "thorben": 1043, "tijanajovanov": 1043, "timo": 1043, "tnwei": 1043, "ufmay": 1043, "umberto": 1043, "lupo": 1043, "vika": [1043, 1045], "viniciu": [1043, 1044], "fuck": [1043, 1044], "violeta": 1043, "watchtheblur": 1043, "willpeppo": 1043, "xethan": 1043, "qianm": 1043, "yue": 1043, "yutaro": 1043, "ikeda": 1043, "zacchari": 1043, "ramzi": 1043, "zoj613": 1043, "21271": 1044, "21833": 1044, "siavash": 1044, "rezazadeh": 1044, "19210": 1044, "21295": 1044, "22050": 1044, "21991": 1044, "19869": 1044, "21481": [1044, 1045], "andr\u00e9": [1044, 1045, 1047], "babino": [1044, 1045], "disconnect": 1044, "21915": 1044, "21694": 1044, "minknowski": 1044, "cdist": 1044, "21741": 1044, "21871": 1044, "21845": 1044, "21517": 1044, "21917": 1044, "21552": 1044, "escap": [1044, 1046], "21493": 1044, "21199": 1044, "20638": 1044, "bohn\u00e9": 1044, "21179": 1044, "21195": 1044, "21130": 1044, "20761": 1044, "21251": 1044, "min_idf": 1044, "max_idf": 1044, "20752": 1044, "alek": [1044, 1045], "lefebvr": [1044, 1045], "21340": 1044, "21093": 1044, "21351": 1044, "cve": 1044, "28975": 1044, "21336": 1044, "_check_sample_weight": 1044, "only_non_neg": 1044, "20880": 1044, "andr\u00e1": [1044, 1045, 1046, 1047], "if_delegate_has_method": [1044, 1045], "21145": 1044, "zahlii": 1044, "21389": 1044, "20002": 1044, "19310": 1044, "least_squar": 1044, "19733": 1044, "lad": 1044, "absolute_loss": 1044, "20165": 1044, "18444": 1044, "18010": 1044, "threadsaf": 1044, "18736": 1044, "17443": 1044, "19641": 1044, "20087": 1044, "fauchereau": 1044, "19002": 1044, "19052": 1044, "yusuk": 1044, "nagasaka": 1044, "17622": 1044, "19024": 1044, "franki": 1044, "robertson": 1044, "20117": 1044, "natchiappan": [1044, 1045], "19883": 1044, "20597": 1044, "20899": 1044, "20200": 1044, "fit_": 1044, "partial_fit_": 1044, "19297": 1044, "20560": 1044, "18393": 1044, "bittarello": 1044, "19263": 1044, "19244": 1044, "18459": 1044, "nd": 1044, "18898": 1044, "ora": 1044, "phongpanagnam": 1044, "21080": 1044, "ledoit_wolf_shrinkag": 1044, "20416": 1044, "defoi": 1044, "20583": 1044, "19365": 1044, "ateif": 1044, "sara": 1044, "19669": 1044, "importlib": 1044, "pyoxid": 1044, "20297": 1044, "20209": 1044, "19011": 1044, "20729": 1044, "12069": 1044, "19046": 1044, "surya": [1044, 1045], "18433": 1044, "19198": 1044, "19159": 1044, "beno\u00eet": 1044, "mal\u00e9zieux": 1044, "19908": 1044, "20512": 1044, "20960": 1044, "cgroup": [1044, 1045], "quota": [1044, 1045], "20477": 1044, "19799": 1044, "19564": 1044, "19836": 1044, "19162": 1044, "10096": 1044, "fenil": 1044, "suchak": 1044, "20159": 1044, "murata": [1044, 1045], "20534": 1044, "19296": 1044, "19035": 1044, "19520": 1044, "18964": 1044, "19401": 1044, "relova": 1044, "17169": 1044, "dmytro": 1044, "lituiev": 1044, "20380": 1044, "pulido": 1044, "felip": [1044, 1045, 1046, 1047], "bidu": [1044, 1045], "rutter": 1044, "20515": 1044, "carsten": 1044, "allefeld": 1044, "19568": 1044, "shyam": 1044, "20207": 1044, "tomohiro": 1044, "endo": 1044, "20161": 1044, "shuhei": 1044, "kayawari": 1044, "arka204": [1044, 1046], "20431": 1044, "pfaffel": 1044, "19428": 1044, "hamoumi": 1044, "19411": 1044, "20959": 1044, "20554": 1044, "xiangyin": 1044, "kong": 1044, "9978": 1044, "10027": 1044, "16449": 1044, "20231": 1044, "naka": 1044, "19571": 1044, "20155": 1044, "oura": [1044, 1045, 1046], "19004": 1044, "midvidi": 1044, "19055": 1044, "19172": 1044, "19426": 1044, "19499": 1044, "strubel": 1044, "19616": 1044, "19391": 1044, "19390": 1044, "linearmodel": 1044, "17743": 1044, "17772": 1044, "17746": 1044, "17785": 1044, "17750": 1044, "17769": 1044, "20683": 1044, "19491": 1044, "19472": 1044, "shortest_path": 1044, "20531": 1044, "19415": 1044, "17036": 1044, "20326": 1044, "uttam": 1044, "9843": 1044, "19643": 1044, "attard": 1044, "19784": 1044, "18328": 1044, "20312": 1044, "divyanshu": 1044, "deoli": 1044, "18543": 1044, "20552": 1044, "19278": 1044, "20030": 1044, "tingshan": 1044, "18649": 1044, "rodion": 1044, "martynov": 1044, "20619": 1044, "baseshufflesplit": 1044, "20056": 1044, "pabloduque0": 1044, "prematur": 1044, "20904": 1044, "tomasz": 1044, "jakubek": [1044, 1045], "18925": 1044, "poznik": [1044, 1045, 1046], "18842": 1044, "19473": 1044, "jiefangxuanyan": 1044, "20072": 1044, "20842": 1044, "mart\u00edn": [1044, 1045], "19631": 1044, "19790": 1044, "flynn": [1044, 1046], "18368": 1044, "19483": 1044, "20526": 1044, "19069": 1044, "19041": 1044, "20250": 1044, "20652": 1044, "19934": 1044, "gleb": [1044, 1046, 1047], "levitskii": 1044, "19734": 1044, "robinson": 1044, "19752": 1044, "zhehao": [1044, 1045, 1046, 1047], "19527": 1044, "19788": 1044, "19356": 1044, "makoeppel": 1044, "19879": 1044, "19906": 1044, "20727": 1044, "20961": 1044, "n_input_features_": 1044, "20240": 1044, "20843": 1044, "18959": 1044, "wstate": 1044, "20023": 1044, "19336": 1044, "20272": 1044, "19459": 1044, "bezuidenhout": 1044, "clifford": 1044, "akai": 1044, "nettei": 1044, "19948": 1044, "20657": 1044, "19766": 1044, "20385": 1044, "_weighted_percentil": 1044, "huberlossfunct": 1044, "20528": 1044, "_safe_index": 1044, "20673": 1044, "is_scalar_nan": 1044, "assert_warn": 1044, "assert_warns_messag": 1044, "20521": 1044, "abdulelah": 1044, "mesfer": 1044, "adrian": [1044, 1045, 1046], "garcia": 1044, "badaracco": 1044, "sad\u0142ocha": 1044, "rubial": 1044, "alessia": 1044, "marcolini": 1044, "alihan": 1044, "zihna": 1044, "alin": 1044, "amol": 1044, "deshmukh": 1044, "pessoa": 1044, "anavelyz": 1044, "ashish": [1044, 1047], "ashvith": 1044, "shetti": 1044, "baam": [1044, 1045], "baptbillard": 1044, "bmalezieux": 1044, "bumblebe": 1044, "caherrera": 1044, "meli": [1044, 1045, 1046], "chrissobel": 1044, "yeh": 1044, "chuliang": 1044, "cliffordemmanuel": 1044, "conner": 1044, "shen": 1044, "dimitri": [1044, 1045, 1046, 1047], "papadopoulo": [1044, 1045, 1046, 1047], "orfano": [1044, 1045, 1046, 1047], "dmallia17": 1044, "ds_ana": 1044, "jardim": 1044, "edwinwenink": 1044, "eleni": 1044, "markou": 1044, "ericellwang": [1044, 1045], "ezri": 1044, "mudd": 1044, "fato": 1044, "morina": 1044, "hafner": 1044, "flyingdutchman23": 1044, "uwha": [1044, 1045], "bereng": 1044, "frederick": 1044, "frellwan": 1044, "vicent": [1044, 1045, 1046], "geroldcsend": 1044, "glen": 1044, "gl\u00f2ria": [1044, 1046], "mu\u00f1oz": [1044, 1046], "gregorystrubel": 1044, "groceryheist": 1044, "guiweb": 1044, "haidar": [1044, 1045], "almubarak": [1044, 1045], "moritz": [1044, 1046], "g\u00fcnther": 1044, "mirza": 1044, "harutaka": 1044, "kawamura": 1044, "hassan": 1044, "alsawadi": 1044, "geovan": [1044, 1045], "gome": [1044, 1045], "lima": [1044, 1045], "ilic": 1044, "ikko": 1044, "ashimin": 1044, "isaack": 1044, "mungui": 1044, "ishaan": 1044, "bhat": [1044, 1046, 1047, 1048], "ishan": [1044, 1045], "iwhalv": 1044, "preiss": 1044, "budarz": 1044, "jannik": 1044, "jennif": 1044, "jianzhu": 1044, "guo": 1044, "jnboehm": 1044, "johanwork": 1044, "paton": 1044, "n\u00e1pole": 1044, "julio": 1044, "julyrashchenko": 1044, "jvm": 1044, "kadatatlu": 1044, "kishor": 1044, "karen": 1044, "palacio": 1044, "kmatt10": 1044, "kobaski": 1044, "kot271828": 1044, "kunj": 1044, "kurumeyuta": 1044, "kxytim": 1044, "lacrosse91": 1044, "laveen": 1044, "bagai": 1044, "leonardo": 1044, "rocco": [1044, 1045, 1046], "uieda": 1044, "leopoldo": 1044, "corona": 1044, "lsturtew": 1044, "lucca": 1044, "quadro": 1044, "ly648499246": 1044, "mabu": 1044, "manaileng": 1044, "mariangela": 1044, "marielaraj": 1044, "hirzel": 1044, "mateo": 1044, "nore\u00f1a": 1044, "mathi": 1044, "batoul": 1044, "calcot": 1044, "prieur": 1044, "\u00f6zer": 1044, "miao": 1044, "cai": 1044, "karbownik": 1044, "michalkrawczyk": [1044, 1045], "mitzi": [1044, 1045], "mlondschien": 1044, "haseeb": [1044, 1045], "khoual": 1044, "jarir": 1044, "kanji": 1044, "nadim": 1044, "kawwa": 1044, "nanshan": 1044, "naozin555": 1044, "fultz": 1044, "nic": 1044, "annau": 1044, "stefani": [1044, 1046, 1047, 1048], "nigel": 1044, "bosch": 1044, "nodar": 1044, "okroshiashvili": 1044, "ogbonna": 1044, "chibuik": 1044, "ogordon100": 1044, "phongpanangam": 1044, "duqu": 1044, "ibieta": 1044, "jimenez": [1044, 1045], "lacouth": 1044, "olszewski": 1044, "dye": 1044, "pierreattard": [1044, 1045], "yve": 1044, "borgn": 1044, "pranayanchuri": 1044, "princ": 1044, "canuma": 1044, "putschblo": 1044, "ranjanikrishnan": 1044, "rene": 1044, "corneil": 1044, "ricardojnf": 1044, "richardscottoz": 1044, "sandi": 1044, "khosasi": 1044, "benhur": 1044, "flore": 1044, "shinehid": 1044, "shinnar": 1044, "tootoonian": 1044, "solosil": 1044, "kolawol": 1044, "stagg": 1044, "swpeas": 1044, "tfifi": 1044, "caswel": [1044, 1047], "timotheemathieu": 1044, "wolodzko": 1044, "tliu68": 1044, "uhmann": 1044, "tom1092": 1044, "tom\u00e1": [1044, 1045], "moreyra": 1044, "tommaso": 1044, "noto": 1044, "tsuga": 1044, "vang": 1044, "gkiasta": 1044, "vil\u00e9m": 1044, "zouhar": 1044, "vlasovet": 1044, "waijean": 1044, "whidou": 1044, "xiaoyuchai": 1044, "yasmeen": 1044, "alsaedi": 1044, "yoch": 1044, "yusukenagasaka": 1044, "yzhenman": 1044, "zeyusun": 1044, "zhaoweiwang": 1044, "msvcp140": 1045, "dll": 1045, "24631": 1045, "24446": 1045, "10805": 1045, "mathia": 1045, "23471": 1045, "24015": 1045, "23990": 1045, "23833": 1045, "24017": 1045, "sorski": [1045, 1046], "23395": 1045, "23636": 1045, "22063": 1045, "22059": 1045, "kurz": [1045, 1046], "23608": 1045, "23548": 1045, "24087": 1045, "23273": 1045, "23194": 1045, "23198": 1045, "lise": 1045, "kleiber": 1045, "23358": 1045, "23264": 1045, "feature_names_in": 1045, "23299": 1045, "23214": 1045, "collot": [1045, 1046], "baak": 1045, "23370": 1045, "23410": 1045, "compute_sample_weight": 1045, "23115": 1045, "22868": 1045, "multiindex": 1045, "22410": 1045, "23271": 1045, "21987": 1045, "22064": 1045, "22065": 1045, "22288": 1045, "22320": 1045, "21219": 1045, "21542": 1045, "23098": 1045, "22318": 1045, "23036": 1045, "binary_crossentropi": 1045, "23040": 1045, "23046": 1045, "22856": 1045, "21032": 1045, "18170": 1045, "21038": 1045, "14975": 1045, "22526": 1045, "23095": 1045, "silk": 1045, "20031": 1045, "krawczyk": 1045, "21148": 1045, "22255": 1045, "21881": 1045, "vassard": 1045, "22217": 1045, "21735": 1045, "22154": 1045, "22537": 1045, "iofal": 1045, "arisa": [1045, 1046], "22775": 1045, "22913": 1045, "randomgeek78": 1045, "22493": 1045, "19680": 1045, "thibaut": 1045, "22119": 1045, "22016": 1045, "22015": 1045, "19747": 1045, "attalla": 1045, "22498": 1045, "21482": 1045, "pujalt": 1045, "22412": 1045, "16605": 1045, "21901": 1045, "rileran": 1045, "23113": 1045, "ilion": 1045, "beyst": 1045, "21425": 1045, "stefanini": 1045, "16948": 1045, "patricio": 1045, "cerda": 1045, "22002": 1045, "21109": 1045, "iter_offset": 1045, "return_inner_stat": 1045, "inner_stat": 1045, "inner_stats_": 1045, "iter_offset_": 1045, "18975": 1045, "22111": 1045, "22181": 1045, "21334": 1045, "21705": 1045, "stanlei": [1045, 1046, 1047], "21432": 1045, "22806": 1045, "jihan": 1045, "benni": 1045, "21713": 1045, "haya": 1045, "21567": 1045, "maggi": 1045, "chege": 1045, "22300": 1045, "15948": 1045, "sysuresh": 1045, "22553": 1045, "19490": 1045, "ferrin": 1045, "22120": 1045, "15984": 1045, "okon": 1045, "22696": 1045, "22486": 1045, "21800": 1045, "20567": 1045, "22159": 1045, "20811": 1045, "21814": 1045, "16748": 1045, "siqi": 1045, "22215": 1045, "23047": 1045, "22695": 1045, "22697": 1045, "21762": 1045, "22106": 1045, "gijsber": 1045, "21632": 1045, "genesi": [1045, 1047], "valencia": [1045, 1047], "22566": 1045, "22908": 1045, "23097": 1045, "23079": 1045, "20803": 1045, "23023": 1045, "21573": 1045, "21832": 1045, "20145": 1045, "22356": 1045, "18482": 1045, "gameiro": 1045, "kharsa": 1045, "22370": 1045, "17819": 1045, "22235": 1045, "21837": 1045, "wagner": 1045, "22199": 1045, "aidar": 1045, "shakerimoff": 1045, "tenavi": 1045, "nakamura": 1045, "22223": 1045, "marcom": 1045, "21617": 1045, "ritter": [1045, 1046], "21114": 1045, "21078": 1045, "21448": 1045, "16061": 1045, "19438": 1045, "18310": 1045, "elfner": 1045, "22249": 1045, "22137": 1045, "22694": 1045, "22808": 1045, "22950": 1045, "21086": 1045, "22206": 1045, "21808": 1045, "22548": 1045, "22062": 1045, "trujillo": [1045, 1046], "22148": 1045, "22240": 1045, "9087": 1045, "22525": 1045, "19689": 1045, "21606": 1045, "21341": 1045, "preservs": 1045, "21767": 1045, "21724": 1045, "yar": 1045, "khine": 1045, "phyo": 1045, "21998": 1045, "22891": 1045, "22899": 1045, "23256": 1045, "19794": 1045, "21534": 1045, "22254": 1045, "21805": 1045, "jeann": 1045, "dionisi": 1045, "22685": 1045, "n_neighbour": 1045, "18832": 1045, "23033": 1045, "21565": 1045, "17266": 1045, "22118": 1045, "ohad": 1045, "22284": 1045, "19158": 1045, "nicki": 1045, "skaft": 1045, "20753": 1045, "22108": 1045, "22635": 1045, "19085": 1045, "22866": 1045, "21576": 1045, "emil": 1045, "dugnat": 1045, "21873": 1045, "21177": 1045, "20408": 1045, "ceballo": 1045, "22058": 1045, "23034": 1045, "22203": 1045, "21026": 1045, "21880": 1045, "mrinal": 1045, "tyagi": 1045, "22982": 1045, "22508": 1045, "comb": 1045, "22604": 1045, "22212": 1045, "21430": 1045, "desislava": 1045, "vasileva": 1045, "22687": 1045, "22150": 1045, "22248": 1045, "20860": 1045, "shubhraneel": 1045, "21888": 1045, "21954": 1045, "22953": 1045, "16018": 1045, "21445": 1045, "21988": 1045, "get_output_feature_nam": 1045, "21569": 1045, "21079": 1045, "20653": 1045, "21434": 1045, "19916": 1045, "22735": 1045, "compute_inverse_transform": 1045, "21701": 1045, "22114": 1045, "21330": 1045, "21408": 1045, "22149": 1045, "21436": 1045, "22191": 1045, "22476": 1045, "21278": 1045, "21316": 1045, "clickabl": 1045, "21298": 1045, "22237": 1045, "check_scalar": 1045, "22218": 1045, "validationerror": 1045, "check_requires_y_non": 1045, "22578": 1045, "arcidiacono": [1045, 1046], "22595": 1045, "21310": 1045, "22027": 1045, "lanterni": 1045, "23077": 1045, "22188": 1045, "22830": 1045, "2357juan": [1045, 1046, 1047], "adamgonzo": 1045, "adijohar": 1045, "kumawat": 1045, "raghuwanshi": 1045, "duron": 1045, "ahmadjubair33": 1045, "aj": 1045, "druck": 1045, "peixinho": 1045, "arroyo": 1045, "alexanmv": 1045, "almeidayoel": 1045, "amar": [1045, 1046, 1047], "amrcod": 1045, "griva": [1045, 1046], "andrii": 1045, "herrou": 1045, "ducout": 1045, "arth": 1045, "arthurmello": 1045, "arturoamor": 1045, "atharva": 1045, "patil": 1045, "aufarkari": 1045, "avm19": [1045, 1046], "ayan": 1045, "bardiya": [1045, 1046], "behrouz": 1045, "ben3940": 1045, "bijil": 1045, "subhash": 1045, "bmreinig": 1045, "brenden": 1045, "kadota": 1045, "cdrig": 1045, "chalmer": 1045, "chitteti": 1045, "srinath": [1045, 1046], "chloe": 1045, "agath": 1045, "azencott": 1045, "christopherlim98": 1045, "weidemann": 1045, "combsccod": 1045, "daniela": [1045, 1046], "darren": [1045, 1046], "eargl": 1045, "gilbertson": [1045, 1046], "dea": [1045, 1046, 1047], "mar\u00eda": [1045, 1046, 1047], "denni": 1045, "osei": 1045, "dessyvv": 1045, "dev514": 1045, "diwakar": 1045, "ries": 1045, "drskd": 1045, "emiko": 1045, "sano": 1045, "emmanouil": 1045, "gionanidi": 1045, "ermolaevpa": [1045, 1046], "estefania": 1045, "barreto": 1045, "ojeda": 1045, "eyast": 1045, "fatima": 1045, "gasmi": 1045, "luna": 1045, "glushchenkov": 1045, "fkaren27": 1045, "fpgawesom": 1045, "ftorres16": [1045, 1046], "gabor": 1045, "berei": 1045, "kertesz": 1045, "gauthier": 1045, "giancarlo": 1045, "glennfrutiz": 1045, "guillermo": 1045, "fern\u00e1ndez": 1045, "hansin": [1045, 1046], "henrymooresc": [1045, 1046], "hideaki": 1045, "imamura": 1045, "hind": 1045, "hmasdev": 1045, "hvassard": 1045, "aki": [1045, 1046, 1047], "iasoon": 1045, "ingela": 1045, "cowton": 1045, "jalexand3r": 1045, "jauhar": 1045, "jaya": 1045, "kommireddi": 1045, "je": 1045, "jelfner": 1045, "jenni": 1045, "jirka": 1045, "borovec": 1045, "cipri\u00e1n": 1045, "loayza": 1045, "chazalon": 1045, "mess": 1045, "jovan": [1045, 1046], "stojanov": [1045, 1046], "jschuerz": 1045, "katotten": 1045, "ken4git": 1045, "doucet": 1045, "kimayoung": 1045, "koushik": 1045, "kranthi": 1045, "sedamaki": 1045, "krumetoft": 1045, "lesne": 1045, "casino": [1045, 1046], "logan": [1045, 1046, 1047], "lucieclair": 1045, "luiz": 1045, "magali": 1045, "mandjev": 1045, "wurp": [1045, 1046], "boerner": 1045, "wimld": 1045, "martel": 1045, "corentin": 1045, "mat\u00eda": 1045, "matjansen": 1045, "francia": 1045, "megabyt": 1045, "mehrdad": 1045, "moradizadeh": 1045, "melemo2": 1045, "micky774": [1045, 1046], "milana2": 1045, "millawel": 1045, "miwojc": 1045, "mizuki": 1045, "mlant": 1045, "mohit": [1045, 1048], "moonkyung94": 1045, "mpoemsl": 1045, "mrinaltyagi": 1045, "leu": 1045, "msabati": 1045, "nadirhan": 1045, "\u015fahin": 1045, "naipawat": [1045, 1046], "poolsawat": [1045, 1046], "nartayxd": 1045, "nastegiano": 1045, "nathansquan": 1045, "detlefsen": 1045, "niket": 1045, "nikhil": 1045, "suresh": 1045, "kondratyev": 1045, "husak": 1045, "partev": [1045, 1046, 1047], "pelennor": 1045, "piet": [1045, 1046], "br\u00f6mmel": [1045, 1046], "pinki": 1045, "poloso": 1045, "pramod": 1045, "anantharam": 1045, "puhuk": [1045, 1046], "purna": 1045, "mansingh": 1045, "quadv": 1045, "rahil": [1045, 1046, 1047, 1048], "boy": 1045, "raz": 1045, "hoshia": 1045, "rishabh": 1045, "barnowski": [1045, 1046], "rsnegrin": 1045, "yadav": 1045, "sakinaouisrani": 1045, "sanjai": 1045, "marreddi": 1045, "seel": 1045, "sele": [1045, 1046], "seyedsaman": 1045, "emami": 1045, "shandeng123": 1045, "sharmadharmp": 1045, "shaymernaturalint": 1045, "shuangchi": [1045, 1046], "siavrez": 1045, "slishak": 1045, "spikebh": 1045, "sply88": 1045, "kailasa": [1045, 1046], "sultan": 1045, "orazbayev": 1045, "sumit": 1045, "saha": 1045, "sven": [1045, 1046], "eschlbeck": 1045, "stehl": [1045, 1046], "swapnil": 1045, "teunp": 1045, "ferr\u00e9": 1045, "hjortkj\u00e6r": 1045, "thiruvenkadam": 1045, "toastedyeast": [1045, 1046], "mctiernan": [1045, 1046], "udit": 1045, "ugo": 1045, "marchand": 1045, "vera": [1045, 1046], "komey": [1045, 1046], "victoireloui": 1045, "vishwakarma": 1045, "vikrant": 1045, "khedkar": 1045, "chernyi": 1045, "weijiadu": 1045, "yuan": [1045, 1046, 1047], "yiyangq": 1045, "yosshi999": 1045, "yuki": 1045, "koyama": 1045, "zeel": 1045, "zempleni": 1045, "zhenfish": 1045, "\u8d75\u4e30": 1045, "25747": 1046, "base_estimator__": 1046, "25477": 1046, "25563": 1046, "25570": 1046, "25664": 1046, "25774": 1046, "25500": 1046, "25589": 1046, "25704": 1046, "min_sample_split": 1046, "25744": 1046, "25619": 1046, "25638": 1046, "25354": 1046, "25174": 1046, "25089": 1046, "25129": 1046, "25363": 1046, "25188": 1046, "25295": 1046, "spec": [1046, 1047], "25312": 1046, "backslash": 1046, "25511": 1046, "25172": 1046, "25341": 1046, "25094": 1046, "25250": 1046, "25370": 1046, "23101": 1046, "24873": 1046, "25694": 1046, "25274": 1046, "25296": 1046, "25147": 1046, "23619": 1046, "24354": 1046, "safiuddin": 1046, "khaja": 1046, "gsiisg": 1046, "23935": 1046, "22527": 1046, "_sgd_fast": 1046, "_plain_sgd": 1046, "oversc": 1046, "23798": 1046, "24543": 1046, "24465": 1046, "23734": 1046, "24699": 1046, "23865": 1046, "simd": 1046, "primit": 1046, "23446": 1046, "23197": 1046, "23604": 1046, "23585": 1046, "24556": 1046, "maladi\u00e8r": [1046, 1047], "24617": 1046, "sim4n6": 1046, "24688": 1046, "22054": 1046, "roic": 1046, "24264": 1046, "maladier": 1046, "14736": 1046, "hunt": 1046, "zhan": 1046, "20802": 1046, "pokorni": 1046, "22965": 1046, "22968": 1046, "23038": 1046, "23210": 1046, "24258": 1046, "23470": 1046, "21938": 1046, "23127": 1046, "19075": 1046, "ramo": 1046, "carre\u00f1o": 1046, "24951": 1046, "22268": 1046, "mohamedbsh": 1046, "23905": 1046, "11860": 1046, "ablin": 1046, "24528": 1046, "23726": 1046, "24421": 1046, "kshitij": [1046, 1047], "22554": 1046, "24218": 1046, "molin": 1046, "21020": 1046, "24856": 1046, "22014": 1046, "23252": 1046, "24538": 1046, "24889": 1046, "24146": 1046, "peretti": 1046, "nestor": 1046, "navarro": 1046, "nati": 1046, "tomatti": 1046, "24855": 1046, "24849": 1046, "20415": 1046, "24283": 1046, "24894": 1046, "23819": [1046, 1047], "edoardo": [1046, 1048], "abati": [1046, 1048], "24747": 1046, "24245": 1046, "24405": 1046, "16695": 1046, "vitor": 1046, "rosa": 1046, "18298": 1046, "25077": 1046, "24317": 1046, "24350": 1046, "24755": 1046, "levitski": [1046, 1047], "24637": 1046, "24767": 1046, "23275": 1046, "maxwelllzh": 1046, "24433": 1046, "yogendrasingh": 1046, "23637": 1046, "23877": 1046, "10168": 1046, "\u0142ukasz": 1046, "borchmann": 1046, "12285": 1046, "miltenberg": 1046, "13042": 1046, "parizi": 1046, "18094": 1046, "22562": 1046, "24714": 1046, "23834": 1046, "24051": 1046, "22518": 1046, "18020": 1046, "24338": 1046, "23442": 1046, "atukorala": 1046, "22710": 1046, "conroi": 1046, "trinh": 1046, "23461": 1046, "24365": 1046, "24630": 1046, "rushil": [1046, 1047], "24084": 1046, "iinfo": 1046, "24141": 1046, "24539": 1046, "23977": 1046, "23683": 1046, "andrei": [1046, 1048], "melnik": 1046, "16747": 1046, "18805": 1046, "hongshaoyang": 1046, "22269": 1046, "23139": 1046, "24645": 1046, "10468": 1046, "ruben": 1046, "22993": 1046, "24750": 1046, "rudresh": 1046, "veerkhar": 1046, "23874": 1046, "24075": 1046, "22665": 1046, "24683": 1046, "24058": 1046, "perdok": 1046, "20331": 1046, "23993": 1046, "22629": 1046, "24412": 1046, "22898": 1046, "23480": 1046, "21469": 1046, "lapack_svd_driv": 1046, "20617": 1046, "25067": 1046, "14862": 1046, "24512": 1046, "24667": 1046, "25080": 1046, "24523": 1046, "mia": 1046, "bajic": 1046, "3llobo": 1046, "kania": [1046, 1047], "anulekh": 1046, "admir": [1046, 1047], "demiraj": [1046, 1047], "adoublet": [1046, 1047], "ahmedbgh": [1046, 1047], "aiko": 1046, "akshita": 1046, "prasanth": 1046, "ala": [1046, 1047], "miola": 1046, "lebel": 1046, "buzenet": [1046, 1047], "kassa": [1046, 1047], "bera": 1046, "maennel": 1046, "aniket": 1046, "shirsat": 1046, "anthony22": [1046, 1047], "apostolo": 1046, "tsetogl": 1046, "aravindh": 1046, "artur": [1046, 1047], "hermano": [1046, 1047], "ashah002": [1046, 1047], "ashwin": [1046, 1047], "azaria": [1046, 1047], "gebremichael": [1046, 1047], "b0rxington": 1046, "badr": 1046, "moufad": 1046, "bart\u0142omiej": 1046, "go\u0144da": 1046, "bdegraaff": 1046, "berkecanrizai": 1046, "bernd": 1046, "fritzk": 1046, "bhoomika": 1046, "biswaroop": 1046, "cannon": 1046, "bsh": 1046, "ceh": 1046, "chalulu": 1046, "changyao": [1046, 1047], "zablit": 1046, "veenhui": [1046, 1047], "christianwaldmann": 1046, "christin": [1046, 1047], "verrier": 1046, "dangonite57": [1046, 1047], "danielgaerb": 1046, "davidblnc": [1046, 1047], "dayn": [1046, 1047], "khant": 1046, "dhanshre": 1046, "diadochokinet": 1046, "diederikwp": 1046, "litsidi": [1046, 1047], "drewhogg": 1046, "oc": 1046, "dwight": 1046, "lindquist": 1046, "eden": 1046, "brekk": 1046, "edern": [1046, 1047], "eleanor": 1046, "eliaschiavon": 1046, "emir": [1046, 1047], "fabrizio": 1046, "damicelli": 1046, "fcharra": 1046, "siola": [1046, 1047], "tuveri": 1046, "franck": 1046, "charra": 1046, "geevarghes": 1046, "georgiamaydai": 1046, "gianr": 1046, "lazz": 1046, "guitar": 1046, "gunesbayir": [1046, 1047], "harshit5674": 1046, "hasan": 1046, "yaman": 1046, "vrigazov": 1046, "htsedebenham": 1046, "humahn": 1046, "ido": [1046, 1047], "iglesi": 1046, "iliya": 1046, "zhechev": 1046, "iren": [1046, 1047], "ivanllt": 1046, "sedykh": 1046, "mcivor": [1046, 1047], "janfidor": [1046, 1047], "jiten": 1046, "sidhpura": 1046, "jkarolczak": 1046, "jo\u00e3o": 1046, "johnathanpi": [1046, 1047], "koumenti": 1046, "panga": [1046, 1047], "johnthagen": 1046, "fleme": 1046, "choo": [1046, 1047], "yun": [1046, 1047], "keat": [1046, 1047], "juanfe88": 1046, "juliaschoepp": [1046, 1047], "jygerardi": [1046, 1047], "ka00ri": [1046, 1047], "kanishk": 1046, "sachdev": 1046, "kanissh": 1046, "kendal": 1046, "kento": [1046, 1047], "nozawa": [1046, 1047], "eliasi": [1046, 1047], "kluge": [1046, 1047], "lieret": 1046, "kirandevraj": 1046, "kraig": 1046, "vamsi": 1046, "kapadni": 1046, "lingyi1110": 1046, "mantovani": 1046, "maascha": 1046, "madinak": 1046, "maksym": 1046, "mansi": 1046, "kostelac": [1046, 1047], "marvin": [1046, 1047], "krawutschk": [1046, 1047], "masanori": [1046, 1047], "kanazu": [1046, 1047], "haberland": [1046, 1047], "mauroantonioserrano": 1046, "maxi": 1046, "marufo": 1046, "maximesaur": [1046, 1047], "smolskii": 1046, "bou": [1046, 1047], "mehgarg": 1046, "mehmetcanakbai": 1046, "baji\u0107": 1046, "flak": 1046, "hornstein": 1046, "ruiter": 1046, "paradi": 1046, "iljin": [1046, 1047], "misa": 1046, "ogura": 1046, "wilksch": 1046, "mrastgoo": 1046, "naois": [1046, 1048], "holohan": [1046, 1048], "nass": 1046, "jacobi": 1046, "nawazish": [1046, 1047], "alam": [1046, 1047], "nguy\u1ec5n": 1046, "v\u0103n": 1046, "di\u1ec5n": 1046, "fanelli": [1046, 1047], "nihal": 1046, "thukarama": 1046, "jare": 1046, "nima10khodaveisi": 1046, "nima": 1046, "sarajpoor": 1046, "nitinramvelraj": 1046, "nnlnr": [1046, 1047], "npach": [1046, 1047], "nwanna": 1046, "nymark": 1046, "kho": 1046, "holman": 1046, "oll": 1046, "lukowski": 1046, "hassoun": 1046, "tamer": 1046, "ouss1508": [1046, 1047], "oyindamola": 1046, "olatunji": 1046, "pab": [1046, 1047], "pandata": [1046, 1047], "soar": 1046, "petar": 1046, "mlinari\u0107": 1046, "pooja": [1046, 1047], "subramaniam": [1046, 1047], "priyam": 1046, "kakati": 1046, "freeland": 1046, "keerti": 1046, "rafal": [1046, 1047], "wojdyla": [1046, 1047], "raghuv": [1046, 1047], "makhija": 1046, "rehan": 1046, "guha": 1046, "klima": 1046, "crockett": 1046, "homm": 1046, "roman4oo": 1046, "rowan": 1046, "mankoo": 1046, "sabri": 1046, "monaf": 1046, "safikh": 1046, "salahuddin": 1046, "yojana": 1046, "menes": 1046, "ephrem": 1046, "sangam": 1046, "sangamswadik": 1046, "sanjai_3": [1046, 1047], "sarahremu": 1046, "sashka": [1046, 1047], "savkomax": 1046, "gustafson": [1046, 1047], "sec65": 1046, "seljak": 1046, "shadi": [1046, 1047], "gewili": [1046, 1047], "shellyfung": 1046, "shinsuk": 1046, "mori": 1046, "shiva": [1046, 1047], "shoaib": 1046, "khan": [1046, 1047], "shogo": [1046, 1047], "hida": [1046, 1047], "shrankhla": 1046, "sonniv": [1046, 1047], "sortofamudkip": [1046, 1047], "stanislav": [1046, 1047], "modrak": [1046, 1047], "stellalin7": 1046, "vaerenbergh": [1046, 1047], "schmerler": 1046, "tabea": [1046, 1047], "kossen": [1046, 1047], "thedevpanda": 1046, "syd": 1046, "sre": 1046, "weezel": [1046, 1047], "bonald": 1046, "germer": [1046, 1047], "ion": 1046, "timofei": 1046, "kornev": 1046, "pitter": 1046, "tomiock": [1046, 1047], "mathew": 1046, "tspeng": [1046, 1047], "egashira": 1046, "rey": 1046, "puerta": 1046, "vishal": 1046, "vyom": [1046, 1047], "pathak": [1046, 1047], "wattai": 1046, "wchathura": 1046, "wen": 1046, "x110": 1046, "xuniu": 1046, "yanhong": 1046, "ef": 1046, "yusuf": [1046, 1047], "raji": [1046, 1047], "adil": 1046, "khwaja": 1046, "zeeshan": [1046, 1047], "lone": [1046, 1047], "27468": 1047, "27583": 1047, "paralel": 1047, "27573": 1047, "27580": 1047, "18488": 1047, "26814": 1047, "27044": 1047, "26913": 1047, "27167": 1047, "27243": 1047, "26602": 1047, "26521": 1047, "26748": 1047, "26600": 1047, "shreesha": [1047, 1048], "27002": 1047, "26416": 1047, "tao": 1047, "26772": 1047, "reintroduc": 1047, "26754": 1047, "26893": 1047, "senger": [1047, 1048], "26760": 1047, "26940": 1047, "26931": 1047, "26903": 1047, "roehr": 1047, "27292": 1047, "25196": 1047, "24871": 1047, "25752": 1047, "25438": 1047, "yotam": 1047, "avidar": 1047, "constantini": 1047, "26337": 1047, "25120": 1047, "27311": 1047, "25294": 1047, "25308": 1047, "25291": 1047, "25367": 1047, "25402": 1047, "25044": 1047, "smt": 1047, "26082": 1047, "24027": 1047, "25815": 1047, "24568": 1047, "26121": 1047, "25805": 1047, "26385": 1047, "26657": 1047, "binesh": 1047, "bannerje": 1047, "25251": 1047, "26503": 1047, "26286": 1047, "26323": 1047, "26033": 1047, "26108": 1047, "barth\u00e9lemi": 1047, "26433": 1047, "26386": 1047, "26551": 1047, "26579": 1047, "25784": 1047, "25490": 1047, "25956": 1047, "22409": 1047, "25177": 1047, "24882": 1047, "25186": 1047, "breve": 1047, "26318": 1047, "25506": 1047, "25601": 1047, "fidor": 1047, "25931": 1047, "25629": 1047, "26242": 1047, "toplak": 1047, "sckit": 1047, "25297": 1047, "24230": 1047, "25102": 1047, "25973": 1047, "25232": 1047, "26454": 1047, "25209": 1047, "26644": 1047, "lemo": 1047, "21809": 1047, "25732": 1047, "25190": 1047, "26207": 1047, "25587": 1047, "25697": 1047, "25214": 1047, "26653": 1047, "25531": 1047, "17388": 1047, "24769": 1047, "25713": 1047, "18723": 1047, "sahil": 1047, "24677": 1047, "24668": 1047, "dberenbaum": 1047, "25987": 1047, "26019": 1047, "25432": 1047, "25672": 1047, "lene": 1047, "preuss": 1047, "25299": 1047, "omarmanzoor": 1047, "26194": 1047, "26264": 1047, "barata": 1047, "onggo": 1047, "23099": 1047, "26021": 1047, "jiawei": 1047, "25659": 1047, "26333": 1047, "24140": 1047, "24076": 1047, "25417": 1047, "24083": 1047, "25443": 1047, "feature_union": 1047, "25093": 1047, "25220": 1047, "26325": 1047, "25334": 1047, "25677": 1047, "20524": 1047, "niuk": 1047, "23731": 1047, "24145": 1047, "22506": 1047, "24935": 1047, "seladu": 1047, "25257": 1047, "26424": 1047, "26400": 1047, "26566": 1047, "26093": 1047, "23595": 1047, "26376": 1047, "25387": 1047, "26289": 1047, "25813": 1047, "26106": 1047, "25814": 1047, "check_transformers_unfitted_stateless": 1047, "25733": 1047, "19664": 1047, "environmenterror": 1047, "ioerror": 1047, "windowserror": 1047, "26466": 1047, "kushwah": 1047, "handk": 1047, "adien": 1047, "mansouri": 1047, "alexl": 1047, "amai": 1047, "annegnx": 1047, "ansam": 1047, "zedan": 1047, "dutt": 1047, "aymericbasset": 1047, "tripramudya": 1047, "benedek": 1047, "harsanyi": 1047, "brevin": 1047, "kund": 1047, "troillard": 1047, "carla": 1047, "berenbaum": 1047, "proding": 1047, "butyugina": 1047, "elabonga": 1047, "atuo": 1047, "farhan": 1047, "hujiahong726": 1047, "ili": 1047, "jb": 1047, "mountford": 1047, "jessicakk0711": 1047, "joei": 1047, "hedlund": 1047, "linu": 1047, "fouquet": 1047, "harfouch": 1047, "mdarii": 1047, "murezzda": 1047, "nightwalkx": 1047, "nishu": 1047, "piontek": 1047, "pnucci": 1047, "sadra": 1047, "barikbin": 1047, "searchforpass": 1047, "seoeun": 1047, "th\u00e9ophil": 1047, "barang": 1047, "veghit": 1047, "vignesh": 1047, "vijeth": 1047, "moudgalya": 1047, "windiana42": 1047, "yuchen": 1047, "sooner": 1048, "26721": 1048, "27670": 1048, "27315": 1048, "26464": 1048, "26616": 1048, "cappuzzo": 1048, "Ines": 1048, "ibnukhsein": 1048, "boulard": 1048, "26648": 1048, "27538": 1048, "27308": 1048, "26789": 1048, "26896": 1048, "27058": 1048, "27005": 1048, "26525": 1048, "27490": 1048, "27500": 1048, "27389": 1048, "27478": 1048, "compute_optics_graph": 1048, "27104": 1048, "27250": 1048, "27179": 1048, "nurseit": 1048, "kamchyev": 1048, "27100": 1048, "virshup": 1048, "27239": 1048, "korobko": 1048, "27240": 1048, "27274": 1048, "27219": 1048, "27277": 1048, "27301": 1048, "lohit": 1048, "sundaramahalingam": 1048, "27252": 1048, "27166": 1048, "27314": 1048, "outliermixin": 1048, "26506": 1048, "correspondingli": 1048, "26831": 1048, "26786": 1048, "26909": 1048, "27185": 1048, "26744": 1048, "27204": 1048, "27438": 1048, "27718": 1048, "26634": 1048, "landeau": 1048, "vigni": 1048, "26315": 1048, "27098": 1048, "27431": 1048, "sok\u00f3\u0142": 1048, "sparrai": 1048, "spmatrix": 1048, "70x": 1048, "tarashanski": 1048, "scanpi": 1048, "scvers": 1048, "18689": 1048, "27834": 1048, "26391": 1048, "26411": 1048, "13649": 1048, "reilli": 1048, "27139": 1048, "26278": 1048, "26957": 1048, "26830": 1048, "26736": 1048, "27817": 1048, "ongari": 1048, "21807": 1048, "27291": 1048, "27417": 1048, "27624": 1048, "5x": 1048, "26765": 1048, "27006": 1048, "26366": 1048, "mojdeh": 1048, "rastgoo": 1048, "neg_root_mean_squared_log_error_scor": 1048, "26734": 1048, "27137": 1048, "26840": 1048, "27650": 1048, "26855": 1048, "26299": 1048, "27018": 1048, "26267": 1048, "26828": 1048, "23317": 1048, "26243": 1048, "27110": 1048, "27556": 1048, "27558": 1048, "27017": 1048, "xuefeng": 1048, "26944": 1048, "26674": 1048, "27309": 1048, "27328": 1048, "27821": 1048, "26862": 1048, "goh": 1048, "yisheng": 1048, "dia": 1048, "datastuctur": 1048, "27372": 1048, "27601": 1048, "may_share_memori": 1048, "27336": 1048, "log_logist": 1048, "logaddexp": 1048, "27544": 1048, "check_estimators_pickl": 1048, "readonly_memmap": 1048, "misdetect": 1048, "27614": 1048, "27757": 1048}, "objects": {"": [[407, 0, 0, "-", "sklearn"]], "sklearn": [[407, 0, 0, "-", "base"], [407, 0, 0, "-", "calibration"], [407, 0, 0, "-", "cluster"], [407, 0, 0, "-", "compose"], [467, 4, 1, "", "config_context"], [407, 0, 0, "-", "covariance"], [407, 0, 0, "-", "cross_decomposition"], [407, 0, 0, "-", "datasets"], [407, 0, 0, "-", "decomposition"], [407, 0, 0, "-", "discriminant_analysis"], [407, 0, 0, "-", "dummy"], [407, 0, 0, "-", "ensemble"], [407, 0, 0, "-", "exceptions"], [407, 0, 0, "-", "experimental"], [407, 0, 0, "-", "feature_extraction"], [407, 0, 0, "-", "feature_selection"], [407, 0, 0, "-", "gaussian_process"], [625, 4, 1, "", "get_config"], [407, 0, 0, "-", "impute"], [407, 0, 0, "-", "inspection"], [407, 0, 0, "-", "isotonic"], [407, 0, 0, "-", "kernel_approximation"], [407, 0, 0, "-", "kernel_ridge"], [407, 0, 0, "-", "linear_model"], [407, 0, 0, "-", "manifold"], [407, 0, 0, "-", "metrics"], [407, 0, 0, "-", "mixture"], [407, 0, 0, "-", "model_selection"], [407, 0, 0, "-", "multiclass"], [407, 0, 0, "-", "multioutput"], [407, 0, 0, "-", "naive_bayes"], [407, 0, 0, "-", "neighbors"], [407, 0, 0, "-", "neural_network"], [407, 0, 0, "-", "pipeline"], [407, 0, 0, "-", "preprocessing"], [407, 0, 0, "-", "random_projection"], [407, 0, 0, "-", "semi_supervised"], [898, 4, 1, "", "set_config"], [899, 4, 1, "", "show_versions"], [407, 0, 0, "-", "svm"], [407, 0, 0, "-", "tree"], [407, 0, 0, "-", "utils"]], "sklearn.base": [[422, 1, 1, "", "BaseEstimator"], [423, 1, 1, "", "BiclusterMixin"], [424, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [425, 1, 1, "", "ClassifierMixin"], [426, 1, 1, "", "ClusterMixin"], [427, 1, 1, "", "DensityMixin"], [428, 1, 1, "", "MetaEstimatorMixin"], [429, 1, 1, "", "OneToOneFeatureMixin"], [430, 1, 1, "", "OutlierMixin"], [431, 1, 1, "", "RegressorMixin"], [432, 1, 1, "", "TransformerMixin"], [433, 4, 1, "", "clone"], [434, 4, 1, "", "is_classifier"], [435, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[422, 2, 1, "", "get_metadata_routing"], [422, 2, 1, "", "get_params"], [422, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[423, 3, 1, "", "biclusters_"], [423, 2, 1, "", "get_indices"], [423, 2, 1, "", "get_shape"], [423, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[424, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[425, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[426, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[427, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[429, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[430, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[431, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[432, 2, 1, "", "fit_transform"], [432, 2, 1, "", "set_output"]], "sklearn.calibration": [[436, 1, 1, "", "CalibratedClassifierCV"], [437, 1, 1, "", "CalibrationDisplay"], [438, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[436, 2, 1, "", "fit"], [436, 2, 1, "", "get_metadata_routing"], [436, 2, 1, "", "get_params"], [436, 2, 1, "", "predict"], [436, 2, 1, "", "predict_proba"], [436, 2, 1, "", "score"], [436, 2, 1, "", "set_fit_request"], [436, 2, 1, "", "set_params"], [436, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[437, 2, 1, "", "from_estimator"], [437, 2, 1, "", "from_predictions"], [437, 2, 1, "", "plot"]], "sklearn.cluster": [[439, 1, 1, "", "AffinityPropagation"], [440, 1, 1, "", "AgglomerativeClustering"], [441, 1, 1, "", "Birch"], [442, 1, 1, "", "BisectingKMeans"], [443, 1, 1, "", "DBSCAN"], [444, 1, 1, "", "FeatureAgglomeration"], [445, 1, 1, "", "HDBSCAN"], [446, 1, 1, "", "KMeans"], [447, 1, 1, "", "MeanShift"], [448, 1, 1, "", "MiniBatchKMeans"], [449, 1, 1, "", "OPTICS"], [450, 1, 1, "", "SpectralBiclustering"], [451, 1, 1, "", "SpectralClustering"], [452, 1, 1, "", "SpectralCoclustering"], [453, 4, 1, "", "affinity_propagation"], [454, 4, 1, "", "cluster_optics_dbscan"], [455, 4, 1, "", "cluster_optics_xi"], [456, 4, 1, "", "compute_optics_graph"], [419, 4, 1, "", "dbscan"], [457, 4, 1, "", "estimate_bandwidth"], [458, 4, 1, "", "k_means"], [459, 4, 1, "", "kmeans_plusplus"], [460, 4, 1, "", "mean_shift"], [461, 4, 1, "", "spectral_clustering"], [462, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[439, 2, 1, "", "fit"], [439, 2, 1, "", "fit_predict"], [439, 2, 1, "", "get_metadata_routing"], [439, 2, 1, "", "get_params"], [439, 2, 1, "", "predict"], [439, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[440, 2, 1, "", "fit"], [440, 2, 1, "", "fit_predict"], [440, 2, 1, "", "get_metadata_routing"], [440, 2, 1, "", "get_params"], [440, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[441, 2, 1, "", "fit"], [441, 2, 1, "", "fit_predict"], [441, 2, 1, "", "fit_transform"], [441, 2, 1, "", "get_feature_names_out"], [441, 2, 1, "", "get_metadata_routing"], [441, 2, 1, "", "get_params"], [441, 2, 1, "", "partial_fit"], [441, 2, 1, "", "predict"], [441, 2, 1, "", "set_output"], [441, 2, 1, "", "set_params"], [441, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[442, 2, 1, "", "fit"], [442, 2, 1, "", "fit_predict"], [442, 2, 1, "", "fit_transform"], [442, 2, 1, "", "get_feature_names_out"], [442, 2, 1, "", "get_metadata_routing"], [442, 2, 1, "", "get_params"], [442, 2, 1, "", "predict"], [442, 2, 1, "", "score"], [442, 2, 1, "", "set_fit_request"], [442, 2, 1, "", "set_output"], [442, 2, 1, "", "set_params"], [442, 2, 1, "", "set_predict_request"], [442, 2, 1, "", "set_score_request"], [442, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[443, 2, 1, "", "fit"], [443, 2, 1, "", "fit_predict"], [443, 2, 1, "", "get_metadata_routing"], [443, 2, 1, "", "get_params"], [443, 2, 1, "", "set_fit_request"], [443, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[444, 2, 1, "", "fit"], [444, 3, 1, "", "fit_predict"], [444, 2, 1, "", "fit_transform"], [444, 2, 1, "", "get_feature_names_out"], [444, 2, 1, "", "get_metadata_routing"], [444, 2, 1, "", "get_params"], [444, 2, 1, "", "inverse_transform"], [444, 2, 1, "", "set_output"], [444, 2, 1, "", "set_params"], [444, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[445, 2, 1, "", "dbscan_clustering"], [445, 2, 1, "", "fit"], [445, 2, 1, "", "fit_predict"], [445, 2, 1, "", "get_metadata_routing"], [445, 2, 1, "", "get_params"], [445, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[446, 2, 1, "", "fit"], [446, 2, 1, "", "fit_predict"], [446, 2, 1, "", "fit_transform"], [446, 2, 1, "", "get_feature_names_out"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "predict"], [446, 2, 1, "", "score"], [446, 2, 1, "", "set_fit_request"], [446, 2, 1, "", "set_output"], [446, 2, 1, "", "set_params"], [446, 2, 1, "", "set_predict_request"], [446, 2, 1, "", "set_score_request"], [446, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_predict"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "predict"], [447, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[448, 2, 1, "", "fit"], [448, 2, 1, "", "fit_predict"], [448, 2, 1, "", "fit_transform"], [448, 2, 1, "", "get_feature_names_out"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "partial_fit"], [448, 2, 1, "", "predict"], [448, 2, 1, "", "score"], [448, 2, 1, "", "set_fit_request"], [448, 2, 1, "", "set_output"], [448, 2, 1, "", "set_params"], [448, 2, 1, "", "set_partial_fit_request"], [448, 2, 1, "", "set_predict_request"], [448, 2, 1, "", "set_score_request"], [448, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[449, 2, 1, "", "fit"], [449, 2, 1, "", "fit_predict"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[450, 3, 1, "", "biclusters_"], [450, 2, 1, "", "fit"], [450, 2, 1, "", "get_indices"], [450, 2, 1, "", "get_metadata_routing"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "get_shape"], [450, 2, 1, "", "get_submatrix"], [450, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[451, 2, 1, "", "fit"], [451, 2, 1, "", "fit_predict"], [451, 2, 1, "", "get_metadata_routing"], [451, 2, 1, "", "get_params"], [451, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[452, 3, 1, "", "biclusters_"], [452, 2, 1, "", "fit"], [452, 2, 1, "", "get_indices"], [452, 2, 1, "", "get_metadata_routing"], [452, 2, 1, "", "get_params"], [452, 2, 1, "", "get_shape"], [452, 2, 1, "", "get_submatrix"], [452, 2, 1, "", "set_params"]], "sklearn.compose": [[463, 1, 1, "", "ColumnTransformer"], [464, 1, 1, "", "TransformedTargetRegressor"], [465, 4, 1, "", "make_column_selector"], [466, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[463, 2, 1, "", "fit"], [463, 2, 1, "", "fit_transform"], [463, 2, 1, "", "get_feature_names_out"], [463, 2, 1, "", "get_metadata_routing"], [463, 2, 1, "", "get_params"], [463, 3, 1, "", "named_transformers_"], [463, 2, 1, "", "set_output"], [463, 2, 1, "", "set_params"], [463, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[464, 2, 1, "", "fit"], [464, 2, 1, "", "get_metadata_routing"], [464, 2, 1, "", "get_params"], [464, 3, 1, "", "n_features_in_"], [464, 2, 1, "", "predict"], [464, 2, 1, "", "score"], [464, 2, 1, "", "set_params"], [464, 2, 1, "", "set_score_request"]], "sklearn.covariance": [[468, 1, 1, "", "EllipticEnvelope"], [469, 1, 1, "", "EmpiricalCovariance"], [470, 1, 1, "", "GraphicalLasso"], [471, 1, 1, "", "GraphicalLassoCV"], [472, 1, 1, "", "LedoitWolf"], [473, 1, 1, "", "MinCovDet"], [474, 1, 1, "", "OAS"], [475, 1, 1, "", "ShrunkCovariance"], [476, 4, 1, "", "empirical_covariance"], [477, 4, 1, "", "graphical_lasso"], [478, 4, 1, "", "ledoit_wolf"], [479, 4, 1, "", "ledoit_wolf_shrinkage"], [421, 4, 1, "", "oas"], [480, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[468, 2, 1, "", "correct_covariance"], [468, 2, 1, "", "decision_function"], [468, 2, 1, "", "error_norm"], [468, 2, 1, "", "fit"], [468, 2, 1, "", "fit_predict"], [468, 2, 1, "", "get_metadata_routing"], [468, 2, 1, "", "get_params"], [468, 2, 1, "", "get_precision"], [468, 2, 1, "", "mahalanobis"], [468, 2, 1, "", "predict"], [468, 2, 1, "", "reweight_covariance"], [468, 2, 1, "", "score"], [468, 2, 1, "", "score_samples"], [468, 2, 1, "", "set_params"], [468, 2, 1, "", "set_score_request"]], "sklearn.covariance.EmpiricalCovariance": [[469, 2, 1, "", "error_norm"], [469, 2, 1, "", "fit"], [469, 2, 1, "", "get_metadata_routing"], [469, 2, 1, "", "get_params"], [469, 2, 1, "", "get_precision"], [469, 2, 1, "", "mahalanobis"], [469, 2, 1, "", "score"], [469, 2, 1, "", "set_params"], [469, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLasso": [[470, 2, 1, "", "error_norm"], [470, 2, 1, "", "fit"], [470, 2, 1, "", "get_metadata_routing"], [470, 2, 1, "", "get_params"], [470, 2, 1, "", "get_precision"], [470, 2, 1, "", "mahalanobis"], [470, 2, 1, "", "score"], [470, 2, 1, "", "set_params"], [470, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLassoCV": [[471, 2, 1, "", "error_norm"], [471, 2, 1, "", "fit"], [471, 2, 1, "", "get_metadata_routing"], [471, 2, 1, "", "get_params"], [471, 2, 1, "", "get_precision"], [471, 2, 1, "", "mahalanobis"], [471, 2, 1, "", "score"], [471, 2, 1, "", "set_params"], [471, 2, 1, "", "set_score_request"]], "sklearn.covariance.LedoitWolf": [[472, 2, 1, "", "error_norm"], [472, 2, 1, "", "fit"], [472, 2, 1, "", "get_metadata_routing"], [472, 2, 1, "", "get_params"], [472, 2, 1, "", "get_precision"], [472, 2, 1, "", "mahalanobis"], [472, 2, 1, "", "score"], [472, 2, 1, "", "set_params"], [472, 2, 1, "", "set_score_request"]], "sklearn.covariance.MinCovDet": [[473, 2, 1, "", "correct_covariance"], [473, 2, 1, "", "error_norm"], [473, 2, 1, "", "fit"], [473, 2, 1, "", "get_metadata_routing"], [473, 2, 1, "", "get_params"], [473, 2, 1, "", "get_precision"], [473, 2, 1, "", "mahalanobis"], [473, 2, 1, "", "reweight_covariance"], [473, 2, 1, "", "score"], [473, 2, 1, "", "set_params"], [473, 2, 1, "", "set_score_request"]], "sklearn.covariance.OAS": [[474, 2, 1, "", "error_norm"], [474, 2, 1, "", "fit"], [474, 2, 1, "", "get_metadata_routing"], [474, 2, 1, "", "get_params"], [474, 2, 1, "", "get_precision"], [474, 2, 1, "", "mahalanobis"], [474, 2, 1, "", "score"], [474, 2, 1, "", "set_params"], [474, 2, 1, "", "set_score_request"]], "sklearn.covariance.ShrunkCovariance": [[475, 2, 1, "", "error_norm"], [475, 2, 1, "", "fit"], [475, 2, 1, "", "get_metadata_routing"], [475, 2, 1, "", "get_params"], [475, 2, 1, "", "get_precision"], [475, 2, 1, "", "mahalanobis"], [475, 2, 1, "", "score"], [475, 2, 1, "", "set_params"], [475, 2, 1, "", "set_score_request"]], "sklearn.cross_decomposition": [[481, 1, 1, "", "CCA"], [482, 1, 1, "", "PLSCanonical"], [483, 1, 1, "", "PLSRegression"], [484, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[481, 2, 1, "", "fit"], [481, 2, 1, "", "fit_transform"], [481, 2, 1, "", "get_feature_names_out"], [481, 2, 1, "", "get_metadata_routing"], [481, 2, 1, "", "get_params"], [481, 2, 1, "", "inverse_transform"], [481, 2, 1, "", "predict"], [481, 2, 1, "", "score"], [481, 2, 1, "", "set_output"], [481, 2, 1, "", "set_params"], [481, 2, 1, "", "set_predict_request"], [481, 2, 1, "", "set_score_request"], [481, 2, 1, "", "set_transform_request"], [481, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[482, 2, 1, "", "fit"], [482, 2, 1, "", "fit_transform"], [482, 2, 1, "", "get_feature_names_out"], [482, 2, 1, "", "get_metadata_routing"], [482, 2, 1, "", "get_params"], [482, 2, 1, "", "inverse_transform"], [482, 2, 1, "", "predict"], [482, 2, 1, "", "score"], [482, 2, 1, "", "set_output"], [482, 2, 1, "", "set_params"], [482, 2, 1, "", "set_predict_request"], [482, 2, 1, "", "set_score_request"], [482, 2, 1, "", "set_transform_request"], [482, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[483, 2, 1, "", "fit"], [483, 2, 1, "", "fit_transform"], [483, 2, 1, "", "get_feature_names_out"], [483, 2, 1, "", "get_metadata_routing"], [483, 2, 1, "", "get_params"], [483, 2, 1, "", "inverse_transform"], [483, 2, 1, "", "predict"], [483, 2, 1, "", "score"], [483, 2, 1, "", "set_output"], [483, 2, 1, "", "set_params"], [483, 2, 1, "", "set_predict_request"], [483, 2, 1, "", "set_score_request"], [483, 2, 1, "", "set_transform_request"], [483, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[484, 2, 1, "", "fit"], [484, 2, 1, "", "fit_transform"], [484, 2, 1, "", "get_feature_names_out"], [484, 2, 1, "", "get_metadata_routing"], [484, 2, 1, "", "get_params"], [484, 2, 1, "", "set_output"], [484, 2, 1, "", "set_params"], [484, 2, 1, "", "transform"]], "sklearn.datasets": [[485, 4, 1, "", "clear_data_home"], [486, 4, 1, "", "dump_svmlight_file"], [487, 4, 1, "", "fetch_20newsgroups"], [488, 4, 1, "", "fetch_20newsgroups_vectorized"], [489, 4, 1, "", "fetch_california_housing"], [490, 4, 1, "", "fetch_covtype"], [491, 4, 1, "", "fetch_kddcup99"], [492, 4, 1, "", "fetch_lfw_pairs"], [493, 4, 1, "", "fetch_lfw_people"], [494, 4, 1, "", "fetch_olivetti_faces"], [495, 4, 1, "", "fetch_openml"], [496, 4, 1, "", "fetch_rcv1"], [497, 4, 1, "", "fetch_species_distributions"], [498, 4, 1, "", "get_data_home"], [499, 4, 1, "", "load_breast_cancer"], [500, 4, 1, "", "load_diabetes"], [501, 4, 1, "", "load_digits"], [502, 4, 1, "", "load_files"], [503, 4, 1, "", "load_iris"], [504, 4, 1, "", "load_linnerud"], [505, 4, 1, "", "load_sample_image"], [506, 4, 1, "", "load_sample_images"], [507, 4, 1, "", "load_svmlight_file"], [508, 4, 1, "", "load_svmlight_files"], [509, 4, 1, "", "load_wine"], [510, 4, 1, "", "make_biclusters"], [511, 4, 1, "", "make_blobs"], [512, 4, 1, "", "make_checkerboard"], [513, 4, 1, "", "make_circles"], [514, 4, 1, "", "make_classification"], [515, 4, 1, "", "make_friedman1"], [516, 4, 1, "", "make_friedman2"], [517, 4, 1, "", "make_friedman3"], [518, 4, 1, "", "make_gaussian_quantiles"], [519, 4, 1, "", "make_hastie_10_2"], [520, 4, 1, "", "make_low_rank_matrix"], [521, 4, 1, "", "make_moons"], [522, 4, 1, "", "make_multilabel_classification"], [523, 4, 1, "", "make_regression"], [524, 4, 1, "", "make_s_curve"], [525, 4, 1, "", "make_sparse_coded_signal"], [526, 4, 1, "", "make_sparse_spd_matrix"], [527, 4, 1, "", "make_sparse_uncorrelated"], [528, 4, 1, "", "make_spd_matrix"], [529, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[530, 1, 1, "", "DictionaryLearning"], [531, 1, 1, "", "FactorAnalysis"], [532, 1, 1, "", "FastICA"], [533, 1, 1, "", "IncrementalPCA"], [534, 1, 1, "", "KernelPCA"], [535, 1, 1, "", "LatentDirichletAllocation"], [536, 1, 1, "", "MiniBatchDictionaryLearning"], [537, 1, 1, "", "MiniBatchNMF"], [538, 1, 1, "", "MiniBatchSparsePCA"], [539, 1, 1, "", "NMF"], [540, 1, 1, "", "PCA"], [541, 1, 1, "", "SparseCoder"], [542, 1, 1, "", "SparsePCA"], [543, 1, 1, "", "TruncatedSVD"], [544, 4, 1, "", "dict_learning"], [545, 4, 1, "", "dict_learning_online"], [420, 4, 1, "", "fastica"], [546, 4, 1, "", "non_negative_factorization"], [547, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[530, 2, 1, "", "fit"], [530, 2, 1, "", "fit_transform"], [530, 2, 1, "", "get_feature_names_out"], [530, 2, 1, "", "get_metadata_routing"], [530, 2, 1, "", "get_params"], [530, 2, 1, "", "set_output"], [530, 2, 1, "", "set_params"], [530, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[531, 2, 1, "", "fit"], [531, 2, 1, "", "fit_transform"], [531, 2, 1, "", "get_covariance"], [531, 2, 1, "", "get_feature_names_out"], [531, 2, 1, "", "get_metadata_routing"], [531, 2, 1, "", "get_params"], [531, 2, 1, "", "get_precision"], [531, 2, 1, "", "score"], [531, 2, 1, "", "score_samples"], [531, 2, 1, "", "set_output"], [531, 2, 1, "", "set_params"], [531, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[532, 2, 1, "", "fit"], [532, 2, 1, "", "fit_transform"], [532, 2, 1, "", "get_feature_names_out"], [532, 2, 1, "", "get_metadata_routing"], [532, 2, 1, "", "get_params"], [532, 2, 1, "", "inverse_transform"], [532, 2, 1, "", "set_inverse_transform_request"], [532, 2, 1, "", "set_output"], [532, 2, 1, "", "set_params"], [532, 2, 1, "", "set_transform_request"], [532, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[533, 2, 1, "", "fit"], [533, 2, 1, "", "fit_transform"], [533, 2, 1, "", "get_covariance"], [533, 2, 1, "", "get_feature_names_out"], [533, 2, 1, "", "get_metadata_routing"], [533, 2, 1, "", "get_params"], [533, 2, 1, "", "get_precision"], [533, 2, 1, "", "inverse_transform"], [533, 2, 1, "", "partial_fit"], [533, 2, 1, "", "set_output"], [533, 2, 1, "", "set_params"], [533, 2, 1, "", "set_partial_fit_request"], [533, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[534, 2, 1, "", "fit"], [534, 2, 1, "", "fit_transform"], [534, 2, 1, "", "get_feature_names_out"], [534, 2, 1, "", "get_metadata_routing"], [534, 2, 1, "", "get_params"], [534, 2, 1, "", "inverse_transform"], [534, 2, 1, "", "set_output"], [534, 2, 1, "", "set_params"], [534, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[535, 2, 1, "", "fit"], [535, 2, 1, "", "fit_transform"], [535, 2, 1, "", "get_feature_names_out"], [535, 2, 1, "", "get_metadata_routing"], [535, 2, 1, "", "get_params"], [535, 2, 1, "", "partial_fit"], [535, 2, 1, "", "perplexity"], [535, 2, 1, "", "score"], [535, 2, 1, "", "set_output"], [535, 2, 1, "", "set_params"], [535, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[536, 2, 1, "", "fit"], [536, 2, 1, "", "fit_transform"], [536, 2, 1, "", "get_feature_names_out"], [536, 2, 1, "", "get_metadata_routing"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "partial_fit"], [536, 2, 1, "", "set_output"], [536, 2, 1, "", "set_params"], [536, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[537, 2, 1, "", "fit"], [537, 2, 1, "", "fit_transform"], [537, 2, 1, "", "get_feature_names_out"], [537, 2, 1, "", "get_metadata_routing"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "inverse_transform"], [537, 2, 1, "", "partial_fit"], [537, 2, 1, "", "set_output"], [537, 2, 1, "", "set_params"], [537, 2, 1, "", "set_partial_fit_request"], [537, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[538, 2, 1, "", "fit"], [538, 2, 1, "", "fit_transform"], [538, 2, 1, "", "get_feature_names_out"], [538, 2, 1, "", "get_metadata_routing"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "inverse_transform"], [538, 2, 1, "", "set_output"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[539, 2, 1, "", "fit"], [539, 2, 1, "", "fit_transform"], [539, 2, 1, "", "get_feature_names_out"], [539, 2, 1, "", "get_metadata_routing"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "inverse_transform"], [539, 2, 1, "", "set_output"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_transform"], [540, 2, 1, "", "get_covariance"], [540, 2, 1, "", "get_feature_names_out"], [540, 2, 1, "", "get_metadata_routing"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "get_precision"], [540, 2, 1, "", "inverse_transform"], [540, 2, 1, "", "score"], [540, 2, 1, "", "score_samples"], [540, 2, 1, "", "set_output"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[541, 2, 1, "", "fit"], [541, 2, 1, "", "fit_transform"], [541, 2, 1, "", "get_feature_names_out"], [541, 2, 1, "", "get_metadata_routing"], [541, 2, 1, "", "get_params"], [541, 3, 1, "", "n_components_"], [541, 3, 1, "", "n_features_in_"], [541, 2, 1, "", "set_output"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[542, 2, 1, "", "fit"], [542, 2, 1, "", "fit_transform"], [542, 2, 1, "", "get_feature_names_out"], [542, 2, 1, "", "get_metadata_routing"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "inverse_transform"], [542, 2, 1, "", "set_output"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[543, 2, 1, "", "fit"], [543, 2, 1, "", "fit_transform"], [543, 2, 1, "", "get_feature_names_out"], [543, 2, 1, "", "get_metadata_routing"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "inverse_transform"], [543, 2, 1, "", "set_output"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[548, 1, 1, "", "LinearDiscriminantAnalysis"], [549, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[548, 2, 1, "", "decision_function"], [548, 2, 1, "", "fit"], [548, 2, 1, "", "fit_transform"], [548, 2, 1, "", "get_feature_names_out"], [548, 2, 1, "", "get_metadata_routing"], [548, 2, 1, "", "get_params"], [548, 2, 1, "", "predict"], [548, 2, 1, "", "predict_log_proba"], [548, 2, 1, "", "predict_proba"], [548, 2, 1, "", "score"], [548, 2, 1, "", "set_output"], [548, 2, 1, "", "set_params"], [548, 2, 1, "", "set_score_request"], [548, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[549, 2, 1, "", "decision_function"], [549, 2, 1, "", "fit"], [549, 2, 1, "", "get_metadata_routing"], [549, 2, 1, "", "get_params"], [549, 2, 1, "", "predict"], [549, 2, 1, "", "predict_log_proba"], [549, 2, 1, "", "predict_proba"], [549, 2, 1, "", "score"], [549, 2, 1, "", "set_params"], [549, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[550, 1, 1, "", "DummyClassifier"], [551, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[550, 2, 1, "", "fit"], [550, 2, 1, "", "get_metadata_routing"], [550, 2, 1, "", "get_params"], [550, 2, 1, "", "predict"], [550, 2, 1, "", "predict_log_proba"], [550, 2, 1, "", "predict_proba"], [550, 2, 1, "", "score"], [550, 2, 1, "", "set_fit_request"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[551, 2, 1, "", "fit"], [551, 2, 1, "", "get_metadata_routing"], [551, 2, 1, "", "get_params"], [551, 2, 1, "", "predict"], [551, 2, 1, "", "score"], [551, 2, 1, "", "set_fit_request"], [551, 2, 1, "", "set_params"], [551, 2, 1, "", "set_predict_request"], [551, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[552, 1, 1, "", "AdaBoostClassifier"], [553, 1, 1, "", "AdaBoostRegressor"], [554, 1, 1, "", "BaggingClassifier"], [555, 1, 1, "", "BaggingRegressor"], [556, 1, 1, "", "ExtraTreesClassifier"], [557, 1, 1, "", "ExtraTreesRegressor"], [558, 1, 1, "", "GradientBoostingClassifier"], [559, 1, 1, "", "GradientBoostingRegressor"], [560, 1, 1, "", "HistGradientBoostingClassifier"], [561, 1, 1, "", "HistGradientBoostingRegressor"], [562, 1, 1, "", "IsolationForest"], [563, 1, 1, "", "RandomForestClassifier"], [564, 1, 1, "", "RandomForestRegressor"], [565, 1, 1, "", "RandomTreesEmbedding"], [566, 1, 1, "", "StackingClassifier"], [567, 1, 1, "", "StackingRegressor"], [568, 1, 1, "", "VotingClassifier"], [569, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[552, 2, 1, "", "decision_function"], [552, 3, 1, "", "feature_importances_"], [552, 2, 1, "", "fit"], [552, 2, 1, "", "get_metadata_routing"], [552, 2, 1, "", "get_params"], [552, 2, 1, "", "predict"], [552, 2, 1, "", "predict_log_proba"], [552, 2, 1, "", "predict_proba"], [552, 2, 1, "", "score"], [552, 2, 1, "", "set_fit_request"], [552, 2, 1, "", "set_params"], [552, 2, 1, "", "set_score_request"], [552, 2, 1, "", "staged_decision_function"], [552, 2, 1, "", "staged_predict"], [552, 2, 1, "", "staged_predict_proba"], [552, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[553, 3, 1, "", "feature_importances_"], [553, 2, 1, "", "fit"], [553, 2, 1, "", "get_metadata_routing"], [553, 2, 1, "", "get_params"], [553, 2, 1, "", "predict"], [553, 2, 1, "", "score"], [553, 2, 1, "", "set_fit_request"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "set_score_request"], [553, 2, 1, "", "staged_predict"], [553, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[554, 2, 1, "", "decision_function"], [554, 3, 1, "", "estimators_samples_"], [554, 2, 1, "", "fit"], [554, 2, 1, "", "get_metadata_routing"], [554, 2, 1, "", "get_params"], [554, 2, 1, "", "predict"], [554, 2, 1, "", "predict_log_proba"], [554, 2, 1, "", "predict_proba"], [554, 2, 1, "", "score"], [554, 2, 1, "", "set_fit_request"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[555, 3, 1, "", "estimators_samples_"], [555, 2, 1, "", "fit"], [555, 2, 1, "", "get_metadata_routing"], [555, 2, 1, "", "get_params"], [555, 2, 1, "", "predict"], [555, 2, 1, "", "score"], [555, 2, 1, "", "set_fit_request"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[556, 2, 1, "", "apply"], [556, 2, 1, "", "decision_path"], [556, 3, 1, "", "estimators_samples_"], [556, 3, 1, "", "feature_importances_"], [556, 2, 1, "", "fit"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 2, 1, "", "predict"], [556, 2, 1, "", "predict_log_proba"], [556, 2, 1, "", "predict_proba"], [556, 2, 1, "", "score"], [556, 2, 1, "", "set_fit_request"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[557, 2, 1, "", "apply"], [557, 2, 1, "", "decision_path"], [557, 3, 1, "", "estimators_samples_"], [557, 3, 1, "", "feature_importances_"], [557, 2, 1, "", "fit"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "predict"], [557, 2, 1, "", "score"], [557, 2, 1, "", "set_fit_request"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[558, 2, 1, "", "apply"], [558, 2, 1, "", "decision_function"], [558, 3, 1, "", "feature_importances_"], [558, 2, 1, "", "fit"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "predict_log_proba"], [558, 2, 1, "", "predict_proba"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_fit_request"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_score_request"], [558, 2, 1, "", "staged_decision_function"], [558, 2, 1, "", "staged_predict"], [558, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[559, 2, 1, "", "apply"], [559, 3, 1, "", "feature_importances_"], [559, 2, 1, "", "fit"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "score"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "set_score_request"], [559, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[560, 2, 1, "", "decision_function"], [560, 2, 1, "", "fit"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 3, 1, "", "n_iter_"], [560, 2, 1, "", "predict"], [560, 2, 1, "", "predict_proba"], [560, 2, 1, "", "score"], [560, 2, 1, "", "set_fit_request"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "set_score_request"], [560, 2, 1, "", "staged_decision_function"], [560, 2, 1, "", "staged_predict"], [560, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[561, 2, 1, "", "fit"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 3, 1, "", "n_iter_"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "score"], [561, 2, 1, "", "set_fit_request"], [561, 2, 1, "", "set_params"], [561, 2, 1, "", "set_score_request"], [561, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[562, 2, 1, "", "decision_function"], [562, 3, 1, "", "estimators_samples_"], [562, 2, 1, "", "fit"], [562, 2, 1, "", "fit_predict"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 2, 1, "", "predict"], [562, 2, 1, "", "score_samples"], [562, 2, 1, "", "set_fit_request"], [562, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[563, 2, 1, "", "apply"], [563, 2, 1, "", "decision_path"], [563, 3, 1, "", "estimators_samples_"], [563, 3, 1, "", "feature_importances_"], [563, 2, 1, "", "fit"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 2, 1, "", "predict"], [563, 2, 1, "", "predict_log_proba"], [563, 2, 1, "", "predict_proba"], [563, 2, 1, "", "score"], [563, 2, 1, "", "set_fit_request"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[564, 2, 1, "", "apply"], [564, 2, 1, "", "decision_path"], [564, 3, 1, "", "estimators_samples_"], [564, 3, 1, "", "feature_importances_"], [564, 2, 1, "", "fit"], [564, 2, 1, "", "get_metadata_routing"], [564, 2, 1, "", "get_params"], [564, 2, 1, "", "predict"], [564, 2, 1, "", "score"], [564, 2, 1, "", "set_fit_request"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[565, 2, 1, "", "apply"], [565, 2, 1, "", "decision_path"], [565, 3, 1, "", "estimators_samples_"], [565, 3, 1, "", "feature_importances_"], [565, 2, 1, "", "fit"], [565, 2, 1, "", "fit_transform"], [565, 2, 1, "", "get_feature_names_out"], [565, 2, 1, "", "get_metadata_routing"], [565, 2, 1, "", "get_params"], [565, 2, 1, "", "set_fit_request"], [565, 2, 1, "", "set_output"], [565, 2, 1, "", "set_params"], [565, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[566, 2, 1, "", "decision_function"], [566, 2, 1, "", "fit"], [566, 2, 1, "", "fit_transform"], [566, 2, 1, "", "get_feature_names_out"], [566, 2, 1, "", "get_metadata_routing"], [566, 2, 1, "", "get_params"], [566, 3, 1, "", "n_features_in_"], [566, 3, 1, "", "named_estimators"], [566, 2, 1, "", "predict"], [566, 2, 1, "", "predict_proba"], [566, 2, 1, "", "score"], [566, 2, 1, "", "set_fit_request"], [566, 2, 1, "", "set_output"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "set_score_request"], [566, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[567, 2, 1, "", "fit"], [567, 2, 1, "", "fit_transform"], [567, 2, 1, "", "get_feature_names_out"], [567, 2, 1, "", "get_metadata_routing"], [567, 2, 1, "", "get_params"], [567, 3, 1, "", "n_features_in_"], [567, 3, 1, "", "named_estimators"], [567, 2, 1, "", "predict"], [567, 2, 1, "", "score"], [567, 2, 1, "", "set_fit_request"], [567, 2, 1, "", "set_output"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "set_score_request"], [567, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[568, 2, 1, "", "fit"], [568, 2, 1, "", "fit_transform"], [568, 2, 1, "", "get_feature_names_out"], [568, 2, 1, "", "get_metadata_routing"], [568, 2, 1, "", "get_params"], [568, 3, 1, "", "n_features_in_"], [568, 3, 1, "", "named_estimators"], [568, 2, 1, "", "predict"], [568, 2, 1, "", "predict_proba"], [568, 2, 1, "", "score"], [568, 2, 1, "", "set_fit_request"], [568, 2, 1, "", "set_output"], [568, 2, 1, "", "set_params"], [568, 2, 1, "", "set_score_request"], [568, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[569, 2, 1, "", "fit"], [569, 2, 1, "", "fit_transform"], [569, 2, 1, "", "get_feature_names_out"], [569, 2, 1, "", "get_metadata_routing"], [569, 2, 1, "", "get_params"], [569, 3, 1, "", "n_features_in_"], [569, 3, 1, "", "named_estimators"], [569, 2, 1, "", "predict"], [569, 2, 1, "", "score"], [569, 2, 1, "", "set_fit_request"], [569, 2, 1, "", "set_output"], [569, 2, 1, "", "set_params"], [569, 2, 1, "", "set_score_request"], [569, 2, 1, "", "transform"]], "sklearn.exceptions": [[570, 1, 1, "", "ConvergenceWarning"], [571, 1, 1, "", "DataConversionWarning"], [572, 1, 1, "", "DataDimensionalityWarning"], [573, 1, 1, "", "EfficiencyWarning"], [574, 1, 1, "", "FitFailedWarning"], [575, 1, 1, "", "InconsistentVersionWarning"], [576, 1, 1, "", "NotFittedError"], [577, 1, 1, "", "UndefinedMetricWarning"]], "sklearn.exceptions.ConvergenceWarning": [[570, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataConversionWarning": [[571, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataDimensionalityWarning": [[572, 2, 1, "", "with_traceback"]], "sklearn.exceptions.EfficiencyWarning": [[573, 2, 1, "", "with_traceback"]], "sklearn.exceptions.FitFailedWarning": [[574, 2, 1, "", "with_traceback"]], "sklearn.exceptions.InconsistentVersionWarning": [[575, 2, 1, "", "with_traceback"]], "sklearn.exceptions.NotFittedError": [[576, 2, 1, "", "with_traceback"]], "sklearn.exceptions.UndefinedMetricWarning": [[577, 2, 1, "", "with_traceback"]], "sklearn.experimental": [[578, 0, 0, "-", "enable_halving_search_cv"], [579, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[580, 1, 1, "", "DictVectorizer"], [581, 1, 1, "", "FeatureHasher"], [407, 0, 0, "-", "image"], [407, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[580, 2, 1, "", "fit"], [580, 2, 1, "", "fit_transform"], [580, 2, 1, "", "get_feature_names_out"], [580, 2, 1, "", "get_metadata_routing"], [580, 2, 1, "", "get_params"], [580, 2, 1, "", "inverse_transform"], [580, 2, 1, "", "restrict"], [580, 2, 1, "", "set_inverse_transform_request"], [580, 2, 1, "", "set_output"], [580, 2, 1, "", "set_params"], [580, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[581, 2, 1, "", "fit"], [581, 2, 1, "", "fit_transform"], [581, 2, 1, "", "get_metadata_routing"], [581, 2, 1, "", "get_params"], [581, 2, 1, "", "set_output"], [581, 2, 1, "", "set_params"], [581, 2, 1, "", "set_transform_request"], [581, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[582, 1, 1, "", "PatchExtractor"], [583, 4, 1, "", "extract_patches_2d"], [584, 4, 1, "", "grid_to_graph"], [585, 4, 1, "", "img_to_graph"], [586, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[582, 2, 1, "", "fit"], [582, 2, 1, "", "fit_transform"], [582, 2, 1, "", "get_metadata_routing"], [582, 2, 1, "", "get_params"], [582, 2, 1, "", "set_output"], [582, 2, 1, "", "set_params"], [582, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[587, 1, 1, "", "CountVectorizer"], [588, 1, 1, "", "HashingVectorizer"], [589, 1, 1, "", "TfidfTransformer"], [590, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[587, 2, 1, "", "build_analyzer"], [587, 2, 1, "", "build_preprocessor"], [587, 2, 1, "", "build_tokenizer"], [587, 2, 1, "", "decode"], [587, 2, 1, "", "fit"], [587, 2, 1, "", "fit_transform"], [587, 2, 1, "", "get_feature_names_out"], [587, 2, 1, "", "get_metadata_routing"], [587, 2, 1, "", "get_params"], [587, 2, 1, "", "get_stop_words"], [587, 2, 1, "", "inverse_transform"], [587, 2, 1, "", "set_fit_request"], [587, 2, 1, "", "set_params"], [587, 2, 1, "", "set_transform_request"], [587, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[588, 2, 1, "", "build_analyzer"], [588, 2, 1, "", "build_preprocessor"], [588, 2, 1, "", "build_tokenizer"], [588, 2, 1, "", "decode"], [588, 2, 1, "", "fit"], [588, 2, 1, "", "fit_transform"], [588, 2, 1, "", "get_metadata_routing"], [588, 2, 1, "", "get_params"], [588, 2, 1, "", "get_stop_words"], [588, 2, 1, "", "partial_fit"], [588, 2, 1, "", "set_output"], [588, 2, 1, "", "set_params"], [588, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[589, 2, 1, "", "fit"], [589, 2, 1, "", "fit_transform"], [589, 2, 1, "", "get_feature_names_out"], [589, 2, 1, "", "get_metadata_routing"], [589, 2, 1, "", "get_params"], [589, 3, 1, "", "idf_"], [589, 2, 1, "", "set_output"], [589, 2, 1, "", "set_params"], [589, 2, 1, "", "set_transform_request"], [589, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[590, 2, 1, "", "build_analyzer"], [590, 2, 1, "", "build_preprocessor"], [590, 2, 1, "", "build_tokenizer"], [590, 2, 1, "", "decode"], [590, 2, 1, "", "fit"], [590, 2, 1, "", "fit_transform"], [590, 2, 1, "", "get_feature_names_out"], [590, 2, 1, "", "get_metadata_routing"], [590, 2, 1, "", "get_params"], [590, 2, 1, "", "get_stop_words"], [590, 3, 1, "", "idf_"], [590, 2, 1, "", "inverse_transform"], [590, 2, 1, "", "set_fit_request"], [590, 2, 1, "", "set_params"], [590, 2, 1, "", "set_transform_request"], [590, 2, 1, "", "transform"]], "sklearn.feature_selection": [[591, 1, 1, "", "GenericUnivariateSelect"], [592, 1, 1, "", "RFE"], [593, 1, 1, "", "RFECV"], [594, 1, 1, "", "SelectFdr"], [595, 1, 1, "", "SelectFpr"], [596, 1, 1, "", "SelectFromModel"], [597, 1, 1, "", "SelectFwe"], [598, 1, 1, "", "SelectKBest"], [599, 1, 1, "", "SelectPercentile"], [600, 1, 1, "", "SelectorMixin"], [601, 1, 1, "", "SequentialFeatureSelector"], [602, 1, 1, "", "VarianceThreshold"], [603, 4, 1, "", "chi2"], [604, 4, 1, "", "f_classif"], [605, 4, 1, "", "f_regression"], [606, 4, 1, "", "mutual_info_classif"], [607, 4, 1, "", "mutual_info_regression"], [608, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[591, 2, 1, "", "fit"], [591, 2, 1, "", "fit_transform"], [591, 2, 1, "", "get_feature_names_out"], [591, 2, 1, "", "get_metadata_routing"], [591, 2, 1, "", "get_params"], [591, 2, 1, "", "get_support"], [591, 2, 1, "", "inverse_transform"], [591, 2, 1, "", "set_output"], [591, 2, 1, "", "set_params"], [591, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[592, 3, 1, "", "classes_"], [592, 2, 1, "", "decision_function"], [592, 2, 1, "", "fit"], [592, 2, 1, "", "fit_transform"], [592, 2, 1, "", "get_feature_names_out"], [592, 2, 1, "", "get_metadata_routing"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "get_support"], [592, 2, 1, "", "inverse_transform"], [592, 2, 1, "", "predict"], [592, 2, 1, "", "predict_log_proba"], [592, 2, 1, "", "predict_proba"], [592, 2, 1, "", "score"], [592, 2, 1, "", "set_output"], [592, 2, 1, "", "set_params"], [592, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[593, 3, 1, "", "classes_"], [593, 2, 1, "", "decision_function"], [593, 2, 1, "", "fit"], [593, 2, 1, "", "fit_transform"], [593, 2, 1, "", "get_feature_names_out"], [593, 2, 1, "", "get_metadata_routing"], [593, 2, 1, "", "get_params"], [593, 2, 1, "", "get_support"], [593, 2, 1, "", "inverse_transform"], [593, 2, 1, "", "predict"], [593, 2, 1, "", "predict_log_proba"], [593, 2, 1, "", "predict_proba"], [593, 2, 1, "", "score"], [593, 2, 1, "", "set_fit_request"], [593, 2, 1, "", "set_output"], [593, 2, 1, "", "set_params"], [593, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[594, 2, 1, "", "fit"], [594, 2, 1, "", "fit_transform"], [594, 2, 1, "", "get_feature_names_out"], [594, 2, 1, "", "get_metadata_routing"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "get_support"], [594, 2, 1, "", "inverse_transform"], [594, 2, 1, "", "set_output"], [594, 2, 1, "", "set_params"], [594, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[595, 2, 1, "", "fit"], [595, 2, 1, "", "fit_transform"], [595, 2, 1, "", "get_feature_names_out"], [595, 2, 1, "", "get_metadata_routing"], [595, 2, 1, "", "get_params"], [595, 2, 1, "", "get_support"], [595, 2, 1, "", "inverse_transform"], [595, 2, 1, "", "set_output"], [595, 2, 1, "", "set_params"], [595, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[596, 2, 1, "", "fit"], [596, 2, 1, "", "fit_transform"], [596, 2, 1, "", "get_feature_names_out"], [596, 2, 1, "", "get_metadata_routing"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "get_support"], [596, 2, 1, "", "inverse_transform"], [596, 3, 1, "", "n_features_in_"], [596, 2, 1, "", "partial_fit"], [596, 2, 1, "", "set_output"], [596, 2, 1, "", "set_params"], [596, 3, 1, "", "threshold_"], [596, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[597, 2, 1, "", "fit"], [597, 2, 1, "", "fit_transform"], [597, 2, 1, "", "get_feature_names_out"], [597, 2, 1, "", "get_metadata_routing"], [597, 2, 1, "", "get_params"], [597, 2, 1, "", "get_support"], [597, 2, 1, "", "inverse_transform"], [597, 2, 1, "", "set_output"], [597, 2, 1, "", "set_params"], [597, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[598, 2, 1, "", "fit"], [598, 2, 1, "", "fit_transform"], [598, 2, 1, "", "get_feature_names_out"], [598, 2, 1, "", "get_metadata_routing"], [598, 2, 1, "", "get_params"], [598, 2, 1, "", "get_support"], [598, 2, 1, "", "inverse_transform"], [598, 2, 1, "", "set_output"], [598, 2, 1, "", "set_params"], [598, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[599, 2, 1, "", "fit"], [599, 2, 1, "", "fit_transform"], [599, 2, 1, "", "get_feature_names_out"], [599, 2, 1, "", "get_metadata_routing"], [599, 2, 1, "", "get_params"], [599, 2, 1, "", "get_support"], [599, 2, 1, "", "inverse_transform"], [599, 2, 1, "", "set_output"], [599, 2, 1, "", "set_params"], [599, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[600, 2, 1, "", "fit_transform"], [600, 2, 1, "", "get_feature_names_out"], [600, 2, 1, "", "get_support"], [600, 2, 1, "", "inverse_transform"], [600, 2, 1, "", "set_output"], [600, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[601, 2, 1, "", "fit"], [601, 2, 1, "", "fit_transform"], [601, 2, 1, "", "get_feature_names_out"], [601, 2, 1, "", "get_metadata_routing"], [601, 2, 1, "", "get_params"], [601, 2, 1, "", "get_support"], [601, 2, 1, "", "inverse_transform"], [601, 2, 1, "", "set_output"], [601, 2, 1, "", "set_params"], [601, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[602, 2, 1, "", "fit"], [602, 2, 1, "", "fit_transform"], [602, 2, 1, "", "get_feature_names_out"], [602, 2, 1, "", "get_metadata_routing"], [602, 2, 1, "", "get_params"], [602, 2, 1, "", "get_support"], [602, 2, 1, "", "inverse_transform"], [602, 2, 1, "", "set_output"], [602, 2, 1, "", "set_params"], [602, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[609, 1, 1, "", "GaussianProcessClassifier"], [610, 1, 1, "", "GaussianProcessRegressor"], [407, 0, 0, "-", "kernels"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[609, 2, 1, "", "fit"], [609, 2, 1, "", "get_metadata_routing"], [609, 2, 1, "", "get_params"], [609, 3, 1, "", "kernel_"], [609, 2, 1, "", "log_marginal_likelihood"], [609, 2, 1, "", "predict"], [609, 2, 1, "", "predict_proba"], [609, 2, 1, "", "score"], [609, 2, 1, "", "set_params"], [609, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[610, 2, 1, "", "fit"], [610, 2, 1, "", "get_metadata_routing"], [610, 2, 1, "", "get_params"], [610, 2, 1, "", "log_marginal_likelihood"], [610, 2, 1, "", "predict"], [610, 2, 1, "", "sample_y"], [610, 2, 1, "", "score"], [610, 2, 1, "", "set_params"], [610, 2, 1, "", "set_predict_request"], [610, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[611, 1, 1, "", "CompoundKernel"], [612, 1, 1, "", "ConstantKernel"], [613, 1, 1, "", "DotProduct"], [614, 1, 1, "", "ExpSineSquared"], [615, 1, 1, "", "Exponentiation"], [616, 1, 1, "", "Hyperparameter"], [617, 1, 1, "", "Kernel"], [618, 1, 1, "", "Matern"], [619, 1, 1, "", "PairwiseKernel"], [620, 1, 1, "", "Product"], [621, 1, 1, "", "RBF"], [622, 1, 1, "", "RationalQuadratic"], [623, 1, 1, "", "Sum"], [624, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[611, 2, 1, "", "__call__"], [611, 3, 1, "", "bounds"], [611, 2, 1, "", "clone_with_theta"], [611, 2, 1, "", "diag"], [611, 2, 1, "", "get_params"], [611, 3, 1, "", "hyperparameters"], [611, 2, 1, "", "is_stationary"], [611, 3, 1, "", "n_dims"], [611, 3, 1, "", "requires_vector_input"], [611, 2, 1, "", "set_params"], [611, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[612, 2, 1, "", "__call__"], [612, 3, 1, "", "bounds"], [612, 2, 1, "", "clone_with_theta"], [612, 2, 1, "", "diag"], [612, 2, 1, "", "get_params"], [612, 3, 1, "", "hyperparameters"], [612, 2, 1, "", "is_stationary"], [612, 3, 1, "", "n_dims"], [612, 3, 1, "", "requires_vector_input"], [612, 2, 1, "", "set_params"], [612, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[613, 2, 1, "", "__call__"], [613, 3, 1, "", "bounds"], [613, 2, 1, "", "clone_with_theta"], [613, 2, 1, "", "diag"], [613, 2, 1, "", "get_params"], [613, 3, 1, "", "hyperparameters"], [613, 2, 1, "", "is_stationary"], [613, 3, 1, "", "n_dims"], [613, 3, 1, "", "requires_vector_input"], [613, 2, 1, "", "set_params"], [613, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[614, 2, 1, "", "__call__"], [614, 3, 1, "", "bounds"], [614, 2, 1, "", "clone_with_theta"], [614, 2, 1, "", "diag"], [614, 2, 1, "", "get_params"], [614, 3, 1, "", "hyperparameter_length_scale"], [614, 3, 1, "", "hyperparameters"], [614, 2, 1, "", "is_stationary"], [614, 3, 1, "", "n_dims"], [614, 3, 1, "", "requires_vector_input"], [614, 2, 1, "", "set_params"], [614, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[615, 2, 1, "", "__call__"], [615, 3, 1, "", "bounds"], [615, 2, 1, "", "clone_with_theta"], [615, 2, 1, "", "diag"], [615, 2, 1, "", "get_params"], [615, 3, 1, "", "hyperparameters"], [615, 2, 1, "", "is_stationary"], [615, 3, 1, "", "n_dims"], [615, 3, 1, "", "requires_vector_input"], [615, 2, 1, "", "set_params"], [615, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[616, 2, 1, "", "__call__"], [616, 5, 1, "", "bounds"], [616, 2, 1, "", "count"], [616, 5, 1, "", "fixed"], [616, 2, 1, "", "index"], [616, 5, 1, "", "n_elements"], [616, 5, 1, "", "name"], [616, 5, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[617, 2, 1, "", "__call__"], [617, 3, 1, "", "bounds"], [617, 2, 1, "", "clone_with_theta"], [617, 2, 1, "", "diag"], [617, 2, 1, "", "get_params"], [617, 3, 1, "", "hyperparameters"], [617, 2, 1, "", "is_stationary"], [617, 3, 1, "", "n_dims"], [617, 3, 1, "", "requires_vector_input"], [617, 2, 1, "", "set_params"], [617, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[618, 2, 1, "", "__call__"], [618, 3, 1, "", "bounds"], [618, 2, 1, "", "clone_with_theta"], [618, 2, 1, "", "diag"], [618, 2, 1, "", "get_params"], [618, 3, 1, "", "hyperparameters"], [618, 2, 1, "", "is_stationary"], [618, 3, 1, "", "n_dims"], [618, 3, 1, "", "requires_vector_input"], [618, 2, 1, "", "set_params"], [618, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[619, 2, 1, "", "__call__"], [619, 3, 1, "", "bounds"], [619, 2, 1, "", "clone_with_theta"], [619, 2, 1, "", "diag"], [619, 2, 1, "", "get_params"], [619, 3, 1, "", "hyperparameters"], [619, 2, 1, "", "is_stationary"], [619, 3, 1, "", "n_dims"], [619, 3, 1, "", "requires_vector_input"], [619, 2, 1, "", "set_params"], [619, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[620, 2, 1, "", "__call__"], [620, 3, 1, "", "bounds"], [620, 2, 1, "", "clone_with_theta"], [620, 2, 1, "", "diag"], [620, 2, 1, "", "get_params"], [620, 3, 1, "", "hyperparameters"], [620, 2, 1, "", "is_stationary"], [620, 3, 1, "", "n_dims"], [620, 3, 1, "", "requires_vector_input"], [620, 2, 1, "", "set_params"], [620, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[621, 2, 1, "", "__call__"], [621, 3, 1, "", "bounds"], [621, 2, 1, "", "clone_with_theta"], [621, 2, 1, "", "diag"], [621, 2, 1, "", "get_params"], [621, 3, 1, "", "hyperparameters"], [621, 2, 1, "", "is_stationary"], [621, 3, 1, "", "n_dims"], [621, 3, 1, "", "requires_vector_input"], [621, 2, 1, "", "set_params"], [621, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[622, 2, 1, "", "__call__"], [622, 3, 1, "", "bounds"], [622, 2, 1, "", "clone_with_theta"], [622, 2, 1, "", "diag"], [622, 2, 1, "", "get_params"], [622, 3, 1, "", "hyperparameters"], [622, 2, 1, "", "is_stationary"], [622, 3, 1, "", "n_dims"], [622, 3, 1, "", "requires_vector_input"], [622, 2, 1, "", "set_params"], [622, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[623, 2, 1, "", "__call__"], [623, 3, 1, "", "bounds"], [623, 2, 1, "", "clone_with_theta"], [623, 2, 1, "", "diag"], [623, 2, 1, "", "get_params"], [623, 3, 1, "", "hyperparameters"], [623, 2, 1, "", "is_stationary"], [623, 3, 1, "", "n_dims"], [623, 3, 1, "", "requires_vector_input"], [623, 2, 1, "", "set_params"], [623, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[624, 2, 1, "", "__call__"], [624, 3, 1, "", "bounds"], [624, 2, 1, "", "clone_with_theta"], [624, 2, 1, "", "diag"], [624, 2, 1, "", "get_params"], [624, 3, 1, "", "hyperparameters"], [624, 2, 1, "", "is_stationary"], [624, 3, 1, "", "n_dims"], [624, 3, 1, "", "requires_vector_input"], [624, 2, 1, "", "set_params"], [624, 3, 1, "", "theta"]], "sklearn.impute": [[626, 1, 1, "", "IterativeImputer"], [627, 1, 1, "", "KNNImputer"], [628, 1, 1, "", "MissingIndicator"], [629, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[626, 2, 1, "", "fit"], [626, 2, 1, "", "fit_transform"], [626, 2, 1, "", "get_feature_names_out"], [626, 2, 1, "", "get_metadata_routing"], [626, 2, 1, "", "get_params"], [626, 2, 1, "", "set_output"], [626, 2, 1, "", "set_params"], [626, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[627, 2, 1, "", "fit"], [627, 2, 1, "", "fit_transform"], [627, 2, 1, "", "get_feature_names_out"], [627, 2, 1, "", "get_metadata_routing"], [627, 2, 1, "", "get_params"], [627, 2, 1, "", "set_output"], [627, 2, 1, "", "set_params"], [627, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[628, 2, 1, "", "fit"], [628, 2, 1, "", "fit_transform"], [628, 2, 1, "", "get_feature_names_out"], [628, 2, 1, "", "get_metadata_routing"], [628, 2, 1, "", "get_params"], [628, 2, 1, "", "set_output"], [628, 2, 1, "", "set_params"], [628, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[629, 2, 1, "", "fit"], [629, 2, 1, "", "fit_transform"], [629, 2, 1, "", "get_feature_names_out"], [629, 2, 1, "", "get_metadata_routing"], [629, 2, 1, "", "get_params"], [629, 2, 1, "", "inverse_transform"], [629, 2, 1, "", "set_output"], [629, 2, 1, "", "set_params"], [629, 2, 1, "", "transform"]], "sklearn.inspection": [[630, 1, 1, "", "DecisionBoundaryDisplay"], [631, 1, 1, "", "PartialDependenceDisplay"], [632, 4, 1, "", "partial_dependence"], [633, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[630, 2, 1, "", "from_estimator"], [630, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[631, 2, 1, "", "from_estimator"], [631, 2, 1, "", "plot"]], "sklearn.isotonic": [[634, 1, 1, "", "IsotonicRegression"], [635, 4, 1, "", "check_increasing"], [636, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[634, 2, 1, "", "fit"], [634, 2, 1, "", "fit_transform"], [634, 2, 1, "", "get_feature_names_out"], [634, 2, 1, "", "get_metadata_routing"], [634, 2, 1, "", "get_params"], [634, 2, 1, "", "predict"], [634, 2, 1, "", "score"], [634, 2, 1, "", "set_fit_request"], [634, 2, 1, "", "set_output"], [634, 2, 1, "", "set_params"], [634, 2, 1, "", "set_predict_request"], [634, 2, 1, "", "set_score_request"], [634, 2, 1, "", "set_transform_request"], [634, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[637, 1, 1, "", "AdditiveChi2Sampler"], [638, 1, 1, "", "Nystroem"], [639, 1, 1, "", "PolynomialCountSketch"], [640, 1, 1, "", "RBFSampler"], [641, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[637, 2, 1, "", "fit"], [637, 2, 1, "", "fit_transform"], [637, 2, 1, "", "get_feature_names_out"], [637, 2, 1, "", "get_metadata_routing"], [637, 2, 1, "", "get_params"], [637, 2, 1, "", "set_output"], [637, 2, 1, "", "set_params"], [637, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "fit_transform"], [638, 2, 1, "", "get_feature_names_out"], [638, 2, 1, "", "get_metadata_routing"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "set_output"], [638, 2, 1, "", "set_params"], [638, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "fit_transform"], [639, 2, 1, "", "get_feature_names_out"], [639, 2, 1, "", "get_metadata_routing"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "set_output"], [639, 2, 1, "", "set_params"], [639, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "fit_transform"], [640, 2, 1, "", "get_feature_names_out"], [640, 2, 1, "", "get_metadata_routing"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "set_output"], [640, 2, 1, "", "set_params"], [640, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "fit_transform"], [641, 2, 1, "", "get_feature_names_out"], [641, 2, 1, "", "get_metadata_routing"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "set_output"], [641, 2, 1, "", "set_params"], [641, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[642, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "get_metadata_routing"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "predict"], [642, 2, 1, "", "score"], [642, 2, 1, "", "set_fit_request"], [642, 2, 1, "", "set_params"], [642, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[643, 1, 1, "", "ARDRegression"], [644, 1, 1, "", "BayesianRidge"], [645, 1, 1, "", "ElasticNet"], [646, 1, 1, "", "ElasticNetCV"], [647, 1, 1, "", "GammaRegressor"], [648, 1, 1, "", "HuberRegressor"], [649, 1, 1, "", "Lars"], [650, 1, 1, "", "LarsCV"], [651, 1, 1, "", "Lasso"], [652, 1, 1, "", "LassoCV"], [653, 1, 1, "", "LassoLars"], [654, 1, 1, "", "LassoLarsCV"], [655, 1, 1, "", "LassoLarsIC"], [656, 1, 1, "", "LinearRegression"], [657, 1, 1, "", "LogisticRegression"], [658, 1, 1, "", "LogisticRegressionCV"], [659, 1, 1, "", "MultiTaskElasticNet"], [660, 1, 1, "", "MultiTaskElasticNetCV"], [661, 1, 1, "", "MultiTaskLasso"], [662, 1, 1, "", "MultiTaskLassoCV"], [663, 1, 1, "", "OrthogonalMatchingPursuit"], [664, 1, 1, "", "OrthogonalMatchingPursuitCV"], [665, 1, 1, "", "PassiveAggressiveClassifier"], [666, 1, 1, "", "PassiveAggressiveRegressor"], [667, 1, 1, "", "Perceptron"], [668, 1, 1, "", "PoissonRegressor"], [669, 1, 1, "", "QuantileRegressor"], [670, 1, 1, "", "RANSACRegressor"], [671, 1, 1, "", "Ridge"], [672, 1, 1, "", "RidgeCV"], [673, 1, 1, "", "RidgeClassifier"], [674, 1, 1, "", "RidgeClassifierCV"], [675, 1, 1, "", "SGDClassifier"], [676, 1, 1, "", "SGDOneClassSVM"], [677, 1, 1, "", "SGDRegressor"], [678, 1, 1, "", "TheilSenRegressor"], [679, 1, 1, "", "TweedieRegressor"], [680, 4, 1, "", "enet_path"], [681, 4, 1, "", "lars_path"], [682, 4, 1, "", "lars_path_gram"], [683, 4, 1, "", "lasso_path"], [684, 4, 1, "", "orthogonal_mp"], [685, 4, 1, "", "orthogonal_mp_gram"], [686, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "get_metadata_routing"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "predict"], [643, 2, 1, "", "score"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "set_predict_request"], [643, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_fit_request"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "set_predict_request"], [644, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "get_metadata_routing"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "path"], [645, 2, 1, "", "predict"], [645, 2, 1, "", "score"], [645, 2, 1, "", "set_fit_request"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "set_score_request"], [645, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "get_metadata_routing"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "path"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_fit_request"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_fit_request"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_fit_request"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_fit_request"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_fit_request"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "path"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_fit_request"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "set_score_request"], [651, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "path"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_fit_request"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_fit_request"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_fit_request"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[657, 2, 1, "", "decision_function"], [657, 2, 1, "", "densify"], [657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "predict_log_proba"], [657, 2, 1, "", "predict_proba"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_fit_request"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_score_request"], [657, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[658, 2, 1, "", "decision_function"], [658, 2, 1, "", "densify"], [658, 2, 1, "", "fit"], [658, 2, 1, "", "get_metadata_routing"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "predict_log_proba"], [658, 2, 1, "", "predict_proba"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_fit_request"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "set_score_request"], [658, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "path"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_fit_request"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_score_request"], [659, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[660, 2, 1, "", "fit"], [660, 2, 1, "", "get_metadata_routing"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "path"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_fit_request"], [660, 2, 1, "", "set_params"], [660, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[661, 2, 1, "", "fit"], [661, 2, 1, "", "get_metadata_routing"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "path"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_fit_request"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "set_score_request"], [661, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "path"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_fit_request"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[665, 2, 1, "", "decision_function"], [665, 2, 1, "", "densify"], [665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "partial_fit"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_fit_request"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "set_partial_fit_request"], [665, 2, 1, "", "set_score_request"], [665, 2, 1, "", "sparsify"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[666, 2, 1, "", "densify"], [666, 2, 1, "", "fit"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "partial_fit"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_fit_request"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_partial_fit_request"], [666, 2, 1, "", "set_score_request"], [666, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[667, 2, 1, "", "decision_function"], [667, 2, 1, "", "densify"], [667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "partial_fit"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_fit_request"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "set_partial_fit_request"], [667, 2, 1, "", "set_score_request"], [667, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[668, 2, 1, "", "fit"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "score"], [668, 2, 1, "", "set_fit_request"], [668, 2, 1, "", "set_params"], [668, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_fit_request"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[670, 2, 1, "", "fit"], [670, 2, 1, "", "get_metadata_routing"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "predict"], [670, 2, 1, "", "score"], [670, 2, 1, "", "set_fit_request"], [670, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[671, 2, 1, "", "fit"], [671, 2, 1, "", "get_metadata_routing"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "predict"], [671, 2, 1, "", "score"], [671, 2, 1, "", "set_fit_request"], [671, 2, 1, "", "set_params"], [671, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[672, 2, 1, "", "fit"], [672, 2, 1, "", "get_metadata_routing"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "predict"], [672, 2, 1, "", "score"], [672, 2, 1, "", "set_fit_request"], [672, 2, 1, "", "set_params"], [672, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[673, 3, 1, "", "classes_"], [673, 2, 1, "", "decision_function"], [673, 2, 1, "", "fit"], [673, 2, 1, "", "get_metadata_routing"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "predict"], [673, 2, 1, "", "score"], [673, 2, 1, "", "set_fit_request"], [673, 2, 1, "", "set_params"], [673, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[674, 3, 1, "", "classes_"], [674, 2, 1, "", "decision_function"], [674, 2, 1, "", "fit"], [674, 2, 1, "", "get_metadata_routing"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "predict"], [674, 2, 1, "", "score"], [674, 2, 1, "", "set_fit_request"], [674, 2, 1, "", "set_params"], [674, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[675, 2, 1, "", "decision_function"], [675, 2, 1, "", "densify"], [675, 2, 1, "", "fit"], [675, 2, 1, "", "get_metadata_routing"], [675, 2, 1, "", "get_params"], [675, 2, 1, "", "partial_fit"], [675, 2, 1, "", "predict"], [675, 2, 1, "", "predict_log_proba"], [675, 2, 1, "", "predict_proba"], [675, 2, 1, "", "score"], [675, 2, 1, "", "set_fit_request"], [675, 2, 1, "", "set_params"], [675, 2, 1, "", "set_partial_fit_request"], [675, 2, 1, "", "set_score_request"], [675, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[676, 2, 1, "", "decision_function"], [676, 2, 1, "", "densify"], [676, 2, 1, "", "fit"], [676, 2, 1, "", "fit_predict"], [676, 2, 1, "", "get_metadata_routing"], [676, 2, 1, "", "get_params"], [676, 2, 1, "", "partial_fit"], [676, 2, 1, "", "predict"], [676, 2, 1, "", "score_samples"], [676, 2, 1, "", "set_fit_request"], [676, 2, 1, "", "set_params"], [676, 2, 1, "", "set_partial_fit_request"], [676, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[677, 2, 1, "", "densify"], [677, 2, 1, "", "fit"], [677, 2, 1, "", "get_metadata_routing"], [677, 2, 1, "", "get_params"], [677, 2, 1, "", "partial_fit"], [677, 2, 1, "", "predict"], [677, 2, 1, "", "score"], [677, 2, 1, "", "set_fit_request"], [677, 2, 1, "", "set_params"], [677, 2, 1, "", "set_partial_fit_request"], [677, 2, 1, "", "set_score_request"], [677, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[678, 2, 1, "", "fit"], [678, 2, 1, "", "get_metadata_routing"], [678, 2, 1, "", "get_params"], [678, 2, 1, "", "predict"], [678, 2, 1, "", "score"], [678, 2, 1, "", "set_params"], [678, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[679, 2, 1, "", "fit"], [679, 2, 1, "", "get_metadata_routing"], [679, 2, 1, "", "get_params"], [679, 2, 1, "", "predict"], [679, 2, 1, "", "score"], [679, 2, 1, "", "set_fit_request"], [679, 2, 1, "", "set_params"], [679, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[687, 1, 1, "", "Isomap"], [688, 1, 1, "", "LocallyLinearEmbedding"], [689, 1, 1, "", "MDS"], [690, 1, 1, "", "SpectralEmbedding"], [691, 1, 1, "", "TSNE"], [692, 4, 1, "", "locally_linear_embedding"], [693, 4, 1, "", "smacof"], [694, 4, 1, "", "spectral_embedding"], [695, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[687, 2, 1, "", "fit"], [687, 2, 1, "", "fit_transform"], [687, 2, 1, "", "get_feature_names_out"], [687, 2, 1, "", "get_metadata_routing"], [687, 2, 1, "", "get_params"], [687, 2, 1, "", "reconstruction_error"], [687, 2, 1, "", "set_output"], [687, 2, 1, "", "set_params"], [687, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[688, 2, 1, "", "fit"], [688, 2, 1, "", "fit_transform"], [688, 2, 1, "", "get_feature_names_out"], [688, 2, 1, "", "get_metadata_routing"], [688, 2, 1, "", "get_params"], [688, 2, 1, "", "set_output"], [688, 2, 1, "", "set_params"], [688, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[689, 2, 1, "", "fit"], [689, 2, 1, "", "fit_transform"], [689, 2, 1, "", "get_metadata_routing"], [689, 2, 1, "", "get_params"], [689, 2, 1, "", "set_fit_request"], [689, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[690, 2, 1, "", "fit"], [690, 2, 1, "", "fit_transform"], [690, 2, 1, "", "get_metadata_routing"], [690, 2, 1, "", "get_params"], [690, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[691, 2, 1, "", "fit"], [691, 2, 1, "", "fit_transform"], [691, 2, 1, "", "get_feature_names_out"], [691, 2, 1, "", "get_metadata_routing"], [691, 2, 1, "", "get_params"], [691, 2, 1, "", "set_output"], [691, 2, 1, "", "set_params"]], "sklearn.metrics": [[696, 1, 1, "", "ConfusionMatrixDisplay"], [697, 1, 1, "", "DetCurveDisplay"], [698, 1, 1, "", "DistanceMetric"], [699, 1, 1, "", "PrecisionRecallDisplay"], [700, 1, 1, "", "PredictionErrorDisplay"], [701, 1, 1, "", "RocCurveDisplay"], [702, 4, 1, "", "accuracy_score"], [703, 4, 1, "", "adjusted_mutual_info_score"], [704, 4, 1, "", "adjusted_rand_score"], [705, 4, 1, "", "auc"], [706, 4, 1, "", "average_precision_score"], [707, 4, 1, "", "balanced_accuracy_score"], [708, 4, 1, "", "brier_score_loss"], [709, 4, 1, "", "calinski_harabasz_score"], [710, 4, 1, "", "check_scoring"], [711, 4, 1, "", "class_likelihood_ratios"], [712, 4, 1, "", "classification_report"], [407, 0, 0, "-", "cluster"], [715, 4, 1, "", "cohen_kappa_score"], [716, 4, 1, "", "completeness_score"], [717, 4, 1, "", "confusion_matrix"], [718, 4, 1, "", "consensus_score"], [719, 4, 1, "", "coverage_error"], [720, 4, 1, "", "d2_absolute_error_score"], [721, 4, 1, "", "d2_pinball_score"], [722, 4, 1, "", "d2_tweedie_score"], [723, 4, 1, "", "davies_bouldin_score"], [724, 4, 1, "", "dcg_score"], [725, 4, 1, "", "det_curve"], [726, 4, 1, "", "explained_variance_score"], [727, 4, 1, "", "f1_score"], [728, 4, 1, "", "fbeta_score"], [729, 4, 1, "", "fowlkes_mallows_score"], [730, 4, 1, "", "get_scorer"], [731, 4, 1, "", "get_scorer_names"], [732, 4, 1, "", "hamming_loss"], [733, 4, 1, "", "hinge_loss"], [734, 4, 1, "", "homogeneity_completeness_v_measure"], [735, 4, 1, "", "homogeneity_score"], [736, 4, 1, "", "jaccard_score"], [737, 4, 1, "", "label_ranking_average_precision_score"], [738, 4, 1, "", "label_ranking_loss"], [739, 4, 1, "", "log_loss"], [740, 4, 1, "", "make_scorer"], [741, 4, 1, "", "matthews_corrcoef"], [742, 4, 1, "", "max_error"], [743, 4, 1, "", "mean_absolute_error"], [744, 4, 1, "", "mean_absolute_percentage_error"], [745, 4, 1, "", "mean_gamma_deviance"], [746, 4, 1, "", "mean_pinball_loss"], [747, 4, 1, "", "mean_poisson_deviance"], [748, 4, 1, "", "mean_squared_error"], [749, 4, 1, "", "mean_squared_log_error"], [750, 4, 1, "", "mean_tweedie_deviance"], [751, 4, 1, "", "median_absolute_error"], [752, 4, 1, "", "multilabel_confusion_matrix"], [753, 4, 1, "", "mutual_info_score"], [754, 4, 1, "", "ndcg_score"], [755, 4, 1, "", "normalized_mutual_info_score"], [407, 0, 0, "-", "pairwise"], [776, 4, 1, "", "pairwise_distances"], [777, 4, 1, "", "pairwise_distances_argmin"], [778, 4, 1, "", "pairwise_distances_argmin_min"], [779, 4, 1, "", "pairwise_distances_chunked"], [780, 4, 1, "", "precision_recall_curve"], [781, 4, 1, "", "precision_recall_fscore_support"], [782, 4, 1, "", "precision_score"], [783, 4, 1, "", "r2_score"], [784, 4, 1, "", "rand_score"], [785, 4, 1, "", "recall_score"], [786, 4, 1, "", "roc_auc_score"], [787, 4, 1, "", "roc_curve"], [788, 4, 1, "", "root_mean_squared_error"], [789, 4, 1, "", "root_mean_squared_log_error"], [790, 4, 1, "", "silhouette_samples"], [791, 4, 1, "", "silhouette_score"], [792, 4, 1, "", "top_k_accuracy_score"], [793, 4, 1, "", "v_measure_score"], [794, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[696, 2, 1, "", "from_estimator"], [696, 2, 1, "", "from_predictions"], [696, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[697, 2, 1, "", "from_estimator"], [697, 2, 1, "", "from_predictions"], [697, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[698, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[699, 2, 1, "", "from_estimator"], [699, 2, 1, "", "from_predictions"], [699, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[700, 2, 1, "", "from_estimator"], [700, 2, 1, "", "from_predictions"], [700, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[701, 2, 1, "", "from_estimator"], [701, 2, 1, "", "from_predictions"], [701, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[713, 4, 1, "", "contingency_matrix"], [714, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[756, 4, 1, "", "additive_chi2_kernel"], [757, 4, 1, "", "chi2_kernel"], [758, 4, 1, "", "cosine_distances"], [759, 4, 1, "", "cosine_similarity"], [760, 4, 1, "", "distance_metrics"], [761, 4, 1, "", "euclidean_distances"], [762, 4, 1, "", "haversine_distances"], [763, 4, 1, "", "kernel_metrics"], [764, 4, 1, "", "laplacian_kernel"], [765, 4, 1, "", "linear_kernel"], [766, 4, 1, "", "manhattan_distances"], [767, 4, 1, "", "nan_euclidean_distances"], [768, 4, 1, "", "paired_cosine_distances"], [769, 4, 1, "", "paired_distances"], [770, 4, 1, "", "paired_euclidean_distances"], [771, 4, 1, "", "paired_manhattan_distances"], [772, 4, 1, "", "pairwise_kernels"], [773, 4, 1, "", "polynomial_kernel"], [774, 4, 1, "", "rbf_kernel"], [775, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[795, 1, 1, "", "BayesianGaussianMixture"], [796, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[795, 2, 1, "", "fit"], [795, 2, 1, "", "fit_predict"], [795, 2, 1, "", "get_metadata_routing"], [795, 2, 1, "", "get_params"], [795, 2, 1, "", "predict"], [795, 2, 1, "", "predict_proba"], [795, 2, 1, "", "sample"], [795, 2, 1, "", "score"], [795, 2, 1, "", "score_samples"], [795, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[796, 2, 1, "", "aic"], [796, 2, 1, "", "bic"], [796, 2, 1, "", "fit"], [796, 2, 1, "", "fit_predict"], [796, 2, 1, "", "get_metadata_routing"], [796, 2, 1, "", "get_params"], [796, 2, 1, "", "predict"], [796, 2, 1, "", "predict_proba"], [796, 2, 1, "", "sample"], [796, 2, 1, "", "score"], [796, 2, 1, "", "score_samples"], [796, 2, 1, "", "set_params"]], "sklearn.model_selection": [[797, 1, 1, "", "GridSearchCV"], [798, 1, 1, "", "GroupKFold"], [799, 1, 1, "", "GroupShuffleSplit"], [800, 1, 1, "", "HalvingGridSearchCV"], [801, 1, 1, "", "HalvingRandomSearchCV"], [802, 1, 1, "", "KFold"], [803, 1, 1, "", "LearningCurveDisplay"], [804, 1, 1, "", "LeaveOneGroupOut"], [805, 1, 1, "", "LeaveOneOut"], [806, 1, 1, "", "LeavePGroupsOut"], [807, 1, 1, "", "LeavePOut"], [808, 1, 1, "", "ParameterGrid"], [809, 1, 1, "", "ParameterSampler"], [810, 1, 1, "", "PredefinedSplit"], [811, 1, 1, "", "RandomizedSearchCV"], [812, 1, 1, "", "RepeatedKFold"], [813, 1, 1, "", "RepeatedStratifiedKFold"], [814, 1, 1, "", "ShuffleSplit"], [815, 1, 1, "", "StratifiedGroupKFold"], [816, 1, 1, "", "StratifiedKFold"], [817, 1, 1, "", "StratifiedShuffleSplit"], [818, 1, 1, "", "TimeSeriesSplit"], [819, 1, 1, "", "ValidationCurveDisplay"], [820, 4, 1, "", "check_cv"], [821, 4, 1, "", "cross_val_predict"], [822, 4, 1, "", "cross_val_score"], [823, 4, 1, "", "cross_validate"], [824, 4, 1, "", "learning_curve"], [825, 4, 1, "", "permutation_test_score"], [826, 4, 1, "", "train_test_split"], [827, 4, 1, "", "validation_curve"]], "sklearn.model_selection.GridSearchCV": [[797, 3, 1, "", "classes_"], [797, 2, 1, "", "decision_function"], [797, 2, 1, "", "fit"], [797, 2, 1, "", "get_metadata_routing"], [797, 2, 1, "", "get_params"], [797, 2, 1, "", "inverse_transform"], [797, 3, 1, "", "n_features_in_"], [797, 2, 1, "", "predict"], [797, 2, 1, "", "predict_log_proba"], [797, 2, 1, "", "predict_proba"], [797, 2, 1, "", "score"], [797, 2, 1, "", "score_samples"], [797, 2, 1, "", "set_params"], [797, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[798, 2, 1, "", "get_metadata_routing"], [798, 2, 1, "", "get_n_splits"], [798, 2, 1, "", "set_split_request"], [798, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[799, 2, 1, "", "get_metadata_routing"], [799, 2, 1, "", "get_n_splits"], [799, 2, 1, "", "set_split_request"], [799, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[800, 3, 1, "", "classes_"], [800, 2, 1, "", "decision_function"], [800, 2, 1, "", "fit"], [800, 2, 1, "", "get_metadata_routing"], [800, 2, 1, "", "get_params"], [800, 2, 1, "", "inverse_transform"], [800, 3, 1, "", "n_features_in_"], [800, 2, 1, "", "predict"], [800, 2, 1, "", "predict_log_proba"], [800, 2, 1, "", "predict_proba"], [800, 2, 1, "", "score"], [800, 2, 1, "", "score_samples"], [800, 2, 1, "", "set_params"], [800, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[801, 3, 1, "", "classes_"], [801, 2, 1, "", "decision_function"], [801, 2, 1, "", "fit"], [801, 2, 1, "", "get_metadata_routing"], [801, 2, 1, "", "get_params"], [801, 2, 1, "", "inverse_transform"], [801, 3, 1, "", "n_features_in_"], [801, 2, 1, "", "predict"], [801, 2, 1, "", "predict_log_proba"], [801, 2, 1, "", "predict_proba"], [801, 2, 1, "", "score"], [801, 2, 1, "", "score_samples"], [801, 2, 1, "", "set_params"], [801, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[802, 2, 1, "", "get_metadata_routing"], [802, 2, 1, "", "get_n_splits"], [802, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[803, 2, 1, "", "from_estimator"], [803, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[804, 2, 1, "", "get_metadata_routing"], [804, 2, 1, "", "get_n_splits"], [804, 2, 1, "", "set_split_request"], [804, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[805, 2, 1, "", "get_metadata_routing"], [805, 2, 1, "", "get_n_splits"], [805, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[806, 2, 1, "", "get_metadata_routing"], [806, 2, 1, "", "get_n_splits"], [806, 2, 1, "", "set_split_request"], [806, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[807, 2, 1, "", "get_metadata_routing"], [807, 2, 1, "", "get_n_splits"], [807, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[810, 2, 1, "", "get_metadata_routing"], [810, 2, 1, "", "get_n_splits"], [810, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[811, 3, 1, "", "classes_"], [811, 2, 1, "", "decision_function"], [811, 2, 1, "", "fit"], [811, 2, 1, "", "get_metadata_routing"], [811, 2, 1, "", "get_params"], [811, 2, 1, "", "inverse_transform"], [811, 3, 1, "", "n_features_in_"], [811, 2, 1, "", "predict"], [811, 2, 1, "", "predict_log_proba"], [811, 2, 1, "", "predict_proba"], [811, 2, 1, "", "score"], [811, 2, 1, "", "score_samples"], [811, 2, 1, "", "set_params"], [811, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[812, 2, 1, "", "get_metadata_routing"], [812, 2, 1, "", "get_n_splits"], [812, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[813, 2, 1, "", "get_metadata_routing"], [813, 2, 1, "", "get_n_splits"], [813, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[814, 2, 1, "", "get_metadata_routing"], [814, 2, 1, "", "get_n_splits"], [814, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[815, 2, 1, "", "get_metadata_routing"], [815, 2, 1, "", "get_n_splits"], [815, 2, 1, "", "set_split_request"], [815, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[816, 2, 1, "", "get_metadata_routing"], [816, 2, 1, "", "get_n_splits"], [816, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[817, 2, 1, "", "get_metadata_routing"], [817, 2, 1, "", "get_n_splits"], [817, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[818, 2, 1, "", "get_metadata_routing"], [818, 2, 1, "", "get_n_splits"], [818, 2, 1, "", "split"]], "sklearn.model_selection.ValidationCurveDisplay": [[819, 2, 1, "", "from_estimator"], [819, 2, 1, "", "plot"]], "sklearn.multiclass": [[828, 1, 1, "", "OneVsOneClassifier"], [829, 1, 1, "", "OneVsRestClassifier"], [830, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[828, 2, 1, "", "decision_function"], [828, 2, 1, "", "fit"], [828, 2, 1, "", "get_metadata_routing"], [828, 2, 1, "", "get_params"], [828, 3, 1, "", "n_classes_"], [828, 2, 1, "", "partial_fit"], [828, 2, 1, "", "predict"], [828, 2, 1, "", "score"], [828, 2, 1, "", "set_params"], [828, 2, 1, "", "set_partial_fit_request"], [828, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[829, 2, 1, "", "decision_function"], [829, 2, 1, "", "fit"], [829, 2, 1, "", "get_metadata_routing"], [829, 2, 1, "", "get_params"], [829, 3, 1, "", "multilabel_"], [829, 3, 1, "", "n_classes_"], [829, 2, 1, "", "partial_fit"], [829, 2, 1, "", "predict"], [829, 2, 1, "", "predict_proba"], [829, 2, 1, "", "score"], [829, 2, 1, "", "set_params"], [829, 2, 1, "", "set_partial_fit_request"], [829, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[830, 2, 1, "", "fit"], [830, 2, 1, "", "get_metadata_routing"], [830, 2, 1, "", "get_params"], [830, 2, 1, "", "predict"], [830, 2, 1, "", "score"], [830, 2, 1, "", "set_params"], [830, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[831, 1, 1, "", "ClassifierChain"], [832, 1, 1, "", "MultiOutputClassifier"], [833, 1, 1, "", "MultiOutputRegressor"], [834, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[831, 2, 1, "", "decision_function"], [831, 2, 1, "", "fit"], [831, 2, 1, "", "get_metadata_routing"], [831, 2, 1, "", "get_params"], [831, 2, 1, "", "predict"], [831, 2, 1, "", "predict_proba"], [831, 2, 1, "", "score"], [831, 2, 1, "", "set_params"], [831, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[832, 2, 1, "", "fit"], [832, 2, 1, "", "get_metadata_routing"], [832, 2, 1, "", "get_params"], [832, 2, 1, "", "partial_fit"], [832, 2, 1, "", "predict"], [832, 2, 1, "", "predict_proba"], [832, 2, 1, "", "score"], [832, 2, 1, "", "set_fit_request"], [832, 2, 1, "", "set_params"], [832, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[833, 2, 1, "", "fit"], [833, 2, 1, "", "get_metadata_routing"], [833, 2, 1, "", "get_params"], [833, 2, 1, "", "partial_fit"], [833, 2, 1, "", "predict"], [833, 2, 1, "", "score"], [833, 2, 1, "", "set_fit_request"], [833, 2, 1, "", "set_params"], [833, 2, 1, "", "set_partial_fit_request"], [833, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[834, 2, 1, "", "fit"], [834, 2, 1, "", "get_metadata_routing"], [834, 2, 1, "", "get_params"], [834, 2, 1, "", "predict"], [834, 2, 1, "", "score"], [834, 2, 1, "", "set_params"], [834, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[835, 1, 1, "", "BernoulliNB"], [836, 1, 1, "", "CategoricalNB"], [837, 1, 1, "", "ComplementNB"], [838, 1, 1, "", "GaussianNB"], [839, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[835, 2, 1, "", "fit"], [835, 2, 1, "", "get_metadata_routing"], [835, 2, 1, "", "get_params"], [835, 2, 1, "", "partial_fit"], [835, 2, 1, "", "predict"], [835, 2, 1, "", "predict_joint_log_proba"], [835, 2, 1, "", "predict_log_proba"], [835, 2, 1, "", "predict_proba"], [835, 2, 1, "", "score"], [835, 2, 1, "", "set_fit_request"], [835, 2, 1, "", "set_params"], [835, 2, 1, "", "set_partial_fit_request"], [835, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[836, 2, 1, "", "fit"], [836, 2, 1, "", "get_metadata_routing"], [836, 2, 1, "", "get_params"], [836, 2, 1, "", "partial_fit"], [836, 2, 1, "", "predict"], [836, 2, 1, "", "predict_joint_log_proba"], [836, 2, 1, "", "predict_log_proba"], [836, 2, 1, "", "predict_proba"], [836, 2, 1, "", "score"], [836, 2, 1, "", "set_fit_request"], [836, 2, 1, "", "set_params"], [836, 2, 1, "", "set_partial_fit_request"], [836, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[837, 2, 1, "", "fit"], [837, 2, 1, "", "get_metadata_routing"], [837, 2, 1, "", "get_params"], [837, 2, 1, "", "partial_fit"], [837, 2, 1, "", "predict"], [837, 2, 1, "", "predict_joint_log_proba"], [837, 2, 1, "", "predict_log_proba"], [837, 2, 1, "", "predict_proba"], [837, 2, 1, "", "score"], [837, 2, 1, "", "set_fit_request"], [837, 2, 1, "", "set_params"], [837, 2, 1, "", "set_partial_fit_request"], [837, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[838, 2, 1, "", "fit"], [838, 2, 1, "", "get_metadata_routing"], [838, 2, 1, "", "get_params"], [838, 2, 1, "", "partial_fit"], [838, 2, 1, "", "predict"], [838, 2, 1, "", "predict_joint_log_proba"], [838, 2, 1, "", "predict_log_proba"], [838, 2, 1, "", "predict_proba"], [838, 2, 1, "", "score"], [838, 2, 1, "", "set_fit_request"], [838, 2, 1, "", "set_params"], [838, 2, 1, "", "set_partial_fit_request"], [838, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[839, 2, 1, "", "fit"], [839, 2, 1, "", "get_metadata_routing"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "partial_fit"], [839, 2, 1, "", "predict"], [839, 2, 1, "", "predict_joint_log_proba"], [839, 2, 1, "", "predict_log_proba"], [839, 2, 1, "", "predict_proba"], [839, 2, 1, "", "score"], [839, 2, 1, "", "set_fit_request"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "set_partial_fit_request"], [839, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[840, 1, 1, "", "BallTree"], [841, 1, 1, "", "KDTree"], [842, 1, 1, "", "KNeighborsClassifier"], [843, 1, 1, "", "KNeighborsRegressor"], [844, 1, 1, "", "KNeighborsTransformer"], [845, 1, 1, "", "KernelDensity"], [846, 1, 1, "", "LocalOutlierFactor"], [847, 1, 1, "", "NearestCentroid"], [848, 1, 1, "", "NearestNeighbors"], [849, 1, 1, "", "NeighborhoodComponentsAnalysis"], [850, 1, 1, "", "RadiusNeighborsClassifier"], [851, 1, 1, "", "RadiusNeighborsRegressor"], [852, 1, 1, "", "RadiusNeighborsTransformer"], [853, 4, 1, "", "kneighbors_graph"], [854, 4, 1, "", "radius_neighbors_graph"], [855, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[840, 2, 1, "", "get_arrays"], [840, 2, 1, "", "get_n_calls"], [840, 2, 1, "", "get_tree_stats"], [840, 2, 1, "", "kernel_density"], [840, 2, 1, "", "query"], [840, 2, 1, "", "query_radius"], [840, 2, 1, "", "reset_n_calls"], [840, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[841, 2, 1, "", "get_arrays"], [841, 2, 1, "", "get_n_calls"], [841, 2, 1, "", "get_tree_stats"], [841, 2, 1, "", "kernel_density"], [841, 2, 1, "", "query"], [841, 2, 1, "", "query_radius"], [841, 2, 1, "", "reset_n_calls"], [841, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "kneighbors"], [842, 2, 1, "", "kneighbors_graph"], [842, 2, 1, "", "predict"], [842, 2, 1, "", "predict_proba"], [842, 2, 1, "", "score"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "kneighbors"], [843, 2, 1, "", "kneighbors_graph"], [843, 2, 1, "", "predict"], [843, 2, 1, "", "score"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "fit_transform"], [844, 2, 1, "", "get_feature_names_out"], [844, 2, 1, "", "get_metadata_routing"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "kneighbors"], [844, 2, 1, "", "kneighbors_graph"], [844, 2, 1, "", "set_output"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "get_metadata_routing"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "sample"], [845, 2, 1, "", "score"], [845, 2, 1, "", "score_samples"], [845, 2, 1, "", "set_fit_request"], [845, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[846, 2, 1, "", "decision_function"], [846, 2, 1, "", "fit"], [846, 2, 1, "", "fit_predict"], [846, 2, 1, "", "get_metadata_routing"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "kneighbors"], [846, 2, 1, "", "kneighbors_graph"], [846, 2, 1, "", "predict"], [846, 2, 1, "", "score_samples"], [846, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "get_metadata_routing"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "predict"], [847, 2, 1, "", "score"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "get_metadata_routing"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "kneighbors"], [848, 2, 1, "", "kneighbors_graph"], [848, 2, 1, "", "radius_neighbors"], [848, 2, 1, "", "radius_neighbors_graph"], [848, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "fit_transform"], [849, 2, 1, "", "get_feature_names_out"], [849, 2, 1, "", "get_metadata_routing"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "set_output"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "get_metadata_routing"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "predict"], [850, 2, 1, "", "predict_proba"], [850, 2, 1, "", "radius_neighbors"], [850, 2, 1, "", "radius_neighbors_graph"], [850, 2, 1, "", "score"], [850, 2, 1, "", "set_params"], [850, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[851, 2, 1, "", "fit"], [851, 2, 1, "", "get_metadata_routing"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "predict"], [851, 2, 1, "", "radius_neighbors"], [851, 2, 1, "", "radius_neighbors_graph"], [851, 2, 1, "", "score"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[852, 2, 1, "", "fit"], [852, 2, 1, "", "fit_transform"], [852, 2, 1, "", "get_feature_names_out"], [852, 2, 1, "", "get_metadata_routing"], [852, 2, 1, "", "get_params"], [852, 2, 1, "", "radius_neighbors"], [852, 2, 1, "", "radius_neighbors_graph"], [852, 2, 1, "", "set_output"], [852, 2, 1, "", "set_params"], [852, 2, 1, "", "transform"]], "sklearn.neural_network": [[856, 1, 1, "", "BernoulliRBM"], [857, 1, 1, "", "MLPClassifier"], [858, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "fit_transform"], [856, 2, 1, "", "get_feature_names_out"], [856, 2, 1, "", "get_metadata_routing"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "gibbs"], [856, 2, 1, "", "partial_fit"], [856, 2, 1, "", "score_samples"], [856, 2, 1, "", "set_output"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "get_metadata_routing"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "partial_fit"], [857, 2, 1, "", "predict"], [857, 2, 1, "", "predict_log_proba"], [857, 2, 1, "", "predict_proba"], [857, 2, 1, "", "score"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "set_partial_fit_request"], [857, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[858, 2, 1, "", "fit"], [858, 2, 1, "", "get_metadata_routing"], [858, 2, 1, "", "get_params"], [858, 2, 1, "", "partial_fit"], [858, 2, 1, "", "predict"], [858, 2, 1, "", "score"], [858, 2, 1, "", "set_params"], [858, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[859, 1, 1, "", "FeatureUnion"], [860, 1, 1, "", "Pipeline"], [861, 4, 1, "", "make_pipeline"], [862, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[859, 3, 1, "", "feature_names_in_"], [859, 2, 1, "", "fit"], [859, 2, 1, "", "fit_transform"], [859, 2, 1, "", "get_feature_names_out"], [859, 2, 1, "", "get_metadata_routing"], [859, 2, 1, "", "get_params"], [859, 3, 1, "", "n_features_in_"], [859, 2, 1, "", "set_output"], [859, 2, 1, "", "set_params"], [859, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[860, 3, 1, "", "classes_"], [860, 2, 1, "", "decision_function"], [860, 3, 1, "", "feature_names_in_"], [860, 2, 1, "", "fit"], [860, 2, 1, "", "fit_predict"], [860, 2, 1, "", "fit_transform"], [860, 2, 1, "", "get_feature_names_out"], [860, 2, 1, "", "get_metadata_routing"], [860, 2, 1, "", "get_params"], [860, 2, 1, "", "inverse_transform"], [860, 3, 1, "", "n_features_in_"], [860, 3, 1, "", "named_steps"], [860, 2, 1, "", "predict"], [860, 2, 1, "", "predict_log_proba"], [860, 2, 1, "", "predict_proba"], [860, 2, 1, "", "score"], [860, 2, 1, "", "score_samples"], [860, 2, 1, "", "set_output"], [860, 2, 1, "", "set_params"], [860, 2, 1, "", "set_score_request"], [860, 2, 1, "", "transform"]], "sklearn.preprocessing": [[863, 1, 1, "", "Binarizer"], [864, 1, 1, "", "FunctionTransformer"], [865, 1, 1, "", "KBinsDiscretizer"], [866, 1, 1, "", "KernelCenterer"], [867, 1, 1, "", "LabelBinarizer"], [868, 1, 1, "", "LabelEncoder"], [869, 1, 1, "", "MaxAbsScaler"], [870, 1, 1, "", "MinMaxScaler"], [871, 1, 1, "", "MultiLabelBinarizer"], [872, 1, 1, "", "Normalizer"], [873, 1, 1, "", "OneHotEncoder"], [874, 1, 1, "", "OrdinalEncoder"], [875, 1, 1, "", "PolynomialFeatures"], [876, 1, 1, "", "PowerTransformer"], [877, 1, 1, "", "QuantileTransformer"], [878, 1, 1, "", "RobustScaler"], [879, 1, 1, "", "SplineTransformer"], [880, 1, 1, "", "StandardScaler"], [881, 1, 1, "", "TargetEncoder"], [882, 4, 1, "", "add_dummy_feature"], [883, 4, 1, "", "binarize"], [884, 4, 1, "", "label_binarize"], [885, 4, 1, "", "maxabs_scale"], [886, 4, 1, "", "minmax_scale"], [887, 4, 1, "", "normalize"], [888, 4, 1, "", "power_transform"], [889, 4, 1, "", "quantile_transform"], [890, 4, 1, "", "robust_scale"], [891, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[863, 2, 1, "", "fit"], [863, 2, 1, "", "fit_transform"], [863, 2, 1, "", "get_feature_names_out"], [863, 2, 1, "", "get_metadata_routing"], [863, 2, 1, "", "get_params"], [863, 2, 1, "", "set_output"], [863, 2, 1, "", "set_params"], [863, 2, 1, "", "set_transform_request"], [863, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[864, 2, 1, "", "fit"], [864, 2, 1, "", "fit_transform"], [864, 2, 1, "", "get_feature_names_out"], [864, 2, 1, "", "get_metadata_routing"], [864, 2, 1, "", "get_params"], [864, 2, 1, "", "inverse_transform"], [864, 2, 1, "", "set_output"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[865, 2, 1, "", "fit"], [865, 2, 1, "", "fit_transform"], [865, 2, 1, "", "get_feature_names_out"], [865, 2, 1, "", "get_metadata_routing"], [865, 2, 1, "", "get_params"], [865, 2, 1, "", "inverse_transform"], [865, 2, 1, "", "set_fit_request"], [865, 2, 1, "", "set_output"], [865, 2, 1, "", "set_params"], [865, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[866, 2, 1, "", "fit"], [866, 2, 1, "", "fit_transform"], [866, 2, 1, "", "get_feature_names_out"], [866, 2, 1, "", "get_metadata_routing"], [866, 2, 1, "", "get_params"], [866, 2, 1, "", "set_fit_request"], [866, 2, 1, "", "set_output"], [866, 2, 1, "", "set_params"], [866, 2, 1, "", "set_transform_request"], [866, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[867, 2, 1, "", "fit"], [867, 2, 1, "", "fit_transform"], [867, 2, 1, "", "get_metadata_routing"], [867, 2, 1, "", "get_params"], [867, 2, 1, "", "inverse_transform"], [867, 2, 1, "", "set_inverse_transform_request"], [867, 2, 1, "", "set_output"], [867, 2, 1, "", "set_params"], [867, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[868, 2, 1, "", "fit"], [868, 2, 1, "", "fit_transform"], [868, 2, 1, "", "get_metadata_routing"], [868, 2, 1, "", "get_params"], [868, 2, 1, "", "inverse_transform"], [868, 2, 1, "", "set_output"], [868, 2, 1, "", "set_params"], [868, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[869, 2, 1, "", "fit"], [869, 2, 1, "", "fit_transform"], [869, 2, 1, "", "get_feature_names_out"], [869, 2, 1, "", "get_metadata_routing"], [869, 2, 1, "", "get_params"], [869, 2, 1, "", "inverse_transform"], [869, 2, 1, "", "partial_fit"], [869, 2, 1, "", "set_output"], [869, 2, 1, "", "set_params"], [869, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[870, 2, 1, "", "fit"], [870, 2, 1, "", "fit_transform"], [870, 2, 1, "", "get_feature_names_out"], [870, 2, 1, "", "get_metadata_routing"], [870, 2, 1, "", "get_params"], [870, 2, 1, "", "inverse_transform"], [870, 2, 1, "", "partial_fit"], [870, 2, 1, "", "set_output"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[871, 2, 1, "", "fit"], [871, 2, 1, "", "fit_transform"], [871, 2, 1, "", "get_metadata_routing"], [871, 2, 1, "", "get_params"], [871, 2, 1, "", "inverse_transform"], [871, 2, 1, "", "set_output"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[872, 2, 1, "", "fit"], [872, 2, 1, "", "fit_transform"], [872, 2, 1, "", "get_feature_names_out"], [872, 2, 1, "", "get_metadata_routing"], [872, 2, 1, "", "get_params"], [872, 2, 1, "", "set_output"], [872, 2, 1, "", "set_params"], [872, 2, 1, "", "set_transform_request"], [872, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[873, 2, 1, "", "fit"], [873, 2, 1, "", "fit_transform"], [873, 2, 1, "", "get_feature_names_out"], [873, 2, 1, "", "get_metadata_routing"], [873, 2, 1, "", "get_params"], [873, 3, 1, "", "infrequent_categories_"], [873, 2, 1, "", "inverse_transform"], [873, 2, 1, "", "set_output"], [873, 2, 1, "", "set_params"], [873, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[874, 2, 1, "", "fit"], [874, 2, 1, "", "fit_transform"], [874, 2, 1, "", "get_feature_names_out"], [874, 2, 1, "", "get_metadata_routing"], [874, 2, 1, "", "get_params"], [874, 3, 1, "", "infrequent_categories_"], [874, 2, 1, "", "inverse_transform"], [874, 2, 1, "", "set_output"], [874, 2, 1, "", "set_params"], [874, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[875, 2, 1, "", "fit"], [875, 2, 1, "", "fit_transform"], [875, 2, 1, "", "get_feature_names_out"], [875, 2, 1, "", "get_metadata_routing"], [875, 2, 1, "", "get_params"], [875, 3, 1, "", "powers_"], [875, 2, 1, "", "set_output"], [875, 2, 1, "", "set_params"], [875, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "fit_transform"], [876, 2, 1, "", "get_feature_names_out"], [876, 2, 1, "", "get_metadata_routing"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "inverse_transform"], [876, 2, 1, "", "set_output"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[877, 2, 1, "", "fit"], [877, 2, 1, "", "fit_transform"], [877, 2, 1, "", "get_feature_names_out"], [877, 2, 1, "", "get_metadata_routing"], [877, 2, 1, "", "get_params"], [877, 2, 1, "", "inverse_transform"], [877, 2, 1, "", "set_output"], [877, 2, 1, "", "set_params"], [877, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[878, 2, 1, "", "fit"], [878, 2, 1, "", "fit_transform"], [878, 2, 1, "", "get_feature_names_out"], [878, 2, 1, "", "get_metadata_routing"], [878, 2, 1, "", "get_params"], [878, 2, 1, "", "inverse_transform"], [878, 2, 1, "", "set_output"], [878, 2, 1, "", "set_params"], [878, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[879, 2, 1, "", "fit"], [879, 2, 1, "", "fit_transform"], [879, 2, 1, "", "get_feature_names_out"], [879, 2, 1, "", "get_metadata_routing"], [879, 2, 1, "", "get_params"], [879, 2, 1, "", "set_fit_request"], [879, 2, 1, "", "set_output"], [879, 2, 1, "", "set_params"], [879, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[880, 2, 1, "", "fit"], [880, 2, 1, "", "fit_transform"], [880, 2, 1, "", "get_feature_names_out"], [880, 2, 1, "", "get_metadata_routing"], [880, 2, 1, "", "get_params"], [880, 2, 1, "", "inverse_transform"], [880, 2, 1, "", "partial_fit"], [880, 2, 1, "", "set_fit_request"], [880, 2, 1, "", "set_inverse_transform_request"], [880, 2, 1, "", "set_output"], [880, 2, 1, "", "set_params"], [880, 2, 1, "", "set_partial_fit_request"], [880, 2, 1, "", "set_transform_request"], [880, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[881, 2, 1, "", "fit"], [881, 2, 1, "", "fit_transform"], [881, 2, 1, "", "get_feature_names_out"], [881, 2, 1, "", "get_metadata_routing"], [881, 2, 1, "", "get_params"], [881, 3, 1, "", "infrequent_categories_"], [881, 2, 1, "", "set_output"], [881, 2, 1, "", "set_params"], [881, 2, 1, "", "transform"]], "sklearn.random_projection": [[892, 1, 1, "", "GaussianRandomProjection"], [893, 1, 1, "", "SparseRandomProjection"], [894, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[892, 2, 1, "", "fit"], [892, 2, 1, "", "fit_transform"], [892, 2, 1, "", "get_feature_names_out"], [892, 2, 1, "", "get_metadata_routing"], [892, 2, 1, "", "get_params"], [892, 2, 1, "", "inverse_transform"], [892, 2, 1, "", "set_output"], [892, 2, 1, "", "set_params"], [892, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[893, 2, 1, "", "fit"], [893, 2, 1, "", "fit_transform"], [893, 2, 1, "", "get_feature_names_out"], [893, 2, 1, "", "get_metadata_routing"], [893, 2, 1, "", "get_params"], [893, 2, 1, "", "inverse_transform"], [893, 2, 1, "", "set_output"], [893, 2, 1, "", "set_params"], [893, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[895, 1, 1, "", "LabelPropagation"], [896, 1, 1, "", "LabelSpreading"], [897, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[895, 2, 1, "", "fit"], [895, 2, 1, "", "get_metadata_routing"], [895, 2, 1, "", "get_params"], [895, 2, 1, "", "predict"], [895, 2, 1, "", "predict_proba"], [895, 2, 1, "", "score"], [895, 2, 1, "", "set_params"], [895, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[896, 2, 1, "", "fit"], [896, 2, 1, "", "get_metadata_routing"], [896, 2, 1, "", "get_params"], [896, 2, 1, "", "predict"], [896, 2, 1, "", "predict_proba"], [896, 2, 1, "", "score"], [896, 2, 1, "", "set_params"], [896, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[897, 2, 1, "", "decision_function"], [897, 2, 1, "", "fit"], [897, 2, 1, "", "get_metadata_routing"], [897, 2, 1, "", "get_params"], [897, 2, 1, "", "predict"], [897, 2, 1, "", "predict_log_proba"], [897, 2, 1, "", "predict_proba"], [897, 2, 1, "", "score"], [897, 2, 1, "", "set_params"]], "sklearn.svm": [[900, 1, 1, "", "LinearSVC"], [901, 1, 1, "", "LinearSVR"], [902, 1, 1, "", "NuSVC"], [903, 1, 1, "", "NuSVR"], [904, 1, 1, "", "OneClassSVM"], [905, 1, 1, "", "SVC"], [906, 1, 1, "", "SVR"], [907, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[900, 2, 1, "", "decision_function"], [900, 2, 1, "", "densify"], [900, 2, 1, "", "fit"], [900, 2, 1, "", "get_metadata_routing"], [900, 2, 1, "", "get_params"], [900, 2, 1, "", "predict"], [900, 2, 1, "", "score"], [900, 2, 1, "", "set_fit_request"], [900, 2, 1, "", "set_params"], [900, 2, 1, "", "set_score_request"], [900, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[901, 2, 1, "", "fit"], [901, 2, 1, "", "get_metadata_routing"], [901, 2, 1, "", "get_params"], [901, 2, 1, "", "predict"], [901, 2, 1, "", "score"], [901, 2, 1, "", "set_fit_request"], [901, 2, 1, "", "set_params"], [901, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[902, 3, 1, "", "coef_"], [902, 2, 1, "", "decision_function"], [902, 2, 1, "", "fit"], [902, 2, 1, "", "get_metadata_routing"], [902, 2, 1, "", "get_params"], [902, 3, 1, "", "n_support_"], [902, 2, 1, "", "predict"], [902, 2, 1, "", "predict_log_proba"], [902, 2, 1, "", "predict_proba"], [902, 3, 1, "", "probA_"], [902, 3, 1, "", "probB_"], [902, 2, 1, "", "score"], [902, 2, 1, "", "set_fit_request"], [902, 2, 1, "", "set_params"], [902, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[903, 3, 1, "", "coef_"], [903, 2, 1, "", "fit"], [903, 2, 1, "", "get_metadata_routing"], [903, 2, 1, "", "get_params"], [903, 3, 1, "", "n_support_"], [903, 2, 1, "", "predict"], [903, 2, 1, "", "score"], [903, 2, 1, "", "set_fit_request"], [903, 2, 1, "", "set_params"], [903, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[904, 3, 1, "", "coef_"], [904, 2, 1, "", "decision_function"], [904, 2, 1, "", "fit"], [904, 2, 1, "", "fit_predict"], [904, 2, 1, "", "get_metadata_routing"], [904, 2, 1, "", "get_params"], [904, 3, 1, "", "n_support_"], [904, 2, 1, "", "predict"], [904, 2, 1, "", "score_samples"], [904, 2, 1, "", "set_fit_request"], [904, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[905, 3, 1, "", "coef_"], [905, 2, 1, "", "decision_function"], [905, 2, 1, "", "fit"], [905, 2, 1, "", "get_metadata_routing"], [905, 2, 1, "", "get_params"], [905, 3, 1, "", "n_support_"], [905, 2, 1, "", "predict"], [905, 2, 1, "", "predict_log_proba"], [905, 2, 1, "", "predict_proba"], [905, 3, 1, "", "probA_"], [905, 3, 1, "", "probB_"], [905, 2, 1, "", "score"], [905, 2, 1, "", "set_fit_request"], [905, 2, 1, "", "set_params"], [905, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[906, 3, 1, "", "coef_"], [906, 2, 1, "", "fit"], [906, 2, 1, "", "get_metadata_routing"], [906, 2, 1, "", "get_params"], [906, 3, 1, "", "n_support_"], [906, 2, 1, "", "predict"], [906, 2, 1, "", "score"], [906, 2, 1, "", "set_fit_request"], [906, 2, 1, "", "set_params"], [906, 2, 1, "", "set_score_request"]], "sklearn.tree": [[908, 1, 1, "", "DecisionTreeClassifier"], [909, 1, 1, "", "DecisionTreeRegressor"], [910, 1, 1, "", "ExtraTreeClassifier"], [911, 1, 1, "", "ExtraTreeRegressor"], [912, 4, 1, "", "export_graphviz"], [913, 4, 1, "", "export_text"], [914, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[908, 2, 1, "", "apply"], [908, 2, 1, "", "cost_complexity_pruning_path"], [908, 2, 1, "", "decision_path"], [908, 3, 1, "", "feature_importances_"], [908, 2, 1, "", "fit"], [908, 2, 1, "", "get_depth"], [908, 2, 1, "", "get_metadata_routing"], [908, 2, 1, "", "get_n_leaves"], [908, 2, 1, "", "get_params"], [908, 2, 1, "", "predict"], [908, 2, 1, "", "predict_log_proba"], [908, 2, 1, "", "predict_proba"], [908, 2, 1, "", "score"], [908, 2, 1, "", "set_fit_request"], [908, 2, 1, "", "set_params"], [908, 2, 1, "", "set_predict_proba_request"], [908, 2, 1, "", "set_predict_request"], [908, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[909, 2, 1, "", "apply"], [909, 2, 1, "", "cost_complexity_pruning_path"], [909, 2, 1, "", "decision_path"], [909, 3, 1, "", "feature_importances_"], [909, 2, 1, "", "fit"], [909, 2, 1, "", "get_depth"], [909, 2, 1, "", "get_metadata_routing"], [909, 2, 1, "", "get_n_leaves"], [909, 2, 1, "", "get_params"], [909, 2, 1, "", "predict"], [909, 2, 1, "", "score"], [909, 2, 1, "", "set_fit_request"], [909, 2, 1, "", "set_params"], [909, 2, 1, "", "set_predict_request"], [909, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[910, 2, 1, "", "apply"], [910, 2, 1, "", "cost_complexity_pruning_path"], [910, 2, 1, "", "decision_path"], [910, 3, 1, "", "feature_importances_"], [910, 2, 1, "", "fit"], [910, 2, 1, "", "get_depth"], [910, 2, 1, "", "get_metadata_routing"], [910, 2, 1, "", "get_n_leaves"], [910, 2, 1, "", "get_params"], [910, 2, 1, "", "predict"], [910, 2, 1, "", "predict_log_proba"], [910, 2, 1, "", "predict_proba"], [910, 2, 1, "", "score"], [910, 2, 1, "", "set_fit_request"], [910, 2, 1, "", "set_params"], [910, 2, 1, "", "set_predict_proba_request"], [910, 2, 1, "", "set_predict_request"], [910, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[911, 2, 1, "", "apply"], [911, 2, 1, "", "cost_complexity_pruning_path"], [911, 2, 1, "", "decision_path"], [911, 3, 1, "", "feature_importances_"], [911, 2, 1, "", "fit"], [911, 2, 1, "", "get_depth"], [911, 2, 1, "", "get_metadata_routing"], [911, 2, 1, "", "get_n_leaves"], [911, 2, 1, "", "get_params"], [911, 2, 1, "", "predict"], [911, 2, 1, "", "score"], [911, 2, 1, "", "set_fit_request"], [911, 2, 1, "", "set_params"], [911, 2, 1, "", "set_predict_request"], [911, 2, 1, "", "set_score_request"]], "sklearn.utils": [[915, 1, 1, "", "Bunch"], [916, 4, 1, "", "_safe_indexing"], [407, 0, 0, "-", "arrayfuncs"], [918, 4, 1, "", "as_float_array"], [919, 4, 1, "", "assert_all_finite"], [920, 4, 1, "", "check_X_y"], [921, 4, 1, "", "check_array"], [922, 4, 1, "", "check_consistent_length"], [923, 4, 1, "", "check_random_state"], [924, 4, 1, "", "check_scalar"], [407, 0, 0, "-", "class_weight"], [927, 4, 1, "", "deprecated"], [407, 0, 0, "-", "discovery"], [407, 0, 0, "-", "estimator_checks"], [933, 4, 1, "", "estimator_html_repr"], [407, 0, 0, "-", "extmath"], [940, 4, 1, "", "gen_batches"], [941, 4, 1, "", "gen_even_slices"], [407, 0, 0, "-", "graph"], [943, 4, 1, "", "indexable"], [407, 0, 0, "-", "metadata_routing"], [407, 0, 0, "-", "metaestimators"], [407, 0, 0, "-", "multiclass"], [953, 4, 1, "", "murmurhash3_32"], [407, 0, 0, "-", "parallel"], [956, 4, 1, "", "parallel_backend"], [407, 0, 0, "-", "random"], [958, 4, 1, "", "register_parallel_backend"], [959, 4, 1, "", "resample"], [960, 4, 1, "", "safe_mask"], [961, 4, 1, "", "safe_sqr"], [962, 4, 1, "", "shuffle"], [407, 0, 0, "-", "sparsefuncs"], [407, 0, 0, "-", "sparsefuncs_fast"], [407, 0, 0, "-", "validation"]], "sklearn.utils.Bunch": [[915, 2, 1, "", "clear"], [915, 2, 1, "", "copy"], [915, 2, 1, "", "fromkeys"], [915, 2, 1, "", "get"], [915, 2, 1, "", "items"], [915, 2, 1, "", "keys"], [915, 2, 1, "", "pop"], [915, 2, 1, "", "popitem"], [915, 2, 1, "", "setdefault"], [915, 2, 1, "", "update"], [915, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[917, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[925, 4, 1, "", "compute_class_weight"], [926, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.discovery": [[928, 4, 1, "", "all_displays"], [929, 4, 1, "", "all_estimators"], [930, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[931, 4, 1, "", "check_estimator"], [932, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[934, 4, 1, "", "density"], [935, 4, 1, "", "fast_logdet"], [936, 4, 1, "", "randomized_range_finder"], [937, 4, 1, "", "randomized_svd"], [938, 4, 1, "", "safe_sparse_dot"], [939, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[942, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[944, 1, 1, "", "MetadataRequest"], [945, 1, 1, "", "MetadataRouter"], [946, 1, 1, "", "MethodMapping"], [947, 4, 1, "", "get_routing_for_object"], [948, 4, 1, "", "process_routing"]], "sklearn.utils.metadata_routing.MetadataRequest": [[944, 2, 1, "", "consumes"]], "sklearn.utils.metadata_routing.MetadataRouter": [[945, 2, 1, "", "add"], [945, 2, 1, "", "add_self_request"], [945, 2, 1, "", "consumes"], [945, 2, 1, "", "route_params"], [945, 2, 1, "", "validate_metadata"]], "sklearn.utils.metadata_routing.MethodMapping": [[946, 2, 1, "", "add"], [946, 2, 1, "", "from_str"]], "sklearn.utils.metaestimators": [[949, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[950, 4, 1, "", "is_multilabel"], [951, 4, 1, "", "type_of_target"], [952, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[954, 1, 1, "", "Parallel"], [955, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[954, 2, 1, "", "dispatch_next"], [954, 2, 1, "", "dispatch_one_batch"], [954, 2, 1, "", "format"], [954, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[957, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[963, 4, 1, "", "incr_mean_variance_axis"], [964, 4, 1, "", "inplace_column_scale"], [965, 4, 1, "", "inplace_csr_column_scale"], [966, 4, 1, "", "inplace_row_scale"], [967, 4, 1, "", "inplace_swap_column"], [968, 4, 1, "", "inplace_swap_row"], [969, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[970, 4, 1, "", "inplace_csr_row_normalize_l1"], [971, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[972, 4, 1, "", "check_is_fitted"], [973, 4, 1, "", "check_memory"], [974, 4, 1, "", "check_symmetric"], [975, 4, 1, "", "column_or_1d"], [976, 4, 1, "", "has_fit_parameter"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"about": [0, 393], "u": 0, "histori": [0, 1029], "govern": [0, 396], "author": [0, 1031], "document": [0, 8, 20, 168, 319, 320, 351, 352, 353, 381, 396, 1008, 1009, 1012, 1027, 1031, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "team": [0, 380, 396], "contributor": [0, 380, 381, 396, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "experi": [0, 38, 380, 396], "commun": [0, 381, 396], "emeritu": 0, "core": [0, 8, 369, 380, 385, 387, 393, 396, 990], "develop": [0, 109, 111, 168, 237, 379, 382, 383, 384, 385, 388, 389, 390, 977, 1026, 1047], "cite": 0, "scikit": [0, 237, 257, 317, 318, 319, 320, 321, 322, 323, 366, 367, 379, 382, 383, 385, 386, 393, 396, 398, 407, 1006, 1008, 1009, 1013, 1015, 1016, 1021, 1024, 1027], "learn": [0, 5, 12, 51, 96, 99, 152, 168, 170, 171, 172, 177, 221, 222, 223, 224, 236, 237, 257, 264, 295, 302, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 366, 367, 369, 377, 379, 381, 382, 383, 385, 386, 393, 396, 398, 407, 413, 415, 983, 985, 993, 1001, 1006, 1008, 1009, 1011, 1013, 1015, 1016, 1018, 1021, 1022, 1023, 1024, 1025, 1027], "artwork": 0, "fund": 0, "past": 0, "sponsor": 0, "sprint": 0, "donat": 0, "project": [0, 87, 101, 105, 234, 381, 383, 393, 407, 1000, 1005, 1008], "infrastructur": 0, "support": [0, 26, 123, 168, 195, 313, 317, 318, 319, 320, 322, 323, 334, 337, 346, 393, 398, 399, 404, 406, 407, 415, 1003, 1004, 1012, 1022, 1037, 1048], "exampl": [3, 6, 9, 54, 60, 76, 89, 103, 111, 129, 160, 168, 197, 198, 205, 344, 348, 369, 375, 376, 386, 393, 397, 399, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 425, 428, 431, 432, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 461, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 478, 481, 482, 483, 486, 487, 488, 489, 490, 491, 493, 494, 495, 497, 498, 499, 500, 501, 503, 505, 509, 510, 511, 512, 513, 514, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 580, 581, 583, 586, 587, 588, 589, 590, 592, 593, 596, 598, 599, 601, 603, 604, 605, 606, 607, 609, 610, 612, 613, 614, 616, 617, 618, 621, 622, 624, 626, 627, 629, 630, 631, 632, 633, 634, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 651, 652, 654, 655, 656, 657, 658, 661, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 683, 687, 688, 689, 690, 691, 692, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 708, 711, 712, 716, 717, 718, 725, 727, 732, 733, 735, 736, 739, 740, 743, 744, 746, 747, 748, 750, 751, 753, 755, 759, 776, 777, 780, 782, 783, 784, 785, 786, 787, 788, 790, 791, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 835, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 857, 858, 859, 860, 861, 864, 865, 867, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 886, 889, 893, 894, 896, 897, 898, 900, 902, 903, 904, 905, 906, 907, 908, 909, 914, 915, 923, 932, 934, 941, 945, 946, 947, 948, 949, 962, 972, 977, 980, 982, 983, 984, 985, 987, 988, 989, 991, 992, 993, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1015, 1021, 1022, 1023, 1028, 1031], "base": [3, 4, 86, 120, 121, 150, 168, 185, 236, 317, 318, 320, 322, 323, 381, 407, 408, 412, 415, 417, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 984, 996, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "real": [3, 9, 76, 168, 376], "world": [3, 76, 168, 376], "dataset": [3, 4, 5, 8, 13, 25, 26, 28, 33, 45, 59, 63, 71, 86, 89, 90, 91, 92, 93, 96, 105, 113, 119, 122, 123, 133, 139, 140, 153, 155, 157, 158, 160, 162, 168, 170, 171, 172, 180, 183, 185, 190, 201, 203, 210, 219, 222, 223, 230, 235, 240, 241, 260, 268, 269, 280, 283, 314, 330, 331, 336, 343, 352, 358, 373, 374, 375, 376, 377, 378, 386, 393, 407, 418, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 1015, 1021, 1022, 1024, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "time": [4, 13, 16, 23, 29, 36, 69, 77, 84, 88, 94, 108, 110, 119, 124, 137, 143, 151, 163, 167, 175, 178, 195, 220, 228, 235, 236, 245, 254, 278, 281, 284, 299, 305, 315, 324, 332, 333, 350, 352, 355, 362, 412, 1010], "relat": [4, 8, 375, 381, 996, 1008, 1038], "featur": [4, 13, 52, 55, 75, 101, 118, 120, 121, 123, 127, 130, 131, 144, 146, 148, 149, 150, 168, 173, 174, 177, 180, 195, 198, 219, 235, 241, 263, 304, 308, 309, 312, 313, 317, 319, 320, 342, 352, 353, 367, 369, 381, 385, 399, 407, 409, 415, 416, 417, 978, 996, 998, 1005, 1023, 1024, 1034, 1035, 1036, 1037, 1038], "engin": [4, 13, 173, 1008, 1013], "data": [4, 7, 9, 12, 18, 21, 25, 27, 35, 39, 48, 50, 51, 56, 58, 59, 64, 65, 67, 68, 71, 76, 79, 81, 83, 86, 87, 97, 98, 101, 102, 103, 104, 114, 120, 121, 127, 129, 133, 146, 149, 150, 159, 161, 166, 170, 173, 174, 177, 181, 187, 194, 195, 205, 231, 236, 243, 252, 257, 259, 263, 268, 269, 271, 272, 275, 288, 292, 297, 304, 307, 311, 312, 313, 326, 339, 342, 346, 347, 353, 354, 363, 367, 369, 376, 386, 393, 395, 408, 409, 411, 412, 417, 998, 1002, 1013, 1015, 1018, 1021, 1023, 1024], "explor": 4, "bike": [4, 13, 172], "share": [4, 13, 172], "demand": [4, 13], "cross": [4, 85, 86, 139, 140, 149, 168, 190, 257, 258, 260, 261, 265, 267, 272, 314, 342, 363, 407, 411, 412, 977, 984, 1019], "valid": [4, 139, 140, 149, 190, 234, 257, 258, 260, 261, 265, 267, 272, 277, 342, 363, 367, 383, 390, 407, 412, 972, 973, 974, 975, 976, 977, 983, 984, 991, 1019], "gradient": [4, 119, 123, 124, 125, 126, 127, 128, 172, 201, 209, 215, 317, 318, 320, 322, 323, 415, 984, 1002], "boost": [4, 119, 123, 124, 125, 126, 127, 128, 172, 201, 317, 318, 320, 322, 323, 415], "naiv": [4, 13, 25, 26, 407, 990], "linear": [4, 26, 34, 35, 126, 153, 168, 171, 179, 180, 197, 201, 204, 207, 222, 223, 235, 318, 338, 343, 345, 346, 367, 390, 393, 407, 982, 984, 985, 986, 998, 1022], "regress": [4, 13, 74, 76, 86, 87, 114, 126, 127, 136, 153, 158, 159, 160, 161, 180, 181, 184, 190, 192, 193, 194, 197, 199, 201, 203, 216, 218, 219, 233, 236, 297, 346, 359, 360, 377, 407, 409, 415, 418, 979, 981, 984, 988, 989, 991, 992, 1002, 1003, 1004, 1022], "step": [4, 242, 394, 409], "categori": [4, 321, 323, 998], "trigonometr": 4, "period": [4, 202], "spline": [4, 202, 320, 998], "qualit": [4, 13], "analysi": [4, 34, 35, 61, 96, 102, 104, 107, 113, 126, 172, 185, 247, 264, 265, 272, 293, 294, 295, 352, 407, 411, 413, 982, 991, 1005, 1023, 1024], "impact": [4, 62, 1046, 1047, 1048], "model": [4, 7, 11, 13, 58, 76, 86, 97, 104, 119, 120, 121, 123, 127, 129, 149, 150, 153, 158, 168, 171, 172, 173, 177, 179, 180, 185, 189, 190, 195, 201, 204, 219, 231, 236, 240, 241, 246, 248, 252, 253, 255, 261, 262, 264, 269, 283, 292, 297, 304, 312, 318, 320, 343, 346, 352, 367, 383, 393, 394, 396, 402, 403, 407, 412, 977, 983, 984, 987, 988, 990, 992, 993, 1015, 1019, 1022, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "predict": [4, 10, 13, 25, 87, 114, 126, 136, 154, 170, 181, 201, 236, 258, 269, 326, 367, 393, 394, 411, 412, 418, 988, 999, 1015, 1022], "pairwis": [4, 262, 407, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 986], "interact": [4, 172, 322, 415, 1022], "polynomi": [4, 177, 180, 181, 202, 343, 980, 984, 986, 998, 1022], "non": [4, 15, 96, 126, 196, 201, 205, 222, 267, 338, 345, 346, 413, 984, 998], "kernel": [4, 5, 101, 153, 158, 159, 161, 162, 168, 176, 177, 235, 236, 289, 290, 298, 319, 335, 338, 343, 346, 407, 413, 414, 418, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 980, 981, 986, 998, 1003, 1022], "conclud": [4, 226], "remark": [4, 58, 226, 234], "imag": [5, 48, 51, 54, 67, 99, 375, 407, 416, 582, 583, 584, 585, 586], "denois": [5, 99], "us": [5, 6, 12, 18, 49, 96, 97, 99, 130, 131, 133, 150, 158, 188, 204, 215, 217, 262, 266, 271, 283, 308, 346, 352, 353, 361, 363, 369, 382, 386, 387, 389, 393, 407, 412, 413, 415, 416, 417, 422, 425, 428, 431, 432, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 461, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 478, 481, 482, 483, 486, 487, 488, 489, 490, 491, 493, 494, 495, 497, 498, 499, 500, 501, 503, 505, 509, 510, 511, 512, 513, 514, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 580, 581, 583, 586, 587, 588, 589, 590, 592, 593, 596, 598, 599, 601, 603, 604, 605, 606, 607, 609, 610, 612, 613, 614, 616, 617, 618, 621, 622, 624, 626, 627, 629, 630, 631, 632, 633, 634, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 651, 652, 654, 655, 656, 657, 658, 661, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 683, 687, 688, 689, 690, 691, 692, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 708, 711, 712, 716, 717, 718, 725, 727, 732, 733, 735, 736, 739, 740, 743, 744, 746, 747, 748, 750, 751, 753, 755, 759, 776, 777, 780, 782, 783, 784, 785, 786, 787, 788, 790, 791, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 835, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 857, 858, 859, 860, 861, 864, 865, 867, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 886, 889, 893, 894, 896, 897, 898, 900, 902, 903, 904, 905, 906, 907, 908, 909, 914, 915, 923, 932, 934, 941, 945, 946, 947, 948, 949, 962, 972, 982, 984, 985, 988, 992, 1002, 1003, 1004, 1013, 1022, 1024, 1041], "pca": [5, 59, 74, 91, 96, 97, 100, 101, 102, 103, 104, 105, 312, 413, 540, 1005, 1023], "refer": [5, 11, 26, 28, 81, 82, 99, 113, 116, 173, 177, 185, 189, 262, 267, 268, 280, 298, 375, 376, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 418, 977, 978, 980, 981, 982, 984, 985, 986, 988, 989, 991, 992, 993, 994, 995, 996, 998, 1000, 1001, 1002, 1003], "load": [5, 7, 18, 51, 59, 91, 119, 121, 123, 127, 139, 150, 173, 194, 219, 223, 231, 235, 243, 263, 271, 272, 283, 288, 312, 313, 339, 342, 352, 353, 354, 374, 375, 386, 393, 416, 1015, 1023, 1024], "via": [5, 13, 54, 189, 190, 219, 415, 980], "openml": [5, 313, 317, 375], "basi": [5, 162, 418, 980, 984, 1022], "reconstruct": [5, 14, 99], "test": [5, 79, 145, 265, 268, 275, 352, 357, 379, 381, 383, 389, 390, 412, 1015, 1022, 1024], "face": [6, 51, 96, 239, 376, 1013, 1020], "recognit": [6, 376, 378, 1020], "eigenfac": [6, 96, 1020], "svm": [6, 142, 146, 147, 177, 215, 235, 320, 331, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 407, 900, 901, 902, 903, 904, 905, 906, 907, 984, 994, 1002, 1022, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "complex": [7, 232, 242, 261, 264, 328, 357, 367, 408, 984, 991, 992, 1002, 1003, 1004], "influenc": [7, 10, 367], "benchmark": [7, 10, 59, 352], "choos": [7, 977, 1015, 1017, 1019], "paramet": [7, 79, 126, 260, 319, 339, 347, 381, 383, 394, 395, 407, 409, 415, 977, 984, 988, 1003, 1015, 1019, 1024], "run": [7, 59, 266], "code": [7, 96, 106, 381, 383, 386, 387, 389, 413, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "plot": [7, 8, 10, 21, 25, 31, 35, 39, 42, 48, 50, 51, 58, 64, 65, 67, 68, 79, 83, 86, 91, 92, 93, 97, 98, 102, 114, 119, 122, 127, 129, 133, 134, 135, 136, 139, 149, 166, 172, 180, 181, 185, 193, 194, 195, 205, 206, 210, 223, 231, 235, 240, 241, 243, 252, 258, 259, 264, 266, 269, 271, 275, 277, 283, 292, 304, 313, 317, 319, 320, 326, 336, 337, 342, 343, 352, 358, 388, 407, 983, 995, 1028], "result": [7, 8, 21, 39, 48, 50, 51, 58, 59, 64, 65, 68, 79, 81, 83, 97, 98, 114, 119, 133, 136, 166, 177, 185, 206, 236, 240, 266, 275, 283, 292, 313, 346, 353, 363, 977], "conclus": [7, 13, 153, 185, 190, 280, 288, 314, 343], "out": [8, 125, 369, 389, 412, 977, 984, 990], "classif": [8, 27, 30, 31, 33, 34, 71, 92, 141, 154, 155, 156, 157, 161, 168, 217, 238, 265, 268, 269, 272, 283, 288, 296, 304, 317, 325, 330, 343, 352, 377, 407, 415, 418, 984, 988, 989, 991, 992, 1002, 1003, 1004, 1022, 1024], "text": [8, 168, 232, 263, 330, 351, 352, 353, 354, 376, 407, 416, 587, 588, 589, 590, 1024], "reuter": 8, "routin": [8, 368, 390], "main": [8, 201], "outlier": [9, 183, 218, 230, 240, 291, 292, 307, 407, 984, 994, 998], "detect": [9, 230, 240, 259, 291, 292, 988, 994, 1003], "set": [9, 76, 79, 103, 133, 166, 205, 269, 339, 357, 393, 407, 412, 984, 1015, 1021, 1022, 1024], "first": [9, 38, 381], "second": [9, 38], "latenc": [10, 367], "helper": [10, 162, 223, 390], "function": [10, 35, 162, 191, 205, 206, 211, 223, 257, 275, 319, 342, 354, 390, 407, 412, 415, 418, 980, 984, 988, 1003, 1022], "bulk": [10, 367], "atom": [10, 367], "speed": [10, 387], "variou": [10, 53, 208, 227], "regressor": [10, 114, 126, 180, 205, 314, 317, 320, 407, 415], "n_featur": 10, "throughput": [10, 367], "speci": [11, 298], "distribut": [11, 219, 222, 298, 311, 398, 985, 998], "visual": [12, 59, 107, 231, 236, 243, 257, 303, 318, 339, 407, 408, 409, 988, 1028], "stock": [12, 1020], "market": [12, 1020], "structur": [12, 40, 48, 68, 161, 328, 361, 1020], "retriev": [12, 317], "from": [12, 99, 150, 173, 313, 317, 368, 375, 379, 393, 407, 416, 988, 1015, 1022, 1023, 1024, 1041], "internet": 12, "graph": [12, 317, 390, 393, 407, 408, 416, 942], "cluster": [12, 20, 22, 37, 38, 39, 40, 41, 42, 45, 46, 48, 50, 53, 56, 57, 59, 61, 64, 65, 66, 67, 68, 96, 168, 321, 323, 353, 377, 405, 407, 408, 413, 419, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 713, 714, 988, 1023, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "affin": [12, 39, 408, 986], "propag": [12, 39, 326, 327, 328, 408, 1001], "embed": [12, 53, 222, 223, 234, 295, 415, 985], "2d": [12, 53, 98, 105, 172], "space": [12, 101, 409, 977, 985], "lag": 13, "seri": [13, 195, 412], "forecast": [13, 158], "analyz": [13, 977], "gener": [13, 21, 25, 35, 39, 48, 50, 56, 58, 64, 65, 67, 68, 79, 81, 83, 92, 93, 97, 98, 99, 120, 129, 146, 149, 153, 159, 160, 162, 168, 179, 180, 181, 185, 195, 201, 203, 236, 252, 259, 275, 292, 297, 304, 318, 326, 346, 347, 363, 377, 381, 395, 407, 413, 415, 984, 998, 1009, 1019], "panda": [13, 322, 386, 393], "evalu": [13, 38, 59, 62, 82, 201, 240, 263, 266, 304, 313, 353, 394, 403, 405, 408, 412, 415, 977, 983, 988, 1024], "next": [13, 394], "hour": 13, "proper": [13, 158], "uncertainti": 13, "quantil": [13, 126, 203, 320, 321, 984], "A": [13, 21, 22, 48, 59, 64, 201, 320, 380, 387, 402, 412, 1018, 1021], "look": [13, 236, 346], "compress": [14, 54, 367], "sens": 14, "tomographi": 14, "l1": [14, 185, 192, 194, 217, 347, 417], "prior": [14, 162, 247], "lasso": [14, 185, 186, 187, 188, 189, 190, 195, 318, 651, 984], "topic": 15, "extract": [15, 75, 99, 219, 263, 353, 367, 369, 407, 416, 1024], "neg": [15, 96, 150, 196, 413, 984], "matrix": [15, 18, 161, 182, 256, 407, 408, 413, 988], "factor": [15, 96, 104, 107, 291, 292, 413, 994], "latent": [15, 86, 413], "dirichlet": [15, 413, 987], "alloc": [15, 413], "comput": [16, 18, 23, 29, 36, 39, 48, 50, 64, 65, 68, 69, 77, 79, 84, 88, 94, 108, 110, 119, 137, 143, 151, 163, 167, 175, 178, 194, 206, 220, 228, 245, 254, 275, 278, 281, 284, 299, 305, 315, 324, 332, 333, 350, 355, 362, 366, 367, 407, 408, 409, 412, 995, 1010], "libsvm": [17, 375], "gui": 17, "wikipedia": 18, "princip": [18, 87, 102, 413, 1005, 1023], "eigenvector": 18, "download": [18, 133, 166, 375], "alreadi": 18, "disk": 18, "redirect": 18, "file": [18, 398, 416, 1024], "adjac": 18, "singular": [18, 413], "vector": [18, 26, 54, 168, 334, 337, 346, 352, 354, 407, 416, 1003, 1022, 1023], "random": [18, 96, 117, 119, 131, 132, 173, 174, 234, 243, 268, 270, 363, 383, 390, 407, 412, 413, 415, 957, 977, 984, 1000, 1005], "svd": [18, 96, 413], "central": 18, "score": [18, 86, 119, 124, 139, 149, 166, 180, 252, 261, 268, 269, 342, 399, 408, 412, 983, 988, 1003, 1019], "biclust": [19, 20, 21, 168, 377, 405, 407], "spectral": [20, 21, 22, 67, 222, 405, 408, 985], "co": [20, 22, 405], "algorithm": [20, 21, 22, 39, 45, 50, 56, 64, 65, 66, 222, 230, 387, 393, 982, 984, 989, 991, 992, 996, 1004, 1022], "demo": [21, 22, 39, 48, 50, 56, 59, 64, 66], "sampl": [21, 39, 56, 64, 79, 97, 98, 146, 182, 214, 236, 263, 275, 297, 318, 346, 349, 375, 390, 395, 407, 408, 415, 984], "fit": [21, 27, 58, 97, 104, 120, 121, 124, 126, 127, 158, 180, 181, 182, 195, 198, 203, 207, 269, 283, 292, 297, 314, 346, 363, 383, 394, 399, 415, 990, 994, 1015], "spectralbiclust": [21, 450], "calibr": [24, 25, 26, 27, 28, 126, 168, 201, 406, 407, 436, 437, 438, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "probabl": [25, 26, 27, 31, 135, 156, 406, 407, 415, 1003], "classifi": [25, 26, 28, 32, 111, 136, 184, 242, 259, 283, 288, 317, 331, 336, 339, 352, 361, 406, 407, 415, 982, 991, 1022, 1024], "synthet": [25, 76, 180, 185, 259, 314, 386], "gaussian": [25, 26, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 168, 246, 247, 248, 251, 252, 253, 307, 407, 418, 987, 990, 998, 1000], "bay": [25, 26, 407, 990], "curv": [26, 28, 181, 236, 243, 253, 259, 264, 269, 271, 277, 406, 983], "summari": [26, 190, 353, 354, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "3": [27, 184, 323, 1024, 1039, 1040, 1045, 1047], "class": [27, 38, 113, 115, 135, 184, 210, 215, 265, 269, 271, 320, 338, 341, 395, 407, 412, 415, 416, 988, 991, 994, 1002, 1003, 1031, 1032], "compar": [27, 43, 45, 63, 79, 86, 119, 124, 132, 146, 177, 180, 187, 203, 208, 230, 236, 262, 270, 293, 302, 307, 313, 393], "comparison": [28, 32, 35, 44, 65, 81, 105, 123, 145, 153, 222, 223, 236, 262, 273, 280, 354, 408, 984], "recogn": 33, "hand": 33, "written": 33, "digit": [33, 53, 59, 90, 140, 141, 223, 304, 326, 327, 378, 1021], "normal": [34, 177, 201, 307, 311, 407, 872, 887, 988, 998], "ledoit": [34, 80, 410], "wolf": [34, 80, 410], "oa": [34, 79, 80, 421, 474], "discrimin": [34, 35, 407, 982], "quadrat": [35, 418, 982], "covari": [35, 78, 79, 81, 82, 83, 168, 249, 407, 410, 421, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 982, 1039, 1043, 1044, 1045, 1047], "ellipsoid": [35, 248], "lda": [35, 105, 413, 982], "qda": [35, 982], "adjust": 38, "chanc": 38, "perform": [38, 44, 265, 312, 319, 321, 326, 353, 367, 381, 382, 408, 412, 1024], "defin": [38, 48, 59, 68, 222, 257, 259, 260, 354, 988], "list": [38, 1012], "metric": [38, 41, 126, 266, 404, 407, 408, 412, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 977, 986, 988, 991, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "fix": [38, 385, 1031, 1034, 1035, 1036, 1037, 1038, 1044], "ground": [38, 180], "truth": [38, 180], "label": [38, 269, 326, 327, 328, 376, 377, 407, 408, 412, 415, 988, 999, 1001], "grow": 38, "number": [38, 61, 123, 149, 274, 367, 383, 977, 978], "vari": [38, 301, 329, 408], "agglom": [40, 41, 53, 1023], "without": [40, 124, 293, 352], "differ": [41, 45, 63, 79, 162, 172, 307, 310, 313, 336, 343, 383, 393, 399, 408, 984, 1022], "hierarch": [42, 48, 63, 68, 323, 408, 1023], "dendrogram": 42, "birch": [43, 408, 441], "minibatchkmean": [43, 65, 96, 448], "bisect": [44, 408], "k": [44, 46, 49, 58, 59, 60, 62, 65, 68, 86, 288, 312, 353, 408, 412, 988, 991, 998, 1022, 1023], "mean": [44, 46, 49, 58, 59, 60, 62, 64, 65, 120, 121, 166, 173, 205, 353, 408, 988, 998, 1023], "regular": [44, 79, 128, 171, 194, 205, 206, 301, 347, 984, 992], "toi": [45, 63, 230, 378], "segment": [47, 67], "pictur": 47, "greek": 47, "coin": [47, 48], "region": [47, 262], "ward": [48, 68, 408, 1023], "an": [48, 60, 111, 166, 182, 190, 295, 317, 321, 393, 416, 977, 994, 1015, 1021, 1022], "color": 49, "quantiz": [49, 54, 1023], "dbscan": [50, 408, 419, 443], "onlin": [51, 208, 320, 321, 1002], "dictionari": [51, 96, 99, 106, 413], "part": [51, 417], "agglomer": [52, 55, 1005, 1023], "origin": [54, 101, 268, 295, 307], "encod": [54, 123, 313, 314, 323, 998, 999], "strategi": [54, 260, 280, 302, 310, 323, 369, 407, 408, 988], "memori": [54, 367, 387, 389, 408], "footprint": 54, "v": [55, 68, 79, 80, 82, 87, 101, 149, 172, 173, 183, 193, 219, 265, 271, 275, 276, 357, 408, 415, 978, 998, 1015], "univari": [55, 86, 146, 342, 417, 978], "select": [55, 61, 73, 104, 139, 144, 146, 149, 150, 168, 189, 190, 195, 252, 255, 342, 393, 399, 403, 407, 412, 417, 977, 984, 1019, 1037], "hdbscan": [56, 323, 408, 445], "scale": [56, 171, 222, 225, 312, 347, 369, 891, 985, 994, 998, 1005], "invari": [56, 265], "multi": [56, 113, 132, 172, 195, 210, 225, 239, 266, 269, 301, 360, 387, 407, 984, 985, 988, 992, 1003, 1004], "hyperparamet": [56, 158, 159, 263, 270, 280, 616], "robust": [56, 81, 82, 180, 204, 207, 363, 407, 410, 977, 984], "min_cluster_s": 56, "min_sampl": 56, "dbscan_clust": 56, "induct": 57, "demonstr": [58, 266, 310, 326], "assumpt": 58, "possibl": [58, 386], "solut": 58, "final": [58, 153], "handwritten": [59, 223, 378], "our": [59, 257, 260, 381], "reduc": [59, 367], "initi": [60, 62, 250], "silhouett": [61, 408], "kmean": [61, 65, 318, 446], "empir": [62, 82, 234, 410], "linkag": [63, 408], "method": [63, 75, 86, 112, 153, 168, 222, 224, 250, 279, 282, 395, 407, 408, 980, 994, 995, 1023], "shift": [64, 408], "meanshift": [64, 447], "establish": [65, 177], "pariti": 65, "between": [65, 273, 984], "optic": [66, 378, 408, 449], "four": 67, "circl": 67, "two": [67, 115, 187, 241, 262], "unstructur": 68, "we": 68, "ar": [68, 320, 393], "nearest": [68, 168, 285, 286, 287, 288, 293, 296, 297, 317, 407, 978, 991, 1022], "neighbor": [68, 168, 222, 285, 286, 287, 288, 293, 297, 312, 317, 407, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 978, 985, 991, 1022, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "10": [68, 1031], "pipelin": [70, 71, 73, 74, 133, 147, 168, 171, 232, 237, 242, 263, 313, 342, 383, 393, 394, 407, 409, 417, 859, 860, 861, 862, 1005, 1020, 1024, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "composit": [70, 168, 407, 409, 977], "estim": [70, 78, 79, 80, 81, 82, 83, 109, 111, 116, 123, 125, 132, 159, 166, 168, 180, 204, 207, 232, 237, 239, 240, 251, 270, 280, 289, 290, 298, 317, 318, 319, 322, 363, 383, 393, 394, 395, 404, 407, 409, 410, 412, 414, 415, 977, 978, 982, 984, 988, 1003, 1008, 1017, 1019, 1021, 1032, 1039, 1040, 1041], "column": [71, 72, 242], "transform": [71, 72, 73, 76, 86, 118, 131, 242, 319, 320, 321, 373, 393, 394, 409, 411, 412, 991, 998, 999, 1000, 1023], "heterogen": [71, 409], "sourc": [71, 97, 379], "20": [71, 352, 376, 1024, 1039], "newsgroup": [71, 352, 376, 1024], "creat": [71, 102, 104, 113, 205, 231, 269, 314, 342, 343, 393], "mix": 72, "type": [72, 247, 383, 395, 408, 1015], "dimension": [73, 222, 225, 242, 294, 312, 353, 982, 985, 991, 1005, 1022], "reduct": [73, 222, 226, 242, 294, 312, 353, 982, 991, 1005], "gridsearchcv": [73, 139, 266, 415, 797], "illustr": [73, 157, 162, 295, 418], "cach": [73, 287, 409], "within": 73, "chain": [74, 242, 283, 394, 409], "logist": [74, 184, 191, 192, 193, 194, 216, 217, 984, 1022], "concaten": 75, "multipl": [75, 242, 266, 363, 388, 412, 977, 978, 988, 1039, 1040], "effect": [76, 170, 227, 307, 312, 329, 357, 991], "target": [76, 160, 219, 313, 314, 393, 395, 407, 409, 411, 989, 998, 999], "shrinkag": [79, 410, 415, 982, 1022], "ledoitwolf": [79, 472], "max": [79, 988], "likelihood": [79, 180, 181, 265, 988, 993], "approach": [79, 190, 262], "mahalanobi": [81, 991], "distanc": [81, 407, 991], "relev": [81, 185, 984], "minimum": [82, 410], "determin": [82, 185, 410, 984, 988], "spars": [83, 96, 106, 171, 185, 187, 216, 317, 352, 353, 390, 407, 410, 413, 417, 998, 1000, 1002, 1048], "invers": [83, 410, 1000], "decomposit": [85, 86, 95, 96, 116, 168, 377, 407, 411, 413, 420, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 1023, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "variabl": [86, 170, 171, 368, 393, 407, 1022], "canon": [86, 411], "symmetr": 86, "pl": 86, "scatter": [86, 91], "multivari": [86, 978], "respons": [86, 396], "pls2": 86, "pls1": 86, "cca": [86, 481], "mode": [86, 367, 379], "b": 86, "deflat": 86, "compon": [87, 96, 102, 293, 294, 295, 413, 991, 1005, 1023], "partial": [87, 170, 172, 241, 995], "least": [87, 126, 190, 196, 199, 984], "squar": [87, 126, 162, 196, 199, 205, 418, 980, 984, 986, 988], "The": [87, 90, 91, 170, 171, 201, 227, 234, 260, 269, 280, 376, 385, 412, 416, 987, 988, 1000, 1022, 1023], "one": [87, 123, 241, 984, 988], "power": [87, 201], "iri": [91, 103, 105, 122, 155, 210, 331, 336, 358, 378, 418, 1021], "represent": [91, 172, 232, 318, 367, 383, 416, 1023], "randomli": [92, 93], "multilabel": [93, 238, 283, 377, 390, 407, 988, 989, 1015], "prepar": [96, 114, 177, 222, 271, 272, 312, 339, 385], "nmf": [96, 321, 413, 539], "independ": [96, 413, 1023], "fastica": [96, 97, 98, 420, 532], "minibatchsparsepca": [96, 413, 538], "center": [96, 998], "fa": [96, 104], "posit": [96, 320], "blind": 97, "separ": [97, 213, 340, 341], "ica": [97, 413, 1023], "point": [98, 295], "cloud": 98, "distort": 99, "displai": [99, 206, 231, 232, 242, 322, 323, 389, 1028, 1047], "patch": [99, 416], "noisi": [99, 160, 205], "them": [99, 380], "increment": [100, 369, 413], "kernelpca": [101, 534], "figur": 102, "probabilist": [104, 154, 413, 418], "precomput": [106, 182, 317, 413], "rotat": 107, "pattern": 107, "__sklearn_is_fitted__": 111, "api": [111, 243, 244, 317, 320, 322, 368, 383, 388, 395, 399, 404, 407, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1041], "custom": [111, 260, 335, 416, 998, 1003], "implement": [111, 187, 393, 408, 988, 991, 1002, 1003], "simpl": [111, 153, 237, 290, 387, 1021], "ensembl": [112, 118, 122, 168, 321, 407, 415, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "adaboost": [113, 114, 115, 415], "decis": [113, 114, 122, 129, 134, 168, 235, 288, 323, 331, 343, 356, 357, 358, 359, 360, 361, 393, 396, 407, 1004], "tree": [113, 114, 118, 120, 121, 122, 131, 168, 173, 201, 317, 322, 323, 356, 357, 358, 359, 360, 361, 393, 407, 415, 417, 908, 909, 910, 911, 912, 913, 914, 991, 996, 1004, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "train": [113, 114, 127, 129, 136, 149, 205, 231, 236, 240, 241, 243, 252, 275, 280, 304, 313, 314, 319, 329, 339, 343, 352, 357, 358, 361, 412, 991, 1001, 1015, 1022, 1024], "adaboostclassifi": [113, 552], "converg": 113, "error": [113, 117, 126, 139, 180, 205, 259, 275, 389, 398, 984, 988], "weight": [113, 180, 182, 214, 303, 318, 349, 399, 407, 415, 416], "weak": [113, 415], "learner": [113, 415], "decisiontre": 114, "singl": [116, 133, 219, 231, 377, 408, 978], "versu": [116, 215, 267, 331, 367], "bag": [116, 125, 352, 415, 416, 977, 1024], "bia": 116, "varianc": [116, 199, 417, 988, 998], "oob": 117, "forest": [117, 119, 120, 121, 132, 173, 174, 240, 243, 376, 415, 994], "histogram": [119, 318, 320, 322, 414, 415], "import": [120, 121, 127, 150, 173, 174, 235, 280, 312, 317, 415, 996], "decreas": [120, 121, 173], "impur": [120, 121, 173, 357, 996], "permut": [120, 173, 174, 268, 317, 412, 996], "pixel": 121, "parallel": [121, 368, 379, 387, 407, 408, 415, 954, 955, 977], "mdi": [121, 173], "surfac": [122, 235, 358], "categor": [123, 313, 319, 393, 415, 990, 998], "am": [123, 240], "hous": [123, 240, 376], "drop": 123, "hot": 123, "ordin": 123, "nativ": [123, 313, 317, 319], "limit": [123, 153, 367, 398, 402, 416], "split": [123, 319, 363, 412], "earli": [124, 209], "stop": [124, 209, 416, 1002], "interv": 126, "confid": 126, "tune": [126, 260, 263, 319, 977, 1024], "hyper": [126, 260, 319, 407, 977], "preprocess": [127, 133, 168, 171, 172, 240, 242, 306, 323, 354, 363, 393, 407, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 998, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "devianc": [127, 988], "isolationforest": [129, 562], "discret": [129, 161, 308, 309, 998], "boundari": [129, 134, 288, 331, 343], "path": [129, 188, 194, 206, 361, 398], "length": [129, 398], "monoton": [130, 415], "constraint": [130, 322, 408, 415], "name": [130, 320, 393, 409], "specifi": [130, 393, 977], "hash": [131, 390, 416], "total": [131, 357, 415], "output": [132, 239, 307, 322, 360, 1004, 1022], "meta": [132, 280, 319, 407, 415], "combin": [133, 231], "predictor": 133, "stack": [133, 317, 415], "make": [133, 136, 166, 381, 385, 396], "measur": [133, 265, 408, 988], "votingclassifi": [134, 135, 415, 568], "calcul": 135, "individu": [136, 172, 319, 995], "vote": [136, 415], "tutori": [138, 168, 1007, 1016, 1018, 1024], "exercis": [138, 139, 140, 141, 142, 168, 1019, 1022, 1024], "diabet": [139, 241, 378, 1022], "appli": 139, "line": [139, 156], "show": [139, 271], "std": [139, 180], "bonu": 139, "how": [139, 363, 381, 387, 393], "much": 139, "can": [139, 393], "you": [139, 393], "trust": 139, "alpha": [139, 357], "f": [145, 988], "mutual": [145, 408], "inform": [145, 166, 189, 190, 385, 407, 408, 977, 984], "anova": [147, 342], "recurs": [148, 149, 417], "elimin": [148, 149, 417, 977], "sequenti": [150, 417], "coeffici": [150, 171, 180, 205, 206, 408, 988], "toler": 150, "valu": [150, 164, 165, 166, 168, 227, 237, 317, 323, 361, 381, 413, 415, 978, 988, 996, 998, 1004], "process": [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 168, 171, 363, 396, 407, 418, 987, 1018], "machin": [152, 168, 170, 171, 172, 304, 334, 389, 407, 993, 1003, 1015, 1022], "ridg": [153, 181, 183, 199, 205, 206, 236, 314, 407, 671, 981, 984], "gpc": [154, 155, 156, 157, 418], "iso": [156, 269], "xor": [157, 418], "co2": 158, "level": [158, 159, 368, 408, 415], "mona": 158, "loa": 158, "gpr": [158, 159, 418], "build": [158, 166, 379, 381, 389, 409, 1024], "design": 158, "extrapol": 158, "interpret": [158, 171, 205, 240, 283, 413, 415], "abil": 159, "nois": [159, 160, 181], "optimis": 159, "basic": [160, 219, 394, 410, 418], "introductori": 160, "free": 160, "sequenc": [161, 393], "similar": [161, 986, 988], "under": [161, 393, 1026, 1047], "posterior": 162, "cookbook": 162, "radial": [162, 418, 980, 1022], "ration": [162, 418], "quadradt": 162, "exp": [162, 418], "sine": [162, 253, 418], "dot": [162, 418], "product": [162, 219, 389, 393, 418, 620], "mat\u00e9rn": [162, 418], "miss": [164, 165, 166, 168, 317, 323, 415, 978, 998, 1004], "imput": [164, 165, 166, 168, 317, 407, 626, 627, 628, 629, 978, 998, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "variant": 165, "iterativeimput": [165, 626, 978], "befor": [166, 385], "replac": 166, "0": [166, 317, 318, 319, 320, 1004, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "knn": [166, 317], "iter": [166, 274, 412, 977], "releas": [168, 316, 317, 318, 319, 320, 321, 322, 323, 385, 398, 1029, 1037], "highlight": [168, 316, 317, 318, 319, 320, 321, 322, 323, 1031, 1034, 1035, 1038, 1039], "mixtur": [168, 246, 247, 248, 251, 252, 253, 407, 795, 796, 987, 1039, 1040, 1044, 1045, 1047], "inspect": [168, 169, 397, 407, 630, 631, 632, 633, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "approxim": [168, 176, 177, 235, 285, 319, 407, 410, 980], "manifold": [168, 221, 222, 223, 224, 377, 407, 687, 688, 689, 690, 691, 692, 693, 694, 695, 985, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "miscellan": [168, 229, 407, 1039, 1040, 1041, 1042, 1043, 1044, 1047], "multiclass": [168, 216, 271, 279, 280, 317, 390, 406, 407, 828, 829, 830, 950, 951, 952, 988, 989, 1015, 1022, 1040, 1043, 1044, 1045], "multioutput": [168, 282, 407, 831, 832, 833, 834, 989, 1039, 1040, 1041, 1042, 1043, 1046, 1047], "neural": [168, 172, 300, 407, 992, 993], "network": [168, 172, 300, 407, 992, 993], "semi": [168, 325, 326, 330, 331, 407, 1001], "supervis": [168, 325, 326, 330, 331, 407, 992, 1001, 1011, 1022], "work": [168, 351, 367, 380, 393, 407, 1024], "failur": [170, 977], "infer": 170, "causal": [170, 171], "simul": 170, "hourli": 170, "wage": [170, 171], "descript": 170, "incom": 170, "fulli": 170, "observ": [170, 1022, 1023], "lesson": [170, 171], "common": [171, 363, 395, 404, 416, 988], "pitfal": [171, 363], "matter": 171, "check": [171, 264, 317, 389, 404, 1039, 1040, 1041], "problem": [171, 413, 1003, 1004, 1015, 1020, 1022, 1023], "correl": [171, 174, 411, 988, 996], "numer": [171, 368, 383], "wrong": [171, 393], "depend": [172, 237, 241, 379, 995, 1031, 1044, 1045], "condit": [172, 319, 995], "expect": [172, 319, 995], "preprocessor": 172, "1": [172, 198, 320, 321, 322, 323, 393, 1024, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "wai": [172, 381, 393], "layer": [172, 301, 992], "perceptron": [172, 301, 667, 984, 992], "ic": [172, 995], "pdp": 172, "3d": 172, "accuraci": [173, 235, 352, 357, 988], "": [173, 312, 314, 384, 393, 415, 988], "multicollinear": 174, "breast": [174, 378], "cancer": [174, 378], "handl": [174, 407, 978], "scalabl": [177, 264, 318], "partit": 177, "baselin": [177, 201], "bayesian": [180, 181, 247, 262, 407, 984, 987], "recov": 180, "true": [180, 181], "margin": [180, 181, 213, 340, 344], "log": [180, 181, 988], "expans": 180, "sinusoid": 181, "cubic": 181, "l": 181, "elast": [182, 186, 984], "net": [182, 186, 984], "gram": 182, "huberregressor": [183, 648], "strong": 183, "signal": [185, 413, 1023], "automat": [185, 394, 984], "ard": [185, 984], "elasticnet": [185, 318, 645], "dens": 187, "lar": [188, 649, 984], "criteria": [189, 393, 984, 1004], "aic": [190, 984], "bic": [190, 252, 984], "criterion": [190, 319, 977, 1002], "coordin": 190, "descent": [190, 209, 215, 984, 1002], "angl": [190, 984], "penalti": [192, 212, 347], "sparsiti": [192, 198, 416, 1022], "multinomi": [193, 217, 984, 990], "One": [193, 215, 271, 320, 338, 412, 994, 1002], "rest": [193, 271], "joint": 195, "task": [195, 407, 984, 1008], "onli": [198, 218, 1042, 1044], "2": [198, 322, 1024, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "ordinari": [199, 984], "orthogon": [200, 984], "match": [200, 984], "pursuit": [200, 984], "poisson": [201, 219, 318, 319, 988], "loss": [201, 211, 318, 321, 323, 415, 988], "french": 201, "motor": 201, "third": [201, 237, 398], "parti": [201, 237, 398], "liabil": 201, "claim": [201, 219], "constant": [201, 978], "rank": [201, 407, 988], "takeawai": 201, "interpol": 202, "quantileregressor": [203, 669], "linearregress": [203, 656], "ransac": [204, 984], "l2": [205, 347], "purpos": [205, 354, 1009], "thi": [205, 1009], "solver": [208, 413, 984], "stochast": [209, 215, 222, 302, 984, 985, 993, 1002], "sgd": [210, 211, 212, 213, 214, 984, 1002], "convex": 211, "maximum": [213, 340, 993], "hyperplan": [213, 340, 341], "20newgroup": 216, "mnist": [217, 303], "theil": [218, 984], "sen": [218, 984], "y": [218, 393, 411, 999, 1001], "direct": 218, "x": 218, "tweedi": [219, 988], "insur": 219, "definit": [219, 304, 995, 1041], "frequenc": [219, 1024], "sever": [219, 224], "gamma": [219, 323, 988], "pure": 219, "premium": 219, "tweedieregressor": [219, 679], "local": [222, 223, 291, 292, 985, 994], "isomap": [222, 223, 687, 985], "multidimension": 222, "t": [222, 227, 985], "techniqu": 223, "sphere": 224, "swiss": 226, "roll": [226, 383], "And": [226, 396], "hole": 226, "sne": [227, 985], "perplex": 227, "shape": [227, 1015], "anomali": 230, "object": [231, 257, 383, 393, 407, 977, 988, 1021, 1028], "confusionmatrixdisplai": [231, 696], "roccurvedisplai": [231, 701], "precisionrecalldisplai": [231, 699], "compact": 232, "rich": [232, 318], "html": [232, 383], "isoton": [233, 406, 407, 634, 635, 636, 979, 1039, 1040, 1041, 1043, 1045, 1046], "johnson": [234, 1000], "lindenstrauss": [234, 1000], "bound": 234, "theoret": 234, "explicit": 235, "map": [235, 311, 998], "rbf": [235, 338, 339, 343, 418, 621, 986, 1003, 1022], "python": [235, 368, 387, 402, 1007, 1008, 1037], "packag": [235, 1008, 1043], "svr": [236, 346, 906, 1003], "construct": 236, "metadata": [237, 323, 352, 395, 399, 407, 1048], "rout": [237, 323, 395, 399, 407, 1048], "router": 237, "consum": 237, "deprec": [237, 381, 407, 927, 1041], "default": [237, 292, 381], "chang": [237, 381, 396, 1013, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "complet": [239, 408], "kddcup99": 240, "sa": 240, "covertyp": [240, 376], "cardiotocographi": 240, "ablat": 240, "studi": 240, "advanc": [241, 399], "With": [241, 1024], "togeth": [241, 271, 1020, 1023], "grid": [242, 260, 262, 270, 273, 977, 1019, 1024], "search": [242, 260, 262, 270, 273, 280, 394, 977, 1019, 1024], "over": 242, "roc": [243, 259, 271, 272, 317, 988], "svc": [243, 343, 347, 905, 1003], "introduc": 244, "set_output": [244, 322, 383], "concentr": 247, "variat": [247, 987], "gmm": [249, 250], "densiti": [251, 289, 290, 298, 323, 414, 934, 1003], "best": [252, 382, 393], "confus": [256, 408, 988], "behavior": 257, "indic": 257, "mani": [257, 322, 368, 393], "cv": [257, 363], "tradeoff": [259, 988], "det": [259, 988], "refit": [260, 1015], "balanc": [261, 988], "statist": [262, 1008, 1018, 1021], "frequentist": 262, "practic": [262, 363, 382, 386, 985, 992, 1002, 1003, 1004], "equival": 262, "all": [262, 271, 321, 398, 1020, 1046, 1047, 1048], "take": 262, "home": 262, "messag": 262, "ratio": [265, 988], "pre": [265, 363, 394], "post": [265, 357], "respect": 265, "preval": 265, "cross_val_scor": [266, 822], "nest": [267, 409, 1019], "see": [267, 409], "also": [267, 385, 409], "signific": 268, "precis": [269, 988], "recal": [269, 988], "In": 269, "binari": [269, 283, 984, 988], "averag": [269, 271, 408, 415, 988], "micro": [269, 271], "each": [269, 274, 352, 977], "f1": 269, "receiv": [271, 272, 988], "oper": [271, 272, 380, 390, 407, 418, 988], "characterist": [271, 272, 988], "specif": [271, 379, 383, 402, 977, 1008, 1009], "ovr": 271, "macro": 271, "ovo": 271, "success": [273, 274, 319, 977], "halv": [273, 274, 319, 977], "candid": [274, 977], "amount": [274, 977], "resourc": [274, 368, 381, 977, 1007, 1012], "underfit": 276, "overfit": 276, "overview": [280, 388, 408, 994], "yeast": 280, "uci": 280, "logisticregress": [283, 657], "wrap": 283, "onevsrestclassifi": [283, 829, 989], "tsne": [285, 691], "1d": 290, "novelti": [291, 994, 1003], "lof": [291, 292], "neighborhood": [293, 294, 295, 991], "centroid": [296, 991], "mlpclassifi": [302, 857], "mlp": 303, "restrict": [304, 993], "boltzmann": [304, 993], "scaler": 307, "standardscal": [307, 880], "minmaxscal": [307, 870], "maxabsscal": [307, 869], "robustscal": [307, 878], "powertransform": [307, 876], "quantiletransform": [307, 877], "uniform": [307, 998], "kbinsdiscret": [308, 310, 865], "continu": [308, 381], "rescal": 312, "other": [313, 375, 393, 415, 1008, 1031], "intern": 314, "22": [317, 1041], "new": [317, 319, 320, 322, 323, 381, 393, 1007, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "prune": [317, 357, 1004], "datafram": [317, 393], "compat": [317, 381, 383, 404, 407], "auc": [317, 705], "now": [317, 320, 1041], "23": [318, 1042], "stabil": 318, "improv": [318, 319, 320, 321, 322, 380, 381, 1034, 1035], "24": [319, 1043], "histgradientboost": 319, "self": [319, 329, 1001], "sequentialfeatureselector": [319, 601], "polynomialcountsketch": [319, 639], "decisiontreeregressor": [319, 909], "keyword": [320, 1042, 1044], "argument": [320, 383, 1042, 1044], "more": [320, 393, 402, 992], "flexibl": [320, 978], "stabl": 320, "histgradientboostingregressor": [321, 561], "get_feature_names_out": 321, "avail": [321, 977, 1027, 1028], "group": [321, 323, 412, 1013, 1023], "infrequ": [321, 323, 998], "onehotencod": [321, 873], "minibatchnmf": [321, 537], "version": [321, 375, 379, 385, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "bisectingkmean": [321, 442], "divid": 321, "enhanc": [322, 396, 1008, 1034, 1035, 1036, 1037, 1038], "faster": [322, 415], "parser": [322, 375], "fetch_openml": [322, 495], "experiment": [322, 385, 404, 407, 578, 579, 1047], "arrai": [322, 361, 390, 404, 407, 1015, 1048], "lineardiscriminantanalysi": [322, 548], "effici": [322, 390], "targetencod": [323, 881], "model_select": [323, 407, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "validationcurvedisplai": [323, 819], "ordinalencod": [323, 874], "most": 326, "uncertain": 326, "activ": 327, "threshold": 329, "linearsvc": [337, 900], "unbalanc": [341, 1003], "some": 342, "plai": 342, "percentil": 342, "sigmoid": [343, 406, 986, 1022], "case": [347, 984, 988], "tie": 348, "break": 348, "word": [352, 416, 1024], "strip": 352, "quantifi": [353, 988], "qualiti": [353, 988], "tfidfvector": [353, 354, 590], "lsa": 353, "top": [353, 988], "term": [353, 395, 416], "per": 353, "hashingvector": [353, 588], "featurehash": [354, 581], "dictvector": [354, 580], "special": 354, "cost": [357, 1004], "leav": [357, 412, 984], "understand": 361, "what": [361, 393], "i": [361, 386, 393, 412, 1013], "here": [361, 1024], "recommend": [363, 376, 1008], "inconsist": 363, "leakag": 363, "dure": 363, "avoid": [363, 409], "control": [363, 415, 992], "none": 363, "randomst": 363, "instanc": [363, 369], "repeat": [363, 409, 412], "call": [363, 380], "splitter": [363, 407], "subtleti": 363, "get": [363, 393, 394], "reproduc": [363, 386], "across": 363, "execut": [363, 393], "configur": [367, 368], "overhead": 367, "input": [367, 383, 404, 407, 408, 998], "tip": [367, 382, 389, 977, 985, 992, 1002, 1003, 1004], "trick": [367, 387, 389, 416], "algebra": [367, 390], "librari": [367, 368], "reshap": [367, 1021], "link": [367, 375, 988], "manag": [368, 398], "higher": 368, "joblib": [368, 387], "lower": 368, "openmp": [368, 382], "numpi": [368, 386], "scipi": [368, 1048], "oversubscript": 368, "spawn": 368, "too": 368, "thread": 368, "switch": 368, "environ": 368, "sklearn_assume_finit": 368, "sklearn_working_memori": 368, "sklearn_se": 368, "sklearn_tests_global_random_se": 368, "sklearn_skip_network_test": 368, "sklearn_run_float32_test": 368, "sklearn_enable_debug_cython_direct": 368, "sklearn_build_enable_debug_symbol": 368, "sklearn_pairwise_dist_chunk_s": 368, "computation": 369, "bigger": 369, "stream": 369, "note": [369, 404, 412], "tabl": [370, 393], "Of": 370, "content": [370, 393, 1015], "util": [374, 386, 390, 407, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 1024, 1028, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "svmlight": 375, "format": [375, 386, 393, 402, 989], "org": [375, 385, 1013], "repositori": 375, "arff": 375, "extern": [375, 1007, 1015, 1031, 1040], "olivetti": 376, "consider": 376, "wild": 376, "rcv1": 376, "kddcup": 376, "99": 376, "california": 376, "plant": 378, "linnerrud": 378, "wine": 378, "wisconsin": 378, "diagnost": 378, "instal": [379, 398], "nightli": 379, "runtim": 379, "tag": [379, 381, 383], "edit": 379, "platform": [379, 389, 398], "instruct": 379, "window": [379, 398], "maco": 379, "compil": [379, 387], "conda": 379, "forg": 379, "homebrew": 379, "linux": [379, 393, 398], "system": 379, "freebsd": 379, "altern": [379, 977], "bug": [380, 381, 385, 1012, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "triag": 380, "issu": [380, 381], "curat": 380, "fruit": 380, "discuss": 380, "pr": [380, 385], "help": [380, 381, 393], "review": [380, 381, 389, 1024], "member": 380, "close": 380, "tough": 380, "typic": 380, "workflow": [380, 381], "contribut": [381, 393], "submit": 381, "report": [381, 386, 988], "request": [381, 385, 389, 393], "good": [381, 386], "video": [381, 1007], "git": 381, "pull": [381, 385, 389, 393], "checklist": [381, 385], "integr": 381, "ci": 381, "stall": 381, "unclaim": 381, "easi": 381, "want": 381, "github": 381, "action": 381, "coverag": [381, 389, 988], "write": 381, "matplotlib": 381, "monitor": 381, "tracker": [381, 1012], "maintain": [381, 385, 396, 402], "backward": 381, "guidelin": [381, 383], "read": 381, "exist": 381, "cython": [382, 387, 389], "convent": [382, 1015], "knowledg": 382, "eas": 382, "instanti": 383, "attribut": [383, 395, 977], "option": 383, "univers": 383, "your": [383, 386, 988], "own": [383, 393, 988], "templat": 383, "baseestim": [383, 422], "mixin": 383, "get_param": 383, "set_param": 383, "init": 383, "clone": [383, 433], "check_is_fit": [383, 972], "assert": 383, "guid": [384, 1026], "major": [385, 415, 1039, 1040], "minor": 385, "known": [385, 1039, 1040], "merg": 385, "web": 385, "site": 385, "craft": 386, "minim": [386, 1004, 1044, 1045], "provid": 386, "fail": 386, "comment": 386, "boil": 386, "down": 386, "script": 386, "someth": 386, "small": 386, "do": [386, 393], "NOT": 386, "unless": 386, "extrem": [386, 415], "necessari": 386, "markdown": 386, "make_regress": [386, 523], "make_classif": [386, 514], "make_blob": [386, 511], "optim": [387, 407, 977], "c": 387, "profil": 387, "usag": [387, 393, 399, 404, 406, 409, 415, 416, 984], "extens": [387, 398], "yep": 387, "gperftool": 387, "debugg": 387, "gdb": 387, "gprof": 387, "valgrind": [387, 389], "callgrind": 387, "kcachegrind": 387, "warm": 387, "restart": 387, "ax": 388, "saniti": 389, "preserv": 389, "fold": [389, 412], "unfold": 389, "outdat": 389, "diff": 389, "remot": 389, "track": [389, 409], "branch": 389, "pytest": 389, "alias": 389, "flag": 389, "standard": [389, 998], "repli": 389, "debug": 389, "arm64": 389, "x86_64": 389, "tool": [390, 393, 404, 407], "matric": [390, 407, 998], "warn": [390, 407], "except": [390, 407, 570, 571, 572, 573, 574, 575, 576, 577, 1043, 1047], "dispatch": 391, "frequent": 393, "ask": 393, "question": [393, 1012], "lot": 393, "peopl": [393, 1031, 1032, 1033, 1034], "pronounc": 393, "why": [393, 415], "pypi": 393, "deep": 393, "reinforc": 393, "Will": 393, "add": 393, "graphic": [393, 993], "did": 393, "remov": [393, 417, 998, 1031], "hmm": 393, "gpu": 393, "need": 393, "doe": 393, "directli": 393, "plan": 393, "so": 393, "my": 393, "ani": 393, "attent": 393, "inclus": 393, "includ": 393, "should": 393, "save": 393, "export": 393, "deploi": 393, "bunch": [393, 915], "usabl": 393, "deal": [393, 407], "string": 393, "sometim": 393, "crash": 393, "freez": 393, "n_job": 393, "osx": [393, 398], "job": 393, "than": 393, "random_st": 393, "entir": 393, "start": 394, "processor": 394, "glossari": 395, "element": 395, "concept": [395, 984], "properti": 395, "role": 396, "technic": 396, "committe": 396, "propos": 396, "slep": 396, "latest": 398, "alpin": 398, "arch": 398, "debian": 398, "ubuntu": 398, "fedora": 398, "netbsd": 398, "macport": 398, "mac": 398, "anaconda": 398, "enthought": 398, "deploy": 398, "intel": 398, "winpython": 398, "troubleshoot": 398, "caus": 398, "unweight": 399, "interfac": [399, 407], "statu": 399, "persist": 402, "serial": 402, "secur": 402, "skop": 402, "interoper": [402, 1008], "pytorch": 404, "mp": 404, "devic": 404, "mathemat": [405, 407, 408, 415, 980, 982, 991, 992, 995, 1002, 1003, 1004], "formul": [405, 408, 415, 982, 991, 992, 1002, 1003, 1004], "sklearn": [407, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "compos": [407, 463, 464, 465, 466, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "cross_decomposit": [407, 481, 482, 483, 484, 1041, 1043, 1045, 1047], "loader": 407, "discriminant_analysi": [407, 548, 549, 1039, 1040, 1043, 1045, 1046, 1047], "dummi": [407, 550, 551, 988, 1039, 1040, 1041, 1044, 1045], "feature_extract": [407, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "feature_select": [407, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "gaussian_process": [407, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "kernel_approxim": [407, 637, 638, 639, 640, 641, 1041, 1043, 1044, 1045, 1046, 1047], "kernel_ridg": [407, 642], "linear_model": [407, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "classic": 407, "glm": 407, "naive_bay": [407, 835, 836, 837, 838, 839, 1039, 1041, 1042, 1043, 1044, 1046, 1047], "neural_network": [407, 856, 857, 858, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "random_project": [407, 892, 893, 894, 1045], "semi_supervis": [407, 895, 896, 897, 1041, 1042, 1043, 1047], "discoveri": [407, 928, 929, 930], "checker": 407, "recent": 407, "low": [408, 415, 417], "mini": [408, 413], "batch": [408, 413], "assign": 408, "featureagglomer": [408, 444], "hierarchi": 408, "ad": 408, "connect": [408, 416, 1023], "consumpt": 408, "larg": [408, 416], "size": [408, 415], "reachabl": 408, "rand": 408, "index": [408, 943], "advantag": 408, "drawback": 408, "homogen": 408, "fowlk": 408, "mallow": 408, "calinski": 408, "harabasz": 408, "davi": 408, "bouldin": 408, "conting": 408, "pair": 408, "access": 409, "featureunion": [409, 859], "columntransform": [409, 463], "shrunk": 410, "oracl": 410, "plscanon": [411, 482], "plssvd": [411, 484], "plsregress": [411, 483], "held": 412, "cross_valid": [412, 823], "obtain": 412, "d": [412, 991], "loo": 412, "p": [412, 1013], "lpo": 412, "shuffl": [412, 962], "stratif": 412, "stratifi": 412, "stratifiedgroupkfold": [412, 815], "predefin": [412, 988], "decompos": 413, "exact": 413, "sparsepca": [413, 542], "kpca": 413, "choic": [413, 991], "truncat": 413, "semant": 413, "nnmf": 413, "frobeniu": 413, "norm": 413, "beta": 413, "diverg": 413, "gradientboostingclassifi": [415, 558], "histgradientboostingclassifi": [415, 560], "gradientboostingregressor": [415, 559], "addit": [415, 980], "rate": 415, "subsampl": 415, "hard": 415, "soft": 415, "dict": 416, "tf": 416, "idf": 416, "decod": 416, "applic": [416, 1023], "corpu": 416, "selectfrommodel": [417, 596], "biclustermixin": 423, "classnameprefixfeaturesoutmixin": 424, "classifiermixin": 425, "clustermixin": 426, "densitymixin": 427, "metaestimatormixin": 428, "onetoonefeaturemixin": 429, "outliermixin": 430, "regressormixin": 431, "transformermixin": 432, "is_classifi": 434, "is_regressor": 435, "calibratedclassifiercv": 436, "calibrationdisplai": 437, "from_estim": [437, 630, 631, 696, 697, 699, 700, 701, 803, 819], "calibration_curv": 438, "affinitypropag": 439, "agglomerativeclust": 440, "spectralclust": 451, "spectralcoclust": 452, "affinity_propag": 453, "cluster_optics_dbscan": 454, "cluster_optics_xi": 455, "compute_optics_graph": 456, "estimate_bandwidth": 457, "k_mean": 458, "kmeans_plusplu": 459, "mean_shift": 460, "spectral_clust": 461, "ward_tre": 462, "transformedtargetregressor": 464, "make_column_selector": 465, "make_column_transform": 466, "config_context": 467, "ellipticenvelop": 468, "empiricalcovari": 469, "graphicallasso": 470, "graphicallassocv": 471, "mincovdet": 473, "shrunkcovari": 475, "empirical_covari": 476, "graphical_lasso": 477, "ledoit_wolf": 478, "ledoit_wolf_shrinkag": 479, "shrunk_covari": 480, "clear_data_hom": 485, "dump_svmlight_fil": 486, "fetch_20newsgroup": 487, "fetch_20newsgroups_vector": 488, "fetch_california_h": 489, "fetch_covtyp": 490, "fetch_kddcup99": 491, "fetch_lfw_pair": 492, "fetch_lfw_peopl": 493, "fetch_olivetti_fac": 494, "fetch_rcv1": 496, "fetch_species_distribut": 497, "get_data_hom": 498, "load_breast_canc": 499, "load_diabet": 500, "load_digit": 501, "load_fil": 502, "load_iri": 503, "load_linnerud": 504, "load_sample_imag": [505, 506], "load_svmlight_fil": [507, 508], "load_win": 509, "make_biclust": 510, "make_checkerboard": 512, "make_circl": 513, "make_friedman1": 515, "make_friedman2": 516, "make_friedman3": 517, "make_gaussian_quantil": 518, "make_hastie_10_2": 519, "make_low_rank_matrix": 520, "make_moon": 521, "make_multilabel_classif": 522, "make_s_curv": 524, "make_sparse_coded_sign": 525, "make_sparse_spd_matrix": 526, "make_sparse_uncorrel": 527, "make_spd_matrix": 528, "make_swiss_rol": 529, "dictionarylearn": 530, "factoranalysi": 531, "incrementalpca": 533, "latentdirichletalloc": 535, "minibatchdictionarylearn": 536, "sparsecod": 541, "truncatedsvd": 543, "dict_learn": 544, "dict_learning_onlin": 545, "non_negative_factor": 546, "sparse_encod": 547, "quadraticdiscriminantanalysi": 549, "dummyclassifi": 550, "dummyregressor": 551, "adaboostregressor": 553, "baggingclassifi": 554, "baggingregressor": 555, "extratreesclassifi": 556, "extratreesregressor": 557, "randomforestclassifi": 563, "randomforestregressor": 564, "randomtreesembed": 565, "stackingclassifi": 566, "stackingregressor": 567, "votingregressor": 569, "convergencewarn": 570, "dataconversionwarn": 571, "datadimensionalitywarn": 572, "efficiencywarn": 573, "fitfailedwarn": 574, "inconsistentversionwarn": 575, "notfittederror": 576, "undefinedmetricwarn": 577, "enable_halving_search_cv": 578, "enable_iterative_imput": 579, "patchextractor": 582, "extract_patches_2d": 583, "grid_to_graph": 584, "img_to_graph": 585, "reconstruct_from_patches_2d": 586, "countvector": 587, "tfidftransform": 589, "genericunivariateselect": 591, "rfe": 592, "rfecv": 593, "selectfdr": 594, "selectfpr": 595, "selectfw": 597, "selectkbest": 598, "selectpercentil": 599, "selectormixin": 600, "variancethreshold": 602, "chi2": 603, "f_classif": 604, "f_regress": 605, "mutual_info_classif": 606, "mutual_info_regress": 607, "r_regress": 608, "gaussianprocessclassifi": 609, "gaussianprocessregressor": 610, "compoundkernel": 611, "constantkernel": 612, "dotproduct": 613, "expsinesquar": 614, "exponenti": 615, "matern": 618, "pairwisekernel": 619, "rationalquadrat": 622, "sum": 623, "whitekernel": 624, "get_config": 625, "knnimput": 627, "missingind": 628, "simpleimput": 629, "decisionboundarydisplai": 630, "partialdependencedisplai": 631, "partial_depend": 632, "permutation_import": 633, "isotonicregress": 634, "check_increas": 635, "isotonic_regress": 636, "additivechi2sampl": 637, "nystroem": [638, 980], "rbfsampler": 640, "skewedchi2sampl": 641, "kernelridg": 642, "ardregress": 643, "bayesianridg": 644, "elasticnetcv": 646, "gammaregressor": 647, "larscv": 650, "lassocv": 652, "lassolar": 653, "lassolarscv": 654, "lassolars": 655, "logisticregressioncv": 658, "multitaskelasticnet": 659, "multitaskelasticnetcv": 660, "multitasklasso": 661, "multitasklassocv": 662, "orthogonalmatchingpursuit": 663, "orthogonalmatchingpursuitcv": 664, "passiveaggressiveclassifi": 665, "passiveaggressiveregressor": 666, "poissonregressor": 668, "ransacregressor": 670, "ridgecv": 672, "ridgeclassifi": 673, "ridgeclassifiercv": 674, "sgdclassifi": 675, "sgdoneclasssvm": 676, "sgdregressor": 677, "theilsenregressor": 678, "enet_path": 680, "lars_path": 681, "lars_path_gram": 682, "lasso_path": 683, "orthogonal_mp": 684, "orthogonal_mp_gram": 685, "ridge_regress": 686, "locallylinearembed": 688, "md": [689, 985], "spectralembed": 690, "locally_linear_embed": 692, "smacof": 693, "spectral_embed": 694, "trustworthi": 695, "from_predict": [696, 699, 700, 701], "detcurvedisplai": 697, "distancemetr": 698, "predictionerrordisplai": 700, "accuracy_scor": 702, "adjusted_mutual_info_scor": 703, "adjusted_rand_scor": 704, "average_precision_scor": 706, "balanced_accuracy_scor": 707, "brier_score_loss": 708, "calinski_harabasz_scor": 709, "check_scor": 710, "class_likelihood_ratio": 711, "classification_report": 712, "contingency_matrix": 713, "pair_confusion_matrix": 714, "cohen_kappa_scor": 715, "completeness_scor": 716, "confusion_matrix": 717, "consensus_scor": 718, "coverage_error": 719, "d2_absolute_error_scor": 720, "d2_pinball_scor": 721, "d2_tweedie_scor": 722, "davies_bouldin_scor": 723, "dcg_score": 724, "det_curv": 725, "explained_variance_scor": 726, "f1_score": 727, "fbeta_scor": 728, "fowlkes_mallows_scor": 729, "get_scor": 730, "get_scorer_nam": 731, "hamming_loss": 732, "hinge_loss": 733, "homogeneity_completeness_v_measur": 734, "homogeneity_scor": 735, "jaccard_scor": 736, "label_ranking_average_precision_scor": 737, "label_ranking_loss": 738, "log_loss": 739, "make_scor": 740, "matthews_corrcoef": 741, "max_error": 742, "mean_absolute_error": 743, "mean_absolute_percentage_error": 744, "mean_gamma_devi": 745, "mean_pinball_loss": 746, "mean_poisson_devi": 747, "mean_squared_error": 748, "mean_squared_log_error": 749, "mean_tweedie_devi": 750, "median_absolute_error": 751, "multilabel_confusion_matrix": 752, "mutual_info_scor": 753, "ndcg_score": 754, "normalized_mutual_info_scor": 755, "additive_chi2_kernel": 756, "chi2_kernel": 757, "cosine_dist": 758, "cosine_similar": 759, "distance_metr": 760, "euclidean_dist": 761, "haversine_dist": 762, "kernel_metr": 763, "laplacian_kernel": 764, "linear_kernel": 765, "manhattan_dist": 766, "nan_euclidean_dist": 767, "paired_cosine_dist": 768, "paired_dist": 769, "paired_euclidean_dist": 770, "paired_manhattan_dist": 771, "pairwise_kernel": 772, "polynomial_kernel": 773, "rbf_kernel": 774, "sigmoid_kernel": 775, "pairwise_dist": 776, "pairwise_distances_argmin": 777, "pairwise_distances_argmin_min": 778, "pairwise_distances_chunk": 779, "precision_recall_curv": 780, "precision_recall_fscore_support": 781, "precision_scor": 782, "r2_score": 783, "rand_scor": 784, "recall_scor": 785, "roc_auc_scor": 786, "roc_curv": 787, "root_mean_squared_error": 788, "root_mean_squared_log_error": 789, "silhouette_sampl": 790, "silhouette_scor": 791, "top_k_accuracy_scor": 792, "v_measure_scor": 793, "zero_one_loss": 794, "bayesiangaussianmixtur": 795, "gaussianmixtur": 796, "groupkfold": 798, "groupshufflesplit": 799, "halvinggridsearchcv": 800, "halvingrandomsearchcv": 801, "kfold": 802, "learningcurvedisplai": 803, "leaveonegroupout": 804, "leaveoneout": 805, "leavepgroupsout": 806, "leavepout": 807, "parametergrid": 808, "parametersampl": 809, "predefinedsplit": 810, "randomizedsearchcv": 811, "repeatedkfold": 812, "repeatedstratifiedkfold": 813, "shufflesplit": 814, "stratifiedkfold": 816, "stratifiedshufflesplit": 817, "timeseriessplit": 818, "check_cv": 820, "cross_val_predict": 821, "learning_curv": 824, "permutation_test_scor": 825, "train_test_split": 826, "validation_curv": 827, "onevsoneclassifi": [828, 989], "outputcodeclassifi": [830, 989], "classifierchain": [831, 989], "multioutputclassifi": [832, 989], "multioutputregressor": [833, 989], "regressorchain": [834, 989], "bernoullinb": 835, "categoricalnb": 836, "complementnb": 837, "gaussiannb": 838, "multinomialnb": 839, "balltre": [840, 991], "kdtree": [841, 991], "kneighborsclassifi": 842, "kneighborsregressor": 843, "kneighborstransform": 844, "kerneldens": 845, "localoutlierfactor": 846, "nearestcentroid": 847, "nearestneighbor": 848, "neighborhoodcomponentsanalysi": 849, "radiusneighborsclassifi": 850, "radiusneighborsregressor": 851, "radiusneighborstransform": 852, "kneighbors_graph": 853, "radius_neighbors_graph": 854, "sort_graph_by_row_valu": 855, "bernoullirbm": 856, "mlpregressor": 858, "make_pipelin": 861, "make_union": 862, "binar": [863, 883, 998, 999], "functiontransform": 864, "kernelcenter": 866, "labelbinar": [867, 999], "labelencod": 868, "multilabelbinar": [871, 999], "polynomialfeatur": 875, "splinetransform": 879, "add_dummy_featur": 882, "label_binar": 884, "maxabs_scal": 885, "minmax_scal": 886, "power_transform": 888, "quantile_transform": 889, "robust_scal": 890, "gaussianrandomproject": 892, "sparserandomproject": 893, "johnson_lindenstrauss_min_dim": 894, "labelpropag": 895, "labelspread": 896, "selftrainingclassifi": 897, "set_config": 898, "show_vers": 899, "linearsvr": 901, "nusvc": 902, "nusvr": 903, "oneclasssvm": 904, "l1_min_c": 907, "decisiontreeclassifi": 908, "extratreeclassifi": 910, "extratreeregressor": 911, "export_graphviz": 912, "export_text": 913, "plot_tre": 914, "_safe_index": 916, "arrayfunc": 917, "min_po": 917, "as_float_arrai": 918, "assert_all_finit": 919, "check_x_i": 920, "check_arrai": 921, "check_consistent_length": 922, "check_random_st": 923, "check_scalar": 924, "class_weight": [925, 926], "compute_class_weight": 925, "compute_sample_weight": 926, "all_displai": 928, "all_estim": 929, "all_funct": 930, "estimator_check": [931, 932], "check_estim": 931, "parametrize_with_check": 932, "estimator_html_repr": 933, "extmath": [934, 935, 936, 937, 938, 939], "fast_logdet": 935, "randomized_range_find": 936, "randomized_svd": 937, "safe_sparse_dot": 938, "weighted_mod": 939, "gen_batch": 940, "gen_even_slic": 941, "single_source_shortest_path_length": 942, "metadata_rout": [944, 945, 946, 947, 948], "metadatarequest": 944, "metadatarout": 945, "methodmap": 946, "get_routing_for_object": 947, "process_rout": 948, "metaestim": 949, "available_if": 949, "is_multilabel": 950, "type_of_target": 951, "unique_label": 952, "murmurhash3_32": 953, "delai": 955, "parallel_backend": 956, "sample_without_replac": 957, "register_parallel_backend": 958, "resampl": 959, "safe_mask": 960, "safe_sqr": 961, "sparsefunc": [963, 964, 965, 966, 967, 968, 969, 1040], "incr_mean_variance_axi": 963, "inplace_column_scal": 964, "inplace_csr_column_scal": 965, "inplace_row_scal": 966, "inplace_swap_column": 967, "inplace_swap_row": 968, "mean_variance_axi": 969, "sparsefuncs_fast": [970, 971], "inplace_csr_row_normalize_l1": 970, "inplace_csr_row_normalize_l2": 971, "check_memori": 973, "check_symmetr": 974, "column_or_1d": 975, "has_fit_paramet": 976, "exhaust": 977, "min_resourc": 977, "aggress": [977, 984], "cv_results_": 977, "brute": [977, 991], "forc": [977, 991], "keep": 978, "mark": 978, "nan": 978, "chi": [980, 986], "skew": 980, "tensor": 980, "sketch": 980, "detail": [980, 1002, 1003], "omp": 984, "passiv": 984, "scenario": 984, "trade": 984, "off": 984, "which": 984, "consensu": 984, "median": [984, 988], "huber": 984, "extend": 984, "introduct": [985, 1015], "modifi": 985, "hessian": 985, "eigenmap": 985, "tangent": 985, "align": 985, "cosin": 986, "laplacian": 986, "pro": 987, "con": 987, "rule": 988, "cohen": 988, "kappa": 988, "ham": 988, "jaccard": 988, "hing": 988, "matthew": 988, "zero": 988, "brier": 988, "discount": 988, "cumul": 988, "gain": 988, "r\u00b2": 988, "absolut": 988, "logarithm": 988, "percentag": 988, "explain": 988, "pinbal": 988, "d\u00b2": 988, "complement": 990, "bernoulli": [990, 993], "unsupervis": [991, 993, 1005, 1023, 1025], "find": 991, "ball": 991, "leaf_siz": 991, "shrunken": 991, "warm_start": 992, "parametr": 993, "up": 994, "ellipt": 994, "envelop": 994, "isol": 994, "outlin": 996, "mislead": 996, "strongli": 996, "rang": 998, "whiten": 998, "bin": 998, "lemma": 1000, "unlabel": 1001, "entri": 1001, "id3": 1004, "c4": 1004, "5": [1004, 1031], "c5": 1004, "cart": 1004, "welcom": 1006, "talk": 1007, "scientif": [1007, 1018], "framework": 1008, "domain": 1008, "translat": 1008, "roadmap": 1009, "statement": 1009, "2018": 1009, "architectur": 1009, "goal": 1009, "subpackag": 1009, "mail": 1012, "user": [1012, 1026], "gitter": 1012, "who": 1013, "j": 1013, "morgan": 1013, "spotifi": 1013, "inria": 1013, "betawork": 1013, "hug": 1013, "evernot": 1013, "t\u00e9l\u00e9com": 1013, "paristech": 1013, "book": 1013, "com": 1013, "aweb": 1013, "yhat": 1013, "rangespan": 1013, "birchbox": 1013, "bestofmedia": 1013, "phimeca": 1013, "howaboutw": 1013, "peerindex": 1013, "datarobot": 1013, "okcupid": 1013, "love": 1013, "publica": 1013, "machinali": 1013, "solido": 1013, "infonea": 1013, "dataiku": 1013, "otto": 1013, "zopa": 1013, "mar": 1013, "bnp": 1013, "pariba": 1013, "cardif": 1013, "section": 1015, "cast": 1015, "updat": [1015, 1041], "right": 1017, "put": 1020, "open": 1020, "ship": 1021, "would": 1021, "high": 1022, "solv": [1022, 1023], "vocabulari": 1022, "curs": 1022, "iris": 1022, "same": 1022, "seek": 1023, "constrain": 1023, "inverse_transform": 1023, "setup": 1024, "token": 1024, "occurr": 1024, "languag": 1024, "identif": 1024, "sentiment": 1024, "movi": 1024, "cli": 1024, "where": 1024, "12": 1031, "changelog": [1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "11": 1031, "9": 1031, "8": 1031, "7": 1031, "6": [1031, 1037], "modul": [1031, 1039, 1040, 1046, 1047, 1048], "misc": 1031, "4": [1031, 1039, 1048], "earlier": 1031, "13": 1032, "14": 1033, "15": 1034, "16": 1035, "17": 1036, "18": 1037, "last": 1037, "19": 1038, "21": 1040, "legend": [1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "post1": 1041, "websit": 1041, "clear": 1041, "public": 1041, "futurewarn": 1041, "enforc": [1042, 1044]}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"About us": [[0, "about-us"]], "History": [[0, "history"]], "Governance": [[0, "governance"]], "Authors": [[0, "authors"], [1031, "authors"], [1031, "id20"]], "Documentation Team": [[0, "documentation-team"]], "Contributor Experience Team": [[0, "contributor-experience-team"], [396, "contributor-experience-team"]], "Communication Team": [[0, "communication-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Artwork": [[0, "artwork"]], "Funding": [[0, "funding"]], "Past Sponsors": [[0, "past-sponsors"]], "Sprints": [[0, "sprints"]], "Donating to the project": [[0, "donating-to-the-project"]], "Infrastructure support": [[0, "infrastructure-support"]], "Examples based on real world datasets": [[3, "examples-based-on-real-world-datasets"], [168, "examples-based-on-real-world-datasets"]], "Time-related feature engineering": [[4, "time-related-feature-engineering"]], "Data exploration on the Bike Sharing Demand dataset": [[4, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Time-based cross-validation": [[4, "time-based-cross-validation"]], "Gradient Boosting": [[4, "gradient-boosting"]], "Naive linear regression": [[4, "naive-linear-regression"]], "Time-steps as categories": [[4, "time-steps-as-categories"]], "Trigonometric features": [[4, "trigonometric-features"]], "Periodic spline features": [[4, "periodic-spline-features"]], "Qualitative analysis of the impact of features on linear model predictions": [[4, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Modeling pairwise interactions with splines and polynomial features": [[4, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling non-linear feature interactions with kernels": [[4, "modeling-non-linear-feature-interactions-with-kernels"]], "Concluding remarks": [[4, "concluding-remarks"], [226, "concluding-remarks"]], "Image denoising using kernel PCA": [[5, "image-denoising-using-kernel-pca"]], "References": [[5, null], [11, "references"], [26, "references"], [28, "references"], [82, "references"], [116, "references"], [177, "references"], [185, "references"], [189, null], [262, null], [280, "references"], [298, "references"], [376, null], [376, null], [376, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [416, null], [418, "references"], [978, "references"], [978, null], [995, null], [998, null], [998, null], [1001, null], [1001, null]], "Load the dataset via OpenML": [[5, "load-the-dataset-via-openml"]], "Learn the PCA basis": [[5, "learn-the-pca-basis"]], "Reconstruct and denoise test images": [[5, "reconstruct-and-denoise-test-images"]], "Faces recognition example using eigenfaces and SVMs": [[6, "faces-recognition-example-using-eigenfaces-and-svms"]], "Model Complexity Influence": [[7, "model-complexity-influence"]], "Load the data": [[7, "load-the-data"], [51, "load-the-data"], [127, "load-the-data"], [288, "load-the-data"]], "Benchmark influence": [[7, "benchmark-influence"]], "Choose parameters": [[7, "choose-parameters"]], "Run the code and plot the results": [[7, "run-the-code-and-plot-the-results"]], "Conclusion": [[7, "conclusion"], [13, "conclusion"], [190, "conclusion"], [280, "conclusion"], [288, "conclusion"], [314, "conclusion"], [343, "conclusion"]], "Out-of-core classification of text documents": [[8, "out-of-core-classification-of-text-documents"]], "Reuters Dataset related routines": [[8, "reuters-dataset-related-routines"]], "Main": [[8, "main"]], "Plot results": [[8, "plot-results"], [50, "plot-results"], [79, "plot-results"], [97, "plot-results"], [98, "plot-results"], [119, "plot-results"], [283, "plot-results"], [292, "plot-results"]], "Outlier detection on a real data set": [[9, "outlier-detection-on-a-real-data-set"]], "First example": [[9, "first-example"]], "Second example": [[9, "second-example"]], "Prediction Latency": [[10, "prediction-latency"], [367, "prediction-latency"]], "Benchmark and plot helper functions": [[10, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[10, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark n_features influence on prediction speed": [[10, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[10, "benchmark-throughput"]], "Species distribution modeling": [[11, "species-distribution-modeling"]], "Visualizing the stock market structure": [[12, "visualizing-the-stock-market-structure"]], "Retrieve the data from Internet": [[12, "retrieve-the-data-from-internet"]], "Learning a graph structure": [[12, "learning-a-graph-structure"]], "Clustering using affinity propagation": [[12, "clustering-using-affinity-propagation"]], "Embedding in 2D space": [[12, "embedding-in-2d-space"]], "Visualization": [[12, "visualization"], [339, "visualization"], [407, "visualization"]], "Lagged features for time series forecasting": [[13, "lagged-features-for-time-series-forecasting"]], "Analyzing the Bike Sharing Demand dataset": [[13, "analyzing-the-bike-sharing-demand-dataset"]], "Generating pandas-engineered lagged features": [[13, "generating-pandas-engineered-lagged-features"]], "Naive evaluation of the next hour bike demand regression": [[13, "naive-evaluation-of-the-next-hour-bike-demand-regression"]], "Proper next hour forecasting evaluation": [[13, "proper-next-hour-forecasting-evaluation"]], "Modeling predictive uncertainty via quantile regression": [[13, "modeling-predictive-uncertainty-via-quantile-regression"]], "A qualitative look at the predictions": [[13, "a-qualitative-look-at-the-predictions"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[14, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[15, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Computation times": [[16, "computation-times"], [23, "computation-times"], [29, "computation-times"], [36, "computation-times"], [69, "computation-times"], [77, "computation-times"], [84, "computation-times"], [88, "computation-times"], [94, "computation-times"], [108, "computation-times"], [110, "computation-times"], [137, "computation-times"], [143, "computation-times"], [151, "computation-times"], [163, "computation-times"], [167, "computation-times"], [175, "computation-times"], [178, "computation-times"], [220, "computation-times"], [228, "computation-times"], [245, "computation-times"], [254, "computation-times"], [278, "computation-times"], [281, "computation-times"], [284, "computation-times"], [299, "computation-times"], [305, "computation-times"], [315, "computation-times"], [324, "computation-times"], [332, "computation-times"], [333, "computation-times"], [350, "computation-times"], [355, "computation-times"], [362, "computation-times"], [1010, "computation-times"]], "Libsvm GUI": [[17, "libsvm-gui"]], "Wikipedia principal eigenvector": [[18, "wikipedia-principal-eigenvector"]], "Download data, if not already on disk": [[18, "download-data-if-not-already-on-disk"]], "Loading the redirect files": [[18, "loading-the-redirect-files"]], "Computing the Adjacency matrix": [[18, "computing-the-adjacency-matrix"]], "Computing Principal Singular Vector using Randomized SVD": [[18, "computing-principal-singular-vector-using-randomized-svd"]], "Computing Centrality scores": [[18, "computing-centrality-scores"]], "Biclustering": [[19, "biclustering"], [168, "biclustering"], [377, "biclustering"], [405, "biclustering"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[20, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "A demo of the Spectral Biclustering algorithm": [[21, "a-demo-of-the-spectral-biclustering-algorithm"]], "Generate sample data": [[21, "generate-sample-data"], [39, "generate-sample-data"], [56, "generate-sample-data"], [64, "generate-sample-data"], [79, "generate-sample-data"], [97, "generate-sample-data"], [98, "generate-sample-data"], [146, "generate-sample-data"], [236, "generate-sample-data"], [275, "generate-sample-data"], [297, "generate-sample-data"], [346, "generate-sample-data"]], "Fitting SpectralBiclustering": [[21, "fitting-spectralbiclustering"]], "Plotting results": [[21, "plotting-results"]], "A demo of the Spectral Co-Clustering algorithm": [[22, "a-demo-of-the-spectral-co-clustering-algorithm"]], "Calibration": [[24, "calibration"], [168, "calibration"]], "Probability calibration of classifiers": [[25, "probability-calibration-of-classifiers"]], "Generate synthetic dataset": [[25, "generate-synthetic-dataset"], [180, "generate-synthetic-dataset"], [180, "id1"], [185, "generate-synthetic-dataset"]], "Gaussian Naive-Bayes": [[25, "gaussian-naive-bayes"]], "Plot data and the predicted probabilities": [[25, "plot-data-and-the-predicted-probabilities"]], "Probability Calibration curves": [[26, "probability-calibration-curves"]], "Dataset": [[26, "dataset"], [28, "dataset"], [190, "dataset"], [268, "dataset"]], "Calibration curves": [[26, "calibration-curves"], [28, "calibration-curves"], [406, "calibration-curves"]], "Gaussian Naive Bayes": [[26, "gaussian-naive-bayes"], [990, "gaussian-naive-bayes"]], "Linear support vector classifier": [[26, "linear-support-vector-classifier"]], "Summary": [[26, "summary"], [354, "summary"]], "Probability Calibration for 3-class classification": [[27, "probability-calibration-for-3-class-classification"]], "Data": [[27, "data"]], "Fitting and calibration": [[27, "fitting-and-calibration"]], "Compare probabilities": [[27, "compare-probabilities"]], "Comparison of Calibration of Classifiers": [[28, "comparison-of-calibration-of-classifiers"]], "Classification": [[30, "classification"], [33, "classification"], [161, "classification"], [168, "classification"], [415, "classification"], [415, "id10"], [984, "classification"], [991, "id4"], [992, "classification"], [1002, "classification"], [1003, "classification"], [1004, "classification"], [1022, "classification"]], "Plot classification probability": [[31, "plot-classification-probability"]], "Classifier comparison": [[32, "classifier-comparison"]], "Recognizing hand-written digits": [[33, "recognizing-hand-written-digits"]], "Digits dataset": [[33, "digits-dataset"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[34, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[35, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Data generation": [[35, "data-generation"], [50, "data-generation"], [58, "data-generation"], [129, "data-generation"], [149, "data-generation"], [159, "data-generation"], [252, "data-generation"], [326, "data-generation"], [347, "data-generation"]], "Plotting Functions": [[35, "plotting-functions"]], "Comparison of LDA and QDA": [[35, "comparison-of-lda-and-qda"]], "Clustering": [[37, "clustering"], [168, "clustering"], [408, "clustering"]], "Adjustment for chance in clustering performance evaluation": [[38, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Defining the list of metrics to evaluate": [[38, "defining-the-list-of-metrics-to-evaluate"]], "First experiment: fixed ground truth labels and growing number of clusters": [[38, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Second experiment: varying number of classes and clusters": [[38, "second-experiment-varying-number-of-classes-and-clusters"]], "Demo of affinity propagation clustering algorithm": [[39, "demo-of-affinity-propagation-clustering-algorithm"]], "Compute Affinity Propagation": [[39, "compute-affinity-propagation"]], "Plot result": [[39, "plot-result"], [64, "plot-result"], [68, "plot-result"], [68, "id2"]], "Agglomerative clustering with and without structure": [[40, "agglomerative-clustering-with-and-without-structure"]], "Agglomerative clustering with different metrics": [[41, "agglomerative-clustering-with-different-metrics"]], "Plot Hierarchical Clustering Dendrogram": [[42, "plot-hierarchical-clustering-dendrogram"]], "Compare BIRCH and MiniBatchKMeans": [[43, "compare-birch-and-minibatchkmeans"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[44, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "Comparing different clustering algorithms on toy datasets": [[45, "comparing-different-clustering-algorithms-on-toy-datasets"]], "K-means Clustering": [[46, "k-means-clustering"]], "Segmenting the picture of greek coins in regions": [[47, "segmenting-the-picture-of-greek-coins-in-regions"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[48, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "Generate data": [[48, "generate-data"], [68, "generate-data"], [81, "generate-data"], [195, "generate-data"], [304, "generate-data"]], "Define structure of the data": [[48, "define-structure-of-the-data"]], "Compute clustering": [[48, "compute-clustering"], [68, "compute-clustering"], [68, "id1"]], "Plot the results on an image": [[48, "plot-the-results-on-an-image"]], "Color Quantization using K-Means": [[49, "color-quantization-using-k-means"]], "Demo of DBSCAN clustering algorithm": [[50, "demo-of-dbscan-clustering-algorithm"]], "Compute DBSCAN": [[50, "compute-dbscan"]], "Online learning of a dictionary of parts of faces": [[51, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Learn the dictionary of images": [[51, "learn-the-dictionary-of-images"]], "Plot the results": [[51, "plot-the-results"], [83, "plot-the-results"], [136, "plot-the-results"], [166, "plot-the-results"]], "Feature agglomeration": [[52, "feature-agglomeration"], [1005, "feature-agglomeration"], [1023, "feature-agglomeration"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[53, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Vector Quantization Example": [[54, "vector-quantization-example"]], "Original image": [[54, "original-image"]], "Compression via vector quantization": [[54, "compression-via-vector-quantization"]], "Encoding strategy": [[54, "encoding-strategy"]], "Memory footprint": [[54, "memory-footprint"]], "Feature agglomeration vs. univariate selection": [[55, "feature-agglomeration-vs-univariate-selection"]], "Demo of HDBSCAN clustering algorithm": [[56, "demo-of-hdbscan-clustering-algorithm"]], "Scale Invariance": [[56, "scale-invariance"]], "Multi-Scale Clustering": [[56, "multi-scale-clustering"]], "Hyperparameter Robustness": [[56, "hyperparameter-robustness"]], "min_cluster_size": [[56, "min-cluster-size"]], "min_samples": [[56, "min-samples"]], "dbscan_clustering": [[56, "dbscan-clustering"]], "Inductive Clustering": [[57, "inductive-clustering"]], "Demonstration of k-means assumptions": [[58, "demonstration-of-k-means-assumptions"]], "Fit models and plot results": [[58, "fit-models-and-plot-results"]], "Possible solutions": [[58, "possible-solutions"]], "Final remarks": [[58, "final-remarks"]], "A demo of K-Means clustering on the handwritten digits data": [[59, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "Load the dataset": [[59, "load-the-dataset"]], "Define our evaluation benchmark": [[59, "define-our-evaluation-benchmark"]], "Run the benchmark": [[59, "run-the-benchmark"]], "Visualize the results on PCA-reduced data": [[59, "visualize-the-results-on-pca-reduced-data"]], "An example of K-Means++ initialization": [[60, "an-example-of-k-means-initialization"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[61, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Empirical evaluation of the impact of k-means initialization": [[62, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Comparing different hierarchical linkage methods on toy datasets": [[63, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "A demo of the mean-shift clustering algorithm": [[64, "a-demo-of-the-mean-shift-clustering-algorithm"]], "Compute clustering with MeanShift": [[64, "compute-clustering-with-meanshift"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[65, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Generate the data": [[65, "generate-the-data"], [67, "generate-the-data"], [83, "generate-the-data"]], "Compute clustering with KMeans": [[65, "compute-clustering-with-kmeans"]], "Compute clustering with MiniBatchKMeans": [[65, "compute-clustering-with-minibatchkmeans"]], "Establishing parity between clusters": [[65, "establishing-parity-between-clusters"]], "Plotting the results": [[65, "plotting-the-results"], [114, "plotting-the-results"]], "Demo of OPTICS clustering algorithm": [[66, "demo-of-optics-clustering-algorithm"]], "Spectral clustering for image segmentation": [[67, "spectral-clustering-for-image-segmentation"]], "Plotting four circles": [[67, "plotting-four-circles"]], "Plotting two circles": [[67, "plotting-two-circles"]], "Hierarchical clustering: structured vs unstructured ward": [[68, "hierarchical-clustering-structured-vs-unstructured-ward"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[68, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Pipelines and composite estimators": [[70, "pipelines-and-composite-estimators"], [168, "pipelines-and-composite-estimators"], [409, "pipelines-and-composite-estimators"]], "Column Transformer with Heterogeneous Data Sources": [[71, "column-transformer-with-heterogeneous-data-sources"]], "20 newsgroups dataset": [[71, "newsgroups-dataset"]], "Creating transformers": [[71, "creating-transformers"]], "Classification pipeline": [[71, "classification-pipeline"]], "Column Transformer with Mixed Types": [[72, "column-transformer-with-mixed-types"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[73, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Illustration of Pipeline and GridSearchCV": [[73, "illustration-of-pipeline-and-gridsearchcv"]], "Caching transformers within a Pipeline": [[73, "caching-transformers-within-a-pipeline"]], "Pipelining: chaining a PCA and a logistic regression": [[74, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "Concatenating multiple feature extraction methods": [[75, "concatenating-multiple-feature-extraction-methods"]], "Effect of transforming the targets in regression model": [[76, "effect-of-transforming-the-targets-in-regression-model"]], "Synthetic example": [[76, "synthetic-example"]], "Real-world data set": [[76, "real-world-data-set"]], "Covariance estimation": [[78, "covariance-estimation"], [168, "covariance-estimation"], [410, "covariance-estimation"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[79, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Compute the likelihood on test data": [[79, "compute-the-likelihood-on-test-data"]], "Compare different approaches to setting the regularization parameter": [[79, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Ledoit-Wolf vs OAS estimation": [[80, "ledoit-wolf-vs-oas-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[81, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "References:": [[81, null], [113, null], [173, null], [267, null], [268, null], [375, null], [376, null], [405, null], [405, null], [405, null], [406, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [410, null], [410, null], [410, null], [410, null], [412, null], [412, null], [413, null], [413, null], [413, null], [413, null], [413, null], [413, null], [413, null], [413, null], [416, null], [416, null], [977, null], [977, null], [980, null], [981, null], [982, null], [984, null], [984, null], [984, null], [984, null], [984, null], [984, null], [984, null], [985, null], [985, null], [985, null], [985, null], [985, null], [985, null], [985, null], [985, null], [986, null], [986, null], [988, null], [988, null], [988, null], [988, null], [988, null], [988, null], [988, null], [988, null], [989, null], [989, null], [989, null], [991, null], [991, null], [991, null], [992, null], [993, null], [994, null], [994, null], [994, null], [994, null], [996, null], [998, null], [998, null], [1000, null], [1000, null], [1000, null], [1002, null], [1002, null], [1003, null]], "Comparison of results": [[81, "comparison-of-results"]], "Robust vs Empirical covariance estimate": [[82, "robust-vs-empirical-covariance-estimate"]], "Minimum Covariance Determinant Estimator": [[82, "minimum-covariance-determinant-estimator"]], "Evaluation": [[82, "evaluation"], [304, "evaluation"]], "Sparse inverse covariance estimation": [[83, "sparse-inverse-covariance-estimation"]], "Estimate the covariance": [[83, "estimate-the-covariance"]], "Cross decomposition": [[85, "cross-decomposition"], [168, "cross-decomposition"], [411, "cross-decomposition"]], "Compare cross decomposition methods": [[86, "compare-cross-decomposition-methods"]], "Dataset based latent variables model": [[86, "dataset-based-latent-variables-model"]], "Canonical (symmetric) PLS": [[86, "canonical-symmetric-pls"]], "Transform data": [[86, "transform-data"]], "Scatter plot of scores": [[86, "scatter-plot-of-scores"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[86, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[86, "pls-regression-with-univariate-response-a-k-a-pls1"]], "CCA (PLS mode B with symmetric deflation)": [[86, "cca-pls-mode-b-with-symmetric-deflation"]], "Principal Component Regression vs Partial Least Squares Regression": [[87, "principal-component-regression-vs-partial-least-squares-regression"]], "The data": [[87, "the-data"]], "Projection on one component and predictive power": [[87, "projection-on-one-component-and-predictive-power"]], "Dataset examples": [[89, "dataset-examples"], [168, "dataset-examples"]], "The Digit Dataset": [[90, "the-digit-dataset"]], "The Iris Dataset": [[91, "the-iris-dataset"]], "Loading the iris dataset": [[91, "loading-the-iris-dataset"]], "Scatter Plot of the Iris dataset": [[91, "scatter-plot-of-the-iris-dataset"]], "Plot a PCA representation": [[91, "plot-a-pca-representation"]], "Plot randomly generated classification dataset": [[92, "plot-randomly-generated-classification-dataset"]], "Plot randomly generated multilabel dataset": [[93, "plot-randomly-generated-multilabel-dataset"]], "Decomposition": [[95, "decomposition"], [96, "decomposition"], [168, "decomposition"]], "Faces dataset decompositions": [[96, "faces-dataset-decompositions"]], "Dataset preparation": [[96, "dataset-preparation"], [222, "dataset-preparation"]], "Eigenfaces - PCA using randomized SVD": [[96, "eigenfaces-pca-using-randomized-svd"]], "Non-negative components - NMF": [[96, "non-negative-components-nmf"]], "Independent components - FastICA": [[96, "independent-components-fastica"]], "Sparse components - MiniBatchSparsePCA": [[96, "sparse-components-minibatchsparsepca"]], "Dictionary learning": [[96, "dictionary-learning"]], "Cluster centers - MiniBatchKMeans": [[96, "cluster-centers-minibatchkmeans"]], "Factor Analysis components - FA": [[96, "factor-analysis-components-fa"]], "Decomposition: Dictionary learning": [[96, "decomposition-dictionary-learning"]], "Dictionary learning - positive dictionary": [[96, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive code": [[96, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary & code": [[96, "dictionary-learning-positive-dictionary-code"]], "Blind source separation using FastICA": [[97, "blind-source-separation-using-fastica"]], "Fit ICA and PCA models": [[97, "fit-ica-and-pca-models"]], "FastICA on 2D point clouds": [[98, "fastica-on-2d-point-clouds"]], "Image denoising using dictionary learning": [[99, "image-denoising-using-dictionary-learning"]], "Generate distorted image": [[99, "generate-distorted-image"]], "Display the distorted image": [[99, "display-the-distorted-image"]], "Extract reference patches": [[99, "extract-reference-patches"]], "Learn the dictionary from reference patches": [[99, "learn-the-dictionary-from-reference-patches"]], "Extract noisy patches and reconstruct them using the dictionary": [[99, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Incremental PCA": [[100, "incremental-pca"], [413, "incremental-pca"]], "Kernel PCA": [[101, "kernel-pca"]], "Projecting data: PCA vs. KernelPCA": [[101, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[101, "projecting-into-the-original-feature-space"]], "Principal components analysis (PCA)": [[102, "principal-components-analysis-pca"]], "Create the data": [[102, "create-the-data"], [104, "create-the-data"]], "Plot the figures": [[102, "plot-the-figures"]], "PCA example with Iris Data-set": [[103, "pca-example-with-iris-data-set"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[104, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Fit the models": [[104, "fit-the-models"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[105, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Sparse coding with a precomputed dictionary": [[106, "sparse-coding-with-a-precomputed-dictionary"], [413, "sparse-coding-with-a-precomputed-dictionary"]], "Factor Analysis (with rotation) to visualize patterns": [[107, "factor-analysis-with-rotation-to-visualize-patterns"]], "Developing Estimators": [[109, "developing-estimators"], [168, "developing-estimators"]], "__sklearn_is_fitted__ as Developer API": [[111, "sklearn-is-fitted-as-developer-api"]], "An example custom estimator implementing a simple classifier": [[111, "an-example-custom-estimator-implementing-a-simple-classifier"]], "Ensemble methods": [[112, "ensemble-methods"], [168, "ensemble-methods"]], "Multi-class AdaBoosted Decision Trees": [[113, "multi-class-adaboosted-decision-trees"]], "Creating the dataset": [[113, "creating-the-dataset"]], "Training the AdaBoostClassifier": [[113, "training-the-adaboostclassifier"]], "Analysis": [[113, "analysis"]], "Convergence of the AdaBoostClassifier": [[113, "convergence-of-the-adaboostclassifier"]], "Errors and weights of the Weak Learners": [[113, "errors-and-weights-of-the-weak-learners"]], "Decision Tree Regression with AdaBoost": [[114, "decision-tree-regression-with-adaboost"]], "Preparing the data": [[114, "preparing-the-data"], [177, "preparing-the-data"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[114, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Two-class AdaBoost": [[115, "two-class-adaboost"]], "Single estimator versus bagging: bias-variance decomposition": [[116, "single-estimator-versus-bagging-bias-variance-decomposition"]], "OOB Errors for Random Forests": [[117, "oob-errors-for-random-forests"]], "Feature transformations with ensembles of trees": [[118, "feature-transformations-with-ensembles-of-trees"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[119, "comparing-random-forests-and-histogram-gradient-boosting-models"]], "Load dataset": [[119, "load-dataset"]], "Compute score and computation times": [[119, "compute-score-and-computation-times"]], "Feature importances with a forest of trees": [[120, "feature-importances-with-a-forest-of-trees"]], "Data generation and model fitting": [[120, "data-generation-and-model-fitting"]], "Feature importance based on mean decrease in impurity": [[120, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on feature permutation": [[120, "feature-importance-based-on-feature-permutation"]], "Pixel importances with a parallel forest of trees": [[121, "pixel-importances-with-a-parallel-forest-of-trees"]], "Loading the data and model fitting": [[121, "loading-the-data-and-model-fitting"]], "Feature importance based on mean decrease in impurity (MDI)": [[121, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[122, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Categorical Feature Support in Gradient Boosting": [[123, "categorical-feature-support-in-gradient-boosting"]], "Load Ames Housing dataset": [[123, "load-ames-housing-dataset"]], "Gradient boosting estimator with dropped categorical features": [[123, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with one-hot encoding": [[123, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[123, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient boosting estimator with native categorical support": [[123, "gradient-boosting-estimator-with-native-categorical-support"]], "Model comparison": [[123, "model-comparison"]], "Limiting the number of splits": [[123, "limiting-the-number-of-splits"]], "Early stopping in Gradient Boosting": [[124, "early-stopping-in-gradient-boosting"]], "Compare scores with and without early stopping": [[124, "compare-scores-with-and-without-early-stopping"]], "Compare fit times with and without early stopping": [[124, "compare-fit-times-with-and-without-early-stopping"]], "Gradient Boosting Out-of-Bag estimates": [[125, "gradient-boosting-out-of-bag-estimates"]], "Prediction Intervals for Gradient Boosting Regression": [[126, "prediction-intervals-for-gradient-boosting-regression"]], "Fitting non-linear quantile and least squares regressors": [[126, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Analysis of the error metrics": [[126, "analysis-of-the-error-metrics"]], "Calibration of the confidence interval": [[126, "calibration-of-the-confidence-interval"]], "Tuning the hyper-parameters of the quantile regressors": [[126, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Gradient Boosting regression": [[127, "gradient-boosting-regression"]], "Data preprocessing": [[127, "data-preprocessing"]], "Fit regression model": [[127, "fit-regression-model"], [297, "fit-regression-model"], [346, "fit-regression-model"]], "Plot training deviance": [[127, "plot-training-deviance"]], "Plot feature importance": [[127, "plot-feature-importance"]], "Gradient Boosting regularization": [[128, "gradient-boosting-regularization"]], "IsolationForest example": [[129, "isolationforest-example"]], "Training of the model": [[129, "training-of-the-model"]], "Plot discrete decision boundary": [[129, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[129, "plot-path-length-decision-boundary"]], "Monotonic Constraints": [[130, "monotonic-constraints"], [415, "monotonic-constraints"]], "Using feature names to specify monotonic constraints": [[130, "using-feature-names-to-specify-monotonic-constraints"]], "Hashing feature transformation using Totally Random Trees": [[131, "hashing-feature-transformation-using-totally-random-trees"]], "Comparing random forests and the multi-output meta estimator": [[132, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Combine predictors using stacking": [[133, "combine-predictors-using-stacking"]], "Download the dataset": [[133, "download-the-dataset"]], "Make pipeline to preprocess the data": [[133, "make-pipeline-to-preprocess-the-data"]], "Stack of predictors on a single data set": [[133, "stack-of-predictors-on-a-single-data-set"]], "Measure and plot the results": [[133, "measure-and-plot-the-results"]], "Plot the decision boundaries of a VotingClassifier": [[134, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Plot class probabilities calculated by the VotingClassifier": [[135, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Plot individual and voting regression predictions": [[136, "plot-individual-and-voting-regression-predictions"]], "Training classifiers": [[136, "training-classifiers"]], "Making predictions": [[136, "making-predictions"]], "Tutorial exercises": [[138, "tutorial-exercises"], [168, "tutorial-exercises"]], "Cross-validation on diabetes Dataset Exercise": [[139, "cross-validation-on-diabetes-dataset-exercise"]], "Load dataset and apply GridSearchCV": [[139, "load-dataset-and-apply-gridsearchcv"]], "Plot error lines showing +/- std. errors of the scores": [[139, "plot-error-lines-showing-std-errors-of-the-scores"]], "Bonus: how much can you trust the selection of alpha?": [[139, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Cross-validation on Digits Dataset Exercise": [[140, "cross-validation-on-digits-dataset-exercise"]], "Digits Classification Exercise": [[141, "digits-classification-exercise"]], "SVM Exercise": [[142, "svm-exercise"]], "Feature Selection": [[144, "feature-selection"], [168, "feature-selection"]], "Comparison of F-test and mutual information": [[145, "comparison-of-f-test-and-mutual-information"]], "Univariate Feature Selection": [[146, "univariate-feature-selection"]], "Univariate feature selection": [[146, "id1"], [417, "univariate-feature-selection"]], "Compare with SVMs": [[146, "compare-with-svms"]], "Pipeline ANOVA SVM": [[147, "pipeline-anova-svm"]], "Recursive feature elimination": [[148, "recursive-feature-elimination"], [417, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[149, "recursive-feature-elimination-with-cross-validation"]], "Model training and selection": [[149, "model-training-and-selection"], [252, "model-training-and-selection"]], "Plot number of features VS. cross-validation scores": [[149, "plot-number-of-features-vs-cross-validation-scores"]], "Model-based and sequential feature selection": [[150, "model-based-and-sequential-feature-selection"]], "Loading the data": [[150, "loading-the-data"]], "Feature importance from coefficients": [[150, "feature-importance-from-coefficients"]], "Selecting features based on importance": [[150, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[150, "selecting-features-with-sequential-feature-selection"]], "Using negative tolerance values": [[150, "using-negative-tolerance-values"]], "Gaussian Process for Machine Learning": [[152, "gaussian-process-for-machine-learning"], [168, "gaussian-process-for-machine-learning"]], "Comparison of kernel ridge and Gaussian process regression": [[153, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Generating a dataset": [[153, "generating-a-dataset"]], "Limitations of a simple linear model": [[153, "limitations-of-a-simple-linear-model"]], "Kernel methods: kernel ridge and Gaussian process": [[153, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel ridge": [[153, "kernel-ridge"]], "Gaussian process regression": [[153, "gaussian-process-regression"]], "Final conclusion": [[153, "final-conclusion"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[154, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Gaussian process classification (GPC) on iris dataset": [[155, "gaussian-process-classification-gpc-on-iris-dataset"], [418, "gaussian-process-classification-gpc-on-iris-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[156, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[157, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)": [[158, "forecasting-of-co2-level-on-mona-loa-dataset-using-gaussian-process-regression-gpr"]], "Build the dataset": [[158, "build-the-dataset"]], "Design the proper kernel": [[158, "design-the-proper-kernel"]], "Model fitting and extrapolation": [[158, "model-fitting-and-extrapolation"]], "Interpretation of kernel hyperparameters": [[158, "interpretation-of-kernel-hyperparameters"]], "Ability of Gaussian process regression (GPR) to estimate data noise-level": [[159, "ability-of-gaussian-process-regression-gpr-to-estimate-data-noise-level"]], "Optimisation of kernel hyperparameters in GPR": [[159, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Gaussian Processes regression: basic introductory example": [[160, "gaussian-processes-regression-basic-introductory-example"]], "Dataset generation": [[160, "dataset-generation"], [203, "dataset-generation"]], "Example with noise-free target": [[160, "example-with-noise-free-target"]], "Example with noisy targets": [[160, "example-with-noisy-targets"]], "Gaussian processes on discrete data structures": [[161, "gaussian-processes-on-discrete-data-structures"]], "Sequence similarity matrix under the kernel": [[161, "sequence-similarity-matrix-under-the-kernel"]], "Regression": [[161, "regression"], [415, "regression"], [415, "id9"], [984, "regression"], [992, "regression"], [1002, "regression"], [1003, "regression"], [1004, "regression"]], "Illustration of prior and posterior Gaussian process for different kernels": [[162, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Helper function": [[162, "helper-function"]], "Dataset and Gaussian process generation": [[162, "dataset-and-gaussian-process-generation"]], "Kernel cookbook": [[162, "kernel-cookbook"]], "Radial Basis Function kernel": [[162, "radial-basis-function-kernel"]], "Rational Quadradtic kernel": [[162, "rational-quadradtic-kernel"]], "Exp-Sine-Squared kernel": [[162, "exp-sine-squared-kernel"], [418, "exp-sine-squared-kernel"]], "Dot-product kernel": [[162, "dot-product-kernel"]], "Mat\u00e9rn kernel": [[162, "matern-kernel"], [418, "matern-kernel"]], "Missing Value Imputation": [[164, "missing-value-imputation"], [168, "missing-value-imputation"]], "Imputing missing values with variants of IterativeImputer": [[165, "imputing-missing-values-with-variants-of-iterativeimputer"]], "Imputing missing values before building an estimator": [[166, "imputing-missing-values-before-building-an-estimator"]], "Download the data and make missing values sets": [[166, "download-the-data-and-make-missing-values-sets"]], "Impute the missing data and score": [[166, "impute-the-missing-data-and-score"]], "Missing information": [[166, "missing-information"]], "Estimate the score": [[166, "estimate-the-score"]], "Replace missing values by 0": [[166, "replace-missing-values-by-0"]], "kNN-imputation of the missing values": [[166, "knn-imputation-of-the-missing-values"]], "Impute missing values with mean": [[166, "impute-missing-values-with-mean"]], "Iterative imputation of the missing values": [[166, "iterative-imputation-of-the-missing-values"]], "Examples": [[168, "examples"], [369, "examples"], [376, null], [412, null], [412, null], [417, null], [417, null], [418, null], [984, null], [984, null], [984, null], [1001, null], [1001, null], [1005, null], [1005, null], [1005, null], [1031, "examples"]], "Release Highlights": [[168, "release-highlights"], [316, "release-highlights"]], "Decision Trees": [[168, "decision-trees"], [356, "decision-trees"], [1004, "decision-trees"]], "Gaussian Mixture Models": [[168, "gaussian-mixture-models"], [246, "gaussian-mixture-models"]], "Generalized Linear Models": [[168, "generalized-linear-models"], [179, "generalized-linear-models"], [984, "generalized-linear-models"]], "Inspection": [[168, "inspection"], [169, "inspection"], [397, "inspection"]], "Kernel Approximation": [[168, "kernel-approximation"], [176, "kernel-approximation"], [980, "kernel-approximation"]], "Manifold learning": [[168, "manifold-learning"], [221, "manifold-learning"], [985, "manifold-learning"]], "Miscellaneous": [[168, "miscellaneous"], [229, "miscellaneous"], [407, "miscellaneous"], [1039, "miscellaneous"], [1039, "id40"], [1040, "miscellaneous"], [1041, "miscellaneous"], [1042, "miscellaneous"], [1042, "id13"], [1043, "miscellaneous"], [1044, "miscellaneous"], [1047, "miscellaneous"]], "Model Selection": [[168, "model-selection"], [255, "model-selection"]], "Multiclass methods": [[168, "multiclass-methods"], [279, "multiclass-methods"]], "Multioutput methods": [[168, "multioutput-methods"], [282, "multioutput-methods"]], "Nearest Neighbors": [[168, "nearest-neighbors"], [286, "nearest-neighbors"], [991, "nearest-neighbors"]], "Neural Networks": [[168, "neural-networks"], [300, "neural-networks"]], "Preprocessing": [[168, "preprocessing"], [306, "preprocessing"]], "Semi Supervised Classification": [[168, "semi-supervised-classification"], [325, "semi-supervised-classification"]], "Support Vector Machines": [[168, "support-vector-machines"], [334, "support-vector-machines"], [1003, "support-vector-machines"]], "Working with text documents": [[168, "working-with-text-documents"], [351, "working-with-text-documents"]], "Failure of Machine Learning to infer causal effects": [[170, "failure-of-machine-learning-to-infer-causal-effects"]], "The dataset: simulated hourly wages": [[170, "the-dataset-simulated-hourly-wages"]], "Description of the simulated data": [[170, "description-of-the-simulated-data"]], "Income prediction with fully observed variables": [[170, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[170, "income-prediction-with-partial-observations"]], "Lessons learned": [[170, "lessons-learned"], [171, "lessons-learned"]], "Common pitfalls in the interpretation of coefficients of linear models": [[171, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "The dataset: wages": [[171, "the-dataset-wages"]], "The machine-learning pipeline": [[171, "the-machine-learning-pipeline"]], "Processing the dataset": [[171, "processing-the-dataset"]], "Interpreting coefficients: scale matters": [[171, "interpreting-coefficients-scale-matters"]], "Checking the variability of the coefficients": [[171, "checking-the-variability-of-the-coefficients"]], "The problem of correlated variables": [[171, "the-problem-of-correlated-variables"]], "Preprocessing numerical variables": [[171, "preprocessing-numerical-variables"]], "Linear models with regularization": [[171, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[171, "linear-models-with-sparse-coefficients"]], "Wrong causal interpretation": [[171, "wrong-causal-interpretation"]], "Partial Dependence and Individual Conditional Expectation Plots": [[172, "partial-dependence-and-individual-conditional-expectation-plots"]], "Bike sharing dataset preprocessing": [[172, "bike-sharing-dataset-preprocessing"]], "Preprocessor for machine-learning models": [[172, "preprocessor-for-machine-learning-models"]], "Preprocessor for the neural network model": [[172, "preprocessor-for-the-neural-network-model"]], "Preprocessor for the gradient boosting model": [[172, "preprocessor-for-the-gradient-boosting-model"]], "1-way partial dependence with different models": [[172, "way-partial-dependence-with-different-models"]], "Multi-layer perceptron": [[172, "multi-layer-perceptron"]], "Gradient boosting": [[172, "gradient-boosting"]], "Analysis of the plots": [[172, "analysis-of-the-plots"]], "ICE vs. PDP": [[172, "ice-vs-pdp"]], "2D interaction plots": [[172, "d-interaction-plots"]], "3D representation": [[172, "d-representation"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[173, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Data Loading and Feature Engineering": [[173, "data-loading-and-feature-engineering"]], "Accuracy of the Model": [[173, "accuracy-of-the-model"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[173, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Permutation Importance with Multicollinear or Correlated Features": [[174, "permutation-importance-with-multicollinear-or-correlated-features"]], "Random Forest Feature Importance on Breast Cancer Data": [[174, "random-forest-feature-importance-on-breast-cancer-data"]], "Handling Multicollinear Features": [[174, "handling-multicollinear-features"]], "Scalable learning with polynomial kernel approximation": [[177, "scalable-learning-with-polynomial-kernel-approximation"]], "Partitioning the data": [[177, "partitioning-the-data"]], "Feature normalization": [[177, "feature-normalization"]], "Establishing a baseline model": [[177, "establishing-a-baseline-model"]], "Establishing the kernel approximation model": [[177, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[177, "establishing-the-kernelized-svm-model"]], "Comparing the results": [[177, "comparing-the-results"]], "Comparing Linear Bayesian Regressors": [[180, "comparing-linear-bayesian-regressors"]], "Models robustness to recover the ground truth weights": [[180, "models-robustness-to-recover-the-ground-truth-weights"]], "Fit the regressors": [[180, "fit-the-regressors"], [180, "id2"]], "Plot the true and estimated coefficients": [[180, "plot-the-true-and-estimated-coefficients"]], "Plot the marginal log-likelihood": [[180, "plot-the-marginal-log-likelihood"]], "Bayesian regressions with polynomial feature expansion": [[180, "bayesian-regressions-with-polynomial-feature-expansion"]], "Plotting polynomial regressions with std errors of the scores": [[180, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Curve Fitting with Bayesian Ridge Regression": [[181, "curve-fitting-with-bayesian-ridge-regression"]], "Generate sinusoidal data with noise": [[181, "generate-sinusoidal-data-with-noise"]], "Fit by cubic polynomial": [[181, "fit-by-cubic-polynomial"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[181, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[182, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[183, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Logistic Regression 3-class Classifier": [[184, "logistic-regression-3-class-classifier"]], "L1-based models for Sparse Signals": [[185, "l1-based-models-for-sparse-signals"]], "Lasso": [[185, "lasso"], [984, "lasso"]], "Automatic Relevance Determination (ARD)": [[185, "automatic-relevance-determination-ard"]], "ElasticNet": [[185, "elasticnet"]], "Plot and analysis of the results": [[185, "plot-and-analysis-of-the-results"]], "Conclusions": [[185, "conclusions"]], "Lasso and Elastic Net": [[186, "lasso-and-elastic-net"]], "Lasso on dense and sparse data": [[187, "lasso-on-dense-and-sparse-data"]], "Comparing the two Lasso implementations on Dense data": [[187, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[187, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Lasso path using LARS": [[188, "lasso-path-using-lars"]], "Lasso model selection via information criteria": [[189, "lasso-model-selection-via-information-criteria"]], "Lasso model selection: AIC-BIC / cross-validation": [[190, "lasso-model-selection-aic-bic-cross-validation"]], "Selecting Lasso via an information criterion": [[190, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[190, "selecting-lasso-via-cross-validation"]], "Lasso via coordinate descent": [[190, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[190, "lasso-via-least-angle-regression"]], "Summary of cross-validation approach": [[190, "summary-of-cross-validation-approach"]], "Logistic function": [[191, "logistic-function"]], "L1 Penalty and Sparsity in Logistic Regression": [[192, "l1-penalty-and-sparsity-in-logistic-regression"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[193, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Regularization path of L1- Logistic Regression": [[194, "regularization-path-of-l1-logistic-regression"]], "Load data": [[194, "load-data"]], "Compute regularization path": [[194, "compute-regularization-path"]], "Plot regularization path": [[194, "plot-regularization-path"]], "Joint feature selection with multi-task Lasso": [[195, "joint-feature-selection-with-multi-task-lasso"]], "Fit models": [[195, "fit-models"], [283, "fit-models"]], "Plot support and time series": [[195, "plot-support-and-time-series"]], "Non-negative least squares": [[196, "non-negative-least-squares"]], "Linear Regression Example": [[197, "linear-regression-example"]], "Sparsity Example: Fitting only features 1  and 2": [[198, "sparsity-example-fitting-only-features-1-and-2"]], "Ordinary Least Squares and Ridge Regression Variance": [[199, "ordinary-least-squares-and-ridge-regression-variance"]], "Orthogonal Matching Pursuit": [[200, "orthogonal-matching-pursuit"]], "Poisson regression and non-normal loss": [[201, "poisson-regression-and-non-normal-loss"]], "The French Motor Third-Party Liability Claims dataset": [[201, "the-french-motor-third-party-liability-claims-dataset"]], "A constant prediction baseline": [[201, "a-constant-prediction-baseline"]], "(Generalized) linear models": [[201, "generalized-linear-models"]], "Gradient Boosting Regression Trees for Poisson regression": [[201, "gradient-boosting-regression-trees-for-poisson-regression"]], "Evaluation of the calibration of predictions": [[201, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[201, "evaluation-of-the-ranking-power"]], "Main takeaways": [[201, "main-takeaways"]], "Polynomial and Spline interpolation": [[202, "polynomial-and-spline-interpolation"]], "Periodic Splines": [[202, "periodic-splines"]], "Quantile regression": [[203, "quantile-regression"]], "Fitting a QuantileRegressor": [[203, "fitting-a-quantileregressor"]], "Comparing QuantileRegressor and LinearRegression": [[203, "comparing-quantileregressor-and-linearregression"]], "Robust linear model estimation using RANSAC": [[204, "robust-linear-model-estimation-using-ransac"]], "Ridge coefficients as a function of the L2 Regularization": [[205, "ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Purpose of this example": [[205, "purpose-of-this-example"]], "Creating a non-noisy data set": [[205, "creating-a-non-noisy-data-set"]], "Training the Ridge Regressor": [[205, "training-the-ridge-regressor"]], "Plotting trained Coefficients and Mean Squared Errors": [[205, "plotting-trained-coefficients-and-mean-squared-errors"]], "Interpreting the plots": [[205, "interpreting-the-plots"]], "Plot Ridge coefficients as a function of the regularization": [[206, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Compute paths": [[206, "compute-paths"]], "Display results": [[206, "display-results"]], "Robust linear estimator fitting": [[207, "robust-linear-estimator-fitting"]], "Comparing various online solvers": [[208, "comparing-various-online-solvers"]], "Early stopping of Stochastic Gradient Descent": [[209, "early-stopping-of-stochastic-gradient-descent"]], "Plot multi-class SGD on the iris dataset": [[210, "plot-multi-class-sgd-on-the-iris-dataset"]], "SGD: convex loss functions": [[211, "sgd-convex-loss-functions"]], "SGD: Penalties": [[212, "sgd-penalties"]], "SGD: Maximum margin separating hyperplane": [[213, "sgd-maximum-margin-separating-hyperplane"]], "SGD: Weighted samples": [[214, "sgd-weighted-samples"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[215, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "Multiclass sparse logistic regression on 20newgroups": [[216, "multiclass-sparse-logistic-regression-on-20newgroups"]], "MNIST classification using multinomial logistic + L1": [[217, "mnist-classification-using-multinomial-logistic-l1"]], "Theil-Sen Regression": [[218, "theil-sen-regression"]], "Outliers only in the y direction": [[218, "outliers-only-in-the-y-direction"]], "Outliers in the X direction": [[218, "outliers-in-the-x-direction"]], "Tweedie regression on insurance claims": [[219, "tweedie-regression-on-insurance-claims"]], "Loading datasets, basic feature extraction and target definitions": [[219, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Frequency model \u2013 Poisson distribution": [[219, "frequency-model-poisson-distribution"]], "Severity Model -  Gamma distribution": [[219, "severity-model-gamma-distribution"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[219, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Comparison of Manifold Learning methods": [[222, "comparison-of-manifold-learning-methods"]], "Define algorithms for the manifold learning": [[222, "define-algorithms-for-the-manifold-learning"]], "Locally Linear Embeddings": [[222, "locally-linear-embeddings"]], "Isomap Embedding": [[222, "isomap-embedding"]], "Multidimensional scaling": [[222, "multidimensional-scaling"]], "Spectral embedding for non-linear dimensionality reduction": [[222, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "T-distributed Stochastic Neighbor Embedding": [[222, "t-distributed-stochastic-neighbor-embedding"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[223, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Load digits dataset": [[223, "load-digits-dataset"]], "Helper function to plot embedding": [[223, "helper-function-to-plot-embedding"]], "Embedding techniques comparison": [[223, "embedding-techniques-comparison"]], "Manifold Learning methods on a severed sphere": [[224, "manifold-learning-methods-on-a-severed-sphere"]], "Multi-dimensional scaling": [[225, "multi-dimensional-scaling"]], "Swiss Roll And Swiss-Hole Reduction": [[226, "swiss-roll-and-swiss-hole-reduction"]], "Swiss Roll": [[226, "swiss-roll"]], "Swiss-Hole": [[226, "swiss-hole"]], "t-SNE: The effect of various perplexity values on the shape": [[227, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[230, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Visualizations with Display Objects": [[231, "visualizations-with-display-objects"]], "Load Data and train model": [[231, "load-data-and-train-model"]], "Create ConfusionMatrixDisplay": [[231, "create-confusionmatrixdisplay"]], "Create RocCurveDisplay": [[231, "create-roccurvedisplay"]], "Create PrecisionRecallDisplay": [[231, "create-precisionrecalldisplay"]], "Combining the display objects into a single plot": [[231, "combining-the-display-objects-into-a-single-plot"]], "Displaying estimators and complex pipelines": [[232, "displaying-estimators-and-complex-pipelines"]], "Compact text representation": [[232, "compact-text-representation"]], "Rich HTML representation": [[232, "rich-html-representation"]], "Isotonic Regression": [[233, "isotonic-regression"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[234, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "Theoretical bounds": [[234, "theoretical-bounds"]], "Empirical validation": [[234, "empirical-validation"]], "Remarks": [[234, "remarks"]], "Explicit feature map approximation for RBF kernels": [[235, "explicit-feature-map-approximation-for-rbf-kernels"]], "Python package and dataset imports, load dataset": [[235, "python-package-and-dataset-imports-load-dataset"]], "Timing and accuracy plots": [[235, "timing-and-accuracy-plots"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[235, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Comparison of kernel ridge regression and SVR": [[236, "comparison-of-kernel-ridge-regression-and-svr"]], "Construct the kernel-based regression models": [[236, "construct-the-kernel-based-regression-models"]], "Compare times of SVR and Kernel Ridge Regression": [[236, "compare-times-of-svr-and-kernel-ridge-regression"]], "Look at the results": [[236, "look-at-the-results"], [346, "look-at-the-results"]], "Visualize training and prediction times": [[236, "visualize-training-and-prediction-times"]], "Visualize the learning curves": [[236, "visualize-the-learning-curves"]], "Metadata Routing": [[237, "metadata-routing"], [323, "metadata-routing"], [395, "metadata-routing"], [399, "id1"], [1048, "metadata-routing"]], "Estimators": [[237, "estimators"], [363, "estimators"], [363, "id2"], [383, "estimators"], [404, "estimators"], [407, "estimators"]], "Router and Consumer": [[237, "router-and-consumer"]], "Simple Pipeline": [[237, "simple-pipeline"]], "Deprecation / Default Value Change": [[237, "deprecation-default-value-change"]], "Third Party Development and scikit-learn Dependency": [[237, "third-party-development-and-scikit-learn-dependency"]], "Multilabel classification": [[238, "multilabel-classification"], [989, "multilabel-classification"]], "Face completion with a multi-output estimators": [[239, "face-completion-with-a-multi-output-estimators"]], "Evaluation of outlier detection estimators": [[240, "evaluation-of-outlier-detection-estimators"]], "Dataset preprocessing and model training": [[240, "dataset-preprocessing-and-model-training"]], "KDDCup99 - SA dataset": [[240, "kddcup99-sa-dataset"]], "Forest covertypes dataset": [[240, "forest-covertypes-dataset"]], "Ames Housing dataset": [[240, "ames-housing-dataset"]], "Cardiotocography dataset": [[240, "cardiotocography-dataset"]], "Plot and interpret results": [[240, "plot-and-interpret-results"]], "Ablation study": [[240, "ablation-study"]], "Advanced Plotting With Partial Dependence": [[241, "advanced-plotting-with-partial-dependence"]], "Train models on the diabetes dataset": [[241, "train-models-on-the-diabetes-dataset"]], "Plotting partial dependence for two features": [[241, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[241, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting partial dependence for one feature": [[241, "plotting-partial-dependence-for-one-feature"]], "Displaying Pipelines": [[242, "displaying-pipelines"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[242, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[242, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[242, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[242, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[242, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "ROC Curve with Visualization API": [[243, "roc-curve-with-visualization-api"]], "Load Data and Train a SVC": [[243, "load-data-and-train-a-svc"]], "Plotting the ROC Curve": [[243, "plotting-the-roc-curve"]], "Training a Random Forest and Plotting the ROC Curve": [[243, "training-a-random-forest-and-plotting-the-roc-curve"]], "Introducing the set_output API": [[244, "introducing-the-set-output-api"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[247, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[248, "gaussian-mixture-model-ellipsoids"]], "GMM covariances": [[249, "gmm-covariances"]], "GMM Initialization Methods": [[250, "gmm-initialization-methods"]], "Density Estimation for a Gaussian mixture": [[251, "density-estimation-for-a-gaussian-mixture"]], "Gaussian Mixture Model Selection": [[252, "gaussian-mixture-model-selection"]], "Plot the BIC scores": [[252, "plot-the-bic-scores"]], "Plot the best model": [[252, "plot-the-best-model"]], "Gaussian Mixture Model Sine Curve": [[253, "gaussian-mixture-model-sine-curve"]], "Confusion matrix": [[256, "confusion-matrix"], [988, "confusion-matrix"]], "Visualizing cross-validation behavior in scikit-learn": [[257, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualize our data": [[257, "visualize-our-data"]], "Define a function to visualize cross-validation behavior": [[257, "define-a-function-to-visualize-cross-validation-behavior"]], "Visualize cross-validation indices for many CV objects": [[257, "visualize-cross-validation-indices-for-many-cv-objects"]], "Plotting Cross-Validated Predictions": [[258, "plotting-cross-validated-predictions"]], "Detection error tradeoff (DET) curve": [[259, "detection-error-tradeoff-det-curve"]], "Generate synthetic data": [[259, "generate-synthetic-data"]], "Define the classifiers": [[259, "define-the-classifiers"]], "Plot ROC and DET curves": [[259, "plot-roc-and-det-curves"]], "Custom refit strategy of a grid search with cross-validation": [[260, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "The dataset": [[260, "the-dataset"]], "Define our grid-search strategy": [[260, "define-our-grid-search-strategy"]], "Tuning hyper-parameters": [[260, "tuning-hyper-parameters"]], "Balance model complexity and cross-validated score": [[261, "balance-model-complexity-and-cross-validated-score"]], "Statistical comparison of models using grid search": [[262, "statistical-comparison-of-models-using-grid-search"]], "Comparing two models: frequentist approach": [[262, "comparing-two-models-frequentist-approach"]], "Comparing two models: Bayesian approach": [[262, "comparing-two-models-bayesian-approach"]], "Region of Practical Equivalence": [[262, "region-of-practical-equivalence"]], "Pairwise comparison of all models: frequentist approach": [[262, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise comparison of all models: Bayesian approach": [[262, "pairwise-comparison-of-all-models-bayesian-approach"]], "Take-home messages": [[262, "take-home-messages"]], "Sample pipeline for text feature extraction and evaluation": [[263, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Data loading": [[263, "data-loading"]], "Pipeline with hyperparameter tuning": [[263, "pipeline-with-hyperparameter-tuning"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[264, "plotting-learning-curves-and-checking-models-scalability"]], "Learning Curve": [[264, "learning-curve"]], "Complexity analysis": [[264, "complexity-analysis"]], "Class Likelihood Ratios to measure classification performance": [[265, "class-likelihood-ratios-to-measure-classification-performance"]], "Pre-test vs. post-test analysis": [[265, "pre-test-vs-post-test-analysis"]], "Cross-validation of likelihood ratios": [[265, "cross-validation-of-likelihood-ratios"]], "Invariance with respect to prevalence": [[265, "invariance-with-respect-to-prevalence"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[266, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Running GridSearchCV using multiple evaluation metrics": [[266, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Plotting the result": [[266, "plotting-the-result"]], "Nested versus non-nested cross-validation": [[267, "nested-versus-non-nested-cross-validation"]], "See Also:": [[267, null], [409, null]], "Test with permutations the significance of a classification score": [[268, "test-with-permutations-the-significance-of-a-classification-score"]], "Permutation test score": [[268, "permutation-test-score"], [412, "permutation-test-score"]], "Original data": [[268, "original-data"], [307, "original-data"]], "Random data": [[268, "random-data"]], "Precision-Recall": [[269, "precision-recall"]], "In binary classification settings": [[269, "in-binary-classification-settings"]], "Dataset and model": [[269, "dataset-and-model"]], "Plot the Precision-Recall curve": [[269, "plot-the-precision-recall-curve"]], "In multi-label settings": [[269, "in-multi-label-settings"]], "Create multi-label data, fit, and predict": [[269, "create-multi-label-data-fit-and-predict"]], "The average precision score in multi-label settings": [[269, "the-average-precision-score-in-multi-label-settings"]], "Plot the micro-averaged Precision-Recall curve": [[269, "plot-the-micro-averaged-precision-recall-curve"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[269, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Comparing randomized search and grid search for hyperparameter estimation": [[270, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Multiclass Receiver Operating Characteristic (ROC)": [[271, "multiclass-receiver-operating-characteristic-roc"]], "Load and prepare data": [[271, "load-and-prepare-data"], [272, "load-and-prepare-data"], [312, "load-and-prepare-data"]], "One-vs-Rest multiclass ROC": [[271, "one-vs-rest-multiclass-roc"]], "ROC curve showing a specific class": [[271, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[271, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvR macro-average": [[271, "roc-curve-using-the-ovr-macro-average"]], "Plot all OvR ROC curves together": [[271, "plot-all-ovr-roc-curves-together"]], "One-vs-One multiclass ROC": [[271, "one-vs-one-multiclass-roc"]], "ROC curve using the OvO macro-average": [[271, "roc-curve-using-the-ovo-macro-average"]], "Plot all OvO ROC curves together": [[271, "plot-all-ovo-roc-curves-together"]], "Receiver Operating Characteristic (ROC) with cross validation": [[272, "receiver-operating-characteristic-roc-with-cross-validation"]], "Classification and ROC analysis": [[272, "classification-and-roc-analysis"]], "Comparison between grid search and successive halving": [[273, "comparison-between-grid-search-and-successive-halving"]], "Successive Halving Iterations": [[274, "successive-halving-iterations"]], "Number of candidates and amount of resource at each iteration": [[274, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Train error vs Test error": [[275, "train-error-vs-test-error"]], "Compute train and test errors": [[275, "compute-train-and-test-errors"]], "Plot results functions": [[275, "plot-results-functions"]], "Underfitting vs. Overfitting": [[276, "underfitting-vs-overfitting"]], "Plotting Validation Curves": [[277, "plotting-validation-curves"]], "Overview of multiclass training meta-estimators": [[280, "overview-of-multiclass-training-meta-estimators"]], "The Yeast UCI dataset": [[280, "the-yeast-uci-dataset"]], "Strategies comparison": [[280, "strategies-comparison"]], "The importance of hyperparameters search": [[280, "the-importance-of-hyperparameters-search"]], "Multilabel classification using a classifier chain": [[283, "multilabel-classification-using-a-classifier-chain"]], "Loading a dataset": [[283, "loading-a-dataset"]], "LogisticRegression wrapped by OneVsRestClassifier": [[283, "logisticregression-wrapped-by-onevsrestclassifier"]], "Chain of binary classifiers": [[283, "chain-of-binary-classifiers"]], "Results interpretation": [[283, "results-interpretation"]], "Approximate nearest neighbors in TSNE": [[285, "approximate-nearest-neighbors-in-tsne"]], "Caching nearest neighbors": [[287, "caching-nearest-neighbors"]], "Nearest Neighbors Classification": [[288, "nearest-neighbors-classification"], [991, "nearest-neighbors-classification"]], "K-nearest neighbors classifier": [[288, "k-nearest-neighbors-classifier"]], "Decision boundary": [[288, "decision-boundary"]], "Kernel Density Estimation": [[289, "kernel-density-estimation"], [414, "kernel-density-estimation"]], "Simple 1D Kernel Density Estimation": [[290, "simple-1d-kernel-density-estimation"]], "Novelty detection with Local Outlier Factor (LOF)": [[291, "novelty-detection-with-local-outlier-factor-lof"]], "Outlier detection with Local Outlier Factor (LOF)": [[292, "outlier-detection-with-local-outlier-factor-lof"]], "Generate data with outliers": [[292, "generate-data-with-outliers"]], "Fit the model for outlier detection (default)": [[292, "fit-the-model-for-outlier-detection-default"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[293, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[294, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[295, "neighborhood-components-analysis-illustration"]], "Original points": [[295, "original-points"]], "Learning an embedding": [[295, "learning-an-embedding"]], "Nearest Centroid Classification": [[296, "nearest-centroid-classification"]], "Nearest Neighbors regression": [[297, "nearest-neighbors-regression"]], "Kernel Density Estimate of Species Distributions": [[298, "kernel-density-estimate-of-species-distributions"]], "Varying regularization in Multi-layer Perceptron": [[301, "varying-regularization-in-multi-layer-perceptron"]], "Compare Stochastic learning strategies for MLPClassifier": [[302, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "Visualization of MLP weights on MNIST": [[303, "visualization-of-mlp-weights-on-mnist"]], "Restricted Boltzmann Machine features for digit classification": [[304, "restricted-boltzmann-machine-features-for-digit-classification"]], "Models definition": [[304, "models-definition"]], "Training": [[304, "training"], [991, "training"]], "Plotting": [[304, "plotting"], [407, "plotting"], [407, "id7"], [407, "id9"]], "Compare the effect of different scalers on data with outliers": [[307, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "StandardScaler": [[307, "standardscaler"]], "MinMaxScaler": [[307, "minmaxscaler"]], "MaxAbsScaler": [[307, "maxabsscaler"]], "RobustScaler": [[307, "robustscaler"]], "PowerTransformer": [[307, "powertransformer"]], "QuantileTransformer (uniform output)": [[307, "quantiletransformer-uniform-output"]], "QuantileTransformer (Gaussian output)": [[307, "quantiletransformer-gaussian-output"]], "Normalizer": [[307, "normalizer"]], "Using KBinsDiscretizer to discretize continuous features": [[308, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Feature discretization": [[309, "feature-discretization"]], "Demonstrating the different strategies of KBinsDiscretizer": [[310, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Map data to a normal distribution": [[311, "map-data-to-a-normal-distribution"]], "Importance of Feature Scaling": [[312, "importance-of-feature-scaling"]], "Effect of rescaling on a k-neighbors models": [[312, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on a PCA dimensional reduction": [[312, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on model\u2019s performance": [[312, "effect-of-rescaling-on-model-s-performance"]], "Comparing Target Encoder with Other Encoders": [[313, "comparing-target-encoder-with-other-encoders"]], "Loading Data from OpenML": [[313, "loading-data-from-openml"]], "Training and Evaluating Pipelines with Different Encoders": [[313, "training-and-evaluating-pipelines-with-different-encoders"]], "Native Categorical Feature Support": [[313, "native-categorical-feature-support"]], "Plotting the Results": [[313, "plotting-the-results"]], "Target Encoder\u2019s Internal Cross fitting": [[314, "target-encoder-s-internal-cross-fitting"]], "Create Synthetic Dataset": [[314, "create-synthetic-dataset"]], "Training a Ridge Regressor": [[314, "training-a-ridge-regressor"]], "Release Highlights for scikit-learn 0.22": [[317, "release-highlights-for-scikit-learn-0-22"]], "New plotting API": [[317, "new-plotting-api"]], "Stacking Classifier and Regressor": [[317, "stacking-classifier-and-regressor"]], "Permutation-based feature importance": [[317, "permutation-based-feature-importance"]], "Native support for missing values for gradient boosting": [[317, "native-support-for-missing-values-for-gradient-boosting"]], "Precomputed sparse nearest neighbors graph": [[317, "precomputed-sparse-nearest-neighbors-graph"]], "KNN Based Imputation": [[317, "knn-based-imputation"]], "Tree pruning": [[317, "tree-pruning"]], "Retrieve dataframes from OpenML": [[317, "retrieve-dataframes-from-openml"]], "Checking scikit-learn compatibility of an estimator": [[317, "checking-scikit-learn-compatibility-of-an-estimator"]], "ROC AUC now supports multiclass classification": [[317, "roc-auc-now-supports-multiclass-classification"]], "Release Highlights for scikit-learn 0.23": [[318, "release-highlights-for-scikit-learn-0-23"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[318, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Rich visual representation of estimators": [[318, "rich-visual-representation-of-estimators"]], "Scalability and stability improvements to KMeans": [[318, "scalability-and-stability-improvements-to-kmeans"]], "Improvements to the histogram-based Gradient Boosting estimators": [[318, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Sample-weight support for Lasso and ElasticNet": [[318, "sample-weight-support-for-lasso-and-elasticnet"]], "Release Highlights for scikit-learn 0.24": [[319, "release-highlights-for-scikit-learn-0-24"]], "Successive Halving estimators for tuning hyper-parameters": [[319, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Native support for categorical features in HistGradientBoosting estimators": [[319, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Improved performances of HistGradientBoosting estimators": [[319, "improved-performances-of-histgradientboosting-estimators"]], "New self-training meta-estimator": [[319, "new-self-training-meta-estimator"]], "New SequentialFeatureSelector transformer": [[319, "new-sequentialfeatureselector-transformer"]], "New PolynomialCountSketch kernel approximation function": [[319, "new-polynomialcountsketch-kernel-approximation-function"]], "Individual Conditional Expectation plots": [[319, "individual-conditional-expectation-plots"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[319, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New documentation improvements": [[319, "new-documentation-improvements"], [320, "new-documentation-improvements"]], "Release Highlights for scikit-learn 1.0": [[320, "release-highlights-for-scikit-learn-1-0"]], "Keyword and positional arguments": [[320, "keyword-and-positional-arguments"]], "Spline Transformers": [[320, "spline-transformers"]], "Quantile Regressor": [[320, "quantile-regressor"]], "Feature Names Support": [[320, "feature-names-support"]], "A more flexible plotting API": [[320, "a-more-flexible-plotting-api"]], "Online One-Class SVM": [[320, "online-one-class-svm"], [1002, "online-one-class-svm"]], "Histogram-based Gradient Boosting Models are now stable": [[320, "histogram-based-gradient-boosting-models-are-now-stable"]], "Release Highlights for scikit-learn 1.1": [[321, "release-highlights-for-scikit-learn-1-1"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[321, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "get_feature_names_out Available in all Transformers": [[321, "get-feature-names-out-available-in-all-transformers"]], "Grouping infrequent categories in OneHotEncoder": [[321, "grouping-infrequent-categories-in-onehotencoder"]], "Performance improvements": [[321, "performance-improvements"]], "MiniBatchNMF: an online version of NMF": [[321, "minibatchnmf-an-online-version-of-nmf"]], "BisectingKMeans: divide and cluster": [[321, "bisectingkmeans-divide-and-cluster"]], "Release Highlights for scikit-learn 1.2": [[322, "release-highlights-for-scikit-learn-1-2"]], "Pandas output with set_output API": [[322, "pandas-output-with-set-output-api"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[322, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "New and enhanced displays": [[322, "new-and-enhanced-displays"]], "Faster parser in fetch_openml": [[322, "faster-parser-in-fetch-openml"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[322, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Improved efficiency of many estimators": [[322, "improved-efficiency-of-many-estimators"]], "Release Highlights for scikit-learn 1.3": [[323, "release-highlights-for-scikit-learn-1-3"]], "HDBSCAN: hierarchical density-based clustering": [[323, "hdbscan-hierarchical-density-based-clustering"]], "TargetEncoder: a new category encoding strategy": [[323, "targetencoder-a-new-category-encoding-strategy"]], "Missing values support in decision trees": [[323, "missing-values-support-in-decision-trees"]], "New display model_selection.ValidationCurveDisplay": [[323, "new-display-model-selection-validationcurvedisplay"]], "Gamma loss for gradient boosting": [[323, "gamma-loss-for-gradient-boosting"]], "Grouping infrequent categories in preprocessing.OrdinalEncoder": [[323, "grouping-infrequent-categories-in-preprocessing-ordinalencoder"]], "Label Propagation digits: Demonstrating performance": [[326, "label-propagation-digits-demonstrating-performance"]], "Semi-supervised learning": [[326, "semi-supervised-learning"], [1001, "semi-supervised-learning"]], "Plot the most uncertain predictions": [[326, "plot-the-most-uncertain-predictions"]], "Label Propagation digits active learning": [[327, "label-propagation-digits-active-learning"]], "Label Propagation learning a complex structure": [[328, "label-propagation-learning-a-complex-structure"]], "Effect of varying threshold for self-training": [[329, "effect-of-varying-threshold-for-self-training"]], "Semi-supervised Classification on a Text Dataset": [[330, "semi-supervised-classification-on-a-text-dataset"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[331, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "SVM with custom kernel": [[335, "svm-with-custom-kernel"]], "Plot different SVM classifiers in the iris dataset": [[336, "plot-different-svm-classifiers-in-the-iris-dataset"]], "Plot the support vectors in LinearSVC": [[337, "plot-the-support-vectors-in-linearsvc"]], "One-class SVM with non-linear kernel (RBF)": [[338, "one-class-svm-with-non-linear-kernel-rbf"]], "RBF SVM parameters": [[339, "rbf-svm-parameters"]], "Load and prepare data set": [[339, "load-and-prepare-data-set"]], "Train classifiers": [[339, "train-classifiers"]], "SVM: Maximum margin separating hyperplane": [[340, "svm-maximum-margin-separating-hyperplane"]], "SVM: Separating hyperplane for unbalanced classes": [[341, "svm-separating-hyperplane-for-unbalanced-classes"]], "SVM-Anova: SVM with univariate feature selection": [[342, "svm-anova-svm-with-univariate-feature-selection"]], "Load some data to play with": [[342, "load-some-data-to-play-with"]], "Create the pipeline": [[342, "create-the-pipeline"]], "Plot the cross-validation score as a function of percentile of features": [[342, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Plot classification boundaries with different SVM Kernels": [[343, "plot-classification-boundaries-with-different-svm-kernels"]], "Creating a dataset": [[343, "creating-a-dataset"]], "Training SVC model and plotting decision boundaries": [[343, "training-svc-model-and-plotting-decision-boundaries"]], "Linear kernel": [[343, "linear-kernel"], [986, "linear-kernel"], [1022, "linear-kernel"]], "Polynomial kernel": [[343, "polynomial-kernel"], [986, "polynomial-kernel"], [1022, "polynomial-kernel"]], "RBF kernel": [[343, "rbf-kernel"], [986, "rbf-kernel"]], "Sigmoid kernel": [[343, "sigmoid-kernel"], [986, "sigmoid-kernel"], [1022, "sigmoid-kernel"]], "SVM Margins Example": [[344, "svm-margins-example"]], "Non-linear SVM": [[345, "non-linear-svm"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[346, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Scaling the regularization parameter for SVCs": [[347, "scaling-the-regularization-parameter-for-svcs"]], "L1-penalty case": [[347, "l1-penalty-case"]], "L2-penalty case": [[347, "l2-penalty-case"]], "SVM Tie Breaking Example": [[348, "svm-tie-breaking-example"]], "SVM: Weighted samples": [[349, "svm-weighted-samples"]], "Classification of text documents using sparse features": [[352, "classification-of-text-documents-using-sparse-features"]], "Loading and vectorizing the 20 newsgroups text dataset": [[352, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Analysis of a bag-of-words document classifier": [[352, "analysis-of-a-bag-of-words-document-classifier"]], "Model without metadata stripping": [[352, "model-without-metadata-stripping"]], "Model with metadata stripping": [[352, "model-with-metadata-stripping"]], "Benchmarking classifiers": [[352, "benchmarking-classifiers"]], "Plot accuracy, training and test time of each classifier": [[352, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Clustering text documents using k-means": [[353, "clustering-text-documents-using-k-means"]], "Loading text data": [[353, "loading-text-data"]], "Quantifying the quality of clustering results": [[353, "quantifying-the-quality-of-clustering-results"]], "K-means clustering on text features": [[353, "k-means-clustering-on-text-features"]], "Feature Extraction using TfidfVectorizer": [[353, "feature-extraction-using-tfidfvectorizer"]], "Clustering sparse data with k-means": [[353, "clustering-sparse-data-with-k-means"]], "Performing dimensionality reduction using LSA": [[353, "performing-dimensionality-reduction-using-lsa"]], "Top terms per cluster": [[353, "top-terms-per-cluster"]], "HashingVectorizer": [[353, "hashingvectorizer"]], "Clustering evaluation summary": [[353, "clustering-evaluation-summary"]], "FeatureHasher and DictVectorizer Comparison": [[354, "featurehasher-and-dictvectorizer-comparison"]], "Load Data": [[354, "load-data"]], "Define preprocessing functions": [[354, "define-preprocessing-functions"]], "DictVectorizer": [[354, "dictvectorizer"]], "FeatureHasher": [[354, "featurehasher"]], "Comparison with special purpose text vectorizers": [[354, "comparison-with-special-purpose-text-vectorizers"]], "TfidfVectorizer": [[354, "tfidfvectorizer"]], "Post pruning decision trees with cost complexity pruning": [[357, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Total impurity of leaves vs effective alphas of pruned tree": [[357, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Accuracy vs alpha for training and testing sets": [[357, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Plot the decision surface of decision trees trained on the iris dataset": [[358, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Decision Tree Regression": [[359, "decision-tree-regression"]], "Multi-output Decision Tree Regression": [[360, "multi-output-decision-tree-regression"]], "Understanding the decision tree structure": [[361, "understanding-the-decision-tree-structure"]], "Train tree classifier": [[361, "train-tree-classifier"]], "Tree structure": [[361, "tree-structure"]], "What is the values array used here?": [[361, "what-is-the-values-array-used-here"]], "Decision path": [[361, "decision-path"]], "Common pitfalls and recommended practices": [[363, "common-pitfalls-and-recommended-practices"]], "Inconsistent preprocessing": [[363, "inconsistent-preprocessing"]], "Data leakage": [[363, "data-leakage"]], "Data leakage during pre-processing": [[363, "data-leakage-during-pre-processing"]], "How to avoid data leakage": [[363, "how-to-avoid-data-leakage"]], "Controlling randomness": [[363, "controlling-randomness"]], "Using None or RandomState instances, and repeated calls to fit and split": [[363, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "CV splitters": [[363, "cv-splitters"], [363, "id3"]], "Common pitfalls and subtleties": [[363, "common-pitfalls-and-subtleties"]], "General recommendations": [[363, "general-recommendations"]], "Getting reproducible results across multiple executions": [[363, "getting-reproducible-results-across-multiple-executions"]], "Robustness of cross-validation results": [[363, "robustness-of-cross-validation-results"]], "Computing with scikit-learn": [[366, "computing-with-scikit-learn"]], "Computational Performance": [[367, "computational-performance"]], "Bulk versus Atomic mode": [[367, "bulk-versus-atomic-mode"]], "Configuring Scikit-learn for reduced validation overhead": [[367, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Influence of the Number of Features": [[367, "influence-of-the-number-of-features"]], "Influence of the Input Data Representation": [[367, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[367, "influence-of-the-model-complexity"]], "Feature Extraction Latency": [[367, "feature-extraction-latency"]], "Prediction Throughput": [[367, "prediction-throughput"]], "Tips and Tricks": [[367, "tips-and-tricks"]], "Linear algebra libraries": [[367, "linear-algebra-libraries"]], "Limiting Working Memory": [[367, "limiting-working-memory"]], "Model Compression": [[367, "model-compression"]], "Model Reshaping": [[367, "model-reshaping"]], "Links": [[367, "links"]], "Parallelism, resource management, and configuration": [[368, "parallelism-resource-management-and-configuration"]], "Parallelism": [[368, "parallelism"], [977, "parallelism"]], "Higher-level parallelism with joblib": [[368, "higher-level-parallelism-with-joblib"]], "Lower-level parallelism with OpenMP": [[368, "lower-level-parallelism-with-openmp"]], "Parallel NumPy and SciPy routines from numerical libraries": [[368, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Oversubscription: spawning too many threads": [[368, "oversubscription-spawning-too-many-threads"]], "Configuration switches": [[368, "configuration-switches"]], "Python API": [[368, "python-api"]], "Environment variables": [[368, "environment-variables"]], "SKLEARN_ASSUME_FINITE": [[368, "sklearn-assume-finite"]], "SKLEARN_WORKING_MEMORY": [[368, "sklearn-working-memory"]], "SKLEARN_SEED": [[368, "sklearn-seed"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[368, "sklearn-tests-global-random-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[368, "sklearn-skip-network-tests"]], "SKLEARN_RUN_FLOAT32_TESTS": [[368, "sklearn-run-float32-tests"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[368, "sklearn-enable-debug-cython-directives"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[368, "sklearn-build-enable-debug-symbols"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[368, "sklearn-pairwise-dist-chunk-size"]], "Strategies to scale computationally: bigger data": [[369, "strategies-to-scale-computationally-bigger-data"]], "Scaling with instances using out-of-core learning": [[369, "scaling-with-instances-using-out-of-core-learning"]], "Streaming instances": [[369, "streaming-instances"]], "Extracting features": [[369, "extracting-features"]], "Incremental learning": [[369, "incremental-learning"]], "Notes": [[369, "notes"]], "Table Of Contents": [[370, "table-of-contents"]], "Dataset transformations": [[373, "dataset-transformations"]], "Dataset loading utilities": [[374, "dataset-loading-utilities"], [386, "dataset-loading-utilities"]], "Loading other datasets": [[375, "loading-other-datasets"]], "Sample images": [[375, "sample-images"]], "Examples:": [[375, null], [376, null], [397, null], [405, null], [405, null], [406, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [409, null], [409, null], [409, null], [409, null], [409, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [411, null], [413, null], [413, null], [413, null], [413, null], [413, null], [413, null], [413, null], [413, null], [413, null], [413, null], [413, null], [413, null], [414, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [417, null], [417, null], [417, null], [417, null], [977, null], [977, null], [977, null], [980, null], [980, null], [980, null], [982, null], [982, null], [982, null], [983, null], [984, null], [984, null], [984, null], [984, null], [984, null], [984, null], [984, null], [984, null], [984, null], [984, null], [984, null], [984, null], [984, null], [984, null], [985, null], [987, null], [987, null], [987, null], [987, null], [988, null], [988, null], [988, null], [988, null], [988, null], [989, null], [991, null], [991, null], [991, null], [991, null], [991, null], [992, null], [992, null], [993, null], [994, null], [994, null], [994, null], [994, null], [994, null], [994, null], [995, null], [996, null], [998, null], [998, null], [998, null], [1002, null], [1002, null], [1003, null], [1003, null], [1003, null], [1003, null], [1003, null], [1003, null], [1004, null], [1004, null], [1004, null], [1004, null], [1028, null]], "Datasets in svmlight / libsvm format": [[375, "datasets-in-svmlight-libsvm-format"]], "Related links:": [[375, null]], "Downloading datasets from the openml.org repository": [[375, "downloading-datasets-from-the-openml-org-repository"]], "Dataset Versions": [[375, "dataset-versions"]], "ARFF parser": [[375, "arff-parser"]], "Loading from external datasets": [[375, "loading-from-external-datasets"], [1015, null]], "Real world datasets": [[376, "real-world-datasets"]], "The Olivetti faces dataset": [[376, "the-olivetti-faces-dataset"]], "The 20 newsgroups text dataset": [[376, "the-20-newsgroups-text-dataset"]], "Data Considerations": [[376, null]], "Recommendation": [[376, null]], "The Labeled Faces in the Wild face recognition dataset": [[376, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "Forest covertypes": [[376, "forest-covertypes"]], "RCV1 dataset": [[376, "rcv1-dataset"]], "Kddcup 99 dataset": [[376, "kddcup-99-dataset"]], "California Housing dataset": [[376, "california-housing-dataset"]], "Generated datasets": [[377, "generated-datasets"]], "Generators for classification and clustering": [[377, "generators-for-classification-and-clustering"]], "Single label": [[377, "single-label"]], "Multilabel": [[377, "multilabel"]], "Generators for regression": [[377, "generators-for-regression"]], "Generators for manifold learning": [[377, "generators-for-manifold-learning"]], "Generators for decomposition": [[377, "generators-for-decomposition"]], "Toy datasets": [[378, "toy-datasets"]], "Iris plants dataset": [[378, "iris-plants-dataset"]], "Diabetes dataset": [[378, "diabetes-dataset"], [1022, null]], "Optical recognition of handwritten digits dataset": [[378, "optical-recognition-of-handwritten-digits-dataset"]], "Linnerrud dataset": [[378, "linnerrud-dataset"]], "Wine recognition dataset": [[378, "wine-recognition-dataset"]], "Breast cancer wisconsin (diagnostic) dataset": [[378, "breast-cancer-wisconsin-diagnostic-dataset"]], "Installing the development version of scikit-learn": [[379, "installing-the-development-version-of-scikit-learn"]], "Installing nightly builds": [[379, "installing-nightly-builds"]], "Building from source": [[379, "building-from-source"]], "Dependencies": [[379, "dependencies"]], "Runtime dependencies": [[379, "runtime-dependencies"]], "Build dependencies": [[379, "build-dependencies"]], "Test dependencies": [[379, "test-dependencies"]], "Building a specific version from a tag": [[379, "building-a-specific-version-from-a-tag"]], "Editable mode": [[379, "editable-mode"]], "Platform-specific instructions": [[379, "platform-specific-instructions"]], "Windows": [[379, "windows"]], "macOS": [[379, "macos"]], "macOS compilers from conda-forge": [[379, "macos-compilers-from-conda-forge"]], "macOS compilers from Homebrew": [[379, "macos-compilers-from-homebrew"]], "Linux": [[379, "linux"]], "Linux compilers from the system": [[379, "linux-compilers-from-the-system"]], "Linux compilers from conda-forge": [[379, "linux-compilers-from-conda-forge"]], "FreeBSD": [[379, "freebsd"]], "Alternative compilers": [[379, "alternative-compilers"]], "Parallel builds": [[379, "parallel-builds"]], "Bug triaging and issue curation": [[380, "bug-triaging-and-issue-curation"]], "Working on issues to improve them": [[380, "working-on-issues-to-improve-them"]], "Fruitful discussions": [[380, null]], "Working on PRs to help review": [[380, "working-on-prs-to-help-review"]], "Triaging operations for members of the core and contributor experience teams": [[380, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Closing issues: a tough call": [[380, null]], "A typical workflow for triaging issues": [[380, "a-typical-workflow-for-triaging-issues"]], "Contributing": [[381, "contributing"], [393, "contributing"]], "Our community, our values": [[381, null]], "Ways to contribute": [[381, "ways-to-contribute"]], "Contributing to related projects": [[381, null]], "Submitting a bug report or a feature request": [[381, "submitting-a-bug-report-or-a-feature-request"]], "How to make a good bug report": [[381, "how-to-make-a-good-bug-report"]], "Contributing code": [[381, "contributing-code"]], "Video resources": [[381, "video-resources"]], "How to contribute": [[381, "how-to-contribute"]], "Learning git:": [[381, null]], "Pull request checklist": [[381, "pull-request-checklist"]], "Continuous Integration (CI)": [[381, "continuous-integration-ci"]], "Stalled pull requests": [[381, "stalled-pull-requests"]], "Stalled and Unclaimed Issues": [[381, "stalled-and-unclaimed-issues"]], "Issues for New Contributors": [[381, "issues-for-new-contributors"]], "good first issue tag": [[381, null]], "Easy tag": [[381, null]], "help wanted tag": [[381, null]], "Documentation": [[381, "documentation"], [1031, "documentation"]], "Building the documentation": [[381, "building-the-documentation"]], "Generated documentation on GitHub Actions": [[381, "generated-documentation-on-github-actions"]], "Testing and improving test coverage": [[381, "testing-and-improving-test-coverage"]], "Writing matplotlib related tests": [[381, "writing-matplotlib-related-tests"]], "Workflow to improve test coverage": [[381, "workflow-to-improve-test-coverage"]], "Monitoring performance": [[381, "monitoring-performance"]], "Issue Tracker Tags": [[381, "issue-tracker-tags"]], "Maintaining backwards compatibility": [[381, "maintaining-backwards-compatibility"]], "Deprecation": [[381, "deprecation"]], "Change the default value of a parameter": [[381, "change-the-default-value-of-a-parameter"]], "Code Review Guidelines": [[381, "code-review-guidelines"]], "Communication Guidelines": [[381, "communication-guidelines"]], "Reading the existing code base": [[381, "reading-the-existing-code-base"]], "Cython Best Practices, Conventions and Knowledge": [[382, "cython-best-practices-conventions-and-knowledge"]], "Tips for developing with Cython in scikit-learn": [[382, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips to ease development": [[382, "tips-to-ease-development"]], "Tips for performance": [[382, "tips-for-performance"]], "Using OpenMP": [[382, "using-openmp"]], "Developing scikit-learn estimators": [[383, "developing-scikit-learn-estimators"]], "APIs of scikit-learn objects": [[383, "apis-of-scikit-learn-objects"]], "Different objects": [[383, "different-objects"]], "Instantiation": [[383, "instantiation"]], "Fitting": [[383, "fitting"]], "Estimated Attributes": [[383, "estimated-attributes"]], "Optional Arguments": [[383, "optional-arguments"]], "Universal attributes": [[383, "universal-attributes"]], "Rolling your own estimator": [[383, "rolling-your-own-estimator"]], "Project template:": [[383, null]], "BaseEstimator and mixins:": [[383, null]], "get_params and set_params": [[383, "get-params-and-set-params"]], "Parameters and init": [[383, "parameters-and-init"]], "Cloning": [[383, "cloning"]], "Pipeline compatibility": [[383, "pipeline-compatibility"]], "Estimator types": [[383, "estimator-types"]], "Specific models": [[383, "specific-models"]], "Estimator Tags": [[383, "estimator-tags"]], "Developer API for set_output": [[383, "developer-api-for-set-output"]], "Developer API for check_is_fitted": [[383, "developer-api-for-check-is-fitted"]], "Developer API for HTML representation": [[383, "developer-api-for-html-representation"]], "Coding guidelines": [[383, "coding-guidelines"]], "Input validation": [[383, "input-validation"]], "Random Numbers": [[383, "random-numbers"]], "Numerical assertions in tests": [[383, "numerical-assertions-in-tests"]], "Developer\u2019s Guide": [[384, "developer-s-guide"]], "Maintainer / core-developer information": [[385, "maintainer-core-developer-information"]], "Releasing": [[385, "releasing"]], "Before a release": [[385, "before-a-release"]], "Preparing a release PR": [[385, "preparing-a-release-pr"]], "Major version release": [[385, "major-version-release"]], "Minor version release (also known as bug-fix release)": [[385, "minor-version-release-also-known-as-bug-fix-release"]], "Making a release": [[385, "making-a-release"]], "Release checklist": [[385, "release-checklist"]], "Merging Pull Requests": [[385, "merging-pull-requests"]], "The scikit-learn.org web site": [[385, "the-scikit-learn-org-web-site"]], "Experimental features": [[385, "experimental-features"]], "Crafting a minimal reproducer for scikit-learn": [[386, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Good practices": [[386, "good-practices"]], "Provide a failing code example with minimal comments": [[386, "provide-a-failing-code-example-with-minimal-comments"]], "Boil down your script to something as small as possible": [[386, "boil-down-your-script-to-something-as-small-as-possible"]], "DO NOT report your data unless it is extremely necessary": [[386, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Use markdown formatting": [[386, "use-markdown-formatting"]], "Synthetic dataset": [[386, "synthetic-dataset"]], "NumPy": [[386, "numpy"]], "Pandas": [[386, "pandas"]], "make_regression": [[386, "make-regression"]], "make_classification": [[386, "make-classification"]], "make_blobs": [[386, "make-blobs"]], "How to optimize for speed": [[387, "how-to-optimize-for-speed"]], "Python, Cython or C/C++?": [[387, "python-cython-or-c-c"]], "Profiling Python code": [[387, "profiling-python-code"]], "Memory usage profiling": [[387, "memory-usage-profiling"]], "Using Cython": [[387, "using-cython"]], "Profiling compiled extensions": [[387, "profiling-compiled-extensions"]], "Using yep and gperftools": [[387, "using-yep-and-gperftools"]], "Using a debugger, gdb": [[387, "using-a-debugger-gdb"]], "Using gprof": [[387, "using-gprof"]], "Using valgrind / callgrind / kcachegrind": [[387, "using-valgrind-callgrind-kcachegrind"]], "kcachegrind": [[387, "kcachegrind"]], "Multi-core parallelism using joblib.Parallel": [[387, "multi-core-parallelism-using-joblib-parallel"]], "A simple algorithmic trick: warm restarts": [[387, "a-simple-algorithmic-trick-warm-restarts"]], "Developing with the Plotting API": [[388, "developing-with-the-plotting-api"]], "Plotting API Overview": [[388, "plotting-api-overview"]], "Plotting with Multiple Axes": [[388, "plotting-with-multiple-axes"]], "Developers\u2019 Tips and Tricks": [[389, "developers-tips-and-tricks"]], "Productivity and sanity-preserving tips": [[389, "productivity-and-sanity-preserving-tips"]], "Folding and unfolding outdated diffs on pull requests": [[389, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Checking out pull requests as remote-tracking branches": [[389, "checking-out-pull-requests-as-remote-tracking-branches"]], "Display code coverage in pull requests": [[389, "display-code-coverage-in-pull-requests"]], "Useful pytest aliases and flags": [[389, "useful-pytest-aliases-and-flags"]], "Standard replies for reviewing": [[389, "standard-replies-for-reviewing"]], "Debugging memory errors in Cython with valgrind": [[389, "debugging-memory-errors-in-cython-with-valgrind"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[389, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Utilities for Developers": [[390, "utilities-for-developers"]], "Validation Tools": [[390, "validation-tools"]], "Efficient Linear Algebra & Array Operations": [[390, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[390, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[390, "efficient-routines-for-sparse-matrices"]], "Graph Routines": [[390, "graph-routines"]], "Testing Functions": [[390, "testing-functions"]], "Multiclass and multilabel utility function": [[390, "multiclass-and-multilabel-utility-function"]], "Helper Functions": [[390, "helper-functions"]], "Hash Functions": [[390, "hash-functions"]], "Warnings and Exceptions": [[390, "warnings-and-exceptions"]], "Dispatching": [[391, "dispatching"]], "Frequently Asked Questions": [[393, "frequently-asked-questions"]], "Table of Contents": [[393, "table-of-contents"]], "About the project": [[393, "about-the-project"]], "What is the project name (a lot of people get it wrong)?": [[393, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "How do you pronounce the project name?": [[393, "how-do-you-pronounce-the-project-name"]], "Why scikit?": [[393, "why-scikit"]], "Do you support PyPy?": [[393, "do-you-support-pypy"]], "Implementation decisions": [[393, "implementation-decisions"]], "Why is there no support for deep or reinforcement learning / Will there be support for deep or reinforcement learning in scikit-learn?": [[393, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-support-for-deep-or-reinforcement-learning-in-scikit-learn"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[393, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[393, "why-did-you-remove-hmms-from-scikit-learn"]], "Will you add GPU support?": [[393, "will-you-add-gpu-support"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[393, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does Scikit-learn not directly work with, for example, pandas.DataFrame?": [[393, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Do you plan to implement transform for target y in a pipeline?": [[393, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Why are there so many different estimators for linear models?": [[393, "why-are-there-so-many-different-estimators-for-linear-models"]], "How can I contribute to scikit-learn?": [[393, "how-can-i-contribute-to-scikit-learn"]], "Why is my pull request not getting any attention?": [[393, "why-is-my-pull-request-not-getting-any-attention"]], "What are the inclusion criteria for new algorithms ?": [[393, "what-are-the-inclusion-criteria-for-new-algorithms"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[393, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Using scikit-learn": [[393, "using-scikit-learn"]], "What\u2019s the best way to get help on scikit-learn usage?": [[393, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "How should I save, export or deploy estimators for production?": [[393, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How can I create a bunch object?": [[393, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[393, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How do I deal with string data (or trees, graphs\u2026)?": [[393, "how-do-i-deal-with-string-data-or-trees-graphs"]], "Why do I sometime get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[393, "why-do-i-sometime-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why does my job use more cores than specified with n_jobs?": [[393, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "How do I set a random_state for an entire execution?": [[393, "how-do-i-set-a-random-state-for-an-entire-execution"]], "Getting Started": [[394, "getting-started"]], "Fitting and predicting: estimator basics": [[394, "fitting-and-predicting-estimator-basics"]], "Transformers and pre-processors": [[394, "transformers-and-pre-processors"]], "Pipelines: chaining pre-processors and estimators": [[394, "pipelines-chaining-pre-processors-and-estimators"]], "Model evaluation": [[394, "model-evaluation"]], "Automatic parameter searches": [[394, "automatic-parameter-searches"]], "Next steps": [[394, "next-steps"]], "Glossary of Common Terms and API Elements": [[395, "glossary-of-common-terms-and-api-elements"]], "General Concepts": [[395, "general-concepts"]], "Class APIs and Estimator Types": [[395, "class-apis-and-estimator-types"]], "Target Types": [[395, "target-types"]], "Methods": [[395, "methods"]], "Parameters": [[395, "parameters"], [415, "parameters"]], "Attributes": [[395, "attributes"]], "Data and sample properties": [[395, "data-and-sample-properties"]], "Scikit-learn governance and decision-making": [[396, "scikit-learn-governance-and-decision-making"]], "Roles And Responsibilities": [[396, "roles-and-responsibilities"]], "Contributors": [[396, "contributors"]], "Core Contributors": [[396, "core-contributors"]], "Communication team": [[396, "communication-team"]], "Documentation team": [[396, "documentation-team"]], "Maintainers": [[396, "maintainers"]], "Technical Committee": [[396, "technical-committee"]], "Decision Making Process": [[396, "decision-making-process"]], "Governance Model Changes": [[396, "governance-model-changes"]], "Enhancement proposals (SLEPs)": [[396, "enhancement-proposals-sleps"]], "Installing scikit-learn": [[398, "installing-scikit-learn"]], "Installing the latest release": [[398, "installing-the-latest-release"]], "Third party distributions of scikit-learn": [[398, "third-party-distributions-of-scikit-learn"]], "Alpine Linux": [[398, "alpine-linux"]], "Arch Linux": [[398, "arch-linux"]], "Debian/Ubuntu": [[398, "debian-ubuntu"]], "Fedora": [[398, "fedora"]], "NetBSD": [[398, "netbsd"]], "MacPorts for Mac OSX": [[398, "macports-for-mac-osx"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[398, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Intel Extension for Scikit-learn": [[398, "intel-extension-for-scikit-learn"]], "WinPython for Windows": [[398, "winpython-for-windows"]], "Troubleshooting": [[398, "troubleshooting"]], "Error caused by file path length limit on Windows": [[398, "error-caused-by-file-path-length-limit-on-windows"]], "Usage Examples": [[399, "usage-examples"]], "Weighted scoring and fitting": [[399, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[399, "weighted-scoring-and-unweighted-fitting"]], "Unweighted feature selection": [[399, "unweighted-feature-selection"]], "Advanced: Different scoring and fitting weights": [[399, "advanced-different-scoring-and-fitting-weights"]], "API Interface": [[399, "api-interface"]], "Metadata Routing Support Status": [[399, "metadata-routing-support-status"]], "Model persistence": [[402, "model-persistence"]], "Python specific serialization": [[402, "python-specific-serialization"]], "Security & maintainability limitations": [[402, "security-maintainability-limitations"]], "A more secure format: skops": [[402, "a-more-secure-format-skops"]], "Interoperable formats": [[402, "interoperable-formats"]], "Model selection and evaluation": [[403, "model-selection-and-evaluation"]], "Array API support (experimental)": [[404, "array-api-support-experimental"]], "Example usage": [[404, "example-usage"]], "PyTorch Support": [[404, "pytorch-support"]], "Support for Array API-compatible inputs": [[404, "support-for-array-api-compatible-inputs"]], "Metrics": [[404, "metrics"]], "Tools": [[404, "tools"]], "Common estimator checks": [[404, "common-estimator-checks"]], "Note on MPS device support": [[404, "note-on-mps-device-support"]], "Spectral Co-Clustering": [[405, "spectral-co-clustering"]], "Mathematical formulation": [[405, "mathematical-formulation"], [405, "id3"], [408, "mathematical-formulation"], [408, "id16"], [408, "id23"], [408, "id33"], [408, "id37"], [415, "mathematical-formulation"], [991, "mathematical-formulation"], [992, "mathematical-formulation"], [1002, "mathematical-formulation"], [1003, "mathematical-formulation"], [1004, "mathematical-formulation"]], "Spectral Biclustering": [[405, "spectral-biclustering"]], "Biclustering evaluation": [[405, "biclustering-evaluation"]], "Probability calibration": [[406, "probability-calibration"]], "Calibrating a classifier": [[406, "calibrating-a-classifier"]], "Usage": [[406, "usage"], [409, "usage"], [409, "id1"], [415, "usage"], [415, "id24"], [415, "id25"], [415, "id27"], [415, "id35"], [984, "usage"]], "Sigmoid": [[406, "sigmoid"]], "Isotonic": [[406, "isotonic"]], "Multiclass support": [[406, "multiclass-support"]], "API Reference": [[407, "api-reference"]], "sklearn: Settings and information tools": [[407, "module-sklearn"]], "sklearn.base: Base classes and utility functions": [[407, "module-sklearn.base"]], "Base classes": [[407, "base-classes"]], "Functions": [[407, "functions"], [407, "id1"]], "sklearn.calibration: Probability Calibration": [[407, "module-sklearn.calibration"]], "sklearn.cluster: Clustering": [[407, "module-sklearn.cluster"]], "Classes": [[407, "classes"]], "sklearn.compose: Composite Estimators": [[407, "module-sklearn.compose"]], "sklearn.covariance: Covariance Estimators": [[407, "module-sklearn.covariance"]], "sklearn.cross_decomposition: Cross decomposition": [[407, "module-sklearn.cross_decomposition"]], "sklearn.datasets: Datasets": [[407, "module-sklearn.datasets"]], "Loaders": [[407, "loaders"]], "Samples generator": [[407, "samples-generator"]], "sklearn.decomposition: Matrix Decomposition": [[407, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis: Discriminant Analysis": [[407, "module-sklearn.discriminant_analysis"]], "sklearn.dummy: Dummy estimators": [[407, "module-sklearn.dummy"]], "sklearn.ensemble: Ensemble Methods": [[407, "module-sklearn.ensemble"]], "sklearn.exceptions: Exceptions and warnings": [[407, "module-sklearn.exceptions"]], "sklearn.experimental: Experimental": [[407, "module-sklearn.experimental"]], "sklearn.feature_extraction: Feature Extraction": [[407, "module-sklearn.feature_extraction"]], "From images": [[407, "module-sklearn.feature_extraction.image"]], "From text": [[407, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection: Feature Selection": [[407, "module-sklearn.feature_selection"]], "sklearn.gaussian_process: Gaussian Processes": [[407, "module-sklearn.gaussian_process"]], "Kernels": [[407, "module-sklearn.gaussian_process.kernels"]], "sklearn.impute: Impute": [[407, "module-sklearn.impute"]], "sklearn.inspection: Inspection": [[407, "module-sklearn.inspection"]], "sklearn.isotonic: Isotonic regression": [[407, "module-sklearn.isotonic"]], "sklearn.kernel_approximation: Kernel Approximation": [[407, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge: Kernel Ridge Regression": [[407, "module-sklearn.kernel_ridge"]], "sklearn.linear_model: Linear Models": [[407, "module-sklearn.linear_model"]], "Linear classifiers": [[407, "linear-classifiers"]], "Classical linear regressors": [[407, "classical-linear-regressors"]], "Regressors with variable selection": [[407, "regressors-with-variable-selection"]], "Bayesian regressors": [[407, "bayesian-regressors"]], "Multi-task linear regressors with variable selection": [[407, "multi-task-linear-regressors-with-variable-selection"]], "Outlier-robust regressors": [[407, "outlier-robust-regressors"]], "Generalized linear models (GLM) for regression": [[407, "generalized-linear-models-glm-for-regression"]], "sklearn.manifold: Manifold Learning": [[407, "module-sklearn.manifold"]], "sklearn.metrics: Metrics": [[407, "sklearn-metrics-metrics"]], "Model Selection Interface": [[407, "model-selection-interface"]], "Classification metrics": [[407, "classification-metrics"], [988, "classification-metrics"]], "Regression metrics": [[407, "regression-metrics"], [988, "regression-metrics"]], "Multilabel ranking metrics": [[407, "multilabel-ranking-metrics"], [988, "multilabel-ranking-metrics"]], "Clustering metrics": [[407, "clustering-metrics"], [988, "clustering-metrics"]], "Biclustering metrics": [[407, "biclustering-metrics"]], "Distance metrics": [[407, "distance-metrics"]], "Pairwise metrics": [[407, "pairwise-metrics"]], "sklearn.mixture: Gaussian Mixture Models": [[407, "module-sklearn.mixture"]], "sklearn.model_selection: Model Selection": [[407, "module-sklearn.model_selection"]], "Splitter Classes": [[407, "splitter-classes"]], "Splitter Functions": [[407, "splitter-functions"]], "Hyper-parameter optimizers": [[407, "hyper-parameter-optimizers"]], "Model validation": [[407, "model-validation"]], "sklearn.multiclass: Multiclass classification": [[407, "module-sklearn.multiclass"]], "Multiclass classification strategies": [[407, "multiclass-classification-strategies"]], "sklearn.multioutput: Multioutput regression and classification": [[407, "module-sklearn.multioutput"]], "sklearn.naive_bayes: Naive Bayes": [[407, "module-sklearn.naive_bayes"]], "sklearn.neighbors: Nearest Neighbors": [[407, "module-sklearn.neighbors"]], "sklearn.neural_network: Neural network models": [[407, "module-sklearn.neural_network"]], "sklearn.pipeline: Pipeline": [[407, "module-sklearn.pipeline"]], "sklearn.preprocessing: Preprocessing and Normalization": [[407, "module-sklearn.preprocessing"]], "sklearn.random_projection: Random projection": [[407, "module-sklearn.random_projection"]], "sklearn.semi_supervised: Semi-Supervised Learning": [[407, "module-sklearn.semi_supervised"]], "sklearn.svm: Support Vector Machines": [[407, "module-sklearn.svm"]], "sklearn.tree: Decision Trees": [[407, "module-sklearn.tree"]], "sklearn.utils: Utilities": [[407, "module-sklearn.utils"]], "Input and parameter validation": [[407, "module-sklearn.utils.validation"]], "Utilities used in meta-estimators": [[407, "module-sklearn.utils.metaestimators"]], "Utilities to handle weights based on class labels": [[407, "module-sklearn.utils.class_weight"]], "Utilities to deal with multiclass target in classifiers": [[407, "module-sklearn.utils.multiclass"]], "Utilities for optimal mathematical operations": [[407, "module-sklearn.utils.extmath"]], "Utilities to work with sparse matrices and arrays": [[407, "module-sklearn.utils.sparsefuncs"]], "Utilities to work with graphs": [[407, "module-sklearn.utils.graph"]], "Utilities for random sampling": [[407, "module-sklearn.utils.random"]], "Utilities to operate on arrays": [[407, "module-sklearn.utils.arrayfuncs"]], "Metadata routing": [[407, "module-sklearn.utils.metadata_routing"]], "Scikit-learn object discovery": [[407, "module-sklearn.utils.discovery"]], "Scikit-learn compatibility checker": [[407, "module-sklearn.utils.estimator_checks"]], "Utilities for parallel computing": [[407, "module-sklearn.utils.parallel"]], "Recently deprecated": [[407, "recently-deprecated"]], "Input data": [[408, null]], "Overview of clustering methods": [[408, "overview-of-clustering-methods"]], "K-means": [[408, "k-means"]], "Low-level parallelism": [[408, "low-level-parallelism"], [415, "low-level-parallelism"]], "Mini Batch K-Means": [[408, "mini-batch-k-means"]], "Affinity Propagation": [[408, "affinity-propagation"]], "Mean Shift": [[408, "mean-shift"]], "Spectral clustering": [[408, "spectral-clustering"]], "Different label assignment strategies": [[408, "different-label-assignment-strategies"]], "Spectral Clustering Graphs": [[408, "spectral-clustering-graphs"]], "Hierarchical clustering": [[408, "hierarchical-clustering"]], "FeatureAgglomeration": [[408, null]], "Different linkage type: Ward, complete, average, and single linkage": [[408, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Visualization of cluster hierarchy": [[408, "visualization-of-cluster-hierarchy"]], "Adding connectivity constraints": [[408, "adding-connectivity-constraints"]], "Varying the metric": [[408, "varying-the-metric"]], "Bisecting K-Means": [[408, "bisecting-k-means"]], "DBSCAN": [[408, "dbscan"]], "Implementation": [[408, null], [991, "implementation"]], "Memory consumption for large sample sizes": [[408, null]], "HDBSCAN": [[408, "hdbscan"]], "Mutual Reachability Graph": [[408, "mutual-reachability-graph"]], "Hierarchical Clustering": [[408, "id11"]], "OPTICS": [[408, "optics"]], "Comparison with DBSCAN": [[408, null]], "Computational Complexity": [[408, null]], "BIRCH": [[408, "birch"]], "Clustering performance evaluation": [[408, "clustering-performance-evaluation"]], "Rand index": [[408, "rand-index"]], "Advantages": [[408, "advantages"], [408, "id14"], [408, "id21"], [408, "id25"], [408, "id28"], [408, "id31"], [408, "id35"], [408, "id39"]], "Drawbacks": [[408, "drawbacks"], [408, "id15"], [408, "id22"], [408, "id26"], [408, "id29"], [408, "id32"], [408, "id36"], [408, "id40"]], "Mutual Information based scores": [[408, "mutual-information-based-scores"]], "Homogeneity, completeness and V-measure": [[408, "homogeneity-completeness-and-v-measure"]], "Fowlkes-Mallows scores": [[408, "fowlkes-mallows-scores"]], "Silhouette Coefficient": [[408, "silhouette-coefficient"]], "Calinski-Harabasz Index": [[408, "calinski-harabasz-index"]], "Davies-Bouldin Index": [[408, "davies-bouldin-index"]], "Contingency Matrix": [[408, "contingency-matrix"]], "Pair Confusion Matrix": [[408, "pair-confusion-matrix"]], "Pipeline: chaining estimators": [[409, "pipeline-chaining-estimators"]], "Build a pipeline": [[409, "build-a-pipeline"]], "Access pipeline steps": [[409, "access-pipeline-steps"]], "Tracking feature names in a pipeline": [[409, "tracking-feature-names-in-a-pipeline"]], "Access to nested parameters": [[409, "access-to-nested-parameters"]], "Caching transformers: avoid repeated computation": [[409, "caching-transformers-avoid-repeated-computation"]], "Transforming target in regression": [[409, "transforming-target-in-regression"]], "FeatureUnion: composite feature spaces": [[409, "featureunion-composite-feature-spaces"]], "ColumnTransformer for heterogeneous data": [[409, "columntransformer-for-heterogeneous-data"]], "Visualizing Composite Estimators": [[409, "visualizing-composite-estimators"]], "Empirical covariance": [[410, "empirical-covariance"]], "Shrunk Covariance": [[410, "shrunk-covariance"]], "Basic shrinkage": [[410, "basic-shrinkage"]], "Ledoit-Wolf shrinkage": [[410, "ledoit-wolf-shrinkage"]], "Oracle Approximating Shrinkage": [[410, "oracle-approximating-shrinkage"]], "Sparse inverse covariance": [[410, "sparse-inverse-covariance"]], "Robust Covariance Estimation": [[410, "robust-covariance-estimation"]], "Minimum Covariance Determinant": [[410, "minimum-covariance-determinant"]], "PLSCanonical": [[411, "plscanonical"]], "Transforming data": [[411, "transforming-data"]], "Predicting the targets Y": [[411, "predicting-the-targets-y"]], "PLSSVD": [[411, "plssvd"]], "PLSRegression": [[411, "plsregression"]], "Canonical Correlation Analysis": [[411, "canonical-correlation-analysis"]], "Reference:": [[411, null]], "Cross-validation: evaluating estimator performance": [[412, "cross-validation-evaluating-estimator-performance"]], "Computing cross-validated metrics": [[412, "computing-cross-validated-metrics"]], "Data transformation with held out data": [[412, null]], "The cross_validate function and multiple metric evaluation": [[412, "the-cross-validate-function-and-multiple-metric-evaluation"]], "Obtaining predictions by cross-validation": [[412, "obtaining-predictions-by-cross-validation"]], "Cross validation iterators": [[412, "cross-validation-iterators"]], "Cross-validation iterators for i.i.d. data": [[412, "cross-validation-iterators-for-i-i-d-data"]], "K-fold": [[412, "k-fold"]], "Repeated K-Fold": [[412, "repeated-k-fold"]], "Leave One Out (LOO)": [[412, "leave-one-out-loo"]], "Leave P Out (LPO)": [[412, "leave-p-out-lpo"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[412, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Cross-validation iterators with stratification based on class labels": [[412, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Stratified k-fold": [[412, "stratified-k-fold"]], "Stratified Shuffle Split": [[412, "stratified-shuffle-split"]], "Cross-validation iterators for grouped data": [[412, "cross-validation-iterators-for-grouped-data"]], "Group k-fold": [[412, "group-k-fold"]], "StratifiedGroupKFold": [[412, "stratifiedgroupkfold"]], "Leave One Group Out": [[412, "leave-one-group-out"]], "Leave P Groups Out": [[412, "leave-p-groups-out"]], "Group Shuffle Split": [[412, "group-shuffle-split"]], "Predefined fold-splits / Validation-sets": [[412, "predefined-fold-splits-validation-sets"]], "Using cross-validation iterators to split train and test": [[412, "using-cross-validation-iterators-to-split-train-and-test"]], "Cross validation of time series data": [[412, "cross-validation-of-time-series-data"]], "Time Series Split": [[412, "time-series-split"]], "A note on shuffling": [[412, "a-note-on-shuffling"]], "Cross validation and model selection": [[412, "cross-validation-and-model-selection"]], "Decomposing signals in components (matrix factorization problems)": [[413, "decomposing-signals-in-components-matrix-factorization-problems"]], "Principal component analysis (PCA)": [[413, "principal-component-analysis-pca"]], "Exact PCA and probabilistic interpretation": [[413, "exact-pca-and-probabilistic-interpretation"]], "PCA using randomized SVD": [[413, "pca-using-randomized-svd"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[413, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Kernel Principal Component Analysis (kPCA)": [[413, "kernel-principal-component-analysis-kpca"]], "Exact Kernel PCA": [[413, "exact-kernel-pca"]], "Choice of solver for Kernel PCA": [[413, "choice-of-solver-for-kernel-pca"]], "Truncated singular value decomposition and latent semantic analysis": [[413, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "Dictionary Learning": [[413, "dictionary-learning"]], "Generic dictionary learning": [[413, "generic-dictionary-learning"]], "Mini-batch dictionary learning": [[413, "mini-batch-dictionary-learning"]], "Clustering for dictionary learning": [[413, null]], "Factor Analysis": [[413, "factor-analysis"]], "Independent component analysis (ICA)": [[413, "independent-component-analysis-ica"]], "Non-negative matrix factorization (NMF or NNMF)": [[413, "non-negative-matrix-factorization-nmf-or-nnmf"]], "NMF with the Frobenius norm": [[413, "nmf-with-the-frobenius-norm"]], "NMF with a beta-divergence": [[413, "nmf-with-a-beta-divergence"]], "Mini-batch Non Negative Matrix Factorization": [[413, "mini-batch-non-negative-matrix-factorization"]], "Latent Dirichlet Allocation (LDA)": [[413, "latent-dirichlet-allocation-lda"]], "Density Estimation": [[414, "density-estimation"]], "Density Estimation: Histograms": [[414, "density-estimation-histograms"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[415, "ensembles-gradient-boosting-random-forests-bagging-voting-stacking"]], "Gradient-boosted trees": [[415, "gradient-boosted-trees"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[415, null]], "Histogram-Based Gradient Boosting": [[415, "histogram-based-gradient-boosting"]], "Missing values support": [[415, "missing-values-support"]], "Sample weight support": [[415, "sample-weight-support"]], "Categorical Features Support": [[415, "categorical-features-support"]], "Interaction constraints": [[415, "interaction-constraints"]], "Why it\u2019s faster": [[415, "why-it-s-faster"]], "GradientBoostingClassifier and GradientBoostingRegressor": [[415, "gradientboostingclassifier-and-gradientboostingregressor"]], "Fitting additional weak-learners": [[415, "fitting-additional-weak-learners"]], "Controlling the tree size": [[415, "controlling-the-tree-size"]], "Loss Functions": [[415, "loss-functions"]], "Shrinkage via learning rate": [[415, "shrinkage-via-learning-rate"]], "Subsampling": [[415, "subsampling"]], "Interpretation with feature importance": [[415, "interpretation-with-feature-importance"]], "Random forests and other randomized tree ensembles": [[415, "random-forests-and-other-randomized-tree-ensembles"]], "Random Forests": [[415, "random-forests"]], "Extremely Randomized Trees": [[415, "extremely-randomized-trees"]], "Parallelization": [[415, "parallelization"]], "Feature importance evaluation": [[415, "feature-importance-evaluation"]], "Totally Random Trees Embedding": [[415, "totally-random-trees-embedding"]], "Bagging meta-estimator": [[415, "bagging-meta-estimator"]], "Voting Classifier": [[415, "voting-classifier"]], "Majority Class Labels (Majority/Hard Voting)": [[415, "majority-class-labels-majority-hard-voting"]], "Weighted Average Probabilities (Soft Voting)": [[415, "weighted-average-probabilities-soft-voting"]], "Using the VotingClassifier with GridSearchCV": [[415, "using-the-votingclassifier-with-gridsearchcv"]], "Voting Regressor": [[415, "voting-regressor"]], "Stacked generalization": [[415, "stacked-generalization"]], "AdaBoost": [[415, "adaboost"]], "Feature extraction": [[416, "feature-extraction"]], "Loading features from dicts": [[416, "loading-features-from-dicts"]], "Feature hashing": [[416, "feature-hashing"]], "Text feature extraction": [[416, "text-feature-extraction"]], "The Bag of Words representation": [[416, "the-bag-of-words-representation"]], "Sparsity": [[416, "sparsity"], [1022, "sparsity"]], "Common Vectorizer usage": [[416, "common-vectorizer-usage"]], "Using stop words": [[416, "using-stop-words"]], "Tf\u2013idf term weighting": [[416, "tfidf-term-weighting"]], "Decoding text files": [[416, "decoding-text-files"]], "Applications and examples": [[416, "applications-and-examples"]], "Limitations of the Bag of Words representation": [[416, "limitations-of-the-bag-of-words-representation"]], "Vectorizing a large text corpus with the hashing trick": [[416, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Customizing the vectorizer classes": [[416, "customizing-the-vectorizer-classes"]], "Image feature extraction": [[416, "image-feature-extraction"]], "Patch extraction": [[416, "patch-extraction"]], "Connectivity graph of an image": [[416, "connectivity-graph-of-an-image"]], "Feature selection": [[417, "feature-selection"]], "Removing features with low variance": [[417, "removing-features-with-low-variance"]], "Feature selection with sparse data": [[417, null]], "Feature selection using SelectFromModel": [[417, "feature-selection-using-selectfrommodel"]], "L1-based feature selection": [[417, "l1-based-feature-selection"]], "Reference": [[417, null], [417, null]], "Tree-based feature selection": [[417, "tree-based-feature-selection"]], "Sequential Feature Selection": [[417, "sequential-feature-selection"]], "Feature selection as part of a pipeline": [[417, "feature-selection-as-part-of-a-pipeline"]], "Gaussian Processes": [[418, "gaussian-processes"]], "Gaussian Process Regression (GPR)": [[418, "gaussian-process-regression-gpr"]], "Gaussian Process Classification (GPC)": [[418, "gaussian-process-classification-gpc"]], "GPC examples": [[418, "gpc-examples"]], "Probabilistic predictions with GPC": [[418, "probabilistic-predictions-with-gpc"]], "Illustration of GPC on the XOR dataset": [[418, "illustration-of-gpc-on-the-xor-dataset"]], "Kernels for Gaussian Processes": [[418, "kernels-for-gaussian-processes"]], "Basic kernels": [[418, "basic-kernels"]], "Kernel operators": [[418, "kernel-operators"]], "Radial basis function (RBF) kernel": [[418, "radial-basis-function-rbf-kernel"]], "Rational quadratic kernel": [[418, "rational-quadratic-kernel"]], "Dot-Product kernel": [[418, "dot-product-kernel"]], "sklearn.cluster.dbscan": [[419, "sklearn-cluster-dbscan"]], "sklearn.decomposition.fastica": [[420, "sklearn-decomposition-fastica"]], "sklearn.covariance.oas": [[421, "sklearn-covariance-oas"]], "sklearn.base.BaseEstimator": [[422, "sklearn-base-baseestimator"]], "Examples using sklearn.base.BaseEstimator": [[422, "examples-using-sklearn-base-baseestimator"]], "sklearn.base.BiclusterMixin": [[423, "sklearn-base-biclustermixin"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[424, "sklearn-base-classnameprefixfeaturesoutmixin"]], "sklearn.base.ClassifierMixin": [[425, "sklearn-base-classifiermixin"]], "Examples using sklearn.base.ClassifierMixin": [[425, "examples-using-sklearn-base-classifiermixin"]], "sklearn.base.ClusterMixin": [[426, "sklearn-base-clustermixin"]], "sklearn.base.DensityMixin": [[427, "sklearn-base-densitymixin"]], "sklearn.base.MetaEstimatorMixin": [[428, "sklearn-base-metaestimatormixin"]], "Examples using sklearn.base.MetaEstimatorMixin": [[428, "examples-using-sklearn-base-metaestimatormixin"]], "sklearn.base.OneToOneFeatureMixin": [[429, "sklearn-base-onetoonefeaturemixin"]], "sklearn.base.OutlierMixin": [[430, "sklearn-base-outliermixin"]], "sklearn.base.RegressorMixin": [[431, "sklearn-base-regressormixin"]], "Examples using sklearn.base.RegressorMixin": [[431, "examples-using-sklearn-base-regressormixin"]], "sklearn.base.TransformerMixin": [[432, "sklearn-base-transformermixin"]], "Examples using sklearn.base.TransformerMixin": [[432, "examples-using-sklearn-base-transformermixin"]], "sklearn.base.clone": [[433, "sklearn-base-clone"]], "sklearn.base.is_classifier": [[434, "sklearn-base-is-classifier"]], "sklearn.base.is_regressor": [[435, "sklearn-base-is-regressor"]], "sklearn.calibration.CalibratedClassifierCV": [[436, "sklearn-calibration-calibratedclassifiercv"]], "Examples using sklearn.calibration.CalibratedClassifierCV": [[436, "examples-using-sklearn-calibration-calibratedclassifiercv"]], "sklearn.calibration.CalibrationDisplay": [[437, "sklearn-calibration-calibrationdisplay"]], "Examples using sklearn.calibration.CalibrationDisplay.from_estimator": [[437, "examples-using-sklearn-calibration-calibrationdisplay-from-estimator"]], "sklearn.calibration.calibration_curve": [[438, "sklearn-calibration-calibration-curve"]], "sklearn.cluster.AffinityPropagation": [[439, "sklearn-cluster-affinitypropagation"]], "Examples using sklearn.cluster.AffinityPropagation": [[439, "examples-using-sklearn-cluster-affinitypropagation"]], "sklearn.cluster.AgglomerativeClustering": [[440, "sklearn-cluster-agglomerativeclustering"]], "Examples using sklearn.cluster.AgglomerativeClustering": [[440, "examples-using-sklearn-cluster-agglomerativeclustering"]], "sklearn.cluster.Birch": [[441, "sklearn-cluster-birch"]], "Examples using sklearn.cluster.Birch": [[441, "examples-using-sklearn-cluster-birch"]], "sklearn.cluster.BisectingKMeans": [[442, "sklearn-cluster-bisectingkmeans"]], "Examples using sklearn.cluster.BisectingKMeans": [[442, "examples-using-sklearn-cluster-bisectingkmeans"]], "sklearn.cluster.DBSCAN": [[443, "sklearn-cluster-dbscan"]], "Examples using sklearn.cluster.DBSCAN": [[443, "examples-using-sklearn-cluster-dbscan"]], "sklearn.cluster.FeatureAgglomeration": [[444, "sklearn-cluster-featureagglomeration"]], "Examples using sklearn.cluster.FeatureAgglomeration": [[444, "examples-using-sklearn-cluster-featureagglomeration"]], "sklearn.cluster.HDBSCAN": [[445, "sklearn-cluster-hdbscan"]], "Examples using sklearn.cluster.HDBSCAN": [[445, "examples-using-sklearn-cluster-hdbscan"]], "sklearn.cluster.KMeans": [[446, "sklearn-cluster-kmeans"]], "Examples using sklearn.cluster.KMeans": [[446, "examples-using-sklearn-cluster-kmeans"]], "sklearn.cluster.MeanShift": [[447, "sklearn-cluster-meanshift"]], "Examples using sklearn.cluster.MeanShift": [[447, "examples-using-sklearn-cluster-meanshift"]], "sklearn.cluster.MiniBatchKMeans": [[448, "sklearn-cluster-minibatchkmeans"]], "Examples using sklearn.cluster.MiniBatchKMeans": [[448, "examples-using-sklearn-cluster-minibatchkmeans"]], "sklearn.cluster.OPTICS": [[449, "sklearn-cluster-optics"]], "Examples using sklearn.cluster.OPTICS": [[449, "examples-using-sklearn-cluster-optics"]], "sklearn.cluster.SpectralBiclustering": [[450, "sklearn-cluster-spectralbiclustering"]], "Examples using sklearn.cluster.SpectralBiclustering": [[450, "examples-using-sklearn-cluster-spectralbiclustering"]], "sklearn.cluster.SpectralClustering": [[451, "sklearn-cluster-spectralclustering"]], "Examples using sklearn.cluster.SpectralClustering": [[451, "examples-using-sklearn-cluster-spectralclustering"]], "sklearn.cluster.SpectralCoclustering": [[452, "sklearn-cluster-spectralcoclustering"]], "Examples using sklearn.cluster.SpectralCoclustering": [[452, "examples-using-sklearn-cluster-spectralcoclustering"]], "sklearn.cluster.affinity_propagation": [[453, "sklearn-cluster-affinity-propagation"]], "Examples using sklearn.cluster.affinity_propagation": [[453, "examples-using-sklearn-cluster-affinity-propagation"]], "sklearn.cluster.cluster_optics_dbscan": [[454, "sklearn-cluster-cluster-optics-dbscan"]], "Examples using sklearn.cluster.cluster_optics_dbscan": [[454, "examples-using-sklearn-cluster-cluster-optics-dbscan"]], "sklearn.cluster.cluster_optics_xi": [[455, "sklearn-cluster-cluster-optics-xi"]], "sklearn.cluster.compute_optics_graph": [[456, "sklearn-cluster-compute-optics-graph"]], "sklearn.cluster.estimate_bandwidth": [[457, "sklearn-cluster-estimate-bandwidth"]], "Examples using sklearn.cluster.estimate_bandwidth": [[457, "examples-using-sklearn-cluster-estimate-bandwidth"]], "sklearn.cluster.k_means": [[458, "sklearn-cluster-k-means"]], "sklearn.cluster.kmeans_plusplus": [[459, "sklearn-cluster-kmeans-plusplus"]], "Examples using sklearn.cluster.kmeans_plusplus": [[459, "examples-using-sklearn-cluster-kmeans-plusplus"]], "sklearn.cluster.mean_shift": [[460, "sklearn-cluster-mean-shift"]], "sklearn.cluster.spectral_clustering": [[461, "sklearn-cluster-spectral-clustering"]], "Examples using sklearn.cluster.spectral_clustering": [[461, "examples-using-sklearn-cluster-spectral-clustering"]], "sklearn.cluster.ward_tree": [[462, "sklearn-cluster-ward-tree"]], "sklearn.compose.ColumnTransformer": [[463, "sklearn-compose-columntransformer"]], "Examples using sklearn.compose.ColumnTransformer": [[463, "examples-using-sklearn-compose-columntransformer"]], "sklearn.compose.TransformedTargetRegressor": [[464, "sklearn-compose-transformedtargetregressor"]], "Examples using sklearn.compose.TransformedTargetRegressor": [[464, "examples-using-sklearn-compose-transformedtargetregressor"]], "sklearn.compose.make_column_selector": [[465, "sklearn-compose-make-column-selector"]], "Examples using sklearn.compose.make_column_selector": [[465, "examples-using-sklearn-compose-make-column-selector"]], "sklearn.compose.make_column_transformer": [[466, "sklearn-compose-make-column-transformer"]], "Examples using sklearn.compose.make_column_transformer": [[466, "examples-using-sklearn-compose-make-column-transformer"]], "sklearn.config_context": [[467, "sklearn-config-context"]], "Examples using sklearn.config_context": [[467, "examples-using-sklearn-config-context"]], "sklearn.covariance.EllipticEnvelope": [[468, "sklearn-covariance-ellipticenvelope"]], "Examples using sklearn.covariance.EllipticEnvelope": [[468, "examples-using-sklearn-covariance-ellipticenvelope"]], "sklearn.covariance.EmpiricalCovariance": [[469, "sklearn-covariance-empiricalcovariance"]], "Examples using sklearn.covariance.EmpiricalCovariance": [[469, "examples-using-sklearn-covariance-empiricalcovariance"]], "sklearn.covariance.GraphicalLasso": [[470, "sklearn-covariance-graphicallasso"]], "sklearn.covariance.GraphicalLassoCV": [[471, "sklearn-covariance-graphicallassocv"]], "Examples using sklearn.covariance.GraphicalLassoCV": [[471, "examples-using-sklearn-covariance-graphicallassocv"]], "sklearn.covariance.LedoitWolf": [[472, "sklearn-covariance-ledoitwolf"]], "Examples using sklearn.covariance.LedoitWolf": [[472, "examples-using-sklearn-covariance-ledoitwolf"]], "sklearn.covariance.MinCovDet": [[473, "sklearn-covariance-mincovdet"]], "Examples using sklearn.covariance.MinCovDet": [[473, "examples-using-sklearn-covariance-mincovdet"]], "sklearn.covariance.OAS": [[474, "sklearn-covariance-oas"]], "Examples using sklearn.covariance.OAS": [[474, "examples-using-sklearn-covariance-oas"]], "sklearn.covariance.ShrunkCovariance": [[475, "sklearn-covariance-shrunkcovariance"]], "Examples using sklearn.covariance.ShrunkCovariance": [[475, "examples-using-sklearn-covariance-shrunkcovariance"]], "sklearn.covariance.empirical_covariance": [[476, "sklearn-covariance-empirical-covariance"]], "Examples using sklearn.covariance.empirical_covariance": [[476, "examples-using-sklearn-covariance-empirical-covariance"]], "sklearn.covariance.graphical_lasso": [[477, "sklearn-covariance-graphical-lasso"]], "sklearn.covariance.ledoit_wolf": [[478, "sklearn-covariance-ledoit-wolf"]], "Examples using sklearn.covariance.ledoit_wolf": [[478, "examples-using-sklearn-covariance-ledoit-wolf"]], "sklearn.covariance.ledoit_wolf_shrinkage": [[479, "sklearn-covariance-ledoit-wolf-shrinkage"]], "sklearn.covariance.shrunk_covariance": [[480, "sklearn-covariance-shrunk-covariance"]], "sklearn.cross_decomposition.CCA": [[481, "sklearn-cross-decomposition-cca"]], "Examples using sklearn.cross_decomposition.CCA": [[481, "examples-using-sklearn-cross-decomposition-cca"]], "sklearn.cross_decomposition.PLSCanonical": [[482, "sklearn-cross-decomposition-plscanonical"]], "Examples using sklearn.cross_decomposition.PLSCanonical": [[482, "examples-using-sklearn-cross-decomposition-plscanonical"]], "sklearn.cross_decomposition.PLSRegression": [[483, "sklearn-cross-decomposition-plsregression"]], "Examples using sklearn.cross_decomposition.PLSRegression": [[483, "examples-using-sklearn-cross-decomposition-plsregression"]], "sklearn.cross_decomposition.PLSSVD": [[484, "sklearn-cross-decomposition-plssvd"]], "sklearn.datasets.clear_data_home": [[485, "sklearn-datasets-clear-data-home"]], "sklearn.datasets.dump_svmlight_file": [[486, "sklearn-datasets-dump-svmlight-file"]], "Examples using sklearn.datasets.dump_svmlight_file": [[486, "examples-using-sklearn-datasets-dump-svmlight-file"]], "sklearn.datasets.fetch_20newsgroups": [[487, "sklearn-datasets-fetch-20newsgroups"]], "Examples using sklearn.datasets.fetch_20newsgroups": [[487, "examples-using-sklearn-datasets-fetch-20newsgroups"]], "sklearn.datasets.fetch_20newsgroups_vectorized": [[488, "sklearn-datasets-fetch-20newsgroups-vectorized"]], "Examples using sklearn.datasets.fetch_20newsgroups_vectorized": [[488, "examples-using-sklearn-datasets-fetch-20newsgroups-vectorized"]], "sklearn.datasets.fetch_california_housing": [[489, "sklearn-datasets-fetch-california-housing"]], "Examples using sklearn.datasets.fetch_california_housing": [[489, "examples-using-sklearn-datasets-fetch-california-housing"]], "sklearn.datasets.fetch_covtype": [[490, "sklearn-datasets-fetch-covtype"]], "Examples using sklearn.datasets.fetch_covtype": [[490, "examples-using-sklearn-datasets-fetch-covtype"]], "sklearn.datasets.fetch_kddcup99": [[491, "sklearn-datasets-fetch-kddcup99"]], "Examples using sklearn.datasets.fetch_kddcup99": [[491, "examples-using-sklearn-datasets-fetch-kddcup99"]], "sklearn.datasets.fetch_lfw_pairs": [[492, "sklearn-datasets-fetch-lfw-pairs"]], "sklearn.datasets.fetch_lfw_people": [[493, "sklearn-datasets-fetch-lfw-people"]], "Examples using sklearn.datasets.fetch_lfw_people": [[493, "examples-using-sklearn-datasets-fetch-lfw-people"]], "sklearn.datasets.fetch_olivetti_faces": [[494, "sklearn-datasets-fetch-olivetti-faces"]], "Examples using sklearn.datasets.fetch_olivetti_faces": [[494, "examples-using-sklearn-datasets-fetch-olivetti-faces"]], "sklearn.datasets.fetch_openml": [[495, "sklearn-datasets-fetch-openml"]], "Examples using sklearn.datasets.fetch_openml": [[495, "examples-using-sklearn-datasets-fetch-openml"]], "sklearn.datasets.fetch_rcv1": [[496, "sklearn-datasets-fetch-rcv1"]], "sklearn.datasets.fetch_species_distributions": [[497, "sklearn-datasets-fetch-species-distributions"]], "Examples using sklearn.datasets.fetch_species_distributions": [[497, "examples-using-sklearn-datasets-fetch-species-distributions"]], "sklearn.datasets.get_data_home": [[498, "sklearn-datasets-get-data-home"]], "Examples using sklearn.datasets.get_data_home": [[498, "examples-using-sklearn-datasets-get-data-home"]], "sklearn.datasets.load_breast_cancer": [[499, "sklearn-datasets-load-breast-cancer"]], "Examples using sklearn.datasets.load_breast_cancer": [[499, "examples-using-sklearn-datasets-load-breast-cancer"]], "sklearn.datasets.load_diabetes": [[500, "sklearn-datasets-load-diabetes"]], "Examples using sklearn.datasets.load_diabetes": [[500, "examples-using-sklearn-datasets-load-diabetes"]], "sklearn.datasets.load_digits": [[501, "sklearn-datasets-load-digits"]], "Examples using sklearn.datasets.load_digits": [[501, "examples-using-sklearn-datasets-load-digits"]], "sklearn.datasets.load_files": [[502, "sklearn-datasets-load-files"]], "sklearn.datasets.load_iris": [[503, "sklearn-datasets-load-iris"]], "Examples using sklearn.datasets.load_iris": [[503, "examples-using-sklearn-datasets-load-iris"]], "sklearn.datasets.load_linnerud": [[504, "sklearn-datasets-load-linnerud"]], "sklearn.datasets.load_sample_image": [[505, "sklearn-datasets-load-sample-image"]], "Examples using sklearn.datasets.load_sample_image": [[505, "examples-using-sklearn-datasets-load-sample-image"]], "sklearn.datasets.load_sample_images": [[506, "sklearn-datasets-load-sample-images"]], "sklearn.datasets.load_svmlight_file": [[507, "sklearn-datasets-load-svmlight-file"]], "sklearn.datasets.load_svmlight_files": [[508, "sklearn-datasets-load-svmlight-files"]], "sklearn.datasets.load_wine": [[509, "sklearn-datasets-load-wine"]], "Examples using sklearn.datasets.load_wine": [[509, "examples-using-sklearn-datasets-load-wine"]], "sklearn.datasets.make_biclusters": [[510, "sklearn-datasets-make-biclusters"]], "Examples using sklearn.datasets.make_biclusters": [[510, "examples-using-sklearn-datasets-make-biclusters"]], "sklearn.datasets.make_blobs": [[511, "sklearn-datasets-make-blobs"]], "Examples using sklearn.datasets.make_blobs": [[511, "examples-using-sklearn-datasets-make-blobs"]], "sklearn.datasets.make_checkerboard": [[512, "sklearn-datasets-make-checkerboard"]], "Examples using sklearn.datasets.make_checkerboard": [[512, "examples-using-sklearn-datasets-make-checkerboard"]], "sklearn.datasets.make_circles": [[513, "sklearn-datasets-make-circles"]], "Examples using sklearn.datasets.make_circles": [[513, "examples-using-sklearn-datasets-make-circles"]], "sklearn.datasets.make_classification": [[514, "sklearn-datasets-make-classification"]], "Examples using sklearn.datasets.make_classification": [[514, "examples-using-sklearn-datasets-make-classification"]], "sklearn.datasets.make_friedman1": [[515, "sklearn-datasets-make-friedman1"]], "sklearn.datasets.make_friedman2": [[516, "sklearn-datasets-make-friedman2"]], "sklearn.datasets.make_friedman3": [[517, "sklearn-datasets-make-friedman3"]], "sklearn.datasets.make_gaussian_quantiles": [[518, "sklearn-datasets-make-gaussian-quantiles"]], "Examples using sklearn.datasets.make_gaussian_quantiles": [[518, "examples-using-sklearn-datasets-make-gaussian-quantiles"]], "sklearn.datasets.make_hastie_10_2": [[519, "sklearn-datasets-make-hastie-10-2"]], "Examples using sklearn.datasets.make_hastie_10_2": [[519, "examples-using-sklearn-datasets-make-hastie-10-2"]], "sklearn.datasets.make_low_rank_matrix": [[520, "sklearn-datasets-make-low-rank-matrix"]], "Examples using sklearn.datasets.make_low_rank_matrix": [[520, "examples-using-sklearn-datasets-make-low-rank-matrix"]], "sklearn.datasets.make_moons": [[521, "sklearn-datasets-make-moons"]], "Examples using sklearn.datasets.make_moons": [[521, "examples-using-sklearn-datasets-make-moons"]], "sklearn.datasets.make_multilabel_classification": [[522, "sklearn-datasets-make-multilabel-classification"]], "Examples using sklearn.datasets.make_multilabel_classification": [[522, "examples-using-sklearn-datasets-make-multilabel-classification"]], "sklearn.datasets.make_regression": [[523, "sklearn-datasets-make-regression"]], "Examples using sklearn.datasets.make_regression": [[523, "examples-using-sklearn-datasets-make-regression"]], "sklearn.datasets.make_s_curve": [[524, "sklearn-datasets-make-s-curve"]], "Examples using sklearn.datasets.make_s_curve": [[524, "examples-using-sklearn-datasets-make-s-curve"]], "sklearn.datasets.make_sparse_coded_signal": [[525, "sklearn-datasets-make-sparse-coded-signal"]], "Examples using sklearn.datasets.make_sparse_coded_signal": [[525, "examples-using-sklearn-datasets-make-sparse-coded-signal"]], "sklearn.datasets.make_sparse_spd_matrix": [[526, "sklearn-datasets-make-sparse-spd-matrix"]], "Examples using sklearn.datasets.make_sparse_spd_matrix": [[526, "examples-using-sklearn-datasets-make-sparse-spd-matrix"]], "sklearn.datasets.make_sparse_uncorrelated": [[527, "sklearn-datasets-make-sparse-uncorrelated"]], "sklearn.datasets.make_spd_matrix": [[528, "sklearn-datasets-make-spd-matrix"]], "sklearn.datasets.make_swiss_roll": [[529, "sklearn-datasets-make-swiss-roll"]], "Examples using sklearn.datasets.make_swiss_roll": [[529, "examples-using-sklearn-datasets-make-swiss-roll"]], "sklearn.decomposition.DictionaryLearning": [[530, "sklearn-decomposition-dictionarylearning"]], "sklearn.decomposition.FactorAnalysis": [[531, "sklearn-decomposition-factoranalysis"]], "Examples using sklearn.decomposition.FactorAnalysis": [[531, "examples-using-sklearn-decomposition-factoranalysis"]], "sklearn.decomposition.FastICA": [[532, "sklearn-decomposition-fastica"]], "Examples using sklearn.decomposition.FastICA": [[532, "examples-using-sklearn-decomposition-fastica"]], "sklearn.decomposition.IncrementalPCA": [[533, "sklearn-decomposition-incrementalpca"]], "Examples using sklearn.decomposition.IncrementalPCA": [[533, "examples-using-sklearn-decomposition-incrementalpca"]], "sklearn.decomposition.KernelPCA": [[534, "sklearn-decomposition-kernelpca"]], "Examples using sklearn.decomposition.KernelPCA": [[534, "examples-using-sklearn-decomposition-kernelpca"]], "sklearn.decomposition.LatentDirichletAllocation": [[535, "sklearn-decomposition-latentdirichletallocation"]], "Examples using sklearn.decomposition.LatentDirichletAllocation": [[535, "examples-using-sklearn-decomposition-latentdirichletallocation"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[536, "sklearn-decomposition-minibatchdictionarylearning"]], "Examples using sklearn.decomposition.MiniBatchDictionaryLearning": [[536, "examples-using-sklearn-decomposition-minibatchdictionarylearning"]], "sklearn.decomposition.MiniBatchNMF": [[537, "sklearn-decomposition-minibatchnmf"]], "Examples using sklearn.decomposition.MiniBatchNMF": [[537, "examples-using-sklearn-decomposition-minibatchnmf"]], "sklearn.decomposition.MiniBatchSparsePCA": [[538, "sklearn-decomposition-minibatchsparsepca"]], "Examples using sklearn.decomposition.MiniBatchSparsePCA": [[538, "examples-using-sklearn-decomposition-minibatchsparsepca"]], "sklearn.decomposition.NMF": [[539, "sklearn-decomposition-nmf"]], "Examples using sklearn.decomposition.NMF": [[539, "examples-using-sklearn-decomposition-nmf"]], "sklearn.decomposition.PCA": [[540, "sklearn-decomposition-pca"]], "Examples using sklearn.decomposition.PCA": [[540, "examples-using-sklearn-decomposition-pca"]], "sklearn.decomposition.SparseCoder": [[541, "sklearn-decomposition-sparsecoder"]], "Examples using sklearn.decomposition.SparseCoder": [[541, "examples-using-sklearn-decomposition-sparsecoder"]], "sklearn.decomposition.SparsePCA": [[542, "sklearn-decomposition-sparsepca"]], "Examples using sklearn.decomposition.SparsePCA": [[542, "examples-using-sklearn-decomposition-sparsepca"]], "sklearn.decomposition.TruncatedSVD": [[543, "sklearn-decomposition-truncatedsvd"]], "Examples using sklearn.decomposition.TruncatedSVD": [[543, "examples-using-sklearn-decomposition-truncatedsvd"]], "sklearn.decomposition.dict_learning": [[544, "sklearn-decomposition-dict-learning"]], "sklearn.decomposition.dict_learning_online": [[545, "sklearn-decomposition-dict-learning-online"]], "sklearn.decomposition.non_negative_factorization": [[546, "sklearn-decomposition-non-negative-factorization"]], "sklearn.decomposition.sparse_encode": [[547, "sklearn-decomposition-sparse-encode"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[548, "sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[548, "examples-using-sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[549, "sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[549, "examples-using-sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "sklearn.dummy.DummyClassifier": [[550, "sklearn-dummy-dummyclassifier"]], "Examples using sklearn.dummy.DummyClassifier": [[550, "examples-using-sklearn-dummy-dummyclassifier"]], "sklearn.dummy.DummyRegressor": [[551, "sklearn-dummy-dummyregressor"]], "Examples using sklearn.dummy.DummyRegressor": [[551, "examples-using-sklearn-dummy-dummyregressor"]], "sklearn.ensemble.AdaBoostClassifier": [[552, "sklearn-ensemble-adaboostclassifier"]], "Examples using sklearn.ensemble.AdaBoostClassifier": [[552, "examples-using-sklearn-ensemble-adaboostclassifier"]], "sklearn.ensemble.AdaBoostRegressor": [[553, "sklearn-ensemble-adaboostregressor"]], "Examples using sklearn.ensemble.AdaBoostRegressor": [[553, "examples-using-sklearn-ensemble-adaboostregressor"]], "sklearn.ensemble.BaggingClassifier": [[554, "sklearn-ensemble-baggingclassifier"]], "sklearn.ensemble.BaggingRegressor": [[555, "sklearn-ensemble-baggingregressor"]], "Examples using sklearn.ensemble.BaggingRegressor": [[555, "examples-using-sklearn-ensemble-baggingregressor"]], "sklearn.ensemble.ExtraTreesClassifier": [[556, "sklearn-ensemble-extratreesclassifier"]], "Examples using sklearn.ensemble.ExtraTreesClassifier": [[556, "examples-using-sklearn-ensemble-extratreesclassifier"]], "sklearn.ensemble.ExtraTreesRegressor": [[557, "sklearn-ensemble-extratreesregressor"]], "Examples using sklearn.ensemble.ExtraTreesRegressor": [[557, "examples-using-sklearn-ensemble-extratreesregressor"]], "sklearn.ensemble.GradientBoostingClassifier": [[558, "sklearn-ensemble-gradientboostingclassifier"]], "Examples using sklearn.ensemble.GradientBoostingClassifier": [[558, "examples-using-sklearn-ensemble-gradientboostingclassifier"]], "sklearn.ensemble.GradientBoostingRegressor": [[559, "sklearn-ensemble-gradientboostingregressor"]], "Examples using sklearn.ensemble.GradientBoostingRegressor": [[559, "examples-using-sklearn-ensemble-gradientboostingregressor"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[560, "sklearn-ensemble-histgradientboostingclassifier"]], "Examples using sklearn.ensemble.HistGradientBoostingClassifier": [[560, "examples-using-sklearn-ensemble-histgradientboostingclassifier"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[561, "sklearn-ensemble-histgradientboostingregressor"]], "Examples using sklearn.ensemble.HistGradientBoostingRegressor": [[561, "examples-using-sklearn-ensemble-histgradientboostingregressor"]], "sklearn.ensemble.IsolationForest": [[562, "sklearn-ensemble-isolationforest"]], "Examples using sklearn.ensemble.IsolationForest": [[562, "examples-using-sklearn-ensemble-isolationforest"]], "sklearn.ensemble.RandomForestClassifier": [[563, "sklearn-ensemble-randomforestclassifier"]], "Examples using sklearn.ensemble.RandomForestClassifier": [[563, "examples-using-sklearn-ensemble-randomforestclassifier"]], "sklearn.ensemble.RandomForestRegressor": [[564, "sklearn-ensemble-randomforestregressor"]], "Examples using sklearn.ensemble.RandomForestRegressor": [[564, "examples-using-sklearn-ensemble-randomforestregressor"]], "sklearn.ensemble.RandomTreesEmbedding": [[565, "sklearn-ensemble-randomtreesembedding"]], "Examples using sklearn.ensemble.RandomTreesEmbedding": [[565, "examples-using-sklearn-ensemble-randomtreesembedding"]], "sklearn.ensemble.StackingClassifier": [[566, "sklearn-ensemble-stackingclassifier"]], "Examples using sklearn.ensemble.StackingClassifier": [[566, "examples-using-sklearn-ensemble-stackingclassifier"]], "sklearn.ensemble.StackingRegressor": [[567, "sklearn-ensemble-stackingregressor"]], "Examples using sklearn.ensemble.StackingRegressor": [[567, "examples-using-sklearn-ensemble-stackingregressor"]], "sklearn.ensemble.VotingClassifier": [[568, "sklearn-ensemble-votingclassifier"]], "Examples using sklearn.ensemble.VotingClassifier": [[568, "examples-using-sklearn-ensemble-votingclassifier"]], "sklearn.ensemble.VotingRegressor": [[569, "sklearn-ensemble-votingregressor"]], "Examples using sklearn.ensemble.VotingRegressor": [[569, "examples-using-sklearn-ensemble-votingregressor"]], "sklearn.exceptions.ConvergenceWarning": [[570, "sklearn-exceptions-convergencewarning"]], "Examples using sklearn.exceptions.ConvergenceWarning": [[570, "examples-using-sklearn-exceptions-convergencewarning"]], "sklearn.exceptions.DataConversionWarning": [[571, "sklearn-exceptions-dataconversionwarning"]], "sklearn.exceptions.DataDimensionalityWarning": [[572, "sklearn-exceptions-datadimensionalitywarning"]], "sklearn.exceptions.EfficiencyWarning": [[573, "sklearn-exceptions-efficiencywarning"]], "sklearn.exceptions.FitFailedWarning": [[574, "sklearn-exceptions-fitfailedwarning"]], "sklearn.exceptions.InconsistentVersionWarning": [[575, "sklearn-exceptions-inconsistentversionwarning"]], "sklearn.exceptions.NotFittedError": [[576, "sklearn-exceptions-notfittederror"]], "sklearn.exceptions.UndefinedMetricWarning": [[577, "sklearn-exceptions-undefinedmetricwarning"]], "sklearn.experimental.enable_halving_search_cv": [[578, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[579, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.feature_extraction.DictVectorizer": [[580, "sklearn-feature-extraction-dictvectorizer"]], "Examples using sklearn.feature_extraction.DictVectorizer": [[580, "examples-using-sklearn-feature-extraction-dictvectorizer"]], "sklearn.feature_extraction.FeatureHasher": [[581, "sklearn-feature-extraction-featurehasher"]], "Examples using sklearn.feature_extraction.FeatureHasher": [[581, "examples-using-sklearn-feature-extraction-featurehasher"]], "sklearn.feature_extraction.image.PatchExtractor": [[582, "sklearn-feature-extraction-image-patchextractor"]], "sklearn.feature_extraction.image.extract_patches_2d": [[583, "sklearn-feature-extraction-image-extract-patches-2d"]], "Examples using sklearn.feature_extraction.image.extract_patches_2d": [[583, "examples-using-sklearn-feature-extraction-image-extract-patches-2d"]], "sklearn.feature_extraction.image.grid_to_graph": [[584, "sklearn-feature-extraction-image-grid-to-graph"]], "sklearn.feature_extraction.image.img_to_graph": [[585, "sklearn-feature-extraction-image-img-to-graph"]], "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[586, "sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "Examples using sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[586, "examples-using-sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "sklearn.feature_extraction.text.CountVectorizer": [[587, "sklearn-feature-extraction-text-countvectorizer"]], "Examples using sklearn.feature_extraction.text.CountVectorizer": [[587, "examples-using-sklearn-feature-extraction-text-countvectorizer"]], "sklearn.feature_extraction.text.HashingVectorizer": [[588, "sklearn-feature-extraction-text-hashingvectorizer"]], "Examples using sklearn.feature_extraction.text.HashingVectorizer": [[588, "examples-using-sklearn-feature-extraction-text-hashingvectorizer"]], "sklearn.feature_extraction.text.TfidfTransformer": [[589, "sklearn-feature-extraction-text-tfidftransformer"]], "Examples using sklearn.feature_extraction.text.TfidfTransformer": [[589, "examples-using-sklearn-feature-extraction-text-tfidftransformer"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[590, "sklearn-feature-extraction-text-tfidfvectorizer"]], "Examples using sklearn.feature_extraction.text.TfidfVectorizer": [[590, "examples-using-sklearn-feature-extraction-text-tfidfvectorizer"]], "sklearn.feature_selection.GenericUnivariateSelect": [[591, "sklearn-feature-selection-genericunivariateselect"]], "sklearn.feature_selection.RFE": [[592, "sklearn-feature-selection-rfe"]], "Examples using sklearn.feature_selection.RFE": [[592, "examples-using-sklearn-feature-selection-rfe"]], "sklearn.feature_selection.RFECV": [[593, "sklearn-feature-selection-rfecv"]], "Examples using sklearn.feature_selection.RFECV": [[593, "examples-using-sklearn-feature-selection-rfecv"]], "sklearn.feature_selection.SelectFdr": [[594, "sklearn-feature-selection-selectfdr"]], "sklearn.feature_selection.SelectFpr": [[595, "sklearn-feature-selection-selectfpr"]], "sklearn.feature_selection.SelectFromModel": [[596, "sklearn-feature-selection-selectfrommodel"]], "Examples using sklearn.feature_selection.SelectFromModel": [[596, "examples-using-sklearn-feature-selection-selectfrommodel"]], "sklearn.feature_selection.SelectFwe": [[597, "sklearn-feature-selection-selectfwe"]], "sklearn.feature_selection.SelectKBest": [[598, "sklearn-feature-selection-selectkbest"]], "Examples using sklearn.feature_selection.SelectKBest": [[598, "examples-using-sklearn-feature-selection-selectkbest"]], "sklearn.feature_selection.SelectPercentile": [[599, "sklearn-feature-selection-selectpercentile"]], "Examples using sklearn.feature_selection.SelectPercentile": [[599, "examples-using-sklearn-feature-selection-selectpercentile"]], "sklearn.feature_selection.SelectorMixin": [[600, "sklearn-feature-selection-selectormixin"]], "sklearn.feature_selection.SequentialFeatureSelector": [[601, "sklearn-feature-selection-sequentialfeatureselector"]], "Examples using sklearn.feature_selection.SequentialFeatureSelector": [[601, "examples-using-sklearn-feature-selection-sequentialfeatureselector"]], "sklearn.feature_selection.VarianceThreshold": [[602, "sklearn-feature-selection-variancethreshold"]], "sklearn.feature_selection.chi2": [[603, "sklearn-feature-selection-chi2"]], "Examples using sklearn.feature_selection.chi2": [[603, "examples-using-sklearn-feature-selection-chi2"]], "sklearn.feature_selection.f_classif": [[604, "sklearn-feature-selection-f-classif"]], "Examples using sklearn.feature_selection.f_classif": [[604, "examples-using-sklearn-feature-selection-f-classif"]], "sklearn.feature_selection.f_regression": [[605, "sklearn-feature-selection-f-regression"]], "Examples using sklearn.feature_selection.f_regression": [[605, "examples-using-sklearn-feature-selection-f-regression"]], "sklearn.feature_selection.mutual_info_classif": [[606, "sklearn-feature-selection-mutual-info-classif"]], "Examples using sklearn.feature_selection.mutual_info_classif": [[606, "examples-using-sklearn-feature-selection-mutual-info-classif"]], "sklearn.feature_selection.mutual_info_regression": [[607, "sklearn-feature-selection-mutual-info-regression"]], "Examples using sklearn.feature_selection.mutual_info_regression": [[607, "examples-using-sklearn-feature-selection-mutual-info-regression"]], "sklearn.feature_selection.r_regression": [[608, "sklearn-feature-selection-r-regression"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[609, "sklearn-gaussian-process-gaussianprocessclassifier"]], "Examples using sklearn.gaussian_process.GaussianProcessClassifier": [[609, "examples-using-sklearn-gaussian-process-gaussianprocessclassifier"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[610, "sklearn-gaussian-process-gaussianprocessregressor"]], "Examples using sklearn.gaussian_process.GaussianProcessRegressor": [[610, "examples-using-sklearn-gaussian-process-gaussianprocessregressor"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[611, "sklearn-gaussian-process-kernels-compoundkernel"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[612, "sklearn-gaussian-process-kernels-constantkernel"]], "Examples using sklearn.gaussian_process.kernels.ConstantKernel": [[612, "examples-using-sklearn-gaussian-process-kernels-constantkernel"]], "sklearn.gaussian_process.kernels.DotProduct": [[613, "sklearn-gaussian-process-kernels-dotproduct"]], "Examples using sklearn.gaussian_process.kernels.DotProduct": [[613, "examples-using-sklearn-gaussian-process-kernels-dotproduct"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[614, "sklearn-gaussian-process-kernels-expsinesquared"]], "Examples using sklearn.gaussian_process.kernels.ExpSineSquared": [[614, "examples-using-sklearn-gaussian-process-kernels-expsinesquared"]], "sklearn.gaussian_process.kernels.Exponentiation": [[615, "sklearn-gaussian-process-kernels-exponentiation"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[616, "sklearn-gaussian-process-kernels-hyperparameter"]], "Examples using sklearn.gaussian_process.kernels.Hyperparameter": [[616, "examples-using-sklearn-gaussian-process-kernels-hyperparameter"]], "sklearn.gaussian_process.kernels.Kernel": [[617, "sklearn-gaussian-process-kernels-kernel"]], "Examples using sklearn.gaussian_process.kernels.Kernel": [[617, "examples-using-sklearn-gaussian-process-kernels-kernel"]], "sklearn.gaussian_process.kernels.Matern": [[618, "sklearn-gaussian-process-kernels-matern"]], "Examples using sklearn.gaussian_process.kernels.Matern": [[618, "examples-using-sklearn-gaussian-process-kernels-matern"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[619, "sklearn-gaussian-process-kernels-pairwisekernel"]], "sklearn.gaussian_process.kernels.Product": [[620, "sklearn-gaussian-process-kernels-product"]], "sklearn.gaussian_process.kernels.RBF": [[621, "sklearn-gaussian-process-kernels-rbf"]], "Examples using sklearn.gaussian_process.kernels.RBF": [[621, "examples-using-sklearn-gaussian-process-kernels-rbf"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[622, "sklearn-gaussian-process-kernels-rationalquadratic"]], "Examples using sklearn.gaussian_process.kernels.RationalQuadratic": [[622, "examples-using-sklearn-gaussian-process-kernels-rationalquadratic"]], "sklearn.gaussian_process.kernels.Sum": [[623, "sklearn-gaussian-process-kernels-sum"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[624, "sklearn-gaussian-process-kernels-whitekernel"]], "Examples using sklearn.gaussian_process.kernels.WhiteKernel": [[624, "examples-using-sklearn-gaussian-process-kernels-whitekernel"]], "sklearn.get_config": [[625, "sklearn-get-config"]], "sklearn.impute.IterativeImputer": [[626, "sklearn-impute-iterativeimputer"]], "Examples using sklearn.impute.IterativeImputer": [[626, "examples-using-sklearn-impute-iterativeimputer"]], "sklearn.impute.KNNImputer": [[627, "sklearn-impute-knnimputer"]], "Examples using sklearn.impute.KNNImputer": [[627, "examples-using-sklearn-impute-knnimputer"]], "sklearn.impute.MissingIndicator": [[628, "sklearn-impute-missingindicator"]], "sklearn.impute.SimpleImputer": [[629, "sklearn-impute-simpleimputer"]], "Examples using sklearn.impute.SimpleImputer": [[629, "examples-using-sklearn-impute-simpleimputer"]], "sklearn.inspection.DecisionBoundaryDisplay": [[630, "sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay": [[630, "examples-using-sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay.from_estimator": [[630, "examples-using-sklearn-inspection-decisionboundarydisplay-from-estimator"]], "sklearn.inspection.PartialDependenceDisplay": [[631, "sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay": [[631, "examples-using-sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay.from_estimator": [[631, "examples-using-sklearn-inspection-partialdependencedisplay-from-estimator"]], "sklearn.inspection.partial_dependence": [[632, "sklearn-inspection-partial-dependence"]], "Examples using sklearn.inspection.partial_dependence": [[632, "examples-using-sklearn-inspection-partial-dependence"]], "sklearn.inspection.permutation_importance": [[633, "sklearn-inspection-permutation-importance"]], "Examples using sklearn.inspection.permutation_importance": [[633, "examples-using-sklearn-inspection-permutation-importance"]], "sklearn.isotonic.IsotonicRegression": [[634, "sklearn-isotonic-isotonicregression"]], "Examples using sklearn.isotonic.IsotonicRegression": [[634, "examples-using-sklearn-isotonic-isotonicregression"]], "sklearn.isotonic.check_increasing": [[635, "sklearn-isotonic-check-increasing"]], "sklearn.isotonic.isotonic_regression": [[636, "sklearn-isotonic-isotonic-regression"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[637, "sklearn-kernel-approximation-additivechi2sampler"]], "sklearn.kernel_approximation.Nystroem": [[638, "sklearn-kernel-approximation-nystroem"]], "Examples using sklearn.kernel_approximation.Nystroem": [[638, "examples-using-sklearn-kernel-approximation-nystroem"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[639, "sklearn-kernel-approximation-polynomialcountsketch"]], "Examples using sklearn.kernel_approximation.PolynomialCountSketch": [[639, "examples-using-sklearn-kernel-approximation-polynomialcountsketch"]], "sklearn.kernel_approximation.RBFSampler": [[640, "sklearn-kernel-approximation-rbfsampler"]], "Examples using sklearn.kernel_approximation.RBFSampler": [[640, "examples-using-sklearn-kernel-approximation-rbfsampler"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[641, "sklearn-kernel-approximation-skewedchi2sampler"]], "sklearn.kernel_ridge.KernelRidge": [[642, "sklearn-kernel-ridge-kernelridge"]], "Examples using sklearn.kernel_ridge.KernelRidge": [[642, "examples-using-sklearn-kernel-ridge-kernelridge"]], "sklearn.linear_model.ARDRegression": [[643, "sklearn-linear-model-ardregression"]], "Examples using sklearn.linear_model.ARDRegression": [[643, "examples-using-sklearn-linear-model-ardregression"]], "sklearn.linear_model.BayesianRidge": [[644, "sklearn-linear-model-bayesianridge"]], "Examples using sklearn.linear_model.BayesianRidge": [[644, "examples-using-sklearn-linear-model-bayesianridge"]], "sklearn.linear_model.ElasticNet": [[645, "sklearn-linear-model-elasticnet"]], "Examples using sklearn.linear_model.ElasticNet": [[645, "examples-using-sklearn-linear-model-elasticnet"]], "sklearn.linear_model.ElasticNetCV": [[646, "sklearn-linear-model-elasticnetcv"]], "Examples using sklearn.linear_model.ElasticNetCV": [[646, "examples-using-sklearn-linear-model-elasticnetcv"]], "sklearn.linear_model.GammaRegressor": [[647, "sklearn-linear-model-gammaregressor"]], "Examples using sklearn.linear_model.GammaRegressor": [[647, "examples-using-sklearn-linear-model-gammaregressor"]], "sklearn.linear_model.HuberRegressor": [[648, "sklearn-linear-model-huberregressor"]], "Examples using sklearn.linear_model.HuberRegressor": [[648, "examples-using-sklearn-linear-model-huberregressor"]], "sklearn.linear_model.Lars": [[649, "sklearn-linear-model-lars"]], "sklearn.linear_model.LarsCV": [[650, "sklearn-linear-model-larscv"]], "sklearn.linear_model.Lasso": [[651, "sklearn-linear-model-lasso"]], "Examples using sklearn.linear_model.Lasso": [[651, "examples-using-sklearn-linear-model-lasso"]], "sklearn.linear_model.LassoCV": [[652, "sklearn-linear-model-lassocv"]], "Examples using sklearn.linear_model.LassoCV": [[652, "examples-using-sklearn-linear-model-lassocv"]], "sklearn.linear_model.LassoLars": [[653, "sklearn-linear-model-lassolars"]], "sklearn.linear_model.LassoLarsCV": [[654, "sklearn-linear-model-lassolarscv"]], "Examples using sklearn.linear_model.LassoLarsCV": [[654, "examples-using-sklearn-linear-model-lassolarscv"]], "sklearn.linear_model.LassoLarsIC": [[655, "sklearn-linear-model-lassolarsic"]], "Examples using sklearn.linear_model.LassoLarsIC": [[655, "examples-using-sklearn-linear-model-lassolarsic"]], "sklearn.linear_model.LinearRegression": [[656, "sklearn-linear-model-linearregression"]], "Examples using sklearn.linear_model.LinearRegression": [[656, "examples-using-sklearn-linear-model-linearregression"]], "sklearn.linear_model.LogisticRegression": [[657, "sklearn-linear-model-logisticregression"]], "Examples using sklearn.linear_model.LogisticRegression": [[657, "examples-using-sklearn-linear-model-logisticregression"]], "sklearn.linear_model.LogisticRegressionCV": [[658, "sklearn-linear-model-logisticregressioncv"]], "Examples using sklearn.linear_model.LogisticRegressionCV": [[658, "examples-using-sklearn-linear-model-logisticregressioncv"]], "sklearn.linear_model.MultiTaskElasticNet": [[659, "sklearn-linear-model-multitaskelasticnet"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[660, "sklearn-linear-model-multitaskelasticnetcv"]], "sklearn.linear_model.MultiTaskLasso": [[661, "sklearn-linear-model-multitasklasso"]], "Examples using sklearn.linear_model.MultiTaskLasso": [[661, "examples-using-sklearn-linear-model-multitasklasso"]], "sklearn.linear_model.MultiTaskLassoCV": [[662, "sklearn-linear-model-multitasklassocv"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[663, "sklearn-linear-model-orthogonalmatchingpursuit"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuit": [[663, "examples-using-sklearn-linear-model-orthogonalmatchingpursuit"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[664, "sklearn-linear-model-orthogonalmatchingpursuitcv"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuitCV": [[664, "examples-using-sklearn-linear-model-orthogonalmatchingpursuitcv"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[665, "sklearn-linear-model-passiveaggressiveclassifier"]], "Examples using sklearn.linear_model.PassiveAggressiveClassifier": [[665, "examples-using-sklearn-linear-model-passiveaggressiveclassifier"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[666, "sklearn-linear-model-passiveaggressiveregressor"]], "sklearn.linear_model.Perceptron": [[667, "sklearn-linear-model-perceptron"]], "Examples using sklearn.linear_model.Perceptron": [[667, "examples-using-sklearn-linear-model-perceptron"]], "sklearn.linear_model.PoissonRegressor": [[668, "sklearn-linear-model-poissonregressor"]], "Examples using sklearn.linear_model.PoissonRegressor": [[668, "examples-using-sklearn-linear-model-poissonregressor"]], "sklearn.linear_model.QuantileRegressor": [[669, "sklearn-linear-model-quantileregressor"]], "Examples using sklearn.linear_model.QuantileRegressor": [[669, "examples-using-sklearn-linear-model-quantileregressor"]], "sklearn.linear_model.RANSACRegressor": [[670, "sklearn-linear-model-ransacregressor"]], "Examples using sklearn.linear_model.RANSACRegressor": [[670, "examples-using-sklearn-linear-model-ransacregressor"]], "sklearn.linear_model.Ridge": [[671, "sklearn-linear-model-ridge"]], "Examples using sklearn.linear_model.Ridge": [[671, "examples-using-sklearn-linear-model-ridge"]], "sklearn.linear_model.RidgeCV": [[672, "sklearn-linear-model-ridgecv"]], "Examples using sklearn.linear_model.RidgeCV": [[672, "examples-using-sklearn-linear-model-ridgecv"]], "sklearn.linear_model.RidgeClassifier": [[673, "sklearn-linear-model-ridgeclassifier"]], "Examples using sklearn.linear_model.RidgeClassifier": [[673, "examples-using-sklearn-linear-model-ridgeclassifier"]], "sklearn.linear_model.RidgeClassifierCV": [[674, "sklearn-linear-model-ridgeclassifiercv"]], "sklearn.linear_model.SGDClassifier": [[675, "sklearn-linear-model-sgdclassifier"]], "Examples using sklearn.linear_model.SGDClassifier": [[675, "examples-using-sklearn-linear-model-sgdclassifier"]], "sklearn.linear_model.SGDOneClassSVM": [[676, "sklearn-linear-model-sgdoneclasssvm"]], "Examples using sklearn.linear_model.SGDOneClassSVM": [[676, "examples-using-sklearn-linear-model-sgdoneclasssvm"]], "sklearn.linear_model.SGDRegressor": [[677, "sklearn-linear-model-sgdregressor"]], "Examples using sklearn.linear_model.SGDRegressor": [[677, "examples-using-sklearn-linear-model-sgdregressor"]], "sklearn.linear_model.TheilSenRegressor": [[678, "sklearn-linear-model-theilsenregressor"]], "Examples using sklearn.linear_model.TheilSenRegressor": [[678, "examples-using-sklearn-linear-model-theilsenregressor"]], "sklearn.linear_model.TweedieRegressor": [[679, "sklearn-linear-model-tweedieregressor"]], "Examples using sklearn.linear_model.TweedieRegressor": [[679, "examples-using-sklearn-linear-model-tweedieregressor"]], "sklearn.linear_model.enet_path": [[680, "sklearn-linear-model-enet-path"]], "Examples using sklearn.linear_model.enet_path": [[680, "examples-using-sklearn-linear-model-enet-path"]], "sklearn.linear_model.lars_path": [[681, "sklearn-linear-model-lars-path"]], "Examples using sklearn.linear_model.lars_path": [[681, "examples-using-sklearn-linear-model-lars-path"]], "sklearn.linear_model.lars_path_gram": [[682, "sklearn-linear-model-lars-path-gram"]], "sklearn.linear_model.lasso_path": [[683, "sklearn-linear-model-lasso-path"]], "Examples using sklearn.linear_model.lasso_path": [[683, "examples-using-sklearn-linear-model-lasso-path"]], "sklearn.linear_model.orthogonal_mp": [[684, "sklearn-linear-model-orthogonal-mp"]], "sklearn.linear_model.orthogonal_mp_gram": [[685, "sklearn-linear-model-orthogonal-mp-gram"]], "sklearn.linear_model.ridge_regression": [[686, "sklearn-linear-model-ridge-regression"]], "sklearn.manifold.Isomap": [[687, "sklearn-manifold-isomap"]], "Examples using sklearn.manifold.Isomap": [[687, "examples-using-sklearn-manifold-isomap"]], "sklearn.manifold.LocallyLinearEmbedding": [[688, "sklearn-manifold-locallylinearembedding"]], "Examples using sklearn.manifold.LocallyLinearEmbedding": [[688, "examples-using-sklearn-manifold-locallylinearembedding"]], "sklearn.manifold.MDS": [[689, "sklearn-manifold-mds"]], "Examples using sklearn.manifold.MDS": [[689, "examples-using-sklearn-manifold-mds"]], "sklearn.manifold.SpectralEmbedding": [[690, "sklearn-manifold-spectralembedding"]], "Examples using sklearn.manifold.SpectralEmbedding": [[690, "examples-using-sklearn-manifold-spectralembedding"]], "sklearn.manifold.TSNE": [[691, "sklearn-manifold-tsne"]], "Examples using sklearn.manifold.TSNE": [[691, "examples-using-sklearn-manifold-tsne"]], "sklearn.manifold.locally_linear_embedding": [[692, "sklearn-manifold-locally-linear-embedding"]], "Examples using sklearn.manifold.locally_linear_embedding": [[692, "examples-using-sklearn-manifold-locally-linear-embedding"]], "sklearn.manifold.smacof": [[693, "sklearn-manifold-smacof"]], "sklearn.manifold.spectral_embedding": [[694, "sklearn-manifold-spectral-embedding"]], "sklearn.manifold.trustworthiness": [[695, "sklearn-manifold-trustworthiness"]], "sklearn.metrics.ConfusionMatrixDisplay": [[696, "sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay": [[696, "examples-using-sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_estimator": [[696, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-estimator"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_predictions": [[696, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-predictions"]], "sklearn.metrics.DetCurveDisplay": [[697, "sklearn-metrics-detcurvedisplay"]], "Examples using sklearn.metrics.DetCurveDisplay.from_estimator": [[697, "examples-using-sklearn-metrics-detcurvedisplay-from-estimator"]], "sklearn.metrics.DistanceMetric": [[698, "sklearn-metrics-distancemetric"]], "sklearn.metrics.PrecisionRecallDisplay": [[699, "sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay": [[699, "examples-using-sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_estimator": [[699, "examples-using-sklearn-metrics-precisionrecalldisplay-from-estimator"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_predictions": [[699, "examples-using-sklearn-metrics-precisionrecalldisplay-from-predictions"]], "sklearn.metrics.PredictionErrorDisplay": [[700, "sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay": [[700, "examples-using-sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_estimator": [[700, "examples-using-sklearn-metrics-predictionerrordisplay-from-estimator"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_predictions": [[700, "examples-using-sklearn-metrics-predictionerrordisplay-from-predictions"]], "sklearn.metrics.RocCurveDisplay": [[701, "sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay": [[701, "examples-using-sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay.from_estimator": [[701, "examples-using-sklearn-metrics-roccurvedisplay-from-estimator"]], "Examples using sklearn.metrics.RocCurveDisplay.from_predictions": [[701, "examples-using-sklearn-metrics-roccurvedisplay-from-predictions"]], "sklearn.metrics.accuracy_score": [[702, "sklearn-metrics-accuracy-score"]], "Examples using sklearn.metrics.accuracy_score": [[702, "examples-using-sklearn-metrics-accuracy-score"]], "sklearn.metrics.adjusted_mutual_info_score": [[703, "sklearn-metrics-adjusted-mutual-info-score"]], "Examples using sklearn.metrics.adjusted_mutual_info_score": [[703, "examples-using-sklearn-metrics-adjusted-mutual-info-score"]], "sklearn.metrics.adjusted_rand_score": [[704, "sklearn-metrics-adjusted-rand-score"]], "Examples using sklearn.metrics.adjusted_rand_score": [[704, "examples-using-sklearn-metrics-adjusted-rand-score"]], "sklearn.metrics.auc": [[705, "sklearn-metrics-auc"]], "Examples using sklearn.metrics.auc": [[705, "examples-using-sklearn-metrics-auc"]], "sklearn.metrics.average_precision_score": [[706, "sklearn-metrics-average-precision-score"]], "Examples using sklearn.metrics.average_precision_score": [[706, "examples-using-sklearn-metrics-average-precision-score"]], "sklearn.metrics.balanced_accuracy_score": [[707, "sklearn-metrics-balanced-accuracy-score"]], "sklearn.metrics.brier_score_loss": [[708, "sklearn-metrics-brier-score-loss"]], "Examples using sklearn.metrics.brier_score_loss": [[708, "examples-using-sklearn-metrics-brier-score-loss"]], "sklearn.metrics.calinski_harabasz_score": [[709, "sklearn-metrics-calinski-harabasz-score"]], "sklearn.metrics.check_scoring": [[710, "sklearn-metrics-check-scoring"]], "sklearn.metrics.class_likelihood_ratios": [[711, "sklearn-metrics-class-likelihood-ratios"]], "Examples using sklearn.metrics.class_likelihood_ratios": [[711, "examples-using-sklearn-metrics-class-likelihood-ratios"]], "sklearn.metrics.classification_report": [[712, "sklearn-metrics-classification-report"]], "Examples using sklearn.metrics.classification_report": [[712, "examples-using-sklearn-metrics-classification-report"]], "sklearn.metrics.cluster.contingency_matrix": [[713, "sklearn-metrics-cluster-contingency-matrix"]], "sklearn.metrics.cluster.pair_confusion_matrix": [[714, "sklearn-metrics-cluster-pair-confusion-matrix"]], "sklearn.metrics.cohen_kappa_score": [[715, "sklearn-metrics-cohen-kappa-score"]], "sklearn.metrics.completeness_score": [[716, "sklearn-metrics-completeness-score"]], "Examples using sklearn.metrics.completeness_score": [[716, "examples-using-sklearn-metrics-completeness-score"]], "sklearn.metrics.confusion_matrix": [[717, "sklearn-metrics-confusion-matrix"]], "Examples using sklearn.metrics.confusion_matrix": [[717, "examples-using-sklearn-metrics-confusion-matrix"]], "sklearn.metrics.consensus_score": [[718, "sklearn-metrics-consensus-score"]], "Examples using sklearn.metrics.consensus_score": [[718, "examples-using-sklearn-metrics-consensus-score"]], "sklearn.metrics.coverage_error": [[719, "sklearn-metrics-coverage-error"]], "sklearn.metrics.d2_absolute_error_score": [[720, "sklearn-metrics-d2-absolute-error-score"]], "sklearn.metrics.d2_pinball_score": [[721, "sklearn-metrics-d2-pinball-score"]], "sklearn.metrics.d2_tweedie_score": [[722, "sklearn-metrics-d2-tweedie-score"]], "sklearn.metrics.davies_bouldin_score": [[723, "sklearn-metrics-davies-bouldin-score"]], "sklearn.metrics.dcg_score": [[724, "sklearn-metrics-dcg-score"]], "sklearn.metrics.det_curve": [[725, "sklearn-metrics-det-curve"]], "Examples using sklearn.metrics.det_curve": [[725, "examples-using-sklearn-metrics-det-curve"]], "sklearn.metrics.explained_variance_score": [[726, "sklearn-metrics-explained-variance-score"]], "sklearn.metrics.f1_score": [[727, "sklearn-metrics-f1-score"]], "Examples using sklearn.metrics.f1_score": [[727, "examples-using-sklearn-metrics-f1-score"]], "sklearn.metrics.fbeta_score": [[728, "sklearn-metrics-fbeta-score"]], "sklearn.metrics.fowlkes_mallows_score": [[729, "sklearn-metrics-fowlkes-mallows-score"]], "sklearn.metrics.get_scorer": [[730, "sklearn-metrics-get-scorer"]], "sklearn.metrics.get_scorer_names": [[731, "sklearn-metrics-get-scorer-names"]], "sklearn.metrics.hamming_loss": [[732, "sklearn-metrics-hamming-loss"]], "Examples using sklearn.metrics.hamming_loss": [[732, "examples-using-sklearn-metrics-hamming-loss"]], "sklearn.metrics.hinge_loss": [[733, "sklearn-metrics-hinge-loss"]], "Examples using sklearn.metrics.hinge_loss": [[733, "examples-using-sklearn-metrics-hinge-loss"]], "sklearn.metrics.homogeneity_completeness_v_measure": [[734, "sklearn-metrics-homogeneity-completeness-v-measure"]], "sklearn.metrics.homogeneity_score": [[735, "sklearn-metrics-homogeneity-score"]], "Examples using sklearn.metrics.homogeneity_score": [[735, "examples-using-sklearn-metrics-homogeneity-score"]], "sklearn.metrics.jaccard_score": [[736, "sklearn-metrics-jaccard-score"]], "Examples using sklearn.metrics.jaccard_score": [[736, "examples-using-sklearn-metrics-jaccard-score"]], "sklearn.metrics.label_ranking_average_precision_score": [[737, "sklearn-metrics-label-ranking-average-precision-score"]], "sklearn.metrics.label_ranking_loss": [[738, "sklearn-metrics-label-ranking-loss"]], "sklearn.metrics.log_loss": [[739, "sklearn-metrics-log-loss"]], "Examples using sklearn.metrics.log_loss": [[739, "examples-using-sklearn-metrics-log-loss"]], "sklearn.metrics.make_scorer": [[740, "sklearn-metrics-make-scorer"]], "Examples using sklearn.metrics.make_scorer": [[740, "examples-using-sklearn-metrics-make-scorer"]], "sklearn.metrics.matthews_corrcoef": [[741, "sklearn-metrics-matthews-corrcoef"]], "sklearn.metrics.max_error": [[742, "sklearn-metrics-max-error"]], "sklearn.metrics.mean_absolute_error": [[743, "sklearn-metrics-mean-absolute-error"]], "Examples using sklearn.metrics.mean_absolute_error": [[743, "examples-using-sklearn-metrics-mean-absolute-error"]], "sklearn.metrics.mean_absolute_percentage_error": [[744, "sklearn-metrics-mean-absolute-percentage-error"]], "Examples using sklearn.metrics.mean_absolute_percentage_error": [[744, "examples-using-sklearn-metrics-mean-absolute-percentage-error"]], "sklearn.metrics.mean_gamma_deviance": [[745, "sklearn-metrics-mean-gamma-deviance"]], "sklearn.metrics.mean_pinball_loss": [[746, "sklearn-metrics-mean-pinball-loss"]], "Examples using sklearn.metrics.mean_pinball_loss": [[746, "examples-using-sklearn-metrics-mean-pinball-loss"]], "sklearn.metrics.mean_poisson_deviance": [[747, "sklearn-metrics-mean-poisson-deviance"]], "Examples using sklearn.metrics.mean_poisson_deviance": [[747, "examples-using-sklearn-metrics-mean-poisson-deviance"]], "sklearn.metrics.mean_squared_error": [[748, "sklearn-metrics-mean-squared-error"]], "Examples using sklearn.metrics.mean_squared_error": [[748, "examples-using-sklearn-metrics-mean-squared-error"]], "sklearn.metrics.mean_squared_log_error": [[749, "sklearn-metrics-mean-squared-log-error"]], "sklearn.metrics.mean_tweedie_deviance": [[750, "sklearn-metrics-mean-tweedie-deviance"]], "Examples using sklearn.metrics.mean_tweedie_deviance": [[750, "examples-using-sklearn-metrics-mean-tweedie-deviance"]], "sklearn.metrics.median_absolute_error": [[751, "sklearn-metrics-median-absolute-error"]], "Examples using sklearn.metrics.median_absolute_error": [[751, "examples-using-sklearn-metrics-median-absolute-error"]], "sklearn.metrics.multilabel_confusion_matrix": [[752, "sklearn-metrics-multilabel-confusion-matrix"]], "sklearn.metrics.mutual_info_score": [[753, "sklearn-metrics-mutual-info-score"]], "Examples using sklearn.metrics.mutual_info_score": [[753, "examples-using-sklearn-metrics-mutual-info-score"]], "sklearn.metrics.ndcg_score": [[754, "sklearn-metrics-ndcg-score"]], "sklearn.metrics.normalized_mutual_info_score": [[755, "sklearn-metrics-normalized-mutual-info-score"]], "Examples using sklearn.metrics.normalized_mutual_info_score": [[755, "examples-using-sklearn-metrics-normalized-mutual-info-score"]], "sklearn.metrics.pairwise.additive_chi2_kernel": [[756, "sklearn-metrics-pairwise-additive-chi2-kernel"]], "sklearn.metrics.pairwise.chi2_kernel": [[757, "sklearn-metrics-pairwise-chi2-kernel"]], "sklearn.metrics.pairwise.cosine_distances": [[758, "sklearn-metrics-pairwise-cosine-distances"]], "sklearn.metrics.pairwise.cosine_similarity": [[759, "sklearn-metrics-pairwise-cosine-similarity"]], "Examples using sklearn.metrics.pairwise.cosine_similarity": [[759, "examples-using-sklearn-metrics-pairwise-cosine-similarity"]], "sklearn.metrics.pairwise.distance_metrics": [[760, "sklearn-metrics-pairwise-distance-metrics"]], "sklearn.metrics.pairwise.euclidean_distances": [[761, "sklearn-metrics-pairwise-euclidean-distances"]], "sklearn.metrics.pairwise.haversine_distances": [[762, "sklearn-metrics-pairwise-haversine-distances"]], "sklearn.metrics.pairwise.kernel_metrics": [[763, "sklearn-metrics-pairwise-kernel-metrics"]], "sklearn.metrics.pairwise.laplacian_kernel": [[764, "sklearn-metrics-pairwise-laplacian-kernel"]], "sklearn.metrics.pairwise.linear_kernel": [[765, "sklearn-metrics-pairwise-linear-kernel"]], "sklearn.metrics.pairwise.manhattan_distances": [[766, "sklearn-metrics-pairwise-manhattan-distances"]], "sklearn.metrics.pairwise.nan_euclidean_distances": [[767, "sklearn-metrics-pairwise-nan-euclidean-distances"]], "sklearn.metrics.pairwise.paired_cosine_distances": [[768, "sklearn-metrics-pairwise-paired-cosine-distances"]], "sklearn.metrics.pairwise.paired_distances": [[769, "sklearn-metrics-pairwise-paired-distances"]], "sklearn.metrics.pairwise.paired_euclidean_distances": [[770, "sklearn-metrics-pairwise-paired-euclidean-distances"]], "sklearn.metrics.pairwise.paired_manhattan_distances": [[771, "sklearn-metrics-pairwise-paired-manhattan-distances"]], "sklearn.metrics.pairwise.pairwise_kernels": [[772, "sklearn-metrics-pairwise-pairwise-kernels"]], "sklearn.metrics.pairwise.polynomial_kernel": [[773, "sklearn-metrics-pairwise-polynomial-kernel"]], "sklearn.metrics.pairwise.rbf_kernel": [[774, "sklearn-metrics-pairwise-rbf-kernel"]], "sklearn.metrics.pairwise.sigmoid_kernel": [[775, "sklearn-metrics-pairwise-sigmoid-kernel"]], "sklearn.metrics.pairwise_distances": [[776, "sklearn-metrics-pairwise-distances"]], "Examples using sklearn.metrics.pairwise_distances": [[776, "examples-using-sklearn-metrics-pairwise-distances"]], "sklearn.metrics.pairwise_distances_argmin": [[777, "sklearn-metrics-pairwise-distances-argmin"]], "Examples using sklearn.metrics.pairwise_distances_argmin": [[777, "examples-using-sklearn-metrics-pairwise-distances-argmin"]], "sklearn.metrics.pairwise_distances_argmin_min": [[778, "sklearn-metrics-pairwise-distances-argmin-min"]], "sklearn.metrics.pairwise_distances_chunked": [[779, "sklearn-metrics-pairwise-distances-chunked"]], "sklearn.metrics.precision_recall_curve": [[780, "sklearn-metrics-precision-recall-curve"]], "Examples using sklearn.metrics.precision_recall_curve": [[780, "examples-using-sklearn-metrics-precision-recall-curve"]], "sklearn.metrics.precision_recall_fscore_support": [[781, "sklearn-metrics-precision-recall-fscore-support"]], "sklearn.metrics.precision_score": [[782, "sklearn-metrics-precision-score"]], "Examples using sklearn.metrics.precision_score": [[782, "examples-using-sklearn-metrics-precision-score"]], "sklearn.metrics.r2_score": [[783, "sklearn-metrics-r2-score"]], "Examples using sklearn.metrics.r2_score": [[783, "examples-using-sklearn-metrics-r2-score"]], "sklearn.metrics.rand_score": [[784, "sklearn-metrics-rand-score"]], "Examples using sklearn.metrics.rand_score": [[784, "examples-using-sklearn-metrics-rand-score"]], "sklearn.metrics.recall_score": [[785, "sklearn-metrics-recall-score"]], "Examples using sklearn.metrics.recall_score": [[785, "examples-using-sklearn-metrics-recall-score"]], "sklearn.metrics.roc_auc_score": [[786, "sklearn-metrics-roc-auc-score"]], "Examples using sklearn.metrics.roc_auc_score": [[786, "examples-using-sklearn-metrics-roc-auc-score"]], "sklearn.metrics.roc_curve": [[787, "sklearn-metrics-roc-curve"]], "Examples using sklearn.metrics.roc_curve": [[787, "examples-using-sklearn-metrics-roc-curve"]], "sklearn.metrics.root_mean_squared_error": [[788, "sklearn-metrics-root-mean-squared-error"]], "Examples using sklearn.metrics.root_mean_squared_error": [[788, "examples-using-sklearn-metrics-root-mean-squared-error"]], "sklearn.metrics.root_mean_squared_log_error": [[789, "sklearn-metrics-root-mean-squared-log-error"]], "sklearn.metrics.silhouette_samples": [[790, "sklearn-metrics-silhouette-samples"]], "Examples using sklearn.metrics.silhouette_samples": [[790, "examples-using-sklearn-metrics-silhouette-samples"]], "sklearn.metrics.silhouette_score": [[791, "sklearn-metrics-silhouette-score"]], "Examples using sklearn.metrics.silhouette_score": [[791, "examples-using-sklearn-metrics-silhouette-score"]], "sklearn.metrics.top_k_accuracy_score": [[792, "sklearn-metrics-top-k-accuracy-score"]], "sklearn.metrics.v_measure_score": [[793, "sklearn-metrics-v-measure-score"]], "Examples using sklearn.metrics.v_measure_score": [[793, "examples-using-sklearn-metrics-v-measure-score"]], "sklearn.metrics.zero_one_loss": [[794, "sklearn-metrics-zero-one-loss"]], "sklearn.mixture.BayesianGaussianMixture": [[795, "sklearn-mixture-bayesiangaussianmixture"]], "Examples using sklearn.mixture.BayesianGaussianMixture": [[795, "examples-using-sklearn-mixture-bayesiangaussianmixture"]], "sklearn.mixture.GaussianMixture": [[796, "sklearn-mixture-gaussianmixture"]], "Examples using sklearn.mixture.GaussianMixture": [[796, "examples-using-sklearn-mixture-gaussianmixture"]], "sklearn.model_selection.GridSearchCV": [[797, "sklearn-model-selection-gridsearchcv"]], "Examples using sklearn.model_selection.GridSearchCV": [[797, "examples-using-sklearn-model-selection-gridsearchcv"]], "sklearn.model_selection.GroupKFold": [[798, "sklearn-model-selection-groupkfold"]], "Examples using sklearn.model_selection.GroupKFold": [[798, "examples-using-sklearn-model-selection-groupkfold"]], "sklearn.model_selection.GroupShuffleSplit": [[799, "sklearn-model-selection-groupshufflesplit"]], "Examples using sklearn.model_selection.GroupShuffleSplit": [[799, "examples-using-sklearn-model-selection-groupshufflesplit"]], "sklearn.model_selection.HalvingGridSearchCV": [[800, "sklearn-model-selection-halvinggridsearchcv"]], "Examples using sklearn.model_selection.HalvingGridSearchCV": [[800, "examples-using-sklearn-model-selection-halvinggridsearchcv"]], "sklearn.model_selection.HalvingRandomSearchCV": [[801, "sklearn-model-selection-halvingrandomsearchcv"]], "Examples using sklearn.model_selection.HalvingRandomSearchCV": [[801, "examples-using-sklearn-model-selection-halvingrandomsearchcv"]], "sklearn.model_selection.KFold": [[802, "sklearn-model-selection-kfold"]], "Examples using sklearn.model_selection.KFold": [[802, "examples-using-sklearn-model-selection-kfold"]], "sklearn.model_selection.LearningCurveDisplay": [[803, "sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay": [[803, "examples-using-sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay.from_estimator": [[803, "examples-using-sklearn-model-selection-learningcurvedisplay-from-estimator"]], "sklearn.model_selection.LeaveOneGroupOut": [[804, "sklearn-model-selection-leaveonegroupout"]], "sklearn.model_selection.LeaveOneOut": [[805, "sklearn-model-selection-leaveoneout"]], "sklearn.model_selection.LeavePGroupsOut": [[806, "sklearn-model-selection-leavepgroupsout"]], "sklearn.model_selection.LeavePOut": [[807, "sklearn-model-selection-leavepout"]], "sklearn.model_selection.ParameterGrid": [[808, "sklearn-model-selection-parametergrid"]], "sklearn.model_selection.ParameterSampler": [[809, "sklearn-model-selection-parametersampler"]], "sklearn.model_selection.PredefinedSplit": [[810, "sklearn-model-selection-predefinedsplit"]], "sklearn.model_selection.RandomizedSearchCV": [[811, "sklearn-model-selection-randomizedsearchcv"]], "Examples using sklearn.model_selection.RandomizedSearchCV": [[811, "examples-using-sklearn-model-selection-randomizedsearchcv"]], "sklearn.model_selection.RepeatedKFold": [[812, "sklearn-model-selection-repeatedkfold"]], "Examples using sklearn.model_selection.RepeatedKFold": [[812, "examples-using-sklearn-model-selection-repeatedkfold"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[813, "sklearn-model-selection-repeatedstratifiedkfold"]], "Examples using sklearn.model_selection.RepeatedStratifiedKFold": [[813, "examples-using-sklearn-model-selection-repeatedstratifiedkfold"]], "sklearn.model_selection.ShuffleSplit": [[814, "sklearn-model-selection-shufflesplit"]], "Examples using sklearn.model_selection.ShuffleSplit": [[814, "examples-using-sklearn-model-selection-shufflesplit"]], "sklearn.model_selection.StratifiedGroupKFold": [[815, "sklearn-model-selection-stratifiedgroupkfold"]], "Examples using sklearn.model_selection.StratifiedGroupKFold": [[815, "examples-using-sklearn-model-selection-stratifiedgroupkfold"]], "sklearn.model_selection.StratifiedKFold": [[816, "sklearn-model-selection-stratifiedkfold"]], "Examples using sklearn.model_selection.StratifiedKFold": [[816, "examples-using-sklearn-model-selection-stratifiedkfold"]], "sklearn.model_selection.StratifiedShuffleSplit": [[817, "sklearn-model-selection-stratifiedshufflesplit"]], "Examples using sklearn.model_selection.StratifiedShuffleSplit": [[817, "examples-using-sklearn-model-selection-stratifiedshufflesplit"]], "sklearn.model_selection.TimeSeriesSplit": [[818, "sklearn-model-selection-timeseriessplit"]], "Examples using sklearn.model_selection.TimeSeriesSplit": [[818, "examples-using-sklearn-model-selection-timeseriessplit"]], "sklearn.model_selection.ValidationCurveDisplay": [[819, "sklearn-model-selection-validationcurvedisplay"]], "Examples using sklearn.model_selection.ValidationCurveDisplay.from_estimator": [[819, "examples-using-sklearn-model-selection-validationcurvedisplay-from-estimator"]], "sklearn.model_selection.check_cv": [[820, "sklearn-model-selection-check-cv"]], "sklearn.model_selection.cross_val_predict": [[821, "sklearn-model-selection-cross-val-predict"]], "Examples using sklearn.model_selection.cross_val_predict": [[821, "examples-using-sklearn-model-selection-cross-val-predict"]], "sklearn.model_selection.cross_val_score": [[822, "sklearn-model-selection-cross-val-score"]], "Examples using sklearn.model_selection.cross_val_score": [[822, "examples-using-sklearn-model-selection-cross-val-score"]], "sklearn.model_selection.cross_validate": [[823, "sklearn-model-selection-cross-validate"]], "Examples using sklearn.model_selection.cross_validate": [[823, "examples-using-sklearn-model-selection-cross-validate"]], "sklearn.model_selection.learning_curve": [[824, "sklearn-model-selection-learning-curve"]], "Examples using sklearn.model_selection.learning_curve": [[824, "examples-using-sklearn-model-selection-learning-curve"]], "sklearn.model_selection.permutation_test_score": [[825, "sklearn-model-selection-permutation-test-score"]], "Examples using sklearn.model_selection.permutation_test_score": [[825, "examples-using-sklearn-model-selection-permutation-test-score"]], "sklearn.model_selection.train_test_split": [[826, "sklearn-model-selection-train-test-split"]], "Examples using sklearn.model_selection.train_test_split": [[826, "examples-using-sklearn-model-selection-train-test-split"]], "sklearn.model_selection.validation_curve": [[827, "sklearn-model-selection-validation-curve"]], "Examples using sklearn.model_selection.validation_curve": [[827, "examples-using-sklearn-model-selection-validation-curve"]], "sklearn.multiclass.OneVsOneClassifier": [[828, "sklearn-multiclass-onevsoneclassifier"]], "Examples using sklearn.multiclass.OneVsOneClassifier": [[828, "examples-using-sklearn-multiclass-onevsoneclassifier"]], "sklearn.multiclass.OneVsRestClassifier": [[829, "sklearn-multiclass-onevsrestclassifier"]], "Examples using sklearn.multiclass.OneVsRestClassifier": [[829, "examples-using-sklearn-multiclass-onevsrestclassifier"]], "sklearn.multiclass.OutputCodeClassifier": [[830, "sklearn-multiclass-outputcodeclassifier"]], "Examples using sklearn.multiclass.OutputCodeClassifier": [[830, "examples-using-sklearn-multiclass-outputcodeclassifier"]], "sklearn.multioutput.ClassifierChain": [[831, "sklearn-multioutput-classifierchain"]], "Examples using sklearn.multioutput.ClassifierChain": [[831, "examples-using-sklearn-multioutput-classifierchain"]], "sklearn.multioutput.MultiOutputClassifier": [[832, "sklearn-multioutput-multioutputclassifier"]], "sklearn.multioutput.MultiOutputRegressor": [[833, "sklearn-multioutput-multioutputregressor"]], "Examples using sklearn.multioutput.MultiOutputRegressor": [[833, "examples-using-sklearn-multioutput-multioutputregressor"]], "sklearn.multioutput.RegressorChain": [[834, "sklearn-multioutput-regressorchain"]], "sklearn.naive_bayes.BernoulliNB": [[835, "sklearn-naive-bayes-bernoullinb"]], "Examples using sklearn.naive_bayes.BernoulliNB": [[835, "examples-using-sklearn-naive-bayes-bernoullinb"]], "sklearn.naive_bayes.CategoricalNB": [[836, "sklearn-naive-bayes-categoricalnb"]], "sklearn.naive_bayes.ComplementNB": [[837, "sklearn-naive-bayes-complementnb"]], "Examples using sklearn.naive_bayes.ComplementNB": [[837, "examples-using-sklearn-naive-bayes-complementnb"]], "sklearn.naive_bayes.GaussianNB": [[838, "sklearn-naive-bayes-gaussiannb"]], "Examples using sklearn.naive_bayes.GaussianNB": [[838, "examples-using-sklearn-naive-bayes-gaussiannb"]], "sklearn.naive_bayes.MultinomialNB": [[839, "sklearn-naive-bayes-multinomialnb"]], "Examples using sklearn.naive_bayes.MultinomialNB": [[839, "examples-using-sklearn-naive-bayes-multinomialnb"]], "sklearn.neighbors.BallTree": [[840, "sklearn-neighbors-balltree"]], "sklearn.neighbors.KDTree": [[841, "sklearn-neighbors-kdtree"]], "sklearn.neighbors.KNeighborsClassifier": [[842, "sklearn-neighbors-kneighborsclassifier"]], "Examples using sklearn.neighbors.KNeighborsClassifier": [[842, "examples-using-sklearn-neighbors-kneighborsclassifier"]], "sklearn.neighbors.KNeighborsRegressor": [[843, "sklearn-neighbors-kneighborsregressor"]], "Examples using sklearn.neighbors.KNeighborsRegressor": [[843, "examples-using-sklearn-neighbors-kneighborsregressor"]], "sklearn.neighbors.KNeighborsTransformer": [[844, "sklearn-neighbors-kneighborstransformer"]], "Examples using sklearn.neighbors.KNeighborsTransformer": [[844, "examples-using-sklearn-neighbors-kneighborstransformer"]], "sklearn.neighbors.KernelDensity": [[845, "sklearn-neighbors-kerneldensity"]], "Examples using sklearn.neighbors.KernelDensity": [[845, "examples-using-sklearn-neighbors-kerneldensity"]], "sklearn.neighbors.LocalOutlierFactor": [[846, "sklearn-neighbors-localoutlierfactor"]], "Examples using sklearn.neighbors.LocalOutlierFactor": [[846, "examples-using-sklearn-neighbors-localoutlierfactor"]], "sklearn.neighbors.NearestCentroid": [[847, "sklearn-neighbors-nearestcentroid"]], "Examples using sklearn.neighbors.NearestCentroid": [[847, "examples-using-sklearn-neighbors-nearestcentroid"]], "sklearn.neighbors.NearestNeighbors": [[848, "sklearn-neighbors-nearestneighbors"]], "Examples using sklearn.neighbors.NearestNeighbors": [[848, "examples-using-sklearn-neighbors-nearestneighbors"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[849, "sklearn-neighbors-neighborhoodcomponentsanalysis"]], "Examples using sklearn.neighbors.NeighborhoodComponentsAnalysis": [[849, "examples-using-sklearn-neighbors-neighborhoodcomponentsanalysis"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[850, "sklearn-neighbors-radiusneighborsclassifier"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[851, "sklearn-neighbors-radiusneighborsregressor"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[852, "sklearn-neighbors-radiusneighborstransformer"]], "sklearn.neighbors.kneighbors_graph": [[853, "sklearn-neighbors-kneighbors-graph"]], "Examples using sklearn.neighbors.kneighbors_graph": [[853, "examples-using-sklearn-neighbors-kneighbors-graph"]], "sklearn.neighbors.radius_neighbors_graph": [[854, "sklearn-neighbors-radius-neighbors-graph"]], "sklearn.neighbors.sort_graph_by_row_values": [[855, "sklearn-neighbors-sort-graph-by-row-values"]], "sklearn.neural_network.BernoulliRBM": [[856, "sklearn-neural-network-bernoullirbm"]], "Examples using sklearn.neural_network.BernoulliRBM": [[856, "examples-using-sklearn-neural-network-bernoullirbm"]], "sklearn.neural_network.MLPClassifier": [[857, "sklearn-neural-network-mlpclassifier"]], "Examples using sklearn.neural_network.MLPClassifier": [[857, "examples-using-sklearn-neural-network-mlpclassifier"]], "sklearn.neural_network.MLPRegressor": [[858, "sklearn-neural-network-mlpregressor"]], "Examples using sklearn.neural_network.MLPRegressor": [[858, "examples-using-sklearn-neural-network-mlpregressor"]], "sklearn.pipeline.FeatureUnion": [[859, "sklearn-pipeline-featureunion"]], "Examples using sklearn.pipeline.FeatureUnion": [[859, "examples-using-sklearn-pipeline-featureunion"]], "sklearn.pipeline.Pipeline": [[860, "sklearn-pipeline-pipeline"]], "Examples using sklearn.pipeline.Pipeline": [[860, "examples-using-sklearn-pipeline-pipeline"]], "sklearn.pipeline.make_pipeline": [[861, "sklearn-pipeline-make-pipeline"]], "Examples using sklearn.pipeline.make_pipeline": [[861, "examples-using-sklearn-pipeline-make-pipeline"]], "sklearn.pipeline.make_union": [[862, "sklearn-pipeline-make-union"]], "sklearn.preprocessing.Binarizer": [[863, "sklearn-preprocessing-binarizer"]], "sklearn.preprocessing.FunctionTransformer": [[864, "sklearn-preprocessing-functiontransformer"]], "Examples using sklearn.preprocessing.FunctionTransformer": [[864, "examples-using-sklearn-preprocessing-functiontransformer"]], "sklearn.preprocessing.KBinsDiscretizer": [[865, "sklearn-preprocessing-kbinsdiscretizer"]], "Examples using sklearn.preprocessing.KBinsDiscretizer": [[865, "examples-using-sklearn-preprocessing-kbinsdiscretizer"]], "sklearn.preprocessing.KernelCenterer": [[866, "sklearn-preprocessing-kernelcenterer"]], "sklearn.preprocessing.LabelBinarizer": [[867, "sklearn-preprocessing-labelbinarizer"]], "Examples using sklearn.preprocessing.LabelBinarizer": [[867, "examples-using-sklearn-preprocessing-labelbinarizer"]], "sklearn.preprocessing.LabelEncoder": [[868, "sklearn-preprocessing-labelencoder"]], "sklearn.preprocessing.MaxAbsScaler": [[869, "sklearn-preprocessing-maxabsscaler"]], "Examples using sklearn.preprocessing.MaxAbsScaler": [[869, "examples-using-sklearn-preprocessing-maxabsscaler"]], "sklearn.preprocessing.MinMaxScaler": [[870, "sklearn-preprocessing-minmaxscaler"]], "Examples using sklearn.preprocessing.MinMaxScaler": [[870, "examples-using-sklearn-preprocessing-minmaxscaler"]], "sklearn.preprocessing.MultiLabelBinarizer": [[871, "sklearn-preprocessing-multilabelbinarizer"]], "sklearn.preprocessing.Normalizer": [[872, "sklearn-preprocessing-normalizer"]], "Examples using sklearn.preprocessing.Normalizer": [[872, "examples-using-sklearn-preprocessing-normalizer"]], "sklearn.preprocessing.OneHotEncoder": [[873, "sklearn-preprocessing-onehotencoder"]], "Examples using sklearn.preprocessing.OneHotEncoder": [[873, "examples-using-sklearn-preprocessing-onehotencoder"]], "sklearn.preprocessing.OrdinalEncoder": [[874, "sklearn-preprocessing-ordinalencoder"]], "Examples using sklearn.preprocessing.OrdinalEncoder": [[874, "examples-using-sklearn-preprocessing-ordinalencoder"]], "sklearn.preprocessing.PolynomialFeatures": [[875, "sklearn-preprocessing-polynomialfeatures"]], "Examples using sklearn.preprocessing.PolynomialFeatures": [[875, "examples-using-sklearn-preprocessing-polynomialfeatures"]], "sklearn.preprocessing.PowerTransformer": [[876, "sklearn-preprocessing-powertransformer"]], "Examples using sklearn.preprocessing.PowerTransformer": [[876, "examples-using-sklearn-preprocessing-powertransformer"]], "sklearn.preprocessing.QuantileTransformer": [[877, "sklearn-preprocessing-quantiletransformer"]], "Examples using sklearn.preprocessing.QuantileTransformer": [[877, "examples-using-sklearn-preprocessing-quantiletransformer"]], "sklearn.preprocessing.RobustScaler": [[878, "sklearn-preprocessing-robustscaler"]], "Examples using sklearn.preprocessing.RobustScaler": [[878, "examples-using-sklearn-preprocessing-robustscaler"]], "sklearn.preprocessing.SplineTransformer": [[879, "sklearn-preprocessing-splinetransformer"]], "Examples using sklearn.preprocessing.SplineTransformer": [[879, "examples-using-sklearn-preprocessing-splinetransformer"]], "sklearn.preprocessing.StandardScaler": [[880, "sklearn-preprocessing-standardscaler"]], "Examples using sklearn.preprocessing.StandardScaler": [[880, "examples-using-sklearn-preprocessing-standardscaler"]], "sklearn.preprocessing.TargetEncoder": [[881, "sklearn-preprocessing-targetencoder"]], "Examples using sklearn.preprocessing.TargetEncoder": [[881, "examples-using-sklearn-preprocessing-targetencoder"]], "sklearn.preprocessing.add_dummy_feature": [[882, "sklearn-preprocessing-add-dummy-feature"]], "sklearn.preprocessing.binarize": [[883, "sklearn-preprocessing-binarize"]], "sklearn.preprocessing.label_binarize": [[884, "sklearn-preprocessing-label-binarize"]], "Examples using sklearn.preprocessing.label_binarize": [[884, "examples-using-sklearn-preprocessing-label-binarize"]], "sklearn.preprocessing.maxabs_scale": [[885, "sklearn-preprocessing-maxabs-scale"]], "sklearn.preprocessing.minmax_scale": [[886, "sklearn-preprocessing-minmax-scale"]], "Examples using sklearn.preprocessing.minmax_scale": [[886, "examples-using-sklearn-preprocessing-minmax-scale"]], "sklearn.preprocessing.normalize": [[887, "sklearn-preprocessing-normalize"]], "sklearn.preprocessing.power_transform": [[888, "sklearn-preprocessing-power-transform"]], "sklearn.preprocessing.quantile_transform": [[889, "sklearn-preprocessing-quantile-transform"]], "Examples using sklearn.preprocessing.quantile_transform": [[889, "examples-using-sklearn-preprocessing-quantile-transform"]], "sklearn.preprocessing.robust_scale": [[890, "sklearn-preprocessing-robust-scale"]], "sklearn.preprocessing.scale": [[891, "sklearn-preprocessing-scale"]], "sklearn.random_projection.GaussianRandomProjection": [[892, "sklearn-random-projection-gaussianrandomprojection"]], "sklearn.random_projection.SparseRandomProjection": [[893, "sklearn-random-projection-sparserandomprojection"]], "Examples using sklearn.random_projection.SparseRandomProjection": [[893, "examples-using-sklearn-random-projection-sparserandomprojection"]], "sklearn.random_projection.johnson_lindenstrauss_min_dim": [[894, "sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "Examples using sklearn.random_projection.johnson_lindenstrauss_min_dim": [[894, "examples-using-sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "sklearn.semi_supervised.LabelPropagation": [[895, "sklearn-semi-supervised-labelpropagation"]], "sklearn.semi_supervised.LabelSpreading": [[896, "sklearn-semi-supervised-labelspreading"]], "Examples using sklearn.semi_supervised.LabelSpreading": [[896, "examples-using-sklearn-semi-supervised-labelspreading"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[897, "sklearn-semi-supervised-selftrainingclassifier"]], "Examples using sklearn.semi_supervised.SelfTrainingClassifier": [[897, "examples-using-sklearn-semi-supervised-selftrainingclassifier"]], "sklearn.set_config": [[898, "sklearn-set-config"]], "Examples using sklearn.set_config": [[898, "examples-using-sklearn-set-config"]], "sklearn.show_versions": [[899, "sklearn-show-versions"]], "sklearn.svm.LinearSVC": [[900, "sklearn-svm-linearsvc"]], "Examples using sklearn.svm.LinearSVC": [[900, "examples-using-sklearn-svm-linearsvc"]], "sklearn.svm.LinearSVR": [[901, "sklearn-svm-linearsvr"]], "sklearn.svm.NuSVC": [[902, "sklearn-svm-nusvc"]], "Examples using sklearn.svm.NuSVC": [[902, "examples-using-sklearn-svm-nusvc"]], "sklearn.svm.NuSVR": [[903, "sklearn-svm-nusvr"]], "Examples using sklearn.svm.NuSVR": [[903, "examples-using-sklearn-svm-nusvr"]], "sklearn.svm.OneClassSVM": [[904, "sklearn-svm-oneclasssvm"]], "Examples using sklearn.svm.OneClassSVM": [[904, "examples-using-sklearn-svm-oneclasssvm"]], "sklearn.svm.SVC": [[905, "sklearn-svm-svc"]], "Examples using sklearn.svm.SVC": [[905, "examples-using-sklearn-svm-svc"]], "sklearn.svm.SVR": [[906, "sklearn-svm-svr"]], "Examples using sklearn.svm.SVR": [[906, "examples-using-sklearn-svm-svr"]], "sklearn.svm.l1_min_c": [[907, "sklearn-svm-l1-min-c"]], "Examples using sklearn.svm.l1_min_c": [[907, "examples-using-sklearn-svm-l1-min-c"]], "sklearn.tree.DecisionTreeClassifier": [[908, "sklearn-tree-decisiontreeclassifier"]], "Examples using sklearn.tree.DecisionTreeClassifier": [[908, "examples-using-sklearn-tree-decisiontreeclassifier"]], "sklearn.tree.DecisionTreeRegressor": [[909, "sklearn-tree-decisiontreeregressor"]], "Examples using sklearn.tree.DecisionTreeRegressor": [[909, "examples-using-sklearn-tree-decisiontreeregressor"]], "sklearn.tree.ExtraTreeClassifier": [[910, "sklearn-tree-extratreeclassifier"]], "sklearn.tree.ExtraTreeRegressor": [[911, "sklearn-tree-extratreeregressor"]], "sklearn.tree.export_graphviz": [[912, "sklearn-tree-export-graphviz"]], "sklearn.tree.export_text": [[913, "sklearn-tree-export-text"]], "sklearn.tree.plot_tree": [[914, "sklearn-tree-plot-tree"]], "Examples using sklearn.tree.plot_tree": [[914, "examples-using-sklearn-tree-plot-tree"]], "sklearn.utils.Bunch": [[915, "sklearn-utils-bunch"]], "Examples using sklearn.utils.Bunch": [[915, "examples-using-sklearn-utils-bunch"]], "sklearn.utils._safe_indexing": [[916, "sklearn-utils-safe-indexing"]], "sklearn.utils.arrayfuncs.min_pos": [[917, "sklearn-utils-arrayfuncs-min-pos"]], "sklearn.utils.as_float_array": [[918, "sklearn-utils-as-float-array"]], "sklearn.utils.assert_all_finite": [[919, "sklearn-utils-assert-all-finite"]], "sklearn.utils.check_X_y": [[920, "sklearn-utils-check-x-y"]], "sklearn.utils.check_array": [[921, "sklearn-utils-check-array"]], "sklearn.utils.check_consistent_length": [[922, "sklearn-utils-check-consistent-length"]], "sklearn.utils.check_random_state": [[923, "sklearn-utils-check-random-state"]], "Examples using sklearn.utils.check_random_state": [[923, "examples-using-sklearn-utils-check-random-state"]], "sklearn.utils.check_scalar": [[924, "sklearn-utils-check-scalar"]], "sklearn.utils.class_weight.compute_class_weight": [[925, "sklearn-utils-class-weight-compute-class-weight"]], "sklearn.utils.class_weight.compute_sample_weight": [[926, "sklearn-utils-class-weight-compute-sample-weight"]], "sklearn.utils.deprecated": [[927, "sklearn-utils-deprecated"]], "sklearn.utils.discovery.all_displays": [[928, "sklearn-utils-discovery-all-displays"]], "sklearn.utils.discovery.all_estimators": [[929, "sklearn-utils-discovery-all-estimators"]], "sklearn.utils.discovery.all_functions": [[930, "sklearn-utils-discovery-all-functions"]], "sklearn.utils.estimator_checks.check_estimator": [[931, "sklearn-utils-estimator-checks-check-estimator"]], "sklearn.utils.estimator_checks.parametrize_with_checks": [[932, "sklearn-utils-estimator-checks-parametrize-with-checks"]], "Examples using sklearn.utils.estimator_checks.parametrize_with_checks": [[932, "examples-using-sklearn-utils-estimator-checks-parametrize-with-checks"]], "sklearn.utils.estimator_html_repr": [[933, "sklearn-utils-estimator-html-repr"]], "sklearn.utils.extmath.density": [[934, "sklearn-utils-extmath-density"]], "Examples using sklearn.utils.extmath.density": [[934, "examples-using-sklearn-utils-extmath-density"]], "sklearn.utils.extmath.fast_logdet": [[935, "sklearn-utils-extmath-fast-logdet"]], "sklearn.utils.extmath.randomized_range_finder": [[936, "sklearn-utils-extmath-randomized-range-finder"]], "sklearn.utils.extmath.randomized_svd": [[937, "sklearn-utils-extmath-randomized-svd"]], "sklearn.utils.extmath.safe_sparse_dot": [[938, "sklearn-utils-extmath-safe-sparse-dot"]], "sklearn.utils.extmath.weighted_mode": [[939, "sklearn-utils-extmath-weighted-mode"]], "sklearn.utils.gen_batches": [[940, "sklearn-utils-gen-batches"]], "sklearn.utils.gen_even_slices": [[941, "sklearn-utils-gen-even-slices"]], "Examples using sklearn.utils.gen_even_slices": [[941, "examples-using-sklearn-utils-gen-even-slices"]], "sklearn.utils.graph.single_source_shortest_path_length": [[942, "sklearn-utils-graph-single-source-shortest-path-length"]], "sklearn.utils.indexable": [[943, "sklearn-utils-indexable"]], "sklearn.utils.metadata_routing.MetadataRequest": [[944, "sklearn-utils-metadata-routing-metadatarequest"]], "sklearn.utils.metadata_routing.MetadataRouter": [[945, "sklearn-utils-metadata-routing-metadatarouter"]], "Examples using sklearn.utils.metadata_routing.MetadataRouter": [[945, "examples-using-sklearn-utils-metadata-routing-metadatarouter"]], "sklearn.utils.metadata_routing.MethodMapping": [[946, "sklearn-utils-metadata-routing-methodmapping"]], "Examples using sklearn.utils.metadata_routing.MethodMapping": [[946, "examples-using-sklearn-utils-metadata-routing-methodmapping"]], "sklearn.utils.metadata_routing.get_routing_for_object": [[947, "sklearn-utils-metadata-routing-get-routing-for-object"]], "Examples using sklearn.utils.metadata_routing.get_routing_for_object": [[947, "examples-using-sklearn-utils-metadata-routing-get-routing-for-object"]], "sklearn.utils.metadata_routing.process_routing": [[948, "sklearn-utils-metadata-routing-process-routing"]], "Examples using sklearn.utils.metadata_routing.process_routing": [[948, "examples-using-sklearn-utils-metadata-routing-process-routing"]], "sklearn.utils.metaestimators.available_if": [[949, "sklearn-utils-metaestimators-available-if"]], "Examples using sklearn.utils.metaestimators.available_if": [[949, "examples-using-sklearn-utils-metaestimators-available-if"]], "sklearn.utils.multiclass.is_multilabel": [[950, "sklearn-utils-multiclass-is-multilabel"]], "sklearn.utils.multiclass.type_of_target": [[951, "sklearn-utils-multiclass-type-of-target"]], "sklearn.utils.multiclass.unique_labels": [[952, "sklearn-utils-multiclass-unique-labels"]], "sklearn.utils.murmurhash3_32": [[953, "sklearn-utils-murmurhash3-32"]], "sklearn.utils.parallel.Parallel": [[954, "sklearn-utils-parallel-parallel"]], "sklearn.utils.parallel.delayed": [[955, "sklearn-utils-parallel-delayed"]], "sklearn.utils.parallel_backend": [[956, "sklearn-utils-parallel-backend"]], "sklearn.utils.random.sample_without_replacement": [[957, "sklearn-utils-random-sample-without-replacement"]], "sklearn.utils.register_parallel_backend": [[958, "sklearn-utils-register-parallel-backend"]], "sklearn.utils.resample": [[959, "sklearn-utils-resample"]], "sklearn.utils.safe_mask": [[960, "sklearn-utils-safe-mask"]], "sklearn.utils.safe_sqr": [[961, "sklearn-utils-safe-sqr"]], "sklearn.utils.shuffle": [[962, "sklearn-utils-shuffle"]], "Examples using sklearn.utils.shuffle": [[962, "examples-using-sklearn-utils-shuffle"]], "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [[963, "sklearn-utils-sparsefuncs-incr-mean-variance-axis"]], "sklearn.utils.sparsefuncs.inplace_column_scale": [[964, "sklearn-utils-sparsefuncs-inplace-column-scale"]], "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [[965, "sklearn-utils-sparsefuncs-inplace-csr-column-scale"]], "sklearn.utils.sparsefuncs.inplace_row_scale": [[966, "sklearn-utils-sparsefuncs-inplace-row-scale"]], "sklearn.utils.sparsefuncs.inplace_swap_column": [[967, "sklearn-utils-sparsefuncs-inplace-swap-column"]], "sklearn.utils.sparsefuncs.inplace_swap_row": [[968, "sklearn-utils-sparsefuncs-inplace-swap-row"]], "sklearn.utils.sparsefuncs.mean_variance_axis": [[969, "sklearn-utils-sparsefuncs-mean-variance-axis"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1": [[970, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l1"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2": [[971, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l2"]], "sklearn.utils.validation.check_is_fitted": [[972, "sklearn-utils-validation-check-is-fitted"]], "Examples using sklearn.utils.validation.check_is_fitted": [[972, "examples-using-sklearn-utils-validation-check-is-fitted"]], "sklearn.utils.validation.check_memory": [[973, "sklearn-utils-validation-check-memory"]], "sklearn.utils.validation.check_symmetric": [[974, "sklearn-utils-validation-check-symmetric"]], "sklearn.utils.validation.column_or_1d": [[975, "sklearn-utils-validation-column-or-1d"]], "sklearn.utils.validation.has_fit_parameter": [[976, "sklearn-utils-validation-has-fit-parameter"]], "Tuning the hyper-parameters of an estimator": [[977, "tuning-the-hyper-parameters-of-an-estimator"]], "Exhaustive Grid Search": [[977, "exhaustive-grid-search"]], "Randomized Parameter Optimization": [[977, "randomized-parameter-optimization"]], "Searching for optimal parameters with successive halving": [[977, "searching-for-optimal-parameters-with-successive-halving"]], "Choosing min_resources and the number of candidates": [[977, "choosing-min-resources-and-the-number-of-candidates"]], "Amount of resource and number of candidates at each iteration": [[977, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "Choosing a resource": [[977, "choosing-a-resource"]], "Exhausting the available resources": [[977, "exhausting-the-available-resources"]], "Aggressive elimination of candidates": [[977, "aggressive-elimination-of-candidates"]], "Analyzing results with the cv_results_ attribute": [[977, "analyzing-results-with-the-cv-results-attribute"]], "Tips for parameter search": [[977, "tips-for-parameter-search"]], "Specifying an objective metric": [[977, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[977, "specifying-multiple-metrics-for-evaluation"]], "Composite estimators and parameter spaces": [[977, "composite-estimators-and-parameter-spaces"]], "Model selection: development and evaluation": [[977, "model-selection-development-and-evaluation"]], "Robustness to failure": [[977, "robustness-to-failure"]], "Alternatives to brute force parameter search": [[977, "alternatives-to-brute-force-parameter-search"]], "Model specific cross-validation": [[977, "model-specific-cross-validation"]], "Information Criterion": [[977, "information-criterion"]], "Out of Bag Estimates": [[977, "out-of-bag-estimates"]], "Imputation of missing values": [[978, "imputation-of-missing-values"], [998, "imputation-of-missing-values"]], "Univariate vs. Multivariate Imputation": [[978, "univariate-vs-multivariate-imputation"]], "Univariate feature imputation": [[978, "univariate-feature-imputation"]], "Multivariate feature imputation": [[978, "multivariate-feature-imputation"]], "Flexibility of IterativeImputer": [[978, "flexibility-of-iterativeimputer"]], "Multiple vs. Single Imputation": [[978, "multiple-vs-single-imputation"]], "Nearest neighbors imputation": [[978, "nearest-neighbors-imputation"]], "Keeping the number of features constant": [[978, "keeping-the-number-of-features-constant"]], "Marking imputed values": [[978, "marking-imputed-values"]], "Estimators that handle NaN values": [[978, "estimators-that-handle-nan-values"]], "Isotonic regression": [[979, "isotonic-regression"]], "Nystroem Method for Kernel Approximation": [[980, "nystroem-method-for-kernel-approximation"]], "Radial Basis Function Kernel": [[980, "radial-basis-function-kernel"]], "Additive Chi Squared Kernel": [[980, "additive-chi-squared-kernel"]], "Skewed Chi Squared Kernel": [[980, "skewed-chi-squared-kernel"]], "Polynomial Kernel Approximation via Tensor Sketch": [[980, "polynomial-kernel-approximation-via-tensor-sketch"]], "Mathematical Details": [[980, "mathematical-details"]], "Kernel ridge regression": [[981, "kernel-ridge-regression"]], "Linear and Quadratic Discriminant Analysis": [[982, "linear-and-quadratic-discriminant-analysis"]], "Dimensionality reduction using Linear Discriminant Analysis": [[982, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Mathematical formulation of the LDA and QDA classifiers": [[982, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "QDA": [[982, "qda"]], "LDA": [[982, "lda"]], "Mathematical formulation of LDA dimensionality reduction": [[982, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Shrinkage and Covariance Estimator": [[982, "shrinkage-and-covariance-estimator"]], "Estimation algorithms": [[982, "estimation-algorithms"]], "Validation curves: plotting scores to evaluate models": [[983, "validation-curves-plotting-scores-to-evaluate-models"]], "Validation curve": [[983, "validation-curve"]], "Learning curve": [[983, "learning-curve"]], "Linear Models": [[984, "linear-models"]], "Ordinary Least Squares": [[984, "ordinary-least-squares"]], "Non-Negative Least Squares": [[984, "non-negative-least-squares"]], "Ordinary Least Squares Complexity": [[984, "ordinary-least-squares-complexity"]], "Ridge regression and classification": [[984, "ridge-regression-and-classification"]], "Ridge Complexity": [[984, "ridge-complexity"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[984, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Setting regularization parameter": [[984, "setting-regularization-parameter"]], "Using cross-validation": [[984, "using-cross-validation"]], "Information-criteria based model selection": [[984, "information-criteria-based-model-selection"]], "AIC and BIC criteria": [[984, "aic-and-bic-criteria"]], "Comparison with the regularization parameter of SVM": [[984, "comparison-with-the-regularization-parameter-of-svm"]], "Multi-task Lasso": [[984, "multi-task-lasso"]], "Elastic-Net": [[984, "elastic-net"]], "Multi-task Elastic-Net": [[984, "multi-task-elastic-net"]], "Least Angle Regression": [[984, "least-angle-regression"]], "LARS Lasso": [[984, "lars-lasso"]], "Orthogonal Matching Pursuit (OMP)": [[984, "orthogonal-matching-pursuit-omp"]], "Bayesian Regression": [[984, "bayesian-regression"]], "Bayesian Ridge Regression": [[984, "bayesian-ridge-regression"]], "Automatic Relevance Determination - ARD": [[984, "automatic-relevance-determination-ard"]], "Logistic regression": [[984, "logistic-regression"]], "Binary Case": [[984, "binary-case"]], "Multinomial Case": [[984, "multinomial-case"]], "Solvers": [[984, "solvers"]], "Differences between solvers": [[984, "differences-between-solvers"]], "Stochastic Gradient Descent - SGD": [[984, "stochastic-gradient-descent-sgd"]], "Perceptron": [[984, "perceptron"]], "Passive Aggressive Algorithms": [[984, "passive-aggressive-algorithms"]], "Robustness regression: outliers and modeling errors": [[984, "robustness-regression-outliers-and-modeling-errors"]], "Different scenario and useful concepts": [[984, "different-scenario-and-useful-concepts"]], "Trade-offs: which estimator ?": [[984, null]], "RANSAC: RANdom SAmple Consensus": [[984, "ransac-random-sample-consensus"]], "Theil-Sen estimator: generalized-median-based estimator": [[984, "theil-sen-estimator-generalized-median-based-estimator"]], "Huber Regression": [[984, "huber-regression"]], "Quantile Regression": [[984, "quantile-regression"]], "Polynomial regression: extending linear models with basis functions": [[984, "polynomial-regression-extending-linear-models-with-basis-functions"]], "Introduction": [[985, "introduction"]], "Isomap": [[985, "isomap"]], "Locally Linear Embedding": [[985, "locally-linear-embedding"]], "Modified Locally Linear Embedding": [[985, "modified-locally-linear-embedding"]], "Hessian Eigenmapping": [[985, "hessian-eigenmapping"]], "Spectral Embedding": [[985, "spectral-embedding"]], "Local Tangent Space Alignment": [[985, "local-tangent-space-alignment"]], "Multi-dimensional Scaling (MDS)": [[985, "multi-dimensional-scaling-mds"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[985, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "Tips on practical use": [[985, "tips-on-practical-use"], [1004, "tips-on-practical-use"]], "Pairwise metrics, Affinities and Kernels": [[986, "pairwise-metrics-affinities-and-kernels"]], "Cosine similarity": [[986, "cosine-similarity"]], "Laplacian kernel": [[986, "laplacian-kernel"]], "Chi-squared kernel": [[986, "chi-squared-kernel"]], "Gaussian mixture models": [[987, "gaussian-mixture-models"]], "Gaussian Mixture": [[987, "gaussian-mixture"]], "Pros:": [[987, null], [987, null]], "Cons:": [[987, null], [987, null]], "Variational Bayesian Gaussian Mixture": [[987, "variational-bayesian-gaussian-mixture"]], "The Dirichlet Process": [[987, "the-dirichlet-process"]], "Metrics and scoring: quantifying the quality of predictions": [[988, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "The scoring parameter: defining model evaluation rules": [[988, "the-scoring-parameter-defining-model-evaluation-rules"]], "Common cases: predefined values": [[988, "common-cases-predefined-values"]], "Defining your scoring strategy from metric functions": [[988, "defining-your-scoring-strategy-from-metric-functions"]], "Implementing your own scoring object": [[988, "implementing-your-own-scoring-object"]], "Using multiple metric evaluation": [[988, "using-multiple-metric-evaluation"]], "From binary to multiclass and multilabel": [[988, "from-binary-to-multiclass-and-multilabel"]], "Accuracy score": [[988, "accuracy-score"]], "Example:": [[988, null], [988, null], [988, null], [988, null], [988, null], [988, null], [988, null], [988, null], [1000, null], [1022, null]], "Top-k accuracy score": [[988, "top-k-accuracy-score"]], "Balanced accuracy score": [[988, "balanced-accuracy-score"]], "Cohen\u2019s kappa": [[988, "cohen-s-kappa"]], "Classification report": [[988, "classification-report"]], "Hamming loss": [[988, "hamming-loss"]], "Precision, recall and F-measures": [[988, "precision-recall-and-f-measures"]], "Binary classification": [[988, "binary-classification"]], "Multiclass and multilabel classification": [[988, "multiclass-and-multilabel-classification"]], "Jaccard similarity coefficient score": [[988, "jaccard-similarity-coefficient-score"]], "Hinge loss": [[988, "hinge-loss"]], "Log loss": [[988, "log-loss"]], "Matthews correlation coefficient": [[988, "matthews-correlation-coefficient"]], "Multi-label confusion matrix": [[988, "multi-label-confusion-matrix"]], "Receiver operating characteristic (ROC)": [[988, "receiver-operating-characteristic-roc"]], "Binary case": [[988, "binary-case"]], "Multi-class case": [[988, "multi-class-case"]], "Multi-label case": [[988, "multi-label-case"]], "Detection error tradeoff (DET)": [[988, "detection-error-tradeoff-det"]], "Zero one loss": [[988, "zero-one-loss"]], "Brier score loss": [[988, "brier-score-loss"]], "Class likelihood ratios": [[988, "class-likelihood-ratios"]], "Coverage error": [[988, "coverage-error"]], "Label ranking average precision": [[988, "label-ranking-average-precision"]], "Ranking loss": [[988, "ranking-loss"]], "Normalized Discounted Cumulative Gain": [[988, "normalized-discounted-cumulative-gain"]], "R\u00b2 score, the coefficient of determination": [[988, "r2-score-the-coefficient-of-determination"]], "Mean absolute error": [[988, "mean-absolute-error"]], "Mean squared error": [[988, "mean-squared-error"]], "Mean squared logarithmic error": [[988, "mean-squared-logarithmic-error"]], "Mean absolute percentage error": [[988, "mean-absolute-percentage-error"]], "Median absolute error": [[988, "median-absolute-error"]], "Max error": [[988, "max-error"]], "Explained variance score": [[988, "explained-variance-score"]], "Link to R\u00b2 score, the coefficient of determination": [[988, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[988, "mean-poisson-gamma-and-tweedie-deviances"]], "Pinball loss": [[988, "pinball-loss"]], "D\u00b2 score": [[988, "d2-score"]], "D\u00b2 Tweedie score": [[988, "d2-tweedie-score"]], "D\u00b2 pinball score": [[988, "d2-pinball-score"]], "D\u00b2 absolute error score": [[988, "d2-absolute-error-score"]], "Visual evaluation of regression models": [[988, "visual-evaluation-of-regression-models"]], "Dummy estimators": [[988, "dummy-estimators"]], "Multiclass and multioutput algorithms": [[989, "multiclass-and-multioutput-algorithms"]], "Multiclass classification": [[989, "multiclass-classification"], [1022, null]], "Target format": [[989, "target-format"], [989, "id5"], [989, "id8"], [989, "id10"]], "OneVsRestClassifier": [[989, "onevsrestclassifier"]], "OneVsOneClassifier": [[989, "onevsoneclassifier"]], "OutputCodeClassifier": [[989, "outputcodeclassifier"]], "MultiOutputClassifier": [[989, "multioutputclassifier"]], "ClassifierChain": [[989, "classifierchain"]], "Multiclass-multioutput classification": [[989, "multiclass-multioutput-classification"]], "Multioutput regression": [[989, "multioutput-regression"]], "MultiOutputRegressor": [[989, "multioutputregressor"]], "RegressorChain": [[989, "regressorchain"]], "Naive Bayes": [[990, "naive-bayes"]], "Multinomial Naive Bayes": [[990, "multinomial-naive-bayes"]], "Complement Naive Bayes": [[990, "complement-naive-bayes"]], "Bernoulli Naive Bayes": [[990, "bernoulli-naive-bayes"]], "Categorical Naive Bayes": [[990, "categorical-naive-bayes"]], "Out-of-core naive Bayes model fitting": [[990, "out-of-core-naive-bayes-model-fitting"]], "Unsupervised Nearest Neighbors": [[991, "unsupervised-nearest-neighbors"]], "Finding the Nearest Neighbors": [[991, "finding-the-nearest-neighbors"]], "KDTree and BallTree Classes": [[991, "kdtree-and-balltree-classes"]], "Nearest Neighbors Regression": [[991, "nearest-neighbors-regression"]], "Nearest Neighbor Algorithms": [[991, "nearest-neighbor-algorithms"]], "Brute Force": [[991, "brute-force"]], "K-D Tree": [[991, "k-d-tree"]], "Ball Tree": [[991, "ball-tree"]], "Choice of Nearest Neighbors Algorithm": [[991, "choice-of-nearest-neighbors-algorithm"]], "Effect of leaf_size": [[991, "effect-of-leaf-size"]], "Valid Metrics for Nearest Neighbor Algorithms": [[991, "valid-metrics-for-nearest-neighbor-algorithms"]], "Nearest Centroid Classifier": [[991, "nearest-centroid-classifier"]], "Nearest Shrunken Centroid": [[991, "nearest-shrunken-centroid"]], "Nearest Neighbors Transformer": [[991, "nearest-neighbors-transformer"]], "Neighborhood Components Analysis": [[991, "neighborhood-components-analysis"]], "Dimensionality reduction": [[991, "dimensionality-reduction"]], "Mahalanobis distance": [[991, "mahalanobis-distance"]], "Complexity": [[991, "complexity"], [992, "complexity"], [1002, "complexity"], [1003, "complexity"], [1004, "complexity"]], "Transform": [[991, "transform"]], "Neural network models (supervised)": [[992, "neural-network-models-supervised"]], "Multi-layer Perceptron": [[992, "multi-layer-perceptron"]], "Regularization": [[992, "regularization"]], "Algorithms": [[992, "algorithms"]], "Tips on Practical Use": [[992, "tips-on-practical-use"], [1002, "tips-on-practical-use"], [1003, "tips-on-practical-use"]], "More control with warm_start": [[992, "more-control-with-warm-start"]], "Neural network models (unsupervised)": [[993, "neural-network-models-unsupervised"]], "Restricted Boltzmann machines": [[993, "restricted-boltzmann-machines"]], "Graphical model and parametrization": [[993, "graphical-model-and-parametrization"]], "Bernoulli Restricted Boltzmann machines": [[993, "bernoulli-restricted-boltzmann-machines"]], "Stochastic Maximum Likelihood learning": [[993, "stochastic-maximum-likelihood-learning"]], "Novelty and Outlier Detection": [[994, "novelty-and-outlier-detection"]], "Overview of outlier detection methods": [[994, "overview-of-outlier-detection-methods"]], "Novelty Detection": [[994, "novelty-detection"]], "Scaling up the One-Class SVM": [[994, "scaling-up-the-one-class-svm"]], "Outlier Detection": [[994, "id1"]], "Fitting an elliptic envelope": [[994, "fitting-an-elliptic-envelope"]], "Isolation Forest": [[994, "isolation-forest"]], "Local Outlier Factor": [[994, "local-outlier-factor"]], "Novelty detection with Local Outlier Factor": [[994, "novelty-detection-with-local-outlier-factor"]], "Partial Dependence and Individual Conditional Expectation plots": [[995, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[995, "partial-dependence-plots"]], "Individual conditional expectation (ICE) plot": [[995, "individual-conditional-expectation-ice-plot"]], "Mathematical Definition": [[995, "mathematical-definition"]], "Computation methods": [[995, "computation-methods"]], "Permutation feature importance": [[996, "permutation-feature-importance"]], "Outline of the permutation importance algorithm": [[996, "outline-of-the-permutation-importance-algorithm"]], "Relation to impurity-based importance in trees": [[996, "relation-to-impurity-based-importance-in-trees"]], "Misleading values on strongly correlated features": [[996, "misleading-values-on-strongly-correlated-features"]], "Preprocessing data": [[998, "preprocessing-data"]], "Standardization, or mean removal and variance scaling": [[998, "standardization-or-mean-removal-and-variance-scaling"]], "Scaling features to a range": [[998, "scaling-features-to-a-range"]], "Scaling sparse data": [[998, "scaling-sparse-data"]], "Scaling data with outliers": [[998, "scaling-data-with-outliers"]], "Scaling vs Whitening": [[998, null]], "Centering kernel matrices": [[998, "centering-kernel-matrices"]], "Non-linear transformation": [[998, "non-linear-transformation"]], "Mapping to a Uniform distribution": [[998, "mapping-to-a-uniform-distribution"]], "Mapping to a Gaussian distribution": [[998, "mapping-to-a-gaussian-distribution"]], "Normalization": [[998, "normalization"]], "Sparse input": [[998, null], [998, null]], "Encoding categorical features": [[998, "encoding-categorical-features"]], "Infrequent categories": [[998, "infrequent-categories"]], "Target Encoder": [[998, "target-encoder"]], "Discretization": [[998, "discretization"]], "K-bins discretization": [[998, "k-bins-discretization"]], "Feature binarization": [[998, "feature-binarization"]], "Generating polynomial features": [[998, "generating-polynomial-features"]], "Polynomial features": [[998, "polynomial-features"]], "Spline transformer": [[998, "spline-transformer"]], "Custom transformers": [[998, "custom-transformers"]], "Transforming the prediction target (y)": [[999, "transforming-the-prediction-target-y"]], "Label binarization": [[999, "label-binarization"]], "LabelBinarizer": [[999, "labelbinarizer"]], "MultiLabelBinarizer": [[999, "multilabelbinarizer"]], "Label encoding": [[999, "label-encoding"]], "Random Projection": [[1000, "random-projection"]], "The Johnson-Lindenstrauss lemma": [[1000, "the-johnson-lindenstrauss-lemma"]], "Gaussian random projection": [[1000, "gaussian-random-projection"]], "Sparse random projection": [[1000, "sparse-random-projection"]], "Inverse Transform": [[1000, "inverse-transform"]], "Unlabeled entries in y": [[1001, null]], "Self Training": [[1001, "self-training"]], "Label Propagation": [[1001, "label-propagation"]], "Stochastic Gradient Descent": [[1002, "stochastic-gradient-descent"]], "Stochastic Gradient Descent for sparse data": [[1002, "stochastic-gradient-descent-for-sparse-data"]], "Stopping criterion": [[1002, "stopping-criterion"]], "SGD": [[1002, "id5"]], "Implementation details": [[1002, "implementation-details"], [1003, "implementation-details"]], "Multi-class classification": [[1003, "multi-class-classification"]], "Scores and probabilities": [[1003, "scores-and-probabilities"]], "Unbalanced problems": [[1003, "unbalanced-problems"]], "Density estimation, novelty detection": [[1003, "density-estimation-novelty-detection"]], "Kernel functions": [[1003, "kernel-functions"]], "Parameters of the RBF Kernel": [[1003, "parameters-of-the-rbf-kernel"]], "Custom Kernels": [[1003, "custom-kernels"]], "SVC": [[1003, "svc"]], "SVR": [[1003, "svr"]], "Multi-output problems": [[1004, "multi-output-problems"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[1004, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Classification criteria": [[1004, "classification-criteria"]], "Regression criteria": [[1004, "regression-criteria"]], "Missing Values Support": [[1004, "missing-values-support"]], "Minimal Cost-Complexity Pruning": [[1004, "minimal-cost-complexity-pruning"]], "Unsupervised dimensionality reduction": [[1005, "unsupervised-dimensionality-reduction"]], "Pipelining": [[1005, null], [1020, "pipelining"]], "PCA: principal component analysis": [[1005, "pca-principal-component-analysis"]], "Random projections": [[1005, "random-projections"]], "Feature scaling": [[1005, null]], "Welcome to scikit-learn": [[1006, "welcome-to-scikit-learn"]], "External Resources, Videos and Talks": [[1007, "external-resources-videos-and-talks"]], "New to Scientific Python?": [[1007, "new-to-scientific-python"]], "External Tutorials": [[1007, "external-tutorials"]], "Videos": [[1007, "videos"]], "Related Projects": [[1008, "related-projects"]], "Interoperability and framework enhancements": [[1008, "interoperability-and-framework-enhancements"]], "Other estimators and tasks": [[1008, "other-estimators-and-tasks"]], "Statistical learning with Python": [[1008, "statistical-learning-with-python"]], "Recommendation Engine packages": [[1008, "recommendation-engine-packages"]], "Domain specific packages": [[1008, "domain-specific-packages"]], "Translations of scikit-learn documentation": [[1008, "translations-of-scikit-learn-documentation"]], "Roadmap": [[1009, "id1"]], "Purpose of this document": [[1009, "purpose-of-this-document"]], "Statement of purpose: Scikit-learn in 2018": [[1009, "statement-of-purpose-scikit-learn-in-2018"]], "Architectural / general goals": [[1009, "architectural-general-goals"]], "Subpackage-specific goals": [[1009, "subpackage-specific-goals"]], "Supervised learning": [[1011, "supervised-learning"]], "Support": [[1012, "support"]], "Mailing List": [[1012, "mailing-list"]], "User questions": [[1012, "user-questions"]], "Bug tracker": [[1012, "bug-tracker"]], "Gitter": [[1012, "gitter"]], "Documentation resources": [[1012, "documentation-resources"]], "Who is using scikit-learn?": [[1013, "who-is-using-scikit-learn"]], "J.P.Morgan": [[1013, "id1"]], "Spotify": [[1013, "id2"]], "Inria": [[1013, "id3"]], "betaworks": [[1013, "id4"]], "Hugging Face": [[1013, "id5"]], "Evernote": [[1013, "id6"]], "T\u00e9l\u00e9com ParisTech": [[1013, "id7"]], "Booking.com": [[1013, "id8"]], "AWeber": [[1013, "id9"]], "Yhat": [[1013, "id10"]], "Rangespan": [[1013, "id11"]], "Birchbox": [[1013, "id12"]], "Bestofmedia Group": [[1013, "id13"]], "Change.org": [[1013, "id14"]], "PHIMECA Engineering": [[1013, "id15"]], "HowAboutWe": [[1013, "id16"]], "PeerIndex": [[1013, "id17"]], "DataRobot": [[1013, "id18"]], "OkCupid": [[1013, "id19"]], "Lovely": [[1013, "id20"]], "Data Publica": [[1013, "id21"]], "Machinalis": [[1013, "id22"]], "solido": [[1013, "id23"]], "INFONEA": [[1013, "id24"]], "Dataiku": [[1013, "id25"]], "Otto Group": [[1013, "id26"]], "Zopa": [[1013, "id27"]], "MARS": [[1013, "id28"]], "BNP Paribas Cardif": [[1013, "id29"]], "An introduction to machine learning with scikit-learn": [[1015, "an-introduction-to-machine-learning-with-scikit-learn"]], "Section contents": [[1015, null]], "Machine learning: the problem setting": [[1015, "machine-learning-the-problem-setting"]], "Training set and testing set": [[1015, null], [1022, null]], "Loading an example dataset": [[1015, "loading-an-example-dataset"]], "Shape of the data arrays": [[1015, null]], "Learning and predicting": [[1015, "learning-and-predicting"]], "Choosing the parameters of the model": [[1015, null]], "Conventions": [[1015, "conventions"]], "Type casting": [[1015, "type-casting"]], "Refitting and updating parameters": [[1015, "refitting-and-updating-parameters"]], "Multiclass vs. multilabel fitting": [[1015, "multiclass-vs-multilabel-fitting"]], "scikit-learn Tutorials": [[1016, "scikit-learn-tutorials"]], "Choosing the right estimator": [[1017, "choosing-the-right-estimator"]], "A tutorial on statistical-learning for scientific data processing": [[1018, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "Statistical learning": [[1018, null]], "Model selection: choosing estimators and their parameters": [[1019, "model-selection-choosing-estimators-and-their-parameters"]], "Score, and cross-validated scores": [[1019, "score-and-cross-validated-scores"]], "Cross-validation generators": [[1019, "cross-validation-generators"]], "Exercise": [[1019, null], [1019, null], [1022, null], [1022, null]], "Grid-search and cross-validated estimators": [[1019, "grid-search-and-cross-validated-estimators"]], "Grid-search": [[1019, "grid-search"]], "Nested cross-validation": [[1019, null]], "Cross-validated estimators": [[1019, "cross-validated-estimators"]], "Putting it all together": [[1020, "putting-it-all-together"]], "Face recognition with eigenfaces": [[1020, "face-recognition-with-eigenfaces"]], "Open problem: Stock Market Structure": [[1020, "open-problem-stock-market-structure"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[1021, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Datasets": [[1021, "datasets"]], "A simple example shipped with scikit-learn: iris dataset": [[1021, null]], "An example of reshaping data would be the digits dataset": [[1021, null]], "Estimators objects": [[1021, "estimators-objects"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[1022, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "The problem solved in supervised learning": [[1022, null]], "Vocabulary: classification and regression": [[1022, null]], "Nearest neighbor and the curse of dimensionality": [[1022, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Classifying irises:": [[1022, null]], "k-Nearest neighbors classifier": [[1022, "k-nearest-neighbors-classifier"]], "The curse of dimensionality": [[1022, "the-curse-of-dimensionality"]], "Linear model: from regression to sparsity": [[1022, "linear-model-from-regression-to-sparsity"]], "Linear regression": [[1022, "linear-regression"]], "Shrinkage": [[1022, "shrinkage"]], "Different algorithms for the same problem": [[1022, null]], "Shrinkage and sparsity with logistic regression": [[1022, null]], "Support vector machines (SVMs)": [[1022, "support-vector-machines-svms"]], "Linear SVMs": [[1022, "linear-svms"]], "Using kernels": [[1022, "using-kernels"]], "RBF kernel (Radial Basis Function)": [[1022, "rbf-kernel-radial-basis-function"]], "Interactive example": [[1022, null]], "Unsupervised learning: seeking representations of the data": [[1023, "unsupervised-learning-seeking-representations-of-the-data"]], "Clustering: grouping observations together": [[1023, "clustering-grouping-observations-together"]], "The problem solved in clustering": [[1023, null]], "K-means clustering": [[1023, "k-means-clustering"]], "Application example: vector quantization": [[1023, null]], "Hierarchical agglomerative clustering: Ward": [[1023, "hierarchical-agglomerative-clustering-ward"]], "Connectivity-constrained clustering": [[1023, "connectivity-constrained-clustering"]], "transform and inverse_transform methods": [[1023, null]], "Decompositions: from a signal to components and loadings": [[1023, "decompositions-from-a-signal-to-components-and-loadings"]], "Components and loadings": [[1023, null]], "Principal component analysis: PCA": [[1023, "principal-component-analysis-pca"]], "Independent Component Analysis: ICA": [[1023, "independent-component-analysis-ica"]], "Working With Text Data": [[1024, "working-with-text-data"]], "Tutorial setup": [[1024, "tutorial-setup"]], "Loading the 20 newsgroups dataset": [[1024, "loading-the-20-newsgroups-dataset"]], "Extracting features from text files": [[1024, "extracting-features-from-text-files"]], "Bags of words": [[1024, "bags-of-words"]], "Tokenizing text with scikit-learn": [[1024, "tokenizing-text-with-scikit-learn"]], "From occurrences to frequencies": [[1024, "from-occurrences-to-frequencies"]], "Training a classifier": [[1024, "training-a-classifier"]], "Building a pipeline": [[1024, "building-a-pipeline"]], "Evaluation of the performance on the test set": [[1024, "evaluation-of-the-performance-on-the-test-set"]], "Parameter tuning using grid search": [[1024, "parameter-tuning-using-grid-search"]], "Exercises": [[1024, "exercises"]], "Exercise 1: Language identification": [[1024, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[1024, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[1024, "exercise-3-cli-text-classification-utility"]], "Where to from here": [[1024, "where-to-from-here"]], "Unsupervised learning": [[1025, "unsupervised-learning"]], "User Guide": [[1026, "user-guide"]], "Under Development": [[1026, "under-development"]], "Available documentation for Scikit-learn": [[1027, "available-documentation-for-scikit-learn"]], "Visualizations": [[1028, "visualizations"]], "Available Plotting Utilities": [[1028, "available-plotting-utilities"]], "Display Objects": [[1028, "display-objects"]], "Release History": [[1029, "release-history"]], "Version 0.12.1": [[1031, "version-0-12-1"]], "Changelog": [[1031, "changelog"], [1031, "id1"], [1031, "id3"], [1031, "id6"], [1031, "id9"], [1031, "id12"], [1031, "id14"], [1031, "id16"], [1031, "id18"], [1031, "id19"], [1032, "changelog"], [1032, "id1"], [1033, "changelog"], [1034, "changelog"], [1035, "changelog"], [1035, "id1"], [1036, "changelog"], [1036, "id1"], [1037, "changelog"], [1037, "id1"], [1037, "id2"], [1038, "changelog"], [1038, "id1"], [1039, "changelog"], [1039, "id1"], [1039, "id5"], [1039, "id10"], [1039, "id23"], [1040, "changelog"], [1040, "id1"], [1040, "id2"], [1040, "id7"], [1041, "changelog"], [1041, "id1"], [1041, "id4"], [1042, "changelog"], [1042, "id1"], [1042, "id4"], [1043, "changelog"], [1043, "id1"], [1043, "id4"], [1044, "changelog"], [1044, "id1"], [1044, "id7"], [1045, "changelog"], [1045, "id1"], [1045, "id7"], [1046, "changelog"], [1046, "id1"], [1046, "id9"], [1047, "changelog"], [1047, "id1"], [1047, "id6"], [1048, "changelog"]], "People": [[1031, "people"], [1031, "id2"], [1031, "id5"], [1031, "id8"], [1031, "id11"], [1031, "id13"], [1031, "id15"], [1031, "id17"], [1032, "people"], [1032, "id2"], [1033, "people"], [1034, "people"]], "Version 0.12": [[1031, "version-0-12"]], "API changes summary": [[1031, "api-changes-summary"], [1031, "id4"], [1031, "id7"], [1031, "id10"], [1032, "api-changes-summary"], [1033, "api-changes-summary"], [1034, "api-changes-summary"], [1035, "api-changes-summary"], [1036, "api-changes-summary"], [1037, "api-changes-summary"], [1037, "id5"], [1038, "api-changes-summary"]], "Version 0.11": [[1031, "version-0-11"]], "Highlights": [[1031, "highlights"], [1034, "highlights"], [1035, "highlights"], [1038, "highlights"], [1039, "highlights"]], "Other changes": [[1031, "other-changes"]], "Version 0.10": [[1031, "version-0-10"]], "Version 0.9": [[1031, "version-0-9"]], "Version 0.8": [[1031, "version-0-8"]], "Version 0.7": [[1031, "version-0-7"]], "Version 0.6": [[1031, "version-0-6"]], "Version 0.5": [[1031, "version-0-5"]], "New classes": [[1031, "new-classes"]], "Fixes": [[1031, "fixes"]], "External dependencies": [[1031, "external-dependencies"]], "Removed modules": [[1031, "removed-modules"]], "Misc": [[1031, "misc"]], "Version 0.4": [[1031, "version-0-4"]], "Earlier versions": [[1031, "earlier-versions"]], "Version 0.13.1": [[1032, "version-0-13-1"]], "Version 0.13": [[1032, "version-0-13"]], "New Estimator Classes": [[1032, "new-estimator-classes"]], "Version 0.14": [[1033, "version-0-14"]], "Version 0.15.2": [[1034, "version-0-15-2"]], "Bug fixes": [[1034, "bug-fixes"], [1034, "id1"], [1034, "id2"], [1035, "bug-fixes"], [1035, "id2"], [1036, "bug-fixes"], [1036, "id2"], [1037, "bug-fixes"], [1037, "id4"], [1038, "bug-fixes"], [1038, "id3"]], "Version 0.15.1": [[1034, "version-0-15-1"]], "Version 0.15": [[1034, "version-0-15"]], "New features": [[1034, "new-features"], [1035, "new-features"], [1036, "new-features"], [1037, "new-features"], [1038, "new-features"]], "Enhancements": [[1034, "enhancements"], [1035, "enhancements"], [1036, "enhancements"], [1037, "enhancements"], [1037, "id3"], [1038, "enhancements"], [1038, "id2"]], "Documentation improvements": [[1034, "documentation-improvements"], [1035, "documentation-improvements"]], "Version 0.16.1": [[1035, "version-0-16-1"]], "Version 0.16": [[1035, "version-0-16"]], "Code Contributors": [[1035, "code-contributors"], [1036, "code-contributors"], [1037, "code-contributors"], [1037, "id6"]], "Version 0.17.1": [[1036, "version-0-17-1"]], "Version 0.17": [[1036, "version-0-17"]], "Version 0.18.2": [[1037, "version-0-18-2"]], "Last release with Python 2.6 support": [[1037, null], [1037, null]], "Version 0.18.1": [[1037, "version-0-18-1"]], "Version 0.18": [[1037, "version-0-18"]], "Model Selection Enhancements and API Changes": [[1037, "model-selection-enhancements-and-api-changes"]], "Version 0.19.2": [[1038, "version-0-19-2"]], "Related changes": [[1038, "related-changes"]], "Version 0.19.1": [[1038, "version-0-19-1"]], "API changes": [[1038, "api-changes"]], "Code and Documentation Contributors": [[1038, "code-and-documentation-contributors"], [1038, "id9"], [1039, "code-and-documentation-contributors"], [1039, "id8"], [1039, "id21"], [1039, "id41"], [1040, "code-and-documentation-contributors"], [1041, "code-and-documentation-contributors"], [1042, "code-and-documentation-contributors"], [1043, "code-and-documentation-contributors"], [1044, "code-and-documentation-contributors"], [1045, "code-and-documentation-contributors"], [1046, "code-and-documentation-contributors"], [1047, "code-and-documentation-contributors"], [1048, "code-and-documentation-contributors"]], "Version 0.19": [[1038, "version-0-19"]], "Changed models": [[1038, "changed-models"], [1039, "changed-models"], [1039, "id9"], [1039, "id22"], [1040, "changed-models"], [1040, "id6"], [1041, "changed-models"], [1042, "changed-models"], [1042, "id3"], [1043, "changed-models"], [1044, "changed-models"], [1045, "changed-models"], [1045, "id6"], [1046, "changed-models"], [1046, "id7"], [1047, "changed-models"], [1047, "id4"], [1048, "changed-models"]], "Version 0.20.4": [[1039, "version-0-20-4"]], "sklearn.cluster": [[1039, "sklearn-cluster"], [1039, "id2"], [1039, "id11"], [1039, "id24"], [1040, "sklearn-cluster"], [1040, "id8"], [1041, "sklearn-cluster"], [1041, "id5"], [1042, "sklearn-cluster"], [1042, "id2"], [1042, "id5"], [1043, "sklearn-cluster"], [1044, "sklearn-cluster"], [1044, "id2"], [1044, "id9"], [1045, "sklearn-cluster"], [1045, "id8"], [1046, "sklearn-cluster"], [1046, "id12"], [1047, "sklearn-cluster"], [1047, "id8"], [1048, "sklearn-cluster"]], "sklearn.compose": [[1039, "sklearn-compose"], [1039, "id3"], [1039, "id6"], [1039, "id12"], [1039, "id25"], [1040, "sklearn-compose"], [1040, "id9"], [1041, "sklearn-compose"], [1042, "sklearn-compose"], [1043, "sklearn-compose"], [1043, "id5"], [1044, "sklearn-compose"], [1045, "sklearn-compose"], [1046, "sklearn-compose"], [1047, "sklearn-compose"], [1048, "sklearn-compose"]], "sklearn.decomposition": [[1039, "sklearn-decomposition"], [1039, "id4"], [1039, "id14"], [1039, "id28"], [1040, "sklearn-decomposition"], [1040, "id11"], [1041, "sklearn-decomposition"], [1042, "sklearn-decomposition"], [1042, "id6"], [1043, "sklearn-decomposition"], [1043, "id7"], [1044, "sklearn-decomposition"], [1044, "id11"], [1045, "sklearn-decomposition"], [1045, "id10"], [1046, "sklearn-decomposition"], [1046, "id14"], [1047, "sklearn-decomposition"], [1047, "id10"], [1048, "sklearn-decomposition"]], "sklearn.model_selection": [[1039, "sklearn-model-selection"], [1039, "id35"], [1040, "sklearn-model-selection"], [1041, "sklearn-model-selection"], [1041, "id9"], [1041, "id13"], [1042, "sklearn-model-selection"], [1043, "sklearn-model-selection"], [1043, "id13"], [1044, "sklearn-model-selection"], [1045, "sklearn-model-selection"], [1046, "sklearn-model-selection"], [1046, "id20"], [1047, "sklearn-model-selection"], [1048, "sklearn-model-selection"]], "sklearn.neighbors": [[1039, "sklearn-neighbors"], [1039, "id7"], [1039, "id18"], [1039, "id36"], [1040, "sklearn-neighbors"], [1040, "id5"], [1040, "id17"], [1041, "sklearn-neighbors"], [1041, "id11"], [1043, "sklearn-neighbors"], [1044, "sklearn-neighbors"], [1044, "id5"], [1044, "id18"], [1045, "sklearn-neighbors"], [1046, "sklearn-neighbors"], [1047, "sklearn-neighbors"], [1047, "id16"], [1048, "sklearn-neighbors"]], "Version 0.20.3": [[1039, "version-0-20-3"]], "sklearn.covariance": [[1039, "sklearn-covariance"], [1039, "id26"], [1043, "sklearn-covariance"], [1044, "sklearn-covariance"], [1045, "sklearn-covariance"], [1047, "sklearn-covariance"]], "sklearn.datasets": [[1039, "sklearn-datasets"], [1039, "id13"], [1039, "id27"], [1040, "sklearn-datasets"], [1040, "id10"], [1041, "sklearn-datasets"], [1042, "sklearn-datasets"], [1043, "sklearn-datasets"], [1044, "sklearn-datasets"], [1044, "id10"], [1045, "sklearn-datasets"], [1045, "id9"], [1046, "sklearn-datasets"], [1046, "id13"], [1047, "sklearn-datasets"], [1047, "id9"], [1048, "sklearn-datasets"]], "sklearn.feature_extraction": [[1039, "sklearn-feature-extraction"], [1039, "id15"], [1039, "id30"], [1040, "sklearn-feature-extraction"], [1041, "sklearn-feature-extraction"], [1042, "sklearn-feature-extraction"], [1042, "id8"], [1043, "sklearn-feature-extraction"], [1043, "id9"], [1044, "sklearn-feature-extraction"], [1044, "id13"], [1045, "sklearn-feature-extraction"], [1046, "sklearn-feature-extraction"], [1047, "sklearn-feature-extraction"]], "sklearn.impute": [[1039, "sklearn-impute"], [1039, "id31"], [1040, "sklearn-impute"], [1040, "id13"], [1041, "sklearn-impute"], [1041, "id6"], [1042, "sklearn-impute"], [1043, "sklearn-impute"], [1044, "sklearn-impute"], [1045, "sklearn-impute"], [1045, "id12"], [1046, "sklearn-impute"], [1047, "sklearn-impute"], [1047, "id13"]], "sklearn.linear_model": [[1039, "sklearn-linear-model"], [1039, "id16"], [1039, "id32"], [1040, "sklearn-linear-model"], [1040, "id15"], [1041, "sklearn-linear-model"], [1042, "sklearn-linear-model"], [1042, "id9"], [1043, "sklearn-linear-model"], [1043, "id11"], [1044, "sklearn-linear-model"], [1044, "id4"], [1044, "id15"], [1045, "sklearn-linear-model"], [1045, "id13"], [1046, "sklearn-linear-model"], [1046, "id18"], [1047, "sklearn-linear-model"], [1048, "sklearn-linear-model"]], "sklearn.preprocessing": [[1039, "sklearn-preprocessing"], [1039, "id19"], [1039, "id37"], [1040, "sklearn-preprocessing"], [1040, "id18"], [1041, "sklearn-preprocessing"], [1041, "id12"], [1042, "sklearn-preprocessing"], [1043, "sklearn-preprocessing"], [1043, "id15"], [1044, "sklearn-preprocessing"], [1044, "id20"], [1045, "sklearn-preprocessing"], [1045, "id4"], [1045, "id16"], [1046, "sklearn-preprocessing"], [1046, "id4"], [1046, "id22"], [1047, "sklearn-preprocessing"], [1047, "id17"], [1048, "sklearn-preprocessing"]], "sklearn.svm": [[1039, "sklearn-svm"], [1039, "id38"], [1040, "sklearn-svm"], [1041, "sklearn-svm"], [1042, "sklearn-svm"], [1043, "sklearn-svm"], [1044, "sklearn-svm"], [1044, "id21"], [1045, "sklearn-svm"], [1046, "sklearn-svm"], [1047, "sklearn-svm"]], "Version 0.20.2": [[1039, "version-0-20-2"]], "sklearn.metrics": [[1039, "sklearn-metrics"], [1039, "id17"], [1039, "id33"], [1040, "sklearn-metrics"], [1040, "id4"], [1040, "id16"], [1041, "sklearn-metrics"], [1041, "id2"], [1041, "id8"], [1042, "sklearn-metrics"], [1042, "id10"], [1043, "sklearn-metrics"], [1043, "id2"], [1043, "id12"], [1044, "sklearn-metrics"], [1044, "id17"], [1045, "sklearn-metrics"], [1045, "id3"], [1045, "id15"], [1046, "sklearn-metrics"], [1047, "sklearn-metrics"], [1047, "id2"], [1047, "id14"], [1048, "sklearn-metrics"]], "sklearn.utils": [[1039, "sklearn-utils"], [1039, "id20"], [1039, "id39"], [1040, "sklearn-utils"], [1041, "sklearn-utils"], [1041, "id14"], [1042, "sklearn-utils"], [1042, "id12"], [1043, "sklearn-utils"], [1043, "id18"], [1044, "sklearn-utils"], [1044, "id6"], [1044, "id23"], [1045, "sklearn-utils"], [1045, "id18"], [1046, "sklearn-utils"], [1046, "id6"], [1046, "id24"], [1047, "sklearn-utils"], [1048, "sklearn-utils"]], "Version 0.20.1": [[1039, "version-0-20-1"]], "sklearn.ensemble": [[1039, "sklearn-ensemble"], [1039, "id29"], [1040, "sklearn-ensemble"], [1040, "id12"], [1041, "sklearn-ensemble"], [1042, "sklearn-ensemble"], [1042, "id7"], [1043, "sklearn-ensemble"], [1043, "id8"], [1044, "sklearn-ensemble"], [1044, "id3"], [1044, "id12"], [1045, "sklearn-ensemble"], [1046, "sklearn-ensemble"], [1046, "id3"], [1046, "id15"], [1047, "sklearn-ensemble"], [1047, "id11"], [1048, "sklearn-ensemble"]], "sklearn.mixture": [[1039, "sklearn-mixture"], [1039, "id34"], [1040, "sklearn-mixture"], [1044, "sklearn-mixture"], [1045, "sklearn-mixture"], [1047, "sklearn-mixture"], [1047, "id15"]], "Version 0.20.0": [[1039, "version-0-20-0"]], "Known Major Bugs": [[1039, "known-major-bugs"], [1040, "known-major-bugs"]], "sklearn.discriminant_analysis": [[1039, "sklearn-discriminant-analysis"], [1040, "sklearn-discriminant-analysis"], [1043, "sklearn-discriminant-analysis"], [1045, "sklearn-discriminant-analysis"], [1046, "sklearn-discriminant-analysis"], [1047, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[1039, "sklearn-dummy"], [1040, "sklearn-dummy"], [1041, "sklearn-dummy"], [1044, "sklearn-dummy"], [1045, "sklearn-dummy"]], "sklearn.feature_selection": [[1039, "sklearn-feature-selection"], [1041, "sklearn-feature-selection"], [1042, "sklearn-feature-selection"], [1043, "sklearn-feature-selection"], [1044, "sklearn-feature-selection"], [1044, "id14"], [1045, "sklearn-feature-selection"], [1045, "id2"], [1045, "id11"], [1046, "sklearn-feature-selection"], [1046, "id16"], [1047, "sklearn-feature-selection"], [1047, "id12"], [1048, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[1039, "sklearn-gaussian-process"], [1041, "sklearn-gaussian-process"], [1042, "sklearn-gaussian-process"], [1043, "sklearn-gaussian-process"], [1043, "id10"], [1044, "sklearn-gaussian-process"], [1045, "sklearn-gaussian-process"], [1046, "sklearn-gaussian-process"], [1047, "sklearn-gaussian-process"]], "sklearn.isotonic": [[1039, "sklearn-isotonic"], [1040, "sklearn-isotonic"], [1041, "sklearn-isotonic"], [1043, "sklearn-isotonic"], [1045, "sklearn-isotonic"], [1046, "sklearn-isotonic"]], "sklearn.manifold": [[1039, "sklearn-manifold"], [1040, "sklearn-manifold"], [1041, "sklearn-manifold"], [1042, "sklearn-manifold"], [1043, "sklearn-manifold"], [1044, "sklearn-manifold"], [1044, "id16"], [1045, "sklearn-manifold"], [1045, "id14"], [1046, "sklearn-manifold"], [1046, "id19"], [1047, "sklearn-manifold"]], "sklearn.multioutput": [[1039, "sklearn-multioutput"], [1040, "sklearn-multioutput"], [1041, "sklearn-multioutput"], [1042, "sklearn-multioutput"], [1043, "sklearn-multioutput"], [1043, "id14"], [1046, "sklearn-multioutput"], [1047, "sklearn-multioutput"]], "sklearn.naive_bayes": [[1039, "sklearn-naive-bayes"], [1041, "sklearn-naive-bayes"], [1041, "id10"], [1042, "sklearn-naive-bayes"], [1043, "sklearn-naive-bayes"], [1044, "sklearn-naive-bayes"], [1046, "sklearn-naive-bayes"], [1047, "sklearn-naive-bayes"]], "sklearn.neural_network": [[1039, "sklearn-neural-network"], [1040, "sklearn-neural-network"], [1041, "sklearn-neural-network"], [1042, "sklearn-neural-network"], [1043, "sklearn-neural-network"], [1044, "sklearn-neural-network"], [1045, "sklearn-neural-network"], [1046, "sklearn-neural-network"], [1046, "id21"], [1047, "sklearn-neural-network"]], "sklearn.pipeline": [[1039, "sklearn-pipeline"], [1040, "sklearn-pipeline"], [1041, "sklearn-pipeline"], [1042, "sklearn-pipeline"], [1043, "sklearn-pipeline"], [1044, "sklearn-pipeline"], [1044, "id19"], [1045, "sklearn-pipeline"], [1046, "sklearn-pipeline"], [1047, "sklearn-pipeline"]], "sklearn.tree": [[1039, "sklearn-tree"], [1040, "sklearn-tree"], [1040, "id19"], [1041, "sklearn-tree"], [1042, "sklearn-tree"], [1043, "sklearn-tree"], [1043, "id17"], [1044, "sklearn-tree"], [1044, "id22"], [1045, "sklearn-tree"], [1045, "id5"], [1045, "id17"], [1046, "sklearn-tree"], [1046, "id5"], [1046, "id23"], [1047, "sklearn-tree"], [1047, "id3"], [1047, "id18"], [1048, "sklearn-tree"]], "Multiple modules": [[1039, "multiple-modules"], [1040, "multiple-modules"]], "Changes to estimator checks": [[1039, "changes-to-estimator-checks"], [1040, "changes-to-estimator-checks"], [1041, "changes-to-estimator-checks"]], "Version 0.21.3": [[1040, "version-0-21-3"]], "Legend for changelogs": [[1040, "legend-for-changelogs"], [1041, "legend-for-changelogs"], [1042, "legend-for-changelogs"], [1043, "legend-for-changelogs"], [1044, "legend-for-changelogs"], [1045, "legend-for-changelogs"], [1046, "legend-for-changelogs"], [1047, "legend-for-changelogs"], [1048, "legend-for-changelogs"]], "sklearn.inspection": [[1040, "sklearn-inspection"], [1040, "id3"], [1040, "id14"], [1041, "sklearn-inspection"], [1041, "id7"], [1042, "sklearn-inspection"], [1042, "id11"], [1043, "sklearn-inspection"], [1044, "sklearn-inspection"], [1045, "sklearn-inspection"], [1046, "sklearn-inspection"], [1046, "id17"], [1047, "sklearn-inspection"], [1048, "sklearn-inspection"]], "Version 0.21.2": [[1040, "version-0-21-2"]], "sklearn.utils.sparsefuncs": [[1040, "sklearn-utils-sparsefuncs"]], "Version 0.21.1": [[1040, "version-0-21-1"]], "Version 0.21.0": [[1040, "version-0-21-0"]], "sklearn.base": [[1040, "sklearn-base"], [1041, "sklearn-base"], [1043, "sklearn-base"], [1044, "sklearn-base"], [1045, "sklearn-base"], [1046, "sklearn-base"], [1046, "id2"], [1046, "id10"], [1047, "sklearn-base"], [1048, "sklearn-base"]], "sklearn.calibration": [[1040, "sklearn-calibration"], [1041, "sklearn-calibration"], [1043, "sklearn-calibration"], [1044, "sklearn-calibration"], [1044, "id8"], [1045, "sklearn-calibration"], [1046, "sklearn-calibration"], [1046, "id11"], [1047, "sklearn-calibration"], [1047, "id7"], [1048, "sklearn-calibration"]], "sklearn.externals": [[1040, "sklearn-externals"]], "sklearn.multiclass": [[1040, "sklearn-multiclass"], [1043, "sklearn-multiclass"], [1044, "sklearn-multiclass"], [1045, "sklearn-multiclass"]], "Version 0.22.2.post1": [[1041, "version-0-22-2-post1"]], "Version 0.22.1": [[1041, "version-0-22-1"]], "sklearn.semi_supervised": [[1041, "sklearn-semi-supervised"], [1042, "sklearn-semi-supervised"], [1043, "sklearn-semi-supervised"], [1043, "id3"], [1043, "id16"], [1047, "sklearn-semi-supervised"]], "Version 0.22.0": [[1041, "version-0-22-0"]], "Website update": [[1041, "website-update"]], "Clear definition of the public API": [[1041, "clear-definition-of-the-public-api"]], "Deprecations: using FutureWarning from now on": [[1041, "deprecations-using-futurewarning-from-now-on"]], "sklearn.cross_decomposition": [[1041, "sklearn-cross-decomposition"], [1043, "sklearn-cross-decomposition"], [1043, "id6"], [1045, "sklearn-cross-decomposition"], [1047, "sklearn-cross-decomposition"]], "sklearn.kernel_approximation": [[1041, "sklearn-kernel-approximation"], [1043, "sklearn-kernel-approximation"], [1044, "sklearn-kernel-approximation"], [1045, "sklearn-kernel-approximation"], [1046, "sklearn-kernel-approximation"], [1047, "sklearn-kernel-approximation"]], "Version 0.23.2": [[1042, "version-0-23-2"]], "Version 0.23.1": [[1042, "version-0-23-1"]], "Version 0.23.0": [[1042, "version-0-23-0"]], "Enforcing keyword-only arguments": [[1042, "enforcing-keyword-only-arguments"], [1044, "enforcing-keyword-only-arguments"]], "Version 0.24.2": [[1043, "version-0-24-2"]], "Version 0.24.1": [[1043, "version-0-24-1"]], "Packaging": [[1043, "packaging"]], "Version 0.24.0": [[1043, "version-0-24-0"]], "sklearn.exceptions": [[1043, "sklearn-exceptions"], [1047, "sklearn-exceptions"]], "Version 1.0.2": [[1044, "version-1-0-2"]], "Version 1.0.1": [[1044, "version-1-0-1"]], "Fixed models": [[1044, "fixed-models"]], "Version 1.0.0": [[1044, "version-1-0-0"]], "Minimal dependencies": [[1044, "minimal-dependencies"], [1045, "minimal-dependencies"]], "Version 1.1.3": [[1045, "version-1-1-3"]], "Version 1.1.2": [[1045, "version-1-1-2"]], "Version 1.1.1": [[1045, "version-1-1-1"]], "Version 1.1.0": [[1045, "version-1-1-0"]], "sklearn.random_projection": [[1045, "sklearn-random-projection"]], "Version 1.2.2": [[1046, "version-1-2-2"]], "Version 1.2.1": [[1046, "version-1-2-1"]], "Changes impacting all modules": [[1046, "changes-impacting-all-modules"], [1046, "id8"], [1047, "changes-impacting-all-modules"], [1047, "id5"], [1048, "changes-impacting-all-modules"]], "Version 1.2.0": [[1046, "version-1-2-0"]], "Version 1.3.2": [[1047, "version-1-3-2"]], "Version 1.3.1": [[1047, "version-1-3-1"]], "Version 1.3.0": [[1047, "version-1-3-0"]], "Changed displays": [[1047, "changed-displays"]], "Experimental / Under Development": [[1047, "experimental-under-development"]], "sklearn": [[1047, "sklearn"]], "Version 1.4.0": [[1048, "version-1-4-0"]], "Support for SciPy sparse arrays": [[1048, "support-for-scipy-sparse-arrays"]]}, "indexentries": {"1d": [[395, "term-1d"]], "1d array": [[395, "term-1d-array"]], "2d": [[395, "term-2d"]], "2d array": [[395, "term-2d-array"]], "api": [[395, "term-API"]], "cv splitter": [[395, "term-CV-splitter"]], "slep": [[395, "term-SLEP"]], "sleps": [[395, "term-SLEPs"]], "x": [[395, "term-X"]], "xt": [[395, "term-Xt"]], "y": [[395, "term-Y"], [395, "term-y"]], "_estimator_type": [[395, "term-_estimator_type"]], "array-like": [[395, "term-array-like"]], "attribute": [[395, "term-attribute"]], "attributes": [[395, "term-attributes"]], "backwards compatibility": [[395, "term-backwards-compatibility"]], "binary": [[395, "term-binary"]], "callable": [[395, "term-callable"]], "categorical feature": [[395, "term-categorical-feature"]], "class_weight": [[395, "term-class_weight"]], "classes_": [[395, "term-classes_"]], "classifier": [[395, "term-classifier"]], "classifiers": [[395, "term-classifiers"]], "clone": [[395, "term-clone"]], "cloned": [[395, "term-cloned"]], "clusterer": [[395, "term-clusterer"]], "clusterers": [[395, "term-clusterers"]], "coef_": [[395, "term-coef_"]], "common tests": [[395, "term-common-tests"]], "components_": [[395, "term-components_"]], "consumer": [[395, "term-consumer"]], "continuous": [[395, "term-continuous"]], "continuous multi-output": [[395, "term-continuous-multi-output"]], "continuous multioutput": [[395, "term-continuous-multioutput"]], "cross fitting": [[395, "term-0"]], "cross validation": [[395, "term-1"]], "cross-fitting": [[395, "term-cross-fitting"]], "cross-validation": [[395, "term-cross-validation"]], "cross-validation estimator": [[395, "term-cross-validation-estimator"]], "cross-validation generator": [[395, "term-cross-validation-generator"]], "cross-validation splitter": [[395, "term-cross-validation-splitter"]], "cv": [[395, "term-cv"]], "data leakage": [[395, "term-data-leakage"]], "data type": [[395, "term-data-type"]], "decision_function": [[395, "term-decision_function"]], "density estimator": [[395, "term-density-estimator"]], "deprecation": [[395, "term-deprecation"]], "dimensionality": [[395, "term-dimensionality"]], "docstring": [[395, "term-docstring"]], "double underscore": [[395, "term-double-underscore"]], "double underscore notation": [[395, "term-double-underscore-notation"]], "dtype": [[395, "term-dtype"]], "duck typing": [[395, "term-duck-typing"]], "early stopping": [[395, "term-early-stopping"]], "embedding_": [[395, "term-embedding_"]], "estimator": [[395, "term-estimator"]], "estimator instance": [[395, "term-estimator-instance"]], "estimator tags": [[395, "term-estimator-tags"]], "estimators": [[395, "term-estimators"]], "evaluation metric": [[395, "term-evaluation-metric"]], "evaluation metrics": [[395, "term-evaluation-metrics"]], "examples": [[395, "term-examples"]], "experimental": [[395, "term-experimental"]], "feature": [[395, "term-feature"]], "feature extractor": [[395, "term-feature-extractor"]], "feature extractors": [[395, "term-feature-extractors"]], "feature vector": [[395, "term-feature-vector"]], "feature_importances_": [[395, "term-feature_importances_"]], "features": [[395, "term-features"]], "fit": [[395, "term-fit"]], "fit_predict": [[395, "term-fit_predict"]], "fit_transform": [[395, "term-fit_transform"]], "fitted": [[395, "term-fitted"]], "fitting": [[395, "term-fitting"]], "function": [[395, "term-function"]], "gallery": [[395, "term-gallery"]], "get_feature_names_out": [[395, "term-get_feature_names_out"]], "get_n_splits": [[395, "term-get_n_splits"]], "get_params": [[395, "term-get_params"]], "groups": [[395, "term-groups"]], "hyper-parameter": [[395, "term-hyper-parameter"]], "hyperparameter": [[395, "term-hyperparameter"]], "imputation": [[395, "term-imputation"]], "impute": [[395, "term-impute"]], "indexable": [[395, "term-indexable"]], "induction": [[395, "term-induction"]], "inductive": [[395, "term-inductive"]], "joblib": [[395, "term-joblib"]], "kernel": [[395, "term-kernel"]], "label indicator matrix": [[395, "term-label-indicator-matrix"]], "labels_": [[395, "term-labels_"]], "leakage": [[395, "term-leakage"]], "max_iter": [[395, "term-max_iter"]], "memmapping": [[395, "term-memmapping"]], "memory": [[395, "term-memory"]], "memory map": [[395, "term-memory-map"]], "memory mapping": [[395, "term-memory-mapping"]], "meta-estimator": [[395, "term-meta-estimator"]], "meta-estimators": [[395, "term-meta-estimators"]], "metadata": [[395, "term-metadata"]], "metaestimator": [[395, "term-metaestimator"]], "metaestimators": [[395, "term-metaestimators"]], "metric": [[395, "term-metric"]], "missing values": [[395, "term-missing-values"]], "multi-class": [[395, "term-multi-class"]], "multi-class multi-output": [[395, "term-multi-class-multi-output"]], "multi-label": [[395, "term-multi-label"]], "multi-output": [[395, "term-multi-output"]], "multi-output continuous": [[395, "term-multi-output-continuous"]], "multi-output multi-class": [[395, "term-multi-output-multi-class"]], "multiclass": [[395, "term-multiclass"]], "multiclass multioutput": [[395, "term-multiclass-multioutput"]], "multilabel": [[395, "term-multilabel"]], "multilabel indicator matrices": [[395, "term-multilabel-indicator-matrices"]], "multilabel indicator matrix": [[395, "term-multilabel-indicator-matrix"]], "multioutput": [[395, "term-multioutput"]], "multioutput continuous": [[395, "term-multioutput-continuous"]], "multioutput multiclass": [[395, "term-multioutput-multiclass"]], "n_components": [[395, "term-n_components"]], "n_features": [[395, "term-n_features"]], "n_iter_": [[395, "term-n_iter_"]], "n_iter_no_change": [[395, "term-n_iter_no_change"]], "n_jobs": [[395, "term-n_jobs"]], "n_outputs": [[395, "term-n_outputs"]], "n_samples": [[395, "term-n_samples"]], "n_targets": [[395, "term-n_targets"]], "narrative docs": [[395, "term-narrative-docs"]], "narrative documentation": [[395, "term-narrative-documentation"]], "np": [[395, "term-np"]], "online learning": [[395, "term-online-learning"]], "out-of-core": [[395, "term-out-of-core"]], "outlier detector": [[395, "term-outlier-detector"]], "outlier detectors": [[395, "term-outlier-detectors"]], "outputs": [[395, "term-outputs"]], "pair": [[395, "term-pair"]], "pairwise metric": [[395, "term-pairwise-metric"]], "pairwise metrics": [[395, "term-pairwise-metrics"]], "param": [[395, "term-param"]], "parameter": [[395, "term-parameter"]], "parameters": [[395, "term-parameters"]], "params": [[395, "term-params"]], "partial_fit": [[395, "term-partial_fit"]], "pd": [[395, "term-pd"]], "pos_label": [[395, "term-pos_label"]], "precomputed": [[395, "term-precomputed"]], "predict": [[395, "term-predict"]], "predict_log_proba": [[395, "term-predict_log_proba"]], "predict_proba": [[395, "term-predict_proba"]], "predictor": [[395, "term-predictor"]], "predictors": [[395, "term-predictors"]], "random_state": [[395, "term-random_state"]], "rectangular": [[395, "term-rectangular"]], "regressor": [[395, "term-regressor"]], "regressors": [[395, "term-regressors"]], "router": [[395, "term-router"]], "sample": [[395, "term-sample"]], "sample properties": [[395, "term-sample-properties"]], "sample property": [[395, "term-sample-property"]], "sample_weight": [[395, "term-sample_weight"]], "samples": [[395, "term-samples"]], "scikit-learn enhancement proposals": [[395, "term-scikit-learn-enhancement-proposals"]], "scikit-learn-contrib": [[395, "term-scikit-learn-contrib"]], "score": [[395, "term-score"]], "score_samples": [[395, "term-score_samples"]], "scorer": [[395, "term-scorer"]], "scoring": [[395, "term-scoring"]], "semi-supervised": [[395, "term-semi-supervised"]], "semi-supervised learning": [[395, "term-semi-supervised-learning"]], "semisupervised": [[395, "term-semisupervised"]], "set_params": [[395, "term-set_params"]], "sparse graph": [[395, "term-sparse-graph"]], "sparse matrix": [[395, "term-sparse-matrix"]], "split": [[395, "term-split"]], "stateless": [[395, "term-stateless"]], "supervised": [[395, "term-supervised"]], "supervised learning": [[395, "term-supervised-learning"]], "target": [[395, "term-target"]], "targets": [[395, "term-targets"]], "transduction": [[395, "term-transduction"]], "transductive": [[395, "term-transductive"]], "transform": [[395, "term-transform"]], "transformer": [[395, "term-transformer"]], "transformers": [[395, "term-transformers"]], "unlabeled": [[395, "term-unlabeled"]], "unlabeled data": [[395, "term-unlabeled-data"]], "unsupervised": [[395, "term-unsupervised"]], "unsupervised learning": [[395, "term-unsupervised-learning"]], "vectorizer": [[395, "term-vectorizer"]], "vectorizers": [[395, "term-vectorizers"]], "verbose": [[395, "term-verbose"]], "warm_start": [[395, "term-warm_start"]], "module": [[407, "module-sklearn"], [407, "module-sklearn.base"], [407, "module-sklearn.calibration"], [407, "module-sklearn.cluster"], [407, "module-sklearn.compose"], [407, "module-sklearn.covariance"], [407, "module-sklearn.cross_decomposition"], [407, "module-sklearn.datasets"], [407, "module-sklearn.decomposition"], [407, "module-sklearn.discriminant_analysis"], [407, "module-sklearn.dummy"], [407, "module-sklearn.ensemble"], [407, "module-sklearn.exceptions"], [407, "module-sklearn.experimental"], [407, "module-sklearn.feature_extraction"], [407, "module-sklearn.feature_extraction.image"], [407, "module-sklearn.feature_extraction.text"], [407, "module-sklearn.feature_selection"], [407, "module-sklearn.gaussian_process"], [407, "module-sklearn.gaussian_process.kernels"], [407, "module-sklearn.impute"], [407, "module-sklearn.inspection"], [407, "module-sklearn.isotonic"], [407, "module-sklearn.kernel_approximation"], [407, "module-sklearn.kernel_ridge"], [407, "module-sklearn.linear_model"], [407, "module-sklearn.manifold"], [407, "module-sklearn.metrics"], [407, "module-sklearn.metrics.cluster"], [407, "module-sklearn.metrics.pairwise"], [407, "module-sklearn.mixture"], [407, "module-sklearn.model_selection"], [407, "module-sklearn.multiclass"], [407, "module-sklearn.multioutput"], [407, "module-sklearn.naive_bayes"], [407, "module-sklearn.neighbors"], [407, "module-sklearn.neural_network"], [407, "module-sklearn.pipeline"], [407, "module-sklearn.preprocessing"], [407, "module-sklearn.random_projection"], [407, "module-sklearn.semi_supervised"], [407, "module-sklearn.svm"], [407, "module-sklearn.tree"], [407, "module-sklearn.utils"], [407, "module-sklearn.utils.arrayfuncs"], [407, "module-sklearn.utils.class_weight"], [407, "module-sklearn.utils.discovery"], [407, "module-sklearn.utils.estimator_checks"], [407, "module-sklearn.utils.extmath"], [407, "module-sklearn.utils.graph"], [407, "module-sklearn.utils.metadata_routing"], [407, "module-sklearn.utils.metaestimators"], [407, "module-sklearn.utils.multiclass"], [407, "module-sklearn.utils.parallel"], [407, "module-sklearn.utils.random"], [407, "module-sklearn.utils.sparsefuncs"], [407, "module-sklearn.utils.sparsefuncs_fast"], [407, "module-sklearn.utils.validation"], [578, "module-sklearn.experimental.enable_halving_search_cv"], [579, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn": [[407, "module-sklearn"]], "sklearn.base": [[407, "module-sklearn.base"]], "sklearn.calibration": [[407, "module-sklearn.calibration"]], "sklearn.cluster": [[407, "module-sklearn.cluster"]], "sklearn.compose": [[407, "module-sklearn.compose"]], "sklearn.covariance": [[407, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[407, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[407, "module-sklearn.datasets"]], "sklearn.decomposition": [[407, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[407, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[407, "module-sklearn.dummy"]], "sklearn.ensemble": [[407, "module-sklearn.ensemble"]], "sklearn.exceptions": [[407, "module-sklearn.exceptions"]], "sklearn.experimental": [[407, "module-sklearn.experimental"]], "sklearn.feature_extraction": [[407, "module-sklearn.feature_extraction"]], "sklearn.feature_extraction.image": [[407, "module-sklearn.feature_extraction.image"]], "sklearn.feature_extraction.text": [[407, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection": [[407, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[407, "module-sklearn.gaussian_process"]], "sklearn.gaussian_process.kernels": [[407, "module-sklearn.gaussian_process.kernels"]], "sklearn.impute": [[407, "module-sklearn.impute"]], "sklearn.inspection": [[407, "module-sklearn.inspection"]], "sklearn.isotonic": [[407, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[407, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[407, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[407, "module-sklearn.linear_model"]], "sklearn.manifold": [[407, "module-sklearn.manifold"]], "sklearn.metrics": [[407, "module-sklearn.metrics"]], "sklearn.metrics.cluster": [[407, "module-sklearn.metrics.cluster"]], "sklearn.metrics.pairwise": [[407, "module-sklearn.metrics.pairwise"]], "sklearn.mixture": [[407, "module-sklearn.mixture"]], "sklearn.model_selection": [[407, "module-sklearn.model_selection"]], "sklearn.multiclass": [[407, "module-sklearn.multiclass"]], "sklearn.multioutput": [[407, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[407, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[407, "module-sklearn.neighbors"]], "sklearn.neural_network": [[407, "module-sklearn.neural_network"]], "sklearn.pipeline": [[407, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[407, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[407, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[407, "module-sklearn.semi_supervised"]], "sklearn.svm": [[407, "module-sklearn.svm"]], "sklearn.tree": [[407, "module-sklearn.tree"]], "sklearn.utils": [[407, "module-sklearn.utils"]], "sklearn.utils.arrayfuncs": [[407, "module-sklearn.utils.arrayfuncs"]], "sklearn.utils.class_weight": [[407, "module-sklearn.utils.class_weight"]], "sklearn.utils.discovery": [[407, "module-sklearn.utils.discovery"]], "sklearn.utils.estimator_checks": [[407, "module-sklearn.utils.estimator_checks"]], "sklearn.utils.extmath": [[407, "module-sklearn.utils.extmath"]], "sklearn.utils.graph": [[407, "module-sklearn.utils.graph"]], "sklearn.utils.metadata_routing": [[407, "module-sklearn.utils.metadata_routing"]], "sklearn.utils.metaestimators": [[407, "module-sklearn.utils.metaestimators"]], "sklearn.utils.multiclass": [[407, "module-sklearn.utils.multiclass"]], "sklearn.utils.parallel": [[407, "module-sklearn.utils.parallel"]], "sklearn.utils.random": [[407, "module-sklearn.utils.random"]], "sklearn.utils.sparsefuncs": [[407, "module-sklearn.utils.sparsefuncs"]], "sklearn.utils.sparsefuncs_fast": [[407, "module-sklearn.utils.sparsefuncs_fast"]], "sklearn.utils.validation": [[407, "module-sklearn.utils.validation"]], "dbscan() (in module sklearn.cluster)": [[419, "sklearn.cluster.dbscan"]], "fastica() (in module sklearn.decomposition)": [[420, "sklearn.decomposition.fastica"]], "oas() (in module sklearn.covariance)": [[421, "sklearn.covariance.oas"]], "baseestimator (class in sklearn.base)": [[422, "sklearn.base.BaseEstimator"]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[422, "sklearn.base.BaseEstimator.get_metadata_routing"]], "get_params() (sklearn.base.baseestimator method)": [[422, "sklearn.base.BaseEstimator.get_params"]], "set_params() (sklearn.base.baseestimator method)": [[422, "sklearn.base.BaseEstimator.set_params"]], "biclustermixin (class in sklearn.base)": [[423, "sklearn.base.BiclusterMixin"]], "biclusters_ (sklearn.base.biclustermixin property)": [[423, "sklearn.base.BiclusterMixin.biclusters_"]], "get_indices() (sklearn.base.biclustermixin method)": [[423, "sklearn.base.BiclusterMixin.get_indices"]], "get_shape() (sklearn.base.biclustermixin method)": [[423, "sklearn.base.BiclusterMixin.get_shape"]], "get_submatrix() (sklearn.base.biclustermixin method)": [[423, "sklearn.base.BiclusterMixin.get_submatrix"]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[424, "sklearn.base.ClassNamePrefixFeaturesOutMixin"]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[424, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out"]], "classifiermixin (class in sklearn.base)": [[425, "sklearn.base.ClassifierMixin"]], "score() (sklearn.base.classifiermixin method)": [[425, "sklearn.base.ClassifierMixin.score"]], "clustermixin (class in sklearn.base)": [[426, "sklearn.base.ClusterMixin"]], "fit_predict() (sklearn.base.clustermixin method)": [[426, "sklearn.base.ClusterMixin.fit_predict"]], "densitymixin (class in sklearn.base)": [[427, "sklearn.base.DensityMixin"]], "score() (sklearn.base.densitymixin method)": [[427, "sklearn.base.DensityMixin.score"]], "metaestimatormixin (class in sklearn.base)": [[428, "sklearn.base.MetaEstimatorMixin"]], "onetoonefeaturemixin (class in sklearn.base)": [[429, "sklearn.base.OneToOneFeatureMixin"]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[429, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out"]], "outliermixin (class in sklearn.base)": [[430, "sklearn.base.OutlierMixin"]], "fit_predict() (sklearn.base.outliermixin method)": [[430, "sklearn.base.OutlierMixin.fit_predict"]], "regressormixin (class in sklearn.base)": [[431, "sklearn.base.RegressorMixin"]], "score() (sklearn.base.regressormixin method)": [[431, "sklearn.base.RegressorMixin.score"]], "transformermixin (class in sklearn.base)": [[432, "sklearn.base.TransformerMixin"]], "fit_transform() (sklearn.base.transformermixin method)": [[432, "sklearn.base.TransformerMixin.fit_transform"]], "set_output() (sklearn.base.transformermixin method)": [[432, "sklearn.base.TransformerMixin.set_output"]], "clone() (in module sklearn.base)": [[433, "sklearn.base.clone"]], "is_classifier() (in module sklearn.base)": [[434, "sklearn.base.is_classifier"]], "is_regressor() (in module sklearn.base)": [[435, "sklearn.base.is_regressor"]], "calibratedclassifiercv (class in sklearn.calibration)": [[436, "sklearn.calibration.CalibratedClassifierCV"]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[436, "sklearn.calibration.CalibratedClassifierCV.fit"]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[436, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing"]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[436, "sklearn.calibration.CalibratedClassifierCV.get_params"]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[436, "sklearn.calibration.CalibratedClassifierCV.predict"]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[436, "sklearn.calibration.CalibratedClassifierCV.predict_proba"]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[436, "sklearn.calibration.CalibratedClassifierCV.score"]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[436, "sklearn.calibration.CalibratedClassifierCV.set_fit_request"]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[436, "sklearn.calibration.CalibratedClassifierCV.set_params"]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[436, "sklearn.calibration.CalibratedClassifierCV.set_score_request"]], "calibrationdisplay (class in sklearn.calibration)": [[437, "sklearn.calibration.CalibrationDisplay"]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[437, "sklearn.calibration.CalibrationDisplay.from_estimator"]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[437, "sklearn.calibration.CalibrationDisplay.from_predictions"]], "plot() (sklearn.calibration.calibrationdisplay method)": [[437, "sklearn.calibration.CalibrationDisplay.plot"]], "calibration_curve() (in module sklearn.calibration)": [[438, "sklearn.calibration.calibration_curve"]], "affinitypropagation (class in sklearn.cluster)": [[439, "sklearn.cluster.AffinityPropagation"]], "fit() (sklearn.cluster.affinitypropagation method)": [[439, "sklearn.cluster.AffinityPropagation.fit"]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[439, "sklearn.cluster.AffinityPropagation.fit_predict"]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[439, "sklearn.cluster.AffinityPropagation.get_metadata_routing"]], "get_params() (sklearn.cluster.affinitypropagation method)": [[439, "sklearn.cluster.AffinityPropagation.get_params"]], "predict() (sklearn.cluster.affinitypropagation method)": [[439, "sklearn.cluster.AffinityPropagation.predict"]], "set_params() (sklearn.cluster.affinitypropagation method)": [[439, "sklearn.cluster.AffinityPropagation.set_params"]], "agglomerativeclustering (class in sklearn.cluster)": [[440, "sklearn.cluster.AgglomerativeClustering"]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[440, "sklearn.cluster.AgglomerativeClustering.fit"]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[440, "sklearn.cluster.AgglomerativeClustering.fit_predict"]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[440, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing"]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[440, "sklearn.cluster.AgglomerativeClustering.get_params"]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[440, "sklearn.cluster.AgglomerativeClustering.set_params"]], "birch (class in sklearn.cluster)": [[441, "sklearn.cluster.Birch"]], "fit() (sklearn.cluster.birch method)": [[441, "sklearn.cluster.Birch.fit"]], "fit_predict() (sklearn.cluster.birch method)": [[441, "sklearn.cluster.Birch.fit_predict"]], "fit_transform() (sklearn.cluster.birch method)": [[441, "sklearn.cluster.Birch.fit_transform"]], "get_feature_names_out() (sklearn.cluster.birch method)": [[441, "sklearn.cluster.Birch.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.birch method)": [[441, "sklearn.cluster.Birch.get_metadata_routing"]], "get_params() (sklearn.cluster.birch method)": [[441, "sklearn.cluster.Birch.get_params"]], "partial_fit() (sklearn.cluster.birch method)": [[441, "sklearn.cluster.Birch.partial_fit"]], "predict() (sklearn.cluster.birch method)": [[441, "sklearn.cluster.Birch.predict"]], "set_output() (sklearn.cluster.birch method)": [[441, "sklearn.cluster.Birch.set_output"]], "set_params() (sklearn.cluster.birch method)": [[441, "sklearn.cluster.Birch.set_params"]], "transform() (sklearn.cluster.birch method)": [[441, "sklearn.cluster.Birch.transform"]], "bisectingkmeans (class in sklearn.cluster)": [[442, "sklearn.cluster.BisectingKMeans"]], "fit() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.fit"]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.get_params"]], "predict() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.predict"]], "score() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.score"]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.set_fit_request"]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.set_output"]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.set_params"]], "set_predict_request() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.set_score_request"]], "transform() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.transform"]], "dbscan (class in sklearn.cluster)": [[443, "sklearn.cluster.DBSCAN"]], "fit() (sklearn.cluster.dbscan method)": [[443, "sklearn.cluster.DBSCAN.fit"]], "fit_predict() (sklearn.cluster.dbscan method)": [[443, "sklearn.cluster.DBSCAN.fit_predict"]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[443, "sklearn.cluster.DBSCAN.get_metadata_routing"]], "get_params() (sklearn.cluster.dbscan method)": [[443, "sklearn.cluster.DBSCAN.get_params"]], "set_fit_request() (sklearn.cluster.dbscan method)": [[443, "sklearn.cluster.DBSCAN.set_fit_request"]], "set_params() (sklearn.cluster.dbscan method)": [[443, "sklearn.cluster.DBSCAN.set_params"]], "featureagglomeration (class in sklearn.cluster)": [[444, "sklearn.cluster.FeatureAgglomeration"]], "fit() (sklearn.cluster.featureagglomeration method)": [[444, "sklearn.cluster.FeatureAgglomeration.fit"]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[444, "sklearn.cluster.FeatureAgglomeration.fit_predict"]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[444, "sklearn.cluster.FeatureAgglomeration.fit_transform"]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[444, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[444, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing"]], "get_params() (sklearn.cluster.featureagglomeration method)": [[444, "sklearn.cluster.FeatureAgglomeration.get_params"]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[444, "sklearn.cluster.FeatureAgglomeration.inverse_transform"]], "set_output() (sklearn.cluster.featureagglomeration method)": [[444, "sklearn.cluster.FeatureAgglomeration.set_output"]], "set_params() (sklearn.cluster.featureagglomeration method)": [[444, "sklearn.cluster.FeatureAgglomeration.set_params"]], "transform() (sklearn.cluster.featureagglomeration method)": [[444, "sklearn.cluster.FeatureAgglomeration.transform"]], "hdbscan (class in sklearn.cluster)": [[445, "sklearn.cluster.HDBSCAN"]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[445, "sklearn.cluster.HDBSCAN.dbscan_clustering"]], "fit() (sklearn.cluster.hdbscan method)": [[445, "sklearn.cluster.HDBSCAN.fit"]], "fit_predict() (sklearn.cluster.hdbscan method)": [[445, "sklearn.cluster.HDBSCAN.fit_predict"]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[445, "sklearn.cluster.HDBSCAN.get_metadata_routing"]], "get_params() (sklearn.cluster.hdbscan method)": [[445, "sklearn.cluster.HDBSCAN.get_params"]], "set_params() (sklearn.cluster.hdbscan method)": [[445, "sklearn.cluster.HDBSCAN.set_params"]], "kmeans (class in sklearn.cluster)": [[446, "sklearn.cluster.KMeans"]], "fit() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.fit"]], "fit_predict() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.fit_predict"]], "fit_transform() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.get_params"]], "predict() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.predict"]], "score() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.score"]], "set_fit_request() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.set_fit_request"]], "set_output() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.set_output"]], "set_params() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.set_params"]], "set_predict_request() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.set_score_request"]], "transform() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.transform"]], "meanshift (class in sklearn.cluster)": [[447, "sklearn.cluster.MeanShift"]], "fit() (sklearn.cluster.meanshift method)": [[447, "sklearn.cluster.MeanShift.fit"]], "fit_predict() (sklearn.cluster.meanshift method)": [[447, "sklearn.cluster.MeanShift.fit_predict"]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[447, "sklearn.cluster.MeanShift.get_metadata_routing"]], "get_params() (sklearn.cluster.meanshift method)": [[447, "sklearn.cluster.MeanShift.get_params"]], "predict() (sklearn.cluster.meanshift method)": [[447, "sklearn.cluster.MeanShift.predict"]], "set_params() (sklearn.cluster.meanshift method)": [[447, "sklearn.cluster.MeanShift.set_params"]], "minibatchkmeans (class in sklearn.cluster)": [[448, "sklearn.cluster.MiniBatchKMeans"]], "fit() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.fit"]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.get_params"]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.partial_fit"]], "predict() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.predict"]], "score() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.score"]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.set_fit_request"]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.set_output"]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.set_params"]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request"]], "set_predict_request() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.set_score_request"]], "transform() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.transform"]], "optics (class in sklearn.cluster)": [[449, "sklearn.cluster.OPTICS"]], "fit() (sklearn.cluster.optics method)": [[449, "sklearn.cluster.OPTICS.fit"]], "fit_predict() (sklearn.cluster.optics method)": [[449, "sklearn.cluster.OPTICS.fit_predict"]], "get_metadata_routing() (sklearn.cluster.optics method)": [[449, "sklearn.cluster.OPTICS.get_metadata_routing"]], "get_params() (sklearn.cluster.optics method)": [[449, "sklearn.cluster.OPTICS.get_params"]], "set_params() (sklearn.cluster.optics method)": [[449, "sklearn.cluster.OPTICS.set_params"]], "spectralbiclustering (class in sklearn.cluster)": [[450, "sklearn.cluster.SpectralBiclustering"]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[450, "sklearn.cluster.SpectralBiclustering.biclusters_"]], "fit() (sklearn.cluster.spectralbiclustering method)": [[450, "sklearn.cluster.SpectralBiclustering.fit"]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[450, "sklearn.cluster.SpectralBiclustering.get_indices"]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[450, "sklearn.cluster.SpectralBiclustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[450, "sklearn.cluster.SpectralBiclustering.get_params"]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[450, "sklearn.cluster.SpectralBiclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[450, "sklearn.cluster.SpectralBiclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[450, "sklearn.cluster.SpectralBiclustering.set_params"]], "spectralclustering (class in sklearn.cluster)": [[451, "sklearn.cluster.SpectralClustering"]], "fit() (sklearn.cluster.spectralclustering method)": [[451, "sklearn.cluster.SpectralClustering.fit"]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[451, "sklearn.cluster.SpectralClustering.fit_predict"]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[451, "sklearn.cluster.SpectralClustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralclustering method)": [[451, "sklearn.cluster.SpectralClustering.get_params"]], "set_params() (sklearn.cluster.spectralclustering method)": [[451, "sklearn.cluster.SpectralClustering.set_params"]], "spectralcoclustering (class in sklearn.cluster)": [[452, "sklearn.cluster.SpectralCoclustering"]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[452, "sklearn.cluster.SpectralCoclustering.biclusters_"]], "fit() (sklearn.cluster.spectralcoclustering method)": [[452, "sklearn.cluster.SpectralCoclustering.fit"]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[452, "sklearn.cluster.SpectralCoclustering.get_indices"]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[452, "sklearn.cluster.SpectralCoclustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[452, "sklearn.cluster.SpectralCoclustering.get_params"]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[452, "sklearn.cluster.SpectralCoclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[452, "sklearn.cluster.SpectralCoclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[452, "sklearn.cluster.SpectralCoclustering.set_params"]], "affinity_propagation() (in module sklearn.cluster)": [[453, "sklearn.cluster.affinity_propagation"]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[454, "sklearn.cluster.cluster_optics_dbscan"]], "cluster_optics_xi() (in module sklearn.cluster)": [[455, "sklearn.cluster.cluster_optics_xi"]], "compute_optics_graph() (in module sklearn.cluster)": [[456, "sklearn.cluster.compute_optics_graph"]], "estimate_bandwidth() (in module sklearn.cluster)": [[457, "sklearn.cluster.estimate_bandwidth"]], "k_means() (in module sklearn.cluster)": [[458, "sklearn.cluster.k_means"]], "kmeans_plusplus() (in module sklearn.cluster)": [[459, "sklearn.cluster.kmeans_plusplus"]], "mean_shift() (in module sklearn.cluster)": [[460, "sklearn.cluster.mean_shift"]], "spectral_clustering() (in module sklearn.cluster)": [[461, "sklearn.cluster.spectral_clustering"]], "ward_tree() (in module sklearn.cluster)": [[462, "sklearn.cluster.ward_tree"]], "columntransformer (class in sklearn.compose)": [[463, "sklearn.compose.ColumnTransformer"]], "fit() (sklearn.compose.columntransformer method)": [[463, "sklearn.compose.ColumnTransformer.fit"]], "fit_transform() (sklearn.compose.columntransformer method)": [[463, "sklearn.compose.ColumnTransformer.fit_transform"]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[463, "sklearn.compose.ColumnTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[463, "sklearn.compose.ColumnTransformer.get_metadata_routing"]], "get_params() (sklearn.compose.columntransformer method)": [[463, "sklearn.compose.ColumnTransformer.get_params"]], "named_transformers_ (sklearn.compose.columntransformer property)": [[463, "sklearn.compose.ColumnTransformer.named_transformers_"]], "set_output() (sklearn.compose.columntransformer method)": [[463, "sklearn.compose.ColumnTransformer.set_output"]], "set_params() (sklearn.compose.columntransformer method)": [[463, "sklearn.compose.ColumnTransformer.set_params"]], "transform() (sklearn.compose.columntransformer method)": [[463, "sklearn.compose.ColumnTransformer.transform"]], "transformedtargetregressor (class in sklearn.compose)": [[464, "sklearn.compose.TransformedTargetRegressor"]], "fit() (sklearn.compose.transformedtargetregressor method)": [[464, "sklearn.compose.TransformedTargetRegressor.fit"]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[464, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing"]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[464, "sklearn.compose.TransformedTargetRegressor.get_params"]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[464, "sklearn.compose.TransformedTargetRegressor.n_features_in_"]], "predict() (sklearn.compose.transformedtargetregressor method)": [[464, "sklearn.compose.TransformedTargetRegressor.predict"]], "score() (sklearn.compose.transformedtargetregressor method)": [[464, "sklearn.compose.TransformedTargetRegressor.score"]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[464, "sklearn.compose.TransformedTargetRegressor.set_params"]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[464, "sklearn.compose.TransformedTargetRegressor.set_score_request"]], "make_column_selector() (in module sklearn.compose)": [[465, "sklearn.compose.make_column_selector"]], "make_column_transformer() (in module sklearn.compose)": [[466, "sklearn.compose.make_column_transformer"]], "config_context() (in module sklearn)": [[467, "sklearn.config_context"]], "ellipticenvelope (class in sklearn.covariance)": [[468, "sklearn.covariance.EllipticEnvelope"]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.correct_covariance"]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.decision_function"]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.error_norm"]], "fit() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.fit"]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.fit_predict"]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.get_metadata_routing"]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.get_params"]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.get_precision"]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.mahalanobis"]], "predict() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.predict"]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.reweight_covariance"]], "score() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.score"]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.score_samples"]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.set_params"]], "set_score_request() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.set_score_request"]], "empiricalcovariance (class in sklearn.covariance)": [[469, "sklearn.covariance.EmpiricalCovariance"]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[469, "sklearn.covariance.EmpiricalCovariance.error_norm"]], "fit() (sklearn.covariance.empiricalcovariance method)": [[469, "sklearn.covariance.EmpiricalCovariance.fit"]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[469, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing"]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[469, "sklearn.covariance.EmpiricalCovariance.get_params"]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[469, "sklearn.covariance.EmpiricalCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[469, "sklearn.covariance.EmpiricalCovariance.mahalanobis"]], "score() (sklearn.covariance.empiricalcovariance method)": [[469, "sklearn.covariance.EmpiricalCovariance.score"]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[469, "sklearn.covariance.EmpiricalCovariance.set_params"]], "set_score_request() (sklearn.covariance.empiricalcovariance method)": [[469, "sklearn.covariance.EmpiricalCovariance.set_score_request"]], "graphicallasso (class in sklearn.covariance)": [[470, "sklearn.covariance.GraphicalLasso"]], "error_norm() (sklearn.covariance.graphicallasso method)": [[470, "sklearn.covariance.GraphicalLasso.error_norm"]], "fit() (sklearn.covariance.graphicallasso method)": [[470, "sklearn.covariance.GraphicalLasso.fit"]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[470, "sklearn.covariance.GraphicalLasso.get_metadata_routing"]], "get_params() (sklearn.covariance.graphicallasso method)": [[470, "sklearn.covariance.GraphicalLasso.get_params"]], "get_precision() (sklearn.covariance.graphicallasso method)": [[470, "sklearn.covariance.GraphicalLasso.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[470, "sklearn.covariance.GraphicalLasso.mahalanobis"]], "score() (sklearn.covariance.graphicallasso method)": [[470, "sklearn.covariance.GraphicalLasso.score"]], "set_params() (sklearn.covariance.graphicallasso method)": [[470, "sklearn.covariance.GraphicalLasso.set_params"]], "set_score_request() (sklearn.covariance.graphicallasso method)": [[470, "sklearn.covariance.GraphicalLasso.set_score_request"]], "graphicallassocv (class in sklearn.covariance)": [[471, "sklearn.covariance.GraphicalLassoCV"]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[471, "sklearn.covariance.GraphicalLassoCV.error_norm"]], "fit() (sklearn.covariance.graphicallassocv method)": [[471, "sklearn.covariance.GraphicalLassoCV.fit"]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[471, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing"]], "get_params() (sklearn.covariance.graphicallassocv method)": [[471, "sklearn.covariance.GraphicalLassoCV.get_params"]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[471, "sklearn.covariance.GraphicalLassoCV.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[471, "sklearn.covariance.GraphicalLassoCV.mahalanobis"]], "score() (sklearn.covariance.graphicallassocv method)": [[471, "sklearn.covariance.GraphicalLassoCV.score"]], "set_params() (sklearn.covariance.graphicallassocv method)": [[471, "sklearn.covariance.GraphicalLassoCV.set_params"]], "set_score_request() (sklearn.covariance.graphicallassocv method)": [[471, "sklearn.covariance.GraphicalLassoCV.set_score_request"]], "ledoitwolf (class in sklearn.covariance)": [[472, "sklearn.covariance.LedoitWolf"]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[472, "sklearn.covariance.LedoitWolf.error_norm"]], "fit() (sklearn.covariance.ledoitwolf method)": [[472, "sklearn.covariance.LedoitWolf.fit"]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[472, "sklearn.covariance.LedoitWolf.get_metadata_routing"]], "get_params() (sklearn.covariance.ledoitwolf method)": [[472, "sklearn.covariance.LedoitWolf.get_params"]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[472, "sklearn.covariance.LedoitWolf.get_precision"]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[472, "sklearn.covariance.LedoitWolf.mahalanobis"]], "score() (sklearn.covariance.ledoitwolf method)": [[472, "sklearn.covariance.LedoitWolf.score"]], "set_params() (sklearn.covariance.ledoitwolf method)": [[472, "sklearn.covariance.LedoitWolf.set_params"]], "set_score_request() (sklearn.covariance.ledoitwolf method)": [[472, "sklearn.covariance.LedoitWolf.set_score_request"]], "mincovdet (class in sklearn.covariance)": [[473, "sklearn.covariance.MinCovDet"]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[473, "sklearn.covariance.MinCovDet.correct_covariance"]], "error_norm() (sklearn.covariance.mincovdet method)": [[473, "sklearn.covariance.MinCovDet.error_norm"]], "fit() (sklearn.covariance.mincovdet method)": [[473, "sklearn.covariance.MinCovDet.fit"]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[473, "sklearn.covariance.MinCovDet.get_metadata_routing"]], "get_params() (sklearn.covariance.mincovdet method)": [[473, "sklearn.covariance.MinCovDet.get_params"]], "get_precision() (sklearn.covariance.mincovdet method)": [[473, "sklearn.covariance.MinCovDet.get_precision"]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[473, "sklearn.covariance.MinCovDet.mahalanobis"]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[473, "sklearn.covariance.MinCovDet.reweight_covariance"]], "score() (sklearn.covariance.mincovdet method)": [[473, "sklearn.covariance.MinCovDet.score"]], "set_params() (sklearn.covariance.mincovdet method)": [[473, "sklearn.covariance.MinCovDet.set_params"]], "set_score_request() (sklearn.covariance.mincovdet method)": [[473, "sklearn.covariance.MinCovDet.set_score_request"]], "oas (class in sklearn.covariance)": [[474, "sklearn.covariance.OAS"]], "error_norm() (sklearn.covariance.oas method)": [[474, "sklearn.covariance.OAS.error_norm"]], "fit() (sklearn.covariance.oas method)": [[474, "sklearn.covariance.OAS.fit"]], "get_metadata_routing() (sklearn.covariance.oas method)": [[474, "sklearn.covariance.OAS.get_metadata_routing"]], "get_params() (sklearn.covariance.oas method)": [[474, "sklearn.covariance.OAS.get_params"]], "get_precision() (sklearn.covariance.oas method)": [[474, "sklearn.covariance.OAS.get_precision"]], "mahalanobis() (sklearn.covariance.oas method)": [[474, "sklearn.covariance.OAS.mahalanobis"]], "score() (sklearn.covariance.oas method)": [[474, "sklearn.covariance.OAS.score"]], "set_params() (sklearn.covariance.oas method)": [[474, "sklearn.covariance.OAS.set_params"]], "set_score_request() (sklearn.covariance.oas method)": [[474, "sklearn.covariance.OAS.set_score_request"]], "shrunkcovariance (class in sklearn.covariance)": [[475, "sklearn.covariance.ShrunkCovariance"]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[475, "sklearn.covariance.ShrunkCovariance.error_norm"]], "fit() (sklearn.covariance.shrunkcovariance method)": [[475, "sklearn.covariance.ShrunkCovariance.fit"]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[475, "sklearn.covariance.ShrunkCovariance.get_metadata_routing"]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[475, "sklearn.covariance.ShrunkCovariance.get_params"]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[475, "sklearn.covariance.ShrunkCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[475, "sklearn.covariance.ShrunkCovariance.mahalanobis"]], "score() (sklearn.covariance.shrunkcovariance method)": [[475, "sklearn.covariance.ShrunkCovariance.score"]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[475, "sklearn.covariance.ShrunkCovariance.set_params"]], "set_score_request() (sklearn.covariance.shrunkcovariance method)": [[475, "sklearn.covariance.ShrunkCovariance.set_score_request"]], "empirical_covariance() (in module sklearn.covariance)": [[476, "sklearn.covariance.empirical_covariance"]], "graphical_lasso() (in module sklearn.covariance)": [[477, "sklearn.covariance.graphical_lasso"]], "ledoit_wolf() (in module sklearn.covariance)": [[478, "sklearn.covariance.ledoit_wolf"]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[479, "sklearn.covariance.ledoit_wolf_shrinkage"]], "shrunk_covariance() (in module sklearn.covariance)": [[480, "sklearn.covariance.shrunk_covariance"]], "cca (class in sklearn.cross_decomposition)": [[481, "sklearn.cross_decomposition.CCA"]], "fit() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.fit"]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.get_params"]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.inverse_transform"]], "predict() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.predict"]], "score() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.score"]], "set_output() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.set_output"]], "set_params() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.set_params"]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.set_transform_request"]], "transform() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.transform"]], "plscanonical (class in sklearn.cross_decomposition)": [[482, "sklearn.cross_decomposition.PLSCanonical"]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.fit"]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.inverse_transform"]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.predict"]], "score() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.score"]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.set_output"]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.set_params"]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.set_transform_request"]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.transform"]], "plsregression (class in sklearn.cross_decomposition)": [[483, "sklearn.cross_decomposition.PLSRegression"]], "fit() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.fit"]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.inverse_transform"]], "predict() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.predict"]], "score() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.score"]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.set_output"]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.set_params"]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.set_transform_request"]], "transform() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.transform"]], "plssvd (class in sklearn.cross_decomposition)": [[484, "sklearn.cross_decomposition.PLSSVD"]], "fit() (sklearn.cross_decomposition.plssvd method)": [[484, "sklearn.cross_decomposition.PLSSVD.fit"]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[484, "sklearn.cross_decomposition.PLSSVD.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[484, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[484, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[484, "sklearn.cross_decomposition.PLSSVD.get_params"]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[484, "sklearn.cross_decomposition.PLSSVD.set_output"]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[484, "sklearn.cross_decomposition.PLSSVD.set_params"]], "transform() (sklearn.cross_decomposition.plssvd method)": [[484, "sklearn.cross_decomposition.PLSSVD.transform"]], "clear_data_home() (in module sklearn.datasets)": [[485, "sklearn.datasets.clear_data_home"]], "dump_svmlight_file() (in module sklearn.datasets)": [[486, "sklearn.datasets.dump_svmlight_file"]], "fetch_20newsgroups() (in module sklearn.datasets)": [[487, "sklearn.datasets.fetch_20newsgroups"]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[488, "sklearn.datasets.fetch_20newsgroups_vectorized"]], "fetch_california_housing() (in module sklearn.datasets)": [[489, "sklearn.datasets.fetch_california_housing"]], "fetch_covtype() (in module sklearn.datasets)": [[490, "sklearn.datasets.fetch_covtype"]], "fetch_kddcup99() (in module sklearn.datasets)": [[491, "sklearn.datasets.fetch_kddcup99"]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[492, "sklearn.datasets.fetch_lfw_pairs"]], "fetch_lfw_people() (in module sklearn.datasets)": [[493, "sklearn.datasets.fetch_lfw_people"]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[494, "sklearn.datasets.fetch_olivetti_faces"]], "fetch_openml() (in module sklearn.datasets)": [[495, "sklearn.datasets.fetch_openml"]], "fetch_rcv1() (in module sklearn.datasets)": [[496, "sklearn.datasets.fetch_rcv1"]], "fetch_species_distributions() (in module sklearn.datasets)": [[497, "sklearn.datasets.fetch_species_distributions"]], "get_data_home() (in module sklearn.datasets)": [[498, "sklearn.datasets.get_data_home"]], "load_breast_cancer() (in module sklearn.datasets)": [[499, "sklearn.datasets.load_breast_cancer"]], "load_diabetes() (in module sklearn.datasets)": [[500, "sklearn.datasets.load_diabetes"]], "load_digits() (in module sklearn.datasets)": [[501, "sklearn.datasets.load_digits"]], "load_files() (in module sklearn.datasets)": [[502, "sklearn.datasets.load_files"]], "load_iris() (in module sklearn.datasets)": [[503, "sklearn.datasets.load_iris"]], "load_linnerud() (in module sklearn.datasets)": [[504, "sklearn.datasets.load_linnerud"]], "load_sample_image() (in module sklearn.datasets)": [[505, "sklearn.datasets.load_sample_image"]], "load_sample_images() (in module sklearn.datasets)": [[506, "sklearn.datasets.load_sample_images"]], "load_svmlight_file() (in module sklearn.datasets)": [[507, "sklearn.datasets.load_svmlight_file"]], "load_svmlight_files() (in module sklearn.datasets)": [[508, "sklearn.datasets.load_svmlight_files"]], "load_wine() (in module sklearn.datasets)": [[509, "sklearn.datasets.load_wine"]], "make_biclusters() (in module sklearn.datasets)": [[510, "sklearn.datasets.make_biclusters"]], "make_blobs() (in module sklearn.datasets)": [[511, "sklearn.datasets.make_blobs"]], "make_checkerboard() (in module sklearn.datasets)": [[512, "sklearn.datasets.make_checkerboard"]], "make_circles() (in module sklearn.datasets)": [[513, "sklearn.datasets.make_circles"]], "make_classification() (in module sklearn.datasets)": [[514, "sklearn.datasets.make_classification"]], "make_friedman1() (in module sklearn.datasets)": [[515, "sklearn.datasets.make_friedman1"]], "make_friedman2() (in module sklearn.datasets)": [[516, "sklearn.datasets.make_friedman2"]], "make_friedman3() (in module sklearn.datasets)": [[517, "sklearn.datasets.make_friedman3"]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[518, "sklearn.datasets.make_gaussian_quantiles"]], "make_hastie_10_2() (in module sklearn.datasets)": [[519, "sklearn.datasets.make_hastie_10_2"]], "make_low_rank_matrix() (in module sklearn.datasets)": [[520, "sklearn.datasets.make_low_rank_matrix"]], "make_moons() (in module sklearn.datasets)": [[521, "sklearn.datasets.make_moons"]], "make_multilabel_classification() (in module sklearn.datasets)": [[522, "sklearn.datasets.make_multilabel_classification"]], "make_regression() (in module sklearn.datasets)": [[523, "sklearn.datasets.make_regression"]], "make_s_curve() (in module sklearn.datasets)": [[524, "sklearn.datasets.make_s_curve"]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[525, "sklearn.datasets.make_sparse_coded_signal"]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[526, "sklearn.datasets.make_sparse_spd_matrix"]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[527, "sklearn.datasets.make_sparse_uncorrelated"]], "make_spd_matrix() (in module sklearn.datasets)": [[528, "sklearn.datasets.make_spd_matrix"]], "make_swiss_roll() (in module sklearn.datasets)": [[529, "sklearn.datasets.make_swiss_roll"]], "dictionarylearning (class in sklearn.decomposition)": [[530, "sklearn.decomposition.DictionaryLearning"]], "fit() (sklearn.decomposition.dictionarylearning method)": [[530, "sklearn.decomposition.DictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[530, "sklearn.decomposition.DictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[530, "sklearn.decomposition.DictionaryLearning.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[530, "sklearn.decomposition.DictionaryLearning.get_metadata_routing"]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[530, "sklearn.decomposition.DictionaryLearning.get_params"]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[530, "sklearn.decomposition.DictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[530, "sklearn.decomposition.DictionaryLearning.set_params"]], "transform() (sklearn.decomposition.dictionarylearning method)": [[530, "sklearn.decomposition.DictionaryLearning.transform"]], "factoranalysis (class in sklearn.decomposition)": [[531, "sklearn.decomposition.FactorAnalysis"]], "fit() (sklearn.decomposition.factoranalysis method)": [[531, "sklearn.decomposition.FactorAnalysis.fit"]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[531, "sklearn.decomposition.FactorAnalysis.fit_transform"]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[531, "sklearn.decomposition.FactorAnalysis.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[531, "sklearn.decomposition.FactorAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[531, "sklearn.decomposition.FactorAnalysis.get_metadata_routing"]], "get_params() (sklearn.decomposition.factoranalysis method)": [[531, "sklearn.decomposition.FactorAnalysis.get_params"]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[531, "sklearn.decomposition.FactorAnalysis.get_precision"]], "score() (sklearn.decomposition.factoranalysis method)": [[531, "sklearn.decomposition.FactorAnalysis.score"]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[531, "sklearn.decomposition.FactorAnalysis.score_samples"]], "set_output() (sklearn.decomposition.factoranalysis method)": [[531, "sklearn.decomposition.FactorAnalysis.set_output"]], "set_params() (sklearn.decomposition.factoranalysis method)": [[531, "sklearn.decomposition.FactorAnalysis.set_params"]], "transform() (sklearn.decomposition.factoranalysis method)": [[531, "sklearn.decomposition.FactorAnalysis.transform"]], "fastica (class in sklearn.decomposition)": [[532, "sklearn.decomposition.FastICA"]], "fit() (sklearn.decomposition.fastica method)": [[532, "sklearn.decomposition.FastICA.fit"]], "fit_transform() (sklearn.decomposition.fastica method)": [[532, "sklearn.decomposition.FastICA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[532, "sklearn.decomposition.FastICA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[532, "sklearn.decomposition.FastICA.get_metadata_routing"]], "get_params() (sklearn.decomposition.fastica method)": [[532, "sklearn.decomposition.FastICA.get_params"]], "inverse_transform() (sklearn.decomposition.fastica method)": [[532, "sklearn.decomposition.FastICA.inverse_transform"]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[532, "sklearn.decomposition.FastICA.set_inverse_transform_request"]], "set_output() (sklearn.decomposition.fastica method)": [[532, "sklearn.decomposition.FastICA.set_output"]], "set_params() (sklearn.decomposition.fastica method)": [[532, "sklearn.decomposition.FastICA.set_params"]], "set_transform_request() (sklearn.decomposition.fastica method)": [[532, "sklearn.decomposition.FastICA.set_transform_request"]], "transform() (sklearn.decomposition.fastica method)": [[532, "sklearn.decomposition.FastICA.transform"]], "incrementalpca (class in sklearn.decomposition)": [[533, "sklearn.decomposition.IncrementalPCA"]], "fit() (sklearn.decomposition.incrementalpca method)": [[533, "sklearn.decomposition.IncrementalPCA.fit"]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[533, "sklearn.decomposition.IncrementalPCA.fit_transform"]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[533, "sklearn.decomposition.IncrementalPCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[533, "sklearn.decomposition.IncrementalPCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[533, "sklearn.decomposition.IncrementalPCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.incrementalpca method)": [[533, "sklearn.decomposition.IncrementalPCA.get_params"]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[533, "sklearn.decomposition.IncrementalPCA.get_precision"]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[533, "sklearn.decomposition.IncrementalPCA.inverse_transform"]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[533, "sklearn.decomposition.IncrementalPCA.partial_fit"]], "set_output() (sklearn.decomposition.incrementalpca method)": [[533, "sklearn.decomposition.IncrementalPCA.set_output"]], "set_params() (sklearn.decomposition.incrementalpca method)": [[533, "sklearn.decomposition.IncrementalPCA.set_params"]], "set_partial_fit_request() (sklearn.decomposition.incrementalpca method)": [[533, "sklearn.decomposition.IncrementalPCA.set_partial_fit_request"]], "transform() (sklearn.decomposition.incrementalpca method)": [[533, "sklearn.decomposition.IncrementalPCA.transform"]], "kernelpca (class in sklearn.decomposition)": [[534, "sklearn.decomposition.KernelPCA"]], "fit() (sklearn.decomposition.kernelpca method)": [[534, "sklearn.decomposition.KernelPCA.fit"]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[534, "sklearn.decomposition.KernelPCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[534, "sklearn.decomposition.KernelPCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[534, "sklearn.decomposition.KernelPCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.kernelpca method)": [[534, "sklearn.decomposition.KernelPCA.get_params"]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[534, "sklearn.decomposition.KernelPCA.inverse_transform"]], "set_output() (sklearn.decomposition.kernelpca method)": [[534, "sklearn.decomposition.KernelPCA.set_output"]], "set_params() (sklearn.decomposition.kernelpca method)": [[534, "sklearn.decomposition.KernelPCA.set_params"]], "transform() (sklearn.decomposition.kernelpca method)": [[534, "sklearn.decomposition.KernelPCA.transform"]], "latentdirichletallocation (class in sklearn.decomposition)": [[535, "sklearn.decomposition.LatentDirichletAllocation"]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[535, "sklearn.decomposition.LatentDirichletAllocation.fit"]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[535, "sklearn.decomposition.LatentDirichletAllocation.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[535, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[535, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing"]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[535, "sklearn.decomposition.LatentDirichletAllocation.get_params"]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[535, "sklearn.decomposition.LatentDirichletAllocation.partial_fit"]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[535, "sklearn.decomposition.LatentDirichletAllocation.perplexity"]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[535, "sklearn.decomposition.LatentDirichletAllocation.score"]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[535, "sklearn.decomposition.LatentDirichletAllocation.set_output"]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[535, "sklearn.decomposition.LatentDirichletAllocation.set_params"]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[535, "sklearn.decomposition.LatentDirichletAllocation.transform"]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[536, "sklearn.decomposition.MiniBatchDictionaryLearning"]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[536, "sklearn.decomposition.MiniBatchDictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[536, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[536, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[536, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[536, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params"]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[536, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit"]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[536, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[536, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params"]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[536, "sklearn.decomposition.MiniBatchDictionaryLearning.transform"]], "minibatchnmf (class in sklearn.decomposition)": [[537, "sklearn.decomposition.MiniBatchNMF"]], "fit() (sklearn.decomposition.minibatchnmf method)": [[537, "sklearn.decomposition.MiniBatchNMF.fit"]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[537, "sklearn.decomposition.MiniBatchNMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[537, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[537, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[537, "sklearn.decomposition.MiniBatchNMF.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[537, "sklearn.decomposition.MiniBatchNMF.inverse_transform"]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[537, "sklearn.decomposition.MiniBatchNMF.partial_fit"]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[537, "sklearn.decomposition.MiniBatchNMF.set_output"]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[537, "sklearn.decomposition.MiniBatchNMF.set_params"]], "set_partial_fit_request() (sklearn.decomposition.minibatchnmf method)": [[537, "sklearn.decomposition.MiniBatchNMF.set_partial_fit_request"]], "transform() (sklearn.decomposition.minibatchnmf method)": [[537, "sklearn.decomposition.MiniBatchNMF.transform"]], "minibatchsparsepca (class in sklearn.decomposition)": [[538, "sklearn.decomposition.MiniBatchSparsePCA"]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[538, "sklearn.decomposition.MiniBatchSparsePCA.fit"]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[538, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[538, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[538, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[538, "sklearn.decomposition.MiniBatchSparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[538, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[538, "sklearn.decomposition.MiniBatchSparsePCA.set_output"]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[538, "sklearn.decomposition.MiniBatchSparsePCA.set_params"]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[538, "sklearn.decomposition.MiniBatchSparsePCA.transform"]], "nmf (class in sklearn.decomposition)": [[539, "sklearn.decomposition.NMF"]], "fit() (sklearn.decomposition.nmf method)": [[539, "sklearn.decomposition.NMF.fit"]], "fit_transform() (sklearn.decomposition.nmf method)": [[539, "sklearn.decomposition.NMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[539, "sklearn.decomposition.NMF.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[539, "sklearn.decomposition.NMF.get_metadata_routing"]], "get_params() (sklearn.decomposition.nmf method)": [[539, "sklearn.decomposition.NMF.get_params"]], "inverse_transform() (sklearn.decomposition.nmf method)": [[539, "sklearn.decomposition.NMF.inverse_transform"]], "set_output() (sklearn.decomposition.nmf method)": [[539, "sklearn.decomposition.NMF.set_output"]], "set_params() (sklearn.decomposition.nmf method)": [[539, "sklearn.decomposition.NMF.set_params"]], "transform() (sklearn.decomposition.nmf method)": [[539, "sklearn.decomposition.NMF.transform"]], "pca (class in sklearn.decomposition)": [[540, "sklearn.decomposition.PCA"]], "fit() (sklearn.decomposition.pca method)": [[540, "sklearn.decomposition.PCA.fit"]], "fit_transform() (sklearn.decomposition.pca method)": [[540, "sklearn.decomposition.PCA.fit_transform"]], "get_covariance() (sklearn.decomposition.pca method)": [[540, "sklearn.decomposition.PCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[540, "sklearn.decomposition.PCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[540, "sklearn.decomposition.PCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.pca method)": [[540, "sklearn.decomposition.PCA.get_params"]], "get_precision() (sklearn.decomposition.pca method)": [[540, "sklearn.decomposition.PCA.get_precision"]], "inverse_transform() (sklearn.decomposition.pca method)": [[540, "sklearn.decomposition.PCA.inverse_transform"]], "score() (sklearn.decomposition.pca method)": [[540, "sklearn.decomposition.PCA.score"]], "score_samples() (sklearn.decomposition.pca method)": [[540, "sklearn.decomposition.PCA.score_samples"]], "set_output() (sklearn.decomposition.pca method)": [[540, "sklearn.decomposition.PCA.set_output"]], "set_params() (sklearn.decomposition.pca method)": [[540, "sklearn.decomposition.PCA.set_params"]], "transform() (sklearn.decomposition.pca method)": [[540, "sklearn.decomposition.PCA.transform"]], "sparsecoder (class in sklearn.decomposition)": [[541, "sklearn.decomposition.SparseCoder"]], "fit() (sklearn.decomposition.sparsecoder method)": [[541, "sklearn.decomposition.SparseCoder.fit"]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[541, "sklearn.decomposition.SparseCoder.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[541, "sklearn.decomposition.SparseCoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[541, "sklearn.decomposition.SparseCoder.get_metadata_routing"]], "get_params() (sklearn.decomposition.sparsecoder method)": [[541, "sklearn.decomposition.SparseCoder.get_params"]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[541, "sklearn.decomposition.SparseCoder.n_components_"]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[541, "sklearn.decomposition.SparseCoder.n_features_in_"]], "set_output() (sklearn.decomposition.sparsecoder method)": [[541, "sklearn.decomposition.SparseCoder.set_output"]], "set_params() (sklearn.decomposition.sparsecoder method)": [[541, "sklearn.decomposition.SparseCoder.set_params"]], "transform() (sklearn.decomposition.sparsecoder method)": [[541, "sklearn.decomposition.SparseCoder.transform"]], "sparsepca (class in sklearn.decomposition)": [[542, "sklearn.decomposition.SparsePCA"]], "fit() (sklearn.decomposition.sparsepca method)": [[542, "sklearn.decomposition.SparsePCA.fit"]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[542, "sklearn.decomposition.SparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[542, "sklearn.decomposition.SparsePCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[542, "sklearn.decomposition.SparsePCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.sparsepca method)": [[542, "sklearn.decomposition.SparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[542, "sklearn.decomposition.SparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.sparsepca method)": [[542, "sklearn.decomposition.SparsePCA.set_output"]], "set_params() (sklearn.decomposition.sparsepca method)": [[542, "sklearn.decomposition.SparsePCA.set_params"]], "transform() (sklearn.decomposition.sparsepca method)": [[542, "sklearn.decomposition.SparsePCA.transform"]], "truncatedsvd (class in sklearn.decomposition)": [[543, "sklearn.decomposition.TruncatedSVD"]], "fit() (sklearn.decomposition.truncatedsvd method)": [[543, "sklearn.decomposition.TruncatedSVD.fit"]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[543, "sklearn.decomposition.TruncatedSVD.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[543, "sklearn.decomposition.TruncatedSVD.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[543, "sklearn.decomposition.TruncatedSVD.get_metadata_routing"]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[543, "sklearn.decomposition.TruncatedSVD.get_params"]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[543, "sklearn.decomposition.TruncatedSVD.inverse_transform"]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[543, "sklearn.decomposition.TruncatedSVD.set_output"]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[543, "sklearn.decomposition.TruncatedSVD.set_params"]], "transform() (sklearn.decomposition.truncatedsvd method)": [[543, "sklearn.decomposition.TruncatedSVD.transform"]], "dict_learning() (in module sklearn.decomposition)": [[544, "sklearn.decomposition.dict_learning"]], "dict_learning_online() (in module sklearn.decomposition)": [[545, "sklearn.decomposition.dict_learning_online"]], "non_negative_factorization() (in module sklearn.decomposition)": [[546, "sklearn.decomposition.non_negative_factorization"]], "sparse_encode() (in module sklearn.decomposition)": [[547, "sklearn.decomposition.sparse_encode"]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[548, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing"]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score"]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output"]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params"]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request"]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform"]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[549, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit"]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing"]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score"]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params"]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request"]], "dummyclassifier (class in sklearn.dummy)": [[550, "sklearn.dummy.DummyClassifier"]], "fit() (sklearn.dummy.dummyclassifier method)": [[550, "sklearn.dummy.DummyClassifier.fit"]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[550, "sklearn.dummy.DummyClassifier.get_metadata_routing"]], "get_params() (sklearn.dummy.dummyclassifier method)": [[550, "sklearn.dummy.DummyClassifier.get_params"]], "predict() (sklearn.dummy.dummyclassifier method)": [[550, "sklearn.dummy.DummyClassifier.predict"]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[550, "sklearn.dummy.DummyClassifier.predict_log_proba"]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[550, "sklearn.dummy.DummyClassifier.predict_proba"]], "score() (sklearn.dummy.dummyclassifier method)": [[550, "sklearn.dummy.DummyClassifier.score"]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[550, "sklearn.dummy.DummyClassifier.set_fit_request"]], "set_params() (sklearn.dummy.dummyclassifier method)": [[550, "sklearn.dummy.DummyClassifier.set_params"]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[550, "sklearn.dummy.DummyClassifier.set_score_request"]], "dummyregressor (class in sklearn.dummy)": [[551, "sklearn.dummy.DummyRegressor"]], "fit() (sklearn.dummy.dummyregressor method)": [[551, "sklearn.dummy.DummyRegressor.fit"]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[551, "sklearn.dummy.DummyRegressor.get_metadata_routing"]], "get_params() (sklearn.dummy.dummyregressor method)": [[551, "sklearn.dummy.DummyRegressor.get_params"]], "predict() (sklearn.dummy.dummyregressor method)": [[551, "sklearn.dummy.DummyRegressor.predict"]], "score() (sklearn.dummy.dummyregressor method)": [[551, "sklearn.dummy.DummyRegressor.score"]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[551, "sklearn.dummy.DummyRegressor.set_fit_request"]], "set_params() (sklearn.dummy.dummyregressor method)": [[551, "sklearn.dummy.DummyRegressor.set_params"]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[551, "sklearn.dummy.DummyRegressor.set_predict_request"]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[551, "sklearn.dummy.DummyRegressor.set_score_request"]], "adaboostclassifier (class in sklearn.ensemble)": [[552, "sklearn.ensemble.AdaBoostClassifier"]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[552, "sklearn.ensemble.AdaBoostClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[552, "sklearn.ensemble.AdaBoostClassifier.feature_importances_"]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[552, "sklearn.ensemble.AdaBoostClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[552, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[552, "sklearn.ensemble.AdaBoostClassifier.get_params"]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[552, "sklearn.ensemble.AdaBoostClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[552, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[552, "sklearn.ensemble.AdaBoostClassifier.predict_proba"]], "score() (sklearn.ensemble.adaboostclassifier method)": [[552, "sklearn.ensemble.AdaBoostClassifier.score"]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[552, "sklearn.ensemble.AdaBoostClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[552, "sklearn.ensemble.AdaBoostClassifier.set_params"]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[552, "sklearn.ensemble.AdaBoostClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[552, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[552, "sklearn.ensemble.AdaBoostClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[552, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba"]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[552, "sklearn.ensemble.AdaBoostClassifier.staged_score"]], "adaboostregressor (class in sklearn.ensemble)": [[553, "sklearn.ensemble.AdaBoostRegressor"]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[553, "sklearn.ensemble.AdaBoostRegressor.feature_importances_"]], "fit() (sklearn.ensemble.adaboostregressor method)": [[553, "sklearn.ensemble.AdaBoostRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[553, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[553, "sklearn.ensemble.AdaBoostRegressor.get_params"]], "predict() (sklearn.ensemble.adaboostregressor method)": [[553, "sklearn.ensemble.AdaBoostRegressor.predict"]], "score() (sklearn.ensemble.adaboostregressor method)": [[553, "sklearn.ensemble.AdaBoostRegressor.score"]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[553, "sklearn.ensemble.AdaBoostRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[553, "sklearn.ensemble.AdaBoostRegressor.set_params"]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[553, "sklearn.ensemble.AdaBoostRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[553, "sklearn.ensemble.AdaBoostRegressor.staged_predict"]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[553, "sklearn.ensemble.AdaBoostRegressor.staged_score"]], "baggingclassifier (class in sklearn.ensemble)": [[554, "sklearn.ensemble.BaggingClassifier"]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[554, "sklearn.ensemble.BaggingClassifier.decision_function"]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[554, "sklearn.ensemble.BaggingClassifier.estimators_samples_"]], "fit() (sklearn.ensemble.baggingclassifier method)": [[554, "sklearn.ensemble.BaggingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[554, "sklearn.ensemble.BaggingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[554, "sklearn.ensemble.BaggingClassifier.get_params"]], "predict() (sklearn.ensemble.baggingclassifier method)": [[554, "sklearn.ensemble.BaggingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[554, "sklearn.ensemble.BaggingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[554, "sklearn.ensemble.BaggingClassifier.predict_proba"]], "score() (sklearn.ensemble.baggingclassifier method)": [[554, "sklearn.ensemble.BaggingClassifier.score"]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[554, "sklearn.ensemble.BaggingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[554, "sklearn.ensemble.BaggingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[554, "sklearn.ensemble.BaggingClassifier.set_score_request"]], "baggingregressor (class in sklearn.ensemble)": [[555, "sklearn.ensemble.BaggingRegressor"]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[555, "sklearn.ensemble.BaggingRegressor.estimators_samples_"]], "fit() (sklearn.ensemble.baggingregressor method)": [[555, "sklearn.ensemble.BaggingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[555, "sklearn.ensemble.BaggingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.baggingregressor method)": [[555, "sklearn.ensemble.BaggingRegressor.get_params"]], "predict() (sklearn.ensemble.baggingregressor method)": [[555, "sklearn.ensemble.BaggingRegressor.predict"]], "score() (sklearn.ensemble.baggingregressor method)": [[555, "sklearn.ensemble.BaggingRegressor.score"]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[555, "sklearn.ensemble.BaggingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.baggingregressor method)": [[555, "sklearn.ensemble.BaggingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[555, "sklearn.ensemble.BaggingRegressor.set_score_request"]], "extratreesclassifier (class in sklearn.ensemble)": [[556, "sklearn.ensemble.ExtraTreesClassifier"]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[556, "sklearn.ensemble.ExtraTreesClassifier.apply"]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[556, "sklearn.ensemble.ExtraTreesClassifier.decision_path"]], "estimators_samples_ (sklearn.ensemble.extratreesclassifier property)": [[556, "sklearn.ensemble.ExtraTreesClassifier.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[556, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_"]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[556, "sklearn.ensemble.ExtraTreesClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[556, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[556, "sklearn.ensemble.ExtraTreesClassifier.get_params"]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[556, "sklearn.ensemble.ExtraTreesClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[556, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[556, "sklearn.ensemble.ExtraTreesClassifier.predict_proba"]], "score() (sklearn.ensemble.extratreesclassifier method)": [[556, "sklearn.ensemble.ExtraTreesClassifier.score"]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[556, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[556, "sklearn.ensemble.ExtraTreesClassifier.set_params"]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[556, "sklearn.ensemble.ExtraTreesClassifier.set_score_request"]], "extratreesregressor (class in sklearn.ensemble)": [[557, "sklearn.ensemble.ExtraTreesRegressor"]], "apply() (sklearn.ensemble.extratreesregressor method)": [[557, "sklearn.ensemble.ExtraTreesRegressor.apply"]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[557, "sklearn.ensemble.ExtraTreesRegressor.decision_path"]], "estimators_samples_ (sklearn.ensemble.extratreesregressor property)": [[557, "sklearn.ensemble.ExtraTreesRegressor.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[557, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_"]], "fit() (sklearn.ensemble.extratreesregressor method)": [[557, "sklearn.ensemble.ExtraTreesRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[557, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[557, "sklearn.ensemble.ExtraTreesRegressor.get_params"]], "predict() (sklearn.ensemble.extratreesregressor method)": [[557, "sklearn.ensemble.ExtraTreesRegressor.predict"]], "score() (sklearn.ensemble.extratreesregressor method)": [[557, "sklearn.ensemble.ExtraTreesRegressor.score"]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[557, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[557, "sklearn.ensemble.ExtraTreesRegressor.set_params"]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[557, "sklearn.ensemble.ExtraTreesRegressor.set_score_request"]], "gradientboostingclassifier (class in sklearn.ensemble)": [[558, "sklearn.ensemble.GradientBoostingClassifier"]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[558, "sklearn.ensemble.GradientBoostingClassifier.apply"]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[558, "sklearn.ensemble.GradientBoostingClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[558, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[558, "sklearn.ensemble.GradientBoostingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[558, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[558, "sklearn.ensemble.GradientBoostingClassifier.get_params"]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[558, "sklearn.ensemble.GradientBoostingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[558, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[558, "sklearn.ensemble.GradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[558, "sklearn.ensemble.GradientBoostingClassifier.score"]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[558, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[558, "sklearn.ensemble.GradientBoostingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[558, "sklearn.ensemble.GradientBoostingClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[558, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[558, "sklearn.ensemble.GradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[558, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba"]], "gradientboostingregressor (class in sklearn.ensemble)": [[559, "sklearn.ensemble.GradientBoostingRegressor"]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[559, "sklearn.ensemble.GradientBoostingRegressor.apply"]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[559, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[559, "sklearn.ensemble.GradientBoostingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[559, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[559, "sklearn.ensemble.GradientBoostingRegressor.get_params"]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[559, "sklearn.ensemble.GradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[559, "sklearn.ensemble.GradientBoostingRegressor.score"]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[559, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[559, "sklearn.ensemble.GradientBoostingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[559, "sklearn.ensemble.GradientBoostingRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[559, "sklearn.ensemble.GradientBoostingRegressor.staged_predict"]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[560, "sklearn.ensemble.HistGradientBoostingClassifier"]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[560, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function"]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[560, "sklearn.ensemble.HistGradientBoostingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[560, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[560, "sklearn.ensemble.HistGradientBoostingClassifier.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[560, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[560, "sklearn.ensemble.HistGradientBoostingClassifier.predict"]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[560, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[560, "sklearn.ensemble.HistGradientBoostingClassifier.score"]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[560, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[560, "sklearn.ensemble.HistGradientBoostingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[560, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[560, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[560, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[560, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba"]], "histgradientboostingregressor (class in sklearn.ensemble)": [[561, "sklearn.ensemble.HistGradientBoostingRegressor"]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[561, "sklearn.ensemble.HistGradientBoostingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[561, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[561, "sklearn.ensemble.HistGradientBoostingRegressor.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[561, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[561, "sklearn.ensemble.HistGradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[561, "sklearn.ensemble.HistGradientBoostingRegressor.score"]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[561, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[561, "sklearn.ensemble.HistGradientBoostingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[561, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[561, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict"]], "isolationforest (class in sklearn.ensemble)": [[562, "sklearn.ensemble.IsolationForest"]], "decision_function() (sklearn.ensemble.isolationforest method)": [[562, "sklearn.ensemble.IsolationForest.decision_function"]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[562, "sklearn.ensemble.IsolationForest.estimators_samples_"]], "fit() (sklearn.ensemble.isolationforest method)": [[562, "sklearn.ensemble.IsolationForest.fit"]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[562, "sklearn.ensemble.IsolationForest.fit_predict"]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[562, "sklearn.ensemble.IsolationForest.get_metadata_routing"]], "get_params() (sklearn.ensemble.isolationforest method)": [[562, "sklearn.ensemble.IsolationForest.get_params"]], "predict() (sklearn.ensemble.isolationforest method)": [[562, "sklearn.ensemble.IsolationForest.predict"]], "score_samples() (sklearn.ensemble.isolationforest method)": [[562, "sklearn.ensemble.IsolationForest.score_samples"]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[562, "sklearn.ensemble.IsolationForest.set_fit_request"]], "set_params() (sklearn.ensemble.isolationforest method)": [[562, "sklearn.ensemble.IsolationForest.set_params"]], "randomforestclassifier (class in sklearn.ensemble)": [[563, "sklearn.ensemble.RandomForestClassifier"]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[563, "sklearn.ensemble.RandomForestClassifier.apply"]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[563, "sklearn.ensemble.RandomForestClassifier.decision_path"]], "estimators_samples_ (sklearn.ensemble.randomforestclassifier property)": [[563, "sklearn.ensemble.RandomForestClassifier.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[563, "sklearn.ensemble.RandomForestClassifier.feature_importances_"]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[563, "sklearn.ensemble.RandomForestClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[563, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[563, "sklearn.ensemble.RandomForestClassifier.get_params"]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[563, "sklearn.ensemble.RandomForestClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[563, "sklearn.ensemble.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[563, "sklearn.ensemble.RandomForestClassifier.predict_proba"]], "score() (sklearn.ensemble.randomforestclassifier method)": [[563, "sklearn.ensemble.RandomForestClassifier.score"]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[563, "sklearn.ensemble.RandomForestClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[563, "sklearn.ensemble.RandomForestClassifier.set_params"]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[563, "sklearn.ensemble.RandomForestClassifier.set_score_request"]], "randomforestregressor (class in sklearn.ensemble)": [[564, "sklearn.ensemble.RandomForestRegressor"]], "apply() (sklearn.ensemble.randomforestregressor method)": [[564, "sklearn.ensemble.RandomForestRegressor.apply"]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[564, "sklearn.ensemble.RandomForestRegressor.decision_path"]], "estimators_samples_ (sklearn.ensemble.randomforestregressor property)": [[564, "sklearn.ensemble.RandomForestRegressor.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[564, "sklearn.ensemble.RandomForestRegressor.feature_importances_"]], "fit() (sklearn.ensemble.randomforestregressor method)": [[564, "sklearn.ensemble.RandomForestRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[564, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[564, "sklearn.ensemble.RandomForestRegressor.get_params"]], "predict() (sklearn.ensemble.randomforestregressor method)": [[564, "sklearn.ensemble.RandomForestRegressor.predict"]], "score() (sklearn.ensemble.randomforestregressor method)": [[564, "sklearn.ensemble.RandomForestRegressor.score"]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[564, "sklearn.ensemble.RandomForestRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[564, "sklearn.ensemble.RandomForestRegressor.set_params"]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[564, "sklearn.ensemble.RandomForestRegressor.set_score_request"]], "randomtreesembedding (class in sklearn.ensemble)": [[565, "sklearn.ensemble.RandomTreesEmbedding"]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[565, "sklearn.ensemble.RandomTreesEmbedding.apply"]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[565, "sklearn.ensemble.RandomTreesEmbedding.decision_path"]], "estimators_samples_ (sklearn.ensemble.randomtreesembedding property)": [[565, "sklearn.ensemble.RandomTreesEmbedding.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[565, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_"]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[565, "sklearn.ensemble.RandomTreesEmbedding.fit"]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[565, "sklearn.ensemble.RandomTreesEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[565, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[565, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[565, "sklearn.ensemble.RandomTreesEmbedding.get_params"]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[565, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request"]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[565, "sklearn.ensemble.RandomTreesEmbedding.set_output"]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[565, "sklearn.ensemble.RandomTreesEmbedding.set_params"]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[565, "sklearn.ensemble.RandomTreesEmbedding.transform"]], "stackingclassifier (class in sklearn.ensemble)": [[566, "sklearn.ensemble.StackingClassifier"]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[566, "sklearn.ensemble.StackingClassifier.decision_function"]], "fit() (sklearn.ensemble.stackingclassifier method)": [[566, "sklearn.ensemble.StackingClassifier.fit"]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[566, "sklearn.ensemble.StackingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[566, "sklearn.ensemble.StackingClassifier.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[566, "sklearn.ensemble.StackingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[566, "sklearn.ensemble.StackingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[566, "sklearn.ensemble.StackingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[566, "sklearn.ensemble.StackingClassifier.named_estimators"]], "predict() (sklearn.ensemble.stackingclassifier method)": [[566, "sklearn.ensemble.StackingClassifier.predict"]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[566, "sklearn.ensemble.StackingClassifier.predict_proba"]], "score() (sklearn.ensemble.stackingclassifier method)": [[566, "sklearn.ensemble.StackingClassifier.score"]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[566, "sklearn.ensemble.StackingClassifier.set_fit_request"]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[566, "sklearn.ensemble.StackingClassifier.set_output"]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[566, "sklearn.ensemble.StackingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[566, "sklearn.ensemble.StackingClassifier.set_score_request"]], "transform() (sklearn.ensemble.stackingclassifier method)": [[566, "sklearn.ensemble.StackingClassifier.transform"]], "stackingregressor (class in sklearn.ensemble)": [[567, "sklearn.ensemble.StackingRegressor"]], "fit() (sklearn.ensemble.stackingregressor method)": [[567, "sklearn.ensemble.StackingRegressor.fit"]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[567, "sklearn.ensemble.StackingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[567, "sklearn.ensemble.StackingRegressor.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[567, "sklearn.ensemble.StackingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.stackingregressor method)": [[567, "sklearn.ensemble.StackingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[567, "sklearn.ensemble.StackingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[567, "sklearn.ensemble.StackingRegressor.named_estimators"]], "predict() (sklearn.ensemble.stackingregressor method)": [[567, "sklearn.ensemble.StackingRegressor.predict"]], "score() (sklearn.ensemble.stackingregressor method)": [[567, "sklearn.ensemble.StackingRegressor.score"]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[567, "sklearn.ensemble.StackingRegressor.set_fit_request"]], "set_output() (sklearn.ensemble.stackingregressor method)": [[567, "sklearn.ensemble.StackingRegressor.set_output"]], "set_params() (sklearn.ensemble.stackingregressor method)": [[567, "sklearn.ensemble.StackingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[567, "sklearn.ensemble.StackingRegressor.set_score_request"]], "transform() (sklearn.ensemble.stackingregressor method)": [[567, "sklearn.ensemble.StackingRegressor.transform"]], "votingclassifier (class in sklearn.ensemble)": [[568, "sklearn.ensemble.VotingClassifier"]], "fit() (sklearn.ensemble.votingclassifier method)": [[568, "sklearn.ensemble.VotingClassifier.fit"]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[568, "sklearn.ensemble.VotingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[568, "sklearn.ensemble.VotingClassifier.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[568, "sklearn.ensemble.VotingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.votingclassifier method)": [[568, "sklearn.ensemble.VotingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[568, "sklearn.ensemble.VotingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[568, "sklearn.ensemble.VotingClassifier.named_estimators"]], "predict() (sklearn.ensemble.votingclassifier method)": [[568, "sklearn.ensemble.VotingClassifier.predict"]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[568, "sklearn.ensemble.VotingClassifier.predict_proba"]], "score() (sklearn.ensemble.votingclassifier method)": [[568, "sklearn.ensemble.VotingClassifier.score"]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[568, "sklearn.ensemble.VotingClassifier.set_fit_request"]], "set_output() (sklearn.ensemble.votingclassifier method)": [[568, "sklearn.ensemble.VotingClassifier.set_output"]], "set_params() (sklearn.ensemble.votingclassifier method)": [[568, "sklearn.ensemble.VotingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[568, "sklearn.ensemble.VotingClassifier.set_score_request"]], "transform() (sklearn.ensemble.votingclassifier method)": [[568, "sklearn.ensemble.VotingClassifier.transform"]], "votingregressor (class in sklearn.ensemble)": [[569, "sklearn.ensemble.VotingRegressor"]], "fit() (sklearn.ensemble.votingregressor method)": [[569, "sklearn.ensemble.VotingRegressor.fit"]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[569, "sklearn.ensemble.VotingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[569, "sklearn.ensemble.VotingRegressor.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[569, "sklearn.ensemble.VotingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.votingregressor method)": [[569, "sklearn.ensemble.VotingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[569, "sklearn.ensemble.VotingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.votingregressor property)": [[569, "sklearn.ensemble.VotingRegressor.named_estimators"]], "predict() (sklearn.ensemble.votingregressor method)": [[569, "sklearn.ensemble.VotingRegressor.predict"]], "score() (sklearn.ensemble.votingregressor method)": [[569, "sklearn.ensemble.VotingRegressor.score"]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[569, "sklearn.ensemble.VotingRegressor.set_fit_request"]], "set_output() (sklearn.ensemble.votingregressor method)": [[569, "sklearn.ensemble.VotingRegressor.set_output"]], "set_params() (sklearn.ensemble.votingregressor method)": [[569, "sklearn.ensemble.VotingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[569, "sklearn.ensemble.VotingRegressor.set_score_request"]], "transform() (sklearn.ensemble.votingregressor method)": [[569, "sklearn.ensemble.VotingRegressor.transform"]], "convergencewarning (class in sklearn.exceptions)": [[570, "sklearn.exceptions.ConvergenceWarning"]], "with_traceback() (sklearn.exceptions.convergencewarning method)": [[570, "sklearn.exceptions.ConvergenceWarning.with_traceback"]], "dataconversionwarning (class in sklearn.exceptions)": [[571, "sklearn.exceptions.DataConversionWarning"]], "with_traceback() (sklearn.exceptions.dataconversionwarning method)": [[571, "sklearn.exceptions.DataConversionWarning.with_traceback"]], "datadimensionalitywarning (class in sklearn.exceptions)": [[572, "sklearn.exceptions.DataDimensionalityWarning"]], "with_traceback() (sklearn.exceptions.datadimensionalitywarning method)": [[572, "sklearn.exceptions.DataDimensionalityWarning.with_traceback"]], "efficiencywarning (class in sklearn.exceptions)": [[573, "sklearn.exceptions.EfficiencyWarning"]], "with_traceback() (sklearn.exceptions.efficiencywarning method)": [[573, "sklearn.exceptions.EfficiencyWarning.with_traceback"]], "fitfailedwarning (class in sklearn.exceptions)": [[574, "sklearn.exceptions.FitFailedWarning"]], "with_traceback() (sklearn.exceptions.fitfailedwarning method)": [[574, "sklearn.exceptions.FitFailedWarning.with_traceback"]], "inconsistentversionwarning (class in sklearn.exceptions)": [[575, "sklearn.exceptions.InconsistentVersionWarning"]], "with_traceback() (sklearn.exceptions.inconsistentversionwarning method)": [[575, "sklearn.exceptions.InconsistentVersionWarning.with_traceback"]], "notfittederror (class in sklearn.exceptions)": [[576, "sklearn.exceptions.NotFittedError"]], "with_traceback() (sklearn.exceptions.notfittederror method)": [[576, "sklearn.exceptions.NotFittedError.with_traceback"]], "undefinedmetricwarning (class in sklearn.exceptions)": [[577, "sklearn.exceptions.UndefinedMetricWarning"]], "with_traceback() (sklearn.exceptions.undefinedmetricwarning method)": [[577, "sklearn.exceptions.UndefinedMetricWarning.with_traceback"]], "sklearn.experimental.enable_halving_search_cv": [[578, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[579, "module-sklearn.experimental.enable_iterative_imputer"]], "dictvectorizer (class in sklearn.feature_extraction)": [[580, "sklearn.feature_extraction.DictVectorizer"]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[580, "sklearn.feature_extraction.DictVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[580, "sklearn.feature_extraction.DictVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[580, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[580, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[580, "sklearn.feature_extraction.DictVectorizer.get_params"]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[580, "sklearn.feature_extraction.DictVectorizer.inverse_transform"]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[580, "sklearn.feature_extraction.DictVectorizer.restrict"]], "set_inverse_transform_request() (sklearn.feature_extraction.dictvectorizer method)": [[580, "sklearn.feature_extraction.DictVectorizer.set_inverse_transform_request"]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[580, "sklearn.feature_extraction.DictVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[580, "sklearn.feature_extraction.DictVectorizer.set_params"]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[580, "sklearn.feature_extraction.DictVectorizer.transform"]], "featurehasher (class in sklearn.feature_extraction)": [[581, "sklearn.feature_extraction.FeatureHasher"]], "fit() (sklearn.feature_extraction.featurehasher method)": [[581, "sklearn.feature_extraction.FeatureHasher.fit"]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[581, "sklearn.feature_extraction.FeatureHasher.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[581, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[581, "sklearn.feature_extraction.FeatureHasher.get_params"]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[581, "sklearn.feature_extraction.FeatureHasher.set_output"]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[581, "sklearn.feature_extraction.FeatureHasher.set_params"]], "set_transform_request() (sklearn.feature_extraction.featurehasher method)": [[581, "sklearn.feature_extraction.FeatureHasher.set_transform_request"]], "transform() (sklearn.feature_extraction.featurehasher method)": [[581, "sklearn.feature_extraction.FeatureHasher.transform"]], "patchextractor (class in sklearn.feature_extraction.image)": [[582, "sklearn.feature_extraction.image.PatchExtractor"]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[582, "sklearn.feature_extraction.image.PatchExtractor.fit"]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[582, "sklearn.feature_extraction.image.PatchExtractor.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[582, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[582, "sklearn.feature_extraction.image.PatchExtractor.get_params"]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[582, "sklearn.feature_extraction.image.PatchExtractor.set_output"]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[582, "sklearn.feature_extraction.image.PatchExtractor.set_params"]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[582, "sklearn.feature_extraction.image.PatchExtractor.transform"]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[583, "sklearn.feature_extraction.image.extract_patches_2d"]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[584, "sklearn.feature_extraction.image.grid_to_graph"]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[585, "sklearn.feature_extraction.image.img_to_graph"]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[586, "sklearn.feature_extraction.image.reconstruct_from_patches_2d"]], "countvectorizer (class in sklearn.feature_extraction.text)": [[587, "sklearn.feature_extraction.text.CountVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words"]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform"]], "set_fit_request() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.set_fit_request"]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[587, "sklearn.feature_extraction.text.CountVectorizer.transform"]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[588, "sklearn.feature_extraction.text.HashingVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words"]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit"]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[588, "sklearn.feature_extraction.text.HashingVectorizer.transform"]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[589, "sklearn.feature_extraction.text.TfidfTransformer"]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[589, "sklearn.feature_extraction.text.TfidfTransformer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[589, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[589, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[589, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[589, "sklearn.feature_extraction.text.TfidfTransformer.get_params"]], "idf_ (sklearn.feature_extraction.text.tfidftransformer property)": [[589, "sklearn.feature_extraction.text.TfidfTransformer.idf_"]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[589, "sklearn.feature_extraction.text.TfidfTransformer.set_output"]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[589, "sklearn.feature_extraction.text.TfidfTransformer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[589, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[589, "sklearn.feature_extraction.text.TfidfTransformer.transform"]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words"]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.idf_"]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform"]], "set_fit_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.set_fit_request"]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[590, "sklearn.feature_extraction.text.TfidfVectorizer.transform"]], "genericunivariateselect (class in sklearn.feature_selection)": [[591, "sklearn.feature_selection.GenericUnivariateSelect"]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[591, "sklearn.feature_selection.GenericUnivariateSelect.fit"]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[591, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[591, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[591, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing"]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[591, "sklearn.feature_selection.GenericUnivariateSelect.get_params"]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[591, "sklearn.feature_selection.GenericUnivariateSelect.get_support"]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[591, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform"]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[591, "sklearn.feature_selection.GenericUnivariateSelect.set_output"]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[591, "sklearn.feature_selection.GenericUnivariateSelect.set_params"]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[591, "sklearn.feature_selection.GenericUnivariateSelect.transform"]], "rfe (class in sklearn.feature_selection)": [[592, "sklearn.feature_selection.RFE"]], "classes_ (sklearn.feature_selection.rfe property)": [[592, "sklearn.feature_selection.RFE.classes_"]], "decision_function() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.decision_function"]], "fit() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.fit"]], "fit_transform() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.get_metadata_routing"]], "get_params() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.get_params"]], "get_support() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.get_support"]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.inverse_transform"]], "predict() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.predict"]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.predict_proba"]], "score() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.score"]], "set_output() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.set_output"]], "set_params() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.set_params"]], "transform() (sklearn.feature_selection.rfe method)": [[592, "sklearn.feature_selection.RFE.transform"]], "rfecv (class in sklearn.feature_selection)": [[593, "sklearn.feature_selection.RFECV"]], "classes_ (sklearn.feature_selection.rfecv property)": [[593, "sklearn.feature_selection.RFECV.classes_"]], "decision_function() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.decision_function"]], "fit() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.fit"]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.get_metadata_routing"]], "get_params() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.get_params"]], "get_support() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.get_support"]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.inverse_transform"]], "predict() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.predict"]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.predict_proba"]], "score() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.score"]], "set_fit_request() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.set_fit_request"]], "set_output() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.set_output"]], "set_params() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.set_params"]], "transform() (sklearn.feature_selection.rfecv method)": [[593, "sklearn.feature_selection.RFECV.transform"]], "selectfdr (class in sklearn.feature_selection)": [[594, "sklearn.feature_selection.SelectFdr"]], "fit() (sklearn.feature_selection.selectfdr method)": [[594, "sklearn.feature_selection.SelectFdr.fit"]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[594, "sklearn.feature_selection.SelectFdr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[594, "sklearn.feature_selection.SelectFdr.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[594, "sklearn.feature_selection.SelectFdr.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfdr method)": [[594, "sklearn.feature_selection.SelectFdr.get_params"]], "get_support() (sklearn.feature_selection.selectfdr method)": [[594, "sklearn.feature_selection.SelectFdr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[594, "sklearn.feature_selection.SelectFdr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfdr method)": [[594, "sklearn.feature_selection.SelectFdr.set_output"]], "set_params() (sklearn.feature_selection.selectfdr method)": [[594, "sklearn.feature_selection.SelectFdr.set_params"]], "transform() (sklearn.feature_selection.selectfdr method)": [[594, "sklearn.feature_selection.SelectFdr.transform"]], "selectfpr (class in sklearn.feature_selection)": [[595, "sklearn.feature_selection.SelectFpr"]], "fit() (sklearn.feature_selection.selectfpr method)": [[595, "sklearn.feature_selection.SelectFpr.fit"]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[595, "sklearn.feature_selection.SelectFpr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[595, "sklearn.feature_selection.SelectFpr.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[595, "sklearn.feature_selection.SelectFpr.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfpr method)": [[595, "sklearn.feature_selection.SelectFpr.get_params"]], "get_support() (sklearn.feature_selection.selectfpr method)": [[595, "sklearn.feature_selection.SelectFpr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[595, "sklearn.feature_selection.SelectFpr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfpr method)": [[595, "sklearn.feature_selection.SelectFpr.set_output"]], "set_params() (sklearn.feature_selection.selectfpr method)": [[595, "sklearn.feature_selection.SelectFpr.set_params"]], "transform() (sklearn.feature_selection.selectfpr method)": [[595, "sklearn.feature_selection.SelectFpr.transform"]], "selectfrommodel (class in sklearn.feature_selection)": [[596, "sklearn.feature_selection.SelectFromModel"]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[596, "sklearn.feature_selection.SelectFromModel.fit"]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[596, "sklearn.feature_selection.SelectFromModel.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[596, "sklearn.feature_selection.SelectFromModel.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[596, "sklearn.feature_selection.SelectFromModel.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[596, "sklearn.feature_selection.SelectFromModel.get_params"]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[596, "sklearn.feature_selection.SelectFromModel.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[596, "sklearn.feature_selection.SelectFromModel.inverse_transform"]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[596, "sklearn.feature_selection.SelectFromModel.n_features_in_"]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[596, "sklearn.feature_selection.SelectFromModel.partial_fit"]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[596, "sklearn.feature_selection.SelectFromModel.set_output"]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[596, "sklearn.feature_selection.SelectFromModel.set_params"]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[596, "sklearn.feature_selection.SelectFromModel.threshold_"]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[596, "sklearn.feature_selection.SelectFromModel.transform"]], "selectfwe (class in sklearn.feature_selection)": [[597, "sklearn.feature_selection.SelectFwe"]], "fit() (sklearn.feature_selection.selectfwe method)": [[597, "sklearn.feature_selection.SelectFwe.fit"]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[597, "sklearn.feature_selection.SelectFwe.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[597, "sklearn.feature_selection.SelectFwe.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[597, "sklearn.feature_selection.SelectFwe.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfwe method)": [[597, "sklearn.feature_selection.SelectFwe.get_params"]], "get_support() (sklearn.feature_selection.selectfwe method)": [[597, "sklearn.feature_selection.SelectFwe.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[597, "sklearn.feature_selection.SelectFwe.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfwe method)": [[597, "sklearn.feature_selection.SelectFwe.set_output"]], "set_params() (sklearn.feature_selection.selectfwe method)": [[597, "sklearn.feature_selection.SelectFwe.set_params"]], "transform() (sklearn.feature_selection.selectfwe method)": [[597, "sklearn.feature_selection.SelectFwe.transform"]], "selectkbest (class in sklearn.feature_selection)": [[598, "sklearn.feature_selection.SelectKBest"]], "fit() (sklearn.feature_selection.selectkbest method)": [[598, "sklearn.feature_selection.SelectKBest.fit"]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[598, "sklearn.feature_selection.SelectKBest.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[598, "sklearn.feature_selection.SelectKBest.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[598, "sklearn.feature_selection.SelectKBest.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectkbest method)": [[598, "sklearn.feature_selection.SelectKBest.get_params"]], "get_support() (sklearn.feature_selection.selectkbest method)": [[598, "sklearn.feature_selection.SelectKBest.get_support"]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[598, "sklearn.feature_selection.SelectKBest.inverse_transform"]], "set_output() (sklearn.feature_selection.selectkbest method)": [[598, "sklearn.feature_selection.SelectKBest.set_output"]], "set_params() (sklearn.feature_selection.selectkbest method)": [[598, "sklearn.feature_selection.SelectKBest.set_params"]], "transform() (sklearn.feature_selection.selectkbest method)": [[598, "sklearn.feature_selection.SelectKBest.transform"]], "selectpercentile (class in sklearn.feature_selection)": [[599, "sklearn.feature_selection.SelectPercentile"]], "fit() (sklearn.feature_selection.selectpercentile method)": [[599, "sklearn.feature_selection.SelectPercentile.fit"]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[599, "sklearn.feature_selection.SelectPercentile.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[599, "sklearn.feature_selection.SelectPercentile.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[599, "sklearn.feature_selection.SelectPercentile.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[599, "sklearn.feature_selection.SelectPercentile.get_params"]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[599, "sklearn.feature_selection.SelectPercentile.get_support"]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[599, "sklearn.feature_selection.SelectPercentile.inverse_transform"]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[599, "sklearn.feature_selection.SelectPercentile.set_output"]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[599, "sklearn.feature_selection.SelectPercentile.set_params"]], "transform() (sklearn.feature_selection.selectpercentile method)": [[599, "sklearn.feature_selection.SelectPercentile.transform"]], "selectormixin (class in sklearn.feature_selection)": [[600, "sklearn.feature_selection.SelectorMixin"]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[600, "sklearn.feature_selection.SelectorMixin.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[600, "sklearn.feature_selection.SelectorMixin.get_feature_names_out"]], "get_support() (sklearn.feature_selection.selectormixin method)": [[600, "sklearn.feature_selection.SelectorMixin.get_support"]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[600, "sklearn.feature_selection.SelectorMixin.inverse_transform"]], "set_output() (sklearn.feature_selection.selectormixin method)": [[600, "sklearn.feature_selection.SelectorMixin.set_output"]], "transform() (sklearn.feature_selection.selectormixin method)": [[600, "sklearn.feature_selection.SelectorMixin.transform"]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[601, "sklearn.feature_selection.SequentialFeatureSelector"]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[601, "sklearn.feature_selection.SequentialFeatureSelector.fit"]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[601, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[601, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[601, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing"]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[601, "sklearn.feature_selection.SequentialFeatureSelector.get_params"]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[601, "sklearn.feature_selection.SequentialFeatureSelector.get_support"]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[601, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform"]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[601, "sklearn.feature_selection.SequentialFeatureSelector.set_output"]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[601, "sklearn.feature_selection.SequentialFeatureSelector.set_params"]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[601, "sklearn.feature_selection.SequentialFeatureSelector.transform"]], "variancethreshold (class in sklearn.feature_selection)": [[602, "sklearn.feature_selection.VarianceThreshold"]], "fit() (sklearn.feature_selection.variancethreshold method)": [[602, "sklearn.feature_selection.VarianceThreshold.fit"]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[602, "sklearn.feature_selection.VarianceThreshold.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[602, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[602, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing"]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[602, "sklearn.feature_selection.VarianceThreshold.get_params"]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[602, "sklearn.feature_selection.VarianceThreshold.get_support"]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[602, "sklearn.feature_selection.VarianceThreshold.inverse_transform"]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[602, "sklearn.feature_selection.VarianceThreshold.set_output"]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[602, "sklearn.feature_selection.VarianceThreshold.set_params"]], "transform() (sklearn.feature_selection.variancethreshold method)": [[602, "sklearn.feature_selection.VarianceThreshold.transform"]], "chi2() (in module sklearn.feature_selection)": [[603, "sklearn.feature_selection.chi2"]], "f_classif() (in module sklearn.feature_selection)": [[604, "sklearn.feature_selection.f_classif"]], "f_regression() (in module sklearn.feature_selection)": [[605, "sklearn.feature_selection.f_regression"]], "mutual_info_classif() (in module sklearn.feature_selection)": [[606, "sklearn.feature_selection.mutual_info_classif"]], "mutual_info_regression() (in module sklearn.feature_selection)": [[607, "sklearn.feature_selection.mutual_info_regression"]], "r_regression() (in module sklearn.feature_selection)": [[608, "sklearn.feature_selection.r_regression"]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[609, "sklearn.gaussian_process.GaussianProcessClassifier"]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[609, "sklearn.gaussian_process.GaussianProcessClassifier.fit"]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[609, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing"]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[609, "sklearn.gaussian_process.GaussianProcessClassifier.get_params"]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[609, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[609, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[609, "sklearn.gaussian_process.GaussianProcessClassifier.predict"]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[609, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba"]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[609, "sklearn.gaussian_process.GaussianProcessClassifier.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[609, "sklearn.gaussian_process.GaussianProcessClassifier.set_params"]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[609, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request"]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[610, "sklearn.gaussian_process.GaussianProcessRegressor"]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[610, "sklearn.gaussian_process.GaussianProcessRegressor.fit"]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[610, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing"]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[610, "sklearn.gaussian_process.GaussianProcessRegressor.get_params"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[610, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[610, "sklearn.gaussian_process.GaussianProcessRegressor.predict"]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[610, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y"]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[610, "sklearn.gaussian_process.GaussianProcessRegressor.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[610, "sklearn.gaussian_process.GaussianProcessRegressor.set_params"]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[610, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request"]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[610, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request"]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[611, "sklearn.gaussian_process.kernels.CompoundKernel"]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[611, "sklearn.gaussian_process.kernels.CompoundKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[611, "sklearn.gaussian_process.kernels.CompoundKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[611, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[611, "sklearn.gaussian_process.kernels.CompoundKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[611, "sklearn.gaussian_process.kernels.CompoundKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[611, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[611, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[611, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[611, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[611, "sklearn.gaussian_process.kernels.CompoundKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[611, "sklearn.gaussian_process.kernels.CompoundKernel.theta"]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[612, "sklearn.gaussian_process.kernels.ConstantKernel"]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[612, "sklearn.gaussian_process.kernels.ConstantKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[612, "sklearn.gaussian_process.kernels.ConstantKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[612, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[612, "sklearn.gaussian_process.kernels.ConstantKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[612, "sklearn.gaussian_process.kernels.ConstantKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[612, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[612, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[612, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[612, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[612, "sklearn.gaussian_process.kernels.ConstantKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[612, "sklearn.gaussian_process.kernels.ConstantKernel.theta"]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[613, "sklearn.gaussian_process.kernels.DotProduct"]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[613, "sklearn.gaussian_process.kernels.DotProduct.__call__"]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[613, "sklearn.gaussian_process.kernels.DotProduct.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[613, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[613, "sklearn.gaussian_process.kernels.DotProduct.diag"]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[613, "sklearn.gaussian_process.kernels.DotProduct.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[613, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[613, "sklearn.gaussian_process.kernels.DotProduct.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[613, "sklearn.gaussian_process.kernels.DotProduct.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[613, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[613, "sklearn.gaussian_process.kernels.DotProduct.set_params"]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[613, "sklearn.gaussian_process.kernels.DotProduct.theta"]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[614, "sklearn.gaussian_process.kernels.ExpSineSquared"]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[614, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__"]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[614, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[614, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[614, "sklearn.gaussian_process.kernels.ExpSineSquared.diag"]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[614, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params"]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[614, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale"]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[614, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[614, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[614, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[614, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[614, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params"]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[614, "sklearn.gaussian_process.kernels.ExpSineSquared.theta"]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[615, "sklearn.gaussian_process.kernels.Exponentiation"]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[615, "sklearn.gaussian_process.kernels.Exponentiation.__call__"]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[615, "sklearn.gaussian_process.kernels.Exponentiation.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[615, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[615, "sklearn.gaussian_process.kernels.Exponentiation.diag"]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[615, "sklearn.gaussian_process.kernels.Exponentiation.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[615, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[615, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[615, "sklearn.gaussian_process.kernels.Exponentiation.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[615, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[615, "sklearn.gaussian_process.kernels.Exponentiation.set_params"]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[615, "sklearn.gaussian_process.kernels.Exponentiation.theta"]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[616, "sklearn.gaussian_process.kernels.Hyperparameter"]], "__call__() (sklearn.gaussian_process.kernels.hyperparameter method)": [[616, "sklearn.gaussian_process.kernels.Hyperparameter.__call__"]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[616, "sklearn.gaussian_process.kernels.Hyperparameter.bounds"]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[616, "sklearn.gaussian_process.kernels.Hyperparameter.count"]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[616, "sklearn.gaussian_process.kernels.Hyperparameter.fixed"]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[616, "sklearn.gaussian_process.kernels.Hyperparameter.index"]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[616, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements"]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[616, "sklearn.gaussian_process.kernels.Hyperparameter.name"]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[616, "sklearn.gaussian_process.kernels.Hyperparameter.value_type"]], "kernel (class in sklearn.gaussian_process.kernels)": [[617, "sklearn.gaussian_process.kernels.Kernel"]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[617, "sklearn.gaussian_process.kernels.Kernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[617, "sklearn.gaussian_process.kernels.Kernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[617, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[617, "sklearn.gaussian_process.kernels.Kernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[617, "sklearn.gaussian_process.kernels.Kernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[617, "sklearn.gaussian_process.kernels.Kernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[617, "sklearn.gaussian_process.kernels.Kernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[617, "sklearn.gaussian_process.kernels.Kernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[617, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[617, "sklearn.gaussian_process.kernels.Kernel.set_params"]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[617, "sklearn.gaussian_process.kernels.Kernel.theta"]], "matern (class in sklearn.gaussian_process.kernels)": [[618, "sklearn.gaussian_process.kernels.Matern"]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[618, "sklearn.gaussian_process.kernels.Matern.__call__"]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[618, "sklearn.gaussian_process.kernels.Matern.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[618, "sklearn.gaussian_process.kernels.Matern.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[618, "sklearn.gaussian_process.kernels.Matern.diag"]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[618, "sklearn.gaussian_process.kernels.Matern.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[618, "sklearn.gaussian_process.kernels.Matern.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[618, "sklearn.gaussian_process.kernels.Matern.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[618, "sklearn.gaussian_process.kernels.Matern.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[618, "sklearn.gaussian_process.kernels.Matern.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[618, "sklearn.gaussian_process.kernels.Matern.set_params"]], "theta (sklearn.gaussian_process.kernels.matern property)": [[618, "sklearn.gaussian_process.kernels.Matern.theta"]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[619, "sklearn.gaussian_process.kernels.PairwiseKernel"]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[619, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[619, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[619, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[619, "sklearn.gaussian_process.kernels.PairwiseKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[619, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[619, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[619, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[619, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[619, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[619, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[619, "sklearn.gaussian_process.kernels.PairwiseKernel.theta"]], "product (class in sklearn.gaussian_process.kernels)": [[620, "sklearn.gaussian_process.kernels.Product"]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[620, "sklearn.gaussian_process.kernels.Product.__call__"]], "bounds (sklearn.gaussian_process.kernels.product property)": [[620, "sklearn.gaussian_process.kernels.Product.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[620, "sklearn.gaussian_process.kernels.Product.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.product method)": [[620, "sklearn.gaussian_process.kernels.Product.diag"]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[620, "sklearn.gaussian_process.kernels.Product.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[620, "sklearn.gaussian_process.kernels.Product.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[620, "sklearn.gaussian_process.kernels.Product.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[620, "sklearn.gaussian_process.kernels.Product.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[620, "sklearn.gaussian_process.kernels.Product.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[620, "sklearn.gaussian_process.kernels.Product.set_params"]], "theta (sklearn.gaussian_process.kernels.product property)": [[620, "sklearn.gaussian_process.kernels.Product.theta"]], "rbf (class in sklearn.gaussian_process.kernels)": [[621, "sklearn.gaussian_process.kernels.RBF"]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[621, "sklearn.gaussian_process.kernels.RBF.__call__"]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[621, "sklearn.gaussian_process.kernels.RBF.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[621, "sklearn.gaussian_process.kernels.RBF.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[621, "sklearn.gaussian_process.kernels.RBF.diag"]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[621, "sklearn.gaussian_process.kernels.RBF.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[621, "sklearn.gaussian_process.kernels.RBF.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[621, "sklearn.gaussian_process.kernels.RBF.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[621, "sklearn.gaussian_process.kernels.RBF.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[621, "sklearn.gaussian_process.kernels.RBF.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[621, "sklearn.gaussian_process.kernels.RBF.set_params"]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[621, "sklearn.gaussian_process.kernels.RBF.theta"]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[622, "sklearn.gaussian_process.kernels.RationalQuadratic"]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[622, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__"]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[622, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[622, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[622, "sklearn.gaussian_process.kernels.RationalQuadratic.diag"]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[622, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[622, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[622, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[622, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[622, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[622, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params"]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[622, "sklearn.gaussian_process.kernels.RationalQuadratic.theta"]], "sum (class in sklearn.gaussian_process.kernels)": [[623, "sklearn.gaussian_process.kernels.Sum"]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[623, "sklearn.gaussian_process.kernels.Sum.__call__"]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[623, "sklearn.gaussian_process.kernels.Sum.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[623, "sklearn.gaussian_process.kernels.Sum.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[623, "sklearn.gaussian_process.kernels.Sum.diag"]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[623, "sklearn.gaussian_process.kernels.Sum.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[623, "sklearn.gaussian_process.kernels.Sum.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[623, "sklearn.gaussian_process.kernels.Sum.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[623, "sklearn.gaussian_process.kernels.Sum.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[623, "sklearn.gaussian_process.kernels.Sum.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[623, "sklearn.gaussian_process.kernels.Sum.set_params"]], "theta (sklearn.gaussian_process.kernels.sum property)": [[623, "sklearn.gaussian_process.kernels.Sum.theta"]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[624, "sklearn.gaussian_process.kernels.WhiteKernel"]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[624, "sklearn.gaussian_process.kernels.WhiteKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[624, "sklearn.gaussian_process.kernels.WhiteKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[624, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[624, "sklearn.gaussian_process.kernels.WhiteKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[624, "sklearn.gaussian_process.kernels.WhiteKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[624, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[624, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[624, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[624, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[624, "sklearn.gaussian_process.kernels.WhiteKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[624, "sklearn.gaussian_process.kernels.WhiteKernel.theta"]], "get_config() (in module sklearn)": [[625, "sklearn.get_config"]], "iterativeimputer (class in sklearn.impute)": [[626, "sklearn.impute.IterativeImputer"]], "fit() (sklearn.impute.iterativeimputer method)": [[626, "sklearn.impute.IterativeImputer.fit"]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[626, "sklearn.impute.IterativeImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[626, "sklearn.impute.IterativeImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[626, "sklearn.impute.IterativeImputer.get_metadata_routing"]], "get_params() (sklearn.impute.iterativeimputer method)": [[626, "sklearn.impute.IterativeImputer.get_params"]], "set_output() (sklearn.impute.iterativeimputer method)": [[626, "sklearn.impute.IterativeImputer.set_output"]], "set_params() (sklearn.impute.iterativeimputer method)": [[626, "sklearn.impute.IterativeImputer.set_params"]], "transform() (sklearn.impute.iterativeimputer method)": [[626, "sklearn.impute.IterativeImputer.transform"]], "knnimputer (class in sklearn.impute)": [[627, "sklearn.impute.KNNImputer"]], "fit() (sklearn.impute.knnimputer method)": [[627, "sklearn.impute.KNNImputer.fit"]], "fit_transform() (sklearn.impute.knnimputer method)": [[627, "sklearn.impute.KNNImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[627, "sklearn.impute.KNNImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[627, "sklearn.impute.KNNImputer.get_metadata_routing"]], "get_params() (sklearn.impute.knnimputer method)": [[627, "sklearn.impute.KNNImputer.get_params"]], "set_output() (sklearn.impute.knnimputer method)": [[627, "sklearn.impute.KNNImputer.set_output"]], "set_params() (sklearn.impute.knnimputer method)": [[627, "sklearn.impute.KNNImputer.set_params"]], "transform() (sklearn.impute.knnimputer method)": [[627, "sklearn.impute.KNNImputer.transform"]], "missingindicator (class in sklearn.impute)": [[628, "sklearn.impute.MissingIndicator"]], "fit() (sklearn.impute.missingindicator method)": [[628, "sklearn.impute.MissingIndicator.fit"]], "fit_transform() (sklearn.impute.missingindicator method)": [[628, "sklearn.impute.MissingIndicator.fit_transform"]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[628, "sklearn.impute.MissingIndicator.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[628, "sklearn.impute.MissingIndicator.get_metadata_routing"]], "get_params() (sklearn.impute.missingindicator method)": [[628, "sklearn.impute.MissingIndicator.get_params"]], "set_output() (sklearn.impute.missingindicator method)": [[628, "sklearn.impute.MissingIndicator.set_output"]], "set_params() (sklearn.impute.missingindicator method)": [[628, "sklearn.impute.MissingIndicator.set_params"]], "transform() (sklearn.impute.missingindicator method)": [[628, "sklearn.impute.MissingIndicator.transform"]], "simpleimputer (class in sklearn.impute)": [[629, "sklearn.impute.SimpleImputer"]], "fit() (sklearn.impute.simpleimputer method)": [[629, "sklearn.impute.SimpleImputer.fit"]], "fit_transform() (sklearn.impute.simpleimputer method)": [[629, "sklearn.impute.SimpleImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[629, "sklearn.impute.SimpleImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[629, "sklearn.impute.SimpleImputer.get_metadata_routing"]], "get_params() (sklearn.impute.simpleimputer method)": [[629, "sklearn.impute.SimpleImputer.get_params"]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[629, "sklearn.impute.SimpleImputer.inverse_transform"]], "set_output() (sklearn.impute.simpleimputer method)": [[629, "sklearn.impute.SimpleImputer.set_output"]], "set_params() (sklearn.impute.simpleimputer method)": [[629, "sklearn.impute.SimpleImputer.set_params"]], "transform() (sklearn.impute.simpleimputer method)": [[629, "sklearn.impute.SimpleImputer.transform"]], "decisionboundarydisplay (class in sklearn.inspection)": [[630, "sklearn.inspection.DecisionBoundaryDisplay"]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[630, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator"]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[630, "sklearn.inspection.DecisionBoundaryDisplay.plot"]], "partialdependencedisplay (class in sklearn.inspection)": [[631, "sklearn.inspection.PartialDependenceDisplay"]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[631, "sklearn.inspection.PartialDependenceDisplay.from_estimator"]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[631, "sklearn.inspection.PartialDependenceDisplay.plot"]], "partial_dependence() (in module sklearn.inspection)": [[632, "sklearn.inspection.partial_dependence"]], "permutation_importance() (in module sklearn.inspection)": [[633, "sklearn.inspection.permutation_importance"]], "isotonicregression (class in sklearn.isotonic)": [[634, "sklearn.isotonic.IsotonicRegression"]], "fit() (sklearn.isotonic.isotonicregression method)": [[634, "sklearn.isotonic.IsotonicRegression.fit"]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[634, "sklearn.isotonic.IsotonicRegression.fit_transform"]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[634, "sklearn.isotonic.IsotonicRegression.get_feature_names_out"]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[634, "sklearn.isotonic.IsotonicRegression.get_metadata_routing"]], "get_params() (sklearn.isotonic.isotonicregression method)": [[634, "sklearn.isotonic.IsotonicRegression.get_params"]], "predict() (sklearn.isotonic.isotonicregression method)": [[634, "sklearn.isotonic.IsotonicRegression.predict"]], "score() (sklearn.isotonic.isotonicregression method)": [[634, "sklearn.isotonic.IsotonicRegression.score"]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[634, "sklearn.isotonic.IsotonicRegression.set_fit_request"]], "set_output() (sklearn.isotonic.isotonicregression method)": [[634, "sklearn.isotonic.IsotonicRegression.set_output"]], "set_params() (sklearn.isotonic.isotonicregression method)": [[634, "sklearn.isotonic.IsotonicRegression.set_params"]], "set_predict_request() (sklearn.isotonic.isotonicregression method)": [[634, "sklearn.isotonic.IsotonicRegression.set_predict_request"]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[634, "sklearn.isotonic.IsotonicRegression.set_score_request"]], "set_transform_request() (sklearn.isotonic.isotonicregression method)": [[634, "sklearn.isotonic.IsotonicRegression.set_transform_request"]], "transform() (sklearn.isotonic.isotonicregression method)": [[634, "sklearn.isotonic.IsotonicRegression.transform"]], "check_increasing() (in module sklearn.isotonic)": [[635, "sklearn.isotonic.check_increasing"]], "isotonic_regression() (in module sklearn.isotonic)": [[636, "sklearn.isotonic.isotonic_regression"]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[637, "sklearn.kernel_approximation.AdditiveChi2Sampler"]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[637, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[637, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[637, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[637, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[637, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[637, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[637, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[637, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform"]], "nystroem (class in sklearn.kernel_approximation)": [[638, "sklearn.kernel_approximation.Nystroem"]], "fit() (sklearn.kernel_approximation.nystroem method)": [[638, "sklearn.kernel_approximation.Nystroem.fit"]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[638, "sklearn.kernel_approximation.Nystroem.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[638, "sklearn.kernel_approximation.Nystroem.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[638, "sklearn.kernel_approximation.Nystroem.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[638, "sklearn.kernel_approximation.Nystroem.get_params"]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[638, "sklearn.kernel_approximation.Nystroem.set_output"]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[638, "sklearn.kernel_approximation.Nystroem.set_params"]], "transform() (sklearn.kernel_approximation.nystroem method)": [[638, "sklearn.kernel_approximation.Nystroem.transform"]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[639, "sklearn.kernel_approximation.PolynomialCountSketch"]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[639, "sklearn.kernel_approximation.PolynomialCountSketch.fit"]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[639, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[639, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[639, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[639, "sklearn.kernel_approximation.PolynomialCountSketch.get_params"]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[639, "sklearn.kernel_approximation.PolynomialCountSketch.set_output"]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[639, "sklearn.kernel_approximation.PolynomialCountSketch.set_params"]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[639, "sklearn.kernel_approximation.PolynomialCountSketch.transform"]], "rbfsampler (class in sklearn.kernel_approximation)": [[640, "sklearn.kernel_approximation.RBFSampler"]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[640, "sklearn.kernel_approximation.RBFSampler.fit"]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[640, "sklearn.kernel_approximation.RBFSampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[640, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[640, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[640, "sklearn.kernel_approximation.RBFSampler.get_params"]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[640, "sklearn.kernel_approximation.RBFSampler.set_output"]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[640, "sklearn.kernel_approximation.RBFSampler.set_params"]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[640, "sklearn.kernel_approximation.RBFSampler.transform"]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[641, "sklearn.kernel_approximation.SkewedChi2Sampler"]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[641, "sklearn.kernel_approximation.SkewedChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[641, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[641, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[641, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[641, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[641, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[641, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[641, "sklearn.kernel_approximation.SkewedChi2Sampler.transform"]], "kernelridge (class in sklearn.kernel_ridge)": [[642, "sklearn.kernel_ridge.KernelRidge"]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[642, "sklearn.kernel_ridge.KernelRidge.fit"]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[642, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing"]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[642, "sklearn.kernel_ridge.KernelRidge.get_params"]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[642, "sklearn.kernel_ridge.KernelRidge.predict"]], "score() (sklearn.kernel_ridge.kernelridge method)": [[642, "sklearn.kernel_ridge.KernelRidge.score"]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[642, "sklearn.kernel_ridge.KernelRidge.set_fit_request"]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[642, "sklearn.kernel_ridge.KernelRidge.set_params"]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[642, "sklearn.kernel_ridge.KernelRidge.set_score_request"]], "ardregression (class in sklearn.linear_model)": [[643, "sklearn.linear_model.ARDRegression"]], "fit() (sklearn.linear_model.ardregression method)": [[643, "sklearn.linear_model.ARDRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[643, "sklearn.linear_model.ARDRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.ardregression method)": [[643, "sklearn.linear_model.ARDRegression.get_params"]], "predict() (sklearn.linear_model.ardregression method)": [[643, "sklearn.linear_model.ARDRegression.predict"]], "score() (sklearn.linear_model.ardregression method)": [[643, "sklearn.linear_model.ARDRegression.score"]], "set_params() (sklearn.linear_model.ardregression method)": [[643, "sklearn.linear_model.ARDRegression.set_params"]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[643, "sklearn.linear_model.ARDRegression.set_predict_request"]], "set_score_request() (sklearn.linear_model.ardregression method)": [[643, "sklearn.linear_model.ARDRegression.set_score_request"]], "bayesianridge (class in sklearn.linear_model)": [[644, "sklearn.linear_model.BayesianRidge"]], "fit() (sklearn.linear_model.bayesianridge method)": [[644, "sklearn.linear_model.BayesianRidge.fit"]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[644, "sklearn.linear_model.BayesianRidge.get_metadata_routing"]], "get_params() (sklearn.linear_model.bayesianridge method)": [[644, "sklearn.linear_model.BayesianRidge.get_params"]], "predict() (sklearn.linear_model.bayesianridge method)": [[644, "sklearn.linear_model.BayesianRidge.predict"]], "score() (sklearn.linear_model.bayesianridge method)": [[644, "sklearn.linear_model.BayesianRidge.score"]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[644, "sklearn.linear_model.BayesianRidge.set_fit_request"]], "set_params() (sklearn.linear_model.bayesianridge method)": [[644, "sklearn.linear_model.BayesianRidge.set_params"]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[644, "sklearn.linear_model.BayesianRidge.set_predict_request"]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[644, "sklearn.linear_model.BayesianRidge.set_score_request"]], "elasticnet (class in sklearn.linear_model)": [[645, "sklearn.linear_model.ElasticNet"]], "fit() (sklearn.linear_model.elasticnet method)": [[645, "sklearn.linear_model.ElasticNet.fit"]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[645, "sklearn.linear_model.ElasticNet.get_metadata_routing"]], "get_params() (sklearn.linear_model.elasticnet method)": [[645, "sklearn.linear_model.ElasticNet.get_params"]], "path() (sklearn.linear_model.elasticnet static method)": [[645, "sklearn.linear_model.ElasticNet.path"]], "predict() (sklearn.linear_model.elasticnet method)": [[645, "sklearn.linear_model.ElasticNet.predict"]], "score() (sklearn.linear_model.elasticnet method)": [[645, "sklearn.linear_model.ElasticNet.score"]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[645, "sklearn.linear_model.ElasticNet.set_fit_request"]], "set_params() (sklearn.linear_model.elasticnet method)": [[645, "sklearn.linear_model.ElasticNet.set_params"]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[645, "sklearn.linear_model.ElasticNet.set_score_request"]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[645, "sklearn.linear_model.ElasticNet.sparse_coef_"]], "elasticnetcv (class in sklearn.linear_model)": [[646, "sklearn.linear_model.ElasticNetCV"]], "fit() (sklearn.linear_model.elasticnetcv method)": [[646, "sklearn.linear_model.ElasticNetCV.fit"]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[646, "sklearn.linear_model.ElasticNetCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[646, "sklearn.linear_model.ElasticNetCV.get_params"]], "path() (sklearn.linear_model.elasticnetcv static method)": [[646, "sklearn.linear_model.ElasticNetCV.path"]], "predict() (sklearn.linear_model.elasticnetcv method)": [[646, "sklearn.linear_model.ElasticNetCV.predict"]], "score() (sklearn.linear_model.elasticnetcv method)": [[646, "sklearn.linear_model.ElasticNetCV.score"]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[646, "sklearn.linear_model.ElasticNetCV.set_fit_request"]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[646, "sklearn.linear_model.ElasticNetCV.set_params"]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[646, "sklearn.linear_model.ElasticNetCV.set_score_request"]], "gammaregressor (class in sklearn.linear_model)": [[647, "sklearn.linear_model.GammaRegressor"]], "fit() (sklearn.linear_model.gammaregressor method)": [[647, "sklearn.linear_model.GammaRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[647, "sklearn.linear_model.GammaRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.gammaregressor method)": [[647, "sklearn.linear_model.GammaRegressor.get_params"]], "predict() (sklearn.linear_model.gammaregressor method)": [[647, "sklearn.linear_model.GammaRegressor.predict"]], "score() (sklearn.linear_model.gammaregressor method)": [[647, "sklearn.linear_model.GammaRegressor.score"]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[647, "sklearn.linear_model.GammaRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.gammaregressor method)": [[647, "sklearn.linear_model.GammaRegressor.set_params"]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[647, "sklearn.linear_model.GammaRegressor.set_score_request"]], "huberregressor (class in sklearn.linear_model)": [[648, "sklearn.linear_model.HuberRegressor"]], "fit() (sklearn.linear_model.huberregressor method)": [[648, "sklearn.linear_model.HuberRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[648, "sklearn.linear_model.HuberRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.huberregressor method)": [[648, "sklearn.linear_model.HuberRegressor.get_params"]], "predict() (sklearn.linear_model.huberregressor method)": [[648, "sklearn.linear_model.HuberRegressor.predict"]], "score() (sklearn.linear_model.huberregressor method)": [[648, "sklearn.linear_model.HuberRegressor.score"]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[648, "sklearn.linear_model.HuberRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.huberregressor method)": [[648, "sklearn.linear_model.HuberRegressor.set_params"]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[648, "sklearn.linear_model.HuberRegressor.set_score_request"]], "lars (class in sklearn.linear_model)": [[649, "sklearn.linear_model.Lars"]], "fit() (sklearn.linear_model.lars method)": [[649, "sklearn.linear_model.Lars.fit"]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[649, "sklearn.linear_model.Lars.get_metadata_routing"]], "get_params() (sklearn.linear_model.lars method)": [[649, "sklearn.linear_model.Lars.get_params"]], "predict() (sklearn.linear_model.lars method)": [[649, "sklearn.linear_model.Lars.predict"]], "score() (sklearn.linear_model.lars method)": [[649, "sklearn.linear_model.Lars.score"]], "set_fit_request() (sklearn.linear_model.lars method)": [[649, "sklearn.linear_model.Lars.set_fit_request"]], "set_params() (sklearn.linear_model.lars method)": [[649, "sklearn.linear_model.Lars.set_params"]], "set_score_request() (sklearn.linear_model.lars method)": [[649, "sklearn.linear_model.Lars.set_score_request"]], "larscv (class in sklearn.linear_model)": [[650, "sklearn.linear_model.LarsCV"]], "fit() (sklearn.linear_model.larscv method)": [[650, "sklearn.linear_model.LarsCV.fit"]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[650, "sklearn.linear_model.LarsCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.larscv method)": [[650, "sklearn.linear_model.LarsCV.get_params"]], "predict() (sklearn.linear_model.larscv method)": [[650, "sklearn.linear_model.LarsCV.predict"]], "score() (sklearn.linear_model.larscv method)": [[650, "sklearn.linear_model.LarsCV.score"]], "set_fit_request() (sklearn.linear_model.larscv method)": [[650, "sklearn.linear_model.LarsCV.set_fit_request"]], "set_params() (sklearn.linear_model.larscv method)": [[650, "sklearn.linear_model.LarsCV.set_params"]], "set_score_request() (sklearn.linear_model.larscv method)": [[650, "sklearn.linear_model.LarsCV.set_score_request"]], "lasso (class in sklearn.linear_model)": [[651, "sklearn.linear_model.Lasso"]], "fit() (sklearn.linear_model.lasso method)": [[651, "sklearn.linear_model.Lasso.fit"]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[651, "sklearn.linear_model.Lasso.get_metadata_routing"]], "get_params() (sklearn.linear_model.lasso method)": [[651, "sklearn.linear_model.Lasso.get_params"]], "path() (sklearn.linear_model.lasso static method)": [[651, "sklearn.linear_model.Lasso.path"]], "predict() (sklearn.linear_model.lasso method)": [[651, "sklearn.linear_model.Lasso.predict"]], "score() (sklearn.linear_model.lasso method)": [[651, "sklearn.linear_model.Lasso.score"]], "set_fit_request() (sklearn.linear_model.lasso method)": [[651, "sklearn.linear_model.Lasso.set_fit_request"]], "set_params() (sklearn.linear_model.lasso method)": [[651, "sklearn.linear_model.Lasso.set_params"]], "set_score_request() (sklearn.linear_model.lasso method)": [[651, "sklearn.linear_model.Lasso.set_score_request"]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[651, "sklearn.linear_model.Lasso.sparse_coef_"]], "lassocv (class in sklearn.linear_model)": [[652, "sklearn.linear_model.LassoCV"]], "fit() (sklearn.linear_model.lassocv method)": [[652, "sklearn.linear_model.LassoCV.fit"]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[652, "sklearn.linear_model.LassoCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassocv method)": [[652, "sklearn.linear_model.LassoCV.get_params"]], "path() (sklearn.linear_model.lassocv static method)": [[652, "sklearn.linear_model.LassoCV.path"]], "predict() (sklearn.linear_model.lassocv method)": [[652, "sklearn.linear_model.LassoCV.predict"]], "score() (sklearn.linear_model.lassocv method)": [[652, "sklearn.linear_model.LassoCV.score"]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[652, "sklearn.linear_model.LassoCV.set_fit_request"]], "set_params() (sklearn.linear_model.lassocv method)": [[652, "sklearn.linear_model.LassoCV.set_params"]], "set_score_request() (sklearn.linear_model.lassocv method)": [[652, "sklearn.linear_model.LassoCV.set_score_request"]], "lassolars (class in sklearn.linear_model)": [[653, "sklearn.linear_model.LassoLars"]], "fit() (sklearn.linear_model.lassolars method)": [[653, "sklearn.linear_model.LassoLars.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[653, "sklearn.linear_model.LassoLars.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolars method)": [[653, "sklearn.linear_model.LassoLars.get_params"]], "predict() (sklearn.linear_model.lassolars method)": [[653, "sklearn.linear_model.LassoLars.predict"]], "score() (sklearn.linear_model.lassolars method)": [[653, "sklearn.linear_model.LassoLars.score"]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[653, "sklearn.linear_model.LassoLars.set_fit_request"]], "set_params() (sklearn.linear_model.lassolars method)": [[653, "sklearn.linear_model.LassoLars.set_params"]], "set_score_request() (sklearn.linear_model.lassolars method)": [[653, "sklearn.linear_model.LassoLars.set_score_request"]], "lassolarscv (class in sklearn.linear_model)": [[654, "sklearn.linear_model.LassoLarsCV"]], "fit() (sklearn.linear_model.lassolarscv method)": [[654, "sklearn.linear_model.LassoLarsCV.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[654, "sklearn.linear_model.LassoLarsCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolarscv method)": [[654, "sklearn.linear_model.LassoLarsCV.get_params"]], "predict() (sklearn.linear_model.lassolarscv method)": [[654, "sklearn.linear_model.LassoLarsCV.predict"]], "score() (sklearn.linear_model.lassolarscv method)": [[654, "sklearn.linear_model.LassoLarsCV.score"]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[654, "sklearn.linear_model.LassoLarsCV.set_fit_request"]], "set_params() (sklearn.linear_model.lassolarscv method)": [[654, "sklearn.linear_model.LassoLarsCV.set_params"]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[654, "sklearn.linear_model.LassoLarsCV.set_score_request"]], "lassolarsic (class in sklearn.linear_model)": [[655, "sklearn.linear_model.LassoLarsIC"]], "fit() (sklearn.linear_model.lassolarsic method)": [[655, "sklearn.linear_model.LassoLarsIC.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[655, "sklearn.linear_model.LassoLarsIC.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolarsic method)": [[655, "sklearn.linear_model.LassoLarsIC.get_params"]], "predict() (sklearn.linear_model.lassolarsic method)": [[655, "sklearn.linear_model.LassoLarsIC.predict"]], "score() (sklearn.linear_model.lassolarsic method)": [[655, "sklearn.linear_model.LassoLarsIC.score"]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[655, "sklearn.linear_model.LassoLarsIC.set_fit_request"]], "set_params() (sklearn.linear_model.lassolarsic method)": [[655, "sklearn.linear_model.LassoLarsIC.set_params"]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[655, "sklearn.linear_model.LassoLarsIC.set_score_request"]], "linearregression (class in sklearn.linear_model)": [[656, "sklearn.linear_model.LinearRegression"]], "fit() (sklearn.linear_model.linearregression method)": [[656, "sklearn.linear_model.LinearRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[656, "sklearn.linear_model.LinearRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.linearregression method)": [[656, "sklearn.linear_model.LinearRegression.get_params"]], "predict() (sklearn.linear_model.linearregression method)": [[656, "sklearn.linear_model.LinearRegression.predict"]], "score() (sklearn.linear_model.linearregression method)": [[656, "sklearn.linear_model.LinearRegression.score"]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[656, "sklearn.linear_model.LinearRegression.set_fit_request"]], "set_params() (sklearn.linear_model.linearregression method)": [[656, "sklearn.linear_model.LinearRegression.set_params"]], "set_score_request() (sklearn.linear_model.linearregression method)": [[656, "sklearn.linear_model.LinearRegression.set_score_request"]], "logisticregression (class in sklearn.linear_model)": [[657, "sklearn.linear_model.LogisticRegression"]], "decision_function() (sklearn.linear_model.logisticregression method)": [[657, "sklearn.linear_model.LogisticRegression.decision_function"]], "densify() (sklearn.linear_model.logisticregression method)": [[657, "sklearn.linear_model.LogisticRegression.densify"]], "fit() (sklearn.linear_model.logisticregression method)": [[657, "sklearn.linear_model.LogisticRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[657, "sklearn.linear_model.LogisticRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.logisticregression method)": [[657, "sklearn.linear_model.LogisticRegression.get_params"]], "predict() (sklearn.linear_model.logisticregression method)": [[657, "sklearn.linear_model.LogisticRegression.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[657, "sklearn.linear_model.LogisticRegression.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[657, "sklearn.linear_model.LogisticRegression.predict_proba"]], "score() (sklearn.linear_model.logisticregression method)": [[657, "sklearn.linear_model.LogisticRegression.score"]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[657, "sklearn.linear_model.LogisticRegression.set_fit_request"]], "set_params() (sklearn.linear_model.logisticregression method)": [[657, "sklearn.linear_model.LogisticRegression.set_params"]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[657, "sklearn.linear_model.LogisticRegression.set_score_request"]], "sparsify() (sklearn.linear_model.logisticregression method)": [[657, "sklearn.linear_model.LogisticRegression.sparsify"]], "logisticregressioncv (class in sklearn.linear_model)": [[658, "sklearn.linear_model.LogisticRegressionCV"]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[658, "sklearn.linear_model.LogisticRegressionCV.decision_function"]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[658, "sklearn.linear_model.LogisticRegressionCV.densify"]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[658, "sklearn.linear_model.LogisticRegressionCV.fit"]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[658, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[658, "sklearn.linear_model.LogisticRegressionCV.get_params"]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[658, "sklearn.linear_model.LogisticRegressionCV.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[658, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[658, "sklearn.linear_model.LogisticRegressionCV.predict_proba"]], "score() (sklearn.linear_model.logisticregressioncv method)": [[658, "sklearn.linear_model.LogisticRegressionCV.score"]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[658, "sklearn.linear_model.LogisticRegressionCV.set_fit_request"]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[658, "sklearn.linear_model.LogisticRegressionCV.set_params"]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[658, "sklearn.linear_model.LogisticRegressionCV.set_score_request"]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[658, "sklearn.linear_model.LogisticRegressionCV.sparsify"]], "multitaskelasticnet (class in sklearn.linear_model)": [[659, "sklearn.linear_model.MultiTaskElasticNet"]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[659, "sklearn.linear_model.MultiTaskElasticNet.fit"]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[659, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[659, "sklearn.linear_model.MultiTaskElasticNet.get_params"]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[659, "sklearn.linear_model.MultiTaskElasticNet.path"]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[659, "sklearn.linear_model.MultiTaskElasticNet.predict"]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[659, "sklearn.linear_model.MultiTaskElasticNet.score"]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[659, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request"]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[659, "sklearn.linear_model.MultiTaskElasticNet.set_params"]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[659, "sklearn.linear_model.MultiTaskElasticNet.set_score_request"]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[659, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_"]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[660, "sklearn.linear_model.MultiTaskElasticNetCV"]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[660, "sklearn.linear_model.MultiTaskElasticNetCV.fit"]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[660, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[660, "sklearn.linear_model.MultiTaskElasticNetCV.get_params"]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[660, "sklearn.linear_model.MultiTaskElasticNetCV.path"]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[660, "sklearn.linear_model.MultiTaskElasticNetCV.predict"]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[660, "sklearn.linear_model.MultiTaskElasticNetCV.score"]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[660, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request"]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[660, "sklearn.linear_model.MultiTaskElasticNetCV.set_params"]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[660, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request"]], "multitasklasso (class in sklearn.linear_model)": [[661, "sklearn.linear_model.MultiTaskLasso"]], "fit() (sklearn.linear_model.multitasklasso method)": [[661, "sklearn.linear_model.MultiTaskLasso.fit"]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[661, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitasklasso method)": [[661, "sklearn.linear_model.MultiTaskLasso.get_params"]], "path() (sklearn.linear_model.multitasklasso static method)": [[661, "sklearn.linear_model.MultiTaskLasso.path"]], "predict() (sklearn.linear_model.multitasklasso method)": [[661, "sklearn.linear_model.MultiTaskLasso.predict"]], "score() (sklearn.linear_model.multitasklasso method)": [[661, "sklearn.linear_model.MultiTaskLasso.score"]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[661, "sklearn.linear_model.MultiTaskLasso.set_fit_request"]], "set_params() (sklearn.linear_model.multitasklasso method)": [[661, "sklearn.linear_model.MultiTaskLasso.set_params"]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[661, "sklearn.linear_model.MultiTaskLasso.set_score_request"]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[661, "sklearn.linear_model.MultiTaskLasso.sparse_coef_"]], "multitasklassocv (class in sklearn.linear_model)": [[662, "sklearn.linear_model.MultiTaskLassoCV"]], "fit() (sklearn.linear_model.multitasklassocv method)": [[662, "sklearn.linear_model.MultiTaskLassoCV.fit"]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[662, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[662, "sklearn.linear_model.MultiTaskLassoCV.get_params"]], "path() (sklearn.linear_model.multitasklassocv static method)": [[662, "sklearn.linear_model.MultiTaskLassoCV.path"]], "predict() (sklearn.linear_model.multitasklassocv method)": [[662, "sklearn.linear_model.MultiTaskLassoCV.predict"]], "score() (sklearn.linear_model.multitasklassocv method)": [[662, "sklearn.linear_model.MultiTaskLassoCV.score"]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[662, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request"]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[662, "sklearn.linear_model.MultiTaskLassoCV.set_params"]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[662, "sklearn.linear_model.MultiTaskLassoCV.set_score_request"]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[663, "sklearn.linear_model.OrthogonalMatchingPursuit"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[663, "sklearn.linear_model.OrthogonalMatchingPursuit.fit"]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[663, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[663, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[663, "sklearn.linear_model.OrthogonalMatchingPursuit.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[663, "sklearn.linear_model.OrthogonalMatchingPursuit.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[663, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params"]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[663, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request"]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuitCV"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit"]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params"]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request"]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[665, "sklearn.linear_model.PassiveAggressiveClassifier"]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[665, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function"]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[665, "sklearn.linear_model.PassiveAggressiveClassifier.densify"]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[665, "sklearn.linear_model.PassiveAggressiveClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[665, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[665, "sklearn.linear_model.PassiveAggressiveClassifier.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[665, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[665, "sklearn.linear_model.PassiveAggressiveClassifier.predict"]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[665, "sklearn.linear_model.PassiveAggressiveClassifier.score"]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[665, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[665, "sklearn.linear_model.PassiveAggressiveClassifier.set_params"]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[665, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[665, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request"]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[665, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify"]], "passiveaggressiveregressor (class in sklearn.linear_model)": [[666, "sklearn.linear_model.PassiveAggressiveRegressor"]], "densify() (sklearn.linear_model.passiveaggressiveregressor method)": [[666, "sklearn.linear_model.PassiveAggressiveRegressor.densify"]], "fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[666, "sklearn.linear_model.PassiveAggressiveRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveregressor method)": [[666, "sklearn.linear_model.PassiveAggressiveRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[666, "sklearn.linear_model.PassiveAggressiveRegressor.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[666, "sklearn.linear_model.PassiveAggressiveRegressor.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveregressor method)": [[666, "sklearn.linear_model.PassiveAggressiveRegressor.predict"]], "score() (sklearn.linear_model.passiveaggressiveregressor method)": [[666, "sklearn.linear_model.PassiveAggressiveRegressor.score"]], "set_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[666, "sklearn.linear_model.PassiveAggressiveRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[666, "sklearn.linear_model.PassiveAggressiveRegressor.set_params"]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[666, "sklearn.linear_model.PassiveAggressiveRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[666, "sklearn.linear_model.PassiveAggressiveRegressor.set_score_request"]], "sparsify() (sklearn.linear_model.passiveaggressiveregressor method)": [[666, "sklearn.linear_model.PassiveAggressiveRegressor.sparsify"]], "perceptron (class in sklearn.linear_model)": [[667, "sklearn.linear_model.Perceptron"]], "decision_function() (sklearn.linear_model.perceptron method)": [[667, "sklearn.linear_model.Perceptron.decision_function"]], "densify() (sklearn.linear_model.perceptron method)": [[667, "sklearn.linear_model.Perceptron.densify"]], "fit() (sklearn.linear_model.perceptron method)": [[667, "sklearn.linear_model.Perceptron.fit"]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[667, "sklearn.linear_model.Perceptron.get_metadata_routing"]], "get_params() (sklearn.linear_model.perceptron method)": [[667, "sklearn.linear_model.Perceptron.get_params"]], "partial_fit() (sklearn.linear_model.perceptron method)": [[667, "sklearn.linear_model.Perceptron.partial_fit"]], "predict() (sklearn.linear_model.perceptron method)": [[667, "sklearn.linear_model.Perceptron.predict"]], "score() (sklearn.linear_model.perceptron method)": [[667, "sklearn.linear_model.Perceptron.score"]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[667, "sklearn.linear_model.Perceptron.set_fit_request"]], "set_params() (sklearn.linear_model.perceptron method)": [[667, "sklearn.linear_model.Perceptron.set_params"]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[667, "sklearn.linear_model.Perceptron.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.perceptron method)": [[667, "sklearn.linear_model.Perceptron.set_score_request"]], "sparsify() (sklearn.linear_model.perceptron method)": [[667, "sklearn.linear_model.Perceptron.sparsify"]], "poissonregressor (class in sklearn.linear_model)": [[668, "sklearn.linear_model.PoissonRegressor"]], "fit() (sklearn.linear_model.poissonregressor method)": [[668, "sklearn.linear_model.PoissonRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[668, "sklearn.linear_model.PoissonRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.poissonregressor method)": [[668, "sklearn.linear_model.PoissonRegressor.get_params"]], "predict() (sklearn.linear_model.poissonregressor method)": [[668, "sklearn.linear_model.PoissonRegressor.predict"]], "score() (sklearn.linear_model.poissonregressor method)": [[668, "sklearn.linear_model.PoissonRegressor.score"]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[668, "sklearn.linear_model.PoissonRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.poissonregressor method)": [[668, "sklearn.linear_model.PoissonRegressor.set_params"]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[668, "sklearn.linear_model.PoissonRegressor.set_score_request"]], "quantileregressor (class in sklearn.linear_model)": [[669, "sklearn.linear_model.QuantileRegressor"]], "fit() (sklearn.linear_model.quantileregressor method)": [[669, "sklearn.linear_model.QuantileRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[669, "sklearn.linear_model.QuantileRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.quantileregressor method)": [[669, "sklearn.linear_model.QuantileRegressor.get_params"]], "predict() (sklearn.linear_model.quantileregressor method)": [[669, "sklearn.linear_model.QuantileRegressor.predict"]], "score() (sklearn.linear_model.quantileregressor method)": [[669, "sklearn.linear_model.QuantileRegressor.score"]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[669, "sklearn.linear_model.QuantileRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.quantileregressor method)": [[669, "sklearn.linear_model.QuantileRegressor.set_params"]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[669, "sklearn.linear_model.QuantileRegressor.set_score_request"]], "ransacregressor (class in sklearn.linear_model)": [[670, "sklearn.linear_model.RANSACRegressor"]], "fit() (sklearn.linear_model.ransacregressor method)": [[670, "sklearn.linear_model.RANSACRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[670, "sklearn.linear_model.RANSACRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.ransacregressor method)": [[670, "sklearn.linear_model.RANSACRegressor.get_params"]], "predict() (sklearn.linear_model.ransacregressor method)": [[670, "sklearn.linear_model.RANSACRegressor.predict"]], "score() (sklearn.linear_model.ransacregressor method)": [[670, "sklearn.linear_model.RANSACRegressor.score"]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[670, "sklearn.linear_model.RANSACRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.ransacregressor method)": [[670, "sklearn.linear_model.RANSACRegressor.set_params"]], "ridge (class in sklearn.linear_model)": [[671, "sklearn.linear_model.Ridge"]], "fit() (sklearn.linear_model.ridge method)": [[671, "sklearn.linear_model.Ridge.fit"]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[671, "sklearn.linear_model.Ridge.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridge method)": [[671, "sklearn.linear_model.Ridge.get_params"]], "predict() (sklearn.linear_model.ridge method)": [[671, "sklearn.linear_model.Ridge.predict"]], "score() (sklearn.linear_model.ridge method)": [[671, "sklearn.linear_model.Ridge.score"]], "set_fit_request() (sklearn.linear_model.ridge method)": [[671, "sklearn.linear_model.Ridge.set_fit_request"]], "set_params() (sklearn.linear_model.ridge method)": [[671, "sklearn.linear_model.Ridge.set_params"]], "set_score_request() (sklearn.linear_model.ridge method)": [[671, "sklearn.linear_model.Ridge.set_score_request"]], "ridgecv (class in sklearn.linear_model)": [[672, "sklearn.linear_model.RidgeCV"]], "fit() (sklearn.linear_model.ridgecv method)": [[672, "sklearn.linear_model.RidgeCV.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[672, "sklearn.linear_model.RidgeCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgecv method)": [[672, "sklearn.linear_model.RidgeCV.get_params"]], "predict() (sklearn.linear_model.ridgecv method)": [[672, "sklearn.linear_model.RidgeCV.predict"]], "score() (sklearn.linear_model.ridgecv method)": [[672, "sklearn.linear_model.RidgeCV.score"]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[672, "sklearn.linear_model.RidgeCV.set_fit_request"]], "set_params() (sklearn.linear_model.ridgecv method)": [[672, "sklearn.linear_model.RidgeCV.set_params"]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[672, "sklearn.linear_model.RidgeCV.set_score_request"]], "ridgeclassifier (class in sklearn.linear_model)": [[673, "sklearn.linear_model.RidgeClassifier"]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[673, "sklearn.linear_model.RidgeClassifier.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[673, "sklearn.linear_model.RidgeClassifier.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[673, "sklearn.linear_model.RidgeClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[673, "sklearn.linear_model.RidgeClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[673, "sklearn.linear_model.RidgeClassifier.get_params"]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[673, "sklearn.linear_model.RidgeClassifier.predict"]], "score() (sklearn.linear_model.ridgeclassifier method)": [[673, "sklearn.linear_model.RidgeClassifier.score"]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[673, "sklearn.linear_model.RidgeClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[673, "sklearn.linear_model.RidgeClassifier.set_params"]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[673, "sklearn.linear_model.RidgeClassifier.set_score_request"]], "ridgeclassifiercv (class in sklearn.linear_model)": [[674, "sklearn.linear_model.RidgeClassifierCV"]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[674, "sklearn.linear_model.RidgeClassifierCV.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[674, "sklearn.linear_model.RidgeClassifierCV.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[674, "sklearn.linear_model.RidgeClassifierCV.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[674, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[674, "sklearn.linear_model.RidgeClassifierCV.get_params"]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[674, "sklearn.linear_model.RidgeClassifierCV.predict"]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[674, "sklearn.linear_model.RidgeClassifierCV.score"]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[674, "sklearn.linear_model.RidgeClassifierCV.set_fit_request"]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[674, "sklearn.linear_model.RidgeClassifierCV.set_params"]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[674, "sklearn.linear_model.RidgeClassifierCV.set_score_request"]], "sgdclassifier (class in sklearn.linear_model)": [[675, "sklearn.linear_model.SGDClassifier"]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[675, "sklearn.linear_model.SGDClassifier.decision_function"]], "densify() (sklearn.linear_model.sgdclassifier method)": [[675, "sklearn.linear_model.SGDClassifier.densify"]], "fit() (sklearn.linear_model.sgdclassifier method)": [[675, "sklearn.linear_model.SGDClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[675, "sklearn.linear_model.SGDClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[675, "sklearn.linear_model.SGDClassifier.get_params"]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[675, "sklearn.linear_model.SGDClassifier.partial_fit"]], "predict() (sklearn.linear_model.sgdclassifier method)": [[675, "sklearn.linear_model.SGDClassifier.predict"]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[675, "sklearn.linear_model.SGDClassifier.predict_log_proba"]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[675, "sklearn.linear_model.SGDClassifier.predict_proba"]], "score() (sklearn.linear_model.sgdclassifier method)": [[675, "sklearn.linear_model.SGDClassifier.score"]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[675, "sklearn.linear_model.SGDClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[675, "sklearn.linear_model.SGDClassifier.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[675, "sklearn.linear_model.SGDClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[675, "sklearn.linear_model.SGDClassifier.set_score_request"]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[675, "sklearn.linear_model.SGDClassifier.sparsify"]], "sgdoneclasssvm (class in sklearn.linear_model)": [[676, "sklearn.linear_model.SGDOneClassSVM"]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[676, "sklearn.linear_model.SGDOneClassSVM.decision_function"]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[676, "sklearn.linear_model.SGDOneClassSVM.densify"]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[676, "sklearn.linear_model.SGDOneClassSVM.fit"]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[676, "sklearn.linear_model.SGDOneClassSVM.fit_predict"]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[676, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[676, "sklearn.linear_model.SGDOneClassSVM.get_params"]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[676, "sklearn.linear_model.SGDOneClassSVM.partial_fit"]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[676, "sklearn.linear_model.SGDOneClassSVM.predict"]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[676, "sklearn.linear_model.SGDOneClassSVM.score_samples"]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[676, "sklearn.linear_model.SGDOneClassSVM.set_fit_request"]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[676, "sklearn.linear_model.SGDOneClassSVM.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[676, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request"]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[676, "sklearn.linear_model.SGDOneClassSVM.sparsify"]], "sgdregressor (class in sklearn.linear_model)": [[677, "sklearn.linear_model.SGDRegressor"]], "densify() (sklearn.linear_model.sgdregressor method)": [[677, "sklearn.linear_model.SGDRegressor.densify"]], "fit() (sklearn.linear_model.sgdregressor method)": [[677, "sklearn.linear_model.SGDRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[677, "sklearn.linear_model.SGDRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdregressor method)": [[677, "sklearn.linear_model.SGDRegressor.get_params"]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[677, "sklearn.linear_model.SGDRegressor.partial_fit"]], "predict() (sklearn.linear_model.sgdregressor method)": [[677, "sklearn.linear_model.SGDRegressor.predict"]], "score() (sklearn.linear_model.sgdregressor method)": [[677, "sklearn.linear_model.SGDRegressor.score"]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[677, "sklearn.linear_model.SGDRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.sgdregressor method)": [[677, "sklearn.linear_model.SGDRegressor.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[677, "sklearn.linear_model.SGDRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[677, "sklearn.linear_model.SGDRegressor.set_score_request"]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[677, "sklearn.linear_model.SGDRegressor.sparsify"]], "theilsenregressor (class in sklearn.linear_model)": [[678, "sklearn.linear_model.TheilSenRegressor"]], "fit() (sklearn.linear_model.theilsenregressor method)": [[678, "sklearn.linear_model.TheilSenRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[678, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[678, "sklearn.linear_model.TheilSenRegressor.get_params"]], "predict() (sklearn.linear_model.theilsenregressor method)": [[678, "sklearn.linear_model.TheilSenRegressor.predict"]], "score() (sklearn.linear_model.theilsenregressor method)": [[678, "sklearn.linear_model.TheilSenRegressor.score"]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[678, "sklearn.linear_model.TheilSenRegressor.set_params"]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[678, "sklearn.linear_model.TheilSenRegressor.set_score_request"]], "tweedieregressor (class in sklearn.linear_model)": [[679, "sklearn.linear_model.TweedieRegressor"]], "fit() (sklearn.linear_model.tweedieregressor method)": [[679, "sklearn.linear_model.TweedieRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[679, "sklearn.linear_model.TweedieRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[679, "sklearn.linear_model.TweedieRegressor.get_params"]], "predict() (sklearn.linear_model.tweedieregressor method)": [[679, "sklearn.linear_model.TweedieRegressor.predict"]], "score() (sklearn.linear_model.tweedieregressor method)": [[679, "sklearn.linear_model.TweedieRegressor.score"]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[679, "sklearn.linear_model.TweedieRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[679, "sklearn.linear_model.TweedieRegressor.set_params"]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[679, "sklearn.linear_model.TweedieRegressor.set_score_request"]], "enet_path() (in module sklearn.linear_model)": [[680, "sklearn.linear_model.enet_path"]], "lars_path() (in module sklearn.linear_model)": [[681, "sklearn.linear_model.lars_path"]], "lars_path_gram() (in module sklearn.linear_model)": [[682, "sklearn.linear_model.lars_path_gram"]], "lasso_path() (in module sklearn.linear_model)": [[683, "sklearn.linear_model.lasso_path"]], "orthogonal_mp() (in module sklearn.linear_model)": [[684, "sklearn.linear_model.orthogonal_mp"]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[685, "sklearn.linear_model.orthogonal_mp_gram"]], "ridge_regression() (in module sklearn.linear_model)": [[686, "sklearn.linear_model.ridge_regression"]], "isomap (class in sklearn.manifold)": [[687, "sklearn.manifold.Isomap"]], "fit() (sklearn.manifold.isomap method)": [[687, "sklearn.manifold.Isomap.fit"]], "fit_transform() (sklearn.manifold.isomap method)": [[687, "sklearn.manifold.Isomap.fit_transform"]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[687, "sklearn.manifold.Isomap.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[687, "sklearn.manifold.Isomap.get_metadata_routing"]], "get_params() (sklearn.manifold.isomap method)": [[687, "sklearn.manifold.Isomap.get_params"]], "reconstruction_error() (sklearn.manifold.isomap method)": [[687, "sklearn.manifold.Isomap.reconstruction_error"]], "set_output() (sklearn.manifold.isomap method)": [[687, "sklearn.manifold.Isomap.set_output"]], "set_params() (sklearn.manifold.isomap method)": [[687, "sklearn.manifold.Isomap.set_params"]], "transform() (sklearn.manifold.isomap method)": [[687, "sklearn.manifold.Isomap.transform"]], "locallylinearembedding (class in sklearn.manifold)": [[688, "sklearn.manifold.LocallyLinearEmbedding"]], "fit() (sklearn.manifold.locallylinearembedding method)": [[688, "sklearn.manifold.LocallyLinearEmbedding.fit"]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[688, "sklearn.manifold.LocallyLinearEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[688, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[688, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing"]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[688, "sklearn.manifold.LocallyLinearEmbedding.get_params"]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[688, "sklearn.manifold.LocallyLinearEmbedding.set_output"]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[688, "sklearn.manifold.LocallyLinearEmbedding.set_params"]], "transform() (sklearn.manifold.locallylinearembedding method)": [[688, "sklearn.manifold.LocallyLinearEmbedding.transform"]], "mds (class in sklearn.manifold)": [[689, "sklearn.manifold.MDS"]], "fit() (sklearn.manifold.mds method)": [[689, "sklearn.manifold.MDS.fit"]], "fit_transform() (sklearn.manifold.mds method)": [[689, "sklearn.manifold.MDS.fit_transform"]], "get_metadata_routing() (sklearn.manifold.mds method)": [[689, "sklearn.manifold.MDS.get_metadata_routing"]], "get_params() (sklearn.manifold.mds method)": [[689, "sklearn.manifold.MDS.get_params"]], "set_fit_request() (sklearn.manifold.mds method)": [[689, "sklearn.manifold.MDS.set_fit_request"]], "set_params() (sklearn.manifold.mds method)": [[689, "sklearn.manifold.MDS.set_params"]], "spectralembedding (class in sklearn.manifold)": [[690, "sklearn.manifold.SpectralEmbedding"]], "fit() (sklearn.manifold.spectralembedding method)": [[690, "sklearn.manifold.SpectralEmbedding.fit"]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[690, "sklearn.manifold.SpectralEmbedding.fit_transform"]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[690, "sklearn.manifold.SpectralEmbedding.get_metadata_routing"]], "get_params() (sklearn.manifold.spectralembedding method)": [[690, "sklearn.manifold.SpectralEmbedding.get_params"]], "set_params() (sklearn.manifold.spectralembedding method)": [[690, "sklearn.manifold.SpectralEmbedding.set_params"]], "tsne (class in sklearn.manifold)": [[691, "sklearn.manifold.TSNE"]], "fit() (sklearn.manifold.tsne method)": [[691, "sklearn.manifold.TSNE.fit"]], "fit_transform() (sklearn.manifold.tsne method)": [[691, "sklearn.manifold.TSNE.fit_transform"]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[691, "sklearn.manifold.TSNE.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[691, "sklearn.manifold.TSNE.get_metadata_routing"]], "get_params() (sklearn.manifold.tsne method)": [[691, "sklearn.manifold.TSNE.get_params"]], "set_output() (sklearn.manifold.tsne method)": [[691, "sklearn.manifold.TSNE.set_output"]], "set_params() (sklearn.manifold.tsne method)": [[691, "sklearn.manifold.TSNE.set_params"]], "locally_linear_embedding() (in module sklearn.manifold)": [[692, "sklearn.manifold.locally_linear_embedding"]], "smacof() (in module sklearn.manifold)": [[693, "sklearn.manifold.smacof"]], "spectral_embedding() (in module sklearn.manifold)": [[694, "sklearn.manifold.spectral_embedding"]], "trustworthiness() (in module sklearn.manifold)": [[695, "sklearn.manifold.trustworthiness"]], "confusionmatrixdisplay (class in sklearn.metrics)": [[696, "sklearn.metrics.ConfusionMatrixDisplay"]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[696, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[696, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions"]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[696, "sklearn.metrics.ConfusionMatrixDisplay.plot"]], "detcurvedisplay (class in sklearn.metrics)": [[697, "sklearn.metrics.DetCurveDisplay"]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[697, "sklearn.metrics.DetCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[697, "sklearn.metrics.DetCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.detcurvedisplay method)": [[697, "sklearn.metrics.DetCurveDisplay.plot"]], "distancemetric (class in sklearn.metrics)": [[698, "sklearn.metrics.DistanceMetric"]], "get_metric() (sklearn.metrics.distancemetric class method)": [[698, "sklearn.metrics.DistanceMetric.get_metric"]], "precisionrecalldisplay (class in sklearn.metrics)": [[699, "sklearn.metrics.PrecisionRecallDisplay"]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[699, "sklearn.metrics.PrecisionRecallDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[699, "sklearn.metrics.PrecisionRecallDisplay.from_predictions"]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[699, "sklearn.metrics.PrecisionRecallDisplay.plot"]], "predictionerrordisplay (class in sklearn.metrics)": [[700, "sklearn.metrics.PredictionErrorDisplay"]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[700, "sklearn.metrics.PredictionErrorDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[700, "sklearn.metrics.PredictionErrorDisplay.from_predictions"]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[700, "sklearn.metrics.PredictionErrorDisplay.plot"]], "roccurvedisplay (class in sklearn.metrics)": [[701, "sklearn.metrics.RocCurveDisplay"]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[701, "sklearn.metrics.RocCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[701, "sklearn.metrics.RocCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.roccurvedisplay method)": [[701, "sklearn.metrics.RocCurveDisplay.plot"]], "accuracy_score() (in module sklearn.metrics)": [[702, "sklearn.metrics.accuracy_score"]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[703, "sklearn.metrics.adjusted_mutual_info_score"]], "adjusted_rand_score() (in module sklearn.metrics)": [[704, "sklearn.metrics.adjusted_rand_score"]], "auc() (in module sklearn.metrics)": [[705, "sklearn.metrics.auc"]], "average_precision_score() (in module sklearn.metrics)": [[706, "sklearn.metrics.average_precision_score"]], "balanced_accuracy_score() (in module sklearn.metrics)": [[707, "sklearn.metrics.balanced_accuracy_score"]], "brier_score_loss() (in module sklearn.metrics)": [[708, "sklearn.metrics.brier_score_loss"]], "calinski_harabasz_score() (in module sklearn.metrics)": [[709, "sklearn.metrics.calinski_harabasz_score"]], "check_scoring() (in module sklearn.metrics)": [[710, "sklearn.metrics.check_scoring"]], "class_likelihood_ratios() (in module sklearn.metrics)": [[711, "sklearn.metrics.class_likelihood_ratios"]], "classification_report() (in module sklearn.metrics)": [[712, "sklearn.metrics.classification_report"]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[713, "sklearn.metrics.cluster.contingency_matrix"]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[714, "sklearn.metrics.cluster.pair_confusion_matrix"]], "cohen_kappa_score() (in module sklearn.metrics)": [[715, "sklearn.metrics.cohen_kappa_score"]], "completeness_score() (in module sklearn.metrics)": [[716, "sklearn.metrics.completeness_score"]], "confusion_matrix() (in module sklearn.metrics)": [[717, "sklearn.metrics.confusion_matrix"]], "consensus_score() (in module sklearn.metrics)": [[718, "sklearn.metrics.consensus_score"]], "coverage_error() (in module sklearn.metrics)": [[719, "sklearn.metrics.coverage_error"]], "d2_absolute_error_score() (in module sklearn.metrics)": [[720, "sklearn.metrics.d2_absolute_error_score"]], "d2_pinball_score() (in module sklearn.metrics)": [[721, "sklearn.metrics.d2_pinball_score"]], "d2_tweedie_score() (in module sklearn.metrics)": [[722, "sklearn.metrics.d2_tweedie_score"]], "davies_bouldin_score() (in module sklearn.metrics)": [[723, "sklearn.metrics.davies_bouldin_score"]], "dcg_score() (in module sklearn.metrics)": [[724, "sklearn.metrics.dcg_score"]], "det_curve() (in module sklearn.metrics)": [[725, "sklearn.metrics.det_curve"]], "explained_variance_score() (in module sklearn.metrics)": [[726, "sklearn.metrics.explained_variance_score"]], "f1_score() (in module sklearn.metrics)": [[727, "sklearn.metrics.f1_score"]], "fbeta_score() (in module sklearn.metrics)": [[728, "sklearn.metrics.fbeta_score"]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[729, "sklearn.metrics.fowlkes_mallows_score"]], "get_scorer() (in module sklearn.metrics)": [[730, "sklearn.metrics.get_scorer"]], "get_scorer_names() (in module sklearn.metrics)": [[731, "sklearn.metrics.get_scorer_names"]], "hamming_loss() (in module sklearn.metrics)": [[732, "sklearn.metrics.hamming_loss"]], "hinge_loss() (in module sklearn.metrics)": [[733, "sklearn.metrics.hinge_loss"]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[734, "sklearn.metrics.homogeneity_completeness_v_measure"]], "homogeneity_score() (in module sklearn.metrics)": [[735, "sklearn.metrics.homogeneity_score"]], "jaccard_score() (in module sklearn.metrics)": [[736, "sklearn.metrics.jaccard_score"]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[737, "sklearn.metrics.label_ranking_average_precision_score"]], "label_ranking_loss() (in module sklearn.metrics)": [[738, "sklearn.metrics.label_ranking_loss"]], "log_loss() (in module sklearn.metrics)": [[739, "sklearn.metrics.log_loss"]], "make_scorer() (in module sklearn.metrics)": [[740, "sklearn.metrics.make_scorer"]], "matthews_corrcoef() (in module sklearn.metrics)": [[741, "sklearn.metrics.matthews_corrcoef"]], "max_error() (in module sklearn.metrics)": [[742, "sklearn.metrics.max_error"]], "mean_absolute_error() (in module sklearn.metrics)": [[743, "sklearn.metrics.mean_absolute_error"]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[744, "sklearn.metrics.mean_absolute_percentage_error"]], "mean_gamma_deviance() (in module sklearn.metrics)": [[745, "sklearn.metrics.mean_gamma_deviance"]], "mean_pinball_loss() (in module sklearn.metrics)": [[746, "sklearn.metrics.mean_pinball_loss"]], "mean_poisson_deviance() (in module sklearn.metrics)": [[747, "sklearn.metrics.mean_poisson_deviance"]], "mean_squared_error() (in module sklearn.metrics)": [[748, "sklearn.metrics.mean_squared_error"]], "mean_squared_log_error() (in module sklearn.metrics)": [[749, "sklearn.metrics.mean_squared_log_error"]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[750, "sklearn.metrics.mean_tweedie_deviance"]], "median_absolute_error() (in module sklearn.metrics)": [[751, "sklearn.metrics.median_absolute_error"]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[752, "sklearn.metrics.multilabel_confusion_matrix"]], "mutual_info_score() (in module sklearn.metrics)": [[753, "sklearn.metrics.mutual_info_score"]], "ndcg_score() (in module sklearn.metrics)": [[754, "sklearn.metrics.ndcg_score"]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[755, "sklearn.metrics.normalized_mutual_info_score"]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[756, "sklearn.metrics.pairwise.additive_chi2_kernel"]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[757, "sklearn.metrics.pairwise.chi2_kernel"]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[758, "sklearn.metrics.pairwise.cosine_distances"]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[759, "sklearn.metrics.pairwise.cosine_similarity"]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[760, "sklearn.metrics.pairwise.distance_metrics"]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[761, "sklearn.metrics.pairwise.euclidean_distances"]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[762, "sklearn.metrics.pairwise.haversine_distances"]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[763, "sklearn.metrics.pairwise.kernel_metrics"]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[764, "sklearn.metrics.pairwise.laplacian_kernel"]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[765, "sklearn.metrics.pairwise.linear_kernel"]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[766, "sklearn.metrics.pairwise.manhattan_distances"]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[767, "sklearn.metrics.pairwise.nan_euclidean_distances"]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[768, "sklearn.metrics.pairwise.paired_cosine_distances"]], "paired_distances() (in module sklearn.metrics.pairwise)": [[769, "sklearn.metrics.pairwise.paired_distances"]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[770, "sklearn.metrics.pairwise.paired_euclidean_distances"]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[771, "sklearn.metrics.pairwise.paired_manhattan_distances"]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[772, "sklearn.metrics.pairwise.pairwise_kernels"]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[773, "sklearn.metrics.pairwise.polynomial_kernel"]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[774, "sklearn.metrics.pairwise.rbf_kernel"]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[775, "sklearn.metrics.pairwise.sigmoid_kernel"]], "pairwise_distances() (in module sklearn.metrics)": [[776, "sklearn.metrics.pairwise_distances"]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[777, "sklearn.metrics.pairwise_distances_argmin"]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[778, "sklearn.metrics.pairwise_distances_argmin_min"]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[779, "sklearn.metrics.pairwise_distances_chunked"]], "precision_recall_curve() (in module sklearn.metrics)": [[780, "sklearn.metrics.precision_recall_curve"]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[781, "sklearn.metrics.precision_recall_fscore_support"]], "precision_score() (in module sklearn.metrics)": [[782, "sklearn.metrics.precision_score"]], "r2_score() (in module sklearn.metrics)": [[783, "sklearn.metrics.r2_score"]], "rand_score() (in module sklearn.metrics)": [[784, "sklearn.metrics.rand_score"]], "recall_score() (in module sklearn.metrics)": [[785, "sklearn.metrics.recall_score"]], "roc_auc_score() (in module sklearn.metrics)": [[786, "sklearn.metrics.roc_auc_score"]], "roc_curve() (in module sklearn.metrics)": [[787, "sklearn.metrics.roc_curve"]], "root_mean_squared_error() (in module sklearn.metrics)": [[788, "sklearn.metrics.root_mean_squared_error"]], "root_mean_squared_log_error() (in module sklearn.metrics)": [[789, "sklearn.metrics.root_mean_squared_log_error"]], "silhouette_samples() (in module sklearn.metrics)": [[790, "sklearn.metrics.silhouette_samples"]], "silhouette_score() (in module sklearn.metrics)": [[791, "sklearn.metrics.silhouette_score"]], "top_k_accuracy_score() (in module sklearn.metrics)": [[792, "sklearn.metrics.top_k_accuracy_score"]], "v_measure_score() (in module sklearn.metrics)": [[793, "sklearn.metrics.v_measure_score"]], "zero_one_loss() (in module sklearn.metrics)": [[794, "sklearn.metrics.zero_one_loss"]], "bayesiangaussianmixture (class in sklearn.mixture)": [[795, "sklearn.mixture.BayesianGaussianMixture"]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[795, "sklearn.mixture.BayesianGaussianMixture.fit"]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[795, "sklearn.mixture.BayesianGaussianMixture.fit_predict"]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[795, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing"]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[795, "sklearn.mixture.BayesianGaussianMixture.get_params"]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[795, "sklearn.mixture.BayesianGaussianMixture.predict"]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[795, "sklearn.mixture.BayesianGaussianMixture.predict_proba"]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[795, "sklearn.mixture.BayesianGaussianMixture.sample"]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[795, "sklearn.mixture.BayesianGaussianMixture.score"]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[795, "sklearn.mixture.BayesianGaussianMixture.score_samples"]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[795, "sklearn.mixture.BayesianGaussianMixture.set_params"]], "gaussianmixture (class in sklearn.mixture)": [[796, "sklearn.mixture.GaussianMixture"]], "aic() (sklearn.mixture.gaussianmixture method)": [[796, "sklearn.mixture.GaussianMixture.aic"]], "bic() (sklearn.mixture.gaussianmixture method)": [[796, "sklearn.mixture.GaussianMixture.bic"]], "fit() (sklearn.mixture.gaussianmixture method)": [[796, "sklearn.mixture.GaussianMixture.fit"]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[796, "sklearn.mixture.GaussianMixture.fit_predict"]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[796, "sklearn.mixture.GaussianMixture.get_metadata_routing"]], "get_params() (sklearn.mixture.gaussianmixture method)": [[796, "sklearn.mixture.GaussianMixture.get_params"]], "predict() (sklearn.mixture.gaussianmixture method)": [[796, "sklearn.mixture.GaussianMixture.predict"]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[796, "sklearn.mixture.GaussianMixture.predict_proba"]], "sample() (sklearn.mixture.gaussianmixture method)": [[796, "sklearn.mixture.GaussianMixture.sample"]], "score() (sklearn.mixture.gaussianmixture method)": [[796, "sklearn.mixture.GaussianMixture.score"]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[796, "sklearn.mixture.GaussianMixture.score_samples"]], "set_params() (sklearn.mixture.gaussianmixture method)": [[796, "sklearn.mixture.GaussianMixture.set_params"]], "gridsearchcv (class in sklearn.model_selection)": [[797, "sklearn.model_selection.GridSearchCV"]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[797, "sklearn.model_selection.GridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[797, "sklearn.model_selection.GridSearchCV.decision_function"]], "fit() (sklearn.model_selection.gridsearchcv method)": [[797, "sklearn.model_selection.GridSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[797, "sklearn.model_selection.GridSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[797, "sklearn.model_selection.GridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[797, "sklearn.model_selection.GridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[797, "sklearn.model_selection.GridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.gridsearchcv method)": [[797, "sklearn.model_selection.GridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[797, "sklearn.model_selection.GridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[797, "sklearn.model_selection.GridSearchCV.predict_proba"]], "score() (sklearn.model_selection.gridsearchcv method)": [[797, "sklearn.model_selection.GridSearchCV.score"]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[797, "sklearn.model_selection.GridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[797, "sklearn.model_selection.GridSearchCV.set_params"]], "transform() (sklearn.model_selection.gridsearchcv method)": [[797, "sklearn.model_selection.GridSearchCV.transform"]], "groupkfold (class in sklearn.model_selection)": [[798, "sklearn.model_selection.GroupKFold"]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[798, "sklearn.model_selection.GroupKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[798, "sklearn.model_selection.GroupKFold.get_n_splits"]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[798, "sklearn.model_selection.GroupKFold.set_split_request"]], "split() (sklearn.model_selection.groupkfold method)": [[798, "sklearn.model_selection.GroupKFold.split"]], "groupshufflesplit (class in sklearn.model_selection)": [[799, "sklearn.model_selection.GroupShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[799, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[799, "sklearn.model_selection.GroupShuffleSplit.get_n_splits"]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[799, "sklearn.model_selection.GroupShuffleSplit.set_split_request"]], "split() (sklearn.model_selection.groupshufflesplit method)": [[799, "sklearn.model_selection.GroupShuffleSplit.split"]], "halvinggridsearchcv (class in sklearn.model_selection)": [[800, "sklearn.model_selection.HalvingGridSearchCV"]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[800, "sklearn.model_selection.HalvingGridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[800, "sklearn.model_selection.HalvingGridSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[800, "sklearn.model_selection.HalvingGridSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[800, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[800, "sklearn.model_selection.HalvingGridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[800, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[800, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[800, "sklearn.model_selection.HalvingGridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[800, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[800, "sklearn.model_selection.HalvingGridSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[800, "sklearn.model_selection.HalvingGridSearchCV.score"]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[800, "sklearn.model_selection.HalvingGridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[800, "sklearn.model_selection.HalvingGridSearchCV.set_params"]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[800, "sklearn.model_selection.HalvingGridSearchCV.transform"]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[801, "sklearn.model_selection.HalvingRandomSearchCV"]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[801, "sklearn.model_selection.HalvingRandomSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[801, "sklearn.model_selection.HalvingRandomSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[801, "sklearn.model_selection.HalvingRandomSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[801, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[801, "sklearn.model_selection.HalvingRandomSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[801, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[801, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[801, "sklearn.model_selection.HalvingRandomSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[801, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[801, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[801, "sklearn.model_selection.HalvingRandomSearchCV.score"]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[801, "sklearn.model_selection.HalvingRandomSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[801, "sklearn.model_selection.HalvingRandomSearchCV.set_params"]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[801, "sklearn.model_selection.HalvingRandomSearchCV.transform"]], "kfold (class in sklearn.model_selection)": [[802, "sklearn.model_selection.KFold"]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[802, "sklearn.model_selection.KFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.kfold method)": [[802, "sklearn.model_selection.KFold.get_n_splits"]], "split() (sklearn.model_selection.kfold method)": [[802, "sklearn.model_selection.KFold.split"]], "learningcurvedisplay (class in sklearn.model_selection)": [[803, "sklearn.model_selection.LearningCurveDisplay"]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[803, "sklearn.model_selection.LearningCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[803, "sklearn.model_selection.LearningCurveDisplay.plot"]], "leaveonegroupout (class in sklearn.model_selection)": [[804, "sklearn.model_selection.LeaveOneGroupOut"]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[804, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[804, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits"]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[804, "sklearn.model_selection.LeaveOneGroupOut.set_split_request"]], "split() (sklearn.model_selection.leaveonegroupout method)": [[804, "sklearn.model_selection.LeaveOneGroupOut.split"]], "leaveoneout (class in sklearn.model_selection)": [[805, "sklearn.model_selection.LeaveOneOut"]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[805, "sklearn.model_selection.LeaveOneOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[805, "sklearn.model_selection.LeaveOneOut.get_n_splits"]], "split() (sklearn.model_selection.leaveoneout method)": [[805, "sklearn.model_selection.LeaveOneOut.split"]], "leavepgroupsout (class in sklearn.model_selection)": [[806, "sklearn.model_selection.LeavePGroupsOut"]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[806, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[806, "sklearn.model_selection.LeavePGroupsOut.get_n_splits"]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[806, "sklearn.model_selection.LeavePGroupsOut.set_split_request"]], "split() (sklearn.model_selection.leavepgroupsout method)": [[806, "sklearn.model_selection.LeavePGroupsOut.split"]], "leavepout (class in sklearn.model_selection)": [[807, "sklearn.model_selection.LeavePOut"]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[807, "sklearn.model_selection.LeavePOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[807, "sklearn.model_selection.LeavePOut.get_n_splits"]], "split() (sklearn.model_selection.leavepout method)": [[807, "sklearn.model_selection.LeavePOut.split"]], "parametergrid (class in sklearn.model_selection)": [[808, "sklearn.model_selection.ParameterGrid"]], "parametersampler (class in sklearn.model_selection)": [[809, "sklearn.model_selection.ParameterSampler"]], "predefinedsplit (class in sklearn.model_selection)": [[810, "sklearn.model_selection.PredefinedSplit"]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[810, "sklearn.model_selection.PredefinedSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[810, "sklearn.model_selection.PredefinedSplit.get_n_splits"]], "split() (sklearn.model_selection.predefinedsplit method)": [[810, "sklearn.model_selection.PredefinedSplit.split"]], "randomizedsearchcv (class in sklearn.model_selection)": [[811, "sklearn.model_selection.RandomizedSearchCV"]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[811, "sklearn.model_selection.RandomizedSearchCV.classes_"]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[811, "sklearn.model_selection.RandomizedSearchCV.decision_function"]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[811, "sklearn.model_selection.RandomizedSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[811, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[811, "sklearn.model_selection.RandomizedSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[811, "sklearn.model_selection.RandomizedSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[811, "sklearn.model_selection.RandomizedSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[811, "sklearn.model_selection.RandomizedSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[811, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[811, "sklearn.model_selection.RandomizedSearchCV.predict_proba"]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[811, "sklearn.model_selection.RandomizedSearchCV.score"]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[811, "sklearn.model_selection.RandomizedSearchCV.score_samples"]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[811, "sklearn.model_selection.RandomizedSearchCV.set_params"]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[811, "sklearn.model_selection.RandomizedSearchCV.transform"]], "repeatedkfold (class in sklearn.model_selection)": [[812, "sklearn.model_selection.RepeatedKFold"]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[812, "sklearn.model_selection.RepeatedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[812, "sklearn.model_selection.RepeatedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedkfold method)": [[812, "sklearn.model_selection.RepeatedKFold.split"]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[813, "sklearn.model_selection.RepeatedStratifiedKFold"]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[813, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[813, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[813, "sklearn.model_selection.RepeatedStratifiedKFold.split"]], "shufflesplit (class in sklearn.model_selection)": [[814, "sklearn.model_selection.ShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[814, "sklearn.model_selection.ShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[814, "sklearn.model_selection.ShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.shufflesplit method)": [[814, "sklearn.model_selection.ShuffleSplit.split"]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[815, "sklearn.model_selection.StratifiedGroupKFold"]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[815, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[815, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits"]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[815, "sklearn.model_selection.StratifiedGroupKFold.set_split_request"]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[815, "sklearn.model_selection.StratifiedGroupKFold.split"]], "stratifiedkfold (class in sklearn.model_selection)": [[816, "sklearn.model_selection.StratifiedKFold"]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[816, "sklearn.model_selection.StratifiedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[816, "sklearn.model_selection.StratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedkfold method)": [[816, "sklearn.model_selection.StratifiedKFold.split"]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[817, "sklearn.model_selection.StratifiedShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[817, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[817, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[817, "sklearn.model_selection.StratifiedShuffleSplit.split"]], "timeseriessplit (class in sklearn.model_selection)": [[818, "sklearn.model_selection.TimeSeriesSplit"]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[818, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[818, "sklearn.model_selection.TimeSeriesSplit.get_n_splits"]], "split() (sklearn.model_selection.timeseriessplit method)": [[818, "sklearn.model_selection.TimeSeriesSplit.split"]], "validationcurvedisplay (class in sklearn.model_selection)": [[819, "sklearn.model_selection.ValidationCurveDisplay"]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[819, "sklearn.model_selection.ValidationCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[819, "sklearn.model_selection.ValidationCurveDisplay.plot"]], "check_cv() (in module sklearn.model_selection)": [[820, "sklearn.model_selection.check_cv"]], "cross_val_predict() (in module sklearn.model_selection)": [[821, "sklearn.model_selection.cross_val_predict"]], "cross_val_score() (in module sklearn.model_selection)": [[822, "sklearn.model_selection.cross_val_score"]], "cross_validate() (in module sklearn.model_selection)": [[823, "sklearn.model_selection.cross_validate"]], "learning_curve() (in module sklearn.model_selection)": [[824, "sklearn.model_selection.learning_curve"]], "permutation_test_score() (in module sklearn.model_selection)": [[825, "sklearn.model_selection.permutation_test_score"]], "train_test_split() (in module sklearn.model_selection)": [[826, "sklearn.model_selection.train_test_split"]], "validation_curve() (in module sklearn.model_selection)": [[827, "sklearn.model_selection.validation_curve"]], "onevsoneclassifier (class in sklearn.multiclass)": [[828, "sklearn.multiclass.OneVsOneClassifier"]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[828, "sklearn.multiclass.OneVsOneClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[828, "sklearn.multiclass.OneVsOneClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[828, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[828, "sklearn.multiclass.OneVsOneClassifier.get_params"]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[828, "sklearn.multiclass.OneVsOneClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[828, "sklearn.multiclass.OneVsOneClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[828, "sklearn.multiclass.OneVsOneClassifier.predict"]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[828, "sklearn.multiclass.OneVsOneClassifier.score"]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[828, "sklearn.multiclass.OneVsOneClassifier.set_params"]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[828, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[828, "sklearn.multiclass.OneVsOneClassifier.set_score_request"]], "onevsrestclassifier (class in sklearn.multiclass)": [[829, "sklearn.multiclass.OneVsRestClassifier"]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[829, "sklearn.multiclass.OneVsRestClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[829, "sklearn.multiclass.OneVsRestClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[829, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[829, "sklearn.multiclass.OneVsRestClassifier.get_params"]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[829, "sklearn.multiclass.OneVsRestClassifier.multilabel_"]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[829, "sklearn.multiclass.OneVsRestClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[829, "sklearn.multiclass.OneVsRestClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[829, "sklearn.multiclass.OneVsRestClassifier.predict"]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[829, "sklearn.multiclass.OneVsRestClassifier.predict_proba"]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[829, "sklearn.multiclass.OneVsRestClassifier.score"]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[829, "sklearn.multiclass.OneVsRestClassifier.set_params"]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[829, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[829, "sklearn.multiclass.OneVsRestClassifier.set_score_request"]], "outputcodeclassifier (class in sklearn.multiclass)": [[830, "sklearn.multiclass.OutputCodeClassifier"]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[830, "sklearn.multiclass.OutputCodeClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[830, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[830, "sklearn.multiclass.OutputCodeClassifier.get_params"]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[830, "sklearn.multiclass.OutputCodeClassifier.predict"]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[830, "sklearn.multiclass.OutputCodeClassifier.score"]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[830, "sklearn.multiclass.OutputCodeClassifier.set_params"]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[830, "sklearn.multiclass.OutputCodeClassifier.set_score_request"]], "classifierchain (class in sklearn.multioutput)": [[831, "sklearn.multioutput.ClassifierChain"]], "decision_function() (sklearn.multioutput.classifierchain method)": [[831, "sklearn.multioutput.ClassifierChain.decision_function"]], "fit() (sklearn.multioutput.classifierchain method)": [[831, "sklearn.multioutput.ClassifierChain.fit"]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[831, "sklearn.multioutput.ClassifierChain.get_metadata_routing"]], "get_params() (sklearn.multioutput.classifierchain method)": [[831, "sklearn.multioutput.ClassifierChain.get_params"]], "predict() (sklearn.multioutput.classifierchain method)": [[831, "sklearn.multioutput.ClassifierChain.predict"]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[831, "sklearn.multioutput.ClassifierChain.predict_proba"]], "score() (sklearn.multioutput.classifierchain method)": [[831, "sklearn.multioutput.ClassifierChain.score"]], "set_params() (sklearn.multioutput.classifierchain method)": [[831, "sklearn.multioutput.ClassifierChain.set_params"]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[831, "sklearn.multioutput.ClassifierChain.set_score_request"]], "multioutputclassifier (class in sklearn.multioutput)": [[832, "sklearn.multioutput.MultiOutputClassifier"]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[832, "sklearn.multioutput.MultiOutputClassifier.fit"]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[832, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing"]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[832, "sklearn.multioutput.MultiOutputClassifier.get_params"]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[832, "sklearn.multioutput.MultiOutputClassifier.partial_fit"]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[832, "sklearn.multioutput.MultiOutputClassifier.predict"]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[832, "sklearn.multioutput.MultiOutputClassifier.predict_proba"]], "score() (sklearn.multioutput.multioutputclassifier method)": [[832, "sklearn.multioutput.MultiOutputClassifier.score"]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[832, "sklearn.multioutput.MultiOutputClassifier.set_fit_request"]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[832, "sklearn.multioutput.MultiOutputClassifier.set_params"]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[832, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request"]], "multioutputregressor (class in sklearn.multioutput)": [[833, "sklearn.multioutput.MultiOutputRegressor"]], "fit() (sklearn.multioutput.multioutputregressor method)": [[833, "sklearn.multioutput.MultiOutputRegressor.fit"]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[833, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing"]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[833, "sklearn.multioutput.MultiOutputRegressor.get_params"]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[833, "sklearn.multioutput.MultiOutputRegressor.partial_fit"]], "predict() (sklearn.multioutput.multioutputregressor method)": [[833, "sklearn.multioutput.MultiOutputRegressor.predict"]], "score() (sklearn.multioutput.multioutputregressor method)": [[833, "sklearn.multioutput.MultiOutputRegressor.score"]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[833, "sklearn.multioutput.MultiOutputRegressor.set_fit_request"]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[833, "sklearn.multioutput.MultiOutputRegressor.set_params"]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[833, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[833, "sklearn.multioutput.MultiOutputRegressor.set_score_request"]], "regressorchain (class in sklearn.multioutput)": [[834, "sklearn.multioutput.RegressorChain"]], "fit() (sklearn.multioutput.regressorchain method)": [[834, "sklearn.multioutput.RegressorChain.fit"]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[834, "sklearn.multioutput.RegressorChain.get_metadata_routing"]], "get_params() (sklearn.multioutput.regressorchain method)": [[834, "sklearn.multioutput.RegressorChain.get_params"]], "predict() (sklearn.multioutput.regressorchain method)": [[834, "sklearn.multioutput.RegressorChain.predict"]], "score() (sklearn.multioutput.regressorchain method)": [[834, "sklearn.multioutput.RegressorChain.score"]], "set_params() (sklearn.multioutput.regressorchain method)": [[834, "sklearn.multioutput.RegressorChain.set_params"]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[834, "sklearn.multioutput.RegressorChain.set_score_request"]], "bernoullinb (class in sklearn.naive_bayes)": [[835, "sklearn.naive_bayes.BernoulliNB"]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[835, "sklearn.naive_bayes.BernoulliNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[835, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[835, "sklearn.naive_bayes.BernoulliNB.get_params"]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[835, "sklearn.naive_bayes.BernoulliNB.partial_fit"]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[835, "sklearn.naive_bayes.BernoulliNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[835, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[835, "sklearn.naive_bayes.BernoulliNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[835, "sklearn.naive_bayes.BernoulliNB.predict_proba"]], "score() (sklearn.naive_bayes.bernoullinb method)": [[835, "sklearn.naive_bayes.BernoulliNB.score"]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[835, "sklearn.naive_bayes.BernoulliNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[835, "sklearn.naive_bayes.BernoulliNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[835, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[835, "sklearn.naive_bayes.BernoulliNB.set_score_request"]], "categoricalnb (class in sklearn.naive_bayes)": [[836, "sklearn.naive_bayes.CategoricalNB"]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[836, "sklearn.naive_bayes.CategoricalNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[836, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[836, "sklearn.naive_bayes.CategoricalNB.get_params"]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[836, "sklearn.naive_bayes.CategoricalNB.partial_fit"]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[836, "sklearn.naive_bayes.CategoricalNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[836, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[836, "sklearn.naive_bayes.CategoricalNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[836, "sklearn.naive_bayes.CategoricalNB.predict_proba"]], "score() (sklearn.naive_bayes.categoricalnb method)": [[836, "sklearn.naive_bayes.CategoricalNB.score"]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[836, "sklearn.naive_bayes.CategoricalNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[836, "sklearn.naive_bayes.CategoricalNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[836, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[836, "sklearn.naive_bayes.CategoricalNB.set_score_request"]], "complementnb (class in sklearn.naive_bayes)": [[837, "sklearn.naive_bayes.ComplementNB"]], "fit() (sklearn.naive_bayes.complementnb method)": [[837, "sklearn.naive_bayes.ComplementNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[837, "sklearn.naive_bayes.ComplementNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.complementnb method)": [[837, "sklearn.naive_bayes.ComplementNB.get_params"]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[837, "sklearn.naive_bayes.ComplementNB.partial_fit"]], "predict() (sklearn.naive_bayes.complementnb method)": [[837, "sklearn.naive_bayes.ComplementNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[837, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[837, "sklearn.naive_bayes.ComplementNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[837, "sklearn.naive_bayes.ComplementNB.predict_proba"]], "score() (sklearn.naive_bayes.complementnb method)": [[837, "sklearn.naive_bayes.ComplementNB.score"]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[837, "sklearn.naive_bayes.ComplementNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.complementnb method)": [[837, "sklearn.naive_bayes.ComplementNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[837, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[837, "sklearn.naive_bayes.ComplementNB.set_score_request"]], "gaussiannb (class in sklearn.naive_bayes)": [[838, "sklearn.naive_bayes.GaussianNB"]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[838, "sklearn.naive_bayes.GaussianNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[838, "sklearn.naive_bayes.GaussianNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[838, "sklearn.naive_bayes.GaussianNB.get_params"]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[838, "sklearn.naive_bayes.GaussianNB.partial_fit"]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[838, "sklearn.naive_bayes.GaussianNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[838, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[838, "sklearn.naive_bayes.GaussianNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[838, "sklearn.naive_bayes.GaussianNB.predict_proba"]], "score() (sklearn.naive_bayes.gaussiannb method)": [[838, "sklearn.naive_bayes.GaussianNB.score"]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[838, "sklearn.naive_bayes.GaussianNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[838, "sklearn.naive_bayes.GaussianNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[838, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[838, "sklearn.naive_bayes.GaussianNB.set_score_request"]], "multinomialnb (class in sklearn.naive_bayes)": [[839, "sklearn.naive_bayes.MultinomialNB"]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[839, "sklearn.naive_bayes.MultinomialNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[839, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[839, "sklearn.naive_bayes.MultinomialNB.get_params"]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[839, "sklearn.naive_bayes.MultinomialNB.partial_fit"]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[839, "sklearn.naive_bayes.MultinomialNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[839, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[839, "sklearn.naive_bayes.MultinomialNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[839, "sklearn.naive_bayes.MultinomialNB.predict_proba"]], "score() (sklearn.naive_bayes.multinomialnb method)": [[839, "sklearn.naive_bayes.MultinomialNB.score"]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[839, "sklearn.naive_bayes.MultinomialNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[839, "sklearn.naive_bayes.MultinomialNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[839, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[839, "sklearn.naive_bayes.MultinomialNB.set_score_request"]], "balltree (class in sklearn.neighbors)": [[840, "sklearn.neighbors.BallTree"]], "get_arrays() (sklearn.neighbors.balltree method)": [[840, "sklearn.neighbors.BallTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.balltree method)": [[840, "sklearn.neighbors.BallTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[840, "sklearn.neighbors.BallTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.balltree method)": [[840, "sklearn.neighbors.BallTree.kernel_density"]], "query() (sklearn.neighbors.balltree method)": [[840, "sklearn.neighbors.BallTree.query"]], "query_radius() (sklearn.neighbors.balltree method)": [[840, "sklearn.neighbors.BallTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[840, "sklearn.neighbors.BallTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[840, "sklearn.neighbors.BallTree.two_point_correlation"]], "kdtree (class in sklearn.neighbors)": [[841, "sklearn.neighbors.KDTree"]], "get_arrays() (sklearn.neighbors.kdtree method)": [[841, "sklearn.neighbors.KDTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[841, "sklearn.neighbors.KDTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[841, "sklearn.neighbors.KDTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.kdtree method)": [[841, "sklearn.neighbors.KDTree.kernel_density"]], "query() (sklearn.neighbors.kdtree method)": [[841, "sklearn.neighbors.KDTree.query"]], "query_radius() (sklearn.neighbors.kdtree method)": [[841, "sklearn.neighbors.KDTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[841, "sklearn.neighbors.KDTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[841, "sklearn.neighbors.KDTree.two_point_correlation"]], "kneighborsclassifier (class in sklearn.neighbors)": [[842, "sklearn.neighbors.KNeighborsClassifier"]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[842, "sklearn.neighbors.KNeighborsClassifier.fit"]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[842, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[842, "sklearn.neighbors.KNeighborsClassifier.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[842, "sklearn.neighbors.KNeighborsClassifier.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[842, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[842, "sklearn.neighbors.KNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[842, "sklearn.neighbors.KNeighborsClassifier.predict_proba"]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[842, "sklearn.neighbors.KNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[842, "sklearn.neighbors.KNeighborsClassifier.set_params"]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[842, "sklearn.neighbors.KNeighborsClassifier.set_score_request"]], "kneighborsregressor (class in sklearn.neighbors)": [[843, "sklearn.neighbors.KNeighborsRegressor"]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[843, "sklearn.neighbors.KNeighborsRegressor.fit"]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[843, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[843, "sklearn.neighbors.KNeighborsRegressor.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[843, "sklearn.neighbors.KNeighborsRegressor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[843, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[843, "sklearn.neighbors.KNeighborsRegressor.predict"]], "score() (sklearn.neighbors.kneighborsregressor method)": [[843, "sklearn.neighbors.KNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[843, "sklearn.neighbors.KNeighborsRegressor.set_params"]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[843, "sklearn.neighbors.KNeighborsRegressor.set_score_request"]], "kneighborstransformer (class in sklearn.neighbors)": [[844, "sklearn.neighbors.KNeighborsTransformer"]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[844, "sklearn.neighbors.KNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[844, "sklearn.neighbors.KNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[844, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[844, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[844, "sklearn.neighbors.KNeighborsTransformer.get_params"]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[844, "sklearn.neighbors.KNeighborsTransformer.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[844, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph"]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[844, "sklearn.neighbors.KNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[844, "sklearn.neighbors.KNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[844, "sklearn.neighbors.KNeighborsTransformer.transform"]], "kerneldensity (class in sklearn.neighbors)": [[845, "sklearn.neighbors.KernelDensity"]], "fit() (sklearn.neighbors.kerneldensity method)": [[845, "sklearn.neighbors.KernelDensity.fit"]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[845, "sklearn.neighbors.KernelDensity.get_metadata_routing"]], "get_params() (sklearn.neighbors.kerneldensity method)": [[845, "sklearn.neighbors.KernelDensity.get_params"]], "sample() (sklearn.neighbors.kerneldensity method)": [[845, "sklearn.neighbors.KernelDensity.sample"]], "score() (sklearn.neighbors.kerneldensity method)": [[845, "sklearn.neighbors.KernelDensity.score"]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[845, "sklearn.neighbors.KernelDensity.score_samples"]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[845, "sklearn.neighbors.KernelDensity.set_fit_request"]], "set_params() (sklearn.neighbors.kerneldensity method)": [[845, "sklearn.neighbors.KernelDensity.set_params"]], "localoutlierfactor (class in sklearn.neighbors)": [[846, "sklearn.neighbors.LocalOutlierFactor"]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[846, "sklearn.neighbors.LocalOutlierFactor.decision_function"]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[846, "sklearn.neighbors.LocalOutlierFactor.fit"]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[846, "sklearn.neighbors.LocalOutlierFactor.fit_predict"]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[846, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing"]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[846, "sklearn.neighbors.LocalOutlierFactor.get_params"]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[846, "sklearn.neighbors.LocalOutlierFactor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[846, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph"]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[846, "sklearn.neighbors.LocalOutlierFactor.predict"]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[846, "sklearn.neighbors.LocalOutlierFactor.score_samples"]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[846, "sklearn.neighbors.LocalOutlierFactor.set_params"]], "nearestcentroid (class in sklearn.neighbors)": [[847, "sklearn.neighbors.NearestCentroid"]], "fit() (sklearn.neighbors.nearestcentroid method)": [[847, "sklearn.neighbors.NearestCentroid.fit"]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[847, "sklearn.neighbors.NearestCentroid.get_metadata_routing"]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[847, "sklearn.neighbors.NearestCentroid.get_params"]], "predict() (sklearn.neighbors.nearestcentroid method)": [[847, "sklearn.neighbors.NearestCentroid.predict"]], "score() (sklearn.neighbors.nearestcentroid method)": [[847, "sklearn.neighbors.NearestCentroid.score"]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[847, "sklearn.neighbors.NearestCentroid.set_params"]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[847, "sklearn.neighbors.NearestCentroid.set_score_request"]], "nearestneighbors (class in sklearn.neighbors)": [[848, "sklearn.neighbors.NearestNeighbors"]], "fit() (sklearn.neighbors.nearestneighbors method)": [[848, "sklearn.neighbors.NearestNeighbors.fit"]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[848, "sklearn.neighbors.NearestNeighbors.get_metadata_routing"]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[848, "sklearn.neighbors.NearestNeighbors.get_params"]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[848, "sklearn.neighbors.NearestNeighbors.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[848, "sklearn.neighbors.NearestNeighbors.kneighbors_graph"]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[848, "sklearn.neighbors.NearestNeighbors.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[848, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph"]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[848, "sklearn.neighbors.NearestNeighbors.set_params"]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[849, "sklearn.neighbors.NeighborhoodComponentsAnalysis"]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[849, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit"]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[849, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[849, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[849, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing"]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[849, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params"]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[849, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output"]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[849, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params"]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[849, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform"]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[850, "sklearn.neighbors.RadiusNeighborsClassifier"]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[850, "sklearn.neighbors.RadiusNeighborsClassifier.fit"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[850, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[850, "sklearn.neighbors.RadiusNeighborsClassifier.get_params"]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[850, "sklearn.neighbors.RadiusNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[850, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[850, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[850, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[850, "sklearn.neighbors.RadiusNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[850, "sklearn.neighbors.RadiusNeighborsClassifier.set_params"]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[850, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request"]], "radiusneighborsregressor (class in sklearn.neighbors)": [[851, "sklearn.neighbors.RadiusNeighborsRegressor"]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[851, "sklearn.neighbors.RadiusNeighborsRegressor.fit"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[851, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[851, "sklearn.neighbors.RadiusNeighborsRegressor.get_params"]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[851, "sklearn.neighbors.RadiusNeighborsRegressor.predict"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[851, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[851, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[851, "sklearn.neighbors.RadiusNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[851, "sklearn.neighbors.RadiusNeighborsRegressor.set_params"]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[851, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request"]], "radiusneighborstransformer (class in sklearn.neighbors)": [[852, "sklearn.neighbors.RadiusNeighborsTransformer"]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[852, "sklearn.neighbors.RadiusNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[852, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[852, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[852, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[852, "sklearn.neighbors.RadiusNeighborsTransformer.get_params"]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[852, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[852, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph"]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[852, "sklearn.neighbors.RadiusNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[852, "sklearn.neighbors.RadiusNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[852, "sklearn.neighbors.RadiusNeighborsTransformer.transform"]], "kneighbors_graph() (in module sklearn.neighbors)": [[853, "sklearn.neighbors.kneighbors_graph"]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[854, "sklearn.neighbors.radius_neighbors_graph"]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[855, "sklearn.neighbors.sort_graph_by_row_values"]], "bernoullirbm (class in sklearn.neural_network)": [[856, "sklearn.neural_network.BernoulliRBM"]], "fit() (sklearn.neural_network.bernoullirbm method)": [[856, "sklearn.neural_network.BernoulliRBM.fit"]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[856, "sklearn.neural_network.BernoulliRBM.fit_transform"]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[856, "sklearn.neural_network.BernoulliRBM.get_feature_names_out"]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[856, "sklearn.neural_network.BernoulliRBM.get_metadata_routing"]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[856, "sklearn.neural_network.BernoulliRBM.get_params"]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[856, "sklearn.neural_network.BernoulliRBM.gibbs"]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[856, "sklearn.neural_network.BernoulliRBM.partial_fit"]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[856, "sklearn.neural_network.BernoulliRBM.score_samples"]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[856, "sklearn.neural_network.BernoulliRBM.set_output"]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[856, "sklearn.neural_network.BernoulliRBM.set_params"]], "transform() (sklearn.neural_network.bernoullirbm method)": [[856, "sklearn.neural_network.BernoulliRBM.transform"]], "mlpclassifier (class in sklearn.neural_network)": [[857, "sklearn.neural_network.MLPClassifier"]], "fit() (sklearn.neural_network.mlpclassifier method)": [[857, "sklearn.neural_network.MLPClassifier.fit"]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[857, "sklearn.neural_network.MLPClassifier.get_metadata_routing"]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[857, "sklearn.neural_network.MLPClassifier.get_params"]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[857, "sklearn.neural_network.MLPClassifier.partial_fit"]], "predict() (sklearn.neural_network.mlpclassifier method)": [[857, "sklearn.neural_network.MLPClassifier.predict"]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[857, "sklearn.neural_network.MLPClassifier.predict_log_proba"]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[857, "sklearn.neural_network.MLPClassifier.predict_proba"]], "score() (sklearn.neural_network.mlpclassifier method)": [[857, "sklearn.neural_network.MLPClassifier.score"]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[857, "sklearn.neural_network.MLPClassifier.set_params"]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[857, "sklearn.neural_network.MLPClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[857, "sklearn.neural_network.MLPClassifier.set_score_request"]], "mlpregressor (class in sklearn.neural_network)": [[858, "sklearn.neural_network.MLPRegressor"]], "fit() (sklearn.neural_network.mlpregressor method)": [[858, "sklearn.neural_network.MLPRegressor.fit"]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[858, "sklearn.neural_network.MLPRegressor.get_metadata_routing"]], "get_params() (sklearn.neural_network.mlpregressor method)": [[858, "sklearn.neural_network.MLPRegressor.get_params"]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[858, "sklearn.neural_network.MLPRegressor.partial_fit"]], "predict() (sklearn.neural_network.mlpregressor method)": [[858, "sklearn.neural_network.MLPRegressor.predict"]], "score() (sklearn.neural_network.mlpregressor method)": [[858, "sklearn.neural_network.MLPRegressor.score"]], "set_params() (sklearn.neural_network.mlpregressor method)": [[858, "sklearn.neural_network.MLPRegressor.set_params"]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[858, "sklearn.neural_network.MLPRegressor.set_score_request"]], "featureunion (class in sklearn.pipeline)": [[859, "sklearn.pipeline.FeatureUnion"]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[859, "sklearn.pipeline.FeatureUnion.feature_names_in_"]], "fit() (sklearn.pipeline.featureunion method)": [[859, "sklearn.pipeline.FeatureUnion.fit"]], "fit_transform() (sklearn.pipeline.featureunion method)": [[859, "sklearn.pipeline.FeatureUnion.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[859, "sklearn.pipeline.FeatureUnion.get_feature_names_out"]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[859, "sklearn.pipeline.FeatureUnion.get_metadata_routing"]], "get_params() (sklearn.pipeline.featureunion method)": [[859, "sklearn.pipeline.FeatureUnion.get_params"]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[859, "sklearn.pipeline.FeatureUnion.n_features_in_"]], "set_output() (sklearn.pipeline.featureunion method)": [[859, "sklearn.pipeline.FeatureUnion.set_output"]], "set_params() (sklearn.pipeline.featureunion method)": [[859, "sklearn.pipeline.FeatureUnion.set_params"]], "transform() (sklearn.pipeline.featureunion method)": [[859, "sklearn.pipeline.FeatureUnion.transform"]], "pipeline (class in sklearn.pipeline)": [[860, "sklearn.pipeline.Pipeline"]], "classes_ (sklearn.pipeline.pipeline property)": [[860, "sklearn.pipeline.Pipeline.classes_"]], "decision_function() (sklearn.pipeline.pipeline method)": [[860, "sklearn.pipeline.Pipeline.decision_function"]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[860, "sklearn.pipeline.Pipeline.feature_names_in_"]], "fit() (sklearn.pipeline.pipeline method)": [[860, "sklearn.pipeline.Pipeline.fit"]], "fit_predict() (sklearn.pipeline.pipeline method)": [[860, "sklearn.pipeline.Pipeline.fit_predict"]], "fit_transform() (sklearn.pipeline.pipeline method)": [[860, "sklearn.pipeline.Pipeline.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[860, "sklearn.pipeline.Pipeline.get_feature_names_out"]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[860, "sklearn.pipeline.Pipeline.get_metadata_routing"]], "get_params() (sklearn.pipeline.pipeline method)": [[860, "sklearn.pipeline.Pipeline.get_params"]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[860, "sklearn.pipeline.Pipeline.inverse_transform"]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[860, "sklearn.pipeline.Pipeline.n_features_in_"]], "named_steps (sklearn.pipeline.pipeline property)": [[860, "sklearn.pipeline.Pipeline.named_steps"]], "predict() (sklearn.pipeline.pipeline method)": [[860, "sklearn.pipeline.Pipeline.predict"]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[860, "sklearn.pipeline.Pipeline.predict_log_proba"]], "predict_proba() (sklearn.pipeline.pipeline method)": [[860, "sklearn.pipeline.Pipeline.predict_proba"]], "score() (sklearn.pipeline.pipeline method)": [[860, "sklearn.pipeline.Pipeline.score"]], "score_samples() (sklearn.pipeline.pipeline method)": [[860, "sklearn.pipeline.Pipeline.score_samples"]], "set_output() (sklearn.pipeline.pipeline method)": [[860, "sklearn.pipeline.Pipeline.set_output"]], "set_params() (sklearn.pipeline.pipeline method)": [[860, "sklearn.pipeline.Pipeline.set_params"]], "set_score_request() (sklearn.pipeline.pipeline method)": [[860, "sklearn.pipeline.Pipeline.set_score_request"]], "transform() (sklearn.pipeline.pipeline method)": [[860, "sklearn.pipeline.Pipeline.transform"]], "make_pipeline() (in module sklearn.pipeline)": [[861, "sklearn.pipeline.make_pipeline"]], "make_union() (in module sklearn.pipeline)": [[862, "sklearn.pipeline.make_union"]], "binarizer (class in sklearn.preprocessing)": [[863, "sklearn.preprocessing.Binarizer"]], "fit() (sklearn.preprocessing.binarizer method)": [[863, "sklearn.preprocessing.Binarizer.fit"]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[863, "sklearn.preprocessing.Binarizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[863, "sklearn.preprocessing.Binarizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[863, "sklearn.preprocessing.Binarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.binarizer method)": [[863, "sklearn.preprocessing.Binarizer.get_params"]], "set_output() (sklearn.preprocessing.binarizer method)": [[863, "sklearn.preprocessing.Binarizer.set_output"]], "set_params() (sklearn.preprocessing.binarizer method)": [[863, "sklearn.preprocessing.Binarizer.set_params"]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[863, "sklearn.preprocessing.Binarizer.set_transform_request"]], "transform() (sklearn.preprocessing.binarizer method)": [[863, "sklearn.preprocessing.Binarizer.transform"]], "functiontransformer (class in sklearn.preprocessing)": [[864, "sklearn.preprocessing.FunctionTransformer"]], "fit() (sklearn.preprocessing.functiontransformer method)": [[864, "sklearn.preprocessing.FunctionTransformer.fit"]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[864, "sklearn.preprocessing.FunctionTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[864, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[864, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[864, "sklearn.preprocessing.FunctionTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[864, "sklearn.preprocessing.FunctionTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[864, "sklearn.preprocessing.FunctionTransformer.set_output"]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[864, "sklearn.preprocessing.FunctionTransformer.set_params"]], "transform() (sklearn.preprocessing.functiontransformer method)": [[864, "sklearn.preprocessing.FunctionTransformer.transform"]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[865, "sklearn.preprocessing.KBinsDiscretizer"]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[865, "sklearn.preprocessing.KBinsDiscretizer.fit"]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[865, "sklearn.preprocessing.KBinsDiscretizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[865, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[865, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[865, "sklearn.preprocessing.KBinsDiscretizer.get_params"]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[865, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform"]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[865, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request"]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[865, "sklearn.preprocessing.KBinsDiscretizer.set_output"]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[865, "sklearn.preprocessing.KBinsDiscretizer.set_params"]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[865, "sklearn.preprocessing.KBinsDiscretizer.transform"]], "kernelcenterer (class in sklearn.preprocessing)": [[866, "sklearn.preprocessing.KernelCenterer"]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[866, "sklearn.preprocessing.KernelCenterer.fit"]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[866, "sklearn.preprocessing.KernelCenterer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[866, "sklearn.preprocessing.KernelCenterer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[866, "sklearn.preprocessing.KernelCenterer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[866, "sklearn.preprocessing.KernelCenterer.get_params"]], "set_fit_request() (sklearn.preprocessing.kernelcenterer method)": [[866, "sklearn.preprocessing.KernelCenterer.set_fit_request"]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[866, "sklearn.preprocessing.KernelCenterer.set_output"]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[866, "sklearn.preprocessing.KernelCenterer.set_params"]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[866, "sklearn.preprocessing.KernelCenterer.set_transform_request"]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[866, "sklearn.preprocessing.KernelCenterer.transform"]], "labelbinarizer (class in sklearn.preprocessing)": [[867, "sklearn.preprocessing.LabelBinarizer"]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[867, "sklearn.preprocessing.LabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[867, "sklearn.preprocessing.LabelBinarizer.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[867, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[867, "sklearn.preprocessing.LabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[867, "sklearn.preprocessing.LabelBinarizer.inverse_transform"]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[867, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request"]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[867, "sklearn.preprocessing.LabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[867, "sklearn.preprocessing.LabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[867, "sklearn.preprocessing.LabelBinarizer.transform"]], "labelencoder (class in sklearn.preprocessing)": [[868, "sklearn.preprocessing.LabelEncoder"]], "fit() (sklearn.preprocessing.labelencoder method)": [[868, "sklearn.preprocessing.LabelEncoder.fit"]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[868, "sklearn.preprocessing.LabelEncoder.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[868, "sklearn.preprocessing.LabelEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.labelencoder method)": [[868, "sklearn.preprocessing.LabelEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[868, "sklearn.preprocessing.LabelEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.labelencoder method)": [[868, "sklearn.preprocessing.LabelEncoder.set_output"]], "set_params() (sklearn.preprocessing.labelencoder method)": [[868, "sklearn.preprocessing.LabelEncoder.set_params"]], "transform() (sklearn.preprocessing.labelencoder method)": [[868, "sklearn.preprocessing.LabelEncoder.transform"]], "maxabsscaler (class in sklearn.preprocessing)": [[869, "sklearn.preprocessing.MaxAbsScaler"]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[869, "sklearn.preprocessing.MaxAbsScaler.fit"]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[869, "sklearn.preprocessing.MaxAbsScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[869, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[869, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[869, "sklearn.preprocessing.MaxAbsScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[869, "sklearn.preprocessing.MaxAbsScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[869, "sklearn.preprocessing.MaxAbsScaler.partial_fit"]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[869, "sklearn.preprocessing.MaxAbsScaler.set_output"]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[869, "sklearn.preprocessing.MaxAbsScaler.set_params"]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[869, "sklearn.preprocessing.MaxAbsScaler.transform"]], "minmaxscaler (class in sklearn.preprocessing)": [[870, "sklearn.preprocessing.MinMaxScaler"]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[870, "sklearn.preprocessing.MinMaxScaler.fit"]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[870, "sklearn.preprocessing.MinMaxScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[870, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[870, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[870, "sklearn.preprocessing.MinMaxScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[870, "sklearn.preprocessing.MinMaxScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[870, "sklearn.preprocessing.MinMaxScaler.partial_fit"]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[870, "sklearn.preprocessing.MinMaxScaler.set_output"]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[870, "sklearn.preprocessing.MinMaxScaler.set_params"]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[870, "sklearn.preprocessing.MinMaxScaler.transform"]], "multilabelbinarizer (class in sklearn.preprocessing)": [[871, "sklearn.preprocessing.MultiLabelBinarizer"]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[871, "sklearn.preprocessing.MultiLabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[871, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[871, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[871, "sklearn.preprocessing.MultiLabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[871, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[871, "sklearn.preprocessing.MultiLabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[871, "sklearn.preprocessing.MultiLabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[871, "sklearn.preprocessing.MultiLabelBinarizer.transform"]], "normalizer (class in sklearn.preprocessing)": [[872, "sklearn.preprocessing.Normalizer"]], "fit() (sklearn.preprocessing.normalizer method)": [[872, "sklearn.preprocessing.Normalizer.fit"]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[872, "sklearn.preprocessing.Normalizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[872, "sklearn.preprocessing.Normalizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[872, "sklearn.preprocessing.Normalizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.normalizer method)": [[872, "sklearn.preprocessing.Normalizer.get_params"]], "set_output() (sklearn.preprocessing.normalizer method)": [[872, "sklearn.preprocessing.Normalizer.set_output"]], "set_params() (sklearn.preprocessing.normalizer method)": [[872, "sklearn.preprocessing.Normalizer.set_params"]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[872, "sklearn.preprocessing.Normalizer.set_transform_request"]], "transform() (sklearn.preprocessing.normalizer method)": [[872, "sklearn.preprocessing.Normalizer.transform"]], "onehotencoder (class in sklearn.preprocessing)": [[873, "sklearn.preprocessing.OneHotEncoder"]], "fit() (sklearn.preprocessing.onehotencoder method)": [[873, "sklearn.preprocessing.OneHotEncoder.fit"]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[873, "sklearn.preprocessing.OneHotEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[873, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[873, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[873, "sklearn.preprocessing.OneHotEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[873, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[873, "sklearn.preprocessing.OneHotEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[873, "sklearn.preprocessing.OneHotEncoder.set_output"]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[873, "sklearn.preprocessing.OneHotEncoder.set_params"]], "transform() (sklearn.preprocessing.onehotencoder method)": [[873, "sklearn.preprocessing.OneHotEncoder.transform"]], "ordinalencoder (class in sklearn.preprocessing)": [[874, "sklearn.preprocessing.OrdinalEncoder"]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[874, "sklearn.preprocessing.OrdinalEncoder.fit"]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[874, "sklearn.preprocessing.OrdinalEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[874, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[874, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[874, "sklearn.preprocessing.OrdinalEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[874, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[874, "sklearn.preprocessing.OrdinalEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[874, "sklearn.preprocessing.OrdinalEncoder.set_output"]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[874, "sklearn.preprocessing.OrdinalEncoder.set_params"]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[874, "sklearn.preprocessing.OrdinalEncoder.transform"]], "polynomialfeatures (class in sklearn.preprocessing)": [[875, "sklearn.preprocessing.PolynomialFeatures"]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[875, "sklearn.preprocessing.PolynomialFeatures.fit"]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[875, "sklearn.preprocessing.PolynomialFeatures.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[875, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[875, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing"]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[875, "sklearn.preprocessing.PolynomialFeatures.get_params"]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[875, "sklearn.preprocessing.PolynomialFeatures.powers_"]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[875, "sklearn.preprocessing.PolynomialFeatures.set_output"]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[875, "sklearn.preprocessing.PolynomialFeatures.set_params"]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[875, "sklearn.preprocessing.PolynomialFeatures.transform"]], "powertransformer (class in sklearn.preprocessing)": [[876, "sklearn.preprocessing.PowerTransformer"]], "fit() (sklearn.preprocessing.powertransformer method)": [[876, "sklearn.preprocessing.PowerTransformer.fit"]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[876, "sklearn.preprocessing.PowerTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[876, "sklearn.preprocessing.PowerTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[876, "sklearn.preprocessing.PowerTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.powertransformer method)": [[876, "sklearn.preprocessing.PowerTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[876, "sklearn.preprocessing.PowerTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.powertransformer method)": [[876, "sklearn.preprocessing.PowerTransformer.set_output"]], "set_params() (sklearn.preprocessing.powertransformer method)": [[876, "sklearn.preprocessing.PowerTransformer.set_params"]], "transform() (sklearn.preprocessing.powertransformer method)": [[876, "sklearn.preprocessing.PowerTransformer.transform"]], "quantiletransformer (class in sklearn.preprocessing)": [[877, "sklearn.preprocessing.QuantileTransformer"]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[877, "sklearn.preprocessing.QuantileTransformer.fit"]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[877, "sklearn.preprocessing.QuantileTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[877, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[877, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[877, "sklearn.preprocessing.QuantileTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[877, "sklearn.preprocessing.QuantileTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[877, "sklearn.preprocessing.QuantileTransformer.set_output"]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[877, "sklearn.preprocessing.QuantileTransformer.set_params"]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[877, "sklearn.preprocessing.QuantileTransformer.transform"]], "robustscaler (class in sklearn.preprocessing)": [[878, "sklearn.preprocessing.RobustScaler"]], "fit() (sklearn.preprocessing.robustscaler method)": [[878, "sklearn.preprocessing.RobustScaler.fit"]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[878, "sklearn.preprocessing.RobustScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[878, "sklearn.preprocessing.RobustScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[878, "sklearn.preprocessing.RobustScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.robustscaler method)": [[878, "sklearn.preprocessing.RobustScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[878, "sklearn.preprocessing.RobustScaler.inverse_transform"]], "set_output() (sklearn.preprocessing.robustscaler method)": [[878, "sklearn.preprocessing.RobustScaler.set_output"]], "set_params() (sklearn.preprocessing.robustscaler method)": [[878, "sklearn.preprocessing.RobustScaler.set_params"]], "transform() (sklearn.preprocessing.robustscaler method)": [[878, "sklearn.preprocessing.RobustScaler.transform"]], "splinetransformer (class in sklearn.preprocessing)": [[879, "sklearn.preprocessing.SplineTransformer"]], "fit() (sklearn.preprocessing.splinetransformer method)": [[879, "sklearn.preprocessing.SplineTransformer.fit"]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[879, "sklearn.preprocessing.SplineTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[879, "sklearn.preprocessing.SplineTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[879, "sklearn.preprocessing.SplineTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[879, "sklearn.preprocessing.SplineTransformer.get_params"]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[879, "sklearn.preprocessing.SplineTransformer.set_fit_request"]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[879, "sklearn.preprocessing.SplineTransformer.set_output"]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[879, "sklearn.preprocessing.SplineTransformer.set_params"]], "transform() (sklearn.preprocessing.splinetransformer method)": [[879, "sklearn.preprocessing.SplineTransformer.transform"]], "standardscaler (class in sklearn.preprocessing)": [[880, "sklearn.preprocessing.StandardScaler"]], "fit() (sklearn.preprocessing.standardscaler method)": [[880, "sklearn.preprocessing.StandardScaler.fit"]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[880, "sklearn.preprocessing.StandardScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[880, "sklearn.preprocessing.StandardScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[880, "sklearn.preprocessing.StandardScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.standardscaler method)": [[880, "sklearn.preprocessing.StandardScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[880, "sklearn.preprocessing.StandardScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[880, "sklearn.preprocessing.StandardScaler.partial_fit"]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[880, "sklearn.preprocessing.StandardScaler.set_fit_request"]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[880, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request"]], "set_output() (sklearn.preprocessing.standardscaler method)": [[880, "sklearn.preprocessing.StandardScaler.set_output"]], "set_params() (sklearn.preprocessing.standardscaler method)": [[880, "sklearn.preprocessing.StandardScaler.set_params"]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[880, "sklearn.preprocessing.StandardScaler.set_partial_fit_request"]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[880, "sklearn.preprocessing.StandardScaler.set_transform_request"]], "transform() (sklearn.preprocessing.standardscaler method)": [[880, "sklearn.preprocessing.StandardScaler.transform"]], "targetencoder (class in sklearn.preprocessing)": [[881, "sklearn.preprocessing.TargetEncoder"]], "fit() (sklearn.preprocessing.targetencoder method)": [[881, "sklearn.preprocessing.TargetEncoder.fit"]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[881, "sklearn.preprocessing.TargetEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[881, "sklearn.preprocessing.TargetEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[881, "sklearn.preprocessing.TargetEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.targetencoder method)": [[881, "sklearn.preprocessing.TargetEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[881, "sklearn.preprocessing.TargetEncoder.infrequent_categories_"]], "set_output() (sklearn.preprocessing.targetencoder method)": [[881, "sklearn.preprocessing.TargetEncoder.set_output"]], "set_params() (sklearn.preprocessing.targetencoder method)": [[881, "sklearn.preprocessing.TargetEncoder.set_params"]], "transform() (sklearn.preprocessing.targetencoder method)": [[881, "sklearn.preprocessing.TargetEncoder.transform"]], "add_dummy_feature() (in module sklearn.preprocessing)": [[882, "sklearn.preprocessing.add_dummy_feature"]], "binarize() (in module sklearn.preprocessing)": [[883, "sklearn.preprocessing.binarize"]], "label_binarize() (in module sklearn.preprocessing)": [[884, "sklearn.preprocessing.label_binarize"]], "maxabs_scale() (in module sklearn.preprocessing)": [[885, "sklearn.preprocessing.maxabs_scale"]], "minmax_scale() (in module sklearn.preprocessing)": [[886, "sklearn.preprocessing.minmax_scale"]], "normalize() (in module sklearn.preprocessing)": [[887, "sklearn.preprocessing.normalize"]], "power_transform() (in module sklearn.preprocessing)": [[888, "sklearn.preprocessing.power_transform"]], "quantile_transform() (in module sklearn.preprocessing)": [[889, "sklearn.preprocessing.quantile_transform"]], "robust_scale() (in module sklearn.preprocessing)": [[890, "sklearn.preprocessing.robust_scale"]], "scale() (in module sklearn.preprocessing)": [[891, "sklearn.preprocessing.scale"]], "gaussianrandomprojection (class in sklearn.random_projection)": [[892, "sklearn.random_projection.GaussianRandomProjection"]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[892, "sklearn.random_projection.GaussianRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[892, "sklearn.random_projection.GaussianRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[892, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out"]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[892, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing"]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[892, "sklearn.random_projection.GaussianRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[892, "sklearn.random_projection.GaussianRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[892, "sklearn.random_projection.GaussianRandomProjection.set_output"]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[892, "sklearn.random_projection.GaussianRandomProjection.set_params"]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[892, "sklearn.random_projection.GaussianRandomProjection.transform"]], "sparserandomprojection (class in sklearn.random_projection)": [[893, "sklearn.random_projection.SparseRandomProjection"]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[893, "sklearn.random_projection.SparseRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[893, "sklearn.random_projection.SparseRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[893, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out"]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[893, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing"]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[893, "sklearn.random_projection.SparseRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[893, "sklearn.random_projection.SparseRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[893, "sklearn.random_projection.SparseRandomProjection.set_output"]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[893, "sklearn.random_projection.SparseRandomProjection.set_params"]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[893, "sklearn.random_projection.SparseRandomProjection.transform"]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[894, "sklearn.random_projection.johnson_lindenstrauss_min_dim"]], "labelpropagation (class in sklearn.semi_supervised)": [[895, "sklearn.semi_supervised.LabelPropagation"]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[895, "sklearn.semi_supervised.LabelPropagation.fit"]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[895, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[895, "sklearn.semi_supervised.LabelPropagation.get_params"]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[895, "sklearn.semi_supervised.LabelPropagation.predict"]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[895, "sklearn.semi_supervised.LabelPropagation.predict_proba"]], "score() (sklearn.semi_supervised.labelpropagation method)": [[895, "sklearn.semi_supervised.LabelPropagation.score"]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[895, "sklearn.semi_supervised.LabelPropagation.set_params"]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[895, "sklearn.semi_supervised.LabelPropagation.set_score_request"]], "labelspreading (class in sklearn.semi_supervised)": [[896, "sklearn.semi_supervised.LabelSpreading"]], "fit() (sklearn.semi_supervised.labelspreading method)": [[896, "sklearn.semi_supervised.LabelSpreading.fit"]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[896, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[896, "sklearn.semi_supervised.LabelSpreading.get_params"]], "predict() (sklearn.semi_supervised.labelspreading method)": [[896, "sklearn.semi_supervised.LabelSpreading.predict"]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[896, "sklearn.semi_supervised.LabelSpreading.predict_proba"]], "score() (sklearn.semi_supervised.labelspreading method)": [[896, "sklearn.semi_supervised.LabelSpreading.score"]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[896, "sklearn.semi_supervised.LabelSpreading.set_params"]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[896, "sklearn.semi_supervised.LabelSpreading.set_score_request"]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[897, "sklearn.semi_supervised.SelfTrainingClassifier"]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[897, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function"]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[897, "sklearn.semi_supervised.SelfTrainingClassifier.fit"]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[897, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[897, "sklearn.semi_supervised.SelfTrainingClassifier.get_params"]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[897, "sklearn.semi_supervised.SelfTrainingClassifier.predict"]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[897, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba"]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[897, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba"]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[897, "sklearn.semi_supervised.SelfTrainingClassifier.score"]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[897, "sklearn.semi_supervised.SelfTrainingClassifier.set_params"]], "set_config() (in module sklearn)": [[898, "sklearn.set_config"]], "show_versions() (in module sklearn)": [[899, "sklearn.show_versions"]], "linearsvc (class in sklearn.svm)": [[900, "sklearn.svm.LinearSVC"]], "decision_function() (sklearn.svm.linearsvc method)": [[900, "sklearn.svm.LinearSVC.decision_function"]], "densify() (sklearn.svm.linearsvc method)": [[900, "sklearn.svm.LinearSVC.densify"]], "fit() (sklearn.svm.linearsvc method)": [[900, "sklearn.svm.LinearSVC.fit"]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[900, "sklearn.svm.LinearSVC.get_metadata_routing"]], "get_params() (sklearn.svm.linearsvc method)": [[900, "sklearn.svm.LinearSVC.get_params"]], "predict() (sklearn.svm.linearsvc method)": [[900, "sklearn.svm.LinearSVC.predict"]], "score() (sklearn.svm.linearsvc method)": [[900, "sklearn.svm.LinearSVC.score"]], "set_fit_request() (sklearn.svm.linearsvc method)": [[900, "sklearn.svm.LinearSVC.set_fit_request"]], "set_params() (sklearn.svm.linearsvc method)": [[900, "sklearn.svm.LinearSVC.set_params"]], "set_score_request() (sklearn.svm.linearsvc method)": [[900, "sklearn.svm.LinearSVC.set_score_request"]], "sparsify() (sklearn.svm.linearsvc method)": [[900, "sklearn.svm.LinearSVC.sparsify"]], "linearsvr (class in sklearn.svm)": [[901, "sklearn.svm.LinearSVR"]], "fit() (sklearn.svm.linearsvr method)": [[901, "sklearn.svm.LinearSVR.fit"]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[901, "sklearn.svm.LinearSVR.get_metadata_routing"]], "get_params() (sklearn.svm.linearsvr method)": [[901, "sklearn.svm.LinearSVR.get_params"]], "predict() (sklearn.svm.linearsvr method)": [[901, "sklearn.svm.LinearSVR.predict"]], "score() (sklearn.svm.linearsvr method)": [[901, "sklearn.svm.LinearSVR.score"]], "set_fit_request() (sklearn.svm.linearsvr method)": [[901, "sklearn.svm.LinearSVR.set_fit_request"]], "set_params() (sklearn.svm.linearsvr method)": [[901, "sklearn.svm.LinearSVR.set_params"]], "set_score_request() (sklearn.svm.linearsvr method)": [[901, "sklearn.svm.LinearSVR.set_score_request"]], "nusvc (class in sklearn.svm)": [[902, "sklearn.svm.NuSVC"]], "coef_ (sklearn.svm.nusvc property)": [[902, "sklearn.svm.NuSVC.coef_"]], "decision_function() (sklearn.svm.nusvc method)": [[902, "sklearn.svm.NuSVC.decision_function"]], "fit() (sklearn.svm.nusvc method)": [[902, "sklearn.svm.NuSVC.fit"]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[902, "sklearn.svm.NuSVC.get_metadata_routing"]], "get_params() (sklearn.svm.nusvc method)": [[902, "sklearn.svm.NuSVC.get_params"]], "n_support_ (sklearn.svm.nusvc property)": [[902, "sklearn.svm.NuSVC.n_support_"]], "predict() (sklearn.svm.nusvc method)": [[902, "sklearn.svm.NuSVC.predict"]], "predict_log_proba() (sklearn.svm.nusvc method)": [[902, "sklearn.svm.NuSVC.predict_log_proba"]], "predict_proba() (sklearn.svm.nusvc method)": [[902, "sklearn.svm.NuSVC.predict_proba"]], "proba_ (sklearn.svm.nusvc property)": [[902, "sklearn.svm.NuSVC.probA_"]], "probb_ (sklearn.svm.nusvc property)": [[902, "sklearn.svm.NuSVC.probB_"]], "score() (sklearn.svm.nusvc method)": [[902, "sklearn.svm.NuSVC.score"]], "set_fit_request() (sklearn.svm.nusvc method)": [[902, "sklearn.svm.NuSVC.set_fit_request"]], "set_params() (sklearn.svm.nusvc method)": [[902, "sklearn.svm.NuSVC.set_params"]], "set_score_request() (sklearn.svm.nusvc method)": [[902, "sklearn.svm.NuSVC.set_score_request"]], "nusvr (class in sklearn.svm)": [[903, "sklearn.svm.NuSVR"]], "coef_ (sklearn.svm.nusvr property)": [[903, "sklearn.svm.NuSVR.coef_"]], "fit() (sklearn.svm.nusvr method)": [[903, "sklearn.svm.NuSVR.fit"]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[903, "sklearn.svm.NuSVR.get_metadata_routing"]], "get_params() (sklearn.svm.nusvr method)": [[903, "sklearn.svm.NuSVR.get_params"]], "n_support_ (sklearn.svm.nusvr property)": [[903, "sklearn.svm.NuSVR.n_support_"]], "predict() (sklearn.svm.nusvr method)": [[903, "sklearn.svm.NuSVR.predict"]], "score() (sklearn.svm.nusvr method)": [[903, "sklearn.svm.NuSVR.score"]], "set_fit_request() (sklearn.svm.nusvr method)": [[903, "sklearn.svm.NuSVR.set_fit_request"]], "set_params() (sklearn.svm.nusvr method)": [[903, "sklearn.svm.NuSVR.set_params"]], "set_score_request() (sklearn.svm.nusvr method)": [[903, "sklearn.svm.NuSVR.set_score_request"]], "oneclasssvm (class in sklearn.svm)": [[904, "sklearn.svm.OneClassSVM"]], "coef_ (sklearn.svm.oneclasssvm property)": [[904, "sklearn.svm.OneClassSVM.coef_"]], "decision_function() (sklearn.svm.oneclasssvm method)": [[904, "sklearn.svm.OneClassSVM.decision_function"]], "fit() (sklearn.svm.oneclasssvm method)": [[904, "sklearn.svm.OneClassSVM.fit"]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[904, "sklearn.svm.OneClassSVM.fit_predict"]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[904, "sklearn.svm.OneClassSVM.get_metadata_routing"]], "get_params() (sklearn.svm.oneclasssvm method)": [[904, "sklearn.svm.OneClassSVM.get_params"]], "n_support_ (sklearn.svm.oneclasssvm property)": [[904, "sklearn.svm.OneClassSVM.n_support_"]], "predict() (sklearn.svm.oneclasssvm method)": [[904, "sklearn.svm.OneClassSVM.predict"]], "score_samples() (sklearn.svm.oneclasssvm method)": [[904, "sklearn.svm.OneClassSVM.score_samples"]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[904, "sklearn.svm.OneClassSVM.set_fit_request"]], "set_params() (sklearn.svm.oneclasssvm method)": [[904, "sklearn.svm.OneClassSVM.set_params"]], "svc (class in sklearn.svm)": [[905, "sklearn.svm.SVC"]], "coef_ (sklearn.svm.svc property)": [[905, "sklearn.svm.SVC.coef_"]], "decision_function() (sklearn.svm.svc method)": [[905, "sklearn.svm.SVC.decision_function"]], "fit() (sklearn.svm.svc method)": [[905, "sklearn.svm.SVC.fit"]], "get_metadata_routing() (sklearn.svm.svc method)": [[905, "sklearn.svm.SVC.get_metadata_routing"]], "get_params() (sklearn.svm.svc method)": [[905, "sklearn.svm.SVC.get_params"]], "n_support_ (sklearn.svm.svc property)": [[905, "sklearn.svm.SVC.n_support_"]], "predict() (sklearn.svm.svc method)": [[905, "sklearn.svm.SVC.predict"]], "predict_log_proba() (sklearn.svm.svc method)": [[905, "sklearn.svm.SVC.predict_log_proba"]], "predict_proba() (sklearn.svm.svc method)": [[905, "sklearn.svm.SVC.predict_proba"]], "proba_ (sklearn.svm.svc property)": [[905, "sklearn.svm.SVC.probA_"]], "probb_ (sklearn.svm.svc property)": [[905, "sklearn.svm.SVC.probB_"]], "score() (sklearn.svm.svc method)": [[905, "sklearn.svm.SVC.score"]], "set_fit_request() (sklearn.svm.svc method)": [[905, "sklearn.svm.SVC.set_fit_request"]], "set_params() (sklearn.svm.svc method)": [[905, "sklearn.svm.SVC.set_params"]], "set_score_request() (sklearn.svm.svc method)": [[905, "sklearn.svm.SVC.set_score_request"]], "svr (class in sklearn.svm)": [[906, "sklearn.svm.SVR"]], "coef_ (sklearn.svm.svr property)": [[906, "sklearn.svm.SVR.coef_"]], "fit() (sklearn.svm.svr method)": [[906, "sklearn.svm.SVR.fit"]], "get_metadata_routing() (sklearn.svm.svr method)": [[906, "sklearn.svm.SVR.get_metadata_routing"]], "get_params() (sklearn.svm.svr method)": [[906, "sklearn.svm.SVR.get_params"]], "n_support_ (sklearn.svm.svr property)": [[906, "sklearn.svm.SVR.n_support_"]], "predict() (sklearn.svm.svr method)": [[906, "sklearn.svm.SVR.predict"]], "score() (sklearn.svm.svr method)": [[906, "sklearn.svm.SVR.score"]], "set_fit_request() (sklearn.svm.svr method)": [[906, "sklearn.svm.SVR.set_fit_request"]], "set_params() (sklearn.svm.svr method)": [[906, "sklearn.svm.SVR.set_params"]], "set_score_request() (sklearn.svm.svr method)": [[906, "sklearn.svm.SVR.set_score_request"]], "l1_min_c() (in module sklearn.svm)": [[907, "sklearn.svm.l1_min_c"]], "decisiontreeclassifier (class in sklearn.tree)": [[908, "sklearn.tree.DecisionTreeClassifier"]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[908, "sklearn.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[908, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[908, "sklearn.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[908, "sklearn.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[908, "sklearn.tree.DecisionTreeClassifier.fit"]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[908, "sklearn.tree.DecisionTreeClassifier.get_depth"]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[908, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[908, "sklearn.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[908, "sklearn.tree.DecisionTreeClassifier.get_params"]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[908, "sklearn.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[908, "sklearn.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[908, "sklearn.tree.DecisionTreeClassifier.predict_proba"]], "score() (sklearn.tree.decisiontreeclassifier method)": [[908, "sklearn.tree.DecisionTreeClassifier.score"]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[908, "sklearn.tree.DecisionTreeClassifier.set_fit_request"]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[908, "sklearn.tree.DecisionTreeClassifier.set_params"]], "set_predict_proba_request() (sklearn.tree.decisiontreeclassifier method)": [[908, "sklearn.tree.DecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sklearn.tree.decisiontreeclassifier method)": [[908, "sklearn.tree.DecisionTreeClassifier.set_predict_request"]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[908, "sklearn.tree.DecisionTreeClassifier.set_score_request"]], "decisiontreeregressor (class in sklearn.tree)": [[909, "sklearn.tree.DecisionTreeRegressor"]], "apply() (sklearn.tree.decisiontreeregressor method)": [[909, "sklearn.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[909, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[909, "sklearn.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[909, "sklearn.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.decisiontreeregressor method)": [[909, "sklearn.tree.DecisionTreeRegressor.fit"]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[909, "sklearn.tree.DecisionTreeRegressor.get_depth"]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[909, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[909, "sklearn.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[909, "sklearn.tree.DecisionTreeRegressor.get_params"]], "predict() (sklearn.tree.decisiontreeregressor method)": [[909, "sklearn.tree.DecisionTreeRegressor.predict"]], "score() (sklearn.tree.decisiontreeregressor method)": [[909, "sklearn.tree.DecisionTreeRegressor.score"]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[909, "sklearn.tree.DecisionTreeRegressor.set_fit_request"]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[909, "sklearn.tree.DecisionTreeRegressor.set_params"]], "set_predict_request() (sklearn.tree.decisiontreeregressor method)": [[909, "sklearn.tree.DecisionTreeRegressor.set_predict_request"]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[909, "sklearn.tree.DecisionTreeRegressor.set_score_request"]], "extratreeclassifier (class in sklearn.tree)": [[910, "sklearn.tree.ExtraTreeClassifier"]], "apply() (sklearn.tree.extratreeclassifier method)": [[910, "sklearn.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[910, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[910, "sklearn.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[910, "sklearn.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.extratreeclassifier method)": [[910, "sklearn.tree.ExtraTreeClassifier.fit"]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[910, "sklearn.tree.ExtraTreeClassifier.get_depth"]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[910, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[910, "sklearn.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.extratreeclassifier method)": [[910, "sklearn.tree.ExtraTreeClassifier.get_params"]], "predict() (sklearn.tree.extratreeclassifier method)": [[910, "sklearn.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[910, "sklearn.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[910, "sklearn.tree.ExtraTreeClassifier.predict_proba"]], "score() (sklearn.tree.extratreeclassifier method)": [[910, "sklearn.tree.ExtraTreeClassifier.score"]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[910, "sklearn.tree.ExtraTreeClassifier.set_fit_request"]], "set_params() (sklearn.tree.extratreeclassifier method)": [[910, "sklearn.tree.ExtraTreeClassifier.set_params"]], "set_predict_proba_request() (sklearn.tree.extratreeclassifier method)": [[910, "sklearn.tree.ExtraTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sklearn.tree.extratreeclassifier method)": [[910, "sklearn.tree.ExtraTreeClassifier.set_predict_request"]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[910, "sklearn.tree.ExtraTreeClassifier.set_score_request"]], "extratreeregressor (class in sklearn.tree)": [[911, "sklearn.tree.ExtraTreeRegressor"]], "apply() (sklearn.tree.extratreeregressor method)": [[911, "sklearn.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[911, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeregressor method)": [[911, "sklearn.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[911, "sklearn.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.extratreeregressor method)": [[911, "sklearn.tree.ExtraTreeRegressor.fit"]], "get_depth() (sklearn.tree.extratreeregressor method)": [[911, "sklearn.tree.ExtraTreeRegressor.get_depth"]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[911, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[911, "sklearn.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.extratreeregressor method)": [[911, "sklearn.tree.ExtraTreeRegressor.get_params"]], "predict() (sklearn.tree.extratreeregressor method)": [[911, "sklearn.tree.ExtraTreeRegressor.predict"]], "score() (sklearn.tree.extratreeregressor method)": [[911, "sklearn.tree.ExtraTreeRegressor.score"]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[911, "sklearn.tree.ExtraTreeRegressor.set_fit_request"]], "set_params() (sklearn.tree.extratreeregressor method)": [[911, "sklearn.tree.ExtraTreeRegressor.set_params"]], "set_predict_request() (sklearn.tree.extratreeregressor method)": [[911, "sklearn.tree.ExtraTreeRegressor.set_predict_request"]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[911, "sklearn.tree.ExtraTreeRegressor.set_score_request"]], "export_graphviz() (in module sklearn.tree)": [[912, "sklearn.tree.export_graphviz"]], "export_text() (in module sklearn.tree)": [[913, "sklearn.tree.export_text"]], "plot_tree() (in module sklearn.tree)": [[914, "sklearn.tree.plot_tree"]], "bunch (class in sklearn.utils)": [[915, "sklearn.utils.Bunch"]], "clear() (sklearn.utils.bunch method)": [[915, "sklearn.utils.Bunch.clear"]], "copy() (sklearn.utils.bunch method)": [[915, "sklearn.utils.Bunch.copy"]], "fromkeys() (sklearn.utils.bunch method)": [[915, "sklearn.utils.Bunch.fromkeys"]], "get() (sklearn.utils.bunch method)": [[915, "sklearn.utils.Bunch.get"]], "items() (sklearn.utils.bunch method)": [[915, "sklearn.utils.Bunch.items"]], "keys() (sklearn.utils.bunch method)": [[915, "sklearn.utils.Bunch.keys"]], "pop() (sklearn.utils.bunch method)": [[915, "sklearn.utils.Bunch.pop"]], "popitem() (sklearn.utils.bunch method)": [[915, "sklearn.utils.Bunch.popitem"]], "setdefault() (sklearn.utils.bunch method)": [[915, "sklearn.utils.Bunch.setdefault"]], "update() (sklearn.utils.bunch method)": [[915, "sklearn.utils.Bunch.update"]], "values() (sklearn.utils.bunch method)": [[915, "sklearn.utils.Bunch.values"]], "_safe_indexing() (in module sklearn.utils)": [[916, "sklearn.utils._safe_indexing"]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[917, "sklearn.utils.arrayfuncs.min_pos"]], "as_float_array() (in module sklearn.utils)": [[918, "sklearn.utils.as_float_array"]], "assert_all_finite() (in module sklearn.utils)": [[919, "sklearn.utils.assert_all_finite"]], "check_x_y() (in module sklearn.utils)": [[920, "sklearn.utils.check_X_y"]], "check_array() (in module sklearn.utils)": [[921, "sklearn.utils.check_array"]], "check_consistent_length() (in module sklearn.utils)": [[922, "sklearn.utils.check_consistent_length"]], "check_random_state() (in module sklearn.utils)": [[923, "sklearn.utils.check_random_state"]], "check_scalar() (in module sklearn.utils)": [[924, "sklearn.utils.check_scalar"]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[925, "sklearn.utils.class_weight.compute_class_weight"]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[926, "sklearn.utils.class_weight.compute_sample_weight"]], "deprecated() (in module sklearn.utils)": [[927, "sklearn.utils.deprecated"]], "all_displays() (in module sklearn.utils.discovery)": [[928, "sklearn.utils.discovery.all_displays"]], "all_estimators() (in module sklearn.utils.discovery)": [[929, "sklearn.utils.discovery.all_estimators"]], "all_functions() (in module sklearn.utils.discovery)": [[930, "sklearn.utils.discovery.all_functions"]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[931, "sklearn.utils.estimator_checks.check_estimator"]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[932, "sklearn.utils.estimator_checks.parametrize_with_checks"]], "estimator_html_repr() (in module sklearn.utils)": [[933, "sklearn.utils.estimator_html_repr"]], "density() (in module sklearn.utils.extmath)": [[934, "sklearn.utils.extmath.density"]], "fast_logdet() (in module sklearn.utils.extmath)": [[935, "sklearn.utils.extmath.fast_logdet"]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[936, "sklearn.utils.extmath.randomized_range_finder"]], "randomized_svd() (in module sklearn.utils.extmath)": [[937, "sklearn.utils.extmath.randomized_svd"]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[938, "sklearn.utils.extmath.safe_sparse_dot"]], "weighted_mode() (in module sklearn.utils.extmath)": [[939, "sklearn.utils.extmath.weighted_mode"]], "gen_batches() (in module sklearn.utils)": [[940, "sklearn.utils.gen_batches"]], "gen_even_slices() (in module sklearn.utils)": [[941, "sklearn.utils.gen_even_slices"]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[942, "sklearn.utils.graph.single_source_shortest_path_length"]], "indexable() (in module sklearn.utils)": [[943, "sklearn.utils.indexable"]], "metadatarequest (class in sklearn.utils.metadata_routing)": [[944, "sklearn.utils.metadata_routing.MetadataRequest"]], "consumes() (sklearn.utils.metadata_routing.metadatarequest method)": [[944, "sklearn.utils.metadata_routing.MetadataRequest.consumes"]], "metadatarouter (class in sklearn.utils.metadata_routing)": [[945, "sklearn.utils.metadata_routing.MetadataRouter"]], "add() (sklearn.utils.metadata_routing.metadatarouter method)": [[945, "sklearn.utils.metadata_routing.MetadataRouter.add"]], "add_self_request() (sklearn.utils.metadata_routing.metadatarouter method)": [[945, "sklearn.utils.metadata_routing.MetadataRouter.add_self_request"]], "consumes() (sklearn.utils.metadata_routing.metadatarouter method)": [[945, "sklearn.utils.metadata_routing.MetadataRouter.consumes"]], "route_params() (sklearn.utils.metadata_routing.metadatarouter method)": [[945, "sklearn.utils.metadata_routing.MetadataRouter.route_params"]], "validate_metadata() (sklearn.utils.metadata_routing.metadatarouter method)": [[945, "sklearn.utils.metadata_routing.MetadataRouter.validate_metadata"]], "methodmapping (class in sklearn.utils.metadata_routing)": [[946, "sklearn.utils.metadata_routing.MethodMapping"]], "add() (sklearn.utils.metadata_routing.methodmapping method)": [[946, "sklearn.utils.metadata_routing.MethodMapping.add"]], "from_str() (sklearn.utils.metadata_routing.methodmapping class method)": [[946, "sklearn.utils.metadata_routing.MethodMapping.from_str"]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[947, "sklearn.utils.metadata_routing.get_routing_for_object"]], "process_routing() (in module sklearn.utils.metadata_routing)": [[948, "sklearn.utils.metadata_routing.process_routing"]], "available_if() (in module sklearn.utils.metaestimators)": [[949, "sklearn.utils.metaestimators.available_if"]], "is_multilabel() (in module sklearn.utils.multiclass)": [[950, "sklearn.utils.multiclass.is_multilabel"]], "type_of_target() (in module sklearn.utils.multiclass)": [[951, "sklearn.utils.multiclass.type_of_target"]], "unique_labels() (in module sklearn.utils.multiclass)": [[952, "sklearn.utils.multiclass.unique_labels"]], "murmurhash3_32() (in module sklearn.utils)": [[953, "sklearn.utils.murmurhash3_32"]], "parallel (class in sklearn.utils.parallel)": [[954, "sklearn.utils.parallel.Parallel"]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[954, "sklearn.utils.parallel.Parallel.dispatch_next"]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[954, "sklearn.utils.parallel.Parallel.dispatch_one_batch"]], "format() (sklearn.utils.parallel.parallel method)": [[954, "sklearn.utils.parallel.Parallel.format"]], "print_progress() (sklearn.utils.parallel.parallel method)": [[954, "sklearn.utils.parallel.Parallel.print_progress"]], "delayed() (in module sklearn.utils.parallel)": [[955, "sklearn.utils.parallel.delayed"]], "parallel_backend() (in module sklearn.utils)": [[956, "sklearn.utils.parallel_backend"]], "sample_without_replacement() (in module sklearn.utils.random)": [[957, "sklearn.utils.random.sample_without_replacement"]], "register_parallel_backend() (in module sklearn.utils)": [[958, "sklearn.utils.register_parallel_backend"]], "resample() (in module sklearn.utils)": [[959, "sklearn.utils.resample"]], "safe_mask() (in module sklearn.utils)": [[960, "sklearn.utils.safe_mask"]], "safe_sqr() (in module sklearn.utils)": [[961, "sklearn.utils.safe_sqr"]], "shuffle() (in module sklearn.utils)": [[962, "sklearn.utils.shuffle"]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[963, "sklearn.utils.sparsefuncs.incr_mean_variance_axis"]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[964, "sklearn.utils.sparsefuncs.inplace_column_scale"]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[965, "sklearn.utils.sparsefuncs.inplace_csr_column_scale"]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[966, "sklearn.utils.sparsefuncs.inplace_row_scale"]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[967, "sklearn.utils.sparsefuncs.inplace_swap_column"]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[968, "sklearn.utils.sparsefuncs.inplace_swap_row"]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[969, "sklearn.utils.sparsefuncs.mean_variance_axis"]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[970, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1"]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[971, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2"]], "check_is_fitted() (in module sklearn.utils.validation)": [[972, "sklearn.utils.validation.check_is_fitted"]], "check_memory() (in module sklearn.utils.validation)": [[973, "sklearn.utils.validation.check_memory"]], "check_symmetric() (in module sklearn.utils.validation)": [[974, "sklearn.utils.validation.check_symmetric"]], "column_or_1d() (in module sklearn.utils.validation)": [[975, "sklearn.utils.validation.column_or_1d"]], "has_fit_parameter() (in module sklearn.utils.validation)": [[976, "sklearn.utils.validation.has_fit_parameter"]]}})