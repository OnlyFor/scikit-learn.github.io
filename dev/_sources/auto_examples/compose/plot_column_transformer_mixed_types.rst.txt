
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/compose/plot_column_transformer_mixed_types.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_compose_plot_column_transformer_mixed_types.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_compose_plot_column_transformer_mixed_types.py:


===================================
Column Transformer with Mixed Types
===================================

.. currentmodule:: sklearn

This example illustrates how to apply different preprocessing and feature
extraction pipelines to different subsets of features, using
:class:`~compose.ColumnTransformer`. This is particularly handy for the
case of datasets that contain heterogeneous data types, since we may want to
scale the numeric features and one-hot encode the categorical ones.

In this example, the numeric data is standard-scaled after mean-imputation,
while the categorical data is one-hot encoded after imputing missing values
with a new category (``'missing'``).

In addition, we show two different ways to dispatch the columns to the
particular pre-processor: by column names and by column data types.

Finally, the preprocessing pipeline is integrated in a full prediction pipeline
using :class:`~pipeline.Pipeline`, together with a simple classification
model.

.. GENERATED FROM PYTHON SOURCE LINES 26-50

.. code-block:: default


    # Author: Pedro Morales <part.morales@gmail.com>
    #
    # License: BSD 3 clause

    import numpy as np

    from sklearn.compose import ColumnTransformer
    from sklearn.datasets import fetch_openml
    from sklearn.pipeline import Pipeline
    from sklearn.impute import SimpleImputer
    from sklearn.preprocessing import StandardScaler, OneHotEncoder
    from sklearn.linear_model import LogisticRegression
    from sklearn.model_selection import train_test_split, GridSearchCV

    np.random.seed(0)

    # Load data from https://www.openml.org/d/40945
    X, y = fetch_openml("titanic", version=1, as_frame=True, return_X_y=True)

    # Alternatively X and y can be obtained directly from the frame attribute:
    # X = titanic.frame.drop('survived', axis=1)
    # y = titanic.frame['survived']








.. GENERATED FROM PYTHON SOURCE LINES 51-69

Use ``ColumnTransformer`` by selecting column by names
##############################################################################
 We will train our classifier with the following features:

 Numeric Features:

 * ``age``: float;
 * ``fare``: float.

 Categorical Features:

 * ``embarked``: categories encoded as strings ``{'C', 'S', 'Q'}``;
 * ``sex``: categories encoded as strings ``{'female', 'male'}``;
 * ``pclass``: ordinal integers ``{1, 2, 3}``.

 We create the preprocessing pipelines for both numeric and categorical data.
 Note that ``pclass`` could either be treated as a categorical or numeric
 feature.

.. GENERATED FROM PYTHON SOURCE LINES 69-96

.. code-block:: default


    numeric_features = ["age", "fare"]
    numeric_transformer = Pipeline(
        steps=[("imputer", SimpleImputer(strategy="median")), ("scaler", StandardScaler())]
    )

    categorical_features = ["embarked", "sex", "pclass"]
    categorical_transformer = OneHotEncoder(handle_unknown="ignore")

    preprocessor = ColumnTransformer(
        transformers=[
            ("num", numeric_transformer, numeric_features),
            ("cat", categorical_transformer, categorical_features),
        ]
    )

    # Append classifier to preprocessing pipeline.
    # Now we have a full prediction pipeline.
    clf = Pipeline(
        steps=[("preprocessor", preprocessor), ("classifier", LogisticRegression())]
    )

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

    clf.fit(X_train, y_train)
    print("model score: %.3f" % clf.score(X_test, y_test))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    model score: 0.790




.. GENERATED FROM PYTHON SOURCE LINES 97-101

HTML representation of ``Pipeline`` (display diagram)
##############################################################################
 When the ``Pipeline`` is printed out in a jupyter notebook an HTML
 representation of the estimator is displayed as follows:

.. GENERATED FROM PYTHON SOURCE LINES 101-106

.. code-block:: default

    from sklearn import set_config

    set_config(display="diagram")
    clf






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-e809b81c-7322-405e-a214-15495912bcf6 {color: black;background-color: white;}#sk-e809b81c-7322-405e-a214-15495912bcf6 pre{padding: 0;}#sk-e809b81c-7322-405e-a214-15495912bcf6 div.sk-toggleable {background-color: white;}#sk-e809b81c-7322-405e-a214-15495912bcf6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-e809b81c-7322-405e-a214-15495912bcf6 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-e809b81c-7322-405e-a214-15495912bcf6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-e809b81c-7322-405e-a214-15495912bcf6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-e809b81c-7322-405e-a214-15495912bcf6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-e809b81c-7322-405e-a214-15495912bcf6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-e809b81c-7322-405e-a214-15495912bcf6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-e809b81c-7322-405e-a214-15495912bcf6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-e809b81c-7322-405e-a214-15495912bcf6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-e809b81c-7322-405e-a214-15495912bcf6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-e809b81c-7322-405e-a214-15495912bcf6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-e809b81c-7322-405e-a214-15495912bcf6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-e809b81c-7322-405e-a214-15495912bcf6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-e809b81c-7322-405e-a214-15495912bcf6 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-e809b81c-7322-405e-a214-15495912bcf6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-e809b81c-7322-405e-a214-15495912bcf6 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-e809b81c-7322-405e-a214-15495912bcf6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-e809b81c-7322-405e-a214-15495912bcf6 div.sk-item {z-index: 1;}#sk-e809b81c-7322-405e-a214-15495912bcf6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-e809b81c-7322-405e-a214-15495912bcf6 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-e809b81c-7322-405e-a214-15495912bcf6 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-e809b81c-7322-405e-a214-15495912bcf6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-e809b81c-7322-405e-a214-15495912bcf6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-e809b81c-7322-405e-a214-15495912bcf6 div.sk-parallel-item:only-child::after {width: 0;}#sk-e809b81c-7322-405e-a214-15495912bcf6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-e809b81c-7322-405e-a214-15495912bcf6 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-e809b81c-7322-405e-a214-15495912bcf6 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-e809b81c-7322-405e-a214-15495912bcf6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-e809b81c-7322-405e-a214-15495912bcf6 div.sk-text-repr-fallback {display: none;}</style><div id="sk-e809b81c-7322-405e-a214-15495912bcf6" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,
                     ColumnTransformer(transformers=[(&#x27;num&#x27;,
                                                      Pipeline(steps=[(&#x27;imputer&#x27;,
                                                                       SimpleImputer(strategy=&#x27;median&#x27;)),
                                                                      (&#x27;scaler&#x27;,
                                                                       StandardScaler())]),
                                                      [&#x27;age&#x27;, &#x27;fare&#x27;]),
                                                     (&#x27;cat&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                                      [&#x27;embarked&#x27;, &#x27;sex&#x27;,
                                                       &#x27;pclass&#x27;])])),
                    (&#x27;classifier&#x27;, LogisticRegression())])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2b0066b4-6571-4cd4-b6f7-c920a14df810" type="checkbox" ><label for="2b0066b4-6571-4cd4-b6f7-c920a14df810" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,
                     ColumnTransformer(transformers=[(&#x27;num&#x27;,
                                                      Pipeline(steps=[(&#x27;imputer&#x27;,
                                                                       SimpleImputer(strategy=&#x27;median&#x27;)),
                                                                      (&#x27;scaler&#x27;,
                                                                       StandardScaler())]),
                                                      [&#x27;age&#x27;, &#x27;fare&#x27;]),
                                                     (&#x27;cat&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                                      [&#x27;embarked&#x27;, &#x27;sex&#x27;,
                                                       &#x27;pclass&#x27;])])),
                    (&#x27;classifier&#x27;, LogisticRegression())])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8c37bb25-90ca-4ebd-a38a-9b9e12edb553" type="checkbox" ><label for="8c37bb25-90ca-4ebd-a38a-9b9e12edb553" class="sk-toggleable__label sk-toggleable__label-arrow">preprocessor: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;,
                                     Pipeline(steps=[(&#x27;imputer&#x27;,
                                                      SimpleImputer(strategy=&#x27;median&#x27;)),
                                                     (&#x27;scaler&#x27;, StandardScaler())]),
                                     [&#x27;age&#x27;, &#x27;fare&#x27;]),
                                    (&#x27;cat&#x27;, OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     [&#x27;embarked&#x27;, &#x27;sex&#x27;, &#x27;pclass&#x27;])])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="64be817f-9033-4f9a-b2d4-3d372db2a8ac" type="checkbox" ><label for="64be817f-9033-4f9a-b2d4-3d372db2a8ac" class="sk-toggleable__label sk-toggleable__label-arrow">num</label><div class="sk-toggleable__content"><pre>[&#x27;age&#x27;, &#x27;fare&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0048b01c-b1a0-4525-b01a-1252922e0103" type="checkbox" ><label for="0048b01c-b1a0-4525-b01a-1252922e0103" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(strategy=&#x27;median&#x27;)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1466a76d-4e20-44f4-b065-f7050dd3596e" type="checkbox" ><label for="1466a76d-4e20-44f4-b065-f7050dd3596e" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ad9118f3-ec7f-4cc0-9a7b-54747c412a41" type="checkbox" ><label for="ad9118f3-ec7f-4cc0-9a7b-54747c412a41" class="sk-toggleable__label sk-toggleable__label-arrow">cat</label><div class="sk-toggleable__content"><pre>[&#x27;embarked&#x27;, &#x27;sex&#x27;, &#x27;pclass&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="830a2eeb-030a-4129-a841-5f0827ac9c78" type="checkbox" ><label for="830a2eeb-030a-4129-a841-5f0827ac9c78" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d76d4d5e-269c-4f71-b6de-1797e7acb775" type="checkbox" ><label for="d76d4d5e-269c-4f71-b6de-1797e7acb775" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 107-115

Use ``ColumnTransformer`` by selecting column by data types
##############################################################################
 When dealing with a cleaned dataset, the preprocessing can be automatic by
 using the data types of the column to decide whether to treat a column as a
 numerical or categorical feature.
 :func:`sklearn.compose.make_column_selector` gives this possibility.
 First, let's only select a subset of columns to simplify our
 example.

.. GENERATED FROM PYTHON SOURCE LINES 115-119

.. code-block:: default


    subset_feature = ["embarked", "sex", "pclass", "age", "fare"]
    X_train, X_test = X_train[subset_feature], X_test[subset_feature]








.. GENERATED FROM PYTHON SOURCE LINES 120-121

Then, we introspect the information regarding each column data type.

.. GENERATED FROM PYTHON SOURCE LINES 121-124

.. code-block:: default


    X_train.info()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <class 'pandas.core.frame.DataFrame'>
    Int64Index: 1047 entries, 1118 to 684
    Data columns (total 5 columns):
     #   Column    Non-Null Count  Dtype   
    ---  ------    --------------  -----   
     0   embarked  1045 non-null   category
     1   sex       1047 non-null   category
     2   pclass    1047 non-null   float64 
     3   age       841 non-null    float64 
     4   fare      1046 non-null   float64 
    dtypes: category(2), float64(3)
    memory usage: 35.0 KB




.. GENERATED FROM PYTHON SOURCE LINES 125-130

We can observe that the `embarked` and `sex` columns were tagged as
`category` columns when loading the data with ``fetch_openml``. Therefore, we
can use this information to dispatch the categorical columns to the
``categorical_transformer`` and the remaining columns to the
``numerical_transformer``.

.. GENERATED FROM PYTHON SOURCE LINES 132-137

.. note:: In practice, you will have to handle yourself the column data type.
   If you want some columns to be considered as `category`, you will have to
   convert them into categorical columns. If you are using pandas, you can
   refer to their documentation regarding `Categorical data
   <https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html>`_.

.. GENERATED FROM PYTHON SOURCE LINES 137-154

.. code-block:: default


    from sklearn.compose import make_column_selector as selector

    preprocessor = ColumnTransformer(
        transformers=[
            ("num", numeric_transformer, selector(dtype_exclude="category")),
            ("cat", categorical_transformer, selector(dtype_include="category")),
        ]
    )
    clf = Pipeline(
        steps=[("preprocessor", preprocessor), ("classifier", LogisticRegression())]
    )


    clf.fit(X_train, y_train)
    print("model score: %.3f" % clf.score(X_test, y_test))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    model score: 0.794




.. GENERATED FROM PYTHON SOURCE LINES 155-158

The resulting score is not exactly the same as the one from the previous
pipeline because the dtype-based selector treats the ``pclass`` column as
a numeric feature instead of a categorical feature as previously:

.. GENERATED FROM PYTHON SOURCE LINES 158-161

.. code-block:: default


    selector(dtype_exclude="category")(X_train)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['pclass', 'age', 'fare']



.. GENERATED FROM PYTHON SOURCE LINES 162-165

.. code-block:: default


    selector(dtype_include="category")(X_train)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['embarked', 'sex']



.. GENERATED FROM PYTHON SOURCE LINES 166-174

Using the prediction pipeline in a grid search
#############################################################################
 Grid search can also be performed on the different preprocessing steps
 defined in the ``ColumnTransformer`` object, together with the classifier's
 hyperparameters as part of the ``Pipeline``.
 We will search for both the imputer strategy of the numeric preprocessing
 and the regularization parameter of the logistic regression using
 :class:`~sklearn.model_selection.GridSearchCV`.

.. GENERATED FROM PYTHON SOURCE LINES 174-183

.. code-block:: default


    param_grid = {
        "preprocessor__num__imputer__strategy": ["mean", "median"],
        "classifier__C": [0.1, 1.0, 10, 100],
    }

    grid_search = GridSearchCV(clf, param_grid, cv=10)
    grid_search






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 {color: black;background-color: white;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 pre{padding: 0;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 div.sk-toggleable {background-color: white;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 div.sk-item {z-index: 1;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 div.sk-parallel-item:only-child::after {width: 0;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2 div.sk-text-repr-fallback {display: none;}</style><div id="sk-cfe5c53d-0423-4a98-87a3-35b37f60d7b2" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>GridSearchCV(cv=10,
                 estimator=Pipeline(steps=[(&#x27;preprocessor&#x27;,
                                            ColumnTransformer(transformers=[(&#x27;num&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputer&#x27;,
                                                                                              SimpleImputer(strategy=&#x27;median&#x27;)),
                                                                                             (&#x27;scaler&#x27;,
                                                                                              StandardScaler())]),
                                                                             &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb94851a7f0&gt;),
                                                                            (&#x27;cat&#x27;,
                                                                             OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                                                             &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb94851a3d0&gt;)])),
                                           (&#x27;classifier&#x27;, LogisticRegression())]),
                 param_grid={&#x27;classifier__C&#x27;: [0.1, 1.0, 10, 100],
                             &#x27;preprocessor__num__imputer__strategy&#x27;: [&#x27;mean&#x27;,
                                                                      &#x27;median&#x27;]})</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="122d00f2-786e-4d55-8fa6-995a1b778ac6" type="checkbox" ><label for="122d00f2-786e-4d55-8fa6-995a1b778ac6" class="sk-toggleable__label sk-toggleable__label-arrow">GridSearchCV</label><div class="sk-toggleable__content"><pre>GridSearchCV(cv=10,
                 estimator=Pipeline(steps=[(&#x27;preprocessor&#x27;,
                                            ColumnTransformer(transformers=[(&#x27;num&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputer&#x27;,
                                                                                              SimpleImputer(strategy=&#x27;median&#x27;)),
                                                                                             (&#x27;scaler&#x27;,
                                                                                              StandardScaler())]),
                                                                             &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb94851a7f0&gt;),
                                                                            (&#x27;cat&#x27;,
                                                                             OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                                                             &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb94851a3d0&gt;)])),
                                           (&#x27;classifier&#x27;, LogisticRegression())]),
                 param_grid={&#x27;classifier__C&#x27;: [0.1, 1.0, 10, 100],
                             &#x27;preprocessor__num__imputer__strategy&#x27;: [&#x27;mean&#x27;,
                                                                      &#x27;median&#x27;]})</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2d2150df-8a74-40ac-bd0a-96fcaea719ab" type="checkbox" ><label for="2d2150df-8a74-40ac-bd0a-96fcaea719ab" class="sk-toggleable__label sk-toggleable__label-arrow">preprocessor: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;,
                                     Pipeline(steps=[(&#x27;imputer&#x27;,
                                                      SimpleImputer(strategy=&#x27;median&#x27;)),
                                                     (&#x27;scaler&#x27;, StandardScaler())]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb94851a7f0&gt;),
                                    (&#x27;cat&#x27;, OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb94851a3d0&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="67a7b4f0-1530-409d-8842-57aed3298a58" type="checkbox" ><label for="67a7b4f0-1530-409d-8842-57aed3298a58" class="sk-toggleable__label sk-toggleable__label-arrow">num</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb94851a7f0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="320a982a-4d22-4b19-9355-1deaa81ebdb3" type="checkbox" ><label for="320a982a-4d22-4b19-9355-1deaa81ebdb3" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(strategy=&#x27;median&#x27;)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="14c129ab-99f1-4773-ac21-940a66684616" type="checkbox" ><label for="14c129ab-99f1-4773-ac21-940a66684616" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="47e99b11-c8d9-4925-a445-1c2bbb032353" type="checkbox" ><label for="47e99b11-c8d9-4925-a445-1c2bbb032353" class="sk-toggleable__label sk-toggleable__label-arrow">cat</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb94851a3d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1474c07f-859a-497d-814e-458e86ecbb77" type="checkbox" ><label for="1474c07f-859a-497d-814e-458e86ecbb77" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9fe0ad60-1eb4-4dbe-88d3-b8a33b0115e9" type="checkbox" ><label for="9fe0ad60-1eb4-4dbe-88d3-b8a33b0115e9" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression()</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 184-187

Calling 'fit' triggers the cross-validated search for the best
hyper-parameters combination:


.. GENERATED FROM PYTHON SOURCE LINES 187-192

.. code-block:: default

    grid_search.fit(X_train, y_train)

    print("Best params:")
    print(grid_search.best_params_)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Best params:
    {'classifier__C': 0.1, 'preprocessor__num__imputer__strategy': 'mean'}




.. GENERATED FROM PYTHON SOURCE LINES 193-194

The internal cross-validation scores obtained by those parameters is:

.. GENERATED FROM PYTHON SOURCE LINES 194-196

.. code-block:: default

    print(f"Internal CV score: {grid_search.best_score_:.3f}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Internal CV score: 0.784




.. GENERATED FROM PYTHON SOURCE LINES 197-198

We can also introspect the top grid search results as a pandas dataframe:

.. GENERATED FROM PYTHON SOURCE LINES 198-211

.. code-block:: default

    import pandas as pd

    cv_results = pd.DataFrame(grid_search.cv_results_)
    cv_results = cv_results.sort_values("mean_test_score", ascending=False)
    cv_results[
        [
            "mean_test_score",
            "std_test_score",
            "param_preprocessor__num__imputer__strategy",
            "param_classifier__C",
        ]
    ].head(5)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>mean_test_score</th>
          <th>std_test_score</th>
          <th>param_preprocessor__num__imputer__strategy</th>
          <th>param_classifier__C</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.784167</td>
          <td>0.035824</td>
          <td>mean</td>
          <td>0.1</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0.780366</td>
          <td>0.032722</td>
          <td>mean</td>
          <td>1.0</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0.780348</td>
          <td>0.037245</td>
          <td>median</td>
          <td>0.1</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0.779414</td>
          <td>0.033105</td>
          <td>mean</td>
          <td>10</td>
        </tr>
        <tr>
          <th>6</th>
          <td>0.779414</td>
          <td>0.033105</td>
          <td>mean</td>
          <td>100</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 212-216

The best hyper-parameters have be used to re-fit a final model on the full
training set. We can evaluate that final model on held out test data that was
not used for hyperparameter tuning.


.. GENERATED FROM PYTHON SOURCE LINES 216-222

.. code-block:: default

    print(
        (
            "best logistic regression from grid search: %.3f"
            % grid_search.score(X_test, y_test)
        )
    )




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    best logistic regression from grid search: 0.794





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.337 seconds)


.. _sphx_glr_download_auto_examples_compose_plot_column_transformer_mixed_types.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/compose/plot_column_transformer_mixed_types.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_column_transformer_mixed_types.py <plot_column_transformer_mixed_types.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_column_transformer_mixed_types.ipynb <plot_column_transformer_mixed_types.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
