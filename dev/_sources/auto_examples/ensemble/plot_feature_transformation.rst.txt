
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/ensemble/plot_feature_transformation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_ensemble_plot_feature_transformation.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_ensemble_plot_feature_transformation.py:


===============================================
Feature transformations with ensembles of trees
===============================================

Transform your features into a higher dimensional, sparse space. Then train a
linear model on these features.

First fit an ensemble of trees (totally random trees, a random forest, or
gradient boosted trees) on the training set. Then each leaf of each tree in the
ensemble is assigned a fixed arbitrary feature index in a new feature space.
These leaf indices are then encoded in a one-hot fashion.

Each sample goes through the decisions of each tree of the ensemble and ends up
in one leaf per tree. The sample is encoded by setting feature values for these
leaves to 1 and the other feature values to 0.

The resulting transformer has then learned a supervised, sparse,
high-dimensional categorical embedding of the data.

.. GENERATED FROM PYTHON SOURCE LINES 21-32

.. code-block:: default


    # Author: Tim Head <betatim@gmail.com>
    #
    # License: BSD 3 clause

    print(__doc__)

    from sklearn import set_config

    set_config(display="diagram")








.. GENERATED FROM PYTHON SOURCE LINES 33-42

First, we will create a large dataset and split it into three sets:

- a set to train the ensemble methods which are later used to as a feature
  engineering transformer;
- a set to train the linear model;
- a set to test the linear model.

It is important to split the data in such way to avoid overfitting by leaking
data.

.. GENERATED FROM PYTHON SOURCE LINES 42-55

.. code-block:: default


    from sklearn.datasets import make_classification
    from sklearn.model_selection import train_test_split

    X, y = make_classification(n_samples=80000, random_state=10)

    X_full_train, X_test, y_full_train, y_test = train_test_split(
        X, y, test_size=0.5, random_state=10
    )
    X_train_ensemble, X_train_linear, y_train_ensemble, y_train_linear = train_test_split(
        X_full_train, y_full_train, test_size=0.5, random_state=10
    )








.. GENERATED FROM PYTHON SOURCE LINES 56-58

For each of the ensemble methods, we will use 10 estimators and a maximum
depth of 3 levels.

.. GENERATED FROM PYTHON SOURCE LINES 58-62

.. code-block:: default


    n_estimators = 10
    max_depth = 3








.. GENERATED FROM PYTHON SOURCE LINES 63-65

First, we will start by training the random forest and gradient boosting on
the separated training set

.. GENERATED FROM PYTHON SOURCE LINES 65-78

.. code-block:: default


    from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier

    random_forest = RandomForestClassifier(
        n_estimators=n_estimators, max_depth=max_depth, random_state=10
    )
    random_forest.fit(X_train_ensemble, y_train_ensemble)

    gradient_boosting = GradientBoostingClassifier(
        n_estimators=n_estimators, max_depth=max_depth, random_state=10
    )
    _ = gradient_boosting.fit(X_train_ensemble, y_train_ensemble)








.. GENERATED FROM PYTHON SOURCE LINES 79-81

The :class:`~sklearn.ensemble.RandomTreesEmbedding` is an unsupervised method
and thus does not required to be trained independently.

.. GENERATED FROM PYTHON SOURCE LINES 81-88

.. code-block:: default


    from sklearn.ensemble import RandomTreesEmbedding

    random_tree_embedding = RandomTreesEmbedding(
        n_estimators=n_estimators, max_depth=max_depth, random_state=0
    )








.. GENERATED FROM PYTHON SOURCE LINES 89-94

Now, we will create three pipelines that will use the above embedding as
a preprocessing stage.

The random trees embedding can be directly pipelined with the logistic
regression because it is a standard scikit-learn transformer.

.. GENERATED FROM PYTHON SOURCE LINES 94-101

.. code-block:: default


    from sklearn.linear_model import LogisticRegression
    from sklearn.pipeline import make_pipeline

    rt_model = make_pipeline(random_tree_embedding, LogisticRegression(max_iter=1000))
    rt_model.fit(X_train_linear, y_train_linear)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 {color: black;background-color: white;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 pre{padding: 0;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 div.sk-toggleable {background-color: white;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 div.sk-estimator:hover {background-color: #d4ebff;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 div.sk-item {z-index: 1;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 div.sk-parallel-item:only-child::after {width: 0;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-581c3829-9b8b-45e0-adb2-178123fc6c69 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-581c3829-9b8b-45e0-adb2-178123fc6c69" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="aa7505db-9568-4dfd-a3f8-64c52f866c2e" type="checkbox" ><label class="sk-toggleable__label" for="aa7505db-9568-4dfd-a3f8-64c52f866c2e">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('randomtreesembedding',
                     RandomTreesEmbedding(max_depth=3, n_estimators=10,
                                          random_state=0)),
                    ('logisticregression', LogisticRegression(max_iter=1000))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2fe22d6b-545a-4544-90ff-df2cdccb5a70" type="checkbox" ><label class="sk-toggleable__label" for="2fe22d6b-545a-4544-90ff-df2cdccb5a70">RandomTreesEmbedding</label><div class="sk-toggleable__content"><pre>RandomTreesEmbedding(max_depth=3, n_estimators=10, random_state=0)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="698b0dbb-07c3-4654-a02f-ede4eec44007" type="checkbox" ><label class="sk-toggleable__label" for="698b0dbb-07c3-4654-a02f-ede4eec44007">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(max_iter=1000)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 102-106

Then, we can pipeline random forest or gradient boosting with a logistic
regression. However, the feature transformation will happen by calling the
method `apply`. The pipeline in scikit-learn expects a call to `transform`.
Therefore, we wrapped the call to `apply` within a `FunctionTransformer`.

.. GENERATED FROM PYTHON SOURCE LINES 106-125

.. code-block:: default


    from sklearn.preprocessing import FunctionTransformer
    from sklearn.preprocessing import OneHotEncoder


    def rf_apply(X, model):
        return model.apply(X)


    rf_leaves_yielder = FunctionTransformer(rf_apply, kw_args={"model": random_forest})

    rf_model = make_pipeline(
        rf_leaves_yielder,
        OneHotEncoder(handle_unknown="ignore"),
        LogisticRegression(max_iter=1000),
    )
    rf_model.fit(X_train_linear, y_train_linear)







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-275f137f-4fc9-4989-8580-91f24d62172a {color: black;background-color: white;}#sk-275f137f-4fc9-4989-8580-91f24d62172a pre{padding: 0;}#sk-275f137f-4fc9-4989-8580-91f24d62172a div.sk-toggleable {background-color: white;}#sk-275f137f-4fc9-4989-8580-91f24d62172a label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-275f137f-4fc9-4989-8580-91f24d62172a div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-275f137f-4fc9-4989-8580-91f24d62172a div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-275f137f-4fc9-4989-8580-91f24d62172a input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-275f137f-4fc9-4989-8580-91f24d62172a div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-275f137f-4fc9-4989-8580-91f24d62172a div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-275f137f-4fc9-4989-8580-91f24d62172a input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-275f137f-4fc9-4989-8580-91f24d62172a div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-275f137f-4fc9-4989-8580-91f24d62172a div.sk-estimator:hover {background-color: #d4ebff;}#sk-275f137f-4fc9-4989-8580-91f24d62172a div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-275f137f-4fc9-4989-8580-91f24d62172a div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-275f137f-4fc9-4989-8580-91f24d62172a div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-275f137f-4fc9-4989-8580-91f24d62172a div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-275f137f-4fc9-4989-8580-91f24d62172a div.sk-item {z-index: 1;}#sk-275f137f-4fc9-4989-8580-91f24d62172a div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-275f137f-4fc9-4989-8580-91f24d62172a div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-275f137f-4fc9-4989-8580-91f24d62172a div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-275f137f-4fc9-4989-8580-91f24d62172a div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-275f137f-4fc9-4989-8580-91f24d62172a div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-275f137f-4fc9-4989-8580-91f24d62172a div.sk-parallel-item:only-child::after {width: 0;}#sk-275f137f-4fc9-4989-8580-91f24d62172a div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-275f137f-4fc9-4989-8580-91f24d62172a div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-275f137f-4fc9-4989-8580-91f24d62172a div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-275f137f-4fc9-4989-8580-91f24d62172a div.sk-container {display: inline-block;position: relative;}</style><div id="sk-275f137f-4fc9-4989-8580-91f24d62172a" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="61ad3d16-174f-462b-8213-87ee1905e4ac" type="checkbox" ><label class="sk-toggleable__label" for="61ad3d16-174f-462b-8213-87ee1905e4ac">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('functiontransformer',
                     FunctionTransformer(func=<function rf_apply at 0x7f5c69f78c10>,
                                         kw_args={'model': RandomForestClassifier(max_depth=3,
                                                                                  n_estimators=10,
                                                                                  random_state=10)})),
                    ('onehotencoder', OneHotEncoder(handle_unknown='ignore')),
                    ('logisticregression', LogisticRegression(max_iter=1000))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0e0817c5-5e3e-4875-ada8-596d50b3c40f" type="checkbox" ><label class="sk-toggleable__label" for="0e0817c5-5e3e-4875-ada8-596d50b3c40f">FunctionTransformer</label><div class="sk-toggleable__content"><pre>FunctionTransformer(func=<function rf_apply at 0x7f5c69f78c10>,
                        kw_args={'model': RandomForestClassifier(max_depth=3,
                                                                 n_estimators=10,
                                                                 random_state=10)})</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="179299dd-6349-4ee9-b385-85a2161627f3" type="checkbox" ><label class="sk-toggleable__label" for="179299dd-6349-4ee9-b385-85a2161627f3">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3889b1b4-316a-4a42-a40f-abd3e05d2f7d" type="checkbox" ><label class="sk-toggleable__label" for="3889b1b4-316a-4a42-a40f-abd3e05d2f7d">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(max_iter=1000)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 126-141

.. code-block:: default

    def gbdt_apply(X, model):
        return model.apply(X)[:, :, 0]


    gbdt_leaves_yielder = FunctionTransformer(
        gbdt_apply, kw_args={"model": gradient_boosting}
    )

    gbdt_model = make_pipeline(
        gbdt_leaves_yielder,
        OneHotEncoder(handle_unknown="ignore"),
        LogisticRegression(max_iter=1000),
    )
    gbdt_model.fit(X_train_linear, y_train_linear)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-bca14204-c387-42c6-8e0d-302d8d623d07 {color: black;background-color: white;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 pre{padding: 0;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 div.sk-toggleable {background-color: white;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 div.sk-estimator:hover {background-color: #d4ebff;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 div.sk-item {z-index: 1;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 div.sk-parallel-item:only-child::after {width: 0;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-bca14204-c387-42c6-8e0d-302d8d623d07 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-bca14204-c387-42c6-8e0d-302d8d623d07" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a211f215-c572-4b69-a756-13a85b792729" type="checkbox" ><label class="sk-toggleable__label" for="a211f215-c572-4b69-a756-13a85b792729">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('functiontransformer',
                     FunctionTransformer(func=<function gbdt_apply at 0x7f5c69dccee0>,
                                         kw_args={'model': GradientBoostingClassifier(n_estimators=10,
                                                                                      random_state=10)})),
                    ('onehotencoder', OneHotEncoder(handle_unknown='ignore')),
                    ('logisticregression', LogisticRegression(max_iter=1000))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1a858d41-e832-45dc-bc5b-4c33901c21ac" type="checkbox" ><label class="sk-toggleable__label" for="1a858d41-e832-45dc-bc5b-4c33901c21ac">FunctionTransformer</label><div class="sk-toggleable__content"><pre>FunctionTransformer(func=<function gbdt_apply at 0x7f5c69dccee0>,
                        kw_args={'model': GradientBoostingClassifier(n_estimators=10,
                                                                     random_state=10)})</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="02e0222b-ff64-4a37-a889-8a609997324c" type="checkbox" ><label class="sk-toggleable__label" for="02e0222b-ff64-4a37-a889-8a609997324c">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9eff13d5-d929-4b72-9a5e-b0ea7f92b096" type="checkbox" ><label class="sk-toggleable__label" for="9eff13d5-d929-4b72-9a5e-b0ea7f92b096">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(max_iter=1000)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 142-143

We can finally show the different ROC curves for all the models.

.. GENERATED FROM PYTHON SOURCE LINES 143-164

.. code-block:: default


    import matplotlib.pyplot as plt
    from sklearn.metrics import RocCurveDisplay

    fig, ax = plt.subplots()

    models = [
        ("RT embedding -> LR", rt_model),
        ("RF", random_forest),
        ("RF embedding -> LR", rf_model),
        ("GBDT", gradient_boosting),
        ("GBDT embedding -> LR", gbdt_model),
    ]

    model_displays = {}
    for name, pipeline in models:
        model_displays[name] = RocCurveDisplay.from_estimator(
            pipeline, X_test, y_test, ax=ax, name=name
        )
    _ = ax.set_title("ROC curve")




.. image-sg:: /auto_examples/ensemble/images/sphx_glr_plot_feature_transformation_001.png
   :alt: ROC curve
   :srcset: /auto_examples/ensemble/images/sphx_glr_plot_feature_transformation_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 165-172

.. code-block:: default

    fig, ax = plt.subplots()
    for name, pipeline in models:
        model_displays[name].plot(ax=ax)

    ax.set_xlim(0, 0.2)
    ax.set_ylim(0.8, 1)
    _ = ax.set_title("ROC curve (zoomed in at top left)")



.. image-sg:: /auto_examples/ensemble/images/sphx_glr_plot_feature_transformation_002.png
   :alt: ROC curve (zoomed in at top left)
   :srcset: /auto_examples/ensemble/images/sphx_glr_plot_feature_transformation_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.246 seconds)


.. _sphx_glr_download_auto_examples_ensemble_plot_feature_transformation.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/ensemble/plot_feature_transformation.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_feature_transformation.py <plot_feature_transformation.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_feature_transformation.ipynb <plot_feature_transformation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
