
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/ensemble/plot_feature_transformation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_ensemble_plot_feature_transformation.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_ensemble_plot_feature_transformation.py:


===============================================
Feature transformations with ensembles of trees
===============================================

Transform your features into a higher dimensional, sparse space. Then train a
linear model on these features.

First fit an ensemble of trees (totally random trees, a random forest, or
gradient boosted trees) on the training set. Then each leaf of each tree in the
ensemble is assigned a fixed arbitrary feature index in a new feature space.
These leaf indices are then encoded in a one-hot fashion.

Each sample goes through the decisions of each tree of the ensemble and ends up
in one leaf per tree. The sample is encoded by setting feature values for these
leaves to 1 and the other feature values to 0.

The resulting transformer has then learned a supervised, sparse,
high-dimensional categorical embedding of the data.

.. GENERATED FROM PYTHON SOURCE LINES 22-28

.. code-block:: default



    # Author: Tim Head <betatim@gmail.com>
    #
    # License: BSD 3 clause








.. GENERATED FROM PYTHON SOURCE LINES 29-38

First, we will create a large dataset and split it into three sets:

- a set to train the ensemble methods which are later used to as a feature
  engineering transformer;
- a set to train the linear model;
- a set to test the linear model.

It is important to split the data in such way to avoid overfitting by leaking
data.

.. GENERATED FROM PYTHON SOURCE LINES 38-51

.. code-block:: default


    from sklearn.datasets import make_classification
    from sklearn.model_selection import train_test_split

    X, y = make_classification(n_samples=80000, random_state=10)

    X_full_train, X_test, y_full_train, y_test = train_test_split(
        X, y, test_size=0.5, random_state=10
    )
    X_train_ensemble, X_train_linear, y_train_ensemble, y_train_linear = train_test_split(
        X_full_train, y_full_train, test_size=0.5, random_state=10
    )








.. GENERATED FROM PYTHON SOURCE LINES 52-54

For each of the ensemble methods, we will use 10 estimators and a maximum
depth of 3 levels.

.. GENERATED FROM PYTHON SOURCE LINES 54-58

.. code-block:: default


    n_estimators = 10
    max_depth = 3








.. GENERATED FROM PYTHON SOURCE LINES 59-61

First, we will start by training the random forest and gradient boosting on
the separated training set

.. GENERATED FROM PYTHON SOURCE LINES 61-74

.. code-block:: default


    from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier

    random_forest = RandomForestClassifier(
        n_estimators=n_estimators, max_depth=max_depth, random_state=10
    )
    random_forest.fit(X_train_ensemble, y_train_ensemble)

    gradient_boosting = GradientBoostingClassifier(
        n_estimators=n_estimators, max_depth=max_depth, random_state=10
    )
    _ = gradient_boosting.fit(X_train_ensemble, y_train_ensemble)








.. GENERATED FROM PYTHON SOURCE LINES 75-77

The :class:`~sklearn.ensemble.RandomTreesEmbedding` is an unsupervised method
and thus does not required to be trained independently.

.. GENERATED FROM PYTHON SOURCE LINES 77-84

.. code-block:: default


    from sklearn.ensemble import RandomTreesEmbedding

    random_tree_embedding = RandomTreesEmbedding(
        n_estimators=n_estimators, max_depth=max_depth, random_state=0
    )








.. GENERATED FROM PYTHON SOURCE LINES 85-90

Now, we will create three pipelines that will use the above embedding as
a preprocessing stage.

The random trees embedding can be directly pipelined with the logistic
regression because it is a standard scikit-learn transformer.

.. GENERATED FROM PYTHON SOURCE LINES 90-97

.. code-block:: default


    from sklearn.linear_model import LogisticRegression
    from sklearn.pipeline import make_pipeline

    rt_model = make_pipeline(random_tree_embedding, LogisticRegression(max_iter=1000))
    rt_model.fit(X_train_linear, y_train_linear)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-63844c12-7869-434c-bc8f-39a902b38233 {color: black;background-color: white;}#sk-63844c12-7869-434c-bc8f-39a902b38233 pre{padding: 0;}#sk-63844c12-7869-434c-bc8f-39a902b38233 div.sk-toggleable {background-color: white;}#sk-63844c12-7869-434c-bc8f-39a902b38233 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-63844c12-7869-434c-bc8f-39a902b38233 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-63844c12-7869-434c-bc8f-39a902b38233 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-63844c12-7869-434c-bc8f-39a902b38233 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-63844c12-7869-434c-bc8f-39a902b38233 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-63844c12-7869-434c-bc8f-39a902b38233 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-63844c12-7869-434c-bc8f-39a902b38233 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-63844c12-7869-434c-bc8f-39a902b38233 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-63844c12-7869-434c-bc8f-39a902b38233 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-63844c12-7869-434c-bc8f-39a902b38233 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-63844c12-7869-434c-bc8f-39a902b38233 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-63844c12-7869-434c-bc8f-39a902b38233 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-63844c12-7869-434c-bc8f-39a902b38233 div.sk-estimator:hover {background-color: #d4ebff;}#sk-63844c12-7869-434c-bc8f-39a902b38233 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-63844c12-7869-434c-bc8f-39a902b38233 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-63844c12-7869-434c-bc8f-39a902b38233 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-63844c12-7869-434c-bc8f-39a902b38233 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-63844c12-7869-434c-bc8f-39a902b38233 div.sk-item {z-index: 1;}#sk-63844c12-7869-434c-bc8f-39a902b38233 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-63844c12-7869-434c-bc8f-39a902b38233 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-63844c12-7869-434c-bc8f-39a902b38233 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-63844c12-7869-434c-bc8f-39a902b38233 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-63844c12-7869-434c-bc8f-39a902b38233 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-63844c12-7869-434c-bc8f-39a902b38233 div.sk-parallel-item:only-child::after {width: 0;}#sk-63844c12-7869-434c-bc8f-39a902b38233 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-63844c12-7869-434c-bc8f-39a902b38233 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-63844c12-7869-434c-bc8f-39a902b38233 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-63844c12-7869-434c-bc8f-39a902b38233 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-63844c12-7869-434c-bc8f-39a902b38233 div.sk-text-repr-fallback {display: none;}</style><div id="sk-63844c12-7869-434c-bc8f-39a902b38233" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;randomtreesembedding&#x27;,
                     RandomTreesEmbedding(max_depth=3, n_estimators=10,
                                          random_state=0)),
                    (&#x27;logisticregression&#x27;, LogisticRegression(max_iter=1000))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="30896f9e-58bb-4c9a-9de1-088b500b1a5e" type="checkbox" ><label for="30896f9e-58bb-4c9a-9de1-088b500b1a5e" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;randomtreesembedding&#x27;,
                     RandomTreesEmbedding(max_depth=3, n_estimators=10,
                                          random_state=0)),
                    (&#x27;logisticregression&#x27;, LogisticRegression(max_iter=1000))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="89f56023-e27f-4691-a4df-9776d2246b98" type="checkbox" ><label for="89f56023-e27f-4691-a4df-9776d2246b98" class="sk-toggleable__label sk-toggleable__label-arrow">RandomTreesEmbedding</label><div class="sk-toggleable__content"><pre>RandomTreesEmbedding(max_depth=3, n_estimators=10, random_state=0)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8414f3eb-2580-492e-aa0a-b404b3b9bd91" type="checkbox" ><label for="8414f3eb-2580-492e-aa0a-b404b3b9bd91" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(max_iter=1000)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 98-102

Then, we can pipeline random forest or gradient boosting with a logistic
regression. However, the feature transformation will happen by calling the
method `apply`. The pipeline in scikit-learn expects a call to `transform`.
Therefore, we wrapped the call to `apply` within a `FunctionTransformer`.

.. GENERATED FROM PYTHON SOURCE LINES 102-121

.. code-block:: default


    from sklearn.preprocessing import FunctionTransformer
    from sklearn.preprocessing import OneHotEncoder


    def rf_apply(X, model):
        return model.apply(X)


    rf_leaves_yielder = FunctionTransformer(rf_apply, kw_args={"model": random_forest})

    rf_model = make_pipeline(
        rf_leaves_yielder,
        OneHotEncoder(handle_unknown="ignore"),
        LogisticRegression(max_iter=1000),
    )
    rf_model.fit(X_train_linear, y_train_linear)







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 {color: black;background-color: white;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 pre{padding: 0;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 div.sk-toggleable {background-color: white;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 div.sk-item {z-index: 1;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 div.sk-parallel-item:only-child::after {width: 0;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-020487ae-a4be-4ff7-b855-a3a8132a51b6 div.sk-text-repr-fallback {display: none;}</style><div id="sk-020487ae-a4be-4ff7-b855-a3a8132a51b6" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;functiontransformer&#x27;,
                     FunctionTransformer(func=&lt;function rf_apply at 0x7f07177668b0&gt;,
                                         kw_args={&#x27;model&#x27;: RandomForestClassifier(max_depth=3,
                                                                                  n_estimators=10,
                                                                                  random_state=10)})),
                    (&#x27;onehotencoder&#x27;, OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)),
                    (&#x27;logisticregression&#x27;, LogisticRegression(max_iter=1000))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2b0fa72c-62de-44c1-99b7-48424b7788b4" type="checkbox" ><label for="2b0fa72c-62de-44c1-99b7-48424b7788b4" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;functiontransformer&#x27;,
                     FunctionTransformer(func=&lt;function rf_apply at 0x7f07177668b0&gt;,
                                         kw_args={&#x27;model&#x27;: RandomForestClassifier(max_depth=3,
                                                                                  n_estimators=10,
                                                                                  random_state=10)})),
                    (&#x27;onehotencoder&#x27;, OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)),
                    (&#x27;logisticregression&#x27;, LogisticRegression(max_iter=1000))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="632e9e20-2226-45d3-9211-2ffc887ea1ef" type="checkbox" ><label for="632e9e20-2226-45d3-9211-2ffc887ea1ef" class="sk-toggleable__label sk-toggleable__label-arrow">FunctionTransformer</label><div class="sk-toggleable__content"><pre>FunctionTransformer(func=&lt;function rf_apply at 0x7f07177668b0&gt;,
                        kw_args={&#x27;model&#x27;: RandomForestClassifier(max_depth=3,
                                                                 n_estimators=10,
                                                                 random_state=10)})</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5ca3cb21-ea34-40be-85fe-1ea2f3a6dfe2" type="checkbox" ><label for="5ca3cb21-ea34-40be-85fe-1ea2f3a6dfe2" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0b21058c-d425-4330-983e-88b9390ec46e" type="checkbox" ><label for="0b21058c-d425-4330-983e-88b9390ec46e" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(max_iter=1000)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 122-137

.. code-block:: default

    def gbdt_apply(X, model):
        return model.apply(X)[:, :, 0]


    gbdt_leaves_yielder = FunctionTransformer(
        gbdt_apply, kw_args={"model": gradient_boosting}
    )

    gbdt_model = make_pipeline(
        gbdt_leaves_yielder,
        OneHotEncoder(handle_unknown="ignore"),
        LogisticRegression(max_iter=1000),
    )
    gbdt_model.fit(X_train_linear, y_train_linear)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 {color: black;background-color: white;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 pre{padding: 0;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 div.sk-toggleable {background-color: white;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 div.sk-estimator:hover {background-color: #d4ebff;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 div.sk-item {z-index: 1;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 div.sk-parallel-item:only-child::after {width: 0;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035 div.sk-text-repr-fallback {display: none;}</style><div id="sk-e2bfe1a3-4763-41a7-a517-2d576d9c1035" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;functiontransformer&#x27;,
                     FunctionTransformer(func=&lt;function gbdt_apply at 0x7f0716b0bb80&gt;,
                                         kw_args={&#x27;model&#x27;: GradientBoostingClassifier(n_estimators=10,
                                                                                      random_state=10)})),
                    (&#x27;onehotencoder&#x27;, OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)),
                    (&#x27;logisticregression&#x27;, LogisticRegression(max_iter=1000))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d16c3339-52c4-48ce-bb0e-c4a9bc09a47e" type="checkbox" ><label for="d16c3339-52c4-48ce-bb0e-c4a9bc09a47e" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;functiontransformer&#x27;,
                     FunctionTransformer(func=&lt;function gbdt_apply at 0x7f0716b0bb80&gt;,
                                         kw_args={&#x27;model&#x27;: GradientBoostingClassifier(n_estimators=10,
                                                                                      random_state=10)})),
                    (&#x27;onehotencoder&#x27;, OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)),
                    (&#x27;logisticregression&#x27;, LogisticRegression(max_iter=1000))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0df523fb-e9c2-4779-9f91-7658c60c7ed0" type="checkbox" ><label for="0df523fb-e9c2-4779-9f91-7658c60c7ed0" class="sk-toggleable__label sk-toggleable__label-arrow">FunctionTransformer</label><div class="sk-toggleable__content"><pre>FunctionTransformer(func=&lt;function gbdt_apply at 0x7f0716b0bb80&gt;,
                        kw_args={&#x27;model&#x27;: GradientBoostingClassifier(n_estimators=10,
                                                                     random_state=10)})</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="59ba8632-0990-4f62-aa89-fb0f7b2a989b" type="checkbox" ><label for="59ba8632-0990-4f62-aa89-fb0f7b2a989b" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1bb7c9ee-c8ab-4f2a-a32b-298754e6cd5b" type="checkbox" ><label for="1bb7c9ee-c8ab-4f2a-a32b-298754e6cd5b" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(max_iter=1000)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 138-139

We can finally show the different ROC curves for all the models.

.. GENERATED FROM PYTHON SOURCE LINES 139-160

.. code-block:: default


    import matplotlib.pyplot as plt
    from sklearn.metrics import RocCurveDisplay

    fig, ax = plt.subplots()

    models = [
        ("RT embedding -> LR", rt_model),
        ("RF", random_forest),
        ("RF embedding -> LR", rf_model),
        ("GBDT", gradient_boosting),
        ("GBDT embedding -> LR", gbdt_model),
    ]

    model_displays = {}
    for name, pipeline in models:
        model_displays[name] = RocCurveDisplay.from_estimator(
            pipeline, X_test, y_test, ax=ax, name=name
        )
    _ = ax.set_title("ROC curve")




.. image-sg:: /auto_examples/ensemble/images/sphx_glr_plot_feature_transformation_001.png
   :alt: ROC curve
   :srcset: /auto_examples/ensemble/images/sphx_glr_plot_feature_transformation_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 161-168

.. code-block:: default

    fig, ax = plt.subplots()
    for name, pipeline in models:
        model_displays[name].plot(ax=ax)

    ax.set_xlim(0, 0.2)
    ax.set_ylim(0.8, 1)
    _ = ax.set_title("ROC curve (zoomed in at top left)")



.. image-sg:: /auto_examples/ensemble/images/sphx_glr_plot_feature_transformation_002.png
   :alt: ROC curve (zoomed in at top left)
   :srcset: /auto_examples/ensemble/images/sphx_glr_plot_feature_transformation_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.272 seconds)


.. _sphx_glr_download_auto_examples_ensemble_plot_feature_transformation.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/ensemble/plot_feature_transformation.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_feature_transformation.py <plot_feature_transformation.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_feature_transformation.ipynb <plot_feature_transformation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
