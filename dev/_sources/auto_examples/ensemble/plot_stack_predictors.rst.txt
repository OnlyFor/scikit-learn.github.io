
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/ensemble/plot_stack_predictors.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_ensemble_plot_stack_predictors.py:


=================================
Combine predictors using stacking
=================================

.. currentmodule:: sklearn

Stacking refers to a method to blend estimators. In this strategy, some
estimators are individually fitted on some training data while a final
estimator is trained using the stacked predictions of these base estimators.

In this example, we illustrate the use case in which different regressors are
stacked together and a final linear penalized regressor is used to output the
prediction. We compare the performance of each individual regressor with the
stacking strategy. Stacking slightly improves the overall performance.

.. GENERATED FROM PYTHON SOURCE LINES 18-27

.. code-block:: default


    # Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>
    #          Maria Telenczuk    <https://github.com/maikia>
    # License: BSD 3 clause

    from sklearn import set_config

    set_config(display="diagram")








.. GENERATED FROM PYTHON SOURCE LINES 28-44

Download the dataset
#############################################################################

 We will use `Ames Housing`_ dataset which was first compiled by Dean De Cock
 and became better known after it was used in Kaggle challenge. It is a set
 of 1460 residential homes in Ames, Iowa, each described by 80 features. We
 will use it to predict the final logarithmic price of the houses. In this
 example we will use only 20 most interesting features chosen using
 GradientBoostingRegressor() and limit number of entries (here we won't go
 into the details on how to select the most interesting features).

 The Ames housing dataset is not shipped with scikit-learn and therefore we
 will fetch it from `OpenML`_.

 .. _`Ames Housing`: http://jse.amstat.org/v19n3/decock.pdf
 .. _`OpenML`: https://www.openml.org/d/42165

.. GENERATED FROM PYTHON SOURCE LINES 44-90

.. code-block:: default


    import numpy as np

    from sklearn.datasets import fetch_openml
    from sklearn.utils import shuffle


    def load_ames_housing():
        df = fetch_openml(name="house_prices", as_frame=True)
        X = df.data
        y = df.target

        features = [
            "YrSold",
            "HeatingQC",
            "Street",
            "YearRemodAdd",
            "Heating",
            "MasVnrType",
            "BsmtUnfSF",
            "Foundation",
            "MasVnrArea",
            "MSSubClass",
            "ExterQual",
            "Condition2",
            "GarageCars",
            "GarageType",
            "OverallQual",
            "TotalBsmtSF",
            "BsmtFinSF1",
            "HouseStyle",
            "MiscFeature",
            "MoSold",
        ]

        X = X[features]
        X, y = shuffle(X, y, random_state=0)

        X = X[:600]
        y = y[:600]
        return X, np.log(y)


    X, y = load_ames_housing()









.. GENERATED FROM PYTHON SOURCE LINES 91-97

Make pipeline to preprocess the data
#############################################################################

 Before we can use Ames dataset we still need to do some preprocessing.
 First, we will select the categorical and numerical columns of the dataset to
 construct the first step of the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 97-104

.. code-block:: default


    from sklearn.compose import make_column_selector

    cat_selector = make_column_selector(dtype_include=object)
    num_selector = make_column_selector(dtype_include=np.number)
    cat_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['HeatingQC', 'Street', 'Heating', 'MasVnrType', 'Foundation', 'ExterQual', 'Condition2', 'GarageType', 'HouseStyle', 'MiscFeature']



.. GENERATED FROM PYTHON SOURCE LINES 105-107

.. code-block:: default

    num_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['YrSold', 'YearRemodAdd', 'BsmtUnfSF', 'MasVnrArea', 'MSSubClass', 'GarageCars', 'OverallQual', 'TotalBsmtSF', 'BsmtFinSF1', 'MoSold']



.. GENERATED FROM PYTHON SOURCE LINES 108-117

Then, we will need to design preprocessing pipelines which depends on the
ending regressor. If the ending regressor is a linear model, one needs to
one-hot encode the categories. If the ending regressor is a tree-based model
an ordinal encoder will be sufficient. Besides, numerical values need to be
standardized for a linear model while the raw numerical data can be treated
as is by a tree-based model. However, both models need an imputer to
handle missing values.

We will first design the pipeline required for the tree-based models.

.. GENERATED FROM PYTHON SOURCE LINES 117-133

.. code-block:: default


    from sklearn.compose import make_column_transformer
    from sklearn.impute import SimpleImputer
    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import OrdinalEncoder

    cat_tree_processor = OrdinalEncoder(
        handle_unknown="use_encoded_value", unknown_value=-1
    )
    num_tree_processor = SimpleImputer(strategy="mean", add_indicator=True)

    tree_preprocessor = make_column_transformer(
        (num_tree_processor, num_selector), (cat_tree_processor, cat_selector)
    )
    tree_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-2948034f-e85a-4c92-984e-1c2ee67f26df {color: black;background-color: white;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df pre{padding: 0;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df div.sk-toggleable {background-color: white;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df div.sk-estimator:hover {background-color: #d4ebff;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df div.sk-item {z-index: 1;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df div.sk-parallel-item:only-child::after {width: 0;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-2948034f-e85a-4c92-984e-1c2ee67f26df div.sk-text-repr-fallback {display: none;}</style><div id="sk-2948034f-e85a-4c92-984e-1c2ee67f26df" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;)])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="dc16dc13-cd23-437a-a9d8-28eb91ad5d88" type="checkbox" ><label for="dc16dc13-cd23-437a-a9d8-28eb91ad5d88" class="sk-toggleable__label sk-toggleable__label-arrow">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="24bdab51-a859-43f7-bd6a-7052ab4575ec" type="checkbox" ><label for="24bdab51-a859-43f7-bd6a-7052ab4575ec" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5bf1a448-ac1a-43d2-9069-d19b64e325cf" type="checkbox" ><label for="5bf1a448-ac1a-43d2-9069-d19b64e325cf" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8f4152b6-70ac-4a19-b366-4aac2a22dc16" type="checkbox" ><label for="8f4152b6-70ac-4a19-b366-4aac2a22dc16" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e109ed9a-9726-4e3f-b607-14ced64a3a2a" type="checkbox" ><label for="e109ed9a-9726-4e3f-b607-14ced64a3a2a" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 134-136

Then, we will now define the preprocessor used when the ending regressor
is a linear model.

.. GENERATED FROM PYTHON SOURCE LINES 136-150

.. code-block:: default


    from sklearn.preprocessing import OneHotEncoder
    from sklearn.preprocessing import StandardScaler

    cat_linear_processor = OneHotEncoder(handle_unknown="ignore")
    num_linear_processor = make_pipeline(
        StandardScaler(), SimpleImputer(strategy="mean", add_indicator=True)
    )

    linear_preprocessor = make_column_transformer(
        (num_linear_processor, num_selector), (cat_linear_processor, cat_selector)
    )
    linear_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f {color: black;background-color: white;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f pre{padding: 0;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f div.sk-toggleable {background-color: white;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f div.sk-estimator:hover {background-color: #d4ebff;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f div.sk-item {z-index: 1;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f div.sk-parallel-item:only-child::after {width: 0;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f div.sk-text-repr-fallback {display: none;}</style><div id="sk-63e4e6d3-533e-4a60-b3a5-5e1ebe2b349f" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;)])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2ca96845-2b77-4d78-9da1-7835dc358a9d" type="checkbox" ><label for="2ca96845-2b77-4d78-9da1-7835dc358a9d" class="sk-toggleable__label sk-toggleable__label-arrow">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c46c8f70-b9d5-4f22-ba7a-61701ec8397e" type="checkbox" ><label for="c46c8f70-b9d5-4f22-ba7a-61701ec8397e" class="sk-toggleable__label sk-toggleable__label-arrow">pipeline</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="69d1ce27-6292-426f-8283-831ce8f950a7" type="checkbox" ><label for="69d1ce27-6292-426f-8283-831ce8f950a7" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7b4db343-3dbe-4b07-8bf8-14192b29a751" type="checkbox" ><label for="7b4db343-3dbe-4b07-8bf8-14192b29a751" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0b70ba83-68b1-4ad3-876a-e037edbf25d6" type="checkbox" ><label for="0b70ba83-68b1-4ad3-876a-e037edbf25d6" class="sk-toggleable__label sk-toggleable__label-arrow">onehotencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f4ccf80c-ccb4-4bfb-a987-bc86f83e73f8" type="checkbox" ><label for="f4ccf80c-ccb4-4bfb-a987-bc86f83e73f8" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 151-169

Stack of predictors on a single data set
#############################################################################

 It is sometimes tedious to find the model which will best perform on a given
 dataset. Stacking provide an alternative by combining the outputs of several
 learners, without the need to choose a model specifically. The performance of
 stacking is usually close to the best model and sometimes it can outperform
 the prediction performance of each individual model.

 Here, we combine 3 learners (linear and non-linear) and use a ridge regressor
 to combine their outputs together.

 .. note::
    Although we will make new pipelines with the processors which we wrote in
    the previous section for the 3 learners, the final estimator
    :class:`~sklearn.linear_model.RidgeCV()` does not need preprocessing of
    the data as it will be fed with the already preprocessed output from the 3
    learners.

.. GENERATED FROM PYTHON SOURCE LINES 169-175

.. code-block:: default


    from sklearn.linear_model import LassoCV

    lasso_pipeline = make_pipeline(linear_preprocessor, LassoCV())
    lasso_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-448492a0-4e7b-4850-9acd-e6ed80924825 {color: black;background-color: white;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 pre{padding: 0;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 div.sk-toggleable {background-color: white;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 div.sk-estimator:hover {background-color: #d4ebff;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 div.sk-item {z-index: 1;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 div.sk-parallel-item:only-child::after {width: 0;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-448492a0-4e7b-4850-9acd-e6ed80924825 div.sk-text-repr-fallback {display: none;}</style><div id="sk-448492a0-4e7b-4850-9acd-e6ed80924825" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                                      Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                                       StandardScaler()),
                                                                      (&#x27;simpleimputer&#x27;,
                                                                       SimpleImputer(add_indicator=True))]),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;),
                                                     (&#x27;onehotencoder&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;)])),
                    (&#x27;lassocv&#x27;, LassoCV())])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="49335186-e702-4a5f-9eaf-cfc5c49c3429" type="checkbox" ><label for="49335186-e702-4a5f-9eaf-cfc5c49c3429" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                                      Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                                       StandardScaler()),
                                                                      (&#x27;simpleimputer&#x27;,
                                                                       SimpleImputer(add_indicator=True))]),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;),
                                                     (&#x27;onehotencoder&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;)])),
                    (&#x27;lassocv&#x27;, LassoCV())])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="96a918a5-825d-4227-8057-c35b49c43faf" type="checkbox" ><label for="96a918a5-825d-4227-8057-c35b49c43faf" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7319c9de-7fa0-4a24-be78-c3e6d700c8e2" type="checkbox" ><label for="7319c9de-7fa0-4a24-be78-c3e6d700c8e2" class="sk-toggleable__label sk-toggleable__label-arrow">pipeline</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="92a2beb4-dfe6-41d3-bc75-49d04f8f9411" type="checkbox" ><label for="92a2beb4-dfe6-41d3-bc75-49d04f8f9411" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="59ad41a7-b25c-4cf6-87d5-7e44234da320" type="checkbox" ><label for="59ad41a7-b25c-4cf6-87d5-7e44234da320" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="bac0e362-386e-431e-80f2-347bcebf32dc" type="checkbox" ><label for="bac0e362-386e-431e-80f2-347bcebf32dc" class="sk-toggleable__label sk-toggleable__label-arrow">onehotencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9d88afeb-5751-495b-aa03-d49fedfab6f5" type="checkbox" ><label for="9d88afeb-5751-495b-aa03-d49fedfab6f5" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0bc50e2d-c4f6-4ead-84e6-42ea9ab3698b" type="checkbox" ><label for="0bc50e2d-c4f6-4ead-84e6-42ea9ab3698b" class="sk-toggleable__label sk-toggleable__label-arrow">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 176-181

.. code-block:: default

    from sklearn.ensemble import RandomForestRegressor

    rf_pipeline = make_pipeline(tree_preprocessor, RandomForestRegressor(random_state=42))
    rf_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-4397b630-2bef-4040-9aea-6a5189cb0515 {color: black;background-color: white;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 pre{padding: 0;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 div.sk-toggleable {background-color: white;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 div.sk-estimator:hover {background-color: #d4ebff;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 div.sk-item {z-index: 1;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 div.sk-parallel-item:only-child::after {width: 0;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-4397b630-2bef-4040-9aea-6a5189cb0515 div.sk-text-repr-fallback {display: none;}</style><div id="sk-4397b630-2bef-4040-9aea-6a5189cb0515" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;)])),
                    (&#x27;randomforestregressor&#x27;,
                     RandomForestRegressor(random_state=42))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="60243f31-d8d5-4056-a0da-4575ca4e3dde" type="checkbox" ><label for="60243f31-d8d5-4056-a0da-4575ca4e3dde" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;)])),
                    (&#x27;randomforestregressor&#x27;,
                     RandomForestRegressor(random_state=42))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2936f0ce-28fa-4a8a-8873-393eb7640f27" type="checkbox" ><label for="2936f0ce-28fa-4a8a-8873-393eb7640f27" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9762fd66-acc3-4e40-b827-306256c75f67" type="checkbox" ><label for="9762fd66-acc3-4e40-b827-306256c75f67" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3629eac7-6cba-4b45-a08a-804ecdf04f00" type="checkbox" ><label for="3629eac7-6cba-4b45-a08a-804ecdf04f00" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="69f674e2-85ef-4f67-98f6-7ad87c436fbc" type="checkbox" ><label for="69f674e2-85ef-4f67-98f6-7ad87c436fbc" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="93fd3f6d-f22d-4912-a549-785d0d8cc4c5" type="checkbox" ><label for="93fd3f6d-f22d-4912-a549-785d0d8cc4c5" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="38d68e22-e35c-4656-8954-2cacab2a14f5" type="checkbox" ><label for="38d68e22-e35c-4656-8954-2cacab2a14f5" class="sk-toggleable__label sk-toggleable__label-arrow">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 182-189

.. code-block:: default

    from sklearn.ensemble import HistGradientBoostingRegressor

    gbdt_pipeline = make_pipeline(
        tree_preprocessor, HistGradientBoostingRegressor(random_state=0)
    )
    gbdt_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb {color: black;background-color: white;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb pre{padding: 0;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb div.sk-toggleable {background-color: white;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb div.sk-estimator:hover {background-color: #d4ebff;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb div.sk-item {z-index: 1;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb div.sk-parallel-item:only-child::after {width: 0;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb div.sk-text-repr-fallback {display: none;}</style><div id="sk-8bb211f5-54e9-45fb-bb9d-c4128c1b13fb" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;)])),
                    (&#x27;histgradientboostingregressor&#x27;,
                     HistGradientBoostingRegressor(random_state=0))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="aad4edb5-94f7-436c-9056-0073763c7a48" type="checkbox" ><label for="aad4edb5-94f7-436c-9056-0073763c7a48" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;)])),
                    (&#x27;histgradientboostingregressor&#x27;,
                     HistGradientBoostingRegressor(random_state=0))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1980af9d-3654-4e28-9b5f-1908996a4e3e" type="checkbox" ><label for="1980af9d-3654-4e28-9b5f-1908996a4e3e" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="995312b8-20a5-4bd4-8f12-a7da7a5ce9b6" type="checkbox" ><label for="995312b8-20a5-4bd4-8f12-a7da7a5ce9b6" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3cfa45e1-0205-4329-9ae2-3885872598d6" type="checkbox" ><label for="3cfa45e1-0205-4329-9ae2-3885872598d6" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="37f303e6-3496-4929-ab09-76910262f4d3" type="checkbox" ><label for="37f303e6-3496-4929-ab09-76910262f4d3" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="78f990f3-1329-4044-86d1-2a8ce898ab60" type="checkbox" ><label for="78f990f3-1329-4044-86d1-2a8ce898ab60" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="07e6e819-7e5a-4f1b-92c0-d8ca41076388" type="checkbox" ><label for="07e6e819-7e5a-4f1b-92c0-d8ca41076388" class="sk-toggleable__label sk-toggleable__label-arrow">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 190-202

.. code-block:: default

    from sklearn.ensemble import StackingRegressor
    from sklearn.linear_model import RidgeCV

    estimators = [
        ("Random Forest", rf_pipeline),
        ("Lasso", lasso_pipeline),
        ("Gradient Boosting", gbdt_pipeline),
    ]

    stacking_regressor = StackingRegressor(estimators=estimators, final_estimator=RidgeCV())
    stacking_regressor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 {color: black;background-color: white;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 pre{padding: 0;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 div.sk-toggleable {background-color: white;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 div.sk-estimator:hover {background-color: #d4ebff;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 div.sk-item {z-index: 1;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 div.sk-parallel-item:only-child::after {width: 0;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-b1c0c794-fbb4-43bd-9946-b5605f781a64 div.sk-text-repr-fallback {display: none;}</style><div id="sk-b1c0c794-fbb4-43bd-9946-b5605f781a64" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>StackingRegressor(estimators=[(&#x27;Random Forest&#x27;,
                                   Pipeline(steps=[(&#x27;columntransformer&#x27;,
                                                    ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                                                     SimpleImputer(add_indicator=True),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose...
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;)])),
                                                   (&#x27;histgradientboostingregressor&#x27;,
                                                    HistGradientBoostingRegressor(random_state=0))]))],
                      final_estimator=RidgeCV())</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="09867396-6197-4449-ac0d-a0d9a6f04424" type="checkbox" ><label for="09867396-6197-4449-ac0d-a0d9a6f04424" class="sk-toggleable__label sk-toggleable__label-arrow">StackingRegressor</label><div class="sk-toggleable__content"><pre>StackingRegressor(estimators=[(&#x27;Random Forest&#x27;,
                                   Pipeline(steps=[(&#x27;columntransformer&#x27;,
                                                    ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                                                     SimpleImputer(add_indicator=True),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose...
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;)])),
                                                   (&#x27;histgradientboostingregressor&#x27;,
                                                    HistGradientBoostingRegressor(random_state=0))]))],
                      final_estimator=RidgeCV())</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Random Forest</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0b6dda44-4d33-4cca-b8c4-9bd9b1aedbf6" type="checkbox" ><label for="0b6dda44-4d33-4cca-b8c4-9bd9b1aedbf6" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5d6b4bad-cefa-449a-b521-864f57079948" type="checkbox" ><label for="5d6b4bad-cefa-449a-b521-864f57079948" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="590e723b-3d23-4d60-8815-40880b7661e5" type="checkbox" ><label for="590e723b-3d23-4d60-8815-40880b7661e5" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="530b3e60-38ac-4a8e-a346-8d359c2bf603" type="checkbox" ><label for="530b3e60-38ac-4a8e-a346-8d359c2bf603" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f349e0de-79de-40c2-b4c1-f1a9b6ba0cec" type="checkbox" ><label for="f349e0de-79de-40c2-b4c1-f1a9b6ba0cec" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5956d946-4ef7-46cf-a6b5-dae8b62222e8" type="checkbox" ><label for="5956d946-4ef7-46cf-a6b5-dae8b62222e8" class="sk-toggleable__label sk-toggleable__label-arrow">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Lasso</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="35942e1b-6bf6-4dcc-a2d2-133db9acf48e" type="checkbox" ><label for="35942e1b-6bf6-4dcc-a2d2-133db9acf48e" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e593659d-aba6-4923-8226-fc21b0bef793" type="checkbox" ><label for="e593659d-aba6-4923-8226-fc21b0bef793" class="sk-toggleable__label sk-toggleable__label-arrow">pipeline</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="92993855-ee14-4ef1-99d8-4bd4ad2a7a03" type="checkbox" ><label for="92993855-ee14-4ef1-99d8-4bd4ad2a7a03" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="94e9e409-c70f-4ee8-bb39-f9b75965f955" type="checkbox" ><label for="94e9e409-c70f-4ee8-bb39-f9b75965f955" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d44b03d4-cb3a-4c61-977c-e34e4814c687" type="checkbox" ><label for="d44b03d4-cb3a-4c61-977c-e34e4814c687" class="sk-toggleable__label sk-toggleable__label-arrow">onehotencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3d5db2a8-c6c1-4c6c-8c11-f4cec442dc1f" type="checkbox" ><label for="3d5db2a8-c6c1-4c6c-8c11-f4cec442dc1f" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f27c19f7-c551-4a80-a8f0-747c6d484f7a" type="checkbox" ><label for="f27c19f7-c551-4a80-a8f0-747c6d484f7a" class="sk-toggleable__label sk-toggleable__label-arrow">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Gradient Boosting</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="af7076f6-7fd8-407c-8513-c86b16278306" type="checkbox" ><label for="af7076f6-7fd8-407c-8513-c86b16278306" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="04b33e29-e931-4b1e-bcd7-ecb38a352a16" type="checkbox" ><label for="04b33e29-e931-4b1e-bcd7-ecb38a352a16" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5160&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="bd64ef88-374f-4849-b94d-7f23a275d820" type="checkbox" ><label for="bd64ef88-374f-4849-b94d-7f23a275d820" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9221a6c6-d6e4-41de-83e7-99b4b8c2cf20" type="checkbox" ><label for="9221a6c6-d6e4-41de-83e7-99b4b8c2cf20" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7ff3464b5280&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5a2141d6-01ef-483f-baeb-95fa72411e2c" type="checkbox" ><label for="5a2141d6-01ef-483f-baeb-95fa72411e2c" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c997586e-bcb8-4882-b455-24e4c5c663b6" type="checkbox" ><label for="c997586e-bcb8-4882-b455-24e4c5c663b6" class="sk-toggleable__label sk-toggleable__label-arrow">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>final_estimator</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="56e5c464-38ce-42fb-b783-4374ee9be95f" type="checkbox" ><label for="56e5c464-38ce-42fb-b783-4374ee9be95f" class="sk-toggleable__label sk-toggleable__label-arrow">RidgeCV</label><div class="sk-toggleable__content"><pre>RidgeCV()</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 203-212

Measure and plot the results
#############################################################################

 Now we can use Ames Housing dataset to make the predictions. We check the
 performance of each individual predictor as well as of the stack of the
 regressors.

 The function ``plot_regression_results`` is used to plot the predicted and
 true targets.

.. GENERATED FROM PYTHON SOURCE LINES 212-277

.. code-block:: default



    import time
    import matplotlib.pyplot as plt
    from sklearn.model_selection import cross_validate, cross_val_predict


    def plot_regression_results(ax, y_true, y_pred, title, scores, elapsed_time):
        """Scatter plot of the predicted vs true targets."""
        ax.plot(
            [y_true.min(), y_true.max()], [y_true.min(), y_true.max()], "--r", linewidth=2
        )
        ax.scatter(y_true, y_pred, alpha=0.2)

        ax.spines["top"].set_visible(False)
        ax.spines["right"].set_visible(False)
        ax.get_xaxis().tick_bottom()
        ax.get_yaxis().tick_left()
        ax.spines["left"].set_position(("outward", 10))
        ax.spines["bottom"].set_position(("outward", 10))
        ax.set_xlim([y_true.min(), y_true.max()])
        ax.set_ylim([y_true.min(), y_true.max()])
        ax.set_xlabel("Measured")
        ax.set_ylabel("Predicted")
        extra = plt.Rectangle(
            (0, 0), 0, 0, fc="w", fill=False, edgecolor="none", linewidth=0
        )
        ax.legend([extra], [scores], loc="upper left")
        title = title + "\n Evaluation in {:.2f} seconds".format(elapsed_time)
        ax.set_title(title)


    fig, axs = plt.subplots(2, 2, figsize=(9, 7))
    axs = np.ravel(axs)

    for ax, (name, est) in zip(
        axs, estimators + [("Stacking Regressor", stacking_regressor)]
    ):
        start_time = time.time()
        score = cross_validate(
            est, X, y, scoring=["r2", "neg_mean_absolute_error"], n_jobs=2, verbose=0
        )
        elapsed_time = time.time() - start_time

        y_pred = cross_val_predict(est, X, y, n_jobs=2, verbose=0)

        plot_regression_results(
            ax,
            y,
            y_pred,
            name,
            (r"$R^2={:.2f} \pm {:.2f}$" + "\n" + r"$MAE={:.2f} \pm {:.2f}$").format(
                np.mean(score["test_r2"]),
                np.std(score["test_r2"]),
                -np.mean(score["test_neg_mean_absolute_error"]),
                np.std(score["test_neg_mean_absolute_error"]),
            ),
            elapsed_time,
        )

    plt.suptitle("Single predictors versus stacked predictors")
    plt.tight_layout()
    plt.subplots_adjust(top=0.9)
    plt.show()




.. image-sg:: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :alt: Single predictors versus stacked predictors, Random Forest  Evaluation in 0.73 seconds, Lasso  Evaluation in 0.18 seconds, Gradient Boosting  Evaluation in 0.48 seconds, Stacking Regressor  Evaluation in 7.18 seconds
   :srcset: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 278-281

The stacked regressor will combine the strengths of the different regressors.
However, we also see that training the stacked regressor is much more
computationally expensive.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  17.603 seconds)


.. _sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/ensemble/plot_stack_predictors.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_stack_predictors.py <plot_stack_predictors.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_stack_predictors.ipynb <plot_stack_predictors.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
