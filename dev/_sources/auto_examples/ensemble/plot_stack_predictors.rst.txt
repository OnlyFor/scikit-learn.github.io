
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/ensemble/plot_stack_predictors.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_ensemble_plot_stack_predictors.py:


=================================
Combine predictors using stacking
=================================

.. currentmodule:: sklearn

Stacking refers to a method to blend estimators. In this strategy, some
estimators are individually fitted on some training data while a final
estimator is trained using the stacked predictions of these base estimators.

In this example, we illustrate the use case in which different regressors are
stacked together and a final linear penalized regressor is used to output the
prediction. We compare the performance of each individual regressor with the
stacking strategy. Stacking slightly improves the overall performance.

.. GENERATED FROM PYTHON SOURCE LINES 18-27

.. code-block:: default


    # Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>
    #          Maria Telenczuk    <https://github.com/maikia>
    # License: BSD 3 clause

    from sklearn import set_config

    set_config(display="diagram")








.. GENERATED FROM PYTHON SOURCE LINES 28-44

Download the dataset
#############################################################################

 We will use `Ames Housing`_ dataset which was first compiled by Dean De Cock
 and became better known after it was used in Kaggle challenge. It is a set
 of 1460 residential homes in Ames, Iowa, each described by 80 features. We
 will use it to predict the final logarithmic price of the houses. In this
 example we will use only 20 most interesting features chosen using
 GradientBoostingRegressor() and limit number of entries (here we won't go
 into the details on how to select the most interesting features).

 The Ames housing dataset is not shipped with scikit-learn and therefore we
 will fetch it from `OpenML`_.

 .. _`Ames Housing`: http://jse.amstat.org/v19n3/decock.pdf
 .. _`OpenML`: https://www.openml.org/d/42165

.. GENERATED FROM PYTHON SOURCE LINES 44-90

.. code-block:: default


    import numpy as np

    from sklearn.datasets import fetch_openml
    from sklearn.utils import shuffle


    def load_ames_housing():
        df = fetch_openml(name="house_prices", as_frame=True)
        X = df.data
        y = df.target

        features = [
            "YrSold",
            "HeatingQC",
            "Street",
            "YearRemodAdd",
            "Heating",
            "MasVnrType",
            "BsmtUnfSF",
            "Foundation",
            "MasVnrArea",
            "MSSubClass",
            "ExterQual",
            "Condition2",
            "GarageCars",
            "GarageType",
            "OverallQual",
            "TotalBsmtSF",
            "BsmtFinSF1",
            "HouseStyle",
            "MiscFeature",
            "MoSold",
        ]

        X = X[features]
        X, y = shuffle(X, y, random_state=0)

        X = X[:600]
        y = y[:600]
        return X, np.log(y)


    X, y = load_ames_housing()









.. GENERATED FROM PYTHON SOURCE LINES 91-97

Make pipeline to preprocess the data
#############################################################################

 Before we can use Ames dataset we still need to do some preprocessing.
 First, we will select the categorical and numerical columns of the dataset to
 construct the first step of the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 97-104

.. code-block:: default


    from sklearn.compose import make_column_selector

    cat_selector = make_column_selector(dtype_include=object)
    num_selector = make_column_selector(dtype_include=np.number)
    cat_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['HeatingQC', 'Street', 'Heating', 'MasVnrType', 'Foundation', 'ExterQual', 'Condition2', 'GarageType', 'HouseStyle', 'MiscFeature']



.. GENERATED FROM PYTHON SOURCE LINES 105-107

.. code-block:: default

    num_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['YrSold', 'YearRemodAdd', 'BsmtUnfSF', 'MasVnrArea', 'MSSubClass', 'GarageCars', 'OverallQual', 'TotalBsmtSF', 'BsmtFinSF1', 'MoSold']



.. GENERATED FROM PYTHON SOURCE LINES 108-117

Then, we will need to design preprocessing pipelines which depends on the
ending regressor. If the ending regressor is a linear model, one needs to
one-hot encode the categories. If the ending regressor is a tree-based model
an ordinal encoder will be sufficient. Besides, numerical values need to be
standardized for a linear model while the raw numerical data can be treated
as is by a tree-based model. However, both models need an imputer to
handle missing values.

We will first design the pipeline required for the tree-based models.

.. GENERATED FROM PYTHON SOURCE LINES 117-133

.. code-block:: default


    from sklearn.compose import make_column_transformer
    from sklearn.impute import SimpleImputer
    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import OrdinalEncoder

    cat_tree_processor = OrdinalEncoder(
        handle_unknown="use_encoded_value", unknown_value=-1
    )
    num_tree_processor = SimpleImputer(strategy="mean", add_indicator=True)

    tree_preprocessor = make_column_transformer(
        (num_tree_processor, num_selector), (cat_tree_processor, cat_selector)
    )
    tree_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 {color: black;background-color: white;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 pre{padding: 0;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 div.sk-toggleable {background-color: white;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 div.sk-estimator:hover {background-color: #d4ebff;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 div.sk-item {z-index: 1;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 div.sk-parallel-item:only-child::after {width: 0;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 div.sk-container {display: inline-block;position: relative;}#sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246 div.sk-text-repr-fallback {display: none;}</style><div id="sk-c8be1e5d-e687-4c00-a2a6-f4f0e6675246" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;)])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7612b13c-7798-49f8-99f6-ceb2f4f1930a" type="checkbox" ><label class="sk-toggleable__label" for="7612b13c-7798-49f8-99f6-ceb2f4f1930a">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9a38c4b3-9790-4d30-b53f-ea6f8323fc16" type="checkbox" ><label class="sk-toggleable__label" for="9a38c4b3-9790-4d30-b53f-ea6f8323fc16">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5064eb32-6d78-4a50-9a45-93a15f982aaa" type="checkbox" ><label class="sk-toggleable__label" for="5064eb32-6d78-4a50-9a45-93a15f982aaa">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="63a71c02-8879-40f5-8c58-b2905900e945" type="checkbox" ><label class="sk-toggleable__label" for="63a71c02-8879-40f5-8c58-b2905900e945">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e2eb6759-1efe-4d86-95e7-93b955800715" type="checkbox" ><label class="sk-toggleable__label" for="e2eb6759-1efe-4d86-95e7-93b955800715">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 134-136

Then, we will now define the preprocessor used when the ending regressor
is a linear model.

.. GENERATED FROM PYTHON SOURCE LINES 136-150

.. code-block:: default


    from sklearn.preprocessing import OneHotEncoder
    from sklearn.preprocessing import StandardScaler

    cat_linear_processor = OneHotEncoder(handle_unknown="ignore")
    num_linear_processor = make_pipeline(
        StandardScaler(), SimpleImputer(strategy="mean", add_indicator=True)
    )

    linear_preprocessor = make_column_transformer(
        (num_linear_processor, num_selector), (cat_linear_processor, cat_selector)
    )
    linear_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed {color: black;background-color: white;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed pre{padding: 0;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed div.sk-toggleable {background-color: white;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed div.sk-estimator:hover {background-color: #d4ebff;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed div.sk-item {z-index: 1;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed div.sk-parallel-item:only-child::after {width: 0;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed div.sk-container {display: inline-block;position: relative;}#sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed div.sk-text-repr-fallback {display: none;}</style><div id="sk-7124b2e3-6e61-4e4b-9062-74a28ecac9ed" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;)])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4a2978e2-c376-4612-a106-4cad6058c2c2" type="checkbox" ><label class="sk-toggleable__label" for="4a2978e2-c376-4612-a106-4cad6058c2c2">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="db10f4c0-e0bf-4d9d-bc8a-876cffe559ff" type="checkbox" ><label class="sk-toggleable__label" for="db10f4c0-e0bf-4d9d-bc8a-876cffe559ff">pipeline</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7d6a1ea4-9463-45c7-ad94-6e763e9b43ac" type="checkbox" ><label class="sk-toggleable__label" for="7d6a1ea4-9463-45c7-ad94-6e763e9b43ac">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a82c9185-2025-4b34-b56a-70adcaeacc37" type="checkbox" ><label class="sk-toggleable__label" for="a82c9185-2025-4b34-b56a-70adcaeacc37">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="37997f21-02b0-4987-9ec7-b1f9c7df2f58" type="checkbox" ><label class="sk-toggleable__label" for="37997f21-02b0-4987-9ec7-b1f9c7df2f58">onehotencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2fca56d9-e623-4196-bf64-52dba5a418d5" type="checkbox" ><label class="sk-toggleable__label" for="2fca56d9-e623-4196-bf64-52dba5a418d5">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 151-169

Stack of predictors on a single data set
#############################################################################

 It is sometimes tedious to find the model which will best perform on a given
 dataset. Stacking provide an alternative by combining the outputs of several
 learners, without the need to choose a model specifically. The performance of
 stacking is usually close to the best model and sometimes it can outperform
 the prediction performance of each individual model.

 Here, we combine 3 learners (linear and non-linear) and use a ridge regressor
 to combine their outputs together.

 .. note::
    Although we will make new pipelines with the processors which we wrote in
    the previous section for the 3 learners, the final estimator
    :class:`~sklearn.linear_model.RidgeCV()` does not need preprocessing of
    the data as it will be fed with the already preprocessed output from the 3
    learners.

.. GENERATED FROM PYTHON SOURCE LINES 169-175

.. code-block:: default


    from sklearn.linear_model import LassoCV

    lasso_pipeline = make_pipeline(linear_preprocessor, LassoCV())
    lasso_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c {color: black;background-color: white;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c pre{padding: 0;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c div.sk-toggleable {background-color: white;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c div.sk-estimator:hover {background-color: #d4ebff;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c div.sk-item {z-index: 1;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c div.sk-parallel-item:only-child::after {width: 0;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c div.sk-container {display: inline-block;position: relative;}#sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c div.sk-text-repr-fallback {display: none;}</style><div id="sk-ef1cf5f2-cbd5-468a-ba69-9f770adfb64c" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                                      Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                                       StandardScaler()),
                                                                      (&#x27;simpleimputer&#x27;,
                                                                       SimpleImputer(add_indicator=True))]),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;),
                                                     (&#x27;onehotencoder&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;)])),
                    (&#x27;lassocv&#x27;, LassoCV())])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ebe8893a-1ab5-4e32-b525-ceb1f1b0e049" type="checkbox" ><label class="sk-toggleable__label" for="ebe8893a-1ab5-4e32-b525-ceb1f1b0e049">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                                      Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                                       StandardScaler()),
                                                                      (&#x27;simpleimputer&#x27;,
                                                                       SimpleImputer(add_indicator=True))]),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;),
                                                     (&#x27;onehotencoder&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;)])),
                    (&#x27;lassocv&#x27;, LassoCV())])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ddd476c7-8b23-4e1b-b965-85b73504d41b" type="checkbox" ><label class="sk-toggleable__label" for="ddd476c7-8b23-4e1b-b965-85b73504d41b">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="eb253795-1c5b-4144-ba16-bf77cdb4834a" type="checkbox" ><label class="sk-toggleable__label" for="eb253795-1c5b-4144-ba16-bf77cdb4834a">pipeline</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c5b7c869-afde-418e-aec1-52cc469af927" type="checkbox" ><label class="sk-toggleable__label" for="c5b7c869-afde-418e-aec1-52cc469af927">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="67bc98e8-bc37-4e70-8087-679cb7d9bd11" type="checkbox" ><label class="sk-toggleable__label" for="67bc98e8-bc37-4e70-8087-679cb7d9bd11">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9635b7d1-2a0d-4da3-9d0a-80db49ce9fb0" type="checkbox" ><label class="sk-toggleable__label" for="9635b7d1-2a0d-4da3-9d0a-80db49ce9fb0">onehotencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="47db68a2-1d8f-4fb4-976a-afccf364006d" type="checkbox" ><label class="sk-toggleable__label" for="47db68a2-1d8f-4fb4-976a-afccf364006d">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="362b33f5-742f-4419-a584-69302bd88b7e" type="checkbox" ><label class="sk-toggleable__label" for="362b33f5-742f-4419-a584-69302bd88b7e">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 176-181

.. code-block:: default

    from sklearn.ensemble import RandomForestRegressor

    rf_pipeline = make_pipeline(tree_preprocessor, RandomForestRegressor(random_state=42))
    rf_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 {color: black;background-color: white;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 pre{padding: 0;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 div.sk-toggleable {background-color: white;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 div.sk-estimator:hover {background-color: #d4ebff;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 div.sk-item {z-index: 1;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 div.sk-parallel-item:only-child::after {width: 0;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 div.sk-container {display: inline-block;position: relative;}#sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000 div.sk-text-repr-fallback {display: none;}</style><div id="sk-ae96fbcd-e1f0-4008-bfd0-5a12ccf9c000" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;)])),
                    (&#x27;randomforestregressor&#x27;,
                     RandomForestRegressor(random_state=42))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8bfba03f-66b8-4e93-b94f-d979e7e615e4" type="checkbox" ><label class="sk-toggleable__label" for="8bfba03f-66b8-4e93-b94f-d979e7e615e4">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;)])),
                    (&#x27;randomforestregressor&#x27;,
                     RandomForestRegressor(random_state=42))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="dcac9281-c0c2-4f14-8a14-055d99a3e629" type="checkbox" ><label class="sk-toggleable__label" for="dcac9281-c0c2-4f14-8a14-055d99a3e629">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="24a1bf8b-57da-441b-8800-dd268ee752d1" type="checkbox" ><label class="sk-toggleable__label" for="24a1bf8b-57da-441b-8800-dd268ee752d1">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="593aabd9-d79a-49dd-98de-070a92883aa3" type="checkbox" ><label class="sk-toggleable__label" for="593aabd9-d79a-49dd-98de-070a92883aa3">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8c978a16-48e2-442c-a5ba-da96f00a7211" type="checkbox" ><label class="sk-toggleable__label" for="8c978a16-48e2-442c-a5ba-da96f00a7211">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2037a843-f11e-4a88-90b2-0b8f0f305d9b" type="checkbox" ><label class="sk-toggleable__label" for="2037a843-f11e-4a88-90b2-0b8f0f305d9b">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e432f615-402c-4367-80e4-423ecc79b6c7" type="checkbox" ><label class="sk-toggleable__label" for="e432f615-402c-4367-80e4-423ecc79b6c7">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 182-189

.. code-block:: default

    from sklearn.ensemble import HistGradientBoostingRegressor

    gbdt_pipeline = make_pipeline(
        tree_preprocessor, HistGradientBoostingRegressor(random_state=0)
    )
    gbdt_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe {color: black;background-color: white;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe pre{padding: 0;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe div.sk-toggleable {background-color: white;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe div.sk-estimator:hover {background-color: #d4ebff;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe div.sk-item {z-index: 1;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe div.sk-parallel-item:only-child::after {width: 0;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe div.sk-container {display: inline-block;position: relative;}#sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe div.sk-text-repr-fallback {display: none;}</style><div id="sk-0fd17ca5-47cb-4774-b398-4cfaae8f1efe" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;)])),
                    (&#x27;histgradientboostingregressor&#x27;,
                     HistGradientBoostingRegressor(random_state=0))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a2269e16-235e-40a2-8182-38034832bb51" type="checkbox" ><label class="sk-toggleable__label" for="a2269e16-235e-40a2-8182-38034832bb51">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;)])),
                    (&#x27;histgradientboostingregressor&#x27;,
                     HistGradientBoostingRegressor(random_state=0))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="88310962-29fb-40e9-9dbe-641058273598" type="checkbox" ><label class="sk-toggleable__label" for="88310962-29fb-40e9-9dbe-641058273598">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a6cacd37-62b6-4760-84c4-99c73f8ed251" type="checkbox" ><label class="sk-toggleable__label" for="a6cacd37-62b6-4760-84c4-99c73f8ed251">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="51663e5f-a486-4a42-aab1-3eee669f9c29" type="checkbox" ><label class="sk-toggleable__label" for="51663e5f-a486-4a42-aab1-3eee669f9c29">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5b7fdd49-20e6-40d8-9fc5-1df86df0e05d" type="checkbox" ><label class="sk-toggleable__label" for="5b7fdd49-20e6-40d8-9fc5-1df86df0e05d">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="bd7503b7-9e3f-48f1-83e7-6fb77333a9d0" type="checkbox" ><label class="sk-toggleable__label" for="bd7503b7-9e3f-48f1-83e7-6fb77333a9d0">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a36ee338-8811-4cd6-8a93-625d7e00883d" type="checkbox" ><label class="sk-toggleable__label" for="a36ee338-8811-4cd6-8a93-625d7e00883d">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 190-202

.. code-block:: default

    from sklearn.ensemble import StackingRegressor
    from sklearn.linear_model import RidgeCV

    estimators = [
        ("Random Forest", rf_pipeline),
        ("Lasso", lasso_pipeline),
        ("Gradient Boosting", gbdt_pipeline),
    ]

    stacking_regressor = StackingRegressor(estimators=estimators, final_estimator=RidgeCV())
    stacking_regressor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-6cff54fe-3f67-46b2-89d0-344698270e0d {color: black;background-color: white;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d pre{padding: 0;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d div.sk-toggleable {background-color: white;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d div.sk-estimator:hover {background-color: #d4ebff;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d div.sk-item {z-index: 1;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d div.sk-parallel-item:only-child::after {width: 0;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d div.sk-container {display: inline-block;position: relative;}#sk-6cff54fe-3f67-46b2-89d0-344698270e0d div.sk-text-repr-fallback {display: none;}</style><div id="sk-6cff54fe-3f67-46b2-89d0-344698270e0d" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>StackingRegressor(estimators=[(&#x27;Random Forest&#x27;,
                                   Pipeline(steps=[(&#x27;columntransformer&#x27;,
                                                    ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                                                     SimpleImputer(add_indicator=True),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose...
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;)])),
                                                   (&#x27;histgradientboostingregressor&#x27;,
                                                    HistGradientBoostingRegressor(random_state=0))]))],
                      final_estimator=RidgeCV())</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="fdef30f4-6d5f-4f27-8266-020e611b07bb" type="checkbox" ><label class="sk-toggleable__label" for="fdef30f4-6d5f-4f27-8266-020e611b07bb">StackingRegressor</label><div class="sk-toggleable__content"><pre>StackingRegressor(estimators=[(&#x27;Random Forest&#x27;,
                                   Pipeline(steps=[(&#x27;columntransformer&#x27;,
                                                    ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                                                     SimpleImputer(add_indicator=True),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose...
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;)])),
                                                   (&#x27;histgradientboostingregressor&#x27;,
                                                    HistGradientBoostingRegressor(random_state=0))]))],
                      final_estimator=RidgeCV())</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Random Forest</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="22553336-6f8a-4bde-a4e3-09a921842ec6" type="checkbox" ><label class="sk-toggleable__label" for="22553336-6f8a-4bde-a4e3-09a921842ec6">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="cf50bd3e-1520-4c97-949d-bbe80adafdf3" type="checkbox" ><label class="sk-toggleable__label" for="cf50bd3e-1520-4c97-949d-bbe80adafdf3">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ef7089fb-5b69-455e-b1f0-07a15cc4373f" type="checkbox" ><label class="sk-toggleable__label" for="ef7089fb-5b69-455e-b1f0-07a15cc4373f">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c539a2ea-fa08-4b76-8710-2c676b23c077" type="checkbox" ><label class="sk-toggleable__label" for="c539a2ea-fa08-4b76-8710-2c676b23c077">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="03e02065-7c87-4b27-96a4-9f3187bbac6f" type="checkbox" ><label class="sk-toggleable__label" for="03e02065-7c87-4b27-96a4-9f3187bbac6f">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4c28994d-e9d6-465f-8485-1cfc4a031c1b" type="checkbox" ><label class="sk-toggleable__label" for="4c28994d-e9d6-465f-8485-1cfc4a031c1b">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Lasso</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0bf64d19-f9fe-47c8-9fd7-33004bbbb5cf" type="checkbox" ><label class="sk-toggleable__label" for="0bf64d19-f9fe-47c8-9fd7-33004bbbb5cf">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9d4d0615-b42f-4329-bb34-f7671db12861" type="checkbox" ><label class="sk-toggleable__label" for="9d4d0615-b42f-4329-bb34-f7671db12861">pipeline</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="03b79484-6c6b-4637-9bcc-d36aef18fe01" type="checkbox" ><label class="sk-toggleable__label" for="03b79484-6c6b-4637-9bcc-d36aef18fe01">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="bf0e7e9f-bfb7-4753-825d-cd278549c1bf" type="checkbox" ><label class="sk-toggleable__label" for="bf0e7e9f-bfb7-4753-825d-cd278549c1bf">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5fb340d5-cbff-4b8d-80bc-2f7fbae40dac" type="checkbox" ><label class="sk-toggleable__label" for="5fb340d5-cbff-4b8d-80bc-2f7fbae40dac">onehotencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c3ad7e1b-03e2-436f-99fe-0a109baa9827" type="checkbox" ><label class="sk-toggleable__label" for="c3ad7e1b-03e2-436f-99fe-0a109baa9827">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ed50b2d0-b731-494a-a21c-9ee2fb0c60bb" type="checkbox" ><label class="sk-toggleable__label" for="ed50b2d0-b731-494a-a21c-9ee2fb0c60bb">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Gradient Boosting</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f25ecef8-de92-4855-b74c-d2f16e38d199" type="checkbox" ><label class="sk-toggleable__label" for="f25ecef8-de92-4855-b74c-d2f16e38d199">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e97a5242-0843-458c-b36e-cfddf221181f" type="checkbox" ><label class="sk-toggleable__label" for="e97a5242-0843-458c-b36e-cfddf221181f">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3edaa60&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f843e81f-7d30-4ad0-aac7-e55d20bc264b" type="checkbox" ><label class="sk-toggleable__label" for="f843e81f-7d30-4ad0-aac7-e55d20bc264b">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4d9d63b8-a80b-4623-9ad8-81f35bb32d39" type="checkbox" ><label class="sk-toggleable__label" for="4d9d63b8-a80b-4623-9ad8-81f35bb32d39">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7faac3eda8e0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b6ad38f6-ccdd-4b93-9a5b-7d2d290e97bc" type="checkbox" ><label class="sk-toggleable__label" for="b6ad38f6-ccdd-4b93-9a5b-7d2d290e97bc">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2fc42d75-afe5-4648-b209-a0becba46a2d" type="checkbox" ><label class="sk-toggleable__label" for="2fc42d75-afe5-4648-b209-a0becba46a2d">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>final_estimator</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="36d65794-8c22-4645-9e18-3d6b1095db52" type="checkbox" ><label class="sk-toggleable__label" for="36d65794-8c22-4645-9e18-3d6b1095db52">RidgeCV</label><div class="sk-toggleable__content"><pre>RidgeCV()</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 203-212

Measure and plot the results
#############################################################################

 Now we can use Ames Housing dataset to make the predictions. We check the
 performance of each individual predictor as well as of the stack of the
 regressors.

 The function ``plot_regression_results`` is used to plot the predicted and
 true targets.

.. GENERATED FROM PYTHON SOURCE LINES 212-277

.. code-block:: default



    import time
    import matplotlib.pyplot as plt
    from sklearn.model_selection import cross_validate, cross_val_predict


    def plot_regression_results(ax, y_true, y_pred, title, scores, elapsed_time):
        """Scatter plot of the predicted vs true targets."""
        ax.plot(
            [y_true.min(), y_true.max()], [y_true.min(), y_true.max()], "--r", linewidth=2
        )
        ax.scatter(y_true, y_pred, alpha=0.2)

        ax.spines["top"].set_visible(False)
        ax.spines["right"].set_visible(False)
        ax.get_xaxis().tick_bottom()
        ax.get_yaxis().tick_left()
        ax.spines["left"].set_position(("outward", 10))
        ax.spines["bottom"].set_position(("outward", 10))
        ax.set_xlim([y_true.min(), y_true.max()])
        ax.set_ylim([y_true.min(), y_true.max()])
        ax.set_xlabel("Measured")
        ax.set_ylabel("Predicted")
        extra = plt.Rectangle(
            (0, 0), 0, 0, fc="w", fill=False, edgecolor="none", linewidth=0
        )
        ax.legend([extra], [scores], loc="upper left")
        title = title + "\n Evaluation in {:.2f} seconds".format(elapsed_time)
        ax.set_title(title)


    fig, axs = plt.subplots(2, 2, figsize=(9, 7))
    axs = np.ravel(axs)

    for ax, (name, est) in zip(
        axs, estimators + [("Stacking Regressor", stacking_regressor)]
    ):
        start_time = time.time()
        score = cross_validate(
            est, X, y, scoring=["r2", "neg_mean_absolute_error"], n_jobs=-1, verbose=0
        )
        elapsed_time = time.time() - start_time

        y_pred = cross_val_predict(est, X, y, n_jobs=-1, verbose=0)

        plot_regression_results(
            ax,
            y,
            y_pred,
            name,
            (r"$R^2={:.2f} \pm {:.2f}$" + "\n" + r"$MAE={:.2f} \pm {:.2f}$").format(
                np.mean(score["test_r2"]),
                np.std(score["test_r2"]),
                -np.mean(score["test_neg_mean_absolute_error"]),
                np.std(score["test_neg_mean_absolute_error"]),
            ),
            elapsed_time,
        )

    plt.suptitle("Single predictors versus stacked predictors")
    plt.tight_layout()
    plt.subplots_adjust(top=0.9)
    plt.show()




.. image-sg:: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :alt: Single predictors versus stacked predictors, Random Forest  Evaluation in 0.79 seconds, Lasso  Evaluation in 0.21 seconds, Gradient Boosting  Evaluation in 0.44 seconds, Stacking Regressor  Evaluation in 7.42 seconds
   :srcset: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 278-281

The stacked regressor will combine the strengths of the different regressors.
However, we also see that training the stacked regressor is much more
computationally expensive.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  18.256 seconds)


.. _sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/ensemble/plot_stack_predictors.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_stack_predictors.py <plot_stack_predictors.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_stack_predictors.ipynb <plot_stack_predictors.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
