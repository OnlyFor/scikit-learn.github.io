
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/ensemble/plot_stack_predictors.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_ensemble_plot_stack_predictors.py:


=================================
Combine predictors using stacking
=================================

.. currentmodule:: sklearn

Stacking refers to a method to blend estimators. In this strategy, some
estimators are individually fitted on some training data while a final
estimator is trained using the stacked predictions of these base estimators.

In this example, we illustrate the use case in which different regressors are
stacked together and a final linear penalized regressor is used to output the
prediction. We compare the performance of each individual regressor with the
stacking strategy. Stacking slightly improves the overall performance.

.. GENERATED FROM PYTHON SOURCE LINES 18-29

.. code-block:: default


    # Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>
    #          Maria Telenczuk    <https://github.com/maikia>
    # License: BSD 3 clause

    print(__doc__)

    from sklearn import set_config

    set_config(display="diagram")








.. GENERATED FROM PYTHON SOURCE LINES 30-46

Download the dataset
#############################################################################

 We will use `Ames Housing`_ dataset which was first compiled by Dean De Cock
 and became better known after it was used in Kaggle challenge. It is a set
 of 1460 residential homes in Ames, Iowa, each described by 80 features. We
 will use it to predict the final logarithmic price of the houses. In this
 example we will use only 20 most interesting features chosen using
 GradientBoostingRegressor() and limit number of entries (here we won't go
 into the details on how to select the most interesting features).

 The Ames housing dataset is not shipped with scikit-learn and therefore we
 will fetch it from `OpenML`_.

 .. _`Ames Housing`: http://jse.amstat.org/v19n3/decock.pdf
 .. _`OpenML`: https://www.openml.org/d/42165

.. GENERATED FROM PYTHON SOURCE LINES 46-92

.. code-block:: default


    import numpy as np

    from sklearn.datasets import fetch_openml
    from sklearn.utils import shuffle


    def load_ames_housing():
        df = fetch_openml(name="house_prices", as_frame=True)
        X = df.data
        y = df.target

        features = [
            "YrSold",
            "HeatingQC",
            "Street",
            "YearRemodAdd",
            "Heating",
            "MasVnrType",
            "BsmtUnfSF",
            "Foundation",
            "MasVnrArea",
            "MSSubClass",
            "ExterQual",
            "Condition2",
            "GarageCars",
            "GarageType",
            "OverallQual",
            "TotalBsmtSF",
            "BsmtFinSF1",
            "HouseStyle",
            "MiscFeature",
            "MoSold",
        ]

        X = X[features]
        X, y = shuffle(X, y, random_state=0)

        X = X[:600]
        y = y[:600]
        return X, np.log(y)


    X, y = load_ames_housing()









.. GENERATED FROM PYTHON SOURCE LINES 93-99

Make pipeline to preprocess the data
#############################################################################

 Before we can use Ames dataset we still need to do some preprocessing.
 First, we will select the categorical and numerical columns of the dataset to
 construct the first step of the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 99-106

.. code-block:: default


    from sklearn.compose import make_column_selector

    cat_selector = make_column_selector(dtype_include=object)
    num_selector = make_column_selector(dtype_include=np.number)
    cat_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['HeatingQC', 'Street', 'Heating', 'MasVnrType', 'Foundation', 'ExterQual', 'Condition2', 'GarageType', 'HouseStyle', 'MiscFeature']



.. GENERATED FROM PYTHON SOURCE LINES 107-109

.. code-block:: default

    num_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['YrSold', 'YearRemodAdd', 'BsmtUnfSF', 'MasVnrArea', 'MSSubClass', 'GarageCars', 'OverallQual', 'TotalBsmtSF', 'BsmtFinSF1', 'MoSold']



.. GENERATED FROM PYTHON SOURCE LINES 110-119

Then, we will need to design preprocessing pipelines which depends on the
ending regressor. If the ending regressor is a linear model, one needs to
one-hot encode the categories. If the ending regressor is a tree-based model
an ordinal encoder will be sufficient. Besides, numerical values need to be
standardized for a linear model while the raw numerical data can be treated
as is by a tree-based model. However, both models need an imputer to
handle missing values.

We will first design the pipeline required for the tree-based models.

.. GENERATED FROM PYTHON SOURCE LINES 119-135

.. code-block:: default


    from sklearn.compose import make_column_transformer
    from sklearn.impute import SimpleImputer
    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import OrdinalEncoder

    cat_tree_processor = OrdinalEncoder(
        handle_unknown="use_encoded_value", unknown_value=-1
    )
    num_tree_processor = SimpleImputer(strategy="mean", add_indicator=True)

    tree_preprocessor = make_column_transformer(
        (num_tree_processor, num_selector), (cat_tree_processor, cat_selector)
    )
    tree_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 {color: black;background-color: white;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 pre{padding: 0;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 div.sk-toggleable {background-color: white;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 div.sk-estimator:hover {background-color: #d4ebff;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 div.sk-item {z-index: 1;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 div.sk-parallel-item:only-child::after {width: 0;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-486fc1e4-4a3a-4de6-9923-0e5e16e339c9" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="24117085-def2-4f99-8d1a-66f86697a0ac" type="checkbox" ><label class="sk-toggleable__label" for="24117085-def2-4f99-8d1a-66f86697a0ac">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1c40>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1ca0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9abb88a1-0be3-4120-b179-df16d2f1f4ec" type="checkbox" ><label class="sk-toggleable__label" for="9abb88a1-0be3-4120-b179-df16d2f1f4ec">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1c40></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="08b7e61b-80fe-45e0-ba0b-e9971ec33ec1" type="checkbox" ><label class="sk-toggleable__label" for="08b7e61b-80fe-45e0-ba0b-e9971ec33ec1">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="724c27e3-6351-4301-9ca6-8ec6366f5b5a" type="checkbox" ><label class="sk-toggleable__label" for="724c27e3-6351-4301-9ca6-8ec6366f5b5a">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1ca0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="00dfe90e-b0c6-4551-8e4f-6e4e178af6b7" type="checkbox" ><label class="sk-toggleable__label" for="00dfe90e-b0c6-4551-8e4f-6e4e178af6b7">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 136-138

Then, we will now define the preprocessor used when the ending regressor
is a linear model.

.. GENERATED FROM PYTHON SOURCE LINES 138-152

.. code-block:: default


    from sklearn.preprocessing import OneHotEncoder
    from sklearn.preprocessing import StandardScaler

    cat_linear_processor = OneHotEncoder(handle_unknown="ignore")
    num_linear_processor = make_pipeline(
        StandardScaler(), SimpleImputer(strategy="mean", add_indicator=True)
    )

    linear_preprocessor = make_column_transformer(
        (num_linear_processor, num_selector), (cat_linear_processor, cat_selector)
    )
    linear_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac {color: black;background-color: white;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac pre{padding: 0;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac div.sk-toggleable {background-color: white;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac div.sk-estimator:hover {background-color: #d4ebff;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac div.sk-item {z-index: 1;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac div.sk-parallel-item:only-child::after {width: 0;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac div.sk-container {display: inline-block;position: relative;}</style><div id="sk-1ad58949-eb8a-4fc0-ad24-9c02a2c853ac" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6b2f9b7d-8f10-47b4-9832-f4dfa5077c01" type="checkbox" ><label class="sk-toggleable__label" for="6b2f9b7d-8f10-47b4-9832-f4dfa5077c01">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('pipeline',
                                     Pipeline(steps=[('standardscaler',
                                                      StandardScaler()),
                                                     ('simpleimputer',
                                                      SimpleImputer(add_indicator=True))]),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1c40>),
                                    ('onehotencoder',
                                     OneHotEncoder(handle_unknown='ignore'),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1ca0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="eb04ad66-68cb-45b7-8255-b0ae5b3aabdf" type="checkbox" ><label class="sk-toggleable__label" for="eb04ad66-68cb-45b7-8255-b0ae5b3aabdf">pipeline</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1c40></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="19dc16e2-8103-4230-bbd1-cb0ac284082d" type="checkbox" ><label class="sk-toggleable__label" for="19dc16e2-8103-4230-bbd1-cb0ac284082d">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8560874f-c83e-481d-9220-05b56a5d24ca" type="checkbox" ><label class="sk-toggleable__label" for="8560874f-c83e-481d-9220-05b56a5d24ca">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3d883569-a97f-40e9-845e-8e7463b291d2" type="checkbox" ><label class="sk-toggleable__label" for="3d883569-a97f-40e9-845e-8e7463b291d2">onehotencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1ca0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="00a62b78-dbe9-4059-819a-0994112182ff" type="checkbox" ><label class="sk-toggleable__label" for="00a62b78-dbe9-4059-819a-0994112182ff">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 153-171

Stack of predictors on a single data set
#############################################################################

 It is sometimes tedious to find the model which will best perform on a given
 dataset. Stacking provide an alternative by combining the outputs of several
 learners, without the need to choose a model specifically. The performance of
 stacking is usually close to the best model and sometimes it can outperform
 the prediction performance of each individual model.

 Here, we combine 3 learners (linear and non-linear) and use a ridge regressor
 to combine their outputs together.

 .. note::
    Although we will make new pipelines with the processors which we wrote in
    the previous section for the 3 learners, the final estimator
    :class:`~sklearn.linear_model.RidgeCV()` does not need preprocessing of
    the data as it will be fed with the already preprocessed output from the 3
    learners.

.. GENERATED FROM PYTHON SOURCE LINES 171-177

.. code-block:: default


    from sklearn.linear_model import LassoCV

    lasso_pipeline = make_pipeline(linear_preprocessor, LassoCV())
    lasso_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 {color: black;background-color: white;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 pre{padding: 0;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 div.sk-toggleable {background-color: white;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 div.sk-estimator:hover {background-color: #d4ebff;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 div.sk-item {z-index: 1;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 div.sk-parallel-item:only-child::after {width: 0;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-f9ae96a1-cce5-4fd3-8131-b0471dd9ed98" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e3c8eb81-4ce7-49c9-8a73-ad39e891ac5e" type="checkbox" ><label class="sk-toggleable__label" for="e3c8eb81-4ce7-49c9-8a73-ad39e891ac5e">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columntransformer',
                     ColumnTransformer(transformers=[('pipeline',
                                                      Pipeline(steps=[('standardscaler',
                                                                       StandardScaler()),
                                                                      ('simpleimputer',
                                                                       SimpleImputer(add_indicator=True))]),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1c40>),
                                                     ('onehotencoder',
                                                      OneHotEncoder(handle_unknown='ignore'),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1ca0>)])),
                    ('lassocv', LassoCV())])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="bde0fde0-c17b-4d03-90af-9b3290b26c0b" type="checkbox" ><label class="sk-toggleable__label" for="bde0fde0-c17b-4d03-90af-9b3290b26c0b">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('pipeline',
                                     Pipeline(steps=[('standardscaler',
                                                      StandardScaler()),
                                                     ('simpleimputer',
                                                      SimpleImputer(add_indicator=True))]),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1c40>),
                                    ('onehotencoder',
                                     OneHotEncoder(handle_unknown='ignore'),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1ca0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="94df3bfc-4a1e-46b6-bb2b-15b2a5fbfa66" type="checkbox" ><label class="sk-toggleable__label" for="94df3bfc-4a1e-46b6-bb2b-15b2a5fbfa66">pipeline</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1c40></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="386d4602-426a-46a9-8f38-3ea380e5fdc3" type="checkbox" ><label class="sk-toggleable__label" for="386d4602-426a-46a9-8f38-3ea380e5fdc3">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="507ffdfb-a4ec-4bb2-bdc4-7119787dbda0" type="checkbox" ><label class="sk-toggleable__label" for="507ffdfb-a4ec-4bb2-bdc4-7119787dbda0">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="58aa8bab-5d76-4b3b-9dbe-6ff309ad2293" type="checkbox" ><label class="sk-toggleable__label" for="58aa8bab-5d76-4b3b-9dbe-6ff309ad2293">onehotencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1ca0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="99125358-f0cf-444f-bc7f-975e34f5ea49" type="checkbox" ><label class="sk-toggleable__label" for="99125358-f0cf-444f-bc7f-975e34f5ea49">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="59dc4f3f-bf4d-46af-aff2-09ddd0fe4220" type="checkbox" ><label class="sk-toggleable__label" for="59dc4f3f-bf4d-46af-aff2-09ddd0fe4220">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 178-183

.. code-block:: default

    from sklearn.ensemble import RandomForestRegressor

    rf_pipeline = make_pipeline(tree_preprocessor, RandomForestRegressor(random_state=42))
    rf_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a {color: black;background-color: white;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a pre{padding: 0;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a div.sk-toggleable {background-color: white;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a div.sk-estimator:hover {background-color: #d4ebff;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a div.sk-item {z-index: 1;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a div.sk-parallel-item:only-child::after {width: 0;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a div.sk-container {display: inline-block;position: relative;}</style><div id="sk-b14a122a-2fd3-45db-83b4-9d87bb9c8c3a" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8713ed97-ec0b-43bd-a9ba-0acd5df53870" type="checkbox" ><label class="sk-toggleable__label" for="8713ed97-ec0b-43bd-a9ba-0acd5df53870">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columntransformer',
                     ColumnTransformer(transformers=[('simpleimputer',
                                                      SimpleImputer(add_indicator=True),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1c40>),
                                                     ('ordinalencoder',
                                                      OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                     unknown_value=-1),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1ca0>)])),
                    ('randomforestregressor',
                     RandomForestRegressor(random_state=42))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="20d3d53c-f58f-4f23-9c0b-ba19a691c9b7" type="checkbox" ><label class="sk-toggleable__label" for="20d3d53c-f58f-4f23-9c0b-ba19a691c9b7">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1c40>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1ca0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="fbd84714-0d0f-4fd8-a3d1-a5ac165c8be5" type="checkbox" ><label class="sk-toggleable__label" for="fbd84714-0d0f-4fd8-a3d1-a5ac165c8be5">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1c40></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d44d90e3-e976-4fe3-899d-cad458e7a040" type="checkbox" ><label class="sk-toggleable__label" for="d44d90e3-e976-4fe3-899d-cad458e7a040">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="60938d85-3d96-4b70-bf62-602e6de53ff7" type="checkbox" ><label class="sk-toggleable__label" for="60938d85-3d96-4b70-bf62-602e6de53ff7">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1ca0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="adad22b2-6ece-44ab-89df-360014afc8a2" type="checkbox" ><label class="sk-toggleable__label" for="adad22b2-6ece-44ab-89df-360014afc8a2">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c00ed7f8-5024-42bb-b951-a6b925205b95" type="checkbox" ><label class="sk-toggleable__label" for="c00ed7f8-5024-42bb-b951-a6b925205b95">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 184-191

.. code-block:: default

    from sklearn.ensemble import HistGradientBoostingRegressor

    gbdt_pipeline = make_pipeline(
        tree_preprocessor, HistGradientBoostingRegressor(random_state=0)
    )
    gbdt_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c {color: black;background-color: white;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c pre{padding: 0;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c div.sk-toggleable {background-color: white;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c div.sk-estimator:hover {background-color: #d4ebff;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c div.sk-item {z-index: 1;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c div.sk-parallel-item:only-child::after {width: 0;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c div.sk-container {display: inline-block;position: relative;}</style><div id="sk-f164cafe-f195-4049-8cfb-9a4de5cdee5c" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b227b796-3131-42d0-aa3c-962d8ea85931" type="checkbox" ><label class="sk-toggleable__label" for="b227b796-3131-42d0-aa3c-962d8ea85931">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columntransformer',
                     ColumnTransformer(transformers=[('simpleimputer',
                                                      SimpleImputer(add_indicator=True),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1c40>),
                                                     ('ordinalencoder',
                                                      OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                     unknown_value=-1),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1ca0>)])),
                    ('histgradientboostingregressor',
                     HistGradientBoostingRegressor(random_state=0))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="27fb6c17-351a-437e-a2c1-558e0e7ab8d6" type="checkbox" ><label class="sk-toggleable__label" for="27fb6c17-351a-437e-a2c1-558e0e7ab8d6">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1c40>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1ca0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8f18d1f0-1e6d-4999-a1bb-9492eec8761f" type="checkbox" ><label class="sk-toggleable__label" for="8f18d1f0-1e6d-4999-a1bb-9492eec8761f">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1c40></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7b96babf-c28b-4f42-b12b-1f36547e6fa3" type="checkbox" ><label class="sk-toggleable__label" for="7b96babf-c28b-4f42-b12b-1f36547e6fa3">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8655ccec-ebe4-46d1-8465-36a8f6dcb024" type="checkbox" ><label class="sk-toggleable__label" for="8655ccec-ebe4-46d1-8465-36a8f6dcb024">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1ca0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ab695fd4-fd2e-4d69-b6da-5b2e164c0dfc" type="checkbox" ><label class="sk-toggleable__label" for="ab695fd4-fd2e-4d69-b6da-5b2e164c0dfc">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f0d63a9a-a2b3-4609-a604-23f9846358d2" type="checkbox" ><label class="sk-toggleable__label" for="f0d63a9a-a2b3-4609-a604-23f9846358d2">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 192-204

.. code-block:: default

    from sklearn.ensemble import StackingRegressor
    from sklearn.linear_model import RidgeCV

    estimators = [
        ("Random Forest", rf_pipeline),
        ("Lasso", lasso_pipeline),
        ("Gradient Boosting", gbdt_pipeline),
    ]

    stacking_regressor = StackingRegressor(estimators=estimators, final_estimator=RidgeCV())
    stacking_regressor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-c009ed6a-2790-4782-b14a-54ae31388a34 {color: black;background-color: white;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 pre{padding: 0;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 div.sk-toggleable {background-color: white;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 div.sk-estimator:hover {background-color: #d4ebff;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 div.sk-item {z-index: 1;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 div.sk-parallel-item:only-child::after {width: 0;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-c009ed6a-2790-4782-b14a-54ae31388a34 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-c009ed6a-2790-4782-b14a-54ae31388a34" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4fdb9000-7ba1-4d44-a3c7-33ec77d3c1ac" type="checkbox" ><label class="sk-toggleable__label" for="4fdb9000-7ba1-4d44-a3c7-33ec77d3c1ac">StackingRegressor</label><div class="sk-toggleable__content"><pre>StackingRegressor(estimators=[('Random Forest',
                                   Pipeline(steps=[('columntransformer',
                                                    ColumnTransformer(transformers=[('simpleimputer',
                                                                                     SimpleImputer(add_indicator=True),
                                                                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1c40>),
                                                                                    ('ordinalencoder',
                                                                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                                                    unknown_value=-1),
                                                                                     <sklearn.compose...
                                                                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1c40>),
                                                                                    ('ordinalencoder',
                                                                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                                                    unknown_value=-1),
                                                                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1ca0>)])),
                                                   ('histgradientboostingregressor',
                                                    HistGradientBoostingRegressor(random_state=0))]))],
                      final_estimator=RidgeCV(alphas=array([ 0.1,  1. , 10. ])))</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Random Forest</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d131b8b3-f50a-4b6c-8a36-caec9e3f2efd" type="checkbox" ><label class="sk-toggleable__label" for="d131b8b3-f50a-4b6c-8a36-caec9e3f2efd">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1c40>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1ca0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b29935c9-34a7-42e3-b6f2-25ff610714d1" type="checkbox" ><label class="sk-toggleable__label" for="b29935c9-34a7-42e3-b6f2-25ff610714d1">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1c40></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="10d866b2-1e28-4b26-9665-d40f6dc6ddad" type="checkbox" ><label class="sk-toggleable__label" for="10d866b2-1e28-4b26-9665-d40f6dc6ddad">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4bb2c34b-2035-4601-bb09-f5f4257fdc46" type="checkbox" ><label class="sk-toggleable__label" for="4bb2c34b-2035-4601-bb09-f5f4257fdc46">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1ca0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ecf331c2-debe-446a-822d-cc84198521ec" type="checkbox" ><label class="sk-toggleable__label" for="ecf331c2-debe-446a-822d-cc84198521ec">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9ef4784f-096b-4b2c-af85-76cc077610e2" type="checkbox" ><label class="sk-toggleable__label" for="9ef4784f-096b-4b2c-af85-76cc077610e2">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Lasso</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7fdca5c5-52ff-4c3e-801d-8ebd4a4c1cce" type="checkbox" ><label class="sk-toggleable__label" for="7fdca5c5-52ff-4c3e-801d-8ebd4a4c1cce">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('pipeline',
                                     Pipeline(steps=[('standardscaler',
                                                      StandardScaler()),
                                                     ('simpleimputer',
                                                      SimpleImputer(add_indicator=True))]),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1c40>),
                                    ('onehotencoder',
                                     OneHotEncoder(handle_unknown='ignore'),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1ca0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ab483955-8523-4e77-ad9b-f868eebb8e4a" type="checkbox" ><label class="sk-toggleable__label" for="ab483955-8523-4e77-ad9b-f868eebb8e4a">pipeline</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1c40></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="67abfc67-1b55-414d-a580-c4744e4ac0c4" type="checkbox" ><label class="sk-toggleable__label" for="67abfc67-1b55-414d-a580-c4744e4ac0c4">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e5682da3-4c46-4db9-9a94-cc465ce4900f" type="checkbox" ><label class="sk-toggleable__label" for="e5682da3-4c46-4db9-9a94-cc465ce4900f">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b171a4fe-4fb9-4c7b-b1b5-7f9f79692259" type="checkbox" ><label class="sk-toggleable__label" for="b171a4fe-4fb9-4c7b-b1b5-7f9f79692259">onehotencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1ca0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ebea86a4-8c66-4630-b642-3217dc9f8b42" type="checkbox" ><label class="sk-toggleable__label" for="ebea86a4-8c66-4630-b642-3217dc9f8b42">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="477154f4-7635-4826-acb5-5bf514d02cc9" type="checkbox" ><label class="sk-toggleable__label" for="477154f4-7635-4826-acb5-5bf514d02cc9">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Gradient Boosting</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="14919809-c6e1-42d6-bf11-fb520353cfa6" type="checkbox" ><label class="sk-toggleable__label" for="14919809-c6e1-42d6-bf11-fb520353cfa6">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1c40>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1ca0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="15fcf6e3-c6bc-4d40-a731-110feb57346e" type="checkbox" ><label class="sk-toggleable__label" for="15fcf6e3-c6bc-4d40-a731-110feb57346e">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1c40></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="943ecf43-8c12-47ee-996e-c642142847e1" type="checkbox" ><label class="sk-toggleable__label" for="943ecf43-8c12-47ee-996e-c642142847e1">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5e76339d-0d2d-494b-8e9b-593bb795b221" type="checkbox" ><label class="sk-toggleable__label" for="5e76339d-0d2d-494b-8e9b-593bb795b221">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f8772bb1ca0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c6affed7-5ca1-4a35-bbc6-eddaff903794" type="checkbox" ><label class="sk-toggleable__label" for="c6affed7-5ca1-4a35-bbc6-eddaff903794">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="00aabad6-bbaf-4b88-80cb-84966a793587" type="checkbox" ><label class="sk-toggleable__label" for="00aabad6-bbaf-4b88-80cb-84966a793587">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>final_estimator</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d2397ee6-5dfb-4ed6-b16c-30d91dd3be30" type="checkbox" ><label class="sk-toggleable__label" for="d2397ee6-5dfb-4ed6-b16c-30d91dd3be30">RidgeCV</label><div class="sk-toggleable__content"><pre>RidgeCV(alphas=array([ 0.1,  1. , 10. ]))</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 205-214

Measure and plot the results
#############################################################################

 Now we can use Ames Housing dataset to make the predictions. We check the
 performance of each individual predictor as well as of the stack of the
 regressors.

 The function ``plot_regression_results`` is used to plot the predicted and
 true targets.

.. GENERATED FROM PYTHON SOURCE LINES 214-279

.. code-block:: default



    import time
    import matplotlib.pyplot as plt
    from sklearn.model_selection import cross_validate, cross_val_predict


    def plot_regression_results(ax, y_true, y_pred, title, scores, elapsed_time):
        """Scatter plot of the predicted vs true targets."""
        ax.plot(
            [y_true.min(), y_true.max()], [y_true.min(), y_true.max()], "--r", linewidth=2
        )
        ax.scatter(y_true, y_pred, alpha=0.2)

        ax.spines["top"].set_visible(False)
        ax.spines["right"].set_visible(False)
        ax.get_xaxis().tick_bottom()
        ax.get_yaxis().tick_left()
        ax.spines["left"].set_position(("outward", 10))
        ax.spines["bottom"].set_position(("outward", 10))
        ax.set_xlim([y_true.min(), y_true.max()])
        ax.set_ylim([y_true.min(), y_true.max()])
        ax.set_xlabel("Measured")
        ax.set_ylabel("Predicted")
        extra = plt.Rectangle(
            (0, 0), 0, 0, fc="w", fill=False, edgecolor="none", linewidth=0
        )
        ax.legend([extra], [scores], loc="upper left")
        title = title + "\n Evaluation in {:.2f} seconds".format(elapsed_time)
        ax.set_title(title)


    fig, axs = plt.subplots(2, 2, figsize=(9, 7))
    axs = np.ravel(axs)

    for ax, (name, est) in zip(
        axs, estimators + [("Stacking Regressor", stacking_regressor)]
    ):
        start_time = time.time()
        score = cross_validate(
            est, X, y, scoring=["r2", "neg_mean_absolute_error"], n_jobs=-1, verbose=0
        )
        elapsed_time = time.time() - start_time

        y_pred = cross_val_predict(est, X, y, n_jobs=-1, verbose=0)

        plot_regression_results(
            ax,
            y,
            y_pred,
            name,
            (r"$R^2={:.2f} \pm {:.2f}$" + "\n" + r"$MAE={:.2f} \pm {:.2f}$").format(
                np.mean(score["test_r2"]),
                np.std(score["test_r2"]),
                -np.mean(score["test_neg_mean_absolute_error"]),
                np.std(score["test_neg_mean_absolute_error"]),
            ),
            elapsed_time,
        )

    plt.suptitle("Single predictors versus stacked predictors")
    plt.tight_layout()
    plt.subplots_adjust(top=0.9)
    plt.show()




.. image-sg:: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :alt: Single predictors versus stacked predictors, Random Forest  Evaluation in 4.42 seconds, Lasso  Evaluation in 0.74 seconds, Gradient Boosting  Evaluation in 0.94 seconds, Stacking Regressor  Evaluation in 11.92 seconds
   :srcset: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 280-283

The stacked regressor will combine the strengths of the different regressors.
However, we also see that training the stacked regressor is much more
computationally expensive.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  36.065 seconds)


.. _sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/ensemble/plot_stack_predictors.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_stack_predictors.py <plot_stack_predictors.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_stack_predictors.ipynb <plot_stack_predictors.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
