
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/ensemble/plot_stack_predictors.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_ensemble_plot_stack_predictors.py:


=================================
Combine predictors using stacking
=================================

.. currentmodule:: sklearn

Stacking refers to a method to blend estimators. In this strategy, some
estimators are individually fitted on some training data while a final
estimator is trained using the stacked predictions of these base estimators.

In this example, we illustrate the use case in which different regressors are
stacked together and a final linear penalized regressor is used to output the
prediction. We compare the performance of each individual regressor with the
stacking strategy. Stacking slightly improves the overall performance.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

.. code-block:: default


    # Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>
    #          Maria Telenczuk    <https://github.com/maikia>
    # License: BSD 3 clause








.. GENERATED FROM PYTHON SOURCE LINES 24-40

Download the dataset
#############################################################################

 We will use `Ames Housing`_ dataset which was first compiled by Dean De Cock
 and became better known after it was used in Kaggle challenge. It is a set
 of 1460 residential homes in Ames, Iowa, each described by 80 features. We
 will use it to predict the final logarithmic price of the houses. In this
 example we will use only 20 most interesting features chosen using
 GradientBoostingRegressor() and limit number of entries (here we won't go
 into the details on how to select the most interesting features).

 The Ames housing dataset is not shipped with scikit-learn and therefore we
 will fetch it from `OpenML`_.

 .. _`Ames Housing`: http://jse.amstat.org/v19n3/decock.pdf
 .. _`OpenML`: https://www.openml.org/d/42165

.. GENERATED FROM PYTHON SOURCE LINES 40-86

.. code-block:: default


    import numpy as np

    from sklearn.datasets import fetch_openml
    from sklearn.utils import shuffle


    def load_ames_housing():
        df = fetch_openml(name="house_prices", as_frame=True)
        X = df.data
        y = df.target

        features = [
            "YrSold",
            "HeatingQC",
            "Street",
            "YearRemodAdd",
            "Heating",
            "MasVnrType",
            "BsmtUnfSF",
            "Foundation",
            "MasVnrArea",
            "MSSubClass",
            "ExterQual",
            "Condition2",
            "GarageCars",
            "GarageType",
            "OverallQual",
            "TotalBsmtSF",
            "BsmtFinSF1",
            "HouseStyle",
            "MiscFeature",
            "MoSold",
        ]

        X = X[features]
        X, y = shuffle(X, y, random_state=0)

        X = X[:600]
        y = y[:600]
        return X, np.log(y)


    X, y = load_ames_housing()









.. GENERATED FROM PYTHON SOURCE LINES 87-93

Make pipeline to preprocess the data
#############################################################################

 Before we can use Ames dataset we still need to do some preprocessing.
 First, we will select the categorical and numerical columns of the dataset to
 construct the first step of the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 93-100

.. code-block:: default


    from sklearn.compose import make_column_selector

    cat_selector = make_column_selector(dtype_include=object)
    num_selector = make_column_selector(dtype_include=np.number)
    cat_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['HeatingQC', 'Street', 'Heating', 'MasVnrType', 'Foundation', 'ExterQual', 'Condition2', 'GarageType', 'HouseStyle', 'MiscFeature']



.. GENERATED FROM PYTHON SOURCE LINES 101-103

.. code-block:: default

    num_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['YrSold', 'YearRemodAdd', 'BsmtUnfSF', 'MasVnrArea', 'MSSubClass', 'GarageCars', 'OverallQual', 'TotalBsmtSF', 'BsmtFinSF1', 'MoSold']



.. GENERATED FROM PYTHON SOURCE LINES 104-113

Then, we will need to design preprocessing pipelines which depends on the
ending regressor. If the ending regressor is a linear model, one needs to
one-hot encode the categories. If the ending regressor is a tree-based model
an ordinal encoder will be sufficient. Besides, numerical values need to be
standardized for a linear model while the raw numerical data can be treated
as is by a tree-based model. However, both models need an imputer to
handle missing values.

We will first design the pipeline required for the tree-based models.

.. GENERATED FROM PYTHON SOURCE LINES 113-129

.. code-block:: default


    from sklearn.compose import make_column_transformer
    from sklearn.impute import SimpleImputer
    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import OrdinalEncoder

    cat_tree_processor = OrdinalEncoder(
        handle_unknown="use_encoded_value", unknown_value=-1
    )
    num_tree_processor = SimpleImputer(strategy="mean", add_indicator=True)

    tree_preprocessor = make_column_transformer(
        (num_tree_processor, num_selector), (cat_tree_processor, cat_selector)
    )
    tree_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 {color: black;background-color: white;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 pre{padding: 0;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 div.sk-toggleable {background-color: white;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 div.sk-estimator:hover {background-color: #d4ebff;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 div.sk-item {z-index: 1;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 div.sk-parallel-item:only-child::after {width: 0;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25 div.sk-text-repr-fallback {display: none;}</style><div id="sk-f72f87ad-8dd5-47b4-865a-4bd285e8ec25" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;)])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e7c535e3-3297-4616-a8e0-7e72d514ae8e" type="checkbox" ><label for="e7c535e3-3297-4616-a8e0-7e72d514ae8e" class="sk-toggleable__label sk-toggleable__label-arrow">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f02b2ef2-40d8-4050-84c9-699a4e496993" type="checkbox" ><label for="f02b2ef2-40d8-4050-84c9-699a4e496993" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ff9ace52-893c-433d-9922-6034c30a4bd9" type="checkbox" ><label for="ff9ace52-893c-433d-9922-6034c30a4bd9" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e7083f1c-5981-4747-8691-b0f4a6213ae9" type="checkbox" ><label for="e7083f1c-5981-4747-8691-b0f4a6213ae9" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="222db8e3-3dfe-4ede-936e-a8da3d182bd2" type="checkbox" ><label for="222db8e3-3dfe-4ede-936e-a8da3d182bd2" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 130-132

Then, we will now define the preprocessor used when the ending regressor
is a linear model.

.. GENERATED FROM PYTHON SOURCE LINES 132-146

.. code-block:: default


    from sklearn.preprocessing import OneHotEncoder
    from sklearn.preprocessing import StandardScaler

    cat_linear_processor = OneHotEncoder(handle_unknown="ignore")
    num_linear_processor = make_pipeline(
        StandardScaler(), SimpleImputer(strategy="mean", add_indicator=True)
    )

    linear_preprocessor = make_column_transformer(
        (num_linear_processor, num_selector), (cat_linear_processor, cat_selector)
    )
    linear_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 {color: black;background-color: white;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 pre{padding: 0;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 div.sk-toggleable {background-color: white;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 div.sk-item {z-index: 1;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 div.sk-parallel-item:only-child::after {width: 0;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-0174cd9c-40e1-4305-9112-31efbed9cba6 div.sk-text-repr-fallback {display: none;}</style><div id="sk-0174cd9c-40e1-4305-9112-31efbed9cba6" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;)])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="276cb431-35df-452d-8aa3-5e2a7a7d21a7" type="checkbox" ><label for="276cb431-35df-452d-8aa3-5e2a7a7d21a7" class="sk-toggleable__label sk-toggleable__label-arrow">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="42899d48-aa82-42d9-9f72-80c38e28f61d" type="checkbox" ><label for="42899d48-aa82-42d9-9f72-80c38e28f61d" class="sk-toggleable__label sk-toggleable__label-arrow">pipeline</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ddc11003-a7b9-4203-b9c0-7d62ebc274af" type="checkbox" ><label for="ddc11003-a7b9-4203-b9c0-7d62ebc274af" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="09dc09ec-e4e7-4607-b22c-733999fcc9ce" type="checkbox" ><label for="09dc09ec-e4e7-4607-b22c-733999fcc9ce" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="69956f97-0832-4aa8-adab-dbac11c70d7c" type="checkbox" ><label for="69956f97-0832-4aa8-adab-dbac11c70d7c" class="sk-toggleable__label sk-toggleable__label-arrow">onehotencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="77348913-6741-4464-9beb-b83b946b06c1" type="checkbox" ><label for="77348913-6741-4464-9beb-b83b946b06c1" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 147-165

Stack of predictors on a single data set
#############################################################################

 It is sometimes tedious to find the model which will best perform on a given
 dataset. Stacking provide an alternative by combining the outputs of several
 learners, without the need to choose a model specifically. The performance of
 stacking is usually close to the best model and sometimes it can outperform
 the prediction performance of each individual model.

 Here, we combine 3 learners (linear and non-linear) and use a ridge regressor
 to combine their outputs together.

 .. note::
    Although we will make new pipelines with the processors which we wrote in
    the previous section for the 3 learners, the final estimator
    :class:`~sklearn.linear_model.RidgeCV()` does not need preprocessing of
    the data as it will be fed with the already preprocessed output from the 3
    learners.

.. GENERATED FROM PYTHON SOURCE LINES 165-171

.. code-block:: default


    from sklearn.linear_model import LassoCV

    lasso_pipeline = make_pipeline(linear_preprocessor, LassoCV())
    lasso_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d {color: black;background-color: white;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d pre{padding: 0;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d div.sk-toggleable {background-color: white;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d div.sk-estimator:hover {background-color: #d4ebff;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d div.sk-item {z-index: 1;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d div.sk-parallel-item:only-child::after {width: 0;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-1ade85dd-81d4-4410-a405-7c6fb46b189d div.sk-text-repr-fallback {display: none;}</style><div id="sk-1ade85dd-81d4-4410-a405-7c6fb46b189d" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                                      Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                                       StandardScaler()),
                                                                      (&#x27;simpleimputer&#x27;,
                                                                       SimpleImputer(add_indicator=True))]),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;),
                                                     (&#x27;onehotencoder&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;)])),
                    (&#x27;lassocv&#x27;, LassoCV())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b8cb8710-e9c4-44d4-961e-65b34935e560" type="checkbox" ><label for="b8cb8710-e9c4-44d4-961e-65b34935e560" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                                      Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                                       StandardScaler()),
                                                                      (&#x27;simpleimputer&#x27;,
                                                                       SimpleImputer(add_indicator=True))]),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;),
                                                     (&#x27;onehotencoder&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;)])),
                    (&#x27;lassocv&#x27;, LassoCV())])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7bb980a1-41c3-4abd-99c3-a4f70d4d945f" type="checkbox" ><label for="7bb980a1-41c3-4abd-99c3-a4f70d4d945f" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="19f41371-4f2a-40fe-b3bf-3b0e298e7afc" type="checkbox" ><label for="19f41371-4f2a-40fe-b3bf-3b0e298e7afc" class="sk-toggleable__label sk-toggleable__label-arrow">pipeline</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b008d714-1d13-44e3-a4c7-2f58d8e9b4e6" type="checkbox" ><label for="b008d714-1d13-44e3-a4c7-2f58d8e9b4e6" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7301e4e2-d321-47bb-90a5-a579cfe43423" type="checkbox" ><label for="7301e4e2-d321-47bb-90a5-a579cfe43423" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ceb7f39a-12d6-44a1-bc9c-dd9c96d766df" type="checkbox" ><label for="ceb7f39a-12d6-44a1-bc9c-dd9c96d766df" class="sk-toggleable__label sk-toggleable__label-arrow">onehotencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9a824bee-2265-44b7-a671-666c3c1cfafc" type="checkbox" ><label for="9a824bee-2265-44b7-a671-666c3c1cfafc" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="96bbbb2b-9bad-4d88-9fea-c4d1a80faafe" type="checkbox" ><label for="96bbbb2b-9bad-4d88-9fea-c4d1a80faafe" class="sk-toggleable__label sk-toggleable__label-arrow">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 172-177

.. code-block:: default

    from sklearn.ensemble import RandomForestRegressor

    rf_pipeline = make_pipeline(tree_preprocessor, RandomForestRegressor(random_state=42))
    rf_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a {color: black;background-color: white;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a pre{padding: 0;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a div.sk-toggleable {background-color: white;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a div.sk-estimator:hover {background-color: #d4ebff;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a div.sk-item {z-index: 1;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a div.sk-parallel-item:only-child::after {width: 0;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-1fe03f36-d290-4b06-9383-ed5e22d0063a div.sk-text-repr-fallback {display: none;}</style><div id="sk-1fe03f36-d290-4b06-9383-ed5e22d0063a" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;)])),
                    (&#x27;randomforestregressor&#x27;,
                     RandomForestRegressor(random_state=42))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9f6655f0-4fec-4332-95f5-e1383b911b37" type="checkbox" ><label for="9f6655f0-4fec-4332-95f5-e1383b911b37" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;)])),
                    (&#x27;randomforestregressor&#x27;,
                     RandomForestRegressor(random_state=42))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1f604562-8dbc-43ec-9ae7-2cbb8f25f146" type="checkbox" ><label for="1f604562-8dbc-43ec-9ae7-2cbb8f25f146" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f5114a1d-2c69-440a-b07e-88732730f4d6" type="checkbox" ><label for="f5114a1d-2c69-440a-b07e-88732730f4d6" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b9c30e79-daf3-47dd-a468-c5ccced5a72c" type="checkbox" ><label for="b9c30e79-daf3-47dd-a468-c5ccced5a72c" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="fd1fd913-d098-437d-bbce-a849e2dfef51" type="checkbox" ><label for="fd1fd913-d098-437d-bbce-a849e2dfef51" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="bded3831-4614-4428-8eac-44e35aee8745" type="checkbox" ><label for="bded3831-4614-4428-8eac-44e35aee8745" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f9cdeb8e-969f-44c5-aafd-a17ea10ef692" type="checkbox" ><label for="f9cdeb8e-969f-44c5-aafd-a17ea10ef692" class="sk-toggleable__label sk-toggleable__label-arrow">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 178-185

.. code-block:: default

    from sklearn.ensemble import HistGradientBoostingRegressor

    gbdt_pipeline = make_pipeline(
        tree_preprocessor, HistGradientBoostingRegressor(random_state=0)
    )
    gbdt_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 {color: black;background-color: white;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 pre{padding: 0;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 div.sk-toggleable {background-color: white;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 div.sk-estimator:hover {background-color: #d4ebff;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 div.sk-item {z-index: 1;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 div.sk-parallel-item:only-child::after {width: 0;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26 div.sk-text-repr-fallback {display: none;}</style><div id="sk-9f37048f-11a0-4a68-92e2-d74d5f8acb26" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;)])),
                    (&#x27;histgradientboostingregressor&#x27;,
                     HistGradientBoostingRegressor(random_state=0))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d843fe30-94ef-424e-a9b4-b4dfde7816cc" type="checkbox" ><label for="d843fe30-94ef-424e-a9b4-b4dfde7816cc" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;)])),
                    (&#x27;histgradientboostingregressor&#x27;,
                     HistGradientBoostingRegressor(random_state=0))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="bf297214-5b44-4583-865f-79de46d9725f" type="checkbox" ><label for="bf297214-5b44-4583-865f-79de46d9725f" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1cb4fbe6-f81e-4754-8fda-b1c9fdb3cb43" type="checkbox" ><label for="1cb4fbe6-f81e-4754-8fda-b1c9fdb3cb43" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="cbed036b-f8b3-4720-b754-dfba64bb3c57" type="checkbox" ><label for="cbed036b-f8b3-4720-b754-dfba64bb3c57" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="10281c9e-71ff-4dc2-9949-a26ad2a2098e" type="checkbox" ><label for="10281c9e-71ff-4dc2-9949-a26ad2a2098e" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9d762b57-d630-43ff-934a-5a6daf31a1b4" type="checkbox" ><label for="9d762b57-d630-43ff-934a-5a6daf31a1b4" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f82504b8-e301-440a-a0dc-91727a3fb20c" type="checkbox" ><label for="f82504b8-e301-440a-a0dc-91727a3fb20c" class="sk-toggleable__label sk-toggleable__label-arrow">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 186-198

.. code-block:: default

    from sklearn.ensemble import StackingRegressor
    from sklearn.linear_model import RidgeCV

    estimators = [
        ("Random Forest", rf_pipeline),
        ("Lasso", lasso_pipeline),
        ("Gradient Boosting", gbdt_pipeline),
    ]

    stacking_regressor = StackingRegressor(estimators=estimators, final_estimator=RidgeCV())
    stacking_regressor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc {color: black;background-color: white;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc pre{padding: 0;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc div.sk-toggleable {background-color: white;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc div.sk-estimator:hover {background-color: #d4ebff;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc div.sk-item {z-index: 1;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc div.sk-parallel-item:only-child::after {width: 0;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc div.sk-text-repr-fallback {display: none;}</style><div id="sk-999a794e-b4bb-48a2-a4ef-63929bbb8dfc" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>StackingRegressor(estimators=[(&#x27;Random Forest&#x27;,
                                   Pipeline(steps=[(&#x27;columntransformer&#x27;,
                                                    ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                                                     SimpleImputer(add_indicator=True),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose...
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;)])),
                                                   (&#x27;histgradientboostingregressor&#x27;,
                                                    HistGradientBoostingRegressor(random_state=0))]))],
                      final_estimator=RidgeCV())</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="21257cfa-a76b-476e-a066-7da311e8b46d" type="checkbox" ><label for="21257cfa-a76b-476e-a066-7da311e8b46d" class="sk-toggleable__label sk-toggleable__label-arrow">StackingRegressor</label><div class="sk-toggleable__content"><pre>StackingRegressor(estimators=[(&#x27;Random Forest&#x27;,
                                   Pipeline(steps=[(&#x27;columntransformer&#x27;,
                                                    ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                                                     SimpleImputer(add_indicator=True),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose...
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;)])),
                                                   (&#x27;histgradientboostingregressor&#x27;,
                                                    HistGradientBoostingRegressor(random_state=0))]))],
                      final_estimator=RidgeCV())</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Random Forest</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="59f02dad-0024-419f-8e6d-f3893ad304ea" type="checkbox" ><label for="59f02dad-0024-419f-8e6d-f3893ad304ea" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="412c31b3-5830-409a-ab1a-44997a3e2e24" type="checkbox" ><label for="412c31b3-5830-409a-ab1a-44997a3e2e24" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="937c00eb-d84e-44f9-9d70-d7235821e47f" type="checkbox" ><label for="937c00eb-d84e-44f9-9d70-d7235821e47f" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="908dbf59-ff47-4a62-bc40-ad987d0e7dea" type="checkbox" ><label for="908dbf59-ff47-4a62-bc40-ad987d0e7dea" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0c5c02c1-4b58-45bf-9b78-77825bce6786" type="checkbox" ><label for="0c5c02c1-4b58-45bf-9b78-77825bce6786" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0c712551-91f5-494e-8647-c38b17f79d2c" type="checkbox" ><label for="0c712551-91f5-494e-8647-c38b17f79d2c" class="sk-toggleable__label sk-toggleable__label-arrow">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Lasso</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ed4c4f8f-ab27-4867-b5dd-9b1e9dacf93e" type="checkbox" ><label for="ed4c4f8f-ab27-4867-b5dd-9b1e9dacf93e" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="08cec7a4-8704-4fb6-9576-00d0286ef98f" type="checkbox" ><label for="08cec7a4-8704-4fb6-9576-00d0286ef98f" class="sk-toggleable__label sk-toggleable__label-arrow">pipeline</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c28b50b3-91d7-4806-8679-6b53188b270d" type="checkbox" ><label for="c28b50b3-91d7-4806-8679-6b53188b270d" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4e7d131d-635b-48f3-8da2-7c8d25f7a2d7" type="checkbox" ><label for="4e7d131d-635b-48f3-8da2-7c8d25f7a2d7" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c044b979-b5bd-4d42-b3fa-8cfe20ee0886" type="checkbox" ><label for="c044b979-b5bd-4d42-b3fa-8cfe20ee0886" class="sk-toggleable__label sk-toggleable__label-arrow">onehotencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="bb1d65e1-73df-4888-9af2-2bef9c116c59" type="checkbox" ><label for="bb1d65e1-73df-4888-9af2-2bef9c116c59" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6a1ee947-b73e-4cd0-b6c8-bd2751708c13" type="checkbox" ><label for="6a1ee947-b73e-4cd0-b6c8-bd2751708c13" class="sk-toggleable__label sk-toggleable__label-arrow">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Gradient Boosting</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1c4b6be3-2710-4859-b61b-c09fe86af61a" type="checkbox" ><label for="1c4b6be3-2710-4859-b61b-c09fe86af61a" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="cb9119f6-4284-4da4-aaa5-442f146c527e" type="checkbox" ><label for="cb9119f6-4284-4da4-aaa5-442f146c527e" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b93d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7aecfd57-6e9a-4d29-9772-0431240b8b3f" type="checkbox" ><label for="7aecfd57-6e9a-4d29-9772-0431240b8b3f" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f2949c56-7d89-4e27-89f4-b62baa835f06" type="checkbox" ><label for="f2949c56-7d89-4e27-89f4-b62baa835f06" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f23ea5b9b20&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e611cf32-7270-46bf-90c8-1c509296058a" type="checkbox" ><label for="e611cf32-7270-46bf-90c8-1c509296058a" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="28d0d372-af96-475c-a77c-0e24869aefbf" type="checkbox" ><label for="28d0d372-af96-475c-a77c-0e24869aefbf" class="sk-toggleable__label sk-toggleable__label-arrow">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>final_estimator</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0833ad9f-36fc-4b56-8334-c0d60bbbc55c" type="checkbox" ><label for="0833ad9f-36fc-4b56-8334-c0d60bbbc55c" class="sk-toggleable__label sk-toggleable__label-arrow">RidgeCV</label><div class="sk-toggleable__content"><pre>RidgeCV()</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 199-208

Measure and plot the results
#############################################################################

 Now we can use Ames Housing dataset to make the predictions. We check the
 performance of each individual predictor as well as of the stack of the
 regressors.

 The function ``plot_regression_results`` is used to plot the predicted and
 true targets.

.. GENERATED FROM PYTHON SOURCE LINES 208-273

.. code-block:: default



    import time
    import matplotlib.pyplot as plt
    from sklearn.model_selection import cross_validate, cross_val_predict


    def plot_regression_results(ax, y_true, y_pred, title, scores, elapsed_time):
        """Scatter plot of the predicted vs true targets."""
        ax.plot(
            [y_true.min(), y_true.max()], [y_true.min(), y_true.max()], "--r", linewidth=2
        )
        ax.scatter(y_true, y_pred, alpha=0.2)

        ax.spines["top"].set_visible(False)
        ax.spines["right"].set_visible(False)
        ax.get_xaxis().tick_bottom()
        ax.get_yaxis().tick_left()
        ax.spines["left"].set_position(("outward", 10))
        ax.spines["bottom"].set_position(("outward", 10))
        ax.set_xlim([y_true.min(), y_true.max()])
        ax.set_ylim([y_true.min(), y_true.max()])
        ax.set_xlabel("Measured")
        ax.set_ylabel("Predicted")
        extra = plt.Rectangle(
            (0, 0), 0, 0, fc="w", fill=False, edgecolor="none", linewidth=0
        )
        ax.legend([extra], [scores], loc="upper left")
        title = title + "\n Evaluation in {:.2f} seconds".format(elapsed_time)
        ax.set_title(title)


    fig, axs = plt.subplots(2, 2, figsize=(9, 7))
    axs = np.ravel(axs)

    for ax, (name, est) in zip(
        axs, estimators + [("Stacking Regressor", stacking_regressor)]
    ):
        start_time = time.time()
        score = cross_validate(
            est, X, y, scoring=["r2", "neg_mean_absolute_error"], n_jobs=2, verbose=0
        )
        elapsed_time = time.time() - start_time

        y_pred = cross_val_predict(est, X, y, n_jobs=2, verbose=0)

        plot_regression_results(
            ax,
            y,
            y_pred,
            name,
            (r"$R^2={:.2f} \pm {:.2f}$" + "\n" + r"$MAE={:.2f} \pm {:.2f}$").format(
                np.mean(score["test_r2"]),
                np.std(score["test_r2"]),
                -np.mean(score["test_neg_mean_absolute_error"]),
                np.std(score["test_neg_mean_absolute_error"]),
            ),
            elapsed_time,
        )

    plt.suptitle("Single predictors versus stacked predictors")
    plt.tight_layout()
    plt.subplots_adjust(top=0.9)
    plt.show()




.. image-sg:: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :alt: Single predictors versus stacked predictors, Random Forest  Evaluation in 0.98 seconds, Lasso  Evaluation in 0.17 seconds, Gradient Boosting  Evaluation in 0.46 seconds, Stacking Regressor  Evaluation in 8.08 seconds
   :srcset: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 274-277

The stacked regressor will combine the strengths of the different regressors.
However, we also see that training the stacked regressor is much more
computationally expensive.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  19.859 seconds)


.. _sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/ensemble/plot_stack_predictors.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_stack_predictors.py <plot_stack_predictors.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_stack_predictors.ipynb <plot_stack_predictors.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
