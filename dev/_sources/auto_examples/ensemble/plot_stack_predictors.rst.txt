
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/ensemble/plot_stack_predictors.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_ensemble_plot_stack_predictors.py:


=================================
Combine predictors using stacking
=================================

.. currentmodule:: sklearn

Stacking refers to a method to blend estimators. In this strategy, some
estimators are individually fitted on some training data while a final
estimator is trained using the stacked predictions of these base estimators.

In this example, we illustrate the use case in which different regressors are
stacked together and a final linear penalized regressor is used to output the
prediction. We compare the performance of each individual regressor with the
stacking strategy. Stacking slightly improves the overall performance.

.. GENERATED FROM PYTHON SOURCE LINES 18-29

.. code-block:: default


    # Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>
    #          Maria Telenczuk    <https://github.com/maikia>
    # License: BSD 3 clause

    print(__doc__)

    from sklearn import set_config

    set_config(display="diagram")








.. GENERATED FROM PYTHON SOURCE LINES 30-46

Download the dataset
#############################################################################

 We will use `Ames Housing`_ dataset which was first compiled by Dean De Cock
 and became better known after it was used in Kaggle challenge. It is a set
 of 1460 residential homes in Ames, Iowa, each described by 80 features. We
 will use it to predict the final logarithmic price of the houses. In this
 example we will use only 20 most interesting features chosen using
 GradientBoostingRegressor() and limit number of entries (here we won't go
 into the details on how to select the most interesting features).

 The Ames housing dataset is not shipped with scikit-learn and therefore we
 will fetch it from `OpenML`_.

 .. _`Ames Housing`: http://jse.amstat.org/v19n3/decock.pdf
 .. _`OpenML`: https://www.openml.org/d/42165

.. GENERATED FROM PYTHON SOURCE LINES 46-92

.. code-block:: default


    import numpy as np

    from sklearn.datasets import fetch_openml
    from sklearn.utils import shuffle


    def load_ames_housing():
        df = fetch_openml(name="house_prices", as_frame=True)
        X = df.data
        y = df.target

        features = [
            "YrSold",
            "HeatingQC",
            "Street",
            "YearRemodAdd",
            "Heating",
            "MasVnrType",
            "BsmtUnfSF",
            "Foundation",
            "MasVnrArea",
            "MSSubClass",
            "ExterQual",
            "Condition2",
            "GarageCars",
            "GarageType",
            "OverallQual",
            "TotalBsmtSF",
            "BsmtFinSF1",
            "HouseStyle",
            "MiscFeature",
            "MoSold",
        ]

        X = X[features]
        X, y = shuffle(X, y, random_state=0)

        X = X[:600]
        y = y[:600]
        return X, np.log(y)


    X, y = load_ames_housing()









.. GENERATED FROM PYTHON SOURCE LINES 93-99

Make pipeline to preprocess the data
#############################################################################

 Before we can use Ames dataset we still need to do some preprocessing.
 First, we will select the categorical and numerical columns of the dataset to
 construct the first step of the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 99-106

.. code-block:: default


    from sklearn.compose import make_column_selector

    cat_selector = make_column_selector(dtype_include=object)
    num_selector = make_column_selector(dtype_include=np.number)
    cat_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['HeatingQC', 'Street', 'Heating', 'MasVnrType', 'Foundation', 'ExterQual', 'Condition2', 'GarageType', 'HouseStyle', 'MiscFeature']



.. GENERATED FROM PYTHON SOURCE LINES 107-109

.. code-block:: default

    num_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['YrSold', 'YearRemodAdd', 'BsmtUnfSF', 'MasVnrArea', 'MSSubClass', 'GarageCars', 'OverallQual', 'TotalBsmtSF', 'BsmtFinSF1', 'MoSold']



.. GENERATED FROM PYTHON SOURCE LINES 110-119

Then, we will need to design preprocessing pipelines which depends on the
ending regressor. If the ending regressor is a linear model, one needs to
one-hot encode the categories. If the ending regressor is a tree-based model
an ordinal encoder will be sufficient. Besides, numerical values need to be
standardized for a linear model while the raw numerical data can be treated
as is by a tree-based model. However, both models need an imputer to
handle missing values.

We will first design the pipeline required for the tree-based models.

.. GENERATED FROM PYTHON SOURCE LINES 119-135

.. code-block:: default


    from sklearn.compose import make_column_transformer
    from sklearn.impute import SimpleImputer
    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import OrdinalEncoder

    cat_tree_processor = OrdinalEncoder(
        handle_unknown="use_encoded_value", unknown_value=-1
    )
    num_tree_processor = SimpleImputer(strategy="mean", add_indicator=True)

    tree_preprocessor = make_column_transformer(
        (num_tree_processor, num_selector), (cat_tree_processor, cat_selector)
    )
    tree_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-c95129eb-9586-4411-983c-7cbb43402695 {color: black;background-color: white;}#sk-c95129eb-9586-4411-983c-7cbb43402695 pre{padding: 0;}#sk-c95129eb-9586-4411-983c-7cbb43402695 div.sk-toggleable {background-color: white;}#sk-c95129eb-9586-4411-983c-7cbb43402695 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-c95129eb-9586-4411-983c-7cbb43402695 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-c95129eb-9586-4411-983c-7cbb43402695 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-c95129eb-9586-4411-983c-7cbb43402695 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-c95129eb-9586-4411-983c-7cbb43402695 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-c95129eb-9586-4411-983c-7cbb43402695 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-c95129eb-9586-4411-983c-7cbb43402695 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-c95129eb-9586-4411-983c-7cbb43402695 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-c95129eb-9586-4411-983c-7cbb43402695 div.sk-estimator:hover {background-color: #d4ebff;}#sk-c95129eb-9586-4411-983c-7cbb43402695 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-c95129eb-9586-4411-983c-7cbb43402695 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-c95129eb-9586-4411-983c-7cbb43402695 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-c95129eb-9586-4411-983c-7cbb43402695 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-c95129eb-9586-4411-983c-7cbb43402695 div.sk-item {z-index: 1;}#sk-c95129eb-9586-4411-983c-7cbb43402695 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-c95129eb-9586-4411-983c-7cbb43402695 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-c95129eb-9586-4411-983c-7cbb43402695 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-c95129eb-9586-4411-983c-7cbb43402695 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-c95129eb-9586-4411-983c-7cbb43402695 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-c95129eb-9586-4411-983c-7cbb43402695 div.sk-parallel-item:only-child::after {width: 0;}#sk-c95129eb-9586-4411-983c-7cbb43402695 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-c95129eb-9586-4411-983c-7cbb43402695 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-c95129eb-9586-4411-983c-7cbb43402695 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-c95129eb-9586-4411-983c-7cbb43402695 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-c95129eb-9586-4411-983c-7cbb43402695" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="bd886e58-82ee-438b-b713-16c5de5e3d6a" type="checkbox" ><label class="sk-toggleable__label" for="bd886e58-82ee-438b-b713-16c5de5e3d6a">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8d6300c10>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8e35335e0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2dca3d0b-0e68-4ef2-86c5-5406bc7273ff" type="checkbox" ><label class="sk-toggleable__label" for="2dca3d0b-0e68-4ef2-86c5-5406bc7273ff">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fe8d6300c10></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6e120a21-a951-4ff7-9487-98cfb06a54aa" type="checkbox" ><label class="sk-toggleable__label" for="6e120a21-a951-4ff7-9487-98cfb06a54aa">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d1d19c21-723b-47e3-ba12-48e1f413cfdd" type="checkbox" ><label class="sk-toggleable__label" for="d1d19c21-723b-47e3-ba12-48e1f413cfdd">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fe8e35335e0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0b736838-ff2d-4e5f-a375-2ec751e54958" type="checkbox" ><label class="sk-toggleable__label" for="0b736838-ff2d-4e5f-a375-2ec751e54958">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 136-138

Then, we will now define the preprocessor used when the ending regressor
is a linear model.

.. GENERATED FROM PYTHON SOURCE LINES 138-152

.. code-block:: default


    from sklearn.preprocessing import OneHotEncoder
    from sklearn.preprocessing import StandardScaler

    cat_linear_processor = OneHotEncoder(handle_unknown="ignore")
    num_linear_processor = make_pipeline(
        StandardScaler(), SimpleImputer(strategy="mean", add_indicator=True)
    )

    linear_preprocessor = make_column_transformer(
        (num_linear_processor, num_selector), (cat_linear_processor, cat_selector)
    )
    linear_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea {color: black;background-color: white;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea pre{padding: 0;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea div.sk-toggleable {background-color: white;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea div.sk-estimator:hover {background-color: #d4ebff;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea div.sk-item {z-index: 1;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea div.sk-parallel-item:only-child::after {width: 0;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea div.sk-container {display: inline-block;position: relative;}</style><div id="sk-eeeaf3ef-7525-46b1-a30c-3327c88245ea" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="258cee26-1eb4-493d-985c-54e4795b008a" type="checkbox" ><label class="sk-toggleable__label" for="258cee26-1eb4-493d-985c-54e4795b008a">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('pipeline',
                                     Pipeline(steps=[('standardscaler',
                                                      StandardScaler()),
                                                     ('simpleimputer',
                                                      SimpleImputer(add_indicator=True))]),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8d6300c10>),
                                    ('onehotencoder',
                                     OneHotEncoder(handle_unknown='ignore'),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8e35335e0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="34dddc02-ee7f-43fc-bc8d-9b742e2824f2" type="checkbox" ><label class="sk-toggleable__label" for="34dddc02-ee7f-43fc-bc8d-9b742e2824f2">pipeline</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fe8d6300c10></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1aa25c33-a944-4ea9-89f5-b3259963d99a" type="checkbox" ><label class="sk-toggleable__label" for="1aa25c33-a944-4ea9-89f5-b3259963d99a">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="511d411f-2ac5-4633-bff9-4f9ad61a6977" type="checkbox" ><label class="sk-toggleable__label" for="511d411f-2ac5-4633-bff9-4f9ad61a6977">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="84bcfc70-c9cc-4290-8dc1-07f608ed7fd2" type="checkbox" ><label class="sk-toggleable__label" for="84bcfc70-c9cc-4290-8dc1-07f608ed7fd2">onehotencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fe8e35335e0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5270d53e-7474-4170-8a1e-d592f309177a" type="checkbox" ><label class="sk-toggleable__label" for="5270d53e-7474-4170-8a1e-d592f309177a">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 153-171

Stack of predictors on a single data set
#############################################################################

 It is sometimes tedious to find the model which will best perform on a given
 dataset. Stacking provide an alternative by combining the outputs of several
 learners, without the need to choose a model specifically. The performance of
 stacking is usually close to the best model and sometimes it can outperform
 the prediction performance of each individual model.

 Here, we combine 3 learners (linear and non-linear) and use a ridge regressor
 to combine their outputs together.

 .. note::
    Although we will make new pipelines with the processors which we wrote in
    the previous section for the 3 learners, the final estimator
    :class:`~sklearn.linear_model.RidgeCV()` does not need preprocessing of
    the data as it will be fed with the already preprocessed output from the 3
    learners.

.. GENERATED FROM PYTHON SOURCE LINES 171-177

.. code-block:: default


    from sklearn.linear_model import LassoCV

    lasso_pipeline = make_pipeline(linear_preprocessor, LassoCV())
    lasso_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-a7266e67-47db-4ce3-98f8-5e95313867fe {color: black;background-color: white;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe pre{padding: 0;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe div.sk-toggleable {background-color: white;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe div.sk-estimator:hover {background-color: #d4ebff;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe div.sk-item {z-index: 1;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe div.sk-parallel-item:only-child::after {width: 0;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-a7266e67-47db-4ce3-98f8-5e95313867fe div.sk-container {display: inline-block;position: relative;}</style><div id="sk-a7266e67-47db-4ce3-98f8-5e95313867fe" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0770708a-30b9-45e1-baec-215d4f55d914" type="checkbox" ><label class="sk-toggleable__label" for="0770708a-30b9-45e1-baec-215d4f55d914">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columntransformer',
                     ColumnTransformer(transformers=[('pipeline',
                                                      Pipeline(steps=[('standardscaler',
                                                                       StandardScaler()),
                                                                      ('simpleimputer',
                                                                       SimpleImputer(add_indicator=True))]),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8d6300c10>),
                                                     ('onehotencoder',
                                                      OneHotEncoder(handle_unknown='ignore'),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8e35335e0>)])),
                    ('lassocv', LassoCV())])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="84b8861d-eef0-427f-b5d1-5fb566a53748" type="checkbox" ><label class="sk-toggleable__label" for="84b8861d-eef0-427f-b5d1-5fb566a53748">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('pipeline',
                                     Pipeline(steps=[('standardscaler',
                                                      StandardScaler()),
                                                     ('simpleimputer',
                                                      SimpleImputer(add_indicator=True))]),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8d6300c10>),
                                    ('onehotencoder',
                                     OneHotEncoder(handle_unknown='ignore'),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8e35335e0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2dfbd43c-e93b-4cce-981c-753886b6299f" type="checkbox" ><label class="sk-toggleable__label" for="2dfbd43c-e93b-4cce-981c-753886b6299f">pipeline</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fe8d6300c10></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="58cee003-807b-4d40-9fe7-7b119c862583" type="checkbox" ><label class="sk-toggleable__label" for="58cee003-807b-4d40-9fe7-7b119c862583">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a5593fb3-cb64-43a6-90b1-397d08930cb7" type="checkbox" ><label class="sk-toggleable__label" for="a5593fb3-cb64-43a6-90b1-397d08930cb7">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7e8686a6-d5c7-421c-bd8e-4905126fbdaf" type="checkbox" ><label class="sk-toggleable__label" for="7e8686a6-d5c7-421c-bd8e-4905126fbdaf">onehotencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fe8e35335e0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="61a75afc-656c-4c9e-8cc2-5311b2439276" type="checkbox" ><label class="sk-toggleable__label" for="61a75afc-656c-4c9e-8cc2-5311b2439276">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b78c9477-fd0f-4c8d-bd07-f7b028f4b0d5" type="checkbox" ><label class="sk-toggleable__label" for="b78c9477-fd0f-4c8d-bd07-f7b028f4b0d5">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 178-183

.. code-block:: default

    from sklearn.ensemble import RandomForestRegressor

    rf_pipeline = make_pipeline(tree_preprocessor, RandomForestRegressor(random_state=42))
    rf_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 {color: black;background-color: white;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 pre{padding: 0;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 div.sk-toggleable {background-color: white;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 div.sk-estimator:hover {background-color: #d4ebff;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 div.sk-item {z-index: 1;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 div.sk-parallel-item:only-child::after {width: 0;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-17cee6a0-600a-4d7b-b0eb-096f03d4fb52" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ce34baca-1156-4dac-985b-3b4bea644bb6" type="checkbox" ><label class="sk-toggleable__label" for="ce34baca-1156-4dac-985b-3b4bea644bb6">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columntransformer',
                     ColumnTransformer(transformers=[('simpleimputer',
                                                      SimpleImputer(add_indicator=True),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8d6300c10>),
                                                     ('ordinalencoder',
                                                      OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                     unknown_value=-1),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8e35335e0>)])),
                    ('randomforestregressor',
                     RandomForestRegressor(random_state=42))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="36740fb7-317a-4007-87f9-0b5501975ba6" type="checkbox" ><label class="sk-toggleable__label" for="36740fb7-317a-4007-87f9-0b5501975ba6">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8d6300c10>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8e35335e0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d3c269f6-6c64-477d-bfac-628031dd922a" type="checkbox" ><label class="sk-toggleable__label" for="d3c269f6-6c64-477d-bfac-628031dd922a">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fe8d6300c10></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="829ad261-d765-48eb-a984-9007ee961366" type="checkbox" ><label class="sk-toggleable__label" for="829ad261-d765-48eb-a984-9007ee961366">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="33c7614e-10ee-4954-8f68-0bde2891f941" type="checkbox" ><label class="sk-toggleable__label" for="33c7614e-10ee-4954-8f68-0bde2891f941">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fe8e35335e0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2962fe28-719a-40e9-87a5-b938e8b4b4fa" type="checkbox" ><label class="sk-toggleable__label" for="2962fe28-719a-40e9-87a5-b938e8b4b4fa">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e5f340b8-8eae-4126-8053-41845fda6d77" type="checkbox" ><label class="sk-toggleable__label" for="e5f340b8-8eae-4126-8053-41845fda6d77">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 184-191

.. code-block:: default

    from sklearn.ensemble import HistGradientBoostingRegressor

    gbdt_pipeline = make_pipeline(
        tree_preprocessor, HistGradientBoostingRegressor(random_state=0)
    )
    gbdt_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 {color: black;background-color: white;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 pre{padding: 0;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 div.sk-toggleable {background-color: white;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 div.sk-item {z-index: 1;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 div.sk-parallel-item:only-child::after {width: 0;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-460a877d-24b6-4fa4-bccc-ae5008e9a5a1" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ba7f4bc5-3aa7-4960-bc50-47a9255e2ec8" type="checkbox" ><label class="sk-toggleable__label" for="ba7f4bc5-3aa7-4960-bc50-47a9255e2ec8">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columntransformer',
                     ColumnTransformer(transformers=[('simpleimputer',
                                                      SimpleImputer(add_indicator=True),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8d6300c10>),
                                                     ('ordinalencoder',
                                                      OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                     unknown_value=-1),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8e35335e0>)])),
                    ('histgradientboostingregressor',
                     HistGradientBoostingRegressor(random_state=0))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d07b852b-8b36-4d50-8fc3-d4df640988e5" type="checkbox" ><label class="sk-toggleable__label" for="d07b852b-8b36-4d50-8fc3-d4df640988e5">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8d6300c10>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8e35335e0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d04a6a32-502d-4748-80cc-96b73493d999" type="checkbox" ><label class="sk-toggleable__label" for="d04a6a32-502d-4748-80cc-96b73493d999">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fe8d6300c10></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="81160d18-40ab-4090-8d6f-480c2b7c6446" type="checkbox" ><label class="sk-toggleable__label" for="81160d18-40ab-4090-8d6f-480c2b7c6446">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ffc120a3-9ae4-4cb8-883c-46d99d2fad24" type="checkbox" ><label class="sk-toggleable__label" for="ffc120a3-9ae4-4cb8-883c-46d99d2fad24">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fe8e35335e0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6568bf82-09f4-4e61-bb4c-55fc9cbe076e" type="checkbox" ><label class="sk-toggleable__label" for="6568bf82-09f4-4e61-bb4c-55fc9cbe076e">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="faf4bdcb-205b-4684-b390-40e6f214a152" type="checkbox" ><label class="sk-toggleable__label" for="faf4bdcb-205b-4684-b390-40e6f214a152">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 192-204

.. code-block:: default

    from sklearn.ensemble import StackingRegressor
    from sklearn.linear_model import RidgeCV

    estimators = [
        ("Random Forest", rf_pipeline),
        ("Lasso", lasso_pipeline),
        ("Gradient Boosting", gbdt_pipeline),
    ]

    stacking_regressor = StackingRegressor(estimators=estimators, final_estimator=RidgeCV())
    stacking_regressor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb {color: black;background-color: white;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb pre{padding: 0;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb div.sk-toggleable {background-color: white;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb div.sk-estimator:hover {background-color: #d4ebff;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb div.sk-item {z-index: 1;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb div.sk-parallel-item:only-child::after {width: 0;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb div.sk-container {display: inline-block;position: relative;}</style><div id="sk-1c454b43-59b7-4f0b-bc94-7a76fc2103bb" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="20026cb2-0e83-47bc-8633-06c72a3f0463" type="checkbox" ><label class="sk-toggleable__label" for="20026cb2-0e83-47bc-8633-06c72a3f0463">StackingRegressor</label><div class="sk-toggleable__content"><pre>StackingRegressor(estimators=[('Random Forest',
                                   Pipeline(steps=[('columntransformer',
                                                    ColumnTransformer(transformers=[('simpleimputer',
                                                                                     SimpleImputer(add_indicator=True),
                                                                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8d6300c10>),
                                                                                    ('ordinalencoder',
                                                                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                                                    unknown_value=-1),
                                                                                     <sklearn.compose...
                                                                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8d6300c10>),
                                                                                    ('ordinalencoder',
                                                                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                                                    unknown_value=-1),
                                                                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8e35335e0>)])),
                                                   ('histgradientboostingregressor',
                                                    HistGradientBoostingRegressor(random_state=0))]))],
                      final_estimator=RidgeCV(alphas=array([ 0.1,  1. , 10. ])))</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Random Forest</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6c61d1b9-cc91-4ac5-b01e-7c4a7e7db34e" type="checkbox" ><label class="sk-toggleable__label" for="6c61d1b9-cc91-4ac5-b01e-7c4a7e7db34e">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8d6300c10>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8e35335e0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9a08bcce-076d-427c-8041-9268c11aa367" type="checkbox" ><label class="sk-toggleable__label" for="9a08bcce-076d-427c-8041-9268c11aa367">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fe8d6300c10></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4c87388a-e890-434d-8f99-45eedeb710c4" type="checkbox" ><label class="sk-toggleable__label" for="4c87388a-e890-434d-8f99-45eedeb710c4">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3b46e7fe-d6d8-4a69-9313-3cfef89cb474" type="checkbox" ><label class="sk-toggleable__label" for="3b46e7fe-d6d8-4a69-9313-3cfef89cb474">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fe8e35335e0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f8631c1d-b833-4ab0-84fa-4d2df085f361" type="checkbox" ><label class="sk-toggleable__label" for="f8631c1d-b833-4ab0-84fa-4d2df085f361">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a642caaa-5dc4-4d46-8619-d8b7b89eaff4" type="checkbox" ><label class="sk-toggleable__label" for="a642caaa-5dc4-4d46-8619-d8b7b89eaff4">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Lasso</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="058dea70-40e7-49d2-b112-46d212dcd873" type="checkbox" ><label class="sk-toggleable__label" for="058dea70-40e7-49d2-b112-46d212dcd873">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('pipeline',
                                     Pipeline(steps=[('standardscaler',
                                                      StandardScaler()),
                                                     ('simpleimputer',
                                                      SimpleImputer(add_indicator=True))]),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8d6300c10>),
                                    ('onehotencoder',
                                     OneHotEncoder(handle_unknown='ignore'),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8e35335e0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="97547460-b9cb-46eb-911f-648e1ab2eb11" type="checkbox" ><label class="sk-toggleable__label" for="97547460-b9cb-46eb-911f-648e1ab2eb11">pipeline</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fe8d6300c10></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7cb3530a-a49c-4f67-9773-74d19c2afef3" type="checkbox" ><label class="sk-toggleable__label" for="7cb3530a-a49c-4f67-9773-74d19c2afef3">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0333054b-7bc6-4329-85c8-c0a82a35ed06" type="checkbox" ><label class="sk-toggleable__label" for="0333054b-7bc6-4329-85c8-c0a82a35ed06">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="acb5aa84-f7ac-4b10-bb80-1b6306722d2e" type="checkbox" ><label class="sk-toggleable__label" for="acb5aa84-f7ac-4b10-bb80-1b6306722d2e">onehotencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fe8e35335e0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d5cf85ce-c750-4876-8c6f-5efef4458dcd" type="checkbox" ><label class="sk-toggleable__label" for="d5cf85ce-c750-4876-8c6f-5efef4458dcd">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3724e7cc-dfec-4a4b-903a-02d5b02b3bcb" type="checkbox" ><label class="sk-toggleable__label" for="3724e7cc-dfec-4a4b-903a-02d5b02b3bcb">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Gradient Boosting</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="07bc6dc8-5b77-42a5-a04a-258bf4e00cd5" type="checkbox" ><label class="sk-toggleable__label" for="07bc6dc8-5b77-42a5-a04a-258bf4e00cd5">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8d6300c10>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fe8e35335e0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3c2b3cb7-c6f1-4519-839e-d908e0b643c3" type="checkbox" ><label class="sk-toggleable__label" for="3c2b3cb7-c6f1-4519-839e-d908e0b643c3">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fe8d6300c10></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e8545bb3-95a1-4c59-b1dc-8d621e1c8bef" type="checkbox" ><label class="sk-toggleable__label" for="e8545bb3-95a1-4c59-b1dc-8d621e1c8bef">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2e675c92-6c59-42eb-bc79-e200ca3131d9" type="checkbox" ><label class="sk-toggleable__label" for="2e675c92-6c59-42eb-bc79-e200ca3131d9">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fe8e35335e0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4754b6bb-211e-45a7-9e44-673292a44a1a" type="checkbox" ><label class="sk-toggleable__label" for="4754b6bb-211e-45a7-9e44-673292a44a1a">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f430480f-6741-4f94-a82f-c008d30f1c4a" type="checkbox" ><label class="sk-toggleable__label" for="f430480f-6741-4f94-a82f-c008d30f1c4a">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>final_estimator</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6a4cae0c-fddc-4622-ab43-343335146cce" type="checkbox" ><label class="sk-toggleable__label" for="6a4cae0c-fddc-4622-ab43-343335146cce">RidgeCV</label><div class="sk-toggleable__content"><pre>RidgeCV(alphas=array([ 0.1,  1. , 10. ]))</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 205-214

Measure and plot the results
#############################################################################

 Now we can use Ames Housing dataset to make the predictions. We check the
 performance of each individual predictor as well as of the stack of the
 regressors.

 The function ``plot_regression_results`` is used to plot the predicted and
 true targets.

.. GENERATED FROM PYTHON SOURCE LINES 214-279

.. code-block:: default



    import time
    import matplotlib.pyplot as plt
    from sklearn.model_selection import cross_validate, cross_val_predict


    def plot_regression_results(ax, y_true, y_pred, title, scores, elapsed_time):
        """Scatter plot of the predicted vs true targets."""
        ax.plot(
            [y_true.min(), y_true.max()], [y_true.min(), y_true.max()], "--r", linewidth=2
        )
        ax.scatter(y_true, y_pred, alpha=0.2)

        ax.spines["top"].set_visible(False)
        ax.spines["right"].set_visible(False)
        ax.get_xaxis().tick_bottom()
        ax.get_yaxis().tick_left()
        ax.spines["left"].set_position(("outward", 10))
        ax.spines["bottom"].set_position(("outward", 10))
        ax.set_xlim([y_true.min(), y_true.max()])
        ax.set_ylim([y_true.min(), y_true.max()])
        ax.set_xlabel("Measured")
        ax.set_ylabel("Predicted")
        extra = plt.Rectangle(
            (0, 0), 0, 0, fc="w", fill=False, edgecolor="none", linewidth=0
        )
        ax.legend([extra], [scores], loc="upper left")
        title = title + "\n Evaluation in {:.2f} seconds".format(elapsed_time)
        ax.set_title(title)


    fig, axs = plt.subplots(2, 2, figsize=(9, 7))
    axs = np.ravel(axs)

    for ax, (name, est) in zip(
        axs, estimators + [("Stacking Regressor", stacking_regressor)]
    ):
        start_time = time.time()
        score = cross_validate(
            est, X, y, scoring=["r2", "neg_mean_absolute_error"], n_jobs=-1, verbose=0
        )
        elapsed_time = time.time() - start_time

        y_pred = cross_val_predict(est, X, y, n_jobs=-1, verbose=0)

        plot_regression_results(
            ax,
            y,
            y_pred,
            name,
            (r"$R^2={:.2f} \pm {:.2f}$" + "\n" + r"$MAE={:.2f} \pm {:.2f}$").format(
                np.mean(score["test_r2"]),
                np.std(score["test_r2"]),
                -np.mean(score["test_neg_mean_absolute_error"]),
                np.std(score["test_neg_mean_absolute_error"]),
            ),
            elapsed_time,
        )

    plt.suptitle("Single predictors versus stacked predictors")
    plt.tight_layout()
    plt.subplots_adjust(top=0.9)
    plt.show()




.. image-sg:: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :alt: Single predictors versus stacked predictors, Random Forest  Evaluation in 2.05 seconds, Lasso  Evaluation in 0.41 seconds, Gradient Boosting  Evaluation in 0.52 seconds, Stacking Regressor  Evaluation in 5.71 seconds
   :srcset: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 280-283

The stacked regressor will combine the strengths of the different regressors.
However, we also see that training the stacked regressor is much more
computationally expensive.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  18.482 seconds)


.. _sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/ensemble/plot_stack_predictors.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_stack_predictors.py <plot_stack_predictors.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_stack_predictors.ipynb <plot_stack_predictors.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
