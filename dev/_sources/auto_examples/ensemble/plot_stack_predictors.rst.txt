
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/ensemble/plot_stack_predictors.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_ensemble_plot_stack_predictors.py:


=================================
Combine predictors using stacking
=================================

.. currentmodule:: sklearn

Stacking refers to a method to blend estimators. In this strategy, some
estimators are individually fitted on some training data while a final
estimator is trained using the stacked predictions of these base estimators.

In this example, we illustrate the use case in which different regressors are
stacked together and a final linear penalized regressor is used to output the
prediction. We compare the performance of each individual regressor with the
stacking strategy. Stacking slightly improves the overall performance.

.. GENERATED FROM PYTHON SOURCE LINES 18-27

.. code-block:: default


    # Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>
    #          Maria Telenczuk    <https://github.com/maikia>
    # License: BSD 3 clause

    from sklearn import set_config

    set_config(display="diagram")








.. GENERATED FROM PYTHON SOURCE LINES 28-44

Download the dataset
#############################################################################

 We will use `Ames Housing`_ dataset which was first compiled by Dean De Cock
 and became better known after it was used in Kaggle challenge. It is a set
 of 1460 residential homes in Ames, Iowa, each described by 80 features. We
 will use it to predict the final logarithmic price of the houses. In this
 example we will use only 20 most interesting features chosen using
 GradientBoostingRegressor() and limit number of entries (here we won't go
 into the details on how to select the most interesting features).

 The Ames housing dataset is not shipped with scikit-learn and therefore we
 will fetch it from `OpenML`_.

 .. _`Ames Housing`: http://jse.amstat.org/v19n3/decock.pdf
 .. _`OpenML`: https://www.openml.org/d/42165

.. GENERATED FROM PYTHON SOURCE LINES 44-90

.. code-block:: default


    import numpy as np

    from sklearn.datasets import fetch_openml
    from sklearn.utils import shuffle


    def load_ames_housing():
        df = fetch_openml(name="house_prices", as_frame=True)
        X = df.data
        y = df.target

        features = [
            "YrSold",
            "HeatingQC",
            "Street",
            "YearRemodAdd",
            "Heating",
            "MasVnrType",
            "BsmtUnfSF",
            "Foundation",
            "MasVnrArea",
            "MSSubClass",
            "ExterQual",
            "Condition2",
            "GarageCars",
            "GarageType",
            "OverallQual",
            "TotalBsmtSF",
            "BsmtFinSF1",
            "HouseStyle",
            "MiscFeature",
            "MoSold",
        ]

        X = X[features]
        X, y = shuffle(X, y, random_state=0)

        X = X[:600]
        y = y[:600]
        return X, np.log(y)


    X, y = load_ames_housing()









.. GENERATED FROM PYTHON SOURCE LINES 91-97

Make pipeline to preprocess the data
#############################################################################

 Before we can use Ames dataset we still need to do some preprocessing.
 First, we will select the categorical and numerical columns of the dataset to
 construct the first step of the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 97-104

.. code-block:: default


    from sklearn.compose import make_column_selector

    cat_selector = make_column_selector(dtype_include=object)
    num_selector = make_column_selector(dtype_include=np.number)
    cat_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['HeatingQC', 'Street', 'Heating', 'MasVnrType', 'Foundation', 'ExterQual', 'Condition2', 'GarageType', 'HouseStyle', 'MiscFeature']



.. GENERATED FROM PYTHON SOURCE LINES 105-107

.. code-block:: default

    num_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['YrSold', 'YearRemodAdd', 'BsmtUnfSF', 'MasVnrArea', 'MSSubClass', 'GarageCars', 'OverallQual', 'TotalBsmtSF', 'BsmtFinSF1', 'MoSold']



.. GENERATED FROM PYTHON SOURCE LINES 108-117

Then, we will need to design preprocessing pipelines which depends on the
ending regressor. If the ending regressor is a linear model, one needs to
one-hot encode the categories. If the ending regressor is a tree-based model
an ordinal encoder will be sufficient. Besides, numerical values need to be
standardized for a linear model while the raw numerical data can be treated
as is by a tree-based model. However, both models need an imputer to
handle missing values.

We will first design the pipeline required for the tree-based models.

.. GENERATED FROM PYTHON SOURCE LINES 117-133

.. code-block:: default


    from sklearn.compose import make_column_transformer
    from sklearn.impute import SimpleImputer
    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import OrdinalEncoder

    cat_tree_processor = OrdinalEncoder(
        handle_unknown="use_encoded_value", unknown_value=-1
    )
    num_tree_processor = SimpleImputer(strategy="mean", add_indicator=True)

    tree_preprocessor = make_column_transformer(
        (num_tree_processor, num_selector), (cat_tree_processor, cat_selector)
    )
    tree_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 {color: black;background-color: white;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 pre{padding: 0;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 div.sk-toggleable {background-color: white;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 div.sk-estimator:hover {background-color: #d4ebff;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 div.sk-item {z-index: 1;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 div.sk-parallel-item:only-child::after {width: 0;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483 div.sk-text-repr-fallback {display: none;}</style><div id="sk-88ba6aef-9a22-4eaa-b550-ac7f619c0483" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;)])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ae5658cd-e74f-4737-a601-6029d339eef0" type="checkbox" ><label for="ae5658cd-e74f-4737-a601-6029d339eef0" class="sk-toggleable__label sk-toggleable__label-arrow">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1950ca47-88fa-48f6-835b-05958c1f9a4e" type="checkbox" ><label for="1950ca47-88fa-48f6-835b-05958c1f9a4e" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="fca8d6b8-1186-453a-a3c3-d4b7940822bd" type="checkbox" ><label for="fca8d6b8-1186-453a-a3c3-d4b7940822bd" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="110851d5-6c0c-4c5e-a633-2b81076a3e38" type="checkbox" ><label for="110851d5-6c0c-4c5e-a633-2b81076a3e38" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ea1b94a2-2713-473c-8f92-f217c3d3c3b4" type="checkbox" ><label for="ea1b94a2-2713-473c-8f92-f217c3d3c3b4" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 134-136

Then, we will now define the preprocessor used when the ending regressor
is a linear model.

.. GENERATED FROM PYTHON SOURCE LINES 136-150

.. code-block:: default


    from sklearn.preprocessing import OneHotEncoder
    from sklearn.preprocessing import StandardScaler

    cat_linear_processor = OneHotEncoder(handle_unknown="ignore")
    num_linear_processor = make_pipeline(
        StandardScaler(), SimpleImputer(strategy="mean", add_indicator=True)
    )

    linear_preprocessor = make_column_transformer(
        (num_linear_processor, num_selector), (cat_linear_processor, cat_selector)
    )
    linear_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 {color: black;background-color: white;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 pre{padding: 0;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 div.sk-toggleable {background-color: white;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 div.sk-estimator:hover {background-color: #d4ebff;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 div.sk-item {z-index: 1;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 div.sk-parallel-item:only-child::after {width: 0;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678 div.sk-text-repr-fallback {display: none;}</style><div id="sk-9e22235f-f3c2-4bfe-b7ee-ed85723db678" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;)])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c8c434b6-10a7-46e9-881c-938aec34b340" type="checkbox" ><label for="c8c434b6-10a7-46e9-881c-938aec34b340" class="sk-toggleable__label sk-toggleable__label-arrow">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e76cc802-6f9d-4184-9720-e0fe74907902" type="checkbox" ><label for="e76cc802-6f9d-4184-9720-e0fe74907902" class="sk-toggleable__label sk-toggleable__label-arrow">pipeline</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b7ca9df8-67ab-4dcb-8d94-3f14e12877c5" type="checkbox" ><label for="b7ca9df8-67ab-4dcb-8d94-3f14e12877c5" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1b2d53d4-6e7e-4bbd-badb-1f23c2cbe8f4" type="checkbox" ><label for="1b2d53d4-6e7e-4bbd-badb-1f23c2cbe8f4" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7b959ee9-d3a9-4a4c-aa9b-e0dbea3778da" type="checkbox" ><label for="7b959ee9-d3a9-4a4c-aa9b-e0dbea3778da" class="sk-toggleable__label sk-toggleable__label-arrow">onehotencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="18dc270d-5d24-4c2a-8c4f-c080ab0ce549" type="checkbox" ><label for="18dc270d-5d24-4c2a-8c4f-c080ab0ce549" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 151-169

Stack of predictors on a single data set
#############################################################################

 It is sometimes tedious to find the model which will best perform on a given
 dataset. Stacking provide an alternative by combining the outputs of several
 learners, without the need to choose a model specifically. The performance of
 stacking is usually close to the best model and sometimes it can outperform
 the prediction performance of each individual model.

 Here, we combine 3 learners (linear and non-linear) and use a ridge regressor
 to combine their outputs together.

 .. note::
    Although we will make new pipelines with the processors which we wrote in
    the previous section for the 3 learners, the final estimator
    :class:`~sklearn.linear_model.RidgeCV()` does not need preprocessing of
    the data as it will be fed with the already preprocessed output from the 3
    learners.

.. GENERATED FROM PYTHON SOURCE LINES 169-175

.. code-block:: default


    from sklearn.linear_model import LassoCV

    lasso_pipeline = make_pipeline(linear_preprocessor, LassoCV())
    lasso_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 {color: black;background-color: white;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 pre{padding: 0;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 div.sk-toggleable {background-color: white;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 div.sk-item {z-index: 1;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 div.sk-parallel-item:only-child::after {width: 0;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1 div.sk-text-repr-fallback {display: none;}</style><div id="sk-d434b0bc-39d9-4c6c-9aeb-5a81f73652e1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                                      Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                                       StandardScaler()),
                                                                      (&#x27;simpleimputer&#x27;,
                                                                       SimpleImputer(add_indicator=True))]),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;),
                                                     (&#x27;onehotencoder&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;)])),
                    (&#x27;lassocv&#x27;, LassoCV())])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="77c9d5aa-6fab-4453-ad6e-312f0fc69d2c" type="checkbox" ><label for="77c9d5aa-6fab-4453-ad6e-312f0fc69d2c" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                                      Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                                       StandardScaler()),
                                                                      (&#x27;simpleimputer&#x27;,
                                                                       SimpleImputer(add_indicator=True))]),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;),
                                                     (&#x27;onehotencoder&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;)])),
                    (&#x27;lassocv&#x27;, LassoCV())])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0ea12522-df17-40a9-a376-a7d9f77827bb" type="checkbox" ><label for="0ea12522-df17-40a9-a376-a7d9f77827bb" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="cc7408f9-b6ea-4b76-bcb5-178a73228343" type="checkbox" ><label for="cc7408f9-b6ea-4b76-bcb5-178a73228343" class="sk-toggleable__label sk-toggleable__label-arrow">pipeline</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="963a86ec-a49c-4229-9a1c-459e02dea081" type="checkbox" ><label for="963a86ec-a49c-4229-9a1c-459e02dea081" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2c95ce50-435f-4053-a8e9-2c937daa7378" type="checkbox" ><label for="2c95ce50-435f-4053-a8e9-2c937daa7378" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="fab099c4-77af-48b3-905a-09f45776488c" type="checkbox" ><label for="fab099c4-77af-48b3-905a-09f45776488c" class="sk-toggleable__label sk-toggleable__label-arrow">onehotencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="85a0d42c-4588-4941-940f-14aee4bb5066" type="checkbox" ><label for="85a0d42c-4588-4941-940f-14aee4bb5066" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8ae27029-10a5-4ef5-b514-26687ba9c406" type="checkbox" ><label for="8ae27029-10a5-4ef5-b514-26687ba9c406" class="sk-toggleable__label sk-toggleable__label-arrow">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 176-181

.. code-block:: default

    from sklearn.ensemble import RandomForestRegressor

    rf_pipeline = make_pipeline(tree_preprocessor, RandomForestRegressor(random_state=42))
    rf_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-70c89033-4424-449c-8483-0dae18eac809 {color: black;background-color: white;}#sk-70c89033-4424-449c-8483-0dae18eac809 pre{padding: 0;}#sk-70c89033-4424-449c-8483-0dae18eac809 div.sk-toggleable {background-color: white;}#sk-70c89033-4424-449c-8483-0dae18eac809 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-70c89033-4424-449c-8483-0dae18eac809 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-70c89033-4424-449c-8483-0dae18eac809 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-70c89033-4424-449c-8483-0dae18eac809 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-70c89033-4424-449c-8483-0dae18eac809 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-70c89033-4424-449c-8483-0dae18eac809 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-70c89033-4424-449c-8483-0dae18eac809 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-70c89033-4424-449c-8483-0dae18eac809 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-70c89033-4424-449c-8483-0dae18eac809 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-70c89033-4424-449c-8483-0dae18eac809 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-70c89033-4424-449c-8483-0dae18eac809 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-70c89033-4424-449c-8483-0dae18eac809 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-70c89033-4424-449c-8483-0dae18eac809 div.sk-estimator:hover {background-color: #d4ebff;}#sk-70c89033-4424-449c-8483-0dae18eac809 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-70c89033-4424-449c-8483-0dae18eac809 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-70c89033-4424-449c-8483-0dae18eac809 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-70c89033-4424-449c-8483-0dae18eac809 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-70c89033-4424-449c-8483-0dae18eac809 div.sk-item {z-index: 1;}#sk-70c89033-4424-449c-8483-0dae18eac809 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-70c89033-4424-449c-8483-0dae18eac809 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-70c89033-4424-449c-8483-0dae18eac809 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-70c89033-4424-449c-8483-0dae18eac809 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-70c89033-4424-449c-8483-0dae18eac809 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-70c89033-4424-449c-8483-0dae18eac809 div.sk-parallel-item:only-child::after {width: 0;}#sk-70c89033-4424-449c-8483-0dae18eac809 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-70c89033-4424-449c-8483-0dae18eac809 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-70c89033-4424-449c-8483-0dae18eac809 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-70c89033-4424-449c-8483-0dae18eac809 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-70c89033-4424-449c-8483-0dae18eac809 div.sk-text-repr-fallback {display: none;}</style><div id="sk-70c89033-4424-449c-8483-0dae18eac809" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;)])),
                    (&#x27;randomforestregressor&#x27;,
                     RandomForestRegressor(random_state=42))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3758b0a4-a711-4371-8ef7-4da5a200efdc" type="checkbox" ><label for="3758b0a4-a711-4371-8ef7-4da5a200efdc" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;)])),
                    (&#x27;randomforestregressor&#x27;,
                     RandomForestRegressor(random_state=42))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d50302f9-6993-4fe5-bf83-b73ac4c300bc" type="checkbox" ><label for="d50302f9-6993-4fe5-bf83-b73ac4c300bc" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="60f0b3b3-a791-4242-92b3-2e8581d2b472" type="checkbox" ><label for="60f0b3b3-a791-4242-92b3-2e8581d2b472" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7e8d615f-a65b-44f1-8765-01db3a4eca6a" type="checkbox" ><label for="7e8d615f-a65b-44f1-8765-01db3a4eca6a" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c5544b82-e10f-49f2-b260-841af35c810d" type="checkbox" ><label for="c5544b82-e10f-49f2-b260-841af35c810d" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8a6c61fd-a2b2-476f-aa71-e9ba8bc83760" type="checkbox" ><label for="8a6c61fd-a2b2-476f-aa71-e9ba8bc83760" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f0e7f3c4-2acc-4413-aab9-b426cbb7669a" type="checkbox" ><label for="f0e7f3c4-2acc-4413-aab9-b426cbb7669a" class="sk-toggleable__label sk-toggleable__label-arrow">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 182-189

.. code-block:: default

    from sklearn.ensemble import HistGradientBoostingRegressor

    gbdt_pipeline = make_pipeline(
        tree_preprocessor, HistGradientBoostingRegressor(random_state=0)
    )
    gbdt_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 {color: black;background-color: white;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 pre{padding: 0;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 div.sk-toggleable {background-color: white;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 div.sk-estimator:hover {background-color: #d4ebff;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 div.sk-item {z-index: 1;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 div.sk-parallel-item:only-child::after {width: 0;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-68b812d4-92dc-4669-acf6-c45ae4f76554 div.sk-text-repr-fallback {display: none;}</style><div id="sk-68b812d4-92dc-4669-acf6-c45ae4f76554" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;)])),
                    (&#x27;histgradientboostingregressor&#x27;,
                     HistGradientBoostingRegressor(random_state=0))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="06bd1fc0-425c-4ae5-bfbf-b8dc7a898704" type="checkbox" ><label for="06bd1fc0-425c-4ae5-bfbf-b8dc7a898704" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;)])),
                    (&#x27;histgradientboostingregressor&#x27;,
                     HistGradientBoostingRegressor(random_state=0))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="88f9a9b2-eb24-4775-9b60-2082219513a2" type="checkbox" ><label for="88f9a9b2-eb24-4775-9b60-2082219513a2" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="63551405-bf48-4bf3-8582-7da10b180549" type="checkbox" ><label for="63551405-bf48-4bf3-8582-7da10b180549" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2007ad50-fa69-4903-9bac-f4989a4f1adf" type="checkbox" ><label for="2007ad50-fa69-4903-9bac-f4989a4f1adf" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2cbde395-671d-4777-ad92-6ee8b659e429" type="checkbox" ><label for="2cbde395-671d-4777-ad92-6ee8b659e429" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ef5915c1-543d-488f-bb01-2515352fe336" type="checkbox" ><label for="ef5915c1-543d-488f-bb01-2515352fe336" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d9c13822-0390-4f32-84d7-4f93acb00763" type="checkbox" ><label for="d9c13822-0390-4f32-84d7-4f93acb00763" class="sk-toggleable__label sk-toggleable__label-arrow">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 190-202

.. code-block:: default

    from sklearn.ensemble import StackingRegressor
    from sklearn.linear_model import RidgeCV

    estimators = [
        ("Random Forest", rf_pipeline),
        ("Lasso", lasso_pipeline),
        ("Gradient Boosting", gbdt_pipeline),
    ]

    stacking_regressor = StackingRegressor(estimators=estimators, final_estimator=RidgeCV())
    stacking_regressor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a {color: black;background-color: white;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a pre{padding: 0;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a div.sk-toggleable {background-color: white;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a div.sk-estimator:hover {background-color: #d4ebff;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a div.sk-item {z-index: 1;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a div.sk-parallel-item:only-child::after {width: 0;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a div.sk-text-repr-fallback {display: none;}</style><div id="sk-49e4eeaf-9a17-49ed-b880-c6fff8b0085a" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>StackingRegressor(estimators=[(&#x27;Random Forest&#x27;,
                                   Pipeline(steps=[(&#x27;columntransformer&#x27;,
                                                    ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                                                     SimpleImputer(add_indicator=True),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose...
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;)])),
                                                   (&#x27;histgradientboostingregressor&#x27;,
                                                    HistGradientBoostingRegressor(random_state=0))]))],
                      final_estimator=RidgeCV())</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="11f672ec-9f9e-4501-94b3-c8bce1de7f35" type="checkbox" ><label for="11f672ec-9f9e-4501-94b3-c8bce1de7f35" class="sk-toggleable__label sk-toggleable__label-arrow">StackingRegressor</label><div class="sk-toggleable__content"><pre>StackingRegressor(estimators=[(&#x27;Random Forest&#x27;,
                                   Pipeline(steps=[(&#x27;columntransformer&#x27;,
                                                    ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                                                     SimpleImputer(add_indicator=True),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose...
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;)])),
                                                   (&#x27;histgradientboostingregressor&#x27;,
                                                    HistGradientBoostingRegressor(random_state=0))]))],
                      final_estimator=RidgeCV())</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Random Forest</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f38379b6-0541-4c96-bb71-74986de79c58" type="checkbox" ><label for="f38379b6-0541-4c96-bb71-74986de79c58" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="931c1cd0-2648-4994-8dd7-d057601f3f6d" type="checkbox" ><label for="931c1cd0-2648-4994-8dd7-d057601f3f6d" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3096d898-3caf-4538-aa4f-d0f5c2304318" type="checkbox" ><label for="3096d898-3caf-4538-aa4f-d0f5c2304318" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c8c64fd2-9a14-4bc1-a320-58e924b2de52" type="checkbox" ><label for="c8c64fd2-9a14-4bc1-a320-58e924b2de52" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="718e8fe5-9070-4c77-abc8-fec84eb0b09d" type="checkbox" ><label for="718e8fe5-9070-4c77-abc8-fec84eb0b09d" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d35ee226-d5dd-480a-9881-572c8577daeb" type="checkbox" ><label for="d35ee226-d5dd-480a-9881-572c8577daeb" class="sk-toggleable__label sk-toggleable__label-arrow">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Lasso</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ed448419-d86e-47ad-b322-648a687fe80c" type="checkbox" ><label for="ed448419-d86e-47ad-b322-648a687fe80c" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="03b38fe6-4a5c-463f-9fb2-b8ada4389739" type="checkbox" ><label for="03b38fe6-4a5c-463f-9fb2-b8ada4389739" class="sk-toggleable__label sk-toggleable__label-arrow">pipeline</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1bb40a42-9bd3-495a-8357-590fcdecd632" type="checkbox" ><label for="1bb40a42-9bd3-495a-8357-590fcdecd632" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d5bfc80b-7193-44cd-bb16-8fd831f00160" type="checkbox" ><label for="d5bfc80b-7193-44cd-bb16-8fd831f00160" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5ad65edd-e00f-4e70-b8ed-79b32280e7d0" type="checkbox" ><label for="5ad65edd-e00f-4e70-b8ed-79b32280e7d0" class="sk-toggleable__label sk-toggleable__label-arrow">onehotencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="fb9a7df7-824d-462d-ae14-6ffc8acac1f1" type="checkbox" ><label for="fb9a7df7-824d-462d-ae14-6ffc8acac1f1" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="472411fe-479b-480e-b381-94c2780fe481" type="checkbox" ><label for="472411fe-479b-480e-b381-94c2780fe481" class="sk-toggleable__label sk-toggleable__label-arrow">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Gradient Boosting</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6eba768e-db3e-406b-b662-dbc71e7bf15e" type="checkbox" ><label for="6eba768e-db3e-406b-b662-dbc71e7bf15e" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c9464bd7-b241-4b4a-a312-c1e5dae2e5c3" type="checkbox" ><label for="c9464bd7-b241-4b4a-a312-c1e5dae2e5c3" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31f10&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e0a9f89d-a466-44a0-aaad-b851b5df1bf9" type="checkbox" ><label for="e0a9f89d-a466-44a0-aaad-b851b5df1bf9" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="cb2b260f-8b7b-4bdf-8047-f03dbb53cf76" type="checkbox" ><label for="cb2b260f-8b7b-4bdf-8047-f03dbb53cf76" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fab7ea31430&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="27a04938-e95f-4632-ad85-0af95dae3e6b" type="checkbox" ><label for="27a04938-e95f-4632-ad85-0af95dae3e6b" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="087b903c-11f7-4485-af80-c7aa9a79f80a" type="checkbox" ><label for="087b903c-11f7-4485-af80-c7aa9a79f80a" class="sk-toggleable__label sk-toggleable__label-arrow">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>final_estimator</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="20743cd6-b54e-4d18-88d5-2533611ed8eb" type="checkbox" ><label for="20743cd6-b54e-4d18-88d5-2533611ed8eb" class="sk-toggleable__label sk-toggleable__label-arrow">RidgeCV</label><div class="sk-toggleable__content"><pre>RidgeCV()</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 203-212

Measure and plot the results
#############################################################################

 Now we can use Ames Housing dataset to make the predictions. We check the
 performance of each individual predictor as well as of the stack of the
 regressors.

 The function ``plot_regression_results`` is used to plot the predicted and
 true targets.

.. GENERATED FROM PYTHON SOURCE LINES 212-277

.. code-block:: default



    import time
    import matplotlib.pyplot as plt
    from sklearn.model_selection import cross_validate, cross_val_predict


    def plot_regression_results(ax, y_true, y_pred, title, scores, elapsed_time):
        """Scatter plot of the predicted vs true targets."""
        ax.plot(
            [y_true.min(), y_true.max()], [y_true.min(), y_true.max()], "--r", linewidth=2
        )
        ax.scatter(y_true, y_pred, alpha=0.2)

        ax.spines["top"].set_visible(False)
        ax.spines["right"].set_visible(False)
        ax.get_xaxis().tick_bottom()
        ax.get_yaxis().tick_left()
        ax.spines["left"].set_position(("outward", 10))
        ax.spines["bottom"].set_position(("outward", 10))
        ax.set_xlim([y_true.min(), y_true.max()])
        ax.set_ylim([y_true.min(), y_true.max()])
        ax.set_xlabel("Measured")
        ax.set_ylabel("Predicted")
        extra = plt.Rectangle(
            (0, 0), 0, 0, fc="w", fill=False, edgecolor="none", linewidth=0
        )
        ax.legend([extra], [scores], loc="upper left")
        title = title + "\n Evaluation in {:.2f} seconds".format(elapsed_time)
        ax.set_title(title)


    fig, axs = plt.subplots(2, 2, figsize=(9, 7))
    axs = np.ravel(axs)

    for ax, (name, est) in zip(
        axs, estimators + [("Stacking Regressor", stacking_regressor)]
    ):
        start_time = time.time()
        score = cross_validate(
            est, X, y, scoring=["r2", "neg_mean_absolute_error"], n_jobs=2, verbose=0
        )
        elapsed_time = time.time() - start_time

        y_pred = cross_val_predict(est, X, y, n_jobs=2, verbose=0)

        plot_regression_results(
            ax,
            y,
            y_pred,
            name,
            (r"$R^2={:.2f} \pm {:.2f}$" + "\n" + r"$MAE={:.2f} \pm {:.2f}$").format(
                np.mean(score["test_r2"]),
                np.std(score["test_r2"]),
                -np.mean(score["test_neg_mean_absolute_error"]),
                np.std(score["test_neg_mean_absolute_error"]),
            ),
            elapsed_time,
        )

    plt.suptitle("Single predictors versus stacked predictors")
    plt.tight_layout()
    plt.subplots_adjust(top=0.9)
    plt.show()




.. image-sg:: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :alt: Single predictors versus stacked predictors, Random Forest  Evaluation in 0.80 seconds, Lasso  Evaluation in 0.22 seconds, Gradient Boosting  Evaluation in 0.54 seconds, Stacking Regressor  Evaluation in 7.76 seconds
   :srcset: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 278-281

The stacked regressor will combine the strengths of the different regressors.
However, we also see that training the stacked regressor is much more
computationally expensive.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  19.429 seconds)


.. _sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/ensemble/plot_stack_predictors.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_stack_predictors.py <plot_stack_predictors.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_stack_predictors.ipynb <plot_stack_predictors.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
