
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/ensemble/plot_stack_predictors.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_ensemble_plot_stack_predictors.py:


=================================
Combine predictors using stacking
=================================

.. currentmodule:: sklearn

Stacking refers to a method to blend estimators. In this strategy, some
estimators are individually fitted on some training data while a final
estimator is trained using the stacked predictions of these base estimators.

In this example, we illustrate the use case in which different regressors are
stacked together and a final linear penalized regressor is used to output the
prediction. We compare the performance of each individual regressor with the
stacking strategy. Stacking slightly improves the overall performance.

.. GENERATED FROM PYTHON SOURCE LINES 18-29

.. code-block:: default


    # Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>
    #          Maria Telenczuk    <https://github.com/maikia>
    # License: BSD 3 clause

    print(__doc__)

    from sklearn import set_config

    set_config(display="diagram")








.. GENERATED FROM PYTHON SOURCE LINES 30-46

Download the dataset
#############################################################################

 We will use `Ames Housing`_ dataset which was first compiled by Dean De Cock
 and became better known after it was used in Kaggle challenge. It is a set
 of 1460 residential homes in Ames, Iowa, each described by 80 features. We
 will use it to predict the final logarithmic price of the houses. In this
 example we will use only 20 most interesting features chosen using
 GradientBoostingRegressor() and limit number of entries (here we won't go
 into the details on how to select the most interesting features).

 The Ames housing dataset is not shipped with scikit-learn and therefore we
 will fetch it from `OpenML`_.

 .. _`Ames Housing`: http://jse.amstat.org/v19n3/decock.pdf
 .. _`OpenML`: https://www.openml.org/d/42165

.. GENERATED FROM PYTHON SOURCE LINES 46-92

.. code-block:: default


    import numpy as np

    from sklearn.datasets import fetch_openml
    from sklearn.utils import shuffle


    def load_ames_housing():
        df = fetch_openml(name="house_prices", as_frame=True)
        X = df.data
        y = df.target

        features = [
            "YrSold",
            "HeatingQC",
            "Street",
            "YearRemodAdd",
            "Heating",
            "MasVnrType",
            "BsmtUnfSF",
            "Foundation",
            "MasVnrArea",
            "MSSubClass",
            "ExterQual",
            "Condition2",
            "GarageCars",
            "GarageType",
            "OverallQual",
            "TotalBsmtSF",
            "BsmtFinSF1",
            "HouseStyle",
            "MiscFeature",
            "MoSold",
        ]

        X = X[features]
        X, y = shuffle(X, y, random_state=0)

        X = X[:600]
        y = y[:600]
        return X, np.log(y)


    X, y = load_ames_housing()









.. GENERATED FROM PYTHON SOURCE LINES 93-99

Make pipeline to preprocess the data
#############################################################################

 Before we can use Ames dataset we still need to do some preprocessing.
 First, we will select the categorical and numerical columns of the dataset to
 construct the first step of the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 99-106

.. code-block:: default


    from sklearn.compose import make_column_selector

    cat_selector = make_column_selector(dtype_include=object)
    num_selector = make_column_selector(dtype_include=np.number)
    cat_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['HeatingQC', 'Street', 'Heating', 'MasVnrType', 'Foundation', 'ExterQual', 'Condition2', 'GarageType', 'HouseStyle', 'MiscFeature']



.. GENERATED FROM PYTHON SOURCE LINES 107-109

.. code-block:: default

    num_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['YrSold', 'YearRemodAdd', 'BsmtUnfSF', 'MasVnrArea', 'MSSubClass', 'GarageCars', 'OverallQual', 'TotalBsmtSF', 'BsmtFinSF1', 'MoSold']



.. GENERATED FROM PYTHON SOURCE LINES 110-119

Then, we will need to design preprocessing pipelines which depends on the
ending regressor. If the ending regressor is a linear model, one needs to
one-hot encode the categories. If the ending regressor is a tree-based model
an ordinal encoder will be sufficient. Besides, numerical values need to be
standardized for a linear model while the raw numerical data can be treated
as is by a tree-based model. However, both models need an imputer to
handle missing values.

We will first design the pipeline required for the tree-based models.

.. GENERATED FROM PYTHON SOURCE LINES 119-135

.. code-block:: default


    from sklearn.compose import make_column_transformer
    from sklearn.impute import SimpleImputer
    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import OrdinalEncoder

    cat_tree_processor = OrdinalEncoder(
        handle_unknown="use_encoded_value", unknown_value=-1
    )
    num_tree_processor = SimpleImputer(strategy="mean", add_indicator=True)

    tree_preprocessor = make_column_transformer(
        (num_tree_processor, num_selector), (cat_tree_processor, cat_selector)
    )
    tree_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-6708f503-f368-4aab-b46b-14a520a874dd {color: black;background-color: white;}#sk-6708f503-f368-4aab-b46b-14a520a874dd pre{padding: 0;}#sk-6708f503-f368-4aab-b46b-14a520a874dd div.sk-toggleable {background-color: white;}#sk-6708f503-f368-4aab-b46b-14a520a874dd label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-6708f503-f368-4aab-b46b-14a520a874dd div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-6708f503-f368-4aab-b46b-14a520a874dd div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-6708f503-f368-4aab-b46b-14a520a874dd input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-6708f503-f368-4aab-b46b-14a520a874dd div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-6708f503-f368-4aab-b46b-14a520a874dd div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-6708f503-f368-4aab-b46b-14a520a874dd input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-6708f503-f368-4aab-b46b-14a520a874dd div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-6708f503-f368-4aab-b46b-14a520a874dd div.sk-estimator:hover {background-color: #d4ebff;}#sk-6708f503-f368-4aab-b46b-14a520a874dd div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-6708f503-f368-4aab-b46b-14a520a874dd div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-6708f503-f368-4aab-b46b-14a520a874dd div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-6708f503-f368-4aab-b46b-14a520a874dd div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-6708f503-f368-4aab-b46b-14a520a874dd div.sk-item {z-index: 1;}#sk-6708f503-f368-4aab-b46b-14a520a874dd div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-6708f503-f368-4aab-b46b-14a520a874dd div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-6708f503-f368-4aab-b46b-14a520a874dd div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-6708f503-f368-4aab-b46b-14a520a874dd div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-6708f503-f368-4aab-b46b-14a520a874dd div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-6708f503-f368-4aab-b46b-14a520a874dd div.sk-parallel-item:only-child::after {width: 0;}#sk-6708f503-f368-4aab-b46b-14a520a874dd div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-6708f503-f368-4aab-b46b-14a520a874dd div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-6708f503-f368-4aab-b46b-14a520a874dd div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-6708f503-f368-4aab-b46b-14a520a874dd div.sk-container {display: inline-block;position: relative;}</style><div id="sk-6708f503-f368-4aab-b46b-14a520a874dd" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="670afc18-5d79-4e34-97df-1d7ed0181373" type="checkbox" ><label class="sk-toggleable__label" for="670afc18-5d79-4e34-97df-1d7ed0181373">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a398e0>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a39970>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6d4b4630-77c0-4cd2-9790-3e524773c296" type="checkbox" ><label class="sk-toggleable__label" for="6d4b4630-77c0-4cd2-9790-3e524773c296">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a398e0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8d7bc40e-4873-4569-99e1-ba8d8f2bd5c2" type="checkbox" ><label class="sk-toggleable__label" for="8d7bc40e-4873-4569-99e1-ba8d8f2bd5c2">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0a511f39-57b4-4f90-9d0b-e8f76df8f069" type="checkbox" ><label class="sk-toggleable__label" for="0a511f39-57b4-4f90-9d0b-e8f76df8f069">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a39970></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c99c0d92-6531-498c-bebb-f3e8c3b4324c" type="checkbox" ><label class="sk-toggleable__label" for="c99c0d92-6531-498c-bebb-f3e8c3b4324c">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 136-138

Then, we will now define the preprocessor used when the ending regressor
is a linear model.

.. GENERATED FROM PYTHON SOURCE LINES 138-152

.. code-block:: default


    from sklearn.preprocessing import OneHotEncoder
    from sklearn.preprocessing import StandardScaler

    cat_linear_processor = OneHotEncoder(handle_unknown="ignore")
    num_linear_processor = make_pipeline(
        StandardScaler(), SimpleImputer(strategy="mean", add_indicator=True)
    )

    linear_preprocessor = make_column_transformer(
        (num_linear_processor, num_selector), (cat_linear_processor, cat_selector)
    )
    linear_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 {color: black;background-color: white;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 pre{padding: 0;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 div.sk-toggleable {background-color: white;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 div.sk-item {z-index: 1;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 div.sk-parallel-item:only-child::after {width: 0;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-2f1f4843-9105-4a67-887d-d9d57e3123f4 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-2f1f4843-9105-4a67-887d-d9d57e3123f4" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b8a1d8bb-722b-4421-b74b-bdf37167cbec" type="checkbox" ><label class="sk-toggleable__label" for="b8a1d8bb-722b-4421-b74b-bdf37167cbec">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('pipeline',
                                     Pipeline(steps=[('standardscaler',
                                                      StandardScaler()),
                                                     ('simpleimputer',
                                                      SimpleImputer(add_indicator=True))]),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a398e0>),
                                    ('onehotencoder',
                                     OneHotEncoder(handle_unknown='ignore'),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a39970>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3a6065a2-dc52-4ba9-9d12-d93cd2d5ac07" type="checkbox" ><label class="sk-toggleable__label" for="3a6065a2-dc52-4ba9-9d12-d93cd2d5ac07">pipeline</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a398e0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d076b905-3db1-4256-8c54-0fa143bd6903" type="checkbox" ><label class="sk-toggleable__label" for="d076b905-3db1-4256-8c54-0fa143bd6903">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7d546593-e9a9-433a-bb65-20c87e82ccdd" type="checkbox" ><label class="sk-toggleable__label" for="7d546593-e9a9-433a-bb65-20c87e82ccdd">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="631d62ba-30f7-42a6-8f2f-ad21f962dbbb" type="checkbox" ><label class="sk-toggleable__label" for="631d62ba-30f7-42a6-8f2f-ad21f962dbbb">onehotencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a39970></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="826ca96b-c7d9-4992-bd01-e401b08f93ab" type="checkbox" ><label class="sk-toggleable__label" for="826ca96b-c7d9-4992-bd01-e401b08f93ab">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 153-171

Stack of predictors on a single data set
#############################################################################

 It is sometimes tedious to find the model which will best perform on a given
 dataset. Stacking provide an alternative by combining the outputs of several
 learners, without the need to choose a model specifically. The performance of
 stacking is usually close to the best model and sometimes it can outperform
 the prediction performance of each individual model.

 Here, we combine 3 learners (linear and non-linear) and use a ridge regressor
 to combine their outputs together.

 .. note::
    Although we will make new pipelines with the processors which we wrote in
    the previous section for the 3 learners, the final estimator
    :class:`~sklearn.linear_model.RidgeCV()` does not need preprocessing of
    the data as it will be fed with the already preprocessed output from the 3
    learners.

.. GENERATED FROM PYTHON SOURCE LINES 171-177

.. code-block:: default


    from sklearn.linear_model import LassoCV

    lasso_pipeline = make_pipeline(linear_preprocessor, LassoCV())
    lasso_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 {color: black;background-color: white;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 pre{padding: 0;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 div.sk-toggleable {background-color: white;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 div.sk-estimator:hover {background-color: #d4ebff;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 div.sk-item {z-index: 1;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 div.sk-parallel-item:only-child::after {width: 0;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-7741b9f5-b517-4da7-8ce9-e9f3ee039954" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="28e1a230-a449-42b0-ae03-f4d216cee6d8" type="checkbox" ><label class="sk-toggleable__label" for="28e1a230-a449-42b0-ae03-f4d216cee6d8">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columntransformer',
                     ColumnTransformer(transformers=[('pipeline',
                                                      Pipeline(steps=[('standardscaler',
                                                                       StandardScaler()),
                                                                      ('simpleimputer',
                                                                       SimpleImputer(add_indicator=True))]),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a398e0>),
                                                     ('onehotencoder',
                                                      OneHotEncoder(handle_unknown='ignore'),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a39970>)])),
                    ('lassocv', LassoCV())])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6fdb6b0a-e811-4152-9407-7ac64714e2f4" type="checkbox" ><label class="sk-toggleable__label" for="6fdb6b0a-e811-4152-9407-7ac64714e2f4">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('pipeline',
                                     Pipeline(steps=[('standardscaler',
                                                      StandardScaler()),
                                                     ('simpleimputer',
                                                      SimpleImputer(add_indicator=True))]),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a398e0>),
                                    ('onehotencoder',
                                     OneHotEncoder(handle_unknown='ignore'),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a39970>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6f86290d-0641-4577-a229-181cea075d6b" type="checkbox" ><label class="sk-toggleable__label" for="6f86290d-0641-4577-a229-181cea075d6b">pipeline</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a398e0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="688a5741-bdef-4f77-8cb0-dec2b1c9efe9" type="checkbox" ><label class="sk-toggleable__label" for="688a5741-bdef-4f77-8cb0-dec2b1c9efe9">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0bbb0af6-56c5-49c0-ac19-ee9833cbc093" type="checkbox" ><label class="sk-toggleable__label" for="0bbb0af6-56c5-49c0-ac19-ee9833cbc093">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="da86f878-de32-43cf-8a35-e932820f8ab1" type="checkbox" ><label class="sk-toggleable__label" for="da86f878-de32-43cf-8a35-e932820f8ab1">onehotencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a39970></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="46e7c23d-6588-4757-8905-46804c4cf6ac" type="checkbox" ><label class="sk-toggleable__label" for="46e7c23d-6588-4757-8905-46804c4cf6ac">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b064550d-1e32-4d23-93f3-9c6df8937507" type="checkbox" ><label class="sk-toggleable__label" for="b064550d-1e32-4d23-93f3-9c6df8937507">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 178-183

.. code-block:: default

    from sklearn.ensemble import RandomForestRegressor

    rf_pipeline = make_pipeline(tree_preprocessor, RandomForestRegressor(random_state=42))
    rf_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-92f77283-0228-4ecb-8117-60bebb4c360c {color: black;background-color: white;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c pre{padding: 0;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c div.sk-toggleable {background-color: white;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c div.sk-estimator:hover {background-color: #d4ebff;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c div.sk-item {z-index: 1;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c div.sk-parallel-item:only-child::after {width: 0;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-92f77283-0228-4ecb-8117-60bebb4c360c div.sk-container {display: inline-block;position: relative;}</style><div id="sk-92f77283-0228-4ecb-8117-60bebb4c360c" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1af6216d-6668-4119-9daf-6ac43ce6eaed" type="checkbox" ><label class="sk-toggleable__label" for="1af6216d-6668-4119-9daf-6ac43ce6eaed">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columntransformer',
                     ColumnTransformer(transformers=[('simpleimputer',
                                                      SimpleImputer(add_indicator=True),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a398e0>),
                                                     ('ordinalencoder',
                                                      OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                     unknown_value=-1),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a39970>)])),
                    ('randomforestregressor',
                     RandomForestRegressor(random_state=42))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d6efd141-b157-40ed-b688-c99f6384aa57" type="checkbox" ><label class="sk-toggleable__label" for="d6efd141-b157-40ed-b688-c99f6384aa57">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a398e0>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a39970>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="eb84cd85-da8a-48e1-b025-66447aa6c450" type="checkbox" ><label class="sk-toggleable__label" for="eb84cd85-da8a-48e1-b025-66447aa6c450">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a398e0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="437ecdba-05d1-48a5-b324-8995e42f3eb0" type="checkbox" ><label class="sk-toggleable__label" for="437ecdba-05d1-48a5-b324-8995e42f3eb0">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="bd3671ac-4797-4704-93c4-7fdc938d7acd" type="checkbox" ><label class="sk-toggleable__label" for="bd3671ac-4797-4704-93c4-7fdc938d7acd">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a39970></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ea47f278-1a9f-4d79-b59f-765fbecb984c" type="checkbox" ><label class="sk-toggleable__label" for="ea47f278-1a9f-4d79-b59f-765fbecb984c">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2dded770-2b01-4b4d-b64d-c60878248794" type="checkbox" ><label class="sk-toggleable__label" for="2dded770-2b01-4b4d-b64d-c60878248794">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 184-191

.. code-block:: default

    from sklearn.ensemble import HistGradientBoostingRegressor

    gbdt_pipeline = make_pipeline(
        tree_preprocessor, HistGradientBoostingRegressor(random_state=0)
    )
    gbdt_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-45934f3e-9632-482b-87ae-1cb6061c68db {color: black;background-color: white;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db pre{padding: 0;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db div.sk-toggleable {background-color: white;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db div.sk-estimator:hover {background-color: #d4ebff;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db div.sk-item {z-index: 1;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db div.sk-parallel-item:only-child::after {width: 0;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-45934f3e-9632-482b-87ae-1cb6061c68db div.sk-container {display: inline-block;position: relative;}</style><div id="sk-45934f3e-9632-482b-87ae-1cb6061c68db" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d9c7edde-3338-472a-a410-2c82caff02fa" type="checkbox" ><label class="sk-toggleable__label" for="d9c7edde-3338-472a-a410-2c82caff02fa">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columntransformer',
                     ColumnTransformer(transformers=[('simpleimputer',
                                                      SimpleImputer(add_indicator=True),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a398e0>),
                                                     ('ordinalencoder',
                                                      OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                     unknown_value=-1),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a39970>)])),
                    ('histgradientboostingregressor',
                     HistGradientBoostingRegressor(random_state=0))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="fdbcf0fb-90bb-4c72-872b-032deed2e8a7" type="checkbox" ><label class="sk-toggleable__label" for="fdbcf0fb-90bb-4c72-872b-032deed2e8a7">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a398e0>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a39970>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="822311f1-78bd-4747-b015-0a169d3a8fd2" type="checkbox" ><label class="sk-toggleable__label" for="822311f1-78bd-4747-b015-0a169d3a8fd2">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a398e0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e100238d-02c1-4b03-9209-fa926731edc7" type="checkbox" ><label class="sk-toggleable__label" for="e100238d-02c1-4b03-9209-fa926731edc7">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8f1c459f-99b1-403c-9527-be3890bceaa0" type="checkbox" ><label class="sk-toggleable__label" for="8f1c459f-99b1-403c-9527-be3890bceaa0">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a39970></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1a379f73-551d-4e68-9f65-c2f7df8c74b0" type="checkbox" ><label class="sk-toggleable__label" for="1a379f73-551d-4e68-9f65-c2f7df8c74b0">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="11b6121f-589c-4376-9532-62db3a8ce6db" type="checkbox" ><label class="sk-toggleable__label" for="11b6121f-589c-4376-9532-62db3a8ce6db">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 192-204

.. code-block:: default

    from sklearn.ensemble import StackingRegressor
    from sklearn.linear_model import RidgeCV

    estimators = [
        ("Random Forest", rf_pipeline),
        ("Lasso", lasso_pipeline),
        ("Gradient Boosting", gbdt_pipeline),
    ]

    stacking_regressor = StackingRegressor(estimators=estimators, final_estimator=RidgeCV())
    stacking_regressor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-118a7e26-f770-485a-831b-032e1f8c123c {color: black;background-color: white;}#sk-118a7e26-f770-485a-831b-032e1f8c123c pre{padding: 0;}#sk-118a7e26-f770-485a-831b-032e1f8c123c div.sk-toggleable {background-color: white;}#sk-118a7e26-f770-485a-831b-032e1f8c123c label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-118a7e26-f770-485a-831b-032e1f8c123c div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-118a7e26-f770-485a-831b-032e1f8c123c div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-118a7e26-f770-485a-831b-032e1f8c123c input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-118a7e26-f770-485a-831b-032e1f8c123c div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-118a7e26-f770-485a-831b-032e1f8c123c div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-118a7e26-f770-485a-831b-032e1f8c123c input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-118a7e26-f770-485a-831b-032e1f8c123c div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-118a7e26-f770-485a-831b-032e1f8c123c div.sk-estimator:hover {background-color: #d4ebff;}#sk-118a7e26-f770-485a-831b-032e1f8c123c div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-118a7e26-f770-485a-831b-032e1f8c123c div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-118a7e26-f770-485a-831b-032e1f8c123c div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-118a7e26-f770-485a-831b-032e1f8c123c div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-118a7e26-f770-485a-831b-032e1f8c123c div.sk-item {z-index: 1;}#sk-118a7e26-f770-485a-831b-032e1f8c123c div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-118a7e26-f770-485a-831b-032e1f8c123c div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-118a7e26-f770-485a-831b-032e1f8c123c div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-118a7e26-f770-485a-831b-032e1f8c123c div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-118a7e26-f770-485a-831b-032e1f8c123c div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-118a7e26-f770-485a-831b-032e1f8c123c div.sk-parallel-item:only-child::after {width: 0;}#sk-118a7e26-f770-485a-831b-032e1f8c123c div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-118a7e26-f770-485a-831b-032e1f8c123c div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-118a7e26-f770-485a-831b-032e1f8c123c div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-118a7e26-f770-485a-831b-032e1f8c123c div.sk-container {display: inline-block;position: relative;}</style><div id="sk-118a7e26-f770-485a-831b-032e1f8c123c" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="bbfd2acc-a874-424e-8728-be436168ba42" type="checkbox" ><label class="sk-toggleable__label" for="bbfd2acc-a874-424e-8728-be436168ba42">StackingRegressor</label><div class="sk-toggleable__content"><pre>StackingRegressor(estimators=[('Random Forest',
                                   Pipeline(steps=[('columntransformer',
                                                    ColumnTransformer(transformers=[('simpleimputer',
                                                                                     SimpleImputer(add_indicator=True),
                                                                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a398e0>),
                                                                                    ('ordinalencoder',
                                                                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                                                    unknown_value=-1),
                                                                                     <sklearn.compose...
                                                                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a398e0>),
                                                                                    ('ordinalencoder',
                                                                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                                                    unknown_value=-1),
                                                                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a39970>)])),
                                                   ('histgradientboostingregressor',
                                                    HistGradientBoostingRegressor(random_state=0))]))],
                      final_estimator=RidgeCV(alphas=array([ 0.1,  1. , 10. ])))</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Random Forest</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4cd35f8d-075f-4626-ab42-50276869e5bb" type="checkbox" ><label class="sk-toggleable__label" for="4cd35f8d-075f-4626-ab42-50276869e5bb">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a398e0>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a39970>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="fdda00a9-8922-4541-9543-ca35899b4809" type="checkbox" ><label class="sk-toggleable__label" for="fdda00a9-8922-4541-9543-ca35899b4809">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a398e0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f6a2b40a-6116-476d-b6a7-1d4b27bec7fc" type="checkbox" ><label class="sk-toggleable__label" for="f6a2b40a-6116-476d-b6a7-1d4b27bec7fc">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5990b6b6-a6d6-44a0-97ba-613f026eab51" type="checkbox" ><label class="sk-toggleable__label" for="5990b6b6-a6d6-44a0-97ba-613f026eab51">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a39970></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4d807017-3e14-48c9-b308-78af72033430" type="checkbox" ><label class="sk-toggleable__label" for="4d807017-3e14-48c9-b308-78af72033430">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4608522f-0ffe-4730-9f4b-8f5a1de7f375" type="checkbox" ><label class="sk-toggleable__label" for="4608522f-0ffe-4730-9f4b-8f5a1de7f375">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Lasso</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1cb4fbb3-a975-4b39-b22a-9bc93ff7d81e" type="checkbox" ><label class="sk-toggleable__label" for="1cb4fbb3-a975-4b39-b22a-9bc93ff7d81e">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('pipeline',
                                     Pipeline(steps=[('standardscaler',
                                                      StandardScaler()),
                                                     ('simpleimputer',
                                                      SimpleImputer(add_indicator=True))]),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a398e0>),
                                    ('onehotencoder',
                                     OneHotEncoder(handle_unknown='ignore'),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a39970>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="08d94687-baf2-4d5a-9964-b9b90261a42a" type="checkbox" ><label class="sk-toggleable__label" for="08d94687-baf2-4d5a-9964-b9b90261a42a">pipeline</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a398e0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9e4b815a-1754-4a98-b37d-7166cf5bf332" type="checkbox" ><label class="sk-toggleable__label" for="9e4b815a-1754-4a98-b37d-7166cf5bf332">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ac19bde4-0a4d-4b16-932c-2dcaad880989" type="checkbox" ><label class="sk-toggleable__label" for="ac19bde4-0a4d-4b16-932c-2dcaad880989">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="291ce213-e69c-44d9-8ac4-f9a175862bce" type="checkbox" ><label class="sk-toggleable__label" for="291ce213-e69c-44d9-8ac4-f9a175862bce">onehotencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a39970></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="23f74c42-a58d-4fd4-955d-f44c3ff977ba" type="checkbox" ><label class="sk-toggleable__label" for="23f74c42-a58d-4fd4-955d-f44c3ff977ba">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="55f0ff65-a12e-49dc-bfb5-7b5dd7cb6cc8" type="checkbox" ><label class="sk-toggleable__label" for="55f0ff65-a12e-49dc-bfb5-7b5dd7cb6cc8">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Gradient Boosting</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a27d24a1-ac66-49c9-a262-82ccadf5f7d1" type="checkbox" ><label class="sk-toggleable__label" for="a27d24a1-ac66-49c9-a262-82ccadf5f7d1">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a398e0>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a39970>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c159d240-c205-47a5-a66b-f891d56e8f8b" type="checkbox" ><label class="sk-toggleable__label" for="c159d240-c205-47a5-a66b-f891d56e8f8b">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a398e0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9f57e2eb-49eb-4219-a66e-b777dcf14aec" type="checkbox" ><label class="sk-toggleable__label" for="9f57e2eb-49eb-4219-a66e-b777dcf14aec">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3a5641ed-95af-4c04-8786-cc005a21a9eb" type="checkbox" ><label class="sk-toggleable__label" for="3a5641ed-95af-4c04-8786-cc005a21a9eb">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f3566a39970></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="bbb03f2b-ef93-4564-b776-02641bb8587e" type="checkbox" ><label class="sk-toggleable__label" for="bbb03f2b-ef93-4564-b776-02641bb8587e">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="86e1e756-5664-4568-ba5e-3cafc353612c" type="checkbox" ><label class="sk-toggleable__label" for="86e1e756-5664-4568-ba5e-3cafc353612c">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>final_estimator</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9e30582d-2ab4-4d40-a6dd-1e7914fe4c36" type="checkbox" ><label class="sk-toggleable__label" for="9e30582d-2ab4-4d40-a6dd-1e7914fe4c36">RidgeCV</label><div class="sk-toggleable__content"><pre>RidgeCV(alphas=array([ 0.1,  1. , 10. ]))</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 205-214

Measure and plot the results
#############################################################################

 Now we can use Ames Housing dataset to make the predictions. We check the
 performance of each individual predictor as well as of the stack of the
 regressors.

 The function ``plot_regression_results`` is used to plot the predicted and
 true targets.

.. GENERATED FROM PYTHON SOURCE LINES 214-279

.. code-block:: default



    import time
    import matplotlib.pyplot as plt
    from sklearn.model_selection import cross_validate, cross_val_predict


    def plot_regression_results(ax, y_true, y_pred, title, scores, elapsed_time):
        """Scatter plot of the predicted vs true targets."""
        ax.plot(
            [y_true.min(), y_true.max()], [y_true.min(), y_true.max()], "--r", linewidth=2
        )
        ax.scatter(y_true, y_pred, alpha=0.2)

        ax.spines["top"].set_visible(False)
        ax.spines["right"].set_visible(False)
        ax.get_xaxis().tick_bottom()
        ax.get_yaxis().tick_left()
        ax.spines["left"].set_position(("outward", 10))
        ax.spines["bottom"].set_position(("outward", 10))
        ax.set_xlim([y_true.min(), y_true.max()])
        ax.set_ylim([y_true.min(), y_true.max()])
        ax.set_xlabel("Measured")
        ax.set_ylabel("Predicted")
        extra = plt.Rectangle(
            (0, 0), 0, 0, fc="w", fill=False, edgecolor="none", linewidth=0
        )
        ax.legend([extra], [scores], loc="upper left")
        title = title + "\n Evaluation in {:.2f} seconds".format(elapsed_time)
        ax.set_title(title)


    fig, axs = plt.subplots(2, 2, figsize=(9, 7))
    axs = np.ravel(axs)

    for ax, (name, est) in zip(
        axs, estimators + [("Stacking Regressor", stacking_regressor)]
    ):
        start_time = time.time()
        score = cross_validate(
            est, X, y, scoring=["r2", "neg_mean_absolute_error"], n_jobs=-1, verbose=0
        )
        elapsed_time = time.time() - start_time

        y_pred = cross_val_predict(est, X, y, n_jobs=-1, verbose=0)

        plot_regression_results(
            ax,
            y,
            y_pred,
            name,
            (r"$R^2={:.2f} \pm {:.2f}$" + "\n" + r"$MAE={:.2f} \pm {:.2f}$").format(
                np.mean(score["test_r2"]),
                np.std(score["test_r2"]),
                -np.mean(score["test_neg_mean_absolute_error"]),
                np.std(score["test_neg_mean_absolute_error"]),
            ),
            elapsed_time,
        )

    plt.suptitle("Single predictors versus stacked predictors")
    plt.tight_layout()
    plt.subplots_adjust(top=0.9)
    plt.show()




.. image-sg:: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :alt: Single predictors versus stacked predictors, Random Forest  Evaluation in 3.81 seconds, Lasso  Evaluation in 0.63 seconds, Gradient Boosting  Evaluation in 0.89 seconds, Stacking Regressor  Evaluation in 11.40 seconds
   :srcset: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 280-283

The stacked regressor will combine the strengths of the different regressors.
However, we also see that training the stacked regressor is much more
computationally expensive.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  32.283 seconds)


.. _sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/ensemble/plot_stack_predictors.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_stack_predictors.py <plot_stack_predictors.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_stack_predictors.ipynb <plot_stack_predictors.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
