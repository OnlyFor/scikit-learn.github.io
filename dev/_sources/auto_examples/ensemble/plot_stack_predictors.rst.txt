
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/ensemble/plot_stack_predictors.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_ensemble_plot_stack_predictors.py:


=================================
Combine predictors using stacking
=================================

.. currentmodule:: sklearn

Stacking refers to a method to blend estimators. In this strategy, some
estimators are individually fitted on some training data while a final
estimator is trained using the stacked predictions of these base estimators.

In this example, we illustrate the use case in which different regressors are
stacked together and a final linear penalized regressor is used to output the
prediction. We compare the performance of each individual regressor with the
stacking strategy. Stacking slightly improves the overall performance.

.. GENERATED FROM PYTHON SOURCE LINES 18-29

.. code-block:: default


    # Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>
    #          Maria Telenczuk    <https://github.com/maikia>
    # License: BSD 3 clause

    print(__doc__)

    from sklearn import set_config

    set_config(display="diagram")








.. GENERATED FROM PYTHON SOURCE LINES 30-46

Download the dataset
#############################################################################

 We will use `Ames Housing`_ dataset which was first compiled by Dean De Cock
 and became better known after it was used in Kaggle challenge. It is a set
 of 1460 residential homes in Ames, Iowa, each described by 80 features. We
 will use it to predict the final logarithmic price of the houses. In this
 example we will use only 20 most interesting features chosen using
 GradientBoostingRegressor() and limit number of entries (here we won't go
 into the details on how to select the most interesting features).

 The Ames housing dataset is not shipped with scikit-learn and therefore we
 will fetch it from `OpenML`_.

 .. _`Ames Housing`: http://jse.amstat.org/v19n3/decock.pdf
 .. _`OpenML`: https://www.openml.org/d/42165

.. GENERATED FROM PYTHON SOURCE LINES 46-92

.. code-block:: default


    import numpy as np

    from sklearn.datasets import fetch_openml
    from sklearn.utils import shuffle


    def load_ames_housing():
        df = fetch_openml(name="house_prices", as_frame=True)
        X = df.data
        y = df.target

        features = [
            "YrSold",
            "HeatingQC",
            "Street",
            "YearRemodAdd",
            "Heating",
            "MasVnrType",
            "BsmtUnfSF",
            "Foundation",
            "MasVnrArea",
            "MSSubClass",
            "ExterQual",
            "Condition2",
            "GarageCars",
            "GarageType",
            "OverallQual",
            "TotalBsmtSF",
            "BsmtFinSF1",
            "HouseStyle",
            "MiscFeature",
            "MoSold",
        ]

        X = X[features]
        X, y = shuffle(X, y, random_state=0)

        X = X[:600]
        y = y[:600]
        return X, np.log(y)


    X, y = load_ames_housing()









.. GENERATED FROM PYTHON SOURCE LINES 93-99

Make pipeline to preprocess the data
#############################################################################

 Before we can use Ames dataset we still need to do some preprocessing.
 First, we will select the categorical and numerical columns of the dataset to
 construct the first step of the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 99-106

.. code-block:: default


    from sklearn.compose import make_column_selector

    cat_selector = make_column_selector(dtype_include=object)
    num_selector = make_column_selector(dtype_include=np.number)
    cat_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['HeatingQC', 'Street', 'Heating', 'MasVnrType', 'Foundation', 'ExterQual', 'Condition2', 'GarageType', 'HouseStyle', 'MiscFeature']



.. GENERATED FROM PYTHON SOURCE LINES 107-109

.. code-block:: default

    num_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['YrSold', 'YearRemodAdd', 'BsmtUnfSF', 'MasVnrArea', 'MSSubClass', 'GarageCars', 'OverallQual', 'TotalBsmtSF', 'BsmtFinSF1', 'MoSold']



.. GENERATED FROM PYTHON SOURCE LINES 110-119

Then, we will need to design preprocessing pipelines which depends on the
ending regressor. If the ending regressor is a linear model, one needs to
one-hot encode the categories. If the ending regressor is a tree-based model
an ordinal encoder will be sufficient. Besides, numerical values need to be
standardized for a linear model while the raw numerical data can be treated
as is by a tree-based model. However, both models need an imputer to
handle missing values.

We will first design the pipeline required for the tree-based models.

.. GENERATED FROM PYTHON SOURCE LINES 119-135

.. code-block:: default


    from sklearn.compose import make_column_transformer
    from sklearn.impute import SimpleImputer
    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import OrdinalEncoder

    cat_tree_processor = OrdinalEncoder(
        handle_unknown="use_encoded_value", unknown_value=-1
    )
    num_tree_processor = SimpleImputer(strategy="mean", add_indicator=True)

    tree_preprocessor = make_column_transformer(
        (num_tree_processor, num_selector), (cat_tree_processor, cat_selector)
    )
    tree_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-809da267-79c3-4b15-9680-04729bc95e18 {color: black;background-color: white;}#sk-809da267-79c3-4b15-9680-04729bc95e18 pre{padding: 0;}#sk-809da267-79c3-4b15-9680-04729bc95e18 div.sk-toggleable {background-color: white;}#sk-809da267-79c3-4b15-9680-04729bc95e18 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-809da267-79c3-4b15-9680-04729bc95e18 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-809da267-79c3-4b15-9680-04729bc95e18 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-809da267-79c3-4b15-9680-04729bc95e18 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-809da267-79c3-4b15-9680-04729bc95e18 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-809da267-79c3-4b15-9680-04729bc95e18 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-809da267-79c3-4b15-9680-04729bc95e18 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-809da267-79c3-4b15-9680-04729bc95e18 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-809da267-79c3-4b15-9680-04729bc95e18 div.sk-estimator:hover {background-color: #d4ebff;}#sk-809da267-79c3-4b15-9680-04729bc95e18 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-809da267-79c3-4b15-9680-04729bc95e18 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-809da267-79c3-4b15-9680-04729bc95e18 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-809da267-79c3-4b15-9680-04729bc95e18 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-809da267-79c3-4b15-9680-04729bc95e18 div.sk-item {z-index: 1;}#sk-809da267-79c3-4b15-9680-04729bc95e18 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-809da267-79c3-4b15-9680-04729bc95e18 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-809da267-79c3-4b15-9680-04729bc95e18 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-809da267-79c3-4b15-9680-04729bc95e18 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-809da267-79c3-4b15-9680-04729bc95e18 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-809da267-79c3-4b15-9680-04729bc95e18 div.sk-parallel-item:only-child::after {width: 0;}#sk-809da267-79c3-4b15-9680-04729bc95e18 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-809da267-79c3-4b15-9680-04729bc95e18 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-809da267-79c3-4b15-9680-04729bc95e18 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-809da267-79c3-4b15-9680-04729bc95e18 div.sk-container {display: inline-block;position: relative;}#sk-809da267-79c3-4b15-9680-04729bc95e18 div.sk-text-repr-fallback {display: none;}</style><div id="sk-809da267-79c3-4b15-9680-04729bc95e18" class"sk-top-container"><div class="sk-text-repr-fallback"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0&gt;)])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0a3c0ec4-ef5d-4e3b-9229-f0e8d098d3ec" type="checkbox" ><label class="sk-toggleable__label" for="0a3c0ec4-ef5d-4e3b-9229-f0e8d098d3ec">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a13706c3-9785-4960-bd67-9bd7cb5c2fff" type="checkbox" ><label class="sk-toggleable__label" for="a13706c3-9785-4960-bd67-9bd7cb5c2fff">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7ebead6a-a3e4-4132-b3d1-b8b797c71617" type="checkbox" ><label class="sk-toggleable__label" for="7ebead6a-a3e4-4132-b3d1-b8b797c71617">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a13a10e5-3866-451d-92c1-4a0c9bd068db" type="checkbox" ><label class="sk-toggleable__label" for="a13a10e5-3866-451d-92c1-4a0c9bd068db">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="13935d35-b50d-442b-9a5b-e3983a37fb9b" type="checkbox" ><label class="sk-toggleable__label" for="13935d35-b50d-442b-9a5b-e3983a37fb9b">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 136-138

Then, we will now define the preprocessor used when the ending regressor
is a linear model.

.. GENERATED FROM PYTHON SOURCE LINES 138-152

.. code-block:: default


    from sklearn.preprocessing import OneHotEncoder
    from sklearn.preprocessing import StandardScaler

    cat_linear_processor = OneHotEncoder(handle_unknown="ignore")
    num_linear_processor = make_pipeline(
        StandardScaler(), SimpleImputer(strategy="mean", add_indicator=True)
    )

    linear_preprocessor = make_column_transformer(
        (num_linear_processor, num_selector), (cat_linear_processor, cat_selector)
    )
    linear_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb {color: black;background-color: white;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb pre{padding: 0;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb div.sk-toggleable {background-color: white;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb div.sk-estimator:hover {background-color: #d4ebff;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb div.sk-item {z-index: 1;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb div.sk-parallel-item:only-child::after {width: 0;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb div.sk-container {display: inline-block;position: relative;}#sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb div.sk-text-repr-fallback {display: none;}</style><div id="sk-9e6b5ba9-6622-427d-921d-b0c00cf74bbb" class"sk-top-container"><div class="sk-text-repr-fallback"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0&gt;)])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9bf14503-d543-41dc-9d98-d2750855a304" type="checkbox" ><label class="sk-toggleable__label" for="9bf14503-d543-41dc-9d98-d2750855a304">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('pipeline',
                                     Pipeline(steps=[('standardscaler',
                                                      StandardScaler()),
                                                     ('simpleimputer',
                                                      SimpleImputer(add_indicator=True))]),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90>),
                                    ('onehotencoder',
                                     OneHotEncoder(handle_unknown='ignore'),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8c678bda-bcc1-4b54-9d99-7e1642f1a490" type="checkbox" ><label class="sk-toggleable__label" for="8c678bda-bcc1-4b54-9d99-7e1642f1a490">pipeline</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b438a4fe-ce75-4d14-9306-6b5a19f0e4c9" type="checkbox" ><label class="sk-toggleable__label" for="b438a4fe-ce75-4d14-9306-6b5a19f0e4c9">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7dec8a48-4b80-46a0-bda5-d44982e96bb1" type="checkbox" ><label class="sk-toggleable__label" for="7dec8a48-4b80-46a0-bda5-d44982e96bb1">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7cd9f84f-ce2f-41c0-93eb-2d5b5530dc12" type="checkbox" ><label class="sk-toggleable__label" for="7cd9f84f-ce2f-41c0-93eb-2d5b5530dc12">onehotencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1554643f-2376-41b3-9d18-614ca927775f" type="checkbox" ><label class="sk-toggleable__label" for="1554643f-2376-41b3-9d18-614ca927775f">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 153-171

Stack of predictors on a single data set
#############################################################################

 It is sometimes tedious to find the model which will best perform on a given
 dataset. Stacking provide an alternative by combining the outputs of several
 learners, without the need to choose a model specifically. The performance of
 stacking is usually close to the best model and sometimes it can outperform
 the prediction performance of each individual model.

 Here, we combine 3 learners (linear and non-linear) and use a ridge regressor
 to combine their outputs together.

 .. note::
    Although we will make new pipelines with the processors which we wrote in
    the previous section for the 3 learners, the final estimator
    :class:`~sklearn.linear_model.RidgeCV()` does not need preprocessing of
    the data as it will be fed with the already preprocessed output from the 3
    learners.

.. GENERATED FROM PYTHON SOURCE LINES 171-177

.. code-block:: default


    from sklearn.linear_model import LassoCV

    lasso_pipeline = make_pipeline(linear_preprocessor, LassoCV())
    lasso_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd {color: black;background-color: white;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd pre{padding: 0;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd div.sk-toggleable {background-color: white;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd div.sk-estimator:hover {background-color: #d4ebff;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd div.sk-item {z-index: 1;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd div.sk-parallel-item:only-child::after {width: 0;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd div.sk-container {display: inline-block;position: relative;}#sk-1d56f8b4-8242-4656-92e1-d82cc36109dd div.sk-text-repr-fallback {display: none;}</style><div id="sk-1d56f8b4-8242-4656-92e1-d82cc36109dd" class"sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                                      Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                                       StandardScaler()),
                                                                      (&#x27;simpleimputer&#x27;,
                                                                       SimpleImputer(add_indicator=True))]),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90&gt;),
                                                     (&#x27;onehotencoder&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0&gt;)])),
                    (&#x27;lassocv&#x27;, LassoCV())])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="12a40a19-0f58-4f35-83e6-3b9655ab4644" type="checkbox" ><label class="sk-toggleable__label" for="12a40a19-0f58-4f35-83e6-3b9655ab4644">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columntransformer',
                     ColumnTransformer(transformers=[('pipeline',
                                                      Pipeline(steps=[('standardscaler',
                                                                       StandardScaler()),
                                                                      ('simpleimputer',
                                                                       SimpleImputer(add_indicator=True))]),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90>),
                                                     ('onehotencoder',
                                                      OneHotEncoder(handle_unknown='ignore'),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0>)])),
                    ('lassocv', LassoCV())])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ebfa7781-a2ff-42c0-8cba-f01ba0e522a1" type="checkbox" ><label class="sk-toggleable__label" for="ebfa7781-a2ff-42c0-8cba-f01ba0e522a1">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('pipeline',
                                     Pipeline(steps=[('standardscaler',
                                                      StandardScaler()),
                                                     ('simpleimputer',
                                                      SimpleImputer(add_indicator=True))]),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90>),
                                    ('onehotencoder',
                                     OneHotEncoder(handle_unknown='ignore'),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0eb77059-d44b-41b0-ace9-e62fbcb9bbe7" type="checkbox" ><label class="sk-toggleable__label" for="0eb77059-d44b-41b0-ace9-e62fbcb9bbe7">pipeline</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="dd7bc3de-ba7c-4917-af30-d7584b98cf70" type="checkbox" ><label class="sk-toggleable__label" for="dd7bc3de-ba7c-4917-af30-d7584b98cf70">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="85a6e2fb-d1b1-4707-a25b-773d687e4955" type="checkbox" ><label class="sk-toggleable__label" for="85a6e2fb-d1b1-4707-a25b-773d687e4955">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="dab23b26-ac99-43d9-bd3c-eba8c2680d33" type="checkbox" ><label class="sk-toggleable__label" for="dab23b26-ac99-43d9-bd3c-eba8c2680d33">onehotencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a11c9af1-6568-4ae9-aecf-ec314b95757c" type="checkbox" ><label class="sk-toggleable__label" for="a11c9af1-6568-4ae9-aecf-ec314b95757c">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3891a452-09d8-43fa-b464-63e9ab07ad71" type="checkbox" ><label class="sk-toggleable__label" for="3891a452-09d8-43fa-b464-63e9ab07ad71">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 178-183

.. code-block:: default

    from sklearn.ensemble import RandomForestRegressor

    rf_pipeline = make_pipeline(tree_preprocessor, RandomForestRegressor(random_state=42))
    rf_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 {color: black;background-color: white;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 pre{padding: 0;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 div.sk-toggleable {background-color: white;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 div.sk-item {z-index: 1;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 div.sk-parallel-item:only-child::after {width: 0;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 div.sk-container {display: inline-block;position: relative;}#sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3 div.sk-text-repr-fallback {display: none;}</style><div id="sk-7e86e413-7067-46cb-bba0-6d07ac9c4ad3" class"sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0&gt;)])),
                    (&#x27;randomforestregressor&#x27;,
                     RandomForestRegressor(random_state=42))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c881621a-61c5-4033-b245-71662d74c5d2" type="checkbox" ><label class="sk-toggleable__label" for="c881621a-61c5-4033-b245-71662d74c5d2">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columntransformer',
                     ColumnTransformer(transformers=[('simpleimputer',
                                                      SimpleImputer(add_indicator=True),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90>),
                                                     ('ordinalencoder',
                                                      OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                     unknown_value=-1),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0>)])),
                    ('randomforestregressor',
                     RandomForestRegressor(random_state=42))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="18a7c220-9e40-43e0-a6b1-f61ee748a413" type="checkbox" ><label class="sk-toggleable__label" for="18a7c220-9e40-43e0-a6b1-f61ee748a413">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3f682d01-573e-4e4e-9af0-413da18a91cb" type="checkbox" ><label class="sk-toggleable__label" for="3f682d01-573e-4e4e-9af0-413da18a91cb">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="48ea0dd7-31ec-4c00-92d1-ee91748dcd9f" type="checkbox" ><label class="sk-toggleable__label" for="48ea0dd7-31ec-4c00-92d1-ee91748dcd9f">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="069bc94f-0735-4381-8d02-b035a5b4b09f" type="checkbox" ><label class="sk-toggleable__label" for="069bc94f-0735-4381-8d02-b035a5b4b09f">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2cb071ea-ab4a-47a2-87f9-389b6d8b7b99" type="checkbox" ><label class="sk-toggleable__label" for="2cb071ea-ab4a-47a2-87f9-389b6d8b7b99">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f65a77f6-b959-4748-bd5d-ae1e2090ff6d" type="checkbox" ><label class="sk-toggleable__label" for="f65a77f6-b959-4748-bd5d-ae1e2090ff6d">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 184-191

.. code-block:: default

    from sklearn.ensemble import HistGradientBoostingRegressor

    gbdt_pipeline = make_pipeline(
        tree_preprocessor, HistGradientBoostingRegressor(random_state=0)
    )
    gbdt_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 {color: black;background-color: white;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 pre{padding: 0;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 div.sk-toggleable {background-color: white;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 div.sk-estimator:hover {background-color: #d4ebff;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 div.sk-item {z-index: 1;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 div.sk-parallel-item:only-child::after {width: 0;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 div.sk-container {display: inline-block;position: relative;}#sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583 div.sk-text-repr-fallback {display: none;}</style><div id="sk-ef7f171f-8e69-452a-a37c-6ee3e0f81583" class"sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0&gt;)])),
                    (&#x27;histgradientboostingregressor&#x27;,
                     HistGradientBoostingRegressor(random_state=0))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6a140212-ea24-4008-87bc-e76e359eaccd" type="checkbox" ><label class="sk-toggleable__label" for="6a140212-ea24-4008-87bc-e76e359eaccd">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columntransformer',
                     ColumnTransformer(transformers=[('simpleimputer',
                                                      SimpleImputer(add_indicator=True),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90>),
                                                     ('ordinalencoder',
                                                      OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                     unknown_value=-1),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0>)])),
                    ('histgradientboostingregressor',
                     HistGradientBoostingRegressor(random_state=0))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="924f1980-22b7-4332-bd35-5442eebc2b53" type="checkbox" ><label class="sk-toggleable__label" for="924f1980-22b7-4332-bd35-5442eebc2b53">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a7b5ed37-b3eb-4a76-a389-45246aefaa6d" type="checkbox" ><label class="sk-toggleable__label" for="a7b5ed37-b3eb-4a76-a389-45246aefaa6d">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d55579f7-f90c-4091-95a3-9420483e24bc" type="checkbox" ><label class="sk-toggleable__label" for="d55579f7-f90c-4091-95a3-9420483e24bc">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1148bb48-76e8-4423-8576-888712051690" type="checkbox" ><label class="sk-toggleable__label" for="1148bb48-76e8-4423-8576-888712051690">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="23497fb3-39ef-446b-a253-0cf0c452867a" type="checkbox" ><label class="sk-toggleable__label" for="23497fb3-39ef-446b-a253-0cf0c452867a">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="24c7a1b9-9f09-47a2-b279-e1b98bea15fb" type="checkbox" ><label class="sk-toggleable__label" for="24c7a1b9-9f09-47a2-b279-e1b98bea15fb">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 192-204

.. code-block:: default

    from sklearn.ensemble import StackingRegressor
    from sklearn.linear_model import RidgeCV

    estimators = [
        ("Random Forest", rf_pipeline),
        ("Lasso", lasso_pipeline),
        ("Gradient Boosting", gbdt_pipeline),
    ]

    stacking_regressor = StackingRegressor(estimators=estimators, final_estimator=RidgeCV())
    stacking_regressor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 {color: black;background-color: white;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 pre{padding: 0;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 div.sk-toggleable {background-color: white;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 div.sk-estimator:hover {background-color: #d4ebff;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 div.sk-item {z-index: 1;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 div.sk-parallel-item:only-child::after {width: 0;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 div.sk-container {display: inline-block;position: relative;}#sk-b10e31c5-10a3-4569-abde-a2207fb5a447 div.sk-text-repr-fallback {display: none;}</style><div id="sk-b10e31c5-10a3-4569-abde-a2207fb5a447" class"sk-top-container"><div class="sk-text-repr-fallback"><pre>StackingRegressor(estimators=[(&#x27;Random Forest&#x27;,
                                   Pipeline(steps=[(&#x27;columntransformer&#x27;,
                                                    ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                                                     SimpleImputer(add_indicator=True),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose...
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0&gt;)])),
                                                   (&#x27;histgradientboostingregressor&#x27;,
                                                    HistGradientBoostingRegressor(random_state=0))]))],
                      final_estimator=RidgeCV(alphas=array([ 0.1,  1. , 10. ])))</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="cee2b17d-c741-48f7-ae9f-91831a600420" type="checkbox" ><label class="sk-toggleable__label" for="cee2b17d-c741-48f7-ae9f-91831a600420">StackingRegressor</label><div class="sk-toggleable__content"><pre>StackingRegressor(estimators=[('Random Forest',
                                   Pipeline(steps=[('columntransformer',
                                                    ColumnTransformer(transformers=[('simpleimputer',
                                                                                     SimpleImputer(add_indicator=True),
                                                                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90>),
                                                                                    ('ordinalencoder',
                                                                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                                                    unknown_value=-1),
                                                                                     <sklearn.compose...
                                                                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90>),
                                                                                    ('ordinalencoder',
                                                                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                                                    unknown_value=-1),
                                                                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0>)])),
                                                   ('histgradientboostingregressor',
                                                    HistGradientBoostingRegressor(random_state=0))]))],
                      final_estimator=RidgeCV(alphas=array([ 0.1,  1. , 10. ])))</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Random Forest</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b611acd2-6dac-47c6-a681-32ac792bb3bf" type="checkbox" ><label class="sk-toggleable__label" for="b611acd2-6dac-47c6-a681-32ac792bb3bf">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b72af516-cd91-49b0-831f-9ef0beb55267" type="checkbox" ><label class="sk-toggleable__label" for="b72af516-cd91-49b0-831f-9ef0beb55267">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7f290787-482b-445f-801e-b2e92af81c40" type="checkbox" ><label class="sk-toggleable__label" for="7f290787-482b-445f-801e-b2e92af81c40">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="36ffa3e9-2b45-4311-9f54-1d7ae95c8a92" type="checkbox" ><label class="sk-toggleable__label" for="36ffa3e9-2b45-4311-9f54-1d7ae95c8a92">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9733ef52-d083-4fe7-ac89-1fc676c0ccf2" type="checkbox" ><label class="sk-toggleable__label" for="9733ef52-d083-4fe7-ac89-1fc676c0ccf2">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="53135d33-ed00-4123-a331-288ca7712239" type="checkbox" ><label class="sk-toggleable__label" for="53135d33-ed00-4123-a331-288ca7712239">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Lasso</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="50d5e0ac-49bb-487e-8093-738ca225164d" type="checkbox" ><label class="sk-toggleable__label" for="50d5e0ac-49bb-487e-8093-738ca225164d">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('pipeline',
                                     Pipeline(steps=[('standardscaler',
                                                      StandardScaler()),
                                                     ('simpleimputer',
                                                      SimpleImputer(add_indicator=True))]),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90>),
                                    ('onehotencoder',
                                     OneHotEncoder(handle_unknown='ignore'),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a9e620f1-a5df-4d6a-ba43-b10169d0beab" type="checkbox" ><label class="sk-toggleable__label" for="a9e620f1-a5df-4d6a-ba43-b10169d0beab">pipeline</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1afe3c5d-05c0-44f8-af40-e3b0880eb49a" type="checkbox" ><label class="sk-toggleable__label" for="1afe3c5d-05c0-44f8-af40-e3b0880eb49a">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="33c7bd4f-9ef5-4deb-8f91-b2f8dc30872e" type="checkbox" ><label class="sk-toggleable__label" for="33c7bd4f-9ef5-4deb-8f91-b2f8dc30872e">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="26bbfe56-f0c5-4641-8930-c689e6aa0635" type="checkbox" ><label class="sk-toggleable__label" for="26bbfe56-f0c5-4641-8930-c689e6aa0635">onehotencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="557a40a7-bd24-4112-b0da-ba8919733bb4" type="checkbox" ><label class="sk-toggleable__label" for="557a40a7-bd24-4112-b0da-ba8919733bb4">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a5394f06-7615-4980-8406-19183284cd5f" type="checkbox" ><label class="sk-toggleable__label" for="a5394f06-7615-4980-8406-19183284cd5f">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Gradient Boosting</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d7629cc9-70bc-4392-985b-1df26a0b1e91" type="checkbox" ><label class="sk-toggleable__label" for="d7629cc9-70bc-4392-985b-1df26a0b1e91">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="52a0daa2-1022-40b6-9dda-c33d8ab952e5" type="checkbox" ><label class="sk-toggleable__label" for="52a0daa2-1022-40b6-9dda-c33d8ab952e5">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79ad90></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a163942c-5d5c-4262-961e-f261a4d503d7" type="checkbox" ><label class="sk-toggleable__label" for="a163942c-5d5c-4262-961e-f261a4d503d7">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="588bb31a-f87b-4b24-ae17-eac7f6aa1fc1" type="checkbox" ><label class="sk-toggleable__label" for="588bb31a-f87b-4b24-ae17-eac7f6aa1fc1">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f86ef79aeb0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3fc8a9ff-6a34-405e-ae54-268556a7cd86" type="checkbox" ><label class="sk-toggleable__label" for="3fc8a9ff-6a34-405e-ae54-268556a7cd86">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2b7971ef-5376-4c73-83de-a901e259309f" type="checkbox" ><label class="sk-toggleable__label" for="2b7971ef-5376-4c73-83de-a901e259309f">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>final_estimator</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="88b568bc-f32c-4ccb-8200-40e0b148cd98" type="checkbox" ><label class="sk-toggleable__label" for="88b568bc-f32c-4ccb-8200-40e0b148cd98">RidgeCV</label><div class="sk-toggleable__content"><pre>RidgeCV(alphas=array([ 0.1,  1. , 10. ]))</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 205-214

Measure and plot the results
#############################################################################

 Now we can use Ames Housing dataset to make the predictions. We check the
 performance of each individual predictor as well as of the stack of the
 regressors.

 The function ``plot_regression_results`` is used to plot the predicted and
 true targets.

.. GENERATED FROM PYTHON SOURCE LINES 214-279

.. code-block:: default



    import time
    import matplotlib.pyplot as plt
    from sklearn.model_selection import cross_validate, cross_val_predict


    def plot_regression_results(ax, y_true, y_pred, title, scores, elapsed_time):
        """Scatter plot of the predicted vs true targets."""
        ax.plot(
            [y_true.min(), y_true.max()], [y_true.min(), y_true.max()], "--r", linewidth=2
        )
        ax.scatter(y_true, y_pred, alpha=0.2)

        ax.spines["top"].set_visible(False)
        ax.spines["right"].set_visible(False)
        ax.get_xaxis().tick_bottom()
        ax.get_yaxis().tick_left()
        ax.spines["left"].set_position(("outward", 10))
        ax.spines["bottom"].set_position(("outward", 10))
        ax.set_xlim([y_true.min(), y_true.max()])
        ax.set_ylim([y_true.min(), y_true.max()])
        ax.set_xlabel("Measured")
        ax.set_ylabel("Predicted")
        extra = plt.Rectangle(
            (0, 0), 0, 0, fc="w", fill=False, edgecolor="none", linewidth=0
        )
        ax.legend([extra], [scores], loc="upper left")
        title = title + "\n Evaluation in {:.2f} seconds".format(elapsed_time)
        ax.set_title(title)


    fig, axs = plt.subplots(2, 2, figsize=(9, 7))
    axs = np.ravel(axs)

    for ax, (name, est) in zip(
        axs, estimators + [("Stacking Regressor", stacking_regressor)]
    ):
        start_time = time.time()
        score = cross_validate(
            est, X, y, scoring=["r2", "neg_mean_absolute_error"], n_jobs=-1, verbose=0
        )
        elapsed_time = time.time() - start_time

        y_pred = cross_val_predict(est, X, y, n_jobs=-1, verbose=0)

        plot_regression_results(
            ax,
            y,
            y_pred,
            name,
            (r"$R^2={:.2f} \pm {:.2f}$" + "\n" + r"$MAE={:.2f} \pm {:.2f}$").format(
                np.mean(score["test_r2"]),
                np.std(score["test_r2"]),
                -np.mean(score["test_neg_mean_absolute_error"]),
                np.std(score["test_neg_mean_absolute_error"]),
            ),
            elapsed_time,
        )

    plt.suptitle("Single predictors versus stacked predictors")
    plt.tight_layout()
    plt.subplots_adjust(top=0.9)
    plt.show()




.. image-sg:: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :alt: Single predictors versus stacked predictors, Random Forest  Evaluation in 1.92 seconds, Lasso  Evaluation in 0.42 seconds, Gradient Boosting  Evaluation in 0.50 seconds, Stacking Regressor  Evaluation in 8.74 seconds
   :srcset: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 280-283

The stacked regressor will combine the strengths of the different regressors.
However, we also see that training the stacked regressor is much more
computationally expensive.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  22.677 seconds)


.. _sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/ensemble/plot_stack_predictors.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_stack_predictors.py <plot_stack_predictors.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_stack_predictors.ipynb <plot_stack_predictors.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
