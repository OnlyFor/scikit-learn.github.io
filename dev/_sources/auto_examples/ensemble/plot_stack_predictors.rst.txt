
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/ensemble/plot_stack_predictors.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_ensemble_plot_stack_predictors.py:


=================================
Combine predictors using stacking
=================================

.. currentmodule:: sklearn

Stacking refers to a method to blend estimators. In this strategy, some
estimators are individually fitted on some training data while a final
estimator is trained using the stacked predictions of these base estimators.

In this example, we illustrate the use case in which different regressors are
stacked together and a final linear penalized regressor is used to output the
prediction. We compare the performance of each individual regressor with the
stacking strategy. Stacking slightly improves the overall performance.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

.. code-block:: default


    # Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>
    #          Maria Telenczuk    <https://github.com/maikia>
    # License: BSD 3 clause








.. GENERATED FROM PYTHON SOURCE LINES 24-40

Download the dataset
#############################################################################

 We will use `Ames Housing`_ dataset which was first compiled by Dean De Cock
 and became better known after it was used in Kaggle challenge. It is a set
 of 1460 residential homes in Ames, Iowa, each described by 80 features. We
 will use it to predict the final logarithmic price of the houses. In this
 example we will use only 20 most interesting features chosen using
 GradientBoostingRegressor() and limit number of entries (here we won't go
 into the details on how to select the most interesting features).

 The Ames housing dataset is not shipped with scikit-learn and therefore we
 will fetch it from `OpenML`_.

 .. _`Ames Housing`: http://jse.amstat.org/v19n3/decock.pdf
 .. _`OpenML`: https://www.openml.org/d/42165

.. GENERATED FROM PYTHON SOURCE LINES 40-86

.. code-block:: default


    import numpy as np

    from sklearn.datasets import fetch_openml
    from sklearn.utils import shuffle


    def load_ames_housing():
        df = fetch_openml(name="house_prices", as_frame=True)
        X = df.data
        y = df.target

        features = [
            "YrSold",
            "HeatingQC",
            "Street",
            "YearRemodAdd",
            "Heating",
            "MasVnrType",
            "BsmtUnfSF",
            "Foundation",
            "MasVnrArea",
            "MSSubClass",
            "ExterQual",
            "Condition2",
            "GarageCars",
            "GarageType",
            "OverallQual",
            "TotalBsmtSF",
            "BsmtFinSF1",
            "HouseStyle",
            "MiscFeature",
            "MoSold",
        ]

        X = X[features]
        X, y = shuffle(X, y, random_state=0)

        X = X[:600]
        y = y[:600]
        return X, np.log(y)


    X, y = load_ames_housing()









.. GENERATED FROM PYTHON SOURCE LINES 87-93

Make pipeline to preprocess the data
#############################################################################

 Before we can use Ames dataset we still need to do some preprocessing.
 First, we will select the categorical and numerical columns of the dataset to
 construct the first step of the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 93-100

.. code-block:: default


    from sklearn.compose import make_column_selector

    cat_selector = make_column_selector(dtype_include=object)
    num_selector = make_column_selector(dtype_include=np.number)
    cat_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['HeatingQC', 'Street', 'Heating', 'MasVnrType', 'Foundation', 'ExterQual', 'Condition2', 'GarageType', 'HouseStyle', 'MiscFeature']



.. GENERATED FROM PYTHON SOURCE LINES 101-103

.. code-block:: default

    num_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['YrSold', 'YearRemodAdd', 'BsmtUnfSF', 'MasVnrArea', 'MSSubClass', 'GarageCars', 'OverallQual', 'TotalBsmtSF', 'BsmtFinSF1', 'MoSold']



.. GENERATED FROM PYTHON SOURCE LINES 104-113

Then, we will need to design preprocessing pipelines which depends on the
ending regressor. If the ending regressor is a linear model, one needs to
one-hot encode the categories. If the ending regressor is a tree-based model
an ordinal encoder will be sufficient. Besides, numerical values need to be
standardized for a linear model while the raw numerical data can be treated
as is by a tree-based model. However, both models need an imputer to
handle missing values.

We will first design the pipeline required for the tree-based models.

.. GENERATED FROM PYTHON SOURCE LINES 113-129

.. code-block:: default


    from sklearn.compose import make_column_transformer
    from sklearn.impute import SimpleImputer
    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import OrdinalEncoder

    cat_tree_processor = OrdinalEncoder(
        handle_unknown="use_encoded_value", unknown_value=-1
    )
    num_tree_processor = SimpleImputer(strategy="mean", add_indicator=True)

    tree_preprocessor = make_column_transformer(
        (num_tree_processor, num_selector), (cat_tree_processor, cat_selector)
    )
    tree_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 {color: black;background-color: white;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 pre{padding: 0;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 div.sk-toggleable {background-color: white;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 div.sk-estimator:hover {background-color: #d4ebff;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 div.sk-item {z-index: 1;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 div.sk-parallel-item:only-child::after {width: 0;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-bc09676b-8ec4-4047-867c-f03b49b4f607 div.sk-text-repr-fallback {display: none;}</style><div id="sk-bc09676b-8ec4-4047-867c-f03b49b4f607" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;)])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="368fb899-c4b8-4341-b6c3-192ac1da2a34" type="checkbox" ><label for="368fb899-c4b8-4341-b6c3-192ac1da2a34" class="sk-toggleable__label sk-toggleable__label-arrow">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="824abf40-1b93-4db6-9208-36527a2ce161" type="checkbox" ><label for="824abf40-1b93-4db6-9208-36527a2ce161" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="51dafb39-0a07-42b2-a5b2-b4023328a7c5" type="checkbox" ><label for="51dafb39-0a07-42b2-a5b2-b4023328a7c5" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a1f01bb6-214d-4c82-bea5-c4ccd8b254a2" type="checkbox" ><label for="a1f01bb6-214d-4c82-bea5-c4ccd8b254a2" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e1e35753-b54d-450e-b0a6-16cd9b164508" type="checkbox" ><label for="e1e35753-b54d-450e-b0a6-16cd9b164508" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 130-132

Then, we will now define the preprocessor used when the ending regressor
is a linear model.

.. GENERATED FROM PYTHON SOURCE LINES 132-146

.. code-block:: default


    from sklearn.preprocessing import OneHotEncoder
    from sklearn.preprocessing import StandardScaler

    cat_linear_processor = OneHotEncoder(handle_unknown="ignore")
    num_linear_processor = make_pipeline(
        StandardScaler(), SimpleImputer(strategy="mean", add_indicator=True)
    )

    linear_preprocessor = make_column_transformer(
        (num_linear_processor, num_selector), (cat_linear_processor, cat_selector)
    )
    linear_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 {color: black;background-color: white;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 pre{padding: 0;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 div.sk-toggleable {background-color: white;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 div.sk-item {z-index: 1;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 div.sk-parallel-item:only-child::after {width: 0;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-159bab9e-f626-4afe-8d58-64c3509e5df7 div.sk-text-repr-fallback {display: none;}</style><div id="sk-159bab9e-f626-4afe-8d58-64c3509e5df7" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;)])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c3d389f0-5d48-45a2-be15-53130def449f" type="checkbox" ><label for="c3d389f0-5d48-45a2-be15-53130def449f" class="sk-toggleable__label sk-toggleable__label-arrow">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9b85195a-f1bd-4ac6-9d4c-59ea2399ae0d" type="checkbox" ><label for="9b85195a-f1bd-4ac6-9d4c-59ea2399ae0d" class="sk-toggleable__label sk-toggleable__label-arrow">pipeline</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="656a627e-a7a5-4bef-a1a8-18279bbbcbe2" type="checkbox" ><label for="656a627e-a7a5-4bef-a1a8-18279bbbcbe2" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="891bfdf0-b1a4-4449-bdb1-ced298dd4b8a" type="checkbox" ><label for="891bfdf0-b1a4-4449-bdb1-ced298dd4b8a" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0f253516-e477-4f4d-aa2e-c1b1fb39feee" type="checkbox" ><label for="0f253516-e477-4f4d-aa2e-c1b1fb39feee" class="sk-toggleable__label sk-toggleable__label-arrow">onehotencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4f9f4c9a-9caa-45b2-b960-c20dd4e7f83d" type="checkbox" ><label for="4f9f4c9a-9caa-45b2-b960-c20dd4e7f83d" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 147-165

Stack of predictors on a single data set
#############################################################################

 It is sometimes tedious to find the model which will best perform on a given
 dataset. Stacking provide an alternative by combining the outputs of several
 learners, without the need to choose a model specifically. The performance of
 stacking is usually close to the best model and sometimes it can outperform
 the prediction performance of each individual model.

 Here, we combine 3 learners (linear and non-linear) and use a ridge regressor
 to combine their outputs together.

 .. note::
    Although we will make new pipelines with the processors which we wrote in
    the previous section for the 3 learners, the final estimator
    :class:`~sklearn.linear_model.RidgeCV()` does not need preprocessing of
    the data as it will be fed with the already preprocessed output from the 3
    learners.

.. GENERATED FROM PYTHON SOURCE LINES 165-171

.. code-block:: default


    from sklearn.linear_model import LassoCV

    lasso_pipeline = make_pipeline(linear_preprocessor, LassoCV())
    lasso_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-93ea3725-0eb3-4399-ac13-59f659d5679a {color: black;background-color: white;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a pre{padding: 0;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a div.sk-toggleable {background-color: white;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a div.sk-estimator:hover {background-color: #d4ebff;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a div.sk-item {z-index: 1;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a div.sk-parallel-item:only-child::after {width: 0;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-93ea3725-0eb3-4399-ac13-59f659d5679a div.sk-text-repr-fallback {display: none;}</style><div id="sk-93ea3725-0eb3-4399-ac13-59f659d5679a" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                                      Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                                       StandardScaler()),
                                                                      (&#x27;simpleimputer&#x27;,
                                                                       SimpleImputer(add_indicator=True))]),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;),
                                                     (&#x27;onehotencoder&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;)])),
                    (&#x27;lassocv&#x27;, LassoCV())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9409e3de-4a2a-46f9-a075-5c3732b398ac" type="checkbox" ><label for="9409e3de-4a2a-46f9-a075-5c3732b398ac" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                                      Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                                       StandardScaler()),
                                                                      (&#x27;simpleimputer&#x27;,
                                                                       SimpleImputer(add_indicator=True))]),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;),
                                                     (&#x27;onehotencoder&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;)])),
                    (&#x27;lassocv&#x27;, LassoCV())])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f0746fec-fcde-4583-b35b-a75f62fc4315" type="checkbox" ><label for="f0746fec-fcde-4583-b35b-a75f62fc4315" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="eef415aa-1020-4258-95f5-92c7d67c53e2" type="checkbox" ><label for="eef415aa-1020-4258-95f5-92c7d67c53e2" class="sk-toggleable__label sk-toggleable__label-arrow">pipeline</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="591c8bbd-6807-4e08-b18f-00fc6bf76712" type="checkbox" ><label for="591c8bbd-6807-4e08-b18f-00fc6bf76712" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4c9c577d-5fa1-451c-9524-3850ccea7a62" type="checkbox" ><label for="4c9c577d-5fa1-451c-9524-3850ccea7a62" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="cae54fcc-2883-4030-bbc9-5b68591c56e1" type="checkbox" ><label for="cae54fcc-2883-4030-bbc9-5b68591c56e1" class="sk-toggleable__label sk-toggleable__label-arrow">onehotencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ce77d3d3-2cb2-47a3-8c6c-1e72819baac2" type="checkbox" ><label for="ce77d3d3-2cb2-47a3-8c6c-1e72819baac2" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d6c0a6c1-4f00-4cce-9db2-2e8047699876" type="checkbox" ><label for="d6c0a6c1-4f00-4cce-9db2-2e8047699876" class="sk-toggleable__label sk-toggleable__label-arrow">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 172-177

.. code-block:: default

    from sklearn.ensemble import RandomForestRegressor

    rf_pipeline = make_pipeline(tree_preprocessor, RandomForestRegressor(random_state=42))
    rf_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 {color: black;background-color: white;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 pre{padding: 0;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 div.sk-toggleable {background-color: white;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 div.sk-item {z-index: 1;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 div.sk-parallel-item:only-child::after {width: 0;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-bd4d790b-958b-4549-b53e-7a18a82503b5 div.sk-text-repr-fallback {display: none;}</style><div id="sk-bd4d790b-958b-4549-b53e-7a18a82503b5" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;)])),
                    (&#x27;randomforestregressor&#x27;,
                     RandomForestRegressor(random_state=42))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2a690fbf-bf23-42cc-9576-524e2affba7b" type="checkbox" ><label for="2a690fbf-bf23-42cc-9576-524e2affba7b" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;)])),
                    (&#x27;randomforestregressor&#x27;,
                     RandomForestRegressor(random_state=42))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="82b64de5-3c9b-407e-ab82-788cc46d3f3c" type="checkbox" ><label for="82b64de5-3c9b-407e-ab82-788cc46d3f3c" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f07f4d46-2150-4afa-bd8b-8362bd1eafb8" type="checkbox" ><label for="f07f4d46-2150-4afa-bd8b-8362bd1eafb8" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="98b16a45-1622-4277-b3b3-510fb7cf83d5" type="checkbox" ><label for="98b16a45-1622-4277-b3b3-510fb7cf83d5" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="463c93c2-5281-4c24-919e-3ced7dedab9c" type="checkbox" ><label for="463c93c2-5281-4c24-919e-3ced7dedab9c" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c363747f-5606-48df-8074-f1cc18c7a95d" type="checkbox" ><label for="c363747f-5606-48df-8074-f1cc18c7a95d" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c53fdf17-e337-4402-a668-b6a24407de58" type="checkbox" ><label for="c53fdf17-e337-4402-a668-b6a24407de58" class="sk-toggleable__label sk-toggleable__label-arrow">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 178-185

.. code-block:: default

    from sklearn.ensemble import HistGradientBoostingRegressor

    gbdt_pipeline = make_pipeline(
        tree_preprocessor, HistGradientBoostingRegressor(random_state=0)
    )
    gbdt_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-106ff329-5064-4d1e-9faf-e810ddc7805a {color: black;background-color: white;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a pre{padding: 0;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a div.sk-toggleable {background-color: white;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a div.sk-estimator:hover {background-color: #d4ebff;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a div.sk-item {z-index: 1;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a div.sk-parallel-item:only-child::after {width: 0;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-106ff329-5064-4d1e-9faf-e810ddc7805a div.sk-text-repr-fallback {display: none;}</style><div id="sk-106ff329-5064-4d1e-9faf-e810ddc7805a" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;)])),
                    (&#x27;histgradientboostingregressor&#x27;,
                     HistGradientBoostingRegressor(random_state=0))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="08d3a417-5dea-4a77-b199-32b65b55ae7c" type="checkbox" ><label for="08d3a417-5dea-4a77-b199-32b65b55ae7c" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;)])),
                    (&#x27;histgradientboostingregressor&#x27;,
                     HistGradientBoostingRegressor(random_state=0))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1a3b732c-3bed-45de-9f42-cead2f64e24a" type="checkbox" ><label for="1a3b732c-3bed-45de-9f42-cead2f64e24a" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="88ccf651-01b2-45f0-861c-bbecf5ba21af" type="checkbox" ><label for="88ccf651-01b2-45f0-861c-bbecf5ba21af" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5e59eb15-b53d-4b20-9376-0bf6c2314000" type="checkbox" ><label for="5e59eb15-b53d-4b20-9376-0bf6c2314000" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d1cc4bbf-1650-4199-b63d-0c9e5dbbf553" type="checkbox" ><label for="d1cc4bbf-1650-4199-b63d-0c9e5dbbf553" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0b58e2f6-7bc3-4090-be96-ea62b450e7f1" type="checkbox" ><label for="0b58e2f6-7bc3-4090-be96-ea62b450e7f1" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d2ba0bad-6c15-4756-b635-5df3d0e76b65" type="checkbox" ><label for="d2ba0bad-6c15-4756-b635-5df3d0e76b65" class="sk-toggleable__label sk-toggleable__label-arrow">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 186-198

.. code-block:: default

    from sklearn.ensemble import StackingRegressor
    from sklearn.linear_model import RidgeCV

    estimators = [
        ("Random Forest", rf_pipeline),
        ("Lasso", lasso_pipeline),
        ("Gradient Boosting", gbdt_pipeline),
    ]

    stacking_regressor = StackingRegressor(estimators=estimators, final_estimator=RidgeCV())
    stacking_regressor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-2ff34972-2079-41cf-9d55-83e2db88e813 {color: black;background-color: white;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 pre{padding: 0;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 div.sk-toggleable {background-color: white;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 div.sk-estimator:hover {background-color: #d4ebff;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 div.sk-item {z-index: 1;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 div.sk-parallel-item:only-child::after {width: 0;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-2ff34972-2079-41cf-9d55-83e2db88e813 div.sk-text-repr-fallback {display: none;}</style><div id="sk-2ff34972-2079-41cf-9d55-83e2db88e813" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>StackingRegressor(estimators=[(&#x27;Random Forest&#x27;,
                                   Pipeline(steps=[(&#x27;columntransformer&#x27;,
                                                    ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                                                     SimpleImputer(add_indicator=True),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose...
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;)])),
                                                   (&#x27;histgradientboostingregressor&#x27;,
                                                    HistGradientBoostingRegressor(random_state=0))]))],
                      final_estimator=RidgeCV())</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="cac5d921-e131-47cd-ab31-f4293c1f088d" type="checkbox" ><label for="cac5d921-e131-47cd-ab31-f4293c1f088d" class="sk-toggleable__label sk-toggleable__label-arrow">StackingRegressor</label><div class="sk-toggleable__content"><pre>StackingRegressor(estimators=[(&#x27;Random Forest&#x27;,
                                   Pipeline(steps=[(&#x27;columntransformer&#x27;,
                                                    ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                                                     SimpleImputer(add_indicator=True),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose...
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;)])),
                                                   (&#x27;histgradientboostingregressor&#x27;,
                                                    HistGradientBoostingRegressor(random_state=0))]))],
                      final_estimator=RidgeCV())</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Random Forest</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b7b2e09d-e168-45f4-a32b-f8bd3f290345" type="checkbox" ><label for="b7b2e09d-e168-45f4-a32b-f8bd3f290345" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="eb9eca37-3d27-4386-a733-5f7d3e33f793" type="checkbox" ><label for="eb9eca37-3d27-4386-a733-5f7d3e33f793" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5628a870-811e-4c0f-835e-f7edb6c0288e" type="checkbox" ><label for="5628a870-811e-4c0f-835e-f7edb6c0288e" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ebcdef97-5712-4eac-bb23-3f278489cbda" type="checkbox" ><label for="ebcdef97-5712-4eac-bb23-3f278489cbda" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8fdf8ca5-c315-4dee-a10a-5b7e4c5d250c" type="checkbox" ><label for="8fdf8ca5-c315-4dee-a10a-5b7e4c5d250c" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="14dcf092-1d12-44ee-b5bf-c86a825e1ecc" type="checkbox" ><label for="14dcf092-1d12-44ee-b5bf-c86a825e1ecc" class="sk-toggleable__label sk-toggleable__label-arrow">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Lasso</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e2399302-fb38-4f47-a941-10b4a220fb1e" type="checkbox" ><label for="e2399302-fb38-4f47-a941-10b4a220fb1e" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ba8bf1dc-4f4c-471a-b5f6-ddbbffdf2e50" type="checkbox" ><label for="ba8bf1dc-4f4c-471a-b5f6-ddbbffdf2e50" class="sk-toggleable__label sk-toggleable__label-arrow">pipeline</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="656ff3d2-2a1d-4536-8aa7-66d3aaf8c334" type="checkbox" ><label for="656ff3d2-2a1d-4536-8aa7-66d3aaf8c334" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="90e1c8e4-16d5-42a4-971d-33e5791f9ae4" type="checkbox" ><label for="90e1c8e4-16d5-42a4-971d-33e5791f9ae4" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d98f9d22-5fda-4a50-98af-855a1aa2e1a2" type="checkbox" ><label for="d98f9d22-5fda-4a50-98af-855a1aa2e1a2" class="sk-toggleable__label sk-toggleable__label-arrow">onehotencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a35d93d4-f709-4bbf-936d-4d79688f8380" type="checkbox" ><label for="a35d93d4-f709-4bbf-936d-4d79688f8380" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7f4fe09a-aa4a-4619-8f49-d82f5b8db360" type="checkbox" ><label for="7f4fe09a-aa4a-4619-8f49-d82f5b8db360" class="sk-toggleable__label sk-toggleable__label-arrow">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Gradient Boosting</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a59b9404-fc50-4926-9728-5b4d83985d85" type="checkbox" ><label for="a59b9404-fc50-4926-9728-5b4d83985d85" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1ef99cdf-bd34-4dc1-b877-d8b7b31f3fa5" type="checkbox" ><label for="1ef99cdf-bd34-4dc1-b877-d8b7b31f3fa5" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1ed670&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a88d2e9a-ab88-47f9-bff3-ef01a36a4b47" type="checkbox" ><label for="a88d2e9a-ab88-47f9-bff3-ef01a36a4b47" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="aea3765a-8963-4fa9-8d8f-0dc2c692af37" type="checkbox" ><label for="aea3765a-8963-4fa9-8d8f-0dc2c692af37" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f92fa1edd90&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5c0c7da8-3f68-481e-87df-fb5891881739" type="checkbox" ><label for="5c0c7da8-3f68-481e-87df-fb5891881739" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="46a15621-998a-4f36-98f6-d2f3e19d2818" type="checkbox" ><label for="46a15621-998a-4f36-98f6-d2f3e19d2818" class="sk-toggleable__label sk-toggleable__label-arrow">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>final_estimator</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9b41e6df-aef9-46a2-9e28-500ef45d80d0" type="checkbox" ><label for="9b41e6df-aef9-46a2-9e28-500ef45d80d0" class="sk-toggleable__label sk-toggleable__label-arrow">RidgeCV</label><div class="sk-toggleable__content"><pre>RidgeCV()</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 199-208

Measure and plot the results
#############################################################################

 Now we can use Ames Housing dataset to make the predictions. We check the
 performance of each individual predictor as well as of the stack of the
 regressors.

 The function ``plot_regression_results`` is used to plot the predicted and
 true targets.

.. GENERATED FROM PYTHON SOURCE LINES 208-273

.. code-block:: default



    import time
    import matplotlib.pyplot as plt
    from sklearn.model_selection import cross_validate, cross_val_predict


    def plot_regression_results(ax, y_true, y_pred, title, scores, elapsed_time):
        """Scatter plot of the predicted vs true targets."""
        ax.plot(
            [y_true.min(), y_true.max()], [y_true.min(), y_true.max()], "--r", linewidth=2
        )
        ax.scatter(y_true, y_pred, alpha=0.2)

        ax.spines["top"].set_visible(False)
        ax.spines["right"].set_visible(False)
        ax.get_xaxis().tick_bottom()
        ax.get_yaxis().tick_left()
        ax.spines["left"].set_position(("outward", 10))
        ax.spines["bottom"].set_position(("outward", 10))
        ax.set_xlim([y_true.min(), y_true.max()])
        ax.set_ylim([y_true.min(), y_true.max()])
        ax.set_xlabel("Measured")
        ax.set_ylabel("Predicted")
        extra = plt.Rectangle(
            (0, 0), 0, 0, fc="w", fill=False, edgecolor="none", linewidth=0
        )
        ax.legend([extra], [scores], loc="upper left")
        title = title + "\n Evaluation in {:.2f} seconds".format(elapsed_time)
        ax.set_title(title)


    fig, axs = plt.subplots(2, 2, figsize=(9, 7))
    axs = np.ravel(axs)

    for ax, (name, est) in zip(
        axs, estimators + [("Stacking Regressor", stacking_regressor)]
    ):
        start_time = time.time()
        score = cross_validate(
            est, X, y, scoring=["r2", "neg_mean_absolute_error"], n_jobs=2, verbose=0
        )
        elapsed_time = time.time() - start_time

        y_pred = cross_val_predict(est, X, y, n_jobs=2, verbose=0)

        plot_regression_results(
            ax,
            y,
            y_pred,
            name,
            (r"$R^2={:.2f} \pm {:.2f}$" + "\n" + r"$MAE={:.2f} \pm {:.2f}$").format(
                np.mean(score["test_r2"]),
                np.std(score["test_r2"]),
                -np.mean(score["test_neg_mean_absolute_error"]),
                np.std(score["test_neg_mean_absolute_error"]),
            ),
            elapsed_time,
        )

    plt.suptitle("Single predictors versus stacked predictors")
    plt.tight_layout()
    plt.subplots_adjust(top=0.9)
    plt.show()




.. image-sg:: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :alt: Single predictors versus stacked predictors, Random Forest  Evaluation in 1.01 seconds, Lasso  Evaluation in 0.19 seconds, Gradient Boosting  Evaluation in 0.48 seconds, Stacking Regressor  Evaluation in 8.38 seconds
   :srcset: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 274-277

The stacked regressor will combine the strengths of the different regressors.
However, we also see that training the stacked regressor is much more
computationally expensive.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  20.683 seconds)


.. _sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/ensemble/plot_stack_predictors.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_stack_predictors.py <plot_stack_predictors.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_stack_predictors.ipynb <plot_stack_predictors.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
