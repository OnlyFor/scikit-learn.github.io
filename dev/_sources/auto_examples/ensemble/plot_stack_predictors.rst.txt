
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/ensemble/plot_stack_predictors.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_ensemble_plot_stack_predictors.py:


=================================
Combine predictors using stacking
=================================

.. currentmodule:: sklearn

Stacking refers to a method to blend estimators. In this strategy, some
estimators are individually fitted on some training data while a final
estimator is trained using the stacked predictions of these base estimators.

In this example, we illustrate the use case in which different regressors are
stacked together and a final linear penalized regressor is used to output the
prediction. We compare the performance of each individual regressor with the
stacking strategy. Stacking slightly improves the overall performance.

.. GENERATED FROM PYTHON SOURCE LINES 18-29

.. code-block:: default


    # Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>
    #          Maria Telenczuk    <https://github.com/maikia>
    # License: BSD 3 clause

    print(__doc__)

    from sklearn import set_config

    set_config(display="diagram")








.. GENERATED FROM PYTHON SOURCE LINES 30-46

Download the dataset
#############################################################################

 We will use `Ames Housing`_ dataset which was first compiled by Dean De Cock
 and became better known after it was used in Kaggle challenge. It is a set
 of 1460 residential homes in Ames, Iowa, each described by 80 features. We
 will use it to predict the final logarithmic price of the houses. In this
 example we will use only 20 most interesting features chosen using
 GradientBoostingRegressor() and limit number of entries (here we won't go
 into the details on how to select the most interesting features).

 The Ames housing dataset is not shipped with scikit-learn and therefore we
 will fetch it from `OpenML`_.

 .. _`Ames Housing`: http://jse.amstat.org/v19n3/decock.pdf
 .. _`OpenML`: https://www.openml.org/d/42165

.. GENERATED FROM PYTHON SOURCE LINES 46-92

.. code-block:: default


    import numpy as np

    from sklearn.datasets import fetch_openml
    from sklearn.utils import shuffle


    def load_ames_housing():
        df = fetch_openml(name="house_prices", as_frame=True)
        X = df.data
        y = df.target

        features = [
            "YrSold",
            "HeatingQC",
            "Street",
            "YearRemodAdd",
            "Heating",
            "MasVnrType",
            "BsmtUnfSF",
            "Foundation",
            "MasVnrArea",
            "MSSubClass",
            "ExterQual",
            "Condition2",
            "GarageCars",
            "GarageType",
            "OverallQual",
            "TotalBsmtSF",
            "BsmtFinSF1",
            "HouseStyle",
            "MiscFeature",
            "MoSold",
        ]

        X = X[features]
        X, y = shuffle(X, y, random_state=0)

        X = X[:600]
        y = y[:600]
        return X, np.log(y)


    X, y = load_ames_housing()









.. GENERATED FROM PYTHON SOURCE LINES 93-99

Make pipeline to preprocess the data
#############################################################################

 Before we can use Ames dataset we still need to do some preprocessing.
 First, we will select the categorical and numerical columns of the dataset to
 construct the first step of the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 99-106

.. code-block:: default


    from sklearn.compose import make_column_selector

    cat_selector = make_column_selector(dtype_include=object)
    num_selector = make_column_selector(dtype_include=np.number)
    cat_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['HeatingQC', 'Street', 'Heating', 'MasVnrType', 'Foundation', 'ExterQual', 'Condition2', 'GarageType', 'HouseStyle', 'MiscFeature']



.. GENERATED FROM PYTHON SOURCE LINES 107-109

.. code-block:: default

    num_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['YrSold', 'YearRemodAdd', 'BsmtUnfSF', 'MasVnrArea', 'MSSubClass', 'GarageCars', 'OverallQual', 'TotalBsmtSF', 'BsmtFinSF1', 'MoSold']



.. GENERATED FROM PYTHON SOURCE LINES 110-119

Then, we will need to design preprocessing pipelines which depends on the
ending regressor. If the ending regressor is a linear model, one needs to
one-hot encode the categories. If the ending regressor is a tree-based model
an ordinal encoder will be sufficient. Besides, numerical values need to be
standardized for a linear model while the raw numerical data can be treated
as is by a tree-based model. However, both models need an imputer to
handle missing values.

We will first design the pipeline required for the tree-based models.

.. GENERATED FROM PYTHON SOURCE LINES 119-135

.. code-block:: default


    from sklearn.compose import make_column_transformer
    from sklearn.impute import SimpleImputer
    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import OrdinalEncoder

    cat_tree_processor = OrdinalEncoder(
        handle_unknown="use_encoded_value", unknown_value=-1
    )
    num_tree_processor = SimpleImputer(strategy="mean", add_indicator=True)

    tree_preprocessor = make_column_transformer(
        (num_tree_processor, num_selector), (cat_tree_processor, cat_selector)
    )
    tree_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e {color: black;background-color: white;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e pre{padding: 0;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e div.sk-toggleable {background-color: white;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e div.sk-estimator:hover {background-color: #d4ebff;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e div.sk-item {z-index: 1;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e div.sk-parallel-item:only-child::after {width: 0;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e div.sk-container {display: inline-block;position: relative;}</style><div id="sk-777f0ebb-2331-40fb-9a98-3d202fd24c6e" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e7c24354-c9ec-4279-96c6-ac8f8df90471" type="checkbox" ><label class="sk-toggleable__label" for="e7c24354-c9ec-4279-96c6-ac8f8df90471">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f61853c5af0>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f61673756d0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8f0cc63e-11bc-4a4c-b45a-887d1b916ce2" type="checkbox" ><label class="sk-toggleable__label" for="8f0cc63e-11bc-4a4c-b45a-887d1b916ce2">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f61853c5af0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ee4d8e34-cb4b-4235-943a-4d6bb0077c12" type="checkbox" ><label class="sk-toggleable__label" for="ee4d8e34-cb4b-4235-943a-4d6bb0077c12">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="95016fcb-ed41-4d8a-9aa2-f4175dfbd8fe" type="checkbox" ><label class="sk-toggleable__label" for="95016fcb-ed41-4d8a-9aa2-f4175dfbd8fe">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f61673756d0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="707e4b47-7917-4f56-8979-3f07390e73ce" type="checkbox" ><label class="sk-toggleable__label" for="707e4b47-7917-4f56-8979-3f07390e73ce">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 136-138

Then, we will now define the preprocessor used when the ending regressor
is a linear model.

.. GENERATED FROM PYTHON SOURCE LINES 138-152

.. code-block:: default


    from sklearn.preprocessing import OneHotEncoder
    from sklearn.preprocessing import StandardScaler

    cat_linear_processor = OneHotEncoder(handle_unknown="ignore")
    num_linear_processor = make_pipeline(
        StandardScaler(), SimpleImputer(strategy="mean", add_indicator=True)
    )

    linear_preprocessor = make_column_transformer(
        (num_linear_processor, num_selector), (cat_linear_processor, cat_selector)
    )
    linear_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-aa229798-2701-4745-b0a3-5d5e04a95309 {color: black;background-color: white;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 pre{padding: 0;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 div.sk-toggleable {background-color: white;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 div.sk-estimator:hover {background-color: #d4ebff;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 div.sk-item {z-index: 1;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 div.sk-parallel-item:only-child::after {width: 0;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-aa229798-2701-4745-b0a3-5d5e04a95309 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-aa229798-2701-4745-b0a3-5d5e04a95309" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="de9b8896-2a89-4983-9ec9-99c652a0499e" type="checkbox" ><label class="sk-toggleable__label" for="de9b8896-2a89-4983-9ec9-99c652a0499e">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('pipeline',
                                     Pipeline(steps=[('standardscaler',
                                                      StandardScaler()),
                                                     ('simpleimputer',
                                                      SimpleImputer(add_indicator=True))]),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f61853c5af0>),
                                    ('onehotencoder',
                                     OneHotEncoder(handle_unknown='ignore'),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f61673756d0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="08a9088c-b951-4dcf-a015-520dc545846e" type="checkbox" ><label class="sk-toggleable__label" for="08a9088c-b951-4dcf-a015-520dc545846e">pipeline</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f61853c5af0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ff3c8066-39f6-47c4-aa53-103ef73c79d9" type="checkbox" ><label class="sk-toggleable__label" for="ff3c8066-39f6-47c4-aa53-103ef73c79d9">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4dedca9a-ff0c-4fd5-8903-020d7e4d73b4" type="checkbox" ><label class="sk-toggleable__label" for="4dedca9a-ff0c-4fd5-8903-020d7e4d73b4">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7df83df3-51a3-43df-a93d-d36de10aca07" type="checkbox" ><label class="sk-toggleable__label" for="7df83df3-51a3-43df-a93d-d36de10aca07">onehotencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f61673756d0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3c1611f6-b5a6-490a-baf5-a3c5baff62af" type="checkbox" ><label class="sk-toggleable__label" for="3c1611f6-b5a6-490a-baf5-a3c5baff62af">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 153-171

Stack of predictors on a single data set
#############################################################################

 It is sometimes tedious to find the model which will best perform on a given
 dataset. Stacking provide an alternative by combining the outputs of several
 learners, without the need to choose a model specifically. The performance of
 stacking is usually close to the best model and sometimes it can outperform
 the prediction performance of each individual model.

 Here, we combine 3 learners (linear and non-linear) and use a ridge regressor
 to combine their outputs together.

 .. note::
    Although we will make new pipelines with the processors which we wrote in
    the previous section for the 3 learners, the final estimator
    :class:`~sklearn.linear_model.RidgeCV()` does not need preprocessing of
    the data as it will be fed with the already preprocessed output from the 3
    learners.

.. GENERATED FROM PYTHON SOURCE LINES 171-177

.. code-block:: default


    from sklearn.linear_model import LassoCV

    lasso_pipeline = make_pipeline(linear_preprocessor, LassoCV())
    lasso_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-33133198-5b8f-4fe1-a5f1-28241538469b {color: black;background-color: white;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b pre{padding: 0;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b div.sk-toggleable {background-color: white;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b div.sk-estimator:hover {background-color: #d4ebff;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b div.sk-item {z-index: 1;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b div.sk-parallel-item:only-child::after {width: 0;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-33133198-5b8f-4fe1-a5f1-28241538469b div.sk-container {display: inline-block;position: relative;}</style><div id="sk-33133198-5b8f-4fe1-a5f1-28241538469b" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6f51b71d-af6d-4ff6-a22a-4745d9d23090" type="checkbox" ><label class="sk-toggleable__label" for="6f51b71d-af6d-4ff6-a22a-4745d9d23090">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columntransformer',
                     ColumnTransformer(transformers=[('pipeline',
                                                      Pipeline(steps=[('standardscaler',
                                                                       StandardScaler()),
                                                                      ('simpleimputer',
                                                                       SimpleImputer(add_indicator=True))]),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f61853c5af0>),
                                                     ('onehotencoder',
                                                      OneHotEncoder(handle_unknown='ignore'),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f61673756d0>)])),
                    ('lassocv', LassoCV())])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="74e7ded1-52e4-4c60-afdf-7e7e06d7ec98" type="checkbox" ><label class="sk-toggleable__label" for="74e7ded1-52e4-4c60-afdf-7e7e06d7ec98">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('pipeline',
                                     Pipeline(steps=[('standardscaler',
                                                      StandardScaler()),
                                                     ('simpleimputer',
                                                      SimpleImputer(add_indicator=True))]),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f61853c5af0>),
                                    ('onehotencoder',
                                     OneHotEncoder(handle_unknown='ignore'),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f61673756d0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="178adec0-90d8-477b-b0cb-734c79052129" type="checkbox" ><label class="sk-toggleable__label" for="178adec0-90d8-477b-b0cb-734c79052129">pipeline</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f61853c5af0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="72ba8fb4-e02f-4029-91ad-6e591a5b2c25" type="checkbox" ><label class="sk-toggleable__label" for="72ba8fb4-e02f-4029-91ad-6e591a5b2c25">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="995cf697-4dbe-4ded-9583-f367d7ebf019" type="checkbox" ><label class="sk-toggleable__label" for="995cf697-4dbe-4ded-9583-f367d7ebf019">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="77893322-a027-460d-8369-e5e46120340f" type="checkbox" ><label class="sk-toggleable__label" for="77893322-a027-460d-8369-e5e46120340f">onehotencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f61673756d0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f3ac809d-6ddc-46a3-81a8-3cdf30247a31" type="checkbox" ><label class="sk-toggleable__label" for="f3ac809d-6ddc-46a3-81a8-3cdf30247a31">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="bedd589d-49be-4a0e-bc1b-1f0d729e7741" type="checkbox" ><label class="sk-toggleable__label" for="bedd589d-49be-4a0e-bc1b-1f0d729e7741">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 178-183

.. code-block:: default

    from sklearn.ensemble import RandomForestRegressor

    rf_pipeline = make_pipeline(tree_preprocessor, RandomForestRegressor(random_state=42))
    rf_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 {color: black;background-color: white;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 pre{padding: 0;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 div.sk-toggleable {background-color: white;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 div.sk-item {z-index: 1;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 div.sk-parallel-item:only-child::after {width: 0;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-082c1691-9ee3-4c14-847b-9e0eec118ad7 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-082c1691-9ee3-4c14-847b-9e0eec118ad7" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2e367c7b-26ba-4792-932d-5465efe6a76a" type="checkbox" ><label class="sk-toggleable__label" for="2e367c7b-26ba-4792-932d-5465efe6a76a">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columntransformer',
                     ColumnTransformer(transformers=[('simpleimputer',
                                                      SimpleImputer(add_indicator=True),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f61853c5af0>),
                                                     ('ordinalencoder',
                                                      OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                     unknown_value=-1),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f61673756d0>)])),
                    ('randomforestregressor',
                     RandomForestRegressor(random_state=42))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="78f4fc35-257c-41b0-a38d-41679de53889" type="checkbox" ><label class="sk-toggleable__label" for="78f4fc35-257c-41b0-a38d-41679de53889">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f61853c5af0>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f61673756d0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="44aa5f18-d7f9-4c29-bd0c-9a8a6279e26b" type="checkbox" ><label class="sk-toggleable__label" for="44aa5f18-d7f9-4c29-bd0c-9a8a6279e26b">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f61853c5af0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="008b7bf0-c1d0-491f-9641-4b3c12983412" type="checkbox" ><label class="sk-toggleable__label" for="008b7bf0-c1d0-491f-9641-4b3c12983412">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3a259c9b-e68d-4ebc-9bf8-e548092c4e2b" type="checkbox" ><label class="sk-toggleable__label" for="3a259c9b-e68d-4ebc-9bf8-e548092c4e2b">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f61673756d0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7b47c240-1ea7-462c-b4c0-dcddfc6d7c43" type="checkbox" ><label class="sk-toggleable__label" for="7b47c240-1ea7-462c-b4c0-dcddfc6d7c43">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="bcf7e21e-449b-417b-bf49-e5c78436d9f5" type="checkbox" ><label class="sk-toggleable__label" for="bcf7e21e-449b-417b-bf49-e5c78436d9f5">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 184-191

.. code-block:: default

    from sklearn.ensemble import HistGradientBoostingRegressor

    gbdt_pipeline = make_pipeline(
        tree_preprocessor, HistGradientBoostingRegressor(random_state=0)
    )
    gbdt_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-20561ad0-631b-4f44-9482-8841bef8cd51 {color: black;background-color: white;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 pre{padding: 0;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 div.sk-toggleable {background-color: white;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 div.sk-estimator:hover {background-color: #d4ebff;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 div.sk-item {z-index: 1;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 div.sk-parallel-item:only-child::after {width: 0;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-20561ad0-631b-4f44-9482-8841bef8cd51 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-20561ad0-631b-4f44-9482-8841bef8cd51" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="05c23af5-9500-442f-a018-baa202ba3f0f" type="checkbox" ><label class="sk-toggleable__label" for="05c23af5-9500-442f-a018-baa202ba3f0f">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columntransformer',
                     ColumnTransformer(transformers=[('simpleimputer',
                                                      SimpleImputer(add_indicator=True),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f61853c5af0>),
                                                     ('ordinalencoder',
                                                      OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                     unknown_value=-1),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7f61673756d0>)])),
                    ('histgradientboostingregressor',
                     HistGradientBoostingRegressor(random_state=0))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e6ce9116-8403-49a2-a115-01d9ef491ad5" type="checkbox" ><label class="sk-toggleable__label" for="e6ce9116-8403-49a2-a115-01d9ef491ad5">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f61853c5af0>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f61673756d0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d5bbeea4-2aee-4ff9-bfa4-ed542b2f8e61" type="checkbox" ><label class="sk-toggleable__label" for="d5bbeea4-2aee-4ff9-bfa4-ed542b2f8e61">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f61853c5af0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f2be0621-ec7e-433a-a170-9d11a568f68e" type="checkbox" ><label class="sk-toggleable__label" for="f2be0621-ec7e-433a-a170-9d11a568f68e">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="359e70d4-e7dc-451f-bc48-9e1f5edba05d" type="checkbox" ><label class="sk-toggleable__label" for="359e70d4-e7dc-451f-bc48-9e1f5edba05d">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f61673756d0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="594e00f7-85e5-439f-801e-b815b777f170" type="checkbox" ><label class="sk-toggleable__label" for="594e00f7-85e5-439f-801e-b815b777f170">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0018bd86-fff8-4abf-abfa-656b54c0421c" type="checkbox" ><label class="sk-toggleable__label" for="0018bd86-fff8-4abf-abfa-656b54c0421c">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 192-204

.. code-block:: default

    from sklearn.ensemble import StackingRegressor
    from sklearn.linear_model import RidgeCV

    estimators = [
        ("Random Forest", rf_pipeline),
        ("Lasso", lasso_pipeline),
        ("Gradient Boosting", gbdt_pipeline),
    ]

    stacking_regressor = StackingRegressor(estimators=estimators, final_estimator=RidgeCV())
    stacking_regressor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f {color: black;background-color: white;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f pre{padding: 0;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f div.sk-toggleable {background-color: white;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f div.sk-estimator:hover {background-color: #d4ebff;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f div.sk-item {z-index: 1;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f div.sk-parallel-item:only-child::after {width: 0;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-4309a9c6-b7ad-4e6f-9304-439e5931338f div.sk-container {display: inline-block;position: relative;}</style><div id="sk-4309a9c6-b7ad-4e6f-9304-439e5931338f" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="01ae0b6e-b20b-4a55-a2df-6fd71e275508" type="checkbox" ><label class="sk-toggleable__label" for="01ae0b6e-b20b-4a55-a2df-6fd71e275508">StackingRegressor</label><div class="sk-toggleable__content"><pre>StackingRegressor(estimators=[('Random Forest',
                                   Pipeline(steps=[('columntransformer',
                                                    ColumnTransformer(transformers=[('simpleimputer',
                                                                                     SimpleImputer(add_indicator=True),
                                                                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f61853c5af0>),
                                                                                    ('ordinalencoder',
                                                                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                                                    unknown_value=-1),
                                                                                     <sklearn.compose...
                                                                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f61853c5af0>),
                                                                                    ('ordinalencoder',
                                                                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                                                    unknown_value=-1),
                                                                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f61673756d0>)])),
                                                   ('histgradientboostingregressor',
                                                    HistGradientBoostingRegressor(random_state=0))]))],
                      final_estimator=RidgeCV(alphas=array([ 0.1,  1. , 10. ])))</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Random Forest</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f5370829-e753-4054-931f-15696ffc849f" type="checkbox" ><label class="sk-toggleable__label" for="f5370829-e753-4054-931f-15696ffc849f">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f61853c5af0>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f61673756d0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c6455558-8969-4187-94fb-6dfbf103c235" type="checkbox" ><label class="sk-toggleable__label" for="c6455558-8969-4187-94fb-6dfbf103c235">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f61853c5af0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ad7aedd7-fe8a-4432-a330-42260feb7e86" type="checkbox" ><label class="sk-toggleable__label" for="ad7aedd7-fe8a-4432-a330-42260feb7e86">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b757fda3-b55b-444f-9801-580b97d6f113" type="checkbox" ><label class="sk-toggleable__label" for="b757fda3-b55b-444f-9801-580b97d6f113">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f61673756d0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="498c59ca-073a-44ac-8d1f-8fac13d28825" type="checkbox" ><label class="sk-toggleable__label" for="498c59ca-073a-44ac-8d1f-8fac13d28825">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3ee822b9-7143-45fa-bb00-e61cbaae3b17" type="checkbox" ><label class="sk-toggleable__label" for="3ee822b9-7143-45fa-bb00-e61cbaae3b17">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Lasso</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="70ce5d4d-fc5c-4c0b-9e0c-b54caa10c70c" type="checkbox" ><label class="sk-toggleable__label" for="70ce5d4d-fc5c-4c0b-9e0c-b54caa10c70c">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('pipeline',
                                     Pipeline(steps=[('standardscaler',
                                                      StandardScaler()),
                                                     ('simpleimputer',
                                                      SimpleImputer(add_indicator=True))]),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f61853c5af0>),
                                    ('onehotencoder',
                                     OneHotEncoder(handle_unknown='ignore'),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f61673756d0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a3450ca3-633f-4a06-ab64-6395f00a7e10" type="checkbox" ><label class="sk-toggleable__label" for="a3450ca3-633f-4a06-ab64-6395f00a7e10">pipeline</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f61853c5af0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7619ae94-f044-490d-8c4c-c81955f9a063" type="checkbox" ><label class="sk-toggleable__label" for="7619ae94-f044-490d-8c4c-c81955f9a063">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="361d8f3e-36b7-46e9-b37c-9fc3aeff59e9" type="checkbox" ><label class="sk-toggleable__label" for="361d8f3e-36b7-46e9-b37c-9fc3aeff59e9">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2c0bb075-26c2-4382-b01b-4fdeae0cb50d" type="checkbox" ><label class="sk-toggleable__label" for="2c0bb075-26c2-4382-b01b-4fdeae0cb50d">onehotencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f61673756d0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="430d17db-ef83-4e6b-a313-fe9432caee5e" type="checkbox" ><label class="sk-toggleable__label" for="430d17db-ef83-4e6b-a313-fe9432caee5e">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f2ff87ac-0849-4b8e-92a4-b495502490c3" type="checkbox" ><label class="sk-toggleable__label" for="f2ff87ac-0849-4b8e-92a4-b495502490c3">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Gradient Boosting</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="22509899-8d3d-4221-a75c-d732b28fe046" type="checkbox" ><label class="sk-toggleable__label" for="22509899-8d3d-4221-a75c-d732b28fe046">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f61853c5af0>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7f61673756d0>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9549d1c1-789f-4271-b54b-81e10b834ac4" type="checkbox" ><label class="sk-toggleable__label" for="9549d1c1-789f-4271-b54b-81e10b834ac4">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f61853c5af0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="20038da4-7672-4538-bf2c-f21573cf5ef8" type="checkbox" ><label class="sk-toggleable__label" for="20038da4-7672-4538-bf2c-f21573cf5ef8">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="bc1cf048-69cc-4eae-af23-0175bed4c652" type="checkbox" ><label class="sk-toggleable__label" for="bc1cf048-69cc-4eae-af23-0175bed4c652">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7f61673756d0></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="54081d0c-8640-4d4b-8ab5-9b99bab82fe4" type="checkbox" ><label class="sk-toggleable__label" for="54081d0c-8640-4d4b-8ab5-9b99bab82fe4">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7d475d2f-7f53-4c4d-9cfa-a393a7d772cc" type="checkbox" ><label class="sk-toggleable__label" for="7d475d2f-7f53-4c4d-9cfa-a393a7d772cc">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>final_estimator</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f3f955fb-e4e7-4d72-a1c8-13291652decb" type="checkbox" ><label class="sk-toggleable__label" for="f3f955fb-e4e7-4d72-a1c8-13291652decb">RidgeCV</label><div class="sk-toggleable__content"><pre>RidgeCV(alphas=array([ 0.1,  1. , 10. ]))</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 205-214

Measure and plot the results
#############################################################################

 Now we can use Ames Housing dataset to make the predictions. We check the
 performance of each individual predictor as well as of the stack of the
 regressors.

 The function ``plot_regression_results`` is used to plot the predicted and
 true targets.

.. GENERATED FROM PYTHON SOURCE LINES 214-279

.. code-block:: default



    import time
    import matplotlib.pyplot as plt
    from sklearn.model_selection import cross_validate, cross_val_predict


    def plot_regression_results(ax, y_true, y_pred, title, scores, elapsed_time):
        """Scatter plot of the predicted vs true targets."""
        ax.plot(
            [y_true.min(), y_true.max()], [y_true.min(), y_true.max()], "--r", linewidth=2
        )
        ax.scatter(y_true, y_pred, alpha=0.2)

        ax.spines["top"].set_visible(False)
        ax.spines["right"].set_visible(False)
        ax.get_xaxis().tick_bottom()
        ax.get_yaxis().tick_left()
        ax.spines["left"].set_position(("outward", 10))
        ax.spines["bottom"].set_position(("outward", 10))
        ax.set_xlim([y_true.min(), y_true.max()])
        ax.set_ylim([y_true.min(), y_true.max()])
        ax.set_xlabel("Measured")
        ax.set_ylabel("Predicted")
        extra = plt.Rectangle(
            (0, 0), 0, 0, fc="w", fill=False, edgecolor="none", linewidth=0
        )
        ax.legend([extra], [scores], loc="upper left")
        title = title + "\n Evaluation in {:.2f} seconds".format(elapsed_time)
        ax.set_title(title)


    fig, axs = plt.subplots(2, 2, figsize=(9, 7))
    axs = np.ravel(axs)

    for ax, (name, est) in zip(
        axs, estimators + [("Stacking Regressor", stacking_regressor)]
    ):
        start_time = time.time()
        score = cross_validate(
            est, X, y, scoring=["r2", "neg_mean_absolute_error"], n_jobs=-1, verbose=0
        )
        elapsed_time = time.time() - start_time

        y_pred = cross_val_predict(est, X, y, n_jobs=-1, verbose=0)

        plot_regression_results(
            ax,
            y,
            y_pred,
            name,
            (r"$R^2={:.2f} \pm {:.2f}$" + "\n" + r"$MAE={:.2f} \pm {:.2f}$").format(
                np.mean(score["test_r2"]),
                np.std(score["test_r2"]),
                -np.mean(score["test_neg_mean_absolute_error"]),
                np.std(score["test_neg_mean_absolute_error"]),
            ),
            elapsed_time,
        )

    plt.suptitle("Single predictors versus stacked predictors")
    plt.tight_layout()
    plt.subplots_adjust(top=0.9)
    plt.show()




.. image-sg:: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :alt: Single predictors versus stacked predictors, Random Forest  Evaluation in 0.93 seconds, Lasso  Evaluation in 0.41 seconds, Gradient Boosting  Evaluation in 0.57 seconds, Stacking Regressor  Evaluation in 10.48 seconds
   :srcset: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 280-283

The stacked regressor will combine the strengths of the different regressors.
However, we also see that training the stacked regressor is much more
computationally expensive.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  25.747 seconds)


.. _sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/ensemble/plot_stack_predictors.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_stack_predictors.py <plot_stack_predictors.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_stack_predictors.ipynb <plot_stack_predictors.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
