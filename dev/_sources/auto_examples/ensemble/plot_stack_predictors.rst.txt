
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/ensemble/plot_stack_predictors.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_ensemble_plot_stack_predictors.py:


=================================
Combine predictors using stacking
=================================

.. currentmodule:: sklearn

Stacking refers to a method to blend estimators. In this strategy, some
estimators are individually fitted on some training data while a final
estimator is trained using the stacked predictions of these base estimators.

In this example, we illustrate the use case in which different regressors are
stacked together and a final linear penalized regressor is used to output the
prediction. We compare the performance of each individual regressor with the
stacking strategy. Stacking slightly improves the overall performance.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

.. code-block:: default


    # Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>
    #          Maria Telenczuk    <https://github.com/maikia>
    # License: BSD 3 clause








.. GENERATED FROM PYTHON SOURCE LINES 24-40

Download the dataset
#############################################################################

 We will use `Ames Housing`_ dataset which was first compiled by Dean De Cock
 and became better known after it was used in Kaggle challenge. It is a set
 of 1460 residential homes in Ames, Iowa, each described by 80 features. We
 will use it to predict the final logarithmic price of the houses. In this
 example we will use only 20 most interesting features chosen using
 GradientBoostingRegressor() and limit number of entries (here we won't go
 into the details on how to select the most interesting features).

 The Ames housing dataset is not shipped with scikit-learn and therefore we
 will fetch it from `OpenML`_.

 .. _`Ames Housing`: http://jse.amstat.org/v19n3/decock.pdf
 .. _`OpenML`: https://www.openml.org/d/42165

.. GENERATED FROM PYTHON SOURCE LINES 40-86

.. code-block:: default


    import numpy as np

    from sklearn.datasets import fetch_openml
    from sklearn.utils import shuffle


    def load_ames_housing():
        df = fetch_openml(name="house_prices", as_frame=True)
        X = df.data
        y = df.target

        features = [
            "YrSold",
            "HeatingQC",
            "Street",
            "YearRemodAdd",
            "Heating",
            "MasVnrType",
            "BsmtUnfSF",
            "Foundation",
            "MasVnrArea",
            "MSSubClass",
            "ExterQual",
            "Condition2",
            "GarageCars",
            "GarageType",
            "OverallQual",
            "TotalBsmtSF",
            "BsmtFinSF1",
            "HouseStyle",
            "MiscFeature",
            "MoSold",
        ]

        X = X[features]
        X, y = shuffle(X, y, random_state=0)

        X = X[:600]
        y = y[:600]
        return X, np.log(y)


    X, y = load_ames_housing()









.. GENERATED FROM PYTHON SOURCE LINES 87-93

Make pipeline to preprocess the data
#############################################################################

 Before we can use Ames dataset we still need to do some preprocessing.
 First, we will select the categorical and numerical columns of the dataset to
 construct the first step of the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 93-100

.. code-block:: default


    from sklearn.compose import make_column_selector

    cat_selector = make_column_selector(dtype_include=object)
    num_selector = make_column_selector(dtype_include=np.number)
    cat_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['HeatingQC', 'Street', 'Heating', 'MasVnrType', 'Foundation', 'ExterQual', 'Condition2', 'GarageType', 'HouseStyle', 'MiscFeature']



.. GENERATED FROM PYTHON SOURCE LINES 101-103

.. code-block:: default

    num_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['YrSold', 'YearRemodAdd', 'BsmtUnfSF', 'MasVnrArea', 'MSSubClass', 'GarageCars', 'OverallQual', 'TotalBsmtSF', 'BsmtFinSF1', 'MoSold']



.. GENERATED FROM PYTHON SOURCE LINES 104-113

Then, we will need to design preprocessing pipelines which depends on the
ending regressor. If the ending regressor is a linear model, one needs to
one-hot encode the categories. If the ending regressor is a tree-based model
an ordinal encoder will be sufficient. Besides, numerical values need to be
standardized for a linear model while the raw numerical data can be treated
as is by a tree-based model. However, both models need an imputer to
handle missing values.

We will first design the pipeline required for the tree-based models.

.. GENERATED FROM PYTHON SOURCE LINES 113-129

.. code-block:: default


    from sklearn.compose import make_column_transformer
    from sklearn.impute import SimpleImputer
    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import OrdinalEncoder

    cat_tree_processor = OrdinalEncoder(
        handle_unknown="use_encoded_value", unknown_value=-1
    )
    num_tree_processor = SimpleImputer(strategy="mean", add_indicator=True)

    tree_preprocessor = make_column_transformer(
        (num_tree_processor, num_selector), (cat_tree_processor, cat_selector)
    )
    tree_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 {color: black;background-color: white;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 pre{padding: 0;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 div.sk-toggleable {background-color: white;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 div.sk-estimator:hover {background-color: #d4ebff;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 div.sk-item {z-index: 1;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 div.sk-parallel-item:only-child::after {width: 0;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485 div.sk-text-repr-fallback {display: none;}</style><div id="sk-7c58fd1f-b536-4e27-8ac5-ddd2ddf38485" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;)])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5d19cd6a-6a1a-42a4-bd2c-eb545ebcdaf6" type="checkbox" ><label for="5d19cd6a-6a1a-42a4-bd2c-eb545ebcdaf6" class="sk-toggleable__label sk-toggleable__label-arrow">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9fbf88b3-bf7a-4a6a-9979-2609bcd9acfc" type="checkbox" ><label for="9fbf88b3-bf7a-4a6a-9979-2609bcd9acfc" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4a852e65-0121-4db3-9afe-d0b08b7310e0" type="checkbox" ><label for="4a852e65-0121-4db3-9afe-d0b08b7310e0" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="87d04cc9-1f60-4f16-94d7-5a98c8d535ea" type="checkbox" ><label for="87d04cc9-1f60-4f16-94d7-5a98c8d535ea" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f896c8ad-2f91-47aa-ac4c-840700ded680" type="checkbox" ><label for="f896c8ad-2f91-47aa-ac4c-840700ded680" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 130-132

Then, we will now define the preprocessor used when the ending regressor
is a linear model.

.. GENERATED FROM PYTHON SOURCE LINES 132-146

.. code-block:: default


    from sklearn.preprocessing import OneHotEncoder
    from sklearn.preprocessing import StandardScaler

    cat_linear_processor = OneHotEncoder(handle_unknown="ignore")
    num_linear_processor = make_pipeline(
        StandardScaler(), SimpleImputer(strategy="mean", add_indicator=True)
    )

    linear_preprocessor = make_column_transformer(
        (num_linear_processor, num_selector), (cat_linear_processor, cat_selector)
    )
    linear_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 {color: black;background-color: white;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 pre{padding: 0;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 div.sk-toggleable {background-color: white;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 div.sk-estimator:hover {background-color: #d4ebff;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 div.sk-item {z-index: 1;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 div.sk-parallel-item:only-child::after {width: 0;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-4345aacc-1682-465e-b9bb-ff3d348dff87 div.sk-text-repr-fallback {display: none;}</style><div id="sk-4345aacc-1682-465e-b9bb-ff3d348dff87" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;)])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5f54537f-7841-4ffb-819e-36ed00590890" type="checkbox" ><label for="5f54537f-7841-4ffb-819e-36ed00590890" class="sk-toggleable__label sk-toggleable__label-arrow">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="203db545-2820-4d7f-9366-38a9b1387281" type="checkbox" ><label for="203db545-2820-4d7f-9366-38a9b1387281" class="sk-toggleable__label sk-toggleable__label-arrow">pipeline</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5bda6fa8-daf9-415a-8c15-61e707886c08" type="checkbox" ><label for="5bda6fa8-daf9-415a-8c15-61e707886c08" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9c279073-1295-499e-af8f-4708e9a82321" type="checkbox" ><label for="9c279073-1295-499e-af8f-4708e9a82321" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="26533f20-3e08-48e7-9935-7abc58e255f3" type="checkbox" ><label for="26533f20-3e08-48e7-9935-7abc58e255f3" class="sk-toggleable__label sk-toggleable__label-arrow">onehotencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="210644ae-d780-47d2-a96e-ae2d98a94729" type="checkbox" ><label for="210644ae-d780-47d2-a96e-ae2d98a94729" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 147-165

Stack of predictors on a single data set
#############################################################################

 It is sometimes tedious to find the model which will best perform on a given
 dataset. Stacking provide an alternative by combining the outputs of several
 learners, without the need to choose a model specifically. The performance of
 stacking is usually close to the best model and sometimes it can outperform
 the prediction performance of each individual model.

 Here, we combine 3 learners (linear and non-linear) and use a ridge regressor
 to combine their outputs together.

 .. note::
    Although we will make new pipelines with the processors which we wrote in
    the previous section for the 3 learners, the final estimator
    :class:`~sklearn.linear_model.RidgeCV()` does not need preprocessing of
    the data as it will be fed with the already preprocessed output from the 3
    learners.

.. GENERATED FROM PYTHON SOURCE LINES 165-171

.. code-block:: default


    from sklearn.linear_model import LassoCV

    lasso_pipeline = make_pipeline(linear_preprocessor, LassoCV())
    lasso_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c {color: black;background-color: white;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c pre{padding: 0;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c div.sk-toggleable {background-color: white;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c div.sk-estimator:hover {background-color: #d4ebff;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c div.sk-item {z-index: 1;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c div.sk-parallel-item:only-child::after {width: 0;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c div.sk-text-repr-fallback {display: none;}</style><div id="sk-1346a7cf-32a3-4387-b54e-c4f38ee4b56c" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                                      Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                                       StandardScaler()),
                                                                      (&#x27;simpleimputer&#x27;,
                                                                       SimpleImputer(add_indicator=True))]),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;),
                                                     (&#x27;onehotencoder&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;)])),
                    (&#x27;lassocv&#x27;, LassoCV())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ddb88403-5b95-4889-81f1-3ad08c9e99bc" type="checkbox" ><label for="ddb88403-5b95-4889-81f1-3ad08c9e99bc" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                                      Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                                       StandardScaler()),
                                                                      (&#x27;simpleimputer&#x27;,
                                                                       SimpleImputer(add_indicator=True))]),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;),
                                                     (&#x27;onehotencoder&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;)])),
                    (&#x27;lassocv&#x27;, LassoCV())])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d5ad4446-5e22-4df4-8aa6-96ce1b6454da" type="checkbox" ><label for="d5ad4446-5e22-4df4-8aa6-96ce1b6454da" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4a355e5b-e5a0-498a-817c-a138894a94bb" type="checkbox" ><label for="4a355e5b-e5a0-498a-817c-a138894a94bb" class="sk-toggleable__label sk-toggleable__label-arrow">pipeline</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c5504022-013e-4c3e-b1c1-3d52c0c645a7" type="checkbox" ><label for="c5504022-013e-4c3e-b1c1-3d52c0c645a7" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="776430d5-ffec-421f-a7e3-9174be15f684" type="checkbox" ><label for="776430d5-ffec-421f-a7e3-9174be15f684" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="44bb86a5-2512-41b4-a096-2c916b353d03" type="checkbox" ><label for="44bb86a5-2512-41b4-a096-2c916b353d03" class="sk-toggleable__label sk-toggleable__label-arrow">onehotencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="da074596-134e-4bdd-9b79-8eb008e965f3" type="checkbox" ><label for="da074596-134e-4bdd-9b79-8eb008e965f3" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a3e2b3db-f740-4a86-998c-d177659d074f" type="checkbox" ><label for="a3e2b3db-f740-4a86-998c-d177659d074f" class="sk-toggleable__label sk-toggleable__label-arrow">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 172-177

.. code-block:: default

    from sklearn.ensemble import RandomForestRegressor

    rf_pipeline = make_pipeline(tree_preprocessor, RandomForestRegressor(random_state=42))
    rf_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa {color: black;background-color: white;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa pre{padding: 0;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa div.sk-toggleable {background-color: white;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa div.sk-estimator:hover {background-color: #d4ebff;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa div.sk-item {z-index: 1;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa div.sk-parallel-item:only-child::after {width: 0;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa div.sk-text-repr-fallback {display: none;}</style><div id="sk-963f3cde-6bc0-42be-a704-3ad7246dd1aa" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;)])),
                    (&#x27;randomforestregressor&#x27;,
                     RandomForestRegressor(random_state=42))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="17321796-88a8-4bf0-a049-d6ed540ed5ec" type="checkbox" ><label for="17321796-88a8-4bf0-a049-d6ed540ed5ec" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;)])),
                    (&#x27;randomforestregressor&#x27;,
                     RandomForestRegressor(random_state=42))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1214a24e-a1eb-454c-8fd6-85a6f13ae1c5" type="checkbox" ><label for="1214a24e-a1eb-454c-8fd6-85a6f13ae1c5" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2743975d-dcba-4f48-a5fc-a9a5e31c512a" type="checkbox" ><label for="2743975d-dcba-4f48-a5fc-a9a5e31c512a" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e8ba9eef-50fb-49fc-bca5-ea76768590bb" type="checkbox" ><label for="e8ba9eef-50fb-49fc-bca5-ea76768590bb" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5b4455e8-5e92-4291-8211-75dd6e6670bd" type="checkbox" ><label for="5b4455e8-5e92-4291-8211-75dd6e6670bd" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2ed26393-a675-4276-83ac-564f0ed33879" type="checkbox" ><label for="2ed26393-a675-4276-83ac-564f0ed33879" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9273339c-a613-400d-9124-a39d239ea246" type="checkbox" ><label for="9273339c-a613-400d-9124-a39d239ea246" class="sk-toggleable__label sk-toggleable__label-arrow">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 178-185

.. code-block:: default

    from sklearn.ensemble import HistGradientBoostingRegressor

    gbdt_pipeline = make_pipeline(
        tree_preprocessor, HistGradientBoostingRegressor(random_state=0)
    )
    gbdt_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-a1babad2-c38e-4519-aa43-7995993f34cd {color: black;background-color: white;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd pre{padding: 0;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd div.sk-toggleable {background-color: white;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-a1babad2-c38e-4519-aa43-7995993f34cd div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd div.sk-estimator:hover {background-color: #d4ebff;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd div.sk-item {z-index: 1;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd div.sk-parallel-item:only-child::after {width: 0;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-a1babad2-c38e-4519-aa43-7995993f34cd div.sk-text-repr-fallback {display: none;}</style><div id="sk-a1babad2-c38e-4519-aa43-7995993f34cd" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;)])),
                    (&#x27;histgradientboostingregressor&#x27;,
                     HistGradientBoostingRegressor(random_state=0))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="bc56cd9e-e1c6-4f4d-9d79-4ab2198fc95c" type="checkbox" ><label for="bc56cd9e-e1c6-4f4d-9d79-4ab2198fc95c" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;)])),
                    (&#x27;histgradientboostingregressor&#x27;,
                     HistGradientBoostingRegressor(random_state=0))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f25b823c-dc96-46fe-8f02-c1974052ed80" type="checkbox" ><label for="f25b823c-dc96-46fe-8f02-c1974052ed80" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0d703634-bb0b-49d1-906c-897eb1d581d3" type="checkbox" ><label for="0d703634-bb0b-49d1-906c-897eb1d581d3" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="750abbd2-4527-41f5-8e9f-a7a8c2078da9" type="checkbox" ><label for="750abbd2-4527-41f5-8e9f-a7a8c2078da9" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="146574be-4674-415d-97d7-c49af23d5144" type="checkbox" ><label for="146574be-4674-415d-97d7-c49af23d5144" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6fc5fca6-ce2f-4df3-b8ce-34e8f5f15f28" type="checkbox" ><label for="6fc5fca6-ce2f-4df3-b8ce-34e8f5f15f28" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="42223194-82e9-456c-8e80-36a90dcaa208" type="checkbox" ><label for="42223194-82e9-456c-8e80-36a90dcaa208" class="sk-toggleable__label sk-toggleable__label-arrow">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 186-198

.. code-block:: default

    from sklearn.ensemble import StackingRegressor
    from sklearn.linear_model import RidgeCV

    estimators = [
        ("Random Forest", rf_pipeline),
        ("Lasso", lasso_pipeline),
        ("Gradient Boosting", gbdt_pipeline),
    ]

    stacking_regressor = StackingRegressor(estimators=estimators, final_estimator=RidgeCV())
    stacking_regressor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-f503073f-5300-478e-b16f-7865d13e7703 {color: black;background-color: white;}#sk-f503073f-5300-478e-b16f-7865d13e7703 pre{padding: 0;}#sk-f503073f-5300-478e-b16f-7865d13e7703 div.sk-toggleable {background-color: white;}#sk-f503073f-5300-478e-b16f-7865d13e7703 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-f503073f-5300-478e-b16f-7865d13e7703 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-f503073f-5300-478e-b16f-7865d13e7703 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-f503073f-5300-478e-b16f-7865d13e7703 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-f503073f-5300-478e-b16f-7865d13e7703 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-f503073f-5300-478e-b16f-7865d13e7703 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-f503073f-5300-478e-b16f-7865d13e7703 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-f503073f-5300-478e-b16f-7865d13e7703 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-f503073f-5300-478e-b16f-7865d13e7703 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-f503073f-5300-478e-b16f-7865d13e7703 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-f503073f-5300-478e-b16f-7865d13e7703 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-f503073f-5300-478e-b16f-7865d13e7703 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-f503073f-5300-478e-b16f-7865d13e7703 div.sk-estimator:hover {background-color: #d4ebff;}#sk-f503073f-5300-478e-b16f-7865d13e7703 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-f503073f-5300-478e-b16f-7865d13e7703 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-f503073f-5300-478e-b16f-7865d13e7703 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-f503073f-5300-478e-b16f-7865d13e7703 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-f503073f-5300-478e-b16f-7865d13e7703 div.sk-item {z-index: 1;}#sk-f503073f-5300-478e-b16f-7865d13e7703 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-f503073f-5300-478e-b16f-7865d13e7703 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-f503073f-5300-478e-b16f-7865d13e7703 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-f503073f-5300-478e-b16f-7865d13e7703 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-f503073f-5300-478e-b16f-7865d13e7703 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-f503073f-5300-478e-b16f-7865d13e7703 div.sk-parallel-item:only-child::after {width: 0;}#sk-f503073f-5300-478e-b16f-7865d13e7703 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-f503073f-5300-478e-b16f-7865d13e7703 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-f503073f-5300-478e-b16f-7865d13e7703 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-f503073f-5300-478e-b16f-7865d13e7703 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-f503073f-5300-478e-b16f-7865d13e7703 div.sk-text-repr-fallback {display: none;}</style><div id="sk-f503073f-5300-478e-b16f-7865d13e7703" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>StackingRegressor(estimators=[(&#x27;Random Forest&#x27;,
                                   Pipeline(steps=[(&#x27;columntransformer&#x27;,
                                                    ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                                                     SimpleImputer(add_indicator=True),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose...
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;)])),
                                                   (&#x27;histgradientboostingregressor&#x27;,
                                                    HistGradientBoostingRegressor(random_state=0))]))],
                      final_estimator=RidgeCV())</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f2077b38-adf2-4a16-83bd-b6d82da3a9a1" type="checkbox" ><label for="f2077b38-adf2-4a16-83bd-b6d82da3a9a1" class="sk-toggleable__label sk-toggleable__label-arrow">StackingRegressor</label><div class="sk-toggleable__content"><pre>StackingRegressor(estimators=[(&#x27;Random Forest&#x27;,
                                   Pipeline(steps=[(&#x27;columntransformer&#x27;,
                                                    ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                                                     SimpleImputer(add_indicator=True),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose...
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;)])),
                                                   (&#x27;histgradientboostingregressor&#x27;,
                                                    HistGradientBoostingRegressor(random_state=0))]))],
                      final_estimator=RidgeCV())</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Random Forest</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5de8d5a8-18a9-4bbc-bbe4-0f53da2af580" type="checkbox" ><label for="5de8d5a8-18a9-4bbc-bbe4-0f53da2af580" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="89a6079b-3f55-41a9-b340-1f9d6336109d" type="checkbox" ><label for="89a6079b-3f55-41a9-b340-1f9d6336109d" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="684af6d0-e136-4f62-880b-dd10d91674f2" type="checkbox" ><label for="684af6d0-e136-4f62-880b-dd10d91674f2" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="77835f58-3ef9-4788-8197-c030a603812c" type="checkbox" ><label for="77835f58-3ef9-4788-8197-c030a603812c" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ac359ae0-69a1-4d80-a0e8-708d2d972187" type="checkbox" ><label for="ac359ae0-69a1-4d80-a0e8-708d2d972187" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="18ace73a-bdb8-4cba-8549-d899b75fb7bf" type="checkbox" ><label for="18ace73a-bdb8-4cba-8549-d899b75fb7bf" class="sk-toggleable__label sk-toggleable__label-arrow">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Lasso</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="58c03d41-b8c0-4c8d-877c-125712c14428" type="checkbox" ><label for="58c03d41-b8c0-4c8d-877c-125712c14428" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1d6a7b51-20bc-444b-a955-2554e7f6ab58" type="checkbox" ><label for="1d6a7b51-20bc-444b-a955-2554e7f6ab58" class="sk-toggleable__label sk-toggleable__label-arrow">pipeline</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9dacf19c-51e4-4944-bb6c-95dffa00eebc" type="checkbox" ><label for="9dacf19c-51e4-4944-bb6c-95dffa00eebc" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="02dd51d5-26e6-43f8-b9d4-80d27d73b936" type="checkbox" ><label for="02dd51d5-26e6-43f8-b9d4-80d27d73b936" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="22e3f80e-5bc1-4a95-8d3a-b030aea299b3" type="checkbox" ><label for="22e3f80e-5bc1-4a95-8d3a-b030aea299b3" class="sk-toggleable__label sk-toggleable__label-arrow">onehotencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="12e4b69e-cfe0-4e1e-bf15-f68995eea503" type="checkbox" ><label for="12e4b69e-cfe0-4e1e-bf15-f68995eea503" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7fa46f01-9626-4413-b899-861e9ed4e0e9" type="checkbox" ><label for="7fa46f01-9626-4413-b899-861e9ed4e0e9" class="sk-toggleable__label sk-toggleable__label-arrow">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Gradient Boosting</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="fb9db4c2-3491-40e7-8a5c-9d3a240d98b5" type="checkbox" ><label for="fb9db4c2-3491-40e7-8a5c-9d3a240d98b5" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4d081b2b-783e-492d-9097-9e0b2262afb3" type="checkbox" ><label for="4d081b2b-783e-492d-9097-9e0b2262afb3" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f95330d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e09bb3b5-0707-4f11-a653-5d291d8e6292" type="checkbox" ><label for="e09bb3b5-0707-4f11-a653-5d291d8e6292" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a2da7022-2569-40f8-af68-6aefd0b9bf65" type="checkbox" ><label for="a2da7022-2569-40f8-af68-6aefd0b9bf65" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f34f9533370&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="76d59202-b40f-41f2-b26d-e9543c7d44e2" type="checkbox" ><label for="76d59202-b40f-41f2-b26d-e9543c7d44e2" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c034920d-fe04-4859-bbb3-456a2dd9eb7b" type="checkbox" ><label for="c034920d-fe04-4859-bbb3-456a2dd9eb7b" class="sk-toggleable__label sk-toggleable__label-arrow">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>final_estimator</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7adb63b5-9c01-4c68-8253-97f87d384fb5" type="checkbox" ><label for="7adb63b5-9c01-4c68-8253-97f87d384fb5" class="sk-toggleable__label sk-toggleable__label-arrow">RidgeCV</label><div class="sk-toggleable__content"><pre>RidgeCV()</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 199-208

Measure and plot the results
#############################################################################

 Now we can use Ames Housing dataset to make the predictions. We check the
 performance of each individual predictor as well as of the stack of the
 regressors.

 The function ``plot_regression_results`` is used to plot the predicted and
 true targets.

.. GENERATED FROM PYTHON SOURCE LINES 208-273

.. code-block:: default



    import time
    import matplotlib.pyplot as plt
    from sklearn.model_selection import cross_validate, cross_val_predict


    def plot_regression_results(ax, y_true, y_pred, title, scores, elapsed_time):
        """Scatter plot of the predicted vs true targets."""
        ax.plot(
            [y_true.min(), y_true.max()], [y_true.min(), y_true.max()], "--r", linewidth=2
        )
        ax.scatter(y_true, y_pred, alpha=0.2)

        ax.spines["top"].set_visible(False)
        ax.spines["right"].set_visible(False)
        ax.get_xaxis().tick_bottom()
        ax.get_yaxis().tick_left()
        ax.spines["left"].set_position(("outward", 10))
        ax.spines["bottom"].set_position(("outward", 10))
        ax.set_xlim([y_true.min(), y_true.max()])
        ax.set_ylim([y_true.min(), y_true.max()])
        ax.set_xlabel("Measured")
        ax.set_ylabel("Predicted")
        extra = plt.Rectangle(
            (0, 0), 0, 0, fc="w", fill=False, edgecolor="none", linewidth=0
        )
        ax.legend([extra], [scores], loc="upper left")
        title = title + "\n Evaluation in {:.2f} seconds".format(elapsed_time)
        ax.set_title(title)


    fig, axs = plt.subplots(2, 2, figsize=(9, 7))
    axs = np.ravel(axs)

    for ax, (name, est) in zip(
        axs, estimators + [("Stacking Regressor", stacking_regressor)]
    ):
        start_time = time.time()
        score = cross_validate(
            est, X, y, scoring=["r2", "neg_mean_absolute_error"], n_jobs=2, verbose=0
        )
        elapsed_time = time.time() - start_time

        y_pred = cross_val_predict(est, X, y, n_jobs=2, verbose=0)

        plot_regression_results(
            ax,
            y,
            y_pred,
            name,
            (r"$R^2={:.2f} \pm {:.2f}$" + "\n" + r"$MAE={:.2f} \pm {:.2f}$").format(
                np.mean(score["test_r2"]),
                np.std(score["test_r2"]),
                -np.mean(score["test_neg_mean_absolute_error"]),
                np.std(score["test_neg_mean_absolute_error"]),
            ),
            elapsed_time,
        )

    plt.suptitle("Single predictors versus stacked predictors")
    plt.tight_layout()
    plt.subplots_adjust(top=0.9)
    plt.show()




.. image-sg:: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :alt: Single predictors versus stacked predictors, Random Forest  Evaluation in 1.00 seconds, Lasso  Evaluation in 0.18 seconds, Gradient Boosting  Evaluation in 0.48 seconds, Stacking Regressor  Evaluation in 8.38 seconds
   :srcset: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 274-277

The stacked regressor will combine the strengths of the different regressors.
However, we also see that training the stacked regressor is much more
computationally expensive.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  20.517 seconds)


.. _sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/ensemble/plot_stack_predictors.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_stack_predictors.py <plot_stack_predictors.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_stack_predictors.ipynb <plot_stack_predictors.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
