
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/ensemble/plot_stack_predictors.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_ensemble_plot_stack_predictors.py:


=================================
Combine predictors using stacking
=================================

.. currentmodule:: sklearn

Stacking refers to a method to blend estimators. In this strategy, some
estimators are individually fitted on some training data while a final
estimator is trained using the stacked predictions of these base estimators.

In this example, we illustrate the use case in which different regressors are
stacked together and a final linear penalized regressor is used to output the
prediction. We compare the performance of each individual regressor with the
stacking strategy. Stacking slightly improves the overall performance.

.. GENERATED FROM PYTHON SOURCE LINES 18-29

.. code-block:: default


    # Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>
    #          Maria Telenczuk    <https://github.com/maikia>
    # License: BSD 3 clause

    print(__doc__)

    from sklearn import set_config

    set_config(display="diagram")








.. GENERATED FROM PYTHON SOURCE LINES 30-46

Download the dataset
#############################################################################

 We will use `Ames Housing`_ dataset which was first compiled by Dean De Cock
 and became better known after it was used in Kaggle challenge. It is a set
 of 1460 residential homes in Ames, Iowa, each described by 80 features. We
 will use it to predict the final logarithmic price of the houses. In this
 example we will use only 20 most interesting features chosen using
 GradientBoostingRegressor() and limit number of entries (here we won't go
 into the details on how to select the most interesting features).

 The Ames housing dataset is not shipped with scikit-learn and therefore we
 will fetch it from `OpenML`_.

 .. _`Ames Housing`: http://jse.amstat.org/v19n3/decock.pdf
 .. _`OpenML`: https://www.openml.org/d/42165

.. GENERATED FROM PYTHON SOURCE LINES 46-92

.. code-block:: default


    import numpy as np

    from sklearn.datasets import fetch_openml
    from sklearn.utils import shuffle


    def load_ames_housing():
        df = fetch_openml(name="house_prices", as_frame=True)
        X = df.data
        y = df.target

        features = [
            "YrSold",
            "HeatingQC",
            "Street",
            "YearRemodAdd",
            "Heating",
            "MasVnrType",
            "BsmtUnfSF",
            "Foundation",
            "MasVnrArea",
            "MSSubClass",
            "ExterQual",
            "Condition2",
            "GarageCars",
            "GarageType",
            "OverallQual",
            "TotalBsmtSF",
            "BsmtFinSF1",
            "HouseStyle",
            "MiscFeature",
            "MoSold",
        ]

        X = X[features]
        X, y = shuffle(X, y, random_state=0)

        X = X[:600]
        y = y[:600]
        return X, np.log(y)


    X, y = load_ames_housing()









.. GENERATED FROM PYTHON SOURCE LINES 93-99

Make pipeline to preprocess the data
#############################################################################

 Before we can use Ames dataset we still need to do some preprocessing.
 First, we will select the categorical and numerical columns of the dataset to
 construct the first step of the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 99-106

.. code-block:: default


    from sklearn.compose import make_column_selector

    cat_selector = make_column_selector(dtype_include=object)
    num_selector = make_column_selector(dtype_include=np.number)
    cat_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['HeatingQC', 'Street', 'Heating', 'MasVnrType', 'Foundation', 'ExterQual', 'Condition2', 'GarageType', 'HouseStyle', 'MiscFeature']



.. GENERATED FROM PYTHON SOURCE LINES 107-109

.. code-block:: default

    num_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['YrSold', 'YearRemodAdd', 'BsmtUnfSF', 'MasVnrArea', 'MSSubClass', 'GarageCars', 'OverallQual', 'TotalBsmtSF', 'BsmtFinSF1', 'MoSold']



.. GENERATED FROM PYTHON SOURCE LINES 110-119

Then, we will need to design preprocessing pipelines which depends on the
ending regressor. If the ending regressor is a linear model, one needs to
one-hot encode the categories. If the ending regressor is a tree-based model
an ordinal encoder will be sufficient. Besides, numerical values need to be
standardized for a linear model while the raw numerical data can be treated
as is by a tree-based model. However, both models need an imputer to
handle missing values.

We will first design the pipeline required for the tree-based models.

.. GENERATED FROM PYTHON SOURCE LINES 119-135

.. code-block:: default


    from sklearn.compose import make_column_transformer
    from sklearn.impute import SimpleImputer
    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import OrdinalEncoder

    cat_tree_processor = OrdinalEncoder(
        handle_unknown="use_encoded_value", unknown_value=-1
    )
    num_tree_processor = SimpleImputer(strategy="mean", add_indicator=True)

    tree_preprocessor = make_column_transformer(
        (num_tree_processor, num_selector), (cat_tree_processor, cat_selector)
    )
    tree_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f {color: black;background-color: white;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f pre{padding: 0;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f div.sk-toggleable {background-color: white;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f div.sk-estimator:hover {background-color: #d4ebff;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f div.sk-item {z-index: 1;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f div.sk-parallel-item:only-child::after {width: 0;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f div.sk-container {display: inline-block;position: relative;}</style><div id="sk-a272cc74-fef0-40b0-a1d7-55b32da7fb6f" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6d20f31f-e4b1-417b-bd58-90b8f35f16df" type="checkbox" ><label class="sk-toggleable__label" for="6d20f31f-e4b1-417b-bd58-90b8f35f16df">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6d00>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6b20>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a78f4a4f-5ea1-47fb-b8bd-53b65e81509f" type="checkbox" ><label class="sk-toggleable__label" for="a78f4a4f-5ea1-47fb-b8bd-53b65e81509f">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6d00></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="fbc80cbe-c5a2-4ab2-a728-e02f54dbabff" type="checkbox" ><label class="sk-toggleable__label" for="fbc80cbe-c5a2-4ab2-a728-e02f54dbabff">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7ca59f50-cc9f-421f-9c21-e6d46e49077f" type="checkbox" ><label class="sk-toggleable__label" for="7ca59f50-cc9f-421f-9c21-e6d46e49077f">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6b20></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ebcf1ffe-d209-4a4e-8d0c-98cc2476c684" type="checkbox" ><label class="sk-toggleable__label" for="ebcf1ffe-d209-4a4e-8d0c-98cc2476c684">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 136-138

Then, we will now define the preprocessor used when the ending regressor
is a linear model.

.. GENERATED FROM PYTHON SOURCE LINES 138-152

.. code-block:: default


    from sklearn.preprocessing import OneHotEncoder
    from sklearn.preprocessing import StandardScaler

    cat_linear_processor = OneHotEncoder(handle_unknown="ignore")
    num_linear_processor = make_pipeline(
        StandardScaler(), SimpleImputer(strategy="mean", add_indicator=True)
    )

    linear_preprocessor = make_column_transformer(
        (num_linear_processor, num_selector), (cat_linear_processor, cat_selector)
    )
    linear_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 {color: black;background-color: white;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 pre{padding: 0;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 div.sk-toggleable {background-color: white;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 div.sk-item {z-index: 1;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 div.sk-parallel-item:only-child::after {width: 0;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-02bc2773-f49e-47ab-9d2a-086778febaa7 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-02bc2773-f49e-47ab-9d2a-086778febaa7" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8ebf858e-b03d-4733-be7c-4cf1dbc07058" type="checkbox" ><label class="sk-toggleable__label" for="8ebf858e-b03d-4733-be7c-4cf1dbc07058">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('pipeline',
                                     Pipeline(steps=[('standardscaler',
                                                      StandardScaler()),
                                                     ('simpleimputer',
                                                      SimpleImputer(add_indicator=True))]),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6d00>),
                                    ('onehotencoder',
                                     OneHotEncoder(handle_unknown='ignore'),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6b20>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7e5aab2e-0f0b-4df2-8b30-f257591f8d51" type="checkbox" ><label class="sk-toggleable__label" for="7e5aab2e-0f0b-4df2-8b30-f257591f8d51">pipeline</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6d00></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a2a59fa9-87b9-4038-b98a-582671cf5395" type="checkbox" ><label class="sk-toggleable__label" for="a2a59fa9-87b9-4038-b98a-582671cf5395">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7c3edd15-9890-453a-8486-a3e27295ace9" type="checkbox" ><label class="sk-toggleable__label" for="7c3edd15-9890-453a-8486-a3e27295ace9">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ccac535c-ad37-4906-9024-227b45db655f" type="checkbox" ><label class="sk-toggleable__label" for="ccac535c-ad37-4906-9024-227b45db655f">onehotencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6b20></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="814c1f91-a9c5-4c78-b8e1-0dad780e4b04" type="checkbox" ><label class="sk-toggleable__label" for="814c1f91-a9c5-4c78-b8e1-0dad780e4b04">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 153-171

Stack of predictors on a single data set
#############################################################################

 It is sometimes tedious to find the model which will best perform on a given
 dataset. Stacking provide an alternative by combining the outputs of several
 learners, without the need to choose a model specifically. The performance of
 stacking is usually close to the best model and sometimes it can outperform
 the prediction performance of each individual model.

 Here, we combine 3 learners (linear and non-linear) and use a ridge regressor
 to combine their outputs together.

 .. note::
    Although we will make new pipelines with the processors which we wrote in
    the previous section for the 3 learners, the final estimator
    :class:`~sklearn.linear_model.RidgeCV()` does not need preprocessing of
    the data as it will be fed with the already preprocessed output from the 3
    learners.

.. GENERATED FROM PYTHON SOURCE LINES 171-177

.. code-block:: default


    from sklearn.linear_model import LassoCV

    lasso_pipeline = make_pipeline(linear_preprocessor, LassoCV())
    lasso_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-67518fd7-3358-4ef4-a224-aacac49973db {color: black;background-color: white;}#sk-67518fd7-3358-4ef4-a224-aacac49973db pre{padding: 0;}#sk-67518fd7-3358-4ef4-a224-aacac49973db div.sk-toggleable {background-color: white;}#sk-67518fd7-3358-4ef4-a224-aacac49973db label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-67518fd7-3358-4ef4-a224-aacac49973db div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-67518fd7-3358-4ef4-a224-aacac49973db div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-67518fd7-3358-4ef4-a224-aacac49973db input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-67518fd7-3358-4ef4-a224-aacac49973db div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-67518fd7-3358-4ef4-a224-aacac49973db div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-67518fd7-3358-4ef4-a224-aacac49973db input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-67518fd7-3358-4ef4-a224-aacac49973db div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-67518fd7-3358-4ef4-a224-aacac49973db div.sk-estimator:hover {background-color: #d4ebff;}#sk-67518fd7-3358-4ef4-a224-aacac49973db div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-67518fd7-3358-4ef4-a224-aacac49973db div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-67518fd7-3358-4ef4-a224-aacac49973db div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-67518fd7-3358-4ef4-a224-aacac49973db div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-67518fd7-3358-4ef4-a224-aacac49973db div.sk-item {z-index: 1;}#sk-67518fd7-3358-4ef4-a224-aacac49973db div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-67518fd7-3358-4ef4-a224-aacac49973db div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-67518fd7-3358-4ef4-a224-aacac49973db div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-67518fd7-3358-4ef4-a224-aacac49973db div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-67518fd7-3358-4ef4-a224-aacac49973db div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-67518fd7-3358-4ef4-a224-aacac49973db div.sk-parallel-item:only-child::after {width: 0;}#sk-67518fd7-3358-4ef4-a224-aacac49973db div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-67518fd7-3358-4ef4-a224-aacac49973db div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-67518fd7-3358-4ef4-a224-aacac49973db div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-67518fd7-3358-4ef4-a224-aacac49973db div.sk-container {display: inline-block;position: relative;}</style><div id="sk-67518fd7-3358-4ef4-a224-aacac49973db" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9ef296d3-7358-4bb5-b131-60efb0895dfa" type="checkbox" ><label class="sk-toggleable__label" for="9ef296d3-7358-4bb5-b131-60efb0895dfa">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columntransformer',
                     ColumnTransformer(transformers=[('pipeline',
                                                      Pipeline(steps=[('standardscaler',
                                                                       StandardScaler()),
                                                                      ('simpleimputer',
                                                                       SimpleImputer(add_indicator=True))]),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6d00>),
                                                     ('onehotencoder',
                                                      OneHotEncoder(handle_unknown='ignore'),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6b20>)])),
                    ('lassocv', LassoCV())])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e9eda2c7-79f3-47a1-b0dc-7dea3028137c" type="checkbox" ><label class="sk-toggleable__label" for="e9eda2c7-79f3-47a1-b0dc-7dea3028137c">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('pipeline',
                                     Pipeline(steps=[('standardscaler',
                                                      StandardScaler()),
                                                     ('simpleimputer',
                                                      SimpleImputer(add_indicator=True))]),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6d00>),
                                    ('onehotencoder',
                                     OneHotEncoder(handle_unknown='ignore'),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6b20>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c1c1c8e7-25f9-40f7-8900-e181716f60cc" type="checkbox" ><label class="sk-toggleable__label" for="c1c1c8e7-25f9-40f7-8900-e181716f60cc">pipeline</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6d00></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3f9e1d26-258c-423d-9f5b-ca815dca5b81" type="checkbox" ><label class="sk-toggleable__label" for="3f9e1d26-258c-423d-9f5b-ca815dca5b81">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ef2820a0-18b5-42bd-a53a-b1908e4f6416" type="checkbox" ><label class="sk-toggleable__label" for="ef2820a0-18b5-42bd-a53a-b1908e4f6416">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="18160d50-d454-4cc8-8cc4-4c6964c04d81" type="checkbox" ><label class="sk-toggleable__label" for="18160d50-d454-4cc8-8cc4-4c6964c04d81">onehotencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6b20></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b4c6c2cf-ca3c-43c3-af53-dbf71d40c2b3" type="checkbox" ><label class="sk-toggleable__label" for="b4c6c2cf-ca3c-43c3-af53-dbf71d40c2b3">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c0e7ea6d-cecf-4cab-b554-abf5e00b97fc" type="checkbox" ><label class="sk-toggleable__label" for="c0e7ea6d-cecf-4cab-b554-abf5e00b97fc">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 178-183

.. code-block:: default

    from sklearn.ensemble import RandomForestRegressor

    rf_pipeline = make_pipeline(tree_preprocessor, RandomForestRegressor(random_state=42))
    rf_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-abec4045-ad8a-4645-ac83-274ff43c519e {color: black;background-color: white;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e pre{padding: 0;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e div.sk-toggleable {background-color: white;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e div.sk-estimator:hover {background-color: #d4ebff;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e div.sk-item {z-index: 1;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e div.sk-parallel-item:only-child::after {width: 0;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-abec4045-ad8a-4645-ac83-274ff43c519e div.sk-container {display: inline-block;position: relative;}</style><div id="sk-abec4045-ad8a-4645-ac83-274ff43c519e" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="aaf24b30-64c2-4bad-9527-b304cacd8deb" type="checkbox" ><label class="sk-toggleable__label" for="aaf24b30-64c2-4bad-9527-b304cacd8deb">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columntransformer',
                     ColumnTransformer(transformers=[('simpleimputer',
                                                      SimpleImputer(add_indicator=True),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6d00>),
                                                     ('ordinalencoder',
                                                      OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                     unknown_value=-1),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6b20>)])),
                    ('randomforestregressor',
                     RandomForestRegressor(random_state=42))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3add0e69-3468-427d-8a57-c3e9c3ab63a8" type="checkbox" ><label class="sk-toggleable__label" for="3add0e69-3468-427d-8a57-c3e9c3ab63a8">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6d00>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6b20>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ca9ee672-78d2-47bb-a84a-28f1ed96e0e3" type="checkbox" ><label class="sk-toggleable__label" for="ca9ee672-78d2-47bb-a84a-28f1ed96e0e3">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6d00></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="232455a1-39e8-4ef8-8625-816c83adbe4d" type="checkbox" ><label class="sk-toggleable__label" for="232455a1-39e8-4ef8-8625-816c83adbe4d">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="70306af6-bd1d-4cdd-a49a-697edd5d13c3" type="checkbox" ><label class="sk-toggleable__label" for="70306af6-bd1d-4cdd-a49a-697edd5d13c3">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6b20></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4248d4b2-3d4b-4033-8678-dcae0dad19f4" type="checkbox" ><label class="sk-toggleable__label" for="4248d4b2-3d4b-4033-8678-dcae0dad19f4">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b2bdaaad-3246-40f2-9778-6c9b6e689c95" type="checkbox" ><label class="sk-toggleable__label" for="b2bdaaad-3246-40f2-9778-6c9b6e689c95">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 184-191

.. code-block:: default

    from sklearn.ensemble import HistGradientBoostingRegressor

    gbdt_pipeline = make_pipeline(
        tree_preprocessor, HistGradientBoostingRegressor(random_state=0)
    )
    gbdt_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd {color: black;background-color: white;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd pre{padding: 0;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd div.sk-toggleable {background-color: white;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd div.sk-estimator:hover {background-color: #d4ebff;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd div.sk-item {z-index: 1;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd div.sk-parallel-item:only-child::after {width: 0;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd div.sk-container {display: inline-block;position: relative;}</style><div id="sk-b133c8b5-cac6-4028-a8d0-0ca1c30989cd" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ddf0363f-9b8f-44ec-9f23-290e96ed9f46" type="checkbox" ><label class="sk-toggleable__label" for="ddf0363f-9b8f-44ec-9f23-290e96ed9f46">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columntransformer',
                     ColumnTransformer(transformers=[('simpleimputer',
                                                      SimpleImputer(add_indicator=True),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6d00>),
                                                     ('ordinalencoder',
                                                      OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                     unknown_value=-1),
                                                      <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6b20>)])),
                    ('histgradientboostingregressor',
                     HistGradientBoostingRegressor(random_state=0))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="08c8670b-8c33-4e8d-a025-6f50dc916ef3" type="checkbox" ><label class="sk-toggleable__label" for="08c8670b-8c33-4e8d-a025-6f50dc916ef3">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6d00>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6b20>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="277f1a50-9308-423a-96e8-668ad1fe4e09" type="checkbox" ><label class="sk-toggleable__label" for="277f1a50-9308-423a-96e8-668ad1fe4e09">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6d00></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f79213e2-b4e3-4638-bc6c-5d37e1517c03" type="checkbox" ><label class="sk-toggleable__label" for="f79213e2-b4e3-4638-bc6c-5d37e1517c03">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f8eb6889-1d49-48d0-8f8b-847749109001" type="checkbox" ><label class="sk-toggleable__label" for="f8eb6889-1d49-48d0-8f8b-847749109001">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6b20></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a6e0984f-144d-4378-b57b-1a2667cde4e2" type="checkbox" ><label class="sk-toggleable__label" for="a6e0984f-144d-4378-b57b-1a2667cde4e2">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0b201553-20b2-4412-b551-9b867ee8c9ee" type="checkbox" ><label class="sk-toggleable__label" for="0b201553-20b2-4412-b551-9b867ee8c9ee">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 192-204

.. code-block:: default

    from sklearn.ensemble import StackingRegressor
    from sklearn.linear_model import RidgeCV

    estimators = [
        ("Random Forest", rf_pipeline),
        ("Lasso", lasso_pipeline),
        ("Gradient Boosting", gbdt_pipeline),
    ]

    stacking_regressor = StackingRegressor(estimators=estimators, final_estimator=RidgeCV())
    stacking_regressor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 {color: black;background-color: white;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 pre{padding: 0;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 div.sk-toggleable {background-color: white;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 div.sk-estimator:hover {background-color: #d4ebff;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 div.sk-item {z-index: 1;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 div.sk-parallel-item:only-child::after {width: 0;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-951d79bf-e984-4d7e-a3d8-fe43f7c07d20" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="36cb0d1b-6179-4b21-91f6-142e71a71e9c" type="checkbox" ><label class="sk-toggleable__label" for="36cb0d1b-6179-4b21-91f6-142e71a71e9c">StackingRegressor</label><div class="sk-toggleable__content"><pre>StackingRegressor(estimators=[('Random Forest',
                                   Pipeline(steps=[('columntransformer',
                                                    ColumnTransformer(transformers=[('simpleimputer',
                                                                                     SimpleImputer(add_indicator=True),
                                                                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6d00>),
                                                                                    ('ordinalencoder',
                                                                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                                                    unknown_value=-1),
                                                                                     <sklearn.compose...
                                                                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6d00>),
                                                                                    ('ordinalencoder',
                                                                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                                                                    unknown_value=-1),
                                                                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6b20>)])),
                                                   ('histgradientboostingregressor',
                                                    HistGradientBoostingRegressor(random_state=0))]))],
                      final_estimator=RidgeCV(alphas=array([ 0.1,  1. , 10. ])))</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Random Forest</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="120cc2f6-9655-416b-8d71-bd86c2bffb44" type="checkbox" ><label class="sk-toggleable__label" for="120cc2f6-9655-416b-8d71-bd86c2bffb44">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6d00>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6b20>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="299dbd19-a32c-4f34-8e95-cb2fe7c00e37" type="checkbox" ><label class="sk-toggleable__label" for="299dbd19-a32c-4f34-8e95-cb2fe7c00e37">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6d00></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b4908c60-fdcb-4e5a-bac7-9abaf4f25fbf" type="checkbox" ><label class="sk-toggleable__label" for="b4908c60-fdcb-4e5a-bac7-9abaf4f25fbf">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2e1ffb4b-286f-4872-a36e-1d8b6bc05e09" type="checkbox" ><label class="sk-toggleable__label" for="2e1ffb4b-286f-4872-a36e-1d8b6bc05e09">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6b20></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="50a87f56-abb4-4637-a97d-589314e7cd3f" type="checkbox" ><label class="sk-toggleable__label" for="50a87f56-abb4-4637-a97d-589314e7cd3f">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3108b70e-40ca-4be3-a00c-58f2d576dd06" type="checkbox" ><label class="sk-toggleable__label" for="3108b70e-40ca-4be3-a00c-58f2d576dd06">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Lasso</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1a97c447-856c-4bc9-91c0-a1587a0208c6" type="checkbox" ><label class="sk-toggleable__label" for="1a97c447-856c-4bc9-91c0-a1587a0208c6">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('pipeline',
                                     Pipeline(steps=[('standardscaler',
                                                      StandardScaler()),
                                                     ('simpleimputer',
                                                      SimpleImputer(add_indicator=True))]),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6d00>),
                                    ('onehotencoder',
                                     OneHotEncoder(handle_unknown='ignore'),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6b20>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b41aa435-3a9a-4bdf-a2c9-41123e2e9328" type="checkbox" ><label class="sk-toggleable__label" for="b41aa435-3a9a-4bdf-a2c9-41123e2e9328">pipeline</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6d00></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="680ffddc-473b-4998-b6d1-050bf2e696bd" type="checkbox" ><label class="sk-toggleable__label" for="680ffddc-473b-4998-b6d1-050bf2e696bd">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="fc71d466-cdc5-4f90-a38c-f05638d653e3" type="checkbox" ><label class="sk-toggleable__label" for="fc71d466-cdc5-4f90-a38c-f05638d653e3">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a451d58f-0b25-4aa2-a875-2f4db3901b50" type="checkbox" ><label class="sk-toggleable__label" for="a451d58f-0b25-4aa2-a875-2f4db3901b50">onehotencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6b20></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6e0eaf11-6ce5-436e-84d5-45b8c6e76978" type="checkbox" ><label class="sk-toggleable__label" for="6e0eaf11-6ce5-436e-84d5-45b8c6e76978">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown='ignore')</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="de8e43ec-cd85-4b81-80bc-db2e94d0cb31" type="checkbox" ><label class="sk-toggleable__label" for="de8e43ec-cd85-4b81-80bc-db2e94d0cb31">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Gradient Boosting</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="07c5f0e9-8354-4d05-b9dc-7f5cb3f5142e" type="checkbox" ><label class="sk-toggleable__label" for="07c5f0e9-8354-4d05-b9dc-7f5cb3f5142e">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('simpleimputer',
                                     SimpleImputer(add_indicator=True),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6d00>),
                                    ('ordinalencoder',
                                     OrdinalEncoder(handle_unknown='use_encoded_value',
                                                    unknown_value=-1),
                                     <sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6b20>)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="11fe50ce-9b8c-4155-86a8-1eb6d778d895" type="checkbox" ><label class="sk-toggleable__label" for="11fe50ce-9b8c-4155-86a8-1eb6d778d895">simpleimputer</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6d00></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a0aaa1df-eb8d-4e3d-8fe8-9369edfded4e" type="checkbox" ><label class="sk-toggleable__label" for="a0aaa1df-eb8d-4e3d-8fe8-9369edfded4e">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ff207e45-8d4d-4b60-9602-afcf6f7da41b" type="checkbox" ><label class="sk-toggleable__label" for="ff207e45-8d4d-4b60-9602-afcf6f7da41b">ordinalencoder</label><div class="sk-toggleable__content"><pre><sklearn.compose._column_transformer.make_column_selector object at 0x7fdd312b6b20></pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="414b24b1-223e-42d2-8dd7-80f6609d746c" type="checkbox" ><label class="sk-toggleable__label" for="414b24b1-223e-42d2-8dd7-80f6609d746c">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c71dc40f-6319-4c44-921a-6409fd1502ce" type="checkbox" ><label class="sk-toggleable__label" for="c71dc40f-6319-4c44-921a-6409fd1502ce">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>final_estimator</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f56ccdb8-9436-46b5-8e2f-8667d22816ee" type="checkbox" ><label class="sk-toggleable__label" for="f56ccdb8-9436-46b5-8e2f-8667d22816ee">RidgeCV</label><div class="sk-toggleable__content"><pre>RidgeCV(alphas=array([ 0.1,  1. , 10. ]))</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 205-214

Measure and plot the results
#############################################################################

 Now we can use Ames Housing dataset to make the predictions. We check the
 performance of each individual predictor as well as of the stack of the
 regressors.

 The function ``plot_regression_results`` is used to plot the predicted and
 true targets.

.. GENERATED FROM PYTHON SOURCE LINES 214-279

.. code-block:: default



    import time
    import matplotlib.pyplot as plt
    from sklearn.model_selection import cross_validate, cross_val_predict


    def plot_regression_results(ax, y_true, y_pred, title, scores, elapsed_time):
        """Scatter plot of the predicted vs true targets."""
        ax.plot(
            [y_true.min(), y_true.max()], [y_true.min(), y_true.max()], "--r", linewidth=2
        )
        ax.scatter(y_true, y_pred, alpha=0.2)

        ax.spines["top"].set_visible(False)
        ax.spines["right"].set_visible(False)
        ax.get_xaxis().tick_bottom()
        ax.get_yaxis().tick_left()
        ax.spines["left"].set_position(("outward", 10))
        ax.spines["bottom"].set_position(("outward", 10))
        ax.set_xlim([y_true.min(), y_true.max()])
        ax.set_ylim([y_true.min(), y_true.max()])
        ax.set_xlabel("Measured")
        ax.set_ylabel("Predicted")
        extra = plt.Rectangle(
            (0, 0), 0, 0, fc="w", fill=False, edgecolor="none", linewidth=0
        )
        ax.legend([extra], [scores], loc="upper left")
        title = title + "\n Evaluation in {:.2f} seconds".format(elapsed_time)
        ax.set_title(title)


    fig, axs = plt.subplots(2, 2, figsize=(9, 7))
    axs = np.ravel(axs)

    for ax, (name, est) in zip(
        axs, estimators + [("Stacking Regressor", stacking_regressor)]
    ):
        start_time = time.time()
        score = cross_validate(
            est, X, y, scoring=["r2", "neg_mean_absolute_error"], n_jobs=-1, verbose=0
        )
        elapsed_time = time.time() - start_time

        y_pred = cross_val_predict(est, X, y, n_jobs=-1, verbose=0)

        plot_regression_results(
            ax,
            y,
            y_pred,
            name,
            (r"$R^2={:.2f} \pm {:.2f}$" + "\n" + r"$MAE={:.2f} \pm {:.2f}$").format(
                np.mean(score["test_r2"]),
                np.std(score["test_r2"]),
                -np.mean(score["test_neg_mean_absolute_error"]),
                np.std(score["test_neg_mean_absolute_error"]),
            ),
            elapsed_time,
        )

    plt.suptitle("Single predictors versus stacked predictors")
    plt.tight_layout()
    plt.subplots_adjust(top=0.9)
    plt.show()




.. image-sg:: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :alt: Single predictors versus stacked predictors, Random Forest  Evaluation in 0.99 seconds, Lasso  Evaluation in 0.57 seconds, Gradient Boosting  Evaluation in 0.66 seconds, Stacking Regressor  Evaluation in 11.63 seconds
   :srcset: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 280-283

The stacked regressor will combine the strengths of the different regressors.
However, we also see that training the stacked regressor is much more
computationally expensive.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  28.581 seconds)


.. _sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/ensemble/plot_stack_predictors.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_stack_predictors.py <plot_stack_predictors.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_stack_predictors.ipynb <plot_stack_predictors.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
