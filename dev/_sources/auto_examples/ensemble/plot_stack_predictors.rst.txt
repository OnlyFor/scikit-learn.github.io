
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/ensemble/plot_stack_predictors.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_ensemble_plot_stack_predictors.py:


=================================
Combine predictors using stacking
=================================

.. currentmodule:: sklearn

Stacking refers to a method to blend estimators. In this strategy, some
estimators are individually fitted on some training data while a final
estimator is trained using the stacked predictions of these base estimators.

In this example, we illustrate the use case in which different regressors are
stacked together and a final linear penalized regressor is used to output the
prediction. We compare the performance of each individual regressor with the
stacking strategy. Stacking slightly improves the overall performance.

.. GENERATED FROM PYTHON SOURCE LINES 18-27

.. code-block:: default


    # Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>
    #          Maria Telenczuk    <https://github.com/maikia>
    # License: BSD 3 clause

    from sklearn import set_config

    set_config(display="diagram")








.. GENERATED FROM PYTHON SOURCE LINES 28-44

Download the dataset
#############################################################################

 We will use `Ames Housing`_ dataset which was first compiled by Dean De Cock
 and became better known after it was used in Kaggle challenge. It is a set
 of 1460 residential homes in Ames, Iowa, each described by 80 features. We
 will use it to predict the final logarithmic price of the houses. In this
 example we will use only 20 most interesting features chosen using
 GradientBoostingRegressor() and limit number of entries (here we won't go
 into the details on how to select the most interesting features).

 The Ames housing dataset is not shipped with scikit-learn and therefore we
 will fetch it from `OpenML`_.

 .. _`Ames Housing`: http://jse.amstat.org/v19n3/decock.pdf
 .. _`OpenML`: https://www.openml.org/d/42165

.. GENERATED FROM PYTHON SOURCE LINES 44-90

.. code-block:: default


    import numpy as np

    from sklearn.datasets import fetch_openml
    from sklearn.utils import shuffle


    def load_ames_housing():
        df = fetch_openml(name="house_prices", as_frame=True)
        X = df.data
        y = df.target

        features = [
            "YrSold",
            "HeatingQC",
            "Street",
            "YearRemodAdd",
            "Heating",
            "MasVnrType",
            "BsmtUnfSF",
            "Foundation",
            "MasVnrArea",
            "MSSubClass",
            "ExterQual",
            "Condition2",
            "GarageCars",
            "GarageType",
            "OverallQual",
            "TotalBsmtSF",
            "BsmtFinSF1",
            "HouseStyle",
            "MiscFeature",
            "MoSold",
        ]

        X = X[features]
        X, y = shuffle(X, y, random_state=0)

        X = X[:600]
        y = y[:600]
        return X, np.log(y)


    X, y = load_ames_housing()









.. GENERATED FROM PYTHON SOURCE LINES 91-97

Make pipeline to preprocess the data
#############################################################################

 Before we can use Ames dataset we still need to do some preprocessing.
 First, we will select the categorical and numerical columns of the dataset to
 construct the first step of the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 97-104

.. code-block:: default


    from sklearn.compose import make_column_selector

    cat_selector = make_column_selector(dtype_include=object)
    num_selector = make_column_selector(dtype_include=np.number)
    cat_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['HeatingQC', 'Street', 'Heating', 'MasVnrType', 'Foundation', 'ExterQual', 'Condition2', 'GarageType', 'HouseStyle', 'MiscFeature']



.. GENERATED FROM PYTHON SOURCE LINES 105-107

.. code-block:: default

    num_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['YrSold', 'YearRemodAdd', 'BsmtUnfSF', 'MasVnrArea', 'MSSubClass', 'GarageCars', 'OverallQual', 'TotalBsmtSF', 'BsmtFinSF1', 'MoSold']



.. GENERATED FROM PYTHON SOURCE LINES 108-117

Then, we will need to design preprocessing pipelines which depends on the
ending regressor. If the ending regressor is a linear model, one needs to
one-hot encode the categories. If the ending regressor is a tree-based model
an ordinal encoder will be sufficient. Besides, numerical values need to be
standardized for a linear model while the raw numerical data can be treated
as is by a tree-based model. However, both models need an imputer to
handle missing values.

We will first design the pipeline required for the tree-based models.

.. GENERATED FROM PYTHON SOURCE LINES 117-133

.. code-block:: default


    from sklearn.compose import make_column_transformer
    from sklearn.impute import SimpleImputer
    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import OrdinalEncoder

    cat_tree_processor = OrdinalEncoder(
        handle_unknown="use_encoded_value", unknown_value=-1
    )
    num_tree_processor = SimpleImputer(strategy="mean", add_indicator=True)

    tree_preprocessor = make_column_transformer(
        (num_tree_processor, num_selector), (cat_tree_processor, cat_selector)
    )
    tree_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-cf3da652-9bda-4ba3-b90f-30355d184584 {color: black;background-color: white;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 pre{padding: 0;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 div.sk-toggleable {background-color: white;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 div.sk-estimator:hover {background-color: #d4ebff;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 div.sk-item {z-index: 1;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 div.sk-parallel-item:only-child::after {width: 0;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 div.sk-container {display: inline-block;position: relative;}#sk-cf3da652-9bda-4ba3-b90f-30355d184584 div.sk-text-repr-fallback {display: none;}</style><div id="sk-cf3da652-9bda-4ba3-b90f-30355d184584" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;)])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9ff64796-c5b9-4a63-bba0-014ba604a8b5" type="checkbox" ><label class="sk-toggleable__label" for="9ff64796-c5b9-4a63-bba0-014ba604a8b5">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6cd303b3-d359-4982-a2fd-b918e374ab8c" type="checkbox" ><label class="sk-toggleable__label" for="6cd303b3-d359-4982-a2fd-b918e374ab8c">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="84b74f23-fbe9-4fc7-8b45-52e115850b47" type="checkbox" ><label class="sk-toggleable__label" for="84b74f23-fbe9-4fc7-8b45-52e115850b47">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="102a6db4-4acc-42ce-b02f-f735cf9d1718" type="checkbox" ><label class="sk-toggleable__label" for="102a6db4-4acc-42ce-b02f-f735cf9d1718">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="cbf6d5bb-313c-43c9-a3d8-9c61a0ddcc09" type="checkbox" ><label class="sk-toggleable__label" for="cbf6d5bb-313c-43c9-a3d8-9c61a0ddcc09">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 134-136

Then, we will now define the preprocessor used when the ending regressor
is a linear model.

.. GENERATED FROM PYTHON SOURCE LINES 136-150

.. code-block:: default


    from sklearn.preprocessing import OneHotEncoder
    from sklearn.preprocessing import StandardScaler

    cat_linear_processor = OneHotEncoder(handle_unknown="ignore")
    num_linear_processor = make_pipeline(
        StandardScaler(), SimpleImputer(strategy="mean", add_indicator=True)
    )

    linear_preprocessor = make_column_transformer(
        (num_linear_processor, num_selector), (cat_linear_processor, cat_selector)
    )
    linear_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-dafbd192-28d8-4daf-9415-e3876e892d93 {color: black;background-color: white;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 pre{padding: 0;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 div.sk-toggleable {background-color: white;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 div.sk-estimator:hover {background-color: #d4ebff;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 div.sk-item {z-index: 1;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 div.sk-parallel-item:only-child::after {width: 0;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 div.sk-container {display: inline-block;position: relative;}#sk-dafbd192-28d8-4daf-9415-e3876e892d93 div.sk-text-repr-fallback {display: none;}</style><div id="sk-dafbd192-28d8-4daf-9415-e3876e892d93" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;)])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f7bad966-3263-4f50-bd02-b05ac360703e" type="checkbox" ><label class="sk-toggleable__label" for="f7bad966-3263-4f50-bd02-b05ac360703e">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="db0c7371-7c92-48f7-8e09-2a6fdb2b6394" type="checkbox" ><label class="sk-toggleable__label" for="db0c7371-7c92-48f7-8e09-2a6fdb2b6394">pipeline</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="512f53f8-f33a-417d-adfb-9e128f20bbd2" type="checkbox" ><label class="sk-toggleable__label" for="512f53f8-f33a-417d-adfb-9e128f20bbd2">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ed8c497d-6d2c-4d08-b734-31157fa73a57" type="checkbox" ><label class="sk-toggleable__label" for="ed8c497d-6d2c-4d08-b734-31157fa73a57">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ece863eb-60bd-49bb-9c92-3ed6cbfb9cc9" type="checkbox" ><label class="sk-toggleable__label" for="ece863eb-60bd-49bb-9c92-3ed6cbfb9cc9">onehotencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="53833655-7c1f-4579-bae1-88417ffc0c5f" type="checkbox" ><label class="sk-toggleable__label" for="53833655-7c1f-4579-bae1-88417ffc0c5f">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 151-169

Stack of predictors on a single data set
#############################################################################

 It is sometimes tedious to find the model which will best perform on a given
 dataset. Stacking provide an alternative by combining the outputs of several
 learners, without the need to choose a model specifically. The performance of
 stacking is usually close to the best model and sometimes it can outperform
 the prediction performance of each individual model.

 Here, we combine 3 learners (linear and non-linear) and use a ridge regressor
 to combine their outputs together.

 .. note::
    Although we will make new pipelines with the processors which we wrote in
    the previous section for the 3 learners, the final estimator
    :class:`~sklearn.linear_model.RidgeCV()` does not need preprocessing of
    the data as it will be fed with the already preprocessed output from the 3
    learners.

.. GENERATED FROM PYTHON SOURCE LINES 169-175

.. code-block:: default


    from sklearn.linear_model import LassoCV

    lasso_pipeline = make_pipeline(linear_preprocessor, LassoCV())
    lasso_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d {color: black;background-color: white;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d pre{padding: 0;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d div.sk-toggleable {background-color: white;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d div.sk-estimator:hover {background-color: #d4ebff;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d div.sk-item {z-index: 1;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d div.sk-parallel-item:only-child::after {width: 0;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d div.sk-container {display: inline-block;position: relative;}#sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d div.sk-text-repr-fallback {display: none;}</style><div id="sk-a06eceef-e65b-401c-b4b5-8f95f8abc90d" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                                      Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                                       StandardScaler()),
                                                                      (&#x27;simpleimputer&#x27;,
                                                                       SimpleImputer(add_indicator=True))]),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;),
                                                     (&#x27;onehotencoder&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;)])),
                    (&#x27;lassocv&#x27;, LassoCV())])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6645bd4e-44d4-44a3-b53d-fc3acb2e4900" type="checkbox" ><label class="sk-toggleable__label" for="6645bd4e-44d4-44a3-b53d-fc3acb2e4900">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                                      Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                                       StandardScaler()),
                                                                      (&#x27;simpleimputer&#x27;,
                                                                       SimpleImputer(add_indicator=True))]),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;),
                                                     (&#x27;onehotencoder&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;)])),
                    (&#x27;lassocv&#x27;, LassoCV())])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="cc524efd-ba80-439d-9954-77fd6a8b4c3a" type="checkbox" ><label class="sk-toggleable__label" for="cc524efd-ba80-439d-9954-77fd6a8b4c3a">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b0faf287-d1f5-42e2-90cb-3237d3d3f901" type="checkbox" ><label class="sk-toggleable__label" for="b0faf287-d1f5-42e2-90cb-3237d3d3f901">pipeline</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7e843f4d-8fc1-4535-ba47-b737ade9d6e4" type="checkbox" ><label class="sk-toggleable__label" for="7e843f4d-8fc1-4535-ba47-b737ade9d6e4">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="379b115f-8563-44b4-a7bf-0d589b669809" type="checkbox" ><label class="sk-toggleable__label" for="379b115f-8563-44b4-a7bf-0d589b669809">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ba38708a-5933-4d2f-9c03-683b8e166081" type="checkbox" ><label class="sk-toggleable__label" for="ba38708a-5933-4d2f-9c03-683b8e166081">onehotencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9d44624b-d6eb-404b-a280-d43a18509f77" type="checkbox" ><label class="sk-toggleable__label" for="9d44624b-d6eb-404b-a280-d43a18509f77">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2715d61a-c35a-4746-b822-e812484d1a68" type="checkbox" ><label class="sk-toggleable__label" for="2715d61a-c35a-4746-b822-e812484d1a68">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 176-181

.. code-block:: default

    from sklearn.ensemble import RandomForestRegressor

    rf_pipeline = make_pipeline(tree_preprocessor, RandomForestRegressor(random_state=42))
    rf_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 {color: black;background-color: white;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 pre{padding: 0;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 div.sk-toggleable {background-color: white;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 div.sk-item {z-index: 1;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 div.sk-parallel-item:only-child::after {width: 0;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 div.sk-container {display: inline-block;position: relative;}#sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7 div.sk-text-repr-fallback {display: none;}</style><div id="sk-5fc7bd5c-6720-4d51-8f91-2b845e7567d7" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;)])),
                    (&#x27;randomforestregressor&#x27;,
                     RandomForestRegressor(random_state=42))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d46bbc23-f64f-4884-85da-ef95b5a1e75e" type="checkbox" ><label class="sk-toggleable__label" for="d46bbc23-f64f-4884-85da-ef95b5a1e75e">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;)])),
                    (&#x27;randomforestregressor&#x27;,
                     RandomForestRegressor(random_state=42))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="cd14b05c-a97c-4461-8327-ca620fbb3613" type="checkbox" ><label class="sk-toggleable__label" for="cd14b05c-a97c-4461-8327-ca620fbb3613">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a9a356c8-2f5c-4e4d-8ad4-1a576cadf21f" type="checkbox" ><label class="sk-toggleable__label" for="a9a356c8-2f5c-4e4d-8ad4-1a576cadf21f">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8bcac498-5246-407d-b381-69d3d63c3399" type="checkbox" ><label class="sk-toggleable__label" for="8bcac498-5246-407d-b381-69d3d63c3399">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="03ac8b33-d41f-4f04-a431-753ceb428500" type="checkbox" ><label class="sk-toggleable__label" for="03ac8b33-d41f-4f04-a431-753ceb428500">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="530e521e-4cb1-4062-940b-aca809338041" type="checkbox" ><label class="sk-toggleable__label" for="530e521e-4cb1-4062-940b-aca809338041">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8ad11864-753c-4dc0-9fa6-d5415b663ec6" type="checkbox" ><label class="sk-toggleable__label" for="8ad11864-753c-4dc0-9fa6-d5415b663ec6">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 182-189

.. code-block:: default

    from sklearn.ensemble import HistGradientBoostingRegressor

    gbdt_pipeline = make_pipeline(
        tree_preprocessor, HistGradientBoostingRegressor(random_state=0)
    )
    gbdt_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 {color: black;background-color: white;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 pre{padding: 0;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 div.sk-toggleable {background-color: white;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 div.sk-item {z-index: 1;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 div.sk-parallel-item:only-child::after {width: 0;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 div.sk-container {display: inline-block;position: relative;}#sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7 div.sk-text-repr-fallback {display: none;}</style><div id="sk-377b676a-5dc9-4b8e-bac0-ad86b3acfcf7" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;)])),
                    (&#x27;histgradientboostingregressor&#x27;,
                     HistGradientBoostingRegressor(random_state=0))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d2e82905-ca13-47cd-b7be-61540378be70" type="checkbox" ><label class="sk-toggleable__label" for="d2e82905-ca13-47cd-b7be-61540378be70">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;)])),
                    (&#x27;histgradientboostingregressor&#x27;,
                     HistGradientBoostingRegressor(random_state=0))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="207d4b72-1640-4df6-9804-d911a9902de9" type="checkbox" ><label class="sk-toggleable__label" for="207d4b72-1640-4df6-9804-d911a9902de9">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="096355d9-8a85-4729-bc39-1e639bee7fce" type="checkbox" ><label class="sk-toggleable__label" for="096355d9-8a85-4729-bc39-1e639bee7fce">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f365be1d-be64-4313-99f6-218e1503769e" type="checkbox" ><label class="sk-toggleable__label" for="f365be1d-be64-4313-99f6-218e1503769e">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4444e842-0347-4831-a9bc-0e9f5f418fc3" type="checkbox" ><label class="sk-toggleable__label" for="4444e842-0347-4831-a9bc-0e9f5f418fc3">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="344c79ee-ba9a-4e7e-875b-666b967df8d8" type="checkbox" ><label class="sk-toggleable__label" for="344c79ee-ba9a-4e7e-875b-666b967df8d8">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ad5cf2fe-2892-4433-b8fe-16e02544a891" type="checkbox" ><label class="sk-toggleable__label" for="ad5cf2fe-2892-4433-b8fe-16e02544a891">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 190-202

.. code-block:: default

    from sklearn.ensemble import StackingRegressor
    from sklearn.linear_model import RidgeCV

    estimators = [
        ("Random Forest", rf_pipeline),
        ("Lasso", lasso_pipeline),
        ("Gradient Boosting", gbdt_pipeline),
    ]

    stacking_regressor = StackingRegressor(estimators=estimators, final_estimator=RidgeCV())
    stacking_regressor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef {color: black;background-color: white;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef pre{padding: 0;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef div.sk-toggleable {background-color: white;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef div.sk-estimator:hover {background-color: #d4ebff;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef div.sk-item {z-index: 1;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef div.sk-parallel-item:only-child::after {width: 0;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef div.sk-container {display: inline-block;position: relative;}#sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef div.sk-text-repr-fallback {display: none;}</style><div id="sk-b6bb816e-9ae0-4e6c-b0aa-4882ddb714ef" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>StackingRegressor(estimators=[(&#x27;Random Forest&#x27;,
                                   Pipeline(steps=[(&#x27;columntransformer&#x27;,
                                                    ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                                                     SimpleImputer(add_indicator=True),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose...
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;)])),
                                                   (&#x27;histgradientboostingregressor&#x27;,
                                                    HistGradientBoostingRegressor(random_state=0))]))],
                      final_estimator=RidgeCV())</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="af6cdcef-c1cb-4940-a2a0-31652586fd7c" type="checkbox" ><label class="sk-toggleable__label" for="af6cdcef-c1cb-4940-a2a0-31652586fd7c">StackingRegressor</label><div class="sk-toggleable__content"><pre>StackingRegressor(estimators=[(&#x27;Random Forest&#x27;,
                                   Pipeline(steps=[(&#x27;columntransformer&#x27;,
                                                    ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                                                     SimpleImputer(add_indicator=True),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose...
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;)])),
                                                   (&#x27;histgradientboostingregressor&#x27;,
                                                    HistGradientBoostingRegressor(random_state=0))]))],
                      final_estimator=RidgeCV())</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Random Forest</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3542c75c-83a9-4502-aeec-e808f472940c" type="checkbox" ><label class="sk-toggleable__label" for="3542c75c-83a9-4502-aeec-e808f472940c">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a1c68f20-0d90-45b4-a189-6163bfe9824c" type="checkbox" ><label class="sk-toggleable__label" for="a1c68f20-0d90-45b4-a189-6163bfe9824c">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d384b5ca-3b25-41aa-a98f-c3a448e42cfe" type="checkbox" ><label class="sk-toggleable__label" for="d384b5ca-3b25-41aa-a98f-c3a448e42cfe">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9d9d38d3-80da-4668-ab9f-b1ee99bfe91e" type="checkbox" ><label class="sk-toggleable__label" for="9d9d38d3-80da-4668-ab9f-b1ee99bfe91e">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="51343568-a0b1-4fb6-9303-d4f9bab36358" type="checkbox" ><label class="sk-toggleable__label" for="51343568-a0b1-4fb6-9303-d4f9bab36358">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="adf59ca7-69c4-49b2-a7e1-fa0e7b686562" type="checkbox" ><label class="sk-toggleable__label" for="adf59ca7-69c4-49b2-a7e1-fa0e7b686562">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Lasso</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="12f6c217-bf68-4cba-bbe1-5f2bcc4d2a29" type="checkbox" ><label class="sk-toggleable__label" for="12f6c217-bf68-4cba-bbe1-5f2bcc4d2a29">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0ab3839c-bacc-4539-9f01-124c4069f42d" type="checkbox" ><label class="sk-toggleable__label" for="0ab3839c-bacc-4539-9f01-124c4069f42d">pipeline</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="68ad5d25-4768-4ab2-bbe4-bf2eea9fc7ae" type="checkbox" ><label class="sk-toggleable__label" for="68ad5d25-4768-4ab2-bbe4-bf2eea9fc7ae">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ca606e30-cab2-43d8-9d72-057d98393ca5" type="checkbox" ><label class="sk-toggleable__label" for="ca606e30-cab2-43d8-9d72-057d98393ca5">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="771dcbd7-fcd7-4d97-a3e8-02a63ba809ca" type="checkbox" ><label class="sk-toggleable__label" for="771dcbd7-fcd7-4d97-a3e8-02a63ba809ca">onehotencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d080f8b3-a8cb-4688-aa16-6791b9b34596" type="checkbox" ><label class="sk-toggleable__label" for="d080f8b3-a8cb-4688-aa16-6791b9b34596">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="22f231c3-607d-4c43-96eb-2541c6755e05" type="checkbox" ><label class="sk-toggleable__label" for="22f231c3-607d-4c43-96eb-2541c6755e05">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Gradient Boosting</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7e3a1c04-6732-4b84-aa21-565035c7ba0e" type="checkbox" ><label class="sk-toggleable__label" for="7e3a1c04-6732-4b84-aa21-565035c7ba0e">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="23d553ee-64ec-4492-b8c9-c5ede7cb2d8f" type="checkbox" ><label class="sk-toggleable__label" for="23d553ee-64ec-4492-b8c9-c5ede7cb2d8f">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c2e0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="fe637c4e-0bfe-4459-88d0-64b9d60c225e" type="checkbox" ><label class="sk-toggleable__label" for="fe637c4e-0bfe-4459-88d0-64b9d60c225e">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="06472855-8562-489a-9138-ac72ef125f68" type="checkbox" ><label class="sk-toggleable__label" for="06472855-8562-489a-9138-ac72ef125f68">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fb7b8d3c520&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6938b663-afa6-4f25-b069-dd9caafbe14f" type="checkbox" ><label class="sk-toggleable__label" for="6938b663-afa6-4f25-b069-dd9caafbe14f">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="80058343-c835-4e9b-a938-c890ed1b527e" type="checkbox" ><label class="sk-toggleable__label" for="80058343-c835-4e9b-a938-c890ed1b527e">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>final_estimator</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c12f354f-e75a-4636-a3c1-bb556c7e0154" type="checkbox" ><label class="sk-toggleable__label" for="c12f354f-e75a-4636-a3c1-bb556c7e0154">RidgeCV</label><div class="sk-toggleable__content"><pre>RidgeCV()</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 203-212

Measure and plot the results
#############################################################################

 Now we can use Ames Housing dataset to make the predictions. We check the
 performance of each individual predictor as well as of the stack of the
 regressors.

 The function ``plot_regression_results`` is used to plot the predicted and
 true targets.

.. GENERATED FROM PYTHON SOURCE LINES 212-277

.. code-block:: default



    import time
    import matplotlib.pyplot as plt
    from sklearn.model_selection import cross_validate, cross_val_predict


    def plot_regression_results(ax, y_true, y_pred, title, scores, elapsed_time):
        """Scatter plot of the predicted vs true targets."""
        ax.plot(
            [y_true.min(), y_true.max()], [y_true.min(), y_true.max()], "--r", linewidth=2
        )
        ax.scatter(y_true, y_pred, alpha=0.2)

        ax.spines["top"].set_visible(False)
        ax.spines["right"].set_visible(False)
        ax.get_xaxis().tick_bottom()
        ax.get_yaxis().tick_left()
        ax.spines["left"].set_position(("outward", 10))
        ax.spines["bottom"].set_position(("outward", 10))
        ax.set_xlim([y_true.min(), y_true.max()])
        ax.set_ylim([y_true.min(), y_true.max()])
        ax.set_xlabel("Measured")
        ax.set_ylabel("Predicted")
        extra = plt.Rectangle(
            (0, 0), 0, 0, fc="w", fill=False, edgecolor="none", linewidth=0
        )
        ax.legend([extra], [scores], loc="upper left")
        title = title + "\n Evaluation in {:.2f} seconds".format(elapsed_time)
        ax.set_title(title)


    fig, axs = plt.subplots(2, 2, figsize=(9, 7))
    axs = np.ravel(axs)

    for ax, (name, est) in zip(
        axs, estimators + [("Stacking Regressor", stacking_regressor)]
    ):
        start_time = time.time()
        score = cross_validate(
            est, X, y, scoring=["r2", "neg_mean_absolute_error"], n_jobs=-1, verbose=0
        )
        elapsed_time = time.time() - start_time

        y_pred = cross_val_predict(est, X, y, n_jobs=-1, verbose=0)

        plot_regression_results(
            ax,
            y,
            y_pred,
            name,
            (r"$R^2={:.2f} \pm {:.2f}$" + "\n" + r"$MAE={:.2f} \pm {:.2f}$").format(
                np.mean(score["test_r2"]),
                np.std(score["test_r2"]),
                -np.mean(score["test_neg_mean_absolute_error"]),
                np.std(score["test_neg_mean_absolute_error"]),
            ),
            elapsed_time,
        )

    plt.suptitle("Single predictors versus stacked predictors")
    plt.tight_layout()
    plt.subplots_adjust(top=0.9)
    plt.show()




.. image-sg:: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :alt: Single predictors versus stacked predictors, Random Forest  Evaluation in 1.07 seconds, Lasso  Evaluation in 0.31 seconds, Gradient Boosting  Evaluation in 0.62 seconds, Stacking Regressor  Evaluation in 10.68 seconds
   :srcset: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 278-281

The stacked regressor will combine the strengths of the different regressors.
However, we also see that training the stacked regressor is much more
computationally expensive.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  26.227 seconds)


.. _sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/ensemble/plot_stack_predictors.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_stack_predictors.py <plot_stack_predictors.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_stack_predictors.ipynb <plot_stack_predictors.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
