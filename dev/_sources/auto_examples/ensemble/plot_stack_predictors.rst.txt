
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/ensemble/plot_stack_predictors.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_ensemble_plot_stack_predictors.py:


=================================
Combine predictors using stacking
=================================

.. currentmodule:: sklearn

Stacking refers to a method to blend estimators. In this strategy, some
estimators are individually fitted on some training data while a final
estimator is trained using the stacked predictions of these base estimators.

In this example, we illustrate the use case in which different regressors are
stacked together and a final linear penalized regressor is used to output the
prediction. We compare the performance of each individual regressor with the
stacking strategy. Stacking slightly improves the overall performance.

.. GENERATED FROM PYTHON SOURCE LINES 18-27

.. code-block:: default


    # Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>
    #          Maria Telenczuk    <https://github.com/maikia>
    # License: BSD 3 clause

    from sklearn import set_config

    set_config(display="diagram")








.. GENERATED FROM PYTHON SOURCE LINES 28-44

Download the dataset
#############################################################################

 We will use `Ames Housing`_ dataset which was first compiled by Dean De Cock
 and became better known after it was used in Kaggle challenge. It is a set
 of 1460 residential homes in Ames, Iowa, each described by 80 features. We
 will use it to predict the final logarithmic price of the houses. In this
 example we will use only 20 most interesting features chosen using
 GradientBoostingRegressor() and limit number of entries (here we won't go
 into the details on how to select the most interesting features).

 The Ames housing dataset is not shipped with scikit-learn and therefore we
 will fetch it from `OpenML`_.

 .. _`Ames Housing`: http://jse.amstat.org/v19n3/decock.pdf
 .. _`OpenML`: https://www.openml.org/d/42165

.. GENERATED FROM PYTHON SOURCE LINES 44-90

.. code-block:: default


    import numpy as np

    from sklearn.datasets import fetch_openml
    from sklearn.utils import shuffle


    def load_ames_housing():
        df = fetch_openml(name="house_prices", as_frame=True)
        X = df.data
        y = df.target

        features = [
            "YrSold",
            "HeatingQC",
            "Street",
            "YearRemodAdd",
            "Heating",
            "MasVnrType",
            "BsmtUnfSF",
            "Foundation",
            "MasVnrArea",
            "MSSubClass",
            "ExterQual",
            "Condition2",
            "GarageCars",
            "GarageType",
            "OverallQual",
            "TotalBsmtSF",
            "BsmtFinSF1",
            "HouseStyle",
            "MiscFeature",
            "MoSold",
        ]

        X = X[features]
        X, y = shuffle(X, y, random_state=0)

        X = X[:600]
        y = y[:600]
        return X, np.log(y)


    X, y = load_ames_housing()









.. GENERATED FROM PYTHON SOURCE LINES 91-97

Make pipeline to preprocess the data
#############################################################################

 Before we can use Ames dataset we still need to do some preprocessing.
 First, we will select the categorical and numerical columns of the dataset to
 construct the first step of the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 97-104

.. code-block:: default


    from sklearn.compose import make_column_selector

    cat_selector = make_column_selector(dtype_include=object)
    num_selector = make_column_selector(dtype_include=np.number)
    cat_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['HeatingQC', 'Street', 'Heating', 'MasVnrType', 'Foundation', 'ExterQual', 'Condition2', 'GarageType', 'HouseStyle', 'MiscFeature']



.. GENERATED FROM PYTHON SOURCE LINES 105-107

.. code-block:: default

    num_selector(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['YrSold', 'YearRemodAdd', 'BsmtUnfSF', 'MasVnrArea', 'MSSubClass', 'GarageCars', 'OverallQual', 'TotalBsmtSF', 'BsmtFinSF1', 'MoSold']



.. GENERATED FROM PYTHON SOURCE LINES 108-117

Then, we will need to design preprocessing pipelines which depends on the
ending regressor. If the ending regressor is a linear model, one needs to
one-hot encode the categories. If the ending regressor is a tree-based model
an ordinal encoder will be sufficient. Besides, numerical values need to be
standardized for a linear model while the raw numerical data can be treated
as is by a tree-based model. However, both models need an imputer to
handle missing values.

We will first design the pipeline required for the tree-based models.

.. GENERATED FROM PYTHON SOURCE LINES 117-133

.. code-block:: default


    from sklearn.compose import make_column_transformer
    from sklearn.impute import SimpleImputer
    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import OrdinalEncoder

    cat_tree_processor = OrdinalEncoder(
        handle_unknown="use_encoded_value", unknown_value=-1
    )
    num_tree_processor = SimpleImputer(strategy="mean", add_indicator=True)

    tree_preprocessor = make_column_transformer(
        (num_tree_processor, num_selector), (cat_tree_processor, cat_selector)
    )
    tree_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 {color: black;background-color: white;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 pre{padding: 0;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 div.sk-toggleable {background-color: white;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 div.sk-estimator:hover {background-color: #d4ebff;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 div.sk-item {z-index: 1;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 div.sk-parallel-item:only-child::after {width: 0;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246 div.sk-text-repr-fallback {display: none;}</style><div id="sk-bd46ab95-b689-46b3-a1e1-d41b0ed85246" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;)])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="396bf5ee-922e-46c7-bce0-a9d9a9099f9e" type="checkbox" ><label for="396bf5ee-922e-46c7-bce0-a9d9a9099f9e" class="sk-toggleable__label sk-toggleable__label-arrow">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="df660814-d3e6-4b84-8698-ecb98fee8cde" type="checkbox" ><label for="df660814-d3e6-4b84-8698-ecb98fee8cde" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="156f4824-3bcb-4bf1-863c-160cd63f119f" type="checkbox" ><label for="156f4824-3bcb-4bf1-863c-160cd63f119f" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="56fbd705-0fc5-4f5b-8451-60e8aa8bb000" type="checkbox" ><label for="56fbd705-0fc5-4f5b-8451-60e8aa8bb000" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f43152ad-2b59-47c7-89ae-8f5a42ce8b06" type="checkbox" ><label for="f43152ad-2b59-47c7-89ae-8f5a42ce8b06" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 134-136

Then, we will now define the preprocessor used when the ending regressor
is a linear model.

.. GENERATED FROM PYTHON SOURCE LINES 136-150

.. code-block:: default


    from sklearn.preprocessing import OneHotEncoder
    from sklearn.preprocessing import StandardScaler

    cat_linear_processor = OneHotEncoder(handle_unknown="ignore")
    num_linear_processor = make_pipeline(
        StandardScaler(), SimpleImputer(strategy="mean", add_indicator=True)
    )

    linear_preprocessor = make_column_transformer(
        (num_linear_processor, num_selector), (cat_linear_processor, cat_selector)
    )
    linear_preprocessor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-525b9253-01fb-4995-a535-4e134d40dddc {color: black;background-color: white;}#sk-525b9253-01fb-4995-a535-4e134d40dddc pre{padding: 0;}#sk-525b9253-01fb-4995-a535-4e134d40dddc div.sk-toggleable {background-color: white;}#sk-525b9253-01fb-4995-a535-4e134d40dddc label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-525b9253-01fb-4995-a535-4e134d40dddc label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-525b9253-01fb-4995-a535-4e134d40dddc label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-525b9253-01fb-4995-a535-4e134d40dddc div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-525b9253-01fb-4995-a535-4e134d40dddc div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-525b9253-01fb-4995-a535-4e134d40dddc div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-525b9253-01fb-4995-a535-4e134d40dddc input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-525b9253-01fb-4995-a535-4e134d40dddc input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-525b9253-01fb-4995-a535-4e134d40dddc div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-525b9253-01fb-4995-a535-4e134d40dddc div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-525b9253-01fb-4995-a535-4e134d40dddc input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-525b9253-01fb-4995-a535-4e134d40dddc div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-525b9253-01fb-4995-a535-4e134d40dddc div.sk-estimator:hover {background-color: #d4ebff;}#sk-525b9253-01fb-4995-a535-4e134d40dddc div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-525b9253-01fb-4995-a535-4e134d40dddc div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-525b9253-01fb-4995-a535-4e134d40dddc div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-525b9253-01fb-4995-a535-4e134d40dddc div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-525b9253-01fb-4995-a535-4e134d40dddc div.sk-item {z-index: 1;}#sk-525b9253-01fb-4995-a535-4e134d40dddc div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-525b9253-01fb-4995-a535-4e134d40dddc div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-525b9253-01fb-4995-a535-4e134d40dddc div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-525b9253-01fb-4995-a535-4e134d40dddc div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-525b9253-01fb-4995-a535-4e134d40dddc div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-525b9253-01fb-4995-a535-4e134d40dddc div.sk-parallel-item:only-child::after {width: 0;}#sk-525b9253-01fb-4995-a535-4e134d40dddc div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-525b9253-01fb-4995-a535-4e134d40dddc div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-525b9253-01fb-4995-a535-4e134d40dddc div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-525b9253-01fb-4995-a535-4e134d40dddc div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-525b9253-01fb-4995-a535-4e134d40dddc div.sk-text-repr-fallback {display: none;}</style><div id="sk-525b9253-01fb-4995-a535-4e134d40dddc" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;)])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="de4310bd-c653-4913-8f82-b1cb1de19dac" type="checkbox" ><label for="de4310bd-c653-4913-8f82-b1cb1de19dac" class="sk-toggleable__label sk-toggleable__label-arrow">ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="36132a30-5111-4ac8-afa5-08b784ae2bf9" type="checkbox" ><label for="36132a30-5111-4ac8-afa5-08b784ae2bf9" class="sk-toggleable__label sk-toggleable__label-arrow">pipeline</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="91ef15be-56ea-4c34-b568-2d1fb47e0cac" type="checkbox" ><label for="91ef15be-56ea-4c34-b568-2d1fb47e0cac" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3d1f7498-66be-43d4-8c74-484ec3f80810" type="checkbox" ><label for="3d1f7498-66be-43d4-8c74-484ec3f80810" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8e2d36f3-94b5-4d9e-b1e6-54cb9313a084" type="checkbox" ><label for="8e2d36f3-94b5-4d9e-b1e6-54cb9313a084" class="sk-toggleable__label sk-toggleable__label-arrow">onehotencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="304e9a08-ab08-4efd-9be9-d03405a46bdb" type="checkbox" ><label for="304e9a08-ab08-4efd-9be9-d03405a46bdb" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 151-169

Stack of predictors on a single data set
#############################################################################

 It is sometimes tedious to find the model which will best perform on a given
 dataset. Stacking provide an alternative by combining the outputs of several
 learners, without the need to choose a model specifically. The performance of
 stacking is usually close to the best model and sometimes it can outperform
 the prediction performance of each individual model.

 Here, we combine 3 learners (linear and non-linear) and use a ridge regressor
 to combine their outputs together.

 .. note::
    Although we will make new pipelines with the processors which we wrote in
    the previous section for the 3 learners, the final estimator
    :class:`~sklearn.linear_model.RidgeCV()` does not need preprocessing of
    the data as it will be fed with the already preprocessed output from the 3
    learners.

.. GENERATED FROM PYTHON SOURCE LINES 169-175

.. code-block:: default


    from sklearn.linear_model import LassoCV

    lasso_pipeline = make_pipeline(linear_preprocessor, LassoCV())
    lasso_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 {color: black;background-color: white;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 pre{padding: 0;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 div.sk-toggleable {background-color: white;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 div.sk-item {z-index: 1;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 div.sk-parallel-item:only-child::after {width: 0;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6 div.sk-text-repr-fallback {display: none;}</style><div id="sk-bca3f04e-08cb-4687-b6ae-05c2df44c4c6" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                                      Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                                       StandardScaler()),
                                                                      (&#x27;simpleimputer&#x27;,
                                                                       SimpleImputer(add_indicator=True))]),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;),
                                                     (&#x27;onehotencoder&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;)])),
                    (&#x27;lassocv&#x27;, LassoCV())])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="835c68c2-0a64-4892-95a4-cc5c5210fe8f" type="checkbox" ><label for="835c68c2-0a64-4892-95a4-cc5c5210fe8f" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                                      Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                                       StandardScaler()),
                                                                      (&#x27;simpleimputer&#x27;,
                                                                       SimpleImputer(add_indicator=True))]),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;),
                                                     (&#x27;onehotencoder&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;)])),
                    (&#x27;lassocv&#x27;, LassoCV())])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="815c0993-d81e-4a5c-a1d0-de7e2124c0f9" type="checkbox" ><label for="815c0993-d81e-4a5c-a1d0-de7e2124c0f9" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8b75297b-95ba-4259-a298-f85d49c5d15f" type="checkbox" ><label for="8b75297b-95ba-4259-a298-f85d49c5d15f" class="sk-toggleable__label sk-toggleable__label-arrow">pipeline</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="27592f7f-b2ad-43c9-bb3b-6ecc5288072b" type="checkbox" ><label for="27592f7f-b2ad-43c9-bb3b-6ecc5288072b" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9be56199-52af-40c8-b2eb-b3bc4e106ae5" type="checkbox" ><label for="9be56199-52af-40c8-b2eb-b3bc4e106ae5" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="06e65ca7-880e-4538-bfbb-308587ff863d" type="checkbox" ><label for="06e65ca7-880e-4538-bfbb-308587ff863d" class="sk-toggleable__label sk-toggleable__label-arrow">onehotencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="dcbddf68-40bd-453d-904f-fe672c9604f1" type="checkbox" ><label for="dcbddf68-40bd-453d-904f-fe672c9604f1" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="cbc253af-1543-40f4-8c81-502881a3770b" type="checkbox" ><label for="cbc253af-1543-40f4-8c81-502881a3770b" class="sk-toggleable__label sk-toggleable__label-arrow">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 176-181

.. code-block:: default

    from sklearn.ensemble import RandomForestRegressor

    rf_pipeline = make_pipeline(tree_preprocessor, RandomForestRegressor(random_state=42))
    rf_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 {color: black;background-color: white;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 pre{padding: 0;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 div.sk-toggleable {background-color: white;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 div.sk-item {z-index: 1;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 div.sk-parallel-item:only-child::after {width: 0;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7 div.sk-text-repr-fallback {display: none;}</style><div id="sk-6c14aab9-dfe0-4953-8a98-6a08f3c293e7" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;)])),
                    (&#x27;randomforestregressor&#x27;,
                     RandomForestRegressor(random_state=42))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ef06a800-e71c-4f74-bb99-da42f3a51950" type="checkbox" ><label for="ef06a800-e71c-4f74-bb99-da42f3a51950" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;)])),
                    (&#x27;randomforestregressor&#x27;,
                     RandomForestRegressor(random_state=42))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="970eabd4-c41b-46f0-8155-6ac0c7325e75" type="checkbox" ><label for="970eabd4-c41b-46f0-8155-6ac0c7325e75" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5fb10c2e-a607-41e6-bb5f-e6c0b615f114" type="checkbox" ><label for="5fb10c2e-a607-41e6-bb5f-e6c0b615f114" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f372d841-24e0-41b1-b68c-609979846c3d" type="checkbox" ><label for="f372d841-24e0-41b1-b68c-609979846c3d" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8629d754-4b11-457b-8d64-8a8b12bb8b02" type="checkbox" ><label for="8629d754-4b11-457b-8d64-8a8b12bb8b02" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="be10e36e-b3b5-4f89-a940-78a912b24d2b" type="checkbox" ><label for="be10e36e-b3b5-4f89-a940-78a912b24d2b" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="02c7e14e-67ed-4e16-8865-4f9e8a99c164" type="checkbox" ><label for="02c7e14e-67ed-4e16-8865-4f9e8a99c164" class="sk-toggleable__label sk-toggleable__label-arrow">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 182-189

.. code-block:: default

    from sklearn.ensemble import HistGradientBoostingRegressor

    gbdt_pipeline = make_pipeline(
        tree_preprocessor, HistGradientBoostingRegressor(random_state=0)
    )
    gbdt_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-458b5295-9bd7-4884-bd50-fad8670536ce {color: black;background-color: white;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce pre{padding: 0;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce div.sk-toggleable {background-color: white;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-458b5295-9bd7-4884-bd50-fad8670536ce div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce div.sk-estimator:hover {background-color: #d4ebff;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce div.sk-item {z-index: 1;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce div.sk-parallel-item:only-child::after {width: 0;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-458b5295-9bd7-4884-bd50-fad8670536ce div.sk-text-repr-fallback {display: none;}</style><div id="sk-458b5295-9bd7-4884-bd50-fad8670536ce" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;)])),
                    (&#x27;histgradientboostingregressor&#x27;,
                     HistGradientBoostingRegressor(random_state=0))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="842da7f0-c01b-427e-bbbe-68be2112ab66" type="checkbox" ><label for="842da7f0-c01b-427e-bbbe-68be2112ab66" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;),
                                                     (&#x27;ordinalencoder&#x27;,
                                                      OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                     unknown_value=-1),
                                                      &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;)])),
                    (&#x27;histgradientboostingregressor&#x27;,
                     HistGradientBoostingRegressor(random_state=0))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f7930f5e-a9ee-4210-b76f-446695abeeb5" type="checkbox" ><label for="f7930f5e-a9ee-4210-b76f-446695abeeb5" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0c2c6e00-4677-4f97-85dc-bcbeb26b7f52" type="checkbox" ><label for="0c2c6e00-4677-4f97-85dc-bcbeb26b7f52" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="07d03cdb-5383-4ed2-acc2-ea5998a0b3c4" type="checkbox" ><label for="07d03cdb-5383-4ed2-acc2-ea5998a0b3c4" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4e84b060-2ba1-4433-911f-0f25ecceca1e" type="checkbox" ><label for="4e84b060-2ba1-4433-911f-0f25ecceca1e" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="799815ad-9a11-4653-83c6-f016c9d02e87" type="checkbox" ><label for="799815ad-9a11-4653-83c6-f016c9d02e87" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5b65abb5-b17c-4679-bde7-c2364c4bd0dd" type="checkbox" ><label for="5b65abb5-b17c-4679-bde7-c2364c4bd0dd" class="sk-toggleable__label sk-toggleable__label-arrow">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 190-202

.. code-block:: default

    from sklearn.ensemble import StackingRegressor
    from sklearn.linear_model import RidgeCV

    estimators = [
        ("Random Forest", rf_pipeline),
        ("Lasso", lasso_pipeline),
        ("Gradient Boosting", gbdt_pipeline),
    ]

    stacking_regressor = StackingRegressor(estimators=estimators, final_estimator=RidgeCV())
    stacking_regressor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa {color: black;background-color: white;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa pre{padding: 0;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa div.sk-toggleable {background-color: white;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa div.sk-estimator:hover {background-color: #d4ebff;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa div.sk-item {z-index: 1;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa div.sk-parallel-item:only-child::after {width: 0;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa div.sk-text-repr-fallback {display: none;}</style><div id="sk-93478eb8-7c1b-495c-943e-dba6ce60f5aa" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>StackingRegressor(estimators=[(&#x27;Random Forest&#x27;,
                                   Pipeline(steps=[(&#x27;columntransformer&#x27;,
                                                    ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                                                     SimpleImputer(add_indicator=True),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose...
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;)])),
                                                   (&#x27;histgradientboostingregressor&#x27;,
                                                    HistGradientBoostingRegressor(random_state=0))]))],
                      final_estimator=RidgeCV())</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9dfff998-4c24-4a0a-8172-977770979e22" type="checkbox" ><label for="9dfff998-4c24-4a0a-8172-977770979e22" class="sk-toggleable__label sk-toggleable__label-arrow">StackingRegressor</label><div class="sk-toggleable__content"><pre>StackingRegressor(estimators=[(&#x27;Random Forest&#x27;,
                                   Pipeline(steps=[(&#x27;columntransformer&#x27;,
                                                    ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                                                                     SimpleImputer(add_indicator=True),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose...
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;),
                                                                                    (&#x27;ordinalencoder&#x27;,
                                                                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                                                                    unknown_value=-1),
                                                                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;)])),
                                                   (&#x27;histgradientboostingregressor&#x27;,
                                                    HistGradientBoostingRegressor(random_state=0))]))],
                      final_estimator=RidgeCV())</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Random Forest</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="71ab821a-a2a2-4d2c-a48b-bbca07007fa8" type="checkbox" ><label for="71ab821a-a2a2-4d2c-a48b-bbca07007fa8" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="eddfc886-50d9-46c1-883e-fd07983ac4b1" type="checkbox" ><label for="eddfc886-50d9-46c1-883e-fd07983ac4b1" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f25cf3d9-1a87-4133-8f06-8913d52808b6" type="checkbox" ><label for="f25cf3d9-1a87-4133-8f06-8913d52808b6" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="899e1f18-b9b4-4464-8b60-41a7ca482ae1" type="checkbox" ><label for="899e1f18-b9b4-4464-8b60-41a7ca482ae1" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5994b945-7ad2-41b2-ba27-62205b79d21e" type="checkbox" ><label for="5994b945-7ad2-41b2-ba27-62205b79d21e" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e6689580-e64c-47ba-8fb4-8ee42e7d8617" type="checkbox" ><label for="e6689580-e64c-47ba-8fb4-8ee42e7d8617" class="sk-toggleable__label sk-toggleable__label-arrow">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Lasso</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="cc6ad925-8cb9-456f-aff7-025a2e2e6f33" type="checkbox" ><label for="cc6ad925-8cb9-456f-aff7-025a2e2e6f33" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,
                                     Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                      StandardScaler()),
                                                     (&#x27;simpleimputer&#x27;,
                                                      SimpleImputer(add_indicator=True))]),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;),
                                    (&#x27;onehotencoder&#x27;,
                                     OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2bc14fe8-691c-45dd-9b73-cccd091db933" type="checkbox" ><label for="2bc14fe8-691c-45dd-9b73-cccd091db933" class="sk-toggleable__label sk-toggleable__label-arrow">pipeline</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="98de5af4-2e85-4672-86aa-22b2dc5074a8" type="checkbox" ><label for="98de5af4-2e85-4672-86aa-22b2dc5074a8" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="58fef9d2-80a1-4636-aebf-97c96dc74261" type="checkbox" ><label for="58fef9d2-80a1-4636-aebf-97c96dc74261" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="cfeba204-d80f-4d82-b6d0-83b519dd4e2c" type="checkbox" ><label for="cfeba204-d80f-4d82-b6d0-83b519dd4e2c" class="sk-toggleable__label sk-toggleable__label-arrow">onehotencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c39c3705-4747-45fc-89f7-b92db1678ac3" type="checkbox" ><label for="c39c3705-4747-45fc-89f7-b92db1678ac3" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="abc1b89e-0c0f-4ef4-864f-782ae2ad4e9e" type="checkbox" ><label for="abc1b89e-0c0f-4ef4-864f-782ae2ad4e9e" class="sk-toggleable__label sk-toggleable__label-arrow">LassoCV</label><div class="sk-toggleable__content"><pre>LassoCV()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>Gradient Boosting</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="05ee611a-c26f-4e39-ae3a-c35c18cad382" type="checkbox" ><label for="05ee611a-c26f-4e39-ae3a-c35c18cad382" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;simpleimputer&#x27;,
                                     SimpleImputer(add_indicator=True),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;),
                                    (&#x27;ordinalencoder&#x27;,
                                     OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,
                                                    unknown_value=-1),
                                     &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;)])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="cf63415f-4f29-490a-b722-a78774de2d89" type="checkbox" ><label for="cf63415f-4f29-490a-b722-a78774de2d89" class="sk-toggleable__label sk-toggleable__label-arrow">simpleimputer</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f11590423d0&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5f0a044f-5ba8-4d7e-8a0d-8a30bcb1d374" type="checkbox" ><label for="5f0a044f-5ba8-4d7e-8a0d-8a30bcb1d374" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(add_indicator=True)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f7f47c90-8696-484f-a40a-c68c762409ec" type="checkbox" ><label for="f7f47c90-8696-484f-a40a-c68c762409ec" class="sk-toggleable__label sk-toggleable__label-arrow">ordinalencoder</label><div class="sk-toggleable__content"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f1159042790&gt;</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e4ac9121-ad1b-4bb7-a119-a978a5146363" type="checkbox" ><label for="e4ac9121-ad1b-4bb7-a119-a978a5146363" class="sk-toggleable__label sk-toggleable__label-arrow">OrdinalEncoder</label><div class="sk-toggleable__content"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="51b8c98d-29a5-4155-9c36-2514ed4194d8" type="checkbox" ><label for="51b8c98d-29a5-4155-9c36-2514ed4194d8" class="sk-toggleable__label sk-toggleable__label-arrow">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor(random_state=0)</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><label>final_estimator</label></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="015404f3-4c28-40ee-892c-58e769601b74" type="checkbox" ><label for="015404f3-4c28-40ee-892c-58e769601b74" class="sk-toggleable__label sk-toggleable__label-arrow">RidgeCV</label><div class="sk-toggleable__content"><pre>RidgeCV()</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 203-212

Measure and plot the results
#############################################################################

 Now we can use Ames Housing dataset to make the predictions. We check the
 performance of each individual predictor as well as of the stack of the
 regressors.

 The function ``plot_regression_results`` is used to plot the predicted and
 true targets.

.. GENERATED FROM PYTHON SOURCE LINES 212-277

.. code-block:: default



    import time
    import matplotlib.pyplot as plt
    from sklearn.model_selection import cross_validate, cross_val_predict


    def plot_regression_results(ax, y_true, y_pred, title, scores, elapsed_time):
        """Scatter plot of the predicted vs true targets."""
        ax.plot(
            [y_true.min(), y_true.max()], [y_true.min(), y_true.max()], "--r", linewidth=2
        )
        ax.scatter(y_true, y_pred, alpha=0.2)

        ax.spines["top"].set_visible(False)
        ax.spines["right"].set_visible(False)
        ax.get_xaxis().tick_bottom()
        ax.get_yaxis().tick_left()
        ax.spines["left"].set_position(("outward", 10))
        ax.spines["bottom"].set_position(("outward", 10))
        ax.set_xlim([y_true.min(), y_true.max()])
        ax.set_ylim([y_true.min(), y_true.max()])
        ax.set_xlabel("Measured")
        ax.set_ylabel("Predicted")
        extra = plt.Rectangle(
            (0, 0), 0, 0, fc="w", fill=False, edgecolor="none", linewidth=0
        )
        ax.legend([extra], [scores], loc="upper left")
        title = title + "\n Evaluation in {:.2f} seconds".format(elapsed_time)
        ax.set_title(title)


    fig, axs = plt.subplots(2, 2, figsize=(9, 7))
    axs = np.ravel(axs)

    for ax, (name, est) in zip(
        axs, estimators + [("Stacking Regressor", stacking_regressor)]
    ):
        start_time = time.time()
        score = cross_validate(
            est, X, y, scoring=["r2", "neg_mean_absolute_error"], n_jobs=2, verbose=0
        )
        elapsed_time = time.time() - start_time

        y_pred = cross_val_predict(est, X, y, n_jobs=2, verbose=0)

        plot_regression_results(
            ax,
            y,
            y_pred,
            name,
            (r"$R^2={:.2f} \pm {:.2f}$" + "\n" + r"$MAE={:.2f} \pm {:.2f}$").format(
                np.mean(score["test_r2"]),
                np.std(score["test_r2"]),
                -np.mean(score["test_neg_mean_absolute_error"]),
                np.std(score["test_neg_mean_absolute_error"]),
            ),
            elapsed_time,
        )

    plt.suptitle("Single predictors versus stacked predictors")
    plt.tight_layout()
    plt.subplots_adjust(top=0.9)
    plt.show()




.. image-sg:: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :alt: Single predictors versus stacked predictors, Random Forest  Evaluation in 0.75 seconds, Lasso  Evaluation in 0.20 seconds, Gradient Boosting  Evaluation in 0.49 seconds, Stacking Regressor  Evaluation in 8.12 seconds
   :srcset: /auto_examples/ensemble/images/sphx_glr_plot_stack_predictors_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 278-281

The stacked regressor will combine the strengths of the different regressors.
However, we also see that training the stacked regressor is much more
computationally expensive.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  19.920 seconds)


.. _sphx_glr_download_auto_examples_ensemble_plot_stack_predictors.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/ensemble/plot_stack_predictors.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_stack_predictors.py <plot_stack_predictors.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_stack_predictors.ipynb <plot_stack_predictors.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
