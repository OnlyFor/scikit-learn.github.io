
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/miscellaneous/plot_pipeline_display.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_miscellaneous_plot_pipeline_display.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_miscellaneous_plot_pipeline_display.py:


=================================================================
Displaying Pipelines
=================================================================

The default configuration for displaying a pipeline is `'text'` where
`set_config(display='text')`.  To visualize the diagram in Jupyter Notebook,
use `set_config(display='diagram')` and then output the pipeline object.

To see more detailed steps in the visualization of the pipeline, click on the
steps in the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 15-21

Displaying a Pipeline with a Preprocessing Step and Classifier
###############################################################################
 This section constructs a :class:`~sklearn.pipeline.Pipeline` with a preprocessing
 step, :class:`~sklearn.preprocessing.StandardScaler`, and classifier,
 :class:`~sklearn.linear_model.LogisticRegression`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 21-33

.. code-block:: default


    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler
    from sklearn.linear_model import LogisticRegression
    from sklearn import set_config

    steps = [
        ("preprocessing", StandardScaler()),
        ("classifier", LogisticRegression()),
    ]
    pipe = Pipeline(steps)








.. GENERATED FROM PYTHON SOURCE LINES 34-35

To view the text pipeline, the default is `display='text'`.

.. GENERATED FROM PYTHON SOURCE LINES 35-38

.. code-block:: default

    set_config(display="text")
    pipe





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Pipeline(steps=[('preprocessing', StandardScaler()),
                    ('classifier', LogisticRegression())])



.. GENERATED FROM PYTHON SOURCE LINES 39-40

To visualize the diagram, change `display='diagram'`.

.. GENERATED FROM PYTHON SOURCE LINES 40-43

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c {color: black;background-color: white;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c pre{padding: 0;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c div.sk-toggleable {background-color: white;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c div.sk-estimator:hover {background-color: #d4ebff;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c div.sk-item {z-index: 1;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c div.sk-parallel-item:only-child::after {width: 0;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-2b12036a-96c9-4952-ac46-fe0a40065c2c div.sk-text-repr-fallback {display: none;}</style><div id="sk-2b12036a-96c9-4952-ac46-fe0a40065c2c" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;preprocessing&#x27;, StandardScaler()),
                    (&#x27;classifier&#x27;, LogisticRegression())])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8ba54d53-ef58-47fd-8195-f4658972d6d8" type="checkbox" ><label for="8ba54d53-ef58-47fd-8195-f4658972d6d8" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;preprocessing&#x27;, StandardScaler()),
                    (&#x27;classifier&#x27;, LogisticRegression())])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="83609ebd-14b1-400a-b1aa-fb3286d83940" type="checkbox" ><label for="83609ebd-14b1-400a-b1aa-fb3286d83940" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="738c37e5-9671-4f95-9139-11c2d6ce8454" type="checkbox" ><label for="738c37e5-9671-4f95-9139-11c2d6ce8454" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 44-51

Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier
###############################################################################
 This section constructs a :class:`~sklearn.pipeline.Pipeline` with multiple
 preprocessing steps, :class:`~sklearn.preprocessing.PolynomialFeatures` and
 :class:`~sklearn.preprocessing.StandardScaler`, and a classifer step,
 :class:`~sklearn.linear_model.LogisticRegression`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 51-64

.. code-block:: default


    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler, PolynomialFeatures
    from sklearn.linear_model import LogisticRegression
    from sklearn import set_config

    steps = [
        ("standard_scaler", StandardScaler()),
        ("polynomial", PolynomialFeatures(degree=3)),
        ("classifier", LogisticRegression(C=2.0)),
    ]
    pipe = Pipeline(steps)








.. GENERATED FROM PYTHON SOURCE LINES 65-66

To visualize the diagram, change to display='diagram'

.. GENERATED FROM PYTHON SOURCE LINES 66-69

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 {color: black;background-color: white;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 pre{padding: 0;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 div.sk-toggleable {background-color: white;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 div.sk-estimator:hover {background-color: #d4ebff;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 div.sk-item {z-index: 1;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 div.sk-parallel-item:only-child::after {width: 0;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051 div.sk-text-repr-fallback {display: none;}</style><div id="sk-bc6f9412-35b3-4da9-9a2a-9b45f95f9051" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;standard_scaler&#x27;, StandardScaler()),
                    (&#x27;polynomial&#x27;, PolynomialFeatures(degree=3)),
                    (&#x27;classifier&#x27;, LogisticRegression(C=2.0))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="23e1d08c-34f0-486b-ac5e-be6175d4d484" type="checkbox" ><label for="23e1d08c-34f0-486b-ac5e-be6175d4d484" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;standard_scaler&#x27;, StandardScaler()),
                    (&#x27;polynomial&#x27;, PolynomialFeatures(degree=3)),
                    (&#x27;classifier&#x27;, LogisticRegression(C=2.0))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8f15e2c8-0e76-4fce-89a4-eb2dc4b14718" type="checkbox" ><label for="8f15e2c8-0e76-4fce-89a4-eb2dc4b14718" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e3a2957a-d725-4fa1-ad7f-39c8d9247533" type="checkbox" ><label for="e3a2957a-d725-4fa1-ad7f-39c8d9247533" class="sk-toggleable__label sk-toggleable__label-arrow">PolynomialFeatures</label><div class="sk-toggleable__content"><pre>PolynomialFeatures(degree=3)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c1da0649-266b-480f-bbf8-14aea4b7b5d6" type="checkbox" ><label for="c1da0649-266b-480f-bbf8-14aea4b7b5d6" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(C=2.0)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 70-76

Displaying a Pipeline and Dimensionality Reduction and Classifier
###############################################################################
 This section constructs a :class:`~sklearn.pipeline.Pipeline` with a
 dimensionality reduction step, :class:`~sklearn.decomposition.PCA`,
 a classifier, :class:`~sklearn.svm.SVC`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 76-85

.. code-block:: default


    from sklearn.pipeline import Pipeline
    from sklearn.svm import SVC
    from sklearn.decomposition import PCA
    from sklearn import set_config

    steps = [("reduce_dim", PCA(n_components=4)), ("classifier", SVC(kernel="linear"))]
    pipe = Pipeline(steps)








.. GENERATED FROM PYTHON SOURCE LINES 86-87

To visualize the diagram, change to `display='diagram'`.

.. GENERATED FROM PYTHON SOURCE LINES 87-90

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-7c58dd79-0404-49f5-946a-da7585a68e4b {color: black;background-color: white;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b pre{padding: 0;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b div.sk-toggleable {background-color: white;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b div.sk-estimator:hover {background-color: #d4ebff;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b div.sk-item {z-index: 1;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b div.sk-parallel-item:only-child::after {width: 0;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-7c58dd79-0404-49f5-946a-da7585a68e4b div.sk-text-repr-fallback {display: none;}</style><div id="sk-7c58dd79-0404-49f5-946a-da7585a68e4b" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;reduce_dim&#x27;, PCA(n_components=4)),
                    (&#x27;classifier&#x27;, SVC(kernel=&#x27;linear&#x27;))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9aa879be-5884-470c-9e74-ade043ee8f38" type="checkbox" ><label for="9aa879be-5884-470c-9e74-ade043ee8f38" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;reduce_dim&#x27;, PCA(n_components=4)),
                    (&#x27;classifier&#x27;, SVC(kernel=&#x27;linear&#x27;))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="382cc657-2a94-4be5-a7a4-2bfb2110b2fe" type="checkbox" ><label for="382cc657-2a94-4be5-a7a4-2bfb2110b2fe" class="sk-toggleable__label sk-toggleable__label-arrow">PCA</label><div class="sk-toggleable__content"><pre>PCA(n_components=4)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d4c08e02-9a39-4cb9-b3d5-4ff21926f91c" type="checkbox" ><label for="d4c08e02-9a39-4cb9-b3d5-4ff21926f91c" class="sk-toggleable__label sk-toggleable__label-arrow">SVC</label><div class="sk-toggleable__content"><pre>SVC(kernel=&#x27;linear&#x27;)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 91-97

Displaying a Complex Pipeline Chaining a Column Transformer
###############################################################################
 This section constructs a complex :class:`~sklearn.pipeline.Pipeline` with a
 :class:`~sklearn.compose.ColumnTransformer` and a classifier,
 :class:`~sklearn.linear_model.LogisticRegression`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 97-133

.. code-block:: default


    import numpy as np
    from sklearn.pipeline import make_pipeline
    from sklearn.pipeline import Pipeline
    from sklearn.impute import SimpleImputer
    from sklearn.compose import ColumnTransformer
    from sklearn.preprocessing import OneHotEncoder, StandardScaler
    from sklearn.linear_model import LogisticRegression
    from sklearn import set_config

    numeric_preprocessor = Pipeline(
        steps=[
            ("imputation_mean", SimpleImputer(missing_values=np.nan, strategy="mean")),
            ("scaler", StandardScaler()),
        ]
    )

    categorical_preprocessor = Pipeline(
        steps=[
            (
                "imputation_constant",
                SimpleImputer(fill_value="missing", strategy="constant"),
            ),
            ("onehot", OneHotEncoder(handle_unknown="ignore")),
        ]
    )

    preprocessor = ColumnTransformer(
        [
            ("categorical", categorical_preprocessor, ["state", "gender"]),
            ("numerical", numeric_preprocessor, ["age", "weight"]),
        ]
    )

    pipe = make_pipeline(preprocessor, LogisticRegression(max_iter=500))








.. GENERATED FROM PYTHON SOURCE LINES 134-135

To visualize the diagram, change to `display='diagram'`

.. GENERATED FROM PYTHON SOURCE LINES 135-138

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 {color: black;background-color: white;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 pre{padding: 0;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 div.sk-toggleable {background-color: white;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 div.sk-estimator:hover {background-color: #d4ebff;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 div.sk-item {z-index: 1;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 div.sk-parallel-item:only-child::after {width: 0;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89 div.sk-text-repr-fallback {display: none;}</style><div id="sk-934d23a8-3ad5-4d4d-a733-bdbca9565d89" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                       SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                     strategy=&#x27;constant&#x27;)),
                                                                      (&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                      [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                                     (&#x27;numerical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                       SimpleImputer()),
                                                                      (&#x27;scaler&#x27;,
                                                                       StandardScaler())]),
                                                      [&#x27;age&#x27;, &#x27;weight&#x27;])])),
                    (&#x27;logisticregression&#x27;, LogisticRegression(max_iter=500))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5f267ca6-b1d0-4554-a060-3dd1dd7b11c7" type="checkbox" ><label for="5f267ca6-b1d0-4554-a060-3dd1dd7b11c7" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                       SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                     strategy=&#x27;constant&#x27;)),
                                                                      (&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                      [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                                     (&#x27;numerical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                       SimpleImputer()),
                                                                      (&#x27;scaler&#x27;,
                                                                       StandardScaler())]),
                                                      [&#x27;age&#x27;, &#x27;weight&#x27;])])),
                    (&#x27;logisticregression&#x27;, LogisticRegression(max_iter=500))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="052e6d51-5c7c-4e28-88a0-e77ddbf1169e" type="checkbox" ><label for="052e6d51-5c7c-4e28-88a0-e77ddbf1169e" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                      SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                    strategy=&#x27;constant&#x27;)),
                                                     (&#x27;onehot&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                     [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                    (&#x27;numerical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                      SimpleImputer()),
                                                     (&#x27;scaler&#x27;, StandardScaler())]),
                                     [&#x27;age&#x27;, &#x27;weight&#x27;])])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="69633944-2794-4625-9f01-e1837df41da4" type="checkbox" ><label for="69633944-2794-4625-9f01-e1837df41da4" class="sk-toggleable__label sk-toggleable__label-arrow">categorical</label><div class="sk-toggleable__content"><pre>[&#x27;state&#x27;, &#x27;gender&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="533c9119-6dcd-4bc0-80d9-8ebc81a40b3c" type="checkbox" ><label for="533c9119-6dcd-4bc0-80d9-8ebc81a40b3c" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(fill_value=&#x27;missing&#x27;, strategy=&#x27;constant&#x27;)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6dc6a707-c840-4a88-bf3c-eeaa8db6b009" type="checkbox" ><label for="6dc6a707-c840-4a88-bf3c-eeaa8db6b009" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6a100e87-7727-44a4-aeaa-211f04cb4a09" type="checkbox" ><label for="6a100e87-7727-44a4-aeaa-211f04cb4a09" class="sk-toggleable__label sk-toggleable__label-arrow">numerical</label><div class="sk-toggleable__content"><pre>[&#x27;age&#x27;, &#x27;weight&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="869bf58d-e577-4a9d-b198-6712e3782ab4" type="checkbox" ><label for="869bf58d-e577-4a9d-b198-6712e3782ab4" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="724935fc-8432-40c9-b620-e00acc573674" type="checkbox" ><label for="724935fc-8432-40c9-b620-e00acc573674" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="26fdc13a-15ee-4b3c-b38e-014c5b04c115" type="checkbox" ><label for="26fdc13a-15ee-4b3c-b38e-014c5b04c115" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(max_iter=500)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 139-145

Displaying a Grid Search over a Pipeline with a Classifier
###############################################################################
 This section constructs a :class:`~sklearn.model_selection.GridSearchCV`
 over a :class:`~sklearn.pipeline.Pipeline` with
 :class:`~sklearn.ensemble.RandomForestClassifier` and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 145-193

.. code-block:: default


    import numpy as np
    from sklearn.pipeline import make_pipeline
    from sklearn.pipeline import Pipeline
    from sklearn.impute import SimpleImputer
    from sklearn.compose import ColumnTransformer
    from sklearn.preprocessing import OneHotEncoder, StandardScaler
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.model_selection import GridSearchCV
    from sklearn import set_config

    numeric_preprocessor = Pipeline(
        steps=[
            ("imputation_mean", SimpleImputer(missing_values=np.nan, strategy="mean")),
            ("scaler", StandardScaler()),
        ]
    )

    categorical_preprocessor = Pipeline(
        steps=[
            (
                "imputation_constant",
                SimpleImputer(fill_value="missing", strategy="constant"),
            ),
            ("onehot", OneHotEncoder(handle_unknown="ignore")),
        ]
    )

    preprocessor = ColumnTransformer(
        [
            ("categorical", categorical_preprocessor, ["state", "gender"]),
            ("numerical", numeric_preprocessor, ["age", "weight"]),
        ]
    )

    pipe = Pipeline(
        steps=[("preprocessor", preprocessor), ("classifier", RandomForestClassifier())]
    )

    param_grid = {
        "classifier__n_estimators": [200, 500],
        "classifier__max_features": ["auto", "sqrt", "log2"],
        "classifier__max_depth": [4, 5, 6, 7, 8],
        "classifier__criterion": ["gini", "entropy"],
    }

    grid_search = GridSearchCV(pipe, param_grid=param_grid, n_jobs=1)








.. GENERATED FROM PYTHON SOURCE LINES 194-195

To visualize the diagram, change to `display='diagram'`.

.. GENERATED FROM PYTHON SOURCE LINES 195-197

.. code-block:: default

    set_config(display="diagram")
    grid_search  # click on the diagram below to see the details of each step





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 {color: black;background-color: white;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 pre{padding: 0;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 div.sk-toggleable {background-color: white;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 div.sk-item {z-index: 1;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 div.sk-parallel-item:only-child::after {width: 0;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-dae1da89-c3f1-4984-8304-429bcadf8ed1 div.sk-text-repr-fallback {display: none;}</style><div id="sk-dae1da89-c3f1-4984-8304-429bcadf8ed1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>GridSearchCV(estimator=Pipeline(steps=[(&#x27;preprocessor&#x27;,
                                            ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                                              SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                                            strategy=&#x27;constant&#x27;)),
                                                                                             (&#x27;onehot&#x27;,
                                                                                              OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                                             [&#x27;state&#x27;,
                                                                              &#x27;gender&#x27;]),
                                                                            (&#x27;numerical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                                              SimpleImputer()),
                                                                                             (&#x27;scaler&#x27;,
                                                                                              StandardScaler())]),
                                                                             [&#x27;age&#x27;,
                                                                              &#x27;weight&#x27;])])),
                                           (&#x27;classifier&#x27;,
                                            RandomForestClassifier())]),
                 n_jobs=1,
                 param_grid={&#x27;classifier__criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],
                             &#x27;classifier__max_depth&#x27;: [4, 5, 6, 7, 8],
                             &#x27;classifier__max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;, &#x27;log2&#x27;],
                             &#x27;classifier__n_estimators&#x27;: [200, 500]})</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ef67a8a9-aa44-4a3a-9de2-8accb6a3e6b4" type="checkbox" ><label for="ef67a8a9-aa44-4a3a-9de2-8accb6a3e6b4" class="sk-toggleable__label sk-toggleable__label-arrow">GridSearchCV</label><div class="sk-toggleable__content"><pre>GridSearchCV(estimator=Pipeline(steps=[(&#x27;preprocessor&#x27;,
                                            ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                                              SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                                            strategy=&#x27;constant&#x27;)),
                                                                                             (&#x27;onehot&#x27;,
                                                                                              OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                                             [&#x27;state&#x27;,
                                                                              &#x27;gender&#x27;]),
                                                                            (&#x27;numerical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                                              SimpleImputer()),
                                                                                             (&#x27;scaler&#x27;,
                                                                                              StandardScaler())]),
                                                                             [&#x27;age&#x27;,
                                                                              &#x27;weight&#x27;])])),
                                           (&#x27;classifier&#x27;,
                                            RandomForestClassifier())]),
                 n_jobs=1,
                 param_grid={&#x27;classifier__criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],
                             &#x27;classifier__max_depth&#x27;: [4, 5, 6, 7, 8],
                             &#x27;classifier__max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;, &#x27;log2&#x27;],
                             &#x27;classifier__n_estimators&#x27;: [200, 500]})</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8cc9343d-7080-47ad-96b6-afe0b8e29f18" type="checkbox" ><label for="8cc9343d-7080-47ad-96b6-afe0b8e29f18" class="sk-toggleable__label sk-toggleable__label-arrow">estimator: Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,
                     ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                       SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                     strategy=&#x27;constant&#x27;)),
                                                                      (&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                      [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                                     (&#x27;numerical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                       SimpleImputer()),
                                                                      (&#x27;scaler&#x27;,
                                                                       StandardScaler())]),
                                                      [&#x27;age&#x27;, &#x27;weight&#x27;])])),
                    (&#x27;classifier&#x27;, RandomForestClassifier())])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1426dd42-0422-40d1-b171-4e5741faa0e2" type="checkbox" ><label for="1426dd42-0422-40d1-b171-4e5741faa0e2" class="sk-toggleable__label sk-toggleable__label-arrow">preprocessor: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                      SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                    strategy=&#x27;constant&#x27;)),
                                                     (&#x27;onehot&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                     [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                    (&#x27;numerical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                      SimpleImputer()),
                                                     (&#x27;scaler&#x27;, StandardScaler())]),
                                     [&#x27;age&#x27;, &#x27;weight&#x27;])])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8d0a6fda-f6b9-479a-9fac-fc56f7f9e18b" type="checkbox" ><label for="8d0a6fda-f6b9-479a-9fac-fc56f7f9e18b" class="sk-toggleable__label sk-toggleable__label-arrow">categorical</label><div class="sk-toggleable__content"><pre>[&#x27;state&#x27;, &#x27;gender&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ff1af803-e80a-4f2b-9607-02fc42eb2439" type="checkbox" ><label for="ff1af803-e80a-4f2b-9607-02fc42eb2439" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(fill_value=&#x27;missing&#x27;, strategy=&#x27;constant&#x27;)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ed8e4a76-11ea-4e33-bb07-ff689341e597" type="checkbox" ><label for="ed8e4a76-11ea-4e33-bb07-ff689341e597" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5b7f13d3-00c9-4dba-b590-ed5a20688a42" type="checkbox" ><label for="5b7f13d3-00c9-4dba-b590-ed5a20688a42" class="sk-toggleable__label sk-toggleable__label-arrow">numerical</label><div class="sk-toggleable__content"><pre>[&#x27;age&#x27;, &#x27;weight&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="616f9835-d9e0-4d06-bf3b-6aba3c4235fc" type="checkbox" ><label for="616f9835-d9e0-4d06-bf3b-6aba3c4235fc" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="dea092dc-daf8-43f8-bd2a-cd9208066cee" type="checkbox" ><label for="dea092dc-daf8-43f8-bd2a-cd9208066cee" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="062514ee-06dc-43b6-9ee7-1d8cf08e9a02" type="checkbox" ><label for="062514ee-06dc-43b6-9ee7-1d8cf08e9a02" class="sk-toggleable__label sk-toggleable__label-arrow">RandomForestClassifier</label><div class="sk-toggleable__content"><pre>RandomForestClassifier()</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.094 seconds)


.. _sphx_glr_download_auto_examples_miscellaneous_plot_pipeline_display.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/miscellaneous/plot_pipeline_display.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_pipeline_display.py <plot_pipeline_display.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_pipeline_display.ipynb <plot_pipeline_display.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
