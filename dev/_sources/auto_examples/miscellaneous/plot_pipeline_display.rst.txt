
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/miscellaneous/plot_pipeline_display.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_miscellaneous_plot_pipeline_display.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_miscellaneous_plot_pipeline_display.py:


=================================================================
Displaying Pipelines
=================================================================

The default configuration for displaying a pipeline is `'text'` where
`set_config(display='text')`.  To visualize the diagram in Jupyter Notebook,
use `set_config(display='diagram')` and then output the pipeline object.

To see more detailed steps in the visualization of the pipeline, click on the
steps in the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 15-21

Displaying a Pipeline with a Preprocessing Step and Classifier
###############################################################################
 This section constructs a :class:`~sklearn.pipeline.Pipeline` with a preprocessing
 step, :class:`~sklearn.preprocessing.StandardScaler`, and classifier,
 :class:`~sklearn.linear_model.LogisticRegression`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 21-33

.. code-block:: default


    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler
    from sklearn.linear_model import LogisticRegression
    from sklearn import set_config

    steps = [
        ("preprocessing", StandardScaler()),
        ("classifier", LogisticRegression()),
    ]
    pipe = Pipeline(steps)








.. GENERATED FROM PYTHON SOURCE LINES 34-35

To view the text pipeline, the default is `display='text'`.

.. GENERATED FROM PYTHON SOURCE LINES 35-38

.. code-block:: default

    set_config(display="text")
    pipe





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Pipeline(steps=[('preprocessing', StandardScaler()),
                    ('classifier', LogisticRegression())])



.. GENERATED FROM PYTHON SOURCE LINES 39-40

To visualize the diagram, change `display='diagram'`.

.. GENERATED FROM PYTHON SOURCE LINES 40-43

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 {color: black;background-color: white;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 pre{padding: 0;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 div.sk-toggleable {background-color: white;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 div.sk-estimator:hover {background-color: #d4ebff;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 div.sk-item {z-index: 1;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 div.sk-parallel-item:only-child::after {width: 0;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8 div.sk-text-repr-fallback {display: none;}</style><div id="sk-886d7a40-7ebe-4386-9d8b-3bb7b4026aa8" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;preprocessing&#x27;, StandardScaler()),
                    (&#x27;classifier&#x27;, LogisticRegression())])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="fb51e756-5eeb-4b16-a43a-6621339b05e0" type="checkbox" ><label for="fb51e756-5eeb-4b16-a43a-6621339b05e0" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;preprocessing&#x27;, StandardScaler()),
                    (&#x27;classifier&#x27;, LogisticRegression())])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5d1b2cf4-2048-431b-bc3a-929c1d821236" type="checkbox" ><label for="5d1b2cf4-2048-431b-bc3a-929c1d821236" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="071c9500-e9f1-4a79-8761-7053e7b1b042" type="checkbox" ><label for="071c9500-e9f1-4a79-8761-7053e7b1b042" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 44-51

Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier
###############################################################################
 This section constructs a :class:`~sklearn.pipeline.Pipeline` with multiple
 preprocessing steps, :class:`~sklearn.preprocessing.PolynomialFeatures` and
 :class:`~sklearn.preprocessing.StandardScaler`, and a classifer step,
 :class:`~sklearn.linear_model.LogisticRegression`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 51-64

.. code-block:: default


    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler, PolynomialFeatures
    from sklearn.linear_model import LogisticRegression
    from sklearn import set_config

    steps = [
        ("standard_scaler", StandardScaler()),
        ("polynomial", PolynomialFeatures(degree=3)),
        ("classifier", LogisticRegression(C=2.0)),
    ]
    pipe = Pipeline(steps)








.. GENERATED FROM PYTHON SOURCE LINES 65-66

To visualize the diagram, change to display='diagram'

.. GENERATED FROM PYTHON SOURCE LINES 66-69

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 {color: black;background-color: white;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 pre{padding: 0;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 div.sk-toggleable {background-color: white;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 div.sk-estimator:hover {background-color: #d4ebff;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 div.sk-item {z-index: 1;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 div.sk-parallel-item:only-child::after {width: 0;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-4767f42d-0eeb-4e36-a303-d8291430fe99 div.sk-text-repr-fallback {display: none;}</style><div id="sk-4767f42d-0eeb-4e36-a303-d8291430fe99" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;standard_scaler&#x27;, StandardScaler()),
                    (&#x27;polynomial&#x27;, PolynomialFeatures(degree=3)),
                    (&#x27;classifier&#x27;, LogisticRegression(C=2.0))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6386e003-68b4-45a5-9dad-6f027f98b98e" type="checkbox" ><label for="6386e003-68b4-45a5-9dad-6f027f98b98e" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;standard_scaler&#x27;, StandardScaler()),
                    (&#x27;polynomial&#x27;, PolynomialFeatures(degree=3)),
                    (&#x27;classifier&#x27;, LogisticRegression(C=2.0))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d51a376f-4a63-434b-9c45-569cfcd5a872" type="checkbox" ><label for="d51a376f-4a63-434b-9c45-569cfcd5a872" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="47b5eeca-5485-49bd-a8a7-e27f8beb3909" type="checkbox" ><label for="47b5eeca-5485-49bd-a8a7-e27f8beb3909" class="sk-toggleable__label sk-toggleable__label-arrow">PolynomialFeatures</label><div class="sk-toggleable__content"><pre>PolynomialFeatures(degree=3)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="eeca57d5-70bc-489c-a407-05c414c04440" type="checkbox" ><label for="eeca57d5-70bc-489c-a407-05c414c04440" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(C=2.0)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 70-76

Displaying a Pipeline and Dimensionality Reduction and Classifier
###############################################################################
 This section constructs a :class:`~sklearn.pipeline.Pipeline` with a
 dimensionality reduction step, :class:`~sklearn.decomposition.PCA`,
 a classifier, :class:`~sklearn.svm.SVC`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 76-85

.. code-block:: default


    from sklearn.pipeline import Pipeline
    from sklearn.svm import SVC
    from sklearn.decomposition import PCA
    from sklearn import set_config

    steps = [("reduce_dim", PCA(n_components=4)), ("classifier", SVC(kernel="linear"))]
    pipe = Pipeline(steps)








.. GENERATED FROM PYTHON SOURCE LINES 86-87

To visualize the diagram, change to `display='diagram'`.

.. GENERATED FROM PYTHON SOURCE LINES 87-90

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad {color: black;background-color: white;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad pre{padding: 0;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad div.sk-toggleable {background-color: white;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad div.sk-estimator:hover {background-color: #d4ebff;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad div.sk-item {z-index: 1;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad div.sk-parallel-item:only-child::after {width: 0;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad div.sk-text-repr-fallback {display: none;}</style><div id="sk-e07e709d-0c55-4c72-a5d8-17787eb4d2ad" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;reduce_dim&#x27;, PCA(n_components=4)),
                    (&#x27;classifier&#x27;, SVC(kernel=&#x27;linear&#x27;))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8fd691ee-0423-4a1d-b699-48bc7b343564" type="checkbox" ><label for="8fd691ee-0423-4a1d-b699-48bc7b343564" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;reduce_dim&#x27;, PCA(n_components=4)),
                    (&#x27;classifier&#x27;, SVC(kernel=&#x27;linear&#x27;))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="12b76ece-0d18-476b-ab45-0e21bfaac50f" type="checkbox" ><label for="12b76ece-0d18-476b-ab45-0e21bfaac50f" class="sk-toggleable__label sk-toggleable__label-arrow">PCA</label><div class="sk-toggleable__content"><pre>PCA(n_components=4)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d2a01cdc-64f8-43c5-98e1-92945756ad40" type="checkbox" ><label for="d2a01cdc-64f8-43c5-98e1-92945756ad40" class="sk-toggleable__label sk-toggleable__label-arrow">SVC</label><div class="sk-toggleable__content"><pre>SVC(kernel=&#x27;linear&#x27;)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 91-97

Displaying a Complex Pipeline Chaining a Column Transformer
###############################################################################
 This section constructs a complex :class:`~sklearn.pipeline.Pipeline` with a
 :class:`~sklearn.compose.ColumnTransformer` and a classifier,
 :class:`~sklearn.linear_model.LogisticRegression`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 97-133

.. code-block:: default


    import numpy as np
    from sklearn.pipeline import make_pipeline
    from sklearn.pipeline import Pipeline
    from sklearn.impute import SimpleImputer
    from sklearn.compose import ColumnTransformer
    from sklearn.preprocessing import OneHotEncoder, StandardScaler
    from sklearn.linear_model import LogisticRegression
    from sklearn import set_config

    numeric_preprocessor = Pipeline(
        steps=[
            ("imputation_mean", SimpleImputer(missing_values=np.nan, strategy="mean")),
            ("scaler", StandardScaler()),
        ]
    )

    categorical_preprocessor = Pipeline(
        steps=[
            (
                "imputation_constant",
                SimpleImputer(fill_value="missing", strategy="constant"),
            ),
            ("onehot", OneHotEncoder(handle_unknown="ignore")),
        ]
    )

    preprocessor = ColumnTransformer(
        [
            ("categorical", categorical_preprocessor, ["state", "gender"]),
            ("numerical", numeric_preprocessor, ["age", "weight"]),
        ]
    )

    pipe = make_pipeline(preprocessor, LogisticRegression(max_iter=500))








.. GENERATED FROM PYTHON SOURCE LINES 134-135

To visualize the diagram, change to `display='diagram'`

.. GENERATED FROM PYTHON SOURCE LINES 135-138

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-235896b2-e039-4f4b-ae8a-28618adb6069 {color: black;background-color: white;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 pre{padding: 0;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 div.sk-toggleable {background-color: white;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 div.sk-estimator:hover {background-color: #d4ebff;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 div.sk-item {z-index: 1;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 div.sk-parallel-item:only-child::after {width: 0;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-235896b2-e039-4f4b-ae8a-28618adb6069 div.sk-text-repr-fallback {display: none;}</style><div id="sk-235896b2-e039-4f4b-ae8a-28618adb6069" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                       SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                     strategy=&#x27;constant&#x27;)),
                                                                      (&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                      [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                                     (&#x27;numerical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                       SimpleImputer()),
                                                                      (&#x27;scaler&#x27;,
                                                                       StandardScaler())]),
                                                      [&#x27;age&#x27;, &#x27;weight&#x27;])])),
                    (&#x27;logisticregression&#x27;, LogisticRegression(max_iter=500))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e6f483d1-39ab-488e-8227-8624d7273c2f" type="checkbox" ><label for="e6f483d1-39ab-488e-8227-8624d7273c2f" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                       SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                     strategy=&#x27;constant&#x27;)),
                                                                      (&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                      [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                                     (&#x27;numerical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                       SimpleImputer()),
                                                                      (&#x27;scaler&#x27;,
                                                                       StandardScaler())]),
                                                      [&#x27;age&#x27;, &#x27;weight&#x27;])])),
                    (&#x27;logisticregression&#x27;, LogisticRegression(max_iter=500))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="35b03d59-d621-4fb9-b23a-a0619da4ea63" type="checkbox" ><label for="35b03d59-d621-4fb9-b23a-a0619da4ea63" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                      SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                    strategy=&#x27;constant&#x27;)),
                                                     (&#x27;onehot&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                     [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                    (&#x27;numerical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                      SimpleImputer()),
                                                     (&#x27;scaler&#x27;, StandardScaler())]),
                                     [&#x27;age&#x27;, &#x27;weight&#x27;])])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9b77d624-1125-4ffe-8455-6462e25cf7eb" type="checkbox" ><label for="9b77d624-1125-4ffe-8455-6462e25cf7eb" class="sk-toggleable__label sk-toggleable__label-arrow">categorical</label><div class="sk-toggleable__content"><pre>[&#x27;state&#x27;, &#x27;gender&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="cc706dd1-3332-4ef7-a990-332b0ef63be3" type="checkbox" ><label for="cc706dd1-3332-4ef7-a990-332b0ef63be3" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(fill_value=&#x27;missing&#x27;, strategy=&#x27;constant&#x27;)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e595a1f1-2edc-4af4-a3fe-c87ab815596e" type="checkbox" ><label for="e595a1f1-2edc-4af4-a3fe-c87ab815596e" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9dfc7a6e-184f-47ae-a030-22f9a86aded8" type="checkbox" ><label for="9dfc7a6e-184f-47ae-a030-22f9a86aded8" class="sk-toggleable__label sk-toggleable__label-arrow">numerical</label><div class="sk-toggleable__content"><pre>[&#x27;age&#x27;, &#x27;weight&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6bf81f0c-7d3b-4fbc-898e-b04969d0d9ba" type="checkbox" ><label for="6bf81f0c-7d3b-4fbc-898e-b04969d0d9ba" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d5484301-f56a-40de-9fde-ab83df27a659" type="checkbox" ><label for="d5484301-f56a-40de-9fde-ab83df27a659" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c3bf970c-7d06-4bf7-ae56-02e4660b70dc" type="checkbox" ><label for="c3bf970c-7d06-4bf7-ae56-02e4660b70dc" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(max_iter=500)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 139-145

Displaying a Grid Search over a Pipeline with a Classifier
###############################################################################
 This section constructs a :class:`~sklearn.model_selection.GridSearchCV`
 over a :class:`~sklearn.pipeline.Pipeline` with
 :class:`~sklearn.ensemble.RandomForestClassifier` and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 145-193

.. code-block:: default


    import numpy as np
    from sklearn.pipeline import make_pipeline
    from sklearn.pipeline import Pipeline
    from sklearn.impute import SimpleImputer
    from sklearn.compose import ColumnTransformer
    from sklearn.preprocessing import OneHotEncoder, StandardScaler
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.model_selection import GridSearchCV
    from sklearn import set_config

    numeric_preprocessor = Pipeline(
        steps=[
            ("imputation_mean", SimpleImputer(missing_values=np.nan, strategy="mean")),
            ("scaler", StandardScaler()),
        ]
    )

    categorical_preprocessor = Pipeline(
        steps=[
            (
                "imputation_constant",
                SimpleImputer(fill_value="missing", strategy="constant"),
            ),
            ("onehot", OneHotEncoder(handle_unknown="ignore")),
        ]
    )

    preprocessor = ColumnTransformer(
        [
            ("categorical", categorical_preprocessor, ["state", "gender"]),
            ("numerical", numeric_preprocessor, ["age", "weight"]),
        ]
    )

    pipe = Pipeline(
        steps=[("preprocessor", preprocessor), ("classifier", RandomForestClassifier())]
    )

    param_grid = {
        "classifier__n_estimators": [200, 500],
        "classifier__max_features": ["auto", "sqrt", "log2"],
        "classifier__max_depth": [4, 5, 6, 7, 8],
        "classifier__criterion": ["gini", "entropy"],
    }

    grid_search = GridSearchCV(pipe, param_grid=param_grid, n_jobs=1)








.. GENERATED FROM PYTHON SOURCE LINES 194-195

To visualize the diagram, change to `display='diagram'`.

.. GENERATED FROM PYTHON SOURCE LINES 195-197

.. code-block:: default

    set_config(display="diagram")
    grid_search  # click on the diagram below to see the details of each step





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 {color: black;background-color: white;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 pre{padding: 0;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 div.sk-toggleable {background-color: white;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 div.sk-estimator:hover {background-color: #d4ebff;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 div.sk-item {z-index: 1;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 div.sk-parallel-item:only-child::after {width: 0;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-0cff7d55-0516-4d69-a52c-273b11cc9d89 div.sk-text-repr-fallback {display: none;}</style><div id="sk-0cff7d55-0516-4d69-a52c-273b11cc9d89" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>GridSearchCV(estimator=Pipeline(steps=[(&#x27;preprocessor&#x27;,
                                            ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                                              SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                                            strategy=&#x27;constant&#x27;)),
                                                                                             (&#x27;onehot&#x27;,
                                                                                              OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                                             [&#x27;state&#x27;,
                                                                              &#x27;gender&#x27;]),
                                                                            (&#x27;numerical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                                              SimpleImputer()),
                                                                                             (&#x27;scaler&#x27;,
                                                                                              StandardScaler())]),
                                                                             [&#x27;age&#x27;,
                                                                              &#x27;weight&#x27;])])),
                                           (&#x27;classifier&#x27;,
                                            RandomForestClassifier())]),
                 n_jobs=1,
                 param_grid={&#x27;classifier__criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],
                             &#x27;classifier__max_depth&#x27;: [4, 5, 6, 7, 8],
                             &#x27;classifier__max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;, &#x27;log2&#x27;],
                             &#x27;classifier__n_estimators&#x27;: [200, 500]})</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d1cf06c7-cdd5-4b18-a9e7-cd09978ebaac" type="checkbox" ><label for="d1cf06c7-cdd5-4b18-a9e7-cd09978ebaac" class="sk-toggleable__label sk-toggleable__label-arrow">GridSearchCV</label><div class="sk-toggleable__content"><pre>GridSearchCV(estimator=Pipeline(steps=[(&#x27;preprocessor&#x27;,
                                            ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                                              SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                                            strategy=&#x27;constant&#x27;)),
                                                                                             (&#x27;onehot&#x27;,
                                                                                              OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                                             [&#x27;state&#x27;,
                                                                              &#x27;gender&#x27;]),
                                                                            (&#x27;numerical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                                              SimpleImputer()),
                                                                                             (&#x27;scaler&#x27;,
                                                                                              StandardScaler())]),
                                                                             [&#x27;age&#x27;,
                                                                              &#x27;weight&#x27;])])),
                                           (&#x27;classifier&#x27;,
                                            RandomForestClassifier())]),
                 n_jobs=1,
                 param_grid={&#x27;classifier__criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],
                             &#x27;classifier__max_depth&#x27;: [4, 5, 6, 7, 8],
                             &#x27;classifier__max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;, &#x27;log2&#x27;],
                             &#x27;classifier__n_estimators&#x27;: [200, 500]})</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d4ae7414-c676-4f06-81ec-0202dd8afc0c" type="checkbox" ><label for="d4ae7414-c676-4f06-81ec-0202dd8afc0c" class="sk-toggleable__label sk-toggleable__label-arrow">estimator: Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,
                     ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                       SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                     strategy=&#x27;constant&#x27;)),
                                                                      (&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                      [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                                     (&#x27;numerical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                       SimpleImputer()),
                                                                      (&#x27;scaler&#x27;,
                                                                       StandardScaler())]),
                                                      [&#x27;age&#x27;, &#x27;weight&#x27;])])),
                    (&#x27;classifier&#x27;, RandomForestClassifier())])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="37ba2180-599a-488b-ac22-b6b530ed6132" type="checkbox" ><label for="37ba2180-599a-488b-ac22-b6b530ed6132" class="sk-toggleable__label sk-toggleable__label-arrow">preprocessor: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                      SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                    strategy=&#x27;constant&#x27;)),
                                                     (&#x27;onehot&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                     [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                    (&#x27;numerical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                      SimpleImputer()),
                                                     (&#x27;scaler&#x27;, StandardScaler())]),
                                     [&#x27;age&#x27;, &#x27;weight&#x27;])])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="41bec5b6-398c-4f3e-8f1b-146fe090fce9" type="checkbox" ><label for="41bec5b6-398c-4f3e-8f1b-146fe090fce9" class="sk-toggleable__label sk-toggleable__label-arrow">categorical</label><div class="sk-toggleable__content"><pre>[&#x27;state&#x27;, &#x27;gender&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a0058673-4d49-4dfe-a5ae-a79896df6161" type="checkbox" ><label for="a0058673-4d49-4dfe-a5ae-a79896df6161" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(fill_value=&#x27;missing&#x27;, strategy=&#x27;constant&#x27;)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3ddc02ee-44ed-4cc9-b490-016bc38728ad" type="checkbox" ><label for="3ddc02ee-44ed-4cc9-b490-016bc38728ad" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6fb321c1-43bb-46bb-9ec1-30f090fa96ac" type="checkbox" ><label for="6fb321c1-43bb-46bb-9ec1-30f090fa96ac" class="sk-toggleable__label sk-toggleable__label-arrow">numerical</label><div class="sk-toggleable__content"><pre>[&#x27;age&#x27;, &#x27;weight&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f48f6753-248d-4805-8e2a-8b5cb94ab566" type="checkbox" ><label for="f48f6753-248d-4805-8e2a-8b5cb94ab566" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5a2b2b22-0a01-40e6-b850-3957957e2383" type="checkbox" ><label for="5a2b2b22-0a01-40e6-b850-3957957e2383" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0ac7ebb9-3fe9-4ad0-aa27-aa89aedd3e08" type="checkbox" ><label for="0ac7ebb9-3fe9-4ad0-aa27-aa89aedd3e08" class="sk-toggleable__label sk-toggleable__label-arrow">RandomForestClassifier</label><div class="sk-toggleable__content"><pre>RandomForestClassifier()</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.089 seconds)


.. _sphx_glr_download_auto_examples_miscellaneous_plot_pipeline_display.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/miscellaneous/plot_pipeline_display.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_pipeline_display.py <plot_pipeline_display.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_pipeline_display.ipynb <plot_pipeline_display.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
