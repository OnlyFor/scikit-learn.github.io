
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/miscellaneous/plot_pipeline_display.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_miscellaneous_plot_pipeline_display.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_miscellaneous_plot_pipeline_display.py:


=================================================================
Displaying Pipelines
=================================================================

The default configuration for displaying a pipeline is `'text'` where
`set_config(display='text')`.  To visualize the diagram in Jupyter Notebook,
use `set_config(display='diagram')` and then output the pipeline object.

To see more detailed steps in the visualization of the pipeline, click on the
steps in the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 15-21

Displaying a Pipeline with a Preprocessing Step and Classifier
###############################################################################
 This section constructs a :class:`~sklearn.pipeline.Pipeline` with a preprocessing
 step, :class:`~sklearn.preprocessing.StandardScaler`, and classifier,
 :class:`~sklearn.linear_model.LogisticRegression`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 21-33

.. code-block:: default


    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler
    from sklearn.linear_model import LogisticRegression
    from sklearn import set_config

    steps = [
        ("preprocessing", StandardScaler()),
        ("classifier", LogisticRegression()),
    ]
    pipe = Pipeline(steps)








.. GENERATED FROM PYTHON SOURCE LINES 34-35

To view the text pipeline, the default is `display='text'`.

.. GENERATED FROM PYTHON SOURCE LINES 35-38

.. code-block:: default

    set_config(display="text")
    pipe





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Pipeline(steps=[('preprocessing', StandardScaler()),
                    ('classifier', LogisticRegression())])



.. GENERATED FROM PYTHON SOURCE LINES 39-40

To visualize the diagram, change `display='diagram'`.

.. GENERATED FROM PYTHON SOURCE LINES 40-43

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc {color: black;background-color: white;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc pre{padding: 0;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc div.sk-toggleable {background-color: white;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc div.sk-estimator:hover {background-color: #d4ebff;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc div.sk-item {z-index: 1;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc div.sk-parallel-item:only-child::after {width: 0;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc div.sk-text-repr-fallback {display: none;}</style><div id="sk-1afa4740-59f5-4baa-aa56-e4dc1dd88fbc" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;preprocessing&#x27;, StandardScaler()),
                    (&#x27;classifier&#x27;, LogisticRegression())])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3b8c466d-0b27-41c4-8b12-2e4e6baf63ff" type="checkbox" ><label for="3b8c466d-0b27-41c4-8b12-2e4e6baf63ff" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;preprocessing&#x27;, StandardScaler()),
                    (&#x27;classifier&#x27;, LogisticRegression())])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5e3f0b27-6b61-422f-b3f1-e08b815bc0bf" type="checkbox" ><label for="5e3f0b27-6b61-422f-b3f1-e08b815bc0bf" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0189734a-f9c1-4d60-9241-ff000420f3c4" type="checkbox" ><label for="0189734a-f9c1-4d60-9241-ff000420f3c4" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 44-51

Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier
###############################################################################
 This section constructs a :class:`~sklearn.pipeline.Pipeline` with multiple
 preprocessing steps, :class:`~sklearn.preprocessing.PolynomialFeatures` and
 :class:`~sklearn.preprocessing.StandardScaler`, and a classifer step,
 :class:`~sklearn.linear_model.LogisticRegression`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 51-64

.. code-block:: default


    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler, PolynomialFeatures
    from sklearn.linear_model import LogisticRegression
    from sklearn import set_config

    steps = [
        ("standard_scaler", StandardScaler()),
        ("polynomial", PolynomialFeatures(degree=3)),
        ("classifier", LogisticRegression(C=2.0)),
    ]
    pipe = Pipeline(steps)








.. GENERATED FROM PYTHON SOURCE LINES 65-66

To visualize the diagram, change to display='diagram'

.. GENERATED FROM PYTHON SOURCE LINES 66-69

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 {color: black;background-color: white;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 pre{padding: 0;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 div.sk-toggleable {background-color: white;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 div.sk-estimator:hover {background-color: #d4ebff;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 div.sk-item {z-index: 1;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 div.sk-parallel-item:only-child::after {width: 0;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-4479ea4d-5a6e-4225-b81f-d773d02a7967 div.sk-text-repr-fallback {display: none;}</style><div id="sk-4479ea4d-5a6e-4225-b81f-d773d02a7967" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;standard_scaler&#x27;, StandardScaler()),
                    (&#x27;polynomial&#x27;, PolynomialFeatures(degree=3)),
                    (&#x27;classifier&#x27;, LogisticRegression(C=2.0))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4cc39657-4e62-4055-8a24-b2b36f5ad7ef" type="checkbox" ><label for="4cc39657-4e62-4055-8a24-b2b36f5ad7ef" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;standard_scaler&#x27;, StandardScaler()),
                    (&#x27;polynomial&#x27;, PolynomialFeatures(degree=3)),
                    (&#x27;classifier&#x27;, LogisticRegression(C=2.0))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="35f72a1d-1bc6-4d44-886b-a8f76689b8d5" type="checkbox" ><label for="35f72a1d-1bc6-4d44-886b-a8f76689b8d5" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ae6a519b-fb23-40db-a12c-1a968f293d2a" type="checkbox" ><label for="ae6a519b-fb23-40db-a12c-1a968f293d2a" class="sk-toggleable__label sk-toggleable__label-arrow">PolynomialFeatures</label><div class="sk-toggleable__content"><pre>PolynomialFeatures(degree=3)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5495ae3d-0fc7-4b29-81a9-62fd95c69fab" type="checkbox" ><label for="5495ae3d-0fc7-4b29-81a9-62fd95c69fab" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(C=2.0)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 70-76

Displaying a Pipeline and Dimensionality Reduction and Classifier
###############################################################################
 This section constructs a :class:`~sklearn.pipeline.Pipeline` with a
 dimensionality reduction step, :class:`~sklearn.decomposition.PCA`,
 a classifier, :class:`~sklearn.svm.SVC`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 76-85

.. code-block:: default


    from sklearn.pipeline import Pipeline
    from sklearn.svm import SVC
    from sklearn.decomposition import PCA
    from sklearn import set_config

    steps = [("reduce_dim", PCA(n_components=4)), ("classifier", SVC(kernel="linear"))]
    pipe = Pipeline(steps)








.. GENERATED FROM PYTHON SOURCE LINES 86-87

To visualize the diagram, change to `display='diagram'`.

.. GENERATED FROM PYTHON SOURCE LINES 87-90

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 {color: black;background-color: white;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 pre{padding: 0;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 div.sk-toggleable {background-color: white;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 div.sk-item {z-index: 1;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 div.sk-parallel-item:only-child::after {width: 0;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2 div.sk-text-repr-fallback {display: none;}</style><div id="sk-58ac9bc9-bb0b-48e6-907d-9ae45901f3a2" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;reduce_dim&#x27;, PCA(n_components=4)),
                    (&#x27;classifier&#x27;, SVC(kernel=&#x27;linear&#x27;))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="022efcf4-0fb1-461f-ac34-279c63943fab" type="checkbox" ><label for="022efcf4-0fb1-461f-ac34-279c63943fab" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;reduce_dim&#x27;, PCA(n_components=4)),
                    (&#x27;classifier&#x27;, SVC(kernel=&#x27;linear&#x27;))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="07911b88-9e8c-4905-8de9-8248db9dfca0" type="checkbox" ><label for="07911b88-9e8c-4905-8de9-8248db9dfca0" class="sk-toggleable__label sk-toggleable__label-arrow">PCA</label><div class="sk-toggleable__content"><pre>PCA(n_components=4)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6fe0bbdb-86ef-4a44-b836-d6764b1114ec" type="checkbox" ><label for="6fe0bbdb-86ef-4a44-b836-d6764b1114ec" class="sk-toggleable__label sk-toggleable__label-arrow">SVC</label><div class="sk-toggleable__content"><pre>SVC(kernel=&#x27;linear&#x27;)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 91-97

Displaying a Complex Pipeline Chaining a Column Transformer
###############################################################################
 This section constructs a complex :class:`~sklearn.pipeline.Pipeline` with a
 :class:`~sklearn.compose.ColumnTransformer` and a classifier,
 :class:`~sklearn.linear_model.LogisticRegression`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 97-133

.. code-block:: default


    import numpy as np
    from sklearn.pipeline import make_pipeline
    from sklearn.pipeline import Pipeline
    from sklearn.impute import SimpleImputer
    from sklearn.compose import ColumnTransformer
    from sklearn.preprocessing import OneHotEncoder, StandardScaler
    from sklearn.linear_model import LogisticRegression
    from sklearn import set_config

    numeric_preprocessor = Pipeline(
        steps=[
            ("imputation_mean", SimpleImputer(missing_values=np.nan, strategy="mean")),
            ("scaler", StandardScaler()),
        ]
    )

    categorical_preprocessor = Pipeline(
        steps=[
            (
                "imputation_constant",
                SimpleImputer(fill_value="missing", strategy="constant"),
            ),
            ("onehot", OneHotEncoder(handle_unknown="ignore")),
        ]
    )

    preprocessor = ColumnTransformer(
        [
            ("categorical", categorical_preprocessor, ["state", "gender"]),
            ("numerical", numeric_preprocessor, ["age", "weight"]),
        ]
    )

    pipe = make_pipeline(preprocessor, LogisticRegression(max_iter=500))








.. GENERATED FROM PYTHON SOURCE LINES 134-135

To visualize the diagram, change to `display='diagram'`

.. GENERATED FROM PYTHON SOURCE LINES 135-138

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 {color: black;background-color: white;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 pre{padding: 0;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 div.sk-toggleable {background-color: white;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 div.sk-estimator:hover {background-color: #d4ebff;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 div.sk-item {z-index: 1;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 div.sk-parallel-item:only-child::after {width: 0;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39 div.sk-text-repr-fallback {display: none;}</style><div id="sk-77dc87c3-e70a-44ce-8dd3-94b537f5ce39" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                       SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                     strategy=&#x27;constant&#x27;)),
                                                                      (&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                      [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                                     (&#x27;numerical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                       SimpleImputer()),
                                                                      (&#x27;scaler&#x27;,
                                                                       StandardScaler())]),
                                                      [&#x27;age&#x27;, &#x27;weight&#x27;])])),
                    (&#x27;logisticregression&#x27;, LogisticRegression(max_iter=500))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9a77772c-6c51-44ed-be0b-a3bc2c8fad09" type="checkbox" ><label for="9a77772c-6c51-44ed-be0b-a3bc2c8fad09" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                       SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                     strategy=&#x27;constant&#x27;)),
                                                                      (&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                      [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                                     (&#x27;numerical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                       SimpleImputer()),
                                                                      (&#x27;scaler&#x27;,
                                                                       StandardScaler())]),
                                                      [&#x27;age&#x27;, &#x27;weight&#x27;])])),
                    (&#x27;logisticregression&#x27;, LogisticRegression(max_iter=500))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0523a7d1-c0c2-4b79-8507-166e544352a4" type="checkbox" ><label for="0523a7d1-c0c2-4b79-8507-166e544352a4" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                      SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                    strategy=&#x27;constant&#x27;)),
                                                     (&#x27;onehot&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                     [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                    (&#x27;numerical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                      SimpleImputer()),
                                                     (&#x27;scaler&#x27;, StandardScaler())]),
                                     [&#x27;age&#x27;, &#x27;weight&#x27;])])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="cf32a4cf-86cc-4437-8acb-915210a25b1e" type="checkbox" ><label for="cf32a4cf-86cc-4437-8acb-915210a25b1e" class="sk-toggleable__label sk-toggleable__label-arrow">categorical</label><div class="sk-toggleable__content"><pre>[&#x27;state&#x27;, &#x27;gender&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5efc5261-839e-44b6-9d70-ac4bffb00241" type="checkbox" ><label for="5efc5261-839e-44b6-9d70-ac4bffb00241" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(fill_value=&#x27;missing&#x27;, strategy=&#x27;constant&#x27;)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e08b051e-74fb-40ba-be85-4ea56558e165" type="checkbox" ><label for="e08b051e-74fb-40ba-be85-4ea56558e165" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f1aad410-ae7f-425c-892c-2b46dfc29f66" type="checkbox" ><label for="f1aad410-ae7f-425c-892c-2b46dfc29f66" class="sk-toggleable__label sk-toggleable__label-arrow">numerical</label><div class="sk-toggleable__content"><pre>[&#x27;age&#x27;, &#x27;weight&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0633f4e1-aa52-4531-90d8-1808a38f4a1d" type="checkbox" ><label for="0633f4e1-aa52-4531-90d8-1808a38f4a1d" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8c65c56f-c023-43e7-9ed2-2e9ae1a67141" type="checkbox" ><label for="8c65c56f-c023-43e7-9ed2-2e9ae1a67141" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7fd1db1e-0aed-4936-a005-bc39cb2bd4f0" type="checkbox" ><label for="7fd1db1e-0aed-4936-a005-bc39cb2bd4f0" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(max_iter=500)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 139-145

Displaying a Grid Search over a Pipeline with a Classifier
###############################################################################
 This section constructs a :class:`~sklearn.model_selection.GridSearchCV`
 over a :class:`~sklearn.pipeline.Pipeline` with
 :class:`~sklearn.ensemble.RandomForestClassifier` and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 145-193

.. code-block:: default


    import numpy as np
    from sklearn.pipeline import make_pipeline
    from sklearn.pipeline import Pipeline
    from sklearn.impute import SimpleImputer
    from sklearn.compose import ColumnTransformer
    from sklearn.preprocessing import OneHotEncoder, StandardScaler
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.model_selection import GridSearchCV
    from sklearn import set_config

    numeric_preprocessor = Pipeline(
        steps=[
            ("imputation_mean", SimpleImputer(missing_values=np.nan, strategy="mean")),
            ("scaler", StandardScaler()),
        ]
    )

    categorical_preprocessor = Pipeline(
        steps=[
            (
                "imputation_constant",
                SimpleImputer(fill_value="missing", strategy="constant"),
            ),
            ("onehot", OneHotEncoder(handle_unknown="ignore")),
        ]
    )

    preprocessor = ColumnTransformer(
        [
            ("categorical", categorical_preprocessor, ["state", "gender"]),
            ("numerical", numeric_preprocessor, ["age", "weight"]),
        ]
    )

    pipe = Pipeline(
        steps=[("preprocessor", preprocessor), ("classifier", RandomForestClassifier())]
    )

    param_grid = {
        "classifier__n_estimators": [200, 500],
        "classifier__max_features": ["auto", "sqrt", "log2"],
        "classifier__max_depth": [4, 5, 6, 7, 8],
        "classifier__criterion": ["gini", "entropy"],
    }

    grid_search = GridSearchCV(pipe, param_grid=param_grid, n_jobs=1)








.. GENERATED FROM PYTHON SOURCE LINES 194-195

To visualize the diagram, change to `display='diagram'`.

.. GENERATED FROM PYTHON SOURCE LINES 195-197

.. code-block:: default

    set_config(display="diagram")
    grid_search  # click on the diagram below to see the details of each step





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 {color: black;background-color: white;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 pre{padding: 0;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 div.sk-toggleable {background-color: white;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 div.sk-estimator:hover {background-color: #d4ebff;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 div.sk-item {z-index: 1;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 div.sk-parallel-item:only-child::after {width: 0;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835 div.sk-text-repr-fallback {display: none;}</style><div id="sk-3d92f3dc-0d8e-4cb4-aa34-0b6b97992835" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>GridSearchCV(estimator=Pipeline(steps=[(&#x27;preprocessor&#x27;,
                                            ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                                              SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                                            strategy=&#x27;constant&#x27;)),
                                                                                             (&#x27;onehot&#x27;,
                                                                                              OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                                             [&#x27;state&#x27;,
                                                                              &#x27;gender&#x27;]),
                                                                            (&#x27;numerical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                                              SimpleImputer()),
                                                                                             (&#x27;scaler&#x27;,
                                                                                              StandardScaler())]),
                                                                             [&#x27;age&#x27;,
                                                                              &#x27;weight&#x27;])])),
                                           (&#x27;classifier&#x27;,
                                            RandomForestClassifier())]),
                 n_jobs=1,
                 param_grid={&#x27;classifier__criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],
                             &#x27;classifier__max_depth&#x27;: [4, 5, 6, 7, 8],
                             &#x27;classifier__max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;, &#x27;log2&#x27;],
                             &#x27;classifier__n_estimators&#x27;: [200, 500]})</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="68d97429-cdd7-4f8e-be6f-4fd74e9cf0a1" type="checkbox" ><label for="68d97429-cdd7-4f8e-be6f-4fd74e9cf0a1" class="sk-toggleable__label sk-toggleable__label-arrow">GridSearchCV</label><div class="sk-toggleable__content"><pre>GridSearchCV(estimator=Pipeline(steps=[(&#x27;preprocessor&#x27;,
                                            ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                                              SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                                            strategy=&#x27;constant&#x27;)),
                                                                                             (&#x27;onehot&#x27;,
                                                                                              OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                                             [&#x27;state&#x27;,
                                                                              &#x27;gender&#x27;]),
                                                                            (&#x27;numerical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                                              SimpleImputer()),
                                                                                             (&#x27;scaler&#x27;,
                                                                                              StandardScaler())]),
                                                                             [&#x27;age&#x27;,
                                                                              &#x27;weight&#x27;])])),
                                           (&#x27;classifier&#x27;,
                                            RandomForestClassifier())]),
                 n_jobs=1,
                 param_grid={&#x27;classifier__criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],
                             &#x27;classifier__max_depth&#x27;: [4, 5, 6, 7, 8],
                             &#x27;classifier__max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;, &#x27;log2&#x27;],
                             &#x27;classifier__n_estimators&#x27;: [200, 500]})</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="47414353-67ab-4eb9-a623-dc5e985d5460" type="checkbox" ><label for="47414353-67ab-4eb9-a623-dc5e985d5460" class="sk-toggleable__label sk-toggleable__label-arrow">estimator: Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,
                     ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                       SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                     strategy=&#x27;constant&#x27;)),
                                                                      (&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                      [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                                     (&#x27;numerical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                       SimpleImputer()),
                                                                      (&#x27;scaler&#x27;,
                                                                       StandardScaler())]),
                                                      [&#x27;age&#x27;, &#x27;weight&#x27;])])),
                    (&#x27;classifier&#x27;, RandomForestClassifier())])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ece85b1c-54f2-4d88-a851-f42ea16478e1" type="checkbox" ><label for="ece85b1c-54f2-4d88-a851-f42ea16478e1" class="sk-toggleable__label sk-toggleable__label-arrow">preprocessor: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                      SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                    strategy=&#x27;constant&#x27;)),
                                                     (&#x27;onehot&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                     [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                    (&#x27;numerical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                      SimpleImputer()),
                                                     (&#x27;scaler&#x27;, StandardScaler())]),
                                     [&#x27;age&#x27;, &#x27;weight&#x27;])])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5cc8fb11-7f82-4cf8-9427-793ae61cb210" type="checkbox" ><label for="5cc8fb11-7f82-4cf8-9427-793ae61cb210" class="sk-toggleable__label sk-toggleable__label-arrow">categorical</label><div class="sk-toggleable__content"><pre>[&#x27;state&#x27;, &#x27;gender&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c39113dd-825a-4658-961a-a93bf20275bb" type="checkbox" ><label for="c39113dd-825a-4658-961a-a93bf20275bb" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(fill_value=&#x27;missing&#x27;, strategy=&#x27;constant&#x27;)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2fa4f14c-e448-4245-9279-37df23a1f967" type="checkbox" ><label for="2fa4f14c-e448-4245-9279-37df23a1f967" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="141cf1ce-cf47-47f9-82a9-f63097eb3502" type="checkbox" ><label for="141cf1ce-cf47-47f9-82a9-f63097eb3502" class="sk-toggleable__label sk-toggleable__label-arrow">numerical</label><div class="sk-toggleable__content"><pre>[&#x27;age&#x27;, &#x27;weight&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="cb6144a4-1c0f-436c-b885-9a3131dfa62f" type="checkbox" ><label for="cb6144a4-1c0f-436c-b885-9a3131dfa62f" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="60192b23-da6f-4f6c-a156-b48d34d57f8d" type="checkbox" ><label for="60192b23-da6f-4f6c-a156-b48d34d57f8d" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="df49acee-a45d-4fc1-ad1a-ac12eefb8122" type="checkbox" ><label for="df49acee-a45d-4fc1-ad1a-ac12eefb8122" class="sk-toggleable__label sk-toggleable__label-arrow">RandomForestClassifier</label><div class="sk-toggleable__content"><pre>RandomForestClassifier()</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.094 seconds)


.. _sphx_glr_download_auto_examples_miscellaneous_plot_pipeline_display.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/miscellaneous/plot_pipeline_display.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_pipeline_display.py <plot_pipeline_display.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_pipeline_display.ipynb <plot_pipeline_display.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
