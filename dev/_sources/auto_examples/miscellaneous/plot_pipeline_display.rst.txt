
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/miscellaneous/plot_pipeline_display.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_miscellaneous_plot_pipeline_display.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_miscellaneous_plot_pipeline_display.py:


=================================================================
Displaying Pipelines
=================================================================

The default configuration for displaying a pipeline is `'text'` where
`set_config(display='text')`.  To visualize the diagram in Jupyter Notebook,
use `set_config(display='diagram')` and then output the pipeline object.

To see more detailed steps in the visualization of the pipeline, click on the
steps in the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 15-21

Displaying a Pipeline with a Preprocessing Step and Classifier
###############################################################################
 This section constructs a :class:`~sklearn.pipeline.Pipeline` with a preprocessing
 step, :class:`~sklearn.preprocessing.StandardScaler`, and classifier,
 :class:`~sklearn.linear_model.LogisticRegression`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 21-33

.. code-block:: default


    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler
    from sklearn.linear_model import LogisticRegression
    from sklearn import set_config

    steps = [
        ("preprocessing", StandardScaler()),
        ("classifier", LogisticRegression()),
    ]
    pipe = Pipeline(steps)








.. GENERATED FROM PYTHON SOURCE LINES 34-35

To view the text pipeline, the default is `display='text'`.

.. GENERATED FROM PYTHON SOURCE LINES 35-38

.. code-block:: default

    set_config(display="text")
    pipe





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Pipeline(steps=[('preprocessing', StandardScaler()),
                    ('classifier', LogisticRegression())])



.. GENERATED FROM PYTHON SOURCE LINES 39-40

To visualize the diagram, change `display='diagram'`.

.. GENERATED FROM PYTHON SOURCE LINES 40-43

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-819e8c9f-68c9-4641-91a9-376c2708451f {color: black;background-color: white;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f pre{padding: 0;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f div.sk-toggleable {background-color: white;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-819e8c9f-68c9-4641-91a9-376c2708451f div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f div.sk-estimator:hover {background-color: #d4ebff;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f div.sk-item {z-index: 1;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f div.sk-parallel-item:only-child::after {width: 0;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-819e8c9f-68c9-4641-91a9-376c2708451f div.sk-text-repr-fallback {display: none;}</style><div id="sk-819e8c9f-68c9-4641-91a9-376c2708451f" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;preprocessing&#x27;, StandardScaler()),
                    (&#x27;classifier&#x27;, LogisticRegression())])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6160a200-c60b-4bae-8a70-deb611deb6b4" type="checkbox" ><label for="6160a200-c60b-4bae-8a70-deb611deb6b4" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;preprocessing&#x27;, StandardScaler()),
                    (&#x27;classifier&#x27;, LogisticRegression())])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="26ad1cf7-9680-4adb-9d4c-4790c7127b6f" type="checkbox" ><label for="26ad1cf7-9680-4adb-9d4c-4790c7127b6f" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="38b12ad4-66e6-4b87-b84e-977470199799" type="checkbox" ><label for="38b12ad4-66e6-4b87-b84e-977470199799" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 44-51

Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier
###############################################################################
 This section constructs a :class:`~sklearn.pipeline.Pipeline` with multiple
 preprocessing steps, :class:`~sklearn.preprocessing.PolynomialFeatures` and
 :class:`~sklearn.preprocessing.StandardScaler`, and a classifer step,
 :class:`~sklearn.linear_model.LogisticRegression`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 51-64

.. code-block:: default


    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler, PolynomialFeatures
    from sklearn.linear_model import LogisticRegression
    from sklearn import set_config

    steps = [
        ("standard_scaler", StandardScaler()),
        ("polynomial", PolynomialFeatures(degree=3)),
        ("classifier", LogisticRegression(C=2.0)),
    ]
    pipe = Pipeline(steps)








.. GENERATED FROM PYTHON SOURCE LINES 65-66

To visualize the diagram, change to display='diagram'

.. GENERATED FROM PYTHON SOURCE LINES 66-69

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d {color: black;background-color: white;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d pre{padding: 0;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d div.sk-toggleable {background-color: white;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d div.sk-estimator:hover {background-color: #d4ebff;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d div.sk-item {z-index: 1;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d div.sk-parallel-item:only-child::after {width: 0;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d div.sk-text-repr-fallback {display: none;}</style><div id="sk-ccb164c3-0aed-4aa8-a882-b75ec5aedb1d" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;standard_scaler&#x27;, StandardScaler()),
                    (&#x27;polynomial&#x27;, PolynomialFeatures(degree=3)),
                    (&#x27;classifier&#x27;, LogisticRegression(C=2.0))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6282d5db-3898-4149-8b30-e78d5b7a49c1" type="checkbox" ><label for="6282d5db-3898-4149-8b30-e78d5b7a49c1" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;standard_scaler&#x27;, StandardScaler()),
                    (&#x27;polynomial&#x27;, PolynomialFeatures(degree=3)),
                    (&#x27;classifier&#x27;, LogisticRegression(C=2.0))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4764838e-cd0b-4109-adf8-d8d43b5ba8d8" type="checkbox" ><label for="4764838e-cd0b-4109-adf8-d8d43b5ba8d8" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f04cbcdb-675b-4e42-84d3-d33c4eed4e27" type="checkbox" ><label for="f04cbcdb-675b-4e42-84d3-d33c4eed4e27" class="sk-toggleable__label sk-toggleable__label-arrow">PolynomialFeatures</label><div class="sk-toggleable__content"><pre>PolynomialFeatures(degree=3)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="db1acfb9-e753-4cf2-8c21-2786d3eadc7a" type="checkbox" ><label for="db1acfb9-e753-4cf2-8c21-2786d3eadc7a" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(C=2.0)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 70-76

Displaying a Pipeline and Dimensionality Reduction and Classifier
###############################################################################
 This section constructs a :class:`~sklearn.pipeline.Pipeline` with a
 dimensionality reduction step, :class:`~sklearn.decomposition.PCA`,
 a classifier, :class:`~sklearn.svm.SVC`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 76-85

.. code-block:: default


    from sklearn.pipeline import Pipeline
    from sklearn.svm import SVC
    from sklearn.decomposition import PCA
    from sklearn import set_config

    steps = [("reduce_dim", PCA(n_components=4)), ("classifier", SVC(kernel="linear"))]
    pipe = Pipeline(steps)








.. GENERATED FROM PYTHON SOURCE LINES 86-87

To visualize the diagram, change to `display='diagram'`.

.. GENERATED FROM PYTHON SOURCE LINES 87-90

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 {color: black;background-color: white;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 pre{padding: 0;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 div.sk-toggleable {background-color: white;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 div.sk-estimator:hover {background-color: #d4ebff;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 div.sk-item {z-index: 1;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 div.sk-parallel-item:only-child::after {width: 0;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504 div.sk-text-repr-fallback {display: none;}</style><div id="sk-4ad55158-8ddc-48f8-87b1-73dc69d0c504" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;reduce_dim&#x27;, PCA(n_components=4)),
                    (&#x27;classifier&#x27;, SVC(kernel=&#x27;linear&#x27;))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="54db72c8-8777-448c-8647-4fffca95068d" type="checkbox" ><label for="54db72c8-8777-448c-8647-4fffca95068d" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;reduce_dim&#x27;, PCA(n_components=4)),
                    (&#x27;classifier&#x27;, SVC(kernel=&#x27;linear&#x27;))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6eaaf3a5-b7d3-4e20-8c6a-2cb5865a1ebd" type="checkbox" ><label for="6eaaf3a5-b7d3-4e20-8c6a-2cb5865a1ebd" class="sk-toggleable__label sk-toggleable__label-arrow">PCA</label><div class="sk-toggleable__content"><pre>PCA(n_components=4)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="dd61effc-1f32-416f-90f1-89cf410033a4" type="checkbox" ><label for="dd61effc-1f32-416f-90f1-89cf410033a4" class="sk-toggleable__label sk-toggleable__label-arrow">SVC</label><div class="sk-toggleable__content"><pre>SVC(kernel=&#x27;linear&#x27;)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 91-97

Displaying a Complex Pipeline Chaining a Column Transformer
###############################################################################
 This section constructs a complex :class:`~sklearn.pipeline.Pipeline` with a
 :class:`~sklearn.compose.ColumnTransformer` and a classifier,
 :class:`~sklearn.linear_model.LogisticRegression`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 97-133

.. code-block:: default


    import numpy as np
    from sklearn.pipeline import make_pipeline
    from sklearn.pipeline import Pipeline
    from sklearn.impute import SimpleImputer
    from sklearn.compose import ColumnTransformer
    from sklearn.preprocessing import OneHotEncoder, StandardScaler
    from sklearn.linear_model import LogisticRegression
    from sklearn import set_config

    numeric_preprocessor = Pipeline(
        steps=[
            ("imputation_mean", SimpleImputer(missing_values=np.nan, strategy="mean")),
            ("scaler", StandardScaler()),
        ]
    )

    categorical_preprocessor = Pipeline(
        steps=[
            (
                "imputation_constant",
                SimpleImputer(fill_value="missing", strategy="constant"),
            ),
            ("onehot", OneHotEncoder(handle_unknown="ignore")),
        ]
    )

    preprocessor = ColumnTransformer(
        [
            ("categorical", categorical_preprocessor, ["state", "gender"]),
            ("numerical", numeric_preprocessor, ["age", "weight"]),
        ]
    )

    pipe = make_pipeline(preprocessor, LogisticRegression(max_iter=500))








.. GENERATED FROM PYTHON SOURCE LINES 134-135

To visualize the diagram, change to `display='diagram'`

.. GENERATED FROM PYTHON SOURCE LINES 135-138

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 {color: black;background-color: white;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 pre{padding: 0;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 div.sk-toggleable {background-color: white;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 div.sk-estimator:hover {background-color: #d4ebff;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 div.sk-item {z-index: 1;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 div.sk-parallel-item:only-child::after {width: 0;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-b624475a-4290-4a06-bcfd-f6fd8a411707 div.sk-text-repr-fallback {display: none;}</style><div id="sk-b624475a-4290-4a06-bcfd-f6fd8a411707" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                       SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                     strategy=&#x27;constant&#x27;)),
                                                                      (&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                      [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                                     (&#x27;numerical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                       SimpleImputer()),
                                                                      (&#x27;scaler&#x27;,
                                                                       StandardScaler())]),
                                                      [&#x27;age&#x27;, &#x27;weight&#x27;])])),
                    (&#x27;logisticregression&#x27;, LogisticRegression(max_iter=500))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2506e5f4-c7cb-4774-87a2-11c826b1c4b1" type="checkbox" ><label for="2506e5f4-c7cb-4774-87a2-11c826b1c4b1" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                       SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                     strategy=&#x27;constant&#x27;)),
                                                                      (&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                      [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                                     (&#x27;numerical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                       SimpleImputer()),
                                                                      (&#x27;scaler&#x27;,
                                                                       StandardScaler())]),
                                                      [&#x27;age&#x27;, &#x27;weight&#x27;])])),
                    (&#x27;logisticregression&#x27;, LogisticRegression(max_iter=500))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="51d70e6e-3e70-48cd-ab49-68da7076341f" type="checkbox" ><label for="51d70e6e-3e70-48cd-ab49-68da7076341f" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                      SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                    strategy=&#x27;constant&#x27;)),
                                                     (&#x27;onehot&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                     [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                    (&#x27;numerical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                      SimpleImputer()),
                                                     (&#x27;scaler&#x27;, StandardScaler())]),
                                     [&#x27;age&#x27;, &#x27;weight&#x27;])])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="961ae724-64c5-4fea-a1b4-5ad4056a7986" type="checkbox" ><label for="961ae724-64c5-4fea-a1b4-5ad4056a7986" class="sk-toggleable__label sk-toggleable__label-arrow">categorical</label><div class="sk-toggleable__content"><pre>[&#x27;state&#x27;, &#x27;gender&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9cd409a7-e1ce-4884-b41c-4b14ea057ad7" type="checkbox" ><label for="9cd409a7-e1ce-4884-b41c-4b14ea057ad7" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(fill_value=&#x27;missing&#x27;, strategy=&#x27;constant&#x27;)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3f5fcc8b-edcf-4073-b9a3-c57da3903458" type="checkbox" ><label for="3f5fcc8b-edcf-4073-b9a3-c57da3903458" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="bc0b0482-7d28-41e7-9cde-7d6e51c02fb3" type="checkbox" ><label for="bc0b0482-7d28-41e7-9cde-7d6e51c02fb3" class="sk-toggleable__label sk-toggleable__label-arrow">numerical</label><div class="sk-toggleable__content"><pre>[&#x27;age&#x27;, &#x27;weight&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="fe47bfd9-df3c-437d-b23e-045d7537a0d3" type="checkbox" ><label for="fe47bfd9-df3c-437d-b23e-045d7537a0d3" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="154eec93-5842-413d-aeca-e32bfeaa2e6a" type="checkbox" ><label for="154eec93-5842-413d-aeca-e32bfeaa2e6a" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f5894f99-e25d-4dc2-9b15-af986c0b5ad8" type="checkbox" ><label for="f5894f99-e25d-4dc2-9b15-af986c0b5ad8" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(max_iter=500)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 139-145

Displaying a Grid Search over a Pipeline with a Classifier
###############################################################################
 This section constructs a :class:`~sklearn.model_selection.GridSearchCV`
 over a :class:`~sklearn.pipeline.Pipeline` with
 :class:`~sklearn.ensemble.RandomForestClassifier` and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 145-193

.. code-block:: default


    import numpy as np
    from sklearn.pipeline import make_pipeline
    from sklearn.pipeline import Pipeline
    from sklearn.impute import SimpleImputer
    from sklearn.compose import ColumnTransformer
    from sklearn.preprocessing import OneHotEncoder, StandardScaler
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.model_selection import GridSearchCV
    from sklearn import set_config

    numeric_preprocessor = Pipeline(
        steps=[
            ("imputation_mean", SimpleImputer(missing_values=np.nan, strategy="mean")),
            ("scaler", StandardScaler()),
        ]
    )

    categorical_preprocessor = Pipeline(
        steps=[
            (
                "imputation_constant",
                SimpleImputer(fill_value="missing", strategy="constant"),
            ),
            ("onehot", OneHotEncoder(handle_unknown="ignore")),
        ]
    )

    preprocessor = ColumnTransformer(
        [
            ("categorical", categorical_preprocessor, ["state", "gender"]),
            ("numerical", numeric_preprocessor, ["age", "weight"]),
        ]
    )

    pipe = Pipeline(
        steps=[("preprocessor", preprocessor), ("classifier", RandomForestClassifier())]
    )

    param_grid = {
        "classifier__n_estimators": [200, 500],
        "classifier__max_features": ["auto", "sqrt", "log2"],
        "classifier__max_depth": [4, 5, 6, 7, 8],
        "classifier__criterion": ["gini", "entropy"],
    }

    grid_search = GridSearchCV(pipe, param_grid=param_grid, n_jobs=1)








.. GENERATED FROM PYTHON SOURCE LINES 194-195

To visualize the diagram, change to `display='diagram'`.

.. GENERATED FROM PYTHON SOURCE LINES 195-197

.. code-block:: default

    set_config(display="diagram")
    grid_search  # click on the diagram below to see the details of each step





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-cf15303c-433c-4230-b577-0e9ab276e45f {color: black;background-color: white;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f pre{padding: 0;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f div.sk-toggleable {background-color: white;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-cf15303c-433c-4230-b577-0e9ab276e45f div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f div.sk-estimator:hover {background-color: #d4ebff;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f div.sk-item {z-index: 1;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f div.sk-parallel-item:only-child::after {width: 0;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-cf15303c-433c-4230-b577-0e9ab276e45f div.sk-text-repr-fallback {display: none;}</style><div id="sk-cf15303c-433c-4230-b577-0e9ab276e45f" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>GridSearchCV(estimator=Pipeline(steps=[(&#x27;preprocessor&#x27;,
                                            ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                                              SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                                            strategy=&#x27;constant&#x27;)),
                                                                                             (&#x27;onehot&#x27;,
                                                                                              OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                                             [&#x27;state&#x27;,
                                                                              &#x27;gender&#x27;]),
                                                                            (&#x27;numerical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                                              SimpleImputer()),
                                                                                             (&#x27;scaler&#x27;,
                                                                                              StandardScaler())]),
                                                                             [&#x27;age&#x27;,
                                                                              &#x27;weight&#x27;])])),
                                           (&#x27;classifier&#x27;,
                                            RandomForestClassifier())]),
                 n_jobs=1,
                 param_grid={&#x27;classifier__criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],
                             &#x27;classifier__max_depth&#x27;: [4, 5, 6, 7, 8],
                             &#x27;classifier__max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;, &#x27;log2&#x27;],
                             &#x27;classifier__n_estimators&#x27;: [200, 500]})</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d87a15a7-1163-44a0-b925-91b01bae04ce" type="checkbox" ><label for="d87a15a7-1163-44a0-b925-91b01bae04ce" class="sk-toggleable__label sk-toggleable__label-arrow">GridSearchCV</label><div class="sk-toggleable__content"><pre>GridSearchCV(estimator=Pipeline(steps=[(&#x27;preprocessor&#x27;,
                                            ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                                              SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                                            strategy=&#x27;constant&#x27;)),
                                                                                             (&#x27;onehot&#x27;,
                                                                                              OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                                             [&#x27;state&#x27;,
                                                                              &#x27;gender&#x27;]),
                                                                            (&#x27;numerical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                                              SimpleImputer()),
                                                                                             (&#x27;scaler&#x27;,
                                                                                              StandardScaler())]),
                                                                             [&#x27;age&#x27;,
                                                                              &#x27;weight&#x27;])])),
                                           (&#x27;classifier&#x27;,
                                            RandomForestClassifier())]),
                 n_jobs=1,
                 param_grid={&#x27;classifier__criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],
                             &#x27;classifier__max_depth&#x27;: [4, 5, 6, 7, 8],
                             &#x27;classifier__max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;, &#x27;log2&#x27;],
                             &#x27;classifier__n_estimators&#x27;: [200, 500]})</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ac430ced-41d9-426a-95bf-1d459544ca8f" type="checkbox" ><label for="ac430ced-41d9-426a-95bf-1d459544ca8f" class="sk-toggleable__label sk-toggleable__label-arrow">estimator: Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,
                     ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                       SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                     strategy=&#x27;constant&#x27;)),
                                                                      (&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                      [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                                     (&#x27;numerical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                       SimpleImputer()),
                                                                      (&#x27;scaler&#x27;,
                                                                       StandardScaler())]),
                                                      [&#x27;age&#x27;, &#x27;weight&#x27;])])),
                    (&#x27;classifier&#x27;, RandomForestClassifier())])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="aee3f329-812b-40ca-b4d4-cbdb6819e56a" type="checkbox" ><label for="aee3f329-812b-40ca-b4d4-cbdb6819e56a" class="sk-toggleable__label sk-toggleable__label-arrow">preprocessor: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                      SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                    strategy=&#x27;constant&#x27;)),
                                                     (&#x27;onehot&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                     [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                    (&#x27;numerical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                      SimpleImputer()),
                                                     (&#x27;scaler&#x27;, StandardScaler())]),
                                     [&#x27;age&#x27;, &#x27;weight&#x27;])])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="fa72741b-8e27-4fd6-b00a-263e0437c06e" type="checkbox" ><label for="fa72741b-8e27-4fd6-b00a-263e0437c06e" class="sk-toggleable__label sk-toggleable__label-arrow">categorical</label><div class="sk-toggleable__content"><pre>[&#x27;state&#x27;, &#x27;gender&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c861e75b-0281-437d-9ed7-6dc9ea6717f9" type="checkbox" ><label for="c861e75b-0281-437d-9ed7-6dc9ea6717f9" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(fill_value=&#x27;missing&#x27;, strategy=&#x27;constant&#x27;)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ca2a9e86-f58d-4801-889d-6db81a974805" type="checkbox" ><label for="ca2a9e86-f58d-4801-889d-6db81a974805" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a39f9131-4b59-47a1-a5f1-2969299fcbbd" type="checkbox" ><label for="a39f9131-4b59-47a1-a5f1-2969299fcbbd" class="sk-toggleable__label sk-toggleable__label-arrow">numerical</label><div class="sk-toggleable__content"><pre>[&#x27;age&#x27;, &#x27;weight&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="579b34a4-6ba6-4d24-881f-0be24dca5b81" type="checkbox" ><label for="579b34a4-6ba6-4d24-881f-0be24dca5b81" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5eddaf93-86a2-4d8e-98b5-877ac1f0fee9" type="checkbox" ><label for="5eddaf93-86a2-4d8e-98b5-877ac1f0fee9" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="99171f08-6f96-4b0d-b1d4-36adf920cdad" type="checkbox" ><label for="99171f08-6f96-4b0d-b1d4-36adf920cdad" class="sk-toggleable__label sk-toggleable__label-arrow">RandomForestClassifier</label><div class="sk-toggleable__content"><pre>RandomForestClassifier()</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.095 seconds)


.. _sphx_glr_download_auto_examples_miscellaneous_plot_pipeline_display.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/miscellaneous/plot_pipeline_display.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_pipeline_display.py <plot_pipeline_display.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_pipeline_display.ipynb <plot_pipeline_display.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
