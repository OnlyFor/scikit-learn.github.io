
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/miscellaneous/plot_pipeline_display.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_miscellaneous_plot_pipeline_display.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_miscellaneous_plot_pipeline_display.py:


=================================================================
Displaying Pipelines
=================================================================

The default configuration for displaying a pipeline is `'text'` where
`set_config(display='text')`.  To visualize the diagram in Jupyter Notebook,
use `set_config(display='diagram')` and then output the pipeline object.

To see more detailed steps in the visualization of the pipeline, click on the
steps in the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 15-21

Displaying a Pipeline with a Preprocessing Step and Classifier
###############################################################################
 This section constructs a :class:`~sklearn.pipeline.Pipeline` with a preprocessing
 step, :class:`~sklearn.preprocessing.StandardScaler`, and classifier,
 :class:`~sklearn.linear_model.LogisticRegression`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 21-33

.. code-block:: default


    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler
    from sklearn.linear_model import LogisticRegression
    from sklearn import set_config

    steps = [
        ("preprocessing", StandardScaler()),
        ("classifier", LogisticRegression()),
    ]
    pipe = Pipeline(steps)








.. GENERATED FROM PYTHON SOURCE LINES 34-35

To view the text pipeline, the default is `display='text'`.

.. GENERATED FROM PYTHON SOURCE LINES 35-38

.. code-block:: default

    set_config(display="text")
    pipe





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Pipeline(steps=[('preprocessing', StandardScaler()),
                    ('classifier', LogisticRegression())])



.. GENERATED FROM PYTHON SOURCE LINES 39-40

To visualize the diagram, change `display='diagram'`.

.. GENERATED FROM PYTHON SOURCE LINES 40-43

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a {color: black;background-color: white;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a pre{padding: 0;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a div.sk-toggleable {background-color: white;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a div.sk-estimator:hover {background-color: #d4ebff;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a div.sk-item {z-index: 1;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a div.sk-parallel-item:only-child::after {width: 0;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a div.sk-text-repr-fallback {display: none;}</style><div id="sk-b2968aee-47a0-455a-88c4-d58bb9bc0a8a" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;preprocessing&#x27;, StandardScaler()),
                    (&#x27;classifier&#x27;, LogisticRegression())])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="df5c51ac-724b-4465-b2d4-641e0fece0d8" type="checkbox" ><label for="df5c51ac-724b-4465-b2d4-641e0fece0d8" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;preprocessing&#x27;, StandardScaler()),
                    (&#x27;classifier&#x27;, LogisticRegression())])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="13739741-69a1-4b76-9be0-d5425ba67dab" type="checkbox" ><label for="13739741-69a1-4b76-9be0-d5425ba67dab" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1677e9a2-ed62-45c5-bf3a-c0666fb0f59f" type="checkbox" ><label for="1677e9a2-ed62-45c5-bf3a-c0666fb0f59f" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 44-51

Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier
###############################################################################
 This section constructs a :class:`~sklearn.pipeline.Pipeline` with multiple
 preprocessing steps, :class:`~sklearn.preprocessing.PolynomialFeatures` and
 :class:`~sklearn.preprocessing.StandardScaler`, and a classifer step,
 :class:`~sklearn.linear_model.LogisticRegression`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 51-64

.. code-block:: default


    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler, PolynomialFeatures
    from sklearn.linear_model import LogisticRegression
    from sklearn import set_config

    steps = [
        ("standard_scaler", StandardScaler()),
        ("polynomial", PolynomialFeatures(degree=3)),
        ("classifier", LogisticRegression(C=2.0)),
    ]
    pipe = Pipeline(steps)








.. GENERATED FROM PYTHON SOURCE LINES 65-66

To visualize the diagram, change to display='diagram'

.. GENERATED FROM PYTHON SOURCE LINES 66-69

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 {color: black;background-color: white;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 pre{padding: 0;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 div.sk-toggleable {background-color: white;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 div.sk-item {z-index: 1;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 div.sk-parallel-item:only-child::after {width: 0;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4 div.sk-text-repr-fallback {display: none;}</style><div id="sk-d66ed50e-ee1b-42f9-a78f-e603412d2ee4" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;standard_scaler&#x27;, StandardScaler()),
                    (&#x27;polynomial&#x27;, PolynomialFeatures(degree=3)),
                    (&#x27;classifier&#x27;, LogisticRegression(C=2.0))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="40761f9e-f099-4931-8afc-12322a6799fb" type="checkbox" ><label for="40761f9e-f099-4931-8afc-12322a6799fb" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;standard_scaler&#x27;, StandardScaler()),
                    (&#x27;polynomial&#x27;, PolynomialFeatures(degree=3)),
                    (&#x27;classifier&#x27;, LogisticRegression(C=2.0))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0e376391-7b9d-4cad-ae47-e0479c156d71" type="checkbox" ><label for="0e376391-7b9d-4cad-ae47-e0479c156d71" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d92be16a-9c84-4a2d-b590-4272f9c3e046" type="checkbox" ><label for="d92be16a-9c84-4a2d-b590-4272f9c3e046" class="sk-toggleable__label sk-toggleable__label-arrow">PolynomialFeatures</label><div class="sk-toggleable__content"><pre>PolynomialFeatures(degree=3)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3a8c0e9a-44b9-4dca-8581-460e3908a6ca" type="checkbox" ><label for="3a8c0e9a-44b9-4dca-8581-460e3908a6ca" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(C=2.0)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 70-76

Displaying a Pipeline and Dimensionality Reduction and Classifier
###############################################################################
 This section constructs a :class:`~sklearn.pipeline.Pipeline` with a
 dimensionality reduction step, :class:`~sklearn.decomposition.PCA`,
 a classifier, :class:`~sklearn.svm.SVC`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 76-85

.. code-block:: default


    from sklearn.pipeline import Pipeline
    from sklearn.svm import SVC
    from sklearn.decomposition import PCA
    from sklearn import set_config

    steps = [("reduce_dim", PCA(n_components=4)), ("classifier", SVC(kernel="linear"))]
    pipe = Pipeline(steps)








.. GENERATED FROM PYTHON SOURCE LINES 86-87

To visualize the diagram, change to `display='diagram'`.

.. GENERATED FROM PYTHON SOURCE LINES 87-90

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-9510021c-96a3-4283-8700-8af236c80f39 {color: black;background-color: white;}#sk-9510021c-96a3-4283-8700-8af236c80f39 pre{padding: 0;}#sk-9510021c-96a3-4283-8700-8af236c80f39 div.sk-toggleable {background-color: white;}#sk-9510021c-96a3-4283-8700-8af236c80f39 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-9510021c-96a3-4283-8700-8af236c80f39 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-9510021c-96a3-4283-8700-8af236c80f39 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-9510021c-96a3-4283-8700-8af236c80f39 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-9510021c-96a3-4283-8700-8af236c80f39 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-9510021c-96a3-4283-8700-8af236c80f39 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-9510021c-96a3-4283-8700-8af236c80f39 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-9510021c-96a3-4283-8700-8af236c80f39 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-9510021c-96a3-4283-8700-8af236c80f39 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-9510021c-96a3-4283-8700-8af236c80f39 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-9510021c-96a3-4283-8700-8af236c80f39 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-9510021c-96a3-4283-8700-8af236c80f39 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-9510021c-96a3-4283-8700-8af236c80f39 div.sk-estimator:hover {background-color: #d4ebff;}#sk-9510021c-96a3-4283-8700-8af236c80f39 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-9510021c-96a3-4283-8700-8af236c80f39 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-9510021c-96a3-4283-8700-8af236c80f39 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-9510021c-96a3-4283-8700-8af236c80f39 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-9510021c-96a3-4283-8700-8af236c80f39 div.sk-item {z-index: 1;}#sk-9510021c-96a3-4283-8700-8af236c80f39 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-9510021c-96a3-4283-8700-8af236c80f39 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-9510021c-96a3-4283-8700-8af236c80f39 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-9510021c-96a3-4283-8700-8af236c80f39 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-9510021c-96a3-4283-8700-8af236c80f39 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-9510021c-96a3-4283-8700-8af236c80f39 div.sk-parallel-item:only-child::after {width: 0;}#sk-9510021c-96a3-4283-8700-8af236c80f39 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-9510021c-96a3-4283-8700-8af236c80f39 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-9510021c-96a3-4283-8700-8af236c80f39 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-9510021c-96a3-4283-8700-8af236c80f39 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-9510021c-96a3-4283-8700-8af236c80f39 div.sk-text-repr-fallback {display: none;}</style><div id="sk-9510021c-96a3-4283-8700-8af236c80f39" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;reduce_dim&#x27;, PCA(n_components=4)),
                    (&#x27;classifier&#x27;, SVC(kernel=&#x27;linear&#x27;))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="cff003bd-b234-4afc-8d11-64b4603b54fd" type="checkbox" ><label for="cff003bd-b234-4afc-8d11-64b4603b54fd" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;reduce_dim&#x27;, PCA(n_components=4)),
                    (&#x27;classifier&#x27;, SVC(kernel=&#x27;linear&#x27;))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2af41323-be59-402a-b155-38eebff53008" type="checkbox" ><label for="2af41323-be59-402a-b155-38eebff53008" class="sk-toggleable__label sk-toggleable__label-arrow">PCA</label><div class="sk-toggleable__content"><pre>PCA(n_components=4)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="24790f8f-924a-4c63-b662-ae7369934cdc" type="checkbox" ><label for="24790f8f-924a-4c63-b662-ae7369934cdc" class="sk-toggleable__label sk-toggleable__label-arrow">SVC</label><div class="sk-toggleable__content"><pre>SVC(kernel=&#x27;linear&#x27;)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 91-97

Displaying a Complex Pipeline Chaining a Column Transformer
###############################################################################
 This section constructs a complex :class:`~sklearn.pipeline.Pipeline` with a
 :class:`~sklearn.compose.ColumnTransformer` and a classifier,
 :class:`~sklearn.linear_model.LogisticRegression`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 97-133

.. code-block:: default


    import numpy as np
    from sklearn.pipeline import make_pipeline
    from sklearn.pipeline import Pipeline
    from sklearn.impute import SimpleImputer
    from sklearn.compose import ColumnTransformer
    from sklearn.preprocessing import OneHotEncoder, StandardScaler
    from sklearn.linear_model import LogisticRegression
    from sklearn import set_config

    numeric_preprocessor = Pipeline(
        steps=[
            ("imputation_mean", SimpleImputer(missing_values=np.nan, strategy="mean")),
            ("scaler", StandardScaler()),
        ]
    )

    categorical_preprocessor = Pipeline(
        steps=[
            (
                "imputation_constant",
                SimpleImputer(fill_value="missing", strategy="constant"),
            ),
            ("onehot", OneHotEncoder(handle_unknown="ignore")),
        ]
    )

    preprocessor = ColumnTransformer(
        [
            ("categorical", categorical_preprocessor, ["state", "gender"]),
            ("numerical", numeric_preprocessor, ["age", "weight"]),
        ]
    )

    pipe = make_pipeline(preprocessor, LogisticRegression(max_iter=500))








.. GENERATED FROM PYTHON SOURCE LINES 134-135

To visualize the diagram, change to `display='diagram'`

.. GENERATED FROM PYTHON SOURCE LINES 135-138

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 {color: black;background-color: white;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 pre{padding: 0;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 div.sk-toggleable {background-color: white;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 div.sk-estimator:hover {background-color: #d4ebff;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 div.sk-item {z-index: 1;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 div.sk-parallel-item:only-child::after {width: 0;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68 div.sk-text-repr-fallback {display: none;}</style><div id="sk-d6ad5a93-596e-45ef-a0ff-4eeeab6f9d68" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                       SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                     strategy=&#x27;constant&#x27;)),
                                                                      (&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                      [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                                     (&#x27;numerical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                       SimpleImputer()),
                                                                      (&#x27;scaler&#x27;,
                                                                       StandardScaler())]),
                                                      [&#x27;age&#x27;, &#x27;weight&#x27;])])),
                    (&#x27;logisticregression&#x27;, LogisticRegression(max_iter=500))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b6f70c47-46d6-4cf0-8849-a4f42a8dad92" type="checkbox" ><label for="b6f70c47-46d6-4cf0-8849-a4f42a8dad92" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                       SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                     strategy=&#x27;constant&#x27;)),
                                                                      (&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                      [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                                     (&#x27;numerical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                       SimpleImputer()),
                                                                      (&#x27;scaler&#x27;,
                                                                       StandardScaler())]),
                                                      [&#x27;age&#x27;, &#x27;weight&#x27;])])),
                    (&#x27;logisticregression&#x27;, LogisticRegression(max_iter=500))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f15391b0-5ca7-40d3-a550-c0cc0cc8b99f" type="checkbox" ><label for="f15391b0-5ca7-40d3-a550-c0cc0cc8b99f" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                      SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                    strategy=&#x27;constant&#x27;)),
                                                     (&#x27;onehot&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                     [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                    (&#x27;numerical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                      SimpleImputer()),
                                                     (&#x27;scaler&#x27;, StandardScaler())]),
                                     [&#x27;age&#x27;, &#x27;weight&#x27;])])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="375b329f-1c2f-426c-b28b-128397c5f922" type="checkbox" ><label for="375b329f-1c2f-426c-b28b-128397c5f922" class="sk-toggleable__label sk-toggleable__label-arrow">categorical</label><div class="sk-toggleable__content"><pre>[&#x27;state&#x27;, &#x27;gender&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ac5bb958-0f4a-41ee-b208-8209f0082cbd" type="checkbox" ><label for="ac5bb958-0f4a-41ee-b208-8209f0082cbd" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(fill_value=&#x27;missing&#x27;, strategy=&#x27;constant&#x27;)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6affd050-5ac1-4b7e-a100-2162fb6b1c9c" type="checkbox" ><label for="6affd050-5ac1-4b7e-a100-2162fb6b1c9c" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ee3a4d31-67f5-4d0a-9fae-6aaddbdf7a4f" type="checkbox" ><label for="ee3a4d31-67f5-4d0a-9fae-6aaddbdf7a4f" class="sk-toggleable__label sk-toggleable__label-arrow">numerical</label><div class="sk-toggleable__content"><pre>[&#x27;age&#x27;, &#x27;weight&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="58e570a4-6efd-4b36-b878-818bad9d0c48" type="checkbox" ><label for="58e570a4-6efd-4b36-b878-818bad9d0c48" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1272462b-c632-49c9-a4f2-755a1a64a1f8" type="checkbox" ><label for="1272462b-c632-49c9-a4f2-755a1a64a1f8" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ad9e953a-8217-4da2-b543-497c11999352" type="checkbox" ><label for="ad9e953a-8217-4da2-b543-497c11999352" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(max_iter=500)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 139-145

Displaying a Grid Search over a Pipeline with a Classifier
###############################################################################
 This section constructs a :class:`~sklearn.model_selection.GridSearchCV`
 over a :class:`~sklearn.pipeline.Pipeline` with
 :class:`~sklearn.ensemble.RandomForestClassifier` and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 145-193

.. code-block:: default


    import numpy as np
    from sklearn.pipeline import make_pipeline
    from sklearn.pipeline import Pipeline
    from sklearn.impute import SimpleImputer
    from sklearn.compose import ColumnTransformer
    from sklearn.preprocessing import OneHotEncoder, StandardScaler
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.model_selection import GridSearchCV
    from sklearn import set_config

    numeric_preprocessor = Pipeline(
        steps=[
            ("imputation_mean", SimpleImputer(missing_values=np.nan, strategy="mean")),
            ("scaler", StandardScaler()),
        ]
    )

    categorical_preprocessor = Pipeline(
        steps=[
            (
                "imputation_constant",
                SimpleImputer(fill_value="missing", strategy="constant"),
            ),
            ("onehot", OneHotEncoder(handle_unknown="ignore")),
        ]
    )

    preprocessor = ColumnTransformer(
        [
            ("categorical", categorical_preprocessor, ["state", "gender"]),
            ("numerical", numeric_preprocessor, ["age", "weight"]),
        ]
    )

    pipe = Pipeline(
        steps=[("preprocessor", preprocessor), ("classifier", RandomForestClassifier())]
    )

    param_grid = {
        "classifier__n_estimators": [200, 500],
        "classifier__max_features": ["auto", "sqrt", "log2"],
        "classifier__max_depth": [4, 5, 6, 7, 8],
        "classifier__criterion": ["gini", "entropy"],
    }

    grid_search = GridSearchCV(pipe, param_grid=param_grid, n_jobs=1)








.. GENERATED FROM PYTHON SOURCE LINES 194-195

To visualize the diagram, change to `display='diagram'`.

.. GENERATED FROM PYTHON SOURCE LINES 195-197

.. code-block:: default

    set_config(display="diagram")
    grid_search  # click on the diagram below to see the details of each step





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 {color: black;background-color: white;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 pre{padding: 0;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 div.sk-toggleable {background-color: white;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 div.sk-estimator:hover {background-color: #d4ebff;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 div.sk-item {z-index: 1;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 div.sk-parallel-item:only-child::after {width: 0;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-b2058175-9b35-4772-afd8-7fdc38ee4c56 div.sk-text-repr-fallback {display: none;}</style><div id="sk-b2058175-9b35-4772-afd8-7fdc38ee4c56" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>GridSearchCV(estimator=Pipeline(steps=[(&#x27;preprocessor&#x27;,
                                            ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                                              SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                                            strategy=&#x27;constant&#x27;)),
                                                                                             (&#x27;onehot&#x27;,
                                                                                              OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                                             [&#x27;state&#x27;,
                                                                              &#x27;gender&#x27;]),
                                                                            (&#x27;numerical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                                              SimpleImputer()),
                                                                                             (&#x27;scaler&#x27;,
                                                                                              StandardScaler())]),
                                                                             [&#x27;age&#x27;,
                                                                              &#x27;weight&#x27;])])),
                                           (&#x27;classifier&#x27;,
                                            RandomForestClassifier())]),
                 n_jobs=1,
                 param_grid={&#x27;classifier__criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],
                             &#x27;classifier__max_depth&#x27;: [4, 5, 6, 7, 8],
                             &#x27;classifier__max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;, &#x27;log2&#x27;],
                             &#x27;classifier__n_estimators&#x27;: [200, 500]})</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="494539a6-7563-4ab2-97a4-b9ade95e6220" type="checkbox" ><label for="494539a6-7563-4ab2-97a4-b9ade95e6220" class="sk-toggleable__label sk-toggleable__label-arrow">GridSearchCV</label><div class="sk-toggleable__content"><pre>GridSearchCV(estimator=Pipeline(steps=[(&#x27;preprocessor&#x27;,
                                            ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                                              SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                                            strategy=&#x27;constant&#x27;)),
                                                                                             (&#x27;onehot&#x27;,
                                                                                              OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                                             [&#x27;state&#x27;,
                                                                              &#x27;gender&#x27;]),
                                                                            (&#x27;numerical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                                              SimpleImputer()),
                                                                                             (&#x27;scaler&#x27;,
                                                                                              StandardScaler())]),
                                                                             [&#x27;age&#x27;,
                                                                              &#x27;weight&#x27;])])),
                                           (&#x27;classifier&#x27;,
                                            RandomForestClassifier())]),
                 n_jobs=1,
                 param_grid={&#x27;classifier__criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],
                             &#x27;classifier__max_depth&#x27;: [4, 5, 6, 7, 8],
                             &#x27;classifier__max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;, &#x27;log2&#x27;],
                             &#x27;classifier__n_estimators&#x27;: [200, 500]})</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1aeb6592-4e32-483b-bc2d-2abf86a06918" type="checkbox" ><label for="1aeb6592-4e32-483b-bc2d-2abf86a06918" class="sk-toggleable__label sk-toggleable__label-arrow">estimator: Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,
                     ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                       SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                     strategy=&#x27;constant&#x27;)),
                                                                      (&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                      [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                                     (&#x27;numerical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                       SimpleImputer()),
                                                                      (&#x27;scaler&#x27;,
                                                                       StandardScaler())]),
                                                      [&#x27;age&#x27;, &#x27;weight&#x27;])])),
                    (&#x27;classifier&#x27;, RandomForestClassifier())])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="95c08cd9-3082-48a9-9593-b4d4a5c92e08" type="checkbox" ><label for="95c08cd9-3082-48a9-9593-b4d4a5c92e08" class="sk-toggleable__label sk-toggleable__label-arrow">preprocessor: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                      SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                    strategy=&#x27;constant&#x27;)),
                                                     (&#x27;onehot&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                     [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                    (&#x27;numerical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                      SimpleImputer()),
                                                     (&#x27;scaler&#x27;, StandardScaler())]),
                                     [&#x27;age&#x27;, &#x27;weight&#x27;])])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a57d203f-69ee-4a51-9ff1-6d43fa260576" type="checkbox" ><label for="a57d203f-69ee-4a51-9ff1-6d43fa260576" class="sk-toggleable__label sk-toggleable__label-arrow">categorical</label><div class="sk-toggleable__content"><pre>[&#x27;state&#x27;, &#x27;gender&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="eb9f1c82-c648-4817-b46e-f3ae3e0bf1fd" type="checkbox" ><label for="eb9f1c82-c648-4817-b46e-f3ae3e0bf1fd" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(fill_value=&#x27;missing&#x27;, strategy=&#x27;constant&#x27;)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="cf1eeda6-c81a-4426-a504-5d70cc626108" type="checkbox" ><label for="cf1eeda6-c81a-4426-a504-5d70cc626108" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="cb8edd4b-01dd-4e62-a12c-8ca65c7aa34f" type="checkbox" ><label for="cb8edd4b-01dd-4e62-a12c-8ca65c7aa34f" class="sk-toggleable__label sk-toggleable__label-arrow">numerical</label><div class="sk-toggleable__content"><pre>[&#x27;age&#x27;, &#x27;weight&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7bf21465-c4e1-4950-8bc1-cb537264c3f5" type="checkbox" ><label for="7bf21465-c4e1-4950-8bc1-cb537264c3f5" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="126955f1-3c68-475c-8d47-2aa96c1dbf70" type="checkbox" ><label for="126955f1-3c68-475c-8d47-2aa96c1dbf70" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="873d8f42-b1a2-4423-b40a-e13066551cd4" type="checkbox" ><label for="873d8f42-b1a2-4423-b40a-e13066551cd4" class="sk-toggleable__label sk-toggleable__label-arrow">RandomForestClassifier</label><div class="sk-toggleable__content"><pre>RandomForestClassifier()</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.088 seconds)


.. _sphx_glr_download_auto_examples_miscellaneous_plot_pipeline_display.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/miscellaneous/plot_pipeline_display.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_pipeline_display.py <plot_pipeline_display.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_pipeline_display.ipynb <plot_pipeline_display.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
