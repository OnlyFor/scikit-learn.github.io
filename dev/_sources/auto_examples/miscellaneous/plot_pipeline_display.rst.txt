
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/miscellaneous/plot_pipeline_display.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_miscellaneous_plot_pipeline_display.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_miscellaneous_plot_pipeline_display.py:


=================================================================
Displaying Pipelines
=================================================================

The default configuration for displaying a pipeline is `'text'` where
`set_config(display='text')`.  To visualize the diagram in Jupyter Notebook,
use `set_config(display='diagram')` and then output the pipeline object.

To see more detailed steps in the visualization of the pipeline, click on the
steps in the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 15-21

Displaying a Pipeline with a Preprocessing Step and Classifier
###############################################################################
 This section constructs a :class:`~sklearn.pipeline.Pipeline` with a preprocessing
 step, :class:`~sklearn.preprocessing.StandardScaler`, and classifier,
 :class:`~sklearn.linear_model.LogisticRegression`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 21-33

.. code-block:: default


    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler
    from sklearn.linear_model import LogisticRegression
    from sklearn import set_config

    steps = [
        ("preprocessing", StandardScaler()),
        ("classifier", LogisticRegression()),
    ]
    pipe = Pipeline(steps)








.. GENERATED FROM PYTHON SOURCE LINES 34-35

To view the text pipeline, the default is `display='text'`.

.. GENERATED FROM PYTHON SOURCE LINES 35-38

.. code-block:: default

    set_config(display="text")
    pipe





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Pipeline(steps=[('preprocessing', StandardScaler()),
                    ('classifier', LogisticRegression())])



.. GENERATED FROM PYTHON SOURCE LINES 39-40

To visualize the diagram, change `display='diagram'`.

.. GENERATED FROM PYTHON SOURCE LINES 40-43

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-d4e215a7-3563-4454-80d5-ab7f330c803f {color: black;background-color: white;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f pre{padding: 0;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f div.sk-toggleable {background-color: white;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f div.sk-estimator:hover {background-color: #d4ebff;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f div.sk-item {z-index: 1;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f div.sk-parallel-item:only-child::after {width: 0;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-d4e215a7-3563-4454-80d5-ab7f330c803f div.sk-text-repr-fallback {display: none;}</style><div id="sk-d4e215a7-3563-4454-80d5-ab7f330c803f" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;preprocessing&#x27;, StandardScaler()),
                    (&#x27;classifier&#x27;, LogisticRegression())])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5463b54d-f9cf-4943-9849-ef194eb4f0f4" type="checkbox" ><label for="5463b54d-f9cf-4943-9849-ef194eb4f0f4" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;preprocessing&#x27;, StandardScaler()),
                    (&#x27;classifier&#x27;, LogisticRegression())])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="fde1eb20-e426-47c6-8907-121551c23ea7" type="checkbox" ><label for="fde1eb20-e426-47c6-8907-121551c23ea7" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="be152f37-2c14-4e42-9579-517f07c4d462" type="checkbox" ><label for="be152f37-2c14-4e42-9579-517f07c4d462" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 44-51

Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier
###############################################################################
 This section constructs a :class:`~sklearn.pipeline.Pipeline` with multiple
 preprocessing steps, :class:`~sklearn.preprocessing.PolynomialFeatures` and
 :class:`~sklearn.preprocessing.StandardScaler`, and a classifer step,
 :class:`~sklearn.linear_model.LogisticRegression`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 51-64

.. code-block:: default


    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler, PolynomialFeatures
    from sklearn.linear_model import LogisticRegression
    from sklearn import set_config

    steps = [
        ("standard_scaler", StandardScaler()),
        ("polynomial", PolynomialFeatures(degree=3)),
        ("classifier", LogisticRegression(C=2.0)),
    ]
    pipe = Pipeline(steps)








.. GENERATED FROM PYTHON SOURCE LINES 65-66

To visualize the diagram, change to display='diagram'

.. GENERATED FROM PYTHON SOURCE LINES 66-69

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 {color: black;background-color: white;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 pre{padding: 0;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 div.sk-toggleable {background-color: white;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 div.sk-item {z-index: 1;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 div.sk-parallel-item:only-child::after {width: 0;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3 div.sk-text-repr-fallback {display: none;}</style><div id="sk-ba599c1f-ca3b-4123-9ee4-e989176c7ad3" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;standard_scaler&#x27;, StandardScaler()),
                    (&#x27;polynomial&#x27;, PolynomialFeatures(degree=3)),
                    (&#x27;classifier&#x27;, LogisticRegression(C=2.0))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1adaf292-743f-4e24-94f7-8208436c147b" type="checkbox" ><label for="1adaf292-743f-4e24-94f7-8208436c147b" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;standard_scaler&#x27;, StandardScaler()),
                    (&#x27;polynomial&#x27;, PolynomialFeatures(degree=3)),
                    (&#x27;classifier&#x27;, LogisticRegression(C=2.0))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="baad14c4-3466-4d50-b0d3-bc0d9e1811b0" type="checkbox" ><label for="baad14c4-3466-4d50-b0d3-bc0d9e1811b0" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="161536ae-3bd5-49a2-8f45-10288b4595c4" type="checkbox" ><label for="161536ae-3bd5-49a2-8f45-10288b4595c4" class="sk-toggleable__label sk-toggleable__label-arrow">PolynomialFeatures</label><div class="sk-toggleable__content"><pre>PolynomialFeatures(degree=3)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d7332d90-382e-418f-a81d-ac7ccc2b529c" type="checkbox" ><label for="d7332d90-382e-418f-a81d-ac7ccc2b529c" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(C=2.0)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 70-76

Displaying a Pipeline and Dimensionality Reduction and Classifier
###############################################################################
 This section constructs a :class:`~sklearn.pipeline.Pipeline` with a
 dimensionality reduction step, :class:`~sklearn.decomposition.PCA`,
 a classifier, :class:`~sklearn.svm.SVC`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 76-85

.. code-block:: default


    from sklearn.pipeline import Pipeline
    from sklearn.svm import SVC
    from sklearn.decomposition import PCA
    from sklearn import set_config

    steps = [("reduce_dim", PCA(n_components=4)), ("classifier", SVC(kernel="linear"))]
    pipe = Pipeline(steps)








.. GENERATED FROM PYTHON SOURCE LINES 86-87

To visualize the diagram, change to `display='diagram'`.

.. GENERATED FROM PYTHON SOURCE LINES 87-90

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-2a7245ce-772e-47ba-a6ab-b94e763315da {color: black;background-color: white;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da pre{padding: 0;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da div.sk-toggleable {background-color: white;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da div.sk-estimator:hover {background-color: #d4ebff;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da div.sk-item {z-index: 1;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da div.sk-parallel-item:only-child::after {width: 0;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-2a7245ce-772e-47ba-a6ab-b94e763315da div.sk-text-repr-fallback {display: none;}</style><div id="sk-2a7245ce-772e-47ba-a6ab-b94e763315da" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;reduce_dim&#x27;, PCA(n_components=4)),
                    (&#x27;classifier&#x27;, SVC(kernel=&#x27;linear&#x27;))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="26684117-c419-4487-a9c9-4ab07b44d00c" type="checkbox" ><label for="26684117-c419-4487-a9c9-4ab07b44d00c" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;reduce_dim&#x27;, PCA(n_components=4)),
                    (&#x27;classifier&#x27;, SVC(kernel=&#x27;linear&#x27;))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c8931e1d-f3b2-439d-8b53-8d33f2ff40cd" type="checkbox" ><label for="c8931e1d-f3b2-439d-8b53-8d33f2ff40cd" class="sk-toggleable__label sk-toggleable__label-arrow">PCA</label><div class="sk-toggleable__content"><pre>PCA(n_components=4)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="59df0dd9-5a1e-40ef-bbdd-411d882b0cea" type="checkbox" ><label for="59df0dd9-5a1e-40ef-bbdd-411d882b0cea" class="sk-toggleable__label sk-toggleable__label-arrow">SVC</label><div class="sk-toggleable__content"><pre>SVC(kernel=&#x27;linear&#x27;)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 91-97

Displaying a Complex Pipeline Chaining a Column Transformer
###############################################################################
 This section constructs a complex :class:`~sklearn.pipeline.Pipeline` with a
 :class:`~sklearn.compose.ColumnTransformer` and a classifier,
 :class:`~sklearn.linear_model.LogisticRegression`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 97-133

.. code-block:: default


    import numpy as np
    from sklearn.pipeline import make_pipeline
    from sklearn.pipeline import Pipeline
    from sklearn.impute import SimpleImputer
    from sklearn.compose import ColumnTransformer
    from sklearn.preprocessing import OneHotEncoder, StandardScaler
    from sklearn.linear_model import LogisticRegression
    from sklearn import set_config

    numeric_preprocessor = Pipeline(
        steps=[
            ("imputation_mean", SimpleImputer(missing_values=np.nan, strategy="mean")),
            ("scaler", StandardScaler()),
        ]
    )

    categorical_preprocessor = Pipeline(
        steps=[
            (
                "imputation_constant",
                SimpleImputer(fill_value="missing", strategy="constant"),
            ),
            ("onehot", OneHotEncoder(handle_unknown="ignore")),
        ]
    )

    preprocessor = ColumnTransformer(
        [
            ("categorical", categorical_preprocessor, ["state", "gender"]),
            ("numerical", numeric_preprocessor, ["age", "weight"]),
        ]
    )

    pipe = make_pipeline(preprocessor, LogisticRegression(max_iter=500))








.. GENERATED FROM PYTHON SOURCE LINES 134-135

To visualize the diagram, change to `display='diagram'`

.. GENERATED FROM PYTHON SOURCE LINES 135-138

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-2181c734-7c3c-4d78-8670-2990ff6a720f {color: black;background-color: white;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f pre{padding: 0;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f div.sk-toggleable {background-color: white;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f div.sk-estimator:hover {background-color: #d4ebff;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f div.sk-item {z-index: 1;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f div.sk-parallel-item:only-child::after {width: 0;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-2181c734-7c3c-4d78-8670-2990ff6a720f div.sk-text-repr-fallback {display: none;}</style><div id="sk-2181c734-7c3c-4d78-8670-2990ff6a720f" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                       SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                     strategy=&#x27;constant&#x27;)),
                                                                      (&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                      [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                                     (&#x27;numerical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                       SimpleImputer()),
                                                                      (&#x27;scaler&#x27;,
                                                                       StandardScaler())]),
                                                      [&#x27;age&#x27;, &#x27;weight&#x27;])])),
                    (&#x27;logisticregression&#x27;, LogisticRegression(max_iter=500))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="98f2745f-e0be-4c37-bb0f-b4c2d30558f5" type="checkbox" ><label for="98f2745f-e0be-4c37-bb0f-b4c2d30558f5" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                       SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                     strategy=&#x27;constant&#x27;)),
                                                                      (&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                      [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                                     (&#x27;numerical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                       SimpleImputer()),
                                                                      (&#x27;scaler&#x27;,
                                                                       StandardScaler())]),
                                                      [&#x27;age&#x27;, &#x27;weight&#x27;])])),
                    (&#x27;logisticregression&#x27;, LogisticRegression(max_iter=500))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="bf172327-0949-4cfb-9b0d-85c059d72674" type="checkbox" ><label for="bf172327-0949-4cfb-9b0d-85c059d72674" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                      SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                    strategy=&#x27;constant&#x27;)),
                                                     (&#x27;onehot&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                     [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                    (&#x27;numerical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                      SimpleImputer()),
                                                     (&#x27;scaler&#x27;, StandardScaler())]),
                                     [&#x27;age&#x27;, &#x27;weight&#x27;])])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="12e9fd1e-f7fd-4841-851c-ac54c002c84f" type="checkbox" ><label for="12e9fd1e-f7fd-4841-851c-ac54c002c84f" class="sk-toggleable__label sk-toggleable__label-arrow">categorical</label><div class="sk-toggleable__content"><pre>[&#x27;state&#x27;, &#x27;gender&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="38501333-f73e-479f-8368-5d892e24f0b6" type="checkbox" ><label for="38501333-f73e-479f-8368-5d892e24f0b6" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(fill_value=&#x27;missing&#x27;, strategy=&#x27;constant&#x27;)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9b2d0aea-e1cf-4d35-8020-182a981bb030" type="checkbox" ><label for="9b2d0aea-e1cf-4d35-8020-182a981bb030" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ee1bd83c-774b-4938-a1dc-24491ecab88d" type="checkbox" ><label for="ee1bd83c-774b-4938-a1dc-24491ecab88d" class="sk-toggleable__label sk-toggleable__label-arrow">numerical</label><div class="sk-toggleable__content"><pre>[&#x27;age&#x27;, &#x27;weight&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5bc243c2-a6fc-4ca6-b6dc-1b27c21fade3" type="checkbox" ><label for="5bc243c2-a6fc-4ca6-b6dc-1b27c21fade3" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e9d5567a-b169-4fb4-8481-13d52be30fea" type="checkbox" ><label for="e9d5567a-b169-4fb4-8481-13d52be30fea" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ff592c7b-44a5-44cb-9a56-3f86a2bb951b" type="checkbox" ><label for="ff592c7b-44a5-44cb-9a56-3f86a2bb951b" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(max_iter=500)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 139-145

Displaying a Grid Search over a Pipeline with a Classifier
###############################################################################
 This section constructs a :class:`~sklearn.model_selection.GridSearchCV`
 over a :class:`~sklearn.pipeline.Pipeline` with
 :class:`~sklearn.ensemble.RandomForestClassifier` and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 145-193

.. code-block:: default


    import numpy as np
    from sklearn.pipeline import make_pipeline
    from sklearn.pipeline import Pipeline
    from sklearn.impute import SimpleImputer
    from sklearn.compose import ColumnTransformer
    from sklearn.preprocessing import OneHotEncoder, StandardScaler
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.model_selection import GridSearchCV
    from sklearn import set_config

    numeric_preprocessor = Pipeline(
        steps=[
            ("imputation_mean", SimpleImputer(missing_values=np.nan, strategy="mean")),
            ("scaler", StandardScaler()),
        ]
    )

    categorical_preprocessor = Pipeline(
        steps=[
            (
                "imputation_constant",
                SimpleImputer(fill_value="missing", strategy="constant"),
            ),
            ("onehot", OneHotEncoder(handle_unknown="ignore")),
        ]
    )

    preprocessor = ColumnTransformer(
        [
            ("categorical", categorical_preprocessor, ["state", "gender"]),
            ("numerical", numeric_preprocessor, ["age", "weight"]),
        ]
    )

    pipe = Pipeline(
        steps=[("preprocessor", preprocessor), ("classifier", RandomForestClassifier())]
    )

    param_grid = {
        "classifier__n_estimators": [200, 500],
        "classifier__max_features": ["auto", "sqrt", "log2"],
        "classifier__max_depth": [4, 5, 6, 7, 8],
        "classifier__criterion": ["gini", "entropy"],
    }

    grid_search = GridSearchCV(pipe, param_grid=param_grid, n_jobs=1)








.. GENERATED FROM PYTHON SOURCE LINES 194-195

To visualize the diagram, change to `display='diagram'`.

.. GENERATED FROM PYTHON SOURCE LINES 195-197

.. code-block:: default

    set_config(display="diagram")
    grid_search  # click on the diagram below to see the details of each step





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 {color: black;background-color: white;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 pre{padding: 0;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 div.sk-toggleable {background-color: white;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 div.sk-estimator:hover {background-color: #d4ebff;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 div.sk-item {z-index: 1;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 div.sk-parallel-item:only-child::after {width: 0;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68 div.sk-text-repr-fallback {display: none;}</style><div id="sk-5fc363d4-3acb-4c4b-88f7-8c7b92a45d68" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>GridSearchCV(estimator=Pipeline(steps=[(&#x27;preprocessor&#x27;,
                                            ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                                              SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                                            strategy=&#x27;constant&#x27;)),
                                                                                             (&#x27;onehot&#x27;,
                                                                                              OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                                             [&#x27;state&#x27;,
                                                                              &#x27;gender&#x27;]),
                                                                            (&#x27;numerical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                                              SimpleImputer()),
                                                                                             (&#x27;scaler&#x27;,
                                                                                              StandardScaler())]),
                                                                             [&#x27;age&#x27;,
                                                                              &#x27;weight&#x27;])])),
                                           (&#x27;classifier&#x27;,
                                            RandomForestClassifier())]),
                 n_jobs=1,
                 param_grid={&#x27;classifier__criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],
                             &#x27;classifier__max_depth&#x27;: [4, 5, 6, 7, 8],
                             &#x27;classifier__max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;, &#x27;log2&#x27;],
                             &#x27;classifier__n_estimators&#x27;: [200, 500]})</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="dbcbcd27-e41a-4c53-9a83-3c8123399fc0" type="checkbox" ><label for="dbcbcd27-e41a-4c53-9a83-3c8123399fc0" class="sk-toggleable__label sk-toggleable__label-arrow">GridSearchCV</label><div class="sk-toggleable__content"><pre>GridSearchCV(estimator=Pipeline(steps=[(&#x27;preprocessor&#x27;,
                                            ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                                              SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                                            strategy=&#x27;constant&#x27;)),
                                                                                             (&#x27;onehot&#x27;,
                                                                                              OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                                             [&#x27;state&#x27;,
                                                                              &#x27;gender&#x27;]),
                                                                            (&#x27;numerical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                                              SimpleImputer()),
                                                                                             (&#x27;scaler&#x27;,
                                                                                              StandardScaler())]),
                                                                             [&#x27;age&#x27;,
                                                                              &#x27;weight&#x27;])])),
                                           (&#x27;classifier&#x27;,
                                            RandomForestClassifier())]),
                 n_jobs=1,
                 param_grid={&#x27;classifier__criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],
                             &#x27;classifier__max_depth&#x27;: [4, 5, 6, 7, 8],
                             &#x27;classifier__max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;, &#x27;log2&#x27;],
                             &#x27;classifier__n_estimators&#x27;: [200, 500]})</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2e5679a1-e046-46ab-9d47-ee4a46d08230" type="checkbox" ><label for="2e5679a1-e046-46ab-9d47-ee4a46d08230" class="sk-toggleable__label sk-toggleable__label-arrow">estimator: Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,
                     ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                       SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                     strategy=&#x27;constant&#x27;)),
                                                                      (&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                      [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                                     (&#x27;numerical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                       SimpleImputer()),
                                                                      (&#x27;scaler&#x27;,
                                                                       StandardScaler())]),
                                                      [&#x27;age&#x27;, &#x27;weight&#x27;])])),
                    (&#x27;classifier&#x27;, RandomForestClassifier())])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7a749062-aaad-40f2-bc52-a08e4b931bf2" type="checkbox" ><label for="7a749062-aaad-40f2-bc52-a08e4b931bf2" class="sk-toggleable__label sk-toggleable__label-arrow">preprocessor: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                      SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                    strategy=&#x27;constant&#x27;)),
                                                     (&#x27;onehot&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                     [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                    (&#x27;numerical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                      SimpleImputer()),
                                                     (&#x27;scaler&#x27;, StandardScaler())]),
                                     [&#x27;age&#x27;, &#x27;weight&#x27;])])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9cdb9bfe-77fc-4602-adfb-5c74f806f7af" type="checkbox" ><label for="9cdb9bfe-77fc-4602-adfb-5c74f806f7af" class="sk-toggleable__label sk-toggleable__label-arrow">categorical</label><div class="sk-toggleable__content"><pre>[&#x27;state&#x27;, &#x27;gender&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1bcb26f3-2e5c-47c3-a112-92e1e6d177f0" type="checkbox" ><label for="1bcb26f3-2e5c-47c3-a112-92e1e6d177f0" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(fill_value=&#x27;missing&#x27;, strategy=&#x27;constant&#x27;)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d6001fa2-c92a-471f-9780-efc691615c35" type="checkbox" ><label for="d6001fa2-c92a-471f-9780-efc691615c35" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3b6fab2c-7c6d-45a6-b418-5561b7145bc8" type="checkbox" ><label for="3b6fab2c-7c6d-45a6-b418-5561b7145bc8" class="sk-toggleable__label sk-toggleable__label-arrow">numerical</label><div class="sk-toggleable__content"><pre>[&#x27;age&#x27;, &#x27;weight&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="fb7812a0-3c2c-4a03-948e-d9b8c6766940" type="checkbox" ><label for="fb7812a0-3c2c-4a03-948e-d9b8c6766940" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8fe24bbe-4cda-4ad0-a994-7fbd608d3d15" type="checkbox" ><label for="8fe24bbe-4cda-4ad0-a994-7fbd608d3d15" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ff3b6cb9-d33b-4889-9cb3-b19f76f1d638" type="checkbox" ><label for="ff3b6cb9-d33b-4889-9cb3-b19f76f1d638" class="sk-toggleable__label sk-toggleable__label-arrow">RandomForestClassifier</label><div class="sk-toggleable__content"><pre>RandomForestClassifier()</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.086 seconds)


.. _sphx_glr_download_auto_examples_miscellaneous_plot_pipeline_display.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/miscellaneous/plot_pipeline_display.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_pipeline_display.py <plot_pipeline_display.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_pipeline_display.ipynb <plot_pipeline_display.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
