
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/miscellaneous/plot_pipeline_display.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_miscellaneous_plot_pipeline_display.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_miscellaneous_plot_pipeline_display.py:


=================================================================
Displaying Pipelines
=================================================================

The default configuration for displaying a pipeline is `'text'` where
`set_config(display='text')`.  To visualize the diagram in Jupyter Notebook,
use `set_config(display='diagram')` and then output the pipeline object.

To see more detailed steps in the visualization of the pipeline, click on the
steps in the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 15-21

Displaying a Pipeline with a Preprocessing Step and Classifier
###############################################################################
 This section constructs a :class:`~sklearn.pipeline.Pipeline` with a preprocessing
 step, :class:`~sklearn.preprocessing.StandardScaler`, and classifier,
 :class:`~sklearn.linear_model.LogisticRegression`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 21-33

.. code-block:: default


    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler
    from sklearn.linear_model import LogisticRegression
    from sklearn import set_config

    steps = [
        ("preprocessing", StandardScaler()),
        ("classifier", LogisticRegression()),
    ]
    pipe = Pipeline(steps)








.. GENERATED FROM PYTHON SOURCE LINES 34-35

To view the text pipeline, the default is `display='text'`.

.. GENERATED FROM PYTHON SOURCE LINES 35-38

.. code-block:: default

    set_config(display="text")
    pipe





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Pipeline(steps=[('preprocessing', StandardScaler()),
                    ('classifier', LogisticRegression())])



.. GENERATED FROM PYTHON SOURCE LINES 39-40

To visualize the diagram, change `display='diagram'`.

.. GENERATED FROM PYTHON SOURCE LINES 40-43

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 {color: black;background-color: white;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 pre{padding: 0;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 div.sk-toggleable {background-color: white;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 div.sk-estimator:hover {background-color: #d4ebff;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 div.sk-item {z-index: 1;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 div.sk-parallel-item:only-child::after {width: 0;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08 div.sk-text-repr-fallback {display: none;}</style><div id="sk-0eacbe5a-5d13-4a87-89e3-ef64a20c7c08" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;preprocessing&#x27;, StandardScaler()),
                    (&#x27;classifier&#x27;, LogisticRegression())])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1daaf8c6-b14d-4698-9865-1e01407ff513" type="checkbox" ><label for="1daaf8c6-b14d-4698-9865-1e01407ff513" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;preprocessing&#x27;, StandardScaler()),
                    (&#x27;classifier&#x27;, LogisticRegression())])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8989dd22-1a0b-47da-b4a6-c665a2062128" type="checkbox" ><label for="8989dd22-1a0b-47da-b4a6-c665a2062128" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1296377b-9c3e-4270-b512-b7674e13a7d7" type="checkbox" ><label for="1296377b-9c3e-4270-b512-b7674e13a7d7" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 44-51

Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier
###############################################################################
 This section constructs a :class:`~sklearn.pipeline.Pipeline` with multiple
 preprocessing steps, :class:`~sklearn.preprocessing.PolynomialFeatures` and
 :class:`~sklearn.preprocessing.StandardScaler`, and a classifer step,
 :class:`~sklearn.linear_model.LogisticRegression`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 51-64

.. code-block:: default


    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler, PolynomialFeatures
    from sklearn.linear_model import LogisticRegression
    from sklearn import set_config

    steps = [
        ("standard_scaler", StandardScaler()),
        ("polynomial", PolynomialFeatures(degree=3)),
        ("classifier", LogisticRegression(C=2.0)),
    ]
    pipe = Pipeline(steps)








.. GENERATED FROM PYTHON SOURCE LINES 65-66

To visualize the diagram, change to display='diagram'

.. GENERATED FROM PYTHON SOURCE LINES 66-69

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d {color: black;background-color: white;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d pre{padding: 0;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d div.sk-toggleable {background-color: white;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d div.sk-estimator:hover {background-color: #d4ebff;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d div.sk-item {z-index: 1;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d div.sk-parallel-item:only-child::after {width: 0;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-da217418-6b01-4f32-8c2d-3ba31b469c1d div.sk-text-repr-fallback {display: none;}</style><div id="sk-da217418-6b01-4f32-8c2d-3ba31b469c1d" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;standard_scaler&#x27;, StandardScaler()),
                    (&#x27;polynomial&#x27;, PolynomialFeatures(degree=3)),
                    (&#x27;classifier&#x27;, LogisticRegression(C=2.0))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f3f8ec88-ae77-495b-b71a-d4316bb669d8" type="checkbox" ><label for="f3f8ec88-ae77-495b-b71a-d4316bb669d8" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;standard_scaler&#x27;, StandardScaler()),
                    (&#x27;polynomial&#x27;, PolynomialFeatures(degree=3)),
                    (&#x27;classifier&#x27;, LogisticRegression(C=2.0))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="426437fa-6ea1-4763-9402-36934b717f44" type="checkbox" ><label for="426437fa-6ea1-4763-9402-36934b717f44" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="cd8fca91-fa9f-4ce9-8b94-f6a88dad90d5" type="checkbox" ><label for="cd8fca91-fa9f-4ce9-8b94-f6a88dad90d5" class="sk-toggleable__label sk-toggleable__label-arrow">PolynomialFeatures</label><div class="sk-toggleable__content"><pre>PolynomialFeatures(degree=3)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2c895781-1340-42f3-9191-89df8eb0c439" type="checkbox" ><label for="2c895781-1340-42f3-9191-89df8eb0c439" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(C=2.0)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 70-76

Displaying a Pipeline and Dimensionality Reduction and Classifier
###############################################################################
 This section constructs a :class:`~sklearn.pipeline.Pipeline` with a
 dimensionality reduction step, :class:`~sklearn.decomposition.PCA`,
 a classifier, :class:`~sklearn.svm.SVC`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 76-85

.. code-block:: default


    from sklearn.pipeline import Pipeline
    from sklearn.svm import SVC
    from sklearn.decomposition import PCA
    from sklearn import set_config

    steps = [("reduce_dim", PCA(n_components=4)), ("classifier", SVC(kernel="linear"))]
    pipe = Pipeline(steps)








.. GENERATED FROM PYTHON SOURCE LINES 86-87

To visualize the diagram, change to `display='diagram'`.

.. GENERATED FROM PYTHON SOURCE LINES 87-90

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a {color: black;background-color: white;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a pre{padding: 0;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a div.sk-toggleable {background-color: white;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a div.sk-estimator:hover {background-color: #d4ebff;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a div.sk-item {z-index: 1;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a div.sk-parallel-item:only-child::after {width: 0;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a div.sk-text-repr-fallback {display: none;}</style><div id="sk-630cfe6c-f82c-4a2b-92a0-32dd19a0b85a" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;reduce_dim&#x27;, PCA(n_components=4)),
                    (&#x27;classifier&#x27;, SVC(kernel=&#x27;linear&#x27;))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2db43d80-1e78-4515-8132-b6ff3eface0f" type="checkbox" ><label for="2db43d80-1e78-4515-8132-b6ff3eface0f" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;reduce_dim&#x27;, PCA(n_components=4)),
                    (&#x27;classifier&#x27;, SVC(kernel=&#x27;linear&#x27;))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="43d833eb-e84b-4f47-8170-834a1b60b1c8" type="checkbox" ><label for="43d833eb-e84b-4f47-8170-834a1b60b1c8" class="sk-toggleable__label sk-toggleable__label-arrow">PCA</label><div class="sk-toggleable__content"><pre>PCA(n_components=4)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="84c41cf9-c8ca-4957-8316-5d48cd6527cd" type="checkbox" ><label for="84c41cf9-c8ca-4957-8316-5d48cd6527cd" class="sk-toggleable__label sk-toggleable__label-arrow">SVC</label><div class="sk-toggleable__content"><pre>SVC(kernel=&#x27;linear&#x27;)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 91-97

Displaying a Complex Pipeline Chaining a Column Transformer
###############################################################################
 This section constructs a complex :class:`~sklearn.pipeline.Pipeline` with a
 :class:`~sklearn.compose.ColumnTransformer` and a classifier,
 :class:`~sklearn.linear_model.LogisticRegression`, and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 97-133

.. code-block:: default


    import numpy as np
    from sklearn.pipeline import make_pipeline
    from sklearn.pipeline import Pipeline
    from sklearn.impute import SimpleImputer
    from sklearn.compose import ColumnTransformer
    from sklearn.preprocessing import OneHotEncoder, StandardScaler
    from sklearn.linear_model import LogisticRegression
    from sklearn import set_config

    numeric_preprocessor = Pipeline(
        steps=[
            ("imputation_mean", SimpleImputer(missing_values=np.nan, strategy="mean")),
            ("scaler", StandardScaler()),
        ]
    )

    categorical_preprocessor = Pipeline(
        steps=[
            (
                "imputation_constant",
                SimpleImputer(fill_value="missing", strategy="constant"),
            ),
            ("onehot", OneHotEncoder(handle_unknown="ignore")),
        ]
    )

    preprocessor = ColumnTransformer(
        [
            ("categorical", categorical_preprocessor, ["state", "gender"]),
            ("numerical", numeric_preprocessor, ["age", "weight"]),
        ]
    )

    pipe = make_pipeline(preprocessor, LogisticRegression(max_iter=500))








.. GENERATED FROM PYTHON SOURCE LINES 134-135

To visualize the diagram, change to `display='diagram'`

.. GENERATED FROM PYTHON SOURCE LINES 135-138

.. code-block:: default

    set_config(display="diagram")
    pipe  # click on the diagram below to see the details of each step






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e {color: black;background-color: white;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e pre{padding: 0;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e div.sk-toggleable {background-color: white;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e div.sk-estimator:hover {background-color: #d4ebff;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e div.sk-item {z-index: 1;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e div.sk-parallel-item:only-child::after {width: 0;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e div.sk-text-repr-fallback {display: none;}</style><div id="sk-5137fce5-f61c-4c0c-840c-48c6ba9fc33e" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                       SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                     strategy=&#x27;constant&#x27;)),
                                                                      (&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                      [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                                     (&#x27;numerical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                       SimpleImputer()),
                                                                      (&#x27;scaler&#x27;,
                                                                       StandardScaler())]),
                                                      [&#x27;age&#x27;, &#x27;weight&#x27;])])),
                    (&#x27;logisticregression&#x27;, LogisticRegression(max_iter=500))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b7a712b7-5444-4bd9-99e6-a22a4513d783" type="checkbox" ><label for="b7a712b7-5444-4bd9-99e6-a22a4513d783" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,
                     ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                       SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                     strategy=&#x27;constant&#x27;)),
                                                                      (&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                      [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                                     (&#x27;numerical&#x27;,
                                                      Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                       SimpleImputer()),
                                                                      (&#x27;scaler&#x27;,
                                                                       StandardScaler())]),
                                                      [&#x27;age&#x27;, &#x27;weight&#x27;])])),
                    (&#x27;logisticregression&#x27;, LogisticRegression(max_iter=500))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="55be0df3-24a1-45f4-8aec-c0a758398b6c" type="checkbox" ><label for="55be0df3-24a1-45f4-8aec-c0a758398b6c" class="sk-toggleable__label sk-toggleable__label-arrow">columntransformer: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                      SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                    strategy=&#x27;constant&#x27;)),
                                                     (&#x27;onehot&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                     [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                    (&#x27;numerical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                      SimpleImputer()),
                                                     (&#x27;scaler&#x27;, StandardScaler())]),
                                     [&#x27;age&#x27;, &#x27;weight&#x27;])])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e25426ec-f7a8-4409-b6f2-e90117be1c9d" type="checkbox" ><label for="e25426ec-f7a8-4409-b6f2-e90117be1c9d" class="sk-toggleable__label sk-toggleable__label-arrow">categorical</label><div class="sk-toggleable__content"><pre>[&#x27;state&#x27;, &#x27;gender&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c12dcbee-75e2-49f5-b75b-1adea85bf8bf" type="checkbox" ><label for="c12dcbee-75e2-49f5-b75b-1adea85bf8bf" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(fill_value=&#x27;missing&#x27;, strategy=&#x27;constant&#x27;)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3f9792f4-57dd-48bf-838a-1df4f9893b8e" type="checkbox" ><label for="3f9792f4-57dd-48bf-838a-1df4f9893b8e" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3343aba4-dd37-40f7-ac0f-8bf564ce3010" type="checkbox" ><label for="3343aba4-dd37-40f7-ac0f-8bf564ce3010" class="sk-toggleable__label sk-toggleable__label-arrow">numerical</label><div class="sk-toggleable__content"><pre>[&#x27;age&#x27;, &#x27;weight&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f91a32cf-e5e9-4cab-a142-6eba7750cb2d" type="checkbox" ><label for="f91a32cf-e5e9-4cab-a142-6eba7750cb2d" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="15653976-46a3-46b0-8c0c-c259bd000882" type="checkbox" ><label for="15653976-46a3-46b0-8c0c-c259bd000882" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="863fd7ce-ce34-44d3-b077-c89d33ce9afd" type="checkbox" ><label for="863fd7ce-ce34-44d3-b077-c89d33ce9afd" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(max_iter=500)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 139-145

Displaying a Grid Search over a Pipeline with a Classifier
###############################################################################
 This section constructs a :class:`~sklearn.model_selection.GridSearchCV`
 over a :class:`~sklearn.pipeline.Pipeline` with
 :class:`~sklearn.ensemble.RandomForestClassifier` and displays its visual
 representation.

.. GENERATED FROM PYTHON SOURCE LINES 145-193

.. code-block:: default


    import numpy as np
    from sklearn.pipeline import make_pipeline
    from sklearn.pipeline import Pipeline
    from sklearn.impute import SimpleImputer
    from sklearn.compose import ColumnTransformer
    from sklearn.preprocessing import OneHotEncoder, StandardScaler
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.model_selection import GridSearchCV
    from sklearn import set_config

    numeric_preprocessor = Pipeline(
        steps=[
            ("imputation_mean", SimpleImputer(missing_values=np.nan, strategy="mean")),
            ("scaler", StandardScaler()),
        ]
    )

    categorical_preprocessor = Pipeline(
        steps=[
            (
                "imputation_constant",
                SimpleImputer(fill_value="missing", strategy="constant"),
            ),
            ("onehot", OneHotEncoder(handle_unknown="ignore")),
        ]
    )

    preprocessor = ColumnTransformer(
        [
            ("categorical", categorical_preprocessor, ["state", "gender"]),
            ("numerical", numeric_preprocessor, ["age", "weight"]),
        ]
    )

    pipe = Pipeline(
        steps=[("preprocessor", preprocessor), ("classifier", RandomForestClassifier())]
    )

    param_grid = {
        "classifier__n_estimators": [200, 500],
        "classifier__max_features": ["auto", "sqrt", "log2"],
        "classifier__max_depth": [4, 5, 6, 7, 8],
        "classifier__criterion": ["gini", "entropy"],
    }

    grid_search = GridSearchCV(pipe, param_grid=param_grid, n_jobs=1)








.. GENERATED FROM PYTHON SOURCE LINES 194-195

To visualize the diagram, change to `display='diagram'`.

.. GENERATED FROM PYTHON SOURCE LINES 195-197

.. code-block:: default

    set_config(display="diagram")
    grid_search  # click on the diagram below to see the details of each step





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 {color: black;background-color: white;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 pre{padding: 0;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 div.sk-toggleable {background-color: white;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 div.sk-estimator:hover {background-color: #d4ebff;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 div.sk-item {z-index: 1;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 div.sk-parallel-item:only-child::after {width: 0;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93 div.sk-text-repr-fallback {display: none;}</style><div id="sk-5b7ba5cb-0a49-46e8-985c-d1106a458c93" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>GridSearchCV(estimator=Pipeline(steps=[(&#x27;preprocessor&#x27;,
                                            ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                                              SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                                            strategy=&#x27;constant&#x27;)),
                                                                                             (&#x27;onehot&#x27;,
                                                                                              OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                                             [&#x27;state&#x27;,
                                                                              &#x27;gender&#x27;]),
                                                                            (&#x27;numerical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                                              SimpleImputer()),
                                                                                             (&#x27;scaler&#x27;,
                                                                                              StandardScaler())]),
                                                                             [&#x27;age&#x27;,
                                                                              &#x27;weight&#x27;])])),
                                           (&#x27;classifier&#x27;,
                                            RandomForestClassifier())]),
                 n_jobs=1,
                 param_grid={&#x27;classifier__criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],
                             &#x27;classifier__max_depth&#x27;: [4, 5, 6, 7, 8],
                             &#x27;classifier__max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;, &#x27;log2&#x27;],
                             &#x27;classifier__n_estimators&#x27;: [200, 500]})</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="897204cd-c509-43d6-b1f5-7c0dc0e56a4d" type="checkbox" ><label for="897204cd-c509-43d6-b1f5-7c0dc0e56a4d" class="sk-toggleable__label sk-toggleable__label-arrow">GridSearchCV</label><div class="sk-toggleable__content"><pre>GridSearchCV(estimator=Pipeline(steps=[(&#x27;preprocessor&#x27;,
                                            ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                                                              SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                                                            strategy=&#x27;constant&#x27;)),
                                                                                             (&#x27;onehot&#x27;,
                                                                                              OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                                                             [&#x27;state&#x27;,
                                                                              &#x27;gender&#x27;]),
                                                                            (&#x27;numerical&#x27;,
                                                                             Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                                                              SimpleImputer()),
                                                                                             (&#x27;scaler&#x27;,
                                                                                              StandardScaler())]),
                                                                             [&#x27;age&#x27;,
                                                                              &#x27;weight&#x27;])])),
                                           (&#x27;classifier&#x27;,
                                            RandomForestClassifier())]),
                 n_jobs=1,
                 param_grid={&#x27;classifier__criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],
                             &#x27;classifier__max_depth&#x27;: [4, 5, 6, 7, 8],
                             &#x27;classifier__max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;, &#x27;log2&#x27;],
                             &#x27;classifier__n_estimators&#x27;: [200, 500]})</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="da06e47d-96fa-4ba4-87d5-29d64d22dcb7" type="checkbox" ><label for="da06e47d-96fa-4ba4-87d5-29d64d22dcb7" class="sk-toggleable__label sk-toggleable__label-arrow">preprocessor: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[(&#x27;categorical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_constant&#x27;,
                                                      SimpleImputer(fill_value=&#x27;missing&#x27;,
                                                                    strategy=&#x27;constant&#x27;)),
                                                     (&#x27;onehot&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),
                                     [&#x27;state&#x27;, &#x27;gender&#x27;]),
                                    (&#x27;numerical&#x27;,
                                     Pipeline(steps=[(&#x27;imputation_mean&#x27;,
                                                      SimpleImputer()),
                                                     (&#x27;scaler&#x27;, StandardScaler())]),
                                     [&#x27;age&#x27;, &#x27;weight&#x27;])])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5ed4149d-8196-440f-8560-92ba6aa0732e" type="checkbox" ><label for="5ed4149d-8196-440f-8560-92ba6aa0732e" class="sk-toggleable__label sk-toggleable__label-arrow">categorical</label><div class="sk-toggleable__content"><pre>[&#x27;state&#x27;, &#x27;gender&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4db1e88b-64b1-45aa-a616-b10f9a8c2d28" type="checkbox" ><label for="4db1e88b-64b1-45aa-a616-b10f9a8c2d28" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer(fill_value=&#x27;missing&#x27;, strategy=&#x27;constant&#x27;)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d81976c1-a66a-4208-9b64-87d48c15a6b8" type="checkbox" ><label for="d81976c1-a66a-4208-9b64-87d48c15a6b8" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ad5696c3-a052-408f-ac41-a7e15c583cb0" type="checkbox" ><label for="ad5696c3-a052-408f-ac41-a7e15c583cb0" class="sk-toggleable__label sk-toggleable__label-arrow">numerical</label><div class="sk-toggleable__content"><pre>[&#x27;age&#x27;, &#x27;weight&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0d206ef1-83f5-470f-92ba-520f4537bdbf" type="checkbox" ><label for="0d206ef1-83f5-470f-92ba-520f4537bdbf" class="sk-toggleable__label sk-toggleable__label-arrow">SimpleImputer</label><div class="sk-toggleable__content"><pre>SimpleImputer()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="385df1c1-8592-4ab4-bf92-4253af598a58" type="checkbox" ><label for="385df1c1-8592-4ab4-bf92-4253af598a58" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="368ef1c0-087f-4e1c-b5c5-a0e5ae49b7c8" type="checkbox" ><label for="368ef1c0-087f-4e1c-b5c5-a0e5ae49b7c8" class="sk-toggleable__label sk-toggleable__label-arrow">RandomForestClassifier</label><div class="sk-toggleable__content"><pre>RandomForestClassifier()</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.079 seconds)


.. _sphx_glr_download_auto_examples_miscellaneous_plot_pipeline_display.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/miscellaneous/plot_pipeline_display.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_pipeline_display.py <plot_pipeline_display.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_pipeline_display.ipynb <plot_pipeline_display.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
