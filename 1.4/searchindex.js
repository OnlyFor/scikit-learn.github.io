Search.setIndex({"docnames": ["about", "authors", "authors_emeritus", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_time_series_lagged_features", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/sg_execution_times", "auto_examples/applications/svm_gui", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/bicluster/sg_execution_times", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/calibration/sg_execution_times", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/classification/sg_execution_times", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/cluster/sg_execution_times", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/compose/sg_execution_times", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/covariance/sg_execution_times", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/cross_decomposition/sg_execution_times", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/datasets/sg_execution_times", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_3d", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/decomposition/sg_execution_times", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sg_execution_times", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/ensemble/sg_execution_times", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_cv_digits", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/exercises/sg_execution_times", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/feature_selection/sg_execution_times", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/gaussian_process/sg_execution_times", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/impute/sg_execution_times", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/inspection/sg_execution_times", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/kernel_approximation/sg_execution_times", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/linear_model/sg_execution_times", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/manifold/sg_execution_times", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/miscellaneous/sg_execution_times", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/mixture/sg_execution_times", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/model_selection/sg_execution_times", "auto_examples/multiclass/index", "auto_examples/multiclass/plot_multiclass_overview", "auto_examples/multiclass/sg_execution_times", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/multioutput/sg_execution_times", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neighbors/sg_execution_times", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/neural_networks/sg_execution_times", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/preprocessing/sg_execution_times", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/plot_release_highlights_1_4_0", "auto_examples/release_highlights/sg_execution_times", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/semi_supervised/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_nonlinear", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/svm/sg_execution_times", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/text/sg_execution_times", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "auto_examples/tree/sg_execution_times", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contents", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "documentation_team", "faq", "getting_started", "glossary", "governance", "inspection", "install", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classes", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.root_mean_squared_error", "modules/generated/sklearn.metrics.root_mean_squared_log_error", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "preface", "presentations", "related_projects", "roadmap", "sg_execution_times", "supervised_learning", "support", "testimonials/testimonials", "tune_toc", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4"], "filenames": ["about.rst", "authors.rst", "authors_emeritus.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_time_series_lagged_features.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/applications/svm_gui.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/bicluster/sg_execution_times.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/classification/sg_execution_times.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/cluster/sg_execution_times.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/compose/sg_execution_times.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/covariance/sg_execution_times.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/cross_decomposition/sg_execution_times.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/datasets/sg_execution_times.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_3d.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/decomposition/sg_execution_times.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sg_execution_times.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/ensemble/sg_execution_times.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_cv_digits.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/exercises/sg_execution_times.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/gaussian_process/sg_execution_times.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/impute/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/inspection/sg_execution_times.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/kernel_approximation/sg_execution_times.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/linear_model/sg_execution_times.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/manifold/sg_execution_times.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/miscellaneous/sg_execution_times.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/mixture/sg_execution_times.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/model_selection/sg_execution_times.rst", "auto_examples/multiclass/index.rst", "auto_examples/multiclass/plot_multiclass_overview.rst", "auto_examples/multiclass/sg_execution_times.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/multioutput/sg_execution_times.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neighbors/sg_execution_times.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/neural_networks/sg_execution_times.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/preprocessing/sg_execution_times.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_4_0.rst", "auto_examples/release_highlights/sg_execution_times.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/semi_supervised/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_nonlinear.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/svm/sg_execution_times.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/text/sg_execution_times.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "auto_examples/tree/sg_execution_times.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contents.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "documentation_team.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "inspection.rst", "install.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classes.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.root_mean_squared_error.rst", "modules/generated/sklearn.metrics.root_mean_squared_log_error.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "preface.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "sg_execution_times.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tune_toc.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst"], "titles": ["About us", "&lt;no title&gt;", "&lt;no title&gt;", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Lagged features for time series forecasting", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Computation times", "Libsvm GUI", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Computation times", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Computation times", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Computation times", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Computation times", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Computation times", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Computation times", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Computation times", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Computation times", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "Principal components analysis (PCA)", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Computation times", "Developing Estimators", "Computation times", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping in Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Computation times", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Cross-validation on Digits Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Computation times", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Computation times", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)", "Ability of Gaussian process regression (GPR) to estimate data noise-level", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Computation times", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Computation times", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Computation times", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Computation times", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Computation times", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Computation times", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Computation times", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Computation times", "Model Selection", "Confusion matrix", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Computation times", "Multiclass methods", "Overview of multiclass training meta-estimators", "Computation times", "Multioutput methods", "Multilabel classification using a classifier chain", "Computation times", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Computation times", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Computation times", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Computation times", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Release Highlights for scikit-learn 1.4", "Computation times", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Computation times", "Computation times", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "Plot classification boundaries with different SVM Kernels", "SVM Margins Example", "Non-linear SVM", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Computation times", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Computation times", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "Computation times", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "Table Of Contents", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "&lt;no title&gt;", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "API Reference", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.fastica", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.oas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BaseEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BiclusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassNamePrefixFeaturesOutMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassifierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.DensityMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.MetaEstimatorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OneToOneFeatureMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OutlierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.RegressorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.TransformerMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.clone", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibratedClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibrationDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.calibration_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AffinityPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AgglomerativeClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.Birch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.BisectingKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.DBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.FeatureAgglomeration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.HDBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.KMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MeanShift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MiniBatchKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.OPTICS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralBiclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralCoclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.affinity_propagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_xi", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.compute_optics_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.estimate_bandwidth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.k_means", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.kmeans_plusplus", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.mean_shift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.spectral_clustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.ward_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.ColumnTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.TransformedTargetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_selector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_transformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.config_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EllipticEnvelope", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.MinCovDet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.empirical_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.graphical_lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf_shrinkage", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.shrunk_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.CCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSCanonical", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.clear_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.dump_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups_vectorized", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_california_housing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_covtype", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_kddcup99", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_pairs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_people", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_olivetti_faces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_openml", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_rcv1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_species_distributions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.get_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_breast_cancer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_diabetes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_digits", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_iris", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_linnerud", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_wine", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_biclusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_blobs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_checkerboard", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_circles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_gaussian_quantiles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_hastie_10_2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_low_rank_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_moons", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_multilabel_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_s_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_coded_signal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_uncorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_swiss_roll", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.DictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FactorAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FastICA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.IncrementalPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.KernelPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.LatentDirichletAllocation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchDictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchNMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchSparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.NMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparseCoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.TruncatedSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning_online", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.non_negative_factorization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.sparse_encode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.LinearDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.QuadraticDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomTreesEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.ConvergenceWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataConversionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataDimensionalityWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.EfficiencyWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.FitFailedWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.InconsistentVersionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.NotFittedError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.UndefinedMetricWarning", "sklearn.experimental.enable_halving_search_cv", "sklearn.experimental.enable_iterative_imputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.DictVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.FeatureHasher", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.PatchExtractor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.extract_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.grid_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.img_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.reconstruct_from_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.CountVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.HashingVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.GenericUnivariateSelect", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFECV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFdr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFpr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFromModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFwe", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectKBest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectPercentile", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SequentialFeatureSelector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.VarianceThreshold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.chi2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.r_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.CompoundKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ConstantKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.DotProduct", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ExpSineSquared", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Exponentiation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Hyperparameter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Matern", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.PairwiseKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Product", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RBF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RationalQuadratic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.WhiteKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.get_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.IterativeImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.KNNImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.MissingIndicator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.SimpleImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.DecisionBoundaryDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.PartialDependenceDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.partial_dependence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.permutation_importance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.IsotonicRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.check_increasing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.isotonic_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.AdditiveChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.Nystroem", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.PolynomialCountSketch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.RBFSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.SkewedChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_ridge</span></code>.KernelRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ARDRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.BayesianRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.GammaRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.HuberRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsIC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LinearRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegressionCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuitCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveClassifier", "sklearn.linear_model.PassiveAggressiveRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Perceptron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PoissonRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.QuantileRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RANSACRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Ridge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDOneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TheilSenRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TweedieRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.enet_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lasso_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ridge_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.Isomap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.LocallyLinearEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.MDS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.SpectralEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.TSNE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.locally_linear_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.smacof", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.spectral_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.trustworthiness", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ConfusionMatrixDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DetCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DistanceMetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PrecisionRecallDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PredictionErrorDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.RocCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.auc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.balanced_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.brier_score_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.calinski_harabasz_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.check_scoring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.class_likelihood_ratios", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.classification_report", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.contingency_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.pair_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.cohen_kappa_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.completeness_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.consensus_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.coverage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_absolute_error_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_pinball_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_tweedie_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.davies_bouldin_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.dcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.det_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.explained_variance_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.f1_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fbeta_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fowlkes_mallows_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer_names", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hamming_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hinge_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_completeness_v_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.jaccard_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.log_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.matthews_corrcoef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.max_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_percentage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_gamma_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_pinball_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_poisson_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_tweedie_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.median_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.multilabel_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ndcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.normalized_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.additive_chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_similarity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.distance_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.haversine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.kernel_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.laplacian_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.linear_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.nan_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.pairwise_kernels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.polynomial_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.rbf_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.sigmoid_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin_min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_chunked", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_fscore_support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.r2_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.recall_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_auc_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.root_mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.root_mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_samples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.top_k_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.v_measure_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.zero_one_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.BayesianGaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.GaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingGridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingRandomSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.KFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LearningCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneGroupOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePGroupsOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterGrid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.PredefinedSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RandomizedSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedStratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedGroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TimeSeriesSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ValidationCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.check_cv", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_validate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.learning_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.permutation_test_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.train_test_split", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.validation_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsOneClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsRestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OutputCodeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.ClassifierChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.RegressorChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.BernoulliNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.CategoricalNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.ComplementNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.GaussianNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.MultinomialNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.BallTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KDTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KernelDensity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.LocalOutlierFactor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestCentroid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestNeighbors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NeighborhoodComponentsAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.kneighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.radius_neighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.sort_graph_by_row_values", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.BernoulliRBM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.FeatureUnion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.Pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_union", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Binarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.FunctionTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KBinsDiscretizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KernelCenterer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MaxAbsScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MinMaxScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MultiLabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Normalizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OneHotEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OrdinalEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PolynomialFeatures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PowerTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.QuantileTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.RobustScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.SplineTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.StandardScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.TargetEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.add_dummy_feature", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.label_binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.maxabs_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.minmax_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.power_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.quantile_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.robust_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.GaussianRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.SparseRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.johnson_lindenstrauss_min_dim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelSpreading", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.SelfTrainingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.set_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.show_versions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.l1_min_c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_graphviz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_text", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.plot_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.Bunch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>._safe_indexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.arrayfuncs</span></code>.min_pos", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.as_float_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.assert_all_finite", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_X_y", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_consistent_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_scalar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_class_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_sample_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.deprecated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_estimators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.check_estimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.parametrize_with_checks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.estimator_html_repr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.fast_logdet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_range_finder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_svd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.safe_sparse_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.weighted_mode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_batches", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_even_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.graph</span></code>.single_source_shortest_path_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.indexable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRequest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRouter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MethodMapping", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.get_routing_for_object", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.process_routing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.available_if", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.is_multilabel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.type_of_target", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.unique_labels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.murmurhash3_32", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.Parallel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.delayed", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.random</span></code>.sample_without_replacement", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.register_parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.resample", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_mask", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_sqr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.shuffle", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.incr_mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_csr_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_row_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_column", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_row", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_is_fitted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_memory", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.column_or_1d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.4. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.3. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "Welcome to scikit-learn", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "Computation times", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Who is using scikit-learn?", "&lt;no title&gt;", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User guide: contents", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Version 0.12.1", "Version 0.13.1", "Version 0.14", "Version 0.15.2", "Version 0.16.1", "Version 0.17.1", "Version 0.18.2", "Version 0.19.2", "Version 0.20.4", "Version 0.21.3", "Version 0.22.2.post1", "Version 0.23.2", "Version 0.24.2", "Version 1.0.2", "Version 1.1.3", "Version 1.2.2", "Version 1.3.2", "Version 1.4.0"], "terms": {"click": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "more": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "detail": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "thi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 364, 368, 369, 370, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 430, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 482, 483, 484, 485, 487, 489, 490, 493, 496, 497, 498, 499, 501, 502, 503, 505, 508, 509, 515, 516, 517, 518, 519, 520, 521, 523, 524, 526, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 577, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 699, 700, 701, 702, 703, 704, 706, 707, 709, 712, 713, 714, 716, 717, 718, 720, 721, 722, 723, 725, 726, 727, 728, 729, 731, 735, 736, 737, 738, 739, 740, 741, 742, 747, 753, 754, 755, 756, 757, 758, 760, 761, 762, 764, 767, 768, 773, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 916, 917, 921, 922, 927, 928, 930, 932, 933, 938, 940, 945, 946, 947, 948, 949, 950, 952, 955, 956, 957, 959, 960, 963, 964, 973, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1013, 1014, 1016, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "wa": [0, 4, 8, 14, 17, 41, 71, 72, 81, 87, 93, 130, 133, 150, 162, 171, 177, 205, 226, 240, 253, 256, 258, 260, 262, 268, 269, 280, 303, 312, 317, 318, 322, 329, 330, 353, 355, 362, 364, 368, 377, 379, 380, 382, 386, 387, 396, 399, 400, 403, 405, 406, 409, 412, 413, 417, 421, 433, 440, 441, 442, 443, 445, 446, 447, 449, 450, 454, 457, 460, 464, 468, 469, 474, 482, 483, 484, 485, 515, 523, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 553, 554, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 664, 676, 677, 685, 686, 688, 689, 692, 713, 728, 729, 782, 783, 786, 796, 797, 798, 801, 802, 812, 824, 826, 838, 845, 848, 850, 853, 857, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 898, 899, 932, 933, 956, 977, 978, 979, 988, 989, 992, 995, 999, 1002, 1005, 1009, 1016, 1024, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "start": [0, 4, 7, 10, 12, 13, 21, 27, 54, 59, 65, 68, 75, 87, 99, 118, 124, 126, 147, 150, 158, 160, 172, 177, 181, 182, 190, 201, 202, 203, 209, 219, 222, 226, 235, 237, 250, 262, 270, 285, 321, 323, 328, 353, 362, 364, 368, 369, 370, 371, 375, 382, 383, 384, 386, 387, 388, 394, 396, 399, 406, 409, 413, 414, 418, 419, 440, 442, 450, 454, 456, 538, 610, 617, 632, 645, 653, 659, 666, 667, 668, 676, 677, 678, 690, 694, 780, 781, 788, 796, 797, 798, 801, 802, 812, 843, 844, 845, 847, 849, 857, 943, 973, 978, 985, 988, 993, 994, 1003, 1010, 1014, 1016, 1024, 1025, 1034, 1036, 1039, 1041, 1043, 1044, 1045, 1046, 1047], "2007": [0, 39, 189, 377, 409, 418, 440, 452, 454, 460, 462, 566, 656, 691, 717, 733, 736, 757, 758, 794, 981, 985, 987, 989], "googl": [0, 18, 394, 409, 442, 1008, 1021, 1031], "summer": [0, 4, 13, 49, 1031], "code": [0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 364, 368, 369, 376, 380, 381, 383, 385, 386, 391, 394, 396, 397, 399, 400, 403, 405, 408, 409, 416, 417, 442, 443, 447, 449, 459, 496, 526, 530, 531, 537, 538, 542, 543, 545, 546, 548, 566, 572, 581, 582, 585, 586, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 665, 682, 683, 685, 686, 829, 830, 831, 868, 875, 957, 986, 990, 999, 1001, 1003, 1004, 1009, 1010, 1011, 1013, 1014, 1017, 1025, 1031, 1033, 1034], "david": [0, 2, 38, 58, 82, 119, 180, 185, 203, 240, 263, 265, 312, 353, 354, 355, 377, 409, 416, 419, 462, 532, 536, 567, 568, 622, 623, 628, 724, 796, 898, 979, 985, 993, 1002, 1014, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "cournapeau": [0, 2, 1031, 1034], "later": [0, 11, 54, 113, 118, 127, 153, 172, 177, 180, 240, 280, 298, 355, 364, 388, 394, 395, 399, 403, 847, 870, 871, 879, 881, 981, 999, 1020, 1025, 1034, 1037, 1039, 1043], "year": [0, 4, 13, 136, 150, 158, 170, 171, 172, 201, 202, 219, 379, 381, 386, 394, 413, 417, 800, 805, 807, 880, 985, 989, 1010, 1014, 1023], "matthieu": [0, 2, 1031, 1035, 1046], "brucher": [0, 2, 1031], "work": [0, 4, 9, 13, 18, 33, 45, 46, 49, 53, 68, 79, 116, 123, 136, 150, 159, 160, 170, 171, 172, 190, 205, 218, 237, 247, 249, 260, 280, 291, 292, 313, 318, 320, 321, 323, 342, 354, 355, 364, 369, 370, 371, 376, 377, 380, 382, 383, 384, 385, 386, 387, 388, 390, 395, 396, 397, 405, 406, 407, 409, 410, 411, 414, 416, 417, 418, 421, 422, 423, 424, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 460, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 504, 508, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 695, 708, 741, 773, 777, 778, 779, 780, 787, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 938, 942, 957, 978, 979, 981, 983, 984, 985, 986, 988, 989, 991, 992, 995, 996, 999, 1002, 1003, 1009, 1010, 1014, 1016, 1017, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "part": [0, 5, 6, 13, 32, 37, 52, 62, 69, 72, 83, 96, 99, 116, 119, 122, 126, 131, 139, 140, 141, 142, 147, 158, 168, 180, 237, 239, 250, 257, 259, 276, 301, 309, 312, 314, 355, 370, 377, 379, 382, 384, 388, 390, 395, 396, 399, 405, 407, 409, 413, 414, 416, 417, 419, 446, 449, 493, 494, 495, 521, 531, 537, 542, 574, 584, 585, 586, 613, 625, 792, 866, 884, 886, 887, 888, 889, 890, 891, 892, 978, 979, 981, 986, 990, 1008, 1009, 1010, 1011, 1012, 1014, 1018, 1025, 1027, 1031, 1039, 1040, 1042, 1044, 1046], "hi": [0, 410, 989, 1025], "thesi": [0, 379, 409, 416], "In": [0, 4, 5, 7, 9, 11, 12, 13, 14, 15, 26, 27, 28, 35, 38, 40, 49, 50, 54, 56, 58, 59, 61, 67, 68, 72, 73, 75, 76, 79, 81, 82, 83, 87, 90, 91, 96, 98, 101, 104, 105, 111, 113, 116, 118, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 133, 136, 146, 147, 149, 150, 153, 157, 158, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 185, 189, 190, 192, 196, 201, 202, 203, 204, 205, 206, 209, 218, 219, 230, 231, 232, 233, 235, 236, 237, 238, 240, 241, 242, 243, 244, 250, 252, 256, 259, 260, 262, 263, 264, 265, 267, 268, 271, 272, 274, 276, 277, 280, 285, 288, 291, 292, 294, 304, 307, 308, 309, 312, 313, 314, 317, 318, 319, 321, 322, 324, 329, 331, 340, 344, 348, 353, 354, 355, 358, 362, 364, 368, 369, 370, 375, 376, 377, 378, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 394, 395, 396, 397, 398, 399, 400, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 426, 437, 440, 441, 442, 443, 444, 447, 448, 449, 452, 462, 463, 464, 469, 472, 475, 493, 496, 503, 508, 509, 511, 523, 534, 536, 538, 540, 541, 542, 544, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 591, 602, 606, 609, 610, 611, 630, 632, 633, 634, 636, 643, 644, 645, 647, 648, 649, 651, 653, 655, 658, 659, 661, 663, 665, 666, 668, 669, 674, 675, 676, 679, 680, 684, 685, 686, 696, 699, 703, 712, 718, 720, 725, 727, 728, 733, 734, 737, 739, 741, 753, 755, 756, 780, 782, 784, 787, 793, 795, 796, 797, 798, 801, 802, 804, 812, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 843, 844, 845, 847, 848, 849, 851, 852, 853, 858, 866, 868, 874, 875, 879, 880, 882, 886, 887, 889, 890, 891, 892, 893, 894, 896, 897, 898, 901, 902, 903, 906, 909, 911, 916, 920, 922, 938, 978, 979, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1010, 1013, 1014, 1016, 1023, 1024, 1025, 1028, 1031, 1032, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "2010": [0, 48, 68, 80, 172, 267, 268, 406, 409, 411, 413, 414, 422, 475, 536, 704, 708, 719, 720, 739, 826, 858, 859, 981, 985, 989, 993, 1003, 1008, 1031], "fabian": [0, 2, 188, 206, 223, 297, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1040], "pedregosa": [0, 2, 188, 206, 223, 297, 1031, 1032, 1033, 1034, 1035, 1037], "gael": [0, 1, 12, 33, 40, 41, 47, 53, 54, 67, 68, 83, 98, 102, 190, 191, 223, 235, 249, 1008, 1010, 1014, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "varoquaux": [0, 1, 12, 32, 33, 40, 41, 46, 47, 52, 53, 54, 67, 68, 74, 83, 90, 91, 98, 102, 103, 184, 190, 191, 198, 199, 223, 225, 233, 235, 249, 309, 344, 345, 397, 1008, 1014, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "alexandr": [0, 1, 2, 25, 26, 31, 43, 48, 55, 68, 96, 98, 104, 186, 188, 189, 190, 192, 194, 195, 230, 233, 268, 275, 297, 397, 1014, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "gramfort": [0, 1, 25, 26, 31, 43, 48, 55, 68, 96, 98, 104, 186, 188, 189, 190, 192, 194, 195, 230, 233, 268, 275, 297, 397, 1014, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "vincent": [0, 2, 48, 68, 156, 160, 1014, 1031, 1033, 1035, 1036, 1038, 1041, 1046, 1047], "michel": [0, 2, 48, 68, 1031, 1033, 1034, 1036, 1038, 1045, 1046], "inria": [0, 5, 9, 31, 38, 53, 55, 58, 76, 83, 119, 159, 180, 185, 186, 188, 192, 194, 195, 206, 223, 224, 230, 233, 240, 263, 265, 268, 275, 297, 312, 348, 353, 354, 355, 658, 1007, 1031], "took": [0, 4, 43, 270], "leadership": 0, "made": [0, 13, 71, 82, 90, 101, 113, 119, 136, 160, 171, 172, 201, 219, 240, 253, 266, 313, 318, 340, 359, 368, 377, 379, 382, 386, 396, 397, 409, 416, 417, 421, 443, 446, 447, 449, 459, 496, 503, 588, 589, 591, 630, 631, 656, 665, 685, 686, 734, 782, 798, 801, 802, 812, 816, 817, 818, 838, 841, 842, 990, 995, 1005, 1009, 1014, 1022, 1024, 1031, 1032, 1033, 1034, 1035, 1038, 1040, 1041, 1044, 1045], "first": [0, 4, 5, 7, 8, 11, 13, 18, 21, 26, 27, 31, 32, 33, 35, 40, 56, 57, 59, 62, 65, 66, 67, 68, 71, 72, 73, 76, 81, 86, 87, 90, 91, 92, 101, 105, 113, 114, 118, 120, 121, 122, 123, 124, 125, 127, 130, 133, 134, 135, 136, 146, 147, 150, 153, 154, 155, 158, 159, 160, 161, 166, 170, 171, 172, 174, 177, 180, 182, 184, 190, 197, 198, 199, 202, 203, 209, 210, 215, 223, 226, 234, 235, 237, 238, 239, 241, 243, 244, 249, 253, 257, 262, 264, 265, 269, 271, 273, 274, 280, 283, 285, 287, 290, 294, 295, 296, 301, 303, 307, 309, 312, 313, 314, 318, 319, 328, 331, 336, 337, 340, 342, 353, 354, 355, 358, 359, 362, 364, 369, 370, 376, 377, 379, 380, 381, 384, 386, 387, 388, 390, 394, 396, 406, 407, 409, 412, 413, 414, 416, 417, 418, 419, 421, 443, 446, 447, 450, 459, 460, 464, 472, 483, 487, 488, 490, 491, 492, 494, 497, 500, 502, 504, 508, 509, 510, 528, 533, 534, 538, 541, 553, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 582, 584, 588, 589, 590, 591, 593, 610, 611, 617, 621, 624, 631, 632, 633, 634, 646, 652, 659, 666, 668, 674, 676, 688, 695, 698, 699, 700, 702, 712, 716, 735, 741, 762, 763, 781, 793, 796, 797, 801, 802, 803, 804, 805, 810, 812, 819, 820, 829, 830, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 846, 849, 850, 851, 852, 853, 854, 855, 858, 859, 860, 861, 866, 874, 878, 879, 880, 882, 883, 890, 891, 903, 906, 909, 910, 911, 912, 914, 916, 921, 922, 923, 940, 942, 956, 960, 963, 975, 978, 979, 983, 984, 985, 986, 988, 989, 990, 991, 992, 996, 999, 1000, 1003, 1004, 1005, 1014, 1016, 1022, 1023, 1024, 1025, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "public": [0, 80, 376, 382, 384, 386, 387, 394, 395, 396, 397, 413, 416, 468, 664, 671, 685, 686, 692, 899, 985, 993, 1031, 1036, 1037, 1042, 1043, 1044, 1047], "releas": [0, 13, 15, 56, 72, 111, 117, 118, 119, 120, 121, 123, 130, 147, 150, 165, 166, 172, 173, 177, 182, 189, 201, 202, 203, 232, 237, 241, 242, 243, 244, 257, 258, 259, 271, 274, 280, 283, 287, 313, 325, 369, 371, 380, 382, 383, 385, 390, 394, 396, 417, 443, 446, 447, 464, 467, 490, 491, 496, 501, 502, 504, 512, 515, 521, 524, 538, 561, 562, 564, 565, 567, 599, 602, 628, 630, 632, 634, 640, 646, 648, 652, 658, 669, 680, 688, 701, 702, 717, 731, 747, 787, 794, 798, 799, 801, 802, 804, 812, 820, 823, 824, 827, 843, 845, 862, 866, 871, 874, 875, 876, 880, 881, 882, 898, 899, 901, 906, 909, 910, 933, 957, 1005, 1007, 1011, 1031, 1032, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "februari": [0, 411, 473, 989, 1032, 1036], "1st": [0, 4, 61, 91, 161, 202, 312, 879, 880], "sinc": [0, 4, 5, 11, 13, 26, 28, 35, 38, 50, 54, 56, 67, 71, 72, 73, 97, 123, 139, 147, 150, 153, 158, 171, 172, 174, 177, 183, 201, 203, 205, 218, 231, 235, 236, 237, 249, 252, 258, 262, 264, 265, 271, 272, 280, 283, 285, 287, 288, 313, 320, 321, 332, 337, 340, 348, 353, 354, 355, 364, 369, 377, 380, 382, 383, 384, 386, 387, 390, 394, 395, 396, 399, 400, 407, 409, 410, 411, 412, 413, 414, 416, 417, 419, 426, 437, 441, 445, 446, 447, 449, 450, 453, 456, 469, 478, 496, 526, 527, 536, 537, 538, 539, 540, 546, 547, 549, 550, 551, 552, 553, 555, 557, 559, 561, 562, 563, 564, 567, 569, 588, 589, 591, 610, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 632, 633, 638, 644, 645, 651, 655, 658, 659, 666, 668, 674, 675, 676, 677, 679, 707, 709, 734, 740, 741, 749, 750, 788, 801, 802, 804, 822, 823, 824, 829, 830, 831, 832, 836, 837, 838, 839, 840, 843, 848, 851, 858, 859, 866, 891, 892, 896, 897, 901, 903, 906, 909, 911, 938, 946, 978, 981, 982, 983, 985, 986, 990, 991, 992, 993, 995, 997, 999, 1003, 1004, 1005, 1014, 1016, 1025, 1031, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "sever": [0, 4, 9, 12, 13, 26, 32, 35, 38, 56, 57, 58, 62, 75, 92, 116, 131, 133, 136, 147, 150, 153, 158, 159, 168, 171, 177, 185, 190, 201, 205, 221, 222, 225, 226, 227, 228, 234, 249, 257, 262, 267, 285, 287, 302, 307, 320, 348, 353, 354, 368, 376, 377, 379, 382, 384, 387, 394, 396, 406, 408, 409, 410, 413, 415, 416, 417, 419, 447, 449, 464, 487, 499, 508, 509, 538, 555, 556, 559, 560, 563, 564, 565, 570, 588, 589, 591, 610, 645, 646, 652, 688, 689, 690, 691, 692, 693, 796, 797, 798, 801, 802, 812, 829, 830, 836, 837, 838, 839, 840, 860, 861, 868, 885, 909, 910, 911, 912, 924, 978, 981, 986, 989, 990, 992, 997, 999, 1003, 1005, 1006, 1008, 1009, 1011, 1013, 1014, 1016, 1023, 1024, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1044, 1047, 1048], "have": [0, 4, 5, 7, 8, 9, 11, 12, 13, 14, 25, 26, 27, 28, 38, 40, 43, 44, 46, 47, 48, 51, 54, 56, 58, 61, 63, 65, 66, 71, 72, 79, 81, 87, 90, 92, 93, 101, 103, 113, 120, 122, 123, 124, 126, 146, 147, 150, 153, 154, 158, 159, 160, 166, 170, 171, 172, 173, 174, 177, 180, 185, 201, 202, 203, 205, 219, 226, 230, 232, 237, 238, 240, 241, 248, 249, 250, 252, 256, 262, 263, 265, 268, 269, 276, 280, 285, 287, 288, 291, 292, 307, 312, 313, 314, 317, 319, 320, 324, 328, 329, 330, 337, 343, 344, 345, 348, 353, 354, 362, 364, 368, 369, 370, 376, 377, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 399, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 492, 494, 495, 496, 508, 509, 514, 523, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 687, 688, 689, 690, 691, 692, 699, 704, 705, 712, 715, 720, 725, 730, 735, 741, 755, 756, 757, 758, 781, 784, 785, 791, 794, 796, 797, 798, 801, 802, 803, 804, 809, 812, 816, 820, 822, 825, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 886, 887, 889, 890, 891, 892, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 921, 923, 925, 927, 938, 964, 978, 979, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1014, 1016, 1017, 1020, 1021, 1023, 1024, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "appear": [0, 8, 47, 49, 116, 171, 174, 257, 259, 260, 291, 292, 301, 303, 308, 328, 344, 353, 354, 355, 377, 380, 382, 387, 396, 411, 414, 488, 489, 555, 567, 568, 579, 610, 627, 628, 630, 697, 700, 702, 712, 716, 718, 781, 788, 799, 816, 836, 837, 838, 839, 840, 903, 906, 940, 985, 991, 995, 1031, 1039, 1043, 1044], "follow": [0, 4, 7, 20, 27, 33, 38, 46, 55, 56, 58, 64, 68, 72, 73, 93, 96, 106, 113, 116, 126, 130, 145, 158, 165, 170, 171, 172, 173, 174, 180, 182, 185, 189, 190, 199, 201, 202, 216, 219, 231, 237, 238, 240, 253, 262, 271, 272, 280, 307, 313, 314, 317, 318, 320, 321, 322, 337, 348, 353, 354, 355, 358, 362, 364, 368, 369, 376, 377, 379, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 399, 400, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 430, 433, 441, 443, 445, 446, 447, 448, 449, 453, 461, 463, 464, 465, 468, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 515, 534, 538, 540, 541, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 570, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 631, 633, 634, 646, 652, 658, 659, 670, 671, 680, 692, 694, 699, 705, 709, 713, 718, 817, 838, 843, 844, 845, 847, 849, 851, 852, 853, 860, 864, 865, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 890, 899, 901, 902, 909, 910, 911, 912, 916, 917, 937, 957, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1016, 1025, 1028, 1031, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "3": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 74, 75, 76, 79, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 139, 145, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 171, 172, 173, 174, 177, 179, 180, 181, 182, 183, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 227, 230, 234, 235, 236, 237, 238, 240, 242, 244, 247, 248, 249, 251, 252, 253, 257, 260, 261, 262, 263, 264, 265, 266, 268, 270, 271, 272, 273, 274, 275, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 324, 325, 327, 328, 330, 331, 332, 336, 337, 339, 340, 343, 344, 345, 346, 347, 348, 349, 353, 354, 355, 356, 359, 360, 362, 364, 369, 370, 376, 377, 379, 380, 382, 383, 384, 387, 388, 394, 395, 396, 399, 401, 402, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 434, 437, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 458, 459, 460, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 493, 494, 496, 497, 502, 504, 505, 506, 507, 510, 512, 515, 516, 517, 518, 519, 521, 525, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 581, 582, 583, 584, 587, 588, 590, 591, 593, 594, 602, 603, 607, 608, 610, 611, 612, 617, 627, 628, 629, 630, 631, 632, 633, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 692, 693, 694, 699, 700, 702, 703, 704, 705, 707, 709, 713, 716, 717, 721, 722, 723, 725, 727, 728, 729, 730, 733, 734, 735, 736, 740, 742, 743, 744, 745, 747, 749, 750, 751, 752, 753, 755, 756, 767, 768, 774, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 889, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 927, 936, 937, 938, 940, 941, 942, 943, 945, 946, 947, 948, 949, 952, 953, 955, 956, 957, 963, 978, 979, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 995, 996, 999, 1000, 1002, 1004, 1005, 1007, 1008, 1009, 1011, 1016, 1017, 1020, 1021, 1023, 1024, 1029, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1041, 1043, 1044, 1046, 1048], "month": [0, 4, 13, 158, 172, 313, 377, 382, 386, 397, 1031], "cycl": [0, 4, 43, 45, 51, 63, 96, 186, 248, 253, 269, 271, 320, 321, 382, 386, 400, 408, 414, 579, 580, 627, 801, 802, 917, 978, 979, 1039, 1040, 1041, 1043, 1044, 1045, 1046], "thrive": [0, 382], "intern": [0, 4, 27, 72, 83, 101, 119, 124, 127, 139, 150, 154, 165, 168, 183, 201, 285, 287, 306, 313, 315, 329, 355, 364, 369, 377, 379, 384, 388, 391, 394, 396, 400, 403, 405, 406, 409, 413, 414, 416, 417, 418, 419, 420, 437, 439, 444, 465, 468, 511, 534, 535, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 593, 594, 610, 611, 638, 640, 643, 646, 652, 668, 672, 676, 678, 696, 708, 730, 733, 757, 758, 782, 827, 841, 842, 857, 858, 859, 861, 862, 866, 880, 882, 896, 897, 899, 901, 902, 903, 906, 909, 910, 911, 912, 957, 985, 986, 987, 989, 992, 995, 999, 1001, 1004, 1005, 1011, 1014, 1031, 1034, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "ha": [0, 4, 5, 8, 11, 12, 13, 17, 26, 31, 35, 38, 45, 51, 56, 57, 58, 61, 75, 81, 82, 87, 96, 111, 118, 122, 124, 126, 130, 135, 149, 153, 158, 159, 160, 166, 171, 172, 173, 174, 177, 194, 198, 201, 202, 203, 207, 218, 219, 222, 230, 234, 236, 237, 240, 241, 244, 247, 248, 250, 252, 253, 257, 260, 261, 262, 265, 266, 268, 273, 274, 283, 288, 291, 292, 293, 295, 303, 307, 308, 310, 312, 317, 318, 319, 320, 321, 323, 327, 330, 340, 344, 345, 347, 353, 362, 364, 368, 369, 370, 376, 377, 379, 380, 381, 382, 383, 384, 386, 387, 390, 391, 394, 395, 396, 397, 399, 400, 403, 406, 407, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 421, 434, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 493, 494, 497, 498, 508, 509, 516, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 619, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 687, 688, 689, 690, 691, 692, 695, 711, 713, 720, 740, 762, 773, 777, 778, 779, 792, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 812, 816, 819, 820, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 861, 864, 865, 866, 867, 868, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 916, 920, 921, 922, 940, 974, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 999, 1001, 1002, 1003, 1004, 1005, 1010, 1014, 1016, 1020, 1023, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "been": [0, 4, 9, 17, 27, 45, 54, 61, 82, 101, 111, 113, 150, 153, 158, 160, 171, 226, 230, 232, 237, 238, 260, 262, 268, 317, 318, 319, 320, 321, 323, 324, 329, 353, 364, 369, 376, 377, 379, 380, 381, 382, 384, 386, 388, 390, 391, 394, 395, 396, 397, 400, 403, 406, 407, 409, 411, 413, 414, 416, 419, 434, 437, 469, 471, 472, 474, 478, 487, 523, 534, 536, 549, 550, 567, 568, 581, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 611, 633, 634, 658, 659, 666, 667, 668, 673, 675, 676, 677, 678, 720, 777, 778, 779, 792, 798, 801, 802, 804, 812, 820, 825, 826, 850, 898, 901, 979, 981, 982, 984, 985, 986, 989, 990, 992, 995, 999, 1001, 1003, 1004, 1010, 1014, 1016, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "lead": [0, 7, 26, 32, 38, 53, 56, 62, 73, 119, 123, 124, 126, 149, 150, 171, 172, 173, 180, 185, 190, 192, 201, 205, 235, 237, 240, 262, 263, 265, 269, 290, 291, 303, 307, 309, 312, 313, 319, 340, 348, 354, 358, 364, 368, 369, 376, 381, 390, 391, 395, 396, 403, 406, 407, 409, 411, 413, 414, 415, 416, 418, 452, 462, 465, 468, 496, 515, 527, 535, 538, 539, 540, 543, 547, 551, 557, 558, 559, 560, 563, 564, 565, 566, 606, 630, 646, 647, 650, 652, 653, 654, 660, 661, 662, 663, 679, 691, 695, 745, 796, 801, 802, 829, 841, 842, 846, 865, 872, 882, 893, 894, 899, 901, 909, 910, 911, 912, 978, 983, 985, 986, 988, 989, 990, 992, 993, 995, 997, 999, 1002, 1003, 1005, 1014, 1016, 1034, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1048], "The": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 27, 31, 32, 33, 35, 38, 40, 41, 45, 46, 47, 48, 49, 51, 52, 53, 54, 56, 58, 59, 61, 62, 63, 64, 66, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 89, 92, 93, 94, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 136, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 172, 173, 174, 177, 180, 182, 183, 184, 185, 186, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 207, 209, 210, 218, 219, 221, 222, 224, 225, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 249, 250, 252, 253, 256, 259, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 283, 285, 287, 289, 290, 291, 292, 293, 294, 295, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 337, 338, 340, 344, 345, 346, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 364, 368, 369, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 431, 432, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 751, 752, 753, 754, 755, 756, 757, 758, 761, 763, 764, 765, 766, 769, 770, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 919, 920, 921, 922, 924, 925, 926, 927, 928, 932, 933, 934, 935, 936, 937, 938, 940, 941, 945, 946, 949, 952, 954, 955, 956, 957, 959, 960, 963, 973, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1013, 1014, 1016, 1017, 1018, 1020, 1021, 1022, 1025, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "decis": [0, 4, 17, 26, 28, 32, 35, 42, 57, 59, 61, 91, 100, 112, 115, 116, 117, 118, 124, 131, 132, 133, 135, 136, 137, 142, 150, 155, 157, 161, 171, 183, 184, 193, 210, 211, 214, 230, 231, 233, 238, 241, 265, 268, 280, 293, 296, 301, 307, 308, 309, 312, 326, 331, 333, 336, 337, 338, 339, 340, 341, 342, 346, 349, 350, 353, 363, 368, 371, 378, 379, 382, 396, 407, 409, 416, 437, 469, 500, 504, 519, 536, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 593, 594, 631, 632, 633, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 698, 700, 702, 703, 707, 720, 725, 726, 734, 738, 739, 741, 755, 781, 787, 788, 793, 798, 801, 802, 812, 827, 829, 830, 832, 843, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 983, 989, 990, 991, 992, 993, 995, 996, 997, 1002, 1003, 1004, 1007, 1009, 1010, 1011, 1012, 1014, 1023, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1044, 1045, 1047, 1048], "make": [0, 4, 7, 8, 11, 13, 15, 18, 21, 22, 26, 27, 28, 40, 41, 44, 45, 57, 62, 63, 68, 74, 101, 113, 119, 123, 126, 131, 147, 150, 153, 158, 161, 170, 171, 172, 173, 180, 185, 187, 190, 193, 194, 195, 197, 201, 202, 203, 205, 207, 219, 223, 232, 234, 236, 237, 238, 240, 247, 249, 252, 253, 257, 262, 264, 265, 271, 272, 273, 283, 294, 303, 307, 308, 313, 321, 323, 340, 350, 353, 354, 355, 364, 368, 369, 370, 371, 376, 377, 380, 381, 383, 384, 385, 387, 388, 390, 394, 396, 399, 403, 406, 407, 409, 410, 411, 413, 414, 416, 417, 418, 421, 440, 441, 442, 443, 445, 447, 449, 451, 452, 453, 458, 459, 460, 462, 488, 503, 514, 515, 522, 523, 527, 532, 534, 541, 551, 552, 555, 556, 561, 562, 583, 584, 607, 608, 631, 649, 655, 656, 671, 691, 695, 729, 736, 741, 767, 768, 780, 796, 797, 798, 800, 803, 809, 813, 814, 815, 817, 818, 823, 824, 831, 832, 835, 868, 877, 880, 881, 885, 889, 891, 892, 893, 894, 907, 915, 921, 922, 932, 938, 944, 950, 975, 978, 979, 981, 983, 985, 986, 988, 989, 990, 991, 992, 994, 995, 996, 997, 999, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1013, 1014, 1016, 1021, 1023, 1025, 1028, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "process": [0, 4, 5, 17, 20, 27, 31, 32, 35, 46, 47, 48, 49, 51, 58, 67, 71, 73, 75, 80, 82, 92, 97, 98, 100, 113, 122, 124, 126, 130, 131, 139, 140, 141, 142, 163, 170, 180, 183, 203, 205, 211, 212, 213, 214, 236, 237, 238, 240, 247, 248, 251, 253, 262, 264, 265, 274, 280, 301, 307, 310, 314, 319, 323, 328, 332, 344, 345, 346, 354, 355, 358, 368, 369, 370, 371, 377, 381, 382, 384, 386, 388, 391, 394, 395, 396, 403, 409, 410, 411, 413, 414, 415, 416, 417, 418, 422, 448, 449, 475, 496, 504, 523, 534, 535, 536, 537, 538, 561, 562, 563, 588, 589, 591, 610, 611, 613, 614, 615, 617, 618, 619, 622, 623, 625, 627, 632, 633, 639, 643, 664, 672, 685, 686, 703, 722, 740, 780, 796, 798, 801, 802, 812, 822, 823, 824, 833, 834, 850, 864, 868, 870, 871, 872, 881, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 955, 957, 978, 981, 985, 989, 992, 999, 1001, 1003, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1024, 1025, 1027, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1048], "structur": [0, 3, 9, 13, 14, 15, 16, 18, 21, 22, 37, 41, 42, 43, 44, 45, 47, 53, 54, 55, 56, 57, 63, 67, 69, 83, 107, 129, 152, 163, 168, 222, 223, 226, 232, 237, 253, 257, 268, 287, 290, 312, 318, 321, 326, 333, 340, 344, 357, 358, 359, 363, 368, 377, 379, 382, 384, 387, 394, 396, 397, 399, 406, 409, 411, 412, 413, 414, 416, 417, 418, 419, 441, 442, 445, 446, 450, 451, 452, 453, 454, 457, 462, 463, 472, 496, 503, 504, 508, 511, 513, 514, 521, 530, 535, 541, 544, 563, 610, 611, 612, 616, 617, 618, 689, 696, 709, 713, 827, 849, 854, 881, 893, 894, 897, 909, 910, 911, 912, 915, 937, 938, 960, 963, 986, 988, 989, 992, 994, 995, 999, 1002, 1005, 1009, 1010, 1011, 1019, 1024, 1025, 1031, 1032, 1034, 1035, 1037, 1041], "i": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 35, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 93, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 149, 150, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 338, 339, 340, 344, 345, 346, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 364, 368, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 395, 396, 397, 398, 399, 400, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 765, 766, 767, 768, 769, 770, 772, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 936, 937, 938, 940, 943, 944, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 959, 960, 961, 963, 964, 970, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "laid": [0, 170, 382], "out": [0, 3, 4, 7, 9, 10, 12, 13, 15, 16, 18, 27, 31, 41, 51, 56, 71, 72, 104, 112, 117, 119, 120, 127, 128, 137, 142, 168, 170, 173, 185, 201, 203, 205, 209, 219, 240, 247, 249, 260, 262, 265, 270, 274, 280, 283, 312, 313, 320, 330, 332, 336, 337, 340, 348, 353, 367, 377, 379, 380, 382, 384, 385, 386, 388, 394, 396, 409, 412, 414, 416, 417, 419, 425, 435, 436, 442, 443, 445, 446, 447, 449, 472, 482, 483, 484, 485, 499, 515, 516, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 588, 589, 591, 604, 607, 608, 634, 639, 640, 641, 642, 651, 655, 666, 668, 673, 675, 676, 688, 689, 692, 701, 726, 740, 741, 798, 800, 801, 802, 803, 805, 806, 807, 808, 812, 827, 836, 837, 838, 839, 840, 845, 850, 853, 857, 858, 859, 867, 871, 878, 890, 893, 894, 916, 951, 953, 979, 983, 984, 988, 989, 990, 992, 997, 999, 1010, 1011, 1012, 1013, 1014, 1020, 1023, 1025, 1027, 1031, 1033, 1035, 1037, 1039, 1040, 1043, 1044, 1047], "peopl": [0, 6, 71, 171, 239, 265, 353, 354, 369, 370, 377, 379, 381, 382, 386, 397, 415, 493, 494, 641, 838, 1009, 1021], "ar": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 33, 35, 38, 40, 41, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 65, 67, 71, 72, 73, 75, 76, 79, 80, 81, 82, 83, 86, 87, 91, 93, 96, 98, 101, 104, 107, 111, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 131, 132, 133, 134, 135, 146, 147, 149, 150, 153, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 189, 190, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 205, 210, 212, 219, 222, 223, 224, 225, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 244, 248, 249, 250, 252, 256, 257, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 280, 283, 285, 287, 290, 291, 295, 298, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 321, 322, 323, 324, 327, 329, 330, 331, 332, 338, 340, 342, 344, 348, 349, 353, 354, 355, 358, 362, 364, 368, 369, 370, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 395, 396, 397, 399, 400, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 430, 433, 434, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 488, 489, 493, 495, 496, 498, 500, 501, 502, 503, 504, 508, 509, 510, 512, 515, 516, 517, 518, 519, 520, 523, 524, 526, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 704, 705, 707, 709, 712, 713, 715, 716, 717, 718, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 733, 734, 735, 736, 737, 739, 740, 741, 742, 744, 745, 747, 749, 750, 752, 753, 755, 756, 760, 761, 762, 764, 766, 767, 768, 772, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 804, 805, 807, 810, 812, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 922, 925, 926, 927, 930, 932, 937, 938, 939, 942, 943, 945, 946, 949, 952, 953, 955, 957, 960, 963, 964, 968, 969, 970, 973, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "current": [0, 8, 47, 113, 158, 171, 219, 307, 317, 369, 370, 377, 380, 382, 383, 384, 387, 391, 394, 396, 397, 405, 406, 408, 409, 413, 416, 417, 418, 419, 440, 446, 450, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 532, 535, 541, 553, 554, 557, 558, 559, 560, 562, 564, 565, 566, 576, 591, 593, 610, 617, 626, 627, 646, 658, 667, 671, 675, 676, 677, 678, 787, 796, 797, 846, 850, 858, 859, 877, 889, 899, 909, 910, 911, 912, 915, 956, 964, 978, 983, 985, 989, 992, 993, 999, 1010, 1023, 1039, 1043, 1045, 1046, 1047], "": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 17, 18, 20, 21, 25, 28, 35, 39, 40, 41, 43, 44, 45, 47, 48, 49, 53, 54, 56, 58, 59, 60, 61, 62, 63, 65, 66, 68, 71, 72, 79, 80, 83, 86, 91, 92, 93, 96, 97, 98, 101, 102, 105, 106, 107, 111, 113, 115, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 134, 142, 145, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 166, 168, 171, 172, 174, 177, 181, 182, 183, 185, 187, 189, 190, 191, 192, 193, 199, 201, 203, 205, 207, 208, 210, 213, 214, 215, 216, 217, 218, 222, 223, 224, 225, 226, 227, 230, 231, 234, 236, 237, 238, 240, 247, 249, 250, 252, 257, 262, 263, 264, 265, 266, 269, 273, 275, 276, 285, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 304, 306, 307, 310, 313, 315, 317, 319, 320, 321, 322, 323, 324, 328, 329, 337, 338, 339, 340, 341, 344, 345, 346, 347, 350, 353, 354, 355, 359, 360, 361, 362, 364, 368, 369, 370, 371, 375, 376, 377, 379, 380, 381, 382, 383, 384, 386, 388, 389, 390, 391, 396, 397, 398, 399, 400, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 417, 419, 421, 423, 430, 434, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 489, 496, 498, 500, 504, 510, 511, 519, 525, 526, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 572, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 687, 688, 689, 690, 691, 692, 693, 700, 701, 702, 708, 711, 716, 720, 734, 740, 757, 758, 778, 779, 796, 797, 798, 800, 801, 802, 807, 812, 816, 817, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 916, 919, 921, 922, 925, 938, 940, 946, 947, 949, 973, 977, 978, 980, 981, 983, 985, 986, 987, 990, 991, 992, 993, 994, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1009, 1010, 1011, 1014, 1016, 1020, 1021, 1023, 1024, 1025, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "mainten": [0, 382, 390, 394, 399, 402, 985, 1010, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "j\u00e9r\u00e9mie": [0, 1, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "du": [0, 1, 2, 1031, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "boisberrang": [0, 1, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "jori": [0, 1, 1038, 1039, 1040, 1043, 1044], "van": [0, 1, 376, 411, 469, 474, 534, 627, 692, 696, 979, 986, 989, 995, 1014, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1047], "den": [0, 1, 1032, 1033, 1038, 1039, 1040, 1043, 1044], "bossch": [0, 1, 1038, 1039, 1040, 1044], "lo\u00efc": [0, 1, 1039, 1042, 1044, 1045, 1046, 1047], "est\u00e8v": [0, 1, 1039, 1042, 1044, 1045, 1046, 1047], "thoma": [0, 1, 104, 230, 307, 369, 372, 397, 897, 985, 999, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "j": [0, 1, 11, 18, 38, 39, 41, 44, 62, 71, 80, 81, 82, 113, 116, 117, 128, 154, 166, 172, 213, 225, 239, 247, 261, 262, 267, 273, 289, 295, 298, 311, 322, 362, 369, 376, 377, 379, 386, 388, 394, 406, 407, 409, 411, 413, 414, 416, 417, 419, 420, 437, 440, 444, 446, 453, 454, 469, 474, 498, 513, 516, 517, 518, 520, 528, 531, 534, 536, 537, 538, 540, 541, 547, 553, 559, 560, 593, 594, 632, 633, 637, 644, 645, 648, 649, 666, 667, 669, 680, 688, 689, 690, 692, 693, 694, 696, 705, 708, 710, 714, 716, 718, 721, 722, 723, 725, 754, 755, 757, 758, 773, 777, 787, 788, 791, 792, 830, 831, 838, 843, 844, 845, 847, 849, 850, 851, 852, 853, 854, 855, 872, 881, 882, 909, 910, 978, 979, 983, 985, 986, 987, 989, 990, 991, 992, 993, 995, 996, 997, 999, 1001, 1003, 1004, 1005, 1007, 1025, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "fan": [0, 1, 369, 397, 1004, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "olivi": [0, 1, 15, 18, 38, 49, 62, 190, 201, 219, 223, 263, 265, 353, 354, 355, 397, 897, 1002, 1008, 1010, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "grisel": [0, 1, 15, 18, 38, 49, 62, 190, 201, 219, 223, 263, 265, 353, 354, 355, 397, 1008, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "yaroslav": [0, 1, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1047, 1048], "halchenko": [0, 1, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1047], "tim": [0, 1, 118, 132, 1031, 1036, 1037, 1040, 1041, 1042, 1044, 1046, 1047, 1048], "head": [0, 1, 13, 27, 72, 118, 132, 158, 171, 189, 190, 219, 244, 252, 313, 317, 322, 382, 390, 414, 1014, 1036, 1037, 1046, 1047, 1048], "nicola": [0, 1, 150, 311, 658, 985, 1002, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "hug": [0, 1, 150, 311, 1007, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "adrin": [0, 1, 66, 349, 397, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "jalali": [0, 1, 66, 349, 397, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "julien": [0, 1, 658, 985, 1014, 1031, 1034, 1038, 1039, 1043, 1044, 1045, 1046, 1047, 1048], "jerphanion": [0, 1, 1043, 1044, 1045, 1046, 1047, 1048], "guillaum": [0, 1, 5, 7, 73, 76, 101, 133, 153, 158, 159, 160, 162, 189, 190, 203, 223, 307, 1014, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "lemaitr": [0, 1, 5, 7, 73, 76, 101, 133, 153, 158, 159, 160, 162, 189, 190, 203, 223, 307, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "christian": [0, 1, 20, 201, 202, 203, 219, 353, 354, 377, 1014, 1025, 1031, 1032, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "lorentzen": [0, 1, 201, 202, 203, 219, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "jan": [0, 1, 25, 26, 27, 28, 153, 154, 156, 157, 158, 159, 160, 162, 202, 236, 280, 880, 1031, 1034, 1035, 1036, 1037, 1039, 1040, 1043, 1047], "hendrik": [0, 1, 25, 26, 27, 28, 153, 154, 156, 157, 158, 159, 160, 162, 236, 1031, 1034, 1035, 1036, 1037], "metzen": [0, 1, 25, 26, 27, 28, 153, 154, 156, 157, 158, 159, 160, 162, 236, 1031, 1034, 1035, 1036, 1037], "andrea": [0, 1, 32, 75, 101, 117, 192, 235, 308, 309, 329, 348, 349, 397, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "mueller": [0, 1, 75, 101, 117, 192, 235, 329, 348, 349, 1014, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "vlad": [0, 1, 96, 238, 304, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040], "nicula": [0, 1, 96, 238, 304, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040], "joel": [0, 1, 73, 397, 417, 535, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "nothman": [0, 1, 73, 397, 417, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "hanmin": [0, 1, 308, 1038, 1039, 1040, 1041, 1042], "qin": [0, 1, 308, 379, 417, 1038, 1039, 1040, 1041, 1042], "omar": [0, 1, 1041, 1046, 1047, 1048], "salman": [0, 1, 1046, 1047, 1048], "bertrand": [0, 1, 1031, 1037, 1038, 1043, 1044], "thirion": [0, 1, 1031, 1037, 1038, 1044], "tom": [0, 1, 193, 209, 285, 287, 309, 310, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "dupr\u00e9": [0, 1, 309, 310, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "la": [0, 1, 193, 209, 285, 287, 309, 310, 313, 379, 1014, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "tour": [0, 1, 193, 209, 285, 287, 309, 310, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "nell": [0, 1, 40, 225, 233, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1043], "roman": [0, 1, 201, 219, 627, 915, 1033, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "yurchak": [0, 1, 201, 219, 417, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "meekail": [0, 1, 1045, 1046, 1047, 1048], "zain": [0, 1, 1045, 1046, 1047, 1048], "pleas": [0, 12, 18, 27, 72, 73, 118, 120, 121, 127, 129, 130, 133, 136, 147, 158, 171, 172, 173, 182, 205, 231, 232, 233, 235, 237, 240, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 285, 295, 304, 313, 317, 318, 319, 320, 321, 322, 323, 324, 329, 344, 362, 369, 376, 377, 380, 382, 383, 384, 386, 390, 394, 395, 396, 399, 400, 403, 405, 408, 409, 416, 417, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 496, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 603, 610, 611, 628, 629, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 824, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 890, 893, 894, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 978, 989, 993, 999, 1003, 1004, 1009, 1010, 1013, 1016, 1023, 1025, 1031, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "do": [0, 4, 10, 13, 26, 43, 56, 62, 68, 75, 91, 100, 102, 103, 106, 117, 120, 122, 126, 127, 133, 140, 147, 158, 165, 171, 172, 173, 198, 201, 205, 219, 222, 224, 237, 238, 240, 253, 257, 260, 263, 265, 283, 285, 287, 291, 320, 324, 332, 337, 340, 344, 345, 348, 353, 354, 355, 362, 364, 368, 369, 370, 377, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 396, 397, 407, 408, 409, 410, 411, 412, 413, 416, 417, 418, 450, 461, 503, 536, 538, 542, 544, 552, 555, 581, 582, 588, 589, 591, 632, 633, 645, 646, 652, 655, 656, 659, 666, 668, 676, 736, 762, 777, 781, 815, 818, 833, 834, 838, 865, 866, 868, 875, 879, 881, 886, 887, 889, 890, 891, 892, 909, 910, 911, 912, 920, 963, 978, 981, 983, 985, 986, 989, 990, 992, 993, 997, 999, 1004, 1005, 1009, 1010, 1014, 1016, 1023, 1024, 1025, 1031, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "email": [0, 353, 382, 394, 417, 836, 991, 1014], "directli": [0, 6, 20, 28, 46, 47, 57, 72, 118, 123, 150, 161, 185, 189, 201, 207, 219, 231, 267, 304, 307, 321, 324, 355, 364, 368, 380, 382, 383, 384, 386, 388, 395, 396, 397, 405, 406, 407, 409, 410, 411, 412, 413, 417, 419, 442, 452, 462, 464, 469, 474, 527, 567, 568, 569, 570, 597, 611, 620, 632, 643, 646, 647, 652, 653, 660, 661, 662, 663, 664, 677, 681, 684, 690, 773, 777, 780, 791, 792, 798, 801, 802, 812, 844, 846, 860, 861, 862, 868, 878, 880, 883, 890, 957, 978, 985, 987, 992, 994, 996, 999, 1004, 1005, 1010, 1017, 1020, 1021, 1031, 1039, 1040, 1042, 1043, 1044, 1047, 1048], "ask": [0, 165, 166, 262, 371, 381, 382, 386, 387, 390, 396, 397, 418, 843, 844, 845, 847, 849, 851, 852, 853, 1007, 1013, 1047], "assist": [0, 382, 394, 999, 1014], "report": [0, 4, 8, 13, 33, 71, 76, 147, 161, 189, 260, 270, 280, 317, 327, 364, 377, 381, 383, 384, 385, 388, 390, 394, 396, 399, 403, 409, 413, 611, 649, 658, 664, 685, 686, 700, 713, 728, 729, 737, 782, 783, 786, 830, 839, 858, 859, 896, 914, 932, 985, 992, 1009, 1010, 1013, 1032, 1035, 1038, 1039, 1041, 1042, 1044, 1046, 1047], "issu": [0, 4, 26, 80, 87, 201, 219, 267, 314, 369, 371, 376, 385, 386, 387, 390, 391, 394, 396, 397, 398, 399, 400, 403, 405, 409, 411, 412, 417, 449, 452, 462, 473, 482, 483, 484, 534, 539, 543, 573, 585, 586, 588, 589, 591, 611, 627, 691, 695, 768, 872, 877, 889, 928, 978, 979, 986, 992, 997, 999, 1004, 1009, 1010, 1013, 1024, 1025, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046], "instead": [0, 4, 5, 6, 13, 21, 49, 54, 56, 57, 58, 72, 101, 116, 121, 130, 147, 150, 153, 201, 203, 216, 219, 226, 240, 253, 258, 259, 263, 264, 283, 290, 307, 317, 318, 319, 320, 321, 340, 342, 344, 353, 355, 362, 364, 368, 369, 376, 377, 380, 381, 382, 383, 384, 386, 387, 390, 391, 394, 395, 396, 403, 405, 409, 410, 412, 413, 414, 415, 416, 417, 418, 420, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 456, 459, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 509, 510, 533, 534, 535, 537, 538, 539, 540, 541, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 594, 607, 608, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 630, 632, 635, 638, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 690, 694, 707, 741, 745, 749, 750, 773, 777, 778, 779, 782, 796, 797, 798, 799, 800, 802, 804, 805, 807, 810, 812, 816, 817, 818, 822, 823, 824, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 846, 848, 851, 852, 858, 859, 861, 862, 863, 864, 866, 867, 868, 873, 874, 879, 880, 881, 891, 892, 895, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 914, 915, 927, 933, 938, 946, 957, 964, 978, 979, 981, 985, 986, 988, 989, 990, 993, 994, 999, 1003, 1004, 1005, 1009, 1013, 1021, 1023, 1025, 1028, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "see": [0, 4, 5, 7, 13, 21, 25, 26, 28, 38, 45, 50, 51, 54, 56, 58, 59, 63, 65, 66, 68, 70, 81, 87, 90, 91, 96, 101, 103, 107, 113, 114, 115, 116, 119, 120, 121, 122, 123, 125, 127, 130, 133, 139, 146, 147, 148, 150, 153, 158, 159, 160, 165, 168, 171, 172, 174, 177, 180, 181, 182, 185, 192, 202, 203, 204, 205, 207, 218, 219, 222, 224, 232, 234, 237, 240, 241, 242, 244, 248, 249, 250, 256, 257, 259, 261, 262, 263, 264, 265, 269, 271, 272, 273, 276, 277, 280, 285, 291, 292, 294, 298, 307, 313, 314, 317, 318, 319, 320, 321, 322, 323, 329, 340, 344, 348, 353, 354, 355, 358, 359, 360, 361, 364, 368, 369, 370, 374, 375, 376, 377, 379, 380, 381, 382, 384, 386, 388, 389, 390, 394, 395, 396, 399, 405, 407, 408, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 433, 437, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 491, 492, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 609, 610, 611, 614, 619, 622, 623, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 699, 701, 706, 708, 711, 713, 742, 762, 773, 777, 778, 779, 780, 787, 791, 792, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 937, 938, 960, 963, 973, 978, 979, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1014, 1016, 1018, 1023, 1024, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "what": [0, 4, 9, 12, 13, 41, 46, 53, 54, 87, 97, 101, 122, 170, 171, 190, 207, 209, 217, 232, 237, 244, 303, 353, 355, 358, 364, 369, 377, 382, 383, 384, 386, 388, 390, 395, 396, 397, 398, 400, 409, 415, 416, 417, 503, 536, 588, 589, 591, 646, 652, 696, 886, 887, 889, 890, 891, 892, 909, 910, 911, 912, 988, 989, 990, 992, 1005, 1010, 1013, 1016, 1031, 1038], "best": [0, 4, 6, 8, 12, 13, 14, 20, 25, 27, 41, 47, 55, 56, 62, 71, 72, 73, 74, 79, 86, 96, 100, 104, 105, 106, 116, 119, 123, 125, 126, 127, 133, 136, 150, 153, 154, 159, 165, 171, 180, 185, 189, 190, 197, 215, 216, 217, 222, 225, 230, 235, 236, 240, 249, 253, 256, 260, 261, 262, 263, 266, 269, 270, 273, 274, 276, 283, 289, 294, 308, 313, 319, 320, 340, 343, 344, 353, 354, 355, 361, 368, 369, 371, 376, 379, 381, 382, 385, 388, 395, 396, 399, 400, 406, 407, 409, 413, 414, 416, 417, 418, 419, 432, 443, 446, 447, 449, 451, 452, 453, 459, 462, 465, 472, 482, 483, 484, 538, 545, 546, 552, 554, 556, 557, 558, 559, 560, 562, 564, 565, 566, 568, 570, 593, 594, 597, 602, 610, 611, 635, 637, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 667, 669, 670, 671, 672, 673, 675, 676, 678, 679, 680, 688, 689, 690, 693, 694, 703, 708, 719, 720, 721, 722, 723, 727, 728, 738, 739, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 755, 782, 783, 784, 786, 789, 790, 791, 792, 793, 795, 796, 797, 798, 801, 802, 812, 824, 826, 829, 834, 835, 844, 852, 858, 859, 902, 904, 907, 909, 910, 911, 912, 978, 983, 984, 985, 986, 989, 992, 993, 995, 1003, 1005, 1009, 1010, 1014, 1016, 1021, 1025, 1031, 1034, 1037, 1039, 1040, 1041, 1044, 1045, 1046, 1047], "wai": [0, 4, 18, 28, 51, 61, 72, 75, 118, 125, 129, 131, 150, 160, 171, 173, 174, 202, 205, 206, 216, 219, 232, 233, 236, 237, 240, 241, 257, 262, 269, 271, 307, 308, 320, 322, 323, 364, 368, 369, 370, 376, 378, 380, 381, 384, 385, 390, 391, 396, 397, 399, 400, 403, 406, 407, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 420, 424, 443, 444, 451, 452, 453, 459, 460, 462, 463, 469, 496, 555, 556, 563, 572, 589, 599, 600, 611, 632, 666, 667, 676, 677, 678, 699, 704, 706, 717, 735, 736, 753, 754, 756, 762, 773, 777, 787, 794, 822, 830, 847, 868, 874, 879, 885, 911, 912, 960, 963, 978, 979, 983, 984, 985, 986, 987, 988, 989, 990, 992, 994, 995, 996, 997, 999, 1001, 1003, 1004, 1005, 1009, 1010, 1013, 1014, 1016, 1024, 1025, 1031, 1033, 1039, 1044, 1045], "question": [0, 139, 170, 262, 348, 371, 381, 382, 387, 390, 413, 416, 830, 903, 906, 985, 988, 989, 995, 1007, 1014], "faq": [0, 390, 413, 692, 986, 999], "how": [0, 4, 5, 7, 8, 9, 10, 13, 21, 22, 26, 27, 33, 34, 38, 51, 52, 53, 54, 58, 61, 70, 71, 72, 75, 79, 81, 87, 102, 106, 113, 114, 117, 121, 122, 123, 124, 126, 127, 131, 133, 147, 158, 160, 168, 171, 172, 173, 174, 177, 182, 190, 191, 197, 202, 203, 204, 205, 208, 209, 215, 219, 226, 227, 232, 235, 237, 239, 240, 241, 243, 253, 257, 258, 260, 262, 263, 264, 269, 271, 272, 274, 275, 276, 283, 285, 287, 288, 289, 291, 292, 303, 312, 314, 318, 319, 320, 323, 324, 337, 338, 340, 343, 344, 348, 353, 354, 358, 362, 368, 369, 370, 371, 377, 380, 381, 383, 384, 385, 387, 390, 395, 396, 397, 400, 403, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 423, 433, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 504, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 622, 623, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 704, 720, 756, 791, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 824, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 973, 978, 979, 983, 984, 985, 986, 988, 989, 995, 996, 997, 999, 1001, 1002, 1004, 1005, 1008, 1010, 1013, 1014, 1016, 1018, 1020, 1025, 1027, 1031, 1033, 1036, 1042, 1045, 1046, 1047], "you": [0, 15, 17, 21, 25, 72, 91, 121, 122, 125, 127, 147, 150, 166, 172, 189, 202, 203, 205, 232, 237, 244, 250, 257, 262, 263, 269, 277, 291, 317, 318, 321, 323, 324, 328, 331, 353, 364, 368, 369, 370, 376, 377, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 395, 396, 399, 400, 403, 405, 407, 408, 409, 410, 411, 413, 416, 417, 418, 420, 421, 426, 437, 443, 444, 446, 447, 449, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 500, 503, 504, 509, 510, 532, 533, 534, 536, 538, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 579, 580, 581, 582, 588, 589, 590, 591, 594, 607, 608, 610, 611, 627, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 690, 699, 700, 784, 797, 799, 800, 801, 802, 803, 805, 807, 813, 814, 815, 816, 817, 818, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 851, 852, 858, 859, 860, 861, 864, 865, 866, 867, 868, 873, 874, 875, 880, 881, 886, 887, 889, 890, 891, 892, 894, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 938, 955, 957, 978, 979, 984, 985, 989, 990, 993, 995, 996, 999, 1000, 1003, 1004, 1005, 1008, 1009, 1013, 1014, 1016, 1017, 1020, 1023, 1025, 1031, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "can": [0, 4, 5, 7, 8, 9, 10, 12, 13, 15, 17, 20, 21, 25, 26, 27, 28, 32, 33, 34, 38, 41, 43, 44, 47, 49, 50, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 71, 72, 73, 74, 79, 80, 81, 82, 83, 87, 91, 97, 99, 100, 101, 102, 104, 106, 107, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 145, 146, 147, 149, 150, 153, 158, 159, 160, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 185, 186, 189, 190, 192, 194, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 209, 217, 218, 219, 222, 223, 224, 230, 231, 232, 233, 234, 236, 237, 240, 241, 244, 247, 248, 249, 250, 252, 253, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 269, 271, 273, 274, 276, 277, 280, 283, 285, 287, 289, 290, 291, 292, 294, 302, 303, 304, 307, 308, 309, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 328, 329, 331, 332, 337, 338, 340, 343, 344, 348, 353, 354, 355, 360, 361, 362, 364, 368, 369, 370, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 395, 396, 397, 398, 399, 400, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 432, 434, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 456, 457, 458, 459, 461, 462, 464, 465, 466, 467, 468, 472, 482, 483, 484, 487, 496, 499, 503, 508, 509, 512, 521, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 579, 580, 581, 582, 583, 584, 588, 589, 591, 592, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 630, 632, 634, 635, 638, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 687, 689, 691, 692, 693, 694, 695, 698, 699, 700, 701, 702, 704, 707, 709, 711, 712, 718, 720, 721, 722, 723, 725, 726, 728, 729, 731, 732, 736, 737, 738, 739, 741, 742, 745, 751, 754, 755, 756, 757, 758, 762, 778, 779, 781, 782, 783, 784, 786, 787, 788, 793, 794, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 858, 859, 860, 861, 864, 865, 866, 868, 869, 870, 874, 875, 876, 879, 880, 881, 886, 893, 894, 899, 901, 902, 903, 904, 906, 907, 909, 910, 911, 912, 913, 914, 917, 919, 921, 925, 927, 932, 937, 938, 944, 946, 947, 949, 952, 955, 957, 959, 960, 963, 970, 973, 974, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1013, 1014, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "contribut": [0, 14, 21, 127, 158, 185, 205, 271, 312, 371, 379, 380, 384, 385, 386, 390, 396, 397, 399, 414, 415, 416, 447, 449, 553, 554, 559, 560, 725, 728, 755, 983, 989, 992, 997, 1004, 1007, 1009, 1010, 1014, 1023, 1031, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "help": [0, 4, 9, 11, 17, 56, 71, 75, 101, 107, 172, 185, 219, 222, 263, 265, 280, 304, 337, 340, 354, 355, 364, 368, 369, 380, 383, 384, 385, 386, 387, 388, 390, 391, 396, 397, 398, 403, 409, 410, 413, 417, 419, 433, 536, 577, 627, 650, 654, 665, 685, 686, 692, 714, 837, 909, 910, 911, 912, 979, 983, 984, 986, 988, 989, 991, 993, 999, 1000, 1005, 1008, 1009, 1010, 1013, 1014, 1025, 1037, 1038, 1039, 1042, 1045], "arturo": [0, 38, 58, 119, 180, 185, 240, 263, 265, 312, 353, 354, 355, 393, 1045, 1046, 1047], "amor": [0, 38, 58, 119, 180, 185, 240, 263, 265, 312, 353, 354, 355, 393, 1045, 1046, 1047], "luci": [0, 268, 372, 393, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "liu": [0, 268, 372, 393, 563, 725, 755, 989, 995, 1034, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "activ": [0, 33, 168, 209, 239, 247, 253, 263, 326, 327, 329, 333, 355, 376, 377, 380, 382, 383, 388, 390, 394, 396, 397, 399, 410, 496, 502, 526, 632, 635, 637, 650, 651, 653, 654, 655, 663, 664, 665, 682, 683, 684, 685, 686, 713, 718, 796, 857, 858, 859, 897, 955, 985, 986, 987, 988, 992, 993, 994, 1002, 1011, 1042], "who": [0, 71, 369, 371, 377, 382, 389, 397, 399, 843, 844, 845, 847, 849, 851, 852, 853, 1007, 1009, 1033, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "also": [0, 4, 7, 11, 13, 18, 20, 21, 25, 26, 27, 28, 33, 47, 49, 54, 58, 59, 61, 65, 71, 72, 79, 81, 86, 87, 96, 104, 106, 113, 116, 119, 121, 123, 124, 125, 126, 127, 131, 133, 146, 147, 148, 150, 153, 155, 158, 166, 171, 172, 173, 174, 177, 181, 182, 184, 190, 193, 194, 197, 201, 202, 203, 205, 206, 210, 218, 219, 222, 233, 235, 237, 240, 241, 253, 260, 262, 263, 264, 265, 268, 269, 271, 272, 273, 280, 283, 285, 293, 296, 298, 301, 307, 308, 309, 311, 312, 317, 318, 319, 320, 324, 332, 336, 337, 338, 340, 342, 344, 353, 354, 355, 358, 359, 362, 364, 368, 369, 370, 375, 376, 377, 379, 380, 381, 382, 384, 385, 388, 390, 391, 394, 395, 396, 397, 399, 403, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 437, 438, 439, 441, 442, 445, 446, 447, 448, 450, 452, 462, 463, 465, 467, 482, 484, 492, 496, 498, 503, 508, 532, 533, 535, 536, 541, 546, 549, 551, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 607, 608, 609, 610, 611, 622, 632, 633, 635, 643, 644, 645, 646, 647, 650, 652, 653, 654, 656, 658, 659, 660, 661, 662, 663, 672, 676, 678, 681, 684, 687, 691, 694, 695, 699, 710, 713, 722, 728, 729, 737, 742, 762, 778, 779, 782, 783, 786, 796, 797, 798, 801, 802, 812, 815, 818, 823, 824, 825, 826, 827, 828, 830, 840, 843, 844, 845, 847, 848, 849, 851, 852, 853, 857, 858, 859, 861, 863, 864, 869, 870, 874, 878, 881, 886, 890, 903, 906, 909, 910, 911, 912, 921, 940, 946, 953, 957, 978, 979, 981, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 999, 1000, 1002, 1003, 1004, 1005, 1009, 1010, 1013, 1014, 1016, 1021, 1023, 1024, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "triag": [0, 371, 382, 385, 397], "pr": [0, 135, 369, 382, 385, 390, 417, 740, 989, 1041, 1043], "gener": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 26, 27, 28, 30, 31, 32, 33, 34, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 66, 71, 72, 73, 74, 75, 76, 80, 82, 86, 87, 89, 90, 91, 94, 96, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 147, 148, 150, 154, 155, 156, 157, 158, 161, 165, 166, 170, 171, 172, 173, 174, 177, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 253, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 298, 301, 302, 303, 307, 308, 309, 310, 311, 312, 313, 314, 317, 319, 320, 321, 322, 323, 324, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 368, 369, 371, 374, 375, 377, 379, 383, 384, 385, 386, 387, 388, 390, 391, 394, 395, 403, 406, 407, 409, 413, 415, 417, 418, 419, 421, 425, 430, 432, 437, 440, 443, 446, 447, 449, 452, 454, 458, 459, 460, 462, 464, 465, 467, 469, 472, 474, 482, 483, 484, 488, 491, 492, 495, 496, 497, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 536, 538, 540, 541, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 582, 583, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 610, 611, 614, 615, 618, 619, 620, 622, 623, 627, 628, 629, 630, 632, 633, 634, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 669, 670, 671, 672, 673, 675, 677, 678, 679, 680, 685, 686, 689, 690, 691, 692, 693, 694, 695, 701, 704, 706, 717, 721, 722, 723, 736, 742, 756, 777, 780, 784, 792, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 831, 832, 833, 834, 835, 841, 842, 844, 846, 847, 849, 850, 851, 852, 853, 857, 858, 859, 861, 864, 865, 866, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 886, 887, 889, 890, 891, 892, 893, 894, 901, 902, 903, 904, 906, 907, 910, 912, 913, 914, 915, 932, 933, 937, 938, 941, 942, 954, 960, 963, 978, 979, 981, 983, 984, 986, 988, 989, 990, 992, 994, 995, 996, 997, 1001, 1002, 1004, 1005, 1007, 1009, 1011, 1012, 1013, 1014, 1016, 1019, 1023, 1024, 1027, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047], "juan": [0, 372, 1031, 1042, 1043, 1044, 1045, 1046], "carlo": [0, 235, 372, 416, 419, 611, 641, 642, 981, 994, 1031, 1042, 1043, 1044, 1045, 1046, 1047], "alfaro": [0, 372, 1042, 1043, 1044, 1045, 1046], "jim\u00e9nez": [0, 372, 1039, 1042, 1043, 1044, 1045, 1046], "maxwel": [0, 372, 1041, 1044, 1045, 1046, 1047], "martin": [0, 372, 721, 722, 723, 985, 989, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048], "loyola": [0, 372, 1044, 1045], "sylvain": [0, 372, 1035, 1040, 1041, 1042, 1043, 1044, 1045], "mari\u00e9": [0, 372, 1040, 1041, 1042, 1043, 1044, 1045], "norbert": [0, 372, 1033, 1043, 1044, 1045], "prein": [0, 372, 1043, 1044, 1045], "reshama": [0, 366, 372, 1039, 1040, 1042, 1043, 1044, 1045, 1046], "shaikh": [0, 366, 372, 1039, 1040, 1042, 1043, 1044, 1045, 1046], "albert": [0, 230, 372, 1038, 1039, 1040, 1043, 1044], "maren": [0, 372, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "westermann": [0, 372, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "around": [0, 4, 27, 38, 53, 86, 113, 116, 126, 159, 172, 177, 237, 240, 265, 304, 327, 329, 330, 340, 343, 344, 353, 354, 355, 364, 377, 379, 382, 388, 394, 400, 409, 413, 414, 417, 471, 472, 515, 544, 620, 640, 649, 668, 704, 741, 796, 804, 820, 847, 849, 851, 852, 853, 881, 985, 986, 988, 989, 995, 999, 1003, 1009, 1010, 1014, 1023, 1025, 1035, 1036], "lauren": [0, 365, 692, 696, 986, 1043, 1046], "burk": [0, 365, 1046], "francoisgoupil": [0, 365, 1045], "longer": [0, 4, 35, 54, 116, 172, 186, 303, 320, 382, 384, 409, 413, 416, 417, 449, 536, 563, 984, 988, 989, 991, 994, 1004, 1014, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "mathieu": [0, 2, 25, 49, 101, 192, 202, 223, 238, 263, 353, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1044], "blondel": [0, 2, 25, 49, 101, 192, 202, 223, 238, 263, 353, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1044], "lar": [0, 2, 15, 99, 150, 168, 171, 179, 186, 187, 190, 194, 195, 206, 220, 275, 353, 354, 355, 379, 471, 472, 478, 501, 531, 537, 539, 542, 543, 545, 546, 548, 651, 652, 653, 654, 655, 656, 663, 664, 665, 678, 682, 683, 684, 685, 686, 1011, 1012, 1023, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1044], "buitinck": [0, 2, 15, 353, 354, 355, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "noel": [0, 2, 113, 114, 115, 1031, 1032, 1033, 1034, 1035, 1043], "daw": [0, 2, 113, 114, 115, 1031, 1032, 1033, 1034, 1035], "dubourg": [0, 2, 156, 160, 1014, 1031, 1035], "edouard": [0, 2, 1031], "duchesnai": [0, 2, 1031], "alexand": [0, 2, 409, 414, 535, 867, 1033, 1034, 1035, 1037, 1038, 1039, 1043, 1044, 1045, 1048], "fabisch": [0, 2, 1033, 1034, 1035, 1037], "virgil": [0, 2, 9, 1031, 1032, 1034], "fritsch": [0, 2, 9, 1031, 1032, 1034], "satrajit": [0, 2, 1031, 1032], "ghosh": [0, 2, 409, 1031, 1032], "angel": [0, 2], "soler": [0, 2], "gollonet": [0, 2], "chri": [0, 2, 1031, 1034, 1039, 1040, 1041, 1042, 1045], "gorgolewski": [0, 2, 1031, 1034], "jaqu": [0, 2, 32, 46, 52, 54, 74, 90, 91, 102, 184, 197, 198, 199, 224, 345, 348, 1031, 1032, 1033, 1034], "grobler": [0, 2, 32, 46, 52, 54, 74, 90, 91, 102, 184, 197, 198, 199, 224, 345, 348, 1031, 1032, 1033, 1034], "brian": [0, 2, 47, 708, 989, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1044, 1045], "holt": [0, 2, 1031], "arnaud": [0, 2, 1032, 1033, 1034, 1035, 1036, 1037], "joli": [0, 2, 1032, 1033, 1034, 1035, 1036, 1037], "thoui": [0, 2, 1031], "rai": [0, 2, 957, 989, 1031, 1041, 1043, 1044], "jone": [0, 2, 377, 1031], "kyle": [0, 2, 100, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1042, 1043], "kastner": [0, 2, 100, 1033, 1034, 1035, 1042, 1043], "manoj": [0, 2, 43, 150, 183, 1034, 1035, 1036, 1037, 1038], "kumar": [0, 2, 43, 150, 183, 377, 409, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "robert": [0, 2, 49, 73, 150, 189, 280, 379, 414, 528, 535, 628, 656, 721, 722, 723, 734, 867, 979, 985, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1046], "layton": [0, 2, 49, 1031, 1032, 1033, 1034, 1036], "wei": [0, 2, 1003, 1031, 1032, 1035, 1036, 1037, 1038, 1040, 1044, 1047], "li": [0, 2, 330, 377, 639, 642, 696, 725, 755, 894, 978, 981, 989, 992, 999, 1001, 1004, 1031, 1032, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "paolo": [0, 2, 1031, 1035, 1041], "losi": [0, 2, 1031], "gill": [0, 2, 116, 117, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "loupp": [0, 2, 116, 117, 416, 555, 556, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "jarrod": [0, 2, 1040, 1047], "millman": [0, 2, 1040, 1047], "passo": [0, 2, 1031, 1032], "peter": [0, 2, 11, 17, 64, 125, 127, 128, 263, 353, 354, 409, 448, 450, 457, 649, 791, 792, 985, 989, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1046, 1047], "prettenhof": [0, 2, 11, 17, 125, 127, 128, 263, 353, 354, 1031, 1032, 1033, 1034, 1035, 1036], "venkat": [0, 2], "raghav": [0, 2, 266, 307, 1035, 1036, 1037, 1038, 1039, 1043], "rajagopalan": [0, 2, 1039, 1043], "jacob": [0, 2, 1036, 1037, 1038], "schreiber": [0, 2, 1036, 1037, 1038], "\u675c\u4e16\u6a4b": [0, 2], "shiqiao": [0, 2, 1031, 1032], "jake": [0, 2, 11, 160, 202, 222, 250, 290, 298, 1008, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1043, 1045], "vanderpla": [0, 2, 11, 160, 202, 222, 250, 290, 298, 1008, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "ward": [0, 2, 14, 22, 37, 40, 41, 42, 43, 45, 47, 53, 54, 55, 57, 63, 69, 168, 174, 226, 417, 441, 445, 463, 530, 854, 1011, 1031, 1034, 1036], "farlei": [0, 2, 1031], "ron": [0, 2, 249, 1031], "weiss": [0, 2, 249, 409, 691, 1031], "respons": [0, 150, 172, 197, 201, 204, 237, 272, 353, 379, 388, 396, 408, 409, 410, 416, 446, 464, 482, 483, 484, 631, 632, 633, 674, 675, 698, 700, 702, 741, 796, 797, 990, 996, 1007, 1016, 1048], "chiara": [0, 373, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "marmo": [0, 373, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "If": [0, 4, 11, 13, 17, 28, 33, 43, 50, 56, 72, 83, 99, 111, 121, 126, 133, 162, 166, 171, 182, 201, 216, 218, 219, 237, 240, 262, 269, 277, 290, 298, 307, 312, 313, 340, 344, 348, 349, 353, 354, 355, 362, 364, 368, 369, 376, 377, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 396, 397, 399, 400, 403, 406, 407, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 430, 433, 434, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 512, 514, 515, 519, 522, 523, 524, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 707, 711, 712, 713, 714, 716, 717, 718, 725, 726, 727, 728, 729, 730, 731, 735, 737, 740, 741, 744, 745, 747, 749, 750, 752, 753, 754, 755, 756, 757, 758, 760, 762, 763, 765, 766, 767, 768, 770, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 804, 810, 812, 815, 818, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 924, 925, 926, 927, 930, 936, 938, 940, 942, 946, 948, 952, 955, 957, 960, 963, 964, 970, 973, 974, 975, 976, 978, 979, 981, 983, 984, 985, 986, 987, 989, 992, 993, 995, 996, 999, 1001, 1003, 1004, 1005, 1006, 1009, 1010, 1013, 1016, 1017, 1023, 1024, 1025, 1031, 1034, 1035, 1036, 1037, 1040, 1041, 1043, 1044, 1045, 1047], "us": [0, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 20, 21, 22, 25, 26, 27, 28, 31, 33, 35, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 87, 91, 92, 93, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 139, 140, 141, 142, 146, 147, 149, 152, 153, 154, 159, 160, 161, 162, 163, 165, 166, 168, 170, 171, 172, 173, 174, 177, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 202, 203, 205, 206, 207, 209, 210, 213, 216, 218, 219, 220, 222, 223, 224, 225, 227, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 278, 280, 282, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 302, 303, 304, 306, 307, 309, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 327, 328, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 351, 352, 355, 356, 358, 360, 361, 367, 368, 369, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 389, 391, 395, 396, 397, 398, 399, 400, 403, 405, 406, 407, 409, 410, 411, 412, 415, 419, 420, 421, 422, 425, 427, 428, 430, 431, 439, 456, 457, 459, 461, 463, 471, 478, 480, 481, 485, 493, 503, 508, 509, 516, 531, 545, 546, 547, 548, 555, 572, 574, 575, 577, 578, 583, 585, 586, 592, 595, 596, 598, 601, 603, 609, 616, 620, 621, 624, 629, 636, 638, 642, 650, 651, 654, 660, 661, 663, 667, 675, 683, 685, 686, 687, 694, 695, 696, 699, 711, 714, 715, 716, 721, 722, 723, 725, 727, 729, 735, 738, 742, 750, 755, 757, 758, 762, 763, 765, 766, 767, 768, 770, 773, 774, 775, 776, 779, 780, 782, 790, 793, 805, 806, 807, 808, 809, 810, 811, 821, 833, 835, 837, 841, 842, 851, 852, 853, 855, 863, 864, 867, 869, 872, 883, 884, 886, 888, 889, 891, 892, 893, 896, 900, 902, 911, 912, 913, 914, 917, 920, 921, 922, 927, 928, 937, 938, 945, 952, 956, 957, 960, 961, 965, 966, 967, 971, 972, 978, 979, 981, 982, 984, 987, 988, 990, 991, 992, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1019, 1020, 1021, 1022, 1024, 1026, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "scientif": [0, 33, 139, 140, 141, 142, 235, 371, 376, 380, 394, 399, 409, 452, 462, 501, 1014, 1017], "we": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 25, 26, 27, 28, 31, 33, 35, 38, 41, 42, 43, 45, 48, 50, 51, 54, 56, 57, 58, 59, 63, 65, 66, 67, 71, 72, 73, 74, 76, 79, 81, 82, 83, 87, 90, 91, 93, 96, 97, 98, 99, 101, 104, 105, 107, 113, 114, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 129, 130, 131, 133, 135, 136, 139, 145, 146, 147, 149, 150, 153, 155, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 184, 185, 187, 189, 190, 192, 194, 196, 198, 201, 202, 203, 204, 205, 207, 209, 210, 213, 214, 215, 216, 217, 219, 222, 223, 226, 227, 230, 231, 233, 234, 235, 237, 238, 240, 241, 243, 244, 247, 248, 249, 250, 252, 253, 257, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 271, 272, 273, 274, 276, 280, 283, 285, 287, 288, 290, 293, 294, 295, 296, 298, 301, 302, 303, 304, 307, 308, 309, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 332, 336, 337, 338, 340, 341, 342, 343, 344, 345, 348, 350, 353, 354, 355, 358, 359, 360, 361, 362, 364, 368, 369, 370, 376, 377, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 394, 395, 396, 397, 400, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 450, 469, 470, 471, 472, 473, 474, 475, 476, 501, 523, 531, 532, 534, 537, 549, 561, 562, 563, 569, 570, 582, 583, 589, 611, 617, 627, 632, 633, 638, 640, 651, 655, 658, 659, 666, 668, 673, 674, 675, 676, 677, 692, 711, 718, 720, 725, 745, 755, 763, 780, 804, 820, 822, 843, 844, 845, 847, 849, 850, 851, 852, 853, 864, 873, 874, 875, 881, 886, 887, 889, 890, 891, 892, 894, 897, 901, 905, 953, 955, 978, 979, 981, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1014, 1016, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047], "would": [0, 4, 6, 9, 13, 27, 33, 46, 54, 56, 59, 71, 79, 81, 82, 87, 93, 101, 102, 113, 126, 150, 153, 158, 159, 171, 172, 173, 174, 177, 185, 191, 201, 202, 203, 216, 219, 230, 237, 240, 249, 258, 262, 263, 268, 270, 272, 280, 285, 291, 303, 307, 308, 312, 313, 320, 323, 330, 340, 344, 348, 349, 353, 355, 362, 364, 368, 377, 378, 382, 383, 384, 388, 390, 391, 394, 395, 396, 397, 400, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 432, 446, 465, 468, 482, 483, 484, 489, 527, 532, 534, 536, 541, 544, 552, 554, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 568, 570, 583, 584, 587, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 678, 679, 700, 702, 708, 712, 713, 720, 755, 781, 784, 788, 798, 800, 812, 826, 834, 835, 844, 852, 859, 886, 887, 889, 890, 891, 892, 893, 894, 899, 901, 902, 904, 907, 909, 910, 911, 912, 946, 949, 978, 979, 982, 985, 986, 987, 989, 990, 991, 992, 993, 994, 995, 999, 1004, 1009, 1010, 1014, 1016, 1021, 1023, 1025, 1028, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "appreci": [0, 382], "citat": [0, 376, 379, 394], "paper": [0, 150, 177, 262, 379, 388, 394, 409, 411, 442, 449, 478, 504, 534, 541, 563, 641, 658, 666, 667, 671, 676, 679, 692, 787, 838, 847, 850, 893, 894, 985, 989, 992, 995, 1004, 1025, 1031, 1038, 1039], "machin": [0, 4, 6, 8, 9, 13, 28, 64, 74, 86, 119, 146, 147, 150, 153, 158, 169, 173, 175, 191, 196, 213, 216, 243, 262, 265, 268, 280, 300, 305, 307, 312, 314, 319, 322, 336, 341, 344, 348, 353, 355, 368, 369, 371, 375, 376, 377, 379, 380, 382, 385, 388, 389, 394, 395, 396, 398, 403, 407, 409, 413, 414, 416, 417, 419, 437, 439, 448, 471, 472, 478, 502, 504, 510, 516, 517, 518, 530, 532, 534, 541, 544, 555, 556, 557, 558, 559, 560, 564, 565, 566, 593, 594, 610, 611, 614, 619, 622, 634, 638, 639, 641, 643, 644, 645, 650, 651, 654, 655, 656, 657, 658, 659, 676, 682, 683, 692, 708, 713, 724, 734, 740, 742, 784, 787, 796, 826, 827, 841, 842, 847, 850, 857, 858, 859, 861, 879, 881, 887, 901, 902, 903, 904, 906, 907, 911, 912, 957, 978, 979, 981, 982, 985, 986, 987, 989, 990, 992, 995, 996, 997, 999, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1019, 1021, 1025, 1026, 1027, 1028, 1031, 1033, 1043, 1044, 1045, 1046], "python": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 368, 370, 376, 380, 382, 383, 384, 385, 386, 387, 390, 391, 394, 396, 399, 410, 417, 496, 508, 509, 581, 699, 809, 875, 957, 989, 999, 1004, 1005, 1007, 1010, 1013, 1014, 1016, 1017, 1019, 1025, 1027, 1031, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046], "et": [0, 11, 79, 80, 113, 128, 189, 298, 379, 406, 409, 411, 414, 416, 417, 418, 451, 498, 519, 520, 528, 535, 541, 544, 563, 682, 683, 719, 720, 836, 838, 858, 859, 894, 937, 938, 985, 986, 989, 995, 999, 1001, 1004, 1005, 1039, 1047], "al": [0, 11, 79, 80, 113, 128, 189, 298, 379, 406, 409, 411, 414, 416, 417, 418, 451, 498, 519, 520, 528, 535, 541, 544, 563, 682, 683, 719, 720, 836, 838, 858, 859, 894, 937, 938, 985, 986, 989, 995, 999, 1001, 1004, 1005, 1039, 1044, 1047], "jmlr": [0, 409, 666, 667, 676, 704, 985, 1004], "12": [0, 4, 6, 13, 20, 21, 23, 35, 41, 43, 44, 54, 56, 57, 58, 74, 75, 86, 108, 122, 123, 124, 127, 150, 156, 157, 158, 166, 171, 172, 174, 181, 185, 187, 201, 209, 219, 222, 225, 226, 230, 231, 233, 241, 244, 249, 250, 261, 262, 264, 265, 268, 274, 288, 311, 312, 313, 322, 348, 355, 379, 380, 387, 395, 397, 399, 401, 402, 409, 413, 417, 443, 447, 449, 482, 483, 484, 485, 532, 534, 541, 570, 664, 669, 671, 685, 686, 689, 692, 693, 729, 796, 797, 799, 816, 819, 832, 853, 869, 978, 979, 981, 985, 987, 990, 999, 1003, 1004, 1007, 1011, 1016, 1021, 1029, 1032, 1034, 1038, 1039, 1041, 1042, 1047, 1048], "pp": [0, 64, 150, 261, 379, 409, 411, 417, 420, 421, 444, 448, 452, 462, 511, 533, 534, 541, 590, 635, 643, 664, 685, 686, 720, 725, 729, 739, 755, 768, 782, 836, 838, 840, 857, 877, 889, 982, 989, 991, 992, 1002], "2825": 0, "2830": 0, "2011": [0, 48, 172, 223, 388, 414, 417, 535, 538, 540, 541, 547, 590, 627, 638, 658, 729, 979, 993, 1003, 1008, 1031], "bibtex": 0, "entri": [0, 17, 72, 76, 133, 166, 171, 172, 258, 317, 354, 364, 386, 388, 390, 395, 396, 406, 407, 409, 414, 416, 419, 463, 472, 531, 532, 537, 545, 546, 561, 562, 588, 591, 594, 611, 620, 632, 638, 640, 647, 651, 653, 655, 656, 659, 661, 663, 664, 665, 673, 675, 682, 683, 685, 686, 699, 704, 707, 709, 712, 715, 716, 718, 725, 728, 729, 730, 733, 734, 737, 742, 755, 757, 758, 782, 784, 787, 788, 791, 792, 811, 825, 841, 842, 849, 850, 851, 852, 853, 872, 878, 890, 975, 978, 979, 985, 989, 992, 999, 1004, 1010, 1016, 1038, 1041, 1042, 1044, 1048], "articl": [0, 18, 71, 353, 377, 381, 382, 390, 413, 422, 475, 705, 985, 989, 1025, 1044], "titl": [0, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 21, 22, 25, 26, 27, 28, 31, 33, 38, 39, 40, 42, 45, 46, 47, 49, 50, 52, 53, 55, 56, 57, 58, 59, 60, 62, 63, 64, 79, 80, 82, 83, 86, 87, 91, 92, 96, 97, 98, 99, 100, 104, 105, 106, 114, 115, 116, 119, 121, 122, 123, 126, 127, 129, 132, 135, 136, 142, 145, 146, 148, 149, 150, 153, 154, 155, 157, 158, 159, 160, 161, 171, 180, 181, 183, 185, 186, 188, 189, 190, 193, 194, 200, 201, 203, 205, 206, 207, 209, 210, 215, 218, 219, 222, 223, 224, 230, 234, 235, 236, 238, 239, 240, 247, 248, 249, 250, 251, 252, 253, 256, 257, 261, 262, 263, 265, 266, 267, 271, 272, 276, 287, 288, 291, 292, 293, 294, 296, 297, 298, 307, 311, 312, 313, 314, 329, 332, 336, 337, 338, 339, 340, 343, 344, 349, 350, 353, 359, 360, 361, 381, 382, 386, 390, 410, 989, 1013, 1021], "p": [0, 11, 14, 25, 27, 28, 42, 62, 81, 82, 86, 93, 104, 125, 146, 150, 156, 177, 213, 218, 219, 222, 224, 234, 250, 262, 268, 269, 298, 376, 377, 379, 380, 387, 390, 406, 407, 409, 411, 412, 414, 416, 418, 419, 420, 422, 442, 444, 446, 447, 450, 457, 469, 471, 474, 475, 478, 498, 528, 534, 538, 540, 541, 547, 549, 550, 551, 553, 555, 556, 557, 558, 559, 561, 564, 565, 566, 590, 592, 593, 594, 595, 596, 598, 599, 600, 604, 605, 606, 607, 608, 609, 615, 616, 627, 640, 643, 688, 690, 692, 694, 699, 705, 715, 723, 740, 751, 785, 787, 800, 806, 807, 808, 811, 826, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 857, 861, 862, 877, 889, 895, 911, 912, 913, 982, 983, 985, 986, 987, 989, 991, 992, 993, 994, 995, 996, 999, 1003, 1004, 1007, 1020, 1023, 1031, 1032, 1034, 1037, 1039, 1046, 1047], "ython": 0, "f": [0, 4, 5, 7, 11, 12, 13, 15, 17, 18, 21, 27, 31, 33, 38, 44, 48, 49, 50, 53, 54, 56, 59, 65, 68, 72, 76, 87, 99, 113, 116, 119, 120, 121, 123, 124, 126, 133, 134, 141, 144, 146, 149, 150, 151, 153, 159, 160, 162, 168, 170, 171, 172, 173, 174, 177, 185, 187, 190, 201, 202, 203, 205, 211, 215, 219, 223, 234, 236, 237, 240, 244, 252, 260, 262, 263, 264, 265, 268, 269, 271, 272, 274, 285, 288, 301, 302, 303, 309, 312, 313, 317, 319, 321, 323, 324, 327, 328, 339, 344, 348, 353, 354, 355, 364, 377, 382, 383, 384, 386, 388, 394, 407, 410, 414, 416, 417, 418, 419, 487, 508, 509, 531, 532, 537, 538, 566, 581, 582, 583, 592, 595, 596, 598, 599, 600, 604, 605, 606, 607, 608, 609, 617, 627, 632, 635, 658, 713, 722, 725, 728, 729, 755, 782, 783, 786, 787, 799, 800, 803, 805, 806, 807, 808, 811, 813, 814, 815, 816, 817, 818, 819, 825, 858, 859, 863, 872, 875, 876, 880, 881, 882, 916, 921, 922, 981, 984, 993, 996, 997, 999, 1003, 1011, 1033, 1039, 1040, 1041, 1043, 1045], "g": [0, 4, 7, 8, 10, 12, 17, 25, 26, 27, 28, 33, 54, 56, 66, 71, 74, 83, 87, 104, 113, 116, 117, 125, 126, 133, 140, 153, 154, 155, 156, 158, 160, 161, 162, 166, 170, 183, 186, 201, 202, 203, 205, 219, 223, 227, 236, 237, 247, 262, 266, 267, 273, 283, 291, 307, 312, 330, 347, 348, 355, 364, 368, 369, 374, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 394, 396, 400, 403, 405, 407, 408, 409, 411, 413, 414, 416, 417, 418, 419, 421, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 503, 528, 531, 533, 534, 537, 538, 541, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 593, 594, 597, 604, 610, 611, 617, 622, 623, 630, 633, 634, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 686, 690, 692, 697, 720, 727, 737, 739, 762, 784, 799, 800, 801, 802, 804, 805, 807, 816, 820, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 848, 850, 851, 852, 853, 857, 858, 859, 861, 864, 866, 867, 868, 871, 873, 874, 877, 879, 880, 881, 882, 884, 886, 887, 888, 889, 890, 891, 892, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 937, 938, 949, 957, 978, 979, 983, 985, 986, 987, 989, 990, 991, 992, 993, 994, 995, 996, 999, 1003, 1004, 1005, 1010, 1013, 1014, 1025, 1031, 1035, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "A": [0, 14, 17, 18, 19, 20, 23, 26, 28, 32, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 54, 55, 57, 58, 60, 61, 62, 63, 65, 68, 69, 76, 79, 82, 87, 93, 97, 98, 99, 104, 114, 115, 120, 121, 123, 132, 136, 139, 140, 141, 142, 147, 148, 149, 153, 156, 158, 160, 161, 162, 168, 171, 172, 185, 189, 202, 205, 211, 215, 216, 219, 223, 237, 240, 250, 262, 263, 265, 269, 276, 280, 301, 307, 309, 312, 317, 319, 322, 328, 329, 330, 332, 334, 340, 345, 353, 354, 355, 360, 362, 364, 368, 370, 371, 376, 377, 379, 380, 382, 384, 385, 387, 390, 394, 395, 396, 397, 398, 400, 404, 406, 407, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 458, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 490, 491, 492, 494, 497, 500, 501, 502, 503, 504, 508, 510, 511, 512, 513, 514, 520, 522, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 607, 608, 610, 611, 617, 620, 627, 628, 629, 630, 632, 633, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 704, 705, 710, 711, 712, 716, 717, 719, 721, 722, 723, 724, 725, 730, 735, 736, 739, 741, 742, 743, 746, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 763, 765, 766, 773, 774, 775, 776, 777, 780, 787, 789, 790, 792, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 886, 887, 889, 890, 891, 892, 893, 894, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 936, 937, 938, 945, 946, 947, 948, 949, 974, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 999, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1016, 1017, 1023, 1024, 1025, 1027, 1031, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "v": [0, 4, 9, 13, 14, 17, 18, 20, 28, 31, 34, 35, 37, 38, 39, 40, 41, 42, 45, 48, 50, 56, 57, 59, 69, 71, 76, 78, 81, 83, 84, 85, 86, 88, 96, 98, 99, 102, 104, 117, 119, 120, 121, 126, 127, 128, 139, 146, 153, 168, 169, 174, 175, 179, 181, 190, 199, 200, 201, 202, 204, 205, 206, 207, 210, 216, 220, 226, 234, 248, 249, 252, 253, 255, 258, 277, 278, 280, 296, 314, 317, 337, 349, 354, 364, 369, 374, 379, 380, 382, 388, 390, 396, 405, 406, 407, 408, 411, 412, 414, 417, 432, 441, 445, 452, 462, 463, 464, 465, 470, 473, 474, 475, 476, 477, 482, 483, 484, 496, 512, 524, 530, 531, 537, 541, 545, 546, 550, 552, 554, 556, 558, 560, 562, 564, 565, 568, 570, 581, 589, 593, 594, 600, 606, 611, 630, 631, 634, 635, 639, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 676, 678, 679, 688, 695, 699, 701, 704, 717, 735, 736, 738, 753, 754, 756, 787, 794, 798, 803, 810, 812, 823, 827, 829, 830, 831, 834, 835, 836, 844, 852, 854, 857, 859, 861, 862, 865, 868, 874, 875, 876, 881, 882, 885, 895, 901, 902, 903, 904, 906, 907, 910, 912, 916, 983, 984, 985, 986, 989, 990, 991, 994, 997, 1003, 1004, 1006, 1011, 1027, 1031, 1034, 1035, 1036, 1039, 1041, 1042, 1045, 1046], "b": [0, 8, 10, 25, 27, 60, 66, 81, 102, 104, 115, 116, 122, 126, 127, 136, 139, 140, 154, 155, 156, 161, 166, 183, 185, 186, 201, 202, 207, 219, 238, 240, 261, 265, 267, 272, 276, 283, 320, 330, 364, 377, 379, 382, 386, 387, 388, 406, 407, 409, 412, 413, 414, 417, 437, 482, 500, 541, 566, 588, 589, 590, 591, 607, 608, 610, 611, 628, 646, 647, 648, 649, 658, 669, 672, 674, 676, 680, 687, 688, 705, 719, 729, 730, 791, 792, 809, 810, 848, 874, 875, 876, 877, 880, 881, 889, 916, 938, 939, 952, 979, 981, 985, 986, 987, 989, 992, 994, 999, 1003, 1004, 1020, 1031, 1039, 1042, 1044, 1045, 1046], "o": [0, 18, 20, 28, 31, 39, 50, 56, 61, 62, 64, 65, 83, 86, 92, 98, 130, 150, 161, 189, 194, 199, 201, 216, 236, 247, 262, 264, 271, 307, 308, 312, 318, 321, 324, 331, 344, 358, 368, 377, 379, 382, 399, 409, 411, 414, 416, 420, 422, 444, 447, 448, 450, 473, 475, 534, 604, 627, 666, 667, 692, 829, 857, 872, 913, 957, 981, 983, 985, 986, 989, 990, 992, 993, 1003, 1004, 1005, 1031, 1034, 1037, 1039, 1040, 1043, 1044, 1046, 1047, 1048], "m": [0, 4, 8, 11, 20, 27, 28, 45, 59, 60, 64, 65, 66, 81, 82, 96, 113, 136, 158, 183, 201, 219, 262, 266, 298, 331, 336, 347, 353, 368, 369, 376, 377, 379, 380, 386, 388, 396, 399, 406, 407, 409, 411, 414, 416, 418, 420, 444, 445, 446, 450, 457, 473, 474, 500, 513, 528, 532, 534, 536, 541, 639, 645, 649, 664, 671, 685, 686, 689, 693, 708, 716, 725, 740, 755, 757, 758, 796, 797, 847, 872, 938, 968, 969, 979, 981, 983, 985, 986, 987, 989, 990, 991, 992, 993, 997, 999, 1003, 1005, 1014, 1039, 1040, 1041, 1042, 1045, 1046, 1047], "r": [0, 8, 10, 11, 12, 14, 17, 25, 26, 27, 28, 40, 44, 66, 76, 79, 80, 81, 82, 87, 96, 104, 107, 113, 116, 117, 122, 126, 127, 128, 136, 146, 154, 155, 156, 160, 161, 162, 165, 166, 171, 183, 185, 186, 190, 201, 208, 211, 219, 227, 233, 236, 247, 250, 253, 261, 262, 265, 267, 268, 269, 272, 275, 277, 283, 287, 288, 292, 296, 298, 313, 321, 342, 344, 355, 364, 377, 379, 383, 386, 394, 396, 406, 407, 409, 411, 412, 413, 414, 416, 417, 426, 432, 437, 446, 451, 453, 465, 469, 474, 478, 482, 483, 484, 498, 504, 513, 520, 534, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 588, 589, 590, 591, 606, 609, 610, 611, 627, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 685, 686, 692, 696, 716, 721, 722, 723, 727, 729, 780, 784, 787, 798, 812, 815, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 851, 852, 858, 859, 872, 877, 889, 896, 897, 901, 902, 903, 904, 906, 907, 909, 910, 911, 912, 914, 955, 979, 981, 983, 985, 986, 989, 990, 991, 992, 993, 996, 997, 999, 1003, 1004, 1005, 1009, 1025, 1031, 1035, 1038, 1041, 1042, 1043, 1044, 1046, 1048], "d": [0, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 20, 32, 33, 38, 39, 43, 49, 50, 51, 61, 62, 64, 71, 72, 83, 90, 93, 96, 99, 104, 106, 153, 161, 201, 209, 217, 219, 227, 231, 233, 234, 235, 236, 250, 261, 262, 270, 283, 291, 292, 298, 303, 327, 328, 331, 340, 344, 345, 355, 376, 377, 379, 384, 388, 394, 407, 409, 411, 412, 414, 416, 417, 419, 420, 444, 446, 447, 452, 460, 463, 488, 493, 503, 526, 534, 536, 557, 558, 565, 566, 581, 582, 590, 614, 615, 619, 622, 623, 644, 645, 648, 669, 670, 671, 680, 688, 689, 692, 693, 697, 699, 705, 708, 721, 722, 723, 725, 755, 763, 767, 777, 780, 787, 810, 836, 838, 840, 841, 842, 857, 868, 872, 874, 875, 877, 889, 894, 911, 912, 916, 981, 983, 985, 986, 987, 988, 989, 991, 997, 999, 1001, 1004, 1005, 1013, 1021, 1022, 1023, 1034, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047], "perrot": [0, 1031], "e": [0, 4, 8, 10, 11, 13, 17, 26, 27, 33, 35, 54, 56, 58, 62, 71, 79, 81, 82, 83, 86, 87, 91, 99, 101, 102, 113, 116, 123, 125, 126, 129, 139, 146, 149, 150, 161, 170, 171, 172, 177, 181, 185, 190, 191, 201, 202, 203, 205, 219, 222, 223, 236, 237, 258, 262, 263, 265, 267, 268, 276, 277, 280, 283, 291, 298, 309, 312, 317, 319, 348, 355, 360, 361, 362, 364, 368, 369, 370, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 394, 395, 396, 399, 400, 403, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 437, 439, 441, 443, 444, 445, 447, 449, 450, 454, 463, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 496, 498, 500, 501, 502, 503, 524, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 581, 582, 588, 589, 590, 591, 593, 594, 597, 603, 604, 606, 607, 608, 609, 610, 611, 617, 622, 623, 630, 633, 634, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 687, 688, 690, 692, 694, 697, 699, 701, 704, 705, 708, 709, 727, 728, 729, 730, 737, 740, 741, 754, 762, 766, 784, 787, 796, 797, 798, 799, 800, 801, 802, 804, 805, 807, 811, 812, 816, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 857, 858, 859, 861, 864, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 884, 886, 887, 888, 889, 890, 891, 892, 896, 897, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 916, 932, 937, 938, 940, 943, 944, 946, 949, 957, 964, 975, 978, 979, 981, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 999, 1000, 1003, 1004, 1005, 1010, 1013, 1014, 1023, 1024, 1025, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "journal": [0, 82, 172, 262, 268, 280, 376, 377, 379, 407, 409, 411, 416, 452, 462, 473, 534, 541, 627, 635, 645, 689, 692, 693, 705, 715, 730, 733, 734, 757, 758, 785, 826, 831, 877, 889, 978, 979, 983, 985, 986, 987, 990, 996, 1001, 1003, 1004], "research": [0, 150, 170, 262, 268, 280, 377, 379, 394, 409, 501, 513, 635, 645, 692, 734, 826, 831, 978, 986, 990, 992, 1004, 1009, 1010, 1014], "volum": [0, 67, 80, 150, 158, 377, 379, 409, 411, 473, 534, 768, 985, 1004, 1014], "page": [0, 12, 18, 27, 72, 73, 118, 120, 121, 129, 130, 133, 136, 147, 150, 158, 171, 172, 173, 182, 222, 231, 232, 233, 237, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 304, 313, 318, 319, 321, 322, 324, 329, 362, 368, 377, 379, 382, 384, 386, 388, 390, 397, 408, 409, 411, 473, 516, 517, 518, 628, 644, 831, 896, 938, 979, 985, 989, 990, 1016, 1025, 1029, 1031, 1035, 1036], "want": [0, 4, 12, 21, 25, 26, 27, 56, 65, 72, 150, 166, 171, 201, 202, 203, 237, 240, 253, 262, 276, 280, 288, 303, 332, 337, 353, 364, 368, 369, 370, 380, 381, 383, 384, 386, 387, 388, 394, 395, 396, 397, 399, 400, 403, 407, 408, 409, 410, 411, 416, 417, 418, 500, 503, 504, 510, 535, 549, 654, 655, 656, 658, 659, 666, 668, 674, 675, 676, 763, 847, 850, 866, 873, 894, 901, 978, 985, 988, 989, 990, 993, 995, 999, 1000, 1004, 1009, 1010, 1016, 1024, 1031, 1045], "its": [0, 4, 9, 12, 13, 14, 20, 27, 35, 38, 56, 66, 67, 79, 81, 83, 87, 91, 92, 93, 101, 111, 113, 119, 122, 124, 126, 139, 150, 153, 158, 160, 171, 172, 174, 177, 180, 190, 214, 218, 219, 224, 230, 237, 239, 240, 242, 244, 247, 252, 253, 261, 265, 267, 269, 271, 285, 287, 291, 292, 309, 320, 330, 337, 344, 350, 353, 354, 358, 362, 364, 369, 370, 375, 376, 377, 378, 382, 383, 384, 386, 387, 390, 394, 395, 396, 397, 399, 400, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 425, 440, 442, 444, 446, 450, 454, 456, 460, 463, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 497, 503, 523, 531, 533, 534, 537, 538, 540, 541, 542, 544, 550, 553, 555, 556, 557, 558, 559, 560, 564, 565, 566, 583, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 644, 645, 671, 672, 674, 685, 686, 687, 688, 692, 696, 699, 708, 724, 728, 729, 735, 736, 740, 777, 780, 782, 796, 797, 798, 822, 829, 830, 832, 843, 844, 845, 847, 848, 849, 851, 852, 853, 860, 861, 865, 870, 873, 874, 876, 893, 894, 897, 901, 902, 909, 911, 921, 922, 927, 933, 957, 959, 978, 981, 984, 985, 986, 988, 989, 990, 991, 992, 995, 996, 997, 1002, 1003, 1004, 1005, 1009, 1014, 1016, 1018, 1020, 1023, 1024, 1025, 1033, 1034, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "api": [0, 12, 51, 57, 72, 109, 110, 118, 168, 229, 231, 237, 241, 242, 245, 259, 264, 271, 272, 285, 324, 354, 355, 370, 371, 375, 376, 382, 383, 385, 386, 391, 392, 394, 395, 397, 399, 403, 414, 416, 417, 419, 423, 426, 427, 428, 431, 433, 438, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 496, 504, 508, 510, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 563, 564, 566, 567, 568, 569, 570, 579, 580, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 658, 677, 688, 689, 690, 691, 692, 702, 796, 797, 801, 802, 804, 820, 827, 845, 847, 849, 850, 853, 857, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 899, 905, 906, 955, 957, 973, 978, 987, 988, 989, 992, 999, 1003, 1009, 1010, 1011, 1014, 1016, 1020, 1022, 1027, 1028, 1029, 1030, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047], "design": [0, 14, 21, 81, 113, 133, 156, 170, 171, 182, 252, 307, 313, 362, 370, 376, 382, 387, 394, 395, 396, 397, 398, 409, 416, 418, 515, 528, 632, 633, 648, 665, 669, 676, 680, 685, 798, 816, 817, 836, 838, 979, 985, 986, 989, 990, 999, 1009, 1010, 1014, 1018, 1033, 1040], "mai": [0, 8, 20, 26, 40, 45, 47, 57, 72, 87, 96, 123, 124, 150, 157, 159, 161, 171, 174, 177, 181, 185, 190, 205, 207, 227, 237, 240, 265, 267, 269, 270, 301, 312, 328, 340, 344, 348, 353, 354, 355, 364, 368, 369, 370, 374, 376, 377, 378, 379, 381, 382, 384, 386, 387, 390, 394, 396, 397, 400, 403, 406, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 432, 439, 440, 441, 443, 444, 445, 446, 447, 449, 451, 452, 453, 454, 459, 462, 465, 469, 472, 482, 483, 484, 487, 488, 489, 496, 508, 509, 515, 534, 535, 538, 540, 544, 547, 548, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 572, 574, 581, 594, 597, 602, 610, 611, 617, 620, 634, 635, 637, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 676, 677, 678, 679, 681, 684, 686, 688, 689, 691, 692, 693, 695, 697, 705, 712, 715, 716, 718, 719, 721, 722, 723, 725, 737, 755, 762, 784, 785, 798, 800, 801, 802, 803, 812, 813, 814, 815, 817, 818, 822, 826, 829, 834, 835, 836, 837, 838, 840, 843, 844, 845, 847, 849, 851, 852, 853, 859, 860, 861, 864, 866, 876, 878, 879, 880, 881, 882, 884, 890, 893, 894, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 914, 919, 941, 942, 957, 978, 979, 981, 983, 985, 986, 989, 990, 991, 992, 993, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1010, 1016, 1022, 1023, 1031, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "consid": [0, 4, 12, 13, 14, 21, 26, 40, 56, 67, 72, 82, 91, 96, 100, 123, 126, 145, 149, 150, 166, 172, 201, 203, 237, 262, 265, 269, 273, 285, 288, 291, 292, 307, 319, 337, 344, 345, 348, 353, 364, 368, 369, 370, 374, 381, 382, 384, 388, 390, 394, 396, 397, 405, 409, 414, 415, 416, 417, 418, 419, 420, 421, 438, 444, 446, 450, 457, 474, 508, 509, 521, 533, 549, 550, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 585, 586, 588, 589, 591, 593, 607, 608, 620, 631, 632, 633, 646, 652, 658, 659, 660, 662, 671, 679, 688, 689, 690, 692, 693, 694, 696, 700, 702, 705, 707, 709, 715, 725, 729, 733, 755, 785, 787, 793, 843, 844, 845, 847, 849, 851, 852, 853, 856, 858, 859, 864, 874, 875, 882, 896, 897, 906, 907, 909, 910, 911, 912, 973, 978, 984, 985, 986, 987, 989, 990, 992, 995, 996, 997, 999, 1003, 1004, 1005, 1010, 1016, 1023, 1034, 1035, 1039, 1043, 1044, 1046, 1047, 1048], "softwar": [0, 150, 368, 379, 382, 390, 394, 396, 417, 627, 635, 658, 979, 1014], "from": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 172, 174, 175, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 368, 370, 374, 375, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 395, 396, 397, 398, 399, 400, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 432, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 502, 504, 506, 507, 508, 509, 510, 512, 515, 519, 521, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 684, 687, 688, 689, 690, 691, 692, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 717, 718, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 733, 734, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 762, 763, 767, 768, 770, 772, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 928, 929, 930, 931, 932, 933, 936, 938, 940, 941, 942, 943, 946, 947, 948, 950, 951, 952, 953, 954, 956, 957, 960, 963, 977, 978, 979, 981, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1014, 1017, 1019, 1020, 1021, 1022, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "2013": [0, 177, 379, 409, 413, 414, 536, 725, 755, 981, 989, 1008, 1032, 1033], "inproceed": 0, "sklearn_api": 0, "ga": 0, "l": [0, 7, 14, 17, 18, 41, 47, 48, 67, 68, 82, 116, 150, 173, 193, 196, 205, 210, 211, 267, 268, 269, 280, 302, 311, 348, 379, 380, 388, 390, 406, 407, 409, 413, 414, 416, 419, 474, 516, 517, 518, 538, 540, 547, 555, 556, 557, 558, 565, 566, 590, 607, 608, 610, 611, 615, 619, 622, 623, 634, 648, 649, 658, 669, 672, 674, 680, 687, 689, 692, 693, 705, 715, 724, 725, 730, 755, 785, 838, 872, 909, 910, 911, 912, 978, 983, 985, 986, 989, 991, 992, 993, 997, 1001, 1003, 1005, 1024, 1034, 1039, 1043, 1044, 1045, 1046], "booktitl": 0, "ecml": 0, "pkdd": 0, "workshop": [0, 409, 417, 836, 991, 1008], "languag": [0, 355, 387, 403, 414, 417, 1003, 1009, 1010, 1014, 1017], "data": [0, 3, 6, 8, 11, 13, 14, 15, 16, 17, 20, 22, 26, 31, 32, 33, 34, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 52, 53, 54, 55, 57, 60, 61, 62, 63, 66, 69, 70, 72, 73, 75, 77, 80, 82, 91, 93, 95, 96, 99, 100, 105, 107, 108, 111, 113, 115, 116, 118, 119, 122, 123, 125, 126, 130, 131, 132, 134, 136, 139, 140, 141, 142, 147, 152, 153, 154, 155, 157, 158, 160, 162, 163, 165, 168, 171, 172, 179, 180, 183, 184, 185, 186, 190, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 214, 215, 217, 218, 219, 220, 222, 223, 224, 225, 226, 230, 233, 234, 235, 237, 239, 240, 241, 244, 247, 248, 249, 250, 251, 253, 256, 260, 262, 264, 265, 266, 267, 270, 276, 280, 283, 285, 289, 291, 293, 294, 295, 296, 298, 302, 303, 306, 308, 309, 310, 314, 315, 317, 319, 321, 322, 323, 328, 329, 331, 332, 336, 337, 339, 344, 345, 353, 359, 360, 361, 362, 367, 369, 371, 374, 375, 376, 378, 379, 382, 384, 385, 388, 389, 390, 391, 395, 399, 400, 403, 405, 406, 407, 408, 411, 414, 415, 416, 417, 419, 420, 421, 422, 424, 426, 427, 428, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 513, 514, 515, 520, 521, 522, 523, 524, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 617, 618, 622, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 698, 699, 700, 701, 702, 704, 705, 707, 708, 710, 711, 713, 717, 718, 720, 724, 726, 727, 728, 729, 730, 733, 735, 736, 737, 739, 740, 753, 754, 756, 760, 762, 763, 768, 782, 783, 784, 786, 787, 788, 792, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 919, 920, 921, 922, 925, 926, 927, 937, 938, 952, 955, 960, 961, 963, 964, 965, 966, 967, 970, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1018, 1020, 1021, 1023, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "mine": [0, 262, 354, 377, 409, 420, 444, 511, 563, 720, 733, 739, 782, 985, 989, 995, 1001], "108": [0, 8, 210, 220, 1011, 1032], "122": [0, 13, 115, 158, 166, 172, 235, 388, 990], "high": [0, 4, 9, 11, 12, 26, 28, 32, 38, 41, 45, 50, 56, 58, 63, 66, 71, 75, 81, 82, 98, 99, 116, 118, 119, 120, 121, 126, 127, 129, 131, 141, 142, 150, 153, 159, 166, 170, 172, 173, 174, 185, 196, 202, 203, 205, 215, 222, 223, 224, 230, 234, 247, 253, 260, 264, 268, 269, 277, 291, 292, 301, 303, 309, 311, 312, 313, 314, 323, 330, 337, 339, 340, 353, 354, 360, 361, 368, 377, 379, 382, 387, 390, 391, 394, 395, 406, 407, 408, 409, 413, 415, 416, 417, 418, 419, 444, 447, 449, 450, 452, 469, 482, 483, 484, 553, 554, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 644, 670, 671, 679, 689, 692, 693, 725, 730, 741, 745, 755, 788, 791, 806, 808, 841, 842, 846, 875, 876, 880, 882, 903, 905, 906, 909, 910, 911, 912, 978, 983, 984, 985, 986, 988, 989, 992, 993, 995, 997, 999, 1001, 1004, 1005, 1006, 1009, 1010, 1016, 1017, 1019, 1025, 1031, 1032, 1034, 1035, 1039, 1042, 1043, 1044, 1045, 1046], "qualiti": [0, 6, 21, 25, 38, 47, 49, 50, 59, 99, 122, 171, 207, 256, 260, 269, 270, 271, 344, 382, 390, 394, 396, 403, 404, 408, 409, 411, 414, 452, 462, 469, 474, 557, 558, 559, 560, 564, 565, 742, 812, 893, 894, 909, 910, 911, 912, 938, 984, 986, 994, 1001, 1005, 1009, 1010, 1014, 1020, 1021, 1027], "png": [0, 33, 913], "svg": 0, "logo": [0, 413, 805], "avail": [0, 5, 11, 12, 14, 42, 57, 58, 99, 121, 125, 150, 153, 158, 162, 170, 171, 172, 190, 201, 209, 219, 223, 237, 240, 259, 260, 265, 266, 269, 290, 291, 292, 298, 312, 317, 318, 319, 320, 322, 323, 330, 332, 364, 368, 376, 377, 379, 380, 381, 382, 383, 387, 391, 395, 396, 399, 403, 406, 408, 409, 410, 413, 414, 415, 416, 417, 418, 420, 447, 450, 451, 452, 453, 469, 470, 471, 472, 473, 474, 475, 476, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 508, 535, 549, 555, 556, 557, 558, 559, 560, 564, 565, 588, 591, 593, 594, 610, 611, 632, 633, 647, 651, 653, 655, 657, 661, 663, 665, 668, 670, 672, 673, 674, 676, 689, 696, 699, 731, 732, 798, 801, 802, 812, 823, 824, 829, 830, 831, 832, 833, 834, 835, 847, 858, 859, 861, 868, 877, 880, 885, 889, 894, 945, 950, 957, 979, 983, 986, 988, 989, 990, 991, 992, 995, 999, 1002, 1003, 1004, 1008, 1009, 1010, 1014, 1016, 1020, 1025, 1027, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1047], "doc": [0, 4, 8, 20, 353, 355, 369, 380, 382, 386, 387, 390, 396, 399, 402, 403, 417, 588, 589, 591, 777, 780, 791, 792, 824, 1025, 1031, 1035, 1045], "sourc": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 364, 376, 379, 381, 382, 383, 385, 386, 388, 390, 391, 394, 395, 399, 403, 406, 410, 414, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 973, 974, 975, 976, 977, 986, 999, 1005, 1009, 1011, 1014, 1024, 1025, 1041, 1045], "directori": [0, 8, 287, 376, 380, 382, 384, 388, 390, 396, 399, 410, 441, 445, 450, 486, 499, 861, 862, 1045], "driven": [0, 174, 1014], "howev": [0, 4, 5, 7, 13, 14, 25, 26, 28, 38, 48, 50, 54, 56, 61, 73, 76, 79, 83, 86, 101, 104, 116, 118, 119, 123, 126, 127, 133, 147, 150, 153, 158, 159, 172, 173, 182, 190, 201, 205, 223, 226, 227, 230, 236, 237, 262, 269, 276, 280, 283, 285, 290, 302, 307, 319, 344, 348, 353, 354, 364, 368, 369, 370, 376, 377, 379, 380, 381, 382, 384, 388, 390, 394, 396, 400, 403, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 440, 443, 447, 449, 451, 454, 459, 496, 508, 532, 551, 567, 581, 582, 583, 589, 606, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 630, 632, 633, 638, 643, 655, 656, 672, 687, 692, 695, 700, 762, 764, 798, 801, 802, 812, 824, 828, 829, 840, 858, 859, 864, 873, 874, 879, 903, 904, 906, 917, 978, 979, 982, 983, 984, 985, 986, 988, 989, 990, 992, 993, 994, 996, 997, 999, 1003, 1004, 1005, 1016, 1020, 1023, 1040, 1041, 1043, 1044, 1047], "institut": [0, 379, 992], "privat": [0, 386, 396, 397, 917, 1014, 1031, 1039, 1041, 1042, 1044, 1045, 1048], "grant": [0, 240, 382], "assur": [0, 396, 796, 797, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "sustain": 0, "like": [0, 4, 12, 13, 20, 53, 56, 59, 61, 71, 90, 93, 99, 104, 106, 111, 113, 115, 120, 126, 129, 153, 159, 171, 181, 201, 253, 262, 265, 266, 269, 270, 276, 294, 304, 307, 312, 313, 317, 330, 340, 344, 353, 354, 364, 368, 370, 374, 376, 377, 380, 381, 382, 384, 386, 389, 390, 391, 394, 395, 396, 403, 405, 407, 409, 410, 412, 413, 414, 416, 417, 418, 420, 421, 422, 424, 425, 426, 427, 428, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 512, 513, 515, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 579, 581, 582, 583, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 926, 927, 935, 940, 943, 952, 953, 957, 960, 961, 962, 974, 976, 978, 981, 983, 984, 985, 986, 989, 991, 992, 993, 995, 996, 999, 1004, 1005, 1009, 1010, 1013, 1014, 1016, 1023, 1025, 1028, 1031, 1034, 1035, 1038, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1048], "thank": [0, 4, 18, 26, 56, 87, 173, 177, 201, 271, 353, 354, 381, 390, 1009, 1014, 1031, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "funder": 0, "member": [0, 353, 354, 377, 382, 385, 397, 409, 424, 442, 446, 448, 451, 453, 492, 555, 556, 557, 558, 563, 564, 565, 566, 581, 658, 659, 666, 667, 668, 676, 677, 678, 704, 705, 715, 717, 730, 735, 736, 756, 785, 794, 798, 901, 985, 992, 1016, 1031, 1043, 1046], "consortium": [0, 1014], "foundat": [0, 133, 382, 407, 992], "fran\u00e7oi": [0, 1034], "goupil": 0, "nvidia": [0, 394], "2022": [0, 369, 416, 705, 999, 1045, 1046], "face": [0, 3, 5, 15, 16, 37, 49, 52, 54, 69, 95, 99, 101, 104, 106, 107, 108, 121, 168, 177, 229, 234, 236, 245, 353, 375, 382, 386, 409, 414, 416, 418, 449, 472, 493, 494, 495, 521, 532, 533, 537, 539, 540, 541, 543, 558, 584, 657, 673, 697, 713, 812, 827, 844, 881, 906, 924, 992, 1005, 1006, 1007, 1011, 1019, 1024, 1027, 1031, 1039], "2023": [0, 407, 1046, 1047], "microsoft": [0, 12, 380, 383, 399], "m\u00fcller": [0, 32, 308, 309, 397, 414, 535, 867, 993, 999, 1003, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1045], "2020": [0, 377, 1041, 1042, 1043, 1044], "quansight": 0, "lab": [0, 377, 468, 536, 899, 1014, 1042], "2021": [0, 380, 382, 671, 1043, 1044], "columbia": 0, "univers": [0, 161, 353, 377, 379, 385, 409, 414, 417, 590, 787, 836, 840, 896, 985, 987, 989, 991], "2016": [0, 227, 376, 409, 978, 1036, 1037], "sydnei": 0, "2017": [0, 262, 376, 407, 409, 420, 444, 989, 1037, 1038], "receiv": [0, 20, 139, 168, 231, 237, 243, 255, 257, 259, 264, 269, 278, 330, 355, 364, 382, 384, 390, 396, 413, 416, 504, 658, 702, 706, 708, 726, 781, 787, 788, 817, 827, 829, 830, 868, 906, 990, 993, 994, 1003, 1011, 1041, 1042], "improv": [0, 4, 25, 26, 34, 79, 80, 83, 101, 107, 113, 114, 119, 122, 124, 125, 126, 128, 133, 146, 166, 171, 177, 187, 201, 209, 219, 263, 265, 280, 285, 288, 304, 312, 323, 324, 343, 344, 354, 364, 369, 380, 385, 387, 388, 390, 391, 394, 396, 397, 403, 408, 414, 416, 418, 449, 450, 531, 532, 534, 537, 538, 539, 541, 542, 543, 546, 554, 557, 558, 559, 560, 561, 562, 564, 565, 610, 611, 643, 652, 664, 666, 667, 668, 672, 673, 674, 675, 676, 678, 685, 687, 692, 728, 729, 783, 786, 787, 850, 858, 859, 875, 877, 889, 909, 910, 912, 938, 983, 985, 986, 989, 992, 993, 1003, 1004, 1005, 1008, 1009, 1010, 1014, 1023, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "alfr": 0, "sloan": 0, "posit": [0, 4, 6, 8, 11, 12, 17, 25, 26, 28, 68, 107, 130, 135, 170, 171, 185, 186, 196, 201, 202, 203, 205, 219, 225, 234, 240, 259, 262, 265, 269, 271, 272, 307, 318, 319, 323, 353, 362, 368, 377, 381, 382, 384, 389, 391, 396, 397, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 421, 438, 439, 442, 446, 447, 449, 464, 467, 494, 498, 500, 504, 508, 509, 510, 525, 527, 529, 530, 531, 533, 535, 536, 537, 542, 545, 546, 548, 549, 550, 557, 561, 562, 563, 564, 592, 593, 594, 595, 596, 598, 599, 600, 606, 610, 611, 620, 631, 632, 643, 646, 647, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 669, 672, 673, 674, 675, 677, 680, 681, 682, 683, 684, 687, 690, 698, 700, 702, 707, 709, 712, 713, 715, 718, 720, 723, 726, 728, 729, 730, 734, 735, 737, 738, 739, 740, 741, 742, 743, 751, 753, 757, 765, 781, 782, 783, 786, 787, 788, 796, 797, 801, 802, 824, 841, 842, 843, 845, 847, 849, 851, 853, 854, 864, 865, 868, 874, 877, 880, 885, 889, 893, 894, 896, 897, 901, 902, 905, 906, 907, 909, 911, 918, 936, 938, 954, 956, 980, 981, 985, 987, 989, 990, 992, 993, 994, 996, 999, 1004, 1021, 1023, 1025, 1032, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "It": [0, 4, 7, 8, 9, 13, 17, 21, 26, 35, 38, 41, 54, 56, 59, 73, 79, 81, 83, 96, 99, 100, 106, 113, 116, 118, 119, 122, 124, 126, 133, 150, 158, 159, 160, 165, 166, 171, 172, 173, 181, 185, 189, 190, 198, 201, 205, 215, 218, 219, 222, 223, 230, 235, 237, 240, 257, 258, 260, 262, 263, 265, 268, 269, 280, 285, 291, 292, 293, 295, 296, 298, 307, 311, 312, 314, 317, 323, 336, 340, 344, 348, 353, 354, 355, 364, 368, 369, 370, 375, 377, 379, 380, 382, 384, 386, 387, 388, 390, 391, 394, 395, 396, 399, 400, 403, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 434, 437, 438, 441, 442, 443, 444, 445, 447, 448, 449, 452, 459, 462, 467, 468, 469, 474, 478, 485, 487, 496, 508, 515, 524, 533, 535, 536, 538, 540, 541, 549, 550, 553, 554, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 589, 596, 602, 606, 607, 608, 611, 614, 615, 619, 620, 622, 623, 627, 630, 631, 632, 633, 641, 642, 643, 646, 647, 650, 652, 653, 654, 655, 658, 660, 661, 662, 663, 666, 667, 668, 670, 671, 672, 674, 676, 677, 678, 681, 682, 683, 684, 687, 689, 691, 692, 693, 695, 696, 697, 698, 699, 700, 702, 704, 708, 709, 710, 716, 722, 733, 741, 742, 746, 757, 758, 761, 764, 780, 782, 798, 800, 801, 802, 804, 810, 811, 812, 820, 822, 825, 828, 837, 838, 843, 844, 845, 847, 850, 851, 852, 853, 857, 858, 859, 863, 864, 865, 869, 870, 871, 875, 878, 880, 890, 893, 894, 898, 899, 901, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 925, 938, 946, 947, 957, 960, 963, 965, 966, 967, 968, 969, 970, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 999, 1000, 1002, 1003, 1004, 1005, 1009, 1014, 1016, 1022, 1023, 1024, 1025, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "provid": [0, 5, 8, 11, 13, 25, 28, 31, 35, 38, 43, 56, 61, 82, 96, 115, 120, 121, 131, 133, 153, 159, 171, 172, 180, 187, 189, 190, 193, 202, 205, 210, 223, 227, 231, 232, 237, 252, 262, 263, 264, 268, 295, 298, 303, 307, 311, 317, 318, 320, 322, 338, 344, 345, 348, 353, 354, 358, 359, 362, 364, 368, 370, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 390, 391, 394, 395, 396, 398, 399, 400, 403, 405, 406, 408, 409, 410, 411, 413, 414, 416, 417, 418, 419, 420, 421, 430, 437, 440, 442, 443, 444, 446, 447, 449, 450, 452, 459, 460, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 493, 494, 496, 498, 501, 532, 533, 534, 535, 538, 540, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 593, 594, 601, 605, 610, 611, 627, 632, 633, 634, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 690, 694, 699, 711, 734, 740, 741, 763, 773, 777, 787, 791, 793, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 810, 811, 812, 816, 817, 818, 819, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 858, 859, 861, 864, 866, 867, 868, 871, 872, 873, 876, 878, 880, 881, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 916, 927, 932, 946, 948, 965, 966, 967, 978, 979, 981, 984, 985, 986, 988, 989, 990, 992, 993, 994, 995, 996, 997, 999, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1014, 1016, 1020, 1023, 1025, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "2012": [0, 82, 407, 416, 555, 556, 563, 639, 742, 978, 982, 989, 1008, 1031], "full": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 368, 369, 370, 375, 377, 380, 382, 384, 387, 390, 394, 396, 397, 399, 405, 408, 409, 411, 413, 414, 417, 441, 445, 447, 449, 459, 488, 489, 492, 496, 497, 500, 501, 502, 503, 504, 505, 507, 510, 535, 537, 541, 559, 560, 567, 568, 632, 648, 650, 654, 669, 680, 721, 722, 727, 744, 745, 747, 749, 750, 752, 784, 789, 790, 796, 797, 809, 838, 927, 978, 985, 988, 991, 992, 996, 999, 1002, 1010, 1023, 1031, 1035, 1037, 1039, 1041, 1042, 1044, 1045, 1047, 1048], "time": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 354, 355, 358, 359, 360, 361, 362, 364, 368, 369, 370, 376, 377, 379, 380, 381, 382, 383, 384, 386, 387, 388, 390, 394, 396, 397, 400, 405, 406, 407, 408, 409, 411, 412, 414, 416, 417, 420, 437, 441, 443, 444, 445, 446, 447, 450, 452, 455, 457, 458, 459, 461, 462, 463, 464, 465, 467, 468, 472, 496, 499, 501, 519, 523, 534, 536, 538, 540, 547, 562, 567, 568, 569, 570, 590, 610, 619, 627, 628, 629, 630, 634, 639, 640, 643, 646, 650, 652, 654, 660, 662, 664, 666, 667, 673, 676, 677, 678, 685, 686, 690, 692, 694, 701, 741, 744, 745, 747, 789, 793, 796, 797, 798, 800, 801, 802, 803, 805, 807, 812, 813, 814, 817, 819, 822, 823, 824, 825, 826, 827, 829, 831, 836, 837, 838, 839, 840, 841, 842, 849, 851, 852, 853, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 871, 874, 876, 880, 885, 893, 894, 898, 899, 903, 906, 907, 915, 940, 955, 978, 979, 981, 982, 985, 986, 988, 989, 990, 991, 992, 993, 994, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1009, 1014, 1016, 1021, 1023, 1024, 1025, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "host": [0, 119, 323, 353, 377, 382, 386, 390, 391, 894, 957, 1025, 1047], "other": [0, 4, 8, 12, 13, 25, 28, 31, 32, 34, 38, 41, 45, 53, 58, 67, 70, 72, 73, 87, 98, 99, 101, 104, 116, 118, 119, 122, 123, 127, 129, 135, 145, 165, 166, 168, 170, 171, 172, 173, 177, 180, 194, 201, 205, 219, 222, 223, 224, 226, 230, 231, 232, 234, 236, 237, 240, 241, 249, 252, 257, 259, 262, 263, 264, 271, 272, 280, 290, 291, 292, 306, 307, 311, 312, 314, 315, 317, 318, 320, 324, 327, 340, 344, 347, 350, 353, 354, 358, 362, 364, 368, 374, 375, 377, 378, 379, 382, 384, 386, 387, 388, 390, 391, 395, 396, 397, 399, 400, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 437, 443, 444, 446, 447, 448, 449, 450, 452, 457, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 488, 496, 497, 503, 533, 534, 535, 538, 541, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 594, 597, 602, 610, 611, 612, 613, 620, 627, 628, 630, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 690, 692, 696, 699, 704, 718, 762, 773, 777, 784, 791, 798, 799, 800, 801, 802, 803, 804, 805, 807, 812, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 846, 848, 851, 852, 856, 858, 859, 861, 862, 864, 866, 867, 868, 870, 871, 873, 874, 875, 877, 878, 879, 880, 881, 882, 889, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 932, 946, 978, 979, 981, 982, 983, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1002, 1003, 1004, 1005, 1007, 1010, 1011, 1012, 1013, 1014, 1016, 1020, 1023, 1024, 1027, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1044, 1045, 1046, 1047, 1048], "event": [0, 4, 17, 201, 219, 265, 407, 409, 588, 589, 636, 836, 926, 985, 990, 991, 1009, 1014, 1037], "pari": [0, 379, 410, 466, 763, 869, 1000, 1045], "saclai": 0, "center": [0, 4, 7, 8, 9, 14, 25, 27, 34, 35, 38, 39, 41, 43, 44, 46, 49, 50, 51, 54, 56, 57, 60, 61, 62, 64, 65, 82, 92, 101, 103, 106, 124, 125, 126, 127, 150, 166, 172, 182, 193, 195, 201, 202, 212, 213, 225, 226, 230, 231, 240, 247, 250, 251, 257, 263, 273, 290, 293, 295, 302, 307, 309, 310, 321, 329, 338, 340, 341, 342, 347, 354, 355, 377, 378, 379, 387, 408, 409, 411, 412, 414, 415, 416, 422, 440, 442, 443, 446, 447, 448, 449, 452, 454, 459, 460, 461, 462, 463, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 501, 512, 524, 534, 535, 541, 544, 550, 606, 609, 610, 611, 632, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 678, 690, 694, 796, 866, 867, 870, 879, 881, 891, 892, 901, 902, 983, 985, 986, 988, 996, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1048], "scienc": [0, 39, 81, 150, 161, 280, 376, 379, 394, 409, 440, 454, 538, 540, 547, 688, 689, 693, 848, 979, 981, 985, 986, 989, 992, 1001, 1010, 1014, 1019, 1039], "one": [0, 4, 8, 9, 10, 13, 15, 17, 18, 26, 27, 28, 33, 34, 35, 38, 41, 48, 54, 56, 58, 59, 61, 62, 65, 67, 72, 82, 90, 91, 92, 96, 99, 101, 102, 106, 118, 119, 124, 126, 129, 133, 136, 149, 150, 153, 160, 161, 165, 170, 171, 172, 173, 174, 177, 180, 181, 185, 190, 191, 193, 194, 195, 197, 201, 203, 210, 211, 216, 219, 224, 230, 237, 238, 240, 249, 252, 258, 259, 260, 262, 263, 265, 266, 269, 270, 271, 272, 280, 283, 285, 290, 304, 308, 309, 312, 313, 317, 319, 320, 321, 330, 339, 340, 349, 353, 354, 355, 358, 362, 364, 368, 369, 370, 376, 377, 378, 379, 381, 382, 384, 386, 387, 388, 389, 390, 391, 394, 396, 397, 398, 399, 400, 403, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 444, 445, 446, 447, 449, 450, 451, 452, 453, 455, 456, 457, 460, 462, 464, 469, 474, 487, 488, 490, 491, 492, 493, 494, 495, 496, 500, 501, 502, 503, 504, 505, 508, 509, 510, 512, 514, 534, 539, 540, 543, 547, 551, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 569, 581, 583, 584, 588, 589, 590, 591, 610, 611, 615, 616, 620, 627, 630, 632, 633, 634, 635, 643, 647, 648, 649, 650, 654, 657, 658, 659, 661, 666, 668, 669, 671, 673, 674, 675, 676, 678, 680, 688, 692, 695, 699, 703, 709, 720, 728, 729, 733, 737, 749, 750, 753, 762, 770, 773, 777, 778, 779, 780, 782, 783, 786, 787, 789, 790, 791, 792, 795, 796, 797, 798, 801, 802, 804, 805, 806, 808, 810, 812, 816, 817, 820, 822, 824, 825, 827, 828, 829, 830, 831, 833, 834, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 857, 861, 864, 865, 866, 868, 869, 871, 872, 873, 874, 875, 880, 881, 882, 885, 887, 901, 903, 904, 905, 906, 907, 909, 910, 911, 912, 917, 927, 930, 940, 947, 960, 978, 979, 981, 983, 984, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1003, 1004, 1005, 1006, 1008, 1009, 1014, 1016, 1020, 1022, 1023, 1024, 1025, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "2014": [0, 53, 376, 414, 416, 419, 530, 607, 608, 622, 623, 658, 692, 858, 859, 937, 938, 986, 993, 1014, 1034], "2015": [0, 172, 376, 708, 721, 722, 723, 858, 859, 989, 996, 1014, 1035, 1036], "50": [0, 4, 7, 10, 13, 15, 17, 25, 33, 34, 39, 43, 51, 53, 60, 61, 66, 67, 71, 72, 86, 93, 96, 99, 106, 113, 116, 119, 126, 131, 132, 150, 154, 156, 157, 158, 159, 170, 171, 172, 181, 185, 196, 201, 204, 208, 209, 213, 215, 217, 219, 222, 226, 227, 228, 233, 234, 236, 244, 257, 262, 264, 265, 275, 285, 304, 307, 311, 319, 321, 328, 330, 332, 338, 347, 354, 377, 379, 382, 387, 413, 416, 417, 418, 421, 442, 473, 500, 504, 523, 533, 539, 544, 553, 554, 569, 593, 594, 615, 617, 658, 659, 666, 667, 668, 670, 676, 677, 678, 692, 713, 798, 812, 830, 850, 901, 910, 984, 985, 989, 990, 992, 995, 999, 1031, 1048], "2018": [0, 201, 219, 417, 450, 978, 989, 1007, 1014, 1038, 1039], "nyu": [0, 183, 850], "moor": [0, 734, 989, 1014], "environ": [0, 12, 27, 72, 73, 118, 120, 121, 129, 130, 133, 136, 147, 158, 171, 172, 173, 182, 231, 232, 233, 237, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 304, 313, 318, 319, 321, 322, 324, 329, 362, 368, 377, 379, 380, 382, 384, 388, 390, 394, 399, 403, 405, 408, 410, 499, 1010, 1014, 1038, 1039, 1048], "student": [0, 98, 262, 986, 1010, 1014], "t\u00e9l\u00e9com": [0, 1007], "paristech": [0, 25, 26, 43, 230, 1007], "rv": [0, 266, 307, 802, 810, 812, 978, 1031, 1032, 1035, 1036, 1037, 1038, 1039], "thierri": [0, 247, 249, 1014, 1037, 1038, 1045], "guillemot": [0, 247, 249, 1037, 1038], "labex": 0, "digicosm": 0, "goix": [0, 1035, 1037, 1038, 1039, 1040], "mathurin": [0, 1042, 1044, 1045], "massia": [0, 1042, 1044, 1045], "2019": [0, 172, 380, 409, 452, 462, 692, 986, 996, 999, 1039, 1040, 1041], "dure": [0, 4, 5, 12, 13, 51, 56, 59, 73, 76, 87, 101, 117, 123, 124, 130, 147, 153, 158, 171, 172, 174, 190, 202, 209, 260, 264, 285, 319, 320, 344, 368, 370, 380, 382, 384, 387, 396, 397, 409, 410, 414, 416, 417, 419, 420, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 459, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 613, 614, 615, 617, 619, 620, 622, 623, 625, 627, 628, 629, 630, 632, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 700, 788, 796, 797, 798, 801, 802, 812, 822, 823, 824, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 886, 892, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 978, 979, 981, 985, 986, 992, 999, 1001, 1005, 1020, 1025, 1027, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "phd": [0, 409, 416, 1010, 1014], "chan": [0, 839, 881], "zuckerberg": 0, "initi": [0, 7, 12, 18, 37, 43, 44, 46, 58, 59, 61, 64, 65, 69, 82, 111, 127, 134, 135, 136, 154, 159, 168, 171, 181, 194, 216, 222, 223, 227, 246, 248, 249, 254, 262, 285, 319, 329, 340, 354, 364, 369, 377, 382, 384, 390, 391, 394, 396, 409, 414, 416, 418, 419, 421, 442, 443, 447, 448, 449, 450, 451, 452, 453, 459, 460, 461, 462, 478, 512, 515, 531, 532, 533, 537, 538, 540, 543, 545, 546, 547, 548, 553, 554, 559, 560, 593, 607, 608, 610, 611, 619, 620, 627, 640, 645, 646, 647, 648, 652, 653, 658, 660, 661, 662, 663, 666, 667, 668, 669, 671, 676, 677, 678, 680, 681, 684, 690, 691, 692, 694, 695, 796, 797, 831, 850, 857, 858, 859, 897, 924, 937, 938, 963, 964, 981, 985, 986, 988, 993, 994, 995, 1003, 1005, 1009, 1011, 1022, 1024, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "were": [0, 4, 33, 71, 72, 75, 81, 82, 119, 123, 126, 147, 150, 158, 166, 201, 202, 205, 231, 240, 271, 273, 303, 304, 312, 318, 319, 321, 322, 323, 324, 330, 344, 353, 355, 362, 364, 376, 377, 379, 382, 383, 386, 394, 396, 400, 406, 410, 416, 417, 464, 467, 468, 496, 561, 562, 588, 591, 602, 801, 802, 817, 825, 898, 899, 978, 981, 989, 990, 1005, 1013, 1024, 1025, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "through": [0, 7, 13, 35, 118, 150, 161, 171, 205, 222, 235, 237, 257, 262, 265, 290, 311, 312, 338, 345, 355, 362, 379, 380, 382, 384, 389, 391, 396, 397, 399, 400, 409, 412, 414, 416, 418, 419, 446, 464, 467, 472, 535, 557, 558, 561, 564, 565, 566, 581, 593, 594, 597, 647, 651, 653, 655, 658, 659, 661, 663, 665, 668, 676, 677, 688, 691, 720, 804, 820, 877, 889, 893, 894, 909, 910, 911, 912, 944, 947, 978, 979, 986, 989, 991, 992, 993, 995, 997, 999, 1003, 1004, 1005, 1014, 1016, 1023, 1025, 1031, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1048], "program": [0, 51, 150, 354, 364, 369, 370, 379, 380, 382, 384, 388, 394, 508, 635, 670, 891, 892, 985, 1004, 1005, 1009, 1010, 1031, 1033], "immanuel": [0, 1031, 1032, 1036], "bayer": [0, 1031, 1032, 1036], "kemal": [0, 21, 22, 1033, 1034], "eren": [0, 21, 22, 1033, 1034], "tr\u00e9segni": [0, 1033], "hamzeh": [0, 1034, 1035], "alsalhi": [0, 1034, 1035], "issam": [0, 301, 1037], "laradji": [0, 301, 1037], "maheshakya": [0, 1034, 1035, 1036], "wijewardena": [0, 1034, 1035, 1036], "xue": [0, 1035, 1036, 1037, 1039, 1040, 1043], "nelson": [0, 1037, 1038, 1043], "yenchen": [0, 1037], "lin": [0, 534, 658, 1004, 1036, 1037, 1038, 1039], "neurodebian": 0, "debian": [0, 368, 380, 388], "packag": [0, 47, 54, 165, 237, 285, 369, 375, 376, 379, 380, 382, 383, 384, 386, 388, 391, 394, 396, 399, 408, 411, 416, 417, 452, 478, 646, 647, 979, 985, 988, 992, 999, 1005, 1014, 1019, 1031, 1037, 1039, 1040, 1041], "dr": [0, 150, 379, 409, 1045], "jame": [0, 379, 413, 831, 990, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1047], "haxbi": 0, "dartmouth": 0, "colleg": [0, 170], "organ": [0, 11, 13, 71, 81, 353, 376, 381, 382, 397, 849, 1009], "kindli": 0, "axa": 0, "some": [0, 3, 4, 5, 8, 9, 13, 20, 25, 26, 28, 38, 45, 51, 54, 56, 57, 59, 63, 68, 72, 75, 79, 81, 82, 87, 96, 114, 115, 126, 129, 130, 133, 134, 146, 153, 155, 158, 159, 160, 161, 162, 165, 166, 168, 171, 172, 173, 174, 177, 180, 182, 184, 185, 189, 190, 191, 195, 196, 201, 202, 205, 209, 210, 215, 218, 219, 222, 224, 230, 234, 237, 240, 248, 249, 250, 256, 257, 262, 263, 264, 265, 268, 270, 280, 283, 288, 291, 296, 302, 303, 307, 312, 318, 319, 320, 321, 322, 323, 324, 336, 337, 339, 340, 348, 350, 353, 354, 355, 362, 364, 368, 369, 370, 375, 376, 377, 379, 380, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 395, 396, 399, 400, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 432, 437, 443, 444, 447, 449, 451, 453, 459, 463, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 496, 499, 508, 509, 515, 523, 524, 533, 534, 536, 538, 541, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 581, 582, 588, 590, 591, 594, 606, 609, 610, 611, 632, 633, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 689, 690, 692, 693, 697, 698, 700, 701, 702, 707, 708, 715, 720, 725, 726, 737, 738, 739, 745, 753, 755, 756, 762, 781, 783, 786, 787, 788, 793, 796, 799, 800, 805, 807, 816, 817, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 846, 848, 851, 852, 858, 859, 861, 864, 866, 867, 868, 873, 880, 881, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 921, 922, 946, 957, 978, 979, 981, 984, 985, 986, 988, 989, 990, 991, 992, 993, 995, 996, 999, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1013, 1014, 1016, 1021, 1023, 1024, 1025, 1028, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "particip": [0, 381, 382, 397, 1014], "could": [0, 4, 9, 13, 14, 28, 38, 43, 54, 72, 73, 96, 99, 114, 115, 123, 126, 147, 153, 158, 166, 170, 171, 172, 201, 202, 205, 210, 219, 226, 235, 236, 237, 256, 262, 283, 293, 296, 320, 336, 337, 353, 358, 370, 382, 388, 390, 396, 399, 403, 407, 413, 416, 417, 421, 474, 533, 538, 607, 608, 629, 671, 800, 805, 807, 978, 979, 985, 986, 996, 997, 999, 1004, 1010, 1024, 1028, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047], "attend": 0, "psf": [0, 382], "dataia": 0, "possibl": [0, 4, 13, 18, 27, 38, 50, 56, 72, 79, 96, 116, 119, 130, 153, 171, 172, 173, 174, 201, 218, 219, 235, 237, 262, 263, 264, 265, 267, 268, 269, 271, 272, 283, 317, 340, 348, 353, 354, 364, 368, 369, 370, 375, 376, 377, 380, 382, 383, 384, 385, 386, 388, 390, 394, 395, 396, 399, 403, 406, 407, 408, 409, 410, 412, 413, 414, 416, 417, 419, 421, 423, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 462, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 496, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 688, 689, 690, 691, 692, 709, 721, 722, 723, 727, 741, 755, 777, 782, 784, 787, 796, 797, 798, 800, 801, 802, 804, 810, 811, 812, 816, 817, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 919, 921, 922, 925, 930, 957, 960, 963, 978, 981, 984, 985, 986, 988, 989, 990, 991, 992, 997, 999, 1004, 1005, 1010, 1014, 1016, 1023, 1024, 1025, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1045, 1046, 1047], "tinyclu": 0, "french": [0, 219, 313], "associ": [0, 11, 25, 26, 81, 113, 153, 170, 171, 205, 250, 313, 327, 329, 353, 390, 409, 411, 413, 414, 416, 417, 446, 449, 469, 470, 471, 472, 473, 474, 475, 476, 493, 494, 495, 524, 557, 561, 564, 605, 606, 630, 645, 658, 659, 666, 668, 674, 675, 676, 689, 695, 699, 730, 738, 824, 844, 852, 866, 878, 890, 898, 907, 909, 911, 927, 988, 989, 992, 999, 1002, 1014, 1024, 1031, 1043, 1047], "fond": [0, 1014], "de": [0, 12, 25, 26, 27, 28, 75, 117, 133, 153, 154, 156, 157, 158, 159, 160, 162, 192, 235, 236, 313, 329, 348, 379, 635, 688, 763, 985, 986, 1010, 1032, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "recherch": 0, "scientifiqu": 0, "granada": 0, "interest": [0, 4, 6, 13, 43, 45, 51, 56, 63, 67, 73, 113, 121, 126, 133, 147, 150, 158, 165, 172, 173, 190, 201, 202, 203, 219, 223, 235, 256, 259, 262, 263, 265, 271, 280, 340, 348, 354, 362, 368, 377, 379, 382, 387, 388, 390, 394, 397, 409, 411, 414, 417, 419, 493, 494, 500, 504, 510, 646, 647, 901, 979, 985, 986, 989, 994, 995, 996, 1010, 1014, 1021, 1023, 1024, 1031, 1048], "our": [0, 4, 5, 7, 11, 12, 13, 43, 54, 57, 71, 72, 81, 82, 87, 96, 97, 113, 114, 120, 123, 124, 126, 127, 145, 150, 153, 158, 160, 170, 171, 172, 173, 174, 201, 205, 219, 224, 226, 237, 256, 262, 265, 268, 269, 288, 303, 307, 313, 318, 320, 332, 337, 343, 345, 348, 353, 354, 355, 364, 369, 381, 386, 387, 390, 394, 395, 396, 397, 400, 409, 413, 416, 417, 419, 420, 444, 450, 563, 644, 692, 708, 720, 725, 737, 755, 843, 844, 845, 847, 849, 851, 852, 853, 978, 979, 985, 986, 989, 995, 999, 1002, 1003, 1004, 1010, 1014, 1016, 1023, 1024, 1025, 1038, 1039, 1041, 1042, 1045, 1046, 1048], "via": [0, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 172, 173, 174, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 364, 368, 369, 374, 379, 380, 383, 384, 386, 390, 394, 395, 396, 397, 399, 400, 403, 406, 407, 409, 410, 412, 413, 414, 418, 419, 437, 501, 535, 539, 541, 543, 546, 559, 560, 597, 611, 616, 621, 624, 638, 639, 640, 641, 656, 666, 668, 673, 676, 687, 689, 692, 693, 709, 798, 821, 822, 823, 824, 829, 830, 831, 833, 839, 847, 858, 861, 862, 881, 882, 978, 983, 985, 986, 988, 989, 990, 996, 997, 1003, 1004, 1010, 1011, 1014, 1016, 1027, 1031, 1035, 1036, 1039, 1043, 1044, 1045, 1046, 1047, 1048], "numfocu": 0, "all": [0, 4, 5, 7, 8, 11, 14, 17, 20, 25, 26, 28, 35, 39, 40, 41, 43, 44, 49, 53, 54, 55, 56, 61, 65, 76, 83, 92, 96, 98, 99, 111, 118, 119, 121, 122, 126, 135, 136, 150, 158, 159, 161, 168, 170, 171, 172, 174, 180, 185, 187, 193, 194, 195, 201, 202, 203, 204, 205, 210, 212, 216, 218, 219, 222, 223, 230, 236, 237, 240, 241, 244, 248, 250, 252, 260, 263, 264, 265, 266, 268, 269, 270, 272, 274, 280, 285, 288, 290, 303, 307, 308, 312, 317, 318, 319, 320, 322, 323, 324, 327, 329, 330, 331, 337, 340, 344, 345, 348, 349, 353, 354, 355, 359, 362, 364, 368, 369, 370, 375, 377, 378, 379, 380, 382, 384, 386, 387, 388, 390, 391, 394, 395, 396, 397, 400, 405, 406, 407, 408, 409, 410, 413, 414, 416, 417, 418, 419, 420, 421, 423, 424, 426, 427, 428, 431, 432, 433, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 503, 508, 509, 515, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 700, 701, 702, 705, 709, 713, 714, 715, 716, 717, 718, 720, 721, 722, 725, 727, 728, 729, 731, 732, 734, 735, 736, 737, 741, 744, 745, 747, 749, 750, 752, 755, 760, 768, 773, 777, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 804, 805, 807, 808, 810, 812, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 921, 922, 923, 927, 929, 930, 931, 932, 943, 946, 947, 952, 957, 964, 973, 978, 979, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 994, 996, 999, 1002, 1003, 1004, 1005, 1009, 1010, 1011, 1014, 1016, 1017, 1019, 1020, 1022, 1023, 1024, 1025, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "handl": [0, 4, 9, 72, 119, 123, 129, 133, 177, 185, 236, 237, 264, 269, 271, 280, 283, 285, 292, 313, 317, 353, 355, 362, 368, 374, 376, 380, 382, 383, 384, 391, 394, 396, 400, 416, 417, 419, 496, 544, 577, 581, 582, 585, 586, 588, 589, 591, 610, 635, 646, 647, 652, 658, 659, 660, 661, 662, 668, 675, 676, 678, 681, 720, 787, 865, 874, 875, 901, 902, 906, 913, 939, 946, 949, 986, 989, 990, 991, 992, 995, 997, 1004, 1005, 1009, 1010, 1014, 1027, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "non": [0, 3, 5, 6, 9, 10, 11, 13, 14, 16, 25, 26, 34, 35, 38, 50, 58, 63, 72, 76, 81, 83, 97, 98, 99, 101, 115, 123, 130, 131, 133, 142, 146, 147, 149, 155, 157, 159, 166, 168, 170, 171, 172, 173, 174, 179, 180, 185, 187, 191, 194, 195, 197, 199, 200, 202, 203, 207, 211, 212, 214, 215, 216, 217, 219, 220, 225, 226, 227, 231, 232, 233, 234, 235, 236, 238, 240, 247, 249, 251, 253, 255, 256, 257, 262, 271, 278, 280, 285, 289, 291, 292, 298, 301, 304, 307, 309, 310, 311, 312, 318, 319, 320, 321, 323, 324, 331, 332, 335, 337, 340, 342, 343, 344, 345, 348, 349, 350, 351, 353, 354, 355, 362, 364, 368, 369, 374, 377, 378, 382, 383, 384, 387, 388, 390, 391, 394, 396, 397, 407, 408, 409, 410, 413, 415, 416, 417, 418, 419, 421, 437, 441, 445, 446, 450, 452, 456, 462, 463, 464, 465, 467, 468, 488, 496, 497, 503, 504, 508, 526, 532, 535, 536, 538, 540, 544, 547, 549, 551, 552, 553, 557, 558, 559, 560, 561, 562, 564, 565, 566, 572, 588, 589, 591, 592, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 631, 635, 638, 643, 650, 652, 657, 658, 659, 660, 664, 665, 666, 667, 668, 669, 672, 676, 677, 678, 685, 686, 687, 688, 689, 690, 691, 692, 694, 698, 699, 702, 706, 707, 712, 715, 717, 719, 720, 725, 726, 727, 734, 736, 738, 739, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 757, 758, 781, 784, 787, 788, 789, 790, 793, 796, 797, 798, 799, 803, 805, 806, 807, 808, 810, 816, 823, 827, 830, 849, 851, 852, 853, 856, 861, 862, 864, 865, 866, 869, 873, 874, 875, 876, 877, 878, 880, 881, 888, 889, 890, 891, 892, 894, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 921, 922, 936, 938, 942, 944, 952, 978, 979, 980, 981, 982, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1010, 1011, 1023, 1024, 1025, 1026, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "profit": 0, "which": [0, 4, 7, 10, 12, 13, 14, 15, 17, 18, 20, 21, 22, 26, 27, 28, 35, 38, 40, 41, 44, 45, 47, 50, 54, 56, 57, 58, 59, 66, 68, 71, 72, 73, 76, 79, 81, 82, 87, 91, 93, 98, 100, 101, 102, 107, 113, 116, 117, 118, 119, 123, 125, 126, 129, 131, 132, 133, 134, 135, 136, 139, 145, 147, 149, 150, 153, 154, 158, 159, 160, 165, 166, 170, 171, 172, 174, 177, 180, 181, 185, 190, 194, 201, 202, 203, 205, 207, 209, 215, 217, 218, 219, 222, 223, 224, 226, 230, 231, 234, 235, 236, 237, 238, 240, 241, 247, 248, 252, 253, 256, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 276, 277, 280, 283, 285, 290, 291, 292, 302, 307, 309, 310, 311, 312, 313, 314, 317, 319, 320, 321, 322, 323, 324, 327, 329, 330, 331, 340, 344, 348, 350, 353, 354, 355, 358, 362, 364, 368, 369, 370, 374, 376, 377, 379, 380, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 426, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 459, 460, 462, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 487, 523, 531, 532, 533, 534, 537, 538, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 579, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 610, 611, 612, 613, 614, 615, 617, 619, 622, 627, 628, 629, 630, 632, 633, 634, 640, 642, 643, 644, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 661, 663, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 680, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 707, 709, 716, 717, 719, 720, 722, 724, 725, 733, 734, 735, 736, 741, 742, 745, 755, 757, 777, 778, 779, 780, 781, 782, 788, 796, 797, 798, 801, 802, 803, 804, 806, 808, 812, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 851, 852, 853, 854, 855, 858, 861, 865, 868, 872, 874, 875, 876, 879, 880, 881, 882, 883, 885, 893, 894, 896, 897, 898, 901, 903, 906, 907, 909, 910, 911, 912, 913, 917, 930, 933, 937, 938, 940, 945, 946, 947, 949, 957, 961, 964, 970, 973, 978, 979, 980, 981, 982, 983, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1014, 1016, 1018, 1020, 1023, 1024, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "manag": [0, 87, 244, 367, 376, 380, 383, 384, 386, 390, 394, 396, 397, 416, 450, 468, 626, 899, 957, 983, 1005, 1009, 1010, 1014, 1025, 1027, 1044, 1047], "board": 0, "scipi": [0, 6, 14, 18, 20, 42, 47, 48, 54, 55, 79, 80, 83, 97, 99, 102, 104, 125, 153, 171, 174, 187, 191, 203, 248, 252, 253, 259, 262, 270, 274, 285, 290, 295, 304, 318, 319, 327, 328, 368, 376, 377, 380, 382, 384, 388, 391, 394, 395, 396, 399, 402, 408, 409, 414, 417, 450, 451, 452, 453, 457, 462, 463, 496, 503, 508, 532, 534, 535, 541, 544, 581, 582, 585, 586, 588, 589, 610, 611, 648, 649, 653, 657, 658, 659, 663, 666, 667, 668, 669, 670, 672, 674, 676, 677, 678, 680, 684, 687, 691, 692, 695, 759, 762, 777, 778, 779, 780, 791, 792, 802, 810, 812, 827, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 858, 864, 873, 874, 879, 880, 881, 884, 888, 891, 892, 901, 903, 904, 906, 907, 940, 960, 963, 978, 979, 985, 987, 990, 992, 993, 999, 1003, 1004, 1008, 1010, 1019, 1021, 1024, 1025, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "mission": [0, 354, 1014], "foster": [0, 1039], "comput": [0, 4, 6, 7, 11, 13, 14, 21, 27, 38, 40, 42, 43, 47, 53, 55, 58, 59, 61, 62, 71, 73, 80, 81, 82, 83, 97, 106, 116, 120, 121, 124, 125, 126, 127, 128, 149, 150, 153, 158, 160, 161, 165, 171, 172, 173, 174, 177, 181, 182, 185, 186, 187, 188, 189, 190, 201, 203, 205, 209, 215, 218, 219, 223, 226, 231, 233, 234, 236, 240, 241, 243, 258, 260, 262, 263, 264, 265, 269, 271, 273, 285, 287, 289, 291, 292, 294, 295, 298, 307, 317, 321, 322, 328, 330, 340, 344, 348, 353, 354, 355, 362, 369, 370, 371, 376, 377, 379, 382, 387, 388, 389, 391, 394, 395, 396, 398, 399, 403, 404, 405, 406, 407, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 457, 459, 461, 462, 463, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 516, 531, 532, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 574, 582, 585, 586, 589, 590, 591, 593, 594, 599, 600, 603, 604, 605, 606, 609, 610, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 724, 725, 726, 728, 729, 730, 733, 735, 737, 738, 739, 741, 742, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 791, 792, 793, 795, 796, 797, 798, 801, 802, 804, 812, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 857, 858, 859, 866, 867, 870, 871, 876, 877, 878, 879, 880, 881, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 903, 906, 908, 909, 910, 911, 912, 935, 936, 937, 938, 954, 955, 962, 964, 970, 978, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 999, 1001, 1002, 1003, 1004, 1005, 1009, 1010, 1014, 1020, 1021, 1024, 1025, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "particular": [0, 4, 11, 14, 38, 40, 41, 61, 72, 79, 93, 101, 105, 123, 126, 129, 157, 165, 171, 172, 201, 203, 209, 235, 259, 263, 265, 271, 285, 294, 298, 307, 317, 318, 321, 354, 355, 364, 368, 376, 377, 380, 381, 382, 384, 386, 387, 388, 390, 391, 395, 396, 399, 409, 410, 413, 414, 416, 417, 418, 419, 446, 469, 473, 496, 544, 563, 609, 653, 658, 663, 672, 674, 684, 687, 712, 727, 784, 833, 848, 920, 922, 979, 981, 983, 985, 989, 992, 993, 994, 995, 997, 999, 1010, 1014, 1024, 1031, 1034, 1038, 1039, 1040, 1042, 1044, 1045, 1046, 1048], "As": [0, 4, 7, 21, 26, 28, 31, 41, 44, 54, 56, 58, 59, 67, 83, 87, 101, 113, 114, 120, 123, 124, 125, 127, 132, 145, 153, 158, 166, 171, 173, 174, 177, 180, 183, 185, 190, 192, 201, 205, 209, 219, 227, 237, 250, 257, 259, 260, 262, 263, 265, 275, 283, 290, 308, 320, 330, 340, 354, 355, 358, 360, 361, 364, 368, 369, 377, 380, 381, 382, 384, 386, 387, 395, 396, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 446, 493, 554, 562, 566, 619, 632, 655, 656, 672, 674, 687, 734, 757, 763, 843, 844, 845, 847, 849, 880, 978, 983, 985, 986, 988, 989, 990, 992, 996, 999, 1003, 1004, 1005, 1009, 1010, 1014, 1016, 1020, 1023, 1024, 1025, 1031, 1037, 1042, 1047], "fiscal": 0, "home": [0, 8, 12, 51, 115, 133, 157, 159, 161, 162, 193, 210, 248, 304, 322, 345, 359, 377, 380, 390, 399, 408, 486, 499, 679, 1014], "ensur": [0, 21, 42, 58, 83, 93, 113, 119, 120, 174, 201, 223, 257, 265, 303, 362, 364, 368, 369, 382, 384, 386, 387, 388, 397, 399, 400, 407, 409, 410, 413, 421, 469, 533, 534, 541, 611, 627, 696, 705, 781, 788, 822, 894, 921, 922, 938, 944, 955, 985, 986, 989, 999, 1005, 1020, 1033, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "monei": [0, 219, 1014], "when": [0, 4, 9, 10, 11, 13, 21, 25, 26, 27, 28, 35, 40, 41, 44, 57, 61, 68, 71, 72, 73, 79, 81, 82, 87, 96, 99, 100, 101, 104, 116, 119, 122, 123, 124, 126, 129, 133, 134, 135, 147, 153, 165, 170, 171, 172, 173, 174, 180, 181, 185, 190, 192, 194, 198, 201, 203, 205, 206, 217, 230, 231, 232, 236, 237, 244, 248, 250, 258, 261, 262, 263, 264, 265, 269, 271, 272, 280, 285, 287, 288, 291, 292, 293, 307, 309, 311, 312, 313, 314, 317, 318, 319, 320, 321, 324, 329, 330, 332, 340, 343, 344, 348, 353, 354, 355, 358, 364, 368, 369, 370, 376, 377, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 395, 396, 399, 400, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 425, 432, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 482, 483, 484, 485, 489, 490, 491, 492, 496, 500, 501, 502, 503, 504, 505, 508, 509, 510, 512, 515, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 578, 581, 582, 583, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 606, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 700, 701, 702, 704, 705, 707, 708, 712, 713, 716, 726, 727, 728, 729, 731, 733, 734, 737, 745, 747, 750, 753, 754, 756, 760, 762, 766, 767, 768, 770, 773, 777, 780, 781, 782, 783, 784, 786, 787, 788, 790, 791, 792, 794, 796, 797, 798, 801, 802, 803, 804, 812, 816, 817, 820, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 887, 888, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 917, 920, 921, 922, 928, 932, 936, 937, 938, 939, 941, 942, 947, 950, 957, 978, 979, 981, 983, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1010, 1014, 1016, 1022, 1023, 1024, 1025, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "need": [0, 4, 9, 12, 33, 47, 49, 54, 56, 58, 83, 98, 111, 119, 123, 125, 126, 127, 133, 150, 153, 158, 165, 166, 171, 189, 203, 218, 219, 223, 230, 233, 235, 237, 241, 247, 248, 252, 253, 260, 262, 264, 265, 267, 280, 283, 285, 287, 312, 317, 324, 330, 340, 353, 354, 364, 368, 369, 370, 376, 377, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 395, 396, 397, 398, 399, 400, 403, 405, 406, 407, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 425, 437, 441, 445, 449, 465, 503, 541, 551, 572, 582, 583, 588, 589, 590, 591, 627, 635, 638, 639, 640, 642, 649, 666, 668, 671, 676, 679, 692, 720, 721, 722, 723, 780, 784, 796, 797, 798, 801, 802, 812, 813, 814, 822, 830, 833, 841, 842, 858, 861, 864, 868, 873, 874, 878, 896, 903, 906, 946, 978, 979, 981, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 999, 1000, 1002, 1003, 1004, 1005, 1010, 1014, 1022, 1023, 1024, 1025, 1031, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "keep": [0, 6, 13, 43, 76, 99, 101, 119, 149, 165, 170, 171, 172, 173, 174, 185, 201, 202, 203, 209, 219, 252, 257, 260, 311, 312, 320, 328, 340, 353, 354, 358, 364, 368, 369, 374, 382, 386, 395, 396, 407, 409, 410, 411, 412, 413, 414, 432, 450, 465, 482, 483, 484, 485, 493, 494, 534, 540, 541, 544, 547, 554, 556, 558, 560, 562, 565, 568, 570, 595, 598, 600, 603, 611, 634, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 676, 677, 678, 679, 708, 816, 834, 835, 844, 852, 858, 859, 897, 902, 904, 907, 910, 912, 985, 990, 994, 997, 999, 1010, 1014, 1016, 1021, 1023, 1025, 1027, 1031, 1036, 1039, 1040, 1044, 1045, 1047], "while": [0, 4, 7, 8, 10, 12, 18, 21, 25, 28, 35, 38, 40, 44, 45, 49, 56, 63, 67, 71, 74, 76, 93, 100, 101, 113, 116, 119, 120, 124, 130, 133, 150, 154, 159, 161, 162, 165, 170, 171, 172, 173, 177, 180, 182, 185, 190, 195, 201, 203, 205, 217, 230, 233, 234, 237, 238, 248, 249, 253, 256, 257, 261, 262, 263, 265, 269, 270, 271, 272, 273, 275, 287, 307, 308, 309, 312, 313, 314, 317, 320, 323, 324, 337, 340, 353, 355, 362, 364, 369, 374, 375, 376, 377, 378, 381, 382, 384, 386, 387, 388, 390, 391, 394, 396, 397, 403, 407, 408, 409, 412, 413, 414, 416, 417, 418, 419, 420, 421, 444, 464, 467, 468, 483, 485, 496, 521, 532, 552, 557, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 575, 582, 588, 589, 590, 591, 594, 597, 602, 606, 634, 643, 646, 647, 649, 656, 657, 658, 659, 676, 677, 678, 679, 708, 729, 753, 773, 777, 787, 793, 796, 798, 799, 800, 803, 804, 805, 806, 807, 808, 812, 813, 814, 815, 816, 820, 822, 823, 824, 825, 826, 828, 836, 847, 849, 851, 852, 853, 860, 861, 862, 863, 864, 877, 889, 894, 899, 901, 902, 909, 910, 911, 912, 917, 942, 978, 979, 981, 982, 983, 985, 986, 988, 989, 990, 991, 992, 995, 996, 999, 1001, 1004, 1005, 1009, 1010, 1016, 1022, 1023, 1025, 1031, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "complianc": 0, "tax": 0, "regul": 0, "mostli": [0, 47, 71, 201, 219, 312, 390, 394, 396, 414, 416, 417, 521, 778, 779, 1004, 1009, 1014, 1039, 1040, 1041, 1047], "go": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 377, 382, 384, 387, 391, 397, 399, 410, 414, 416, 418, 443, 561, 562, 585, 586, 720, 880, 941, 942, 999, 1005, 1009, 1010, 1016, 1025, 1042], "toward": [0, 27, 28, 64, 83, 120, 126, 132, 153, 173, 180, 205, 206, 227, 240, 348, 382, 396, 409, 448, 452, 462, 676, 678, 695, 875, 988, 1003, 1005, 1008, 1010], "cover": [0, 53, 177, 201, 219, 364, 374, 377, 382, 395, 635, 720, 793, 989, 990, 1008], "travel": 0, "expens": [0, 57, 119, 133, 153, 170, 172, 231, 259, 271, 340, 344, 353, 354, 355, 370, 388, 396, 409, 410, 413, 416, 417, 449, 468, 508, 798, 801, 802, 812, 824, 899, 901, 986, 988, 999, 1004, 1009, 1014, 1025, 1035], "well": [0, 4, 9, 12, 21, 25, 26, 28, 35, 40, 49, 54, 58, 59, 63, 71, 79, 87, 113, 114, 116, 119, 124, 126, 131, 133, 150, 158, 160, 170, 171, 172, 173, 177, 185, 189, 199, 201, 202, 203, 205, 209, 222, 223, 224, 227, 230, 234, 237, 240, 249, 262, 269, 271, 273, 277, 280, 285, 288, 290, 291, 292, 314, 318, 319, 320, 321, 322, 323, 324, 344, 348, 353, 354, 355, 364, 377, 379, 381, 382, 386, 388, 390, 391, 394, 395, 396, 397, 407, 409, 411, 413, 414, 416, 418, 420, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 459, 460, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 700, 721, 722, 723, 784, 787, 791, 794, 796, 797, 798, 801, 802, 812, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 936, 937, 957, 978, 979, 981, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 999, 1002, 1003, 1005, 1006, 1009, 1010, 1014, 1024, 1025, 1031, 1032, 1035, 1037, 1038, 1039, 1042], "budget": [0, 123, 836, 837, 838, 839, 840, 978], "1": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 281, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 325, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 364, 368, 369, 370, 376, 377, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 395, 396, 397, 399, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 427, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 491, 493, 495, 496, 497, 500, 501, 502, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 762, 763, 765, 767, 768, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 921, 922, 927, 932, 935, 936, 938, 940, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 960, 963, 964, 970, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1010, 1011, 1013, 1014, 1016, 1017, 1020, 1021, 1022, 1023, 1024, 1029, 1033], "note": [0, 4, 5, 7, 8, 11, 12, 14, 20, 21, 27, 33, 38, 54, 67, 72, 73, 81, 83, 86, 87, 93, 99, 116, 117, 119, 122, 126, 127, 130, 150, 153, 160, 165, 170, 171, 172, 173, 174, 177, 189, 190, 194, 201, 202, 203, 205, 209, 215, 217, 219, 222, 223, 224, 226, 230, 231, 233, 235, 236, 237, 238, 240, 248, 257, 258, 262, 265, 268, 269, 270, 283, 285, 287, 291, 292, 302, 307, 308, 311, 317, 318, 319, 320, 321, 322, 323, 324, 328, 330, 332, 340, 344, 353, 362, 368, 369, 376, 379, 380, 382, 383, 384, 386, 388, 389, 394, 395, 396, 399, 400, 404, 407, 408, 409, 411, 412, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 432, 434, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 487, 490, 496, 498, 504, 509, 515, 519, 527, 530, 533, 534, 538, 539, 540, 541, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 597, 599, 600, 602, 603, 604, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 629, 630, 632, 633, 635, 636, 638, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 696, 699, 700, 703, 707, 708, 713, 715, 720, 721, 722, 723, 727, 728, 729, 731, 733, 737, 740, 745, 753, 754, 757, 762, 763, 767, 769, 773, 777, 781, 782, 783, 784, 786, 787, 788, 791, 792, 793, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 812, 813, 814, 815, 816, 817, 818, 819, 822, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 914, 917, 927, 928, 937, 938, 949, 952, 957, 964, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 995, 996, 997, 999, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1013, 1016, 1023, 1024, 1025, 1027, 1029, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "regard": [0, 5, 7, 11, 13, 54, 56, 72, 91, 101, 141, 153, 158, 172, 173, 190, 198, 203, 224, 236, 240, 264, 271, 272, 288, 354, 378, 382, 383, 387, 394, 396, 403, 408, 409, 414, 416, 417, 419, 443, 447, 452, 459, 462, 501, 614, 619, 656, 658, 701, 742, 797, 804, 820, 825, 843, 844, 982, 985, 989, 991, 992, 994, 996, 1003, 1004, 1005, 1018, 1025, 1038, 1041], "might": [0, 4, 5, 13, 32, 43, 45, 61, 63, 71, 122, 131, 147, 159, 166, 171, 172, 173, 177, 201, 219, 230, 262, 264, 288, 302, 319, 344, 350, 364, 368, 369, 376, 380, 382, 383, 384, 386, 387, 388, 390, 394, 396, 397, 399, 403, 407, 410, 413, 414, 415, 416, 417, 419, 434, 443, 488, 496, 501, 503, 508, 515, 523, 536, 555, 556, 557, 561, 562, 564, 579, 580, 582, 610, 611, 627, 650, 654, 655, 656, 658, 659, 676, 678, 692, 756, 793, 801, 802, 825, 850, 866, 881, 894, 913, 915, 917, 921, 922, 938, 978, 979, 981, 983, 985, 986, 988, 989, 991, 992, 996, 997, 999, 1004, 1005, 1025, 1032, 1034, 1039, 1040, 1042, 1045, 1046, 1047, 1048], "pai": [0, 219, 382], "dn": [0, 992], "continu": [0, 13, 18, 20, 43, 76, 93, 123, 153, 168, 172, 181, 202, 209, 219, 223, 226, 240, 241, 243, 248, 252, 253, 295, 303, 306, 312, 313, 315, 319, 320, 360, 362, 377, 380, 384, 385, 386, 387, 390, 394, 396, 397, 399, 409, 414, 416, 468, 492, 592, 595, 596, 599, 600, 607, 608, 609, 632, 646, 647, 652, 653, 657, 660, 661, 662, 663, 725, 741, 755, 810, 812, 864, 866, 868, 870, 871, 880, 881, 882, 898, 899, 910, 952, 978, 985, 986, 989, 990, 992, 993, 999, 1005, 1010, 1011, 1013, 1014, 1016, 1023, 1028, 1031, 1033, 1034, 1039, 1044, 1045, 1046], "integr": [0, 43, 72, 147, 161, 190, 303, 319, 380, 384, 385, 386, 388, 390, 396, 399, 414, 419, 446, 715, 754, 785, 964, 988, 996, 1014, 1019, 1032, 1034, 1035, 1043, 1044, 1048], "servic": [0, 4, 231, 240, 382, 386, 1014, 1039], "azur": [0, 382], "cirru": [0, 382], "cl": [0, 8, 12, 17, 389, 396, 911], "circlecl": 0, "free": [0, 5, 56, 158, 159, 166, 200, 252, 307, 376, 381, 382, 383, 390, 394, 399, 417, 452, 609, 671, 857, 907, 978, 981, 985, 989, 1010, 1039], "cpu": [0, 62, 263, 285, 322, 368, 369, 380, 388, 396, 399, 405, 417, 496, 632, 647, 651, 653, 655, 658, 659, 661, 663, 665, 666, 668, 676, 679, 798, 812, 822, 823, 824, 845, 853, 894, 957, 989, 1016, 1020, 1025, 1036, 1045, 1046, 1048], "server": [0, 150, 368, 379, 380, 496, 1039], "anaconda": [0, 369, 380, 386], "inc": [0, 71, 261, 979, 1001, 1014], "storag": [0, 355, 396, 658, 659, 666, 667, 668, 676, 677, 678, 901, 992, 1004, 1034, 1039], "thei": [0, 4, 13, 27, 28, 38, 51, 58, 83, 98, 111, 114, 120, 121, 123, 125, 127, 129, 146, 149, 150, 153, 154, 158, 171, 172, 185, 187, 190, 196, 201, 202, 219, 223, 226, 230, 236, 237, 240, 256, 259, 262, 263, 265, 271, 280, 285, 287, 302, 307, 312, 319, 321, 344, 353, 354, 360, 361, 364, 368, 369, 370, 375, 377, 378, 379, 380, 381, 382, 383, 384, 386, 390, 391, 394, 395, 396, 397, 400, 406, 408, 409, 410, 411, 412, 414, 416, 418, 419, 421, 440, 442, 446, 447, 453, 454, 459, 467, 496, 508, 509, 533, 535, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 588, 591, 597, 610, 619, 629, 643, 646, 647, 652, 658, 659, 660, 661, 662, 670, 672, 676, 678, 681, 687, 761, 762, 764, 767, 773, 788, 798, 812, 830, 836, 837, 838, 839, 840, 858, 861, 863, 869, 880, 881, 903, 906, 909, 910, 911, 912, 916, 978, 979, 981, 983, 985, 988, 989, 990, 991, 992, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1014, 1016, 1020, 1022, 1023, 1025, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047], "stage": [0, 7, 27, 73, 113, 118, 124, 127, 380, 386, 396, 405, 409, 416, 448, 553, 554, 559, 560, 561, 562, 588, 589, 591, 602, 986, 999, 1008, 1039, 1043], "nightli": [0, 369, 385, 386], "build": [0, 4, 7, 18, 33, 44, 56, 68, 75, 100, 113, 122, 124, 130, 136, 147, 149, 164, 165, 167, 168, 171, 209, 267, 270, 280, 283, 285, 303, 304, 308, 313, 314, 355, 364, 368, 369, 370, 378, 384, 385, 386, 387, 388, 396, 399, 402, 408, 409, 413, 416, 417, 442, 490, 501, 503, 524, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 585, 586, 588, 589, 591, 627, 628, 630, 691, 713, 714, 799, 803, 807, 816, 821, 823, 862, 879, 881, 909, 910, 911, 912, 914, 934, 978, 979, 986, 989, 993, 995, 999, 1004, 1005, 1009, 1010, 1011, 1014, 1017, 1019, 1023, 1024, 1031, 1034, 1036, 1037, 1038, 1040, 1043], "applic": [3, 5, 16, 20, 50, 56, 81, 168, 177, 201, 218, 224, 256, 265, 307, 368, 370, 377, 379, 382, 384, 388, 390, 391, 394, 396, 407, 409, 413, 414, 415, 416, 419, 421, 444, 446, 452, 496, 498, 532, 533, 534, 553, 554, 629, 688, 689, 690, 694, 712, 728, 729, 737, 782, 783, 786, 827, 978, 985, 986, 987, 988, 989, 993, 995, 1001, 1005, 1009, 1010, 1011, 1014, 1023, 1025, 1031, 1032, 1037, 1039, 1042], "problem": [3, 4, 5, 6, 11, 13, 14, 15, 27, 38, 55, 56, 58, 67, 96, 113, 116, 119, 121, 126, 127, 153, 168, 173, 177, 180, 185, 187, 190, 194, 195, 201, 203, 205, 218, 219, 224, 230, 231, 238, 240, 243, 260, 262, 267, 271, 272, 276, 280, 283, 285, 290, 297, 311, 320, 324, 337, 340, 344, 348, 349, 353, 354, 362, 364, 368, 377, 378, 379, 380, 381, 383, 384, 387, 388, 391, 394, 396, 407, 408, 409, 411, 413, 415, 416, 417, 418, 419, 420, 421, 444, 447, 449, 450, 452, 457, 462, 465, 478, 503, 508, 509, 515, 516, 517, 518, 523, 524, 528, 531, 533, 537, 539, 542, 543, 544, 545, 546, 547, 548, 551, 552, 557, 561, 564, 567, 571, 573, 589, 610, 631, 643, 648, 650, 652, 654, 655, 656, 657, 658, 659, 664, 665, 666, 668, 669, 672, 673, 674, 675, 676, 677, 679, 680, 685, 686, 687, 688, 689, 691, 693, 695, 708, 716, 728, 729, 734, 737, 738, 782, 783, 786, 787, 796, 797, 799, 800, 801, 802, 803, 805, 806, 807, 808, 813, 814, 815, 816, 817, 818, 821, 829, 830, 831, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 867, 868, 874, 882, 885, 891, 892, 901, 902, 909, 911, 927, 938, 979, 980, 984, 985, 986, 988, 989, 990, 991, 992, 993, 997, 999, 1003, 1006, 1010, 1012, 1014, 1017, 1018, 1019, 1025, 1026, 1027, 1031, 1032, 1034, 1036, 1037, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "medium": [3, 168, 236, 277, 314, 340, 409, 643, 875, 982, 985], "size": [3, 4, 5, 6, 8, 11, 12, 13, 14, 25, 32, 34, 38, 40, 41, 43, 45, 47, 48, 53, 55, 56, 58, 59, 61, 62, 63, 67, 68, 74, 79, 80, 81, 82, 83, 86, 87, 93, 96, 97, 98, 99, 100, 102, 104, 106, 116, 125, 126, 129, 130, 146, 153, 155, 156, 159, 160, 168, 170, 172, 173, 180, 181, 182, 183, 187, 191, 196, 199, 202, 203, 204, 207, 214, 215, 222, 227, 230, 233, 234, 235, 236, 237, 239, 240, 249, 256, 258, 260, 262, 264, 265, 267, 268, 269, 280, 291, 292, 293, 301, 304, 308, 309, 310, 311, 314, 318, 321, 323, 324, 328, 332, 336, 338, 339, 340, 348, 350, 353, 354, 355, 358, 368, 369, 370, 377, 378, 382, 387, 391, 394, 395, 396, 399, 400, 406, 407, 408, 411, 413, 414, 417, 419, 420, 444, 445, 446, 448, 449, 450, 457, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 493, 494, 495, 515, 527, 534, 536, 538, 540, 547, 557, 558, 559, 560, 561, 562, 564, 565, 583, 587, 588, 591, 594, 632, 633, 643, 657, 666, 667, 679, 683, 692, 695, 705, 719, 737, 739, 742, 780, 792, 800, 803, 804, 808, 815, 818, 819, 822, 825, 827, 836, 837, 838, 840, 843, 844, 845, 846, 847, 849, 851, 852, 853, 858, 859, 876, 878, 890, 895, 899, 903, 904, 905, 906, 907, 909, 910, 911, 912, 915, 937, 941, 942, 952, 953, 955, 964, 979, 981, 982, 984, 985, 986, 988, 989, 990, 991, 992, 993, 996, 999, 1001, 1003, 1004, 1005, 1014, 1019, 1021, 1023, 1024, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1046, 1047], "interact": [3, 127, 168, 201, 227, 232, 263, 318, 381, 383, 384, 386, 388, 394, 396, 397, 410, 559, 560, 561, 562, 632, 633, 876, 880, 978, 981, 985, 986, 987, 994, 996, 999, 1008, 1010, 1033, 1038, 1045, 1046], "user": [3, 26, 56, 70, 96, 119, 162, 168, 171, 189, 222, 237, 252, 259, 269, 271, 280, 285, 291, 292, 295, 313, 317, 318, 319, 320, 321, 322, 323, 324, 364, 368, 369, 371, 376, 380, 381, 382, 384, 386, 388, 389, 390, 394, 395, 396, 399, 400, 403, 407, 408, 409, 410, 411, 413, 414, 416, 417, 418, 420, 421, 422, 423, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 698, 699, 700, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 915, 934, 938, 978, 979, 985, 986, 988, 989, 990, 992, 999, 1003, 1007, 1009, 1010, 1014, 1018, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "interfac": [3, 113, 168, 375, 376, 383, 384, 391, 394, 396, 413, 419, 420, 441, 445, 450, 496, 553, 699, 798, 801, 802, 812, 861, 862, 887, 974, 978, 992, 1004, 1009, 1010, 1014, 1031, 1033, 1036, 1037, 1039, 1040, 1045, 1047], "compress": [3, 11, 16, 18, 49, 67, 168, 280, 307, 377, 409, 414, 417, 418, 652, 672, 692, 831, 874, 960, 963, 985, 999, 1011, 1024, 1031, 1040], "sens": [3, 4, 13, 16, 18, 26, 56, 67, 159, 168, 171, 177, 234, 237, 307, 313, 328, 340, 353, 364, 368, 382, 383, 396, 409, 411, 413, 418, 462, 469, 470, 471, 472, 473, 474, 475, 476, 652, 655, 656, 672, 799, 809, 898, 983, 985, 992, 993, 995, 999, 1002, 1011], "tomographi": [3, 16, 18, 67, 168, 652, 672, 985, 1011], "reconstruct": [3, 16, 18, 21, 67, 96, 97, 101, 168, 200, 225, 226, 321, 414, 417, 482, 483, 484, 531, 533, 535, 537, 538, 539, 540, 542, 543, 548, 583, 587, 652, 672, 688, 689, 693, 893, 894, 985, 986, 1011, 1045], "l1": [3, 7, 16, 18, 31, 41, 67, 83, 86, 168, 170, 179, 180, 186, 187, 188, 189, 190, 195, 196, 205, 206, 212, 216, 220, 232, 263, 285, 303, 320, 391, 394, 408, 409, 411, 414, 441, 445, 450, 457, 464, 469, 470, 471, 472, 473, 474, 475, 476, 478, 496, 502, 504, 531, 537, 538, 539, 540, 542, 543, 547, 548, 558, 565, 589, 590, 591, 597, 644, 645, 646, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 670, 672, 676, 677, 678, 679, 681, 688, 734, 761, 767, 772, 777, 778, 779, 784, 812, 819, 827, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 873, 881, 888, 901, 902, 908, 910, 912, 924, 971, 985, 987, 989, 992, 999, 1003, 1004, 1005, 1011, 1023, 1036, 1038, 1044, 1047], "prior": [3, 7, 16, 18, 47, 48, 58, 66, 67, 68, 93, 152, 153, 154, 159, 163, 166, 168, 173, 180, 182, 185, 246, 248, 252, 253, 254, 262, 273, 295, 330, 382, 384, 386, 396, 399, 409, 412, 414, 416, 419, 465, 523, 536, 548, 549, 550, 551, 559, 585, 586, 611, 613, 614, 615, 619, 622, 623, 630, 644, 645, 646, 647, 651, 652, 654, 655, 656, 660, 661, 662, 672, 678, 681, 716, 796, 836, 837, 838, 839, 840, 861, 862, 876, 903, 906, 956, 978, 981, 983, 985, 988, 989, 991, 997, 1005, 1006, 1011, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1047], "lasso": [3, 16, 18, 67, 106, 133, 139, 168, 171, 179, 182, 192, 194, 200, 206, 209, 220, 234, 252, 275, 320, 324, 348, 368, 394, 411, 412, 414, 416, 417, 418, 471, 472, 478, 501, 524, 531, 537, 539, 542, 543, 545, 546, 548, 597, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 670, 672, 678, 681, 682, 683, 684, 685, 686, 721, 722, 723, 822, 823, 824, 862, 881, 978, 989, 1003, 1011, 1012, 1020, 1023, 1027, 1031, 1035, 1036, 1037, 1039, 1040, 1042, 1044, 1045], "recognit": [3, 9, 15, 16, 49, 96, 168, 236, 239, 304, 312, 353, 375, 387, 414, 416, 418, 494, 502, 532, 534, 541, 697, 708, 713, 740, 768, 787, 788, 796, 812, 827, 881, 906, 981, 985, 989, 990, 994, 1004, 1006, 1011, 1016, 1019, 1027, 1031], "eigenfac": [3, 15, 16, 49, 168, 236, 239, 353, 377, 414, 494, 541, 697, 713, 812, 827, 881, 906, 1006, 1011, 1019, 1031], "svm": [3, 7, 9, 10, 11, 15, 16, 17, 26, 28, 31, 32, 33, 49, 71, 73, 75, 96, 111, 122, 131, 134, 138, 140, 141, 143, 144, 148, 149, 150, 151, 155, 157, 161, 168, 179, 182, 184, 193, 194, 210, 211, 212, 213, 214, 220, 230, 236, 238, 239, 242, 243, 251, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 272, 273, 276, 277, 280, 291, 292, 296, 297, 298, 301, 303, 309, 310, 317, 319, 326, 330, 331, 333, 335, 338, 347, 348, 351, 353, 368, 371, 377, 384, 388, 396, 403, 410, 413, 414, 416, 418, 437, 494, 504, 512, 515, 541, 555, 556, 563, 567, 568, 577, 593, 594, 599, 600, 605, 631, 639, 643, 668, 676, 677, 678, 689, 697, 698, 700, 702, 713, 734, 741, 760, 798, 812, 818, 823, 824, 827, 829, 830, 847, 861, 862, 874, 876, 881, 897, 898, 977, 978, 981, 984, 986, 987, 989, 990, 994, 1002, 1004, 1006, 1011, 1012, 1016, 1019, 1020, 1021, 1025, 1027, 1028, 1031, 1032, 1033, 1035, 1036, 1037, 1038], "imag": [3, 6, 14, 16, 21, 22, 33, 37, 40, 41, 42, 43, 45, 47, 49, 52, 55, 57, 59, 63, 68, 69, 71, 90, 95, 96, 101, 106, 108, 121, 148, 150, 157, 168, 192, 223, 232, 235, 239, 260, 294, 303, 304, 318, 327, 328, 353, 354, 374, 375, 377, 379, 382, 387, 390, 394, 396, 399, 402, 409, 414, 441, 445, 452, 462, 493, 494, 495, 496, 502, 503, 506, 507, 534, 535, 537, 541, 607, 608, 691, 697, 737, 827, 871, 985, 989, 990, 992, 994, 1001, 1005, 1009, 1011, 1014, 1016, 1021, 1022, 1024, 1025, 1027, 1031, 1034, 1039, 1040, 1044, 1046, 1047], "denois": [3, 16, 49, 51, 52, 54, 67, 95, 101, 106, 108, 168, 414, 496, 535, 537, 541, 584, 587, 827, 871, 1011], "kernel": [3, 6, 9, 10, 11, 16, 17, 31, 32, 52, 58, 67, 75, 87, 95, 97, 102, 106, 108, 111, 134, 140, 142, 148, 152, 154, 155, 156, 157, 160, 163, 165, 178, 183, 184, 202, 210, 215, 229, 230, 238, 242, 245, 256, 260, 262, 264, 267, 268, 272, 276, 277, 286, 291, 292, 296, 299, 312, 314, 320, 329, 332, 335, 337, 338, 340, 341, 342, 343, 345, 346, 349, 351, 364, 368, 371, 374, 384, 394, 396, 407, 409, 410, 413, 416, 417, 432, 440, 448, 452, 461, 462, 465, 482, 483, 484, 491, 496, 498, 502, 504, 514, 533, 534, 535, 541, 544, 554, 556, 558, 560, 562, 565, 568, 570, 593, 594, 610, 611, 631, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 676, 677, 678, 679, 688, 690, 691, 692, 695, 734, 757, 758, 760, 765, 766, 773, 774, 775, 776, 798, 804, 809, 812, 827, 829, 834, 835, 841, 842, 844, 846, 852, 859, 861, 862, 867, 871, 873, 874, 876, 881, 896, 897, 901, 902, 903, 904, 905, 906, 907, 910, 912, 978, 984, 985, 986, 989, 990, 992, 995, 1002, 1003, 1011, 1012, 1016, 1020, 1021, 1026, 1027, 1031, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "pca": [3, 6, 16, 34, 46, 52, 67, 70, 71, 73, 75, 76, 77, 79, 87, 95, 98, 106, 107, 108, 141, 168, 198, 223, 225, 233, 235, 238, 242, 261, 270, 273, 274, 285, 289, 294, 304, 320, 364, 374, 384, 396, 405, 408, 409, 410, 415, 425, 473, 476, 496, 502, 504, 514, 532, 533, 534, 535, 539, 540, 543, 544, 549, 643, 658, 688, 690, 692, 798, 823, 827, 850, 857, 860, 861, 863, 871, 879, 881, 981, 983, 986, 992, 999, 1003, 1005, 1011, 1021, 1026, 1027, 1031, 1033, 1034, 1035, 1037, 1038, 1039, 1042, 1044, 1045, 1046, 1048], "lag": [3, 4, 16, 126, 168, 201, 203, 219, 262, 266, 496, 562, 701, 741, 744, 745, 747, 789, 819, 823, 824, 827, 1011], "featur": [3, 5, 6, 7, 8, 10, 11, 12, 15, 16, 20, 21, 26, 27, 28, 31, 32, 33, 34, 37, 43, 46, 48, 51, 59, 61, 64, 69, 70, 71, 72, 73, 74, 76, 77, 81, 82, 86, 87, 90, 91, 92, 93, 96, 98, 100, 102, 103, 104, 105, 107, 112, 117, 119, 122, 126, 128, 132, 133, 134, 135, 136, 137, 139, 140, 145, 147, 151, 153, 154, 155, 158, 159, 161, 165, 166, 169, 170, 171, 172, 175, 179, 181, 183, 184, 185, 187, 188, 190, 191, 197, 200, 201, 202, 203, 205, 206, 208, 210, 216, 217, 218, 220, 223, 229, 232, 234, 237, 239, 240, 243, 244, 245, 255, 256, 257, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 280, 283, 288, 289, 290, 293, 294, 295, 296, 300, 301, 303, 305, 306, 307, 310, 314, 315, 316, 318, 321, 322, 323, 324, 327, 328, 330, 331, 335, 336, 337, 340, 344, 348, 351, 352, 355, 356, 359, 360, 361, 362, 364, 371, 374, 375, 376, 377, 378, 379, 380, 384, 385, 387, 389, 390, 391, 394, 395, 396, 397, 398, 399, 403, 407, 409, 411, 412, 413, 414, 415, 419, 420, 421, 422, 425, 430, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 579, 580, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 618, 619, 620, 622, 623, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 685, 686, 687, 688, 689, 690, 691, 692, 697, 701, 702, 703, 713, 721, 722, 723, 740, 741, 744, 745, 747, 757, 758, 762, 763, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 780, 784, 787, 789, 791, 792, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 921, 922, 935, 954, 964, 965, 966, 970, 978, 981, 983, 984, 985, 986, 987, 989, 990, 991, 992, 993, 994, 995, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1021, 1022, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "seri": [3, 4, 12, 16, 21, 83, 120, 126, 168, 170, 173, 174, 183, 201, 203, 205, 219, 222, 244, 262, 266, 267, 314, 321, 327, 374, 377, 387, 396, 409, 489, 490, 491, 492, 496, 500, 501, 502, 504, 505, 510, 541, 562, 690, 694, 701, 741, 744, 745, 747, 789, 819, 823, 824, 827, 917, 980, 985, 986, 990, 992, 1003, 1009, 1011, 1034, 1037, 1038, 1039, 1043, 1046], "forecast": [3, 4, 16, 126, 152, 153, 159, 160, 163, 168, 201, 203, 219, 262, 266, 407, 419, 496, 562, 611, 615, 622, 623, 625, 701, 741, 744, 745, 747, 789, 819, 823, 824, 827, 989, 1009, 1011], "libsvm": [3, 16, 168, 177, 338, 375, 388, 487, 508, 563, 901, 902, 903, 904, 905, 906, 907, 1004, 1011, 1027, 1031, 1033, 1039, 1042, 1045], "gui": [3, 16, 168, 487, 905, 906, 1011, 1023, 1031, 1032, 1042], "model": [3, 5, 6, 9, 10, 12, 14, 15, 16, 17, 21, 22, 25, 26, 28, 35, 40, 41, 42, 49, 50, 55, 56, 57, 59, 62, 70, 72, 73, 74, 77, 79, 81, 83, 87, 95, 96, 106, 107, 108, 112, 113, 116, 118, 122, 125, 126, 128, 130, 132, 133, 136, 137, 139, 140, 142, 144, 146, 147, 151, 156, 157, 159, 160, 161, 162, 166, 169, 170, 174, 175, 181, 183, 186, 187, 188, 191, 192, 194, 196, 197, 198, 202, 203, 205, 206, 207, 209, 213, 214, 216, 217, 218, 220, 230, 233, 238, 247, 249, 250, 251, 254, 256, 257, 258, 260, 263, 265, 266, 267, 268, 270, 271, 275, 276, 278, 280, 285, 287, 288, 289, 291, 294, 298, 308, 311, 313, 314, 317, 319, 321, 322, 323, 327, 328, 337, 339, 340, 341, 342, 343, 345, 346, 348, 350, 354, 355, 359, 360, 361, 364, 371, 374, 376, 377, 385, 388, 396, 398, 400, 405, 406, 407, 409, 410, 412, 414, 415, 416, 417, 418, 419, 428, 432, 434, 437, 442, 449, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 489, 490, 496, 498, 500, 501, 502, 503, 509, 522, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 588, 589, 591, 593, 594, 597, 602, 606, 609, 610, 611, 615, 627, 632, 633, 634, 635, 637, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 701, 706, 711, 721, 722, 723, 733, 734, 740, 749, 752, 784, 787, 788, 791, 796, 797, 798, 801, 802, 803, 804, 812, 813, 814, 815, 819, 820, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 846, 847, 848, 850, 852, 857, 858, 859, 861, 862, 864, 866, 868, 873, 874, 876, 877, 878, 880, 881, 882, 886, 887, 889, 890, 891, 892, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 916, 979, 981, 982, 983, 986, 987, 990, 992, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1009, 1010, 1011, 1012, 1014, 1017, 1019, 1021, 1025, 1026, 1027, 1031, 1032, 1033, 1034, 1035, 1036], "complex": [3, 9, 10, 15, 16, 17, 21, 73, 119, 133, 149, 153, 158, 165, 168, 205, 215, 218, 229, 236, 237, 245, 255, 260, 263, 266, 271, 278, 308, 317, 320, 321, 326, 333, 340, 344, 355, 357, 362, 363, 378, 382, 387, 394, 410, 414, 416, 420, 440, 444, 447, 448, 450, 467, 489, 500, 501, 502, 514, 534, 541, 551, 557, 558, 559, 560, 562, 564, 565, 604, 630, 638, 656, 658, 676, 677, 733, 749, 798, 827, 829, 857, 861, 862, 866, 874, 881, 897, 901, 904, 907, 909, 910, 911, 912, 978, 979, 981, 982, 984, 986, 988, 990, 995, 999, 1002, 1010, 1011, 1012, 1014, 1027, 1032, 1034, 1040, 1041, 1044], "influenc": [3, 9, 13, 16, 81, 82, 113, 168, 171, 183, 236, 247, 270, 307, 314, 340, 344, 348, 364, 370, 411, 414, 416, 432, 440, 454, 465, 482, 483, 484, 489, 501, 554, 556, 558, 560, 562, 565, 568, 570, 611, 628, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 676, 678, 679, 733, 749, 827, 834, 835, 843, 844, 851, 852, 859, 878, 879, 890, 902, 904, 907, 910, 912, 921, 978, 983, 984, 985, 992, 995, 999, 1003, 1004, 1011, 1014, 1034, 1039, 1040], "core": [3, 10, 16, 50, 56, 66, 72, 113, 119, 121, 122, 168, 171, 172, 322, 367, 369, 371, 380, 382, 385, 390, 396, 399, 409, 414, 416, 417, 420, 444, 446, 449, 450, 455, 457, 499, 538, 589, 594, 658, 659, 666, 668, 676, 836, 837, 838, 839, 840, 845, 853, 985, 992, 995, 1004, 1007, 1010, 1011, 1012, 1014, 1023, 1025, 1027, 1033, 1035, 1036, 1038, 1041, 1045, 1046, 1047], "classif": [3, 6, 7, 10, 15, 16, 17, 20, 24, 25, 26, 28, 29, 32, 35, 36, 46, 72, 73, 74, 79, 80, 86, 89, 93, 94, 99, 113, 115, 117, 119, 120, 121, 122, 127, 128, 129, 131, 134, 135, 138, 142, 143, 145, 146, 147, 148, 149, 150, 152, 158, 159, 160, 163, 171, 172, 177, 179, 191, 192, 193, 194, 201, 209, 211, 212, 213, 214, 216, 220, 229, 231, 235, 236, 240, 243, 245, 250, 251, 255, 256, 259, 260, 261, 262, 263, 271, 276, 277, 278, 280, 282, 284, 286, 287, 293, 294, 295, 297, 298, 299, 300, 301, 303, 305, 309, 310, 311, 312, 327, 332, 333, 335, 336, 340, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 364, 368, 370, 371, 375, 376, 377, 379, 384, 387, 391, 395, 396, 404, 407, 409, 410, 413, 414, 417, 418, 426, 437, 469, 475, 482, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 499, 500, 502, 503, 504, 510, 512, 514, 515, 519, 520, 522, 523, 541, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 569, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 606, 609, 610, 611, 613, 614, 622, 631, 632, 633, 643, 658, 659, 666, 668, 674, 675, 676, 697, 703, 705, 708, 712, 713, 715, 716, 718, 725, 726, 728, 729, 733, 734, 737, 740, 741, 742, 753, 755, 757, 758, 760, 781, 782, 783, 785, 786, 787, 788, 793, 795, 798, 799, 801, 802, 803, 804, 812, 816, 817, 820, 821, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 843, 848, 850, 851, 857, 858, 859, 861, 865, 868, 873, 874, 875, 876, 881, 882, 885, 887, 896, 897, 898, 901, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 924, 927, 935, 978, 979, 981, 982, 983, 986, 987, 991, 994, 996, 997, 999, 1000, 1002, 1008, 1009, 1011, 1012, 1013, 1014, 1016, 1017, 1021, 1022, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "text": [3, 6, 7, 10, 11, 12, 15, 16, 17, 18, 20, 32, 33, 38, 41, 45, 54, 58, 59, 61, 62, 63, 65, 71, 81, 82, 119, 124, 174, 181, 195, 196, 230, 234, 241, 242, 247, 249, 255, 256, 261, 266, 268, 269, 273, 278, 290, 293, 295, 301, 309, 320, 326, 328, 333, 347, 356, 358, 368, 370, 371, 374, 375, 376, 382, 387, 394, 396, 407, 409, 410, 412, 413, 414, 416, 419, 447, 449, 468, 487, 488, 489, 499, 503, 508, 521, 536, 544, 564, 615, 625, 652, 658, 666, 668, 674, 676, 697, 703, 705, 707, 713, 717, 728, 736, 792, 794, 798, 812, 827, 836, 838, 840, 843, 848, 861, 862, 864, 865, 873, 897, 898, 899, 901, 913, 914, 915, 935, 978, 981, 985, 987, 989, 990, 991, 993, 996, 999, 1001, 1003, 1004, 1008, 1010, 1011, 1014, 1017, 1027, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "document": [3, 6, 7, 10, 12, 15, 16, 18, 19, 22, 23, 27, 32, 38, 46, 52, 58, 59, 61, 62, 65, 71, 72, 73, 74, 90, 91, 93, 96, 118, 120, 121, 129, 130, 133, 136, 147, 158, 171, 172, 173, 182, 184, 198, 199, 216, 231, 232, 233, 234, 237, 238, 240, 241, 242, 243, 244, 252, 256, 260, 262, 263, 269, 274, 303, 304, 313, 318, 321, 322, 324, 329, 331, 345, 348, 355, 356, 362, 368, 369, 370, 371, 376, 377, 378, 380, 381, 383, 384, 385, 386, 387, 388, 390, 394, 396, 399, 400, 403, 406, 408, 409, 414, 417, 420, 444, 447, 448, 449, 450, 453, 457, 464, 488, 489, 499, 501, 511, 521, 523, 536, 544, 564, 588, 589, 590, 591, 594, 604, 631, 639, 643, 658, 659, 666, 668, 673, 674, 675, 676, 696, 697, 699, 703, 705, 711, 717, 736, 757, 758, 768, 777, 778, 779, 792, 794, 798, 801, 802, 804, 812, 820, 823, 825, 828, 831, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 862, 873, 901, 906, 917, 920, 922, 935, 955, 978, 985, 987, 989, 990, 991, 992, 993, 997, 1003, 1006, 1007, 1008, 1011, 1014, 1018, 1023, 1025, 1032, 1033, 1037], "outlier": [3, 11, 16, 35, 45, 55, 81, 82, 83, 126, 129, 153, 168, 179, 181, 199, 203, 204, 205, 206, 207, 215, 220, 229, 245, 286, 299, 306, 311, 314, 315, 339, 350, 377, 396, 409, 411, 416, 431, 446, 464, 466, 469, 470, 473, 474, 475, 476, 490, 491, 492, 496, 510, 512, 522, 524, 563, 631, 639, 649, 670, 671, 672, 676, 677, 678, 679, 692, 702, 827, 847, 851, 862, 870, 871, 873, 874, 875, 877, 878, 879, 880, 881, 886, 887, 888, 889, 890, 891, 892, 904, 905, 907, 989, 1003, 1004, 1009, 1011, 1012, 1026, 1027, 1031, 1036, 1037, 1039], "detect": [3, 8, 10, 11, 16, 21, 35, 64, 66, 81, 82, 83, 120, 123, 129, 168, 182, 205, 215, 218, 229, 243, 245, 255, 262, 265, 271, 272, 278, 286, 299, 307, 313, 339, 377, 380, 382, 386, 394, 396, 407, 408, 409, 411, 413, 417, 431, 446, 449, 464, 466, 469, 470, 473, 474, 475, 476, 488, 489, 491, 492, 496, 510, 512, 515, 522, 537, 538, 539, 546, 563, 564, 588, 591, 596, 631, 639, 677, 698, 702, 726, 788, 827, 847, 851, 862, 871, 874, 875, 879, 880, 881, 901, 905, 981, 985, 1009, 1010, 1011, 1012, 1014, 1020, 1025, 1026, 1027, 1031, 1034, 1037, 1038, 1039, 1041, 1043, 1044, 1046, 1047], "set": [3, 4, 5, 6, 7, 8, 11, 13, 14, 16, 17, 21, 26, 27, 28, 31, 32, 35, 38, 42, 43, 45, 46, 47, 50, 51, 54, 55, 56, 58, 59, 61, 63, 65, 66, 67, 71, 72, 74, 81, 82, 83, 87, 91, 95, 96, 100, 101, 102, 105, 108, 111, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 135, 139, 146, 147, 150, 153, 159, 160, 161, 162, 168, 170, 171, 172, 173, 174, 180, 185, 186, 189, 190, 192, 194, 196, 197, 198, 200, 201, 202, 203, 206, 209, 214, 215, 219, 222, 223, 224, 230, 231, 232, 233, 235, 236, 237, 240, 244, 247, 249, 251, 252, 256, 257, 260, 262, 263, 264, 265, 266, 267, 270, 271, 272, 273, 276, 280, 283, 287, 291, 292, 293, 294, 295, 298, 302, 303, 304, 307, 309, 311, 312, 313, 314, 317, 319, 320, 324, 327, 328, 331, 332, 337, 339, 342, 344, 348, 353, 354, 355, 360, 361, 364, 368, 369, 370, 371, 374, 375, 377, 379, 380, 382, 384, 386, 387, 389, 390, 395, 396, 397, 399, 400, 405, 406, 407, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 423, 426, 433, 434, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 488, 489, 493, 495, 496, 497, 499, 502, 503, 504, 508, 509, 510, 515, 523, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 697, 698, 699, 700, 701, 702, 703, 713, 714, 719, 721, 722, 725, 726, 727, 728, 729, 730, 733, 737, 739, 740, 744, 745, 747, 749, 750, 752, 755, 778, 779, 781, 782, 783, 784, 786, 788, 789, 790, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 886, 887, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 921, 922, 932, 933, 938, 942, 945, 946, 957, 959, 960, 963, 964, 970, 973, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1017, 1019, 1020, 1021, 1024, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "predict": [3, 6, 7, 8, 11, 16, 24, 26, 27, 28, 31, 33, 35, 38, 45, 49, 57, 58, 59, 63, 71, 72, 73, 74, 76, 86, 107, 111, 112, 113, 115, 116, 117, 119, 121, 122, 123, 124, 127, 129, 130, 131, 132, 133, 134, 135, 137, 141, 142, 147, 150, 152, 153, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 168, 171, 172, 173, 174, 177, 180, 183, 184, 185, 193, 196, 197, 198, 199, 202, 203, 204, 205, 207, 208, 209, 210, 215, 216, 218, 219, 230, 231, 233, 235, 237, 239, 248, 249, 250, 251, 252, 253, 255, 256, 260, 262, 264, 265, 268, 271, 272, 276, 278, 280, 283, 288, 291, 292, 293, 296, 297, 304, 307, 308, 312, 313, 317, 318, 319, 320, 321, 323, 324, 328, 330, 331, 332, 336, 337, 339, 340, 344, 346, 347, 348, 349, 353, 354, 359, 360, 361, 362, 364, 367, 369, 371, 374, 377, 379, 382, 384, 389, 391, 396, 398, 400, 403, 404, 405, 407, 408, 409, 410, 414, 416, 417, 418, 426, 432, 437, 438, 439, 440, 442, 443, 444, 447, 448, 449, 465, 469, 482, 483, 484, 487, 501, 508, 524, 534, 541, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 582, 593, 594, 602, 606, 610, 611, 613, 614, 615, 616, 622, 625, 627, 628, 630, 631, 632, 633, 634, 635, 637, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 697, 698, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 712, 714, 715, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 733, 734, 737, 740, 741, 742, 745, 747, 749, 751, 755, 781, 782, 783, 784, 785, 786, 787, 788, 792, 793, 795, 796, 797, 798, 801, 802, 804, 812, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 847, 848, 851, 852, 858, 859, 861, 868, 881, 882, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 963, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 990, 991, 992, 993, 995, 996, 997, 999, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1013, 1014, 1017, 1019, 1020, 1021, 1025, 1027, 1028, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "latenc": [3, 7, 8, 16, 168, 367, 524, 565, 672, 678, 827, 881, 907, 954, 963, 1009, 1011, 1027, 1034], "speci": [3, 16, 91, 168, 240, 286, 299, 353, 377, 415, 498, 706, 788, 846, 905, 916, 989, 995, 1011, 1031], "distribut": [3, 4, 8, 9, 10, 13, 16, 21, 28, 35, 38, 40, 45, 53, 54, 56, 58, 63, 76, 80, 81, 82, 87, 93, 113, 115, 126, 129, 145, 150, 153, 162, 168, 170, 171, 174, 177, 180, 201, 203, 205, 224, 226, 230, 234, 240, 247, 252, 253, 258, 262, 268, 270, 280, 286, 290, 299, 306, 307, 309, 312, 315, 323, 327, 328, 345, 348, 353, 368, 369, 377, 378, 379, 380, 382, 383, 386, 387, 388, 396, 403, 407, 408, 409, 411, 413, 414, 415, 421, 447, 449, 469, 470, 471, 472, 473, 474, 475, 476, 488, 498, 503, 515, 516, 517, 518, 519, 523, 532, 533, 536, 550, 551, 552, 563, 611, 625, 640, 642, 644, 645, 648, 658, 659, 669, 679, 680, 688, 689, 690, 692, 706, 708, 723, 751, 788, 796, 797, 802, 803, 810, 812, 816, 817, 827, 837, 840, 846, 850, 857, 864, 877, 878, 879, 880, 881, 889, 890, 891, 896, 897, 905, 916, 940, 957, 978, 983, 985, 987, 988, 989, 991, 992, 994, 995, 1001, 1002, 1007, 1009, 1010, 1011, 1016, 1020, 1024, 1026, 1027, 1031, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047], "relat": [3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 169, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 371, 377, 378, 381, 385, 386, 387, 389, 390, 391, 394, 396, 397, 398, 400, 403, 408, 409, 410, 411, 412, 413, 414, 416, 419, 450, 464, 469, 496, 549, 550, 562, 563, 639, 673, 677, 692, 701, 722, 742, 819, 824, 859, 860, 862, 865, 866, 871, 874, 876, 877, 880, 889, 905, 978, 981, 983, 989, 990, 992, 993, 996, 999, 1004, 1005, 1006, 1007, 1010, 1011, 1027, 1031, 1035, 1036, 1037, 1039, 1040, 1043, 1044, 1047], "engin": [3, 16, 41, 118, 123, 158, 168, 171, 172, 202, 368, 376, 379, 409, 415, 417, 464, 496, 562, 639, 673, 701, 819, 824, 859, 860, 862, 865, 866, 871, 874, 876, 880, 979, 981, 989, 999, 1007, 1011, 1037], "topic": [3, 6, 7, 8, 16, 71, 168, 227, 321, 353, 354, 355, 377, 378, 413, 414, 417, 488, 497, 536, 538, 540, 547, 588, 591, 985, 990, 1009, 1010, 1011, 1025, 1036, 1038], "extract": [3, 4, 6, 8, 11, 12, 16, 18, 51, 56, 70, 71, 72, 73, 77, 86, 96, 119, 146, 150, 168, 216, 227, 255, 261, 266, 267, 268, 270, 278, 304, 321, 331, 343, 353, 355, 364, 371, 374, 377, 379, 384, 388, 391, 394, 409, 410, 413, 414, 450, 452, 455, 456, 462, 464, 488, 489, 493, 494, 503, 504, 531, 534, 535, 536, 537, 538, 539, 540, 541, 543, 545, 546, 547, 583, 584, 588, 589, 591, 593, 594, 597, 599, 631, 718, 787, 798, 812, 838, 860, 861, 906, 938, 946, 953, 978, 986, 990, 994, 999, 1003, 1009, 1011, 1014, 1017, 1021, 1022, 1027, 1031, 1032, 1040, 1043], "neg": [3, 4, 6, 16, 17, 25, 61, 76, 79, 87, 119, 125, 126, 130, 168, 170, 171, 179, 191, 197, 199, 201, 219, 220, 227, 251, 252, 259, 262, 265, 269, 271, 272, 285, 307, 311, 321, 353, 388, 396, 397, 409, 413, 416, 417, 418, 420, 421, 432, 440, 444, 452, 465, 469, 482, 483, 484, 488, 531, 533, 535, 536, 537, 538, 540, 542, 544, 547, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 588, 591, 592, 595, 596, 598, 599, 600, 602, 604, 605, 606, 607, 608, 609, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 677, 678, 679, 680, 687, 698, 699, 704, 705, 712, 713, 715, 718, 719, 721, 722, 723, 726, 728, 729, 730, 734, 737, 740, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 781, 782, 783, 784, 786, 789, 790, 792, 796, 797, 804, 820, 822, 827, 834, 835, 844, 847, 852, 859, 868, 877, 879, 880, 885, 889, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 936, 938, 957, 987, 989, 990, 992, 993, 994, 995, 1003, 1004, 1011, 1025, 1026, 1027, 1031, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "matrix": [3, 6, 7, 9, 13, 14, 16, 20, 21, 22, 33, 35, 40, 42, 45, 55, 63, 71, 80, 81, 82, 83, 86, 96, 97, 98, 107, 160, 168, 174, 179, 187, 202, 206, 220, 227, 231, 234, 235, 237, 252, 255, 269, 278, 297, 303, 321, 327, 328, 344, 353, 354, 355, 362, 368, 371, 377, 378, 379, 382, 384, 388, 391, 394, 395, 396, 406, 410, 411, 412, 417, 418, 419, 420, 421, 431, 432, 438, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 454, 457, 459, 460, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 487, 488, 489, 492, 496, 497, 500, 501, 502, 503, 504, 505, 508, 509, 510, 519, 521, 523, 524, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 585, 586, 588, 589, 590, 591, 593, 594, 603, 604, 605, 606, 607, 608, 609, 611, 620, 629, 630, 631, 633, 635, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 707, 712, 713, 714, 715, 716, 718, 728, 729, 730, 733, 737, 738, 739, 740, 753, 754, 757, 758, 759, 760, 762, 763, 765, 766, 767, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 786, 787, 791, 792, 795, 796, 797, 798, 801, 802, 812, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 870, 872, 873, 874, 876, 878, 879, 880, 881, 883, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 917, 919, 920, 921, 922, 927, 936, 937, 938, 939, 942, 943, 944, 952, 953, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 975, 979, 981, 983, 985, 986, 990, 991, 992, 993, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1011, 1024, 1025, 1026, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "factor": [3, 6, 9, 16, 27, 32, 45, 47, 54, 56, 63, 79, 86, 95, 101, 106, 108, 131, 168, 171, 215, 227, 230, 240, 273, 274, 285, 286, 299, 301, 302, 307, 309, 319, 321, 339, 368, 369, 382, 388, 391, 396, 406, 408, 409, 416, 417, 419, 440, 442, 454, 469, 471, 472, 473, 474, 476, 478, 488, 504, 514, 515, 527, 532, 535, 536, 538, 540, 541, 544, 545, 546, 547, 549, 550, 561, 562, 563, 588, 591, 597, 613, 649, 650, 651, 654, 655, 656, 682, 683, 692, 719, 782, 798, 801, 802, 823, 847, 881, 895, 897, 905, 937, 938, 978, 985, 986, 992, 999, 1002, 1006, 1009, 1011, 1026, 1027, 1031, 1032, 1034, 1035, 1037, 1045, 1047], "latent": [3, 6, 16, 18, 107, 168, 227, 304, 321, 354, 412, 417, 419, 488, 532, 536, 538, 539, 540, 543, 544, 588, 591, 857, 988, 1009, 1011, 1025, 1026, 1027, 1033, 1036], "dirichlet": [3, 6, 16, 168, 227, 247, 248, 253, 257, 321, 417, 488, 536, 538, 540, 588, 591, 796, 1009, 1011, 1026, 1027, 1031, 1036, 1037], "alloc": [3, 6, 16, 26, 62, 168, 227, 274, 319, 321, 378, 382, 383, 409, 417, 443, 447, 459, 488, 536, 538, 540, 584, 588, 591, 646, 652, 660, 662, 801, 802, 804, 820, 825, 828, 978, 999, 1009, 1011, 1026, 1027, 1035, 1036, 1041, 1042, 1048], "visual": [3, 4, 9, 13, 16, 17, 21, 26, 31, 33, 44, 47, 50, 53, 58, 61, 62, 81, 86, 92, 95, 96, 98, 100, 104, 106, 108, 118, 119, 127, 129, 131, 135, 136, 149, 161, 166, 168, 172, 174, 185, 192, 201, 203, 219, 222, 223, 226, 227, 229, 232, 235, 241, 242, 245, 252, 255, 256, 258, 259, 263, 264, 267, 269, 271, 272, 278, 290, 294, 295, 300, 302, 305, 307, 311, 312, 317, 319, 328, 344, 371, 374, 378, 380, 388, 389, 406, 411, 413, 414, 415, 416, 438, 441, 445, 446, 454, 472, 496, 502, 504, 507, 510, 514, 522, 532, 534, 541, 564, 566, 571, 631, 633, 658, 689, 692, 697, 698, 700, 701, 702, 718, 726, 781, 788, 799, 800, 803, 804, 815, 816, 817, 818, 819, 820, 827, 858, 862, 866, 870, 871, 873, 877, 878, 879, 881, 903, 906, 915, 934, 984, 986, 987, 992, 993, 995, 996, 999, 1005, 1009, 1011, 1016, 1027, 1034, 1041, 1042, 1043, 1045], "stock": [3, 16, 47, 53, 168, 222, 223, 226, 409, 411, 454, 472, 689, 1011, 1019], "market": [3, 16, 47, 53, 168, 222, 223, 226, 409, 411, 454, 472, 689, 1011, 1014, 1019], "wikipedia": [3, 16, 25, 168, 390, 408, 409, 595, 607, 608, 636, 656, 668, 671, 682, 683, 695, 704, 705, 707, 709, 712, 716, 718, 725, 728, 729, 730, 733, 734, 737, 742, 755, 782, 784, 785, 787, 788, 791, 792, 843, 844, 849, 850, 851, 852, 879, 895, 909, 910, 981, 985, 989, 992, 1001, 1005, 1011, 1025, 1031, 1038], "princip": [3, 16, 46, 85, 86, 88, 91, 95, 98, 100, 101, 103, 105, 108, 131, 168, 198, 222, 235, 238, 294, 312, 319, 374, 409, 412, 421, 484, 531, 532, 533, 534, 535, 537, 539, 540, 541, 542, 543, 544, 545, 546, 550, 657, 688, 689, 690, 692, 693, 827, 850, 862, 881, 937, 938, 986, 992, 1011, 1026, 1027, 1031], "eigenvector": [3, 16, 47, 87, 91, 168, 247, 409, 452, 462, 534, 535, 541, 550, 688, 689, 691, 695, 986, 1011, 1031, 1035, 1045], "end": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 380, 382, 384, 386, 394, 396, 397, 399, 400, 406, 409, 410, 412, 416, 450, 456, 468, 488, 489, 508, 509, 537, 546, 557, 558, 559, 560, 564, 565, 566, 645, 646, 647, 650, 651, 652, 653, 654, 655, 660, 661, 662, 663, 681, 682, 683, 684, 798, 801, 802, 812, 819, 822, 859, 861, 899, 909, 910, 911, 912, 942, 943, 973, 978, 981, 985, 986, 988, 989, 999, 1001, 1003, 1009, 1014, 1022, 1025, 1036, 1038, 1041, 1044, 1045], "download": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 168, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 375, 377, 379, 380, 386, 387, 390, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 510, 1005, 1021, 1023, 1025, 1027, 1035, 1036, 1039, 1043, 1044, 1045], "exampl": [4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 368, 369, 371, 379, 381, 382, 384, 385, 386, 388, 389, 390, 391, 392, 395, 396, 399, 402, 403, 408, 420, 421, 425, 439, 456, 461, 471, 485, 507, 508, 531, 547, 555, 572, 573, 577, 583, 592, 595, 596, 598, 601, 603, 612, 616, 620, 621, 624, 629, 638, 642, 650, 651, 654, 660, 661, 663, 667, 675, 699, 708, 714, 715, 721, 722, 723, 725, 727, 729, 730, 738, 742, 743, 746, 750, 753, 755, 762, 763, 767, 768, 770, 772, 780, 782, 790, 793, 795, 805, 806, 807, 808, 809, 810, 811, 833, 835, 837, 841, 842, 851, 852, 853, 855, 863, 864, 867, 869, 872, 883, 889, 893, 896, 902, 911, 912, 913, 914, 927, 936, 938, 940, 941, 943, 951, 952, 953, 957, 960, 977, 979, 987, 1010, 1011, 1012, 1014, 1017, 1020, 1021, 1025, 1027, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1041, 1044, 1046, 1047], "run": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 364, 368, 369, 380, 382, 383, 384, 386, 387, 388, 389, 390, 394, 396, 397, 399, 405, 409, 411, 413, 416, 419, 420, 421, 437, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 462, 464, 467, 468, 471, 472, 531, 532, 533, 534, 535, 537, 539, 541, 542, 543, 545, 546, 548, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 582, 592, 594, 595, 596, 598, 599, 600, 602, 610, 611, 634, 640, 646, 647, 649, 651, 652, 653, 655, 656, 660, 661, 662, 663, 682, 683, 688, 689, 690, 691, 692, 693, 694, 780, 798, 801, 802, 804, 812, 820, 822, 823, 824, 825, 826, 828, 833, 834, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 858, 859, 860, 863, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 932, 933, 957, 960, 963, 978, 988, 990, 993, 1002, 1004, 1005, 1009, 1010, 1014, 1016, 1023, 1025, 1031, 1034, 1036, 1038, 1039, 1040, 1041, 1045, 1046, 1047], "your": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 364, 368, 369, 370, 376, 380, 381, 382, 383, 385, 386, 388, 390, 391, 394, 395, 396, 399, 403, 405, 408, 409, 410, 411, 416, 417, 420, 421, 444, 446, 503, 533, 561, 562, 602, 634, 646, 687, 798, 801, 802, 804, 812, 820, 824, 826, 932, 986, 993, 999, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1013, 1014, 1018, 1025, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "browser": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 382, 390, 999, 1048], "jupyterlit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362], "binder": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362], "notebook": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 383, 384, 388, 410, 468, 899, 1005, 1008, 1009, 1010, 1042, 1045], "introduc": [4, 72, 79, 81, 82, 101, 149, 168, 173, 180, 185, 205, 229, 234, 237, 240, 242, 245, 269, 322, 323, 355, 369, 375, 378, 380, 382, 384, 386, 387, 390, 394, 396, 400, 407, 409, 411, 413, 414, 416, 417, 433, 441, 442, 443, 445, 447, 449, 459, 464, 468, 482, 483, 484, 485, 496, 504, 515, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 555, 556, 566, 567, 568, 569, 570, 581, 582, 583, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 658, 664, 685, 686, 688, 689, 692, 827, 845, 850, 853, 857, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 895, 899, 983, 985, 988, 991, 992, 995, 999, 1001, 1003, 1004, 1011, 1016, 1023, 1031, 1032, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "differ": [4, 5, 7, 10, 12, 14, 15, 17, 21, 22, 25, 28, 31, 32, 35, 37, 38, 40, 42, 43, 44, 46, 47, 48, 50, 53, 54, 56, 57, 58, 59, 61, 65, 66, 67, 68, 69, 71, 72, 73, 75, 81, 86, 87, 91, 92, 93, 96, 98, 99, 101, 104, 105, 106, 113, 116, 118, 119, 122, 123, 124, 126, 128, 129, 133, 134, 135, 136, 139, 142, 145, 150, 152, 153, 154, 155, 158, 159, 160, 163, 165, 166, 168, 170, 171, 173, 177, 180, 181, 184, 187, 188, 189, 190, 192, 198, 201, 202, 203, 205, 206, 207, 208, 209, 218, 219, 222, 223, 224, 225, 227, 230, 232, 235, 236, 237, 240, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 276, 277, 280, 283, 285, 288, 291, 292, 294, 301, 302, 306, 308, 309, 311, 312, 315, 317, 335, 336, 338, 339, 340, 342, 343, 348, 349, 351, 353, 354, 355, 364, 368, 369, 370, 376, 377, 379, 380, 381, 382, 385, 387, 389, 391, 395, 396, 399, 403, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 434, 437, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 458, 459, 462, 464, 475, 478, 490, 493, 494, 496, 503, 504, 508, 509, 512, 514, 522, 537, 538, 539, 540, 546, 547, 549, 550, 555, 556, 563, 581, 582, 588, 589, 590, 591, 594, 611, 613, 614, 615, 619, 622, 623, 627, 631, 632, 633, 634, 638, 643, 644, 647, 649, 651, 653, 655, 658, 661, 666, 667, 668, 672, 674, 676, 677, 678, 680, 690, 692, 694, 698, 700, 701, 704, 705, 706, 707, 709, 715, 717, 718, 726, 727, 728, 729, 730, 733, 734, 736, 742, 756, 757, 758, 760, 777, 781, 782, 783, 785, 786, 788, 791, 792, 794, 797, 798, 800, 801, 802, 803, 804, 807, 812, 813, 814, 815, 816, 817, 818, 820, 822, 824, 825, 828, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 851, 854, 857, 861, 866, 870, 871, 873, 874, 875, 876, 877, 878, 879, 881, 882, 886, 887, 888, 889, 890, 891, 892, 901, 902, 903, 906, 909, 910, 911, 912, 946, 953, 978, 979, 981, 982, 984, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 999, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1014, 1016, 1018, 1019, 1020, 1024, 1025, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "strategi": [4, 13, 53, 55, 59, 62, 72, 123, 128, 133, 141, 147, 149, 165, 166, 168, 173, 185, 190, 201, 208, 209, 219, 231, 232, 240, 242, 255, 261, 263, 265, 266, 267, 269, 270, 271, 272, 274, 278, 283, 300, 303, 305, 306, 308, 309, 313, 314, 315, 317, 318, 321, 355, 367, 384, 388, 395, 396, 413, 416, 417, 418, 421, 437, 438, 439, 447, 452, 462, 472, 502, 504, 512, 514, 522, 533, 538, 551, 552, 561, 562, 564, 565, 567, 568, 571, 588, 589, 591, 592, 594, 602, 627, 628, 630, 634, 645, 647, 651, 653, 655, 661, 663, 665, 673, 675, 691, 695, 704, 713, 754, 756, 794, 798, 801, 802, 804, 812, 815, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 858, 866, 871, 882, 896, 901, 903, 906, 909, 910, 911, 912, 960, 978, 979, 988, 990, 991, 992, 993, 995, 997, 999, 1003, 1004, 1005, 1009, 1011, 1020, 1025, 1027, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047], "leverag": [4, 8, 38, 50, 87, 219, 353, 354, 368, 369, 380, 413, 416, 876, 978, 985, 1016, 1034, 1046], "task": [4, 7, 99, 120, 121, 127, 148, 149, 161, 168, 179, 185, 187, 188, 190, 200, 201, 217, 220, 222, 240, 259, 283, 344, 355, 368, 370, 377, 379, 380, 381, 382, 386, 387, 388, 391, 394, 395, 396, 414, 416, 417, 418, 419, 448, 461, 493, 505, 515, 592, 595, 596, 598, 599, 600, 604, 605, 606, 609, 632, 633, 646, 647, 652, 653, 660, 661, 662, 663, 674, 681, 684, 726, 728, 729, 753, 781, 783, 786, 788, 799, 803, 816, 821, 955, 956, 986, 989, 990, 991, 992, 1000, 1002, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1023, 1024, 1025, 1027, 1031, 1036, 1040, 1046], "highli": [4, 9, 73, 81, 82, 98, 107, 129, 185, 196, 206, 262, 265, 271, 302, 344, 354, 368, 369, 382, 384, 388, 407, 409, 413, 416, 417, 452, 462, 496, 563, 671, 692, 810, 812, 857, 985, 989, 992, 993, 995, 1003, 1004, 1008, 1009], "depend": [4, 5, 7, 13, 38, 54, 76, 100, 119, 123, 126, 127, 130, 133, 145, 149, 159, 165, 168, 169, 171, 174, 175, 177, 181, 185, 219, 223, 229, 230, 236, 240, 245, 252, 262, 263, 267, 268, 269, 285, 302, 307, 312, 319, 322, 337, 344, 348, 354, 355, 364, 368, 369, 370, 375, 382, 384, 385, 390, 391, 394, 395, 396, 397, 398, 399, 402, 403, 405, 408, 409, 411, 413, 414, 416, 417, 418, 419, 420, 438, 439, 440, 444, 446, 447, 449, 450, 452, 454, 457, 459, 460, 462, 464, 469, 484, 489, 490, 491, 493, 496, 500, 501, 502, 504, 505, 510, 534, 535, 541, 544, 551, 559, 560, 562, 588, 589, 590, 591, 602, 604, 607, 608, 611, 627, 632, 633, 638, 640, 648, 658, 659, 669, 671, 673, 676, 677, 678, 680, 687, 690, 691, 694, 695, 728, 729, 737, 740, 777, 780, 782, 783, 786, 791, 792, 796, 797, 817, 826, 843, 844, 845, 847, 849, 850, 851, 852, 853, 859, 860, 862, 874, 875, 878, 881, 895, 902, 903, 906, 910, 919, 978, 979, 981, 982, 983, 985, 986, 988, 989, 991, 992, 993, 994, 997, 1001, 1003, 1004, 1005, 1011, 1016, 1023, 1025, 1027, 1028, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1046, 1047, 1048], "busi": [4, 201, 262, 390, 394, 787, 985, 989, 1014], "dai": [4, 12, 13, 158, 172, 202, 369, 379, 382, 880, 1014, 1037, 1038, 1045, 1046], "week": [4, 13, 324, 381, 382, 397, 1014, 1045], "yearli": 4, "season": [4, 13, 158, 172, 202, 381], "perform": [4, 7, 13, 18, 20, 25, 26, 27, 28, 33, 37, 39, 41, 49, 50, 54, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 71, 72, 75, 79, 87, 90, 99, 106, 111, 113, 119, 121, 123, 124, 125, 127, 128, 132, 133, 139, 145, 148, 149, 150, 154, 162, 165, 166, 168, 171, 172, 173, 174, 177, 185, 190, 201, 203, 205, 207, 208, 209, 218, 219, 223, 224, 226, 230, 235, 238, 240, 249, 252, 255, 257, 258, 259, 260, 262, 263, 264, 267, 268, 270, 271, 273, 275, 277, 278, 280, 283, 285, 298, 304, 307, 309, 311, 313, 314, 317, 323, 326, 328, 329, 333, 340, 343, 344, 346, 348, 353, 355, 364, 367, 369, 370, 377, 379, 384, 385, 386, 388, 390, 391, 394, 395, 396, 398, 400, 403, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 427, 431, 440, 442, 443, 444, 446, 447, 448, 450, 452, 454, 455, 459, 461, 468, 469, 482, 483, 484, 485, 494, 502, 512, 515, 531, 532, 533, 535, 537, 542, 543, 544, 545, 546, 548, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 583, 588, 589, 590, 591, 594, 601, 602, 603, 610, 611, 627, 630, 631, 638, 640, 645, 651, 654, 655, 656, 658, 664, 665, 666, 667, 668, 670, 673, 675, 676, 677, 678, 682, 683, 685, 687, 689, 690, 693, 694, 697, 703, 704, 705, 707, 708, 712, 713, 725, 728, 729, 737, 739, 741, 754, 755, 756, 777, 782, 783, 785, 786, 787, 793, 794, 795, 796, 797, 798, 801, 802, 809, 810, 812, 816, 822, 823, 824, 826, 827, 830, 833, 834, 836, 837, 838, 839, 840, 841, 842, 848, 850, 856, 857, 858, 859, 861, 862, 864, 867, 868, 870, 871, 873, 874, 875, 877, 878, 881, 882, 884, 886, 887, 888, 890, 891, 892, 896, 897, 899, 903, 904, 905, 906, 907, 909, 910, 911, 912, 921, 922, 962, 973, 978, 979, 981, 983, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1002, 1003, 1004, 1005, 1009, 1010, 1011, 1014, 1016, 1017, 1020, 1023, 1026, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "sklearn": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 364, 368, 369, 370, 371, 375, 376, 377, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 394, 395, 396, 398, 399, 400, 403, 405, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 978, 979, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1009, 1010, 1016, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "preprocess": [4, 5, 6, 10, 32, 43, 45, 50, 54, 56, 59, 63, 71, 72, 73, 74, 76, 87, 96, 107, 118, 123, 146, 150, 158, 162, 173, 177, 180, 182, 189, 190, 192, 201, 202, 207, 217, 219, 223, 231, 232, 241, 244, 259, 269, 271, 276, 288, 293, 294, 301, 302, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 324, 331, 340, 343, 354, 370, 371, 374, 376, 379, 382, 387, 395, 396, 405, 406, 409, 410, 413, 416, 417, 418, 464, 465, 466, 467, 489, 567, 581, 582, 588, 589, 591, 630, 658, 659, 672, 674, 676, 678, 687, 830, 861, 862, 901, 902, 903, 904, 906, 907, 979, 985, 990, 993, 1000, 1003, 1004, 1006, 1009, 1011, 1013, 1014, 1016, 1021, 1022, 1025, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "splinetransform": [4, 202, 240, 320, 876, 999, 1044, 1046, 1047], "class": [4, 8, 9, 10, 11, 14, 17, 20, 24, 25, 26, 28, 29, 31, 35, 41, 55, 56, 57, 59, 72, 73, 91, 92, 93, 101, 105, 107, 111, 112, 114, 117, 119, 121, 124, 129, 134, 137, 150, 153, 154, 156, 157, 161, 162, 165, 168, 171, 172, 177, 179, 191, 192, 193, 209, 213, 216, 217, 220, 223, 230, 237, 238, 240, 247, 248, 249, 255, 256, 257, 262, 264, 268, 272, 273, 278, 280, 283, 285, 288, 290, 291, 292, 293, 294, 295, 296, 302, 312, 317, 321, 323, 324, 327, 329, 330, 335, 336, 337, 338, 340, 341, 344, 349, 351, 353, 354, 355, 359, 362, 370, 371, 374, 376, 377, 378, 379, 382, 383, 384, 386, 387, 388, 389, 391, 394, 395, 399, 405, 407, 409, 410, 412, 414, 418, 419, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 461, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 500, 502, 503, 504, 508, 509, 510, 512, 514, 515, 519, 522, 523, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 712, 713, 714, 715, 716, 717, 718, 720, 726, 728, 729, 730, 734, 735, 736, 737, 738, 739, 740, 741, 742, 753, 754, 756, 781, 782, 783, 785, 786, 787, 788, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 824, 825, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 926, 927, 928, 929, 930, 932, 933, 945, 946, 947, 950, 955, 957, 959, 960, 973, 978, 979, 980, 981, 983, 984, 985, 986, 988, 990, 991, 993, 996, 997, 999, 1000, 1002, 1005, 1010, 1011, 1012, 1014, 1016, 1020, 1023, 1025, 1027, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "extrapol": [4, 153, 180, 202, 233, 265, 880, 989, 999, 1005, 1044, 1046], "option": [4, 31, 47, 53, 104, 119, 127, 159, 166, 182, 185, 202, 240, 265, 271, 318, 353, 358, 364, 370, 376, 377, 378, 380, 382, 383, 385, 387, 388, 390, 391, 394, 396, 397, 399, 403, 409, 410, 412, 413, 414, 416, 417, 420, 433, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 459, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 687, 688, 689, 690, 692, 694, 695, 711, 713, 717, 728, 729, 734, 735, 736, 756, 757, 758, 763, 765, 766, 770, 773, 774, 775, 776, 777, 780, 782, 783, 786, 791, 792, 794, 799, 800, 801, 802, 804, 805, 807, 816, 820, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 915, 928, 975, 978, 979, 985, 988, 989, 992, 999, 1002, 1004, 1005, 1010, 1013, 1023, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "load": [4, 6, 11, 12, 13, 15, 27, 33, 47, 49, 54, 72, 73, 90, 96, 107, 118, 120, 122, 124, 129, 130, 133, 134, 136, 147, 148, 158, 171, 172, 177, 182, 197, 198, 201, 209, 217, 232, 233, 237, 239, 240, 241, 242, 244, 252, 258, 260, 262, 267, 269, 274, 280, 285, 289, 294, 302, 303, 304, 318, 319, 321, 322, 324, 329, 330, 331, 359, 362, 368, 371, 374, 377, 379, 385, 388, 395, 403, 408, 412, 413, 414, 416, 482, 483, 484, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 532, 534, 543, 841, 842, 938, 999, 1010, 1017, 1019, 1021, 1027, 1031, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "openml": [4, 13, 72, 133, 158, 171, 201, 209, 217, 219, 231, 280, 283, 303, 375, 399, 496, 1027, 1039, 1041, 1044], "repositori": [4, 8, 13, 177, 323, 375, 377, 379, 380, 382, 384, 386, 390, 397, 399, 504, 1009, 1013, 1027], "import": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 145, 146, 147, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 169, 170, 171, 172, 175, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 364, 368, 369, 370, 376, 377, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 394, 395, 396, 398, 399, 400, 403, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 460, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 482, 483, 484, 485, 488, 495, 496, 500, 502, 503, 504, 506, 507, 508, 510, 512, 515, 521, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 579, 580, 581, 582, 583, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 684, 688, 689, 690, 691, 692, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 712, 713, 714, 715, 717, 718, 721, 722, 723, 725, 726, 727, 728, 729, 730, 733, 734, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 762, 763, 767, 768, 770, 772, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 889, 890, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 928, 933, 936, 938, 940, 941, 942, 943, 950, 951, 952, 953, 957, 960, 963, 977, 978, 979, 981, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1010, 1011, 1014, 1016, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046], "fetch_openml": [4, 5, 13, 72, 76, 123, 133, 158, 171, 172, 173, 201, 209, 217, 219, 231, 240, 244, 280, 283, 285, 303, 313, 317, 321, 324, 376, 386, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "bike_shar": [4, 13], "bike_sharing_demand": [4, 13, 172], "version": [4, 13, 47, 54, 56, 72, 96, 101, 113, 155, 166, 172, 173, 177, 185, 199, 202, 203, 209, 215, 217, 237, 240, 244, 283, 303, 312, 317, 318, 319, 320, 322, 323, 324, 340, 353, 368, 371, 377, 381, 382, 383, 384, 385, 388, 390, 391, 394, 396, 397, 399, 402, 403, 408, 409, 410, 412, 414, 416, 417, 419, 420, 421, 427, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 500, 501, 502, 504, 505, 508, 509, 510, 512, 514, 522, 523, 526, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 700, 701, 702, 704, 707, 708, 713, 714, 718, 721, 722, 723, 724, 726, 727, 728, 729, 730, 733, 738, 739, 740, 741, 742, 745, 749, 750, 752, 753, 756, 757, 758, 760, 765, 766, 768, 777, 781, 782, 783, 784, 786, 788, 789, 790, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 811, 812, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 887, 889, 890, 891, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 919, 921, 922, 932, 933, 937, 938, 945, 946, 947, 948, 949, 952, 955, 956, 957, 959, 964, 970, 975, 976, 978, 981, 983, 986, 989, 991, 993, 995, 997, 1002, 1003, 1005, 1007, 1009, 1010, 1013, 1024, 1029], "2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 88, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 142, 146, 147, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 177, 179, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 364, 368, 369, 370, 376, 377, 379, 380, 382, 384, 386, 387, 388, 389, 391, 394, 395, 396, 399, 400, 401, 402, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 432, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 459, 460, 462, 463, 464, 465, 468, 469, 471, 472, 473, 474, 475, 478, 482, 483, 484, 485, 493, 496, 500, 501, 504, 507, 508, 509, 510, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 581, 582, 584, 585, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 603, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 701, 703, 704, 705, 706, 707, 708, 713, 714, 715, 716, 717, 718, 721, 722, 723, 724, 725, 727, 728, 729, 730, 733, 734, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 762, 763, 767, 768, 770, 772, 775, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 885, 889, 894, 895, 897, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 914, 916, 921, 922, 927, 936, 937, 938, 940, 941, 942, 943, 950, 951, 952, 953, 954, 955, 957, 960, 962, 963, 976, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1011, 1016, 1017, 1020, 1021, 1022, 1023, 1024, 1028, 1029, 1031, 1032, 1033, 1035, 1036, 1048], "as_fram": [4, 5, 13, 72, 76, 119, 123, 133, 158, 171, 172, 173, 174, 189, 190, 201, 209, 217, 219, 240, 244, 280, 285, 288, 303, 312, 313, 317, 319, 321, 322, 376, 377, 489, 490, 491, 492, 496, 500, 501, 502, 504, 505, 510, 1041, 1042, 1043, 1044, 1047], "true": [4, 5, 6, 7, 8, 10, 11, 13, 15, 17, 18, 20, 27, 31, 33, 35, 38, 45, 50, 51, 54, 55, 56, 58, 59, 61, 64, 71, 72, 73, 74, 76, 79, 80, 81, 82, 83, 86, 93, 96, 97, 98, 99, 101, 107, 111, 113, 117, 119, 123, 125, 126, 128, 129, 130, 133, 134, 136, 139, 140, 141, 146, 149, 153, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 185, 186, 188, 189, 190, 192, 194, 196, 197, 198, 201, 203, 204, 205, 208, 209, 215, 216, 217, 219, 222, 225, 226, 230, 231, 234, 236, 237, 238, 239, 240, 243, 244, 247, 250, 252, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 290, 291, 294, 298, 301, 302, 303, 304, 308, 312, 313, 314, 317, 319, 321, 322, 323, 324, 328, 330, 331, 332, 343, 347, 348, 349, 353, 354, 355, 358, 359, 362, 364, 368, 369, 375, 377, 378, 382, 383, 384, 387, 388, 389, 391, 395, 396, 398, 400, 403, 405, 406, 407, 409, 410, 411, 413, 414, 416, 417, 418, 419, 421, 422, 423, 426, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 461, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 519, 522, 523, 524, 526, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 697, 698, 699, 700, 701, 702, 703, 705, 707, 708, 709, 712, 713, 714, 715, 718, 720, 723, 725, 726, 727, 728, 729, 730, 733, 734, 737, 738, 739, 740, 741, 742, 749, 750, 751, 753, 755, 760, 766, 768, 777, 781, 782, 783, 784, 785, 786, 787, 788, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 809, 810, 812, 816, 817, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 919, 920, 921, 922, 932, 938, 939, 950, 951, 954, 955, 959, 960, 962, 970, 975, 977, 978, 979, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 999, 1001, 1002, 1003, 1004, 1005, 1009, 1016, 1020, 1021, 1023, 1024, 1025, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "df": [4, 13, 26, 28, 133, 170, 172, 180, 185, 201, 219, 252, 262, 311, 313, 324, 354, 387, 417, 590, 591, 978, 979, 1048], "frame": [4, 13, 17, 72, 158, 171, 172, 201, 313, 324, 377, 382, 394, 397, 489, 490, 491, 492, 496, 500, 501, 502, 504, 505, 510, 1009, 1021, 1043], "To": [4, 8, 17, 27, 28, 33, 47, 56, 58, 79, 81, 83, 87, 101, 113, 123, 126, 127, 135, 139, 150, 158, 159, 162, 165, 166, 170, 171, 177, 182, 185, 189, 201, 202, 203, 205, 209, 219, 234, 235, 237, 240, 242, 244, 252, 257, 259, 260, 262, 264, 265, 267, 269, 280, 283, 303, 307, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 350, 354, 358, 364, 368, 369, 375, 376, 380, 382, 383, 384, 386, 387, 388, 390, 394, 396, 397, 400, 403, 405, 406, 409, 410, 411, 412, 413, 414, 416, 417, 446, 448, 449, 450, 461, 464, 467, 492, 496, 502, 503, 507, 508, 531, 537, 538, 539, 541, 543, 544, 545, 546, 557, 558, 559, 560, 564, 565, 569, 597, 611, 627, 632, 646, 647, 652, 653, 656, 658, 659, 660, 661, 662, 663, 684, 700, 712, 727, 762, 784, 792, 801, 802, 823, 830, 861, 872, 877, 891, 892, 901, 902, 909, 910, 911, 912, 928, 938, 957, 976, 978, 979, 981, 984, 985, 986, 987, 989, 990, 991, 992, 995, 996, 999, 1003, 1004, 1005, 1013, 1014, 1016, 1020, 1022, 1023, 1025, 1031, 1034, 1036, 1037, 1038, 1040, 1042], "get": [4, 5, 9, 12, 17, 18, 20, 38, 49, 53, 57, 97, 101, 126, 135, 147, 150, 153, 158, 159, 165, 171, 172, 173, 174, 194, 203, 216, 219, 222, 238, 260, 263, 264, 266, 270, 273, 280, 285, 290, 298, 308, 317, 324, 328, 331, 337, 340, 342, 345, 350, 353, 355, 358, 369, 371, 375, 376, 377, 380, 382, 383, 384, 387, 388, 389, 390, 396, 399, 403, 405, 407, 408, 409, 410, 411, 413, 414, 416, 417, 418, 419, 423, 424, 425, 430, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 462, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 695, 699, 721, 722, 723, 725, 731, 732, 741, 755, 762, 763, 768, 784, 787, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 916, 929, 930, 931, 937, 938, 948, 978, 984, 985, 986, 988, 989, 999, 1002, 1003, 1004, 1005, 1010, 1013, 1020, 1023, 1024, 1025, 1028, 1031, 1034, 1037, 1039, 1042, 1044, 1045, 1048], "quick": [4, 101, 243, 382, 384, 388, 399, 606, 827, 989, 990, 999, 1014, 1023, 1028], "understand": [4, 9, 13, 42, 113, 158, 168, 172, 237, 257, 260, 319, 320, 337, 344, 353, 357, 358, 363, 364, 381, 382, 383, 388, 394, 398, 409, 416, 417, 504, 827, 858, 859, 909, 910, 911, 912, 915, 978, 979, 986, 988, 1005, 1008, 1009, 1011, 1014, 1031, 1045], "pattern": [4, 13, 17, 21, 64, 83, 86, 91, 95, 96, 104, 108, 153, 165, 168, 172, 185, 205, 237, 240, 320, 353, 354, 355, 364, 379, 382, 384, 397, 406, 409, 410, 414, 416, 417, 448, 464, 466, 504, 532, 534, 541, 555, 556, 638, 708, 724, 740, 768, 787, 788, 796, 881, 981, 983, 985, 989, 990, 996, 1004, 1006, 1010, 1011, 1014, 1043], "let": [4, 5, 13, 54, 56, 65, 72, 76, 91, 96, 101, 120, 123, 126, 127, 130, 153, 159, 160, 166, 171, 172, 173, 182, 190, 201, 203, 219, 222, 226, 237, 244, 257, 262, 265, 269, 353, 355, 362, 364, 377, 382, 384, 388, 394, 406, 409, 413, 416, 417, 441, 445, 500, 504, 510, 534, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 681, 684, 867, 874, 875, 985, 986, 987, 988, 989, 996, 997, 999, 1004, 1005, 1014, 1023, 1025, 1041], "u": [4, 10, 11, 12, 13, 17, 18, 35, 51, 53, 57, 91, 96, 104, 123, 124, 153, 162, 170, 171, 172, 198, 202, 205, 209, 219, 223, 226, 234, 237, 243, 244, 248, 249, 253, 257, 262, 265, 269, 311, 313, 344, 353, 362, 369, 371, 377, 382, 386, 388, 390, 394, 399, 406, 409, 412, 414, 416, 417, 432, 463, 465, 482, 483, 484, 531, 537, 545, 546, 550, 552, 554, 556, 558, 560, 562, 565, 568, 570, 588, 589, 591, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 681, 684, 689, 693, 704, 720, 739, 754, 834, 835, 844, 852, 859, 881, 895, 902, 904, 907, 910, 912, 938, 981, 983, 988, 989, 996, 999, 1007, 1014, 1025, 1028, 1041], "look": [4, 5, 54, 56, 96, 99, 101, 126, 127, 153, 158, 159, 166, 171, 172, 203, 222, 226, 230, 237, 253, 257, 262, 264, 303, 324, 353, 354, 364, 369, 370, 376, 377, 380, 382, 384, 386, 388, 390, 394, 395, 409, 412, 414, 415, 416, 417, 448, 488, 489, 557, 558, 559, 560, 564, 565, 602, 603, 631, 659, 692, 881, 909, 910, 911, 912, 985, 986, 999, 1003, 1004, 1006, 1025, 1031, 1039, 1041], "averag": [4, 13, 26, 28, 38, 40, 41, 45, 53, 61, 63, 116, 117, 122, 126, 129, 134, 135, 136, 150, 158, 172, 182, 190, 201, 208, 219, 240, 265, 267, 270, 272, 283, 307, 317, 323, 331, 353, 364, 368, 377, 379, 384, 406, 407, 411, 413, 417, 418, 420, 421, 437, 438, 441, 444, 445, 446, 447, 449, 490, 493, 494, 523, 531, 532, 533, 537, 538, 540, 541, 547, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 569, 570, 587, 594, 632, 633, 648, 658, 659, 666, 667, 669, 672, 674, 676, 677, 678, 680, 687, 700, 703, 704, 706, 707, 708, 713, 720, 721, 722, 724, 725, 727, 728, 729, 733, 734, 735, 737, 738, 739, 742, 744, 745, 747, 749, 750, 752, 755, 763, 780, 781, 782, 783, 784, 786, 787, 789, 790, 794, 795, 796, 797, 825, 847, 867, 882, 975, 979, 984, 985, 990, 993, 995, 996, 1003, 1004, 1005, 1023, 1025, 1031, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048], "per": [4, 10, 21, 35, 49, 54, 65, 92, 118, 119, 123, 158, 160, 171, 172, 201, 216, 219, 240, 244, 248, 258, 269, 271, 307, 313, 319, 324, 348, 353, 355, 368, 377, 378, 382, 387, 388, 391, 394, 396, 407, 409, 413, 414, 415, 416, 417, 419, 446, 448, 450, 457, 461, 464, 468, 487, 500, 502, 503, 504, 508, 510, 512, 515, 523, 532, 534, 535, 536, 539, 541, 543, 549, 550, 561, 562, 569, 583, 588, 591, 610, 611, 632, 633, 641, 642, 658, 659, 666, 667, 668, 671, 673, 674, 675, 676, 678, 692, 696, 713, 716, 720, 740, 753, 757, 758, 780, 782, 796, 797, 822, 829, 830, 831, 833, 834, 837, 839, 857, 860, 866, 868, 870, 871, 874, 875, 881, 882, 899, 901, 902, 903, 904, 905, 906, 907, 926, 927, 938, 964, 978, 981, 985, 988, 989, 990, 993, 996, 1003, 1004, 1005, 1009, 1010, 1023, 1025, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1047, 1048], "hour": [4, 171, 172, 324, 382, 388, 986, 1008], "sundai": 4, "weekend": 4, "clearli": [4, 61, 99, 172, 235, 344, 381, 382, 394, 396, 414, 416, 990, 996], "distinguish": [4, 21, 41, 81, 93, 101, 203, 259, 280, 377, 384, 396, 397, 419, 978, 989, 992, 995], "commut": [4, 13], "morn": 4, "even": [4, 13, 14, 28, 41, 43, 53, 76, 87, 99, 119, 126, 159, 171, 172, 173, 190, 201, 202, 209, 219, 226, 227, 236, 248, 268, 280, 307, 309, 311, 312, 332, 348, 353, 354, 355, 364, 370, 377, 381, 382, 383, 384, 386, 387, 390, 394, 396, 407, 408, 409, 410, 411, 413, 414, 416, 417, 419, 441, 443, 445, 446, 447, 448, 449, 459, 461, 532, 535, 557, 558, 559, 560, 564, 565, 582, 589, 594, 627, 628, 630, 639, 658, 659, 695, 700, 705, 712, 742, 760, 766, 773, 777, 780, 785, 787, 824, 861, 862, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 909, 910, 911, 912, 938, 978, 979, 981, 983, 985, 988, 989, 992, 994, 995, 997, 999, 1001, 1003, 1004, 1005, 1014, 1025, 1038, 1039, 1040, 1043, 1045, 1048], "leisur": 4, "spread": [4, 41, 224, 263, 307, 327, 328, 329, 332, 348, 368, 382, 409, 452, 462, 515, 878, 890, 898, 989], "peak": [4, 13, 28, 172, 407, 413, 1045], "middl": [4, 25, 35, 61, 101, 185, 349, 379, 996, 999], "matplotlib": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 142, 145, 146, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 174, 177, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 233, 234, 235, 236, 238, 239, 240, 241, 243, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 321, 322, 324, 327, 328, 329, 330, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 376, 385, 389, 399, 402, 438, 502, 631, 632, 697, 698, 700, 701, 702, 804, 820, 915, 984, 1009, 1019, 1021, 1022, 1023, 1028, 1040, 1043, 1044, 1045, 1046], "pyplot": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 142, 145, 146, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 174, 177, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 233, 234, 235, 236, 238, 239, 240, 241, 243, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 321, 322, 324, 327, 328, 329, 330, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 382, 389, 438, 502, 631, 632, 697, 698, 700, 701, 702, 804, 820, 1021, 1022, 1023, 1028, 1045], "plt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 142, 145, 146, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 174, 177, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 233, 234, 235, 236, 238, 239, 240, 241, 243, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 321, 322, 324, 327, 328, 329, 330, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 389, 438, 502, 631, 632, 697, 698, 700, 701, 702, 804, 820, 915, 996, 1021, 1022, 1023, 1028], "fig": [4, 5, 7, 8, 9, 10, 13, 15, 26, 28, 31, 35, 43, 44, 46, 54, 56, 58, 61, 65, 67, 74, 79, 81, 87, 91, 96, 101, 102, 103, 107, 113, 119, 120, 123, 124, 126, 127, 130, 131, 133, 135, 156, 162, 165, 172, 174, 177, 181, 189, 192, 195, 196, 198, 199, 201, 202, 205, 209, 214, 216, 219, 222, 223, 224, 225, 226, 227, 231, 233, 240, 241, 252, 257, 258, 259, 262, 263, 264, 265, 268, 271, 272, 273, 283, 285, 287, 289, 290, 298, 302, 303, 307, 308, 309, 311, 312, 313, 317, 321, 322, 337, 344, 347, 348, 349, 350, 353, 354, 355, 358, 389, 1021], "ax": [4, 5, 7, 8, 9, 10, 12, 13, 15, 17, 26, 28, 31, 32, 33, 35, 41, 43, 44, 46, 54, 56, 57, 58, 65, 67, 73, 74, 76, 81, 83, 87, 91, 93, 96, 102, 103, 107, 113, 115, 118, 120, 123, 124, 130, 131, 133, 134, 135, 156, 157, 162, 165, 170, 171, 172, 173, 174, 177, 180, 181, 184, 185, 190, 192, 193, 196, 198, 199, 201, 202, 203, 205, 206, 209, 210, 212, 214, 215, 216, 219, 222, 223, 224, 225, 226, 227, 231, 236, 240, 241, 243, 247, 249, 252, 257, 258, 259, 262, 264, 265, 266, 268, 269, 271, 272, 273, 274, 276, 280, 283, 285, 287, 288, 289, 290, 293, 295, 296, 301, 302, 303, 307, 309, 310, 311, 312, 313, 314, 317, 318, 321, 322, 324, 336, 337, 338, 339, 341, 342, 344, 347, 348, 349, 350, 353, 354, 355, 358, 359, 384, 385, 414, 419, 438, 534, 541, 550, 631, 632, 697, 698, 700, 701, 702, 718, 804, 820, 915, 989, 992, 996, 1028, 1041, 1047], "subplot": [4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 31, 32, 33, 35, 40, 44, 45, 51, 52, 54, 55, 56, 57, 58, 61, 63, 66, 67, 74, 76, 80, 81, 82, 83, 86, 87, 91, 92, 93, 96, 97, 98, 99, 101, 106, 107, 113, 115, 116, 118, 119, 120, 122, 123, 124, 127, 130, 131, 133, 134, 135, 145, 155, 157, 162, 165, 166, 171, 172, 174, 177, 181, 184, 192, 193, 195, 196, 199, 200, 201, 202, 203, 205, 209, 214, 215, 217, 219, 222, 223, 226, 227, 230, 231, 233, 235, 236, 238, 239, 240, 241, 247, 248, 249, 250, 252, 253, 257, 258, 259, 262, 264, 265, 267, 268, 269, 271, 272, 273, 275, 276, 283, 285, 287, 288, 289, 290, 293, 294, 296, 297, 298, 301, 302, 303, 304, 308, 309, 310, 311, 312, 313, 317, 321, 322, 330, 332, 337, 338, 339, 340, 344, 347, 348, 349, 350, 353, 354, 355, 358, 359, 389, 1021], "figsiz": [4, 5, 6, 10, 12, 13, 14, 15, 26, 27, 28, 31, 32, 33, 35, 40, 41, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 74, 76, 81, 83, 86, 87, 90, 91, 92, 93, 96, 99, 100, 101, 102, 103, 106, 107, 113, 115, 116, 123, 124, 125, 126, 127, 131, 133, 134, 145, 155, 157, 161, 162, 165, 166, 171, 172, 174, 177, 180, 181, 184, 185, 191, 195, 198, 199, 200, 201, 202, 203, 205, 207, 209, 212, 215, 217, 219, 222, 223, 224, 226, 227, 230, 231, 233, 235, 238, 239, 240, 241, 247, 249, 250, 253, 257, 258, 259, 264, 265, 266, 269, 271, 272, 276, 283, 285, 287, 288, 301, 302, 304, 307, 308, 309, 310, 311, 312, 313, 321, 322, 327, 329, 338, 340, 344, 345, 347, 348, 349, 350, 353, 354, 355, 915, 1021], "4": [4, 5, 6, 7, 8, 9, 10, 12, 13, 18, 20, 21, 26, 27, 28, 29, 32, 33, 34, 35, 39, 40, 41, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 63, 65, 66, 67, 71, 72, 73, 74, 75, 82, 83, 86, 87, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 105, 106, 113, 114, 116, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 139, 140, 143, 146, 150, 156, 158, 159, 161, 162, 165, 166, 168, 171, 172, 177, 180, 181, 182, 183, 184, 185, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 205, 207, 208, 209, 211, 214, 215, 219, 222, 230, 234, 235, 236, 237, 238, 239, 240, 242, 244, 247, 248, 249, 250, 252, 253, 257, 258, 259, 260, 262, 263, 264, 265, 267, 269, 270, 271, 273, 276, 283, 285, 287, 289, 290, 291, 292, 295, 301, 303, 304, 305, 307, 308, 310, 311, 313, 316, 317, 318, 319, 320, 322, 323, 325, 327, 328, 329, 330, 331, 337, 339, 340, 343, 344, 345, 348, 349, 350, 353, 354, 355, 362, 364, 369, 376, 377, 379, 380, 382, 387, 388, 391, 394, 395, 396, 399, 400, 401, 402, 407, 409, 410, 411, 413, 414, 416, 417, 418, 419, 421, 427, 431, 433, 437, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 459, 460, 462, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 496, 504, 512, 513, 516, 517, 518, 524, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 581, 582, 583, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 614, 617, 619, 622, 627, 628, 629, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 674, 676, 677, 679, 680, 684, 687, 688, 689, 690, 692, 693, 694, 698, 699, 702, 706, 707, 715, 716, 725, 726, 731, 733, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 755, 767, 768, 780, 781, 787, 788, 789, 790, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 827, 829, 830, 831, 832, 835, 836, 837, 838, 840, 845, 849, 850, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 889, 893, 894, 895, 899, 901, 902, 905, 909, 910, 911, 912, 927, 937, 938, 940, 942, 943, 945, 946, 953, 957, 960, 978, 979, 982, 983, 984, 985, 987, 989, 990, 991, 992, 999, 1000, 1003, 1004, 1007, 1011, 1013, 1016, 1020, 1021, 1022, 1023, 1025, 1029, 1032, 1033, 1034, 1036, 1037, 1038, 1040, 1044, 1045, 1046], "average_week_demand": 4, "groupbi": [4, 74, 172, 209, 219], "weekdai": [4, 13, 172], "count": [4, 13, 15, 26, 28, 42, 50, 54, 71, 72, 93, 134, 135, 171, 172, 201, 203, 219, 234, 244, 271, 280, 285, 318, 319, 354, 355, 362, 377, 379, 386, 391, 396, 397, 407, 408, 409, 414, 416, 417, 446, 449, 489, 536, 544, 581, 588, 589, 590, 591, 594, 604, 617, 640, 697, 705, 715, 718, 728, 729, 737, 753, 782, 783, 785, 786, 836, 840, 841, 842, 850, 853, 864, 913, 915, 940, 954, 978, 981, 985, 989, 991, 992, 999, 1005, 1014, 1025, 1031, 1034, 1036, 1039, 1040, 1042, 1043], "mean": [4, 5, 6, 8, 11, 13, 14, 15, 18, 20, 25, 26, 28, 35, 37, 38, 39, 41, 43, 45, 47, 50, 51, 54, 55, 56, 61, 69, 72, 80, 81, 82, 83, 87, 91, 93, 96, 99, 100, 101, 102, 103, 104, 113, 115, 116, 119, 122, 123, 126, 127, 133, 134, 135, 140, 149, 150, 153, 158, 160, 162, 165, 168, 171, 172, 181, 183, 190, 192, 194, 197, 198, 201, 203, 207, 208, 210, 216, 217, 218, 219, 225, 227, 230, 233, 234, 235, 236, 237, 238, 240, 241, 242, 244, 247, 248, 249, 250, 252, 253, 258, 259, 262, 263, 264, 265, 267, 269, 270, 271, 272, 273, 274, 276, 277, 280, 283, 285, 296, 307, 310, 312, 313, 314, 317, 320, 323, 330, 340, 343, 344, 348, 350, 352, 353, 355, 356, 364, 368, 374, 376, 377, 379, 382, 383, 384, 386, 387, 388, 390, 391, 394, 395, 396, 400, 406, 407, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 426, 432, 437, 438, 439, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 458, 459, 460, 461, 462, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 488, 501, 502, 504, 506, 512, 519, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 583, 588, 589, 590, 591, 594, 597, 602, 606, 607, 608, 609, 610, 611, 613, 622, 627, 628, 630, 632, 633, 634, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 684, 688, 689, 690, 691, 692, 693, 694, 695, 704, 705, 707, 709, 712, 713, 716, 717, 723, 725, 728, 729, 730, 735, 736, 737, 740, 741, 744, 745, 746, 747, 748, 749, 750, 751, 752, 756, 773, 777, 778, 780, 782, 783, 784, 786, 787, 789, 790, 791, 792, 794, 796, 797, 798, 801, 802, 804, 812, 816, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 847, 848, 849, 851, 852, 854, 855, 857, 858, 859, 860, 862, 863, 865, 866, 870, 871, 873, 877, 879, 881, 882, 887, 889, 890, 892, 894, 896, 897, 901, 902, 903, 904, 906, 907, 909, 910, 911, 912, 917, 921, 922, 924, 963, 964, 970, 974, 978, 979, 980, 983, 985, 986, 988, 991, 992, 993, 994, 996, 997, 1002, 1003, 1004, 1005, 1009, 1011, 1014, 1020, 1023, 1025, 1026, 1027, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "plot": [4, 5, 6, 11, 12, 13, 15, 17, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 41, 43, 44, 46, 55, 56, 57, 59, 60, 61, 62, 63, 66, 69, 73, 74, 75, 76, 80, 81, 82, 87, 89, 94, 96, 99, 100, 104, 105, 106, 107, 112, 113, 115, 116, 117, 118, 120, 124, 125, 126, 128, 130, 131, 132, 137, 140, 142, 145, 146, 148, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 173, 174, 175, 177, 179, 183, 184, 186, 188, 189, 190, 191, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 211, 213, 214, 216, 217, 218, 219, 220, 224, 225, 226, 227, 229, 230, 233, 234, 236, 238, 239, 244, 245, 247, 248, 249, 251, 253, 255, 256, 257, 262, 263, 265, 267, 268, 272, 273, 274, 276, 278, 280, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 301, 302, 303, 307, 308, 309, 310, 311, 312, 314, 318, 321, 322, 323, 324, 328, 329, 330, 332, 335, 336, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 354, 355, 357, 358, 360, 361, 362, 363, 371, 382, 385, 391, 394, 398, 399, 404, 407, 409, 411, 413, 415, 416, 438, 441, 446, 450, 456, 464, 471, 496, 501, 502, 504, 512, 515, 519, 523, 553, 557, 560, 562, 564, 565, 569, 570, 610, 622, 631, 632, 633, 657, 658, 672, 676, 697, 698, 700, 701, 702, 703, 718, 726, 734, 760, 781, 783, 786, 787, 788, 798, 804, 815, 820, 822, 823, 824, 825, 828, 839, 843, 859, 862, 874, 875, 876, 878, 881, 901, 903, 906, 909, 910, 915, 982, 983, 985, 986, 988, 989, 992, 993, 995, 1003, 1004, 1005, 1009, 1010, 1011, 1020, 1021, 1023, 1027, 1032, 1034, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "_": [4, 5, 7, 8, 9, 11, 12, 13, 15, 21, 26, 27, 28, 31, 33, 34, 41, 44, 51, 54, 56, 59, 64, 68, 71, 83, 91, 93, 96, 101, 102, 104, 106, 116, 117, 118, 145, 153, 158, 159, 160, 170, 171, 172, 174, 177, 180, 184, 185, 186, 188, 189, 190, 193, 198, 199, 201, 203, 205, 214, 215, 218, 223, 226, 231, 236, 240, 244, 257, 262, 264, 265, 266, 268, 269, 271, 280, 288, 293, 296, 304, 309, 312, 313, 314, 318, 321, 322, 323, 328, 329, 339, 344, 348, 353, 355, 359, 384, 388, 396, 414, 416, 417, 446, 532, 533, 534, 535, 536, 538, 539, 540, 543, 547, 566, 597, 652, 653, 663, 684, 688, 689, 690, 691, 696, 698, 700, 763, 798, 804, 812, 820, 845, 853, 874, 875, 882, 979, 985, 986, 989, 991, 992, 993, 996, 997, 999, 1004, 1005, 1023, 1038], "hourli": [4, 171], "xtick": [4, 6, 8, 11, 31, 35, 41, 45, 47, 51, 52, 53, 59, 60, 63, 83, 86, 99, 123, 125, 155, 156, 157, 161, 184, 191, 197, 214, 230, 238, 248, 249, 250, 253, 261, 262, 276, 289, 298, 304, 313, 327, 340, 343, 345, 346, 697, 1021], "24": [4, 5, 13, 67, 133, 137, 147, 150, 168, 172, 177, 185, 189, 227, 241, 274, 285, 316, 317, 318, 320, 322, 323, 324, 325, 327, 328, 386, 399, 409, 416, 417, 437, 440, 441, 442, 444, 445, 447, 448, 449, 450, 451, 452, 453, 460, 462, 464, 469, 470, 471, 472, 473, 474, 475, 476, 489, 490, 491, 492, 496, 504, 515, 516, 517, 518, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 543, 544, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 570, 581, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 613, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 698, 699, 700, 702, 708, 714, 726, 745, 752, 796, 797, 798, 801, 802, 812, 819, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 862, 864, 865, 866, 867, 870, 871, 873, 875, 876, 877, 878, 879, 881, 891, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 932, 933, 964, 970, 978, 996, 999, 1007, 1011, 1029, 1031, 1039, 1040, 1041, 1042, 1044], "rang": [4, 5, 6, 7, 8, 10, 12, 17, 18, 20, 21, 26, 27, 28, 33, 34, 38, 39, 41, 43, 47, 48, 49, 51, 52, 56, 61, 62, 64, 65, 66, 79, 80, 82, 83, 113, 115, 116, 117, 120, 126, 132, 145, 149, 154, 171, 172, 177, 185, 190, 191, 195, 199, 201, 202, 205, 208, 209, 217, 219, 223, 225, 233, 234, 239, 240, 247, 249, 252, 253, 257, 261, 262, 263, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 283, 289, 295, 298, 304, 307, 312, 313, 317, 321, 322, 328, 340, 348, 353, 354, 359, 362, 369, 376, 377, 379, 382, 384, 388, 391, 396, 403, 409, 413, 416, 419, 440, 461, 469, 471, 472, 473, 474, 475, 476, 478, 481, 491, 494, 495, 514, 527, 541, 553, 554, 559, 560, 563, 588, 589, 591, 629, 632, 638, 640, 648, 649, 669, 671, 676, 680, 692, 712, 730, 745, 787, 827, 833, 847, 849, 851, 852, 857, 871, 878, 879, 880, 886, 887, 890, 891, 894, 895, 937, 938, 957, 978, 985, 989, 993, 1003, 1010, 1014, 1019, 1020, 1021, 1023, 1036, 1037, 1038, 1039, 1041, 1044, 1047], "7": [4, 6, 12, 13, 14, 15, 17, 20, 27, 31, 33, 35, 40, 43, 45, 47, 54, 55, 56, 57, 61, 65, 66, 68, 72, 73, 75, 81, 83, 99, 113, 116, 126, 128, 129, 133, 134, 150, 162, 170, 171, 172, 174, 177, 182, 183, 200, 201, 202, 203, 208, 219, 222, 230, 235, 236, 242, 244, 247, 248, 251, 252, 254, 257, 262, 266, 268, 269, 273, 275, 280, 283, 285, 287, 290, 291, 293, 303, 304, 307, 311, 317, 320, 321, 322, 324, 327, 328, 330, 331, 337, 344, 348, 349, 354, 355, 364, 377, 379, 380, 386, 387, 388, 399, 401, 402, 407, 413, 414, 416, 417, 418, 439, 444, 448, 450, 451, 452, 453, 462, 471, 472, 491, 532, 533, 534, 535, 536, 538, 544, 561, 562, 588, 591, 600, 627, 628, 630, 647, 649, 658, 661, 692, 699, 707, 721, 722, 723, 725, 727, 743, 744, 745, 749, 750, 752, 784, 789, 790, 793, 796, 799, 800, 805, 808, 815, 816, 819, 824, 827, 831, 841, 842, 850, 859, 860, 873, 874, 896, 897, 938, 941, 942, 953, 978, 979, 984, 985, 987, 989, 990, 992, 993, 995, 999, 1003, 1004, 1007, 1016, 1020, 1023, 1029, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1044], "xticklabel": [4, 10, 123, 172, 313], "sun": [4, 172, 1039, 1044, 1045], "mon": [4, 172], "tue": [4, 172, 1037], "wed": [4, 172], "thu": [4, 5, 25, 26, 27, 28, 41, 54, 56, 61, 79, 83, 99, 101, 116, 118, 119, 121, 123, 146, 153, 158, 159, 172, 185, 189, 190, 201, 203, 219, 230, 236, 241, 249, 260, 262, 267, 268, 269, 288, 314, 317, 320, 358, 364, 368, 369, 377, 384, 388, 394, 396, 407, 409, 413, 414, 416, 417, 419, 420, 437, 439, 463, 515, 527, 553, 554, 555, 556, 557, 558, 563, 564, 565, 566, 603, 606, 610, 622, 627, 632, 633, 643, 645, 658, 677, 705, 718, 724, 787, 794, 800, 805, 807, 819, 832, 835, 870, 901, 980, 981, 982, 983, 984, 985, 986, 989, 990, 995, 996, 997, 999, 1001, 1002, 1003, 1004, 1010, 1013, 1014, 1031, 1033, 1037, 1039, 1040, 1041, 1043, 1047], "fri": [4, 172, 377], "sat": [4, 172, 417], "xlabel": [4, 8, 9, 13, 25, 26, 27, 28, 34, 38, 42, 62, 79, 80, 82, 83, 86, 87, 91, 98, 104, 114, 115, 117, 123, 125, 126, 127, 128, 132, 136, 139, 140, 145, 146, 149, 153, 154, 155, 156, 158, 159, 160, 171, 180, 183, 184, 185, 186, 188, 189, 190, 191, 194, 195, 201, 203, 204, 206, 208, 210, 211, 215, 219, 234, 236, 238, 240, 257, 261, 262, 266, 267, 271, 272, 275, 276, 287, 288, 291, 292, 313, 314, 337, 339, 340, 343, 353, 359, 360, 361, 631], "ylabel": [4, 8, 9, 13, 25, 26, 27, 28, 34, 38, 62, 79, 80, 82, 83, 86, 87, 91, 98, 104, 114, 115, 117, 125, 126, 127, 128, 132, 136, 139, 140, 145, 146, 149, 153, 154, 155, 156, 158, 159, 160, 171, 180, 183, 184, 185, 186, 188, 189, 190, 191, 194, 195, 201, 203, 204, 206, 208, 210, 211, 219, 234, 236, 238, 257, 261, 262, 265, 266, 267, 271, 272, 275, 276, 288, 314, 337, 340, 343, 353, 359, 360, 361, 631], "number": [4, 5, 7, 8, 10, 12, 13, 14, 20, 21, 26, 27, 28, 33, 34, 37, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 54, 55, 56, 58, 62, 63, 64, 66, 68, 69, 71, 72, 73, 74, 76, 83, 86, 87, 92, 93, 96, 98, 100, 101, 104, 113, 114, 116, 119, 121, 122, 124, 125, 126, 127, 129, 133, 135, 146, 147, 150, 161, 162, 166, 168, 171, 172, 177, 185, 190, 200, 201, 202, 203, 208, 209, 215, 216, 217, 218, 219, 222, 230, 234, 238, 240, 241, 247, 248, 250, 252, 253, 256, 257, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 280, 285, 287, 291, 292, 307, 309, 310, 313, 317, 318, 319, 320, 321, 322, 323, 331, 340, 345, 348, 354, 355, 358, 362, 364, 369, 370, 374, 376, 377, 378, 379, 380, 382, 385, 386, 388, 389, 390, 391, 394, 395, 396, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 581, 582, 583, 584, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 701, 703, 704, 705, 707, 712, 713, 714, 716, 718, 720, 723, 727, 728, 729, 730, 733, 734, 737, 739, 751, 754, 773, 777, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 921, 922, 925, 937, 938, 941, 942, 957, 960, 963, 964, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1001, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1013, 1016, 1023, 1024, 1025, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "rental": [4, 13, 172, 996], "target": [4, 6, 10, 13, 18, 20, 27, 31, 33, 34, 46, 53, 70, 72, 74, 75, 77, 87, 91, 100, 103, 105, 114, 121, 122, 123, 124, 126, 127, 130, 132, 133, 134, 136, 142, 145, 148, 150, 153, 155, 158, 159, 166, 168, 170, 171, 172, 173, 180, 183, 184, 185, 194, 197, 201, 203, 205, 206, 209, 210, 223, 231, 233, 234, 235, 236, 239, 240, 241, 249, 256, 258, 260, 263, 265, 267, 268, 271, 272, 280, 283, 285, 288, 293, 296, 297, 302, 306, 307, 315, 318, 319, 321, 323, 327, 328, 331, 332, 336, 337, 340, 344, 346, 347, 353, 354, 359, 360, 361, 362, 364, 368, 370, 371, 374, 375, 376, 377, 378, 379, 384, 386, 387, 390, 391, 395, 398, 409, 413, 416, 419, 433, 437, 438, 439, 442, 445, 464, 465, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 508, 510, 520, 524, 531, 532, 534, 536, 537, 539, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 573, 582, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 627, 628, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 684, 685, 686, 687, 697, 698, 700, 701, 702, 707, 708, 709, 712, 713, 718, 720, 721, 722, 723, 725, 726, 727, 728, 729, 734, 737, 738, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 781, 782, 783, 784, 786, 787, 788, 789, 790, 793, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 848, 850, 851, 852, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 885, 890, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 921, 951, 952, 953, 980, 981, 982, 985, 986, 989, 993, 996, 997, 1003, 1004, 1005, 1010, 1011, 1013, 1014, 1016, 1021, 1023, 1025, 1027, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "absolut": [4, 13, 76, 100, 123, 150, 171, 201, 203, 207, 219, 384, 409, 411, 413, 414, 416, 417, 418, 419, 420, 444, 450, 456, 457, 531, 537, 542, 545, 546, 548, 549, 550, 558, 560, 561, 562, 565, 588, 590, 591, 593, 597, 602, 619, 627, 632, 646, 649, 650, 652, 654, 656, 671, 672, 674, 676, 678, 682, 683, 704, 717, 721, 735, 736, 744, 745, 747, 752, 754, 756, 794, 800, 804, 815, 818, 825, 827, 839, 841, 842, 846, 865, 870, 873, 886, 910, 912, 975, 985, 986, 999, 1003, 1005, 1023, 1024, 1032, 1037, 1042, 1043, 1044, 1045], "basi": [4, 6, 14, 101, 153, 158, 160, 202, 303, 320, 340, 344, 374, 380, 383, 409, 414, 416, 452, 534, 622, 632, 639, 691, 880, 987, 999, 1004, 1012, 1020, 1021, 1024, 1027, 1039, 1041, 1044], "max": [4, 8, 10, 11, 12, 13, 18, 20, 26, 28, 32, 34, 41, 45, 53, 59, 63, 68, 73, 78, 80, 83, 84, 96, 99, 104, 107, 113, 115, 122, 128, 131, 139, 141, 142, 145, 146, 150, 155, 157, 158, 166, 168, 171, 183, 188, 189, 190, 194, 196, 203, 204, 207, 215, 217, 219, 225, 234, 238, 260, 261, 262, 273, 275, 283, 285, 287, 291, 292, 296, 298, 301, 303, 307, 309, 310, 312, 320, 330, 332, 346, 349, 368, 409, 411, 414, 469, 470, 471, 472, 473, 474, 475, 476, 477, 512, 536, 555, 556, 557, 558, 559, 560, 563, 564, 565, 606, 627, 631, 632, 648, 649, 669, 672, 674, 680, 691, 692, 696, 699, 704, 705, 740, 756, 791, 792, 798, 858, 859, 870, 871, 873, 880, 887, 888, 909, 910, 911, 912, 957, 985, 987, 992, 999, 1003, 1004, 1011, 1023, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "977": [4, 13, 230, 245, 413, 1011], "rescal": [4, 47, 48, 56, 101, 182, 189, 225, 240, 307, 350, 411, 421, 469, 470, 471, 472, 473, 474, 475, 476, 533, 538, 646, 649, 652, 873, 879, 903, 904, 905, 906, 907, 989, 999, 1024, 1035, 1036], "variabl": [4, 9, 11, 12, 13, 17, 38, 71, 116, 120, 123, 126, 127, 141, 142, 145, 150, 160, 161, 165, 166, 172, 173, 177, 185, 190, 201, 205, 206, 219, 224, 240, 253, 262, 265, 272, 280, 283, 312, 313, 314, 364, 368, 370, 377, 379, 380, 382, 384, 386, 387, 390, 396, 405, 409, 410, 411, 412, 414, 416, 417, 418, 450, 482, 483, 484, 487, 499, 501, 508, 515, 532, 534, 536, 541, 544, 553, 559, 560, 604, 606, 607, 608, 640, 650, 651, 654, 655, 661, 682, 683, 695, 709, 746, 799, 800, 803, 805, 806, 807, 808, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 826, 829, 833, 834, 864, 875, 878, 882, 890, 902, 978, 979, 981, 985, 988, 989, 990, 991, 992, 994, 996, 997, 999, 1003, 1005, 1009, 1010, 1013, 1016, 1017, 1019, 1021, 1031, 1036, 1039, 1041, 1044, 1046], "rel": [4, 6, 8, 18, 21, 28, 56, 62, 101, 120, 158, 174, 177, 181, 201, 219, 250, 291, 292, 308, 318, 321, 340, 344, 353, 354, 377, 381, 384, 390, 396, 407, 409, 413, 416, 417, 419, 440, 443, 447, 449, 459, 521, 524, 531, 534, 537, 541, 557, 558, 559, 560, 564, 565, 566, 604, 649, 658, 659, 671, 672, 674, 690, 694, 728, 746, 798, 801, 802, 804, 812, 820, 825, 828, 841, 842, 846, 858, 859, 870, 871, 881, 897, 901, 902, 903, 906, 908, 909, 910, 911, 912, 985, 986, 989, 991, 992, 993, 995, 1013, 1021], "so": [4, 9, 12, 13, 17, 18, 43, 49, 56, 57, 62, 66, 82, 119, 122, 123, 124, 125, 132, 153, 158, 171, 173, 177, 181, 201, 202, 230, 237, 240, 262, 280, 285, 291, 292, 295, 302, 303, 308, 313, 314, 318, 330, 340, 353, 355, 362, 364, 368, 369, 370, 376, 377, 381, 382, 384, 386, 387, 388, 390, 391, 396, 400, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 422, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 496, 508, 509, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 695, 705, 708, 716, 725, 740, 755, 787, 796, 797, 798, 801, 802, 804, 805, 812, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 891, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 938, 955, 964, 978, 979, 981, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 995, 999, 1001, 1002, 1003, 1004, 1009, 1010, 1014, 1023, 1024, 1025, 1031, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1047, 1048], "error": [4, 5, 7, 13, 14, 18, 28, 55, 76, 79, 80, 82, 100, 106, 112, 116, 119, 120, 123, 125, 127, 137, 150, 153, 165, 168, 171, 185, 190, 197, 200, 201, 203, 204, 207, 208, 215, 219, 233, 236, 237, 243, 253, 255, 258, 262, 263, 267, 271, 272, 276, 278, 280, 291, 292, 321, 324, 339, 348, 353, 354, 369, 379, 380, 382, 384, 385, 386, 387, 391, 394, 396, 400, 403, 407, 408, 409, 410, 411, 413, 414, 416, 417, 418, 437, 443, 444, 447, 449, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 496, 503, 515, 524, 531, 533, 534, 537, 538, 542, 543, 545, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 575, 581, 582, 588, 590, 591, 592, 594, 595, 596, 598, 599, 600, 606, 610, 611, 629, 632, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 688, 689, 690, 692, 693, 696, 698, 701, 702, 709, 712, 720, 721, 722, 726, 739, 742, 743, 744, 745, 746, 747, 749, 750, 752, 763, 777, 781, 787, 788, 789, 790, 798, 799, 800, 801, 802, 804, 805, 807, 812, 816, 820, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 848, 849, 851, 852, 853, 856, 858, 859, 861, 862, 864, 866, 867, 868, 873, 874, 875, 880, 881, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 919, 920, 921, 922, 925, 952, 973, 976, 978, 979, 980, 982, 983, 984, 986, 990, 993, 997, 999, 1003, 1004, 1005, 1011, 1012, 1023, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "easili": [4, 9, 32, 91, 147, 174, 204, 217, 235, 237, 241, 244, 262, 264, 271, 290, 309, 382, 384, 396, 397, 410, 416, 417, 419, 449, 983, 985, 986, 999, 1003, 1004, 1005, 1017, 1020, 1025, 1037], "interpret": [4, 28, 150, 160, 168, 169, 170, 172, 175, 197, 201, 202, 206, 217, 219, 256, 262, 264, 265, 304, 308, 311, 319, 353, 355, 368, 380, 382, 383, 388, 390, 391, 396, 398, 407, 409, 410, 415, 417, 452, 464, 465, 467, 496, 541, 572, 611, 639, 643, 653, 672, 673, 691, 692, 695, 701, 728, 752, 757, 758, 782, 791, 792, 804, 813, 824, 825, 827, 830, 862, 874, 881, 957, 983, 985, 989, 990, 996, 999, 1005, 1009, 1011, 1016, 1024, 1031, 1032, 1036, 1039, 1044, 1045, 1046], "fraction": [4, 26, 28, 126, 201, 209, 219, 348, 354, 407, 413, 416, 438, 439, 449, 450, 456, 457, 515, 527, 557, 558, 559, 560, 564, 565, 566, 590, 593, 602, 666, 667, 668, 671, 676, 677, 678, 703, 721, 722, 723, 733, 793, 795, 800, 804, 825, 826, 840, 868, 903, 904, 905, 909, 910, 911, 912, 955, 985, 989, 992, 996, 997, 999, 1004, 1005, 1010, 1032, 1033, 1034, 1045], "maximum": [4, 8, 11, 17, 28, 34, 38, 58, 79, 80, 81, 82, 83, 92, 98, 113, 115, 118, 119, 122, 154, 156, 160, 168, 179, 189, 220, 240, 272, 287, 291, 292, 298, 307, 335, 336, 338, 339, 342, 344, 351, 354, 358, 360, 361, 368, 387, 388, 395, 396, 406, 407, 409, 411, 412, 414, 416, 417, 419, 420, 421, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 454, 457, 459, 461, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 482, 483, 484, 498, 509, 511, 512, 513, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 583, 584, 597, 610, 627, 631, 632, 635, 637, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 674, 676, 677, 678, 679, 682, 683, 685, 686, 687, 688, 689, 690, 692, 693, 694, 716, 743, 780, 796, 798, 801, 802, 804, 812, 819, 825, 850, 857, 858, 859, 865, 866, 870, 871, 873, 876, 877, 878, 880, 889, 890, 895, 896, 897, 898, 901, 902, 906, 909, 910, 911, 912, 913, 915, 918, 925, 978, 984, 985, 986, 988, 989, 991, 992, 993, 995, 999, 1003, 1004, 1005, 1011, 1024, 1038, 1039, 1041, 1042, 1045, 1046, 1048], "fit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 22, 25, 26, 28, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 62, 63, 64, 65, 66, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 141, 142, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 159, 160, 161, 162, 168, 170, 171, 172, 173, 174, 177, 179, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 196, 197, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 225, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 272, 273, 274, 275, 276, 280, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 298, 301, 302, 303, 304, 306, 308, 309, 310, 311, 312, 313, 315, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 348, 349, 350, 353, 354, 358, 359, 360, 361, 362, 368, 370, 371, 374, 377, 379, 382, 385, 387, 388, 391, 394, 396, 403, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 425, 427, 431, 432, 433, 434, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 501, 509, 510, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 575, 577, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 694, 697, 698, 700, 701, 702, 711, 722, 734, 749, 787, 796, 797, 798, 801, 802, 804, 812, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 930, 946, 947, 949, 957, 973, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1009, 1010, 1011, 1012, 1014, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "method": [4, 8, 12, 13, 18, 20, 21, 25, 26, 27, 28, 37, 38, 40, 41, 42, 45, 48, 50, 51, 53, 54, 55, 57, 58, 59, 60, 62, 66, 68, 69, 70, 73, 77, 80, 81, 85, 87, 88, 93, 96, 99, 101, 105, 106, 107, 111, 113, 118, 120, 121, 127, 133, 145, 146, 150, 165, 177, 188, 190, 202, 209, 218, 221, 223, 225, 226, 227, 228, 230, 234, 236, 237, 238, 240, 244, 246, 249, 254, 264, 267, 268, 269, 270, 271, 280, 285, 291, 292, 294, 307, 311, 314, 317, 319, 320, 343, 353, 354, 355, 362, 364, 368, 369, 370, 371, 374, 379, 380, 382, 383, 384, 388, 389, 391, 394, 395, 398, 400, 403, 405, 406, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 459, 462, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 504, 512, 514, 522, 525, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 705, 710, 711, 730, 731, 734, 735, 740, 741, 762, 767, 768, 773, 777, 782, 787, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 889, 890, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 916, 924, 938, 945, 946, 947, 948, 949, 950, 955, 958, 973, 974, 977, 978, 979, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1011, 1014, 1016, 1020, 1022, 1023, 1025, 1026, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "minim": [4, 12, 13, 58, 67, 79, 80, 126, 153, 161, 180, 197, 199, 201, 203, 205, 209, 219, 222, 233, 234, 247, 252, 263, 271, 272, 307, 317, 320, 337, 344, 348, 358, 371, 381, 382, 385, 390, 394, 396, 407, 409, 411, 414, 416, 440, 441, 445, 446, 450, 463, 538, 540, 547, 557, 558, 559, 560, 564, 565, 609, 610, 611, 641, 646, 649, 657, 658, 667, 671, 672, 674, 678, 679, 687, 692, 694, 695, 747, 779, 848, 850, 859, 877, 889, 895, 909, 910, 911, 912, 980, 985, 986, 989, 992, 993, 999, 1001, 1002, 1003, 1004, 1009, 1012, 1023, 1024, 1027, 1035, 1040, 1041], "squar": [4, 5, 13, 62, 72, 80, 81, 82, 85, 86, 88, 97, 98, 107, 116, 127, 129, 150, 153, 158, 168, 170, 171, 179, 180, 182, 183, 185, 190, 191, 197, 201, 203, 206, 211, 218, 219, 220, 233, 234, 236, 250, 276, 311, 319, 320, 322, 337, 353, 374, 379, 382, 388, 391, 396, 409, 411, 412, 414, 415, 416, 420, 421, 432, 440, 442, 443, 444, 446, 447, 449, 450, 457, 459, 460, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 501, 531, 537, 539, 541, 543, 547, 549, 552, 554, 556, 558, 559, 560, 562, 565, 568, 570, 590, 591, 592, 595, 596, 598, 599, 600, 604, 605, 606, 609, 611, 615, 622, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 682, 683, 685, 686, 687, 688, 690, 692, 694, 696, 709, 721, 722, 723, 749, 750, 757, 758, 762, 768, 769, 784, 789, 790, 827, 834, 835, 843, 844, 847, 849, 851, 852, 859, 862, 881, 901, 902, 904, 906, 907, 908, 910, 912, 936, 962, 975, 980, 982, 983, 992, 993, 997, 1003, 1005, 1011, 1012, 1023, 1024, 1027, 1031, 1034, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "estim": [4, 6, 7, 8, 9, 10, 11, 12, 13, 25, 27, 28, 31, 34, 35, 38, 39, 45, 46, 50, 51, 55, 56, 57, 58, 59, 62, 64, 72, 73, 74, 75, 84, 86, 87, 96, 97, 98, 102, 104, 106, 112, 113, 117, 118, 119, 120, 122, 124, 126, 127, 128, 130, 133, 134, 135, 136, 137, 139, 140, 148, 149, 150, 152, 153, 154, 156, 158, 160, 161, 162, 163, 164, 165, 167, 170, 171, 179, 182, 185, 189, 190, 191, 196, 201, 202, 203, 205, 206, 208, 209, 218, 219, 220, 229, 230, 231, 236, 242, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 259, 260, 262, 263, 264, 265, 266, 267, 269, 271, 272, 273, 274, 275, 276, 278, 279, 281, 283, 285, 286, 292, 296, 299, 307, 309, 312, 320, 321, 323, 343, 344, 348, 354, 355, 358, 359, 361, 368, 369, 370, 371, 374, 380, 382, 385, 386, 389, 390, 391, 392, 399, 400, 403, 404, 407, 409, 412, 414, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 490, 491, 492, 495, 496, 498, 501, 502, 524, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 575, 576, 577, 579, 580, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 684, 687, 688, 689, 690, 691, 692, 697, 698, 700, 701, 702, 707, 708, 711, 712, 713, 716, 718, 720, 721, 722, 723, 725, 726, 727, 728, 729, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 781, 782, 783, 784, 786, 787, 788, 789, 790, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 809, 810, 812, 814, 816, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 886, 887, 889, 890, 892, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 920, 921, 922, 924, 926, 927, 930, 932, 933, 934, 945, 946, 947, 949, 957, 973, 977, 984, 986, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1010, 1011, 1012, 1014, 1016, 1017, 1019, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "condit": [4, 12, 13, 26, 28, 83, 121, 126, 130, 168, 169, 171, 175, 190, 203, 206, 219, 237, 241, 265, 320, 362, 388, 394, 398, 406, 407, 409, 411, 414, 416, 418, 451, 464, 471, 472, 473, 478, 496, 513, 523, 524, 536, 539, 540, 541, 543, 545, 547, 549, 550, 562, 627, 632, 633, 643, 650, 651, 652, 654, 655, 656, 670, 672, 673, 674, 675, 682, 683, 687, 697, 712, 717, 718, 735, 736, 794, 836, 837, 838, 839, 840, 859, 862, 865, 874, 875, 878, 882, 938, 983, 985, 986, 987, 989, 991, 992, 994, 999, 1005, 1009, 1011, 1023, 1027, 1032, 1034, 1035, 1036, 1038, 1039, 1041, 1043, 1045, 1046, 1047], "median": [4, 13, 38, 72, 76, 81, 82, 126, 165, 166, 171, 203, 207, 218, 232, 240, 307, 318, 320, 321, 377, 411, 416, 418, 440, 454, 458, 461, 474, 552, 554, 558, 565, 597, 627, 630, 635, 670, 671, 679, 721, 752, 848, 879, 891, 910, 912, 979, 999, 1005, 1034, 1035], "nevertheless": [4, 174, 416], "measur": [4, 7, 8, 10, 11, 13, 20, 26, 38, 39, 50, 59, 61, 62, 97, 116, 117, 126, 129, 136, 150, 153, 158, 168, 170, 171, 172, 177, 190, 195, 200, 201, 205, 207, 219, 255, 260, 262, 268, 269, 275, 278, 312, 344, 353, 354, 368, 377, 379, 384, 388, 396, 406, 408, 411, 413, 414, 415, 416, 417, 449, 452, 462, 498, 515, 538, 540, 547, 551, 557, 558, 559, 560, 563, 564, 565, 604, 607, 608, 611, 627, 631, 658, 690, 692, 698, 702, 704, 705, 707, 709, 712, 713, 716, 717, 720, 724, 725, 726, 728, 730, 735, 736, 738, 739, 742, 746, 754, 755, 756, 781, 782, 783, 785, 786, 788, 791, 794, 822, 824, 827, 847, 878, 890, 909, 910, 911, 912, 979, 985, 987, 992, 994, 995, 997, 1003, 1005, 1011, 1020, 1023, 1031, 1034, 1036, 1037, 1039, 1041], "test": [4, 6, 8, 10, 11, 13, 17, 25, 26, 27, 28, 32, 33, 34, 55, 71, 72, 86, 101, 113, 116, 118, 119, 120, 121, 125, 126, 127, 128, 139, 142, 144, 146, 149, 151, 153, 154, 168, 170, 171, 172, 173, 174, 177, 185, 190, 196, 197, 200, 201, 202, 203, 204, 205, 208, 209, 216, 217, 219, 226, 231, 236, 237, 239, 249, 255, 256, 257, 260, 261, 262, 263, 264, 266, 267, 269, 270, 272, 273, 274, 278, 283, 288, 293, 294, 301, 303, 309, 311, 312, 313, 314, 324, 331, 340, 348, 355, 364, 368, 369, 376, 377, 379, 385, 386, 387, 388, 394, 395, 396, 398, 399, 402, 404, 405, 407, 410, 411, 414, 416, 417, 418, 419, 426, 428, 432, 435, 436, 437, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 488, 489, 493, 497, 498, 502, 504, 524, 531, 537, 539, 543, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 592, 594, 595, 596, 598, 599, 600, 602, 604, 605, 606, 608, 609, 610, 611, 627, 628, 630, 635, 636, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 712, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 848, 851, 852, 858, 859, 861, 886, 887, 889, 890, 891, 892, 896, 897, 899, 901, 902, 903, 904, 906, 907, 909, 910, 911, 912, 930, 932, 933, 984, 985, 988, 989, 992, 993, 997, 999, 1003, 1004, 1005, 1009, 1010, 1011, 1013, 1014, 1017, 1020, 1021, 1027, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047], "discuss": [4, 54, 59, 150, 171, 190, 222, 227, 265, 280, 353, 364, 370, 377, 379, 382, 387, 388, 390, 394, 396, 397, 409, 411, 415, 416, 419, 498, 682, 683, 843, 844, 849, 851, 852, 979, 983, 985, 986, 989, 992, 999, 1006, 1010, 1034], "choos": [4, 11, 12, 45, 46, 47, 51, 54, 61, 63, 67, 79, 102, 103, 122, 133, 139, 140, 150, 171, 174, 194, 238, 257, 267, 274, 358, 364, 368, 369, 370, 371, 384, 387, 390, 396, 409, 411, 413, 416, 417, 420, 443, 444, 447, 449, 459, 523, 532, 538, 559, 560, 582, 602, 658, 659, 672, 674, 679, 687, 688, 689, 693, 725, 755, 798, 801, 802, 812, 868, 901, 902, 909, 910, 911, 912, 979, 980, 984, 985, 986, 987, 988, 992, 999, 1002, 1003, 1004, 1017, 1019, 1023, 1024, 1033, 1034, 1038, 1040, 1042], "focu": [4, 9, 28, 96, 113, 153, 253, 295, 368, 387, 407, 416, 553, 554, 559, 561, 562, 678, 986, 992, 999, 1009, 1010], "root": [4, 17, 81, 150, 182, 362, 379, 382, 390, 409, 442, 501, 541, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 639, 749, 750, 789, 790, 909, 910, 911, 912, 913, 915, 989, 995, 1005, 1033, 1039, 1040, 1041, 1042, 1045, 1046], "becaus": [4, 5, 13, 20, 26, 28, 41, 48, 51, 72, 83, 87, 113, 118, 121, 126, 150, 154, 157, 160, 171, 172, 174, 181, 187, 194, 201, 205, 207, 209, 219, 236, 237, 248, 259, 262, 263, 268, 283, 285, 302, 303, 304, 307, 311, 312, 313, 314, 329, 340, 344, 353, 354, 355, 358, 362, 364, 368, 369, 377, 380, 384, 387, 390, 394, 395, 396, 400, 403, 406, 407, 409, 410, 413, 414, 415, 416, 417, 419, 422, 432, 447, 448, 461, 465, 475, 482, 483, 484, 534, 536, 552, 554, 556, 558, 560, 562, 565, 568, 570, 588, 591, 607, 608, 611, 632, 633, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 672, 673, 676, 677, 678, 679, 680, 689, 699, 709, 712, 713, 721, 722, 723, 745, 762, 784, 787, 793, 798, 812, 825, 829, 834, 835, 844, 847, 849, 851, 852, 853, 859, 870, 871, 879, 881, 882, 886, 887, 889, 890, 891, 892, 902, 904, 907, 910, 912, 953, 979, 981, 982, 983, 984, 985, 986, 987, 989, 990, 992, 994, 996, 999, 1004, 1005, 1014, 1024, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1047], "intuit": [4, 13, 32, 45, 53, 63, 101, 113, 116, 123, 145, 153, 171, 172, 202, 203, 224, 230, 263, 280, 290, 309, 312, 337, 340, 344, 354, 382, 396, 407, 409, 411, 413, 415, 781, 782, 783, 786, 872, 903, 906, 981, 985, 986, 989, 990, 996, 999, 1000, 1004, 1014, 1023, 1025, 1031], "studi": [4, 61, 126, 201, 219, 265, 268, 269, 353, 377, 379, 413, 418, 696, 708, 757, 758, 826, 987, 989, 1003, 1016], "metric": [4, 6, 7, 11, 13, 20, 21, 22, 25, 26, 27, 31, 33, 37, 39, 43, 45, 48, 49, 50, 53, 59, 61, 63, 65, 69, 71, 76, 83, 113, 118, 124, 125, 127, 128, 133, 147, 150, 154, 165, 168, 170, 171, 173, 185, 190, 196, 197, 201, 203, 205, 207, 219, 225, 231, 234, 235, 240, 243, 255, 256, 258, 259, 260, 262, 263, 265, 269, 271, 272, 278, 283, 285, 287, 295, 298, 304, 307, 312, 317, 318, 320, 321, 322, 323, 324, 327, 328, 330, 331, 353, 354, 364, 368, 371, 374, 377, 382, 384, 394, 395, 396, 398, 400, 404, 407, 414, 415, 416, 419, 420, 426, 437, 441, 444, 445, 446, 450, 457, 469, 520, 535, 549, 550, 551, 553, 555, 557, 558, 559, 561, 562, 564, 565, 567, 569, 578, 602, 610, 620, 628, 631, 634, 638, 639, 640, 641, 642, 643, 658, 659, 663, 666, 668, 674, 675, 676, 688, 690, 692, 694, 696, 798, 801, 802, 804, 812, 820, 822, 823, 824, 826, 829, 830, 831, 832, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 858, 867, 873, 896, 897, 901, 903, 906, 909, 911, 979, 981, 984, 986, 990, 995, 997, 1009, 1010, 1011, 1020, 1021, 1025, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "ones": [4, 11, 35, 44, 56, 72, 82, 124, 129, 153, 177, 185, 205, 206, 230, 233, 237, 262, 270, 273, 292, 311, 328, 350, 368, 369, 382, 390, 396, 409, 411, 413, 416, 450, 532, 566, 581, 610, 611, 644, 645, 658, 659, 670, 676, 703, 795, 800, 805, 816, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 876, 880, 943, 985, 989, 994, 995, 999, 1004, 1023, 1031, 1039, 1040, 1041], "term": [4, 14, 15, 26, 33, 59, 101, 116, 119, 123, 126, 158, 170, 185, 189, 190, 201, 203, 205, 215, 218, 219, 240, 260, 264, 285, 301, 320, 344, 348, 353, 355, 370, 371, 382, 384, 386, 394, 403, 407, 408, 409, 411, 413, 414, 416, 443, 447, 449, 452, 459, 462, 524, 535, 538, 540, 544, 547, 549, 588, 589, 590, 591, 604, 607, 608, 632, 633, 640, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 672, 673, 674, 675, 676, 678, 680, 687, 695, 728, 729, 737, 782, 783, 786, 858, 859, 876, 880, 883, 901, 902, 903, 904, 905, 906, 907, 978, 980, 981, 983, 984, 985, 986, 989, 990, 991, 993, 994, 999, 1003, 1004, 1016, 1025, 1039, 1045, 1046, 1047], "y": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 25, 26, 27, 28, 31, 32, 34, 35, 40, 41, 43, 44, 45, 46, 53, 55, 57, 58, 61, 62, 63, 66, 67, 72, 73, 74, 75, 76, 82, 86, 87, 92, 93, 98, 100, 101, 102, 103, 105, 106, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 142, 145, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 170, 171, 172, 173, 174, 177, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 216, 217, 219, 222, 223, 224, 227, 231, 233, 234, 235, 236, 237, 238, 240, 241, 243, 244, 247, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 358, 359, 360, 361, 362, 364, 374, 375, 376, 377, 380, 382, 384, 387, 389, 391, 395, 396, 400, 403, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 422, 426, 427, 428, 431, 432, 433, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 498, 500, 502, 505, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 526, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 697, 698, 699, 700, 701, 702, 706, 711, 725, 734, 740, 741, 755, 757, 758, 759, 760, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 787, 788, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 921, 926, 927, 949, 951, 952, 953, 957, 960, 963, 976, 978, 979, 980, 981, 983, 984, 985, 987, 989, 990, 991, 992, 993, 994, 996, 999, 1003, 1004, 1005, 1010, 1016, 1020, 1021, 1023, 1027, 1028, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "hist": [4, 26, 28, 54, 76, 115, 119, 201, 203, 234, 240, 268, 290, 307, 311, 313, 321, 324, 416], "bin": [4, 25, 26, 28, 54, 76, 115, 119, 201, 234, 240, 268, 290, 307, 308, 309, 310, 311, 313, 314, 380, 390, 399, 407, 415, 416, 438, 439, 448, 461, 561, 562, 864, 866, 880, 940, 1024, 1039, 1040, 1041, 1045], "30": [4, 8, 10, 15, 20, 35, 40, 41, 45, 55, 61, 72, 74, 79, 93, 102, 104, 113, 122, 126, 132, 139, 150, 153, 154, 157, 159, 172, 177, 180, 195, 199, 201, 219, 222, 223, 227, 235, 239, 240, 251, 262, 267, 276, 280, 285, 294, 295, 311, 312, 313, 322, 323, 327, 328, 332, 338, 341, 343, 346, 368, 377, 379, 387, 388, 413, 417, 420, 444, 450, 457, 500, 531, 535, 537, 538, 539, 541, 543, 570, 592, 595, 596, 598, 648, 692, 734, 782, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 882, 897, 910, 978, 983, 989, 990, 992, 997, 1021, 1031, 1032, 1038, 1039, 1040], "rent": 4, "fleet": 4, "input": [4, 6, 10, 32, 34, 74, 96, 100, 122, 126, 127, 159, 160, 161, 171, 177, 180, 201, 204, 205, 209, 216, 219, 233, 234, 236, 237, 244, 257, 280, 289, 290, 303, 308, 309, 310, 311, 317, 320, 322, 340, 344, 346, 349, 355, 376, 379, 382, 385, 387, 391, 392, 394, 395, 396, 406, 407, 410, 413, 414, 415, 416, 417, 418, 419, 421, 427, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 445, 448, 449, 450, 454, 457, 458, 461, 464, 465, 467, 468, 469, 471, 472, 482, 483, 484, 489, 503, 509, 516, 517, 518, 520, 524, 528, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 611, 620, 622, 627, 628, 629, 630, 631, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 685, 686, 687, 688, 689, 690, 692, 693, 696, 697, 698, 699, 700, 701, 702, 721, 722, 723, 727, 744, 745, 747, 749, 750, 752, 753, 760, 766, 770, 771, 773, 777, 778, 779, 780, 784, 789, 790, 796, 797, 798, 801, 802, 804, 812, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 847, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 888, 889, 893, 894, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 918, 919, 920, 921, 922, 923, 927, 932, 937, 946, 948, 949, 953, 962, 964, 970, 975, 976, 979, 981, 983, 985, 986, 987, 988, 989, 991, 992, 993, 994, 996, 997, 1001, 1002, 1003, 1004, 1005, 1009, 1010, 1014, 1016, 1020, 1021, 1027, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "annot": [4, 9, 27, 135, 177, 223, 266, 269, 353, 382, 383, 384, 409, 716, 915, 989, 1005, 1040], "log": [4, 21, 26, 27, 28, 79, 96, 113, 124, 126, 133, 146, 150, 154, 155, 157, 158, 159, 162, 186, 189, 190, 194, 201, 206, 211, 219, 234, 236, 251, 295, 312, 353, 377, 379, 380, 382, 386, 390, 391, 396, 406, 407, 409, 410, 411, 414, 416, 417, 419, 448, 451, 460, 465, 470, 471, 472, 473, 474, 475, 476, 532, 536, 541, 549, 550, 551, 553, 555, 557, 559, 562, 564, 590, 591, 593, 594, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 642, 645, 648, 658, 659, 669, 671, 676, 680, 740, 750, 754, 796, 797, 798, 801, 802, 812, 836, 837, 838, 839, 840, 841, 842, 846, 857, 858, 865, 866, 895, 898, 903, 906, 908, 909, 911, 936, 978, 981, 983, 985, 986, 991, 992, 994, 997, 999, 1003, 1005, 1009, 1010, 1023, 1033, 1034, 1035, 1040, 1041, 1042, 1045], "describ": [4, 13, 57, 133, 150, 171, 219, 235, 262, 271, 364, 368, 369, 375, 377, 379, 381, 382, 384, 387, 390, 396, 397, 406, 409, 411, 412, 413, 414, 416, 417, 462, 469, 473, 474, 491, 493, 495, 496, 497, 500, 501, 502, 503, 504, 505, 510, 516, 517, 518, 528, 607, 608, 645, 659, 668, 714, 796, 797, 836, 838, 876, 938, 978, 981, 984, 985, 988, 989, 991, 995, 1003, 1004, 1005, 1013, 1016, 1022, 1023, 1039, 1041], "weather": [4, 13, 158, 172, 985, 989], "includ": [4, 33, 35, 56, 81, 119, 123, 124, 125, 170, 171, 173, 185, 201, 205, 219, 237, 263, 280, 285, 302, 307, 320, 321, 323, 340, 345, 353, 355, 364, 368, 369, 376, 378, 380, 382, 383, 384, 386, 387, 388, 390, 391, 396, 397, 399, 406, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 420, 444, 446, 450, 456, 466, 469, 470, 471, 472, 473, 474, 475, 476, 489, 490, 491, 496, 500, 501, 502, 504, 505, 510, 534, 541, 557, 564, 574, 632, 638, 646, 647, 652, 660, 661, 662, 665, 681, 688, 689, 697, 713, 728, 729, 734, 736, 737, 770, 782, 783, 786, 794, 798, 800, 801, 802, 811, 812, 815, 818, 824, 827, 849, 851, 852, 853, 874, 875, 876, 880, 898, 901, 902, 909, 911, 913, 915, 921, 922, 925, 927, 930, 946, 978, 985, 988, 989, 990, 992, 993, 999, 1003, 1004, 1005, 1009, 1010, 1013, 1014, 1023, 1025, 1031, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "both": [4, 5, 7, 9, 10, 13, 15, 17, 21, 26, 27, 35, 43, 55, 56, 65, 72, 79, 81, 86, 87, 101, 104, 111, 116, 119, 120, 123, 124, 132, 133, 136, 145, 146, 150, 153, 160, 162, 170, 171, 172, 173, 180, 185, 187, 189, 190, 201, 202, 203, 205, 206, 207, 209, 219, 226, 236, 237, 238, 247, 248, 249, 250, 251, 252, 262, 263, 264, 265, 269, 271, 273, 277, 285, 297, 307, 311, 312, 317, 319, 323, 329, 330, 337, 342, 344, 353, 354, 355, 362, 364, 368, 369, 370, 375, 376, 377, 378, 380, 382, 384, 388, 389, 391, 394, 395, 396, 397, 399, 400, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 419, 422, 437, 446, 447, 452, 459, 462, 468, 475, 482, 483, 484, 485, 488, 489, 496, 497, 500, 502, 505, 507, 508, 509, 534, 538, 540, 547, 551, 555, 556, 557, 563, 564, 565, 566, 567, 577, 588, 589, 591, 597, 607, 608, 627, 632, 633, 643, 657, 658, 659, 672, 674, 676, 678, 687, 699, 704, 712, 716, 728, 729, 730, 735, 737, 756, 760, 766, 773, 777, 782, 783, 786, 787, 788, 794, 801, 802, 804, 820, 830, 858, 859, 873, 875, 877, 889, 894, 899, 901, 902, 909, 911, 925, 939, 952, 964, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 999, 1002, 1003, 1004, 1005, 1009, 1010, 1013, 1014, 1020, 1023, 1024, 1025, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "numer": [4, 13, 20, 67, 72, 76, 121, 123, 133, 150, 158, 161, 172, 173, 190, 201, 219, 240, 242, 244, 295, 313, 320, 324, 355, 376, 377, 379, 385, 387, 388, 394, 395, 396, 409, 411, 416, 417, 418, 419, 421, 422, 440, 443, 447, 459, 471, 472, 475, 478, 489, 490, 491, 496, 500, 501, 502, 504, 505, 510, 531, 533, 535, 540, 547, 561, 562, 567, 581, 590, 611, 617, 620, 627, 630, 632, 633, 646, 652, 654, 672, 687, 690, 694, 714, 787, 793, 798, 801, 802, 804, 812, 820, 823, 824, 825, 828, 836, 837, 838, 839, 840, 858, 859, 864, 869, 874, 875, 882, 913, 914, 915, 921, 922, 937, 938, 978, 979, 985, 986, 990, 997, 999, 1000, 1005, 1013, 1014, 1016, 1025, 1031, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "categor": [4, 72, 112, 118, 133, 137, 168, 171, 172, 173, 201, 219, 240, 242, 244, 265, 280, 314, 320, 322, 323, 370, 374, 376, 377, 384, 387, 396, 410, 417, 466, 467, 489, 490, 496, 505, 561, 562, 581, 582, 607, 608, 632, 633, 648, 658, 659, 669, 680, 709, 824, 836, 837, 838, 839, 840, 862, 864, 868, 869, 872, 874, 875, 882, 896, 897, 979, 985, 996, 997, 1005, 1009, 1010, 1011, 1012, 1013, 1014, 1025, 1027, 1031, 1032, 1035, 1036, 1039, 1041, 1043, 1046, 1047, 1048], "inform": [4, 5, 8, 11, 12, 14, 26, 28, 34, 35, 38, 39, 50, 54, 59, 67, 68, 71, 72, 87, 90, 91, 92, 103, 119, 120, 121, 144, 146, 147, 149, 150, 151, 153, 158, 168, 171, 172, 174, 177, 179, 180, 181, 185, 202, 205, 209, 216, 218, 219, 220, 237, 241, 249, 250, 252, 257, 259, 262, 263, 264, 267, 269, 271, 288, 291, 292, 295, 314, 320, 324, 343, 348, 353, 354, 355, 359, 362, 364, 368, 371, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 387, 388, 390, 394, 395, 396, 397, 400, 403, 406, 413, 414, 416, 417, 418, 419, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 462, 464, 469, 470, 471, 473, 474, 475, 476, 482, 483, 484, 485, 492, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 510, 515, 524, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 606, 607, 608, 609, 610, 611, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 674, 676, 677, 678, 679, 680, 687, 688, 689, 690, 691, 692, 695, 697, 701, 704, 705, 715, 725, 729, 742, 754, 755, 756, 785, 787, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 824, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 886, 887, 889, 890, 891, 892, 893, 894, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 915, 946, 979, 981, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 999, 1000, 1003, 1005, 1010, 1011, 1014, 1022, 1023, 1024, 1025, 1031, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "alreadi": [4, 6, 10, 17, 56, 59, 91, 101, 113, 133, 150, 171, 231, 238, 240, 243, 263, 269, 285, 320, 323, 382, 383, 387, 394, 396, 407, 411, 413, 415, 416, 421, 437, 499, 523, 533, 567, 568, 634, 646, 649, 664, 665, 666, 667, 668, 674, 676, 677, 678, 685, 686, 767, 836, 856, 864, 870, 871, 873, 878, 898, 901, 902, 924, 948, 978, 981, 995, 999, 1000, 1010, 1016, 1021, 1025, 1028, 1032, 1036, 1039, 1043, 1044, 1045, 1046], "expand": [4, 17, 50, 66, 232, 313, 318, 364, 374, 416, 444, 450, 499, 557, 558, 559, 560, 564, 565, 566, 909, 910, 911, 912, 989, 1032, 1039, 1040, 1047], "complementari": [4, 417], "column": [4, 8, 13, 21, 22, 61, 70, 73, 76, 77, 91, 120, 122, 123, 126, 130, 133, 150, 158, 165, 168, 170, 171, 172, 173, 174, 190, 201, 202, 205, 209, 219, 232, 239, 240, 241, 244, 252, 262, 263, 273, 274, 283, 303, 312, 313, 314, 319, 320, 321, 322, 324, 353, 354, 355, 368, 376, 377, 379, 382, 384, 388, 391, 394, 395, 396, 406, 409, 410, 412, 414, 416, 417, 418, 421, 424, 451, 453, 464, 466, 467, 471, 472, 478, 487, 488, 489, 490, 491, 492, 494, 496, 500, 501, 502, 504, 505, 508, 509, 510, 511, 513, 515, 526, 531, 534, 537, 541, 542, 548, 555, 557, 558, 561, 562, 564, 565, 566, 567, 581, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 610, 627, 630, 632, 633, 634, 646, 648, 652, 658, 660, 662, 664, 665, 669, 680, 685, 686, 697, 713, 718, 719, 728, 729, 737, 753, 762, 767, 768, 769, 772, 782, 783, 786, 787, 798, 801, 802, 812, 822, 827, 832, 835, 836, 837, 838, 839, 840, 841, 842, 861, 865, 866, 867, 868, 874, 875, 876, 880, 881, 882, 883, 885, 901, 903, 906, 909, 911, 917, 921, 922, 927, 938, 952, 965, 966, 968, 976, 978, 979, 981, 985, 987, 989, 990, 997, 999, 1004, 1010, 1011, 1031, 1033, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "x": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 25, 26, 27, 28, 31, 32, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 80, 81, 82, 83, 86, 87, 92, 93, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 142, 145, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 222, 223, 224, 227, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 364, 368, 375, 376, 377, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 395, 396, 400, 403, 407, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 426, 427, 428, 430, 431, 432, 433, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 487, 493, 494, 495, 498, 500, 501, 502, 505, 506, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 706, 710, 711, 724, 734, 741, 757, 758, 759, 760, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 787, 791, 792, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 925, 937, 938, 940, 949, 950, 957, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 978, 979, 980, 981, 983, 984, 985, 986, 987, 989, 990, 991, 992, 993, 994, 995, 996, 999, 1001, 1002, 1003, 1004, 1005, 1010, 1016, 1020, 1021, 1023, 1024, 1025, 1028, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048], "drop": [4, 5, 13, 72, 76, 87, 158, 170, 171, 172, 174, 201, 205, 219, 240, 244, 272, 313, 319, 322, 324, 354, 386, 390, 410, 414, 416, 464, 467, 567, 568, 569, 570, 695, 700, 702, 781, 788, 860, 874, 880, 979, 985, 989, 997, 999, 1009, 1031, 1032, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "axi": [4, 5, 7, 11, 12, 13, 14, 15, 18, 20, 26, 27, 38, 40, 41, 48, 49, 51, 53, 54, 55, 56, 62, 72, 73, 76, 83, 87, 92, 93, 96, 97, 98, 99, 100, 106, 115, 116, 120, 122, 129, 132, 136, 142, 146, 157, 158, 162, 165, 170, 171, 182, 186, 188, 190, 193, 194, 195, 201, 206, 210, 213, 215, 216, 218, 219, 223, 224, 227, 230, 234, 235, 239, 247, 249, 251, 252, 258, 259, 263, 264, 269, 271, 272, 283, 285, 290, 291, 292, 295, 296, 297, 304, 307, 311, 314, 324, 328, 330, 332, 336, 339, 340, 343, 345, 346, 347, 348, 350, 353, 354, 359, 360, 361, 362, 384, 391, 396, 407, 409, 417, 421, 438, 445, 464, 467, 531, 533, 536, 537, 539, 541, 543, 550, 585, 612, 631, 632, 685, 686, 701, 762, 778, 779, 780, 781, 804, 820, 829, 870, 871, 878, 879, 881, 886, 887, 888, 890, 891, 892, 915, 917, 921, 922, 940, 964, 970, 979, 989, 996, 999, 1004, 1022, 1024, 1039, 1041, 1043, 1048], "holidai": [4, 172], "workingdai": [4, 172], "temp": [4, 13, 172], "feel_temp": [4, 13, 172], "humid": [4, 13, 172, 996], "windspe": [4, 13, 172], "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 368, 369, 376, 377, 379, 380, 382, 383, 384, 386, 387, 388, 389, 391, 394, 395, 396, 399, 400, 401, 402, 403, 405, 406, 407, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 712, 713, 714, 715, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 758, 759, 760, 762, 763, 765, 766, 767, 768, 770, 772, 774, 775, 776, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 919, 921, 922, 927, 932, 933, 935, 937, 938, 940, 941, 942, 943, 950, 951, 952, 954, 955, 957, 959, 960, 963, 964, 970, 978, 979, 981, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1009, 1010, 1011, 1012, 1016, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029], "spring": [4, 13, 172], "fals": [4, 5, 7, 8, 10, 11, 14, 15, 17, 21, 22, 25, 27, 28, 33, 34, 35, 40, 43, 45, 47, 48, 55, 56, 65, 68, 71, 72, 73, 74, 80, 82, 93, 100, 102, 105, 106, 113, 119, 120, 123, 126, 127, 136, 139, 153, 158, 159, 160, 161, 171, 172, 173, 174, 180, 181, 185, 187, 201, 202, 206, 207, 209, 217, 219, 222, 225, 237, 238, 240, 244, 247, 259, 260, 262, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 285, 289, 295, 298, 302, 303, 307, 308, 313, 314, 317, 319, 320, 321, 322, 324, 329, 340, 342, 348, 349, 353, 354, 376, 382, 383, 384, 387, 396, 400, 407, 409, 410, 411, 413, 414, 416, 417, 418, 419, 421, 422, 434, 435, 436, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 512, 515, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 635, 637, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 694, 695, 697, 698, 699, 700, 701, 702, 703, 708, 709, 711, 712, 713, 714, 715, 718, 725, 726, 727, 728, 729, 730, 737, 741, 742, 749, 750, 753, 755, 760, 762, 766, 768, 773, 777, 781, 782, 783, 784, 786, 788, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 809, 812, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 919, 920, 921, 922, 932, 939, 950, 951, 954, 955, 959, 960, 963, 970, 975, 976, 978, 979, 985, 989, 992, 999, 1003, 1004, 1024, 1025, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "6": [4, 8, 9, 10, 11, 12, 13, 17, 20, 27, 32, 33, 34, 41, 45, 47, 50, 51, 53, 57, 58, 61, 62, 63, 64, 65, 66, 68, 74, 75, 76, 77, 79, 80, 81, 83, 86, 91, 96, 98, 106, 114, 126, 127, 130, 132, 139, 145, 150, 151, 153, 156, 158, 160, 161, 165, 166, 171, 172, 174, 177, 180, 181, 182, 185, 190, 194, 199, 201, 202, 203, 205, 215, 217, 219, 222, 223, 224, 226, 228, 230, 233, 234, 238, 241, 242, 247, 248, 249, 250, 252, 253, 256, 257, 260, 261, 262, 263, 264, 265, 267, 271, 272, 273, 274, 277, 283, 287, 290, 298, 301, 303, 304, 307, 309, 311, 312, 314, 317, 320, 321, 322, 323, 324, 327, 328, 331, 332, 333, 340, 341, 343, 345, 348, 350, 354, 355, 361, 364, 376, 377, 379, 380, 382, 387, 388, 395, 399, 401, 402, 407, 409, 410, 413, 414, 416, 417, 418, 441, 445, 446, 448, 449, 450, 451, 452, 453, 462, 482, 483, 484, 485, 505, 524, 527, 530, 537, 538, 539, 540, 541, 546, 547, 553, 561, 562, 563, 569, 570, 593, 594, 611, 614, 615, 625, 627, 628, 630, 644, 645, 670, 676, 677, 689, 693, 699, 721, 727, 737, 741, 744, 745, 749, 750, 752, 768, 784, 787, 789, 796, 797, 799, 800, 805, 807, 808, 810, 815, 816, 819, 822, 823, 824, 825, 827, 836, 837, 838, 840, 841, 842, 849, 851, 852, 853, 868, 869, 871, 874, 876, 879, 880, 885, 916, 938, 941, 943, 952, 978, 979, 983, 985, 986, 989, 999, 1000, 1003, 1004, 1005, 1007, 1016, 1020, 1021, 1023, 1029, 1032, 1033, 1034, 1039, 1044, 1048], "clear": [4, 17, 56, 61, 73, 171, 172, 312, 377, 381, 382, 384, 394, 395, 396, 407, 410, 415, 915, 916, 978, 983, 1042, 1043, 1044], "9": [4, 7, 8, 9, 12, 13, 14, 25, 27, 28, 32, 33, 35, 43, 45, 51, 56, 59, 63, 65, 75, 83, 86, 92, 122, 123, 125, 126, 131, 133, 139, 141, 142, 150, 156, 160, 166, 170, 171, 172, 182, 183, 192, 201, 214, 215, 218, 219, 222, 225, 234, 235, 244, 247, 248, 249, 250, 256, 265, 269, 271, 283, 287, 289, 290, 293, 294, 295, 301, 302, 304, 307, 309, 310, 311, 313, 314, 322, 323, 327, 328, 330, 331, 332, 340, 344, 350, 355, 364, 379, 380, 388, 395, 399, 401, 402, 407, 410, 411, 413, 416, 417, 439, 443, 450, 457, 482, 483, 484, 485, 490, 520, 527, 534, 538, 539, 540, 547, 560, 567, 570, 583, 591, 607, 608, 627, 630, 634, 639, 647, 658, 661, 692, 699, 709, 722, 725, 740, 747, 768, 777, 778, 779, 796, 799, 801, 802, 816, 819, 825, 827, 830, 838, 839, 843, 844, 849, 852, 858, 859, 867, 873, 876, 938, 942, 978, 984, 985, 989, 993, 999, 1003, 1004, 1007, 1016, 1020, 1025, 1029, 1032, 1033, 1034, 1036, 1045, 1047], "84": [4, 6, 71, 99, 147, 192, 219, 309, 327, 364, 379, 416, 417, 787, 812, 989, 999, 1021], "14": [4, 11, 13, 16, 39, 50, 61, 63, 64, 67, 75, 82, 101, 137, 145, 172, 185, 190, 192, 219, 223, 224, 228, 230, 235, 240, 261, 267, 268, 276, 278, 283, 285, 304, 310, 311, 322, 347, 350, 369, 377, 379, 380, 395, 399, 401, 402, 409, 413, 498, 510, 553, 554, 585, 586, 635, 643, 692, 812, 816, 867, 982, 985, 989, 999, 1004, 1007, 1011, 1016, 1029, 1031, 1032, 1034, 1035, 1039, 1044], "395": 4, "81": [4, 8, 51, 244, 327, 328, 409, 699, 787, 798, 812, 989, 990, 992, 999], "0000": [4, 322], "02": [4, 12, 13, 16, 29, 31, 36, 45, 51, 53, 59, 63, 65, 69, 77, 83, 84, 86, 96, 99, 115, 122, 137, 150, 155, 160, 163, 170, 171, 175, 182, 219, 228, 230, 238, 240, 245, 257, 263, 269, 278, 290, 299, 301, 304, 305, 307, 309, 315, 332, 336, 354, 359, 376, 379, 387, 413, 441, 445, 597, 658, 676, 798, 812, 880, 896, 910, 985, 1011], "13": [4, 6, 10, 11, 13, 23, 45, 75, 101, 106, 122, 125, 127, 150, 165, 171, 175, 177, 187, 210, 227, 256, 263, 266, 268, 299, 304, 307, 311, 340, 377, 379, 382, 388, 395, 413, 421, 510, 513, 532, 533, 551, 552, 582, 635, 639, 733, 816, 845, 860, 867, 893, 894, 985, 989, 990, 995, 996, 999, 1004, 1007, 1011, 1016, 1029, 1031, 1033, 1034, 1037, 1038, 1039, 1040, 1043], "635": [4, 616], "80": [4, 6, 11, 17, 28, 68, 82, 102, 133, 142, 147, 172, 180, 238, 309, 313, 327, 343, 345, 353, 360, 364, 377, 379, 382, 407, 413, 418, 444, 510, 541, 713, 798, 812, 882, 895, 914, 978, 984, 985, 989, 996, 1002, 1005, 1025], "75": [4, 6, 7, 10, 13, 34, 45, 56, 83, 116, 147, 160, 161, 166, 171, 177, 180, 183, 192, 208, 219, 244, 249, 250, 262, 271, 275, 290, 307, 320, 350, 353, 364, 449, 551, 658, 706, 712, 733, 738, 744, 752, 755, 793, 798, 879, 891, 898, 914, 989, 991, 999, 1005, 1008, 1021, 1033], "17374": [4, 13], "19": [4, 13, 158, 163, 171, 177, 178, 205, 252, 311, 312, 328, 354, 379, 380, 386, 396, 399, 401, 402, 409, 410, 417, 420, 444, 492, 516, 517, 518, 536, 540, 541, 547, 549, 550, 557, 558, 559, 560, 564, 565, 566, 582, 589, 648, 658, 659, 666, 667, 668, 671, 672, 674, 676, 678, 687, 707, 780, 784, 798, 812, 824, 829, 830, 832, 833, 847, 848, 867, 878, 899, 903, 906, 909, 910, 911, 912, 978, 989, 999, 1007, 1011, 1029, 1031, 1032, 1033, 1034, 1036, 1039, 1048], "misti": [4, 172], "10": [4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 26, 27, 28, 31, 32, 33, 38, 40, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 72, 73, 75, 79, 80, 81, 82, 83, 86, 87, 93, 98, 99, 100, 101, 102, 106, 107, 113, 115, 116, 118, 119, 120, 122, 123, 124, 126, 127, 130, 131, 134, 136, 140, 142, 143, 147, 150, 154, 155, 157, 159, 160, 162, 163, 165, 166, 170, 171, 172, 173, 174, 177, 180, 185, 191, 192, 194, 195, 199, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 216, 217, 218, 219, 223, 224, 230, 233, 234, 235, 236, 237, 239, 240, 241, 243, 250, 251, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 270, 273, 276, 278, 280, 283, 290, 301, 302, 303, 304, 307, 308, 310, 311, 312, 317, 318, 319, 320, 321, 323, 324, 327, 328, 329, 331, 338, 339, 340, 342, 343, 345, 347, 348, 350, 353, 354, 355, 364, 368, 376, 377, 378, 379, 382, 384, 387, 388, 394, 395, 396, 399, 400, 406, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 422, 438, 443, 447, 449, 451, 452, 453, 459, 460, 462, 475, 492, 493, 500, 501, 502, 504, 510, 511, 512, 513, 516, 520, 521, 524, 528, 531, 535, 536, 537, 538, 539, 541, 542, 544, 546, 548, 552, 555, 556, 557, 558, 561, 562, 564, 565, 566, 567, 568, 570, 582, 583, 593, 594, 599, 600, 611, 617, 619, 627, 630, 632, 634, 635, 640, 642, 643, 644, 649, 659, 664, 665, 666, 667, 669, 670, 672, 673, 675, 676, 677, 678, 685, 686, 691, 692, 699, 705, 715, 725, 741, 755, 768, 796, 797, 798, 799, 800, 801, 802, 809, 812, 813, 814, 815, 816, 818, 819, 820, 825, 827, 829, 830, 836, 837, 838, 840, 841, 842, 848, 857, 858, 859, 861, 867, 871, 874, 875, 878, 890, 898, 904, 907, 909, 910, 914, 938, 942, 953, 957, 959, 975, 978, 979, 984, 985, 986, 987, 989, 990, 992, 993, 995, 996, 999, 1003, 1004, 1007, 1011, 1016, 1020, 1021, 1023, 1024, 1025, 1028, 1029, 1032, 1033, 1034, 1039, 1041, 1042, 1043, 1045, 1046], "66": [4, 226, 240, 313, 379, 409, 532, 632, 712, 782, 783, 794, 880, 989, 1001], "880": 4, "60": [4, 6, 8, 17, 60, 74, 83, 201, 213, 219, 222, 223, 244, 250, 270, 275, 328, 343, 353, 376, 409, 413, 450, 457, 713, 798, 989, 999, 1021, 1031, 1034], "11": [4, 13, 16, 20, 36, 75, 82, 98, 150, 156, 171, 172, 185, 201, 202, 203, 206, 222, 228, 234, 240, 245, 259, 267, 268, 274, 288, 289, 291, 311, 319, 322, 323, 325, 339, 343, 348, 353, 355, 376, 379, 380, 388, 395, 409, 412, 413, 416, 450, 457, 482, 483, 484, 485, 501, 517, 518, 612, 650, 656, 670, 715, 721, 722, 723, 777, 778, 779, 799, 802, 816, 819, 826, 853, 910, 953, 981, 985, 987, 999, 1003, 1004, 1007, 1011, 1016, 1023, 1025, 1029, 1033, 1037, 1039, 1040, 1042, 1045, 1046], "0014": 4, "17375": [4, 13], "20": [4, 7, 8, 13, 15, 17, 20, 26, 27, 28, 34, 35, 40, 41, 43, 44, 47, 48, 51, 55, 56, 62, 68, 79, 83, 93, 96, 102, 104, 106, 115, 119, 122, 123, 126, 129, 133, 134, 136, 142, 145, 146, 147, 150, 159, 170, 172, 173, 175, 183, 190, 191, 193, 197, 198, 200, 201, 202, 205, 210, 213, 214, 215, 216, 218, 225, 234, 240, 249, 251, 252, 262, 263, 265, 266, 268, 273, 274, 276, 280, 285, 289, 290, 291, 292, 293, 296, 304, 311, 312, 313, 318, 319, 320, 321, 323, 327, 328, 331, 337, 339, 343, 345, 350, 354, 355, 360, 361, 375, 379, 382, 384, 386, 387, 388, 399, 409, 416, 417, 441, 446, 447, 449, 464, 465, 469, 471, 472, 478, 488, 489, 490, 491, 492, 494, 496, 497, 500, 502, 504, 505, 512, 515, 516, 523, 531, 536, 537, 542, 545, 546, 548, 552, 555, 556, 559, 560, 561, 562, 563, 569, 570, 582, 589, 592, 594, 597, 599, 629, 630, 645, 649, 658, 666, 667, 668, 676, 678, 696, 704, 708, 713, 716, 724, 725, 738, 755, 756, 766, 791, 792, 796, 797, 798, 812, 823, 824, 825, 828, 830, 833, 834, 835, 838, 839, 846, 847, 858, 859, 860, 861, 863, 865, 866, 874, 875, 876, 877, 882, 896, 897, 899, 900, 905, 913, 919, 921, 922, 978, 985, 989, 992, 995, 996, 999, 1002, 1007, 1011, 1013, 1014, 1017, 1023, 1027, 1029, 1031, 1037, 1040, 1043, 1045, 1046], "17376": [4, 13], "21": [4, 6, 13, 16, 74, 150, 171, 190, 202, 219, 240, 252, 285, 304, 309, 311, 323, 379, 380, 384, 386, 399, 406, 416, 417, 441, 445, 474, 532, 561, 562, 563, 569, 570, 588, 589, 591, 627, 669, 687, 753, 798, 800, 812, 824, 867, 874, 876, 882, 899, 915, 981, 985, 990, 999, 1007, 1011, 1029, 1031, 1032, 1034, 1038, 1039, 1041], "17377": [4, 13], "22": [4, 13, 43, 93, 111, 117, 118, 119, 120, 165, 166, 168, 171, 172, 173, 218, 227, 243, 252, 259, 271, 278, 280, 281, 283, 287, 304, 307, 311, 316, 319, 322, 323, 324, 325, 328, 355, 382, 386, 387, 399, 406, 437, 448, 472, 488, 489, 495, 496, 504, 515, 524, 531, 537, 542, 545, 546, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 594, 627, 628, 632, 634, 645, 647, 651, 653, 655, 658, 659, 661, 663, 665, 669, 688, 692, 702, 704, 713, 756, 768, 777, 782, 783, 787, 798, 799, 803, 812, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 845, 847, 849, 851, 852, 853, 858, 859, 860, 862, 865, 881, 901, 903, 904, 905, 906, 907, 909, 910, 911, 912, 932, 933, 981, 989, 999, 1007, 1011, 1029, 1031, 1034, 1039, 1042, 1044], "56": [4, 13, 210, 219, 234, 315, 388, 713, 734, 989, 999, 1031], "8": [4, 5, 6, 7, 8, 9, 12, 13, 14, 20, 26, 27, 28, 32, 33, 35, 38, 44, 45, 46, 49, 51, 54, 56, 61, 63, 65, 66, 71, 73, 75, 76, 82, 86, 91, 92, 93, 96, 97, 99, 100, 101, 105, 107, 113, 116, 118, 119, 123, 125, 126, 128, 131, 134, 135, 139, 149, 150, 154, 156, 158, 159, 161, 162, 166, 170, 171, 172, 174, 177, 180, 181, 186, 187, 192, 195, 201, 202, 205, 209, 211, 217, 219, 222, 223, 224, 226, 227, 231, 234, 235, 236, 238, 242, 243, 244, 247, 248, 249, 251, 252, 253, 257, 258, 260, 261, 262, 263, 265, 266, 267, 269, 272, 273, 280, 283, 287, 289, 293, 297, 301, 303, 304, 307, 309, 310, 311, 312, 313, 315, 317, 322, 325, 327, 328, 329, 331, 332, 337, 340, 344, 345, 347, 348, 349, 353, 354, 355, 361, 364, 369, 376, 377, 379, 380, 382, 387, 388, 399, 407, 409, 413, 414, 416, 417, 418, 439, 443, 444, 447, 449, 450, 452, 462, 469, 470, 471, 472, 473, 474, 475, 476, 483, 484, 485, 487, 490, 502, 503, 514, 531, 534, 538, 540, 543, 545, 547, 549, 550, 555, 556, 565, 570, 582, 588, 589, 590, 591, 628, 629, 648, 658, 670, 676, 689, 692, 693, 694, 695, 699, 702, 706, 707, 709, 715, 721, 726, 727, 728, 740, 744, 745, 749, 750, 752, 781, 782, 784, 787, 788, 789, 790, 794, 796, 799, 800, 805, 808, 815, 816, 819, 820, 827, 830, 839, 841, 842, 848, 858, 859, 860, 866, 873, 880, 882, 903, 906, 936, 938, 942, 978, 979, 985, 986, 987, 989, 992, 997, 999, 1003, 1007, 1014, 1016, 1020, 1021, 1022, 1023, 1024, 1028, 1029, 1032, 1033, 1034, 1038, 1039, 1044, 1045, 1047], "9981": 4, "17378": [4, 13], "23": [4, 13, 20, 27, 35, 51, 99, 130, 150, 168, 182, 201, 216, 220, 232, 242, 244, 252, 304, 311, 316, 319, 320, 321, 323, 324, 325, 328, 331, 379, 380, 382, 388, 399, 401, 402, 416, 422, 432, 440, 447, 452, 454, 462, 465, 467, 468, 475, 482, 483, 484, 490, 492, 500, 501, 502, 504, 505, 510, 512, 514, 522, 524, 538, 539, 540, 543, 547, 554, 556, 558, 560, 561, 562, 565, 568, 569, 570, 607, 608, 611, 627, 630, 632, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 675, 678, 679, 680, 717, 729, 777, 827, 833, 834, 835, 844, 852, 859, 862, 874, 881, 889, 890, 899, 902, 904, 907, 910, 912, 919, 921, 922, 932, 933, 938, 989, 1007, 1011, 1029, 1031, 1032, 1038, 1039, 1040, 1043], "65": [4, 34, 172, 201, 271, 313, 409, 439, 502, 597, 699, 740, 791, 792, 996, 1021, 1031, 1032, 1033], "17379": [4, 13, 1043], "row": [4, 20, 21, 22, 26, 28, 35, 45, 61, 76, 91, 93, 119, 122, 131, 134, 165, 201, 202, 203, 231, 234, 240, 241, 309, 362, 368, 377, 384, 391, 395, 396, 406, 409, 412, 417, 424, 442, 443, 447, 449, 450, 451, 453, 456, 457, 459, 464, 468, 488, 490, 491, 492, 493, 494, 495, 500, 501, 502, 504, 505, 510, 511, 513, 534, 542, 548, 551, 590, 591, 620, 632, 643, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 692, 696, 697, 710, 718, 719, 724, 757, 758, 762, 765, 767, 768, 769, 770, 772, 773, 775, 777, 778, 779, 780, 796, 797, 830, 836, 837, 838, 839, 840, 846, 849, 850, 851, 852, 853, 856, 867, 871, 873, 874, 876, 895, 899, 917, 921, 922, 938, 960, 963, 967, 969, 971, 972, 976, 978, 979, 981, 983, 985, 987, 989, 990, 992, 999, 1000, 1003, 1004, 1010, 1038, 1039, 1040, 1041, 1046], "onli": [4, 7, 11, 14, 15, 21, 25, 26, 27, 28, 31, 34, 35, 38, 40, 41, 46, 50, 54, 56, 59, 67, 71, 72, 73, 75, 76, 82, 91, 99, 100, 102, 103, 107, 113, 115, 120, 121, 122, 123, 125, 132, 133, 145, 146, 147, 150, 153, 155, 158, 160, 162, 166, 168, 170, 171, 172, 177, 179, 184, 185, 190, 197, 201, 202, 204, 207, 209, 210, 219, 220, 222, 223, 230, 232, 234, 236, 237, 241, 244, 247, 248, 249, 252, 253, 258, 260, 262, 264, 265, 268, 269, 270, 271, 273, 274, 280, 283, 285, 291, 293, 296, 298, 303, 307, 308, 312, 313, 319, 320, 327, 328, 330, 336, 337, 340, 344, 345, 348, 349, 353, 354, 355, 358, 359, 362, 364, 368, 369, 370, 375, 376, 377, 379, 380, 382, 384, 386, 387, 388, 389, 390, 391, 394, 396, 397, 399, 400, 403, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 489, 490, 491, 492, 494, 496, 497, 500, 501, 502, 503, 504, 505, 508, 509, 510, 512, 516, 519, 523, 524, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 699, 707, 709, 713, 725, 728, 729, 733, 735, 736, 737, 740, 741, 742, 755, 757, 759, 773, 777, 778, 779, 780, 782, 783, 786, 787, 791, 792, 793, 796, 797, 798, 799, 800, 801, 802, 804, 805, 807, 812, 816, 820, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 919, 921, 922, 925, 927, 930, 938, 940, 943, 945, 950, 955, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1009, 1010, 1011, 1014, 1023, 1024, 1025, 1028, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1048], "present": [4, 5, 13, 44, 50, 93, 96, 104, 118, 119, 126, 129, 149, 150, 159, 162, 180, 183, 185, 190, 201, 230, 233, 237, 252, 260, 265, 268, 271, 272, 285, 307, 310, 312, 354, 379, 380, 384, 387, 394, 396, 400, 409, 411, 414, 416, 417, 427, 428, 431, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 489, 490, 491, 492, 496, 500, 501, 502, 503, 504, 505, 510, 531, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 549, 550, 561, 562, 563, 566, 569, 570, 581, 582, 583, 588, 589, 591, 617, 627, 628, 629, 630, 650, 654, 677, 688, 689, 690, 691, 712, 728, 729, 737, 768, 782, 783, 786, 796, 797, 798, 801, 802, 810, 812, 825, 843, 844, 845, 847, 849, 851, 852, 853, 860, 865, 873, 874, 875, 876, 877, 879, 882, 893, 894, 905, 913, 915, 916, 938, 973, 988, 989, 990, 991, 996, 999, 1008, 1010, 1034, 1039, 1041, 1042, 1043, 1045, 1046], "date": [4, 71, 150, 158, 172, 377, 379, 382, 386, 397, 410, 1010], "datetim": [4, 18, 158, 172], "panda": [4, 12, 26, 71, 72, 73, 74, 113, 119, 120, 123, 126, 130, 158, 165, 170, 171, 172, 173, 174, 180, 185, 190, 201, 205, 209, 219, 240, 241, 244, 252, 260, 262, 263, 265, 273, 274, 280, 312, 313, 314, 317, 320, 321, 348, 353, 354, 376, 377, 380, 381, 382, 384, 385, 396, 399, 402, 410, 433, 442, 443, 445, 447, 449, 464, 466, 468, 482, 483, 484, 485, 489, 490, 491, 492, 496, 500, 501, 502, 504, 505, 510, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 561, 562, 566, 567, 568, 569, 570, 581, 582, 583, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 632, 633, 635, 638, 639, 640, 641, 642, 688, 689, 692, 798, 801, 802, 812, 827, 845, 850, 853, 857, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 899, 917, 978, 979, 999, 1009, 1010, 1025, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "http": [4, 6, 7, 8, 12, 18, 25, 51, 72, 127, 133, 150, 162, 166, 177, 201, 209, 217, 219, 227, 231, 280, 283, 285, 303, 376, 377, 379, 380, 382, 386, 387, 388, 390, 394, 396, 399, 405, 409, 413, 418, 442, 449, 452, 462, 487, 492, 496, 500, 502, 508, 509, 510, 530, 531, 534, 536, 537, 541, 595, 636, 641, 644, 649, 658, 664, 666, 667, 668, 671, 676, 679, 682, 683, 685, 686, 691, 692, 695, 705, 721, 722, 723, 757, 758, 768, 836, 838, 839, 840, 843, 844, 849, 850, 851, 852, 857, 879, 894, 895, 896, 909, 910, 985, 987, 989, 992, 1002, 1005, 1013, 1014, 1021, 1036, 1041], "pydata": [4, 1008, 1014], "org": [4, 12, 14, 15, 18, 25, 27, 33, 38, 47, 49, 62, 67, 72, 73, 118, 120, 121, 129, 130, 133, 136, 147, 158, 162, 171, 172, 173, 177, 182, 192, 193, 201, 209, 217, 219, 223, 231, 232, 233, 235, 237, 241, 242, 243, 244, 252, 260, 262, 263, 265, 269, 274, 283, 303, 304, 313, 318, 319, 321, 322, 324, 327, 328, 329, 332, 353, 354, 355, 362, 369, 375, 380, 382, 385, 388, 390, 397, 399, 413, 595, 636, 668, 671, 676, 695, 705, 768, 843, 844, 849, 850, 851, 852, 879, 895, 909, 910, 985, 989, 1005, 1007, 1027, 1039, 1043], "stabl": [4, 162, 171, 195, 199, 203, 285, 318, 348, 354, 380, 382, 386, 388, 391, 396, 399, 413, 417, 421, 471, 472, 478, 533, 655, 672, 674, 687, 692, 723, 751, 937, 938, 985, 991, 992, 999, 1010, 1031, 1032, 1037, 1042, 1044], "user_guid": 4, "timeseri": 4, "html": [4, 8, 12, 27, 72, 73, 118, 120, 121, 129, 130, 133, 136, 147, 150, 158, 162, 171, 172, 173, 177, 182, 231, 233, 237, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 304, 313, 318, 319, 321, 322, 324, 329, 362, 377, 379, 382, 383, 385, 386, 390, 410, 413, 417, 487, 508, 509, 658, 836, 840, 934, 987, 1009, 1010, 1042, 1043, 1044, 1045, 1046, 1048], "compon": [4, 5, 18, 34, 45, 46, 59, 63, 71, 74, 85, 86, 88, 91, 95, 97, 98, 100, 101, 103, 104, 105, 107, 108, 131, 141, 158, 166, 168, 170, 185, 198, 222, 234, 235, 238, 247, 248, 251, 252, 253, 261, 263, 285, 286, 287, 288, 296, 297, 299, 304, 312, 319, 368, 374, 377, 382, 384, 388, 391, 394, 405, 408, 409, 410, 412, 417, 419, 421, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 462, 463, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 502, 504, 515, 521, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 573, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 695, 796, 797, 798, 801, 802, 812, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 937, 938, 981, 986, 988, 999, 1001, 1004, 1009, 1010, 1011, 1012, 1014, 1019, 1025, 1026, 1027, 1031, 1033, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "now": [4, 5, 7, 13, 18, 21, 54, 58, 72, 87, 101, 113, 114, 118, 120, 122, 123, 126, 127, 133, 136, 150, 153, 158, 159, 160, 166, 170, 171, 172, 173, 177, 180, 182, 187, 189, 190, 202, 203, 205, 226, 235, 237, 258, 262, 265, 273, 274, 280, 288, 312, 318, 319, 321, 322, 323, 324, 329, 340, 353, 354, 355, 364, 368, 370, 377, 382, 383, 384, 388, 394, 395, 396, 406, 409, 413, 414, 416, 417, 421, 493, 508, 509, 512, 536, 549, 579, 580, 582, 627, 630, 649, 653, 658, 663, 684, 725, 755, 796, 797, 801, 802, 833, 848, 861, 964, 978, 979, 985, 989, 995, 998, 999, 1004, 1005, 1008, 1010, 1016, 1023, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "introspect": [4, 6, 72, 388, 559, 560, 588, 589, 591, 999, 1021], "value_count": [4, 13, 172, 280], "11413": 4, "4544": 4, "rain": [4, 13, 172, 985], "1419": 4, "heavy_rain": [4, 172], "name": [4, 6, 7, 9, 10, 11, 12, 13, 18, 20, 26, 28, 31, 32, 38, 45, 46, 59, 63, 72, 74, 76, 83, 97, 103, 116, 117, 118, 119, 123, 126, 133, 171, 172, 173, 190, 199, 201, 203, 205, 207, 208, 216, 218, 219, 222, 223, 230, 236, 237, 239, 240, 244, 249, 257, 259, 260, 263, 265, 266, 269, 271, 272, 280, 285, 293, 294, 301, 302, 309, 311, 313, 321, 322, 331, 345, 353, 354, 355, 369, 370, 376, 377, 380, 382, 384, 386, 387, 389, 390, 396, 399, 403, 406, 409, 413, 416, 417, 419, 423, 425, 430, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 489, 490, 491, 492, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 510, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 576, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 688, 689, 690, 691, 692, 697, 698, 699, 700, 702, 708, 709, 713, 731, 732, 741, 778, 779, 796, 797, 798, 799, 800, 801, 802, 804, 805, 807, 810, 812, 816, 820, 824, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 920, 921, 922, 925, 929, 930, 931, 933, 945, 946, 947, 949, 952, 959, 973, 977, 978, 983, 985, 989, 990, 996, 997, 999, 1005, 1010, 1020, 1021, 1023, 1025, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "dtype": [4, 8, 10, 11, 13, 18, 49, 50, 54, 66, 71, 72, 123, 125, 127, 128, 129, 154, 155, 156, 166, 171, 172, 203, 219, 244, 247, 260, 266, 270, 280, 292, 298, 313, 320, 321, 323, 328, 362, 376, 377, 382, 384, 394, 396, 405, 410, 413, 416, 424, 427, 442, 443, 447, 448, 449, 450, 451, 453, 464, 466, 467, 469, 472, 474, 488, 489, 490, 491, 496, 497, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 514, 522, 542, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 585, 586, 588, 589, 591, 593, 594, 602, 606, 627, 628, 629, 630, 632, 633, 640, 641, 644, 645, 646, 652, 656, 657, 660, 661, 662, 663, 664, 665, 671, 673, 675, 697, 699, 705, 714, 715, 730, 737, 740, 754, 785, 804, 822, 824, 825, 837, 841, 842, 844, 852, 866, 872, 874, 875, 881, 882, 884, 886, 887, 888, 889, 890, 891, 892, 895, 903, 904, 905, 906, 907, 909, 910, 911, 912, 918, 919, 921, 922, 954, 964, 965, 966, 967, 970, 976, 979, 999, 1002, 1004, 1016, 1032, 1034, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "int64": [4, 13, 14, 55, 72, 171, 172, 280, 313, 324, 362, 396, 417, 427, 442, 448, 450, 588, 640, 714, 715, 837, 866, 1039, 1042, 1044, 1046, 1047, 1048], "cannot": [4, 13, 41, 57, 76, 83, 96, 101, 121, 171, 172, 185, 201, 219, 237, 307, 340, 348, 370, 381, 383, 388, 396, 397, 409, 410, 411, 413, 414, 416, 417, 419, 465, 521, 538, 539, 540, 543, 547, 610, 613, 614, 615, 617, 619, 620, 622, 623, 625, 651, 655, 682, 692, 711, 717, 777, 801, 802, 848, 849, 851, 852, 853, 861, 862, 871, 872, 883, 919, 921, 922, 978, 979, 983, 985, 986, 990, 995, 999, 1004, 1005, 1010, 1014, 1020, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "train": [4, 5, 6, 7, 8, 10, 11, 13, 17, 25, 27, 28, 31, 32, 33, 34, 55, 57, 59, 65, 66, 71, 72, 76, 86, 87, 91, 93, 96, 99, 100, 101, 111, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 130, 133, 134, 135, 139, 147, 153, 154, 155, 158, 159, 160, 161, 162, 168, 170, 171, 172, 173, 174, 177, 184, 185, 187, 189, 190, 192, 193, 194, 196, 197, 200, 201, 202, 203, 204, 208, 209, 210, 213, 215, 216, 219, 230, 233, 235, 239, 249, 251, 255, 256, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 281, 283, 285, 288, 291, 292, 293, 294, 296, 298, 301, 302, 303, 307, 309, 311, 312, 317, 320, 324, 326, 327, 328, 331, 332, 333, 336, 337, 339, 347, 348, 355, 357, 360, 361, 363, 364, 368, 369, 370, 374, 377, 379, 384, 387, 394, 395, 396, 403, 405, 407, 409, 410, 411, 412, 414, 416, 417, 418, 419, 421, 437, 440, 441, 443, 444, 447, 449, 451, 452, 453, 454, 459, 465, 469, 470, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 489, 493, 496, 497, 498, 500, 504, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 627, 628, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 687, 688, 689, 691, 692, 696, 703, 740, 787, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 861, 866, 867, 870, 871, 874, 875, 879, 880, 881, 882, 886, 887, 889, 890, 891, 892, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 915, 963, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 996, 997, 999, 1003, 1004, 1005, 1009, 1010, 1011, 1012, 1014, 1017, 1020, 1021, 1027, 1028, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "learn": [4, 6, 7, 8, 9, 10, 13, 15, 17, 18, 21, 26, 27, 28, 32, 33, 35, 37, 38, 49, 50, 52, 53, 54, 56, 57, 68, 69, 71, 72, 76, 82, 83, 95, 101, 106, 108, 111, 113, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 131, 132, 133, 139, 140, 141, 142, 147, 149, 150, 153, 156, 158, 162, 165, 166, 169, 173, 174, 175, 176, 178, 182, 187, 189, 190, 196, 201, 202, 203, 205, 208, 215, 219, 225, 226, 227, 228, 229, 230, 232, 234, 235, 238, 239, 240, 241, 242, 243, 244, 255, 258, 259, 261, 262, 265, 267, 268, 270, 271, 274, 276, 278, 280, 283, 285, 287, 289, 290, 291, 292, 293, 294, 298, 300, 303, 304, 305, 307, 308, 312, 313, 314, 316, 325, 326, 330, 332, 333, 339, 344, 346, 348, 353, 354, 355, 358, 359, 360, 361, 364, 369, 371, 374, 375, 376, 377, 379, 381, 385, 388, 389, 390, 391, 395, 396, 398, 400, 403, 404, 405, 406, 407, 409, 410, 411, 413, 415, 417, 418, 419, 423, 424, 426, 427, 428, 431, 432, 433, 437, 438, 439, 442, 443, 446, 447, 449, 450, 457, 459, 464, 465, 467, 468, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 508, 509, 510, 512, 514, 515, 516, 517, 518, 520, 521, 522, 524, 525, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 571, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 599, 602, 603, 610, 611, 614, 619, 622, 626, 628, 630, 632, 634, 638, 640, 641, 643, 644, 645, 646, 648, 652, 657, 658, 668, 669, 676, 677, 678, 680, 688, 689, 690, 691, 692, 696, 700, 701, 702, 708, 713, 717, 718, 721, 722, 723, 725, 731, 734, 740, 741, 742, 747, 755, 777, 778, 779, 784, 787, 794, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 840, 843, 845, 850, 857, 858, 859, 860, 861, 862, 864, 866, 868, 871, 873, 874, 875, 876, 879, 880, 881, 882, 885, 893, 894, 896, 897, 898, 899, 901, 902, 903, 906, 909, 910, 911, 912, 924, 932, 933, 955, 956, 957, 978, 979, 981, 982, 983, 985, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 999, 1000, 1003, 1004, 1005, 1006, 1008, 1011, 1013, 1018, 1020, 1021, 1027, 1028, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "simplifi": [4, 72, 189, 340, 381, 383, 387, 409, 412, 515, 562, 860, 861, 989, 991, 999], "represent": [4, 12, 18, 21, 27, 54, 72, 73, 96, 99, 118, 120, 121, 129, 130, 131, 133, 136, 147, 158, 171, 173, 177, 182, 185, 222, 223, 224, 231, 233, 237, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 280, 295, 304, 313, 319, 321, 322, 324, 329, 354, 355, 362, 364, 374, 376, 385, 396, 403, 409, 410, 414, 415, 416, 463, 531, 535, 537, 540, 542, 548, 566, 588, 590, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 630, 643, 646, 652, 658, 659, 660, 662, 666, 667, 668, 676, 677, 678, 768, 796, 797, 804, 820, 857, 870, 874, 875, 879, 881, 894, 901, 913, 915, 918, 934, 955, 981, 986, 988, 990, 992, 993, 994, 996, 999, 1004, 1010, 1016, 1017, 1019, 1023, 1025, 1031, 1032, 1035, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "collaps": [4, 172, 240, 307, 340, 394], "those": [4, 7, 12, 18, 20, 56, 61, 72, 114, 126, 150, 162, 170, 172, 173, 174, 201, 203, 205, 219, 227, 234, 237, 239, 240, 253, 256, 262, 265, 268, 280, 302, 307, 312, 337, 340, 353, 354, 355, 368, 369, 376, 382, 384, 386, 387, 388, 389, 394, 396, 397, 399, 406, 407, 409, 413, 414, 416, 417, 419, 448, 450, 461, 464, 468, 494, 495, 496, 503, 557, 558, 564, 565, 569, 570, 581, 692, 697, 712, 718, 735, 798, 801, 802, 810, 812, 819, 843, 844, 845, 847, 849, 850, 851, 852, 853, 901, 902, 903, 906, 909, 910, 911, 912, 949, 978, 981, 985, 988, 989, 991, 992, 993, 996, 999, 1005, 1008, 1009, 1014, 1016, 1025, 1031, 1034, 1037, 1038, 1039, 1044, 1045, 1046, 1047, 1048], "replac": [4, 26, 81, 100, 113, 153, 160, 165, 172, 187, 202, 265, 285, 309, 314, 319, 342, 380, 382, 384, 386, 388, 391, 396, 403, 410, 413, 416, 417, 441, 445, 464, 503, 515, 555, 556, 563, 582, 588, 589, 590, 591, 607, 608, 627, 630, 634, 639, 641, 727, 784, 804, 810, 812, 820, 860, 861, 864, 884, 897, 904, 960, 963, 978, 979, 981, 985, 989, 999, 1004, 1005, 1009, 1010, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1048], "to_replac": [4, 172], "valu": [4, 5, 7, 11, 12, 13, 14, 17, 18, 20, 21, 22, 27, 28, 33, 38, 41, 43, 45, 47, 54, 56, 61, 62, 63, 67, 72, 74, 76, 79, 81, 83, 96, 99, 107, 111, 113, 115, 117, 118, 119, 120, 121, 123, 126, 127, 129, 130, 132, 133, 145, 146, 149, 153, 156, 157, 159, 161, 167, 170, 171, 172, 173, 174, 177, 180, 181, 183, 185, 187, 189, 190, 191, 192, 194, 199, 201, 202, 203, 205, 207, 216, 219, 221, 222, 224, 225, 228, 230, 231, 232, 233, 234, 235, 236, 240, 243, 244, 247, 253, 256, 258, 260, 262, 263, 265, 267, 268, 269, 271, 273, 274, 275, 277, 285, 288, 298, 301, 302, 304, 307, 308, 309, 310, 311, 312, 313, 314, 319, 330, 340, 344, 345, 348, 353, 354, 355, 358, 364, 368, 369, 370, 371, 374, 375, 376, 377, 379, 383, 384, 385, 387, 388, 389, 391, 394, 395, 396, 398, 399, 400, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 419, 420, 421, 422, 423, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 490, 491, 493, 496, 497, 498, 501, 508, 509, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 697, 698, 699, 700, 701, 702, 704, 705, 707, 708, 709, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 768, 770, 773, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 809, 810, 812, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 918, 919, 920, 921, 922, 925, 926, 927, 928, 930, 938, 940, 946, 949, 950, 951, 952, 953, 957, 965, 966, 967, 978, 981, 982, 983, 984, 985, 986, 988, 990, 991, 992, 993, 994, 995, 996, 1000, 1002, 1003, 1004, 1011, 1012, 1014, 1016, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "inplac": [4, 172, 219, 240, 274, 454, 482, 483, 484, 485, 856, 864, 867, 870, 871, 873, 877, 878, 879, 881, 962, 965, 966, 967, 971, 972, 1040], "1422": 4, "expect": [4, 5, 10, 13, 25, 38, 45, 54, 87, 93, 101, 113, 116, 118, 120, 123, 126, 130, 147, 153, 159, 168, 169, 173, 175, 187, 192, 201, 202, 203, 205, 209, 219, 234, 237, 240, 241, 248, 249, 252, 253, 269, 285, 312, 348, 353, 354, 364, 368, 369, 382, 384, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 400, 405, 407, 409, 410, 411, 413, 416, 417, 418, 432, 464, 465, 467, 468, 469, 482, 483, 484, 496, 523, 532, 536, 538, 541, 552, 554, 555, 556, 557, 558, 560, 562, 563, 564, 565, 566, 567, 568, 570, 572, 585, 586, 588, 589, 591, 595, 597, 606, 611, 627, 632, 633, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 674, 675, 678, 679, 695, 704, 705, 716, 734, 787, 793, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 847, 851, 852, 853, 854, 859, 862, 867, 874, 875, 878, 881, 882, 891, 892, 899, 901, 902, 903, 904, 905, 906, 907, 910, 912, 952, 978, 985, 988, 989, 991, 995, 999, 1003, 1004, 1005, 1011, 1013, 1021, 1024, 1025, 1027, 1031, 1032, 1033, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "balanc": [4, 6, 13, 54, 67, 73, 113, 119, 124, 149, 168, 205, 206, 255, 260, 263, 265, 266, 278, 307, 370, 394, 396, 407, 413, 414, 416, 502, 515, 534, 540, 541, 547, 557, 561, 564, 640, 658, 659, 666, 668, 674, 675, 676, 703, 708, 728, 742, 781, 786, 798, 799, 816, 861, 901, 903, 906, 909, 911, 926, 927, 978, 1004, 1005, 1011, 1021, 1031, 1033, 1036, 1037, 1040, 1041, 1045], "fall": [4, 13, 126, 160, 261, 262, 382, 384, 408, 409, 417, 434, 446, 447, 508, 509, 726, 727, 793, 878, 890, 988, 989, 999, 1016, 1024, 1040], "4496": [4, 13], "4409": [4, 13], "4242": [4, 13], "winter": [4, 13], "4232": [4, 13], "order": [4, 14, 21, 25, 48, 56, 65, 66, 73, 79, 90, 106, 121, 122, 123, 127, 142, 158, 170, 171, 174, 177, 190, 194, 197, 201, 202, 207, 215, 219, 224, 234, 237, 240, 244, 249, 257, 260, 262, 269, 283, 304, 307, 312, 313, 314, 319, 320, 348, 353, 355, 364, 368, 369, 377, 382, 384, 387, 388, 391, 396, 399, 400, 403, 409, 410, 411, 413, 414, 415, 416, 417, 419, 421, 440, 443, 446, 447, 449, 450, 455, 456, 457, 459, 464, 488, 489, 490, 495, 497, 515, 534, 535, 539, 540, 541, 543, 547, 551, 553, 555, 556, 557, 558, 559, 563, 564, 565, 566, 567, 581, 588, 591, 593, 594, 597, 606, 607, 608, 610, 622, 627, 631, 640, 658, 659, 665, 676, 685, 686, 688, 689, 693, 697, 699, 700, 702, 704, 712, 713, 718, 725, 728, 729, 737, 739, 740, 741, 753, 755, 777, 781, 782, 783, 786, 787, 788, 793, 798, 799, 801, 802, 803, 805, 809, 812, 816, 817, 822, 829, 830, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 851, 858, 861, 872, 874, 875, 876, 880, 881, 882, 885, 886, 887, 889, 890, 891, 892, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 921, 922, 927, 938, 953, 979, 985, 986, 989, 990, 992, 993, 999, 1002, 1003, 1004, 1005, 1010, 1020, 1022, 1023, 1025, 1031, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "sensit": [4, 45, 56, 81, 82, 116, 126, 172, 203, 204, 205, 230, 307, 340, 369, 370, 397, 411, 416, 452, 462, 692, 712, 713, 787, 881, 984, 985, 986, 988, 989, 993, 995, 1003, 1004, 1016, 1024, 1035], "splitter": [4, 323, 324, 396, 400, 413, 437, 472, 564, 565, 567, 568, 594, 602, 647, 651, 653, 655, 659, 661, 663, 665, 673, 675, 798, 800, 801, 802, 803, 804, 812, 813, 814, 815, 817, 818, 820, 821, 822, 823, 824, 825, 826, 828, 832, 835, 909, 910, 911, 912, 1005, 1010, 1037, 1038, 1039, 1040, 1047, 1048], "evalu": [4, 5, 6, 10, 11, 18, 25, 33, 37, 39, 43, 44, 50, 56, 60, 64, 65, 69, 72, 73, 99, 113, 119, 120, 121, 123, 124, 126, 145, 146, 156, 168, 174, 177, 181, 190, 203, 208, 219, 229, 230, 245, 255, 256, 259, 260, 261, 262, 265, 267, 268, 269, 271, 273, 274, 276, 278, 283, 292, 294, 298, 307, 312, 314, 319, 323, 324, 331, 340, 344, 353, 364, 371, 375, 377, 384, 388, 396, 398, 408, 410, 417, 418, 419, 447, 449, 464, 466, 488, 491, 492, 493, 496, 509, 520, 536, 551, 561, 562, 563, 567, 568, 591, 594, 602, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 631, 632, 633, 634, 647, 653, 659, 673, 675, 697, 699, 701, 702, 703, 704, 705, 711, 713, 714, 715, 717, 718, 725, 726, 735, 736, 741, 753, 754, 755, 756, 785, 794, 796, 797, 798, 801, 802, 804, 812, 820, 822, 823, 824, 825, 826, 827, 828, 832, 838, 841, 842, 847, 859, 861, 862, 868, 871, 874, 875, 879, 880, 881, 886, 887, 889, 890, 891, 892, 903, 906, 909, 924, 932, 963, 981, 985, 987, 991, 992, 995, 996, 997, 1000, 1003, 1005, 1009, 1011, 1014, 1016, 1017, 1020, 1021, 1023, 1026, 1027, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "realist": [4, 8, 264, 271, 272, 337, 377, 989], "gap": [4, 13, 353, 377, 413, 471, 472, 478, 588, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 819, 909, 910, 911, 912, 985, 986, 1039, 1043, 1045], "between": [4, 5, 8, 9, 11, 12, 13, 21, 35, 38, 39, 40, 41, 43, 44, 54, 61, 62, 67, 86, 91, 99, 101, 105, 113, 116, 119, 123, 124, 126, 145, 153, 158, 159, 161, 168, 170, 171, 172, 173, 180, 185, 187, 192, 196, 197, 201, 202, 203, 205, 206, 209, 219, 222, 230, 235, 237, 240, 255, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 278, 280, 283, 287, 291, 292, 294, 295, 307, 312, 314, 320, 330, 340, 344, 347, 348, 353, 354, 355, 362, 364, 368, 369, 377, 382, 384, 391, 394, 395, 396, 397, 400, 403, 406, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 430, 440, 441, 444, 445, 446, 450, 452, 453, 454, 456, 457, 458, 463, 469, 470, 471, 472, 473, 474, 475, 476, 491, 493, 494, 495, 496, 497, 498, 502, 514, 515, 521, 524, 527, 534, 536, 537, 538, 539, 540, 541, 546, 547, 549, 553, 554, 559, 560, 562, 563, 564, 565, 584, 588, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 602, 604, 605, 606, 607, 608, 609, 611, 620, 627, 632, 633, 634, 639, 642, 645, 646, 647, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 670, 676, 678, 679, 681, 684, 688, 690, 692, 694, 695, 696, 699, 701, 703, 704, 705, 707, 709, 710, 714, 715, 716, 717, 719, 723, 724, 725, 728, 729, 730, 733, 735, 736, 742, 751, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 785, 786, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 803, 807, 815, 816, 817, 818, 819, 826, 827, 829, 831, 843, 844, 845, 847, 848, 849, 851, 852, 853, 854, 855, 858, 859, 865, 868, 869, 871, 872, 874, 875, 878, 879, 880, 882, 887, 890, 891, 895, 901, 902, 906, 909, 910, 911, 912, 914, 935, 946, 947, 978, 981, 983, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1010, 1011, 1023, 1024, 1031, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "side": [4, 17, 28, 60, 126, 194, 205, 219, 224, 233, 307, 344, 353, 364, 377, 394, 407, 410, 413, 414, 417, 515, 985, 986, 989, 991, 1004, 1040], "split": [4, 5, 6, 11, 13, 15, 18, 25, 27, 32, 33, 71, 101, 113, 118, 119, 120, 122, 124, 125, 126, 127, 128, 129, 139, 146, 150, 170, 171, 174, 185, 196, 197, 201, 204, 209, 219, 231, 237, 240, 248, 249, 256, 257, 260, 262, 267, 269, 272, 280, 288, 294, 301, 303, 308, 309, 314, 321, 323, 330, 340, 353, 355, 362, 377, 382, 389, 395, 396, 399, 400, 407, 409, 414, 416, 417, 418, 437, 442, 443, 472, 473, 479, 480, 497, 531, 537, 539, 542, 546, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 588, 589, 591, 594, 602, 647, 651, 653, 655, 661, 663, 665, 673, 675, 695, 704, 705, 717, 730, 736, 756, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 835, 841, 842, 858, 859, 882, 886, 887, 889, 890, 891, 892, 909, 910, 911, 912, 960, 978, 981, 985, 986, 992, 995, 996, 997, 999, 1003, 1005, 1010, 1016, 1020, 1021, 1023, 1024, 1025, 1027, 1031, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "limit": [4, 8, 18, 38, 43, 58, 67, 83, 113, 120, 121, 127, 133, 165, 171, 172, 173, 180, 201, 202, 218, 234, 269, 309, 313, 320, 348, 355, 364, 369, 383, 384, 387, 394, 396, 397, 407, 409, 412, 414, 418, 446, 463, 468, 559, 560, 561, 562, 632, 650, 658, 659, 679, 682, 683, 688, 777, 819, 849, 851, 852, 853, 874, 875, 899, 903, 904, 905, 906, 907, 957, 978, 985, 986, 988, 989, 996, 997, 999, 1010, 1016, 1027, 1039, 1041, 1044, 1045, 1048], "cv": [4, 12, 13, 25, 26, 27, 55, 72, 73, 74, 75, 79, 104, 119, 123, 125, 139, 140, 149, 165, 166, 171, 190, 200, 203, 258, 260, 261, 262, 263, 264, 265, 267, 268, 272, 276, 280, 313, 322, 324, 340, 348, 395, 396, 400, 407, 413, 416, 418, 437, 472, 567, 568, 594, 602, 647, 651, 653, 655, 659, 661, 663, 665, 673, 675, 798, 800, 801, 802, 803, 804, 812, 813, 814, 815, 817, 818, 820, 821, 822, 823, 824, 825, 826, 828, 832, 835, 882, 909, 910, 978, 981, 984, 985, 989, 999, 1010, 1020, 1021, 1025, 1033, 1037, 1038, 1039, 1040, 1041, 1043, 1045, 1047, 1048], "fold": [4, 68, 75, 79, 119, 122, 125, 139, 149, 171, 190, 249, 257, 258, 260, 262, 263, 265, 272, 314, 330, 348, 364, 377, 382, 385, 386, 395, 396, 400, 409, 418, 437, 472, 493, 536, 567, 568, 594, 602, 647, 651, 653, 655, 659, 661, 663, 665, 673, 675, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 832, 835, 882, 903, 906, 978, 985, 989, 999, 1004, 1020, 1031, 1033, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1048], "1000": [4, 7, 8, 15, 27, 29, 32, 38, 51, 73, 76, 86, 106, 116, 118, 120, 124, 125, 126, 130, 135, 141, 145, 159, 177, 187, 193, 204, 224, 233, 234, 236, 247, 251, 260, 262, 268, 271, 273, 290, 292, 308, 311, 318, 319, 321, 323, 341, 342, 349, 353, 354, 387, 388, 395, 407, 417, 437, 473, 479, 480, 531, 532, 537, 539, 542, 543, 545, 546, 548, 553, 564, 632, 646, 647, 651, 652, 653, 655, 660, 661, 662, 663, 666, 667, 668, 672, 676, 677, 678, 687, 692, 698, 701, 763, 878, 890, 896, 901, 902, 978, 982, 1004, 1011, 1020, 1023, 1038, 1040], "datapoint": [4, 43, 53, 57, 157, 160, 184, 235, 236, 240, 257, 262, 283, 346, 419, 446, 502, 557, 558, 559, 560, 564, 565, 566, 611, 909, 910, 911, 912, 982], "should": [4, 5, 6, 8, 9, 13, 15, 18, 26, 28, 32, 38, 54, 111, 113, 116, 119, 123, 126, 150, 165, 171, 177, 180, 181, 185, 201, 203, 219, 230, 235, 236, 237, 240, 262, 265, 268, 269, 271, 280, 285, 308, 309, 314, 329, 340, 348, 354, 364, 368, 369, 370, 377, 380, 381, 382, 384, 386, 387, 389, 390, 391, 395, 396, 399, 400, 403, 405, 407, 409, 411, 413, 414, 416, 417, 418, 419, 420, 421, 423, 437, 440, 442, 443, 444, 445, 447, 449, 450, 452, 454, 457, 458, 459, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 496, 503, 508, 509, 516, 521, 523, 524, 527, 532, 533, 534, 536, 538, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 585, 586, 588, 589, 590, 591, 593, 594, 597, 602, 607, 608, 610, 611, 620, 627, 628, 629, 631, 632, 633, 635, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 684, 687, 689, 690, 691, 692, 693, 694, 695, 696, 701, 709, 726, 727, 741, 765, 770, 773, 777, 778, 779, 780, 781, 784, 787, 788, 791, 799, 800, 805, 806, 807, 808, 815, 816, 817, 818, 823, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 858, 859, 861, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 880, 881, 882, 884, 888, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 921, 925, 927, 930, 938, 946, 950, 955, 960, 963, 964, 965, 966, 967, 968, 969, 970, 978, 979, 983, 984, 985, 986, 989, 990, 992, 994, 995, 996, 999, 1002, 1003, 1004, 1005, 1010, 1013, 1014, 1021, 1025, 1028, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "enough": [4, 13, 38, 45, 63, 119, 122, 153, 165, 172, 173, 190, 201, 235, 238, 240, 311, 353, 355, 364, 380, 382, 386, 397, 407, 408, 409, 411, 413, 416, 567, 568, 589, 798, 801, 802, 804, 812, 825, 938, 978, 983, 986, 988, 995, 999, 1004, 1009, 1014, 1037, 1047, 1048], "quantifi": [4, 38, 50, 79, 158, 219, 269, 384, 396, 404, 408, 573, 864, 984, 997, 999, 1027], "repres": [4, 8, 10, 12, 13, 15, 21, 27, 33, 35, 45, 49, 50, 51, 54, 92, 96, 98, 105, 106, 120, 121, 129, 171, 180, 188, 193, 203, 205, 206, 210, 224, 226, 235, 240, 250, 256, 259, 262, 265, 269, 290, 309, 344, 353, 355, 362, 370, 374, 377, 379, 384, 394, 395, 396, 397, 403, 407, 409, 413, 414, 415, 416, 417, 418, 438, 442, 446, 452, 463, 470, 471, 472, 473, 474, 475, 476, 488, 490, 491, 492, 494, 496, 498, 500, 501, 502, 504, 505, 510, 527, 534, 536, 538, 540, 541, 547, 555, 563, 581, 588, 591, 629, 632, 634, 640, 676, 678, 697, 699, 701, 729, 742, 788, 798, 800, 811, 812, 815, 818, 824, 826, 827, 830, 831, 837, 843, 844, 845, 847, 848, 849, 851, 852, 853, 858, 859, 868, 874, 875, 898, 901, 902, 921, 922, 942, 947, 979, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 997, 999, 1000, 1002, 1003, 1005, 1016, 1021, 1022, 1024, 1037, 1039, 1042, 1043, 1046], "bit": [4, 13, 49, 54, 79, 99, 199, 203, 280, 307, 340, 354, 364, 368, 377, 380, 416, 417, 582, 589, 658, 831, 921, 922, 986, 990, 1008, 1018, 1025, 1031, 1034, 1037, 1039, 1040, 1043, 1044, 1045, 1048], "less": [4, 5, 8, 53, 54, 61, 93, 96, 99, 107, 113, 120, 126, 127, 153, 160, 171, 183, 185, 201, 203, 205, 236, 240, 248, 250, 262, 263, 271, 273, 276, 308, 311, 312, 313, 319, 321, 344, 353, 354, 364, 368, 370, 377, 382, 384, 394, 396, 409, 413, 414, 416, 417, 421, 439, 441, 443, 445, 448, 450, 452, 457, 460, 462, 463, 482, 483, 484, 496, 515, 531, 535, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 590, 596, 619, 627, 634, 647, 661, 676, 678, 692, 701, 721, 722, 723, 724, 735, 751, 763, 778, 779, 784, 794, 796, 797, 800, 801, 802, 808, 825, 836, 837, 838, 840, 841, 842, 843, 844, 845, 847, 849, 850, 851, 852, 853, 864, 876, 878, 879, 881, 884, 890, 891, 901, 902, 909, 910, 911, 912, 927, 941, 978, 979, 981, 982, 983, 986, 988, 989, 992, 994, 999, 1003, 1004, 1005, 1009, 1023, 1025, 1031, 1032, 1034, 1035, 1037, 1038, 1039, 1041, 1045, 1046, 1048], "than": [4, 5, 7, 11, 12, 14, 20, 28, 31, 32, 41, 45, 48, 54, 56, 73, 76, 81, 83, 87, 93, 96, 99, 101, 104, 113, 115, 116, 118, 119, 120, 122, 123, 126, 150, 153, 159, 162, 165, 171, 172, 173, 177, 180, 185, 187, 190, 201, 203, 207, 217, 218, 219, 226, 230, 236, 237, 238, 240, 248, 259, 260, 262, 263, 264, 265, 268, 271, 280, 283, 285, 291, 292, 304, 307, 311, 312, 313, 314, 319, 321, 323, 328, 344, 353, 354, 355, 364, 368, 369, 370, 376, 377, 378, 381, 382, 384, 387, 388, 390, 396, 397, 403, 405, 406, 407, 408, 409, 411, 412, 413, 414, 416, 417, 418, 419, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 452, 454, 457, 460, 463, 464, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 493, 494, 496, 509, 514, 515, 523, 531, 534, 535, 536, 537, 538, 540, 541, 542, 544, 547, 548, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 573, 581, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 627, 628, 630, 634, 640, 642, 643, 644, 645, 646, 647, 652, 653, 655, 658, 659, 660, 661, 662, 663, 666, 667, 668, 671, 672, 674, 676, 677, 678, 679, 682, 687, 692, 694, 696, 704, 705, 712, 720, 721, 722, 723, 734, 735, 738, 763, 778, 779, 780, 782, 784, 794, 796, 797, 798, 801, 802, 808, 812, 817, 819, 822, 823, 824, 825, 826, 829, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 858, 859, 864, 874, 875, 876, 878, 879, 881, 884, 890, 891, 895, 898, 901, 902, 903, 906, 907, 909, 910, 911, 912, 913, 927, 938, 940, 941, 946, 952, 960, 963, 978, 979, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 999, 1003, 1004, 1005, 1009, 1010, 1016, 1020, 1023, 1024, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "half": [4, 25, 99, 235, 239, 260, 262, 274, 377, 378, 414, 463, 522, 562, 593, 597, 602, 769, 860, 868, 989, 992, 1005], "contigu": [4, 22, 384, 394, 406, 413, 417, 443, 447, 449, 459, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 780, 817, 841, 842, 901, 903, 904, 905, 906, 907, 1004, 1034, 1041, 1045], "model_select": [4, 5, 6, 7, 10, 13, 25, 26, 28, 32, 33, 55, 72, 73, 74, 75, 76, 79, 87, 101, 104, 113, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 132, 133, 139, 140, 146, 147, 149, 153, 165, 166, 168, 170, 171, 173, 174, 177, 185, 196, 201, 203, 208, 209, 216, 217, 219, 231, 236, 240, 242, 243, 244, 249, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 283, 287, 288, 289, 293, 294, 301, 303, 304, 309, 311, 312, 313, 314, 317, 318, 319, 322, 324, 330, 331, 340, 343, 348, 358, 362, 364, 371, 382, 384, 387, 395, 396, 400, 405, 410, 413, 416, 437, 438, 558, 560, 567, 568, 579, 659, 697, 698, 700, 702, 741, 829, 832, 850, 858, 859, 861, 909, 910, 911, 912, 957, 978, 979, 984, 989, 991, 992, 997, 999, 1004, 1010, 1011, 1020, 1021, 1025, 1028, 1035, 1037, 1038], "timeseriessplit": [4, 13, 185, 257, 413, 1037, 1038, 1043], "ts_cv": [4, 13], "n_split": [4, 13, 119, 125, 165, 166, 171, 249, 257, 262, 264, 267, 272, 280, 324, 330, 340, 348, 364, 413, 799, 800, 801, 802, 803, 805, 806, 807, 808, 811, 813, 814, 815, 816, 817, 818, 819, 824, 1020, 1037, 1039], "5": [4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 20, 22, 25, 26, 27, 32, 33, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 65, 66, 67, 68, 71, 72, 74, 75, 76, 80, 81, 82, 83, 84, 86, 87, 93, 96, 97, 98, 99, 100, 102, 103, 104, 106, 111, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 139, 142, 145, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 175, 177, 181, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 195, 196, 198, 199, 201, 202, 203, 204, 207, 209, 212, 213, 214, 215, 216, 217, 219, 223, 224, 225, 227, 230, 233, 234, 235, 236, 238, 239, 240, 241, 242, 244, 247, 248, 249, 250, 251, 252, 253, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 297, 298, 301, 302, 303, 304, 307, 309, 310, 311, 312, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 330, 331, 332, 338, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 377, 379, 380, 382, 384, 387, 388, 394, 395, 396, 399, 401, 402, 407, 409, 410, 413, 414, 416, 417, 418, 419, 420, 421, 437, 438, 439, 440, 442, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 462, 464, 466, 469, 472, 478, 482, 483, 484, 485, 490, 493, 494, 504, 516, 517, 521, 523, 524, 526, 528, 531, 533, 534, 536, 537, 538, 539, 540, 543, 544, 545, 546, 547, 552, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 582, 592, 593, 594, 597, 602, 610, 613, 614, 615, 616, 619, 620, 622, 623, 625, 627, 628, 629, 630, 631, 632, 633, 634, 638, 641, 643, 644, 645, 646, 647, 651, 652, 653, 655, 656, 657, 659, 660, 661, 662, 663, 665, 666, 667, 668, 670, 672, 676, 677, 678, 680, 681, 684, 688, 689, 691, 692, 695, 696, 699, 703, 705, 707, 709, 712, 713, 721, 722, 723, 725, 726, 727, 729, 734, 737, 738, 740, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 768, 780, 781, 783, 784, 786, 787, 788, 789, 790, 793, 795, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 858, 859, 860, 861, 866, 867, 868, 870, 871, 873, 874, 875, 876, 877, 878, 880, 881, 882, 889, 890, 895, 901, 902, 903, 904, 905, 906, 907, 909, 911, 927, 936, 937, 938, 940, 942, 943, 952, 953, 957, 960, 978, 979, 981, 984, 985, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 999, 1001, 1003, 1004, 1007, 1012, 1016, 1020, 1021, 1023, 1024, 1025, 1027, 1029, 1032, 1033, 1034, 1036, 1038, 1039, 1041, 1045, 1046, 1047], "48": [4, 13, 46, 86, 103, 158, 244, 313, 379, 388, 409, 510, 597, 699, 745, 825, 836, 978, 991, 999], "max_train_s": [4, 13, 413, 819, 1038], "10000": [4, 11, 13, 31, 44, 64, 73, 74, 127, 139, 187, 194, 201, 209, 217, 234, 236, 275, 319, 337, 339, 364, 370, 416, 417, 561, 562, 644, 679, 878, 907, 1001, 1021, 1025], "test_siz": [4, 5, 6, 10, 13, 25, 26, 28, 32, 33, 72, 118, 124, 125, 127, 128, 132, 170, 177, 185, 196, 201, 208, 209, 216, 217, 259, 260, 264, 269, 271, 275, 283, 293, 294, 301, 303, 304, 309, 311, 312, 319, 340, 348, 364, 387, 413, 698, 800, 815, 818, 819, 827, 829, 850, 979, 991, 992, 1020, 1021, 1031, 1032, 1037, 1038, 1043], "manual": [4, 47, 56, 171, 172, 174, 202, 212, 264, 285, 330, 338, 353, 355, 368, 369, 377, 382, 386, 387, 395, 399, 409, 413, 414, 415, 437, 449, 567, 851, 874, 880, 978, 983, 984, 985, 988, 989, 992, 999, 1010, 1016, 1017, 1025, 1039, 1041, 1047], "inspect": [4, 9, 31, 32, 35, 57, 62, 115, 120, 127, 129, 130, 134, 147, 153, 158, 159, 171, 172, 173, 174, 175, 184, 193, 210, 215, 241, 262, 265, 274, 288, 293, 296, 312, 317, 318, 319, 320, 322, 324, 336, 337, 338, 339, 341, 342, 344, 353, 359, 369, 371, 384, 396, 409, 410, 416, 417, 464, 553, 554, 557, 558, 559, 560, 564, 565, 566, 830, 861, 862, 909, 910, 911, 912, 977, 989, 990, 993, 996, 997, 1004, 1009, 1011, 1025, 1027, 1034], "variou": [4, 12, 37, 38, 40, 42, 56, 57, 59, 61, 62, 63, 69, 82, 86, 90, 99, 148, 168, 171, 179, 209, 211, 220, 221, 222, 223, 224, 228, 234, 280, 285, 302, 311, 318, 327, 328, 353, 355, 362, 364, 368, 376, 377, 378, 379, 382, 384, 387, 395, 397, 407, 408, 409, 411, 437, 441, 472, 502, 514, 515, 525, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 594, 602, 647, 651, 653, 655, 658, 661, 663, 665, 666, 668, 673, 675, 676, 691, 692, 699, 798, 801, 802, 804, 812, 820, 821, 822, 823, 824, 825, 826, 827, 828, 861, 901, 902, 978, 979, 986, 989, 992, 996, 999, 1003, 1005, 1009, 1011, 1014, 1024, 1025, 1031, 1034, 1035, 1048], "check": [4, 5, 8, 18, 47, 54, 57, 100, 111, 119, 133, 153, 168, 170, 172, 173, 187, 189, 190, 201, 223, 237, 248, 255, 271, 278, 280, 320, 329, 362, 368, 369, 380, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 394, 396, 399, 400, 403, 408, 410, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 473, 474, 475, 476, 482, 483, 484, 485, 502, 508, 509, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 583, 588, 589, 590, 591, 592, 595, 596, 597, 598, 599, 600, 603, 610, 611, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 674, 676, 677, 678, 679, 680, 681, 687, 688, 689, 690, 691, 692, 693, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 825, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 921, 922, 923, 932, 933, 944, 945, 946, 950, 951, 973, 974, 975, 977, 984, 985, 986, 989, 1004, 1005, 1010, 1011, 1014, 1027, 1031, 1032, 1034, 1038, 1042, 1043, 1044, 1045, 1046, 1048], "all_split": [4, 13], "list": [4, 8, 10, 12, 13, 14, 17, 18, 20, 21, 26, 33, 41, 45, 50, 63, 71, 106, 107, 117, 119, 125, 133, 140, 174, 205, 240, 241, 257, 260, 262, 263, 265, 266, 271, 275, 294, 309, 313, 317, 318, 319, 320, 321, 322, 323, 324, 331, 343, 354, 355, 370, 376, 377, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 399, 400, 407, 409, 410, 413, 415, 416, 417, 432, 434, 437, 450, 456, 457, 464, 465, 466, 471, 472, 478, 482, 483, 484, 488, 489, 490, 491, 492, 496, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 523, 532, 550, 551, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 591, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 632, 634, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 681, 684, 686, 692, 696, 697, 699, 710, 712, 713, 716, 718, 724, 732, 741, 745, 753, 777, 780, 782, 787, 793, 796, 797, 798, 801, 802, 804, 809, 810, 812, 820, 822, 823, 824, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 858, 859, 860, 861, 862, 863, 865, 869, 872, 874, 875, 880, 882, 898, 902, 904, 907, 909, 910, 911, 912, 915, 917, 921, 922, 923, 927, 929, 930, 931, 933, 941, 942, 944, 955, 960, 963, 973, 978, 979, 985, 989, 991, 992, 993, 996, 997, 1000, 1005, 1007, 1009, 1010, 1014, 1016, 1020, 1022, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "train_0": 4, "test_0": 4, "iloc": [4, 13, 133, 171, 172, 219, 262, 288], "12379": 4, "25": [4, 5, 6, 7, 9, 10, 11, 13, 20, 25, 27, 43, 46, 55, 56, 81, 86, 92, 102, 104, 106, 117, 126, 146, 147, 154, 165, 171, 181, 191, 205, 227, 230, 249, 262, 278, 298, 301, 304, 307, 309, 322, 327, 328, 348, 351, 353, 361, 364, 368, 388, 413, 416, 417, 444, 477, 501, 504, 570, 597, 678, 733, 795, 815, 827, 853, 871, 876, 878, 879, 882, 890, 891, 893, 894, 985, 989, 990, 992, 999, 1011, 1021, 1031, 1033, 1039, 1042], "760": 4, "68": [4, 13, 162, 192, 304, 327, 409, 535, 541, 590, 1031], "27": [4, 6, 13, 20, 32, 48, 55, 99, 108, 240, 327, 328, 349, 379, 409, 417, 524, 713, 787, 788, 882, 902, 989, 999, 1011, 1024, 1031, 1033], "9993": [4, 653, 655, 1039], "12380": 4, "32": [4, 5, 13, 52, 93, 170, 173, 239, 240, 245, 321, 328, 376, 380, 387, 396, 406, 416, 417, 445, 564, 565, 582, 589, 634, 676, 880, 882, 921, 922, 954, 997, 999, 1011, 1024, 1031, 1034, 1037, 1039, 1040, 1043, 1044, 1045], "000": [4, 5, 16, 22, 26, 28, 43, 75, 110, 154, 173, 177, 234, 260, 262, 264, 299, 312, 320, 334, 353, 354, 364, 377, 388, 416, 417, 490, 561, 562, 644, 677, 1003, 1011, 1025, 1042], "77": [4, 6, 45, 150, 177, 271, 328, 376, 379, 534, 707], "0028": 4, "12381": 4, "72": [4, 6, 7, 8, 13, 119, 156, 240, 387, 825], "9995": 4, "12382": 4, "240": [4, 45, 234, 997, 1031], "82": [4, 8, 31, 54, 59, 122, 147, 204, 296, 327, 787, 798, 812, 989, 992, 1021, 1031], "9980": [4, 1039], "12383": 4, "13374": 4, "34": [4, 126, 150, 153, 290, 304, 327, 328, 362, 379, 413, 520, 570, 597, 649, 667, 716, 763, 1021, 1031], "44": [4, 151, 158, 171, 172, 175, 185, 280, 289, 780, 882, 902, 905, 989, 996, 1031], "40": [4, 13, 15, 47, 55, 67, 79, 91, 96, 102, 129, 135, 150, 151, 153, 185, 192, 193, 195, 218, 220, 224, 226, 238, 240, 251, 263, 291, 297, 303, 309, 327, 328, 338, 339, 341, 343, 345, 347, 362, 369, 377, 413, 446, 495, 517, 518, 841, 842, 846, 858, 859, 978, 990, 999, 1011, 1031, 1032], "150": [4, 6, 48, 91, 93, 117, 126, 139, 223, 227, 230, 243, 245, 275, 324, 325, 329, 333, 344, 348, 379, 413, 418, 504, 602, 822, 823, 824, 989, 1011, 1020, 1021, 1022], "53": [4, 47, 54, 99, 240, 331, 409, 416, 535, 541, 791, 792], "15": [4, 6, 7, 10, 12, 13, 14, 15, 16, 31, 32, 35, 41, 45, 51, 54, 55, 56, 62, 63, 67, 69, 74, 75, 81, 83, 93, 99, 106, 117, 119, 122, 123, 126, 145, 147, 149, 153, 157, 165, 167, 170, 171, 172, 190, 198, 203, 215, 219, 224, 227, 230, 245, 249, 250, 257, 265, 267, 270, 273, 274, 276, 289, 293, 299, 301, 302, 304, 305, 307, 309, 311, 323, 328, 333, 338, 340, 343, 347, 350, 351, 353, 356, 359, 376, 377, 380, 382, 395, 399, 401, 402, 413, 416, 417, 440, 454, 490, 497, 531, 537, 555, 556, 598, 644, 652, 661, 663, 668, 676, 678, 692, 740, 816, 830, 853, 882, 978, 984, 985, 986, 989, 992, 993, 999, 1004, 1007, 1011, 1016, 1021, 1029, 1033, 1043, 1045, 1046], "0013": 4, "13375": 4, "39": [4, 13, 99, 150, 244, 313, 315, 377, 379, 380, 386, 409, 417, 495, 910, 1011], "49": [4, 13, 43, 150, 205, 240, 376, 377, 379, 387, 409, 450, 457, 713, 725, 755, 763, 796, 798, 882, 989, 999, 1011, 1034], "13376": 4, "0012": 4, "13377": 4, "36": [4, 6, 7, 13, 14, 98, 150, 159, 171, 219, 220, 240, 343, 379, 388, 416, 417, 555, 556, 570, 734, 989, 1025, 1031], "08": [4, 45, 51, 99, 108, 137, 171, 172, 185, 278, 304, 315, 356, 379, 531, 543, 545, 563, 641, 658, 798, 858, 859, 880, 995, 1011], "910": 4, "42": [4, 5, 6, 13, 21, 25, 26, 27, 28, 32, 45, 47, 57, 79, 86, 98, 104, 113, 120, 121, 123, 124, 126, 127, 129, 133, 146, 147, 166, 171, 173, 174, 177, 180, 190, 193, 195, 196, 203, 207, 208, 209, 215, 216, 218, 222, 223, 224, 230, 235, 236, 237, 240, 243, 261, 263, 266, 285, 291, 292, 293, 301, 307, 308, 309, 310, 312, 314, 317, 319, 321, 330, 338, 340, 353, 354, 364, 369, 384, 387, 388, 396, 400, 409, 413, 416, 417, 420, 437, 444, 488, 492, 524, 531, 537, 544, 557, 558, 565, 566, 567, 568, 570, 677, 796, 800, 825, 827, 841, 842, 846, 850, 853, 893, 894, 896, 897, 898, 911, 912, 992, 999, 1021, 1025, 1028, 1031], "0015": 4, "13378": 4, "35": [4, 6, 7, 9, 11, 56, 72, 115, 135, 171, 172, 180, 189, 230, 263, 280, 312, 327, 328, 351, 544, 648, 649, 656, 702, 706, 707, 726, 740, 755, 781, 788, 834, 978, 985, 989, 995, 996, 999, 1021, 1025, 1031, 1033], "26": [4, 13, 47, 55, 81, 98, 158, 171, 227, 239, 275, 328, 388, 570, 648, 728, 782, 877, 889, 938, 989, 999, 1031, 1034, 1035, 1043], "47": [4, 13, 162, 193, 197, 377, 493, 494, 535, 541], "16": [4, 5, 13, 20, 28, 44, 51, 52, 55, 67, 75, 81, 96, 99, 145, 172, 194, 200, 201, 202, 219, 222, 223, 226, 227, 228, 235, 239, 264, 265, 266, 289, 304, 307, 311, 317, 344, 354, 360, 377, 379, 388, 395, 413, 414, 417, 442, 471, 472, 478, 497, 502, 534, 535, 570, 589, 595, 596, 607, 608, 639, 650, 651, 654, 655, 656, 657, 682, 683, 811, 816, 827, 876, 902, 910, 978, 985, 989, 999, 1004, 1007, 1011, 1016, 1025, 1029, 1031, 1032, 1036, 1037, 1039, 1040], "9979": 4, "2331": 4, "31": [4, 13, 69, 71, 80, 209, 219, 220, 264, 278, 290, 320, 327, 328, 406, 417, 500, 561, 562, 597, 649, 671, 679, 954, 990, 1011, 1031], "060": [4, 196, 220, 750, 1011], "0032": 4, "2332": 4, "2333": 4, "78": [4, 54, 93, 177, 219, 271, 309, 328, 353, 493, 494, 653, 655, 664, 665, 798, 804, 825, 989, 1010, 1021], "275": [4, 127, 137, 328, 1011, 1034], "2334": 4, "96": [4, 13, 33, 49, 63, 160, 230, 240, 304, 309, 312, 313, 327, 328, 379, 413, 553, 978, 984, 989, 999, 1031], "515": 4, "64": [4, 13, 33, 49, 54, 59, 90, 96, 158, 171, 223, 234, 235, 239, 260, 271, 289, 294, 368, 369, 379, 380, 388, 414, 495, 502, 599, 600, 646, 658, 688, 689, 690, 691, 902, 992, 1022, 1031, 1033, 1039, 1040, 1043, 1044, 1045], "2335": 4, "12326": 4, "12327": 4, "12328": [4, 1040], "12329": 4, "46": [4, 13, 54, 73, 77, 93, 201, 240, 364, 388, 593, 594, 716, 905, 910, 999, 1011], "12330": [4, 1039], "52": [4, 11, 119, 137, 158, 201, 531, 633, 796, 1011, 1031], "last": [4, 21, 45, 59, 90, 126, 171, 180, 201, 202, 209, 214, 230, 253, 265, 273, 274, 312, 319, 321, 330, 358, 368, 377, 380, 384, 386, 387, 390, 396, 399, 409, 410, 417, 421, 438, 442, 447, 459, 464, 468, 515, 533, 559, 560, 561, 562, 583, 584, 587, 593, 594, 597, 610, 682, 683, 685, 686, 697, 698, 700, 701, 702, 707, 781, 796, 797, 801, 802, 817, 841, 842, 846, 861, 862, 866, 874, 880, 916, 941, 964, 978, 984, 985, 986, 988, 990, 993, 1003, 1010, 1016, 1023, 1031, 1038, 1039, 1040, 1045, 1047, 1048], "train_4": 4, "test_4": 4, "16379": 4, "94": [4, 33, 35, 55, 98, 122, 200, 238, 275, 309, 327, 328, 416, 663, 787, 984, 989, 990, 999, 1025, 1031], "665": 4, "16380": 4, "71": [4, 13, 93, 150, 205, 219, 379, 510, 729, 989, 1023, 1033], "16381": 4, "76": [4, 177, 201, 328, 353, 364, 379, 388, 780, 861, 1023], "16382": 4, "16383": 4, "18": [4, 7, 8, 13, 20, 41, 45, 50, 54, 61, 63, 75, 104, 126, 162, 171, 212, 224, 227, 230, 235, 262, 304, 311, 313, 328, 353, 354, 355, 382, 388, 410, 413, 414, 417, 447, 459, 492, 500, 501, 502, 504, 505, 510, 535, 536, 538, 540, 541, 557, 558, 559, 560, 563, 564, 565, 566, 569, 571, 572, 573, 574, 575, 577, 578, 589, 594, 599, 600, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 646, 649, 658, 659, 671, 714, 718, 730, 733, 734, 740, 742, 796, 797, 819, 834, 857, 858, 859, 865, 871, 879, 880, 891, 901, 902, 909, 910, 911, 912, 913, 937, 938, 978, 987, 989, 999, 1007, 1029, 1031, 1032, 1035, 1036, 1038, 1039, 1041, 1042], "940": 4, "6331": 4, "28": [4, 67, 126, 150, 171, 217, 271, 303, 327, 328, 356, 379, 388, 409, 413, 450, 457, 999, 1021, 1031, 1034, 1037], "790": [4, 71, 172], "89": [4, 13, 33, 158, 192, 327, 328, 984, 989, 999, 1025, 1031, 1034, 1042], "6332": 4, "6333": 4, "88": [4, 6, 33, 192, 205, 261, 304, 327, 328, 358, 377, 379, 382, 411, 473, 861, 1021, 1031], "820": [4, 841, 842], "79": [4, 6, 31, 33, 81, 82, 99, 150, 177, 304, 328, 379, 387, 411, 474, 524, 597, 839, 1031, 1033], "6334": 4, "6335": 4, "70": [4, 6, 11, 13, 67, 72, 74, 113, 172, 240, 247, 262, 270, 328, 377, 379, 413, 493, 494, 713, 725, 755, 798, 812, 978, 999, 1021], "33": [4, 13, 81, 201, 322, 328, 377, 379, 380, 386, 387, 388, 399, 401, 402, 409, 417, 532, 648, 712, 713, 728, 729, 737, 742, 782, 783, 786, 804, 825, 827, 829, 912, 985, 989, 999, 1021, 1031, 1039], "335": 4, "74": [4, 13, 217, 327, 328, 379, 590, 798, 812, 880], "16326": [4, 1043], "16327": 4, "16328": 4, "16329": 4, "16330": 4, "readi": [4, 7, 158, 202, 377, 386, 390], "tree": [4, 7, 12, 13, 27, 28, 32, 42, 45, 56, 63, 91, 100, 112, 115, 116, 117, 119, 123, 124, 125, 126, 127, 129, 132, 133, 134, 135, 136, 137, 150, 161, 165, 172, 174, 184, 210, 223, 237, 239, 240, 241, 259, 266, 268, 280, 283, 285, 288, 290, 298, 307, 308, 312, 319, 332, 337, 363, 364, 368, 371, 377, 379, 388, 395, 396, 398, 407, 409, 415, 420, 437, 441, 442, 443, 444, 445, 446, 448, 450, 457, 463, 495, 500, 504, 514, 515, 519, 544, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 631, 632, 633, 634, 658, 688, 692, 702, 703, 787, 804, 825, 827, 836, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 862, 865, 874, 933, 979, 986, 989, 990, 995, 996, 1009, 1010, 1011, 1012, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "often": [4, 20, 25, 26, 34, 71, 75, 119, 131, 157, 165, 171, 172, 202, 219, 223, 240, 249, 264, 267, 307, 312, 340, 350, 353, 354, 355, 368, 369, 376, 377, 379, 382, 384, 387, 390, 394, 395, 396, 398, 403, 407, 409, 410, 411, 413, 414, 416, 417, 419, 421, 468, 521, 524, 533, 536, 632, 646, 647, 652, 653, 660, 661, 662, 663, 672, 674, 687, 727, 871, 879, 887, 899, 978, 979, 981, 984, 985, 986, 987, 988, 989, 991, 992, 994, 995, 996, 999, 1002, 1003, 1005, 1016, 1018, 1023, 1024, 1025, 1032, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "flexibl": [4, 26, 123, 165, 201, 308, 337, 355, 384, 389, 413, 419, 674, 901, 902, 978, 983, 985, 989, 993, 999, 1009, 1010, 1014, 1040, 1044], "effici": [4, 5, 12, 14, 43, 47, 54, 56, 96, 119, 124, 131, 177, 190, 194, 203, 209, 290, 353, 368, 374, 376, 382, 384, 385, 387, 388, 394, 396, 403, 406, 408, 409, 414, 415, 416, 419, 421, 442, 443, 446, 447, 449, 450, 452, 454, 457, 459, 461, 462, 496, 533, 534, 535, 538, 540, 541, 544, 563, 566, 574, 581, 582, 588, 589, 591, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 632, 633, 634, 638, 640, 655, 658, 659, 664, 666, 667, 668, 673, 675, 676, 677, 678, 679, 685, 686, 688, 725, 755, 762, 778, 779, 796, 797, 798, 812, 830, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 866, 878, 890, 894, 901, 910, 912, 938, 957, 978, 981, 983, 985, 986, 988, 989, 990, 992, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1009, 1014, 1016, 1020, 1023, 1024, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "heterogen": [4, 8, 9, 25, 56, 70, 72, 77, 168, 172, 201, 244, 312, 317, 355, 374, 376, 394, 464, 488, 541, 581, 591, 713, 861, 865, 901, 986, 996, 999, 1009, 1011, 1027, 1035, 1039, 1041, 1042], "tabular": [4, 13, 172, 384, 416, 997], "mix": [4, 63, 70, 71, 77, 97, 98, 123, 168, 201, 232, 242, 244, 263, 307, 313, 376, 384, 394, 396, 410, 414, 421, 464, 466, 467, 496, 533, 538, 540, 547, 600, 604, 630, 646, 647, 652, 658, 659, 660, 661, 662, 663, 668, 676, 678, 681, 798, 812, 827, 861, 874, 875, 881, 882, 953, 960, 963, 985, 994, 1011, 1024, 1043, 1045, 1046], "long": [4, 11, 12, 45, 63, 126, 158, 166, 171, 173, 201, 237, 238, 240, 265, 298, 307, 318, 353, 354, 364, 369, 382, 390, 394, 396, 397, 403, 408, 409, 453, 498, 538, 676, 677, 678, 801, 802, 836, 837, 838, 839, 840, 858, 859, 869, 989, 995, 999, 1000, 1002, 1003, 1008, 1013, 1033, 1037, 1043, 1045], "sampl": [4, 5, 8, 11, 14, 25, 26, 27, 28, 33, 34, 35, 38, 40, 42, 43, 44, 47, 49, 50, 54, 57, 58, 59, 60, 61, 66, 81, 82, 83, 87, 91, 93, 96, 100, 101, 105, 106, 113, 114, 115, 116, 117, 118, 119, 122, 123, 125, 126, 127, 129, 134, 135, 136, 142, 147, 149, 150, 153, 157, 158, 159, 160, 162, 165, 168, 171, 172, 177, 179, 185, 187, 189, 190, 201, 203, 205, 208, 209, 211, 212, 213, 215, 217, 218, 219, 220, 222, 230, 234, 235, 237, 238, 240, 247, 248, 250, 251, 252, 253, 255, 257, 261, 262, 264, 265, 266, 268, 270, 274, 276, 278, 283, 285, 289, 290, 291, 292, 294, 295, 296, 303, 304, 307, 309, 310, 311, 312, 314, 317, 319, 320, 322, 324, 327, 329, 330, 331, 332, 335, 336, 338, 340, 342, 344, 345, 346, 348, 349, 351, 353, 354, 359, 362, 368, 371, 375, 377, 378, 381, 382, 384, 385, 394, 395, 400, 406, 407, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 426, 428, 431, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 456, 457, 458, 461, 462, 463, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 610, 611, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 687, 688, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 707, 708, 709, 710, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 739, 740, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 759, 760, 762, 763, 767, 768, 769, 770, 772, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 921, 922, 926, 927, 938, 942, 960, 963, 964, 967, 970, 978, 979, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1009, 1010, 1011, 1013, 1016, 1022, 1023, 1024, 1025, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "larg": [4, 12, 13, 14, 22, 27, 38, 40, 44, 48, 50, 51, 53, 54, 56, 74, 76, 96, 100, 116, 118, 119, 126, 129, 131, 146, 158, 159, 173, 174, 180, 181, 190, 192, 201, 203, 205, 206, 207, 219, 235, 240, 259, 265, 268, 271, 287, 294, 303, 307, 309, 320, 321, 340, 345, 348, 354, 355, 368, 377, 382, 388, 391, 394, 395, 396, 399, 403, 408, 411, 413, 414, 415, 416, 418, 420, 422, 442, 444, 446, 447, 450, 451, 452, 453, 458, 462, 473, 475, 499, 514, 534, 536, 538, 540, 544, 547, 549, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 582, 588, 589, 591, 634, 641, 643, 650, 654, 657, 658, 659, 664, 671, 672, 674, 677, 679, 685, 687, 689, 691, 692, 693, 695, 745, 778, 779, 798, 806, 808, 812, 816, 826, 836, 837, 838, 839, 840, 841, 842, 847, 858, 859, 866, 870, 871, 879, 881, 893, 894, 901, 902, 906, 907, 909, 910, 911, 912, 937, 938, 978, 981, 983, 985, 986, 988, 991, 992, 993, 997, 999, 1002, 1003, 1004, 1005, 1009, 1010, 1014, 1021, 1023, 1024, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "here": [4, 8, 9, 12, 13, 14, 18, 25, 58, 59, 67, 79, 83, 90, 91, 93, 98, 99, 101, 103, 104, 105, 107, 113, 116, 119, 123, 127, 133, 147, 150, 153, 161, 162, 171, 172, 173, 177, 180, 185, 190, 194, 201, 205, 207, 216, 217, 219, 222, 224, 230, 235, 237, 240, 241, 248, 249, 250, 256, 259, 260, 262, 264, 265, 267, 271, 272, 274, 280, 285, 287, 294, 302, 303, 304, 309, 312, 319, 321, 324, 327, 329, 340, 344, 348, 350, 355, 358, 364, 368, 369, 370, 376, 377, 380, 381, 382, 383, 384, 386, 387, 388, 390, 394, 395, 400, 403, 405, 406, 409, 410, 412, 413, 414, 415, 416, 417, 420, 422, 437, 440, 441, 442, 443, 444, 445, 447, 449, 452, 464, 472, 475, 536, 538, 539, 543, 544, 567, 568, 569, 570, 581, 582, 584, 588, 591, 594, 602, 628, 630, 647, 651, 653, 655, 661, 663, 665, 673, 675, 689, 691, 695, 699, 712, 725, 745, 755, 793, 798, 801, 802, 804, 812, 820, 821, 822, 823, 824, 825, 826, 828, 837, 841, 842, 865, 873, 876, 879, 882, 893, 894, 904, 955, 978, 981, 985, 986, 987, 988, 989, 992, 995, 999, 1001, 1002, 1003, 1004, 1009, 1010, 1013, 1014, 1016, 1017, 1023, 1031, 1039, 1044], "modern": [4, 417, 468, 503, 590, 690, 694, 729, 899, 986, 1009, 1010, 1047], "histgradientboostingregressor": [4, 7, 13, 119, 123, 126, 127, 130, 133, 165, 172, 201, 313, 317, 318, 319, 320, 322, 323, 324, 386, 416, 560, 565, 632, 633, 635, 979, 996, 1009, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "nativ": [4, 132, 165, 369, 377, 396, 416, 561, 562, 833, 834, 957, 985, 989, 1009, 1041, 1043], "support": [4, 6, 7, 8, 9, 10, 17, 25, 28, 31, 33, 47, 71, 72, 73, 112, 117, 132, 133, 137, 146, 147, 172, 202, 211, 212, 213, 219, 235, 236, 237, 243, 256, 260, 265, 267, 269, 280, 285, 304, 307, 311, 321, 327, 328, 331, 332, 336, 337, 340, 341, 342, 343, 344, 345, 348, 351, 368, 369, 370, 371, 376, 380, 382, 384, 386, 387, 388, 389, 391, 392, 395, 396, 397, 409, 413, 414, 417, 418, 419, 437, 440, 450, 452, 453, 464, 465, 466, 467, 469, 472, 474, 487, 496, 512, 538, 540, 541, 544, 547, 549, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 613, 614, 615, 617, 619, 620, 622, 623, 625, 627, 631, 632, 633, 643, 645, 657, 658, 659, 670, 671, 672, 673, 674, 675, 676, 677, 678, 687, 690, 694, 699, 707, 713, 728, 729, 737, 742, 777, 778, 779, 782, 783, 786, 787, 798, 801, 802, 804, 812, 824, 825, 833, 834, 839, 841, 842, 845, 847, 848, 853, 860, 861, 862, 866, 872, 874, 875, 877, 881, 889, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 927, 932, 933, 977, 978, 979, 981, 982, 983, 985, 988, 989, 990, 991, 992, 993, 995, 996, 999, 1000, 1003, 1007, 1009, 1010, 1011, 1012, 1014, 1016, 1019, 1021, 1025, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "therefor": [4, 9, 14, 21, 25, 35, 38, 53, 54, 72, 73, 76, 81, 87, 101, 106, 113, 116, 118, 126, 131, 133, 149, 170, 173, 201, 205, 217, 218, 247, 252, 253, 263, 265, 280, 283, 288, 303, 307, 312, 327, 340, 348, 349, 353, 354, 362, 368, 376, 380, 387, 394, 400, 405, 409, 410, 411, 413, 414, 416, 417, 437, 535, 549, 551, 553, 554, 559, 560, 564, 565, 604, 606, 658, 659, 665, 668, 671, 676, 678, 679, 701, 712, 734, 756, 796, 861, 862, 874, 878, 882, 890, 979, 983, 985, 986, 989, 991, 992, 993, 994, 997, 999, 1004, 1005, 1010, 1016, 1023, 1024, 1025, 1040, 1041, 1044, 1045, 1046, 1047, 1048], "categorical_featur": [4, 72, 123, 172, 313, 319, 320, 321, 322, 324, 387, 416, 561, 562, 632, 633, 996, 1039, 1043, 1046, 1048], "from_dtyp": [4, 123, 324, 416, 561, 562, 1048], "For": [4, 8, 9, 12, 13, 14, 20, 28, 33, 38, 41, 45, 47, 49, 50, 54, 56, 58, 59, 61, 68, 74, 81, 87, 92, 97, 116, 118, 119, 121, 126, 127, 129, 131, 146, 147, 150, 153, 155, 160, 165, 166, 171, 172, 185, 189, 190, 201, 202, 205, 206, 209, 218, 219, 222, 224, 227, 230, 231, 233, 234, 235, 237, 244, 252, 259, 262, 263, 269, 277, 283, 285, 295, 301, 303, 304, 309, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 330, 332, 340, 342, 344, 348, 353, 354, 355, 358, 359, 362, 364, 368, 370, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 400, 403, 405, 406, 407, 408, 409, 410, 413, 414, 416, 417, 418, 419, 420, 425, 432, 437, 440, 442, 443, 444, 445, 446, 447, 449, 450, 451, 454, 456, 457, 458, 460, 461, 462, 464, 465, 466, 468, 472, 474, 482, 483, 484, 485, 489, 496, 498, 503, 512, 514, 515, 519, 523, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 572, 573, 581, 582, 583, 584, 585, 586, 588, 589, 591, 592, 593, 594, 597, 602, 607, 608, 609, 610, 611, 614, 619, 622, 623, 627, 628, 629, 630, 631, 632, 633, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 687, 688, 689, 690, 692, 693, 695, 701, 704, 706, 707, 728, 729, 737, 740, 741, 762, 768, 777, 782, 783, 786, 787, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 830, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 866, 867, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 886, 887, 888, 889, 890, 891, 892, 893, 894, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 921, 927, 952, 973, 978, 979, 981, 982, 983, 984, 985, 986, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1003, 1004, 1005, 1008, 1013, 1014, 1016, 1023, 1024, 1025, 1031, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "refer": [4, 38, 39, 61, 64, 72, 91, 127, 133, 150, 162, 219, 237, 240, 269, 288, 295, 307, 317, 318, 319, 320, 321, 322, 323, 324, 354, 369, 371, 379, 380, 382, 383, 384, 386, 387, 388, 389, 390, 394, 395, 396, 397, 399, 400, 403, 410, 420, 421, 422, 437, 438, 439, 440, 442, 444, 446, 447, 448, 450, 451, 452, 453, 454, 457, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 498, 503, 511, 513, 515, 516, 517, 518, 519, 520, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 544, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 590, 593, 594, 595, 602, 607, 608, 610, 611, 614, 619, 622, 623, 627, 628, 631, 632, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 647, 649, 651, 653, 655, 656, 658, 661, 663, 665, 666, 667, 668, 671, 673, 675, 676, 678, 679, 682, 683, 688, 689, 690, 691, 692, 693, 694, 695, 696, 701, 704, 705, 707, 708, 709, 710, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 733, 734, 735, 736, 737, 739, 740, 742, 755, 757, 758, 768, 782, 784, 785, 787, 788, 791, 792, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 831, 832, 836, 837, 838, 840, 843, 846, 847, 848, 850, 857, 858, 859, 861, 866, 867, 868, 870, 871, 873, 874, 875, 877, 878, 879, 881, 882, 889, 894, 895, 896, 897, 898, 899, 901, 903, 904, 906, 907, 909, 910, 911, 912, 926, 938, 955, 991, 1000, 1005, 1010, 1016, 1020, 1024, 1025, 1031, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "datafram": [4, 13, 26, 71, 72, 73, 74, 113, 119, 123, 126, 130, 158, 165, 170, 171, 172, 173, 180, 185, 190, 205, 209, 219, 241, 244, 252, 260, 262, 263, 265, 273, 274, 280, 312, 313, 314, 320, 321, 322, 348, 353, 354, 376, 377, 382, 384, 387, 396, 410, 416, 433, 442, 443, 445, 447, 449, 464, 466, 467, 468, 482, 483, 484, 485, 489, 490, 491, 492, 496, 500, 501, 502, 504, 505, 510, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 561, 562, 566, 567, 568, 569, 570, 581, 582, 583, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 688, 689, 692, 798, 801, 802, 812, 827, 845, 850, 853, 857, 860, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 899, 917, 944, 960, 963, 978, 979, 1010, 1025, 1034, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "dedic": [4, 260, 350, 380, 386, 388, 394, 397, 405, 409, 584, 672, 674, 687, 978, 985, 1009, 1016, 1039, 1048], "rule": [4, 119, 177, 359, 362, 364, 368, 379, 382, 383, 384, 394, 396, 397, 404, 407, 408, 409, 413, 414, 416, 418, 536, 549, 550, 551, 552, 553, 561, 562, 569, 570, 602, 634, 645, 658, 659, 666, 667, 668, 676, 677, 678, 706, 707, 798, 801, 802, 804, 812, 820, 824, 826, 850, 901, 914, 978, 983, 991, 992, 1003, 1005, 1010, 1016, 1023, 1027, 1033, 1036, 1043, 1048], "sake": [4, 126, 166, 171, 201, 312, 344, 353, 355, 390, 394, 670], "simplic": [4, 14, 32, 185, 344, 353, 355, 396, 415, 992, 993, 994, 1004], "try": [4, 6, 11, 12, 13, 15, 17, 26, 27, 40, 54, 72, 73, 99, 113, 118, 119, 120, 121, 122, 129, 130, 133, 136, 147, 153, 158, 166, 170, 171, 172, 173, 177, 180, 182, 190, 231, 232, 233, 237, 241, 242, 243, 244, 248, 249, 252, 260, 262, 263, 269, 274, 280, 285, 298, 304, 313, 318, 319, 321, 322, 324, 329, 342, 348, 353, 354, 362, 377, 380, 381, 382, 384, 387, 388, 390, 394, 396, 400, 403, 409, 412, 413, 416, 417, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 503, 567, 577, 589, 658, 673, 675, 689, 693, 798, 801, 802, 810, 812, 822, 823, 824, 826, 879, 881, 884, 886, 887, 888, 889, 890, 891, 892, 901, 978, 985, 986, 995, 1004, 1005, 1010, 1013, 1014, 1016, 1018, 1021, 1023, 1024, 1025, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "default": [4, 13, 15, 26, 28, 31, 43, 46, 47, 49, 56, 60, 96, 119, 146, 153, 165, 172, 180, 181, 190, 201, 202, 219, 232, 234, 240, 242, 244, 250, 257, 265, 271, 283, 285, 307, 311, 314, 317, 318, 322, 324, 344, 348, 349, 353, 354, 355, 358, 364, 368, 369, 376, 377, 380, 384, 385, 386, 387, 388, 389, 391, 394, 395, 396, 399, 400, 403, 407, 409, 410, 413, 414, 416, 417, 418, 420, 421, 422, 423, 425, 426, 430, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 707, 708, 709, 711, 712, 713, 714, 716, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 733, 734, 735, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 765, 766, 767, 768, 770, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 925, 927, 928, 930, 932, 937, 938, 939, 940, 941, 942, 943, 952, 954, 955, 957, 959, 960, 962, 963, 964, 970, 973, 975, 976, 978, 979, 981, 983, 985, 988, 989, 990, 992, 993, 995, 996, 999, 1001, 1003, 1004, 1005, 1016, 1020, 1023, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "hyper": [4, 72, 119, 256, 262, 267, 304, 340, 364, 384, 394, 395, 396, 404, 413, 416, 418, 468, 644, 645, 802, 810, 812, 857, 899, 984, 985, 989, 992, 1003, 1004, 1016, 1027, 1031, 1045], "paramet": [4, 5, 9, 10, 11, 14, 15, 17, 35, 45, 55, 56, 59, 61, 62, 63, 72, 73, 74, 80, 82, 83, 93, 96, 111, 113, 115, 117, 119, 122, 123, 124, 127, 128, 139, 140, 147, 150, 153, 154, 157, 158, 159, 160, 161, 162, 165, 166, 168, 171, 172, 180, 181, 182, 183, 185, 186, 188, 189, 190, 192, 193, 201, 203, 205, 206, 209, 210, 217, 218, 219, 226, 227, 230, 232, 235, 236, 237, 247, 248, 249, 250, 252, 253, 256, 257, 261, 262, 263, 264, 266, 267, 270, 273, 274, 275, 277, 280, 285, 287, 288, 291, 292, 298, 301, 302, 304, 307, 308, 309, 312, 317, 318, 320, 321, 322, 323, 331, 335, 337, 342, 344, 345, 347, 349, 350, 351, 353, 354, 355, 358, 359, 360, 361, 364, 368, 369, 370, 371, 374, 375, 377, 385, 387, 388, 389, 390, 391, 394, 400, 404, 407, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 956, 957, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 986, 988, 991, 992, 993, 994, 995, 996, 997, 999, 1001, 1002, 1003, 1005, 1009, 1010, 1011, 1017, 1019, 1021, 1022, 1023, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "compos": [4, 5, 26, 70, 71, 72, 76, 77, 87, 115, 123, 133, 168, 171, 172, 173, 201, 203, 219, 232, 240, 242, 244, 280, 313, 318, 320, 321, 322, 324, 371, 395, 400, 409, 410, 413, 515, 612, 988, 1011, 1031], "columntransform": [4, 71, 72, 133, 171, 172, 173, 201, 219, 232, 240, 242, 244, 313, 318, 320, 321, 322, 324, 374, 376, 394, 395, 400, 466, 467, 629, 866, 978, 979, 1010, 1027, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "ensembl": [4, 7, 10, 12, 13, 27, 28, 32, 57, 113, 114, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 161, 165, 166, 172, 173, 174, 201, 223, 230, 239, 240, 242, 243, 259, 274, 280, 283, 309, 313, 317, 318, 319, 320, 322, 323, 324, 332, 353, 359, 360, 361, 364, 368, 371, 386, 387, 395, 396, 400, 407, 409, 413, 418, 437, 504, 515, 632, 633, 635, 658, 702, 801, 802, 827, 831, 832, 862, 865, 874, 905, 909, 911, 912, 978, 989, 990, 995, 996, 1005, 1009, 1010, 1011, 1012, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "cross_valid": [4, 13, 123, 133, 171, 203, 258, 265, 280, 313, 324, 382, 395, 400, 575, 822, 823, 989, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1048], "pipelin": [4, 32, 55, 59, 72, 75, 76, 77, 87, 100, 118, 119, 123, 141, 144, 146, 149, 150, 151, 165, 166, 172, 173, 177, 180, 189, 190, 201, 202, 207, 215, 219, 223, 229, 230, 231, 233, 235, 240, 241, 244, 245, 255, 259, 260, 261, 266, 269, 270, 273, 274, 276, 278, 285, 287, 288, 293, 294, 301, 304, 309, 312, 314, 317, 318, 319, 320, 321, 322, 323, 331, 353, 354, 364, 368, 371, 374, 376, 377, 382, 385, 396, 400, 413, 417, 419, 423, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 502, 515, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 605, 607, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 697, 698, 700, 701, 702, 713, 796, 797, 798, 799, 800, 801, 802, 805, 807, 812, 816, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 978, 979, 981, 985, 992, 993, 998, 999, 1003, 1004, 1009, 1010, 1011, 1012, 1014, 1017, 1019, 1027, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1048], "make_pipelin": [4, 32, 59, 87, 118, 123, 133, 146, 147, 150, 165, 166, 171, 172, 177, 180, 189, 190, 201, 202, 207, 215, 219, 223, 230, 231, 232, 240, 241, 242, 244, 259, 269, 285, 294, 301, 309, 312, 313, 314, 317, 318, 319, 320, 321, 322, 354, 364, 395, 400, 410, 413, 567, 676, 678, 853, 861, 886, 887, 889, 890, 891, 892, 901, 902, 903, 904, 906, 907, 979, 992, 999, 1003, 1004, 1034, 1041, 1044], "gbrt": [4, 13, 201, 416], "random_st": [4, 5, 6, 7, 10, 12, 13, 15, 20, 21, 22, 25, 26, 27, 28, 31, 32, 39, 43, 44, 45, 47, 49, 50, 51, 54, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 76, 83, 87, 93, 96, 98, 101, 113, 114, 115, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 135, 136, 139, 146, 147, 149, 153, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 182, 183, 187, 193, 200, 201, 204, 205, 207, 208, 209, 213, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 235, 238, 239, 240, 241, 243, 244, 247, 249, 250, 253, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 280, 283, 285, 288, 289, 293, 294, 295, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 330, 338, 340, 341, 342, 348, 349, 353, 354, 358, 362, 364, 384, 387, 391, 395, 396, 405, 409, 410, 413, 414, 416, 417, 421, 434, 437, 438, 440, 443, 447, 449, 451, 452, 453, 454, 458, 459, 460, 462, 469, 474, 488, 491, 492, 495, 497, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 583, 584, 593, 594, 607, 608, 610, 611, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 632, 633, 634, 635, 638, 639, 640, 641, 642, 646, 647, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 674, 676, 677, 678, 679, 687, 689, 690, 691, 692, 693, 694, 695, 697, 698, 700, 701, 702, 734, 787, 792, 796, 797, 800, 801, 802, 803, 804, 810, 812, 813, 814, 815, 816, 817, 818, 820, 825, 826, 827, 829, 831, 832, 833, 834, 835, 846, 850, 857, 858, 859, 861, 866, 878, 882, 890, 893, 894, 901, 902, 903, 906, 909, 910, 911, 912, 914, 915, 937, 938, 958, 960, 963, 978, 979, 981, 984, 989, 990, 991, 992, 993, 996, 997, 999, 1004, 1005, 1016, 1020, 1021, 1025, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "categorical_column": [4, 123, 171, 173, 240, 467], "print": [4, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 20, 21, 22, 25, 27, 31, 33, 39, 43, 44, 47, 48, 49, 50, 51, 53, 54, 59, 61, 62, 64, 68, 71, 72, 74, 75, 76, 81, 86, 87, 93, 96, 99, 104, 105, 107, 113, 116, 119, 120, 121, 122, 123, 125, 127, 139, 141, 146, 147, 149, 150, 153, 154, 156, 158, 162, 170, 172, 173, 174, 177, 185, 186, 187, 188, 192, 193, 196, 197, 201, 203, 204, 205, 208, 209, 216, 217, 219, 223, 224, 227, 232, 234, 236, 237, 240, 244, 250, 256, 260, 261, 262, 263, 265, 267, 270, 271, 275, 285, 289, 296, 298, 302, 303, 304, 309, 312, 314, 317, 318, 319, 321, 323, 324, 327, 328, 331, 340, 353, 354, 355, 358, 362, 364, 368, 376, 377, 380, 383, 384, 390, 396, 400, 403, 410, 413, 416, 417, 419, 464, 467, 468, 472, 478, 502, 512, 541, 544, 549, 550, 559, 560, 561, 562, 564, 565, 569, 570, 577, 583, 584, 588, 589, 591, 612, 617, 630, 646, 647, 649, 650, 652, 653, 654, 656, 660, 661, 662, 663, 666, 667, 676, 677, 684, 713, 717, 736, 794, 796, 797, 799, 800, 803, 805, 806, 807, 808, 811, 813, 814, 815, 816, 817, 818, 819, 823, 824, 825, 830, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 858, 859, 860, 861, 862, 863, 871, 877, 881, 889, 899, 900, 901, 902, 903, 906, 914, 925, 950, 957, 979, 989, 990, 991, 992, 997, 1005, 1016, 1020, 1021, 1023, 1024, 1025, 1031, 1033, 1039, 1040, 1042, 1046], "tolist": [4, 125, 165, 261, 319, 377], "across": [4, 13, 56, 62, 68, 86, 91, 119, 139, 171, 190, 195, 223, 257, 259, 262, 285, 307, 312, 344, 383, 384, 391, 396, 403, 408, 409, 413, 417, 418, 421, 437, 440, 450, 452, 454, 457, 460, 462, 469, 472, 474, 488, 491, 492, 495, 497, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 567, 568, 588, 591, 594, 602, 607, 608, 610, 611, 632, 633, 634, 639, 640, 641, 642, 646, 647, 650, 652, 653, 654, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 676, 678, 679, 685, 686, 689, 690, 691, 692, 693, 694, 695, 704, 705, 717, 730, 756, 787, 792, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 810, 812, 813, 814, 815, 816, 817, 818, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 846, 850, 857, 858, 859, 866, 870, 871, 878, 879, 881, 882, 890, 893, 894, 896, 897, 901, 902, 903, 906, 909, 910, 937, 938, 957, 960, 963, 978, 985, 987, 989, 999, 1003, 1005, 1010, 1014, 1025, 1031, 1034, 1037, 1038, 1039, 1040, 1041], "numpi": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 34, 35, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 76, 79, 80, 81, 82, 83, 86, 87, 91, 93, 96, 97, 98, 99, 100, 102, 103, 104, 106, 107, 114, 115, 116, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 139, 140, 142, 145, 146, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 180, 181, 182, 183, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 227, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 283, 285, 289, 290, 291, 292, 294, 295, 296, 297, 298, 301, 304, 307, 308, 309, 310, 311, 312, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 359, 360, 361, 362, 364, 368, 375, 376, 377, 380, 382, 383, 384, 385, 386, 388, 390, 391, 394, 395, 396, 399, 400, 402, 403, 405, 406, 409, 410, 413, 414, 415, 416, 417, 439, 440, 441, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 460, 462, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 485, 490, 493, 494, 496, 503, 506, 508, 509, 527, 531, 534, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 569, 570, 581, 582, 588, 589, 591, 627, 628, 629, 630, 631, 632, 633, 643, 646, 647, 649, 652, 653, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 670, 672, 676, 677, 678, 684, 688, 691, 692, 693, 695, 699, 702, 703, 706, 707, 709, 712, 714, 725, 726, 728, 729, 733, 734, 737, 738, 753, 755, 772, 778, 780, 781, 782, 783, 786, 787, 788, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 824, 827, 829, 830, 833, 834, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 864, 865, 868, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 901, 903, 904, 906, 907, 909, 924, 936, 938, 942, 943, 944, 951, 952, 960, 963, 976, 978, 979, 984, 985, 987, 989, 990, 992, 995, 999, 1001, 1004, 1005, 1008, 1010, 1013, 1016, 1019, 1020, 1021, 1023, 1024, 1025, 1031, 1034, 1035, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "np": [4, 5, 7, 8, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 34, 35, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 76, 79, 80, 81, 82, 83, 86, 87, 93, 97, 98, 99, 100, 102, 103, 104, 106, 107, 114, 115, 116, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 139, 140, 142, 145, 146, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 180, 181, 182, 183, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 227, 230, 233, 234, 235, 236, 237, 238, 239, 240, 242, 247, 248, 249, 250, 251, 252, 253, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 283, 285, 289, 290, 291, 292, 294, 295, 296, 297, 298, 301, 304, 307, 308, 309, 310, 311, 312, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 359, 360, 361, 362, 364, 368, 376, 377, 382, 384, 387, 388, 391, 394, 396, 400, 406, 409, 410, 413, 414, 415, 416, 417, 419, 422, 424, 427, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 460, 462, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 485, 496, 497, 508, 509, 520, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 557, 558, 559, 560, 561, 563, 564, 565, 566, 569, 570, 581, 582, 585, 586, 588, 589, 593, 594, 597, 606, 609, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 668, 670, 671, 672, 674, 675, 676, 677, 678, 681, 682, 683, 684, 691, 692, 695, 699, 702, 703, 706, 707, 709, 712, 713, 714, 715, 725, 726, 728, 729, 733, 734, 737, 738, 740, 753, 755, 762, 768, 772, 777, 780, 781, 782, 783, 786, 787, 788, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 827, 828, 829, 830, 833, 834, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 851, 852, 853, 857, 858, 865, 866, 868, 874, 875, 876, 877, 878, 880, 881, 882, 889, 890, 893, 894, 896, 897, 898, 901, 903, 904, 906, 907, 909, 910, 911, 912, 919, 921, 922, 924, 926, 927, 936, 938, 943, 951, 952, 954, 960, 963, 965, 966, 967, 978, 979, 984, 985, 987, 989, 990, 992, 993, 995, 999, 1000, 1001, 1003, 1004, 1005, 1016, 1020, 1021, 1023, 1024, 1025, 1032, 1034, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "def": [4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 18, 20, 26, 28, 34, 35, 38, 41, 42, 49, 53, 56, 57, 59, 62, 71, 76, 93, 96, 98, 99, 102, 104, 106, 111, 113, 116, 118, 123, 125, 126, 133, 156, 159, 161, 162, 166, 174, 181, 189, 190, 193, 198, 201, 202, 209, 210, 211, 219, 222, 223, 237, 238, 240, 247, 248, 249, 250, 252, 253, 257, 260, 261, 262, 263, 265, 270, 273, 276, 285, 290, 292, 295, 298, 302, 304, 307, 309, 312, 313, 317, 331, 336, 340, 344, 350, 353, 354, 355, 368, 377, 382, 384, 388, 389, 394, 410, 413, 417, 421, 508, 533, 597, 610, 611, 780, 874, 928, 933, 950, 989, 996, 1004, 1021], "model_prop": 4, "none": [4, 8, 9, 10, 13, 17, 18, 27, 31, 34, 40, 42, 43, 45, 53, 55, 56, 57, 63, 98, 101, 106, 117, 122, 123, 125, 128, 142, 150, 154, 160, 161, 174, 180, 201, 202, 209, 212, 219, 222, 236, 237, 238, 240, 256, 262, 263, 274, 290, 292, 296, 311, 314, 319, 320, 328, 331, 338, 340, 341, 344, 345, 347, 353, 354, 377, 379, 382, 384, 389, 391, 396, 400, 409, 413, 416, 418, 419, 420, 421, 425, 426, 427, 428, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 503, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 700, 701, 702, 703, 707, 708, 709, 711, 712, 713, 714, 716, 718, 720, 721, 722, 723, 725, 726, 727, 728, 729, 731, 733, 734, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 762, 763, 765, 766, 767, 768, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 890, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 918, 920, 921, 922, 924, 925, 926, 927, 930, 932, 937, 938, 941, 942, 943, 944, 948, 949, 952, 955, 957, 958, 960, 963, 964, 970, 973, 974, 976, 978, 985, 989, 999, 1002, 1005, 1016, 1020, 1025, 1027, 1031, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "model_step": 4, "cv_result": [4, 13, 72, 119, 260, 261, 263, 265, 400, 812, 824, 989], "score": [4, 6, 8, 11, 13, 17, 21, 22, 25, 26, 27, 32, 33, 34, 38, 59, 61, 71, 72, 73, 74, 75, 76, 79, 83, 87, 104, 111, 113, 115, 122, 123, 124, 125, 126, 129, 132, 133, 140, 141, 145, 146, 147, 150, 165, 168, 170, 171, 172, 173, 174, 177, 185, 192, 193, 196, 201, 203, 207, 209, 217, 219, 230, 235, 236, 237, 240, 244, 251, 255, 260, 262, 263, 264, 265, 266, 267, 270, 271, 273, 274, 275, 276, 277, 278, 280, 283, 292, 293, 294, 301, 302, 303, 304, 309, 311, 312, 313, 314, 317, 318, 319, 320, 324, 327, 328, 330, 331, 340, 348, 353, 354, 358, 364, 377, 382, 384, 387, 395, 396, 403, 404, 406, 407, 408, 410, 412, 414, 416, 418, 426, 428, 432, 437, 443, 447, 449, 452, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 502, 504, 532, 536, 541, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 592, 593, 594, 595, 596, 598, 599, 600, 602, 603, 604, 606, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 698, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 735, 736, 737, 738, 739, 741, 754, 755, 756, 781, 782, 783, 784, 785, 786, 787, 788, 793, 794, 795, 796, 797, 798, 801, 802, 804, 812, 817, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 846, 847, 848, 850, 851, 852, 857, 858, 859, 861, 881, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 940, 947, 978, 981, 985, 987, 992, 995, 997, 999, 1003, 1010, 1011, 1019, 1021, 1023, 1025, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "neg_mean_absolute_error": [4, 133, 203, 989], "neg_root_mean_squared_error": [4, 313, 989], "return_estim": [4, 171, 324, 413, 824, 1039], "getattr": [4, 8, 307, 384, 396, 1047], "els": [4, 8, 11, 12, 13, 17, 20, 35, 42, 45, 50, 56, 57, 63, 83, 100, 116, 122, 123, 126, 161, 171, 172, 190, 203, 219, 223, 230, 234, 236, 237, 238, 239, 240, 262, 263, 266, 273, 285, 290, 298, 301, 302, 309, 353, 354, 362, 382, 386, 388, 416, 417, 419, 421, 437, 449, 508, 520, 533, 569, 625, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 670, 672, 673, 674, 676, 679, 681, 682, 683, 684, 703, 709, 787, 793, 795, 801, 802, 827, 865, 877, 880, 888, 901, 902, 916, 951, 953, 955, 976, 1005], "mae": [4, 13, 133, 201, 203, 558, 565, 744, 910, 912, 989, 1005, 1038, 1039, 1043, 1044], "test_neg_mean_absolute_error": [4, 203], "rmse": [4, 13, 82, 313, 749, 989, 1042], "test_neg_root_mean_squared_error": 4, "3f": [4, 6, 8, 11, 13, 15, 18, 22, 25, 27, 39, 41, 48, 49, 50, 59, 72, 74, 76, 87, 113, 120, 121, 146, 150, 153, 154, 155, 157, 162, 170, 172, 173, 181, 185, 187, 193, 201, 203, 207, 216, 217, 219, 223, 234, 236, 260, 262, 263, 265, 268, 270, 273, 285, 301, 331, 353, 354, 355, 997, 1021], "std": [4, 11, 12, 13, 38, 47, 51, 55, 62, 67, 80, 82, 83, 97, 98, 99, 120, 122, 123, 133, 140, 162, 165, 166, 171, 181, 186, 210, 234, 260, 261, 262, 264, 265, 267, 270, 272, 276, 313, 330, 343, 354, 364, 396, 409, 413, 416, 515, 606, 609, 881, 892, 999, 1024, 1039, 1043], "n": [4, 5, 7, 8, 10, 11, 15, 18, 20, 33, 34, 38, 40, 41, 59, 71, 76, 81, 86, 93, 96, 99, 101, 104, 106, 107, 113, 115, 116, 120, 135, 145, 150, 153, 157, 162, 172, 174, 181, 185, 197, 201, 202, 205, 216, 218, 219, 222, 233, 234, 235, 238, 247, 249, 250, 260, 262, 265, 267, 268, 269, 271, 272, 285, 288, 290, 304, 309, 311, 312, 319, 322, 328, 334, 344, 348, 362, 368, 376, 379, 380, 382, 386, 388, 391, 396, 399, 400, 406, 407, 409, 412, 413, 414, 415, 416, 417, 419, 420, 444, 445, 447, 448, 450, 469, 471, 474, 478, 489, 515, 516, 517, 518, 523, 528, 538, 540, 541, 547, 557, 558, 559, 560, 563, 564, 565, 566, 588, 589, 590, 591, 607, 608, 614, 627, 649, 671, 679, 692, 696, 699, 706, 707, 754, 803, 806, 808, 813, 814, 817, 837, 841, 842, 846, 866, 893, 895, 909, 910, 911, 912, 936, 941, 942, 964, 968, 969, 978, 981, 983, 985, 986, 989, 990, 991, 992, 993, 995, 996, 999, 1001, 1003, 1004, 1005, 1016, 1023, 1025, 1031, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "n_iter_": [4, 99, 209, 250, 396, 440, 447, 448, 449, 471, 472, 482, 483, 484, 531, 532, 533, 536, 537, 538, 539, 540, 543, 561, 562, 627, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 674, 676, 677, 678, 679, 680, 690, 692, 796, 797, 850, 858, 859, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 1035, 1038, 1039, 1041, 1044, 1045, 1047], "100": [4, 5, 7, 10, 12, 13, 17, 18, 20, 26, 28, 38, 43, 51, 54, 58, 62, 67, 72, 73, 76, 80, 81, 96, 98, 99, 106, 114, 119, 129, 132, 135, 154, 158, 161, 162, 171, 172, 174, 177, 180, 181, 183, 185, 187, 191, 192, 193, 195, 200, 201, 202, 203, 205, 210, 211, 212, 214, 216, 217, 219, 224, 225, 227, 233, 234, 235, 236, 237, 241, 247, 249, 253, 257, 258, 260, 262, 265, 267, 272, 273, 276, 290, 291, 292, 304, 308, 309, 311, 313, 314, 320, 324, 331, 332, 338, 339, 341, 342, 343, 347, 348, 350, 353, 354, 358, 361, 362, 368, 370, 377, 379, 382, 384, 387, 388, 400, 406, 409, 410, 413, 414, 415, 416, 417, 437, 441, 445, 449, 471, 472, 478, 490, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 528, 530, 534, 536, 539, 544, 545, 546, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 610, 631, 632, 633, 639, 640, 641, 642, 646, 647, 648, 649, 652, 653, 658, 659, 660, 661, 662, 663, 665, 667, 669, 671, 680, 681, 684, 688, 689, 690, 691, 693, 745, 796, 797, 800, 825, 826, 831, 836, 837, 838, 840, 841, 842, 846, 858, 859, 877, 879, 882, 891, 978, 979, 982, 986, 989, 990, 996, 999, 1001, 1016, 1020, 1024, 1025, 1039, 1040, 1041, 1044, 1045], "044": [4, 260, 353, 750, 989], "003": 4, "068": [4, 6, 13, 262], "005": [4, 262, 266, 290, 307, 354, 388], "max_it": [4, 8, 13, 15, 18, 26, 31, 32, 73, 74, 96, 99, 118, 119, 123, 135, 139, 141, 162, 165, 166, 171, 172, 180, 187, 193, 194, 208, 209, 210, 213, 214, 216, 222, 223, 224, 225, 241, 242, 247, 248, 249, 250, 253, 275, 295, 301, 302, 303, 313, 319, 320, 321, 327, 328, 337, 353, 354, 388, 396, 416, 421, 440, 443, 447, 448, 449, 454, 459, 461, 471, 472, 478, 482, 483, 484, 531, 532, 533, 535, 536, 537, 538, 539, 540, 543, 545, 546, 547, 548, 561, 562, 627, 638, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 672, 674, 676, 677, 678, 679, 680, 682, 683, 687, 688, 689, 690, 693, 694, 796, 797, 812, 850, 858, 859, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 979, 981, 985, 992, 993, 1002, 1003, 1021, 1025, 1032, 1035, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1048], "earli": [4, 7, 15, 45, 63, 112, 113, 119, 122, 125, 127, 137, 168, 179, 189, 190, 220, 311, 318, 347, 396, 416, 441, 445, 449, 463, 490, 496, 536, 537, 538, 539, 546, 553, 554, 559, 560, 561, 562, 571, 627, 645, 656, 666, 667, 668, 676, 678, 692, 749, 827, 858, 859, 963, 986, 992, 999, 1008, 1010, 1011, 1014, 1031, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1048], "stop": [4, 7, 12, 18, 45, 63, 112, 113, 119, 125, 127, 137, 158, 160, 168, 172, 179, 189, 190, 203, 220, 311, 318, 347, 382, 384, 390, 391, 396, 409, 414, 416, 418, 440, 441, 443, 445, 447, 449, 452, 454, 462, 463, 471, 472, 478, 482, 483, 484, 490, 496, 508, 509, 532, 536, 537, 538, 539, 540, 543, 545, 546, 547, 553, 554, 557, 558, 559, 560, 561, 562, 564, 565, 571, 588, 589, 591, 602, 617, 627, 644, 645, 646, 648, 649, 652, 656, 658, 659, 666, 667, 668, 669, 671, 676, 677, 678, 680, 691, 692, 695, 714, 749, 796, 797, 827, 858, 859, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 943, 963, 978, 985, 993, 994, 1004, 1005, 1010, 1011, 1012, 1014, 1027, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048], "place": [4, 17, 61, 231, 241, 289, 368, 380, 382, 383, 384, 387, 389, 397, 407, 417, 419, 441, 445, 446, 482, 483, 484, 515, 581, 590, 628, 630, 631, 767, 780, 796, 884, 886, 887, 888, 889, 890, 891, 892, 968, 969, 1009, 1031, 1038, 1041, 1042, 1044, 1048], "an": [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 22, 26, 27, 28, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 47, 49, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 76, 79, 80, 81, 82, 90, 96, 97, 98, 99, 100, 101, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 129, 130, 131, 132, 133, 136, 140, 141, 142, 146, 150, 153, 154, 155, 158, 159, 160, 162, 164, 165, 167, 168, 170, 171, 172, 173, 177, 179, 180, 181, 184, 185, 189, 196, 201, 202, 203, 205, 206, 208, 209, 215, 217, 218, 219, 220, 222, 223, 224, 225, 227, 230, 231, 233, 234, 235, 236, 237, 238, 240, 244, 247, 248, 250, 252, 253, 256, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 271, 273, 275, 277, 283, 285, 288, 291, 292, 293, 296, 297, 298, 307, 312, 313, 314, 318, 319, 320, 322, 323, 324, 328, 332, 336, 337, 339, 340, 342, 343, 344, 353, 354, 355, 358, 361, 362, 364, 368, 369, 370, 371, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 395, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 430, 433, 434, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 503, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 575, 576, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 610, 611, 612, 619, 622, 623, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 709, 711, 712, 718, 720, 721, 726, 728, 729, 733, 734, 736, 741, 742, 744, 745, 747, 749, 750, 752, 755, 757, 758, 762, 763, 765, 766, 767, 768, 769, 772, 774, 775, 776, 777, 780, 781, 782, 783, 786, 787, 788, 789, 790, 791, 792, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 809, 810, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 916, 918, 919, 921, 922, 924, 925, 928, 932, 933, 934, 936, 937, 938, 940, 942, 945, 946, 947, 948, 949, 950, 952, 953, 954, 957, 959, 960, 963, 964, 970, 973, 975, 976, 977, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1014, 1017, 1019, 1020, 1024, 1025, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "quit": [4, 13, 54, 58, 87, 116, 139, 150, 171, 172, 199, 219, 270, 280, 320, 353, 368, 387, 395, 409, 417, 984, 986, 991, 1014, 1039], "good": [4, 9, 21, 26, 28, 41, 45, 47, 50, 53, 54, 56, 59, 75, 82, 87, 106, 119, 122, 125, 126, 154, 158, 165, 171, 185, 190, 201, 202, 207, 216, 227, 230, 234, 237, 240, 248, 250, 256, 262, 268, 277, 304, 312, 313, 319, 327, 332, 340, 353, 354, 364, 368, 369, 370, 381, 383, 384, 385, 386, 388, 394, 396, 403, 406, 407, 409, 411, 413, 414, 416, 417, 418, 419, 437, 439, 444, 534, 559, 561, 562, 590, 630, 640, 647, 648, 656, 658, 659, 661, 669, 680, 690, 694, 722, 730, 741, 763, 826, 895, 938, 978, 984, 985, 986, 989, 990, 992, 993, 994, 996, 997, 999, 1003, 1004, 1005, 1010, 1014, 1016, 1020, 1023, 1025, 1037], "trial": [4, 267, 447, 449, 460, 671, 796, 797, 985, 1037], "without": [4, 5, 13, 14, 25, 37, 43, 45, 48, 53, 56, 57, 63, 67, 68, 69, 76, 101, 119, 124, 125, 128, 130, 133, 141, 146, 150, 160, 168, 170, 171, 172, 185, 190, 209, 230, 234, 237, 238, 241, 243, 256, 263, 267, 269, 280, 285, 286, 287, 288, 294, 295, 296, 297, 299, 307, 308, 312, 314, 317, 344, 348, 354, 370, 377, 378, 380, 382, 383, 384, 386, 387, 388, 391, 394, 395, 396, 400, 403, 409, 410, 414, 416, 417, 418, 419, 434, 439, 441, 446, 458, 469, 474, 496, 504, 515, 532, 534, 555, 556, 563, 579, 580, 611, 627, 631, 634, 639, 659, 692, 700, 780, 801, 802, 803, 810, 812, 826, 827, 843, 850, 854, 860, 861, 864, 867, 870, 871, 873, 877, 878, 879, 881, 886, 901, 917, 978, 979, 981, 983, 985, 986, 989, 992, 995, 999, 1003, 1004, 1005, 1009, 1010, 1011, 1016, 1017, 1025, 1028, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048], "ani": [4, 8, 9, 13, 14, 20, 45, 47, 56, 58, 68, 130, 145, 150, 158, 159, 160, 170, 171, 172, 173, 174, 190, 201, 205, 219, 230, 233, 234, 237, 248, 252, 253, 262, 263, 265, 268, 271, 280, 298, 307, 308, 311, 317, 319, 320, 322, 340, 344, 355, 364, 368, 369, 370, 376, 377, 379, 380, 382, 384, 386, 387, 388, 390, 395, 396, 397, 399, 400, 405, 406, 407, 408, 409, 410, 413, 414, 415, 416, 417, 418, 434, 440, 446, 448, 449, 450, 452, 454, 456, 457, 461, 464, 467, 488, 489, 508, 509, 523, 534, 537, 539, 546, 551, 557, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 579, 580, 582, 588, 589, 591, 593, 603, 610, 611, 620, 627, 632, 633, 645, 648, 658, 659, 666, 667, 668, 669, 676, 677, 678, 679, 680, 692, 696, 699, 700, 704, 716, 717, 719, 723, 735, 736, 751, 754, 756, 773, 777, 778, 779, 780, 791, 792, 794, 798, 801, 802, 810, 811, 830, 833, 841, 842, 847, 851, 860, 861, 865, 866, 870, 872, 874, 875, 882, 891, 892, 895, 898, 901, 902, 909, 910, 911, 912, 913, 915, 917, 921, 922, 959, 973, 978, 979, 981, 984, 985, 986, 989, 990, 991, 992, 995, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1009, 1016, 1018, 1022, 1023, 1025, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "tune": [4, 45, 56, 72, 101, 113, 119, 149, 153, 165, 172, 190, 205, 206, 218, 226, 240, 256, 267, 287, 308, 340, 344, 348, 353, 364, 368, 369, 370, 395, 396, 404, 408, 409, 413, 416, 418, 419, 452, 462, 559, 560, 594, 613, 614, 615, 617, 619, 620, 622, 623, 625, 643, 659, 690, 694, 857, 983, 984, 985, 986, 988, 989, 992, 993, 995, 1003, 1004, 1017, 1027, 1031, 1045, 1047], "just": [4, 13, 32, 71, 87, 96, 119, 123, 150, 191, 198, 223, 235, 262, 269, 273, 285, 301, 340, 353, 354, 362, 364, 377, 381, 382, 383, 384, 386, 387, 390, 394, 395, 396, 406, 409, 410, 413, 416, 418, 421, 468, 533, 535, 542, 546, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 579, 584, 610, 611, 646, 652, 657, 658, 660, 662, 666, 667, 668, 676, 677, 678, 804, 820, 850, 858, 859, 978, 985, 988, 989, 990, 993, 997, 999, 1003, 1010, 1023, 1031, 1035, 1037, 1039, 1043, 1047], "had": [4, 9, 48, 126, 158, 237, 307, 313, 320, 364, 382, 383, 417, 420, 444, 979, 989, 1014, 1016, 1031, 1032, 1038, 1039, 1040, 1041, 1042, 1046], "explicit": [4, 168, 172, 177, 229, 237, 245, 344, 368, 369, 370, 381, 383, 394, 396, 397, 410, 417, 423, 472, 499, 501, 502, 541, 551, 552, 631, 638, 639, 641, 676, 798, 799, 806, 845, 853, 861, 901, 906, 953, 957, 981, 983, 985, 989, 999, 1005, 1009, 1011, 1031, 1035, 1040, 1041, 1044, 1048], "pass": [4, 7, 8, 21, 22, 35, 39, 119, 130, 147, 182, 185, 202, 231, 233, 234, 237, 240, 241, 243, 252, 260, 263, 314, 317, 320, 345, 355, 364, 368, 369, 370, 377, 382, 383, 384, 387, 388, 389, 390, 391, 394, 396, 400, 403, 405, 409, 410, 413, 414, 416, 417, 419, 420, 421, 427, 431, 437, 438, 440, 442, 443, 444, 446, 447, 448, 449, 450, 452, 454, 457, 459, 460, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 488, 491, 492, 495, 496, 497, 503, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 581, 582, 588, 589, 590, 591, 593, 594, 597, 607, 608, 610, 611, 617, 620, 626, 631, 632, 634, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 731, 732, 741, 762, 773, 777, 778, 779, 780, 787, 791, 792, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 810, 812, 813, 814, 815, 816, 817, 818, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 872, 873, 874, 875, 876, 878, 880, 881, 882, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 921, 922, 928, 932, 933, 937, 938, 940, 942, 944, 946, 949, 950, 957, 959, 960, 963, 978, 979, 985, 987, 989, 990, 991, 992, 993, 996, 999, 1002, 1003, 1004, 1010, 1014, 1016, 1020, 1028, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "them": [4, 5, 8, 33, 40, 41, 50, 54, 56, 57, 61, 66, 67, 71, 72, 87, 96, 98, 101, 114, 129, 145, 150, 153, 165, 166, 171, 172, 173, 177, 180, 185, 196, 202, 203, 205, 219, 234, 237, 240, 241, 260, 262, 263, 265, 271, 280, 287, 307, 312, 314, 320, 331, 340, 355, 362, 368, 370, 377, 380, 382, 383, 384, 385, 386, 390, 394, 396, 397, 398, 400, 403, 407, 408, 409, 410, 413, 414, 416, 417, 419, 444, 447, 449, 450, 457, 464, 467, 493, 494, 508, 567, 568, 569, 570, 607, 608, 616, 620, 621, 624, 632, 639, 664, 692, 767, 770, 773, 777, 778, 779, 780, 788, 798, 812, 819, 826, 861, 865, 870, 871, 875, 879, 881, 882, 891, 892, 898, 909, 910, 946, 955, 978, 979, 985, 988, 989, 990, 992, 993, 994, 999, 1004, 1005, 1008, 1009, 1013, 1014, 1016, 1023, 1024, 1025, 1031, 1032, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "But": [4, 9, 54, 170, 202, 203, 262, 285, 307, 382, 394, 409, 412, 415, 416, 462, 745, 909, 910, 978, 989, 1004, 1010], "much": [4, 6, 7, 9, 13, 20, 26, 41, 56, 81, 83, 93, 99, 106, 118, 126, 127, 133, 134, 135, 153, 165, 166, 171, 172, 173, 174, 177, 198, 199, 203, 234, 237, 262, 264, 265, 268, 273, 303, 308, 312, 313, 314, 319, 320, 322, 340, 345, 353, 354, 364, 368, 370, 377, 382, 383, 384, 387, 390, 394, 395, 399, 407, 408, 411, 412, 413, 414, 415, 416, 417, 418, 447, 448, 496, 534, 535, 536, 538, 559, 560, 561, 562, 658, 659, 666, 667, 668, 676, 677, 678, 692, 778, 779, 801, 802, 816, 876, 894, 901, 978, 981, 984, 985, 986, 988, 989, 990, 992, 993, 995, 997, 1001, 1002, 1004, 1005, 1010, 1014, 1020, 1021, 1023, 1024, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "monoton": [4, 26, 112, 137, 168, 172, 219, 233, 241, 318, 407, 557, 558, 561, 562, 564, 565, 632, 635, 636, 694, 706, 877, 889, 903, 906, 909, 910, 911, 912, 986, 990, 999, 1004, 1011, 1038, 1042, 1046, 1048], "relationship": [4, 13, 21, 113, 114, 159, 170, 171, 180, 185, 201, 203, 204, 269, 283, 308, 314, 324, 396, 409, 411, 413, 462, 636, 714, 986, 989, 991, 992, 996, 997, 1023, 1036], "ordin": [4, 54, 72, 133, 240, 310, 313, 314, 319, 322, 376, 396, 416, 496, 567, 709, 866, 869, 874, 875, 882, 985, 986, 999, 1010, 1039, 1045], "case": [4, 7, 8, 13, 26, 28, 35, 38, 50, 53, 56, 58, 62, 67, 72, 73, 82, 87, 101, 104, 116, 118, 119, 126, 127, 133, 147, 149, 150, 153, 160, 171, 172, 174, 185, 187, 190, 192, 201, 202, 203, 205, 206, 209, 215, 217, 218, 219, 230, 234, 235, 236, 237, 240, 241, 252, 256, 259, 261, 262, 263, 265, 268, 269, 271, 280, 285, 288, 292, 303, 307, 309, 312, 314, 317, 320, 344, 353, 354, 355, 362, 364, 368, 369, 370, 376, 377, 380, 382, 383, 384, 386, 387, 388, 389, 391, 394, 395, 396, 397, 399, 400, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 437, 440, 443, 444, 446, 447, 451, 453, 463, 464, 465, 467, 474, 496, 508, 509, 515, 539, 541, 542, 543, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 582, 588, 591, 593, 594, 597, 602, 606, 609, 610, 611, 625, 627, 628, 630, 632, 647, 648, 653, 656, 657, 658, 659, 661, 663, 666, 668, 669, 672, 674, 675, 676, 680, 682, 683, 684, 685, 686, 687, 699, 703, 708, 709, 712, 718, 720, 721, 722, 725, 727, 728, 729, 733, 734, 737, 741, 742, 744, 745, 747, 749, 752, 753, 755, 762, 777, 780, 782, 783, 784, 786, 787, 788, 789, 793, 795, 797, 798, 801, 802, 804, 812, 816, 820, 821, 822, 823, 824, 825, 826, 828, 830, 838, 841, 842, 843, 844, 845, 847, 849, 850, 851, 852, 853, 861, 868, 870, 871, 874, 875, 876, 879, 880, 881, 882, 885, 891, 892, 893, 894, 901, 903, 906, 909, 910, 916, 917, 927, 938, 939, 957, 978, 979, 981, 983, 984, 986, 987, 988, 990, 991, 992, 993, 995, 996, 999, 1003, 1004, 1005, 1009, 1010, 1013, 1014, 1016, 1025, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "usual": [4, 13, 41, 79, 80, 82, 125, 126, 128, 133, 170, 172, 187, 201, 202, 256, 259, 262, 271, 272, 308, 320, 340, 364, 368, 369, 380, 382, 384, 390, 394, 395, 396, 400, 406, 409, 410, 413, 414, 416, 417, 418, 450, 456, 538, 540, 542, 547, 559, 560, 607, 608, 630, 640, 658, 659, 666, 667, 668, 676, 677, 678, 692, 725, 757, 804, 825, 829, 901, 938, 978, 979, 981, 984, 985, 986, 988, 989, 990, 993, 994, 995, 996, 999, 1003, 1004, 1005, 1016, 1022, 1023, 1046], "hot": [4, 72, 118, 121, 133, 171, 201, 271, 308, 309, 313, 319, 340, 396, 416, 417, 551, 566, 581, 648, 658, 659, 669, 680, 864, 866, 868, 869, 872, 874, 875, 882, 985, 999, 1039, 1045, 1046], "encod": [4, 8, 11, 49, 56, 72, 96, 118, 133, 168, 171, 172, 173, 183, 200, 201, 240, 271, 306, 308, 309, 310, 315, 319, 321, 322, 340, 353, 355, 374, 376, 378, 384, 387, 394, 396, 410, 413, 414, 416, 417, 419, 464, 487, 496, 503, 526, 531, 537, 539, 540, 542, 544, 545, 546, 548, 551, 561, 562, 566, 567, 569, 581, 588, 589, 591, 630, 648, 658, 659, 669, 672, 680, 734, 800, 805, 807, 824, 827, 861, 862, 864, 866, 868, 869, 872, 874, 875, 882, 885, 899, 978, 979, 985, 986, 989, 991, 992, 994, 1003, 1009, 1010, 1011, 1027, 1032, 1033, 1039, 1043, 1045, 1046, 1047, 1048], "consist": [4, 7, 27, 33, 38, 57, 58, 71, 81, 91, 93, 96, 119, 123, 129, 136, 150, 156, 158, 161, 166, 174, 201, 219, 236, 240, 268, 271, 303, 312, 317, 320, 348, 354, 364, 368, 375, 377, 379, 382, 384, 388, 389, 390, 391, 395, 396, 397, 407, 409, 411, 415, 416, 417, 427, 428, 431, 432, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 490, 497, 531, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 554, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 591, 611, 627, 628, 629, 630, 635, 638, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 674, 677, 678, 679, 687, 688, 689, 690, 691, 700, 734, 796, 797, 805, 829, 830, 831, 833, 834, 835, 836, 844, 845, 847, 849, 852, 853, 859, 864, 865, 866, 868, 872, 873, 876, 877, 879, 880, 882, 893, 894, 897, 901, 902, 904, 905, 907, 910, 912, 921, 923, 944, 960, 963, 978, 981, 982, 983, 985, 986, 988, 989, 990, 992, 993, 999, 1002, 1004, 1005, 1008, 1010, 1014, 1016, 1023, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "scale": [4, 5, 12, 26, 28, 38, 41, 44, 47, 48, 57, 59, 62, 72, 73, 80, 83, 87, 98, 101, 102, 124, 130, 150, 153, 154, 155, 158, 159, 160, 162, 168, 172, 177, 181, 182, 189, 192, 201, 203, 205, 215, 216, 217, 219, 221, 224, 228, 230, 236, 240, 252, 259, 262, 263, 264, 265, 269, 288, 290, 302, 303, 304, 306, 307, 315, 318, 321, 323, 324, 332, 335, 337, 340, 344, 351, 364, 367, 368, 374, 375, 376, 379, 382, 387, 391, 394, 395, 396, 408, 409, 410, 414, 416, 417, 418, 419, 446, 447, 450, 451, 457, 464, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 501, 510, 514, 515, 524, 534, 538, 540, 541, 547, 549, 550, 561, 562, 582, 590, 591, 597, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 631, 632, 641, 644, 645, 646, 647, 649, 652, 658, 659, 660, 661, 662, 672, 674, 676, 677, 678, 681, 687, 688, 689, 690, 692, 694, 699, 703, 716, 740, 746, 756, 758, 768, 774, 776, 804, 812, 815, 827, 828, 829, 841, 842, 843, 858, 859, 862, 865, 870, 871, 873, 876, 878, 879, 881, 886, 887, 888, 890, 891, 893, 894, 901, 902, 903, 904, 905, 906, 907, 965, 966, 967, 978, 981, 982, 985, 989, 990, 991, 992, 993, 997, 1003, 1004, 1010, 1011, 1014, 1016, 1023, 1024, 1026, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "same": [4, 7, 8, 13, 17, 21, 27, 35, 38, 41, 45, 54, 56, 58, 59, 65, 71, 72, 73, 93, 96, 98, 101, 104, 106, 114, 116, 120, 123, 126, 127, 131, 150, 153, 171, 172, 174, 187, 189, 190, 195, 201, 202, 203, 209, 219, 237, 241, 252, 257, 258, 259, 260, 262, 263, 265, 267, 268, 270, 275, 285, 288, 290, 303, 307, 308, 310, 312, 313, 317, 319, 330, 340, 353, 354, 355, 362, 364, 368, 369, 370, 376, 377, 379, 381, 382, 384, 386, 388, 391, 394, 395, 396, 397, 400, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 430, 434, 438, 439, 446, 450, 456, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 493, 495, 496, 498, 504, 508, 509, 531, 532, 535, 536, 537, 538, 539, 540, 543, 547, 549, 551, 552, 553, 554, 557, 559, 560, 561, 562, 564, 565, 567, 568, 589, 590, 602, 603, 606, 610, 611, 613, 622, 627, 628, 629, 632, 633, 646, 649, 652, 653, 655, 658, 659, 663, 666, 667, 668, 672, 673, 674, 675, 676, 677, 678, 684, 687, 699, 704, 705, 712, 713, 715, 717, 725, 730, 731, 735, 741, 754, 755, 756, 777, 778, 779, 785, 787, 791, 793, 794, 796, 797, 798, 799, 801, 802, 804, 806, 807, 812, 816, 817, 820, 822, 823, 824, 825, 826, 827, 828, 843, 844, 845, 849, 851, 852, 853, 864, 865, 866, 870, 871, 873, 875, 876, 877, 878, 879, 880, 881, 883, 890, 901, 902, 909, 911, 923, 927, 938, 955, 960, 963, 964, 974, 978, 979, 981, 983, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 999, 1003, 1004, 1005, 1009, 1010, 1020, 1025, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "minmaxscal": [4, 5, 73, 146, 177, 223, 240, 302, 319, 370, 405, 410, 464, 887, 979, 999, 1033, 1036, 1039, 1041, 1042, 1043, 1047, 1048], "although": [4, 9, 26, 120, 133, 170, 198, 219, 230, 249, 283, 344, 364, 370, 384, 396, 409, 410, 414, 417, 496, 815, 818, 872, 988, 990, 991, 992, 995, 1005, 1016, 1023, 1024, 1025, 1031, 1039, 1046], "doe": [4, 7, 8, 9, 12, 13, 25, 26, 28, 32, 35, 41, 47, 54, 56, 58, 71, 73, 74, 87, 107, 113, 118, 119, 122, 123, 124, 128, 133, 150, 159, 171, 172, 185, 198, 201, 207, 219, 222, 223, 224, 227, 230, 233, 234, 235, 237, 238, 240, 249, 250, 257, 262, 264, 265, 269, 271, 272, 283, 285, 298, 307, 309, 311, 313, 314, 320, 321, 330, 331, 338, 340, 348, 350, 353, 354, 355, 368, 376, 380, 382, 383, 384, 386, 390, 395, 396, 400, 403, 407, 408, 409, 410, 413, 414, 416, 417, 418, 419, 434, 440, 442, 446, 447, 449, 450, 454, 456, 465, 467, 472, 473, 479, 487, 499, 503, 508, 527, 535, 537, 538, 539, 541, 544, 546, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 581, 582, 583, 588, 589, 591, 593, 594, 597, 602, 606, 610, 627, 632, 638, 649, 650, 651, 654, 655, 656, 659, 671, 673, 675, 682, 683, 698, 700, 702, 707, 727, 728, 729, 733, 735, 737, 742, 745, 777, 782, 783, 786, 787, 793, 798, 801, 802, 812, 858, 860, 862, 863, 864, 866, 868, 870, 873, 874, 875, 878, 881, 882, 890, 893, 894, 898, 901, 902, 909, 910, 911, 912, 916, 921, 925, 938, 941, 942, 955, 957, 973, 978, 979, 981, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 995, 997, 999, 1003, 1004, 1005, 1025, 1031, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "result": [4, 5, 6, 9, 13, 14, 20, 25, 26, 27, 28, 31, 33, 35, 38, 41, 43, 44, 45, 46, 47, 49, 54, 55, 56, 61, 63, 67, 72, 74, 76, 82, 87, 96, 99, 101, 103, 107, 116, 117, 118, 120, 123, 124, 126, 127, 129, 131, 132, 142, 149, 150, 153, 155, 157, 161, 165, 171, 172, 173, 174, 181, 186, 187, 190, 191, 196, 202, 203, 205, 209, 215, 216, 219, 222, 223, 226, 230, 233, 235, 241, 247, 252, 253, 256, 257, 260, 262, 263, 265, 268, 269, 270, 271, 273, 274, 277, 280, 285, 287, 291, 301, 302, 303, 307, 308, 309, 312, 317, 319, 321, 322, 323, 324, 327, 330, 332, 340, 344, 345, 348, 353, 355, 360, 361, 362, 368, 369, 370, 376, 377, 379, 382, 384, 386, 387, 388, 390, 394, 395, 396, 397, 403, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 434, 440, 441, 443, 445, 446, 447, 450, 451, 452, 453, 454, 455, 457, 459, 462, 464, 467, 469, 470, 471, 472, 473, 474, 475, 476, 479, 489, 508, 509, 511, 513, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 579, 580, 581, 582, 584, 588, 589, 591, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 630, 631, 632, 634, 636, 640, 643, 652, 653, 658, 664, 665, 666, 667, 676, 677, 678, 686, 689, 690, 691, 692, 693, 694, 695, 708, 710, 712, 717, 724, 725, 727, 728, 729, 730, 731, 735, 736, 737, 753, 755, 756, 763, 770, 773, 777, 778, 779, 780, 782, 783, 784, 786, 792, 793, 796, 797, 798, 800, 801, 802, 803, 808, 812, 813, 814, 815, 817, 818, 822, 828, 829, 830, 832, 833, 834, 835, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 865, 866, 874, 875, 878, 879, 882, 890, 894, 898, 901, 903, 906, 909, 910, 911, 912, 913, 914, 921, 922, 937, 938, 940, 944, 954, 960, 963, 979, 981, 983, 984, 985, 986, 988, 989, 990, 992, 993, 994, 995, 996, 997, 999, 1001, 1003, 1004, 1005, 1009, 1010, 1013, 1016, 1020, 1021, 1023, 1024, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "compar": [4, 5, 9, 11, 13, 20, 21, 25, 26, 28, 35, 37, 38, 40, 41, 42, 44, 48, 50, 53, 55, 56, 57, 58, 59, 62, 65, 68, 69, 72, 73, 74, 75, 81, 82, 85, 87, 88, 92, 93, 99, 104, 106, 112, 113, 114, 116, 118, 122, 123, 124, 126, 128, 129, 131, 133, 136, 137, 141, 150, 157, 165, 166, 168, 171, 172, 173, 174, 179, 181, 183, 185, 189, 190, 196, 198, 201, 202, 204, 205, 207, 209, 211, 215, 218, 219, 220, 222, 223, 226, 229, 232, 235, 238, 240, 241, 243, 245, 249, 250, 255, 257, 259, 260, 261, 263, 265, 267, 269, 271, 273, 274, 276, 278, 280, 285, 286, 287, 288, 290, 291, 292, 294, 295, 296, 297, 299, 300, 303, 305, 306, 308, 311, 312, 314, 315, 319, 344, 353, 354, 355, 361, 362, 364, 370, 377, 379, 382, 384, 406, 407, 409, 411, 412, 413, 414, 416, 418, 419, 440, 441, 442, 444, 445, 446, 448, 449, 450, 452, 458, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 490, 496, 502, 504, 512, 514, 522, 524, 528, 531, 537, 551, 552, 561, 562, 563, 564, 565, 571, 631, 639, 644, 645, 653, 655, 657, 658, 663, 666, 668, 676, 677, 684, 695, 705, 712, 715, 730, 737, 742, 785, 797, 798, 803, 812, 824, 827, 834, 843, 847, 850, 854, 858, 861, 862, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 881, 882, 886, 887, 888, 889, 890, 891, 892, 901, 902, 903, 905, 906, 978, 981, 982, 983, 985, 986, 988, 989, 990, 991, 992, 993, 995, 999, 1000, 1003, 1004, 1005, 1008, 1009, 1011, 1023, 1024, 1031, 1033, 1038, 1039, 1044], "linear_model": [4, 7, 8, 10, 14, 26, 28, 31, 55, 72, 74, 76, 87, 118, 133, 135, 136, 139, 141, 149, 150, 153, 165, 168, 170, 171, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 230, 231, 232, 233, 237, 239, 242, 244, 258, 265, 270, 271, 275, 276, 283, 304, 308, 309, 312, 314, 317, 318, 319, 320, 321, 323, 324, 331, 353, 364, 368, 370, 371, 381, 382, 384, 388, 390, 391, 395, 396, 400, 410, 416, 438, 465, 537, 539, 542, 543, 545, 546, 548, 567, 568, 569, 570, 597, 631, 632, 634, 635, 638, 640, 641, 642, 643, 700, 701, 787, 812, 820, 822, 823, 824, 832, 833, 834, 835, 859, 876, 880, 901, 902, 905, 908, 933, 981, 985, 989, 990, 995, 997, 999, 1003, 1011, 1020, 1021, 1023, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "ridgecv": [4, 76, 133, 150, 171, 239, 396, 400, 416, 568, 643, 672, 675, 985, 1031, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "onehotencod": [4, 72, 118, 123, 133, 171, 172, 201, 219, 232, 240, 242, 244, 313, 318, 320, 323, 324, 376, 396, 410, 416, 466, 467, 566, 581, 582, 864, 868, 869, 872, 875, 882, 979, 999, 1032, 1035, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "one_hot_encod": [4, 123], "handle_unknown": [4, 72, 118, 123, 133, 172, 173, 232, 240, 242, 244, 313, 318, 321, 874, 875, 999, 1035, 1039, 1043, 1044], "ignor": [4, 6, 8, 18, 45, 50, 56, 63, 72, 113, 115, 118, 123, 130, 133, 172, 189, 193, 201, 210, 216, 232, 237, 242, 244, 253, 302, 303, 312, 313, 318, 321, 344, 345, 354, 359, 382, 384, 386, 388, 396, 399, 409, 410, 416, 417, 427, 428, 431, 434, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 460, 461, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 488, 503, 508, 509, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 579, 581, 582, 583, 588, 589, 590, 591, 594, 597, 602, 603, 610, 611, 627, 628, 629, 630, 632, 633, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 707, 713, 714, 725, 728, 729, 737, 754, 755, 762, 768, 773, 777, 782, 783, 786, 787, 796, 797, 799, 800, 801, 803, 805, 806, 807, 808, 811, 813, 814, 815, 816, 817, 818, 819, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 858, 859, 860, 861, 864, 865, 866, 867, 868, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 893, 894, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 964, 985, 986, 989, 991, 995, 999, 1004, 1021, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1048], "sparse_output": [4, 123, 244, 313, 321, 324, 566, 868, 872, 874, 880, 885, 999, 1046, 1047], "alpha": [4, 5, 7, 8, 10, 12, 13, 14, 17, 18, 25, 27, 32, 35, 38, 41, 43, 46, 53, 57, 61, 66, 76, 83, 87, 96, 98, 99, 101, 102, 103, 105, 106, 113, 115, 116, 122, 126, 129, 130, 132, 133, 134, 150, 153, 156, 158, 159, 160, 161, 162, 165, 166, 171, 180, 181, 182, 183, 185, 186, 187, 189, 190, 195, 196, 198, 199, 201, 202, 203, 205, 206, 210, 213, 214, 219, 222, 223, 226, 235, 236, 243, 247, 262, 263, 264, 265, 266, 269, 270, 272, 274, 275, 283, 285, 288, 290, 293, 295, 301, 303, 307, 308, 309, 310, 312, 314, 318, 320, 321, 324, 329, 331, 337, 338, 341, 342, 344, 345, 348, 349, 350, 353, 368, 377, 384, 388, 394, 411, 412, 414, 416, 418, 419, 421, 446, 471, 472, 478, 527, 531, 533, 535, 536, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 560, 595, 596, 598, 611, 613, 615, 616, 623, 631, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 687, 722, 747, 836, 837, 838, 840, 858, 859, 897, 909, 910, 911, 912, 978, 985, 989, 991, 993, 997, 1002, 1003, 1004, 1005, 1020, 1023, 1025, 1028, 1031, 1033, 1034, 1035, 1036, 1038, 1039, 1043, 1044, 1045, 1046, 1047], "logspac": [4, 12, 74, 79, 104, 139, 140, 150, 154, 159, 171, 194, 205, 206, 234, 236, 251, 263, 275, 277, 289, 301, 309, 312, 340, 348, 820, 984, 985, 1020, 1021, 1023], "naive_linear_pipelin": 4, "transform": [4, 5, 6, 8, 10, 12, 14, 26, 28, 45, 47, 48, 49, 52, 55, 58, 63, 70, 74, 75, 77, 87, 90, 91, 98, 99, 101, 103, 105, 106, 112, 117, 119, 123, 132, 133, 135, 137, 147, 159, 166, 168, 171, 172, 173, 177, 193, 201, 202, 209, 215, 217, 219, 223, 226, 230, 232, 233, 235, 237, 238, 240, 244, 249, 258, 259, 260, 263, 271, 283, 285, 287, 293, 294, 295, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 322, 324, 340, 343, 344, 353, 355, 364, 371, 376, 377, 378, 379, 382, 384, 387, 391, 396, 400, 405, 407, 408, 409, 411, 414, 416, 417, 418, 419, 425, 430, 433, 437, 441, 442, 443, 445, 447, 449, 452, 464, 465, 466, 467, 468, 482, 483, 484, 485, 488, 489, 496, 503, 508, 509, 514, 515, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 557, 559, 561, 564, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 636, 638, 639, 640, 641, 642, 653, 658, 663, 673, 676, 684, 688, 689, 690, 691, 692, 694, 701, 702, 713, 752, 753, 784, 798, 801, 802, 812, 827, 830, 836, 845, 850, 853, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 899, 901, 903, 906, 907, 930, 932, 947, 978, 979, 981, 983, 985, 986, 989, 990, 993, 1003, 1004, 1006, 1009, 1010, 1011, 1012, 1016, 1021, 1022, 1025, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "remaind": [4, 123, 171, 190, 201, 203, 219, 240, 322, 358, 410, 464, 467, 1031, 1038, 1039, 1040, 1043, 1044, 1047], "alpha_": [4, 83, 139, 171, 181, 189, 190, 472, 611, 644, 645, 647, 651, 653, 655, 656, 661, 663, 673, 675, 985, 1005, 1020, 1031, 1038], "7298221281347033": 4, "142": [4, 13, 59, 416], "014": [4, 270, 388], "184": [4, 201, 249, 254, 304, 388, 1011, 1023], "020": [4, 997], "affirm": 4, "select": [4, 7, 9, 10, 21, 35, 37, 38, 45, 48, 56, 58, 63, 66, 69, 70, 72, 75, 77, 79, 83, 93, 95, 96, 100, 106, 107, 108, 113, 115, 121, 123, 126, 133, 140, 145, 147, 151, 158, 160, 171, 172, 174, 177, 179, 181, 183, 185, 187, 188, 200, 205, 209, 216, 219, 220, 223, 230, 234, 236, 240, 246, 247, 248, 249, 253, 254, 260, 261, 262, 263, 267, 275, 289, 307, 312, 313, 319, 323, 327, 328, 331, 335, 340, 348, 351, 353, 354, 355, 364, 368, 369, 371, 377, 379, 380, 382, 384, 390, 395, 396, 406, 409, 410, 411, 414, 416, 417, 419, 443, 445, 446, 447, 449, 451, 453, 458, 459, 460, 464, 466, 467, 472, 473, 476, 488, 489, 492, 493, 496, 497, 500, 501, 502, 504, 512, 515, 532, 534, 535, 540, 541, 544, 549, 551, 558, 559, 560, 563, 565, 581, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 627, 631, 632, 645, 646, 647, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 671, 673, 676, 678, 682, 683, 691, 692, 697, 712, 716, 718, 753, 787, 791, 792, 796, 797, 798, 801, 802, 803, 804, 812, 823, 824, 825, 827, 829, 843, 844, 845, 847, 849, 851, 852, 853, 861, 862, 866, 871, 877, 881, 898, 901, 902, 906, 909, 910, 911, 912, 917, 959, 983, 984, 986, 988, 989, 990, 992, 993, 995, 999, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1019, 1023, 1024, 1025, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048], "specifi": [4, 21, 56, 96, 123, 124, 154, 157, 159, 160, 161, 190, 202, 209, 247, 270, 368, 369, 376, 380, 382, 384, 391, 395, 396, 400, 403, 409, 410, 413, 414, 416, 418, 419, 421, 423, 437, 441, 445, 450, 452, 463, 464, 467, 469, 470, 472, 473, 474, 475, 476, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 503, 515, 527, 531, 533, 537, 538, 540, 541, 546, 547, 552, 557, 559, 560, 561, 562, 564, 567, 568, 583, 584, 593, 594, 597, 602, 610, 611, 620, 631, 632, 633, 638, 643, 646, 647, 648, 651, 652, 653, 655, 656, 658, 659, 660, 661, 662, 663, 665, 668, 669, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 687, 691, 698, 700, 702, 709, 711, 728, 729, 737, 741, 753, 770, 778, 779, 782, 783, 786, 798, 800, 801, 802, 804, 805, 807, 811, 812, 815, 820, 821, 822, 823, 824, 825, 826, 828, 832, 835, 836, 837, 839, 840, 841, 842, 846, 851, 874, 875, 876, 879, 880, 882, 897, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 933, 940, 973, 979, 985, 986, 988, 989, 992, 996, 997, 999, 1002, 1003, 1004, 1020, 1024, 1031, 1037, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048], "three": [4, 7, 27, 35, 41, 42, 47, 56, 59, 79, 91, 92, 113, 118, 120, 123, 124, 125, 134, 135, 136, 147, 150, 161, 171, 185, 193, 198, 201, 203, 210, 212, 236, 237, 247, 250, 283, 313, 314, 318, 369, 375, 379, 386, 399, 406, 409, 413, 414, 415, 417, 451, 462, 498, 709, 940, 982, 984, 985, 986, 989, 992, 999, 1003, 1004, 1008, 1016, 1024, 1031], "higher": [4, 13, 58, 81, 99, 104, 113, 116, 118, 119, 126, 129, 153, 155, 160, 161, 171, 172, 173, 177, 201, 202, 205, 219, 226, 227, 253, 256, 260, 262, 265, 276, 290, 312, 340, 344, 353, 354, 355, 364, 368, 377, 380, 384, 406, 409, 411, 416, 418, 419, 420, 444, 448, 449, 471, 478, 509, 532, 539, 543, 548, 553, 554, 557, 558, 559, 560, 561, 562, 564, 565, 566, 573, 588, 591, 607, 608, 619, 627, 631, 635, 637, 646, 647, 652, 653, 660, 661, 662, 663, 676, 678, 679, 704, 723, 727, 751, 784, 796, 798, 801, 802, 804, 812, 819, 820, 825, 828, 847, 850, 876, 893, 894, 895, 901, 902, 903, 904, 905, 906, 907, 914, 981, 985, 986, 988, 989, 992, 996, 999, 1003, 1004, 1023, 1025, 1032, 1037, 1039, 1046, 1048], "suspect": 4, "origin": [4, 5, 14, 17, 21, 22, 47, 48, 49, 52, 57, 59, 75, 76, 91, 96, 98, 99, 106, 131, 146, 147, 150, 153, 155, 157, 158, 165, 166, 172, 177, 189, 190, 205, 222, 223, 224, 226, 227, 234, 235, 236, 240, 253, 259, 265, 288, 293, 304, 308, 312, 323, 328, 344, 346, 353, 355, 364, 377, 379, 381, 382, 384, 386, 387, 394, 396, 403, 406, 409, 410, 413, 414, 416, 417, 419, 420, 421, 422, 434, 437, 441, 443, 444, 445, 446, 447, 449, 450, 459, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 493, 494, 495, 501, 519, 531, 533, 534, 535, 537, 538, 539, 540, 541, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 576, 581, 582, 584, 588, 590, 591, 594, 607, 608, 610, 611, 614, 630, 632, 635, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 692, 696, 701, 727, 762, 768, 799, 800, 805, 807, 816, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 846, 847, 848, 851, 852, 858, 859, 861, 864, 865, 866, 867, 868, 869, 870, 873, 874, 875, 877, 878, 879, 880, 881, 890, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 919, 921, 922, 926, 927, 948, 960, 963, 982, 983, 985, 986, 988, 989, 992, 995, 1000, 1001, 1002, 1003, 1006, 1009, 1014, 1016, 1025, 1034, 1035, 1037, 1039, 1041, 1043, 1045, 1047], "mere": [4, 262, 396, 828, 1003], "min": [4, 10, 11, 12, 13, 14, 26, 28, 32, 53, 59, 76, 96, 99, 113, 115, 122, 125, 126, 131, 142, 150, 155, 157, 158, 159, 166, 171, 183, 189, 190, 196, 203, 204, 207, 223, 234, 235, 238, 283, 291, 292, 298, 301, 303, 307, 309, 310, 312, 332, 346, 349, 391, 409, 412, 414, 482, 483, 484, 485, 512, 534, 535, 538, 540, 541, 549, 550, 563, 627, 631, 632, 654, 655, 656, 657, 682, 683, 704, 740, 756, 779, 801, 802, 850, 858, 859, 871, 880, 887, 938, 954, 985, 989, 992, 999, 1037, 1040, 1042, 1043, 1046], "prevent": [4, 56, 124, 126, 147, 170, 202, 205, 307, 313, 314, 340, 353, 358, 364, 382, 384, 386, 394, 395, 409, 414, 417, 442, 449, 488, 489, 561, 562, 590, 591, 611, 727, 784, 858, 859, 886, 887, 889, 890, 891, 892, 989, 991, 994, 995, 999, 1005, 1023, 1033, 1034, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "properli": [4, 13, 26, 56, 130, 158, 257, 317, 370, 380, 382, 386, 390, 415, 901, 902, 903, 904, 905, 906, 907, 978, 1034, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "automat": [4, 8, 12, 47, 64, 66, 72, 104, 139, 149, 180, 204, 247, 248, 260, 263, 307, 314, 318, 322, 331, 342, 344, 369, 371, 377, 380, 382, 384, 386, 390, 396, 399, 405, 409, 410, 411, 414, 416, 417, 418, 433, 450, 452, 456, 462, 464, 465, 467, 496, 499, 515, 538, 540, 541, 547, 549, 551, 557, 561, 564, 583, 588, 591, 594, 602, 643, 645, 646, 647, 652, 653, 658, 659, 660, 661, 662, 663, 666, 667, 668, 672, 674, 675, 676, 678, 681, 684, 687, 688, 691, 695, 800, 815, 818, 827, 837, 858, 859, 862, 863, 865, 874, 875, 882, 893, 894, 901, 902, 903, 906, 909, 911, 915, 927, 960, 963, 978, 980, 983, 988, 993, 999, 1003, 1005, 1009, 1010, 1020, 1031, 1034, 1035, 1036, 1042, 1045, 1046, 1047, 1048], "raw": [4, 12, 15, 38, 82, 98, 133, 158, 171, 177, 304, 314, 329, 355, 368, 377, 384, 390, 396, 407, 408, 409, 411, 414, 417, 469, 474, 501, 502, 503, 559, 560, 561, 563, 582, 588, 589, 590, 591, 634, 677, 690, 694, 705, 785, 847, 905, 986, 989, 993, 995, 996, 999, 1002, 1022, 1024, 1032, 1036, 1039, 1042], "recogn": [4, 5, 30, 36, 52, 54, 87, 90, 99, 121, 148, 168, 202, 256, 260, 289, 304, 320, 327, 328, 388, 400, 409, 417, 502, 697, 713, 827, 906, 989, 1011, 1016, 1048], "increas": [4, 7, 15, 27, 38, 44, 56, 58, 59, 62, 76, 99, 113, 114, 116, 119, 122, 124, 130, 146, 150, 153, 157, 158, 159, 162, 171, 172, 177, 181, 183, 192, 201, 202, 203, 205, 219, 227, 234, 248, 249, 262, 263, 264, 269, 275, 301, 308, 309, 312, 319, 328, 340, 348, 354, 355, 358, 368, 369, 370, 381, 390, 391, 407, 409, 411, 414, 416, 417, 420, 440, 444, 446, 452, 463, 471, 472, 478, 532, 536, 553, 554, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 588, 591, 627, 635, 636, 637, 645, 650, 651, 654, 655, 656, 658, 659, 666, 667, 668, 676, 677, 678, 682, 683, 685, 686, 692, 706, 707, 712, 781, 788, 801, 802, 830, 849, 851, 852, 853, 856, 858, 859, 875, 901, 909, 910, 911, 912, 938, 978, 980, 984, 985, 986, 988, 989, 992, 999, 1003, 1004, 1005, 1014, 1031, 1033, 1036, 1040, 1042, 1043, 1046], "strong": [4, 13, 55, 153, 168, 170, 171, 179, 181, 194, 198, 199, 205, 206, 207, 220, 236, 283, 314, 348, 408, 414, 416, 524, 649, 672, 982, 983, 985, 986, 988, 996, 1004, 1011, 1023], "similar": [4, 5, 7, 12, 18, 21, 26, 27, 35, 38, 50, 52, 58, 61, 76, 87, 96, 100, 113, 126, 149, 153, 160, 170, 171, 172, 173, 185, 201, 203, 215, 222, 224, 225, 226, 230, 236, 237, 253, 259, 262, 265, 268, 269, 270, 280, 283, 285, 307, 320, 339, 344, 348, 354, 355, 364, 368, 374, 376, 378, 380, 381, 382, 384, 387, 388, 391, 394, 396, 403, 406, 407, 409, 412, 413, 414, 416, 417, 418, 419, 420, 440, 443, 444, 450, 452, 454, 455, 503, 508, 509, 536, 582, 589, 590, 591, 610, 677, 692, 695, 703, 705, 715, 719, 724, 727, 728, 730, 733, 737, 739, 754, 759, 760, 785, 791, 792, 795, 796, 797, 823, 828, 873, 894, 897, 901, 902, 903, 904, 922, 978, 981, 982, 984, 985, 986, 988, 990, 992, 993, 995, 996, 999, 1001, 1002, 1003, 1004, 1005, 1009, 1010, 1016, 1024, 1027, 1031, 1035, 1036, 1037, 1039, 1043, 1044], "magnitud": [4, 106, 115, 154, 166, 171, 218, 240, 267, 307, 312, 320, 368, 377, 388, 409, 416, 419, 613, 652, 704, 881, 985, 989, 993, 999, 1003, 1005, 1033, 1040], "discret": [4, 32, 47, 76, 93, 106, 113, 131, 152, 163, 168, 172, 181, 201, 208, 219, 241, 280, 295, 301, 306, 310, 315, 360, 370, 374, 377, 378, 386, 395, 396, 409, 414, 417, 419, 438, 439, 448, 452, 460, 461, 462, 492, 514, 515, 522, 553, 559, 571, 588, 589, 592, 595, 596, 599, 600, 607, 608, 610, 611, 612, 616, 617, 618, 657, 658, 741, 798, 809, 827, 836, 837, 840, 862, 866, 874, 875, 878, 881, 890, 901, 906, 910, 952, 978, 985, 986, 987, 989, 990, 992, 1005, 1009, 1011, 1016, 1027, 1033, 1036, 1044, 1045, 1046], "manner": [4, 76, 96, 147, 172, 177, 249, 321, 322, 369, 382, 388, 409, 414, 416, 417, 709, 841, 842, 978, 989, 1005, 1034, 1041], "integ": [4, 18, 49, 54, 72, 171, 201, 219, 318, 319, 364, 368, 376, 377, 379, 384, 387, 391, 395, 396, 409, 410, 413, 414, 416, 417, 434, 437, 462, 464, 467, 472, 487, 496, 498, 501, 502, 503, 505, 508, 509, 512, 514, 515, 519, 522, 550, 559, 560, 561, 562, 563, 567, 568, 572, 582, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 632, 633, 644, 651, 655, 659, 665, 673, 675, 676, 699, 714, 734, 798, 800, 801, 802, 803, 805, 807, 812, 813, 814, 815, 817, 818, 821, 824, 832, 835, 837, 840, 841, 842, 866, 874, 875, 880, 881, 882, 885, 895, 897, 909, 910, 911, 912, 917, 952, 953, 954, 979, 985, 990, 992, 999, 1002, 1004, 1005, 1016, 1023, 1025, 1031, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "uniqu": [4, 17, 25, 31, 43, 48, 49, 58, 59, 64, 68, 120, 121, 127, 128, 171, 173, 185, 216, 219, 249, 271, 294, 313, 314, 323, 330, 353, 354, 355, 376, 384, 391, 396, 409, 410, 413, 416, 417, 440, 450, 454, 456, 464, 467, 496, 549, 550, 551, 553, 554, 557, 558, 559, 560, 561, 562, 564, 565, 566, 610, 633, 634, 635, 666, 668, 676, 697, 709, 753, 781, 798, 800, 812, 824, 829, 830, 833, 839, 848, 851, 853, 858, 872, 874, 875, 882, 885, 901, 903, 909, 910, 911, 912, 926, 938, 952, 953, 985, 990, 999, 1014, 1023, 1039, 1042, 1043, 1045, 1046, 1047, 1048], "decid": [4, 11, 58, 61, 72, 124, 253, 259, 262, 269, 377, 382, 397, 417, 419, 450, 457, 559, 560, 611, 635, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 671, 681, 684, 796, 843, 844, 845, 847, 849, 851, 852, 853, 864, 988, 995, 1014, 1044, 1047], "treat": [4, 6, 72, 123, 133, 165, 171, 201, 271, 313, 319, 324, 330, 364, 369, 382, 394, 396, 406, 416, 417, 442, 561, 562, 588, 589, 591, 607, 608, 632, 638, 645, 671, 674, 728, 729, 737, 753, 782, 783, 786, 787, 870, 871, 877, 878, 881, 882, 886, 889, 890, 892, 901, 902, 946, 979, 981, 985, 989, 990, 996, 999, 1003, 1005, 1021, 1035, 1043, 1047, 1048], "therebi": [4, 171, 413, 416, 981, 1041], "assumpt": [4, 9, 13, 26, 28, 37, 44, 69, 79, 80, 99, 158, 162, 168, 170, 201, 203, 230, 258, 283, 307, 388, 394, 395, 398, 407, 408, 409, 411, 413, 414, 417, 419, 447, 451, 453, 488, 503, 512, 532, 534, 541, 650, 654, 797, 798, 801, 802, 812, 838, 893, 894, 983, 985, 989, 990, 991, 992, 994, 995, 996, 999, 1002, 1005, 1011, 1038, 1044], "impli": [4, 153, 353, 354, 355, 414, 416, 419, 474, 573, 582, 610, 611, 622, 734, 925, 985, 986, 1025, 1042], "give": [4, 12, 13, 14, 25, 26, 40, 45, 50, 61, 63, 65, 71, 72, 76, 98, 125, 153, 158, 162, 165, 171, 172, 190, 192, 198, 201, 202, 203, 230, 253, 259, 264, 271, 287, 291, 294, 304, 320, 321, 331, 368, 370, 377, 379, 381, 382, 384, 388, 390, 394, 395, 396, 397, 403, 406, 407, 408, 409, 410, 411, 414, 416, 417, 419, 421, 434, 446, 447, 449, 451, 459, 472, 496, 499, 503, 533, 538, 549, 550, 551, 552, 557, 558, 564, 565, 566, 593, 594, 597, 607, 608, 638, 647, 661, 665, 676, 720, 729, 735, 738, 793, 798, 801, 802, 812, 822, 823, 824, 826, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 878, 879, 881, 882, 890, 985, 989, 992, 993, 994, 996, 997, 999, 1003, 1004, 1005, 1009, 1014, 1016, 1018, 1023, 1024, 1025, 1031, 1035, 1038, 1039, 1041, 1042, 1043, 1045, 1047], "lot": [4, 83, 171, 205, 377, 382, 383, 384, 390, 414, 416, 801, 802, 893, 894, 978, 1001, 1003, 1004, 1009, 1010, 1014, 1024, 1025, 1031, 1036, 1038, 1039, 1040, 1041, 1043], "addit": [4, 5, 7, 12, 14, 15, 67, 72, 83, 91, 96, 99, 113, 117, 119, 120, 123, 124, 149, 158, 159, 160, 166, 171, 172, 180, 185, 190, 202, 203, 205, 226, 241, 264, 271, 276, 283, 307, 318, 319, 324, 329, 344, 355, 360, 364, 368, 369, 374, 375, 376, 377, 378, 380, 381, 382, 384, 387, 388, 390, 394, 395, 397, 399, 403, 408, 409, 411, 413, 414, 417, 418, 419, 420, 433, 441, 442, 444, 445, 446, 450, 457, 469, 474, 496, 503, 532, 534, 536, 537, 539, 541, 542, 543, 549, 553, 554, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 582, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 611, 612, 619, 628, 630, 631, 635, 638, 639, 640, 641, 642, 643, 644, 645, 670, 687, 688, 692, 698, 699, 702, 741, 757, 758, 787, 791, 796, 797, 804, 820, 830, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 864, 865, 866, 867, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 883, 893, 894, 901, 902, 932, 938, 978, 983, 985, 989, 990, 992, 993, 996, 999, 1001, 1002, 1003, 1004, 1005, 1009, 1016, 1027, 1031, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "level": [4, 9, 11, 12, 17, 28, 35, 42, 54, 96, 97, 118, 122, 142, 150, 152, 153, 154, 157, 160, 161, 162, 163, 168, 171, 172, 212, 213, 214, 215, 216, 219, 230, 234, 235, 251, 262, 265, 271, 272, 291, 298, 338, 339, 341, 342, 344, 346, 348, 354, 362, 368, 377, 379, 380, 382, 384, 388, 396, 398, 399, 400, 407, 414, 417, 419, 423, 454, 468, 493, 494, 496, 503, 521, 531, 536, 537, 547, 561, 562, 567, 568, 611, 615, 622, 623, 625, 666, 667, 668, 676, 677, 678, 687, 690, 692, 694, 700, 702, 716, 722, 727, 784, 822, 823, 824, 826, 829, 830, 857, 858, 859, 899, 914, 978, 985, 989, 990, 992, 997, 1003, 1005, 1009, 1010, 1011, 1025, 1034, 1042, 1045, 1046, 1047], "one_hot_linear_pipelin": 4, "one_hot_tim": 4, "099": 4, "011": [4, 270, 285, 354, 388], "131": [4, 14, 57, 388, 989, 1032], "rate": [4, 113, 117, 123, 145, 172, 201, 208, 219, 234, 240, 259, 262, 269, 271, 272, 302, 303, 304, 370, 382, 409, 410, 414, 418, 446, 466, 536, 553, 554, 559, 560, 561, 562, 592, 595, 596, 598, 599, 600, 606, 644, 645, 668, 676, 677, 678, 692, 698, 702, 726, 781, 788, 857, 858, 859, 895, 978, 985, 986, 989, 992, 993, 1003, 1005, 1014, 1035, 1039, 1040], "better": [4, 5, 9, 13, 20, 21, 25, 32, 51, 56, 75, 76, 79, 80, 81, 82, 87, 91, 96, 99, 116, 119, 124, 125, 126, 133, 145, 157, 158, 159, 161, 165, 173, 181, 185, 187, 190, 201, 202, 203, 209, 216, 218, 219, 226, 235, 236, 237, 240, 252, 256, 262, 264, 265, 268, 271, 272, 280, 283, 304, 311, 312, 321, 322, 340, 348, 353, 354, 355, 358, 364, 368, 377, 381, 382, 383, 384, 386, 387, 388, 390, 396, 398, 403, 405, 407, 409, 411, 413, 414, 415, 416, 417, 419, 449, 450, 538, 540, 547, 559, 560, 561, 562, 607, 608, 630, 671, 677, 692, 709, 724, 733, 738, 741, 762, 797, 826, 836, 837, 838, 839, 840, 841, 842, 847, 858, 859, 878, 879, 882, 890, 893, 894, 901, 902, 978, 979, 981, 982, 983, 985, 986, 988, 989, 991, 992, 993, 997, 999, 1002, 1003, 1005, 1010, 1013, 1014, 1018, 1020, 1025, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "confirm": [4, 13, 87, 116, 123, 126, 173, 201, 203, 265, 268, 271, 312, 355, 386, 978, 999, 1039], "benefit": [4, 47, 57, 75, 76, 113, 124, 171, 215, 226, 233, 235, 287, 321, 368, 382, 391, 396, 407, 409, 448, 461, 468, 508, 567, 568, 658, 659, 666, 667, 668, 676, 677, 678, 832, 899, 901, 978, 984, 992, 997, 999, 1010, 1014, 1031, 1034, 1035, 1036, 1043, 1044, 1045, 1046], "ad": [4, 14, 21, 76, 104, 106, 113, 119, 146, 153, 159, 160, 180, 185, 203, 205, 226, 236, 237, 262, 263, 264, 307, 318, 319, 320, 321, 322, 323, 324, 331, 344, 354, 381, 382, 384, 386, 388, 394, 396, 397, 414, 416, 417, 418, 419, 433, 441, 442, 443, 445, 447, 449, 452, 459, 462, 464, 468, 482, 483, 484, 485, 514, 522, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 611, 613, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 648, 650, 654, 658, 659, 669, 676, 678, 680, 688, 689, 692, 695, 713, 714, 728, 729, 774, 776, 782, 783, 786, 788, 796, 797, 798, 812, 822, 829, 839, 845, 850, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 893, 894, 898, 899, 901, 902, 909, 910, 911, 912, 928, 978, 982, 984, 985, 986, 990, 992, 993, 995, 1010, 1014, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "progress": [4, 7, 8, 96, 136, 150, 166, 194, 290, 321, 379, 382, 386, 387, 397, 400, 405, 409, 559, 560, 692, 830, 832, 835, 850, 858, 859, 1014, 1023, 1025, 1031, 1033, 1040, 1045], "veri": [4, 13, 26, 28, 40, 41, 43, 45, 51, 53, 61, 63, 81, 82, 83, 86, 93, 99, 102, 126, 131, 139, 158, 165, 171, 172, 173, 190, 201, 202, 203, 206, 209, 219, 226, 230, 236, 237, 240, 247, 264, 265, 268, 269, 271, 272, 277, 285, 303, 307, 320, 327, 330, 340, 344, 350, 353, 355, 364, 368, 377, 381, 382, 384, 387, 388, 390, 394, 395, 396, 403, 407, 409, 411, 413, 414, 415, 416, 417, 418, 419, 442, 447, 452, 462, 471, 472, 478, 500, 504, 510, 557, 558, 561, 562, 564, 565, 567, 568, 589, 590, 622, 650, 651, 654, 655, 656, 664, 682, 683, 685, 691, 692, 695, 705, 742, 745, 791, 796, 798, 806, 808, 812, 815, 818, 841, 842, 866, 870, 871, 872, 881, 893, 894, 903, 906, 909, 910, 911, 912, 938, 978, 981, 982, 984, 985, 986, 987, 988, 989, 992, 993, 995, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1013, 1014, 1023, 1024, 1031, 1036, 1037, 1039, 1042, 1044, 1046, 1047], "new": [4, 7, 8, 10, 51, 57, 59, 61, 71, 72, 91, 104, 113, 115, 117, 118, 119, 124, 126, 132, 133, 147, 150, 153, 159, 166, 173, 174, 201, 207, 215, 230, 261, 264, 269, 283, 289, 291, 313, 318, 321, 324, 328, 331, 339, 344, 364, 369, 370, 376, 377, 379, 380, 381, 384, 385, 386, 388, 390, 391, 395, 396, 397, 399, 407, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 427, 431, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 500, 501, 502, 504, 505, 508, 509, 510, 512, 523, 526, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 574, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 700, 701, 702, 704, 708, 713, 714, 718, 721, 722, 723, 724, 726, 727, 728, 729, 730, 733, 738, 739, 740, 741, 742, 745, 752, 753, 756, 760, 765, 766, 768, 777, 781, 782, 783, 784, 786, 787, 788, 789, 790, 796, 797, 798, 799, 800, 801, 802, 804, 805, 807, 811, 812, 816, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 887, 889, 890, 891, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 919, 921, 922, 924, 932, 933, 937, 938, 945, 946, 947, 948, 949, 952, 955, 957, 959, 964, 970, 976, 978, 979, 981, 985, 989, 990, 992, 993, 994, 995, 999, 1001, 1002, 1003, 1004, 1010, 1014, 1016, 1017, 1020, 1023, 1025, 1029, 1033, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "minut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 377, 382, 986, 1008], "1440": 4, "caus": [4, 26, 28, 126, 154, 171, 199, 201, 205, 206, 219, 283, 314, 344, 355, 364, 380, 387, 407, 409, 414, 415, 417, 419, 443, 447, 449, 459, 509, 532, 582, 589, 610, 611, 836, 837, 838, 840, 865, 874, 876, 879, 880, 921, 922, 978, 979, 985, 989, 997, 999, 1002, 1010, 1016, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048], "signific": [4, 56, 119, 126, 145, 146, 168, 205, 219, 255, 262, 278, 283, 285, 311, 353, 364, 376, 377, 394, 409, 412, 413, 416, 504, 532, 534, 549, 550, 627, 658, 659, 666, 667, 668, 676, 677, 678, 817, 826, 901, 903, 904, 905, 906, 907, 988, 989, 992, 1011, 1031, 1033, 1034, 1035, 1039], "overfit": [4, 118, 124, 126, 168, 172, 173, 174, 180, 202, 205, 230, 249, 255, 257, 263, 267, 277, 278, 301, 308, 309, 311, 312, 313, 314, 340, 348, 358, 360, 361, 377, 396, 407, 413, 416, 437, 488, 489, 561, 562, 567, 568, 657, 798, 801, 802, 812, 823, 824, 858, 859, 861, 876, 880, 984, 993, 995, 997, 999, 1005, 1011, 1014, 1023, 1034], "avoid": [4, 7, 12, 13, 45, 58, 63, 73, 118, 119, 124, 171, 172, 203, 205, 210, 219, 225, 237, 240, 257, 263, 267, 293, 295, 296, 311, 312, 324, 336, 337, 354, 369, 380, 382, 383, 384, 386, 387, 388, 396, 397, 399, 403, 407, 409, 411, 413, 416, 417, 420, 440, 442, 444, 452, 462, 468, 493, 494, 495, 499, 508, 509, 534, 539, 543, 585, 586, 634, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 689, 691, 693, 695, 712, 791, 798, 799, 803, 809, 812, 822, 823, 824, 861, 864, 870, 871, 873, 878, 879, 880, 881, 884, 886, 887, 888, 889, 890, 891, 892, 894, 899, 938, 983, 986, 988, 989, 992, 993, 995, 997, 999, 1004, 1005, 1010, 1025, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "kbinsdiscret": [4, 54, 76, 93, 168, 181, 201, 219, 241, 295, 306, 309, 314, 315, 322, 360, 512, 657, 864, 880, 910, 999, 1011, 1039, 1043, 1044, 1045, 1047], "re": [4, 8, 14, 27, 57, 71, 72, 113, 123, 156, 170, 219, 237, 248, 252, 265, 267, 271, 318, 353, 355, 369, 382, 383, 386, 390, 395, 397, 400, 407, 413, 417, 469, 470, 471, 472, 473, 474, 475, 476, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 646, 652, 660, 662, 800, 815, 818, 909, 910, 911, 912, 985, 990, 992, 999, 1004, 1010, 1014, 1025, 1031, 1035, 1036, 1038, 1040], "fine": [4, 38, 122, 150, 205, 217, 253, 260, 344, 360, 361, 379, 386, 396, 417, 446, 938, 957, 992, 995, 1004, 1010, 1041], "grain": [4, 32, 38, 235, 253, 309, 388, 417, 446, 957, 1010], "still": [4, 13, 33, 45, 54, 56, 58, 63, 83, 91, 100, 121, 126, 133, 153, 159, 170, 171, 173, 174, 180, 185, 201, 203, 219, 235, 265, 271, 307, 319, 320, 323, 353, 354, 364, 370, 376, 381, 382, 384, 386, 387, 388, 390, 394, 396, 409, 413, 416, 417, 420, 440, 444, 454, 474, 496, 627, 632, 635, 637, 717, 755, 777, 780, 791, 792, 801, 802, 815, 818, 879, 881, 901, 919, 978, 979, 983, 985, 988, 992, 995, 997, 1004, 1005, 1008, 1010, 1014, 1031, 1033, 1036, 1037, 1039, 1040, 1041, 1044, 1045, 1046, 1047], "express": [4, 7, 12, 113, 119, 153, 158, 171, 262, 263, 313, 319, 337, 344, 355, 376, 377, 382, 383, 388, 409, 414, 415, 417, 450, 456, 457, 588, 589, 591, 716, 798, 804, 812, 820, 822, 823, 824, 825, 828, 848, 981, 985, 989, 993, 999, 1000, 1005, 1039], "advantag": [4, 5, 40, 56, 58, 96, 101, 201, 202, 230, 248, 263, 283, 321, 364, 396, 407, 413, 414, 417, 419, 441, 445, 460, 534, 589, 649, 674, 675, 762, 829, 830, 831, 861, 862, 901, 902, 903, 904, 905, 906, 907, 978, 981, 984, 985, 986, 989, 990, 992, 993, 999, 1003, 1004, 1005, 1034], "final": [4, 13, 27, 35, 41, 43, 56, 71, 72, 81, 83, 87, 92, 101, 113, 114, 116, 118, 123, 124, 127, 133, 136, 147, 158, 166, 170, 172, 174, 177, 180, 185, 189, 190, 198, 201, 203, 218, 219, 223, 230, 244, 251, 260, 268, 280, 285, 313, 314, 317, 318, 340, 344, 368, 370, 380, 382, 383, 384, 386, 395, 396, 406, 407, 409, 410, 413, 416, 417, 418, 437, 442, 447, 448, 452, 459, 462, 464, 536, 555, 556, 567, 568, 570, 594, 627, 647, 653, 659, 679, 690, 694, 719, 798, 829, 830, 861, 862, 898, 901, 978, 979, 981, 985, 986, 989, 992, 995, 996, 999, 1002, 1014, 1023, 1036, 1039, 1040, 1041, 1042, 1044], "observ": [4, 5, 7, 9, 11, 13, 14, 17, 21, 25, 28, 35, 38, 41, 44, 54, 63, 72, 79, 81, 82, 83, 97, 98, 101, 104, 113, 116, 117, 119, 120, 126, 129, 132, 141, 142, 150, 153, 156, 158, 159, 160, 162, 171, 172, 173, 180, 181, 196, 197, 199, 201, 202, 203, 205, 215, 219, 226, 227, 233, 234, 240, 258, 262, 264, 265, 269, 285, 288, 291, 298, 312, 323, 330, 339, 340, 344, 345, 353, 354, 355, 360, 361, 377, 379, 396, 399, 407, 409, 411, 412, 413, 414, 415, 418, 419, 441, 443, 445, 446, 447, 449, 459, 460, 469, 470, 471, 472, 473, 474, 475, 476, 524, 532, 551, 552, 563, 610, 611, 646, 652, 657, 701, 716, 718, 757, 819, 839, 847, 880, 882, 985, 988, 989, 993, 994, 995, 996, 999, 1002, 1003, 1004, 1005, 1013, 1017, 1019, 1020, 1022, 1032, 1044, 1045, 1046, 1047], "complet": [4, 38, 39, 40, 45, 50, 51, 53, 59, 63, 87, 131, 145, 147, 150, 168, 173, 174, 207, 229, 230, 237, 240, 245, 260, 312, 314, 317, 354, 364, 377, 382, 386, 387, 390, 394, 410, 413, 414, 416, 417, 441, 445, 449, 452, 462, 463, 464, 467, 495, 536, 537, 538, 539, 544, 546, 558, 569, 570, 581, 587, 588, 589, 591, 627, 628, 629, 630, 645, 649, 657, 671, 673, 704, 705, 715, 716, 717, 730, 735, 736, 756, 785, 794, 829, 832, 835, 844, 860, 861, 862, 863, 924, 974, 978, 983, 985, 989, 990, 992, 1004, 1005, 1011, 1016, 1025, 1031, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "induct": [4, 37, 69, 111, 126, 168, 396, 409, 416, 423, 441, 512, 564, 627, 631, 896, 897, 950, 973, 985, 1002, 1011, 1033], "bia": [4, 28, 79, 98, 112, 120, 121, 126, 137, 168, 171, 173, 180, 181, 183, 267, 301, 344, 348, 364, 377, 384, 396, 407, 411, 415, 416, 419, 524, 556, 559, 560, 607, 608, 614, 642, 648, 649, 658, 659, 669, 670, 680, 858, 859, 874, 876, 880, 886, 887, 889, 890, 891, 892, 910, 984, 985, 988, 989, 993, 994, 997, 1003, 1011, 1023], "preserv": [4, 49, 101, 226, 234, 257, 384, 385, 408, 413, 414, 417, 581, 588, 589, 591, 646, 652, 696, 741, 773, 777, 816, 817, 818, 885, 921, 922, 979, 985, 986, 999, 1001, 1009, 1020, 1031, 1034, 1035, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047], "smooth": [4, 47, 48, 55, 150, 158, 194, 202, 217, 313, 340, 379, 397, 409, 415, 419, 448, 449, 537, 538, 539, 546, 557, 558, 559, 560, 564, 565, 566, 590, 591, 619, 622, 676, 836, 837, 838, 840, 878, 882, 890, 909, 910, 911, 912, 985, 991, 999, 1003, 1004, 1005, 1025], "local": [4, 9, 12, 21, 40, 53, 58, 62, 96, 99, 118, 119, 130, 150, 158, 159, 168, 172, 202, 215, 221, 224, 226, 228, 230, 234, 240, 285, 286, 294, 295, 299, 339, 360, 361, 369, 379, 380, 382, 386, 388, 390, 399, 409, 414, 416, 417, 419, 447, 452, 462, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 502, 538, 540, 544, 547, 549, 559, 560, 563, 566, 610, 611, 688, 689, 690, 691, 692, 693, 695, 696, 757, 758, 844, 847, 850, 852, 862, 871, 894, 897, 905, 955, 957, 987, 988, 992, 993, 1005, 1011, 1024, 1026, 1027, 1035, 1039, 1043, 1046], "attempt": [4, 55, 172, 197, 207, 257, 353, 368, 381, 396, 409, 421, 446, 450, 457, 468, 631, 688, 689, 693, 816, 843, 844, 845, 847, 849, 851, 852, 853, 879, 881, 899, 921, 922, 985, 986, 992, 1005, 1016, 1038, 1043, 1048], "each": [4, 7, 8, 10, 11, 12, 15, 18, 21, 26, 27, 28, 33, 35, 38, 42, 44, 45, 48, 50, 54, 56, 59, 61, 62, 71, 72, 74, 75, 76, 86, 87, 90, 91, 92, 93, 96, 97, 101, 104, 105, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 129, 131, 132, 133, 134, 135, 136, 146, 148, 150, 155, 157, 162, 165, 166, 170, 171, 172, 174, 177, 180, 187, 188, 190, 195, 199, 201, 202, 203, 205, 206, 209, 216, 219, 223, 230, 231, 234, 235, 236, 237, 238, 240, 241, 242, 244, 247, 250, 252, 256, 257, 258, 260, 262, 263, 265, 267, 268, 271, 272, 280, 283, 285, 288, 290, 294, 296, 298, 301, 302, 304, 307, 308, 309, 310, 312, 313, 314, 317, 319, 320, 321, 323, 324, 327, 328, 329, 332, 340, 344, 346, 348, 354, 355, 358, 359, 362, 364, 368, 369, 370, 376, 377, 378, 379, 380, 382, 383, 384, 386, 387, 388, 390, 391, 394, 395, 396, 400, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 426, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 459, 460, 461, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 519, 522, 523, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 707, 708, 710, 713, 719, 724, 727, 728, 729, 737, 738, 744, 745, 747, 749, 750, 752, 753, 757, 758, 761, 762, 763, 764, 765, 767, 768, 769, 770, 772, 773, 775, 777, 778, 779, 780, 782, 783, 784, 786, 787, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 886, 887, 888, 890, 891, 892, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 927, 932, 933, 938, 940, 941, 945, 946, 957, 965, 966, 967, 970, 979, 981, 983, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1014, 1016, 1020, 1022, 1023, 1024, 1025, 1031, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "sine": [4, 153, 158, 159, 168, 195, 207, 246, 247, 248, 249, 250, 251, 252, 254, 360, 378, 615, 796, 797, 988, 1005, 1011], "cosin": [4, 41, 276, 285, 290, 374, 377, 396, 409, 414, 415, 441, 445, 450, 457, 535, 590, 591, 620, 696, 759, 760, 761, 764, 769, 770, 773, 777, 778, 779, 841, 842, 846, 873, 992, 1005, 1027, 1041], "match": [4, 21, 38, 46, 55, 96, 97, 99, 103, 106, 119, 168, 177, 179, 201, 220, 224, 233, 240, 275, 344, 355, 377, 380, 384, 386, 409, 414, 416, 417, 430, 449, 464, 466, 508, 509, 515, 526, 531, 537, 542, 548, 551, 567, 568, 572, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 658, 664, 665, 685, 686, 699, 703, 704, 705, 713, 715, 719, 733, 777, 778, 779, 785, 841, 842, 846, 850, 864, 865, 866, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 901, 908, 914, 925, 957, 986, 988, 989, 991, 992, 1011, 1012, 1016, 1025, 1027, 1031, 1037, 1038, 1039, 1041, 1043, 1044, 1047], "togeth": [4, 12, 52, 61, 72, 122, 133, 153, 159, 171, 182, 223, 226, 240, 258, 313, 321, 343, 359, 364, 384, 386, 394, 395, 396, 403, 409, 416, 417, 418, 424, 451, 453, 567, 568, 594, 689, 715, 798, 812, 861, 862, 875, 985, 986, 990, 996, 999, 1005, 1006, 1014, 1017, 1019, 1037], "equival": [4, 15, 35, 56, 58, 123, 129, 149, 153, 158, 171, 185, 219, 252, 271, 285, 312, 344, 355, 364, 368, 380, 388, 391, 395, 396, 409, 410, 411, 412, 413, 414, 416, 418, 419, 441, 443, 444, 445, 446, 447, 449, 450, 457, 464, 469, 474, 509, 534, 541, 558, 561, 562, 563, 564, 565, 588, 591, 613, 616, 619, 621, 624, 646, 647, 648, 652, 654, 658, 659, 666, 667, 668, 669, 672, 676, 677, 680, 683, 687, 688, 693, 708, 709, 722, 733, 740, 741, 746, 747, 748, 760, 769, 778, 779, 796, 797, 801, 802, 806, 808, 832, 835, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 858, 864, 870, 871, 873, 876, 877, 878, 879, 881, 889, 891, 892, 925, 936, 975, 978, 983, 985, 986, 987, 989, 995, 999, 1003, 1004, 1005, 1039, 1040, 1041, 1042, 1044, 1045, 1048], "importantli": [4, 14, 97, 172, 177, 307, 409], "jump": [4, 202, 307, 379, 382, 417, 880], "functiontransform": [4, 71, 118, 201, 219, 331, 464, 465, 999, 1036, 1037, 1039, 1044, 1045, 1046, 1048], "sin_transform": 4, "return": [4, 6, 7, 8, 10, 11, 13, 14, 17, 18, 20, 25, 26, 28, 34, 35, 38, 41, 49, 54, 57, 62, 71, 76, 93, 102, 104, 106, 111, 113, 116, 118, 125, 126, 129, 133, 150, 156, 159, 161, 166, 174, 180, 181, 189, 190, 193, 201, 202, 209, 210, 211, 219, 237, 240, 243, 244, 250, 252, 257, 258, 259, 260, 261, 262, 263, 265, 266, 269, 276, 285, 290, 295, 298, 304, 307, 309, 312, 317, 336, 340, 353, 355, 358, 362, 368, 375, 376, 377, 382, 383, 384, 388, 389, 391, 394, 396, 407, 408, 409, 410, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 922, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 955, 956, 959, 960, 961, 962, 963, 964, 970, 973, 974, 975, 976, 977, 979, 989, 992, 996, 997, 1004, 1005, 1010, 1016, 1021, 1023, 1025, 1028, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "lambda": [4, 7, 8, 10, 13, 20, 57, 74, 125, 140, 181, 219, 262, 263, 311, 331, 405, 409, 414, 416, 417, 644, 645, 646, 647, 865, 877, 981, 985, 999, 1020, 1039, 1045], "sin": [4, 14, 20, 40, 97, 114, 125, 126, 130, 132, 145, 153, 159, 160, 162, 180, 181, 185, 195, 202, 207, 224, 236, 253, 297, 308, 318, 324, 347, 360, 361, 419, 516, 615, 699, 763, 1024], "pi": [4, 14, 35, 40, 41, 97, 106, 130, 132, 145, 153, 181, 185, 189, 195, 202, 224, 247, 248, 249, 252, 253, 276, 298, 318, 324, 361, 399, 415, 419, 516, 517, 518, 615, 642, 983, 984, 985, 991, 1024], "cos_transform": 4, "co": [4, 8, 12, 14, 19, 21, 23, 40, 41, 71, 130, 132, 158, 168, 171, 202, 224, 262, 276, 321, 331, 353, 354, 355, 361, 386, 415, 417, 449, 451, 453, 488, 511, 591, 699, 719, 763, 794, 984, 999, 1011, 1014, 1026, 1027], "effect": [4, 6, 10, 28, 38, 40, 41, 46, 47, 54, 58, 63, 66, 70, 74, 77, 87, 93, 99, 101, 113, 124, 126, 128, 129, 130, 133, 149, 153, 154, 158, 160, 168, 169, 171, 172, 174, 175, 185, 196, 201, 202, 203, 205, 206, 207, 218, 221, 222, 224, 226, 228, 233, 240, 244, 248, 252, 258, 262, 263, 264, 267, 270, 271, 272, 285, 304, 306, 308, 311, 315, 318, 326, 333, 340, 344, 345, 348, 349, 350, 353, 354, 355, 364, 369, 382, 384, 387, 394, 396, 407, 409, 410, 414, 415, 416, 417, 419, 420, 437, 443, 444, 446, 447, 449, 450, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 490, 496, 500, 514, 524, 525, 533, 534, 538, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 594, 606, 609, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 690, 691, 692, 701, 703, 752, 784, 796, 799, 800, 803, 805, 807, 809, 816, 817, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 846, 847, 848, 851, 852, 858, 859, 861, 864, 865, 866, 867, 868, 870, 871, 873, 877, 878, 879, 880, 881, 882, 886, 887, 888, 889, 890, 891, 892, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 921, 922, 938, 955, 963, 978, 983, 985, 986, 988, 989, 990, 996, 999, 1002, 1004, 1005, 1011, 1021, 1023, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "expans": [4, 165, 319, 450, 876, 1040], "synthet": [4, 14, 26, 28, 32, 35, 38, 43, 50, 120, 126, 131, 153, 158, 160, 172, 191, 203, 218, 301, 309, 348, 364, 368, 375, 385, 397, 409, 411, 418, 658, 659, 901, 902, 908, 983, 1023, 1037], "beyond": [4, 28, 202, 203, 368, 370, 381, 382, 394, 407, 416, 728, 729, 737, 782, 783, 786, 906, 986, 990, 999, 1004, 1010, 1039], "pd": [4, 12, 13, 26, 72, 73, 74, 113, 119, 120, 126, 130, 158, 165, 170, 171, 172, 173, 174, 180, 185, 190, 201, 205, 209, 219, 241, 244, 252, 260, 262, 263, 265, 273, 274, 280, 312, 313, 314, 320, 321, 348, 353, 354, 387, 396, 410, 464, 466, 627, 628, 629, 630, 632, 777, 919, 921, 922, 978, 979, 996, 999, 1042, 1044, 1045, 1046], "hour_df": 4, "arang": [4, 11, 13, 14, 17, 41, 59, 61, 66, 74, 80, 81, 104, 107, 122, 123, 125, 127, 128, 131, 135, 146, 153, 155, 160, 161, 165, 166, 174, 185, 201, 204, 206, 210, 225, 233, 235, 257, 262, 265, 270, 273, 283, 285, 298, 301, 309, 320, 327, 328, 330, 332, 340, 347, 353, 355, 360, 361, 362, 364, 394, 406, 413, 417, 465, 544, 827, 876, 880, 984, 985, 993, 999, 1003, 1021], "reshap": [4, 5, 6, 14, 17, 25, 33, 47, 48, 49, 51, 52, 54, 55, 59, 73, 81, 86, 96, 99, 106, 116, 121, 122, 131, 142, 148, 153, 155, 156, 157, 158, 159, 160, 162, 180, 192, 198, 214, 215, 217, 218, 223, 225, 227, 230, 235, 239, 251, 260, 289, 291, 298, 301, 303, 304, 308, 309, 310, 314, 317, 320, 321, 323, 324, 332, 339, 340, 345, 346, 349, 350, 394, 406, 414, 416, 417, 445, 465, 584, 631, 827, 876, 880, 985, 999, 1005, 1021, 1024, 1036], "hour_sin": 4, "fit_transform": [4, 5, 6, 10, 12, 15, 20, 45, 50, 53, 54, 59, 63, 91, 97, 100, 107, 131, 177, 192, 217, 219, 222, 223, 224, 225, 226, 227, 233, 234, 237, 238, 244, 285, 289, 302, 307, 308, 312, 313, 314, 317, 320, 322, 323, 324, 340, 353, 354, 355, 364, 374, 377, 384, 387, 388, 396, 405, 410, 414, 417, 418, 425, 433, 442, 443, 445, 447, 449, 464, 466, 468, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 688, 689, 690, 691, 692, 845, 850, 853, 857, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 899, 979, 981, 985, 990, 992, 999, 1000, 1001, 1016, 1021, 1024, 1025, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1045, 1047, 1048], "hour_co": 4, "2d": [4, 34, 37, 40, 42, 45, 48, 49, 50, 54, 57, 62, 63, 69, 90, 91, 95, 97, 100, 107, 108, 131, 148, 168, 195, 202, 207, 222, 223, 224, 227, 230, 233, 234, 294, 327, 328, 337, 340, 362, 376, 378, 382, 384, 391, 396, 409, 410, 414, 417, 419, 441, 452, 462, 464, 467, 481, 488, 490, 491, 492, 493, 494, 500, 501, 502, 504, 510, 514, 533, 541, 549, 584, 586, 635, 643, 657, 672, 691, 737, 778, 822, 826, 830, 868, 917, 921, 922, 937, 952, 975, 976, 983, 985, 986, 989, 996, 1000, 1005, 1011, 1016, 1022, 1031, 1035, 1038, 1039, 1040, 1043, 1045], "scatter": [4, 9, 11, 12, 17, 25, 31, 32, 35, 39, 40, 43, 44, 45, 46, 50, 53, 57, 58, 59, 60, 61, 63, 68, 81, 87, 92, 93, 98, 100, 101, 102, 103, 105, 114, 115, 119, 122, 129, 131, 132, 134, 142, 145, 153, 154, 155, 157, 159, 160, 161, 162, 170, 171, 177, 181, 184, 191, 193, 197, 198, 199, 202, 203, 204, 210, 213, 214, 215, 218, 222, 223, 224, 225, 226, 227, 230, 235, 236, 238, 247, 248, 249, 250, 251, 252, 253, 257, 263, 265, 276, 285, 288, 291, 292, 293, 294, 295, 296, 297, 301, 307, 309, 310, 312, 321, 329, 332, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 349, 350, 353, 359, 360, 361, 411, 631, 701, 957, 983, 985, 1023], "color": [4, 6, 7, 8, 9, 10, 11, 12, 13, 17, 21, 25, 26, 27, 28, 32, 34, 35, 37, 39, 41, 43, 45, 46, 47, 48, 50, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 79, 80, 81, 82, 83, 87, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 105, 106, 113, 114, 119, 122, 123, 125, 128, 129, 130, 131, 133, 135, 139, 142, 153, 155, 156, 157, 158, 159, 160, 161, 162, 166, 168, 171, 173, 174, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 193, 195, 197, 199, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 215, 218, 219, 223, 224, 225, 227, 230, 234, 235, 236, 238, 241, 247, 248, 249, 250, 251, 252, 253, 257, 261, 263, 265, 266, 267, 268, 269, 271, 272, 273, 275, 283, 287, 290, 291, 292, 293, 296, 297, 298, 301, 307, 308, 309, 311, 312, 313, 318, 324, 329, 330, 332, 338, 339, 340, 341, 342, 344, 346, 347, 348, 349, 359, 360, 376, 377, 379, 390, 409, 416, 417, 447, 493, 494, 506, 583, 584, 778, 963, 1003, 1005, 1011, 1036, 1041, 1043, 1048], "map": [4, 5, 10, 11, 18, 20, 27, 54, 87, 101, 117, 125, 128, 131, 140, 153, 168, 177, 201, 219, 222, 224, 229, 237, 240, 245, 263, 266, 271, 293, 296, 298, 306, 307, 315, 331, 340, 344, 346, 354, 355, 376, 383, 394, 396, 400, 407, 408, 409, 410, 413, 414, 416, 417, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 496, 498, 502, 509, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 761, 764, 796, 797, 798, 801, 802, 809, 810, 812, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 889, 890, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 943, 946, 947, 978, 981, 986, 989, 991, 1001, 1004, 1005, 1011, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048], "space": [4, 8, 10, 20, 32, 47, 49, 54, 58, 59, 61, 62, 64, 66, 71, 72, 75, 87, 96, 98, 105, 107, 118, 122, 126, 131, 147, 150, 153, 159, 177, 185, 202, 222, 223, 224, 226, 234, 235, 236, 240, 241, 248, 253, 270, 273, 274, 285, 294, 295, 309, 319, 344, 353, 354, 355, 362, 364, 368, 374, 377, 378, 379, 382, 389, 394, 395, 396, 406, 408, 409, 412, 414, 415, 416, 417, 419, 443, 447, 448, 449, 452, 462, 464, 465, 466, 467, 482, 483, 484, 498, 532, 534, 535, 538, 539, 540, 541, 543, 544, 549, 573, 582, 588, 589, 591, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 632, 633, 638, 640, 641, 642, 643, 688, 689, 690, 692, 693, 694, 696, 699, 798, 801, 802, 804, 812, 820, 831, 841, 842, 849, 850, 851, 852, 861, 866, 867, 873, 878, 893, 894, 895, 914, 942, 981, 982, 983, 984, 985, 987, 989, 990, 992, 993, 994, 995, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1009, 1010, 1016, 1023, 1025, 1026, 1027, 1031, 1032, 1034, 1039, 1040, 1041, 1045, 1046, 1047], "akin": [4, 202, 396], "sort": [4, 8, 10, 12, 20, 21, 25, 61, 71, 111, 116, 123, 126, 132, 150, 180, 185, 201, 202, 219, 239, 262, 263, 266, 276, 297, 347, 353, 360, 361, 382, 386, 390, 391, 396, 413, 416, 417, 419, 534, 541, 555, 566, 581, 610, 617, 697, 712, 718, 728, 729, 737, 753, 782, 783, 786, 788, 798, 824, 836, 837, 838, 839, 840, 841, 842, 849, 851, 852, 853, 856, 866, 872, 874, 875, 878, 880, 882, 890, 903, 906, 938, 943, 985, 992, 995, 999, 1014, 1025, 1031, 1035, 1041, 1042, 1043, 1045, 1046], "analog": [4, 20, 128, 388, 416, 989, 990, 1004, 1040], "clock": 4, "25th": [4, 240, 879], "back": [4, 101, 242, 369, 382, 384, 397, 403, 410, 417, 434, 443, 446, 447, 459, 482, 483, 484, 508, 509, 533, 534, 535, 538, 540, 541, 544, 581, 630, 658, 659, 666, 667, 668, 676, 677, 678, 727, 866, 868, 869, 870, 874, 875, 876, 878, 879, 881, 893, 894, 901, 985, 989, 993, 1010, 1016, 1025, 1034, 1039, 1041, 1042, 1045], "natur": [4, 32, 119, 126, 160, 171, 172, 177, 185, 201, 202, 218, 219, 226, 240, 247, 253, 271, 283, 353, 382, 384, 396, 414, 416, 417, 420, 444, 450, 457, 551, 590, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 692, 704, 740, 754, 756, 843, 844, 845, 847, 849, 851, 852, 853, 880, 936, 985, 986, 988, 989, 992, 994, 999, 1003, 1009, 1013, 1031, 1039], "sp": [4, 171, 979, 1024], "c": [4, 6, 7, 8, 11, 12, 17, 20, 25, 26, 28, 31, 32, 35, 40, 41, 43, 44, 46, 53, 57, 58, 60, 61, 62, 66, 72, 73, 75, 87, 91, 92, 93, 101, 102, 103, 113, 115, 116, 122, 123, 129, 131, 132, 134, 135, 140, 142, 148, 150, 154, 155, 156, 157, 161, 177, 184, 186, 191, 192, 193, 194, 196, 198, 199, 208, 210, 212, 213, 214, 215, 217, 218, 222, 223, 224, 226, 227, 235, 236, 238, 242, 248, 250, 251, 252, 253, 256, 257, 259, 260, 261, 262, 265, 267, 271, 273, 285, 288, 290, 291, 293, 294, 295, 296, 297, 298, 301, 302, 304, 307, 308, 309, 312, 317, 318, 319, 320, 321, 322, 323, 324, 329, 332, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 353, 359, 360, 361, 368, 369, 376, 377, 379, 380, 382, 383, 384, 385, 387, 390, 391, 394, 399, 400, 406, 407, 409, 410, 411, 412, 413, 414, 416, 418, 422, 437, 442, 443, 446, 447, 449, 459, 468, 475, 523, 528, 534, 538, 540, 541, 547, 549, 550, 590, 607, 608, 610, 631, 639, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 672, 673, 679, 685, 686, 688, 689, 692, 693, 708, 714, 715, 718, 730, 734, 740, 741, 757, 758, 798, 812, 820, 826, 836, 837, 838, 839, 840, 841, 842, 848, 850, 857, 872, 874, 875, 876, 880, 882, 896, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 916, 921, 922, 952, 978, 981, 982, 984, 985, 986, 987, 989, 991, 992, 994, 996, 999, 1001, 1003, 1004, 1005, 1009, 1014, 1016, 1020, 1021, 1023, 1024, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1047], "colorbar": [4, 11, 31, 41, 96, 107, 121, 129, 148, 154, 156, 157, 159, 172, 222, 234, 251, 273, 307, 340, 697, 1043], "cyclic_cossin_transform": 4, "month_sin": 4, "month_co": 4, "weekday_sin": 4, "weekday_co": 4, "cyclic_cossin_linear_pipelin": 4, "125": [4, 13, 54, 81, 99, 320, 534, 978, 989, 999], "166": [4, 304, 388, 989, 1031], "simpl": [4, 17, 28, 56, 72, 76, 79, 86, 87, 96, 102, 119, 124, 160, 168, 172, 185, 202, 218, 243, 263, 280, 286, 289, 298, 299, 312, 321, 336, 353, 355, 359, 364, 380, 382, 384, 385, 386, 387, 389, 394, 395, 396, 397, 400, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 423, 430, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 462, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 514, 522, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 785, 787, 796, 797, 798, 801, 802, 812, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 945, 981, 983, 984, 985, 986, 988, 989, 992, 999, 1001, 1003, 1005, 1010, 1011, 1014, 1016, 1025, 1028, 1031], "wors": [4, 87, 113, 154, 172, 207, 262, 270, 283, 312, 364, 407, 409, 419, 432, 465, 482, 483, 484, 552, 554, 556, 558, 560, 562, 565, 568, 570, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 678, 679, 680, 705, 721, 722, 723, 727, 784, 834, 835, 844, 852, 859, 902, 904, 907, 910, 912, 989, 999, 1040], "further": [4, 26, 43, 72, 79, 87, 96, 116, 122, 124, 149, 153, 158, 171, 173, 180, 185, 222, 227, 237, 259, 262, 263, 269, 322, 340, 354, 362, 368, 382, 394, 396, 408, 409, 411, 414, 416, 417, 419, 452, 462, 515, 532, 535, 582, 614, 622, 628, 658, 659, 666, 667, 668, 676, 677, 678, 691, 695, 736, 773, 777, 780, 791, 792, 837, 843, 844, 851, 852, 879, 881, 901, 903, 906, 938, 988, 989, 991, 992, 993, 995, 999, 1003, 1004, 1023, 1025, 1040, 1044], "analyz": [4, 7, 18, 185, 264, 271, 322, 353, 355, 387, 388, 409, 417, 503, 588, 589, 591, 787, 986, 989, 996, 997, 1005, 1025, 1031, 1040], "reason": [4, 8, 12, 43, 54, 71, 126, 150, 171, 172, 177, 201, 202, 209, 219, 230, 234, 235, 237, 240, 259, 262, 263, 268, 280, 285, 308, 312, 354, 355, 364, 368, 369, 370, 377, 381, 382, 384, 386, 390, 394, 395, 396, 397, 409, 410, 411, 414, 416, 417, 508, 532, 574, 638, 646, 652, 654, 672, 687, 692, 762, 798, 812, 845, 850, 857, 876, 898, 978, 979, 984, 985, 986, 989, 991, 992, 993, 995, 999, 1003, 1004, 1014, 1025, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "disappoint": 4, "outcom": [4, 119, 171, 396, 416, 569, 658, 709, 741, 793, 829, 896, 897, 898, 903, 906, 985, 989, 1005, 1013, 1025, 1035, 1039, 1041], "altern": [4, 27, 72, 87, 120, 121, 127, 133, 173, 185, 201, 219, 231, 250, 253, 271, 317, 344, 353, 354, 355, 364, 377, 385, 386, 388, 394, 396, 397, 399, 404, 406, 407, 409, 410, 411, 413, 414, 416, 417, 419, 441, 442, 445, 446, 447, 452, 458, 463, 499, 538, 540, 541, 547, 553, 554, 557, 558, 559, 560, 564, 565, 566, 582, 588, 589, 591, 617, 620, 643, 692, 706, 708, 770, 773, 777, 780, 800, 830, 865, 871, 874, 887, 894, 896, 909, 910, 911, 912, 956, 957, 983, 985, 986, 988, 989, 992, 993, 997, 999, 1001, 1002, 1004, 1005, 1010, 1020, 1025, 1027, 1036, 1038, 1044, 1045], "larger": [4, 7, 28, 38, 40, 43, 48, 56, 81, 83, 93, 106, 116, 127, 154, 159, 160, 166, 171, 172, 177, 181, 185, 216, 217, 218, 227, 234, 236, 247, 253, 263, 265, 271, 272, 280, 285, 287, 301, 302, 304, 307, 340, 344, 354, 355, 375, 377, 382, 388, 394, 396, 406, 407, 409, 410, 411, 413, 414, 416, 417, 419, 440, 443, 449, 450, 452, 454, 456, 515, 527, 541, 544, 561, 562, 563, 567, 568, 582, 589, 643, 652, 672, 673, 674, 675, 679, 687, 692, 704, 719, 735, 796, 846, 847, 878, 880, 881, 882, 890, 895, 937, 938, 960, 963, 981, 982, 985, 986, 988, 989, 992, 993, 997, 999, 1003, 1004, 1023, 1025, 1035, 1036, 1039, 1040, 1041, 1044, 1045], "periodic_spline_transform": 4, "n_spline": [4, 880], "degre": [4, 17, 35, 98, 115, 158, 165, 170, 172, 177, 180, 185, 189, 190, 202, 205, 236, 242, 247, 248, 249, 252, 253, 262, 276, 304, 319, 320, 337, 344, 347, 414, 418, 446, 452, 498, 535, 541, 639, 640, 643, 656, 774, 796, 798, 847, 876, 880, 903, 904, 905, 906, 907, 981, 982, 984, 985, 986, 987, 989, 990, 992, 995, 996, 999, 1002, 1004, 1023, 1034, 1040, 1044, 1045, 1048], "n_knot": [4, 202, 320, 880, 999, 1044], "include_bia": [4, 180, 276, 876, 880, 1045], "knot": [4, 202, 320, 880, 999, 1044], "linspac": [4, 8, 10, 11, 14, 25, 27, 38, 39, 41, 43, 50, 56, 81, 82, 97, 106, 114, 126, 153, 154, 156, 157, 158, 159, 160, 162, 172, 180, 181, 183, 185, 191, 195, 201, 202, 203, 207, 211, 212, 213, 214, 215, 219, 227, 230, 233, 234, 236, 238, 251, 262, 264, 265, 269, 270, 271, 272, 276, 290, 291, 297, 298, 308, 310, 321, 322, 339, 340, 343, 345, 346, 348, 349, 350, 631, 632, 804, 825, 841, 842, 1024], "again": [4, 21, 68, 73, 126, 157, 159, 161, 171, 226, 263, 353, 364, 386, 391, 396, 397, 409, 410, 411, 416, 417, 472, 567, 568, 634, 647, 651, 653, 655, 661, 663, 665, 692, 978, 985, 989, 1003, 1028, 1031, 1039, 1048], "splines_df": 4, "spline_": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 13, 14, 17, 18, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 42, 47, 48, 49, 52, 53, 54, 55, 56, 59, 61, 62, 67, 71, 75, 76, 81, 96, 97, 99, 102, 114, 119, 120, 121, 122, 123, 126, 127, 128, 131, 132, 142, 146, 148, 154, 155, 157, 159, 160, 165, 166, 168, 172, 173, 189, 190, 201, 203, 208, 210, 213, 214, 215, 216, 217, 221, 222, 223, 224, 225, 228, 230, 233, 234, 235, 236, 237, 239, 240, 247, 249, 251, 252, 253, 260, 262, 264, 265, 268, 269, 271, 272, 285, 290, 291, 295, 298, 301, 303, 309, 310, 317, 319, 322, 323, 329, 330, 332, 337, 340, 343, 344, 345, 346, 349, 350, 353, 354, 362, 368, 375, 376, 377, 382, 384, 396, 406, 407, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 426, 427, 428, 431, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 923, 926, 927, 932, 936, 938, 940, 943, 951, 953, 960, 964, 965, 966, 967, 968, 969, 970, 979, 984, 985, 989, 990, 991, 992, 993, 995, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1011, 1021, 1022, 1024, 1025, 1031, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1045, 1047, 1048], "concat": [4, 13, 165, 170, 190, 219, 874], "cmap": [4, 5, 6, 11, 12, 14, 17, 21, 22, 31, 32, 33, 35, 40, 41, 47, 48, 51, 52, 54, 55, 59, 81, 83, 90, 96, 99, 103, 107, 115, 121, 122, 142, 148, 156, 157, 172, 180, 184, 185, 192, 193, 210, 213, 214, 215, 217, 223, 224, 225, 234, 235, 239, 256, 257, 285, 289, 291, 293, 294, 296, 298, 301, 303, 304, 307, 309, 327, 328, 332, 336, 337, 338, 339, 340, 341, 342, 345, 346, 349, 350, 359, 697, 1021, 1022], "cm": [4, 6, 11, 12, 14, 17, 21, 22, 25, 31, 32, 33, 39, 40, 47, 48, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62, 68, 81, 83, 90, 96, 99, 103, 115, 121, 122, 142, 148, 156, 157, 172, 184, 193, 210, 213, 214, 217, 223, 224, 225, 231, 234, 235, 239, 244, 256, 257, 285, 288, 289, 291, 295, 298, 301, 303, 304, 307, 309, 319, 322, 327, 328, 332, 336, 337, 338, 340, 341, 342, 346, 349, 350, 359, 379, 410, 697, 914, 989, 999, 1005, 1021, 1022], "tab20b": 4, "stai": [4, 13, 27, 38, 106, 171, 354, 381, 382, 386, 396, 397, 994, 1037], "midnight": 4, "fewer": [4, 14, 27, 56, 113, 122, 124, 201, 368, 383, 409, 418, 419, 448, 461, 553, 594, 696, 831, 942, 985, 990, 992, 1036, 1037, 1038], "most": [4, 6, 8, 12, 14, 20, 25, 28, 53, 54, 56, 63, 79, 86, 87, 105, 113, 119, 120, 127, 133, 145, 146, 147, 149, 150, 158, 166, 170, 171, 172, 173, 174, 177, 185, 201, 202, 219, 237, 241, 247, 253, 259, 260, 265, 269, 270, 272, 280, 283, 294, 307, 313, 314, 317, 320, 323, 328, 340, 344, 353, 354, 355, 364, 368, 369, 370, 377, 378, 380, 382, 384, 386, 387, 388, 390, 394, 396, 397, 399, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 443, 444, 446, 450, 456, 457, 460, 468, 496, 503, 521, 524, 532, 534, 539, 543, 549, 551, 561, 562, 566, 567, 588, 589, 591, 593, 604, 611, 627, 630, 649, 658, 672, 674, 676, 678, 687, 688, 692, 695, 724, 727, 745, 757, 758, 762, 784, 793, 796, 797, 801, 802, 817, 829, 830, 843, 844, 845, 847, 849, 850, 851, 852, 853, 876, 878, 886, 887, 889, 890, 891, 892, 899, 937, 938, 940, 952, 957, 978, 979, 983, 984, 985, 986, 987, 988, 989, 990, 992, 995, 996, 997, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1014, 1021, 1023, 1025, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1046, 1048], "cyclic_spline_transform": 4, "cyclic_month": 4, "cyclic_weekdai": 4, "cyclic_hour": 4, "cyclic_spline_linear_pipelin": 4, "097": [4, 150, 224, 379], "132": [4, 8, 14, 57, 416], "013": [4, 147, 151, 270, 320, 325, 1011], "successfulli": [4, 14, 311, 381, 386, 409, 417, 1003], "reduc": [4, 7, 43, 46, 47, 48, 49, 54, 72, 73, 79, 116, 126, 128, 131, 147, 171, 180, 181, 185, 199, 205, 206, 209, 232, 234, 237, 240, 263, 269, 280, 294, 309, 312, 313, 322, 354, 355, 364, 374, 376, 379, 382, 388, 394, 396, 407, 408, 409, 411, 413, 414, 416, 417, 418, 420, 444, 445, 450, 457, 460, 493, 534, 544, 549, 555, 556, 557, 558, 563, 564, 565, 566, 573, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 610, 627, 643, 652, 672, 673, 674, 675, 687, 692, 695, 780, 798, 801, 802, 804, 812, 820, 822, 823, 824, 825, 828, 870, 871, 878, 890, 893, 894, 901, 902, 909, 910, 911, 912, 978, 981, 983, 984, 985, 986, 989, 992, 1001, 1002, 1004, 1006, 1016, 1024, 1031, 1033, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1045, 1047], "choic": [4, 7, 41, 47, 56, 66, 71, 79, 104, 153, 154, 160, 165, 190, 202, 240, 256, 260, 262, 265, 290, 314, 319, 353, 354, 364, 368, 380, 384, 387, 394, 399, 409, 411, 413, 415, 416, 418, 419, 452, 462, 471, 472, 473, 474, 475, 476, 478, 538, 540, 541, 547, 559, 638, 647, 648, 656, 658, 659, 661, 669, 680, 692, 705, 741, 830, 843, 844, 849, 851, 852, 878, 881, 890, 892, 901, 902, 925, 978, 983, 985, 986, 987, 988, 989, 990, 995, 997, 1002, 1003, 1004, 1005, 1038, 1041, 1042, 1046, 1047], "arbitrari": [4, 56, 87, 96, 97, 98, 118, 160, 180, 201, 218, 219, 260, 307, 311, 313, 319, 353, 362, 369, 382, 394, 396, 410, 413, 414, 416, 417, 421, 446, 450, 455, 457, 465, 532, 533, 559, 560, 581, 639, 648, 669, 680, 688, 741, 788, 799, 800, 805, 807, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 865, 867, 880, 978, 980, 981, 985, 986, 989, 992, 999, 1010, 1025, 1031, 1032, 1035, 1037, 1038, 1039, 1041, 1045, 1047], "held": [4, 8, 72, 104, 127, 173, 209, 249, 265, 270, 283, 416, 559, 560, 561, 562, 701, 798, 801, 802, 812, 858, 859, 871, 978, 979, 988, 997, 1025], "point": [4, 9, 11, 13, 14, 17, 27, 32, 38, 39, 41, 42, 49, 50, 53, 56, 59, 61, 65, 68, 81, 82, 86, 91, 92, 93, 95, 97, 99, 101, 102, 108, 113, 115, 119, 122, 123, 124, 131, 150, 155, 160, 161, 168, 171, 172, 173, 180, 184, 190, 193, 195, 197, 199, 201, 202, 203, 205, 207, 210, 213, 214, 218, 219, 222, 223, 224, 225, 226, 230, 233, 235, 249, 253, 256, 259, 263, 264, 269, 271, 272, 283, 285, 288, 289, 290, 291, 292, 293, 294, 296, 298, 301, 308, 309, 311, 313, 327, 328, 332, 336, 340, 341, 342, 344, 345, 349, 350, 353, 354, 355, 359, 364, 368, 369, 370, 376, 377, 378, 379, 380, 381, 382, 384, 386, 387, 388, 390, 394, 396, 397, 408, 409, 414, 415, 416, 417, 420, 421, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 452, 454, 455, 456, 457, 458, 460, 461, 469, 472, 474, 498, 504, 512, 514, 515, 519, 522, 525, 530, 533, 535, 541, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 610, 611, 628, 631, 632, 633, 637, 638, 639, 644, 645, 651, 655, 657, 670, 671, 673, 675, 676, 678, 679, 682, 683, 688, 689, 690, 691, 692, 693, 694, 701, 706, 707, 710, 713, 717, 722, 724, 730, 735, 736, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 763, 778, 779, 789, 790, 796, 797, 798, 812, 822, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 858, 859, 866, 871, 880, 895, 896, 897, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 915, 919, 981, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 999, 1001, 1002, 1004, 1005, 1009, 1010, 1011, 1020, 1023, 1024, 1025, 1031, 1032, 1033, 1035, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047], "naive_linear_predict": 4, "one_hot_linear_predict": 4, "cyclic_cossin_linear_predict": 4, "cyclic_spline_linear_predict": 4, "zoom": [4, 118, 307], "insight": [4, 7, 171, 172, 202, 203, 219, 303, 307, 353, 362, 407, 798, 801, 802, 812, 824, 996, 1005, 1014], "last_hour": [4, 13], "slice": [4, 13, 18, 122, 210, 224, 227, 235, 293, 296, 320, 321, 336, 377, 383, 384, 391, 410, 464, 467, 493, 494, 508, 546, 639, 773, 777, 780, 917, 941, 942, 960, 1043, 1045], "suptitl": [4, 5, 13, 15, 33, 34, 35, 40, 41, 51, 54, 58, 61, 68, 76, 96, 99, 107, 113, 122, 123, 130, 133, 162, 171, 172, 174, 195, 200, 216, 217, 222, 223, 224, 239, 250, 258, 304, 307, 309, 317, 319, 327, 328, 332, 347, 348, 359], "label": [4, 6, 7, 9, 11, 12, 13, 14, 17, 21, 25, 26, 27, 28, 31, 33, 34, 39, 41, 43, 44, 46, 47, 48, 49, 50, 52, 53, 56, 57, 59, 61, 64, 65, 66, 67, 68, 74, 76, 79, 80, 81, 82, 86, 87, 90, 92, 93, 98, 100, 103, 104, 105, 106, 113, 114, 115, 116, 117, 124, 125, 126, 127, 128, 129, 130, 132, 133, 136, 140, 146, 148, 153, 154, 158, 159, 160, 161, 162, 165, 168, 171, 174, 177, 180, 181, 183, 184, 185, 189, 190, 191, 195, 201, 202, 203, 204, 207, 208, 209, 210, 211, 215, 216, 218, 219, 223, 224, 225, 230, 235, 236, 238, 239, 240, 241, 249, 256, 257, 260, 261, 263, 264, 265, 266, 268, 271, 272, 273, 274, 275, 276, 283, 290, 292, 294, 297, 302, 304, 307, 308, 312, 317, 318, 321, 324, 326, 330, 331, 332, 333, 342, 344, 347, 348, 353, 354, 358, 359, 360, 361, 370, 374, 375, 376, 381, 382, 384, 387, 391, 396, 397, 406, 407, 419, 420, 426, 427, 431, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 461, 462, 465, 469, 487, 488, 489, 493, 494, 495, 496, 502, 503, 508, 509, 512, 514, 515, 519, 522, 523, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 567, 569, 570, 592, 593, 594, 595, 596, 598, 599, 600, 604, 605, 606, 609, 610, 631, 658, 659, 666, 667, 668, 673, 674, 675, 676, 677, 678, 697, 698, 700, 702, 703, 704, 705, 707, 709, 710, 712, 713, 714, 715, 716, 717, 718, 720, 724, 725, 726, 728, 729, 730, 733, 734, 735, 736, 737, 738, 739, 740, 742, 753, 754, 755, 756, 781, 782, 783, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 812, 813, 814, 815, 816, 817, 818, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 847, 848, 850, 851, 858, 859, 861, 865, 868, 869, 872, 874, 875, 882, 885, 896, 897, 898, 901, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 915, 921, 926, 927, 952, 953, 960, 978, 985, 986, 990, 991, 992, 993, 995, 996, 999, 1003, 1004, 1005, 1009, 1011, 1012, 1016, 1021, 1023, 1024, 1025, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "actual": [4, 13, 28, 47, 61, 76, 87, 119, 150, 177, 190, 201, 205, 209, 249, 258, 265, 355, 364, 368, 370, 379, 380, 382, 384, 387, 388, 394, 395, 396, 407, 409, 414, 417, 418, 434, 509, 515, 516, 527, 535, 538, 540, 547, 562, 563, 644, 645, 648, 658, 659, 666, 667, 668, 669, 670, 672, 674, 676, 677, 678, 680, 687, 691, 695, 701, 704, 709, 715, 721, 722, 723, 784, 796, 801, 802, 817, 818, 847, 878, 901, 907, 929, 930, 931, 964, 981, 988, 989, 992, 996, 997, 1038, 1039, 1045, 1046, 1047], "black": [4, 9, 10, 11, 13, 27, 35, 45, 50, 56, 57, 81, 82, 93, 96, 122, 145, 153, 154, 158, 159, 162, 166, 171, 172, 180, 189, 190, 191, 193, 197, 201, 202, 203, 207, 210, 213, 214, 219, 230, 240, 247, 250, 290, 301, 302, 304, 332, 350, 359, 360, 361, 382, 399, 402, 409, 416, 419, 555, 556, 631, 995, 996, 1005, 1009, 1016], "One": [4, 9, 12, 25, 31, 50, 56, 92, 101, 104, 121, 123, 126, 129, 168, 171, 174, 179, 205, 210, 216, 220, 230, 241, 252, 262, 269, 272, 280, 291, 292, 294, 308, 324, 335, 337, 338, 349, 351, 354, 368, 379, 382, 395, 396, 409, 412, 414, 415, 416, 417, 418, 420, 444, 449, 472, 474, 478, 512, 566, 631, 639, 658, 666, 668, 673, 675, 676, 677, 787, 805, 806, 829, 830, 831, 862, 863, 874, 905, 952, 979, 981, 985, 986, 987, 988, 989, 990, 992, 993, 996, 997, 999, 1004, 1011, 1012, 1027, 1035, 1037, 1044, 1046], "legend": [4, 7, 8, 9, 11, 13, 25, 27, 34, 38, 41, 62, 73, 74, 76, 79, 80, 81, 82, 86, 87, 91, 98, 100, 104, 105, 106, 113, 114, 115, 116, 117, 119, 124, 125, 126, 127, 128, 129, 130, 132, 133, 135, 136, 146, 153, 154, 158, 159, 160, 161, 162, 171, 172, 177, 180, 181, 183, 186, 189, 190, 191, 195, 201, 202, 203, 204, 207, 208, 209, 210, 211, 214, 215, 216, 218, 219, 225, 233, 234, 235, 236, 238, 241, 249, 257, 259, 261, 262, 264, 265, 266, 267, 269, 272, 274, 275, 276, 280, 288, 290, 291, 292, 297, 302, 308, 312, 318, 321, 324, 329, 339, 342, 344, 347, 353, 358, 359, 360, 361, 700, 1021], "draw": [4, 7, 17, 61, 162, 171, 197, 241, 264, 269, 340, 389, 412, 414, 415, 416, 555, 556, 557, 558, 563, 564, 565, 566, 611, 634, 701, 804, 820, 913, 915, 988, 1009, 1019, 1044, 1045], "conclus": [4, 101, 171, 173, 201, 203, 262, 264, 364, 416, 1019], "abov": [4, 26, 27, 38, 45, 67, 71, 115, 118, 119, 126, 136, 149, 150, 171, 172, 187, 201, 203, 207, 212, 234, 237, 238, 262, 268, 280, 290, 309, 312, 313, 318, 320, 324, 354, 355, 362, 364, 368, 369, 370, 376, 377, 379, 380, 381, 382, 384, 386, 388, 394, 396, 397, 409, 410, 411, 413, 414, 415, 417, 419, 441, 445, 464, 467, 489, 495, 496, 497, 523, 590, 634, 704, 754, 798, 802, 810, 812, 822, 864, 865, 878, 884, 890, 898, 952, 978, 979, 981, 983, 985, 986, 989, 992, 994, 996, 999, 1003, 1004, 1005, 1010, 1016, 1017, 1023, 1024, 1025, 1037], "problemat": [4, 258, 410, 979, 1039], "captur": [4, 9, 12, 13, 38, 40, 87, 126, 130, 145, 158, 171, 180, 185, 201, 205, 253, 283, 318, 340, 344, 390, 409, 416, 417, 418, 571, 588, 589, 591, 847, 956, 989, 994, 1002, 1006, 1023, 1043], "big": [4, 45, 61, 63, 206, 223, 240, 253, 369, 382, 388, 397, 411, 417, 421, 538, 561, 562, 564, 565, 804, 825, 836, 837, 838, 839, 840, 1010, 1014, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "goe": [4, 38, 118, 362, 382, 416, 471, 472, 478, 557, 558, 564, 565, 566, 909, 910, 911, 912, 999, 1003], "artifact": [4, 14, 47, 48, 307, 370, 386], "discontinu": [4, 394], "fail": [4, 55, 67, 97, 104, 161, 162, 180, 185, 205, 237, 262, 317, 369, 380, 382, 384, 385, 390, 397, 399, 412, 413, 440, 472, 474, 676, 677, 678, 858, 859, 932, 978, 986, 1031, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048], "intra": [4, 588, 591, 791, 792], "variat": [4, 7, 12, 38, 66, 93, 130, 150, 158, 159, 166, 168, 171, 206, 246, 248, 253, 254, 259, 273, 283, 295, 318, 330, 340, 379, 413, 414, 443, 447, 459, 536, 643, 672, 674, 675, 796, 797, 816, 817, 819, 978, 989, 999, 1002, 1005, 1009, 1011, 1021, 1023, 1026, 1027, 1034, 1036, 1037], "harmon": [4, 38, 269, 354, 409, 535, 541, 728, 729, 735, 782, 794, 989], "phase": [4, 185, 195, 368, 627, 981, 986, 992, 1014, 1039, 1041], "potenti": [4, 56, 79, 166, 170, 172, 180, 291, 292, 301, 323, 324, 344, 355, 368, 369, 396, 399, 400, 409, 413, 416, 417, 468, 482, 483, 484, 485, 496, 524, 549, 557, 558, 561, 562, 564, 565, 573, 606, 611, 634, 762, 891, 892, 899, 909, 910, 911, 912, 995, 1003, 1005, 1009, 1025, 1034, 1041, 1042, 1045], "fix": [4, 8, 21, 26, 35, 47, 72, 106, 118, 119, 122, 153, 154, 158, 161, 171, 185, 203, 219, 240, 253, 265, 301, 317, 318, 319, 320, 321, 322, 323, 324, 354, 368, 369, 376, 378, 380, 381, 382, 384, 385, 390, 394, 396, 397, 400, 409, 410, 413, 414, 416, 417, 419, 452, 462, 472, 504, 512, 531, 537, 540, 542, 548, 549, 559, 560, 564, 565, 588, 591, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 630, 653, 663, 668, 670, 684, 687, 691, 695, 707, 784, 796, 812, 819, 843, 844, 846, 849, 851, 852, 868, 871, 885, 909, 910, 938, 956, 978, 985, 988, 989, 992, 999, 1010, 1013, 1025, 1029, 1030, 1032, 1033, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048], "two": [4, 7, 9, 11, 15, 17, 21, 25, 27, 31, 35, 38, 40, 41, 44, 56, 61, 65, 71, 72, 76, 81, 86, 87, 91, 92, 93, 96, 98, 99, 101, 105, 112, 113, 114, 121, 122, 123, 124, 126, 129, 130, 131, 134, 137, 147, 150, 153, 154, 155, 156, 159, 160, 165, 166, 168, 171, 172, 173, 180, 184, 185, 189, 190, 191, 192, 197, 201, 202, 203, 209, 210, 213, 218, 219, 224, 226, 227, 230, 235, 237, 238, 240, 247, 248, 249, 251, 252, 253, 257, 259, 263, 269, 280, 288, 290, 293, 294, 296, 298, 307, 309, 312, 317, 318, 320, 321, 329, 336, 337, 340, 341, 342, 344, 349, 353, 354, 355, 359, 364, 375, 376, 377, 378, 379, 380, 382, 384, 386, 388, 389, 390, 394, 396, 397, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 441, 442, 443, 444, 445, 447, 450, 451, 452, 453, 457, 459, 464, 469, 470, 471, 472, 473, 474, 475, 476, 488, 490, 491, 492, 493, 494, 496, 498, 500, 501, 502, 503, 504, 505, 507, 510, 514, 519, 522, 536, 538, 540, 544, 547, 549, 550, 553, 560, 570, 581, 584, 590, 591, 592, 595, 596, 598, 599, 600, 602, 603, 606, 607, 608, 610, 611, 620, 621, 624, 628, 631, 632, 639, 643, 645, 670, 671, 673, 692, 699, 703, 704, 705, 712, 715, 716, 719, 721, 722, 723, 730, 731, 734, 735, 737, 740, 742, 753, 754, 756, 762, 763, 770, 773, 776, 777, 778, 779, 780, 784, 785, 793, 794, 795, 796, 830, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 858, 859, 865, 866, 873, 874, 875, 876, 895, 896, 897, 901, 902, 909, 911, 912, 952, 968, 969, 975, 978, 979, 981, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1011, 1016, 1020, 1023, 1024, 1025, 1028, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "onc": [4, 8, 51, 147, 150, 153, 223, 237, 240, 260, 263, 280, 285, 313, 317, 321, 353, 355, 362, 364, 368, 370, 376, 377, 382, 386, 387, 388, 389, 390, 395, 396, 397, 409, 410, 412, 413, 414, 416, 417, 418, 419, 449, 451, 453, 472, 508, 509, 538, 544, 551, 559, 560, 590, 591, 597, 611, 619, 627, 647, 651, 653, 655, 661, 663, 665, 666, 667, 668, 676, 677, 678, 697, 712, 716, 718, 735, 780, 799, 803, 806, 816, 836, 837, 838, 839, 840, 913, 985, 986, 992, 999, 1003, 1004, 1005, 1016, 1025, 1028, 1031, 1039, 1041, 1042, 1043, 1044, 1048], "specif": [4, 11, 12, 21, 28, 35, 45, 56, 63, 66, 71, 73, 119, 133, 158, 161, 171, 172, 177, 205, 219, 257, 262, 280, 307, 317, 318, 322, 344, 353, 354, 355, 364, 368, 369, 377, 382, 385, 387, 388, 390, 394, 396, 399, 405, 408, 409, 410, 413, 414, 416, 417, 418, 419, 496, 503, 534, 551, 557, 564, 567, 568, 569, 570, 574, 588, 591, 593, 612, 613, 614, 615, 617, 618, 619, 620, 622, 623, 625, 640, 643, 646, 647, 652, 658, 672, 687, 697, 699, 712, 713, 745, 798, 799, 800, 805, 806, 807, 812, 824, 837, 930, 932, 933, 952, 965, 966, 967, 983, 985, 986, 988, 989, 991, 992, 994, 996, 999, 1003, 1005, 1006, 1007, 1008, 1025, 1027, 1031, 1035, 1039, 1040, 1041, 1042, 1045, 1046, 1048], "furthermor": [4, 13, 38, 119, 159, 172, 173, 240, 241, 243, 285, 353, 354, 368, 370, 389, 409, 414, 416, 417, 562, 590, 606, 619, 704, 735, 745, 754, 756, 794, 901, 985, 997, 1034, 1038], "enforc": [4, 12, 35, 54, 96, 158, 195, 294, 368, 382, 411, 414, 416, 508, 527, 531, 537, 539, 542, 543, 545, 546, 548, 557, 558, 561, 562, 564, 565, 880, 909, 910, 911, 912, 921, 922, 979, 986, 1033, 1039, 1041, 1043, 1047], "behav": [4, 12, 49, 53, 58, 205, 257, 307, 319, 340, 364, 382, 388, 394, 395, 409, 410, 413, 881, 985, 999, 1004, 1006, 1010, 1025, 1031, 1038, 1040, 1044, 1045], "similarli": [4, 12, 38, 56, 93, 129, 172, 174, 185, 190, 201, 231, 240, 262, 301, 307, 323, 340, 364, 369, 378, 380, 384, 387, 396, 406, 412, 413, 417, 728, 729, 737, 782, 783, 786, 984, 986, 987, 989, 996, 1003, 1004, 1006, 1016, 1020, 1039, 1045, 1047], "spiki": 4, "instanc": [4, 8, 10, 13, 25, 27, 28, 54, 57, 59, 116, 147, 150, 166, 172, 173, 184, 185, 232, 237, 240, 258, 260, 271, 273, 274, 296, 317, 324, 332, 336, 337, 343, 344, 353, 354, 355, 367, 368, 369, 376, 377, 379, 380, 381, 382, 384, 386, 387, 388, 390, 391, 394, 396, 399, 400, 406, 407, 409, 410, 413, 414, 416, 417, 418, 419, 420, 421, 423, 433, 434, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 462, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 491, 492, 495, 496, 497, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 610, 611, 620, 627, 628, 629, 630, 632, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 707, 720, 728, 729, 737, 770, 773, 777, 778, 779, 780, 782, 783, 786, 787, 788, 791, 792, 796, 797, 798, 800, 801, 802, 803, 804, 805, 807, 810, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 890, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 921, 922, 924, 932, 933, 937, 938, 945, 946, 947, 948, 957, 959, 960, 963, 973, 974, 978, 979, 985, 986, 989, 991, 992, 995, 997, 999, 1003, 1004, 1005, 1010, 1013, 1016, 1023, 1024, 1025, 1027, 1031, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "shorter": [4, 159, 250, 394, 409, 414, 450, 457, 563, 697, 991, 995, 1025, 1042], "necessarili": [4, 32, 73, 99, 171, 201, 209, 219, 235, 236, 248, 309, 353, 354, 376, 386, 405, 407, 409, 416, 627, 849, 851, 852, 853, 983, 986, 988, 989], "59": [4, 177, 185, 219, 345, 379, 388, 409, 410, 510, 989, 1031], "37": [4, 185, 265, 327, 362, 377, 416, 524, 716, 881, 999, 1031], "creat": [4, 5, 8, 11, 13, 17, 21, 22, 27, 28, 31, 33, 35, 38, 40, 42, 44, 45, 47, 50, 53, 59, 61, 63, 72, 73, 81, 87, 91, 98, 101, 115, 118, 122, 123, 124, 126, 129, 132, 148, 149, 153, 155, 158, 159, 160, 162, 166, 170, 172, 180, 182, 184, 187, 197, 202, 203, 213, 214, 224, 235, 237, 240, 241, 243, 252, 257, 258, 260, 262, 272, 293, 295, 296, 309, 311, 312, 317, 320, 321, 332, 336, 337, 341, 342, 345, 348, 349, 350, 355, 358, 360, 361, 364, 369, 377, 378, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 395, 396, 399, 407, 409, 410, 413, 415, 416, 417, 419, 438, 451, 453, 465, 466, 499, 515, 516, 517, 518, 546, 553, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 588, 589, 591, 597, 628, 630, 631, 632, 633, 697, 698, 700, 701, 702, 781, 788, 798, 800, 804, 808, 812, 816, 820, 822, 823, 831, 862, 874, 903, 906, 909, 910, 911, 912, 916, 919, 941, 942, 948, 957, 962, 974, 979, 985, 988, 989, 990, 992, 996, 999, 1000, 1001, 1003, 1004, 1005, 1009, 1010, 1014, 1021, 1023, 1024, 1028, 1031, 1032, 1034, 1037, 1041, 1044, 1045, 1046, 1047, 1048], "turn": [4, 33, 79, 165, 166, 171, 185, 216, 217, 235, 262, 289, 355, 368, 370, 377, 394, 396, 397, 408, 409, 410, 412, 414, 417, 418, 419, 581, 582, 589, 607, 608, 830, 834, 903, 906, 924, 979, 983, 991, 994, 999, 1014, 1025, 1036, 1038, 1039, 1044], "downstream": [4, 81, 314, 355, 417, 531, 534, 537, 541, 542, 606, 874, 999, 1041], "freedom": [4, 98, 158, 189, 190, 192, 262, 541, 656, 796, 985, 1034], "underfit": [4, 35, 126, 153, 168, 173, 202, 205, 255, 277, 278, 301, 313, 348, 416, 657, 798, 801, 802, 812, 823, 824, 861, 876, 984, 985, 1011], "approxim": [4, 5, 28, 34, 47, 54, 81, 100, 101, 106, 117, 125, 126, 150, 154, 171, 178, 181, 197, 201, 202, 215, 219, 224, 227, 229, 230, 233, 236, 245, 253, 262, 267, 276, 286, 287, 294, 299, 307, 309, 310, 312, 317, 320, 353, 355, 360, 361, 364, 371, 374, 379, 391, 394, 396, 406, 407, 410, 412, 413, 414, 416, 419, 421, 422, 423, 433, 449, 469, 470, 473, 474, 475, 476, 482, 483, 484, 491, 496, 502, 521, 524, 533, 534, 535, 536, 538, 539, 540, 541, 543, 544, 545, 546, 547, 559, 560, 582, 589, 610, 611, 619, 638, 639, 640, 641, 642, 657, 658, 659, 672, 674, 676, 677, 679, 687, 692, 757, 758, 763, 796, 799, 816, 822, 826, 827, 841, 842, 845, 849, 851, 852, 853, 857, 861, 862, 867, 871, 873, 874, 878, 890, 901, 906, 907, 937, 938, 963, 982, 983, 984, 985, 986, 988, 992, 993, 994, 995, 996, 997, 1001, 1003, 1004, 1005, 1009, 1010, 1011, 1025, 1027, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045], "especi": [4, 8, 13, 56, 57, 123, 126, 171, 201, 237, 313, 322, 354, 364, 369, 376, 382, 390, 394, 396, 407, 409, 417, 443, 449, 501, 538, 557, 558, 559, 560, 564, 565, 566, 646, 647, 648, 650, 652, 653, 654, 658, 659, 660, 661, 662, 663, 669, 680, 695, 705, 745, 836, 837, 838, 839, 840, 909, 910, 911, 912, 985, 991, 992, 997, 999, 1014, 1034, 1039, 1043, 1044, 1045], "sharp": [4, 172, 996, 999], "rush": [4, 13, 382], "flatter": [4, 26], "accur": [4, 9, 13, 22, 26, 27, 81, 96, 128, 153, 160, 171, 172, 205, 216, 219, 262, 269, 273, 280, 321, 353, 354, 364, 381, 407, 409, 411, 414, 416, 417, 418, 437, 443, 447, 451, 453, 459, 531, 538, 540, 542, 543, 545, 546, 547, 607, 608, 634, 801, 802, 841, 842, 937, 938, 981, 986, 989, 1005, 1045], "tend": [4, 12, 28, 38, 40, 44, 53, 56, 58, 150, 171, 172, 190, 201, 206, 219, 247, 250, 259, 263, 283, 304, 344, 355, 368, 370, 382, 384, 396, 407, 409, 411, 414, 416, 418, 437, 448, 653, 847, 878, 890, 938, 985, 986, 992, 1005, 1025], "under": [4, 7, 11, 25, 26, 28, 42, 68, 79, 80, 104, 123, 126, 172, 201, 230, 240, 262, 269, 271, 272, 308, 323, 371, 376, 382, 384, 386, 388, 390, 396, 399, 403, 407, 409, 411, 413, 414, 417, 418, 446, 451, 453, 470, 471, 472, 473, 474, 475, 476, 532, 539, 541, 543, 654, 655, 656, 702, 706, 707, 708, 715, 741, 753, 787, 788, 796, 797, 846, 945, 985, 986, 987, 989, 992, 999, 1003, 1004, 1005, 1009, 1010, 1025, 1031, 1033, 1034, 1036, 1039, 1043], "These": [4, 5, 7, 28, 52, 96, 98, 102, 118, 122, 168, 172, 190, 201, 202, 203, 231, 269, 280, 285, 289, 304, 307, 314, 316, 321, 328, 330, 364, 368, 369, 375, 378, 379, 382, 384, 386, 389, 391, 394, 396, 399, 403, 406, 407, 408, 409, 412, 414, 416, 417, 418, 419, 442, 446, 448, 498, 508, 509, 515, 538, 567, 568, 602, 603, 668, 676, 677, 699, 706, 732, 777, 793, 798, 801, 802, 804, 812, 820, 822, 823, 824, 825, 826, 828, 846, 847, 866, 978, 980, 983, 985, 986, 989, 990, 1000, 1002, 1004, 1009, 1016, 1020, 1025, 1031, 1037, 1039, 1040, 1041, 1044, 1048], "systemat": [4, 262, 384, 712, 727, 989, 1046], "reveal": [4, 13, 171, 173, 353, 388, 406, 986, 1047], "form": [4, 9, 20, 33, 43, 61, 68, 96, 136, 160, 161, 171, 236, 237, 253, 262, 327, 364, 376, 379, 382, 384, 386, 396, 397, 406, 408, 409, 412, 413, 414, 415, 416, 417, 419, 421, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 459, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 685, 687, 688, 689, 690, 691, 692, 693, 699, 796, 797, 798, 801, 802, 803, 806, 808, 812, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 927, 946, 949, 978, 980, 982, 983, 985, 986, 989, 990, 993, 994, 995, 999, 1004, 1009, 1016, 1023, 1037, 1041, 1043], "explain": [4, 5, 12, 57, 74, 86, 87, 105, 126, 153, 158, 159, 172, 173, 201, 219, 230, 237, 253, 272, 275, 313, 353, 354, 369, 380, 382, 386, 403, 405, 412, 414, 419, 493, 521, 524, 534, 541, 544, 549, 625, 648, 656, 669, 680, 721, 722, 723, 727, 784, 985, 992, 1005, 1008, 1009, 1021, 1023, 1024, 1042, 1044, 1045], "lack": [4, 344, 382, 384, 394, 413, 826, 916, 1004, 1045], "deriv": [4, 20, 106, 107, 125, 158, 161, 173, 189, 190, 194, 202, 369, 377, 384, 411, 413, 415, 416, 417, 419, 421, 441, 445, 446, 465, 533, 606, 617, 622, 648, 669, 676, 680, 858, 859, 874, 880, 901, 902, 983, 985, 986, 989, 993, 995, 1004, 1031, 1032, 1033, 1038, 1039, 1040, 1046], "address": [4, 49, 205, 353, 377, 382, 409, 417, 657, 985, 986, 991, 992, 993, 994, 995, 999, 1014, 1023, 1039], "section": [4, 38, 96, 101, 116, 124, 133, 139, 140, 141, 142, 158, 162, 170, 171, 172, 174, 180, 185, 189, 190, 203, 226, 231, 237, 240, 242, 260, 262, 265, 271, 312, 313, 314, 319, 353, 354, 355, 364, 375, 377, 380, 382, 383, 384, 386, 387, 388, 389, 390, 397, 400, 403, 407, 408, 410, 412, 413, 414, 416, 417, 418, 419, 439, 443, 459, 534, 614, 619, 622, 637, 645, 787, 797, 903, 906, 978, 983, 985, 989, 990, 992, 993, 995, 996, 1003, 1004, 1006, 1008, 1023, 1025, 1031, 1033, 1034, 1035, 1038], "margin": [4, 12, 17, 26, 28, 92, 115, 154, 155, 156, 157, 158, 159, 168, 171, 172, 179, 211, 212, 214, 220, 238, 240, 262, 280, 307, 310, 313, 335, 336, 338, 339, 340, 342, 344, 346, 349, 350, 351, 379, 407, 408, 414, 416, 419, 512, 610, 611, 631, 645, 676, 734, 830, 878, 890, 903, 906, 985, 989, 991, 995, 996, 999, 1003, 1004, 1011, 1023, 1038, 1040], "construct": [4, 11, 71, 73, 113, 115, 117, 121, 133, 150, 219, 231, 237, 242, 244, 298, 308, 310, 318, 321, 376, 379, 384, 391, 396, 409, 410, 413, 414, 416, 417, 420, 434, 441, 442, 444, 445, 450, 452, 457, 463, 465, 467, 519, 535, 541, 544, 555, 556, 581, 587, 639, 688, 690, 691, 812, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 860, 861, 862, 863, 865, 906, 920, 922, 937, 938, 947, 948, 952, 978, 979, 981, 985, 986, 989, 990, 992, 999, 1002, 1004, 1005, 1010, 1016, 1020, 1036, 1038, 1039, 1042, 1045], "polynomialfeatur": [4, 180, 201, 202, 207, 242, 276, 319, 344, 880, 985, 999, 1035, 1039, 1040, 1041, 1044, 1045, 1047, 1048], "coars": [4, 122, 388, 448, 461], "explicitli": [4, 47, 120, 153, 160, 165, 166, 202, 233, 237, 324, 344, 355, 364, 369, 376, 378, 382, 383, 384, 386, 394, 396, 400, 405, 413, 417, 419, 535, 549, 550, 579, 580, 597, 627, 648, 658, 659, 669, 680, 709, 726, 781, 787, 788, 801, 802, 832, 835, 841, 842, 867, 891, 892, 957, 978, 979, 981, 983, 985, 986, 989, 991, 992, 999, 1014, 1025, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1044, 1045], "too": [4, 7, 12, 13, 18, 45, 51, 56, 58, 63, 71, 75, 83, 100, 126, 165, 173, 185, 202, 205, 223, 234, 240, 248, 256, 260, 269, 277, 303, 313, 340, 353, 360, 361, 368, 379, 382, 388, 390, 394, 396, 409, 411, 413, 416, 417, 418, 421, 437, 449, 538, 588, 591, 679, 692, 707, 836, 837, 838, 839, 840, 866, 879, 881, 984, 986, 988, 989, 991, 992, 996, 1023, 1032, 1035, 1038, 1039, 1040, 1041, 1043], "mani": [4, 7, 10, 20, 56, 57, 75, 79, 83, 113, 119, 120, 121, 122, 127, 146, 150, 173, 201, 222, 234, 248, 256, 262, 269, 270, 274, 285, 307, 312, 313, 317, 318, 319, 320, 321, 323, 324, 353, 364, 368, 370, 377, 379, 381, 382, 395, 396, 397, 399, 400, 406, 407, 409, 410, 411, 414, 416, 417, 418, 419, 421, 503, 553, 554, 557, 558, 559, 560, 564, 565, 566, 588, 591, 606, 609, 627, 639, 650, 654, 658, 659, 666, 667, 668, 676, 677, 678, 692, 695, 773, 777, 798, 802, 812, 858, 859, 874, 879, 881, 901, 909, 910, 911, 912, 978, 979, 981, 985, 986, 988, 989, 990, 991, 992, 995, 996, 997, 999, 1002, 1004, 1006, 1008, 1009, 1010, 1014, 1023, 1025, 1031, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1045, 1046, 1047, 1048], "featureunion": [4, 75, 374, 396, 400, 408, 464, 629, 863, 979, 1010, 1014, 1027, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047], "hour_workday_interact": 4, "interaction_onli": [4, 876, 985, 999], "combin": [4, 12, 13, 21, 26, 28, 62, 71, 72, 74, 75, 76, 91, 96, 105, 106, 112, 123, 124, 128, 136, 137, 153, 159, 165, 166, 168, 171, 185, 201, 205, 218, 219, 226, 230, 232, 235, 240, 258, 262, 263, 271, 273, 274, 294, 302, 313, 319, 320, 322, 343, 344, 355, 359, 368, 374, 378, 379, 382, 387, 395, 396, 406, 407, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 421, 422, 445, 464, 466, 467, 473, 475, 476, 479, 480, 481, 489, 496, 508, 509, 515, 521, 524, 526, 531, 537, 538, 540, 542, 547, 549, 560, 562, 565, 567, 568, 610, 614, 616, 621, 624, 630, 634, 643, 646, 647, 652, 653, 658, 659, 660, 661, 662, 663, 666, 668, 672, 673, 674, 675, 676, 678, 679, 681, 684, 701, 729, 787, 798, 801, 802, 809, 810, 822, 824, 828, 860, 861, 862, 866, 874, 875, 876, 881, 901, 963, 978, 981, 982, 985, 989, 990, 992, 995, 999, 1002, 1003, 1005, 1006, 1011, 1014, 1021, 1023, 1025, 1031, 1036, 1039, 1042, 1043, 1044, 1046, 1047], "previou": [4, 44, 54, 72, 96, 116, 123, 124, 126, 133, 153, 158, 159, 170, 171, 172, 185, 187, 202, 234, 236, 237, 262, 265, 269, 307, 312, 321, 353, 354, 355, 364, 368, 377, 382, 384, 387, 388, 390, 394, 396, 397, 399, 409, 416, 417, 468, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 630, 646, 648, 652, 653, 658, 660, 662, 666, 667, 668, 669, 676, 677, 678, 680, 707, 817, 832, 835, 850, 858, 859, 898, 915, 985, 989, 993, 999, 1010, 1016, 1025, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "nice": [4, 68, 202, 237, 307, 368, 414, 1025], "cyclic_spline_interactions_pipelin": 4, "078": 4, "009": [4, 354, 388], "104": [4, 13, 25, 311, 315, 1011], "highlight": [4, 13, 15, 56, 72, 81, 93, 111, 117, 118, 119, 120, 121, 123, 130, 147, 150, 153, 154, 159, 165, 166, 172, 173, 177, 182, 189, 201, 202, 203, 219, 232, 237, 241, 242, 243, 244, 257, 258, 259, 271, 274, 280, 283, 287, 311, 313, 325, 353, 355, 371, 382, 386, 387, 390, 394, 419, 443, 446, 447, 464, 467, 490, 491, 496, 501, 502, 504, 512, 515, 521, 524, 538, 561, 562, 564, 565, 567, 599, 602, 628, 630, 632, 634, 640, 646, 648, 652, 658, 669, 680, 688, 701, 702, 717, 731, 747, 787, 794, 798, 799, 801, 802, 804, 812, 820, 823, 824, 827, 843, 845, 862, 866, 871, 874, 875, 876, 880, 881, 882, 898, 899, 901, 906, 909, 910, 933, 986, 989, 997, 999, 1004, 1011, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "anoth": [4, 38, 96, 101, 113, 124, 128, 150, 153, 161, 166, 171, 190, 205, 209, 227, 230, 237, 241, 248, 262, 264, 265, 268, 272, 295, 353, 355, 358, 364, 368, 370, 376, 377, 380, 382, 384, 388, 394, 396, 400, 403, 406, 409, 413, 414, 416, 417, 418, 420, 442, 444, 452, 455, 462, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 508, 538, 540, 547, 673, 676, 692, 709, 719, 804, 820, 860, 861, 882, 978, 979, 984, 985, 986, 989, 990, 992, 995, 999, 1003, 1004, 1016, 1023, 1024, 1025, 1040, 1041], "either": [4, 10, 31, 72, 119, 122, 123, 171, 189, 191, 231, 240, 257, 266, 271, 290, 348, 353, 362, 368, 369, 374, 377, 380, 382, 383, 384, 388, 396, 400, 403, 407, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 421, 442, 447, 452, 487, 496, 512, 524, 533, 534, 536, 544, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 582, 583, 584, 588, 589, 590, 591, 593, 594, 597, 602, 607, 608, 610, 611, 622, 627, 630, 632, 633, 650, 654, 656, 664, 676, 678, 682, 683, 690, 697, 698, 702, 706, 707, 711, 712, 720, 723, 725, 726, 727, 728, 729, 734, 737, 738, 739, 741, 751, 755, 768, 773, 777, 781, 782, 783, 784, 786, 787, 788, 793, 798, 801, 802, 804, 812, 820, 821, 822, 823, 824, 825, 826, 828, 831, 861, 891, 892, 898, 901, 902, 909, 910, 911, 912, 916, 946, 950, 978, 985, 989, 990, 991, 992, 993, 994, 997, 999, 1003, 1004, 1016, 1024, 1025, 1031, 1034, 1040, 1041, 1042, 1045], "after": [4, 18, 21, 22, 27, 47, 54, 56, 71, 72, 76, 82, 98, 113, 124, 131, 133, 136, 146, 150, 158, 160, 162, 165, 171, 177, 194, 201, 240, 241, 244, 250, 262, 271, 283, 285, 293, 295, 307, 308, 311, 312, 353, 354, 370, 377, 379, 381, 382, 384, 386, 388, 389, 390, 394, 396, 403, 405, 406, 407, 409, 410, 413, 414, 417, 418, 421, 442, 447, 450, 451, 452, 453, 456, 462, 515, 532, 536, 553, 554, 559, 560, 561, 562, 597, 627, 630, 658, 659, 666, 667, 668, 673, 675, 676, 677, 678, 692, 712, 725, 755, 793, 796, 797, 801, 802, 850, 857, 861, 874, 880, 901, 906, 907, 978, 979, 983, 985, 989, 993, 994, 999, 1001, 1003, 1004, 1005, 1010, 1016, 1023, 1025, 1031, 1034, 1038, 1039, 1042, 1043, 1046], "quadrat": [4, 9, 30, 34, 36, 81, 82, 83, 158, 162, 168, 215, 252, 264, 320, 408, 440, 458, 461, 549, 550, 623, 631, 648, 658, 659, 669, 676, 680, 716, 906, 907, 985, 986, 989, 992, 995, 999, 1003, 1004, 1011, 1012, 1027, 1032], "tractabl": [4, 413, 634, 1009, 1044], "nystr\u00f6m": [4, 981], "latter": [4, 15, 252, 262, 271, 272, 293, 312, 348, 370, 379, 396, 413, 416, 417, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 741, 796, 797, 798, 801, 802, 807, 812, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 956, 992, 1040], "kernel_approxim": [4, 165, 168, 176, 177, 178, 215, 230, 235, 319, 371, 677, 757, 758, 867, 981, 1011, 1016, 1032, 1038, 1048], "nystroem": [4, 165, 215, 230, 235, 374, 640, 641, 642, 677, 867, 906, 907, 1027, 1032, 1038, 1041, 1043, 1044, 1045], "cyclic_spline_poly_pipelin": 4, "poli": [4, 17, 142, 177, 262, 337, 344, 347, 452, 535, 620, 764, 773, 798, 876, 903, 904, 905, 906, 907, 985, 999, 1023], "n_compon": [4, 5, 6, 12, 15, 45, 53, 58, 59, 60, 71, 74, 75, 86, 87, 91, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 131, 177, 200, 222, 223, 224, 225, 226, 227, 230, 234, 235, 238, 242, 247, 248, 249, 250, 251, 252, 253, 261, 289, 294, 304, 312, 319, 321, 354, 384, 387, 388, 396, 412, 414, 421, 451, 452, 462, 464, 482, 483, 484, 485, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 639, 640, 641, 642, 688, 689, 690, 691, 692, 693, 694, 695, 696, 796, 797, 850, 857, 860, 893, 894, 895, 938, 981, 983, 986, 988, 992, 1021, 1024, 1032, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1048], "300": [4, 21, 22, 35, 39, 51, 59, 99, 113, 114, 115, 119, 166, 191, 227, 230, 234, 251, 265, 295, 310, 319, 327, 346, 348, 384, 443, 447, 448, 459, 461, 639, 644, 645, 679, 690, 692, 694, 858, 985, 1041], "053": [4, 61, 69, 150, 379, 388, 1011], "002": [4, 12, 150, 379], "076": [4, 15, 49, 889], "004": [4, 120, 354], "almost": [4, 35, 119, 125, 203, 209, 237, 240, 276, 312, 330, 364, 375, 377, 386, 388, 394, 395, 396, 400, 409, 413, 414, 470, 471, 472, 473, 475, 476, 477, 796, 978, 984, 985, 988, 989, 1004, 1024, 1025, 1039, 1044], "rival": [4, 898, 1002], "intermedi": [4, 7, 53, 56, 118, 126, 240, 340, 417, 559, 560, 619, 861, 989, 1043], "compound": [4, 219, 417, 610, 612, 680, 723, 751, 985, 1025], "one_hot_poly_pipelin": 4, "passthrough": [4, 73, 123, 171, 172, 201, 219, 240, 313, 322, 410, 464, 467, 567, 568, 860, 861, 999, 1040, 1042, 1045, 1046, 1048], "082": 4, "006": [4, 270, 388], "111": [4, 7, 8, 17, 68, 91, 102, 103, 198, 216, 226, 262, 285, 853, 1034], "competit": [4, 126, 353, 416, 644, 992], "low": [4, 11, 12, 38, 51, 82, 87, 98, 100, 104, 113, 116, 129, 150, 173, 194, 196, 201, 203, 205, 215, 222, 224, 230, 234, 240, 247, 248, 250, 253, 256, 262, 264, 268, 269, 277, 291, 292, 303, 311, 313, 314, 323, 330, 339, 340, 353, 362, 378, 379, 382, 387, 390, 396, 399, 406, 407, 408, 413, 414, 417, 442, 444, 449, 468, 521, 524, 535, 582, 589, 603, 679, 692, 696, 705, 725, 741, 788, 846, 875, 882, 899, 938, 954, 957, 978, 984, 985, 986, 988, 989, 992, 994, 995, 996, 997, 999, 1001, 1004, 1005, 1012, 1027, 1032, 1035, 1036, 1037, 1039, 1040, 1045, 1046], "rank": [4, 18, 26, 81, 100, 104, 120, 148, 173, 174, 219, 260, 262, 270, 378, 404, 406, 407, 411, 412, 414, 416, 417, 508, 509, 521, 524, 549, 550, 593, 594, 606, 648, 657, 669, 680, 696, 720, 725, 726, 738, 739, 755, 793, 801, 802, 938, 978, 980, 981, 986, 997, 999, 1014, 1027, 1032, 1037, 1040, 1041, 1045, 1046], "fact": [4, 11, 20, 26, 82, 87, 113, 124, 126, 173, 234, 244, 280, 283, 353, 376, 389, 394, 396, 412, 414, 415, 416, 417, 649, 668, 670, 704, 983, 985, 992, 999, 1003, 1004, 1010, 1014, 1045], "smoother": [4, 5, 126, 172, 303, 415], "allow": [4, 21, 57, 59, 75, 76, 91, 100, 101, 116, 117, 124, 131, 153, 158, 160, 162, 195, 201, 205, 219, 223, 231, 234, 241, 243, 244, 247, 262, 283, 317, 318, 319, 320, 322, 344, 345, 353, 362, 364, 368, 376, 380, 382, 383, 384, 386, 389, 391, 396, 397, 407, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 420, 437, 443, 444, 446, 447, 449, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 496, 523, 524, 533, 534, 538, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 593, 594, 597, 603, 610, 611, 615, 627, 628, 630, 634, 635, 638, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 690, 692, 699, 741, 761, 764, 773, 777, 780, 791, 792, 796, 797, 798, 799, 800, 801, 802, 805, 807, 809, 812, 816, 819, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 846, 847, 848, 851, 852, 856, 858, 859, 861, 863, 864, 866, 867, 868, 873, 880, 881, 885, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 919, 921, 922, 932, 933, 953, 957, 978, 979, 981, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 999, 1001, 1002, 1003, 1004, 1005, 1009, 1010, 1014, 1016, 1028, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "find": [4, 5, 6, 12, 18, 41, 47, 48, 49, 50, 53, 54, 56, 58, 66, 74, 81, 82, 96, 98, 100, 101, 107, 124, 133, 153, 157, 159, 161, 172, 185, 189, 190, 203, 209, 222, 224, 226, 227, 233, 240, 252, 261, 262, 263, 273, 288, 293, 294, 295, 312, 317, 323, 342, 343, 344, 348, 353, 354, 358, 369, 379, 380, 382, 383, 384, 387, 388, 391, 394, 395, 396, 397, 406, 409, 411, 412, 414, 416, 417, 418, 420, 441, 444, 445, 446, 450, 451, 452, 453, 462, 531, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 558, 565, 582, 589, 610, 611, 647, 650, 653, 654, 655, 656, 658, 659, 671, 688, 707, 728, 729, 737, 781, 782, 783, 786, 787, 793, 798, 812, 843, 844, 845, 847, 849, 851, 852, 853, 874, 875, 880, 893, 894, 895, 909, 910, 912, 918, 937, 938, 940, 978, 979, 981, 984, 985, 986, 988, 989, 990, 993, 995, 999, 1003, 1004, 1005, 1008, 1010, 1014, 1016, 1018, 1020, 1021, 1023, 1024, 1025, 1031, 1038, 1039, 1040, 1041, 1043, 1045, 1046], "function": [4, 5, 6, 7, 8, 13, 15, 21, 22, 38, 47, 54, 55, 56, 58, 60, 67, 71, 72, 73, 76, 80, 96, 99, 101, 106, 111, 118, 119, 123, 124, 125, 126, 127, 128, 139, 146, 153, 156, 157, 158, 159, 160, 161, 166, 168, 170, 171, 172, 174, 179, 180, 183, 185, 188, 194, 196, 197, 198, 199, 201, 202, 207, 208, 209, 214, 217, 218, 219, 220, 222, 231, 233, 236, 237, 240, 241, 243, 244, 252, 260, 262, 263, 264, 265, 270, 271, 276, 280, 285, 301, 304, 307, 314, 317, 318, 320, 321, 323, 332, 337, 338, 339, 340, 341, 342, 344, 346, 348, 350, 353, 354, 359, 364, 368, 369, 371, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 394, 395, 396, 399, 400, 403, 407, 409, 410, 411, 412, 414, 415, 417, 418, 420, 421, 437, 440, 443, 444, 445, 447, 448, 450, 452, 454, 457, 458, 459, 460, 461, 464, 465, 468, 469, 471, 472, 474, 478, 488, 489, 491, 492, 495, 497, 503, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 572, 575, 581, 582, 588, 589, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 607, 608, 609, 610, 611, 615, 617, 619, 620, 622, 623, 627, 628, 631, 632, 633, 634, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 698, 699, 700, 702, 703, 704, 706, 711, 712, 716, 719, 721, 722, 723, 727, 731, 733, 734, 737, 739, 740, 741, 749, 754, 756, 760, 761, 762, 764, 767, 770, 773, 777, 778, 779, 780, 781, 782, 784, 788, 791, 792, 793, 795, 796, 797, 798, 800, 801, 802, 803, 804, 809, 810, 812, 813, 814, 815, 816, 817, 818, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 870, 871, 873, 877, 878, 879, 880, 881, 882, 885, 887, 890, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 916, 919, 928, 930, 931, 932, 937, 938, 948, 949, 955, 956, 957, 959, 960, 963, 964, 973, 978, 979, 980, 982, 984, 986, 987, 990, 992, 993, 994, 995, 996, 997, 999, 1002, 1003, 1005, 1009, 1010, 1011, 1012, 1016, 1019, 1020, 1021, 1025, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "abl": [4, 5, 9, 25, 48, 56, 62, 83, 87, 100, 101, 130, 159, 171, 174, 185, 190, 201, 217, 219, 226, 268, 273, 340, 364, 368, 369, 370, 376, 380, 382, 384, 386, 387, 394, 409, 411, 413, 417, 485, 503, 534, 826, 873, 978, 979, 985, 988, 989, 990, 995, 999, 1002, 1005, 1006, 1010, 1016, 1024, 1025, 1037, 1038, 1042], "gbrt_predict": 4, "one_hot_poly_predict": 4, "cyclic_spline_poly_predict": 4, "grow": [4, 13, 40, 177, 185, 287, 348, 355, 368, 405, 411, 417, 557, 558, 559, 560, 564, 565, 566, 808, 841, 842, 909, 910, 911, 912, 978, 989, 992, 1005, 1014, 1019, 1023, 1034, 1035], "depth": [4, 118, 123, 127, 129, 134, 280, 358, 360, 361, 362, 368, 380, 382, 386, 395, 416, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 841, 842, 846, 909, 910, 911, 912, 913, 915, 943, 994, 995, 1005, 1033, 1034, 1042], "accuraci": [4, 6, 7, 8, 17, 26, 31, 32, 33, 34, 71, 72, 73, 74, 113, 119, 120, 124, 125, 131, 146, 147, 149, 154, 174, 177, 201, 205, 209, 216, 217, 249, 260, 261, 262, 263, 264, 266, 268, 277, 280, 287, 293, 294, 295, 304, 309, 312, 323, 327, 328, 330, 340, 343, 344, 348, 364, 368, 384, 395, 396, 408, 409, 413, 416, 417, 418, 426, 437, 449, 469, 471, 472, 478, 532, 534, 541, 549, 550, 551, 553, 555, 557, 558, 559, 561, 564, 565, 567, 569, 610, 634, 658, 659, 666, 668, 671, 674, 675, 676, 692, 697, 703, 708, 713, 718, 733, 737, 742, 753, 762, 786, 793, 795, 825, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 843, 848, 850, 851, 858, 896, 897, 901, 903, 906, 909, 911, 937, 938, 978, 983, 984, 985, 986, 990, 992, 993, 997, 1001, 1003, 1005, 1020, 1025, 1039, 1040], "On": [4, 12, 13, 18, 27, 68, 72, 73, 86, 87, 101, 113, 116, 118, 120, 121, 126, 129, 130, 133, 136, 145, 147, 157, 158, 171, 172, 173, 182, 189, 190, 203, 205, 231, 232, 233, 234, 236, 237, 240, 241, 242, 243, 244, 247, 249, 252, 257, 258, 259, 260, 262, 263, 264, 265, 267, 269, 274, 304, 307, 309, 311, 312, 313, 318, 319, 321, 322, 324, 329, 340, 348, 362, 368, 380, 383, 384, 386, 394, 396, 403, 405, 407, 409, 413, 414, 416, 418, 419, 643, 656, 691, 734, 760, 866, 882, 978, 982, 985, 988, 989, 991, 995, 1002, 1004, 1020, 1023], "contrari": [4, 14, 171, 223, 227, 240, 247, 265, 307, 353, 376, 409, 496, 544, 606, 815, 882, 985, 991, 995], "significantli": [4, 25, 26, 38, 79, 80, 113, 119, 124, 126, 150, 171, 172, 173, 201, 205, 209, 217, 219, 262, 285, 318, 319, 354, 355, 364, 369, 386, 409, 414, 416, 417, 422, 469, 474, 479, 480, 538, 540, 547, 558, 565, 646, 647, 652, 653, 660, 661, 662, 663, 684, 692, 841, 842, 981, 985, 986, 992, 997, 1004, 1031, 1033, 1034, 1038, 1039, 1044, 1045, 1046], "over": [4, 7, 8, 9, 17, 21, 25, 27, 28, 32, 38, 51, 56, 57, 73, 75, 96, 116, 119, 124, 129, 145, 149, 153, 161, 165, 170, 172, 183, 195, 201, 209, 219, 230, 240, 262, 263, 265, 267, 269, 270, 271, 274, 290, 298, 301, 302, 309, 320, 321, 323, 327, 353, 354, 368, 369, 370, 377, 378, 381, 382, 383, 384, 388, 395, 396, 405, 407, 408, 409, 410, 413, 414, 415, 416, 417, 421, 446, 449, 464, 472, 509, 533, 534, 536, 537, 538, 539, 546, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 588, 589, 591, 594, 602, 632, 633, 634, 644, 645, 646, 647, 652, 653, 658, 660, 661, 662, 663, 665, 666, 667, 668, 676, 677, 678, 685, 686, 697, 716, 718, 738, 762, 787, 792, 796, 798, 801, 802, 804, 809, 810, 812, 820, 822, 823, 824, 825, 826, 828, 857, 858, 859, 860, 876, 880, 901, 909, 911, 918, 927, 957, 978, 985, 986, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1002, 1003, 1004, 1005, 1009, 1010, 1014, 1021, 1024, 1031, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "compet": 4, "access": [4, 50, 79, 124, 240, 248, 253, 324, 353, 362, 368, 369, 382, 383, 384, 390, 394, 396, 397, 405, 409, 411, 412, 416, 417, 419, 450, 457, 464, 536, 567, 568, 569, 570, 617, 859, 860, 861, 916, 978, 985, 988, 989, 995, 996, 997, 1003, 1004, 1010, 1014, 1016, 1024, 1025, 1031, 1033, 1037, 1038, 1039, 1040, 1043, 1045, 1046, 1047], "requir": [4, 7, 14, 26, 46, 47, 49, 54, 56, 58, 59, 68, 71, 91, 100, 102, 103, 118, 119, 123, 124, 127, 129, 133, 150, 172, 185, 190, 198, 201, 222, 224, 231, 234, 237, 240, 244, 263, 271, 273, 285, 287, 307, 312, 319, 320, 353, 354, 355, 376, 379, 380, 382, 384, 386, 388, 390, 394, 396, 397, 399, 400, 405, 408, 409, 410, 411, 413, 414, 416, 417, 418, 420, 426, 437, 438, 439, 444, 446, 450, 452, 457, 462, 464, 467, 469, 482, 483, 484, 496, 508, 521, 524, 535, 541, 549, 550, 551, 553, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 572, 579, 580, 581, 610, 611, 619, 627, 632, 633, 634, 643, 658, 659, 666, 667, 668, 671, 674, 675, 676, 677, 678, 686, 689, 691, 692, 693, 695, 699, 723, 728, 729, 741, 746, 748, 751, 762, 783, 786, 798, 801, 802, 805, 807, 812, 824, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 851, 852, 853, 858, 861, 862, 863, 865, 875, 876, 877, 881, 889, 893, 894, 896, 897, 901, 902, 903, 906, 909, 910, 911, 912, 946, 949, 955, 975, 978, 983, 984, 985, 986, 989, 990, 991, 992, 993, 995, 996, 999, 1003, 1004, 1005, 1010, 1016, 1023, 1025, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "geograph": [4, 11, 298, 377, 498], "repartit": 4, "immobil": 4, "quantit": [4, 5, 6, 13, 26, 62, 126, 136, 150, 258, 276, 379, 1021], "predictionerrordisplai": [4, 13, 76, 133, 171, 258, 322, 989, 1046], "nrow": [4, 5, 31, 33, 35, 58, 67, 74, 96, 162, 172, 201, 203, 209, 219, 222, 223, 226, 240, 264, 265, 285, 309, 311, 312, 322, 328, 347, 348, 1021], "ncol": [4, 5, 13, 31, 33, 35, 54, 58, 67, 96, 101, 107, 124, 172, 201, 202, 203, 209, 219, 222, 223, 233, 240, 258, 264, 265, 273, 285, 288, 302, 308, 309, 311, 312, 322, 347, 348, 354], "sharex": [4, 7, 15, 35, 74, 93, 101, 134, 162, 172, 203, 264, 290, 330, 1021], "sharei": [4, 13, 35, 76, 93, 101, 107, 134, 162, 172, 201, 203, 209, 264, 273, 290, 308, 313, 347, 348, 354], "npolynomi": 4, "ntree": 4, "plot_kind": 4, "actual_vs_predict": [4, 76, 133, 171, 258, 322, 701], "residual_vs_predict": [4, 13, 76, 258, 322, 701], "axis_idx": 4, "kind": [4, 9, 12, 13, 25, 26, 76, 105, 119, 133, 145, 171, 172, 252, 256, 258, 271, 314, 319, 322, 337, 340, 353, 369, 370, 375, 377, 382, 384, 388, 394, 395, 407, 409, 412, 413, 414, 416, 417, 418, 488, 489, 503, 508, 509, 521, 524, 588, 632, 633, 701, 930, 985, 991, 996, 1005, 1034, 1043, 1045, 1046, 1047], "enumer": [4, 8, 10, 11, 12, 14, 15, 18, 20, 26, 28, 31, 32, 38, 40, 41, 42, 43, 44, 45, 46, 51, 56, 60, 61, 62, 63, 71, 80, 82, 83, 87, 97, 99, 106, 116, 119, 124, 125, 127, 128, 139, 155, 157, 162, 174, 181, 183, 192, 201, 223, 224, 227, 230, 235, 239, 240, 247, 248, 249, 250, 252, 253, 257, 264, 265, 271, 272, 290, 294, 295, 297, 304, 309, 310, 327, 328, 330, 332, 338, 340, 347, 348, 353, 359, 377, 559, 560, 564, 565, 780, 799, 800, 803, 805, 806, 807, 808, 811, 813, 814, 815, 816, 817, 818, 819], "pred": [4, 7, 11, 13, 33, 349, 353, 377, 648, 669, 680, 697, 702, 706, 718, 728, 729, 737, 782, 783, 786, 787, 989], "zip": [4, 5, 8, 9, 12, 13, 25, 27, 32, 33, 35, 38, 39, 41, 43, 46, 50, 56, 64, 65, 66, 76, 87, 93, 96, 97, 100, 105, 106, 107, 115, 117, 124, 133, 134, 159, 165, 168, 171, 172, 173, 186, 192, 193, 201, 209, 210, 222, 234, 240, 248, 252, 253, 260, 264, 265, 266, 269, 271, 285, 288, 290, 293, 301, 302, 303, 309, 311, 312, 313, 331, 337, 348, 349, 359, 380, 416, 825, 999, 1025], "disp": [4, 31, 33, 115, 129, 130, 256, 265, 277, 288, 312, 318, 324, 337, 342, 438, 631, 697, 700, 701, 850], "from_predict": [4, 13, 33, 76, 133, 171, 240, 258, 269, 271, 320, 327, 353, 389, 438, 631, 698, 718, 726, 781, 783, 786, 787, 788, 989, 1028, 1044, 1045, 1046, 1047], "y_true": [4, 13, 20, 33, 60, 76, 113, 133, 156, 201, 211, 219, 240, 250, 330, 382, 432, 438, 439, 465, 482, 483, 484, 552, 554, 556, 557, 558, 560, 562, 564, 565, 568, 570, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 697, 698, 700, 701, 702, 703, 707, 708, 709, 712, 713, 718, 720, 721, 722, 723, 725, 726, 727, 728, 729, 733, 734, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 781, 782, 783, 784, 786, 787, 788, 789, 790, 793, 795, 834, 835, 844, 852, 859, 902, 904, 907, 910, 912, 989, 1032, 1037, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1048], "y_pred": [4, 6, 7, 13, 26, 31, 33, 35, 45, 58, 63, 71, 76, 113, 126, 127, 133, 147, 171, 201, 203, 208, 211, 216, 218, 219, 230, 231, 240, 258, 260, 265, 292, 296, 304, 312, 330, 331, 364, 382, 389, 396, 416, 432, 439, 465, 482, 483, 484, 549, 552, 554, 556, 557, 558, 560, 562, 564, 565, 567, 568, 570, 611, 631, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 678, 679, 680, 697, 698, 700, 701, 702, 703, 708, 712, 713, 718, 721, 722, 723, 727, 728, 729, 733, 737, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 782, 783, 784, 786, 787, 789, 790, 795, 798, 801, 802, 812, 822, 832, 834, 835, 844, 852, 859, 861, 901, 902, 903, 904, 905, 906, 907, 910, 912, 989, 991, 1021, 1037, 1038, 1040, 1042, 1046, 1047, 1048], "scatter_kwarg": [4, 13, 76, 133, 171, 701], "set_xtick": [4, 8, 10, 17, 32, 44, 61, 65, 107, 131, 135, 172, 174, 192, 217, 235, 247, 273, 274, 283, 301, 303, 309, 310, 337], "num": [4, 12, 72, 150, 153, 158, 159, 160, 172, 173, 203, 269, 270, 321, 323, 324, 632], "set_ytick": [4, 17, 32, 44, 61, 65, 107, 131, 165, 166, 174, 192, 217, 247, 273, 301, 303, 309, 310, 337, 355], "loc": [4, 7, 8, 9, 25, 27, 34, 41, 73, 76, 80, 81, 82, 86, 91, 98, 100, 104, 105, 106, 113, 115, 116, 117, 125, 126, 127, 128, 130, 133, 135, 136, 140, 146, 153, 154, 160, 162, 171, 172, 183, 186, 191, 195, 201, 202, 203, 204, 207, 208, 211, 214, 215, 218, 219, 225, 233, 234, 235, 236, 238, 240, 249, 250, 257, 260, 261, 262, 265, 266, 269, 272, 275, 276, 288, 290, 291, 302, 308, 311, 312, 318, 321, 324, 329, 339, 342, 344, 347, 348, 353, 359, 361, 812, 878, 890], "upper": [4, 7, 9, 25, 73, 76, 80, 81, 82, 115, 116, 117, 125, 126, 127, 128, 133, 135, 146, 157, 159, 162, 171, 195, 201, 207, 208, 211, 215, 218, 219, 234, 238, 239, 261, 262, 263, 290, 291, 302, 312, 330, 339, 342, 344, 347, 409, 415, 463, 588, 589, 591, 595, 613, 614, 615, 617, 619, 620, 622, 623, 625, 632, 633, 635, 637, 650, 654, 677, 734, 874, 875, 903, 904, 905, 925, 988, 989, 992, 999, 1003, 1004, 1005, 1039], "bbox_to_anchor": [4, 38, 162, 267, 347], "set_aspect": [4, 156, 212, 249, 349], "equal": [4, 11, 12, 27, 35, 38, 40, 54, 61, 81, 87, 113, 126, 156, 171, 202, 203, 212, 218, 241, 249, 252, 256, 260, 262, 271, 295, 309, 313, 340, 342, 349, 354, 377, 378, 382, 384, 396, 406, 407, 409, 413, 414, 416, 417, 422, 437, 440, 441, 442, 443, 445, 447, 449, 454, 459, 460, 463, 469, 474, 479, 480, 503, 512, 515, 519, 532, 533, 534, 539, 541, 543, 544, 549, 550, 551, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 588, 593, 594, 597, 599, 600, 607, 608, 625, 628, 629, 632, 633, 634, 635, 637, 641, 642, 645, 649, 658, 659, 671, 699, 703, 718, 720, 728, 782, 786, 787, 793, 795, 798, 799, 801, 802, 811, 812, 816, 822, 829, 833, 834, 841, 842, 843, 844, 849, 850, 851, 852, 853, 858, 859, 864, 865, 866, 873, 876, 879, 880, 881, 882, 884, 891, 898, 901, 902, 908, 909, 910, 911, 912, 927, 938, 964, 970, 983, 985, 989, 990, 992, 993, 995, 999, 1003, 1004, 1005, 1024, 1025, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "adjust": [4, 9, 18, 37, 39, 50, 59, 69, 79, 113, 126, 145, 168, 205, 230, 235, 243, 263, 280, 317, 331, 348, 354, 389, 409, 410, 414, 416, 417, 524, 553, 554, 557, 559, 561, 562, 564, 658, 659, 666, 668, 674, 675, 676, 704, 705, 708, 714, 715, 754, 756, 785, 794, 836, 837, 839, 840, 871, 893, 894, 901, 902, 903, 906, 909, 911, 927, 988, 989, 993, 999, 1011, 1023, 1028, 1031, 1037, 1047], "box": [4, 10, 31, 56, 172, 173, 223, 280, 307, 311, 389, 414, 416, 512, 555, 556, 877, 889, 913, 915, 989, 990, 996, 999, 1005, 1009, 1016, 1039, 1047], "show": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 142, 145, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 161, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 324, 327, 328, 329, 330, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 358, 359, 360, 361, 362, 369, 370, 382, 388, 394, 395, 399, 400, 406, 407, 411, 413, 414, 415, 416, 418, 419, 438, 502, 559, 593, 594, 631, 632, 697, 698, 700, 701, 702, 713, 804, 820, 843, 861, 913, 914, 915, 978, 981, 983, 984, 986, 988, 989, 991, 992, 993, 995, 996, 999, 1003, 1004, 1010, 1020, 1021, 1025, 1033, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1045, 1047, 1048], "seem": [4, 9, 13, 47, 56, 126, 172, 201, 226, 230, 263, 280, 302, 311, 348, 353, 354, 381, 382, 387, 413, 501, 985, 989], "regim": [4, 396, 901, 902, 988], "overal": [4, 44, 49, 113, 116, 119, 124, 133, 158, 219, 259, 285, 312, 313, 354, 368, 381, 382, 388, 406, 407, 416, 447, 449, 464, 471, 472, 478, 549, 882, 986, 989, 1005, 1014, 1041], "closer": [4, 28, 38, 99, 101, 132, 150, 153, 172, 180, 205, 344, 355, 407, 409, 414, 449, 553, 628, 712, 843, 844, 849, 851, 852, 853, 1004, 1038], "diagon": [4, 26, 41, 83, 86, 219, 240, 249, 252, 253, 256, 340, 406, 409, 411, 419, 453, 471, 472, 478, 481, 511, 513, 527, 532, 550, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 650, 651, 654, 655, 656, 682, 683, 701, 715, 791, 796, 797, 845, 853, 981, 983, 985, 988, 989, 992, 999, 1037, 1039, 1040, 1041], "obtain": [4, 7, 9, 12, 13, 21, 28, 49, 56, 58, 59, 72, 75, 76, 101, 104, 113, 123, 126, 127, 131, 139, 150, 155, 157, 171, 172, 185, 201, 203, 205, 215, 226, 240, 247, 248, 249, 258, 262, 263, 264, 268, 271, 288, 312, 320, 338, 344, 354, 355, 362, 364, 377, 379, 384, 394, 396, 403, 407, 409, 411, 412, 414, 416, 417, 418, 419, 437, 442, 469, 496, 532, 533, 555, 556, 557, 558, 559, 560, 563, 564, 565, 593, 606, 614, 645, 659, 661, 666, 668, 672, 674, 676, 677, 687, 708, 712, 725, 738, 755, 792, 804, 820, 826, 829, 830, 833, 847, 858, 878, 890, 903, 906, 909, 910, 938, 979, 981, 983, 985, 986, 988, 989, 990, 992, 993, 995, 996, 999, 1003, 1004, 1037, 1039, 1042, 1044, 1045, 1046, 1047, 1048], "slightli": [4, 26, 65, 83, 116, 119, 123, 126, 129, 133, 150, 153, 154, 155, 173, 180, 201, 219, 225, 227, 237, 240, 270, 285, 317, 337, 355, 381, 382, 394, 407, 409, 416, 417, 419, 421, 446, 588, 589, 591, 638, 658, 801, 802, 901, 903, 906, 937, 938, 978, 985, 999, 1003, 1004, 1040, 1044, 1045, 1047], "cost": [4, 40, 99, 119, 153, 168, 177, 222, 235, 264, 271, 317, 340, 354, 355, 357, 362, 363, 382, 388, 390, 394, 409, 416, 478, 500, 537, 538, 539, 546, 557, 558, 559, 560, 564, 565, 602, 610, 619, 627, 646, 647, 652, 653, 660, 661, 662, 663, 668, 672, 674, 676, 678, 687, 688, 692, 827, 901, 902, 903, 906, 909, 910, 911, 912, 938, 981, 985, 986, 989, 992, 1002, 1003, 1004, 1011, 1012, 1027, 1037, 1040, 1041], "durat": [4, 8, 201, 219, 240, 287, 355, 369, 955, 956, 985], "regressor": [4, 76, 87, 127, 132, 133, 136, 153, 158, 166, 168, 171, 179, 181, 183, 185, 201, 202, 204, 207, 218, 219, 220, 237, 265, 276, 290, 312, 318, 319, 368, 382, 384, 394, 396, 407, 410, 419, 432, 436, 465, 482, 483, 484, 485, 524, 551, 552, 553, 554, 555, 556, 557, 558, 560, 562, 565, 566, 567, 568, 569, 570, 605, 606, 609, 611, 632, 633, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 678, 679, 701, 829, 830, 833, 834, 835, 844, 852, 857, 858, 859, 862, 868, 876, 881, 882, 902, 904, 907, 909, 910, 911, 912, 915, 930, 932, 978, 979, 985, 989, 990, 992, 997, 1003, 1009, 1011, 1012, 1020, 1027, 1031, 1032, 1036, 1037, 1038, 1040, 1041, 1044, 1045, 1046, 1048], "mlpregressor": [4, 172, 241, 370, 857, 858, 993, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "hidden": [4, 172, 303, 304, 382, 390, 406, 414, 857, 858, 859, 993, 994, 1009, 1031, 1042], "layer": [4, 32, 122, 131, 142, 155, 157, 168, 208, 217, 241, 300, 303, 304, 305, 309, 310, 332, 345, 349, 350, 368, 390, 416, 514, 515, 522, 567, 827, 857, 858, 859, 862, 881, 994, 1011, 1012, 1027, 1037], "cyclic": [4, 646, 647, 652, 653, 660, 661, 662, 663, 1043], "within": [4, 21, 61, 118, 120, 121, 124, 132, 147, 149, 150, 197, 202, 203, 213, 219, 241, 260, 261, 265, 275, 307, 308, 319, 338, 341, 344, 348, 355, 364, 368, 377, 382, 386, 391, 394, 396, 397, 406, 407, 408, 409, 410, 413, 415, 416, 420, 444, 448, 461, 463, 464, 466, 469, 474, 515, 549, 567, 568, 569, 570, 593, 594, 632, 692, 696, 699, 710, 724, 780, 796, 797, 803, 804, 816, 817, 825, 826, 841, 842, 843, 844, 849, 851, 852, 853, 860, 861, 862, 874, 882, 886, 887, 889, 890, 891, 892, 903, 904, 905, 906, 907, 909, 910, 911, 912, 978, 983, 985, 986, 992, 995, 999, 1002, 1004, 1005, 1010, 1014, 1016, 1020, 1023, 1025, 1033, 1034, 1038, 1039, 1044, 1045, 1047, 1048], "finer": [4, 13, 38, 287, 340, 369, 409, 413, 978, 992, 1041], "resolut": [4, 11, 18, 106, 172, 297, 298, 340, 397, 407, 1016, 1041], "taken": [4, 7, 32, 43, 54, 56, 128, 150, 158, 171, 234, 235, 250, 268, 280, 309, 377, 379, 381, 382, 386, 396, 403, 408, 409, 413, 417, 421, 440, 533, 561, 562, 583, 584, 646, 647, 650, 652, 653, 654, 658, 659, 660, 661, 662, 663, 677, 679, 681, 684, 695, 874, 875, 895, 898, 904, 905, 948, 989, 991, 999, 1001, 1037, 1040, 1043, 1044], "everi": [4, 96, 165, 199, 202, 223, 236, 248, 253, 271, 320, 324, 364, 377, 380, 382, 384, 386, 390, 396, 409, 411, 413, 414, 417, 440, 454, 508, 531, 536, 539, 545, 557, 559, 560, 561, 562, 564, 590, 591, 603, 646, 647, 649, 652, 653, 659, 660, 661, 662, 663, 664, 665, 666, 668, 672, 673, 674, 675, 676, 685, 686, 687, 692, 696, 753, 770, 778, 779, 811, 850, 909, 911, 913, 915, 927, 982, 984, 989, 990, 991, 999, 1005, 1014, 1020, 1031, 1035, 1037, 1040, 1044, 1048], "offer": [4, 119, 384, 390, 394, 395, 399, 413, 414, 416, 417, 978, 979, 990, 993, 1005, 1009, 1010, 1014, 1037], "view": [4, 17, 43, 47, 79, 98, 172, 198, 242, 368, 370, 382, 409, 417, 536, 645, 657, 841, 842, 916, 985, 986], "gaussian": [4, 5, 7, 9, 17, 27, 28, 31, 32, 35, 45, 47, 48, 56, 58, 62, 66, 79, 80, 81, 82, 83, 92, 93, 97, 98, 99, 106, 114, 115, 122, 126, 129, 131, 142, 163, 166, 180, 183, 185, 189, 191, 211, 212, 213, 214, 230, 234, 236, 249, 250, 254, 273, 290, 295, 298, 301, 310, 311, 314, 330, 332, 337, 344, 345, 346, 371, 374, 378, 384, 387, 396, 409, 411, 414, 415, 421, 452, 469, 470, 471, 472, 473, 474, 475, 476, 496, 504, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 530, 532, 544, 549, 550, 563, 610, 611, 613, 614, 615, 617, 618, 619, 622, 623, 625, 627, 643, 644, 672, 677, 680, 703, 723, 740, 751, 775, 796, 797, 798, 812, 836, 837, 838, 839, 840, 841, 842, 846, 877, 881, 889, 893, 894, 895, 983, 985, 986, 987, 995, 1011, 1012, 1014, 1024, 1026, 1027, 1031, 1032, 1034, 1035, 1037, 1038, 1039, 1041, 1043, 1045], "random": [4, 5, 6, 7, 11, 12, 13, 14, 21, 22, 25, 26, 27, 28, 32, 34, 35, 38, 40, 41, 45, 46, 49, 51, 53, 55, 56, 58, 59, 61, 62, 63, 65, 66, 67, 72, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 93, 97, 98, 99, 102, 103, 104, 112, 113, 114, 116, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 133, 136, 137, 142, 145, 146, 149, 153, 154, 157, 159, 160, 162, 165, 166, 168, 169, 170, 175, 177, 180, 181, 182, 183, 185, 190, 191, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 210, 214, 215, 218, 219, 222, 223, 225, 226, 227, 229, 230, 235, 236, 237, 239, 240, 245, 247, 248, 250, 251, 252, 253, 255, 257, 259, 260, 261, 262, 263, 265, 267, 269, 271, 272, 273, 274, 276, 278, 283, 285, 290, 291, 292, 297, 301, 308, 310, 311, 314, 318, 319, 321, 323, 327, 328, 331, 332, 339, 340, 342, 343, 345, 346, 347, 350, 353, 354, 360, 361, 368, 369, 371, 374, 378, 385, 387, 394, 395, 396, 400, 404, 405, 407, 409, 417, 418, 434, 440, 443, 447, 449, 451, 452, 453, 454, 458, 459, 460, 462, 464, 469, 470, 471, 472, 473, 474, 475, 476, 488, 489, 490, 491, 492, 495, 496, 497, 502, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 535, 536, 538, 539, 540, 541, 544, 547, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 573, 582, 583, 584, 589, 607, 608, 610, 611, 627, 630, 632, 634, 639, 640, 641, 642, 643, 646, 647, 649, 650, 652, 653, 654, 658, 660, 661, 662, 663, 670, 671, 672, 676, 677, 678, 679, 689, 690, 691, 692, 693, 694, 695, 701, 704, 705, 708, 730, 742, 780, 792, 796, 797, 798, 800, 801, 802, 803, 810, 812, 813, 814, 815, 816, 817, 818, 819, 826, 827, 832, 834, 835, 836, 837, 838, 840, 841, 842, 846, 850, 857, 858, 859, 861, 864, 866, 875, 878, 882, 890, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 906, 907, 909, 910, 911, 912, 924, 937, 938, 960, 963, 979, 981, 984, 986, 988, 989, 993, 994, 995, 997, 999, 1004, 1005, 1009, 1010, 1011, 1012, 1016, 1020, 1021, 1023, 1024, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "constant": [4, 106, 116, 156, 160, 166, 171, 189, 202, 203, 205, 219, 232, 237, 242, 265, 297, 302, 304, 308, 310, 318, 348, 350, 364, 374, 384, 391, 396, 406, 416, 419, 432, 446, 465, 482, 483, 484, 511, 513, 534, 538, 540, 547, 549, 550, 551, 552, 554, 556, 558, 560, 562, 565, 568, 570, 590, 606, 609, 611, 613, 627, 630, 632, 633, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 676, 677, 678, 679, 680, 687, 689, 693, 695, 721, 722, 723, 727, 774, 776, 784, 834, 835, 844, 852, 858, 859, 866, 877, 880, 889, 901, 902, 903, 904, 905, 906, 907, 908, 910, 912, 981, 983, 985, 986, 989, 991, 992, 999, 1003, 1005, 1027, 1034, 1039, 1041, 1043, 1044, 1045, 1047], "varianc": [4, 5, 13, 28, 45, 56, 58, 63, 74, 79, 81, 86, 87, 91, 96, 97, 98, 101, 104, 105, 107, 112, 128, 137, 160, 162, 168, 171, 179, 181, 183, 185, 190, 191, 197, 201, 203, 206, 219, 220, 252, 259, 262, 265, 271, 272, 275, 294, 301, 307, 312, 354, 364, 374, 378, 391, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 421, 441, 445, 449, 463, 521, 524, 532, 533, 534, 541, 544, 549, 550, 555, 556, 558, 559, 560, 565, 603, 607, 608, 611, 625, 643, 644, 645, 652, 656, 657, 660, 662, 672, 673, 674, 675, 676, 687, 710, 727, 784, 796, 797, 839, 850, 865, 871, 877, 879, 881, 887, 889, 891, 892, 910, 912, 964, 965, 966, 970, 983, 984, 985, 987, 992, 993, 994, 1001, 1003, 1004, 1005, 1006, 1011, 1012, 1021, 1023, 1024, 1027, 1031, 1039, 1041, 1042, 1043, 1044, 1045, 1046], "poisson": [4, 13, 168, 179, 220, 238, 378, 416, 464, 465, 496, 523, 552, 558, 562, 565, 648, 669, 672, 680, 706, 723, 744, 748, 749, 751, 827, 861, 862, 865, 866, 874, 875, 876, 881, 910, 912, 942, 985, 1005, 1011, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "gamma": [4, 5, 6, 7, 9, 11, 17, 32, 33, 101, 134, 142, 177, 215, 230, 235, 236, 260, 262, 264, 267, 273, 277, 319, 327, 328, 330, 332, 337, 339, 340, 343, 344, 346, 347, 350, 412, 414, 419, 452, 535, 562, 619, 620, 639, 640, 641, 643, 644, 645, 648, 680, 685, 691, 723, 746, 751, 758, 765, 774, 775, 776, 796, 809, 812, 896, 897, 898, 903, 904, 905, 906, 907, 978, 981, 984, 985, 987, 1002, 1004, 1016, 1020, 1021, 1023, 1031, 1032, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1045, 1046, 1047], "achiev": [4, 12, 18, 20, 28, 32, 99, 113, 122, 124, 131, 161, 177, 201, 209, 259, 262, 269, 312, 330, 340, 343, 344, 348, 353, 364, 368, 370, 376, 377, 379, 384, 388, 394, 396, 406, 407, 409, 413, 414, 416, 417, 553, 558, 565, 640, 649, 676, 678, 707, 728, 729, 737, 739, 762, 782, 783, 786, 801, 802, 837, 881, 978, 979, 981, 985, 989, 999, 1002, 1004, 1013, 1025, 1044], "gridsearchcv": [4, 55, 70, 72, 74, 75, 77, 79, 100, 104, 119, 168, 236, 242, 252, 255, 260, 261, 262, 263, 267, 270, 273, 278, 280, 287, 289, 304, 309, 319, 323, 324, 340, 344, 364, 369, 384, 394, 396, 400, 410, 413, 419, 502, 520, 540, 541, 575, 599, 607, 653, 703, 741, 809, 812, 861, 871, 901, 909, 957, 978, 985, 989, 993, 1003, 1004, 1009, 1010, 1011, 1020, 1021, 1025, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048], "tweedieregressor": [4, 318, 321, 648, 669, 985, 1042, 1045, 1046], "power": [4, 7, 18, 119, 124, 170, 202, 219, 253, 265, 270, 289, 307, 308, 311, 327, 337, 368, 369, 395, 407, 409, 412, 415, 416, 417, 420, 444, 482, 483, 484, 532, 535, 541, 544, 630, 680, 694, 723, 746, 748, 751, 843, 844, 851, 852, 854, 855, 876, 877, 878, 889, 890, 937, 938, 985, 986, 989, 997, 999, 1003, 1004, 1014, 1034, 1037, 1039, 1041, 1042, 1044, 1048], "param_grid": [4, 6, 72, 73, 74, 75, 119, 126, 236, 242, 252, 260, 261, 262, 266, 267, 270, 273, 280, 287, 309, 324, 340, 396, 400, 410, 416, 741, 798, 801, 809, 810, 957, 978, 989, 1020, 1021], "total": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 283, 284, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 359, 360, 361, 362, 363, 369, 376, 377, 379, 388, 396, 406, 409, 415, 417, 420, 432, 444, 465, 482, 483, 484, 488, 489, 490, 491, 492, 493, 494, 495, 497, 500, 501, 502, 504, 505, 510, 512, 514, 515, 519, 522, 523, 536, 544, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 568, 570, 583, 584, 590, 594, 596, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 676, 677, 678, 679, 697, 704, 705, 713, 728, 729, 730, 733, 737, 738, 756, 768, 782, 783, 786, 793, 794, 795, 798, 812, 822, 823, 824, 834, 835, 836, 837, 844, 846, 852, 859, 876, 880, 902, 904, 907, 909, 910, 911, 912, 938, 978, 985, 986, 989, 990, 991, 992, 999, 1003, 1004, 1005, 1011, 1021, 1025, 1032, 1037, 1039, 1047], "script": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 364, 369, 382, 383, 384, 385, 386, 388, 394, 396, 399, 417, 1010, 1013, 1025], "205": [4, 16, 1011], "second": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 364, 368, 377, 384, 386, 388, 396, 406, 409, 413, 414, 416, 417, 419, 464, 467, 488, 490, 491, 492, 494, 496, 500, 502, 504, 510, 553, 583, 588, 589, 590, 591, 621, 624, 631, 632, 699, 712, 716, 757, 758, 762, 763, 765, 766, 773, 774, 775, 776, 777, 780, 798, 801, 802, 812, 825, 831, 832, 835, 838, 849, 851, 852, 853, 858, 859, 978, 979, 983, 984, 985, 986, 989, 990, 991, 992, 993, 996, 999, 1000, 1005, 1016, 1022, 1024, 1046], "jupyt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 383, 384, 410, 468, 899, 1005, 1009, 1010, 1042, 1045], "plot_cyclical_feature_engin": [4, 16, 1011], "ipynb": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362], "py": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 170, 171, 172, 173, 174, 175, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 369, 380, 382, 383, 386, 388, 390, 396, 399, 417, 420, 440, 444, 454, 461, 498, 530, 644, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 876, 880, 933, 989, 1009, 1011, 1023, 1025, 1031, 1033, 1037, 1041, 1045], "interpol": [4, 14, 33, 41, 51, 52, 55, 59, 83, 90, 96, 99, 145, 157, 160, 168, 179, 180, 192, 217, 220, 233, 239, 271, 276, 289, 290, 297, 304, 328, 340, 346, 419, 635, 645, 653, 663, 672, 684, 700, 707, 844, 852, 862, 876, 880, 980, 985, 989, 999, 1011, 1038, 1043], "partial": [4, 8, 12, 51, 85, 86, 88, 98, 130, 168, 169, 175, 219, 229, 245, 319, 322, 379, 396, 398, 411, 412, 414, 416, 419, 464, 482, 483, 484, 485, 496, 501, 534, 536, 541, 562, 589, 632, 633, 657, 787, 827, 829, 830, 857, 858, 859, 862, 874, 875, 878, 881, 910, 986, 993, 1003, 1011, 1025, 1027, 1028, 1032, 1039, 1040, 1044], "individu": [4, 47, 61, 81, 112, 116, 126, 130, 132, 133, 137, 145, 162, 168, 169, 174, 175, 197, 201, 219, 231, 240, 241, 265, 267, 283, 317, 324, 344, 348, 369, 383, 386, 389, 391, 396, 398, 406, 410, 413, 416, 417, 437, 452, 462, 464, 496, 501, 503, 509, 555, 556, 559, 560, 562, 563, 565, 567, 568, 569, 570, 603, 609, 610, 632, 633, 643, 645, 657, 658, 659, 668, 671, 672, 673, 674, 675, 676, 677, 678, 687, 712, 719, 727, 733, 749, 750, 784, 789, 790, 798, 812, 829, 833, 834, 836, 837, 838, 839, 840, 859, 862, 870, 871, 873, 874, 875, 878, 880, 881, 886, 887, 888, 901, 902, 989, 990, 999, 1004, 1011, 1020, 1025, 1027, 1032, 1035, 1037, 1043, 1045, 1047], "common": [4, 13, 15, 18, 20, 99, 147, 150, 168, 169, 170, 175, 197, 205, 206, 257, 262, 269, 280, 319, 344, 353, 355, 362, 368, 371, 376, 382, 384, 390, 392, 394, 395, 398, 400, 406, 407, 408, 409, 410, 413, 415, 418, 419, 465, 467, 496, 590, 632, 653, 672, 673, 701, 745, 752, 768, 799, 800, 803, 813, 815, 816, 817, 818, 819, 824, 827, 862, 864, 872, 873, 874, 879, 881, 886, 887, 889, 890, 891, 892, 940, 978, 979, 985, 992, 995, 999, 1004, 1005, 1009, 1010, 1011, 1014, 1016, 1027, 1031, 1039, 1041, 1042, 1046], "pitfal": [4, 150, 168, 169, 170, 173, 175, 197, 205, 206, 262, 319, 371, 395, 396, 398, 413, 465, 467, 496, 653, 672, 673, 701, 752, 813, 824, 827, 862, 874, 881, 985, 1011, 1027], "coeffici": [4, 7, 10, 39, 50, 59, 61, 79, 80, 83, 96, 99, 139, 147, 153, 168, 169, 170, 175, 179, 183, 185, 186, 187, 188, 192, 194, 195, 196, 197, 198, 199, 203, 204, 216, 219, 220, 244, 262, 275, 303, 314, 319, 320, 321, 344, 348, 353, 354, 355, 368, 378, 382, 384, 396, 398, 408, 411, 412, 414, 418, 419, 422, 432, 452, 465, 467, 473, 475, 476, 478, 479, 480, 481, 482, 483, 484, 496, 524, 526, 527, 531, 535, 537, 539, 542, 543, 548, 552, 554, 556, 558, 560, 562, 565, 568, 570, 582, 589, 593, 597, 609, 611, 614, 627, 635, 636, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 701, 703, 716, 719, 728, 733, 737, 742, 749, 752, 774, 776, 784, 785, 791, 792, 795, 813, 824, 827, 834, 835, 844, 852, 859, 862, 874, 881, 901, 902, 903, 904, 905, 906, 907, 910, 912, 980, 983, 985, 1003, 1004, 1011, 1023, 1031, 1035, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1048], "galleri": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 369, 377, 382, 384, 396, 399, 402, 1011, 1021, 1031, 1035, 1038], "sphinx": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 382, 386, 396, 399, 402, 1025, 1031, 1038], "kernelpca": [5, 410, 414, 533, 534, 541, 544, 688, 690, 692, 867, 999, 1032, 1033, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "short": [5, 91, 123, 129, 192, 260, 303, 353, 382, 390, 413, 417, 421, 985, 986, 992, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "take": [5, 8, 13, 21, 31, 47, 54, 56, 58, 67, 76, 81, 93, 96, 113, 122, 153, 155, 158, 162, 171, 177, 184, 205, 209, 210, 226, 237, 249, 250, 257, 263, 267, 271, 272, 283, 285, 288, 291, 292, 293, 295, 296, 307, 321, 330, 336, 337, 340, 350, 354, 355, 359, 368, 369, 370, 376, 377, 382, 384, 387, 388, 389, 390, 394, 396, 397, 407, 409, 410, 412, 413, 414, 416, 417, 418, 419, 421, 437, 443, 446, 447, 449, 450, 452, 457, 458, 459, 461, 463, 469, 519, 533, 538, 539, 540, 546, 547, 581, 592, 595, 596, 598, 599, 600, 610, 611, 616, 620, 621, 624, 632, 643, 649, 671, 673, 674, 675, 676, 679, 691, 692, 699, 705, 707, 709, 719, 728, 729, 737, 741, 742, 755, 770, 773, 777, 778, 779, 780, 782, 783, 786, 787, 798, 799, 803, 804, 812, 816, 825, 843, 844, 845, 847, 849, 850, 851, 852, 853, 865, 875, 896, 897, 901, 902, 903, 904, 905, 906, 907, 925, 959, 978, 981, 985, 986, 988, 989, 990, 992, 994, 995, 996, 999, 1004, 1005, 1014, 1016, 1020, 1022, 1028, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "exact": [5, 7, 83, 101, 119, 158, 205, 235, 285, 324, 364, 368, 369, 376, 382, 384, 391, 394, 395, 396, 409, 416, 418, 434, 482, 483, 484, 488, 496, 534, 535, 541, 561, 562, 638, 642, 646, 692, 798, 812, 822, 823, 824, 903, 906, 978, 981, 985, 986, 995, 999, 1003, 1004, 1038, 1039, 1041], "usp": 5, "digit": [5, 12, 13, 30, 36, 37, 39, 40, 42, 44, 46, 47, 49, 50, 52, 54, 57, 58, 60, 62, 63, 69, 73, 74, 86, 89, 94, 99, 118, 138, 139, 143, 148, 150, 168, 191, 192, 208, 216, 217, 221, 222, 224, 226, 228, 234, 235, 239, 250, 256, 260, 261, 264, 267, 276, 277, 285, 289, 294, 295, 300, 302, 303, 305, 323, 326, 329, 333, 343, 354, 375, 382, 388, 409, 415, 416, 418, 441, 445, 447, 502, 541, 544, 549, 566, 658, 688, 689, 690, 691, 692, 697, 704, 705, 713, 717, 718, 736, 792, 794, 823, 827, 843, 850, 857, 861, 862, 871, 881, 887, 894, 897, 906, 913, 914, 915, 978, 984, 986, 989, 992, 994, 1002, 1011, 1016, 1020, 1023, 1024, 1027, 1035], "reproduc": [5, 12, 61, 113, 171, 177, 189, 271, 280, 304, 369, 371, 381, 382, 384, 385, 390, 394, 396, 403, 409, 413, 414, 417, 421, 440, 454, 460, 469, 474, 488, 491, 492, 495, 497, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 551, 553, 554, 555, 556, 559, 560, 561, 562, 563, 607, 608, 610, 611, 634, 639, 640, 641, 642, 646, 647, 650, 652, 653, 654, 660, 661, 662, 663, 666, 667, 668, 671, 676, 678, 679, 689, 690, 692, 693, 694, 792, 796, 797, 800, 801, 802, 803, 804, 810, 812, 813, 814, 815, 816, 817, 818, 825, 826, 827, 831, 832, 835, 846, 850, 857, 858, 859, 866, 878, 882, 890, 893, 894, 901, 902, 903, 906, 937, 938, 960, 963, 981, 1009, 1013, 1031, 1039, 1044, 1045], "sect": 5, "bak\u0131r": [5, 414, 535], "g\u00f6khan": [5, 414, 535], "h": [5, 6, 49, 59, 96, 97, 113, 114, 131, 150, 155, 171, 249, 290, 293, 301, 309, 321, 332, 336, 355, 379, 388, 407, 409, 411, 414, 415, 416, 417, 420, 444, 519, 532, 535, 538, 540, 547, 553, 567, 568, 582, 590, 607, 608, 689, 693, 704, 708, 756, 836, 840, 841, 842, 847, 857, 872, 881, 981, 983, 985, 986, 987, 989, 991, 993, 994, 1003, 1005, 1021, 1037, 1042, 1046, 1047, 1048], "jason": [5, 414, 535, 897, 1037, 1039, 1043, 1046], "weston": [5, 414, 535, 593, 594, 897], "bernhard": [5, 414, 535, 832, 867, 897, 990, 995, 1004, 1037], "sch\u00f6lkopf": [5, 414, 535, 867, 995, 999, 1004], "pre": [5, 72, 171, 190, 307, 355, 371, 380, 382, 396, 399, 411, 413, 414, 416, 417, 418, 420, 421, 443, 444, 447, 459, 533, 535, 690, 712, 762, 864, 906, 989, 994, 999, 1004, 1005, 1009, 1010, 1027, 1034, 1039, 1045], "advanc": [5, 130, 168, 172, 229, 231, 245, 262, 283, 370, 409, 414, 489, 501, 535, 632, 639, 782, 796, 850, 859, 862, 881, 910, 981, 989, 992, 999, 1011, 1014, 1028, 1033], "neural": [5, 6, 32, 262, 303, 371, 394, 396, 403, 413, 414, 416, 421, 533, 535, 538, 540, 547, 567, 568, 639, 645, 696, 740, 796, 850, 857, 858, 859, 867, 981, 985, 986, 987, 989, 992, 995, 999, 1003, 1005, 1009, 1012, 1014, 1021, 1026, 1027, 1031, 1043], "system": [5, 101, 185, 262, 269, 364, 368, 369, 370, 377, 379, 382, 383, 384, 385, 390, 394, 399, 409, 414, 416, 420, 444, 471, 472, 478, 535, 539, 543, 550, 639, 645, 650, 651, 654, 655, 656, 682, 683, 725, 755, 768, 796, 850, 896, 897, 957, 985, 989, 992, 1001, 1009, 1010, 1014, 1025, 1031, 1039, 1040], "2004": [5, 150, 262, 280, 377, 379, 409, 411, 414, 473, 535, 607, 608, 689, 693, 705, 742, 782, 897, 983, 985, 986, 991, 1004, 1023], "449": [5, 414, 535], "456": [5, 414, 535], "author": [5, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 21, 22, 25, 26, 27, 28, 31, 33, 38, 40, 41, 43, 47, 48, 49, 53, 54, 55, 57, 58, 62, 66, 67, 68, 71, 72, 73, 75, 76, 83, 96, 98, 100, 101, 102, 104, 107, 111, 114, 115, 116, 117, 118, 119, 125, 127, 128, 132, 133, 150, 153, 154, 156, 157, 158, 159, 160, 162, 166, 177, 180, 181, 183, 185, 186, 188, 189, 190, 192, 193, 194, 195, 201, 202, 203, 205, 206, 208, 209, 216, 217, 218, 219, 222, 223, 224, 225, 227, 230, 233, 235, 236, 238, 240, 247, 249, 250, 261, 263, 265, 266, 268, 275, 283, 285, 287, 290, 297, 298, 301, 304, 307, 308, 310, 311, 312, 327, 328, 329, 330, 332, 348, 353, 354, 355, 376, 382, 386, 390, 394, 396, 397, 413, 451, 534, 868, 981, 1007, 1009, 1034], "fr": [5, 7, 8, 9, 10, 25, 26, 31, 38, 43, 55, 58, 76, 83, 119, 159, 180, 185, 186, 188, 192, 194, 195, 206, 223, 224, 230, 233, 240, 263, 265, 268, 275, 297, 312, 348, 353, 354, 355, 531, 537, 658, 664, 685, 686, 757, 758, 987, 989], "licenc": [5, 376], "bsd": [5, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 21, 22, 25, 26, 27, 28, 31, 32, 33, 38, 40, 41, 43, 46, 47, 48, 49, 52, 53, 54, 55, 58, 62, 66, 67, 68, 71, 72, 74, 75, 76, 83, 90, 91, 96, 98, 100, 101, 102, 103, 104, 107, 111, 113, 114, 115, 116, 117, 118, 119, 124, 125, 127, 128, 132, 133, 150, 153, 154, 156, 157, 158, 159, 160, 162, 166, 177, 183, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 206, 208, 209, 217, 218, 219, 223, 224, 225, 227, 230, 233, 235, 236, 238, 240, 247, 249, 263, 266, 268, 275, 283, 285, 287, 293, 294, 295, 297, 298, 301, 304, 307, 308, 309, 310, 311, 312, 327, 328, 329, 330, 332, 344, 345, 348, 349, 353, 354, 355, 388], "claus": [5, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 21, 22, 26, 28, 31, 32, 33, 38, 40, 41, 43, 46, 47, 48, 49, 52, 53, 54, 55, 58, 62, 66, 67, 68, 71, 72, 74, 75, 76, 83, 90, 91, 96, 98, 100, 101, 102, 103, 104, 107, 111, 113, 114, 115, 116, 117, 118, 119, 124, 125, 127, 128, 132, 133, 150, 153, 154, 156, 157, 158, 159, 160, 162, 166, 177, 183, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 206, 208, 209, 217, 218, 219, 223, 224, 230, 235, 236, 238, 240, 247, 249, 263, 268, 275, 283, 285, 287, 293, 294, 295, 297, 298, 301, 307, 308, 309, 310, 311, 312, 344, 345, 348, 349, 353, 354, 355], "normal": [5, 10, 12, 13, 15, 18, 20, 21, 27, 30, 35, 36, 38, 41, 45, 47, 58, 62, 63, 67, 74, 76, 79, 80, 81, 86, 87, 97, 102, 113, 114, 116, 119, 125, 126, 129, 130, 145, 156, 159, 160, 166, 168, 170, 171, 179, 180, 181, 182, 183, 185, 191, 194, 196, 199, 203, 204, 205, 207, 215, 219, 220, 225, 240, 247, 252, 253, 256, 259, 262, 268, 290, 291, 294, 306, 308, 312, 315, 318, 321, 324, 330, 340, 354, 355, 364, 371, 374, 377, 378, 379, 382, 387, 391, 395, 396, 405, 406, 407, 409, 410, 412, 415, 416, 417, 421, 440, 449, 451, 452, 453, 462, 464, 465, 475, 482, 483, 484, 489, 496, 512, 515, 519, 526, 527, 533, 536, 541, 542, 544, 548, 549, 552, 553, 554, 557, 558, 559, 560, 562, 563, 564, 565, 566, 579, 580, 582, 588, 589, 590, 591, 611, 625, 627, 639, 658, 659, 669, 672, 676, 680, 687, 691, 695, 697, 703, 704, 706, 718, 723, 725, 733, 735, 740, 744, 748, 749, 751, 754, 755, 756, 760, 769, 793, 794, 795, 801, 802, 827, 829, 838, 840, 846, 847, 850, 861, 862, 865, 866, 869, 871, 874, 875, 876, 877, 878, 879, 881, 886, 887, 889, 890, 891, 892, 896, 897, 909, 910, 911, 912, 937, 938, 942, 965, 966, 971, 972, 978, 981, 983, 985, 986, 987, 988, 991, 995, 1000, 1002, 1004, 1005, 1011, 1021, 1023, 1024, 1025, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "pixel": [5, 6, 14, 21, 33, 48, 49, 54, 96, 112, 120, 137, 148, 168, 173, 174, 177, 234, 260, 303, 304, 379, 409, 414, 416, 417, 418, 493, 494, 495, 564, 585, 586, 607, 608, 634, 992, 994, 1005, 1011, 1021, 1024], "train_test_split": [5, 6, 7, 10, 13, 25, 26, 28, 32, 33, 72, 76, 87, 101, 113, 118, 120, 124, 125, 126, 127, 128, 129, 132, 146, 147, 170, 171, 173, 174, 177, 185, 196, 201, 208, 209, 216, 217, 219, 231, 240, 243, 244, 256, 259, 260, 265, 269, 271, 275, 283, 288, 293, 294, 301, 303, 304, 309, 311, 312, 314, 317, 318, 319, 324, 331, 358, 362, 364, 387, 395, 405, 410, 413, 416, 437, 438, 558, 560, 567, 568, 697, 698, 700, 702, 798, 829, 832, 850, 858, 859, 861, 911, 912, 978, 979, 989, 991, 992, 997, 999, 1004, 1021, 1028, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1044, 1048], "data_id": [5, 123, 158, 171, 201, 219, 231, 280, 313, 376, 496], "41082": 5, "return_x_i": [5, 7, 15, 59, 71, 72, 73, 74, 96, 119, 123, 136, 139, 140, 141, 146, 165, 166, 173, 174, 177, 186, 188, 189, 190, 192, 197, 198, 208, 216, 217, 231, 239, 240, 243, 244, 258, 261, 264, 269, 270, 277, 280, 283, 287, 294, 302, 303, 304, 312, 317, 319, 321, 322, 323, 324, 330, 343, 355, 358, 375, 387, 388, 395, 403, 409, 410, 413, 416, 418, 446, 488, 489, 490, 491, 492, 494, 495, 496, 497, 500, 501, 502, 504, 505, 510, 532, 533, 534, 535, 558, 561, 562, 567, 568, 592, 595, 596, 598, 599, 600, 602, 610, 619, 620, 622, 623, 638, 639, 658, 659, 668, 673, 674, 675, 688, 689, 690, 691, 701, 787, 801, 802, 804, 829, 834, 845, 850, 853, 910, 911, 912, 979, 984, 989, 990, 991, 992, 999, 1016, 1020, 1021, 1023, 1024, 1028, 1037, 1039, 1041, 1044], "idea": [5, 54, 81, 82, 119, 150, 158, 171, 202, 222, 290, 340, 358, 368, 369, 382, 387, 388, 411, 412, 413, 414, 415, 416, 418, 607, 608, 985, 986, 989, 992, 995, 1008, 1014, 1025], "noisi": [5, 34, 50, 56, 63, 97, 113, 146, 153, 159, 185, 200, 203, 225, 233, 253, 263, 269, 271, 272, 312, 360, 361, 364, 409, 417, 419, 420, 444, 446, 450, 521, 524, 938, 984, 986, 992, 1004, 1009], "nois": [5, 10, 14, 21, 22, 28, 32, 34, 41, 45, 50, 53, 55, 56, 62, 63, 68, 76, 87, 96, 97, 99, 101, 104, 114, 116, 126, 130, 131, 152, 153, 154, 158, 161, 162, 163, 168, 180, 182, 183, 185, 190, 191, 196, 199, 200, 203, 204, 205, 206, 218, 225, 227, 230, 232, 233, 236, 262, 270, 275, 276, 297, 301, 302, 309, 314, 318, 324, 347, 360, 361, 364, 378, 384, 387, 407, 409, 414, 416, 418, 419, 420, 444, 446, 452, 511, 513, 514, 515, 516, 517, 518, 522, 524, 525, 530, 532, 534, 541, 607, 608, 611, 613, 614, 615, 616, 617, 621, 622, 624, 625, 644, 645, 649, 650, 651, 653, 654, 655, 656, 663, 664, 665, 671, 679, 692, 878, 890, 896, 982, 984, 985, 986, 989, 992, 1002, 1011, 1023, 1024, 1032, 1037, 1042, 1044, 1045], "approach": [5, 8, 59, 64, 67, 100, 150, 153, 165, 171, 174, 183, 189, 201, 203, 209, 219, 222, 280, 313, 344, 353, 354, 355, 370, 381, 382, 388, 391, 396, 399, 403, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 437, 443, 446, 448, 452, 462, 520, 532, 582, 589, 611, 635, 658, 659, 674, 675, 830, 846, 938, 978, 979, 985, 986, 989, 990, 992, 993, 999, 1003, 1004, 1008, 1009, 1014, 1018, 1023, 1024, 1035, 1047], "copi": [5, 12, 13, 18, 45, 63, 76, 99, 116, 150, 165, 166, 171, 172, 173, 187, 194, 207, 217, 219, 223, 285, 327, 328, 330, 332, 354, 359, 369, 379, 382, 384, 386, 387, 388, 394, 396, 434, 437, 440, 442, 443, 444, 446, 447, 449, 454, 459, 482, 483, 484, 485, 500, 502, 510, 532, 533, 534, 535, 541, 548, 553, 554, 559, 561, 562, 572, 590, 597, 607, 608, 610, 611, 628, 630, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 671, 672, 674, 679, 681, 684, 685, 686, 731, 768, 791, 798, 812, 841, 842, 856, 864, 867, 870, 871, 872, 873, 877, 878, 879, 881, 884, 886, 887, 888, 889, 890, 891, 892, 896, 897, 901, 903, 904, 905, 906, 907, 916, 919, 921, 922, 948, 960, 962, 963, 999, 1004, 1005, 1010, 1017, 1020, 1025, 1031, 1034, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "add": [5, 12, 17, 18, 21, 26, 27, 28, 33, 34, 41, 45, 55, 76, 81, 82, 87, 97, 122, 125, 146, 150, 153, 158, 159, 160, 165, 166, 183, 190, 196, 202, 204, 205, 216, 225, 230, 234, 236, 237, 269, 271, 272, 285, 297, 309, 311, 317, 319, 320, 343, 344, 347, 348, 354, 368, 380, 381, 382, 383, 384, 386, 388, 390, 396, 399, 405, 407, 413, 416, 417, 418, 515, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 602, 627, 628, 630, 632, 658, 659, 694, 697, 819, 841, 842, 898, 928, 946, 947, 957, 978, 979, 988, 995, 999, 1002, 1003, 1010, 1023, 1024, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "corrupt": [5, 104, 185, 207, 218, 394, 857, 985, 997], "uncorrupt": 5, "base": [5, 12, 13, 14, 15, 18, 21, 26, 27, 28, 35, 50, 57, 58, 59, 68, 71, 72, 76, 81, 91, 96, 97, 111, 113, 114, 119, 124, 125, 126, 127, 131, 133, 136, 144, 147, 151, 153, 158, 159, 161, 170, 172, 173, 174, 179, 180, 186, 187, 189, 190, 195, 196, 201, 202, 209, 218, 219, 220, 222, 230, 237, 238, 240, 259, 260, 265, 280, 283, 285, 298, 304, 307, 308, 310, 312, 319, 321, 332, 338, 344, 354, 358, 368, 369, 371, 376, 377, 378, 379, 380, 383, 384, 385, 390, 396, 397, 398, 407, 410, 414, 415, 417, 419, 420, 421, 437, 444, 446, 447, 448, 449, 450, 452, 456, 457, 461, 463, 464, 465, 466, 467, 487, 500, 501, 508, 509, 532, 533, 535, 536, 537, 538, 539, 541, 546, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 578, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 606, 607, 608, 610, 611, 616, 617, 618, 621, 624, 632, 633, 635, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 658, 664, 669, 671, 672, 673, 674, 675, 680, 682, 683, 685, 686, 687, 690, 692, 704, 717, 725, 734, 735, 736, 738, 740, 754, 755, 756, 784, 787, 794, 798, 800, 801, 802, 804, 805, 807, 812, 816, 817, 818, 819, 825, 827, 831, 832, 835, 843, 844, 845, 847, 849, 851, 852, 853, 858, 859, 862, 863, 866, 873, 874, 876, 880, 881, 882, 890, 893, 894, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 924, 932, 957, 978, 980, 981, 983, 984, 986, 989, 990, 991, 992, 993, 994, 995, 996, 999, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1014, 1020, 1025, 1027, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042], "solv": [5, 6, 67, 153, 190, 235, 262, 283, 381, 382, 383, 384, 387, 394, 409, 411, 413, 414, 419, 447, 453, 462, 478, 531, 537, 538, 539, 543, 545, 546, 547, 548, 635, 637, 646, 652, 654, 655, 664, 665, 670, 672, 674, 677, 685, 686, 687, 831, 901, 902, 905, 938, 980, 983, 985, 986, 989, 990, 1003, 1004, 1005, 1008, 1009, 1014, 1018, 1021, 1025, 1037, 1041, 1044], "x_train": [5, 6, 7, 8, 10, 13, 25, 26, 27, 28, 32, 33, 71, 72, 76, 79, 86, 87, 101, 113, 116, 120, 124, 125, 126, 127, 128, 129, 132, 141, 142, 146, 147, 159, 160, 161, 162, 170, 171, 172, 173, 174, 177, 181, 185, 196, 198, 199, 202, 208, 209, 215, 216, 217, 219, 231, 239, 243, 244, 249, 251, 256, 259, 260, 265, 269, 271, 275, 283, 288, 291, 293, 294, 301, 303, 304, 309, 311, 312, 314, 317, 318, 319, 324, 330, 331, 339, 353, 358, 362, 364, 368, 376, 384, 387, 395, 410, 413, 416, 437, 438, 509, 558, 559, 560, 567, 568, 697, 698, 700, 702, 827, 829, 832, 850, 858, 859, 861, 875, 911, 912, 979, 989, 991, 992, 993, 995, 997, 999, 1003, 1004, 1020, 1021, 1028], "x_test": [5, 6, 7, 8, 10, 13, 25, 26, 27, 28, 32, 33, 71, 72, 76, 79, 86, 87, 101, 113, 116, 118, 120, 125, 126, 127, 128, 129, 132, 141, 142, 146, 147, 158, 161, 170, 171, 172, 173, 174, 177, 181, 185, 191, 196, 198, 199, 207, 208, 209, 215, 216, 217, 219, 231, 233, 239, 243, 244, 249, 256, 259, 260, 265, 269, 271, 275, 276, 283, 288, 291, 293, 294, 301, 303, 304, 309, 311, 312, 314, 317, 318, 319, 324, 330, 331, 339, 353, 358, 360, 361, 362, 364, 368, 376, 384, 387, 395, 410, 413, 416, 438, 470, 471, 472, 473, 474, 475, 476, 509, 558, 559, 560, 567, 568, 697, 698, 700, 702, 827, 829, 832, 850, 858, 859, 861, 875, 911, 912, 979, 989, 991, 992, 993, 995, 999, 1003, 1004, 1005, 1020, 1021, 1023, 1028, 1031], "y_train": [5, 6, 7, 8, 10, 13, 25, 26, 27, 28, 32, 33, 71, 72, 76, 86, 87, 101, 113, 116, 120, 124, 125, 126, 127, 128, 129, 132, 141, 142, 146, 147, 159, 160, 161, 162, 170, 171, 172, 173, 174, 177, 181, 185, 196, 198, 199, 202, 208, 209, 216, 217, 231, 239, 243, 244, 249, 256, 259, 260, 265, 269, 271, 275, 283, 288, 293, 294, 301, 303, 304, 309, 312, 314, 317, 318, 319, 324, 327, 328, 330, 331, 332, 353, 358, 362, 364, 368, 376, 384, 387, 395, 410, 413, 416, 437, 438, 558, 559, 560, 567, 568, 697, 698, 700, 702, 827, 829, 832, 850, 858, 859, 861, 911, 912, 979, 989, 991, 992, 997, 999, 1004, 1020, 1021, 1028], "y_test": [5, 6, 7, 8, 10, 13, 25, 26, 27, 28, 32, 33, 71, 72, 76, 86, 87, 101, 113, 116, 118, 120, 125, 126, 127, 128, 129, 132, 141, 142, 146, 147, 161, 170, 171, 172, 173, 174, 177, 185, 196, 198, 201, 207, 208, 209, 216, 217, 219, 231, 239, 243, 244, 249, 256, 259, 260, 265, 269, 271, 275, 283, 288, 293, 294, 301, 303, 304, 309, 312, 314, 317, 318, 319, 324, 330, 331, 353, 358, 362, 364, 376, 387, 395, 410, 413, 416, 438, 558, 559, 560, 567, 568, 697, 698, 700, 702, 827, 829, 832, 850, 858, 859, 861, 911, 912, 989, 991, 992, 999, 1004, 1020, 1021, 1028, 1031], "stratifi": [5, 101, 120, 129, 146, 173, 216, 231, 240, 244, 257, 262, 265, 271, 288, 293, 294, 317, 384, 396, 551, 559, 567, 568, 602, 659, 666, 668, 676, 798, 801, 802, 804, 812, 813, 814, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 835, 850, 858, 960, 989, 992, 1020, 1036, 1037, 1038, 1040, 1041, 1044], "train_siz": [5, 7, 10, 113, 132, 154, 177, 217, 236, 240, 264, 275, 319, 322, 348, 800, 804, 815, 818, 825, 827, 984, 1020, 1031, 1032, 1037, 1038], "1_000": [5, 35, 49, 73, 101, 153, 158, 160, 172, 234, 259, 348, 537, 539, 701, 820], "rng": [5, 21, 22, 32, 35, 38, 45, 51, 63, 82, 87, 96, 98, 104, 114, 126, 129, 130, 132, 153, 154, 157, 159, 160, 162, 165, 166, 170, 173, 180, 181, 182, 183, 185, 190, 195, 202, 203, 208, 215, 230, 236, 237, 239, 247, 257, 265, 268, 273, 274, 301, 311, 314, 318, 319, 321, 323, 324, 327, 328, 332, 343, 360, 361, 364, 369, 384, 387, 400, 470, 474, 475, 476, 643, 649, 670, 672, 678, 810, 836, 837, 838, 840, 841, 842, 846, 849, 851, 852, 853, 878, 890, 893, 894, 896, 897, 898, 907, 1016], "randomst": [5, 14, 21, 22, 25, 32, 35, 38, 45, 51, 62, 63, 82, 83, 87, 96, 98, 104, 114, 125, 126, 129, 130, 132, 146, 153, 154, 157, 159, 160, 162, 165, 166, 170, 173, 180, 181, 182, 183, 185, 190, 195, 202, 203, 208, 215, 225, 230, 236, 237, 247, 250, 257, 265, 268, 269, 271, 272, 273, 274, 301, 308, 310, 311, 314, 318, 319, 321, 323, 324, 327, 328, 332, 343, 360, 361, 384, 387, 391, 396, 400, 414, 421, 440, 443, 447, 449, 451, 452, 453, 454, 458, 459, 460, 462, 469, 470, 474, 475, 476, 488, 491, 492, 495, 497, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 583, 584, 607, 608, 610, 611, 627, 632, 634, 639, 640, 641, 642, 643, 646, 647, 649, 650, 652, 653, 654, 658, 659, 660, 661, 662, 663, 666, 667, 668, 670, 671, 672, 674, 676, 677, 678, 679, 687, 689, 690, 691, 692, 693, 694, 695, 701, 780, 792, 796, 797, 800, 801, 802, 803, 804, 810, 812, 813, 814, 815, 816, 817, 818, 825, 826, 827, 831, 832, 835, 836, 837, 838, 840, 841, 842, 846, 850, 857, 858, 859, 866, 878, 882, 890, 893, 894, 896, 897, 898, 901, 902, 903, 906, 907, 909, 910, 911, 912, 924, 937, 938, 960, 963, 999, 1016, 1027], "x_test_noisi": 5, "x_train_noisi": 5, "helper": [5, 6, 99, 219, 273, 375, 384, 385, 395, 396, 413, 468, 575, 899, 1020, 1021, 1031, 1038, 1039, 1040, 1044], "qualit": [5, 6, 54, 56, 62, 119, 126, 201, 322, 377, 409, 439, 701, 1021, 1046], "assess": [5, 13, 38, 61, 113, 124, 126, 171, 201, 219, 240, 258, 259, 261, 265, 407, 416, 701, 742, 988, 989, 995, 1010, 1046], "plot_digit": 5, "small": [5, 11, 13, 22, 28, 40, 49, 50, 54, 56, 71, 79, 83, 87, 92, 101, 114, 116, 123, 125, 126, 158, 160, 171, 172, 181, 187, 191, 192, 202, 205, 207, 216, 218, 219, 249, 262, 269, 274, 287, 298, 302, 304, 307, 309, 311, 319, 327, 332, 340, 345, 348, 353, 354, 370, 375, 377, 379, 382, 385, 391, 396, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 422, 441, 443, 445, 446, 447, 449, 458, 459, 463, 475, 496, 498, 538, 540, 547, 555, 556, 557, 561, 562, 564, 582, 589, 590, 602, 607, 608, 650, 654, 655, 656, 658, 659, 679, 682, 683, 745, 801, 802, 816, 826, 829, 858, 859, 866, 894, 903, 906, 938, 978, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 996, 997, 999, 1001, 1002, 1005, 1010, 1014, 1023, 1024, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048], "img": [5, 51, 67, 506, 586], "ravel": [5, 14, 17, 18, 20, 27, 43, 54, 55, 59, 81, 106, 114, 116, 122, 126, 131, 132, 133, 142, 153, 155, 157, 158, 159, 160, 171, 180, 191, 192, 194, 201, 214, 215, 223, 227, 230, 234, 236, 240, 244, 249, 251, 265, 269, 271, 285, 290, 291, 297, 298, 301, 302, 303, 304, 309, 310, 321, 332, 340, 345, 346, 347, 349, 350, 353, 360, 361, 465, 493, 494, 495, 631, 718, 976, 989, 1047], "imshow": [5, 6, 14, 33, 41, 47, 48, 49, 51, 52, 54, 55, 59, 83, 90, 96, 99, 107, 155, 156, 157, 161, 174, 192, 217, 223, 239, 273, 289, 304, 327, 328, 340, 346, 349, 376, 632, 697, 1021, 1022, 1045], "grei": [5, 272, 307, 348, 377], "off": [5, 12, 14, 38, 40, 41, 48, 49, 53, 54, 79, 83, 86, 96, 119, 205, 223, 235, 239, 256, 261, 263, 264, 307, 328, 332, 340, 350, 353, 377, 382, 384, 409, 411, 418, 442, 553, 554, 559, 560, 588, 591, 634, 656, 692, 715, 796, 797, 798, 801, 802, 812, 824, 942, 988, 994, 1004, 1010, 1031, 1035, 1036, 1038], "fontsiz": [5, 8, 10, 15, 35, 51, 61, 92, 99, 122, 145, 156, 157, 159, 162, 172, 181, 191, 200, 212, 223, 224, 250, 257, 266, 267, 268, 273, 274, 304, 311, 347, 915], "mse": [5, 7, 79, 80, 124, 126, 127, 165, 166, 201, 203, 205, 207, 276, 324, 647, 653, 749, 989, 1005, 1042, 1044], "nmse": [5, 276], "2f": [5, 8, 11, 13, 20, 32, 40, 43, 45, 47, 51, 53, 63, 65, 68, 86, 93, 99, 106, 126, 132, 133, 145, 171, 172, 177, 181, 190, 192, 197, 201, 216, 217, 218, 219, 230, 234, 240, 261, 265, 266, 268, 270, 271, 272, 293, 294, 301, 309, 312, 321, 340, 353, 354, 364, 410, 413, 416, 825], "linear": [5, 9, 10, 11, 12, 13, 14, 15, 17, 28, 30, 31, 32, 36, 38, 53, 58, 75, 76, 79, 80, 81, 82, 83, 87, 91, 96, 101, 105, 116, 118, 131, 133, 136, 139, 140, 142, 145, 148, 150, 155, 157, 159, 165, 166, 169, 170, 172, 175, 177, 181, 183, 185, 187, 189, 190, 191, 196, 198, 199, 202, 203, 205, 206, 209, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 224, 226, 228, 233, 234, 236, 238, 239, 242, 251, 252, 256, 258, 259, 260, 262, 265, 267, 268, 269, 270, 271, 272, 276, 285, 290, 291, 292, 293, 294, 295, 298, 301, 304, 307, 308, 309, 310, 312, 314, 319, 320, 332, 335, 337, 340, 341, 342, 345, 348, 349, 350, 351, 353, 360, 361, 369, 371, 374, 378, 379, 380, 384, 385, 387, 396, 398, 409, 412, 413, 414, 415, 416, 417, 418, 419, 421, 442, 455, 465, 467, 475, 482, 483, 484, 496, 501, 502, 512, 515, 521, 524, 532, 533, 534, 535, 536, 539, 541, 543, 544, 548, 549, 550, 554, 566, 582, 589, 593, 594, 606, 609, 614, 620, 631, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 687, 688, 689, 690, 691, 692, 693, 701, 707, 716, 749, 752, 764, 766, 773, 784, 798, 809, 813, 824, 827, 841, 842, 846, 850, 857, 858, 859, 862, 866, 867, 868, 871, 874, 876, 878, 879, 880, 881, 890, 894, 901, 902, 903, 904, 905, 906, 907, 978, 980, 981, 982, 984, 989, 992, 993, 994, 995, 996, 997, 1003, 1004, 1009, 1011, 1012, 1014, 1016, 1019, 1020, 1025, 1026, 1027, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045], "radial": [5, 101, 153, 158, 160, 340, 344, 374, 452, 622, 691, 987, 1004, 1027], "rbf": [5, 6, 7, 10, 11, 17, 31, 32, 101, 134, 142, 153, 154, 155, 157, 158, 159, 160, 161, 162, 168, 177, 215, 229, 230, 236, 245, 257, 260, 262, 263, 264, 267, 273, 277, 280, 291, 292, 332, 335, 337, 346, 347, 351, 374, 410, 414, 416, 452, 502, 504, 535, 541, 610, 611, 612, 613, 616, 619, 620, 621, 623, 624, 631, 639, 640, 641, 642, 643, 676, 691, 764, 773, 775, 798, 809, 812, 818, 861, 881, 896, 897, 901, 903, 904, 905, 906, 907, 978, 981, 982, 984, 986, 989, 995, 999, 1002, 1011, 1016, 1021, 1027, 1037, 1042], "decomposit": [5, 6, 15, 18, 51, 59, 71, 73, 74, 75, 87, 88, 91, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 131, 137, 177, 222, 223, 225, 234, 235, 238, 239, 242, 261, 289, 294, 312, 321, 354, 370, 371, 375, 388, 391, 396, 405, 406, 407, 410, 416, 449, 451, 452, 453, 462, 482, 483, 484, 495, 549, 556, 611, 650, 651, 652, 653, 654, 655, 656, 663, 664, 665, 672, 673, 674, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 796, 797, 850, 857, 860, 863, 879, 910, 937, 938, 985, 986, 989, 1006, 1009, 1011, 1012, 1019, 1021, 1026, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "kernel_pca": [5, 101, 410], "400": [5, 27, 51, 96, 128, 132, 153, 166, 207, 227, 274, 302, 354, 377, 414, 495, 1025], "1e": [5, 6, 7, 10, 18, 27, 47, 96, 150, 153, 156, 158, 159, 160, 161, 162, 165, 171, 181, 194, 201, 202, 208, 215, 219, 225, 230, 236, 241, 247, 250, 253, 260, 270, 273, 303, 314, 320, 323, 331, 338, 340, 348, 353, 388, 421, 443, 447, 452, 459, 462, 471, 472, 478, 482, 483, 484, 531, 532, 533, 536, 537, 538, 539, 540, 542, 543, 545, 546, 547, 559, 560, 561, 562, 592, 597, 611, 613, 614, 615, 619, 620, 622, 623, 625, 627, 638, 640, 641, 642, 644, 645, 646, 647, 648, 649, 652, 653, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 687, 689, 690, 691, 692, 693, 694, 695, 727, 740, 784, 796, 797, 812, 836, 837, 838, 839, 840, 841, 842, 850, 858, 859, 866, 896, 897, 901, 902, 903, 904, 905, 906, 907, 975, 978, 989, 993, 997, 999, 1003, 1021, 1025, 1039, 1044, 1045, 1046], "fit_inverse_transform": [5, 101, 535, 1040], "5e": [5, 96, 186, 595, 596, 598], "inde": [5, 7, 26, 35, 40, 41, 54, 56, 59, 83, 87, 101, 113, 116, 149, 150, 153, 171, 173, 180, 185, 189, 190, 201, 203, 264, 265, 269, 271, 280, 285, 307, 312, 348, 354, 364, 368, 381, 387, 395, 396, 397, 409, 411, 416, 567, 568, 985, 999, 1003, 1045], "least": [5, 13, 15, 81, 82, 85, 86, 88, 98, 99, 116, 127, 150, 161, 168, 170, 179, 180, 183, 185, 191, 194, 197, 201, 203, 205, 206, 209, 218, 219, 220, 234, 240, 262, 280, 283, 312, 319, 320, 340, 354, 355, 368, 375, 377, 379, 381, 382, 386, 388, 390, 394, 396, 397, 400, 408, 409, 411, 412, 413, 414, 416, 417, 418, 419, 420, 444, 448, 450, 456, 457, 458, 461, 474, 481, 482, 483, 484, 485, 494, 516, 531, 537, 539, 541, 542, 543, 545, 546, 547, 548, 549, 557, 558, 559, 560, 562, 564, 565, 566, 593, 602, 635, 643, 646, 648, 650, 651, 652, 653, 654, 655, 656, 657, 663, 664, 665, 666, 667, 668, 669, 671, 672, 674, 676, 678, 679, 680, 682, 683, 684, 685, 686, 687, 692, 697, 712, 716, 718, 784, 799, 803, 804, 810, 812, 813, 814, 816, 817, 819, 822, 825, 826, 827, 858, 859, 862, 873, 881, 906, 909, 910, 911, 912, 930, 952, 979, 982, 986, 989, 992, 1001, 1003, 1004, 1005, 1010, 1011, 1012, 1014, 1023, 1027, 1031, 1033, 1034, 1037, 1038, 1042], "hope": [5, 219, 396, 408, 1040], "remov": [5, 15, 17, 18, 55, 56, 71, 76, 150, 165, 166, 171, 174, 263, 307, 314, 317, 318, 319, 324, 353, 354, 358, 364, 374, 377, 381, 382, 383, 384, 386, 387, 391, 396, 409, 410, 413, 416, 417, 419, 420, 441, 442, 444, 445, 447, 449, 450, 457, 459, 478, 488, 489, 526, 527, 534, 535, 537, 539, 541, 546, 553, 567, 568, 569, 570, 579, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 611, 630, 633, 638, 644, 645, 654, 655, 656, 676, 677, 740, 741, 749, 750, 777, 778, 779, 804, 820, 822, 823, 824, 825, 848, 860, 861, 865, 866, 878, 879, 881, 890, 916, 932, 933, 979, 986, 992, 1005, 1012, 1017, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "think": [5, 38, 172, 353, 354, 382, 415, 988, 1010, 1013, 1014, 1016], "happen": [5, 118, 189, 307, 313, 354, 364, 368, 369, 380, 381, 382, 386, 387, 388, 394, 396, 397, 399, 409, 411, 413, 416, 437, 515, 572, 658, 784, 879, 881, 901, 985, 989, 990, 1004, 1010, 1025, 1039, 1043, 1044, 1046, 1047], "ridg": [5, 10, 14, 55, 76, 97, 98, 116, 133, 139, 150, 152, 158, 160, 162, 163, 165, 168, 170, 171, 172, 179, 180, 185, 188, 191, 194, 196, 197, 201, 202, 207, 220, 229, 239, 245, 275, 308, 311, 347, 348, 353, 368, 371, 394, 414, 416, 419, 524, 535, 539, 543, 611, 615, 622, 625, 643, 644, 645, 647, 649, 657, 661, 673, 674, 675, 678, 687, 701, 749, 798, 804, 812, 834, 907, 989, 997, 999, 1003, 1004, 1011, 1012, 1023, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1040, 1041, 1044, 1045, 1046, 1047], "x_reconstructed_kernel_pca": [5, 101], "inverse_transform": [5, 52, 55, 101, 147, 237, 289, 354, 400, 414, 417, 445, 465, 482, 483, 484, 533, 534, 535, 538, 539, 540, 541, 543, 544, 581, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 630, 798, 801, 802, 812, 861, 865, 866, 868, 869, 870, 871, 872, 874, 875, 877, 878, 879, 881, 893, 894, 999, 1000, 1001, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "x_reconstructed_pca": [5, 101], "lower": [5, 13, 17, 27, 32, 34, 59, 80, 87, 91, 96, 98, 104, 113, 116, 119, 122, 126, 129, 153, 155, 157, 159, 161, 172, 173, 185, 186, 187, 191, 201, 202, 203, 204, 214, 222, 226, 233, 234, 239, 249, 253, 261, 262, 264, 265, 269, 270, 272, 275, 288, 289, 291, 292, 309, 312, 321, 330, 340, 346, 353, 354, 355, 359, 377, 382, 407, 408, 409, 412, 413, 414, 415, 416, 417, 420, 444, 448, 464, 467, 498, 509, 532, 534, 541, 544, 553, 559, 560, 561, 562, 563, 588, 589, 591, 603, 611, 613, 614, 615, 617, 619, 620, 622, 623, 625, 632, 633, 635, 637, 677, 679, 712, 716, 724, 727, 733, 738, 796, 797, 847, 849, 851, 852, 853, 855, 882, 901, 902, 903, 904, 905, 908, 925, 984, 985, 986, 988, 989, 990, 992, 993, 994, 995, 996, 997, 1001, 1003, 1004, 1005, 1023, 1033, 1034, 1039, 1046, 1048], "analysi": [5, 7, 9, 10, 15, 21, 26, 30, 36, 37, 38, 46, 58, 64, 66, 69, 79, 80, 81, 82, 83, 86, 87, 91, 93, 95, 97, 98, 100, 101, 103, 105, 106, 108, 123, 141, 166, 168, 171, 190, 198, 223, 246, 248, 252, 253, 254, 259, 262, 263, 267, 273, 285, 286, 287, 288, 296, 297, 299, 307, 312, 330, 348, 354, 371, 374, 377, 379, 382, 384, 397, 406, 409, 411, 416, 417, 421, 439, 447, 448, 473, 475, 476, 482, 483, 485, 502, 504, 512, 515, 531, 532, 533, 534, 535, 537, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 555, 556, 631, 638, 688, 690, 691, 692, 693, 710, 719, 724, 725, 755, 787, 788, 791, 792, 796, 798, 823, 827, 843, 850, 861, 862, 867, 877, 881, 889, 937, 938, 979, 985, 986, 988, 989, 999, 1008, 1009, 1011, 1012, 1014, 1017, 1026, 1027, 1031, 1032, 1033, 1035, 1040], "favor": [5, 83, 119, 247, 253, 394, 411, 416, 633, 729, 806, 808, 860, 978, 997, 1033, 1035, 1037, 1038, 1040, 1043, 1044, 1045, 1046, 1047, 1048], "background": [5, 11, 48, 67, 129, 304, 309, 377, 382, 390, 409, 493, 494, 986, 994, 1003, 1041], "542": [5, 16, 130, 137, 150, 185, 379, 1011], "plot_digits_denois": [5, 16, 1011], "agglomer": [5, 33, 37, 48, 51, 69, 90, 146, 148, 168, 183, 200, 239, 275, 289, 374, 409, 417, 445, 502, 600, 606, 645, 798, 803, 861, 1011, 1027], "hand": [5, 30, 36, 52, 54, 87, 90, 98, 99, 101, 119, 126, 145, 148, 158, 168, 171, 172, 194, 205, 208, 226, 233, 234, 236, 237, 240, 256, 259, 260, 264, 271, 289, 304, 327, 328, 340, 368, 376, 377, 379, 382, 384, 388, 390, 395, 403, 414, 415, 416, 418, 502, 643, 697, 713, 787, 827, 882, 906, 978, 982, 985, 989, 991, 993, 997, 1002, 1004, 1011, 1014, 1016, 1019, 1022, 1023], "written": [5, 7, 30, 36, 52, 54, 90, 99, 148, 168, 208, 256, 260, 289, 304, 320, 327, 328, 369, 379, 382, 383, 384, 388, 390, 394, 396, 408, 410, 415, 487, 502, 508, 697, 713, 827, 906, 913, 983, 985, 989, 993, 994, 1003, 1008, 1011, 1016, 1017, 1022, 1025, 1040], "onlin": [5, 6, 8, 15, 37, 52, 69, 96, 99, 168, 179, 209, 215, 220, 239, 302, 370, 377, 381, 387, 396, 409, 414, 417, 419, 442, 446, 447, 449, 495, 502, 531, 536, 537, 538, 539, 545, 546, 582, 584, 658, 666, 667, 668, 676, 678, 827, 836, 837, 838, 839, 840, 843, 844, 849, 851, 852, 870, 871, 881, 901, 902, 981, 985, 993, 995, 1008, 1011, 1012, 1014, 1023, 1027, 1031, 1035, 1036, 1038, 1046], "dictionari": [5, 6, 7, 8, 37, 49, 52, 54, 69, 95, 97, 108, 130, 168, 200, 237, 239, 354, 355, 375, 376, 377, 384, 394, 396, 409, 417, 449, 464, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 507, 510, 526, 531, 537, 538, 539, 540, 542, 543, 544, 545, 546, 548, 567, 568, 569, 570, 581, 582, 584, 587, 588, 589, 632, 633, 634, 664, 685, 686, 701, 713, 798, 801, 802, 809, 810, 812, 824, 860, 865, 874, 909, 910, 911, 912, 916, 926, 946, 949, 978, 985, 989, 1004, 1011, 1016, 1025, 1026, 1027, 1031, 1039, 1042, 1043, 1044, 1045, 1046], "dataset": [6, 7, 9, 10, 11, 14, 15, 17, 18, 20, 21, 22, 27, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 68, 69, 72, 73, 74, 75, 76, 81, 82, 83, 87, 94, 95, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 112, 114, 115, 116, 117, 118, 120, 121, 124, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 142, 143, 146, 147, 148, 149, 150, 152, 154, 156, 159, 161, 163, 165, 166, 173, 174, 177, 179, 181, 182, 184, 186, 187, 188, 189, 191, 192, 193, 194, 197, 198, 199, 200, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 224, 226, 227, 229, 231, 234, 236, 238, 239, 243, 244, 245, 247, 249, 250, 251, 253, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 285, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 333, 335, 336, 338, 340, 341, 342, 343, 345, 346, 348, 349, 350, 351, 354, 355, 357, 358, 360, 361, 362, 363, 364, 369, 370, 371, 384, 385, 386, 388, 395, 396, 398, 399, 403, 405, 406, 407, 409, 410, 413, 414, 415, 416, 417, 418, 424, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 458, 459, 469, 470, 473, 474, 475, 476, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 546, 549, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 583, 584, 588, 589, 590, 592, 593, 594, 595, 596, 598, 599, 600, 602, 603, 610, 611, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 631, 632, 633, 634, 635, 638, 639, 640, 643, 645, 646, 647, 649, 651, 652, 653, 655, 657, 658, 659, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 679, 688, 689, 690, 691, 692, 697, 698, 700, 701, 702, 703, 704, 708, 728, 754, 756, 786, 787, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 812, 813, 814, 815, 816, 817, 818, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 843, 844, 845, 847, 849, 850, 851, 852, 853, 854, 857, 858, 859, 861, 862, 865, 866, 874, 875, 879, 881, 883, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902, 903, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 921, 922, 926, 927, 978, 979, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1009, 1010, 1011, 1013, 1014, 1017, 1019, 1020, 1021, 1024, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "excerpt": [6, 1001, 1021], "wild": [6, 375, 493, 494, 508, 509, 1021, 1027, 1031], "aka": [6, 301, 353, 394, 417, 452, 536, 538, 540, 544, 547, 581, 582, 615, 622, 651, 652, 654, 655, 656, 658, 659, 662, 666, 667, 668, 670, 676, 677, 678, 740, 868, 872, 874, 985, 993, 1003, 1016, 1021, 1033, 1045], "lfw": [6, 377, 493, 494, 1021, 1031], "vi": [6, 8, 377, 699, 1021, 1039, 1042], "www": [6, 72, 177, 201, 217, 219, 231, 283, 303, 376, 377, 382, 390, 399, 409, 413, 442, 449, 487, 508, 509, 531, 534, 537, 541, 644, 658, 664, 671, 685, 686, 850, 857, 909, 910, 985, 1002, 1021], "umass": [6, 20, 377, 1021], "edu": [6, 8, 11, 18, 47, 150, 160, 177, 183, 222, 250, 261, 280, 290, 298, 311, 353, 376, 377, 379, 409, 449, 487, 500, 502, 508, 509, 510, 534, 641, 644, 649, 658, 666, 667, 676, 679, 682, 683, 836, 838, 839, 840, 850, 857, 894, 896, 909, 910, 985, 987, 1021], "funnel": [6, 493, 494, 1021], "tgz": [6, 1021], "233mb": [6, 1021], "stat": [6, 8, 10, 71, 81, 102, 150, 153, 174, 259, 262, 270, 274, 290, 319, 327, 328, 379, 391, 395, 411, 474, 592, 595, 596, 598, 599, 600, 604, 605, 606, 609, 682, 683, 802, 810, 812, 909, 910, 940, 978, 985, 999, 1021, 1038, 1040, 1044], "loguniform": [6, 153, 270, 978, 1021, 1041], "fetch_lfw_peopl": [6, 377, 1021, 1046], "confusionmatrixdisplai": [6, 33, 256, 320, 327, 353, 631, 718, 989, 1021, 1041, 1042, 1044, 1045, 1046], "classification_report": [6, 33, 71, 147, 260, 304, 327, 328, 989, 1021, 1025, 1033, 1035, 1039, 1040, 1041, 1043, 1047], "randomizedsearchcv": [6, 72, 153, 263, 270, 319, 364, 395, 400, 575, 978, 989, 1003, 1009, 1021, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1048], "standardscal": [6, 10, 32, 45, 50, 56, 59, 63, 72, 74, 87, 107, 133, 150, 171, 180, 189, 190, 192, 201, 217, 219, 231, 232, 240, 241, 242, 244, 259, 269, 288, 293, 294, 301, 309, 312, 317, 318, 320, 321, 322, 324, 340, 343, 364, 370, 382, 384, 387, 391, 395, 410, 413, 430, 466, 467, 567, 676, 678, 861, 862, 865, 878, 892, 901, 902, 903, 904, 906, 907, 979, 986, 993, 999, 1003, 1004, 1006, 1021, 1033, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1047], "svc": [6, 17, 26, 28, 31, 32, 33, 71, 75, 124, 134, 140, 142, 148, 154, 168, 177, 192, 205, 217, 235, 238, 242, 256, 260, 262, 264, 267, 268, 269, 272, 273, 277, 309, 312, 317, 319, 330, 332, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 349, 350, 351, 353, 368, 384, 388, 396, 403, 407, 410, 413, 416, 437, 468, 515, 555, 697, 698, 700, 702, 798, 815, 828, 830, 861, 898, 899, 901, 903, 977, 978, 984, 987, 989, 990, 999, 1011, 1016, 1020, 1021, 1023, 1028, 1031, 1032, 1033, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "disk": [6, 14, 377, 380, 382, 387, 396, 403, 1021], "arrai": [6, 7, 8, 10, 11, 12, 13, 14, 17, 20, 33, 34, 35, 41, 45, 47, 49, 54, 55, 62, 63, 65, 71, 73, 82, 86, 93, 97, 98, 125, 127, 129, 132, 135, 140, 147, 150, 154, 155, 156, 161, 171, 180, 182, 185, 194, 195, 198, 201, 202, 208, 218, 223, 224, 230, 234, 237, 240, 241, 244, 247, 248, 249, 251, 252, 257, 258, 260, 262, 263, 266, 267, 271, 283, 298, 310, 317, 320, 321, 323, 324, 328, 336, 343, 344, 353, 361, 364, 368, 369, 375, 376, 377, 382, 383, 384, 385, 387, 388, 390, 392, 394, 395, 396, 403, 406, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 500, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 515, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 581, 582, 583, 584, 586, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 921, 922, 923, 926, 927, 935, 936, 937, 938, 939, 940, 942, 943, 944, 951, 952, 953, 960, 961, 962, 963, 964, 965, 966, 967, 975, 976, 979, 984, 985, 987, 989, 990, 992, 993, 995, 996, 999, 1000, 1001, 1003, 1004, 1005, 1008, 1014, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "lfw_peopl": [6, 377, 1021], "min_faces_per_person": [6, 377, 494, 1021], "resiz": [6, 47, 48, 241, 377, 493, 494, 1021], "n_sampl": [6, 7, 10, 15, 25, 26, 27, 28, 33, 34, 35, 38, 39, 40, 42, 43, 44, 45, 49, 50, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 68, 71, 76, 79, 80, 81, 82, 83, 87, 93, 96, 97, 101, 104, 113, 115, 116, 117, 118, 119, 120, 125, 126, 127, 128, 129, 130, 141, 142, 149, 150, 162, 165, 166, 170, 180, 182, 183, 185, 187, 189, 191, 193, 195, 196, 200, 201, 202, 204, 205, 209, 213, 216, 218, 219, 222, 223, 224, 225, 226, 227, 230, 234, 235, 237, 240, 248, 250, 251, 252, 253, 259, 260, 262, 265, 266, 269, 271, 272, 273, 274, 275, 276, 285, 295, 309, 310, 311, 314, 318, 319, 321, 323, 324, 329, 338, 341, 342, 348, 353, 354, 364, 375, 379, 382, 384, 387, 391, 394, 395, 396, 400, 409, 411, 412, 413, 414, 416, 420, 421, 422, 424, 426, 427, 428, 431, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 494, 501, 504, 508, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 621, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 769, 770, 771, 772, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 926, 927, 938, 940, 942, 951, 958, 960, 963, 964, 965, 966, 967, 968, 969, 970, 978, 981, 985, 989, 990, 992, 993, 999, 1000, 1001, 1003, 1004, 1005, 1016, 1021, 1022, 1023, 1024, 1025, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "w": [6, 12, 14, 17, 31, 35, 41, 43, 46, 49, 59, 65, 103, 106, 150, 165, 200, 205, 218, 237, 238, 247, 248, 249, 252, 253, 273, 304, 320, 321, 344, 345, 348, 355, 364, 369, 377, 379, 388, 403, 409, 410, 414, 416, 417, 421, 426, 432, 437, 465, 469, 472, 474, 482, 483, 484, 523, 538, 540, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 588, 589, 591, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 693, 699, 724, 725, 755, 798, 812, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 843, 844, 847, 848, 851, 852, 858, 859, 894, 896, 897, 901, 902, 903, 904, 906, 907, 909, 910, 911, 912, 935, 940, 985, 989, 993, 994, 999, 1001, 1003, 1004, 1021, 1025, 1041, 1045, 1046, 1047, 1048], "info": [6, 43, 72, 96, 171, 172, 237, 260, 379, 381, 386, 396, 417, 945, 955, 1021], "n_featur": [6, 8, 15, 26, 27, 28, 31, 32, 33, 34, 35, 41, 53, 59, 61, 62, 79, 80, 81, 82, 83, 92, 93, 96, 104, 113, 115, 117, 119, 120, 147, 149, 150, 165, 166, 177, 180, 183, 185, 187, 195, 196, 200, 204, 205, 216, 218, 223, 230, 234, 235, 237, 247, 252, 259, 265, 269, 271, 272, 274, 275, 295, 301, 309, 317, 318, 319, 321, 323, 324, 348, 353, 354, 355, 364, 368, 375, 376, 382, 384, 387, 394, 395, 396, 400, 409, 411, 412, 414, 416, 417, 420, 421, 422, 424, 426, 427, 428, 431, 432, 433, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 458, 459, 460, 461, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 489, 490, 491, 492, 494, 501, 504, 508, 509, 512, 515, 516, 519, 521, 523, 524, 526, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 698, 700, 701, 702, 710, 724, 757, 758, 759, 760, 762, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 791, 792, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 861, 864, 865, 866, 867, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 938, 964, 965, 966, 967, 968, 969, 970, 981, 985, 990, 992, 993, 999, 1003, 1004, 1005, 1016, 1021, 1022, 1024, 1025, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "id": [6, 20, 219, 298, 362, 376, 377, 382, 390, 411, 413, 417, 494, 495, 496, 913, 915, 933, 1021, 1025, 1039, 1040, 1043], "person": [6, 265, 377, 381, 413, 417, 493, 494, 495, 999, 1021, 1039], "target_nam": [6, 20, 31, 53, 91, 100, 105, 170, 210, 223, 249, 256, 263, 271, 272, 288, 313, 331, 353, 359, 375, 377, 488, 489, 491, 492, 493, 494, 496, 497, 500, 502, 503, 504, 505, 510, 713, 989, 1005, 1016, 1021, 1025, 1041], "n_class": [6, 38, 92, 93, 113, 115, 120, 122, 147, 149, 216, 223, 235, 238, 249, 269, 270, 271, 294, 295, 317, 359, 362, 364, 382, 384, 396, 416, 437, 488, 489, 502, 515, 519, 523, 549, 550, 551, 553, 555, 557, 559, 561, 564, 567, 569, 593, 594, 604, 610, 634, 639, 658, 659, 666, 667, 668, 674, 675, 676, 677, 697, 707, 716, 718, 734, 737, 740, 753, 787, 793, 798, 801, 802, 812, 822, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 843, 848, 850, 851, 858, 861, 868, 869, 872, 875, 882, 885, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 911, 913, 914, 926, 927, 985, 989, 990, 993, 1000, 1003, 1004, 1013, 1021, 1036, 1037, 1038, 1040, 1041, 1042, 1048], "1288": [6, 377], "1850": [6, 377], "scaler": [6, 72, 74, 129, 168, 217, 218, 235, 240, 242, 244, 288, 293, 306, 311, 312, 315, 322, 340, 343, 364, 387, 410, 413, 490, 658, 659, 672, 674, 687, 861, 870, 871, 873, 877, 878, 879, 881, 886, 887, 888, 889, 890, 891, 892, 993, 999, 1003, 1011, 1021, 1031, 1036, 1039, 1044], "unlabel": [6, 238, 319, 327, 328, 329, 331, 332, 396, 408, 409, 896, 897, 898, 988, 1016, 1019, 1021, 1023, 1043], "unsupervis": [6, 12, 38, 50, 73, 74, 87, 96, 118, 131, 230, 238, 291, 292, 339, 353, 354, 364, 371, 374, 377, 384, 395, 396, 408, 409, 412, 414, 415, 416, 417, 418, 433, 442, 445, 532, 534, 536, 537, 539, 542, 543, 549, 563, 566, 567, 569, 570, 582, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 628, 630, 634, 635, 638, 639, 640, 641, 642, 677, 798, 801, 802, 804, 812, 820, 825, 828, 843, 844, 847, 849, 850, 851, 852, 857, 864, 865, 866, 867, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 893, 894, 898, 905, 986, 989, 995, 1002, 1012, 1016, 1017, 1019, 1021, 1027, 1031, 1034, 1044, 1048], "dimension": [6, 9, 10, 20, 32, 34, 41, 45, 55, 56, 58, 59, 63, 70, 72, 74, 75, 77, 86, 87, 93, 96, 100, 104, 105, 113, 118, 131, 141, 142, 150, 153, 155, 156, 160, 168, 185, 197, 202, 218, 221, 223, 224, 226, 228, 230, 234, 235, 238, 248, 249, 261, 286, 289, 293, 295, 299, 309, 337, 344, 353, 364, 368, 374, 377, 378, 379, 382, 391, 396, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 445, 447, 449, 465, 469, 473, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 497, 500, 501, 502, 504, 505, 510, 515, 519, 532, 534, 535, 538, 539, 540, 541, 544, 547, 549, 563, 566, 573, 599, 607, 631, 640, 641, 642, 652, 688, 689, 690, 691, 692, 693, 694, 696, 699, 710, 724, 796, 797, 798, 827, 841, 842, 843, 846, 849, 850, 857, 861, 862, 865, 871, 876, 881, 893, 894, 895, 901, 905, 938, 975, 980, 981, 984, 985, 990, 991, 995, 1001, 1002, 1003, 1004, 1005, 1011, 1012, 1014, 1016, 1017, 1019, 1021, 1022, 1024, 1025, 1026, 1027, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1040, 1043, 1046, 1047], "reduct": [6, 20, 34, 55, 58, 70, 74, 77, 87, 96, 100, 105, 116, 131, 168, 221, 223, 224, 227, 228, 234, 238, 261, 286, 293, 295, 299, 321, 337, 364, 368, 374, 408, 409, 410, 412, 414, 416, 418, 468, 482, 483, 484, 485, 502, 530, 532, 534, 535, 538, 539, 540, 541, 544, 547, 549, 553, 554, 557, 558, 559, 560, 564, 565, 566, 599, 607, 658, 659, 688, 689, 690, 691, 692, 693, 780, 798, 827, 843, 850, 857, 861, 862, 871, 881, 899, 901, 909, 910, 911, 912, 981, 986, 1001, 1005, 1010, 1011, 1012, 1014, 1021, 1027, 1032, 1033, 1034, 1037, 1045, 1046, 1047], "top": [6, 12, 14, 15, 17, 18, 35, 38, 40, 42, 43, 44, 45, 46, 52, 63, 65, 72, 92, 98, 111, 118, 119, 122, 133, 136, 171, 201, 203, 212, 216, 230, 240, 241, 247, 249, 250, 253, 259, 263, 271, 272, 290, 307, 309, 313, 318, 324, 327, 328, 340, 344, 353, 364, 380, 382, 384, 388, 394, 406, 407, 409, 414, 415, 416, 487, 587, 588, 591, 599, 725, 755, 793, 913, 915, 978, 981, 985, 987, 997, 1009, 1014, 1021, 1024, 1025, 1045], "t0": [6, 8, 11, 15, 18, 40, 43, 45, 47, 49, 51, 53, 59, 63, 65, 99, 185, 187, 216, 217, 218, 224, 227, 230, 234, 236, 263, 353, 354, 355, 676, 677, 678, 1021], "svd_solver": [6, 71, 96, 104, 405, 414, 535, 541, 1021, 1037], "whiten": [6, 96, 97, 98, 289, 414, 421, 533, 534, 541, 879, 881, 1021, 1035, 1037, 1045, 1046], "done": [6, 8, 9, 11, 13, 15, 18, 20, 49, 51, 53, 54, 99, 147, 150, 158, 171, 172, 177, 180, 185, 187, 205, 218, 236, 237, 252, 260, 263, 266, 271, 285, 310, 319, 353, 354, 355, 364, 369, 376, 380, 382, 384, 386, 389, 390, 391, 394, 396, 400, 409, 411, 413, 414, 416, 441, 442, 445, 450, 452, 472, 482, 483, 484, 485, 489, 535, 561, 562, 582, 606, 628, 630, 632, 634, 643, 644, 645, 659, 740, 796, 797, 798, 812, 817, 818, 865, 879, 974, 978, 979, 982, 985, 986, 989, 991, 992, 993, 999, 1002, 1003, 1004, 1005, 1010, 1016, 1020, 1021, 1023, 1025, 1031, 1033, 1038, 1041, 1043, 1047], "components_": [6, 15, 59, 87, 96, 98, 99, 102, 107, 234, 235, 304, 312, 321, 396, 410, 414, 444, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 543, 544, 639, 850, 857, 893, 894, 981, 1001, 1021, 1035, 1037, 1043, 1046], "project": [6, 8, 11, 14, 18, 34, 46, 56, 59, 68, 91, 95, 96, 98, 100, 102, 103, 107, 108, 115, 157, 159, 161, 162, 168, 172, 177, 193, 198, 210, 222, 223, 224, 226, 229, 235, 238, 245, 248, 289, 294, 298, 304, 337, 345, 354, 359, 368, 371, 374, 376, 380, 381, 387, 388, 391, 396, 397, 399, 406, 412, 414, 415, 421, 440, 446, 451, 452, 462, 474, 482, 483, 484, 485, 489, 502, 504, 531, 533, 534, 535, 537, 539, 541, 542, 543, 544, 548, 549, 573, 582, 589, 641, 642, 649, 672, 674, 688, 691, 695, 696, 831, 850, 878, 893, 894, 895, 937, 938, 983, 985, 986, 987, 990, 992, 993, 995, 1002, 1005, 1007, 1011, 1013, 1014, 1016, 1021, 1024, 1027, 1031, 1032, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "orthonorm": [6, 391, 937, 981, 1021], "x_train_pca": [6, 1021], "x_test_pca": [6, 101, 1021], "966": [6, 143], "007": [6, 247, 270, 285, 354], "classifi": [6, 7, 8, 9, 24, 27, 29, 30, 31, 33, 35, 36, 57, 71, 72, 73, 74, 75, 91, 101, 105, 107, 113, 114, 115, 116, 117, 120, 121, 122, 125, 131, 134, 135, 142, 146, 147, 149, 155, 168, 173, 174, 177, 179, 191, 192, 193, 199, 201, 208, 210, 213, 216, 219, 220, 230, 233, 235, 237, 238, 243, 256, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 277, 280, 282, 284, 287, 293, 294, 296, 301, 304, 309, 319, 320, 324, 326, 327, 328, 330, 331, 333, 335, 336, 338, 339, 341, 342, 343, 344, 349, 350, 351, 355, 377, 379, 382, 384, 387, 394, 396, 409, 410, 413, 417, 418, 419, 426, 435, 437, 438, 439, 488, 489, 496, 504, 512, 514, 515, 522, 531, 536, 537, 542, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 563, 564, 566, 567, 568, 569, 570, 593, 594, 602, 606, 610, 622, 629, 631, 632, 633, 649, 658, 659, 666, 668, 671, 672, 673, 674, 675, 676, 697, 698, 700, 702, 703, 707, 708, 709, 712, 713, 718, 720, 725, 726, 728, 729, 733, 734, 737, 738, 739, 740, 741, 742, 753, 755, 781, 782, 783, 786, 787, 788, 793, 795, 798, 801, 802, 804, 812, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 848, 849, 851, 852, 857, 858, 859, 861, 862, 868, 881, 882, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 915, 930, 932, 978, 979, 981, 984, 985, 986, 989, 990, 991, 994, 997, 999, 1002, 1003, 1004, 1005, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1019, 1020, 1021, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048], "1e3": [6, 7, 10, 153, 159, 165, 236, 273, 323, 978, 1021], "1e5": [6, 158, 182, 184, 191, 273, 613, 614, 615, 619, 620, 622, 623, 625, 890, 895, 1001, 1021, 1023], "clf": [6, 10, 11, 12, 17, 25, 26, 27, 28, 32, 33, 39, 49, 52, 55, 59, 64, 72, 102, 103, 117, 125, 128, 129, 134, 139, 142, 146, 147, 149, 155, 157, 174, 191, 193, 194, 198, 199, 205, 208, 210, 213, 214, 215, 217, 225, 231, 232, 235, 238, 244, 251, 259, 263, 267, 268, 270, 273, 274, 288, 291, 292, 293, 296, 301, 309, 312, 317, 318, 319, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 353, 358, 359, 362, 368, 377, 395, 396, 403, 410, 413, 416, 418, 438, 549, 550, 553, 555, 557, 559, 561, 563, 564, 567, 593, 594, 597, 632, 634, 638, 639, 640, 641, 642, 644, 645, 648, 652, 658, 659, 660, 661, 662, 666, 668, 669, 672, 673, 674, 675, 676, 677, 680, 697, 698, 700, 702, 787, 798, 801, 802, 812, 829, 830, 831, 833, 836, 837, 838, 839, 840, 847, 848, 858, 901, 903, 905, 906, 909, 913, 915, 979, 981, 985, 989, 990, 992, 993, 995, 996, 1003, 1004, 1005, 1016, 1020, 1021, 1025], "class_weight": [6, 342, 396, 408, 557, 561, 564, 658, 659, 666, 668, 674, 675, 676, 677, 901, 903, 906, 908, 909, 911, 978, 1003, 1004, 1021, 1031, 1032, 1034, 1035, 1036, 1037, 1039, 1045, 1046], "n_iter": [6, 18, 72, 153, 209, 222, 223, 227, 263, 270, 285, 304, 342, 384, 388, 395, 421, 454, 478, 532, 533, 544, 545, 546, 547, 644, 645, 646, 647, 652, 653, 660, 661, 662, 663, 681, 682, 683, 684, 685, 686, 687, 692, 694, 801, 802, 810, 812, 857, 859, 937, 938, 978, 1003, 1021, 1032, 1037, 1038, 1039, 1043, 1045, 1046, 1047], "found": [6, 20, 21, 22, 107, 120, 149, 153, 157, 159, 161, 205, 238, 260, 263, 264, 265, 312, 317, 320, 322, 323, 340, 355, 368, 370, 376, 379, 381, 382, 384, 394, 396, 397, 406, 409, 412, 413, 414, 416, 417, 419, 434, 441, 444, 445, 459, 472, 557, 558, 559, 560, 564, 565, 588, 590, 610, 611, 628, 636, 647, 651, 653, 655, 661, 663, 665, 671, 672, 674, 676, 678, 687, 688, 712, 719, 798, 801, 802, 812, 838, 843, 844, 850, 872, 874, 875, 909, 910, 911, 912, 916, 973, 977, 978, 981, 985, 986, 988, 990, 991, 992, 993, 999, 1003, 1004, 1005, 1010, 1013, 1016, 1021, 1025, 1031, 1034, 1035, 1038, 1039, 1041, 1045, 1048], "grid": [6, 8, 10, 11, 21, 26, 27, 28, 43, 55, 62, 72, 73, 74, 75, 79, 83, 122, 131, 145, 147, 149, 157, 168, 170, 171, 172, 190, 219, 227, 231, 235, 236, 237, 241, 247, 252, 255, 259, 261, 263, 266, 267, 269, 274, 278, 283, 287, 289, 290, 298, 304, 309, 310, 312, 337, 339, 340, 346, 347, 353, 384, 389, 394, 396, 404, 410, 413, 415, 416, 417, 448, 461, 464, 472, 498, 502, 515, 522, 631, 632, 633, 647, 650, 653, 654, 656, 659, 661, 663, 676, 713, 727, 741, 784, 787, 798, 801, 802, 809, 812, 814, 827, 828, 861, 906, 982, 984, 989, 992, 996, 1010, 1011, 1016, 1017, 1019, 1021, 1023, 1027, 1031, 1034, 1035, 1036, 1038, 1039, 1045, 1047, 1048], "search": [6, 47, 55, 72, 73, 74, 75, 126, 145, 147, 149, 150, 153, 168, 219, 231, 236, 237, 252, 255, 261, 263, 266, 267, 269, 274, 278, 283, 285, 287, 289, 304, 309, 322, 340, 347, 353, 364, 371, 379, 380, 382, 384, 394, 396, 404, 409, 410, 413, 416, 417, 418, 420, 443, 448, 450, 452, 457, 458, 461, 464, 471, 472, 478, 502, 515, 522, 557, 558, 559, 560, 564, 565, 566, 579, 599, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 628, 653, 676, 688, 689, 692, 693, 713, 727, 784, 787, 798, 801, 802, 809, 810, 812, 814, 827, 828, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 861, 906, 909, 910, 911, 912, 943, 977, 982, 984, 986, 989, 992, 993, 1003, 1005, 1009, 1010, 1011, 1016, 1017, 1019, 1021, 1027, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1043, 1045, 1046, 1048], "best_estimator_": [6, 55, 74, 75, 79, 104, 236, 252, 263, 266, 289, 798, 801, 802, 812, 978, 1020, 1021, 1038], "023": [6, 270, 902, 997], "76823": 6, "03433306456": 6, "0034189458230957995": 6, "from_estim": [6, 9, 26, 28, 31, 32, 35, 57, 115, 118, 129, 130, 134, 172, 184, 193, 210, 215, 236, 241, 243, 256, 259, 264, 265, 269, 272, 277, 288, 293, 296, 312, 317, 318, 319, 320, 322, 323, 324, 336, 337, 338, 339, 341, 342, 344, 359, 389, 407, 633, 718, 726, 781, 783, 786, 787, 788, 984, 989, 996, 1021, 1028, 1044, 1045, 1046, 1047], "display_label": [6, 256, 697, 1021, 1043], "xticks_rot": [6, 697, 1021], "vertic": [6, 18, 61, 125, 174, 190, 234, 235, 266, 283, 307, 310, 345, 347, 396, 406, 409, 414, 515, 697, 780, 1021], "tight_layout": [6, 8, 26, 28, 32, 41, 53, 56, 66, 74, 76, 87, 96, 97, 98, 107, 113, 115, 120, 122, 124, 127, 131, 133, 135, 155, 157, 162, 165, 170, 171, 173, 174, 180, 181, 185, 191, 199, 201, 209, 212, 216, 219, 222, 235, 240, 257, 258, 274, 283, 285, 287, 297, 308, 309, 310, 311, 312, 317, 321, 338, 354, 358, 359, 1021], "042": [6, 388], "precis": [6, 13, 26, 33, 71, 76, 83, 96, 147, 159, 160, 168, 177, 231, 255, 256, 260, 278, 304, 307, 327, 328, 382, 384, 396, 406, 407, 408, 409, 411, 414, 416, 443, 469, 470, 471, 472, 473, 474, 475, 476, 478, 504, 523, 532, 534, 541, 544, 644, 645, 646, 648, 650, 651, 652, 654, 655, 656, 669, 672, 674, 680, 682, 683, 687, 699, 700, 706, 707, 708, 713, 726, 728, 729, 730, 738, 762, 781, 782, 783, 786, 787, 796, 797, 827, 830, 841, 842, 847, 862, 881, 885, 901, 906, 913, 915, 938, 983, 985, 992, 993, 1004, 1011, 1021, 1025, 1031, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "recal": [6, 26, 33, 71, 83, 101, 147, 168, 231, 255, 260, 278, 280, 304, 327, 328, 382, 396, 409, 504, 604, 700, 706, 707, 708, 712, 713, 726, 728, 729, 730, 781, 782, 783, 786, 787, 827, 830, 862, 881, 885, 901, 985, 1005, 1011, 1021, 1025, 1034, 1035, 1038, 1040, 1041, 1043, 1044, 1045, 1047, 1048], "f1": [6, 26, 33, 71, 147, 260, 304, 327, 328, 331, 413, 713, 728, 729, 737, 782, 989, 990, 1021, 1025, 1035, 1047], "ariel": [6, 377, 1031, 1037], "sharon": [6, 377], "69": [6, 192, 312, 328, 409, 471, 472, 607, 608, 755, 989, 999, 1023], "colin": [6, 377, 1037], "powel": [6, 377], "87": [6, 8, 33, 71, 162, 328, 597, 667, 787, 798, 877, 889, 989, 1025], "donald": [6, 377, 409, 724, 979], "rumsfeld": [6, 377], "63": [6, 359, 379, 416, 557, 558, 565, 566, 699, 725, 798, 812, 911, 912, 989], "georg": [6, 377, 409, 1037, 1043, 1044, 1045, 1046], "bush": [6, 377], "95": [6, 13, 15, 33, 45, 53, 58, 68, 92, 102, 103, 122, 126, 160, 171, 180, 201, 203, 208, 219, 249, 250, 253, 260, 262, 263, 290, 298, 309, 313, 321, 328, 340, 364, 416, 527, 632, 633, 636, 647, 661, 747, 898, 985, 989, 990, 1002, 1025, 1034], "91": [6, 8, 33, 52, 158, 304, 327, 328, 416, 984, 1021, 1025], "146": [6, 416], "gerhard": [6, 377], "schroeder": [6, 377], "hugo": [6, 377, 1037, 1042, 1043, 1044, 1045], "chavez": [6, 377], "90": [6, 10, 13, 15, 33, 75, 106, 107, 125, 126, 127, 147, 158, 174, 181, 192, 198, 200, 203, 208, 219, 247, 271, 273, 309, 313, 323, 327, 328, 364, 368, 382, 388, 413, 563, 780, 798, 825, 830, 882, 984, 989, 1021, 1025, 1046, 1047], "toni": [6, 377, 563, 881, 995, 1044, 1045], "blair": [6, 377], "93": [6, 13, 33, 150, 201, 244, 328, 353, 379, 787, 798, 825, 909, 984, 989, 1021, 1025], "83": [6, 31, 35, 40, 327, 379, 384, 707, 785, 984, 989, 1021, 1025, 1034], "322": [6, 92, 354, 471, 472], "macro": [6, 33, 71, 147, 260, 304, 317, 327, 328, 377, 413, 707, 713, 728, 729, 737, 782, 783, 786, 787, 989, 1025, 1031, 1039, 1047], "avg": [6, 33, 71, 147, 260, 304, 327, 328, 569, 704, 713, 989, 1021, 1025, 1047], "weight": [6, 11, 13, 14, 15, 20, 25, 33, 55, 71, 107, 126, 134, 135, 142, 146, 147, 157, 158, 166, 168, 171, 179, 185, 190, 192, 201, 205, 206, 208, 211, 212, 213, 215, 216, 217, 219, 220, 237, 242, 247, 251, 260, 265, 269, 271, 288, 297, 300, 301, 302, 304, 305, 312, 314, 317, 320, 324, 327, 328, 335, 340, 342, 344, 345, 346, 348, 349, 351, 353, 354, 355, 362, 364, 378, 379, 391, 394, 396, 409, 411, 412, 414, 415, 418, 420, 426, 432, 437, 440, 443, 444, 446, 447, 449, 453, 459, 460, 463, 464, 465, 467, 469, 474, 482, 483, 484, 496, 515, 524, 538, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 586, 589, 590, 591, 593, 597, 602, 603, 610, 611, 628, 632, 633, 634, 635, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 689, 693, 697, 698, 700, 702, 703, 707, 708, 709, 712, 713, 716, 718, 720, 721, 722, 723, 725, 726, 727, 728, 729, 733, 734, 735, 737, 738, 739, 740, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 757, 758, 768, 781, 782, 783, 784, 786, 787, 788, 789, 790, 793, 794, 795, 796, 797, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 857, 858, 859, 860, 863, 866, 880, 881, 882, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 926, 927, 940, 964, 970, 979, 980, 985, 986, 988, 989, 991, 992, 993, 994, 996, 999, 1002, 1003, 1004, 1005, 1010, 1011, 1016, 1023, 1025, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "85": [6, 17, 18, 33, 51, 56, 71, 99, 147, 216, 219, 260, 273, 304, 328, 364, 416, 439, 500, 555, 556, 597, 652, 658, 744, 752, 787, 798, 825, 989, 990, 1021, 1031], "plot_galleri": [6, 96, 1021], "n_row": [6, 20, 96, 406, 424, 451, 453, 511, 513, 1021], "n_col": [6, 20, 96, 239, 424, 451, 453, 511, 513, 632, 1021], "portrait": [6, 414, 1021], "figur": [6, 7, 8, 10, 12, 14, 17, 25, 26, 27, 28, 32, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 51, 52, 53, 55, 57, 59, 60, 62, 63, 64, 65, 66, 68, 79, 83, 86, 90, 91, 92, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 113, 114, 115, 116, 125, 126, 127, 128, 131, 132, 136, 139, 140, 142, 145, 146, 149, 154, 155, 156, 157, 160, 161, 166, 171, 172, 173, 174, 180, 185, 186, 191, 194, 195, 198, 200, 202, 203, 207, 212, 216, 217, 218, 224, 225, 226, 230, 234, 235, 236, 238, 239, 241, 247, 249, 250, 253, 256, 261, 266, 267, 276, 290, 294, 295, 298, 301, 304, 307, 309, 310, 314, 317, 319, 327, 328, 329, 338, 340, 345, 359, 360, 361, 382, 409, 415, 416, 417, 419, 438, 631, 632, 697, 698, 700, 701, 702, 804, 820, 915, 978, 982, 985, 988, 989, 992, 993, 996, 1003, 1004, 1005, 1021, 1023, 1024, 1044], "subplots_adjust": [6, 7, 14, 15, 40, 43, 45, 46, 51, 52, 55, 63, 65, 81, 83, 92, 93, 98, 99, 106, 115, 116, 133, 171, 200, 201, 216, 219, 230, 238, 247, 249, 250, 253, 257, 273, 275, 290, 298, 301, 304, 309, 319, 328, 337, 340, 1021], "bottom": [6, 8, 12, 14, 15, 35, 38, 40, 43, 45, 46, 52, 54, 63, 65, 92, 93, 124, 131, 136, 201, 212, 230, 247, 249, 250, 253, 259, 262, 273, 290, 307, 328, 330, 340, 382, 407, 409, 415, 587, 913, 983, 985, 989, 1010, 1021, 1024], "left": [6, 7, 12, 14, 15, 17, 25, 34, 35, 40, 43, 45, 46, 52, 56, 63, 65, 73, 76, 82, 83, 92, 93, 98, 99, 113, 116, 118, 119, 120, 123, 126, 133, 135, 156, 162, 166, 171, 174, 186, 194, 201, 202, 203, 205, 212, 214, 215, 218, 219, 230, 234, 238, 240, 241, 247, 249, 250, 253, 258, 259, 260, 261, 263, 271, 272, 274, 288, 290, 291, 298, 301, 304, 307, 321, 323, 324, 328, 339, 340, 344, 362, 382, 384, 386, 406, 409, 412, 413, 415, 416, 417, 419, 446, 472, 482, 483, 484, 485, 493, 498, 549, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 587, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 635, 639, 643, 651, 655, 796, 797, 798, 801, 802, 805, 812, 874, 881, 909, 910, 911, 912, 913, 925, 938, 960, 963, 978, 981, 983, 985, 987, 989, 991, 996, 1001, 1003, 1005, 1020, 1021, 1023, 1024, 1038, 1040, 1045], "01": [6, 8, 10, 13, 14, 17, 29, 36, 41, 45, 52, 63, 69, 77, 96, 98, 99, 116, 125, 127, 130, 131, 137, 150, 158, 162, 163, 171, 172, 182, 185, 192, 208, 213, 214, 219, 220, 222, 223, 230, 234, 235, 236, 240, 241, 245, 249, 253, 254, 256, 261, 262, 263, 267, 269, 270, 271, 278, 290, 299, 302, 304, 307, 315, 318, 324, 325, 342, 351, 354, 360, 361, 363, 377, 379, 387, 409, 418, 449, 471, 515, 532, 539, 543, 595, 596, 598, 642, 646, 654, 658, 678, 696, 715, 798, 812, 895, 985, 989, 993, 999, 1001, 1003, 1011, 1021, 1025], "right": [6, 7, 11, 12, 14, 15, 17, 32, 35, 40, 43, 44, 45, 46, 52, 54, 61, 63, 65, 80, 81, 83, 91, 92, 93, 98, 99, 101, 104, 106, 113, 115, 116, 117, 126, 127, 128, 135, 146, 153, 156, 166, 174, 191, 202, 203, 204, 205, 207, 208, 211, 212, 230, 233, 234, 237, 247, 249, 250, 252, 253, 257, 258, 262, 265, 269, 272, 273, 275, 290, 298, 301, 304, 307, 309, 312, 323, 324, 328, 340, 342, 344, 348, 350, 353, 359, 362, 364, 371, 382, 394, 397, 406, 409, 412, 414, 415, 416, 419, 464, 482, 483, 484, 485, 534, 541, 544, 557, 558, 559, 560, 561, 562, 564, 565, 566, 587, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 635, 676, 678, 866, 909, 910, 911, 912, 913, 925, 938, 978, 981, 983, 985, 987, 989, 991, 992, 996, 1001, 1003, 1004, 1005, 1009, 1010, 1014, 1017, 1021, 1023, 1024, 1033, 1039, 1045, 1047, 1048], "99": [6, 8, 13, 26, 33, 45, 52, 63, 96, 219, 230, 234, 240, 247, 249, 260, 263, 307, 328, 369, 375, 379, 386, 413, 416, 417, 492, 647, 661, 671, 787, 848, 984, 989, 999, 1003, 1021, 1027, 1033], "hspace": [6, 14, 15, 45, 46, 63, 96, 219, 230, 247, 249, 250, 253, 290, 319, 328, 337, 1021], "grai": [6, 14, 47, 48, 51, 52, 54, 96, 99, 128, 150, 199, 201, 219, 234, 238, 239, 269, 303, 379, 414, 493, 494, 502, 521, 1021, 1024, 1042], "ytick": [6, 11, 31, 35, 41, 45, 47, 51, 52, 53, 59, 60, 63, 83, 86, 99, 127, 140, 146, 155, 156, 157, 161, 184, 191, 197, 214, 230, 238, 248, 249, 250, 253, 257, 276, 289, 298, 304, 327, 340, 345, 346, 353, 1021], "portion": [6, 8, 82, 124, 150, 271, 368, 377, 379, 382, 388, 396, 787, 822, 839, 978, 988, 992, 1021, 1025], "pred_nam": [6, 1021], "rsplit": [6, 18, 263, 1021], "true_nam": [6, 1021], "ntrue": [6, 327, 328, 1021], "prediction_titl": [6, 1021], "signif": [6, 981, 1021], "eigenface_titl": [6, 1021], "convolut": [6, 161, 1021], "network": [6, 240, 303, 368, 369, 370, 371, 376, 377, 394, 396, 397, 403, 409, 414, 416, 421, 496, 533, 535, 567, 568, 696, 740, 858, 859, 985, 987, 989, 1003, 1005, 1009, 1012, 1021, 1026, 1027, 1031, 1045], "famili": [6, 368, 370, 396, 409, 412, 414, 417, 418, 592, 595, 596, 598, 599, 600, 606, 858, 859, 877, 889, 985, 999, 1003, 1021, 1023, 1035, 1045], "outsid": [6, 9, 20, 122, 202, 203, 233, 244, 394, 417, 446, 635, 880, 995, 1021, 1039], "scope": [6, 20, 368, 370, 382, 394, 417, 1009, 1010, 1021], "scikit": [6, 8, 10, 12, 13, 15, 17, 18, 32, 33, 51, 56, 71, 72, 111, 117, 118, 119, 120, 121, 123, 130, 133, 147, 149, 150, 162, 165, 166, 168, 171, 172, 173, 174, 177, 182, 189, 190, 201, 202, 203, 219, 229, 232, 240, 241, 242, 243, 244, 255, 258, 259, 267, 271, 274, 278, 280, 283, 285, 287, 290, 292, 313, 316, 325, 344, 353, 354, 358, 359, 364, 369, 370, 371, 374, 376, 377, 378, 379, 381, 382, 385, 388, 389, 390, 391, 395, 396, 400, 402, 403, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 423, 424, 426, 427, 428, 431, 432, 433, 438, 443, 446, 447, 450, 457, 459, 464, 465, 467, 468, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 512, 515, 521, 524, 538, 561, 562, 564, 565, 567, 576, 581, 582, 583, 585, 586, 589, 599, 602, 611, 626, 628, 630, 632, 634, 638, 640, 646, 648, 652, 658, 669, 680, 688, 700, 701, 702, 717, 731, 741, 747, 777, 778, 779, 787, 794, 798, 799, 800, 801, 802, 803, 804, 812, 815, 816, 817, 818, 819, 820, 823, 824, 827, 829, 830, 843, 845, 861, 862, 864, 866, 868, 871, 873, 874, 875, 876, 880, 881, 882, 885, 898, 899, 901, 906, 909, 910, 932, 933, 955, 956, 957, 978, 979, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 999, 1002, 1003, 1004, 1005, 1008, 1011, 1013, 1019, 1020, 1021, 1023, 1024, 1027, 1028, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "librari": [6, 262, 320, 322, 360, 364, 374, 376, 377, 380, 381, 382, 383, 388, 394, 395, 396, 399, 405, 658, 901, 902, 903, 904, 906, 907, 957, 985, 989, 1004, 1005, 1009, 1010, 1014, 1021, 1025, 1029, 1034, 1038, 1039, 1040, 1041, 1042, 1044, 1048], "reader": [6, 43, 320, 370, 382, 1021], "pytorch": [6, 394, 1009, 1010, 1021, 1047, 1048], "tensorflow": [6, 394, 1009, 1021], "implement": [6, 7, 13, 14, 17, 18, 47, 57, 82, 96, 119, 166, 174, 177, 185, 186, 190, 215, 219, 222, 230, 236, 237, 260, 262, 271, 280, 283, 285, 287, 290, 310, 317, 318, 319, 320, 321, 323, 353, 355, 368, 369, 370, 376, 377, 379, 380, 382, 383, 384, 387, 388, 390, 391, 396, 399, 400, 403, 405, 406, 408, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 437, 442, 443, 444, 446, 447, 448, 449, 450, 475, 493, 496, 508, 532, 533, 534, 535, 536, 538, 541, 542, 543, 553, 554, 555, 557, 558, 561, 562, 563, 567, 572, 582, 588, 589, 591, 593, 597, 601, 610, 611, 632, 633, 640, 641, 645, 646, 653, 657, 658, 659, 663, 664, 668, 671, 672, 674, 675, 676, 677, 678, 684, 685, 686, 687, 688, 691, 692, 695, 707, 711, 720, 734, 737, 741, 777, 781, 787, 788, 796, 798, 801, 802, 804, 812, 816, 817, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 833, 834, 836, 837, 838, 839, 840, 843, 844, 846, 849, 851, 852, 857, 858, 859, 861, 883, 891, 892, 898, 901, 902, 903, 904, 905, 906, 907, 937, 938, 946, 949, 954, 957, 960, 978, 979, 981, 983, 985, 986, 987, 988, 990, 991, 993, 994, 995, 999, 1001, 1002, 1005, 1006, 1007, 1009, 1010, 1012, 1014, 1016, 1021, 1022, 1023, 1024, 1025, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "895": [6, 16, 354, 1011], "plot_face_recognit": [6, 16, 1011], "quantiz": [6, 37, 47, 59, 69, 99, 168, 376, 377, 409, 443, 447, 449, 506, 778, 866, 963, 999, 1011], "k": [6, 11, 12, 15, 17, 18, 20, 25, 27, 31, 32, 37, 38, 39, 41, 43, 47, 50, 51, 54, 56, 57, 61, 64, 66, 69, 75, 76, 81, 91, 92, 93, 96, 99, 102, 103, 104, 113, 115, 122, 126, 129, 131, 132, 134, 135, 139, 142, 146, 147, 150, 154, 156, 157, 161, 162, 166, 168, 171, 172, 173, 174, 181, 183, 184, 186, 195, 198, 203, 205, 213, 215, 234, 236, 238, 239, 240, 247, 250, 258, 262, 265, 266, 271, 272, 275, 285, 287, 290, 291, 292, 293, 294, 296, 297, 298, 308, 309, 310, 311, 314, 317, 321, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 352, 353, 355, 356, 362, 364, 369, 376, 377, 379, 382, 390, 391, 396, 400, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 419, 421, 440, 443, 446, 447, 448, 449, 450, 451, 452, 453, 459, 460, 462, 469, 472, 488, 502, 504, 506, 512, 523, 531, 537, 541, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 581, 589, 590, 591, 592, 594, 595, 596, 598, 599, 600, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 631, 639, 640, 648, 650, 651, 653, 654, 655, 656, 658, 659, 663, 664, 665, 666, 667, 669, 679, 680, 682, 683, 684, 685, 686, 688, 691, 695, 696, 704, 705, 708, 717, 725, 736, 742, 755, 757, 758, 760, 765, 768, 773, 774, 775, 776, 778, 792, 793, 794, 796, 797, 799, 803, 805, 806, 807, 810, 813, 814, 816, 817, 819, 825, 836, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 862, 866, 867, 868, 872, 873, 874, 876, 877, 881, 889, 894, 908, 916, 924, 933, 938, 963, 978, 979, 981, 982, 983, 985, 986, 987, 988, 991, 993, 994, 995, 997, 1002, 1003, 1004, 1005, 1009, 1011, 1013, 1020, 1026, 1027, 1031, 1032, 1033, 1034, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048], "spars": [6, 7, 8, 12, 14, 18, 20, 31, 35, 40, 41, 55, 56, 58, 71, 78, 79, 80, 82, 84, 95, 97, 108, 118, 131, 168, 170, 179, 180, 186, 189, 190, 193, 195, 196, 200, 217, 220, 234, 236, 256, 263, 269, 285, 302, 304, 318, 322, 331, 352, 355, 356, 362, 368, 374, 376, 377, 378, 382, 384, 385, 386, 387, 394, 395, 396, 409, 410, 416, 417, 419, 420, 424, 431, 438, 440, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 457, 459, 460, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 487, 488, 489, 496, 497, 503, 508, 523, 524, 526, 527, 528, 529, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 570, 571, 581, 582, 585, 586, 588, 589, 590, 591, 593, 594, 603, 604, 605, 606, 607, 608, 609, 629, 630, 631, 633, 638, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 695, 696, 697, 698, 700, 701, 702, 703, 712, 713, 714, 728, 729, 730, 733, 737, 738, 739, 753, 754, 759, 760, 762, 763, 765, 766, 767, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 786, 791, 792, 795, 798, 801, 802, 812, 819, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 843, 844, 845, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 868, 870, 871, 872, 873, 874, 876, 878, 879, 880, 881, 883, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 917, 919, 920, 921, 922, 927, 935, 938, 939, 942, 943, 944, 952, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 975, 979, 982, 985, 986, 987, 989, 990, 992, 1002, 1004, 1005, 1010, 1011, 1012, 1023, 1024, 1025, 1026, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "demonstr": [7, 13, 20, 21, 22, 26, 33, 37, 41, 44, 56, 62, 69, 71, 73, 90, 113, 117, 124, 127, 147, 148, 161, 162, 168, 174, 202, 203, 237, 243, 244, 249, 253, 255, 258, 265, 268, 271, 276, 278, 287, 290, 297, 306, 308, 309, 311, 314, 315, 319, 326, 328, 329, 332, 333, 338, 344, 353, 354, 355, 364, 370, 377, 378, 382, 387, 394, 400, 405, 409, 413, 416, 447, 502, 512, 520, 697, 703, 713, 741, 797, 798, 866, 897, 909, 978, 979, 983, 989, 990, 991, 992, 999, 1002, 1005, 1008, 1011], "diabet": [7, 127, 136, 138, 140, 143, 149, 150, 166, 168, 188, 189, 190, 197, 198, 258, 275, 375, 416, 501, 652, 653, 798, 803, 822, 823, 824, 997, 1011, 1016, 1020, 1027], "regress": [7, 10, 14, 26, 28, 31, 55, 70, 72, 73, 77, 81, 82, 85, 88, 91, 97, 98, 99, 105, 107, 112, 113, 116, 118, 119, 120, 121, 124, 125, 128, 132, 133, 137, 141, 150, 152, 154, 162, 163, 165, 166, 168, 170, 171, 172, 173, 174, 179, 183, 185, 186, 187, 188, 191, 195, 196, 198, 202, 204, 205, 206, 207, 210, 212, 217, 220, 225, 229, 231, 239, 240, 241, 242, 244, 245, 258, 270, 273, 274, 275, 276, 283, 286, 288, 293, 296, 299, 302, 303, 304, 307, 308, 311, 312, 314, 319, 320, 321, 322, 324, 335, 336, 337, 348, 349, 351, 353, 357, 358, 362, 363, 369, 370, 371, 374, 375, 377, 379, 382, 384, 387, 390, 391, 394, 395, 396, 404, 407, 411, 412, 413, 414, 418, 432, 437, 464, 465, 474, 484, 489, 490, 492, 496, 501, 502, 504, 505, 512, 516, 517, 518, 524, 528, 531, 535, 537, 539, 541, 542, 543, 545, 546, 548, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 564, 565, 566, 567, 570, 571, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 606, 609, 610, 611, 614, 615, 622, 623, 625, 631, 632, 633, 634, 635, 637, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 701, 706, 721, 722, 723, 727, 740, 741, 744, 745, 746, 747, 748, 749, 750, 751, 752, 784, 789, 790, 798, 801, 802, 804, 812, 820, 824, 825, 827, 828, 832, 834, 835, 843, 844, 849, 851, 852, 858, 859, 861, 862, 865, 866, 868, 874, 875, 876, 878, 881, 882, 885, 890, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 915, 921, 924, 926, 942, 978, 979, 981, 984, 986, 996, 997, 999, 1000, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1019, 1022, 1027, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "patient": [7, 136, 150, 166, 379, 390, 413, 985, 1023], "diseas": [7, 136, 150, 166, 265, 379, 712, 989, 1023], "newsgroup": [7, 15, 20, 234, 263, 331, 354, 355, 375, 406, 417, 488, 489, 1017, 1027], "post": [7, 15, 20, 71, 168, 321, 353, 354, 355, 357, 362, 363, 368, 377, 381, 382, 386, 387, 395, 409, 448, 488, 489, 500, 712, 827, 909, 989, 1005, 1011, 1014, 1025, 1042], "about": [7, 11, 30, 45, 54, 58, 63, 71, 87, 90, 122, 147, 162, 168, 170, 171, 174, 205, 218, 230, 237, 259, 260, 262, 264, 269, 283, 290, 312, 317, 319, 320, 321, 322, 323, 328, 353, 355, 362, 364, 368, 369, 371, 375, 377, 381, 382, 386, 387, 388, 395, 396, 397, 403, 408, 413, 414, 417, 419, 438, 492, 494, 495, 496, 497, 500, 501, 502, 504, 505, 510, 515, 561, 562, 593, 594, 607, 608, 614, 633, 640, 676, 678, 742, 798, 804, 812, 820, 830, 880, 922, 979, 985, 986, 988, 990, 992, 995, 996, 999, 1000, 1002, 1004, 1005, 1007, 1009, 1014, 1016, 1017, 1023, 1025, 1036, 1037, 1047], "sgdclassifi": [7, 8, 208, 209, 210, 211, 212, 213, 214, 235, 270, 331, 342, 353, 364, 368, 370, 388, 396, 407, 408, 417, 638, 640, 641, 642, 646, 658, 666, 668, 901, 906, 981, 985, 990, 1003, 1004, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1048], "stochast": [7, 59, 124, 125, 128, 141, 168, 177, 179, 189, 190, 208, 220, 224, 226, 230, 235, 291, 293, 294, 300, 303, 305, 320, 338, 339, 409, 414, 416, 462, 488, 496, 502, 503, 504, 514, 522, 536, 544, 559, 560, 571, 604, 627, 631, 639, 658, 659, 668, 672, 674, 676, 677, 678, 679, 687, 688, 689, 690, 692, 827, 850, 857, 858, 859, 862, 871, 905, 937, 938, 963, 978, 992, 993, 995, 1011, 1012, 1026, 1027, 1031, 1032, 1035, 1036, 1038, 1040, 1042], "gradient": [7, 13, 47, 67, 72, 112, 113, 117, 118, 120, 121, 130, 133, 136, 137, 158, 159, 160, 168, 173, 174, 179, 181, 189, 190, 203, 220, 225, 230, 235, 261, 263, 265, 280, 291, 302, 307, 311, 313, 324, 338, 339, 347, 396, 408, 409, 419, 452, 462, 466, 467, 488, 490, 496, 501, 503, 520, 553, 554, 559, 560, 561, 562, 564, 565, 571, 586, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 631, 634, 635, 639, 648, 649, 658, 659, 668, 669, 672, 674, 676, 677, 678, 680, 687, 692, 694, 695, 740, 741, 747, 749, 798, 801, 802, 803, 824, 827, 857, 858, 859, 862, 874, 875, 905, 963, 986, 989, 992, 993, 994, 995, 1009, 1011, 1012, 1027, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1044, 1046, 1048], "descent": [7, 14, 124, 125, 168, 179, 186, 189, 220, 230, 235, 291, 320, 338, 339, 414, 416, 471, 472, 478, 488, 496, 503, 531, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 571, 631, 639, 646, 647, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 668, 672, 674, 676, 677, 678, 681, 682, 683, 684, 687, 694, 827, 858, 859, 862, 901, 905, 963, 986, 993, 995, 1004, 1011, 1012, 1023, 1027, 1031, 1034, 1035, 1036, 1038, 1040, 1042, 1044, 1045, 1046], "nusvr": [7, 368, 907, 1004, 1033, 1039, 1041, 1042, 1043, 1045, 1046], "nu": [7, 9, 11, 162, 215, 230, 339, 368, 416, 419, 619, 677, 903, 904, 905, 995, 1003, 1004, 1042, 1046], "vector": [7, 8, 9, 10, 12, 15, 17, 20, 21, 27, 28, 31, 33, 37, 41, 49, 69, 73, 90, 96, 98, 99, 146, 153, 161, 182, 188, 205, 206, 213, 217, 235, 236, 243, 260, 262, 263, 267, 291, 304, 307, 332, 336, 337, 340, 341, 342, 343, 344, 345, 348, 350, 351, 354, 368, 370, 371, 377, 387, 388, 391, 394, 396, 406, 407, 409, 411, 412, 413, 414, 416, 419, 420, 421, 437, 443, 444, 445, 447, 449, 450, 451, 453, 464, 465, 467, 468, 482, 483, 484, 485, 487, 489, 497, 509, 512, 521, 524, 531, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 549, 550, 551, 552, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 617, 618, 619, 620, 622, 623, 625, 631, 638, 640, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 691, 692, 693, 695, 699, 719, 734, 762, 767, 768, 769, 770, 772, 773, 774, 776, 777, 798, 801, 802, 812, 825, 828, 829, 830, 836, 837, 838, 839, 840, 843, 844, 845, 847, 848, 849, 851, 852, 853, 858, 859, 866, 868, 873, 881, 885, 888, 899, 901, 902, 903, 904, 905, 906, 907, 908, 921, 935, 937, 938, 952, 978, 981, 982, 983, 985, 986, 987, 989, 990, 991, 993, 994, 995, 999, 1003, 1005, 1011, 1012, 1016, 1019, 1022, 1025, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1037, 1039, 1040, 1042, 1044], "gradientboostingregressor": [7, 124, 126, 127, 133, 136, 368, 387, 394, 554, 562, 632, 633, 985, 989, 990, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048], "forward": [7, 113, 150, 237, 319, 368, 382, 400, 418, 508, 509, 539, 543, 553, 559, 560, 585, 586, 602, 668, 685, 686, 861, 865, 985, 1010, 1043], "wise": [7, 27, 49, 161, 202, 230, 272, 307, 354, 368, 396, 407, 409, 413, 414, 418, 458, 531, 534, 537, 541, 545, 546, 549, 550, 553, 555, 556, 559, 560, 592, 595, 596, 598, 599, 600, 606, 640, 652, 700, 753, 829, 878, 891, 892, 895, 962, 964, 965, 966, 967, 970, 981, 983, 985, 989, 990, 1003, 1010, 1031, 1036, 1039, 1040, 1041], "fashion": [7, 118, 124, 209, 271, 369, 396, 406, 407, 409, 414, 416, 553, 557, 558, 559, 560, 564, 565, 566, 602, 627, 827, 850, 865, 868, 874, 885, 909, 910, 911, 912, 960, 979, 985, 989, 999, 1040], "notic": [7, 13, 26, 27, 35, 54, 58, 81, 116, 118, 119, 126, 149, 180, 185, 230, 243, 259, 260, 262, 263, 265, 271, 272, 285, 312, 344, 353, 354, 355, 364, 387, 397, 413, 496, 541, 563, 978, 988, 989, 995, 1025, 1028, 1044], "faster": [7, 20, 40, 65, 74, 96, 118, 119, 123, 124, 126, 150, 172, 177, 187, 201, 203, 216, 217, 219, 236, 285, 287, 303, 318, 320, 321, 353, 354, 355, 368, 376, 382, 390, 391, 396, 408, 409, 414, 418, 419, 421, 443, 447, 449, 451, 452, 453, 462, 508, 531, 532, 533, 536, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 553, 559, 560, 561, 562, 643, 646, 647, 652, 653, 658, 659, 660, 661, 662, 663, 672, 674, 684, 687, 691, 695, 725, 755, 777, 778, 779, 841, 842, 846, 858, 859, 876, 878, 880, 890, 894, 938, 978, 982, 985, 990, 992, 993, 996, 1001, 1003, 1004, 1005, 1009, 1013, 1021, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "10_000": [7, 26, 76, 118, 126, 170, 177, 234, 265, 285, 559, 560, 564, 565, 878], "vari": [7, 13, 32, 35, 45, 47, 56, 63, 66, 76, 93, 119, 120, 122, 131, 142, 149, 155, 157, 168, 171, 172, 174, 190, 192, 195, 199, 208, 227, 235, 240, 252, 258, 262, 265, 272, 300, 305, 307, 309, 310, 312, 323, 326, 332, 333, 340, 343, 345, 349, 350, 364, 368, 370, 377, 396, 441, 445, 446, 500, 508, 514, 515, 522, 559, 560, 564, 565, 646, 647, 650, 651, 652, 653, 654, 655, 660, 661, 662, 663, 681, 684, 703, 762, 817, 820, 825, 827, 828, 858, 862, 866, 881, 898, 906, 909, 910, 963, 981, 984, 985, 989, 992, 993, 1002, 1005, 1011, 1014, 1038, 1039, 1047], "relev": [7, 9, 20, 78, 82, 84, 104, 148, 150, 168, 180, 195, 204, 262, 263, 269, 364, 368, 370, 377, 379, 381, 382, 384, 386, 387, 388, 396, 397, 400, 411, 412, 418, 419, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 533, 534, 538, 541, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 594, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 725, 739, 755, 799, 800, 801, 802, 805, 807, 816, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 846, 848, 851, 852, 858, 859, 861, 864, 866, 867, 868, 873, 879, 880, 881, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 989, 990, 995, 1006, 1010, 1011, 1034, 1039, 1043, 1045], "next": [7, 26, 61, 81, 122, 123, 127, 136, 160, 170, 174, 194, 198, 201, 231, 239, 243, 244, 249, 257, 268, 283, 312, 313, 314, 319, 328, 353, 358, 362, 364, 371, 380, 382, 384, 386, 406, 409, 410, 413, 416, 508, 509, 610, 634, 692, 698, 700, 702, 780, 796, 797, 827, 955, 978, 982, 988, 989, 999, 1014, 1028, 1031, 1044, 1045], "ham": [7, 450, 457, 581, 699, 703, 709, 733, 740, 777, 778, 779, 795, 992], "loss": [7, 13, 25, 26, 27, 28, 80, 106, 119, 125, 126, 127, 128, 153, 154, 168, 179, 183, 191, 194, 203, 205, 206, 208, 209, 213, 219, 220, 236, 270, 302, 303, 312, 320, 324, 331, 337, 338, 342, 344, 348, 353, 394, 396, 407, 408, 414, 419, 464, 465, 496, 508, 509, 532, 538, 539, 540, 543, 547, 552, 553, 554, 558, 559, 560, 561, 562, 565, 643, 646, 649, 658, 659, 666, 667, 668, 669, 670, 671, 672, 676, 677, 678, 679, 703, 706, 709, 722, 733, 734, 739, 740, 741, 744, 745, 746, 747, 748, 749, 750, 751, 752, 789, 790, 795, 798, 801, 802, 812, 823, 824, 827, 858, 859, 861, 862, 865, 866, 874, 875, 876, 881, 901, 902, 907, 908, 910, 912, 938, 942, 982, 985, 993, 997, 1002, 1003, 1004, 1005, 1011, 1025, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "eustach": [7, 8, 10, 1014, 1033, 1034], "diemert": [7, 8, 10, 1014, 1033, 1034], "maria": [7, 127, 133, 150, 166, 409, 1042, 1043, 1044, 1045, 1046], "telenczuk": [7, 127, 133, 150, 166, 1040, 1043, 1044, 1046], "github": [7, 8, 12, 27, 72, 73, 118, 120, 121, 127, 129, 130, 133, 136, 147, 158, 166, 171, 172, 173, 182, 231, 232, 233, 237, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 285, 304, 313, 318, 319, 321, 322, 324, 329, 362, 376, 380, 381, 385, 386, 387, 388, 390, 394, 396, 397, 399, 403, 405, 452, 462, 508, 536, 691, 692, 695, 992, 1008, 1009, 1013, 1014, 1025, 1036, 1041], "com": [7, 8, 11, 12, 15, 17, 21, 22, 25, 43, 49, 51, 58, 66, 71, 72, 111, 113, 114, 115, 116, 117, 118, 125, 127, 128, 132, 133, 153, 156, 158, 160, 162, 166, 181, 201, 203, 208, 218, 219, 223, 225, 227, 233, 247, 249, 250, 263, 266, 285, 307, 308, 311, 312, 353, 354, 376, 377, 380, 382, 386, 387, 388, 390, 394, 399, 405, 409, 442, 452, 462, 508, 534, 536, 541, 671, 691, 695, 705, 992, 1007, 1013, 1036, 1038, 1041], "maikia": [7, 127, 133, 166, 1039, 1040, 1042, 1043], "lemaitre58": [7, 133, 153, 158, 160, 162, 223, 307], "gmail": [7, 11, 15, 17, 25, 43, 49, 58, 66, 71, 72, 111, 113, 114, 115, 116, 117, 118, 125, 127, 128, 132, 133, 153, 156, 158, 160, 162, 181, 201, 203, 218, 219, 223, 225, 233, 247, 249, 250, 263, 266, 307, 312, 353, 354], "licens": [7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 21, 22, 25, 26, 27, 28, 31, 32, 33, 38, 40, 41, 43, 46, 47, 48, 49, 52, 53, 54, 55, 58, 62, 66, 67, 68, 71, 72, 74, 75, 76, 83, 90, 91, 96, 98, 100, 101, 102, 103, 104, 107, 111, 113, 114, 115, 116, 117, 118, 119, 124, 125, 127, 128, 132, 133, 150, 153, 154, 156, 157, 158, 159, 160, 162, 166, 177, 183, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 206, 208, 209, 217, 218, 219, 223, 224, 225, 227, 230, 233, 235, 236, 238, 240, 247, 249, 263, 266, 268, 275, 283, 285, 287, 293, 294, 295, 297, 298, 301, 304, 307, 308, 309, 310, 311, 312, 327, 328, 329, 330, 332, 344, 345, 348, 349, 353, 354, 355, 376, 396, 403, 1005, 1014], "hamming_loss": [7, 703, 795, 989, 1033, 1037, 1040], "mean_squared_error": [7, 124, 126, 127, 197, 201, 203, 205, 207, 219, 364, 416, 751, 989, 1032, 1034, 1041, 1042, 1048], "seed": [7, 11, 27, 35, 40, 41, 45, 46, 53, 55, 58, 60, 61, 65, 66, 72, 79, 80, 81, 93, 97, 102, 103, 116, 122, 142, 145, 173, 191, 196, 199, 204, 207, 210, 214, 218, 225, 248, 250, 251, 252, 253, 265, 268, 276, 290, 291, 292, 297, 345, 346, 350, 354, 364, 369, 384, 391, 394, 396, 409, 413, 414, 443, 447, 448, 450, 452, 457, 459, 460, 461, 462, 471, 472, 473, 536, 544, 553, 554, 555, 556, 559, 560, 627, 646, 647, 652, 653, 660, 661, 662, 663, 677, 689, 691, 693, 695, 796, 797, 802, 832, 835, 850, 904, 924, 937, 938, 954, 978, 979, 984, 986, 1023, 1035, 1036, 1040, 1041, 1047], "fetch_20newsgroups_vector": [7, 216, 234, 377, 1031, 1041, 1043, 1048], "generate_data": [7, 34], "load_diabet": [7, 127, 136, 139, 150, 166, 186, 188, 189, 190, 197, 198, 241, 258, 322, 416, 558, 562, 568, 673, 701, 822, 823, 824, 910, 912, 997, 1020, 1023, 1037, 1042, 1045], "elif": [7, 8, 17, 181, 203, 238, 249, 290, 877], "subset": [7, 20, 21, 27, 28, 33, 71, 72, 81, 82, 120, 122, 123, 124, 139, 147, 150, 172, 174, 190, 202, 216, 217, 218, 219, 233, 235, 239, 240, 260, 263, 265, 271, 272, 274, 280, 312, 313, 319, 327, 331, 353, 354, 355, 364, 377, 382, 390, 394, 396, 406, 407, 409, 410, 413, 416, 417, 419, 426, 437, 449, 464, 466, 467, 469, 488, 489, 492, 493, 497, 508, 549, 550, 551, 553, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 569, 602, 610, 629, 639, 640, 641, 642, 651, 655, 658, 666, 667, 668, 671, 674, 675, 676, 677, 678, 679, 697, 703, 704, 713, 716, 718, 730, 733, 754, 756, 792, 795, 800, 825, 827, 829, 830, 831, 832, 836, 837, 838, 839, 840, 843, 848, 851, 858, 867, 896, 897, 901, 903, 906, 909, 911, 917, 978, 985, 989, 990, 1000, 1002, 1004, 1005, 1025, 1034, 1039, 1040, 1042, 1044], "regression_data": 7, "classification_data": 7, "calcul": [7, 25, 27, 28, 34, 47, 60, 81, 111, 112, 113, 117, 134, 137, 166, 168, 174, 197, 205, 206, 218, 235, 237, 261, 262, 268, 272, 276, 283, 338, 344, 345, 364, 368, 389, 396, 406, 407, 409, 413, 414, 416, 420, 438, 443, 444, 446, 448, 450, 451, 453, 455, 456, 471, 472, 478, 481, 536, 547, 553, 564, 569, 597, 611, 620, 632, 633, 634, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 672, 673, 674, 675, 679, 681, 684, 688, 690, 692, 694, 707, 716, 728, 729, 734, 735, 737, 743, 749, 750, 753, 763, 768, 770, 771, 772, 773, 777, 780, 782, 783, 786, 787, 788, 791, 792, 794, 805, 807, 822, 826, 839, 841, 842, 879, 880, 881, 887, 891, 901, 902, 927, 940, 981, 983, 985, 986, 987, 989, 991, 992, 993, 997, 999, 1002, 1004, 1011, 1020, 1023, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "given": [7, 10, 11, 13, 28, 31, 38, 50, 59, 61, 79, 86, 97, 101, 119, 129, 131, 133, 153, 160, 171, 172, 185, 201, 202, 205, 219, 223, 230, 234, 235, 237, 239, 240, 241, 258, 262, 263, 264, 265, 271, 288, 291, 292, 293, 309, 313, 320, 353, 354, 355, 361, 368, 370, 377, 381, 382, 384, 386, 388, 390, 391, 394, 396, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 426, 435, 436, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 458, 459, 460, 461, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 481, 482, 483, 484, 487, 496, 501, 503, 505, 523, 533, 534, 536, 538, 539, 540, 543, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 593, 594, 601, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 631, 632, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 687, 688, 690, 691, 697, 698, 699, 700, 701, 702, 704, 705, 706, 712, 714, 717, 718, 720, 723, 725, 726, 733, 735, 736, 739, 751, 754, 755, 757, 758, 763, 773, 777, 780, 781, 783, 786, 787, 788, 793, 794, 796, 797, 798, 799, 800, 801, 802, 804, 805, 807, 810, 812, 816, 820, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 887, 888, 890, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 916, 925, 926, 927, 945, 946, 947, 948, 973, 977, 978, 981, 983, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 999, 1002, 1003, 1004, 1005, 1014, 1016, 1020, 1021, 1023, 1024, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "round": [7, 9, 26, 86, 119, 165, 166, 208, 219, 262, 268, 309, 311, 353, 396, 450, 456, 457, 564, 565, 593, 594, 597, 627, 692, 713, 800, 810, 866, 898, 913, 915, 979, 993, 1005, 1033, 1035, 1037, 1039, 1040, 1042, 1044, 1045, 1047, 1048], "changing_param": 7, "collect": [7, 10, 12, 13, 17, 20, 26, 117, 129, 136, 150, 158, 166, 174, 189, 194, 225, 233, 265, 269, 354, 355, 368, 377, 379, 386, 399, 408, 413, 414, 416, 417, 446, 464, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 569, 570, 581, 583, 584, 588, 589, 590, 591, 632, 728, 729, 737, 782, 783, 786, 800, 804, 805, 807, 820, 947, 960, 963, 978, 984, 985, 989, 995, 1000, 1010, 1014, 1020, 1025, 1033, 1043], "chang": [7, 17, 26, 27, 96, 100, 101, 116, 119, 127, 154, 165, 170, 171, 174, 202, 203, 205, 206, 241, 242, 257, 262, 269, 272, 311, 317, 318, 319, 320, 321, 322, 323, 324, 328, 340, 344, 355, 362, 364, 368, 369, 370, 377, 384, 385, 386, 387, 390, 394, 396, 400, 409, 413, 416, 417, 419, 421, 434, 437, 440, 443, 444, 447, 449, 452, 454, 459, 462, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 493, 494, 496, 504, 508, 509, 512, 513, 514, 522, 526, 527, 531, 533, 534, 535, 536, 537, 538, 539, 540, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 577, 578, 579, 580, 581, 582, 588, 589, 590, 591, 593, 594, 597, 602, 610, 611, 613, 614, 615, 617, 619, 620, 622, 623, 625, 627, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 690, 692, 694, 700, 704, 707, 712, 716, 717, 728, 729, 735, 736, 740, 754, 756, 777, 783, 784, 786, 794, 796, 797, 798, 799, 800, 801, 802, 803, 805, 807, 812, 816, 817, 819, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 851, 852, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 873, 874, 880, 881, 882, 889, 890, 895, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 915, 919, 921, 922, 933, 938, 948, 955, 956, 957, 959, 978, 979, 980, 988, 989, 990, 992, 999, 1002, 1003, 1004, 1005, 1007, 1010, 1016, 1023, 1025, 1029, 1030], "affect": [7, 26, 81, 160, 170, 171, 205, 226, 240, 241, 265, 272, 312, 323, 364, 368, 369, 370, 378, 396, 398, 407, 409, 412, 413, 415, 417, 420, 422, 444, 450, 457, 473, 475, 479, 549, 550, 569, 699, 712, 787, 798, 801, 802, 803, 812, 816, 817, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 881, 882, 892, 906, 988, 992, 1004, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "complexity_comput": [7, 10], "benchmark_influ": 7, "conf": [7, 28, 386, 407, 413, 836, 991, 1045], "prediction_tim": [7, 8], "prediction_pow": 7, "param_valu": 7, "changing_param_valu": 7, "tuned_param": 7, "postfit_hook": 7, "append": [7, 8, 9, 12, 13, 17, 18, 26, 34, 38, 41, 45, 51, 62, 72, 104, 116, 117, 119, 124, 126, 140, 166, 174, 194, 205, 206, 208, 209, 216, 219, 235, 236, 262, 265, 271, 272, 275, 301, 302, 313, 330, 340, 343, 353, 354, 355, 358, 362, 388, 396, 410, 417, 658, 659, 901, 902, 908, 928, 999, 1020], "start_tim": [7, 10, 20, 120, 121, 124, 133, 153, 190, 223], "elapsed_tim": [7, 40, 68, 120, 121, 133, 218], "float": [7, 10, 12, 13, 17, 20, 42, 46, 47, 48, 49, 54, 61, 62, 66, 67, 68, 72, 99, 103, 142, 161, 171, 187, 191, 225, 261, 262, 266, 270, 348, 355, 368, 376, 377, 382, 391, 396, 409, 410, 417, 418, 420, 421, 422, 426, 428, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 461, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 487, 492, 493, 494, 496, 498, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 524, 525, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 583, 584, 588, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 610, 611, 613, 614, 615, 616, 617, 619, 620, 622, 623, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 758, 765, 768, 774, 775, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 804, 812, 815, 818, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 861, 864, 867, 868, 874, 875, 877, 879, 881, 882, 883, 884, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 919, 921, 922, 925, 935, 936, 952, 964, 970, 975, 979, 989, 990, 992, 993, 999, 1004, 1005, 1031, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "pred_scor": 7, "prediction_performance_comput": 7, "4f": [7, 8, 20, 116, 125, 127, 216, 217, 219, 312], "prediction_performance_label": 7, "necessari": [7, 14, 117, 185, 201, 206, 247, 262, 263, 269, 287, 344, 360, 368, 377, 380, 381, 382, 383, 384, 385, 386, 390, 394, 409, 411, 416, 452, 462, 488, 489, 491, 492, 493, 494, 495, 497, 534, 644, 645, 646, 652, 656, 657, 660, 661, 662, 663, 664, 665, 671, 673, 675, 676, 691, 695, 794, 864, 873, 884, 888, 894, 978, 981, 985, 988, 991, 999, 1005, 1025, 1031, 1039], "defin": [7, 12, 35, 54, 56, 58, 67, 71, 72, 74, 87, 96, 101, 111, 113, 114, 133, 150, 153, 160, 161, 162, 172, 173, 174, 180, 202, 209, 218, 219, 230, 234, 237, 241, 243, 247, 252, 262, 263, 265, 269, 271, 272, 273, 274, 280, 285, 304, 307, 318, 324, 340, 344, 348, 353, 354, 368, 378, 381, 382, 383, 384, 388, 389, 391, 394, 395, 396, 403, 404, 405, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 419, 425, 430, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 459, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 489, 519, 520, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 622, 623, 627, 628, 629, 630, 632, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 696, 697, 699, 708, 710, 716, 721, 722, 723, 724, 727, 730, 737, 740, 744, 745, 747, 749, 750, 752, 753, 756, 759, 765, 780, 784, 789, 790, 791, 792, 796, 797, 798, 801, 802, 804, 812, 820, 824, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 861, 864, 865, 866, 867, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 888, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 925, 927, 930, 936, 947, 949, 973, 978, 979, 985, 986, 987, 988, 990, 991, 992, 994, 995, 996, 997, 999, 1001, 1003, 1004, 1005, 1010, 1021, 1024, 1027, 1028, 1033, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1048], "complexity_label": [7, 10], "type": [7, 17, 54, 55, 66, 70, 71, 77, 82, 91, 93, 106, 122, 123, 125, 158, 166, 168, 170, 171, 172, 177, 185, 201, 203, 232, 237, 242, 244, 246, 248, 249, 252, 253, 254, 257, 263, 268, 269, 271, 272, 273, 280, 295, 313, 324, 330, 344, 353, 355, 362, 364, 369, 371, 375, 376, 377, 379, 380, 382, 383, 385, 386, 387, 388, 394, 395, 399, 403, 405, 406, 410, 417, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 496, 508, 509, 515, 567, 572, 581, 582, 585, 586, 588, 589, 591, 600, 604, 617, 627, 629, 630, 638, 656, 658, 672, 674, 679, 687, 689, 692, 693, 699, 701, 707, 714, 716, 728, 729, 737, 740, 782, 783, 786, 787, 796, 797, 798, 804, 812, 820, 825, 827, 828, 843, 844, 845, 847, 848, 849, 851, 852, 853, 854, 855, 861, 862, 863, 866, 868, 874, 875, 881, 882, 899, 903, 904, 905, 906, 907, 917, 919, 921, 922, 925, 929, 930, 952, 953, 960, 963, 976, 979, 981, 986, 988, 989, 990, 991, 992, 993, 999, 1001, 1005, 1011, 1013, 1014, 1018, 1023, 1024, 1025, 1031, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "_count_nonzero_coeffici": 7, "coef_": [7, 10, 14, 55, 86, 146, 147, 150, 170, 171, 180, 183, 185, 186, 187, 191, 192, 193, 194, 195, 196, 197, 200, 204, 205, 206, 210, 216, 217, 238, 244, 275, 314, 321, 338, 345, 349, 353, 364, 377, 384, 396, 412, 418, 465, 482, 483, 484, 549, 593, 594, 597, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 901, 902, 903, 904, 905, 906, 907, 973, 983, 985, 1003, 1004, 1023, 1031, 1033, 1036, 1038, 1043, 1045, 1048], "toarrai": [7, 331, 362, 410, 417, 566, 582, 588, 590, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 874, 891, 892, 960, 963, 979, 992, 999, 1048], "count_nonzero": [7, 10, 368], "configur": [7, 10, 72, 73, 172, 242, 244, 314, 353, 367, 380, 382, 384, 388, 390, 394, 396, 399, 400, 405, 408, 410, 417, 418, 433, 442, 443, 445, 447, 449, 452, 462, 464, 468, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 566, 567, 568, 569, 570, 581, 582, 583, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 626, 627, 628, 629, 630, 632, 635, 638, 639, 640, 641, 642, 688, 689, 690, 691, 692, 694, 695, 787, 845, 850, 853, 857, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 899, 955, 956, 957, 986, 989, 999, 1004, 1009, 1025, 1027, 1035, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1048], "penalti": [7, 10, 31, 83, 168, 179, 180, 185, 186, 190, 194, 201, 205, 216, 217, 220, 232, 270, 301, 320, 331, 345, 353, 368, 390, 394, 408, 411, 414, 418, 471, 472, 473, 474, 475, 476, 478, 502, 531, 537, 538, 539, 540, 542, 543, 547, 548, 597, 643, 646, 647, 648, 649, 652, 653, 654, 657, 658, 659, 660, 661, 662, 668, 669, 670, 672, 676, 678, 680, 681, 687, 812, 881, 901, 902, 904, 906, 907, 908, 978, 985, 988, 993, 999, 1003, 1004, 1011, 1023, 1025, 1033, 1036, 1038, 1040, 1041, 1043, 1044, 1046, 1047], "elasticnet": [7, 10, 182, 192, 270, 275, 368, 388, 394, 414, 647, 652, 657, 658, 659, 660, 661, 662, 663, 668, 676, 678, 681, 985, 1003, 1031, 1032, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1045], "001": [7, 14, 33, 45, 63, 124, 150, 153, 171, 185, 210, 230, 240, 247, 260, 262, 264, 330, 354, 379, 388, 413, 536, 537, 539, 546, 627, 644, 645, 646, 647, 652, 653, 660, 661, 662, 663, 666, 667, 668, 676, 677, 678, 679, 681, 684, 689, 690, 693, 694, 796, 797, 858, 859, 896, 897, 903, 904, 905, 906, 907, 978, 1016, 1025], "modified_hub": [7, 676, 1003], "fit_intercept": [7, 180, 181, 187, 206, 215, 230, 270, 314, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 901, 902, 908, 985, 1003, 1035, 1039, 1040, 1041, 1043, 1044, 1045], "tol": [7, 10, 18, 74, 96, 124, 150, 165, 181, 192, 194, 208, 209, 215, 217, 230, 241, 248, 250, 304, 320, 348, 353, 384, 388, 416, 421, 443, 447, 449, 452, 459, 462, 471, 472, 478, 482, 483, 484, 531, 532, 533, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 549, 550, 559, 560, 561, 562, 602, 627, 638, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 672, 674, 676, 677, 678, 679, 680, 682, 683, 685, 686, 687, 688, 689, 691, 693, 695, 796, 797, 812, 850, 858, 859, 896, 897, 901, 902, 903, 904, 905, 906, 907, 975, 985, 1003, 1004, 1021, 1025, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1048], "n_iter_no_chang": [7, 119, 124, 209, 320, 353, 387, 396, 416, 559, 560, 561, 562, 666, 667, 668, 676, 677, 678, 858, 859, 1003, 1039, 1042], "l1_ratio": [7, 10, 15, 185, 186, 192, 270, 275, 368, 394, 414, 538, 540, 547, 646, 647, 652, 658, 659, 660, 661, 662, 663, 668, 676, 678, 681, 985, 1003, 1032, 1034, 1036, 1043, 1045], "non_zero": [7, 12], "misclassif": [7, 113, 344, 795, 1003, 1004, 1005, 1032], "ratio": [7, 54, 67, 74, 105, 168, 234, 236, 250, 255, 278, 368, 382, 409, 411, 413, 416, 450, 456, 493, 494, 515, 541, 549, 550, 551, 631, 658, 710, 712, 716, 724, 729, 735, 738, 781, 782, 783, 786, 794, 824, 827, 847, 894, 983, 995, 1005, 1011, 1021, 1046, 1048], "sparsifi": [7, 185, 368, 658, 659, 666, 667, 668, 676, 677, 678, 901, 973, 1033], "05": [7, 8, 13, 15, 25, 27, 38, 45, 53, 61, 63, 65, 66, 68, 69, 76, 84, 86, 92, 101, 116, 119, 126, 131, 137, 139, 143, 146, 150, 158, 161, 162, 163, 167, 171, 181, 182, 200, 203, 215, 220, 226, 227, 228, 230, 240, 247, 249, 250, 253, 254, 262, 263, 270, 271, 273, 278, 290, 293, 298, 307, 309, 317, 321, 325, 328, 330, 333, 345, 356, 379, 418, 450, 456, 531, 592, 595, 596, 598, 613, 614, 615, 619, 620, 622, 623, 625, 632, 633, 649, 690, 694, 755, 798, 850, 901, 902, 985, 993, 999, 1011], "n_support_vector": 7, "len": [7, 8, 10, 11, 17, 18, 20, 31, 32, 33, 38, 39, 42, 44, 45, 50, 51, 52, 56, 61, 62, 63, 64, 65, 66, 71, 73, 99, 102, 106, 107, 111, 116, 119, 122, 123, 141, 142, 148, 149, 153, 161, 166, 172, 174, 200, 201, 219, 225, 230, 233, 234, 235, 237, 239, 240, 247, 249, 250, 257, 260, 262, 263, 270, 271, 273, 276, 283, 285, 292, 294, 295, 301, 308, 309, 310, 313, 323, 327, 328, 331, 340, 347, 350, 353, 354, 355, 362, 394, 396, 419, 437, 445, 450, 456, 464, 507, 515, 550, 569, 570, 582, 597, 632, 633, 781, 798, 812, 823, 827, 829, 831, 832, 882, 896, 897, 1023, 1024, 1025, 1040, 1043], "support_vectors_": [7, 10, 17, 341, 344, 345, 903, 904, 905, 906, 907, 1004], "squared_error": [7, 13, 106, 126, 127, 320, 416, 558, 559, 560, 562, 565, 671, 676, 678, 693, 910, 912, 1003, 1005, 1044, 1047, 1048], "learning_r": [7, 113, 124, 125, 126, 127, 128, 227, 285, 302, 304, 318, 320, 416, 553, 554, 559, 560, 561, 562, 668, 676, 677, 678, 692, 857, 858, 859, 986, 996, 1003, 1032, 1040, 1044], "max_depth": [7, 32, 114, 115, 118, 122, 123, 124, 125, 126, 127, 128, 131, 132, 134, 165, 223, 259, 274, 280, 319, 320, 358, 360, 361, 362, 395, 396, 416, 553, 554, 557, 558, 559, 560, 561, 562, 564, 565, 566, 801, 802, 825, 909, 910, 911, 912, 913, 914, 915, 978, 996, 1005, 1040, 1042], "n_estim": [7, 10, 27, 32, 113, 114, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 131, 132, 135, 165, 174, 223, 239, 243, 249, 259, 274, 309, 317, 319, 368, 395, 396, 416, 418, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 570, 632, 801, 802, 978, 995, 996, 1028, 1039, 1047], "n_tree": 7, "loop": [7, 8, 116, 126, 171, 257, 267, 353, 362, 368, 382, 383, 388, 409, 413, 418, 646, 647, 652, 653, 659, 660, 661, 662, 663, 978, 1002, 1003, 1020, 1034, 1035, 1038, 1043, 1044, 1047], "previous": [7, 54, 58, 72, 113, 159, 171, 260, 269, 321, 377, 390, 394, 399, 409, 414, 417, 440, 443, 454, 524, 534, 541, 649, 658, 659, 666, 667, 668, 676, 677, 678, 901, 957, 985, 999, 1009, 1028, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "subsequ": [7, 33, 59, 76, 99, 113, 147, 189, 203, 264, 267, 285, 287, 340, 364, 382, 384, 388, 396, 409, 410, 416, 419, 437, 496, 508, 553, 554, 559, 561, 562, 666, 668, 676, 801, 802, 829, 830, 833, 836, 837, 838, 839, 840, 858, 876, 880, 979, 988, 990, 1040, 1041, 1045, 1047], "relax": [7, 409, 417, 453, 1002, 1038], "sgd": [7, 8, 11, 17, 80, 92, 106, 115, 125, 126, 134, 142, 156, 157, 168, 179, 182, 184, 186, 192, 193, 208, 215, 220, 230, 237, 251, 270, 302, 303, 320, 336, 341, 342, 345, 346, 350, 353, 359, 364, 370, 504, 512, 631, 649, 666, 667, 668, 671, 676, 677, 678, 679, 858, 859, 978, 993, 1011, 1012, 1027, 1031, 1034, 1035, 1036, 1038, 1042, 1044], "svr": [7, 10, 168, 229, 245, 317, 335, 351, 368, 556, 567, 568, 593, 594, 643, 678, 798, 804, 902, 904, 906, 982, 1011, 1023, 1031, 1033, 1035, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046], "optim": [7, 14, 28, 54, 55, 58, 61, 73, 79, 80, 96, 124, 125, 127, 149, 150, 153, 154, 157, 158, 159, 160, 161, 185, 189, 190, 194, 209, 217, 236, 240, 260, 267, 270, 275, 280, 283, 289, 304, 307, 312, 321, 330, 342, 348, 353, 354, 355, 364, 368, 371, 376, 379, 382, 384, 385, 394, 396, 399, 404, 406, 409, 411, 413, 414, 416, 418, 419, 420, 444, 448, 449, 450, 452, 457, 461, 462, 472, 473, 479, 531, 534, 535, 537, 539, 543, 557, 558, 559, 560, 574, 610, 611, 619, 620, 635, 638, 640, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 676, 677, 678, 680, 681, 682, 683, 684, 687, 690, 692, 694, 695, 701, 722, 729, 798, 812, 843, 844, 845, 847, 849, 850, 851, 852, 853, 858, 859, 877, 889, 893, 894, 901, 902, 903, 904, 905, 906, 907, 981, 982, 983, 984, 985, 986, 989, 990, 991, 992, 993, 994, 1003, 1004, 1005, 1009, 1014, 1020, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1046, 1047], "few": [7, 15, 20, 40, 47, 53, 100, 123, 156, 159, 160, 190, 199, 201, 203, 219, 236, 237, 247, 264, 265, 269, 303, 307, 311, 317, 318, 319, 320, 321, 322, 323, 324, 327, 348, 355, 368, 377, 378, 379, 382, 384, 395, 397, 400, 403, 406, 407, 409, 413, 414, 416, 418, 419, 437, 449, 561, 562, 588, 591, 655, 692, 695, 894, 938, 957, 985, 986, 988, 989, 992, 993, 1002, 1004, 1005, 1014, 1016, 1023, 1024, 1025, 1037, 1047], "drawn": [7, 53, 81, 116, 149, 153, 162, 170, 241, 269, 289, 353, 378, 409, 415, 416, 419, 421, 469, 470, 471, 472, 473, 474, 475, 476, 515, 523, 533, 555, 556, 557, 558, 563, 564, 565, 566, 611, 627, 632, 641, 837, 893, 894, 911, 912, 985, 999, 1001, 1034], "boost": [7, 13, 72, 112, 113, 114, 117, 118, 120, 121, 130, 133, 136, 137, 160, 168, 173, 174, 181, 203, 209, 225, 261, 263, 265, 280, 302, 311, 313, 324, 347, 388, 396, 408, 418, 448, 466, 467, 490, 496, 501, 520, 553, 554, 559, 560, 561, 562, 564, 565, 632, 633, 634, 635, 740, 741, 747, 749, 798, 801, 802, 803, 824, 827, 862, 874, 875, 985, 989, 1009, 1011, 1012, 1027, 1031, 1032, 1034, 1036, 1037, 1038, 1040, 1044], "detriment": [7, 149, 369, 418, 985], "plot_influ": 7, "mse_valu": 7, "ax1": [7, 10, 58, 61, 66, 68, 74, 76, 81, 93, 123, 166, 174, 201, 231, 233, 241, 247, 265, 273, 308, 312, 313, 330, 353, 354, 1021], "add_subplot": [7, 17, 26, 28, 43, 46, 65, 68, 91, 102, 103, 172, 198, 216, 224, 226, 327, 328, 389], "line1": [7, 12, 225], "tab": [7, 9, 35, 54, 81, 113, 130, 133, 153, 158, 160, 189, 190, 318, 324, 410, 1038], "blue": [7, 9, 13, 21, 22, 27, 35, 81, 93, 96, 113, 116, 120, 128, 130, 133, 135, 148, 158, 160, 177, 181, 189, 190, 197, 199, 225, 234, 256, 257, 262, 302, 312, 318, 324, 329, 379, 409, 414, 1048], "set_xlabel": [7, 10, 46, 54, 61, 73, 74, 76, 91, 93, 101, 124, 162, 165, 166, 170, 172, 173, 174, 177, 190, 196, 198, 199, 201, 203, 216, 217, 235, 262, 264, 268, 273, 274, 277, 280, 290, 307, 308, 312, 330, 354, 355, 358], "y1_label": 7, "set_ylabel": [7, 8, 10, 31, 35, 46, 54, 61, 66, 73, 74, 76, 81, 91, 93, 101, 107, 113, 120, 124, 162, 172, 177, 190, 192, 196, 198, 199, 201, 203, 205, 216, 235, 247, 262, 264, 268, 273, 274, 283, 290, 307, 308, 312, 317, 330, 348, 354, 358, 1021], "spine": [7, 15, 35, 212, 307], "set_color": [7, 212], "get_color": 7, "yaxi": [7, 10, 46, 61, 91, 102, 103, 119, 198, 222, 224, 227, 247, 285, 290, 353], "tick_param": [7, 15, 136, 247, 262, 311, 330], "ax2": [7, 58, 61, 66, 68, 81, 93, 123, 166, 174, 201, 231, 241, 247, 265, 273, 295, 308, 312, 313, 330, 353], "frameon": [7, 207], "line2": [7, 12, 225, 349], "orang": [7, 9, 54, 81, 93, 97, 98, 104, 113, 128, 130, 160, 166, 189, 190, 211, 238, 250, 296, 318, 324, 361, 990, 1048], "tick_right": 7, "set_label_posit": 7, "y2_label": 7, "__name__": [7, 17, 26, 62, 165, 201, 203, 237, 240, 244, 257, 264, 309, 331, 353, 354, 355, 389, 394, 874], "prediction_perform": 7, "4948": 7, "2675": 7, "061464": 7, "1847": 7, "3264": 7, "045104": 7, "997": [7, 41, 150, 293, 299, 1011], "3383": 7, "036463": 7, "802": [7, 150, 379], "3582": 7, "033353": 7, "0517578125e": 7, "5558": 7, "7313": 7, "000171": 7, "5289": 7, "8022": [7, 396, 473, 1040], "000267": 7, "5193": 7, "8353": 7, "000423": 7, "124": [7, 167, 416, 1033], "5131": [7, 1036], "3279": 7, "000643": 7, "178": [7, 193, 220, 379, 388, 510, 845, 1011], "5149": 7, "0779": 7, "000875": 7, "4066": 7, "4812": 7, "000182": 7, "3551": 7, "1723": 7, "000196": 7, "3445": 7, "2171": 7, "000245": 7, "3433": 7, "0358": 7, "000269": 7, "3456": 7, "0602": 7, "000354": 7, "deduc": 7, "guarante": [7, 8, 81, 82, 171, 209, 234, 283, 285, 307, 354, 364, 370, 376, 390, 391, 409, 413, 414, 417, 446, 536, 645, 658, 659, 668, 672, 674, 676, 678, 687, 694, 815, 818, 841, 842, 879, 881, 884, 886, 887, 888, 889, 890, 891, 892, 894, 895, 908, 981, 985, 986, 988, 992, 997, 1001, 1005, 1024, 1041], "aspect": [7, 59, 87, 96, 157, 172, 222, 230, 271, 294, 346, 368, 369, 370, 382, 396, 397, 409, 658, 659, 1005, 1014, 1048], "17": [7, 13, 16, 20, 40, 53, 75, 81, 154, 171, 200, 234, 265, 301, 311, 377, 380, 387, 399, 401, 402, 409, 413, 444, 461, 487, 497, 500, 523, 531, 536, 540, 547, 549, 550, 555, 559, 560, 569, 570, 597, 628, 649, 657, 658, 659, 666, 669, 672, 674, 687, 692, 728, 729, 739, 760, 765, 783, 786, 788, 816, 839, 850, 865, 870, 871, 879, 881, 887, 903, 906, 909, 910, 911, 912, 978, 979, 990, 992, 999, 1007, 1011, 1029, 1031, 1032, 1033, 1034, 1037, 1040, 1045], "327": [7, 16, 25, 27, 29, 729, 1011, 1023], "plot_model_complexity_influ": [7, 16, 1011], "concentr": [7, 9, 66, 93, 101, 113, 131, 158, 166, 168, 227, 246, 248, 253, 254, 273, 295, 309, 329, 330, 378, 382, 416, 443, 519, 796, 988, 995, 1011], "bayesian": [7, 28, 55, 66, 93, 166, 168, 179, 185, 189, 202, 205, 207, 220, 246, 248, 252, 253, 254, 265, 273, 276, 290, 295, 308, 311, 312, 330, 414, 437, 524, 528, 532, 611, 644, 645, 656, 657, 796, 797, 862, 864, 876, 881, 978, 1009, 1011, 1012, 1026, 1027, 1037, 1044], "mixtur": [7, 9, 35, 45, 56, 58, 66, 93, 156, 166, 189, 249, 250, 254, 273, 290, 295, 298, 324, 330, 371, 377, 378, 396, 409, 414, 415, 419, 623, 798, 1009, 1010, 1011, 1026, 1027, 1031, 1035, 1036, 1037, 1038], "doesn": [8, 201, 237, 248, 283, 303, 340, 390, 396, 399, 400, 409, 417, 418, 422, 434, 475, 632, 633, 666, 668, 676, 716, 825, 828, 833, 843, 844, 858, 870, 871, 988, 989, 1005, 1035], "t": [8, 11, 12, 17, 18, 27, 35, 40, 41, 43, 44, 45, 53, 55, 59, 71, 73, 79, 80, 81, 83, 86, 93, 97, 98, 102, 104, 106, 107, 113, 116, 117, 125, 126, 127, 128, 132, 133, 150, 154, 156, 157, 158, 161, 162, 168, 171, 172, 173, 174, 180, 182, 185, 188, 195, 198, 199, 200, 201, 202, 219, 221, 223, 224, 225, 226, 228, 237, 238, 248, 251, 253, 261, 262, 283, 285, 297, 298, 303, 317, 320, 321, 323, 327, 328, 330, 336, 337, 340, 341, 345, 353, 354, 355, 361, 362, 364, 368, 369, 376, 377, 379, 382, 384, 386, 388, 390, 394, 395, 396, 399, 400, 407, 408, 409, 410, 412, 413, 414, 416, 417, 418, 422, 426, 432, 434, 437, 447, 448, 450, 456, 463, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 495, 496, 513, 514, 515, 519, 520, 525, 530, 532, 534, 541, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 590, 591, 594, 607, 608, 610, 611, 627, 628, 630, 631, 632, 633, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 692, 696, 704, 710, 716, 717, 725, 735, 736, 754, 755, 756, 766, 787, 788, 793, 794, 798, 801, 802, 812, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 847, 848, 851, 852, 857, 858, 859, 867, 870, 871, 872, 874, 875, 881, 882, 894, 896, 897, 901, 902, 903, 904, 906, 907, 909, 910, 911, 912, 938, 953, 978, 981, 983, 985, 988, 989, 990, 991, 992, 993, 994, 995, 996, 999, 1003, 1004, 1005, 1011, 1013, 1016, 1023, 1024, 1025, 1026, 1027, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "memori": [8, 55, 72, 73, 100, 171, 172, 287, 313, 317, 319, 321, 322, 353, 354, 355, 369, 370, 376, 382, 385, 391, 396, 410, 413, 414, 417, 420, 421, 441, 442, 443, 444, 445, 446, 447, 449, 450, 454, 457, 459, 468, 473, 479, 496, 503, 508, 533, 534, 535, 538, 555, 556, 557, 558, 563, 564, 565, 566, 581, 582, 588, 589, 591, 646, 647, 648, 652, 653, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 676, 677, 678, 679, 680, 681, 684, 777, 778, 779, 780, 798, 804, 812, 820, 822, 823, 824, 825, 828, 829, 830, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 861, 862, 879, 881, 891, 892, 894, 899, 901, 902, 909, 910, 911, 912, 922, 974, 985, 991, 992, 999, 1001, 1002, 1004, 1005, 1010, 1014, 1016, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "partial_fit": [8, 51, 96, 237, 321, 370, 384, 396, 409, 414, 442, 449, 534, 536, 537, 538, 589, 597, 658, 659, 666, 667, 668, 676, 677, 678, 829, 830, 833, 834, 836, 837, 838, 839, 840, 857, 858, 859, 870, 871, 881, 901, 985, 991, 993, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1044, 1045, 1046, 1047, 1048], "fed": [8, 133, 364, 377, 417, 978, 994, 999, 1042], "batch": [8, 11, 65, 96, 100, 298, 321, 370, 391, 396, 417, 440, 442, 447, 449, 451, 453, 531, 533, 534, 536, 537, 538, 539, 540, 542, 543, 545, 546, 664, 685, 686, 803, 816, 817, 836, 837, 838, 839, 840, 858, 859, 870, 871, 881, 894, 941, 955, 993, 994, 1003, 1031, 1035, 1036, 1039, 1040, 1041, 1042, 1044, 1046, 1047], "remain": [8, 26, 28, 72, 113, 120, 125, 127, 149, 171, 201, 205, 217, 247, 260, 264, 268, 271, 406, 409, 410, 411, 413, 417, 446, 464, 467, 515, 516, 521, 528, 534, 570, 610, 611, 762, 768, 800, 801, 802, 803, 806, 808, 836, 837, 838, 840, 942, 978, 979, 981, 988, 989, 993, 999, 1005, 1010, 1033, 1039, 1045], "hashingvector": [8, 355, 370, 417, 489, 588, 590, 1032, 1038, 1039, 1040, 1041, 1044], "where": [8, 11, 12, 14, 17, 18, 20, 21, 25, 26, 27, 33, 54, 56, 58, 81, 87, 93, 96, 99, 102, 106, 107, 113, 115, 117, 119, 123, 124, 126, 130, 147, 150, 153, 159, 162, 166, 171, 180, 185, 193, 202, 205, 210, 211, 212, 214, 218, 219, 222, 224, 225, 230, 231, 234, 237, 238, 240, 242, 253, 258, 259, 262, 264, 268, 269, 271, 273, 274, 280, 283, 304, 307, 309, 310, 311, 312, 313, 314, 317, 319, 320, 328, 329, 338, 344, 348, 349, 350, 353, 358, 359, 364, 368, 369, 370, 376, 378, 379, 381, 382, 384, 386, 388, 389, 390, 394, 395, 396, 397, 399, 403, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 432, 437, 444, 447, 448, 452, 461, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 487, 496, 531, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 582, 583, 584, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 609, 610, 611, 613, 615, 619, 622, 623, 625, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 688, 691, 692, 693, 696, 707, 712, 716, 724, 728, 729, 730, 738, 754, 762, 767, 768, 769, 772, 780, 781, 782, 783, 786, 791, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 824, 825, 826, 828, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 844, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 864, 871, 874, 876, 877, 880, 881, 887, 889, 895, 896, 897, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 929, 930, 931, 932, 938, 946, 949, 974, 978, 980, 981, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1010, 1013, 1016, 1017, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "word": [8, 15, 20, 71, 153, 234, 238, 340, 354, 355, 368, 377, 378, 382, 384, 387, 396, 406, 409, 411, 412, 413, 414, 453, 511, 523, 534, 536, 541, 588, 589, 591, 696, 830, 840, 898, 983, 987, 991, 994, 999, 1002, 1003, 1014, 1023, 1024, 1031, 1039], "federicov": 8, "itertool": [8, 43, 45, 63, 134, 172, 186, 248, 253, 262, 269, 271, 416], "sy": [8, 12, 17, 20, 209, 234, 285, 331, 355, 377, 394, 617], "tarfil": 8, "hashlib": 8, "sha256": [8, 1046], "parser": [8, 13, 317, 321, 496, 1046, 1047], "htmlparser": 8, "pathlib": [8, 1046, 1047], "path": [8, 17, 18, 168, 171, 179, 186, 187, 190, 192, 195, 205, 217, 220, 275, 348, 358, 376, 380, 382, 386, 390, 391, 396, 441, 445, 450, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 508, 509, 548, 557, 558, 563, 564, 565, 566, 593, 594, 597, 646, 647, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 681, 682, 683, 684, 685, 686, 688, 861, 862, 908, 909, 910, 911, 912, 943, 978, 985, 986, 995, 1010, 1011, 1031, 1032, 1035, 1037, 1038, 1040, 1041, 1043, 1044, 1046, 1047], "urllib": [8, 18], "request": [8, 18, 47, 201, 219, 237, 320, 369, 376, 380, 381, 385, 396, 397, 400, 403, 414, 417, 418, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 533, 534, 538, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 581, 582, 588, 590, 591, 594, 599, 600, 610, 611, 632, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 699, 799, 800, 805, 807, 816, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 846, 848, 851, 852, 858, 859, 861, 864, 866, 867, 868, 873, 880, 881, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 945, 946, 948, 989, 992, 1025, 1037, 1038, 1039, 1048], "urlretriev": 8, "rcparam": [8, 230, 235, 314], "get_data_hom": 8, "feature_extract": [8, 15, 20, 47, 48, 51, 52, 55, 67, 71, 99, 168, 263, 331, 352, 353, 354, 355, 370, 371, 377, 409, 410, 417, 464, 544, 874, 987, 1024, 1025, 1031, 1032, 1033, 1034, 1037, 1038], "passiveaggressiveclassifi": [8, 208, 368, 370, 985, 990, 1032, 1035, 1036, 1038, 1039, 1042, 1044], "perceptron": [8, 32, 122, 131, 142, 155, 157, 168, 208, 211, 217, 241, 300, 305, 309, 310, 332, 345, 349, 350, 370, 394, 417, 514, 515, 522, 666, 676, 827, 857, 858, 859, 862, 881, 987, 990, 994, 1003, 1011, 1012, 1027, 1035, 1037, 1038, 1039, 1043], "naive_bay": [8, 25, 26, 28, 32, 131, 135, 263, 264, 353, 364, 370, 371, 377, 416, 437, 569, 862, 983, 990, 991, 1025, 1032, 1033, 1035, 1036, 1037, 1038], "multinomialnb": [8, 370, 377, 417, 836, 837, 838, 839, 991, 1025, 1033, 1035, 1038, 1039, 1043, 1044, 1046], "_not_in_sphinx": [8, 10], "hack": [8, 10], "whether": [8, 10, 13, 17, 72, 111, 129, 156, 159, 161, 171, 172, 201, 205, 219, 223, 231, 237, 260, 307, 362, 364, 369, 377, 380, 381, 382, 384, 386, 387, 388, 396, 400, 409, 410, 411, 413, 414, 416, 418, 421, 440, 442, 451, 453, 454, 459, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 491, 492, 496, 497, 503, 508, 509, 514, 522, 527, 531, 532, 537, 538, 539, 540, 542, 545, 546, 548, 552, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 581, 588, 589, 590, 591, 597, 602, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 629, 631, 632, 633, 635, 636, 637, 638, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 690, 694, 695, 697, 698, 700, 702, 704, 712, 741, 760, 766, 773, 777, 781, 788, 798, 801, 802, 803, 804, 812, 816, 817, 820, 821, 824, 825, 827, 830, 832, 835, 836, 837, 838, 840, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 858, 859, 865, 882, 888, 901, 902, 903, 904, 905, 906, 907, 913, 915, 919, 921, 922, 923, 925, 937, 938, 945, 946, 962, 973, 977, 978, 979, 984, 985, 989, 994, 995, 1001, 1003, 1004, 1014, 1038, 1039, 1040, 1048], "builder": [8, 10, 348, 386], "__file__": [8, 10, 1044], "global": [8, 10, 43, 58, 96, 201, 222, 223, 244, 271, 303, 318, 364, 368, 369, 388, 394, 396, 408, 409, 419, 442, 452, 462, 468, 590, 626, 632, 688, 691, 692, 695, 707, 728, 729, 737, 782, 783, 786, 787, 816, 882, 897, 899, 957, 959, 978, 986, 989, 995, 999, 1005, 1014, 1039, 1046], "21578": [8, 1044], "uci": [8, 150, 312, 376, 379, 500, 502, 504, 510], "ml": [8, 150, 280, 376, 379, 387, 500, 502, 510, 985, 987, 1009, 1010, 1014], "uncompress": [8, 508, 509, 1025], "reuterspars": 8, "util": [8, 10, 11, 49, 56, 57, 62, 90, 111, 113, 133, 201, 203, 209, 217, 224, 233, 237, 239, 250, 268, 270, 285, 309, 317, 330, 340, 344, 353, 369, 371, 376, 377, 380, 382, 383, 384, 385, 394, 395, 396, 405, 409, 410, 413, 414, 417, 437, 443, 444, 447, 449, 453, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 533, 534, 538, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 577, 581, 582, 588, 590, 591, 594, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 798, 799, 800, 805, 807, 816, 821, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 846, 848, 851, 852, 858, 859, 861, 864, 866, 867, 868, 873, 880, 881, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 978, 984, 987, 989, 990, 999, 1000, 1009, 1014, 1017, 1027, 1031, 1032, 1034, 1035, 1037, 1038], "pars": [8, 18, 368, 376, 377, 383, 508], "sgml": [8, 368], "file": [8, 12, 16, 17, 23, 29, 33, 36, 49, 51, 69, 77, 84, 88, 94, 108, 110, 137, 143, 151, 163, 167, 175, 178, 220, 228, 245, 254, 278, 281, 284, 299, 305, 315, 325, 333, 334, 351, 353, 354, 356, 363, 368, 370, 376, 377, 379, 380, 382, 386, 387, 388, 390, 394, 403, 410, 414, 487, 493, 494, 496, 503, 508, 509, 534, 579, 580, 588, 589, 591, 913, 992, 1005, 1011, 1013, 1017, 1031, 1032, 1034, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047], "yield": [8, 9, 26, 46, 56, 79, 80, 81, 82, 126, 185, 196, 201, 216, 219, 267, 283, 301, 307, 337, 342, 353, 354, 364, 368, 370, 376, 387, 396, 406, 409, 411, 413, 414, 416, 417, 418, 437, 449, 468, 472, 508, 509, 537, 538, 539, 541, 546, 553, 554, 559, 560, 561, 562, 567, 568, 594, 602, 647, 651, 652, 653, 655, 661, 663, 665, 673, 675, 686, 725, 780, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 824, 825, 826, 828, 832, 835, 893, 894, 932, 939, 941, 942, 947, 981, 983, 985, 986, 989, 1004, 1005, 1020, 1036, 1037, 1039, 1042, 1044], "__init__": [8, 17, 57, 111, 161, 237, 285, 340, 382, 384, 386, 387, 388, 389, 396, 417, 423, 950, 1032, 1037, 1039, 1044, 1045, 1046, 1047], "self": [8, 17, 20, 26, 28, 57, 66, 93, 111, 161, 168, 174, 237, 272, 285, 326, 332, 333, 340, 353, 376, 382, 383, 384, 387, 388, 389, 390, 409, 417, 419, 423, 426, 432, 433, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 500, 508, 509, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 703, 796, 797, 798, 799, 800, 801, 802, 805, 807, 812, 816, 817, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 946, 947, 949, 950, 955, 963, 992, 1010, 1011, 1012, 1014, 1027, 1033, 1038, 1045], "latin": [8, 417], "_reset": 8, "handle_starttag": 8, "tag": [8, 50, 72, 230, 329, 376, 381, 385, 386, 390, 394, 396, 405, 417, 496, 829, 1010, 1013, 1036, 1040, 1041, 1042, 1045, 1046, 1047, 1048], "attr": [8, 57], "start_": 8, "handle_endtag": 8, "end_": 8, "in_titl": 8, "in_bodi": 8, "in_top": 8, "in_topic_d": 8, "bodi": [8, 71, 150, 241, 322, 379], "topic_d": 8, "fd": 8, "chunk": [8, 51, 368, 369, 409, 414, 420, 444, 449, 468, 538, 777, 780, 829, 830, 836, 837, 838, 839, 840, 899, 991, 1038, 1039, 1040, 1041, 1042], "feed": [8, 87, 202, 355, 377, 387, 394, 409, 417, 741, 874, 990], "decod": [8, 298, 377, 396, 503, 569, 588, 589, 591, 1031, 1032], "close": [8, 12, 18, 25, 26, 28, 39, 40, 47, 55, 61, 67, 79, 80, 83, 101, 116, 123, 126, 129, 133, 153, 154, 157, 158, 159, 160, 161, 171, 173, 185, 205, 207, 223, 230, 236, 240, 247, 253, 262, 263, 291, 292, 307, 317, 340, 344, 345, 354, 364, 377, 382, 384, 390, 394, 396, 397, 407, 408, 409, 412, 413, 416, 419, 450, 455, 472, 508, 509, 532, 563, 628, 643, 647, 661, 672, 674, 687, 705, 745, 796, 816, 817, 836, 837, 838, 840, 847, 922, 978, 982, 983, 985, 986, 988, 989, 990, 992, 995, 996, 999, 1004, 1009, 1014, 1023, 1034, 1038, 1039, 1040], "handle_data": 8, "start_reut": 8, "attribut": [8, 26, 33, 50, 72, 105, 111, 113, 120, 121, 124, 146, 150, 201, 209, 237, 252, 260, 261, 266, 274, 294, 298, 320, 344, 355, 362, 370, 371, 375, 376, 377, 379, 382, 385, 389, 394, 405, 406, 407, 409, 410, 411, 412, 414, 416, 417, 418, 419, 424, 425, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 507, 510, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 697, 698, 700, 701, 702, 735, 794, 796, 797, 798, 801, 802, 804, 812, 820, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 915, 916, 950, 973, 981, 983, 985, 990, 992, 993, 995, 999, 1002, 1003, 1004, 1005, 1014, 1016, 1022, 1025, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "end_reut": 8, "sub": [8, 38, 49, 54, 56, 58, 61, 71, 106, 237, 239, 247, 319, 327, 328, 337, 340, 349, 377, 382, 384, 388, 396, 410, 416, 417, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 533, 534, 536, 538, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 594, 597, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 800, 805, 807, 816, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 846, 848, 851, 852, 858, 859, 861, 864, 866, 867, 868, 873, 880, 881, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 947, 985, 989, 1003, 1025, 1041, 1045, 1047], "start_titl": 8, "end_titl": 8, "start_bodi": 8, "end_bodi": 8, "start_top": 8, "end_top": 8, "start_d": 8, "end_d": 8, "stream_reuters_docu": 8, "data_path": 8, "iter": [8, 15, 18, 32, 47, 73, 83, 96, 99, 113, 116, 119, 122, 124, 125, 127, 128, 150, 162, 165, 168, 180, 181, 209, 216, 249, 250, 255, 257, 270, 273, 278, 301, 303, 304, 309, 319, 328, 330, 331, 340, 382, 384, 388, 390, 391, 395, 396, 404, 409, 412, 414, 416, 418, 421, 437, 440, 441, 443, 445, 447, 448, 449, 452, 454, 459, 461, 462, 463, 471, 472, 478, 482, 483, 484, 515, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 559, 560, 561, 562, 564, 567, 568, 581, 582, 588, 589, 591, 593, 594, 602, 610, 627, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 832, 835, 850, 857, 858, 859, 860, 861, 865, 872, 874, 876, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 916, 937, 938, 944, 945, 946, 947, 955, 979, 985, 986, 988, 989, 992, 993, 994, 1002, 1003, 1004, 1005, 1010, 1011, 1014, 1020, 1024, 1025, 1027, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "archiv": [8, 280, 376, 377, 379, 380, 403, 409, 442, 500, 502, 510, 757, 758, 987, 1004, 1025], "exist": [8, 9, 13, 18, 20, 54, 219, 262, 303, 307, 344, 376, 381, 384, 385, 388, 394, 396, 397, 399, 403, 409, 413, 414, 416, 417, 424, 434, 437, 443, 444, 447, 449, 451, 453, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 499, 533, 534, 538, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 585, 588, 589, 590, 591, 594, 597, 603, 610, 611, 632, 633, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 698, 700, 702, 761, 764, 768, 799, 800, 803, 805, 806, 807, 808, 811, 813, 814, 815, 816, 817, 818, 819, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 846, 848, 851, 852, 858, 859, 861, 864, 866, 867, 868, 873, 874, 875, 880, 881, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 973, 981, 986, 988, 989, 993, 995, 996, 999, 1014, 1024, 1031, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "str": [8, 10, 17, 59, 61, 105, 107, 122, 219, 240, 262, 274, 285, 295, 338, 353, 376, 377, 391, 417, 420, 421, 425, 430, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 457, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 576, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 617, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 692, 696, 697, 698, 699, 700, 702, 707, 709, 711, 713, 726, 728, 729, 731, 732, 737, 741, 770, 773, 777, 778, 779, 780, 781, 782, 783, 786, 788, 791, 792, 798, 799, 800, 801, 802, 804, 805, 807, 809, 810, 812, 816, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 920, 921, 922, 925, 928, 930, 934, 945, 946, 947, 949, 952, 973, 974, 977, 1046], "kei": [8, 10, 13, 18, 20, 43, 119, 123, 133, 165, 170, 219, 237, 240, 243, 263, 265, 266, 318, 319, 320, 321, 322, 323, 324, 370, 375, 384, 387, 388, 389, 394, 396, 397, 399, 400, 409, 410, 413, 419, 464, 472, 561, 562, 567, 568, 569, 570, 588, 591, 594, 617, 626, 632, 633, 634, 659, 798, 801, 802, 810, 812, 824, 860, 861, 916, 926, 954, 1010, 1025, 1028, 1037, 1043, 1044, 1046, 1047], "download_url": 8, "ic": [8, 280, 319, 376, 379, 398, 500, 502, 510, 632, 633, 1027, 1043, 1044], "databas": [8, 150, 312, 368, 370, 377, 379, 409, 414, 416, 417, 420, 442, 444, 510, 555, 556, 894, 1001], "reuters21578": 8, "mld": 8, "tar": [8, 386], "gz": [8, 386, 399, 508, 509], "archive_sha256": 8, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 8, "archive_filenam": 8, "mkdir": [8, 388, 390], "parent": [8, 170, 237, 382, 386, 396, 409, 442, 463, 946, 947, 1031, 1048], "exist_ok": 8, "blocknum": 8, "total_sz_mb": 8, "mb": [8, 16, 23, 29, 36, 69, 77, 84, 88, 94, 108, 110, 137, 143, 151, 163, 167, 175, 178, 220, 228, 234, 245, 254, 278, 281, 284, 299, 305, 315, 325, 333, 334, 351, 353, 355, 356, 363, 377, 388, 903, 904, 905, 906, 907, 1004, 1011], "1e6": [8, 10, 194, 234, 353, 355, 368, 536, 895, 989, 1001], "current_sz_mb": 8, "stdout": [8, 96, 209, 830, 850, 858, 859], "write": [8, 18, 166, 237, 353, 368, 369, 376, 380, 381, 385, 386, 387, 388, 390, 391, 394, 396, 405, 410, 414, 417, 1000, 1010, 1025, 1032, 1044], "rdownload": 8, "archive_path": 8, "filenam": [8, 18, 331, 377, 388, 403, 488, 500, 503, 504, 507, 588, 589, 591, 1025, 1031, 1036, 1039, 1040], "reporthook": 8, "tamper": 8, "assert": [8, 18, 49, 97, 234, 262, 271, 369, 385, 1010], "read_byt": 8, "hexdigest": 8, "untar": 8, "open": [8, 12, 18, 224, 376, 377, 380, 381, 382, 386, 388, 394, 395, 397, 403, 410, 417, 487, 496, 508, 509, 979, 1009, 1014, 1019, 1034, 1038, 1039, 1041, 1047], "extractal": 8, "glob": 8, "sgm": 8, "rb": 8, "decode_error": [8, 417, 503, 588, 589, 591, 1033], "alternate_sign": [8, 417, 582, 589, 1038], "data_stream": 8, "binari": [8, 14, 26, 28, 117, 119, 129, 131, 147, 161, 171, 177, 192, 194, 201, 209, 223, 231, 240, 243, 259, 260, 265, 271, 277, 280, 289, 340, 344, 346, 362, 364, 376, 377, 378, 384, 386, 387, 396, 399, 403, 406, 407, 408, 409, 416, 417, 419, 437, 438, 439, 452, 487, 500, 508, 509, 520, 523, 549, 550, 553, 555, 559, 561, 566, 567, 568, 581, 588, 589, 591, 593, 594, 602, 610, 627, 628, 629, 630, 631, 632, 633, 658, 659, 666, 668, 673, 674, 675, 676, 700, 703, 707, 708, 709, 712, 713, 715, 718, 720, 726, 728, 729, 733, 734, 737, 738, 739, 740, 741, 742, 781, 782, 783, 786, 787, 788, 793, 795, 798, 799, 801, 802, 803, 804, 812, 816, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 836, 847, 857, 868, 872, 874, 882, 885, 901, 903, 906, 952, 979, 990, 991, 992, 993, 994, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1013, 1016, 1028, 1032, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1045, 1046, 1048], "acq": 8, "chosen": [8, 21, 47, 74, 133, 154, 171, 172, 190, 202, 218, 238, 256, 257, 259, 265, 354, 364, 368, 394, 409, 411, 412, 416, 419, 440, 446, 449, 451, 453, 454, 460, 496, 523, 535, 557, 558, 559, 560, 561, 562, 564, 565, 647, 653, 656, 658, 659, 661, 663, 671, 676, 677, 678, 679, 680, 690, 694, 793, 796, 797, 798, 801, 802, 812, 831, 850, 901, 902, 909, 910, 911, 912, 938, 978, 981, 983, 985, 986, 988, 990, 995, 996, 1003, 1020, 1021, 1023, 1024, 1039, 1047, 1048], "evenli": [8, 40, 53, 126, 174, 205, 257, 417, 942, 1025], "care": [8, 56, 127, 280, 344, 368, 370, 386, 388, 394, 396, 397, 409, 411, 417, 437, 460, 469, 640, 658, 659, 666, 667, 668, 676, 677, 678, 695, 901, 986, 1004, 1014, 1047], "all_class": 8, "positive_class": [8, 712], "partial_fit_classifi": 8, "nb": [8, 104, 131, 364, 838, 991], "multinomi": [8, 31, 168, 179, 192, 194, 210, 216, 220, 238, 257, 271, 303, 348, 349, 377, 378, 382, 414, 416, 496, 512, 523, 551, 553, 559, 561, 569, 631, 658, 659, 740, 827, 835, 836, 837, 838, 839, 840, 881, 924, 989, 990, 1005, 1011, 1012, 1025, 1027, 1031, 1035, 1037, 1038, 1039, 1044, 1045], "passiv": [8, 208, 666, 667, 1012, 1027, 1032], "aggress": [8, 208, 666, 667, 801, 802, 1012, 1027, 1032], "get_minibatch": 8, "doc_it": 8, "pos_class": 8, "minibatch": [8, 45, 409, 414, 449, 534, 676, 857, 858, 859, 1009, 1031], "tupl": [8, 13, 49, 50, 56, 106, 172, 219, 375, 376, 377, 384, 396, 413, 421, 434, 451, 453, 464, 467, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 504, 505, 508, 510, 511, 512, 513, 514, 522, 533, 561, 562, 567, 568, 569, 570, 582, 583, 584, 587, 588, 589, 591, 627, 632, 633, 634, 712, 719, 741, 780, 782, 796, 798, 812, 824, 841, 842, 860, 861, 871, 872, 876, 879, 887, 891, 903, 904, 905, 906, 907, 916, 922, 923, 925, 929, 930, 931, 932, 947, 956, 973, 996, 1037, 1038, 1042, 1043, 1044], "x_text": 8, "befor": [8, 12, 26, 43, 71, 73, 76, 87, 124, 133, 146, 160, 162, 164, 165, 167, 168, 171, 172, 174, 182, 185, 189, 190, 194, 237, 262, 269, 287, 288, 308, 311, 312, 314, 320, 343, 364, 368, 369, 377, 380, 382, 384, 385, 387, 388, 390, 391, 394, 396, 397, 398, 403, 405, 407, 409, 410, 411, 413, 414, 418, 421, 422, 443, 447, 448, 449, 459, 461, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 490, 501, 534, 537, 538, 539, 540, 541, 544, 546, 547, 561, 562, 565, 567, 569, 570, 577, 588, 589, 591, 611, 627, 628, 630, 645, 666, 667, 668, 671, 676, 678, 687, 692, 694, 796, 797, 803, 804, 816, 817, 819, 823, 825, 827, 841, 842, 849, 850, 851, 852, 853, 856, 861, 862, 865, 868, 875, 879, 880, 881, 882, 886, 887, 889, 890, 891, 892, 898, 909, 910, 938, 973, 979, 985, 986, 989, 995, 999, 1003, 1004, 1005, 1010, 1011, 1025, 1031, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "exclud": [8, 13, 20, 170, 307, 382, 386, 396, 446, 464, 466, 728, 729, 737, 782, 783, 786, 811, 819, 876, 964, 989, 992, 1040, 1047], "invalid": [8, 201, 396, 446, 578, 671, 712, 773, 985, 989, 1037, 1039, 1041, 1042, 1044, 1045, 1047], "assign": [8, 18, 21, 35, 38, 47, 50, 58, 59, 61, 113, 118, 129, 131, 146, 155, 214, 219, 230, 235, 238, 301, 309, 314, 332, 348, 354, 377, 382, 384, 396, 406, 413, 414, 416, 417, 418, 419, 440, 441, 442, 443, 445, 446, 447, 448, 449, 452, 454, 456, 459, 460, 461, 462, 515, 536, 561, 562, 593, 594, 607, 608, 610, 658, 659, 666, 667, 668, 676, 677, 678, 704, 705, 715, 716, 717, 720, 728, 729, 730, 737, 738, 742, 754, 756, 782, 783, 785, 786, 792, 793, 794, 798, 801, 802, 804, 807, 812, 820, 822, 823, 824, 825, 828, 845, 851, 853, 854, 855, 868, 896, 897, 901, 902, 903, 904, 905, 906, 907, 983, 985, 988, 989, 990, 991, 992, 993, 994, 999, 1002, 1014, 1016, 1025, 1031, 1036, 1038, 1039], "format": [8, 11, 12, 13, 20, 22, 49, 55, 59, 62, 71, 81, 96, 106, 116, 122, 125, 127, 139, 145, 146, 177, 181, 187, 192, 201, 219, 257, 267, 269, 270, 273, 276, 289, 290, 293, 294, 311, 317, 347, 358, 362, 368, 375, 381, 382, 384, 385, 390, 391, 395, 396, 410, 413, 416, 417, 433, 442, 443, 445, 447, 449, 450, 452, 459, 464, 468, 482, 483, 484, 485, 487, 489, 496, 497, 498, 508, 509, 510, 523, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 551, 557, 558, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 646, 652, 658, 659, 660, 662, 666, 667, 668, 676, 677, 678, 688, 689, 692, 697, 713, 720, 738, 739, 750, 767, 790, 791, 830, 843, 844, 845, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 888, 893, 894, 899, 901, 913, 921, 922, 943, 951, 955, 960, 963, 965, 966, 967, 968, 969, 970, 979, 989, 992, 997, 999, 1000, 1003, 1005, 1009, 1016, 1017, 1027, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1044, 1046, 1048], "islic": [8, 45, 63], "asarrai": [8, 18, 201, 219, 304, 329, 353, 354, 384, 396, 405, 585, 586, 725, 755, 849, 851, 852, 853, 999, 1004, 1048], "int": [8, 10, 13, 14, 17, 18, 20, 38, 45, 63, 82, 116, 125, 129, 141, 142, 154, 155, 156, 162, 166, 170, 182, 192, 194, 201, 219, 227, 230, 236, 240, 247, 257, 260, 261, 262, 285, 290, 292, 298, 314, 328, 355, 377, 382, 384, 394, 396, 407, 410, 413, 417, 420, 421, 424, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 488, 491, 492, 494, 495, 496, 497, 502, 503, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 607, 608, 610, 611, 617, 627, 628, 629, 630, 631, 632, 633, 634, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 702, 703, 704, 705, 707, 709, 713, 725, 726, 728, 729, 730, 733, 737, 755, 756, 768, 773, 777, 778, 779, 780, 781, 782, 783, 786, 788, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 921, 922, 924, 925, 937, 938, 940, 941, 942, 943, 954, 960, 963, 968, 969, 985, 996, 1031, 1037, 1041, 1042], "iter_minibatch": 8, "minibatch_s": [8, 370], "statist": [8, 13, 82, 113, 116, 117, 128, 139, 140, 141, 142, 145, 149, 150, 168, 170, 171, 172, 173, 185, 189, 205, 255, 259, 261, 264, 271, 278, 280, 283, 307, 313, 319, 364, 371, 375, 377, 379, 382, 388, 396, 407, 409, 410, 411, 413, 414, 416, 418, 434, 469, 474, 493, 494, 516, 517, 518, 520, 522, 541, 553, 559, 560, 562, 604, 605, 606, 609, 627, 630, 634, 635, 644, 649, 656, 690, 694, 696, 710, 716, 721, 722, 723, 730, 742, 787, 798, 814, 831, 858, 859, 877, 878, 879, 881, 886, 889, 890, 892, 906, 909, 910, 964, 978, 979, 983, 985, 986, 988, 989, 990, 991, 996, 999, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1017, 1023, 1024, 1036, 1039, 1042, 1043, 1045, 1046], "test_stat": 8, "n_test": [8, 10, 34, 116, 262, 1031, 1034], "n_test_po": 8, "hold": [8, 13, 17, 27, 28, 201, 205, 263, 362, 375, 382, 383, 384, 396, 407, 409, 413, 416, 417, 419, 503, 557, 561, 564, 589, 632, 633, 634, 735, 798, 801, 802, 812, 837, 868, 869, 874, 875, 882, 885, 909, 911, 979, 983, 989, 993, 1003, 1004, 1005, 1013, 1016, 1025, 1039, 1043], "n_test_docu": 8, "tick": [8, 44, 61, 156, 241, 273, 632, 825], "x_test_text": 8, "parsing_tim": 8, "vectorizing_tim": 8, "sum": [8, 18, 20, 27, 62, 82, 93, 99, 106, 125, 126, 146, 150, 161, 171, 182, 188, 197, 201, 205, 216, 219, 223, 225, 240, 271, 285, 292, 295, 321, 331, 344, 345, 348, 353, 354, 355, 362, 379, 388, 396, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 419, 432, 442, 443, 447, 449, 459, 464, 465, 482, 483, 484, 515, 520, 523, 531, 534, 536, 537, 541, 544, 545, 546, 549, 550, 552, 554, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 568, 569, 570, 590, 591, 611, 613, 623, 625, 635, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 676, 677, 678, 679, 681, 684, 690, 694, 696, 699, 709, 710, 719, 725, 740, 755, 757, 758, 762, 787, 829, 830, 834, 835, 844, 848, 852, 859, 860, 880, 881, 901, 902, 904, 907, 909, 910, 911, 912, 940, 964, 970, 975, 985, 989, 990, 991, 992, 1004, 1005, 1023, 1034, 1035, 1037, 1039, 1040, 1042, 1047, 1048], "cls_name": [8, 10], "string": [8, 72, 122, 161, 219, 232, 266, 320, 355, 368, 376, 377, 382, 383, 384, 388, 396, 403, 410, 413, 416, 417, 418, 420, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 489, 490, 496, 505, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 617, 620, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 699, 709, 711, 719, 731, 761, 764, 770, 773, 777, 778, 779, 780, 791, 792, 796, 797, 798, 801, 802, 804, 812, 820, 824, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 919, 921, 922, 929, 930, 931, 947, 953, 957, 973, 974, 978, 979, 989, 1002, 1004, 1016, 1023, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "n_train": [8, 10, 34, 116, 262, 1031, 1034], "6d": 8, "n_train_po": 8, "5d": 8, "cls_stat": 8, "accuracy_histori": 8, "runtime_histori": 8, "total_fit_tim": 8, "discard": [8, 56, 182, 265, 368, 406, 411, 418, 508, 509, 549, 597, 627, 630, 644, 874, 878, 890, 979, 985, 1039, 1043], "mini": [8, 65, 96, 321, 370, 396, 417, 440, 442, 447, 449, 451, 453, 531, 533, 536, 537, 538, 539, 540, 542, 543, 545, 546, 993, 994, 1031, 1042, 1044], "smaller": [8, 25, 41, 47, 56, 83, 113, 150, 158, 159, 162, 165, 186, 190, 192, 205, 234, 280, 291, 292, 301, 307, 340, 348, 354, 382, 406, 408, 409, 411, 413, 414, 416, 418, 439, 440, 446, 450, 454, 456, 514, 534, 535, 557, 558, 559, 560, 561, 562, 564, 565, 593, 610, 619, 633, 646, 647, 649, 650, 652, 653, 654, 656, 658, 659, 660, 661, 662, 663, 672, 674, 682, 683, 692, 709, 796, 801, 802, 847, 850, 874, 875, 893, 894, 901, 909, 910, 911, 912, 938, 983, 985, 986, 988, 989, 990, 992, 993, 995, 999, 1001, 1003, 1004, 1005, 1010, 1025, 1039, 1044, 1048], "bigger": [8, 41, 61, 214, 262, 304, 344, 350, 354, 367, 369, 417, 438, 439, 508, 538, 847, 1020, 1027], "overhead": [8, 285, 369, 370, 382, 388, 391, 394, 396, 416, 441, 445, 449, 534, 699, 833, 834, 836, 837, 838, 839, 840, 841, 842, 957, 991, 992, 1034, 1039, 1040, 1043], "stream": [8, 409, 414, 417, 462, 589, 870, 871, 881, 981, 1009, 1039, 1042], "minibatch_iter": 8, "total_vect_tim": 8, "x_train_text": 8, "item": [8, 9, 10, 11, 12, 13, 18, 20, 31, 44, 56, 76, 117, 119, 123, 126, 133, 171, 199, 203, 209, 223, 236, 237, 239, 249, 259, 265, 321, 328, 354, 375, 382, 383, 384, 391, 410, 464, 526, 561, 562, 588, 589, 591, 632, 810, 874, 896, 897, 916, 917, 943, 981, 1002, 1010, 1016], "updat": [8, 17, 45, 63, 113, 119, 128, 235, 317, 355, 380, 381, 382, 386, 390, 396, 409, 414, 416, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 463, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 796, 797, 798, 799, 800, 801, 802, 805, 807, 812, 816, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 916, 964, 985, 992, 993, 994, 1003, 1013, 1014, 1032, 1038, 1039, 1040, 1042, 1044, 1046, 1047, 1048], "accumul": [8, 51, 120, 121, 190, 386, 388, 409, 417, 989, 1032, 1039], "acc_histori": 8, "run_histori": 8, "circleci": [8, 51, 115, 157, 159, 161, 162, 193, 210, 248, 304, 345, 359, 382], "scikit_learn_data": [8, 51, 377, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499], "878": 8, "962": 8, "915": 8, "1601": 8, "855": 8, "1594": 8, "877": [8, 260], "61": [8, 13, 82, 172, 219, 376, 379, 388, 410, 541, 560, 713], "1573": 8, "933": [8, 75, 413], "1565": 8, "3911": 8, "517": [8, 452, 462, 1023], "938": [8, 197, 784, 989, 1020], "2274": 8, "936": [8, 340, 351, 437, 989, 1011], "2270": 8, "885": [8, 137, 150, 379], "73": [8, 13, 93, 115, 266, 328, 395, 798, 812, 847, 910, 999, 1021, 1031, 1033], "2261": 8, "941": 8, "2258": 8, "6821": 8, "891": [8, 154, 163, 1011], "952": [8, 50], "2425": 8, "2423": 8, "900": [8, 51, 75, 76], "2417": 8, "953": [8, 50], "2415": 8, "9759": 8, "1276": 8, "949": [8, 174, 175, 332, 333, 1011], "2495": 8, "2493": 8, "909": [8, 348, 351, 1011], "92": [8, 13, 33, 51, 99, 147, 177, 260, 304, 327, 328, 340, 377, 379, 538, 540, 547, 562, 597, 798, 812, 984, 1025], "2489": 8, "958": [8, 330, 333, 1011], "2487": 8, "11680": 8, "1499": 8, "944": [8, 1020], "86": [8, 13, 33, 71, 147, 192, 309, 327, 328, 787, 909, 989, 1021], "2405": 8, "956": [8, 84, 1020], "2404": 8, "2401": 8, "950": [8, 150], "2400": [8, 51], "14625": 8, "1865": 8, "965": [8, 989], "97": [8, 13, 33, 106, 150, 174, 238, 253, 328, 340, 379, 388, 395, 413, 658, 984, 990, 999, 1031], "2448": 8, "903": 8, "98": [8, 33, 43, 45, 55, 63, 65, 83, 99, 150, 230, 260, 301, 309, 328, 379, 386, 413, 416, 659, 836, 984, 991, 1020, 1025], "2447": 8, "924": 8, "2444": 8, "957": [8, 172, 727, 989], "2443": 8, "17360": [8, 1042], "2179": 8, "2488": 8, "932": 8, "2486": 8, "2485": 8, "curv": [8, 11, 24, 25, 27, 29, 38, 76, 79, 116, 118, 119, 125, 129, 140, 168, 179, 180, 191, 201, 219, 220, 222, 224, 227, 229, 231, 233, 240, 241, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 262, 272, 278, 302, 308, 311, 317, 340, 344, 360, 389, 404, 408, 413, 415, 437, 438, 439, 502, 510, 515, 521, 525, 564, 632, 645, 658, 698, 700, 702, 706, 707, 708, 709, 726, 728, 740, 741, 781, 783, 786, 787, 788, 796, 797, 804, 815, 820, 825, 827, 828, 839, 862, 881, 901, 906, 985, 986, 988, 989, 995, 1005, 1011, 1012, 1014, 1027, 1028, 1033, 1034, 1037, 1041, 1043, 1044, 1045, 1046, 1047], "evolut": [8, 10, 274, 368, 370], "cours": [8, 9, 177, 368, 382, 384, 414, 417, 418, 979, 984, 985, 1014], "valid": [8, 13, 14, 27, 55, 56, 57, 58, 72, 73, 75, 76, 79, 83, 92, 104, 111, 117, 119, 122, 123, 124, 125, 126, 129, 138, 141, 143, 144, 147, 148, 150, 151, 161, 168, 171, 173, 179, 185, 187, 188, 189, 195, 201, 203, 209, 219, 220, 231, 237, 239, 243, 249, 252, 255, 259, 262, 263, 264, 266, 268, 269, 270, 271, 274, 275, 276, 278, 280, 289, 304, 308, 313, 317, 319, 324, 330, 340, 348, 358, 369, 377, 382, 385, 394, 395, 396, 400, 403, 404, 407, 409, 410, 411, 414, 415, 416, 417, 418, 425, 437, 442, 443, 445, 446, 447, 449, 450, 457, 463, 464, 468, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 493, 501, 502, 504, 515, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 572, 575, 577, 582, 583, 589, 593, 594, 597, 602, 632, 634, 638, 639, 640, 641, 642, 643, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 688, 689, 692, 699, 701, 702, 706, 713, 727, 761, 764, 773, 777, 778, 779, 784, 791, 792, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 835, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 864, 865, 867, 873, 881, 893, 894, 896, 897, 899, 901, 903, 906, 908, 909, 910, 911, 912, 921, 922, 925, 932, 944, 946, 949, 979, 988, 989, 990, 993, 997, 999, 1001, 1003, 1004, 1005, 1009, 1010, 1011, 1014, 1016, 1019, 1027, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "consumpt": [8, 368, 534, 557, 558, 564, 565, 798, 812, 822, 823, 824, 909, 910, 911, 912, 955, 1016, 1031, 1033, 1037, 1039, 1040, 1045], "queue": [8, 992, 1034], "up": [8, 11, 38, 45, 47, 48, 49, 53, 56, 58, 63, 71, 81, 82, 90, 93, 111, 118, 166, 172, 180, 185, 194, 202, 217, 218, 249, 264, 267, 285, 298, 304, 308, 313, 321, 328, 337, 344, 348, 353, 355, 370, 376, 377, 382, 386, 388, 389, 390, 391, 394, 396, 397, 407, 409, 414, 416, 417, 443, 447, 448, 449, 450, 452, 456, 459, 460, 461, 508, 509, 536, 549, 550, 557, 558, 559, 560, 561, 562, 564, 565, 566, 610, 627, 632, 633, 639, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 681, 682, 683, 684, 692, 705, 768, 796, 797, 800, 801, 802, 804, 825, 875, 876, 879, 891, 909, 910, 911, 912, 915, 938, 941, 942, 978, 981, 985, 986, 989, 992, 999, 1003, 1004, 1010, 1013, 1014, 1024, 1025, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048], "amount": [8, 12, 46, 54, 67, 79, 82, 96, 100, 114, 116, 159, 171, 185, 205, 219, 235, 319, 327, 330, 332, 340, 348, 355, 368, 369, 370, 394, 408, 409, 411, 414, 416, 417, 418, 443, 454, 469, 538, 539, 541, 543, 563, 596, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 665, 681, 684, 692, 801, 802, 841, 842, 847, 882, 897, 898, 911, 912, 984, 985, 988, 991, 993, 999, 1001, 1002, 1003, 1004, 1023, 1024, 1044, 1048], "learner": [8, 114, 124, 133, 370, 557, 558, 559, 560, 561, 562, 564, 565, 566, 582, 589, 630, 843, 844, 849, 851, 852, 991, 994, 1005, 1009, 1010, 1025, 1047], "plot_accuraci": 8, "x_legend": 8, "n_exampl": 8, "gca": [8, 45, 63, 87, 156, 206, 210, 212, 230, 243, 266, 293, 295, 308, 336, 338, 341, 342, 996, 1028], "set_ylim": [8, 10, 17, 32, 43, 61, 73, 93, 118, 130, 131, 162, 172, 181, 199, 201, 202, 235, 247, 266, 277, 283, 290, 301, 307, 309, 310, 312, 318, 324, 330, 349], "runtim": [8, 10, 59, 113, 187, 216, 218, 235, 304, 309, 369, 384, 385, 394, 396, 408, 409, 416, 450, 563, 679, 812, 901, 902, 903, 904, 905, 906, 907, 1003, 1004, 1034, 1038, 1039, 1045, 1046, 1048], "gcf": [8, 996], "cls_runtim": 8, "bar_color": 8, "rectangl": 8, "bar": [8, 10, 15, 73, 119, 120, 123, 124, 127, 135, 146, 150, 161, 165, 172, 180, 247, 252, 261, 263, 267, 283, 312, 313, 321, 322, 354, 384, 412, 581, 632, 648, 669, 680, 989, 996, 1003, 1005, 1037, 1038, 1039, 1040], "width": [8, 10, 13, 17, 46, 54, 81, 91, 98, 99, 105, 106, 107, 116, 122, 123, 126, 135, 146, 155, 161, 184, 244, 247, 261, 288, 307, 309, 310, 313, 319, 322, 337, 379, 410, 438, 439, 452, 464, 493, 494, 506, 521, 586, 866, 914, 999, 1003, 1005, 1022, 1023, 1039], "set_xticklabel": [8, 10, 81, 107, 135, 156, 172, 174, 273, 274, 283], "ymax": [8, 10, 11, 79, 188, 190, 193, 194, 202, 210, 262, 298], "set_titl": [8, 10, 15, 26, 28, 31, 32, 33, 35, 43, 44, 46, 54, 56, 58, 61, 65, 66, 73, 76, 81, 91, 93, 101, 107, 113, 118, 120, 124, 129, 131, 133, 134, 162, 165, 166, 170, 171, 172, 173, 174, 180, 181, 190, 192, 199, 201, 202, 203, 209, 222, 223, 226, 227, 233, 235, 236, 240, 241, 247, 256, 257, 258, 259, 262, 264, 265, 269, 273, 274, 277, 280, 283, 285, 288, 289, 290, 295, 301, 302, 307, 308, 309, 310, 311, 312, 317, 321, 327, 328, 337, 344, 348, 349, 350, 353, 358], "autolabel": 8, "attach": [8, 353, 434, 846, 1032, 1042], "rect": [8, 53, 180], "height": [8, 15, 54, 99, 123, 124, 150, 307, 313, 324, 353, 415, 446, 493, 494, 506, 586], "get_height": [8, 124], "get_x": [8, 124], "get_width": [8, 124], "va": [8, 124, 273, 293, 295, 347], "setp": [8, 10, 273, 276], "rotat": [8, 41, 86, 95, 96, 98, 101, 104, 108, 125, 135, 168, 174, 225, 273, 274, 283, 340, 347, 412, 414, 419, 421, 504, 532, 541, 550, 614, 697, 881, 913, 985, 1011, 1042, 1043], "read": [8, 13, 18, 96, 222, 269, 317, 318, 319, 321, 323, 368, 376, 380, 383, 384, 385, 386, 387, 389, 390, 394, 395, 396, 409, 420, 421, 422, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 610, 611, 613, 614, 615, 616, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 698, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 857, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 915, 934, 978, 985, 989, 990, 1009, 1014, 1025, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "feat": [8, 10, 386, 417], "extr": 8, "hash": [8, 112, 137, 168, 354, 355, 368, 370, 374, 382, 385, 394, 416, 514, 544, 557, 566, 581, 582, 589, 640, 836, 954, 981, 1011, 1025, 1027, 1032, 1035, 1038], "vect": [8, 71, 263, 331, 417, 1025], "874": [8, 16, 74, 217, 220, 787, 788, 989, 1011], "plot_out_of_core_classif": [8, 16, 1011], "featurehash": [8, 20, 71, 168, 331, 352, 353, 354, 356, 370, 377, 417, 464, 488, 581, 588, 589, 590, 591, 874, 1011, 1032, 1037, 1038, 1039, 1045, 1046], "dictvector": [8, 20, 71, 168, 331, 352, 353, 354, 356, 377, 417, 488, 582, 588, 589, 590, 591, 874, 1011, 1031, 1032, 1035, 1041, 1043, 1044, 1047, 1048], "comparison": [8, 12, 14, 20, 24, 25, 26, 27, 29, 30, 34, 36, 37, 39, 41, 43, 49, 51, 58, 59, 60, 61, 62, 64, 69, 71, 80, 91, 95, 97, 98, 100, 107, 108, 113, 116, 119, 126, 131, 135, 136, 144, 146, 151, 152, 158, 160, 162, 163, 168, 173, 183, 185, 187, 189, 192, 199, 201, 205, 216, 219, 221, 224, 225, 226, 227, 228, 229, 233, 234, 245, 249, 255, 257, 258, 259, 266, 270, 274, 278, 283, 294, 301, 309, 311, 312, 314, 317, 319, 331, 332, 337, 347, 352, 353, 354, 356, 364, 377, 379, 396, 407, 411, 412, 414, 418, 419, 437, 438, 443, 446, 447, 449, 488, 504, 512, 514, 515, 522, 525, 541, 549, 550, 553, 564, 565, 581, 582, 588, 589, 590, 591, 606, 608, 610, 611, 615, 622, 625, 631, 639, 643, 658, 672, 688, 689, 690, 691, 692, 704, 737, 742, 778, 787, 798, 799, 800, 801, 803, 804, 812, 814, 815, 816, 817, 818, 819, 827, 836, 839, 843, 858, 862, 874, 875, 879, 881, 882, 886, 887, 888, 889, 890, 891, 892, 901, 903, 904, 906, 907, 909, 978, 983, 986, 989, 991, 992, 995, 1004, 1011, 1028], "biclust": [8, 22, 23, 71, 329, 331, 353, 354, 355, 371, 417, 424, 449, 451, 453, 488, 511, 513, 591, 719, 794, 989, 1011, 1026, 1027, 1033, 1037], "spectral": [8, 14, 19, 23, 37, 45, 47, 50, 56, 69, 71, 168, 223, 224, 329, 331, 353, 354, 355, 382, 417, 449, 451, 452, 453, 462, 469, 470, 471, 472, 473, 474, 475, 476, 488, 511, 513, 591, 688, 689, 690, 691, 692, 695, 719, 794, 992, 1002, 1011, 1026, 1027, 1031, 1032], "cluster": [8, 9, 14, 15, 18, 19, 21, 23, 25, 43, 44, 47, 49, 51, 52, 54, 55, 58, 60, 62, 63, 69, 71, 81, 90, 91, 92, 102, 103, 111, 115, 122, 129, 145, 148, 174, 198, 223, 225, 226, 227, 234, 240, 247, 248, 249, 250, 263, 287, 291, 292, 294, 310, 318, 322, 327, 328, 329, 331, 342, 352, 353, 355, 356, 362, 370, 371, 375, 377, 379, 382, 384, 387, 394, 396, 404, 410, 415, 417, 423, 424, 427, 488, 502, 503, 504, 511, 512, 513, 514, 515, 522, 530, 541, 544, 564, 566, 589, 590, 591, 631, 691, 692, 695, 704, 705, 710, 717, 719, 724, 730, 735, 736, 754, 756, 777, 778, 785, 791, 792, 794, 796, 797, 853, 854, 862, 866, 873, 881, 930, 932, 950, 957, 973, 979, 986, 988, 992, 995, 997, 999, 1002, 1006, 1009, 1010, 1011, 1014, 1016, 1019, 1022, 1025, 1026, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "algorithm": [8, 9, 11, 14, 18, 19, 23, 30, 32, 37, 38, 40, 43, 44, 46, 47, 51, 57, 58, 59, 60, 61, 62, 63, 67, 68, 69, 71, 80, 81, 86, 96, 98, 113, 114, 115, 119, 122, 129, 168, 177, 188, 190, 204, 215, 217, 218, 224, 226, 229, 233, 234, 240, 245, 248, 249, 250, 253, 259, 262, 271, 285, 291, 292, 294, 298, 307, 309, 312, 317, 318, 319, 322, 324, 329, 331, 339, 353, 354, 355, 364, 368, 370, 375, 376, 377, 378, 379, 382, 383, 384, 385, 390, 391, 395, 396, 398, 405, 406, 408, 409, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 469, 474, 475, 478, 482, 483, 484, 488, 503, 511, 512, 513, 514, 515, 522, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 544, 545, 546, 547, 548, 553, 554, 555, 556, 559, 560, 563, 591, 603, 604, 610, 611, 635, 637, 639, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 674, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 704, 705, 708, 717, 719, 734, 736, 742, 773, 777, 778, 792, 794, 796, 797, 829, 838, 839, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 857, 862, 866, 868, 881, 885, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 921, 937, 938, 940, 954, 964, 979, 981, 984, 986, 987, 988, 989, 991, 994, 995, 999, 1002, 1003, 1004, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1019, 1020, 1022, 1024, 1025, 1027, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "illustr": [9, 24, 25, 27, 32, 34, 53, 57, 58, 71, 72, 75, 76, 79, 81, 87, 93, 98, 102, 113, 116, 121, 128, 130, 132, 133, 145, 150, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 166, 168, 170, 172, 173, 177, 190, 197, 198, 201, 203, 205, 209, 211, 212, 214, 215, 218, 219, 222, 223, 225, 227, 230, 232, 233, 235, 236, 237, 239, 247, 251, 262, 269, 274, 275, 286, 294, 299, 310, 312, 316, 317, 319, 330, 340, 341, 345, 346, 348, 349, 354, 355, 361, 364, 368, 379, 382, 387, 390, 395, 412, 414, 416, 417, 515, 610, 611, 613, 614, 615, 619, 622, 623, 850, 978, 985, 989, 992, 995, 1001, 1002, 1003, 1004, 1011, 1014, 1016], "robust": [9, 35, 62, 64, 78, 80, 84, 104, 124, 126, 150, 166, 168, 171, 172, 179, 191, 203, 205, 218, 220, 230, 240, 276, 307, 323, 370, 379, 384, 390, 409, 416, 417, 446, 448, 469, 470, 473, 474, 475, 476, 524, 534, 559, 560, 649, 657, 670, 671, 678, 679, 749, 831, 862, 876, 878, 879, 890, 896, 936, 989, 993, 995, 999, 1002, 1003, 1009, 1011, 1012, 1014, 1026, 1027, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1047], "covari": [9, 12, 30, 34, 36, 80, 84, 86, 104, 107, 128, 129, 153, 160, 204, 230, 246, 248, 250, 251, 252, 253, 254, 269, 296, 371, 391, 396, 400, 409, 412, 414, 419, 482, 483, 484, 485, 504, 515, 519, 527, 532, 534, 541, 548, 549, 550, 563, 610, 611, 613, 622, 623, 631, 644, 645, 650, 654, 656, 682, 683, 686, 689, 693, 796, 797, 798, 817, 988, 995, 999, 1011, 1012, 1026, 1027, 1031, 1033, 1034, 1035, 1036, 1038, 1040], "wine": [9, 243, 312, 313, 375, 510, 1027], "tool": [9, 11, 124, 171, 237, 260, 265, 364, 371, 375, 376, 377, 380, 382, 384, 385, 386, 387, 388, 389, 390, 395, 396, 397, 398, 399, 400, 403, 409, 410, 411, 487, 692, 701, 978, 984, 985, 989, 995, 999, 1004, 1006, 1009, 1010, 1014, 1016, 1025, 1038, 1041, 1044, 1045, 1046], "purpos": [9, 12, 17, 38, 87, 124, 165, 215, 216, 217, 222, 224, 238, 250, 252, 258, 259, 340, 341, 348, 353, 354, 364, 377, 382, 384, 395, 396, 397, 399, 402, 406, 409, 410, 414, 416, 417, 418, 419, 638, 823, 824, 861, 986, 989, 990, 992, 995, 1007, 1009, 1016, 1043, 1045], "awar": [9, 15, 147, 162, 337, 353, 380, 382, 384, 394, 397, 413, 417, 567, 568, 648, 654, 655, 656, 658, 659, 669, 680, 847, 876, 995, 999, 1005, 1028, 1031, 1032, 1045], "thing": [9, 35, 223, 257, 353, 369, 370, 377, 381, 382, 384, 394, 397, 409, 411, 417, 559, 560, 985, 999, 1014, 1037], "trivial": [9, 203, 358, 382, 409, 816, 903, 906, 986, 1010, 1031], "dimens": [9, 12, 13, 15, 38, 41, 54, 83, 86, 91, 96, 150, 155, 157, 159, 161, 172, 184, 185, 199, 224, 226, 230, 234, 235, 241, 248, 249, 289, 290, 294, 310, 344, 353, 354, 355, 377, 379, 383, 396, 408, 409, 414, 415, 419, 421, 442, 443, 445, 447, 448, 449, 452, 464, 465, 482, 483, 484, 493, 494, 515, 524, 525, 529, 530, 533, 541, 549, 582, 583, 584, 585, 587, 589, 597, 611, 619, 622, 641, 644, 659, 690, 691, 692, 694, 695, 699, 763, 822, 841, 842, 846, 860, 893, 894, 895, 903, 904, 905, 906, 907, 921, 922, 923, 952, 960, 963, 979, 981, 983, 985, 986, 987, 990, 992, 993, 995, 1001, 1004, 1016, 1023, 1024, 1038, 1040, 1041, 1043], "below": [9, 13, 26, 27, 28, 33, 35, 56, 61, 71, 76, 81, 90, 91, 96, 111, 117, 120, 121, 126, 145, 170, 172, 184, 197, 198, 201, 203, 217, 218, 223, 227, 232, 237, 240, 242, 244, 257, 260, 265, 267, 268, 269, 307, 311, 317, 318, 319, 320, 321, 322, 323, 324, 345, 353, 362, 364, 369, 375, 376, 380, 382, 384, 386, 387, 391, 396, 397, 399, 409, 411, 412, 413, 414, 416, 417, 418, 419, 446, 448, 471, 472, 478, 491, 492, 494, 495, 496, 497, 498, 500, 501, 502, 504, 505, 510, 531, 537, 542, 548, 582, 595, 596, 597, 598, 599, 600, 633, 646, 652, 658, 659, 667, 668, 673, 675, 692, 699, 705, 742, 762, 796, 797, 798, 809, 812, 830, 861, 864, 874, 875, 878, 884, 890, 978, 979, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 995, 996, 997, 999, 1003, 1004, 1005, 1006, 1009, 1018, 1025, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "main": [9, 17, 33, 63, 87, 100, 123, 168, 230, 271, 283, 316, 348, 353, 368, 369, 370, 375, 380, 382, 384, 386, 388, 390, 394, 395, 396, 398, 399, 407, 408, 409, 414, 416, 417, 419, 503, 525, 530, 549, 550, 625, 713, 831, 901, 902, 978, 986, 988, 989, 996, 1001, 1010, 1013, 1022, 1025, 1031, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "empir": [9, 13, 25, 26, 35, 37, 43, 44, 60, 64, 65, 69, 78, 80, 81, 83, 84, 168, 181, 219, 268, 307, 407, 413, 416, 419, 447, 449, 460, 469, 470, 471, 474, 477, 478, 532, 534, 539, 541, 543, 549, 551, 565, 590, 603, 639, 649, 667, 671, 678, 679, 716, 721, 722, 723, 826, 836, 837, 838, 840, 859, 882, 924, 963, 981, 983, 989, 991, 993, 999, 1001, 1003, 1011, 1026, 1027], "mode": [9, 10, 47, 48, 81, 201, 230, 285, 287, 304, 317, 382, 385, 390, 391, 394, 406, 412, 416, 420, 443, 444, 447, 449, 452, 459, 462, 471, 472, 478, 482, 487, 508, 509, 557, 561, 564, 592, 595, 596, 598, 599, 600, 610, 627, 644, 645, 658, 659, 666, 668, 673, 674, 675, 676, 679, 682, 683, 689, 693, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 857, 901, 903, 906, 909, 911, 927, 937, 938, 940, 992, 995, 1009, 1016, 1017, 1024, 1032, 1040, 1045, 1048], "stick": [9, 796, 988], "bias": [9, 28, 83, 99, 126, 132, 170, 171, 173, 267, 377, 398, 407, 416, 524, 549, 857, 881, 892, 984, 988, 997, 1003, 1005], "yet": [9, 58, 185, 219, 252, 263, 355, 370, 377, 381, 386, 394, 398, 399, 400, 413, 414, 416, 417, 419, 448, 452, 461, 462, 465, 472, 553, 554, 555, 556, 567, 568, 569, 570, 577, 593, 594, 602, 627, 671, 673, 675, 777, 860, 898, 973, 978, 985, 989, 995, 1003, 1010, 1040, 1048], "extent": [9, 59, 155, 156, 157, 234, 346, 349, 440, 535, 696, 796, 989], "assum": [9, 35, 56, 58, 160, 166, 170, 171, 190, 201, 219, 230, 233, 253, 262, 271, 307, 348, 355, 369, 381, 382, 384, 386, 388, 394, 395, 396, 398, 403, 406, 407, 409, 411, 413, 414, 416, 417, 419, 420, 425, 430, 437, 439, 444, 446, 450, 457, 463, 469, 470, 471, 472, 473, 474, 475, 476, 503, 508, 509, 532, 542, 548, 549, 561, 562, 567, 568, 587, 588, 589, 591, 620, 632, 643, 644, 646, 647, 652, 658, 659, 660, 661, 662, 666, 667, 668, 671, 672, 676, 677, 678, 681, 685, 687, 688, 692, 709, 725, 734, 740, 755, 763, 768, 773, 777, 780, 798, 801, 802, 812, 837, 843, 844, 847, 848, 849, 851, 852, 857, 868, 881, 949, 965, 966, 967, 979, 983, 985, 987, 988, 989, 991, 992, 994, 995, 996, 999, 1003, 1005, 1037, 1043], "parametr": [9, 25, 26, 83, 233, 289, 311, 320, 407, 410, 415, 416, 437, 551, 553, 635, 685, 696, 877, 889, 932, 933, 985, 988, 991, 992, 999, 1002, 1005, 1039, 1041, 1044], "minimum": [9, 13, 56, 58, 81, 126, 127, 149, 190, 211, 234, 240, 272, 291, 292, 384, 391, 399, 402, 406, 409, 416, 417, 441, 445, 446, 450, 454, 456, 469, 470, 473, 474, 475, 476, 511, 513, 541, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 594, 627, 631, 632, 635, 637, 668, 671, 676, 678, 679, 682, 683, 692, 705, 724, 778, 779, 801, 802, 822, 837, 858, 859, 870, 871, 874, 875, 876, 880, 894, 895, 908, 909, 910, 911, 912, 918, 921, 922, 925, 941, 986, 989, 993, 995, 999, 1001, 1005, 1031, 1034, 1038, 1039, 1043, 1044, 1048], "determin": [9, 11, 14, 20, 47, 56, 81, 113, 115, 119, 158, 171, 180, 181, 197, 204, 262, 307, 312, 344, 355, 362, 364, 381, 382, 384, 391, 395, 396, 406, 407, 409, 413, 414, 416, 417, 418, 419, 432, 437, 441, 442, 443, 445, 447, 449, 450, 456, 459, 460, 461, 465, 469, 470, 472, 473, 474, 475, 476, 482, 483, 484, 488, 491, 492, 495, 497, 503, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 537, 539, 542, 543, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 565, 567, 568, 570, 582, 583, 584, 588, 591, 594, 602, 607, 608, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 635, 636, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 672, 673, 674, 675, 676, 678, 679, 680, 687, 689, 690, 692, 693, 694, 707, 711, 722, 728, 729, 737, 782, 783, 784, 786, 787, 792, 798, 800, 801, 802, 804, 812, 820, 821, 822, 823, 824, 825, 826, 828, 832, 834, 835, 837, 844, 846, 847, 852, 857, 858, 859, 865, 866, 874, 875, 876, 878, 882, 890, 901, 902, 904, 907, 910, 912, 915, 936, 952, 960, 963, 978, 981, 983, 988, 992, 994, 995, 999, 1002, 1003, 1005, 1016, 1031, 1036, 1039, 1040, 1042, 1043, 1044], "outli": [9, 81, 396, 469, 474, 985, 995], "skew": [9, 126, 204, 234, 240, 307, 323, 374, 413, 639, 640, 641, 642, 877, 889, 985, 999, 1027, 1034, 1038, 1047], "Of": [9, 26, 28, 165, 368, 384, 409, 417, 979], "screen": [9, 1044], "presenc": [9, 61, 63, 81, 82, 111, 170, 174, 185, 205, 240, 307, 380, 383, 396, 411, 414, 712, 725, 755, 768, 830, 864, 872, 874, 881, 973, 979, 985, 989, 990, 1003, 1034, 1035, 1037, 1041, 1043, 1045], "univari": [9, 10, 37, 48, 69, 73, 75, 140, 144, 145, 147, 151, 168, 183, 200, 216, 275, 335, 351, 374, 408, 409, 410, 417, 445, 504, 525, 530, 592, 595, 596, 598, 599, 600, 602, 605, 606, 607, 608, 609, 627, 628, 629, 630, 645, 798, 803, 823, 827, 861, 862, 871, 876, 880, 881, 901, 906, 985, 1004, 1006, 1011, 1012, 1024, 1027, 1031, 1037], "appli": [9, 13, 15, 20, 26, 28, 33, 41, 45, 47, 48, 56, 57, 59, 63, 72, 74, 76, 87, 91, 96, 97, 103, 105, 107, 118, 119, 124, 126, 146, 153, 171, 173, 185, 190, 205, 206, 215, 222, 223, 224, 230, 235, 237, 262, 263, 265, 274, 283, 294, 307, 311, 312, 318, 340, 344, 355, 362, 364, 368, 374, 382, 384, 390, 394, 395, 396, 406, 407, 408, 409, 410, 411, 413, 414, 416, 417, 418, 419, 421, 440, 446, 452, 462, 464, 465, 467, 469, 474, 482, 483, 484, 485, 508, 509, 516, 517, 518, 524, 531, 532, 533, 534, 535, 537, 539, 541, 542, 543, 548, 549, 550, 553, 554, 557, 558, 559, 560, 564, 565, 566, 588, 589, 590, 591, 627, 632, 633, 638, 639, 641, 642, 658, 659, 668, 676, 677, 678, 691, 699, 701, 707, 725, 755, 757, 758, 780, 787, 791, 792, 798, 812, 827, 830, 836, 837, 838, 839, 840, 850, 860, 861, 870, 877, 878, 881, 886, 887, 889, 890, 891, 892, 897, 908, 909, 910, 911, 912, 921, 927, 930, 937, 938, 961, 979, 981, 985, 986, 987, 988, 989, 991, 993, 995, 999, 1003, 1004, 1005, 1006, 1008, 1014, 1032, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1045], "ellipticenvelop": [9, 230, 470, 473, 474, 475, 476, 563, 995, 1031, 1034, 1038, 1039, 1044], "decisionboundarydisplai": [9, 31, 32, 35, 57, 115, 129, 134, 184, 193, 210, 215, 265, 288, 293, 296, 312, 336, 337, 338, 339, 341, 342, 344, 359, 1045, 1046, 1048], "oneclasssvm": [9, 11, 17, 215, 230, 320, 339, 563, 677, 847, 995, 1003, 1004, 1033, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046], "support_fract": [9, 469, 474], "contamin": [9, 81, 82, 230, 240, 291, 292, 469, 563, 847, 995, 1039, 1047, 1048], "ocsvm": [9, 215], "line": [9, 11, 13, 17, 18, 41, 44, 61, 71, 81, 92, 96, 101, 113, 119, 125, 152, 163, 165, 166, 168, 171, 172, 189, 190, 191, 193, 196, 197, 199, 202, 203, 204, 209, 210, 212, 213, 215, 230, 234, 235, 238, 240, 259, 266, 268, 269, 291, 295, 298, 308, 319, 339, 342, 344, 345, 349, 350, 353, 376, 377, 380, 382, 383, 384, 386, 387, 388, 389, 390, 394, 414, 415, 416, 438, 487, 488, 489, 508, 509, 542, 553, 554, 555, 556, 610, 613, 614, 632, 670, 686, 700, 701, 702, 804, 820, 957, 983, 989, 993, 996, 1003, 1009, 1011, 1013, 1023, 1025, 1033, 1042, 1044, 1047, 1048], "mline": [9, 81, 215, 291, 339, 342], "load_win": [9, 243, 312, 845, 853, 1028, 1042], "red": [9, 10, 11, 27, 34, 35, 61, 81, 93, 96, 97, 98, 116, 133, 136, 162, 177, 180, 181, 191, 199, 227, 241, 257, 268, 298, 302, 308, 312, 313, 329, 340, 361, 380, 396, 409, 414, 990], "frontier": [9, 215, 291, 339, 995, 1023], "legend_lin": 9, "response_method": [9, 31, 35, 57, 115, 129, 134, 184, 193, 210, 215, 265, 288, 293, 296, 312, 336, 337, 339, 344, 359, 631, 632, 633, 698, 700, 702, 741, 989, 1048], "decision_funct": [9, 11, 17, 26, 28, 57, 115, 129, 142, 213, 214, 215, 231, 237, 240, 269, 291, 292, 301, 309, 324, 338, 339, 340, 344, 345, 346, 350, 384, 396, 407, 416, 437, 469, 549, 550, 553, 555, 559, 561, 563, 567, 593, 594, 631, 632, 633, 658, 659, 666, 668, 674, 675, 676, 677, 698, 700, 702, 707, 720, 725, 726, 734, 738, 739, 741, 755, 781, 787, 788, 793, 798, 801, 802, 812, 822, 829, 830, 831, 832, 847, 861, 868, 898, 901, 903, 905, 906, 985, 989, 995, 996, 1003, 1004, 1023, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1048], "plot_method": [9, 35, 184, 215, 288, 293, 336, 338, 339, 341, 342, 344, 631], "contour": [9, 11, 17, 35, 47, 48, 81, 122, 142, 150, 156, 157, 159, 212, 213, 214, 215, 230, 235, 251, 291, 298, 338, 339, 341, 342, 344, 345, 346, 379, 389, 631, 632, 995, 1003], "line2d": [9, 81, 215, 291, 339, 342, 804, 820], "bbox_arg": 9, "dict": [9, 10, 11, 12, 18, 27, 40, 46, 71, 74, 75, 103, 119, 124, 126, 128, 199, 207, 230, 239, 249, 260, 261, 263, 266, 269, 271, 285, 289, 309, 313, 321, 331, 340, 354, 355, 370, 374, 376, 384, 394, 396, 410, 413, 420, 421, 423, 427, 431, 433, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 496, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 697, 698, 700, 701, 702, 713, 761, 764, 770, 778, 779, 796, 797, 798, 801, 802, 804, 809, 810, 812, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 916, 926, 927, 943, 946, 949, 978, 989, 999, 1020, 1021, 1025, 1027, 1031, 1037, 1038, 1047, 1048], "boxstyl": [9, 309], "fc": [9, 290, 377], "arrow_arg": 9, "arrowstyl": 9, "xy": [9, 27, 50, 269, 298, 345, 399, 646, 647, 650, 651, 652, 653, 654, 655, 660, 661, 662, 663, 664, 681, 682, 683, 684, 686], "xycoord": [9, 27], "textcoord": [9, 177], "xytext": [9, 27, 177], "bbox": [9, 12, 35, 46, 103, 247, 248, 249, 252, 253, 309], "arrowprop": [9, 27], "ash": [9, 379, 1034, 1037], "malic_acid": 9, "abil": [9, 13, 62, 81, 97, 126, 152, 153, 154, 158, 160, 161, 162, 163, 165, 168, 170, 171, 173, 201, 205, 219, 230, 353, 370, 399, 416, 417, 419, 611, 622, 625, 781, 782, 783, 786, 986, 989, 992, 995, 1005, 1010, 1011, 1031, 1033, 1038, 1040, 1044, 1045], "locat": [9, 26, 54, 55, 73, 81, 82, 195, 298, 319, 340, 375, 380, 382, 386, 387, 390, 391, 399, 409, 411, 415, 448, 460, 461, 469, 470, 471, 472, 473, 474, 475, 476, 488, 500, 501, 504, 505, 512, 515, 974, 979, 985, 990, 995, 999, 1005, 1039], "hard": [9, 201, 230, 234, 262, 264, 370, 381, 394, 396, 409, 414, 417, 534, 541, 569, 676, 903, 904, 905, 906, 907, 985, 1002, 1004, 1005, 1010, 1023, 1024, 1025, 1040, 1041], "due": [9, 13, 27, 28, 54, 56, 61, 76, 113, 116, 153, 171, 172, 180, 185, 192, 199, 201, 203, 218, 219, 234, 240, 248, 270, 271, 283, 285, 312, 313, 344, 348, 353, 354, 355, 380, 382, 388, 396, 399, 407, 409, 413, 414, 416, 419, 443, 446, 447, 459, 535, 539, 543, 544, 574, 671, 798, 801, 802, 806, 808, 812, 822, 823, 826, 829, 833, 834, 866, 870, 871, 881, 979, 985, 986, 988, 989, 990, 992, 996, 1003, 1004, 1010, 1024, 1031, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "banana": [9, 989], "anywai": [9, 353, 384, 665, 685, 686], "rid": [9, 1003], "difficulti": [9, 28, 219, 307, 370, 382, 407, 858, 859, 988, 992], "bandwidth": [9, 45, 64, 236, 289, 290, 298, 394, 396, 409, 415, 448, 458, 461, 841, 842, 846, 982, 995, 1042, 1046], "compromis": [9, 172, 368, 382, 647, 679, 992, 1034], "risk": [9, 56, 201, 205, 219, 308, 348, 364, 381, 382, 396, 408, 413, 416, 567, 568, 886, 887, 889, 890, 891, 892, 985, 989, 1014, 1038], "flavanoid": [9, 379], "color_intens": 9, "346": [9, 16, 416, 501, 555, 556, 1011], "plot_outlier_detection_win": [9, 16, 1011], "anomali": [9, 11, 81, 129, 168, 215, 218, 229, 240, 245, 291, 292, 377, 408, 469, 512, 522, 563, 639, 677, 847, 862, 905, 995, 1009, 1011, 1037, 1038], "toi": [9, 11, 21, 37, 40, 41, 42, 43, 48, 50, 53, 54, 56, 57, 58, 68, 69, 81, 87, 100, 116, 129, 134, 135, 168, 183, 191, 205, 215, 218, 229, 240, 245, 247, 291, 292, 302, 337, 347, 375, 388, 394, 416, 417, 440, 441, 442, 444, 446, 448, 449, 450, 452, 458, 469, 512, 514, 522, 563, 639, 677, 725, 755, 797, 847, 854, 862, 881, 905, 986, 988, 989, 995, 999, 1011, 1027], "lof": [9, 168, 215, 230, 240, 286, 299, 339, 563, 847, 905, 995, 1011], "discrimin": [9, 10, 15, 30, 36, 79, 80, 81, 82, 83, 105, 145, 147, 150, 168, 177, 216, 223, 238, 252, 294, 371, 379, 407, 416, 475, 512, 549, 550, 566, 631, 782, 850, 978, 986, 989, 992, 1003, 1005, 1011, 1012, 1023, 1027, 1034], "ellipsoid": [9, 30, 34, 36, 81, 82, 83, 168, 246, 247, 249, 250, 251, 252, 253, 254, 549, 550, 631, 796, 797, 983, 988, 1011], "mahalanobi": [9, 78, 82, 84, 104, 168, 204, 409, 411, 450, 457, 469, 470, 471, 472, 473, 474, 475, 476, 699, 777, 778, 779, 848, 983, 995, 1011, 1039, 1042, 1043], "distanc": [9, 40, 41, 56, 58, 61, 62, 66, 68, 78, 82, 84, 101, 104, 150, 165, 168, 174, 187, 202, 204, 222, 224, 227, 234, 240, 285, 287, 288, 293, 295, 297, 298, 307, 312, 317, 321, 322, 344, 353, 354, 368, 379, 391, 394, 396, 406, 409, 411, 414, 415, 419, 420, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 455, 456, 457, 458, 459, 461, 462, 463, 468, 469, 470, 471, 472, 473, 474, 475, 476, 538, 540, 547, 607, 608, 615, 619, 620, 622, 623, 628, 658, 659, 666, 668, 674, 675, 676, 677, 678, 688, 689, 690, 692, 693, 694, 695, 696, 699, 703, 724, 733, 757, 759, 761, 762, 763, 764, 767, 768, 769, 770, 771, 772, 777, 778, 779, 780, 791, 792, 795, 830, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 880, 895, 899, 901, 903, 905, 906, 907, 909, 910, 911, 912, 979, 983, 986, 987, 989, 995, 999, 1001, 1003, 1004, 1010, 1011, 1023, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "goal": [10, 18, 21, 53, 58, 87, 165, 172, 177, 201, 216, 219, 239, 240, 259, 260, 353, 369, 370, 377, 384, 387, 388, 396, 397, 398, 414, 418, 542, 548, 590, 593, 738, 989, 992, 994, 995, 1003, 1004, 1005, 1007, 1014, 1016, 1019, 1023, 1025, 1039], "boxplot": [10, 81, 127, 171, 174, 317], "gc": 10, "defaultdict": [10, 13, 20, 26, 174, 265, 354, 355], "make_regress": [10, 76, 180, 182, 183, 187, 204, 205, 275, 318, 324, 364, 378, 384, 385, 395, 554, 556, 560, 565, 635, 646, 647, 649, 651, 653, 655, 663, 664, 665, 667, 671, 679, 859, 902, 989, 990, 992], "randomforestregressor": [10, 119, 132, 133, 136, 165, 166, 319, 324, 395, 416, 557, 558, 560, 562, 566, 568, 570, 632, 633, 911, 979, 1036, 1037, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "sgdregressor": [10, 212, 368, 370, 394, 408, 646, 649, 667, 671, 676, 679, 859, 902, 907, 985, 1003, 1033, 1035, 1037, 1038, 1039, 1042, 1044, 1045, 1046, 1047], "shuffl": [10, 13, 15, 21, 22, 25, 28, 33, 49, 61, 62, 96, 119, 120, 122, 133, 166, 185, 209, 210, 215, 230, 263, 267, 268, 275, 285, 314, 327, 328, 329, 330, 342, 353, 354, 364, 377, 391, 396, 404, 469, 474, 488, 489, 491, 492, 495, 497, 503, 511, 512, 513, 514, 515, 519, 522, 524, 531, 537, 539, 540, 546, 547, 553, 554, 555, 556, 564, 565, 567, 568, 602, 658, 659, 666, 667, 668, 672, 674, 676, 677, 678, 687, 798, 800, 801, 802, 803, 804, 812, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 831, 858, 859, 882, 901, 902, 903, 906, 937, 938, 960, 984, 985, 990, 997, 1003, 1004, 1020, 1025, 1027, 1031, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042], "atomic_benchmark_estim": 10, "verbos": [10, 43, 51, 55, 65, 71, 73, 75, 133, 188, 263, 303, 304, 307, 320, 331, 353, 380, 386, 396, 403, 440, 443, 447, 449, 452, 454, 459, 462, 464, 467, 471, 472, 478, 531, 536, 537, 538, 539, 540, 543, 545, 546, 547, 548, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 593, 594, 627, 632, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 690, 692, 694, 764, 777, 796, 797, 798, 801, 802, 804, 812, 820, 822, 823, 824, 825, 826, 828, 830, 832, 835, 850, 857, 858, 859, 860, 861, 862, 863, 898, 901, 902, 903, 904, 905, 906, 907, 955, 1010, 1033, 1034, 1036, 1038, 1039, 1040, 1042, 1043, 1045, 1046], "n_instanc": [10, 633], "zero": [10, 11, 14, 28, 35, 38, 41, 42, 53, 55, 80, 82, 83, 96, 99, 101, 115, 116, 125, 127, 128, 132, 147, 150, 166, 180, 185, 187, 192, 194, 195, 200, 201, 202, 205, 206, 207, 211, 216, 219, 234, 237, 238, 240, 247, 251, 253, 259, 262, 267, 271, 272, 290, 307, 318, 319, 344, 348, 354, 355, 358, 362, 368, 369, 377, 384, 388, 396, 407, 408, 409, 411, 414, 416, 417, 418, 419, 422, 446, 452, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 487, 497, 508, 509, 523, 526, 527, 531, 532, 535, 537, 538, 539, 540, 542, 543, 547, 548, 552, 557, 558, 559, 560, 561, 562, 564, 565, 566, 581, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 611, 636, 639, 643, 644, 645, 650, 658, 659, 664, 665, 666, 667, 668, 671, 676, 677, 678, 685, 686, 703, 709, 712, 713, 715, 716, 724, 728, 729, 733, 737, 739, 745, 782, 783, 784, 786, 795, 796, 813, 814, 817, 818, 830, 841, 842, 843, 844, 845, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 864, 871, 873, 874, 876, 877, 878, 880, 881, 887, 888, 889, 890, 894, 901, 909, 910, 911, 912, 936, 975, 979, 985, 987, 988, 991, 992, 993, 999, 1000, 1001, 1003, 1004, 1005, 1016, 1023, 1025, 1031, 1033, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "atomic_benchmark": 10, "percentil": [10, 13, 72, 126, 240, 244, 307, 368, 592, 595, 596, 598, 599, 600, 603, 606, 632, 633, 747, 999, 1036, 1044], "bulk_benchmark_estim": 10, "n_bulk_repeat": 10, "whole": [10, 51, 75, 136, 166, 202, 259, 266, 340, 344, 358, 368, 380, 382, 394, 395, 410, 412, 416, 419, 449, 483, 538, 555, 556, 557, 558, 563, 564, 565, 566, 570, 685, 686, 798, 801, 802, 812, 825, 836, 837, 838, 839, 840, 978, 989, 999, 1025, 1039, 1041], "bulk_benchmark": 10, "benchmark_estim": 10, "repeat": [10, 34, 67, 80, 82, 125, 150, 153, 159, 160, 172, 177, 203, 257, 262, 263, 274, 280, 328, 354, 355, 384, 391, 396, 397, 406, 407, 408, 409, 414, 417, 418, 588, 593, 607, 608, 615, 627, 634, 659, 803, 813, 814, 817, 927, 979, 988, 1027, 1039, 1041], "atomic_runtim": 10, "bulk_runtim": 10, "pair": [10, 13, 38, 45, 59, 65, 101, 115, 117, 122, 126, 142, 157, 161, 181, 184, 193, 210, 213, 219, 234, 257, 262, 269, 271, 332, 336, 338, 340, 341, 342, 344, 346, 354, 359, 377, 394, 396, 406, 407, 410, 413, 417, 419, 437, 440, 441, 445, 450, 457, 463, 471, 472, 478, 493, 508, 509, 582, 592, 595, 596, 598, 599, 600, 610, 613, 614, 615, 617, 619, 620, 622, 623, 625, 627, 632, 633, 643, 692, 699, 700, 705, 706, 707, 715, 730, 739, 757, 758, 762, 765, 768, 769, 770, 771, 772, 773, 775, 777, 778, 779, 780, 781, 785, 829, 841, 842, 916, 989, 990, 991, 992, 999, 1005, 1031, 1043, 1044, 1046, 1047, 1048], "contain": [10, 13, 20, 25, 28, 34, 41, 50, 57, 59, 71, 72, 115, 117, 121, 129, 159, 171, 172, 174, 177, 192, 205, 219, 230, 237, 240, 241, 244, 252, 260, 262, 268, 271, 272, 283, 291, 292, 294, 307, 320, 328, 331, 353, 354, 375, 376, 377, 379, 382, 384, 386, 387, 388, 389, 390, 391, 395, 396, 403, 407, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 421, 423, 433, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 462, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 496, 500, 502, 503, 504, 508, 509, 510, 514, 515, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 686, 688, 689, 690, 691, 692, 696, 697, 698, 700, 701, 702, 709, 712, 734, 735, 736, 771, 778, 779, 787, 793, 796, 797, 798, 801, 802, 804, 812, 816, 817, 820, 824, 825, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 920, 921, 922, 941, 942, 944, 945, 952, 956, 978, 979, 981, 987, 990, 993, 995, 999, 1000, 1002, 1005, 1009, 1016, 1025, 1031, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "generate_dataset": 10, "coef": [10, 55, 106, 170, 171, 180, 185, 188, 192, 193, 195, 200, 204, 205, 206, 210, 217, 244, 275, 303, 323, 349, 524, 646, 647, 649, 652, 653, 659, 660, 661, 662, 663, 669, 672, 674, 680, 681, 682, 683, 684, 685, 686, 687, 993], "random_se": [10, 93, 122], "x_scaler": 10, "y_scaler": 10, "ok": [10, 382, 995], "boxplot_runtim": 10, "pred_typ": 10, "micro": [10, 298, 331, 368, 707, 713, 728, 729, 737, 782, 783, 786, 787, 989, 1031, 1039, 1040, 1046], "bp": [10, 127, 150, 189, 190, 379, 997], "cls_info": 10, "estimator_conf": 10, "whisker": 10, "flier": 10, "marker": [10, 11, 18, 28, 31, 35, 38, 39, 43, 53, 56, 59, 60, 61, 64, 65, 86, 92, 93, 98, 102, 119, 132, 160, 161, 177, 189, 194, 196, 198, 199, 201, 203, 204, 216, 218, 223, 247, 249, 250, 257, 262, 264, 265, 266, 292, 307, 312, 329, 358, 382, 386, 417, 1039, 1041, 1042, 1047], "linestyl": [10, 11, 17, 34, 61, 74, 81, 104, 106, 113, 125, 135, 139, 142, 153, 156, 158, 160, 162, 173, 174, 186, 188, 189, 190, 201, 202, 203, 207, 211, 213, 214, 219, 238, 240, 259, 261, 265, 266, 271, 290, 298, 302, 308, 338, 341, 342, 344, 345, 346, 348, 1021], "major": [10, 15, 35, 119, 269, 307, 311, 317, 318, 319, 320, 321, 322, 323, 324, 344, 355, 368, 377, 381, 382, 385, 388, 394, 397, 409, 413, 415, 417, 551, 569, 570, 694, 913, 915, 989, 992, 1003, 1010, 1014, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "lightgrei": 10, "set_axisbelow": 10, "capit": [10, 26, 324, 804, 820], "clf_name": [10, 353], "n_feature_influ": 10, "nber": 10, "estimator_nam": [10, 209, 384, 389, 438, 576, 698, 700, 702, 920], "percentile_perf_in_u": 10, "plot_n_features_influ": 10, "il": [10, 664, 685, 686, 985, 989], "benchmark_throughput": 10, "duration_sec": 10, "estimator_config": 10, "n_predict": 10, "plot_benchmark_throughput": 10, "cls_valu": 10, "sec": [10, 209, 224, 227, 285], "1e2": [10, 153, 160, 236, 253, 340, 745], "randomforest": [10, 122, 368, 416, 909, 910, 1036], "0001": [10, 150, 209, 260, 384, 421, 443, 447, 459, 471, 472, 478, 533, 538, 540, 547, 549, 550, 559, 560, 646, 647, 648, 649, 652, 653, 658, 659, 660, 661, 662, 663, 668, 669, 672, 674, 676, 678, 680, 687, 689, 693, 858, 859, 901, 902, 978], "250": [10, 66, 126, 177, 222, 272, 278, 344, 493, 692, 978, 1001, 1011, 1038], "500": [10, 45, 51, 58, 61, 62, 64, 86, 87, 104, 106, 117, 119, 127, 149, 153, 177, 214, 215, 223, 241, 242, 247, 248, 252, 262, 265, 275, 285, 291, 297, 311, 318, 323, 324, 346, 350, 368, 416, 469, 470, 474, 475, 476, 482, 483, 484, 611, 613, 614, 616, 621, 624, 625, 650, 651, 654, 655, 656, 680, 682, 683, 859, 978, 1004], "771": [10, 16, 1011], "plot_prediction_lat": [10, 16, 1011], "anova": [10, 55, 75, 140, 144, 146, 149, 150, 151, 168, 260, 335, 351, 410, 504, 515, 592, 595, 596, 598, 599, 600, 604, 605, 606, 609, 713, 823, 827, 861, 862, 881, 901, 906, 1004, 1011], "ledoit": [10, 15, 30, 35, 36, 78, 79, 82, 83, 84, 168, 294, 473, 475, 479, 480, 512, 549, 983, 1011], "wolf": [10, 15, 30, 35, 36, 78, 79, 82, 83, 84, 168, 294, 473, 475, 479, 480, 512, 549, 983, 1011, 1038], "oa": [10, 15, 30, 35, 36, 78, 82, 83, 84, 104, 128, 168, 294, 296, 411, 469, 470, 473, 474, 476, 477, 512, 549, 798, 983, 1011], "conserv": [11, 396, 582, 589, 893, 894, 988, 1001], "biologi": 11, "south": [11, 171, 298, 415], "american": [11, 12, 71, 82, 377, 409, 411, 415, 416, 417, 469, 474, 730, 881], "mammal": 11, "past": [11, 13, 386, 387, 390, 394, 397, 413, 414, 416, 538, 555, 556, 678, 1014, 1017, 1047], "environment": [11, 185, 219], "unsuccess": 11, "cast": [11, 54, 201, 223, 376, 396, 397, 417, 496, 644, 645, 646, 652, 656, 657, 660, 661, 662, 663, 664, 665, 673, 675, 954, 1038, 1039, 1040, 1041, 1044, 1046], "densiti": [11, 50, 56, 61, 66, 76, 102, 106, 150, 156, 168, 187, 201, 202, 216, 219, 226, 230, 234, 246, 247, 248, 253, 254, 262, 268, 280, 286, 291, 292, 299, 307, 312, 340, 353, 379, 391, 396, 409, 416, 420, 428, 444, 446, 448, 450, 452, 464, 467, 498, 502, 536, 541, 549, 550, 796, 797, 798, 841, 842, 846, 847, 894, 983, 985, 988, 992, 994, 995, 1001, 1009, 1011, 1012, 1016, 1026, 1027, 1033, 1035, 1039, 1040, 1046, 1047], "phillip": [11, 298, 498], "2006": [11, 298, 416, 419, 462, 498, 557, 558, 565, 566, 610, 611, 614, 619, 622, 649, 666, 667, 740, 787, 788, 796, 836, 894, 911, 912, 985, 989, 991, 994, 1001, 1002], "basemap": [11, 298], "coast": [11, 298], "nation": [11, 81, 298, 377, 848], "boundari": [11, 14, 26, 27, 28, 32, 35, 59, 61, 112, 115, 122, 131, 135, 137, 142, 154, 155, 157, 168, 172, 184, 202, 210, 230, 235, 238, 265, 276, 293, 295, 296, 298, 301, 307, 309, 312, 326, 331, 333, 335, 337, 338, 339, 340, 342, 349, 350, 351, 359, 378, 407, 416, 417, 419, 450, 456, 504, 536, 549, 550, 569, 588, 589, 591, 631, 734, 760, 798, 830, 843, 849, 851, 852, 853, 876, 880, 897, 898, 903, 905, 906, 909, 925, 983, 992, 995, 999, 1002, 1003, 1004, 1011, 1031, 1033, 1035, 1044, 1045, 1046, 1048], "america": [11, 12, 81, 298, 848, 999], "bradypu": [11, 298, 498], "variegatu": [11, 298, 498], "brown": [11, 93, 298, 498, 628, 979, 1036, 1038, 1039, 1040, 1043], "throat": [11, 298, 498], "sloth": [11, 298, 498], "microryzomi": [11, 298, 498], "minutu": [11, 298, 498], "known": [11, 18, 26, 28, 40, 50, 58, 59, 82, 105, 106, 133, 158, 160, 166, 185, 201, 202, 219, 230, 262, 264, 271, 294, 298, 308, 320, 327, 337, 344, 354, 370, 379, 380, 382, 385, 390, 394, 396, 405, 406, 407, 409, 410, 411, 412, 413, 414, 416, 417, 419, 438, 463, 482, 484, 498, 508, 509, 544, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 588, 589, 591, 594, 609, 622, 633, 658, 659, 672, 682, 683, 694, 704, 710, 713, 718, 728, 742, 754, 756, 794, 830, 836, 837, 838, 839, 840, 843, 848, 851, 857, 885, 909, 910, 911, 912, 979, 981, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 999, 1004, 1005, 1016, 1021, 1023, 1024], "forest": [11, 28, 32, 112, 113, 118, 122, 124, 125, 127, 128, 129, 131, 133, 136, 137, 165, 168, 169, 175, 177, 230, 259, 261, 263, 298, 319, 353, 361, 364, 375, 395, 396, 407, 408, 418, 463, 464, 490, 491, 495, 496, 498, 515, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 630, 634, 798, 803, 827, 834, 861, 875, 905, 909, 910, 911, 978, 979, 990, 997, 1010, 1011, 1012, 1027, 1028, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1048], "rice": [11, 298, 498, 1044], "rat": [11, 298, 498], "rodent": [11, 298, 498], "live": [11, 71, 171, 298, 382, 409, 498, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "peru": [11, 298, 498], "colombia": [11, 298, 498], "ecuador": [11, 298, 498], "venezuela": [11, 298, 498], "entropi": [11, 242, 274, 298, 319, 327, 328, 364, 409, 416, 421, 498, 533, 557, 564, 607, 608, 658, 717, 735, 736, 740, 794, 909, 911, 985, 986, 989, 993, 1005, 1033, 1035, 1039, 1040, 1045, 1047, 1048], "anderson": [11, 298, 498, 1037, 1043], "schapir": [11, 280, 298, 416, 498, 553, 554], "ecolog": [11, 298, 498], "190": [11, 125, 219, 259, 271, 278, 298, 388, 498, 1011], "231": [11, 298, 409, 420, 444, 498, 584], "259": [11, 224, 228, 298, 416, 498, 567, 568, 1011], "________________________________________________________________________________": [11, 55, 353], "coastlin": [11, 150, 298, 379], "coverag": [11, 13, 126, 201, 219, 298, 385, 405, 498, 627, 720], "area": [11, 13, 129, 150, 201, 219, 240, 259, 262, 269, 271, 272, 340, 344, 345, 349, 379, 382, 386, 394, 409, 417, 702, 706, 707, 708, 741, 787, 788, 986, 989, 992, 1008, 1033], "roc": [11, 26, 118, 150, 168, 229, 231, 240, 241, 245, 255, 257, 264, 269, 278, 324, 330, 389, 407, 413, 504, 510, 564, 658, 702, 706, 707, 708, 726, 741, 781, 787, 788, 817, 827, 830, 868, 906, 995, 1011, 1028, 1033, 1034, 1036, 1037, 1041, 1043, 1047], "868443": 11, "993919": 11, "elaps": [11, 48, 68, 119, 120, 121, 368, 464, 467, 569, 570, 860, 861, 862, 863], "astro": [11, 160, 222, 250], "washington": [11, 160, 222, 250, 290, 298], "fetch_species_distribut": [11, 298, 1040], "bunch": [11, 375, 376, 377, 464, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 507, 510, 567, 568, 569, 570, 632, 633, 634, 860, 861, 909, 910, 911, 912, 946, 949, 1014, 1025, 1036, 1038, 1041, 1043, 1047], "ll": [11, 56, 121, 257, 298, 382, 394, 532, 541, 981, 992, 1005, 1016], "otherwis": [11, 57, 63, 115, 162, 166, 182, 203, 209, 298, 344, 348, 364, 370, 380, 384, 386, 388, 396, 400, 409, 411, 413, 417, 419, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 449, 451, 453, 454, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 496, 526, 527, 533, 534, 535, 536, 538, 540, 541, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 594, 597, 602, 610, 611, 614, 631, 632, 633, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 686, 690, 692, 696, 697, 698, 700, 702, 703, 707, 709, 713, 714, 723, 725, 726, 727, 728, 729, 737, 740, 751, 753, 754, 755, 765, 773, 777, 780, 781, 782, 783, 784, 786, 787, 788, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 812, 816, 817, 820, 825, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 858, 859, 861, 864, 865, 866, 867, 868, 872, 873, 880, 881, 882, 883, 886, 887, 888, 890, 891, 892, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 914, 916, 922, 924, 937, 938, 948, 950, 973, 975, 984, 985, 986, 989, 992, 993, 995, 996, 999, 1001, 1003, 1004, 1009, 1014, 1016, 1033, 1039, 1040, 1041, 1044, 1047], "improvis": [11, 298], "mpl_toolkit": [11, 46, 68, 91, 102, 103, 172, 198, 222, 224, 298], "except": [11, 17, 45, 54, 99, 111, 119, 209, 216, 230, 237, 270, 285, 298, 302, 303, 307, 309, 322, 371, 375, 382, 384, 385, 386, 387, 394, 396, 400, 403, 406, 410, 413, 414, 416, 417, 419, 432, 460, 465, 468, 482, 483, 484, 509, 554, 556, 557, 558, 560, 562, 564, 565, 568, 570, 611, 627, 630, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 687, 711, 777, 805, 834, 835, 841, 842, 844, 847, 852, 858, 859, 865, 879, 881, 899, 902, 904, 907, 910, 912, 942, 975, 985, 989, 1004, 1016, 1024, 1025, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1048], "importerror": [11, 17, 54, 99, 285, 298, 390], "construct_grid": [11, 298], "object": [11, 14, 15, 20, 27, 45, 51, 63, 67, 71, 72, 99, 111, 133, 139, 148, 149, 158, 168, 172, 185, 197, 201, 217, 219, 229, 237, 241, 243, 244, 245, 260, 269, 271, 272, 274, 298, 313, 320, 321, 323, 324, 327, 354, 355, 364, 375, 376, 377, 382, 383, 385, 387, 388, 389, 391, 395, 396, 397, 400, 403, 409, 410, 411, 414, 417, 418, 419, 423, 425, 430, 432, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 700, 701, 702, 711, 718, 731, 732, 741, 757, 758, 780, 781, 788, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 916, 921, 922, 923, 924, 925, 928, 932, 934, 944, 945, 946, 947, 948, 949, 950, 952, 954, 955, 957, 974, 975, 977, 985, 986, 987, 988, 992, 995, 996, 999, 1002, 1003, 1004, 1009, 1010, 1011, 1016, 1017, 1019, 1020, 1023, 1025, 1027, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "func": [11, 76, 118, 171, 181, 219, 298, 382, 410, 465, 699, 865, 999, 1035, 1037, 1039, 1040, 1048], "xgrid": [11, 298], "ygrid": [11, 298], "correspond": [11, 13, 14, 17, 21, 27, 33, 42, 54, 66, 79, 83, 98, 113, 116, 119, 120, 122, 129, 146, 149, 150, 154, 159, 162, 171, 190, 193, 201, 202, 205, 210, 219, 231, 236, 237, 244, 252, 261, 263, 265, 266, 271, 272, 298, 312, 319, 320, 321, 354, 358, 359, 364, 369, 376, 377, 378, 381, 382, 384, 386, 389, 390, 395, 396, 397, 406, 407, 409, 411, 412, 413, 414, 416, 417, 418, 419, 424, 430, 437, 439, 441, 445, 448, 451, 453, 459, 461, 463, 464, 472, 482, 483, 484, 490, 491, 492, 493, 494, 495, 496, 534, 541, 544, 545, 546, 549, 550, 552, 555, 557, 559, 560, 561, 564, 582, 584, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 617, 630, 632, 633, 635, 643, 644, 645, 646, 647, 648, 652, 658, 659, 660, 661, 662, 668, 669, 671, 672, 673, 674, 675, 676, 678, 680, 681, 682, 683, 687, 690, 691, 692, 694, 703, 710, 713, 723, 724, 733, 737, 741, 751, 753, 773, 777, 781, 787, 788, 793, 795, 796, 797, 798, 801, 802, 804, 812, 820, 822, 830, 833, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 850, 858, 859, 868, 871, 872, 874, 875, 878, 882, 890, 901, 902, 903, 906, 909, 910, 911, 912, 926, 932, 946, 949, 964, 978, 979, 981, 982, 983, 985, 986, 988, 989, 990, 992, 993, 994, 995, 996, 999, 1000, 1003, 1004, 1008, 1016, 1022, 1025, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "coordin": [11, 12, 14, 55, 101, 132, 157, 186, 222, 263, 298, 368, 414, 419, 443, 447, 448, 449, 461, 471, 472, 478, 531, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 550, 614, 646, 647, 651, 652, 653, 654, 655, 656, 658, 660, 661, 662, 663, 681, 682, 683, 684, 688, 689, 690, 693, 694, 706, 763, 768, 901, 985, 986, 1004, 1023, 1031, 1034, 1035, 1036, 1040, 1042, 1044, 1045, 1046], "corner": [11, 14, 27, 54, 170, 259, 263, 271, 272, 298, 324, 382, 498, 913, 915, 989, 1045], "cell": [11, 12, 21, 27, 33, 72, 73, 118, 120, 121, 129, 130, 133, 136, 147, 150, 158, 171, 172, 173, 182, 231, 232, 233, 237, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 298, 304, 313, 318, 319, 321, 322, 324, 329, 362, 379, 387, 692, 989, 990, 1037, 1045], "xmin": [11, 79, 191, 193, 210, 211, 298], "x_left_lower_corn": [11, 298, 498], "grid_siz": [11, 62, 298, 498], "xmax": [11, 79, 191, 193, 210, 211, 298], "nx": [11, 298, 498], "ymin": [11, 79, 188, 190, 193, 194, 202, 210, 262, 298], "y_left_lower_corn": [11, 298, 498], "ny": [11, 13, 261, 298, 379, 498, 979, 1001], "create_species_bunch": 11, "species_nam": [11, 298], "record": [11, 97, 117, 173, 237, 313, 355, 368, 382, 409, 411, 450, 457, 498, 620, 643, 692, 770, 773, 777, 778, 779, 780, 824, 847, 1044, 1045], "join": [11, 12, 20, 56, 165, 219, 262, 309, 377, 397, 463, 1025, 1031, 1039], "ascii": [11, 298, 417, 487, 588, 589, 591], "pt": [11, 377, 418, 877, 999], "desir": [11, 25, 115, 150, 166, 201, 203, 307, 311, 375, 382, 384, 386, 390, 403, 406, 409, 412, 413, 414, 418, 503, 538, 540, 544, 547, 567, 593, 602, 603, 664, 670, 685, 686, 699, 708, 735, 841, 842, 846, 861, 866, 868, 871, 872, 874, 875, 877, 878, 882, 885, 887, 889, 890, 925, 981, 983, 986, 992, 999, 1003, 1004, 1005, 1016, 1031, 1039, 1040, 1041, 1044], "pts_": 11, "ix": [11, 271, 347], "searchsort": 11, "dd": [11, 12, 131, 298, 498], "ii": [11, 97, 172, 208, 257, 379, 417, 582, 583, 589, 638, 666, 667, 864, 873, 985, 999, 1008], "lat": [11, 298, 498, 763], "cov_": [11, 83], "plot_species_distribut": 11, "bradypus_variegatus_0": 11, "microryzomys_minutus_0": 11, "meshgrid": [11, 17, 27, 43, 59, 81, 122, 131, 154, 155, 156, 157, 159, 172, 212, 213, 214, 215, 227, 230, 251, 291, 298, 301, 309, 310, 332, 339, 340, 345, 346, 349, 350, 631], "bv_bunch": 11, "mm_bunch": 11, "background_point": 11, "c_": [11, 17, 26, 27, 28, 59, 81, 97, 102, 122, 125, 130, 131, 140, 142, 155, 199, 214, 217, 230, 291, 310, 312, 332, 340, 346, 349, 350, 409, 659, 714, 715, 718, 989, 1020, 1023, 1024], "randint": [11, 38, 82, 93, 125, 166, 173, 225, 233, 237, 239, 274, 319, 324, 384, 387, 395, 400, 802, 819, 836, 837, 838, 840, 978, 979], "land": [11, 298, 397, 416], "water": 11, "land_refer": [11, 298], "standard": [11, 12, 13, 21, 27, 33, 35, 56, 62, 71, 72, 74, 81, 82, 87, 97, 113, 116, 118, 119, 120, 121, 122, 129, 133, 150, 153, 158, 160, 162, 171, 180, 186, 190, 199, 201, 210, 222, 223, 224, 235, 240, 252, 257, 260, 261, 262, 263, 265, 307, 312, 338, 353, 368, 369, 374, 375, 376, 378, 379, 380, 382, 384, 385, 387, 388, 391, 394, 396, 399, 403, 405, 409, 411, 412, 413, 417, 419, 446, 468, 472, 488, 496, 501, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 522, 524, 525, 530, 532, 535, 541, 552, 590, 594, 611, 634, 644, 645, 672, 673, 674, 675, 676, 678, 687, 689, 693, 787, 804, 819, 820, 838, 841, 842, 843, 844, 845, 847, 849, 850, 851, 852, 853, 854, 855, 865, 870, 871, 874, 877, 878, 879, 881, 889, 890, 891, 892, 899, 901, 902, 921, 978, 981, 985, 986, 989, 991, 992, 993, 995, 1003, 1004, 1010, 1014, 1016, 1021, 1023, 1024, 1025, 1027, 1037, 1038, 1039, 1040, 1042, 1043, 1044], "cov_train": 11, "train_cover_std": 11, "cyl": [11, 298], "llcrnrlat": [11, 298], "urcrnrlat": [11, 298], "llcrnrlon": [11, 298], "urcrnrlon": [11, 298], "drawcoastlin": [11, 298], "drawcountri": [11, 298], "9998": [11, 298], "solid": [11, 17, 32, 34, 125, 156, 213, 214, 230, 240, 298, 309, 1014], "z": [11, 17, 59, 102, 122, 142, 155, 157, 172, 211, 213, 214, 222, 224, 230, 235, 251, 291, 298, 301, 309, 312, 332, 340, 345, 346, 350, 379, 406, 414, 416, 553, 554, 585, 639, 664, 671, 685, 686, 689, 693, 699, 723, 784, 881, 985, 986, 993, 994, 1046], "float64": [11, 14, 49, 54, 72, 125, 127, 128, 171, 172, 273, 321, 322, 369, 376, 382, 384, 396, 417, 471, 472, 478, 496, 497, 508, 509, 542, 581, 582, 589, 591, 641, 658, 673, 675, 699, 737, 866, 874, 875, 903, 904, 906, 907, 910, 912, 919, 921, 960, 963, 965, 966, 967, 1004, 1016, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "idx": [11, 17, 20, 46, 56, 106, 115, 119, 122, 134, 162, 172, 174, 185, 193, 200, 201, 210, 223, 359, 410, 413], "9999": [11, 219, 298, 330, 498, 627, 1039], "coverages_land": 11, "contourf": [11, 17, 122, 215, 235, 291, 298, 301, 309, 310, 332, 339, 345, 350, 631, 632], "pts_train": 11, "pts_test": 11, "auc": [11, 26, 150, 201, 219, 240, 259, 262, 266, 269, 271, 272, 324, 407, 702, 708, 787, 989, 1036, 1039, 1043], "pred_background": 11, "pred_test": 11, "cov_test": 11, "r_": [11, 102, 106, 214, 215, 248, 269, 291, 292, 339, 345, 350, 409, 707, 989, 1005], "fpr": [11, 231, 240, 259, 271, 272, 389, 592, 596, 698, 702, 706, 726, 788, 989, 1028, 1031, 1047], "tpr": [11, 231, 240, 259, 271, 272, 389, 702, 706, 788, 989, 1028, 1031, 1047], "threshold": [11, 26, 43, 66, 93, 99, 106, 150, 168, 172, 174, 196, 231, 233, 259, 260, 261, 269, 272, 283, 323, 324, 326, 333, 359, 362, 396, 409, 414, 416, 418, 441, 442, 445, 446, 469, 500, 508, 509, 531, 537, 542, 548, 549, 550, 563, 588, 591, 593, 597, 602, 603, 644, 667, 671, 676, 678, 692, 698, 700, 702, 703, 706, 707, 720, 725, 726, 738, 739, 755, 781, 787, 788, 793, 796, 797, 817, 836, 847, 848, 864, 866, 868, 884, 896, 897, 898, 906, 913, 915, 963, 985, 989, 992, 993, 995, 999, 1002, 1004, 1005, 1010, 1011, 1031, 1035, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1048], "roc_curv": [11, 231, 259, 271, 702, 706, 726, 781, 787, 989, 1031, 1032, 1033, 1036, 1037, 1039, 1044, 1047], "roc_auc": [11, 150, 262, 266, 271, 272, 389, 634, 702, 989, 1028], "ntime": [11, 273], "662": [11, 16, 1011], "plot_species_distribution_model": [11, 16, 498, 1011], "multi": [11, 32, 51, 92, 112, 114, 116, 117, 122, 124, 131, 134, 136, 137, 142, 155, 157, 168, 179, 184, 185, 187, 188, 190, 193, 200, 208, 217, 220, 221, 224, 228, 229, 230, 238, 241, 245, 255, 259, 271, 278, 283, 300, 302, 305, 308, 309, 310, 317, 322, 332, 336, 345, 349, 350, 353, 357, 358, 359, 360, 362, 363, 369, 377, 379, 384, 385, 391, 396, 399, 409, 416, 417, 419, 426, 437, 452, 462, 469, 474, 495, 496, 504, 505, 510, 514, 515, 519, 520, 522, 541, 549, 550, 551, 553, 555, 557, 558, 559, 561, 564, 565, 567, 569, 610, 631, 633, 643, 646, 647, 652, 653, 657, 658, 660, 661, 662, 663, 666, 668, 672, 673, 674, 675, 676, 681, 684, 690, 703, 713, 720, 733, 739, 741, 782, 798, 812, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 848, 849, 851, 857, 858, 859, 862, 868, 881, 885, 896, 897, 901, 903, 906, 909, 910, 911, 913, 914, 915, 921, 924, 927, 978, 990, 992, 996, 999, 1003, 1009, 1010, 1011, 1012, 1016, 1022, 1026, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1047, 1048], "iri": [11, 18, 31, 32, 34, 42, 46, 75, 89, 94, 95, 98, 100, 101, 102, 107, 108, 112, 113, 114, 115, 117, 131, 134, 137, 142, 146, 152, 154, 157, 158, 161, 163, 168, 177, 179, 184, 193, 194, 198, 220, 235, 238, 244, 249, 256, 267, 268, 271, 272, 277, 288, 294, 296, 301, 302, 309, 319, 326, 331, 333, 335, 336, 338, 340, 342, 343, 344, 351, 357, 358, 360, 361, 362, 363, 375, 376, 395, 409, 410, 413, 414, 416, 496, 504, 541, 549, 553, 557, 564, 610, 622, 631, 676, 798, 812, 896, 897, 898, 901, 906, 909, 913, 914, 915, 978, 979, 983, 988, 989, 992, 996, 999, 1002, 1003, 1004, 1005, 1011, 1016, 1023, 1024, 1027, 1044], "emploi": [12, 153, 236, 411, 417, 450, 478, 582, 589, 997, 1014, 1024, 1037], "techniqu": [12, 19, 71, 73, 98, 107, 114, 124, 141, 149, 150, 166, 168, 170, 209, 224, 226, 267, 280, 289, 320, 328, 344, 358, 370, 379, 394, 396, 407, 408, 409, 413, 414, 415, 416, 417, 418, 447, 448, 449, 450, 534, 554, 677, 689, 693, 694, 725, 755, 981, 985, 986, 988, 989, 992, 995, 997, 1001, 1003, 1005, 1010, 1014, 1019, 1024, 1025, 1044], "histor": [12, 201, 1010], "quot": [12, 15, 71, 263, 353, 354, 369, 376, 377, 380, 386, 405, 408, 488, 489, 496, 989, 1001, 1004, 1025, 1046], "quantiti": [12, 123, 262, 269, 319, 368, 396, 409, 416, 721, 722, 723, 784, 857, 978, 980, 983, 985, 1036], "daili": [12, 1014], "price": [12, 76, 123, 124, 133, 240, 313, 979, 985, 1014, 1021], "link": [12, 18, 113, 171, 172, 180, 201, 205, 219, 247, 265, 295, 358, 369, 380, 381, 382, 383, 384, 386, 390, 396, 407, 409, 411, 414, 419, 561, 562, 610, 648, 669, 680, 688, 705, 920, 922, 985, 992, 1005, 1006, 1009, 1013, 1019, 1023, 1025, 1029, 1031, 1034, 1035, 1038, 1039, 1042, 1048], "fluctuat": [12, 61, 201, 269, 1039], "normalesup": [12, 33, 47, 67, 235], "2003": [12, 406, 409, 414, 417, 451, 452, 462, 513, 515, 689, 693, 836, 838, 985, 986, 991, 1001, 1039], "2008": [12, 411, 413, 414, 478, 534, 563, 590, 645, 664, 685, 686, 692, 716, 725, 755, 831, 836, 840, 857, 983, 986, 987, 989, 990, 991, 994, 995, 1004], "calm": 12, "ago": [12, 1010], "tech": [12, 379, 839], "firm": [12, 409], "crash": [12, 382, 468, 891, 892, 899, 999, 1035, 1039, 1047, 1048], "nasdaq": 12, "alphavantag": 12, "symbol_dict": 12, "tot": 12, "xom": 12, "exxon": 12, "cvx": 12, "chevron": 12, "cop": 12, "conocophillip": 12, "vlo": 12, "valero": 12, "energi": [12, 390, 857, 994, 1023], "msft": 12, "ibm": [12, 20, 331, 355, 377], "twx": 12, "warner": [12, 1046, 1047], "cmcsa": 12, "comcast": 12, "cvc": 12, "cablevis": 12, "yhoo": 12, "yahoo": 12, "dell": 12, "hpq": 12, "hp": [12, 1025], "amzn": 12, "amazon": 12, "tm": [12, 992], "toyota": 12, "caj": 12, "canon": [12, 396, 407, 416, 482, 483, 485, 767, 1010, 1012, 1027], "sne": [12, 168, 221, 222, 223, 224, 226, 228, 285, 514, 525, 692, 1011, 1026, 1027], "soni": [12, 1041, 1043], "ford": 12, "hmc": 12, "honda": 12, "nav": 12, "navistar": 12, "noc": 12, "northrop": 12, "grumman": 12, "ba": [12, 858, 859, 993], "boe": 12, "ko": [12, 27, 154], "coca": 12, "cola": 12, "mmm": 12, "3m": 12, "mcd": [12, 81, 82, 411, 469, 474], "mcdonald": 12, "pep": [12, 390, 1031], "pepsi": 12, "kellogg": 12, "un": [12, 382, 407, 417, 421, 533, 589, 794, 864, 873, 884, 888, 1040], "unilev": 12, "mar": [12, 1007], "marriott": 12, "pg": [12, 388, 649, 985, 1036], "procter": 12, "gambl": 12, "colgat": [12, 18], "palmol": 12, "ge": [12, 980, 991, 1043], "electr": [12, 379, 409], "wfc": 12, "fargo": 12, "jpm": 12, "jpmorgan": [12, 1014], "chase": [12, 1031], "aig": 12, "axp": 12, "bac": 12, "bank": [12, 20, 1014], "goldman": 12, "sach": 12, "aapl": 12, "appl": [12, 368, 380, 394, 990], "sap": 12, "csco": 12, "cisco": 12, "txn": 12, "texa": [12, 71], "instrument": [12, 71, 97, 170], "xrx": 12, "xerox": 12, "wmt": 12, "wal": 12, "mart": [12, 1041], "hd": 12, "depot": 12, "gsk": 12, "glaxosmithklin": 12, "pfe": 12, "pfizer": 12, "sny": 12, "sanofi": 12, "aventi": 12, "nv": 12, "novarti": 12, "kmb": 12, "kimberli": 12, "clark": 12, "ryder": 12, "gd": [12, 136], "dynam": [12, 13, 172, 555, 556, 557, 558, 563, 564, 565, 566, 579, 580, 676, 677, 678, 1005, 1014, 1037, 1043, 1048], "rtn": 12, "raytheon": 12, "cat": [12, 72, 172, 173, 240, 320, 321, 322, 323, 324, 377, 417, 582, 712, 718, 753, 782, 882, 989, 999, 1040, 1041, 1043], "caterpillar": 12, "dupont": 12, "nemour": 12, "symbol": [12, 355, 369, 384, 388, 411, 417, 499, 582, 588, 589, 591, 913, 915, 1009], "fetch": [12, 18, 133, 171, 219, 375, 376, 377, 382, 386, 387, 390, 408, 414, 496, 555, 556, 557, 558, 563, 564, 565, 566, 588, 589, 591, 1039, 1047], "histori": [12, 371, 559, 560, 1007, 1031], "stderr": [12, 830], "url": [12, 18, 150, 376, 379, 384, 386], "githubusercont": 12, "master": [12, 17, 285, 322, 382, 386, 1014, 1036], "financi": [12, 409, 416, 985], "csv": [12, 376, 379, 387, 1013, 1039, 1044], "read_csv": [12, 387, 496, 1046], "close_pric": 12, "vstack": [12, 27, 58, 66, 156, 157, 183, 247, 251, 285, 298, 345, 631, 990, 1039], "q": [12, 72, 86, 126, 201, 320, 406, 409, 414, 937, 985, 1004], "open_pric": 12, "carri": [12, 32, 113, 166, 262, 265, 270, 302, 309, 355, 397, 403, 417, 557, 558, 559, 560, 564, 565, 566, 909, 910, 911, 912, 1014, 1024], "invers": [12, 35, 55, 78, 79, 80, 82, 84, 113, 168, 252, 269, 271, 277, 288, 340, 354, 355, 374, 396, 408, 410, 412, 413, 414, 417, 421, 445, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 527, 533, 534, 535, 539, 541, 543, 557, 561, 564, 589, 590, 591, 628, 644, 645, 658, 659, 666, 668, 674, 675, 676, 677, 678, 680, 723, 742, 751, 796, 797, 843, 844, 851, 852, 858, 859, 861, 865, 868, 874, 875, 877, 893, 894, 901, 902, 903, 906, 907, 909, 911, 927, 983, 985, 989, 992, 993, 999, 1003, 1004, 1011, 1023, 1025, 1026, 1027, 1031, 1034, 1039, 1042, 1043, 1045], "correl": [12, 28, 83, 86, 87, 107, 120, 121, 130, 146, 149, 150, 158, 168, 169, 170, 172, 173, 175, 185, 190, 196, 219, 262, 268, 283, 313, 318, 319, 330, 375, 378, 379, 387, 396, 398, 406, 411, 413, 418, 450, 457, 482, 483, 485, 493, 494, 500, 524, 564, 606, 609, 627, 634, 635, 636, 682, 683, 742, 756, 777, 778, 779, 827, 841, 842, 878, 879, 881, 890, 980, 985, 990, 996, 999, 1003, 1005, 1010, 1011, 1012, 1027, 1031, 1032, 1033, 1044, 1045], "condition": [12, 28, 201, 407, 411, 757, 983], "connect": [12, 40, 45, 48, 52, 55, 63, 67, 68, 380, 382, 391, 396, 411, 441, 445, 452, 462, 463, 585, 586, 695, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 987, 992, 994, 1002, 1035, 1044, 1048], "edge_model": 12, "graphicallassocv": [12, 83, 400, 411, 471, 473, 474, 475, 476, 478, 1039, 1043, 1045, 1047], "rather": [12, 54, 83, 113, 116, 165, 171, 201, 202, 215, 240, 311, 312, 353, 354, 364, 369, 378, 382, 384, 387, 388, 390, 394, 395, 396, 397, 409, 413, 414, 416, 417, 419, 448, 461, 463, 565, 581, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 629, 646, 647, 652, 653, 660, 661, 662, 663, 780, 812, 832, 834, 835, 864, 901, 902, 913, 938, 983, 985, 986, 989, 991, 992, 996, 1010, 1020, 1023, 1031, 1032, 1033, 1034, 1038, 1039, 1040, 1041, 1046, 1047], "former": [12, 355, 416, 417, 565, 800, 807, 816, 991, 1031, 1037, 1040], "recoveri": [12, 83, 185, 200, 411, 418], "03162278": 12, "05994843": 12, "11364637": 12, "21544347": 12, "40842387": 12, "77426368": 12, "46779927": 12, "7825594": 12, "27499706": 12, "rerun": [12, 27, 43, 72, 73, 118, 120, 121, 129, 130, 133, 136, 147, 158, 171, 172, 173, 182, 231, 232, 233, 237, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 304, 313, 318, 319, 321, 322, 324, 329, 362, 390], "trust": [12, 27, 72, 73, 82, 113, 118, 120, 121, 129, 130, 133, 136, 147, 158, 171, 172, 173, 174, 182, 231, 232, 233, 237, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 304, 313, 318, 319, 321, 322, 324, 329, 362, 386, 397, 403, 407, 1020, 1045], "unabl": [12, 27, 72, 73, 118, 120, 121, 129, 130, 133, 136, 147, 158, 170, 171, 172, 173, 182, 185, 201, 231, 232, 233, 237, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 304, 313, 318, 319, 321, 322, 324, 329, 362, 370, 881, 999, 1040], "render": [12, 27, 54, 72, 73, 118, 120, 121, 129, 130, 133, 136, 147, 158, 171, 172, 173, 182, 196, 205, 231, 232, 233, 237, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 304, 313, 318, 319, 321, 322, 324, 329, 362, 382, 384, 386, 387, 388, 396, 551, 589, 631, 700, 702, 878, 890, 913, 915, 988, 1005, 1044, 1048], "nbviewer": [12, 27, 72, 73, 118, 120, 121, 129, 130, 133, 136, 147, 158, 171, 172, 173, 182, 231, 232, 233, 237, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 304, 313, 318, 319, 321, 322, 324, 329, 362], "nbsp": [12, 13, 27, 72, 73, 118, 120, 121, 126, 129, 130, 133, 136, 147, 158, 171, 172, 173, 182, 190, 231, 232, 233, 237, 241, 242, 243, 244, 252, 260, 262, 263, 269, 274, 304, 313, 318, 319, 321, 322, 324, 329, 362], "graphicallassocvifittedgraphicallassocv": 12, "group": [12, 38, 41, 56, 59, 61, 135, 172, 174, 201, 223, 237, 253, 257, 313, 324, 329, 354, 362, 377, 387, 396, 397, 400, 409, 415, 416, 417, 434, 446, 495, 588, 589, 591, 594, 718, 787, 798, 799, 800, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 828, 874, 875, 911, 912, 985, 986, 988, 989, 990, 999, 1005, 1006, 1007, 1009, 1016, 1019, 1020, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1047, 1048], "amongst": [12, 1005], "indic": [12, 20, 21, 26, 27, 28, 49, 60, 61, 67, 76, 87, 91, 96, 113, 118, 124, 158, 161, 166, 170, 172, 198, 224, 234, 237, 256, 264, 265, 268, 269, 285, 298, 327, 328, 331, 353, 354, 355, 362, 369, 377, 382, 383, 384, 386, 390, 391, 394, 396, 405, 406, 407, 409, 411, 413, 414, 416, 417, 420, 424, 437, 440, 444, 450, 451, 452, 453, 455, 456, 457, 460, 464, 467, 472, 487, 508, 509, 511, 512, 513, 523, 532, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 581, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 620, 627, 628, 629, 630, 632, 633, 639, 647, 650, 651, 653, 654, 655, 661, 663, 665, 673, 675, 682, 683, 690, 692, 694, 696, 703, 707, 712, 713, 718, 719, 720, 724, 727, 728, 729, 730, 733, 737, 738, 739, 740, 753, 770, 777, 778, 779, 780, 782, 783, 784, 786, 787, 791, 792, 793, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 832, 834, 835, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 865, 868, 872, 874, 882, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 915, 917, 921, 922, 927, 942, 952, 953, 979, 984, 985, 986, 989, 990, 991, 992, 993, 996, 997, 999, 1000, 1003, 1004, 1010, 1016, 1020, 1023, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1039, 1041, 1042, 1044, 1046, 1047, 1048], "reflect": [12, 41, 47, 48, 81, 93, 97, 123, 172, 173, 201, 219, 271, 289, 354, 378, 381, 386, 396, 398, 406, 450, 456, 986, 989, 995, 997, 1024, 1032, 1040], "properti": [12, 26, 160, 161, 203, 218, 248, 287, 312, 362, 368, 371, 375, 382, 384, 399, 406, 407, 409, 411, 414, 416, 418, 419, 424, 442, 445, 451, 452, 453, 464, 465, 542, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 590, 591, 593, 594, 597, 610, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 632, 646, 652, 655, 660, 662, 674, 675, 699, 704, 705, 708, 798, 801, 802, 812, 829, 830, 860, 861, 874, 875, 876, 882, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 978, 981, 984, 985, 986, 989, 990, 992, 995, 999, 1002, 1004, 1005, 1006, 1010, 1016, 1036, 1040, 1041, 1044, 1045, 1048], "impact": [12, 13, 26, 37, 38, 43, 44, 60, 64, 65, 69, 76, 113, 146, 168, 170, 171, 172, 181, 203, 205, 219, 240, 256, 280, 288, 312, 322, 348, 354, 364, 368, 369, 375, 394, 397, 407, 409, 414, 447, 449, 536, 540, 547, 590, 666, 667, 668, 672, 674, 676, 677, 678, 692, 793, 798, 801, 802, 812, 824, 841, 842, 843, 878, 890, 901, 902, 924, 938, 960, 963, 978, 988, 996, 1004, 1011, 1038, 1041, 1044], "affinity_propag": [12, 45], "covariance_": [12, 35, 81, 83, 469, 470, 471, 472, 473, 474, 475, 476, 549, 550, 983, 1038], "n_label": [12, 93, 238, 396, 487, 523, 713, 720, 725, 738, 739, 753, 755, 791, 792, 818, 989, 1037, 1039], "lai": [12, 312, 344, 995], "canva": [12, 17], "manifold": [12, 40, 53, 68, 118, 225, 226, 227, 228, 234, 285, 294, 295, 317, 321, 322, 329, 371, 375, 396, 409, 414, 416, 502, 525, 530, 544, 549, 566, 850, 862, 871, 894, 924, 992, 1011, 1026, 1027, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1048], "dens": [12, 14, 56, 168, 179, 185, 195, 220, 321, 322, 331, 368, 391, 396, 409, 414, 416, 418, 443, 446, 447, 449, 464, 467, 496, 523, 524, 527, 534, 535, 544, 566, 585, 586, 607, 608, 629, 652, 657, 658, 659, 666, 667, 668, 672, 673, 676, 677, 678, 687, 688, 689, 692, 693, 759, 760, 766, 778, 791, 858, 859, 866, 873, 874, 876, 878, 879, 880, 881, 890, 891, 892, 893, 894, 901, 902, 903, 904, 906, 907, 939, 960, 963, 979, 982, 985, 986, 989, 990, 992, 995, 999, 1001, 1002, 1003, 1004, 1005, 1011, 1031, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "eigen_solv": [12, 45, 47, 67, 222, 223, 414, 452, 462, 535, 688, 689, 691, 693, 695, 986, 1032, 1041, 1044, 1045, 1046], "arpack": [12, 20, 45, 47, 67, 71, 223, 414, 451, 452, 453, 462, 535, 541, 544, 688, 689, 691, 693, 695, 986, 1037, 1038, 1043, 1047, 1048], "don": [12, 55, 71, 171, 223, 237, 238, 262, 285, 330, 337, 341, 353, 354, 368, 369, 376, 382, 384, 386, 388, 390, 394, 395, 400, 410, 417, 646, 652, 829, 909, 910, 911, 912, 953, 978, 985, 988, 990, 993, 995, 1003, 1013, 1025, 1035, 1040, 1047, 1048], "control": [12, 17, 35, 62, 100, 101, 119, 139, 158, 160, 185, 202, 205, 209, 233, 234, 263, 265, 280, 287, 304, 318, 320, 344, 358, 360, 361, 368, 369, 375, 378, 382, 384, 387, 390, 394, 396, 399, 403, 408, 409, 412, 413, 414, 415, 418, 419, 434, 440, 449, 454, 471, 472, 478, 531, 536, 537, 538, 539, 540, 543, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 593, 594, 596, 614, 619, 625, 627, 632, 634, 639, 641, 642, 646, 647, 649, 650, 651, 652, 654, 655, 656, 672, 674, 676, 677, 682, 683, 687, 692, 701, 709, 796, 797, 798, 800, 801, 802, 803, 804, 812, 813, 814, 815, 816, 817, 818, 820, 822, 823, 824, 825, 827, 828, 831, 832, 835, 858, 859, 880, 882, 893, 894, 901, 902, 903, 904, 906, 907, 909, 910, 911, 912, 915, 955, 957, 976, 978, 985, 986, 988, 989, 990, 992, 995, 996, 999, 1001, 1003, 1004, 1005, 1009, 1010, 1012, 1023, 1027, 1031, 1033, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "neighbor": [12, 32, 40, 45, 48, 61, 67, 73, 129, 131, 134, 141, 165, 166, 223, 224, 226, 227, 230, 233, 239, 240, 256, 265, 277, 289, 290, 291, 292, 294, 295, 296, 298, 299, 303, 319, 321, 322, 353, 371, 374, 379, 391, 396, 399, 409, 415, 416, 417, 420, 423, 433, 441, 444, 445, 448, 450, 452, 457, 458, 461, 463, 496, 502, 504, 563, 570, 602, 607, 608, 627, 628, 631, 688, 689, 690, 691, 692, 693, 696, 780, 798, 827, 861, 862, 881, 897, 905, 963, 990, 995, 1010, 1011, 1012, 1019, 1024, 1026, 1027, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "node": [12, 42, 123, 127, 185, 317, 323, 324, 358, 362, 390, 391, 409, 411, 414, 416, 441, 442, 445, 463, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 650, 654, 656, 682, 683, 692, 841, 842, 909, 910, 911, 912, 913, 915, 943, 957, 992, 994, 995, 996, 1005, 1034, 1035, 1036, 1037, 1038, 1040, 1043, 1044, 1045, 1046, 1048], "plane": [12, 150, 213, 235, 291, 342, 344, 345, 350, 379, 452, 462, 983, 985, 1004, 1023], "node_position_model": 12, "locallylinearembed": [12, 222, 223, 224, 321, 688, 690, 692, 986, 992, 1036, 1037, 1045, 1046, 1047], "n_neighbor": [12, 45, 63, 68, 134, 165, 222, 223, 224, 226, 230, 240, 285, 287, 288, 291, 292, 293, 294, 297, 312, 317, 319, 353, 416, 452, 602, 607, 608, 628, 688, 689, 691, 693, 696, 843, 844, 845, 847, 849, 850, 854, 896, 897, 979, 986, 992, 995, 1002, 1038, 1045, 1047, 1048], "output": [12, 15, 17, 26, 28, 38, 51, 54, 60, 99, 112, 113, 114, 116, 122, 133, 136, 137, 141, 142, 153, 161, 165, 166, 168, 171, 197, 229, 237, 241, 244, 245, 250, 256, 260, 262, 265, 269, 271, 272, 280, 285, 308, 311, 313, 314, 317, 320, 321, 323, 354, 355, 357, 358, 360, 362, 363, 375, 376, 377, 379, 382, 384, 388, 390, 394, 395, 396, 407, 408, 409, 410, 412, 413, 416, 417, 418, 419, 425, 430, 433, 437, 441, 442, 443, 445, 446, 447, 449, 450, 452, 459, 460, 462, 463, 464, 465, 466, 467, 468, 482, 483, 484, 485, 488, 491, 492, 493, 494, 495, 496, 497, 503, 505, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 611, 627, 628, 629, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 646, 647, 650, 652, 653, 654, 657, 658, 660, 661, 662, 663, 666, 667, 668, 671, 673, 674, 676, 678, 679, 681, 682, 683, 684, 688, 689, 690, 692, 694, 696, 699, 700, 713, 714, 721, 722, 723, 725, 727, 734, 744, 745, 747, 749, 750, 751, 752, 753, 755, 760, 766, 771, 784, 787, 789, 790, 796, 797, 800, 801, 802, 803, 804, 810, 812, 813, 814, 815, 816, 817, 818, 822, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 844, 845, 846, 850, 851, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 889, 890, 893, 894, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 922, 924, 927, 938, 939, 945, 946, 948, 956, 976, 978, 979, 981, 983, 985, 986, 989, 990, 991, 992, 993, 996, 999, 1004, 1011, 1012, 1016, 1017, 1019, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "edg": [12, 27, 47, 67, 99, 123, 225, 269, 390, 396, 406, 409, 411, 453, 561, 562, 585, 586, 588, 589, 591, 796, 838, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 866, 914, 999, 1002, 1014, 1037, 1039, 1042, 1045], "displai": [12, 13, 26, 28, 35, 38, 47, 49, 61, 72, 82, 83, 86, 87, 90, 96, 119, 129, 130, 133, 165, 168, 171, 172, 186, 188, 219, 229, 230, 240, 243, 244, 245, 251, 259, 263, 264, 269, 271, 272, 276, 295, 313, 318, 319, 339, 359, 368, 382, 384, 385, 389, 391, 399, 408, 410, 414, 417, 418, 438, 464, 467, 468, 496, 541, 564, 630, 631, 632, 658, 687, 697, 698, 700, 701, 702, 713, 718, 781, 788, 798, 804, 812, 820, 827, 861, 862, 874, 876, 881, 899, 906, 913, 914, 915, 929, 955, 976, 989, 993, 1009, 1011, 1027, 1040, 1042, 1043, 1045, 1046], "strength": [12, 133, 160, 201, 205, 263, 317, 368, 412, 416, 446, 567, 568, 643, 648, 649, 652, 658, 659, 669, 672, 673, 674, 675, 676, 678, 680, 687, 782, 858, 859, 901, 902, 906, 907, 978, 985, 992, 995, 1003, 1004], "plan": [12, 376, 380, 382, 383, 397, 999, 1034], "fair": [12, 416, 690, 694, 830, 990, 1014], "crucial": [12, 170, 205, 257, 368, 381, 382, 397, 409, 419, 1004], "challeng": [12, 133, 153, 172, 180, 219, 230, 370, 377, 378, 409, 411, 462, 472, 989, 995, 1014, 1016], "overlap": [12, 13, 38, 56, 91, 127, 149, 225, 249, 354, 380, 406, 409, 413, 416, 417, 587, 791, 792, 799, 803, 805, 806, 807, 808, 816, 986, 999, 1037], "heurist": [12, 15, 125, 240, 353, 369, 409, 418, 449, 452, 461, 462, 508, 509, 537, 539, 546, 676, 677, 678, 691, 695, 801, 802, 903, 904, 905, 906, 907, 926, 986, 987, 992, 1003, 1005, 1014, 1023, 1031, 1032, 1036, 1040, 1043, 1044], "direct": [12, 86, 87, 96, 98, 102, 105, 150, 207, 247, 253, 259, 294, 304, 312, 340, 345, 380, 382, 383, 386, 390, 397, 399, 409, 412, 414, 417, 418, 452, 462, 471, 472, 478, 534, 541, 549, 588, 589, 591, 602, 641, 688, 850, 983, 984, 985, 990, 992, 994, 1010, 1024, 1031, 1034], "nearest": [12, 14, 32, 33, 40, 41, 51, 52, 55, 59, 62, 67, 73, 79, 83, 90, 96, 99, 128, 129, 134, 141, 157, 166, 192, 213, 217, 224, 227, 233, 239, 256, 265, 277, 289, 291, 294, 295, 299, 303, 304, 312, 336, 340, 345, 346, 350, 371, 374, 379, 391, 396, 409, 415, 416, 420, 423, 433, 444, 446, 448, 450, 452, 457, 461, 462, 496, 502, 504, 607, 608, 627, 628, 630, 631, 635, 688, 689, 691, 692, 696, 791, 792, 798, 827, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 861, 862, 866, 881, 963, 986, 995, 1004, 1010, 1011, 1012, 1019, 1027, 1031, 1033, 1034, 1035, 1036, 1038, 1040, 1041, 1043], "along": [12, 14, 57, 60, 67, 87, 120, 126, 188, 201, 235, 237, 266, 317, 354, 355, 364, 382, 386, 388, 390, 391, 396, 399, 400, 403, 406, 414, 416, 417, 418, 421, 533, 550, 587, 611, 612, 630, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 676, 678, 681, 682, 683, 684, 685, 686, 778, 779, 791, 798, 812, 870, 871, 874, 875, 878, 879, 880, 881, 886, 887, 888, 890, 891, 892, 917, 940, 964, 970, 978, 985, 992, 999, 1002, 1014, 1031, 1036, 1037, 1039, 1043, 1044], "linecollect": [12, 225, 233, 632], "facecolor": [12, 17, 27, 35, 46, 61, 96, 103, 115, 142, 161, 222, 238, 262, 292, 309, 338, 341, 344, 345, 347], "partial_correl": 12, "precision_": [12, 83, 469, 470, 471, 472, 473, 474, 475, 476], "sqrt": [12, 81, 82, 83, 99, 102, 106, 117, 139, 174, 180, 182, 225, 227, 242, 247, 248, 249, 252, 253, 262, 345, 348, 409, 416, 417, 419, 463, 469, 470, 471, 472, 473, 474, 475, 476, 538, 540, 547, 557, 558, 559, 560, 564, 565, 619, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 699, 730, 762, 763, 768, 881, 894, 909, 910, 911, 912, 981, 985, 986, 989, 991, 1001, 1045], "diag": [12, 83, 161, 249, 252, 414, 419, 532, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 796, 797, 985, 1046], "newaxi": [12, 14, 20, 25, 43, 83, 106, 114, 154, 182, 191, 197, 202, 203, 204, 206, 207, 218, 233, 235, 276, 290, 297, 360, 361, 406, 536, 985], "ab": [12, 18, 41, 76, 100, 107, 115, 123, 133, 146, 150, 174, 188, 192, 212, 214, 217, 219, 225, 262, 307, 338, 350, 409, 538, 540, 547, 627, 745, 841, 842, 876, 989], "triu": 12, "nipy_spectr": [12, 40, 47, 48, 52, 53, 61, 62, 103], "start_idx": [12, 225], "end_idx": [12, 225], "sequenc": [12, 113, 122, 189, 225, 384, 396, 410, 413, 414, 416, 417, 503, 512, 561, 562, 569, 570, 581, 582, 588, 589, 591, 646, 798, 801, 809, 827, 861, 885, 941, 942, 952, 960, 963, 1009, 1031, 1034, 1036, 1037], "line0": [12, 225], "linen": [12, 225], "x0": [12, 193, 210, 225, 307, 337, 396, 430, 464, 567, 568, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 864, 865, 866, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882], "y0": [12, 225], "x1": [12, 17, 86, 92, 115, 125, 156, 213, 225, 307, 337, 384, 396, 430, 464, 509, 567, 568, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 699, 864, 865, 866, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 1024], "y1": [12, 92, 115, 225, 509, 716, 990, 991], "xm": [12, 225], "ym": [12, 225], "segment": [12, 14, 18, 22, 37, 48, 49, 54, 69, 99, 168, 225, 233, 377, 390, 409, 417, 452, 462, 508, 509, 691, 857, 989, 1009, 1011, 1014, 1039, 1041, 1043], "lc": [12, 225, 233], "zorder": [12, 59, 98, 130, 142, 154, 162, 191, 199, 223, 225, 233, 236, 247, 318, 324, 345], "hot_r": [12, 307], "norm": [12, 14, 15, 18, 31, 35, 41, 55, 99, 102, 156, 159, 180, 185, 187, 192, 225, 247, 248, 249, 251, 253, 259, 263, 290, 307, 340, 354, 388, 391, 396, 409, 417, 418, 442, 443, 447, 459, 460, 464, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 489, 531, 534, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 589, 590, 591, 597, 643, 646, 647, 652, 653, 657, 658, 659, 660, 661, 662, 663, 664, 672, 674, 676, 678, 681, 684, 685, 686, 690, 692, 693, 694, 769, 838, 873, 888, 901, 903, 906, 971, 972, 982, 985, 987, 989, 999, 1003, 1034, 1036, 1038, 1042], "set_arrai": [12, 225, 233], "set_linewidth": [12, 225, 233], "add_collect": [12, 225, 233], "index": [12, 13, 15, 18, 38, 39, 40, 41, 42, 50, 51, 59, 72, 73, 113, 118, 120, 147, 150, 158, 165, 170, 171, 172, 173, 174, 201, 205, 219, 241, 244, 248, 249, 253, 257, 260, 261, 262, 263, 265, 273, 274, 285, 307, 312, 313, 314, 321, 327, 328, 354, 355, 377, 379, 380, 382, 384, 386, 391, 394, 396, 406, 410, 413, 414, 416, 417, 424, 443, 447, 448, 449, 450, 451, 453, 454, 457, 459, 460, 464, 467, 503, 509, 557, 558, 559, 560, 564, 565, 566, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 617, 632, 633, 640, 697, 704, 705, 712, 716, 718, 730, 737, 756, 778, 779, 785, 787, 793, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 827, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 874, 909, 910, 911, 912, 942, 960, 963, 968, 969, 989, 991, 992, 993, 1003, 1005, 1009, 1023, 1025, 1031, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "dx": [12, 14, 526, 699], "dy": [12, 699], "this_dx": 12, "argmin": [12, 125, 261, 384, 411, 531, 537, 545, 546, 685, 778, 779, 1005], "this_di": 12, "horizontalalign": [12, 27, 32, 41, 45, 46, 63, 103, 230, 247, 301, 309], "verticalalign": [12, 27, 40, 41], "edgecolor": [12, 17, 25, 31, 32, 35, 43, 46, 57, 61, 68, 92, 93, 103, 115, 122, 129, 131, 132, 134, 135, 142, 145, 154, 155, 157, 161, 172, 184, 193, 203, 210, 213, 214, 215, 234, 235, 236, 238, 240, 247, 250, 262, 265, 276, 288, 291, 292, 293, 296, 301, 309, 310, 312, 332, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 350, 359, 360, 361, 631], "xlim": [12, 27, 45, 59, 63, 74, 79, 80, 81, 98, 115, 116, 117, 132, 139, 154, 155, 171, 180, 191, 193, 200, 207, 210, 215, 230, 238, 248, 253, 257, 271, 276, 291, 292, 339, 344, 345, 349, 361], "ptp": 12, "ylim": [12, 25, 27, 34, 38, 45, 59, 63, 79, 80, 81, 98, 115, 116, 123, 126, 132, 135, 140, 154, 155, 171, 188, 190, 191, 193, 194, 195, 207, 210, 211, 215, 230, 238, 248, 253, 257, 261, 265, 271, 275, 276, 291, 292, 339, 344, 345, 349, 353, 361], "03": [12, 53, 69, 81, 96, 108, 137, 150, 151, 158, 163, 171, 175, 182, 219, 234, 245, 247, 253, 263, 299, 305, 315, 328, 354, 379, 417, 747, 798, 985, 989, 1011], "503": [12, 16, 128, 137, 289, 299, 1011], "plot_stock_market": [12, 16, 1011], "handwritten": [12, 37, 39, 44, 46, 47, 49, 50, 53, 58, 60, 62, 69, 118, 168, 221, 222, 224, 226, 228, 234, 250, 260, 285, 294, 295, 303, 304, 327, 328, 354, 375, 409, 416, 447, 502, 541, 544, 549, 566, 688, 689, 690, 691, 692, 704, 705, 717, 736, 792, 794, 850, 862, 871, 881, 894, 986, 992, 1011, 1016, 1027], "isomap": [12, 53, 118, 168, 221, 224, 226, 228, 234, 285, 294, 295, 317, 321, 416, 502, 544, 549, 566, 689, 690, 691, 692, 850, 862, 871, 894, 992, 1011, 1026, 1027, 1039, 1041, 1044, 1045, 1046, 1047, 1048], "agglom": [12, 21, 22, 37, 38, 42, 43, 45, 48, 57, 61, 63, 67, 68, 69, 90, 148, 168, 223, 225, 287, 327, 328, 409, 441, 445, 502, 691, 777, 854, 1011, 1034], "pictur": [12, 18, 22, 37, 49, 54, 67, 69, 99, 168, 234, 253, 377, 397, 409, 414, 417, 462, 493, 494, 521, 1010, 1011], "greek": [12, 18, 22, 37, 49, 54, 67, 69, 99, 168, 409, 462, 1011], "coin": [12, 14, 18, 22, 37, 40, 41, 42, 43, 45, 49, 54, 55, 57, 63, 67, 68, 69, 99, 168, 409, 417, 441, 462, 1001, 1011, 1024], "region": [12, 17, 18, 22, 26, 37, 48, 49, 50, 54, 57, 67, 69, 99, 134, 160, 168, 171, 201, 219, 230, 234, 235, 253, 310, 340, 348, 379, 389, 396, 409, 416, 419, 448, 450, 456, 462, 587, 986, 989, 992, 995, 999, 1003, 1005, 1011, 1024], "explor": [13, 38, 116, 117, 174, 226, 227, 240, 263, 264, 270, 271, 280, 314, 319, 340, 354, 364, 376, 379, 381, 388, 403, 409, 416, 472, 798, 801, 809, 882, 978, 985, 986, 988, 994, 996, 997, 999, 1014, 1019, 1025, 1037], "demo": [13, 14, 19, 20, 23, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 54, 55, 57, 58, 60, 61, 62, 63, 65, 68, 69, 129, 168, 174, 185, 207, 234, 250, 252, 263, 271, 312, 329, 353, 354, 384, 406, 409, 417, 440, 441, 444, 446, 447, 448, 450, 451, 453, 455, 458, 502, 511, 512, 513, 541, 704, 705, 717, 719, 736, 792, 794, 862, 881, 882, 1011], "period": [13, 153, 158, 162, 386, 396, 397, 407, 419, 615, 819, 880, 1039, 1044, 1046], "summari": [13, 150, 321, 362, 364, 379, 394, 692, 713, 914, 987, 990, 1009, 1025], "style": [13, 25, 27, 82, 126, 190, 209, 219, 266, 382, 389, 409, 417, 443, 447, 459, 700, 804, 820, 921, 922, 1031, 1034, 1045], "background_gradi": 13, "set_table_attribut": 13, "inlin": [13, 212, 382, 383, 1005], "set_capt": 13, "set_table_styl": 13, "selector": [13, 72, 146, 147, 240, 348, 390, 417, 418, 466, 581, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 1033, 1041, 1043, 1047], "caption": [13, 71], "prop": [13, 74, 82, 207, 249, 291, 339, 362, 946, 949, 1021], "font": [13, 126, 190, 215, 235, 913, 915], "16px": 13, "000000": [13, 45, 171, 190, 219, 262, 311, 736], "502561": 13, "537775": 13, "546752": 13, "003683": 13, "376474": 13, "788755": 13, "627229": 13, "736540": 13, "189": [13, 201, 388, 898, 1002], "463088": 13, "500008": 13, "438776": 13, "914405": 13, "005771": 13, "894801": 13, "592511": 13, "192930": 13, "196795": 13, "181": [13, 62, 69, 238, 245, 280, 304, 388, 1011], "387599": 13, "820000": 13, "940000": [13, 302], "665000": 13, "480000": 13, "001500": 13, "500000": [13, 302], "240000": 13, "630000": 13, "998000": 13, "060000": 13, "780000": 13, "997900": 13, "281": [13, 16, 1011], "41": [13, 108, 150, 201, 240, 362, 377, 379, 469, 492, 621, 624, 635, 658, 664, 685, 686, 699, 780, 836, 991, 995], "996900": 13, "sequenti": [13, 122, 144, 147, 151, 168, 195, 263, 319, 380, 414, 416, 417, 500, 501, 534, 593, 597, 602, 603, 605, 606, 646, 647, 652, 653, 658, 660, 661, 662, 663, 673, 787, 861, 862, 881, 979, 997, 1003, 1009, 1011, 1012, 1027, 1031, 1040, 1043], "lagged_df": 13, "shift": [13, 37, 39, 45, 50, 65, 69, 168, 180, 225, 252, 290, 304, 307, 344, 411, 415, 440, 448, 458, 461, 469, 512, 515, 689, 693, 847, 870, 999, 1011, 1026, 1027, 1031, 1035, 1039], "renam": [13, 252, 263, 382, 386, 409, 446, 447, 459, 471, 472, 478, 527, 536, 553, 554, 555, 556, 557, 558, 563, 564, 565, 566, 874, 1031, 1032, 1033, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "lagged_count_1h": 13, "lagged_count_2h": 13, "lagged_count_3h": 13, "lagged_count_1d": 13, "lagged_count_1d_1h": 13, "lagged_count_7d": 13, "lagged_count_7d_1h": 13, "roll": [13, 68, 168, 221, 222, 223, 224, 227, 228, 385, 409, 530, 692, 693, 932, 1011, 1014, 1041, 1046], "lagged_mean_24h": 13, "lagged_max_24h": 13, "lagged_min_24h": 13, "lagged_mean_7d": 13, "lagged_max_7d": 13, "lagged_min_7d": 13, "tail": [13, 126, 166, 171, 201, 203, 262, 307, 521, 524, 985], "17369": 13, "247": [13, 881], "203": [13, 54], "224": [13, 54, 86, 131, 409, 724], "157": [13, 388], "160": [13, 238, 978, 1023], "169": [13, 15, 16, 59, 304, 1011], "135": [13, 150, 322, 379], "67": [13, 67, 171, 219, 240, 379, 516, 517, 518, 627, 667, 713, 812, 979, 989, 1003, 1031], "732143": 13, "271": 13, "17370": 13, "315": [13, 285, 379], "138": [13, 388, 416, 989], "125000": 13, "785714": 13, "17371": 13, "214": [13, 154, 584], "133": [13, 14, 57], "386905": 13, "17372": 13, "164": [13, 268, 278, 416, 1011], "123": [13, 117, 135, 354, 364, 416, 516, 517, 518, 555, 556, 834, 990, 997], "107": [13, 194, 220, 322, 333, 409, 896, 990, 1011, 1033], "875000": 13, "464286": 13, "17373": 13, "109": [13, 25, 54, 990, 1033], "583333": 13, "244048": 13, "119": [13, 150, 151, 220, 983, 1011, 1034], "102": [13, 263, 278, 388, 1011, 1023, 1033], "458333": 13, "815476": 13, "110": [13, 26, 29, 91, 180, 198, 208, 233, 313, 324, 437, 983, 984, 1011], "166667": 13, "369048": 13, "791667": 13, "112": [13, 55, 150, 377, 379, 1033], "666667": 13, "190476": 13, "113": [13, 172, 280, 388, 1034], "708333": 13, "422619": 13, "watch": [13, 369], "undefin": [13, 265, 396, 712, 728, 737, 740, 782, 989, 1039, 1043, 1047], "own": [13, 35, 119, 219, 237, 252, 285, 287, 329, 354, 369, 376, 385, 386, 387, 390, 391, 399, 408, 409, 421, 425, 440, 454, 533, 557, 564, 646, 796, 797, 843, 844, 845, 847, 849, 851, 852, 853, 875, 909, 911, 927, 932, 957, 985, 991, 992, 995, 999, 1004, 1009, 1014, 1024, 1025, 1038, 1039, 1041, 1048], "unknown": [13, 17, 57, 171, 237, 262, 327, 329, 370, 377, 396, 403, 406, 417, 868, 874, 875, 952, 988, 999, 1016, 1035, 1039, 1043, 1044], "nan": [13, 76, 123, 165, 166, 171, 219, 240, 242, 244, 257, 265, 313, 317, 322, 323, 324, 368, 374, 384, 391, 396, 416, 446, 468, 496, 555, 556, 557, 561, 562, 564, 593, 594, 597, 603, 606, 609, 627, 628, 629, 630, 635, 712, 713, 714, 721, 722, 723, 727, 728, 729, 768, 777, 782, 783, 784, 786, 798, 801, 802, 804, 812, 820, 823, 824, 825, 828, 870, 871, 875, 877, 878, 881, 882, 886, 889, 890, 892, 919, 920, 921, 922, 964, 978, 989, 999, 1005, 1027, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048], "separ": [13, 14, 17, 25, 26, 31, 32, 41, 56, 61, 63, 67, 74, 81, 92, 95, 96, 98, 101, 108, 113, 115, 118, 121, 131, 150, 156, 166, 168, 172, 173, 177, 179, 200, 202, 220, 223, 238, 249, 262, 265, 271, 272, 307, 309, 312, 319, 330, 335, 336, 338, 339, 340, 344, 345, 351, 353, 364, 368, 378, 379, 384, 387, 390, 394, 396, 407, 409, 410, 411, 414, 416, 417, 419, 464, 512, 519, 533, 538, 540, 541, 547, 549, 581, 588, 589, 591, 610, 631, 638, 646, 647, 673, 676, 677, 690, 694, 724, 731, 744, 745, 747, 752, 791, 817, 833, 834, 860, 861, 903, 905, 906, 911, 912, 978, 979, 981, 983, 985, 986, 988, 995, 996, 999, 1003, 1004, 1011, 1021, 1023, 1024, 1031, 1034, 1036, 1037, 1041, 1043, 1044, 1047, 1048], "dropna": [13, 158], "17210": [13, 1042], "randomli": [13, 38, 49, 51, 62, 72, 86, 89, 94, 115, 116, 129, 156, 165, 168, 172, 213, 218, 234, 238, 252, 257, 268, 280, 283, 327, 330, 364, 369, 391, 394, 395, 409, 413, 416, 419, 449, 458, 512, 515, 519, 523, 531, 537, 545, 546, 551, 559, 560, 561, 562, 563, 564, 565, 610, 611, 671, 679, 690, 694, 716, 796, 797, 857, 895, 909, 910, 911, 912, 988, 990, 992, 995, 997, 1001, 1005, 1011, 1023, 1025, 1042, 1046, 1048], "percentag": [13, 55, 105, 123, 192, 219, 257, 265, 268, 413, 418, 534, 541, 544, 549, 593, 594, 648, 669, 680, 703, 733, 745, 816, 817, 818, 831, 913, 915, 990, 1005, 1033, 1037, 1043, 1044], "mape": [13, 745, 989], "aim": [13, 21, 82, 166, 205, 293, 329, 344, 370, 377, 380, 382, 396, 403, 409, 411, 417, 448, 985, 989, 992, 999, 1004, 1009, 1016, 1024, 1045], "futur": [13, 158, 202, 243, 320, 323, 380, 382, 384, 386, 394, 396, 397, 403, 413, 417, 496, 534, 635, 959, 989, 990, 1004, 1005, 1014, 1028, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "ulterior": 13, "independ": [13, 26, 28, 38, 47, 97, 98, 100, 118, 122, 160, 172, 239, 240, 262, 265, 267, 271, 283, 307, 314, 317, 354, 364, 368, 369, 378, 384, 386, 395, 396, 399, 406, 407, 408, 409, 410, 411, 412, 413, 417, 421, 449, 464, 488, 503, 515, 516, 517, 518, 520, 532, 533, 535, 537, 539, 540, 546, 547, 551, 552, 604, 607, 608, 625, 640, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 672, 673, 674, 675, 704, 705, 717, 735, 736, 754, 756, 794, 800, 826, 830, 832, 834, 835, 873, 877, 878, 879, 881, 885, 886, 887, 888, 890, 891, 892, 895, 903, 904, 905, 906, 907, 932, 978, 981, 983, 985, 986, 989, 990, 991, 994, 996, 999, 1004, 1005, 1026, 1027, 1031, 1032, 1037, 1039, 1041, 1046], "ident": [13, 20, 65, 125, 196, 201, 219, 230, 234, 332, 353, 377, 384, 396, 406, 409, 410, 411, 413, 419, 422, 438, 439, 452, 464, 465, 473, 475, 476, 479, 480, 481, 488, 503, 551, 559, 560, 564, 565, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 643, 679, 680, 699, 704, 705, 735, 784, 794, 800, 803, 813, 814, 815, 817, 818, 843, 844, 850, 858, 859, 865, 866, 878, 890, 909, 910, 982, 983, 986, 989, 992, 993, 1004, 1035, 1039, 1040, 1041, 1045], "tempor": [13, 185, 1009, 1010], "mean_absolute_percentage_error": [13, 123, 989, 1043, 1045], "3889873516666431": 13, "account": [13, 14, 56, 98, 105, 113, 158, 165, 171, 219, 237, 262, 288, 294, 348, 350, 354, 368, 378, 382, 396, 397, 403, 409, 412, 413, 414, 416, 417, 463, 561, 562, 567, 568, 627, 628, 630, 632, 633, 649, 673, 679, 704, 707, 727, 728, 729, 737, 742, 755, 782, 783, 786, 787, 799, 803, 816, 875, 981, 983, 987, 989, 990, 991, 992, 999, 1003, 1005, 1036, 1038, 1039, 1040, 1043, 1044, 1046, 1048], "cheat": [13, 340, 993, 1003, 1033], "fast": [13, 63, 177, 185, 190, 216, 217, 235, 236, 308, 355, 368, 377, 382, 391, 409, 411, 413, 414, 416, 417, 421, 446, 447, 469, 474, 508, 532, 533, 535, 538, 540, 544, 547, 564, 565, 566, 588, 589, 591, 632, 633, 640, 658, 659, 672, 674, 687, 699, 798, 812, 822, 823, 833, 834, 841, 842, 846, 857, 938, 981, 985, 988, 991, 992, 994, 995, 1005, 1009, 1014, 1025, 1031, 1032, 1037, 1038, 1041, 1042], "laptop": [13, 390, 468, 899, 1045, 1046, 1047], "3000": [13, 65, 225, 893, 894], "train_idx": [13, 171, 396], "test_idx": [13, 396], "44300751539296973": 13, "optimist": [13, 190, 267, 353, 364, 707, 985, 989], "cross": [13, 14, 35, 55, 58, 59, 72, 73, 75, 76, 79, 83, 87, 88, 92, 93, 104, 119, 122, 123, 125, 126, 138, 141, 143, 144, 147, 148, 150, 151, 171, 172, 179, 183, 185, 187, 188, 189, 195, 201, 203, 209, 219, 220, 231, 238, 243, 249, 250, 252, 255, 259, 262, 263, 264, 266, 268, 269, 270, 271, 274, 275, 276, 277, 278, 280, 289, 304, 306, 308, 313, 315, 317, 319, 324, 330, 340, 348, 371, 377, 382, 384, 391, 394, 395, 396, 400, 403, 404, 407, 410, 411, 414, 416, 417, 418, 419, 437, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 493, 501, 502, 504, 515, 541, 567, 568, 575, 593, 594, 597, 602, 606, 609, 642, 643, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 672, 673, 674, 675, 676, 678, 679, 681, 682, 683, 684, 685, 686, 701, 702, 706, 713, 727, 740, 784, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 835, 861, 862, 866, 881, 882, 899, 901, 903, 906, 944, 988, 989, 992, 993, 997, 999, 1004, 1005, 1009, 1010, 1011, 1012, 1014, 1016, 1019, 1027, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048], "cross_val_scor": [13, 104, 140, 165, 166, 168, 255, 258, 267, 276, 278, 323, 343, 364, 382, 384, 394, 400, 413, 416, 520, 575, 703, 741, 798, 822, 824, 909, 910, 978, 989, 1011, 1020, 1031, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1043, 1044, 1047, 1048], "cv_mape_scor": 13, "neg_mean_absolute_percentage_error": [13, 123, 989, 997], "44300752": 13, "27772182": 13, "3697178": 13, "real": [13, 16, 32, 35, 56, 58, 71, 75, 79, 81, 82, 83, 113, 156, 171, 205, 226, 230, 240, 256, 268, 276, 289, 292, 308, 309, 339, 344, 355, 368, 371, 375, 376, 379, 386, 388, 391, 394, 395, 396, 406, 407, 409, 411, 413, 414, 416, 417, 469, 489, 490, 493, 494, 495, 496, 497, 500, 501, 504, 510, 551, 552, 553, 555, 556, 557, 558, 559, 560, 564, 565, 592, 594, 595, 596, 597, 598, 599, 600, 631, 699, 704, 723, 727, 751, 754, 756, 784, 794, 826, 858, 859, 903, 904, 905, 906, 907, 910, 912, 979, 980, 981, 986, 989, 991, 993, 994, 995, 1005, 1008, 1011, 1027, 1031, 1044, 1048], "life": [13, 256, 390, 986], "advis": [13, 202, 237, 364, 380, 382, 409, 417, 437, 646, 652, 654, 660, 662, 672, 687, 957, 981, 985, 991, 993, 1004, 1045], "deviat": [13, 21, 35, 62, 81, 116, 119, 120, 121, 122, 124, 150, 153, 158, 160, 162, 171, 180, 207, 240, 259, 260, 261, 262, 263, 265, 291, 292, 307, 312, 374, 378, 379, 387, 391, 396, 413, 416, 419, 450, 472, 501, 511, 512, 513, 514, 516, 517, 518, 522, 524, 525, 530, 552, 594, 611, 634, 644, 645, 671, 723, 751, 804, 820, 847, 870, 871, 881, 890, 891, 892, 985, 989, 995, 999, 1023, 1037, 1038, 1039, 1042, 1043, 1044], "363": 13, "make_scor": [13, 126, 266, 400, 413, 798, 823, 824, 989, 1040, 1048], "mean_absolute_error": [13, 201, 203, 219, 989, 1032, 1034], "mean_pinball_loss": [13, 126, 320, 985, 989, 1044], "root_mean_squared_error": [13, 749, 989, 1048], "consolidate_scor": 13, "1f": [13, 21, 51, 54, 99, 181, 201, 234, 247, 249, 269, 317, 354, 355], "pinball_loss_05": 13, "pinball_loss_50": 13, "pinball_loss_95": 13, "loss_funct": 13, "absolute_error": [13, 416, 558, 560, 562, 565, 671, 910, 912, 1044], "loss_func": 13, "n_job": [13, 55, 73, 74, 119, 120, 121, 126, 127, 133, 140, 149, 150, 165, 171, 172, 173, 174, 223, 225, 242, 261, 263, 264, 266, 277, 280, 285, 317, 318, 319, 322, 348, 369, 382, 396, 416, 420, 437, 444, 446, 448, 450, 452, 457, 458, 461, 464, 467, 472, 531, 535, 536, 537, 539, 542, 543, 545, 546, 548, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 594, 602, 610, 632, 634, 639, 647, 651, 653, 655, 657, 658, 659, 661, 663, 665, 666, 668, 676, 679, 688, 689, 690, 691, 692, 693, 694, 773, 777, 780, 798, 801, 802, 804, 812, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 833, 834, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 860, 863, 896, 897, 955, 957, 978, 989, 990, 992, 1020, 1021, 1025, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046], "fit_tim": [13, 59, 123, 190, 209, 264, 413, 824, 825], "startswith": [13, 71, 223, 298], "test_": [13, 133, 413], "x_i": [13, 81, 117, 145, 171, 202, 320, 348, 409, 414, 415, 416, 419, 614, 615, 619, 622, 623, 625, 836, 837, 840, 980, 981, 985, 991, 992, 993, 999, 1003, 1004, 1005], "fulli": [13, 45, 56, 120, 126, 368, 376, 377, 396, 409, 415, 416, 418, 443, 447, 557, 558, 564, 565, 909, 910, 911, 912, 913, 915, 978, 979, 985, 994, 1002, 1009, 1044, 1045], "anticip": 13, "call": [13, 14, 18, 47, 49, 51, 55, 72, 93, 111, 118, 125, 147, 153, 157, 159, 161, 170, 172, 189, 201, 202, 205, 219, 237, 241, 243, 244, 262, 263, 271, 276, 277, 280, 285, 287, 312, 314, 319, 320, 353, 354, 355, 362, 368, 369, 370, 377, 380, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 399, 400, 407, 409, 410, 411, 412, 413, 414, 416, 417, 419, 421, 432, 440, 443, 446, 447, 449, 450, 451, 452, 453, 454, 457, 460, 462, 464, 465, 468, 469, 474, 482, 483, 484, 488, 491, 492, 495, 497, 503, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 577, 582, 583, 585, 586, 588, 589, 591, 597, 602, 607, 608, 610, 611, 614, 617, 620, 627, 628, 629, 630, 631, 632, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 689, 690, 691, 692, 693, 694, 695, 697, 699, 700, 701, 704, 731, 741, 754, 770, 773, 777, 778, 779, 780, 792, 796, 797, 798, 800, 801, 802, 803, 804, 810, 812, 813, 814, 815, 816, 817, 818, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 846, 847, 850, 852, 857, 858, 859, 860, 861, 864, 865, 866, 868, 870, 871, 873, 878, 881, 882, 885, 890, 891, 892, 893, 894, 898, 901, 902, 903, 904, 906, 907, 910, 912, 928, 932, 937, 938, 946, 947, 949, 955, 956, 957, 960, 963, 973, 978, 979, 981, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 997, 999, 1001, 1002, 1004, 1005, 1009, 1014, 1016, 1020, 1023, 1024, 1025, 1027, 1028, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "aleator": 13, "descript": [13, 150, 171, 313, 375, 376, 381, 382, 386, 387, 390, 396, 409, 417, 452, 462, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 507, 510, 544, 630, 676, 761, 764, 777, 989, 1003, 1004, 1010, 1013, 1025, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "quantile_list": 13, "styled_df_copi": 13, "extract_numer": 13, "mean_valu": 13, "std_valu": 13, "convert": [13, 18, 35, 47, 49, 67, 72, 99, 158, 174, 201, 222, 240, 243, 248, 249, 252, 253, 298, 368, 376, 377, 391, 394, 396, 403, 417, 440, 443, 444, 447, 449, 450, 451, 452, 459, 464, 465, 496, 534, 541, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 572, 581, 582, 588, 589, 590, 591, 593, 594, 606, 627, 628, 629, 630, 646, 652, 658, 659, 660, 662, 666, 667, 668, 670, 674, 676, 677, 678, 692, 777, 856, 865, 866, 868, 872, 874, 875, 876, 878, 901, 909, 910, 911, 912, 919, 921, 922, 944, 974, 975, 978, 985, 986, 987, 989, 999, 1000, 1004, 1005, 1025, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1046, 1047, 1048], "cols_to_convert": 13, "col": [13, 20, 26, 28, 39, 43, 50, 56, 60, 64, 65, 71, 119, 134, 222, 240, 349, 511, 513], "min_valu": [13, 627, 1042, 1043], "mask": [13, 14, 43, 67, 121, 201, 209, 240, 260, 261, 331, 391, 396, 410, 416, 469, 474, 561, 562, 581, 585, 586, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 629, 630, 632, 633, 649, 671, 798, 801, 802, 812, 961, 979, 996, 1031, 1034, 1036, 1037, 1039, 1041], "bold": [13, 61, 126, 190, 196, 382], "29": [13, 82, 93, 154, 158, 192, 201, 205, 218, 322, 328, 379, 380, 399, 401, 402, 416, 559, 560, 690, 694, 780, 796, 853, 985, 986, 1003], "07": [13, 86, 106, 137, 171, 197, 219, 220, 240, 245, 254, 271, 278, 312, 333, 364, 377, 409, 561, 562, 692, 989, 1003, 1011], "62": [13, 172, 177, 219, 256, 322, 328, 364, 377, 493, 494, 841, 842, 1034], "06": [13, 36, 68, 162, 171, 192, 200, 201, 220, 262, 263, 278, 304, 305, 309, 347, 388, 482, 483, 484, 644, 645, 689, 693, 796, 797, 798, 812, 910, 985, 999, 1001, 1011], "54": [13, 69, 77, 93, 150, 177, 185, 201, 204, 240, 377, 379, 409, 491, 1032, 1033], "00": [13, 16, 23, 29, 33, 36, 69, 77, 81, 84, 88, 94, 99, 108, 110, 137, 143, 151, 158, 163, 167, 171, 172, 175, 178, 192, 219, 220, 228, 234, 245, 254, 260, 263, 278, 281, 284, 299, 304, 305, 315, 325, 327, 328, 333, 334, 351, 356, 363, 376, 379, 388, 409, 416, 417, 713, 715, 787, 798, 812, 825, 910, 985, 989, 999, 1001, 1003, 1011, 1024], "145": [13, 409], "58": [13, 67, 80, 224, 379, 411, 422, 475, 763, 999, 1021], "55": [13, 171, 177, 196, 201, 219, 224, 328, 387, 409, 413, 491, 597, 798, 804, 812, 825, 989, 1031], "wherea": [13, 35, 49, 54, 68, 81, 129, 215, 240, 263, 264, 265, 271, 288, 312, 344, 348, 349, 370, 397, 413, 416, 444, 565, 658, 659, 800, 816, 829, 981, 988, 990, 992, 999, 1005, 1044], "That": [13, 96, 113, 150, 190, 230, 262, 266, 354, 355, 369, 376, 390, 396, 413, 418, 419, 443, 446, 447, 557, 564, 593, 816, 909, 910, 978, 986, 987, 989, 995, 1005, 1040, 1041], "pinbal": [13, 126, 320, 562, 670, 722, 747, 985, 1044, 1045], "5th": [13, 126, 161, 409], "95th": [13, 126, 747], "gbrt_mean_poisson": 13, "mean_predict": [13, 160], "gbrt_median": 13, "median_predict": 13, "gbrt_percentile_5": 13, "percentile_5_predict": 13, "gbrt_percentile_95": 13, "percentile_95_predict": 13, "fill_between": [13, 126, 139, 153, 158, 160, 162, 180, 181, 219, 262, 264, 265, 266, 272, 804, 820], "interv": [13, 28, 112, 136, 137, 160, 168, 185, 201, 202, 203, 219, 262, 377, 396, 407, 413, 416, 419, 438, 439, 516, 517, 518, 557, 558, 560, 562, 564, 565, 635, 636, 638, 677, 741, 747, 749, 802, 819, 827, 864, 866, 880, 903, 904, 905, 925, 981, 985, 989, 999, 1005, 1011, 1038, 1042], "At": [13, 76, 113, 206, 274, 280, 283, 327, 330, 368, 369, 386, 397, 400, 405, 412, 416, 437, 440, 465, 588, 589, 591, 602, 829, 831, 868, 953, 978, 985, 988, 990, 994, 1003, 1014], "night": 13, "band": [13, 265, 309, 999], "narrow": [13, 116, 126, 307, 309, 387, 841, 842], "certain": [13, 56, 124, 171, 206, 218, 237, 262, 285, 311, 344, 364, 377, 378, 380, 386, 396, 398, 409, 414, 418, 638, 649, 653, 658, 663, 684, 861, 866, 901, 978, 981, 985, 986, 989, 990, 993, 999, 1004, 1009, 1016, 1020, 1036, 1040, 1043, 1046], "And": [13, 168, 221, 222, 223, 224, 227, 228, 237, 262, 353, 390, 403, 409, 413, 417, 530, 588, 589, 591, 692, 693, 985, 989, 1007, 1011, 1038], "correct": [13, 27, 28, 58, 82, 113, 124, 161, 171, 185, 190, 201, 219, 247, 256, 262, 269, 271, 280, 283, 340, 342, 353, 364, 379, 382, 384, 386, 397, 407, 408, 409, 413, 414, 416, 417, 450, 456, 469, 474, 488, 501, 503, 635, 667, 676, 678, 703, 704, 708, 712, 713, 718, 721, 722, 723, 727, 728, 729, 733, 737, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 782, 783, 784, 786, 789, 790, 793, 795, 829, 830, 831, 838, 846, 872, 974, 985, 989, 990, 1004, 1016, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "wider": [13, 203, 417, 914, 985], "probabl": [13, 17, 24, 28, 29, 30, 35, 36, 56, 76, 92, 93, 112, 134, 137, 145, 152, 153, 154, 155, 163, 168, 171, 193, 213, 216, 217, 222, 226, 231, 233, 234, 237, 262, 264, 265, 268, 269, 272, 304, 307, 311, 317, 319, 330, 332, 347, 348, 368, 371, 377, 378, 384, 388, 394, 396, 409, 413, 414, 417, 418, 419, 435, 436, 437, 438, 439, 446, 447, 449, 504, 512, 515, 523, 527, 549, 550, 551, 553, 555, 557, 559, 561, 564, 567, 569, 570, 593, 594, 610, 613, 614, 622, 627, 631, 632, 633, 658, 659, 671, 676, 692, 698, 700, 702, 703, 706, 707, 709, 712, 716, 720, 725, 726, 728, 738, 739, 740, 741, 755, 781, 783, 786, 787, 788, 793, 796, 797, 798, 801, 802, 812, 826, 827, 830, 832, 833, 836, 837, 838, 839, 840, 843, 846, 851, 857, 858, 882, 894, 895, 896, 897, 898, 901, 903, 906, 909, 911, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 999, 1001, 1002, 1003, 1005, 1010, 1011, 1012, 1013, 1025, 1027, 1031, 1033, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1045], "visibl": [13, 171, 172, 203, 350, 376, 382, 409, 857, 994, 1036, 1046], "lie": [13, 61, 86, 149, 171, 235, 307, 329, 338, 340, 414, 416, 606, 849, 851, 852, 853, 901, 902, 983, 986, 989, 999, 1004], "span": [13, 56, 79, 126, 235, 259, 377, 409, 417, 549, 636, 798, 801, 989, 1024], "underestim": [13, 126, 172, 201, 219, 262, 382], "calibr": [13, 29, 31, 116, 135, 219, 233, 237, 262, 264, 269, 371, 396, 400, 512, 515, 564, 569, 658, 676, 709, 728, 740, 783, 786, 787, 827, 839, 898, 901, 978, 985, 989, 1002, 1004, 1011, 1012, 1027, 1028, 1035, 1037], "confid": [13, 25, 26, 27, 28, 158, 160, 248, 262, 265, 330, 397, 407, 419, 636, 658, 659, 666, 668, 671, 674, 675, 676, 698, 702, 707, 720, 725, 726, 738, 739, 755, 788, 829, 868, 901, 903, 906, 985, 988, 989, 990, 995, 1002, 1003, 1004, 1014, 1025, 1041], "produc": [13, 14, 26, 27, 45, 58, 71, 99, 126, 127, 128, 129, 185, 268, 304, 330, 364, 377, 378, 382, 384, 387, 396, 397, 409, 410, 413, 414, 416, 440, 443, 446, 452, 519, 536, 559, 563, 581, 588, 593, 594, 632, 633, 800, 801, 802, 810, 815, 818, 822, 866, 876, 903, 906, 980, 981, 985, 987, 988, 989, 992, 995, 996, 1000, 1002, 1003, 1004, 1016, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "overli": [13, 26, 27, 190, 267, 364, 414, 989], "mapi": 13, "recent": [13, 203, 237, 371, 380, 383, 387, 390, 396, 409, 468, 538, 565, 1003, 1014, 1034, 1043], "conform": [13, 581, 628, 829, 830, 989, 1009, 1010, 1038, 1044], "epistem": 13, "sktime": [13, 1009], "extend": [13, 56, 57, 68, 111, 202, 251, 269, 340, 379, 380, 394, 396, 407, 408, 409, 414, 416, 631, 720, 819, 830, 833, 834, 866, 868, 885, 901, 902, 916, 981, 989, 990, 1004, 1010, 1012, 1027, 1036, 1037, 1038, 1039, 1041, 1046], "recurs": [13, 33, 52, 90, 92, 129, 139, 140, 144, 147, 150, 151, 168, 257, 261, 267, 289, 327, 328, 330, 358, 384, 408, 409, 413, 440, 441, 442, 445, 463, 502, 515, 563, 593, 594, 597, 602, 632, 633, 658, 817, 906, 989, 992, 995, 996, 1005, 1011, 1012, 1024, 1027, 1031, 1041, 1042], "enabl": [13, 31, 51, 73, 172, 209, 224, 237, 309, 318, 320, 321, 323, 324, 349, 380, 382, 387, 390, 394, 396, 399, 400, 405, 408, 409, 410, 414, 416, 417, 449, 464, 468, 534, 535, 541, 559, 560, 561, 562, 563, 579, 580, 590, 591, 602, 610, 796, 797, 798, 801, 822, 823, 824, 861, 862, 874, 875, 898, 899, 901, 902, 903, 904, 905, 906, 907, 916, 949, 956, 979, 981, 986, 988, 989, 992, 999, 1000, 1003, 1004, 1010, 1014, 1031, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "plot_time_series_lagged_featur": [13, 16, 1011], "parallel": [14, 112, 117, 119, 120, 122, 137, 168, 172, 173, 174, 203, 263, 318, 319, 321, 345, 362, 367, 374, 382, 383, 385, 386, 394, 396, 410, 418, 420, 421, 437, 444, 446, 448, 449, 450, 452, 457, 458, 461, 464, 467, 472, 495, 531, 533, 534, 535, 537, 539, 541, 542, 543, 545, 546, 548, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 589, 594, 602, 610, 632, 634, 639, 658, 688, 689, 690, 691, 692, 693, 694, 773, 777, 780, 798, 801, 802, 804, 809, 812, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 833, 834, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 860, 863, 896, 897, 957, 959, 1010, 1011, 1020, 1025, 1027, 1031, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1046, 1047], "acquir": [14, 121, 264, 1043], "angl": [14, 35, 99, 150, 247, 248, 249, 252, 253, 379, 414, 531, 537, 539, 542, 543, 545, 546, 548, 650, 651, 652, 653, 654, 655, 656, 663, 664, 665, 678, 682, 683, 684, 685, 686, 692, 986, 987, 1012, 1027, 1031], "Such": [14, 129, 153, 158, 170, 180, 185, 190, 202, 265, 353, 396, 397, 413, 414, 416, 555, 556, 656, 979, 989, 992, 999, 1005, 1023, 1041, 1046, 1048], "ct": [14, 161, 244, 410, 464, 466, 467], "cellular": 14, "materi": [14, 397, 581, 891, 892, 1008], "haar": 14, "wavelet": [14, 106, 414], "sparsiti": [14, 31, 46, 83, 102, 103, 168, 179, 185, 186, 194, 212, 216, 217, 220, 236, 348, 354, 368, 396, 411, 414, 416, 418, 501, 502, 527, 531, 537, 538, 539, 540, 543, 545, 546, 547, 646, 652, 657, 658, 676, 678, 721, 722, 723, 870, 876, 881, 886, 982, 985, 992, 999, 1011, 1019, 1024, 1033], "oper": [14, 20, 150, 161, 168, 231, 236, 243, 255, 257, 259, 264, 269, 278, 330, 355, 368, 369, 379, 380, 382, 385, 388, 394, 396, 397, 399, 403, 405, 413, 414, 416, 417, 418, 422, 448, 461, 468, 475, 482, 483, 484, 485, 504, 533, 534, 541, 551, 552, 566, 572, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 616, 621, 624, 630, 635, 643, 658, 689, 693, 702, 706, 707, 708, 726, 773, 780, 781, 787, 788, 817, 827, 830, 841, 842, 864, 868, 873, 884, 885, 899, 906, 909, 940, 957, 962, 985, 992, 999, 1004, 1009, 1011, 1014, 1023, 1035, 1037, 1038, 1039, 1041, 1042, 1047], "fidel": 14, "penal": [14, 31, 83, 133, 185, 190, 194, 201, 205, 217, 219, 312, 348, 409, 411, 414, 418, 469, 470, 471, 472, 473, 474, 475, 476, 478, 647, 652, 653, 661, 663, 676, 705, 715, 733, 785, 794, 874, 901, 902, 908, 985, 989, 991, 993, 1003, 1004, 1023], "computation": [14, 79, 96, 119, 125, 133, 153, 285, 344, 353, 367, 383, 408, 409, 410, 413, 414, 416, 419, 538, 632, 633, 671, 762, 798, 800, 801, 802, 812, 824, 985, 986, 988, 996, 997, 1001, 1024, 1027, 1035], "l2": [14, 31, 41, 83, 86, 168, 170, 171, 179, 180, 185, 186, 192, 194, 196, 197, 201, 206, 212, 216, 217, 219, 220, 263, 275, 285, 307, 314, 331, 353, 354, 384, 391, 394, 409, 411, 414, 417, 441, 445, 450, 457, 524, 538, 540, 547, 558, 561, 562, 565, 589, 590, 591, 643, 646, 647, 648, 649, 652, 657, 658, 659, 660, 661, 662, 663, 668, 669, 672, 676, 678, 680, 681, 686, 687, 688, 734, 749, 760, 761, 777, 778, 779, 812, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 858, 859, 873, 881, 888, 901, 902, 906, 907, 908, 910, 912, 972, 978, 982, 985, 987, 992, 993, 999, 1003, 1005, 1011, 1023, 1025, 1033, 1035, 1036, 1038, 1040], "circular": 14, "central": [14, 203, 409, 995, 1009], "emmanuel": [14, 67, 1031, 1038, 1039, 1040], "gouillart": [14, 67, 1031], "nsup": 14, "ndimag": [14, 47, 48, 55, 304, 1024], "_weight": [14, 219], "orig": [14, 292], "floor_x": 14, "floor": 14, "astyp": [14, 38, 42, 45, 46, 54, 61, 63, 67, 82, 103, 123, 125, 142, 170, 191, 192, 219, 225, 236, 240, 273, 285, 314, 417, 979, 985, 1038], "hstack": [14, 34, 43, 135, 146, 227, 239, 257, 343, 413, 860], "_generate_center_coordin": 14, "l_x": 14, "mgrid": [14, 142], "build_projection_oper": 14, "n_dir": 14, "endpoint": [14, 308, 343, 635], "data_ind": 14, "camera_ind": 14, "data_unravel_indic": 14, "xrot": 14, "ind": [14, 43, 125, 135, 354, 841, 842], "logical_and": [14, 126], "proj_oper": 14, "coo_matrix": [14, 187, 452, 585, 586, 960, 963], "generate_synthetic_data": 14, "n_pt": 14, "ogrid": 14, "mask_out": 14, "rand": [14, 25, 38, 39, 40, 41, 45, 50, 59, 63, 104, 116, 130, 132, 145, 180, 185, 224, 225, 230, 236, 237, 276, 297, 318, 319, 324, 331, 332, 347, 354, 360, 361, 391, 400, 544, 704, 705, 715, 756, 780, 785, 893, 894, 896, 897, 898, 1001, 1016, 1031, 1042, 1043], "gaussian_filt": [14, 47, 48, 55, 1024], "sigma": [14, 47, 48, 55, 81, 104, 126, 260, 262, 406, 411, 414, 416, 614, 649, 983, 985, 987, 991, 994, 1024], "logical_xor": [14, 157, 346], "binary_eros": 14, "128": [14, 15, 201, 354, 356, 368, 536, 1011], "proj": [14, 649], "randn": [14, 34, 35, 40, 55, 66, 67, 81, 82, 99, 104, 129, 145, 153, 157, 170, 173, 190, 195, 196, 200, 214, 215, 218, 248, 251, 252, 257, 269, 271, 272, 276, 291, 292, 314, 318, 319, 324, 339, 345, 346, 350, 384, 387, 643, 670, 672, 678, 819, 904, 907], "rgr_ridg": 14, "rec_l2": 14, "lassocv": [14, 133, 139, 171, 185, 190, 400, 416, 418, 651, 652, 654, 655, 656, 663, 684, 985, 1020, 1031, 1034, 1038, 1041, 1042, 1044, 1045, 1048], "rgr_lasso": 14, "rec_l1": 14, "wspace": [14, 15, 40, 45, 46, 63, 81, 96, 115, 201, 219, 230, 247, 249, 250, 253, 290, 298, 328, 337], "485": [14, 16, 53, 69, 177, 178, 354, 696, 1011], "plot_tomography_l1_reconstruct": [14, 16, 1011], "hierarch": [14, 22, 37, 40, 41, 43, 45, 47, 53, 54, 55, 57, 58, 69, 168, 174, 226, 321, 362, 396, 417, 441, 443, 445, 446, 504, 512, 514, 522, 530, 547, 730, 854, 881, 1006, 1010, 1011, 1026, 1027, 1031, 1034, 1035, 1047], "signal": [14, 82, 96, 97, 98, 106, 124, 126, 153, 158, 159, 168, 170, 179, 180, 186, 187, 189, 190, 195, 196, 200, 202, 220, 253, 320, 408, 409, 411, 417, 418, 419, 422, 475, 503, 521, 526, 531, 534, 537, 541, 625, 644, 645, 646, 647, 652, 653, 663, 664, 672, 684, 685, 686, 784, 819, 827, 875, 985, 989, 1006, 1011, 1014, 1019, 1026, 1027], "unstructur": [14, 37, 40, 41, 42, 45, 48, 57, 69, 168, 226, 303, 409, 441, 445, 463, 503, 530, 854, 1001, 1011, 1014, 1035], "nmf": [15, 73, 388, 408, 417, 535, 538, 544, 547, 1026, 1027, 1031, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "latentdirichletalloc": [15, 370, 387, 414, 1009, 1036, 1038, 1045, 1046], "corpu": [15, 354, 355, 377, 414, 588, 589, 590, 591, 1025, 1032], "frobeniu": [15, 99, 443, 447, 459, 469, 470, 471, 472, 473, 474, 475, 476, 531, 537, 538, 540, 545, 546, 547, 985, 1038], "kullback": [15, 222, 414, 538, 540, 547, 692, 986, 1038], "leibler": [15, 222, 414, 538, 540, 547, 692, 986, 1038], "diverg": [15, 125, 222, 227, 290, 538, 540, 547, 692, 857, 986, 988, 989, 994, 996, 1038, 1039, 1044], "probabilist": [15, 27, 28, 31, 79, 83, 95, 96, 106, 107, 108, 152, 153, 156, 159, 160, 163, 168, 236, 353, 396, 407, 415, 416, 437, 473, 476, 532, 534, 535, 541, 559, 588, 589, 610, 622, 643, 645, 676, 703, 740, 798, 823, 868, 903, 904, 906, 907, 982, 983, 985, 988, 989, 994, 999, 1004, 1005, 1009, 1011, 1014, 1031, 1034, 1038], "semant": [15, 353, 354, 396, 544, 1025, 1026, 1027, 1033], "runnabl": [15, 386, 387], "coupl": [15, 53, 54, 56, 223, 376, 377, 406, 407, 409, 418, 589, 907, 978, 1004], "ten": [15, 20, 113, 119, 150, 223, 253, 377, 379, 416, 520, 906, 1040], "polynomi": [15, 145, 165, 168, 176, 178, 179, 201, 207, 220, 235, 242, 262, 276, 290, 319, 320, 337, 347, 374, 378, 452, 491, 620, 639, 640, 641, 643, 672, 764, 773, 774, 827, 862, 871, 873, 876, 880, 901, 903, 904, 905, 906, 907, 984, 1004, 1011, 1012, 1027, 1043, 1044], "lda": [15, 34, 91, 95, 98, 100, 107, 108, 168, 294, 364, 379, 405, 504, 536, 541, 549, 550, 850, 1009, 1011, 1012, 1026, 1027, 1036], "proport": [15, 27, 41, 149, 187, 201, 208, 214, 230, 240, 265, 288, 292, 295, 348, 350, 368, 377, 407, 409, 411, 413, 414, 416, 417, 438, 439, 446, 469, 474, 515, 549, 550, 555, 557, 559, 560, 561, 562, 563, 564, 583, 584, 588, 591, 627, 632, 658, 659, 666, 667, 668, 674, 675, 676, 678, 696, 701, 712, 799, 800, 801, 802, 815, 818, 827, 847, 858, 859, 875, 901, 902, 903, 906, 907, 909, 911, 913, 915, 927, 978, 988, 989, 992, 995, 1003, 1004, 1005, 1036, 1048], "tf": [15, 20, 234, 353, 354, 355, 377, 414, 521, 544, 588, 589, 590, 591, 840, 848, 873, 978, 987, 991, 999, 1009, 1025], "idf": [15, 20, 234, 353, 354, 355, 377, 414, 521, 544, 588, 589, 590, 591, 840, 848, 873, 978, 987, 991, 999, 1025, 1031], "227": [15, 262, 409, 724], "223": [15, 86, 131, 150, 379], "2000": [15, 27, 41, 51, 76, 97, 104, 177, 250, 253, 262, 280, 301, 321, 354, 377, 379, 409, 410, 416, 421, 452, 462, 533, 534, 559, 689, 691, 693, 742, 787, 796, 847, 877, 889, 986, 989, 995, 1001, 1016, 1024], "075": [15, 99, 188, 220, 354, 1011], "201": [15, 125, 150, 379, 584], "minibatchnmf": [15, 370, 414, 1045, 1047, 1048], "batch_siz": [15, 20, 43, 65, 96, 99, 100, 354, 414, 449, 534, 536, 537, 538, 539, 546, 857, 858, 859, 941, 942, 955, 1032, 1039, 1042, 1044, 1045], "079": [15, 150, 379], "210": 15, "865": 15, "ensta": [15, 18, 38, 49, 62, 201, 219, 223, 263, 265, 353, 354, 355], "chyi": [15, 1034, 1035, 1036, 1037, 1038], "kwei": [15, 1034, 1035, 1036, 1037, 1038], "yau": [15, 1034, 1035, 1036, 1037, 1038], "chyikwei": 15, "fetch_20newsgroup": [15, 20, 71, 263, 331, 353, 354, 355, 377, 489, 1025, 1036, 1041], "countvector": [15, 331, 355, 377, 387, 410, 414, 417, 489, 536, 582, 589, 590, 591, 1025, 1031, 1033, 1036, 1039, 1040, 1041, 1042, 1043, 1044], "tfidfvector": [15, 20, 71, 263, 353, 377, 414, 417, 489, 588, 589, 590, 1025, 1031, 1033, 1039, 1040, 1041, 1044, 1045], "n_top_word": 15, "init": [15, 43, 46, 59, 60, 62, 65, 172, 181, 222, 223, 225, 226, 227, 248, 250, 285, 354, 385, 390, 409, 414, 416, 443, 447, 449, 451, 453, 459, 460, 538, 540, 547, 548, 559, 560, 632, 633, 690, 692, 694, 850, 986, 1031, 1040, 1043, 1045, 1046, 1047], "nndsvda": [15, 414, 538, 540, 547, 1040, 1043], "plot_top_word": 15, "feature_nam": [15, 20, 91, 107, 120, 127, 130, 150, 171, 173, 210, 241, 288, 307, 317, 318, 319, 324, 337, 353, 359, 375, 377, 387, 410, 490, 491, 492, 496, 500, 501, 502, 504, 505, 510, 582, 631, 632, 633, 882, 913, 914, 915, 997, 1005, 1047], "flatten": [15, 33, 225, 235, 260, 311, 337, 349, 388, 502, 569, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 850], "topic_idx": 15, "top_features_ind": 15, "argsort": [15, 18, 20, 21, 22, 125, 127, 173, 174, 201, 219, 317, 327, 328, 353, 354, 377, 997], "top_featur": 15, "barh": [15, 127, 165, 166, 170, 171, 173, 174, 244, 314, 353, 354, 355], "fontdict": [15, 40], "labels": [15, 311], "set_vis": [15, 35, 289, 295, 307], "filter": [15, 47, 48, 207, 219, 260, 262, 287, 353, 377, 388, 391, 408, 409, 417, 448, 488, 489, 503, 588, 591, 595, 596, 597, 598, 599, 600, 773, 836, 930, 954, 991, 992, 1022, 1025, 1041], "useless": [15, 122, 265, 388, 418, 515, 528, 658, 712, 985, 999, 1040], "strip": [15, 219, 354, 368, 376, 377, 496], "header": [15, 71, 263, 353, 354, 377, 380, 417, 488, 489, 798, 801, 802, 812], "footer": [15, 71, 263, 353, 354, 377, 488, 489], "repli": [15, 353, 381, 382, 385], "english": [15, 20, 71, 353, 354, 355, 387, 417, 588, 589, 591, 1009, 1010, 1025, 1044], "occur": [15, 71, 124, 201, 205, 219, 348, 364, 382, 384, 390, 397, 406, 409, 411, 413, 417, 444, 508, 509, 572, 581, 588, 590, 591, 627, 671, 797, 798, 801, 802, 804, 812, 820, 823, 824, 825, 828, 871, 926, 989, 991, 999, 1025, 1031, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "data_sampl": 15, "tfidf_vector": 15, "max_df": [15, 263, 331, 353, 354, 588, 591, 1042], "min_df": [15, 20, 71, 263, 331, 353, 354, 417, 588, 591, 1031, 1033, 1042], "max_featur": [15, 32, 117, 128, 239, 259, 274, 319, 416, 418, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 588, 591, 597, 909, 910, 911, 912, 978, 985, 1031, 1033, 1034, 1038, 1039, 1042, 1045, 1048], "stop_word": [15, 20, 353, 354, 417, 588, 589, 591], "tfidf": [15, 71, 331, 417, 591, 1025], "tf_vector": 15, "beta_loss": [15, 538, 540, 547, 1038], "alpha_w": [15, 414, 538, 540, 547, 1044], "00005": 15, "alpha_h": [15, 414, 538, 540, 547, 1044], "tfidf_feature_nam": 15, "get_feature_names_out": [15, 20, 171, 173, 320, 353, 354, 355, 377, 384, 396, 410, 417, 425, 430, 433, 442, 443, 445, 447, 449, 464, 467, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 566, 567, 568, 569, 570, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 688, 689, 692, 845, 850, 853, 857, 860, 861, 864, 865, 866, 867, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 999, 1044, 1045, 1046, 1047, 1048], "solver": [15, 31, 34, 35, 47, 67, 168, 179, 190, 192, 193, 194, 201, 203, 209, 216, 217, 219, 220, 301, 302, 303, 304, 314, 353, 388, 394, 396, 399, 405, 409, 421, 452, 462, 471, 472, 478, 502, 533, 535, 540, 541, 544, 547, 549, 646, 647, 648, 652, 653, 658, 659, 660, 661, 662, 663, 666, 668, 669, 670, 672, 674, 676, 680, 681, 684, 687, 688, 689, 691, 693, 695, 787, 812, 827, 832, 835, 858, 859, 903, 904, 905, 906, 907, 983, 986, 989, 993, 1003, 1004, 1009, 1011, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "mu": [15, 81, 82, 262, 414, 422, 473, 475, 476, 479, 480, 481, 540, 547, 983, 985, 1038, 1041], "mbnmf": 15, "learning_method": [15, 387, 536], "learning_offset": [15, 536], "tf_feature_nam": 15, "plot_topics_extraction_with_nmf_lda": [15, 16, 1011], "058": [16, 108, 150, 260, 379], "execut": [16, 23, 29, 36, 69, 77, 84, 88, 94, 108, 110, 137, 143, 151, 163, 165, 167, 175, 178, 185, 190, 220, 228, 236, 245, 254, 267, 278, 281, 284, 299, 305, 315, 325, 333, 334, 351, 356, 363, 369, 382, 388, 403, 405, 409, 414, 420, 443, 461, 798, 804, 812, 820, 822, 823, 824, 825, 828, 846, 955, 956, 999, 1002, 1011, 1017, 1025, 1033, 1036, 1039], "auto_exampl": [16, 23, 29, 36, 69, 77, 84, 88, 94, 108, 110, 137, 143, 151, 163, 167, 175, 178, 220, 228, 245, 254, 278, 281, 284, 299, 305, 315, 325, 333, 334, 351, 356, 363], "mem": [16, 23, 29, 36, 55, 69, 77, 84, 88, 94, 108, 110, 137, 143, 151, 163, 167, 175, 178, 220, 228, 245, 254, 278, 281, 284, 299, 305, 315, 325, 333, 334, 351, 356, 363, 388, 508, 1011], "09": [16, 98, 106, 167, 171, 220, 234, 238, 275, 409, 734, 839, 989, 999, 1003, 1011], "svm_gui": [16, 17, 1011, 1023], "wikipedia_principal_eigenvector": [16, 18, 1011], "graphic": [17, 20, 82, 172, 331, 353, 354, 355, 377, 388, 408, 409, 411, 414, 791, 792, 796, 831, 913, 989, 990, 996, 1009, 1025], "frontend": [17, 388], "mainli": [17, 28, 54, 113, 116, 153, 271, 280, 368, 384, 407, 611, 991, 996], "intend": [17, 58, 59, 100, 202, 344, 353, 382, 383, 384, 389, 394, 413, 468, 582, 673, 699, 870, 871, 881, 899, 984, 985, 989, 993, 1000], "didact": [17, 382, 1010], "induc": [17, 27, 57, 171, 185, 192, 194, 199, 202, 216, 236, 240, 348, 355, 406, 408, 414, 416, 446, 449, 539, 543, 553, 557, 558, 559, 560, 564, 565, 566, 643, 725, 755, 874, 909, 910, 911, 912, 982, 989, 1003, 1023], "mous": [17, 376], "button": [17, 382, 390, 1023], "prettenho": 17, "tkagg": 17, "backend": [17, 369, 396, 468, 899, 955, 957, 959, 989, 1034, 1039, 1040, 1041, 1042], "backend_tkagg": 17, "figurecanvastkagg": 17, "navigationtoolbar2tk": 17, "navigationtoolbar2tkagg": 17, "deprec": [17, 320, 371, 385, 386, 391, 396, 400, 441, 445, 446, 447, 449, 450, 457, 459, 478, 526, 527, 536, 537, 538, 539, 540, 546, 553, 569, 570, 579, 580, 582, 627, 633, 638, 644, 645, 676, 677, 740, 741, 749, 750, 777, 778, 779, 801, 802, 804, 822, 823, 824, 848, 860, 903, 906, 917, 932, 933, 978, 979, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "tkinter": 17, "tk": 17, "contourset": 17, "dump_svmlight_fil": [17, 1031, 1032, 1036, 1046], "y_min": [17, 32, 59, 115, 122, 131, 142, 155, 235, 301, 309, 332, 344, 345, 635, 637], "y_max": [17, 32, 59, 115, 122, 131, 142, 155, 219, 235, 301, 309, 332, 344, 345, 635, 637], "x_min": [17, 32, 53, 59, 115, 122, 126, 131, 142, 155, 190, 235, 301, 309, 332, 344, 345], "x_max": [17, 32, 53, 59, 115, 122, 131, 142, 155, 235, 301, 309, 332, 344, 345], "notifi": [17, 572, 573, 574, 1013, 1029, 1041], "regist": [17, 185, 353, 388, 957, 959], "surfac": [17, 32, 91, 100, 112, 113, 114, 115, 117, 134, 137, 161, 168, 184, 193, 210, 268, 288, 332, 336, 337, 357, 358, 360, 361, 362, 363, 416, 504, 553, 557, 564, 631, 763, 909, 915, 983, 988, 1003, 1004, 1005, 1011], "surface_typ": 17, "add_observ": 17, "set_surfac": 17, "intvar": 17, "coef0": [17, 177, 344, 347, 452, 535, 639, 640, 643, 774, 776, 903, 904, 905, 906, 907, 987, 1004], "kernel_map": 17, "hasattr": [17, 45, 57, 63, 83, 111, 122, 219, 234, 301, 309, 353, 396, 950, 1041], "x2": [17, 86, 92, 115, 125, 156, 213, 384, 410, 588, 629, 699, 1024], "decision_surfac": 17, "delta": [17, 412, 452], "clear_data": 17, "add_exampl": 17, "example_ad": 17, "refit": [17, 120, 139, 147, 149, 168, 231, 255, 261, 263, 266, 269, 270, 274, 278, 396, 413, 419, 502, 567, 627, 659, 665, 713, 798, 801, 802, 812, 827, 906, 978, 985, 989, 1011, 1038, 1039, 1040], "docstr": [17, 382, 384, 388, 396, 448, 461, 472, 699, 701, 928, 978, 989, 992, 993, 1003, 1031, 1038, 1039, 1044, 1045], "set_xlim": [17, 32, 43, 61, 76, 81, 93, 118, 131, 166, 172, 199, 201, 206, 235, 247, 266, 268, 280, 290, 301, 307, 309, 310, 311, 312, 318, 324, 349], "attributeerror": [17, 410, 559, 577, 950, 1024, 1040, 1041, 1043, 1047, 1048], "get_tk_widget": 17, "pack": [17, 391, 1039], "fill": [17, 35, 122, 139, 173, 257, 290, 359, 396, 410, 414, 515, 527, 538, 540, 547, 587, 630, 913, 915, 979, 992, 1005], "_tkcanva": 17, "mpl_connect": 17, "button_press_ev": 17, "onclick": 17, "toolbar": 17, "controllbar": 17, "c_label": 17, "plot_kernel": 17, "exp": [17, 47, 55, 67, 102, 106, 116, 126, 154, 185, 211, 290, 295, 298, 318, 319, 323, 344, 407, 409, 410, 415, 421, 452, 465, 521, 533, 536, 615, 616, 622, 641, 758, 765, 775, 858, 859, 877, 983, 985, 987, 991, 992, 993, 1002, 1003, 1004, 1023], "xdata": 17, "ydata": 17, "update_exampl": 17, "scalex": 17, "scalei": 17, "examples_load": 17, "remove_surfac": 17, "plot_support_vector": 17, "plot_decision_surfac": 17, "old": [17, 219, 382, 386, 388, 409, 468, 536, 646, 652, 899, 986, 1010, 1013, 1031, 1036, 1037, 1039, 1044, 1045, 1046], "isinst": [17, 35, 122, 219, 396], "lineset": 17, "support_vector": [17, 338], "circl": [17, 35, 61, 101, 131, 132, 142, 227, 238, 292, 295, 302, 307, 309, 329, 344, 361, 378, 386, 390, 409, 452, 462, 514, 522, 763, 1004], "dash": [17, 34, 81, 113, 125, 135, 153, 156, 158, 171, 188, 193, 196, 202, 203, 210, 213, 214, 240, 262, 272, 342, 346, 1003], "bone": [17, 214, 350], "rais": [17, 111, 202, 237, 238, 265, 311, 320, 382, 384, 386, 387, 388, 391, 394, 396, 400, 403, 410, 413, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 509, 533, 534, 538, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 576, 577, 581, 582, 588, 589, 590, 591, 593, 594, 602, 603, 610, 611, 617, 627, 629, 632, 635, 636, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 696, 698, 702, 709, 711, 712, 713, 714, 726, 728, 729, 737, 777, 781, 782, 783, 786, 787, 788, 796, 797, 798, 799, 800, 801, 802, 804, 805, 807, 812, 816, 820, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 846, 848, 850, 851, 852, 856, 858, 859, 860, 861, 864, 865, 866, 867, 868, 873, 874, 875, 879, 880, 881, 888, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 916, 919, 921, 922, 924, 925, 942, 946, 950, 973, 974, 975, 976, 989, 999, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "valueerror": [17, 237, 238, 384, 388, 400, 468, 577, 603, 617, 635, 671, 714, 833, 851, 860, 866, 880, 920, 924, 925, 974, 975, 976, 999, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048], "fm": 17, "kernel_group": 17, "radiobutton": 17, "command": [17, 234, 368, 369, 380, 382, 386, 388, 390, 399, 417, 508, 1009, 1025, 1033], "anchor": [17, 273], "valbox": 17, "stringvar": 17, "textvari": 17, "cmap_group": 17, "hyperplan": [17, 92, 115, 156, 168, 179, 193, 210, 220, 238, 265, 335, 336, 337, 338, 339, 340, 344, 345, 351, 512, 631, 658, 659, 666, 668, 674, 675, 676, 677, 901, 903, 905, 906, 1003, 1004, 1011], "train_button": 17, "get_pars": 17, "optpars": 17, "optionpars": 17, "op": [17, 386, 658, 659, 666, 667, 668, 676, 677, 678, 858, 859, 901, 999], "add_opt": 17, "action": [17, 320, 353, 381, 385, 386, 399, 999, 1041], "store": [17, 33, 54, 55, 71, 73, 82, 91, 147, 161, 177, 187, 190, 205, 223, 231, 241, 252, 267, 271, 327, 355, 362, 368, 376, 377, 382, 384, 389, 390, 391, 394, 396, 410, 412, 414, 416, 417, 419, 420, 438, 440, 444, 446, 450, 457, 469, 470, 473, 474, 475, 476, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 503, 508, 534, 535, 541, 549, 550, 555, 556, 557, 558, 563, 564, 565, 566, 569, 570, 589, 610, 611, 627, 631, 632, 635, 638, 649, 650, 654, 660, 661, 662, 663, 666, 667, 673, 675, 676, 677, 678, 688, 689, 690, 692, 697, 698, 700, 701, 702, 780, 796, 797, 798, 804, 812, 820, 841, 842, 843, 844, 845, 847, 849, 850, 851, 852, 853, 856, 872, 879, 881, 882, 896, 897, 898, 921, 922, 946, 947, 960, 963, 979, 981, 985, 992, 1001, 1004, 1005, 1009, 1016, 1025, 1028, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "dest": [17, 322], "dump": [17, 18, 403, 487, 841, 842], "argv": [17, 234], "opt": [17, 380, 384], "arg": [17, 237, 302, 383, 396, 414, 416, 423, 571, 572, 573, 574, 575, 576, 577, 578, 617, 699, 865, 985, 991, 992], "parse_arg": 17, "wm_titl": 17, "mainloop": 17, "__main__": [17, 331, 394], "iso": [17, 92, 152, 163, 168, 213, 224, 610, 613, 614, 1011], "gpc": [17, 27, 31, 32, 92, 122, 131, 142, 152, 158, 159, 160, 161, 163, 168, 211, 212, 213, 214, 236, 251, 301, 310, 332, 345, 346, 504, 610, 611, 613, 614, 619, 620, 622, 623, 703, 740, 1011, 1012, 1027, 1041], "adaboost": [17, 32, 92, 112, 116, 117, 122, 124, 129, 132, 133, 136, 137, 156, 168, 308, 344, 359, 360, 361, 519, 551, 553, 554, 559, 631, 703, 827, 909, 910, 1011, 1012, 1027, 1033], "exercis": [17, 74, 122, 131, 143, 149, 155, 157, 211, 214, 267, 275, 276, 277, 332, 343, 345, 346, 350, 370, 371, 379, 382, 501, 502, 504, 505, 652, 653, 658, 798, 803, 823, 843, 906, 1011, 1017, 1034], "classic": [18, 196, 226, 247, 253, 379, 386, 411, 413, 414, 443, 447, 449, 459, 492, 500, 504, 510, 632, 633, 911, 912, 983, 985, 988, 991, 999, 1009, 1019, 1031, 1032, 1036, 1045], "graph": [18, 26, 40, 45, 47, 67, 68, 161, 222, 259, 285, 287, 330, 368, 382, 385, 396, 406, 411, 420, 441, 444, 445, 452, 453, 457, 462, 463, 471, 472, 478, 511, 585, 586, 688, 691, 692, 695, 781, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 856, 897, 986, 989, 992, 994, 1002, 1005, 1009, 1014, 1021, 1024, 1031, 1038, 1039, 1041, 1044, 1046], "vertex": [18, 27, 409, 453, 1044], "en": [18, 25, 390, 531, 537, 595, 636, 664, 668, 671, 685, 686, 695, 705, 843, 844, 849, 850, 851, 852, 879, 895, 909, 910, 985, 989, 1004, 1005], "wiki": [18, 25, 388, 390, 595, 636, 668, 671, 695, 705, 843, 844, 849, 850, 851, 852, 879, 895, 909, 910, 985, 1005], "eigenvector_centr": 18, "webpag": [18, 177, 382], "pagerank": 18, "insid": [18, 20, 27, 172, 203, 237, 262, 329, 340, 370, 376, 377, 384, 388, 400, 409, 417, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 533, 534, 538, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 594, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 800, 805, 807, 816, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 846, 848, 851, 852, 858, 859, 861, 864, 866, 867, 868, 873, 880, 881, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 946, 949, 957, 996, 1014], "accord": [18, 25, 27, 38, 50, 79, 119, 125, 150, 154, 184, 201, 219, 234, 317, 344, 354, 364, 382, 384, 394, 395, 396, 397, 406, 409, 411, 413, 414, 416, 417, 419, 437, 450, 452, 456, 460, 462, 465, 469, 504, 516, 517, 518, 525, 530, 532, 535, 536, 538, 540, 550, 553, 554, 561, 562, 563, 566, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 641, 642, 644, 645, 649, 658, 659, 670, 680, 691, 695, 734, 778, 779, 798, 799, 800, 801, 802, 805, 806, 807, 812, 822, 836, 837, 838, 839, 840, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 864, 871, 879, 891, 893, 894, 901, 902, 903, 904, 906, 907, 983, 985, 989, 991, 992, 999, 1002, 1003, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "tradit": [18, 56, 201, 216, 354, 370, 407, 416, 417, 632, 694, 985, 988, 999, 1009, 1014], "power_iter": 18, "martinsson": [18, 535, 541, 938], "dbpedia": 18, "content": [18, 312, 353, 355, 377, 382, 386, 388, 403, 408, 417, 486, 503, 508, 509, 588, 589, 591, 671, 915, 998, 1014, 1025, 1032, 1041], "bz2": [18, 508, 509], "bz2file": 18, "pprint": [18, 126, 237, 263, 377, 933], "urlopen": 18, "randomized_svd": [18, 391, 451, 453, 532, 541, 544, 546, 1031, 1032, 1037, 1044, 1045, 1046], "redirects_url": 18, "redirects_en": 18, "nt": 18, "redirects_filenam": 18, "page_links_url": 18, "page_links_en": 18, "page_links_filenam": 18, "resourc": [18, 43, 126, 165, 201, 303, 319, 367, 371, 385, 395, 416, 801, 802, 990, 1007, 1010, 1014, 1017, 1027, 1039, 1044, 1045], "wait": [18, 382, 386, 396, 666, 667, 668, 676, 678, 1043], "wb": 18, "index_map": 18, "setdefault": [18, 916], "dbpedia_resource_prefix_len": 18, "shortname_slic": 18, "short_nam": 18, "nt_uri": 18, "uri": 18, "prefix": [18, 71, 263, 287, 317, 382, 386, 388, 390, 419, 425, 442, 443, 445, 447, 449, 464, 467, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 639, 640, 641, 642, 688, 689, 692, 804, 825, 845, 850, 853, 857, 861, 867, 893, 894, 1037, 1038, 1044, 1046], "get_redirect": 18, "transit": [18, 348, 386, 1042], "malform": [18, 1035], "1000000": [18, 536], "08d": 18, "isoformat": 18, "closur": 18, "transitive_target": 18, "seen": [18, 26, 41, 56, 67, 83, 99, 106, 120, 126, 171, 172, 197, 226, 233, 237, 302, 307, 340, 353, 377, 384, 386, 395, 396, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 425, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 521, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 623, 627, 628, 629, 630, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 796, 797, 798, 801, 802, 812, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 964, 970, 978, 984, 992, 993, 999, 1005, 1014, 1020, 1021, 1023, 1024, 1043, 1044, 1045, 1046, 1047, 1048], "break": [18, 40, 47, 71, 82, 168, 190, 193, 207, 237, 249, 280, 320, 328, 335, 351, 353, 355, 382, 384, 386, 388, 395, 409, 469, 512, 639, 773, 777, 780, 796, 874, 881, 886, 903, 906, 985, 988, 997, 999, 1004, 1010, 1011, 1031, 1032, 1038, 1039, 1041, 1043, 1047], "get_adjacency_matrix": 18, "resolv": [18, 381, 382, 386, 390, 397, 417, 446, 452, 462, 691, 695, 938, 979, 989, 1038, 1040, 1041, 1044], "lil_matrix": 18, "float32": [18, 125, 225, 304, 322, 369, 377, 382, 384, 405, 557, 558, 559, 560, 563, 564, 565, 566, 593, 594, 640, 641, 658, 699, 762, 866, 909, 910, 911, 912, 919, 965, 966, 967, 1005, 1016, 1025, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "del": [18, 388, 1043, 1044], "csr": [18, 355, 368, 376, 377, 391, 394, 396, 417, 420, 443, 446, 447, 449, 450, 459, 497, 508, 523, 527, 553, 554, 557, 558, 564, 565, 566, 630, 658, 692, 714, 767, 791, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 856, 864, 868, 870, 872, 873, 874, 876, 879, 880, 881, 884, 885, 886, 888, 891, 894, 909, 910, 911, 912, 917, 921, 922, 944, 952, 964, 965, 966, 967, 968, 969, 970, 992, 999, 1003, 1031, 1032, 1037, 1039, 1040, 1046, 1047, 1048], "tocsr": 18, "convers": [18, 126, 192, 353, 364, 370, 376, 382, 384, 390, 394, 403, 417, 572, 856, 865, 873, 921, 922, 975, 986, 1010, 1014, 1039, 1040, 1041, 1044, 1047], "5m": 18, "ram": [18, 54, 370, 416, 893, 894, 991, 1004, 1025, 1037, 1043, 1046, 1047], "5000000": 18, "strongest": [18, 194], "highest": [18, 20, 27, 83, 146, 150, 205, 260, 262, 273, 319, 353, 382, 394, 407, 409, 413, 416, 418, 437, 555, 557, 564, 592, 595, 596, 598, 599, 600, 603, 604, 606, 635, 637, 725, 755, 793, 796, 798, 801, 802, 812, 898, 909, 940, 978, 985, 989, 990, 993, 1003, 1005, 1043], "centrality_scor": 18, "networkx": [18, 391], "copyright": [18, 83], "aric": 18, "hagberg": 18, "lanl": 18, "gov": [18, 379], "dan": [18, 1031, 1035, 1036, 1037, 1039, 1040], "schult": 18, "dschult": 18, "pieter": [18, 1037, 1038, 1045], "swart": 18, "incoming_count": 18, "nonzero": [18, 20, 106, 200, 234, 266, 355, 406, 420, 444, 523, 524, 531, 537, 542, 548, 588, 591, 685, 686, 699, 843, 844, 847, 849, 851, 852, 985, 989], "indptr": [18, 285, 362, 1039, 1047], "dangl": 18, "isclos": 18, "guess": [18, 113, 122, 413, 416, 417, 478, 532, 538, 540, 541, 547, 989, 1003], "prev_scor": 18, "dot": [18, 33, 34, 45, 50, 55, 58, 63, 79, 80, 81, 83, 86, 87, 97, 98, 99, 104, 106, 113, 116, 153, 154, 160, 161, 171, 182, 185, 193, 195, 196, 208, 235, 248, 249, 251, 252, 266, 336, 338, 344, 368, 384, 388, 391, 396, 406, 414, 417, 533, 538, 540, 547, 590, 591, 614, 646, 647, 650, 652, 653, 654, 657, 660, 661, 662, 663, 681, 684, 687, 760, 762, 873, 913, 939, 987, 991, 999, 1003, 1004, 1024, 1040], "converg": [18, 58, 62, 79, 80, 124, 126, 153, 159, 162, 194, 203, 209, 217, 248, 250, 302, 303, 307, 312, 328, 370, 391, 396, 406, 409, 414, 417, 419, 421, 440, 443, 446, 447, 448, 449, 452, 454, 459, 460, 461, 462, 471, 472, 478, 482, 483, 484, 533, 535, 536, 537, 538, 539, 546, 553, 571, 610, 644, 645, 646, 647, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 668, 672, 674, 676, 678, 682, 683, 687, 688, 690, 691, 694, 695, 796, 797, 850, 858, 859, 896, 897, 903, 979, 984, 985, 986, 988, 993, 1003, 1031, 1034, 1035, 1036, 1038, 1039, 1042, 1044, 1045, 1046, 1047, 1048], "l_inf": 18, "scores_max": 18, "err": [18, 86, 100, 113], "6f": [18, 100, 267, 736, 794], "chanc": [18, 37, 39, 50, 69, 113, 145, 168, 174, 201, 209, 216, 219, 262, 268, 271, 272, 313, 348, 354, 364, 381, 409, 413, 700, 702, 704, 705, 708, 716, 754, 756, 785, 794, 826, 989, 997, 1005, 1011, 1047], "concern": [19, 37, 78, 85, 89, 95, 109, 112, 144, 152, 164, 168, 176, 179, 221, 246, 252, 279, 282, 286, 300, 306, 326, 335, 352, 357, 368, 384, 408, 986, 1001], "twenti": [20, 234, 379, 406, 409, 1025], "comp": [20, 86, 87, 99, 107, 304, 331, 353, 354, 355, 377, 1025], "window": [20, 331, 377, 382, 384, 385, 417, 1009, 1031, 1034, 1038, 1042, 1044, 1045], "misc": [20, 54, 99, 263, 331, 353, 354, 355, 377, 1024], "categori": [20, 45, 63, 71, 72, 123, 133, 171, 172, 201, 209, 216, 240, 263, 302, 303, 309, 313, 314, 319, 322, 324, 331, 353, 354, 355, 376, 377, 391, 408, 409, 410, 416, 417, 419, 488, 496, 497, 503, 561, 562, 648, 658, 659, 669, 680, 742, 757, 758, 837, 874, 875, 882, 979, 985, 986, 987, 991, 997, 1016, 1025, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "noth": [20, 71, 353, 354, 387, 542, 714, 864, 873, 922, 999], "frequenc": [20, 28, 153, 172, 185, 195, 201, 234, 318, 319, 353, 354, 355, 377, 394, 407, 413, 414, 416, 417, 418, 551, 557, 559, 560, 561, 564, 588, 589, 590, 591, 604, 658, 659, 664, 666, 668, 674, 675, 676, 685, 686, 830, 865, 874, 875, 901, 903, 906, 909, 911, 927, 985, 986, 991, 999, 1003, 1005, 1033, 1035, 1036, 1042], "dhillon": [20, 406, 451, 453, 511], "cut": [20, 44, 47, 66, 67, 224, 386, 394, 406, 409, 446, 452, 453, 462, 588, 591, 691, 695, 999], "minibatchkmean": [20, 37, 39, 41, 44, 45, 51, 59, 60, 61, 62, 64, 69, 92, 168, 354, 370, 409, 414, 440, 442, 447, 512, 778, 1011, 1032, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "coclust": [20, 406, 451, 513], "4415": 20, "3015": 20, "talk": [20, 71, 263, 353, 354, 355, 371, 377, 396, 403, 1014, 1017, 1025], "polit": [20, 353, 377, 381, 985, 990], "mideast": [20, 377], "cosmo": 20, "angmar": 20, "alfalfa": 20, "alphalpha": 20, "prolin": [20, 312, 379], "benson": 20, "1948": 20, "4325": 20, "gun": [20, 377], "sci": [20, 71, 353, 354, 355, 377, 394, 689, 693, 872, 986, 999, 1025], "med": [20, 71, 271, 377, 999, 1025], "geb": 20, "gordon": [20, 250, 1037, 1041, 1043, 1045], "clinton": 20, "pitt": 20, "cdt": 20, "surrend": 20, "veal": 20, "1259": 20, "3534": 20, "soc": [20, 377, 1025], "religion": [20, 263, 353, 354, 355, 377, 990, 1025], "alt": [20, 263, 331, 353, 354, 355, 377, 390, 1025], "atheism": [20, 263, 331, 353, 354, 355, 377, 1025], "god": [20, 353, 354, 1025], "jesu": [20, 353, 354], "kent": 20, "belief": [20, 262, 857, 994], "christ": 20, "faith": [20, 159, 345], "moral": [20, 72, 353, 658, 1039, 1043, 1044], "775": 20, "1623": 20, "pc": [20, 331, 355, 377], "hardwar": [20, 331, 355, 368, 369, 377, 380, 399, 405, 1009, 1045, 1046], "scsi": 20, "nada": 20, "vga": 20, "esdi": 20, "isa": 20, "kth": [20, 819], "s3": [20, 97, 150, 189, 190, 379, 1024], "vlb": 20, "bmug": 20, "2180": 20, "2802": 20, "mac": [20, 313, 331, 377, 382, 708, 989], "electron": [20, 150, 377, 379, 538, 540, 547, 627], "voltag": 20, "ship": [20, 133, 166, 359, 369, 380, 399, 417, 985, 1031, 1040], "circuit": [20, 986], "mpce": 20, "kolstad": 20, "spectralcoclust": [20, 22, 406, 451, 1033, 1038, 1042], "v_measure_scor": [20, 38, 39, 50, 59, 323, 354, 409, 717, 735, 736, 756, 989, 1040], "number_norm": 20, "token": [20, 355, 368, 377, 386, 417, 536, 588, 589, 590, 591, 1031, 1039, 1043], "placehold": [20, 386, 627, 628, 629, 630, 813, 814, 817, 818, 979], "begin": [20, 111, 150, 153, 257, 264, 283, 320, 353, 364, 382, 387, 388, 396, 406, 409, 416, 553, 554, 559, 561, 562, 666, 667, 676, 677, 678, 978, 981, 985, 989, 999, 1001, 1003, 1039, 1045, 1046], "By": [20, 46, 96, 129, 130, 180, 205, 237, 271, 280, 307, 317, 323, 324, 344, 353, 369, 382, 384, 388, 389, 396, 400, 409, 410, 412, 413, 414, 415, 416, 418, 438, 441, 445, 446, 450, 464, 467, 468, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 524, 526, 549, 550, 557, 558, 559, 560, 564, 565, 585, 586, 588, 589, 591, 606, 609, 632, 633, 671, 673, 675, 677, 690, 692, 694, 697, 699, 700, 702, 703, 718, 728, 729, 733, 737, 782, 783, 786, 793, 795, 801, 802, 847, 861, 862, 874, 875, 877, 879, 889, 891, 899, 904, 905, 909, 910, 911, 912, 921, 922, 957, 978, 979, 981, 985, 989, 996, 999, 1001, 1005, 1016, 1020, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1043, 1045, 1048], "isdigit": [20, 417], "numbernormalizingvector": 20, "build_token": [20, 417, 588, 589, 591], "super": [20, 26, 28, 384, 417, 1039], "forsal": [20, 355, 377], "rec": [20, 355, 377, 641], "auto": [20, 26, 28, 34, 58, 59, 93, 146, 147, 150, 157, 177, 184, 222, 227, 235, 242, 259, 261, 269, 285, 288, 293, 309, 317, 318, 319, 320, 321, 322, 336, 337, 338, 343, 346, 347, 355, 376, 377, 384, 416, 418, 419, 420, 441, 444, 445, 446, 447, 449, 450, 452, 457, 459, 462, 496, 508, 509, 535, 538, 540, 541, 544, 547, 549, 557, 558, 561, 562, 563, 564, 565, 567, 568, 593, 594, 597, 602, 607, 608, 629, 631, 632, 633, 635, 639, 646, 647, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 672, 673, 674, 680, 681, 682, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 700, 702, 734, 740, 801, 802, 829, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 858, 859, 874, 875, 882, 893, 894, 898, 901, 902, 903, 904, 905, 906, 907, 911, 912, 937, 938, 955, 958, 980, 983, 985, 986, 989, 990, 992, 999, 1004, 1009, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "motorcycl": [20, 377], "sport": [20, 377], "basebal": [20, 377], "hockei": [20, 377], "crypt": [20, 377], "n_cluster": [20, 21, 22, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 96, 321, 354, 382, 396, 409, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 460, 461, 462, 463, 511, 513, 1024, 1031, 1035, 1037, 1039, 1040, 1042, 1045], "svd_method": [20, 451, 453, 532, 1034], "kmean": [20, 21, 37, 38, 44, 46, 47, 49, 51, 54, 58, 59, 62, 66, 69, 168, 250, 253, 310, 321, 354, 391, 409, 440, 443, 448, 449, 452, 462, 512, 791, 792, 796, 797, 866, 992, 999, 1010, 1011, 1024, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "20000": [20, 98], "n_init": [20, 43, 44, 46, 51, 58, 59, 62, 65, 222, 223, 224, 225, 318, 321, 354, 409, 443, 447, 449, 451, 452, 453, 459, 462, 690, 694, 796, 797, 1024, 1031, 1039, 1045, 1046, 1047], "y_coclust": 20, "row_labels_": [20, 21, 22, 406, 451, 453], "y_kmean": 20, "fit_predict": [20, 57, 58, 61, 230, 237, 240, 292, 384, 396, 409, 427, 431, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 469, 563, 677, 796, 797, 847, 853, 861, 905, 995, 1036, 1039, 1040, 1044, 1046, 1048], "document_nam": 20, "bicluster_ncut": 20, "get_indic": [20, 424, 451, 453], "float_info": 20, "row_compl": 20, "logical_not": [20, 65, 106, 204], "rows_": [20, 406, 424, 451, 453], "col_compl": 20, "columns_": [20, 406, 424, 451, 453], "most_common": 20, "counter": [20, 113, 269, 409, 676, 677, 678, 1044], "itemgett": 20, "revers": [20, 76, 150, 206, 262, 534, 541, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 611, 788, 861, 989, 1031, 1032, 1041, 1043, 1047], "best_idx": [20, 261], "get_shap": [20, 424, 451, 453], "cluster_doc": 20, "cluster_word": 20, "cat_str": 20, "0f": [20, 59], "out_of_cluster_doc": 20, "word_col": 20, "word_scor": 20, "important_word": 20, "567": [20, 23, 1011], "plot_bicluster_newsgroup": [20, 23, 1011], "semi": [20, 32, 71, 122, 131, 142, 155, 235, 238, 301, 309, 319, 333, 337, 344, 355, 371, 377, 396, 488, 504, 535, 588, 590, 676, 728, 827, 861, 865, 896, 897, 898, 906, 987, 992, 995, 1011, 1012, 1027, 1031, 1043, 1046], "supervis": [20, 26, 28, 32, 38, 50, 55, 59, 71, 87, 105, 118, 122, 131, 141, 142, 155, 223, 235, 238, 249, 262, 294, 301, 309, 319, 330, 333, 337, 344, 354, 355, 368, 371, 377, 384, 395, 396, 407, 409, 412, 413, 414, 416, 417, 419, 437, 439, 464, 488, 503, 504, 553, 588, 590, 593, 594, 634, 676, 728, 799, 800, 803, 805, 806, 807, 808, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 826, 827, 850, 860, 861, 865, 875, 882, 896, 897, 898, 906, 983, 986, 989, 991, 992, 995, 999, 1000, 1004, 1005, 1006, 1009, 1010, 1011, 1013, 1016, 1017, 1019, 1025, 1027, 1031, 1037, 1043], "checkerboard": [21, 406, 451, 453, 511, 513], "simultan": [21, 56, 97, 266, 270, 323, 348, 361, 374, 406, 409, 978, 989, 990, 1005, 1014, 1038], "identifi": [21, 91, 98, 105, 126, 127, 170, 171, 201, 204, 205, 250, 252, 260, 265, 271, 294, 314, 319, 344, 353, 354, 376, 377, 381, 382, 386, 387, 396, 409, 410, 413, 416, 417, 446, 450, 457, 487, 496, 508, 509, 555, 556, 557, 558, 563, 564, 565, 566, 606, 643, 649, 699, 712, 773, 826, 847, 866, 896, 897, 978, 985, 989, 995, 1002, 1014, 1023, 1038, 1040, 1045, 1046], "particularli": [21, 32, 71, 72, 75, 106, 131, 202, 232, 262, 309, 318, 350, 364, 368, 382, 391, 396, 409, 410, 412, 415, 417, 496, 804, 820, 838, 938, 957, 985, 986, 989, 991, 1010, 1014, 1024, 1031, 1036, 1038, 1039, 1045], "suit": [21, 96, 131, 171, 201, 202, 230, 252, 320, 321, 323, 353, 369, 382, 384, 387, 388, 390, 394, 399, 412, 414, 416, 450, 452, 503, 677, 838, 882, 932, 978, 981, 986, 989, 991, 992, 1003, 1009, 1010, 1014, 1018, 1038, 1045], "arrang": [21, 283, 632, 832, 833, 834, 835, 989], "genom": [21, 513], "rearrang": [21, 22, 406], "kemaleren": [21, 22], "make_checkerboard": [21, 511, 1033], "uniform": [21, 32, 38, 54, 125, 126, 129, 146, 154, 159, 162, 180, 181, 215, 227, 230, 233, 270, 288, 291, 292, 297, 301, 308, 310, 311, 314, 321, 323, 339, 384, 387, 409, 438, 439, 551, 569, 570, 610, 611, 628, 639, 649, 650, 654, 668, 676, 677, 678, 699, 721, 722, 727, 744, 745, 747, 749, 750, 752, 784, 789, 790, 802, 810, 812, 836, 837, 840, 843, 844, 851, 852, 866, 878, 880, 890, 926, 940, 978, 979, 988, 989, 992, 1037, 1039, 1041, 1045, 1047], "matshow": [21, 22, 67, 121, 148, 303, 502], "afterward": [21, 386, 535, 541, 825], "row_idx_shuffl": 21, "permut": [21, 22, 38, 82, 119, 121, 127, 142, 145, 150, 168, 169, 175, 217, 255, 262, 278, 311, 314, 330, 398, 404, 409, 416, 464, 496, 500, 504, 559, 560, 564, 565, 627, 630, 634, 679, 704, 705, 717, 735, 736, 754, 756, 794, 815, 817, 826, 827, 861, 875, 906, 909, 910, 938, 960, 963, 989, 1003, 1011, 1020, 1023, 1027, 1031, 1037, 1044, 1046], "col_idx_shuffl": 21, "redefin": [21, 126, 171], "lost": [21, 58, 83, 377, 383, 394, 986, 989], "ground": [21, 33, 41, 46, 50, 58, 59, 62, 79, 83, 87, 99, 129, 161, 185, 195, 201, 202, 240, 253, 265, 354, 396, 408, 409, 703, 704, 705, 708, 712, 713, 714, 715, 717, 718, 721, 722, 723, 727, 728, 729, 733, 735, 736, 737, 738, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 782, 783, 784, 785, 786, 789, 790, 794, 795, 989, 1002, 1016, 1024, 1039], "truth": [21, 33, 41, 46, 50, 58, 59, 62, 79, 83, 87, 99, 104, 129, 161, 185, 195, 201, 202, 240, 253, 265, 354, 396, 408, 409, 703, 704, 705, 708, 712, 713, 714, 715, 717, 718, 721, 722, 723, 725, 727, 728, 729, 733, 735, 736, 737, 738, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 782, 783, 784, 785, 786, 789, 790, 794, 795, 989, 1016, 1024, 1039, 1045], "consensus_scor": [21, 22, 406, 1033], "biclusters_": [21, 22, 424, 451, 453], "consensu": [21, 22, 38, 381, 382, 397, 406, 409, 649, 671, 678, 679, 719, 989], "perfect": [21, 27, 38, 71, 82, 99, 101, 197, 201, 353, 354, 382, 386, 409, 413, 553, 554, 690, 694, 704, 705, 708, 717, 725, 727, 730, 736, 742, 755, 756, 784, 785, 794, 985, 989, 992, 1004, 1014, 1023, 1045], "ascend": [21, 72, 173, 313, 416, 450, 456, 627, 635, 913, 914, 915, 1003, 1041, 1047], "column_labels_": [21, 22, 406, 451, 453], "reorder": [21, 46, 103, 396, 697, 718, 1010, 1039], "reordered_row": 21, "reordered_data": 21, "step": [21, 27, 34, 43, 55, 56, 59, 68, 71, 72, 73, 74, 75, 82, 87, 99, 104, 113, 118, 122, 123, 124, 133, 147, 148, 149, 155, 158, 171, 173, 201, 209, 219, 231, 232, 235, 241, 244, 253, 260, 263, 269, 271, 285, 287, 288, 293, 301, 304, 309, 312, 313, 318, 321, 332, 336, 340, 354, 355, 358, 364, 368, 371, 377, 380, 381, 382, 384, 386, 387, 390, 394, 396, 406, 407, 409, 411, 412, 414, 416, 417, 418, 442, 447, 449, 536, 537, 538, 539, 546, 563, 588, 589, 591, 593, 594, 597, 606, 627, 644, 648, 666, 667, 669, 676, 678, 679, 680, 694, 700, 796, 797, 798, 801, 802, 812, 832, 833, 834, 835, 857, 858, 859, 861, 862, 864, 901, 902, 903, 904, 906, 907, 937, 938, 960, 964, 979, 985, 988, 993, 994, 999, 1003, 1005, 1006, 1009, 1013, 1021, 1025, 1031, 1035, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1047], "outer": [21, 101, 267, 329, 451, 514, 640, 650, 651, 654, 981, 1032], "product": [21, 72, 96, 134, 153, 158, 172, 344, 364, 368, 384, 385, 388, 391, 403, 406, 414, 416, 451, 538, 540, 547, 582, 589, 590, 591, 613, 614, 633, 640, 664, 665, 685, 686, 760, 762, 774, 776, 873, 876, 893, 894, 939, 978, 981, 985, 987, 999, 1001, 1003, 1004, 1009, 1014, 1039], "shade": [21, 54, 184, 288, 293, 336, 414], "481": [21, 23, 162, 1011], "plot_spectral_biclust": [21, 23, 1011], "silhouett": [21, 37, 38, 39, 50, 58, 59, 66, 69, 168, 354, 382, 447, 512, 791, 792, 1011, 1031, 1035], "propag": [21, 33, 37, 38, 50, 56, 64, 65, 69, 90, 148, 168, 239, 326, 333, 377, 408, 440, 454, 502, 512, 514, 697, 704, 705, 713, 714, 717, 718, 736, 792, 794, 861, 875, 896, 897, 898, 955, 956, 993, 1011, 1012, 1026, 1027, 1031, 1043, 1046], "make_biclust": [22, 513, 1033], "implant": 22, "row_idx": [22, 201], "col_idx": 22, "fit_data": 22, "318": [22, 23, 450, 1011], "plot_spectral_coclust": [22, 23, 1011], "366": 23, "being": [25, 28, 35, 46, 53, 56, 83, 87, 91, 101, 113, 117, 130, 153, 158, 171, 173, 177, 195, 237, 240, 256, 262, 304, 311, 312, 340, 344, 353, 355, 380, 381, 382, 384, 386, 387, 394, 396, 397, 403, 409, 411, 413, 416, 417, 418, 419, 420, 422, 441, 442, 444, 445, 450, 456, 469, 475, 493, 523, 569, 640, 649, 656, 672, 674, 687, 690, 694, 712, 718, 728, 733, 735, 782, 788, 796, 841, 842, 847, 849, 851, 852, 853, 876, 894, 939, 978, 979, 985, 988, 989, 992, 995, 996, 997, 999, 1001, 1003, 1004, 1005, 1031, 1032, 1037, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048], "postprocess": [25, 407, 535, 541], "brier": [25, 26, 407, 709], "brier_scor": 25, "sigmoid": [25, 26, 27, 28, 374, 416, 437, 452, 535, 561, 620, 639, 643, 764, 773, 776, 858, 859, 903, 904, 905, 906, 907, 994, 1004, 1027, 1044, 1048], "isoton": [25, 26, 74, 76, 168, 225, 229, 245, 371, 437, 657, 924, 1011, 1012, 1027, 1032, 1033, 1034, 1035, 1037, 1044, 1047], "belong": [25, 28, 31, 56, 61, 240, 262, 317, 323, 329, 376, 377, 406, 407, 409, 410, 412, 413, 416, 424, 440, 443, 447, 448, 449, 451, 453, 523, 712, 730, 805, 811, 822, 848, 868, 882, 945, 946, 985, 988, 989, 991, 992, 993, 995, 1004, 1009, 1016, 1023], "mblondel": [25, 49, 192, 223, 263, 353, 376, 508], "telecom": [25, 26, 43, 230, 1014], "balaz": [25, 1035], "kegl": [25, 1035], "jhm": [25, 26, 27, 28, 153, 154, 156, 157, 158, 159, 160, 162, 236], "informatik": [25, 26, 27, 28, 153, 154, 156, 157, 158, 159, 160, 162, 236, 989], "uni": [25, 26, 27, 28, 75, 117, 153, 154, 156, 157, 158, 159, 160, 162, 192, 235, 236, 329, 348], "bremen": [25, 26, 27, 28, 153, 154, 156, 157, 158, 159, 160, 162, 236], "make_blob": [25, 27, 34, 39, 43, 44, 45, 50, 56, 57, 58, 60, 61, 63, 64, 65, 92, 193, 213, 230, 250, 310, 318, 321, 338, 341, 342, 349, 378, 384, 385, 416, 515, 1039, 1042, 1045], "50000": 25, "n_bin": [25, 26, 28, 54, 201, 219, 308, 310, 314, 438, 439, 866, 999], "calibration_curv": [25, 407, 437, 438, 1040, 1045], "blob": [25, 34, 35, 43, 45, 58, 63, 65, 92, 409, 448, 512, 1036], "sample_weight": [25, 182, 201, 214, 219, 237, 318, 323, 324, 350, 382, 396, 400, 409, 416, 420, 426, 432, 437, 443, 444, 447, 449, 459, 460, 465, 469, 482, 483, 484, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 610, 611, 632, 633, 634, 635, 637, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 697, 698, 700, 702, 703, 707, 708, 709, 712, 713, 716, 718, 720, 721, 722, 723, 725, 726, 727, 728, 729, 733, 734, 737, 738, 739, 740, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 781, 782, 783, 784, 786, 787, 788, 789, 790, 793, 795, 798, 812, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 846, 848, 851, 852, 858, 859, 861, 866, 880, 881, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 915, 949, 977, 989, 1003, 1004, 1005, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047], "sw_train": [25, 318], "sw_test": [25, 318], "calibratedclassifiercv": [25, 26, 27, 364, 396, 400, 407, 676, 978, 1004, 1010, 1035, 1037, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "brier_score_loss": [25, 26, 407, 989, 1039, 1040, 1041], "gaussiannb": [25, 26, 28, 32, 135, 264, 364, 407, 416, 437, 569, 836, 837, 838, 840, 862, 983, 990, 991, 1035, 1036, 1037, 1039, 1044, 1047], "With": [25, 35, 45, 68, 76, 91, 101, 130, 146, 168, 172, 201, 203, 229, 231, 236, 238, 244, 245, 262, 289, 368, 371, 377, 382, 384, 396, 409, 410, 413, 416, 418, 437, 439, 501, 582, 632, 633, 658, 859, 862, 864, 875, 881, 882, 908, 910, 982, 985, 986, 989, 990, 992, 993, 996, 1003, 1005, 1011, 1016, 1017, 1024, 1028, 1034, 1038, 1039, 1041, 1043, 1045], "itself": [25, 50, 56, 113, 126, 129, 172, 185, 199, 237, 243, 271, 285, 314, 340, 354, 368, 370, 381, 382, 384, 386, 396, 400, 408, 409, 420, 440, 441, 444, 445, 446, 469, 470, 471, 472, 473, 474, 475, 476, 527, 531, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 551, 566, 569, 583, 592, 595, 596, 598, 599, 600, 602, 603, 639, 640, 641, 642, 643, 645, 655, 689, 691, 791, 792, 836, 837, 838, 839, 840, 841, 842, 846, 854, 855, 866, 867, 868, 896, 897, 946, 981, 985, 986, 988, 992, 993, 997, 1009, 1035, 1046], "prob_pos_clf": 25, "predict_proba": [25, 26, 27, 28, 31, 35, 131, 135, 150, 154, 155, 156, 157, 237, 271, 283, 301, 309, 312, 317, 319, 353, 384, 389, 396, 407, 408, 416, 437, 438, 549, 550, 551, 553, 555, 557, 559, 561, 564, 567, 569, 593, 594, 610, 619, 620, 622, 623, 631, 632, 633, 658, 659, 676, 698, 700, 702, 740, 741, 787, 796, 797, 798, 801, 802, 812, 822, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 843, 851, 858, 861, 868, 896, 897, 898, 903, 906, 909, 911, 985, 989, 991, 993, 996, 1002, 1003, 1004, 1005, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "clf_isoton": 25, "prob_pos_isoton": 25, "clf_sigmoid": 25, "prob_pos_sigmoid": 25, "clf_score": 25, "No": [25, 115, 128, 185, 193, 207, 209, 210, 237, 328, 345, 348, 359, 379, 390, 394, 399, 409, 474, 559, 560, 590, 591, 635, 645, 664, 676, 678, 685, 686, 796, 985], "clf_isotonic_scor": 25, "clf_sigmoid_scor": 25, "084": 25, "y_uniqu": 25, "rainbow": [25, 224], "this_i": [25, 207], "this_x": [25, 199, 207, 1023], "this_sw": 25, "lexsort": 25, "linewidth": [25, 34, 35, 38, 41, 59, 74, 79, 87, 93, 114, 126, 130, 153, 157, 161, 190, 191, 195, 196, 197, 199, 202, 204, 207, 215, 218, 230, 238, 240, 271, 275, 291, 295, 308, 318, 324, 338, 339, 341, 346, 360, 1021], "51": [25, 158, 219, 280, 285, 409, 410, 780, 985], "uncalibr": [25, 26, 27, 437], "gnb": [25, 26, 28, 135, 416, 569, 991], "plot_calibr": [25, 29, 1011], "metadata": [25, 111, 168, 182, 229, 245, 354, 371, 376, 377, 403, 423, 426, 429, 432, 433, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 489, 496, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 945, 946, 947, 948, 949, 973, 989, 1009, 1010, 1011, 1016, 1027, 1047], "rout": [25, 111, 168, 182, 229, 245, 371, 423, 426, 429, 432, 433, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 946, 947, 948, 949, 973, 1011, 1027, 1045, 1047], "votingclassifi": [25, 27, 28, 112, 137, 168, 210, 288, 359, 400, 504, 564, 570, 631, 658, 839, 843, 906, 909, 978, 979, 1011, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1048], "reliabl": [26, 28, 407, 413, 438, 439, 646, 1005, 1014], "diagram": [26, 28, 72, 242, 318, 324, 384, 407, 409, 438, 439, 468, 899, 999, 1042, 1043, 1048], "redund": [26, 28, 107, 149, 248, 253, 324, 364, 378, 381, 382, 387, 396, 407, 515, 634, 1010, 1025, 1043], "uninform": [26, 28, 314, 378, 387, 417, 978, 985, 1039], "rest": [26, 31, 123, 127, 168, 179, 185, 210, 216, 220, 237, 240, 250, 280, 317, 331, 337, 349, 388, 396, 408, 419, 512, 610, 631, 644, 658, 659, 676, 753, 787, 829, 830, 831, 850, 901, 903, 906, 985, 989, 990, 993, 996, 1004, 1011, 1014, 1035, 1036, 1045, 1046, 1047], "make_classif": [26, 28, 32, 92, 117, 118, 120, 147, 149, 259, 265, 273, 274, 295, 301, 309, 317, 319, 323, 348, 364, 378, 385, 405, 437, 438, 512, 553, 555, 557, 564, 666, 697, 698, 700, 702, 820, 825, 831, 858, 861, 901, 978, 989, 990, 999, 1004, 1037, 1038, 1039, 1041], "100_000": [26, 28, 171], "n_inform": [26, 28, 32, 92, 117, 120, 147, 149, 180, 185, 204, 205, 259, 265, 275, 295, 301, 309, 317, 348, 384, 387, 515, 524, 553, 554, 555, 556, 564, 565, 665, 831, 990, 1039], "n_redund": [26, 28, 32, 92, 120, 147, 149, 259, 265, 295, 301, 309, 387, 437, 515, 553, 555, 564, 831], "logisticregress": [26, 28, 31, 72, 74, 118, 135, 141, 149, 150, 184, 191, 192, 193, 194, 208, 216, 217, 231, 232, 242, 244, 265, 271, 304, 309, 317, 318, 319, 320, 321, 323, 353, 368, 382, 384, 388, 390, 395, 400, 407, 410, 416, 418, 438, 567, 569, 597, 631, 634, 643, 652, 659, 672, 673, 674, 675, 676, 687, 700, 787, 812, 820, 832, 833, 835, 886, 887, 889, 890, 891, 892, 908, 933, 985, 989, 990, 999, 1003, 1004, 1021, 1023, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "baselin": [26, 113, 123, 126, 136, 150, 174, 180, 219, 272, 283, 319, 354, 379, 409, 418, 551, 552, 634, 989, 992, 1025, 1047], "regular": [26, 32, 37, 41, 58, 60, 61, 62, 69, 72, 74, 80, 101, 112, 122, 124, 125, 127, 131, 137, 139, 142, 153, 154, 155, 157, 160, 162, 165, 168, 170, 179, 180, 181, 183, 185, 186, 188, 189, 190, 192, 196, 197, 199, 201, 208, 215, 217, 219, 220, 236, 248, 256, 258, 263, 264, 266, 275, 290, 291, 300, 302, 303, 304, 305, 309, 310, 312, 313, 314, 332, 335, 337, 339, 340, 341, 344, 345, 349, 350, 351, 353, 355, 358, 368, 382, 394, 395, 407, 409, 411, 412, 414, 415, 416, 419, 437, 443, 447, 471, 472, 476, 478, 479, 480, 481, 504, 512, 514, 515, 520, 522, 524, 528, 538, 539, 540, 543, 547, 548, 550, 559, 561, 562, 588, 589, 591, 638, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 689, 693, 734, 740, 749, 796, 797, 815, 827, 828, 858, 859, 862, 881, 901, 902, 903, 904, 906, 907, 908, 978, 979, 981, 982, 983, 986, 988, 994, 995, 999, 1002, 1003, 1004, 1011, 1012, 1014, 1020, 1021, 1023, 1027, 1031, 1032, 1033, 1035, 1036, 1040, 1041, 1043, 1044], "logist": [26, 28, 31, 70, 72, 73, 76, 77, 91, 105, 107, 118, 141, 168, 179, 186, 188, 196, 198, 199, 205, 206, 207, 210, 212, 218, 220, 231, 233, 242, 244, 270, 273, 274, 283, 296, 302, 303, 304, 312, 321, 336, 337, 348, 349, 353, 396, 397, 407, 410, 416, 418, 419, 437, 489, 496, 502, 504, 512, 541, 559, 561, 571, 610, 631, 646, 657, 658, 659, 666, 668, 676, 740, 798, 812, 827, 857, 858, 859, 861, 881, 908, 924, 926, 989, 993, 994, 1003, 1004, 1011, 1012, 1014, 1021, 1027, 1035, 1038, 1039, 1041, 1042], "guid": [26, 56, 70, 96, 119, 162, 168, 171, 172, 189, 222, 269, 291, 292, 295, 313, 317, 318, 319, 320, 321, 322, 323, 324, 371, 380, 381, 382, 387, 388, 389, 395, 396, 397, 400, 408, 410, 416, 420, 421, 422, 423, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 698, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 915, 934, 989, 990, 1018, 1025, 1031, 1032, 1033, 1034, 1036, 1038, 1040, 1041, 1048], "gridspec": [26, 28, 66, 247, 389], "calibrationdisplai": [26, 28, 407, 1044, 1045], "lr": [26, 28, 118, 135, 136, 204, 216, 232, 233, 258, 265, 395, 400, 416, 568, 569, 570, 712], "gnb_isoton": 26, "gnb_sigmoid": 26, "clf_list": [26, 28], "get_cmap": [26, 28, 345], "dark2": [26, 28, 223], "ax_calibration_curv": [26, 28], "calibration_displai": [26, 28], "histogram": [26, 28, 54, 112, 118, 124, 137, 168, 201, 234, 261, 263, 268, 290, 307, 319, 324, 407, 490, 559, 560, 561, 562, 564, 565, 642, 757, 758, 798, 803, 981, 987, 999, 1011, 1026, 1027, 1043, 1046, 1048], "grid_posit": [26, 28], "y_prob": [26, 28, 156, 438, 439, 709, 832, 858, 989, 1045], "poorli": [26, 63, 79, 87, 116, 128, 226, 369, 409, 416, 528, 630, 985, 986, 1037], "violat": [26, 340, 390, 394, 396, 635, 925, 996, 1003, 1005], "typic": [26, 28, 100, 111, 124, 177, 185, 201, 205, 219, 236, 264, 265, 269, 271, 272, 291, 292, 319, 340, 354, 368, 375, 376, 377, 380, 384, 385, 386, 391, 395, 396, 407, 408, 409, 410, 413, 414, 416, 417, 419, 443, 447, 449, 496, 551, 553, 555, 556, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 629, 638, 640, 643, 654, 655, 656, 671, 682, 683, 712, 868, 875, 879, 882, 937, 938, 946, 949, 974, 978, 982, 985, 986, 988, 989, 990, 991, 995, 997, 1014, 1025, 1040, 1044, 1047], "transpos": [26, 262, 421, 526, 538, 540, 547, 660, 661, 662, 663, 787, 938, 975, 981, 989, 1001, 1024, 1031, 1045], "nearli": [26, 265, 377, 396, 408, 763, 989, 992, 1001, 1025], "albeit": 26, "strongli": [26, 28, 83, 87, 99, 123, 127, 171, 183, 216, 237, 268, 353, 382, 398, 399, 407, 416, 658, 735, 794, 985, 986, 1027, 1040, 1047], "plenti": 26, "greater": [26, 93, 113, 115, 171, 218, 235, 240, 250, 268, 283, 291, 292, 358, 368, 378, 387, 396, 407, 409, 412, 416, 441, 445, 449, 452, 463, 472, 536, 541, 557, 558, 559, 560, 561, 562, 564, 565, 566, 593, 594, 597, 610, 611, 628, 640, 642, 645, 664, 666, 667, 671, 676, 677, 678, 692, 709, 712, 720, 734, 735, 738, 741, 787, 794, 796, 797, 831, 843, 844, 851, 852, 858, 859, 864, 879, 891, 895, 898, 901, 902, 909, 910, 911, 912, 938, 978, 984, 985, 986, 989, 990, 995, 999, 1004, 1005, 1034, 1039, 1042, 1044, 1045, 1046, 1048], "exploit": [26, 283, 990, 1010, 1034], "f1_score": [26, 269, 331, 377, 737, 989, 1031, 1033, 1034, 1035, 1036, 1040, 1041, 1047, 1048], "log_loss": [26, 27, 125, 128, 154, 312, 331, 353, 396, 407, 416, 557, 559, 561, 564, 646, 658, 676, 909, 911, 978, 985, 989, 1003, 1005, 1033, 1035, 1037, 1045, 1046, 1047, 1048], "precision_scor": [26, 269, 708, 786, 989, 1031, 1033, 1034, 1035, 1036, 1041, 1047], "recall_scor": [26, 269, 413, 708, 783, 989, 1031, 1033, 1034, 1035, 1036, 1041, 1047], "roc_auc_scor": [26, 150, 262, 271, 317, 324, 702, 706, 707, 708, 788, 989, 1033, 1034, 1039, 1041, 1045, 1046], "score_nam": [26, 38, 236, 264, 277, 323, 354, 804, 820], "score_df": 26, "set_index": [26, 113, 126, 158, 190, 219, 262, 313, 354], "decim": [26, 159, 471, 472, 914, 1038, 1039], "098932": 26, "323200": 26, "937443": 26, "871965": 26, "851348": 26, "861533": 26, "117608": 26, "782755": 26, "940374": 26, "857400": 26, "875941": 26, "866571": 26, "098332": 26, "370738": 26, "938613": 26, "883065": 26, "836224": 26, "859007": 26, "108880": 26, "368896": 26, "940201": 26, "861106": 26, "871277": 26, "866161": 26, "refin": [26, 83, 472, 709, 989, 1025], "alter": [26, 166, 384, 396, 728, 729, 737, 782, 783, 786, 1036, 1040, 1043], "uncertainti": [26, 153, 160, 180, 264, 407, 409, 567, 568, 643, 861, 979, 1001], "linearsvc": [26, 28, 71, 73, 146, 147, 168, 177, 235, 259, 261, 269, 309, 317, 335, 337, 341, 342, 348, 351, 353, 368, 384, 388, 407, 417, 418, 437, 512, 567, 577, 631, 639, 643, 652, 672, 673, 674, 675, 676, 687, 734, 741, 824, 829, 902, 903, 906, 908, 985, 989, 990, 1004, 1011, 1031, 1032, 1033, 1037, 1039, 1042, 1047], "naivelycalibratedlinearsvc": [26, 28], "df_min_": [26, 28], "df_max_": [26, 28], "calibrated_df": [26, 28], "proba_pos_class": [26, 28], "clip": [26, 28, 219, 233, 307, 340, 635, 676, 740, 871, 999, 1035, 1042, 1043], "proba_neg_class": [26, 28], "proba": [26, 28, 135, 437, 909, 911], "dual": [26, 28, 71, 73, 146, 147, 177, 235, 259, 261, 269, 309, 317, 337, 338, 348, 353, 417, 418, 471, 472, 478, 567, 568, 611, 639, 646, 647, 652, 653, 658, 659, 660, 661, 662, 663, 681, 684, 734, 829, 841, 842, 901, 902, 903, 906, 989, 990, 1004, 1033, 1042, 1045, 1047], "svc_isoton": 26, "svc_sigmoid": 26, "opposit": [26, 28, 54, 68, 101, 171, 172, 190, 269, 396, 407, 411, 413, 418, 443, 447, 449, 469, 538, 540, 547, 563, 712, 729, 847, 905, 1031], "behavior": [26, 28, 38, 40, 53, 149, 165, 168, 171, 172, 201, 219, 237, 253, 255, 265, 267, 278, 303, 304, 307, 309, 314, 340, 364, 369, 376, 379, 382, 384, 386, 390, 391, 396, 407, 409, 413, 417, 536, 551, 566, 666, 667, 668, 676, 677, 678, 699, 701, 728, 729, 782, 783, 786, 799, 800, 803, 815, 816, 817, 818, 819, 838, 874, 901, 902, 978, 985, 990, 995, 999, 1004, 1011, 1014, 1016, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "hing": [26, 208, 211, 213, 270, 337, 338, 342, 344, 396, 666, 676, 734, 901, 908, 985, 1003, 1004, 1025], "focus": [26, 79, 190, 280, 377, 394, 986, 999, 1009], "far": [26, 61, 83, 123, 154, 160, 171, 201, 219, 340, 344, 353, 355, 382, 391, 419, 720, 881, 964, 994, 995, 1004, 1014, 1023], "awai": [26, 27, 28, 61, 79, 122, 153, 154, 158, 204, 344, 345, 377, 407, 419, 628, 843, 844, 851, 852, 988, 989, 1004, 1023], "shown": [26, 49, 58, 90, 111, 115, 119, 126, 162, 170, 172, 185, 191, 199, 219, 227, 230, 235, 240, 249, 262, 265, 268, 271, 280, 290, 302, 303, 307, 308, 309, 327, 348, 353, 354, 382, 387, 397, 407, 409, 410, 413, 414, 415, 417, 419, 438, 460, 632, 698, 700, 701, 702, 713, 798, 812, 913, 915, 984, 985, 986, 989, 992, 997, 999, 1003, 1004, 1005, 1025, 1035, 1040, 1041, 1042, 1045], "varieti": [26, 165, 249, 313, 340, 390, 394, 408, 409, 411, 417, 643, 992, 1005, 1009, 1014, 1033, 1046, 1047], "niculescu": [26, 28, 407, 437, 439], "mizil": [26, 28, 407, 437, 439], "caruana": [26, 28, 407, 437, 439], "144943": 26, "465660": 26, "937597": 26, "872186": 26, "851792": 26, "861868": 26, "099820": 26, "376999": 26, "936480": 26, "853174": 26, "877981": 26, "865400": 26, "098758": 26, "321301": 26, "937532": 26, "873724": 26, "848743": 26, "861053": 26, "deal": [26, 58, 72, 165, 171, 185, 226, 280, 344, 355, 382, 387, 410, 417, 418, 419, 474, 496, 703, 708, 762, 786, 867, 938, 985, 1014, 1022, 1034, 1046, 1047], "situat": [26, 45, 58, 73, 170, 171, 207, 230, 265, 382, 390, 411, 413, 414, 416, 468, 528, 534, 582, 874, 877, 889, 899, 983, 985, 991, 992, 1002, 1005, 1039], "icml": [26, 28, 407, 409, 417, 437, 439, 836, 838, 857, 989, 991, 1003, 1008], "2005": [26, 28, 82, 379, 407, 437, 439, 850, 985, 992, 1002], "plot_calibration_curv": [26, 29, 1011], "simplex": [27, 670, 796, 876], "arrow": [27, 1045], "green": [27, 82, 93, 116, 130, 135, 153, 177, 227, 302, 308, 312, 318, 324, 396, 990, 1039, 1040, 1042, 1043], "600": [27, 51, 124, 132, 133, 377, 680], "x_train_valid": 27, "y_train_valid": 27, "cluster_std": [27, 39, 45, 50, 56, 57, 58, 60, 61, 63, 64, 65, 213, 230, 250, 310, 342, 512], "x_valid": 27, "y_valid": 27, "randomforestclassifi": [27, 28, 32, 57, 117, 118, 119, 120, 121, 122, 135, 173, 174, 242, 243, 259, 274, 317, 319, 324, 353, 364, 395, 396, 407, 416, 418, 557, 558, 559, 561, 566, 567, 569, 801, 802, 831, 911, 978, 979, 990, 1014, 1028, 1035, 1036, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048], "concaten": [27, 35, 40, 51, 62, 70, 73, 77, 82, 115, 129, 146, 161, 168, 180, 183, 215, 223, 230, 247, 251, 252, 258, 267, 268, 269, 270, 271, 272, 290, 304, 311, 314, 328, 339, 343, 353, 410, 464, 467, 504, 509, 531, 537, 541, 542, 599, 780, 798, 860, 861, 863, 866, 874, 906, 990, 1011, 1020, 1032], "randomforestclassifierifittedrandomforestclassifi": [27, 120, 121, 324], "cal_clf": 27, "prefit": [27, 396, 407, 418, 437, 567, 568, 597, 1010, 1043, 1044, 1045], "x27": [27, 72, 73, 118, 133, 136, 147, 171, 172, 173, 231, 232, 241, 242, 244, 252, 260, 262, 263, 269, 274, 304, 313, 318, 319, 321, 329], "calibratedclassifiercvifittedcalibratedclassifiercv": 27, "randomforestclassifierrandomforestclassifi": [27, 173, 242, 274], "clf_prob": 27, "cal_clf_prob": 27, "head_width": 27, "ro": 27, "bo": [27, 1043], "unit": [27, 71, 81, 171, 177, 201, 219, 290, 303, 307, 354, 377, 382, 383, 384, 388, 390, 391, 414, 417, 421, 464, 489, 490, 519, 524, 532, 533, 534, 541, 542, 589, 590, 591, 607, 608, 611, 658, 659, 676, 685, 699, 769, 848, 857, 858, 859, 865, 871, 873, 877, 879, 881, 887, 888, 889, 891, 892, 901, 902, 985, 987, 988, 989, 994, 999, 1005, 1009, 1023, 1035, 1039, 1045, 1046], "mid": [27, 340, 989, 991], "frac": [27, 81, 82, 113, 262, 269, 271, 320, 406, 407, 409, 411, 414, 415, 416, 417, 419, 432, 463, 465, 482, 483, 484, 554, 556, 558, 560, 562, 565, 568, 570, 611, 615, 619, 622, 623, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 678, 679, 680, 696, 754, 768, 834, 835, 844, 852, 859, 902, 904, 907, 910, 912, 981, 983, 984, 985, 986, 987, 989, 991, 992, 993, 994, 996, 997, 999, 1001, 1003, 1004, 1005, 1023], "shrink": [27, 83, 96, 127, 172, 185, 196, 199, 205, 222, 251, 307, 348, 414, 559, 560, 676, 678, 848, 858, 859, 903, 904, 905, 906, 907, 992, 1004, 1023], "perfectli": [27, 38, 265, 276, 344, 398, 409, 416, 438, 567, 606, 704, 705, 715, 717, 735, 736, 756, 785, 794, 874, 984, 986, 989, 1004, 1044, 1045], "incur": [27, 619, 901, 1004, 1039], "decreas": [27, 40, 47, 56, 59, 67, 76, 130, 149, 150, 161, 171, 172, 174, 209, 233, 234, 264, 269, 275, 301, 309, 312, 317, 358, 368, 370, 382, 407, 409, 416, 441, 445, 463, 521, 534, 535, 541, 557, 558, 559, 560, 561, 562, 564, 565, 566, 602, 635, 636, 637, 676, 677, 678, 706, 712, 726, 781, 788, 858, 859, 909, 910, 911, 912, 978, 980, 981, 985, 986, 989, 992, 993, 996, 997, 1003, 1004, 1014, 1023, 1033, 1038, 1041, 1044], "cal_scor": 27, "549": 27, "p1d": 27, "p0": 27, "p1": [27, 135], "p2": [27, 135, 219], "calibrated_classifi": 27, "calibrated_classifiers_": [27, 407, 437], "this_p": 27, "sure": [27, 57, 194, 207, 237, 238, 364, 368, 369, 376, 380, 381, 382, 383, 384, 386, 387, 390, 394, 407, 410, 417, 493, 523, 649, 921, 922, 932, 975, 979, 986, 1003, 1009, 1010, 1038, 1039, 1041, 1046], "renorm": 27, "multiclass": [27, 31, 119, 179, 193, 217, 220, 231, 238, 240, 243, 255, 259, 267, 269, 272, 278, 281, 283, 302, 304, 337, 349, 358, 371, 377, 378, 384, 385, 387, 396, 400, 409, 416, 437, 452, 462, 489, 496, 504, 557, 559, 561, 564, 567, 568, 571, 594, 602, 610, 631, 632, 633, 658, 659, 666, 668, 673, 674, 675, 676, 702, 706, 708, 728, 729, 733, 734, 737, 742, 753, 782, 783, 786, 787, 788, 793, 798, 799, 801, 802, 803, 804, 812, 814, 816, 820, 821, 822, 823, 824, 825, 826, 827, 828, 868, 882, 901, 903, 906, 909, 911, 983, 985, 999, 1000, 1004, 1005, 1011, 1012, 1013, 1025, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1046, 1047, 1048], "argmax": [27, 104, 261, 275, 384, 416, 569, 829, 909, 1004, 1044], "417": [27, 29, 75, 77, 283, 1011], "plot_calibration_multiclass": [27, 29, 1011], "gave": [28, 407, 798, 801, 802, 812, 868], "four": [28, 146, 161, 177, 183, 202, 249, 250, 328, 337, 378, 382, 396, 557, 564, 719, 909, 911, 927, 985, 987, 988, 989, 999, 1008], "naiv": [28, 32, 131, 262, 264, 283, 353, 355, 371, 377, 407, 416, 417, 437, 544, 836, 837, 838, 839, 840, 983, 984, 992, 1012, 1027, 1031, 1032, 1033, 1034, 1039, 1041, 1044, 1046], "bay": [28, 32, 116, 131, 153, 190, 252, 264, 353, 371, 377, 407, 414, 416, 417, 536, 549, 550, 656, 836, 837, 838, 839, 840, 882, 983, 984, 985, 999, 1012, 1025, 1027, 1031, 1032, 1033, 1034, 1039, 1041, 1044, 1046], "train_sampl": [28, 216, 217], "against": [28, 38, 87, 106, 116, 127, 145, 177, 192, 193, 210, 218, 237, 271, 313, 317, 340, 377, 382, 397, 407, 409, 413, 417, 438, 509, 542, 548, 551, 676, 678, 754, 756, 787, 800, 805, 807, 826, 830, 955, 981, 985, 989, 990, 992, 1004, 1008, 1016], "rfc": [28, 243, 317, 1028], "contrast": [28, 105, 172, 203, 236, 262, 264, 294, 312, 354, 396, 407, 409, 412, 416, 419, 449, 452, 462, 619, 643, 812, 857, 979, 982, 984, 985, 989, 992, 994, 997, 999, 1002, 1003, 1005, 1041], "push": [28, 382, 386, 407, 1013], "equat": [28, 348, 382, 409, 414, 416, 557, 558, 559, 560, 564, 565, 566, 590, 627, 658, 659, 682, 683, 687, 762, 881, 909, 910, 911, 912, 979, 986, 989, 994, 1039], "twice": [28, 274, 353, 355, 384, 419, 619, 729, 731, 940, 1040, 1048], "approx": [28, 96, 235, 414, 416, 417, 989, 996, 1003], "rare": [28, 172, 313, 364, 386, 394, 396, 398, 407, 409, 413, 589, 648, 658, 659, 669, 680, 901, 926, 957, 985, 999, 1014, 1038, 1039, 1040, 1044, 1046], "explan": [28, 87, 237, 368, 381, 382, 407, 417, 978, 988, 990, 1005, 1014, 1034], "bag": [28, 71, 98, 112, 117, 119, 127, 128, 137, 168, 173, 209, 280, 354, 355, 378, 407, 408, 516, 517, 518, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 740, 803, 827, 910, 987, 990, 1011, 1012, 1027, 1031, 1033, 1034, 1035, 1036, 1037, 1044, 1045, 1047], "underli": [28, 57, 81, 132, 150, 174, 202, 204, 205, 237, 267, 289, 290, 344, 361, 369, 382, 394, 396, 398, 400, 405, 407, 409, 411, 413, 414, 415, 416, 418, 419, 437, 451, 452, 453, 462, 464, 465, 471, 472, 478, 524, 564, 565, 567, 568, 569, 570, 593, 594, 597, 602, 658, 659, 665, 668, 680, 691, 695, 798, 801, 802, 812, 822, 823, 824, 829, 830, 831, 832, 833, 834, 835, 844, 846, 901, 909, 910, 911, 912, 954, 985, 986, 990, 995, 1002, 1004, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1047, 1048], "restrict": [28, 67, 68, 74, 86, 165, 168, 191, 216, 218, 300, 305, 384, 388, 394, 407, 409, 416, 417, 465, 493, 502, 532, 581, 610, 653, 654, 655, 656, 658, 682, 683, 713, 781, 787, 788, 827, 849, 851, 852, 853, 855, 857, 858, 859, 861, 887, 989, 1005, 1011, 1026, 1027, 1031, 1033, 1041, 1043, 1048], "move": [28, 122, 263, 304, 340, 381, 382, 386, 388, 407, 409, 549, 550, 571, 572, 573, 575, 577, 578, 956, 1024, 1031, 1032, 1036, 1039, 1041, 1044, 1045], "characterist": [28, 45, 63, 150, 158, 168, 230, 231, 243, 255, 257, 259, 264, 269, 278, 307, 330, 364, 377, 379, 387, 407, 413, 416, 419, 503, 504, 623, 638, 658, 702, 706, 708, 726, 781, 787, 788, 817, 827, 830, 868, 906, 985, 1011], "difficult": [28, 56, 113, 171, 209, 240, 382, 390, 407, 414, 416, 553, 554, 559, 561, 562, 984, 986, 988, 992, 994, 996, 1005, 1014, 1031, 1045], "domingo": [28, 787, 989], "pazzani": 28, "proc": [28, 80, 407, 417, 450, 689, 693, 836, 978, 986, 991, 995], "13th": 28, "intl": [28, 413], "1996": [28, 409, 416, 420, 444, 516, 517, 518, 555, 556, 999], "zadrozni": [28, 407, 437, 676], "bianca": 28, "charl": [28, 763, 1031, 1034, 1037, 1041, 1043, 1046], "elkan": [28, 318, 407, 437, 443, 447, 459, 676, 1037, 1041, 1042, 1044, 1045], "vol": [28, 161, 185, 268, 379, 409, 474, 559, 560, 628, 635, 645, 664, 685, 686, 796, 826, 838, 979, 991, 992], "2001": [28, 158, 173, 261, 406, 409, 416, 437, 451, 452, 453, 462, 511, 559, 560, 564, 565, 628, 634, 639, 645, 691, 696, 734, 787, 882, 894, 926, 979, 981, 985, 989, 995, 997, 999, 1001, 1004], "plot_compare_calibr": [28, 29, 1011], "04": [29, 31, 41, 43, 55, 68, 69, 86, 98, 106, 137, 143, 150, 158, 171, 182, 200, 219, 238, 247, 253, 262, 263, 275, 278, 284, 298, 299, 325, 347, 351, 354, 379, 416, 418, 471, 472, 787, 798, 812, 985, 989, 993, 1003, 1011], "854": [29, 260], "built": [31, 87, 111, 113, 114, 122, 124, 173, 209, 265, 280, 298, 317, 359, 362, 368, 380, 382, 383, 384, 386, 388, 390, 391, 394, 395, 396, 399, 403, 408, 409, 410, 413, 416, 418, 445, 503, 553, 554, 555, 556, 559, 560, 561, 562, 588, 589, 593, 597, 639, 640, 641, 642, 643, 646, 647, 652, 658, 660, 661, 662, 663, 672, 673, 674, 675, 681, 801, 802, 809, 832, 835, 841, 842, 911, 912, 973, 985, 989, 990, 1002, 1003, 1005, 1009, 1014, 1025, 1031, 1034, 1035, 1037, 1043], "troubl": [31, 417], "ovr": [31, 193, 216, 280, 283, 317, 349, 658, 659, 787, 830, 901, 903, 906, 985, 989, 990, 1004, 1031, 1036, 1037, 1039, 1040, 1041, 1045, 1046], "gaussian_process": [31, 32, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 168, 371, 396, 419, 643, 990, 1011, 1034, 1037, 1038], "gaussianprocessclassifi": [31, 32, 154, 155, 156, 157, 161, 396, 419, 611, 619, 620, 622, 623, 990, 1037, 1039, 1041, 1045], "accuracy_scor": [31, 113, 154, 266, 312, 330, 353, 364, 395, 400, 405, 557, 564, 708, 728, 729, 733, 737, 782, 783, 786, 793, 795, 978, 989, 1032, 1033, 1034, 1043, 1048], "load_iri": [31, 42, 46, 75, 91, 100, 103, 105, 107, 122, 134, 142, 146, 155, 184, 194, 210, 244, 249, 256, 267, 268, 269, 271, 272, 288, 293, 296, 302, 317, 319, 322, 332, 336, 337, 340, 343, 359, 362, 395, 403, 409, 410, 413, 416, 418, 561, 567, 602, 610, 619, 620, 622, 623, 631, 658, 659, 787, 798, 801, 802, 804, 812, 829, 850, 896, 897, 898, 909, 911, 913, 914, 915, 979, 984, 989, 990, 991, 992, 996, 999, 1005, 1016, 1022, 1023, 1024, 1037, 1039, 1042], "saga": [31, 192, 216, 217, 658, 659, 672, 674, 687, 812, 985, 1038, 1040], "multi_class": [31, 193, 216, 271, 317, 569, 610, 658, 659, 787, 835, 901, 985, 990, 1004, 1031, 1035, 1039, 1044, 1046], "n_classifi": [31, 569, 570], "classifier_idx": 31, "class_of_interest": [31, 271, 631, 1048], "vmin": [31, 41, 83, 96, 99, 107, 156, 159, 180, 185, 192, 217, 235, 251, 257, 303, 340], "vmax": [31, 52, 83, 96, 99, 107, 156, 159, 180, 185, 192, 217, 235, 251, 257, 303, 340], "mask_y_pr": 31, "scalarmapp": 31, "viridi": [31, 39, 285, 697], "cax": [31, 156, 273], "orient": [31, 96, 171, 222, 307, 396, 913, 986], "horizont": [31, 96, 222, 235, 307, 310, 387, 396, 464, 515, 697, 701], "368": [31, 36, 1011], "plot_classification_prob": [31, 36, 1011], "20newgroup": [31, 168, 179, 193, 217, 220, 302, 304, 489, 571, 658, 827, 985, 1011], "mnist": [31, 168, 179, 192, 194, 209, 216, 220, 285, 300, 302, 305, 348, 496, 571, 658, 827, 858, 881, 924, 985, 993, 1011], "salt": [32, 235, 309, 1045], "convei": [32, 227, 309, 1023], "linearli": [32, 101, 115, 150, 171, 180, 215, 223, 230, 271, 272, 309, 312, 344, 353, 368, 379, 394, 414, 416, 515, 642, 707, 870, 871, 989, 992, 995, 1004, 1023, 1038, 1047], "transpar": [32, 309, 974, 1014], "ga\u00ebl": [32, 46, 52, 74, 90, 91, 103, 184, 198, 199, 309, 344, 345, 397, 1014], "modifi": [32, 46, 52, 74, 76, 90, 91, 184, 185, 198, 199, 211, 222, 223, 224, 237, 240, 249, 323, 345, 350, 380, 382, 384, 386, 396, 409, 416, 419, 443, 447, 454, 459, 468, 482, 483, 484, 485, 495, 510, 581, 610, 611, 613, 619, 676, 678, 689, 693, 728, 729, 767, 782, 783, 786, 919, 985, 1002, 1003, 1010, 1022, 1026, 1027, 1031, 1033, 1034, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1046], "listedcolormap": [32, 35, 122, 293, 296, 301, 309], "make_circl": [32, 45, 63, 101, 131, 227, 301, 302, 309, 329, 378, 1032, 1039, 1042], "make_moon": [32, 45, 63, 230, 262, 301, 302, 309, 378, 978, 1038, 1042], "discriminant_analysi": [32, 34, 35, 105, 223, 294, 364, 371, 405, 536, 850, 983, 990, 1031, 1034, 1035, 1036, 1037, 1038], "quadraticdiscriminantanalysi": [32, 35, 549, 983, 990, 992, 1031, 1036, 1038, 1046], "adaboostclassifi": [32, 115, 122, 400, 416, 554, 559, 561, 1033, 1034, 1037, 1038, 1040, 1041, 1044, 1046, 1047, 1048], "kneighborsclassifi": [32, 134, 141, 287, 288, 293, 294, 312, 319, 321, 353, 416, 602, 844, 848, 849, 850, 851, 852, 990, 992, 1023, 1031, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "neural_network": [32, 168, 172, 241, 300, 301, 302, 303, 304, 305, 370, 371, 394, 990, 993, 1011, 1033, 1048], "mlpclassifi": [32, 128, 141, 168, 208, 300, 301, 303, 305, 370, 502, 504, 514, 522, 571, 857, 859, 871, 990, 993, 1011, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "decisiontreeclassifi": [32, 113, 115, 122, 134, 266, 280, 323, 358, 359, 362, 396, 416, 553, 555, 557, 559, 561, 564, 631, 804, 825, 910, 911, 913, 914, 915, 979, 990, 1005, 1032, 1033, 1035, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "net": [32, 168, 179, 185, 187, 188, 192, 195, 212, 220, 234, 237, 275, 297, 388, 408, 413, 471, 472, 478, 501, 524, 557, 558, 559, 560, 564, 565, 566, 646, 647, 652, 657, 658, 659, 660, 661, 662, 663, 668, 676, 678, 681, 684, 857, 909, 910, 911, 912, 978, 989, 994, 1003, 1011, 1012, 1014, 1027, 1031, 1036, 1040, 1041, 1043], "qda": [32, 379, 549, 550, 1012, 1027, 1036], "025": [32, 203, 240, 259, 690, 694], "samm": [32, 113, 115, 122, 416, 553, 1047, 1048], "n_clusters_per_class": [32, 92, 117, 147, 149, 259, 295, 301, 309, 387, 515], "linearly_separ": [32, 301], "ds_cnt": [32, 309, 310], "rdbu": [32, 35, 96, 217, 301, 340, 345], "cm_bright": [32, 301, 309], "ff0000": [32, 293, 301], "0000ff": [32, 293, 301], "ep": [32, 45, 47, 50, 56, 66, 184, 186, 225, 234, 394, 409, 420, 444, 450, 455, 471, 472, 478, 631, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 681, 682, 683, 684, 690, 694, 714, 740, 853, 893, 894, 895, 1001, 1046, 1047], "lstrip": [32, 45, 63, 230, 301, 309], "039": [32, 36, 58, 69, 260, 750, 780, 989, 1011], "plot_classifier_comparison": [32, 36, 309, 1011], "versu": [32, 98, 112, 122, 131, 133, 137, 142, 155, 168, 171, 179, 210, 216, 220, 230, 235, 236, 238, 250, 255, 257, 278, 280, 291, 293, 301, 309, 326, 331, 333, 337, 338, 339, 344, 409, 413, 416, 419, 504, 534, 556, 610, 631, 639, 658, 659, 666, 668, 674, 675, 676, 677, 782, 798, 803, 823, 833, 862, 897, 898, 905, 906, 910, 978, 985, 989, 990, 995, 1002, 1003, 1004, 1011, 1023, 1039], "8x8": [33, 90, 192, 234, 294, 304, 379, 502, 1022], "grayscal": 33, "imread": 33, "load_digit": [33, 52, 53, 59, 73, 74, 90, 140, 141, 148, 192, 208, 223, 234, 235, 260, 261, 264, 270, 277, 287, 289, 294, 302, 304, 323, 327, 328, 388, 410, 445, 446, 532, 533, 534, 535, 599, 600, 638, 639, 668, 688, 689, 690, 691, 1016, 1020, 1021, 1022, 1023, 1024, 1037, 1042], "set_axis_off": 33, "gray_r": [33, 90, 99, 156, 223, 304, 327, 328, 1022], "entir": [33, 165, 201, 209, 304, 307, 318, 344, 362, 364, 376, 383, 384, 396, 403, 409, 413, 415, 417, 472, 492, 534, 588, 589, 590, 591, 647, 651, 653, 655, 658, 659, 661, 663, 665, 666, 668, 676, 682, 683, 733, 795, 829, 830, 833, 858, 860, 861, 874, 886, 887, 889, 890, 891, 892, 978, 979, 989, 999, 1003, 1005, 1023, 1040, 1041], "899": [33, 260], "confus": [33, 168, 231, 255, 271, 278, 327, 328, 353, 396, 468, 504, 631, 652, 697, 713, 715, 718, 728, 729, 737, 753, 783, 786, 827, 899, 906, 1011, 1025, 1031, 1032, 1036, 1040, 1041, 1043, 1044, 1045, 1046], "figure_": [33, 172, 241, 317, 319, 389, 438, 631, 632, 697, 698, 700, 701, 702, 804, 820], "confusion_matrix": [33, 231, 256, 327, 328, 697, 713, 753, 824, 989, 1025, 1032, 1037, 1038, 1041, 1042, 1044, 1048], "gt": [33, 72, 73, 118, 133, 171, 252, 260, 274, 380, 382, 386], "rebuilt": [33, 841, 842], "390": [33, 36, 215, 220, 353, 1011], "plot_digits_classif": [33, 36, 1011], "elimin": [33, 52, 90, 92, 139, 140, 144, 147, 150, 151, 168, 257, 261, 267, 289, 327, 328, 330, 408, 409, 413, 448, 502, 515, 593, 594, 597, 602, 658, 801, 802, 817, 906, 975, 989, 1011, 1012, 1014, 1027, 1031], "oracl": [34, 201, 219, 422, 469, 470, 473, 474, 475, 476, 983, 1031], "shrinkag": [34, 78, 80, 83, 84, 104, 128, 168, 296, 422, 469, 470, 473, 474, 475, 476, 477, 479, 480, 481, 539, 543, 549, 561, 562, 798, 985, 999, 1011, 1012, 1027, 1031, 1035, 1036, 1038], "lineardiscriminantanalysi": [34, 35, 105, 223, 294, 364, 405, 536, 550, 850, 983, 990, 992, 1031, 1034, 1035, 1036, 1037, 1038, 1040, 1043, 1045, 1046, 1047], "200": [34, 35, 45, 51, 55, 61, 76, 99, 115, 126, 132, 157, 187, 196, 202, 205, 206, 207, 213, 218, 223, 242, 247, 263, 269, 271, 272, 307, 310, 329, 339, 340, 361, 364, 377, 384, 394, 414, 416, 421, 440, 454, 468, 471, 472, 533, 534, 535, 538, 539, 540, 543, 547, 584, 649, 651, 671, 679, 692, 812, 858, 859, 899, 903, 904, 905, 906, 907, 1004], "n_averag": 34, "n_features_max": 34, "ish": 34, "acc_clf1": 34, "acc_clf2": 34, "acc_clf3": 34, "n_features_rang": 34, "score_clf1": 34, "score_clf2": 34, "score_clf3": 34, "clf1": [34, 134, 135, 416, 569], "lsqr": [34, 314, 549, 672, 674, 687, 983, 1032, 1038, 1045], "clf2": [34, 134, 135, 384, 403, 416, 569], "store_precis": [34, 80, 469, 470, 473, 474, 475, 476], "assume_cent": [34, 80, 411, 422, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480], "clf3": [34, 134, 135, 384, 416, 569], "covariance_estim": [34, 549, 983, 1043], "features_samples_ratio": 34, "gold": [34, 195, 202, 204, 207, 211, 215, 218, 248, 253, 269, 291, 339, 388], "navi": [34, 71, 80, 100, 105, 106, 132, 180, 204, 212, 225, 248, 249, 250, 253, 269, 271, 290, 297, 329, 361], "831": [34, 36, 1011], "plot_lda": [34, 36, 1011], "ledoitwolf": [34, 78, 80, 83, 84, 104, 128, 168, 296, 411, 469, 470, 474, 475, 476, 477, 798, 1011, 1035], "likelihood": [34, 58, 78, 80, 81, 82, 83, 84, 104, 128, 153, 154, 155, 157, 158, 159, 160, 162, 168, 189, 219, 251, 255, 262, 268, 278, 296, 304, 307, 384, 396, 407, 411, 414, 416, 419, 437, 469, 470, 471, 472, 473, 474, 475, 476, 477, 515, 532, 536, 541, 549, 550, 551, 610, 611, 631, 645, 658, 712, 740, 796, 797, 798, 824, 827, 846, 857, 877, 889, 903, 904, 906, 907, 985, 988, 991, 999, 1004, 1011, 1034, 1035, 1040, 1046], "neighborhood": [34, 56, 83, 87, 105, 141, 166, 168, 222, 247, 285, 286, 287, 288, 296, 297, 299, 379, 396, 409, 414, 420, 444, 446, 450, 457, 502, 504, 515, 541, 549, 628, 631, 696, 827, 843, 844, 847, 849, 850, 851, 852, 853, 855, 861, 862, 881, 986, 995, 1011, 1012, 1027, 1040], "doubl": [35, 119, 274, 382, 396, 414, 538, 540, 547, 841, 842, 852, 973, 979, 1004, 1005, 1031, 1041, 1042], "dispers": [35, 409, 710, 724, 985], "cov_class_1": 35, "cov_class_2": 35, "matric": [35, 40, 41, 81, 83, 96, 206, 248, 249, 251, 252, 253, 285, 298, 318, 331, 353, 354, 374, 376, 384, 385, 394, 395, 396, 409, 410, 411, 412, 414, 417, 418, 424, 450, 451, 453, 464, 473, 481, 482, 483, 484, 534, 535, 538, 540, 541, 544, 547, 549, 550, 555, 556, 563, 566, 581, 582, 589, 643, 658, 664, 672, 674, 687, 753, 759, 767, 773, 777, 778, 779, 780, 791, 796, 797, 827, 845, 848, 853, 864, 868, 870, 873, 876, 878, 879, 881, 884, 886, 888, 890, 891, 892, 893, 894, 903, 904, 906, 907, 917, 938, 944, 953, 960, 962, 963, 979, 981, 983, 986, 987, 988, 990, 992, 993, 1001, 1003, 1004, 1009, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "make_data": [35, 62], "share": [35, 86, 131, 171, 252, 353, 362, 364, 368, 369, 384, 390, 409, 414, 417, 549, 668, 704, 708, 796, 797, 801, 802, 983, 996, 1031, 1033, 1039, 1041, 1043, 1046], "spheric": [35, 58, 86, 129, 224, 249, 251, 252, 298, 378, 763, 796, 797, 985, 988, 992, 1009], "isotrop": [35, 56, 58, 62, 101, 155, 157, 222, 224, 409, 411, 419, 512, 519, 532, 615, 619, 620, 622, 623], "third": [35, 122, 127, 145, 150, 161, 219, 230, 253, 280, 290, 309, 323, 369, 377, 381, 394, 397, 417, 534, 588, 589, 590, 591, 800, 801, 802, 807, 843, 844, 845, 847, 849, 879, 891, 957, 978, 1000, 1007, 1031, 1042, 1047, 1048], "x_isotropic_covari": 35, "y_isotropic_covari": 35, "x_shared_covari": 35, "y_shared_covari": 35, "x_different_covari": 35, "y_different_covari": 35, "piec": [35, 48, 202, 369, 988], "misclassifi": [35, 113, 256, 344, 353, 1004], "mark": [35, 59, 93, 145, 166, 266, 273, 374, 382, 384, 386, 390, 391, 396, 409, 535, 607, 608, 611, 632, 658, 854, 855, 896, 897, 914, 928, 933, 938, 985, 1014, 1027, 1031, 1032, 1037, 1039, 1040, 1047], "star": [35, 93, 136, 382], "ellips": [35, 230, 247, 248, 249, 252, 253, 995], "mpl": [35, 247, 248, 249, 253, 307], "plot_ellips": [35, 247], "cov": [35, 83, 87, 115, 252, 382, 396, 399, 402, 412, 422, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 519, 532, 534, 541, 548], "linalg": [35, 55, 79, 80, 83, 102, 104, 106, 187, 247, 248, 249, 252, 253, 382, 388, 414, 451, 452, 453, 462, 532, 535, 541, 544, 657, 672, 674, 687, 691, 695, 936], "eigh": [35, 247, 248, 249, 252, 253, 414, 421, 533, 535, 1046], "arctan": [35, 248, 253, 378, 518], "180": [35, 236, 247, 248, 249, 252, 253, 294, 298, 354, 388, 502], "ell": [35, 247, 248, 249, 253, 406], "patch": [35, 51, 240, 247, 248, 249, 252, 253, 257, 377, 386, 394, 414, 416, 555, 556, 583, 584, 587, 1031, 1039], "set_clip_box": [35, 247, 248, 249, 252, 253], "set_alpha": [35, 247, 248, 249, 252, 253], "add_artist": [35, 223, 247, 248, 249, 252, 253], "plot_result": [35, 123, 247, 248, 253], "pcolormesh": [35, 131, 142, 184, 288, 293, 336, 340, 344, 631], "x_right": 35, "y_right": 35, "x_wrong": 35, "y_wrong": 35, "means_": [35, 247, 248, 249, 250, 252, 253, 549, 550, 796, 797], "yellow": [35, 93, 340, 990], "set_box_aspect": 35, "svd": [35, 102, 104, 131, 223, 354, 391, 405, 412, 421, 451, 453, 482, 483, 485, 532, 533, 534, 535, 539, 540, 541, 544, 546, 549, 550, 664, 672, 673, 674, 685, 686, 687, 860, 938, 983, 1025, 1033, 1037, 1038, 1044, 1046], "store_covari": [35, 549, 550, 1036, 1038], "ax_row": 35, "align": [35, 127, 166, 222, 247, 273, 355, 396, 689, 693, 981, 992, 1003, 1026, 1027, 1047, 1048], "perpendicular": [35, 345], "bisector": 35, "singl": [35, 40, 49, 53, 54, 56, 59, 62, 63, 73, 98, 112, 113, 114, 122, 123, 132, 137, 150, 153, 159, 165, 168, 172, 174, 177, 185, 201, 203, 205, 241, 243, 252, 258, 271, 280, 303, 321, 323, 340, 353, 354, 355, 359, 361, 364, 368, 369, 376, 377, 382, 387, 389, 390, 391, 394, 395, 396, 407, 408, 410, 412, 413, 414, 416, 417, 418, 434, 437, 440, 441, 445, 446, 447, 449, 454, 464, 466, 467, 493, 494, 496, 506, 509, 534, 553, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 582, 592, 599, 600, 602, 606, 627, 632, 634, 643, 666, 667, 673, 676, 677, 678, 690, 692, 694, 710, 721, 722, 723, 724, 735, 736, 737, 740, 773, 784, 796, 797, 798, 801, 802, 812, 819, 823, 824, 826, 827, 830, 838, 841, 842, 846, 858, 859, 860, 870, 871, 874, 875, 876, 881, 882, 896, 897, 909, 910, 911, 912, 917, 947, 953, 957, 976, 978, 984, 985, 986, 989, 990, 992, 994, 996, 997, 999, 1003, 1004, 1005, 1009, 1011, 1014, 1016, 1023, 1025, 1031, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "386": [35, 36, 877, 1011], "plot_lda_qda": [35, 36, 1011], "015": [36, 354, 358, 997], "modul": [37, 38, 50, 54, 78, 85, 89, 95, 96, 112, 144, 152, 162, 164, 168, 169, 176, 179, 216, 221, 222, 246, 255, 279, 280, 282, 286, 300, 302, 303, 306, 326, 335, 352, 357, 360, 376, 377, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 394, 396, 398, 399, 403, 407, 408, 409, 412, 416, 417, 418, 420, 444, 503, 535, 579, 580, 659, 930, 978, 983, 985, 987, 989, 990, 993, 995, 996, 999, 1001, 1003, 1005, 1006, 1014, 1019, 1020, 1025, 1032, 1033, 1034, 1036, 1037, 1041, 1043, 1045], "bisect": [37, 41, 58, 60, 61, 62, 69, 162, 168, 258, 443, 447, 512, 1011, 1045], "birch": [37, 41, 45, 62, 65, 69, 92, 168, 321, 370, 396, 446, 449, 512, 1011, 1026, 1027, 1035, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047], "linkag": [37, 40, 41, 42, 45, 48, 53, 56, 57, 58, 68, 69, 168, 174, 440, 441, 445, 446, 463, 512, 514, 522, 881, 1009, 1011, 1024, 1034, 1039, 1042], "dbscan": [37, 38, 39, 45, 56, 59, 61, 64, 66, 69, 168, 323, 329, 394, 396, 446, 450, 452, 455, 512, 704, 705, 717, 736, 792, 794, 853, 881, 992, 1011, 1026, 1027, 1031, 1033, 1035, 1036, 1038, 1039, 1040, 1047, 1048], "hdbscan": [37, 45, 50, 66, 69, 168, 234, 444, 512, 881, 979, 1009, 1011, 1026, 1027, 1047, 1048], "optic": [37, 45, 69, 168, 321, 375, 420, 444, 446, 455, 456, 457, 502, 1011, 1026, 1027, 1040, 1044, 1045, 1046, 1047, 1048], "affin": [37, 38, 45, 50, 56, 64, 65, 69, 168, 307, 329, 374, 384, 396, 408, 414, 440, 441, 452, 454, 462, 512, 535, 691, 695, 704, 705, 717, 736, 792, 794, 897, 983, 986, 989, 1011, 1026, 1027, 1031, 1032, 1035, 1041, 1042, 1044, 1046], "dendrogram": [37, 68, 69, 168, 174, 362, 409, 441, 445, 504, 1011, 1043], "embed": [37, 40, 42, 45, 47, 56, 57, 63, 69, 90, 118, 148, 153, 168, 177, 221, 224, 226, 228, 229, 245, 285, 294, 327, 328, 388, 396, 408, 409, 441, 452, 462, 489, 502, 544, 549, 566, 582, 639, 688, 689, 690, 691, 692, 693, 694, 695, 696, 850, 862, 871, 893, 894, 895, 981, 992, 995, 1001, 1006, 1009, 1011, 1026, 1027, 1031, 1032, 1042, 1043, 1045], "uniformli": [38, 119, 126, 145, 230, 247, 317, 384, 516, 517, 518, 551, 642, 802, 810, 812, 880, 978, 979, 989, 992, 999, 1035, 1040], "divid": [38, 44, 49, 92, 96, 147, 158, 201, 240, 247, 354, 364, 378, 379, 406, 409, 413, 414, 469, 470, 471, 472, 473, 474, 475, 476, 512, 519, 534, 541, 676, 677, 678, 719, 725, 733, 737, 755, 793, 795, 858, 859, 903, 906, 938, 941, 942, 978, 986, 988, 989, 992, 999, 1003, 1025, 1031, 1038, 1039, 1042], "quiroz": [38, 58, 119, 180, 185, 240, 263, 265, 312, 353, 354, 355], "fundament": [38, 50, 82, 354, 380, 395, 412, 496, 538, 540, 547, 708, 985, 989], "homogen": [38, 39, 40, 45, 47, 50, 56, 59, 354, 377, 394, 396, 411, 416, 419, 446, 614, 704, 717, 730, 735, 736, 756, 794, 986, 987, 989, 1040], "frequent": [38, 113, 166, 265, 271, 272, 354, 371, 379, 382, 417, 551, 590, 630, 851, 874, 875, 878, 890, 979, 981, 989, 1003, 1007, 1010], "ari": [38, 59, 354, 409, 705, 1036, 1042], "mutual": [38, 39, 50, 56, 59, 144, 146, 151, 168, 396, 416, 418, 446, 592, 595, 596, 599, 600, 606, 607, 608, 609, 704, 705, 715, 754, 756, 785, 794, 978, 985, 989, 990, 1011, 1031, 1037, 1047], "mi": [38, 145, 409, 607, 608, 704, 754, 756, 979, 989, 1003], "theoret": [38, 58, 153, 408, 409, 416, 553, 554, 639, 704, 725, 755, 901, 978, 985, 986, 988, 989, 991, 1001, 1003, 1004, 1013, 1014], "nmi": [38, 409, 717, 735, 736, 756], "ami": [38, 50, 59, 409, 704], "score_func": [38, 72, 73, 418, 592, 595, 596, 598, 599, 600, 741, 1031, 1033, 1048], "rand_scor": [38, 409, 715, 989, 1043], "adjusted_rand_scor": [38, 39, 50, 59, 354, 409, 704, 715, 756, 785, 989, 1044], "mutual_info_scor": [38, 409, 704, 989, 1039, 1042, 1043], "normalized_mutual_info_scor": [38, 409, 735, 754, 794, 989, 1039, 1045], "adjusted_mutual_info_scor": [38, 39, 50, 59, 409, 705, 715, 754, 756, 785, 989, 1031, 1039, 1043, 1047], "random_label": 38, "labels_a": 38, "labels_b": 38, "fixed_classes_uniform_labelings_scor": 38, "n_clusters_rang": 38, "n_run": [38, 62, 177, 354], "seaborn": [38, 114, 170, 171, 180, 185, 252, 262, 382, 399, 402, 1009], "sn": [38, 114, 170, 171, 180, 185, 252, 262], "color_palett": [38, 114, 252], "colorblind": [38, 114], "vx": 38, "errorbar": [38, 62, 80, 82, 149, 159, 160, 287, 330, 343, 804, 820], "satur": [38, 171, 307], "uniform_labelings_scor": 38, "nwith": [38, 58, 62, 149, 354], "constantli": [38, 201, 1014], "unbound": [38, 988, 1045], "cardin": [38, 120, 121, 127, 173, 174, 313, 314, 323, 409, 416, 463, 553, 554, 557, 558, 559, 560, 564, 565, 566, 679, 874, 875, 882, 909, 910, 911, 912, 989, 990, 997, 999, 1045, 1046], "why": [38, 53, 96, 113, 119, 171, 173, 177, 190, 259, 262, 280, 353, 354, 382, 390, 396, 409, 411, 414, 420, 444, 447, 451, 989, 991, 1004, 1020, 1023, 1034], "chart": [38, 124, 267, 990, 1018, 1034], "henc": [38, 61, 73, 171, 205, 234, 271, 340, 353, 354, 368, 377, 384, 386, 388, 396, 399, 409, 413, 416, 417, 487, 508, 539, 541, 542, 543, 563, 590, 643, 646, 652, 660, 662, 672, 687, 704, 705, 709, 715, 730, 756, 785, 794, 817, 818, 836, 837, 838, 839, 840, 876, 946, 986, 988, 989, 990, 995, 996, 999, 1010, 1038, 1039, 1042, 1043, 1045], "safe": [38, 171, 190, 237, 354, 382, 384, 409, 410, 434, 508, 509, 588, 591, 597, 773, 777, 895, 955, 961, 992, 1037, 1038, 1039, 1044, 1045], "stabil": [38, 117, 124, 171, 223, 267, 307, 348, 354, 396, 406, 446, 650, 654, 670, 839, 858, 859, 877, 889, 937, 979, 985, 988, 999, 1010, 1016, 1031, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "mislead": [38, 120, 121, 127, 171, 383, 398, 416, 553, 554, 557, 558, 559, 560, 564, 565, 566, 909, 910, 911, 912, 1027, 1044], "meaning": [38, 174, 227, 294, 355, 406, 413, 417, 418, 548, 728, 729, 737, 782, 783, 786, 850, 993, 1003, 1004, 1031, 1047], "973": [38, 69, 264, 278, 354, 413, 1011], "plot_adjusted_for_chance_measur": [38, 69, 1011], "brendan": [39, 440, 454, 1047], "frei": [39, 440, 454, 1041], "delbert": [39, 440, 454], "dueck": [39, 440, 454], "messag": [39, 45, 63, 71, 96, 237, 353, 354, 377, 380, 381, 382, 386, 387, 390, 391, 409, 440, 454, 468, 539, 543, 548, 574, 627, 712, 798, 801, 802, 804, 812, 820, 825, 828, 830, 850, 858, 859, 899, 920, 921, 922, 925, 928, 952, 973, 989, 999, 1031, 1035, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "feb": [39, 440, 454], "affinitypropag": [39, 45, 321, 409, 1031, 1034, 1035, 1039, 1042, 1044, 1045, 1046, 1047], "labels_tru": [39, 50, 56, 65, 409, 704, 705, 714, 715, 717, 730, 735, 736, 754, 756, 785, 794], "af": 39, "prefer": [39, 45, 56, 253, 271, 307, 364, 368, 369, 370, 380, 382, 383, 384, 396, 409, 413, 414, 416, 417, 440, 454, 471, 472, 478, 487, 508, 509, 627, 632, 633, 654, 658, 659, 701, 725, 727, 741, 756, 757, 850, 876, 901, 902, 943, 955, 978, 981, 983, 985, 989, 994, 1004, 1005, 1009, 1023, 1032, 1038, 1040, 1044, 1045, 1048], "cluster_centers_indic": [39, 454], "cluster_centers_indices_": [39, 440], "labels_": [39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 56, 59, 62, 63, 64, 66, 68, 321, 323, 354, 382, 396, 409, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 455, 1024, 1036], "n_clusters_": [39, 50, 56, 64, 441, 445], "homogeneity_scor": [39, 50, 59, 354, 409, 717, 735, 794, 989], "completeness_scor": [39, 50, 59, 318, 354, 409, 735, 736, 794, 989], "silhouette_scor": [39, 50, 59, 61, 354, 382, 409, 1031, 1035, 1037, 1039, 1041, 1045], "sqeuclidean": [39, 450, 457, 777, 778, 779], "872": [39, 997], "912": 39, "871": [39, 81, 82, 411, 474], "753": [39, 353], "cycler": 39, "class_memb": 39, "cluster_cent": [39, 62, 64, 65, 461], "293": [39, 69, 216, 220, 234, 1011], "plot_affinity_propag": [39, 69, 440, 454, 1011], "impos": [40, 58, 130, 195, 205, 313, 394, 409, 414, 416, 417, 527, 657, 985], "simpli": [40, 87, 131, 153, 161, 226, 238, 240, 271, 298, 319, 320, 368, 377, 382, 384, 387, 394, 396, 411, 412, 413, 414, 416, 417, 485, 695, 761, 764, 868, 940, 981, 989, 990, 991, 992, 1003, 1017, 1025, 1038, 1039, 1040], "There": [40, 47, 119, 153, 219, 226, 237, 253, 257, 259, 262, 283, 353, 375, 377, 379, 382, 383, 384, 387, 394, 396, 397, 399, 406, 408, 409, 414, 416, 417, 418, 446, 452, 462, 534, 553, 554, 559, 560, 588, 589, 591, 606, 645, 979, 985, 986, 987, 988, 989, 992, 996, 999, 1003, 1004, 1005, 1008, 1013, 1024, 1031, 1039], "unstabl": [40, 67, 171, 409, 411, 412, 689, 693, 937, 938, 1005, 1035, 1036, 1038, 1043, 1045, 1047], "quickli": [40, 241, 302, 317, 379, 382, 383, 413, 416, 692, 985, 992, 993, 1014, 1025, 1042], "fight": [40, 205, 1014], "percol": 40, "merg": [40, 42, 47, 52, 320, 380, 382, 385, 390, 394, 397, 409, 440, 441, 442, 445, 446, 463, 818, 1024, 1031, 1038], "exagger": [40, 171, 692, 986], "behaviour": [40, 101, 202, 203, 219, 342, 382, 396, 409, 416, 559, 560, 564, 565, 602, 741, 799, 800, 803, 815, 816, 817, 818, 819, 899, 909, 910, 962, 978, 979, 989, 999, 1039, 1042, 1043, 1046, 1047], "shortest": [40, 387, 391, 688, 943, 986, 1044], "mechan": [40, 237, 349, 353, 369, 382, 384, 409, 417, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 603, 610, 611, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 987, 1005, 1014], "resembl": [40, 205], "brittl": [40, 409], "pronounc": [40, 41, 53, 158], "kneighbors_graph": [40, 45, 63, 68, 285, 396, 409, 441, 445, 843, 844, 845, 847, 849, 851, 852, 853, 855, 992, 1031, 1035, 1040], "geometri": [40, 409, 986, 992], "instabl": [40, 171, 295, 419, 452, 535, 539, 543, 695, 1038, 1041, 1044], "agglomerativeclust": [40, 41, 42, 45, 48, 53, 57, 63, 68, 396, 409, 440, 442, 445, 1024, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1048], "1500": [40, 51, 58, 63, 68, 93, 222, 226, 247], "knn_graph": 40, "include_self": [40, 45, 68, 854, 855, 1035], "889": [40, 69, 260, 303, 305, 437, 1011], "plot_agglomerative_clust": [40, 69, 1011], "waveform": 41, "euclidean": [41, 58, 59, 187, 234, 240, 285, 288, 293, 317, 322, 344, 354, 406, 408, 409, 414, 415, 416, 417, 419, 440, 441, 444, 445, 446, 450, 452, 457, 460, 463, 531, 537, 589, 615, 619, 622, 623, 676, 678, 690, 692, 695, 696, 699, 761, 762, 768, 769, 770, 771, 777, 778, 779, 780, 791, 792, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 895, 979, 983, 987, 990, 992, 1001, 1010, 1035, 1038, 1039, 1040, 1041, 1047, 1048], "cityblock": [41, 45, 409, 450, 457, 761, 777, 778, 779, 992], "invari": [41, 379, 396, 409, 419, 614, 689, 746, 816, 817, 985, 986, 989, 1004, 1010, 1039, 1042, 1043, 1044], "ie": [41, 67, 97, 440, 704, 985, 999], "inter": [41, 120, 364, 416, 716, 944], "character": [41, 219, 358, 409, 413, 986], "ill": [41, 83, 206, 304, 471, 472, 478, 650, 651, 654, 655, 656, 682, 683, 985, 988, 1024, 1041], "recov": [41, 66, 83, 97, 98, 104, 123, 153, 170, 185, 200, 201, 205, 222, 355, 411, 415, 418, 421, 460, 533, 559, 985, 986, 988, 1010, 1024, 1037], "put": [41, 59, 142, 153, 155, 235, 242, 247, 301, 309, 321, 332, 345, 350, 370, 384, 386, 387, 390, 419, 443, 447, 459, 515, 614, 647, 661, 796, 878, 882, 890, 903, 904, 905, 906, 907, 928, 979, 986, 988, 989, 990, 996, 999, 1013, 1017, 1019, 1025, 1043], "cc": [41, 380], "patheffect": 41, "pairwise_dist": [41, 396, 409, 420, 444, 446, 450, 457, 688, 696, 761, 770, 778, 779, 791, 792, 845, 847, 849, 853, 987, 1031, 1035, 1037, 1039, 1040, 1042, 1043, 1048], "sqr": 41, "sign": [41, 80, 87, 97, 100, 115, 185, 252, 301, 348, 382, 409, 414, 417, 544, 582, 589, 606, 635, 636, 658, 659, 666, 668, 674, 675, 676, 677, 734, 741, 901, 905, 936, 938, 954, 985, 989, 994, 999, 1003, 1004, 1024, 1031, 1035, 1040, 1044, 1046], "phi": [41, 414, 742, 867, 981, 989, 999, 1004], "phase_nois": 41, "amplitude_nois": 41, "additional_nois": 41, "f7bd01": 41, "377eb8": [41, 45, 63, 64, 230], "f781bf": [41, 45, 63, 64], "set_label": [41, 156, 234], "tight": [41, 106, 115, 122, 142, 146, 186, 188, 193, 194, 195, 206, 210, 213, 218, 224, 227, 251, 285, 291, 292, 296, 297, 336, 340, 343, 345, 359, 582, 692, 1043], "avg_dist": [41, 780], "set_path_effect": 41, "withstrok": 41, "foreground": [41, 67], "cividi": 41, "45": [41, 65, 74, 86, 146, 158, 173, 190, 201, 219, 269, 273, 274, 328, 340, 413, 416, 417, 564, 565, 627, 634, 787, 796, 905, 979, 989, 997, 1008, 1021, 1031, 1034], "interclass": 41, "049": [41, 69, 471, 1011], "plot_agglomerative_clustering_metr": [41, 69, 1011], "hierarchi": [42, 174, 382, 450, 456, 463, 994, 1024], "plot_dendrogram": 42, "kwarg": [42, 99, 237, 384, 389, 423, 427, 431, 438, 442, 448, 450, 464, 469, 535, 538, 540, 563, 617, 631, 646, 647, 652, 653, 660, 661, 662, 663, 677, 681, 684, 698, 699, 700, 702, 741, 841, 842, 860, 861, 865, 905, 916, 949, 1038, 1042, 1044, 1048], "children_": [42, 441, 445, 463], "current_count": 42, "child_idx": 42, "leaf": [42, 118, 129, 131, 358, 362, 409, 416, 420, 441, 442, 443, 444, 445, 446, 450, 457, 463, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 909, 910, 911, 912, 913, 914, 992, 1005, 1034, 1036, 1038, 1042, 1045], "linkage_matrix": 42, "column_stack": [42, 301, 309], "distances_": [42, 441, 445, 1043], "distance_threshold": [42, 441, 445, 1040, 1043], "truncate_mod": 42, "parenthesi": [42, 382], "093": [42, 69, 471, 1011, 1036], "plot_agglomerative_dendrogram": [42, 69, 1011], "scalabl": [43, 45, 63, 168, 176, 178, 235, 255, 278, 322, 354, 382, 409, 416, 417, 448, 491, 502, 589, 640, 804, 815, 825, 827, 839, 862, 871, 873, 901, 903, 906, 907, 981, 984, 986, 989, 1002, 1004, 1011, 1014, 1031, 1034, 1035, 1041, 1042, 1045, 1046], "hundr": [43, 125, 223, 311, 377, 413, 416, 561, 562, 986, 1042], "thousand": [43, 119, 234, 236, 311, 354, 377, 409, 416, 858, 859, 906, 986, 1025, 1040, 1042], "million": [43, 57, 158, 177, 417, 692, 986, 1004, 1014, 1045, 1046], "chose": [43, 171, 1020], "usag": [43, 54, 72, 75, 86, 100, 111, 147, 171, 172, 231, 235, 237, 256, 294, 296, 303, 336, 355, 368, 377, 381, 382, 384, 385, 389, 390, 392, 396, 397, 399, 408, 409, 413, 414, 419, 420, 444, 446, 450, 464, 489, 512, 515, 519, 523, 561, 562, 591, 609, 640, 648, 658, 659, 660, 666, 667, 668, 669, 676, 677, 678, 679, 680, 690, 777, 780, 791, 792, 860, 901, 909, 910, 911, 912, 938, 978, 979, 981, 988, 989, 990, 992, 1004, 1012, 1016, 1020, 1027, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "enjoi": 43, "edit": [43, 379, 381, 382, 385, 386, 390, 394, 399, 530, 534, 831, 983, 985, 990, 996, 1025], "158": [43, 150, 416, 669], "manojkumarsivaraj334": 43, "joblib": [43, 55, 73, 119, 285, 318, 377, 380, 382, 385, 391, 394, 396, 399, 402, 403, 408, 410, 420, 437, 441, 444, 445, 446, 448, 450, 452, 457, 458, 461, 464, 467, 472, 508, 531, 535, 536, 537, 539, 542, 543, 545, 546, 548, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 594, 602, 610, 632, 634, 639, 647, 651, 653, 655, 657, 658, 659, 661, 663, 665, 666, 668, 676, 679, 688, 689, 690, 691, 692, 693, 694, 773, 777, 780, 798, 801, 802, 804, 812, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 833, 834, 843, 844, 847, 849, 851, 852, 854, 855, 860, 861, 862, 863, 896, 897, 955, 956, 957, 959, 974, 989, 1010, 1031, 1032, 1034, 1036, 1038, 1039, 1040, 1042, 1043, 1046, 1048], "cpu_count": [43, 119, 285, 957], "xx": [43, 59, 81, 122, 126, 131, 142, 155, 156, 157, 172, 188, 208, 211, 212, 213, 214, 215, 227, 230, 238, 251, 291, 301, 309, 310, 332, 339, 340, 345, 346, 349, 350, 386], "yy": [43, 59, 81, 122, 131, 142, 155, 157, 172, 208, 212, 213, 214, 215, 227, 230, 238, 291, 301, 309, 310, 332, 339, 340, 345, 346, 349, 350], "n_center": [43, 512], "25000": 43, "colors_": 43, "cname": 43, "birch_model": 43, "final_step": 43, "centroid": [43, 46, 58, 59, 79, 128, 168, 286, 293, 299, 310, 321, 336, 354, 378, 409, 442, 443, 446, 447, 448, 449, 452, 459, 460, 462, 504, 549, 631, 848, 1011, 1012, 1027, 1031, 1035, 1038, 1043, 1047], "subcluster_centers_": [43, 442], "this_centroid": 43, "set_autoscaley_on": 43, "mbk": [43, 65], "256": [43, 49, 54, 125, 313, 369, 377, 409, 416, 449, 468, 537, 546, 563, 857, 889, 899, 1025, 1045], "max_no_improv": [43, 62, 65, 449, 537, 538, 539, 546, 1045, 1046], "t_mini_batch": [43, 65], "mbk_means_labels_uniqu": 43, "cluster_centers_": [43, 44, 49, 51, 59, 61, 62, 64, 65, 96, 321, 354, 440, 443, 447, 448, 449, 1024], "432": [43, 69, 262, 411, 1011], "plot_birch_vs_minibatchkmean": [43, 69, 1011], "cloud": [44, 86, 95, 97, 102, 108, 168, 390, 414, 533, 541, 692, 989, 1008, 1009, 1011, 1024], "bisectingkmean": [44, 409, 1045, 1046, 1047], "__doc__": [44, 76, 158, 250, 396], "n_clusters_list": 44, "clustering_algorithm": [44, 45, 63], "variant": [44, 96, 164, 166, 167, 168, 232, 262, 320, 321, 354, 355, 388, 409, 412, 414, 417, 419, 449, 460, 490, 493, 494, 512, 515, 543, 559, 560, 565, 615, 619, 622, 623, 627, 630, 638, 639, 641, 645, 672, 704, 799, 803, 805, 806, 807, 816, 823, 844, 862, 898, 979, 985, 986, 987, 988, 989, 991, 992, 1003, 1010, 1011, 1025, 1031, 1039], "algorithm_nam": 44, "algo": [44, 106], "hide": [44, 382, 390, 836, 837, 838, 839, 840, 1034, 1039, 1047], "flat": [44, 96, 102, 172, 222, 223, 224, 260, 409, 417, 440, 446, 448, 461, 509, 996, 1024, 1031, 1032, 1047], "label_out": 44, "035": [44, 69, 197, 220, 1011], "plot_bisect_kmean": [44, 69, 1011], "null": [45, 72, 171, 172, 173, 262, 268, 409, 413, 648, 669, 680, 704, 730, 756, 794, 826, 985, 986, 989, 1004, 1041], "mismatch": [45, 988, 1040], "warn": [45, 63, 73, 201, 216, 237, 265, 285, 302, 303, 311, 368, 369, 371, 382, 385, 386, 387, 396, 403, 410, 417, 496, 538, 540, 547, 550, 553, 554, 557, 558, 559, 560, 561, 562, 564, 565, 566, 571, 572, 573, 574, 575, 576, 578, 602, 636, 693, 712, 713, 728, 729, 737, 782, 783, 786, 851, 865, 866, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 921, 922, 928, 938, 946, 955, 959, 975, 976, 978, 989, 999, 1023, 1031, 1033, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "noisy_circl": [45, 63], "noisy_moon": [45, 63], "no_structur": [45, 63], "anisotropicli": [45, 63], "170": [45, 58, 59, 63, 91, 94, 388, 1011], "x_aniso": [45, 58, 63], "aniso": [45, 63], "plot_num": [45, 63, 230], "default_bas": [45, 63], "quantil": [45, 54, 64, 92, 113, 115, 168, 179, 220, 307, 310, 311, 394, 416, 438, 439, 458, 519, 552, 560, 562, 657, 670, 722, 744, 747, 749, 824, 866, 878, 879, 880, 890, 891, 989, 999, 1011, 1012, 1027, 1031, 1035, 1038, 1040, 1044, 1045, 1047], "damp": [45, 409, 440, 454], "min_sampl": [45, 50, 66, 394, 396, 409, 420, 444, 446, 450, 456, 457, 671, 985, 1040, 1044], "xi": [45, 66, 379, 409, 412, 417, 450, 456, 509, 1003, 1042], "min_cluster_s": [45, 66, 323, 409, 446, 450, 456, 1040], "allow_single_clust": [45, 446], "hdbscan_min_cluster_s": 45, "hdbscan_min_sampl": 45, "220": [45, 163, 172, 175, 1011, 1031], "i_dataset": [45, 63, 230], "algo_param": [45, 63], "param": [45, 56, 62, 63, 72, 124, 125, 127, 128, 222, 236, 237, 260, 262, 270, 274, 289, 302, 324, 382, 384, 396, 400, 416, 419, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 688, 689, 690, 691, 692, 796, 797, 798, 801, 802, 810, 812, 822, 823, 824, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 945, 946, 978, 1037, 1041, 1042, 1044, 1045, 1048], "easier": [45, 63, 67, 83, 123, 180, 186, 232, 240, 259, 260, 307, 340, 353, 364, 377, 382, 384, 387, 390, 394, 399, 411, 413, 468, 515, 899, 932, 984, 989, 996, 1005, 1010, 1014, 1025, 1040, 1045], "estimate_bandwidth": [45, 64, 409, 448, 461], "symmetr": [45, 126, 174, 203, 396, 407, 409, 452, 462, 463, 474, 519, 527, 529, 690, 694, 695, 704, 705, 715, 716, 717, 723, 727, 735, 736, 754, 756, 762, 784, 794, 796, 797, 975, 978, 985, 989, 992, 1047], "meanshift": [45, 321, 409, 440, 1034, 1035, 1036, 1039, 1041, 1042, 1045, 1046, 1047], "bin_seed": [45, 64, 448, 461, 1042], "two_mean": 45, "spectralclust": [45, 321, 409, 440, 992, 1031, 1032, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "nearest_neighbor": [45, 452, 691], "average_linkag": 45, "gmm": [45, 60, 111, 168, 246, 248, 251, 252, 253, 254, 504, 512, 797, 817, 988, 1011, 1031, 1032, 1035, 1036, 1037], "gaussianmixtur": [45, 58, 248, 249, 250, 251, 252, 253, 415, 796, 988, 1037, 1039, 1040, 1044, 1045, 1047], "covariance_typ": [45, 248, 249, 251, 252, 253, 796, 797, 1047], "nkmean": 45, "npropag": 45, "ncluster": 45, "nmixtur": 45, "catch": [45, 63, 303, 369, 390, 391], "catch_warn": [45, 63, 237, 302, 303], "filterwarn": [45, 63, 216, 302, 303, 382, 999], "userwarn": [45, 63, 115, 162, 193, 210, 345, 359, 387, 712, 999, 1037, 1039, 1044], "t1": [45, 47, 63, 216, 224, 227, 230], "ff7f00": [45, 63, 230], "4daf4a": [45, 63], "a65628": [45, 63], "984ea3": [45, 63], "999999": [45, 63], "e41a1c": [45, 63], "dede00": [45, 63, 64], "transax": [45, 63, 226, 230, 249, 293, 309], "734": [45, 69, 1011], "plot_cluster_comparison": [45, 69, 1011], "bad": [46, 61, 62, 154, 171, 353, 364, 382, 409, 419, 692, 745, 978, 985, 986, 991, 997, 1024, 1031], "eight": [46, 1025], "deliv": [46, 368, 1014], "though": [46, 56, 119, 150, 177, 180, 240, 268, 290, 309, 311, 354, 355, 364, 368, 376, 379, 382, 384, 395, 396, 409, 414, 415, 416, 417, 418, 699, 805, 807, 901, 978, 979, 981, 986, 989, 992, 999, 1003, 1025, 1039], "3d": [46, 49, 68, 91, 102, 103, 198, 222, 224, 226, 362, 417, 506, 586, 952, 1038, 1039, 1041], "mplot3d": [46, 68, 91, 102, 103, 172, 198, 222, 224], "noqa": [46, 68, 91, 102, 103, 126, 150, 165, 166, 172, 198, 222, 224, 273, 274, 319, 353, 386, 579, 580, 627, 801, 802, 978, 1040], "f401": [46, 68, 91, 102, 103, 172, 198, 222, 224], "k_means_iris_8": 46, "k_means_iris_3": 46, "k_means_iris_bad_init": 46, "est": [46, 133, 171, 237, 239, 309, 319, 364, 403, 416, 562, 734, 866, 978, 989, 999, 1003, 1042, 1043], "elev": [46, 68, 91, 102, 103, 172, 198, 222, 226], "azim": [46, 68, 91, 102, 103, 172, 198, 222, 226], "134": [46, 54, 103, 125, 262, 1034], "xaxi": [46, 91, 102, 103, 119, 198, 222, 224, 227, 285, 290, 353], "set_ticklabel": [46, 91, 102, 103, 198, 353], "zaxi": [46, 91, 102, 103, 198, 222], "petal": [46, 91, 105, 107, 122, 244, 319, 322, 379, 410, 914, 1005, 1022, 1023], "sepal": [46, 91, 105, 107, 122, 155, 184, 244, 288, 319, 322, 337, 379, 999, 1022, 1023], "length": [46, 71, 90, 91, 93, 105, 107, 122, 150, 153, 154, 155, 158, 159, 161, 177, 184, 237, 238, 241, 244, 288, 319, 322, 337, 355, 375, 379, 382, 390, 391, 396, 410, 414, 416, 417, 419, 445, 490, 508, 509, 512, 515, 523, 551, 563, 581, 582, 589, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 632, 646, 647, 650, 651, 652, 653, 654, 656, 657, 660, 661, 662, 663, 681, 684, 780, 798, 801, 802, 812, 827, 829, 832, 833, 835, 843, 844, 845, 847, 849, 888, 914, 921, 923, 927, 943, 944, 960, 963, 988, 995, 999, 1016, 1022, 1023, 1031, 1034, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1047], "set_zlabel": [46, 91, 198], "setosa": [46, 91, 103, 105, 271, 272, 379, 504, 1016, 1023], "versicolour": [46, 91, 103, 105, 379, 1023], "virginica": [46, 91, 103, 105, 271, 272, 379, 504, 989, 1023], "text3d": [46, 103], "282": [46, 69, 1011, 1021, 1031], "plot_cluster_iri": [46, 69, 1011], "voxel": [47, 67, 585], "multipl": [47, 70, 73, 77, 93, 106, 113, 119, 121, 122, 124, 146, 168, 171, 195, 235, 262, 267, 268, 270, 274, 280, 283, 287, 317, 323, 343, 368, 369, 370, 376, 378, 379, 382, 384, 385, 386, 387, 394, 396, 408, 409, 410, 411, 412, 414, 416, 417, 418, 419, 420, 421, 444, 460, 464, 466, 467, 469, 474, 488, 491, 492, 495, 496, 497, 503, 504, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 551, 553, 554, 555, 556, 559, 560, 561, 562, 563, 581, 599, 607, 608, 610, 611, 627, 632, 634, 639, 640, 641, 642, 646, 647, 650, 652, 653, 654, 657, 660, 661, 662, 663, 666, 667, 668, 671, 673, 676, 678, 679, 689, 690, 692, 693, 694, 721, 722, 727, 744, 745, 747, 749, 750, 752, 784, 787, 789, 790, 792, 796, 797, 798, 800, 801, 802, 803, 804, 810, 812, 813, 814, 815, 816, 817, 818, 823, 824, 825, 827, 831, 832, 833, 834, 835, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 863, 866, 878, 882, 890, 893, 894, 901, 902, 903, 906, 917, 932, 937, 938, 960, 963, 981, 984, 985, 986, 990, 991, 992, 996, 997, 1002, 1003, 1005, 1009, 1010, 1011, 1016, 1025, 1031, 1032, 1034, 1037, 1038, 1041, 1042, 1043, 1044, 1046, 1047, 1048], "partli": [47, 768], "procedur": [47, 57, 119, 126, 150, 181, 189, 252, 264, 310, 314, 340, 353, 364, 382, 384, 394, 395, 396, 397, 407, 408, 411, 413, 414, 416, 418, 531, 537, 538, 540, 545, 546, 547, 553, 554, 555, 556, 559, 560, 593, 595, 602, 609, 644, 672, 674, 687, 727, 784, 858, 859, 878, 890, 960, 978, 985, 991, 997, 999, 1002, 1003, 1004, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "solut": [47, 180, 185, 190, 192, 206, 215, 230, 236, 320, 340, 380, 384, 396, 406, 409, 411, 413, 414, 417, 418, 449, 451, 453, 531, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 549, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 610, 646, 648, 650, 652, 654, 655, 656, 658, 660, 662, 664, 665, 666, 667, 668, 669, 672, 674, 676, 677, 678, 679, 680, 682, 683, 685, 686, 687, 796, 797, 812, 850, 858, 859, 982, 983, 985, 986, 988, 993, 995, 1003, 1004, 1008, 1014, 1020, 1023, 1025, 1031, 1034, 1044, 1045, 1046], "closest": [47, 65, 205, 384, 409, 440, 442, 443, 447, 448, 449, 459, 653, 778, 779, 831, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 980, 983, 990, 992, 1023], "partit": [47, 67, 71, 129, 131, 262, 303, 396, 406, 407, 409, 413, 416, 449, 451, 453, 462, 511, 557, 558, 559, 560, 563, 564, 565, 704, 705, 715, 785, 849, 909, 910, 911, 912, 988, 992, 995, 999, 1005, 1025], "cluster_qr": [47, 409, 452, 462, 1045], "qr": [47, 203, 405, 534, 541, 544, 937, 938, 986, 1037, 1048], "pivot": [47, 273, 274], "cheung": [47, 1032], "andrew": [47, 409, 462, 691, 695, 717, 736, 794, 876, 993, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "knyazev": [47, 409, 452, 462, 695, 1041, 1044, 1045], "ucdenv": 47, "skimag": [47, 48, 376, 1024], "spectral_clust": [47, 67, 1039, 1041, 1043, 1044, 1045, 1046, 1048], "orig_coin": [47, 48], "speed": [47, 48, 58, 71, 99, 111, 119, 166, 172, 187, 190, 194, 285, 319, 328, 353, 355, 370, 371, 382, 385, 391, 394, 396, 405, 407, 409, 414, 416, 417, 420, 443, 444, 447, 448, 449, 450, 452, 457, 459, 460, 461, 462, 531, 532, 610, 627, 632, 633, 634, 639, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 681, 684, 692, 796, 797, 804, 825, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 876, 938, 978, 981, 986, 988, 990, 1003, 1014, 1024, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "down": [47, 48, 82, 113, 216, 217, 224, 234, 235, 237, 265, 280, 304, 307, 344, 364, 376, 385, 390, 411, 414, 443, 450, 456, 590, 593, 594, 639, 649, 773, 777, 780, 870, 871, 876, 879, 880, 891, 903, 906, 913, 985, 1016, 1024, 1039], "alias": [47, 48, 237, 380, 382, 385, 400, 447, 459, 597, 1031, 1035, 1045], "smoothened_coin": [47, 48], "rescaled_coin": [47, 48, 1024], "anti_alias": [47, 48, 1024], "img_to_graph": [47, 67, 417, 1034, 1044], "exponenti": [47, 76, 153, 158, 290, 295, 415, 416, 419, 449, 536, 554, 559, 614, 619, 622, 639, 643, 757, 758, 841, 842, 846, 858, 859, 876, 981, 985, 989, 1004, 1023, 1038, 1044], "beta": [47, 86, 170, 205, 388, 407, 409, 412, 536, 538, 540, 547, 644, 728, 729, 735, 741, 782, 794, 796, 989, 1023, 1033, 1036, 1038, 1040, 1041], "voronoi": [47, 67, 409], "n_region": 47, "extra": [47, 122, 239, 285, 324, 355, 380, 381, 383, 386, 396, 416, 417, 438, 443, 447, 459, 464, 532, 557, 558, 566, 590, 591, 700, 701, 702, 822, 845, 911, 912, 928, 988, 989, 992, 1031, 1034, 1036, 1037, 1039, 1044, 1046], "n_regions_plu": 47, "lobpcg": [47, 452, 462, 688, 691, 695, 1041, 1044, 1045, 1046], "amg": [47, 67, 409, 452, 462, 691, 695, 1041, 1045, 1046], "pyamg": [47, 399, 402, 409, 452, 462, 691, 695], "toler": [47, 74, 165, 192, 194, 217, 218, 344, 355, 377, 384, 391, 409, 421, 443, 447, 452, 459, 462, 471, 472, 478, 482, 483, 484, 531, 532, 533, 535, 536, 540, 541, 542, 543, 544, 545, 547, 548, 559, 560, 561, 562, 627, 646, 647, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 676, 678, 679, 681, 682, 683, 684, 688, 689, 690, 691, 693, 694, 695, 841, 842, 846, 850, 858, 859, 896, 897, 901, 902, 903, 904, 905, 906, 907, 975, 985, 989, 1003, 1004, 1021, 1043, 1044, 1045, 1046], "eigen_tol": [47, 452, 462, 691, 695, 1032, 1045, 1046], "todo": [47, 234, 386, 390, 396, 409, 1048], "21243": 47, "assign_label": [47, 409, 452, 462], "comment": [47, 353, 380, 381, 382, 383, 385, 386, 390, 487, 579, 989], "paus": 47, "21194": [47, 1044], "38": [47, 93, 172, 192, 200, 205, 256, 263, 271, 278, 290, 323, 416, 632, 882, 989, 999, 1011, 1031, 1032, 1033], "668": [47, 69, 1011], "plot_coin_segment": [47, 69, 1011], "spatial": [48, 50, 56, 174, 185, 218, 303, 377, 396, 409, 420, 444, 446, 450, 452, 457, 679, 692, 759, 762, 777, 778, 779, 780, 791, 792, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 985, 992, 999, 1033, 1037, 1044, 1047], "constrain": [48, 96, 123, 130, 172, 192, 301, 318, 324, 338, 340, 375, 396, 408, 409, 414, 416, 509, 561, 562, 635, 658, 659, 690, 694, 826, 985, 988, 1035], "grid_to_graph": [48, 52, 55, 409, 417, 1024, 1044], "st": [48, 68, 262, 322, 1034, 1037, 1039], "4697": 48, "330": [48, 69, 328, 1011], "plot_coin_ward_segment": [48, 69, 1011], "vq": [49, 59], "palac": 49, "china": [49, 409, 506, 507, 584], "615": 49, "literatur": [49, 158, 262, 280, 354, 379, 382, 388, 390, 394, 395, 409, 412, 414, 416, 443, 447, 449, 501, 536, 538, 540, 547, 555, 556, 588, 591, 708, 796, 978, 981, 985, 989, 1041], "codebook": [49, 280, 566, 831], "palett": [49, 171, 262], "byte": [49, 54, 417, 487, 503, 508, 509, 582, 588, 589, 591, 954, 1023, 1025, 1031, 1038, 1039, 1046], "rgb": [49, 377, 417, 493, 494, 583, 584, 587], "gif": 49, "pick": [49, 56, 61, 174, 238, 270, 321, 327, 377, 382, 386, 409, 416, 443, 460, 523, 673, 911, 912, 978, 985, 986, 988, 1003, 1042], "017": [49, 388, 471, 472], "036": [49, 388, 472], "robertlayton": 49, "load_sample_imag": [49, 583, 584, 1040], "pairwise_distances_argmin": [49, 65, 321, 779, 1039, 1045, 1046, 1047], "n_color": 49, "photo": 49, "jpg": [49, 506, 584], "255": [49, 99, 285, 303, 313, 320, 377, 493, 494, 561, 562], "original_shap": 49, "image_arrai": 49, "image_array_sampl": 49, "codebook_random": 49, "labels_random": 49, "recreate_imag": 49, "recreat": [49, 241], "book": [49, 71, 443, 447, 449, 831, 836, 840, 985, 986, 987, 990, 1007, 1043], "alongsid": [49, 382, 388, 396, 399, 418, 822, 823, 824, 989, 996, 1009, 1010], "509": [49, 69, 1011], "plot_color_quant": [49, 69, 1011], "750": [50, 56, 121, 262], "math": [50, 71, 150, 240, 262, 263, 379, 399, 763], "db": [50, 56, 409], "n_noise_": 50, "come": [50, 68, 71, 81, 87, 101, 102, 150, 153, 235, 317, 353, 354, 368, 370, 375, 379, 382, 383, 386, 390, 394, 396, 399, 409, 413, 416, 417, 439, 450, 456, 472, 550, 705, 794, 819, 903, 906, 978, 979, 983, 986, 988, 992, 995, 1004, 1016, 1031, 1042, 1045, 1047], "handi": [50, 72, 354, 355, 383, 1047], "883": 50, "917": 50, "916": 50, "626": [50, 187], "unique_label": [50, 56, 354, 384, 391], "core_samples_mask": 50, "zeros_lik": [50, 203, 271], "bool": [50, 67, 82, 166, 219, 362, 382, 421, 422, 423, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 519, 522, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 697, 698, 700, 702, 703, 707, 708, 709, 711, 712, 713, 714, 725, 726, 727, 728, 729, 730, 737, 740, 741, 749, 750, 753, 755, 760, 762, 766, 768, 773, 777, 781, 782, 783, 784, 786, 788, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 812, 816, 817, 820, 821, 824, 825, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 919, 920, 921, 922, 932, 938, 939, 951, 954, 960, 962, 970, 975, 976, 977, 979, 1040, 1043, 1044], "core_sample_indices_": [50, 444], "class_member_mask": 50, "markerfacecolor": [50, 56, 62, 64, 65], "markeredgecolor": [50, 56, 62, 64, 65], "markers": [50, 56, 59, 62, 64, 65, 126, 156, 160, 233, 321], "154": [50, 69, 304, 651, 990, 1011], "plot_dbscan": [50, 69, 420, 444, 1011], "constitut": [51, 396, 413, 416, 450, 456, 588, 589, 591, 993], "standpoint": 51, "proce": [51, 147, 182, 380, 386, 412, 413, 416, 440, 985], "reassign": [51, 382, 447, 449, 1032, 1036], "success": [51, 145, 168, 255, 266, 269, 270, 278, 347, 364, 404, 409, 413, 414, 416, 515, 564, 579, 798, 801, 802, 819, 906, 992, 1011, 1014, 1020, 1024, 1027, 1043], "becom": [51, 56, 58, 73, 81, 124, 203, 205, 237, 240, 264, 285, 308, 312, 340, 344, 353, 364, 376, 382, 384, 386, 390, 396, 397, 409, 411, 416, 417, 419, 440, 450, 454, 455, 457, 553, 581, 588, 589, 591, 619, 627, 658, 659, 676, 678, 875, 901, 902, 908, 984, 985, 986, 988, 992, 999, 1004, 1023, 1025, 1032, 1039, 1040, 1043, 1044, 1045, 1046, 1048], "fetch_olivetti_fac": [51, 96, 121, 239, 377, 1039, 1040, 1041], "olivetti": [51, 96, 121, 375, 414, 495, 1027, 1031, 1039], "ndownload": 51, "figshar": 51, "5976027": 51, "extract_patches_2d": [51, 99, 417, 1039], "patch_siz": [51, 99, 417, 583, 584], "buffer": [51, 1044], "max_patch": [51, 417, 583, 584, 1039], "4i": 51, "dt": [51, 99, 134, 416, 417, 1005], "700": [51, 319], "800": [51, 207, 220, 320, 377, 584, 692, 1011], "1100": 51, "1200": [51, 125, 307, 416], "1300": 51, "1400": [51, 474], "1600": 51, "1700": 51, "1800": 51, "1900": 51, "2100": [51, 320], "2200": [51, 377, 493], "2300": [51, 190], "ntrain": 51, "460": [51, 69, 1011], "plot_dict_face_patch": [51, 69, 1011], "agglo": [52, 445, 1024], "featureagglomer": [52, 55, 440, 441, 1006, 1024, 1034, 1040, 1041, 1044, 1045, 1047, 1048], "x_reduc": [52, 91, 131, 445, 1024], "x_restor": 52, "images_restor": 52, "130": [52, 69, 388, 1011], "plot_digits_agglomer": [52, 69, 1011], "rich": [53, 390, 394, 409, 439, 1014, 1042, 1045], "richer": [53, 106, 409], "uneven": [53, 257, 409, 413], "patholog": [53, 988, 1037], "clean": [53, 72, 200, 364, 374, 380, 415, 995, 999, 1041], "fring": [53, 409], "sensibl": [53, 165, 280, 354, 384, 985, 999], "resampl": [53, 126, 158, 171, 219, 289, 391, 394, 396, 555, 556, 963, 1010, 1040, 1044], "plot_clust": 53, "x_red": 53, "spectralembed": [53, 222, 223, 224, 688, 689, 690, 692, 986, 1032, 1037, 1041, 1045, 1046, 1048], "plot_digits_linkag": [53, 69, 1011], "raccoon": [54, 99, 414], "addition": [54, 73, 115, 171, 201, 219, 237, 318, 320, 354, 382, 394, 407, 417, 610, 611, 646, 652, 671, 878, 978, 979, 989, 997, 1009, 1037, 1048], "adapt": [54, 56, 113, 125, 126, 156, 247, 248, 309, 344, 369, 380, 381, 382, 391, 409, 416, 419, 515, 516, 517, 518, 676, 677, 678, 858, 859, 985, 991, 993, 999, 1003, 1009, 1010, 1039, 1040, 1047, 1048], "pooch": [54, 382, 399, 402], "instal": [54, 244, 285, 317, 318, 319, 320, 321, 322, 323, 324, 368, 369, 371, 382, 383, 385, 386, 388, 390, 394, 395, 402, 405, 409, 417, 452, 462, 496, 691, 695, 1005, 1007, 1025, 1038, 1039, 1040, 1044, 1045], "raccoon_fac": [54, 99], "nbyte": [54, 234], "768": 54, "1024": [54, 106, 449, 468, 538, 899, 1044], "uint8": [54, 99, 376, 497, 506, 507, 1043], "786432": 54, "unsign": [54, 100, 377, 582, 954], "786": [54, 72, 126, 137, 1011], "kilobyt": 54, "behind": [54, 81, 113, 280, 384, 386, 390, 408, 411, 416, 988, 992, 1001, 1047], "simplest": [54, 413, 986, 989, 1023, 1024], "know": [54, 67, 147, 150, 153, 162, 171, 219, 237, 238, 262, 280, 283, 321, 327, 348, 354, 368, 382, 394, 400, 403, 409, 412, 413, 414, 417, 500, 504, 510, 646, 652, 658, 659, 725, 755, 798, 812, 886, 887, 889, 890, 891, 892, 909, 910, 911, 912, 978, 988, 989, 990, 992, 1001, 1037, 1038, 1041, 1043], "certainli": [54, 71, 354], "subsampl": [54, 106, 125, 128, 172, 201, 218, 219, 258, 310, 314, 319, 458, 559, 560, 561, 562, 563, 632, 679, 701, 801, 802, 827, 866, 878, 890, 917, 927, 981, 985, 1010, 1013, 1031, 1041, 1045, 1047], "200_000": [54, 310, 866, 1047], "compressed_raccoon_uniform": 54, "spot": [54, 232, 409], "leav": [54, 113, 118, 127, 172, 174, 219, 269, 312, 362, 364, 368, 379, 381, 387, 396, 409, 416, 441, 442, 445, 446, 463, 503, 557, 558, 559, 560, 561, 562, 564, 565, 566, 673, 675, 800, 805, 806, 807, 808, 816, 817, 841, 842, 909, 910, 911, 912, 978, 986, 992, 996, 1005, 1020, 1023, 1031, 1038, 1040, 1042, 1043, 1047], "bin_edg": 54, "bin_edges_": [54, 308, 866], "bin_cent": [54, 201], "625": [54, 201, 708], "875": [54, 154, 669], "375": [54, 449, 749, 989], "140": [54, 233, 245, 273, 278, 324, 416, 510, 516, 517, 518, 555, 556, 990, 1011], "171": [54, 150, 379, 388, 787, 989], "234": [54, 119, 137, 836, 840, 858, 859, 991, 1011], "axvlin": [54, 61, 74, 83, 104, 125, 135, 171, 173, 174, 190, 268, 348, 1021], "get_ybound": 54, "state": [54, 58, 71, 73, 81, 203, 234, 242, 248, 268, 319, 364, 369, 370, 382, 384, 388, 390, 394, 396, 397, 408, 417, 422, 440, 443, 447, 449, 454, 459, 475, 544, 589, 679, 801, 802, 810, 812, 814, 841, 842, 848, 896, 897, 924, 978, 979, 985, 991, 994, 1001, 1009, 1010, 1014, 1033, 1035, 1037, 1039, 1041, 1044, 1047], "compressed_raccoon_kmean": 54, "90885631": 54, "34346583": 54, "64447187": 54, "28225276": 54, "70763101": 54, "159": [54, 102, 108, 353, 356, 377, 1011, 1031], "78681467": 54, "185": [54, 105, 108, 150, 162, 248, 254, 379, 388, 858, 859, 1011], "17226834": 54, "02069427": 54, "save": [54, 71, 73, 240, 304, 381, 382, 386, 388, 389, 390, 396, 403, 413, 421, 468, 534, 535, 627, 841, 842, 899, 985, 989, 999, 1005, 1014, 1025, 1031, 1034, 1038, 1041], "verifi": [54, 61, 111, 171, 201, 382, 387, 405, 973, 992], "6291456": 54, "surpris": [54, 172, 985, 1009, 1033], "x8": 54, "ndarrai": [54, 59, 91, 201, 244, 260, 261, 262, 382, 383, 384, 388, 389, 405, 417, 420, 421, 424, 425, 427, 430, 431, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 497, 500, 501, 502, 503, 504, 505, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 697, 698, 700, 701, 702, 715, 718, 721, 722, 723, 726, 727, 737, 744, 745, 747, 749, 750, 752, 753, 757, 758, 759, 760, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 788, 789, 790, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 919, 920, 921, 926, 927, 937, 938, 939, 940, 944, 951, 953, 954, 961, 962, 964, 965, 966, 967, 970, 975, 976, 989, 1004, 1010, 1034, 1038, 1041, 1042, 1045, 1046, 1047, 1048], "practic": [54, 72, 81, 87, 99, 119, 123, 124, 153, 170, 171, 177, 185, 203, 230, 236, 263, 270, 291, 292, 319, 340, 344, 369, 371, 382, 384, 385, 388, 390, 395, 396, 409, 411, 413, 414, 415, 416, 417, 419, 447, 452, 462, 521, 524, 589, 632, 633, 670, 796, 840, 894, 901, 978, 979, 983, 985, 988, 989, 990, 991, 992, 995, 996, 999, 1009, 1010, 1012, 1014, 1016, 1025, 1026, 1027, 1033, 1037, 1039, 1041, 1043], "gain": [54, 224, 269, 285, 287, 324, 328, 353, 354, 362, 381, 388, 390, 394, 416, 532, 557, 561, 562, 564, 725, 755, 796, 797, 830, 909, 911, 990, 994, 1002, 1005, 1034, 1038, 1041], "081": [54, 69, 103, 108, 294, 299, 360, 363, 997, 1011], "plot_face_compress": [54, 69, 1011], "bayesianridg": [55, 165, 180, 181, 185, 319, 627, 644, 985, 1038, 1039, 1040, 1041, 1044, 1045, 1047, 1048], "shutil": [55, 73, 410], "tempfil": [55, 287, 317, 410, 992], "feature_select": [55, 72, 73, 75, 144, 145, 146, 147, 148, 149, 150, 151, 168, 244, 319, 321, 343, 364, 371, 396, 400, 410, 418, 581, 978, 1011, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "kfold": [55, 119, 125, 139, 257, 267, 364, 413, 437, 472, 567, 568, 594, 602, 647, 651, 653, 655, 661, 663, 665, 673, 798, 801, 802, 804, 806, 808, 812, 817, 819, 820, 821, 822, 823, 824, 825, 826, 828, 832, 835, 882, 1020, 1032, 1033, 1034, 1036, 1037, 1039, 1041], "roi_siz": 55, "snr": 55, "noise_coef": 55, "gridsearch": [55, 79, 273, 1009], "cachedir": [55, 73, 391, 410], "mkdtemp": [55, 410], "n_x": [55, 585], "n_y": [55, 585, 991, 999], "parcel": [55, 68, 409], "ward__n_clust": 55, "coef_agglomeration_": 55, "_agglom": 55, "ward_tre": [55, 441, 445, 1031, 1035], "451933": 55, "675318": 55, "275706": 55, "085711": 55, "1600x1600": 55, "7840": 55, "element": [55, 96, 116, 117, 128, 232, 256, 261, 269, 271, 318, 354, 358, 362, 371, 379, 381, 382, 384, 391, 397, 406, 408, 409, 413, 414, 416, 417, 420, 444, 446, 452, 464, 487, 508, 512, 514, 520, 522, 526, 527, 531, 537, 538, 540, 550, 557, 558, 559, 560, 564, 565, 566, 567, 568, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 617, 632, 658, 659, 666, 667, 668, 676, 677, 678, 707, 717, 726, 733, 735, 745, 762, 768, 777, 781, 787, 788, 831, 841, 842, 843, 844, 845, 847, 849, 851, 852, 856, 858, 859, 864, 880, 881, 884, 888, 901, 906, 909, 910, 911, 912, 940, 941, 942, 960, 962, 963, 983, 985, 989, 990, 993, 996, 999, 1000, 1001, 1005, 1014, 1016, 1036, 1037, 1039, 1041, 1042, 1043, 1045, 1047], "return_dist": [55, 463, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 992, 1035], "________________________________________________________ward_tre": 55, "0min": 55, "905206": 55, "161245": 55, "849835": 55, "091621": 55, "f_regress": [55, 145, 418, 592, 595, 596, 598, 599, 600, 604, 605, 609, 1034, 1038, 1045, 1048], "cach": [55, 67, 168, 263, 285, 286, 288, 293, 297, 299, 368, 369, 377, 396, 441, 445, 450, 468, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 502, 508, 798, 843, 845, 861, 862, 899, 903, 904, 905, 906, 907, 974, 992, 1004, 1011, 1034, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1047], "selectpercentil": [55, 72, 244, 343, 418, 592, 595, 596, 598, 599, 603, 606, 1032, 1037, 1047, 1048], "anova__percentil": [55, 343], "coef_selection_": 55, "_univariate_select": 55, "267703": 55, "026711": 55, "_____________________________________________________f_regress": 55, "447268": 55, "638768": 55, "rdbu_r": [55, 83, 107, 340], "temporari": [55, 71, 73, 368, 468, 687, 780, 899, 992, 1034, 1035, 1038, 1044, 1045], "worri": [55, 986, 1017], "rmtree": [55, 73, 410], "ignore_error": 55, "471": [55, 69, 379, 1011], "plot_feature_agglomeration_vs_univariate_select": [55, 69, 1011], "huberregressor": [55, 153, 168, 179, 181, 199, 205, 206, 207, 220, 314, 524, 670, 671, 672, 678, 679, 985, 1011, 1037, 1038, 1039, 1040], "orthogon": [55, 97, 98, 99, 106, 168, 179, 220, 275, 408, 414, 526, 531, 537, 539, 542, 543, 548, 664, 665, 685, 686, 1001, 1011, 1012, 1027, 1031], "pursuit": [55, 97, 99, 106, 168, 179, 220, 275, 414, 474, 526, 531, 537, 542, 548, 664, 665, 685, 686, 1011, 1012, 1027, 1031], "perspect": [56, 61, 201, 368, 377, 394, 397, 530, 643, 901, 982], "conveni": [56, 205, 240, 374, 390, 394, 410, 413, 417, 419, 424, 443, 447, 449, 451, 453, 464, 489, 611, 676, 678, 699, 727, 784, 860, 861, 963, 979, 981, 985, 986, 996, 1014, 1025, 1031], "ground_truth": [56, 292], "proba_map": 56, "class_index": 56, "ci": [56, 369, 385, 386, 390, 991, 1037, 1039], "preambl": 56, "parameters_str": 56, "greatest": [56, 399, 409, 868, 1039], "remark": [56, 87, 150, 370, 382, 999], "unlik": [56, 57, 119, 171, 172, 222, 224, 252, 307, 338, 382, 384, 388, 394, 396, 400, 411, 413, 414, 417, 446, 450, 535, 650, 651, 654, 655, 656, 682, 683, 784, 819, 841, 842, 881, 892, 904, 985, 988, 989, 996, 1004, 1031, 1037], "bi": [56, 417], "worth": [56, 122, 172, 201, 382, 390, 1014], "rememb": [56, 384, 387, 399, 417, 992, 996, 1005], "hardli": [56, 607, 608], "proper": [56, 190, 219, 370, 388, 407, 416, 449, 541, 553, 676, 938, 964, 984, 985, 986, 989, 1004, 1031, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "must": [56, 171, 172, 174, 182, 185, 218, 219, 230, 241, 257, 291, 308, 313, 353, 364, 377, 381, 382, 383, 384, 386, 388, 390, 396, 397, 400, 405, 407, 409, 410, 413, 414, 416, 417, 418, 419, 420, 430, 438, 441, 444, 445, 446, 447, 449, 450, 451, 455, 457, 459, 461, 462, 464, 466, 467, 469, 474, 487, 508, 509, 512, 523, 531, 537, 538, 539, 540, 541, 543, 544, 547, 553, 554, 559, 560, 561, 562, 567, 568, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 610, 611, 617, 620, 627, 628, 629, 630, 632, 633, 638, 642, 643, 648, 649, 652, 658, 659, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 682, 685, 686, 687, 688, 689, 692, 693, 694, 695, 696, 699, 703, 706, 709, 734, 745, 763, 770, 773, 777, 780, 787, 791, 792, 793, 795, 796, 797, 798, 799, 801, 802, 803, 805, 807, 808, 810, 812, 813, 814, 816, 817, 819, 822, 825, 827, 828, 836, 837, 838, 839, 840, 843, 844, 845, 847, 849, 850, 851, 852, 853, 856, 857, 858, 859, 861, 864, 865, 866, 868, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 885, 901, 902, 903, 904, 905, 906, 907, 908, 914, 957, 964, 973, 975, 978, 979, 985, 986, 987, 989, 992, 993, 995, 996, 1003, 1004, 1005, 1016, 1025, 1031, 1034, 1038, 1042, 1044, 1045, 1048], "maintain": [56, 206, 219, 222, 237, 262, 369, 371, 381, 385, 388, 389, 390, 394, 396, 399, 409, 416, 440, 442, 870, 871, 877, 878, 881, 886, 889, 890, 892, 985, 986, 999, 1009, 1010, 1016, 1027, 1046], "mitig": [56, 173, 314, 369, 370, 986, 1005, 1023, 1024, 1043], "great": [56, 170, 171, 199, 364, 382, 394, 414, 763, 1010, 1014, 1031, 1038], "appropri": [56, 58, 104, 158, 171, 205, 237, 271, 358, 364, 380, 382, 384, 390, 396, 408, 409, 413, 415, 416, 420, 444, 450, 457, 489, 490, 491, 496, 500, 501, 502, 504, 505, 510, 577, 582, 591, 592, 595, 596, 598, 599, 600, 672, 674, 687, 709, 843, 844, 845, 847, 849, 851, 852, 853, 973, 985, 988, 989, 999, 1035, 1038, 1044, 1047], "immedi": [56, 382, 394, 798, 812, 822, 823, 1039], "hdb": [56, 446], "probabilities_": [56, 446], "capabl": [56, 57, 87, 158, 205, 226, 384, 396, 399, 990, 993, 1004, 1005, 1014, 1031, 1040, 1048], "constraint": [56, 58, 68, 96, 112, 137, 168, 196, 205, 240, 241, 257, 302, 303, 304, 318, 382, 394, 414, 417, 487, 508, 509, 557, 558, 561, 562, 564, 565, 632, 635, 816, 817, 909, 910, 911, 912, 978, 980, 985, 986, 1003, 1011, 1035, 1038, 1039, 1042, 1044, 1046, 1048], "reachabl": [56, 66, 446, 450, 455, 456, 457, 847, 943], "fragment": [56, 99], "sparser": [56, 180, 192, 414, 471, 478, 539, 543, 985, 992, 1003], "Not": [56, 139, 172, 368, 394, 409, 427, 428, 431, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 469, 470, 471, 472, 473, 474, 475, 476, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 563, 566, 569, 570, 581, 582, 583, 588, 589, 591, 627, 628, 629, 630, 677, 688, 689, 690, 691, 693, 793, 796, 797, 798, 801, 802, 812, 838, 841, 842, 845, 846, 847, 849, 853, 865, 873, 876, 877, 879, 882, 893, 894, 905, 989, 995, 1009, 1040], "mention": [56, 87, 113, 219, 318, 364, 368, 382, 386, 387, 394, 396, 409, 696, 893, 894, 978, 983, 985, 1010, 1014, 1025, 1038, 1039, 1040], "until": [56, 150, 209, 274, 319, 321, 387, 396, 397, 406, 409, 413, 418, 508, 509, 557, 558, 559, 560, 564, 565, 566, 593, 646, 647, 652, 653, 658, 659, 660, 661, 662, 663, 666, 667, 668, 671, 676, 677, 678, 694, 796, 797, 801, 802, 858, 859, 898, 901, 909, 910, 911, 912, 964, 978, 985, 986, 994, 1002, 1005, 1025, 1034, 1038, 1039, 1045], "tradeoff": [56, 116, 168, 235, 243, 255, 269, 270, 271, 272, 278, 353, 368, 382, 390, 415, 515, 564, 698, 702, 726, 788, 827, 862, 881, 901, 986, 1011, 1023, 1040, 1043], "comfort": [56, 416], "epsilon": [56, 66, 183, 225, 236, 323, 347, 414, 446, 455, 643, 649, 667, 676, 678, 745, 858, 859, 902, 904, 907, 982, 985, 989, 993, 1003, 1004, 1023, 1031], "incap": 56, "suffici": [56, 133, 209, 276, 340, 368, 396, 409, 418, 532, 657, 682, 683, 817, 818, 990, 992, 1010, 1040, 1046, 1047], "intervent": 56, "inaccess": 56, "ultim": [56, 226, 383], "world": [56, 71, 75, 171, 205, 226, 240, 353, 368, 371, 375, 379, 409, 414, 417, 979, 989, 991, 1008, 1010, 1014, 1019, 1027, 1031], "whose": [56, 80, 81, 82, 150, 158, 201, 338, 377, 390, 391, 396, 407, 409, 411, 416, 418, 419, 422, 437, 438, 439, 448, 461, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 515, 534, 538, 540, 541, 544, 547, 549, 572, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 640, 671, 695, 718, 798, 805, 812, 826, 847, 866, 893, 894, 937, 968, 969, 983, 990, 994, 995, 996, 1004, 1034, 1039, 1040, 1042, 1045], "respect": [56, 68, 91, 101, 113, 117, 119, 122, 130, 161, 177, 180, 185, 190, 203, 215, 218, 222, 224, 231, 234, 236, 240, 252, 271, 291, 292, 304, 312, 321, 337, 344, 368, 369, 377, 378, 382, 407, 409, 412, 414, 416, 417, 419, 446, 464, 467, 470, 471, 472, 473, 474, 475, 476, 534, 540, 541, 547, 553, 561, 562, 597, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 636, 643, 671, 690, 694, 712, 727, 781, 784, 796, 797, 837, 847, 858, 859, 913, 915, 978, 982, 983, 985, 986, 989, 992, 993, 994, 995, 999, 1004, 1009, 1014, 1034, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "recomput": [56, 57, 241, 243, 287, 317, 469, 474, 985, 1001, 1036, 1047], "cut_dist": [56, 446], "671": [56, 69, 1001, 1011], "plot_hdbscan": [56, 69, 1011], "johnson": [56, 168, 177, 229, 245, 307, 311, 374, 408, 489, 502, 877, 889, 893, 894, 895, 999, 1006, 1011, 1027, 1039, 1045, 1047], "lindenstrauss": [56, 168, 177, 229, 245, 374, 408, 489, 502, 893, 894, 895, 1006, 1011, 1027], "bound": [56, 157, 159, 161, 168, 177, 203, 219, 229, 245, 261, 380, 389, 409, 414, 417, 419, 420, 444, 489, 502, 512, 523, 536, 595, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 632, 635, 637, 650, 654, 658, 677, 705, 734, 796, 797, 841, 842, 878, 890, 893, 894, 895, 903, 904, 905, 908, 925, 957, 985, 988, 989, 992, 1001, 1003, 1004, 1006, 1011, 1039, 1042, 1043, 1045], "intract": [57, 414, 986, 994], "inferenti": 57, "meta": [57, 71, 112, 136, 137, 168, 201, 237, 267, 271, 279, 281, 283, 323, 324, 358, 361, 364, 376, 380, 384, 386, 394, 396, 400, 405, 407, 418, 419, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 496, 533, 534, 538, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 575, 581, 582, 588, 590, 591, 594, 597, 603, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 798, 799, 800, 805, 807, 814, 816, 824, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 846, 848, 851, 852, 858, 859, 861, 864, 866, 867, 868, 873, 880, 881, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 949, 978, 990, 1010, 1011, 1012, 1027, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1045, 1046, 1048], "chirag": 57, "nagpal": 57, "christo": [57, 1040, 1041, 1043, 1045], "arida": [57, 1040, 1041, 1043, 1045], "baseestim": [57, 111, 237, 285, 382, 395, 396, 419, 433, 632, 633, 930, 1031, 1038, 1041, 1043, 1045, 1046], "clone": [57, 126, 161, 172, 237, 304, 324, 364, 380, 382, 385, 386, 388, 390, 396, 407, 410, 419, 437, 465, 569, 570, 597, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 804, 820, 825, 828, 832, 835, 861, 862, 898, 1010, 1031, 1037, 1039, 1043, 1047, 1048], "metaestim": [57, 384, 396, 408, 898, 1035, 1044, 1045], "available_if": [57, 396, 1044, 1045], "check_is_fit": [57, 111, 237, 385, 391, 396, 1041, 1044, 1045], "5000": [57, 187, 216, 217, 219, 319, 882], "_classifier_ha": 57, "deleg": [57, 388, 434, 914, 1035, 1037, 1043], "unfit": [57, 410, 434, 464, 569, 570, 602, 611, 1039, 1041, 1048], "classifier_": [57, 237], "inductivecluster": 57, "clusterer_": 57, "plot_scatt": 57, "cluster_label": [57, 61], "x_new": [57, 410, 414, 418, 433, 442, 443, 445, 447, 449, 531, 532, 533, 534, 535, 536, 537, 539, 541, 542, 543, 544, 549, 567, 569, 570, 582, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 628, 630, 635, 638, 639, 640, 641, 642, 688, 689, 690, 691, 692, 850, 857, 864, 865, 866, 867, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 893, 894, 1001, 1016], "y_new": 57, "declar": [57, 223, 237, 364, 382, 383, 384, 388, 396, 443, 446, 447, 459, 471, 472, 478, 690, 694, 1038, 1042], "membership": [57, 397, 406, 408, 409, 511, 512, 513, 514, 515, 519, 522, 1004], "inductive_learn": 57, "probable_clust": 57, "887": [57, 69, 1011], "plot_inductive_clust": [57, 69, 1011], "__sklearn_is_fitted__": [57, 109, 110, 168, 384, 423, 426, 973, 1011, 1044, 1045], "develop": [57, 110, 219, 260, 262, 280, 317, 323, 353, 368, 371, 377, 381, 382, 388, 394, 396, 397, 398, 400, 403, 406, 408, 411, 412, 416, 417, 423, 426, 433, 493, 798, 973, 985, 989, 992, 1005, 1007, 1009, 1010, 1011, 1013, 1014, 1023, 1031, 1039, 1040, 1041, 1044, 1046, 1048], "meant": [58, 150, 240, 377, 384, 391, 474, 493, 677, 847, 955, 956, 979, 993, 995, 999, 1032], "unintuit": 58, "possibli": [58, 87, 150, 201, 216, 344, 354, 379, 381, 390, 403, 409, 416, 417, 451, 453, 589, 836, 837, 838, 839, 840, 906, 907, 909, 910, 911, 912, 978, 981, 986, 992, 999, 1046], "undesir": [58, 154, 419], "phil": [58, 1036, 1047], "roth": [58, 1036, 1039, 1046], "mr": [58, 322, 1032, 1035, 1045], "anisotrop": [58, 155, 419, 617, 619, 622], "ellipt": [58, 985], "60834549": 58, "63667341": 58, "40887718": 58, "85253229": 58, "x_vari": 58, "y_vari": 58, "unequ": [58, 1039], "x_filter": 58, "unevenli": [58, 201, 257], "y_filter": 58, "set_i": 58, "scenario": [58, 71, 153, 177, 205, 265, 364, 389, 399, 413, 416, 537, 543, 545, 546, 983, 989, 999, 1041], "criteria": [58, 119, 168, 179, 190, 209, 220, 252, 262, 390, 409, 418, 466, 482, 483, 484, 501, 557, 558, 559, 560, 564, 565, 646, 652, 656, 658, 659, 671, 692, 862, 881, 901, 902, 909, 910, 911, 912, 979, 988, 993, 1003, 1011, 1024, 1034, 1039, 1042], "knowledg": [58, 121, 171, 218, 240, 262, 371, 377, 382, 385, 388, 395, 396, 409, 413, 416, 420, 444, 511, 555, 556, 563, 720, 735, 739, 782, 830, 989, 990, 1001, 1025], "consequ": [58, 104, 219, 262, 263, 307, 337, 364, 414, 416, 561, 562, 566, 655, 656, 979, 985, 989, 1005, 1040, 1042, 1047], "inertia": [58, 59, 62, 354, 409, 443, 447, 449, 452, 459, 460, 462, 463, 1042], "common_param": [58, 126, 172, 236, 264, 265, 344], "unexpect": [58, 237, 364, 382, 387, 390, 403, 535, 696, 989, 1004, 1033, 1039, 1040, 1043, 1045, 1047], "suffic": [58, 59, 384, 1025], "propos": [58, 79, 80, 285, 377, 382, 384, 394, 396, 409, 411, 416, 421, 422, 450, 475, 535, 607, 608, 676, 677, 678, 858, 859, 985, 988, 992, 1003, 1007, 1038], "inflat": [58, 170, 171, 173, 409, 413, 989, 999], "allevi": [58, 180, 185, 409, 991], "fastest": [58, 260, 355, 447, 670, 672, 674, 687, 937, 938, 988], "restart": [58, 385, 390, 447, 531, 537, 538, 543, 545, 546, 610, 611, 986, 1044], "plot_kmeans_assumpt": [58, 69, 1011], "posterior": [58, 152, 153, 154, 159, 163, 168, 180, 262, 414, 419, 549, 550, 552, 610, 611, 613, 614, 615, 619, 622, 623, 627, 644, 645, 708, 796, 983, 1009, 1011, 1037, 1040], "judg": [59, 207, 409, 1020], "definit": [59, 82, 189, 201, 269, 285, 354, 382, 383, 384, 396, 398, 409, 411, 412, 414, 527, 529, 535, 611, 628, 692, 708, 718, 727, 757, 796, 797, 978, 981, 983, 985, 987, 989, 992, 1003, 1008, 1027, 1035, 1039, 1046], "shorthand": [59, 396, 410, 467, 561, 562, 862, 863, 1034], "homo": 59, "compl": 59, "mea": 59, "context": [59, 240, 244, 285, 368, 369, 376, 381, 383, 395, 396, 409, 410, 415, 416, 417, 419, 420, 437, 444, 446, 448, 450, 452, 457, 458, 461, 464, 467, 468, 472, 531, 535, 536, 537, 539, 542, 543, 544, 545, 546, 548, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 594, 602, 610, 626, 627, 630, 632, 634, 639, 647, 651, 653, 655, 657, 658, 659, 661, 663, 665, 666, 668, 676, 679, 688, 689, 690, 691, 692, 693, 694, 773, 777, 780, 798, 801, 802, 804, 812, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 833, 834, 843, 844, 847, 849, 851, 852, 854, 855, 860, 863, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 957, 979, 985, 989, 995, 999, 1003, 1010, 1014, 1023, 1031, 1038, 1039, 1044, 1047], "n_digit": 59, "1797": [59, 90, 260, 304, 327, 379, 445, 502, 532, 533, 534, 535, 599, 600, 688, 689, 690, 691, 992, 1022], "bench_k_mean": 59, "tabl": [59, 219, 262, 382, 383, 386, 391, 409, 417, 582, 658, 680, 798, 812, 838, 954, 985, 989, 990, 995, 1009, 1032], "inertia_": [59, 62, 65, 443, 447, 449, 1042], "clustering_metr": 59, "sample_s": [59, 235, 354, 792], "formatter_result": 59, "determinist": [59, 126, 369, 378, 384, 396, 409, 443, 447, 449, 451, 452, 453, 458, 459, 462, 551, 559, 560, 564, 565, 583, 584, 691, 695, 809, 810, 857, 909, 910, 981, 985, 1032, 1035, 1037, 1039, 1040, 1043, 1046, 1047], "ttime": 59, "tinertia": 59, "thomo": 59, "tcompl": 59, "tv": 59, "tari": 59, "tami": 59, "tsilhouett": 59, "__________________________________________________________________________________": 59, "034": [59, 187, 471], "69545": 59, "598": [59, 104, 154, 541], "645": 59, "621": [59, 768], "469": [59, 83, 84, 1011], "617": [59, 148, 151, 265, 409, 768, 1011], "152": [59, 104, 108, 355, 388, 1011], "043": [59, 224, 354, 388], "69735": 59, "681": [59, 388], "723": [59, 236], "701": 59, "574": [59, 534, 541], "698": 59, "012": [59, 174, 177], "72686": 59, "636": [59, 185, 354, 388], "658": [59, 87], "647": 59, "521": 59, "643": [59, 260, 275, 278, 355, 1011], "reduced_data": 59, "mesh": [59, 122, 131, 155, 235, 293, 301, 309, 332, 336], "white": [59, 61, 96, 158, 171, 215, 222, 291, 304, 309, 332, 339, 414, 417, 625, 1005, 1031, 1034, 1037, 1041, 1045], "677": [59, 69, 1011], "plot_kmeans_digit": [59, 69, 1011], "kmeans_plusplu": [60, 409, 1043, 1048], "4000": [60, 128, 250], "centers_init": 60, "4eacc5": [60, 65], "ff9c34": [60, 65], "4e9a06": [60, 65], "cluster_data": 60, "072": [60, 69, 345, 351, 437, 648, 1011], "plot_kmeans_plusplu": [60, 69, 1011], "wrong": [61, 201, 291, 353, 364, 379, 382, 384, 417, 504, 725, 755, 792, 989, 995, 1004, 1034, 1036, 1038, 1039, 1040, 1041, 1044], "wide": [61, 62, 91, 116, 234, 308, 394, 409, 414, 417, 978, 985, 1009, 1014, 1025, 1031, 1033, 1047], "ambival": 61, "thick": [61, 295, 992], "ow": 61, "7049787496083262": 61, "5882004012129721": 61, "6505186632729437": 61, "561464362648773": 61, "4857596147013469": 61, "silhouette_sampl": [61, 792, 1035, 1037, 1039, 1047], "distinct": [61, 262, 329, 353, 355, 377, 384, 387, 396, 397, 413, 416, 417, 589, 799, 808, 816, 875, 876, 896, 897, 978, 985, 992, 995, 1025, 1039], "center_box": [61, 512], "range_n_clust": 61, "set_size_inch": [61, 139, 241], "insert": [61, 171, 201, 394, 409, 487, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 916], "blank": [61, 387, 979, 1005], "demarc": 61, "silhouette_avg": 61, "sample_silhouette_valu": 61, "y_lower": [61, 126], "aggreg": [61, 117, 219, 265, 271, 321, 323, 409, 416, 418, 534, 555, 556, 594, 721, 722, 727, 744, 745, 747, 749, 750, 752, 784, 789, 790, 990, 992, 999, 1047], "ith_cluster_silhouette_valu": 61, "size_cluster_i": 61, "y_upper": [61, 126], "fill_betweenx": 61, "2nd": [61, 91, 161, 312, 409, 420, 444, 530, 999, 1046], "lw": [61, 79, 80, 82, 100, 105, 106, 195, 202, 204, 207, 211, 218, 225, 250, 257, 272, 290, 307, 329, 347], "fontweight": [61, 196], "plot_kmeans_silhouette_analysi": [61, 69, 1011], "reach": [62, 119, 124, 150, 201, 203, 217, 219, 264, 321, 340, 362, 387, 397, 399, 409, 414, 418, 450, 457, 508, 509, 593, 594, 627, 644, 645, 646, 647, 652, 653, 654, 655, 656, 660, 661, 662, 663, 666, 667, 668, 676, 677, 678, 679, 681, 682, 683, 684, 728, 729, 782, 796, 797, 858, 859, 898, 978, 989, 993, 1003, 1005, 1014, 1042, 1046, 1047, 1048], "optimum": [62, 159, 171, 177, 275, 414, 472, 985, 988], "stuck": [62, 692, 986], "check_random_st": [62, 217, 224, 233, 239, 384, 391, 396], "trade": [62, 79, 119, 173, 205, 261, 263, 264, 340, 353, 408, 409, 411, 553, 554, 559, 560, 634, 656, 692, 798, 801, 802, 812, 824, 986, 993, 1001, 1003, 1004, 1010], "n_init_rang": 62, "n_samples_per_cent": 62, "n_clusters_tru": 62, "init_s": [62, 354, 449], "factori": [62, 262, 417, 959, 989], "empti": [62, 71, 106, 213, 330, 368, 377, 384, 386, 409, 421, 483, 533, 561, 562, 631, 809, 866, 906, 908, 916, 921, 922, 928, 948, 949, 979, 1004, 1023, 1033, 1035, 1039, 1040, 1042, 1043, 1045, 1046, 1047], "run_id": 62, "km": [62, 321, 354], "fmt": [62, 212], "my_memb": [62, 64, 65], "plot_kmeans_stability_low_dim_dens": [62, 69, 1011], "globular": [63, 409], "cleanli": [63, 1031], "796": [63, 69, 126, 1011], "plot_linkage_comparison": [63, 69, 1011], "dorin": [64, 448], "comaniciu": [64, 409, 448], "meer": [64, 409, 448], "ieee": [64, 80, 82, 379, 409, 411, 418, 422, 448, 475, 534, 563, 664, 685, 686, 724, 768, 985, 989, 995], "transact": [64, 379, 409, 411, 420, 422, 444, 448, 475, 534, 538, 540, 547, 563, 644, 664, 685, 686, 724, 725, 755, 768, 985, 989], "intellig": [64, 150, 353, 379, 409, 416, 448, 555, 556, 638, 696, 724, 831, 858, 859, 990, 1001, 1010, 1014], "2002": [64, 407, 409, 416, 437, 448, 593, 594, 725, 755, 848, 896, 981, 989], "603": [64, 448], "619": [64, 354, 355, 448], "labels_uniqu": 64, "389": [64, 69, 309, 315, 593, 594, 1011, 1025], "plot_mean_shift": [64, 69, 461, 1011], "k_mean": [65, 391, 396, 1024, 1039, 1047], "t_batch": 65, "pairwis": [65, 170, 171, 234, 271, 317, 321, 322, 353, 368, 374, 384, 396, 409, 414, 419, 446, 458, 461, 462, 468, 487, 508, 509, 535, 561, 562, 620, 638, 639, 640, 641, 642, 643, 688, 690, 692, 694, 696, 699, 777, 780, 787, 791, 792, 829, 845, 849, 853, 867, 899, 981, 989, 992, 1001, 1004, 1027, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1045, 1046, 1047, 1048], "k_means_cluster_cent": 65, "mbk_means_cluster_cent": 65, "k_means_label": 65, "mbk_means_label": 65, "ninertia": 65, "bbbbbb": 65, "163": [65, 69, 124, 137, 150, 280, 379, 997, 1011], "plot_mini_batch_kmean": [65, 69, 1011], "shane": [66, 1040, 1043, 1046], "grigsbi": 66, "refug": 66, "rocktalu": 66, "cluster_optics_dbscan": [66, 409], "n_points_per_clust": 66, "c1": [66, 123, 161, 233, 313], "c2": [66, 123, 161, 233, 313], "c3": [66, 123, 313], "c4": [66, 313, 1012, 1027], "c5": [66, 1012, 1027], "c6": 66, "clust": [66, 450, 457], "labels_050": 66, "reachability_": [66, 409, 450, 455, 456, 457], "core_dist": [66, 455], "core_distances_": [66, 450, 455, 457], "ordering_": [66, 409, 450, 455, 456, 457], "labels_200": 66, "ax3": [66, 330], "ax4": 66, "klass": 66, "xk": [66, 550], "rk": 66, "full_lik": 66, "noptic": 66, "ndbscan": 66, "444": [66, 69, 354, 1011], "plot_opt": [66, 69, 1011], "tri": [67, 105, 222, 294, 344, 369, 384, 387, 394, 397, 407, 449, 451, 453, 631, 632, 633, 670, 692, 698, 700, 702, 812, 957, 994, 1013, 1016, 1033, 1039, 1043], "intens": [67, 99, 285, 379, 383, 414, 443, 447, 459, 607, 608, 632, 633, 800, 978, 996, 1014, 1039], "weakli": 67, "outlin": [67, 122, 382, 384, 396, 397, 398, 409, 978, 1027], "center1": 67, "center2": 67, "center3": 67, "center4": 67, "radius1": 67, "radius2": 67, "radius3": 67, "radius4": 67, "circle1": 67, "circle2": 67, "circle3": 67, "circle4": 67, "label_im": 67, "cleaner": 67, "477": [67, 69, 1011], "plot_segmentation_toi": [67, 69, 1011], "swiss": [68, 168, 221, 222, 223, 224, 227, 228, 409, 530, 692, 693, 1011, 1045], "sole": [68, 394, 409], "oppos": [68, 237, 386, 405, 409, 897, 992, 1004, 1016, 1031], "make_swiss_rol": [68, 226, 1045], "thinner": 68, "fig1": 68, "set_posit": [68, 102, 103, 212, 307], "jet": 68, "fig2": 68, "121": [68, 115, 166, 235, 669, 999], "337": [68, 69, 388, 1011], "plot_ward_structured_vs_unstructur": [68, 69, 1011], "253": [69, 125, 534], "chain": [70, 73, 76, 77, 113, 141, 168, 233, 270, 273, 274, 280, 282, 284, 285, 288, 304, 364, 371, 374, 394, 396, 408, 419, 496, 502, 541, 611, 627, 658, 737, 798, 827, 830, 832, 833, 834, 835, 861, 862, 881, 978, 979, 990, 994, 1006, 1009, 1011, 1014, 1025, 1027], "raster": 71, "serv": [71, 100, 113, 159, 265, 344, 410, 551, 638, 981, 1045], "matt": [71, 1034, 1035, 1036, 1041, 1042, 1046, 1047], "terri": [71, 1035], "compris": [71, 126, 260, 353, 354, 355, 377, 394, 414, 416, 515, 805, 986], "subject": [71, 130, 253, 265, 353, 377, 382, 384, 386, 394, 396, 397, 407, 408, 411, 413, 414, 495, 658, 659, 685, 864, 959, 980, 985, 1004, 1008, 1025, 1040, 1041, 1044, 1046], "mccall": 71, "mksol": 71, "dseg": 71, "ti": [71, 201, 249, 252, 260, 349, 368, 407, 409, 599, 600, 635, 720, 725, 755, 796, 797, 903, 906, 909, 988, 989, 1004, 1032, 1034, 1035, 1039, 1041, 1045, 1046, 1047], "fred": [71, 1031, 1044], "575": [71, 201, 354], "3539": 71, "1993apr6": 71, "131900": 71, "8407": 71, "perhap": [71, 122, 379, 381, 390, 396, 415, 1010], "militari": 71, "slug": 71, "school": [71, 379, 409, 787, 989], "physic": [71, 119, 369, 505, 954, 985, 1047], "teacher": 71, "ex": [71, 380, 383, 399, 1035, 1036], "fighter": 71, "jock": 71, "wasn": [71, 237, 1040], "poundal": 71, "flink": 71, "funni": 71, "propon": 71, "si": 71, "insist": 71, "safeti": [71, 394, 410, 955, 1010, 1041], "ball": [71, 290, 298, 409, 415, 448, 692, 841, 842, 846, 849, 851, 852, 853, 1031, 1033, 1036, 1042], "mari": [71, 1039, 1040, 1041, 1042, 1045], "shafer": 71, "nasa": [71, 353, 354, 379], "am": [71, 76, 81, 133, 172, 353, 387, 411, 474, 493, 1038], "dryden": 71, "stateless": [71, 354, 370, 384, 396, 417, 582, 583, 589, 638, 864, 865, 873, 999, 1047], "subject_body_extractor": 71, "subject_body_transform": 71, "sentenc": [71, 353, 355, 377, 397, 417], "text_stat": 71, "num_sent": 71, "text_stats_transform": 71, "subjectbodyextractor": 71, "subjectbodi": 71, "union": [71, 171, 410, 737, 753, 860, 1038], "body_bow": 71, "pull": [71, 320, 369, 380, 385, 396, 397, 1041], "body_stat": 71, "transformer_weight": [71, 464, 467, 860, 1036, 1043], "396": [71, 150, 247, 254, 379, 1011, 1025], "394": [71, 162], "697": [71, 77, 88, 1011], "plot_column_transform": [71, 77, 1011], "imput": [72, 133, 167, 173, 232, 242, 244, 318, 321, 371, 374, 386, 395, 396, 400, 410, 416, 490, 501, 565, 580, 639, 645, 672, 823, 844, 862, 920, 922, 1009, 1010, 1011, 1027, 1033, 1034, 1048], "miss": [72, 133, 150, 167, 173, 232, 242, 262, 285, 318, 322, 364, 368, 371, 374, 377, 379, 381, 382, 384, 386, 387, 396, 405, 408, 409, 410, 411, 446, 472, 490, 496, 498, 501, 557, 558, 561, 562, 564, 565, 566, 627, 628, 629, 630, 639, 645, 672, 690, 694, 726, 768, 823, 844, 862, 870, 871, 875, 877, 878, 881, 882, 886, 889, 890, 892, 909, 910, 911, 912, 985, 986, 989, 1009, 1010, 1011, 1012, 1014, 1027, 1033, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "chi": [72, 81, 113, 311, 374, 418, 519, 592, 595, 596, 598, 599, 600, 604, 605, 606, 609, 638, 639, 640, 641, 642, 757, 758, 1027, 1031, 1036, 1037], "dispatch": [72, 371, 405, 468, 798, 812, 822, 823, 824, 899, 955, 956, 1020, 1027, 1046], "processor": [72, 133, 171, 371, 420, 437, 444, 446, 448, 450, 452, 457, 458, 461, 464, 467, 472, 531, 535, 536, 537, 539, 542, 543, 545, 546, 548, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 594, 602, 610, 632, 634, 639, 647, 651, 653, 655, 657, 658, 659, 661, 663, 665, 666, 668, 676, 679, 688, 689, 690, 691, 692, 693, 694, 773, 777, 780, 798, 801, 802, 804, 812, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 843, 844, 847, 849, 851, 852, 854, 855, 860, 863, 896, 897], "pedro": [72, 1032, 1034, 1035, 1039], "chi2": [72, 417, 418, 452, 581, 592, 595, 596, 598, 599, 600, 605, 606, 609, 620, 638, 639, 640, 641, 642, 643, 758, 764, 773, 1031, 1038, 1045], "simpleimput": [72, 133, 165, 166, 173, 232, 242, 244, 318, 321, 364, 396, 627, 628, 629, 979, 999, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048], "40945": 72, "titan": [72, 173, 244, 317, 321, 322], "surviv": [72, 173, 978, 1009], "ag": [72, 150, 171, 173, 189, 190, 201, 219, 241, 242, 244, 307, 320, 321, 322, 324, 377, 379, 1014, 1016, 1023], "fare": [72, 173, 244, 321, 322, 1035, 1036], "embark": [72, 173, 244, 317, 321, 322], "sex": [72, 150, 171, 173, 189, 190, 244, 322, 324, 379, 997, 1023], "femal": [72, 171, 322, 387, 874, 875, 999], "male": [72, 171, 322, 387, 874, 875, 999], "pclass": [72, 173, 244, 317, 321, 322], "numeric_featur": [72, 321], "numeric_transform": [72, 321], "categorical_transform": 72, "preprocessor": [72, 133, 171, 201, 232, 240, 242, 313, 318, 320, 321, 322, 324, 410, 417, 588, 589, 591, 1009, 1025, 1031, 1034, 1039, 1041], "798": [72, 416], "lt": [72, 73, 118, 133, 171, 252, 260, 274, 380, 382], "0x7f552f515b80": 72, "pipelineifittedpipelin": [72, 118, 147, 171, 173, 231, 241, 244, 269, 321], "columntransformercolumntransform": [72, 133, 171, 173, 232, 242, 313, 318, 321], "simpleimputersimpleimput": [72, 133, 173, 232, 242, 318, 321], "standardscalerstandardscal": [72, 133, 171, 231, 232, 241, 242, 244, 269, 318, 321], "onehotencoderonehotencod": [72, 118, 133, 171, 172, 232, 242, 318, 321], "selectpercentileselectpercentil": [72, 244], "logisticregressionlogisticregress": [72, 118, 231, 232, 242, 244, 318, 321], "make_column_selector": [72, 123, 133, 240, 410, 464, 467, 1041], "subset_featur": 72, "Then": [72, 114, 118, 121, 133, 136, 147, 171, 177, 185, 189, 201, 205, 226, 231, 237, 243, 264, 265, 280, 353, 376, 386, 388, 390, 399, 406, 407, 409, 412, 414, 417, 418, 570, 593, 719, 755, 798, 812, 901, 902, 979, 988, 989, 995, 1004, 1025, 1040], "1047": 72, "1118": 72, "684": [72, 81], "1045": 72, "841": 72, "1046": [72, 252], "kb": [72, 171, 172], "numerical_transform": 72, "yourself": [72, 381, 382, 383, 387, 390, 993], "dtype_exclud": [72, 466], "dtype_includ": [72, 123, 133, 240, 410, 466], "_column_transform": [72, 133], "0x7f5508a439d0": 72, "0x7f550964fdc0": 72, "exactli": [72, 113, 170, 180, 185, 194, 201, 205, 253, 270, 308, 348, 353, 382, 384, 406, 409, 413, 414, 417, 422, 446, 453, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 515, 526, 590, 591, 615, 676, 678, 703, 705, 762, 799, 816, 822, 981, 985, 986, 987, 989, 990, 1005, 1024, 1025, 1031, 1037, 1038, 1044], "hyperparamet": [72, 74, 75, 153, 154, 160, 161, 165, 168, 172, 180, 185, 190, 215, 219, 230, 240, 255, 260, 265, 267, 273, 274, 278, 287, 304, 353, 384, 396, 409, 413, 414, 416, 419, 502, 535, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 643, 653, 659, 665, 673, 676, 727, 784, 798, 812, 978, 983, 984, 985, 988, 989, 991, 993, 995, 1003, 1010, 1011, 1025, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1047], "cartesian": [72, 406, 633, 992, 1046], "preprocessor__num__imputer__strategi": 72, "preprocessor__cat__selector__percentil": 72, "classifier__c": 72, "search_cv": 72, "param_distribut": [72, 153, 263, 270, 274, 319, 395, 802, 810, 812, 1047], "randomizedsearchcvinot": 72, "fittedrandomizedsearchcv": 72, "pipelinepipelin": [72, 73, 242], "trigger": [72, 73, 386, 410, 858, 859, 861, 862, 921, 922, 938, 985, 1025, 1039, 1045, 1046], "best_params_": [72, 74, 126, 153, 236, 252, 260, 266, 319, 340, 395, 798, 801, 802, 812, 978, 1021, 1025], "best_score_": [72, 74, 236, 263, 266, 267, 340, 673, 675, 798, 801, 802, 812, 1020, 1021, 1025, 1042], "cv_results_": [72, 73, 74, 83, 119, 139, 149, 252, 260, 261, 262, 263, 266, 270, 273, 274, 287, 340, 472, 594, 798, 801, 802, 812, 1025, 1037, 1041, 1043, 1044], "sort_valu": [72, 173, 174, 244, 252, 262, 273, 313, 314], "mean_test_scor": [72, 73, 74, 83, 119, 139, 149, 252, 261, 262, 263, 270, 273, 274, 287, 340, 472, 594, 798, 812, 978, 1037, 1044], "std_test_scor": [72, 74, 119, 139, 149, 261, 262, 263, 270, 287, 472, 594, 798, 812, 1037, 1044], "param_preprocessor__num__imputer__strategi": 72, "param_preprocessor__cat__selector__percentil": 72, "param_classifier__c": 72, "786015": 72, "031020": 72, "785063": 72, "030498": 72, "783149": 72, "030462": 72, "299": [72, 77, 114, 680, 1011], "plot_column_transformer_mixed_typ": [72, 77, 1011], "set_output": [72, 168, 172, 229, 242, 245, 312, 313, 385, 433, 442, 443, 445, 447, 449, 464, 468, 482, 483, 484, 485, 496, 504, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 566, 567, 568, 569, 570, 581, 582, 583, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 658, 688, 689, 692, 827, 845, 850, 853, 857, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 899, 1011, 1046, 1047, 1048], "instanti": [73, 156, 320, 385, 400, 416, 450, 567, 568, 602, 630, 798, 801, 802, 804, 812, 820, 822, 823, 824, 825, 826, 828, 928, 995, 1022, 1031, 1039, 1043, 1047], "argument": [73, 202, 231, 234, 237, 369, 376, 377, 382, 383, 385, 387, 388, 390, 391, 394, 396, 409, 410, 413, 414, 416, 418, 420, 421, 423, 427, 431, 438, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 457, 459, 461, 463, 468, 469, 493, 496, 503, 508, 533, 535, 536, 538, 540, 551, 559, 560, 563, 567, 568, 569, 570, 577, 581, 582, 588, 589, 591, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 631, 639, 643, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 666, 668, 676, 677, 681, 684, 688, 692, 696, 698, 699, 700, 701, 702, 714, 719, 734, 741, 762, 778, 779, 804, 820, 822, 823, 824, 829, 830, 833, 843, 844, 845, 847, 849, 850, 851, 852, 853, 854, 855, 858, 861, 865, 899, 905, 915, 919, 928, 933, 956, 957, 959, 973, 978, 981, 985, 986, 987, 989, 992, 996, 997, 1004, 1005, 1016, 1020, 1031, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1048], "memoiz": [73, 377, 396], "costli": [73, 79, 120, 165, 263, 349, 369, 383, 388, 409, 443, 627, 806, 808, 893, 894, 938, 989, 992, 1001, 1010], "mcgibbon": [73, 1033, 1034, 1037], "selectkbest": [73, 75, 146, 147, 321, 364, 382, 400, 410, 418, 581, 592, 595, 596, 598, 600, 606, 978, 1032, 1037, 1047, 1048], "mutual_info_classif": [73, 418, 592, 595, 596, 599, 600, 1037, 1043, 1046], "pipe": [73, 74, 123, 242, 261, 313, 319, 320, 395, 400, 410, 417, 590, 861, 886, 887, 889, 890, 891, 892, 978, 999, 1021], "reduce_dim": [73, 242, 261, 410], "popul": [73, 79, 81, 171, 201, 240, 265, 307, 377, 391, 396, 411, 440, 712, 718, 843, 844, 845, 847, 849, 851, 852, 853, 989, 995, 999, 1005], "n_features_opt": 73, "c_option": 73, "iterated_pow": [73, 532, 535, 541, 1037], "reduce_dim__n_compon": [73, 261, 410], "classify__c": 73, "reduce_dim__k": 73, "reducer_label": 73, "kbest": [73, 592], "0x7f552f4e9040": 73, "gridsearchcvifittedgridsearchcv": [73, 252, 260, 262], "minmaxscalerminmaxscal": 73, "passthroughpassthrough": [73, 171, 172, 313], "linearsvclinearsvc": [73, 147, 269], "mean_scor": [73, 271, 274, 354, 1044], "alphabet": [73, 396, 740], "eas": [73, 174, 252, 312, 382, 385, 388, 985, 1003, 1009, 1010, 1014, 1042, 1043, 1045], "sometim": [73, 133, 170, 262, 303, 354, 364, 369, 370, 382, 384, 386, 388, 395, 396, 409, 411, 414, 416, 417, 449, 534, 535, 538, 540, 541, 866, 867, 868, 916, 984, 985, 986, 989, 994, 999, 1000, 1004, 1016, 1024, 1028, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1047], "worthwhil": [73, 396], "slower": [73, 99, 119, 123, 165, 236, 271, 355, 416, 417, 418, 446, 451, 453, 538, 540, 547, 555, 556, 557, 558, 563, 564, 565, 566, 588, 589, 591, 631, 632, 633, 643, 659, 672, 674, 687, 692, 704, 829, 833, 834, 982, 986, 987, 988, 990, 992, 1005, 1025, 1035, 1042], "constructor": [73, 233, 369, 384, 396, 408, 410, 417, 464, 467, 549, 550, 555, 567, 568, 569, 570, 581, 582, 588, 589, 597, 668, 676, 677, 843, 844, 845, 847, 848, 849, 851, 852, 853, 860, 861, 862, 863, 957, 978, 990, 999, 1004, 1010, 1016, 1031, 1032, 1034, 1035, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "folder": [73, 377, 380, 382, 386, 390, 399, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 503, 992, 1025], "cached_pip": [73, 410], "delet": [73, 328, 330, 386, 387, 469, 474, 486], "exit": [73, 285, 386, 390, 468], "benefici": [73, 75, 79, 96, 131, 307, 308, 380, 986], "467": [73, 77, 1011], "plot_compare_reduct": [73, 77, 1011], "increment": [73, 75, 95, 101, 103, 104, 105, 108, 168, 265, 386, 388, 442, 447, 463, 504, 533, 534, 535, 536, 539, 541, 544, 602, 646, 658, 666, 804, 825, 833, 834, 836, 837, 838, 839, 840, 870, 871, 881, 901, 902, 964, 985, 991, 1011, 1034, 1035], "logistic__c": [74, 1021], "54434690031882": 74, "pca__n_compon": [74, 1021], "truncat": [74, 131, 223, 391, 534, 535, 539, 540, 541, 544, 676, 678, 725, 755, 796, 850, 914, 938, 978, 988, 989, 1003, 1021, 1025, 1026, 1027, 1037, 1039], "x_digit": [74, 141, 302, 410, 1020, 1021, 1023], "y_digit": [74, 141, 302, 410, 1020, 1021, 1023], "__": [74, 263, 396, 410, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 796, 797, 798, 801, 802, 812, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 978, 1021, 1039, 1040], "spectrum": [74, 524, 544, 695, 938, 1014, 1021, 1039], "ax0": [74, 76, 201, 233, 354, 1021], "n_components_": [74, 104, 396, 441, 445, 534, 538, 539, 540, 541, 542, 543, 893, 894, 1021, 1040, 1042], "explained_variance_ratio_": [74, 105, 354, 414, 534, 541, 544, 549, 1021, 1034, 1037], "named_step": [74, 87, 410, 593, 594, 597, 861, 862, 901, 902, 985, 1021, 1038, 1040], "components_col": 74, "param_pca__n_compon": 74, "best_clf": 74, "nlargest": 74, "yerr": [74, 80, 82, 120, 123, 149, 287, 313, 330], "val": [74, 213, 262, 940], "780": [74, 77, 260, 1011], "plot_digits_pip": [74, 77, 1011], "boltzmann": [74, 86, 168, 191, 216, 300, 305, 502, 658, 713, 827, 857, 858, 859, 861, 887, 1011, 1026, 1027, 1033], "candid": [75, 252, 260, 263, 270, 319, 370, 382, 386, 409, 416, 448, 450, 798, 801, 802, 810, 812, 985, 992, 1005, 1037], "features__pca__n_compon": 75, "features__univ_select__k": 75, "svm__c": 75, "867": [75, 351], "967": [75, 989, 993], "transformer_list": [75, 410, 860, 863, 979, 1042, 1043], "univ_select": 75, "amuel": [75, 117, 192, 235, 329, 348], "ai": [75, 117, 192, 235, 329, 348, 413], "bonn": [75, 117, 192, 235, 329, 348], "mayb": [75, 303, 396, 417, 1004, 1010], "combined_featur": 75, "x_featur": [75, 640, 641, 642, 981], "grid_search": [75, 119, 242, 252, 260, 270, 324, 410, 957, 1033, 1034, 1035, 1036, 1037, 1038], "plot_feature_union": [75, 77, 1011], "overview": [76, 168, 267, 279, 281, 283, 358, 383, 385, 395, 396, 496, 733, 742, 798, 814, 824, 829, 830, 831, 909, 991, 1003, 1011, 1026, 1027], "transformedtargetregressor": [76, 171, 201, 394, 400, 410, 593, 594, 597, 1039, 1041, 1044], "hous": [76, 124, 133, 165, 166, 307, 319, 375, 490, 1027], "translat": [76, 384, 419, 527, 614, 870, 871, 887, 986, 989, 1007, 1014], "lowest": [76, 87, 172, 185, 252, 376, 409, 413, 635, 637, 801, 802, 805, 908, 909, 986, 989, 1005, 1046], "logarithm": [76, 133, 171, 205, 234, 263, 340, 396, 418, 460, 590, 658, 659, 676, 704, 725, 740, 750, 754, 755, 756, 790, 804, 832, 841, 842, 936, 1005, 1020, 1038], "log1p": [76, 233, 865, 989, 999], "expm1": 76, "y_tran": 76, "meda": [76, 171, 989], "median_absolute_error": [76, 171, 989, 1035, 1041, 1043], "r2_score": [76, 170, 185, 196, 197, 416, 432, 465, 482, 483, 484, 554, 556, 558, 560, 562, 565, 568, 570, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 723, 727, 834, 835, 844, 852, 859, 902, 904, 907, 910, 912, 978, 989, 1032, 1034, 1040, 1044, 1045], "compute_scor": [76, 104, 180, 181, 644, 645, 1040], "r2": [76, 114, 119, 133, 170, 172, 196, 236, 384, 410, 416, 554, 570, 673, 824, 859, 989, 997, 1040], "ridge_cv": 76, "y_pred_ridg": 76, "ridge_cv_with_trans_target": 76, "inverse_func": [76, 171, 410, 465, 865, 999, 1039], "y_pred_ridge_with_trans_target": 76, "sell": 76, "quantile_transform": [76, 878, 889, 999, 1038, 1039, 1040], "house_pric": [76, 133], "select_dtyp": [76, 123, 322, 466], "inf": [76, 156, 295, 391, 409, 419, 446, 450, 457, 461, 471, 472, 478, 553, 554, 559, 560, 593, 594, 597, 606, 607, 608, 619, 627, 635, 637, 648, 649, 650, 652, 669, 671, 672, 676, 680, 687, 727, 729, 745, 777, 784, 788, 857, 866, 873, 919, 921, 922, 936, 989, 999, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047], "lotfrontag": 76, "garageyrblt": 76, "masvnrarea": [76, 133], "to_fram": 76, "n_quantil": [76, 172, 311, 878, 890, 1040], "output_distribut": [76, 307, 311, 410, 877, 878, 889, 890, 999], "squeez": [76, 159, 160, 240, 285, 307, 1024], "quantiletransform": [76, 172, 311, 410, 465, 877, 890, 979, 999, 1038, 1039, 1040, 1041, 1042, 1047], "weaker": [76, 561, 562], "residu": [76, 197, 203, 258, 432, 465, 482, 483, 484, 552, 554, 556, 558, 560, 562, 565, 568, 570, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 671, 672, 673, 674, 678, 679, 685, 686, 701, 743, 784, 834, 835, 844, 852, 859, 902, 904, 907, 910, 912, 985, 989, 1023, 1043, 1044, 1046], "smile": [76, 377, 1045], "439": [76, 77, 192, 220, 1011], "plot_transformed_target": [76, 77, 1011], "predictor": [76, 112, 123, 136, 137, 165, 166, 168, 201, 219, 232, 240, 258, 313, 384, 395, 396, 410, 412, 413, 416, 419, 466, 467, 482, 483, 484, 496, 516, 517, 518, 555, 556, 562, 565, 568, 602, 610, 630, 632, 633, 648, 653, 657, 669, 673, 680, 701, 822, 824, 833, 834, 861, 862, 874, 875, 881, 963, 985, 990, 1011, 1032, 1038, 1041], "stack": [76, 112, 123, 136, 137, 165, 166, 168, 201, 232, 240, 258, 290, 313, 362, 381, 390, 394, 396, 408, 415, 464, 466, 467, 496, 515, 562, 565, 567, 568, 612, 627, 628, 630, 653, 673, 701, 822, 824, 862, 866, 874, 875, 881, 963, 979, 1009, 1010, 1011, 1012, 1013, 1027, 1031, 1034, 1038, 1039, 1040, 1041, 1042], "098": [77, 121, 137, 183, 187, 220, 1011], "empiricalcovari": [79, 81, 82, 411, 469, 473, 474, 475, 476, 995], "unbias": [79, 407, 411, 414, 437, 550, 656, 672, 674, 687, 985, 1020], "shrunk": [79, 104, 307, 314, 323, 422, 473, 475, 476, 479, 480, 481, 549, 882, 983, 1003, 1026, 1027], "base_x_train": 79, "base_x_test": 79, "coloring_matrix": [79, 80], "shrunkcovari": [79, 104, 411, 469, 470, 473, 474, 475], "empirical_covari": [79, 411, 1047], "log_likelihood": [79, 610, 611, 796, 797], "negative_loglik": 79, "real_cov": [79, 80, 470, 473, 474, 475, 476], "emp_cov": [79, 81, 83, 478, 481], "loglik_r": 79, "inv": [79, 83, 302], "formula": [79, 80, 406, 409, 411, 422, 473, 475, 516, 517, 518, 590, 643, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 676, 678, 704, 728, 754, 763, 978, 983, 985, 989, 994, 995, 999, 1003, 1036, 1038, 1040], "asymptot": [79, 80, 190, 368, 411, 474, 536, 729, 985, 988, 1041], "criterion": [79, 80, 174, 189, 209, 252, 274, 318, 384, 391, 396, 409, 414, 441, 445, 449, 452, 459, 462, 532, 537, 539, 546, 553, 554, 557, 558, 559, 560, 564, 565, 566, 606, 627, 644, 645, 648, 656, 666, 667, 668, 669, 671, 672, 674, 676, 677, 678, 680, 691, 695, 710, 797, 898, 903, 904, 905, 906, 907, 909, 910, 911, 912, 985, 988, 989, 997, 1002, 1005, 1012, 1024, 1027, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1048], "chen": [79, 80, 411, 416, 422, 475, 725, 755, 981, 989, 1034, 1037, 1038, 1039, 1041, 1044, 1045, 1046, 1047], "Its": [79, 260, 264, 378, 384, 396, 414, 419, 538, 984, 985, 994, 997, 1003, 1009, 1014, 1034, 1048], "tuned_paramet": [79, 139, 260], "loglik_lw": 79, "loglik_oa": 79, "unseen": [79, 124, 147, 190, 205, 209, 275, 291, 344, 370, 374, 384, 395, 396, 409, 413, 847, 878, 890, 980, 989, 995, 997, 999, 1005, 1016, 1034, 1039, 1043], "loglog": [79, 234], "lik_max": 79, "amax": 79, "lik_min": 79, "amin": 79, "vline": [79, 98, 188, 189, 190, 202, 262, 275, 308], "shrinkage_": [79, 80, 473, 475], "magenta": [79, 128], "purpl": [79, 93, 226], "cyan": [79, 116, 171, 296], "realli": [79, 173, 190, 386, 387, 388, 989, 995, 1014, 1045], "interestingli": [79, 150, 999], "outperform": [79, 87, 133, 280, 312, 394, 413, 416, 452, 462, 991, 999], "403": [79, 84, 266, 1011], "plot_covariance_estim": [79, 84, 1011], "fa": [79, 95, 106, 107, 108, 168, 388, 414, 473, 476, 532, 541, 798, 823, 1011], "inspir": [80, 130, 172, 219, 382, 394, 416, 561, 562, 926, 979, 1009, 1040], "mmse": [80, 411, 422, 475], "tran": 80, "octob": [80, 377, 1031, 1038, 1044, 1045, 1047], "choleski": [80, 201, 219, 391, 471, 472, 478, 527, 611, 648, 650, 651, 654, 655, 656, 658, 659, 669, 672, 674, 680, 682, 683, 687, 796, 797, 985, 1034, 1038, 1040, 1043, 1046, 1047], "toeplitz": 80, "simul": [80, 98, 171, 195, 238, 262, 1014], "n_samples_rang": [80, 234], "lw_mse": 80, "oa_ms": 80, "lw_shrinkag": 80, "oa_shrinkag": 80, "error_norm": [80, 82, 469, 470, 471, 472, 473, 474, 475, 476], "darkorang": [80, 100, 105, 106, 202, 212, 225, 248, 249, 250, 253, 269, 271, 290, 296, 297, 329, 360], "262": [80, 84, 212, 220, 1011, 1031], "plot_lw_vs_oa": [80, 84, 1011], "convex": [80, 106, 125, 126, 168, 179, 208, 220, 222, 349, 354, 409, 411, 414, 422, 446, 452, 462, 473, 475, 476, 479, 480, 481, 658, 676, 692, 985, 986, 992, 993, 1003, 1011, 1044], "d_": [81, 409, 414, 648, 669, 680, 777, 986, 991], "mle": [81, 104, 541, 1039, 1042], "resist": [81, 82, 382], "erron": [81, 82, 414, 985, 1032, 1039, 1043], "breakdown": [81, 82, 218, 679, 985], "n_": [81, 82, 174, 262, 320, 409, 414, 416, 646, 652, 685, 696, 981, 985, 989, 991, 992, 996, 999, 1001, 1004, 1005], "smallest": [81, 82, 201, 285, 358, 377, 409, 411, 418, 527, 541, 630, 654, 655, 656, 682, 683, 690, 694, 695, 798, 801, 802, 812, 817, 871, 1005, 1044], "pure": [81, 82, 87, 185, 201, 396, 409, 473, 479, 496, 557, 558, 559, 560, 564, 565, 566, 705, 715, 785, 794, 909, 910, 911, 912, 999], "rousseuw": [81, 82], "rousseeuw": [81, 82, 409, 411, 469, 474, 791, 792, 995], "ass": [81, 82, 411, 474], "1984": [81, 82, 411, 474, 909, 910, 1005], "wilson": [81, 379, 1031, 1034], "hilferti": 81, "1931": 81, "proceed": [81, 150, 377, 379, 409, 420, 439, 444, 511, 696, 708, 725, 755, 848, 898, 989, 1001, 1002, 1003], "academi": [81, 848], "688": [81, 298, 299, 1011], "n_outlier": [81, 82, 129, 204, 230, 292], "gen_cov": 81, "ey": [81, 82, 249, 253, 340, 377, 534, 541, 550], "outliers_cov": 81, "mincovdet": [81, 82, 411, 469, 470, 473, 475, 476, 995, 1031, 1038], "robust_cov": 81, "nmcd": 81, "nmle": 81, "26253567e": 81, "06695631e": 81, "22747343e": 81, "23773583": 81, "24640578": 81, "51963999": 81, "inlier": [81, 129, 204, 230, 240, 307, 396, 411, 431, 469, 563, 671, 677, 847, 878, 890, 904, 905, 907, 985, 995, 1038, 1039, 1044], "inlier_plot": 81, "outlier_plot": 81, "get_xlim": [81, 196, 206, 307], "zz": 81, "mahal_emp_cov": 81, "emp_cov_contour": 81, "pubu_r": 81, "mahal_robust_cov": 81, "robust_contour": 81, "ylorbr_r": 81, "dist": [81, 223, 234, 386, 469, 470, 471, 472, 473, 474, 475, 476, 699, 762, 768, 841, 842], "borderaxespad": 81, "cubic": [81, 419], "suggest": [81, 99, 116, 120, 171, 174, 262, 340, 368, 381, 382, 389, 396, 413, 414, 416, 469, 474, 565, 645, 826, 983, 985, 986, 994, 1004, 1025, 1035, 1042, 1045, 1048], "emp_mah": 81, "markeredgewidth": [81, 266], "rm": [81, 156, 386, 390, 411], "mahal": 81, "robust_mah": 81, "location_": [81, 82, 469, 470, 471, 472, 473, 474, 475, 476], "261": [81, 84, 1011], "plot_mahalanobis_dist": [81, 84, 1011], "ransac": [81, 168, 179, 207, 218, 220, 524, 649, 657, 671, 678, 679, 1011], "compens": [82, 170, 172, 177, 201, 219, 263, 411, 414], "soon": [82, 396, 1023], "5n_": 82, "johanna": 82, "hardin": 82, "rock": 82, "decemb": [82, 158, 377, 664, 685, 686, 1031, 1039, 1041, 1043, 1046], "928": [82, 437], "946": 82, "zoubir": 82, "koivunen": 82, "chakhchoukh": 82, "muma": 82, "tutori": [82, 139, 140, 141, 142, 190, 203, 219, 262, 371, 382, 383, 388, 390, 395, 403, 409, 452, 462, 691, 1004, 1023, 1034], "treatment": [82, 170, 376, 414, 469, 474], "concept": [82, 119, 124, 237, 271, 371, 382, 394, 408, 409, 415, 417, 981, 989, 992, 1005, 1014], "magazin": [82, 418], "font_manag": [82, 291, 339], "range_n_outli": 82, "err_loc_mcd": 82, "err_cov_mcd": 82, "err_loc_emp_ful": 82, "err_cov_emp_ful": 82, "err_loc_emp_pur": 82, "err_cov_emp_pur": 82, "outliers_index": 82, "outliers_offset": 82, "inliers_mask": 82, "pure_x": 82, "pure_loc": 82, "pure_emp_cov": 82, "font_prop": 82, "fontproperti": [82, 291, 339], "hat": [82, 106, 258, 262, 290, 320, 380, 407, 411, 415, 416, 980, 985, 986, 989, 991, 993], "_2": [82, 158, 344, 414, 417, 531, 537, 545, 546, 646, 652, 985, 993, 1003, 1004], "x_size": 82, "561": [82, 84, 409, 1011], "plot_robust_vs_empirical_covari": [82, 84, 1011], "graphicallasso": [83, 411, 469, 470, 472, 473, 474, 475, 476, 478, 1039, 1047], "largest": [83, 98, 119, 150, 203, 379, 409, 411, 414, 443, 527, 541, 557, 558, 559, 560, 564, 565, 588, 709, 796, 797, 817, 839, 871, 909, 910, 911, 912, 938, 986, 989, 999, 1004, 1005], "invert": [83, 101, 147, 223, 354, 355, 394, 411, 417, 630, 689, 693, 999, 1040], "fairli": [83, 125, 224, 277, 302, 390, 409, 559, 560, 699, 990, 1023], "tweak": [83, 237, 413, 955, 988, 1025, 1042], "readabl": [83, 263, 320, 387, 388, 390, 403, 534, 1040, 1043, 1044, 1045, 1046], "make_sparse_spd_matrix": [83, 529, 1048], "prng": 83, "prec": [83, 231, 527, 989], "smallest_coef": [83, 527], "largest_coef": [83, 527], "multivariate_norm": [83, 87, 247, 469, 470, 471, 472, 473, 474, 475, 476], "ledoit_wolf": [83, 411, 1044], "prec_": 83, "lw_cov_": 83, "lw_prec_": 83, "this_cov": 83, "this_prec": 83, "ma": [83, 313, 340, 985, 1037, 1042], "masked_equ": 83, "set_facecolor": [83, 247], "set_axis_bgcolor": 83, "plot_sparse_cov": [83, 84, 1011], "cross_decomposit": [85, 86, 87, 88, 168, 238, 371, 1011, 1035, 1036, 1038, 1039, 1040], "plscanon": [86, 482, 484, 485, 1012, 1027, 1035, 1039, 1041, 1043, 1045], "plsregress": [86, 87, 1012, 1027, 1038, 1041, 1043, 1045, 1047], "appar": [86, 991, 1014], "scatterplot": [86, 180, 262], "maxim": [86, 87, 91, 96, 107, 126, 180, 252, 253, 263, 267, 271, 272, 295, 312, 319, 340, 344, 358, 362, 379, 396, 406, 409, 412, 414, 418, 419, 549, 594, 610, 611, 644, 645, 648, 669, 679, 680, 720, 798, 801, 802, 812, 870, 876, 886, 983, 985, 988, 989, 992, 994, 1004, 1020, 1023, 1034, 1036, 1041, 1044, 1046], "weak": [86, 124, 127, 205, 219, 268, 413, 557, 558, 559, 564, 565, 566, 630, 992, 1014, 1047], "var": [86, 87, 102, 116, 150, 181, 262, 379, 383, 418, 641, 645, 903, 904, 905, 906, 907, 989, 1039], "corr": [86, 174, 262], "corrcoef": [86, 107], "plsca": [86, 483], "x_train_r": 86, "y_train_r": 86, "x_test_r": 86, "y_test_r": 86, "221": [86, 131, 1034], "222": [86, 131, 331, 333, 1004, 1011], "yj": [86, 311], "noiz": 86, "xb": [86, 880], "11693539": 86, "19803308": 86, "12190903": 86, "77322639": 86, "77777215": 86, "04995982": 86, "34990341": 86, "37257991": 86, "27597342": 86, "95433992": 86, "9403917": 86, "02818216": 86, "06880943": 86, "08604995": 86, "05216586": 86, "72295655": 86, "70432034": 86, "79769376": 86, "exce": [86, 283, 318, 419, 442, 515, 602, 649, 658, 1040, 1043, 1045], "198": [86, 88, 313, 315, 1011, 1031], "plot_compare_cross_decomposit": [86, 88, 1011], "multilabel": [86, 89, 94, 168, 229, 245, 269, 280, 282, 284, 330, 377, 384, 385, 396, 404, 482, 487, 496, 497, 508, 509, 515, 523, 541, 557, 564, 567, 658, 674, 675, 703, 707, 713, 725, 728, 729, 733, 734, 737, 738, 753, 755, 782, 783, 786, 787, 793, 795, 827, 830, 832, 834, 858, 865, 868, 872, 874, 885, 906, 909, 911, 927, 951, 952, 953, 1000, 1011, 1012, 1013, 1025, 1027, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1047], "pcr": [87, 412], "pl": [87, 205, 324, 379, 412, 482, 483, 484, 485, 1036], "greedili": [87, 150, 409, 413, 418, 460], "despit": [87, 199, 201, 219, 236, 294, 396, 400, 411, 627, 628, 630, 985, 992, 1014, 1039, 1040], "suffer": [87, 121, 173, 285, 307, 354, 368, 409, 416, 544, 762, 984, 985, 989, 992, 1024, 1040], "dive": [87, 382, 388], "explained_variance_": [87, 534, 541, 544, 1024, 1038], "onto": [87, 223, 224, 235, 307, 394, 414, 417, 421, 446, 448, 461, 533, 539, 543, 627, 628, 630, 688, 983, 987, 992], "recommend": [87, 121, 165, 218, 231, 237, 258, 271, 311, 319, 344, 368, 369, 371, 376, 380, 382, 384, 388, 390, 394, 399, 412, 413, 414, 416, 418, 438, 447, 449, 451, 460, 496, 508, 535, 538, 544, 549, 561, 562, 569, 582, 583, 589, 606, 611, 631, 632, 638, 670, 676, 692, 697, 698, 700, 702, 804, 810, 812, 820, 857, 864, 866, 873, 880, 881, 886, 887, 889, 890, 891, 892, 894, 903, 906, 938, 957, 978, 986, 989, 991, 993, 996, 999, 1001, 1003, 1004, 1005, 1008, 1014, 1027, 1033, 1034, 1040, 1041, 1042, 1043, 1045, 1047], "linearregress": [87, 136, 170, 180, 191, 196, 197, 198, 199, 204, 207, 218, 233, 237, 239, 258, 276, 308, 364, 382, 394, 395, 410, 416, 465, 570, 632, 635, 646, 649, 652, 654, 671, 672, 687, 985, 989, 999, 1023, 1035, 1036, 1040, 1043, 1044, 1045, 1047], "retriev": [87, 171, 205, 269, 354, 362, 386, 396, 414, 417, 418, 468, 496, 590, 593, 594, 626, 653, 663, 684, 699, 725, 729, 731, 732, 755, 780, 836, 840, 873, 899, 985, 987, 989, 991, 1009, 1010, 1024, 1036, 1041, 1043, 1045, 1048], "026": [87, 232, 245, 1011], "predit": 87, "pca_2": 87, "673": [87, 388], "499": [87, 88, 150, 379, 388, 1011], "plot_pcr_vs_pl": [87, 88, 1011], "051": [90, 94, 472, 1011], "plot_digits_last_imag": [90, 94, 1011], "iris": [91, 268, 269, 1022], "150x4": 91, "legend_el": [91, 129, 214, 265, 288, 344], "flower": [91, 105, 271, 506, 507, 989, 1009], "versicolor": [91, 271, 272, 504], "differenti": [91, 269, 416, 419, 559, 560, 619, 622], "unus": [91, 102, 103, 172, 198, 222, 224, 463, 579, 762, 770, 978, 986, 1031, 1039, 1041, 1042, 1044, 1046], "3rd": [91, 161, 836, 879, 991, 999], "eigenvalu": [91, 252, 406, 409, 411, 452, 462, 469, 470, 471, 472, 473, 474, 475, 476, 535, 541, 549, 673, 688, 689, 691, 693, 695, 867, 981, 986, 999, 1033, 1037, 1040, 1041, 1042, 1043], "plot_iris_dataset": [91, 94, 1011], "easi": [92, 172, 209, 219, 250, 260, 262, 340, 353, 364, 377, 388, 390, 394, 395, 409, 416, 500, 504, 510, 868, 978, 984, 988, 996, 999, 1009, 1010, 1014, 1025, 1041, 1046, 1047], "make_gaussian_quantil": [92, 113, 115, 378, 470, 474, 475, 476, 520], "321": [92, 186, 220, 1011], "323": [92, 234], "y2": [92, 115, 716, 990], "324": [92, 377], "325": 92, "326": 92, "278": [92, 94, 379, 841, 842, 1011], "plot_random_dataset": [92, 94, 1011], "make_multilabel_classif": [93, 238, 378, 515, 536, 787, 832, 833, 989, 1033, 1034, 1036, 1042], "degener": [93, 248, 421, 440, 454, 533, 720, 985, 989, 1040, 1044, 1045], "vocabulari": [93, 216, 353, 354, 394, 417, 588, 589, 590, 591, 991, 1016, 1025, 1031, 1033, 1036, 1039, 1042, 1044], "w0": 93, "w1": [93, 416, 657], "make_ml_clf": 93, "ff3333": 93, "0198e1": 93, "bf5fff": 93, "fcd116": 93, "ff7216": 93, "4dbd33": 93, "87421f": 93, "plot_2d": [93, 222], "p_c": [93, 523], "p_w_c": [93, 523], "allow_unlabel": [93, 238, 523], "return_distribut": [93, 523], "sep": [93, 271], "p_w": 93, "118": [93, 94, 590, 1011], "plot_random_multilabel_dataset": [93, 94, 1011], "618": [94, 134, 137, 260, 1011], "blind": [95, 98, 108, 168, 200, 353, 414, 533, 541, 1011], "fastica": [95, 108, 168, 200, 414, 532, 535, 541, 1011, 1024, 1031, 1033, 1039, 1045, 1046], "precomput": [95, 96, 97, 108, 168, 179, 200, 220, 225, 237, 285, 287, 297, 384, 391, 394, 396, 409, 417, 420, 432, 440, 441, 444, 445, 446, 450, 452, 457, 465, 471, 482, 483, 484, 524, 531, 535, 537, 540, 542, 548, 554, 556, 558, 560, 562, 565, 568, 570, 610, 611, 620, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 681, 682, 684, 685, 688, 690, 691, 692, 696, 773, 777, 780, 791, 792, 834, 835, 843, 844, 845, 847, 848, 849, 851, 852, 853, 859, 902, 903, 904, 905, 906, 907, 910, 912, 965, 966, 967, 981, 987, 992, 1004, 1010, 1011, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "chapter": [96, 364, 384, 409, 414, 416, 419, 530, 532, 534, 614, 619, 622, 643, 979, 982, 985, 1004, 1005], "decompos": [96, 100, 116, 309, 408, 534, 538, 709, 822, 938, 984, 985, 989, 1006, 1026, 1027], "basicconfig": 96, "asctim": 96, "levelnam": 96, "faces_cent": 96, "image_shap": [96, 239], "constrained_layout": [96, 172, 222, 313, 314, 322], "set_constrained_layout_pad": 96, "w_pad": [96, 122, 359], "h_pad": [96, 122, 359], "set_edgecolor": 96, "vec": [96, 417, 538, 540, 547], "im": [96, 107, 273, 289, 1013], "pad": [96, 122, 165, 172, 222, 240, 353, 359, 417, 588, 589, 591], "initialis": [96, 538, 540, 547, 1031, 1039, 1040], "mathbb": [96, 116, 156, 412, 989, 996, 1004], "4096": [96, 377, 414, 495], "human": [96, 172, 353, 403, 409, 414, 858, 859, 989, 996, 1040], "friendli": [96, 369, 382, 390, 414, 894, 1001, 1002, 1009, 1010], "visualis": [96, 99, 107, 238, 544, 799, 800, 803, 815, 816, 817, 818, 819, 992, 1010], "64x64": [96, 377, 414], "singular": [96, 391, 406, 409, 412, 451, 453, 482, 483, 484, 485, 521, 524, 534, 538, 540, 541, 544, 547, 549, 550, 657, 672, 673, 674, 687, 938, 985, 986, 988, 1026, 1027, 1037, 1038], "scalar": [96, 320, 388, 396, 410, 419, 421, 464, 467, 524, 533, 615, 616, 617, 622, 623, 627, 628, 737, 741, 917, 925, 981, 993, 995, 999, 1003, 1009, 1041, 1042, 1045, 1047], "noise_variance_": [96, 189, 532, 534, 541, 656, 1038, 1045], "pixelwis": 96, "pca_estim": 96, "nmf_estim": 96, "multivari": [96, 171, 374, 411, 414, 417, 473, 516, 517, 518, 627, 628, 629, 630, 649, 671, 678, 679, 836, 837, 838, 839, 840, 983, 985, 988, 991, 1009, 1016, 1024, 1027], "subcompon": [96, 414], "ica_estim": 96, "15e": 96, "sparsepca": [96, 531, 533, 534, 535, 537, 539, 540, 541, 542, 545, 546, 1031, 1038, 1039, 1041, 1042, 1044, 1045, 1046], "batch_pca_estim": 96, "minibatchdictionarylearn": [96, 99, 370, 414, 531, 538, 542, 545, 546, 1032, 1034, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "batch_dict_estim": 96, "enhanc": [96, 205, 381, 382, 386, 394, 396, 409, 989, 1007, 1029, 1030, 1031, 1032, 1033, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "consum": [96, 364, 376, 384, 396, 400, 409, 413, 416, 449, 801, 802, 861, 862, 945, 946, 985, 1014, 1036, 1048], "kmeans_estim": 96, "factoranalysi": [96, 104, 107, 414, 544, 1032, 1034, 1043, 1045], "heteroscedast": [96, 104, 126, 203, 414, 877, 889], "fa_estim": 96, "wrap": [96, 118, 126, 285, 376, 384, 396, 433, 508, 585, 586, 657, 676, 827, 885, 979, 989, 992, 1004, 1009, 1031, 1036, 1039, 1041, 1042, 1044, 1046], "colormap": [96, 115, 161, 193, 210, 340, 345, 359, 697, 1044], "uv": [96, 414], "x_1": [96, 145, 156, 198, 202, 412, 414, 416, 419, 613, 625, 657, 874, 901, 902, 985, 991, 993, 999, 1003], "x_n": [96, 414, 901, 902, 991, 993, 1003], "dict_pos_dict_estim": 96, "positive_dict": [96, 531, 537, 545, 546], "dict_pos_code_estim": 96, "fit_algorithm": [96, 531, 537, 1046, 1047], "cd": [96, 150, 379, 380, 382, 386, 388, 414, 471, 472, 478, 531, 537, 539, 540, 543, 545, 546, 547, 985, 1025, 1036, 1046], "positive_cod": [96, 531, 537, 542, 545, 546], "dict_pos_estim": 96, "264": [96, 108, 1011], "plot_faces_decomposit": [96, 108, 1011], "imagin": [97, 153, 237, 344, 413, 414, 417, 985], "plai": [97, 127, 155, 184, 210, 256, 296, 336, 337, 368, 394, 1025], "microphon": 97, "s1": [97, 150, 161, 189, 190, 379, 1024], "sinusoid": [97, 114, 126, 185, 236, 982, 1024], "s2": [97, 150, 161, 189, 190, 379, 550, 1024], "sawtooth": [97, 1024], "saw": [97, 202, 205, 1024], "tooth": [97, 1024], "s_": [97, 266, 986, 997, 999, 1024], "a_": [97, 406, 409, 538, 540, 547, 985, 1024], "mixing_": [97, 98, 533, 1024], "prove": [97, 1014], "revert": [97, 630, 632, 633, 1038, 1043], "unmix": [97, 421, 533], "allclos": [97, 130, 1001, 1024], "mean_": [97, 266, 532, 533, 534, 539, 541, 543, 881, 999, 1024, 1039], "steelblu": [97, 98, 135], "sig": 97, "347": [97, 108, 1011], "plot_ica_blind_source_separ": [97, 108, 1011], "gpr": [97, 152, 153, 154, 160, 161, 162, 163, 168, 496, 610, 611, 613, 614, 615, 616, 621, 622, 623, 624, 625, 1011, 1012, 1027, 1041], "ica": [98, 408, 421, 1005, 1026, 1027], "geometr": [98, 409, 688, 704, 730, 756, 986, 1039], "standard_t": 98, "s_pca_": 98, "s_ica_": 98, "plot_sampl": [98, 253], "axis_list": 98, "x_axi": [98, 209, 266], "y_axi": [98, 209], "quiver": 98, "hline": 98, "set_zord": 98, "354": [98, 108, 1011], "plot_ica_vs_pca": [98, 108, 1011], "ordinari": [98, 116, 168, 179, 180, 183, 185, 191, 197, 203, 204, 206, 218, 220, 320, 635, 646, 652, 654, 655, 656, 657, 672, 678, 682, 683, 687, 1003, 1011, 1012, 1027], "firstli": [99, 368, 394, 657, 1025], "undistort": 99, "noiseless": [99, 987], "omp": [99, 106, 200, 414, 531, 537, 542, 548, 664, 665, 685, 686, 1012, 1027, 1031, 1039], "promin": [99, 396], "reminisc": 99, "downsampl": 99, "show_with_diff": 99, "puor": 99, "22692": 99, "dico": 99, "n_steps_": [99, 449, 537, 538, 1044], "reconstruct_from_patches_2d": [99, 417, 583], "intercept": [99, 193, 210, 218, 349, 396, 482, 483, 484, 549, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 876, 880, 883, 901, 902, 908, 985, 987, 989, 994, 1003, 1004, 1034, 1036, 1040, 1041], "transform_algorithm": [99, 106, 531, 537, 542, 1047], "n1": 99, "atom": [99, 106, 414, 531, 537, 539, 542, 543, 545, 546, 653, 663, 684, 985, 1031, 1044], "transform_n_nonzero_coef": [99, 106, 531, 537, 542], "n2": 99, "n4": 99, "transform_alpha": [99, 106, 531, 537, 542, 1044], "set_param": [99, 107, 117, 123, 126, 172, 173, 181, 189, 190, 194, 205, 209, 235, 240, 275, 288, 317, 343, 354, 385, 396, 409, 410, 416, 419, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 796, 797, 798, 801, 802, 812, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 979, 995, 1016, 1023, 1031, 1037, 1038, 1039, 1044, 1045], "096": [99, 108, 1011], "plot_image_denois": [99, 108, 1011], "ipca": [100, 533, 534], "flip": [100, 582, 741, 938, 991, 1035, 1044], "incrementalpca": [100, 370, 414, 533, 535, 539, 541, 544, 1035, 1038, 1039, 1041, 1042, 1045], "x_ipca": 100, "x_pca": 100, "turquois": [100, 105, 106, 128, 207, 218, 225, 249, 250, 269], "x_transform": [100, 131, 237, 485, 531, 532, 533, 534, 535, 537, 539, 543, 566, 638, 639, 688, 689, 690, 691], "nmean": 100, "shadow": [100, 105, 106, 225, 329, 347, 355, 417], "scatterpoint": [100, 105, 225, 249, 329], "230": [100, 108, 195, 220, 584, 1011], "plot_incremental_pca": [100, 108, 1011], "nest": [101, 113, 168, 190, 237, 255, 257, 278, 280, 324, 369, 388, 396, 399, 409, 413, 419, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 462, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 504, 519, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 796, 797, 798, 801, 802, 803, 812, 823, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 978, 989, 992, 1011, 1031, 1032, 1035, 1037, 1038, 1039, 1045], "train_ax": 101, "test_ax": 101, "straight": [101, 191, 197, 199, 259, 344, 368], "inner": [101, 126, 263, 267, 283, 329, 368, 417, 443, 514, 582, 589, 648, 669, 680, 774, 776, 981, 989, 999, 1004, 1032, 1035, 1045], "x_test_kernel_pca": 101, "orig_data_ax": 101, "pca_proj_ax": 101, "kernel_pca_proj_ax": 101, "unfold": [101, 385, 986], "untangl": 101, "mind": [101, 170, 171, 172, 219, 311, 312, 353, 354, 364, 382, 403, 411, 413, 416, 646, 647, 704, 985, 1004, 1009, 1016, 1023], "investig": [101, 107, 113, 166, 348, 382, 985], "pca_back_proj_ax": 101, "kernel_pca_back_proj_ax": 101, "reli": [101, 119, 123, 150, 174, 189, 190, 280, 285, 318, 322, 353, 368, 369, 384, 387, 390, 391, 394, 396, 405, 406, 409, 414, 416, 417, 549, 585, 586, 593, 597, 607, 608, 825, 828, 866, 955, 978, 981, 983, 985, 989, 992, 999, 1004, 1014, 1039, 1040, 1041, 1045, 1047, 1048], "analyt": [101, 414, 419, 532, 620, 708, 979, 983, 989, 1008, 1014], "kernelridg": [101, 153, 236, 672, 982, 1035, 1048], "kernal": 101, "relianc": [101, 205], "536": [101, 108, 158, 285, 1011], "plot_kernel_pca": [101, 108, 1011], "aid": [102, 259, 409, 791, 792, 986, 1014, 1031, 1043], "kevin": [102, 643, 1033, 1035, 1037, 1038, 1041, 1042, 1043, 1045, 1046], "hugh": [102, 876, 1033, 1044], "pdf": [102, 150, 262, 290, 307, 379, 382, 409, 418, 442, 449, 531, 534, 537, 541, 641, 644, 649, 658, 664, 666, 667, 671, 676, 679, 682, 683, 685, 686, 692, 838, 839, 850, 857, 894, 896, 985, 1002, 1005, 1013, 1031], "30000": [102, 377], "pdf_z": 102, "plot_fig": [102, 198], "fig_num": [102, 198], "pca_scor": [102, 104], "vt": [102, 550], "full_matric": 102, "x_pca_axi": 102, "y_pca_axi": 102, "z_pca_axi": 102, "x_pca_plan": 102, "y_pca_plan": 102, "z_pca_plan": 102, "plot_surfac": [102, 172, 198], "plot_pca_3d": [102, 108, 1011], "1d": [102, 114, 116, 168, 172, 202, 234, 286, 289, 298, 299, 312, 347, 360, 382, 389, 391, 395, 396, 410, 415, 464, 467, 617, 633, 653, 657, 660, 663, 684, 703, 712, 713, 719, 728, 729, 733, 737, 741, 782, 783, 786, 795, 843, 844, 845, 846, 847, 849, 851, 852, 853, 866, 917, 921, 922, 952, 976, 990, 1011, 1016, 1023, 1031, 1036, 1037, 1038, 1040, 1044, 1045], "cla": 103, "plot_pca_iri": [103, 108, 1011], "homoscedast": [104, 233, 311, 989, 1039], "succe": [104, 185], "subspac": [104, 412, 416, 452, 515, 555, 556, 691, 695, 938, 983, 992, 995, 1001, 1014, 1024], "overestim": [104, 364, 413], "circumst": [104, 219, 992, 1009], "nip": [104, 379, 515, 541, 566, 641, 989], "604": [104, 541], "minka": [104, 541, 985], "deni": [104, 1033, 1034, 1038, 1039, 1040, 1046, 1047], "engemann": [104, 1033, 1034, 1038], "x_homo": 104, "x_hetero": 104, "fa_scor": 104, "shrunk_cov_scor": 104, "lw_score": 104, "n_components_pca": 104, "n_components_fa": 104, "n_components_pca_ml": 104, "axhlin": [104, 139, 191, 261, 265], "violet": [104, 1047], "plot_pca_vs_fa_model_select": [104, 108, 1011], "92461872": 105, "05306648": 105, "x_r": [105, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603], "x_r2": 105, "plot_pca_vs_lda": [105, 108, 1011], "ricker": 106, "sparsecod": [106, 414, 531, 537, 540, 548, 1038, 1039, 1041, 1043, 1045], "mexican": 106, "piecewis": [106, 320, 406, 980, 985, 999, 1005], "matter": [106, 253, 344, 364, 409, 410, 416, 567, 668, 676, 678, 985, 1035], "motiv": [106, 382, 384, 396, 981, 989, 999, 1014, 1044], "heavier": [106, 411, 985], "ricker_funct": 106, "ricker_matrix": 106, "d_fix": 106, "d_multi": 106, "first_quart": 106, "transform_n_nozero_coef": 106, "lasso_lar": [106, 531, 537, 542, 548, 1041], "n_nonzero": 106, "coder": [106, 542, 716], "flatnonzero": [106, 189, 261, 270, 271, 780], "soft": [106, 134, 135, 382, 396, 569, 570, 897, 905, 1003, 1014, 1036], "debias": 106, "lstsq": [106, 382, 657, 670], "rcond": 106, "260": [106, 108, 181, 220, 261, 297, 299, 1011, 1044], "plot_sparse_cod": [106, 108, 1011], "uncov": [107, 695], "inher": [107, 196, 364, 409, 414, 979, 981, 983, 984, 986, 990], "varimax": [107, 414, 532, 1043], "jona": [107, 1043], "sassenhagen": [107, 1043], "set_yticklabel": [107, 156, 165, 166, 174, 273, 355], "n_comp": [107, 177], "unrot": 107, "52106591": 107, "37741762": 107, "26934744": 107, "92329566": 107, "5804131": 107, "02449161": 107, "56485654": 107, "06694199": 107, "88096009": 107, "4472869": 107, "41691605": 107, "55390036": 107, "99918858": 107, "01915283": 107, "96228895": 107, "05840206": 107, "98633022": 107, "05752333": 107, "16052385": 107, "67443065": 107, "90809432": 107, "41726413": 107, "85857475": 107, "43847489": 107, "393": [107, 108, 1011], "plot_varimax_fa": [107, 108, 1011], "custom": [109, 147, 149, 168, 184, 210, 231, 241, 255, 261, 263, 266, 269, 270, 274, 278, 287, 292, 296, 317, 335, 337, 338, 340, 341, 343, 351, 353, 355, 374, 377, 380, 384, 389, 390, 391, 394, 395, 396, 408, 409, 410, 413, 419, 468, 489, 493, 494, 502, 504, 538, 540, 547, 549, 557, 558, 564, 565, 571, 573, 602, 631, 690, 699, 713, 798, 827, 865, 899, 906, 973, 978, 983, 989, 992, 1009, 1010, 1011, 1014, 1025, 1027, 1031, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1046, 1047, 1048], "developing_estim": [110, 1011], "sklearn_is_fit": [110, 111, 1011], "convent": [111, 262, 371, 382, 384, 385, 386, 388, 396, 427, 428, 431, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 469, 470, 471, 472, 473, 474, 475, 476, 508, 509, 531, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 547, 563, 566, 569, 570, 581, 582, 583, 588, 589, 591, 627, 628, 629, 630, 677, 688, 689, 690, 691, 718, 796, 797, 829, 830, 845, 847, 849, 853, 865, 873, 876, 877, 879, 882, 893, 894, 905, 932, 933, 989, 1017, 1031, 1038, 1039, 1042, 1044, 1045, 1047, 1048], "subclass": [111, 384, 419, 574, 955, 1036, 1039, 1044], "showcas": [111, 384], "statu": [111, 162, 324, 376, 386, 399, 496, 841, 842], "_is_fit": 111, "snippet": [111, 364, 382, 387, 390, 394, 405, 416, 417, 418, 979, 999, 1013, 1044], "customestim": 111, "classifiermixin": [111, 237, 382, 384, 396, 413, 1042], "kushan": 111, "kushansharma1": 111, "classes_": [111, 193, 210, 231, 237, 271, 327, 328, 382, 384, 396, 437, 438, 549, 550, 551, 553, 555, 557, 559, 561, 564, 567, 569, 593, 594, 610, 631, 658, 659, 666, 668, 674, 675, 676, 697, 700, 702, 787, 798, 801, 802, 812, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 843, 848, 851, 858, 861, 868, 869, 872, 882, 896, 897, 898, 901, 903, 906, 909, 911, 914, 989, 1000, 1003, 1032, 1035, 1036, 1038, 1041, 1043], "track": [111, 117, 125, 328, 382, 385, 386, 405, 534, 990, 1009, 1010, 1038, 1041], "notfittederror": [111, 396, 850, 973, 1035, 1037, 1040, 1041, 1047, 1048], "logic": [111, 369, 383, 384, 389, 405, 416, 1005, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "boolean": [111, 362, 377, 382, 384, 391, 410, 416, 417, 418, 464, 561, 562, 581, 582, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 629, 632, 633, 636, 649, 671, 699, 830, 836, 857, 864, 884, 917, 973, 979, 985, 991, 996, 999, 1005, 1031, 1034, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1045, 1046], "isolationforest": [112, 115, 137, 168, 204, 230, 240, 277, 307, 631, 827, 905, 995, 1011, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1048], "oob": [112, 113, 125, 137, 168, 416, 515, 564, 1010, 1011, 1033, 1044, 1048], "vote": [112, 119, 126, 132, 133, 134, 135, 137, 168, 197, 283, 344, 396, 397, 408, 501, 555, 556, 557, 560, 564, 565, 569, 570, 657, 829, 843, 844, 849, 851, 990, 992, 1011, 1012, 1023, 1027, 1031, 1034, 1036, 1041], "experi": [113, 156, 160, 170, 171, 172, 173, 177, 203, 280, 312, 348, 354, 355, 369, 376, 382, 385, 408, 413, 515, 727, 784, 985, 990, 1001, 1007, 1008, 1009, 1014, 1023, 1025], "depict": [113, 264, 416, 988], "zhu": [113, 416, 519, 553, 658, 896], "principl": [113, 160, 290, 355, 382, 394, 396, 397, 413, 416, 938, 978, 988, 992, 1003, 1038], "repeatedli": [113, 321, 364, 396, 409, 416, 419, 508, 546, 666, 667, 676, 677, 678, 780, 979, 993, 1020], "zou": [113, 189, 416, 519, 553, 656, 985, 1003], "rosset": [113, 416, 519, 553], "hasti": [113, 116, 117, 128, 150, 189, 261, 379, 413, 416, 519, 520, 553, 559, 560, 628, 656, 721, 722, 723, 831, 848, 894, 909, 910, 979, 983, 985, 990, 996, 1001, 1003, 1005], "2009": [113, 116, 117, 128, 185, 409, 413, 414, 416, 417, 519, 520, 528, 531, 537, 538, 540, 541, 544, 547, 553, 559, 560, 635, 671, 679, 696, 832, 909, 910, 937, 938, 985, 989, 990, 996, 1005], "349": [113, 388, 553], "360": [113, 553], "sphere": [113, 168, 221, 222, 225, 226, 227, 228, 285, 354, 415, 519, 589, 688, 689, 690, 691, 692, 763, 924, 983, 987, 992, 1011], "roughli": [113, 126, 190, 253, 272, 285, 312, 368, 396, 414, 417, 519, 986, 1031], "2_000": 113, "percent": [113, 492, 600, 1002], "predecessor": [113, 450, 456, 457, 1048], "mistak": [113, 147, 328, 364, 409, 413, 734, 872, 886, 887, 889, 890, 891, 892, 985, 990], "incorrect": [113, 170, 269, 330, 364, 382, 409, 607, 608, 632, 633, 733, 1031, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "consecut": [113, 124, 202, 407, 413, 417, 443, 447, 449, 450, 452, 456, 459, 462, 537, 538, 539, 546, 602, 645, 666, 667, 668, 676, 677, 678, 796, 797, 803, 836, 837, 838, 839, 840, 858, 859, 978, 999, 1025, 1039], "weak_learn": 113, "max_leaf_nod": [113, 119, 128, 201, 320, 362, 416, 557, 558, 559, 560, 561, 562, 564, 565, 566, 909, 910, 911, 912, 1034, 1040, 1042], "adaboost_clf": 113, "misclassification_error": 113, "dummyclassifi": [113, 265, 552, 989, 1032, 1034, 1035, 1036, 1038, 1039, 1040, 1041], "preval": [113, 317, 396, 700, 712, 989], "dummi": [113, 114, 201, 219, 237, 265, 371, 384, 387, 404, 874, 883, 999, 1005, 1027, 1032, 1034, 1035, 1036, 1038], "dummy_clf": [113, 551], "weak_learners_misclassification_error": 113, "dummy_classifiers_misclassification_error": 113, "475": 113, "692": 113, "surpass": [113, 344, 858, 859], "staged_predict": [113, 124, 127, 416, 553, 554, 559, 560, 561, 562, 1031, 1043], "conclud": [113, 171, 181, 219, 262, 355, 364, 397, 861], "boosting_error": 113, "missclassif": 113, "jitter": [113, 650, 654, 1042], "stagewis": 113, "estimator_errors_": [113, 553, 554], "estimator_weights_": [113, 553, 554], "weak_learners_info": 113, "layout": [113, 307, 394, 901, 902, 903, 906, 922, 1004, 1034, 1036, 1048], "get_figur": 113, "reweight": [113, 354, 396, 411, 416, 590, 591, 648, 669, 680], "formul": [113, 153, 162, 205, 271, 382, 411, 414, 417, 419, 422, 475, 549, 550, 557, 564, 650, 651, 654, 655, 656, 658, 659, 665, 670, 762, 768, 797, 903, 906, 909, 911, 985, 989, 990, 999, 1012, 1027, 1048], "mathemat": [113, 171, 189, 218, 265, 374, 379, 382, 396, 398, 411, 414, 415, 419, 549, 550, 557, 564, 635, 646, 656, 791, 792, 797, 859, 903, 906, 909, 911, 985, 989, 999, 1001, 1012, 1014, 1023, 1027, 1045], "th": [113, 240, 320, 362, 395, 409, 413, 416, 424, 441, 445, 451, 453, 459, 463, 472, 557, 558, 559, 560, 561, 562, 564, 565, 566, 593, 594, 632, 648, 649, 669, 671, 680, 696, 718, 779, 819, 882, 926, 979, 985, 989, 993, 996, 1003, 1004, 1046], "boil": [113, 385, 411], "forc": [113, 153, 186, 205, 285, 311, 353, 376, 380, 386, 404, 413, 416, 450, 457, 496, 606, 609, 646, 647, 652, 653, 657, 660, 661, 662, 663, 672, 673, 674, 681, 684, 687, 753, 777, 780, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 903, 904, 905, 906, 907, 919, 921, 922, 999, 1027, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1047], "067": [113, 137, 162, 1011], "plot_adaboost_multiclass": [113, 137, 1011], "drucker": [114, 416, 554], "1997": [114, 377, 414, 416, 535, 554, 690, 694, 985, 986, 989], "decisiontreeregressor": [114, 116, 241, 308, 317, 323, 360, 361, 387, 554, 556, 558, 559, 560, 562, 564, 565, 632, 633, 909, 912, 914, 933, 979, 1005, 1032, 1033, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "adaboostregressor": [114, 400, 416, 553, 562, 1033, 1034, 1037, 1040, 1041, 1044, 1046, 1047], "regr_1": [114, 360, 361], "regr_2": [114, 360, 361], "y_1": [114, 360, 361, 412, 989, 993, 1003], "y_2": [114, 360, 361, 993], "425": [114, 137, 223, 615, 1011], "plot_adaboost_regress": [114, 137, 1011], "stump": [115, 416, 559, 1042], "puriti": [115, 913, 915], "plot_adaboost_twoclass": [115, 137, 1011], "bdt": 115, "plot_color": [115, 359], "br": 115, "plot_step": [115, 122, 359], "class_nam": [115, 256, 882, 913, 914, 915, 1005, 1047], "xx0": [115, 631], "xx1": [115, 631], "twoclass_output": 115, "plot_rang": 115, "614": [115, 137, 1011], "irreduc": [116, 989], "dark": [116, 171, 340, 377, 1048], "light": [116, 377], "beam": [116, 1031], "pointwis": [116, 160, 420, 444], "offset": [116, 177, 394, 411, 414, 469, 508, 509, 563, 632, 633, 641, 642, 644, 645, 677, 727, 774, 776, 847, 905, 989, 1003, 1023, 1039], "bootstrap": [116, 117, 125, 165, 265, 274, 319, 413, 416, 554, 555, 556, 557, 558, 563, 564, 565, 927, 960, 985, 1031, 1032, 1034, 1036, 1039, 1041, 1044], "stem": [116, 124, 173, 200, 253, 413, 417, 981, 991], "tibshirani": [116, 117, 128, 150, 189, 261, 379, 413, 416, 520, 559, 560, 628, 656, 721, 722, 723, 831, 848, 909, 910, 979, 983, 985, 990, 996, 1005], "friedman": [116, 117, 128, 261, 411, 413, 416, 478, 516, 517, 518, 520, 558, 559, 560, 565, 593, 594, 831, 909, 910, 912, 983, 985, 990, 996, 1005], "springer": [116, 117, 128, 261, 407, 409, 413, 414, 416, 520, 535, 559, 560, 690, 694, 696, 705, 720, 725, 739, 740, 755, 796, 909, 910, 986, 989, 990, 996, 1005], "0255": 116, "0003": 116, "0152": 116, "0098": 116, "0196": 116, "0004": [116, 312], "0092": 116, "baggingregressor": [116, 400, 416, 555, 912, 979, 1034, 1037, 1039, 1042, 1046, 1047], "n_repeat": [116, 120, 127, 149, 171, 173, 174, 262, 280, 317, 413, 515, 634, 813, 814, 997], "knn": [116, 134, 141, 165, 288, 293, 294, 297, 312, 319, 329, 353, 416, 602, 850, 896, 897, 992, 1002, 1023, 1037], "y_predict": [116, 384, 1031], "y_error": [116, 207], "y_nois": 116, "y_bia": 116, "y_var": 116, "083": [116, 137, 260, 1011], "plot_bias_vari": [116, 137, 1011], "z_i": [117, 993], "y_i": [117, 320, 348, 407, 416, 980, 981, 985, 989, 993, 1003, 1004, 1005], "whilst": [117, 224], "practition": [117, 205], "suitabl": [117, 126, 185, 187, 205, 302, 355, 376, 377, 388, 391, 409, 414, 417, 452, 462, 468, 487, 505, 508, 627, 635, 836, 837, 840, 875, 876, 899, 954, 983, 985, 988, 999, 1001, 1003, 1009, 1013, 1025, 1045, 1046], "ed": [117, 128, 409, 416, 520, 559, 560, 1001, 1031, 1038], "p592": 117, "593": 117, "kian": [117, 1036, 1046, 1047], "ho": [117, 416, 555, 556, 989, 1036, 1039, 1040, 1045], "hui": [117, 189, 538, 540, 547, 656, 985], "ordereddict": 117, "warm_start": [117, 157, 194, 320, 384, 388, 396, 416, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 610, 646, 648, 649, 652, 658, 660, 662, 666, 667, 668, 669, 676, 677, 678, 680, 796, 797, 850, 858, 859, 995, 1012, 1027, 1031, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1045, 1047], "disabl": [117, 314, 324, 353, 380, 382, 400, 417, 449, 460, 468, 537, 538, 539, 546, 559, 560, 561, 562, 860, 899, 921, 922, 999, 1037, 1040, 1044, 1046], "trajectori": 117, "ensemble_clf": 117, "oob_scor": [117, 416, 555, 556, 557, 558, 564, 565, 1036, 1038], "log2": [117, 211, 242, 557, 558, 559, 560, 564, 565, 909, 910, 911, 912, 990], "error_r": 117, "min_estim": 117, "max_estim": 117, "oob_error": 117, "oob_score_": [117, 555, 556, 557, 558, 559, 560, 564, 565, 1033, 1047], "clf_err": 117, "434": [117, 137, 157, 159, 1011], "plot_ensemble_oob": [117, 137, 1011], "betatim": [118, 132, 1046], "leak": [118, 267, 353, 364, 410, 413, 861, 886, 887, 889, 890, 891, 892, 999, 1031, 1038, 1041, 1047, 1048], "80_000": 118, "x_full_train": 118, "y_full_train": 118, "x_train_ensembl": 118, "x_train_linear": 118, "y_train_ensembl": 118, "y_train_linear": 118, "gradientboostingclassifi": [118, 125, 128, 309, 364, 394, 553, 561, 632, 633, 990, 996, 1031, 1032, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "random_forest": 118, "gradient_boost": [118, 1033, 1034, 1040], "histgradientboostingclassifi": [118, 119, 317, 318, 319, 320, 322, 324, 369, 559, 564, 632, 633, 979, 1009, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "randomtreesembed": [118, 131, 223, 416, 911, 1032, 1039, 1040, 1044, 1045, 1046], "random_tree_embed": 118, "rt_model": 118, "randomtreesembeddingrandomtreesembed": 118, "rf_appli": 118, "rf_leaves_yield": 118, "kw_arg": [118, 865, 999, 1037], "rf_model": 118, "0x7f550a4cdee0": 118, "functiontransformerfunctiontransform": 118, "gbdt_appli": 118, "gbdt_leaves_yield": 118, "gbdt_model": 118, "0x7f550a7bc670": 118, "roccurvedisplai": [118, 240, 243, 259, 271, 272, 317, 389, 787, 788, 995, 1028, 1041, 1047, 1048], "rt": 118, "rf": [118, 119, 132, 135, 136, 173, 317, 364, 416, 567, 569, 570], "gbdt": [118, 172, 317, 318, 323, 387, 416], "model_displai": 118, "588": [118, 133, 137, 1011], "plot_feature_transform": [118, 137, 1011], "hgbt": [119, 416], "fetch_california_h": [119, 124, 165, 166, 307, 319, 377, 395, 410, 1040, 1042], "20640": [119, 166, 377, 490], "n_core": 119, "only_physical_cor": 119, "unnecessari": [119, 247, 387, 443, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 705, 992, 999, 1010, 1014, 1034, 1036, 1041, 1042, 1044, 1047], "min_samples_leaf": [119, 125, 126, 173, 317, 320, 358, 416, 557, 558, 559, 560, 561, 562, 564, 565, 566, 909, 910, 911, 912, 1005, 1037], "early_stop": [119, 172, 209, 301, 320, 353, 396, 416, 561, 562, 666, 667, 668, 676, 677, 678, 858, 859, 1003, 1039, 1042, 1045, 1046], "return_train_scor": [119, 266, 313, 413, 798, 801, 802, 812, 824, 1037, 1038, 1040], "wast": [119, 388, 413, 414, 978], "plotli": [119, 263, 382, 399, 402], "cursor": [119, 263], "px": [119, 263], "make_subplot": 119, "shared_yax": 119, "subplot_titl": 119, "model_nam": [119, 240, 283], "colors_list": 119, "param_nam": [119, 263, 277, 323, 348, 400, 820, 828, 984, 1025], "param_": 119, "scatter_fig": 119, "mean_fit_tim": [119, 287, 798, 812], "error_x": [119, 263], "std_fit_tim": [119, 287, 798, 812], "error_i": [119, 263], "hover_data": [119, 263], "line_fig": 119, "scatter_trac": 119, "line_trac": 119, "add_trac": 119, "mean_score_tim": [119, 260, 263, 798, 812], "std_score_tim": [119, 263, 798, 812], "update_layout": [119, 263], "xaxis2": 119, "traceord": 119, "borderwidth": 119, "plateau": [119, 124, 149, 260, 264], "earlier": [119, 172, 205, 376, 382, 412, 832, 835, 999, 1007, 1029, 1032, 1044, 1046], "never": [119, 238, 364, 382, 391, 394, 403, 409, 410, 412, 413, 450, 457, 523, 555, 556, 557, 564, 861, 862, 981, 999, 1041, 1044], "hgbdt": 119, "domin": [119, 166, 174, 201, 206, 240, 271, 312, 377, 388, 407, 881, 991, 999, 1005, 1047], "ever": [119, 132, 391, 416, 1014], "disput": 119, "alwai": [119, 123, 126, 180, 201, 219, 227, 234, 265, 268, 272, 314, 337, 344, 348, 354, 364, 368, 369, 376, 380, 382, 383, 384, 388, 395, 396, 399, 407, 409, 410, 413, 416, 417, 418, 419, 432, 443, 449, 464, 465, 467, 469, 482, 483, 484, 488, 496, 508, 509, 544, 549, 551, 552, 554, 556, 558, 559, 560, 561, 562, 564, 565, 568, 570, 581, 588, 589, 591, 594, 611, 627, 628, 630, 632, 633, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 671, 672, 673, 676, 678, 679, 695, 705, 709, 715, 721, 722, 723, 731, 733, 734, 738, 781, 784, 785, 796, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 834, 835, 844, 845, 852, 853, 859, 866, 874, 879, 881, 884, 886, 887, 888, 889, 890, 891, 892, 894, 902, 903, 904, 906, 907, 909, 910, 912, 939, 948, 949, 978, 979, 981, 983, 985, 988, 989, 992, 995, 997, 1001, 1002, 1004, 1005, 1014, 1016, 1023, 1031, 1033, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1048], "thumb": [119, 177, 368, 382, 383, 394, 409, 658, 659, 666, 667, 668, 676, 677, 678, 901, 989], "plot_forest_hist_grad_boosting_comparison": [119, 137, 1011], "mdi": [119, 120, 127, 168, 169, 174, 175, 416, 464, 496, 564, 630, 634, 827, 861, 875, 997, 1011], "artifici": [120, 123, 130, 150, 166, 205, 222, 236, 304, 353, 377, 378, 379, 387, 406, 408, 409, 413, 414, 535, 696, 831, 858, 859, 982, 986, 988, 990, 996, 1001, 1005, 1010, 1014, 1031], "feature_importances_": [120, 121, 127, 150, 173, 174, 396, 416, 418, 553, 554, 557, 558, 559, 560, 564, 565, 566, 593, 594, 597, 909, 910, 911, 912, 1033, 1036, 1040], "estimators_": [120, 122, 238, 317, 396, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 570, 829, 830, 831, 832, 833, 834, 835, 1032, 1038, 1045], "forest_import": 120, "overcom": [120, 205, 368, 417], "permutation_import": [120, 121, 127, 173, 174, 317, 416, 553, 554, 557, 558, 559, 560, 564, 565, 566, 909, 910, 911, 912, 997, 1041, 1043, 1044], "importances_mean": [120, 127, 173, 174, 317, 634, 997], "357": [120, 150, 354, 379, 500, 902], "importances_std": [120, 634, 997], "omit": [120, 170, 171, 332, 387, 422, 475, 534, 666, 668, 676, 805, 807, 829, 830, 833, 836, 837, 838, 839, 840, 858, 987, 994], "830": [120, 137, 1011], "plot_forest_import": [120, 137, 1011], "multicollinear": [120, 121, 150, 168, 169, 173, 175, 268, 330, 412, 500, 564, 634, 655, 827, 985, 997, 1011], "hotter": 121, "job": [121, 250, 382, 386, 390, 416, 420, 437, 444, 446, 448, 450, 452, 457, 458, 461, 464, 467, 468, 472, 531, 535, 536, 537, 539, 542, 543, 545, 546, 548, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 602, 610, 634, 639, 657, 688, 689, 690, 691, 692, 693, 694, 773, 777, 780, 798, 801, 802, 804, 812, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 833, 834, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 860, 863, 896, 897, 899, 955, 1014, 1018], "five": [121, 248, 328, 331, 377, 531, 539, 545, 986, 992, 1004, 1014, 1031], "drawback": [121, 218, 981, 984], "img_shap": 121, "imp_reshap": 121, "092": [121, 189, 220, 242, 245, 354, 1011], "met": [121, 237, 384, 418, 534, 541, 627, 671, 985, 989, 1039], "plot_forest_importances_fac": [121, 137, 1011], "fourth": [122, 1016], "descend": [122, 627, 1041], "extratreesclassifi": [122, 131, 416, 418, 558, 564, 566, 911, 912, 990, 1034, 1035, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048], "decisiontre": [122, 1036], "consol": [122, 380, 1017], "extratre": [122, 131, 368, 1034], "9266666666666666": 122, "9933333333333333": 122, "9866666666666667": 122, "rdylbu": [122, 359], "plot_step_coars": 122, "plot_idx": 122, "model_titl": 122, "model_detail": 122, "blend": [122, 133, 313, 396, 413, 1009], "estimator_alpha": 122, "coarser": [122, 126], "regularli": [122, 280, 394, 991], "xx_coarser": 122, "yy_coars": 122, "z_points_coars": 122, "cs_point": 122, "829": [122, 137, 1011], "plot_forest_iri": [122, 137, 1011], "ordinalencod": [123, 133, 172, 173, 201, 240, 313, 322, 376, 396, 581, 837, 869, 874, 882, 979, 991, 999, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048], "equidist": [123, 692], "iowa": [123, 133, 240], "sale": [123, 240, 262, 989, 1014], "42165": 123, "categorical_columns_subset": 123, "bldgtype": 123, "garagefinish": 123, "lotconfig": 123, "masvnrtyp": [123, 133], "housestyl": [123, 133], "fireplacequ": 123, "extercond": 123, "exterqu": [123, 133], "poolqc": 123, "numerical_columns_subset": 123, "3ssnporch": 123, "fireplac": 123, "bsmthalfbath": 123, "halfbath": 123, "garagecar": [123, 133], "totrmsabvgrd": 123, "bsmtfinsf1": [123, 133], "bsmtfinsf2": 123, "grlivarea": 123, "screenporch": 123, "n_categorical_featur": [123, 561, 562, 632, 633], "n_numerical_featur": 123, "1460": [123, 133], "make_column_transform": [123, 133, 171, 232, 318, 410, 464, 466, 1039], "dropper": 123, "hist_drop": 123, "hist_one_hot": 123, "etc": [123, 201, 219, 257, 266, 267, 364, 368, 370, 382, 384, 386, 387, 394, 395, 396, 400, 406, 410, 413, 417, 489, 503, 527, 557, 558, 564, 565, 668, 676, 692, 718, 770, 798, 812, 832, 835, 865, 876, 909, 910, 911, 912, 913, 915, 921, 922, 932, 947, 978, 979, 983, 989, 992, 1009, 1010, 1014, 1031, 1038, 1040, 1041], "ordinal_encod": [123, 240], "use_encoded_valu": [123, 133, 173, 240, 313, 875, 999, 1043], "unknown_valu": [123, 133, 173, 240, 313, 875, 999, 1043, 1045, 1046], "verbose_feature_names_out": [123, 171, 172, 173, 244, 313, 320, 321, 322, 324, 410, 464, 467, 1044], "hist_ordin": 123, "hist_n": 123, "n_cv_fold": [123, 313, 804, 820, 825, 828], "dropped_result": 123, "one_hot_result": 123, "ordinal_result": 123, "native_result": 123, "figure_titl": 123, "plot_info": 123, "test_scor": [123, 125, 127, 209, 261, 264, 280, 313, 348, 358, 395, 413, 804, 820, 824, 825, 828], "y_limit": 123, "mape_cv_mean": 123, "mape_cv_std": 123, "c0": [123, 233, 313], "slowest": [123, 937, 938], "theori": [123, 236, 252, 348, 379, 408, 409, 413, 416, 690, 694, 725, 755, 893, 894, 938, 978, 985, 986, 988, 989, 990, 1004, 1005], "poorer": [123, 364, 414], "slight": [123, 206, 319, 416, 449, 1041], "acf": 123, "bde": 123, "isol": [123, 129, 230, 240, 354, 380, 382, 388, 399, 563, 847, 905, 1040, 1041], "bcde": 123, "histgradientboostingregressor__max_depth": 123, "histgradientboostingregressor__max_it": 123, "altogeth": [123, 388, 1039], "182": [123, 137, 146, 151, 153, 304, 388, 416, 1011], "plot_gradient_boosting_categor": [123, 137, 1011], "asid": [124, 209, 403, 559, 560, 561, 562, 666, 667, 668, 676, 678, 858, 859], "validation_fract": [124, 209, 320, 416, 559, 560, 561, 562, 666, 667, 668, 676, 678, 858, 859, 1003, 1039, 1045], "monitor": [124, 185, 209, 385, 396, 553, 554, 559, 560, 561, 562, 993, 1034, 1039, 1041, 1043], "worsen": 124, "n_estimators_": [124, 559, 560], "valuabl": [124, 382, 979, 1014], "strike": [124, 172, 205], "california": [124, 161, 165, 166, 307, 313, 319, 375, 379, 490, 1027], "x_val": [124, 997], "y_val": [124, 997], "gbm_full": 124, "gbm_early_stop": 124, "training_time_ful": 124, "n_estimators_ful": 124, "training_time_early_stop": 124, "estimators_early_stop": 124, "train_errors_without": 124, "val_errors_without": 124, "train_errors_with": 124, "val_errors_with": 124, "train_pr": 124, "val_pr": 124, "set_yscal": [124, 201, 804], "training_tim": [124, 353], "plot_gradient_boosting_early_stop": [124, 137, 1011], "fly": [125, 387, 390, 508, 509, 582, 1031, 1033, 1040], "pessimist": [125, 416], "cumul": [125, 201, 219, 409, 725, 734, 755, 878, 890, 999, 1003, 1038, 1040, 1041], "demand": [125, 417, 798, 812, 822, 823], "6860": 125, "special": [125, 171, 191, 219, 280, 295, 313, 340, 376, 378, 384, 388, 394, 396, 409, 412, 414, 464, 467, 553, 555, 559, 822, 913, 978, 983, 985, 987, 988, 989, 990, 992, 1005, 1038, 1041, 1043, 1045], "expit": [125, 191, 416, 561, 985, 1038], "ridgewai": [125, 416], "gbm": [125, 416, 1034], "x3": [125, 410, 1024], "binomi": [125, 128, 416, 553, 559, 561, 985, 1045], "acc": 125, "heldout_scor": 125, "devianc": [125, 128, 201, 219, 323, 416, 553, 558, 559, 561, 562, 565, 648, 669, 680, 721, 722, 723, 746, 748, 751, 910, 912, 985, 1005, 1032, 1041, 1042, 1044, 1045, 1047], "y_proba": [125, 128, 312, 396, 861], "staged_predict_proba": [125, 128, 553, 559, 561, 1031], "cv_estim": 125, "cv_clf": 125, "val_scor": 125, "cv_score": 125, "cumsum": [125, 201, 219, 1038], "oob_improvement_": [125, 416, 559, 560, 1033], "oob_best_it": 125, "test_best_it": 125, "cv_best_it": 125, "brew": [125, 380, 399], "oob_color": 125, "174": [125, 304, 388, 584], "212": [125, 150, 267, 330, 379, 469, 500, 995, 1023], "test_color": 125, "127": [125, 156, 163, 244, 245, 1011, 1031], "cv_color": 125, "192": [125, 388, 1031], "oob_lin": 125, "test_lin": 125, "cv_line": 125, "dashdot": [125, 153, 156, 240], "xticks_po": 125, "xticks_label": 125, "569": [125, 137, 150, 330, 379, 500, 592, 595, 596, 598, 1011], "plot_gradient_boosting_oob": [125, 137, 1011], "atleast_2d": [126, 384], "expected_i": 126, "amplitud": [126, 158, 160, 195, 985], "lognorm": [126, 159, 182, 251, 311, 999], "imposs": [126, 355, 1010], "all_model": 126, "min_samples_split": [126, 127, 128, 266, 274, 308, 319, 416, 557, 558, 559, 560, 564, 565, 566, 801, 802, 909, 910, 911, 912, 978, 1005, 1037], "gbr": 126, "gbr_l": 126, "y_med": 126, "unfortun": [126, 170, 171, 219, 390, 394, 416, 508, 509], "sinoisoid": 126, "highlight_min": [126, 190], "pbl": 126, "715413": 126, "750348": 126, "127128": 126, "253445": 126, "379763": 126, "933253": 126, "305438": 126, "622811": 126, "940184": 126, "827917": 126, "909909": 126, "145957": 126, "382005": 126, "667219": 126, "asymmetr": [126, 203, 396, 1036], "nor": [126, 265, 353, 364, 368, 387, 394, 417, 437, 446, 594, 925, 993, 1005, 1042], "917281": 126, "767498": 126, "617715": 126, "692901": 126, "144204": 126, "245961": 126, "347717": 126, "648026": 126, "412021": 126, "607752": 126, "803483": 126, "874771": 126, "354394": 126, "355445": 126, "356497": 126, "852774": 126, "extrem": [126, 201, 203, 239, 240, 307, 314, 330, 354, 382, 385, 409, 414, 557, 558, 564, 565, 566, 632, 633, 679, 723, 751, 911, 912, 913, 915, 989, 991], "coverage_fract": 126, "y_low": 126, "y_high": 126, "868": [126, 146, 172], "hypothesi": [126, 262, 268, 413, 690, 694, 826, 986], "experiment": [126, 165, 166, 201, 273, 274, 319, 320, 371, 382, 384, 385, 392, 394, 396, 400, 413, 496, 549, 627, 696, 801, 802, 959, 978, 979, 985, 988, 989, 1009, 1010, 1019, 1027, 1039, 1040, 1043, 1044, 1045, 1046, 1048], "enable_halving_search_cv": [126, 273, 274, 319, 386, 801, 802, 978], "halvingrandomsearchcv": [126, 274, 319, 400, 579, 801, 978, 1043, 1045, 1046, 1047, 1048], "neg_mean_pinball_loss_05p_scor": 126, "greater_is_bett": [126, 741, 989], "search_05p": 126, "max_resourc": [126, 801, 802, 978], "min_resourc": [126, 801, 802], "neg_mean_pinball_loss_95p_scor": 126, "search_95p": 126, "estimator__alpha": 126, "did": [126, 153, 171, 174, 201, 209, 219, 248, 314, 377, 627, 712, 817, 903, 1024, 1032, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1046], "untun": 126, "joint": [126, 168, 172, 179, 185, 187, 188, 190, 200, 220, 222, 410, 611, 652, 662, 692, 836, 837, 838, 839, 840, 901, 985, 986, 990, 994, 996, 1000, 1011, 1031], "9026666666666666": 126, "sadli": 126, "plot_gradient_boosting_quantil": [126, 137, 1011], "basic": [126, 152, 153, 158, 159, 161, 162, 163, 166, 168, 199, 314, 345, 368, 370, 371, 382, 384, 386, 394, 396, 409, 413, 414, 416, 611, 622, 897, 909, 910, 911, 912, 978, 979, 992, 1003, 1008, 1009, 1010, 1011, 1014, 1023], "introductori": [126, 152, 153, 158, 159, 161, 162, 163, 168, 229, 419, 611, 622, 1011, 1014], "tackl": [127, 262, 369, 382, 409, 838, 991, 1014, 1019], "katrina": [127, 1042], "ni": [127, 1037, 1042], "nilichen": 127, "reg": [127, 171, 181, 237, 308, 318, 345, 416, 558, 560, 568, 650, 651, 653, 654, 655, 656, 657, 663, 664, 665, 670, 671, 678, 679, 689, 693, 912, 985, 1036], "3025": 127, "3785": 127, "train_score_": [127, 416, 559, 560, 561, 562], "impur": [127, 174, 362, 398, 416, 418, 553, 554, 557, 558, 559, 560, 564, 565, 566, 909, 910, 911, 912, 913, 915, 1005, 1027, 1036, 1037, 1038, 1039], "feature_import": 127, "sorted_idx": [127, 317], "po": [127, 225, 417], "vert": [127, 173, 174, 317, 1003], "plot_gradient_boosting_regress": [127, 137, 1011], "consider": [128, 154, 157, 240, 257, 263, 269, 382, 419, 619, 798, 812, 978, 985, 991, 995, 1003, 1014, 1048], "make_hastie_10_2": [128, 266, 378, 416, 559, 996], "return_invers": [128, 384], "original_param": 128, "test_devi": 128, "plot_gradient_boosting_regular": [128, 137, 1011], "deform": [129, 252, 350], "notat": [129, 396, 410, 414, 417, 590, 712, 985, 989, 1016, 1040, 1047], "120": [129, 223, 324, 418, 590, 1031], "cluster_1": 129, "cluster_2": 129, "nuniformli": 129, "max_sampl": [129, 165, 416, 555, 556, 557, 558, 563, 564, 565, 634, 1041, 1044, 1047], "isolationforestifittedisolationforest": 129, "ax_": [129, 256, 265, 269, 271, 277, 288, 312, 317, 389, 438, 631, 697, 698, 700, 701, 702, 804, 820], "nof": 129, "411": [129, 137, 171, 411, 421, 473, 533, 1011], "plot_isolation_forest": [129, 137, 1011], "trend": [130, 158, 172, 233, 302, 1014, 1038], "xgboost": [130, 416, 1009], "partialdependencedisplai": [130, 172, 241, 318, 319, 320, 322, 324, 389, 633, 996, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "f_0": 130, "f_1": [130, 269, 989], "gbdt_no_cst": [130, 318], "histgradientboostingregressorifittedhistgradientboostingregressor": [130, 322], "gbdt_with_monotonic_cst": 130, "monotonic_cst": [130, 318, 320, 324, 416, 557, 558, 561, 562, 564, 565, 909, 910, 911, 912, 1046], "line_kw": [130, 241, 264, 318, 324, 632, 804, 820], "unconstrain": [130, 172, 318, 324, 377, 1003], "axes_": [130, 241, 318, 324, 389, 632], "f_idx": 130, "oscil": [130, 172, 206, 409, 440], "x_df": 130, "gbdt_with_monotonic_cst_df": 130, "plot_monotonic_constraint": [130, 137, 1011], "excel": [131, 376, 382, 416, 690, 694, 985, 1014], "bernoullinb": [131, 370, 837, 838, 839, 840, 990, 991, 1032, 1033, 1035, 1038, 1043, 1044, 1046], "truncatedsvd": [131, 223, 354, 414, 534, 535, 539, 540, 541, 692, 860, 863, 1033, 1038, 1042, 1043, 1045], "hasher": [131, 355, 417], "transformed_grid": 131, "y_grid_pr": 131, "333": [131, 137, 843, 1011], "plot_random_forest_embed": [131, 137, 1011], "multioutput": [132, 271, 283, 284, 371, 384, 396, 400, 432, 465, 482, 483, 484, 551, 554, 556, 557, 558, 560, 562, 564, 565, 568, 570, 611, 632, 633, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 721, 722, 727, 744, 745, 747, 749, 750, 752, 784, 787, 789, 790, 822, 830, 844, 852, 859, 868, 902, 904, 907, 909, 910, 911, 912, 927, 952, 953, 989, 1011, 1012, 1027, 1031, 1032, 1033, 1037, 1038, 1044, 1045], "multioutputregressor": [132, 400, 432, 465, 482, 483, 484, 554, 556, 558, 560, 562, 565, 568, 570, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 833, 835, 844, 852, 859, 902, 904, 907, 910, 912, 1037, 1038, 1040, 1042, 1043, 1047], "centr": 132, "regr_multirf": 132, "regr_rf": 132, "y_multirf": 132, "y_rf": 132, "cornflowerblu": [132, 195, 204, 211, 248, 250, 253, 269, 271, 290, 296, 360, 361], "490": [132, 137, 1011], "plot_random_forest_regression_multioutput": [132, 137, 1011], "compil": [133, 285, 355, 368, 369, 382, 383, 384, 385, 390, 391, 394, 1009, 1031], "dean": [133, 1039, 1045, 1047], "cock": [133, 1040], "becam": [133, 397, 1039], "kaggl": [133, 395], "residenti": 133, "won": [133, 303, 354, 386, 409, 468, 496, 627, 628, 630, 687, 704, 717, 735, 736, 754, 756, 794, 988, 999, 1036, 1037, 1042], "load_ames_h": 133, "yrsold": 133, "heatingqc": 133, "street": [133, 150, 379], "yearremodadd": 133, "heat": [133, 340, 409, 452, 462, 695], "bsmtunfsf": 133, "mssubclass": 133, "condition2": 133, "garagetyp": 133, "overallqu": 133, "totalbsmtsf": 133, "miscfeatur": 133, "mosold": 133, "cat_selector": 133, "num_selector": 133, "besid": [133, 233, 382, 387, 589, 978, 1039], "cat_tree_processor": 133, "encoded_missing_valu": [133, 173, 875, 999, 1045, 1046], "num_tree_processor": 133, "add_ind": [133, 166, 627, 628, 630, 979, 1040, 1043, 1047], "tree_preprocessor": [133, 201], "0x7f550a892eb0": 133, "0x7f550a892700": 133, "columntransformerinot": [133, 172], "fittedcolumntransform": [133, 172], "ordinalencoderordinalencod": [133, 172, 173, 313], "cat_linear_processor": 133, "num_linear_processor": 133, "linear_preprocessor": 133, "tediou": 133, "wrote": [133, 377], "lasso_pipelin": 133, "pipelineinot": [133, 232, 242, 263, 313, 318], "fittedpipelin": [133, 232, 242, 263, 313, 318], "lassocvlassocv": 133, "rf_pipelin": 133, "randomforestregressorrandomforestregressor": [133, 136], "gbdt_pipelin": 133, "histgradientboostingregressorhistgradientboostingregressor": [133, 313], "stackingregressor": [133, 317, 396, 400, 416, 567, 979, 1041, 1042, 1043, 1044, 1045, 1048], "stacking_regressor": 133, "final_estim": [133, 317, 416, 567, 568], "unknown_v": 133, "stackingregressorinot": 133, "fittedstackingregressor": 133, "ridgecvridgecv": [133, 171], "cross_val_predict": [133, 258, 317, 400, 407, 413, 416, 437, 567, 568, 823, 824, 1035, 1036, 1037, 1038, 1040, 1042, 1044, 1048], "scorer": [133, 219, 266, 324, 384, 396, 400, 413, 416, 418, 561, 562, 594, 602, 634, 659, 673, 675, 711, 731, 732, 741, 798, 801, 802, 804, 812, 820, 823, 824, 825, 828, 947, 978, 985, 989, 997, 1010, 1035, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "line_kwarg": [133, 701], "nevalu": 133, "plot_stack_predictor": [133, 137, 1011], "exemplari": [134, 135], "eclf": [134, 135, 416], "axarr": [134, 307], "tt": [134, 257, 465], "plot_voting_decision_region": [134, 137, 1011], "class1_1": 135, "class2_1": 135, "lightgreen": [135, 207, 218], "p3": 135, "p4": 135, "nweight": 135, "309": [135, 137, 1011], "plot_voting_proba": [135, 137, 1011], "votingregressor": [136, 400, 416, 569, 979, 1040, 1041, 1042, 1045, 1048], "cohort": 136, "reg1": [136, 416], "reg2": [136, 416], "reg3": [136, 416], "ereg": [136, 416], "gb": [136, 416, 553, 633], "votingregressorifittedvotingregressor": 136, "gradientboostingregressorgradientboostingregressor": 136, "linearregressionlinearregress": 136, "xt": [136, 285, 396, 445, 538, 540, 627, 629, 798, 801, 802, 812, 845, 853, 861, 866, 871, 878, 890, 919, 1047], "pred1": 136, "pred2": 136, "pred3": 136, "pred4": 136, "labelbottom": [136, 262], "913": [136, 137, 416, 559, 1011], "plot_voting_regressor": [136, 137, 1011], "n_fold": [139, 647, 651, 653, 655, 659, 661, 663, 1032, 1033, 1037], "scores_std": [139, 140], "semilogx": [139, 140, 190, 275], "std_error": 139, "transluc": 139, "999999999999999e": 139, "31622776601683794": 139, "answer": [139, 170, 262, 382, 394, 725, 755, 989, 1014], "extern": [139, 153, 370, 371, 375, 379, 382, 384, 387, 394, 396, 406, 409, 417, 418, 419, 593, 610, 611, 717, 736, 794, 985, 988, 989, 992, 1005, 1010, 1017, 1023, 1027, 1039, 1043], "lasso_cv": 139, "k_fold": [139, 1020], "maximis": [139, 248, 293, 983, 992], "5f": [139, 321], "moreov": [139, 159, 309, 321, 364, 386, 409, 413, 419, 894, 959, 989, 1014, 1039, 1045, 1046], "substanti": [139, 287, 291, 292, 308, 382, 847, 995, 1035, 1038], "05968": 139, "54209": 139, "04520": 139, "15521": 139, "07880": 139, "45192": 139, "544": [139, 143, 1011], "plot_cv_diabet": [139, 143, 1011], "aic": [139, 168, 179, 185, 187, 188, 189, 195, 209, 220, 252, 501, 651, 653, 654, 655, 656, 797, 862, 881, 978, 1011, 1031, 1038, 1044, 1045], "bic": [139, 168, 179, 185, 187, 188, 189, 195, 209, 220, 418, 501, 651, 653, 654, 655, 656, 797, 862, 881, 978, 988, 1011, 1031, 1038, 1044, 1045], "this_scor": [140, 343], "921": [140, 143, 1011], "plot_cv_digit": [140, 143, 1011], "961111": 141, "933333": [141, 850], "070": [141, 143, 1011], "plot_digits_classification_exercis": [141, 143, 1011], "200j": 142, "431": [142, 143, 379, 1011], "plot_iris_exercis": [142, 143, 1011], "x_2": [145, 156, 198, 414, 416, 417, 419, 613, 625, 985, 993, 999], "x_3": [145, 999], "irrelev": [145, 185, 364, 388, 411, 416, 418, 604, 739, 989], "agre": [145, 390, 397, 408, 409, 785, 1016], "percept": [145, 172, 996], "correctli": [145, 149, 201, 219, 237, 269, 271, 276, 295, 314, 329, 340, 382, 391, 414, 416, 426, 437, 469, 493, 549, 550, 551, 553, 555, 557, 559, 561, 564, 567, 569, 610, 658, 666, 668, 674, 675, 676, 703, 793, 795, 829, 830, 831, 832, 836, 837, 838, 839, 840, 843, 848, 851, 858, 881, 896, 897, 901, 903, 904, 905, 906, 907, 909, 911, 939, 986, 989, 992, 993, 999, 1004, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "mutual_info_regress": [145, 321, 418, 592, 595, 596, 599, 600, 609, 1037, 1038, 1043, 1045, 1046, 1047], "f_test": 145, "x_": [145, 154, 253, 262, 317, 384, 409, 412, 414, 627, 635, 763, 896, 897, 985, 991, 996, 1037], "211": [145, 151, 267, 322, 330, 877, 889, 1011], "plot_f_test_vs_mi": [145, 151, 1011], "halv": [145, 168, 255, 266, 270, 278, 347, 404, 515, 564, 579, 798, 801, 802, 906, 1011, 1027, 1043], "spline": [145, 168, 179, 180, 220, 276, 290, 516, 517, 518, 672, 862, 876, 880, 1009, 1011, 1044], "examin": [146, 388, 390, 409, 850], "f_classif": [146, 147, 343, 418, 592, 595, 596, 598, 599, 600, 604, 606, 609], "log10": [146, 159, 171, 186, 194, 263, 340], "pvalues_": [146, 592, 595, 596, 598, 599, 600, 1031], "x_indic": 146, "p_": [146, 989, 992, 1005], "svm_weight": 146, "789": [146, 416], "clf_select": 146, "svm_weights_select": 146, "get_support": [146, 150, 319, 581, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 1033], "plot_feature_select": [146, 151, 1011], "anova_filt": 147, "anova_svm": 147, "selectkbestselectkbest": [147, 321], "Be": [147, 162, 353, 382, 411, 567, 568, 648, 654, 655, 656, 658, 659, 669, 680, 704, 816, 817, 876, 999, 1028, 1032], "75788833": 147, "27161955": 147, "26113448": 147, "plot_feature_selection_pipelin": [147, 151, 1011], "rfe": [148, 149, 400, 418, 594, 597, 602, 1031, 1035, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "n_features_to_select": [148, 150, 319, 418, 593, 602, 1043, 1045], "ranking_": [148, 593, 594], "plot_rfe_digit": [148, 151, 1011], "introduct": [149, 219, 260, 371, 382, 413, 414, 417, 590, 787, 788, 836, 840, 985, 987, 989, 991, 1008, 1017, 1023, 1026, 1027], "class_sep": [149, 295, 515], "rfecv": [149, 400, 418, 593, 597, 602, 1035, 1037, 1039, 1041, 1042, 1043, 1044, 1047, 1048], "stratifiedkfold": [149, 249, 257, 268, 272, 330, 413, 437, 567, 568, 594, 602, 659, 673, 798, 799, 801, 802, 803, 804, 806, 808, 812, 816, 818, 820, 821, 822, 823, 824, 825, 826, 828, 882, 1020, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1044], "min_features_to_select": [149, 594, 1039], "n_features_": [149, 593, 594, 1044, 1046], "n_score": 149, "426": [149, 151, 1011], "plot_rfe_with_cross_valid": [149, 151, 1011], "selectfrommodel": [150, 396, 400, 593, 602, 603, 1012, 1027, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1047, 1048], "sequentialfeatureselector": [150, 400, 418, 593, 597, 603, 1043, 1044, 1045, 1046, 1047], "greedi": [150, 416, 418, 447, 449, 460, 559, 560, 602, 985, 1005], "442": [150, 166, 379, 501, 1023], "descr": [150, 375, 376, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 507, 510, 1022, 1039], "_diabetes_dataset": 150, "mass": [150, 241, 379, 446, 796, 985, 996], "blood": [150, 231, 379, 1023], "pressur": [150, 379, 1023], "six": [150, 202, 223, 311, 379, 1040], "serum": [150, 379], "bmi": [150, 189, 190, 241, 379, 997], "tc": [150, 379, 397], "cholesterol": [150, 379], "ldl": [150, 379], "lipoprotein": [150, 379], "hdl": [150, 379], "s4": [150, 189, 190, 379], "tch": [150, 379], "s5": [150, 189, 190, 379, 997], "ltg": [150, 379, 501], "triglycerid": [150, 379], "s6": [150, 189, 190, 379], "glu": [150, 379], "sugar": [150, 379], "www4": [150, 379], "ncsu": [150, 379], "boo": [150, 379], "bradlei": [150, 379, 985], "efron": [150, 379, 682, 683, 985], "trevor": [150, 189, 322, 379, 628, 656, 721, 722, 723, 979, 985, 1001, 1035, 1036, 1039, 1040, 1041, 1043], "iain": [150, 379, 985], "johnston": [150, 379, 985, 1040], "annal": [150, 185, 189, 379, 416, 474, 516, 517, 518, 559, 560, 656, 985], "407": [150, 379], "web": [150, 376, 377, 379, 382, 385, 390, 409, 417, 521, 894, 989, 999, 1031], "stanford": [150, 379, 649, 682, 683, 836, 839, 840, 894, 987], "leastangle_2002": [150, 379], "e501": [150, 353], "accept": [150, 153, 237, 259, 317, 340, 353, 355, 364, 368, 369, 376, 382, 384, 391, 394, 395, 396, 397, 400, 403, 405, 409, 417, 437, 441, 444, 445, 448, 461, 464, 467, 508, 509, 555, 556, 561, 562, 569, 570, 581, 582, 593, 594, 597, 628, 635, 639, 643, 679, 726, 741, 777, 796, 797, 801, 802, 843, 844, 851, 852, 861, 865, 919, 921, 922, 925, 985, 987, 989, 992, 997, 999, 1004, 1009, 1010, 1020, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "tic": [150, 172, 240, 273, 991], "sfm": 150, "toc": [150, 240], "sf": [150, 262, 319, 377, 418, 492, 602], "backward": [150, 237, 319, 385, 396, 418, 496, 577, 602, 614, 615, 618, 619, 620, 622, 623, 914, 917, 989, 993, 1010, 1031, 1034, 1039, 1040, 1041, 1043, 1045, 1047], "tic_fwd": 150, "sfs_forward": 150, "toc_fwd": 150, "tic_bwd": 150, "sfs_backward": 150, "toc_bwd": 150, "450": 150, "isn": [150, 317, 353, 355, 364, 369, 382, 390, 515, 561, 562, 594, 793, 801, 802, 874, 992, 1004, 1041], "sound": [150, 364], "finish": [150, 250, 986], "expos": [150, 237, 280, 320, 322, 369, 375, 379, 396, 400, 407, 410, 416, 418, 419, 437, 464, 553, 554, 561, 562, 567, 568, 569, 570, 593, 594, 602, 611, 798, 801, 802, 812, 830, 831, 832, 833, 834, 835, 916, 957, 985, 989, 991, 1020, 1022, 1024, 1028, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "breast": [150, 375, 500, 1027, 1036], "cancer": [150, 375, 500, 593, 594, 848, 1027, 1036], "load_breast_canc": [150, 174, 330, 358, 387, 592, 595, 596, 598, 674, 675, 787, 989, 1036, 1037, 1042], "breast_cancer_data": 150, "_breast_cancer_dataset": 150, "wisconsin": [150, 174, 375, 500, 1027, 1036], "diagnost": [150, 174, 265, 375, 396, 500, 712, 823, 824, 989, 1009, 1010, 1027], "radiu": [150, 277, 292, 340, 379, 409, 442, 450, 688, 763, 780, 841, 842, 843, 844, 845, 849, 851, 852, 853, 855, 992, 1033, 1035, 1045, 1048], "perimet": [150, 379], "textur": [150, 379, 757, 758, 987], "compact": [150, 177, 307, 368, 379, 841, 842, 1005, 1033], "concav": [150, 379], "symmetri": [150, 379, 699, 874, 877, 889, 987], "fractal": [150, 379], "worst": [150, 201, 313, 379, 409, 444, 447, 708, 728, 729, 782, 783, 786, 791, 792, 826, 989, 1014, 1031, 1044], "field": [150, 219, 379, 406, 409, 410, 417, 498, 501, 617, 985, 987, 996, 1004, 1009, 1013, 1025, 1032], "se": [150, 224, 379, 399], "wdbc": [150, 379], "malign": [150, 379, 500], "benign": [150, 379, 500], "981": [150, 379, 989], "43": [150, 160, 198, 234, 262, 285, 379, 387, 798, 812, 882], "188": [150, 158, 200, 220, 258, 278, 353, 379, 388, 584, 1011], "143": [150, 379, 471, 472, 1001, 1031, 1032], "2501": [150, 379], "019": [150, 354, 379, 388, 471], "345": [150, 379], "427": [150, 379, 506, 507, 583, 584], "106": [150, 244, 379, 877, 983, 1032], "304": [150, 311, 379], "873": [150, 379], "757": [150, 260, 270, 278, 285, 379, 1011], "031": [150, 379], "008": [150, 354, 379, 388], "251": [150, 224, 308, 315, 379, 1011], "4254": [150, 379], "071": [150, 214, 220, 379, 437, 1011], "027": [150, 153, 354, 379], "252": [150, 224, 379, 534, 877, 889], "291": [150, 377, 379], "156": [150, 171, 379], "664": [150, 379], "055": [150, 379, 989], "208": [150, 285, 379], "creator": [150, 376, 379], "william": [150, 377, 379, 419, 610, 611, 614, 619, 622, 639, 981, 989, 993, 1038, 1039, 1040, 1041, 1046, 1047], "wolberg": [150, 379], "nick": [150, 379, 1031, 1037, 1038, 1039, 1040], "olvi": [150, 379], "mangasarian": [150, 379], "donor": [150, 379], "novemb": [150, 201, 219, 379, 1036, 1037, 1039], "1995": [150, 262, 379, 407, 416, 553, 554, 831, 898, 990], "goo": [150, 379], "gl": [150, 379], "u2uwz2": [150, 379], "needl": [150, 379], "aspir": [150, 379, 382], "fna": [150, 379], "nuclei": [150, 379], "multisurfac": [150, 379], "msm": [150, 379], "bennett": [150, 379, 989], "4th": [150, 161, 379], "midwest": [150, 379], "cognit": [150, 379], "societi": [150, 379, 409, 411, 469, 474, 541, 627, 877, 889, 985, 1003], "101": [150, 280, 379, 847, 1032], "1992": [150, 377, 379, 413, 416, 567, 568, 645, 985], "exhaust": [150, 263, 317, 318, 319, 320, 321, 322, 323, 324, 368, 379, 387, 395, 404, 409, 416, 798, 801, 802, 812, 891, 892, 894, 985, 1025, 1027], "insepar": [150, 379], "uw": [150, 379, 1043], "ftp": [150, 379, 682, 683], "wisc": [150, 379, 896], "prog": [150, 379], "cpo": [150, 379], "nuclear": [150, 379], "tumor": [150, 379], "diagnosi": [150, 265, 379, 848], "spie": [150, 379], "1993": [150, 379, 474, 664, 685, 686, 1005], "symposium": [150, 379, 409, 460], "technologi": [150, 379, 409, 1009, 1014], "1905": [150, 379], "861": [150, 379, 787, 788, 989], "870": [150, 190, 220, 379, 1011], "san": [150, 379, 417, 1001], "jose": [150, 379, 658, 989, 1039, 1041], "ca": [150, 379, 409, 442, 909, 910, 1001, 1005], "prognosi": [150, 379], "570": [150, 379, 1023], "577": [150, 379], "juli": [150, 379, 418, 733, 882, 999, 1034, 1038, 1039, 1040], "august": [150, 379, 409, 511, 534, 1004, 1031, 1033, 1034, 1038, 1045], "diagnos": [150, 265, 379, 390, 398, 410], "letter": [150, 161, 377, 379, 386, 417, 787, 788, 804, 820, 989], "1994": [150, 377, 379, 644], "feature_selector": 150, "ntol": 150, "975": [150, 170, 1004], "811": [150, 217], "659": 150, "998": [150, 993], "plot_select_from_model_diabet": [150, 151, 1011], "568": 151, "co2": [152, 153, 159, 160, 163, 168, 419, 496, 611, 615, 622, 623, 625, 1011, 1038], "mona": [152, 153, 159, 160, 163, 168, 419, 496, 611, 615, 622, 623, 625, 1011], "loa": [152, 153, 159, 160, 163, 168, 419, 496, 611, 615, 622, 623, 625, 1011], "xor": [152, 154, 155, 156, 158, 159, 160, 163, 168, 211, 212, 214, 251, 310, 345, 346, 610, 614, 622, 985, 1005, 1011, 1038], "trick": [153, 236, 295, 344, 355, 367, 370, 371, 385, 394, 410, 582, 589, 643, 672, 981, 982, 993, 1003, 1004, 1023, 1024, 1027, 1032, 1040, 1048], "drastic": [153, 234, 270, 409, 413, 992, 1002], "theorem": [153, 348, 408, 991], "reus": [153, 194, 263, 317, 355, 384, 396, 409, 410, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 634, 646, 648, 649, 652, 658, 660, 662, 666, 667, 668, 669, 676, 677, 678, 680, 858, 859, 997, 1001, 1014, 1038, 1048], "training_sample_indic": 153, "training_data": 153, "training_noisy_target": 153, "newer": [153, 381, 399, 414], "expsinesquar": [153, 158, 162, 419], "emb": [153, 223, 234, 294, 375, 376, 462, 695, 986], "kernel_ridg": [153, 236, 371, 1035], "length_scal": [153, 154, 157, 158, 159, 160, 162, 419, 612, 615, 619, 621, 622, 623, 624], "tell": [153, 171, 172, 237, 262, 340, 345, 369, 377, 409, 417, 563, 579, 978, 983, 996, 1025], "1e0": [153, 236, 253, 270, 978], "kernel__length_scal": 153, "kernel__period": 153, "1e1": [153, 159, 201, 236, 340], "kernel_ridge_tun": 153, "361": [153, 377, 416, 555, 556], "9915849773450223": 153, "7986499491396727": 153, "607275806426107": 153, "predictions_kr": 153, "gaussianprocessregressor": [153, 158, 159, 160, 161, 162, 419, 610, 613, 614, 615, 616, 617, 621, 624, 625, 643, 1034, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "whitekernel": [153, 158, 159, 419, 611, 612, 614, 1042], "periodicity_bound": [153, 158, 162, 615], "kernel_": [153, 154, 155, 156, 157, 158, 159, 160, 162, 610, 611], "675": 153, "57": [153, 171, 217, 271, 304, 379, 380, 399, 401, 402, 410, 705, 780, 834, 989, 999, 1031], "noise_level": [153, 158, 159, 612, 625], "mean_predictions_gpr": 153, "std_predictions_gpr": 153, "return_std": [153, 158, 159, 160, 162, 180, 181, 396, 552, 567, 568, 611, 613, 614, 615, 616, 625, 627, 644, 645, 861, 1038, 1039, 1043], "capac": [153, 173], "length_scale_bound": [153, 159, 160, 162, 419, 611, 615, 619, 622, 623], "attenu": 153, "951": [153, 163, 1011], "plot_compare_gpr_krr": [153, 163, 1011], "arbitrarili": [154, 248, 253, 353, 396, 419, 432, 465, 482, 483, 484, 552, 554, 556, 558, 560, 562, 565, 568, 570, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 678, 679, 680, 721, 722, 723, 745, 784, 788, 834, 835, 844, 852, 859, 882, 902, 904, 907, 910, 912, 989, 992, 999, 1005], "lml": [154, 155, 159, 419], "exhibit": [154, 206, 344, 353, 398, 413, 414, 416, 419, 997], "steep": [154, 172, 271, 272, 409, 413, 419, 450, 456], "laplac": [154, 419, 610, 611, 836, 837, 838, 840, 991], "319": [154, 343, 351, 1011, 1025], "gp_fix": 154, "gp_opt": 154, "log_marginal_likelihood": [154, 155, 157, 159, 162, 419, 610, 611, 1041], "theta": [154, 155, 157, 159, 161, 162, 238, 414, 419, 523, 536, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 692, 991, 1005], "landscap": 154, "theta0": 154, "theta1": 154, "pcolor": 154, "xscale": [154, 159, 236, 804], "yscale": [154, 159, 201, 236, 353, 804], "plot_gpc": [154, 163, 1011], "gpc_rbf_isotrop": 155, "gpc_rbf_anisotrop": 155, "m_max": 155, "908": [155, 163, 989, 1011], "plot_gpc_iri": [155, 163, 1011], "0256": 156, "dotproduct": [156, 157, 162, 419, 611, 625], "sigma_0": [156, 157, 162, 419, 614], "constantkernel": [156, 162, 419, 611, 617, 621, 624], "lim": [156, 534], "61611719": 156, "00099547": 156, "10469096": 156, "32782448": 156, "00000000": 156, "50000000": 156, "17289014": 156, "6984743": 156, "3109306": 156, "93271427": 156, "03823144": 156, "10584743": 156, "87600388": 156, "74310541": 156, "21301203": 156, "26386883": 156, "gp": [156, 161, 419, 610, 611, 622, 1037], "cb": [156, 234, 251], "widehat": 156, "mathbf": [156, 344, 414, 985, 989, 993, 994, 1003], "leq": [156, 414, 416, 985, 989, 992, 1003, 1004, 1005], "clim": 156, "666": [156, 172, 331, 409, 843, 979], "clabel": [156, 212], "334": 156, "plot_gpc_isoprob": [156, 163, 1011], "stationari": [157, 419, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "coincid": [157, 203, 419], "convergencewarn": [157, 159, 161, 162, 209, 216, 248, 302, 303, 309, 391, 396, 796, 797, 1039, 1040, 1043], "k1__constant_valu": 157, "100000": [157, 236, 247, 382, 613, 614, 615, 619, 620, 622, 623, 625, 890, 982, 1023, 1025], "puor_r": [157, 346], "428": [157, 163, 1011], "plot_gpc_xor": [157, 163, 1011], "rw2006": [158, 419, 610, 611], "ascent": [158, 419], "monthli": [158, 397, 989], "atmospher": 158, "ppm": 158, "mauna": 158, "observatori": 158, "hawaii": 158, "1958": [158, 414, 416, 532], "air": [158, 763], "41187": 158, "flag": [158, 240, 324, 380, 382, 383, 385, 400, 405, 464, 610, 611, 627, 673, 675, 727, 784, 1004, 1037, 1041, 1042, 1044, 1045, 1046, 1047], "station": 158, "mlo": 158, "316": [158, 162, 206, 220, 611, 614, 625, 877, 1011], "317": 158, "co2_data": 158, "to_datetim": 158, "timestamp": 158, "march": [158, 725, 755, 989, 1031, 1035, 1039, 1041, 1046], "nfrom": 158, "upcom": [158, 380], "to_numpi": 158, "rise": 158, "irregular": [158, 344, 409, 992], "long_term_trend_kernel": 158, "decai": [158, 544, 858, 859, 938, 989, 1003, 1035], "seasonal_kernel": 158, "ration": [158, 623, 987], "diffus": 158, "accommod": [158, 1039], "rationalquadrat": [158, 162, 419, 616], "irregularities_kernel": 158, "shall": 158, "phenomena": 158, "noise_kernel": 158, "noise_level_bound": [158, 159, 625], "co2_kernel": 158, "subtract": [158, 171, 240, 412, 414, 443, 447, 459, 534, 644, 645, 1038, 1048], "normalize_i": [158, 419, 611, 1045], "y_mean": [158, 159, 162, 611, 644, 645], "gaussianprocessregressorifittedgaussianprocessregressor": 158, "todai": [158, 394, 1025], "current_month": 158, "mean_y_pr": 158, "std_y_pr": 158, "968": [158, 170, 260], "0367": 158, "6ppm": 158, "414": [158, 163, 219, 410, 725, 755, 877, 889, 989, 1011], "plot_gpr_co2": [158, 163, 1011], "target_gener": 159, "add_nois": 159, "minima": [159, 189, 414, 447, 692, 986, 1024, 1039], "y_std": [159, 162, 552, 611, 644, 645, 1044], "k1__k2__length_scal": [159, 419], "noptimum": 159, "nlog": 159, "length_scale_grid": 159, "noise_level_grid": 159, "newshap": 159, "379": [159, 163, 265, 278, 1011], "plot_gpr_noisi": [159, 163, 1011], "tikhonov": [160, 419, 672], "training_indic": 160, "n_restarts_optim": [160, 419, 610, 611], "std_predict": 160, "whenev": [160, 170, 364, 376, 390, 396, 399, 407, 482, 483, 484, 496, 628, 630, 980, 988, 1010, 1041], "noise_std": 160, "y_train_noisi": 160, "437": [160, 163, 354, 1011], "plot_gpr_noisy_target": [160, 163, 1011], "gene": [161, 376, 406, 451, 513, 593, 594, 848, 881], "among": [161, 172, 174, 177, 201, 252, 283, 362, 370, 377, 384, 396, 397, 407, 408, 412, 447, 449, 512, 519, 793, 826, 844, 849, 851, 903, 906, 909, 910, 911, 912, 978, 981, 989, 990, 996, 999, 1004, 1031, 1037, 1038, 1041], "brighter": 161, "6th": 161, "haussler": 161, "1999": [161, 377, 407, 409, 411, 414, 416, 437, 450, 457, 469, 474, 534, 541, 555, 556, 559, 560, 722, 895, 903, 904, 906, 907, 995, 1001], "646": 161, "technic": [161, 202, 223, 321, 377, 379, 382, 396, 416, 652, 664, 685, 686, 896, 985, 986, 992], "depart": [161, 409], "santa": [161, 1046], "cruz": 161, "generickernelmixin": [161, 1041], "sequencekernel": 161, "baseline_similar": 161, "baseline_similarity_bound": 161, "hyperparameter_baseline_similar": 161, "_f": [161, 985], "_g": 161, "__call__": [161, 340, 396, 417, 419, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 1038], "eval_gradi": [161, 419, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "is_stationari": [161, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "clone_with_theta": [161, 419, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "agct": 161, "agc": 161, "aact": 161, "taa": 161, "aaa": 161, "gaaca": 161, "training_idx": 161, "cga": 161, "taac": 161, "tcg": 161, "cttt": 161, "tgct": 161, "atag": 161, "ctc": 161, "424": [161, 219, 344, 351, 1011], "204": [161, 163, 997, 1002, 1011], "plot_gpr_on_structured_data": [161, 163, 1011], "plot_gpr_sampl": 162, "gpr_model": 162, "y_sampl": [162, 611], "sample_i": [162, 419, 611, 1045], "single_prior": 162, "pm": [162, 172, 272, 416, 989], "dev": [162, 171, 219, 267, 272, 380, 382, 386, 388, 390, 989, 1014, 1038, 1043, 1046, 1047], "594": [162, 201], "279": [162, 280, 281, 985, 1011], "alpha_bound": [162, 623], "1e15": 162, "05e": 162, "799": [162, 354], "791": 162, "sigma_0_bound": [162, 614], "_gpr": 162, "663": [162, 895, 997, 1001], "lbfg": [162, 301, 384, 648, 649, 658, 659, 669, 672, 674, 680, 687, 832, 835, 858, 859, 985, 993, 1035, 1036, 1038, 1039, 1044, 1045, 1046, 1048], "abnormal_termination_in_lnsrch": 162, "479": [162, 163, 185, 220, 1011], "7337046907": 162, "matern": [162, 419, 1042, 1046], "609": [162, 354, 388], "484": 162, "plot_gpr_prior_posterior": [162, 163, 1011], "iterativeimput": [164, 166, 167, 168, 232, 400, 490, 565, 580, 628, 629, 630, 639, 645, 672, 823, 844, 862, 1011, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048], "robin": [165, 166, 627, 979, 1037, 1040, 1045, 1046], "kneighborsregressor": [165, 239, 297, 321, 416, 570, 843, 849, 851, 852, 992, 1031, 1033, 1035, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "mimic": [165, 201, 353, 816], "missforest": [165, 979], "popular": [165, 226, 377, 380, 387, 390, 394, 396, 408, 415, 416, 417, 419, 452, 462, 979, 981, 985, 987, 994, 1003, 1010, 1020, 1025], "enable_iterative_imput": [165, 166, 386, 627, 979, 1040], "x_full": [165, 166, 307], "y_full": [165, 166, 307], "2k": 165, "br_estim": 165, "score_full_data": 165, "neg_mean_squared_error": [165, 166, 203, 236, 276, 324, 824, 989, 997, 1037], "x_miss": [165, 166], "y_miss": [165, 166], "missing_sampl": [165, 166], "missing_featur": [165, 166], "score_simple_imput": 165, "missing_valu": [165, 166, 242, 396, 627, 628, 629, 630, 768, 979, 1039, 1040], "score_iterative_imput": 165, "stricter": 165, "impute_estim": 165, "__class__": [165, 201, 203, 237, 240, 264, 309, 353, 354, 355, 389], "xerr": [165, 166, 354], "906": [165, 167, 1011], "plot_iterative_imputer_variants_comparison": [165, 167, 1011], "ness": [166, 219], "auxiliari": [166, 380, 408, 1014, 1046], "district": [166, 377], "neither": [166, 171, 317, 353, 364, 394, 437, 594, 628, 925, 992, 1005], "feel": [166, 307, 381, 382, 390, 409, 446, 1005], "x_diabet": [166, 1020], "y_diabet": [166, 1020], "x_california": 166, "y_california": 166, "add_missing_valu": 166, "missing_r": 166, "n_missing_sampl": 166, "x_miss_california": 166, "y_miss_california": 166, "x_miss_diabet": 166, "y_miss_diabet": 166, "knnimput": [166, 317, 627, 630, 979, 1041, 1042, 1045, 1046, 1047, 1048], "get_scores_for_imput": 166, "impute_scor": 166, "x_label": 166, "mses_california": 166, "stds_california": 166, "mses_diabet": 166, "stds_diabet": 166, "get_full_scor": 166, "full_scor": 166, "get_impute_zero_scor": 166, "fill_valu": [166, 232, 242, 318, 627, 630, 999, 1039, 1047], "zero_impute_scor": 166, "unweight": [166, 214, 463, 647, 653, 678, 707, 713, 728, 729, 737, 782, 783, 786, 787, 836, 837, 838, 839, 840, 979], "get_impute_knn_scor": 166, "knn_impute_scor": 166, "get_impute_mean": 166, "mean_impute_scor": 166, "obvious": [166, 368, 1025], "get_impute_it": 166, "n_nearest_featur": [166, 627], "sample_posterior": [166, 627, 979], "iterative_impute_scor": 166, "n_bar": 166, "xval": 166, "invert_yaxi": [166, 355], "218": [166, 167, 379, 471, 715, 785, 1011], "plot_missing_valu": [166, 167, 1011], "prune": [168, 357, 362, 363, 418, 500, 557, 558, 559, 560, 564, 565, 593, 644, 827, 909, 910, 911, 912, 992, 1011, 1012, 1027, 1031, 1034, 1041, 1042], "elast": [168, 179, 185, 187, 188, 192, 195, 212, 220, 234, 237, 275, 297, 408, 471, 472, 478, 501, 524, 646, 647, 652, 657, 658, 659, 660, 661, 662, 663, 668, 676, 678, 681, 684, 978, 989, 1003, 1011, 1012, 1027, 1031, 1036, 1040, 1041], "gram": [168, 179, 220, 237, 297, 384, 414, 417, 489, 524, 548, 588, 589, 590, 591, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 665, 681, 682, 683, 684, 685, 686, 766, 774, 776, 978, 999, 1004, 1011, 1025, 1031, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1042, 1044, 1045], "theil": [168, 179, 204, 207, 220, 307, 649, 657, 671, 678, 679, 1011], "sen": [168, 179, 204, 207, 220, 307, 649, 657, 671, 678, 679, 1011], "tweedi": [168, 179, 201, 220, 464, 496, 552, 648, 669, 680, 706, 723, 744, 746, 748, 749, 751, 827, 862, 865, 866, 874, 881, 985, 1011, 1041, 1042, 1044], "insur": [168, 179, 201, 220, 464, 496, 552, 648, 669, 680, 706, 744, 749, 751, 827, 862, 865, 866, 874, 881, 985, 1011], "claim": [168, 179, 220, 382, 464, 496, 552, 648, 669, 680, 706, 744, 749, 751, 827, 862, 865, 866, 874, 881, 985, 1011], "failur": [168, 169, 171, 175, 196, 382, 390, 657, 784, 827, 921, 922, 1011, 1013, 1014, 1044, 1045], "infer": [168, 169, 171, 175, 196, 248, 252, 253, 262, 359, 376, 384, 394, 408, 413, 414, 496, 508, 509, 515, 534, 536, 538, 540, 547, 549, 550, 553, 559, 560, 632, 635, 657, 709, 722, 740, 784, 796, 797, 804, 820, 827, 837, 875, 882, 896, 897, 909, 910, 911, 912, 952, 979, 985, 988, 989, 994, 999, 1002, 1005, 1009, 1010, 1011, 1019, 1032, 1036, 1037, 1042, 1045, 1048], "causal": [168, 169, 175, 196, 657, 784, 827, 1011], "hole": [168, 221, 222, 223, 224, 227, 228, 530, 692, 693, 1011, 1045], "perplex": [168, 221, 222, 224, 226, 228, 285, 514, 525, 536, 692, 986, 1011, 1036, 1038, 1045], "det": [168, 243, 255, 271, 272, 278, 382, 411, 515, 564, 698, 702, 726, 788, 827, 862, 881, 901, 936, 1011, 1043], "tsne": [168, 222, 223, 224, 226, 227, 286, 287, 299, 321, 396, 423, 433, 496, 688, 689, 690, 845, 849, 862, 963, 986, 992, 1011, 1034, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "novelti": [168, 215, 230, 240, 286, 292, 299, 339, 847, 1011, 1012, 1026, 1027, 1031, 1039], "mlp": [168, 172, 241, 300, 302, 305, 496, 571, 827, 858, 859, 993, 1011], "semi_supervis": [168, 319, 321, 326, 327, 328, 329, 330, 331, 332, 333, 371, 400, 990, 1002, 1011, 1032, 1037, 1038, 1045, 1046], "tie": [168, 193, 335, 351, 394, 416, 512, 829, 906, 990, 1004, 1005, 1011, 1032, 1047], "unbalanc": [168, 265, 335, 338, 341, 351, 413, 512, 631, 906, 926, 927, 978, 1003, 1011], "auto_examples_python": 168, "auto_examples_jupyt": 168, "unless": [170, 237, 248, 253, 382, 384, 385, 394, 396, 407, 409, 412, 420, 437, 444, 446, 448, 450, 452, 457, 458, 461, 464, 467, 472, 489, 496, 508, 509, 531, 535, 536, 537, 539, 542, 543, 545, 546, 547, 548, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 570, 594, 602, 610, 611, 632, 634, 639, 646, 647, 651, 652, 653, 655, 657, 658, 659, 661, 663, 665, 666, 668, 676, 679, 688, 689, 690, 691, 692, 693, 694, 709, 714, 773, 777, 780, 798, 801, 802, 804, 812, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 833, 834, 843, 844, 847, 849, 851, 852, 854, 855, 858, 859, 860, 863, 882, 886, 887, 889, 890, 891, 892, 896, 897, 909, 910, 911, 912, 917, 921, 922, 938, 957, 985, 988, 990, 1031, 1033, 1037, 1039, 1042, 1043], "willing": [170, 259], "econom": [170, 171, 262], "educ": [170, 171, 324, 382, 716, 990], "earn": [170, 171, 397], "polici": [170, 171, 201, 219, 396, 535, 541, 985, 1046], "maker": [170, 171], "ovb": [170, 171], "parent_hourly_wag": 170, "college_degre": 170, "true_coef": [170, 185, 196], "hourly_wag": 170, "stori": [170, 262, 280, 377, 988], "pairplot": [170, 171], "diag_kind": [170, 171], "kde": [170, 171, 280, 289, 290, 298, 415, 846], "features_nam": [170, 1038], "regressor_with_": 170, "y_pred_with_": 170, "r2_with_abl": 170, "model_coef": 170, "intellectu": 170, "proxi": [170, 171, 414, 857, 1020, 1036], "inadvert": [170, 396], "iq": 170, "regressor_without_": 170, "y_pred_without_": 170, "r2_without_": 170, "brought": [170, 553, 554, 557, 558, 559, 560, 564, 565, 566, 909, 910, 911, 912], "unobserv": [170, 171, 414], "confound": [170, 171], "conduct": [170, 262, 419, 1045], "prohibit": [170, 413, 416, 627, 994, 1002, 1038], "uneth": 170, "iv": [170, 989], "404": [170, 175, 219, 1011], "plot_causal_interpret": [170, 175, 1011], "hint": [171, 368, 383, 387, 403, 448, 989, 1023], "aris": [171, 265, 348, 369, 387, 409, 715, 985, 986, 1043], "survei": [171, 412], "1985": [171, 409, 705, 715, 785], "534": 171, "race": [171, 324, 377, 1034], "occup": [171, 307, 324], "sector": 171, "marr": 171, "not_memb": 171, "marri": 171, "freq": [171, 185, 355], "378": [171, 354, 416, 1025, 1031], "289": 171, "438": [171, 997], "440": 171, "350": 171, "018727": 171, "822097": 171, "833333": 171, "615373": 171, "379710": 171, "726573": 171, "thereaft": [171, 180], "hispan": 171, "manufactur": [171, 416], "unmarri": 171, "dollar": [171, 377], "exploratori": [171, 1014], "emul": [171, 390], "train_dataset": [171, 376], "rangeindex": 171, "533": 171, "normalis": [171, 611, 1025], "numerical_column": [171, 173, 467], "if_binari": [171, 244, 874, 999, 1042], "prepend": [171, 1031], "exp10": 171, "ufunc": 171, "transformedtargetregressortransformedtargetregressor": 171, "ridgeridg": 171, "mae_train": 171, "mae_test": 171, "learnt": [171, 314, 364, 396, 413, 882, 978, 999], "obviou": [171, 344, 364, 368, 406, 414], "regressor_": [171, 465, 593, 594, 597], "race_hispan": 171, "013519": 171, "race_oth": 171, "009075": 171, "race_whit": 171, "022594": 171, "occupation_cler": 171, "000045": 171, "occupation_manag": 171, "090528": 171, "occupation_oth": 171, "025102": 171, "occupation_profession": 171, "071964": 171, "occupation_sal": 171, "046636": 171, "occupation_servic": 171, "091053": 171, "sector_construct": 171, "000198": 171, "sector_manufactur": 171, "031255": 171, "sector_oth": 171, "031025": 171, "marr_unmarri": 171, "032405": 171, "union_not_memb": 171, "117154": 171, "sex_mal": 171, "090808": 171, "south_y": 171, "033823": 171, "054699": 171, "035005": 171, "030867": 171, "adimension": 171, "Their": [171, 377, 379, 397, 409, 644, 1031], "gaug": 171, "decad": [171, 1010], "x_train_preprocess": 171, "multipli": [171, 205, 219, 262, 368, 391, 396, 414, 416, 417, 422, 464, 475, 515, 538, 540, 541, 547, 557, 561, 564, 646, 648, 652, 654, 658, 659, 660, 662, 668, 669, 670, 672, 676, 677, 678, 680, 686, 687, 689, 693, 763, 903, 906, 909, 911, 927, 965, 966, 967, 978, 981, 985, 989, 1003, 1042], "coef_i": 171, "std_i": 171, "emphas": [171, 350, 388, 414, 989], "perturb": [171, 218, 304, 414, 416, 988], "caution": [171, 386, 440, 454, 1039], "repeatedkfold": [171, 413, 803, 814, 1038], "cv_model": 171, "stripplot": 171, "whi": [171, 173], "collinear": [171, 174, 206, 219, 416, 567, 648, 669, 680, 874, 985, 1031], "teas": 171, "apart": [171, 320, 340, 394, 396, 410, 412, 418, 724, 1004, 1014, 1039], "vice": [171, 259, 353, 409, 419, 442, 607, 608, 830, 1035], "versa": [171, 259, 353, 409, 419, 442, 607, 608, 830, 1035], "column_to_drop": 171, "said": [171, 230, 263, 377, 382, 791, 987, 995, 1016, 1023], "unchang": [171, 219, 269, 416, 433, 437, 442, 443, 444, 445, 446, 447, 449, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 692, 762, 799, 800, 805, 807, 816, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 848, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 992, 1016, 1039, 1045, 1047], "neglig": [171, 992, 1034, 1048], "littl": [171, 172, 173, 174, 230, 377, 417, 462, 644, 798, 812, 938, 979, 986, 988, 1004, 1005, 1023, 1032, 1043, 1048], "alon": [171, 205, 268, 340, 396, 403, 407, 648, 669, 680, 741, 1038, 1040], "suppress": [171, 368, 390, 692, 992, 1038], "themselv": [171, 307, 378, 384, 390, 396, 400, 406, 409, 416, 417, 419, 446, 615, 791, 1005, 1025, 1041], "bring": [171, 307, 414, 676, 678, 986, 1009, 1014], "entic": 171, "pursu": 171, "tempt": 171, "deflat": [171, 412, 421, 533], "presum": [171, 283, 409, 417, 836], "respond": [171, 382, 409], "713": [171, 175, 1011], "plot_linear_model_coefficient_interpret": [171, 175, 1011], "complement": [172, 272, 353, 632, 633, 800, 815, 818, 827, 836, 837, 838, 839, 840, 996, 1012, 1027, 1039], "molnar": [172, 996], "christoph": [172, 414, 419, 532, 610, 611, 614, 619, 622, 796, 985, 990, 1032, 1036, 1039, 1042, 1043, 1044, 1045, 1046], "goldstein": [172, 996], "kapeln": [172, 996], "bleich": [172, 996], "pitkin": [172, 996], "peek": [172, 382, 996], "settingwithcopywarn": 172, "2284": 172, "904": [172, 260, 331, 410], "287": [172, 1001], "1747": 172, "1729": 172, "mask_train": [172, 219], "accordingli": [172, 240, 344, 382, 386, 387, 1038, 1039, 1046], "8640": 172, "115": [172, 251, 254, 997, 1011], "nomin": [172, 376, 396, 397, 416, 417, 581, 582, 716, 999, 1010], "numerical_featur": [172, 313], "xtick_start": 172, "xtick_period": 172, "average_bike_rent": 172, "numeric_onli": 172, "decor": [172, 317, 382, 383, 384, 391, 804, 820, 928, 932, 933, 950, 956, 1041, 1044, 1047], "mlp_preprocessor": 172, "quantiletransformerquantiletransform": 172, "catindex": 172, "hgbdt_preprocessor": 172, "sparse_threshold": [172, 464, 467, 1039], "mlp_model": 172, "hidden_layer_s": [172, 241, 301, 303, 858, 859, 993], "learning_rate_init": [172, 302, 303, 858, 859], "592": [172, 611, 614, 625, 996], "forget": [172, 364, 369, 376, 386, 394, 414, 986, 1013], "poor": [172, 177, 268, 277, 330, 407, 413, 414, 690, 694, 737, 838, 841, 842, 983, 984, 986, 991, 1010, 1016, 1038, 1039, 1040, 1042, 1044], "grid_resolut": [172, 319, 338, 631, 632, 633], "features_info": 172, "hgbdt_model": 172, "cheaper": [172, 409, 419, 673, 981, 985], "temperatur": [172, 417, 996], "wind": [172, 990], "meaningless": [172, 417, 903, 906, 1034], "409": 172, "celsiu": [172, 996], "interaction_cst": [172, 322, 416, 561, 562, 1046], "hgbdt_model_without_interact": 172, "histgradientboostingregressor__interaction_cst": 172, "heatmap": [172, 174, 180, 185, 273, 322, 340, 632, 996], "slope": [172, 199, 203, 218, 409, 722, 747, 987, 989], "dry": 172, "wetter": 172, "spike": 172, "degrad": [172, 230, 307, 348, 354, 415], "somehow": 172, "forbidden": [172, 416], "noisili": 172, "522": [172, 902], "partial_depend": [172, 632, 996, 1032, 1040, 1041, 1042, 1043, 1046, 1047], "grid_valu": [172, 633, 1047], "add_ax": [172, 226, 273], "surf": 172, "rstride": 172, "cstride": 172, "bupu": 172, "nthe": [172, 260, 362], "pretti": [172, 226, 260, 353, 368, 382, 394, 858, 859, 993, 1040], "view_init": [172, 222, 224, 226], "clb": 172, "ndepend": 172, "plot_partial_depend": [172, 175, 317, 318, 319, 1011, 1036, 1040, 1041, 1042, 1043, 1044, 1045], "breiman": [173, 413, 416, 516, 517, 518, 555, 556, 564, 565, 634, 909, 910, 997, 1005], "random_num": 173, "random_cat": 173, "sibsp": [173, 322], "parch": [173, 322], "categorical_encod": 173, "numerical_pip": 173, "memor": 173, "814": [173, 1023], "mdi_import": [173, 174], "sorted_importances_idx": 173, "retri": [173, 496, 1039, 1045], "classifier__min_samples_leaf": 173, "anymor": [173, 201, 264, 317, 318, 340, 364, 386, 410, 670, 1037, 1040, 1043, 1044, 1045, 1047, 1048], "810": 173, "832": [173, 245, 416, 555, 556], "train_result": 173, "test_result": 173, "train_import": 173, "test_import": 173, "876": [173, 175, 1011], "plot_permutation_import": [173, 174, 175, 1011], "contradict": [174, 1010], "spearman": [174, 635, 636, 980], "perm_sorted_idx": 174, "tree_importance_sorted_idx": 174, "tree_indic": 174, "gini": [174, 201, 219, 242, 274, 319, 553, 554, 557, 558, 559, 560, 564, 565, 566, 909, 910, 911, 912, 978, 997, 1005, 1039, 1040, 1047, 1048], "dilut": [174, 379], "squareform": 174, "spearmanr": 174, "fill_diagon": [174, 225], "distance_matrix": 174, "dist_linkag": 174, "dendro": 174, "to_list": 174, "leaf_rot": 174, "dendro_idx": 174, "ivl": 174, "cluster_id": [174, 354], "fcluster": 174, "cluster_id_to_feature_id": 174, "selected_featur": 174, "selected_features_nam": 174, "x_train_sel": 174, "x_test_sel": 174, "clf_sel": 174, "plot_permutation_importance_multicollinear": [174, 175, 1011], "161": 175, "polynomialcountsketch": [177, 639, 641, 981, 1043, 1045, 1048], "covtyp": 177, "tensor": [177, 374, 405, 414, 538, 540, 547, 639, 640, 641, 1027, 1043], "sketch": [177, 370, 374, 391, 408, 639, 640, 641, 954, 1027, 1043], "daniel": [177, 322, 368, 882, 999, 1014, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1041, 1043, 1045, 1048], "lopez": 177, "sanchez": [177, 1039, 1040], "lope": 177, "usal": 177, "581": 177, "cartograph": 177, "remot": [177, 328, 382, 385], "fetch_covtyp": [177, 240, 319, 377, 1040, 1043, 1045], "5_000": 177, "mm": 177, "lsvm": 177, "lsvm_time": 177, "lsvm_score": 177, "condens": [177, 446], "ps_lsvm_time": 177, "ps_lsvm_score": 177, "ksvm": 177, "ksvm_time": 177, "ksvm_score": 177, "pham": [177, 981, 1038], "ninh": 177, "rasmu": [177, 1038], "pagh": [177, 981], "kdd": [177, 377, 407, 437, 1001], "doi": [177, 201, 219, 382, 409, 676], "1145": [177, 409, 676], "2487575": 177, "2487591": 177, "csie": [177, 376, 487, 508, 509, 658], "ntu": [177, 376, 487, 508, 509, 658], "tw": [177, 376, 487, 508, 509, 658, 1004], "cjlin": [177, 376, 487, 508, 509, 658, 1034], "libsvmtool": [177, 376, 487, 508, 509], "plot_scalable_poly_kernel": [177, 178, 1011], "ard": [180, 644, 645], "ol": [180, 191, 196, 198, 199, 207, 218, 320, 656, 985], "true_weight": 180, "ardregress": [180, 185, 645, 985, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1048], "olr": 180, "brr": 180, "symlognorm": [180, 185], "linthresh": [180, 185], "10e": [180, 185], "cbar_kw": [180, 185], "seismic_r": [180, 185], "stabilis": 180, "retain": [180, 396, 409, 412, 413, 417, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 494, 533, 534, 538, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 695, 696, 799, 800, 805, 807, 816, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 846, 848, 851, 852, 858, 859, 861, 864, 866, 867, 868, 873, 874, 880, 881, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 978, 1002, 1031], "ard_scor": 180, "scores_": [180, 181, 592, 595, 596, 598, 599, 600, 644, 645, 659, 1031, 1041], "brr_score": 180, "cutoff": [180, 943, 999, 1040], "full_data": 180, "input_featur": [180, 384, 396, 425, 430, 442, 443, 445, 447, 449, 464, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 566, 567, 568, 569, 570, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 688, 689, 692, 845, 850, 853, 857, 860, 861, 864, 865, 866, 867, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 1047], "x_plot": [180, 202, 207, 236, 265, 290, 312], "y_plot": [180, 202, 207, 265], "ard_poli": 180, "brr_poli": 180, "y_ard": 180, "y_ard_std": 180, "y_brr": 180, "y_brr_std": 180, "queri": [180, 288, 298, 368, 386, 415, 420, 444, 446, 450, 457, 552, 610, 611, 628, 644, 645, 725, 755, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 989, 992, 1005, 1009, 1033, 1035, 1036, 1039], "lambda_init": [180, 181, 645, 985, 1041], "intrins": [180, 396, 414, 416, 992, 997, 1003, 1043], "587": [180, 220, 1011], "plot_ard": [180, 220, 644, 1011], "alpha_init": [181, 645, 985, 1041], "yoshihiro": [181, 1041], "uchida": [181, 1041], "nimbus1after2a1sun7show": 181, "1234": [181, 250, 265, 382], "n_order": 181, "vander": 181, "ymean": 181, "ystd": 181, "pink": 181, "_init": 181, "lambda_": [181, 644, 645, 877, 985, 1038], "plot_bayesian_ridge_curvefit": [181, 220, 1011], "normalized_weight": 182, "x_offset": 182, "x_center": 182, "x_scale": [182, 871, 887, 999], "uncent": 182, "incorrectli": [182, 416, 417, 553, 559, 561, 733, 739, 989, 1032, 1037, 1039, 1040, 1042, 1047], "lm": 182, "98809919e": 182, "48938813e": 182, "03237920e": 182, "25349312e": 182, "53959628e": 182, "67451144e": 182, "00768662e": 182, "19112072e": 182, "07963978e": 182, "47987268e": 182, "76195467e": 182, "00393284e": 182, "07582983e": 182, "66670169e": 182, "65799352e": 182, "99891212e": 182, "58195950e": 182, "58667835e": 182, "98350372e": 182, "60836363e": 182, "00911944e": 182, "elasticnetifittedelasticnet": 182, "769": [182, 220, 285, 1011], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [182, 220, 1011], "huber": [183, 211, 408, 416, 560, 649, 676, 678, 1003, 1031, 1033, 1034, 1043], "mks542": 183, "x_outlier": [183, 215, 291, 292, 339], "y_outlier": 183, "epsilon_valu": 183, "intercept_": [183, 191, 193, 210, 238, 338, 345, 349, 384, 396, 482, 483, 484, 549, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 901, 902, 903, 904, 905, 906, 907, 983, 985, 1003, 1004, 1031, 1038, 1043, 1045, 1048], "coef_ridg": 183, "plot_huber_vs_ridg": [183, 220, 1011], "logreg": [184, 835], "045": [184, 220, 722, 1011], "plot_iris_logist": [184, 220, 1011], "underdetermin": 185, "time_step": [185, 859], "anti": [185, 364, 606, 836, 991], "9502547": 185, "8059798": 185, "63394388": 185, "70359377": 185, "62241605": 185, "84077985": 185, "30506066": 185, "63327171": 185, "74495357": 185, "02456369": 185, "random_sampl": [185, 841, 842, 846], "sensor": 185, "superposit": 185, "y_pred_lasso": 185, "r2_score_lasso": 185, "480": [185, 236], "y_pred_ard": 185, "r2_score_ard": 185, "091": [185, 204, 220, 1011], "elasticnetcv": [185, 396, 400, 646, 652, 660, 661, 662, 663, 681, 985, 1031, 1034, 1042, 1044, 1045, 1048], "enet": [185, 275], "y_pred_enet": 185, "r2_score_enet": 185, "nlasso": 185, "meinshausen": 185, "yu": [185, 409, 452, 462, 658, 985, 993, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "246": [185, 997, 1031], "270": [185, 266, 278, 328, 1011], "plot_lasso_and_elasticnet": [185, 220, 1011], "penalis": [186, 199, 216, 696], "enet_path": [186, 396, 647, 1033, 1035, 1044], "lasso_path": [186, 651, 652, 653, 654, 655, 656, 663, 682, 683, 985, 1031, 1033, 1035, 1044], "alphas_lasso": 186, "coefs_lasso": 186, "alphas_positive_lasso": 186, "coefs_positive_lasso": 186, "alphas_enet": 186, "coefs_enet": 186, "alphas_positive_enet": 186, "coefs_positive_enet": 186, "neg_log_alphas_lasso": 186, "neg_log_alphas_enet": 186, "coef_l": 186, "neg_log_alphas_positive_lasso": 186, "coef_pl": 186, "neg_log_alphas_positive_enet": 186, "coef_p": 186, "plot_lasso_coordinate_descent_path": [186, 220, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 1011], "sai": [187, 230, 348, 353, 354, 382, 407, 409, 410, 414, 416, 417, 446, 447, 500, 504, 510, 677, 978, 995, 1002, 1014, 1022, 1023, 1025], "x_sp": 187, "sparse_lasso": 187, "dense_lasso": 187, "coeff_diff": 187, "2e": [187, 276], "01e": 187, "xs_sp": 187, "tocsc": 187, "nnz": [187, 354, 377, 699], "172": [187, 388, 493, 494, 649, 985], "781": 187, "65e": 187, "148": [187, 220, 339, 351, 1011, 1034], "plot_lasso_dense_vs_sparse_data": [187, 220, 1011], "lars_path": [188, 391, 531, 537, 539, 542, 543, 545, 546, 548, 650, 651, 652, 653, 654, 655, 656, 663, 664, 665, 683, 684, 685, 686, 985, 1031, 1033, 1036, 1040, 1042], "plot_lasso_lar": [188, 220, 1011], "zht2007": 189, "lassolars": [189, 190, 418, 651, 654, 655, 985, 1031, 1038, 1040, 1044, 1045], "2173": [189, 656, 985], "2192": [189, 656, 985], "038076": [189, 190], "050680": [189, 190], "061696": [189, 190], "021872": [189, 190], "044223": [189, 190], "034821": [189, 190], "043401": [189, 190], "002592": [189, 190], "019907": [189, 190], "017646": [189, 190], "001882": [189, 190], "044642": [189, 190], "051474": [189, 190], "026328": [189, 190], "008449": [189, 190], "019163": [189, 190], "074412": [189, 190], "039493": [189, 190], "068332": [189, 190], "092204": [189, 190], "085299": [189, 190], "044451": [189, 190], "005670": [189, 190], "045599": [189, 190], "034194": [189, 190], "032356": [189, 190], "002861": [189, 190], "025930": [189, 190], "089063": [189, 190], "011595": [189, 190], "036656": [189, 190], "012191": [189, 190], "024991": [189, 190], "036038": [189, 190], "034309": [189, 190], "022688": [189, 190], "009362": [189, 190], "005383": [189, 190], "036385": [189, 190], "003935": [189, 190], "015596": [189, 190], "008142": [189, 190], "031988": [189, 190], "046641": [189, 190], "akaik": [189, 190, 252, 656, 797, 978, 985], "lasso_lars_": [189, 190], "zou_et_al_criterion_resc": 189, "noise_vari": [189, 532, 656, 985, 1045], "aic_criterion": 189, "criterion_": [189, 190, 656], "index_alpha_path_a": 189, "alphas_": [189, 190, 647, 650, 651, 653, 654, 655, 656, 661, 663, 682, 683, 1031, 1034, 1044], "lassolarsic__criterion": [189, 190], "bic_criterion": 189, "index_alpha_path_b": 189, "plot_lasso_lars_": [189, 220, 1011], "n_random_featur": 190, "x_random": 190, "random_": 190, "02d": 190, "random_02": 190, "random_05": 190, "random_08": 190, "random_11": 190, "647689": 190, "234137": 190, "469474": 190, "465730": 190, "012831": 190, "412304": 190, "067528": 190, "110923": 190, "601707": 190, "057711": 190, "208864": 190, "196861": 190, "478522": 190, "057122": 190, "324084": 190, "611676": 190, "331263": 190, "185659": 190, "812526": 190, "003533": 190, "alpha_a": 190, "alpha_b": 190, "160030": 190, "5244": 190, "764779": 190, "300343": 190, "5208": 190, "250639": 190, "5212": 190, "341949": 190, "542052": 190, "4928": 190, "018900": 190, "4936": 190, "201520": 190, "034077": 190, "4869": 190, "678359": 190, "4881": [190, 1036], "952289": 190, "189631": 190, "4815": 190, "437362": 190, "4831": [190, 655], "802601": 190, "329616": 190, "4810": 190, "423641": 190, "4830": 190, "880191": 190, "306012": 190, "4803": 190, "573491": 190, "4828": 190, "121351": 190, "124225": 190, "4804": 190, "126502": 190, "4832": 190, "765671": 190, "820705": 190, "621645": 190, "4836": 190, "352124": 190, "750389": 190, "4805": 190, "012521": 190, "4841": 190, "834310": 190, "570655": 190, "290075": 190, "4846": 190, "203174": 190, "550213": 190, "4807": 190, "075887": 190, "4852": 190, "080295": 190, "358295": 190, "4806": 190, "878051": 190, "4855": 190, "973770": 190, "259297": 190, "706026": 190, "4860": 190, "893055": 190, "237703": 190, "4809": [190, 265], "440409": 190, "4866": 190, "718747": 190, "850031": 190, "989341": 190, "4867": 190, "358990": 190, "384338": 190, "4801": 190, "702266": 190, "163224": 190, "296575": 190, "4802": 190, "594754": 190, "4872": 190, "147022": 190, "031555": 190, "236720": 190, "4874": 190, "880298": 190, "618263": 190, "4798": 190, "484109": 190, "4876": 190, "218997": 190, "526599": 190, "4799": 190, "543841": 190, "370039": 190, "586798": 190, "4794": 190, "238744": 190, "4880": 190, "156252": 190, "445978": 190, "4795": 190, "589715": 190, "4885": 190, "598533": 190, "259031": 190, "4796": 190, "966981": 190, "4891": 190, "067109": 190, "032179": 190, "662409": 190, "4894": 190, "853846": 190, "019069": 190, "652739": 190, "4888": 190, "752867": 190, "626286": 190, "817724": 190, "set_xscal": [190, 206, 804], "badli": [190, 201, 353, 370, 881, 985, 999], "lassolarscv": [190, 400, 418, 652, 653, 654, 656, 663, 665, 682, 683, 684, 985, 1031, 1038, 1044, 1048], "3800": 190, "mse_path_": [190, 647, 651, 653, 655, 661, 663], "cv_alphas_": [190, 651, 655, 1043], "kink": 190, "heavili": [190, 368, 369, 382, 390, 649, 655, 1006], "efficaci": 190, "plot_lasso_model_select": [190, 220, 647, 653, 1011], "105": [191, 220, 311, 1011], "plot_logist": [191, 220, 1011], "axes_row": 192, "clf_l1_lr": 192, "clf_l2_lr": 192, "clf_en_lr": 192, "coef_l1_lr": 192, "coef_l2_lr": 192, "coef_en_lr": 192, "sparsity_l1_lr": 192, "sparsity_l2_lr": 192, "sparsity_en_lr": 192, "nl1_ratio": 192, "plot_logistic_l1_l2_spars": [192, 220, 1011], "995": 193, "plot_logistic_multinomi": [193, 220, 1011], "976": [193, 270], "dupr": [193, 209, 285, 287, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "m4x": [193, 217], "sag": [193, 208, 658, 659, 672, 674, 687, 985, 1003, 1009, 1036, 1037, 1038, 1040, 1041], "bry": [193, 210], "plot_hyperplan": [193, 210, 238], "looser": 194, "liblinear": [194, 338, 388, 658, 659, 787, 901, 902, 903, 906, 907, 985, 989, 1004, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1047], "l1_min_c": [194, 985, 1004, 1031], "intercept_sc": [194, 658, 659, 901, 902, 908, 985, 1004], "coefs_": [194, 303, 858, 859, 993, 1036], "plot_logistic_path": [194, 220, 1011], "jointli": [195, 269, 408, 409, 414, 985], "instant": 195, "wave": [195, 382, 988], "n_task": [195, 985], "n_relevant_featur": 195, "multitasklasso": [195, 652, 660, 663, 985, 1031, 1039, 1042, 1044], "coef_lasso_": 195, "coef_multi_task_lasso_": 195, "spy": 195, "feature_to_plot": 195, "seagreen": 195, "plot_multi_task_lasso_support": [195, 220, 1011], "reg_nnl": 196, "y_pred_nnl": 196, "r2_score_nnl": 196, "nnl": [196, 657], "8225220806196526": 196, "reg_ol": 196, "y_pred_ol": 196, "r2_score_ol": 196, "7436926291700353": 196, "low_x": 196, "high_x": 196, "low_i": 196, "high_i": 196, "get_ylim": [196, 307, 308], "847222222222214": 196, "plot_nnl": [196, 220, 1011], "23786125": 197, "2548": 197, "diabetes_x": [197, 1023], "diabetes_i": [197, 1023], "diabetes_x_train": [197, 1023], "diabetes_x_test": [197, 1023], "diabetes_y_train": [197, 1023], "diabetes_y_test": [197, 1023], "regr": [197, 410, 554, 556, 565, 646, 647, 667, 834, 859, 902, 904, 907, 1004, 1023], "diabetes_y_pr": 197, "plot_ol": [197, 220, 1011], "167": [198, 220, 388, 1011, 1031], "plot_ols_3d": [198, 220, 1011], "greatli": [199, 235, 322, 382, 390, 452, 992, 1005, 1037, 1045], "257": [199, 220, 224, 260, 1011], "plot_ols_ridge_vari": [199, 220, 1011], "make_sparse_coded_sign": [200, 531, 537, 1045, 1047], "orthogonalmatchingpursuit": [200, 665, 685, 686, 985, 1031, 1033, 1036, 1039, 1044], "orthogonalmatchingpursuitcv": [200, 400, 664, 1033, 1044, 1048], "512": 200, "n_nonzero_coef": [200, 526, 531, 537, 542, 548, 650, 664, 685, 686], "xw": [200, 320, 646, 647, 649, 652, 653, 654, 655, 656, 660, 661, 662, 663, 672, 681, 682, 683, 684, 985], "_0": [200, 685, 985, 989, 1004], "distort": [200, 234, 379, 407, 408, 878, 890, 895, 986, 999, 1001], "y_noisi": 200, "idx_r": 200, "omp_cv": 200, "plot_omp": [200, 220, 1011], "contract": [201, 219, 344, 369, 396, 1010], "compani": [201, 219, 409, 1014], "policyhold": [201, 219, 985], "vehicl": [201, 219], "driver": [201, 219, 1046], "exposur": [201, 219, 985], "car": 201, "accid": [201, 219], "noll": [201, 219], "salzmann": [201, 219], "wuthrich": [201, 219], "2139": [201, 219], "ssrn": [201, 219], "3164764": [201, 219], "ch": [201, 203, 219, 330, 332], "rth": [201, 219], "41214": [201, 219], "idpol": [201, 219], "claimnb": [201, 219], "vehpow": [201, 219], "vehag": [201, 219], "drivag": [201, 219], "bonusmalu": [201, 219], "vehbrand": [201, 219], "vehga": [201, 219], "b12": [201, 219], "1217": 201, "r82": 201, "77000": 201, "75000": 201, "diesel": [201, 219], "r22": 201, "09000": 201, "r72": 201, "84000": 201, "678008": 201, "6114326": 201, "00274": 201, "3317": 201, "r93": 201, "678009": 201, "6114327": 201, "9850": 201, "r11": [201, 219], "678010": 201, "6114328": 201, "1323": 201, "678011": 201, "6114329": 201, "r26": 201, "678012": 201, "6114330": 201, "678013": [201, 219], "10070308464041304": 201, "log_scale_transform": [201, 219], "linear_model_preprocessor": 201, "passthrough_numer": [201, 219], "binned_numer": [201, 219], "2e5": [201, 219], "log_scaled_numer": [201, 219], "onehot_categor": [201, 219], "imbalanc": [201, 265, 269, 271, 354, 394, 407, 413, 703, 708, 786, 799, 803, 838, 989, 991, 997, 1009], "simplist": [201, 417], "pertin": 201, "dummyregressor": [201, 219, 551, 989, 1032, 1034, 1035, 1038, 1039, 1041, 1044, 1045], "df_train": [201, 219], "df_test": [201, 219], "regressor__sample_weight": 201, "mean_poisson_devi": [201, 989, 1041], "score_estim": [201, 219], "n_mask": 201, "564": [201, 355], "commonli": [201, 259, 344, 375, 396, 409, 410, 419, 614, 757, 758, 796, 830, 873, 986, 987, 989, 990, 992, 1047], "ridge_glm": 201, "strictli": [201, 219, 237, 307, 323, 354, 387, 396, 407, 412, 414, 417, 508, 509, 535, 541, 544, 561, 562, 588, 591, 642, 670, 671, 695, 700, 738, 765, 798, 801, 802, 808, 812, 824, 850, 877, 889, 893, 894, 896, 897, 901, 902, 906, 907, 936, 978, 980, 985, 989, 999, 1003, 1032, 1042, 1047], "domain": [201, 313, 396, 398, 413, 635, 721, 722, 723, 799, 800, 805, 806, 807, 985, 1010], "560": [201, 318, 325, 517, 518, 1011], "186": [201, 302, 304, 305, 331, 338, 351, 388, 787, 989, 1011], "595": 201, "223745": 201, "597": 201, "glm": [201, 219, 318, 648, 669, 680, 985, 1031, 1042], "vanilla": [201, 405, 409, 447, 449, 460, 629], "poissonregressor": [201, 219, 318, 321, 648, 680, 985, 1042, 1045, 1046], "poisson_glm": 201, "newton": [201, 219, 304, 610, 648, 658, 659, 669, 680, 858, 859, 985, 1035, 1036, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "deep": [201, 384, 396, 416, 423, 434, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 768, 796, 797, 798, 801, 802, 812, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 993, 994, 1009, 1010, 1014, 1036, 1042, 1043, 1045], "implicit": [201, 396, 416, 417, 572, 682, 683, 983, 988, 1009, 1040], "concis": [201, 382, 387, 1042, 1044], "poisson_gbrt": 201, "566": 201, "prone": [201, 249, 311, 394, 407], "5e5": 201, "realiz": [201, 1014], "priori": [201, 218, 271, 283, 307, 396, 409, 416, 588, 594, 988, 1047], "wrongli": [201, 340], "gen_even_slic": [201, 391, 941], "_mean_frequency_by_risk_group": 201, "y_true_bin": 201, "y_pred_bin": 201, "idx_sort": 201, "sl": 201, "y_true_seg": 201, "y_pred_seg": 201, "11935": 201, "11933": 201, "11932": 201, "12196": 201, "11931": 201, "portfolio": [201, 219, 983], "riskiest": [201, 219], "safest": [201, 219, 364, 376], "irrespect": [201, 234, 271, 285, 606], "lorenz": [201, 219, 1036, 1048], "summar": [201, 253, 269, 271, 355, 382, 384, 398, 416, 521, 658, 694, 706, 707, 985, 986, 989, 995], "lorenz_curv": [201, 219], "ranked_frequ": 201, "ranked_exposur": [201, 219], "cumulated_claim": 201, "cumulated_exposur": 201, "cum_exposur": 201, "cum_claim": [201, 219], "0x7f5509411670": 201, "occurr": [201, 313, 354, 355, 377, 382, 409, 417, 569, 570, 581, 589, 590, 617, 627, 628, 629, 630, 782, 836, 864, 991, 1032, 1037], "circumstanti": 201, "extractor": [201, 304, 370, 377, 396, 417, 503, 581, 582, 588, 589, 591, 978, 1031], "discrim": 201, "profil": [201, 368, 382, 385, 521, 524, 985, 1014], "ideal": [201, 203, 219, 259, 262, 269, 271, 272, 364, 381, 382, 386, 387, 390, 394, 396, 407, 725, 755, 978, 988, 1003, 1004, 1010], "meaningfulli": [201, 989], "537": [201, 220, 1011], "plot_poisson_regression_non_normal_loss": [201, 220, 1011], "monomi": 202, "vandermond": [202, 999], "x_0": [202, 657], "pseudo": [202, 304, 384, 413, 421, 440, 452, 454, 462, 469, 470, 471, 473, 474, 475, 476, 533, 561, 562, 563, 627, 634, 639, 641, 642, 646, 647, 652, 653, 660, 661, 662, 663, 677, 691, 695, 801, 802, 810, 812, 850, 857, 893, 894, 898, 901, 902, 903, 906, 937, 938, 985, 1001, 1036, 1045], "basis_1": 202, "basis_2": 202, "infinit": [202, 247, 265, 344, 368, 419, 446, 622, 623, 777, 796, 919, 921, 922, 981, 988, 999, 1004, 1039, 1041, 1044, 1045, 1046], "malt": [202, 1044, 1045, 1046], "londschien": [202, 1044], "prepar": [202, 237, 353, 368, 384, 385, 388, 390, 1005, 1014, 1039, 1047], "set_prop_cycl": 202, "teal": [202, 211, 269], "yellowgreen": [202, 204, 211, 360], "tomato": 202, "unwant": [202, 353], "oscillatori": [202, 999], "danger": [202, 413], "pft": 202, "splt": 202, "bsplines_": [202, 880], "refrain": [202, 382], "dec": [202, 280, 677, 880, 905, 1004], "31st": [202, 880], "x_plot_ext": 202, "y_plot_ext": 202, "421": [202, 220, 725, 755, 989, 1011], "plot_polynomial_interpol": [202, 220, 876, 880, 1011], "pareto": 203, "dale": [203, 1044], "mail": [203, 312, 377, 382, 386, 390, 394, 397, 1007, 1039, 1040], "ru": 203, "glemaitre58": 203, "y_true_mean": 203, "y_normal": 203, "y_pareto": 203, "huge": [203, 206, 368, 388, 627, 1034], "heavi": [203, 406, 1010], "parse_vers": [203, 670], "sp_version": [203, 670], "incompat": [203, 386, 496, 979, 1039, 1040], "older": [203, 237, 381, 386, 1034, 1041, 1043], "interior": [203, 670, 985, 1046], "out_bounds_predict": 203, "bool_": 203, "logical_or": [203, 209, 271, 388], "hit": [203, 388], "asymmetri": [203, 353], "linger": 203, "linear_regress": [203, 276], "quantile_regress": 203, "y_pred_lr": 203, "y_pred_qr": 203, "805": 203, "486": 203, "670": 203, "cv_results_lr": 203, "cv_results_qr": 203, "test_neg_mean_squared_error": [203, 824], "732": 203, "690": 203, "679": [203, 287, 299, 901, 1011], "129": [203, 1021, 1031], "545": [203, 220, 1011], "plot_quantile_regress": [203, 220, 1011], "robustli": [204, 408], "faulti": [204, 1031], "1903908407869": 204, "17236387": 204, "08533159": 204, "ransacregressor": [204, 207, 218, 400, 649, 678, 679, 985, 1034, 1036, 1037, 1038, 1039, 1042, 1044, 1045], "inlier_mask": 204, "inlier_mask_": [204, 671], "outlier_mask": 204, "line_x": [204, 218], "line_i": 204, "line_y_ransac": 204, "estimator_": [204, 237, 553, 554, 555, 556, 557, 558, 563, 564, 565, 566, 593, 594, 597, 671, 973, 1046], "plot_ransac": [204, 220, 1011], "mathcal": [205, 348, 414, 416, 627, 696, 981, 983, 985, 989, 1003, 1044], "discourag": [205, 394, 399, 689], "beta_": [205, 414], "excess": [205, 446, 999, 1038], "encourag": [205, 301, 340, 381, 382, 394, 1004, 1009], "kornel": [205, 1037], "kielczewski": [205, 1037], "plusnet": 205, "32634568": 205, "49665188": 205, "75747153": 205, "08699432": 205, "44381023": 205, "69892343": 205, "28808734": 205, "75949622": 205, "errors_coef": 205, "regularis": [205, 422, 473, 475], "logx": [205, 348], "gradual": [205, 858, 859, 1003], "formerli": [205, 1032, 1035, 1037, 1038], "intric": [205, 512], "rapidli": [205, 264, 1004, 1014, 1019], "influenti": [205, 354, 1014], "pose": [205, 270, 985, 1024], "lose": [205, 218, 355, 377, 396, 412, 417, 419, 937, 938, 979, 985, 1025], "concret": [205, 383, 397, 418, 668, 674, 675, 676, 677, 893, 894, 985, 1003, 1009], "678": [205, 220, 1011], "plot_ridge_coeff": [205, 220, 1011], "practis": 206, "10x10": 206, "hilbert": [206, 867, 981, 999], "n_alpha": [206, 472, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 673, 675, 681, 682, 683, 684, 1034], "plot_ridge_path": [206, 220, 1011], "theilsen": 207, "lessen": [207, 658, 659], "theilsenregressor": [207, 218, 649, 671, 678, 985, 1035, 1043, 1045], "x_error": 207, "y_errors_larg": 207, "x_errors_larg": 207, "deviant": [207, 995], "legend_titl": 207, "nabsolut": 207, "nto": [207, 271], "plot_robust_fit": [207, 220, 1011], "asgd": [208, 1003], "rob": [208, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1043, 1046], "zinkov": [208, 1031, 1032, 1033, 1035, 1036], "heldout": 208, "squared_hing": [208, 348, 666, 676, 901, 908, 985, 1004], "0e4": 208, "yy_": 208, "641": [208, 220, 1011], "plot_sgd_comparison": [208, 220, 1011], "_test": [209, 309, 384, 1044], "ignore_warn": [209, 309, 1037], "load_mnist": [209, 285], "class_0": [209, 379, 510], "class_1": [209, 379, 510], "554": [209, 217, 303], "mnist_784": [209, 217, 285, 303], "fit_and_scor": 209, "train_scor": [209, 313, 348, 358, 804, 820, 824, 825, 828, 984], "estimator_dict": 209, "flush": 209, "results_df": [209, 262, 313], "group_df": 209, "640": [209, 220, 407, 490, 506, 507, 583, 584, 978, 1011], "plot_sgd_early_stop": [209, 220, 1011], "ova": [210, 666, 668, 676, 1003], "plot_sgd_iri": [210, 220, 1011], "ugli": [210, 293, 296, 336], "dim": [210, 234, 293, 294, 296, 336, 337, 527, 699, 1048], "modified_huber_loss": 211, "darkorchid": 211, "094": [211, 220, 336, 351, 472, 1011], "plot_sgd_loss_funct": [211, 220, 1011], "l1_color": 212, "l2_color": 212, "elastic_net_color": 212, "1001": [212, 244], "rho": [212, 414, 677, 985, 1003, 1032], "elastic_net": 212, "dpi": [212, 915, 1044], "elastic_net_contour": 212, "l2_contour": 212, "l1_contour": 212, "plot_sgd_penalti": [212, 220, 1011], "ndenumer": 213, "069": [213, 220, 260, 341, 351, 1011], "plot_sgd_separating_hyperplan": [213, 220, 1011], "no_weight": 214, "samples_weight": 214, "no_weights_handl": 214, "weights_handl": 214, "plot_sgd_weighted_sampl": [214, 220, 1011], "sgdoneclasssvm": [215, 230, 320, 905, 995, 1003, 1044, 1046, 1047, 1048], "rc": [215, 386], "novel": [215, 291, 339, 364, 407, 978], "abnorm": [215, 230, 291, 339, 377, 492, 563, 847, 995, 1039], "y_pred_train": [215, 339], "y_pred_test": [215, 291, 339], "y_pred_outli": [215, 291, 339], "n_error_train": [215, 339], "n_error_test": [215, 291, 339], "n_error_outli": [215, 291, 339], "clf_sgd": 215, "pipe_sgd": 215, "y_pred_train_sgd": 215, "y_pred_test_sgd": 215, "y_pred_outliers_sgd": 215, "n_error_train_sgd": 215, "n_error_test_sgd": 215, "n_error_outliers_sgd": 215, "pubu": [215, 234, 291, 339], "darkr": [215, 291, 339], "palevioletr": [215, 291, 339], "b1": [215, 291, 339], "b2": [215, 291, 339], "blueviolet": [215, 291, 339], "plot_sgdocsvm_vs_ocsvm": [215, 220, 1011], "newgroups20": 216, "trim": [216, 409, 841, 842], "20newsgroup": [216, 375, 1031], "4500": 216, "130107": [216, 234, 489], "epoch": [216, 396, 536, 666, 667, 668, 676, 677, 678, 858, 859, 1003, 1038, 1039, 1044], "5960": 216, "26593496": 216, "43348936": 216, "26362917": 216, "31973683": 216, "37815029": 216, "2928359": 216, "27054655": 216, "62717609": 216, "19522393": 216, "30897646": 216, "34586917": 216, "28207552": 216, "34125758": 216, "29898468": 216, "34279478": 216, "59489497": 216, "38353048": 216, "35278655": 216, "19829832": 216, "14603365": 216, "6440": 216, "36047253": 216, "1268187": 216, "10606655": 216, "17985197": 216, "5395559": 216, "07993421": 216, "06686804": 216, "21443888": 216, "11528972": 216, "2075215": 216, "10914094": 216, "11144673": 216, "13988486": 216, "09684337": 216, "26286057": 216, "11682692": 216, "55800226": 216, "17370318": 216, "11452112": 216, "226": [216, 409, 420, 444], "arthur": [216, 217, 409, 447, 460, 1036, 1037, 1038, 1039, 1040, 1043, 1045], "mensch": [216, 217, 1036, 1037, 1038, 1039], "timeit": [216, 250, 388], "default_tim": [216, 250], "model_param": 216, "this_max_it": 216, "train_tim": [216, 236, 353, 354], "ndataset": [216, 309], "run_tim": [216, 217], "plot_sparse_logistic_regression_20newsgroup": [216, 220, 1011], "8253": 217, "l1_plot": 217, "plot_sparse_logistic_regression_mnist": [217, 220, 1011], "subpopul": [218, 679, 985], "residual_threshold": [218, 671, 985, 1044], "remedi": 218, "max_subpopul": [218, 679, 1045], "florian": [218, 1014, 1031, 1035, 1037, 1041], "wilhelm": [218, 1035, 1037, 1041], "indigo": 218, "523": [218, 220, 524, 1011], "plot_theilsen": [218, 220, 1011], "motor": 219, "parti": [219, 280, 323, 369, 381, 394, 800, 807, 957, 1007, 1031, 1042, 1047, 1048], "liabil": 219, "functool": 219, "mean_tweedie_devi": [219, 989, 1041], "load_mtpl2": 219, "fremtpl2freq": 219, "df_freq": 219, "fremtpl2sev": 219, "41215": 219, "df_sev": 219, "claimamount": 219, "fillna": [219, 240], "unquot": 219, "column_nam": 219, "plot_obs_pr": 219, "y_label": 219, "fill_legend": 219, "df_": 219, "tweedie_pow": 219, "d\u00b2": 219, "subset_label": 219, "score_label": [219, 268], "est_freq": 219, "est_sev": 219, "unstack": [219, 265], "fremtpl2": 219, "unreason": [219, 413], "exception": 219, "200000": 219, "column_tran": [219, 410], "purepremium": 219, "indirectli": [219, 344], "avgclaimamount": 219, "fmax": 219, "option_context": 219, "max_column": 219, "139": [219, 285, 388, 416, 452, 462, 691, 695, 990], "463": [219, 280], "27000": 219, "303": [219, 635], "333333": 219, "r25": 219, "1981": [219, 985], "14156": 219, "142857": 219, "4792": 219, "1456": 219, "10403": 219, "928571": 219, "10834": 219, "17474": 219, "193548": 219, "225806": 219, "r73": 219, "3986": 219, "12860": [219, 1040], "5417": 219, "seemingli": [219, 364, 394], "169504": 219, "6237": 219, "upon": [219, 227, 298, 377, 382, 394, 396, 403, 561, 562, 627, 630, 671, 788, 796, 797, 841, 842, 978, 985, 1005, 1016, 1025, 1045], "glm_freq": 219, "0448": 219, "0427": [219, 469, 474], "1379": 219, "1378": 219, "2441": 219, "2246": 219, "surprisingli": [219, 377, 417], "bonu": [219, 382, 1020, 1025], "malu": 219, "younger": 219, "infti": [219, 419, 619, 985, 999, 1038], "gammaregressor": [219, 318, 321, 680, 985, 1042, 1045, 1046], "mask_test": 219, "glm_sev": 219, "900000e": 219, "400000e": 219, "756746e": 219, "744042e": 219, "801770e": 219, "030677e": 219, "dummy_sev": 219, "000000e": 219, "756687e": 219, "744497e": 219, "803882e": 219, "033764e": 219, "avgclaim": 219, "nbclaim": 219, "1951": 219, "1940": 219, "1978": [219, 985], "apriori": 219, "regardless": [219, 263, 264, 265, 369, 382, 409, 535, 632, 633, 658, 704, 715, 989, 1001, 1039, 1046, 1047], "glm_pure_premium": 219, "999": [219, 262, 386, 416, 717, 858, 859], "scores_product_model": 219, "scores_glm_pure_premium": 219, "expand_frame_repr": 219, "640000e": 219, "370000e": 219, "669930e": 219, "617050e": 219, "640770e": 219, "640880e": 219, "7000": 219, "695740e": 219, "683980e": 219, "682880e": 219, "692270e": 219, "8000": [219, 265, 266], "046010e": 219, "040530e": 219, "037600e": 219, "045390e": 219, "9000": 219, "387580e": 219, "385000e": 219, "382120e": 219, "387830e": 219, "9900": 219, "015716e": 219, "015414e": 219, "015347e": 219, "015587e": 219, "9990": 219, "914573e": 219, "914370e": 219, "914538e": 219, "914387e": 219, "904751e": 219, "904556e": 219, "904747e": 219, "904558e": 219, "730119e": 219, "722128e": 219, "739865e": 219, "731249e": 219, "295040e": 219, "212197e": 219, "295505e": 219, "213056e": 219, "917618e": 219, "299546e": 219, "916555e": 219, "313276e": 219, "951751e": 219, "325198e": 219, "riski": 219, "operation": [219, 1014], "simpler": [219, 340, 368, 381, 409, 414, 985, 990, 1023, 1036], "ranked_pure_premium": 219, "cumulated_claim_amount": 219, "cumulated_sampl": 219, "y_pred_product": 219, "y_pred_tot": 219, "ordered_sampl": 219, "258": [219, 220, 224, 1011], "plot_tweedie_regression_insurance_claim": [219, 220, 1011], "md": [222, 223, 224, 225, 386, 688, 692, 694, 1026, 1027, 1031, 1043, 1046], "seek": [222, 224, 226, 381, 382, 394, 397, 508, 509, 986, 1017, 1019], "ticker": [222, 224, 227, 285], "s_point": 222, "s_color": 222, "make_s_curv": [222, 227], "plot_3d": 222, "points_color": 222, "subplot_kw": [222, 289], "set_major_loc": [222, 290], "multipleloc": [222, 290], "add_2d_scatt": 222, "set_major_formatt": [222, 224, 227, 285, 290], "nullformatt": [222, 224, 227, 285], "lle": [222, 223, 224, 226, 530, 689, 693, 986, 1043], "thought": [222, 290, 396, 409, 446, 986, 990], "analys": [222, 362, 414, 801, 802, 986, 1009, 1014], "lle_standard": 222, "s_standard": 222, "lle_ltsa": 222, "ltsa": [222, 223, 224, 689, 693, 986], "s_ltsa": 222, "lle_hessian": 222, "hessian": [222, 223, 224, 416, 648, 658, 659, 669, 680, 689, 693, 985, 993, 1026, 1027, 1046], "s_hessian": 222, "lle_mod": 222, "s_mod": 222, "lle_method": 222, "tangent": [222, 344, 689, 693, 987, 1026, 1027], "eigenmap": [222, 689, 691, 693, 695, 1026, 1027, 1032], "isometr": [222, 688, 690, 691, 692, 986], "geodes": [222, 688, 986], "s_isomap": 222, "md_scale": 222, "normalized_stress": [222, 690, 694, 986, 1046], "s_scale": 222, "laplacian": [222, 374, 406, 440, 452, 462, 620, 639, 643, 691, 695, 764, 765, 773, 897, 985, 986, 1002, 1027, 1032, 1037], "s_spectral": 222, "t_sne": [222, 1039], "s_t_sne": 222, "244": [222, 228, 280, 353, 584, 1011], "plot_compare_method": [222, 228, 1011], "offsetbox": 223, "plot_embed": 223, "shown_imag": 223, "someth": [223, 237, 280, 353, 382, 384, 385, 386, 390, 417, 989, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "4e": 223, "imagebox": 223, "annotationbbox": 223, "offsetimag": 223, "neighborhoodcomponentsanalysi": [223, 293, 294, 295, 992, 1040, 1045], "random_project": [223, 234, 371, 1001, 1006, 1032, 1037, 1047, 1048], "sparserandomproject": [223, 234, 893, 1001, 1032, 1037, 1045, 1047, 1048], "n_iter_without_progress": [223, 692, 1036, 1037], "nca": [223, 293, 294, 295, 850, 992], "518": [223, 228, 1011], "plot_lle_digit": [223, 228, 1011], "pole": 224, "thin": [224, 620], "earth": [224, 354, 763, 1009], "052": [224, 537], "087": 224, "sphere_data": 224, "trans_data": 224, "2g": [224, 227, 697, 1042], "plot_manifold_spher": [224, 228, 1011], "euclidean_dist": [225, 234, 384, 450, 457, 688, 761, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 1031, 1036, 1039, 1040, 1048], "finfo": [225, 471, 472, 478, 606, 650, 651, 654, 655, 656, 682, 683, 740, 1046], "x_true": 225, "dissimilar": [225, 344, 396, 406, 452, 690, 694, 986, 1037, 1047], "embedding_": [225, 396, 688, 689, 690, 691, 692], "nmd": 225, "npo": 225, "173": [225, 228, 388, 584, 1011], "plot_md": [225, 228, 1011], "sr_point": 226, "sr_color": 226, "ambient": 226, "text2d": 226, "unrol": 226, "unnecessarili": [226, 1038, 1041], "clump": 226, "sr_lle": 226, "sr_err": 226, "locally_linear_embed": [226, 986], "sr_tsne": 226, "stretch": [226, 251], "byproduct": 226, "sh_point": 226, "sh_color": 226, "topologi": [226, 227], "sh_lle": 226, "sh_err": 226, "sh_tsne": 226, "525": [226, 228, 439, 628, 979, 1011], "plot_swissrol": [226, 228, 1011], "tendenc": [227, 985, 986, 988, 991, 994], "clearer": [227, 1004], "distil": 227, "pub": [227, 839, 896], "misread": 227, "narin": [227, 1038, 1039], "kokhlikyan": [227, 1038, 1039], "918": [227, 228, 1011], "plot_t_sne_perplex": [227, 228, 1011], "637": 228, "cope": [230, 370, 377, 985], "multimod": 230, "inli": [230, 985, 995], "unimod": [230, 474], "localoutlierfactor": [230, 240, 291, 292, 321, 396, 563, 905, 995, 1038, 1039, 1041, 1045, 1046, 1047, 1048], "modal": [230, 474, 940], "hypercub": [230, 515], "decent": [230, 261, 377, 991], "handpick": 230, "absenc": [230, 265, 396, 712, 864, 988, 989], "negative_linestyl": 230, "outliers_fract": 230, "n_inlier": 230, "anomaly_algorithm": 230, "blobs_param": 230, "plot_anomaly_comparison": [230, 245, 1011], "transfus": 231, "1464": 231, "donat": 231, "cm_displai": 231, "y_score": [231, 269, 271, 396, 482, 483, 484, 707, 720, 725, 726, 738, 739, 755, 781, 787, 788, 793, 798, 801, 802, 812, 861, 989, 1037, 1045, 1047], "pos_label": [231, 240, 396, 438, 439, 698, 700, 702, 706, 707, 709, 726, 728, 729, 737, 781, 782, 783, 786, 788, 868, 885, 989, 1039, 1043, 1045], "roc_displai": 231, "previs": 231, "precision_recall_curv": [231, 269, 700, 706, 707, 726, 989, 1032, 1033, 1037, 1044, 1045, 1047], "pr_displai": 231, "easlii": 231, "667": [231, 245, 720, 739, 989, 1011], "plot_display_object_visu": [231, 245, 1011], "summaris": [232, 318], "composit": [232, 318, 371, 374, 413, 658, 787, 979, 985, 998, 1027, 1032], "num_proc": [232, 318], "cat_proc": [232, 318], "feat1": [232, 318, 417], "feat3": [232, 318, 417], "feat0": [232, 318], "feat2": [232, 318, 417], "plot_estimator_represent": [232, 245, 1011], "isotonicregress": [233, 980, 1032, 1033, 1034, 1035, 1037, 1039, 1040, 1041, 1043, 1045, 1046, 1047], "ir": [233, 414, 590, 725, 755, 836, 840, 987, 989], "out_of_bound": [233, 635], "y_": [233, 248, 252, 253, 297, 384, 412, 414, 637, 648, 669, 680, 728, 729, 737, 763, 782, 783, 786, 985, 989, 1037], "linearregressionifittedlinearregress": 233, "x_thresholds_": [233, 635, 1043], "y_thresholds_": [233, 635, 1043], "plot_isotonic_regress": [233, 245, 1011], "lemma": [234, 374, 408, 534, 541, 549, 893, 894, 895, 983, 1027, 1034], "johnson_lindenstrauss_min_dim": [234, 1001, 1032], "achliopta": [234, 894, 895, 1001], "_compon": [234, 536], "geq": [234, 407, 414, 416, 985, 989, 999, 1003, 1004], "_sampl": [234, 414, 538, 540, 547], "admiss": [234, 369], "eps_rang": 234, "min_n_compon": 234, "nn_sampl": [234, 274], "semilogi": 234, "nn_compon": [234, 235], "100k": 234, "n_components_rang": 234, "rp": 234, "projected_data": 234, "n_byte": 234, "projected_dist": 234, "min_dist": 234, "max_dist": 234, "hexbin": 234, "gridsiz": 234, "797": 234, "331": 234, "268": [234, 248], "jl": [234, 894], "436": 234, "901": [234, 245, 1011], "plot_johnson_lindenstrauss_bound": [234, 245, 1011], "rbfsampler": [235, 639, 640, 642, 981, 1016, 1035, 1045, 1046], "mont": [235, 419, 611, 641, 642, 981, 994], "fourier": [235, 408, 638, 639, 640, 641, 642, 757, 758, 981], "acceler": [235, 322, 368, 394, 405, 409, 468, 692, 899, 986, 1009, 1014, 1040, 1044, 1046, 1048], "data_train": [235, 263, 353], "targets_train": 235, "data_test": [235, 263, 353], "targets_test": 235, "kernel_svm": 235, "linear_svm": 235, "feature_map_fouri": 235, "feature_map_nystroem": [235, 639], "fourier_approx_svm": 235, "feature_map": [235, 307], "nystroem_approx_svm": 235, "kernel_svm_tim": 235, "kernel_svm_scor": 235, "linear_svm_tim": 235, "linear_svm_scor": 235, "fourier_scor": 235, "nystroem_scor": 235, "fourier_tim": 235, "nystroem_tim": 235, "feature_map__n_compon": 235, "timescal": 235, "ly": [235, 849, 851, 852, 853, 1035], "flat_grid": 235, "lv_ep": 235, "tab10": [235, 252], "749": [235, 245, 1011], "plot_kernel_approxim": [235, 245, 1011], "krr": [236, 643, 982], "insensit": [236, 643, 676, 678, 787, 902, 982, 1003, 1004, 1031], "fifth": [236, 982, 1016], "kr": [236, 262, 1045], "svr_fit": 236, "kr_fit": 236, "sv_ratio": 236, "support_": [236, 347, 469, 474, 593, 594, 602, 903, 904, 905, 906, 907, 1004], "y_svr": 236, "svr_predict": 236, "y_kr": 236, "kr_predict": 236, "09999999999999999": [236, 270, 340], "737": [236, 524], "340": [236, 327, 333, 1011], "117": [236, 1032], "090": 236, "sv_ind": 236, "arithmet": [236, 388, 390, 409, 551, 648, 669, 680, 704, 717, 735, 736, 756, 794, 989, 1039], "test_tim": [236, 353], "train_test_s": 236, "learningcurvedisplai": [236, 264, 322, 984, 1046, 1047], "negate_scor": [236, 804, 820], "score_typ": [236, 264, 277, 323, 804, 820, 1047], "std_display_styl": [236, 264, 804, 820], "get_legend_handles_label": [236, 264, 269], "923": [236, 245, 1011], "plot_kernel_ridge_regress": [236, 245, 1011], "set_config": [237, 242, 244, 314, 318, 324, 368, 369, 400, 410, 437, 443, 444, 447, 449, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 533, 534, 538, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 594, 597, 610, 611, 626, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 800, 805, 807, 816, 822, 823, 824, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 846, 848, 851, 852, 858, 859, 861, 864, 866, 867, 868, 873, 880, 881, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 1040, 1042, 1045, 1047], "metaestimatormixin": 237, "regressormixin": [237, 384, 396, 465, 1042], "transformermixin": [237, 285, 384, 396, 465, 1039, 1046, 1047, 1048], "metadata_rout": [237, 408, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 533, 534, 538, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 594, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 800, 805, 807, 816, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 846, 848, 851, 852, 858, 859, 861, 864, 866, 867, 868, 873, 880, 881, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912], "metadatarout": [237, 437, 464, 597, 647, 651, 653, 655, 659, 661, 663, 665, 798, 801, 802, 812, 829, 830, 831, 832, 833, 834, 835, 861, 948, 1048], "methodmap": [237, 946], "get_routing_for_object": [237, 946], "process_rout": [237, 1048], "my_group": [237, 400], "my_weight": [237, 400], "my_other_weight": [237, 400], "enable_metadata_rout": [237, 324, 400, 437, 443, 444, 447, 449, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 533, 534, 538, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 594, 597, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 798, 799, 800, 801, 802, 805, 807, 812, 816, 822, 823, 824, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 846, 848, 851, 852, 858, 859, 861, 864, 866, 867, 868, 873, 880, 881, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 1047], "check_metadata": 237, "obj": [237, 403, 567, 568, 946, 947, 948, 949, 950, 955], "print_rout": 237, "get_metadata_rout": [237, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 945, 946, 947, 948, 949, 989, 1048], "_serial": 237, "exampleclassifi": 237, "smart": [237, 443, 459, 460, 590], "accomplish": [237, 384, 407, 546, 986, 990, 992, 1014, 1048], "magic": [237, 383, 388, 419, 616, 621, 624], "set_fit_request": [237, 324, 400, 437, 443, 444, 447, 449, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 588, 591, 594, 635, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 690, 833, 834, 836, 837, 838, 839, 840, 846, 866, 867, 880, 881, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912], "set_predict_request": [237, 443, 447, 449, 482, 483, 484, 552, 611, 635, 644, 645, 909, 910, 911, 912], "set_score_request": [237, 324, 400, 437, 443, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 678, 679, 680, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 843, 844, 848, 851, 852, 858, 859, 861, 896, 897, 901, 902, 903, 904, 906, 907, 909, 910, 911, 912, 989], "inherit": [237, 382, 384, 395, 396, 577, 676, 930, 932, 985, 1031, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1046, 1047, 1048], "metaclassifi": [237, 238], "owner": [237, 377, 379, 945, 946], "method_map": [237, 946], "fit_param": [237, 396, 433, 437, 442, 445, 465, 532, 534, 536, 537, 539, 542, 543, 549, 567, 569, 570, 582, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 628, 630, 635, 638, 639, 640, 641, 642, 665, 804, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 845, 850, 853, 857, 860, 864, 865, 866, 867, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 893, 894, 949, 1038, 1041, 1042, 1043, 1045, 1047, 1048], "metadatarequest": [237, 423, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 469, 470, 471, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 583, 588, 589, 590, 591, 592, 595, 596, 598, 599, 600, 603, 610, 611, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 652, 654, 656, 657, 658, 660, 662, 664, 666, 667, 668, 669, 670, 672, 674, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 796, 797, 799, 800, 803, 805, 806, 807, 808, 811, 813, 814, 815, 816, 817, 818, 819, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 946, 948, 1048], "request_rout": 237, "validate_metadata": [237, 946], "routed_param": [237, 949], "route_param": [237, 946], "caller": [237, 410, 646, 647, 652, 660, 661, 662, 681, 891, 892, 946, 947, 957, 965, 966, 967, 1040], "predict_param": [237, 465, 567, 568, 1044], "object_nam": [237, 946, 949], "method_nam": [237, 946, 949], "silent": [237, 417, 581, 857, 999, 1036, 1037, 1039, 1040, 1044, 1045], "bug": [237, 317, 318, 319, 320, 321, 322, 323, 324, 371, 380, 384, 385, 387, 390, 394, 396, 1007, 1010, 1031, 1032, 1033, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "notabl": [237, 307, 376, 396, 496, 727, 874, 986, 988, 992, 1035, 1038, 1045], "metaclassifierifittedmetaclassifi": 237, "exampleclassifierexampleclassifi": 237, "typeerror": [237, 320, 387, 711, 925, 946, 973, 1038, 1039, 1042, 1044, 1048], "got": [237, 269, 364, 387, 551, 649, 665, 1044, 1046, 1048], "sample_weight1": 237, "sample_weight2": 237, "aliased_sample_weight": 237, "alia": [237, 383, 386, 390, 396, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 533, 534, 538, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 594, 610, 611, 617, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 800, 805, 807, 816, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 846, 848, 851, 852, 858, 859, 861, 864, 866, 867, 868, 873, 880, 881, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 963, 995, 1010, 1031, 1045], "calle": [237, 947], "predict_log_proba": [237, 384, 396, 549, 550, 551, 553, 555, 557, 559, 564, 593, 594, 658, 659, 676, 798, 801, 802, 812, 822, 832, 836, 837, 838, 839, 840, 858, 861, 898, 903, 906, 909, 911, 1004, 1031, 1044, 1048], "meta_est": 237, "routerconsumerclassifi": 237, "add_self_request": [237, 946], "self_request": 237, "clf_sample_weight": 237, "meta_clf_sample_weight": 237, "routerconsumerclassifierifittedrouterconsumerclassifi": 237, "complic": [237, 301, 388, 419, 694, 992], "simplepipelin": 237, "_required_paramet": [237, 384], "transformer_": [237, 465], "child": [237, 353, 362, 369, 394, 396, 400, 409, 416, 442, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 909, 910, 911, 912, 946, 947, 949, 957, 1005, 1038], "boilerpl": [237, 384, 1014, 1025], "exampletransform": 237, "set_transform_request": [237, 482, 483, 484, 533, 582, 588, 590, 591, 635, 864, 867, 873, 881], "metaregressor": 237, "weightedmetaregressor": 237, "__metadata_request__fit": 237, "compat": [237, 265, 285, 318, 376, 385, 391, 392, 394, 396, 399, 400, 417, 463, 469, 508, 566, 577, 585, 586, 589, 603, 614, 615, 618, 619, 620, 622, 623, 632, 633, 634, 658, 659, 673, 675, 773, 777, 799, 800, 803, 805, 806, 807, 808, 811, 813, 814, 815, 816, 817, 818, 819, 845, 846, 861, 866, 874, 875, 913, 914, 917, 952, 986, 989, 992, 994, 1009, 1010, 1014, 1027, 1031, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "silenc": 237, "exampleregressor": 237, "commun": [237, 375, 381, 385, 387, 390, 396, 409, 416, 538, 540, 547, 692, 710, 873, 979, 986, 992, 999, 1003, 1007, 1009, 1014, 1039, 1040], "vendor": [237, 1036, 1039, 1040], "NOT": [237, 291, 379, 385, 808, 841, 842], "signatur": [237, 353, 354, 377, 488, 489, 557, 558, 564, 565, 594, 610, 611, 659, 673, 675, 711, 741, 804, 820, 823, 825, 828, 874, 949, 978, 1038, 1044, 1048], "046": [237, 245, 354, 1011], "plot_metadata_rout": [237, 245, 1011], "theta_c": [238, 523], "reject": [238, 396, 397, 523, 671, 726, 921, 922, 985, 989, 1039], "likewis": [238, 409, 523], "surround": [238, 382, 847, 995], "cca": [238, 412, 483, 485, 1035, 1039, 1040, 1041, 1043, 1045], "onevsrestclassifi": [238, 269, 271, 280, 400, 407, 829, 831, 901, 1016, 1032, 1033, 1035, 1037, 1038, 1044, 1045, 1048], "min_x": 238, "max_x": 238, "plot_subfigur": 238, "min_i": 238, "max_i": [238, 991], "zero_class": 238, "one_class": 238, "nfor": 238, "plot_multilabel": [238, 245, 1011], "extratreesregressor": [239, 416, 557, 565, 566, 911, 912, 1034, 1037, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048], "n_face": 239, "face_id": 239, "n_pixel": [239, 260], "nn": [239, 417, 695, 1023], "y_test_predict": 239, "true_fac": 239, "completed_fac": 239, "661": [239, 245, 1011], "plot_multioutput_face_complet": [239, 245, 1011], "iforest": 240, "pharuj": 240, "rajborirug": 240, "ra": 240, "kmitl": 240, "ac": [240, 530, 664, 685, 686, 985, 1002, 1025], "robustscal": [240, 878, 891, 979, 999, 1036, 1037, 1039, 1041, 1042, 1043, 1047], "make_estim": 240, "iforest_kw": 240, "lof_kw": 240, "outlier_detector": 240, "perf_count": 240, "negative_outlier_factor_": [240, 292, 847, 995], "expected_n_anomali": 240, "expected_anomaly_fract": 240, "kddcup": [240, 375, 492, 1027], "inject": [240, 377, 416], "attack": [240, 377], "fetch_kddcup99": [240, 377, 1038, 1039, 1040, 1043, 1044], "percent10": [240, 492], "int32": [240, 285, 314, 382, 396, 443, 447, 449, 451, 453, 903, 904, 905, 906, 907, 954, 1004, 1040, 1046, 1047, 1048], "anomaly_frac": 240, "10065": 240, "338": 240, "protocol_typ": 240, "cat_column": 240, "wilderness_area": 240, "soil_typ": 240, "x_forestcov": 240, "14302": 240, "137": [240, 388, 1032], "forestcov": 240, "usd": 240, "sqft": 240, "ames_h": 240, "div": 240, "lot_area": 240, "misc_featur": 240, "add_categori": 240, "noinfo": 240, "mas_vnr_typ": 240, "2714": 240, "categorical_columns_selector": 240, "fetal": 240, "cardiotocogram": 240, "heart": 240, "fhr": 240, "minor": [240, 265, 269, 377, 385, 397, 496, 989, 1031, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "x_cardiotocographi": 240, "2126": 240, "datasets_nam": 240, "ceil": [240, 557, 558, 559, 560, 563, 564, 565, 566, 594, 671, 801, 802, 909, 910, 911, 912, 1003], "dataset_nam": [240, 285], "model_idx": 240, "plot_chance_level": [240, 269, 271, 272, 700, 702, 1047], "chance_level_kw": [240, 700, 702, 1047], "privileg": [240, 390], "n_neighbors_list": [240, 287], "localoutlierfactor__n_neighbor": 240, "preprocessor_list": 240, "interquartil": [240, 879, 891], "iqr": [240, 879, 891], "75th": [240, 879], "squash": [240, 386, 419, 531, 537, 542, 548], "818": [240, 245, 1011], "plot_outlier_detection_bench": [240, 245, 1011], "recalcul": [241, 243, 409, 1028, 1031], "mlpregressormlpregressor": 241, "tree_disp": 241, "mlp_disp": 241, "0x7f55087311c0": 241, "373": [241, 245, 1011], "plot_partial_dependence_visualization_api": [241, 245, 1011], "deactiv": [242, 376, 383, 388, 399, 410, 801, 802, 1045], "standard_scal": 242, "polynomialfeaturespolynomialfeatur": 242, "pcapca": 242, "svcsvc": [242, 260, 262, 319], "numeric_preprocessor": 242, "imputation_mean": 242, "categorical_preprocessor": [242, 313], "imputation_const": 242, "onehot": [242, 308, 309, 410, 866, 999], "gender": [242, 874, 999], "classifier__n_estim": 242, "classifier__max_featur": 242, "classifier__max_depth": 242, "classifier__criterion": 242, "gridsearchcvinot": 242, "fittedgridsearchcv": 242, "plot_pipeline_displai": [242, 245, 1011], "svcifittedsvc": 243, "svc_disp": [243, 317, 1028], "rfc_disp": [243, 317, 1028], "plot_roc_curve_visualization_api": [243, 245, 1011], "transform_output": [244, 314, 468, 899, 1046, 1047], "slep018": [244, 384, 1046], "x_test_scal": 244, "894264": 244, "798301": 244, "271411": 244, "327605": 244, "244466": 244, "086944": 244, "327407": 244, "459074": 244, "660797": 244, "462234": 244, "576989": 244, "159419": 244, "933197": 244, "427329": 244, "414810": 244, "039497": 244, "275851": 244, "scaler2": 244, "x_test_np": 244, "x_test_df": 244, "feature_names_in_": [244, 314, 320, 396, 430, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 627, 628, 629, 630, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 796, 797, 798, 801, 802, 812, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 1044, 1045, 1046, 1047], "num_pip": 244, "num_col": 244, "7621951219512195": 244, "log_reg": [244, 321], "config_context": [244, 368, 369, 405, 626, 899, 1038, 1044, 1047], "reset": [244, 364, 390, 534, 676, 677, 678, 841, 842, 870, 871, 881, 1033], "standardscalerifittedstandardscal": 244, "1088": 244, "151101": 244, "479229": 244, "188153": 244, "660": 244, "393297": 244, "263234": 244, "657": [244, 262], "975455": 244, "285": [244, 328, 723], "532843": 244, "546068": 244, "1511007": 244, "47922861": 244, "18815268": 244, "39329747": 244, "26323428": 244, "97545464": 244, "53284267": 244, "54606834": 244, "plot_set_output": [244, 245, 1011], "miscellan": [245, 371, 375, 376, 1011, 1037, 1038, 1045, 1046, 1048], "bayesiangaussianmixtur": [247, 248, 253, 797, 988, 1037, 1039, 1040, 1044, 1045], "weight_concentration_prior_typ": [247, 253, 796, 988, 1037], "dirichlet_distribut": [247, 796, 988, 1037], "dirichlet_process": [247, 253, 796, 988, 1037], "weight_concentration_prior": [247, 253, 796, 988], "finit": [247, 253, 368, 377, 396, 468, 538, 551, 582, 606, 609, 610, 611, 658, 727, 777, 784, 796, 822, 899, 919, 921, 922, 985, 988, 989, 1014, 1016, 1023, 1038, 1039, 1043, 1045, 1046], "covar": [247, 248, 253], "eig_val": 247, "eig_vec": 247, "unit_eig_vec": 247, "arctan2": [247, 249, 252], "56b4e9": 247, "plot_titl": 247, "weights_": [247, 796, 797, 1045], "covariances_": [247, 248, 249, 252, 253, 796, 797, 1038], "get_xaxi": [247, 295, 307], "set_tick_param": 247, "labelleft": 247, "0072b2": 247, "f0e442": 247, "d55e00": 247, "mean_precision_prior": [247, 253, 796], "nprior": 247, "gamma_0": [247, 253], "reg_covar": [247, 796, 797], "init_param": [247, 250, 253, 796, 797], "concentrations_prior": 247, "plot_concentration_prior": [247, 254, 1011], "_base": [248, 384], "color_it": [248, 252, 253], "splot": [248, 253], "dp": [248, 253], "shouldn": [248, 253, 382], "em": [248, 249, 253, 443, 447, 459, 536, 796, 797, 988, 1045], "dpgmm": [248, 253, 1031, 1035, 1037], "plot_gmm": [248, 254, 1011], "ronweiss": 249, "make_ellips": 249, "datalim": 249, "skf": [249, 413, 817], "train_index": [249, 330, 413, 799, 800, 803, 805, 806, 807, 808, 811, 813, 814, 815, 816, 817, 818, 819], "test_index": [249, 330, 413, 799, 800, 803, 805, 806, 807, 808, 811, 813, 814, 815, 816, 817, 818, 819], "cov_typ": 249, "means_init": [249, 250, 797], "y_train_pr": 249, "train_accuraci": 249, "y_test_pr": 249, "test_accuraci": [249, 263], "plot_gmm_covari": [249, 254, 1011], "random_from_data": [250, 796, 797, 988], "diamond": 250, "colour": [250, 379, 417, 587, 990], "eventu": [250, 408, 409, 418, 593, 1014], "walsh": [250, 1043, 1045], "timer": [250, 388], "_samples_gener": 250, "extmath": [250, 353, 391, 408, 453, 1031, 1032, 1037, 1038, 1041, 1045, 1046, 1048], "row_norm": 250, "x_squared_norm": [250, 460], "get_initial_mean": 250, "times_init": 250, "relative_tim": 250, "ini": 250, "init_tim": 250, "2fx": 250, "531": [250, 254, 1011], "plot_gmm_init": [250, 254, 1011], "shifted_gaussian": 251, "stretched_gaussian": 251, "score_sampl": [251, 290, 291, 292, 298, 396, 415, 469, 532, 541, 563, 677, 796, 797, 798, 801, 802, 812, 846, 847, 857, 861, 905, 995, 1034, 1039, 1041, 1043], "plot_gmm_pdf": [251, 254, 1011], "kept": [252, 285, 348, 376, 386, 403, 419, 496, 535, 538, 540, 541, 547, 597, 610, 611, 619, 620, 644, 695, 796, 797, 922, 999, 1039, 1040], "component_1": 252, "component_2": 252, "best_parameters_": 252, "gmm_bic_scor": 252, "callabl": [252, 266, 396, 413, 416, 417, 418, 420, 421, 441, 443, 444, 445, 446, 447, 449, 450, 452, 457, 459, 460, 464, 465, 466, 467, 531, 533, 535, 537, 539, 545, 546, 557, 558, 559, 560, 561, 562, 564, 565, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 610, 611, 620, 628, 634, 639, 643, 659, 666, 671, 673, 675, 688, 691, 692, 696, 711, 719, 731, 741, 770, 773, 777, 778, 779, 780, 791, 792, 798, 801, 802, 804, 812, 820, 823, 824, 825, 826, 828, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 865, 874, 896, 897, 903, 904, 905, 906, 907, 950, 956, 959, 973, 978, 989, 999, 1031, 1035, 1038, 1039, 1040, 1041, 1043, 1045, 1047], "0x7f550a796310": 252, "gaussianmixturegaussianmixtur": 252, "param_n_compon": 252, "param_covariance_typ": 252, "829429": 252, "1084": 252, "038689": 252, "1114": 252, "517272": 252, "1148": 252, "512281": 252, "1179": 252, "977890": 252, "catplot": 252, "hue": [252, 262, 312, 379], "155": [252, 254, 1011], "plot_gmm_select": [252, 254, 1011], "loos": [253, 259, 1004, 1039], "liberti": 253, "judgment": [253, 989], "panel": [253, 290, 307, 415, 1009], "primarili": [253, 267, 382, 396, 405, 409, 947, 1014, 1040, 1041], "covariance_prior": [253, 796], "398": [253, 254, 354, 647, 1011, 1025], "plot_gmm_sin": [253, 254, 1011], "964": 254, "mislabel": [256, 416, 991], "imbal": [256, 265, 413, 707, 728, 729, 737, 782, 783, 786, 787, 989], "set_printopt": 256, "titles_opt": 256, "177": [256, 278, 388, 1011], "plot_confusion_matrix": [256, 278, 317, 1011, 1041, 1042, 1043, 1044], "groupkfold": [257, 267, 324, 400, 413, 594, 803, 804, 805, 806, 807, 816, 820, 822, 823, 824, 825, 828, 1020, 1037, 1044], "groupshufflesplit": [257, 413, 1020, 1037], "shufflesplit": [257, 264, 348, 413, 800, 806, 808, 818, 827, 1020, 1031, 1032, 1034, 1036, 1037], "stratifiedgroupkfold": [257, 1044], "stratifiedshufflesplit": [257, 340, 413, 1020, 1031, 1032, 1037, 1038, 1044], "1338": 257, "cmap_data": 257, "cmap_cv": 257, "coolwarm": [257, 337], "n_point": [257, 841, 842], "percentiles_class": 257, "perc": 257, "group_prior": 257, "visualize_group": 257, "yticklabel": [257, 353], "ngroup": 257, "nclass": 257, "plot_cv_indic": [257, 278, 1011], "tr": [257, 379, 386, 409, 411, 469, 470, 471, 472, 473, 474, 475, 476, 839], "this_cv": 257, "433": [257, 278, 379, 1011], "plot_cv_predict": [258, 278, 1011], "fnr": [259, 698, 726], "det_curv": [259, 698, 781, 788, 989, 1043, 1044], "detcurvedisplai": [259, 320, 726, 1043, 1044], "ax_roc": 259, "ax_det": 259, "feedback": [259, 381, 382, 383, 397, 1009, 1039], "plot_det": [259, 278, 1011], "n_imag": 260, "print_datafram": 260, "filtered_cv_result": 260, "mean_precis": 260, "std_precis": 260, "mean_recal": 260, "std_recal": 260, "mean_test_precis": [260, 266], "std_test_precis": 260, "mean_test_recal": 260, "std_test_recal": 260, "03f": 260, "refit_strategi": 260, "best_index": [260, 266], "precision_threshold": 260, "high_precision_cv_result": 260, "rank_test_recal": 260, "rank_test_precis": [260, 266], "best_recall_std": 260, "best_recal": 260, "best_recall_threshold": 260, "high_recall_cv_result": 260, "fastest_top_recall_high_precision_index": 260, "idxmin": 260, "063": [260, 262, 317, 325, 437, 1011], "061": 260, "905": 260, "074": 260, "890": 260, "073": [260, 362, 363, 471, 472, 1011], "695": [260, 271, 278, 1011], "743": [260, 278, 1023], "065": [260, 388], "066": [260, 648], "611": [260, 262, 541], "028": [260, 354], "744": [260, 285], "004906": 260, "853676": 260, "063184": 260, "0x7f5509fe8280": 260, "807": [260, 262], "572": [260, 278, 1011], "plot_grid_search_digit": [260, 278, 1011], "minimis": [261, 409, 413, 658, 659, 1005], "219": 261, "york": [261, 787, 796, 979, 989, 1001], "usa": [261, 377, 898, 979, 986, 1001, 1002], "best_index_": [261, 266, 798, 801, 802, 812], "wenhao": [261, 1039, 1040], "zhang": [261, 409, 442, 664, 679, 685, 686, 689, 693, 757, 758, 985, 986, 987, 991, 1003, 1035, 1036, 1038, 1039, 1040, 1041, 1043, 1047, 1048], "wenhaoz": 261, "ucla": [261, 985], "lower_bound": 261, "best_score_idx": 261, "best_low_complex": 261, "fewest": [261, 627], "candidate_idx": 261, "param_reduce_dim__n_compon": 261, "420": [261, 278, 315, 1011], "plot_grid_search_refit_cal": [261, 278, 1011], "moon": [262, 302, 309, 353, 354, 522], "moder": [262, 382, 419, 454, 995], "352": [262, 388], "repeatedstratifiedkfold": [262, 280, 413, 813, 817, 1038], "repetit": [262, 280, 387, 413, 813, 814, 997, 1045], "rank_test_scor": [262, 270, 798, 812, 1037], "rename_axi": 262, "9400": 262, "079297": 262, "9300": 262, "077846": 262, "3_poli": 262, "9044": [262, 1038], "098776": 262, "2_poli": 262, "6852": 262, "169106": 262, "certainti": [262, 384, 741, 989], "repreat": 262, "model_scor": [262, 283], "regex": [262, 355, 464, 466], "_test_scor": [262, 472, 594, 1044], "lineplot": 262, "set1": [262, 294, 295], "labelpad": 262, "882561": 262, "783392": 262, "351390": 262, "746492": 262, "298688": 262, "355440": 262, "nadeau": [262, 1039], "bengio": [262, 858, 859, 978, 1002], "framework": [262, 368, 384, 394, 396, 403, 409, 637, 688, 796, 985, 986, 993, 1007, 1010, 1014, 1031, 1037], "diebold": 262, "mariano": 262, "proven": [262, 983, 987, 1014], "replic": [262, 381, 384], "cdot": [262, 344, 406, 409, 414, 415, 419, 614, 615, 619, 622, 623, 867, 981, 983, 989, 993, 999], "sum_": [262, 271, 348, 406, 407, 409, 414, 415, 416, 538, 540, 547, 696, 754, 983, 985, 986, 989, 991, 993, 994, 996, 997, 999, 1003, 1004, 1005], "ij": [262, 295, 406, 409, 414, 538, 540, 547, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 985, 986, 989, 991, 994, 999, 1004], "corrected_std": 262, "crossvalid": [262, 276], "corrected_var": 262, "ddof": [262, 881, 892], "compute_corrected_ttest": 262, "t_stat": 262, "p_val": 262, "model_1_scor": 262, "model_2_scor": 262, "ncorrect": 262, "uncorrect": [262, 595, 598], "t_stat_uncorrect": 262, "p_val_uncorrect": 262, "benavoli": 262, "colleagu": 262, "conjug": [262, 452, 462, 672, 674, 687, 695, 985], "overlin": [262, 406], "t_post": 262, "ppf": 262, "infin": [262, 348, 541, 682, 683, 712, 822, 908, 920, 992], "minu": [262, 759, 989], "better_prob": 262, "cdf": 262, "773": [262, 312, 648, 839], "essenti": [262, 322, 380, 384, 409, 413, 414, 509, 989, 992, 1010, 1014, 1039], "rope": 262, "rope_interv": 262, "rope_prob": 262, "x_rope": 262, "uncertain": [262, 328, 381], "credibl": 262, "cred_interv": 262, "cred_int_df": 262, "000977": 262, "019023": 262, "005422": 262, "025422": 262, "016445": 262, "036445": 262, "bonferroni": 262, "n_comparison": 262, "pairwise_t_test": 262, "model_i": 262, "model_k": 262, "model_i_scor": 262, "model_k_scor": 262, "pairwise_comp_df": 262, "model_1": 262, "model_2": 262, "302": [262, 627], "565": 262, "276": 262, "851": 262, "pairwise_bayesian": 262, "worse_prob": 262, "pairwise_bayesian_df": 262, "018": [262, 472], "882": 262, "187": [262, 388, 584, 990, 1023, 1033], "dietterich": [262, 831, 990], "1998": [262, 377, 379, 414, 416, 555, 556, 831, 836, 867, 990, 991, 993, 999, 1003], "bouckaert": 262, "frank": [262, 832, 990, 1036, 1040, 1041], "pacif": 262, "asia": [262, 999], "confer": [262, 377, 409, 414, 420, 439, 444, 450, 511, 535, 563, 696, 708, 725, 755, 857, 858, 859, 989, 995, 1001, 1005], "discoveri": [262, 377, 388, 391, 409, 416, 418, 420, 444, 511, 555, 556, 563, 592, 595, 596, 598, 599, 600, 606, 720, 739, 782, 989, 1001, 1014, 1045, 1046], "corani": 262, "dem\u0161ar": 262, "zaffalon": 262, "accompani": [262, 1039], "144": [262, 388, 1031], "088": [262, 278, 292, 299, 669, 997, 1011], "plot_grid_search_stat": [262, 278, 1011], "loader": [263, 331, 353, 375, 376, 377, 498, 499, 508, 1010, 1025, 1031, 1036, 1038, 1039, 1042], "857": [263, 354], "complementnb": [263, 353, 836, 837, 839, 840, 991, 1039, 1043, 1044, 1046], "tfidfvectorizertfidfvector": 263, "complementnbcomplementnb": 263, "vect__": 263, "clf__": 263, "parameter_grid": 263, "vect__max_df": 263, "vect__min_df": 263, "vect__ngram_rang": [263, 1025], "unigram": [263, 377, 417, 588, 589, 591, 1038], "bigram": [263, 417, 588, 589, 591, 1025], "vect__norm": 263, "clf__alpha": [263, 1025], "parallelis": [263, 468, 899, 1038], "random_search": [263, 270], "792": 263, "best_paramet": 263, "get_param": [263, 385, 396, 419, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 796, 797, 798, 801, 802, 812, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 978, 1041, 1042, 1043, 1045, 1046], "816": [263, 471, 472], "709": 263, "ambigu": [263, 387, 417, 572, 712, 938, 992, 1040, 1042, 1044], "shorten_param": 263, "xanchor": 263, "yanchor": 263, "autom": [263, 386, 399, 692, 978, 985, 986, 989, 1009, 1014], "parallel_coordin": 263, "understood": [263, 382, 409, 946, 1022], "column_result": 263, "transform_func": 263, "fromkei": [263, 916], "ngram_rang": [263, 331, 417, 588, 589, 591], "color_continuous_scal": 263, "viridis_r": 263, "slide": [263, 644, 985, 1008, 1009], "intersect": [263, 337, 406, 409, 737], "undo": [263, 871, 1035], "stronger": [263, 643, 652, 658, 659, 672, 673, 674, 675, 676, 678, 687], "plot_grid_search_text_feature_extract": [263, 278, 1011], "ax_idx": 264, "resort": [264, 377, 555, 1041], "learning_curv": [264, 322, 400, 804, 984, 1034, 1037, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1048], "return_tim": [264, 825, 1041], "test_scores_nb": 264, "fit_times_nb": 264, "score_times_nb": 264, "test_scores_svm": 264, "fit_times_svm": 264, "score_times_svm": 264, "score_tim": [264, 413, 824, 825], "inflect": 264, "plot_learning_curv": [264, 278, 1011], "class_likelihood_ratio": [265, 989, 1046], "medicin": [265, 712, 989], "medic": [265, 413, 712, 985, 1014], "truli": [265, 269, 370, 712, 989], "odd": [265, 416, 514, 712, 989, 1038, 1039], "suppos": [265, 327, 368, 369, 384, 388, 411, 416, 417, 418, 557, 561, 564, 658, 659, 666, 668, 674, 675, 676, 741, 847, 901, 903, 906, 909, 911, 927, 993, 1040, 1042, 1048], "physiolog": [265, 379, 1023], "hopefulli": [265, 390, 1031], "indirect": [265, 383, 396], "bio": 265, "pos_lr": 265, "neg_lr": 265, "raise_warn": [265, 712, 975], "positive_likelihood_ratio": [265, 712], "negative_likelihood_ratio": [265, 712], "extract_scor": 265, "test_positive_likelihood_ratio": 265, "test_negative_likelihood_ratio": 265, "661086": 265, "724702": 265, "383973": 265, "054045": 265, "108843": 265, "986989": 265, "268147": 265, "034278": 265, "most_frequ": [265, 551, 627, 630, 851, 979, 989, 1039, 1041, 1043], "373333": 265, "5557": 265, "235430": 265, "stand": [265, 355, 386, 394, 414, 531, 537, 545, 546, 596, 609, 678, 705, 717, 735, 736, 756, 785, 787, 794, 988, 989, 995], "lr_base": 265, "pos_lr_bas": 265, "pos_lr_base_std": 265, "neg_lr_bas": 265, "neg_lr_base_std": 265, "plot_indic": 265, "scoring_on_bootstrap": 265, "n_bootstrap": [265, 1032], "results_for_preval": 265, "bootstrap_indic": 265, "default_rng": 265, "2039": 265, "507943": 265, "113516": 265, "207667": 265, "009778": 265, "3419": 265, "443238": 265, "125140": 265, "198766": 265, "008915": 265, "421087": 265, "123828": 265, "192913": 265, "006360": 265, "6196": [265, 1036], "409717": 265, "164009": 265, "193949": 265, "005861": 265, "7578": [265, 1038], "334795": 265, "175298": 265, "189267": 265, "005840": 265, "8963": 265, "197666": 265, "238955": 265, "185654": 265, "005027": 265, "plot_likelihood_ratio": [265, 278, 1011], "scorer_nam": [266, 798, 812], "rvraghav93": [266, 307], "predefin": [266, 811, 978, 992, 1020, 1046, 1048], "402": [266, 267, 278, 1011], "maskedarrai": [266, 1037], "param_min_samples_split": 266, "sample_score_mean": 266, "sample_score_std": 266, "std_": [266, 1036], "rank_test_": 266, "best_scor": 266, "mean_test_": 266, "plot_multi_metric_evalu": [266, 278, 1011], "cawlei": [267, 989], "talbot": 267, "mach": [267, 407, 413, 593, 594], "2079": 267, "2107": 267, "007581": 267, "007833": 267, "num_trial": 267, "x_iri": [267, 1024], "y_iri": [267, 1024], "p_grid": 267, "non_nested_scor": 267, "nested_scor": 267, "leaveoneout": [267, 413, 1020], "leaveonegroupout": [267, 413, 799, 806, 807, 1020, 1037], "inner_cv": [267, 324], "outer_cv": [267, 324], "non_nest": 267, "score_differ": 267, "non_nested_scores_lin": 267, "nested_lin": 267, "difference_plot": 267, "plot_nested_cross_validation_iri": [267, 278, 1011], "permutation_test_scor": [268, 400, 413, 1031, 1038, 1043], "plant": [268, 271, 272, 375, 989, 1027], "uncorrel": [268, 378, 528, 534, 541, 989, 1023], "n_uncorrelated_featur": 268, "x_rand": 268, "undergo": 268, "score_iri": 268, "perm_scores_iri": 268, "pvalue_iri": 268, "n_permut": [268, 413, 826], "score_rand": 268, "perm_scores_rand": 268, "pvalue_rand": 268, "evid": [268, 353, 390, 409, 413, 414, 416, 644, 796, 988], "ndata": 268, "destroi": [268, 417, 794, 870, 999], "ojala": [268, 413, 826], "garriga": [268, 413, 826], "plot_permutation_tests_for_classif": [268, 278, 1011], "t_p": 269, "plu": [269, 379, 387, 679, 832, 835, 990, 1003], "f_p": 269, "f_n": 269, "denomin": [269, 417, 422, 475, 590, 704, 756, 983], "stairstep": 269, "ap": [269, 707, 708, 989], "sum_n": [269, 707, 989], "r_n": [269, 707, 989], "p_n": [269, 707, 989], "nth": [269, 707, 989], "r_k": 269, "p_k": [269, 989], "trapezoid": [269, 706, 707, 989], "binar": [269, 271, 272, 374, 376, 408, 753, 836, 865, 866, 868, 872, 874, 882, 885, 989, 991, 1016, 1027, 1045, 1047], "average_precision_scor": [269, 700, 706, 708, 781, 787, 989, 1031, 1034, 1038, 1039, 1045, 1047], "mt19937": [269, 274, 1042], "0x7f550a785640": 269, "precisionrecalldisplai": [269, 320, 781, 783, 786, 989, 1041, 1044, 1047, 1048], "label_binar": [269, 271, 868, 1035], "average_precis": [269, 700, 707, 741, 989], "prevalence_pos_label": [269, 700], "setup": [269, 271, 368, 380, 384, 388, 390, 992, 1017], "f_score": 269, "extens": [269, 271, 290, 368, 369, 376, 377, 380, 383, 385, 386, 390, 391, 394, 403, 409, 414, 496, 503, 534, 740, 932, 940, 986, 988, 989, 1008, 1009, 1014, 1031, 1037, 1044, 1045, 1047], "452": [269, 278, 1011], "plot_precision_recal": [269, 278, 1011], "deem": [270, 271, 534, 997, 1044], "991": [270, 989], "05063247886572012": 270, "13822072286080167": 270, "987": [270, 354], "010877306503748912": 270, "9226260871125187": 270, "7271482064048191": 270, "25183501383331797": 270, "993": 270, "1111111111111111": 270, "5555555555555556": 270, "n_top": 270, "param_dist": [270, 274, 319], "n_iter_search": 270, "plot_randomized_search": [270, 278, 1011], "unambigu": [271, 990, 1037], "notion": [271, 344, 354, 370, 394, 409, 414, 416, 985, 989], "scheme": [271, 290, 313, 314, 377, 396, 409, 413, 415, 417, 566, 590, 658, 659, 705, 811, 868, 869, 872, 874, 878, 882, 885, 890, 901, 906, 978, 985, 999, 1003, 1031, 1039, 1042, 1043, 1048], "harder": [271, 272, 311, 377, 381, 384, 390, 409, 515, 561, 562, 1013], "bulk": [271, 420, 444], "scrutin": 271, "labelbinar": [271, 396, 740, 830, 865, 874, 882, 885, 990, 1016, 1034, 1035, 1036, 1040, 1045], "y_onehot_test": 271, "class_id": [271, 272], "nvirginica": 271, "tp_c": 271, "fn_c": 271, "fp_c": 271, "tn_c": 271, "briefli": [271, 381, 395, 416, 978, 1041], "nreceiv": 271, "micro_roc_auc_ovr": 271, "mcclish": [271, 787], "deci": 271, "1989": [271, 635, 787, 858, 859, 985, 992], "jul": 271, "fpr_grid": 271, "mean_tpr": [271, 272], "interp": [271, 272, 340], "macro_roc_auc_ovr": 271, "deeppink": 271, "aqua": 271, "role": [271, 368, 381, 394, 414, 1007], "pair_list": 271, "pair_scor": 271, "label_a": 271, "label_b": 271, "a_mask": 271, "b_mask": 271, "ab_mask": 271, "a_tru": 271, "b_true": 271, "idx_a": 271, "idx_b": 271, "fpr_a": 271, "tpr_a": 271, "fpr_b": 271, "tpr_b": 271, "macro_roc_auc_ovo": 271, "ovo_tpr": 271, "pool": [271, 394, 445, 635, 1010, 1042], "plot_roc": [271, 278, 1011], "mean_fpr": 272, "viz": [272, 389], "interp_tpr": 272, "mean_auc": 272, "std_auc": 272, "std_tpr": 272, "tprs_upper": 272, "tprs_lower": 272, "plot_roc_crossv": [272, 278, 1011], "halvinggridsearchcv": [273, 274, 319, 400, 579, 802, 978, 1043, 1045, 1046, 1048], "1e4": [273, 659, 679, 895, 1001], "gsh": 273, "gsh_time": 273, "gs_time": 273, "make_heatmap": 273, "is_sh": 273, "make_cbar": 273, "param_c": [273, 798], "param_gamma": [273, 798, 812], "sh": [273, 386, 390, 978], "scores_matrix": 273, "pivot_t": 273, "aggfunc": 273, "0e": [273, 549, 550], "get_xticklabel": 273, "rotation_mod": 273, "cbar_ax": 273, "plot_successive_halving_heatmap": [273, 278, 1011], "rsh": [274, 319], "0x7f5509193040": 274, "_distn_infrastructur": 274, "rv_discrete_frozen": 274, "0x7f5509f2b070": 274, "0x7f5509654d60": 274, "halvingrandomsearchcvifittedhalvingrandomsearchcv": 274, "params_str": 274, "drop_dupl": 274, "n_resources_": [274, 801, 802, 978], "nn_candid": 274, "n_candidates_": [274, 801, 802, 978], "n_iterations_": [274, 801, 802], "multialign": 274, "582": [274, 278, 902, 1011], "plot_successive_halving_iter": [274, 278, 1011], "n_samples_train": [275, 903, 904, 905, 906, 907], "n_samples_test": [275, 903, 904, 905, 906, 907, 992, 999], "train_error": 275, "test_error": 275, "i_alpha_optim": 275, "alpha_optim": 275, "00020991037201085544": 275, "plot_train_error_vs_test_error": [275, 278, 1011], "nonlinear": [276, 320, 644, 688, 689, 693, 696, 867, 985, 986, 994, 999], "true_fun": 276, "polynomial_featur": 276, "232": [276, 278, 989, 1011], "plot_underfitting_overfit": [276, 278, 1011], "validationcurvedisplai": [277, 984, 1047], "subset_mask": 277, "isin": [277, 328], "param_rang": [277, 323, 348, 820, 828, 984, 1047], "633": [277, 278, 1011], "plot_validation_curv": [277, 278, 1011], "ovo": [280, 317, 787, 829, 903, 906, 989, 990, 1004], "onevsoneclassifi": [280, 400, 830, 831, 1032, 1034, 1035, 1037, 1038, 1040, 1043, 1045, 1048], "review": [280, 313, 368, 377, 384, 385, 386, 387, 388, 394, 397, 413, 414, 535, 541, 989, 999, 1017], "sort_index": 280, "class_protein_loc": 280, "cyt": 280, "erl": 280, "exc": 280, "me1": 280, "me2": 280, "me3": 280, "mit": [280, 377, 388, 409, 419, 610, 611, 614, 619, 622, 643, 666, 667, 676, 838, 982], "nuc": 280, "429": 280, "pox": 280, "vac": 280, "outputcodeclassifi": [280, 400, 829, 830, 1038, 1043, 1047, 1048], "code_s": [280, 831, 990], "ovo_tre": 280, "ovr_tre": 280, "ecoc": 280, "cv_results_tre": 280, "cv_results_ovo": 280, "cv_results_ovr": 280, "cv_results_ecoc": 280, "glanc": [280, 381], "tree_optim": 280, "unifi": [280, 383, 391, 394, 395, 416, 637, 1009, 1031], "allwein": 280, "erin": [280, 1043], "yoram": [280, 734], "singer": [280, 666, 667, 734, 985, 989, 1003, 1004], "141": [280, 534, 901, 990], "defens": 280, "plot_multiclass_overview": [280, 281, 1011], "classifierchain": [283, 396, 400, 833, 835, 1038, 1043, 1046, 1048], "assembl": [283, 314, 355, 861], "multitask": [283, 417, 990], "jaccard": [283, 406, 450, 457, 699, 703, 719, 728, 733, 737, 777, 778, 779, 795, 992, 1039, 1040], "adam": [283, 302, 858, 859, 993, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "kleczewski": [283, 1038, 1039], "yeast": [283, 832], "103": [283, 285, 377, 416, 497, 555, 556, 1031], "40597": 283, "jaccard_scor": [283, 703, 728, 733, 795, 989, 1040, 1043], "base_lr": [283, 832], "y_pred_ovr": 283, "ovr_jaccard_scor": 283, "y_pred_chain": 283, "chain_jaccard_scor": 283, "y_pred_ensembl": 283, "ensemble_jaccard_scor": 283, "x_po": 283, "takeawai": 283, "329": [283, 284, 450, 1011], "plot_classifier_chain_yeast": [283, 284, 1011], "kneighborstransform": [285, 287, 317, 853, 992, 1041, 1045, 1046], "nmslib": 285, "pynndesc": 285, "pip": [285, 317, 318, 319, 320, 321, 322, 323, 324, 369, 380, 382, 386, 388, 399, 405, 1005], "wrapper": [285, 388, 391, 413, 419, 544, 620, 668, 671, 741, 901, 985, 1005, 1009, 1035, 1043], "pynndescenttransform": 285, "csr_matrix": [285, 318, 440, 444, 452, 496, 534, 544, 557, 558, 559, 560, 563, 564, 565, 566, 588, 593, 594, 714, 827, 874, 876, 903, 904, 906, 907, 909, 910, 911, 912, 990, 999, 1003, 1004, 1005, 1046], "nmslibtransform": 285, "sw": 285, "n_samples_fit_": [285, 843, 844, 845, 847, 849, 851, 852, 853], "cosinesimil": 285, "nmslib_": 285, "adddatapointbatch": 285, "createindex": 285, "n_samples_transform": [285, 845, 853], "thread": [285, 318, 321, 380, 394, 396, 409, 416, 833, 834, 955, 956, 957, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1046, 1047, 1048], "num_thread": 285, "knnquerybatch": 285, "benchmark": [285, 319, 354, 355, 368, 375, 377, 382, 394, 399, 402, 407, 468, 515, 899], "mnist_10000": 285, "mnist_20000": 285, "20_000": 285, "tsne_param": 285, "barnes_hut": [285, 692, 1038, 1039], "parallel_batch_queri": 285, "msg": [285, 973], "transformer_nam": 285, "longest": 285, "fit_dur": 285, "transform_dur": 285, "823": 285, "884": 285, "733": [285, 355], "077": 285, "448": 285, "759": 285, "numba": [285, 1010], "cold": 285, "nearestneighbor": [285, 321, 399, 409, 420, 444, 446, 448, 461, 688, 689, 693, 843, 844, 845, 847, 851, 852, 853, 992, 1031, 1035, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "i_ax": 285, "828": 285, "955": [285, 413, 654], "994": 285, "brute": [285, 394, 404, 413, 420, 444, 446, 450, 457, 632, 633, 688, 689, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 996, 1027, 1035, 1039, 1043, 1046, 1047, 1048], "spent": [285, 313, 383, 388, 825, 1046], "approximate_nearest_neighbor": [285, 299, 1011], "slow": [287, 307, 353, 368, 376, 380, 382, 414, 417, 447, 699, 875, 876, 880, 903, 906, 938, 986, 992, 1010, 1024, 1038], "temporarydirectori": [287, 317], "graph_model": 287, "classifier_model": 287, "sklearn_graph_cache_": 287, "tmpdir": [287, 317], "full_model": 287, "classifier__n_neighbor": 287, "grid_model": 287, "plot_caching_nearest_neighbor": [287, 299, 1011], "beforehand": [288, 1005], "entitl": [288, 447, 611, 843, 981], "knn__weight": 288, "unifom": 288, "648": [288, 299, 1011], "plot_classif": [288, 299, 1011], "79269019073225": 289, "kerneldens": [289, 290, 298, 415, 1033, 1039, 1040, 1044, 1045, 1046], "new_data": [289, 384], "4x11": 289, "real_data": 289, "set_clim": 289, "plot_digits_kde_sampl": [289, 299, 1011], "block": [290, 307, 321, 377, 379, 382, 387, 390, 396, 406, 409, 412, 415, 452, 453, 462, 473, 479, 480, 488, 489, 511, 513, 695, 957, 992, 994], "wildli": [290, 988], "kd": [290, 409, 415, 992, 1039, 1040, 1041], "jakevdp": [290, 298], "aaaaff": [290, 293], "tophat": [290, 415, 841, 842, 846], "log_den": 290, "x_src": 290, "format_func": 290, "ih": 290, "epanechnikov": [290, 415, 841, 842, 846], "funcformatt": 290, "nullloc": 290, "true_den": 290, "687": [290, 299, 1001, 1011], "plot_kde_1d": [290, 299, 1011], "730": [291, 299, 1011], "plot_lof_novelty_detect": [291, 299, 1011], "x_inlier": 292, "n_error": 292, "x_score": [292, 482, 483, 484, 485], "legend_handl": 292, "handlerpathcollect": 292, "update_legend_marker_s": 292, "update_from": 292, "set_siz": 292, "handler_map": 292, "update_func": 292, "plot_lof_outlier_detect": [292, 299, 1011], "cmap_light": [293, 296], "ffaaaa": 293, "aaffaa": 293, "cmap_bold": [293, 296], "00ff00": 293, "plot_nca_classif": [293, 299, 1011], "neighborhoodcomponentanalysi": 294, "dim_reduction_method": 294, "acc_knn": 294, "x_embed": [294, 295, 692, 696, 850, 992], "ntest": 294, "plot_nca_dim_reduct": [294, 299, 1011], "logsumexp": [295, 1038], "get_yaxi": [295, 307], "link_thickness_i": 295, "diff_embed": 295, "dist_embed": 295, "einsum": 295, "exp_dist_embed": 295, "relate_point": 295, "pt_i": 295, "pt_j": 295, "229": [295, 299, 989, 1011], "plot_nca_illustr": [295, 299, 1011], "8133333333333334": 296, "nearestcentroid": [296, 353, 990, 992, 1031, 1035, 1038, 1043, 1046], "darkblu": 296, "shrink_threshold": [296, 848, 992, 1031, 1043], "175": [296, 299, 342, 351, 388, 999, 1011], "plot_nearest_centroid": [296, 299, 1011], "barycent": [297, 1031], "plot_regress": [297, 299, 1011], "geospati": [298, 415], "haversin": [298, 415, 699, 761, 763, 992, 1040, 1043], "latitud": [298, 307, 377, 498, 699, 763], "longitud": [298, 307, 377, 498, 699, 763], "xtrain": 298, "ytrain": 298, "radian": [298, 699, 763], "land_mask": 298, "ball_tre": [298, 420, 444, 446, 450, 457, 688, 689, 843, 844, 845, 846, 847, 849, 851, 852, 853, 992, 1031, 1048], "ocean": 298, "plot_species_kd": [298, 299, 1011], "765": 299, "combat": [301, 414], "lesser": [301, 396, 442, 541, 985], "curvatur": 301, "057": [301, 305, 388, 1011], "plot_mlp_alpha": [301, 305, 1011], "bfg": [302, 610, 611, 648, 649, 658, 669, 672, 674, 680, 687, 992, 993, 1046], "980000": 302, "096950": 302, "momentum": [302, 858, 859, 993], "049530": 302, "nesterov": [302, 858, 859, 993, 1047], "049540": 302, "360000": 302, "978444": 302, "860000": 302, "504185": 302, "503452": 302, "045311": 302, "956038": 302, "243802": 302, "992766": 302, "041297": 302, "993879": 302, "042898": 302, "638843": 302, "855465": 302, "909293": 302, "318387": 302, "912632": 302, "290584": 302, "991653": 302, "045934": 302, "840000": 302, "601052": 302, "157334": 302, "154453": 302, "692470": 302, "689751": 302, "689143": 302, "150527": 302, "850000": 302, "341523": 302, "336188": 302, "335919": 302, "689015": 302, "830000": 302, "513034": 302, "512595": 302, "930000": 302, "170087": 302, "schedul": [302, 369, 676, 677, 678, 858, 859, 1003, 1014, 1038], "nesterovs_momentum": [302, 858, 859], "invscal": [302, 676, 677, 678, 858, 859, 1003], "plot_arg": 302, "plot_on_dataset": 302, "nlearn": 302, "loss_": [302, 858, 859, 993, 1045], "loss_curve_": [302, 858, 859], "data_set": 302, "get_lin": 302, "plot_mlp_training_curv": [302, 305, 1011], "28x28": 303, "784": 303, "throw": [303, 391, 920, 1035, 1038, 1039, 1040, 1041, 1045], "infrastructur": [303, 323, 1007, 1009, 1010], "44139186": 303, "19174891": 303, "13983521": 303, "11378556": 303, "09443967": 303, "07846529": 303, "06506307": 303, "05534985": 303, "986429": 303, "953061": 303, "plot_mnist_filt": [303, 305, 1011], "greyscal": 304, "bernoulli": [304, 417, 418, 836, 837, 838, 839, 840, 857, 858, 859, 864, 985, 999, 1012, 1027, 1031], "bernoullirbm": [304, 858, 859, 994, 999, 1033, 1034, 1043, 1045, 1048], "yann": [304, 1031, 1033], "dauphin": [304, 1033], "gabriel": [304, 1039, 1040, 1041, 1044, 1045], "synnaev": 304, "convolv": 304, "minmax_scal": [304, 307, 871, 1036, 1039], "nudge_dataset": 304, "1px": 304, "direction_vector": 304, "apply_along_axi": 304, "feature_rang": [304, 871, 887, 999, 1033, 1043], "cg": [304, 658, 659, 672, 674, 687, 985, 1035, 1036, 1038, 1042, 1044, 1045, 1048], "rbm": [304, 857, 858, 859, 994], "rbm_features_classifi": 304, "6000": [304, 627], "raw_pixel_classifi": 304, "logisticregressionifittedlogisticregress": 304, "_classif": 304, "1486": 304, "undefinedmetricwarn": [304, 728, 729, 782, 783, 786, 1040], "zero_divis": [304, 713, 728, 729, 737, 782, 783, 786, 1041, 1043, 1047], "194": 304, "207": [304, 1031], "022": [304, 305, 354, 997, 1011], "plot_rbm_logistic_classif": [304, 305, 1011], "153": [305, 663], "incom": [307, 377, 440], "unscal": [307, 312, 985, 989, 1039, 1045], "unterthin": [307, 1034, 1035, 1036], "medinc": [307, 319, 377], "houseag": [307, 319, 377], "averoom": [307, 319, 377], "room": [307, 377, 387, 409, 1013], "avebedrm": [307, 377], "bedroom": [307, 377], "aveoccup": [307, 319, 377], "features_idx": 307, "quantile_rang": [307, 879, 891, 1037], "yeo": [307, 311, 877, 889, 999, 1039, 1045, 1047], "cox": [307, 311, 877, 889, 999, 1039, 1047], "plasma": 307, "plasma_r": 307, "create_ax": 307, "bottom_h": 307, "left_h": 307, "rect_scatt": 307, "rect_histx": 307, "rect_histi": 307, "ax_scatt": 307, "ax_histx": 307, "ax_histi": 307, "ax_scatter_zoom": 307, "ax_histx_zoom": 307, "ax_histy_zoom": 307, "rect_colorbar": 307, "ax_colorbar": 307, "plot_distribut": 307, "hist_nbin": 307, "x0_label": 307, "x1_label": 307, "hist_x1": 307, "hist_x0": 307, "aesthet": [307, 1005, 1036], "tick_bottom": 307, "tick_left": 307, "outward": 307, "ec": [307, 530], "make_plot": 307, "item_idx": 307, "ax_zoom_out": 307, "ax_zoom_in": 307, "zoom_in_percentile_rang": 307, "cutoffs_x0": 307, "cutoffs_x1": 307, "non_outliers_mask": 307, "colorbarbas": 307, "OR": [307, 409, 420, 444, 1042], "indistinguish": 307, "quadrant": 307, "735": [307, 315, 1011], "plot_all_sc": [307, 315, 1011], "straightforward": [308, 381, 414, 1014], "anywher": 308, "qinhanmin2005": 308, "sina": [308, 1044], "rnd": 308, "enc": [308, 310, 321, 323, 874, 875, 999], "x_bin": 308, "line_bin": 308, "plot_discret": [308, 315, 1011], "get_nam": 309, "broader": [309, 985], "logisticregression__c": 309, "linearsvc__c": 309, "kbinsdiscretizer__n_bin": 309, "gradientboostingclassifier__learning_r": 309, "svc__c": [309, 861], "cm_piyg": 309, "piyg": 309, "b30065": 309, "178000": 309, "est_idx": 309, "plot_discretization_classif": [309, 315, 1011], "centers_0": 310, "centers_1": 310, "x_list": 310, "grid_encod": 310, "stripe": 310, "669": [310, 315, 1011], "plot_discretization_strategi": [310, 315, 1011], "powertransform": [311, 878, 889, 979, 999, 1039, 1042, 1045, 1047], "johnwon": 311, "weibul": 311, "bimod": [311, 415], "ineffect": [311, 999, 1039, 1040], "eric": [311, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "ericchang2017": 311, "northwestern": [311, 658], "contact": [311, 394, 1009], "font_siz": 311, "bc": 311, "qt": [311, 878], "x_lognorm": [311, 999], "x_chisq": 311, "chisquar": 311, "x_weibul": 311, "x_gaussian": 311, "x_uniform": 311, "loc_a": 311, "loc_b": 311, "x_a": 311, "x_b": 311, "x_bimod": 311, "d81b60": 311, "0188ff": 311, "ffc107": 311, "b7a2ff": 311, "2ec5ac": 311, "figaspect": 311, "axes_idx": 311, "axes_list": 311, "x_trans_bc": 311, "lmbda_bc": 311, "lambdas_": [311, 877, 1044, 1047], "x_trans_yj": 311, "lmbda_yj": 311, "x_trans_qt": 311, "ax_origin": 311, "ax_bc": 311, "ax_yj": 311, "ax_qt": 311, "x_tran": [311, 323, 384, 405, 442, 464, 877, 882, 889, 999], "meth_nam": 311, "lmbda": 311, "plot_map_data_to_norm": [311, 315, 1011], "involv": [312, 314, 317, 340, 344, 368, 370, 377, 382, 386, 396, 397, 412, 419, 699, 829, 830, 986, 990, 992, 996, 1004, 1009, 1014, 1023, 1039], "kneighbor": [312, 321, 843, 844, 845, 847, 849, 992, 1035, 1040, 1044, 1045, 1046, 1047], "obatin": 312, "tyler": [312, 1038, 1044, 1045, 1046], "lanigan": [312, 1038], "tylerlanigan": 312, "sebastian": [312, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "raschka": [312, 1036, 1037, 1038, 1039, 1040, 1043], "sebastianraschka": 312, "alcohol": [312, 379], "malic": [312, 379], "acid": [312, 379], "scaled_x_train": 312, "x_plot_scal": 312, "fit_and_plot_model": 312, "scaled_pca": 312, "x_train_transform": [312, 364, 413], "x_train_std_transform": 312, "first_pca_compon": 312, "target_class": 312, "repercuss": 312, "logisticregressioncv": [312, 396, 400, 658, 985, 990, 1035, 1036, 1037, 1039, 1040, 1041, 1045, 1046, 1048], "unscaled_clf": 312, "scaled_clf": 312, "y_pred_scal": 312, "y_proba_sc": 312, "0825": 312, "vastli": 312, "plot_scaling_import": [312, 315, 1011], "targetencod": [313, 314, 396, 874, 875, 979, 999, 1009, 1047, 1048], "wine_review": 313, "42074": 313, "countri": [313, 324, 986], "provinc": 313, "region_1": 313, "region_2": 313, "wineri": 313, "tremend": [313, 416], "variet": 313, "hail": 313, "martha": 313, "vineyard": 313, "235": 313, "napa": 313, "vallei": 313, "cabernet": 313, "sauvignon": 313, "heitz": 313, "spain": 313, "ripe": 313, "aroma": 313, "blackberri": 313, "cassi": 313, "carodorum": 313, "selecci\u00f3n": 313, "reserva": 313, "northern": 313, "toro": 313, "tinta": 313, "bodega": 313, "carmen": 313, "rodr\u00edguez": 313, "watson": [313, 410], "honor": 313, "late": [313, 370], "harvest": 313, "knight": 313, "sonoma": 313, "blanc": 313, "macaulei": 313, "oak": 313, "reserv": [313, 561, 562, 1014, 1016], "oregon": 313, "willamett": 313, "pinot": 313, "noir": 313, "ponzi": 313, "franc": [313, 763], "b\u00e9gude": 313, "aft": [313, 1034], "br\u00fblade": 313, "provenc": 313, "bandol": 313, "one_hot": 313, "max_categori": [313, 321, 323, 874, 875, 999, 1045, 1047], "target_typ": [313, 882, 925, 952, 1048], "evaluate_model_and_stor": 313, "rmse_test_scor": 313, "rmse_train_scor": 313, "rmse_test_mean": 313, "rmse_test_std": 313, "rmse_train_mean": 313, "rmse_train_std": 313, "n_unique_categori": 313, "nuniqu": 313, "14810": 313, "1236": 313, "632": 313, "455": 313, "workaround": [313, 382, 798, 812], "high_cardinality_featur": 313, "low_cardinality_featur": 313, "mixed_encoded_preprocessor": 313, "high_cardin": 313, "low_cardin": 313, "mixed_pip": 313, "high_cardinalityindex": 313, "targetencodertargetencod": 313, "low_cardinalityindex": 313, "mixed_target": 313, "name_to_color": 313, "rmse_": 313, "_mean": 313, "_std": 313, "explod": 313, "unrel": [313, 369, 387, 390, 417, 515], "plot_target_encod": [313, 315, 1011], "near_uniqu": 314, "50_000": [314, 354], "n_categori": [314, 837, 875, 999], "kbin": [314, 322], "x_inform": 314, "permuted_categori": 314, "x_shuffl": 314, "catastroph": [314, 762, 1010], "x_near_unique_categori": 314, "raw_model": 314, "0049896314219657345": 314, "00457762158159003": 314, "model_with_cf": 314, "cf": [314, 409, 412, 442, 700, 985, 999, 1010], "8000184677460285": 314, "7927845601690948": 314, "coefs_cf": 314, "target_encod": 314, "x_train_no_cf_encod": 314, "x_test_no_cf_encod": 314, "model_no_cf": 314, "858486250088675": 314, "6338211367110066": 314, "coefs_no_cf": 314, "301": [314, 315, 410, 1003, 1011], "plot_target_encoder_cross_v": [314, 315, 1011], "774": [315, 1011], "announc": [317, 318, 319, 320, 321, 322, 323, 324, 386], "latest": [317, 318, 319, 320, 321, 322, 323, 324, 380, 382, 386, 388, 390, 1005, 1007, 1045], "upgrad": [317, 318, 319, 320, 321, 322, 323, 324, 399, 1010, 1031, 1036, 1039], "conda": [317, 318, 319, 320, 321, 322, 323, 324, 369, 382, 383, 385, 386, 388, 390, 399, 402, 1005], "forg": [317, 318, 319, 320, 321, 322, 323, 324, 369, 383, 385, 386, 390, 399], "plot_roc_curv": [317, 1041, 1043], "plot_precision_recall_curv": [317, 1041, 1043, 1044], "stackingclassifi": [317, 364, 396, 400, 416, 568, 979, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "9473684210526315": 317, "radiusneighborstransform": [317, 845, 992, 1041, 1043, 1045, 1046], "sklearn_cache_": 317, "isomap__n_neighbor": 317, "nan_euclidean_dist": [317, 761, 979, 1041], "ccp_alpha": [317, 358, 557, 558, 559, 560, 564, 565, 909, 910, 911, 912, 1005, 1041], "tree_": [317, 358, 362, 846, 909, 910, 911, 912], "node_count": [317, 358, 362, 909, 910, 911, 912], "check_estim": [317, 384, 396, 933, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046], "pytest": [317, 369, 380, 382, 384, 385, 399, 402, 405, 932, 933, 1041, 1044], "estimator_check": [317, 384, 396, 408, 1038, 1039, 1041, 1042, 1045, 1046, 1047], "parametrize_with_check": [317, 384, 932, 1041, 1042], "test_sklearn_compatible_estim": [317, 933], "decision_function_shap": [317, 349, 903, 906, 1004, 1036, 1037, 1040, 1041], "986927536231884": 317, "plot_release_highlights_0_22_0": [317, 325, 1011], "await": 318, "lam": [318, 319, 1042], "35776189065725783": 318, "42425183539869404": 318, "openmp": [318, 380, 385, 394, 396, 409, 416, 957, 1042, 1044, 1047], "6560362663398501": 318, "10k": [318, 447], "monotoinc": 318, "gbdt_cst": 318, "999791942438998": 318, "plot_release_highlights_0_23_0": [318, 325, 1011], "art": [319, 388, 649, 692, 1009, 1014], "footprint": [319, 322, 368, 370, 409, 414, 555, 556, 557, 558, 563, 564, 565, 566, 1033, 1036, 1037, 1042, 1043, 1046], "yarowski": [319, 898, 1002], "selftrainingclassifi": [319, 330, 331, 332, 400, 1002, 1043], "random_unlabeled_point": [319, 896, 897, 898], "self_training_model": [319, 898], "base_estim": [319, 384, 407, 553, 554, 555, 556, 832, 835, 898, 978, 985, 1042, 1044, 1045, 1046, 1047], "selftrainingclassifierifittedselftrainingclassifi": 319, "7367": 319, "linear_baselin": 319, "714": 319, "decisiontreeregressorifitteddecisiontreeregressor": 319, "effort": [319, 382, 388, 1009, 1014, 1042, 1044], "589": [319, 325, 1011], "plot_release_highlights_0_24_0": [319, 325, 1011], "l2_regular": [320, 416, 561, 562], "max_bin": [320, 321, 416, 561, 562, 1048], "quantileregressor": [320, 985, 989, 1044, 1045, 1046], "min_": [320, 409, 416, 871, 985, 999, 1003, 1004, 1005], "sum_i": [320, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 980, 981, 985, 987, 989, 994], "pb_q": [320, 985], "_1": [320, 344, 411, 414, 417, 531, 537, 538, 540, 545, 546, 547, 646, 647, 652, 653, 654, 655, 656, 660, 661, 662, 663, 681, 682, 683, 684, 765, 985, 987, 989, 1004], "get_feature_nam": [320, 1039, 1040, 1042, 1043, 1044], "pet": [320, 324, 787, 989], "dog": [320, 321, 323, 324, 582, 782, 882, 999], "fish": 320, "pet_cat": 320, "pet_dog": 320, "pet_fish": 320, "plot_": [320, 399], "plot_release_highlights_1_0_0": [320, 325, 1011], "x_1d": 321, "hist_quantil": 321, "log_reg_input_featur": 321, "gather": [321, 323, 390, 397, 408, 409, 999, 1014], "min_frequ": [321, 323, 874, 875, 999, 1045, 1047], "rabbit": [321, 323, 999], "snake": [321, 323, 582, 882, 999], "infrequent_categories_": [321, 323, 874, 875, 882, 999], "x0_cat": [321, 999], "x0_rabbit": [321, 999], "x0_infrequent_sklearn": [321, 999], "refactor": [321, 1031, 1033, 1034, 1035, 1041, 1044, 1045, 1046], "radius_neighbor": [321, 849, 851, 852, 853, 1035, 1040, 1041, 1043, 1044, 1045, 1046], "pairwise_distances_argmin_min": [321, 778, 1034, 1039, 1045, 1046, 1047], "radiusneighborsclassifi": [321, 843, 844, 849, 852, 990, 992, 1031, 1033, 1037, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "radiusneighborsregressor": [321, 843, 844, 849, 851, 992, 1031, 1033, 1039, 1041, 1043, 1044, 1045, 1046, 1047], "trustworthi": [321, 1039, 1040, 1045, 1046, 1047, 1048], "labelpropag": [321, 329, 897, 898, 990, 1002, 1032, 1037, 1038, 1041, 1042, 1043, 1045, 1046, 1047], "labelspread": [321, 327, 328, 329, 331, 332, 896, 898, 990, 1002, 1032, 1037, 1038, 1041, 1042, 1045, 1046, 1047], "blog": [321, 368, 382, 388, 390, 397, 1042], "cython": [321, 368, 369, 371, 380, 382, 385, 391, 394, 399, 402, 405, 408, 409, 416, 508, 999, 1000, 1003, 1004, 1009, 1010, 1031, 1034, 1035, 1037, 1043, 1046, 1047, 1048], "readili": [321, 414, 1005, 1014], "true_w": 321, "true_h": 321, "x_reconstruct": [321, 482, 483, 484, 583], "00364": 321, "divis": [321, 409, 417, 590, 591, 594, 712, 713, 728, 729, 737, 745, 782, 783, 786, 989, 1024, 1035, 1039, 1040, 1043, 1047, 1048], "bisect_km": 321, "862": [321, 325, 1011], "plot_release_highlights_1_1_0": [321, 325, 1011], "video": [322, 371, 376, 385, 503, 990, 1014, 1017], "sepal_col": 322, "petal_col": 322, "x_out": [322, 865, 874, 875], "114": [322, 1031], "052506": 322, "592373": 322, "189830": 322, "973554": 322, "416010": 322, "630382": 322, "765012": 322, "362176": 322, "021849": 322, "788808": 322, "hist_no_interact": 322, "v1": [322, 376, 399, 561, 562, 796, 797, 1043, 1046, 1047, 1048], "liac": [322, 376, 382, 496, 1046, 1047], "arff": [322, 382, 496, 1043, 1046, 1047], "ticket": [322, 382], "cabin": 322, "boat": 322, "allen": [322, 1034, 1036, 1038, 1041], "elisabeth": 322, "walton": 322, "24160": 322, "3375": 322, "b5": 322, "loui": [322, 1036, 1037, 1041, 1043, 1045, 1047], "mo": [322, 1042], "allison": 322, "hudson": 322, "9167": 322, "113781": 322, "151": [322, 388, 416, 1001], "5500": [322, 688, 986], "c22": 322, "c26": 322, "montreal": 322, "pq": 322, "chestervil": 322, "ON": 322, "helen": 322, "lorain": 322, "joshua": [322, 377, 1033, 1034, 1036, 1037, 1043, 1046, 1047], "creighton": 322, "bessi": 322, "waldo": 322, "compliant": [322, 382], "cupi": [322, 405, 1048], "gpu": [322, 405, 993, 1010, 1025, 1048], "changelog": [322, 386, 396], "410": [322, 325, 1011], "plot_release_highlights_1_2_0": [322, 325, 1011], "throughout": [323, 364, 396, 627, 799, 858, 859, 1016, 1034, 1039], "codebas": [323, 364, 382, 383, 384, 417, 1031, 1037], "ongo": [323, 383, 397], "incorpor": [323, 382, 410, 416, 988, 1009, 1014], "contrib": [323, 382, 384, 390, 394, 396, 409, 1009, 1010, 1047], "adpot": 323, "true_label": [323, 327, 328], "non_noisy_label": 323, "9694149248180188": 323, "encodings_": [323, 882, 999], "validation_curv": [323, 348, 400, 820, 984, 1038, 1039, 1040, 1043, 1047], "geomspac": 323, "make_low_rank_matrix": [323, 524], "46858513287221654": 323, "297": [323, 325, 377, 1011], "plot_release_highlights_1_3_0": [323, 325, 1011], "x_adult": 324, "y_adult": 324, "adult": [324, 999], "fnlwgt": 324, "workclass": 324, "marit": 324, "y_decis": [324, 832], "9285460023343057": 324, "df_out": 324, "rf_no_cst": 324, "rf_cst": 324, "icon": [324, 384], "hover": 324, "randomforestclassifierinot": 324, "fittedrandomforestclassifi": 324, "routin": [324, 370, 376, 379, 382, 383, 384, 385, 390, 394, 396, 418, 672, 674, 687, 844, 903, 904, 905, 906, 907, 986, 992, 999, 1000, 1003, 1009, 1014, 1031, 1045, 1046, 1047], "get_scor": [324, 396, 732, 1038, 1047], "hyperparameter_grid": 324, "scoring_inner_cv": 324, "test_ms": 324, "interfer": [324, 1041], "31492771": 324, "37849335": 324, "68510834": 324, "26049698": 324, "29899583": 324, "plot_release_highlights_1_4_0": [324, 325, 1011], "945": 325, "release_highlight": [325, 1011], "semisupervis": [327, 396], "clai": [327, 328, 329, 332, 1031], "woolam": [327, 328, 329, 332, 1031], "n_total_sampl": [327, 328], "n_labeled_point": [327, 328], "unlabeled_set": 327, "everyth": [327, 364, 386, 388, 394, 464, 944, 1009, 1010, 1031], "lp_model": [327, 328], "predicted_label": [327, 328], "transduction_": [327, 328, 329, 896, 897, 898], "_plot": 327, "0x7f552edd3ee0": 327, "pred_entropi": [327, 328], "label_distributions_": [327, 328, 896, 897, 1042], "uncertainty_index": [327, 328], "image_index": [327, 328], "plot_label_propagation_digit": [327, 333, 1011], "max_iter": 328, "______________________________________________________________________": 328, "290": [328, 688, 689, 693, 986], "280": 328, "unlabeled_indic": 328, "transduc": 328, "delete_indic": 328, "183": [328, 388, 990, 1031], "nfit": 328, "delete_index": 328, "488": [328, 333, 1011], "plot_label_propagation_digits_active_learn": [328, 333, 1011], "label_spread": 329, "labelspreadingifittedlabelspread": 329, "output_label": 329, "output_label_arrai": 329, "outer_numb": 329, "inner_numb": 329, "plot_label_propagation_structur": [329, 333, 1011], "breast_canc": 330, "augment": [330, 630, 883, 1014], "oliv": [330, 332, 1039, 1040, 1042, 1043, 1044], "rausch": [330, 332, 1039, 1040, 1043], "rauscho": [330, 332], "ethz": [330, 332], "total_sampl": [330, 536], "base_classifi": [330, 332, 1002], "x_valu": 330, "99999": 330, "amount_label": 330, "amount_iter": 330, "self_training_clf": 330, "skfold": 330, "y_test_tru": 330, "labeled_iter_": [330, 898], "return_count": [330, 354, 853], "capsiz": 330, "twinx": 330, "plot_self_training_varying_threshold": [330, 333, 1011], "2823": 331, "2117": 331, "441": [331, 355, 356, 1011], "758": 331, "1676": 331, "1108": 331, "847": 331, "tfidftransform": [331, 354, 355, 417, 489, 591, 1025, 1038, 1039, 1045, 1047, 1048], "sdg_param": 331, "vectorizer_param": 331, "selftrain": 331, "st_pipelin": 331, "ls_pipelin": 331, "eval_and_print_metr": 331, "y_mask": 331, "x_20": 331, "y_20": 331, "plot_semi_supervised_newsgroup": [331, 333, 1011], "y_rand": 332, "y_30": 332, "y_50": 332, "ls30": 332, "ls50": 332, "ls100": 332, "st30": 332, "st50": 332, "rbf_svc": [332, 1004], "color_map": 332, "plot_semi_supervised_versus_svm_iri": [332, 333, 1011], "my_kernel": [336, 1004], "plot_custom_kernel": [336, 351, 1011], "2x2": [337, 409, 753], "202": [337, 351, 1011], "plot_iris_svc": [337, 351, 1011], "convention": [338, 396, 897], "support_vector_indic": 338, "plot_linearsvc_support_vector": [338, 351, 1011], "plot_oneclass": [339, 351, 1011], "midpoint": 340, "blink": 340, "act": [340, 353, 382, 395, 415, 416, 713, 728, 729, 737, 782, 783, 786, 876, 880, 986, 989, 992, 1004, 1039], "spuriou": [340, 390, 999, 1044, 1045, 1046], "c_rang": 340, "gamma_rang": 340, "midpointnorm": 340, "masked_arrai": [340, 798, 812], "x_2d": 340, "y_2d": 340, "c_2d_rang": 340, "gamma_2d_rang": 340, "bright": 340, "brutal": 340, "plot_rbf_paramet": [340, 351, 1011], "plot_separating_hyperplan": [341, 351, 1011], "plain": [342, 419, 657, 1003], "n_samples_1": [342, 1004], "n_samples_2": [342, 1004], "clusters_std": 342, "wclf": 342, "wdisp": 342, "plot_separating_hyperplane_unbalanc": [342, 351, 1011], "blown": 343, "score_mean": 343, "score_std": 343, "plot_svm_anova": [343, 351, 1011], "outermost": 344, "hinge_loss": [344, 989, 1035, 1043, 1044], "enrich": 344, "plot_training_data_with_decision_boundari": 344, "cosine_similar": [344, 759, 764, 987, 1036], "untransform": [344, 464, 467, 1000], "bend": 344, "tanh": [344, 776, 858, 859, 987, 1004], "hyperbol": [344, 642, 858, 859, 987, 993], "generaliz": [344, 416], "comprehens": [344, 417, 757, 758, 987, 1014, 1039], "plot_svm_kernel": [344, 351, 1011], "plot_svm_margin": [345, 351, 1011], "fignum": 345, "unreg": 345, "yy_down": 345, "yy_up": 345, "nusvc": [346, 368, 437, 904, 990, 1004, 1031, 1032, 1033, 1036, 1039, 1041, 1042, 1043, 1045], "445": [346, 351, 997, 1011], "plot_svm_nonlinear": [346, 351, 1011], "svr_rbf": 347, "svr_lin": 347, "svr_poli": 347, "kernel_label": 347, "model_color": 347, "setdiff1d": 347, "fancybox": 347, "415": [347, 351, 1011], "plot_svm_regress": [347, 351, 1011], "omega": [348, 412, 983], "dependen": 348, "reparametr": 348, "model_l1": 348, "shuffle_param": 348, "best_c": 348, "idxmax": 348, "train_size_idx": 348, "results_sc": 348, "c_scale": 348, "best_c_scal": 348, "somewhat": [348, 364, 370, 382, 384, 414, 416, 903, 906, 985, 1004, 1005], "dantzig": 348, "model_l2": 348, "plot_svm_scale_c": [348, 351, 1011], "break_ti": [349, 903, 906, 1004, 1041], "accent": [349, 588, 589, 591, 1041], "974": [349, 351, 1011], "plot_svm_tie_break": [349, 351, 1011], "emphasi": [350, 412, 903, 904, 905, 906, 907, 996, 1009], "subtl": [350, 364, 988, 1010], "plot_decision_funct": 350, "sample_weight_last_ten": 350, "sample_weight_const": 350, "clf_no_weight": 350, "clf_weight": 350, "498": [350, 351, 1011], "plot_weighted_sampl": [350, 351, 1011], "size_mb": 353, "utf": [353, 355, 417, 487, 503, 582, 588, 589, 591], "load_dataset": 353, "sublinear_tf": [353, 414, 417, 590, 591], "duration_train": 353, "duration_test": 353, "data_train_size_mb": 353, "data_test_size_mb": 353, "2034": [353, 377], "98mb": 353, "1353": 353, "87mb": 353, "217mb": 353, "7831": 353, "739mb": 353, "ridgeclassifi": [353, 368, 672, 673, 675, 985, 990, 1036, 1040, 1044, 1045, 1046], "sparse_cg": [353, 672, 674, 687, 985, 1032, 1038, 1040, 1041, 1045, 1047], "rarer": [353, 355, 417], "deeper": [353, 1005], "plot_feature_effect": 353, "average_feature_effect": 353, "top5": 353, "top_indic": 353, "predictive_word": 353, "bar_siz": 353, "y_loc": 353, "keyword": [353, 376, 382, 384, 387, 389, 396, 409, 420, 423, 438, 444, 445, 450, 452, 457, 464, 467, 496, 503, 535, 538, 540, 559, 560, 567, 568, 569, 570, 620, 628, 631, 632, 639, 643, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 688, 692, 697, 698, 699, 700, 701, 702, 773, 777, 778, 779, 780, 791, 792, 804, 820, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 861, 865, 933, 956, 978, 986, 989, 992, 1002, 1031, 1035, 1037, 1038, 1039, 1041, 1043, 1045, 1046, 1047, 1048], "keith": [353, 1031, 1036], "atheist": 353, "orbit": [353, 354], "caltech": 353, "expectedli": 353, "pollut": [353, 727, 784, 989, 995], "sender": [353, 377], "livesei": 353, "solntz": 353, "wpd": 353, "sgi": 353, "jon": [353, 1038, 1041, 1042, 1044, 1045], "nntp": [353, 377, 1025], "1qlettinn8oi": 353, "cco": 353, "allan": [353, 407, 1043], "schneider": [353, 1044], "me": 353, "instinct": 353, "happi": [353, 394, 397, 816, 817], "listen": 353, "murder": 353, "voluntari": 353, "disregard": [353, 396, 417, 432, 465, 482, 483, 484, 552, 554, 556, 558, 560, 562, 565, 568, 570, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 721, 722, 723, 784, 834, 835, 844, 852, 859, 870, 871, 877, 878, 881, 886, 889, 890, 892, 902, 904, 907, 910, 912, 989, 1039], "beings": 353, "bahavior": 353, "theirs": 353, "mimicri": 353, "imit": 353, "parrot": 353, "polli": 353, "pulchritud": 353, "anim": [353, 417], "kill": 353, "Or": [353, 362, 413, 414, 874, 989, 995, 1003], "sigh": 353, "wonder": 353, "bahaviour": 353, "believ": [353, 354, 390, 394, 1014], "primat": 353, "arbitarili": 353, "poster": [353, 381, 382, 1024], "weren": [353, 875, 1040], "slai": 353, "mate": 353, "ritual": 353, "whatnot": 353, "aren": [353, 377, 386, 399, 408, 725, 755, 994, 1041, 1043], "ye": [353, 390, 396, 868, 885, 985], "gorilla": 353, "dolphin": 353, "platypu": 353, "writer": 353, "launch": [353, 354, 399, 1014], "custom_nam": 353, "clf_descr": 353, "rocchio": [353, 848], "000614": 353, "772": [353, 722], "5316": 353, "000628": 353, "000971": 353, "0626": [353, 832], "704": 353, "0316": 353, "000633": 353, "752": 353, "0307": 353, "000925": 353, "762": 353, "00312": 353, "00159": 353, "748": [353, 388], "00189": 353, "000519": 353, "779": 353, "txt": [353, 376, 493, 503], "curs": [353, 354, 409, 415, 991, 992, 1019, 1024], "harm": [353, 384, 417, 794], "plot_document_classification_20newsgroup": [353, 356, 1011], "discov": [354, 408, 409, 414, 417, 420, 444, 448, 1016, 1046], "category_s": 354, "true_k": 354, "3387": 354, "evaluations_std": 354, "fit_and_evalu": 354, "evaluation_std": 354, "score_valu": 354, "std_score": [354, 1044], "collis": [354, 355, 417, 582, 589], "x_tfidf": 354, "7929": [354, 1038], "prod": [354, 621], "phenomenon": [354, 999], "cluster_s": 354, "2050": 354, "711": 354, "446": [354, 725, 755, 989], "1708": 354, "3384": 354, "1887": 354, "311": 354, "332": [354, 889], "1688": 354, "454": 354, "628": 354, "358": 354, "405": 354, "380": [354, 1025], "217": [354, 535, 541], "redo": 354, "x_lsa": 354, "explained_vari": [354, 989], "377": 354, "010": [354, 388, 997], "435": 354, "416": [354, 738, 989], "320": [354, 377, 978, 1003, 1031], "030": 354, "minibatch_kmean": 354, "348": 354, "376": [354, 997], "047": [354, 388], "292": [354, 399, 416, 734], "original_space_centroid": 354, "order_centroid": 354, "ve": [354, 382, 417, 1013, 1014, 1025, 1038], "shuttl": 354, "bibl": 354, "sparciti": 354, "lsa_vector": 354, "x_hashed_lsa": 354, "392": 354, "413": 354, "328": [354, 729], "367": [354, 416, 1031], "df_std": 354, "speak": [354, 368, 382, 1003], "safer": [354, 364, 380, 409, 413, 1031], "plot_document_clust": [354, 356, 1011], "18000": [355, 377], "raw_data": 355, "data_size_mb": 355, "3803": 355, "245mb": 355, "anyth": [355, 386, 388, 396, 400, 410, 413, 949, 953, 1045], "unicod": [355, 417, 487, 503, 582, 588, 589, 591, 954, 1031, 1039, 1043], "charact": [355, 382, 387, 396, 417, 503, 508, 509, 588, 589, 591, 913, 994, 1025, 1031, 1044, 1046], "underscor": [355, 384, 396, 973, 1022, 1031, 1041, 1044], "tok": [355, 417], "findal": 355, "token_freq": 355, "dict_count_vector": 355, "47928": 355, "vocabulary_": [355, 417, 581, 588, 591, 1025, 1031], "19145": 355, "n_nonzero_column": 355, "43873": 355, "inact": [355, 376, 382], "47668": 355, "input_typ": [355, 417, 464, 582], "y_po": 355, "downsid": 355, "featureheash": 355, "implicitli": [355, 391, 416, 597, 632, 633, 880, 979, 981, 996, 999, 1004], "token_pattern": [355, 417, 588, 589, 591], "47885": 355, "520": [355, 628, 850, 979, 992], "699": 355, "plot_hashing_vs_dict_vector": [355, 356, 1011], "728": 356, "parameter": [358, 419, 614, 615, 622, 623, 796, 797, 985, 986, 994, 999, 1005], "weakest": [358, 1005], "cost_complexity_pruning_path": [358, 909, 910, 911, 912], "drawstyl": [358, 700], "3272984419327777": 358, "419": [358, 363, 616, 1011], "plot_cost_complexity_prun": [358, 363, 1011], "ryb": 359, "pairidx": 359, "borderpad": 359, "handletextpad": 359, "plot_iris_dtc": [359, 363, 1011], "plot_tre": [359, 362, 1005, 1040, 1042, 1043, 1044, 1046, 1047], "819": [359, 363, 417, 1011], "plot_tree_regress": [360, 363, 1011], "regr_3": 361, "y_3": 361, "228": [361, 363, 1011], "plot_tree_regression_multioutput": [361, 363, 1011], "decision_path": [362, 557, 558, 564, 565, 566, 909, 910, 911, 912, 1037, 1042], "decisiontreeclassifierifitteddecisiontreeclassifi": 362, "compute_node_depth": 362, "children_left": 362, "children_right": 362, "n_node_sampl": 362, "weighted_n_node_sampl": 362, "travers": [362, 992, 996], "n_node": [362, 441, 445, 463, 557, 558, 564, 565, 566, 909, 910, 911, 912, 943], "node_depth": 362, "is_leav": 362, "pop": [362, 394, 916, 1020, 1039], "visit": [362, 382, 996], "node_id": [362, 913, 915], "is_split_nod": 362, "children": [362, 409, 416, 441, 445, 463, 566, 1035, 1048], "33035714": 362, "30357143": 362, "36607143": 362, "800000011920929": 362, "45333333": 362, "54666667": 362, "950000047683716": 362, "91666667": 362, "08333333": 362, "02564103": 362, "97435897": 362, "n_output": [362, 396, 416, 426, 432, 433, 437, 442, 445, 465, 469, 482, 483, 484, 532, 534, 536, 537, 539, 542, 543, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 582, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 628, 630, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 678, 679, 721, 722, 727, 744, 745, 747, 749, 750, 752, 753, 784, 787, 789, 790, 798, 801, 802, 804, 812, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 848, 850, 851, 852, 857, 858, 859, 860, 864, 865, 866, 867, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 893, 894, 896, 897, 901, 902, 903, 904, 906, 907, 909, 910, 911, 912, 927, 960, 989, 990, 1005, 1038, 1041], "node_index": 362, "node_ind": 362, "leaf_id": 362, "sample_id": [362, 377, 497], "threshold_sign": 362, "inequ": [362, 396, 409, 443, 447, 459, 699, 986, 987, 992], "common_nod": 362, "common_node_id": 362, "plot_unveil_tree_structur": [362, 363, 1011], "620": [363, 498], "x_test_transform": [364, 413], "standard_norm": 364, "unfair": 364, "x_select": 364, "gbc": 364, "x_train_select": 364, "x_test_select": 364, "tip": [364, 367, 371, 382, 385, 388, 404, 417, 534, 541, 645, 692, 985, 1012, 1026, 1027, 1029, 1034], "glossari": [364, 371, 382, 384, 388, 408, 420, 421, 437, 440, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 461, 462, 464, 467, 469, 472, 474, 488, 491, 492, 495, 497, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 583, 584, 594, 602, 607, 608, 610, 611, 627, 632, 634, 639, 640, 641, 642, 646, 647, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 692, 693, 694, 695, 701, 773, 777, 780, 792, 796, 797, 798, 800, 801, 802, 803, 804, 810, 812, 813, 814, 815, 816, 817, 818, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 843, 844, 846, 847, 849, 850, 851, 852, 854, 855, 857, 858, 859, 860, 863, 866, 878, 882, 890, 893, 894, 896, 897, 901, 902, 903, 906, 909, 910, 911, 912, 937, 938, 960, 963, 978, 979, 985, 1016, 1039], "mtrand": 364, "_rand": 364, "85418642": 364, "79084103": 364, "13077794": 364, "11915045": 364, "56479934": 364, "70814003": 364, "25291366": 364, "55212743": 364, "18197458": 364, "37845099": 364, "mutat": [364, 1039], "debug": [364, 369, 383, 385, 388, 396, 398, 627, 900, 955, 1009, 1025, 1039, 1043], "govern": [364, 368, 371, 382, 396, 1007, 1014], "implic": [364, 382], "rf_123": 364, "rf_inst": 364, "didn": [364, 396, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "strict": [364, 380, 396, 414, 503, 535, 588, 589, 591, 985, 1031, 1040, 1043], "pervas": [364, 382], "unlucki": 364, "lucki": 364, "fairer": 364, "temptat": [364, 382], "throughput": [367, 1009, 1027, 1034], "switch": [367, 678, 704, 717, 736, 754, 756, 794, 841, 842, 937, 938, 989, 992, 1027, 1031], "offlin": [368, 382], "bottleneck": [368, 388, 416, 448, 858, 859], "hurt": [368, 534, 1039], "toolkit": [368, 1009, 1014], "branch": [368, 380, 382, 385, 386, 409, 416, 442, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 909, 910, 911, 912, 914, 992, 996, 1005], "sklearn_assume_finit": 368, "assume_finit": [368, 369, 468, 899], "assert_all_finit": [368, 391, 468], "nm": 368, "csc": [368, 394, 396, 417, 527, 551, 553, 554, 670, 692, 868, 870, 876, 881, 884, 886, 892, 917, 921, 922, 952, 964, 965, 967, 968, 969, 970, 992, 999, 1039, 1040, 1042, 1045], "32bit": [368, 954], "speedup": [368, 414, 416, 650, 654, 657, 1031, 1032, 1033, 1034, 1046], "multithread": [368, 409, 901, 902, 903, 904, 905, 906, 907], "bla": [368, 369, 380, 383, 388, 1031, 1039, 1040, 1042, 1043], "sparsity_ratio": 368, "gbt": 368, "speedi": 368, "packet": 368, "reuter": [368, 377], "carefulli": [368, 414, 1004], "spawn": [368, 394, 798, 812, 822, 823, 824, 1042], "gil": [368, 369, 383, 957, 1034, 1039, 1040, 1043, 1044, 1048], "ought": 368, "lapack": [368, 369, 380, 532, 535, 541, 688, 1046], "dgemm": 368, "show_vers": [368, 380, 382, 390, 399, 1039], "atla": [368, 380], "rebuild": [368, 403, 417, 442], "openbla": [368, 369, 380, 394, 957, 1044, 1048], "mkl": [368, 369, 380, 394, 957, 1031], "veclib": [368, 394], "osx": 368, "nouri": [368, 1032, 1034], "instruct": [368, 382, 383, 384, 385, 386, 387, 390, 394, 395, 503, 588, 589, 591, 1016, 1025, 1031], "ubuntu": [368, 380, 388, 390], "1gb": 368, "mib": [368, 468, 899], "working_memori": [368, 369, 468, 780, 899, 1039], "adher": [368, 384, 396, 932, 933, 1031, 1032], "pairwise_distances_chunk": [368, 777, 1039, 1042, 1048], "facilit": [368, 396, 403, 1009, 1010, 1037, 1040], "moment": [368, 414, 419, 440, 615, 623, 858, 859, 953, 993, 994], "000024": 368, "027400": 368, "mileag": 368, "deploi": [368, 398, 403, 1010, 1014], "upstream": [368, 382, 386, 390, 394, 999, 1040], "lighter": [368, 700, 702, 781, 788, 1047], "threadpoolctl": [369, 380, 399, 402], "subsect": [369, 382, 408], "worker": [369, 396, 417, 955, 956, 957, 1046], "14228": 369, "loki": [369, 957, 989, 1039, 1042], "duplic": [369, 381, 382, 396, 409, 420, 444, 448, 449, 515, 635, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 825, 872, 975, 992, 1031, 1034, 1043, 1045, 1047, 1048], "memmap": [369, 377, 396, 414, 508, 534, 1039], "1mb": [369, 1036], "parallel_backend": [369, 420, 437, 444, 446, 448, 450, 452, 457, 458, 461, 464, 467, 472, 531, 535, 536, 537, 539, 542, 543, 545, 546, 548, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 594, 602, 610, 632, 634, 639, 647, 651, 653, 655, 657, 658, 659, 661, 663, 665, 666, 668, 676, 679, 688, 689, 690, 691, 692, 693, 694, 773, 777, 780, 798, 801, 802, 804, 812, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 833, 834, 843, 844, 847, 849, 851, 852, 854, 855, 860, 863, 896, 897, 1039], "exclus": [369, 394, 396, 414, 416, 627, 628, 630, 978, 985, 989, 990, 1014, 1038, 1042], "omp_num_thread": 369, "my_script": 369, "algebra": [369, 380, 385, 394, 414, 417, 462, 867, 999], "bli": [369, 380, 394], "mkl_num_thread": 369, "openblas_num_thread": 369, "blis_num_thread": 369, "bash": [369, 390], "zsh": 369, "termin": [369, 387, 388, 390, 399, 409, 448, 461, 553, 554, 558, 559, 560, 563, 565, 666, 667, 668, 676, 678, 858, 859, 910, 912, 995, 1005], "prompt": [369, 380, 382, 399, 402, 417, 1016], "pypi": [369, 380, 382, 384, 386, 388, 399, 1005, 1039, 1043, 1045, 1046, 1048], "channel": [369, 377, 380, 394, 399, 417, 493, 494, 583, 584, 586, 587], "subscript": [369, 1044], "max_thread": [369, 383], "n_cpu": [369, 396], "preced": [369, 382, 487, 989, 1031], "lib": [369, 380, 399, 1009], "_num_thread": 369, "singleton": [369, 806, 924, 1044, 1047], "aforement": [369, 990], "global_random_se": 369, "fixtur": [369, 382], "build_numb": 369, "disrupt": 369, "config": [369, 382, 383, 390, 626, 1039], "contributor": [369, 385, 386, 387, 390, 394, 396, 989, 1007, 1010, 1032, 1033, 1034], "encount": [369, 380, 403, 409, 416, 417, 496, 561, 562, 581, 836, 837, 838, 840, 874, 964, 999, 1003, 1009, 1013, 1014, 1025, 1039, 1042], "annoi": 369, "test_your_test_nam": 369, "skip": [369, 382, 384, 391, 405, 417, 468, 568, 646, 647, 652, 660, 661, 662, 671, 681, 899, 1025, 1035, 1038, 1041, 1043, 1045, 1047], "global_dtyp": 369, "boundscheck": [369, 383], "segfault": [369, 383, 1031, 1039, 1044], "posix": [369, 394], "pairwisedistancesreduct": 369, "adequ": [369, 388, 567, 1016, 1044], "sphinxopt": 369, "syntax": [369, 382, 387, 390, 410, 468, 860, 861, 899, 978, 1016, 1042, 1044], "rst": [369, 382, 386, 390, 1025, 1031, 1036], "drive": [370, 414, 415, 549, 1003, 1014, 1025], "passiveaggressiveregressor": [370, 985, 1032, 1035, 1038, 1039, 1042, 1044], "maxabsscal": [370, 405, 865, 886, 979, 999, 1036, 1039, 1040, 1041, 1042, 1047, 1048], "passiveaggress": [370, 417], "fledg": [370, 417], "naivebay": 370, "dramat": 370, "welcom": [371, 381, 382, 390, 397, 1010, 1013], "roadmap": [371, 1007], "persist": [371, 390, 394, 414, 446, 610, 611, 857, 994, 1009, 1027, 1037, 1040], "craft": [371, 385], "curat": [371, 382, 385, 386], "fetcher": [375, 1036, 1038, 1047], "linnerrud": [375, 1027], "covertyp": [375, 491, 1027], "rcv1": [375, 497, 1027, 1036], "svmlight": [375, 487, 508, 509, 1027, 1031, 1032, 1038, 1040], "jpeg": [376, 377, 493, 494], "publish": [376, 377, 384, 386, 390, 396, 1001, 1010, 1043], "creativ": 376, "spare": [376, 674, 675], "pyplpt": 376, "load_svmlight_fil": [376, 1031, 1032, 1037, 1038, 1039, 1046], "test_dataset": 376, "everybodi": [376, 382], "upload": [376, 380, 386, 394, 671], "mice": [376, 627, 979], "brain": 376, "miceprotein": 376, "1080": [376, 409], "sc": [376, 409], "clara": [376, 1043], "higuera": 376, "katheleen": 376, "gardin": 376, "krzysztof": 376, "cio": 376, "protein": 376, "cite": [376, 409, 1007], "kj": [376, 991], "critic": [376, 382, 395, 403, 416, 692, 986, 989, 997, 1004, 1014, 1042], "syndrom": 376, "plo": [376, 607, 608], "ONE": [376, 607, 608], "e0129126": 376, "40966": 376, "upload_d": 376, "08t16": 376, "17928620": 376, "file_id": 376, "default_target_attribut": 376, "row_id_attribut": 376, "mouseid": 376, "ignore_attribut": 376, "genotyp": 376, "cc18": 376, "study_135": 376, "study_98": 376, "study_99": 376, "md5_checksum": 376, "3c479a6885bfa0438971388283a1ce32": 376, "websit": [376, 377, 379, 382, 397, 993, 1003, 1014, 1025, 1032, 1033, 1034], "4550": 376, "17t14": 376, "1804243": 376, "pone": 376, "0129126": 376, "openml100": 376, "study_14": 376, "study_34": 376, "earliest": [376, 986], "iris_61": 376, "iris_969": 376, "969": 376, "iris_version_3": 376, "vanschoren": [376, 1043], "rijn": [376, 1039], "bischl": 376, "torgo": 376, "acm": [376, 377, 409, 420, 444, 450, 457, 460, 511, 563, 676, 725, 755, 847, 989, 992, 995, 1001], "sigkdd": [376, 377, 511, 676, 882, 999, 1001], "newslett": 376, "legaci": [376, 386, 396, 957, 1031, 1038, 1043], "my": [376, 382, 387, 390, 496], "columnar": [376, 464, 1009], "usabl": [376, 382, 384, 396, 403, 417, 798, 957, 1031, 1038, 1045, 1046], "io": [376, 379, 380, 382, 386, 388, 390, 396, 403, 692, 1009, 1029], "json": [376, 382, 399], "sql": 376, "smoothli": 376, "manipul": [376, 405, 507, 957, 1009, 1037], "mat": [376, 417], "load_fil": [376, 377, 1025, 1033, 1045], "audio": [376, 503], "wish": [376, 382, 389, 391, 399, 409, 938, 1017, 1025, 1038], "imageio": 376, "wavfil": 376, "wav": 376, "hdf5": 376, "h5py": 376, "pytabl": 376, "april": [377, 664, 685, 686, 1035, 1043], "AT": [377, 495], "laboratori": [377, 1009], "cambridg": [377, 414, 590, 836, 840, 985, 987, 991], "facial": 377, "glass": 377, "upright": 377, "frontal": 377, "movement": 377, "credit": [377, 390, 416, 985, 1014], "18846": [377, 488, 489], "20news_hom": 377, "newsgroups_train": 377, "11314": 377, "1073": 377, "20new": [377, 1025], "34118": 377, "01327": 377, "newsgroups_test": 377, "vectors_test": 377, "class_prior": [377, 836, 837, 838, 840, 1032, 1035], "fit_prior": [377, 836, 837, 838, 840], "88213": 377, "suspici": 377, "show_top10": 377, "top10": 377, "affili": 377, "abund": 377, "clue": [377, 390, 986], "bare": [377, 986, 1025], "quotat": 377, "77310": 377, "76995": 377, "cleveland": 377, "indian": 377, "leagu": 377, "team": [377, 385, 394, 396, 1007, 1009, 1014, 1031], "ohio": 377, "spark": [377, 1010], "death": 377, "floyd": [377, 688, 986], "reckon": 377, "coloni": 377, "paul": [377, 1034, 1037, 1038, 1039, 1040, 1044, 1045], "dolan": 377, "nicknam": 377, "tribe": 377, "theme": [377, 1031], "mlb": [377, 872], "inappropri": [377, 413, 419, 709, 819], "nlp": [377, 414, 417, 836, 840, 987, 1014], "cultur": 377, "inflammatori": 377, "famou": [377, 379, 416, 1004], "internet": [377, 387, 999, 1023], "offici": [377, 384, 396, 399, 493, 497, 1009, 1025, 1039, 1040, 1043], "verif": [377, 989, 1014], "identif": [377, 382, 409, 497, 978, 1017], "viola": [377, 1039], "opencv": 377, "detector": [377, 396, 847], "5749": [377, 493, 494], "13233": [377, 493, 494], "5828": [377, 493, 494], "200m": 377, "lfw_home": 377, "rectangular": [377, 396, 938, 1010], "1140": 377, "fetch_lfw_pair": [377, 1036, 1046], "lfw_pairs_train": 377, "subdivid": [377, 419], "10_fold": [377, 493], "gari": [377, 1038], "huang": [377, 658, 1037, 1042], "manu": 377, "ramesh": [377, 1014, 1034, 1037, 1041], "tamara": 377, "berg": [377, 1032, 1033, 1043], "erik": [377, 1014, 1034], "miller": [377, 1039, 1040, 1044], "massachusett": 377, "amherst": 377, "30m": 377, "seven": [377, 982], "homepag": [377, 530, 1005], "581012": [377, 491], "newswir": 377, "ltd": [377, 1014], "804414": [377, 497], "47236": [377, 497], "fetch_rcv1": [377, 1036, 1040], "v2": [377, 497, 664, 685, 686, 985], "chronolog": [377, 497], "23149": [377, 497, 1045], "781265": [377, 497], "lyrl2004": [377, 497], "2286": 377, "810596": 377, "2287": 377, "2288": 377, "uint32": [377, 497], "gmil": 377, "381327": 377, "ccat": 377, "e11": 377, "ecat": 377, "m11": 377, "656": 377, "lewi": [377, 1038, 1042], "yang": [377, 409, 414, 534, 639, 1037, 1038, 1041, 1043, 1044, 1045, 1047], "rose": 377, "397": 377, "cup": [377, 989], "tcpdump": 377, "darpa": 377, "intrus": 377, "lincoln": 377, "unrealist": 377, "sa": [377, 492], "logged_in": 377, "smtp": [377, 492], "resp": [377, 416, 597, 796, 797, 1003, 1039], "4898431": [377, 492], "976158": 377, "699691": 377, "619052": 377, "95373": 377, "kddcup99": [377, 492], "richard": [377, 418, 658, 1032, 1041, 1043, 1045, 1046], "lippmann": 377, "hain": 377, "jonathan": [377, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1047], "korba": 377, "da": [377, 1046, 1047], "yamanishi": 377, "takeuchi": 377, "miln": 377, "discount": [377, 409, 725, 755, 1038, 1041], "sixth": 377, "press": [377, 409, 414, 419, 420, 444, 590, 610, 611, 614, 619, 622, 643, 836, 840, 982, 985, 987, 991], "household": 377, "statlib": 377, "dcc": 377, "ltorgo": 377, "cal_hous": 377, "1990": 377, "censu": 377, "bureau": 377, "resid": 377, "vacat": 377, "pace": 377, "kellei": [377, 1033, 1034], "ronald": [377, 993, 1034, 1044], "barri": [377, 1039], "autoregress": 377, "hyperspher": [378, 1009], "interleav": [378, 522], "simplif": [378, 381, 387, 1031, 1037], "realiti": 378, "make_sparse_uncorrel": 378, "make_friedman1": [378, 416, 539, 543, 593, 594, 632], "make_friedman2": [378, 611, 613, 614, 615, 616, 617, 621, 624, 625], "reciproc": [378, 989], "make_friedman3": 378, "7826": 379, "4194": 379, "9490": 379, "9565": 379, "fisher": [379, 416, 504, 636, 1009], "michael": [379, 407, 409, 450, 628, 637, 691, 796, 979, 985, 1014, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1045, 1046], "marshal": 379, "arc": [379, 416], "1988": 379, "sir": 379, "referenc": [379, 382, 384, 390, 396, 893, 894, 992, 1038, 1044], "duda": [379, 983], "hart": [379, 983, 1039], "taxonom": 379, "annual": [379, 409, 725, 755, 898, 989, 1002], "eugen": [379, 1032, 1037], "179": [379, 388, 416, 1031], "1936": 379, "john": [379, 417, 536, 708, 734, 768, 876, 903, 904, 906, 907, 979, 985, 989, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1044, 1046, 1047], "wilei": [379, 979], "1950": [379, 989], "1973": [379, 407], "scene": [379, 992, 994, 1044], "q327": 379, "d83": 379, "son": [379, 979], "isbn": [379, 409, 985], "22361": 379, "dasarathi": 379, "1980": 379, "nose": [379, 1034, 1038], "pami": [379, 409, 724], "gate": [379, 1044], "1972": 379, "mlc": 379, "cheeseman": 379, "autoclass": 379, "conceptu": [379, 416, 987], "alpaydin": 379, "boun": 379, "nist": [379, 989], "bitmap": 379, "preprint": 379, "32x32": 379, "nonoverlap": 379, "4x4": [379, 414, 417], "garri": 379, "candela": 379, "dimmick": 379, "geist": 379, "grother": 379, "janet": 379, "handprint": 379, "nistir": 379, "5469": 379, "kaynak": 379, "msc": 379, "graduat": 379, "bogazici": 379, "cascad": 379, "kybernetika": 379, "ken": [379, 1025, 1033, 1040], "tang": [379, 1041, 1042, 1043], "ponnuthurai": 379, "suganthan": 379, "yao": [379, 1037, 1038, 1039, 1040, 1047, 1048], "kai": [379, 563, 995, 1038], "dimensionalityreduct": 379, "nanyang": 379, "technolog": 379, "claudio": [379, 1045, 1046], "gentil": [379, 1043], "linnerud": [379, 505], "men": 379, "club": 379, "waist": 379, "puls": 379, "chin": [379, 1035], "situp": 379, "tenenhau": 379, "pratiqu": 379, "alcalin": 379, "magnesium": 379, "phenol": 379, "nonflavanoid": 379, "proanthocyanin": 379, "od280": 379, "od315": 379, "class_2": [379, 510], "162": 379, "1680": 379, "746": 379, "chemic": 379, "grown": [379, 416, 553, 554, 555, 556, 557, 558, 564, 565, 909, 910, 911, 912, 1005], "itali": 379, "cultiv": 379, "thirteen": 379, "constitu": 379, "forina": 379, "parvu": 379, "pharmaceut": 379, "food": 379, "brigata": 379, "salerno": 379, "16147": 379, "genoa": 379, "lichman": 379, "irvin": 379, "aeberhard": 379, "cooman": 379, "vel": 379, "rep": 379, "dept": 379, "cook": [379, 1031, 1037], "north": [379, 409], "queensland": 379, "submit": [379, 380, 381, 384, 385, 386, 387, 390, 396, 397], "technometr": [379, 411, 469, 474, 995], "rda": 379, "1nn": 379, "THE": 379, "OF": 379, "chemometr": 379, "272": [380, 399, 401, 402], "wheel": [380, 382, 386, 399, 1041, 1043, 1045], "quickest": 380, "registri": [380, 399, 1009], "uninstal": 380, "git": [380, 384, 386, 388, 390, 1013, 1031, 1047], "fork": [380, 382, 386, 390, 394], "miniforge3": [380, 390], "miniforg": [380, 390, 399], "env": [380, 390, 399], "newli": [380, 395, 416, 463, 996, 1037, 1038, 1046], "virtualenv": [380, 382, 399], "python3": [380, 399], "venv": [380, 399], "pep517": [380, 382], "dev0": [380, 386, 1013], "pyx": [380, 382, 383, 388, 390], "pxd": [380, 382], "sklearn_fail_no_openmp": 380, "checkout": [380, 382, 386, 390], "cumbersom": 380, "reinstal": [380, 399], "setuptool": 380, "unix": [380, 417], "makefil": 380, "studio": [380, 1014], "vs_buildtool": 380, "desktop": 380, "screenshot": 380, "secondli": [380, 394, 409, 416, 657, 985, 1025], "architectur": [380, 384, 390, 394, 399, 403, 468, 899, 993, 1007, 1014, 1031, 1048], "cmd": 380, "powershel": 380, "struct": [380, 396, 1034], "calcsiz": 380, "distutils_use_sdk": 380, "x86": 380, "buildtool": 380, "vc": 380, "vcvarsal": 380, "bat": 380, "x64": 380, "clang": [380, 383], "confusingli": 380, "usr": 380, "gcc": [380, 383, 388, 394], "libomp": [380, 1043], "silicon": 380, "m1": [380, 405], "januari": [380, 382, 1031, 1032, 1041, 1043, 1046], "arm64": [380, 385], "llvm": 380, "toolchain": 380, "xcode": 380, "conflict": [380, 382, 386, 390, 399, 1038, 1039], "condarc": 380, "channel_prior": 380, "echo": [380, 386], "cxx": 380, "cflag": 380, "cxxflag": 380, "ldflag": 380, "subfold": [380, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 503, 1044], "fopenmp": [380, 383], "export": [380, 383, 384, 399, 403, 913, 914, 1005, 1009, 1013, 1040], "cppflag": 380, "xpreprocessor": 380, "wl": 380, "rpath": 380, "lomp": 380, "sudo": [380, 399], "apt": [380, 390, 399], "pip3": [380, 399], "pythonx": 380, "site": [380, 382, 385, 390, 399, 416, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 1014, 1039], "precompil": 380, "arm": [380, 382, 390, 978], "cython3": 380, "cento": 380, "yum": 380, "devel": 380, "gnu": 380, "port": [380, 399, 1041], "pkg": 380, "build_ext": [380, 388], "build_clib": 380, "linker": [380, 383], "sysconfig": 380, "counterpart": [380, 978, 986, 1004, 1020], "get_config_var": 380, "sklearn_build_parallel": 380, "tracker": [381, 385, 390, 394, 397, 399, 403, 1007, 1010], "prioriti": [381, 632, 829, 830, 1010, 1034], "guidelin": [381, 385, 387, 388, 390, 408, 409, 416], "reformul": 381, "xyz": 381, "someestim": 381, "relabel": [381, 816, 817, 898], "stall": [381, 385], "sprint": [381, 382, 1007, 1031], "unfinish": [381, 382], "supersed": [381, 1036], "overflow": [381, 390, 394, 1034, 1038, 1039, 1040, 1041, 1042, 1044], "submitt": 381, "strive": [381, 397, 1014], "expertis": [381, 382, 394], "unclear": [381, 382, 501], "pleasant": [381, 1014], "chime": 381, "permiss": [381, 386, 397, 399, 1014, 1046], "matthew": [381, 387, 536, 742, 1031, 1034, 1038, 1040, 1044, 1045], "rocklin": [381, 387], "acknowledg": [381, 609, 1048], "struggl": [381, 397, 409], "everyon": [382, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "underrepres": 382, "merit": [382, 386, 397], "teach": 382, "priceless": 382, "abid": 382, "codeofconduct": 382, "hesit": 382, "typo": [382, 397, 400, 1031], "send": [382, 409, 421, 533], "burden": [382, 873, 1010], "slep": [382, 396, 1007], "templat": [382, 386, 387, 396, 397, 557, 558, 563, 564, 565, 566, 1009], "ecosystem": [382, 979, 1008, 1014], "numpydoc": [382, 396, 399, 402], "compli": [382, 396, 932, 1010], "fulfil": [382, 409, 416, 798, 801, 802, 812, 861, 865, 985], "anyon": [382, 397, 1014], "gist": [382, 390, 1013], "repo": [382, 386, 1010], "feasibl": [382, 870, 871, 881], "traceback": [382, 387, 390, 394, 468, 1013], "doubt": [382, 383, 386, 985, 995, 1009], "companion": [382, 999], "transcript": 382, "inclus": [382, 384, 390, 450, 456, 753, 785, 989, 990, 1031, 1045], "yourlogin": 382, "ruff": [382, 399, 402], "mypi": [382, 386, 399, 402, 1042], "synchron": [382, 417], "my_featur": 382, "commit": [382, 386, 390, 1013, 1031, 1032, 1033, 1034], "modified_fil": 382, "committ": [382, 1031], "modif": [382, 412, 416, 417, 446, 1002, 1048], "approv": [382, 397, 416], "mrg": [382, 390], "incomplet": [382, 399, 405, 409, 705, 794, 979, 986, 1025, 1035, 1037], "wip": [382, 390, 399], "matur": [382, 1009, 1010], "broad": [382, 396, 1009], "collabor": 382, "_logist": 382, "doctest": [382, 396, 1017, 1031], "test_logist": [382, 390], "test_common": [382, 390], "caught": [382, 390, 403], "submodul": [382, 386, 388, 408, 981, 987, 1031], "intricaci": 382, "narr": [382, 396, 658, 901, 906, 1031, 1032], "unittest": 382, "tests_for_packag": 382, "static": [382, 384, 388, 390, 646, 647, 652, 653, 660, 661, 662, 663], "astropi": 382, "linux": [382, 384, 385, 390, 1009, 1031], "gh": 382, "lint": [382, 390], "nogil": [382, 383], "cpython": [382, 383, 388, 1046], "pyodid": [382, 957], "sklearn_run_float32_test": 382, "lengthi": [382, 394], "etiquett": 382, "she": [382, 891, 892, 1041], "he": [382, 725, 755, 858, 859, 891, 892, 989, 1025, 1038, 1045, 1046], "shorten": [382, 1004, 1044], "leader": [382, 1014], "grab": 382, "familiar": [382, 415, 1039], "acquaint": 382, "experienc": 382, "abandon": 382, "someon": [382, 386, 396, 1031], "glad": 382, "restructuredtext": 382, "some_param": 382, "hello": [382, 390, 950], "goodby": 382, "liter": [382, 386, 1014], "array_paramet": 382, "list_param": 382, "typed_ndarrai": 382, "multioutput_arrai": 382, "bracket": [382, 985], "delimit": [382, 995, 1046], "colon": 382, "selectfpr": [382, 418, 592, 595, 598, 599, 600, 606, 1047], "defer": 382, "backtick": [382, 387], "nowadai": 382, "dropdown": 382, "pragmat": 382, "bibliograph": 382, "arxiv": [382, 462], "_my": 382, "ref": [382, 390, 979, 1037], "currentmodul": 382, "succeed": 382, "editor": [382, 390, 394], "_build": 382, "viewabl": 382, "pillow": [382, 399, 402], "sphinxext": [382, 399, 402], "opengraph": [382, 399, 402], "copybutton": [382, 399, 402], "vast": 382, "examples_pattern": 382, "your_regex_goes_her": 382, "no_mathjax": 382, "latexpdf": 382, "stone": [382, 909, 910, 1005], "subdirectori": 382, "subpackag": [382, 386, 1007, 1035, 1040], "cleanup": [382, 1031], "charg": 382, "test_requiring_mpl_fixtur": 382, "hang": [382, 1013, 1041, 1042], "fruit": [382, 990], "asv": 382, "asv_benchmark": 382, "airspe": 382, "veloc": 382, "publicli": [382, 1041], "zero_on": [382, 1032], "zero_one_loss": [382, 405, 703, 733, 989, 1032, 1033, 1034, 1048], "futurewarn": [382, 390, 1038, 1039, 1040, 1042, 1044, 1047], "example_funct": 382, "exampleestim": 382, "_n_cluster": 382, "versionchang": 382, "meet": [382, 394, 397, 418, 572, 603, 858, 859, 898, 989, 1002, 1014, 1039, 1040, 1041], "nit": 382, "retract": 382, "grammar": 382, "disambigu": [382, 829, 898, 1002, 1046], "Will": [382, 497, 534, 627, 644, 645, 646, 652, 656, 657, 660, 661, 662, 663, 664, 665, 673, 675, 707, 714, 787, 866, 870, 880, 881, 1034, 1035, 1037, 1039], "clariti": [382, 390], "unhelp": 382, "extran": 382, "rewritten": [382, 649, 1033, 1035], "generos": 382, "reward": 382, "heard": 382, "enemi": 382, "courtesi": 382, "justifi": [382, 388, 407, 565], "occas": 382, "deserv": [382, 388], "digest": [382, 1046], "overwhelm": 382, "sheer": [382, 1014], "myself": 382, "trickiest": 382, "buri": 382, "mixin": [382, 396, 424, 425, 426, 427, 428, 430, 431, 432, 433, 601, 932, 1033, 1042, 1046], "grep": 382, "delai": [382, 496, 798, 812, 822, 823, 957, 1045, 1046], "some_funct": [382, 928], "some_iter": 382, "flavor": [382, 992], "pointer": [382, 390, 442, 1040], "mandatori": [382, 417, 631], "favorit": [382, 394, 1014], "Being": [382, 396, 397, 403, 985, 992], "killer": [382, 1014], "blame": 382, "migrat": [382, 1031], "ignorerevsfil": 382, "rev": [382, 607, 608], "ruin": 382, "maco": [383, 385, 399, 405, 1039, 1043, 1045], "sklearn_enable_debug_cython_direct": 383, "scratch": [383, 442, 989, 1033], "gdb": [383, 385, 1013], "entrypoint_to_bug_reproduc": 383, "cdef": 383, "state_to_print": 383, "test_val": 383, "fuse": [383, 1037, 1047], "shell": [383, 390, 394, 1016, 1025], "cythonx": 383, "language_level": 383, "wraparound": 383, "initializedcheck": 383, "nonecheck": 383, "cdivis": 383, "recompil": [383, 388, 399], "pep073": 383, "pathwai": 383, "memoryview": 383, "cnp": 383, "lightweight": [383, 798, 812, 822, 823, 1009], "virtual": [383, 399, 413, 1014], "enter": [383, 386, 409, 442, 996], "prang": 383, "void": 383, "my_func": [383, 388], "st\u00e9fan": 383, "benhel": 383, "_cython_bla": 383, "protect": [383, 386, 955], "_openmp_help": 383, "cimport": [383, 391, 1039], "omp_get_max_thread": 383, "prolifer": 384, "adopt": [384, 396, 897, 989, 1003, 1039, 1046, 1048], "predomin": [384, 1032], "overrid": [384, 417, 446, 450, 457, 542, 548, 588, 589, 591, 593, 594, 597, 656, 664, 685, 686, 804, 820, 843, 844, 845, 847, 849, 851, 852, 853, 1031, 1039, 1041, 1045, 1047], "creation": [384, 511, 512, 513, 515, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 656, 841, 842, 1014, 1038, 1039, 1040, 1044], "optimis": [384, 409, 992, 1034, 1044, 1046], "param1": [384, 1022], "param2": [384, 1022], "param3": 384, "postpon": [384, 386], "requisit": 384, "liner": [384, 827], "ipython": [384, 387, 388, 390, 1017, 1025], "session": [384, 388, 394, 399, 1008, 1014, 1025], "trainabl": 384, "trail": [384, 973], "overridden": [384, 396, 419, 542, 548, 616, 621, 624, 694, 1039, 1040, 1047], "n_features_in_": [384, 396, 430, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 627, 628, 629, 630, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 796, 797, 798, 801, 802, 812, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 1042, 1044, 1046], "slep010": [384, 1042], "duck": [384, 396, 1041], "check_x_i": [384, 391, 1035, 1039, 1040, 1045], "check_arrai": [384, 391, 468, 534, 899, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "templateclassifi": 384, "demo_param": 384, "myestim": 384, "subestim": 384, "my_extra_param": 384, "my_estim": [384, 410], "subestimator__c": 384, "subestimator__class_weight": 384, "subestimator__du": 384, "subestimator__fit_intercept": 384, "subestimator__intercept_sc": 384, "subestimator__l1_ratio": 384, "subestimator__max_it": 384, "subestimator__multi_class": 384, "subestimator__n_job": 384, "subestimator__penalti": 384, "subestimator__random_st": 384, "subestimator__solv": 384, "subestimator__tol": 384, "subestimator__verbos": 384, "subestimator__warm_start": 384, "__c": 384, "__class_weight": 384, "unpack": 384, "easiest": [384, 390, 410, 986], "__repr__": [384, 1010, 1040], "setattr": 384, "deepcopi": 384, "__sklearn_clone__": [384, 434, 1047], "frozen": 384, "frozentransform": 384, "fitted_transform": [384, 464], "__getattr__": 384, "_estimator_typ": [384, 396, 1036], "clustermixin": [384, 1048], "is_classifi": [384, 396], "programmat": [384, 499, 1040], "_get_tag": [384, 1042], "allow_nan": [384, 920, 922, 1047], "array_api_support": [384, 405], "binary_onli": [384, 1041, 1042], "multioutput_onli": 384, "no_valid": 384, "non_determinist": [384, 1045], "primari": [384, 396, 414, 515, 996, 1014], "_safe_split": 384, "preserves_dtyp": 384, "poor_scor": 384, "requires_fit": 384, "requires_positive_x": [384, 1041, 1046], "requires_i": [384, 1042], "requires_positive_i": 384, "_skip_test": 384, "_xfail_check": 384, "check_nam": 384, "xfail": [384, 390], "skiptestwarn": 384, "x_type": 384, "2darrai": 384, "signifi": [384, 409, 581, 809, 994], "1dlabel": 384, "2dlabel": 384, "_more_tag": 384, "mymultioutputestim": 384, "ridgeregress": 384, "idiosyncrat": 384, "onetoonefeaturemixin": [384, 433], "classnameprefixfeaturesoutmixin": [384, 433, 1046], "auto_wrap_output_kei": 384, "mytransform": 384, "__init_subclass__": 384, "invok": [384, 531, 537, 539, 545, 546, 567, 569, 570, 822, 898, 1043, 1048], "estimator_html_repr": [384, 410, 1042, 1043, 1044, 1045, 1048], "_doc_link_modul": 384, "_doc_link_templ": 384, "_doc_link_url_param_gener": 384, "estimator_modul": 384, "ownership": 384, "pep8": [384, 386, 390], "indent": [384, 955], "nsampl": [384, 796, 797], "statement": [384, 387, 390, 394, 396, 414, 1007, 1025], "flow": 384, "client": [384, 957], "corollari": 384, "foo": [384, 581, 993], "baz": [384, 581], "pyflak": 384, "asanyarrai": 384, "hadamard": 384, "choose_random_sampl": 384, "freestand": 384, "unmodifi": [384, 396], "random_state_": [384, 536, 627, 850, 1045], "gaussiannois": 384, "quasi": [384, 858, 859, 985], "assert_allclos": 384, "rtol": [384, 841, 842, 846], "atol": [384, 672, 674, 841, 842, 846], "checklist": 385, "unclaim": 385, "workflow": [385, 386, 395, 413], "markdown": 385, "saniti": [385, 865, 989, 1031, 1032], "outdat": 385, "diff": [385, 989], "valgrind": 385, "platform": [385, 394, 396, 397, 403, 1009, 1014, 1036, 1039, 1040, 1042, 1044, 1045], "x86_64": [385, 399], "yep": 385, "gperftool": 385, "debugg": [385, 390], "gprof": 385, "callgrind": 385, "kcachegrind": 385, "warm": [385, 396, 531, 537, 543, 545, 546, 610, 653, 659, 666, 667, 668, 676, 677, 678, 985, 1010, 1041, 1043, 1045], "homebrew": [385, 399], "freebsd": 385, "rrrcn": 386, "pep101": 386, "build_tool": 386, "blocker": 386, "mileston": 386, "maint_tool": 386, "sort_whats_new": 386, "whats_miss": 386, "fixm": [386, 396], "feedstock": 386, "recip": [386, 986, 1014], "yaml": 386, "whats_new": [386, 390], "v0": [386, 471, 472, 478, 512, 588, 589, 591, 798, 812, 860, 863, 1032, 1039, 1040, 1041], "freez": [386, 399, 403, 1010, 1014, 1039], "0rc1": 386, "__version__": 386, "draft": [386, 397], "rebas": 386, "bugfix": [386, 1031, 1045], "backport": [386, 391, 1038], "maint": 386, "enh": 386, "blindli": 386, "invit": 386, "cherri": 386, "shortlog": 386, "f2": [386, 990], "sed": [386, 1031], "front": [386, 1038], "rc1": 386, "suffix": [386, 399, 824, 989, 1041], "brows": 386, "3a": 386, "22wheel": 386, "pyproject": 386, "toml": 386, "oldest": [386, 496], "abi": 386, "acronym": 386, "deliveri": 386, "whl": 386, "22publish": 386, "went": [386, 989], "bot": [386, 994, 1045], "sync": 386, "testpypi": 386, "tarbal": [386, 1046], "wheelhouse_upload": 386, "twine": 386, "rrr": 386, "symlink": 386, "latestst": 386, "tmp": 386, "ln": [386, 985, 993, 999], "versionwarn": 386, "secur": [386, 396, 1009, 1010, 1014, 1027], "twitter": 386, "linkedin": 386, "authorship": 386, "permalink": 386, "_hist_gradient_boost": 386, "_iter": 386, "pickl": [386, 396, 403, 417, 588, 589, 591, 841, 842, 1009, 1010, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1047], "checker": [386, 821], "type_check": 386, "test_enable_hist_gradient_boost": 386, "enable_hist_gradient_boost": [386, 1040], "enable_my_experimental_featur": 386, "indefinit": 386, "incentiv": 386, "workabl": 387, "stackoverflow": [387, 390, 394, 1013], "blogpost": 387, "mcve": [387, 394], "my_data": 387, "with_mean": [387, 881, 892, 999, 1039, 1044], "default_scor": 387, "other_scor": 387, "scrollbar": 387, "tripl": 387, "fenc": 387, "qualifi": 387, "a674e682c281": 387, "lda_featur": 387, "lda_model": 387, "n_topic": [387, 536, 1038], "minimalist": [387, 417, 1013], "continuous_featur": 387, "positive_featur": 387, "invest": [388, 1014], "idiom": 388, "crunch": 388, "performancetip": 388, "reimplement": [388, 396, 1037, 1041], "spottabl": 388, "amen": [388, 419, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 978], "cpp": 388, "engag": [388, 397], "tent": 388, "somewher": [388, 989, 1025], "prun": 388, "14496": [388, 1040], "682": 388, "ncall": 388, "tottim": 388, "percal": 388, "cumtim": 388, "lineno": 388, "_nls_subproblem": 388, "1263": 388, "_po": 388, "_initialize_nmf": 388, "_spars": 388, "_neg": 388, "461": 388, "hotspot": 388, "16159": [388, 1042], "840": 388, "2833": 388, "653": [388, 611, 614, 625], "_dotbla": 388, "651": 388, "1397": 388, "2780": 388, "064": [388, 997], "1542": 388, "2734": 388, "fromnumer": 388, "1185": 388, "lapack_lit": 388, "dgesdd": 388, "rewrit": [388, 1005, 1024, 1031], "shallow": [388, 416, 561, 562, 916], "4x": [388, 1046], "line_profil": 388, "wire": [388, 534, 541], "profile_default": 388, "ipython_config": 388, "terminalipythonapp": 388, "interactiveshellapp": 388, "lprun": 388, "qtconsol": 388, "_nmf": 388, "73153": 388, "h_init": 388, "5863": 388, "nl": 388, "112141": 388, "2336": 388, "wtv": 388, "176": [388, 834, 990, 997], "16144": 388, "336": [388, 999], "wtw": 388, "638": 388, "1880": 388, "195133": 388, "305": 388, "grad": [388, 1014], "495761": 388, "777": 388, "proj_gradi": 388, "2449": 388, "1474": 388, "4474": 388, "inner_it": 388, "83833": 388, "hn": 388, "194239": 388, "191": [388, 990], "48858": 388, "150407": 388, "gradd": 388, "193": [388, 416, 715, 785, 1002], "515390": 388, "dqd": 388, "pin": 388, "memory_profil": [388, 399, 402], "memit": 388, "mprun": 388, "1e7": 388, "402344": 388, "standalon": [388, 658, 901, 1013], "bianp": 388, "reactiv": 388, "conda_prefix": 388, "pydebug": 388, "extra_cflag": 388, "dpy_debug": 388, "num_cor": 388, "dbg": 388, "fortun": [388, 416, 1025, 1044, 1045], "my_fil": 388, "callgrin": 388, "prof": 388, "encapsul": [389, 410, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 469, 470, 471, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 583, 588, 589, 590, 591, 592, 595, 596, 597, 598, 599, 600, 603, 610, 611, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 674, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912], "artist": [389, 438, 632, 698, 700, 701, 702, 804, 820, 915], "classmethod": [389, 438, 631, 632, 697, 698, 699, 700, 701, 702, 804, 820, 947], "line_": [389, 438, 698, 700, 701, 702, 804, 820], "gridspecfromsubplotspec": 389, "subplot_spec": 389, "get_subplotspec": 389, "ax_top_left": 389, "ax_top_right": 389, "ax_bottom": 389, "bounding_ax_": [389, 632], "lines_": [389, 632, 804, 820], "contours_": [389, 632], "advic": [390, 419, 622, 623], "forth": 390, "userscript": 390, "tampermonkei": 390, "greasemonkei": 390, "shortcut": [390, 419], "pr_number": 390, "navig": [390, 1033], "overlai": [390, 632], "codecov": 390, "test_sparsifi": 390, "pdb": 390, "ipdb": [390, 1025], "pdbcl": 390, "terminalpdb": 390, "lf": 390, "ff": 390, "tb": [390, 571, 572, 573, 574, 575, 576, 577, 578], "runxfail": 390, "werror": 390, "mailman": 390, "listinfo": 390, "crowd": [390, 397, 986, 1010, 1013], "imped": 390, "attent": [390, 607, 608, 1003], "minimal_reproduc": 390, "pytb": 390, "stdin": [390, 1025], "perman": 390, "25163598": 390, "issuenumb": 390, "1506": 390, "volunt": 390, "establish": [390, 394, 397, 979], "clarifi": [390, 397, 792], "regression_test": 390, "0008": 390, "patienc": [390, 396], "crop": [390, 1046], "manifest": [390, 986, 992], "fault": [390, 1039, 1041, 1043], "glibc": 390, "uniniti": 390, "trace": [390, 409, 422, 473, 475, 476, 479, 480, 481, 689, 693, 986, 1042], "supp": 390, "readm": [390, 417, 493], "my_test_script": 390, "mobil": 390, "deploy": [390, 1009, 1010, 1014], "scalewai": 390, "aw": 390, "graviton": 390, "workstat": 390, "qemu": 390, "docker": [390, 403, 1044, 1045], "multiarch": 390, "ppc64le": 390, "filesystem": [390, 399, 1044], "pushd": 390, "wget": 390, "aarch64": 390, "arm64v8": 390, "mount": 390, "pwd": 390, "reinit": 390, "bashrc": 390, "ephemer": 390, "evolv": [391, 1046], "as_float_arrai": 391, "column_or_1d": [391, 1042, 1046], "multitarget": 391, "multi_output": [391, 921], "safe_index": [391, 1041], "check_memori": [391, 396, 1038], "denot": [391, 396, 399, 407, 409, 413, 416, 588, 589, 591, 798, 804, 812, 820, 874, 875, 974, 978, 981, 985, 987, 989, 990, 999, 1002, 1016, 1048], "5488135": 391, "71518937": 391, "60276338": 391, "54488318": 391, "has_fit_paramet": 391, "randomized_range_find": [391, 1032, 1037], "arrayfunc": [391, 408], "cholesky_delet": 391, "min_po": 391, "least_angl": 391, "fast_logdet": 391, "safe_sparse_dot": [391, 1041], "weighted_mod": 391, "sample_without_replac": [391, 1037], "n_popul": [391, 958], "sparsefunc": [391, 408, 1044], "mean_variance_axi": [391, 1037, 1044], "sparsefuncs_fast": [391, 408], "inplace_csr_row_normalize_l1": 391, "inplace_csr_row_normalize_l2": 391, "inplace_csr_column_scal": 391, "sort_graph_by_row_valu": [391, 1046], "single_source_shortest_path_length": 391, "dijkstra": [391, 688, 986], "graph_shortest_path": [391, 1044], "all_estim": [391, 1041, 1042, 1046], "all_displai": [391, 1046], "all_funct": [391, 1046], "is_multilabel": [391, 1048], "dict_learn": [391, 531, 537, 546, 1032, 1039, 1041, 1044, 1045, 1047], "gen_batch": [391, 942], "safe_mask": 391, "safe_sqr": 391, "murmurhash3_32": 391, "murmurhash3_x86_32": [391, 954], "cryptograph": 391, "lookup": [391, 954, 1040], "bloom": [391, 954], "384616559": 391, "3910350737": 391, "murmurhash": 391, "graphical_lasso": [391, 471, 472, 1039, 1047], "kit": 394, "toolbox": [394, 1009, 1014], "multilay": [394, 987], "kera": [394, 1009], "forese": 394, "redesign": [394, 1031], "pystruct": [394, 1009], "ssvm": 394, "seqlearn": 394, "4143": 394, "meanwhil": [394, 1004], "pipegraph": 394, "squared_loss": [394, 1044], "undertak": 394, "slowli": [394, 396, 544, 938], "ordinarili": [394, 396], "corrobor": 394, "proof": [394, 416, 895, 1001], "road": 394, "bridg": [394, 986, 1009], "reproduct": [394, 985, 1013], "guidanc": [394, 419], "gitter": [394, 1007, 1038, 1039], "value_kei": [394, 916], "levenshtein": 394, "dna": [394, 628, 979], "rna": 394, "pain": 394, "suppli": [394, 409, 646, 921, 922, 992, 1014, 1035, 1037, 1039, 1044], "leven": 394, "acctcctagaag": 394, "acctactagaagtt": 394, "gaatattaggccga": 394, "lev_metr": 394, "multiprocess": [394, 396, 955, 957, 992, 1031, 1039, 1045], "exec": 394, "cuda": [394, 405], "reiniti": 394, "culprit": 394, "refus": [394, 891, 892], "forkserv": 394, "joblib_start_method": 394, "set_start_method": 394, "dozen": [395, 419], "leakag": [395, 396, 410, 1027], "disclos": 395, "entail": [395, 879, 881, 1003], "r_squar": 395, "searchcv": [395, 1046], "tacit": 396, "inconsist": [396, 403, 417, 508, 509, 576, 903, 906, 925, 995, 1004, 1027, 1031, 1036, 1037, 1038, 1039, 1041, 1044, 1046, 1047, 1048], "elsewher": [396, 462, 463, 471, 472, 478], "formal": [396, 397, 409, 416, 841, 842, 986, 989, 990, 993], "thereof": 396, "transduct": [396, 409, 896, 897, 1010], "position": 396, "serial": [396, 945, 1009, 1010, 1027, 1031, 1039, 1043, 1048], "unpickl": [396, 403, 576, 841, 842, 1037, 1043, 1047], "pep257": 396, "nuanc": 396, "flaw": [396, 416], "terminologi": [396, 1039], "est1": [396, 632], "est2": [396, 632], "exemplifi": 396, "_score": [396, 798, 812, 824, 989, 1031, 1044], "_loss": [396, 989], "divers": [396, 416], "abstract": [396, 414, 419, 618, 768, 1009, 1031], "descriptor": [396, 508, 509], "hoc": 396, "spectral_embed": [396, 986, 1032, 1035, 1037, 1039, 1041, 1044, 1045, 1046, 1048], "maxabs_scal": [396, 870, 1039], "astrai": 396, "readthedoc": 396, "entireti": 396, "shield": 396, "n_target": [396, 412, 482, 483, 484, 485, 524, 556, 611, 643, 646, 647, 650, 651, 652, 653, 654, 656, 657, 660, 661, 662, 663, 664, 665, 671, 672, 673, 674, 675, 681, 682, 683, 684, 685, 686, 687, 990, 1043, 1045, 1047], "synonym": [396, 843, 844, 845, 851, 852, 853], "themat": 396, "alphanumer": [396, 588, 589, 591], "statistician": [396, 881], "prescrib": 396, "baggingclassifi": [396, 400, 416, 556, 911, 979, 1034, 1037, 1038, 1039, 1042, 1046, 1047], "estimator__max_depth": [396, 978], "improp": [396, 1038], "pairwise_kernel": [396, 419, 452, 643, 764, 867, 987, 1031, 1038, 1048], "redundantli": 396, "distancemetr": [396, 415, 844, 992, 1039, 1043, 1044, 1045, 1048], "di": [396, 409, 414, 531, 537, 664, 685, 686, 894, 1035, 1044], "vectori": [396, 1041], "noun": 396, "venu": [396, 1013], "broadli": [396, 409], "consolid": [396, 397, 1031], "coo": [396, 553, 554, 692, 868, 917, 921, 922, 992, 1032, 1048], "lil": [396, 553, 554, 868, 917, 943, 992], "csgraph": [396, 1044], "absent": [396, 417, 753, 822], "densifi": [396, 658, 659, 666, 667, 668, 676, 677, 678, 901, 979, 1033], "lossili": 396, "unnorm": [396, 536, 986, 1037, 1038], "encompass": [396, 450, 456, 555, 556, 986], "is_regressor": 396, "get_n_split": [396, 799, 800, 803, 805, 806, 807, 808, 811, 813, 814, 815, 816, 817, 818, 819], "estimatorcv": [396, 1010], "loo": [396, 806, 1042], "router": [396, 400, 946, 947, 948, 949], "lexicograph": [396, 567, 787, 793, 843, 851], "type_of_target": [396, 868, 882, 990, 1045, 1046, 1048], "hashabl": [396, 869, 872, 1000], "labelencod": [396, 569, 875, 1000, 1031, 1039, 1046, 1047], "canonic": 396, "xxx": 396, "everywher": 396, "multilabelbinar": [396, 830, 865, 874, 990, 1016, 1034, 1036, 1037, 1039, 1040], "nonetheless": [396, 989], "wherein": 396, "amber": 396, "return_cov": [396, 567, 568, 611, 861], "_idx": 396, "label1": 396, "label2": 396, "class_label": [396, 557, 561, 564, 658, 659, 666, 668, 674, 675, 676, 909, 911, 927, 1004], "bincount": [396, 413, 557, 561, 564, 658, 659, 666, 668, 674, 675, 676, 901, 903, 906, 909, 911, 926, 927, 1038], "rebalanc": 396, "compute_class_weight": [396, 1034, 1045], "check_cv": [396, 1036], "obei": [396, 987], "triangl": [396, 414, 443, 447, 459, 699, 987, 992], "concurr": [396, 417, 955, 1043, 1045], "unset": [396, 1039], "check_scor": 396, "uppercas": [396, 1044], "unavail": [396, 658, 659, 950, 1038, 1044], "deadlock": 397, "meritocrat": 397, "somebodi": 397, "unanim": 397, "emeritu": [397, 1007], "recant": 397, "outreach": 397, "brand": [397, 399], "social": [397, 409, 1014], "authorit": 397, "strateg": 397, "entiti": [397, 725, 755], "duti": 397, "resign": 397, "occasion": [397, 726, 1040], "escal": 397, "fallback": [397, 399, 829, 830, 989], "hereaft": 397, "lazi": [397, 417, 1003, 1035], "opinion": 397, "slep020": 397, "veto": 397, "appeal": 397, "revis": [397, 670], "slep000": 397, "insuffici": [398, 988, 1024], "afraid": 399, "64bit": [399, 1031], "miniconda": 399, "administr": 399, "dnf": 399, "pacman": 399, "raspberri": 399, "polar": [399, 402, 433, 442, 443, 445, 447, 449, 464, 468, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 561, 562, 566, 567, 568, 569, 570, 581, 582, 583, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 688, 689, 692, 845, 850, 853, 857, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 899, 1025, 1048], "pyarrow": [399, 402], "lock": [399, 402, 955, 957], "py3": 399, "apk": 399, "bind": [399, 1009, 1031, 1038, 1039], "pkgsrc": 399, "py39": 399, "intelex": [399, 1009], "oned": 399, "sklearnex": 399, "plugin": 399, "appdata": 399, "usernam": 399, "windowsapp": 399, "oserror": [399, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498], "errno": 399, "pythonsoftwarefound": 399, "7_qbz5n2kfra8p0": 399, "localcach": 399, "python37": 399, "data_nam": 399, "australian": 399, "data_vers": 399, "lift": 399, "regedit": 399, "menu": 399, "hkey_local_machin": 399, "currentcontrolset": 399, "longpathsen": 399, "broken": [399, 413, 599, 600, 635, 720, 917, 989, 1005, 1034, 1038, 1039, 1040, 1042, 1045], "unsupport": [400, 403, 493, 1039, 1044], "set_": 400, "_request": 400, "weighted_acc": 400, "sample_weigh": 400, "sel": [400, 418], "scoring_weight": 400, "fitting_weight": 400, "hasn": 400, "larscv": [400, 650, 665, 682, 683, 1038, 1044, 1048], "multitaskelasticnetcv": [400, 646, 647, 652, 660, 662, 663, 681, 985, 1034, 1041, 1042, 1044, 1048], "multitasklassocv": [400, 661, 662, 1034, 1041, 1042, 1044, 1048], "multioutputclassifi": [400, 787, 830, 832, 834, 989, 1038, 1040, 1041, 1042, 1043, 1047], "regressorchain": [400, 832, 834, 1039, 1042, 1046], "ridgeclassifiercv": [400, 673, 674, 787, 989, 990, 1039, 1041, 1042, 1044, 1045], "retrain": [403, 1010, 1047], "inconsistentversionwarn": [403, 1047], "simplefilt": 403, "model_from_prevision_vers": 403, "original_sklearn_vers": [403, 576], "untrust": 403, "malici": 403, "inadvis": 403, "immut": 403, "snapshot": [403, 559, 560, 1010], "portabl": [403, 1009], "alex": [403, 417, 1004, 1031, 1034, 1039, 1041, 1042, 1043, 1045, 1046, 1047], "gaynor": 403, "sio": 403, "get_untrusted_typ": 403, "unknown_typ": 403, "exchang": [403, 1013], "markup": 403, "pmml": [403, 1009], "onnx": [403, 1009, 1010], "xml": 403, "sklearn2pmml": [403, 1009], "affero": 403, "gplv3": 403, "datastructur": [405, 1039, 1043], "namespac": 405, "array_api": 405, "x_np": 405, "y_np": 405, "x_cu": 405, "y_cu": 405, "array_api_dispatch": [405, 468, 899], "_estimator_with_converted_arrai": 405, "transfer": [405, 985, 1010], "_array_api": 405, "cupy_to_ndarrai": 405, "lda_np": 405, "torch": 405, "x_torch": 405, "y_torch": 405, "power_iteration_norm": [405, 541, 544, 937, 938, 1045], "kernelcenter": [405, 999, 1041, 1045, 1047, 1048], "array_api_compat": 405, "metal": 405, "shader": 405, "m2": 405, "chip": [405, 1014], "77764": 405, "pytorch_enable_mps_fallback": 405, "submatrix": [406, 424, 451, 453], "unusu": [406, 995, 999, 1039], "submatric": 406, "bipartit": [406, 453, 511, 994], "subgraph": 406, "a_n": 406, "lceil": [406, 995], "log_2": [406, 563, 995], "rceil": [406, 995], "bmatrix": [406, 981], "u_2": [406, 981], "u_": [406, 482, 483, 484], "n_column": [406, 451, 453], "inderjit": [406, 453], "spectralbiclust": [406, 453, 1033, 1037, 1038, 1042], "blockwis": [406, 985], "bistochast": [406, 451], "l_": [406, 611, 652, 740, 989], "k_": [406, 419, 616, 619, 621, 624, 773, 981, 999], "u_1": [406, 981], "v_1": 406, "v_2": 406, "v_": [406, 417], "kluger": [406, 451, 513], "yuval": [406, 451], "microarrai": [406, 451, 513, 628, 979], "cap": [406, 409, 754, 989, 1040], "hochreit": [406, 719], "hungarian": [406, 719], "bodenhof": [406, 719], "fabia": [406, 719], "acquisit": [406, 719], "murphi": [407, 643, 982], "discriminatori": 407, "wilk": 407, "tricki": [407, 986], "logit": [407, 419, 658, 659, 985], "f_i": 407, "train_set": 407, "test_set": 407, "disjoint": [407, 409, 410, 437, 704, 730, 754, 756, 986], "platt": [407, 437, 903, 904, 906, 907, 1004], "_i": [407, 416, 980, 985, 989, 993, 1004], "_j": [407, 980], "f_j": [407, 997], "meteorologi": 407, "climatologi": 407, "precipit": 407, "wea": 407, "650": 407, "1990a": 407, "menon": 407, "ak": [407, 1045, 1046], "jiang": [407, 1035, 1042], "xj": 407, "vembu": 407, "ohno": 407, "machado": [407, 722], "703": [407, 513], "710": 407, "kull": [407, 989], "silva": [407, 688, 986, 1042, 1044], "filho": 407, "flach": [407, 989], "mario": [407, 1035, 1037, 1045, 1046, 1047], "w\u00fcthrich": 407, "merz": 407, "actuari": 407, "refurbish": 408, "rough": [408, 995, 1018], "uniti": 408, "lipschitz": [408, 1001], "mod": 408, "usecas": 409, "mu_j": 409, "coher": 409, "elong": 409, "lloyd": [409, 443, 447, 449, 459, 1045, 1046], "distant": [409, 692, 709, 992], "sergei": [409, 1033, 1037, 1038, 1039, 1040, 1041], "vassilvitskii": [409, 447, 460], "eighteenth": 409, "siam": [409, 413, 452, 460, 462, 535, 541], "industri": [409, 1009], "predetermin": [409, 986], "scullei": 409, "19th": 409, "exemplar": [409, 440, 454, 1024], "sent": [409, 830], "leftarrow": [409, 993, 1003], "foral": [409, 419, 613], "neq": [409, 989, 991, 999], "notin": 409, "hill": [409, 448, 461, 1041], "climb": [409, 448, 461], "maxima": 409, "x_j": [409, 419, 614, 615, 619, 622, 623, 625, 980, 981, 985, 992, 1004, 1005], "dictat": 409, "solvabl": 409, "stella": [409, 452, 462], "jianbo": [409, 452, 462, 691], "shi": [409, 452, 462, 691], "anil": [409, 452, 462], "daml": [409, 452, 462], "victor": [409, 452, 462, 1038, 1041], "minden": [409, 452, 462], "lex": [409, 452, 462], "ying": [409, 452, 462, 1045], "adjac": [409, 414, 452, 462, 585, 586, 635, 691, 695, 943, 986, 992, 1024], "adjacency_matrix": 409, "ulrik": [409, 452, 462, 691], "von": [409, 452, 462, 691, 1009, 1038, 1039], "luxburg": [409, 452, 462, 691], "jitendra": [409, 452, 462, 691], "malik": [409, 452, 462, 691], "walk": [409, 415, 1034], "marina": 409, "meila": 409, "ng": [409, 414, 691, 847, 993, 995, 1042], "jordan": [409, 414, 691, 796, 1041, 1042, 1045, 1046], "yair": [409, 691], "precondit": [409, 452, 462, 695, 1005, 1047], "zhuzhunashvili": [409, 462], "forbid": [409, 416], "macroscop": 409, "occupi": [409, 989], "manhattan": [409, 441, 445, 450, 457, 699, 761, 770, 777, 778, 779, 848, 987, 992, 1035, 1040, 1047], "bisecting_strategi": [409, 443], "largest_clust": [409, 443], "biggest_inertia": [409, 443], "biggest": [409, 412, 414, 443], "steinbach": [409, 1046], "karypi": 409, "vipin": 409, "egin": 409, "minnesota": 409, "june": [409, 986, 1037, 1047], "weblog": 409, "abirami": 409, "mayilvahanan": 409, "emerg": [409, 1014], "ijet": 409, "jian": 409, "xinyu": 409, "gou": 409, "baod": 409, "hebei": 409, "knee": 409, "triangular": [409, 463, 611, 986], "whichev": [409, 416, 446, 544, 561, 562, 633, 650, 654, 656, 664, 682, 683, 697], "conjunct": [409, 594, 804, 820, 822, 823, 824, 825, 828, 956, 979, 985, 1046], "extract_dbscan": 409, "radius_neighbors_graph": [409, 420, 444, 843, 844, 845, 847, 849, 851, 852, 853, 854, 992, 1035, 1040, 1043], "ester": [409, 420, 444], "kriegel": [409, 420, 444, 450, 457, 847, 995], "sander": [409, 420, 444, 446, 450, 457, 847, 995, 1040, 1041], "xu": [409, 412, 420, 444, 1003, 1044, 1045, 1048], "portland": [409, 420, 444], "aaai": [409, 420, 444, 836, 991], "revisit": [409, 420, 444], "schubert": [409, 420, 444, 450, 1035, 1036, 1039, 1040, 1042, 1043, 1044, 1045], "tod": [409, 420, 444], "lj2017": 409, "d_c": 409, "x_p": [409, 985], "d_m": 409, "x_q": 409, "g_": 409, "varepsilon": [409, 1003, 1004], "cm2013": 409, "mst": 409, "minimum_cluster_s": 409, "campello": [409, 446], "moulavi": [409, 446], "pei": [409, 1038], "tseng": 409, "cao": 409, "motoda": 409, "pakdd": 409, "lectur": [409, 644, 981, 1008], "7819": [409, 1038], "berlin": [409, 414, 535, 696, 725, 755, 989], "heidelberg": [409, 414, 535, 696, 725, 755, 989], "mcinn": [409, 1037, 1038, 1039, 1041, 1042, 1047], "heali": 409, "icdmw": 409, "max_ep": [409, 450, 455, 457], "nearbi": [409, 992], "cluster_hierarchy_": [409, 450], "planar": 409, "peripheri": 409, "wall": 409, "ankerst": [409, 450, 457], "mihael": [409, 450, 457], "marku": [409, 450, 457, 1039, 1041, 1042, 1043], "breunig": [409, 450, 457, 847, 995], "han": [409, 442, 450, 457, 1031, 1039, 1040, 1044], "j\u00f6rg": [409, 450, 457, 1039], "sigmod": [409, 450, 457, 847, 995], "cft": 409, "lossi": 409, "subclust": [409, 442], "till": [409, 442, 787, 989], "temporarili": [409, 1036], "farthest": 409, "brc": [409, 442], "tian": [409, 442, 1036, 1037, 1038], "raghu": [409, 442], "ramakrishnan": [409, 442], "maron": [409, 442], "livni": [409, 442], "sfu": [409, 442], "coursecentr": [409, 442], "459": [409, 442], "zhang96": [409, 442], "roberto": [409, 442], "perdisci": [409, 442], "jbirch": [409, 442], "java": [409, 442, 1009], "satisfi": [409, 650, 654, 699, 717, 735, 736, 841, 842], "labels_pr": [409, 704, 705, 714, 715, 717, 730, 735, 736, 754, 756, 785, 794], "unadjust": [409, 989, 1043], "swap": [409, 414, 716, 735, 968, 969, 1031], "ri": [409, 705, 785], "c_2": [409, 986], "unord": [409, 416, 999], "esp": [409, 1031], "hubert": [409, 705, 715, 785], "arabi": [409, 705, 715, 785], "steinlei": [409, 705], "psycholog": [409, 705, 716], "agreement": [409, 704, 716, 754, 756, 794, 989], "22504": 409, "10526": 409, "u_i": [409, 482, 483, 484, 754], "v_j": [409, 754, 994], "veb2009": 409, "a_i": 409, "b_j": 409, "yat2016": 409, "average_method": [409, 704, 756, 1039], "vinh": [409, 704], "veb2010": 409, "strehl": 409, "joydeep": 409, "583": [409, 1023], "1162": 409, "153244303321897735": 409, "epp": [409, 704], "bailei": [409, 704], "26th": [409, 725, 755, 989], "1553374": 409, "1553511": 409, "9781605585161": 409, "csail": [409, 666, 667, 676, 838], "volume11": 409, "vinh10a": 409, "algesheim": 409, "tesson": 409, "30750": 409, "1038": 409, "srep30750": 409, "rosenberg": [409, 717, 736, 794], "hirschberg": [409, 717, 736, 794], "b2011": 409, "homogeneity_completeness_v_measur": [409, 1040], "n_k": [409, 550], "n_c": [409, 659], "julia": [409, 717, 736, 794], "media": [409, 1014], "hila": 409, "becker": [409, 1014, 1034, 1043], "fowlkes_mallows_scor": [409, 989, 1037, 1039], "fmi": [409, 730], "tp": [409, 712, 718, 730, 781, 782, 783, 786, 913, 989], "fp": [409, 712, 718, 730, 781, 782, 783, 786, 989], "fn": [409, 712, 718, 730, 781, 782, 783, 786, 989, 990], "47140": 409, "fowkl": [409, 730], "1983": [409, 730, 881], "tandfonlin": 409, "01621459": 409, "10478008": 409, "kmeans_model": 409, "1987": [409, 607, 608, 791, 792], "calinski_harabasz_scor": [409, 1039], "n_e": 409, "mathrm": [409, 411, 414, 418, 985, 1005], "b_k": 409, "w_k": [409, 985], "c_q": 409, "n_q": 409, "c_e": 409, "cali\u0144ski": 409, "1974": [409, 417, 710], "dendrit": [409, 710], "davies_bouldin_scor": [409, 1039], "bould": 409, "c_i": [409, 992], "c_j": [409, 994], "s_i": [409, 985, 999], "diamet": 409, "nonneg": [409, 414, 453, 538, 540, 547, 878], "s_j": 409, "max_": [409, 989], "1979": [409, 724, 768], "halkidi": 409, "batistaki": 409, "yanni": 409, "vazirgianni": 409, "michali": 409, "contingency_matrix": [409, 754, 1039], "pair_confusion_matrix": [409, 1043], "permit": [410, 467, 588, 589, 591, 798, 801, 802, 812, 823, 862, 863, 989, 990, 991, 1037], "clf__c": 410, "pca1": [410, 425], "svm1": 410, "77484909e": 410, "07058917e": 410, "pca2": [410, 425], "svm2": 410, "raw_target_regr": 410, "bypass": [410, 599, 646, 652, 909, 910, 911, 912, 1047], "check_invers": [410, 465, 865, 999, 1039, 1045, 1046], "linear_pca": 410, "make_union": [410, 860, 1034, 1038], "unreli": 410, "citi": [410, 417, 466, 1025], "london": [410, 417, 466], "sallisaw": [410, 466], "bow": 410, "moveabl": 410, "feast": 410, "grape": 410, "wrath": 410, "expert_r": 410, "user_r": 410, "city_categori": 410, "title_bow": 410, "city_london": 410, "city_pari": 410, "city_sallisaw": 410, "507": 410, "ignored_new_col": 410, "shrunk_covari": [411, 1048], "sigma_": [411, 644, 645, 1044, 1048], "365": [411, 473], "wiesel": [411, 422, 475], "eldar": [411, 422, 475], "hero": [411, 422, 475], "5016": [411, 422, 475], "5029": [411, 422, 475], "_k": [411, 983, 985], "glasso": [411, 478], "biostatist": [411, 478], "uncommon": [411, 658, 901, 1004], "downweight": [411, 536], "driessen": [411, 469, 474, 995], "fastmcd": [411, 469, 474], "raw_location_": [411, 469, 474], "raw_covariance_": [411, 469, 474], "multidimension": [412, 688, 690, 692, 694, 986, 992], "plsw2a": 412, "u_k": [412, 414], "v_k": [412, 414, 531, 537, 545, 546], "x_k": [412, 414, 983, 992], "y_k": [412, 999], "xi_k": 412, "omega_k": [412, 983], "gamma_k": 412, "delta_k": 412, "nipal": [412, 483, 484], "xp": [412, 876], "x_rotations_": [412, 482, 483, 484], "y_rotations_": [412, 482, 483, 484], "ty": 412, "x_weights_": [412, 482, 483, 484, 485], "y_weights_": [412, 482, 483, 484, 485], "yv": 412, "tx": 412, "pls1": [412, 484], "pls2": [412, 484], "tx_k": [412, 983], "ty_k": 412, "ja": [412, 1038], "wegelin": 412, "methodolog": [413, 1013], "academ": [413, 1014], "commerci": [413, 1014], "flowchart": [413, 1018], "f1_macro": [413, 989, 1035], "custom_cv_2fold": 413, "custom_cv": 413, "9333": 413, "scorer1_nam": 413, "scorer2_nam": 413, "return_indic": [413, 824, 1047], "precision_macro": [413, 1020], "recall_macro": [413, 989], "test_precision_macro": 413, "test_recall_macro": 413, "prec_macro": 413, "rec_macro": 413, "test_prec_macro": 413, "test_rec_macro": 413, "train_prec_macro": 413, "train_rec_macro": 413, "undistinguish": 413, "devic": [413, 582, 1009], "kf": [413, 803], "12883823": 413, "rkf": [413, 813], "weigh": [413, 1038], "caveat": [413, 419], "part3": 413, "spector": 413, "submodel": 413, "kohavi": 413, "jnt": 413, "bharat": [413, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "rao": [413, 1043, 1046], "fung": 413, "rosal": 413, "witten": 413, "leavepout": [413, 806, 1020], "ss": 413, "gkf": 413, "sgkf": [413, 816], "suboptim": [413, 700, 702, 781, 788, 992, 1039, 1047], "leavepgroupsout": [413, 800, 1020, 1037], "n_group": [413, 807, 1020, 1037], "lpgo": [413, 807], "gss": [413, 800], "withheld": 413, "predefinedsplit": [413, 1020, 1035], "test_fold": [413, 811], "train_indx": 413, "test_indx": 413, "autocorrel": 413, "superset": [413, 819, 989], "surplu": 413, "tscv": [413, 819], "inbuilt": 413, "some_integ": 413, "n_cv": [413, 437], "isotropi": 414, "alik": [414, 987], "halko": [414, 535, 541, 544, 937, 938], "szlam": [414, 937, 938], "disadvantag": [414, 419, 985, 986, 993, 1003, 1004, 1005], "parsimoni": [414, 999], "jen09": 414, "mrl09": 414, "ell_1": [414, 985], "underset": [414, 985, 992, 1005], "operatornam": [414, 740, 985, 989, 1005], "fro": [414, 538, 540, 547, 693, 985], "gentli": 414, "spirit": 414, "mairal": [414, 531, 537], "bach": [414, 531, 536, 537, 538, 658, 985], "ponc": [414, 531, 537], "sapiro": [414, 531, 537], "jenatton": 414, "obozinski": 414, "scholkopf1997": 414, "bakir2003": 414, "smola": [414, 417, 535, 867, 999, 1004], "klau": [414, 535, 867], "eigendecompos": 414, "eigensolv": [414, 452, 462, 535, 544, 695, 986], "eigsh": [414, 535, 1037, 1038], "lehoucq": 414, "sorensen": 414, "lsa": [414, 544, 1033], "synonymi": 414, "polysemi": 414, "lsi": 414, "sigma_k": [414, 983], "columnwis": 414, "sublinear": [414, 590, 591], "use_idf": [414, 417, 590, 591, 1025], "textual": [414, 1005, 1040], "man": [414, 590, 768, 836, 840, 987, 989, 991], "prabhakar": 414, "raghavan": [414, 590, 836, 840, 987, 989, 991], "hinrich": 414, "sch\u00fctze": [414, 590, 987, 989, 991], "transform_method": 414, "split_cod": 414, "dictionarylearn": [414, 537, 539, 540, 542, 543, 544, 545, 546, 1032, 1036, 1038, 1041, 1044, 1045, 1046, 1047], "overcomplet": 414, "mammalian": 414, "cortex": 414, "inpaint": 414, "h_i": [414, 994], "psi": 414, "sim": [414, 1023], "wh_i": 414, "ww": 414, "superflu": 414, "psi_1": 414, "psi_2": 414, "psi_n": 414, "superimpos": 414, "plug": [414, 985, 1014, 1025], "wh": [414, 538, 540, 547], "hoyer": [414, 1034], "nndsvd": [414, 538, 540, 547, 1040, 1043], "nndsvdar": [414, 538, 540, 547, 1040], "elementwis": [414, 538, 540, 547], "_featur": [414, 538, 540, 547], "kl": [414, 986, 1039], "itakura": [414, 538, 540, 547, 1038], "saito": [414, 538, 540, 547, 1038], "w_new": 414, "forget_factor": [414, 538], "lee": [414, 1031, 1032, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1046], "seung": 414, "boutsidi": 414, "gallopoulo": 414, "cichocki": [414, 538, 540, 547], "phan": 414, "fevott": [414, 538, 540, 547], "idier": [414, 538, 540, 547], "lefevr": [414, 538], "corpora": 414, "hoffman": [414, 536, 1036, 1043], "unshad": 414, "beta_k": 414, "eta": [414, 536, 676, 677, 678, 993, 1003, 1036], "topic_word_prior": [414, 536], "theta_d": 414, "doc_topic_prior": [414, 536], "z_": 414, "w_": [414, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 985, 989, 991, 994], "elbo": 414, "overset": [414, 996], "e_": 414, "blei": [414, 536, 796], "wang": [414, 536, 679, 689, 693, 725, 755, 985, 986, 989, 1034, 1036, 1037, 1038, 1039, 1043, 1046, 1047], "paislei": [414, 536], "kaiser": [414, 532], "talli": 415, "disproportion": 415, "41075698": 415, "41076071": 415, "rho_k": 415, "unsmooth": 415, "scott": [415, 846, 1031, 1032, 1037, 1039, 1040, 1041, 1046, 1047], "silvermann": 415, "propto": [415, 991], "2h": 415, "angular": [415, 692, 763], "contin": [415, 714, 999], "semin": 416, "friedman2001": 416, "lightgbm": [416, 561, 562, 1009, 1040, 1047], "8965": 416, "grower": [416, 561, 562], "missing": [416, 627, 628, 630, 1040], "fisher1958": 416, "loan": [416, 534, 985, 1014], "mayer2022": 416, "mayer": [416, 1043, 1045], "bourassa": 416, "hoesli": 416, "scognamiglio": 416, "valuat": 416, "tianqi": 416, "guestrin": 416, "ke": [416, 1042, 1043], "boostingdecis": 416, "nr": 416, "f_m": 416, "h_m": 416, "f_": [416, 635, 989], "l_m": 416, "taylor": [416, 1039, 1041, 1042, 1045], "g_i": [416, 649], "sum_m": 416, "softmax": [416, 561, 658, 659, 985, 992, 993], "superior": 416, "ineffici": [416, 443, 574, 829, 830, 992, 994], "htf": 416, "r2007": 416, "friedman2002": 416, "1189": 416, "1232": 416, "b1998": 416, "decoupl": [416, 991], "cancel": [416, 417, 762], "b2001": 416, "bear": [416, 1009], "geurt": [416, 555, 556, 557, 558, 565, 566, 911, 912], "ernst": [416, 557, 558, 565, 566, 911, 912], "wehenkel": [416, 557, 558, 565, 566, 911, 912], "l2014": 416, "lieg": 416, "flavour": 416, "b1999": 416, "b1996": 416, "h1998": 416, "lg2012": 416, "bootstrap_featur": [416, 555, 556], "844": [416, 555, 556], "w2": 416, "w3": 416, "lr__c": 416, "rf__n_estim": 416, "w1992": 416, "knr": 416, "stack_method": [416, 567], "286": 416, "225": 416, "126": 416, "stack_method_": [416, 567, 568], "final_layer_rfr": 416, "final_layer_gbr": 416, "final_lay": 416, "multi_layer_regressor": 416, "wolpert": [416, 567, 568], "241": [416, 567, 568], "freund": [416, 553, 554], "fs1995": 416, "w_1": [416, 985, 993], "w_2": [416, 985, 993], "w_n": 416, "w_i": [416, 980, 989], "reappli": 416, "zzrh2009": 416, "d1997": 416, "dubai": 417, "francisco": [417, 1001], "movi": [417, 1017], "movie_entri": 417, "thriller": [417, 872], "drama": 417, "000e": 417, "003e": 417, "011e": 417, "974e": 417, "unseen_featur": [417, 581], "speech": [417, 989], "chunker": 417, "pos_window": 417, "pos_vector": 417, "1x6": 417, "part_of_speech": 417, "token_featur": 417, "isupp": 417, "uppercase_initi": 417, "all_uppercas": 417, "raw_x": [417, 582], "pos_tagg": 417, "murmurhash3": [417, 582, 589, 954], "weinberg": 417, "modulo": [417, 1042], "kilian": [417, 1046, 1047], "anirban": 417, "dasgupta": [417, 446, 895, 1001], "langford": [417, 688, 986], "josh": [417, 1038], "attenberg": 417, "punctuat": [417, 588, 589, 591], "diminish": 417, "4x9": 417, "build_analyz": [417, 588, 589, 591, 1041], "interrog": 417, "bigram_vector": 417, "cool": [417, 1031], "feature_index": 417, "him": 417, "constru": 417, "nqy18": 417, "smooth_idf": [417, 590, 591], "_n": [417, 989], "textbook": [417, 590], "6x3": 417, "81940995": 417, "57320793": 417, "47330339": 417, "88089948": 417, "58149261": 417, "81355169": 417, "term1": 417, "term2": 417, "term3": 417, "0986": [417, 865], "573": 417, "8473": 417, "8515": [417, 1038], "5243": 417, "85151335": 417, "52433293": 417, "55422893": 417, "83236428": 417, "63035731": 417, "77630514": 417, "idf_": [417, 590, 591, 1039], "western": 417, "europ": [417, 999], "koi8": 417, "russian": 417, "unicodedecodeerror": [417, 588, 589, 591], "told": 417, "troubleshoot": [417, 1007], "chardet": 417, "chardetect": 417, "damag": 417, "sloppili": 417, "ftfy": 417, "mish": 417, "mash": 417, "text1": 417, "sei": 417, "mir": 417, "gegr": 417, "xc3": 417, "xbc": 417, "x9ft": 417, "mein": 417, "sauerkraut": 417, "text2": 417, "holdselig": 417, "sind": 417, "dein": 417, "ger": 417, "xfcche": 417, "text3": 417, "xff": 417, "xfea": 417, "x00u": 417, "x00f": 417, "x00": 417, "x00l": 417, "xfc": 417, "x00g": 417, "x00e": 417, "x00n": 417, "x00d": 417, "x00a": 417, "x00h": 417, "x00r": 417, "x00z": 417, "x00i": 417, "x00b": 417, "x00c": 417, "x00t": 417, "x00o": 417, "spolski": 417, "nnmf": [417, 1026, 1027, 1031], "phrase": 417, "misspel": 417, "rescu": 417, "resili": 417, "wprd": 417, "ngram_vector": 417, "char_wb": [417, 588, 589, 591], "rd": 417, "wo": 417, "wp": [417, 657, 671], "char": [417, 588, 589, 591, 1031], "jumpi": 417, "fox": [417, 1047], "1x4": 417, "umpi": 417, "1x5": 417, "mpy": 417, "fo": 417, "paragraph": [417, 503, 1025], "barrier": 417, "hv": 417, "4x10": 417, "discrep": [417, 1025, 1035], "4x1048576": 417, "collid": 417, "ingest": 417, "spend": 417, "my_token": 417, "lowercas": [417, 425, 442, 443, 445, 447, 449, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 588, 589, 591, 639, 640, 641, 642, 688, 689, 692, 845, 850, 853, 857, 862, 867, 893, 894, 1044], "lucen": 417, "build_preprocessor": [417, 588, 589, 591, 1041], "whitespac": 417, "fanci": 417, "lemmat": 417, "nltk": [417, 1008, 1009], "word_token": 417, "wordnetlemmat": 417, "lemmatoken": 417, "wnl": 417, "british": 417, "spell": 417, "to_british": 417, "1or": 417, "bt": 417, "1er": 417, "ing": 417, "ation": 417, "1z": 417, "ogu": 417, "og": 417, "customvector": 417, "asian": 417, "one_imag": [417, 584], "fake": 417, "assert_array_equ": 417, "patchextractor": [417, 1047], "five_imag": 417, "variancethreshold": [418, 866, 979, 1034, 1041, 1044, 1047], "selectfdr": [418, 592, 596, 598, 599, 600, 606, 1035, 1037, 1038, 1047], "selectfw": [418, 592, 595, 596, 599, 600, 606, 1047], "genericunivariateselect": [418, 595, 596, 598, 599, 600, 602, 1045, 1047, 1048], "r_regress": [418, 606, 1044, 1045, 1048], "nonparametr": [418, 419, 607, 608], "bewar": 418, "importance_gett": [418, 593, 594, 597, 1043], "unimport": 418, "lsvc": 418, "baraniuk": 418, "isr": 418, "ist": 418, "utl": 418, "aguiar": 418, "cs_note": 418, "ferri": [418, 989], "versatil": [419, 1004, 1014], "optima": 419, "markov": [419, 611, 994, 1009, 1031], "nuisanc": 419, "one_vs_on": [419, 610, 990], "ingredi": 419, "duv2014": 419, "theta_l": 419, "x_bound": [419, 617], "operand": 419, "k1__": 419, "k2__": 419, "constant_valu": [419, 613, 617], "constant_value_bound": [419, 611, 613, 617], "k1__k1__constant_valu": 419, "value_typ": [419, 617], "n_element": [419, 617], "k2__length_scal": 419, "k1": [419, 621, 624], "k1__k1": 419, "k1__k1__constant_value_bound": 419, "k1__k2": 419, "k1__k2__length_scale_bound": 419, "k2": [419, 621, 624], "k2__length_scale_bound": 419, "69314718": [419, 612, 999], "30258509": 419, "interoper": [419, 1007, 1010, 1027], "pairwisekernel": 419, "_valu": [419, 613], "_level": [419, 625], "k_1": [419, 621, 624], "k_2": [419, 621, 624], "__add__": [419, 624], "__mul___": 419, "__pow__": [419, 616], "2l": [419, 622], "bigg": [419, 619], "bessel": [419, 619], "rightarrow": [419, 619, 993], "quad": [419, 992, 1003], "tfrac": 419, "3l": 419, "pp84": 419, "x_d": [419, 614], "inhomogen": [419, 614], "expon": [419, 616, 676, 677, 678, 810, 858, 859, 876, 978], "carl": [419, 610, 611, 614, 619, 622], "rasmussen": [419, 610, 611, 614, 619, 622], "duvenaud": [419, 622, 623], "cookbook": [419, 622, 623], "minkowski": [420, 444, 450, 457, 688, 699, 777, 778, 779, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 992, 1031, 1034, 1045, 1046, 1047], "metric_param": [420, 444, 446, 450, 457, 688, 692, 843, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 1035, 1038, 1045], "leaf_siz": [420, 444, 446, 450, 457, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853], "kd_tree": [420, 444, 446, 450, 457, 688, 689, 843, 844, 845, 846, 847, 849, 851, 852, 853, 992, 1044, 1048], "balltre": [420, 444, 446, 450, 457, 688, 689, 699, 843, 844, 845, 846, 847, 849, 851, 852, 853, 986, 1031, 1033, 1035, 1039, 1044, 1047, 1048], "ckdtree": [420, 444, 1033], "inhibit": [420, 444], "core_sampl": 420, "n_core_sampl": [420, 444], "attract": [420, 444, 983, 992, 1009], "fun": [421, 533, 1014], "logcosh": [421, 533], "fun_arg": [421, 533], "w_init": [421, 533], "whiten_solv": [421, 533, 1046], "return_x_mean": 421, "compute_sourc": 421, "return_n_it": [421, 454, 459, 478, 545, 546, 646, 647, 652, 653, 660, 661, 662, 663, 681, 682, 683, 684, 685, 686, 687, 694, 1045], "cube": [421, 533], "my_g": [421, 533], "x_mean": 421, "AS": 421, "fortran": [421, 541, 646, 647, 652, 653, 660, 661, 662, 663, 665, 681, 684, 685, 686, 921, 922, 1031, 1034, 1035, 1039], "hyvarinen": [421, 533], "oja": [421, 533], "430": [421, 533], "shrunk_cov": [422, 479, 481], "eq": [422, 475, 721, 722, 723], "subobject": [423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 796, 797, 798, 801, 802, 812, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912], "row_ind": [424, 451, 453], "intp": [424, 451, 453], "col_ind": [424, 451, 453], "get_submatrix": [424, 451, 453], "pca0": 425, "_n_features_out": 425, "class_name0": [425, 442, 443, 445, 447, 449, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 639, 640, 641, 642, 688, 689, 692, 845, 850, 853, 857, 867, 893, 894], "class_name1": [425, 442, 443, 445, 447, 449, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 639, 640, 641, 642, 688, 689, 692, 845, 850, 853, 857, 867, 893, 894], "class_name2": [425, 442, 443, 445, 447, 449, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 639, 640, 641, 642, 688, 689, 692, 845, 850, 853, 857, 867, 893, 894], "feature_names_out": [425, 430, 442, 443, 445, 447, 449, 464, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 566, 567, 568, 569, 570, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 688, 689, 692, 845, 850, 853, 857, 860, 861, 864, 865, 866, 867, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 893, 894, 1045], "harsh": [426, 437, 469, 549, 550, 551, 553, 555, 557, 559, 561, 564, 567, 569, 610, 658, 666, 668, 674, 675, 676, 829, 830, 831, 832, 836, 837, 838, 839, 840, 843, 848, 851, 858, 896, 897, 901, 903, 906, 909, 911, 1041, 1043, 1046], "n_samples_fit": [432, 465, 482, 483, 484, 554, 556, 558, 560, 562, 565, 568, 570, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 688, 834, 835, 843, 844, 845, 847, 849, 851, 852, 853, 859, 902, 904, 907, 910, 912], "uniform_averag": [432, 465, 482, 483, 484, 554, 556, 558, 560, 562, 565, 568, 570, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 721, 722, 727, 744, 745, 747, 749, 750, 752, 784, 789, 790, 834, 835, 844, 852, 859, 902, 904, 907, 910, 912, 989, 1040], "n_features_new": [433, 442, 445, 532, 534, 536, 537, 539, 542, 543, 549, 567, 569, 570, 582, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 628, 630, 635, 638, 639, 640, 641, 642, 850, 857, 864, 865, 866, 867, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 893, 894], "base_clf": 437, "calibrated_clf": 437, "927": 437, "x_calib": 437, "y_calib": 437, "prob_tru": [438, 439], "prob_pr": [438, 439], "ref_lin": 438, "alexandru": 439, "22nd": 439, "convergence_it": [440, 454], "hardcod": [440, 454, 1039], "affinity_matrix_": [440, 452, 691], "cluster_center_indic": [440, 454], "compute_full_tre": [441, 445, 1035], "compute_dist": [441, 445, 1043], "inferior": [441, 445, 1042], "n_leaves_": [441, 445], "n_connected_components_": [441, 445, 1040], "branching_factor": 442, "compute_label": [442, 449], "promot": [442, 708, 1009, 1042, 1044, 1048], "redistribut": 442, "overwritten": [442, 532, 533, 534, 536, 541, 548, 607, 608, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 672, 674, 679, 681, 682, 683, 684, 686, 957, 959, 1044], "root_": 442, "_cfnode": 442, "cftree": 442, "dummy_leaf_": 442, "subcluster_labels_": 442, "centroids_": [442, 446, 848], "copy_x": [443, 447, 459, 535, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 672, 674, 679, 681, 682, 683, 684, 685, 1033, 1039, 1040], "k_init": [443, 459], "sse": 443, "bisect_mean": 443, "denser": 444, "pooling_func": [445, 1039], "xred": [445, 1047], "cluster_selection_epsilon": 446, "max_cluster_s": 446, "cluster_selection_method": 446, "eom": 446, "store_cent": [446, 1048], "kdtree": [446, 450, 457, 688, 689, 841, 843, 844, 845, 846, 847, 849, 851, 852, 853, 1033, 1035, 1039, 1043, 1044, 1047, 1048], "neighbour": [446, 462, 692, 994], "medoid": 446, "overwrit": [446, 496, 631, 1016, 1031, 1042, 1047], "medoids_": 446, "zimek": 446, "chaudhuri": 446, "jaskowiak": 446, "malzer": 446, "baum": 446, "hybrid": [446, 649, 1009], "dbscan_clust": 446, "border": [446, 1041], "unclust": 446, "socg2006": 447, "min_bin_freq": [448, 461], "cluster_al": [448, 461], "get_bin_se": 448, "orphan": [448, 461, 1031], "reassignment_ratio": 449, "eec": [449, 641], "tuft": 449, "dscullei": 449, "fastkmean": 449, "55102041": 449, "48979592": 449, "06896552": 449, "set_partial_fit_request": [449, 534, 538, 666, 667, 668, 676, 677, 678, 829, 830, 833, 834, 836, 837, 838, 839, 840, 858, 881], "cluster_method": 450, "predecessor_correct": [450, 456], "unprocess": [450, 588, 589, 591], "heap": 450, "braycurti": [450, 457, 699, 777, 778, 779, 992], "canberra": [450, 457, 699, 777, 778, 779, 992], "chebyshev": [450, 457, 699, 777, 778, 779, 992], "dice": [450, 457, 699, 777, 778, 779, 992], "kulsinski": [450, 457, 699, 777, 778, 779], "rogerstanimoto": [450, 457, 699, 777, 778, 779, 992], "russellrao": [450, 457, 699, 777, 778, 779, 992], "seuclidean": [450, 457, 699, 777, 778, 779, 848, 992, 1039, 1042, 1043], "sokalmichen": [450, 457, 699, 777, 778, 779, 992], "sokalsneath": [450, 457, 699, 777, 778, 779, 992], "yule": [450, 457, 777, 778, 779], "manhattan_dist": [450, 457, 688, 761, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 1031, 1041, 1046, 1047], "minkowski_dist": [450, 457, 688, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855], "l_p": [450, 457, 688, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855], "upward": [450, 456], "successor": [450, 456, 1005, 1009], "predecessor_": [450, 457], "erich": [450, 1035, 1036, 1039, 1040, 1042, 1043, 1044, 1045], "gertz": 450, "lernen": 450, "wissen": 450, "daten": [450, 1039, 1040], "analysen": 450, "lwda": 450, "n_best": 451, "n_svd_vec": [451, 453], "mini_batch": [451, 453], "n_row_clust": [451, 453, 513], "n_column_clust": [451, 453, 513], "ncv": [451, 453], "n_oversampl": [451, 453, 541, 544, 938, 1045], "kernel_param": [452, 535, 639, 643], "precomputed_nearest_neighbor": [452, 691], "eigen": [452, 549, 673, 691, 695, 983, 1037, 1040], "dist_matrix": 452, "541": [452, 462], "csc_matrix": [452, 557, 558, 563, 564, 565, 566, 878, 909, 910, 911, 912, 979, 999, 1005, 1036], "best_n_it": 459, "n_local_tri": 460, "n_seed": 461, "multigrid": 462, "eigendecomposit": [462, 673, 691, 695, 867, 981], "multiscal": 462, "preliminari": 462, "heapq": 463, "topolog": [463, 1009], "n_connected_compon": 463, "n_leav": [463, 909, 910, 911, 912], "transformers_": [464, 1048], "remaining_column": 464, "named_transformers_": 464, "sparse_output_": [464, 551], "output_indices_": [464, 1044], "datatyp": [464, 466, 1038, 1041], "norm1": 464, "norm2": 464, "text_preprocess": 464, "num_preprocess": 464, "x_t": [464, 627, 860], "sum_n_compon": [464, 860], "notimplementederror": [465, 472, 553, 554, 555, 556, 567, 568, 569, 570, 593, 594, 602, 627, 671, 673, 675, 860, 888, 898, 1038, 1048], "y_hat": 465, "90453403": 466, "50755672": 466, "30151134": 466, "print_changed_onli": [468, 899, 1040, 1042, 1043], "pairwise_dist_chunk_s": [468, 899], "enable_cython_pairwise_dist": [468, 899], "skip_parameter_valid": [468, 899, 1047], "cache_s": [468, 899, 903, 904, 905, 906, 907, 1004], "get_config": [468, 780, 899, 956, 1046], "offset_": [469, 563, 677, 847, 905, 1039], "raw_support_": [469, 474], "dist_": [469, 474], "true_cov": [469, 471, 472], "7411": [469, 474, 1037], "2535": [469, 474], "3053": [469, 474], "0813": [469, 474], "correct_covari": [469, 474], "rvd": [469, 474], "covariance_correct": [469, 474], "comp_cov": [469, 470, 471, 472, 473, 474, 475, 476], "get_precis": [469, 470, 471, 472, 473, 474, 475, 476, 532, 534, 541], "getter": [469, 470, 471, 472, 473, 474, 475, 476, 593, 594, 597], "is_inli": [469, 563, 847], "reweight_covari": [469, 474], "rvdriessen": [469, 474], "location_reweight": [469, 474], "covariance_reweight": [469, 474], "support_reweight": [469, 474], "negative_mahal_dist": 469, "7569": 470, "2818": 470, "3928": 470, "0622": [470, 476], "0193": [470, 476], "enet_tol": [471, 472, 478, 1036], "220446049250313e": [471, 472, 478, 650, 651, 654, 655, 656, 682, 683], "graphlasso": [471, 1036, 1039], "costs_": [471, 472, 1047], "dual_gap": [471, 472, 478, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684], "return_cost": [471, 472, 478], "364": [471, 472, 1032], "038": [471, 472, 858], "n_refin": 472, "graphlassocv": [472, 1033, 1039], "dualiti": [472, 985], "block_siz": [473, 479, 480, 1035], "4406": 473, "1616": 473, "0595": 473, "0075": [473, 541], "rouseeuw1984": 474, "butlerdavi": 474, "butler": [474, 1034, 1042, 1043], "davi": [474, 724, 989, 1035], "jhun": 474, "1385": 474, "7533": [475, 1038], "2763": 475, "3964": 475, "7833": 475, "2431": 475, "3889": 475, "0195": 475, "7387": 476, "2536": 476, "4110": 476, "cov_init": [478, 1047], "graph_lasso": [478, 1039], "x_loadings_": [482, 483, 484], "y_loadings_": [482, 483, 484], "plssvd": [482, 483, 1012, 1027, 1043, 1045], "x_c": [482, 483, 485, 996], "y_c": [482, 483, 485], "y_reconstruct": [482, 483, 484], "x_scores_": [484, 1043], "y_scores_": [484, 1043], "y_transform": 485, "data_hom": [486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 1038, 1047], "zero_bas": [487, 508, 509], "query_id": [487, 508, 509], "grok": 487, "qid": [487, 508, 509, 1032, 1037], "download_if_miss": [488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 1038], "stopword": [489, 1025], "target_column": [489, 490, 496], "494021": 492, "slice_": [493, 494, 1046], "195": [493, 494], "unrestrict": 493, "2914": 494, "5748": 494, "pathlik": [496, 1047], "n_retri": [496, 1045], "read_csv_kwarg": [496, 1047], "timeout": [496, 955, 1045], "412": [496, 985], "ith": [496, 773, 777, 837, 858, 859, 874, 875], "1592": 498, "1212": 498, "1624": 498, "data_filenam": [501, 505], "target_filenam": [501, 505], "container_path": 503, "load_cont": 503, "allowed_extens": 503, "container_fold": 503, "category_1_fold": 503, "file_1": 503, "file_2": 503, "file_42": 503, "category_2_fold": 503, "file_43": 503, "file_44": 503, "image_nam": 506, "first_img_data": 507, "backup": [508, 1031], "instantan": 508, "mycach": 508, "get_data": 508, "mysvmlightfil": 508, "xn": 509, "yn": [509, 990, 991], "q1": 509, "qn": 509, "yi": [509, 991, 1035, 1039, 1040, 1043], "qi": [509, 1043], "triplet": 509, "minval": [511, 513], "maxval": [511, 513], "seventh": [511, 1001], "269": 511, "274": 511, "return_cent": [512, 1042], "basri": 513, "gerstein": 513, "716": 513, "flip_i": 515, "interdepend": 515, "polytop": 515, "guyon": [515, 593, 594, 989], "madelon": 515, "1991": [516, 517, 518], "12000": 520, "effective_rank": [521, 524], "tail_strength": [521, 524], "bell": [521, 1039, 1041, 1043, 1044], "fat": [521, 524], "crawl": [521, 930], "return_ind": 523, "4967": 524, "1382": 524, "6476": 524, "2341": 524, "4694": 524, "5425": 524, "579": 524, "7674": [524, 1038], "4017": 524, "data_transpos": [526, 1045, 1047], "n_dim": [527, 529, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 1048], "norm_diag": 527, "sparse_format": [527, 1048], "make_spd_matrix": 527, "celeux": 528, "el": [528, 1044, 1046, 1047], "anbari": 528, "marin": 528, "frequentist": 528, "marsland": 530, "vuw": 530, "nz": 530, "marslast": 530, "ch6": 530, "code_init": [531, 545], "dict_init": [531, 537, 545, 546], "callback": [531, 537, 539, 545, 546, 850, 955, 1010, 1047], "split_sign": [531, 537, 542], "transform_max_it": [531, 537, 538, 542, 1041], "_fro": [531, 537, 545, 546, 646, 647, 652, 660, 661, 662, 681], "lasso_cd": [531, 537, 542, 548], "error_": [531, 543], "minibatchsparsepca": [531, 533, 537, 540, 542, 543, 545, 546, 1031, 1032, 1042, 1044, 1045, 1046, 1047, 1048], "sierra": [531, 537], "icml09": [531, 537], "x_hat": [531, 537], "noise_variance_init": 532, "quartimax": [532, 1043], "loglike_": 532, "barber": 532, "bishop": [532, 534, 541, 740, 796, 985, 990, 1004], "get_covari": [532, 534, 541], "unmixing_matrix": 533, "whitening_": 533, "kpca": [533, 534, 535, 1026, 1027, 1031], "set_inverse_transform_request": [533, 581, 868, 881], "unsaf": 534, "singular_values_": [534, 541, 544, 1038], "var_": [534, 839, 881, 1044], "miketip": [534, 541], "mppca": [534, 541], "n_samples_seen_": [534, 870, 871, 881, 1039], "batch_size_": 534, "ross": [534, 607, 608, 1005, 1045, 1046], "vision": [534, 757, 758, 981, 985, 987, 1005, 1009, 1014, 1032], "toronto": [534, 644, 857], "dross": 534, "ivt": 534, "rosslimlinyang_ijcv": 534, "karhunen": 534, "loev": 534, "levi": [534, 1038], "lindenbaum": 534, "1371": 534, "1374": 534, "abstain": 534, "holub": 534, "opportun": [534, 1003], "golub": [534, 839, 881], "x_spars": [534, 960, 963], "sigma2": [534, 541], "x_origin": [534, 539, 541, 543, 544, 630, 893, 894], "check_input": [534, 548, 646, 647, 652, 660, 661, 662, 681, 687, 909, 910, 911, 912, 1039], "remove_zero_eig": [535, 1033, 1040], "x_fit_": [535, 643], "eigenvalues_": [535, 1044], "eigenvectors_": [535, 1044], "dual_coef_": [535, 643, 903, 904, 905, 906, 907, 1004, 1035], "x_transformed_fit_": 535, "gamma_": [535, 1047], "nathan": [535, 1039, 1043, 1046], "gunnar": [535, 938], "tropp": [535, 541], "288": [535, 541], "vladimir": [535, 938, 985, 1041, 1045], "rokhlin": [535, 541, 938], "tygert": [535, 541, 938], "learning_decai": 536, "evaluate_everi": 536, "perp_tol": 536, "mean_change_tol": 536, "max_doc_update_it": 536, "kappa": [536, 716], "tau_0": 536, "pseudocount": [536, 1039], "exp_dirichlet_component_": 536, "n_batch_iter_": 536, "bound_": 536, "doc_topic_prior_": 536, "topic_word_prior_": 536, "franci": [536, 658, 985, 1037], "onlineldavb": 536, "chong": 536, "00360392": 536, "25499205": 536, "0036211": 536, "64236448": 536, "09541846": 536, "15297572": 536, "00362644": 536, "44412786": 536, "39568399": 536, "003586": 536, "vb": 536, "sub_sampl": 536, "doc_topic_distr": [536, 1038], "fresh_restart": 538, "fresh_restarts_max_it": 538, "_w": [538, 540, 547], "_ratio": [538, 540, 547], "_h": [538, 540, 547], "fresh": [538, 1010, 1041], "reconstruction_err_": [538, 540], "andrzej": [538, 540, 547], "anh": [538, 540, 547], "ieic": [538, 540, 547], "708": [538, 540, 547, 749], "721": [538, 540, 547], "waspa": 538, "ridge_alpha": [539, 543, 1038], "500x500": 541, "lu": [541, 544, 937, 938, 1037, 1038, 1039, 1040, 1047], "n_samples_": 541, "royal": [541, 627, 877, 889, 1003], "methodologi": [541, 874, 979, 989, 1014], "622": 541, "9924": 541, "30061": 541, "54980": 541, "00755": 541, "99244": 541, "ascontiguousarrai": 541, "sparse_encod": [542, 650, 651, 652, 653, 654, 655, 656, 663, 664, 665, 682, 683, 684, 685, 686, 1031, 1038, 1039, 1041, 1045], "u_init": 543, "v_init": 543, "9666": 543, "oversampl": [544, 1031], "indeterminaci": 544, "x_dens": 544, "0157": 544, "0512": 544, "0499": 544, "0479": 544, "0453": 544, "2102": 544, "2410": 544, "5981": 544, "5420": 544, "4486": 544, "3288": 544, "method_max_it": [545, 546, 1041], "dict_learning_onlin": [545, 1032, 1041, 1044, 1045, 1048], "return_cod": 546, "update_h": 547, "_n_compon": 547, "hal": [547, 658, 757, 758, 987], "copy_cov": 548, "orthogonal_mp": [548, 664, 665, 686, 985], "sum_k": [549, 1005], "prior_k": 549, "c_k": 549, "priors_": [549, 550], "scalings_": [549, 550], "xbar_": 549, "reg_param": 550, "scaling_": 550, "colinear": 550, "rotations_": 550, "n_classes_": [551, 553, 555, 557, 559, 564, 610, 829, 830, 909, 911, 1032, 1041, 1043], "class_prior_": [551, 839], "n_outputs_": [551, 552, 557, 558, 564, 565, 566, 858, 859, 909, 910, 911, 912], "constant_": 552, "dummy_regr": 552, "base_estimator_": [553, 554, 555, 556, 557, 558, 563, 564, 565, 566, 610, 898, 1046], "dok": [553, 554, 868, 1044], "staged_decision_funct": [553, 559, 561], "staged_scor": [553, 554], "7972": 554, "9771": 554, "estimators_samples_": [555, 556, 557, 558, 563, 564, 565, 566, 1037, 1039, 1042, 1048], "estimators_features_": [555, 556, 563], "oob_decision_function_": [555, 557, 564], "oob_prediction_": [556, 558, 565], "8720": [556, 1039], "min_weight_fraction_leaf": [557, 558, 559, 560, 564, 565, 566, 909, 910, 911, 912, 1005, 1034, 1037, 1038], "min_impurity_decreas": [557, 558, 559, 560, 564, 565, 566, 909, 910, 911, 912, 1005, 1038], "shannon": [557, 564, 909, 911, 986, 1005], "unlimit": [557, 558, 559, 560, 564, 565, 566, 909, 910, 911, 912], "n_t": [557, 558, 559, 560, 564, 565, 566, 909, 910, 911, 912], "n_t_r": [557, 558, 559, 560, 564, 565, 566, 909, 910, 911, 912], "right_impur": [557, 558, 559, 560, 564, 565, 566, 909, 910, 911, 912], "n_t_l": [557, 558, 559, 560, 564, 565, 566, 909, 910, 911, 912], "left_impur": [557, 558, 559, 560, 564, 565, 566, 909, 910, 911, 912], "balanced_subsampl": [557, 564, 1039], "subtre": [557, 558, 559, 560, 564, 565, 909, 910, 911, 912, 1005], "extratreeclassifi": [557, 566, 912, 990, 1035, 1040, 1041, 1042, 1044, 1045, 1046, 1048], "unprun": [557, 558, 564, 565, 909, 910, 911, 912], "x_leav": [557, 558, 559, 560, 564, 565, 566, 909, 910, 911, 912], "n_nodes_ptr": [557, 558, 564, 565, 566], "friedman_ms": [558, 559, 560, 565, 910, 912, 1005, 1047, 1048], "extratreeregressor": [558, 563, 566, 911, 995, 1040, 1041, 1042, 1044, 1045, 1046, 1048], "2727": 558, "dummyestim": [559, 560], "eras": [559, 560, 646, 652, 658, 660, 662, 666, 667, 668, 676, 677, 678, 858, 859], "n_trees_per_iteration_": [559, 560, 561, 562], "oob_scores_": [559, 560, 1047], "init_": [559, 560], "max_features_": [559, 560, 597, 909, 910, 911, 912, 1045], "_fit_stag": [559, 560], "crossentropi": 561, "deepest": [561, 562, 1042], "__dataframe__": [561, 562], "no_interact": [561, 562, 1046], "do_early_stopping_": [561, 562], "validation_score_": [561, 562], "is_categorical_": [561, 562], "n_trees_per_iter": 561, "max_samples_": 563, "fei": [563, 995], "ting": [563, 995, 1039, 1040], "ming": [563, 995, 1035, 1039, 1040, 1041, 1045], "zhou": [563, 639, 897, 995, 1039, 1047], "zhi": [563, 995], "hua": [563, 995], "icdm": [563, 995], "eighth": [563, 995], "tkdd": 563, "n_left": 563, "32987858": 565, "n_out": 566, "one_hot_encoder_": 566, "moosmann": 566, "trigg": 566, "juri": 566, "random_tre": 566, "x_sparse_embed": 566, "randomtreesembedding_": 566, "final_estimator_": [567, 568], "named_estimators_": [567, 568, 569, 570, 1039, 1041], "named_estim": [567, 568, 569, 570], "parameter_nam": [567, 568, 569, 570], "new_valu": [567, 568, 569, 570], "linearsvr": [568, 907, 1004, 1035, 1037, 1042, 1047], "flatten_transform": [569, 1038], "le_": 569, "eclf1": 569, "array_equ": [569, 1038], "eclf2": 569, "eclf3": 569, "maj": 569, "probabilities_or_label": 569, "n_regressor": 570, "r1": 570, "r3": 570, "er": 570, "with_traceback": [571, 572, 573, 574, 575, 576, 577, 578], "__traceback__": [571, 572, 573, 574, 575, 576, 577, 578], "current_sklearn_vers": 576, "repr": [577, 1042, 1043, 1045], "linter": 579, "flake8": 579, "spam": [581, 709, 740, 836, 989, 991, 1014], "feature_names_": 581, "xa": 581, "dict_typ": 581, "1048576": [582, 589], "non_neg": [582, 1038], "eleph": 582, "bird": [582, 718, 753, 989], "patch_height": [583, 584, 587], "patch_width": [583, 584, 587], "img_height": 583, "img_width": 583, "pe": 583, "pe_tran": 583, "263758": 583, "image_height": [583, 584, 587], "image_width": [583, 584, 587], "n_channel": [583, 584, 587], "n_patch": [583, 584, 587], "272214": 584, "243": 584, "215": 584, "n_z": 585, "return_a": [585, 586, 955, 1034], "_coo": [585, 586], "image_s": 587, "strip_acc": [588, 589, 591], "nfkd": [588, 589, 591, 1041], "unicodedata": [588, 589, 591], "regexp": [588, 589, 591], "min_n": [588, 589, 591, 1031], "max_n": [588, 589, 591, 1031], "fixed_vocabulary_": [588, 591], "stop_words_": [588, 591], "delattr": [588, 591, 1043], "vectorizer2": 588, "raw_docu": [588, 591], "get_stop_word": [588, 589, 591], "x_inv": [588, 591], "con": 589, "yates2011": 590, "baeza": [590, 729, 1034], "yate": [590, 729], "ribeiro": [590, 729, 1044], "neto": [590, 729], "addison": [590, 729], "weslei": [590, 729], "mrs2008": 590, "tfid": 590, "22314355": 590, "51082562": 590, "91629073": 590, "_check_stop_list": 591, "pvalu": [592, 595, 596, 598, 599, 600, 826], "k_best": [592, 898, 1002, 1048], "fdr": 592, "fwe": 592, "iff": [592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 872], "retent": [592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603], "n_selected_featur": [592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603], "n_original_featur": [592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603], "attrgett": [593, 597], "barnhil": [593, 594], "vapnik": [593, 594], "422": [593, 594, 725, 755, 989], "n_subsets_of_featur": 594, "narrai": 594, "benjamini": [595, 1037, 1038], "hochberg": [595, 1037, 1038], "false_discovery_r": 595, "norm_ord": [597, 1038], "threshold_": [597, 1038], "3252": 597, "8345": 597, "4976": 597, "55249": 597, "half_cal": 597, "half_selector": 597, "partial_fit_param": [597, 829, 830, 833, 834], "unspecifi": [599, 600, 800, 986], "_get_support_mask": 601, "n_features_to_select_": 602, "variances_": 603, "weed": 604, "p_valu": [604, 605, 606], "f_statist": [605, 606], "force_finit": [606, 609, 727, 784, 989, 1045], "pearson": [606, 609, 1044], "discrete_featur": [607, 608], "nat": [607, 608, 704, 754, 756, 1045], "essenc": [607, 608, 742, 986, 989], "kraskov": [607, 608], "stogbauer": [607, 608], "grassberg": [607, 608], "phy": [607, 608], "kozachenko": [607, 608], "leonenko": [607, 608], "probl": [607, 608], "peredachi": [607, 608], "correlation_coeffici": 609, "fmin_l_bfgs_b": [610, 611], "max_iter_predict": 610, "copy_x_train": [610, 611], "one_vs_rest": [610, 990], "compoundkernel": [610, 1045], "obj_func": [610, 611], "initial_theta": [610, 611], "theta_opt": [610, 611], "func_min": [610, 611], "_posterior_mod": 610, "log_marginal_likelihood_value_": [610, 611], "9866": [610, 619, 622], "83548752": 610, "03228706": 610, "13222543": 610, "79064206": 610, "06525643": 610, "14410151": 610, "clone_kernel": [610, 611, 1041], "n_kernel_param": [610, 611], "log_likelihood_gradi": [610, 611], "x_train_": 611, "y_train_": 611, "3680": [611, 614, 625], "y_cov": 611, "n_samples_x": [611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 757, 758, 759, 760, 762, 763, 765, 766, 767, 768, 773, 774, 775, 776, 777, 778, 779, 780], "requires_vector_input": [612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "51292546": 612, "09861229": [612, 999], "n_samples_i": [612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 757, 758, 759, 760, 762, 763, 765, 766, 767, 768, 773, 774, 775, 776, 777, 778, 779, 780], "n_kernel": 612, "k_gradient": [612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625], "k_diag": [612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "hyperparameter_constant_valu": 613, "3696": 613, "606": [613, 831, 990], "hyperparameter_sigma_0": 614, "edward": [614, 619, 622, 1034, 1039, 1040, 1041, 1042, 1046], "hyperparameter_length_scal": [615, 619, 622, 623], "hyperparameter_period": 615, "0144": 615, "457": 615, "3894": 615, "3467": 615, "559": 616, "namedtupl": [617, 947, 1047], "maxsiz": 617, "mat\u00e9rn": 619, "appr": 619, "8513": 619, "0368": 619, "1117": 619, "8086": [619, 1038], "0693": 619, "1220": 619, "gamma_bound": 620, "pairwise_kernels_kwarg": 620, "additive_chi2": [620, 638, 764, 773], "pairwise_kernel_funct": [620, 643, 773], "hyperparameter_gamma": 620, "9733": [620, 623], "8880": 620, "05663": 620, "05532": 620, "8676": [620, 1038], "07073": 620, "06165": 620, "__mul__": 621, "8354": [622, 1038], "03228": 622, "1322": 622, "7906": [622, 649], "0652": 622, "1441": 622, "hyperparameter_alpha": 623, "8881": 623, "0566": 623, "05518": 623, "8678": 623, "0707": 623, "0614": 623, "hyperparameter_noise_level": 625, "initial_strategi": 627, "imputation_ord": [627, 1041], "skip_complet": 627, "max_valu": [627, 1042, 1043], "keep_empty_featur": [627, 628, 630, 979, 1046], "nullabl": [627, 628, 629, 630, 1042, 1046], "na": [627, 628, 629, 630, 768, 777, 919, 921, 922, 1041, 1042, 1045, 1046, 1047], "known_val": 627, "Nearness": 627, "arab": 627, "broadcast": 627, "missingind": [627, 628, 630, 979, 1039, 1040, 1041, 1045, 1047], "initial_imputer_": 627, "imputation_sequence_": 627, "feat_idx": 627, "neighbor_feat_idx": 627, "n_features_with_missing_": 627, "indicator_": [627, 628, 630], "knp": 627, "stef": [627, 979], "buuren": [627, 979], "karin": [627, 979], "groothui": [627, 979], "oudshoorn": [627, 979], "buck": 627, "1960": [627, 716], "306": 627, "imp_mean": [627, 630], "9584": [627, 1038], "nan_euclidean": [628, 761, 777], "_pairwise_cal": 628, "kwd": [628, 770, 773, 777, 780, 791, 792], "olga": [628, 979], "troyanskaya": [628, 979], "cantor": [628, 979], "gavin": [628, 979], "sherlock": [628, 979], "pat": [628, 979], "botstein": [628, 979], "russ": [628, 979], "altman": [628, 979], "bioinformat": [628, 979], "n_output_featur": 628, "error_on_new": 629, "features_": [629, 979], "n_missing_featur": 629, "x2_tr": 629, "n_features_with_miss": 629, "statistics_": 630, "n_features_missing_ind": 630, "x_imput": 630, "n_features_out": 630, "surface_": 631, "quadcontourset": 631, "quadmesh": 631, "feature_1": [631, 914], "feature_2": 631, "nicer": 631, "pd_result": 632, "target_idx": 632, "decil": [632, 1042], "is_categor": 632, "pdp": [632, 996, 1045], "nonexist": 632, "deciles_vlines_": 632, "vlines_": 632, "deciles_hlines_": 632, "bars_": 632, "heatmaps_": 632, "pdp_lim": 632, "ice_lines_kw": 632, "pd_line_kw": 632, "contour_kw": 632, "disp1": 632, "disp2": 632, "pdp_line_kw": 632, "bar_kw": 632, "heatmap_kw": 632, "seq": 633, "n_values_feature_j": 633, "bre": [634, 1005], "4666": 634, "2211": 634, "x_min_": 635, "x_max_": 635, "n_threshold": [635, 726, 781, 788], "stepwis": [635, 654, 655, 656, 682, 683, 985], "increasing_": 635, "isotonic_regress": [635, 1044], "secondari": [635, 1035], "leeuw": 635, "1977": 635, "nilotp": [635, 637], "chakravarti": [635, 637], "308": 635, "pava": 635, "hornik": 635, "mair": 635, "kruskal": [635, 690, 694, 986], "psychometrica": 635, "iso_reg": 635, "8628": 635, "7256": 635, "isotonicregression0": 635, "increasing_bool": 636, "fisher_transform": 636, "sample_step": 638, "sample_interv": 638, "sample_interval_": [638, 1047], "skewedchi2sampl": [638, 639, 640, 641, 981, 1038, 1045, 1046], "chi2_kernel": [638, 642, 757, 764, 987, 1032], "additive_chi2_kernel": [638, 758, 764, 981], "vedaldi": [638, 981], "zisserman": [638, 981, 989], "chi2sampl": 638, "9499": 638, "component_indices_": [639, 1044], "normalization_": [639, 981], "additivechi2sampl": [639, 640, 641, 642, 757, 758, 981, 1045, 1047], "kernel_metr": [639, 640, 641, 642], "seeger": [639, 981], "mahdavi": 639, "jin": [639, 1042, 1043], "data_transform": 639, "9987": 639, "fft": 640, "indexhash": 640, "bithash": 640, "indexhash_": 640, "bithash_": 640, "kitchen": [641, 981], "sink": [641, 981], "random_offset_": [641, 642], "random_weights_": [641, 642], "rahimi": [641, 981], "benjamin": [641, 1033, 1034, 1042, 1043, 1044, 1045, 1046, 1047], "recht": [641, 981], "berkelei": [641, 909, 910], "brecht": 641, "rah": 641, "rbf_featur": [641, 981], "skewed": [642, 1038], "secant": 642, "fuxin": 642, "catalin": 642, "ionescu": [642, 981, 1041], "cristian": 642, "sminchisescu": [642, 981], "chi2_featur": 642, "2c": [643, 652, 672, 673, 674, 675, 687, 981], "492": [643, 982, 1023], "493": [643, 901, 982], "alpha_1": [644, 645, 985], "alpha_2": [644, 645, 985], "lambda_1": [644, 645, 985], "lambda_2": [644, 645, 985], "threshold_lambda": 644, "x_offset_": [644, 645, 1043], "x_scale_": [644, 645, 1043], "mackai": [644, 645, 985], "ashra": 644, "salakhutdinov": [644, 850, 992], "utstat": 644, "rsalakhu": 644, "sta4273": 644, "lecture2": 644, "computed_scor": 645, "appendix": [645, 676, 985, 999], "wipf": [645, 985], "nagarajan": [645, 985], "2_2": [646, 647, 652, 653, 654, 655, 656, 660, 661, 662, 663, 672, 681, 682, 683, 684], "glmnet": [646, 647, 1031], "sparse_coef_": [646, 652, 660, 662, 1031], "dual_gap_": [646, 647, 652, 653, 660, 661, 662, 663, 1044], "max_j": [646, 652], "w_j": [646, 652, 989, 1003], "ext": 646, "83816048": 646, "55968825": 646, "451": 646, "coef_init": [646, 647, 652, 653, 660, 661, 662, 663, 666, 667, 668, 676, 677, 678, 681, 684], "mono": [646, 647, 652, 653, 660, 661, 662, 663, 681, 684], "_21": [646, 647, 652, 653, 660, 661, 662, 663, 681, 684], "sum_j": [646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 985, 989, 994], "alpha_min": [646, 647, 650, 652, 653, 654, 656, 660, 661, 662, 663, 681, 682, 683, 684], "alpha_max": [646, 647, 652, 653, 660, 661, 662, 663, 681, 684], "ndim": [646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 921, 922], "multitaskelasticnet": [646, 647, 652, 661, 662, 663, 681, 985, 1031, 1038, 1039, 1042, 1044], "l1_ratio_": [647, 659, 661], "n_l1_ratio": [647, 659, 661, 1034], "199": [647, 790, 1004], "unpen": [648, 669, 680, 985], "raphson": [648, 669, 680], "g_j": [648, 669, 680], "896": 648, "483": 648, "795": 648, "pg_i": 649, "scale_": [649, 870, 871, 879, 881, 891, 999, 1036], "outliers_": 649, "elvezio": [649, 985], "ronchetti": [649, 985], "concomit": [649, 985], "owen": [649, 1040, 1041], "statweb": [649, 682, 683], "hhu": [649, 1040], "284": 649, "806": 649, "7200": 649, "4923": 649, "1698": 649, "0106": 649, "9221": 649, "0226": 649, "fit_path": [650, 654, 655, 656, 682, 683], "coef_path_": [650, 651, 654, 655, 985], "active_": [650, 651, 654, 655], "1111": [650, 656], "max_n_alpha": [651, 655], "n_cv_alpha": [651, 655], "cv_alpha": [651, 655], "lassolar": [651, 652, 653, 655, 656, 663, 664, 665, 682, 683, 684, 985, 1023, 1031, 1032, 1034, 1038, 1041, 1042, 1044], "9996": 651, "2961": 651, "3996": 651, "2_f": 652, "_11": 652, "4951": 653, "2_fro": [653, 662, 663, 684], "coef_path": [653, 663, 684], "46874778": [653, 663, 684], "2159048": [653, 663, 684], "4425765": [653, 663, 684], "23689075": [653, 663, 684], "coef_path_lar": [653, 663, 684], "coef_path_continu": [653, 663, 684], "interp1d": [653, 663, 684], "46915237": [653, 663, 684], "23668876": [653, 663, 684], "congruenc": [654, 655, 656, 682, 683], "fragil": 655, "3972": 655, "2222": 656, "rank_": 657, "singular_": 657, "maxent": [658, 659, 985], "primal": [658, 659, 677, 901, 902, 1003, 1004], "synthetic_feature_weight": [658, 659], "ciyou": 658, "byrd": 658, "jorg": [658, 1034, 1043, 1045], "noced": 658, "lui": [658, 1032, 1034, 1035, 1039], "iem": 658, "lbfgsb": 658, "schmidt": [658, 985, 1034], "le": [658, 869, 980, 985, 992, 1000, 1002, 1039, 1043, 1044], "roux": [658, 985, 1002], "00860051": 658, "defazio": [658, 985], "lacost": [658, 985], "hsiang": [658, 1035], "fu": [658, 1035], "fang": [658, 1038, 1039], "lan": [658, 1046, 1047], "chih": [658, 1036], "jen": [658, 1039], "maxent_du": 658, "cs_": 659, "l1_ratios_": 659, "coefs_paths_": [659, 1041], "coefs_path": 659, "n_l1_ratios_": 659, "score_param": [659, 1048], "w_ij": 660, "eps_": [660, 662], "45663524": 660, "45612256": 660, "0872422": 660, "fro_2": [661, 663], "52875032": 661, "46958558": 661, "00166409": 661, "60809415": 662, "94592424": 662, "41888636": 662, "87382323": 662, "9994": 663, "5713": 663, "7971": 663, "9015": [663, 1039], "n_nonzero_coefs_": [664, 665], "orthogonal_mp_gram": [664, 665, 685, 1045], "mallat": [664, 685, 686, 985], "3397": [664, 685, 686], "3415": [664, 685, 686], "papier": [664, 685, 686], "mallatpursuit93": [664, 685, 686], "rubinstein": [664, 685, 686], "zibulevski": [664, 685, 686], "elad": [664, 685, 686], "technion": [664, 685, 686, 985], "ronrubin": [664, 685, 686, 985], "ksvd": [664, 685, 686, 985], "9991": [664, 665, 1039], "3854": [664, 665], "previous_loss": [666, 667, 668, 677], "pa": [666, 667, 898, 985, 989, 1002], "preset": [666, 668, 676, 993], "t_": [666, 667, 668, 676, 677, 678, 858, 859, 1003], "loss_function_": [666, 668, 676, 677, 1048], "volume7": [666, 667], "crammer06a": [666, 667], "crammer": [666, 667, 734, 985, 989, 1004], "dekel": [666, 667, 985], "keshat": [666, 667, 985], "shalev": [666, 667, 985, 1003], "shwartz": [666, 667, 985, 1003], "26642044": 666, "45070924": 666, "67251877": 666, "64185414": 666, "84127814": 666, "intercept_init": [666, 667, 668, 676, 678], "y_all": [666, 668, 676, 829, 830, 858], "epsilon_insensit": [667, 676, 678, 902, 985, 1003], "squared_epsilon_insensit": [667, 676, 678, 902, 985, 1037], "48736655": 667, "18818427": 667, "59122734": 667, "94731329": 667, "02306214": 667, "eta0": [668, 676, 677, 678, 1003], "lossfunct": [668, 676, 677, 1040], "therein": 668, "939": [668, 1020], "990": [669, 989], "676": 669, "solver_opt": 670, "ipm": 670, "linprog": [670, 985], "is_data_valid": [671, 985], "is_model_valid": [671, 985], "max_trial": [671, 985], "max_skip": 671, "stop_n_inli": [671, 985], "stop_scor": [671, 985], "stop_prob": 671, "mad": [671, 1037], "costlier": 671, "n_trials_": 671, "n_skips_no_inliers_": 671, "n_skips_invalid_data_": 671, "n_skips_invalid_model_": 671, "sri": [671, 985, 1038, 1039], "bmva": 671, "bmvc": [671, 985], "paper355": 671, "9885": 671, "9417": 671, "15000": [672, 687, 858, 859], "btol": [672, 674], "gcv_mode": [673, 1033], "store_cv_valu": [673, 675, 1039, 1042], "alpha_per_target": [673, 1043], "cv_values_": [673, 675], "5166": 673, "gcv": [673, 675], "9595": 674, "9630": 675, "power_t": [676, 677, 678, 858, 859, 1003], "best_loss": [676, 678], "leon": [676, 677, 678, 1031], "bottou": [676, 677, 678, 993, 1003], "pow": [676, 677, 678, 858, 859], "dl": 676, "775047": 676, "775151": 676, "justif": 676, "volume2": 676, "zhang02c": 676, "offset_init": 677, "unshifft": 677, "n_subsampl": [679, 927], "breakdown_": 679, "n_subpopulation_": 679, "xin": [679, 985, 1039], "dang": [679, 985], "hanxiang": [679, 985], "peng": [679, 985, 1037, 1038, 1039, 1041, 1043], "xueqin": [679, 985], "hepe": [679, 985], "olemiss": 679, "xdang": 679, "mtse": 679, "9884": 679, "5871": 679, "coeff": 680, "839": 680, "599": 680, "copy_gram": [682, 683, 686], "return_path": [682, 683, 685, 686], "lars_path_gram": [682, 985, 1040], "tib": [682, 683], "xgamma": 685, "norms_squar": 686, "copy_xi": 686, "return_intercept": [687, 1040], "linearoper": 687, "_preprocess_data": 687, "path_method": [688, 986], "neighbors_algorithm": [688, 689], "arnoldi": [688, 689, 693], "fw": 688, "warshal": [688, 986], "kernel_pca_": 688, "nbrs_": [688, 689], "dist_matrix_": 688, "tenenbaum": [688, 986], "reconstruction_error": 688, "frobenius_norm": 688, "d_fit": 688, "x_fit": 688, "n_queri": [688, 843, 844, 845, 847, 849, 851, 852, 853], "hessian_tol": [689, 693], "modified_tol": [689, 693], "reconstruction_error_": 689, "rowei": [689, 693, 850, 986, 992], "saul": [689, 693, 986, 1038, 1039, 1041], "2323": [689, 693, 986], "donoho": [689, 693, 986], "grime": [689, 693, 986], "natl": [689, 693, 986], "acad": [689, 693, 986], "5591": [689, 693, 986], "mlle": [689, 693, 986], "zha": [689, 693, 986], "shanghai": [689, 693, 986], "univ": [689, 693, 986], "406": [689, 693, 986], "immers": [690, 694], "nonmetr": [690, 694, 986], "smacof": [690, 1046], "stress": [690, 694, 986, 1046], "stress_": 690, "dispar": [690, 694, 986], "dissimilarity_matrix_": 690, "psychometrika": [690, 694, 986], "1964": [690, 694, 877, 889, 986], "borg": [690, 694, 986], "groenen": [690, 694, 986], "affinity_matrix": 691, "n_neighbors_": [691, 847], "early_exagger": 692, "min_grad_norm": [692, 1037], "der": [692, 696, 986, 1034, 1035, 1039], "maaten": [692, 696, 986], "bhtsne": [692, 1038], "opentsn": 692, "abort": 692, "pdist": [692, 777, 780], "pairwise_distance_funct": [692, 696, 777, 780, 992], "barn": [692, 986, 1036, 1038, 1041], "hut": [692, 986, 1036, 1038, 1041], "nlogn": 692, "kl_divergence_": [692, 1038], "learning_rate_": [692, 859], "hinton": [692, 850, 857, 858, 859, 986, 992, 993, 994], "2579": 692, "2605": 692, "lvdmaaten": [692, 1038], "oct": [692, 768, 986, 992], "3221": [692, 986], "3245": [692, 986], "jmlr_2014": 692, "belkina": [692, 986], "ciccolella": [692, 986], "anno": [692, 986], "halpert": [692, 986], "spidlen": [692, 986], "snyder": [692, 986], "cappion": [692, 986], "kobak": [692, 1044], "beren": 692, "transcriptom": 692, "guttman": 694, "norm_laplacian": 695, "drop_first": 695, "nk": 696, "2n": [696, 981, 993], "3k": 696, "cosine_dist": [696, 761, 992, 1037], "jarkko": 696, "venna": 696, "samuel": [696, 1014, 1034, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048], "kaski": 696, "icann": 696, "verlag": 696, "491": 696, "twelfth": 696, "pmlr": 696, "384": [696, 902], "391": 696, "im_": 697, "axesimag": 697, "text_": 697, "include_valu": 697, "values_format": [697, 1041], "im_kw": [697, 1045], "text_kw": [697, 1046], "get_metr": 699, "euclideandist": 699, "manhattandist": 699, "chebyshevdist": 699, "minkowskidist": [699, 1044], "seuclideandist": 699, "mahalanobisdist": 699, "haversinedist": 699, "arcsin": [699, 763], "hammingdist": 699, "n_unequ": 699, "n_tot": 699, "canberradist": 699, "braycurtisdist": 699, "abbrevi": 699, "ntt": 699, "ntf": 699, "nft": 699, "nff": 699, "nneq": 699, "jaccarddist": 699, "matchingdist": 699, "dicedist": 699, "kulsinskidist": [699, 1047], "rogerstanimotodist": 699, "russellraodist": 699, "sokalmichenerdist": 699, "sokalsneathdist": 699, "pyfunc": [699, 992], "pyfuncdist": 699, "metric_obj": 699, "chance_level_": [700, 702, 1047], "drop_intermedi": [700, 702, 781, 788, 1047], "errors_lines_": 701, "with_error": 701, "scatter_": 701, "balanced_accuracy_scor": [703, 786, 989, 1039], "imperfectli": [703, 733, 989], "label_tru": [704, 717, 736, 754, 756, 794], "upperlimit": 704, "expected_ri": 705, "discord": 705, "hubert1985": 705, "1007": 705, "2fbf01908075": 705, "steinley2004": 705, "wk": 705, "rand_index": 705, "adjusted_rand_index": 705, "chacon": 705, "chac\u00f3n": 705, "rastrojo": 705, "balanced_accuraci": [708, 989, 1039], "brodersen": 708, "ong": 708, "stephan": [708, 1034, 1040, 1041, 1043], "buhmann": 708, "20th": 708, "3121": 708, "kelleh": [708, 989], "aoif": [708, 989], "arci": [708, 989], "y_true_categor": [709, 989], "037": 709, "calinski": [710, 1037], "harabasz": 710, "allow_non": 711, "thrown": [711, 1040, 1041], "tn": [712, 718, 989], "negative_class": 712, "zebra": 712, "output_dict": [713, 1039, 1043], "precision_recall_fscore_support": [713, 728, 729, 783, 786, 989, 1035, 1039, 1041, 1047], "multilabel_confusion_matrix": [713, 728, 729, 737, 783, 786, 989, 1040], "conting": [714, 715, 730, 754, 1037], "n_classes_tru": [714, 754], "n_classes_pr": [714, 754], "cohen": [716, 1039], "p_o": 716, "p_e": 716, "artstein": 716, "poesio": 716, "linguist": [716, 898, 1002], "555": 716, "596": 716, "label_pr": [717, 735, 736, 754, 756, 794], "ant": [718, 753, 989], "a_row": 719, "a_column": 719, "b_row": 719, "b_column": 719, "tsoumaka": [720, 733, 739, 989], "kataki": [720, 733, 739, 989], "vlahava": [720, 739, 989], "handbook": [720, 739, 989], "685": [720, 739, 989], "raw_valu": [721, 722, 727, 744, 745, 747, 749, 750, 752, 784, 789, 790, 989, 1039, 1042], "wainwright": [721, 722, 723], "su": [721, 722, 723], "statlearnspars": [721, 722, 723], "764": [721, 989], "691": 721, "8125": 721, "57142857": 721, "d2": 722, "d2_absolute_error_scor": [722, 989, 1045], "koenker": [722, 985], "roger": [722, 1038, 1039, 1043], "jos\u00e9": [722, 1034, 1044], "487": 723, "630": 723, "bouldin": 724, "farther": 724, "log_bas": 725, "ignore_ti": [725, 755], "ndcg": [725, 755, 989, 1038], "ndcg_score": [725, 989, 1038, 1041, 1046, 1047], "sharper": 725, "discounted_cumulative_gain": 725, "dcg": [725, 755, 989, 1038], "jarvelin": [725, 755, 989], "kekalainen": [725, 755, 989], "colt": [725, 755, 989], "mcsherri": [725, 755, 989], "najork": [725, 755, 989], "european": [725, 755, 989], "groud": [725, 755], "true_relev": [725, 755], "imperfect": [727, 784, 989, 1033], "variance_weight": [727, 784, 989], "983": 727, "n_unique_label": [728, 729, 737, 782, 783, 786, 953], "fbeta_scor": [728, 741, 782, 989, 1033, 1034, 1035, 1036, 1041, 1047], "y_true_empti": 728, "y_pred_empti": [728, 729], "66666667": [728, 781, 851, 999], "fowlk": [730, 1037], "mallow": [730, 1037], "get_scorer_nam": [731, 989, 1045, 1048], "forgiv": 733, "upperbound": 733, "grigorio": 733, "ioanni": 733, "wareh": 733, "septemb": [733, 989, 1031, 1034, 1037, 1039, 1044, 1047], "pred_decis": [734, 989, 1044], "disagre": [734, 996], "kobi": 734, "265": [734, 836, 840, 991], "AND": 734, "denero": 734, "gluster": 735, "v_measur": [735, 794], "6666": [737, 989, 1037], "5833": [737, 989], "lrap": [738, 989], "209": [740, 877], "21616": 740, "needs_proba": [741, 1040, 1048], "needs_threshold": [741, 1048], "ftwo_scor": [741, 989], "mcc": [742, 989, 1045], "baldi": 742, "brunak": 742, "chauvin": 742, "andersen": [742, 1045], "nielsen": [742, 1039], "gorodkin": 742, "jurman": 742, "riccadonna": 742, "furlanello": 742, "cen": 742, "3273": 745, "5515": 745, "6198": 745, "112589990684262": 745, "0568": 746, "4260": [748, 751], "41666667": 749, "825": 749, "msle": [750, 989], "rmsle": [750, 989], "root_mean_squared_log_error": [750, 989, 1048], "00462428": 750, "08377444": 750, "samplewis": [753, 989], "mcm": [753, 989], "mcm_": 753, "multi_confus": 753, "normalized_discounted_cumulative_gain": 755, "dcg_score": [755, 989, 1038, 1041], "kernel_matrix": [757, 758, 765, 775], "marszalek": [757, 758, 987], "lazebnik": [757, 758, 987], "schmid": [757, 758, 987], "ouvert": [757, 758, 987], "00171412": [757, 758, 987], "dense_output": [760, 766, 894, 939, 1039], "linear_kernel": [760, 764, 987, 1039], "haversine_dist": [761, 1040], "y_norm_squar": 762, "x_norm_squar": [762, 1036, 1048], "paired_dist": [762, 768, 777, 1035], "41421356": [762, 768, 992], "lon": 763, "ezeiza": 763, "airport": 763, "bueno": 763, "argentina": 763, "gaull": 763, "bsa": 763, "83333": 763, "5166646": 763, "0083899664": 763, "53844117956": 763, "bsas_in_radian": 763, "paris_in_radian": 763, "6371000": 763, "kilomet": 763, "11099": 763, "54035582": 763, "polynomial_kernel": [764, 987, 1048], "rbf_kernel": [764, 987, 1035], "laplacian_kernel": [764, 987, 1036], "sigmoid_kernel": [764, 987], "sq": 768, "dixon": [768, 1041, 1042], "cybernet": 768, "ieeexplor": 768, "4310090": 768, "filter_param": 773, "jth": [773, 777], "force_all_finit": [777, 919, 921, 922, 1042, 1045], "distance_metr": [777, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855], "metric_kwarg": [778, 779], "reduce_func": [780, 1042], "d_chunk": 780, "sought": 780, "neigh": [780, 843, 844, 845, 847, 849, 851, 852, 853], "gen": 780, "probas_pr": 781, "warn_for": 782, "shantanu": 782, "godbol": 782, "sunita": 782, "sarawagi": 782, "pig": 782, "948": [784, 989], "max_fpr": [787, 989, 1039], "provost": [787, 989], "ceder": [787, 989], "stern": [787, 989], "fawcett": [787, 788, 989], "generalis": [787, 989, 1010], "612": 789, "822": 789, "n_samples_a": [791, 792], "favour": [791, 986, 988, 1040], "mean_prior": 796, "degrees_of_freedom_prior": 796, "verbose_interv": [796, 797], "wishart": 796, "emipr": 796, "precisions_": [796, 797], "precisions_cholesky_": [796, 797, 1045], "converged_": [796, 797], "lower_bound_": [796, 797, 1039], "weight_concentration_prior_": 796, "weight_concentration_": 796, "mean_precision_prior_": 796, "mean_precision_": 796, "mean_prior_": 796, "degrees_of_freedom_prior_": 796, "degrees_of_freedom_": 796, "covariance_prior_": 796, "hagai": 796, "attia": 796, "bgm": 796, "n_dimens": [796, 797], "log_prob": [796, 797], "weights_init": 797, "precisions_init": [797, 1045, 1047], "gm": 797, "pre_dispatch": [798, 804, 812, 820, 822, 823, 824, 825, 828, 955, 1034], "error_scor": [798, 801, 802, 804, 812, 820, 823, 824, 825, 828, 978, 1035, 1039, 1043, 1046], "explos": [798, 812, 822, 823, 824], "fitfailedwarn": [798, 801, 802, 804, 812, 820, 823, 824, 825, 828], "param_kernel": [798, 812], "param_degre": 798, "split0_test_scor": [798, 812, 1037], "rank_t": 798, "split1_test_scor": [798, 812], "split0_train_scor": [798, 812, 1037], "split1_train_scor": [798, 812], "mean_train_scor": [798, 812, 1037], "std_train_scor": [798, 812, 1037], "split0_test_precis": [798, 812], "mean_train_precis": [798, 812], "best_estim": [798, 801, 802, 812], "scorer_": [798, 801, 802, 812], "n_splits_": [798, 801, 802, 812], "refit_time_": [798, 801, 802, 812, 1039], "multimetric_": [798, 801, 802, 812], "parametergrid": [798, 1033, 1039], "split2_test_scor": 798, "num_sampl": [798, 812, 1046], "versionad": [798, 801, 802, 812], "stratif": [799, 800, 806, 807, 816, 817, 818, 960, 1040], "group_kfold": 799, "set_split_request": [799, 800, 805, 807, 816], "aggressive_elimin": [801, 802, 978], "r0": [801, 802], "replai": [801, 802], "n_remaining_candidates_": [801, 802], "n_candid": [801, 802, 978], "max_resources_": [801, 802], "min_resources_": [801, 802], "n_required_iterations_": [801, 802], "n_possible_iterations_": [801, 802], "exceed": [801, 802, 1037], "n_unique_tick": [804, 825], "n_tick": [804, 820, 825, 828], "neg_": [804, 820, 1037], "errorbar_": [804, 820], "errorbarcontain": [804, 820], "fill_between_": [804, 820], "polycollect": [804, 820], "exploit_incremental_learn": [804, 825], "log_scal": [804, 1047], "fill_between_kw": [804, 820], "errorbar_kw": [804, 820], "predispatch": [804, 820, 825, 828], "negat": [804, 820, 989], "combinator": 808, "lpo": 808, "param_list": 810, "rounded_list": 810, "89856": 810, "923223": 810, "878964": 810, "038159": 810, "parametersampl": [812, 1033, 1039, 1043], "2652124": 813, "rskf": 814, "36851234": 814, "sizeabl": [815, 818], "sad": [816, 817], "sss": 818, "logistic_regress": 820, "n_valu": [820, 828, 1039], "checked_cv": 821, "3315057": [823, 824], "08022103": [823, 824], "03531816": [823, 824], "test_r2": 824, "test_auc": 824, "train_r2": 824, "train_auc": 824, "3635": 824, "3573": 824, "6114": 824, "28009951": 824, "3908844": 824, "22784907": 824, "train_sizes_ab": 825, "train_size_ab": 825, "cv_train_scor": 825, "cv_test_scor": 825, "permutation_scor": 826, "pairwise_indices_": 829, "label_binarizer_": 830, "multilabel_": [830, 1036], "code_book_": 831, "bakiri": [831, 990], "pict": [831, 990], "order_": [832, 835], "jess": [832, 990, 1044], "pfahring": [832, 990], "geoff": [832, 990], "holm": [832, 990], "eib": [832, 990], "8387": 832, "9431": 832, "4576": 832, "8878": 832, "3684": 832, "2640": 832, "0321": 832, "9935": 832, "y_log_prob": 832, "load_linnerud": [834, 1037, 1042], "force_alpha": [836, 837, 838, 840, 1046], "lidston": [836, 837, 838, 840, 991], "class_count_": [836, 837, 838, 839, 840], "class_log_prior_": [836, 837, 838, 840], "feature_count_": [836, 838, 840], "feature_log_prob_": [836, 837, 838, 840], "categoricalnb": [836, 838, 839, 840, 991, 1041, 1042, 1043, 1044, 1046], "renni": [836, 838, 991, 1039], "schuetz": [836, 840], "htmledit": [836, 840, 987], "mccallum": [836, 991], "nigam": [836, 991], "metsi": [836, 991], "androutsopoulo": [836, 991], "palioura": [836, 991], "cea": [836, 991], "predict_joint_log_proba": [836, 837, 838, 839, 840, 1046], "min_categori": [837, 1043], "category_count_": 837, "n_categories_": 837, "mirror": [838, 978], "mahout": 838, "weka": 838, "feature_all_": 838, "shih": [838, 991], "teevan": [838, 991], "karger": [838, 991], "616": [838, 991, 999], "623": [838, 991], "jrenni": 838, "icml03": 838, "var_smooth": [839, 1039], "stan": 839, "levequ": [839, 881], "cstr": 839, "epsilon_": 839, "theta_": [839, 991], "clf_pf": 839, "distancemetric64": [841, 842], "valid_metr": [841, 842, 992, 1047], "19662693": [841, 842], "29473397": [841, 842], "tree_copi": [841, 842], "query_radiu": [841, 842], "count_onli": [841, 842], "kernel_dens": [841, 842], "94114649": [841, 842], "83281226": [841, 842], "2071716": [841, 842], "two_point_correl": [841, 842], "580": [841, 842], "get_arrai": [841, 842], "get_n_cal": [841, 842], "n_call": [841, 842], "get_tree_stat": [841, 842], "tree_stat": [841, 842], "breadth_first": [841, 842, 846], "return_log": [841, 842], "k_true": [841, 842], "k_ret": [841, 842], "breadth": [841, 842, 846, 1014, 1033], "dualtre": [841, 842], "sort_result": [841, 842, 849, 851, 852, 853, 1043], "radii": [841, 842], "reset_n_cal": [841, 842], "effective_metric_": [843, 844, 845, 847, 849, 851, 852, 853, 992], "callbl": 843, "effective_metric_params_": [843, 844, 845, 847, 849, 851, 852, 853], "outputs_2d_": [843, 851, 1041], "nearest_neighbor_algorithm": [843, 851, 852], "n_index": [843, 844, 845, 847, 849, 851, 852], "neigh_dist": [843, 844, 845, 847, 849, 851, 852, 853], "neigh_ind": [843, 844, 845, 847, 849, 851, 852, 853], "nearest_neighbors_algorithm": [844, 849], "nearer": [845, 853, 992], "x_dist_graph": 845, "silverman": [846, 1046], "binarytre": [846, 1035, 1039, 1043], "bandwidth_": 846, "log_dens": 846, "52955942": 846, "51462041": 846, "60244657": 846, "logprob": 846, "negative_outlier_factor": 847, "9821": 847, "0370": 847, "3697": 847, "shifted_opposite_lof_scor": 847, "opposite_lof_scor": 847, "wminkowski": [848, 1043, 1045], "narasimhan": 848, "chu": [848, 1047], "shrunken": [848, 1031], "6567": 848, "6572": 848, "nbr": [849, 992], "neighborsclassifi": [849, 851, 852, 853, 1031], "n_features_a": 850, "n_features_b": 850, "goldberg": [850, 992], "neighbourhood": [850, 992], "513": [850, 992], "ncanip": 850, "neighbourhood_components_analysi": 850, "961904": 850, "outlier_label": [851, 1041], "outlier_label_": 851, "33333333": [851, 999], "x_cluster": 853, "warn_when_not_sort": 856, "efficiencywarn": [856, 1046], "sml": [857, 994], "pcd": [857, 994], "sweep": 857, "gibb": [857, 994, 1009], "intercept_hidden_": 857, "intercept_visible_": 857, "h_samples_": 857, "osindero": [857, 994], "teh": [857, 994], "1527": 857, "1554": 857, "absp": 857, "fastnc": 857, "tieleman": [857, 994], "v_new": 857, "pseudo_likelihood": 857, "relu": [858, 859], "beta_1": [858, 859], "beta_2": [858, 859], "max_fun": [858, 859, 1041], "n_layer": [858, 859], "neuron": [858, 859, 987, 993], "tan": [858, 859, 993, 1038], "rectifi": [858, 859], "kingma": [858, 859, 993], "diederik": [858, 859, 993, 1046], "jimmi": [858, 859, 993, 1037, 1039], "effective_learning_r": [858, 859], "best_loss_": [858, 859, 1046], "best_validation_score_": [858, 859, 1046], "validation_scores_": [858, 859, 1046], "intercepts_": [858, 859, 993], "n_layers_": [858, 859], "out_activation_": [858, 859], "geoffrei": [858, 859, 993, 1042, 1043, 1044, 1045, 1047], "connectionist": [858, 859], "glorot": [858, 859], "xavier": [858, 859, 1039, 1040, 1041, 1043, 1044], "yoshua": [858, 859, 1002], "feedforward": [858, 859], "kaim": [858, 859], "delv": [858, 859], "imagenet": [858, 859], "961": 858, "log_y_prob": 858, "named_transform": [860, 1046], "svd__n_compon": 860, "transform_list": 860, "s__p": 861, "n_transformed_featur": 861, "y_log_proba": 861, "analyst": 864, "x_tr": [864, 870, 873, 874, 875, 879, 881, 884, 886, 887, 891, 892], "accept_spars": [865, 921, 922, 1038, 1048], "inv_kw_arg": 865, "pickleabl": [865, 1037], "6931": 865, "3862": 865, "n_bins_": 866, "regener": 866, "xinv": 866, "tild": [867, 997, 999], "k_fit_rows_": 867, "k_fit_all_": 867, "1299": [867, 999], "1319": [867, 999], "n_samples1": 867, "n_samples2": 867, "k_new": 867, "neg_label": [868, 885], "y_type_": 868, "sparse_input_": 868, "lb": [868, 1000], "tokyo": [869, 1000], "amsterdam": [869, 1000], "max_abs_": 870, "x_std": [871, 887, 999], "data_min_": [871, 1036], "data_max_": [871, 1036], "data_range_": [871, 1036], "unwieldi": 872, "fi": 872, "comedi": 872, "y_indic": 872, "yt": 872, "ands": 872, "feature_name_combin": [874, 1047], "categories_": [874, 875, 882, 999, 1039, 1046], "unregular": [874, 897, 1023, 1040], "intact": [874, 1025], "infrequ": [874, 875, 882, 989, 1031, 1045, 1046, 1047], "infrequent_if_exist": [874, 999], "x_6": 874, "x_7": 874, "drop_idx_": [874, 1042, 1046], "drop_idx": 874, "gender_femal": 874, "gender_mal": 874, "group_1": 874, "group_2": 874, "group_3": 874, "drop_enc": [874, 999], "drop_binary_enc": 874, "custom_combin": 874, "custom_fnames_enc": 874, "x0_str_femal": 874, "x0_str_male": 874, "x1_int_1": 874, "x1_int_2": 874, "x1_int_3": 874, "oh": [874, 1041], "infrequent_sklearn": [874, 999], "n_encoded_featur": [874, 875], "_csr": 874, "onward": [875, 1035], "bpo": 875, "43475": 875, "lenient": [875, 1010], "min_degre": [876, 1044], "max_degre": [876, 1044], "powers_": 876, "n_output_features_": 876, "nystrom": [876, 1040, 1041], "featurewis": 877, "power_transform": [877, 890, 1039], "biometrika": [877, 889], "954": [877, 889], "959": [877, 889], "707": [877, 889], "ignore_implicit_zero": [878, 890], "landmark": [878, 890, 999], "n_quantiles_": 878, "quantiles_": [878, 999, 1041], "references_": 878, "with_cent": [879, 891], "with_scal": [879, 891], "unit_vari": [879, 891, 1043], "quartil": 879, "q_min": [879, 891], "q_max": [879, 891], "center_": 879, "robust_scal": [879, 890, 1039], "interquartile_rang": 879, "bspline": 880, "n_features_out_": 880, "with_std": [881, 892, 999, 1039], "n_samples_seen": 881, "5a": 881, "randal": [881, 1035, 1045], "242": [881, 1031], "mic": [882, 999], "target_mean_": [882, 999], "target_type_": 882, "f0_c0": 882, "f0_c1": 882, "f0_c2": 882, "f1_c0": 882, "f1_c1": 882, "f1_c2": 882, "micci": [882, 999], "barreca": [882, 999], "newsl": [882, 999], "enc_auto": 882, "enc_high_smooth": 882, "enc_low_smooth": 882, "type_of_target_": 882, "ahead": 885, "return_norm": [888, 1038], "compute_inverse_compon": [893, 894, 1001], "inverse_components_": [893, 894, 1001, 1045], "2759": [893, 894], "afor": [893, 894], "baserandomproject": [893, 894], "ping": [894, 1001, 1037, 1038], "density_": 894, "gaussianrandomproject": [894, 1001, 1032, 1045, 1047, 1048], "church": [894, 1001], "kdd06_rp": 894, "cgi": 894, "uoa": 894, "gr": 894, "opta": 894, "0182": 894, "e2": [895, 985], "93lindenstrauss_lemma": 895, "sanjoi": [895, 1001], "anupam": [895, 1001, 1046], "gupta": [895, 1001, 1038, 1039, 1042, 1043, 1044, 1045, 1047], "elementari": [895, 1001], "11841": [895, 1001], "1112658": [895, 1001], "7894": [895, 1001], "9868": [895, 1001], "steadi": [896, 897], "xiaojin": 896, "zoubin": 896, "ghahramani": 896, "cmu": 896, "cald": 896, "carnegi": 896, "mellon": 896, "jerryzhu": 896, "label_prop_model": [896, 897], "clamp": [897, 1002], "dengyong": 897, "bousquet": 897, "navin": 897, "lal": 897, "schoelkopf": 897, "termination_condition_": 898, "no_chang": 898, "all_label": 898, "33rd": [898, 1002], "acl": [898, 1002, 1003], "stroudsburg": [898, 1002], "196": [898, 1002], "crammer_sing": [901, 990, 1004, 1031], "seldom": 901, "w_x_1": [901, 902], "w_x_n": [901, 902], "w_intercept": [901, 902], "readonli": [901, 902, 1044, 1046, 1047], "raw_coef_": [901, 902], "smo": [901, 902], "526": 901, "1693": 901, "unsur": 902, "class_weight_": [903, 906, 1046], "n_sv": [903, 904, 905, 906, 907, 1004, 1041], "fit_status_": [903, 904, 905, 906, 907], "n_support_": [903, 904, 905, 906, 907, 1004, 1041], "proba_": [903, 906, 1042], "probb_": [903, 906, 1042], "shape_fit_": [903, 904, 905, 906, 907], "n_dimensions_of_x": [903, 904, 905, 906, 907], "7798": 905, "0547": 905, "0556": 905, "0561": 905, "7332": 905, "unshift": 905, "impract": 906, "tube": [907, 1004], "_tree": [909, 910, 911, 912, 1032, 1034], "decision_tree_learn": [909, 910, 1005], "olshen": [909, 910, 1005], "wadsworth": [909, 910, 1005], "belmont": [909, 910, 1005], "cutler": [909, 910], "cc_home": [909, 910], "htm": [909, 910], "ccp_path": [909, 910, 911, 912], "get_depth": [909, 910, 911, 912, 1040], "get_n_leav": [909, 910, 911, 912, 1040], "set_predict_proba_request": [909, 911], "extra_tre": [911, 912], "8947": 911, "decision_tre": [913, 914, 915, 1005], "out_fil": [913, 1005], "leaves_parallel": 913, "special_charact": [913, 1005], "fontnam": [913, 1044], "helvetica": [913, 915], "graphviz": [913, 1005], "postscript": 913, "tpng": 913, "paint": [913, 915], "dot_data": [913, 1005], "digraph": 913, "show_weight": 914, "feature_0": 914, "unrepresent": 916, "keyerror": [916, 1041], "popitem": 916, "lifo": 916, "input_nam": [920, 922, 952, 1045], "accept_large_spars": [921, 922, 1039], "ensure_2d": [921, 922], "allow_nd": [921, 922], "ensure_min_sampl": [921, 922], "ensure_min_featur": [921, 922], "y_numer": 921, "bsr": [921, 922, 1044], "x_convert": 921, "y_convert": 921, "array_convert": 922, "min_val": 925, "max_val": 925, "include_boundari": [925, 1045], "y_org": 926, "class_weight_vect": 926, "king": 926, "zen": 926, "sample_weight_vect": 927, "parenthes": 928, "type_filt": 930, "generate_onli": [932, 1041], "checks_gener": 932, "test_check_estim": 933, "check_estimators_fit_returns_self": 933, "array_lik": 936, "logdet": 936, "slogdet": 936, "6375861597263857": 936, "flip_sign": 938, "svd_lapack_driv": 938, "gesdd": 938, "p5": 938, "transposit": 938, "gesvd": 938, "conquer": 938, "unitari": 938, "vh": 938, "dot_product": 939, "deweight": 940, "min_batch_s": 941, "n_pack": [941, 942], "path_length": 943, "sliceabl": 944, "methodmetadatarequest": 945, "routemappingpair": 946, "routing_info": 946, "from_str": [946, 947], "methodpair": 947, "_obj": 949, "_method": 949, "any_method": 949, "truthi": 950, "helloifeven": 950, "_x_is_even": 950, "say_hello": 950, "temp_fold": 955, "max_nbyt": 955, "1m": 955, "mmap_mod": 955, "dispatch_next": 955, "dispatch_one_batch": 955, "unprotect": 955, "prefetch": 955, "print_progress": 955, "inner_max_num_thread": 957, "backend_param": 957, "parallel_config": 957, "register_parallel_backend": [957, 1039], "dask": [957, 1010, 1039], "localclust": 957, "workload": [957, 1009], "register_rai": 957, "backend_nam": 957, "oversubscript": [957, 1045], "threadpool": 957, "effective_n_job": 957, "make_default": 959, "parallelbackendbas": 959, "resampled_arrai": 960, "3x2": [960, 963], "shuffled_arrai": 963, "last_mean": 964, "last_var": 964, "last_n": 964, "return_sum_weight": 970, "sum_weight": 970, "all_or_ani": [973, 1041], "is_fit": 973, "eg": 973, "substitut": [973, 1010, 1037], "raise_except": 975, "array_sym": 975, "is_paramet": 977, "enclos": 978, "set_stat": 978, "bergstra": [978, 1031, 1032], "tournament": 978, "dispos": [978, 1025], "n_resources_i": 978, "n_resources_0": 978, "n_candidates_i": 978, "n_candidates_0": 978, "r_0": 978, "n_resourc": 978, "983667": 978, "951958": 978, "947958": 978, "961009": 978, "955989": 978, "jamieson": 978, "talwalkar": 978, "desalvo": 978, "rostamizadeh": 978, "hyperband": 978, "bandit": 978, "multimetr": [978, 1041, 1046], "calibrated_forest": 978, "select__k": 978, "model__estimator__max_depth": 978, "imp": 979, "sophist": [979, 991], "14338": 979, "13286": 979, "15611": 979, "amelia": 979, "scientist": [979, 1014], "roderick": 979, "rubin": 979, "1986": [979, 1005], "ol2001": 979, "mask_missing_values_onli": 979, "mask_al": 979, "3_": 981, "2_": 981, "ws2001": 981, "unsampl": 981, "equiv": [981, 1004], "\u028c": 981, "elucid": 981, "frac12": 981, "rr2007": 981, "2x_iy_i": 981, "vz2010": 981, "vvz2010": 981, "prod_i": 981, "ls2010": 981, "c_0": [981, 987], "tensorsketch": 981, "pp2013": 981, "wikic": 981, "ccf2002": 981, "mercer": 981, "langl": [981, 989, 1003, 1004], "rangl": [981, 989, 1003, 1004], "y_j": [981, 989, 991, 999, 1004], "obviat": 981, "dagm": 981, "vempati": 981, "jawahar": 981, "charikar": 981, "farach": 981, "colton": 981, "m2012": 982, "mu_k": 983, "cst": 983, "omega_": 983, "k0": 983, "h_l": 983, "extrema": 983, "honei": 983, "stork": 983, "dilemma": 984, "valid_scor": 984, "w_0": 985, "w_p": 985, "34545455": 985, "13636": [985, 1040], "rifkin": 985, "lippert": 985, "2n_": 985, "softw": 985, "kim": [985, 1039, 1040, 1041, 1045], "koh": [985, 1014], "lustig": 985, "boyd": 985, "gorinevski": 985, "c_p": 985, "cherkasski": 985, "yunqian": 985, "1691": 985, "1714": 985, "ell_2": 985, "equiangular": 985, "weisberg": 985, "ell_0": [985, 989], "_coef": 985, "mp": 985, "ell_": 985, "posteriori": [985, 991], "radford": 985, "neal": [985, 1044], "50000013": 985, "49999993": 985, "lambda_i": [985, 999], "srikantan": 985, "tristan": 985, "fletcher": [985, 1031, 1035], "nomenclatur": [985, 1037], "deliber": 985, "overparameter": 985, "ldot": [985, 989, 991, 993, 1003], "w_l": 985, "min_w": 985, "iverson": 985, "hood": [985, 1004], "broyden": 985, "goldfarb": 985, "shanno": 985, "shortcom": 985, "aaron": [985, 1034, 1035, 1036, 1041], "simon": [985, 1014, 1034, 1035, 1044, 1045, 1046, 1047], "93fletcher": 985, "93goldfarb": 985, "93shanno_algorithm": 985, "noah": 985, "multirespons": 985, "statsmodel": [985, 1009], "edm": 985, "agricultur": 985, "rainfal": 985, "paid": 985, "fraud": [985, 1014], "cash": 985, "fraudul": [985, 1014], "interrupt": 985, "drug": 985, "cure": 985, "entertain": 985, "mccullagh": 985, "nelder": 985, "boca": 985, "raton": 985, "chapman": 985, "hall": [985, 1038, 1042], "crc": 985, "31760": 985, "j\u00f8rgensen": 985, "monografia": 985, "matem\u00e1tica": 985, "2463": 985, "4337": 985, "7638": 985, "disappear": [985, 1031], "photogrammetr": 985, "hypothes": 985, "paradigm": 985, "cartographi": 985, "fischler": 985, "boll": 985, "sunglok": 985, "choi": 985, "taemin": 985, "wonpil": 985, "binom": 985, "infeas": [985, 992, 994], "k\u00e4rkk\u00e4inen": 985, "\u00e4yr\u00e4m\u00f6": 985, "h_": 985, "oarc": 985, "dae": 985, "bassett": 985, "jr": 985, "econometrica": 985, "econometr": 985, "portnoi": [985, 1048], "hare": 985, "tortois": 985, "paraboloid": 985, "w_3": 985, "w_4": 985, "w_5": 985, "z_1": 985, "z_2": 985, "z_3": 985, "z_4": 985, "z_5": 985, "streamlin": 985, "gotten": [985, 999], "necess": [986, 992], "strife": 986, "mother": 986, "baloo": 986, "song": 986, "jungl": 986, "rubric": 986, "defici": [986, 1003], "hlle": 986, "revolv": 986, "belkin": 986, "niyogi": 986, "1373": 986, "1396": 986, "molecul": 986, "jk": 986, "delta_": 986, "c_1": 986, "disentangl": 986, "legitim": 986, "die": 986, "noisier": 986, "5415": 986, "brief": 987, "num_featur": [987, 1046], "quantum": 987, "nutshel": 987, "36787944": 987, "89483932": 987, "58364548": 987, "51341712": 987, "83822343": 987, "7768366": 987, "facil": 988, "equi": 988, "agnost": [988, 997], "cue": 988, "came": 988, "quicker": 988, "unpract": 988, "analogi": [988, 989], "top_k_accuraci": 989, "top_k_accuracy_scor": [989, 1043, 1045], "neg_brier_scor": [989, 1041], "f1_micro": [989, 1035], "f1_weight": [989, 1035], "f1_sampl": 989, "neg_log_loss": 989, "roc_auc_ovr": [989, 1041], "roc_auc_ovo": [989, 1041], "roc_auc_ovr_weight": [989, 1041], "roc_auc_ovo_weight": [989, 1041], "explained_variance_scor": [989, 1034, 1038, 1045], "max_error": [989, 1040], "neg_mean_squared_log_error": 989, "mean_squared_log_error": [989, 1038, 1044, 1048], "neg_root_mean_squared_log_error": 989, "neg_median_absolute_error": 989, "neg_mean_poisson_devi": 989, "neg_mean_gamma_devi": 989, "mean_gamma_devi": [989, 1041], "d2_pinball_scor": [989, 1045], "d2_tweedie_scor": [989, 1044], "invalidparametererror": 989, "_error": 989, "my_custom_loss_func": 989, "693": 989, "protocol": [989, 1034, 1047, 1048], "custom_scoring_funct": 989, "custom_scorer_modul": 989, "confusion_matrix_scor": 989, "test_tp": 989, "test_fn": 989, "untru": 989, "dividend": 989, "divisor": 989, "quotient": 989, "texttt": 989, "_class": 989, "youden": 989, "informed": 989, "mosley2013": 989, "kelleher2015": 989, "guyon2015": 989, "urbanowicz2015": 989, "escalant": 989, "escalera": 989, "maci\u00e0": [989, 1044, 1046], "saeed": 989, "statnikov": 989, "viega": 989, "chalearn": 989, "automl": [989, 1009], "ijcnn": 989, "moslei": 989, "ijcv": 989, "urbanowicz": 989, "exstrac": 989, "evol": 989, "intel": [989, 1009], "cohen_kappa_scor": [989, 1036, 1038], "4285714285714286": 989, "manning2008": 989, "everingham2010": 989, "davis2006": 989, "flach2015": 989, "everingham": 989, "gool": 989, "winn": 989, "pascal": 989, "voc": 989, "goadrich": 989, "y_l": 989, "_l": 989, "emptyset": 989, "f_beta": 989, "ne": [989, 992], "1738": 989, "matthews_corrcoef": [989, 1031, 1037, 1038, 1045], "t_k": [989, 1005], "ik": 989, "ki": 989, "kk": 989, "auroc": 989, "ht2001": 989, "fc2009": 989, "pd2000": 989, "f2006": 989, "f2001": 989, "inner_clf": 989, "c\u00e8sar": 989, "hernandez": 989, "orallo": 989, "modroiu": 989, "wikipediadet2017": 989, "martin1997": 989, "navratil2007": 989, "consult": 989, "encyclopedia": 989, "utc": 989, "php": [989, 1009], "detection_error_tradeoff": 989, "oldid": 989, "798982054": 989, "doddington": 989, "kamm": 989, "ordowski": 989, "przybocki": 989, "navractil": 989, "klusacek": 989, "acoust": 989, "icassp": 989, "honolulu": 989, "brier1950": 989, "p_i": [989, 992], "bella2012": 989, "flach2008": 989, "bella": 989, "hern\u00e1ndez": 989, "ram\u00edrez": 989, "quintana": 989, "khosrow": 989, "pour": 989, "hershei": 989, "edson": [989, 1036], "matsubara": 989, "dagstuhl": 989, "seminar": 989, "schloss": 989, "leibniz": 989, "zentrum": 989, "lr_": 989, "brenner": 989, "gefel": 989, "coverage_error": [989, 1035, 1045], "label_ranking_average_precision_scor": [989, 1035, 1039, 1040, 1046], "label_ranking_loss": [989, 1036], "grade": 989, "unalt": 989, "epsilon_i": 989, "925": [989, 1020], "7083": 989, "rsme": 989, "log_": 989, "growth": [989, 1036, 1037], "commod": 989, "mapd": 989, "2e6": 989, "2666": 989, "y_n": [989, 993, 1003], "elicit": 989, "2500": 989, "mean_pinball_loss_95p": 989, "skill": 989, "mcfadden": 989, "d2_tweedie_score_15": 989, "d2_pinball_score_08": 989, "heteroschedast": 989, "homoschedast": 989, "pear": 990, "y_dens": 990, "y_spars": 990, "advoc": 990, "elabor": 990, "financ": 990, "f3": 990, "y3": 990, "multi_target_forest": 990, "75474165": 990, "147": 990, "03498585": 990, "03812219": 990, "12165031": 990, "12914884": 990, "46081961": 990, "8948621": 990, "44373091": 990, "88978285": 990, "62745778": 990, "02891072": 990, "48204257": 990, "03260883": 990, "165": 990, "34867495": 990, "52003279": 990, "92529176": 990, "25719016": 990, "84253": 990, "25193977": 990, "16443186": 990, "12274212": 990, "170388": 990, "80956739": 990, "16979946": 990, "72667194": 990, "50941682": 990, "50447799": 990, "149": [990, 1031], "37967282": 990, "15699552": 990, "72850319": 990, "prod_": 991, "downarrow": 991, "spite": 991, "famous": 991, "serious": 991, "flair": 991, "2_y": 991, "mu_i": 991, "sigma_i": [991, 999], "theta_i": 991, "cnb": 991, "mnb": 991, "inventor": 991, "alpha_i": [991, 1004], "cj": [991, 1034, 1035, 1036, 1037, 1038], "summat": [991, 993], "min_c": 991, "t_i": 991, "poorest": 991, "n_i": [991, 999], "satellit": 992, "kdt": 992, "farawai": 992, "invent": 992, "orthotrop": 992, "bentlei": 992, "1975": 992, "omohundro": 992, "characteris": 992, "unaffect": 992, "amort": 992, "cache_path": 992, "gettempdir": 992, "unsort": [992, 1032, 1035, 1039], "5807": 992, "nca_pip": 992, "96190476": 992, "limits_": 992, "lx": 992, "x_m": 993, "leftmost": 993, "w_1x_1": 993, "w_2x_2": 993, "w_mx_m": 993, "backpropag": 993, "b_1": 993, "b_2": 993, "z_l": 993, "dfrac": [993, 999], "nabla": 993, "deduct": 993, "rumelhart": 993, "jiquan": 993, "ngiam": 993, "chuan": 993, "yifan": 993, "carolin": 993, "suen": 993, "backprop": [993, 1003], "lecun": [993, 1003], "orr": [993, 1003], "strai": 994, "v_ih_j": 994, "b_iv_i": 994, "c_jh_j": 994, "h_j": 994, "v_i": 994, "b_i": 994, "sum_h": 994, "fantasi": 994, "particl": 994, "thoroughli": 994, "hereund": 995, "1443": 995, "1471": 995, "outlying": 995, "h2009": 996, "g2015": 996, "absurd": 996, "m2019": 996, "bike": 996, "mc_clf": 996, "466": 996, "624": 996, "overlaid": 996, "obscur": [996, 1047], "cice": [996, 1045], "pd_": 996, "dx_c": 996, "footnot": [996, 1009], "opaqu": 997, "356": 997, "probe": 997, "050": 997, "048": 997, "033": 997, "056": 997, "r_multi": 997, "029": 997, "1013": 997, "866": 997, "726": 997, "298": 997, "277": [997, 1033], "i_j": 997, "min_max_scal": 999, "x_train_minmax": 999, "x_test_minmax": 999, "max_abs_scal": 999, "x_train_maxab": 999, "x_test_maxab": 999, "unintention": 999, "semidefinit": [999, 1004], "scholkopf1998": 999, "1_": 999, "x_train_tran": 999, "x_test_tran": 999, "8pt": 999, "x_normal": 999, "firefox": 999, "chrome": 999, "safari": 999, "africa": 999, "dragon": 999, "lexicon": 999, "par": 999, "tau": 999, "iy_j": 999, "l_i": 999, "pargent": 999, "pfister": 999, "2671": 999, "2692": 999, "infant": 999, "kid": 999, "teen": 999, "senior": [999, 1014], "citizen": 999, "retbin": 999, "x_1x_2": 999, "x_1x_3": 999, "x_2x_3": 999, "x_1x_2x_3": 999, "rung": 999, "eiler": 999, "marx": 999, "perperogl": 999, "sauerbrei": 999, "abrahamowicz": 999, "bmc": 999, "methodol": 999, "38629436": 999, "sixteenth": 1001, "uai": 1001, "craig": [1001, 1034, 1039], "boutili": 1001, "mois\u00e9": 1001, "goldszmidt": 1001, "morgan": [1001, 1005, 1007], "kaufmann": [1001, 1005, 1043], "ella": 1001, "bingham": 1001, "heikki": 1001, "mannila": 1001, "245": [1001, 1033], "explic": 1001, "3947": 1001, "kenneth": [1001, 1031, 1032, 1037, 1038, 1045, 1046], "12th": 1001, "296": 1001, "x_new_invers": 1001, "x_new_again": 1001, "delalleau": 1002, "216": 1002, "aistat": 1002, "gatsbi": 1002, "ucl": 1002, "uk": [1002, 1025], "fullpap": 1002, "xi_i": 1003, "slack": 1003, "t_0": 1003, "l\u00e9on": [1003, 1045, 1046, 1047], "_init_t": 1003, "basesgd": 1003, "eta_0": 1003, "_t": 1003, "svmsgd": 1003, "pegaso": 1003, "srebro": 1003, "tsuruoka": 1003, "tsujii": 1003, "ananiad": 1003, "afnlp": 1003, "lin_clf": 1004, "grasp": [1004, 1010], "sv": 1004, "builtin": 1004, "qp": 1004, "linear_svc": 1004, "gram_train": 1004, "gram_test": 1004, "zeta": 1004, "zeta_i": 1004, "textrm": [1004, 1023], "q_": 1004, "reparameter": 1004, "wu": [1004, 1035, 1043], "weng": 1004, "1005": 1004, "rong": 1004, "aug": 1004, "1871": 1004, "1874": 1004, "ofmulticlass": 1004, "fitter": 1005, "pariti": 1005, "multiplex": 1005, "export_graphviz": [1005, 1036, 1038, 1044, 1046, 1047], "export_text": [1005, 1040, 1047], "dumont": 1005, "subwindow": 1005, "dichotomis": 1005, "quinlan": 1005, "multiwai": 1005, "proprietari": 1005, "ruleset": 1005, "q_m": 1005, "n_m": 1005, "t_m": 1005, "setminu": 1005, "mk": 1005, "_m": 1005, "ge0": 1005, "widetild": 1005, "tradition": 1005, "t_t": 1005, "eff": 1005, "predictive_analyt": 1005, "artwork": 1007, "fund": 1007, "spotifi": 1007, "betawork": 1007, "evernot": 1007, "aweb": 1007, "yhat": 1007, "rangespan": 1007, "birchbox": 1007, "bestofmedia": 1007, "phimeca": 1007, "howaboutw": 1007, "peerindex": 1007, "datarobot": 1007, "okcupid": 1007, "love": [1007, 1025], "publica": 1007, "machinali": 1007, "solido": 1007, "infonea": 1007, "dataiku": 1007, "otto": 1007, "zopa": 1007, "bnp": 1007, "pariba": 1007, "cardif": 1007, "post1": [1007, 1029], "foot": 1008, "gear": 1008, "neuroimag": [1008, 1014], "astronom": 1008, "pycon": 1008, "thirti": 1008, "nyc": [1008, 1014], "sister": 1009, "sklearn_panda": 1009, "sklearn_xarrai": 1009, "xarrai": 1009, "autoviml": 1009, "tpot": 1009, "featuretool": 1009, "neuraxl": 1009, "neat": [1009, 1031], "checkpoint": 1009, "funki": 1009, "saver": 1009, "evalml": 1009, "mlflow": 1009, "lifecycl": [1009, 1010], "neptun": 1009, "mlop": 1009, "sacr": 1009, "dtreeviz": 1009, "eli5": 1009, "yellowbrick": 1009, "deap": 1009, "evolutionari": 1009, "interchang": [1009, 1048], "skop": [1009, 1027], "jpmml": 1009, "porter": 1009, "transpil": 1009, "javascript": 1009, "m2cgen": 1009, "dart": 1009, "haskel": 1009, "rust": 1009, "treelit": 1009, "micromlgen": 1009, "microml": 1009, "microcontrol": 1009, "emlearn": 1009, "c99": 1009, "arima": 1009, "skforecast": 1009, "tslearn": 1009, "hmmlearn": 1009, "pomegran": 1009, "crfsuit": 1009, "skorch": 1009, "scikera": 1009, "scikit_learn": 1009, "feder": 1009, "privaci": 1009, "homomorph": 1009, "encrypt": 1009, "mlxtend": 1009, "lego": 1009, "subsembl": 1009, "lightn": 1009, "sdca": 1009, "adagrad": 1009, "svrg": 1009, "gplearn": 1009, "genet": 1009, "multilearn": 1009, "seglearn": 1009, "fastfm": 1009, "kmode": 1009, "sphereclust": 1009, "mise": 1009, "giotto": 1009, "tda": 1009, "pymc": 1009, "censor": 1009, "lightfm": 1009, "openrec": 1009, "gensim": 1009, "nilearn": 1009, "neuro": 1009, "astroml": 1009, "astronomi": 1009, "dissemin": 1009, "chines": 1009, "persian": 1009, "spanish": 1009, "korean": 1009, "disclaim": 1009, "promis": 1010, "eleven": 1010, "incept": 1010, "scala": 1010, "reinforc": 1010, "era": 1010, "7242": 1010, "12147": 1010, "5523": 1010, "10733": 1010, "13902": [1010, 1041], "12800": 1010, "12866": 1010, "15550": 1010, "5853": 1010, "11805": 1010, "15319": 1010, "11977": 1010, "12852": [1010, 1041], "13911": [1010, 1041], "amput": 1010, "6284": 1010, "beginn": 1010, "priorit": [1010, 1038], "4497": 1010, "7646": 1010, "6425": 1010, "6424": 1010, "8480": 1010, "6231": 1010, "8100": 1010, "6599": 1010, "6715": 1010, "14582": 1010, "3855": 1010, "13227": 1010, "6323": 1010, "14180": [1010, 1042], "9173": 1010, "13146": [1010, 1041], "8614": 1010, "7608": 1010, "5082": 1010, "8243": 1010, "searchgrid": 1010, "6929": 1010, "__array_function__": [1010, 1041], "etl": [1010, 1014], "8370": 1010, "6451": 1010, "8157": 1010, "7382": 1010, "drift": 1010, "11047": [1010, 1041], "9326": 1010, "slep011": 1010, "1626": 1010, "10463": 1010, "id3": [1012, 1027], "cart": [1012, 1027], "touch": 1013, "savetxt": 1013, "cloneabl": 1013, "datafil": 1013, "printabl": 1013, "indispens": 1014, "stephen": [1014, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044], "simmon": 1014, "vp": 1014, "athena": 1014, "music": 1014, "bernhardsson": 1014, "pariet": [1014, 1031], "lear": 1014, "visag": 1014, "fantast": 1014, "startup": 1014, "bitli": 1014, "chartbeat": 1014, "digg": [1014, 1038], "poncho": 1014, "gilad": 1014, "lotan": 1014, "chief": 1014, "chat": 1014, "bread": 1014, "butter": 1014, "chaumond": [1014, 1039], "offic": 1014, "ayzenshtat": [1014, 1039], "undergrad": 1014, "professor": 1014, "hotel": 1014, "destin": 1014, "agent": 1014, "melani": [1014, 1038, 1039], "awesom": 1014, "stuff": 1014, "randomizedpca": [1014, 1031, 1033, 1034, 1036, 1037, 1038], "boston": 1014, "mdbecker": 1014, "pydata_2013": 1014, "ninja": 1014, "thorough": 1014, "notch": 1014, "production": 1014, "greg": [1014, 1037, 1038, 1040, 1041], "lamp": 1014, "founder": 1014, "prototyp": 1014, "jurgen": 1014, "director": 1014, "commerc": 1014, "inventori": 1014, "bertin": 1014, "mahieux": 1014, "invalu": 1014, "vijai": [1014, 1034], "surrog": 1014, "traine": 1014, "impress": 1014, "traffic": 1014, "tenur": 1014, "matchmak": 1014, "weitzenfeld": 1014, "tweet": 1014, "ferenc": 1014, "huszar": 1014, "shop": 1014, "ourselv": 1014, "jeremi": [1014, 1036, 1037, 1038, 1039, 1042, 1043], "achin": 1014, "ceo": 1014, "marketplac": 1014, "frid": [1014, 1034], "radar": 1014, "partnership": 1014, "lebourgeoi": 1014, "charron": [1014, 1034, 1035, 1042, 1043, 1044], "cornerston": 1014, "sheep": 1014, "featureforg": 1014, "rafael": [1014, 1032, 1033, 1035, 1038], "carrascosa": [1014, 1035], "law": 1014, "semiconductor": 1014, "fab": [1014, 1041, 1042], "bleed": 1014, "smartphon": 1014, "automobil": 1014, "trent": [1014, 1037], "mcconaghi": 1014, "rapid": 1014, "immens": 1014, "thorsten": 1014, "kranz": 1014, "coma": 1014, "dss": 1014, "douetteau": 1014, "b2c": 1014, "retail": 1014, "palladium": 1014, "rammig": [1014, 1037], "peer": 1014, "lend": 1014, "billion": 1014, "gbp": 1014, "grate": 1014, "vlasio": [1014, 1038], "vasilei": [1014, 1038], "petfood": 1014, "cocoa": 1014, "worldwid": 1014, "toolset": 1014, "equip": 1014, "fitzk": 1014, "sr": 1014, "fondat": 1014, "s\u00e9bastien": [1014, 1037, 1039], "conort": 1014, "salmon": 1016, "nine": 1016, "sentiment": 1017, "cli": 1017, "doctest_mod": 1017, "hardest": 1018, "tightli": 1019, "knit": 1019, "x_fold": 1020, "array_split": 1020, "y_fold": 1020, "934": 1020, "train_indic": 1020, "test_indic": 1020, "963": 1020, "922": 1020, "930": 1020, "96388889": 1020, "92222222": 1020, "9637883": 1020, "93036212": 1020, "96578289": 1020, "92708922": 1020, "96681476": 1020, "96362897": 1020, "93192644": 1020, "0077": 1020, "943": 1020, "00375": 1020, "lfw_": 1021, "_lfw": 1021, "gerhard_schroed": 1021, "donald_rumsfeld": 1021, "tony_blair": 1021, "colin_powel": 1021, "george_w_bush": 1021, "estimated_param_": 1022, "iris_x": 1023, "iris_i": 1023, "iris_x_train": 1023, "iris_y_train": 1023, "iris_x_test": 1023, "iris_y_test": 1023, "pave": 1023, "paltri": 1023, "exabyt": 1023, "30349955": 1023, "237": 1023, "63931533": 1023, "510": 1023, "53060544": 1023, "73698041": 1023, "13170937": 1023, "81458798": 1023, "84845219": 1023, "60648906": 1023, "51961675": 1023, "09517222": 1023, "585": 1023, "5854": 1023, "5855": 1023, "occam": 1023, "razor": 1023, "best_alpha": [1023, 1031], "025118864315095794": 1023, "313": 1023, "508": 1023, "knew": 1024, "taxonomist": 1024, "face_compress": 1024, "x_approx": 1024, "images_approx": 1024, "18565811e": 1024, "19346747e": 1024, "43026679e": 1024, "text_analyt": 1025, "skeleton": [1025, 1034], "sklearn_tut_workspac": 1025, "cp": 1025, "work_directori": 1025, "tutorial_hom": 1025, "fetch_data": 1025, "lang": 1025, "newsweed": 1025, "netnew": 1025, "bydat": 1025, "twenty_train": 1025, "holder": 1025, "2257": 1025, "sd345": 1025, "collier": 1025, "laserjet": 1025, "iii": [1025, 1045], "hampton": 1025, "4gb": 1025, "count_vect": 1025, "x_train_count": 1025, "35788": 1025, "4690": 1025, "downscal": 1025, "tf_transform": 1025, "x_train_tf": 1025, "tfidf_transform": 1025, "x_train_tfidf": 1025, "na\u00efv": 1025, "docs_new": 1025, "opengl": 1025, "x_new_count": 1025, "x_new_tfidf": 1025, "text_clf": 1025, "twenty_test": 1025, "docs_test": 1025, "8348": 1025, "9101": [1025, 1039], "1502": 1025, "353": 1025, "tfidf__use_idf": 1025, "searcher": 1025, "gs_clf": 1025, "workspac": 1025, "fear": 1025, "fire": 1025, "exercise_xx_script": 1025, "arg1": 1025, "arg2": 1025, "arg3": 1025, "mortem": 1025, "exercise_01_language_train_model": 1025, "exercise_02_senti": 1025, "movie_review": 1025, "txt_sentoken": 1025, "cpickl": 1025, "subtleti": 1027, "subscrib": 1029, "gzip": 1031, "bzip2": 1031, "decompress": 1031, "auc_scor": [1031, 1033], "kernc": [1031, 1045, 1046], "led": 1031, "probabilisticpca": [1031, 1034], "hmm": [1031, 1032, 1033, 1034, 1036], "gaussianhmm": 1031, "multinomialhmm": 1031, "n_gram_rang": 1031, "267": 1031, "alexi": [1031, 1034, 1035, 1038], "mignon": [1031, 1034, 1035, 1038], "subhodeep": [1031, 1032, 1033], "moitra": [1031, 1032, 1033], "yannick": [1031, 1033], "schwartz": [1031, 1033, 1045], "duckworth": 1031, "benediktsson": [1031, 1032, 1033], "marko": [1031, 1040, 1041, 1047], "burjek": 1031, "pinto": 1031, "abraham": [1031, 1032, 1037, 1041], "hoenig": 1031, "flyingimmidev": 1031, "francoi": [1031, 1044], "savard": 1031, "hann": 1031, "schulz": 1031, "welind": 1031, "companioni": 1031, "brandyn": 1031, "bussonni": [1031, 1043], "matthia": [1031, 1033, 1034, 1037, 1038, 1039, 1043, 1046], "pierr": [1031, 1039, 1040, 1042, 1044, 1046], "astolfi": 1031, "huiginn": 1031, "goodman": [1031, 1036], "ludwig": 1031, "schwardt": 1031, "hervieu": 1031, "sergio": [1031, 1033, 1034, 1043, 1046], "medina": [1031, 1033], "sheerman": 1031, "buguen": 1031, "seq_dataset": [1031, 1041], "weight_vector": [1031, 1041], "reuben": 1031, "costin": 1031, "_basehmm": 1031, "neighborsregressor": 1031, "gone": [1031, 1032], "vbgmm": [1031, 1035, 1037], "_pvalu": 1031, "charset": [1031, 1033], "test_fract": 1031, "train_fract": 1031, "239": 1031, "marek": 1031, "fcostin": 1031, "adrien": 1031, "gaidon": 1031, "joona": 1031, "sillanp\u00e4\u00e4": 1031, "mccarthi": [1031, 1039], "roi": [1031, 1045], "hyunjin": 1031, "ibay": 1031, "scheidegg": 1031, "clair": 1031, "revillet": 1031, "conrad": [1031, 1032, 1046], "meng": [1031, 1032, 1035, 1037, 1038], "xinfan": [1031, 1032, 1035], "udi": 1031, "weinsberg": 1031, "janso": 1031, "palafox": 1031, "overwrite_": 1031, "copy_": 1031, "buffer_mb": 1031, "sparse_encode_parallel": 1031, "accident": [1031, 1035, 1040], "basedictionarylearn": 1031, "sparsecodingmixin": 1031, "fast_svd": 1031, "arnold": [1031, 1032], "bala": [1031, 1034], "subrahmanyam": [1031, 1034], "varanasi": [1031, 1034], "draxu": 1031, "eickenberg": [1031, 1033, 1034, 1035, 1036], "bogdan": 1031, "trach": 1031, "f\u00e9lix": [1031, 1033, 1034, 1035, 1039], "antoin": [1031, 1033, 1034, 1035, 1038], "fortin": [1031, 1033, 1034, 1035], "manuel": [1031, 1035, 1039, 1040, 1043, 1044], "caicedo": 1031, "carvaj": 1031, "tiziano": 1031, "zito": [1031, 1044], "jean": [1031, 1034, 1035, 1036, 1037, 1038, 1044], "kossaifi": [1031, 1035, 1036], "thumbnail": 1031, "mldata": [1031, 1039], "pietro": [1031, 1034], "berk": 1031, "macosx": 1031, "xarg": 1031, "bscikit": 1031, "cross_val": 1031, "bcross_val": 1031, "lurk": 1031, "l1_distanc": 1031, "sum_over_featur": [1031, 1046], "387": 1031, "168": 1031, "andi": [1031, 1038], "amit": [1031, 1045, 1046], "salvator": [1031, 1045, 1046], "masecchia": 1031, "schut": 1031, "metaireau": [1031, 1034], "bryan": [1031, 1034, 1040, 1041, 1044], "silverthorn": 1031, "minwoo": 1031, "luca": [1031, 1041, 1042, 1043, 1044], "wiman": 1031, "schl\u00fcter": [1031, 1039], "malet": 1031, "miott": [1031, 1034], "feth": 1031, "arezki": 1031, "yamin": 1031, "notes_neighbor": 1031, "netbsd": 1031, "kamel": 1031, "ibn": 1031, "hassen": 1031, "derouich": 1031, "virgilefritsch": 1031, "example_gaussian_process_plot_gp_regress": 1031, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1031, "tast": 1031, "2x": 1031, "10x": 1031, "200x": 1031, "ann": [1031, 1043, 1045], "laur": 1031, "fouqu": 1031, "ronan": [1031, 1034, 1039], "amicel": [1031, 1034], "osendorf": [1031, 1032], "gmmhmm": [1031, 1032], "latex": 1031, "mlcomp": 1031, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1031, "pybrain": 1031, "116": 1031, "rokem": [1031, 1037], "100x": [1031, 1034, 1048], "obsolet": [1031, 1047], "attrselect": 1031, "unmaintain": 1031, "lite": 1031, "filo": [1031, 1034], "mailhot": 1031, "huard": 1031, "dave": [1031, 1038, 1039, 1045, 1047], "morril": 1031, "schofield": 1031, "travi": [1031, 1039], "oliph": 1031, "pearu": 1031, "peterson": [1031, 1033], "0d": 1032, "marchman": [1032, 1033], "hrishikesh": [1032, 1033], "huilgolkar": [1032, 1033], "bastiaan": [1032, 1033], "diego": [1032, 1033], "molla": [1032, 1033], "cunha": [1032, 1033], "almeida": [1032, 1033, 1044], "rolando": [1032, 1033], "espinoza": [1032, 1033], "fuent": [1032, 1033], "beauchamp": [1032, 1035], "longstand": [1032, 1038], "shaun": 1032, "jackman": 1032, "winterman": 1032, "seberg": 1032, "n_atom": 1032, "label_propag": 1032, "learn_rat": 1032, "basegradientboost": 1032, "mean_square_error": 1032, "gmm_": 1032, "eig_tol": 1032, "chunk_siz": 1032, "zero_one_scor": 1032, "aymer": 1032, "masurel": 1032, "syhw": [1032, 1033], "corei": [1032, 1039, 1040], "lynch": [1032, 1038], "shu": [1032, 1035, 1039], "tadej": [1032, 1033], "jane\u017e": [1032, 1033], "caje": 1032, "tiago": [1032, 1036], "nune": 1032, "cow": 1032, "anz": 1032, "jauvin": 1032, "jacqu": [1032, 1034], "kvam": [1032, 1034], "doug": [1032, 1033, 1043], "coleman": [1032, 1033], "dickerson": 1032, "approximateident": 1032, "veronda": 1032, "matti": [1032, 1035, 1036], "lyra": [1032, 1035, 1036], "mikhail": [1032, 1033, 1034, 1037, 1038, 1046, 1047], "korobov": [1032, 1033, 1034, 1037, 1038], "alejandro": [1032, 1037, 1048], "weinstein": 1032, "deil": [1032, 1042, 1043], "nizhibitski": 1032, "coelho": [1032, 1034, 1035, 1039], "miroslav": [1032, 1033, 1036], "batchkarov": [1032, 1036], "pavel": [1032, 1040], "bob": [1032, 1038], "dengemann": 1032, "emanuel": 1032, "x006": 1032, "justin": [1033, 1039, 1043], "stochastic_gradi": [1033, 1034, 1040], "crombach": 1033, "sheet": 1033, "jaccard_similarity_scor": [1033, 1035, 1040], "jochen": 1033, "wersd\u00f6rfer": 1033, "sinayev": 1033, "unpleas": 1033, "novic": 1033, "tini": [1033, 1046], "hyperlink": 1033, "luessi": 1033, "philipp": [1033, 1034, 1037, 1046], "gervai": [1033, 1034], "cleverless": 1033, "nosetest": 1033, "compute_import": 1033, "return_model": [1033, 1035], "itergrid": 1033, "tacitli": 1033, "charset_error": 1033, "precompute_gram": 1033, "2224": 1033, "jim": 1033, "holmstr\u00f6m": 1033, "steven": [1033, 1034, 1036, 1038, 1039, 1044, 1046, 1047], "gryze": [1033, 1036], "sergeyf": 1033, "ben": [1033, 1034, 1035, 1038, 1039, 1040, 1043], "speer": 1033, "federico": [1033, 1034, 1039, 1040, 1045], "vaggi": [1033, 1034], "raul": [1033, 1034], "garreta": [1033, 1034], "gei": 1033, "flaxman": [1033, 1035], "denton": 1033, "cockburn": 1033, "dougal": [1033, 1035, 1036, 1038, 1039, 1040, 1041], "sutherland": [1033, 1035, 1036, 1038, 1039, 1040, 1041], "ian": [1033, 1035, 1040, 1041, 1043, 1046, 1047], "ozsvald": 1033, "johann": [1033, 1034, 1039, 1041, 1042, 1045], "sch\u00f6nberger": [1033, 1034], "szabo": [1033, 1034], "roland": [1033, 1034], "imran": [1033, 1034, 1035], "haqu": [1033, 1034, 1035], "karayev": 1033, "jamestwebb": [1033, 1034], "abhijeet": 1033, "kolh": 1033, "velkov": 1033, "fazlul": 1033, "shahriar": 1033, "felix": [1033, 1038, 1039, 1041, 1043, 1044, 1045], "brockherd": 1033, "harikrishnan": 1033, "jack": [1033, 1036, 1044, 1045, 1046, 1047], "hale": [1033, 1045], "jakemick": 1033, "mcdermott": 1033, "zwinck": 1033, "vredevoogd": [1033, 1034], "pati": 1033, "ekman": [1033, 1037], "shubernetskii": 1033, "naoki": [1033, 1043], "orii": 1033, "seamu": 1033, "absher": 1033, "feldman": [1033, 1038, 1039, 1040, 1041], "stefano": 1033, "lattarini": 1033, "steve": [1033, 1035, 1039, 1044, 1046], "koch": [1033, 1039, 1040, 1042, 1043], "sturla": 1033, "molden": 1033, "jarosch": 1033, "nikolai": [1034, 1035, 1036, 1037, 1039, 1040, 1045, 1047], "mayorov": [1034, 1035, 1036, 1037], "msvc": 1034, "mingw": 1034, "resourcewarn": 1034, "calvin": [1034, 1035], "gile": [1034, 1035], "billing": [1034, 1035, 1036], "safe_realloc": 1034, "bradshaw": [1034, 1035, 1038], "pico": [1034, 1035], "restor": [1034, 1039, 1040, 1041, 1042, 1046], "raff": 1034, "__array__": [1034, 1041], "jeffrei": [1034, 1037], "blackburn": [1034, 1037], "danni": [1034, 1035, 1036], "sullivan": [1034, 1035, 1036], "wignal": [1034, 1035, 1041, 1042], "grid_tograph": 1034, "gracefulli": [1034, 1035], "novak": 1034, "tulloch": [1034, 1035], "wardagglomer": 1034, "wardclust": 1034, "mean_l1_ratio": 1034, "phlypo": 1034, "312": 1034, "bommarito": [1034, 1035], "brook": [1034, 1035, 1043], "osborn": [1034, 1035], "eltermann": 1034, "bwignal": 1034, "ankit": [1034, 1041, 1043, 1045], "agraw": [1034, 1039, 1045, 1046], "carei": [1034, 1035, 1036, 1037, 1038], "ugurthemast": [1034, 1035], "schumach": [1034, 1035, 1036], "baptist": [1034, 1042], "lagard": 1034, "rajat": [1034, 1041], "khanduja": 1034, "pascual": 1034, "ignacio": 1034, "rossi": 1034, "s\u00e4ger": [1034, 1037], "ilambharathi": [1034, 1035], "kanniah": [1034, 1035], "sdenton4": 1034, "alyssa": [1034, 1038], "amo": 1034, "waterland": 1034, "murad": 1034, "maud": 1034, "karol": 1034, "pysniak": 1034, "cgohlk": [1034, 1035], "jacobsen": 1034, "collin": 1034, "kaushik94": 1034, "erwin": 1034, "marsi": 1034, "csytraci": 1034, "lk": 1034, "laurent": [1034, 1035, 1038, 1039, 1046, 1047], "direr": [1034, 1035, 1038, 1039], "shilt": 1034, "yoshiki": [1034, 1037], "v\u00e1zquez": 1034, "yung": [1034, 1037], "siang": 1034, "liau": 1034, "abhishek": [1034, 1035, 1041, 1045, 1047], "thakur": [1034, 1035], "rohit": [1034, 1035, 1039, 1040], "sivaprasad": [1034, 1035], "amormachin": 1034, "oscar": [1034, 1038], "carlsson": 1034, "nanta": 1034, "nardelli": 1034, "jess010": 1034, "kowalski87": 1034, "clegg": 1034, "ralf": [1034, 1037, 1038, 1046, 1047], "gommer": [1034, 1037, 1038, 1046, 1047], "rupesh": 1034, "srivastava": [1034, 1046], "ryan": [1034, 1037, 1039, 1040], "skipper": [1034, 1036, 1037], "seabold": [1034, 1036, 1037], "stefan": [1034, 1035, 1039, 1041], "walt": [1034, 1035, 1039], "riddel": [1034, 1036, 1038], "valentin": [1034, 1036, 1046, 1047], "haenel": 1034, "myer": [1034, 1038], "yoni": 1034, "meshulam": 1034, "yuri": [1034, 1036], "zaytsev": 1034, "adrinjalali": [1034, 1043], "ai8rahim": 1034, "alemagnani": 1034, "chalmerlow": 1034, "dziki": 1034, "dro\u017cd\u017c": 1034, "matrixorz": 1034, "popo": 1034, "samuela": 1034, "boulogn": 1034, "ethan": [1034, 1037], "guilherm": 1034, "trein": 1034, "heuer": 1034, "ivicajov": 1034, "rouli": 1034, "eduardo": [1034, 1036, 1044, 1045], "ari\u00f1o": 1034, "rubia": 1034, "jell": 1034, "zijlstra": 1034, "eddi": 1034, "jansson": [1034, 1046], "ca\u00f1ardo": 1034, "alastuei": 1034, "joseph": [1034, 1035, 1036, 1037, 1043, 1045, 1046], "perla": 1034, "ricardo": [1034, 1044, 1045], "kenta": 1034, "sato": 1034, "medri": 1034, "luce": 1034, "pierron": 1034, "danielweitzenfeld": 1034, "thompson": [1034, 1046, 1047], "brett": [1034, 1036, 1037, 1038, 1039, 1046], "feurer": [1034, 1039], "earl": 1034, "hank": 1034, "orr\u00f9": 1034, "lunt": 1034, "kearn": 1034, "pawe\u0142": [1034, 1038, 1043, 1044], "mandera": 1034, "zambelli": 1034, "staubda": 1034, "dedupl": 1035, "heilman": [1035, 1036], "precompute_dist": [1035, 1042], "lshforest": [1035, 1038], "qiang": 1035, "luo": 1035, "clemen": 1035, "brunner": 1035, "matteo": [1035, 1037, 1045], "visconti": 1035, "oleggio": 1035, "castello": 1035, "linkage_tre": 1035, "jatin": [1035, 1037], "shah": [1035, 1036, 1037, 1043], "saurabh": [1035, 1036, 1037, 1038, 1039, 1043], "jha": [1035, 1041, 1045], "blanchard": [1035, 1036], "michal": [1035, 1038, 1044, 1045], "romaniuk": 1035, "gilmor": 1035, "stapl": 1035, "hedyati": 1035, "antoni": [1035, 1037, 1043, 1046], "parel": 1035, "herv\u00e9": 1035, "bredin": 1035, "hasil": 1035, "sharma": [1035, 1037, 1039, 1040, 1042, 1043, 1045], "ducktyp": 1035, "download_20newsgroup": 1035, "friend": 1035, "cathi": [1035, 1041], "deng": [1035, 1036, 1037], "dawson": 1035, "garret": 1035, "hanna": [1035, 1036, 1042], "wallach": [1035, 1036], "yan": [1035, 1043], "artem": [1035, 1038], "sobolev": 1035, "fit_ovr": 1035, "predict_ovr": 1035, "predict_proba_ovr": 1035, "fit_ovo": 1035, "predict_ovo": 1035, "fit_ecoc": 1035, "predict_ecoc": 1035, "lamond": 1035, "outweigh": 1035, "thresh": 1035, "akshai": [1035, 1038, 1043], "akshayah3": 1035, "aldrian": 1035, "obaja": 1035, "ander": [1035, 1041], "aagaard": 1035, "cranenburgh": 1035, "walker": 1035, "banilo": [1035, 1036], "barmalei": [1035, 1036], "benedikt": 1035, "koehler": 1035, "bhsu": 1035, "bori": [1035, 1043, 1047], "feld": [1035, 1047], "borja": 1035, "ayerdi": 1035, "boyuan": [1035, 1036, 1037], "brent": [1035, 1039, 1040], "pedersen": [1035, 1047], "celeo": 1035, "chebee7i": 1035, "stade": 1035, "schuldt": 1035, "christof": [1035, 1036], "angermuel": [1035, 1036], "daiki": 1035, "aminaka": 1035, "danfrankj": 1035, "dmitrij": 1035, "milajev": 1035, "floydsoft": 1035, "garrett": 1035, "gpassino": 1035, "gwulf": [1035, 1036], "hampu": 1035, "bengtsson": 1035, "harri": [1035, 1037, 1043, 1044], "mavroforaki": [1035, 1037], "helder": [1035, 1044, 1045], "herv": 1035, "hugu": 1035, "salamin": 1035, "ism": 1035, "dlabal": 1035, "javier": 1035, "l\u00f3pez": [1035, 1039, 1040, 1043], "pe\u00f1a": 1035, "jdcaballero": 1035, "jeff": [1035, 1037, 1044, 1045], "hammerbach": 1035, "helmu": 1035, "kaicheng": 1035, "markham": [1035, 1042, 1043], "lagacheri": 1035, "leepei": 1035, "loic": [1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047], "estev": [1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047], "luka": [1035, 1042], "michelbach": 1035, "krell": [1035, 1037], "ku": [1035, 1036], "mateusz": [1035, 1042, 1043, 1048], "susik": 1035, "mehdi": [1035, 1044], "cherti": 1035, "mlg": 1035, "montecchio": 1035, "okal": 1035, "billi": 1035, "\u00f3scar": [1035, 1036, 1037, 1038], "n\u00e1jera": [1035, 1036, 1037, 1038], "puggioni": 1035, "pratap": [1035, 1038, 1045], "vardhan": 1035, "pvnguyen": 1035, "queqichao": 1035, "rahiel": 1035, "kasim": 1035, "mason": 1035, "saket": [1035, 1036, 1043], "choudhari": [1035, 1036, 1045, 1047], "sam": [1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046], "nichol": 1035, "sethdandridg": 1035, "sinhrk": [1035, 1036], "snuderl": 1035, "ott": 1035, "tjoa": 1035, "swu": 1035, "zimmer": [1035, 1045], "tejesh95": 1035, "terrycojon": 1035, "delteil": 1035, "toma": 1035, "kazmar": 1035, "trevorstephen": [1035, 1037], "tttthomasssss": 1035, "tzu": 1035, "kuo": 1035, "ugurcaliskan": 1035, "vinayak": [1035, 1036, 1037, 1039, 1040, 1046, 1047], "mehta": [1035, 1036, 1037, 1039, 1040, 1041, 1042, 1046, 1047], "vjacheslav": 1035, "murashkin": 1035, "wadawson": 1035, "x0l": 1035, "6147": 1036, "presort": [1036, 1041], "5857": 1036, "mcculloh": [1036, 1037], "6258": 1036, "giorgio": [1036, 1037, 1038], "patrini": [1036, 1037, 1038], "joe": 1036, "jevnik": 1036, "labelkfold": [1036, 1037], "labelshufflesplit": [1036, 1037], "mcfee": [1036, 1037], "3659": 1036, "4738": 1036, "projectedgradientnmf": 1036, "nls_max_it": 1036, "erick": 1036, "moodi": 1036, "4025": 1036, "mean_shift": [1036, 1039], "martino": 1036, "sorbaro": 1036, "cori": 1036, "konstantin": [1036, 1037, 1038], "shmelkov": 1036, "backlink": 1036, "jaidev": 1036, "deshpand": [1036, 1037], "dictlearn": 1036, "kashif": 1036, "rasul": [1036, 1038, 1039], "galvez": 1036, "sonni": 1036, "hu": [1036, 1039, 1041], "santi": [1036, 1038, 1039], "villalba": [1036, 1039, 1043], "5186": 1036, "stolbunov": 1036, "booster": 1036, "graham": [1036, 1037], "clenaghan": [1036, 1037], "clyde": 1036, "subproblem": 1036, "forestclassifi": 1036, "ankur": [1036, 1047], "ankan": 1036, "henri": [1036, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1046], "5431": 1036, "buddha": 1036, "prakash": [1036, 1038, 1044], "5182": 1036, "lamb": [1036, 1044], "5282": 1036, "5355": 1036, "5360": 1036, "4478": 1036, "5337": 1036, "4362": 1036, "5495": 1036, "elvi": [1036, 1037, 1038], "dohmatob": [1036, 1037, 1038], "data_min": 1036, "data_max": 1036, "data_rang": 1036, "vighnesh": [1036, 1037, 1039], "birodkar": [1036, 1037, 1039], "_learntselectormixin": 1036, "gradientboost": 1036, "metatransfom": 1036, "load_lfw_pair": 1036, "wardagglom": 1036, "residues_": 1036, "indicator_matrix_": 1036, "adithya": 1036, "ganesh": [1036, 1048], "akitti": 1036, "alexei": 1036, "grigorev": 1036, "ali": [1036, 1039, 1040, 1043, 1044, 1046, 1047], "baharev": 1036, "ando": 1036, "saaba": 1036, "anish": [1036, 1037], "anthoni": [1036, 1038, 1039], "erling": 1036, "rouvinen": 1036, "rachez": [1036, 1037], "benjaminirv": 1036, "naul": [1036, 1037], "gohlk": 1036, "bourguignat": 1036, "cindi": [1036, 1044], "sridharan": 1036, "kronovet": 1036, "data1010": 1036, "dotson": 1036, "djipei": [1036, 1037], "dmitri": [1036, 1038, 1039, 1040, 1044, 1047], "spikhalskii": 1036, "donn": 1036, "duart": [1036, 1044, 1046], "caro": 1036, "larson": [1036, 1040, 1041, 1043, 1045], "fernando": [1036, 1043], "carrillo": 1036, "eckert": 1036, "zalkow": 1036, "ganiev": [1036, 1037, 1038], "ibraim": [1036, 1037, 1038], "giorgiop": 1036, "gryllo": [1036, 1039], "prokopi": [1036, 1039], "hsuan": 1036, "tien": 1036, "ishank": [1036, 1037, 1038], "gulati": [1036, 1037, 1038], "jeffrey04": [1036, 1037], "jfraj": 1036, "jiali": 1036, "mei": [1036, 1041], "kirkham": [1036, 1037, 1039], "wittenau": 1036, "loyal": 1036, "jungkook": 1036, "park": [1036, 1041, 1043, 1046, 1047], "kamalakerdadi": [1036, 1037], "kyler": 1036, "lilian": [1036, 1037, 1048], "besson": [1036, 1037], "tiao": [1036, 1037], "marktab": 1036, "spacek": 1036, "martinbpr": [1036, 1037], "martinosorb": 1036, "maryanmorel": [1036, 1037], "masafumi": 1036, "oyamada": 1036, "krump": 1036, "kolganov": 1036, "mbilling": 1036, "mhg": 1036, "patterson": 1036, "omer": 1036, "katz": [1036, 1043, 1044], "pauli": 1036, "virtanen": 1036, "fischer": [1036, 1037], "pianomania": 1036, "preston": [1036, 1037, 1038], "parri": [1036, 1037, 1038], "rohan": [1036, 1037, 1039, 1040, 1044], "ramanath": 1036, "bansod": [1036, 1037, 1038], "scls19fr": 1036, "saeger": [1036, 1037, 1038], "shivan": 1036, "sornarajah": 1036, "simonpl": 1036, "sseg": 1036, "hoover": [1036, 1037, 1038, 1040], "seguin": 1036, "theodor": 1036, "vasiloudi": 1036, "freita": [1036, 1038, 1039], "pereira": [1036, 1039, 1040], "timothi": [1036, 1044], "hopper": 1036, "tokoroten": 1036, "vstolbunov": 1036, "wangz10": 1036, "yucheng": 1036, "zhauniarovich": 1036, "zac": 1036, "stewart": [1036, 1041, 1044, 1046], "zhai_pro": 1036, "zichen": 1036, "7946": 1037, "8355": 1037, "9010": 1037, "8040": 1037, "9149": 1037, "aman": [1037, 1038, 1039, 1045, 1046], "dalmia": [1037, 1038, 1039], "nate": [1037, 1038, 1044], "guerin": [1037, 1038], "lebedev": [1037, 1038], "utilis": 1037, "6497": 1037, "7724": 1037, "bing": [1037, 1038], "explained_variance_ratio": 1037, "7632": 1037, "jpfrancoia": [1037, 1038], "7676": 1037, "moham": [1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "affan": 1037, "7756": 1037, "7786": 1037, "srivatsan": [1037, 1038, 1041], "7799": 1037, "7490": [1037, 1038], "6282": 1037, "7301": 1037, "6178": 1037, "7680": 1037, "n_iters_": 1037, "7553": 1037, "ekaterina": [1037, 1038, 1039, 1040, 1042, 1047], "krivich": [1037, 1038, 1040], "5874": 1037, "7593": 1037, "7594": 1037, "7660": 1037, "7750": 1037, "7732": 1037, "artsion": 1037, "lieu": [1037, 1038], "grid_scores_": [1037, 1043, 1044], "leaveonelabelout": 1037, "leaveplabelout": 1037, "plural": 1037, "mean_tim": 1037, "std_time": 1037, "3204": 1037, "5291": 1037, "sounder": 1037, "7295": 1037, "5299": 1037, "bravi": 1037, "fouchet": 1037, "calinski_harabaz_scor": [1037, 1039], "harabaz": 1037, "6586": 1037, "4294": 1037, "6667": 1037, "6954": 1037, "unveil": 1037, "yelit": 1037, "basebag": [1037, 1039], "staub": 1037, "5805": 1037, "5251": 1037, "imacul": 1037, "1000x": 1037, "arfa": 1037, "6691": 1037, "6913": 1037, "5762": 1037, "utkarsh": [1037, 1038, 1039, 1040], "upadhyai": [1037, 1038, 1039, 1040], "6846": 1037, "5929": 1037, "podshumok": [1037, 1038], "6173": 1037, "ryad": 1037, "zenin": 1037, "devashish": 1037, "asish": [1037, 1038], "dowl": 1037, "6697": 1037, "ori": 1037, "ziv": 1037, "sear": 1037, "merritt": 1037, "7325": 1037, "7239": 1037, "hong": [1037, 1039, 1043, 1044, 1045, 1047], "guangguo": 1037, "jensen": [1037, 1043], "7419": 1037, "gregori": [1037, 1041, 1042, 1043, 1044], "stupp": [1037, 1038], "bernardo": 1037, "stein": 1037, "sparse_func": [1037, 1043], "incr_mean_variance_axi": [1037, 1043], "7049": 1037, "7152": 1037, "load_boston": [1037, 1039, 1044], "7154": 1037, "manvendra": [1037, 1038], "singh": [1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "5540": 1037, "7248": 1037, "6764": 1037, "wenhua": 1037, "6817": 1037, "6902": 1037, "leonieborn": 1037, "5141": 1037, "4995": 1037, "5012": 1037, "_transform_select": 1037, "7194": 1037, "caio": [1037, 1039, 1041], "oliveira": [1037, 1039, 1041, 1045], "6182": 1037, "6121": 1037, "6472": 1037, "7350": 1037, "russel": [1037, 1038], "smith": [1037, 1038, 1039, 1040, 1041, 1043], "7159": 1037, "yichuan": [1037, 1038], "5460": 1037, "document_clust": 1037, "7353": 1037, "_search": 1037, "_check_param_grid": 1037, "xrang": 1037, "7323": 1037, "viacheslav": 1037, "kovalevskyi": 1037, "7101": 1037, "residual_metr": 1037, "6651": 1037, "reorgan": 1037, "7187": 1037, "7260": 1037, "sebasti\u00e1n": 1037, "vanrel": 1037, "leaveplabelsout": 1037, "6660": 1037, "unprefix": 1037, "7261": 1037, "aditya": [1037, 1039, 1040, 1041, 1045, 1046], "joshi": [1037, 1039, 1045, 1048], "loginov": 1037, "minyushkin": 1037, "rudi": 1037, "abadi": [1037, 1038], "saint": 1037, "alexfield": 1037, "alvaro": [1037, 1039], "ulloa": 1037, "alyssaq": 1037, "amlan": 1037, "kar": 1037, "giessel": 1037, "jackson": [1037, 1038, 1040], "murrai": [1037, 1038], "arafat": 1037, "archit": 1037, "asnt": 1037, "b0noi": 1037, "behzad": 1037, "tabibian": 1037, "kratzwald": 1037, "bhargav": 1037, "mangipudi": 1037, "blakeflei": 1037, "brandon": [1037, 1038, 1045, 1046], "carter": [1037, 1038, 1046], "camilo": 1037, "lamu": 1037, "carol": [1037, 1038], "Willing": [1037, 1038], "cass": 1037, "ceshin": 1037, "truong": 1037, "codevig": 1037, "shiebler": 1037, "hnyk": [1037, 1038], "elli": [1037, 1040], "nicholson": [1037, 1038, 1039], "thaler": 1037, "warshaw": 1037, "lasagna": 1037, "deborah": [1037, 1038], "definitelyuncertain": 1037, "didi": [1037, 1038, 1039, 1040], "zev": [1037, 1038, 1039, 1040], "dsquareindia": 1037, "edwinensa": 1037, "elia": 1037, "kuth": 1037, "fabio": 1037, "ticconi": 1037, "fisach": 1037, "donovan": 1037, "ghg": 1037, "giovanni": [1037, 1039], "cherubin": 1037, "lanzani": 1037, "glenn": 1037, "qian": [1037, 1042], "mohr": 1037, "govin": 1037, "vatsan": 1037, "reda": 1037, "gustav": 1037, "m\u00f6rtberg": 1037, "halwai": 1037, "harizo": [1037, 1038], "rajaona": [1037, 1038], "hashcode55": 1037, "hdmetor": 1037, "hobson": 1037, "lane": 1037, "bown": 1037, "igor": [1037, 1038, 1044], "andriushchenko": [1037, 1038], "inki": 1037, "hwang": 1037, "isaac": [1037, 1038, 1040, 1041, 1048], "sijaranamu": 1037, "iver": 1037, "jordal": 1037, "jackmartin": 1037, "fiedler": 1037, "routlei": 1037, "zike": 1037, "janna": 1037, "brettingen": 1037, "jarfa": 1037, "laska": 1037, "jblackburn": 1037, "levesqu": 1037, "hintz": 1037, "jeremynixon": 1037, "jeroen": 1037, "jessica": 1037, "jill": 1037, "j\u00eann": 1037, "vie": 1037, "jia": 1037, "jiyuan": 1037, "johannah": 1037, "boersma": 1037, "moeller": 1037, "striebel": [1037, 1038], "joncral": 1037, "jordi": 1037, "munoz": [1037, 1043], "jrfiedler": 1037, "juliankahnert": 1037, "juliathebrav": 1037, "kaichogami": 1037, "lyon": [1037, 1038], "kingjr": 1037, "kjell": 1037, "krishna": [1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046], "kalyan": 1037, "krishnakalyan3": 1037, "kvle": 1037, "putnam": 1037, "ldavid": 1037, "leig": 1037, "leightonzhang": 1037, "leland": [1037, 1038, 1039, 1041, 1042, 1047], "liang": [1037, 1042, 1043], "hsieh": 1037, "lizsz": 1037, "l\u00e9oni": 1037, "born": 1037, "maniteja": [1037, 1038, 1039], "nandana": [1037, 1038, 1039], "marco": [1037, 1039, 1040, 1044, 1045, 1046], "bao": [1037, 1045], "szepieniec": 1037, "madsen": [1037, 1039], "massil": 1037, "matheu": 1037, "duboi": [1037, 1039], "moroz": 1037, "scherer": 1037, "michiaki": 1037, "ariga": 1037, "moussa": 1037, "taifi": 1037, "mrandrewandrad": 1037, "mridul": 1037, "seth": 1037, "nadya": 1037, "naoya": [1037, 1038, 1039, 1040], "kanai": [1037, 1038, 1039], "nickledav": 1037, "nico": [1037, 1044], "ningchi": 1037, "nlathia": 1037, "okbalefthand": 1037, "okhlopkov": [1037, 1038], "pano": 1037, "lourida": 1037, "strickland": 1037, "perrin": 1037, "letelli": 1037, "pestrickland": 1037, "practicalswift": 1037, "qimu": 1037, "zheng": [1037, 1038, 1043], "rachit": [1037, 1043, 1046], "kansal": 1037, "ramana": [1037, 1038], "randi": 1037, "olson": 1037, "lutz": [1037, 1041, 1044], "schucker": 1037, "jain": [1037, 1038, 1039, 1043, 1045, 1046], "ruifeng": [1037, 1038, 1043], "r\u00e9my": 1037, "l\u00e9one": 1037, "saihttam": 1037, "saiw": 1037, "yeung": 1037, "shleifer": [1037, 1038], "sartaj": 1037, "sasank": 1037, "chilamkurthi": 1037, "seal": 1037, "shagun": 1037, "sodhani": 1037, "shanmuga": 1037, "shashank": [1037, 1043], "shekhar": 1037, "shawpan": 1037, "shengxiduan": 1037, "shota": 1037, "shuckle16": 1037, "smedbergm": 1037, "srvanrel": 1037, "leriqu": [1037, 1039], "taranjeet": 1037, "themrmax": [1037, 1038], "hallock": 1037, "moreau": [1037, 1038, 1039, 1040, 1041], "tkammi": 1037, "toastedcornflak": [1037, 1038], "tomdlt": 1037, "toshihiro": [1037, 1038, 1044], "kamishima": [1037, 1038], "tracer0tong": 1037, "hauck": 1037, "vo": [1037, 1045], "varun": [1037, 1038, 1039, 1045, 1046], "jewalikar": 1037, "vikram": [1037, 1046, 1047], "villu": 1037, "ruusmann": 1037, "walter": 1037, "waterponei": [1037, 1038], "wenjian": 1037, "welch": 1037, "wyseguy7": 1037, "xyguo": [1037, 1039], "yanlend": 1037, "yen": [1037, 1038], "yenchenlin": 1037, "yoav": 1037, "zivori": 1037, "10723": [1038, 1039], "9623": 1038, "undocu": 1038, "deleteri": 1038, "9677": 1038, "ashutosh": [1038, 1039, 1041, 1043], "correlation_model": 1038, "regression_model": 1038, "belatedli": 1038, "9717": 1038, "9693": 1038, "steingold": [1038, 1039], "9711": 1038, "goncalo": [1038, 1039], "rodrigu": [1038, 1039, 1044], "9641": 1038, "bourbeau": [1038, 1039, 1040], "9865": 1038, "sachin": [1038, 1039, 1045], "kelkar": [1038, 1039, 1041], "9922": 1038, "charli": [1038, 1039, 1047], "brummitt": [1038, 1039], "9945": 1038, "9830": 1038, "9600": 1038, "kerimov": [1038, 1039], "9593": 1038, "reiichiro": [1038, 1039], "nakano": [1038, 1039], "9604": 1038, "interim": 1038, "9558": 1038, "9847": 1038, "joan": [1038, 1039, 1040, 1041], "massich": [1038, 1039, 1040, 1041], "oli": 1038, "blum": 1038, "9697": 1038, "9750": 1038, "9788": 1038, "9815": 1038, "9802": 1038, "vrishank": [1038, 1039], "bhardwaj": [1038, 1039], "nagarjuna": [1038, 1039], "nathaniel": [1038, 1039, 1041], "diegodlh": [1038, 1039], "jkleint": [1038, 1039], "oliblum90": [1038, 1039], "pasbi": [1038, 1039], "lawson": [1038, 1039, 1040], "nielsenmarkus11": [1038, 1039], "excit": 1038, "cautiou": 1038, "min_impurity_split": 1038, "7823": [1038, 1039], "8446": 1038, "5279": 1038, "8363": 1038, "5295": 1038, "7388": 1038, "userguid": 1038, "7655": 1038, "karan": [1038, 1039, 1040], "desai": [1038, 1040, 1043, 1044, 1046, 1047], "7739": 1038, "gasquez": 1038, "8120": 1038, "neeraj": 1038, "gangwar": 1038, "7548": 1038, "9206": 1038, "7441": 1038, "6101": 1038, "8698": 1038, "7794": 1038, "herilalaina": [1038, 1039, 1041], "rakotoarison": [1038, 1039, 1041], "5036": 1038, "4939": 1038, "esuli": [1038, 1043], "n_skips_": 1038, "7914": 1038, "horrel": 1038, "8591": 1038, "hadrien": [1038, 1041], "7838": 1038, "8835": 1038, "8061": 1038, "cordier": 1038, "6288": 1038, "9145": 1038, "reddi": [1038, 1039, 1040, 1045], "chinthala": 1038, "7721": 1038, "crall": [1038, 1044], "7685": 1038, "tommi": [1038, 1039, 1040], "l\u00f6fstedt": 1038, "9277": 1038, "hongkahjun": 1038, "7089": 1038, "randomized_svd_low_rank": 1038, "9067": 1038, "6181": 1038, "wendling": 1038, "8065": 1038, "lejeun": 1038, "7567": 1038, "jay": 1038, "doepk": 1038, "7573": 1038, "romain": [1038, 1043], "brault": 1038, "5229": 1038, "7990": 1038, "8586": 1038, "7723": 1038, "8028": 1038, "booth": 1038, "8005": 1038, "7863": 1038, "7506": 1038, "5991": 1038, "8845": 1038, "8053": 1038, "8282": 1038, "8117": 1038, "9259": 1038, "8094": 1038, "8335": 1038, "poughon": 1038, "7880": 1038, "karnofski": 1038, "935": 1038, "8931": 1038, "attractador": [1038, 1039], "8002": 1038, "8549": 1038, "zerodivisionerror": [1038, 1041, 1047], "7501": 1038, "dominik": [1038, 1047], "krzeminski": 1038, "7970": 1038, "8006": 1038, "p\u00f6lsterl": [1038, 1041, 1044], "8936": 1038, "8672": 1038, "mike": 1038, "benfield": 1038, "broke": 1038, "8068": 1038, "5732": 1038, "ytrue": 1038, "ypred": 1038, "8087": 1038, "7983": 1038, "8512": 1038, "8251": 1038, "aivision2020": 1038, "5814": 1038, "7849": 1038, "jair": 1038, "montoya": 1038, "martinez": 1038, "randomizedlasso": 1038, "5359": 1038, "9302": 1038, "8160": 1038, "8224": 1038, "gedeck": 1038, "vathsala": [1038, 1039, 1040, 1041], "achar": [1038, 1039, 1040, 1041], "9022": 1038, "mehmet": [1038, 1044], "basbug": 1038, "9024": 1038, "8973": 1038, "paulo": [1038, 1044, 1046], "haddad": 1038, "unmeaning": 1038, "6573": 1038, "quazi": [1038, 1039], "marufur": 1038, "rahman": [1038, 1039, 1043], "baselabelpropag": 1038, "9239": 1038, "andr": [1038, 1045], "ambrosio": 1038, "boechat": 1038, "early_exager": 1038, "assertionerror": 1038, "8992": 1038, "7954": 1038, "foreman": 1038, "9105": 1038, "9108": 1038, "8306": 1038, "7872": 1038, "_c_step": 1038, "3367": 1038, "steward": 1038, "8768": 1038, "detomaso": 1038, "6507": 1038, "jayzed82": 1038, "6126": 1038, "7814": 1038, "7702": 1038, "9219": 1038, "7771": 1038, "ang": 1038, "randomizedlogisticregress": 1038, "8259": 1038, "mandatorili": 1038, "7565": 1038, "8181": 1038, "basesearchcv": [1038, 1039], "8344": 1038, "eriksson": 1038, "7661": 1038, "8295": 1038, "batula": 1038, "dylan": [1038, 1041], "werner": [1038, 1043], "meier": 1038, "7365": 1038, "aleksandr": 1038, "sandrovskii": 1038, "5697": 1038, "stijn": 1038, "tonk": 1038, "6250": 1038, "8093": 1038, "bull": 1038, "9507": 1038, "7356": 1038, "dingwal": 1038, "_check_target": 1038, "8377": 1038, "5211": 1038, "rhinehart": 1038, "8159": 1038, "8198": 1038, "fetch_": 1038, "7944": 1038, "7825": 1038, "kathleen": 1038, "7376": 1038, "7331": 1038, "yangarbit": 1038, "__getstate__": [1038, 1046], "obstruct": 1038, "8316": 1038, "holger": 1038, "8010": 1038, "7986": 1038, "najera": 1038, "9289": 1038, "makedir": 1038, "9284": 1038, "sebastin": [1038, 1039], "alert": 1038, "lgtm": 1038, "9278": 1038, "heli": 1038, "8449": 1038, "9078": 1038, "purport": 1038, "sergul": [1038, 1039, 1042], "aydor": [1038, 1039, 1042], "8922": 1038, "8137": 1038, "8139": 1038, "8995": 1038, "2879": 1038, "7459": 1038, "7812": 1038, "9100": 1038, "8481": 1038, "8174": 1038, "tahar": 1038, "zanouda": 1038, "8854": 1038, "8874": 1038, "7998": 1038, "jiacheng": 1038, "argpartit": 1038, "frombuffer_empti": 1038, "in1d": 1038, "rankdata": 1038, "safe_copi": 1038, "eig": 1038, "fast_dot": 1038, "pinvh": [1038, 1040], "graph_laplacian": 1038, "sparsetool": 1038, "connected_compon": 1038, "check_decision_proba_consist": 1038, "shubham": [1038, 1041], "9019": 1038, "baseensembl": [1038, 1041], "7464": 1038, "rishikesh": 1038, "taehoon": [1038, 1039], "aashil": 1038, "balakumaran": [1038, 1039], "manoharan": [1038, 1039], "petrov": [1038, 1039, 1047], "minghui": [1038, 1039], "jc": [1038, 1039], "alexandercbooth": 1038, "chkoar": 1038, "aarshai": [1038, 1039], "gilliam": 1038, "subramanyam": 1038, "clement": [1038, 1039, 1043], "joudet": [1038, 1039], "robl": 1038, "kati": 1038, "luangkot": 1038, "lacchia": 1038, "akshay0724": 1038, "omtcyfz": 1038, "rickiepark": 1038, "jbdelafoss": 1038, "vivek": [1038, 1039, 1040], "elliott": 1038, "ldirer": 1038, "sid": 1038, "kapur": 1038, "midina": 1038, "mikebenfield": 1038, "sourav": [1038, 1041], "aseem": 1038, "bansal": 1038, "aishwaryark": 1038, "howel": 1038, "dokato": 1038, "kathi": [1038, 1041], "ferria": 1038, "nikita": [1038, 1039, 1041, 1044, 1045, 1046], "basil": 1038, "beirouti": 1038, "possa": 1038, "bednar": 1038, "janin": 1038, "harper": 1038, "artsiom": 1038, "ligo": 1038, "rahn": [1038, 1041], "seanpwilliam": 1038, "julian": [1038, 1039], "kuhlmann": [1038, 1039], "aubert": 1038, "j\u00f6rn": 1038, "hee": [1038, 1041], "shivamgargsya": [1038, 1042, 1044], "kat": 1038, "hempstalk": 1038, "kaushik": [1038, 1045, 1046, 1047], "lakshmikanth": 1038, "kennedi": [1038, 1041], "yap": 1038, "kiril": [1038, 1039, 1041, 1043], "bobyrev": 1038, "imbert": [1038, 1040, 1043, 1045], "lera": 1038, "douillard": 1038, "mainak": 1038, "tobychees": [1038, 1039], "manraj": 1038, "marc": [1038, 1040, 1041, 1047], "meketon": 1038, "marcofalk": 1038, "gilch": 1038, "mehul": 1038, "ahuja": [1038, 1045, 1046], "goetz": [1038, 1039], "dezub": 1038, "baumgartn": 1038, "vibrantabhi19": 1038, "golubin": 1038, "milen": 1038, "paskov": 1038, "antonin": 1038, "carett": 1038, "morikko": 1038, "mrmjauh": 1038, "nalepa": 1038, "namiya": 1038, "narinek": [1038, 1039], "angu": [1038, 1039, 1045], "nicol": 1038, "vavrova": 1038, "nitish": 1038, "pandei": [1038, 1043], "daniil": 1038, "olegovich": 1038, "craze": 1038, "om": 1038, "parmind": 1038, "patrick": [1038, 1039, 1044, 1045, 1048], "carlson": 1038, "ganssl": 1038, "lorek": 1038, "pete": [1038, 1042, 1043], "bachant": 1038, "csizsek": 1038, "jong": 1038, "puneet": 1038, "mathur": [1038, 1040, 1041, 1046, 1047], "quentin": [1038, 1039, 1040, 1047, 1048], "hibon": 1038, "1kastner": 1038, "rameshwar": [1038, 1039], "bhaskaran": [1038, 1039], "rebecca": 1038, "bilbro": 1038, "remi": 1038, "rampin": 1038, "pratik": 1038, "agarw": [1038, 1039, 1041], "sailesh": [1038, 1039], "choyal": [1038, 1039], "samson": 1038, "samu\u00ebl": 1038, "weber": 1038, "sarah": [1038, 1040, 1043], "abhyudai": 1038, "sharan": [1038, 1039], "yalburgi": [1038, 1039], "willduan": 1038, "siddharth": [1038, 1042], "almer": 1038, "theofilo": 1038, "papapanagiot": 1038, "alison": 1038, "boucher": 1038, "folkman": 1038, "jung": [1038, 1042, 1046], "shenoi": 1038, "vilhelm": [1038, 1039], "ehrenheim": [1038, 1039], "alan": [1038, 1039, 1042, 1044, 1045], "yee": [1038, 1039], "warut": [1038, 1039], "vijitbenjaronk": [1038, 1039], "yuichi": 1038, "fujikawa": 1038, "affanv14": 1038, "andreh7": 1038, "bradi": 1038, "salz": 1038, "campustrampu": 1038, "agamemnon": [1038, 1039, 1040, 1041, 1043, 1044], "krasouli": [1038, 1039, 1040, 1041, 1043, 1044], "ditenberg": 1038, "elena": 1038, "sharova": 1038, "filipj8": [1038, 1039], "fukatani": 1038, "guiniol": 1038, "guoci": 1038, "hakaa1": [1038, 1039], "xhy": 1038, "jakirkham": [1038, 1039, 1040, 1046, 1047], "jaroslaw": 1038, "jeroko": 1038, "jmontoyam": 1038, "josephsalmon": [1038, 1039, 1040], "jschendel": [1038, 1039], "leereev": 1038, "hahn": [1038, 1039], "mathurinm": [1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047], "mehak": 1038, "sachdeva": 1038, "mlewis1729": 1038, "mlliou112": 1038, "mthorrel": [1038, 1041], "ndingwal": 1038, "nuff": 1038, "plagre": 1038, "pldtc325": 1038, "breno": [1038, 1039], "olsen": 1038, "alfano": 1038, "burn": [1038, 1039], "polmauri": 1038, "charlton": 1038, "austin": 1038, "chayant": 1038, "t15h": 1038, "chinmaya": 1038, "pancholi": 1038, "danielsen": 1038, "chung": [1038, 1039], "pravarmahajan": [1038, 1039], "dariu": [1038, 1039], "morawiec": [1038, 1039], "haberth\u00fcr": 1038, "heryanto": 1038, "kirkbi": [1038, 1039], "rashchedrin": 1038, "gertrud": 1038, "devansh": [1038, 1039], "dickson": 1038, "baxlei": 1038, "don86": 1038, "klarup": 1038, "elizabeth": [1038, 1040, 1043], "ferriss": 1038, "ellen": 1038, "egli": 1038, "chieh": [1038, 1039], "chou": [1038, 1039], "grzegorz": [1038, 1041], "szpak": [1038, 1041], "zxcvbniu": 1038, "icyblad": 1038, "ilya": 1038, "laughlin": 1038, "iv\u00e1n": [1038, 1044], "vall\u00e9": 1038, "aur\u00e9lien": [1038, 1039, 1040, 1044, 1045], "bellet": [1038, 1039, 1040], "mahapatra": 1038, "bundl": [1039, 1040], "indexerror": [1039, 1040], "11756": [1039, 1040], "14237": [1039, 1040], "schuder": [1039, 1040, 1041], "13903": [1039, 1040], "13124": [1039, 1040], "13772": [1039, 1040], "vya": [1039, 1040, 1041], "12949": 1039, "prabakaran": [1039, 1040, 1043, 1045, 1046], "kumaresshan": [1039, 1040, 1043], "12946": 1039, "tallott": 1039, "13276": 1039, "13005": 1039, "13312": 1039, "11295": 1039, "vacaliuc": [1039, 1040], "13046": 1039, "12360": 1039, "aakanksha": 1039, "13134": 1039, "sandro": [1039, 1046], "casagrand": [1039, 1040], "12881": 1039, "13165": 1039, "13221": 1039, "bertrandhaut": [1039, 1040], "raghunathan": [1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "dowon": [1039, 1040], "aria": [1039, 1040, 1046], "fibins": [1039, 1040], "finn": [1039, 1040], "shea": [1039, 1040], "joaak": [1039, 1040], "m\u00e9hault": [1039, 1040], "kms15": [1039, 1040], "kossori": [1039, 1040], "aruku": [1039, 1040], "lakshya": [1039, 1040, 1041], "ib\u00e1\u00f1ez": [1039, 1040, 1043], "gorelli": [1039, 1040, 1044, 1046], "marcogorelli": [1039, 1040], "mferrari3": [1039, 1040], "micka\u00ebl": [1039, 1040], "schoentgen": [1039, 1040], "pavlo": [1039, 1040], "kalli": [1039, 1040], "glaser": [1039, 1040], "pierretallott": [1039, 1040, 1041], "kapoor": [1039, 1040], "sandrocasagrand": [1039, 1040], "tashai": [1039, 1040], "vishaal": [1039, 1040], "zhuyi": [1039, 1040], "ziji": [1039, 1040], "zj": [1039, 1040], "poh": [1039, 1040], "12704": 1039, "12701": 1039, "12685": 1039, "12699": 1039, "adanhawth": [1039, 1040], "stine": [1039, 1040], "feda": [1039, 1040], "curic": [1039, 1040], "jeremiedbb": [1039, 1040, 1041], "katrin": [1039, 1040], "leinweb": [1039, 1040], "muhammad": [1039, 1040, 1044], "hassaan": [1039, 1040], "rafiqu": [1039, 1040], "paczuski": [1039, 1040], "waterburi": [1039, 1040], "shivam": [1039, 1040, 1041], "kotwalia": [1039, 1040], "12159": 1039, "12105": 1039, "11912": 1039, "12304": 1039, "12339": 1039, "12246": 1039, "10811": 1039, "feldbauer": [1039, 1040, 1041, 1042, 1045], "12441": 1039, "12517": 1039, "12234": 1039, "12165": 1039, "12388": 1039, "connor": [1039, 1044], "tann": [1039, 1044], "12393": 1039, "12122": 1039, "sharedmem": 1039, "12518": 1039, "12481": 1039, "12612": 1039, "12211": 1039, "lisa": [1039, 1040, 1042, 1043, 1045, 1046], "hannel": [1039, 1040], "melissa": 1039, "ferrari": 1039, "12451": 1039, "12171": 1039, "12365": 1039, "_encod": 1039, "12514": 1039, "12522": 1039, "12471": 1039, "marzinotto": [1039, 1040], "12317": 1039, "12338": 1039, "bauk": [1039, 1040], "12625": 1039, "sklearn_site_joblib": 1039, "12350": 1039, "12467": 1039, "unvendor": 1039, "12345": 1039, "navarret": [1039, 1040, 1041], "benjastudio": [1039, 1040], "cheuk": [1039, 1040], "connossor": [1039, 1040], "levinson": [1039, 1040], "kieker": [1039, 1040], "kataev": [1039, 1040], "dillon": [1039, 1040, 1041], "gardner": [1039, 1040], "vukolov": [1039, 1040], "caselli": [1039, 1040], "gauravahlawat": [1039, 1040], "gustavo": [1039, 1040, 1045], "haroldfox": [1039, 1040], "jacklangerman": [1039, 1040], "jacopo": [1039, 1040], "notarstefano": [1039, 1040], "janvanrijn": [1039, 1040], "jdethuren": [1039, 1040], "koen": [1039, 1040], "kushal": [1039, 1040], "chauhan": [1039, 1040, 1046, 1047], "jie": [1039, 1040, 1043], "lili": [1039, 1040], "xiong": [1039, 1040, 1045], "liam": [1039, 1040], "melsyt": [1039, 1040], "nichola": [1039, 1040, 1042], "shebanov": [1039, 1040], "oleksandr": [1039, 1040, 1041, 1042, 1045], "pavlyk": [1039, 1040, 1041, 1042], "hausamann": [1039, 1040], "pulkit": [1039, 1040, 1042], "maloo": [1039, 1040], "batista": [1039, 1040, 1044], "radostin": [1039, 1040], "stoyanov": [1039, 1040], "ramil": [1039, 1040], "nugmanov": [1039, 1040], "rebekah": [1039, 1040, 1041], "roopam": [1039, 1040], "tiernei": [1039, 1040, 1041], "sylvainlan": [1039, 1040, 1041, 1042, 1043], "takingitcasu": [1039, 1040], "tulio": [1039, 1040], "xing": [1039, 1040], "zach": [1039, 1040, 1045], "mountain": 1039, "sorri": 1039, "basemultilayerperceptron": [1039, 1041], "11924": 1039, "macbook": 1039, "9354": 1039, "9372": 1039, "astel": 1039, "10933": 1039, "hansen": 1039, "10471": 1039, "gaurav": [1039, 1040, 1041, 1042, 1043, 1045], "dhingra": [1039, 1040, 1043], "8003": 1039, "jo\u00ebl": 1039, "billaud": 1039, "10059": 1039, "braun": 1039, "9612": 1039, "jonatan": 1039, "samoocha": 1039, "8129": 1039, "margeta": 1039, "k_means_elkan": 1039, "11353": 1039, "11901": 1039, "9875": 1039, "9012": 1039, "11315": 1039, "9041": 1039, "9858": 1039, "artiem": 1039, "krinitsyn": 1039, "9908": 1039, "8617": 1039, "maskani": [1039, 1041, 1042, 1043], "filali": 1039, "konstantino": 1039, "katriopla": 1039, "10774": 1039, "catalfo": 1039, "10795": 1039, "takeshi": [1039, 1044, 1045, 1046], "yoshizawa": 1039, "11082": 1039, "sadhana": 1039, "srinivasan": [1039, 1042], "9731": 1039, "10045": 1039, "fetch_mldata": 1039, "11466": 1039, "6374": 1039, "normalize_compon": [1039, 1041], "11585": 1039, "ivan": [1039, 1040, 1043, 1046], "panico": [1039, 1043], "11420": 1039, "6452": 1039, "walli": 1039, "gauz": 1039, "9492": 1039, "8484": 1039, "9886": 1039, "underflow": [1039, 1044], "10142": 1039, "5956": 1039, "_class_mean": 1039, "_class_cov": 1039, "10898": 1039, "nanxin": 1039, "9832": 1039, "11951": 1039, "r\u00fcdiger": [1039, 1040, 1042], "busch": [1039, 1040, 1042], "9707": 1039, "wan": 1039, "7071": 1039, "9157": 1039, "11176": 1039, "forsyth": 1039, "11542": 1039, "anna": 1039, "9524": 1039, "9723": 1039, "10908": 1039, "10899": 1039, "melderi": 1039, "10101": 1039, "10\u2079": 1039, "9147": 1039, "clae": 1039, "fredrik": 1039, "mannbi": 1039, "10441": 1039, "mayur": 1039, "kulkarni": 1039, "6689": 1039, "nihar": 1039, "sheth": 1039, "11293": 1039, "9656": 1039, "greenhal": 1039, "n_features_to_comput": 1039, "9222": 1039, "hoh": 1039, "9234": 1039, "andrewww": 1039, "8075": 1039, "11211": 1039, "9484": 1039, "dalla": 1039, "card": 1039, "9043": 1039, "10112": 1039, "logistic_regression_path": [1039, 1040], "11724": 1039, "9939": 1039, "westov": 1039, "10998": 1039, "vazelh": [1039, 1040, 1041], "10071": 1039, "10153": 1039, "d\u00f6pfert": 1039, "10095": 1039, "cv_valu": 1039, "10297": 1039, "mabel": [1039, 1043], "10581": 1039, "yacin": 1039, "mazari": 1039, "10687": 1039, "10836": 1039, "aishwarya": 1039, "10397": 1039, "10992": 1039, "11327": 1039, "11905": 1039, "9837": 1039, "10593": 1039, "10610": 1039, "8554": 1039, "9775": 1039, "10827": 1039, "osa": 1039, "8066": 1039, "10587": 1039, "3840": 1039, "niederb\u00fchl": 1039, "9521": 1039, "11124": 1039, "arya": 1039, "11160": 1039, "barkhorn": 1039, "11679": 1039, "pacha": 1039, "10845": 1039, "perez": [1039, 1046], "parra": 1039, "toledano": 1039, "10999": 1039, "memoryerror": [1039, 1043], "11135": 1039, "10377": 1039, "9786": 1039, "10093": 1039, "alexryndin": 1039, "9772": 1039, "9515": 1039, "liddel": 1039, "manh": 1039, "dao": 1039, "9851": 1039, "10280": 1039, "10336": 1039, "haoran": 1039, "basemixtur": [1039, 1040], "10740": 1039, "10869": 1039, "g\u00e9ron": 1039, "9686": 1039, "11310": 1039, "_fit_and_scor": 1039, "11576": 1039, "ronsin": [1039, 1040, 1048], "_run_search": 1039, "9599": 1039, "11006": 1039, "11557": 1039, "boucaud": 1039, "iid": 1039, "9085": 1039, "10677": 1039, "zhdanovich": 1039, "10982": 1039, "juliet": 1039, "lawton": 1039, "10928": 1039, "solutu": 1039, "immensu": 1039, "9257": 1039, "8190": 1039, "alcorn": 1039, "9681": 1039, "mottl": [1039, 1040], "10005": 1039, "10346": 1039, "tobia": [1039, 1044, 1046], "10887": 1039, "11136": 1039, "4394": 1039, "9579": 1039, "kober": 1039, "9655": 1039, "bjerr": 1039, "11556": 1039, "11774": 1039, "9456": 1039, "unexpectedli": 1039, "9304": 1039, "11144": [1039, 1040], "9151": 1039, "10521": 1039, "7668": 1039, "9647": 1039, "10195": 1039, "10192": 1039, "11272": 1039, "11467": 1039, "11505": 1039, "giusepp": [1039, 1040], "costa": [1039, 1044], "10210": 1039, "11520": 1039, "11011": 1039, "11005": 1039, "11308": 1039, "11206": 1039, "11306": 1039, "10437": 1039, "lucija": 1039, "gregov": 1039, "10452": 1039, "10181": 1039, "nirvan": [1039, 1043], "anjirbag": 1039, "9399": 1039, "10913": 1039, "rodrigo": 1039, "agundez": 1039, "10458": 1039, "9816": 1039, "newei": 1039, "11042": 1039, "11235": 1039, "active_features_": 1039, "feature_indices_": 1039, "n_values_": 1039, "9726": 1039, "10829": 1039, "gilberto": 1039, "olimpio": 1039, "10655": 1039, "python2": 1039, "10412": 1039, "jiongyan": 1039, "9497": 1039, "8361": 1039, "neo": 1039, "_criterion": 1039, "classificationcriterion": 1039, "regressioncriterion": 1039, "10325": 1039, "camil": [1039, 1047], "stap": 1039, "basedecisiontre": [1039, 1040, 1043], "10536": 1039, "ohayon": [1039, 1040, 1047], "11464": 1039, "stott": 1039, "10663": 1039, "10229": 1039, "11553": 1039, "10881": 1039, "sevin": 1039, "ridge_regress": [1039, 1040, 1046], "10306": 1039, "siebert": 1039, "11741": 1039, "11166": 1039, "pypy3": 1039, "v5": 1039, "11010": 1039, "lami": 1039, "11596": 1039, "marcu": 1039, "voss": 1039, "9569": 1039, "12462": 1039, "zachariah": 1039, "10474": 1039, "10500": 1039, "9701": 1039, "9378": 1039, "check_set_param": 1039, "7738": 1039, "alvin": 1039, "chiang": 1039, "8102": 1039, "ankita": 1039, "sinha": 1039, "check_methods_subset_invari": [1039, 1045], "10428": 1039, "check_sample_weights_pandas_seri": 1039, "11558": 1039, "211217613": 1039, "absolutelynowarranti": 1039, "richi": 1039, "halford": [1039, 1046, 1047], "adelr": 1039, "adityadaflapurkar": 1039, "aidan": 1039, "fitzgerald": 1039, "aishgrt1": 1039, "akash": 1039, "shivram": 1039, "lenail": [1039, 1043], "egg": 1039, "diaz": 1039, "amanda": [1039, 1042, 1043, 1044, 1045], "aniruddha": 1039, "annaayzenshtat": 1039, "antonio": [1039, 1041], "quinonez": 1039, "anubhav": 1039, "marwaha": 1039, "arik": 1039, "pamnani": 1039, "ozga": 1039, "arunava": 1039, "geron": [1039, 1044, 1045], "ayush": [1039, 1044], "bangda": 1039, "bastian": 1039, "venthur": 1039, "benn": 1039, "koonc": 1039, "cclauss": 1039, "chadi": 1039, "kamar": 1039, "holdgraf": 1039, "hirsch": 1039, "hogan": 1039, "cnx": 1039, "cwitt": 1039, "ferreira": [1039, 1044, 1045], "gomez": [1039, 1046], "klevebr": 1039, "shwed": 1039, "mohn": [1039, 1043], "danil": 1039, "baibak": [1039, 1040], "beach": 1039, "pickup": 1039, "derek": 1039, "niederhut": [1039, 1041], "dilutedsauc": 1039, "dlovel": 1039, "dor": 1039, "dougla": 1039, "duhaim": 1039, "tuzova": 1039, "eunji": 1039, "farahsae": 1039, "raimundo": 1039, "fenx": 1039, "frankhui": 1039, "franz": 1039, "wompner": 1039, "freija": 1039, "descamp": 1039, "frsi": 1039, "calvo": [1039, 1040], "georgi": [1039, 1042], "peev": [1039, 1042], "gkevinyen5418": 1039, "vermeil": 1039, "hongh": 1039, "hossein": [1039, 1040, 1041], "pourbozorg": [1039, 1040, 1041], "hristo": [1039, 1046], "hunan": 1039, "rostomyan": 1039, "iampat": 1039, "jaewon": 1039, "malcolm": 1039, "jami": 1039, "wolosonovich": 1039, "jeb": 1039, "bearer": 1039, "jinkun": 1039, "jjabl": 1039, "johnstott": 1039, "jotasi": 1039, "julietcl": 1039, "shenk": 1039, "karl": 1039, "kasper": 1039, "primdal": 1039, "lauritzen": 1039, "ksemb": 1039, "kuai": [1039, 1040], "kyeongpil": 1039, "kang": [1039, 1041], "kye": 1039, "kyledrogo": 1039, "l\u00e9o": 1039, "liutong": 1039, "lizao": 1039, "lkjcalc": 1039, "louib": [1039, 1040], "luciano": [1039, 1046], "luke": 1039, "persola": 1039, "markiwanchyshyn": 1039, "marsgui": 1039, "gubri": [1039, 1040], "koko": [1039, 1045, 1046], "copeland": [1039, 1040], "meghann": [1039, 1041], "minh": 1039, "jamaoui": [1039, 1040, 1043], "mohammad": [1039, 1040], "shahebaz": 1039, "muayyad": 1039, "alsadi": 1039, "nabarun": 1039, "pal": [1039, 1045], "narendran": 1039, "santhanam": 1039, "suh": 1039, "eng": 1039, "av": 1039, "nicolau": 1039, "werneck": 1039, "titov": [1039, 1041, 1044, 1045], "nilesh": 1039, "kevlani": 1039, "notmatthancock": [1039, 1041], "nzw": 1039, "oren": 1039, "milman": 1039, "osaid": 1039, "rehman": 1039, "nasir": 1039, "fernand": [1039, 1045, 1046], "olden": 1039, "pierreablin": 1039, "pietruh": 1039, "pinaki": 1039, "nath": 1039, "chowdhuri": [1039, 1045], "piotr": [1039, 1040], "szyma\u0144ski": [1039, 1040], "pradeep": [1039, 1040], "raamana": [1039, 1040], "pravar": 1039, "mahajan": [1039, 1041], "qingi": 1039, "rajendra": 1039, "arora": [1039, 1046], "rankylau": 1039, "kosobrodov": 1039, "rragundez": 1039, "sagnik": 1039, "bhattacharya": 1039, "radhakrishnan": 1039, "saqib": 1039, "nizam": 1039, "shamsi": 1039, "satish": 1039, "gigant": [1039, 1041, 1046, 1047], "flennerhag": 1039, "sebastien": 1039, "shalil": 1039, "awalei": 1039, "shangwu": [1039, 1040], "sharad": 1039, "vijalapuram": 1039, "shenhanc78": 1039, "rastogi": 1039, "siftikha": 1039, "sinclert": 1039, "p\u00e9rez": 1039, "solutusimmensu": 1039, "somya": 1039, "anand": [1039, 1043], "srajan": 1039, "paliw": 1039, "sriharsha": [1039, 1040], "hatwar": [1039, 1040], "mcdowel": 1039, "syonekura": 1039, "takanori": 1039, "hayashi": 1039, "tarcusx": 1039, "theriley106": 1039, "heavei": 1039, "augspurg": [1039, 1041], "trishnendu": 1039, "ghorai": 1039, "twosigmajab": 1039, "umar": [1039, 1040], "farouk": [1039, 1040], "urvang": [1039, 1041], "patel": [1039, 1041, 1042, 1043, 1045], "vadim": [1039, 1043, 1044], "markovtsev": 1039, "vinit": 1039, "vinod": 1039, "viraj": 1039, "mavani": 1039, "navkal": 1039, "vqean3": [1039, 1040], "vufg": 1039, "wallygauz": 1039, "wdevazelh": 1039, "barnett": 1039, "rosenfeld": 1039, "yime": 1039, "ymazari": 1039, "yufeng": 1039, "griffith": [1039, 1040], "z\u00e9": 1039, "vin\u00edciu": 1039, "zhenq": 1039, "zhiqe": 1039, "xiao": [1039, 1041, 1044, 1045, 1046, 1047, 1048], "couldn": [1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "12955": 1040, "klopfer": 1040, "14197": 1040, "14024": 1040, "nicolashug": 1040, "13974": 1040, "hoang": [1040, 1041], "fhoang7": 1040, "14393": 1040, "guillem": [1040, 1041, 1046], "subi": [1040, 1041, 1046], "14087": 1040, "14067": 1040, "stalei": [1040, 1041], "14092": 1040, "14053": 1040, "13947": 1040, "instanci": 1040, "13910": 1040, "13894": 1040, "myatt": [1040, 1041], "min_max_axi": 1040, "13741": 1040, "roddi": [1040, 1041], "macsween": [1040, 1041], "14309": 1040, "13864": 1040, "paresh": [1040, 1041], "13877": 1040, "_sag": 1040, "sag_solv": 1040, "3591": 1040, "13317": 1040, "13157": 1040, "13086": 1040, "cole": 1040, "13485": 1040, "assia": 1040, "benbihi": 1040, "13651": 1040, "reloc": 1040, "13486": 1040, "13427": 1040, "couvreur": [1040, 1041], "9069": 1040, "13835": 1040, "10727": 1040, "wood": 1040, "13250": 1040, "13241": 1040, "12143": 1040, "11650": 1040, "non_negative_factor": [1040, 1042, 1043, 1044, 1048], "12988": 1040, "8769": 1040, "11000": 1040, "thibault": 1040, "sejourn": 1040, "changedbehaviourwarn": 1040, "11526": 1040, "6848": 1040, "glemaitr": [1040, 1041, 1043], "11727": 1040, "13266": 1040, "13545": 1040, "sorro": 1040, "12807": 1040, "12513": 1040, "12543": 1040, "storch": 1040, "13260": 1040, "13283": 1040, "13524": 1040, "13174": 1040, "13496": 1040, "13620": 1040, "12436": 1040, "12983": 1040, "13251": 1040, "joshuakennethjon": 1040, "12715": 1040, "13164": 1040, "12834": 1040, "leastsquareserror": 1040, "update_terminal_region": 1040, "6463": 1040, "movelikeriv": 1040, "13193": 1040, "12599": 1040, "13779": 1040, "13780": 1040, "12916": 1040, "13641": 1040, "8478": 1040, "12177": 1040, "12583": 1040, "13601": 1040, "danylo": 1040, "densif": 1040, "13240": 1040, "bartosz": 1040, "13562": 1040, "11646": 1040, "11699": 1040, "make_dataset": 1040, "13336": 1040, "toleranbc": 1040, "11754": 1040, "13397": 1040, "fagan": 1040, "12174": 1040, "12972": 1040, "lucio": 1040, "fernandez": 1040, "arjona": 1040, "coeffeci": 1040, "13279": 1040, "13328": 1040, "13389": 1040, "basesgdclassifi": 1040, "13422": 1040, "cl\u00e9ment": [1040, 1044, 1046], "doumouro": 1040, "unhandl": 1040, "13363": 1040, "12821": 1040, "13350": 1040, "j\u00e9r\u00f4me": [1040, 1041, 1042, 1048], "dock\u00e8": [1040, 1041, 1042, 1048], "9907": 1040, "12232": 1040, "sangeeth": 1040, "11179": 1040, "13151": 1040, "12568": 1040, "8216": 1040, "romuald": 1040, "menuet": 1040, "12732": 1040, "12334": 1040, "13607": 1040, "12855": 1040, "pawel": 1040, "sendyk": 1040, "13628": 1040, "13447": 1040, "10580": 1040, "sandra": [1040, 1046], "mitrov": 1040, "13554": 1040, "celelibi": 1040, "13142": 1040, "11354": 1040, "12613": 1040, "12669": 1040, "torrella": [1040, 1041, 1047], "12861": 1040, "8773": 1040, "13366": 1040, "fournier": 1040, "10440": 1040, "12222": 1040, "10058": 1040, "chiotelli": 1040, "12279": 1040, "12582": 1040, "my_pipelin": 1040, "2568": 1040, "make_": 1040, "11364": 1040, "baze": 1040, "petrushev": 1040, "__len__": 1040, "13439": 1040, "12908": 1040, "drew": 1040, "13253": 1040, "12116": 1040, "12197": 1040, "12251": 1040, "float16": 1040, "13007": 1040, "raffaello": 1040, "baluyot": 1040, "13333": 1040, "13459": 1040, "hunter": 1040, "mcgushion": 1040, "8508": 1040, "6261": 1040, "vettigli": 1040, "justglow": 1040, "12300": 1040, "11458": 1040, "mitar": 1040, "milutinov": 1040, "12344": 1040, "13549": 1040, "warn_on_dtyp": 1040, "check_pairwise_arrai": 1040, "13382": 1040, "prathmesh": 1040, "saval": 1040, "11705": 1040, "11973": 1040, "our_rand_r": 1040, "madhura": [1040, 1042, 1043, 1046, 1047], "parikh": [1040, 1045, 1046, 1047, 1048], "13531": 1040, "check_fit_idempot": 1040, "alberto": [1040, 1044, 1045], "torr": 1040, "amourav": 1040, "assiaben": 1040, "micha\u0142owski": 1040, "brentfagan": 1040, "chenal": [1040, 1041, 1043], "choe": 1040, "drewmjohnston": 1040, "dror": 1040, "atariah": 1040, "esvhd": 1040, "falak": 1040, "gandenberg": 1040, "luqi": 1040, "jf": 1040, "kulbear": 1040, "leandro": [1040, 1044], "hermida": [1040, 1044], "luk": 1040, "manimaran": [1040, 1042, 1043, 1044, 1045], "gaido": 1040, "marinelm": 1040, "masstran": 1040, "roeschk": 1040, "aftab": 1040, "abdela": 1040, "ibraheem": 1040, "mwestt": 1040, "iijima": 1040, "oresti": 1040, "osman": [1040, 1046], "flanagan": [1040, 1041], "soriano": 1040, "peai": 1040, "pim": 1040, "haan": 1040, "raf": 1040, "rajdeep": 1040, "dua": 1040, "ra\u00fal": 1040, "garc\u00eda": [1040, 1041, 1046], "lekhwani": 1040, "varma": 1040, "shiyu": 1040, "duan": [1040, 1042], "smari": [1040, 1041, 1042], "st\u00e9phane": [1040, 1041, 1045, 1046], "surgan12": 1040, "thibsej": 1040, "xhan": 1040, "xinyuliu12": 1040, "zayd": 1040, "hammoudeh": 1040, "16397": [1041, 1042], "16500": 1041, "16505": 1041, "16076": 1041, "shack": [1041, 1042, 1043], "15930": 1041, "inder128": 1041, "15810": 1041, "15898": 1041, "gargsya": 1041, "15933": 1041, "15760": 1041, "15888": 1041, "15936": 1041, "dizietasahi": 1041, "15879": 1041, "bibhash": [1041, 1042], "chandra": [1041, 1042, 1045], "mitra": [1041, 1042, 1046], "15937": 1041, "blyston": [1041, 1042], "15863": 1041, "abstractmethod": 1041, "_check_x": 1041, "basenb": 1041, "15996": 1041, "brigitta": [1041, 1042, 1043, 1047], "sip\u0151cz": [1041, 1042, 1043, 1047], "15751": 1041, "tirth": [1041, 1042], "15868": 1041, "nikla": [1041, 1042], "smedemark": 1041, "marguli": 1041, "15797": 1041, "15947": 1041, "revamp": 1041, "14849": 1041, "_name_estim": 1041, "_gb": 1041, "facto": 1041, "_birch": 1041, "9250": 1041, "12927": 1041, "deprecationwarn": 1041, "hinder": 1041, "15080": 1041, "14464": 1041, "13575": 1041, "10482": 1041, "13726": 1041, "shuzh": 1041, "9288": 1041, "15057": 1041, "korolev": 1041, "15120": 1041, "7943": 1041, "12303": 1041, "14510": 1041, "14890": 1041, "miguel": 1041, "cabrera": 1041, "14544": 1041, "15304": 1041, "jaim": 1041, "ferrando": 1041, "huerta": 1041, "12068": 1041, "12145": 1041, "13609": 1041, "camila": 1041, "williamson": 1041, "15661": 1041, "15160": 1041, "14259": 1041, "14764": 1041, "14740": 1041, "st\u00e9phan": 1041, "tulken": 1041, "14623": 1041, "sarra": 1041, "habchi": 1041, "15257": 1041, "willocx": 1041, "12650": 1041, "13960": 1041, "multiouput": 1041, "14908": 1041, "martina": [1041, 1043], "vila": [1041, 1043], "15382": 1041, "14933": 1041, "15138": 1041, "cusick": 1041, "14406": 1041, "14012": 1041, "faouzi": [1041, 1042], "13769": 1041, "14194": 1041, "least_absolute_devi": [1041, 1043, 1044], "13896": 1041, "13933": 1041, "14710": 1041, "categorical_crossentropi": [1041, 1045], "14869": 1041, "14682": 1041, "hancock": 1041, "5963": 1041, "pablo": [1041, 1044, 1045], "dubou": 1041, "14287": 1041, "15375": 1041, "14305": 1041, "14114": 1041, "15084": 1041, "14294": 1041, "14907": 1041, "14602": 1041, "chawla": 1041, "vectorizermixin": 1041, "14430": 1041, "strip_accents_unicod": 1041, "15100": 1041, "gradi": 1041, "overflowerror": 1041, "15463": 1041, "norvan": 1041, "sahin": 1041, "14520": 1041, "11635": 1041, "alec": 1041, "13704": 1041, "15557": 1041, "14378": 1041, "masashi": [1041, 1043], "shibata": 1041, "ashim": 1041, "bhattarai": 1041, "15010": 1041, "skip_comput": 1041, "13773": 1041, "14356": 1041, "15393": 1041, "venkatachalam": [1041, 1042, 1043, 1044, 1045], "14646": 1041, "14028": 1041, "15429": 1041, "14706": 1041, "14108": 1041, "14170": 1041, "14296": 1041, "13618": 1041, "13995": 1041, "14458": 1041, "14591": 1041, "14864": 1041, "15044": 1041, "15086": 1041, "15038": 1041, "15082": 1041, "13213": 1041, "14647": 1041, "linalgerror": 1041, "13393": 1041, "13707": 1041, "training_data_": 1041, "14357": 1041, "14900": 1041, "socastro": [1041, 1047], "9951": 1041, "14936": 1041, "15083": 1041, "12789": 1041, "15274": 1041, "13938": 1041, "15049": 1041, "toccac": 1041, "ptocca": 1041, "13231": 1041, "dong": 1041, "13467": 1041, "14595": 1041, "14865": 1041, "l\u00e9onard": [1041, 1046], "binet": [1041, 1046], "14732": 1041, "14417": 1041, "15625": 1041, "12258": 1041, "14898": 1041, "matcovici": 1041, "14593": 1041, "reboul": 1041, "14549": 1041, "14704": 1041, "15096": 1041, "14629": 1041, "15488": 1041, "15490": 1041, "12569": 1041, "bicker": 1041, "9597": 1041, "wenbo": [1041, 1043], "zhao": [1041, 1043, 1044, 1045, 1046], "14336": 1041, "dexter": 1041, "9274": 1041, "perri": 1041, "13806": 1041, "ana\u00ebl": 1041, "beaugnon": 1041, "15119": 1041, "15053": 1041, "13290": 1041, "13987": 1041, "_pairwis": [1041, 1043], "13925": 1041, "robson": 1041, "15524": 1041, "xun": [1041, 1043], "12557": 1041, "14286": 1041, "15099": 1041, "baselibsvm": 1041, "_sparse_fit": 1041, "14894": 1041, "danna": 1041, "naser": 1041, "12887": 1041, "15028": 1041, "guan": 1041, "14381": 1041, "11232": 1041, "sievert": 1041, "10815": 1041, "14035": 1041, "14475": 1041, "14538": 1041, "14872": 1041, "upcast": [1041, 1045], "15094": 1041, "choose_check_classifiers_label": 1041, "enforce_estimator_tags_i": 1041, "mock": 1041, "mockdatafram": 1041, "checkingclassifi": 1041, "newton_cg": 1041, "random_choice_csc": 1041, "fast_dict": 1041, "parallel_help": 1041, "14902": 1041, "14971": 1041, "nep": 1041, "14702": 1041, "13013": 1041, "13875": 1041, "14680": 1041, "check_classifier_multioutput": 1041, "check_regressor_multioutput": 1041, "13392": 1041, "rok": 1041, "mihevc": 1041, "check_transformer_data_not_an_arrai": 1041, "mro": [1041, 1042], "14884": 1041, "alphonsu": 1041, "abbi": [1041, 1042], "popa": [1041, 1042], "abdur": 1041, "rahmaan": 1041, "janhang": 1041, "abenbihi": 1041, "abhinav": [1041, 1044], "sagar": 1041, "jana": 1041, "lagat": 1041, "alessandro": [1041, 1043, 1046], "surac": 1041, "siqueira": 1041, "alexgoryainov": 1041, "itk": [1041, 1042, 1043], "alexshack": [1041, 1042, 1043], "akinkunl": 1041, "kaseorg": 1041, "maldonado": [1041, 1044], "angela": [1041, 1042, 1046], "ambroz": [1041, 1042], "anisha": 1041, "keshavan": 1041, "gutierrez": 1041, "anuja": 1041, "archana": [1041, 1043], "alva": 1041, "arnaudstiegl": 1041, "arpanchowdhri": 1041, "ashimb9": 1041, "ayomid": 1041, "bamidel": 1041, "baran": 1041, "buluttekin": 1041, "barrycg": 1041, "bill": [1041, 1042], "mill": 1041, "biswadip": 1041, "mandal": 1041, "blackd0t": 1041, "barklei": 1041, "c56poni": 1041, "camilaagw": 1041, "cartman_nabana": 1041, "catajara": 1041, "cgsavard": [1041, 1042], "vesteghem": 1041, "dakota": 1041, "grusak": 1041, "datenbergwerk": 1041, "dormagen": 1041, "deeplook": 1041, "drgfreeman": 1041, "cashman": 1041, "edvardlindelof": 1041, "ndirangu": [1041, 1045], "eunseop": 1041, "jeong": 1041, "fanni": 1041, "federicopisanu": 1041, "divo": 1041, "flaviomorelli": 1041, "francidona": 1041, "franco": 1041, "luqu": 1041, "freder": 1041, "haas": 1041, "g0g0gadget": 1041, "altai": 1041, "vale": 1041, "rio": [1041, 1043, 1044, 1045], "ganevgv": 1041, "gdex1": 1041, "getgaurav2": 1041, "gideon": 1041, "sonoiya": 1041, "gpapadok": [1041, 1045], "mogavero": 1041, "h4dr1en": 1041, "hadshirt": 1041, "hailei": [1041, 1042], "nguyen": [1041, 1042, 1045, 1046], "hannah": [1041, 1043, 1045], "bruce": [1041, 1042], "macdonald": [1041, 1042], "honglu": 1041, "ingrid": 1041, "spielman": 1041, "a16": [1041, 1042], "jaehong": 1041, "jai": [1041, 1045], "jeromedock": 1041, "jesper": 1041, "dramsch": 1041, "joanna": 1041, "ortiz": [1041, 1047], "kanika": 1041, "sabharw": 1041, "katarina": [1041, 1043], "slama": [1041, 1043], "kellycarmodi": 1041, "eth": 1041, "kensuk": 1041, "arai": 1041, "kesshi": [1041, 1042], "kevad": 1041, "lofti": [1041, 1042], "winata": [1041, 1043], "sheng": 1041, "dolmatov": 1041, "kirthi": 1041, "shankar": 1041, "sivamani": 1041, "katyal": 1041, "lakshmi": 1041, "krishnan": 1041, "lalliacqua": [1041, 1044], "lbfin": 1041, "loopym": 1041, "lostcoast": 1041, "huynh": [1041, 1043], "lrjball": [1041, 1042], "roeder": 1041, "maggiecheg": [1041, 1045], "maithreyi": 1041, "venkatesh": 1041, "maltimor": 1041, "maocx": 1041, "douriez": [1041, 1042], "oywa": 1041, "aladago": 1041, "mbillingr": 1041, "clare": 1041, "micah": 1041, "miguelbarao": 1041, "mina": [1041, 1042], "naghshhnejad": [1041, 1042], "motmoti": 1041, "mschaffenroth": 1041, "natasha": 1041, "nezar": 1041, "nidhin": 1041, "pattaniyil": 1041, "nishan": 1041, "mann": 1041, "nitya": 1041, "mandyam": 1041, "novaya": [1041, 1044], "nxorabl": 1041, "oleg": 1041, "stikhin": 1041, "saleem": 1041, "panpiort8": [1041, 1043], "paula": [1041, 1042], "poorna": [1041, 1043], "pspachtholz": [1041, 1042, 1043], "qdeffens": [1041, 1044], "garg": [1041, 1042], "rapha\u00ebl": 1041, "bournhonesqu": 1041, "reza": 1041, "gharibi": 1041, "payn": 1041, "rlm": 1041, "juergen": [1041, 1046], "sanjabi": 1041, "ruchitagard": 1041, "ruth": 1041, "waithera": 1041, "sackei": 1041, "samesh": [1041, 1042], "lakhotia": [1041, 1042], "sewook": 1041, "dare": 1041, "shreya": 1041, "simoncw": 1041, "smujjiga": 1041, "s\u00f6nke": 1041, "behrend": 1041, "soumirai": 1041, "steinfurt": [1041, 1043], "cowlei": 1041, "th0rwa": [1041, 1042], "theoptip": [1041, 1042], "theotheo": 1041, "thierno": 1041, "ibrahima": 1041, "diop": 1041, "schmitt": [1041, 1042], "tilen": 1041, "kusterl": 1041, "timsaur": 1041, "tola": 1041, "topisan": 1041, "ttang131": 1041, "veerlosar": 1041, "luzgin": 1041, "jeanselm": 1041, "lostanlen": 1041, "vnherdeiro": 1041, "wendi": 1041, "willdarnel": 1041, "wolframalpha": 1041, "xcjason": 1041, "martian": 1041, "xsat": 1041, "yinglr": 1041, "yokasr": 1041, "maxin": [1041, 1042], "yulia": 1041, "zamrii": 1041, "feng": [1041, 1043, 1044, 1045], "17959": 1042, "17848": 1042, "17742": 1042, "17995": 1042, "thomaz": 1042, "santana": [1042, 1045], "dsouza": [1042, 1043, 1044, 1045], "17433": 1042, "17985": 1042, "multinomialdevi": 1042, "logloss": 1042, "17694": 1042, "rempfler": 1042, "tsutomu": 1042, "kusanagi": [1042, 1044], "17357": 1042, "18016": 1042, "x_copi": 1042, "17914": 1042, "15730": 1042, "forrest": [1042, 1043], "17309": 1042, "swier": [1042, 1043], "heer": 1042, "17812": 1042, "bruno": [1042, 1043, 1044], "idl": 1042, "17235": 1042, "17204": 1042, "changed_onli": 1042, "17205": 1042, "15005": [1042, 1044], "slep009": [1042, 1044, 1045], "estimator_samples_": 1042, "16149": 1042, "11950": 1042, "11514": 1042, "16075": 1042, "16484": 1042, "16257": 1042, "simona": [1042, 1043, 1044], "maggio": [1042, 1043, 1044], "16801": 1042, "rcwoolston": 1042, "16431": 1042, "14048": 1042, "15963": 1042, "16084": 1042, "15950": 1042, "stephani": 1042, "15980": 1042, "wconnel": 1042, "15709": 1042, "15707": 1042, "maciej": 1042, "mikulski": 1042, "16006": 1042, "rushabh": 1042, "vasani": 1042, "streamhandl": 1042, "logger": 1042, "handler": 1042, "16451": 1042, "16280": 1042, "16837": 1042, "wornbb": 1042, "15669": 1042, "chaitanya": 1042, "16224": 1042, "schwetlick": [1042, 1043], "gelavizh": 1042, "ahmadi": 1042, "marija": [1042, 1043], "vlajic": [1042, 1043], "wheeler": [1042, 1043], "16841": 1042, "16655": 1042, "16718": 1042, "miotto": 1042, "16981": 1042, "g\u00f3rski": [1042, 1043], "14696": 1042, "14516": 1042, "15582": 1042, "16069": 1042, "bail": 1042, "16183": 1042, "16182": 1042, "santhosh": 1042, "16437": 1042, "hwan": 1042, "cho": 1042, "16539": 1042, "deros": 1042, "16692": 1042, "16663": 1042, "15834": 1042, "santiago": 1042, "mola": 1042, "16103": 1042, "divyaprabha": 1042, "selectormixin": 1042, "16132": 1042, "trimeta": 1042, "15503": 1042, "15782": 1042, "plgreenliru": 1042, "16403": 1042, "narendra": 1042, "mukherje": 1042, "16508": 1042, "15864": 1042, "14300": 1042, "15436": 1042, "15652": 1042, "15179": 1042, "angelaambroz": 1042, "15773": 1042, "15655": 1042, "14848": 1042, "absgrad": 1042, "_newton_cg": 1042, "16266": 1042, "standard_coef_": 1042, "standard_intercept_": 1042, "average_coef_": 1042, "average_intercept_": 1042, "16261": 1042, "brandt": 1042, "16849": 1042, "14264": 1042, "17021": 1042, "16323": 1042, "16362": 1042, "16442": 1042, "parson": [1042, 1044], "rick": 1042, "mackenbach": 1042, "16993": 1042, "emit": 1042, "15622": 1042, "mors": 1042, "15918": 1042, "kubin": 1042, "fit_grid_point": 1042, "16401": 1042, "pratama": 1042, "sutiono": 1042, "15953": 1042, "15959": 1042, "16111": 1042, "16090": 1042, "jayaratn": [1042, 1043, 1046, 1047], "14075": 1042, "meyer89": 1042, "16117": 1042, "15785": 1042, "16245": 1042, "16585": 1042, "15762": 1042, "16466": 1042, "16632": 1042, "maura": 1042, "pintor": 1042, "battista": 1042, "biggio": 1042, "15946": 1042, "ngshya": 1042, "32767": 1042, "mersenn": 1042, "twister": 1042, "31bit": 1042, "63bit": 1042, "crude": 1042, "postprocessor": 1042, "lemir": 1042, "13511": 1042, "kennel": 1042, "11296": 1042, "15558": 1042, "15806": 1042, "16331": 1042, "batiss": 1042, "15926": 1042, "16021": 1042, "sparsearrai": 1042, "16728": 1042, "uint": 1042, "17032": 1042, "_safe_tag": 1042, "16950": 1042, "15380": 1042, "16726": 1042, "16112": 1042, "16622": 1042, "17061": 1042, "aleksandra": 1042, "kocot": 1042, "alonso": [1042, 1044], "allend": [1042, 1044], "ana": [1042, 1044], "casado": 1042, "ankit810": 1042, "arunav": 1042, "konwar": 1042, "maingret": 1042, "beier": 1042, "berni": 1042, "bharathi": 1042, "brigi": [1042, 1043], "castachick": 1042, "castor": 1042, "corri": 1042, "bartelheim": 1042, "dani\u00ebl": 1042, "gelder": 1042, "daphn": 1042, "breuer": 1042, "cort": [1042, 1043, 1046, 1047], "dbauer9": 1042, "borovikova": 1042, "eln": 1042, "emili": [1042, 1043], "leung": 1042, "evgeni": 1042, "chasnovski": 1042, "fabiana": 1042, "facundo": [1042, 1045], "ferr\u00edn": 1042, "franziska": 1042, "boenisch": 1042, "bolmier": [1042, 1043, 1047], "gholdman1": 1042, "gonthier": 1042, "hao": [1042, 1043, 1045, 1046], "chun": [1042, 1043, 1045, 1046, 1047], "haoyin": [1042, 1044, 1045], "h\u00e9lion": 1042, "bourboux": 1042, "himanshu": [1042, 1045], "hirofumi": [1042, 1043], "suzuki": [1042, 1043], "huangk10": 1042, "kemenad": 1042, "hye": 1042, "sung": 1042, "indecisiveus": [1042, 1043], "inderjeet": 1042, "jjmistri": 1042, "haitz": [1042, 1044, 1045], "legarreta": [1042, 1044, 1045], "gorro\u00f1o": [1042, 1044, 1045], "judithabk6": 1042, "jumon": 1042, "kathryn": 1042, "krishnachaitanya9": 1042, "gia": 1042, "thuan": 1042, "lkubin": 1042, "lopusz": 1042, "lucgiffon": 1042, "lucyleeow": 1042, "kemk": 1042, "magda": 1042, "zielinska": 1042, "mandi": [1042, 1045], "gu": [1042, 1043, 1045], "manish": 1042, "aradwad": 1042, "mariana": 1042, "meirel": 1042, "mariel": 1042, "mc4229": 1042, "shoemak": 1042, "micha\u0142": 1042, "s\u0142apek": 1042, "mojca": 1042, "bertoncelj": 1042, "narendramukherje": 1042, "nicolasservel": 1042, "nkish": 1042, "noa": 1042, "tamir": [1042, 1045], "olicairn": 1042, "ur": 1042, "lenz": [1042, 1046], "delanou": 1042, "qizhi": 1042, "quang": 1042, "rachelcjordan": 1042, "raduspaimoc": 1042, "riccardo": [1042, 1048], "folloni": 1042, "ritchi": 1042, "rori": 1042, "hartong": 1042, "redden": 1042, "sambhav": 1042, "kothari": 1042, "santhoshbala18": 1042, "sarat": 1042, "addep": 1042, "scibol": 1042, "kie\u00dfl": 1042, "sergiodsr": 1042, "shiki": 1042, "shubh": 1042, "chatterje": 1042, "simonamaggio": [1042, 1043, 1044], "snowhit": 1042, "stareh": 1042, "marsh": 1042, "sunmi": 1042, "yoon": 1042, "talgatomarov": 1042, "tamirlan1": 1042, "nonner": 1042, "vink": [1042, 1044], "tiphain": 1042, "viard": 1042, "titu": 1042, "vachan": 1042, "vandana": 1042, "iyer": 1042, "waelbenamara": 1042, "wderos": 1042, "wenliwyan": 1042, "windber": 1042, "19579": 1043, "19646": 1043, "stopiter": 1043, "19922": 1043, "19732": 1043, "ishikawa": [1043, 1044], "19407": 1043, "ushtanit": [1043, 1044], "19982": 1043, "19939": 1043, "halvic": 1043, "19703": 1043, "sobkevich": 1043, "villaz\u00f3n": 1043, "terraza": 1043, "fonari": [1043, 1044], "19182": 1043, "yosuk": [1043, 1044], "kobayashi": [1043, 1044], "19721": 1043, "19659": 1043, "19211": 1043, "19847": 1043, "xiaoyu": 1043, "chai": [1043, 1046, 1047], "19308": 1043, "19234": 1043, "19727": 1043, "delong": [1043, 1044], "19888": 1043, "19924": 1043, "19271": 1043, "zhaowei": 1043, "19580": 1043, "brice": [1043, 1044], "adamson": 1043, "wil": 1043, "yegelwel": 1043, "css": 1043, "19417": 1043, "19179": 1043, "19126": 1043, "17448": 1043, "17107": 1043, "17546": 1043, "17856": 1043, "17984": 1043, "riedmann": 1043, "francesco": [1043, 1046], "casalegno": 1043, "18052": 1043, "sean": [1043, 1044, 1046], "stallei": 1043, "17937": 1043, "counts_": 1043, "init_size_": 1043, "17864": 1043, "17616": 1043, "18167": 1043, "18256": 1043, "jayratn": 1043, "16392": 1043, "17095": 1043, "18746": 1043, "norm_y_weight": 1043, "x_mean_": 1043, "y_mean_": 1043, "x_std_": 1043, "y_std_": 1043, "18768": 1043, "18302": 1043, "md5": 1043, "checksum": 1043, "14800": 1043, "17396": 1043, "jiaxiang": 1043, "17491": 1043, "18280": 1043, "17499": 1043, "17610": 1043, "18525": 1043, "11064": 1043, "17414": 1043, "18149": 1043, "17679": 1043, "18528": 1043, "villanova": [1043, 1044], "14446": 1043, "18394": 1043, "16985": 1043, "garbag": 1043, "18334": 1043, "multicor": [1043, 1044], "18341": 1043, "egor": 1043, "smirnov": 1043, "18410": 1043, "17702": 1043, "18326": 1043, "changedbehaviorwarn": 1043, "nonblasdotwarn": 1043, "17804": 1043, "17367": 1043, "15427": 1043, "gangesh": 1043, "gudmalwar": 1043, "6545": 1043, "17159": 1043, "15361": 1043, "17878": 1043, "17090": 1043, "_check_bounds_param": 1043, "12638": 1043, "lannuzel": 1043, "17526": 1043, "ayako": 1043, "yagi": 1043, "17612": 1043, "srimukh": 1043, "sripada": 1043, "16493": 1043, "darshan": 1043, "15636": 1043, "18987": 1043, "16619": 1043, "16906": 1043, "roei": 1043, "kahni": 1043, "18293": 1043, "16289": 1043, "kishimoto": 1043, "18639": 1043, "13003": 1043, "s\u00e1nchez": 1043, "18545": 1043, "laurenz": 1043, "reitsam": 1043, "17578": 1043, "knox": 1043, "6624": 1043, "marijn": 1043, "vliet": 1043, "18121": 1043, "18607": 1043, "fhaselbeck": 1043, "18622": 1043, "haesun": [1043, 1046, 1047], "10493": 1043, "17997": 1043, "maisonneuv": 1043, "square_dist": 1043, "17662": 1043, "18278": 1043, "17412": 1043, "16625": 1043, "10591": 1043, "karnowski": 1043, "plot_det_curv": [1043, 1044], "18176": 1043, "10708": 1043, "15007": 1043, "hathidara": 1043, "10711": 1043, "17192": 1043, "avi": [1043, 1044], "17225": 1043, "17569": 1043, "17651": 1043, "mato": 1043, "17777": 1043, "shubhanshu": 1043, "mishra": [1043, 1044], "17826": 1043, "decal": 1043, "willard": 1043, "17935": 1043, "cari": 1043, "goltermann": 1043, "18114": 1043, "18405": 1043, "yakov": 1043, "pchelintsev": 1043, "13900": 1043, "17478": 1043, "teon": 1043, "13204": 1043, "kosic": 1043, "18527": 1043, "18343": 1043, "devi": 1043, "sandeep": 1043, "18595": 1043, "18222": 1043, "18266": 1043, "subrat": 1043, "sahu": 1043, "15126": 1043, "17987": 1043, "17233": 1043, "zolisa": 1043, "bleki": 1043, "histgradientboost": 1043, "18124": 1043, "brocchini": 1043, "armstrong": 1043, "17427": 1043, "17038": 1043, "neighborsbas": [1043, 1046], "17148": 1043, "18691": 1043, "18370": 1043, "18612": 1043, "17603": 1043, "17604": 1043, "17606": 1043, "17608": 1043, "17609": 1043, "17633": 1043, "17661": 1043, "17932": 1043, "16352": 1043, "17759": 1043, "18269": 1043, "17876": 1043, "18429": 1043, "biernat": 1043, "17317": 1043, "17406": 1043, "wick": 1043, "18406": 1043, "17833": 1043, "yashika": 1043, "18510": 1043, "18447": 1043, "16066": 1043, "18682": 1043, "16935": 1043, "17193": 1043, "16335": 1043, "14982": 1043, "11682": 1043, "patric": [1043, 1044], "15763": 1043, "16530": 1043, "shuhua": 1043, "17386": 1043, "17187": 1043, "x_idx_sort": 1043, "17614": 1043, "check_methods_sample_order_invari": [1043, 1045], "17598": 1043, "ngo": 1043, "17992": 1043, "endian": 1043, "17644": 1043, "18508": 1043, "abo7atm": 1043, "spannbauer": 1043, "deodhar": 1043, "alexandracraciun": 1043, "amy12xx": 1043, "tiwari": 1043, "choraria": 1043, "subramaniyan": 1043, "kushwaha": 1043, "atsushi": [1043, 1044], "nukariya": [1043, 1044], "aura": 1043, "autoviz": 1043, "auto_viml": 1043, "avinash": 1043, "anak": 1043, "barankaraku": 1043, "barberogaston": 1043, "beatrizsmg": 1043, "mainy": 1043, "bossan": [1043, 1045, 1046, 1047], "pedigo": [1043, 1044], "bhavika": 1043, "devnani": 1043, "biprateep": 1043, "dei": 1043, "bmaisonn": 1043, "byron": 1043, "ceethinwa": [1043, 1044], "chaitanyamog": 1043, "clmbst": 1043, "coelhudo": 1043, "crispinlogan": [1043, 1046, 1047], "cristina": 1043, "mula": 1043, "darioka": [1043, 1045, 1046], "declan": 1043, "neill": 1043, "deeksha": 1043, "madan": 1043, "fiegel": [1043, 1044, 1046], "khoo": 1043, "eschibli": 1043, "fran": [1043, 1044, 1045], "larsson": [1043, 1044, 1045], "sheni": 1043, "genvalen": [1043, 1044, 1045, 1046, 1047], "kiragu": 1043, "gesa": 1043, "stupperich": 1043, "ghislain": 1043, "vaillant": 1043, "gim": 1043, "seng": 1043, "chevali": 1043, "bohl": [1043, 1045], "schole": 1043, "hitesh": 1043, "somani": 1043, "hoda1394": 1043, "moin": 1043, "hugorichard": 1043, "isuru": 1043, "wiryadi": 1043, "j0rd1smit": 1043, "jaehyun": 1043, "ahn": 1043, "tae": 1043, "hoctor": 1043, "vese": 1043, "jeevan": 1043, "jeroenpeterbo": 1043, "jhay": 1043, "jigna": 1043, "panchal": 1043, "jim0421": 1043, "joaquin": 1043, "gorb": 1043, "moya": 1043, "kartik": 1043, "chugh": 1043, "kaylani2": 1043, "kendrick": 1043, "cetina": 1043, "kenni": 1043, "isakov": 1043, "koki": 1043, "nishihara": 1043, "krum": [1043, 1045], "arnaudov": [1043, 1045], "oldja": 1043, "guitton": 1043, "mariam": 1043, "l\u00f6ning": 1043, "scheubrein": 1043, "megasari": 1043, "mathschi": 1043, "giudic": 1043, "milan": 1043, "straka": 1043, "muoki": 1043, "caleb": 1043, "haiat": 1043, "nadia": 1043, "tahiri": 1043, "ph": 1043, "hamada": 1043, "neil": 1043, "botelho": 1043, "nil": 1043, "noelano": 1043, "oj_lappi": 1043, "oleh": [1043, 1045], "kozynet": [1043, 1045], "pankaj": 1043, "jindal": 1043, "pardeep": 1043, "parthiv": 1043, "chigurupati": 1043, "pgithub": 1043, "probinette4": 1043, "pwalchessen": 1043, "rachel": [1043, 1046], "fischoff": 1043, "toshniw": 1043, "rafei": 1043, "iqbal": 1043, "rahul": 1043, "jakhar": 1043, "rachum": 1043, "ramyanp": [1043, 1044], "rauwuckl": 1043, "ravi": [1043, 1046], "kiran": 1043, "boggavarapu": 1043, "rishi": 1043, "advani": 1043, "rithvik": 1043, "romijnd": 1043, "tavenard": 1043, "rubi": 1043, "werman": 1043, "ryotaro": 1043, "tsukada": 1043, "sadak": 1043, "khandelw": 1043, "ezebunandu": 1043, "kimbinyi": 1043, "shail": 1043, "keller": 1043, "shao": [1043, 1044, 1045], "shooter23": [1043, 1044], "soledad": 1043, "galli": 1043, "subrat93": 1043, "sunitha": 1043, "selvan": 1043, "kusanagi2": 1043, "terenc": [1043, 1044], "honl": [1043, 1044], "thij": [1043, 1046, 1047], "thomas9292": 1043, "thorben": 1043, "tijanajovanov": 1043, "timo": 1043, "tnwei": 1043, "ufmay": 1043, "umberto": 1043, "lupo": 1043, "vika": [1043, 1045], "viniciu": [1043, 1044], "fuck": [1043, 1044], "violeta": 1043, "watchtheblur": 1043, "willpeppo": 1043, "xethan": 1043, "qianm": 1043, "yue": 1043, "yutaro": 1043, "ikeda": 1043, "zacchari": 1043, "ramzi": 1043, "zoj613": 1043, "21271": 1044, "21833": 1044, "siavash": 1044, "rezazadeh": 1044, "19210": 1044, "21295": 1044, "22050": 1044, "21991": 1044, "19869": 1044, "21481": [1044, 1045], "andr\u00e9": [1044, 1045, 1047], "babino": [1044, 1045], "disconnect": 1044, "21915": 1044, "21694": 1044, "minknowski": 1044, "cdist": 1044, "21741": 1044, "21871": 1044, "21845": 1044, "21517": 1044, "21917": 1044, "21552": 1044, "escap": [1044, 1046], "21493": 1044, "21199": 1044, "20638": 1044, "bohn\u00e9": 1044, "21179": 1044, "21195": 1044, "21130": 1044, "20761": 1044, "21251": 1044, "min_idf": 1044, "max_idf": 1044, "20752": 1044, "alek": [1044, 1045], "lefebvr": [1044, 1045], "21340": 1044, "21093": 1044, "21351": 1044, "cve": 1044, "28975": 1044, "21336": 1044, "_check_sample_weight": 1044, "only_non_neg": 1044, "20880": 1044, "andr\u00e1": [1044, 1045, 1046, 1047], "if_delegate_has_method": [1044, 1045], "21145": 1044, "zahlii": 1044, "21389": 1044, "20002": 1044, "19310": 1044, "least_squar": 1044, "19733": 1044, "lad": 1044, "absolute_loss": 1044, "20165": 1044, "18444": 1044, "18010": 1044, "threadsaf": 1044, "18736": 1044, "17443": 1044, "19641": 1044, "20087": 1044, "fauchereau": 1044, "19002": 1044, "19052": 1044, "yusuk": 1044, "nagasaka": 1044, "17622": 1044, "19024": 1044, "franki": 1044, "robertson": 1044, "20117": 1044, "natchiappan": [1044, 1045], "19883": 1044, "20597": 1044, "20899": 1044, "20200": 1044, "fit_": 1044, "partial_fit_": 1044, "19297": 1044, "20560": 1044, "18393": 1044, "bittarello": 1044, "19263": 1044, "19244": 1044, "18459": 1044, "nd": [1044, 1048], "18898": 1044, "ora": 1044, "phongpanagnam": 1044, "21080": 1044, "ledoit_wolf_shrinkag": 1044, "20416": 1044, "defoi": 1044, "20583": 1044, "19365": 1044, "ateif": 1044, "sara": 1044, "19669": 1044, "importlib": 1044, "pyoxid": 1044, "20297": 1044, "20209": 1044, "19011": 1044, "20729": 1044, "12069": 1044, "19046": 1044, "surya": [1044, 1045], "18433": 1044, "19198": 1044, "19159": 1044, "beno\u00eet": 1044, "mal\u00e9zieux": 1044, "19908": 1044, "20512": 1044, "20960": 1044, "cgroup": [1044, 1045], "quota": [1044, 1045], "20477": 1044, "19799": 1044, "19564": 1044, "19836": 1044, "19162": 1044, "10096": 1044, "fenil": 1044, "suchak": 1044, "20159": 1044, "murata": [1044, 1045], "20534": 1044, "19296": 1044, "19035": 1044, "19520": 1044, "18964": 1044, "19401": 1044, "relova": 1044, "17169": 1044, "dmytro": 1044, "lituiev": 1044, "20380": 1044, "pulido": 1044, "felip": [1044, 1045, 1046, 1047], "bidu": [1044, 1045], "rutter": 1044, "20515": 1044, "carsten": 1044, "allefeld": 1044, "19568": 1044, "shyam": 1044, "20207": 1044, "tomohiro": 1044, "endo": 1044, "20161": 1044, "shuhei": 1044, "kayawari": 1044, "arka204": [1044, 1046], "20431": 1044, "pfaffel": 1044, "19428": 1044, "hamoumi": 1044, "19411": 1044, "20959": 1044, "20554": 1044, "xiangyin": 1044, "kong": 1044, "9978": 1044, "10027": 1044, "16449": 1044, "20231": 1044, "naka": 1044, "19571": 1044, "20155": 1044, "oura": [1044, 1045, 1046], "19004": 1044, "midvidi": 1044, "19055": 1044, "19172": 1044, "19426": 1044, "19499": 1044, "strubel": 1044, "19616": 1044, "19391": 1044, "19390": 1044, "linearmodel": 1044, "17743": 1044, "17772": 1044, "17746": 1044, "17785": 1044, "17750": 1044, "17769": 1044, "20683": 1044, "19491": 1044, "19472": 1044, "shortest_path": 1044, "20531": 1044, "19415": 1044, "17036": 1044, "20326": 1044, "uttam": 1044, "9843": 1044, "19643": 1044, "attard": 1044, "19784": 1044, "18328": 1044, "20312": 1044, "divyanshu": 1044, "deoli": 1044, "18543": 1044, "20552": 1044, "19278": 1044, "20030": 1044, "tingshan": 1044, "18649": 1044, "rodion": 1044, "martynov": 1044, "20619": 1044, "baseshufflesplit": 1044, "20056": 1044, "pabloduque0": 1044, "prematur": 1044, "20904": 1044, "tomasz": 1044, "jakubek": [1044, 1045], "18925": 1044, "poznik": [1044, 1045, 1046], "18842": 1044, "19473": 1044, "jiefangxuanyan": 1044, "20072": 1044, "20842": 1044, "mart\u00edn": [1044, 1045], "19631": 1044, "19790": 1044, "flynn": [1044, 1046], "18368": 1044, "19483": 1044, "20526": 1044, "19069": 1044, "19041": 1044, "20250": 1044, "20652": 1044, "19934": 1044, "gleb": [1044, 1046, 1047], "levitskii": 1044, "19734": 1044, "robinson": 1044, "19752": 1044, "zhehao": [1044, 1045, 1046, 1047], "19527": 1044, "19788": 1044, "19356": 1044, "makoeppel": 1044, "19879": 1044, "19906": 1044, "20727": 1044, "20961": 1044, "n_input_features_": 1044, "20240": 1044, "20843": 1044, "18959": 1044, "wstate": 1044, "20023": 1044, "19336": 1044, "20272": 1044, "19459": 1044, "bezuidenhout": 1044, "clifford": 1044, "akai": 1044, "nettei": 1044, "19948": 1044, "20657": 1044, "19766": 1044, "20385": 1044, "_weighted_percentil": 1044, "huberlossfunct": 1044, "20528": 1044, "_safe_index": 1044, "20673": 1044, "is_scalar_nan": 1044, "assert_warn": 1044, "assert_warns_messag": 1044, "20521": 1044, "abdulelah": 1044, "mesfer": 1044, "adrian": [1044, 1045, 1046], "garcia": 1044, "badaracco": 1044, "sad\u0142ocha": 1044, "rubial": 1044, "alessia": 1044, "marcolini": 1044, "alihan": 1044, "zihna": 1044, "alin": 1044, "amol": 1044, "deshmukh": 1044, "pessoa": 1044, "anavelyz": 1044, "ashish": [1044, 1047], "ashvith": 1044, "shetti": 1044, "baam": [1044, 1045], "baptbillard": 1044, "bmalezieux": 1044, "bumblebe": 1044, "caherrera": 1044, "meli": [1044, 1045, 1046], "chrissobel": 1044, "yeh": 1044, "chuliang": 1044, "cliffordemmanuel": 1044, "conner": 1044, "shen": 1044, "dimitri": [1044, 1045, 1046, 1047], "papadopoulo": [1044, 1045, 1046, 1047], "orfano": [1044, 1045, 1046, 1047], "dmallia17": 1044, "ds_ana": 1044, "jardim": 1044, "edwinwenink": 1044, "eleni": 1044, "markou": 1044, "ericellwang": [1044, 1045], "ezri": 1044, "mudd": 1044, "fato": 1044, "morina": 1044, "hafner": 1044, "flyingdutchman23": 1044, "uwha": [1044, 1045], "bereng": 1044, "frederick": 1044, "frellwan": 1044, "vicent": [1044, 1045, 1046], "geroldcsend": 1044, "glen": 1044, "gl\u00f2ria": [1044, 1046], "mu\u00f1oz": [1044, 1046], "gregorystrubel": 1044, "groceryheist": 1044, "guiweb": 1044, "haidar": [1044, 1045], "almubarak": [1044, 1045], "moritz": [1044, 1046], "g\u00fcnther": 1044, "mirza": 1044, "harutaka": 1044, "kawamura": 1044, "hassan": 1044, "alsawadi": 1044, "geovan": [1044, 1045], "gome": [1044, 1045], "lima": [1044, 1045], "ilic": 1044, "ikko": 1044, "ashimin": 1044, "isaack": 1044, "mungui": 1044, "ishaan": 1044, "bhat": [1044, 1046, 1047, 1048], "ishan": [1044, 1045], "iwhalv": 1044, "preiss": 1044, "budarz": 1044, "jannik": 1044, "jennif": 1044, "jianzhu": 1044, "guo": 1044, "jnboehm": 1044, "johanwork": 1044, "paton": 1044, "n\u00e1pole": 1044, "julio": 1044, "julyrashchenko": 1044, "jvm": 1044, "kadatatlu": 1044, "kishor": 1044, "karen": 1044, "palacio": 1044, "kmatt10": 1044, "kobaski": 1044, "kot271828": 1044, "kunj": 1044, "kurumeyuta": 1044, "kxytim": 1044, "lacrosse91": 1044, "laveen": 1044, "bagai": 1044, "leonardo": 1044, "rocco": [1044, 1045, 1046], "uieda": 1044, "leopoldo": 1044, "corona": 1044, "lsturtew": 1044, "lucca": 1044, "quadro": 1044, "ly648499246": 1044, "mabu": 1044, "manaileng": 1044, "mariangela": 1044, "marielaraj": 1044, "hirzel": 1044, "mateo": 1044, "nore\u00f1a": 1044, "mathi": 1044, "batoul": 1044, "calcot": 1044, "prieur": 1044, "\u00f6zer": 1044, "miao": 1044, "cai": 1044, "karbownik": 1044, "michalkrawczyk": [1044, 1045], "mitzi": [1044, 1045], "mlondschien": 1044, "haseeb": [1044, 1045], "khoual": 1044, "jarir": 1044, "kanji": 1044, "nadim": 1044, "kawwa": 1044, "nanshan": 1044, "naozin555": 1044, "fultz": 1044, "nic": 1044, "annau": 1044, "stefani": [1044, 1046, 1047, 1048], "nigel": 1044, "bosch": 1044, "nodar": 1044, "okroshiashvili": 1044, "ogbonna": 1044, "chibuik": 1044, "ogordon100": 1044, "phongpanangam": 1044, "duqu": 1044, "ibieta": 1044, "jimenez": [1044, 1045], "lacouth": 1044, "olszewski": 1044, "dye": 1044, "pierreattard": [1044, 1045], "yve": 1044, "borgn": 1044, "pranayanchuri": 1044, "princ": 1044, "canuma": 1044, "putschblo": 1044, "ranjanikrishnan": 1044, "rene": 1044, "corneil": 1044, "ricardojnf": 1044, "richardscottoz": 1044, "sandi": 1044, "khosasi": 1044, "benhur": 1044, "flore": 1044, "shinehid": 1044, "shinnar": 1044, "tootoonian": 1044, "solosil": 1044, "kolawol": 1044, "stagg": 1044, "swpeas": 1044, "tfifi": 1044, "caswel": [1044, 1047], "timotheemathieu": 1044, "wolodzko": 1044, "tliu68": 1044, "uhmann": 1044, "tom1092": 1044, "tom\u00e1": [1044, 1045], "moreyra": 1044, "tommaso": 1044, "noto": 1044, "tsuga": 1044, "vang": 1044, "gkiasta": 1044, "vil\u00e9m": 1044, "zouhar": 1044, "vlasovet": 1044, "waijean": 1044, "whidou": 1044, "xiaoyuchai": 1044, "yasmeen": 1044, "alsaedi": 1044, "yoch": 1044, "yusukenagasaka": 1044, "yzhenman": 1044, "zeyusun": 1044, "zhaoweiwang": 1044, "msvcp140": 1045, "dll": 1045, "24631": 1045, "24446": 1045, "10805": 1045, "mathia": 1045, "23471": 1045, "24015": 1045, "23990": 1045, "23833": 1045, "24017": 1045, "sorski": [1045, 1046], "23395": 1045, "23636": 1045, "22063": 1045, "22059": 1045, "kurz": [1045, 1046], "23608": 1045, "23548": 1045, "24087": 1045, "23273": 1045, "23194": 1045, "23198": 1045, "lise": 1045, "kleiber": 1045, "23358": 1045, "23264": 1045, "feature_names_in": 1045, "23299": 1045, "23214": 1045, "collot": [1045, 1046], "baak": 1045, "23370": 1045, "23410": 1045, "compute_sample_weight": 1045, "23115": 1045, "22868": 1045, "multiindex": 1045, "22410": 1045, "23271": 1045, "21987": 1045, "22064": 1045, "22065": 1045, "22288": 1045, "22320": 1045, "21219": 1045, "21542": 1045, "23098": 1045, "22318": 1045, "23036": 1045, "binary_crossentropi": 1045, "23040": 1045, "23046": 1045, "22856": 1045, "21032": 1045, "18170": 1045, "21038": 1045, "14975": 1045, "22526": 1045, "23095": 1045, "silk": 1045, "20031": 1045, "krawczyk": 1045, "21148": 1045, "22255": 1045, "21881": 1045, "vassard": 1045, "22217": 1045, "21735": 1045, "22154": 1045, "22537": 1045, "iofal": 1045, "arisa": [1045, 1046], "22775": 1045, "22913": 1045, "randomgeek78": 1045, "22493": 1045, "19680": 1045, "thibaut": 1045, "22119": 1045, "22016": 1045, "22015": 1045, "19747": 1045, "attalla": 1045, "22498": 1045, "21482": 1045, "pujalt": 1045, "22412": 1045, "16605": 1045, "21901": 1045, "rileran": 1045, "23113": 1045, "ilion": 1045, "beyst": 1045, "21425": 1045, "stefanini": 1045, "16948": 1045, "patricio": 1045, "cerda": 1045, "22002": 1045, "21109": 1045, "iter_offset": 1045, "return_inner_stat": 1045, "inner_stat": 1045, "inner_stats_": 1045, "iter_offset_": 1045, "18975": 1045, "22111": 1045, "22181": 1045, "21334": 1045, "21705": 1045, "stanlei": [1045, 1046, 1047], "21432": 1045, "22806": 1045, "jihan": 1045, "benni": 1045, "21713": 1045, "haya": 1045, "21567": 1045, "maggi": 1045, "chege": 1045, "22300": 1045, "15948": 1045, "sysuresh": 1045, "22553": 1045, "19490": 1045, "ferrin": 1045, "22120": 1045, "15984": 1045, "okon": 1045, "22696": 1045, "22486": 1045, "21800": 1045, "20567": 1045, "22159": 1045, "20811": 1045, "21814": 1045, "16748": 1045, "siqi": 1045, "22215": 1045, "23047": 1045, "22695": 1045, "22697": 1045, "21762": 1045, "22106": 1045, "gijsber": 1045, "21632": 1045, "genesi": [1045, 1047], "valencia": [1045, 1047], "22566": 1045, "22908": 1045, "23097": 1045, "23079": 1045, "20803": 1045, "23023": 1045, "21573": 1045, "21832": 1045, "20145": 1045, "22356": 1045, "18482": 1045, "gameiro": 1045, "kharsa": 1045, "22370": 1045, "17819": 1045, "22235": 1045, "21837": 1045, "wagner": 1045, "22199": 1045, "aidar": 1045, "shakerimoff": 1045, "tenavi": 1045, "nakamura": 1045, "22223": 1045, "marcom": 1045, "21617": 1045, "ritter": [1045, 1046], "21114": 1045, "21078": 1045, "21448": 1045, "16061": 1045, "19438": 1045, "18310": 1045, "elfner": 1045, "22249": 1045, "22137": 1045, "22694": 1045, "22808": 1045, "22950": 1045, "21086": 1045, "22206": 1045, "21808": 1045, "22548": 1045, "22062": 1045, "trujillo": [1045, 1046], "22148": 1045, "22240": 1045, "9087": 1045, "22525": 1045, "19689": 1045, "21606": 1045, "21341": 1045, "preservs": 1045, "21767": 1045, "21724": 1045, "yar": 1045, "khine": 1045, "phyo": 1045, "21998": 1045, "22891": 1045, "22899": 1045, "23256": 1045, "19794": 1045, "21534": 1045, "22254": 1045, "21805": 1045, "jeann": 1045, "dionisi": 1045, "22685": 1045, "n_neighbour": 1045, "18832": 1045, "23033": 1045, "21565": 1045, "17266": 1045, "22118": 1045, "ohad": 1045, "22284": 1045, "19158": 1045, "nicki": 1045, "skaft": 1045, "20753": 1045, "22108": 1045, "22635": 1045, "19085": 1045, "22866": 1045, "21576": 1045, "emil": 1045, "dugnat": 1045, "21873": 1045, "21177": 1045, "20408": 1045, "ceballo": 1045, "22058": 1045, "23034": 1045, "22203": 1045, "21026": 1045, "21880": 1045, "mrinal": 1045, "tyagi": 1045, "22982": 1045, "22508": 1045, "comb": 1045, "22604": 1045, "22212": 1045, "21430": 1045, "desislava": 1045, "vasileva": 1045, "22687": 1045, "22150": 1045, "22248": 1045, "20860": 1045, "shubhraneel": 1045, "21888": 1045, "21954": 1045, "22953": 1045, "16018": 1045, "21445": 1045, "21988": 1045, "get_output_feature_nam": 1045, "21569": 1045, "21079": 1045, "20653": 1045, "21434": 1045, "19916": 1045, "22735": 1045, "compute_inverse_transform": 1045, "21701": 1045, "22114": 1045, "21330": 1045, "21408": 1045, "22149": 1045, "21436": 1045, "22191": 1045, "22476": 1045, "21278": 1045, "21316": 1045, "clickabl": 1045, "21298": 1045, "22237": 1045, "check_scalar": 1045, "22218": 1045, "validationerror": 1045, "check_requires_y_non": 1045, "22578": 1045, "arcidiacono": [1045, 1046], "22595": 1045, "21310": 1045, "22027": 1045, "lanterni": 1045, "23077": 1045, "22188": 1045, "22830": 1045, "2357juan": [1045, 1046, 1047], "adamgonzo": 1045, "adijohar": 1045, "kumawat": 1045, "raghuwanshi": 1045, "duron": 1045, "ahmadjubair33": 1045, "aj": 1045, "druck": 1045, "peixinho": 1045, "arroyo": 1045, "alexanmv": 1045, "almeidayoel": 1045, "amar": [1045, 1046, 1047], "amrcod": 1045, "griva": [1045, 1046], "andrii": 1045, "herrou": 1045, "ducout": 1045, "arth": 1045, "arthurmello": 1045, "arturoamor": 1045, "atharva": 1045, "patil": 1045, "aufarkari": 1045, "avm19": [1045, 1046], "ayan": 1045, "bardiya": [1045, 1046], "behrouz": 1045, "ben3940": 1045, "bijil": 1045, "subhash": 1045, "bmreinig": 1045, "brenden": 1045, "kadota": 1045, "cdrig": 1045, "chalmer": 1045, "chitteti": 1045, "srinath": [1045, 1046], "chloe": 1045, "agath": 1045, "azencott": 1045, "christopherlim98": 1045, "weidemann": 1045, "combsccod": 1045, "daniela": [1045, 1046], "darren": [1045, 1046], "eargl": 1045, "gilbertson": [1045, 1046], "dea": [1045, 1046, 1047], "mar\u00eda": [1045, 1046, 1047], "denni": 1045, "osei": 1045, "dessyvv": 1045, "dev514": 1045, "diwakar": 1045, "ries": 1045, "drskd": 1045, "emiko": 1045, "sano": 1045, "emmanouil": 1045, "gionanidi": 1045, "ermolaevpa": [1045, 1046], "estefania": 1045, "barreto": 1045, "ojeda": 1045, "eyast": 1045, "fatima": 1045, "gasmi": 1045, "luna": 1045, "glushchenkov": 1045, "fkaren27": 1045, "fpgawesom": 1045, "ftorres16": [1045, 1046], "gabor": 1045, "berei": 1045, "kertesz": 1045, "gauthier": 1045, "giancarlo": 1045, "glennfrutiz": 1045, "guillermo": 1045, "fern\u00e1ndez": 1045, "hansin": [1045, 1046], "henrymooresc": [1045, 1046], "hideaki": 1045, "imamura": 1045, "hind": 1045, "hmasdev": 1045, "hvassard": 1045, "aki": [1045, 1046, 1047], "iasoon": 1045, "ingela": 1045, "cowton": 1045, "jalexand3r": 1045, "jauhar": 1045, "jaya": 1045, "kommireddi": 1045, "je": 1045, "jelfner": 1045, "jenni": 1045, "jirka": 1045, "borovec": 1045, "cipri\u00e1n": 1045, "loayza": 1045, "chazalon": 1045, "mess": 1045, "jovan": [1045, 1046], "stojanov": [1045, 1046], "jschuerz": 1045, "katotten": 1045, "ken4git": 1045, "doucet": 1045, "kimayoung": 1045, "koushik": 1045, "kranthi": 1045, "sedamaki": 1045, "krumetoft": 1045, "lesne": 1045, "casino": [1045, 1046], "logan": [1045, 1046, 1047], "lucieclair": 1045, "luiz": 1045, "magali": 1045, "mandjev": 1045, "wurp": [1045, 1046], "boerner": 1045, "wimld": 1045, "martel": 1045, "corentin": 1045, "mat\u00eda": 1045, "matjansen": 1045, "francia": 1045, "megabyt": 1045, "mehrdad": 1045, "moradizadeh": 1045, "melemo2": 1045, "micky774": [1045, 1046], "milana2": 1045, "millawel": 1045, "miwojc": 1045, "mizuki": 1045, "mlant": 1045, "mohit": [1045, 1048], "moonkyung94": 1045, "mpoemsl": 1045, "mrinaltyagi": 1045, "leu": 1045, "msabati": 1045, "nadirhan": 1045, "\u015fahin": 1045, "naipawat": [1045, 1046], "poolsawat": [1045, 1046], "nartayxd": 1045, "nastegiano": 1045, "nathansquan": 1045, "detlefsen": 1045, "niket": 1045, "nikhil": 1045, "suresh": 1045, "kondratyev": 1045, "husak": 1045, "partev": [1045, 1046, 1047], "pelennor": 1045, "piet": [1045, 1046], "br\u00f6mmel": [1045, 1046], "pinki": 1045, "poloso": 1045, "pramod": 1045, "anantharam": 1045, "puhuk": [1045, 1046], "purna": 1045, "mansingh": 1045, "quadv": 1045, "rahil": [1045, 1046, 1047, 1048], "boy": 1045, "raz": 1045, "hoshia": 1045, "rishabh": 1045, "barnowski": [1045, 1046], "rsnegrin": 1045, "yadav": 1045, "sakinaouisrani": 1045, "sanjai": 1045, "marreddi": 1045, "seel": 1045, "sele": [1045, 1046], "seyedsaman": 1045, "emami": 1045, "shandeng123": 1045, "sharmadharmp": 1045, "shaymernaturalint": 1045, "shuangchi": [1045, 1046], "siavrez": 1045, "slishak": 1045, "spikebh": 1045, "sply88": 1045, "kailasa": [1045, 1046], "sultan": 1045, "orazbayev": 1045, "sumit": 1045, "saha": 1045, "sven": [1045, 1046], "eschlbeck": 1045, "stehl": [1045, 1046], "swapnil": 1045, "teunp": 1045, "ferr\u00e9": 1045, "hjortkj\u00e6r": 1045, "thiruvenkadam": 1045, "toastedyeast": [1045, 1046], "mctiernan": [1045, 1046], "udit": 1045, "ugo": 1045, "marchand": 1045, "vera": [1045, 1046], "komey": [1045, 1046], "victoireloui": 1045, "vishwakarma": 1045, "vikrant": 1045, "khedkar": 1045, "chernyi": 1045, "weijiadu": 1045, "yuan": [1045, 1046, 1047], "yiyangq": 1045, "yosshi999": 1045, "yuki": 1045, "koyama": 1045, "zeel": 1045, "zempleni": 1045, "zhenfish": 1045, "\u8d75\u4e30": 1045, "25747": 1046, "base_estimator__": 1046, "25477": 1046, "25563": 1046, "25570": 1046, "25664": 1046, "25774": 1046, "25500": 1046, "25589": 1046, "25704": 1046, "min_sample_split": 1046, "25744": 1046, "25619": 1046, "25638": 1046, "25354": 1046, "25174": 1046, "25089": 1046, "25129": 1046, "25363": 1046, "25188": 1046, "25295": 1046, "spec": [1046, 1047], "25312": 1046, "backslash": 1046, "25511": 1046, "25172": 1046, "25341": 1046, "25094": 1046, "25250": 1046, "25370": 1046, "23101": 1046, "24873": 1046, "25694": 1046, "25274": 1046, "25296": 1046, "25147": 1046, "23619": 1046, "24354": 1046, "safiuddin": 1046, "khaja": 1046, "gsiisg": 1046, "23935": 1046, "22527": 1046, "_sgd_fast": 1046, "_plain_sgd": 1046, "oversc": 1046, "23798": 1046, "24543": 1046, "24465": 1046, "23734": 1046, "24699": 1046, "23865": 1046, "simd": 1046, "primit": 1046, "23446": 1046, "23197": 1046, "23604": 1046, "23585": 1046, "24556": 1046, "maladi\u00e8r": [1046, 1047], "24617": 1046, "sim4n6": 1046, "24688": 1046, "22054": 1046, "roic": 1046, "24264": 1046, "maladier": 1046, "14736": 1046, "hunt": 1046, "zhan": 1046, "20802": 1046, "pokorni": 1046, "22965": 1046, "22968": 1046, "23038": 1046, "23210": 1046, "24258": 1046, "23470": 1046, "21938": 1046, "23127": 1046, "19075": 1046, "ramo": 1046, "carre\u00f1o": 1046, "24951": 1046, "22268": 1046, "mohamedbsh": 1046, "23905": 1046, "11860": 1046, "ablin": 1046, "24528": 1046, "23726": 1046, "24421": 1046, "kshitij": [1046, 1047], "22554": 1046, "24218": 1046, "molin": 1046, "21020": 1046, "24856": 1046, "22014": 1046, "23252": 1046, "24538": 1046, "24889": 1046, "24146": 1046, "peretti": 1046, "nestor": 1046, "navarro": 1046, "nati": 1046, "tomatti": 1046, "24855": 1046, "24849": 1046, "20415": 1046, "24283": 1046, "24894": 1046, "23819": [1046, 1047], "edoardo": [1046, 1048], "abati": [1046, 1048], "24747": 1046, "24245": 1046, "24405": 1046, "16695": 1046, "vitor": 1046, "rosa": 1046, "18298": 1046, "25077": 1046, "24317": 1046, "24350": 1046, "24755": 1046, "levitski": [1046, 1047], "24637": 1046, "24767": 1046, "23275": 1046, "maxwelllzh": 1046, "24433": 1046, "yogendrasingh": 1046, "23637": 1046, "23877": 1046, "10168": 1046, "\u0142ukasz": 1046, "borchmann": 1046, "12285": 1046, "miltenberg": 1046, "13042": 1046, "parizi": 1046, "18094": 1046, "22562": 1046, "24714": 1046, "23834": 1046, "24051": 1046, "22518": 1046, "18020": 1046, "24338": 1046, "23442": 1046, "atukorala": 1046, "22710": 1046, "conroi": 1046, "trinh": 1046, "23461": 1046, "24365": 1046, "24630": 1046, "rushil": [1046, 1047], "24084": 1046, "iinfo": 1046, "24141": 1046, "24539": 1046, "23977": 1046, "23683": 1046, "andrei": [1046, 1048], "melnik": 1046, "16747": 1046, "18805": 1046, "hongshaoyang": 1046, "22269": 1046, "23139": 1046, "24645": 1046, "10468": 1046, "ruben": 1046, "22993": 1046, "24750": 1046, "rudresh": 1046, "veerkhar": 1046, "23874": 1046, "24075": 1046, "22665": 1046, "24683": 1046, "24058": 1046, "perdok": 1046, "20331": 1046, "23993": 1046, "22629": 1046, "24412": 1046, "22898": 1046, "23480": 1046, "21469": 1046, "lapack_svd_driv": 1046, "20617": 1046, "25067": 1046, "14862": 1046, "24512": 1046, "24667": 1046, "25080": 1046, "24523": 1046, "mia": 1046, "bajic": 1046, "3llobo": 1046, "kania": [1046, 1047], "anulekh": 1046, "admir": [1046, 1047], "demiraj": [1046, 1047], "adoublet": [1046, 1047], "ahmedbgh": [1046, 1047], "aiko": 1046, "akshita": 1046, "prasanth": 1046, "ala": [1046, 1047], "miola": 1046, "lebel": 1046, "buzenet": [1046, 1047], "kassa": [1046, 1047], "bera": 1046, "maennel": 1046, "aniket": 1046, "shirsat": 1046, "anthony22": [1046, 1047], "apostolo": 1046, "tsetogl": 1046, "aravindh": 1046, "artur": [1046, 1047], "hermano": [1046, 1047], "ashah002": [1046, 1047], "ashwin": [1046, 1047], "azaria": [1046, 1047], "gebremichael": [1046, 1047], "b0rxington": 1046, "badr": 1046, "moufad": 1046, "bart\u0142omiej": 1046, "go\u0144da": 1046, "bdegraaff": 1046, "berkecanrizai": 1046, "bernd": 1046, "fritzk": 1046, "bhoomika": 1046, "biswaroop": 1046, "cannon": 1046, "bsh": 1046, "ceh": 1046, "chalulu": 1046, "changyao": [1046, 1047], "zablit": 1046, "veenhui": [1046, 1047], "christianwaldmann": 1046, "christin": [1046, 1047], "verrier": 1046, "dangonite57": [1046, 1047], "danielgaerb": 1046, "davidblnc": [1046, 1047], "dayn": [1046, 1047], "khant": 1046, "dhanshre": 1046, "diadochokinet": 1046, "diederikwp": 1046, "litsidi": [1046, 1047], "drewhogg": 1046, "oc": 1046, "dwight": 1046, "lindquist": 1046, "eden": 1046, "brekk": 1046, "edern": [1046, 1047], "eleanor": 1046, "eliaschiavon": 1046, "emir": [1046, 1047], "fabrizio": 1046, "damicelli": 1046, "fcharra": 1046, "siola": [1046, 1047], "tuveri": 1046, "franck": 1046, "charra": 1046, "geevarghes": 1046, "georgiamaydai": 1046, "gianr": 1046, "lazz": 1046, "guitar": 1046, "gunesbayir": [1046, 1047], "harshit5674": 1046, "hasan": 1046, "yaman": 1046, "vrigazov": 1046, "htsedebenham": 1046, "humahn": 1046, "ido": [1046, 1047], "iglesi": 1046, "iliya": 1046, "zhechev": 1046, "iren": [1046, 1047], "ivanllt": 1046, "sedykh": 1046, "mcivor": [1046, 1047], "janfidor": [1046, 1047], "jiten": 1046, "sidhpura": 1046, "jkarolczak": 1046, "jo\u00e3o": 1046, "johnathanpi": [1046, 1047], "koumenti": 1046, "panga": [1046, 1047], "johnthagen": 1046, "fleme": 1046, "choo": [1046, 1047], "yun": [1046, 1047], "keat": [1046, 1047], "juanfe88": 1046, "juliaschoepp": [1046, 1047], "jygerardi": [1046, 1047], "ka00ri": [1046, 1047], "kanishk": 1046, "sachdev": 1046, "kanissh": 1046, "kendal": 1046, "kento": [1046, 1047], "nozawa": [1046, 1047], "eliasi": [1046, 1047], "kluge": [1046, 1047], "lieret": 1046, "kirandevraj": 1046, "kraig": 1046, "vamsi": 1046, "kapadni": 1046, "lingyi1110": 1046, "mantovani": 1046, "maascha": 1046, "madinak": 1046, "maksym": 1046, "mansi": 1046, "kostelac": [1046, 1047], "marvin": [1046, 1047], "krawutschk": [1046, 1047], "masanori": [1046, 1047], "kanazu": [1046, 1047], "haberland": [1046, 1047], "mauroantonioserrano": 1046, "maxi": 1046, "marufo": 1046, "maximesaur": [1046, 1047], "smolskii": 1046, "bou": [1046, 1047], "mehgarg": 1046, "mehmetcanakbai": 1046, "baji\u0107": 1046, "flak": 1046, "hornstein": 1046, "ruiter": 1046, "paradi": 1046, "iljin": [1046, 1047], "misa": 1046, "ogura": 1046, "wilksch": 1046, "mrastgoo": 1046, "naois": [1046, 1048], "holohan": [1046, 1048], "nass": 1046, "jacobi": 1046, "nawazish": [1046, 1047], "alam": [1046, 1047], "nguy\u1ec5n": 1046, "v\u0103n": 1046, "di\u1ec5n": 1046, "fanelli": [1046, 1047], "nihal": 1046, "thukarama": 1046, "jare": 1046, "nima10khodaveisi": 1046, "nima": 1046, "sarajpoor": 1046, "nitinramvelraj": 1046, "nnlnr": [1046, 1047], "npach": [1046, 1047], "nwanna": 1046, "nymark": 1046, "kho": 1046, "holman": 1046, "oll": 1046, "lukowski": 1046, "hassoun": 1046, "tamer": 1046, "ouss1508": [1046, 1047], "oyindamola": 1046, "olatunji": 1046, "pab": [1046, 1047], "pandata": [1046, 1047], "soar": 1046, "petar": 1046, "mlinari\u0107": 1046, "pooja": [1046, 1047], "subramaniam": [1046, 1047], "priyam": 1046, "kakati": 1046, "freeland": 1046, "keerti": 1046, "rafal": [1046, 1047], "wojdyla": [1046, 1047], "raghuv": [1046, 1047], "makhija": 1046, "rehan": 1046, "guha": 1046, "klima": 1046, "crockett": 1046, "homm": 1046, "roman4oo": 1046, "rowan": 1046, "mankoo": 1046, "sabri": 1046, "monaf": 1046, "safikh": 1046, "salahuddin": 1046, "yojana": 1046, "menes": 1046, "ephrem": 1046, "sangam": 1046, "sangamswadik": 1046, "sanjai_3": [1046, 1047], "sarahremu": 1046, "sashka": [1046, 1047], "savkomax": 1046, "gustafson": [1046, 1047], "sec65": 1046, "seljak": 1046, "shadi": [1046, 1047], "gewili": [1046, 1047], "shellyfung": 1046, "shinsuk": 1046, "mori": 1046, "shiva": [1046, 1047], "shoaib": 1046, "khan": [1046, 1047], "shogo": [1046, 1047], "hida": [1046, 1047], "shrankhla": 1046, "sonniv": [1046, 1047], "sortofamudkip": [1046, 1047], "stanislav": [1046, 1047], "modrak": [1046, 1047], "stellalin7": 1046, "vaerenbergh": [1046, 1047], "schmerler": 1046, "tabea": [1046, 1047], "kossen": [1046, 1047], "thedevpanda": 1046, "syd": 1046, "sre": 1046, "weezel": [1046, 1047], "bonald": 1046, "germer": [1046, 1047], "ion": 1046, "timofei": 1046, "kornev": 1046, "pitter": 1046, "tomiock": [1046, 1047], "mathew": 1046, "tspeng": [1046, 1047], "egashira": 1046, "rey": 1046, "puerta": 1046, "vishal": 1046, "vyom": [1046, 1047], "pathak": [1046, 1047], "wattai": 1046, "wchathura": 1046, "wen": 1046, "x110": 1046, "xuniu": 1046, "yanhong": 1046, "ef": 1046, "yusuf": [1046, 1047], "raji": [1046, 1047], "adil": 1046, "khwaja": 1046, "zeeshan": [1046, 1047], "lone": [1046, 1047], "27468": 1047, "27583": 1047, "paralel": 1047, "27573": 1047, "27580": 1047, "18488": 1047, "26814": 1047, "27044": 1047, "26913": 1047, "27167": 1047, "27243": 1047, "26602": 1047, "26521": 1047, "26748": 1047, "26600": 1047, "shreesha": [1047, 1048], "27002": 1047, "26416": 1047, "tao": 1047, "26772": 1047, "reintroduc": 1047, "26754": 1047, "26893": 1047, "senger": [1047, 1048], "26760": 1047, "26940": 1047, "26931": 1047, "26903": 1047, "roehr": 1047, "27292": 1047, "25196": 1047, "24871": 1047, "25752": 1047, "25438": 1047, "yotam": 1047, "avidar": 1047, "constantini": 1047, "26337": 1047, "25120": 1047, "27311": 1047, "25294": 1047, "25308": 1047, "25291": 1047, "25367": 1047, "25402": 1047, "25044": 1047, "smt": 1047, "26082": 1047, "24027": 1047, "25815": 1047, "24568": 1047, "26121": 1047, "25805": 1047, "26385": 1047, "26657": 1047, "binesh": 1047, "bannerje": 1047, "25251": 1047, "26503": 1047, "26286": 1047, "26323": 1047, "26033": 1047, "26108": 1047, "barth\u00e9lemi": [1047, 1048], "26433": 1047, "26386": 1047, "26551": 1047, "26579": 1047, "25784": 1047, "25490": 1047, "25956": 1047, "22409": 1047, "25177": 1047, "24882": 1047, "25186": 1047, "breve": 1047, "26318": 1047, "25506": 1047, "25601": 1047, "fidor": 1047, "25931": 1047, "25629": 1047, "26242": 1047, "toplak": 1047, "sckit": 1047, "25297": 1047, "24230": 1047, "25102": 1047, "25973": 1047, "25232": 1047, "26454": 1047, "25209": 1047, "26644": 1047, "lemo": 1047, "21809": 1047, "25732": 1047, "25190": 1047, "26207": 1047, "25587": 1047, "25697": 1047, "25214": 1047, "26653": 1047, "25531": 1047, "17388": 1047, "24769": 1047, "25713": 1047, "18723": 1047, "sahil": 1047, "24677": 1047, "24668": 1047, "dberenbaum": 1047, "25987": 1047, "26019": 1047, "25432": 1047, "25672": 1047, "lene": 1047, "preuss": 1047, "25299": 1047, "omarmanzoor": 1047, "26194": 1047, "26264": 1047, "barata": 1047, "onggo": 1047, "23099": 1047, "26021": 1047, "jiawei": 1047, "25659": 1047, "26333": 1047, "24140": 1047, "24076": 1047, "25417": 1047, "24083": 1047, "25443": 1047, "feature_union": 1047, "25093": 1047, "25220": 1047, "26325": 1047, "25334": 1047, "25677": 1047, "20524": 1047, "niuk": 1047, "23731": 1047, "24145": 1047, "22506": 1047, "24935": 1047, "seladu": 1047, "25257": 1047, "26424": 1047, "26400": 1047, "26566": 1047, "26093": 1047, "23595": 1047, "26376": 1047, "25387": 1047, "26289": 1047, "25813": 1047, "26106": 1047, "25814": 1047, "check_transformers_unfitted_stateless": 1047, "25733": 1047, "19664": 1047, "environmenterror": 1047, "ioerror": 1047, "windowserror": 1047, "26466": 1047, "kushwah": 1047, "handk": 1047, "adien": 1047, "mansouri": 1047, "alexl": 1047, "amai": 1047, "annegnx": 1047, "ansam": 1047, "zedan": 1047, "dutt": 1047, "aymericbasset": 1047, "tripramudya": 1047, "benedek": 1047, "harsanyi": 1047, "brevin": 1047, "kund": 1047, "troillard": 1047, "carla": 1047, "berenbaum": 1047, "proding": 1047, "butyugina": 1047, "elabonga": 1047, "atuo": 1047, "farhan": 1047, "hujiahong726": 1047, "ili": 1047, "jb": 1047, "mountford": 1047, "jessicakk0711": 1047, "joei": 1047, "hedlund": 1047, "linu": 1047, "fouquet": 1047, "harfouch": 1047, "mdarii": 1047, "murezzda": 1047, "nightwalkx": 1047, "nishu": 1047, "piontek": 1047, "pnucci": 1047, "sadra": 1047, "barikbin": 1047, "searchforpass": 1047, "seoeun": 1047, "th\u00e9ophil": 1047, "barang": 1047, "veghit": 1047, "vignesh": 1047, "vijeth": 1047, "moudgalya": 1047, "windiana42": 1047, "yuchen": 1047, "sooner": 1048, "26721": 1048, "27670": 1048, "27315": 1048, "26464": 1048, "26616": 1048, "cappuzzo": 1048, "Ines": 1048, "ibnukhsein": 1048, "boulard": 1048, "26648": 1048, "27538": 1048, "27308": 1048, "26789": 1048, "26896": 1048, "27058": 1048, "27005": 1048, "26525": 1048, "27490": 1048, "27500": 1048, "27478": 1048, "27389": 1048, "compute_optics_graph": 1048, "27104": 1048, "27250": 1048, "27179": 1048, "nurseit": 1048, "kamchyev": 1048, "27100": 1048, "virshup": 1048, "27239": 1048, "korobko": 1048, "27240": 1048, "27274": 1048, "27161": 1048, "27219": 1048, "27277": 1048, "27301": 1048, "lohit": 1048, "sundaramahalingam": 1048, "27252": 1048, "27166": 1048, "27314": 1048, "jax": 1048, "27137": 1048, "26855": 1048, "27601": 1048, "26315": 1048, "27098": 1048, "27431": 1048, "sok\u00f3\u0142": 1048, "27556": 1048, "27110": 1048, "26243": 1048, "27558": 1048, "outliermixin": 1048, "26506": 1048, "correspondingli": 1048, "26831": 1048, "26786": 1048, "26909": 1048, "27185": 1048, "27668": 1048, "nolan": 1048, "mcmahon": 1048, "depedend": 1048, "26459": 1048, "haoi": 1048, "27678": 1048, "tata": 1048, "27651": 1048, "27898": 1048, "26744": 1048, "27828": 1048, "26683": 1048, "25275": 1048, "27204": 1048, "27438": 1048, "27718": 1048, "sparrai": 1048, "spmatrix": 1048, "70x": 1048, "tarashanski": 1048, "scanpi": 1048, "18689": 1048, "26634": 1048, "landeau": 1048, "vigni": 1048, "27834": 1048, "26391": 1048, "26411": 1048, "27835": 1048, "27139": 1048, "13649": 1048, "reilli": 1048, "dealloc": 1048, "27865": 1048, "26278": 1048, "26957": 1048, "26163": 1048, "26736": 1048, "27645": 1048, "27817": 1048, "ongari": 1048, "27710": 1048, "26830": 1048, "24838": 1048, "hertel": 1048, "27721": 1048, "27841": 1048, "21807": 1048, "27291": 1048, "27417": 1048, "27899": 1048, "27979": 1048, "5x": 1048, "26765": 1048, "27006": 1048, "26366": 1048, "mojdeh": 1048, "rastgoo": 1048, "neg_root_mean_squared_log_error_scor": 1048, "26734": 1048, "27650": 1048, "27624": 1048, "27577": 1048, "26840": 1048, "26299": 1048, "27720": 1048, "27018": 1048, "26828": 1048, "23317": 1048, "26267": 1048, "27017": 1048, "xuefeng": 1048, "27760": 1048, "26944": 1048, "26674": 1048, "27309": 1048, "27328": 1048, "27801": 1048, "27821": 1048, "26862": 1048, "goh": 1048, "yisheng": 1048, "dia": 1048, "datastuctur": 1048, "27372": 1048, "may_share_memori": 1048, "27336": 1048, "check_estimators_pickl": 1048, "readonly_memmap": 1048, "misdetect": 1048, "27614": 1048, "27757": 1048, "log_logist": 1048, "logaddexp": 1048, "27544": 1048}, "objects": {"": [[408, 0, 0, "-", "sklearn"]], "sklearn": [[408, 0, 0, "-", "base"], [408, 0, 0, "-", "calibration"], [408, 0, 0, "-", "cluster"], [408, 0, 0, "-", "compose"], [468, 4, 1, "", "config_context"], [408, 0, 0, "-", "covariance"], [408, 0, 0, "-", "cross_decomposition"], [408, 0, 0, "-", "datasets"], [408, 0, 0, "-", "decomposition"], [408, 0, 0, "-", "discriminant_analysis"], [408, 0, 0, "-", "dummy"], [408, 0, 0, "-", "ensemble"], [408, 0, 0, "-", "exceptions"], [408, 0, 0, "-", "experimental"], [408, 0, 0, "-", "feature_extraction"], [408, 0, 0, "-", "feature_selection"], [408, 0, 0, "-", "gaussian_process"], [626, 4, 1, "", "get_config"], [408, 0, 0, "-", "impute"], [408, 0, 0, "-", "inspection"], [408, 0, 0, "-", "isotonic"], [408, 0, 0, "-", "kernel_approximation"], [408, 0, 0, "-", "kernel_ridge"], [408, 0, 0, "-", "linear_model"], [408, 0, 0, "-", "manifold"], [408, 0, 0, "-", "metrics"], [408, 0, 0, "-", "mixture"], [408, 0, 0, "-", "model_selection"], [408, 0, 0, "-", "multiclass"], [408, 0, 0, "-", "multioutput"], [408, 0, 0, "-", "naive_bayes"], [408, 0, 0, "-", "neighbors"], [408, 0, 0, "-", "neural_network"], [408, 0, 0, "-", "pipeline"], [408, 0, 0, "-", "preprocessing"], [408, 0, 0, "-", "random_projection"], [408, 0, 0, "-", "semi_supervised"], [899, 4, 1, "", "set_config"], [900, 4, 1, "", "show_versions"], [408, 0, 0, "-", "svm"], [408, 0, 0, "-", "tree"], [408, 0, 0, "-", "utils"]], "sklearn.base": [[423, 1, 1, "", "BaseEstimator"], [424, 1, 1, "", "BiclusterMixin"], [425, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [426, 1, 1, "", "ClassifierMixin"], [427, 1, 1, "", "ClusterMixin"], [428, 1, 1, "", "DensityMixin"], [429, 1, 1, "", "MetaEstimatorMixin"], [430, 1, 1, "", "OneToOneFeatureMixin"], [431, 1, 1, "", "OutlierMixin"], [432, 1, 1, "", "RegressorMixin"], [433, 1, 1, "", "TransformerMixin"], [434, 4, 1, "", "clone"], [435, 4, 1, "", "is_classifier"], [436, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[423, 2, 1, "", "get_metadata_routing"], [423, 2, 1, "", "get_params"], [423, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[424, 3, 1, "", "biclusters_"], [424, 2, 1, "", "get_indices"], [424, 2, 1, "", "get_shape"], [424, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[425, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[426, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[427, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[428, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[430, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[431, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[432, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[433, 2, 1, "", "fit_transform"], [433, 2, 1, "", "set_output"]], "sklearn.calibration": [[437, 1, 1, "", "CalibratedClassifierCV"], [438, 1, 1, "", "CalibrationDisplay"], [439, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[437, 2, 1, "", "fit"], [437, 2, 1, "", "get_metadata_routing"], [437, 2, 1, "", "get_params"], [437, 2, 1, "", "predict"], [437, 2, 1, "", "predict_proba"], [437, 2, 1, "", "score"], [437, 2, 1, "", "set_fit_request"], [437, 2, 1, "", "set_params"], [437, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[438, 2, 1, "", "from_estimator"], [438, 2, 1, "", "from_predictions"], [438, 2, 1, "", "plot"]], "sklearn.cluster": [[440, 1, 1, "", "AffinityPropagation"], [441, 1, 1, "", "AgglomerativeClustering"], [442, 1, 1, "", "Birch"], [443, 1, 1, "", "BisectingKMeans"], [444, 1, 1, "", "DBSCAN"], [445, 1, 1, "", "FeatureAgglomeration"], [446, 1, 1, "", "HDBSCAN"], [447, 1, 1, "", "KMeans"], [448, 1, 1, "", "MeanShift"], [449, 1, 1, "", "MiniBatchKMeans"], [450, 1, 1, "", "OPTICS"], [451, 1, 1, "", "SpectralBiclustering"], [452, 1, 1, "", "SpectralClustering"], [453, 1, 1, "", "SpectralCoclustering"], [454, 4, 1, "", "affinity_propagation"], [455, 4, 1, "", "cluster_optics_dbscan"], [456, 4, 1, "", "cluster_optics_xi"], [457, 4, 1, "", "compute_optics_graph"], [420, 4, 1, "", "dbscan"], [458, 4, 1, "", "estimate_bandwidth"], [459, 4, 1, "", "k_means"], [460, 4, 1, "", "kmeans_plusplus"], [461, 4, 1, "", "mean_shift"], [462, 4, 1, "", "spectral_clustering"], [463, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[440, 2, 1, "", "fit"], [440, 2, 1, "", "fit_predict"], [440, 2, 1, "", "get_metadata_routing"], [440, 2, 1, "", "get_params"], [440, 2, 1, "", "predict"], [440, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[441, 2, 1, "", "fit"], [441, 2, 1, "", "fit_predict"], [441, 2, 1, "", "get_metadata_routing"], [441, 2, 1, "", "get_params"], [441, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[442, 2, 1, "", "fit"], [442, 2, 1, "", "fit_predict"], [442, 2, 1, "", "fit_transform"], [442, 2, 1, "", "get_feature_names_out"], [442, 2, 1, "", "get_metadata_routing"], [442, 2, 1, "", "get_params"], [442, 2, 1, "", "partial_fit"], [442, 2, 1, "", "predict"], [442, 2, 1, "", "set_output"], [442, 2, 1, "", "set_params"], [442, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[443, 2, 1, "", "fit"], [443, 2, 1, "", "fit_predict"], [443, 2, 1, "", "fit_transform"], [443, 2, 1, "", "get_feature_names_out"], [443, 2, 1, "", "get_metadata_routing"], [443, 2, 1, "", "get_params"], [443, 2, 1, "", "predict"], [443, 2, 1, "", "score"], [443, 2, 1, "", "set_fit_request"], [443, 2, 1, "", "set_output"], [443, 2, 1, "", "set_params"], [443, 2, 1, "", "set_predict_request"], [443, 2, 1, "", "set_score_request"], [443, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[444, 2, 1, "", "fit"], [444, 2, 1, "", "fit_predict"], [444, 2, 1, "", "get_metadata_routing"], [444, 2, 1, "", "get_params"], [444, 2, 1, "", "set_fit_request"], [444, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[445, 2, 1, "", "fit"], [445, 3, 1, "", "fit_predict"], [445, 2, 1, "", "fit_transform"], [445, 2, 1, "", "get_feature_names_out"], [445, 2, 1, "", "get_metadata_routing"], [445, 2, 1, "", "get_params"], [445, 2, 1, "", "inverse_transform"], [445, 2, 1, "", "set_output"], [445, 2, 1, "", "set_params"], [445, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[446, 2, 1, "", "dbscan_clustering"], [446, 2, 1, "", "fit"], [446, 2, 1, "", "fit_predict"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_predict"], [447, 2, 1, "", "fit_transform"], [447, 2, 1, "", "get_feature_names_out"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "predict"], [447, 2, 1, "", "score"], [447, 2, 1, "", "set_fit_request"], [447, 2, 1, "", "set_output"], [447, 2, 1, "", "set_params"], [447, 2, 1, "", "set_predict_request"], [447, 2, 1, "", "set_score_request"], [447, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[448, 2, 1, "", "fit"], [448, 2, 1, "", "fit_predict"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "predict"], [448, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[449, 2, 1, "", "fit"], [449, 2, 1, "", "fit_predict"], [449, 2, 1, "", "fit_transform"], [449, 2, 1, "", "get_feature_names_out"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "partial_fit"], [449, 2, 1, "", "predict"], [449, 2, 1, "", "score"], [449, 2, 1, "", "set_fit_request"], [449, 2, 1, "", "set_output"], [449, 2, 1, "", "set_params"], [449, 2, 1, "", "set_partial_fit_request"], [449, 2, 1, "", "set_predict_request"], [449, 2, 1, "", "set_score_request"], [449, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[450, 2, 1, "", "fit"], [450, 2, 1, "", "fit_predict"], [450, 2, 1, "", "get_metadata_routing"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[451, 3, 1, "", "biclusters_"], [451, 2, 1, "", "fit"], [451, 2, 1, "", "get_indices"], [451, 2, 1, "", "get_metadata_routing"], [451, 2, 1, "", "get_params"], [451, 2, 1, "", "get_shape"], [451, 2, 1, "", "get_submatrix"], [451, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[452, 2, 1, "", "fit"], [452, 2, 1, "", "fit_predict"], [452, 2, 1, "", "get_metadata_routing"], [452, 2, 1, "", "get_params"], [452, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[453, 3, 1, "", "biclusters_"], [453, 2, 1, "", "fit"], [453, 2, 1, "", "get_indices"], [453, 2, 1, "", "get_metadata_routing"], [453, 2, 1, "", "get_params"], [453, 2, 1, "", "get_shape"], [453, 2, 1, "", "get_submatrix"], [453, 2, 1, "", "set_params"]], "sklearn.compose": [[464, 1, 1, "", "ColumnTransformer"], [465, 1, 1, "", "TransformedTargetRegressor"], [466, 4, 1, "", "make_column_selector"], [467, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[464, 2, 1, "", "fit"], [464, 2, 1, "", "fit_transform"], [464, 2, 1, "", "get_feature_names_out"], [464, 2, 1, "", "get_metadata_routing"], [464, 2, 1, "", "get_params"], [464, 3, 1, "", "named_transformers_"], [464, 2, 1, "", "set_output"], [464, 2, 1, "", "set_params"], [464, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[465, 2, 1, "", "fit"], [465, 2, 1, "", "get_metadata_routing"], [465, 2, 1, "", "get_params"], [465, 3, 1, "", "n_features_in_"], [465, 2, 1, "", "predict"], [465, 2, 1, "", "score"], [465, 2, 1, "", "set_params"], [465, 2, 1, "", "set_score_request"]], "sklearn.covariance": [[469, 1, 1, "", "EllipticEnvelope"], [470, 1, 1, "", "EmpiricalCovariance"], [471, 1, 1, "", "GraphicalLasso"], [472, 1, 1, "", "GraphicalLassoCV"], [473, 1, 1, "", "LedoitWolf"], [474, 1, 1, "", "MinCovDet"], [475, 1, 1, "", "OAS"], [476, 1, 1, "", "ShrunkCovariance"], [477, 4, 1, "", "empirical_covariance"], [478, 4, 1, "", "graphical_lasso"], [479, 4, 1, "", "ledoit_wolf"], [480, 4, 1, "", "ledoit_wolf_shrinkage"], [422, 4, 1, "", "oas"], [481, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[469, 2, 1, "", "correct_covariance"], [469, 2, 1, "", "decision_function"], [469, 2, 1, "", "error_norm"], [469, 2, 1, "", "fit"], [469, 2, 1, "", "fit_predict"], [469, 2, 1, "", "get_metadata_routing"], [469, 2, 1, "", "get_params"], [469, 2, 1, "", "get_precision"], [469, 2, 1, "", "mahalanobis"], [469, 2, 1, "", "predict"], [469, 2, 1, "", "reweight_covariance"], [469, 2, 1, "", "score"], [469, 2, 1, "", "score_samples"], [469, 2, 1, "", "set_params"], [469, 2, 1, "", "set_score_request"]], "sklearn.covariance.EmpiricalCovariance": [[470, 2, 1, "", "error_norm"], [470, 2, 1, "", "fit"], [470, 2, 1, "", "get_metadata_routing"], [470, 2, 1, "", "get_params"], [470, 2, 1, "", "get_precision"], [470, 2, 1, "", "mahalanobis"], [470, 2, 1, "", "score"], [470, 2, 1, "", "set_params"], [470, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLasso": [[471, 2, 1, "", "error_norm"], [471, 2, 1, "", "fit"], [471, 2, 1, "", "get_metadata_routing"], [471, 2, 1, "", "get_params"], [471, 2, 1, "", "get_precision"], [471, 2, 1, "", "mahalanobis"], [471, 2, 1, "", "score"], [471, 2, 1, "", "set_params"], [471, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLassoCV": [[472, 2, 1, "", "error_norm"], [472, 2, 1, "", "fit"], [472, 2, 1, "", "get_metadata_routing"], [472, 2, 1, "", "get_params"], [472, 2, 1, "", "get_precision"], [472, 2, 1, "", "mahalanobis"], [472, 2, 1, "", "score"], [472, 2, 1, "", "set_params"], [472, 2, 1, "", "set_score_request"]], "sklearn.covariance.LedoitWolf": [[473, 2, 1, "", "error_norm"], [473, 2, 1, "", "fit"], [473, 2, 1, "", "get_metadata_routing"], [473, 2, 1, "", "get_params"], [473, 2, 1, "", "get_precision"], [473, 2, 1, "", "mahalanobis"], [473, 2, 1, "", "score"], [473, 2, 1, "", "set_params"], [473, 2, 1, "", "set_score_request"]], "sklearn.covariance.MinCovDet": [[474, 2, 1, "", "correct_covariance"], [474, 2, 1, "", "error_norm"], [474, 2, 1, "", "fit"], [474, 2, 1, "", "get_metadata_routing"], [474, 2, 1, "", "get_params"], [474, 2, 1, "", "get_precision"], [474, 2, 1, "", "mahalanobis"], [474, 2, 1, "", "reweight_covariance"], [474, 2, 1, "", "score"], [474, 2, 1, "", "set_params"], [474, 2, 1, "", "set_score_request"]], "sklearn.covariance.OAS": [[475, 2, 1, "", "error_norm"], [475, 2, 1, "", "fit"], [475, 2, 1, "", "get_metadata_routing"], [475, 2, 1, "", "get_params"], [475, 2, 1, "", "get_precision"], [475, 2, 1, "", "mahalanobis"], [475, 2, 1, "", "score"], [475, 2, 1, "", "set_params"], [475, 2, 1, "", "set_score_request"]], "sklearn.covariance.ShrunkCovariance": [[476, 2, 1, "", "error_norm"], [476, 2, 1, "", "fit"], [476, 2, 1, "", "get_metadata_routing"], [476, 2, 1, "", "get_params"], [476, 2, 1, "", "get_precision"], [476, 2, 1, "", "mahalanobis"], [476, 2, 1, "", "score"], [476, 2, 1, "", "set_params"], [476, 2, 1, "", "set_score_request"]], "sklearn.cross_decomposition": [[482, 1, 1, "", "CCA"], [483, 1, 1, "", "PLSCanonical"], [484, 1, 1, "", "PLSRegression"], [485, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[482, 2, 1, "", "fit"], [482, 2, 1, "", "fit_transform"], [482, 2, 1, "", "get_feature_names_out"], [482, 2, 1, "", "get_metadata_routing"], [482, 2, 1, "", "get_params"], [482, 2, 1, "", "inverse_transform"], [482, 2, 1, "", "predict"], [482, 2, 1, "", "score"], [482, 2, 1, "", "set_output"], [482, 2, 1, "", "set_params"], [482, 2, 1, "", "set_predict_request"], [482, 2, 1, "", "set_score_request"], [482, 2, 1, "", "set_transform_request"], [482, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[483, 2, 1, "", "fit"], [483, 2, 1, "", "fit_transform"], [483, 2, 1, "", "get_feature_names_out"], [483, 2, 1, "", "get_metadata_routing"], [483, 2, 1, "", "get_params"], [483, 2, 1, "", "inverse_transform"], [483, 2, 1, "", "predict"], [483, 2, 1, "", "score"], [483, 2, 1, "", "set_output"], [483, 2, 1, "", "set_params"], [483, 2, 1, "", "set_predict_request"], [483, 2, 1, "", "set_score_request"], [483, 2, 1, "", "set_transform_request"], [483, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[484, 2, 1, "", "fit"], [484, 2, 1, "", "fit_transform"], [484, 2, 1, "", "get_feature_names_out"], [484, 2, 1, "", "get_metadata_routing"], [484, 2, 1, "", "get_params"], [484, 2, 1, "", "inverse_transform"], [484, 2, 1, "", "predict"], [484, 2, 1, "", "score"], [484, 2, 1, "", "set_output"], [484, 2, 1, "", "set_params"], [484, 2, 1, "", "set_predict_request"], [484, 2, 1, "", "set_score_request"], [484, 2, 1, "", "set_transform_request"], [484, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[485, 2, 1, "", "fit"], [485, 2, 1, "", "fit_transform"], [485, 2, 1, "", "get_feature_names_out"], [485, 2, 1, "", "get_metadata_routing"], [485, 2, 1, "", "get_params"], [485, 2, 1, "", "set_output"], [485, 2, 1, "", "set_params"], [485, 2, 1, "", "transform"]], "sklearn.datasets": [[486, 4, 1, "", "clear_data_home"], [487, 4, 1, "", "dump_svmlight_file"], [488, 4, 1, "", "fetch_20newsgroups"], [489, 4, 1, "", "fetch_20newsgroups_vectorized"], [490, 4, 1, "", "fetch_california_housing"], [491, 4, 1, "", "fetch_covtype"], [492, 4, 1, "", "fetch_kddcup99"], [493, 4, 1, "", "fetch_lfw_pairs"], [494, 4, 1, "", "fetch_lfw_people"], [495, 4, 1, "", "fetch_olivetti_faces"], [496, 4, 1, "", "fetch_openml"], [497, 4, 1, "", "fetch_rcv1"], [498, 4, 1, "", "fetch_species_distributions"], [499, 4, 1, "", "get_data_home"], [500, 4, 1, "", "load_breast_cancer"], [501, 4, 1, "", "load_diabetes"], [502, 4, 1, "", "load_digits"], [503, 4, 1, "", "load_files"], [504, 4, 1, "", "load_iris"], [505, 4, 1, "", "load_linnerud"], [506, 4, 1, "", "load_sample_image"], [507, 4, 1, "", "load_sample_images"], [508, 4, 1, "", "load_svmlight_file"], [509, 4, 1, "", "load_svmlight_files"], [510, 4, 1, "", "load_wine"], [511, 4, 1, "", "make_biclusters"], [512, 4, 1, "", "make_blobs"], [513, 4, 1, "", "make_checkerboard"], [514, 4, 1, "", "make_circles"], [515, 4, 1, "", "make_classification"], [516, 4, 1, "", "make_friedman1"], [517, 4, 1, "", "make_friedman2"], [518, 4, 1, "", "make_friedman3"], [519, 4, 1, "", "make_gaussian_quantiles"], [520, 4, 1, "", "make_hastie_10_2"], [521, 4, 1, "", "make_low_rank_matrix"], [522, 4, 1, "", "make_moons"], [523, 4, 1, "", "make_multilabel_classification"], [524, 4, 1, "", "make_regression"], [525, 4, 1, "", "make_s_curve"], [526, 4, 1, "", "make_sparse_coded_signal"], [527, 4, 1, "", "make_sparse_spd_matrix"], [528, 4, 1, "", "make_sparse_uncorrelated"], [529, 4, 1, "", "make_spd_matrix"], [530, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[531, 1, 1, "", "DictionaryLearning"], [532, 1, 1, "", "FactorAnalysis"], [533, 1, 1, "", "FastICA"], [534, 1, 1, "", "IncrementalPCA"], [535, 1, 1, "", "KernelPCA"], [536, 1, 1, "", "LatentDirichletAllocation"], [537, 1, 1, "", "MiniBatchDictionaryLearning"], [538, 1, 1, "", "MiniBatchNMF"], [539, 1, 1, "", "MiniBatchSparsePCA"], [540, 1, 1, "", "NMF"], [541, 1, 1, "", "PCA"], [542, 1, 1, "", "SparseCoder"], [543, 1, 1, "", "SparsePCA"], [544, 1, 1, "", "TruncatedSVD"], [545, 4, 1, "", "dict_learning"], [546, 4, 1, "", "dict_learning_online"], [421, 4, 1, "", "fastica"], [547, 4, 1, "", "non_negative_factorization"], [548, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[531, 2, 1, "", "fit"], [531, 2, 1, "", "fit_transform"], [531, 2, 1, "", "get_feature_names_out"], [531, 2, 1, "", "get_metadata_routing"], [531, 2, 1, "", "get_params"], [531, 2, 1, "", "set_output"], [531, 2, 1, "", "set_params"], [531, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[532, 2, 1, "", "fit"], [532, 2, 1, "", "fit_transform"], [532, 2, 1, "", "get_covariance"], [532, 2, 1, "", "get_feature_names_out"], [532, 2, 1, "", "get_metadata_routing"], [532, 2, 1, "", "get_params"], [532, 2, 1, "", "get_precision"], [532, 2, 1, "", "score"], [532, 2, 1, "", "score_samples"], [532, 2, 1, "", "set_output"], [532, 2, 1, "", "set_params"], [532, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[533, 2, 1, "", "fit"], [533, 2, 1, "", "fit_transform"], [533, 2, 1, "", "get_feature_names_out"], [533, 2, 1, "", "get_metadata_routing"], [533, 2, 1, "", "get_params"], [533, 2, 1, "", "inverse_transform"], [533, 2, 1, "", "set_inverse_transform_request"], [533, 2, 1, "", "set_output"], [533, 2, 1, "", "set_params"], [533, 2, 1, "", "set_transform_request"], [533, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[534, 2, 1, "", "fit"], [534, 2, 1, "", "fit_transform"], [534, 2, 1, "", "get_covariance"], [534, 2, 1, "", "get_feature_names_out"], [534, 2, 1, "", "get_metadata_routing"], [534, 2, 1, "", "get_params"], [534, 2, 1, "", "get_precision"], [534, 2, 1, "", "inverse_transform"], [534, 2, 1, "", "partial_fit"], [534, 2, 1, "", "set_output"], [534, 2, 1, "", "set_params"], [534, 2, 1, "", "set_partial_fit_request"], [534, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[535, 2, 1, "", "fit"], [535, 2, 1, "", "fit_transform"], [535, 2, 1, "", "get_feature_names_out"], [535, 2, 1, "", "get_metadata_routing"], [535, 2, 1, "", "get_params"], [535, 2, 1, "", "inverse_transform"], [535, 2, 1, "", "set_output"], [535, 2, 1, "", "set_params"], [535, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[536, 2, 1, "", "fit"], [536, 2, 1, "", "fit_transform"], [536, 2, 1, "", "get_feature_names_out"], [536, 2, 1, "", "get_metadata_routing"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "partial_fit"], [536, 2, 1, "", "perplexity"], [536, 2, 1, "", "score"], [536, 2, 1, "", "set_output"], [536, 2, 1, "", "set_params"], [536, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[537, 2, 1, "", "fit"], [537, 2, 1, "", "fit_transform"], [537, 2, 1, "", "get_feature_names_out"], [537, 2, 1, "", "get_metadata_routing"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "partial_fit"], [537, 2, 1, "", "set_output"], [537, 2, 1, "", "set_params"], [537, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[538, 2, 1, "", "fit"], [538, 2, 1, "", "fit_transform"], [538, 2, 1, "", "get_feature_names_out"], [538, 2, 1, "", "get_metadata_routing"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "inverse_transform"], [538, 2, 1, "", "partial_fit"], [538, 2, 1, "", "set_output"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "set_partial_fit_request"], [538, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[539, 2, 1, "", "fit"], [539, 2, 1, "", "fit_transform"], [539, 2, 1, "", "get_feature_names_out"], [539, 2, 1, "", "get_metadata_routing"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "inverse_transform"], [539, 2, 1, "", "set_output"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_transform"], [540, 2, 1, "", "get_feature_names_out"], [540, 2, 1, "", "get_metadata_routing"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "inverse_transform"], [540, 2, 1, "", "set_output"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[541, 2, 1, "", "fit"], [541, 2, 1, "", "fit_transform"], [541, 2, 1, "", "get_covariance"], [541, 2, 1, "", "get_feature_names_out"], [541, 2, 1, "", "get_metadata_routing"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "get_precision"], [541, 2, 1, "", "inverse_transform"], [541, 2, 1, "", "score"], [541, 2, 1, "", "score_samples"], [541, 2, 1, "", "set_output"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[542, 2, 1, "", "fit"], [542, 2, 1, "", "fit_transform"], [542, 2, 1, "", "get_feature_names_out"], [542, 2, 1, "", "get_metadata_routing"], [542, 2, 1, "", "get_params"], [542, 3, 1, "", "n_components_"], [542, 3, 1, "", "n_features_in_"], [542, 2, 1, "", "set_output"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[543, 2, 1, "", "fit"], [543, 2, 1, "", "fit_transform"], [543, 2, 1, "", "get_feature_names_out"], [543, 2, 1, "", "get_metadata_routing"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "inverse_transform"], [543, 2, 1, "", "set_output"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[544, 2, 1, "", "fit"], [544, 2, 1, "", "fit_transform"], [544, 2, 1, "", "get_feature_names_out"], [544, 2, 1, "", "get_metadata_routing"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "inverse_transform"], [544, 2, 1, "", "set_output"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[549, 1, 1, "", "LinearDiscriminantAnalysis"], [550, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[549, 2, 1, "", "decision_function"], [549, 2, 1, "", "fit"], [549, 2, 1, "", "fit_transform"], [549, 2, 1, "", "get_feature_names_out"], [549, 2, 1, "", "get_metadata_routing"], [549, 2, 1, "", "get_params"], [549, 2, 1, "", "predict"], [549, 2, 1, "", "predict_log_proba"], [549, 2, 1, "", "predict_proba"], [549, 2, 1, "", "score"], [549, 2, 1, "", "set_output"], [549, 2, 1, "", "set_params"], [549, 2, 1, "", "set_score_request"], [549, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[550, 2, 1, "", "decision_function"], [550, 2, 1, "", "fit"], [550, 2, 1, "", "get_metadata_routing"], [550, 2, 1, "", "get_params"], [550, 2, 1, "", "predict"], [550, 2, 1, "", "predict_log_proba"], [550, 2, 1, "", "predict_proba"], [550, 2, 1, "", "score"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[551, 1, 1, "", "DummyClassifier"], [552, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[551, 2, 1, "", "fit"], [551, 2, 1, "", "get_metadata_routing"], [551, 2, 1, "", "get_params"], [551, 2, 1, "", "predict"], [551, 2, 1, "", "predict_log_proba"], [551, 2, 1, "", "predict_proba"], [551, 2, 1, "", "score"], [551, 2, 1, "", "set_fit_request"], [551, 2, 1, "", "set_params"], [551, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[552, 2, 1, "", "fit"], [552, 2, 1, "", "get_metadata_routing"], [552, 2, 1, "", "get_params"], [552, 2, 1, "", "predict"], [552, 2, 1, "", "score"], [552, 2, 1, "", "set_fit_request"], [552, 2, 1, "", "set_params"], [552, 2, 1, "", "set_predict_request"], [552, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[553, 1, 1, "", "AdaBoostClassifier"], [554, 1, 1, "", "AdaBoostRegressor"], [555, 1, 1, "", "BaggingClassifier"], [556, 1, 1, "", "BaggingRegressor"], [557, 1, 1, "", "ExtraTreesClassifier"], [558, 1, 1, "", "ExtraTreesRegressor"], [559, 1, 1, "", "GradientBoostingClassifier"], [560, 1, 1, "", "GradientBoostingRegressor"], [561, 1, 1, "", "HistGradientBoostingClassifier"], [562, 1, 1, "", "HistGradientBoostingRegressor"], [563, 1, 1, "", "IsolationForest"], [564, 1, 1, "", "RandomForestClassifier"], [565, 1, 1, "", "RandomForestRegressor"], [566, 1, 1, "", "RandomTreesEmbedding"], [567, 1, 1, "", "StackingClassifier"], [568, 1, 1, "", "StackingRegressor"], [569, 1, 1, "", "VotingClassifier"], [570, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[553, 2, 1, "", "decision_function"], [553, 3, 1, "", "feature_importances_"], [553, 2, 1, "", "fit"], [553, 2, 1, "", "get_metadata_routing"], [553, 2, 1, "", "get_params"], [553, 2, 1, "", "predict"], [553, 2, 1, "", "predict_log_proba"], [553, 2, 1, "", "predict_proba"], [553, 2, 1, "", "score"], [553, 2, 1, "", "set_fit_request"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "set_score_request"], [553, 2, 1, "", "staged_decision_function"], [553, 2, 1, "", "staged_predict"], [553, 2, 1, "", "staged_predict_proba"], [553, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[554, 3, 1, "", "feature_importances_"], [554, 2, 1, "", "fit"], [554, 2, 1, "", "get_metadata_routing"], [554, 2, 1, "", "get_params"], [554, 2, 1, "", "predict"], [554, 2, 1, "", "score"], [554, 2, 1, "", "set_fit_request"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "set_score_request"], [554, 2, 1, "", "staged_predict"], [554, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[555, 2, 1, "", "decision_function"], [555, 3, 1, "", "estimators_samples_"], [555, 2, 1, "", "fit"], [555, 2, 1, "", "get_metadata_routing"], [555, 2, 1, "", "get_params"], [555, 2, 1, "", "predict"], [555, 2, 1, "", "predict_log_proba"], [555, 2, 1, "", "predict_proba"], [555, 2, 1, "", "score"], [555, 2, 1, "", "set_fit_request"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[556, 3, 1, "", "estimators_samples_"], [556, 2, 1, "", "fit"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 2, 1, "", "predict"], [556, 2, 1, "", "score"], [556, 2, 1, "", "set_fit_request"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[557, 2, 1, "", "apply"], [557, 2, 1, "", "decision_path"], [557, 3, 1, "", "estimators_samples_"], [557, 3, 1, "", "feature_importances_"], [557, 2, 1, "", "fit"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "predict"], [557, 2, 1, "", "predict_log_proba"], [557, 2, 1, "", "predict_proba"], [557, 2, 1, "", "score"], [557, 2, 1, "", "set_fit_request"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[558, 2, 1, "", "apply"], [558, 2, 1, "", "decision_path"], [558, 3, 1, "", "estimators_samples_"], [558, 3, 1, "", "feature_importances_"], [558, 2, 1, "", "fit"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_fit_request"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[559, 2, 1, "", "apply"], [559, 2, 1, "", "decision_function"], [559, 3, 1, "", "feature_importances_"], [559, 2, 1, "", "fit"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "predict_log_proba"], [559, 2, 1, "", "predict_proba"], [559, 2, 1, "", "score"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "set_score_request"], [559, 2, 1, "", "staged_decision_function"], [559, 2, 1, "", "staged_predict"], [559, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[560, 2, 1, "", "apply"], [560, 3, 1, "", "feature_importances_"], [560, 2, 1, "", "fit"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 2, 1, "", "predict"], [560, 2, 1, "", "score"], [560, 2, 1, "", "set_fit_request"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "set_score_request"], [560, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[561, 2, 1, "", "decision_function"], [561, 2, 1, "", "fit"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 3, 1, "", "n_iter_"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "predict_proba"], [561, 2, 1, "", "score"], [561, 2, 1, "", "set_fit_request"], [561, 2, 1, "", "set_params"], [561, 2, 1, "", "set_score_request"], [561, 2, 1, "", "staged_decision_function"], [561, 2, 1, "", "staged_predict"], [561, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[562, 2, 1, "", "fit"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 3, 1, "", "n_iter_"], [562, 2, 1, "", "predict"], [562, 2, 1, "", "score"], [562, 2, 1, "", "set_fit_request"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "set_score_request"], [562, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[563, 2, 1, "", "decision_function"], [563, 3, 1, "", "estimators_samples_"], [563, 2, 1, "", "fit"], [563, 2, 1, "", "fit_predict"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 2, 1, "", "predict"], [563, 2, 1, "", "score_samples"], [563, 2, 1, "", "set_fit_request"], [563, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[564, 2, 1, "", "apply"], [564, 2, 1, "", "decision_path"], [564, 3, 1, "", "estimators_samples_"], [564, 3, 1, "", "feature_importances_"], [564, 2, 1, "", "fit"], [564, 2, 1, "", "get_metadata_routing"], [564, 2, 1, "", "get_params"], [564, 2, 1, "", "predict"], [564, 2, 1, "", "predict_log_proba"], [564, 2, 1, "", "predict_proba"], [564, 2, 1, "", "score"], [564, 2, 1, "", "set_fit_request"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[565, 2, 1, "", "apply"], [565, 2, 1, "", "decision_path"], [565, 3, 1, "", "estimators_samples_"], [565, 3, 1, "", "feature_importances_"], [565, 2, 1, "", "fit"], [565, 2, 1, "", "get_metadata_routing"], [565, 2, 1, "", "get_params"], [565, 2, 1, "", "predict"], [565, 2, 1, "", "score"], [565, 2, 1, "", "set_fit_request"], [565, 2, 1, "", "set_params"], [565, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[566, 2, 1, "", "apply"], [566, 2, 1, "", "decision_path"], [566, 3, 1, "", "estimators_samples_"], [566, 3, 1, "", "feature_importances_"], [566, 2, 1, "", "fit"], [566, 2, 1, "", "fit_transform"], [566, 2, 1, "", "get_feature_names_out"], [566, 2, 1, "", "get_metadata_routing"], [566, 2, 1, "", "get_params"], [566, 2, 1, "", "set_fit_request"], [566, 2, 1, "", "set_output"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[567, 2, 1, "", "decision_function"], [567, 2, 1, "", "fit"], [567, 2, 1, "", "fit_transform"], [567, 2, 1, "", "get_feature_names_out"], [567, 2, 1, "", "get_metadata_routing"], [567, 2, 1, "", "get_params"], [567, 3, 1, "", "n_features_in_"], [567, 3, 1, "", "named_estimators"], [567, 2, 1, "", "predict"], [567, 2, 1, "", "predict_proba"], [567, 2, 1, "", "score"], [567, 2, 1, "", "set_fit_request"], [567, 2, 1, "", "set_output"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "set_score_request"], [567, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[568, 2, 1, "", "fit"], [568, 2, 1, "", "fit_transform"], [568, 2, 1, "", "get_feature_names_out"], [568, 2, 1, "", "get_metadata_routing"], [568, 2, 1, "", "get_params"], [568, 3, 1, "", "n_features_in_"], [568, 3, 1, "", "named_estimators"], [568, 2, 1, "", "predict"], [568, 2, 1, "", "score"], [568, 2, 1, "", "set_fit_request"], [568, 2, 1, "", "set_output"], [568, 2, 1, "", "set_params"], [568, 2, 1, "", "set_score_request"], [568, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[569, 2, 1, "", "fit"], [569, 2, 1, "", "fit_transform"], [569, 2, 1, "", "get_feature_names_out"], [569, 2, 1, "", "get_metadata_routing"], [569, 2, 1, "", "get_params"], [569, 3, 1, "", "n_features_in_"], [569, 3, 1, "", "named_estimators"], [569, 2, 1, "", "predict"], [569, 2, 1, "", "predict_proba"], [569, 2, 1, "", "score"], [569, 2, 1, "", "set_fit_request"], [569, 2, 1, "", "set_output"], [569, 2, 1, "", "set_params"], [569, 2, 1, "", "set_score_request"], [569, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[570, 2, 1, "", "fit"], [570, 2, 1, "", "fit_transform"], [570, 2, 1, "", "get_feature_names_out"], [570, 2, 1, "", "get_metadata_routing"], [570, 2, 1, "", "get_params"], [570, 3, 1, "", "n_features_in_"], [570, 3, 1, "", "named_estimators"], [570, 2, 1, "", "predict"], [570, 2, 1, "", "score"], [570, 2, 1, "", "set_fit_request"], [570, 2, 1, "", "set_output"], [570, 2, 1, "", "set_params"], [570, 2, 1, "", "set_score_request"], [570, 2, 1, "", "transform"]], "sklearn.exceptions": [[571, 1, 1, "", "ConvergenceWarning"], [572, 1, 1, "", "DataConversionWarning"], [573, 1, 1, "", "DataDimensionalityWarning"], [574, 1, 1, "", "EfficiencyWarning"], [575, 1, 1, "", "FitFailedWarning"], [576, 1, 1, "", "InconsistentVersionWarning"], [577, 1, 1, "", "NotFittedError"], [578, 1, 1, "", "UndefinedMetricWarning"]], "sklearn.exceptions.ConvergenceWarning": [[571, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataConversionWarning": [[572, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataDimensionalityWarning": [[573, 2, 1, "", "with_traceback"]], "sklearn.exceptions.EfficiencyWarning": [[574, 2, 1, "", "with_traceback"]], "sklearn.exceptions.FitFailedWarning": [[575, 2, 1, "", "with_traceback"]], "sklearn.exceptions.InconsistentVersionWarning": [[576, 2, 1, "", "with_traceback"]], "sklearn.exceptions.NotFittedError": [[577, 2, 1, "", "with_traceback"]], "sklearn.exceptions.UndefinedMetricWarning": [[578, 2, 1, "", "with_traceback"]], "sklearn.experimental": [[579, 0, 0, "-", "enable_halving_search_cv"], [580, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[581, 1, 1, "", "DictVectorizer"], [582, 1, 1, "", "FeatureHasher"], [408, 0, 0, "-", "image"], [408, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[581, 2, 1, "", "fit"], [581, 2, 1, "", "fit_transform"], [581, 2, 1, "", "get_feature_names_out"], [581, 2, 1, "", "get_metadata_routing"], [581, 2, 1, "", "get_params"], [581, 2, 1, "", "inverse_transform"], [581, 2, 1, "", "restrict"], [581, 2, 1, "", "set_inverse_transform_request"], [581, 2, 1, "", "set_output"], [581, 2, 1, "", "set_params"], [581, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[582, 2, 1, "", "fit"], [582, 2, 1, "", "fit_transform"], [582, 2, 1, "", "get_metadata_routing"], [582, 2, 1, "", "get_params"], [582, 2, 1, "", "set_output"], [582, 2, 1, "", "set_params"], [582, 2, 1, "", "set_transform_request"], [582, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[583, 1, 1, "", "PatchExtractor"], [584, 4, 1, "", "extract_patches_2d"], [585, 4, 1, "", "grid_to_graph"], [586, 4, 1, "", "img_to_graph"], [587, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[583, 2, 1, "", "fit"], [583, 2, 1, "", "fit_transform"], [583, 2, 1, "", "get_metadata_routing"], [583, 2, 1, "", "get_params"], [583, 2, 1, "", "set_output"], [583, 2, 1, "", "set_params"], [583, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[588, 1, 1, "", "CountVectorizer"], [589, 1, 1, "", "HashingVectorizer"], [590, 1, 1, "", "TfidfTransformer"], [591, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[588, 2, 1, "", "build_analyzer"], [588, 2, 1, "", "build_preprocessor"], [588, 2, 1, "", "build_tokenizer"], [588, 2, 1, "", "decode"], [588, 2, 1, "", "fit"], [588, 2, 1, "", "fit_transform"], [588, 2, 1, "", "get_feature_names_out"], [588, 2, 1, "", "get_metadata_routing"], [588, 2, 1, "", "get_params"], [588, 2, 1, "", "get_stop_words"], [588, 2, 1, "", "inverse_transform"], [588, 2, 1, "", "set_fit_request"], [588, 2, 1, "", "set_params"], [588, 2, 1, "", "set_transform_request"], [588, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[589, 2, 1, "", "build_analyzer"], [589, 2, 1, "", "build_preprocessor"], [589, 2, 1, "", "build_tokenizer"], [589, 2, 1, "", "decode"], [589, 2, 1, "", "fit"], [589, 2, 1, "", "fit_transform"], [589, 2, 1, "", "get_metadata_routing"], [589, 2, 1, "", "get_params"], [589, 2, 1, "", "get_stop_words"], [589, 2, 1, "", "partial_fit"], [589, 2, 1, "", "set_output"], [589, 2, 1, "", "set_params"], [589, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[590, 2, 1, "", "fit"], [590, 2, 1, "", "fit_transform"], [590, 2, 1, "", "get_feature_names_out"], [590, 2, 1, "", "get_metadata_routing"], [590, 2, 1, "", "get_params"], [590, 3, 1, "", "idf_"], [590, 2, 1, "", "set_output"], [590, 2, 1, "", "set_params"], [590, 2, 1, "", "set_transform_request"], [590, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[591, 2, 1, "", "build_analyzer"], [591, 2, 1, "", "build_preprocessor"], [591, 2, 1, "", "build_tokenizer"], [591, 2, 1, "", "decode"], [591, 2, 1, "", "fit"], [591, 2, 1, "", "fit_transform"], [591, 2, 1, "", "get_feature_names_out"], [591, 2, 1, "", "get_metadata_routing"], [591, 2, 1, "", "get_params"], [591, 2, 1, "", "get_stop_words"], [591, 3, 1, "", "idf_"], [591, 2, 1, "", "inverse_transform"], [591, 2, 1, "", "set_fit_request"], [591, 2, 1, "", "set_params"], [591, 2, 1, "", "set_transform_request"], [591, 2, 1, "", "transform"]], "sklearn.feature_selection": [[592, 1, 1, "", "GenericUnivariateSelect"], [593, 1, 1, "", "RFE"], [594, 1, 1, "", "RFECV"], [595, 1, 1, "", "SelectFdr"], [596, 1, 1, "", "SelectFpr"], [597, 1, 1, "", "SelectFromModel"], [598, 1, 1, "", "SelectFwe"], [599, 1, 1, "", "SelectKBest"], [600, 1, 1, "", "SelectPercentile"], [601, 1, 1, "", "SelectorMixin"], [602, 1, 1, "", "SequentialFeatureSelector"], [603, 1, 1, "", "VarianceThreshold"], [604, 4, 1, "", "chi2"], [605, 4, 1, "", "f_classif"], [606, 4, 1, "", "f_regression"], [607, 4, 1, "", "mutual_info_classif"], [608, 4, 1, "", "mutual_info_regression"], [609, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[592, 2, 1, "", "fit"], [592, 2, 1, "", "fit_transform"], [592, 2, 1, "", "get_feature_names_out"], [592, 2, 1, "", "get_metadata_routing"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "get_support"], [592, 2, 1, "", "inverse_transform"], [592, 2, 1, "", "set_output"], [592, 2, 1, "", "set_params"], [592, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[593, 3, 1, "", "classes_"], [593, 2, 1, "", "decision_function"], [593, 2, 1, "", "fit"], [593, 2, 1, "", "fit_transform"], [593, 2, 1, "", "get_feature_names_out"], [593, 2, 1, "", "get_metadata_routing"], [593, 2, 1, "", "get_params"], [593, 2, 1, "", "get_support"], [593, 2, 1, "", "inverse_transform"], [593, 2, 1, "", "predict"], [593, 2, 1, "", "predict_log_proba"], [593, 2, 1, "", "predict_proba"], [593, 2, 1, "", "score"], [593, 2, 1, "", "set_output"], [593, 2, 1, "", "set_params"], [593, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[594, 3, 1, "", "classes_"], [594, 2, 1, "", "decision_function"], [594, 2, 1, "", "fit"], [594, 2, 1, "", "fit_transform"], [594, 2, 1, "", "get_feature_names_out"], [594, 2, 1, "", "get_metadata_routing"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "get_support"], [594, 2, 1, "", "inverse_transform"], [594, 2, 1, "", "predict"], [594, 2, 1, "", "predict_log_proba"], [594, 2, 1, "", "predict_proba"], [594, 2, 1, "", "score"], [594, 2, 1, "", "set_fit_request"], [594, 2, 1, "", "set_output"], [594, 2, 1, "", "set_params"], [594, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[595, 2, 1, "", "fit"], [595, 2, 1, "", "fit_transform"], [595, 2, 1, "", "get_feature_names_out"], [595, 2, 1, "", "get_metadata_routing"], [595, 2, 1, "", "get_params"], [595, 2, 1, "", "get_support"], [595, 2, 1, "", "inverse_transform"], [595, 2, 1, "", "set_output"], [595, 2, 1, "", "set_params"], [595, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[596, 2, 1, "", "fit"], [596, 2, 1, "", "fit_transform"], [596, 2, 1, "", "get_feature_names_out"], [596, 2, 1, "", "get_metadata_routing"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "get_support"], [596, 2, 1, "", "inverse_transform"], [596, 2, 1, "", "set_output"], [596, 2, 1, "", "set_params"], [596, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[597, 2, 1, "", "fit"], [597, 2, 1, "", "fit_transform"], [597, 2, 1, "", "get_feature_names_out"], [597, 2, 1, "", "get_metadata_routing"], [597, 2, 1, "", "get_params"], [597, 2, 1, "", "get_support"], [597, 2, 1, "", "inverse_transform"], [597, 3, 1, "", "n_features_in_"], [597, 2, 1, "", "partial_fit"], [597, 2, 1, "", "set_output"], [597, 2, 1, "", "set_params"], [597, 3, 1, "", "threshold_"], [597, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[598, 2, 1, "", "fit"], [598, 2, 1, "", "fit_transform"], [598, 2, 1, "", "get_feature_names_out"], [598, 2, 1, "", "get_metadata_routing"], [598, 2, 1, "", "get_params"], [598, 2, 1, "", "get_support"], [598, 2, 1, "", "inverse_transform"], [598, 2, 1, "", "set_output"], [598, 2, 1, "", "set_params"], [598, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[599, 2, 1, "", "fit"], [599, 2, 1, "", "fit_transform"], [599, 2, 1, "", "get_feature_names_out"], [599, 2, 1, "", "get_metadata_routing"], [599, 2, 1, "", "get_params"], [599, 2, 1, "", "get_support"], [599, 2, 1, "", "inverse_transform"], [599, 2, 1, "", "set_output"], [599, 2, 1, "", "set_params"], [599, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[600, 2, 1, "", "fit"], [600, 2, 1, "", "fit_transform"], [600, 2, 1, "", "get_feature_names_out"], [600, 2, 1, "", "get_metadata_routing"], [600, 2, 1, "", "get_params"], [600, 2, 1, "", "get_support"], [600, 2, 1, "", "inverse_transform"], [600, 2, 1, "", "set_output"], [600, 2, 1, "", "set_params"], [600, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[601, 2, 1, "", "fit_transform"], [601, 2, 1, "", "get_feature_names_out"], [601, 2, 1, "", "get_support"], [601, 2, 1, "", "inverse_transform"], [601, 2, 1, "", "set_output"], [601, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[602, 2, 1, "", "fit"], [602, 2, 1, "", "fit_transform"], [602, 2, 1, "", "get_feature_names_out"], [602, 2, 1, "", "get_metadata_routing"], [602, 2, 1, "", "get_params"], [602, 2, 1, "", "get_support"], [602, 2, 1, "", "inverse_transform"], [602, 2, 1, "", "set_output"], [602, 2, 1, "", "set_params"], [602, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[603, 2, 1, "", "fit"], [603, 2, 1, "", "fit_transform"], [603, 2, 1, "", "get_feature_names_out"], [603, 2, 1, "", "get_metadata_routing"], [603, 2, 1, "", "get_params"], [603, 2, 1, "", "get_support"], [603, 2, 1, "", "inverse_transform"], [603, 2, 1, "", "set_output"], [603, 2, 1, "", "set_params"], [603, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[610, 1, 1, "", "GaussianProcessClassifier"], [611, 1, 1, "", "GaussianProcessRegressor"], [408, 0, 0, "-", "kernels"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[610, 2, 1, "", "fit"], [610, 2, 1, "", "get_metadata_routing"], [610, 2, 1, "", "get_params"], [610, 3, 1, "", "kernel_"], [610, 2, 1, "", "log_marginal_likelihood"], [610, 2, 1, "", "predict"], [610, 2, 1, "", "predict_proba"], [610, 2, 1, "", "score"], [610, 2, 1, "", "set_params"], [610, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[611, 2, 1, "", "fit"], [611, 2, 1, "", "get_metadata_routing"], [611, 2, 1, "", "get_params"], [611, 2, 1, "", "log_marginal_likelihood"], [611, 2, 1, "", "predict"], [611, 2, 1, "", "sample_y"], [611, 2, 1, "", "score"], [611, 2, 1, "", "set_params"], [611, 2, 1, "", "set_predict_request"], [611, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[612, 1, 1, "", "CompoundKernel"], [613, 1, 1, "", "ConstantKernel"], [614, 1, 1, "", "DotProduct"], [615, 1, 1, "", "ExpSineSquared"], [616, 1, 1, "", "Exponentiation"], [617, 1, 1, "", "Hyperparameter"], [618, 1, 1, "", "Kernel"], [619, 1, 1, "", "Matern"], [620, 1, 1, "", "PairwiseKernel"], [621, 1, 1, "", "Product"], [622, 1, 1, "", "RBF"], [623, 1, 1, "", "RationalQuadratic"], [624, 1, 1, "", "Sum"], [625, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[612, 2, 1, "", "__call__"], [612, 3, 1, "", "bounds"], [612, 2, 1, "", "clone_with_theta"], [612, 2, 1, "", "diag"], [612, 2, 1, "", "get_params"], [612, 3, 1, "", "hyperparameters"], [612, 2, 1, "", "is_stationary"], [612, 3, 1, "", "n_dims"], [612, 3, 1, "", "requires_vector_input"], [612, 2, 1, "", "set_params"], [612, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[613, 2, 1, "", "__call__"], [613, 3, 1, "", "bounds"], [613, 2, 1, "", "clone_with_theta"], [613, 2, 1, "", "diag"], [613, 2, 1, "", "get_params"], [613, 3, 1, "", "hyperparameters"], [613, 2, 1, "", "is_stationary"], [613, 3, 1, "", "n_dims"], [613, 3, 1, "", "requires_vector_input"], [613, 2, 1, "", "set_params"], [613, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[614, 2, 1, "", "__call__"], [614, 3, 1, "", "bounds"], [614, 2, 1, "", "clone_with_theta"], [614, 2, 1, "", "diag"], [614, 2, 1, "", "get_params"], [614, 3, 1, "", "hyperparameters"], [614, 2, 1, "", "is_stationary"], [614, 3, 1, "", "n_dims"], [614, 3, 1, "", "requires_vector_input"], [614, 2, 1, "", "set_params"], [614, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[615, 2, 1, "", "__call__"], [615, 3, 1, "", "bounds"], [615, 2, 1, "", "clone_with_theta"], [615, 2, 1, "", "diag"], [615, 2, 1, "", "get_params"], [615, 3, 1, "", "hyperparameter_length_scale"], [615, 3, 1, "", "hyperparameters"], [615, 2, 1, "", "is_stationary"], [615, 3, 1, "", "n_dims"], [615, 3, 1, "", "requires_vector_input"], [615, 2, 1, "", "set_params"], [615, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[616, 2, 1, "", "__call__"], [616, 3, 1, "", "bounds"], [616, 2, 1, "", "clone_with_theta"], [616, 2, 1, "", "diag"], [616, 2, 1, "", "get_params"], [616, 3, 1, "", "hyperparameters"], [616, 2, 1, "", "is_stationary"], [616, 3, 1, "", "n_dims"], [616, 3, 1, "", "requires_vector_input"], [616, 2, 1, "", "set_params"], [616, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[617, 2, 1, "", "__call__"], [617, 5, 1, "", "bounds"], [617, 2, 1, "", "count"], [617, 5, 1, "", "fixed"], [617, 2, 1, "", "index"], [617, 5, 1, "", "n_elements"], [617, 5, 1, "", "name"], [617, 5, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[618, 2, 1, "", "__call__"], [618, 3, 1, "", "bounds"], [618, 2, 1, "", "clone_with_theta"], [618, 2, 1, "", "diag"], [618, 2, 1, "", "get_params"], [618, 3, 1, "", "hyperparameters"], [618, 2, 1, "", "is_stationary"], [618, 3, 1, "", "n_dims"], [618, 3, 1, "", "requires_vector_input"], [618, 2, 1, "", "set_params"], [618, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[619, 2, 1, "", "__call__"], [619, 3, 1, "", "bounds"], [619, 2, 1, "", "clone_with_theta"], [619, 2, 1, "", "diag"], [619, 2, 1, "", "get_params"], [619, 3, 1, "", "hyperparameters"], [619, 2, 1, "", "is_stationary"], [619, 3, 1, "", "n_dims"], [619, 3, 1, "", "requires_vector_input"], [619, 2, 1, "", "set_params"], [619, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[620, 2, 1, "", "__call__"], [620, 3, 1, "", "bounds"], [620, 2, 1, "", "clone_with_theta"], [620, 2, 1, "", "diag"], [620, 2, 1, "", "get_params"], [620, 3, 1, "", "hyperparameters"], [620, 2, 1, "", "is_stationary"], [620, 3, 1, "", "n_dims"], [620, 3, 1, "", "requires_vector_input"], [620, 2, 1, "", "set_params"], [620, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[621, 2, 1, "", "__call__"], [621, 3, 1, "", "bounds"], [621, 2, 1, "", "clone_with_theta"], [621, 2, 1, "", "diag"], [621, 2, 1, "", "get_params"], [621, 3, 1, "", "hyperparameters"], [621, 2, 1, "", "is_stationary"], [621, 3, 1, "", "n_dims"], [621, 3, 1, "", "requires_vector_input"], [621, 2, 1, "", "set_params"], [621, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[622, 2, 1, "", "__call__"], [622, 3, 1, "", "bounds"], [622, 2, 1, "", "clone_with_theta"], [622, 2, 1, "", "diag"], [622, 2, 1, "", "get_params"], [622, 3, 1, "", "hyperparameters"], [622, 2, 1, "", "is_stationary"], [622, 3, 1, "", "n_dims"], [622, 3, 1, "", "requires_vector_input"], [622, 2, 1, "", "set_params"], [622, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[623, 2, 1, "", "__call__"], [623, 3, 1, "", "bounds"], [623, 2, 1, "", "clone_with_theta"], [623, 2, 1, "", "diag"], [623, 2, 1, "", "get_params"], [623, 3, 1, "", "hyperparameters"], [623, 2, 1, "", "is_stationary"], [623, 3, 1, "", "n_dims"], [623, 3, 1, "", "requires_vector_input"], [623, 2, 1, "", "set_params"], [623, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[624, 2, 1, "", "__call__"], [624, 3, 1, "", "bounds"], [624, 2, 1, "", "clone_with_theta"], [624, 2, 1, "", "diag"], [624, 2, 1, "", "get_params"], [624, 3, 1, "", "hyperparameters"], [624, 2, 1, "", "is_stationary"], [624, 3, 1, "", "n_dims"], [624, 3, 1, "", "requires_vector_input"], [624, 2, 1, "", "set_params"], [624, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[625, 2, 1, "", "__call__"], [625, 3, 1, "", "bounds"], [625, 2, 1, "", "clone_with_theta"], [625, 2, 1, "", "diag"], [625, 2, 1, "", "get_params"], [625, 3, 1, "", "hyperparameters"], [625, 2, 1, "", "is_stationary"], [625, 3, 1, "", "n_dims"], [625, 3, 1, "", "requires_vector_input"], [625, 2, 1, "", "set_params"], [625, 3, 1, "", "theta"]], "sklearn.impute": [[627, 1, 1, "", "IterativeImputer"], [628, 1, 1, "", "KNNImputer"], [629, 1, 1, "", "MissingIndicator"], [630, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[627, 2, 1, "", "fit"], [627, 2, 1, "", "fit_transform"], [627, 2, 1, "", "get_feature_names_out"], [627, 2, 1, "", "get_metadata_routing"], [627, 2, 1, "", "get_params"], [627, 2, 1, "", "set_output"], [627, 2, 1, "", "set_params"], [627, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[628, 2, 1, "", "fit"], [628, 2, 1, "", "fit_transform"], [628, 2, 1, "", "get_feature_names_out"], [628, 2, 1, "", "get_metadata_routing"], [628, 2, 1, "", "get_params"], [628, 2, 1, "", "set_output"], [628, 2, 1, "", "set_params"], [628, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[629, 2, 1, "", "fit"], [629, 2, 1, "", "fit_transform"], [629, 2, 1, "", "get_feature_names_out"], [629, 2, 1, "", "get_metadata_routing"], [629, 2, 1, "", "get_params"], [629, 2, 1, "", "set_output"], [629, 2, 1, "", "set_params"], [629, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[630, 2, 1, "", "fit"], [630, 2, 1, "", "fit_transform"], [630, 2, 1, "", "get_feature_names_out"], [630, 2, 1, "", "get_metadata_routing"], [630, 2, 1, "", "get_params"], [630, 2, 1, "", "inverse_transform"], [630, 2, 1, "", "set_output"], [630, 2, 1, "", "set_params"], [630, 2, 1, "", "transform"]], "sklearn.inspection": [[631, 1, 1, "", "DecisionBoundaryDisplay"], [632, 1, 1, "", "PartialDependenceDisplay"], [633, 4, 1, "", "partial_dependence"], [634, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[631, 2, 1, "", "from_estimator"], [631, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[632, 2, 1, "", "from_estimator"], [632, 2, 1, "", "plot"]], "sklearn.isotonic": [[635, 1, 1, "", "IsotonicRegression"], [636, 4, 1, "", "check_increasing"], [637, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[635, 2, 1, "", "fit"], [635, 2, 1, "", "fit_transform"], [635, 2, 1, "", "get_feature_names_out"], [635, 2, 1, "", "get_metadata_routing"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "predict"], [635, 2, 1, "", "score"], [635, 2, 1, "", "set_fit_request"], [635, 2, 1, "", "set_output"], [635, 2, 1, "", "set_params"], [635, 2, 1, "", "set_predict_request"], [635, 2, 1, "", "set_score_request"], [635, 2, 1, "", "set_transform_request"], [635, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[638, 1, 1, "", "AdditiveChi2Sampler"], [639, 1, 1, "", "Nystroem"], [640, 1, 1, "", "PolynomialCountSketch"], [641, 1, 1, "", "RBFSampler"], [642, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "fit_transform"], [638, 2, 1, "", "get_feature_names_out"], [638, 2, 1, "", "get_metadata_routing"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "set_output"], [638, 2, 1, "", "set_params"], [638, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "fit_transform"], [639, 2, 1, "", "get_feature_names_out"], [639, 2, 1, "", "get_metadata_routing"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "set_output"], [639, 2, 1, "", "set_params"], [639, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "fit_transform"], [640, 2, 1, "", "get_feature_names_out"], [640, 2, 1, "", "get_metadata_routing"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "set_output"], [640, 2, 1, "", "set_params"], [640, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "fit_transform"], [641, 2, 1, "", "get_feature_names_out"], [641, 2, 1, "", "get_metadata_routing"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "set_output"], [641, 2, 1, "", "set_params"], [641, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "fit_transform"], [642, 2, 1, "", "get_feature_names_out"], [642, 2, 1, "", "get_metadata_routing"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "set_output"], [642, 2, 1, "", "set_params"], [642, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[643, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "get_metadata_routing"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "predict"], [643, 2, 1, "", "score"], [643, 2, 1, "", "set_fit_request"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[644, 1, 1, "", "ARDRegression"], [645, 1, 1, "", "BayesianRidge"], [646, 1, 1, "", "ElasticNet"], [647, 1, 1, "", "ElasticNetCV"], [648, 1, 1, "", "GammaRegressor"], [649, 1, 1, "", "HuberRegressor"], [650, 1, 1, "", "Lars"], [651, 1, 1, "", "LarsCV"], [652, 1, 1, "", "Lasso"], [653, 1, 1, "", "LassoCV"], [654, 1, 1, "", "LassoLars"], [655, 1, 1, "", "LassoLarsCV"], [656, 1, 1, "", "LassoLarsIC"], [657, 1, 1, "", "LinearRegression"], [658, 1, 1, "", "LogisticRegression"], [659, 1, 1, "", "LogisticRegressionCV"], [660, 1, 1, "", "MultiTaskElasticNet"], [661, 1, 1, "", "MultiTaskElasticNetCV"], [662, 1, 1, "", "MultiTaskLasso"], [663, 1, 1, "", "MultiTaskLassoCV"], [664, 1, 1, "", "OrthogonalMatchingPursuit"], [665, 1, 1, "", "OrthogonalMatchingPursuitCV"], [666, 1, 1, "", "PassiveAggressiveClassifier"], [667, 1, 1, "", "PassiveAggressiveRegressor"], [668, 1, 1, "", "Perceptron"], [669, 1, 1, "", "PoissonRegressor"], [670, 1, 1, "", "QuantileRegressor"], [671, 1, 1, "", "RANSACRegressor"], [672, 1, 1, "", "Ridge"], [673, 1, 1, "", "RidgeCV"], [674, 1, 1, "", "RidgeClassifier"], [675, 1, 1, "", "RidgeClassifierCV"], [676, 1, 1, "", "SGDClassifier"], [677, 1, 1, "", "SGDOneClassSVM"], [678, 1, 1, "", "SGDRegressor"], [679, 1, 1, "", "TheilSenRegressor"], [680, 1, 1, "", "TweedieRegressor"], [681, 4, 1, "", "enet_path"], [682, 4, 1, "", "lars_path"], [683, 4, 1, "", "lars_path_gram"], [684, 4, 1, "", "lasso_path"], [685, 4, 1, "", "orthogonal_mp"], [686, 4, 1, "", "orthogonal_mp_gram"], [687, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "set_predict_request"], [644, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "get_metadata_routing"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "predict"], [645, 2, 1, "", "score"], [645, 2, 1, "", "set_fit_request"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "set_predict_request"], [645, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "get_metadata_routing"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "path"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_fit_request"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "set_score_request"], [646, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "path"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_fit_request"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_fit_request"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_fit_request"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_fit_request"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_fit_request"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "path"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_fit_request"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_score_request"], [652, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "path"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_fit_request"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_fit_request"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_fit_request"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[658, 2, 1, "", "decision_function"], [658, 2, 1, "", "densify"], [658, 2, 1, "", "fit"], [658, 2, 1, "", "get_metadata_routing"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "predict_log_proba"], [658, 2, 1, "", "predict_proba"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_fit_request"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "set_score_request"], [658, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[659, 2, 1, "", "decision_function"], [659, 2, 1, "", "densify"], [659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "predict_log_proba"], [659, 2, 1, "", "predict_proba"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_fit_request"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_score_request"], [659, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[660, 2, 1, "", "fit"], [660, 2, 1, "", "get_metadata_routing"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "path"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_fit_request"], [660, 2, 1, "", "set_params"], [660, 2, 1, "", "set_score_request"], [660, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[661, 2, 1, "", "fit"], [661, 2, 1, "", "get_metadata_routing"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "path"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_fit_request"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "path"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_fit_request"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "set_score_request"], [662, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "path"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_fit_request"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[666, 2, 1, "", "decision_function"], [666, 2, 1, "", "densify"], [666, 2, 1, "", "fit"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "partial_fit"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_fit_request"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_partial_fit_request"], [666, 2, 1, "", "set_score_request"], [666, 2, 1, "", "sparsify"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[667, 2, 1, "", "densify"], [667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "partial_fit"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_fit_request"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "set_partial_fit_request"], [667, 2, 1, "", "set_score_request"], [667, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[668, 2, 1, "", "decision_function"], [668, 2, 1, "", "densify"], [668, 2, 1, "", "fit"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "partial_fit"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "score"], [668, 2, 1, "", "set_fit_request"], [668, 2, 1, "", "set_params"], [668, 2, 1, "", "set_partial_fit_request"], [668, 2, 1, "", "set_score_request"], [668, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_fit_request"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[670, 2, 1, "", "fit"], [670, 2, 1, "", "get_metadata_routing"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "predict"], [670, 2, 1, "", "score"], [670, 2, 1, "", "set_fit_request"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[671, 2, 1, "", "fit"], [671, 2, 1, "", "get_metadata_routing"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "predict"], [671, 2, 1, "", "score"], [671, 2, 1, "", "set_fit_request"], [671, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[672, 2, 1, "", "fit"], [672, 2, 1, "", "get_metadata_routing"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "predict"], [672, 2, 1, "", "score"], [672, 2, 1, "", "set_fit_request"], [672, 2, 1, "", "set_params"], [672, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[673, 2, 1, "", "fit"], [673, 2, 1, "", "get_metadata_routing"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "predict"], [673, 2, 1, "", "score"], [673, 2, 1, "", "set_fit_request"], [673, 2, 1, "", "set_params"], [673, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[674, 3, 1, "", "classes_"], [674, 2, 1, "", "decision_function"], [674, 2, 1, "", "fit"], [674, 2, 1, "", "get_metadata_routing"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "predict"], [674, 2, 1, "", "score"], [674, 2, 1, "", "set_fit_request"], [674, 2, 1, "", "set_params"], [674, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[675, 3, 1, "", "classes_"], [675, 2, 1, "", "decision_function"], [675, 2, 1, "", "fit"], [675, 2, 1, "", "get_metadata_routing"], [675, 2, 1, "", "get_params"], [675, 2, 1, "", "predict"], [675, 2, 1, "", "score"], [675, 2, 1, "", "set_fit_request"], [675, 2, 1, "", "set_params"], [675, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[676, 2, 1, "", "decision_function"], [676, 2, 1, "", "densify"], [676, 2, 1, "", "fit"], [676, 2, 1, "", "get_metadata_routing"], [676, 2, 1, "", "get_params"], [676, 2, 1, "", "partial_fit"], [676, 2, 1, "", "predict"], [676, 2, 1, "", "predict_log_proba"], [676, 2, 1, "", "predict_proba"], [676, 2, 1, "", "score"], [676, 2, 1, "", "set_fit_request"], [676, 2, 1, "", "set_params"], [676, 2, 1, "", "set_partial_fit_request"], [676, 2, 1, "", "set_score_request"], [676, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[677, 2, 1, "", "decision_function"], [677, 2, 1, "", "densify"], [677, 2, 1, "", "fit"], [677, 2, 1, "", "fit_predict"], [677, 2, 1, "", "get_metadata_routing"], [677, 2, 1, "", "get_params"], [677, 2, 1, "", "partial_fit"], [677, 2, 1, "", "predict"], [677, 2, 1, "", "score_samples"], [677, 2, 1, "", "set_fit_request"], [677, 2, 1, "", "set_params"], [677, 2, 1, "", "set_partial_fit_request"], [677, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[678, 2, 1, "", "densify"], [678, 2, 1, "", "fit"], [678, 2, 1, "", "get_metadata_routing"], [678, 2, 1, "", "get_params"], [678, 2, 1, "", "partial_fit"], [678, 2, 1, "", "predict"], [678, 2, 1, "", "score"], [678, 2, 1, "", "set_fit_request"], [678, 2, 1, "", "set_params"], [678, 2, 1, "", "set_partial_fit_request"], [678, 2, 1, "", "set_score_request"], [678, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[679, 2, 1, "", "fit"], [679, 2, 1, "", "get_metadata_routing"], [679, 2, 1, "", "get_params"], [679, 2, 1, "", "predict"], [679, 2, 1, "", "score"], [679, 2, 1, "", "set_params"], [679, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[680, 2, 1, "", "fit"], [680, 2, 1, "", "get_metadata_routing"], [680, 2, 1, "", "get_params"], [680, 2, 1, "", "predict"], [680, 2, 1, "", "score"], [680, 2, 1, "", "set_fit_request"], [680, 2, 1, "", "set_params"], [680, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[688, 1, 1, "", "Isomap"], [689, 1, 1, "", "LocallyLinearEmbedding"], [690, 1, 1, "", "MDS"], [691, 1, 1, "", "SpectralEmbedding"], [692, 1, 1, "", "TSNE"], [693, 4, 1, "", "locally_linear_embedding"], [694, 4, 1, "", "smacof"], [695, 4, 1, "", "spectral_embedding"], [696, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[688, 2, 1, "", "fit"], [688, 2, 1, "", "fit_transform"], [688, 2, 1, "", "get_feature_names_out"], [688, 2, 1, "", "get_metadata_routing"], [688, 2, 1, "", "get_params"], [688, 2, 1, "", "reconstruction_error"], [688, 2, 1, "", "set_output"], [688, 2, 1, "", "set_params"], [688, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[689, 2, 1, "", "fit"], [689, 2, 1, "", "fit_transform"], [689, 2, 1, "", "get_feature_names_out"], [689, 2, 1, "", "get_metadata_routing"], [689, 2, 1, "", "get_params"], [689, 2, 1, "", "set_output"], [689, 2, 1, "", "set_params"], [689, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[690, 2, 1, "", "fit"], [690, 2, 1, "", "fit_transform"], [690, 2, 1, "", "get_metadata_routing"], [690, 2, 1, "", "get_params"], [690, 2, 1, "", "set_fit_request"], [690, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[691, 2, 1, "", "fit"], [691, 2, 1, "", "fit_transform"], [691, 2, 1, "", "get_metadata_routing"], [691, 2, 1, "", "get_params"], [691, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[692, 2, 1, "", "fit"], [692, 2, 1, "", "fit_transform"], [692, 2, 1, "", "get_feature_names_out"], [692, 2, 1, "", "get_metadata_routing"], [692, 2, 1, "", "get_params"], [692, 2, 1, "", "set_output"], [692, 2, 1, "", "set_params"]], "sklearn.metrics": [[697, 1, 1, "", "ConfusionMatrixDisplay"], [698, 1, 1, "", "DetCurveDisplay"], [699, 1, 1, "", "DistanceMetric"], [700, 1, 1, "", "PrecisionRecallDisplay"], [701, 1, 1, "", "PredictionErrorDisplay"], [702, 1, 1, "", "RocCurveDisplay"], [703, 4, 1, "", "accuracy_score"], [704, 4, 1, "", "adjusted_mutual_info_score"], [705, 4, 1, "", "adjusted_rand_score"], [706, 4, 1, "", "auc"], [707, 4, 1, "", "average_precision_score"], [708, 4, 1, "", "balanced_accuracy_score"], [709, 4, 1, "", "brier_score_loss"], [710, 4, 1, "", "calinski_harabasz_score"], [711, 4, 1, "", "check_scoring"], [712, 4, 1, "", "class_likelihood_ratios"], [713, 4, 1, "", "classification_report"], [408, 0, 0, "-", "cluster"], [716, 4, 1, "", "cohen_kappa_score"], [717, 4, 1, "", "completeness_score"], [718, 4, 1, "", "confusion_matrix"], [719, 4, 1, "", "consensus_score"], [720, 4, 1, "", "coverage_error"], [721, 4, 1, "", "d2_absolute_error_score"], [722, 4, 1, "", "d2_pinball_score"], [723, 4, 1, "", "d2_tweedie_score"], [724, 4, 1, "", "davies_bouldin_score"], [725, 4, 1, "", "dcg_score"], [726, 4, 1, "", "det_curve"], [727, 4, 1, "", "explained_variance_score"], [728, 4, 1, "", "f1_score"], [729, 4, 1, "", "fbeta_score"], [730, 4, 1, "", "fowlkes_mallows_score"], [731, 4, 1, "", "get_scorer"], [732, 4, 1, "", "get_scorer_names"], [733, 4, 1, "", "hamming_loss"], [734, 4, 1, "", "hinge_loss"], [735, 4, 1, "", "homogeneity_completeness_v_measure"], [736, 4, 1, "", "homogeneity_score"], [737, 4, 1, "", "jaccard_score"], [738, 4, 1, "", "label_ranking_average_precision_score"], [739, 4, 1, "", "label_ranking_loss"], [740, 4, 1, "", "log_loss"], [741, 4, 1, "", "make_scorer"], [742, 4, 1, "", "matthews_corrcoef"], [743, 4, 1, "", "max_error"], [744, 4, 1, "", "mean_absolute_error"], [745, 4, 1, "", "mean_absolute_percentage_error"], [746, 4, 1, "", "mean_gamma_deviance"], [747, 4, 1, "", "mean_pinball_loss"], [748, 4, 1, "", "mean_poisson_deviance"], [749, 4, 1, "", "mean_squared_error"], [750, 4, 1, "", "mean_squared_log_error"], [751, 4, 1, "", "mean_tweedie_deviance"], [752, 4, 1, "", "median_absolute_error"], [753, 4, 1, "", "multilabel_confusion_matrix"], [754, 4, 1, "", "mutual_info_score"], [755, 4, 1, "", "ndcg_score"], [756, 4, 1, "", "normalized_mutual_info_score"], [408, 0, 0, "-", "pairwise"], [777, 4, 1, "", "pairwise_distances"], [778, 4, 1, "", "pairwise_distances_argmin"], [779, 4, 1, "", "pairwise_distances_argmin_min"], [780, 4, 1, "", "pairwise_distances_chunked"], [781, 4, 1, "", "precision_recall_curve"], [782, 4, 1, "", "precision_recall_fscore_support"], [783, 4, 1, "", "precision_score"], [784, 4, 1, "", "r2_score"], [785, 4, 1, "", "rand_score"], [786, 4, 1, "", "recall_score"], [787, 4, 1, "", "roc_auc_score"], [788, 4, 1, "", "roc_curve"], [789, 4, 1, "", "root_mean_squared_error"], [790, 4, 1, "", "root_mean_squared_log_error"], [791, 4, 1, "", "silhouette_samples"], [792, 4, 1, "", "silhouette_score"], [793, 4, 1, "", "top_k_accuracy_score"], [794, 4, 1, "", "v_measure_score"], [795, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[697, 2, 1, "", "from_estimator"], [697, 2, 1, "", "from_predictions"], [697, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[698, 2, 1, "", "from_estimator"], [698, 2, 1, "", "from_predictions"], [698, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[699, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[700, 2, 1, "", "from_estimator"], [700, 2, 1, "", "from_predictions"], [700, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[701, 2, 1, "", "from_estimator"], [701, 2, 1, "", "from_predictions"], [701, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[702, 2, 1, "", "from_estimator"], [702, 2, 1, "", "from_predictions"], [702, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[714, 4, 1, "", "contingency_matrix"], [715, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[757, 4, 1, "", "additive_chi2_kernel"], [758, 4, 1, "", "chi2_kernel"], [759, 4, 1, "", "cosine_distances"], [760, 4, 1, "", "cosine_similarity"], [761, 4, 1, "", "distance_metrics"], [762, 4, 1, "", "euclidean_distances"], [763, 4, 1, "", "haversine_distances"], [764, 4, 1, "", "kernel_metrics"], [765, 4, 1, "", "laplacian_kernel"], [766, 4, 1, "", "linear_kernel"], [767, 4, 1, "", "manhattan_distances"], [768, 4, 1, "", "nan_euclidean_distances"], [769, 4, 1, "", "paired_cosine_distances"], [770, 4, 1, "", "paired_distances"], [771, 4, 1, "", "paired_euclidean_distances"], [772, 4, 1, "", "paired_manhattan_distances"], [773, 4, 1, "", "pairwise_kernels"], [774, 4, 1, "", "polynomial_kernel"], [775, 4, 1, "", "rbf_kernel"], [776, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[796, 1, 1, "", "BayesianGaussianMixture"], [797, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[796, 2, 1, "", "fit"], [796, 2, 1, "", "fit_predict"], [796, 2, 1, "", "get_metadata_routing"], [796, 2, 1, "", "get_params"], [796, 2, 1, "", "predict"], [796, 2, 1, "", "predict_proba"], [796, 2, 1, "", "sample"], [796, 2, 1, "", "score"], [796, 2, 1, "", "score_samples"], [796, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[797, 2, 1, "", "aic"], [797, 2, 1, "", "bic"], [797, 2, 1, "", "fit"], [797, 2, 1, "", "fit_predict"], [797, 2, 1, "", "get_metadata_routing"], [797, 2, 1, "", "get_params"], [797, 2, 1, "", "predict"], [797, 2, 1, "", "predict_proba"], [797, 2, 1, "", "sample"], [797, 2, 1, "", "score"], [797, 2, 1, "", "score_samples"], [797, 2, 1, "", "set_params"]], "sklearn.model_selection": [[798, 1, 1, "", "GridSearchCV"], [799, 1, 1, "", "GroupKFold"], [800, 1, 1, "", "GroupShuffleSplit"], [801, 1, 1, "", "HalvingGridSearchCV"], [802, 1, 1, "", "HalvingRandomSearchCV"], [803, 1, 1, "", "KFold"], [804, 1, 1, "", "LearningCurveDisplay"], [805, 1, 1, "", "LeaveOneGroupOut"], [806, 1, 1, "", "LeaveOneOut"], [807, 1, 1, "", "LeavePGroupsOut"], [808, 1, 1, "", "LeavePOut"], [809, 1, 1, "", "ParameterGrid"], [810, 1, 1, "", "ParameterSampler"], [811, 1, 1, "", "PredefinedSplit"], [812, 1, 1, "", "RandomizedSearchCV"], [813, 1, 1, "", "RepeatedKFold"], [814, 1, 1, "", "RepeatedStratifiedKFold"], [815, 1, 1, "", "ShuffleSplit"], [816, 1, 1, "", "StratifiedGroupKFold"], [817, 1, 1, "", "StratifiedKFold"], [818, 1, 1, "", "StratifiedShuffleSplit"], [819, 1, 1, "", "TimeSeriesSplit"], [820, 1, 1, "", "ValidationCurveDisplay"], [821, 4, 1, "", "check_cv"], [822, 4, 1, "", "cross_val_predict"], [823, 4, 1, "", "cross_val_score"], [824, 4, 1, "", "cross_validate"], [825, 4, 1, "", "learning_curve"], [826, 4, 1, "", "permutation_test_score"], [827, 4, 1, "", "train_test_split"], [828, 4, 1, "", "validation_curve"]], "sklearn.model_selection.GridSearchCV": [[798, 3, 1, "", "classes_"], [798, 2, 1, "", "decision_function"], [798, 2, 1, "", "fit"], [798, 2, 1, "", "get_metadata_routing"], [798, 2, 1, "", "get_params"], [798, 2, 1, "", "inverse_transform"], [798, 3, 1, "", "n_features_in_"], [798, 2, 1, "", "predict"], [798, 2, 1, "", "predict_log_proba"], [798, 2, 1, "", "predict_proba"], [798, 2, 1, "", "score"], [798, 2, 1, "", "score_samples"], [798, 2, 1, "", "set_params"], [798, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[799, 2, 1, "", "get_metadata_routing"], [799, 2, 1, "", "get_n_splits"], [799, 2, 1, "", "set_split_request"], [799, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[800, 2, 1, "", "get_metadata_routing"], [800, 2, 1, "", "get_n_splits"], [800, 2, 1, "", "set_split_request"], [800, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[801, 3, 1, "", "classes_"], [801, 2, 1, "", "decision_function"], [801, 2, 1, "", "fit"], [801, 2, 1, "", "get_metadata_routing"], [801, 2, 1, "", "get_params"], [801, 2, 1, "", "inverse_transform"], [801, 3, 1, "", "n_features_in_"], [801, 2, 1, "", "predict"], [801, 2, 1, "", "predict_log_proba"], [801, 2, 1, "", "predict_proba"], [801, 2, 1, "", "score"], [801, 2, 1, "", "score_samples"], [801, 2, 1, "", "set_params"], [801, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[802, 3, 1, "", "classes_"], [802, 2, 1, "", "decision_function"], [802, 2, 1, "", "fit"], [802, 2, 1, "", "get_metadata_routing"], [802, 2, 1, "", "get_params"], [802, 2, 1, "", "inverse_transform"], [802, 3, 1, "", "n_features_in_"], [802, 2, 1, "", "predict"], [802, 2, 1, "", "predict_log_proba"], [802, 2, 1, "", "predict_proba"], [802, 2, 1, "", "score"], [802, 2, 1, "", "score_samples"], [802, 2, 1, "", "set_params"], [802, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[803, 2, 1, "", "get_metadata_routing"], [803, 2, 1, "", "get_n_splits"], [803, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[804, 2, 1, "", "from_estimator"], [804, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[805, 2, 1, "", "get_metadata_routing"], [805, 2, 1, "", "get_n_splits"], [805, 2, 1, "", "set_split_request"], [805, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[806, 2, 1, "", "get_metadata_routing"], [806, 2, 1, "", "get_n_splits"], [806, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[807, 2, 1, "", "get_metadata_routing"], [807, 2, 1, "", "get_n_splits"], [807, 2, 1, "", "set_split_request"], [807, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[808, 2, 1, "", "get_metadata_routing"], [808, 2, 1, "", "get_n_splits"], [808, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[811, 2, 1, "", "get_metadata_routing"], [811, 2, 1, "", "get_n_splits"], [811, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[812, 3, 1, "", "classes_"], [812, 2, 1, "", "decision_function"], [812, 2, 1, "", "fit"], [812, 2, 1, "", "get_metadata_routing"], [812, 2, 1, "", "get_params"], [812, 2, 1, "", "inverse_transform"], [812, 3, 1, "", "n_features_in_"], [812, 2, 1, "", "predict"], [812, 2, 1, "", "predict_log_proba"], [812, 2, 1, "", "predict_proba"], [812, 2, 1, "", "score"], [812, 2, 1, "", "score_samples"], [812, 2, 1, "", "set_params"], [812, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[813, 2, 1, "", "get_metadata_routing"], [813, 2, 1, "", "get_n_splits"], [813, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[814, 2, 1, "", "get_metadata_routing"], [814, 2, 1, "", "get_n_splits"], [814, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[815, 2, 1, "", "get_metadata_routing"], [815, 2, 1, "", "get_n_splits"], [815, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[816, 2, 1, "", "get_metadata_routing"], [816, 2, 1, "", "get_n_splits"], [816, 2, 1, "", "set_split_request"], [816, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[817, 2, 1, "", "get_metadata_routing"], [817, 2, 1, "", "get_n_splits"], [817, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[818, 2, 1, "", "get_metadata_routing"], [818, 2, 1, "", "get_n_splits"], [818, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[819, 2, 1, "", "get_metadata_routing"], [819, 2, 1, "", "get_n_splits"], [819, 2, 1, "", "split"]], "sklearn.model_selection.ValidationCurveDisplay": [[820, 2, 1, "", "from_estimator"], [820, 2, 1, "", "plot"]], "sklearn.multiclass": [[829, 1, 1, "", "OneVsOneClassifier"], [830, 1, 1, "", "OneVsRestClassifier"], [831, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[829, 2, 1, "", "decision_function"], [829, 2, 1, "", "fit"], [829, 2, 1, "", "get_metadata_routing"], [829, 2, 1, "", "get_params"], [829, 3, 1, "", "n_classes_"], [829, 2, 1, "", "partial_fit"], [829, 2, 1, "", "predict"], [829, 2, 1, "", "score"], [829, 2, 1, "", "set_params"], [829, 2, 1, "", "set_partial_fit_request"], [829, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[830, 2, 1, "", "decision_function"], [830, 2, 1, "", "fit"], [830, 2, 1, "", "get_metadata_routing"], [830, 2, 1, "", "get_params"], [830, 3, 1, "", "multilabel_"], [830, 3, 1, "", "n_classes_"], [830, 2, 1, "", "partial_fit"], [830, 2, 1, "", "predict"], [830, 2, 1, "", "predict_proba"], [830, 2, 1, "", "score"], [830, 2, 1, "", "set_params"], [830, 2, 1, "", "set_partial_fit_request"], [830, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[831, 2, 1, "", "fit"], [831, 2, 1, "", "get_metadata_routing"], [831, 2, 1, "", "get_params"], [831, 2, 1, "", "predict"], [831, 2, 1, "", "score"], [831, 2, 1, "", "set_params"], [831, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[832, 1, 1, "", "ClassifierChain"], [833, 1, 1, "", "MultiOutputClassifier"], [834, 1, 1, "", "MultiOutputRegressor"], [835, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[832, 2, 1, "", "decision_function"], [832, 2, 1, "", "fit"], [832, 2, 1, "", "get_metadata_routing"], [832, 2, 1, "", "get_params"], [832, 2, 1, "", "predict"], [832, 2, 1, "", "predict_log_proba"], [832, 2, 1, "", "predict_proba"], [832, 2, 1, "", "score"], [832, 2, 1, "", "set_params"], [832, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[833, 2, 1, "", "fit"], [833, 2, 1, "", "get_metadata_routing"], [833, 2, 1, "", "get_params"], [833, 2, 1, "", "partial_fit"], [833, 2, 1, "", "predict"], [833, 2, 1, "", "predict_proba"], [833, 2, 1, "", "score"], [833, 2, 1, "", "set_fit_request"], [833, 2, 1, "", "set_params"], [833, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[834, 2, 1, "", "fit"], [834, 2, 1, "", "get_metadata_routing"], [834, 2, 1, "", "get_params"], [834, 2, 1, "", "partial_fit"], [834, 2, 1, "", "predict"], [834, 2, 1, "", "score"], [834, 2, 1, "", "set_fit_request"], [834, 2, 1, "", "set_params"], [834, 2, 1, "", "set_partial_fit_request"], [834, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[835, 2, 1, "", "fit"], [835, 2, 1, "", "get_metadata_routing"], [835, 2, 1, "", "get_params"], [835, 2, 1, "", "predict"], [835, 2, 1, "", "score"], [835, 2, 1, "", "set_params"], [835, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[836, 1, 1, "", "BernoulliNB"], [837, 1, 1, "", "CategoricalNB"], [838, 1, 1, "", "ComplementNB"], [839, 1, 1, "", "GaussianNB"], [840, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[836, 2, 1, "", "fit"], [836, 2, 1, "", "get_metadata_routing"], [836, 2, 1, "", "get_params"], [836, 2, 1, "", "partial_fit"], [836, 2, 1, "", "predict"], [836, 2, 1, "", "predict_joint_log_proba"], [836, 2, 1, "", "predict_log_proba"], [836, 2, 1, "", "predict_proba"], [836, 2, 1, "", "score"], [836, 2, 1, "", "set_fit_request"], [836, 2, 1, "", "set_params"], [836, 2, 1, "", "set_partial_fit_request"], [836, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[837, 2, 1, "", "fit"], [837, 2, 1, "", "get_metadata_routing"], [837, 2, 1, "", "get_params"], [837, 2, 1, "", "partial_fit"], [837, 2, 1, "", "predict"], [837, 2, 1, "", "predict_joint_log_proba"], [837, 2, 1, "", "predict_log_proba"], [837, 2, 1, "", "predict_proba"], [837, 2, 1, "", "score"], [837, 2, 1, "", "set_fit_request"], [837, 2, 1, "", "set_params"], [837, 2, 1, "", "set_partial_fit_request"], [837, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[838, 2, 1, "", "fit"], [838, 2, 1, "", "get_metadata_routing"], [838, 2, 1, "", "get_params"], [838, 2, 1, "", "partial_fit"], [838, 2, 1, "", "predict"], [838, 2, 1, "", "predict_joint_log_proba"], [838, 2, 1, "", "predict_log_proba"], [838, 2, 1, "", "predict_proba"], [838, 2, 1, "", "score"], [838, 2, 1, "", "set_fit_request"], [838, 2, 1, "", "set_params"], [838, 2, 1, "", "set_partial_fit_request"], [838, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[839, 2, 1, "", "fit"], [839, 2, 1, "", "get_metadata_routing"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "partial_fit"], [839, 2, 1, "", "predict"], [839, 2, 1, "", "predict_joint_log_proba"], [839, 2, 1, "", "predict_log_proba"], [839, 2, 1, "", "predict_proba"], [839, 2, 1, "", "score"], [839, 2, 1, "", "set_fit_request"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "set_partial_fit_request"], [839, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "get_metadata_routing"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "partial_fit"], [840, 2, 1, "", "predict"], [840, 2, 1, "", "predict_joint_log_proba"], [840, 2, 1, "", "predict_log_proba"], [840, 2, 1, "", "predict_proba"], [840, 2, 1, "", "score"], [840, 2, 1, "", "set_fit_request"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "set_partial_fit_request"], [840, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[841, 1, 1, "", "BallTree"], [842, 1, 1, "", "KDTree"], [843, 1, 1, "", "KNeighborsClassifier"], [844, 1, 1, "", "KNeighborsRegressor"], [845, 1, 1, "", "KNeighborsTransformer"], [846, 1, 1, "", "KernelDensity"], [847, 1, 1, "", "LocalOutlierFactor"], [848, 1, 1, "", "NearestCentroid"], [849, 1, 1, "", "NearestNeighbors"], [850, 1, 1, "", "NeighborhoodComponentsAnalysis"], [851, 1, 1, "", "RadiusNeighborsClassifier"], [852, 1, 1, "", "RadiusNeighborsRegressor"], [853, 1, 1, "", "RadiusNeighborsTransformer"], [854, 4, 1, "", "kneighbors_graph"], [855, 4, 1, "", "radius_neighbors_graph"], [856, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[841, 2, 1, "", "get_arrays"], [841, 2, 1, "", "get_n_calls"], [841, 2, 1, "", "get_tree_stats"], [841, 2, 1, "", "kernel_density"], [841, 2, 1, "", "query"], [841, 2, 1, "", "query_radius"], [841, 2, 1, "", "reset_n_calls"], [841, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[842, 2, 1, "", "get_arrays"], [842, 2, 1, "", "get_n_calls"], [842, 2, 1, "", "get_tree_stats"], [842, 2, 1, "", "kernel_density"], [842, 2, 1, "", "query"], [842, 2, 1, "", "query_radius"], [842, 2, 1, "", "reset_n_calls"], [842, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "kneighbors"], [843, 2, 1, "", "kneighbors_graph"], [843, 2, 1, "", "predict"], [843, 2, 1, "", "predict_proba"], [843, 2, 1, "", "score"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "get_metadata_routing"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "kneighbors"], [844, 2, 1, "", "kneighbors_graph"], [844, 2, 1, "", "predict"], [844, 2, 1, "", "score"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "fit_transform"], [845, 2, 1, "", "get_feature_names_out"], [845, 2, 1, "", "get_metadata_routing"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "kneighbors"], [845, 2, 1, "", "kneighbors_graph"], [845, 2, 1, "", "set_output"], [845, 2, 1, "", "set_params"], [845, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "get_metadata_routing"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "sample"], [846, 2, 1, "", "score"], [846, 2, 1, "", "score_samples"], [846, 2, 1, "", "set_fit_request"], [846, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[847, 2, 1, "", "decision_function"], [847, 2, 1, "", "fit"], [847, 2, 1, "", "fit_predict"], [847, 2, 1, "", "get_metadata_routing"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "kneighbors"], [847, 2, 1, "", "kneighbors_graph"], [847, 2, 1, "", "predict"], [847, 2, 1, "", "score_samples"], [847, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "get_metadata_routing"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "predict"], [848, 2, 1, "", "score"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "get_metadata_routing"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "kneighbors"], [849, 2, 1, "", "kneighbors_graph"], [849, 2, 1, "", "radius_neighbors"], [849, 2, 1, "", "radius_neighbors_graph"], [849, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "fit_transform"], [850, 2, 1, "", "get_feature_names_out"], [850, 2, 1, "", "get_metadata_routing"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "set_output"], [850, 2, 1, "", "set_params"], [850, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[851, 2, 1, "", "fit"], [851, 2, 1, "", "get_metadata_routing"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "predict"], [851, 2, 1, "", "predict_proba"], [851, 2, 1, "", "radius_neighbors"], [851, 2, 1, "", "radius_neighbors_graph"], [851, 2, 1, "", "score"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[852, 2, 1, "", "fit"], [852, 2, 1, "", "get_metadata_routing"], [852, 2, 1, "", "get_params"], [852, 2, 1, "", "predict"], [852, 2, 1, "", "radius_neighbors"], [852, 2, 1, "", "radius_neighbors_graph"], [852, 2, 1, "", "score"], [852, 2, 1, "", "set_params"], [852, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[853, 2, 1, "", "fit"], [853, 2, 1, "", "fit_transform"], [853, 2, 1, "", "get_feature_names_out"], [853, 2, 1, "", "get_metadata_routing"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "radius_neighbors"], [853, 2, 1, "", "radius_neighbors_graph"], [853, 2, 1, "", "set_output"], [853, 2, 1, "", "set_params"], [853, 2, 1, "", "transform"]], "sklearn.neural_network": [[857, 1, 1, "", "BernoulliRBM"], [858, 1, 1, "", "MLPClassifier"], [859, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "fit_transform"], [857, 2, 1, "", "get_feature_names_out"], [857, 2, 1, "", "get_metadata_routing"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "gibbs"], [857, 2, 1, "", "partial_fit"], [857, 2, 1, "", "score_samples"], [857, 2, 1, "", "set_output"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[858, 2, 1, "", "fit"], [858, 2, 1, "", "get_metadata_routing"], [858, 2, 1, "", "get_params"], [858, 2, 1, "", "partial_fit"], [858, 2, 1, "", "predict"], [858, 2, 1, "", "predict_log_proba"], [858, 2, 1, "", "predict_proba"], [858, 2, 1, "", "score"], [858, 2, 1, "", "set_params"], [858, 2, 1, "", "set_partial_fit_request"], [858, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[859, 2, 1, "", "fit"], [859, 2, 1, "", "get_metadata_routing"], [859, 2, 1, "", "get_params"], [859, 2, 1, "", "partial_fit"], [859, 2, 1, "", "predict"], [859, 2, 1, "", "score"], [859, 2, 1, "", "set_params"], [859, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[860, 1, 1, "", "FeatureUnion"], [861, 1, 1, "", "Pipeline"], [862, 4, 1, "", "make_pipeline"], [863, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[860, 3, 1, "", "feature_names_in_"], [860, 2, 1, "", "fit"], [860, 2, 1, "", "fit_transform"], [860, 2, 1, "", "get_feature_names_out"], [860, 2, 1, "", "get_metadata_routing"], [860, 2, 1, "", "get_params"], [860, 3, 1, "", "n_features_in_"], [860, 2, 1, "", "set_output"], [860, 2, 1, "", "set_params"], [860, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[861, 3, 1, "", "classes_"], [861, 2, 1, "", "decision_function"], [861, 3, 1, "", "feature_names_in_"], [861, 2, 1, "", "fit"], [861, 2, 1, "", "fit_predict"], [861, 2, 1, "", "fit_transform"], [861, 2, 1, "", "get_feature_names_out"], [861, 2, 1, "", "get_metadata_routing"], [861, 2, 1, "", "get_params"], [861, 2, 1, "", "inverse_transform"], [861, 3, 1, "", "n_features_in_"], [861, 3, 1, "", "named_steps"], [861, 2, 1, "", "predict"], [861, 2, 1, "", "predict_log_proba"], [861, 2, 1, "", "predict_proba"], [861, 2, 1, "", "score"], [861, 2, 1, "", "score_samples"], [861, 2, 1, "", "set_output"], [861, 2, 1, "", "set_params"], [861, 2, 1, "", "set_score_request"], [861, 2, 1, "", "transform"]], "sklearn.preprocessing": [[864, 1, 1, "", "Binarizer"], [865, 1, 1, "", "FunctionTransformer"], [866, 1, 1, "", "KBinsDiscretizer"], [867, 1, 1, "", "KernelCenterer"], [868, 1, 1, "", "LabelBinarizer"], [869, 1, 1, "", "LabelEncoder"], [870, 1, 1, "", "MaxAbsScaler"], [871, 1, 1, "", "MinMaxScaler"], [872, 1, 1, "", "MultiLabelBinarizer"], [873, 1, 1, "", "Normalizer"], [874, 1, 1, "", "OneHotEncoder"], [875, 1, 1, "", "OrdinalEncoder"], [876, 1, 1, "", "PolynomialFeatures"], [877, 1, 1, "", "PowerTransformer"], [878, 1, 1, "", "QuantileTransformer"], [879, 1, 1, "", "RobustScaler"], [880, 1, 1, "", "SplineTransformer"], [881, 1, 1, "", "StandardScaler"], [882, 1, 1, "", "TargetEncoder"], [883, 4, 1, "", "add_dummy_feature"], [884, 4, 1, "", "binarize"], [885, 4, 1, "", "label_binarize"], [886, 4, 1, "", "maxabs_scale"], [887, 4, 1, "", "minmax_scale"], [888, 4, 1, "", "normalize"], [889, 4, 1, "", "power_transform"], [890, 4, 1, "", "quantile_transform"], [891, 4, 1, "", "robust_scale"], [892, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[864, 2, 1, "", "fit"], [864, 2, 1, "", "fit_transform"], [864, 2, 1, "", "get_feature_names_out"], [864, 2, 1, "", "get_metadata_routing"], [864, 2, 1, "", "get_params"], [864, 2, 1, "", "set_output"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "set_transform_request"], [864, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[865, 2, 1, "", "fit"], [865, 2, 1, "", "fit_transform"], [865, 2, 1, "", "get_feature_names_out"], [865, 2, 1, "", "get_metadata_routing"], [865, 2, 1, "", "get_params"], [865, 2, 1, "", "inverse_transform"], [865, 2, 1, "", "set_output"], [865, 2, 1, "", "set_params"], [865, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[866, 2, 1, "", "fit"], [866, 2, 1, "", "fit_transform"], [866, 2, 1, "", "get_feature_names_out"], [866, 2, 1, "", "get_metadata_routing"], [866, 2, 1, "", "get_params"], [866, 2, 1, "", "inverse_transform"], [866, 2, 1, "", "set_fit_request"], [866, 2, 1, "", "set_output"], [866, 2, 1, "", "set_params"], [866, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[867, 2, 1, "", "fit"], [867, 2, 1, "", "fit_transform"], [867, 2, 1, "", "get_feature_names_out"], [867, 2, 1, "", "get_metadata_routing"], [867, 2, 1, "", "get_params"], [867, 2, 1, "", "set_fit_request"], [867, 2, 1, "", "set_output"], [867, 2, 1, "", "set_params"], [867, 2, 1, "", "set_transform_request"], [867, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[868, 2, 1, "", "fit"], [868, 2, 1, "", "fit_transform"], [868, 2, 1, "", "get_metadata_routing"], [868, 2, 1, "", "get_params"], [868, 2, 1, "", "inverse_transform"], [868, 2, 1, "", "set_inverse_transform_request"], [868, 2, 1, "", "set_output"], [868, 2, 1, "", "set_params"], [868, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[869, 2, 1, "", "fit"], [869, 2, 1, "", "fit_transform"], [869, 2, 1, "", "get_metadata_routing"], [869, 2, 1, "", "get_params"], [869, 2, 1, "", "inverse_transform"], [869, 2, 1, "", "set_output"], [869, 2, 1, "", "set_params"], [869, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[870, 2, 1, "", "fit"], [870, 2, 1, "", "fit_transform"], [870, 2, 1, "", "get_feature_names_out"], [870, 2, 1, "", "get_metadata_routing"], [870, 2, 1, "", "get_params"], [870, 2, 1, "", "inverse_transform"], [870, 2, 1, "", "partial_fit"], [870, 2, 1, "", "set_output"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[871, 2, 1, "", "fit"], [871, 2, 1, "", "fit_transform"], [871, 2, 1, "", "get_feature_names_out"], [871, 2, 1, "", "get_metadata_routing"], [871, 2, 1, "", "get_params"], [871, 2, 1, "", "inverse_transform"], [871, 2, 1, "", "partial_fit"], [871, 2, 1, "", "set_output"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[872, 2, 1, "", "fit"], [872, 2, 1, "", "fit_transform"], [872, 2, 1, "", "get_metadata_routing"], [872, 2, 1, "", "get_params"], [872, 2, 1, "", "inverse_transform"], [872, 2, 1, "", "set_output"], [872, 2, 1, "", "set_params"], [872, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[873, 2, 1, "", "fit"], [873, 2, 1, "", "fit_transform"], [873, 2, 1, "", "get_feature_names_out"], [873, 2, 1, "", "get_metadata_routing"], [873, 2, 1, "", "get_params"], [873, 2, 1, "", "set_output"], [873, 2, 1, "", "set_params"], [873, 2, 1, "", "set_transform_request"], [873, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[874, 2, 1, "", "fit"], [874, 2, 1, "", "fit_transform"], [874, 2, 1, "", "get_feature_names_out"], [874, 2, 1, "", "get_metadata_routing"], [874, 2, 1, "", "get_params"], [874, 3, 1, "", "infrequent_categories_"], [874, 2, 1, "", "inverse_transform"], [874, 2, 1, "", "set_output"], [874, 2, 1, "", "set_params"], [874, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[875, 2, 1, "", "fit"], [875, 2, 1, "", "fit_transform"], [875, 2, 1, "", "get_feature_names_out"], [875, 2, 1, "", "get_metadata_routing"], [875, 2, 1, "", "get_params"], [875, 3, 1, "", "infrequent_categories_"], [875, 2, 1, "", "inverse_transform"], [875, 2, 1, "", "set_output"], [875, 2, 1, "", "set_params"], [875, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "fit_transform"], [876, 2, 1, "", "get_feature_names_out"], [876, 2, 1, "", "get_metadata_routing"], [876, 2, 1, "", "get_params"], [876, 3, 1, "", "powers_"], [876, 2, 1, "", "set_output"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[877, 2, 1, "", "fit"], [877, 2, 1, "", "fit_transform"], [877, 2, 1, "", "get_feature_names_out"], [877, 2, 1, "", "get_metadata_routing"], [877, 2, 1, "", "get_params"], [877, 2, 1, "", "inverse_transform"], [877, 2, 1, "", "set_output"], [877, 2, 1, "", "set_params"], [877, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[878, 2, 1, "", "fit"], [878, 2, 1, "", "fit_transform"], [878, 2, 1, "", "get_feature_names_out"], [878, 2, 1, "", "get_metadata_routing"], [878, 2, 1, "", "get_params"], [878, 2, 1, "", "inverse_transform"], [878, 2, 1, "", "set_output"], [878, 2, 1, "", "set_params"], [878, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[879, 2, 1, "", "fit"], [879, 2, 1, "", "fit_transform"], [879, 2, 1, "", "get_feature_names_out"], [879, 2, 1, "", "get_metadata_routing"], [879, 2, 1, "", "get_params"], [879, 2, 1, "", "inverse_transform"], [879, 2, 1, "", "set_output"], [879, 2, 1, "", "set_params"], [879, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[880, 2, 1, "", "fit"], [880, 2, 1, "", "fit_transform"], [880, 2, 1, "", "get_feature_names_out"], [880, 2, 1, "", "get_metadata_routing"], [880, 2, 1, "", "get_params"], [880, 2, 1, "", "set_fit_request"], [880, 2, 1, "", "set_output"], [880, 2, 1, "", "set_params"], [880, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[881, 2, 1, "", "fit"], [881, 2, 1, "", "fit_transform"], [881, 2, 1, "", "get_feature_names_out"], [881, 2, 1, "", "get_metadata_routing"], [881, 2, 1, "", "get_params"], [881, 2, 1, "", "inverse_transform"], [881, 2, 1, "", "partial_fit"], [881, 2, 1, "", "set_fit_request"], [881, 2, 1, "", "set_inverse_transform_request"], [881, 2, 1, "", "set_output"], [881, 2, 1, "", "set_params"], [881, 2, 1, "", "set_partial_fit_request"], [881, 2, 1, "", "set_transform_request"], [881, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[882, 2, 1, "", "fit"], [882, 2, 1, "", "fit_transform"], [882, 2, 1, "", "get_feature_names_out"], [882, 2, 1, "", "get_metadata_routing"], [882, 2, 1, "", "get_params"], [882, 3, 1, "", "infrequent_categories_"], [882, 2, 1, "", "set_output"], [882, 2, 1, "", "set_params"], [882, 2, 1, "", "transform"]], "sklearn.random_projection": [[893, 1, 1, "", "GaussianRandomProjection"], [894, 1, 1, "", "SparseRandomProjection"], [895, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[893, 2, 1, "", "fit"], [893, 2, 1, "", "fit_transform"], [893, 2, 1, "", "get_feature_names_out"], [893, 2, 1, "", "get_metadata_routing"], [893, 2, 1, "", "get_params"], [893, 2, 1, "", "inverse_transform"], [893, 2, 1, "", "set_output"], [893, 2, 1, "", "set_params"], [893, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[894, 2, 1, "", "fit"], [894, 2, 1, "", "fit_transform"], [894, 2, 1, "", "get_feature_names_out"], [894, 2, 1, "", "get_metadata_routing"], [894, 2, 1, "", "get_params"], [894, 2, 1, "", "inverse_transform"], [894, 2, 1, "", "set_output"], [894, 2, 1, "", "set_params"], [894, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[896, 1, 1, "", "LabelPropagation"], [897, 1, 1, "", "LabelSpreading"], [898, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[896, 2, 1, "", "fit"], [896, 2, 1, "", "get_metadata_routing"], [896, 2, 1, "", "get_params"], [896, 2, 1, "", "predict"], [896, 2, 1, "", "predict_proba"], [896, 2, 1, "", "score"], [896, 2, 1, "", "set_params"], [896, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[897, 2, 1, "", "fit"], [897, 2, 1, "", "get_metadata_routing"], [897, 2, 1, "", "get_params"], [897, 2, 1, "", "predict"], [897, 2, 1, "", "predict_proba"], [897, 2, 1, "", "score"], [897, 2, 1, "", "set_params"], [897, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[898, 2, 1, "", "decision_function"], [898, 2, 1, "", "fit"], [898, 2, 1, "", "get_metadata_routing"], [898, 2, 1, "", "get_params"], [898, 2, 1, "", "predict"], [898, 2, 1, "", "predict_log_proba"], [898, 2, 1, "", "predict_proba"], [898, 2, 1, "", "score"], [898, 2, 1, "", "set_params"]], "sklearn.svm": [[901, 1, 1, "", "LinearSVC"], [902, 1, 1, "", "LinearSVR"], [903, 1, 1, "", "NuSVC"], [904, 1, 1, "", "NuSVR"], [905, 1, 1, "", "OneClassSVM"], [906, 1, 1, "", "SVC"], [907, 1, 1, "", "SVR"], [908, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[901, 2, 1, "", "decision_function"], [901, 2, 1, "", "densify"], [901, 2, 1, "", "fit"], [901, 2, 1, "", "get_metadata_routing"], [901, 2, 1, "", "get_params"], [901, 2, 1, "", "predict"], [901, 2, 1, "", "score"], [901, 2, 1, "", "set_fit_request"], [901, 2, 1, "", "set_params"], [901, 2, 1, "", "set_score_request"], [901, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[902, 2, 1, "", "fit"], [902, 2, 1, "", "get_metadata_routing"], [902, 2, 1, "", "get_params"], [902, 2, 1, "", "predict"], [902, 2, 1, "", "score"], [902, 2, 1, "", "set_fit_request"], [902, 2, 1, "", "set_params"], [902, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[903, 3, 1, "", "coef_"], [903, 2, 1, "", "decision_function"], [903, 2, 1, "", "fit"], [903, 2, 1, "", "get_metadata_routing"], [903, 2, 1, "", "get_params"], [903, 3, 1, "", "n_support_"], [903, 2, 1, "", "predict"], [903, 2, 1, "", "predict_log_proba"], [903, 2, 1, "", "predict_proba"], [903, 3, 1, "", "probA_"], [903, 3, 1, "", "probB_"], [903, 2, 1, "", "score"], [903, 2, 1, "", "set_fit_request"], [903, 2, 1, "", "set_params"], [903, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[904, 3, 1, "", "coef_"], [904, 2, 1, "", "fit"], [904, 2, 1, "", "get_metadata_routing"], [904, 2, 1, "", "get_params"], [904, 3, 1, "", "n_support_"], [904, 2, 1, "", "predict"], [904, 2, 1, "", "score"], [904, 2, 1, "", "set_fit_request"], [904, 2, 1, "", "set_params"], [904, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[905, 3, 1, "", "coef_"], [905, 2, 1, "", "decision_function"], [905, 2, 1, "", "fit"], [905, 2, 1, "", "fit_predict"], [905, 2, 1, "", "get_metadata_routing"], [905, 2, 1, "", "get_params"], [905, 3, 1, "", "n_support_"], [905, 2, 1, "", "predict"], [905, 2, 1, "", "score_samples"], [905, 2, 1, "", "set_fit_request"], [905, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[906, 3, 1, "", "coef_"], [906, 2, 1, "", "decision_function"], [906, 2, 1, "", "fit"], [906, 2, 1, "", "get_metadata_routing"], [906, 2, 1, "", "get_params"], [906, 3, 1, "", "n_support_"], [906, 2, 1, "", "predict"], [906, 2, 1, "", "predict_log_proba"], [906, 2, 1, "", "predict_proba"], [906, 3, 1, "", "probA_"], [906, 3, 1, "", "probB_"], [906, 2, 1, "", "score"], [906, 2, 1, "", "set_fit_request"], [906, 2, 1, "", "set_params"], [906, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[907, 3, 1, "", "coef_"], [907, 2, 1, "", "fit"], [907, 2, 1, "", "get_metadata_routing"], [907, 2, 1, "", "get_params"], [907, 3, 1, "", "n_support_"], [907, 2, 1, "", "predict"], [907, 2, 1, "", "score"], [907, 2, 1, "", "set_fit_request"], [907, 2, 1, "", "set_params"], [907, 2, 1, "", "set_score_request"]], "sklearn.tree": [[909, 1, 1, "", "DecisionTreeClassifier"], [910, 1, 1, "", "DecisionTreeRegressor"], [911, 1, 1, "", "ExtraTreeClassifier"], [912, 1, 1, "", "ExtraTreeRegressor"], [913, 4, 1, "", "export_graphviz"], [914, 4, 1, "", "export_text"], [915, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[909, 2, 1, "", "apply"], [909, 2, 1, "", "cost_complexity_pruning_path"], [909, 2, 1, "", "decision_path"], [909, 3, 1, "", "feature_importances_"], [909, 2, 1, "", "fit"], [909, 2, 1, "", "get_depth"], [909, 2, 1, "", "get_metadata_routing"], [909, 2, 1, "", "get_n_leaves"], [909, 2, 1, "", "get_params"], [909, 2, 1, "", "predict"], [909, 2, 1, "", "predict_log_proba"], [909, 2, 1, "", "predict_proba"], [909, 2, 1, "", "score"], [909, 2, 1, "", "set_fit_request"], [909, 2, 1, "", "set_params"], [909, 2, 1, "", "set_predict_proba_request"], [909, 2, 1, "", "set_predict_request"], [909, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[910, 2, 1, "", "apply"], [910, 2, 1, "", "cost_complexity_pruning_path"], [910, 2, 1, "", "decision_path"], [910, 3, 1, "", "feature_importances_"], [910, 2, 1, "", "fit"], [910, 2, 1, "", "get_depth"], [910, 2, 1, "", "get_metadata_routing"], [910, 2, 1, "", "get_n_leaves"], [910, 2, 1, "", "get_params"], [910, 2, 1, "", "predict"], [910, 2, 1, "", "score"], [910, 2, 1, "", "set_fit_request"], [910, 2, 1, "", "set_params"], [910, 2, 1, "", "set_predict_request"], [910, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[911, 2, 1, "", "apply"], [911, 2, 1, "", "cost_complexity_pruning_path"], [911, 2, 1, "", "decision_path"], [911, 3, 1, "", "feature_importances_"], [911, 2, 1, "", "fit"], [911, 2, 1, "", "get_depth"], [911, 2, 1, "", "get_metadata_routing"], [911, 2, 1, "", "get_n_leaves"], [911, 2, 1, "", "get_params"], [911, 2, 1, "", "predict"], [911, 2, 1, "", "predict_log_proba"], [911, 2, 1, "", "predict_proba"], [911, 2, 1, "", "score"], [911, 2, 1, "", "set_fit_request"], [911, 2, 1, "", "set_params"], [911, 2, 1, "", "set_predict_proba_request"], [911, 2, 1, "", "set_predict_request"], [911, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[912, 2, 1, "", "apply"], [912, 2, 1, "", "cost_complexity_pruning_path"], [912, 2, 1, "", "decision_path"], [912, 3, 1, "", "feature_importances_"], [912, 2, 1, "", "fit"], [912, 2, 1, "", "get_depth"], [912, 2, 1, "", "get_metadata_routing"], [912, 2, 1, "", "get_n_leaves"], [912, 2, 1, "", "get_params"], [912, 2, 1, "", "predict"], [912, 2, 1, "", "score"], [912, 2, 1, "", "set_fit_request"], [912, 2, 1, "", "set_params"], [912, 2, 1, "", "set_predict_request"], [912, 2, 1, "", "set_score_request"]], "sklearn.utils": [[916, 1, 1, "", "Bunch"], [917, 4, 1, "", "_safe_indexing"], [408, 0, 0, "-", "arrayfuncs"], [919, 4, 1, "", "as_float_array"], [920, 4, 1, "", "assert_all_finite"], [921, 4, 1, "", "check_X_y"], [922, 4, 1, "", "check_array"], [923, 4, 1, "", "check_consistent_length"], [924, 4, 1, "", "check_random_state"], [925, 4, 1, "", "check_scalar"], [408, 0, 0, "-", "class_weight"], [928, 4, 1, "", "deprecated"], [408, 0, 0, "-", "discovery"], [408, 0, 0, "-", "estimator_checks"], [934, 4, 1, "", "estimator_html_repr"], [408, 0, 0, "-", "extmath"], [941, 4, 1, "", "gen_batches"], [942, 4, 1, "", "gen_even_slices"], [408, 0, 0, "-", "graph"], [944, 4, 1, "", "indexable"], [408, 0, 0, "-", "metadata_routing"], [408, 0, 0, "-", "metaestimators"], [408, 0, 0, "-", "multiclass"], [954, 4, 1, "", "murmurhash3_32"], [408, 0, 0, "-", "parallel"], [957, 4, 1, "", "parallel_backend"], [408, 0, 0, "-", "random"], [959, 4, 1, "", "register_parallel_backend"], [960, 4, 1, "", "resample"], [961, 4, 1, "", "safe_mask"], [962, 4, 1, "", "safe_sqr"], [963, 4, 1, "", "shuffle"], [408, 0, 0, "-", "sparsefuncs"], [408, 0, 0, "-", "sparsefuncs_fast"], [408, 0, 0, "-", "validation"]], "sklearn.utils.Bunch": [[916, 2, 1, "", "clear"], [916, 2, 1, "", "copy"], [916, 2, 1, "", "fromkeys"], [916, 2, 1, "", "get"], [916, 2, 1, "", "items"], [916, 2, 1, "", "keys"], [916, 2, 1, "", "pop"], [916, 2, 1, "", "popitem"], [916, 2, 1, "", "setdefault"], [916, 2, 1, "", "update"], [916, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[918, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[926, 4, 1, "", "compute_class_weight"], [927, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.discovery": [[929, 4, 1, "", "all_displays"], [930, 4, 1, "", "all_estimators"], [931, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[932, 4, 1, "", "check_estimator"], [933, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[935, 4, 1, "", "density"], [936, 4, 1, "", "fast_logdet"], [937, 4, 1, "", "randomized_range_finder"], [938, 4, 1, "", "randomized_svd"], [939, 4, 1, "", "safe_sparse_dot"], [940, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[943, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[945, 1, 1, "", "MetadataRequest"], [946, 1, 1, "", "MetadataRouter"], [947, 1, 1, "", "MethodMapping"], [948, 4, 1, "", "get_routing_for_object"], [949, 4, 1, "", "process_routing"]], "sklearn.utils.metadata_routing.MetadataRequest": [[945, 2, 1, "", "consumes"]], "sklearn.utils.metadata_routing.MetadataRouter": [[946, 2, 1, "", "add"], [946, 2, 1, "", "add_self_request"], [946, 2, 1, "", "consumes"], [946, 2, 1, "", "route_params"], [946, 2, 1, "", "validate_metadata"]], "sklearn.utils.metadata_routing.MethodMapping": [[947, 2, 1, "", "add"], [947, 2, 1, "", "from_str"]], "sklearn.utils.metaestimators": [[950, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[951, 4, 1, "", "is_multilabel"], [952, 4, 1, "", "type_of_target"], [953, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[955, 1, 1, "", "Parallel"], [956, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[955, 2, 1, "", "dispatch_next"], [955, 2, 1, "", "dispatch_one_batch"], [955, 2, 1, "", "format"], [955, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[958, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[964, 4, 1, "", "incr_mean_variance_axis"], [965, 4, 1, "", "inplace_column_scale"], [966, 4, 1, "", "inplace_csr_column_scale"], [967, 4, 1, "", "inplace_row_scale"], [968, 4, 1, "", "inplace_swap_column"], [969, 4, 1, "", "inplace_swap_row"], [970, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[971, 4, 1, "", "inplace_csr_row_normalize_l1"], [972, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[973, 4, 1, "", "check_is_fitted"], [974, 4, 1, "", "check_memory"], [975, 4, 1, "", "check_symmetric"], [976, 4, 1, "", "column_or_1d"], [977, 4, 1, "", "has_fit_parameter"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"about": [0, 394], "u": 0, "histori": [0, 1029], "govern": [0, 397], "author": [0, 1031], "document": [0, 8, 20, 168, 319, 320, 352, 353, 354, 382, 397, 1009, 1010, 1013, 1031, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "team": [0, 381, 397], "contributor": [0, 381, 382, 397, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "experi": [0, 38, 381, 397], "commun": [0, 382, 397], "emeritu": 0, "core": [0, 8, 370, 381, 386, 388, 394, 397, 991], "develop": [0, 109, 111, 168, 237, 380, 383, 384, 385, 386, 389, 390, 391, 978, 1027, 1047], "cite": 0, "scikit": [0, 237, 257, 317, 318, 319, 320, 321, 322, 323, 324, 367, 368, 380, 383, 384, 386, 387, 394, 397, 399, 408, 1007, 1009, 1010, 1014, 1016, 1017, 1022, 1025], "learn": [0, 5, 12, 51, 96, 99, 152, 168, 170, 171, 172, 177, 221, 222, 223, 224, 236, 237, 257, 264, 295, 302, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 367, 368, 370, 378, 380, 382, 383, 384, 386, 387, 394, 397, 399, 408, 414, 416, 984, 986, 994, 1002, 1007, 1009, 1010, 1012, 1014, 1016, 1017, 1019, 1022, 1023, 1024, 1025, 1026], "artwork": 0, "fund": 0, "past": 0, "sponsor": 0, "sprint": 0, "donat": 0, "project": [0, 87, 101, 105, 234, 382, 384, 394, 408, 1001, 1006, 1009], "infrastructur": 0, "support": [0, 26, 123, 168, 195, 313, 317, 318, 319, 320, 322, 323, 324, 335, 338, 347, 394, 399, 400, 405, 407, 408, 416, 1004, 1005, 1013, 1023, 1037, 1048], "exampl": [3, 6, 9, 54, 60, 76, 89, 103, 111, 129, 160, 168, 197, 198, 205, 345, 349, 370, 376, 377, 387, 394, 398, 400, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 426, 429, 432, 433, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 462, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 482, 483, 484, 487, 488, 489, 490, 491, 492, 494, 495, 496, 498, 499, 500, 501, 502, 504, 506, 510, 511, 512, 513, 514, 515, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 581, 582, 584, 587, 588, 589, 590, 591, 593, 594, 597, 599, 600, 602, 604, 605, 606, 607, 608, 610, 611, 613, 614, 615, 617, 618, 619, 622, 623, 625, 627, 628, 630, 631, 632, 633, 634, 635, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 652, 653, 655, 656, 657, 658, 659, 662, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 684, 688, 689, 690, 691, 692, 693, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 709, 712, 713, 717, 718, 719, 726, 728, 731, 733, 734, 736, 737, 740, 741, 744, 745, 747, 748, 749, 751, 752, 754, 756, 760, 777, 778, 781, 783, 784, 785, 786, 787, 788, 789, 791, 792, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 854, 857, 858, 859, 860, 861, 862, 865, 866, 868, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 887, 890, 894, 895, 897, 898, 899, 901, 903, 904, 905, 906, 907, 908, 909, 910, 915, 916, 924, 933, 935, 942, 946, 947, 948, 949, 950, 963, 973, 978, 981, 983, 984, 985, 986, 988, 989, 990, 992, 993, 994, 995, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1016, 1022, 1023, 1024, 1028, 1031], "base": [3, 4, 86, 120, 121, 150, 168, 185, 236, 317, 318, 320, 322, 323, 324, 382, 408, 409, 413, 416, 418, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 985, 997, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "real": [3, 9, 76, 168, 377], "world": [3, 76, 168, 377], "dataset": [3, 4, 5, 8, 13, 25, 26, 28, 33, 45, 59, 63, 71, 86, 89, 90, 91, 92, 93, 96, 105, 113, 119, 122, 123, 133, 139, 140, 153, 155, 157, 158, 160, 162, 168, 170, 171, 172, 180, 183, 185, 190, 201, 203, 210, 219, 222, 223, 230, 235, 240, 241, 260, 268, 269, 280, 283, 314, 331, 332, 337, 344, 353, 359, 374, 375, 376, 377, 378, 379, 387, 394, 408, 419, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 1016, 1022, 1023, 1025, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "time": [4, 13, 16, 23, 29, 36, 69, 77, 84, 88, 94, 108, 110, 119, 137, 143, 151, 163, 167, 175, 178, 195, 220, 228, 235, 236, 245, 254, 278, 281, 284, 299, 305, 315, 325, 333, 334, 351, 353, 356, 363, 413, 1011], "relat": [4, 8, 376, 382, 997, 1009, 1038], "featur": [4, 13, 52, 55, 75, 101, 118, 120, 121, 123, 127, 130, 131, 144, 146, 148, 149, 150, 168, 173, 174, 177, 180, 195, 198, 219, 235, 241, 263, 304, 308, 309, 312, 313, 317, 319, 320, 343, 353, 354, 368, 370, 382, 386, 400, 408, 410, 416, 417, 418, 979, 997, 999, 1006, 1024, 1025, 1034, 1035, 1036, 1037, 1038], "engin": [4, 13, 173, 1009, 1014], "data": [4, 7, 9, 12, 18, 21, 25, 27, 35, 39, 48, 50, 51, 56, 58, 59, 64, 65, 67, 68, 71, 76, 79, 81, 83, 86, 87, 97, 98, 101, 102, 103, 104, 114, 120, 121, 124, 127, 129, 133, 146, 149, 150, 159, 161, 166, 170, 173, 174, 177, 181, 187, 194, 195, 205, 231, 236, 243, 252, 257, 259, 263, 268, 269, 271, 272, 275, 288, 292, 297, 304, 307, 311, 312, 313, 327, 340, 343, 347, 348, 354, 355, 364, 368, 370, 377, 387, 394, 396, 409, 410, 412, 413, 418, 999, 1003, 1014, 1016, 1019, 1022, 1024, 1025], "explor": 4, "bike": [4, 13, 172], "share": [4, 13, 172], "demand": [4, 13], "cross": [4, 85, 86, 139, 140, 149, 168, 190, 257, 258, 260, 261, 265, 267, 272, 314, 343, 364, 408, 412, 413, 978, 985, 1020], "valid": [4, 139, 140, 149, 190, 234, 257, 258, 260, 261, 265, 267, 272, 277, 343, 364, 368, 384, 391, 408, 413, 973, 974, 975, 976, 977, 978, 984, 985, 992, 1020], "gradient": [4, 119, 123, 124, 125, 126, 127, 128, 172, 201, 209, 215, 317, 318, 320, 322, 323, 416, 985, 1003], "boost": [4, 119, 123, 124, 125, 126, 127, 128, 172, 201, 317, 318, 320, 322, 323, 416], "naiv": [4, 13, 25, 26, 408, 991], "linear": [4, 26, 34, 35, 126, 153, 168, 171, 179, 180, 197, 201, 204, 207, 222, 223, 235, 318, 339, 344, 346, 347, 368, 391, 394, 408, 983, 985, 986, 987, 999, 1023], "regress": [4, 13, 74, 76, 86, 87, 114, 126, 127, 136, 153, 158, 159, 160, 161, 180, 181, 184, 190, 192, 193, 194, 197, 199, 201, 203, 216, 218, 219, 233, 236, 297, 347, 360, 361, 378, 408, 410, 416, 419, 980, 982, 985, 989, 990, 992, 993, 1003, 1004, 1005, 1023], "step": [4, 242, 395, 410], "categori": [4, 321, 323, 999], "trigonometr": 4, "period": [4, 202], "spline": [4, 202, 320, 999], "qualit": [4, 13], "analysi": [4, 34, 35, 61, 96, 102, 104, 107, 113, 126, 172, 185, 247, 264, 265, 272, 293, 294, 295, 353, 408, 412, 414, 983, 992, 1006, 1024, 1025], "impact": [4, 62, 1046, 1047, 1048], "model": [4, 7, 11, 13, 58, 76, 86, 97, 104, 119, 120, 121, 123, 124, 127, 129, 149, 150, 153, 158, 168, 171, 172, 173, 177, 179, 180, 185, 189, 190, 195, 201, 204, 219, 231, 236, 240, 241, 246, 248, 252, 253, 255, 261, 262, 264, 269, 283, 292, 297, 304, 312, 318, 320, 324, 344, 347, 353, 368, 384, 394, 395, 397, 403, 404, 408, 413, 978, 984, 985, 988, 989, 991, 993, 994, 1016, 1020, 1023, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "predict": [4, 10, 13, 25, 87, 114, 126, 136, 154, 170, 181, 201, 236, 258, 269, 327, 368, 394, 395, 412, 413, 419, 989, 1000, 1016, 1023], "pairwis": [4, 262, 408, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 987], "interact": [4, 172, 322, 416, 1023], "polynomi": [4, 177, 180, 181, 202, 344, 981, 985, 987, 999, 1023], "non": [4, 15, 96, 126, 196, 201, 205, 222, 267, 339, 346, 347, 414, 985, 999], "kernel": [4, 5, 101, 153, 158, 159, 161, 162, 168, 176, 177, 235, 236, 289, 290, 298, 319, 336, 339, 344, 347, 408, 414, 415, 419, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 981, 982, 987, 999, 1004, 1023], "conclud": [4, 226], "remark": [4, 58, 226, 234], "imag": [5, 48, 51, 54, 67, 99, 376, 408, 417, 583, 584, 585, 586, 587], "denois": [5, 99], "us": [5, 6, 12, 18, 49, 96, 97, 99, 130, 131, 133, 150, 158, 188, 204, 215, 217, 262, 266, 271, 283, 308, 347, 353, 354, 362, 364, 370, 383, 387, 388, 390, 394, 408, 413, 414, 416, 417, 418, 423, 426, 429, 432, 433, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 462, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 482, 483, 484, 487, 488, 489, 490, 491, 492, 494, 495, 496, 498, 499, 500, 501, 502, 504, 506, 510, 511, 512, 513, 514, 515, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 581, 582, 584, 587, 588, 589, 590, 591, 593, 594, 597, 599, 600, 602, 604, 605, 606, 607, 608, 610, 611, 613, 614, 615, 617, 618, 619, 622, 623, 625, 627, 628, 630, 631, 632, 633, 634, 635, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 652, 653, 655, 656, 657, 658, 659, 662, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 684, 688, 689, 690, 691, 692, 693, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 709, 712, 713, 717, 718, 719, 726, 728, 731, 733, 734, 736, 737, 740, 741, 744, 745, 747, 748, 749, 751, 752, 754, 756, 760, 777, 778, 781, 783, 784, 785, 786, 787, 788, 789, 791, 792, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 854, 857, 858, 859, 860, 861, 862, 865, 866, 868, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 887, 890, 894, 895, 897, 898, 899, 901, 903, 904, 905, 906, 907, 908, 909, 910, 915, 916, 924, 933, 935, 942, 946, 947, 948, 949, 950, 963, 973, 983, 985, 986, 989, 993, 1003, 1004, 1005, 1014, 1023, 1025, 1041], "pca": [5, 59, 74, 91, 96, 97, 100, 101, 102, 103, 104, 105, 312, 414, 541, 1006, 1024], "refer": [5, 11, 26, 28, 81, 82, 99, 113, 116, 173, 177, 185, 189, 262, 267, 268, 280, 298, 376, 377, 406, 407, 408, 409, 411, 412, 413, 414, 416, 417, 418, 419, 978, 979, 981, 982, 983, 985, 986, 987, 989, 990, 992, 993, 994, 995, 996, 997, 999, 1001, 1002, 1003, 1004], "load": [5, 7, 18, 51, 59, 91, 119, 121, 123, 127, 139, 150, 173, 194, 219, 223, 231, 235, 243, 263, 271, 272, 283, 288, 312, 313, 340, 343, 353, 354, 355, 375, 376, 387, 394, 417, 1016, 1024, 1025], "via": [5, 13, 54, 189, 190, 219, 416, 981], "openml": [5, 313, 317, 376], "basi": [5, 162, 419, 981, 985, 1023], "reconstruct": [5, 14, 99], "test": [5, 79, 145, 265, 268, 275, 353, 358, 380, 382, 384, 390, 391, 413, 1016, 1023, 1025], "face": [6, 51, 96, 239, 377, 1014, 1021], "recognit": [6, 377, 379, 1021], "eigenfac": [6, 96, 1021], "svm": [6, 142, 146, 147, 177, 215, 235, 320, 332, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 408, 901, 902, 903, 904, 905, 906, 907, 908, 985, 995, 1003, 1023, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "complex": [7, 232, 242, 261, 264, 329, 358, 368, 409, 985, 992, 993, 1003, 1004, 1005], "influenc": [7, 10, 368], "benchmark": [7, 10, 59, 353], "choos": [7, 978, 1016, 1018, 1020], "paramet": [7, 79, 126, 260, 319, 340, 348, 382, 384, 395, 396, 408, 410, 416, 978, 985, 989, 1004, 1016, 1020, 1025], "run": [7, 59, 266], "code": [7, 96, 106, 382, 384, 387, 388, 390, 414, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "plot": [7, 8, 10, 21, 25, 31, 35, 39, 42, 48, 50, 51, 58, 64, 65, 67, 68, 79, 83, 86, 91, 92, 93, 97, 98, 102, 114, 119, 122, 127, 129, 133, 134, 135, 136, 139, 149, 166, 172, 180, 181, 185, 193, 194, 195, 205, 206, 210, 223, 231, 235, 240, 241, 243, 252, 258, 259, 264, 266, 269, 271, 275, 277, 283, 292, 304, 313, 317, 319, 320, 327, 337, 338, 343, 344, 353, 359, 389, 408, 984, 996, 1028], "result": [7, 8, 21, 39, 48, 50, 51, 58, 59, 64, 65, 68, 79, 81, 83, 97, 98, 114, 119, 133, 136, 166, 177, 185, 206, 236, 240, 266, 275, 283, 292, 313, 347, 354, 364, 978], "conclus": [7, 13, 153, 185, 190, 280, 288, 314, 344], "out": [8, 125, 370, 390, 413, 978, 985, 991], "classif": [8, 27, 30, 31, 33, 34, 71, 92, 141, 154, 155, 156, 157, 161, 168, 217, 238, 265, 268, 269, 272, 283, 288, 296, 304, 317, 326, 331, 344, 353, 378, 408, 416, 419, 985, 989, 990, 992, 993, 1003, 1004, 1005, 1023, 1025], "text": [8, 168, 232, 263, 331, 352, 353, 354, 355, 377, 408, 417, 588, 589, 590, 591, 1025], "reuter": 8, "routin": [8, 369, 391], "main": [8, 201], "outlier": [9, 183, 218, 230, 240, 291, 292, 307, 408, 985, 995, 999], "detect": [9, 230, 240, 259, 291, 292, 989, 995, 1004], "set": [9, 76, 79, 103, 133, 166, 205, 269, 340, 358, 394, 408, 413, 985, 1016, 1022, 1023, 1025], "first": [9, 38, 382], "second": [9, 38], "latenc": [10, 368], "helper": [10, 162, 223, 391], "function": [10, 35, 162, 191, 205, 206, 211, 223, 257, 275, 319, 343, 355, 391, 408, 413, 416, 419, 981, 985, 989, 1004, 1023], "bulk": [10, 368], "atom": [10, 368], "speed": [10, 388], "variou": [10, 53, 208, 227], "regressor": [10, 114, 126, 180, 205, 314, 317, 320, 408, 416], "n_featur": 10, "throughput": [10, 368], "speci": [11, 298], "distribut": [11, 219, 222, 298, 311, 399, 986, 999], "visual": [12, 59, 107, 124, 231, 236, 243, 257, 303, 318, 340, 408, 409, 410, 989, 1028], "stock": [12, 1021], "market": [12, 1021], "structur": [12, 40, 48, 68, 161, 329, 362, 1021], "retriev": [12, 317], "from": [12, 99, 150, 173, 313, 317, 369, 376, 380, 394, 408, 417, 989, 1016, 1023, 1024, 1025, 1041], "internet": 12, "graph": [12, 317, 391, 394, 408, 409, 417, 943], "cluster": [12, 20, 22, 37, 38, 39, 40, 41, 42, 45, 46, 48, 50, 53, 56, 57, 59, 61, 64, 65, 66, 67, 68, 96, 168, 321, 323, 354, 378, 406, 408, 409, 414, 420, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 714, 715, 989, 1024, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "affin": [12, 39, 409, 987], "propag": [12, 39, 327, 328, 329, 409, 1002], "embed": [12, 53, 222, 223, 234, 295, 416, 986], "2d": [12, 53, 98, 105, 172], "space": [12, 101, 410, 978, 986], "lag": 13, "seri": [13, 195, 413], "forecast": [13, 158], "analyz": [13, 978], "gener": [13, 21, 25, 35, 39, 48, 50, 56, 58, 64, 65, 67, 68, 79, 81, 83, 92, 93, 97, 98, 99, 120, 129, 146, 149, 153, 159, 160, 162, 168, 179, 180, 181, 185, 195, 201, 203, 236, 252, 259, 275, 292, 297, 304, 318, 327, 347, 348, 364, 378, 382, 396, 408, 414, 416, 985, 999, 1010, 1020], "panda": [13, 322, 387, 394], "evalu": [13, 38, 59, 62, 82, 201, 240, 263, 266, 304, 313, 354, 395, 404, 406, 409, 413, 416, 978, 984, 989, 1025], "next": [13, 395], "hour": 13, "proper": [13, 158], "uncertainti": 13, "quantil": [13, 126, 203, 320, 321, 985], "A": [13, 21, 22, 48, 59, 64, 201, 320, 381, 388, 403, 413, 1019, 1022], "look": [13, 236, 347], "compress": [14, 54, 368], "sens": 14, "tomographi": 14, "l1": [14, 185, 192, 194, 217, 348, 418], "prior": [14, 162, 247], "lasso": [14, 185, 186, 187, 188, 189, 190, 195, 318, 652, 985], "topic": 15, "extract": [15, 75, 99, 219, 263, 354, 368, 370, 408, 417, 1025], "neg": [15, 96, 150, 196, 414, 985], "matrix": [15, 18, 161, 182, 256, 408, 409, 414, 989], "factor": [15, 96, 104, 107, 291, 292, 414, 995], "latent": [15, 86, 414], "dirichlet": [15, 414, 988], "alloc": [15, 414], "comput": [16, 18, 23, 29, 36, 39, 48, 50, 64, 65, 68, 69, 77, 79, 84, 88, 94, 108, 110, 119, 137, 143, 151, 163, 167, 175, 178, 194, 206, 220, 228, 245, 254, 275, 278, 281, 284, 299, 305, 315, 325, 333, 334, 351, 356, 363, 367, 368, 408, 409, 410, 413, 996, 1011], "libsvm": [17, 376], "gui": 17, "wikipedia": 18, "princip": [18, 87, 102, 414, 1006, 1024], "eigenvector": 18, "download": [18, 133, 166, 376], "alreadi": 18, "disk": 18, "redirect": 18, "file": [18, 399, 417, 1025], "adjac": 18, "singular": [18, 414], "vector": [18, 26, 54, 168, 335, 338, 347, 353, 355, 408, 417, 1004, 1023, 1024], "random": [18, 96, 117, 119, 131, 132, 173, 174, 234, 243, 268, 270, 324, 364, 384, 391, 408, 413, 414, 416, 958, 978, 985, 1001, 1006], "svd": [18, 96, 414], "central": 18, "score": [18, 86, 119, 139, 149, 166, 180, 252, 261, 268, 269, 343, 400, 409, 413, 984, 989, 1004, 1020], "biclust": [19, 20, 21, 168, 378, 406, 408], "spectral": [20, 21, 22, 67, 222, 406, 409, 986], "co": [20, 22, 406], "algorithm": [20, 21, 22, 39, 45, 50, 56, 64, 65, 66, 222, 230, 388, 394, 983, 985, 990, 992, 993, 997, 1005, 1023], "demo": [21, 22, 39, 48, 50, 56, 59, 64, 66], "sampl": [21, 39, 56, 64, 79, 97, 98, 146, 182, 214, 236, 263, 275, 297, 318, 347, 350, 376, 391, 396, 408, 409, 416, 985], "fit": [21, 27, 58, 97, 104, 120, 121, 126, 127, 158, 180, 181, 182, 195, 198, 203, 207, 269, 283, 292, 297, 314, 347, 364, 384, 395, 400, 416, 991, 995, 1016], "spectralbiclust": [21, 451], "calibr": [24, 25, 26, 27, 28, 126, 168, 201, 407, 408, 437, 438, 439, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "probabl": [25, 26, 27, 31, 135, 156, 407, 408, 416, 1004], "classifi": [25, 26, 28, 32, 111, 136, 184, 242, 259, 283, 288, 317, 332, 337, 340, 353, 362, 407, 408, 416, 983, 992, 1023, 1025], "synthet": [25, 76, 180, 185, 259, 314, 387], "gaussian": [25, 26, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 168, 246, 247, 248, 251, 252, 253, 307, 408, 419, 988, 991, 999, 1001], "bay": [25, 26, 408, 991], "curv": [26, 28, 181, 236, 243, 253, 259, 264, 269, 271, 277, 407, 984], "summari": [26, 124, 190, 354, 355, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "3": [27, 184, 323, 1025, 1039, 1040, 1045, 1047], "class": [27, 38, 113, 115, 135, 184, 210, 215, 265, 269, 271, 320, 339, 342, 396, 408, 413, 416, 417, 989, 992, 995, 1003, 1004, 1031, 1032], "compar": [27, 43, 45, 63, 79, 86, 119, 132, 146, 177, 180, 187, 203, 208, 230, 236, 262, 270, 293, 302, 307, 313, 394], "comparison": [28, 32, 35, 44, 65, 81, 105, 123, 124, 145, 153, 222, 223, 236, 262, 273, 280, 355, 409, 985], "recogn": 33, "hand": 33, "written": 33, "digit": [33, 53, 59, 90, 140, 141, 223, 304, 327, 328, 379, 1022], "normal": [34, 177, 201, 307, 311, 408, 873, 888, 989, 999], "ledoit": [34, 80, 411], "wolf": [34, 80, 411], "oa": [34, 79, 80, 422, 475], "discrimin": [34, 35, 408, 983], "quadrat": [35, 419, 983], "covari": [35, 78, 79, 81, 82, 83, 168, 249, 408, 411, 422, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 983, 1039, 1043, 1044, 1045, 1047, 1048], "ellipsoid": [35, 248], "lda": [35, 105, 414, 983], "qda": [35, 983], "adjust": 38, "chanc": 38, "perform": [38, 44, 265, 312, 319, 321, 327, 354, 368, 382, 383, 409, 413, 1025], "defin": [38, 48, 59, 68, 222, 257, 259, 260, 355, 989], "list": [38, 1013], "metric": [38, 41, 126, 266, 405, 408, 409, 413, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 978, 987, 989, 992, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "fix": [38, 386, 1031, 1034, 1035, 1036, 1037, 1038, 1044], "ground": [38, 180], "truth": [38, 180], "label": [38, 269, 327, 328, 329, 377, 378, 408, 409, 413, 416, 989, 1000, 1002], "grow": 38, "number": [38, 61, 123, 149, 274, 368, 384, 978, 979], "vari": [38, 301, 330, 409], "agglom": [40, 41, 53, 1024], "without": [40, 293, 353], "differ": [41, 45, 63, 79, 162, 172, 307, 310, 313, 337, 344, 384, 394, 400, 409, 985, 1023], "hierarch": [42, 48, 63, 68, 323, 409, 1024], "dendrogram": 42, "birch": [43, 409, 442], "minibatchkmean": [43, 65, 96, 449], "bisect": [44, 409], "k": [44, 46, 49, 58, 59, 60, 62, 65, 68, 86, 288, 312, 354, 409, 413, 989, 992, 999, 1023, 1024], "mean": [44, 46, 49, 58, 59, 60, 62, 64, 65, 120, 121, 166, 173, 205, 354, 409, 989, 999, 1024], "regular": [44, 79, 128, 171, 194, 205, 206, 301, 348, 985, 993], "toi": [45, 63, 230, 379], "segment": [47, 67], "pictur": 47, "greek": 47, "coin": [47, 48], "region": [47, 262], "ward": [48, 68, 409, 1024], "an": [48, 60, 111, 166, 182, 190, 295, 317, 321, 394, 417, 978, 995, 1016, 1022, 1023], "color": 49, "quantiz": [49, 54, 1024], "dbscan": [50, 409, 420, 444], "onlin": [51, 208, 320, 321, 1003], "dictionari": [51, 96, 99, 106, 414], "part": [51, 418], "agglomer": [52, 55, 1006, 1024], "origin": [54, 101, 268, 295, 307], "encod": [54, 123, 313, 314, 323, 999, 1000], "strategi": [54, 260, 280, 302, 310, 323, 370, 408, 409, 989], "memori": [54, 368, 388, 390, 409], "footprint": 54, "v": [55, 68, 79, 80, 82, 87, 101, 149, 172, 173, 183, 193, 219, 265, 271, 275, 276, 358, 409, 416, 979, 999, 1016], "univari": [55, 86, 146, 343, 418, 979], "select": [55, 61, 73, 104, 139, 144, 146, 149, 150, 168, 189, 190, 195, 252, 255, 343, 394, 400, 404, 408, 413, 418, 978, 985, 1020, 1037], "hdbscan": [56, 323, 409, 446], "scale": [56, 171, 222, 225, 312, 348, 370, 892, 986, 995, 999, 1006], "invari": [56, 265], "multi": [56, 113, 132, 172, 195, 210, 225, 239, 266, 269, 301, 361, 388, 408, 985, 986, 989, 993, 1004, 1005], "hyperparamet": [56, 158, 159, 263, 270, 280, 617], "robust": [56, 81, 82, 180, 204, 207, 364, 408, 411, 978, 985], "min_cluster_s": 56, "min_sampl": 56, "dbscan_clust": 56, "induct": 57, "demonstr": [58, 266, 310, 327], "assumpt": 58, "possibl": [58, 387], "solut": 58, "final": [58, 153], "handwritten": [59, 223, 379], "our": [59, 257, 260, 382], "reduc": [59, 368], "initi": [60, 62, 250], "silhouett": [61, 409], "kmean": [61, 65, 318, 447], "empir": [62, 82, 234, 411], "linkag": [63, 409], "method": [63, 75, 86, 112, 153, 168, 222, 224, 250, 279, 282, 396, 408, 409, 981, 995, 996, 1024], "shift": [64, 409], "meanshift": [64, 448], "establish": [65, 177], "pariti": 65, "between": [65, 273, 985], "optic": [66, 379, 409, 450], "four": 67, "circl": 67, "two": [67, 115, 187, 241, 262], "unstructur": 68, "we": 68, "ar": [68, 320, 394], "nearest": [68, 168, 285, 286, 287, 288, 293, 296, 297, 317, 408, 979, 992, 1023], "neighbor": [68, 168, 222, 285, 286, 287, 288, 293, 297, 312, 317, 408, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 979, 986, 992, 1023, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "10": [68, 1031], "pipelin": [70, 71, 73, 74, 133, 147, 168, 171, 232, 237, 242, 263, 313, 343, 384, 394, 395, 408, 410, 418, 860, 861, 862, 863, 1006, 1021, 1025, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "composit": [70, 168, 408, 410, 978], "estim": [70, 78, 79, 80, 81, 82, 83, 109, 111, 116, 123, 125, 132, 159, 166, 168, 180, 204, 207, 232, 237, 239, 240, 251, 270, 280, 289, 290, 298, 317, 318, 319, 322, 324, 364, 384, 394, 395, 396, 405, 408, 410, 411, 413, 415, 416, 978, 979, 983, 985, 989, 1004, 1009, 1018, 1020, 1022, 1032, 1039, 1040, 1041], "column": [71, 72, 242], "transform": [71, 72, 73, 76, 86, 118, 131, 242, 319, 320, 321, 374, 394, 395, 410, 412, 413, 992, 999, 1000, 1001, 1024], "heterogen": [71, 410], "sourc": [71, 97, 380], "20": [71, 353, 377, 1025, 1039], "newsgroup": [71, 353, 377, 1025], "creat": [71, 102, 104, 113, 205, 231, 269, 314, 343, 344, 394], "mix": 72, "type": [72, 247, 384, 396, 409, 1016], "dimension": [73, 222, 225, 242, 294, 312, 354, 983, 986, 992, 1006, 1023], "reduct": [73, 222, 226, 242, 294, 312, 354, 983, 992, 1006], "gridsearchcv": [73, 139, 266, 416, 798], "illustr": [73, 157, 162, 295, 419], "cach": [73, 287, 410], "within": 73, "chain": [74, 242, 283, 395, 410], "logist": [74, 184, 191, 192, 193, 194, 216, 217, 985, 1023], "concaten": 75, "multipl": [75, 242, 266, 364, 389, 413, 978, 979, 989, 1039, 1040], "effect": [76, 170, 227, 307, 312, 330, 358, 992], "target": [76, 160, 219, 313, 314, 394, 396, 408, 410, 412, 990, 999, 1000], "shrinkag": [79, 411, 416, 983, 1023], "ledoitwolf": [79, 473], "max": [79, 989], "likelihood": [79, 180, 181, 265, 989, 994], "approach": [79, 190, 262], "mahalanobi": [81, 992], "distanc": [81, 408, 992], "relev": [81, 185, 985], "minimum": [82, 411], "determin": [82, 185, 411, 985, 989], "spars": [83, 96, 106, 171, 185, 187, 216, 317, 353, 354, 391, 408, 411, 414, 418, 999, 1001, 1003, 1048], "invers": [83, 411, 1001], "decomposit": [85, 86, 95, 96, 116, 168, 378, 408, 412, 414, 421, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 1024, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "variabl": [86, 170, 171, 369, 394, 408, 1023], "canon": [86, 412], "symmetr": 86, "pl": 86, "scatter": [86, 91], "multivari": [86, 979], "respons": [86, 397], "pls2": 86, "pls1": 86, "cca": [86, 482], "mode": [86, 368, 380], "b": 86, "deflat": 86, "compon": [87, 96, 102, 293, 294, 295, 414, 992, 1006, 1024], "partial": [87, 170, 172, 241, 996], "least": [87, 126, 190, 196, 199, 985], "squar": [87, 126, 162, 196, 199, 205, 419, 981, 985, 987, 989], "The": [87, 90, 91, 170, 171, 201, 227, 234, 260, 269, 280, 377, 386, 413, 417, 988, 989, 1001, 1023, 1024], "one": [87, 123, 241, 985, 989], "power": [87, 201], "iri": [91, 103, 105, 122, 155, 210, 332, 337, 359, 379, 419, 1022], "represent": [91, 172, 232, 318, 368, 384, 417, 1024], "randomli": [92, 93], "multilabel": [93, 238, 283, 378, 391, 408, 989, 990, 1016], "prepar": [96, 114, 124, 177, 222, 271, 272, 312, 340, 386], "nmf": [96, 321, 414, 540], "independ": [96, 414, 1024], "fastica": [96, 97, 98, 421, 533], "minibatchsparsepca": [96, 414, 539], "center": [96, 999], "fa": [96, 104], "posit": [96, 320], "blind": 97, "separ": [97, 213, 341, 342], "ica": [97, 414, 1024], "point": [98, 295], "cloud": 98, "distort": 99, "displai": [99, 206, 231, 232, 242, 322, 323, 324, 390, 1028, 1047], "patch": [99, 417], "noisi": [99, 160, 205], "them": [99, 381], "increment": [100, 370, 414], "kernelpca": [101, 535], "figur": 102, "probabilist": [104, 154, 414, 419], "precomput": [106, 182, 317, 414], "rotat": 107, "pattern": 107, "__sklearn_is_fitted__": 111, "api": [111, 243, 244, 317, 320, 322, 369, 384, 389, 396, 400, 405, 408, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1048], "custom": [111, 260, 336, 417, 999, 1004], "implement": [111, 187, 394, 409, 989, 992, 1003, 1004], "simpl": [111, 153, 237, 290, 388, 1022], "ensembl": [112, 118, 122, 168, 321, 408, 416, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "adaboost": [113, 114, 115, 416], "decis": [113, 114, 122, 129, 134, 168, 235, 288, 323, 332, 344, 357, 358, 359, 360, 361, 362, 394, 397, 408, 1005], "tree": [113, 114, 118, 120, 121, 122, 131, 168, 173, 201, 317, 322, 323, 324, 357, 358, 359, 360, 361, 362, 394, 408, 416, 418, 909, 910, 911, 912, 913, 914, 915, 992, 997, 1005, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "train": [113, 114, 124, 127, 129, 136, 149, 205, 231, 236, 240, 241, 243, 252, 275, 280, 304, 313, 314, 319, 330, 340, 344, 353, 358, 359, 362, 413, 992, 1002, 1016, 1023, 1025], "adaboostclassifi": [113, 553], "converg": 113, "error": [113, 117, 124, 126, 139, 180, 205, 259, 275, 390, 399, 985, 989], "weight": [113, 180, 182, 214, 303, 318, 350, 400, 408, 416, 417], "weak": [113, 416], "learner": [113, 416], "decisiontre": 114, "singl": [116, 133, 219, 231, 378, 409, 979], "versu": [116, 215, 267, 332, 368], "bag": [116, 125, 353, 416, 417, 978, 1025], "bia": 116, "varianc": [116, 199, 418, 989, 999], "oob": 117, "forest": [117, 119, 120, 121, 132, 173, 174, 240, 243, 324, 377, 416, 995], "histogram": [119, 318, 320, 322, 415, 416], "import": [120, 121, 127, 150, 173, 174, 235, 280, 312, 317, 416, 997], "decreas": [120, 121, 173], "impur": [120, 121, 173, 358, 997], "permut": [120, 173, 174, 268, 317, 413, 997], "pixel": 121, "parallel": [121, 369, 380, 388, 408, 409, 416, 955, 956, 978], "mdi": [121, 173], "surfac": [122, 235, 359], "categor": [123, 313, 319, 324, 394, 416, 991, 999], "am": [123, 240], "hous": [123, 240, 377], "drop": 123, "hot": 123, "ordin": 123, "nativ": [123, 313, 317, 319, 324], "limit": [123, 153, 368, 399, 403, 417], "split": [123, 319, 364, 413], "earli": [124, 209], "stop": [124, 209, 417, 1003], "calcul": [124, 135], "interv": 126, "confid": 126, "tune": [126, 260, 263, 319, 978, 1025], "hyper": [126, 260, 319, 408, 978], "preprocess": [127, 133, 168, 171, 172, 240, 242, 306, 323, 355, 364, 394, 408, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 999, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "devianc": [127, 989], "isolationforest": [129, 563], "discret": [129, 161, 308, 309, 999], "boundari": [129, 134, 288, 332, 344], "path": [129, 188, 194, 206, 362, 399], "length": [129, 399], "monoton": [130, 324, 416], "constraint": [130, 322, 324, 409, 416], "name": [130, 320, 394, 410], "specifi": [130, 394, 978], "hash": [131, 391, 417], "total": [131, 358, 416], "output": [132, 239, 307, 322, 324, 361, 1005, 1023], "meta": [132, 280, 319, 408, 416], "combin": [133, 231], "predictor": 133, "stack": [133, 317, 416], "make": [133, 136, 166, 382, 386, 397], "measur": [133, 265, 409, 989], "votingclassifi": [134, 135, 416, 569], "individu": [136, 172, 319, 996], "vote": [136, 416], "tutori": [138, 168, 1008, 1017, 1019, 1025], "exercis": [138, 139, 140, 141, 142, 168, 1020, 1023, 1025], "diabet": [139, 241, 379, 1023], "appli": 139, "line": [139, 156], "show": [139, 271], "std": [139, 180], "bonu": 139, "how": [139, 364, 382, 388, 394], "much": 139, "can": [139, 394], "you": [139, 394], "trust": 139, "alpha": [139, 358], "f": [145, 989], "mutual": [145, 409], "inform": [145, 166, 189, 190, 386, 408, 409, 978, 985], "anova": [147, 343], "recurs": [148, 149, 418], "elimin": [148, 149, 418, 978], "sequenti": [150, 418], "coeffici": [150, 171, 180, 205, 206, 409, 989], "toler": 150, "valu": [150, 164, 165, 166, 168, 227, 237, 317, 323, 324, 362, 382, 414, 416, 979, 989, 997, 999, 1005], "process": [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 168, 171, 364, 397, 408, 419, 988, 1019], "machin": [152, 168, 170, 171, 172, 304, 335, 390, 408, 994, 1004, 1016, 1023], "ridg": [153, 181, 183, 199, 205, 206, 236, 314, 408, 672, 982, 985], "gpc": [154, 155, 156, 157, 419], "iso": [156, 269], "xor": [157, 419], "co2": 158, "level": [158, 159, 369, 409, 416], "mona": 158, "loa": 158, "gpr": [158, 159, 419], "build": [158, 166, 380, 382, 390, 410, 1025], "design": 158, "extrapol": 158, "interpret": [158, 171, 205, 240, 283, 414, 416], "abil": 159, "nois": [159, 160, 181], "optimis": 159, "basic": [160, 219, 395, 411, 419], "introductori": 160, "free": 160, "sequenc": [161, 394], "similar": [161, 987, 989], "under": [161, 394, 1027, 1047], "posterior": 162, "cookbook": 162, "radial": [162, 419, 981, 1023], "ration": [162, 419], "quadradt": 162, "exp": [162, 419], "sine": [162, 253, 419], "dot": [162, 419], "product": [162, 219, 390, 394, 419, 621], "mat\u00e9rn": [162, 419], "miss": [164, 165, 166, 168, 317, 323, 324, 416, 979, 999, 1005], "imput": [164, 165, 166, 168, 317, 408, 627, 628, 629, 630, 979, 999, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "variant": 165, "iterativeimput": [165, 627, 979], "befor": [166, 386], "replac": 166, "0": [166, 317, 318, 319, 320, 1005, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "knn": [166, 317], "iter": [166, 274, 413, 978], "releas": [168, 316, 317, 318, 319, 320, 321, 322, 323, 324, 386, 399, 1029, 1037], "highlight": [168, 316, 317, 318, 319, 320, 321, 322, 323, 324, 1031, 1034, 1035, 1038, 1039], "mixtur": [168, 246, 247, 248, 251, 252, 253, 408, 796, 797, 988, 1039, 1040, 1044, 1045, 1047], "inspect": [168, 169, 398, 408, 631, 632, 633, 634, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "approxim": [168, 176, 177, 235, 285, 319, 408, 411, 981], "manifold": [168, 221, 222, 223, 224, 378, 408, 688, 689, 690, 691, 692, 693, 694, 695, 696, 986, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "miscellan": [168, 229, 408, 1039, 1040, 1041, 1042, 1043, 1044, 1047], "multiclass": [168, 216, 271, 279, 280, 317, 391, 407, 408, 829, 830, 831, 951, 952, 953, 989, 990, 1016, 1023, 1040, 1043, 1044, 1045], "multioutput": [168, 282, 408, 832, 833, 834, 835, 990, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048], "neural": [168, 172, 300, 408, 993, 994], "network": [168, 172, 300, 408, 993, 994], "semi": [168, 326, 327, 331, 332, 408, 1002], "supervis": [168, 326, 327, 331, 332, 408, 993, 1002, 1012, 1023], "work": [168, 352, 368, 381, 394, 408, 1025], "failur": [170, 978], "infer": 170, "causal": [170, 171], "simul": 170, "hourli": 170, "wage": [170, 171], "descript": 170, "incom": 170, "fulli": 170, "observ": [170, 1023, 1024], "lesson": [170, 171], "common": [171, 364, 396, 405, 417, 989], "pitfal": [171, 364], "matter": 171, "check": [171, 264, 317, 390, 405, 1039, 1040, 1041], "problem": [171, 414, 1004, 1005, 1016, 1021, 1023, 1024], "correl": [171, 174, 412, 989, 997], "numer": [171, 369, 384], "wrong": [171, 394], "depend": [172, 237, 241, 380, 996, 1031, 1044, 1045], "condit": [172, 319, 996], "expect": [172, 319, 996], "preprocessor": 172, "1": [172, 198, 320, 321, 322, 323, 324, 394, 1025, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "wai": [172, 382, 394], "layer": [172, 301, 993], "perceptron": [172, 301, 668, 985, 993], "ic": [172, 996], "pdp": 172, "3d": 172, "accuraci": [173, 235, 353, 358, 989], "": [173, 312, 314, 385, 394, 416, 989], "multicollinear": 174, "breast": [174, 379], "cancer": [174, 379], "handl": [174, 408, 979], "scalabl": [177, 264, 318], "partit": 177, "baselin": [177, 201], "bayesian": [180, 181, 247, 262, 408, 985, 988], "recov": 180, "true": [180, 181], "margin": [180, 181, 213, 341, 345], "log": [180, 181, 989], "expans": 180, "sinusoid": 181, "cubic": 181, "l": 181, "elast": [182, 186, 985], "net": [182, 186, 985], "gram": 182, "huberregressor": [183, 649], "strong": 183, "signal": [185, 414, 1024], "automat": [185, 395, 985], "ard": [185, 985], "elasticnet": [185, 318, 646], "dens": 187, "lar": [188, 650, 985], "criteria": [189, 394, 985, 1005], "aic": [190, 985], "bic": [190, 252, 985], "criterion": [190, 319, 978, 1003], "coordin": 190, "descent": [190, 209, 215, 985, 1003], "angl": [190, 985], "penalti": [192, 212, 348], "sparsiti": [192, 198, 417, 1023], "multinomi": [193, 217, 985, 991], "One": [193, 215, 271, 320, 339, 413, 995, 1003], "rest": [193, 271], "joint": 195, "task": [195, 408, 985, 1009], "onli": [198, 218, 1042, 1044], "2": [198, 322, 1025, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "ordinari": [199, 985], "orthogon": [200, 985], "match": [200, 985], "pursuit": [200, 985], "poisson": [201, 219, 318, 319, 989], "loss": [201, 211, 318, 321, 323, 416, 989], "french": 201, "motor": 201, "third": [201, 237, 399], "parti": [201, 237, 399], "liabil": 201, "claim": [201, 219], "constant": [201, 979], "rank": [201, 408, 989], "takeawai": 201, "interpol": 202, "quantileregressor": [203, 670], "linearregress": [203, 657], "ransac": [204, 985], "l2": [205, 348], "purpos": [205, 355, 1010], "thi": [205, 1010], "solver": [208, 414, 985], "stochast": [209, 215, 222, 302, 985, 986, 994, 1003], "sgd": [210, 211, 212, 213, 214, 985, 1003], "convex": 211, "maximum": [213, 341, 994], "hyperplan": [213, 341, 342], "20newgroup": 216, "mnist": [217, 303], "theil": [218, 985], "sen": [218, 985], "y": [218, 394, 412, 1000, 1002], "direct": 218, "x": 218, "tweedi": [219, 989], "insur": 219, "definit": [219, 304, 996, 1041], "frequenc": [219, 1025], "sever": [219, 224], "gamma": [219, 323, 989], "pure": 219, "premium": 219, "tweedieregressor": [219, 680], "local": [222, 223, 291, 292, 986, 995], "isomap": [222, 223, 688, 986], "multidimension": 222, "t": [222, 227, 986], "techniqu": 223, "sphere": 224, "swiss": 226, "roll": [226, 384], "And": [226, 397], "hole": 226, "sne": [227, 986], "perplex": 227, "shape": [227, 1016], "anomali": 230, "object": [231, 257, 384, 394, 408, 978, 989, 1022, 1028], "confusionmatrixdisplai": [231, 697], "roccurvedisplai": [231, 702], "precisionrecalldisplai": [231, 700], "compact": 232, "rich": [232, 318], "html": [232, 384], "isoton": [233, 407, 408, 635, 636, 637, 980, 1039, 1040, 1041, 1043, 1045, 1046], "johnson": [234, 1001], "lindenstrauss": [234, 1001], "bound": 234, "theoret": 234, "explicit": 235, "map": [235, 311, 999], "rbf": [235, 339, 340, 344, 419, 622, 987, 1004, 1023], "python": [235, 369, 388, 403, 1008, 1009, 1037], "packag": [235, 1009, 1043], "svr": [236, 347, 907, 1004], "construct": 236, "metadata": [237, 323, 324, 353, 396, 400, 408, 1048], "rout": [237, 323, 324, 396, 400, 408, 1048], "router": 237, "consum": 237, "deprec": [237, 382, 408, 928, 1041], "default": [237, 292, 382], "chang": [237, 382, 397, 1014, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "complet": [239, 409], "kddcup99": 240, "sa": 240, "covertyp": [240, 377], "cardiotocographi": 240, "ablat": 240, "studi": 240, "advanc": [241, 400], "With": [241, 1025], "togeth": [241, 271, 1021, 1024], "grid": [242, 260, 262, 270, 273, 978, 1020, 1025], "search": [242, 260, 262, 270, 273, 280, 395, 978, 1020, 1025], "over": 242, "roc": [243, 259, 271, 272, 317, 989], "svc": [243, 344, 348, 906, 1004], "introduc": 244, "set_output": [244, 322, 324, 384], "concentr": 247, "variat": [247, 988], "gmm": [249, 250], "densiti": [251, 289, 290, 298, 323, 415, 935, 1004], "best": [252, 383, 394], "confus": [256, 409, 989], "behavior": 257, "indic": 257, "mani": [257, 322, 369, 394], "cv": [257, 364], "tradeoff": [259, 989], "det": [259, 989], "refit": [260, 1016], "balanc": [261, 989], "statist": [262, 1009, 1019, 1022], "frequentist": 262, "practic": [262, 364, 383, 387, 986, 993, 1003, 1004, 1005], "equival": 262, "all": [262, 271, 321, 399, 1021, 1046, 1047, 1048], "take": 262, "home": 262, "messag": 262, "ratio": [265, 989], "pre": [265, 364, 395], "post": [265, 358], "respect": 265, "preval": 265, "cross_val_scor": [266, 823], "nest": [267, 410, 1020], "see": [267, 410], "also": [267, 386, 410], "signific": 268, "precis": [269, 989], "recal": [269, 989], "In": 269, "binari": [269, 283, 985, 989], "averag": [269, 271, 409, 416, 989], "micro": [269, 271], "each": [269, 274, 353, 978], "f1": 269, "receiv": [271, 272, 989], "oper": [271, 272, 381, 391, 408, 419, 989], "characterist": [271, 272, 989], "specif": [271, 380, 384, 403, 978, 1009, 1010], "ovr": 271, "macro": 271, "ovo": 271, "success": [273, 274, 319, 978], "halv": [273, 274, 319, 978], "candid": [274, 978], "amount": [274, 978], "resourc": [274, 369, 382, 978, 1008, 1013], "underfit": 276, "overfit": 276, "overview": [280, 389, 409, 995], "yeast": 280, "uci": 280, "logisticregress": [283, 658], "wrap": 283, "onevsrestclassifi": [283, 830, 990], "tsne": [285, 692], "1d": 290, "novelti": [291, 995, 1004], "lof": [291, 292], "neighborhood": [293, 294, 295, 992], "centroid": [296, 992], "mlpclassifi": [302, 858], "mlp": 303, "restrict": [304, 994], "boltzmann": [304, 994], "scaler": 307, "standardscal": [307, 881], "minmaxscal": [307, 871], "maxabsscal": [307, 870], "robustscal": [307, 879], "powertransform": [307, 877], "quantiletransform": [307, 878], "uniform": [307, 999], "kbinsdiscret": [308, 310, 866], "continu": [308, 382], "rescal": 312, "other": [313, 376, 394, 416, 1009, 1031], "intern": 314, "22": [317, 1041], "new": [317, 319, 320, 322, 323, 382, 394, 1008, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "prune": [317, 358, 1005], "datafram": [317, 324, 394], "compat": [317, 382, 384, 405, 408], "auc": [317, 706], "now": [317, 320, 1041], "23": [318, 1042], "stabil": 318, "improv": [318, 319, 320, 321, 322, 381, 382, 1034, 1035], "24": [319, 1043], "histgradientboost": [319, 324], "self": [319, 330, 1002], "sequentialfeatureselector": [319, 602], "polynomialcountsketch": [319, 640], "decisiontreeregressor": [319, 910], "keyword": [320, 1042, 1044], "argument": [320, 384, 1042, 1044], "more": [320, 394, 403, 993], "flexibl": [320, 979], "stabl": 320, "histgradientboostingregressor": [321, 562], "get_feature_names_out": 321, "avail": [321, 978, 1028], "group": [321, 323, 413, 1014, 1024], "infrequ": [321, 323, 999], "onehotencod": [321, 874], "minibatchnmf": [321, 538], "version": [321, 376, 380, 386, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "bisectingkmean": [321, 443], "divid": 321, "enhanc": [322, 397, 1009, 1034, 1035, 1036, 1037, 1038], "faster": [322, 416], "parser": [322, 376], "fetch_openml": [322, 496], "experiment": [322, 386, 405, 408, 579, 580, 1047], "arrai": [322, 362, 391, 405, 408, 1016, 1048], "lineardiscriminantanalysi": [322, 549], "effici": [322, 391], "targetencod": [323, 882], "model_select": [323, 408, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "validationcurvedisplai": [323, 820], "ordinalencod": [323, 875], "4": [324, 1031, 1039, 1048], "dtype": 324, "polar": 324, "add": [324, 394], "enrich": 324, "most": 327, "uncertain": 327, "activ": 328, "threshold": 330, "linearsvc": [338, 901], "unbalanc": [342, 1004], "some": 343, "plai": 343, "percentil": 343, "sigmoid": [344, 407, 987, 1023], "case": [348, 985, 989], "tie": 349, "break": 349, "word": [353, 417, 1025], "strip": 353, "quantifi": [354, 989], "qualiti": [354, 989], "tfidfvector": [354, 355, 591], "lsa": 354, "top": [354, 989], "term": [354, 396, 417], "per": 354, "hashingvector": [354, 589], "featurehash": [355, 582], "dictvector": [355, 581], "special": 355, "cost": [358, 1005], "leav": [358, 413, 985], "understand": 362, "what": [362, 394], "i": [362, 387, 394, 413, 1014], "here": [362, 1025], "recommend": [364, 377, 1009], "inconsist": 364, "leakag": 364, "dure": 364, "avoid": [364, 410], "control": [364, 416, 993], "none": 364, "randomst": 364, "instanc": [364, 370], "repeat": [364, 410, 413], "call": [364, 381], "splitter": [364, 408], "subtleti": 364, "get": [364, 394, 395], "reproduc": [364, 387], "across": 364, "execut": [364, 394], "configur": [368, 369], "overhead": 368, "input": [368, 384, 405, 408, 409, 999], "tip": [368, 383, 390, 978, 986, 993, 1003, 1004, 1005], "trick": [368, 388, 390, 417], "algebra": [368, 391], "librari": [368, 369], "reshap": [368, 1022], "link": [368, 376, 989], "manag": [369, 399], "higher": 369, "joblib": [369, 388], "lower": 369, "openmp": [369, 383], "numpi": [369, 387], "scipi": [369, 1048], "oversubscript": 369, "spawn": 369, "too": 369, "thread": 369, "switch": 369, "environ": 369, "sklearn_assume_finit": 369, "sklearn_working_memori": 369, "sklearn_se": 369, "sklearn_tests_global_random_se": 369, "sklearn_skip_network_test": 369, "sklearn_run_float32_test": 369, "sklearn_enable_debug_cython_direct": 369, "sklearn_build_enable_debug_symbol": 369, "sklearn_pairwise_dist_chunk_s": 369, "sklearn_doc_build_warnings_as_error": 369, "computation": 370, "bigger": 370, "stream": 370, "note": [370, 405, 413], "tabl": [371, 394], "Of": 371, "content": [371, 394, 1016], "util": [375, 387, 391, 408, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 1025, 1028, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "svmlight": 376, "format": [376, 387, 394, 403, 990], "org": [376, 386, 1014], "repositori": 376, "arff": 376, "extern": [376, 1008, 1016, 1031, 1040], "olivetti": 377, "consider": 377, "wild": 377, "rcv1": 377, "kddcup": 377, "99": 377, "california": 377, "plant": 379, "linnerrud": 379, "wine": 379, "wisconsin": 379, "diagnost": 379, "instal": [380, 399], "nightli": 380, "runtim": 380, "tag": [380, 382, 384], "edit": 380, "platform": [380, 390, 399], "instruct": 380, "window": [380, 399], "maco": 380, "compil": [380, 388], "conda": 380, "forg": 380, "homebrew": 380, "linux": [380, 394, 399], "system": 380, "freebsd": 380, "altern": [380, 978], "bug": [381, 382, 386, 1013, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "triag": 381, "issu": [381, 382], "curat": 381, "fruit": 381, "discuss": 381, "pr": [381, 386], "help": [381, 382, 394], "review": [381, 382, 390, 1025], "member": 381, "close": 381, "tough": 381, "typic": 381, "workflow": [381, 382], "contribut": [382, 394], "submit": 382, "report": [382, 387, 989], "request": [382, 386, 390, 394], "good": [382, 387], "video": [382, 1008], "git": 382, "pull": [382, 386, 390, 394], "checklist": [382, 386], "integr": 382, "ci": 382, "stall": 382, "unclaim": 382, "easi": 382, "want": 382, "github": 382, "action": 382, "coverag": [382, 390, 989], "write": 382, "matplotlib": 382, "monitor": 382, "tracker": [382, 1013], "maintain": [382, 386, 397, 403], "backward": 382, "guidelin": [382, 384], "read": 382, "exist": 382, "cython": [383, 388, 390], "convent": [383, 1016], "knowledg": 383, "eas": 383, "instanti": 384, "attribut": [384, 396, 978], "option": 384, "univers": 384, "your": [384, 387, 989], "own": [384, 394, 989], "templat": 384, "baseestim": [384, 423], "mixin": 384, "get_param": 384, "set_param": 384, "init": 384, "clone": [384, 434], "check_is_fit": [384, 973], "assert": 384, "guid": [385, 1027], "major": [386, 416, 1039, 1040], "minor": 386, "known": [386, 1039, 1040], "merg": 386, "web": 386, "site": 386, "craft": 387, "minim": [387, 1005, 1044, 1045], "provid": 387, "fail": 387, "comment": 387, "boil": 387, "down": 387, "script": 387, "someth": 387, "small": 387, "do": [387, 394], "NOT": 387, "unless": 387, "extrem": [387, 416], "necessari": 387, "markdown": 387, "make_regress": [387, 524], "make_classif": [387, 515], "make_blob": [387, 512], "optim": [388, 408, 978], "c": 388, "profil": 388, "usag": [388, 394, 400, 405, 407, 410, 416, 417, 985], "extens": [388, 399], "yep": 388, "gperftool": 388, "debugg": 388, "gdb": 388, "gprof": 388, "valgrind": [388, 390], "callgrind": 388, "kcachegrind": 388, "warm": 388, "restart": 388, "ax": 389, "saniti": 390, "preserv": 390, "fold": [390, 413], "unfold": 390, "outdat": 390, "diff": 390, "remot": 390, "track": [390, 410], "branch": 390, "pytest": 390, "alias": 390, "flag": 390, "standard": [390, 999], "repli": 390, "debug": 390, "arm64": 390, "x86_64": 390, "tool": [391, 394, 405, 408], "matric": [391, 408, 999], "warn": [391, 408], "except": [391, 408, 571, 572, 573, 574, 575, 576, 577, 578, 1043, 1047], "dispatch": 392, "frequent": 394, "ask": 394, "question": [394, 1013], "lot": 394, "peopl": [394, 1031, 1032, 1033, 1034], "pronounc": 394, "why": [394, 416], "pypi": 394, "deep": 394, "reinforc": 394, "Will": 394, "graphic": [394, 994], "did": 394, "remov": [394, 418, 999, 1031], "hmm": 394, "gpu": 394, "need": 394, "doe": 394, "directli": 394, "plan": 394, "so": 394, "my": 394, "ani": 394, "attent": 394, "inclus": 394, "includ": 394, "should": 394, "save": 394, "export": 394, "deploi": 394, "bunch": [394, 916], "usabl": 394, "deal": [394, 408], "string": 394, "sometim": 394, "crash": 394, "freez": 394, "n_job": 394, "osx": [394, 399], "job": 394, "than": 394, "random_st": 394, "entir": 394, "start": 395, "processor": 395, "glossari": 396, "element": 396, "concept": [396, 985], "properti": 396, "role": 397, "technic": 397, "committe": 397, "propos": 397, "slep": 397, "latest": 399, "alpin": 399, "arch": 399, "debian": 399, "ubuntu": 399, "fedora": 399, "netbsd": 399, "macport": 399, "mac": 399, "anaconda": 399, "enthought": 399, "deploy": 399, "intel": 399, "winpython": 399, "troubleshoot": 399, "caus": 399, "unweight": 400, "interfac": [400, 408], "statu": 400, "persist": 403, "serial": 403, "secur": 403, "skop": 403, "interoper": [403, 1009], "pytorch": 405, "mp": 405, "devic": 405, "mathemat": [406, 408, 409, 416, 981, 983, 992, 993, 996, 1003, 1004, 1005], "formul": [406, 409, 416, 983, 992, 993, 1003, 1004, 1005], "sklearn": [408, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "compos": [408, 464, 465, 466, 467, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "cross_decomposit": [408, 482, 483, 484, 485, 1041, 1043, 1045, 1047], "loader": 408, "discriminant_analysi": [408, 549, 550, 1039, 1040, 1043, 1045, 1046, 1047], "dummi": [408, 551, 552, 989, 1039, 1040, 1041, 1044, 1045], "feature_extract": [408, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "feature_select": [408, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "gaussian_process": [408, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "kernel_approxim": [408, 638, 639, 640, 641, 642, 1041, 1043, 1044, 1045, 1046, 1047], "kernel_ridg": [408, 643, 1048], "linear_model": [408, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "classic": 408, "glm": 408, "naive_bay": [408, 836, 837, 838, 839, 840, 1039, 1041, 1042, 1043, 1044, 1046, 1047], "neural_network": [408, 857, 858, 859, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "random_project": [408, 893, 894, 895, 1045], "semi_supervis": [408, 896, 897, 898, 1041, 1042, 1043, 1047], "discoveri": [408, 929, 930, 931], "checker": 408, "recent": 408, "low": [409, 416, 418], "mini": [409, 414], "batch": [409, 414], "assign": 409, "featureagglomer": [409, 445], "hierarchi": 409, "ad": 409, "connect": [409, 417, 1024], "consumpt": 409, "larg": [409, 417], "size": [409, 416], "reachabl": 409, "rand": 409, "index": [409, 944], "advantag": 409, "drawback": 409, "homogen": 409, "fowlk": 409, "mallow": 409, "calinski": 409, "harabasz": 409, "davi": 409, "bouldin": 409, "conting": 409, "pair": 409, "access": 410, "featureunion": [410, 860], "columntransform": [410, 464], "shrunk": 411, "oracl": 411, "plscanon": [412, 483], "plssvd": [412, 485], "plsregress": [412, 484], "held": 413, "cross_valid": [413, 824], "obtain": 413, "d": [413, 992], "loo": 413, "p": [413, 1014], "lpo": 413, "shuffl": [413, 963], "stratif": 413, "stratifi": 413, "stratifiedgroupkfold": [413, 816], "predefin": [413, 989], "decompos": 414, "exact": 414, "sparsepca": [414, 543], "kpca": 414, "choic": [414, 992], "truncat": 414, "semant": 414, "nnmf": 414, "frobeniu": 414, "norm": 414, "beta": 414, "diverg": 414, "gradientboostingclassifi": [416, 559], "histgradientboostingclassifi": [416, 561], "gradientboostingregressor": [416, 560], "addit": [416, 981], "rate": 416, "subsampl": 416, "hard": 416, "soft": 416, "dict": 417, "tf": 417, "idf": 417, "decod": 417, "applic": [417, 1024], "corpu": 417, "selectfrommodel": [418, 597], "biclustermixin": 424, "classnameprefixfeaturesoutmixin": 425, "classifiermixin": 426, "clustermixin": 427, "densitymixin": 428, "metaestimatormixin": 429, "onetoonefeaturemixin": 430, "outliermixin": 431, "regressormixin": 432, "transformermixin": 433, "is_classifi": 435, "is_regressor": 436, "calibratedclassifiercv": 437, "calibrationdisplai": 438, "from_estim": [438, 631, 632, 697, 698, 700, 701, 702, 804, 820], "calibration_curv": 439, "affinitypropag": 440, "agglomerativeclust": 441, "spectralclust": 452, "spectralcoclust": 453, "affinity_propag": 454, "cluster_optics_dbscan": 455, "cluster_optics_xi": 456, "compute_optics_graph": 457, "estimate_bandwidth": 458, "k_mean": 459, "kmeans_plusplu": 460, "mean_shift": 461, "spectral_clust": 462, "ward_tre": 463, "transformedtargetregressor": 465, "make_column_selector": 466, "make_column_transform": 467, "config_context": 468, "ellipticenvelop": 469, "empiricalcovari": 470, "graphicallasso": 471, "graphicallassocv": 472, "mincovdet": 474, "shrunkcovari": 476, "empirical_covari": 477, "graphical_lasso": 478, "ledoit_wolf": 479, "ledoit_wolf_shrinkag": 480, "shrunk_covari": 481, "clear_data_hom": 486, "dump_svmlight_fil": 487, "fetch_20newsgroup": 488, "fetch_20newsgroups_vector": 489, "fetch_california_h": 490, "fetch_covtyp": 491, "fetch_kddcup99": 492, "fetch_lfw_pair": 493, "fetch_lfw_peopl": 494, "fetch_olivetti_fac": 495, "fetch_rcv1": 497, "fetch_species_distribut": 498, "get_data_hom": 499, "load_breast_canc": 500, "load_diabet": 501, "load_digit": 502, "load_fil": 503, "load_iri": 504, "load_linnerud": 505, "load_sample_imag": [506, 507], "load_svmlight_fil": [508, 509], "load_win": 510, "make_biclust": 511, "make_checkerboard": 513, "make_circl": 514, "make_friedman1": 516, "make_friedman2": 517, "make_friedman3": 518, "make_gaussian_quantil": 519, "make_hastie_10_2": 520, "make_low_rank_matrix": 521, "make_moon": 522, "make_multilabel_classif": 523, "make_s_curv": 525, "make_sparse_coded_sign": 526, "make_sparse_spd_matrix": 527, "make_sparse_uncorrel": 528, "make_spd_matrix": 529, "make_swiss_rol": 530, "dictionarylearn": 531, "factoranalysi": 532, "incrementalpca": 534, "latentdirichletalloc": 536, "minibatchdictionarylearn": 537, "sparsecod": 542, "truncatedsvd": 544, "dict_learn": 545, "dict_learning_onlin": 546, "non_negative_factor": 547, "sparse_encod": 548, "quadraticdiscriminantanalysi": 550, "dummyclassifi": 551, "dummyregressor": 552, "adaboostregressor": 554, "baggingclassifi": 555, "baggingregressor": 556, "extratreesclassifi": 557, "extratreesregressor": 558, "randomforestclassifi": 564, "randomforestregressor": 565, "randomtreesembed": 566, "stackingclassifi": 567, "stackingregressor": 568, "votingregressor": 570, "convergencewarn": 571, "dataconversionwarn": 572, "datadimensionalitywarn": 573, "efficiencywarn": 574, "fitfailedwarn": 575, "inconsistentversionwarn": 576, "notfittederror": 577, "undefinedmetricwarn": 578, "enable_halving_search_cv": 579, "enable_iterative_imput": 580, "patchextractor": 583, "extract_patches_2d": 584, "grid_to_graph": 585, "img_to_graph": 586, "reconstruct_from_patches_2d": 587, "countvector": 588, "tfidftransform": 590, "genericunivariateselect": 592, "rfe": 593, "rfecv": 594, "selectfdr": 595, "selectfpr": 596, "selectfw": 598, "selectkbest": 599, "selectpercentil": 600, "selectormixin": 601, "variancethreshold": 603, "chi2": 604, "f_classif": 605, "f_regress": 606, "mutual_info_classif": 607, "mutual_info_regress": 608, "r_regress": 609, "gaussianprocessclassifi": 610, "gaussianprocessregressor": 611, "compoundkernel": 612, "constantkernel": 613, "dotproduct": 614, "expsinesquar": 615, "exponenti": 616, "matern": 619, "pairwisekernel": 620, "rationalquadrat": 623, "sum": 624, "whitekernel": 625, "get_config": 626, "knnimput": 628, "missingind": 629, "simpleimput": 630, "decisionboundarydisplai": 631, "partialdependencedisplai": 632, "partial_depend": 633, "permutation_import": 634, "isotonicregress": 635, "check_increas": 636, "isotonic_regress": 637, "additivechi2sampl": 638, "nystroem": [639, 981], "rbfsampler": 641, "skewedchi2sampl": 642, "kernelridg": 643, "ardregress": 644, "bayesianridg": 645, "elasticnetcv": 647, "gammaregressor": 648, "larscv": 651, "lassocv": 653, "lassolar": 654, "lassolarscv": 655, "lassolars": 656, "logisticregressioncv": 659, "multitaskelasticnet": 660, "multitaskelasticnetcv": 661, "multitasklasso": 662, "multitasklassocv": 663, "orthogonalmatchingpursuit": 664, "orthogonalmatchingpursuitcv": 665, "passiveaggressiveclassifi": 666, "passiveaggressiveregressor": 667, "poissonregressor": 669, "ransacregressor": 671, "ridgecv": 673, "ridgeclassifi": 674, "ridgeclassifiercv": 675, "sgdclassifi": 676, "sgdoneclasssvm": 677, "sgdregressor": 678, "theilsenregressor": 679, "enet_path": 681, "lars_path": 682, "lars_path_gram": 683, "lasso_path": 684, "orthogonal_mp": 685, "orthogonal_mp_gram": 686, "ridge_regress": 687, "locallylinearembed": 689, "md": [690, 986], "spectralembed": 691, "locally_linear_embed": 693, "smacof": 694, "spectral_embed": 695, "trustworthi": 696, "from_predict": [697, 700, 701, 702], "detcurvedisplai": 698, "distancemetr": 699, "predictionerrordisplai": 701, "accuracy_scor": 703, "adjusted_mutual_info_scor": 704, "adjusted_rand_scor": 705, "average_precision_scor": 707, "balanced_accuracy_scor": 708, "brier_score_loss": 709, "calinski_harabasz_scor": 710, "check_scor": 711, "class_likelihood_ratio": 712, "classification_report": 713, "contingency_matrix": 714, "pair_confusion_matrix": 715, "cohen_kappa_scor": 716, "completeness_scor": 717, "confusion_matrix": 718, "consensus_scor": 719, "coverage_error": 720, "d2_absolute_error_scor": 721, "d2_pinball_scor": 722, "d2_tweedie_scor": 723, "davies_bouldin_scor": 724, "dcg_score": 725, "det_curv": 726, "explained_variance_scor": 727, "f1_score": 728, "fbeta_scor": 729, "fowlkes_mallows_scor": 730, "get_scor": 731, "get_scorer_nam": 732, "hamming_loss": 733, "hinge_loss": 734, "homogeneity_completeness_v_measur": 735, "homogeneity_scor": 736, "jaccard_scor": 737, "label_ranking_average_precision_scor": 738, "label_ranking_loss": 739, "log_loss": 740, "make_scor": 741, "matthews_corrcoef": 742, "max_error": 743, "mean_absolute_error": 744, "mean_absolute_percentage_error": 745, "mean_gamma_devi": 746, "mean_pinball_loss": 747, "mean_poisson_devi": 748, "mean_squared_error": 749, "mean_squared_log_error": 750, "mean_tweedie_devi": 751, "median_absolute_error": 752, "multilabel_confusion_matrix": 753, "mutual_info_scor": 754, "ndcg_score": 755, "normalized_mutual_info_scor": 756, "additive_chi2_kernel": 757, "chi2_kernel": 758, "cosine_dist": 759, "cosine_similar": 760, "distance_metr": 761, "euclidean_dist": 762, "haversine_dist": 763, "kernel_metr": 764, "laplacian_kernel": 765, "linear_kernel": 766, "manhattan_dist": 767, "nan_euclidean_dist": 768, "paired_cosine_dist": 769, "paired_dist": 770, "paired_euclidean_dist": 771, "paired_manhattan_dist": 772, "pairwise_kernel": 773, "polynomial_kernel": 774, "rbf_kernel": 775, "sigmoid_kernel": 776, "pairwise_dist": 777, "pairwise_distances_argmin": 778, "pairwise_distances_argmin_min": 779, "pairwise_distances_chunk": 780, "precision_recall_curv": 781, "precision_recall_fscore_support": 782, "precision_scor": 783, "r2_score": 784, "rand_scor": 785, "recall_scor": 786, "roc_auc_scor": 787, "roc_curv": 788, "root_mean_squared_error": 789, "root_mean_squared_log_error": 790, "silhouette_sampl": 791, "silhouette_scor": 792, "top_k_accuracy_scor": 793, "v_measure_scor": 794, "zero_one_loss": 795, "bayesiangaussianmixtur": 796, "gaussianmixtur": 797, "groupkfold": 799, "groupshufflesplit": 800, "halvinggridsearchcv": 801, "halvingrandomsearchcv": 802, "kfold": 803, "learningcurvedisplai": 804, "leaveonegroupout": 805, "leaveoneout": 806, "leavepgroupsout": 807, "leavepout": 808, "parametergrid": 809, "parametersampl": 810, "predefinedsplit": 811, "randomizedsearchcv": 812, "repeatedkfold": 813, "repeatedstratifiedkfold": 814, "shufflesplit": 815, "stratifiedkfold": 817, "stratifiedshufflesplit": 818, "timeseriessplit": 819, "check_cv": 821, "cross_val_predict": 822, "learning_curv": 825, "permutation_test_scor": 826, "train_test_split": 827, "validation_curv": 828, "onevsoneclassifi": [829, 990], "outputcodeclassifi": [831, 990], "classifierchain": [832, 990], "multioutputclassifi": [833, 990], "multioutputregressor": [834, 990], "regressorchain": [835, 990], "bernoullinb": 836, "categoricalnb": 837, "complementnb": 838, "gaussiannb": 839, "multinomialnb": 840, "balltre": [841, 992], "kdtree": [842, 992], "kneighborsclassifi": 843, "kneighborsregressor": 844, "kneighborstransform": 845, "kerneldens": 846, "localoutlierfactor": 847, "nearestcentroid": 848, "nearestneighbor": 849, "neighborhoodcomponentsanalysi": 850, "radiusneighborsclassifi": 851, "radiusneighborsregressor": 852, "radiusneighborstransform": 853, "kneighbors_graph": 854, "radius_neighbors_graph": 855, "sort_graph_by_row_valu": 856, "bernoullirbm": 857, "mlpregressor": 859, "make_pipelin": 862, "make_union": 863, "binar": [864, 884, 999, 1000], "functiontransform": 865, "kernelcenter": 867, "labelbinar": [868, 1000], "labelencod": 869, "multilabelbinar": [872, 1000], "polynomialfeatur": 876, "splinetransform": 880, "add_dummy_featur": 883, "label_binar": 885, "maxabs_scal": 886, "minmax_scal": 887, "power_transform": 889, "quantile_transform": 890, "robust_scal": 891, "gaussianrandomproject": 893, "sparserandomproject": 894, "johnson_lindenstrauss_min_dim": 895, "labelpropag": 896, "labelspread": 897, "selftrainingclassifi": 898, "set_config": 899, "show_vers": 900, "linearsvr": 902, "nusvc": 903, "nusvr": 904, "oneclasssvm": 905, "l1_min_c": 908, "decisiontreeclassifi": 909, "extratreeclassifi": 911, "extratreeregressor": 912, "export_graphviz": 913, "export_text": 914, "plot_tre": 915, "_safe_index": 917, "arrayfunc": 918, "min_po": 918, "as_float_arrai": 919, "assert_all_finit": 920, "check_x_i": 921, "check_arrai": 922, "check_consistent_length": 923, "check_random_st": 924, "check_scalar": 925, "class_weight": [926, 927], "compute_class_weight": 926, "compute_sample_weight": 927, "all_displai": 929, "all_estim": 930, "all_funct": 931, "estimator_check": [932, 933], "check_estim": 932, "parametrize_with_check": 933, "estimator_html_repr": 934, "extmath": [935, 936, 937, 938, 939, 940], "fast_logdet": 936, "randomized_range_find": 937, "randomized_svd": 938, "safe_sparse_dot": 939, "weighted_mod": 940, "gen_batch": 941, "gen_even_slic": 942, "single_source_shortest_path_length": 943, "metadata_rout": [945, 946, 947, 948, 949], "metadatarequest": 945, "metadatarout": 946, "methodmap": 947, "get_routing_for_object": 948, "process_rout": 949, "metaestim": 950, "available_if": 950, "is_multilabel": 951, "type_of_target": 952, "unique_label": 953, "murmurhash3_32": 954, "delai": 956, "parallel_backend": 957, "sample_without_replac": 958, "register_parallel_backend": 959, "resampl": 960, "safe_mask": 961, "safe_sqr": 962, "sparsefunc": [964, 965, 966, 967, 968, 969, 970, 1040], "incr_mean_variance_axi": 964, "inplace_column_scal": 965, "inplace_csr_column_scal": 966, "inplace_row_scal": 967, "inplace_swap_column": 968, "inplace_swap_row": 969, "mean_variance_axi": 970, "sparsefuncs_fast": [971, 972], "inplace_csr_row_normalize_l1": 971, "inplace_csr_row_normalize_l2": 972, "check_memori": 974, "check_symmetr": 975, "column_or_1d": 976, "has_fit_paramet": 977, "exhaust": 978, "min_resourc": 978, "aggress": [978, 985], "cv_results_": 978, "brute": [978, 992], "forc": [978, 992], "keep": 979, "mark": 979, "nan": 979, "chi": [981, 987], "skew": 981, "tensor": 981, "sketch": 981, "detail": [981, 1003, 1004], "omp": 985, "passiv": 985, "scenario": 985, "trade": 985, "off": 985, "which": 985, "consensu": 985, "median": [985, 989], "huber": 985, "extend": 985, "introduct": [986, 1016], "modifi": 986, "hessian": 986, "eigenmap": 986, "tangent": 986, "align": 986, "cosin": 987, "laplacian": 987, "pro": 988, "con": 988, "rule": 989, "cohen": 989, "kappa": 989, "ham": 989, "jaccard": 989, "hing": 989, "matthew": 989, "zero": 989, "brier": 989, "discount": 989, "cumul": 989, "gain": 989, "r\u00b2": 989, "absolut": 989, "logarithm": 989, "percentag": 989, "explain": 989, "pinbal": 989, "d\u00b2": 989, "complement": 991, "bernoulli": [991, 994], "unsupervis": [992, 994, 1006, 1024, 1026], "find": 992, "ball": 992, "leaf_siz": 992, "shrunken": 992, "warm_start": 993, "parametr": 994, "up": 995, "ellipt": 995, "envelop": 995, "isol": 995, "outlin": 997, "mislead": 997, "strongli": 997, "rang": 999, "whiten": 999, "bin": 999, "lemma": 1001, "unlabel": 1002, "entri": 1002, "id3": 1005, "c4": 1005, "5": [1005, 1031], "c5": 1005, "cart": 1005, "welcom": 1007, "talk": 1008, "scientif": [1008, 1019], "framework": 1009, "domain": 1009, "translat": 1009, "roadmap": 1010, "statement": 1010, "2018": 1010, "architectur": 1010, "goal": 1010, "subpackag": 1010, "mail": 1013, "user": [1013, 1027], "gitter": 1013, "who": 1014, "j": 1014, "morgan": 1014, "spotifi": 1014, "inria": 1014, "betawork": 1014, "hug": 1014, "evernot": 1014, "t\u00e9l\u00e9com": 1014, "paristech": 1014, "book": 1014, "com": 1014, "aweb": 1014, "yhat": 1014, "rangespan": 1014, "birchbox": 1014, "bestofmedia": 1014, "phimeca": 1014, "howaboutw": 1014, "peerindex": 1014, "datarobot": 1014, "okcupid": 1014, "love": 1014, "publica": 1014, "machinali": 1014, "solido": 1014, "infonea": 1014, "dataiku": 1014, "otto": 1014, "zopa": 1014, "mar": 1014, "bnp": 1014, "pariba": 1014, "cardif": 1014, "section": 1016, "cast": 1016, "updat": [1016, 1041], "right": 1018, "put": 1021, "open": 1021, "ship": 1022, "would": 1022, "high": 1023, "solv": [1023, 1024], "vocabulari": 1023, "curs": 1023, "iris": 1023, "same": 1023, "seek": 1024, "constrain": 1024, "inverse_transform": 1024, "setup": 1025, "token": 1025, "occurr": 1025, "languag": 1025, "identif": 1025, "sentiment": 1025, "movi": 1025, "cli": 1025, "where": 1025, "12": 1031, "changelog": [1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "11": 1031, "9": 1031, "8": 1031, "7": 1031, "6": [1031, 1037], "modul": [1031, 1039, 1040, 1046, 1047, 1048], "misc": 1031, "earlier": 1031, "13": 1032, "14": 1033, "15": 1034, "16": 1035, "17": 1036, "18": 1037, "last": 1037, "19": 1038, "21": 1040, "legend": [1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "post1": 1041, "websit": 1041, "clear": 1041, "public": 1041, "futurewarn": 1041, "enforc": [1042, 1044]}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"About us": [[0, "about-us"]], "History": [[0, "history"]], "Governance": [[0, "governance"]], "Authors": [[0, "authors"], [1031, "authors"], [1031, "id20"]], "Documentation Team": [[0, "documentation-team"]], "Contributor Experience Team": [[0, "contributor-experience-team"], [397, "contributor-experience-team"]], "Communication Team": [[0, "communication-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Artwork": [[0, "artwork"]], "Funding": [[0, "funding"]], "Past Sponsors": [[0, "past-sponsors"]], "Sprints": [[0, "sprints"]], "Donating to the project": [[0, "donating-to-the-project"]], "Infrastructure support": [[0, "infrastructure-support"]], "Examples based on real world datasets": [[3, "examples-based-on-real-world-datasets"], [168, "examples-based-on-real-world-datasets"]], "Time-related feature engineering": [[4, "time-related-feature-engineering"]], "Data exploration on the Bike Sharing Demand dataset": [[4, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Time-based cross-validation": [[4, "time-based-cross-validation"]], "Gradient Boosting": [[4, "gradient-boosting"]], "Naive linear regression": [[4, "naive-linear-regression"]], "Time-steps as categories": [[4, "time-steps-as-categories"]], "Trigonometric features": [[4, "trigonometric-features"]], "Periodic spline features": [[4, "periodic-spline-features"]], "Qualitative analysis of the impact of features on linear model predictions": [[4, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Modeling pairwise interactions with splines and polynomial features": [[4, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling non-linear feature interactions with kernels": [[4, "modeling-non-linear-feature-interactions-with-kernels"]], "Concluding remarks": [[4, "concluding-remarks"], [226, "concluding-remarks"]], "Image denoising using kernel PCA": [[5, "image-denoising-using-kernel-pca"]], "References": [[5, null], [11, "references"], [26, "references"], [28, "references"], [82, "references"], [116, "references"], [177, "references"], [185, "references"], [189, null], [262, null], [280, "references"], [298, "references"], [377, null], [377, null], [377, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [417, null], [419, "references"], [979, "references"], [979, null], [996, null], [999, null], [999, null], [1002, null], [1002, null]], "Load the dataset via OpenML": [[5, "load-the-dataset-via-openml"]], "Learn the PCA basis": [[5, "learn-the-pca-basis"]], "Reconstruct and denoise test images": [[5, "reconstruct-and-denoise-test-images"]], "Faces recognition example using eigenfaces and SVMs": [[6, "faces-recognition-example-using-eigenfaces-and-svms"]], "Model Complexity Influence": [[7, "model-complexity-influence"]], "Load the data": [[7, "load-the-data"], [51, "load-the-data"], [127, "load-the-data"], [288, "load-the-data"]], "Benchmark influence": [[7, "benchmark-influence"]], "Choose parameters": [[7, "choose-parameters"]], "Run the code and plot the results": [[7, "run-the-code-and-plot-the-results"]], "Conclusion": [[7, "conclusion"], [13, "conclusion"], [190, "conclusion"], [280, "conclusion"], [288, "conclusion"], [314, "conclusion"], [344, "conclusion"]], "Out-of-core classification of text documents": [[8, "out-of-core-classification-of-text-documents"]], "Reuters Dataset related routines": [[8, "reuters-dataset-related-routines"]], "Main": [[8, "main"]], "Plot results": [[8, "plot-results"], [50, "plot-results"], [79, "plot-results"], [97, "plot-results"], [98, "plot-results"], [119, "plot-results"], [283, "plot-results"], [292, "plot-results"]], "Outlier detection on a real data set": [[9, "outlier-detection-on-a-real-data-set"]], "First example": [[9, "first-example"]], "Second example": [[9, "second-example"]], "Prediction Latency": [[10, "prediction-latency"], [368, "prediction-latency"]], "Benchmark and plot helper functions": [[10, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[10, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark n_features influence on prediction speed": [[10, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[10, "benchmark-throughput"]], "Species distribution modeling": [[11, "species-distribution-modeling"]], "Visualizing the stock market structure": [[12, "visualizing-the-stock-market-structure"]], "Retrieve the data from Internet": [[12, "retrieve-the-data-from-internet"]], "Learning a graph structure": [[12, "learning-a-graph-structure"]], "Clustering using affinity propagation": [[12, "clustering-using-affinity-propagation"]], "Embedding in 2D space": [[12, "embedding-in-2d-space"]], "Visualization": [[12, "visualization"], [340, "visualization"], [408, "visualization"]], "Lagged features for time series forecasting": [[13, "lagged-features-for-time-series-forecasting"]], "Analyzing the Bike Sharing Demand dataset": [[13, "analyzing-the-bike-sharing-demand-dataset"]], "Generating pandas-engineered lagged features": [[13, "generating-pandas-engineered-lagged-features"]], "Naive evaluation of the next hour bike demand regression": [[13, "naive-evaluation-of-the-next-hour-bike-demand-regression"]], "Proper next hour forecasting evaluation": [[13, "proper-next-hour-forecasting-evaluation"]], "Modeling predictive uncertainty via quantile regression": [[13, "modeling-predictive-uncertainty-via-quantile-regression"]], "A qualitative look at the predictions": [[13, "a-qualitative-look-at-the-predictions"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[14, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[15, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Computation times": [[16, "computation-times"], [23, "computation-times"], [29, "computation-times"], [36, "computation-times"], [69, "computation-times"], [77, "computation-times"], [84, "computation-times"], [88, "computation-times"], [94, "computation-times"], [108, "computation-times"], [110, "computation-times"], [137, "computation-times"], [143, "computation-times"], [151, "computation-times"], [163, "computation-times"], [167, "computation-times"], [175, "computation-times"], [178, "computation-times"], [220, "computation-times"], [228, "computation-times"], [245, "computation-times"], [254, "computation-times"], [278, "computation-times"], [281, "computation-times"], [284, "computation-times"], [299, "computation-times"], [305, "computation-times"], [315, "computation-times"], [325, "computation-times"], [333, "computation-times"], [334, "computation-times"], [351, "computation-times"], [356, "computation-times"], [363, "computation-times"], [1011, "computation-times"]], "Libsvm GUI": [[17, "libsvm-gui"]], "Wikipedia principal eigenvector": [[18, "wikipedia-principal-eigenvector"]], "Download data, if not already on disk": [[18, "download-data-if-not-already-on-disk"]], "Loading the redirect files": [[18, "loading-the-redirect-files"]], "Computing the Adjacency matrix": [[18, "computing-the-adjacency-matrix"]], "Computing Principal Singular Vector using Randomized SVD": [[18, "computing-principal-singular-vector-using-randomized-svd"]], "Computing Centrality scores": [[18, "computing-centrality-scores"]], "Biclustering": [[19, "biclustering"], [168, "biclustering"], [378, "biclustering"], [406, "biclustering"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[20, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "A demo of the Spectral Biclustering algorithm": [[21, "a-demo-of-the-spectral-biclustering-algorithm"]], "Generate sample data": [[21, "generate-sample-data"], [39, "generate-sample-data"], [56, "generate-sample-data"], [64, "generate-sample-data"], [79, "generate-sample-data"], [97, "generate-sample-data"], [98, "generate-sample-data"], [146, "generate-sample-data"], [236, "generate-sample-data"], [275, "generate-sample-data"], [297, "generate-sample-data"], [347, "generate-sample-data"]], "Fitting SpectralBiclustering": [[21, "fitting-spectralbiclustering"]], "Plotting results": [[21, "plotting-results"]], "A demo of the Spectral Co-Clustering algorithm": [[22, "a-demo-of-the-spectral-co-clustering-algorithm"]], "Calibration": [[24, "calibration"], [168, "calibration"]], "Probability calibration of classifiers": [[25, "probability-calibration-of-classifiers"]], "Generate synthetic dataset": [[25, "generate-synthetic-dataset"], [180, "generate-synthetic-dataset"], [180, "id1"], [185, "generate-synthetic-dataset"]], "Gaussian Naive-Bayes": [[25, "gaussian-naive-bayes"]], "Plot data and the predicted probabilities": [[25, "plot-data-and-the-predicted-probabilities"]], "Probability Calibration curves": [[26, "probability-calibration-curves"]], "Dataset": [[26, "dataset"], [28, "dataset"], [190, "dataset"], [268, "dataset"]], "Calibration curves": [[26, "calibration-curves"], [28, "calibration-curves"], [407, "calibration-curves"]], "Gaussian Naive Bayes": [[26, "gaussian-naive-bayes"], [991, "gaussian-naive-bayes"]], "Linear support vector classifier": [[26, "linear-support-vector-classifier"]], "Summary": [[26, "summary"], [124, "summary"], [355, "summary"]], "Probability Calibration for 3-class classification": [[27, "probability-calibration-for-3-class-classification"]], "Data": [[27, "data"]], "Fitting and calibration": [[27, "fitting-and-calibration"]], "Compare probabilities": [[27, "compare-probabilities"]], "Comparison of Calibration of Classifiers": [[28, "comparison-of-calibration-of-classifiers"]], "Classification": [[30, "classification"], [33, "classification"], [161, "classification"], [168, "classification"], [416, "classification"], [416, "id10"], [985, "classification"], [992, "id4"], [993, "classification"], [1003, "classification"], [1004, "classification"], [1005, "classification"], [1023, "classification"]], "Plot classification probability": [[31, "plot-classification-probability"]], "Classifier comparison": [[32, "classifier-comparison"]], "Recognizing hand-written digits": [[33, "recognizing-hand-written-digits"]], "Digits dataset": [[33, "digits-dataset"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[34, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[35, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Data generation": [[35, "data-generation"], [50, "data-generation"], [58, "data-generation"], [129, "data-generation"], [149, "data-generation"], [159, "data-generation"], [252, "data-generation"], [327, "data-generation"], [348, "data-generation"]], "Plotting Functions": [[35, "plotting-functions"]], "Comparison of LDA and QDA": [[35, "comparison-of-lda-and-qda"]], "Clustering": [[37, "clustering"], [168, "clustering"], [409, "clustering"]], "Adjustment for chance in clustering performance evaluation": [[38, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Defining the list of metrics to evaluate": [[38, "defining-the-list-of-metrics-to-evaluate"]], "First experiment: fixed ground truth labels and growing number of clusters": [[38, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Second experiment: varying number of classes and clusters": [[38, "second-experiment-varying-number-of-classes-and-clusters"]], "Demo of affinity propagation clustering algorithm": [[39, "demo-of-affinity-propagation-clustering-algorithm"]], "Compute Affinity Propagation": [[39, "compute-affinity-propagation"]], "Plot result": [[39, "plot-result"], [64, "plot-result"], [68, "plot-result"], [68, "id2"]], "Agglomerative clustering with and without structure": [[40, "agglomerative-clustering-with-and-without-structure"]], "Agglomerative clustering with different metrics": [[41, "agglomerative-clustering-with-different-metrics"]], "Plot Hierarchical Clustering Dendrogram": [[42, "plot-hierarchical-clustering-dendrogram"]], "Compare BIRCH and MiniBatchKMeans": [[43, "compare-birch-and-minibatchkmeans"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[44, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "Comparing different clustering algorithms on toy datasets": [[45, "comparing-different-clustering-algorithms-on-toy-datasets"]], "K-means Clustering": [[46, "k-means-clustering"]], "Segmenting the picture of greek coins in regions": [[47, "segmenting-the-picture-of-greek-coins-in-regions"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[48, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "Generate data": [[48, "generate-data"], [68, "generate-data"], [81, "generate-data"], [195, "generate-data"], [304, "generate-data"]], "Define structure of the data": [[48, "define-structure-of-the-data"]], "Compute clustering": [[48, "compute-clustering"], [68, "compute-clustering"], [68, "id1"]], "Plot the results on an image": [[48, "plot-the-results-on-an-image"]], "Color Quantization using K-Means": [[49, "color-quantization-using-k-means"]], "Demo of DBSCAN clustering algorithm": [[50, "demo-of-dbscan-clustering-algorithm"]], "Compute DBSCAN": [[50, "compute-dbscan"]], "Online learning of a dictionary of parts of faces": [[51, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Learn the dictionary of images": [[51, "learn-the-dictionary-of-images"]], "Plot the results": [[51, "plot-the-results"], [83, "plot-the-results"], [136, "plot-the-results"], [166, "plot-the-results"]], "Feature agglomeration": [[52, "feature-agglomeration"], [1006, "feature-agglomeration"], [1024, "feature-agglomeration"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[53, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Vector Quantization Example": [[54, "vector-quantization-example"]], "Original image": [[54, "original-image"]], "Compression via vector quantization": [[54, "compression-via-vector-quantization"]], "Encoding strategy": [[54, "encoding-strategy"]], "Memory footprint": [[54, "memory-footprint"]], "Feature agglomeration vs. univariate selection": [[55, "feature-agglomeration-vs-univariate-selection"]], "Demo of HDBSCAN clustering algorithm": [[56, "demo-of-hdbscan-clustering-algorithm"]], "Scale Invariance": [[56, "scale-invariance"]], "Multi-Scale Clustering": [[56, "multi-scale-clustering"]], "Hyperparameter Robustness": [[56, "hyperparameter-robustness"]], "min_cluster_size": [[56, "min-cluster-size"]], "min_samples": [[56, "min-samples"]], "dbscan_clustering": [[56, "dbscan-clustering"]], "Inductive Clustering": [[57, "inductive-clustering"]], "Demonstration of k-means assumptions": [[58, "demonstration-of-k-means-assumptions"]], "Fit models and plot results": [[58, "fit-models-and-plot-results"]], "Possible solutions": [[58, "possible-solutions"]], "Final remarks": [[58, "final-remarks"]], "A demo of K-Means clustering on the handwritten digits data": [[59, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "Load the dataset": [[59, "load-the-dataset"]], "Define our evaluation benchmark": [[59, "define-our-evaluation-benchmark"]], "Run the benchmark": [[59, "run-the-benchmark"]], "Visualize the results on PCA-reduced data": [[59, "visualize-the-results-on-pca-reduced-data"]], "An example of K-Means++ initialization": [[60, "an-example-of-k-means-initialization"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[61, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Empirical evaluation of the impact of k-means initialization": [[62, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Comparing different hierarchical linkage methods on toy datasets": [[63, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "A demo of the mean-shift clustering algorithm": [[64, "a-demo-of-the-mean-shift-clustering-algorithm"]], "Compute clustering with MeanShift": [[64, "compute-clustering-with-meanshift"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[65, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Generate the data": [[65, "generate-the-data"], [67, "generate-the-data"], [83, "generate-the-data"]], "Compute clustering with KMeans": [[65, "compute-clustering-with-kmeans"]], "Compute clustering with MiniBatchKMeans": [[65, "compute-clustering-with-minibatchkmeans"]], "Establishing parity between clusters": [[65, "establishing-parity-between-clusters"]], "Plotting the results": [[65, "plotting-the-results"], [114, "plotting-the-results"]], "Demo of OPTICS clustering algorithm": [[66, "demo-of-optics-clustering-algorithm"]], "Spectral clustering for image segmentation": [[67, "spectral-clustering-for-image-segmentation"]], "Plotting four circles": [[67, "plotting-four-circles"]], "Plotting two circles": [[67, "plotting-two-circles"]], "Hierarchical clustering: structured vs unstructured ward": [[68, "hierarchical-clustering-structured-vs-unstructured-ward"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[68, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Pipelines and composite estimators": [[70, "pipelines-and-composite-estimators"], [168, "pipelines-and-composite-estimators"], [410, "pipelines-and-composite-estimators"]], "Column Transformer with Heterogeneous Data Sources": [[71, "column-transformer-with-heterogeneous-data-sources"]], "20 newsgroups dataset": [[71, "newsgroups-dataset"]], "Creating transformers": [[71, "creating-transformers"]], "Classification pipeline": [[71, "classification-pipeline"]], "Column Transformer with Mixed Types": [[72, "column-transformer-with-mixed-types"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[73, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Illustration of Pipeline and GridSearchCV": [[73, "illustration-of-pipeline-and-gridsearchcv"]], "Caching transformers within a Pipeline": [[73, "caching-transformers-within-a-pipeline"]], "Pipelining: chaining a PCA and a logistic regression": [[74, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "Concatenating multiple feature extraction methods": [[75, "concatenating-multiple-feature-extraction-methods"]], "Effect of transforming the targets in regression model": [[76, "effect-of-transforming-the-targets-in-regression-model"]], "Synthetic example": [[76, "synthetic-example"]], "Real-world data set": [[76, "real-world-data-set"]], "Covariance estimation": [[78, "covariance-estimation"], [168, "covariance-estimation"], [411, "covariance-estimation"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[79, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Compute the likelihood on test data": [[79, "compute-the-likelihood-on-test-data"]], "Compare different approaches to setting the regularization parameter": [[79, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Ledoit-Wolf vs OAS estimation": [[80, "ledoit-wolf-vs-oas-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[81, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "References:": [[81, null], [113, null], [173, null], [267, null], [268, null], [376, null], [377, null], [406, null], [406, null], [406, null], [407, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [411, null], [411, null], [411, null], [411, null], [413, null], [413, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [417, null], [417, null], [978, null], [978, null], [981, null], [982, null], [983, null], [985, null], [985, null], [985, null], [985, null], [985, null], [985, null], [985, null], [986, null], [986, null], [986, null], [986, null], [986, null], [986, null], [986, null], [986, null], [987, null], [987, null], [989, null], [989, null], [989, null], [989, null], [989, null], [989, null], [989, null], [989, null], [990, null], [990, null], [990, null], [992, null], [992, null], [992, null], [993, null], [994, null], [995, null], [995, null], [995, null], [995, null], [997, null], [999, null], [999, null], [1001, null], [1001, null], [1001, null], [1003, null], [1003, null], [1004, null]], "Comparison of results": [[81, "comparison-of-results"]], "Robust vs Empirical covariance estimate": [[82, "robust-vs-empirical-covariance-estimate"]], "Minimum Covariance Determinant Estimator": [[82, "minimum-covariance-determinant-estimator"]], "Evaluation": [[82, "evaluation"], [304, "evaluation"]], "Sparse inverse covariance estimation": [[83, "sparse-inverse-covariance-estimation"]], "Estimate the covariance": [[83, "estimate-the-covariance"]], "Cross decomposition": [[85, "cross-decomposition"], [168, "cross-decomposition"], [412, "cross-decomposition"]], "Compare cross decomposition methods": [[86, "compare-cross-decomposition-methods"]], "Dataset based latent variables model": [[86, "dataset-based-latent-variables-model"]], "Canonical (symmetric) PLS": [[86, "canonical-symmetric-pls"]], "Transform data": [[86, "transform-data"]], "Scatter plot of scores": [[86, "scatter-plot-of-scores"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[86, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[86, "pls-regression-with-univariate-response-a-k-a-pls1"]], "CCA (PLS mode B with symmetric deflation)": [[86, "cca-pls-mode-b-with-symmetric-deflation"]], "Principal Component Regression vs Partial Least Squares Regression": [[87, "principal-component-regression-vs-partial-least-squares-regression"]], "The data": [[87, "the-data"]], "Projection on one component and predictive power": [[87, "projection-on-one-component-and-predictive-power"]], "Dataset examples": [[89, "dataset-examples"], [168, "dataset-examples"]], "The Digit Dataset": [[90, "the-digit-dataset"]], "The Iris Dataset": [[91, "the-iris-dataset"]], "Loading the iris dataset": [[91, "loading-the-iris-dataset"]], "Scatter Plot of the Iris dataset": [[91, "scatter-plot-of-the-iris-dataset"]], "Plot a PCA representation": [[91, "plot-a-pca-representation"]], "Plot randomly generated classification dataset": [[92, "plot-randomly-generated-classification-dataset"]], "Plot randomly generated multilabel dataset": [[93, "plot-randomly-generated-multilabel-dataset"]], "Decomposition": [[95, "decomposition"], [96, "decomposition"], [168, "decomposition"]], "Faces dataset decompositions": [[96, "faces-dataset-decompositions"]], "Dataset preparation": [[96, "dataset-preparation"], [222, "dataset-preparation"]], "Eigenfaces - PCA using randomized SVD": [[96, "eigenfaces-pca-using-randomized-svd"]], "Non-negative components - NMF": [[96, "non-negative-components-nmf"]], "Independent components - FastICA": [[96, "independent-components-fastica"]], "Sparse components - MiniBatchSparsePCA": [[96, "sparse-components-minibatchsparsepca"]], "Dictionary learning": [[96, "dictionary-learning"]], "Cluster centers - MiniBatchKMeans": [[96, "cluster-centers-minibatchkmeans"]], "Factor Analysis components - FA": [[96, "factor-analysis-components-fa"]], "Decomposition: Dictionary learning": [[96, "decomposition-dictionary-learning"]], "Dictionary learning - positive dictionary": [[96, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive code": [[96, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary & code": [[96, "dictionary-learning-positive-dictionary-code"]], "Blind source separation using FastICA": [[97, "blind-source-separation-using-fastica"]], "Fit ICA and PCA models": [[97, "fit-ica-and-pca-models"]], "FastICA on 2D point clouds": [[98, "fastica-on-2d-point-clouds"]], "Image denoising using dictionary learning": [[99, "image-denoising-using-dictionary-learning"]], "Generate distorted image": [[99, "generate-distorted-image"]], "Display the distorted image": [[99, "display-the-distorted-image"]], "Extract reference patches": [[99, "extract-reference-patches"]], "Learn the dictionary from reference patches": [[99, "learn-the-dictionary-from-reference-patches"]], "Extract noisy patches and reconstruct them using the dictionary": [[99, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Incremental PCA": [[100, "incremental-pca"], [414, "incremental-pca"]], "Kernel PCA": [[101, "kernel-pca"]], "Projecting data: PCA vs. KernelPCA": [[101, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[101, "projecting-into-the-original-feature-space"]], "Principal components analysis (PCA)": [[102, "principal-components-analysis-pca"]], "Create the data": [[102, "create-the-data"], [104, "create-the-data"]], "Plot the figures": [[102, "plot-the-figures"]], "PCA example with Iris Data-set": [[103, "pca-example-with-iris-data-set"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[104, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Fit the models": [[104, "fit-the-models"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[105, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Sparse coding with a precomputed dictionary": [[106, "sparse-coding-with-a-precomputed-dictionary"], [414, "sparse-coding-with-a-precomputed-dictionary"]], "Factor Analysis (with rotation) to visualize patterns": [[107, "factor-analysis-with-rotation-to-visualize-patterns"]], "Developing Estimators": [[109, "developing-estimators"], [168, "developing-estimators"]], "__sklearn_is_fitted__ as Developer API": [[111, "sklearn-is-fitted-as-developer-api"]], "An example custom estimator implementing a simple classifier": [[111, "an-example-custom-estimator-implementing-a-simple-classifier"]], "Ensemble methods": [[112, "ensemble-methods"], [168, "ensemble-methods"]], "Multi-class AdaBoosted Decision Trees": [[113, "multi-class-adaboosted-decision-trees"]], "Creating the dataset": [[113, "creating-the-dataset"]], "Training the AdaBoostClassifier": [[113, "training-the-adaboostclassifier"]], "Analysis": [[113, "analysis"]], "Convergence of the AdaBoostClassifier": [[113, "convergence-of-the-adaboostclassifier"]], "Errors and weights of the Weak Learners": [[113, "errors-and-weights-of-the-weak-learners"]], "Decision Tree Regression with AdaBoost": [[114, "decision-tree-regression-with-adaboost"]], "Preparing the data": [[114, "preparing-the-data"], [177, "preparing-the-data"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[114, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Two-class AdaBoost": [[115, "two-class-adaboost"]], "Single estimator versus bagging: bias-variance decomposition": [[116, "single-estimator-versus-bagging-bias-variance-decomposition"]], "OOB Errors for Random Forests": [[117, "oob-errors-for-random-forests"]], "Feature transformations with ensembles of trees": [[118, "feature-transformations-with-ensembles-of-trees"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[119, "comparing-random-forests-and-histogram-gradient-boosting-models"]], "Load dataset": [[119, "load-dataset"]], "Compute score and computation times": [[119, "compute-score-and-computation-times"]], "Feature importances with a forest of trees": [[120, "feature-importances-with-a-forest-of-trees"]], "Data generation and model fitting": [[120, "data-generation-and-model-fitting"]], "Feature importance based on mean decrease in impurity": [[120, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on feature permutation": [[120, "feature-importance-based-on-feature-permutation"]], "Pixel importances with a parallel forest of trees": [[121, "pixel-importances-with-a-parallel-forest-of-trees"]], "Loading the data and model fitting": [[121, "loading-the-data-and-model-fitting"]], "Feature importance based on mean decrease in impurity (MDI)": [[121, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[122, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Categorical Feature Support in Gradient Boosting": [[123, "categorical-feature-support-in-gradient-boosting"]], "Load Ames Housing dataset": [[123, "load-ames-housing-dataset"]], "Gradient boosting estimator with dropped categorical features": [[123, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with one-hot encoding": [[123, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[123, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient boosting estimator with native categorical support": [[123, "gradient-boosting-estimator-with-native-categorical-support"]], "Model comparison": [[123, "model-comparison"]], "Limiting the number of splits": [[123, "limiting-the-number-of-splits"]], "Early stopping in Gradient Boosting": [[124, "early-stopping-in-gradient-boosting"]], "Data Preparation": [[124, "data-preparation"]], "Model Training and Comparison": [[124, "model-training-and-comparison"]], "Error Calculation": [[124, "error-calculation"]], "Visualize Comparison": [[124, "visualize-comparison"]], "Gradient Boosting Out-of-Bag estimates": [[125, "gradient-boosting-out-of-bag-estimates"]], "Prediction Intervals for Gradient Boosting Regression": [[126, "prediction-intervals-for-gradient-boosting-regression"]], "Fitting non-linear quantile and least squares regressors": [[126, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Analysis of the error metrics": [[126, "analysis-of-the-error-metrics"]], "Calibration of the confidence interval": [[126, "calibration-of-the-confidence-interval"]], "Tuning the hyper-parameters of the quantile regressors": [[126, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Gradient Boosting regression": [[127, "gradient-boosting-regression"]], "Data preprocessing": [[127, "data-preprocessing"]], "Fit regression model": [[127, "fit-regression-model"], [297, "fit-regression-model"], [347, "fit-regression-model"]], "Plot training deviance": [[127, "plot-training-deviance"]], "Plot feature importance": [[127, "plot-feature-importance"]], "Gradient Boosting regularization": [[128, "gradient-boosting-regularization"]], "IsolationForest example": [[129, "isolationforest-example"]], "Training of the model": [[129, "training-of-the-model"]], "Plot discrete decision boundary": [[129, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[129, "plot-path-length-decision-boundary"]], "Monotonic Constraints": [[130, "monotonic-constraints"], [416, "monotonic-constraints"]], "Using feature names to specify monotonic constraints": [[130, "using-feature-names-to-specify-monotonic-constraints"]], "Hashing feature transformation using Totally Random Trees": [[131, "hashing-feature-transformation-using-totally-random-trees"]], "Comparing random forests and the multi-output meta estimator": [[132, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Combine predictors using stacking": [[133, "combine-predictors-using-stacking"]], "Download the dataset": [[133, "download-the-dataset"]], "Make pipeline to preprocess the data": [[133, "make-pipeline-to-preprocess-the-data"]], "Stack of predictors on a single data set": [[133, "stack-of-predictors-on-a-single-data-set"]], "Measure and plot the results": [[133, "measure-and-plot-the-results"]], "Plot the decision boundaries of a VotingClassifier": [[134, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Plot class probabilities calculated by the VotingClassifier": [[135, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Plot individual and voting regression predictions": [[136, "plot-individual-and-voting-regression-predictions"]], "Training classifiers": [[136, "training-classifiers"]], "Making predictions": [[136, "making-predictions"]], "Tutorial exercises": [[138, "tutorial-exercises"], [168, "tutorial-exercises"]], "Cross-validation on diabetes Dataset Exercise": [[139, "cross-validation-on-diabetes-dataset-exercise"]], "Load dataset and apply GridSearchCV": [[139, "load-dataset-and-apply-gridsearchcv"]], "Plot error lines showing +/- std. errors of the scores": [[139, "plot-error-lines-showing-std-errors-of-the-scores"]], "Bonus: how much can you trust the selection of alpha?": [[139, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Cross-validation on Digits Dataset Exercise": [[140, "cross-validation-on-digits-dataset-exercise"]], "Digits Classification Exercise": [[141, "digits-classification-exercise"]], "SVM Exercise": [[142, "svm-exercise"]], "Feature Selection": [[144, "feature-selection"], [168, "feature-selection"]], "Comparison of F-test and mutual information": [[145, "comparison-of-f-test-and-mutual-information"]], "Univariate Feature Selection": [[146, "univariate-feature-selection"]], "Univariate feature selection": [[146, "id1"], [418, "univariate-feature-selection"]], "Compare with SVMs": [[146, "compare-with-svms"]], "Pipeline ANOVA SVM": [[147, "pipeline-anova-svm"]], "Recursive feature elimination": [[148, "recursive-feature-elimination"], [418, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[149, "recursive-feature-elimination-with-cross-validation"]], "Model training and selection": [[149, "model-training-and-selection"], [252, "model-training-and-selection"]], "Plot number of features VS. cross-validation scores": [[149, "plot-number-of-features-vs-cross-validation-scores"]], "Model-based and sequential feature selection": [[150, "model-based-and-sequential-feature-selection"]], "Loading the data": [[150, "loading-the-data"]], "Feature importance from coefficients": [[150, "feature-importance-from-coefficients"]], "Selecting features based on importance": [[150, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[150, "selecting-features-with-sequential-feature-selection"]], "Using negative tolerance values": [[150, "using-negative-tolerance-values"]], "Gaussian Process for Machine Learning": [[152, "gaussian-process-for-machine-learning"], [168, "gaussian-process-for-machine-learning"]], "Comparison of kernel ridge and Gaussian process regression": [[153, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Generating a dataset": [[153, "generating-a-dataset"]], "Limitations of a simple linear model": [[153, "limitations-of-a-simple-linear-model"]], "Kernel methods: kernel ridge and Gaussian process": [[153, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel ridge": [[153, "kernel-ridge"]], "Gaussian process regression": [[153, "gaussian-process-regression"]], "Final conclusion": [[153, "final-conclusion"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[154, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Gaussian process classification (GPC) on iris dataset": [[155, "gaussian-process-classification-gpc-on-iris-dataset"], [419, "gaussian-process-classification-gpc-on-iris-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[156, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[157, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)": [[158, "forecasting-of-co2-level-on-mona-loa-dataset-using-gaussian-process-regression-gpr"]], "Build the dataset": [[158, "build-the-dataset"]], "Design the proper kernel": [[158, "design-the-proper-kernel"]], "Model fitting and extrapolation": [[158, "model-fitting-and-extrapolation"]], "Interpretation of kernel hyperparameters": [[158, "interpretation-of-kernel-hyperparameters"]], "Ability of Gaussian process regression (GPR) to estimate data noise-level": [[159, "ability-of-gaussian-process-regression-gpr-to-estimate-data-noise-level"]], "Optimisation of kernel hyperparameters in GPR": [[159, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Gaussian Processes regression: basic introductory example": [[160, "gaussian-processes-regression-basic-introductory-example"]], "Dataset generation": [[160, "dataset-generation"], [203, "dataset-generation"]], "Example with noise-free target": [[160, "example-with-noise-free-target"]], "Example with noisy targets": [[160, "example-with-noisy-targets"]], "Gaussian processes on discrete data structures": [[161, "gaussian-processes-on-discrete-data-structures"]], "Sequence similarity matrix under the kernel": [[161, "sequence-similarity-matrix-under-the-kernel"]], "Regression": [[161, "regression"], [416, "regression"], [416, "id9"], [985, "regression"], [993, "regression"], [1003, "regression"], [1004, "regression"], [1005, "regression"]], "Illustration of prior and posterior Gaussian process for different kernels": [[162, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Helper function": [[162, "helper-function"]], "Dataset and Gaussian process generation": [[162, "dataset-and-gaussian-process-generation"]], "Kernel cookbook": [[162, "kernel-cookbook"]], "Radial Basis Function kernel": [[162, "radial-basis-function-kernel"]], "Rational Quadradtic kernel": [[162, "rational-quadradtic-kernel"]], "Exp-Sine-Squared kernel": [[162, "exp-sine-squared-kernel"], [419, "exp-sine-squared-kernel"]], "Dot-product kernel": [[162, "dot-product-kernel"]], "Mat\u00e9rn kernel": [[162, "matern-kernel"], [419, "matern-kernel"]], "Missing Value Imputation": [[164, "missing-value-imputation"], [168, "missing-value-imputation"]], "Imputing missing values with variants of IterativeImputer": [[165, "imputing-missing-values-with-variants-of-iterativeimputer"]], "Imputing missing values before building an estimator": [[166, "imputing-missing-values-before-building-an-estimator"]], "Download the data and make missing values sets": [[166, "download-the-data-and-make-missing-values-sets"]], "Impute the missing data and score": [[166, "impute-the-missing-data-and-score"]], "Missing information": [[166, "missing-information"]], "Estimate the score": [[166, "estimate-the-score"]], "Replace missing values by 0": [[166, "replace-missing-values-by-0"]], "kNN-imputation of the missing values": [[166, "knn-imputation-of-the-missing-values"]], "Impute missing values with mean": [[166, "impute-missing-values-with-mean"]], "Iterative imputation of the missing values": [[166, "iterative-imputation-of-the-missing-values"]], "Examples": [[168, "examples"], [370, "examples"], [377, null], [413, null], [413, null], [418, null], [418, null], [419, null], [985, null], [985, null], [985, null], [1002, null], [1002, null], [1006, null], [1006, null], [1006, null], [1031, "examples"]], "Release Highlights": [[168, "release-highlights"], [316, "release-highlights"]], "Decision Trees": [[168, "decision-trees"], [357, "decision-trees"], [1005, "decision-trees"]], "Gaussian Mixture Models": [[168, "gaussian-mixture-models"], [246, "gaussian-mixture-models"]], "Generalized Linear Models": [[168, "generalized-linear-models"], [179, "generalized-linear-models"], [985, "generalized-linear-models"]], "Inspection": [[168, "inspection"], [169, "inspection"], [398, "inspection"]], "Kernel Approximation": [[168, "kernel-approximation"], [176, "kernel-approximation"], [981, "kernel-approximation"]], "Manifold learning": [[168, "manifold-learning"], [221, "manifold-learning"], [986, "manifold-learning"]], "Miscellaneous": [[168, "miscellaneous"], [229, "miscellaneous"], [408, "miscellaneous"], [1039, "miscellaneous"], [1039, "id40"], [1040, "miscellaneous"], [1041, "miscellaneous"], [1042, "miscellaneous"], [1042, "id13"], [1043, "miscellaneous"], [1044, "miscellaneous"], [1047, "miscellaneous"]], "Model Selection": [[168, "model-selection"], [255, "model-selection"]], "Multiclass methods": [[168, "multiclass-methods"], [279, "multiclass-methods"]], "Multioutput methods": [[168, "multioutput-methods"], [282, "multioutput-methods"]], "Nearest Neighbors": [[168, "nearest-neighbors"], [286, "nearest-neighbors"], [992, "nearest-neighbors"]], "Neural Networks": [[168, "neural-networks"], [300, "neural-networks"]], "Preprocessing": [[168, "preprocessing"], [306, "preprocessing"]], "Semi Supervised Classification": [[168, "semi-supervised-classification"], [326, "semi-supervised-classification"]], "Support Vector Machines": [[168, "support-vector-machines"], [335, "support-vector-machines"], [1004, "support-vector-machines"]], "Working with text documents": [[168, "working-with-text-documents"], [352, "working-with-text-documents"]], "Failure of Machine Learning to infer causal effects": [[170, "failure-of-machine-learning-to-infer-causal-effects"]], "The dataset: simulated hourly wages": [[170, "the-dataset-simulated-hourly-wages"]], "Description of the simulated data": [[170, "description-of-the-simulated-data"]], "Income prediction with fully observed variables": [[170, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[170, "income-prediction-with-partial-observations"]], "Lessons learned": [[170, "lessons-learned"], [171, "lessons-learned"]], "Common pitfalls in the interpretation of coefficients of linear models": [[171, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "The dataset: wages": [[171, "the-dataset-wages"]], "The machine-learning pipeline": [[171, "the-machine-learning-pipeline"]], "Processing the dataset": [[171, "processing-the-dataset"]], "Interpreting coefficients: scale matters": [[171, "interpreting-coefficients-scale-matters"]], "Checking the variability of the coefficients": [[171, "checking-the-variability-of-the-coefficients"]], "The problem of correlated variables": [[171, "the-problem-of-correlated-variables"]], "Preprocessing numerical variables": [[171, "preprocessing-numerical-variables"]], "Linear models with regularization": [[171, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[171, "linear-models-with-sparse-coefficients"]], "Wrong causal interpretation": [[171, "wrong-causal-interpretation"]], "Partial Dependence and Individual Conditional Expectation Plots": [[172, "partial-dependence-and-individual-conditional-expectation-plots"]], "Bike sharing dataset preprocessing": [[172, "bike-sharing-dataset-preprocessing"]], "Preprocessor for machine-learning models": [[172, "preprocessor-for-machine-learning-models"]], "Preprocessor for the neural network model": [[172, "preprocessor-for-the-neural-network-model"]], "Preprocessor for the gradient boosting model": [[172, "preprocessor-for-the-gradient-boosting-model"]], "1-way partial dependence with different models": [[172, "way-partial-dependence-with-different-models"]], "Multi-layer perceptron": [[172, "multi-layer-perceptron"]], "Gradient boosting": [[172, "gradient-boosting"]], "Analysis of the plots": [[172, "analysis-of-the-plots"]], "ICE vs. PDP": [[172, "ice-vs-pdp"]], "2D interaction plots": [[172, "d-interaction-plots"]], "3D representation": [[172, "d-representation"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[173, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Data Loading and Feature Engineering": [[173, "data-loading-and-feature-engineering"]], "Accuracy of the Model": [[173, "accuracy-of-the-model"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[173, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Permutation Importance with Multicollinear or Correlated Features": [[174, "permutation-importance-with-multicollinear-or-correlated-features"]], "Random Forest Feature Importance on Breast Cancer Data": [[174, "random-forest-feature-importance-on-breast-cancer-data"]], "Handling Multicollinear Features": [[174, "handling-multicollinear-features"]], "Scalable learning with polynomial kernel approximation": [[177, "scalable-learning-with-polynomial-kernel-approximation"]], "Partitioning the data": [[177, "partitioning-the-data"]], "Feature normalization": [[177, "feature-normalization"]], "Establishing a baseline model": [[177, "establishing-a-baseline-model"]], "Establishing the kernel approximation model": [[177, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[177, "establishing-the-kernelized-svm-model"]], "Comparing the results": [[177, "comparing-the-results"]], "Comparing Linear Bayesian Regressors": [[180, "comparing-linear-bayesian-regressors"]], "Models robustness to recover the ground truth weights": [[180, "models-robustness-to-recover-the-ground-truth-weights"]], "Fit the regressors": [[180, "fit-the-regressors"], [180, "id2"]], "Plot the true and estimated coefficients": [[180, "plot-the-true-and-estimated-coefficients"]], "Plot the marginal log-likelihood": [[180, "plot-the-marginal-log-likelihood"]], "Bayesian regressions with polynomial feature expansion": [[180, "bayesian-regressions-with-polynomial-feature-expansion"]], "Plotting polynomial regressions with std errors of the scores": [[180, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Curve Fitting with Bayesian Ridge Regression": [[181, "curve-fitting-with-bayesian-ridge-regression"]], "Generate sinusoidal data with noise": [[181, "generate-sinusoidal-data-with-noise"]], "Fit by cubic polynomial": [[181, "fit-by-cubic-polynomial"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[181, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[182, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[183, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Logistic Regression 3-class Classifier": [[184, "logistic-regression-3-class-classifier"]], "L1-based models for Sparse Signals": [[185, "l1-based-models-for-sparse-signals"]], "Lasso": [[185, "lasso"], [985, "lasso"]], "Automatic Relevance Determination (ARD)": [[185, "automatic-relevance-determination-ard"]], "ElasticNet": [[185, "elasticnet"]], "Plot and analysis of the results": [[185, "plot-and-analysis-of-the-results"]], "Conclusions": [[185, "conclusions"]], "Lasso and Elastic Net": [[186, "lasso-and-elastic-net"]], "Lasso on dense and sparse data": [[187, "lasso-on-dense-and-sparse-data"]], "Comparing the two Lasso implementations on Dense data": [[187, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[187, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Lasso path using LARS": [[188, "lasso-path-using-lars"]], "Lasso model selection via information criteria": [[189, "lasso-model-selection-via-information-criteria"]], "Lasso model selection: AIC-BIC / cross-validation": [[190, "lasso-model-selection-aic-bic-cross-validation"]], "Selecting Lasso via an information criterion": [[190, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[190, "selecting-lasso-via-cross-validation"]], "Lasso via coordinate descent": [[190, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[190, "lasso-via-least-angle-regression"]], "Summary of cross-validation approach": [[190, "summary-of-cross-validation-approach"]], "Logistic function": [[191, "logistic-function"]], "L1 Penalty and Sparsity in Logistic Regression": [[192, "l1-penalty-and-sparsity-in-logistic-regression"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[193, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Regularization path of L1- Logistic Regression": [[194, "regularization-path-of-l1-logistic-regression"]], "Load data": [[194, "load-data"]], "Compute regularization path": [[194, "compute-regularization-path"]], "Plot regularization path": [[194, "plot-regularization-path"]], "Joint feature selection with multi-task Lasso": [[195, "joint-feature-selection-with-multi-task-lasso"]], "Fit models": [[195, "fit-models"], [283, "fit-models"]], "Plot support and time series": [[195, "plot-support-and-time-series"]], "Non-negative least squares": [[196, "non-negative-least-squares"]], "Linear Regression Example": [[197, "linear-regression-example"]], "Sparsity Example: Fitting only features 1  and 2": [[198, "sparsity-example-fitting-only-features-1-and-2"]], "Ordinary Least Squares and Ridge Regression Variance": [[199, "ordinary-least-squares-and-ridge-regression-variance"]], "Orthogonal Matching Pursuit": [[200, "orthogonal-matching-pursuit"]], "Poisson regression and non-normal loss": [[201, "poisson-regression-and-non-normal-loss"]], "The French Motor Third-Party Liability Claims dataset": [[201, "the-french-motor-third-party-liability-claims-dataset"]], "A constant prediction baseline": [[201, "a-constant-prediction-baseline"]], "(Generalized) linear models": [[201, "generalized-linear-models"]], "Gradient Boosting Regression Trees for Poisson regression": [[201, "gradient-boosting-regression-trees-for-poisson-regression"]], "Evaluation of the calibration of predictions": [[201, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[201, "evaluation-of-the-ranking-power"]], "Main takeaways": [[201, "main-takeaways"]], "Polynomial and Spline interpolation": [[202, "polynomial-and-spline-interpolation"]], "Periodic Splines": [[202, "periodic-splines"]], "Quantile regression": [[203, "quantile-regression"]], "Fitting a QuantileRegressor": [[203, "fitting-a-quantileregressor"]], "Comparing QuantileRegressor and LinearRegression": [[203, "comparing-quantileregressor-and-linearregression"]], "Robust linear model estimation using RANSAC": [[204, "robust-linear-model-estimation-using-ransac"]], "Ridge coefficients as a function of the L2 Regularization": [[205, "ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Purpose of this example": [[205, "purpose-of-this-example"]], "Creating a non-noisy data set": [[205, "creating-a-non-noisy-data-set"]], "Training the Ridge Regressor": [[205, "training-the-ridge-regressor"]], "Plotting trained Coefficients and Mean Squared Errors": [[205, "plotting-trained-coefficients-and-mean-squared-errors"]], "Interpreting the plots": [[205, "interpreting-the-plots"]], "Plot Ridge coefficients as a function of the regularization": [[206, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Compute paths": [[206, "compute-paths"]], "Display results": [[206, "display-results"]], "Robust linear estimator fitting": [[207, "robust-linear-estimator-fitting"]], "Comparing various online solvers": [[208, "comparing-various-online-solvers"]], "Early stopping of Stochastic Gradient Descent": [[209, "early-stopping-of-stochastic-gradient-descent"]], "Plot multi-class SGD on the iris dataset": [[210, "plot-multi-class-sgd-on-the-iris-dataset"]], "SGD: convex loss functions": [[211, "sgd-convex-loss-functions"]], "SGD: Penalties": [[212, "sgd-penalties"]], "SGD: Maximum margin separating hyperplane": [[213, "sgd-maximum-margin-separating-hyperplane"]], "SGD: Weighted samples": [[214, "sgd-weighted-samples"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[215, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "Multiclass sparse logistic regression on 20newgroups": [[216, "multiclass-sparse-logistic-regression-on-20newgroups"]], "MNIST classification using multinomial logistic + L1": [[217, "mnist-classification-using-multinomial-logistic-l1"]], "Theil-Sen Regression": [[218, "theil-sen-regression"]], "Outliers only in the y direction": [[218, "outliers-only-in-the-y-direction"]], "Outliers in the X direction": [[218, "outliers-in-the-x-direction"]], "Tweedie regression on insurance claims": [[219, "tweedie-regression-on-insurance-claims"]], "Loading datasets, basic feature extraction and target definitions": [[219, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Frequency model \u2013 Poisson distribution": [[219, "frequency-model-poisson-distribution"]], "Severity Model -  Gamma distribution": [[219, "severity-model-gamma-distribution"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[219, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Comparison of Manifold Learning methods": [[222, "comparison-of-manifold-learning-methods"]], "Define algorithms for the manifold learning": [[222, "define-algorithms-for-the-manifold-learning"]], "Locally Linear Embeddings": [[222, "locally-linear-embeddings"]], "Isomap Embedding": [[222, "isomap-embedding"]], "Multidimensional scaling": [[222, "multidimensional-scaling"]], "Spectral embedding for non-linear dimensionality reduction": [[222, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "T-distributed Stochastic Neighbor Embedding": [[222, "t-distributed-stochastic-neighbor-embedding"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[223, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Load digits dataset": [[223, "load-digits-dataset"]], "Helper function to plot embedding": [[223, "helper-function-to-plot-embedding"]], "Embedding techniques comparison": [[223, "embedding-techniques-comparison"]], "Manifold Learning methods on a severed sphere": [[224, "manifold-learning-methods-on-a-severed-sphere"]], "Multi-dimensional scaling": [[225, "multi-dimensional-scaling"]], "Swiss Roll And Swiss-Hole Reduction": [[226, "swiss-roll-and-swiss-hole-reduction"]], "Swiss Roll": [[226, "swiss-roll"]], "Swiss-Hole": [[226, "swiss-hole"]], "t-SNE: The effect of various perplexity values on the shape": [[227, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[230, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Visualizations with Display Objects": [[231, "visualizations-with-display-objects"]], "Load Data and train model": [[231, "load-data-and-train-model"]], "Create ConfusionMatrixDisplay": [[231, "create-confusionmatrixdisplay"]], "Create RocCurveDisplay": [[231, "create-roccurvedisplay"]], "Create PrecisionRecallDisplay": [[231, "create-precisionrecalldisplay"]], "Combining the display objects into a single plot": [[231, "combining-the-display-objects-into-a-single-plot"]], "Displaying estimators and complex pipelines": [[232, "displaying-estimators-and-complex-pipelines"]], "Compact text representation": [[232, "compact-text-representation"]], "Rich HTML representation": [[232, "rich-html-representation"]], "Isotonic Regression": [[233, "isotonic-regression"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[234, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "Theoretical bounds": [[234, "theoretical-bounds"]], "Empirical validation": [[234, "empirical-validation"]], "Remarks": [[234, "remarks"]], "Explicit feature map approximation for RBF kernels": [[235, "explicit-feature-map-approximation-for-rbf-kernels"]], "Python package and dataset imports, load dataset": [[235, "python-package-and-dataset-imports-load-dataset"]], "Timing and accuracy plots": [[235, "timing-and-accuracy-plots"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[235, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Comparison of kernel ridge regression and SVR": [[236, "comparison-of-kernel-ridge-regression-and-svr"]], "Construct the kernel-based regression models": [[236, "construct-the-kernel-based-regression-models"]], "Compare times of SVR and Kernel Ridge Regression": [[236, "compare-times-of-svr-and-kernel-ridge-regression"]], "Look at the results": [[236, "look-at-the-results"], [347, "look-at-the-results"]], "Visualize training and prediction times": [[236, "visualize-training-and-prediction-times"]], "Visualize the learning curves": [[236, "visualize-the-learning-curves"]], "Metadata Routing": [[237, "metadata-routing"], [323, "metadata-routing"], [396, "metadata-routing"], [400, "id1"], [1048, "metadata-routing"]], "Estimators": [[237, "estimators"], [364, "estimators"], [364, "id2"], [384, "estimators"], [405, "estimators"], [408, "estimators"]], "Router and Consumer": [[237, "router-and-consumer"]], "Simple Pipeline": [[237, "simple-pipeline"]], "Deprecation / Default Value Change": [[237, "deprecation-default-value-change"]], "Third Party Development and scikit-learn Dependency": [[237, "third-party-development-and-scikit-learn-dependency"]], "Multilabel classification": [[238, "multilabel-classification"], [990, "multilabel-classification"]], "Face completion with a multi-output estimators": [[239, "face-completion-with-a-multi-output-estimators"]], "Evaluation of outlier detection estimators": [[240, "evaluation-of-outlier-detection-estimators"]], "Dataset preprocessing and model training": [[240, "dataset-preprocessing-and-model-training"]], "KDDCup99 - SA dataset": [[240, "kddcup99-sa-dataset"]], "Forest covertypes dataset": [[240, "forest-covertypes-dataset"]], "Ames Housing dataset": [[240, "ames-housing-dataset"]], "Cardiotocography dataset": [[240, "cardiotocography-dataset"]], "Plot and interpret results": [[240, "plot-and-interpret-results"]], "Ablation study": [[240, "ablation-study"]], "Advanced Plotting With Partial Dependence": [[241, "advanced-plotting-with-partial-dependence"]], "Train models on the diabetes dataset": [[241, "train-models-on-the-diabetes-dataset"]], "Plotting partial dependence for two features": [[241, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[241, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting partial dependence for one feature": [[241, "plotting-partial-dependence-for-one-feature"]], "Displaying Pipelines": [[242, "displaying-pipelines"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[242, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[242, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[242, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[242, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[242, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "ROC Curve with Visualization API": [[243, "roc-curve-with-visualization-api"]], "Load Data and Train a SVC": [[243, "load-data-and-train-a-svc"]], "Plotting the ROC Curve": [[243, "plotting-the-roc-curve"]], "Training a Random Forest and Plotting the ROC Curve": [[243, "training-a-random-forest-and-plotting-the-roc-curve"]], "Introducing the set_output API": [[244, "introducing-the-set-output-api"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[247, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[248, "gaussian-mixture-model-ellipsoids"]], "GMM covariances": [[249, "gmm-covariances"]], "GMM Initialization Methods": [[250, "gmm-initialization-methods"]], "Density Estimation for a Gaussian mixture": [[251, "density-estimation-for-a-gaussian-mixture"]], "Gaussian Mixture Model Selection": [[252, "gaussian-mixture-model-selection"]], "Plot the BIC scores": [[252, "plot-the-bic-scores"]], "Plot the best model": [[252, "plot-the-best-model"]], "Gaussian Mixture Model Sine Curve": [[253, "gaussian-mixture-model-sine-curve"]], "Confusion matrix": [[256, "confusion-matrix"], [989, "confusion-matrix"]], "Visualizing cross-validation behavior in scikit-learn": [[257, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualize our data": [[257, "visualize-our-data"]], "Define a function to visualize cross-validation behavior": [[257, "define-a-function-to-visualize-cross-validation-behavior"]], "Visualize cross-validation indices for many CV objects": [[257, "visualize-cross-validation-indices-for-many-cv-objects"]], "Plotting Cross-Validated Predictions": [[258, "plotting-cross-validated-predictions"]], "Detection error tradeoff (DET) curve": [[259, "detection-error-tradeoff-det-curve"]], "Generate synthetic data": [[259, "generate-synthetic-data"]], "Define the classifiers": [[259, "define-the-classifiers"]], "Plot ROC and DET curves": [[259, "plot-roc-and-det-curves"]], "Custom refit strategy of a grid search with cross-validation": [[260, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "The dataset": [[260, "the-dataset"]], "Define our grid-search strategy": [[260, "define-our-grid-search-strategy"]], "Tuning hyper-parameters": [[260, "tuning-hyper-parameters"]], "Balance model complexity and cross-validated score": [[261, "balance-model-complexity-and-cross-validated-score"]], "Statistical comparison of models using grid search": [[262, "statistical-comparison-of-models-using-grid-search"]], "Comparing two models: frequentist approach": [[262, "comparing-two-models-frequentist-approach"]], "Comparing two models: Bayesian approach": [[262, "comparing-two-models-bayesian-approach"]], "Region of Practical Equivalence": [[262, "region-of-practical-equivalence"]], "Pairwise comparison of all models: frequentist approach": [[262, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise comparison of all models: Bayesian approach": [[262, "pairwise-comparison-of-all-models-bayesian-approach"]], "Take-home messages": [[262, "take-home-messages"]], "Sample pipeline for text feature extraction and evaluation": [[263, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Data loading": [[263, "data-loading"]], "Pipeline with hyperparameter tuning": [[263, "pipeline-with-hyperparameter-tuning"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[264, "plotting-learning-curves-and-checking-models-scalability"]], "Learning Curve": [[264, "learning-curve"]], "Complexity analysis": [[264, "complexity-analysis"]], "Class Likelihood Ratios to measure classification performance": [[265, "class-likelihood-ratios-to-measure-classification-performance"]], "Pre-test vs. post-test analysis": [[265, "pre-test-vs-post-test-analysis"]], "Cross-validation of likelihood ratios": [[265, "cross-validation-of-likelihood-ratios"]], "Invariance with respect to prevalence": [[265, "invariance-with-respect-to-prevalence"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[266, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Running GridSearchCV using multiple evaluation metrics": [[266, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Plotting the result": [[266, "plotting-the-result"]], "Nested versus non-nested cross-validation": [[267, "nested-versus-non-nested-cross-validation"]], "See Also:": [[267, null], [410, null]], "Test with permutations the significance of a classification score": [[268, "test-with-permutations-the-significance-of-a-classification-score"]], "Permutation test score": [[268, "permutation-test-score"], [413, "permutation-test-score"]], "Original data": [[268, "original-data"], [307, "original-data"]], "Random data": [[268, "random-data"]], "Precision-Recall": [[269, "precision-recall"]], "In binary classification settings": [[269, "in-binary-classification-settings"]], "Dataset and model": [[269, "dataset-and-model"]], "Plot the Precision-Recall curve": [[269, "plot-the-precision-recall-curve"]], "In multi-label settings": [[269, "in-multi-label-settings"]], "Create multi-label data, fit, and predict": [[269, "create-multi-label-data-fit-and-predict"]], "The average precision score in multi-label settings": [[269, "the-average-precision-score-in-multi-label-settings"]], "Plot the micro-averaged Precision-Recall curve": [[269, "plot-the-micro-averaged-precision-recall-curve"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[269, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Comparing randomized search and grid search for hyperparameter estimation": [[270, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Multiclass Receiver Operating Characteristic (ROC)": [[271, "multiclass-receiver-operating-characteristic-roc"]], "Load and prepare data": [[271, "load-and-prepare-data"], [272, "load-and-prepare-data"], [312, "load-and-prepare-data"]], "One-vs-Rest multiclass ROC": [[271, "one-vs-rest-multiclass-roc"]], "ROC curve showing a specific class": [[271, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[271, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvR macro-average": [[271, "roc-curve-using-the-ovr-macro-average"]], "Plot all OvR ROC curves together": [[271, "plot-all-ovr-roc-curves-together"]], "One-vs-One multiclass ROC": [[271, "one-vs-one-multiclass-roc"]], "ROC curve using the OvO macro-average": [[271, "roc-curve-using-the-ovo-macro-average"]], "Plot all OvO ROC curves together": [[271, "plot-all-ovo-roc-curves-together"]], "Receiver Operating Characteristic (ROC) with cross validation": [[272, "receiver-operating-characteristic-roc-with-cross-validation"]], "Classification and ROC analysis": [[272, "classification-and-roc-analysis"]], "Comparison between grid search and successive halving": [[273, "comparison-between-grid-search-and-successive-halving"]], "Successive Halving Iterations": [[274, "successive-halving-iterations"]], "Number of candidates and amount of resource at each iteration": [[274, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Train error vs Test error": [[275, "train-error-vs-test-error"]], "Compute train and test errors": [[275, "compute-train-and-test-errors"]], "Plot results functions": [[275, "plot-results-functions"]], "Underfitting vs. Overfitting": [[276, "underfitting-vs-overfitting"]], "Plotting Validation Curves": [[277, "plotting-validation-curves"]], "Overview of multiclass training meta-estimators": [[280, "overview-of-multiclass-training-meta-estimators"]], "The Yeast UCI dataset": [[280, "the-yeast-uci-dataset"]], "Strategies comparison": [[280, "strategies-comparison"]], "The importance of hyperparameters search": [[280, "the-importance-of-hyperparameters-search"]], "Multilabel classification using a classifier chain": [[283, "multilabel-classification-using-a-classifier-chain"]], "Loading a dataset": [[283, "loading-a-dataset"]], "LogisticRegression wrapped by OneVsRestClassifier": [[283, "logisticregression-wrapped-by-onevsrestclassifier"]], "Chain of binary classifiers": [[283, "chain-of-binary-classifiers"]], "Results interpretation": [[283, "results-interpretation"]], "Approximate nearest neighbors in TSNE": [[285, "approximate-nearest-neighbors-in-tsne"]], "Caching nearest neighbors": [[287, "caching-nearest-neighbors"]], "Nearest Neighbors Classification": [[288, "nearest-neighbors-classification"], [992, "nearest-neighbors-classification"]], "K-nearest neighbors classifier": [[288, "k-nearest-neighbors-classifier"]], "Decision boundary": [[288, "decision-boundary"]], "Kernel Density Estimation": [[289, "kernel-density-estimation"], [415, "kernel-density-estimation"]], "Simple 1D Kernel Density Estimation": [[290, "simple-1d-kernel-density-estimation"]], "Novelty detection with Local Outlier Factor (LOF)": [[291, "novelty-detection-with-local-outlier-factor-lof"]], "Outlier detection with Local Outlier Factor (LOF)": [[292, "outlier-detection-with-local-outlier-factor-lof"]], "Generate data with outliers": [[292, "generate-data-with-outliers"]], "Fit the model for outlier detection (default)": [[292, "fit-the-model-for-outlier-detection-default"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[293, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[294, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[295, "neighborhood-components-analysis-illustration"]], "Original points": [[295, "original-points"]], "Learning an embedding": [[295, "learning-an-embedding"]], "Nearest Centroid Classification": [[296, "nearest-centroid-classification"]], "Nearest Neighbors regression": [[297, "nearest-neighbors-regression"]], "Kernel Density Estimate of Species Distributions": [[298, "kernel-density-estimate-of-species-distributions"]], "Varying regularization in Multi-layer Perceptron": [[301, "varying-regularization-in-multi-layer-perceptron"]], "Compare Stochastic learning strategies for MLPClassifier": [[302, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "Visualization of MLP weights on MNIST": [[303, "visualization-of-mlp-weights-on-mnist"]], "Restricted Boltzmann Machine features for digit classification": [[304, "restricted-boltzmann-machine-features-for-digit-classification"]], "Models definition": [[304, "models-definition"]], "Training": [[304, "training"], [992, "training"]], "Plotting": [[304, "plotting"], [408, "plotting"], [408, "id7"], [408, "id9"]], "Compare the effect of different scalers on data with outliers": [[307, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "StandardScaler": [[307, "standardscaler"]], "MinMaxScaler": [[307, "minmaxscaler"]], "MaxAbsScaler": [[307, "maxabsscaler"]], "RobustScaler": [[307, "robustscaler"]], "PowerTransformer": [[307, "powertransformer"]], "QuantileTransformer (uniform output)": [[307, "quantiletransformer-uniform-output"]], "QuantileTransformer (Gaussian output)": [[307, "quantiletransformer-gaussian-output"]], "Normalizer": [[307, "normalizer"]], "Using KBinsDiscretizer to discretize continuous features": [[308, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Feature discretization": [[309, "feature-discretization"]], "Demonstrating the different strategies of KBinsDiscretizer": [[310, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Map data to a normal distribution": [[311, "map-data-to-a-normal-distribution"]], "Importance of Feature Scaling": [[312, "importance-of-feature-scaling"]], "Effect of rescaling on a k-neighbors models": [[312, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on a PCA dimensional reduction": [[312, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on model\u2019s performance": [[312, "effect-of-rescaling-on-model-s-performance"]], "Comparing Target Encoder with Other Encoders": [[313, "comparing-target-encoder-with-other-encoders"]], "Loading Data from OpenML": [[313, "loading-data-from-openml"]], "Training and Evaluating Pipelines with Different Encoders": [[313, "training-and-evaluating-pipelines-with-different-encoders"]], "Native Categorical Feature Support": [[313, "native-categorical-feature-support"]], "Plotting the Results": [[313, "plotting-the-results"]], "Target Encoder\u2019s Internal Cross fitting": [[314, "target-encoder-s-internal-cross-fitting"]], "Create Synthetic Dataset": [[314, "create-synthetic-dataset"]], "Training a Ridge Regressor": [[314, "training-a-ridge-regressor"]], "Release Highlights for scikit-learn 0.22": [[317, "release-highlights-for-scikit-learn-0-22"]], "New plotting API": [[317, "new-plotting-api"]], "Stacking Classifier and Regressor": [[317, "stacking-classifier-and-regressor"]], "Permutation-based feature importance": [[317, "permutation-based-feature-importance"]], "Native support for missing values for gradient boosting": [[317, "native-support-for-missing-values-for-gradient-boosting"]], "Precomputed sparse nearest neighbors graph": [[317, "precomputed-sparse-nearest-neighbors-graph"]], "KNN Based Imputation": [[317, "knn-based-imputation"]], "Tree pruning": [[317, "tree-pruning"]], "Retrieve dataframes from OpenML": [[317, "retrieve-dataframes-from-openml"]], "Checking scikit-learn compatibility of an estimator": [[317, "checking-scikit-learn-compatibility-of-an-estimator"]], "ROC AUC now supports multiclass classification": [[317, "roc-auc-now-supports-multiclass-classification"]], "Release Highlights for scikit-learn 0.23": [[318, "release-highlights-for-scikit-learn-0-23"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[318, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Rich visual representation of estimators": [[318, "rich-visual-representation-of-estimators"]], "Scalability and stability improvements to KMeans": [[318, "scalability-and-stability-improvements-to-kmeans"]], "Improvements to the histogram-based Gradient Boosting estimators": [[318, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Sample-weight support for Lasso and ElasticNet": [[318, "sample-weight-support-for-lasso-and-elasticnet"]], "Release Highlights for scikit-learn 0.24": [[319, "release-highlights-for-scikit-learn-0-24"]], "Successive Halving estimators for tuning hyper-parameters": [[319, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Native support for categorical features in HistGradientBoosting estimators": [[319, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Improved performances of HistGradientBoosting estimators": [[319, "improved-performances-of-histgradientboosting-estimators"]], "New self-training meta-estimator": [[319, "new-self-training-meta-estimator"]], "New SequentialFeatureSelector transformer": [[319, "new-sequentialfeatureselector-transformer"]], "New PolynomialCountSketch kernel approximation function": [[319, "new-polynomialcountsketch-kernel-approximation-function"]], "Individual Conditional Expectation plots": [[319, "individual-conditional-expectation-plots"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[319, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New documentation improvements": [[319, "new-documentation-improvements"], [320, "new-documentation-improvements"]], "Release Highlights for scikit-learn 1.0": [[320, "release-highlights-for-scikit-learn-1-0"]], "Keyword and positional arguments": [[320, "keyword-and-positional-arguments"]], "Spline Transformers": [[320, "spline-transformers"]], "Quantile Regressor": [[320, "quantile-regressor"]], "Feature Names Support": [[320, "feature-names-support"]], "A more flexible plotting API": [[320, "a-more-flexible-plotting-api"]], "Online One-Class SVM": [[320, "online-one-class-svm"], [1003, "online-one-class-svm"]], "Histogram-based Gradient Boosting Models are now stable": [[320, "histogram-based-gradient-boosting-models-are-now-stable"]], "Release Highlights for scikit-learn 1.1": [[321, "release-highlights-for-scikit-learn-1-1"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[321, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "get_feature_names_out Available in all Transformers": [[321, "get-feature-names-out-available-in-all-transformers"]], "Grouping infrequent categories in OneHotEncoder": [[321, "grouping-infrequent-categories-in-onehotencoder"]], "Performance improvements": [[321, "performance-improvements"]], "MiniBatchNMF: an online version of NMF": [[321, "minibatchnmf-an-online-version-of-nmf"]], "BisectingKMeans: divide and cluster": [[321, "bisectingkmeans-divide-and-cluster"]], "Release Highlights for scikit-learn 1.2": [[322, "release-highlights-for-scikit-learn-1-2"]], "Pandas output with set_output API": [[322, "pandas-output-with-set-output-api"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[322, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "New and enhanced displays": [[322, "new-and-enhanced-displays"]], "Faster parser in fetch_openml": [[322, "faster-parser-in-fetch-openml"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[322, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Improved efficiency of many estimators": [[322, "improved-efficiency-of-many-estimators"]], "Release Highlights for scikit-learn 1.3": [[323, "release-highlights-for-scikit-learn-1-3"]], "HDBSCAN: hierarchical density-based clustering": [[323, "hdbscan-hierarchical-density-based-clustering"]], "TargetEncoder: a new category encoding strategy": [[323, "targetencoder-a-new-category-encoding-strategy"]], "Missing values support in decision trees": [[323, "missing-values-support-in-decision-trees"]], "New display model_selection.ValidationCurveDisplay": [[323, "new-display-model-selection-validationcurvedisplay"]], "Gamma loss for gradient boosting": [[323, "gamma-loss-for-gradient-boosting"]], "Grouping infrequent categories in preprocessing.OrdinalEncoder": [[323, "grouping-infrequent-categories-in-preprocessing-ordinalencoder"]], "Release Highlights for scikit-learn 1.4": [[324, "release-highlights-for-scikit-learn-1-4"]], "HistGradientBoosting Natively Supports Categorical DTypes in DataFrames": [[324, "histgradientboosting-natively-supports-categorical-dtypes-in-dataframes"]], "Polars output in set_output": [[324, "polars-output-in-set-output"]], "Missing value support for Random Forest": [[324, "missing-value-support-for-random-forest"]], "Add support for monotonic constraints in tree-based models": [[324, "add-support-for-monotonic-constraints-in-tree-based-models"]], "Enriched estimator displays": [[324, "enriched-estimator-displays"]], "Metadata Routing Support": [[324, "metadata-routing-support"]], "Label Propagation digits: Demonstrating performance": [[327, "label-propagation-digits-demonstrating-performance"]], "Semi-supervised learning": [[327, "semi-supervised-learning"], [1002, "semi-supervised-learning"]], "Plot the most uncertain predictions": [[327, "plot-the-most-uncertain-predictions"]], "Label Propagation digits active learning": [[328, "label-propagation-digits-active-learning"]], "Label Propagation learning a complex structure": [[329, "label-propagation-learning-a-complex-structure"]], "Effect of varying threshold for self-training": [[330, "effect-of-varying-threshold-for-self-training"]], "Semi-supervised Classification on a Text Dataset": [[331, "semi-supervised-classification-on-a-text-dataset"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[332, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "SVM with custom kernel": [[336, "svm-with-custom-kernel"]], "Plot different SVM classifiers in the iris dataset": [[337, "plot-different-svm-classifiers-in-the-iris-dataset"]], "Plot the support vectors in LinearSVC": [[338, "plot-the-support-vectors-in-linearsvc"]], "One-class SVM with non-linear kernel (RBF)": [[339, "one-class-svm-with-non-linear-kernel-rbf"]], "RBF SVM parameters": [[340, "rbf-svm-parameters"]], "Load and prepare data set": [[340, "load-and-prepare-data-set"]], "Train classifiers": [[340, "train-classifiers"]], "SVM: Maximum margin separating hyperplane": [[341, "svm-maximum-margin-separating-hyperplane"]], "SVM: Separating hyperplane for unbalanced classes": [[342, "svm-separating-hyperplane-for-unbalanced-classes"]], "SVM-Anova: SVM with univariate feature selection": [[343, "svm-anova-svm-with-univariate-feature-selection"]], "Load some data to play with": [[343, "load-some-data-to-play-with"]], "Create the pipeline": [[343, "create-the-pipeline"]], "Plot the cross-validation score as a function of percentile of features": [[343, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Plot classification boundaries with different SVM Kernels": [[344, "plot-classification-boundaries-with-different-svm-kernels"]], "Creating a dataset": [[344, "creating-a-dataset"]], "Training SVC model and plotting decision boundaries": [[344, "training-svc-model-and-plotting-decision-boundaries"]], "Linear kernel": [[344, "linear-kernel"], [987, "linear-kernel"], [1023, "linear-kernel"]], "Polynomial kernel": [[344, "polynomial-kernel"], [987, "polynomial-kernel"], [1023, "polynomial-kernel"]], "RBF kernel": [[344, "rbf-kernel"], [987, "rbf-kernel"]], "Sigmoid kernel": [[344, "sigmoid-kernel"], [987, "sigmoid-kernel"], [1023, "sigmoid-kernel"]], "SVM Margins Example": [[345, "svm-margins-example"]], "Non-linear SVM": [[346, "non-linear-svm"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[347, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Scaling the regularization parameter for SVCs": [[348, "scaling-the-regularization-parameter-for-svcs"]], "L1-penalty case": [[348, "l1-penalty-case"]], "L2-penalty case": [[348, "l2-penalty-case"]], "SVM Tie Breaking Example": [[349, "svm-tie-breaking-example"]], "SVM: Weighted samples": [[350, "svm-weighted-samples"]], "Classification of text documents using sparse features": [[353, "classification-of-text-documents-using-sparse-features"]], "Loading and vectorizing the 20 newsgroups text dataset": [[353, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Analysis of a bag-of-words document classifier": [[353, "analysis-of-a-bag-of-words-document-classifier"]], "Model without metadata stripping": [[353, "model-without-metadata-stripping"]], "Model with metadata stripping": [[353, "model-with-metadata-stripping"]], "Benchmarking classifiers": [[353, "benchmarking-classifiers"]], "Plot accuracy, training and test time of each classifier": [[353, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Clustering text documents using k-means": [[354, "clustering-text-documents-using-k-means"]], "Loading text data": [[354, "loading-text-data"]], "Quantifying the quality of clustering results": [[354, "quantifying-the-quality-of-clustering-results"]], "K-means clustering on text features": [[354, "k-means-clustering-on-text-features"]], "Feature Extraction using TfidfVectorizer": [[354, "feature-extraction-using-tfidfvectorizer"]], "Clustering sparse data with k-means": [[354, "clustering-sparse-data-with-k-means"]], "Performing dimensionality reduction using LSA": [[354, "performing-dimensionality-reduction-using-lsa"]], "Top terms per cluster": [[354, "top-terms-per-cluster"]], "HashingVectorizer": [[354, "hashingvectorizer"]], "Clustering evaluation summary": [[354, "clustering-evaluation-summary"]], "FeatureHasher and DictVectorizer Comparison": [[355, "featurehasher-and-dictvectorizer-comparison"]], "Load Data": [[355, "load-data"]], "Define preprocessing functions": [[355, "define-preprocessing-functions"]], "DictVectorizer": [[355, "dictvectorizer"]], "FeatureHasher": [[355, "featurehasher"]], "Comparison with special purpose text vectorizers": [[355, "comparison-with-special-purpose-text-vectorizers"]], "TfidfVectorizer": [[355, "tfidfvectorizer"]], "Post pruning decision trees with cost complexity pruning": [[358, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Total impurity of leaves vs effective alphas of pruned tree": [[358, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Accuracy vs alpha for training and testing sets": [[358, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Plot the decision surface of decision trees trained on the iris dataset": [[359, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Decision Tree Regression": [[360, "decision-tree-regression"]], "Multi-output Decision Tree Regression": [[361, "multi-output-decision-tree-regression"]], "Understanding the decision tree structure": [[362, "understanding-the-decision-tree-structure"]], "Train tree classifier": [[362, "train-tree-classifier"]], "Tree structure": [[362, "tree-structure"]], "What is the values array used here?": [[362, "what-is-the-values-array-used-here"]], "Decision path": [[362, "decision-path"]], "Common pitfalls and recommended practices": [[364, "common-pitfalls-and-recommended-practices"]], "Inconsistent preprocessing": [[364, "inconsistent-preprocessing"]], "Data leakage": [[364, "data-leakage"]], "Data leakage during pre-processing": [[364, "data-leakage-during-pre-processing"]], "How to avoid data leakage": [[364, "how-to-avoid-data-leakage"]], "Controlling randomness": [[364, "controlling-randomness"]], "Using None or RandomState instances, and repeated calls to fit and split": [[364, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "CV splitters": [[364, "cv-splitters"], [364, "id3"]], "Common pitfalls and subtleties": [[364, "common-pitfalls-and-subtleties"]], "General recommendations": [[364, "general-recommendations"]], "Getting reproducible results across multiple executions": [[364, "getting-reproducible-results-across-multiple-executions"]], "Robustness of cross-validation results": [[364, "robustness-of-cross-validation-results"]], "Computing with scikit-learn": [[367, "computing-with-scikit-learn"]], "Computational Performance": [[368, "computational-performance"]], "Bulk versus Atomic mode": [[368, "bulk-versus-atomic-mode"]], "Configuring Scikit-learn for reduced validation overhead": [[368, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Influence of the Number of Features": [[368, "influence-of-the-number-of-features"]], "Influence of the Input Data Representation": [[368, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[368, "influence-of-the-model-complexity"]], "Feature Extraction Latency": [[368, "feature-extraction-latency"]], "Prediction Throughput": [[368, "prediction-throughput"]], "Tips and Tricks": [[368, "tips-and-tricks"]], "Linear algebra libraries": [[368, "linear-algebra-libraries"]], "Limiting Working Memory": [[368, "limiting-working-memory"]], "Model Compression": [[368, "model-compression"]], "Model Reshaping": [[368, "model-reshaping"]], "Links": [[368, "links"]], "Parallelism, resource management, and configuration": [[369, "parallelism-resource-management-and-configuration"]], "Parallelism": [[369, "parallelism"], [978, "parallelism"]], "Higher-level parallelism with joblib": [[369, "higher-level-parallelism-with-joblib"]], "Lower-level parallelism with OpenMP": [[369, "lower-level-parallelism-with-openmp"]], "Parallel NumPy and SciPy routines from numerical libraries": [[369, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Oversubscription: spawning too many threads": [[369, "oversubscription-spawning-too-many-threads"]], "Configuration switches": [[369, "configuration-switches"]], "Python API": [[369, "python-api"]], "Environment variables": [[369, "environment-variables"]], "SKLEARN_ASSUME_FINITE": [[369, "sklearn-assume-finite"]], "SKLEARN_WORKING_MEMORY": [[369, "sklearn-working-memory"]], "SKLEARN_SEED": [[369, "sklearn-seed"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[369, "sklearn-tests-global-random-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[369, "sklearn-skip-network-tests"]], "SKLEARN_RUN_FLOAT32_TESTS": [[369, "sklearn-run-float32-tests"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[369, "sklearn-enable-debug-cython-directives"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[369, "sklearn-build-enable-debug-symbols"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[369, "sklearn-pairwise-dist-chunk-size"]], "SKLEARN_DOC_BUILD_WARNINGS_AS_ERRORS": [[369, "sklearn-doc-build-warnings-as-errors"]], "Strategies to scale computationally: bigger data": [[370, "strategies-to-scale-computationally-bigger-data"]], "Scaling with instances using out-of-core learning": [[370, "scaling-with-instances-using-out-of-core-learning"]], "Streaming instances": [[370, "streaming-instances"]], "Extracting features": [[370, "extracting-features"]], "Incremental learning": [[370, "incremental-learning"]], "Notes": [[370, "notes"]], "Table Of Contents": [[371, "table-of-contents"]], "Dataset transformations": [[374, "dataset-transformations"]], "Dataset loading utilities": [[375, "dataset-loading-utilities"], [387, "dataset-loading-utilities"]], "Loading other datasets": [[376, "loading-other-datasets"]], "Sample images": [[376, "sample-images"]], "Examples:": [[376, null], [377, null], [398, null], [406, null], [406, null], [407, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [410, null], [410, null], [410, null], [410, null], [410, null], [411, null], [411, null], [411, null], [411, null], [411, null], [411, null], [412, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [415, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [418, null], [418, null], [418, null], [418, null], [978, null], [978, null], [978, null], [981, null], [981, null], [981, null], [983, null], [983, null], [983, null], [984, null], [985, null], [985, null], [985, null], [985, null], [985, null], [985, null], [985, null], [985, null], [985, null], [985, null], [985, null], [985, null], [985, null], [985, null], [986, null], [988, null], [988, null], [988, null], [988, null], [989, null], [989, null], [989, null], [989, null], [989, null], [990, null], [992, null], [992, null], [992, null], [992, null], [992, null], [993, null], [993, null], [994, null], [995, null], [995, null], [995, null], [995, null], [995, null], [995, null], [996, null], [997, null], [999, null], [999, null], [999, null], [1003, null], [1003, null], [1004, null], [1004, null], [1004, null], [1004, null], [1004, null], [1004, null], [1005, null], [1005, null], [1005, null], [1005, null], [1028, null]], "Datasets in svmlight / libsvm format": [[376, "datasets-in-svmlight-libsvm-format"]], "Related links:": [[376, null]], "Downloading datasets from the openml.org repository": [[376, "downloading-datasets-from-the-openml-org-repository"]], "Dataset Versions": [[376, "dataset-versions"]], "ARFF parser": [[376, "arff-parser"]], "Loading from external datasets": [[376, "loading-from-external-datasets"], [1016, null]], "Real world datasets": [[377, "real-world-datasets"]], "The Olivetti faces dataset": [[377, "the-olivetti-faces-dataset"]], "The 20 newsgroups text dataset": [[377, "the-20-newsgroups-text-dataset"]], "Data Considerations": [[377, null]], "Recommendation": [[377, null]], "The Labeled Faces in the Wild face recognition dataset": [[377, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "Forest covertypes": [[377, "forest-covertypes"]], "RCV1 dataset": [[377, "rcv1-dataset"]], "Kddcup 99 dataset": [[377, "kddcup-99-dataset"]], "California Housing dataset": [[377, "california-housing-dataset"]], "Generated datasets": [[378, "generated-datasets"]], "Generators for classification and clustering": [[378, "generators-for-classification-and-clustering"]], "Single label": [[378, "single-label"]], "Multilabel": [[378, "multilabel"]], "Generators for regression": [[378, "generators-for-regression"]], "Generators for manifold learning": [[378, "generators-for-manifold-learning"]], "Generators for decomposition": [[378, "generators-for-decomposition"]], "Toy datasets": [[379, "toy-datasets"]], "Iris plants dataset": [[379, "iris-plants-dataset"]], "Diabetes dataset": [[379, "diabetes-dataset"], [1023, null]], "Optical recognition of handwritten digits dataset": [[379, "optical-recognition-of-handwritten-digits-dataset"]], "Linnerrud dataset": [[379, "linnerrud-dataset"]], "Wine recognition dataset": [[379, "wine-recognition-dataset"]], "Breast cancer wisconsin (diagnostic) dataset": [[379, "breast-cancer-wisconsin-diagnostic-dataset"]], "Installing the development version of scikit-learn": [[380, "installing-the-development-version-of-scikit-learn"]], "Installing nightly builds": [[380, "installing-nightly-builds"]], "Building from source": [[380, "building-from-source"]], "Dependencies": [[380, "dependencies"]], "Runtime dependencies": [[380, "runtime-dependencies"]], "Build dependencies": [[380, "build-dependencies"]], "Test dependencies": [[380, "test-dependencies"]], "Building a specific version from a tag": [[380, "building-a-specific-version-from-a-tag"]], "Editable mode": [[380, "editable-mode"]], "Platform-specific instructions": [[380, "platform-specific-instructions"]], "Windows": [[380, "windows"]], "macOS": [[380, "macos"]], "macOS compilers from conda-forge": [[380, "macos-compilers-from-conda-forge"]], "macOS compilers from Homebrew": [[380, "macos-compilers-from-homebrew"]], "Linux": [[380, "linux"]], "Linux compilers from the system": [[380, "linux-compilers-from-the-system"]], "Linux compilers from conda-forge": [[380, "linux-compilers-from-conda-forge"]], "FreeBSD": [[380, "freebsd"]], "Alternative compilers": [[380, "alternative-compilers"]], "Parallel builds": [[380, "parallel-builds"]], "Bug triaging and issue curation": [[381, "bug-triaging-and-issue-curation"]], "Working on issues to improve them": [[381, "working-on-issues-to-improve-them"]], "Fruitful discussions": [[381, null]], "Working on PRs to help review": [[381, "working-on-prs-to-help-review"]], "Triaging operations for members of the core and contributor experience teams": [[381, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Closing issues: a tough call": [[381, null]], "A typical workflow for triaging issues": [[381, "a-typical-workflow-for-triaging-issues"]], "Contributing": [[382, "contributing"], [394, "contributing"]], "Our community, our values": [[382, null]], "Ways to contribute": [[382, "ways-to-contribute"]], "Contributing to related projects": [[382, null]], "Submitting a bug report or a feature request": [[382, "submitting-a-bug-report-or-a-feature-request"]], "How to make a good bug report": [[382, "how-to-make-a-good-bug-report"]], "Contributing code": [[382, "contributing-code"]], "Video resources": [[382, "video-resources"]], "How to contribute": [[382, "how-to-contribute"]], "Learning git:": [[382, null]], "Pull request checklist": [[382, "pull-request-checklist"]], "Continuous Integration (CI)": [[382, "continuous-integration-ci"]], "Stalled pull requests": [[382, "stalled-pull-requests"]], "Stalled and Unclaimed Issues": [[382, "stalled-and-unclaimed-issues"]], "Issues for New Contributors": [[382, "issues-for-new-contributors"]], "good first issue tag": [[382, null]], "Easy tag": [[382, null]], "help wanted tag": [[382, null]], "Documentation": [[382, "documentation"], [1031, "documentation"]], "Building the documentation": [[382, "building-the-documentation"]], "Generated documentation on GitHub Actions": [[382, "generated-documentation-on-github-actions"]], "Testing and improving test coverage": [[382, "testing-and-improving-test-coverage"]], "Writing matplotlib related tests": [[382, "writing-matplotlib-related-tests"]], "Workflow to improve test coverage": [[382, "workflow-to-improve-test-coverage"]], "Monitoring performance": [[382, "monitoring-performance"]], "Issue Tracker Tags": [[382, "issue-tracker-tags"]], "Maintaining backwards compatibility": [[382, "maintaining-backwards-compatibility"]], "Deprecation": [[382, "deprecation"]], "Change the default value of a parameter": [[382, "change-the-default-value-of-a-parameter"]], "Code Review Guidelines": [[382, "code-review-guidelines"]], "Communication Guidelines": [[382, "communication-guidelines"]], "Reading the existing code base": [[382, "reading-the-existing-code-base"]], "Cython Best Practices, Conventions and Knowledge": [[383, "cython-best-practices-conventions-and-knowledge"]], "Tips for developing with Cython in scikit-learn": [[383, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips to ease development": [[383, "tips-to-ease-development"]], "Tips for performance": [[383, "tips-for-performance"]], "Using OpenMP": [[383, "using-openmp"]], "Developing scikit-learn estimators": [[384, "developing-scikit-learn-estimators"]], "APIs of scikit-learn objects": [[384, "apis-of-scikit-learn-objects"]], "Different objects": [[384, "different-objects"]], "Instantiation": [[384, "instantiation"]], "Fitting": [[384, "fitting"]], "Estimated Attributes": [[384, "estimated-attributes"]], "Optional Arguments": [[384, "optional-arguments"]], "Universal attributes": [[384, "universal-attributes"]], "Rolling your own estimator": [[384, "rolling-your-own-estimator"]], "Project template:": [[384, null]], "BaseEstimator and mixins:": [[384, null]], "get_params and set_params": [[384, "get-params-and-set-params"]], "Parameters and init": [[384, "parameters-and-init"]], "Cloning": [[384, "cloning"]], "Pipeline compatibility": [[384, "pipeline-compatibility"]], "Estimator types": [[384, "estimator-types"]], "Specific models": [[384, "specific-models"]], "Estimator Tags": [[384, "estimator-tags"]], "Developer API for set_output": [[384, "developer-api-for-set-output"]], "Developer API for check_is_fitted": [[384, "developer-api-for-check-is-fitted"]], "Developer API for HTML representation": [[384, "developer-api-for-html-representation"]], "Coding guidelines": [[384, "coding-guidelines"]], "Input validation": [[384, "input-validation"]], "Random Numbers": [[384, "random-numbers"]], "Numerical assertions in tests": [[384, "numerical-assertions-in-tests"]], "Developer\u2019s Guide": [[385, "developer-s-guide"]], "Maintainer / core-developer information": [[386, "maintainer-core-developer-information"]], "Releasing": [[386, "releasing"]], "Before a release": [[386, "before-a-release"]], "Preparing a release PR": [[386, "preparing-a-release-pr"]], "Major version release": [[386, "major-version-release"]], "Minor version release (also known as bug-fix release)": [[386, "minor-version-release-also-known-as-bug-fix-release"]], "Making a release": [[386, "making-a-release"]], "Release checklist": [[386, "release-checklist"]], "Merging Pull Requests": [[386, "merging-pull-requests"]], "The scikit-learn.org web site": [[386, "the-scikit-learn-org-web-site"]], "Experimental features": [[386, "experimental-features"]], "Crafting a minimal reproducer for scikit-learn": [[387, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Good practices": [[387, "good-practices"]], "Provide a failing code example with minimal comments": [[387, "provide-a-failing-code-example-with-minimal-comments"]], "Boil down your script to something as small as possible": [[387, "boil-down-your-script-to-something-as-small-as-possible"]], "DO NOT report your data unless it is extremely necessary": [[387, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Use markdown formatting": [[387, "use-markdown-formatting"]], "Synthetic dataset": [[387, "synthetic-dataset"]], "NumPy": [[387, "numpy"]], "Pandas": [[387, "pandas"]], "make_regression": [[387, "make-regression"]], "make_classification": [[387, "make-classification"]], "make_blobs": [[387, "make-blobs"]], "How to optimize for speed": [[388, "how-to-optimize-for-speed"]], "Python, Cython or C/C++?": [[388, "python-cython-or-c-c"]], "Profiling Python code": [[388, "profiling-python-code"]], "Memory usage profiling": [[388, "memory-usage-profiling"]], "Using Cython": [[388, "using-cython"]], "Profiling compiled extensions": [[388, "profiling-compiled-extensions"]], "Using yep and gperftools": [[388, "using-yep-and-gperftools"]], "Using a debugger, gdb": [[388, "using-a-debugger-gdb"]], "Using gprof": [[388, "using-gprof"]], "Using valgrind / callgrind / kcachegrind": [[388, "using-valgrind-callgrind-kcachegrind"]], "kcachegrind": [[388, "kcachegrind"]], "Multi-core parallelism using joblib.Parallel": [[388, "multi-core-parallelism-using-joblib-parallel"]], "A simple algorithmic trick: warm restarts": [[388, "a-simple-algorithmic-trick-warm-restarts"]], "Developing with the Plotting API": [[389, "developing-with-the-plotting-api"]], "Plotting API Overview": [[389, "plotting-api-overview"]], "Plotting with Multiple Axes": [[389, "plotting-with-multiple-axes"]], "Developers\u2019 Tips and Tricks": [[390, "developers-tips-and-tricks"]], "Productivity and sanity-preserving tips": [[390, "productivity-and-sanity-preserving-tips"]], "Folding and unfolding outdated diffs on pull requests": [[390, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Checking out pull requests as remote-tracking branches": [[390, "checking-out-pull-requests-as-remote-tracking-branches"]], "Display code coverage in pull requests": [[390, "display-code-coverage-in-pull-requests"]], "Useful pytest aliases and flags": [[390, "useful-pytest-aliases-and-flags"]], "Standard replies for reviewing": [[390, "standard-replies-for-reviewing"]], "Debugging memory errors in Cython with valgrind": [[390, "debugging-memory-errors-in-cython-with-valgrind"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[390, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Utilities for Developers": [[391, "utilities-for-developers"]], "Validation Tools": [[391, "validation-tools"]], "Efficient Linear Algebra & Array Operations": [[391, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[391, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[391, "efficient-routines-for-sparse-matrices"]], "Graph Routines": [[391, "graph-routines"]], "Testing Functions": [[391, "testing-functions"]], "Multiclass and multilabel utility function": [[391, "multiclass-and-multilabel-utility-function"]], "Helper Functions": [[391, "helper-functions"]], "Hash Functions": [[391, "hash-functions"]], "Warnings and Exceptions": [[391, "warnings-and-exceptions"]], "Dispatching": [[392, "dispatching"]], "Frequently Asked Questions": [[394, "frequently-asked-questions"]], "Table of Contents": [[394, "table-of-contents"]], "About the project": [[394, "about-the-project"]], "What is the project name (a lot of people get it wrong)?": [[394, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "How do you pronounce the project name?": [[394, "how-do-you-pronounce-the-project-name"]], "Why scikit?": [[394, "why-scikit"]], "Do you support PyPy?": [[394, "do-you-support-pypy"]], "Implementation decisions": [[394, "implementation-decisions"]], "Why is there no support for deep or reinforcement learning / Will there be support for deep or reinforcement learning in scikit-learn?": [[394, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-support-for-deep-or-reinforcement-learning-in-scikit-learn"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[394, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[394, "why-did-you-remove-hmms-from-scikit-learn"]], "Will you add GPU support?": [[394, "will-you-add-gpu-support"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[394, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does Scikit-learn not directly work with, for example, pandas.DataFrame?": [[394, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Do you plan to implement transform for target y in a pipeline?": [[394, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Why are there so many different estimators for linear models?": [[394, "why-are-there-so-many-different-estimators-for-linear-models"]], "How can I contribute to scikit-learn?": [[394, "how-can-i-contribute-to-scikit-learn"]], "Why is my pull request not getting any attention?": [[394, "why-is-my-pull-request-not-getting-any-attention"]], "What are the inclusion criteria for new algorithms ?": [[394, "what-are-the-inclusion-criteria-for-new-algorithms"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[394, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Using scikit-learn": [[394, "using-scikit-learn"]], "What\u2019s the best way to get help on scikit-learn usage?": [[394, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "How should I save, export or deploy estimators for production?": [[394, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How can I create a bunch object?": [[394, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[394, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How do I deal with string data (or trees, graphs\u2026)?": [[394, "how-do-i-deal-with-string-data-or-trees-graphs"]], "Why do I sometime get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[394, "why-do-i-sometime-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why does my job use more cores than specified with n_jobs?": [[394, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "How do I set a random_state for an entire execution?": [[394, "how-do-i-set-a-random-state-for-an-entire-execution"]], "Getting Started": [[395, "getting-started"]], "Fitting and predicting: estimator basics": [[395, "fitting-and-predicting-estimator-basics"]], "Transformers and pre-processors": [[395, "transformers-and-pre-processors"]], "Pipelines: chaining pre-processors and estimators": [[395, "pipelines-chaining-pre-processors-and-estimators"]], "Model evaluation": [[395, "model-evaluation"]], "Automatic parameter searches": [[395, "automatic-parameter-searches"]], "Next steps": [[395, "next-steps"]], "Glossary of Common Terms and API Elements": [[396, "glossary-of-common-terms-and-api-elements"]], "General Concepts": [[396, "general-concepts"]], "Class APIs and Estimator Types": [[396, "class-apis-and-estimator-types"]], "Target Types": [[396, "target-types"]], "Methods": [[396, "methods"]], "Parameters": [[396, "parameters"], [416, "parameters"]], "Attributes": [[396, "attributes"]], "Data and sample properties": [[396, "data-and-sample-properties"]], "Scikit-learn governance and decision-making": [[397, "scikit-learn-governance-and-decision-making"]], "Roles And Responsibilities": [[397, "roles-and-responsibilities"]], "Contributors": [[397, "contributors"]], "Core Contributors": [[397, "core-contributors"]], "Communication team": [[397, "communication-team"]], "Documentation team": [[397, "documentation-team"]], "Maintainers": [[397, "maintainers"]], "Technical Committee": [[397, "technical-committee"]], "Decision Making Process": [[397, "decision-making-process"]], "Governance Model Changes": [[397, "governance-model-changes"]], "Enhancement proposals (SLEPs)": [[397, "enhancement-proposals-sleps"]], "Installing scikit-learn": [[399, "installing-scikit-learn"]], "Installing the latest release": [[399, "installing-the-latest-release"]], "Third party distributions of scikit-learn": [[399, "third-party-distributions-of-scikit-learn"]], "Alpine Linux": [[399, "alpine-linux"]], "Arch Linux": [[399, "arch-linux"]], "Debian/Ubuntu": [[399, "debian-ubuntu"]], "Fedora": [[399, "fedora"]], "NetBSD": [[399, "netbsd"]], "MacPorts for Mac OSX": [[399, "macports-for-mac-osx"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[399, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Intel Extension for Scikit-learn": [[399, "intel-extension-for-scikit-learn"]], "WinPython for Windows": [[399, "winpython-for-windows"]], "Troubleshooting": [[399, "troubleshooting"]], "Error caused by file path length limit on Windows": [[399, "error-caused-by-file-path-length-limit-on-windows"]], "Usage Examples": [[400, "usage-examples"]], "Weighted scoring and fitting": [[400, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[400, "weighted-scoring-and-unweighted-fitting"]], "Unweighted feature selection": [[400, "unweighted-feature-selection"]], "Advanced: Different scoring and fitting weights": [[400, "advanced-different-scoring-and-fitting-weights"]], "API Interface": [[400, "api-interface"]], "Metadata Routing Support Status": [[400, "metadata-routing-support-status"]], "Model persistence": [[403, "model-persistence"]], "Python specific serialization": [[403, "python-specific-serialization"]], "Security & maintainability limitations": [[403, "security-maintainability-limitations"]], "A more secure format: skops": [[403, "a-more-secure-format-skops"]], "Interoperable formats": [[403, "interoperable-formats"]], "Model selection and evaluation": [[404, "model-selection-and-evaluation"]], "Array API support (experimental)": [[405, "array-api-support-experimental"]], "Example usage": [[405, "example-usage"]], "PyTorch Support": [[405, "pytorch-support"]], "Support for Array API-compatible inputs": [[405, "support-for-array-api-compatible-inputs"]], "Metrics": [[405, "metrics"]], "Tools": [[405, "tools"]], "Common estimator checks": [[405, "common-estimator-checks"]], "Note on MPS device support": [[405, "note-on-mps-device-support"]], "Spectral Co-Clustering": [[406, "spectral-co-clustering"]], "Mathematical formulation": [[406, "mathematical-formulation"], [406, "id3"], [409, "mathematical-formulation"], [409, "id16"], [409, "id23"], [409, "id33"], [409, "id37"], [416, "mathematical-formulation"], [992, "mathematical-formulation"], [993, "mathematical-formulation"], [1003, "mathematical-formulation"], [1004, "mathematical-formulation"], [1005, "mathematical-formulation"]], "Spectral Biclustering": [[406, "spectral-biclustering"]], "Biclustering evaluation": [[406, "biclustering-evaluation"]], "Probability calibration": [[407, "probability-calibration"]], "Calibrating a classifier": [[407, "calibrating-a-classifier"]], "Usage": [[407, "usage"], [410, "usage"], [410, "id1"], [416, "usage"], [416, "id24"], [416, "id25"], [416, "id27"], [416, "id35"], [985, "usage"]], "Sigmoid": [[407, "sigmoid"]], "Isotonic": [[407, "isotonic"]], "Multiclass support": [[407, "multiclass-support"]], "API Reference": [[408, "api-reference"]], "sklearn: Settings and information tools": [[408, "module-sklearn"]], "sklearn.base: Base classes and utility functions": [[408, "module-sklearn.base"]], "Base classes": [[408, "base-classes"]], "Functions": [[408, "functions"], [408, "id1"]], "sklearn.calibration: Probability Calibration": [[408, "module-sklearn.calibration"]], "sklearn.cluster: Clustering": [[408, "module-sklearn.cluster"]], "Classes": [[408, "classes"]], "sklearn.compose: Composite Estimators": [[408, "module-sklearn.compose"]], "sklearn.covariance: Covariance Estimators": [[408, "module-sklearn.covariance"]], "sklearn.cross_decomposition: Cross decomposition": [[408, "module-sklearn.cross_decomposition"]], "sklearn.datasets: Datasets": [[408, "module-sklearn.datasets"]], "Loaders": [[408, "loaders"]], "Samples generator": [[408, "samples-generator"]], "sklearn.decomposition: Matrix Decomposition": [[408, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis: Discriminant Analysis": [[408, "module-sklearn.discriminant_analysis"]], "sklearn.dummy: Dummy estimators": [[408, "module-sklearn.dummy"]], "sklearn.ensemble: Ensemble Methods": [[408, "module-sklearn.ensemble"]], "sklearn.exceptions: Exceptions and warnings": [[408, "module-sklearn.exceptions"]], "sklearn.experimental: Experimental": [[408, "module-sklearn.experimental"]], "sklearn.feature_extraction: Feature Extraction": [[408, "module-sklearn.feature_extraction"]], "From images": [[408, "module-sklearn.feature_extraction.image"]], "From text": [[408, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection: Feature Selection": [[408, "module-sklearn.feature_selection"]], "sklearn.gaussian_process: Gaussian Processes": [[408, "module-sklearn.gaussian_process"]], "Kernels": [[408, "module-sklearn.gaussian_process.kernels"]], "sklearn.impute: Impute": [[408, "module-sklearn.impute"]], "sklearn.inspection: Inspection": [[408, "module-sklearn.inspection"]], "sklearn.isotonic: Isotonic regression": [[408, "module-sklearn.isotonic"]], "sklearn.kernel_approximation: Kernel Approximation": [[408, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge: Kernel Ridge Regression": [[408, "module-sklearn.kernel_ridge"]], "sklearn.linear_model: Linear Models": [[408, "module-sklearn.linear_model"]], "Linear classifiers": [[408, "linear-classifiers"]], "Classical linear regressors": [[408, "classical-linear-regressors"]], "Regressors with variable selection": [[408, "regressors-with-variable-selection"]], "Bayesian regressors": [[408, "bayesian-regressors"]], "Multi-task linear regressors with variable selection": [[408, "multi-task-linear-regressors-with-variable-selection"]], "Outlier-robust regressors": [[408, "outlier-robust-regressors"]], "Generalized linear models (GLM) for regression": [[408, "generalized-linear-models-glm-for-regression"]], "sklearn.manifold: Manifold Learning": [[408, "module-sklearn.manifold"]], "sklearn.metrics: Metrics": [[408, "sklearn-metrics-metrics"]], "Model Selection Interface": [[408, "model-selection-interface"]], "Classification metrics": [[408, "classification-metrics"], [989, "classification-metrics"]], "Regression metrics": [[408, "regression-metrics"], [989, "regression-metrics"]], "Multilabel ranking metrics": [[408, "multilabel-ranking-metrics"], [989, "multilabel-ranking-metrics"]], "Clustering metrics": [[408, "clustering-metrics"], [989, "clustering-metrics"]], "Biclustering metrics": [[408, "biclustering-metrics"]], "Distance metrics": [[408, "distance-metrics"]], "Pairwise metrics": [[408, "pairwise-metrics"]], "sklearn.mixture: Gaussian Mixture Models": [[408, "module-sklearn.mixture"]], "sklearn.model_selection: Model Selection": [[408, "module-sklearn.model_selection"]], "Splitter Classes": [[408, "splitter-classes"]], "Splitter Functions": [[408, "splitter-functions"]], "Hyper-parameter optimizers": [[408, "hyper-parameter-optimizers"]], "Model validation": [[408, "model-validation"]], "sklearn.multiclass: Multiclass classification": [[408, "module-sklearn.multiclass"]], "Multiclass classification strategies": [[408, "multiclass-classification-strategies"]], "sklearn.multioutput: Multioutput regression and classification": [[408, "module-sklearn.multioutput"]], "sklearn.naive_bayes: Naive Bayes": [[408, "module-sklearn.naive_bayes"]], "sklearn.neighbors: Nearest Neighbors": [[408, "module-sklearn.neighbors"]], "sklearn.neural_network: Neural network models": [[408, "module-sklearn.neural_network"]], "sklearn.pipeline: Pipeline": [[408, "module-sklearn.pipeline"]], "sklearn.preprocessing: Preprocessing and Normalization": [[408, "module-sklearn.preprocessing"]], "sklearn.random_projection: Random projection": [[408, "module-sklearn.random_projection"]], "sklearn.semi_supervised: Semi-Supervised Learning": [[408, "module-sklearn.semi_supervised"]], "sklearn.svm: Support Vector Machines": [[408, "module-sklearn.svm"]], "sklearn.tree: Decision Trees": [[408, "module-sklearn.tree"]], "sklearn.utils: Utilities": [[408, "module-sklearn.utils"]], "Input and parameter validation": [[408, "module-sklearn.utils.validation"]], "Utilities used in meta-estimators": [[408, "module-sklearn.utils.metaestimators"]], "Utilities to handle weights based on class labels": [[408, "module-sklearn.utils.class_weight"]], "Utilities to deal with multiclass target in classifiers": [[408, "module-sklearn.utils.multiclass"]], "Utilities for optimal mathematical operations": [[408, "module-sklearn.utils.extmath"]], "Utilities to work with sparse matrices and arrays": [[408, "module-sklearn.utils.sparsefuncs"]], "Utilities to work with graphs": [[408, "module-sklearn.utils.graph"]], "Utilities for random sampling": [[408, "module-sklearn.utils.random"]], "Utilities to operate on arrays": [[408, "module-sklearn.utils.arrayfuncs"]], "Metadata routing": [[408, "module-sklearn.utils.metadata_routing"]], "Scikit-learn object discovery": [[408, "module-sklearn.utils.discovery"]], "Scikit-learn compatibility checker": [[408, "module-sklearn.utils.estimator_checks"]], "Utilities for parallel computing": [[408, "module-sklearn.utils.parallel"]], "Recently deprecated": [[408, "recently-deprecated"]], "Input data": [[409, null]], "Overview of clustering methods": [[409, "overview-of-clustering-methods"]], "K-means": [[409, "k-means"]], "Low-level parallelism": [[409, "low-level-parallelism"], [416, "low-level-parallelism"]], "Mini Batch K-Means": [[409, "mini-batch-k-means"]], "Affinity Propagation": [[409, "affinity-propagation"]], "Mean Shift": [[409, "mean-shift"]], "Spectral clustering": [[409, "spectral-clustering"]], "Different label assignment strategies": [[409, "different-label-assignment-strategies"]], "Spectral Clustering Graphs": [[409, "spectral-clustering-graphs"]], "Hierarchical clustering": [[409, "hierarchical-clustering"]], "FeatureAgglomeration": [[409, null]], "Different linkage type: Ward, complete, average, and single linkage": [[409, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Visualization of cluster hierarchy": [[409, "visualization-of-cluster-hierarchy"]], "Adding connectivity constraints": [[409, "adding-connectivity-constraints"]], "Varying the metric": [[409, "varying-the-metric"]], "Bisecting K-Means": [[409, "bisecting-k-means"]], "DBSCAN": [[409, "dbscan"]], "Implementation": [[409, null], [992, "implementation"]], "Memory consumption for large sample sizes": [[409, null]], "HDBSCAN": [[409, "hdbscan"]], "Mutual Reachability Graph": [[409, "mutual-reachability-graph"]], "Hierarchical Clustering": [[409, "id11"]], "OPTICS": [[409, "optics"]], "Comparison with DBSCAN": [[409, null]], "Computational Complexity": [[409, null]], "BIRCH": [[409, "birch"]], "Clustering performance evaluation": [[409, "clustering-performance-evaluation"]], "Rand index": [[409, "rand-index"]], "Advantages": [[409, "advantages"], [409, "id14"], [409, "id21"], [409, "id25"], [409, "id28"], [409, "id31"], [409, "id35"], [409, "id39"]], "Drawbacks": [[409, "drawbacks"], [409, "id15"], [409, "id22"], [409, "id26"], [409, "id29"], [409, "id32"], [409, "id36"], [409, "id40"]], "Mutual Information based scores": [[409, "mutual-information-based-scores"]], "Homogeneity, completeness and V-measure": [[409, "homogeneity-completeness-and-v-measure"]], "Fowlkes-Mallows scores": [[409, "fowlkes-mallows-scores"]], "Silhouette Coefficient": [[409, "silhouette-coefficient"]], "Calinski-Harabasz Index": [[409, "calinski-harabasz-index"]], "Davies-Bouldin Index": [[409, "davies-bouldin-index"]], "Contingency Matrix": [[409, "contingency-matrix"]], "Pair Confusion Matrix": [[409, "pair-confusion-matrix"]], "Pipeline: chaining estimators": [[410, "pipeline-chaining-estimators"]], "Build a pipeline": [[410, "build-a-pipeline"]], "Access pipeline steps": [[410, "access-pipeline-steps"]], "Tracking feature names in a pipeline": [[410, "tracking-feature-names-in-a-pipeline"]], "Access to nested parameters": [[410, "access-to-nested-parameters"]], "Caching transformers: avoid repeated computation": [[410, "caching-transformers-avoid-repeated-computation"]], "Transforming target in regression": [[410, "transforming-target-in-regression"]], "FeatureUnion: composite feature spaces": [[410, "featureunion-composite-feature-spaces"]], "ColumnTransformer for heterogeneous data": [[410, "columntransformer-for-heterogeneous-data"]], "Visualizing Composite Estimators": [[410, "visualizing-composite-estimators"]], "Empirical covariance": [[411, "empirical-covariance"]], "Shrunk Covariance": [[411, "shrunk-covariance"]], "Basic shrinkage": [[411, "basic-shrinkage"]], "Ledoit-Wolf shrinkage": [[411, "ledoit-wolf-shrinkage"]], "Oracle Approximating Shrinkage": [[411, "oracle-approximating-shrinkage"]], "Sparse inverse covariance": [[411, "sparse-inverse-covariance"]], "Robust Covariance Estimation": [[411, "robust-covariance-estimation"]], "Minimum Covariance Determinant": [[411, "minimum-covariance-determinant"]], "PLSCanonical": [[412, "plscanonical"]], "Transforming data": [[412, "transforming-data"]], "Predicting the targets Y": [[412, "predicting-the-targets-y"]], "PLSSVD": [[412, "plssvd"]], "PLSRegression": [[412, "plsregression"]], "Canonical Correlation Analysis": [[412, "canonical-correlation-analysis"]], "Reference:": [[412, null]], "Cross-validation: evaluating estimator performance": [[413, "cross-validation-evaluating-estimator-performance"]], "Computing cross-validated metrics": [[413, "computing-cross-validated-metrics"]], "Data transformation with held out data": [[413, null]], "The cross_validate function and multiple metric evaluation": [[413, "the-cross-validate-function-and-multiple-metric-evaluation"]], "Obtaining predictions by cross-validation": [[413, "obtaining-predictions-by-cross-validation"]], "Cross validation iterators": [[413, "cross-validation-iterators"]], "Cross-validation iterators for i.i.d. data": [[413, "cross-validation-iterators-for-i-i-d-data"]], "K-fold": [[413, "k-fold"]], "Repeated K-Fold": [[413, "repeated-k-fold"]], "Leave One Out (LOO)": [[413, "leave-one-out-loo"]], "Leave P Out (LPO)": [[413, "leave-p-out-lpo"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[413, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Cross-validation iterators with stratification based on class labels": [[413, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Stratified k-fold": [[413, "stratified-k-fold"]], "Stratified Shuffle Split": [[413, "stratified-shuffle-split"]], "Cross-validation iterators for grouped data": [[413, "cross-validation-iterators-for-grouped-data"]], "Group k-fold": [[413, "group-k-fold"]], "StratifiedGroupKFold": [[413, "stratifiedgroupkfold"]], "Leave One Group Out": [[413, "leave-one-group-out"]], "Leave P Groups Out": [[413, "leave-p-groups-out"]], "Group Shuffle Split": [[413, "group-shuffle-split"]], "Predefined fold-splits / Validation-sets": [[413, "predefined-fold-splits-validation-sets"]], "Using cross-validation iterators to split train and test": [[413, "using-cross-validation-iterators-to-split-train-and-test"]], "Cross validation of time series data": [[413, "cross-validation-of-time-series-data"]], "Time Series Split": [[413, "time-series-split"]], "A note on shuffling": [[413, "a-note-on-shuffling"]], "Cross validation and model selection": [[413, "cross-validation-and-model-selection"]], "Decomposing signals in components (matrix factorization problems)": [[414, "decomposing-signals-in-components-matrix-factorization-problems"]], "Principal component analysis (PCA)": [[414, "principal-component-analysis-pca"]], "Exact PCA and probabilistic interpretation": [[414, "exact-pca-and-probabilistic-interpretation"]], "PCA using randomized SVD": [[414, "pca-using-randomized-svd"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[414, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Kernel Principal Component Analysis (kPCA)": [[414, "kernel-principal-component-analysis-kpca"]], "Exact Kernel PCA": [[414, "exact-kernel-pca"]], "Choice of solver for Kernel PCA": [[414, "choice-of-solver-for-kernel-pca"]], "Truncated singular value decomposition and latent semantic analysis": [[414, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "Dictionary Learning": [[414, "dictionary-learning"]], "Generic dictionary learning": [[414, "generic-dictionary-learning"]], "Mini-batch dictionary learning": [[414, "mini-batch-dictionary-learning"]], "Clustering for dictionary learning": [[414, null]], "Factor Analysis": [[414, "factor-analysis"]], "Independent component analysis (ICA)": [[414, "independent-component-analysis-ica"]], "Non-negative matrix factorization (NMF or NNMF)": [[414, "non-negative-matrix-factorization-nmf-or-nnmf"]], "NMF with the Frobenius norm": [[414, "nmf-with-the-frobenius-norm"]], "NMF with a beta-divergence": [[414, "nmf-with-a-beta-divergence"]], "Mini-batch Non Negative Matrix Factorization": [[414, "mini-batch-non-negative-matrix-factorization"]], "Latent Dirichlet Allocation (LDA)": [[414, "latent-dirichlet-allocation-lda"]], "Density Estimation": [[415, "density-estimation"]], "Density Estimation: Histograms": [[415, "density-estimation-histograms"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[416, "ensembles-gradient-boosting-random-forests-bagging-voting-stacking"]], "Gradient-boosted trees": [[416, "gradient-boosted-trees"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[416, null]], "Histogram-Based Gradient Boosting": [[416, "histogram-based-gradient-boosting"]], "Missing values support": [[416, "missing-values-support"]], "Sample weight support": [[416, "sample-weight-support"]], "Categorical Features Support": [[416, "categorical-features-support"]], "Interaction constraints": [[416, "interaction-constraints"]], "Why it\u2019s faster": [[416, "why-it-s-faster"]], "GradientBoostingClassifier and GradientBoostingRegressor": [[416, "gradientboostingclassifier-and-gradientboostingregressor"]], "Fitting additional weak-learners": [[416, "fitting-additional-weak-learners"]], "Controlling the tree size": [[416, "controlling-the-tree-size"]], "Loss Functions": [[416, "loss-functions"]], "Shrinkage via learning rate": [[416, "shrinkage-via-learning-rate"]], "Subsampling": [[416, "subsampling"]], "Interpretation with feature importance": [[416, "interpretation-with-feature-importance"]], "Random forests and other randomized tree ensembles": [[416, "random-forests-and-other-randomized-tree-ensembles"]], "Random Forests": [[416, "random-forests"]], "Extremely Randomized Trees": [[416, "extremely-randomized-trees"]], "Parallelization": [[416, "parallelization"]], "Feature importance evaluation": [[416, "feature-importance-evaluation"]], "Totally Random Trees Embedding": [[416, "totally-random-trees-embedding"]], "Bagging meta-estimator": [[416, "bagging-meta-estimator"]], "Voting Classifier": [[416, "voting-classifier"]], "Majority Class Labels (Majority/Hard Voting)": [[416, "majority-class-labels-majority-hard-voting"]], "Weighted Average Probabilities (Soft Voting)": [[416, "weighted-average-probabilities-soft-voting"]], "Using the VotingClassifier with GridSearchCV": [[416, "using-the-votingclassifier-with-gridsearchcv"]], "Voting Regressor": [[416, "voting-regressor"]], "Stacked generalization": [[416, "stacked-generalization"]], "AdaBoost": [[416, "adaboost"]], "Feature extraction": [[417, "feature-extraction"]], "Loading features from dicts": [[417, "loading-features-from-dicts"]], "Feature hashing": [[417, "feature-hashing"]], "Text feature extraction": [[417, "text-feature-extraction"]], "The Bag of Words representation": [[417, "the-bag-of-words-representation"]], "Sparsity": [[417, "sparsity"], [1023, "sparsity"]], "Common Vectorizer usage": [[417, "common-vectorizer-usage"]], "Using stop words": [[417, "using-stop-words"]], "Tf\u2013idf term weighting": [[417, "tfidf-term-weighting"]], "Decoding text files": [[417, "decoding-text-files"]], "Applications and examples": [[417, "applications-and-examples"]], "Limitations of the Bag of Words representation": [[417, "limitations-of-the-bag-of-words-representation"]], "Vectorizing a large text corpus with the hashing trick": [[417, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Customizing the vectorizer classes": [[417, "customizing-the-vectorizer-classes"]], "Image feature extraction": [[417, "image-feature-extraction"]], "Patch extraction": [[417, "patch-extraction"]], "Connectivity graph of an image": [[417, "connectivity-graph-of-an-image"]], "Feature selection": [[418, "feature-selection"]], "Removing features with low variance": [[418, "removing-features-with-low-variance"]], "Feature selection with sparse data": [[418, null]], "Feature selection using SelectFromModel": [[418, "feature-selection-using-selectfrommodel"]], "L1-based feature selection": [[418, "l1-based-feature-selection"]], "Reference": [[418, null], [418, null]], "Tree-based feature selection": [[418, "tree-based-feature-selection"]], "Sequential Feature Selection": [[418, "sequential-feature-selection"]], "Feature selection as part of a pipeline": [[418, "feature-selection-as-part-of-a-pipeline"]], "Gaussian Processes": [[419, "gaussian-processes"]], "Gaussian Process Regression (GPR)": [[419, "gaussian-process-regression-gpr"]], "Gaussian Process Classification (GPC)": [[419, "gaussian-process-classification-gpc"]], "GPC examples": [[419, "gpc-examples"]], "Probabilistic predictions with GPC": [[419, "probabilistic-predictions-with-gpc"]], "Illustration of GPC on the XOR dataset": [[419, "illustration-of-gpc-on-the-xor-dataset"]], "Kernels for Gaussian Processes": [[419, "kernels-for-gaussian-processes"]], "Basic kernels": [[419, "basic-kernels"]], "Kernel operators": [[419, "kernel-operators"]], "Radial basis function (RBF) kernel": [[419, "radial-basis-function-rbf-kernel"]], "Rational quadratic kernel": [[419, "rational-quadratic-kernel"]], "Dot-Product kernel": [[419, "dot-product-kernel"]], "sklearn.cluster.dbscan": [[420, "sklearn-cluster-dbscan"]], "sklearn.decomposition.fastica": [[421, "sklearn-decomposition-fastica"]], "sklearn.covariance.oas": [[422, "sklearn-covariance-oas"]], "sklearn.base.BaseEstimator": [[423, "sklearn-base-baseestimator"]], "Examples using sklearn.base.BaseEstimator": [[423, "examples-using-sklearn-base-baseestimator"]], "sklearn.base.BiclusterMixin": [[424, "sklearn-base-biclustermixin"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[425, "sklearn-base-classnameprefixfeaturesoutmixin"]], "sklearn.base.ClassifierMixin": [[426, "sklearn-base-classifiermixin"]], "Examples using sklearn.base.ClassifierMixin": [[426, "examples-using-sklearn-base-classifiermixin"]], "sklearn.base.ClusterMixin": [[427, "sklearn-base-clustermixin"]], "sklearn.base.DensityMixin": [[428, "sklearn-base-densitymixin"]], "sklearn.base.MetaEstimatorMixin": [[429, "sklearn-base-metaestimatormixin"]], "Examples using sklearn.base.MetaEstimatorMixin": [[429, "examples-using-sklearn-base-metaestimatormixin"]], "sklearn.base.OneToOneFeatureMixin": [[430, "sklearn-base-onetoonefeaturemixin"]], "sklearn.base.OutlierMixin": [[431, "sklearn-base-outliermixin"]], "sklearn.base.RegressorMixin": [[432, "sklearn-base-regressormixin"]], "Examples using sklearn.base.RegressorMixin": [[432, "examples-using-sklearn-base-regressormixin"]], "sklearn.base.TransformerMixin": [[433, "sklearn-base-transformermixin"]], "Examples using sklearn.base.TransformerMixin": [[433, "examples-using-sklearn-base-transformermixin"]], "sklearn.base.clone": [[434, "sklearn-base-clone"]], "sklearn.base.is_classifier": [[435, "sklearn-base-is-classifier"]], "sklearn.base.is_regressor": [[436, "sklearn-base-is-regressor"]], "sklearn.calibration.CalibratedClassifierCV": [[437, "sklearn-calibration-calibratedclassifiercv"]], "Examples using sklearn.calibration.CalibratedClassifierCV": [[437, "examples-using-sklearn-calibration-calibratedclassifiercv"]], "sklearn.calibration.CalibrationDisplay": [[438, "sklearn-calibration-calibrationdisplay"]], "Examples using sklearn.calibration.CalibrationDisplay.from_estimator": [[438, "examples-using-sklearn-calibration-calibrationdisplay-from-estimator"]], "sklearn.calibration.calibration_curve": [[439, "sklearn-calibration-calibration-curve"]], "sklearn.cluster.AffinityPropagation": [[440, "sklearn-cluster-affinitypropagation"]], "Examples using sklearn.cluster.AffinityPropagation": [[440, "examples-using-sklearn-cluster-affinitypropagation"]], "sklearn.cluster.AgglomerativeClustering": [[441, "sklearn-cluster-agglomerativeclustering"]], "Examples using sklearn.cluster.AgglomerativeClustering": [[441, "examples-using-sklearn-cluster-agglomerativeclustering"]], "sklearn.cluster.Birch": [[442, "sklearn-cluster-birch"]], "Examples using sklearn.cluster.Birch": [[442, "examples-using-sklearn-cluster-birch"]], "sklearn.cluster.BisectingKMeans": [[443, "sklearn-cluster-bisectingkmeans"]], "Examples using sklearn.cluster.BisectingKMeans": [[443, "examples-using-sklearn-cluster-bisectingkmeans"]], "sklearn.cluster.DBSCAN": [[444, "sklearn-cluster-dbscan"]], "Examples using sklearn.cluster.DBSCAN": [[444, "examples-using-sklearn-cluster-dbscan"]], "sklearn.cluster.FeatureAgglomeration": [[445, "sklearn-cluster-featureagglomeration"]], "Examples using sklearn.cluster.FeatureAgglomeration": [[445, "examples-using-sklearn-cluster-featureagglomeration"]], "sklearn.cluster.HDBSCAN": [[446, "sklearn-cluster-hdbscan"]], "Examples using sklearn.cluster.HDBSCAN": [[446, "examples-using-sklearn-cluster-hdbscan"]], "sklearn.cluster.KMeans": [[447, "sklearn-cluster-kmeans"]], "Examples using sklearn.cluster.KMeans": [[447, "examples-using-sklearn-cluster-kmeans"]], "sklearn.cluster.MeanShift": [[448, "sklearn-cluster-meanshift"]], "Examples using sklearn.cluster.MeanShift": [[448, "examples-using-sklearn-cluster-meanshift"]], "sklearn.cluster.MiniBatchKMeans": [[449, "sklearn-cluster-minibatchkmeans"]], "Examples using sklearn.cluster.MiniBatchKMeans": [[449, "examples-using-sklearn-cluster-minibatchkmeans"]], "sklearn.cluster.OPTICS": [[450, "sklearn-cluster-optics"]], "Examples using sklearn.cluster.OPTICS": [[450, "examples-using-sklearn-cluster-optics"]], "sklearn.cluster.SpectralBiclustering": [[451, "sklearn-cluster-spectralbiclustering"]], "Examples using sklearn.cluster.SpectralBiclustering": [[451, "examples-using-sklearn-cluster-spectralbiclustering"]], "sklearn.cluster.SpectralClustering": [[452, "sklearn-cluster-spectralclustering"]], "Examples using sklearn.cluster.SpectralClustering": [[452, "examples-using-sklearn-cluster-spectralclustering"]], "sklearn.cluster.SpectralCoclustering": [[453, "sklearn-cluster-spectralcoclustering"]], "Examples using sklearn.cluster.SpectralCoclustering": [[453, "examples-using-sklearn-cluster-spectralcoclustering"]], "sklearn.cluster.affinity_propagation": [[454, "sklearn-cluster-affinity-propagation"]], "Examples using sklearn.cluster.affinity_propagation": [[454, "examples-using-sklearn-cluster-affinity-propagation"]], "sklearn.cluster.cluster_optics_dbscan": [[455, "sklearn-cluster-cluster-optics-dbscan"]], "Examples using sklearn.cluster.cluster_optics_dbscan": [[455, "examples-using-sklearn-cluster-cluster-optics-dbscan"]], "sklearn.cluster.cluster_optics_xi": [[456, "sklearn-cluster-cluster-optics-xi"]], "sklearn.cluster.compute_optics_graph": [[457, "sklearn-cluster-compute-optics-graph"]], "sklearn.cluster.estimate_bandwidth": [[458, "sklearn-cluster-estimate-bandwidth"]], "Examples using sklearn.cluster.estimate_bandwidth": [[458, "examples-using-sklearn-cluster-estimate-bandwidth"]], "sklearn.cluster.k_means": [[459, "sklearn-cluster-k-means"]], "sklearn.cluster.kmeans_plusplus": [[460, "sklearn-cluster-kmeans-plusplus"]], "Examples using sklearn.cluster.kmeans_plusplus": [[460, "examples-using-sklearn-cluster-kmeans-plusplus"]], "sklearn.cluster.mean_shift": [[461, "sklearn-cluster-mean-shift"]], "sklearn.cluster.spectral_clustering": [[462, "sklearn-cluster-spectral-clustering"]], "Examples using sklearn.cluster.spectral_clustering": [[462, "examples-using-sklearn-cluster-spectral-clustering"]], "sklearn.cluster.ward_tree": [[463, "sklearn-cluster-ward-tree"]], "sklearn.compose.ColumnTransformer": [[464, "sklearn-compose-columntransformer"]], "Examples using sklearn.compose.ColumnTransformer": [[464, "examples-using-sklearn-compose-columntransformer"]], "sklearn.compose.TransformedTargetRegressor": [[465, "sklearn-compose-transformedtargetregressor"]], "Examples using sklearn.compose.TransformedTargetRegressor": [[465, "examples-using-sklearn-compose-transformedtargetregressor"]], "sklearn.compose.make_column_selector": [[466, "sklearn-compose-make-column-selector"]], "Examples using sklearn.compose.make_column_selector": [[466, "examples-using-sklearn-compose-make-column-selector"]], "sklearn.compose.make_column_transformer": [[467, "sklearn-compose-make-column-transformer"]], "Examples using sklearn.compose.make_column_transformer": [[467, "examples-using-sklearn-compose-make-column-transformer"]], "sklearn.config_context": [[468, "sklearn-config-context"]], "Examples using sklearn.config_context": [[468, "examples-using-sklearn-config-context"]], "sklearn.covariance.EllipticEnvelope": [[469, "sklearn-covariance-ellipticenvelope"]], "Examples using sklearn.covariance.EllipticEnvelope": [[469, "examples-using-sklearn-covariance-ellipticenvelope"]], "sklearn.covariance.EmpiricalCovariance": [[470, "sklearn-covariance-empiricalcovariance"]], "Examples using sklearn.covariance.EmpiricalCovariance": [[470, "examples-using-sklearn-covariance-empiricalcovariance"]], "sklearn.covariance.GraphicalLasso": [[471, "sklearn-covariance-graphicallasso"]], "sklearn.covariance.GraphicalLassoCV": [[472, "sklearn-covariance-graphicallassocv"]], "Examples using sklearn.covariance.GraphicalLassoCV": [[472, "examples-using-sklearn-covariance-graphicallassocv"]], "sklearn.covariance.LedoitWolf": [[473, "sklearn-covariance-ledoitwolf"]], "Examples using sklearn.covariance.LedoitWolf": [[473, "examples-using-sklearn-covariance-ledoitwolf"]], "sklearn.covariance.MinCovDet": [[474, "sklearn-covariance-mincovdet"]], "Examples using sklearn.covariance.MinCovDet": [[474, "examples-using-sklearn-covariance-mincovdet"]], "sklearn.covariance.OAS": [[475, "sklearn-covariance-oas"]], "Examples using sklearn.covariance.OAS": [[475, "examples-using-sklearn-covariance-oas"]], "sklearn.covariance.ShrunkCovariance": [[476, "sklearn-covariance-shrunkcovariance"]], "Examples using sklearn.covariance.ShrunkCovariance": [[476, "examples-using-sklearn-covariance-shrunkcovariance"]], "sklearn.covariance.empirical_covariance": [[477, "sklearn-covariance-empirical-covariance"]], "Examples using sklearn.covariance.empirical_covariance": [[477, "examples-using-sklearn-covariance-empirical-covariance"]], "sklearn.covariance.graphical_lasso": [[478, "sklearn-covariance-graphical-lasso"]], "sklearn.covariance.ledoit_wolf": [[479, "sklearn-covariance-ledoit-wolf"]], "Examples using sklearn.covariance.ledoit_wolf": [[479, "examples-using-sklearn-covariance-ledoit-wolf"]], "sklearn.covariance.ledoit_wolf_shrinkage": [[480, "sklearn-covariance-ledoit-wolf-shrinkage"]], "sklearn.covariance.shrunk_covariance": [[481, "sklearn-covariance-shrunk-covariance"]], "sklearn.cross_decomposition.CCA": [[482, "sklearn-cross-decomposition-cca"]], "Examples using sklearn.cross_decomposition.CCA": [[482, "examples-using-sklearn-cross-decomposition-cca"]], "sklearn.cross_decomposition.PLSCanonical": [[483, "sklearn-cross-decomposition-plscanonical"]], "Examples using sklearn.cross_decomposition.PLSCanonical": [[483, "examples-using-sklearn-cross-decomposition-plscanonical"]], "sklearn.cross_decomposition.PLSRegression": [[484, "sklearn-cross-decomposition-plsregression"]], "Examples using sklearn.cross_decomposition.PLSRegression": [[484, "examples-using-sklearn-cross-decomposition-plsregression"]], "sklearn.cross_decomposition.PLSSVD": [[485, "sklearn-cross-decomposition-plssvd"]], "sklearn.datasets.clear_data_home": [[486, "sklearn-datasets-clear-data-home"]], "sklearn.datasets.dump_svmlight_file": [[487, "sklearn-datasets-dump-svmlight-file"]], "Examples using sklearn.datasets.dump_svmlight_file": [[487, "examples-using-sklearn-datasets-dump-svmlight-file"]], "sklearn.datasets.fetch_20newsgroups": [[488, "sklearn-datasets-fetch-20newsgroups"]], "Examples using sklearn.datasets.fetch_20newsgroups": [[488, "examples-using-sklearn-datasets-fetch-20newsgroups"]], "sklearn.datasets.fetch_20newsgroups_vectorized": [[489, "sklearn-datasets-fetch-20newsgroups-vectorized"]], "Examples using sklearn.datasets.fetch_20newsgroups_vectorized": [[489, "examples-using-sklearn-datasets-fetch-20newsgroups-vectorized"]], "sklearn.datasets.fetch_california_housing": [[490, "sklearn-datasets-fetch-california-housing"]], "Examples using sklearn.datasets.fetch_california_housing": [[490, "examples-using-sklearn-datasets-fetch-california-housing"]], "sklearn.datasets.fetch_covtype": [[491, "sklearn-datasets-fetch-covtype"]], "Examples using sklearn.datasets.fetch_covtype": [[491, "examples-using-sklearn-datasets-fetch-covtype"]], "sklearn.datasets.fetch_kddcup99": [[492, "sklearn-datasets-fetch-kddcup99"]], "Examples using sklearn.datasets.fetch_kddcup99": [[492, "examples-using-sklearn-datasets-fetch-kddcup99"]], "sklearn.datasets.fetch_lfw_pairs": [[493, "sklearn-datasets-fetch-lfw-pairs"]], "sklearn.datasets.fetch_lfw_people": [[494, "sklearn-datasets-fetch-lfw-people"]], "Examples using sklearn.datasets.fetch_lfw_people": [[494, "examples-using-sklearn-datasets-fetch-lfw-people"]], "sklearn.datasets.fetch_olivetti_faces": [[495, "sklearn-datasets-fetch-olivetti-faces"]], "Examples using sklearn.datasets.fetch_olivetti_faces": [[495, "examples-using-sklearn-datasets-fetch-olivetti-faces"]], "sklearn.datasets.fetch_openml": [[496, "sklearn-datasets-fetch-openml"]], "Examples using sklearn.datasets.fetch_openml": [[496, "examples-using-sklearn-datasets-fetch-openml"]], "sklearn.datasets.fetch_rcv1": [[497, "sklearn-datasets-fetch-rcv1"]], "sklearn.datasets.fetch_species_distributions": [[498, "sklearn-datasets-fetch-species-distributions"]], "Examples using sklearn.datasets.fetch_species_distributions": [[498, "examples-using-sklearn-datasets-fetch-species-distributions"]], "sklearn.datasets.get_data_home": [[499, "sklearn-datasets-get-data-home"]], "Examples using sklearn.datasets.get_data_home": [[499, "examples-using-sklearn-datasets-get-data-home"]], "sklearn.datasets.load_breast_cancer": [[500, "sklearn-datasets-load-breast-cancer"]], "Examples using sklearn.datasets.load_breast_cancer": [[500, "examples-using-sklearn-datasets-load-breast-cancer"]], "sklearn.datasets.load_diabetes": [[501, "sklearn-datasets-load-diabetes"]], "Examples using sklearn.datasets.load_diabetes": [[501, "examples-using-sklearn-datasets-load-diabetes"]], "sklearn.datasets.load_digits": [[502, "sklearn-datasets-load-digits"]], "Examples using sklearn.datasets.load_digits": [[502, "examples-using-sklearn-datasets-load-digits"]], "sklearn.datasets.load_files": [[503, "sklearn-datasets-load-files"]], "sklearn.datasets.load_iris": [[504, "sklearn-datasets-load-iris"]], "Examples using sklearn.datasets.load_iris": [[504, "examples-using-sklearn-datasets-load-iris"]], "sklearn.datasets.load_linnerud": [[505, "sklearn-datasets-load-linnerud"]], "sklearn.datasets.load_sample_image": [[506, "sklearn-datasets-load-sample-image"]], "Examples using sklearn.datasets.load_sample_image": [[506, "examples-using-sklearn-datasets-load-sample-image"]], "sklearn.datasets.load_sample_images": [[507, "sklearn-datasets-load-sample-images"]], "sklearn.datasets.load_svmlight_file": [[508, "sklearn-datasets-load-svmlight-file"]], "sklearn.datasets.load_svmlight_files": [[509, "sklearn-datasets-load-svmlight-files"]], "sklearn.datasets.load_wine": [[510, "sklearn-datasets-load-wine"]], "Examples using sklearn.datasets.load_wine": [[510, "examples-using-sklearn-datasets-load-wine"]], "sklearn.datasets.make_biclusters": [[511, "sklearn-datasets-make-biclusters"]], "Examples using sklearn.datasets.make_biclusters": [[511, "examples-using-sklearn-datasets-make-biclusters"]], "sklearn.datasets.make_blobs": [[512, "sklearn-datasets-make-blobs"]], "Examples using sklearn.datasets.make_blobs": [[512, "examples-using-sklearn-datasets-make-blobs"]], "sklearn.datasets.make_checkerboard": [[513, "sklearn-datasets-make-checkerboard"]], "Examples using sklearn.datasets.make_checkerboard": [[513, "examples-using-sklearn-datasets-make-checkerboard"]], "sklearn.datasets.make_circles": [[514, "sklearn-datasets-make-circles"]], "Examples using sklearn.datasets.make_circles": [[514, "examples-using-sklearn-datasets-make-circles"]], "sklearn.datasets.make_classification": [[515, "sklearn-datasets-make-classification"]], "Examples using sklearn.datasets.make_classification": [[515, "examples-using-sklearn-datasets-make-classification"]], "sklearn.datasets.make_friedman1": [[516, "sklearn-datasets-make-friedman1"]], "sklearn.datasets.make_friedman2": [[517, "sklearn-datasets-make-friedman2"]], "sklearn.datasets.make_friedman3": [[518, "sklearn-datasets-make-friedman3"]], "sklearn.datasets.make_gaussian_quantiles": [[519, "sklearn-datasets-make-gaussian-quantiles"]], "Examples using sklearn.datasets.make_gaussian_quantiles": [[519, "examples-using-sklearn-datasets-make-gaussian-quantiles"]], "sklearn.datasets.make_hastie_10_2": [[520, "sklearn-datasets-make-hastie-10-2"]], "Examples using sklearn.datasets.make_hastie_10_2": [[520, "examples-using-sklearn-datasets-make-hastie-10-2"]], "sklearn.datasets.make_low_rank_matrix": [[521, "sklearn-datasets-make-low-rank-matrix"]], "Examples using sklearn.datasets.make_low_rank_matrix": [[521, "examples-using-sklearn-datasets-make-low-rank-matrix"]], "sklearn.datasets.make_moons": [[522, "sklearn-datasets-make-moons"]], "Examples using sklearn.datasets.make_moons": [[522, "examples-using-sklearn-datasets-make-moons"]], "sklearn.datasets.make_multilabel_classification": [[523, "sklearn-datasets-make-multilabel-classification"]], "Examples using sklearn.datasets.make_multilabel_classification": [[523, "examples-using-sklearn-datasets-make-multilabel-classification"]], "sklearn.datasets.make_regression": [[524, "sklearn-datasets-make-regression"]], "Examples using sklearn.datasets.make_regression": [[524, "examples-using-sklearn-datasets-make-regression"]], "sklearn.datasets.make_s_curve": [[525, "sklearn-datasets-make-s-curve"]], "Examples using sklearn.datasets.make_s_curve": [[525, "examples-using-sklearn-datasets-make-s-curve"]], "sklearn.datasets.make_sparse_coded_signal": [[526, "sklearn-datasets-make-sparse-coded-signal"]], "Examples using sklearn.datasets.make_sparse_coded_signal": [[526, "examples-using-sklearn-datasets-make-sparse-coded-signal"]], "sklearn.datasets.make_sparse_spd_matrix": [[527, "sklearn-datasets-make-sparse-spd-matrix"]], "Examples using sklearn.datasets.make_sparse_spd_matrix": [[527, "examples-using-sklearn-datasets-make-sparse-spd-matrix"]], "sklearn.datasets.make_sparse_uncorrelated": [[528, "sklearn-datasets-make-sparse-uncorrelated"]], "sklearn.datasets.make_spd_matrix": [[529, "sklearn-datasets-make-spd-matrix"]], "sklearn.datasets.make_swiss_roll": [[530, "sklearn-datasets-make-swiss-roll"]], "Examples using sklearn.datasets.make_swiss_roll": [[530, "examples-using-sklearn-datasets-make-swiss-roll"]], "sklearn.decomposition.DictionaryLearning": [[531, "sklearn-decomposition-dictionarylearning"]], "sklearn.decomposition.FactorAnalysis": [[532, "sklearn-decomposition-factoranalysis"]], "Examples using sklearn.decomposition.FactorAnalysis": [[532, "examples-using-sklearn-decomposition-factoranalysis"]], "sklearn.decomposition.FastICA": [[533, "sklearn-decomposition-fastica"]], "Examples using sklearn.decomposition.FastICA": [[533, "examples-using-sklearn-decomposition-fastica"]], "sklearn.decomposition.IncrementalPCA": [[534, "sklearn-decomposition-incrementalpca"]], "Examples using sklearn.decomposition.IncrementalPCA": [[534, "examples-using-sklearn-decomposition-incrementalpca"]], "sklearn.decomposition.KernelPCA": [[535, "sklearn-decomposition-kernelpca"]], "Examples using sklearn.decomposition.KernelPCA": [[535, "examples-using-sklearn-decomposition-kernelpca"]], "sklearn.decomposition.LatentDirichletAllocation": [[536, "sklearn-decomposition-latentdirichletallocation"]], "Examples using sklearn.decomposition.LatentDirichletAllocation": [[536, "examples-using-sklearn-decomposition-latentdirichletallocation"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[537, "sklearn-decomposition-minibatchdictionarylearning"]], "Examples using sklearn.decomposition.MiniBatchDictionaryLearning": [[537, "examples-using-sklearn-decomposition-minibatchdictionarylearning"]], "sklearn.decomposition.MiniBatchNMF": [[538, "sklearn-decomposition-minibatchnmf"]], "Examples using sklearn.decomposition.MiniBatchNMF": [[538, "examples-using-sklearn-decomposition-minibatchnmf"]], "sklearn.decomposition.MiniBatchSparsePCA": [[539, "sklearn-decomposition-minibatchsparsepca"]], "Examples using sklearn.decomposition.MiniBatchSparsePCA": [[539, "examples-using-sklearn-decomposition-minibatchsparsepca"]], "sklearn.decomposition.NMF": [[540, "sklearn-decomposition-nmf"]], "Examples using sklearn.decomposition.NMF": [[540, "examples-using-sklearn-decomposition-nmf"]], "sklearn.decomposition.PCA": [[541, "sklearn-decomposition-pca"]], "Examples using sklearn.decomposition.PCA": [[541, "examples-using-sklearn-decomposition-pca"]], "sklearn.decomposition.SparseCoder": [[542, "sklearn-decomposition-sparsecoder"]], "Examples using sklearn.decomposition.SparseCoder": [[542, "examples-using-sklearn-decomposition-sparsecoder"]], "sklearn.decomposition.SparsePCA": [[543, "sklearn-decomposition-sparsepca"]], "Examples using sklearn.decomposition.SparsePCA": [[543, "examples-using-sklearn-decomposition-sparsepca"]], "sklearn.decomposition.TruncatedSVD": [[544, "sklearn-decomposition-truncatedsvd"]], "Examples using sklearn.decomposition.TruncatedSVD": [[544, "examples-using-sklearn-decomposition-truncatedsvd"]], "sklearn.decomposition.dict_learning": [[545, "sklearn-decomposition-dict-learning"]], "sklearn.decomposition.dict_learning_online": [[546, "sklearn-decomposition-dict-learning-online"]], "sklearn.decomposition.non_negative_factorization": [[547, "sklearn-decomposition-non-negative-factorization"]], "sklearn.decomposition.sparse_encode": [[548, "sklearn-decomposition-sparse-encode"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[549, "sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[549, "examples-using-sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[550, "sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[550, "examples-using-sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "sklearn.dummy.DummyClassifier": [[551, "sklearn-dummy-dummyclassifier"]], "Examples using sklearn.dummy.DummyClassifier": [[551, "examples-using-sklearn-dummy-dummyclassifier"]], "sklearn.dummy.DummyRegressor": [[552, "sklearn-dummy-dummyregressor"]], "Examples using sklearn.dummy.DummyRegressor": [[552, "examples-using-sklearn-dummy-dummyregressor"]], "sklearn.ensemble.AdaBoostClassifier": [[553, "sklearn-ensemble-adaboostclassifier"]], "Examples using sklearn.ensemble.AdaBoostClassifier": [[553, "examples-using-sklearn-ensemble-adaboostclassifier"]], "sklearn.ensemble.AdaBoostRegressor": [[554, "sklearn-ensemble-adaboostregressor"]], "Examples using sklearn.ensemble.AdaBoostRegressor": [[554, "examples-using-sklearn-ensemble-adaboostregressor"]], "sklearn.ensemble.BaggingClassifier": [[555, "sklearn-ensemble-baggingclassifier"]], "sklearn.ensemble.BaggingRegressor": [[556, "sklearn-ensemble-baggingregressor"]], "Examples using sklearn.ensemble.BaggingRegressor": [[556, "examples-using-sklearn-ensemble-baggingregressor"]], "sklearn.ensemble.ExtraTreesClassifier": [[557, "sklearn-ensemble-extratreesclassifier"]], "Examples using sklearn.ensemble.ExtraTreesClassifier": [[557, "examples-using-sklearn-ensemble-extratreesclassifier"]], "sklearn.ensemble.ExtraTreesRegressor": [[558, "sklearn-ensemble-extratreesregressor"]], "Examples using sklearn.ensemble.ExtraTreesRegressor": [[558, "examples-using-sklearn-ensemble-extratreesregressor"]], "sklearn.ensemble.GradientBoostingClassifier": [[559, "sklearn-ensemble-gradientboostingclassifier"]], "Examples using sklearn.ensemble.GradientBoostingClassifier": [[559, "examples-using-sklearn-ensemble-gradientboostingclassifier"]], "sklearn.ensemble.GradientBoostingRegressor": [[560, "sklearn-ensemble-gradientboostingregressor"]], "Examples using sklearn.ensemble.GradientBoostingRegressor": [[560, "examples-using-sklearn-ensemble-gradientboostingregressor"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[561, "sklearn-ensemble-histgradientboostingclassifier"]], "Examples using sklearn.ensemble.HistGradientBoostingClassifier": [[561, "examples-using-sklearn-ensemble-histgradientboostingclassifier"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[562, "sklearn-ensemble-histgradientboostingregressor"]], "Examples using sklearn.ensemble.HistGradientBoostingRegressor": [[562, "examples-using-sklearn-ensemble-histgradientboostingregressor"]], "sklearn.ensemble.IsolationForest": [[563, "sklearn-ensemble-isolationforest"]], "Examples using sklearn.ensemble.IsolationForest": [[563, "examples-using-sklearn-ensemble-isolationforest"]], "sklearn.ensemble.RandomForestClassifier": [[564, "sklearn-ensemble-randomforestclassifier"]], "Examples using sklearn.ensemble.RandomForestClassifier": [[564, "examples-using-sklearn-ensemble-randomforestclassifier"]], "sklearn.ensemble.RandomForestRegressor": [[565, "sklearn-ensemble-randomforestregressor"]], "Examples using sklearn.ensemble.RandomForestRegressor": [[565, "examples-using-sklearn-ensemble-randomforestregressor"]], "sklearn.ensemble.RandomTreesEmbedding": [[566, "sklearn-ensemble-randomtreesembedding"]], "Examples using sklearn.ensemble.RandomTreesEmbedding": [[566, "examples-using-sklearn-ensemble-randomtreesembedding"]], "sklearn.ensemble.StackingClassifier": [[567, "sklearn-ensemble-stackingclassifier"]], "Examples using sklearn.ensemble.StackingClassifier": [[567, "examples-using-sklearn-ensemble-stackingclassifier"]], "sklearn.ensemble.StackingRegressor": [[568, "sklearn-ensemble-stackingregressor"]], "Examples using sklearn.ensemble.StackingRegressor": [[568, "examples-using-sklearn-ensemble-stackingregressor"]], "sklearn.ensemble.VotingClassifier": [[569, "sklearn-ensemble-votingclassifier"]], "Examples using sklearn.ensemble.VotingClassifier": [[569, "examples-using-sklearn-ensemble-votingclassifier"]], "sklearn.ensemble.VotingRegressor": [[570, "sklearn-ensemble-votingregressor"]], "Examples using sklearn.ensemble.VotingRegressor": [[570, "examples-using-sklearn-ensemble-votingregressor"]], "sklearn.exceptions.ConvergenceWarning": [[571, "sklearn-exceptions-convergencewarning"]], "Examples using sklearn.exceptions.ConvergenceWarning": [[571, "examples-using-sklearn-exceptions-convergencewarning"]], "sklearn.exceptions.DataConversionWarning": [[572, "sklearn-exceptions-dataconversionwarning"]], "sklearn.exceptions.DataDimensionalityWarning": [[573, "sklearn-exceptions-datadimensionalitywarning"]], "sklearn.exceptions.EfficiencyWarning": [[574, "sklearn-exceptions-efficiencywarning"]], "sklearn.exceptions.FitFailedWarning": [[575, "sklearn-exceptions-fitfailedwarning"]], "sklearn.exceptions.InconsistentVersionWarning": [[576, "sklearn-exceptions-inconsistentversionwarning"]], "sklearn.exceptions.NotFittedError": [[577, "sklearn-exceptions-notfittederror"]], "sklearn.exceptions.UndefinedMetricWarning": [[578, "sklearn-exceptions-undefinedmetricwarning"]], "sklearn.experimental.enable_halving_search_cv": [[579, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[580, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.feature_extraction.DictVectorizer": [[581, "sklearn-feature-extraction-dictvectorizer"]], "Examples using sklearn.feature_extraction.DictVectorizer": [[581, "examples-using-sklearn-feature-extraction-dictvectorizer"]], "sklearn.feature_extraction.FeatureHasher": [[582, "sklearn-feature-extraction-featurehasher"]], "Examples using sklearn.feature_extraction.FeatureHasher": [[582, "examples-using-sklearn-feature-extraction-featurehasher"]], "sklearn.feature_extraction.image.PatchExtractor": [[583, "sklearn-feature-extraction-image-patchextractor"]], "sklearn.feature_extraction.image.extract_patches_2d": [[584, "sklearn-feature-extraction-image-extract-patches-2d"]], "Examples using sklearn.feature_extraction.image.extract_patches_2d": [[584, "examples-using-sklearn-feature-extraction-image-extract-patches-2d"]], "sklearn.feature_extraction.image.grid_to_graph": [[585, "sklearn-feature-extraction-image-grid-to-graph"]], "sklearn.feature_extraction.image.img_to_graph": [[586, "sklearn-feature-extraction-image-img-to-graph"]], "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[587, "sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "Examples using sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[587, "examples-using-sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "sklearn.feature_extraction.text.CountVectorizer": [[588, "sklearn-feature-extraction-text-countvectorizer"]], "Examples using sklearn.feature_extraction.text.CountVectorizer": [[588, "examples-using-sklearn-feature-extraction-text-countvectorizer"]], "sklearn.feature_extraction.text.HashingVectorizer": [[589, "sklearn-feature-extraction-text-hashingvectorizer"]], "Examples using sklearn.feature_extraction.text.HashingVectorizer": [[589, "examples-using-sklearn-feature-extraction-text-hashingvectorizer"]], "sklearn.feature_extraction.text.TfidfTransformer": [[590, "sklearn-feature-extraction-text-tfidftransformer"]], "Examples using sklearn.feature_extraction.text.TfidfTransformer": [[590, "examples-using-sklearn-feature-extraction-text-tfidftransformer"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[591, "sklearn-feature-extraction-text-tfidfvectorizer"]], "Examples using sklearn.feature_extraction.text.TfidfVectorizer": [[591, "examples-using-sklearn-feature-extraction-text-tfidfvectorizer"]], "sklearn.feature_selection.GenericUnivariateSelect": [[592, "sklearn-feature-selection-genericunivariateselect"]], "sklearn.feature_selection.RFE": [[593, "sklearn-feature-selection-rfe"]], "Examples using sklearn.feature_selection.RFE": [[593, "examples-using-sklearn-feature-selection-rfe"]], "sklearn.feature_selection.RFECV": [[594, "sklearn-feature-selection-rfecv"]], "Examples using sklearn.feature_selection.RFECV": [[594, "examples-using-sklearn-feature-selection-rfecv"]], "sklearn.feature_selection.SelectFdr": [[595, "sklearn-feature-selection-selectfdr"]], "sklearn.feature_selection.SelectFpr": [[596, "sklearn-feature-selection-selectfpr"]], "sklearn.feature_selection.SelectFromModel": [[597, "sklearn-feature-selection-selectfrommodel"]], "Examples using sklearn.feature_selection.SelectFromModel": [[597, "examples-using-sklearn-feature-selection-selectfrommodel"]], "sklearn.feature_selection.SelectFwe": [[598, "sklearn-feature-selection-selectfwe"]], "sklearn.feature_selection.SelectKBest": [[599, "sklearn-feature-selection-selectkbest"]], "Examples using sklearn.feature_selection.SelectKBest": [[599, "examples-using-sklearn-feature-selection-selectkbest"]], "sklearn.feature_selection.SelectPercentile": [[600, "sklearn-feature-selection-selectpercentile"]], "Examples using sklearn.feature_selection.SelectPercentile": [[600, "examples-using-sklearn-feature-selection-selectpercentile"]], "sklearn.feature_selection.SelectorMixin": [[601, "sklearn-feature-selection-selectormixin"]], "sklearn.feature_selection.SequentialFeatureSelector": [[602, "sklearn-feature-selection-sequentialfeatureselector"]], "Examples using sklearn.feature_selection.SequentialFeatureSelector": [[602, "examples-using-sklearn-feature-selection-sequentialfeatureselector"]], "sklearn.feature_selection.VarianceThreshold": [[603, "sklearn-feature-selection-variancethreshold"]], "sklearn.feature_selection.chi2": [[604, "sklearn-feature-selection-chi2"]], "Examples using sklearn.feature_selection.chi2": [[604, "examples-using-sklearn-feature-selection-chi2"]], "sklearn.feature_selection.f_classif": [[605, "sklearn-feature-selection-f-classif"]], "Examples using sklearn.feature_selection.f_classif": [[605, "examples-using-sklearn-feature-selection-f-classif"]], "sklearn.feature_selection.f_regression": [[606, "sklearn-feature-selection-f-regression"]], "Examples using sklearn.feature_selection.f_regression": [[606, "examples-using-sklearn-feature-selection-f-regression"]], "sklearn.feature_selection.mutual_info_classif": [[607, "sklearn-feature-selection-mutual-info-classif"]], "Examples using sklearn.feature_selection.mutual_info_classif": [[607, "examples-using-sklearn-feature-selection-mutual-info-classif"]], "sklearn.feature_selection.mutual_info_regression": [[608, "sklearn-feature-selection-mutual-info-regression"]], "Examples using sklearn.feature_selection.mutual_info_regression": [[608, "examples-using-sklearn-feature-selection-mutual-info-regression"]], "sklearn.feature_selection.r_regression": [[609, "sklearn-feature-selection-r-regression"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[610, "sklearn-gaussian-process-gaussianprocessclassifier"]], "Examples using sklearn.gaussian_process.GaussianProcessClassifier": [[610, "examples-using-sklearn-gaussian-process-gaussianprocessclassifier"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[611, "sklearn-gaussian-process-gaussianprocessregressor"]], "Examples using sklearn.gaussian_process.GaussianProcessRegressor": [[611, "examples-using-sklearn-gaussian-process-gaussianprocessregressor"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[612, "sklearn-gaussian-process-kernels-compoundkernel"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[613, "sklearn-gaussian-process-kernels-constantkernel"]], "Examples using sklearn.gaussian_process.kernels.ConstantKernel": [[613, "examples-using-sklearn-gaussian-process-kernels-constantkernel"]], "sklearn.gaussian_process.kernels.DotProduct": [[614, "sklearn-gaussian-process-kernels-dotproduct"]], "Examples using sklearn.gaussian_process.kernels.DotProduct": [[614, "examples-using-sklearn-gaussian-process-kernels-dotproduct"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[615, "sklearn-gaussian-process-kernels-expsinesquared"]], "Examples using sklearn.gaussian_process.kernels.ExpSineSquared": [[615, "examples-using-sklearn-gaussian-process-kernels-expsinesquared"]], "sklearn.gaussian_process.kernels.Exponentiation": [[616, "sklearn-gaussian-process-kernels-exponentiation"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[617, "sklearn-gaussian-process-kernels-hyperparameter"]], "Examples using sklearn.gaussian_process.kernels.Hyperparameter": [[617, "examples-using-sklearn-gaussian-process-kernels-hyperparameter"]], "sklearn.gaussian_process.kernels.Kernel": [[618, "sklearn-gaussian-process-kernels-kernel"]], "Examples using sklearn.gaussian_process.kernels.Kernel": [[618, "examples-using-sklearn-gaussian-process-kernels-kernel"]], "sklearn.gaussian_process.kernels.Matern": [[619, "sklearn-gaussian-process-kernels-matern"]], "Examples using sklearn.gaussian_process.kernels.Matern": [[619, "examples-using-sklearn-gaussian-process-kernels-matern"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[620, "sklearn-gaussian-process-kernels-pairwisekernel"]], "sklearn.gaussian_process.kernels.Product": [[621, "sklearn-gaussian-process-kernels-product"]], "sklearn.gaussian_process.kernels.RBF": [[622, "sklearn-gaussian-process-kernels-rbf"]], "Examples using sklearn.gaussian_process.kernels.RBF": [[622, "examples-using-sklearn-gaussian-process-kernels-rbf"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[623, "sklearn-gaussian-process-kernels-rationalquadratic"]], "Examples using sklearn.gaussian_process.kernels.RationalQuadratic": [[623, "examples-using-sklearn-gaussian-process-kernels-rationalquadratic"]], "sklearn.gaussian_process.kernels.Sum": [[624, "sklearn-gaussian-process-kernels-sum"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[625, "sklearn-gaussian-process-kernels-whitekernel"]], "Examples using sklearn.gaussian_process.kernels.WhiteKernel": [[625, "examples-using-sklearn-gaussian-process-kernels-whitekernel"]], "sklearn.get_config": [[626, "sklearn-get-config"]], "sklearn.impute.IterativeImputer": [[627, "sklearn-impute-iterativeimputer"]], "Examples using sklearn.impute.IterativeImputer": [[627, "examples-using-sklearn-impute-iterativeimputer"]], "sklearn.impute.KNNImputer": [[628, "sklearn-impute-knnimputer"]], "Examples using sklearn.impute.KNNImputer": [[628, "examples-using-sklearn-impute-knnimputer"]], "sklearn.impute.MissingIndicator": [[629, "sklearn-impute-missingindicator"]], "sklearn.impute.SimpleImputer": [[630, "sklearn-impute-simpleimputer"]], "Examples using sklearn.impute.SimpleImputer": [[630, "examples-using-sklearn-impute-simpleimputer"]], "sklearn.inspection.DecisionBoundaryDisplay": [[631, "sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay": [[631, "examples-using-sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay.from_estimator": [[631, "examples-using-sklearn-inspection-decisionboundarydisplay-from-estimator"]], "sklearn.inspection.PartialDependenceDisplay": [[632, "sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay": [[632, "examples-using-sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay.from_estimator": [[632, "examples-using-sklearn-inspection-partialdependencedisplay-from-estimator"]], "sklearn.inspection.partial_dependence": [[633, "sklearn-inspection-partial-dependence"]], "Examples using sklearn.inspection.partial_dependence": [[633, "examples-using-sklearn-inspection-partial-dependence"]], "sklearn.inspection.permutation_importance": [[634, "sklearn-inspection-permutation-importance"]], "Examples using sklearn.inspection.permutation_importance": [[634, "examples-using-sklearn-inspection-permutation-importance"]], "sklearn.isotonic.IsotonicRegression": [[635, "sklearn-isotonic-isotonicregression"]], "Examples using sklearn.isotonic.IsotonicRegression": [[635, "examples-using-sklearn-isotonic-isotonicregression"]], "sklearn.isotonic.check_increasing": [[636, "sklearn-isotonic-check-increasing"]], "sklearn.isotonic.isotonic_regression": [[637, "sklearn-isotonic-isotonic-regression"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[638, "sklearn-kernel-approximation-additivechi2sampler"]], "sklearn.kernel_approximation.Nystroem": [[639, "sklearn-kernel-approximation-nystroem"]], "Examples using sklearn.kernel_approximation.Nystroem": [[639, "examples-using-sklearn-kernel-approximation-nystroem"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[640, "sklearn-kernel-approximation-polynomialcountsketch"]], "Examples using sklearn.kernel_approximation.PolynomialCountSketch": [[640, "examples-using-sklearn-kernel-approximation-polynomialcountsketch"]], "sklearn.kernel_approximation.RBFSampler": [[641, "sklearn-kernel-approximation-rbfsampler"]], "Examples using sklearn.kernel_approximation.RBFSampler": [[641, "examples-using-sklearn-kernel-approximation-rbfsampler"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[642, "sklearn-kernel-approximation-skewedchi2sampler"]], "sklearn.kernel_ridge.KernelRidge": [[643, "sklearn-kernel-ridge-kernelridge"]], "Examples using sklearn.kernel_ridge.KernelRidge": [[643, "examples-using-sklearn-kernel-ridge-kernelridge"]], "sklearn.linear_model.ARDRegression": [[644, "sklearn-linear-model-ardregression"]], "Examples using sklearn.linear_model.ARDRegression": [[644, "examples-using-sklearn-linear-model-ardregression"]], "sklearn.linear_model.BayesianRidge": [[645, "sklearn-linear-model-bayesianridge"]], "Examples using sklearn.linear_model.BayesianRidge": [[645, "examples-using-sklearn-linear-model-bayesianridge"]], "sklearn.linear_model.ElasticNet": [[646, "sklearn-linear-model-elasticnet"]], "Examples using sklearn.linear_model.ElasticNet": [[646, "examples-using-sklearn-linear-model-elasticnet"]], "sklearn.linear_model.ElasticNetCV": [[647, "sklearn-linear-model-elasticnetcv"]], "Examples using sklearn.linear_model.ElasticNetCV": [[647, "examples-using-sklearn-linear-model-elasticnetcv"]], "sklearn.linear_model.GammaRegressor": [[648, "sklearn-linear-model-gammaregressor"]], "Examples using sklearn.linear_model.GammaRegressor": [[648, "examples-using-sklearn-linear-model-gammaregressor"]], "sklearn.linear_model.HuberRegressor": [[649, "sklearn-linear-model-huberregressor"]], "Examples using sklearn.linear_model.HuberRegressor": [[649, "examples-using-sklearn-linear-model-huberregressor"]], "sklearn.linear_model.Lars": [[650, "sklearn-linear-model-lars"]], "sklearn.linear_model.LarsCV": [[651, "sklearn-linear-model-larscv"]], "sklearn.linear_model.Lasso": [[652, "sklearn-linear-model-lasso"]], "Examples using sklearn.linear_model.Lasso": [[652, "examples-using-sklearn-linear-model-lasso"]], "sklearn.linear_model.LassoCV": [[653, "sklearn-linear-model-lassocv"]], "Examples using sklearn.linear_model.LassoCV": [[653, "examples-using-sklearn-linear-model-lassocv"]], "sklearn.linear_model.LassoLars": [[654, "sklearn-linear-model-lassolars"]], "sklearn.linear_model.LassoLarsCV": [[655, "sklearn-linear-model-lassolarscv"]], "Examples using sklearn.linear_model.LassoLarsCV": [[655, "examples-using-sklearn-linear-model-lassolarscv"]], "sklearn.linear_model.LassoLarsIC": [[656, "sklearn-linear-model-lassolarsic"]], "Examples using sklearn.linear_model.LassoLarsIC": [[656, "examples-using-sklearn-linear-model-lassolarsic"]], "sklearn.linear_model.LinearRegression": [[657, "sklearn-linear-model-linearregression"]], "Examples using sklearn.linear_model.LinearRegression": [[657, "examples-using-sklearn-linear-model-linearregression"]], "sklearn.linear_model.LogisticRegression": [[658, "sklearn-linear-model-logisticregression"]], "Examples using sklearn.linear_model.LogisticRegression": [[658, "examples-using-sklearn-linear-model-logisticregression"]], "sklearn.linear_model.LogisticRegressionCV": [[659, "sklearn-linear-model-logisticregressioncv"]], "Examples using sklearn.linear_model.LogisticRegressionCV": [[659, "examples-using-sklearn-linear-model-logisticregressioncv"]], "sklearn.linear_model.MultiTaskElasticNet": [[660, "sklearn-linear-model-multitaskelasticnet"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[661, "sklearn-linear-model-multitaskelasticnetcv"]], "sklearn.linear_model.MultiTaskLasso": [[662, "sklearn-linear-model-multitasklasso"]], "Examples using sklearn.linear_model.MultiTaskLasso": [[662, "examples-using-sklearn-linear-model-multitasklasso"]], "sklearn.linear_model.MultiTaskLassoCV": [[663, "sklearn-linear-model-multitasklassocv"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[664, "sklearn-linear-model-orthogonalmatchingpursuit"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuit": [[664, "examples-using-sklearn-linear-model-orthogonalmatchingpursuit"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[665, "sklearn-linear-model-orthogonalmatchingpursuitcv"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuitCV": [[665, "examples-using-sklearn-linear-model-orthogonalmatchingpursuitcv"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[666, "sklearn-linear-model-passiveaggressiveclassifier"]], "Examples using sklearn.linear_model.PassiveAggressiveClassifier": [[666, "examples-using-sklearn-linear-model-passiveaggressiveclassifier"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[667, "sklearn-linear-model-passiveaggressiveregressor"]], "sklearn.linear_model.Perceptron": [[668, "sklearn-linear-model-perceptron"]], "Examples using sklearn.linear_model.Perceptron": [[668, "examples-using-sklearn-linear-model-perceptron"]], "sklearn.linear_model.PoissonRegressor": [[669, "sklearn-linear-model-poissonregressor"]], "Examples using sklearn.linear_model.PoissonRegressor": [[669, "examples-using-sklearn-linear-model-poissonregressor"]], "sklearn.linear_model.QuantileRegressor": [[670, "sklearn-linear-model-quantileregressor"]], "Examples using sklearn.linear_model.QuantileRegressor": [[670, "examples-using-sklearn-linear-model-quantileregressor"]], "sklearn.linear_model.RANSACRegressor": [[671, "sklearn-linear-model-ransacregressor"]], "Examples using sklearn.linear_model.RANSACRegressor": [[671, "examples-using-sklearn-linear-model-ransacregressor"]], "sklearn.linear_model.Ridge": [[672, "sklearn-linear-model-ridge"]], "Examples using sklearn.linear_model.Ridge": [[672, "examples-using-sklearn-linear-model-ridge"]], "sklearn.linear_model.RidgeCV": [[673, "sklearn-linear-model-ridgecv"]], "Examples using sklearn.linear_model.RidgeCV": [[673, "examples-using-sklearn-linear-model-ridgecv"]], "sklearn.linear_model.RidgeClassifier": [[674, "sklearn-linear-model-ridgeclassifier"]], "Examples using sklearn.linear_model.RidgeClassifier": [[674, "examples-using-sklearn-linear-model-ridgeclassifier"]], "sklearn.linear_model.RidgeClassifierCV": [[675, "sklearn-linear-model-ridgeclassifiercv"]], "sklearn.linear_model.SGDClassifier": [[676, "sklearn-linear-model-sgdclassifier"]], "Examples using sklearn.linear_model.SGDClassifier": [[676, "examples-using-sklearn-linear-model-sgdclassifier"]], "sklearn.linear_model.SGDOneClassSVM": [[677, "sklearn-linear-model-sgdoneclasssvm"]], "Examples using sklearn.linear_model.SGDOneClassSVM": [[677, "examples-using-sklearn-linear-model-sgdoneclasssvm"]], "sklearn.linear_model.SGDRegressor": [[678, "sklearn-linear-model-sgdregressor"]], "Examples using sklearn.linear_model.SGDRegressor": [[678, "examples-using-sklearn-linear-model-sgdregressor"]], "sklearn.linear_model.TheilSenRegressor": [[679, "sklearn-linear-model-theilsenregressor"]], "Examples using sklearn.linear_model.TheilSenRegressor": [[679, "examples-using-sklearn-linear-model-theilsenregressor"]], "sklearn.linear_model.TweedieRegressor": [[680, "sklearn-linear-model-tweedieregressor"]], "Examples using sklearn.linear_model.TweedieRegressor": [[680, "examples-using-sklearn-linear-model-tweedieregressor"]], "sklearn.linear_model.enet_path": [[681, "sklearn-linear-model-enet-path"]], "Examples using sklearn.linear_model.enet_path": [[681, "examples-using-sklearn-linear-model-enet-path"]], "sklearn.linear_model.lars_path": [[682, "sklearn-linear-model-lars-path"]], "Examples using sklearn.linear_model.lars_path": [[682, "examples-using-sklearn-linear-model-lars-path"]], "sklearn.linear_model.lars_path_gram": [[683, "sklearn-linear-model-lars-path-gram"]], "sklearn.linear_model.lasso_path": [[684, "sklearn-linear-model-lasso-path"]], "Examples using sklearn.linear_model.lasso_path": [[684, "examples-using-sklearn-linear-model-lasso-path"]], "sklearn.linear_model.orthogonal_mp": [[685, "sklearn-linear-model-orthogonal-mp"]], "sklearn.linear_model.orthogonal_mp_gram": [[686, "sklearn-linear-model-orthogonal-mp-gram"]], "sklearn.linear_model.ridge_regression": [[687, "sklearn-linear-model-ridge-regression"]], "sklearn.manifold.Isomap": [[688, "sklearn-manifold-isomap"]], "Examples using sklearn.manifold.Isomap": [[688, "examples-using-sklearn-manifold-isomap"]], "sklearn.manifold.LocallyLinearEmbedding": [[689, "sklearn-manifold-locallylinearembedding"]], "Examples using sklearn.manifold.LocallyLinearEmbedding": [[689, "examples-using-sklearn-manifold-locallylinearembedding"]], "sklearn.manifold.MDS": [[690, "sklearn-manifold-mds"]], "Examples using sklearn.manifold.MDS": [[690, "examples-using-sklearn-manifold-mds"]], "sklearn.manifold.SpectralEmbedding": [[691, "sklearn-manifold-spectralembedding"]], "Examples using sklearn.manifold.SpectralEmbedding": [[691, "examples-using-sklearn-manifold-spectralembedding"]], "sklearn.manifold.TSNE": [[692, "sklearn-manifold-tsne"]], "Examples using sklearn.manifold.TSNE": [[692, "examples-using-sklearn-manifold-tsne"]], "sklearn.manifold.locally_linear_embedding": [[693, "sklearn-manifold-locally-linear-embedding"]], "Examples using sklearn.manifold.locally_linear_embedding": [[693, "examples-using-sklearn-manifold-locally-linear-embedding"]], "sklearn.manifold.smacof": [[694, "sklearn-manifold-smacof"]], "sklearn.manifold.spectral_embedding": [[695, "sklearn-manifold-spectral-embedding"]], "sklearn.manifold.trustworthiness": [[696, "sklearn-manifold-trustworthiness"]], "sklearn.metrics.ConfusionMatrixDisplay": [[697, "sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay": [[697, "examples-using-sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_estimator": [[697, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-estimator"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_predictions": [[697, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-predictions"]], "sklearn.metrics.DetCurveDisplay": [[698, "sklearn-metrics-detcurvedisplay"]], "Examples using sklearn.metrics.DetCurveDisplay.from_estimator": [[698, "examples-using-sklearn-metrics-detcurvedisplay-from-estimator"]], "sklearn.metrics.DistanceMetric": [[699, "sklearn-metrics-distancemetric"]], "sklearn.metrics.PrecisionRecallDisplay": [[700, "sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay": [[700, "examples-using-sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_estimator": [[700, "examples-using-sklearn-metrics-precisionrecalldisplay-from-estimator"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_predictions": [[700, "examples-using-sklearn-metrics-precisionrecalldisplay-from-predictions"]], "sklearn.metrics.PredictionErrorDisplay": [[701, "sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay": [[701, "examples-using-sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_estimator": [[701, "examples-using-sklearn-metrics-predictionerrordisplay-from-estimator"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_predictions": [[701, "examples-using-sklearn-metrics-predictionerrordisplay-from-predictions"]], "sklearn.metrics.RocCurveDisplay": [[702, "sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay": [[702, "examples-using-sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay.from_estimator": [[702, "examples-using-sklearn-metrics-roccurvedisplay-from-estimator"]], "Examples using sklearn.metrics.RocCurveDisplay.from_predictions": [[702, "examples-using-sklearn-metrics-roccurvedisplay-from-predictions"]], "sklearn.metrics.accuracy_score": [[703, "sklearn-metrics-accuracy-score"]], "Examples using sklearn.metrics.accuracy_score": [[703, "examples-using-sklearn-metrics-accuracy-score"]], "sklearn.metrics.adjusted_mutual_info_score": [[704, "sklearn-metrics-adjusted-mutual-info-score"]], "Examples using sklearn.metrics.adjusted_mutual_info_score": [[704, "examples-using-sklearn-metrics-adjusted-mutual-info-score"]], "sklearn.metrics.adjusted_rand_score": [[705, "sklearn-metrics-adjusted-rand-score"]], "Examples using sklearn.metrics.adjusted_rand_score": [[705, "examples-using-sklearn-metrics-adjusted-rand-score"]], "sklearn.metrics.auc": [[706, "sklearn-metrics-auc"]], "Examples using sklearn.metrics.auc": [[706, "examples-using-sklearn-metrics-auc"]], "sklearn.metrics.average_precision_score": [[707, "sklearn-metrics-average-precision-score"]], "Examples using sklearn.metrics.average_precision_score": [[707, "examples-using-sklearn-metrics-average-precision-score"]], "sklearn.metrics.balanced_accuracy_score": [[708, "sklearn-metrics-balanced-accuracy-score"]], "sklearn.metrics.brier_score_loss": [[709, "sklearn-metrics-brier-score-loss"]], "Examples using sklearn.metrics.brier_score_loss": [[709, "examples-using-sklearn-metrics-brier-score-loss"]], "sklearn.metrics.calinski_harabasz_score": [[710, "sklearn-metrics-calinski-harabasz-score"]], "sklearn.metrics.check_scoring": [[711, "sklearn-metrics-check-scoring"]], "sklearn.metrics.class_likelihood_ratios": [[712, "sklearn-metrics-class-likelihood-ratios"]], "Examples using sklearn.metrics.class_likelihood_ratios": [[712, "examples-using-sklearn-metrics-class-likelihood-ratios"]], "sklearn.metrics.classification_report": [[713, "sklearn-metrics-classification-report"]], "Examples using sklearn.metrics.classification_report": [[713, "examples-using-sklearn-metrics-classification-report"]], "sklearn.metrics.cluster.contingency_matrix": [[714, "sklearn-metrics-cluster-contingency-matrix"]], "sklearn.metrics.cluster.pair_confusion_matrix": [[715, "sklearn-metrics-cluster-pair-confusion-matrix"]], "sklearn.metrics.cohen_kappa_score": [[716, "sklearn-metrics-cohen-kappa-score"]], "sklearn.metrics.completeness_score": [[717, "sklearn-metrics-completeness-score"]], "Examples using sklearn.metrics.completeness_score": [[717, "examples-using-sklearn-metrics-completeness-score"]], "sklearn.metrics.confusion_matrix": [[718, "sklearn-metrics-confusion-matrix"]], "Examples using sklearn.metrics.confusion_matrix": [[718, "examples-using-sklearn-metrics-confusion-matrix"]], "sklearn.metrics.consensus_score": [[719, "sklearn-metrics-consensus-score"]], "Examples using sklearn.metrics.consensus_score": [[719, "examples-using-sklearn-metrics-consensus-score"]], "sklearn.metrics.coverage_error": [[720, "sklearn-metrics-coverage-error"]], "sklearn.metrics.d2_absolute_error_score": [[721, "sklearn-metrics-d2-absolute-error-score"]], "sklearn.metrics.d2_pinball_score": [[722, "sklearn-metrics-d2-pinball-score"]], "sklearn.metrics.d2_tweedie_score": [[723, "sklearn-metrics-d2-tweedie-score"]], "sklearn.metrics.davies_bouldin_score": [[724, "sklearn-metrics-davies-bouldin-score"]], "sklearn.metrics.dcg_score": [[725, "sklearn-metrics-dcg-score"]], "sklearn.metrics.det_curve": [[726, "sklearn-metrics-det-curve"]], "Examples using sklearn.metrics.det_curve": [[726, "examples-using-sklearn-metrics-det-curve"]], "sklearn.metrics.explained_variance_score": [[727, "sklearn-metrics-explained-variance-score"]], "sklearn.metrics.f1_score": [[728, "sklearn-metrics-f1-score"]], "Examples using sklearn.metrics.f1_score": [[728, "examples-using-sklearn-metrics-f1-score"]], "sklearn.metrics.fbeta_score": [[729, "sklearn-metrics-fbeta-score"]], "sklearn.metrics.fowlkes_mallows_score": [[730, "sklearn-metrics-fowlkes-mallows-score"]], "sklearn.metrics.get_scorer": [[731, "sklearn-metrics-get-scorer"]], "Examples using sklearn.metrics.get_scorer": [[731, "examples-using-sklearn-metrics-get-scorer"]], "sklearn.metrics.get_scorer_names": [[732, "sklearn-metrics-get-scorer-names"]], "sklearn.metrics.hamming_loss": [[733, "sklearn-metrics-hamming-loss"]], "Examples using sklearn.metrics.hamming_loss": [[733, "examples-using-sklearn-metrics-hamming-loss"]], "sklearn.metrics.hinge_loss": [[734, "sklearn-metrics-hinge-loss"]], "Examples using sklearn.metrics.hinge_loss": [[734, "examples-using-sklearn-metrics-hinge-loss"]], "sklearn.metrics.homogeneity_completeness_v_measure": [[735, "sklearn-metrics-homogeneity-completeness-v-measure"]], "sklearn.metrics.homogeneity_score": [[736, "sklearn-metrics-homogeneity-score"]], "Examples using sklearn.metrics.homogeneity_score": [[736, "examples-using-sklearn-metrics-homogeneity-score"]], "sklearn.metrics.jaccard_score": [[737, "sklearn-metrics-jaccard-score"]], "Examples using sklearn.metrics.jaccard_score": [[737, "examples-using-sklearn-metrics-jaccard-score"]], "sklearn.metrics.label_ranking_average_precision_score": [[738, "sklearn-metrics-label-ranking-average-precision-score"]], "sklearn.metrics.label_ranking_loss": [[739, "sklearn-metrics-label-ranking-loss"]], "sklearn.metrics.log_loss": [[740, "sklearn-metrics-log-loss"]], "Examples using sklearn.metrics.log_loss": [[740, "examples-using-sklearn-metrics-log-loss"]], "sklearn.metrics.make_scorer": [[741, "sklearn-metrics-make-scorer"]], "Examples using sklearn.metrics.make_scorer": [[741, "examples-using-sklearn-metrics-make-scorer"]], "sklearn.metrics.matthews_corrcoef": [[742, "sklearn-metrics-matthews-corrcoef"]], "sklearn.metrics.max_error": [[743, "sklearn-metrics-max-error"]], "sklearn.metrics.mean_absolute_error": [[744, "sklearn-metrics-mean-absolute-error"]], "Examples using sklearn.metrics.mean_absolute_error": [[744, "examples-using-sklearn-metrics-mean-absolute-error"]], "sklearn.metrics.mean_absolute_percentage_error": [[745, "sklearn-metrics-mean-absolute-percentage-error"]], "Examples using sklearn.metrics.mean_absolute_percentage_error": [[745, "examples-using-sklearn-metrics-mean-absolute-percentage-error"]], "sklearn.metrics.mean_gamma_deviance": [[746, "sklearn-metrics-mean-gamma-deviance"]], "sklearn.metrics.mean_pinball_loss": [[747, "sklearn-metrics-mean-pinball-loss"]], "Examples using sklearn.metrics.mean_pinball_loss": [[747, "examples-using-sklearn-metrics-mean-pinball-loss"]], "sklearn.metrics.mean_poisson_deviance": [[748, "sklearn-metrics-mean-poisson-deviance"]], "Examples using sklearn.metrics.mean_poisson_deviance": [[748, "examples-using-sklearn-metrics-mean-poisson-deviance"]], "sklearn.metrics.mean_squared_error": [[749, "sklearn-metrics-mean-squared-error"]], "Examples using sklearn.metrics.mean_squared_error": [[749, "examples-using-sklearn-metrics-mean-squared-error"]], "sklearn.metrics.mean_squared_log_error": [[750, "sklearn-metrics-mean-squared-log-error"]], "sklearn.metrics.mean_tweedie_deviance": [[751, "sklearn-metrics-mean-tweedie-deviance"]], "Examples using sklearn.metrics.mean_tweedie_deviance": [[751, "examples-using-sklearn-metrics-mean-tweedie-deviance"]], "sklearn.metrics.median_absolute_error": [[752, "sklearn-metrics-median-absolute-error"]], "Examples using sklearn.metrics.median_absolute_error": [[752, "examples-using-sklearn-metrics-median-absolute-error"]], "sklearn.metrics.multilabel_confusion_matrix": [[753, "sklearn-metrics-multilabel-confusion-matrix"]], "sklearn.metrics.mutual_info_score": [[754, "sklearn-metrics-mutual-info-score"]], "Examples using sklearn.metrics.mutual_info_score": [[754, "examples-using-sklearn-metrics-mutual-info-score"]], "sklearn.metrics.ndcg_score": [[755, "sklearn-metrics-ndcg-score"]], "sklearn.metrics.normalized_mutual_info_score": [[756, "sklearn-metrics-normalized-mutual-info-score"]], "Examples using sklearn.metrics.normalized_mutual_info_score": [[756, "examples-using-sklearn-metrics-normalized-mutual-info-score"]], "sklearn.metrics.pairwise.additive_chi2_kernel": [[757, "sklearn-metrics-pairwise-additive-chi2-kernel"]], "sklearn.metrics.pairwise.chi2_kernel": [[758, "sklearn-metrics-pairwise-chi2-kernel"]], "sklearn.metrics.pairwise.cosine_distances": [[759, "sklearn-metrics-pairwise-cosine-distances"]], "sklearn.metrics.pairwise.cosine_similarity": [[760, "sklearn-metrics-pairwise-cosine-similarity"]], "Examples using sklearn.metrics.pairwise.cosine_similarity": [[760, "examples-using-sklearn-metrics-pairwise-cosine-similarity"]], "sklearn.metrics.pairwise.distance_metrics": [[761, "sklearn-metrics-pairwise-distance-metrics"]], "sklearn.metrics.pairwise.euclidean_distances": [[762, "sklearn-metrics-pairwise-euclidean-distances"]], "sklearn.metrics.pairwise.haversine_distances": [[763, "sklearn-metrics-pairwise-haversine-distances"]], "sklearn.metrics.pairwise.kernel_metrics": [[764, "sklearn-metrics-pairwise-kernel-metrics"]], "sklearn.metrics.pairwise.laplacian_kernel": [[765, "sklearn-metrics-pairwise-laplacian-kernel"]], "sklearn.metrics.pairwise.linear_kernel": [[766, "sklearn-metrics-pairwise-linear-kernel"]], "sklearn.metrics.pairwise.manhattan_distances": [[767, "sklearn-metrics-pairwise-manhattan-distances"]], "sklearn.metrics.pairwise.nan_euclidean_distances": [[768, "sklearn-metrics-pairwise-nan-euclidean-distances"]], "sklearn.metrics.pairwise.paired_cosine_distances": [[769, "sklearn-metrics-pairwise-paired-cosine-distances"]], "sklearn.metrics.pairwise.paired_distances": [[770, "sklearn-metrics-pairwise-paired-distances"]], "sklearn.metrics.pairwise.paired_euclidean_distances": [[771, "sklearn-metrics-pairwise-paired-euclidean-distances"]], "sklearn.metrics.pairwise.paired_manhattan_distances": [[772, "sklearn-metrics-pairwise-paired-manhattan-distances"]], "sklearn.metrics.pairwise.pairwise_kernels": [[773, "sklearn-metrics-pairwise-pairwise-kernels"]], "sklearn.metrics.pairwise.polynomial_kernel": [[774, "sklearn-metrics-pairwise-polynomial-kernel"]], "sklearn.metrics.pairwise.rbf_kernel": [[775, "sklearn-metrics-pairwise-rbf-kernel"]], "sklearn.metrics.pairwise.sigmoid_kernel": [[776, "sklearn-metrics-pairwise-sigmoid-kernel"]], "sklearn.metrics.pairwise_distances": [[777, "sklearn-metrics-pairwise-distances"]], "Examples using sklearn.metrics.pairwise_distances": [[777, "examples-using-sklearn-metrics-pairwise-distances"]], "sklearn.metrics.pairwise_distances_argmin": [[778, "sklearn-metrics-pairwise-distances-argmin"]], "Examples using sklearn.metrics.pairwise_distances_argmin": [[778, "examples-using-sklearn-metrics-pairwise-distances-argmin"]], "sklearn.metrics.pairwise_distances_argmin_min": [[779, "sklearn-metrics-pairwise-distances-argmin-min"]], "sklearn.metrics.pairwise_distances_chunked": [[780, "sklearn-metrics-pairwise-distances-chunked"]], "sklearn.metrics.precision_recall_curve": [[781, "sklearn-metrics-precision-recall-curve"]], "Examples using sklearn.metrics.precision_recall_curve": [[781, "examples-using-sklearn-metrics-precision-recall-curve"]], "sklearn.metrics.precision_recall_fscore_support": [[782, "sklearn-metrics-precision-recall-fscore-support"]], "sklearn.metrics.precision_score": [[783, "sklearn-metrics-precision-score"]], "Examples using sklearn.metrics.precision_score": [[783, "examples-using-sklearn-metrics-precision-score"]], "sklearn.metrics.r2_score": [[784, "sklearn-metrics-r2-score"]], "Examples using sklearn.metrics.r2_score": [[784, "examples-using-sklearn-metrics-r2-score"]], "sklearn.metrics.rand_score": [[785, "sklearn-metrics-rand-score"]], "Examples using sklearn.metrics.rand_score": [[785, "examples-using-sklearn-metrics-rand-score"]], "sklearn.metrics.recall_score": [[786, "sklearn-metrics-recall-score"]], "Examples using sklearn.metrics.recall_score": [[786, "examples-using-sklearn-metrics-recall-score"]], "sklearn.metrics.roc_auc_score": [[787, "sklearn-metrics-roc-auc-score"]], "Examples using sklearn.metrics.roc_auc_score": [[787, "examples-using-sklearn-metrics-roc-auc-score"]], "sklearn.metrics.roc_curve": [[788, "sklearn-metrics-roc-curve"]], "Examples using sklearn.metrics.roc_curve": [[788, "examples-using-sklearn-metrics-roc-curve"]], "sklearn.metrics.root_mean_squared_error": [[789, "sklearn-metrics-root-mean-squared-error"]], "Examples using sklearn.metrics.root_mean_squared_error": [[789, "examples-using-sklearn-metrics-root-mean-squared-error"]], "sklearn.metrics.root_mean_squared_log_error": [[790, "sklearn-metrics-root-mean-squared-log-error"]], "sklearn.metrics.silhouette_samples": [[791, "sklearn-metrics-silhouette-samples"]], "Examples using sklearn.metrics.silhouette_samples": [[791, "examples-using-sklearn-metrics-silhouette-samples"]], "sklearn.metrics.silhouette_score": [[792, "sklearn-metrics-silhouette-score"]], "Examples using sklearn.metrics.silhouette_score": [[792, "examples-using-sklearn-metrics-silhouette-score"]], "sklearn.metrics.top_k_accuracy_score": [[793, "sklearn-metrics-top-k-accuracy-score"]], "sklearn.metrics.v_measure_score": [[794, "sklearn-metrics-v-measure-score"]], "Examples using sklearn.metrics.v_measure_score": [[794, "examples-using-sklearn-metrics-v-measure-score"]], "sklearn.metrics.zero_one_loss": [[795, "sklearn-metrics-zero-one-loss"]], "sklearn.mixture.BayesianGaussianMixture": [[796, "sklearn-mixture-bayesiangaussianmixture"]], "Examples using sklearn.mixture.BayesianGaussianMixture": [[796, "examples-using-sklearn-mixture-bayesiangaussianmixture"]], "sklearn.mixture.GaussianMixture": [[797, "sklearn-mixture-gaussianmixture"]], "Examples using sklearn.mixture.GaussianMixture": [[797, "examples-using-sklearn-mixture-gaussianmixture"]], "sklearn.model_selection.GridSearchCV": [[798, "sklearn-model-selection-gridsearchcv"]], "Examples using sklearn.model_selection.GridSearchCV": [[798, "examples-using-sklearn-model-selection-gridsearchcv"]], "sklearn.model_selection.GroupKFold": [[799, "sklearn-model-selection-groupkfold"]], "Examples using sklearn.model_selection.GroupKFold": [[799, "examples-using-sklearn-model-selection-groupkfold"]], "sklearn.model_selection.GroupShuffleSplit": [[800, "sklearn-model-selection-groupshufflesplit"]], "Examples using sklearn.model_selection.GroupShuffleSplit": [[800, "examples-using-sklearn-model-selection-groupshufflesplit"]], "sklearn.model_selection.HalvingGridSearchCV": [[801, "sklearn-model-selection-halvinggridsearchcv"]], "Examples using sklearn.model_selection.HalvingGridSearchCV": [[801, "examples-using-sklearn-model-selection-halvinggridsearchcv"]], "sklearn.model_selection.HalvingRandomSearchCV": [[802, "sklearn-model-selection-halvingrandomsearchcv"]], "Examples using sklearn.model_selection.HalvingRandomSearchCV": [[802, "examples-using-sklearn-model-selection-halvingrandomsearchcv"]], "sklearn.model_selection.KFold": [[803, "sklearn-model-selection-kfold"]], "Examples using sklearn.model_selection.KFold": [[803, "examples-using-sklearn-model-selection-kfold"]], "sklearn.model_selection.LearningCurveDisplay": [[804, "sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay": [[804, "examples-using-sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay.from_estimator": [[804, "examples-using-sklearn-model-selection-learningcurvedisplay-from-estimator"]], "sklearn.model_selection.LeaveOneGroupOut": [[805, "sklearn-model-selection-leaveonegroupout"]], "sklearn.model_selection.LeaveOneOut": [[806, "sklearn-model-selection-leaveoneout"]], "sklearn.model_selection.LeavePGroupsOut": [[807, "sklearn-model-selection-leavepgroupsout"]], "sklearn.model_selection.LeavePOut": [[808, "sklearn-model-selection-leavepout"]], "sklearn.model_selection.ParameterGrid": [[809, "sklearn-model-selection-parametergrid"]], "sklearn.model_selection.ParameterSampler": [[810, "sklearn-model-selection-parametersampler"]], "sklearn.model_selection.PredefinedSplit": [[811, "sklearn-model-selection-predefinedsplit"]], "sklearn.model_selection.RandomizedSearchCV": [[812, "sklearn-model-selection-randomizedsearchcv"]], "Examples using sklearn.model_selection.RandomizedSearchCV": [[812, "examples-using-sklearn-model-selection-randomizedsearchcv"]], "sklearn.model_selection.RepeatedKFold": [[813, "sklearn-model-selection-repeatedkfold"]], "Examples using sklearn.model_selection.RepeatedKFold": [[813, "examples-using-sklearn-model-selection-repeatedkfold"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[814, "sklearn-model-selection-repeatedstratifiedkfold"]], "Examples using sklearn.model_selection.RepeatedStratifiedKFold": [[814, "examples-using-sklearn-model-selection-repeatedstratifiedkfold"]], "sklearn.model_selection.ShuffleSplit": [[815, "sklearn-model-selection-shufflesplit"]], "Examples using sklearn.model_selection.ShuffleSplit": [[815, "examples-using-sklearn-model-selection-shufflesplit"]], "sklearn.model_selection.StratifiedGroupKFold": [[816, "sklearn-model-selection-stratifiedgroupkfold"]], "Examples using sklearn.model_selection.StratifiedGroupKFold": [[816, "examples-using-sklearn-model-selection-stratifiedgroupkfold"]], "sklearn.model_selection.StratifiedKFold": [[817, "sklearn-model-selection-stratifiedkfold"]], "Examples using sklearn.model_selection.StratifiedKFold": [[817, "examples-using-sklearn-model-selection-stratifiedkfold"]], "sklearn.model_selection.StratifiedShuffleSplit": [[818, "sklearn-model-selection-stratifiedshufflesplit"]], "Examples using sklearn.model_selection.StratifiedShuffleSplit": [[818, "examples-using-sklearn-model-selection-stratifiedshufflesplit"]], "sklearn.model_selection.TimeSeriesSplit": [[819, "sklearn-model-selection-timeseriessplit"]], "Examples using sklearn.model_selection.TimeSeriesSplit": [[819, "examples-using-sklearn-model-selection-timeseriessplit"]], "sklearn.model_selection.ValidationCurveDisplay": [[820, "sklearn-model-selection-validationcurvedisplay"]], "Examples using sklearn.model_selection.ValidationCurveDisplay.from_estimator": [[820, "examples-using-sklearn-model-selection-validationcurvedisplay-from-estimator"]], "sklearn.model_selection.check_cv": [[821, "sklearn-model-selection-check-cv"]], "sklearn.model_selection.cross_val_predict": [[822, "sklearn-model-selection-cross-val-predict"]], "Examples using sklearn.model_selection.cross_val_predict": [[822, "examples-using-sklearn-model-selection-cross-val-predict"]], "sklearn.model_selection.cross_val_score": [[823, "sklearn-model-selection-cross-val-score"]], "Examples using sklearn.model_selection.cross_val_score": [[823, "examples-using-sklearn-model-selection-cross-val-score"]], "sklearn.model_selection.cross_validate": [[824, "sklearn-model-selection-cross-validate"]], "Examples using sklearn.model_selection.cross_validate": [[824, "examples-using-sklearn-model-selection-cross-validate"]], "sklearn.model_selection.learning_curve": [[825, "sklearn-model-selection-learning-curve"]], "Examples using sklearn.model_selection.learning_curve": [[825, "examples-using-sklearn-model-selection-learning-curve"]], "sklearn.model_selection.permutation_test_score": [[826, "sklearn-model-selection-permutation-test-score"]], "Examples using sklearn.model_selection.permutation_test_score": [[826, "examples-using-sklearn-model-selection-permutation-test-score"]], "sklearn.model_selection.train_test_split": [[827, "sklearn-model-selection-train-test-split"]], "Examples using sklearn.model_selection.train_test_split": [[827, "examples-using-sklearn-model-selection-train-test-split"]], "sklearn.model_selection.validation_curve": [[828, "sklearn-model-selection-validation-curve"]], "Examples using sklearn.model_selection.validation_curve": [[828, "examples-using-sklearn-model-selection-validation-curve"]], "sklearn.multiclass.OneVsOneClassifier": [[829, "sklearn-multiclass-onevsoneclassifier"]], "Examples using sklearn.multiclass.OneVsOneClassifier": [[829, "examples-using-sklearn-multiclass-onevsoneclassifier"]], "sklearn.multiclass.OneVsRestClassifier": [[830, "sklearn-multiclass-onevsrestclassifier"]], "Examples using sklearn.multiclass.OneVsRestClassifier": [[830, "examples-using-sklearn-multiclass-onevsrestclassifier"]], "sklearn.multiclass.OutputCodeClassifier": [[831, "sklearn-multiclass-outputcodeclassifier"]], "Examples using sklearn.multiclass.OutputCodeClassifier": [[831, "examples-using-sklearn-multiclass-outputcodeclassifier"]], "sklearn.multioutput.ClassifierChain": [[832, "sklearn-multioutput-classifierchain"]], "Examples using sklearn.multioutput.ClassifierChain": [[832, "examples-using-sklearn-multioutput-classifierchain"]], "sklearn.multioutput.MultiOutputClassifier": [[833, "sklearn-multioutput-multioutputclassifier"]], "sklearn.multioutput.MultiOutputRegressor": [[834, "sklearn-multioutput-multioutputregressor"]], "Examples using sklearn.multioutput.MultiOutputRegressor": [[834, "examples-using-sklearn-multioutput-multioutputregressor"]], "sklearn.multioutput.RegressorChain": [[835, "sklearn-multioutput-regressorchain"]], "sklearn.naive_bayes.BernoulliNB": [[836, "sklearn-naive-bayes-bernoullinb"]], "Examples using sklearn.naive_bayes.BernoulliNB": [[836, "examples-using-sklearn-naive-bayes-bernoullinb"]], "sklearn.naive_bayes.CategoricalNB": [[837, "sklearn-naive-bayes-categoricalnb"]], "sklearn.naive_bayes.ComplementNB": [[838, "sklearn-naive-bayes-complementnb"]], "Examples using sklearn.naive_bayes.ComplementNB": [[838, "examples-using-sklearn-naive-bayes-complementnb"]], "sklearn.naive_bayes.GaussianNB": [[839, "sklearn-naive-bayes-gaussiannb"]], "Examples using sklearn.naive_bayes.GaussianNB": [[839, "examples-using-sklearn-naive-bayes-gaussiannb"]], "sklearn.naive_bayes.MultinomialNB": [[840, "sklearn-naive-bayes-multinomialnb"]], "Examples using sklearn.naive_bayes.MultinomialNB": [[840, "examples-using-sklearn-naive-bayes-multinomialnb"]], "sklearn.neighbors.BallTree": [[841, "sklearn-neighbors-balltree"]], "sklearn.neighbors.KDTree": [[842, "sklearn-neighbors-kdtree"]], "sklearn.neighbors.KNeighborsClassifier": [[843, "sklearn-neighbors-kneighborsclassifier"]], "Examples using sklearn.neighbors.KNeighborsClassifier": [[843, "examples-using-sklearn-neighbors-kneighborsclassifier"]], "sklearn.neighbors.KNeighborsRegressor": [[844, "sklearn-neighbors-kneighborsregressor"]], "Examples using sklearn.neighbors.KNeighborsRegressor": [[844, "examples-using-sklearn-neighbors-kneighborsregressor"]], "sklearn.neighbors.KNeighborsTransformer": [[845, "sklearn-neighbors-kneighborstransformer"]], "Examples using sklearn.neighbors.KNeighborsTransformer": [[845, "examples-using-sklearn-neighbors-kneighborstransformer"]], "sklearn.neighbors.KernelDensity": [[846, "sklearn-neighbors-kerneldensity"]], "Examples using sklearn.neighbors.KernelDensity": [[846, "examples-using-sklearn-neighbors-kerneldensity"]], "sklearn.neighbors.LocalOutlierFactor": [[847, "sklearn-neighbors-localoutlierfactor"]], "Examples using sklearn.neighbors.LocalOutlierFactor": [[847, "examples-using-sklearn-neighbors-localoutlierfactor"]], "sklearn.neighbors.NearestCentroid": [[848, "sklearn-neighbors-nearestcentroid"]], "Examples using sklearn.neighbors.NearestCentroid": [[848, "examples-using-sklearn-neighbors-nearestcentroid"]], "sklearn.neighbors.NearestNeighbors": [[849, "sklearn-neighbors-nearestneighbors"]], "Examples using sklearn.neighbors.NearestNeighbors": [[849, "examples-using-sklearn-neighbors-nearestneighbors"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[850, "sklearn-neighbors-neighborhoodcomponentsanalysis"]], "Examples using sklearn.neighbors.NeighborhoodComponentsAnalysis": [[850, "examples-using-sklearn-neighbors-neighborhoodcomponentsanalysis"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[851, "sklearn-neighbors-radiusneighborsclassifier"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[852, "sklearn-neighbors-radiusneighborsregressor"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[853, "sklearn-neighbors-radiusneighborstransformer"]], "sklearn.neighbors.kneighbors_graph": [[854, "sklearn-neighbors-kneighbors-graph"]], "Examples using sklearn.neighbors.kneighbors_graph": [[854, "examples-using-sklearn-neighbors-kneighbors-graph"]], "sklearn.neighbors.radius_neighbors_graph": [[855, "sklearn-neighbors-radius-neighbors-graph"]], "sklearn.neighbors.sort_graph_by_row_values": [[856, "sklearn-neighbors-sort-graph-by-row-values"]], "sklearn.neural_network.BernoulliRBM": [[857, "sklearn-neural-network-bernoullirbm"]], "Examples using sklearn.neural_network.BernoulliRBM": [[857, "examples-using-sklearn-neural-network-bernoullirbm"]], "sklearn.neural_network.MLPClassifier": [[858, "sklearn-neural-network-mlpclassifier"]], "Examples using sklearn.neural_network.MLPClassifier": [[858, "examples-using-sklearn-neural-network-mlpclassifier"]], "sklearn.neural_network.MLPRegressor": [[859, "sklearn-neural-network-mlpregressor"]], "Examples using sklearn.neural_network.MLPRegressor": [[859, "examples-using-sklearn-neural-network-mlpregressor"]], "sklearn.pipeline.FeatureUnion": [[860, "sklearn-pipeline-featureunion"]], "Examples using sklearn.pipeline.FeatureUnion": [[860, "examples-using-sklearn-pipeline-featureunion"]], "sklearn.pipeline.Pipeline": [[861, "sklearn-pipeline-pipeline"]], "Examples using sklearn.pipeline.Pipeline": [[861, "examples-using-sklearn-pipeline-pipeline"]], "sklearn.pipeline.make_pipeline": [[862, "sklearn-pipeline-make-pipeline"]], "Examples using sklearn.pipeline.make_pipeline": [[862, "examples-using-sklearn-pipeline-make-pipeline"]], "sklearn.pipeline.make_union": [[863, "sklearn-pipeline-make-union"]], "sklearn.preprocessing.Binarizer": [[864, "sklearn-preprocessing-binarizer"]], "sklearn.preprocessing.FunctionTransformer": [[865, "sklearn-preprocessing-functiontransformer"]], "Examples using sklearn.preprocessing.FunctionTransformer": [[865, "examples-using-sklearn-preprocessing-functiontransformer"]], "sklearn.preprocessing.KBinsDiscretizer": [[866, "sklearn-preprocessing-kbinsdiscretizer"]], "Examples using sklearn.preprocessing.KBinsDiscretizer": [[866, "examples-using-sklearn-preprocessing-kbinsdiscretizer"]], "sklearn.preprocessing.KernelCenterer": [[867, "sklearn-preprocessing-kernelcenterer"]], "sklearn.preprocessing.LabelBinarizer": [[868, "sklearn-preprocessing-labelbinarizer"]], "Examples using sklearn.preprocessing.LabelBinarizer": [[868, "examples-using-sklearn-preprocessing-labelbinarizer"]], "sklearn.preprocessing.LabelEncoder": [[869, "sklearn-preprocessing-labelencoder"]], "sklearn.preprocessing.MaxAbsScaler": [[870, "sklearn-preprocessing-maxabsscaler"]], "Examples using sklearn.preprocessing.MaxAbsScaler": [[870, "examples-using-sklearn-preprocessing-maxabsscaler"]], "sklearn.preprocessing.MinMaxScaler": [[871, "sklearn-preprocessing-minmaxscaler"]], "Examples using sklearn.preprocessing.MinMaxScaler": [[871, "examples-using-sklearn-preprocessing-minmaxscaler"]], "sklearn.preprocessing.MultiLabelBinarizer": [[872, "sklearn-preprocessing-multilabelbinarizer"]], "sklearn.preprocessing.Normalizer": [[873, "sklearn-preprocessing-normalizer"]], "Examples using sklearn.preprocessing.Normalizer": [[873, "examples-using-sklearn-preprocessing-normalizer"]], "sklearn.preprocessing.OneHotEncoder": [[874, "sklearn-preprocessing-onehotencoder"]], "Examples using sklearn.preprocessing.OneHotEncoder": [[874, "examples-using-sklearn-preprocessing-onehotencoder"]], "sklearn.preprocessing.OrdinalEncoder": [[875, "sklearn-preprocessing-ordinalencoder"]], "Examples using sklearn.preprocessing.OrdinalEncoder": [[875, "examples-using-sklearn-preprocessing-ordinalencoder"]], "sklearn.preprocessing.PolynomialFeatures": [[876, "sklearn-preprocessing-polynomialfeatures"]], "Examples using sklearn.preprocessing.PolynomialFeatures": [[876, "examples-using-sklearn-preprocessing-polynomialfeatures"]], "sklearn.preprocessing.PowerTransformer": [[877, "sklearn-preprocessing-powertransformer"]], "Examples using sklearn.preprocessing.PowerTransformer": [[877, "examples-using-sklearn-preprocessing-powertransformer"]], "sklearn.preprocessing.QuantileTransformer": [[878, "sklearn-preprocessing-quantiletransformer"]], "Examples using sklearn.preprocessing.QuantileTransformer": [[878, "examples-using-sklearn-preprocessing-quantiletransformer"]], "sklearn.preprocessing.RobustScaler": [[879, "sklearn-preprocessing-robustscaler"]], "Examples using sklearn.preprocessing.RobustScaler": [[879, "examples-using-sklearn-preprocessing-robustscaler"]], "sklearn.preprocessing.SplineTransformer": [[880, "sklearn-preprocessing-splinetransformer"]], "Examples using sklearn.preprocessing.SplineTransformer": [[880, "examples-using-sklearn-preprocessing-splinetransformer"]], "sklearn.preprocessing.StandardScaler": [[881, "sklearn-preprocessing-standardscaler"]], "Examples using sklearn.preprocessing.StandardScaler": [[881, "examples-using-sklearn-preprocessing-standardscaler"]], "sklearn.preprocessing.TargetEncoder": [[882, "sklearn-preprocessing-targetencoder"]], "Examples using sklearn.preprocessing.TargetEncoder": [[882, "examples-using-sklearn-preprocessing-targetencoder"]], "sklearn.preprocessing.add_dummy_feature": [[883, "sklearn-preprocessing-add-dummy-feature"]], "sklearn.preprocessing.binarize": [[884, "sklearn-preprocessing-binarize"]], "sklearn.preprocessing.label_binarize": [[885, "sklearn-preprocessing-label-binarize"]], "Examples using sklearn.preprocessing.label_binarize": [[885, "examples-using-sklearn-preprocessing-label-binarize"]], "sklearn.preprocessing.maxabs_scale": [[886, "sklearn-preprocessing-maxabs-scale"]], "sklearn.preprocessing.minmax_scale": [[887, "sklearn-preprocessing-minmax-scale"]], "Examples using sklearn.preprocessing.minmax_scale": [[887, "examples-using-sklearn-preprocessing-minmax-scale"]], "sklearn.preprocessing.normalize": [[888, "sklearn-preprocessing-normalize"]], "sklearn.preprocessing.power_transform": [[889, "sklearn-preprocessing-power-transform"]], "sklearn.preprocessing.quantile_transform": [[890, "sklearn-preprocessing-quantile-transform"]], "Examples using sklearn.preprocessing.quantile_transform": [[890, "examples-using-sklearn-preprocessing-quantile-transform"]], "sklearn.preprocessing.robust_scale": [[891, "sklearn-preprocessing-robust-scale"]], "sklearn.preprocessing.scale": [[892, "sklearn-preprocessing-scale"]], "sklearn.random_projection.GaussianRandomProjection": [[893, "sklearn-random-projection-gaussianrandomprojection"]], "sklearn.random_projection.SparseRandomProjection": [[894, "sklearn-random-projection-sparserandomprojection"]], "Examples using sklearn.random_projection.SparseRandomProjection": [[894, "examples-using-sklearn-random-projection-sparserandomprojection"]], "sklearn.random_projection.johnson_lindenstrauss_min_dim": [[895, "sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "Examples using sklearn.random_projection.johnson_lindenstrauss_min_dim": [[895, "examples-using-sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "sklearn.semi_supervised.LabelPropagation": [[896, "sklearn-semi-supervised-labelpropagation"]], "sklearn.semi_supervised.LabelSpreading": [[897, "sklearn-semi-supervised-labelspreading"]], "Examples using sklearn.semi_supervised.LabelSpreading": [[897, "examples-using-sklearn-semi-supervised-labelspreading"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[898, "sklearn-semi-supervised-selftrainingclassifier"]], "Examples using sklearn.semi_supervised.SelfTrainingClassifier": [[898, "examples-using-sklearn-semi-supervised-selftrainingclassifier"]], "sklearn.set_config": [[899, "sklearn-set-config"]], "Examples using sklearn.set_config": [[899, "examples-using-sklearn-set-config"]], "sklearn.show_versions": [[900, "sklearn-show-versions"]], "sklearn.svm.LinearSVC": [[901, "sklearn-svm-linearsvc"]], "Examples using sklearn.svm.LinearSVC": [[901, "examples-using-sklearn-svm-linearsvc"]], "sklearn.svm.LinearSVR": [[902, "sklearn-svm-linearsvr"]], "sklearn.svm.NuSVC": [[903, "sklearn-svm-nusvc"]], "Examples using sklearn.svm.NuSVC": [[903, "examples-using-sklearn-svm-nusvc"]], "sklearn.svm.NuSVR": [[904, "sklearn-svm-nusvr"]], "Examples using sklearn.svm.NuSVR": [[904, "examples-using-sklearn-svm-nusvr"]], "sklearn.svm.OneClassSVM": [[905, "sklearn-svm-oneclasssvm"]], "Examples using sklearn.svm.OneClassSVM": [[905, "examples-using-sklearn-svm-oneclasssvm"]], "sklearn.svm.SVC": [[906, "sklearn-svm-svc"]], "Examples using sklearn.svm.SVC": [[906, "examples-using-sklearn-svm-svc"]], "sklearn.svm.SVR": [[907, "sklearn-svm-svr"]], "Examples using sklearn.svm.SVR": [[907, "examples-using-sklearn-svm-svr"]], "sklearn.svm.l1_min_c": [[908, "sklearn-svm-l1-min-c"]], "Examples using sklearn.svm.l1_min_c": [[908, "examples-using-sklearn-svm-l1-min-c"]], "sklearn.tree.DecisionTreeClassifier": [[909, "sklearn-tree-decisiontreeclassifier"]], "Examples using sklearn.tree.DecisionTreeClassifier": [[909, "examples-using-sklearn-tree-decisiontreeclassifier"]], "sklearn.tree.DecisionTreeRegressor": [[910, "sklearn-tree-decisiontreeregressor"]], "Examples using sklearn.tree.DecisionTreeRegressor": [[910, "examples-using-sklearn-tree-decisiontreeregressor"]], "sklearn.tree.ExtraTreeClassifier": [[911, "sklearn-tree-extratreeclassifier"]], "sklearn.tree.ExtraTreeRegressor": [[912, "sklearn-tree-extratreeregressor"]], "sklearn.tree.export_graphviz": [[913, "sklearn-tree-export-graphviz"]], "sklearn.tree.export_text": [[914, "sklearn-tree-export-text"]], "sklearn.tree.plot_tree": [[915, "sklearn-tree-plot-tree"]], "Examples using sklearn.tree.plot_tree": [[915, "examples-using-sklearn-tree-plot-tree"]], "sklearn.utils.Bunch": [[916, "sklearn-utils-bunch"]], "Examples using sklearn.utils.Bunch": [[916, "examples-using-sklearn-utils-bunch"]], "sklearn.utils._safe_indexing": [[917, "sklearn-utils-safe-indexing"]], "sklearn.utils.arrayfuncs.min_pos": [[918, "sklearn-utils-arrayfuncs-min-pos"]], "sklearn.utils.as_float_array": [[919, "sklearn-utils-as-float-array"]], "sklearn.utils.assert_all_finite": [[920, "sklearn-utils-assert-all-finite"]], "sklearn.utils.check_X_y": [[921, "sklearn-utils-check-x-y"]], "sklearn.utils.check_array": [[922, "sklearn-utils-check-array"]], "sklearn.utils.check_consistent_length": [[923, "sklearn-utils-check-consistent-length"]], "sklearn.utils.check_random_state": [[924, "sklearn-utils-check-random-state"]], "Examples using sklearn.utils.check_random_state": [[924, "examples-using-sklearn-utils-check-random-state"]], "sklearn.utils.check_scalar": [[925, "sklearn-utils-check-scalar"]], "sklearn.utils.class_weight.compute_class_weight": [[926, "sklearn-utils-class-weight-compute-class-weight"]], "sklearn.utils.class_weight.compute_sample_weight": [[927, "sklearn-utils-class-weight-compute-sample-weight"]], "sklearn.utils.deprecated": [[928, "sklearn-utils-deprecated"]], "sklearn.utils.discovery.all_displays": [[929, "sklearn-utils-discovery-all-displays"]], "sklearn.utils.discovery.all_estimators": [[930, "sklearn-utils-discovery-all-estimators"]], "sklearn.utils.discovery.all_functions": [[931, "sklearn-utils-discovery-all-functions"]], "sklearn.utils.estimator_checks.check_estimator": [[932, "sklearn-utils-estimator-checks-check-estimator"]], "sklearn.utils.estimator_checks.parametrize_with_checks": [[933, "sklearn-utils-estimator-checks-parametrize-with-checks"]], "Examples using sklearn.utils.estimator_checks.parametrize_with_checks": [[933, "examples-using-sklearn-utils-estimator-checks-parametrize-with-checks"]], "sklearn.utils.estimator_html_repr": [[934, "sklearn-utils-estimator-html-repr"]], "sklearn.utils.extmath.density": [[935, "sklearn-utils-extmath-density"]], "Examples using sklearn.utils.extmath.density": [[935, "examples-using-sklearn-utils-extmath-density"]], "sklearn.utils.extmath.fast_logdet": [[936, "sklearn-utils-extmath-fast-logdet"]], "sklearn.utils.extmath.randomized_range_finder": [[937, "sklearn-utils-extmath-randomized-range-finder"]], "sklearn.utils.extmath.randomized_svd": [[938, "sklearn-utils-extmath-randomized-svd"]], "sklearn.utils.extmath.safe_sparse_dot": [[939, "sklearn-utils-extmath-safe-sparse-dot"]], "sklearn.utils.extmath.weighted_mode": [[940, "sklearn-utils-extmath-weighted-mode"]], "sklearn.utils.gen_batches": [[941, "sklearn-utils-gen-batches"]], "sklearn.utils.gen_even_slices": [[942, "sklearn-utils-gen-even-slices"]], "Examples using sklearn.utils.gen_even_slices": [[942, "examples-using-sklearn-utils-gen-even-slices"]], "sklearn.utils.graph.single_source_shortest_path_length": [[943, "sklearn-utils-graph-single-source-shortest-path-length"]], "sklearn.utils.indexable": [[944, "sklearn-utils-indexable"]], "sklearn.utils.metadata_routing.MetadataRequest": [[945, "sklearn-utils-metadata-routing-metadatarequest"]], "sklearn.utils.metadata_routing.MetadataRouter": [[946, "sklearn-utils-metadata-routing-metadatarouter"]], "Examples using sklearn.utils.metadata_routing.MetadataRouter": [[946, "examples-using-sklearn-utils-metadata-routing-metadatarouter"]], "sklearn.utils.metadata_routing.MethodMapping": [[947, "sklearn-utils-metadata-routing-methodmapping"]], "Examples using sklearn.utils.metadata_routing.MethodMapping": [[947, "examples-using-sklearn-utils-metadata-routing-methodmapping"]], "sklearn.utils.metadata_routing.get_routing_for_object": [[948, "sklearn-utils-metadata-routing-get-routing-for-object"]], "Examples using sklearn.utils.metadata_routing.get_routing_for_object": [[948, "examples-using-sklearn-utils-metadata-routing-get-routing-for-object"]], "sklearn.utils.metadata_routing.process_routing": [[949, "sklearn-utils-metadata-routing-process-routing"]], "Examples using sklearn.utils.metadata_routing.process_routing": [[949, "examples-using-sklearn-utils-metadata-routing-process-routing"]], "sklearn.utils.metaestimators.available_if": [[950, "sklearn-utils-metaestimators-available-if"]], "Examples using sklearn.utils.metaestimators.available_if": [[950, "examples-using-sklearn-utils-metaestimators-available-if"]], "sklearn.utils.multiclass.is_multilabel": [[951, "sklearn-utils-multiclass-is-multilabel"]], "sklearn.utils.multiclass.type_of_target": [[952, "sklearn-utils-multiclass-type-of-target"]], "sklearn.utils.multiclass.unique_labels": [[953, "sklearn-utils-multiclass-unique-labels"]], "sklearn.utils.murmurhash3_32": [[954, "sklearn-utils-murmurhash3-32"]], "sklearn.utils.parallel.Parallel": [[955, "sklearn-utils-parallel-parallel"]], "sklearn.utils.parallel.delayed": [[956, "sklearn-utils-parallel-delayed"]], "sklearn.utils.parallel_backend": [[957, "sklearn-utils-parallel-backend"]], "sklearn.utils.random.sample_without_replacement": [[958, "sklearn-utils-random-sample-without-replacement"]], "sklearn.utils.register_parallel_backend": [[959, "sklearn-utils-register-parallel-backend"]], "sklearn.utils.resample": [[960, "sklearn-utils-resample"]], "sklearn.utils.safe_mask": [[961, "sklearn-utils-safe-mask"]], "sklearn.utils.safe_sqr": [[962, "sklearn-utils-safe-sqr"]], "sklearn.utils.shuffle": [[963, "sklearn-utils-shuffle"]], "Examples using sklearn.utils.shuffle": [[963, "examples-using-sklearn-utils-shuffle"]], "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [[964, "sklearn-utils-sparsefuncs-incr-mean-variance-axis"]], "sklearn.utils.sparsefuncs.inplace_column_scale": [[965, "sklearn-utils-sparsefuncs-inplace-column-scale"]], "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [[966, "sklearn-utils-sparsefuncs-inplace-csr-column-scale"]], "sklearn.utils.sparsefuncs.inplace_row_scale": [[967, "sklearn-utils-sparsefuncs-inplace-row-scale"]], "sklearn.utils.sparsefuncs.inplace_swap_column": [[968, "sklearn-utils-sparsefuncs-inplace-swap-column"]], "sklearn.utils.sparsefuncs.inplace_swap_row": [[969, "sklearn-utils-sparsefuncs-inplace-swap-row"]], "sklearn.utils.sparsefuncs.mean_variance_axis": [[970, "sklearn-utils-sparsefuncs-mean-variance-axis"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1": [[971, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l1"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2": [[972, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l2"]], "sklearn.utils.validation.check_is_fitted": [[973, "sklearn-utils-validation-check-is-fitted"]], "Examples using sklearn.utils.validation.check_is_fitted": [[973, "examples-using-sklearn-utils-validation-check-is-fitted"]], "sklearn.utils.validation.check_memory": [[974, "sklearn-utils-validation-check-memory"]], "sklearn.utils.validation.check_symmetric": [[975, "sklearn-utils-validation-check-symmetric"]], "sklearn.utils.validation.column_or_1d": [[976, "sklearn-utils-validation-column-or-1d"]], "sklearn.utils.validation.has_fit_parameter": [[977, "sklearn-utils-validation-has-fit-parameter"]], "Tuning the hyper-parameters of an estimator": [[978, "tuning-the-hyper-parameters-of-an-estimator"]], "Exhaustive Grid Search": [[978, "exhaustive-grid-search"]], "Randomized Parameter Optimization": [[978, "randomized-parameter-optimization"]], "Searching for optimal parameters with successive halving": [[978, "searching-for-optimal-parameters-with-successive-halving"]], "Choosing min_resources and the number of candidates": [[978, "choosing-min-resources-and-the-number-of-candidates"]], "Amount of resource and number of candidates at each iteration": [[978, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "Choosing a resource": [[978, "choosing-a-resource"]], "Exhausting the available resources": [[978, "exhausting-the-available-resources"]], "Aggressive elimination of candidates": [[978, "aggressive-elimination-of-candidates"]], "Analyzing results with the cv_results_ attribute": [[978, "analyzing-results-with-the-cv-results-attribute"]], "Tips for parameter search": [[978, "tips-for-parameter-search"]], "Specifying an objective metric": [[978, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[978, "specifying-multiple-metrics-for-evaluation"]], "Composite estimators and parameter spaces": [[978, "composite-estimators-and-parameter-spaces"]], "Model selection: development and evaluation": [[978, "model-selection-development-and-evaluation"]], "Robustness to failure": [[978, "robustness-to-failure"]], "Alternatives to brute force parameter search": [[978, "alternatives-to-brute-force-parameter-search"]], "Model specific cross-validation": [[978, "model-specific-cross-validation"]], "Information Criterion": [[978, "information-criterion"]], "Out of Bag Estimates": [[978, "out-of-bag-estimates"]], "Imputation of missing values": [[979, "imputation-of-missing-values"], [999, "imputation-of-missing-values"]], "Univariate vs. Multivariate Imputation": [[979, "univariate-vs-multivariate-imputation"]], "Univariate feature imputation": [[979, "univariate-feature-imputation"]], "Multivariate feature imputation": [[979, "multivariate-feature-imputation"]], "Flexibility of IterativeImputer": [[979, "flexibility-of-iterativeimputer"]], "Multiple vs. Single Imputation": [[979, "multiple-vs-single-imputation"]], "Nearest neighbors imputation": [[979, "nearest-neighbors-imputation"]], "Keeping the number of features constant": [[979, "keeping-the-number-of-features-constant"]], "Marking imputed values": [[979, "marking-imputed-values"]], "Estimators that handle NaN values": [[979, "estimators-that-handle-nan-values"]], "Isotonic regression": [[980, "isotonic-regression"]], "Nystroem Method for Kernel Approximation": [[981, "nystroem-method-for-kernel-approximation"]], "Radial Basis Function Kernel": [[981, "radial-basis-function-kernel"]], "Additive Chi Squared Kernel": [[981, "additive-chi-squared-kernel"]], "Skewed Chi Squared Kernel": [[981, "skewed-chi-squared-kernel"]], "Polynomial Kernel Approximation via Tensor Sketch": [[981, "polynomial-kernel-approximation-via-tensor-sketch"]], "Mathematical Details": [[981, "mathematical-details"]], "Kernel ridge regression": [[982, "kernel-ridge-regression"]], "Linear and Quadratic Discriminant Analysis": [[983, "linear-and-quadratic-discriminant-analysis"]], "Dimensionality reduction using Linear Discriminant Analysis": [[983, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Mathematical formulation of the LDA and QDA classifiers": [[983, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "QDA": [[983, "qda"]], "LDA": [[983, "lda"]], "Mathematical formulation of LDA dimensionality reduction": [[983, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Shrinkage and Covariance Estimator": [[983, "shrinkage-and-covariance-estimator"]], "Estimation algorithms": [[983, "estimation-algorithms"]], "Validation curves: plotting scores to evaluate models": [[984, "validation-curves-plotting-scores-to-evaluate-models"]], "Validation curve": [[984, "validation-curve"]], "Learning curve": [[984, "learning-curve"]], "Linear Models": [[985, "linear-models"]], "Ordinary Least Squares": [[985, "ordinary-least-squares"]], "Non-Negative Least Squares": [[985, "non-negative-least-squares"]], "Ordinary Least Squares Complexity": [[985, "ordinary-least-squares-complexity"]], "Ridge regression and classification": [[985, "ridge-regression-and-classification"]], "Ridge Complexity": [[985, "ridge-complexity"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[985, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Setting regularization parameter": [[985, "setting-regularization-parameter"]], "Using cross-validation": [[985, "using-cross-validation"]], "Information-criteria based model selection": [[985, "information-criteria-based-model-selection"]], "AIC and BIC criteria": [[985, "aic-and-bic-criteria"]], "Comparison with the regularization parameter of SVM": [[985, "comparison-with-the-regularization-parameter-of-svm"]], "Multi-task Lasso": [[985, "multi-task-lasso"]], "Elastic-Net": [[985, "elastic-net"]], "Multi-task Elastic-Net": [[985, "multi-task-elastic-net"]], "Least Angle Regression": [[985, "least-angle-regression"]], "LARS Lasso": [[985, "lars-lasso"]], "Orthogonal Matching Pursuit (OMP)": [[985, "orthogonal-matching-pursuit-omp"]], "Bayesian Regression": [[985, "bayesian-regression"]], "Bayesian Ridge Regression": [[985, "bayesian-ridge-regression"]], "Automatic Relevance Determination - ARD": [[985, "automatic-relevance-determination-ard"]], "Logistic regression": [[985, "logistic-regression"]], "Binary Case": [[985, "binary-case"]], "Multinomial Case": [[985, "multinomial-case"]], "Solvers": [[985, "solvers"]], "Differences between solvers": [[985, "differences-between-solvers"]], "Stochastic Gradient Descent - SGD": [[985, "stochastic-gradient-descent-sgd"]], "Perceptron": [[985, "perceptron"]], "Passive Aggressive Algorithms": [[985, "passive-aggressive-algorithms"]], "Robustness regression: outliers and modeling errors": [[985, "robustness-regression-outliers-and-modeling-errors"]], "Different scenario and useful concepts": [[985, "different-scenario-and-useful-concepts"]], "Trade-offs: which estimator ?": [[985, null]], "RANSAC: RANdom SAmple Consensus": [[985, "ransac-random-sample-consensus"]], "Theil-Sen estimator: generalized-median-based estimator": [[985, "theil-sen-estimator-generalized-median-based-estimator"]], "Huber Regression": [[985, "huber-regression"]], "Quantile Regression": [[985, "quantile-regression"]], "Polynomial regression: extending linear models with basis functions": [[985, "polynomial-regression-extending-linear-models-with-basis-functions"]], "Introduction": [[986, "introduction"]], "Isomap": [[986, "isomap"]], "Locally Linear Embedding": [[986, "locally-linear-embedding"]], "Modified Locally Linear Embedding": [[986, "modified-locally-linear-embedding"]], "Hessian Eigenmapping": [[986, "hessian-eigenmapping"]], "Spectral Embedding": [[986, "spectral-embedding"]], "Local Tangent Space Alignment": [[986, "local-tangent-space-alignment"]], "Multi-dimensional Scaling (MDS)": [[986, "multi-dimensional-scaling-mds"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[986, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "Tips on practical use": [[986, "tips-on-practical-use"], [1005, "tips-on-practical-use"]], "Pairwise metrics, Affinities and Kernels": [[987, "pairwise-metrics-affinities-and-kernels"]], "Cosine similarity": [[987, "cosine-similarity"]], "Laplacian kernel": [[987, "laplacian-kernel"]], "Chi-squared kernel": [[987, "chi-squared-kernel"]], "Gaussian mixture models": [[988, "gaussian-mixture-models"]], "Gaussian Mixture": [[988, "gaussian-mixture"]], "Pros:": [[988, null], [988, null]], "Cons:": [[988, null], [988, null]], "Variational Bayesian Gaussian Mixture": [[988, "variational-bayesian-gaussian-mixture"]], "The Dirichlet Process": [[988, "the-dirichlet-process"]], "Metrics and scoring: quantifying the quality of predictions": [[989, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "The scoring parameter: defining model evaluation rules": [[989, "the-scoring-parameter-defining-model-evaluation-rules"]], "Common cases: predefined values": [[989, "common-cases-predefined-values"]], "Defining your scoring strategy from metric functions": [[989, "defining-your-scoring-strategy-from-metric-functions"]], "Implementing your own scoring object": [[989, "implementing-your-own-scoring-object"]], "Using multiple metric evaluation": [[989, "using-multiple-metric-evaluation"]], "From binary to multiclass and multilabel": [[989, "from-binary-to-multiclass-and-multilabel"]], "Accuracy score": [[989, "accuracy-score"]], "Example:": [[989, null], [989, null], [989, null], [989, null], [989, null], [989, null], [989, null], [989, null], [1001, null], [1023, null]], "Top-k accuracy score": [[989, "top-k-accuracy-score"]], "Balanced accuracy score": [[989, "balanced-accuracy-score"]], "Cohen\u2019s kappa": [[989, "cohen-s-kappa"]], "Classification report": [[989, "classification-report"]], "Hamming loss": [[989, "hamming-loss"]], "Precision, recall and F-measures": [[989, "precision-recall-and-f-measures"]], "Binary classification": [[989, "binary-classification"]], "Multiclass and multilabel classification": [[989, "multiclass-and-multilabel-classification"]], "Jaccard similarity coefficient score": [[989, "jaccard-similarity-coefficient-score"]], "Hinge loss": [[989, "hinge-loss"]], "Log loss": [[989, "log-loss"]], "Matthews correlation coefficient": [[989, "matthews-correlation-coefficient"]], "Multi-label confusion matrix": [[989, "multi-label-confusion-matrix"]], "Receiver operating characteristic (ROC)": [[989, "receiver-operating-characteristic-roc"]], "Binary case": [[989, "binary-case"]], "Multi-class case": [[989, "multi-class-case"]], "Multi-label case": [[989, "multi-label-case"]], "Detection error tradeoff (DET)": [[989, "detection-error-tradeoff-det"]], "Zero one loss": [[989, "zero-one-loss"]], "Brier score loss": [[989, "brier-score-loss"]], "Class likelihood ratios": [[989, "class-likelihood-ratios"]], "Coverage error": [[989, "coverage-error"]], "Label ranking average precision": [[989, "label-ranking-average-precision"]], "Ranking loss": [[989, "ranking-loss"]], "Normalized Discounted Cumulative Gain": [[989, "normalized-discounted-cumulative-gain"]], "R\u00b2 score, the coefficient of determination": [[989, "r2-score-the-coefficient-of-determination"]], "Mean absolute error": [[989, "mean-absolute-error"]], "Mean squared error": [[989, "mean-squared-error"]], "Mean squared logarithmic error": [[989, "mean-squared-logarithmic-error"]], "Mean absolute percentage error": [[989, "mean-absolute-percentage-error"]], "Median absolute error": [[989, "median-absolute-error"]], "Max error": [[989, "max-error"]], "Explained variance score": [[989, "explained-variance-score"]], "Link to R\u00b2 score, the coefficient of determination": [[989, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[989, "mean-poisson-gamma-and-tweedie-deviances"]], "Pinball loss": [[989, "pinball-loss"]], "D\u00b2 score": [[989, "d2-score"]], "D\u00b2 Tweedie score": [[989, "d2-tweedie-score"]], "D\u00b2 pinball score": [[989, "d2-pinball-score"]], "D\u00b2 absolute error score": [[989, "d2-absolute-error-score"]], "Visual evaluation of regression models": [[989, "visual-evaluation-of-regression-models"]], "Dummy estimators": [[989, "dummy-estimators"]], "Multiclass and multioutput algorithms": [[990, "multiclass-and-multioutput-algorithms"]], "Multiclass classification": [[990, "multiclass-classification"], [1023, null]], "Target format": [[990, "target-format"], [990, "id5"], [990, "id8"], [990, "id10"]], "OneVsRestClassifier": [[990, "onevsrestclassifier"]], "OneVsOneClassifier": [[990, "onevsoneclassifier"]], "OutputCodeClassifier": [[990, "outputcodeclassifier"]], "MultiOutputClassifier": [[990, "multioutputclassifier"]], "ClassifierChain": [[990, "classifierchain"]], "Multiclass-multioutput classification": [[990, "multiclass-multioutput-classification"]], "Multioutput regression": [[990, "multioutput-regression"]], "MultiOutputRegressor": [[990, "multioutputregressor"]], "RegressorChain": [[990, "regressorchain"]], "Naive Bayes": [[991, "naive-bayes"]], "Multinomial Naive Bayes": [[991, "multinomial-naive-bayes"]], "Complement Naive Bayes": [[991, "complement-naive-bayes"]], "Bernoulli Naive Bayes": [[991, "bernoulli-naive-bayes"]], "Categorical Naive Bayes": [[991, "categorical-naive-bayes"]], "Out-of-core naive Bayes model fitting": [[991, "out-of-core-naive-bayes-model-fitting"]], "Unsupervised Nearest Neighbors": [[992, "unsupervised-nearest-neighbors"]], "Finding the Nearest Neighbors": [[992, "finding-the-nearest-neighbors"]], "KDTree and BallTree Classes": [[992, "kdtree-and-balltree-classes"]], "Nearest Neighbors Regression": [[992, "nearest-neighbors-regression"]], "Nearest Neighbor Algorithms": [[992, "nearest-neighbor-algorithms"]], "Brute Force": [[992, "brute-force"]], "K-D Tree": [[992, "k-d-tree"]], "Ball Tree": [[992, "ball-tree"]], "Choice of Nearest Neighbors Algorithm": [[992, "choice-of-nearest-neighbors-algorithm"]], "Effect of leaf_size": [[992, "effect-of-leaf-size"]], "Valid Metrics for Nearest Neighbor Algorithms": [[992, "valid-metrics-for-nearest-neighbor-algorithms"]], "Nearest Centroid Classifier": [[992, "nearest-centroid-classifier"]], "Nearest Shrunken Centroid": [[992, "nearest-shrunken-centroid"]], "Nearest Neighbors Transformer": [[992, "nearest-neighbors-transformer"]], "Neighborhood Components Analysis": [[992, "neighborhood-components-analysis"]], "Dimensionality reduction": [[992, "dimensionality-reduction"]], "Mahalanobis distance": [[992, "mahalanobis-distance"]], "Complexity": [[992, "complexity"], [993, "complexity"], [1003, "complexity"], [1004, "complexity"], [1005, "complexity"]], "Transform": [[992, "transform"]], "Neural network models (supervised)": [[993, "neural-network-models-supervised"]], "Multi-layer Perceptron": [[993, "multi-layer-perceptron"]], "Regularization": [[993, "regularization"]], "Algorithms": [[993, "algorithms"]], "Tips on Practical Use": [[993, "tips-on-practical-use"], [1003, "tips-on-practical-use"], [1004, "tips-on-practical-use"]], "More control with warm_start": [[993, "more-control-with-warm-start"]], "Neural network models (unsupervised)": [[994, "neural-network-models-unsupervised"]], "Restricted Boltzmann machines": [[994, "restricted-boltzmann-machines"]], "Graphical model and parametrization": [[994, "graphical-model-and-parametrization"]], "Bernoulli Restricted Boltzmann machines": [[994, "bernoulli-restricted-boltzmann-machines"]], "Stochastic Maximum Likelihood learning": [[994, "stochastic-maximum-likelihood-learning"]], "Novelty and Outlier Detection": [[995, "novelty-and-outlier-detection"]], "Overview of outlier detection methods": [[995, "overview-of-outlier-detection-methods"]], "Novelty Detection": [[995, "novelty-detection"]], "Scaling up the One-Class SVM": [[995, "scaling-up-the-one-class-svm"]], "Outlier Detection": [[995, "id1"]], "Fitting an elliptic envelope": [[995, "fitting-an-elliptic-envelope"]], "Isolation Forest": [[995, "isolation-forest"]], "Local Outlier Factor": [[995, "local-outlier-factor"]], "Novelty detection with Local Outlier Factor": [[995, "novelty-detection-with-local-outlier-factor"]], "Partial Dependence and Individual Conditional Expectation plots": [[996, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[996, "partial-dependence-plots"]], "Individual conditional expectation (ICE) plot": [[996, "individual-conditional-expectation-ice-plot"]], "Mathematical Definition": [[996, "mathematical-definition"]], "Computation methods": [[996, "computation-methods"]], "Permutation feature importance": [[997, "permutation-feature-importance"]], "Outline of the permutation importance algorithm": [[997, "outline-of-the-permutation-importance-algorithm"]], "Relation to impurity-based importance in trees": [[997, "relation-to-impurity-based-importance-in-trees"]], "Misleading values on strongly correlated features": [[997, "misleading-values-on-strongly-correlated-features"]], "Preprocessing data": [[999, "preprocessing-data"]], "Standardization, or mean removal and variance scaling": [[999, "standardization-or-mean-removal-and-variance-scaling"]], "Scaling features to a range": [[999, "scaling-features-to-a-range"]], "Scaling sparse data": [[999, "scaling-sparse-data"]], "Scaling data with outliers": [[999, "scaling-data-with-outliers"]], "Scaling vs Whitening": [[999, null]], "Centering kernel matrices": [[999, "centering-kernel-matrices"]], "Non-linear transformation": [[999, "non-linear-transformation"]], "Mapping to a Uniform distribution": [[999, "mapping-to-a-uniform-distribution"]], "Mapping to a Gaussian distribution": [[999, "mapping-to-a-gaussian-distribution"]], "Normalization": [[999, "normalization"]], "Sparse input": [[999, null], [999, null]], "Encoding categorical features": [[999, "encoding-categorical-features"]], "Infrequent categories": [[999, "infrequent-categories"]], "Target Encoder": [[999, "target-encoder"]], "Discretization": [[999, "discretization"]], "K-bins discretization": [[999, "k-bins-discretization"]], "Feature binarization": [[999, "feature-binarization"]], "Generating polynomial features": [[999, "generating-polynomial-features"]], "Polynomial features": [[999, "polynomial-features"]], "Spline transformer": [[999, "spline-transformer"]], "Custom transformers": [[999, "custom-transformers"]], "Transforming the prediction target (y)": [[1000, "transforming-the-prediction-target-y"]], "Label binarization": [[1000, "label-binarization"]], "LabelBinarizer": [[1000, "labelbinarizer"]], "MultiLabelBinarizer": [[1000, "multilabelbinarizer"]], "Label encoding": [[1000, "label-encoding"]], "Random Projection": [[1001, "random-projection"]], "The Johnson-Lindenstrauss lemma": [[1001, "the-johnson-lindenstrauss-lemma"]], "Gaussian random projection": [[1001, "gaussian-random-projection"]], "Sparse random projection": [[1001, "sparse-random-projection"]], "Inverse Transform": [[1001, "inverse-transform"]], "Unlabeled entries in y": [[1002, null]], "Self Training": [[1002, "self-training"]], "Label Propagation": [[1002, "label-propagation"]], "Stochastic Gradient Descent": [[1003, "stochastic-gradient-descent"]], "Stochastic Gradient Descent for sparse data": [[1003, "stochastic-gradient-descent-for-sparse-data"]], "Stopping criterion": [[1003, "stopping-criterion"]], "SGD": [[1003, "id5"]], "Implementation details": [[1003, "implementation-details"], [1004, "implementation-details"]], "Multi-class classification": [[1004, "multi-class-classification"]], "Scores and probabilities": [[1004, "scores-and-probabilities"]], "Unbalanced problems": [[1004, "unbalanced-problems"]], "Density estimation, novelty detection": [[1004, "density-estimation-novelty-detection"]], "Kernel functions": [[1004, "kernel-functions"]], "Parameters of the RBF Kernel": [[1004, "parameters-of-the-rbf-kernel"]], "Custom Kernels": [[1004, "custom-kernels"]], "SVC": [[1004, "svc"]], "SVR": [[1004, "svr"]], "Multi-output problems": [[1005, "multi-output-problems"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[1005, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Classification criteria": [[1005, "classification-criteria"]], "Regression criteria": [[1005, "regression-criteria"]], "Missing Values Support": [[1005, "missing-values-support"]], "Minimal Cost-Complexity Pruning": [[1005, "minimal-cost-complexity-pruning"]], "Unsupervised dimensionality reduction": [[1006, "unsupervised-dimensionality-reduction"]], "Pipelining": [[1006, null], [1021, "pipelining"]], "PCA: principal component analysis": [[1006, "pca-principal-component-analysis"]], "Random projections": [[1006, "random-projections"]], "Feature scaling": [[1006, null]], "Welcome to scikit-learn": [[1007, "welcome-to-scikit-learn"]], "External Resources, Videos and Talks": [[1008, "external-resources-videos-and-talks"]], "New to Scientific Python?": [[1008, "new-to-scientific-python"]], "External Tutorials": [[1008, "external-tutorials"]], "Videos": [[1008, "videos"]], "Related Projects": [[1009, "related-projects"]], "Interoperability and framework enhancements": [[1009, "interoperability-and-framework-enhancements"]], "Other estimators and tasks": [[1009, "other-estimators-and-tasks"]], "Statistical learning with Python": [[1009, "statistical-learning-with-python"]], "Recommendation Engine packages": [[1009, "recommendation-engine-packages"]], "Domain specific packages": [[1009, "domain-specific-packages"]], "Translations of scikit-learn documentation": [[1009, "translations-of-scikit-learn-documentation"]], "Roadmap": [[1010, "id1"]], "Purpose of this document": [[1010, "purpose-of-this-document"]], "Statement of purpose: Scikit-learn in 2018": [[1010, "statement-of-purpose-scikit-learn-in-2018"]], "Architectural / general goals": [[1010, "architectural-general-goals"]], "Subpackage-specific goals": [[1010, "subpackage-specific-goals"]], "Supervised learning": [[1012, "supervised-learning"]], "Support": [[1013, "support"]], "Mailing List": [[1013, "mailing-list"]], "User questions": [[1013, "user-questions"]], "Bug tracker": [[1013, "bug-tracker"]], "Gitter": [[1013, "gitter"]], "Documentation resources": [[1013, "documentation-resources"]], "Who is using scikit-learn?": [[1014, "who-is-using-scikit-learn"]], "J.P.Morgan": [[1014, "id1"]], "Spotify": [[1014, "id2"]], "Inria": [[1014, "id3"]], "betaworks": [[1014, "id4"]], "Hugging Face": [[1014, "id5"]], "Evernote": [[1014, "id6"]], "T\u00e9l\u00e9com ParisTech": [[1014, "id7"]], "Booking.com": [[1014, "id8"]], "AWeber": [[1014, "id9"]], "Yhat": [[1014, "id10"]], "Rangespan": [[1014, "id11"]], "Birchbox": [[1014, "id12"]], "Bestofmedia Group": [[1014, "id13"]], "Change.org": [[1014, "id14"]], "PHIMECA Engineering": [[1014, "id15"]], "HowAboutWe": [[1014, "id16"]], "PeerIndex": [[1014, "id17"]], "DataRobot": [[1014, "id18"]], "OkCupid": [[1014, "id19"]], "Lovely": [[1014, "id20"]], "Data Publica": [[1014, "id21"]], "Machinalis": [[1014, "id22"]], "solido": [[1014, "id23"]], "INFONEA": [[1014, "id24"]], "Dataiku": [[1014, "id25"]], "Otto Group": [[1014, "id26"]], "Zopa": [[1014, "id27"]], "MARS": [[1014, "id28"]], "BNP Paribas Cardif": [[1014, "id29"]], "An introduction to machine learning with scikit-learn": [[1016, "an-introduction-to-machine-learning-with-scikit-learn"]], "Section contents": [[1016, null]], "Machine learning: the problem setting": [[1016, "machine-learning-the-problem-setting"]], "Training set and testing set": [[1016, null], [1023, null]], "Loading an example dataset": [[1016, "loading-an-example-dataset"]], "Shape of the data arrays": [[1016, null]], "Learning and predicting": [[1016, "learning-and-predicting"]], "Choosing the parameters of the model": [[1016, null]], "Conventions": [[1016, "conventions"]], "Type casting": [[1016, "type-casting"]], "Refitting and updating parameters": [[1016, "refitting-and-updating-parameters"]], "Multiclass vs. multilabel fitting": [[1016, "multiclass-vs-multilabel-fitting"]], "scikit-learn Tutorials": [[1017, "scikit-learn-tutorials"]], "Choosing the right estimator": [[1018, "choosing-the-right-estimator"]], "A tutorial on statistical-learning for scientific data processing": [[1019, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "Statistical learning": [[1019, null]], "Model selection: choosing estimators and their parameters": [[1020, "model-selection-choosing-estimators-and-their-parameters"]], "Score, and cross-validated scores": [[1020, "score-and-cross-validated-scores"]], "Cross-validation generators": [[1020, "cross-validation-generators"]], "Exercise": [[1020, null], [1020, null], [1023, null], [1023, null]], "Grid-search and cross-validated estimators": [[1020, "grid-search-and-cross-validated-estimators"]], "Grid-search": [[1020, "grid-search"]], "Nested cross-validation": [[1020, null]], "Cross-validated estimators": [[1020, "cross-validated-estimators"]], "Putting it all together": [[1021, "putting-it-all-together"]], "Face recognition with eigenfaces": [[1021, "face-recognition-with-eigenfaces"]], "Open problem: Stock Market Structure": [[1021, "open-problem-stock-market-structure"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[1022, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Datasets": [[1022, "datasets"]], "A simple example shipped with scikit-learn: iris dataset": [[1022, null]], "An example of reshaping data would be the digits dataset": [[1022, null]], "Estimators objects": [[1022, "estimators-objects"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[1023, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "The problem solved in supervised learning": [[1023, null]], "Vocabulary: classification and regression": [[1023, null]], "Nearest neighbor and the curse of dimensionality": [[1023, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Classifying irises:": [[1023, null]], "k-Nearest neighbors classifier": [[1023, "k-nearest-neighbors-classifier"]], "The curse of dimensionality": [[1023, "the-curse-of-dimensionality"]], "Linear model: from regression to sparsity": [[1023, "linear-model-from-regression-to-sparsity"]], "Linear regression": [[1023, "linear-regression"]], "Shrinkage": [[1023, "shrinkage"]], "Different algorithms for the same problem": [[1023, null]], "Shrinkage and sparsity with logistic regression": [[1023, null]], "Support vector machines (SVMs)": [[1023, "support-vector-machines-svms"]], "Linear SVMs": [[1023, "linear-svms"]], "Using kernels": [[1023, "using-kernels"]], "RBF kernel (Radial Basis Function)": [[1023, "rbf-kernel-radial-basis-function"]], "Interactive example": [[1023, null]], "Unsupervised learning: seeking representations of the data": [[1024, "unsupervised-learning-seeking-representations-of-the-data"]], "Clustering: grouping observations together": [[1024, "clustering-grouping-observations-together"]], "The problem solved in clustering": [[1024, null]], "K-means clustering": [[1024, "k-means-clustering"]], "Application example: vector quantization": [[1024, null]], "Hierarchical agglomerative clustering: Ward": [[1024, "hierarchical-agglomerative-clustering-ward"]], "Connectivity-constrained clustering": [[1024, "connectivity-constrained-clustering"]], "transform and inverse_transform methods": [[1024, null]], "Decompositions: from a signal to components and loadings": [[1024, "decompositions-from-a-signal-to-components-and-loadings"]], "Components and loadings": [[1024, null]], "Principal component analysis: PCA": [[1024, "principal-component-analysis-pca"]], "Independent Component Analysis: ICA": [[1024, "independent-component-analysis-ica"]], "Working With Text Data": [[1025, "working-with-text-data"]], "Tutorial setup": [[1025, "tutorial-setup"]], "Loading the 20 newsgroups dataset": [[1025, "loading-the-20-newsgroups-dataset"]], "Extracting features from text files": [[1025, "extracting-features-from-text-files"]], "Bags of words": [[1025, "bags-of-words"]], "Tokenizing text with scikit-learn": [[1025, "tokenizing-text-with-scikit-learn"]], "From occurrences to frequencies": [[1025, "from-occurrences-to-frequencies"]], "Training a classifier": [[1025, "training-a-classifier"]], "Building a pipeline": [[1025, "building-a-pipeline"]], "Evaluation of the performance on the test set": [[1025, "evaluation-of-the-performance-on-the-test-set"]], "Parameter tuning using grid search": [[1025, "parameter-tuning-using-grid-search"]], "Exercises": [[1025, "exercises"]], "Exercise 1: Language identification": [[1025, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[1025, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[1025, "exercise-3-cli-text-classification-utility"]], "Where to from here": [[1025, "where-to-from-here"]], "Unsupervised learning": [[1026, "unsupervised-learning"]], "User Guide": [[1027, "user-guide"]], "Under Development": [[1027, "under-development"]], "Visualizations": [[1028, "visualizations"]], "Available Plotting Utilities": [[1028, "available-plotting-utilities"]], "Display Objects": [[1028, "display-objects"]], "Release History": [[1029, "release-history"]], "Version 0.12.1": [[1031, "version-0-12-1"]], "Changelog": [[1031, "changelog"], [1031, "id1"], [1031, "id3"], [1031, "id6"], [1031, "id9"], [1031, "id12"], [1031, "id14"], [1031, "id16"], [1031, "id18"], [1031, "id19"], [1032, "changelog"], [1032, "id1"], [1033, "changelog"], [1034, "changelog"], [1035, "changelog"], [1035, "id1"], [1036, "changelog"], [1036, "id1"], [1037, "changelog"], [1037, "id1"], [1037, "id2"], [1038, "changelog"], [1038, "id1"], [1039, "changelog"], [1039, "id1"], [1039, "id5"], [1039, "id10"], [1039, "id23"], [1040, "changelog"], [1040, "id1"], [1040, "id2"], [1040, "id7"], [1041, "changelog"], [1041, "id1"], [1041, "id4"], [1042, "changelog"], [1042, "id1"], [1042, "id4"], [1043, "changelog"], [1043, "id1"], [1043, "id4"], [1044, "changelog"], [1044, "id1"], [1044, "id7"], [1045, "changelog"], [1045, "id1"], [1045, "id7"], [1046, "changelog"], [1046, "id1"], [1046, "id9"], [1047, "changelog"], [1047, "id1"], [1047, "id6"], [1048, "changelog"]], "People": [[1031, "people"], [1031, "id2"], [1031, "id5"], [1031, "id8"], [1031, "id11"], [1031, "id13"], [1031, "id15"], [1031, "id17"], [1032, "people"], [1032, "id2"], [1033, "people"], [1034, "people"]], "Version 0.12": [[1031, "version-0-12"]], "API changes summary": [[1031, "api-changes-summary"], [1031, "id4"], [1031, "id7"], [1031, "id10"], [1032, "api-changes-summary"], [1033, "api-changes-summary"], [1034, "api-changes-summary"], [1035, "api-changes-summary"], [1036, "api-changes-summary"], [1037, "api-changes-summary"], [1037, "id5"], [1038, "api-changes-summary"]], "Version 0.11": [[1031, "version-0-11"]], "Highlights": [[1031, "highlights"], [1034, "highlights"], [1035, "highlights"], [1038, "highlights"], [1039, "highlights"]], "Other changes": [[1031, "other-changes"]], "Version 0.10": [[1031, "version-0-10"]], "Version 0.9": [[1031, "version-0-9"]], "Version 0.8": [[1031, "version-0-8"]], "Version 0.7": [[1031, "version-0-7"]], "Version 0.6": [[1031, "version-0-6"]], "Version 0.5": [[1031, "version-0-5"]], "New classes": [[1031, "new-classes"]], "Fixes": [[1031, "fixes"]], "External dependencies": [[1031, "external-dependencies"]], "Removed modules": [[1031, "removed-modules"]], "Misc": [[1031, "misc"]], "Version 0.4": [[1031, "version-0-4"]], "Earlier versions": [[1031, "earlier-versions"]], "Version 0.13.1": [[1032, "version-0-13-1"]], "Version 0.13": [[1032, "version-0-13"]], "New Estimator Classes": [[1032, "new-estimator-classes"]], "Version 0.14": [[1033, "version-0-14"]], "Version 0.15.2": [[1034, "version-0-15-2"]], "Bug fixes": [[1034, "bug-fixes"], [1034, "id1"], [1034, "id2"], [1035, "bug-fixes"], [1035, "id2"], [1036, "bug-fixes"], [1036, "id2"], [1037, "bug-fixes"], [1037, "id4"], [1038, "bug-fixes"], [1038, "id3"]], "Version 0.15.1": [[1034, "version-0-15-1"]], "Version 0.15": [[1034, "version-0-15"]], "New features": [[1034, "new-features"], [1035, "new-features"], [1036, "new-features"], [1037, "new-features"], [1038, "new-features"]], "Enhancements": [[1034, "enhancements"], [1035, "enhancements"], [1036, "enhancements"], [1037, "enhancements"], [1037, "id3"], [1038, "enhancements"], [1038, "id2"]], "Documentation improvements": [[1034, "documentation-improvements"], [1035, "documentation-improvements"]], "Version 0.16.1": [[1035, "version-0-16-1"]], "Version 0.16": [[1035, "version-0-16"]], "Code Contributors": [[1035, "code-contributors"], [1036, "code-contributors"], [1037, "code-contributors"], [1037, "id6"]], "Version 0.17.1": [[1036, "version-0-17-1"]], "Version 0.17": [[1036, "version-0-17"]], "Version 0.18.2": [[1037, "version-0-18-2"]], "Last release with Python 2.6 support": [[1037, null], [1037, null]], "Version 0.18.1": [[1037, "version-0-18-1"]], "Version 0.18": [[1037, "version-0-18"]], "Model Selection Enhancements and API Changes": [[1037, "model-selection-enhancements-and-api-changes"]], "Version 0.19.2": [[1038, "version-0-19-2"]], "Related changes": [[1038, "related-changes"]], "Version 0.19.1": [[1038, "version-0-19-1"]], "API changes": [[1038, "api-changes"]], "Code and Documentation Contributors": [[1038, "code-and-documentation-contributors"], [1038, "id9"], [1039, "code-and-documentation-contributors"], [1039, "id8"], [1039, "id21"], [1039, "id41"], [1040, "code-and-documentation-contributors"], [1041, "code-and-documentation-contributors"], [1042, "code-and-documentation-contributors"], [1043, "code-and-documentation-contributors"], [1044, "code-and-documentation-contributors"], [1045, "code-and-documentation-contributors"], [1046, "code-and-documentation-contributors"], [1047, "code-and-documentation-contributors"], [1048, "code-and-documentation-contributors"]], "Version 0.19": [[1038, "version-0-19"]], "Changed models": [[1038, "changed-models"], [1039, "changed-models"], [1039, "id9"], [1039, "id22"], [1040, "changed-models"], [1040, "id6"], [1041, "changed-models"], [1042, "changed-models"], [1042, "id3"], [1043, "changed-models"], [1044, "changed-models"], [1045, "changed-models"], [1045, "id6"], [1046, "changed-models"], [1046, "id7"], [1047, "changed-models"], [1047, "id4"], [1048, "changed-models"]], "Version 0.20.4": [[1039, "version-0-20-4"]], "sklearn.cluster": [[1039, "sklearn-cluster"], [1039, "id2"], [1039, "id11"], [1039, "id24"], [1040, "sklearn-cluster"], [1040, "id8"], [1041, "sklearn-cluster"], [1041, "id5"], [1042, "sklearn-cluster"], [1042, "id2"], [1042, "id5"], [1043, "sklearn-cluster"], [1044, "sklearn-cluster"], [1044, "id2"], [1044, "id9"], [1045, "sklearn-cluster"], [1045, "id8"], [1046, "sklearn-cluster"], [1046, "id12"], [1047, "sklearn-cluster"], [1047, "id8"], [1048, "sklearn-cluster"]], "sklearn.compose": [[1039, "sklearn-compose"], [1039, "id3"], [1039, "id6"], [1039, "id12"], [1039, "id25"], [1040, "sklearn-compose"], [1040, "id9"], [1041, "sklearn-compose"], [1042, "sklearn-compose"], [1043, "sklearn-compose"], [1043, "id5"], [1044, "sklearn-compose"], [1045, "sklearn-compose"], [1046, "sklearn-compose"], [1047, "sklearn-compose"], [1048, "sklearn-compose"]], "sklearn.decomposition": [[1039, "sklearn-decomposition"], [1039, "id4"], [1039, "id14"], [1039, "id28"], [1040, "sklearn-decomposition"], [1040, "id11"], [1041, "sklearn-decomposition"], [1042, "sklearn-decomposition"], [1042, "id6"], [1043, "sklearn-decomposition"], [1043, "id7"], [1044, "sklearn-decomposition"], [1044, "id11"], [1045, "sklearn-decomposition"], [1045, "id10"], [1046, "sklearn-decomposition"], [1046, "id14"], [1047, "sklearn-decomposition"], [1047, "id10"], [1048, "sklearn-decomposition"]], "sklearn.model_selection": [[1039, "sklearn-model-selection"], [1039, "id35"], [1040, "sklearn-model-selection"], [1041, "sklearn-model-selection"], [1041, "id9"], [1041, "id13"], [1042, "sklearn-model-selection"], [1043, "sklearn-model-selection"], [1043, "id13"], [1044, "sklearn-model-selection"], [1045, "sklearn-model-selection"], [1046, "sklearn-model-selection"], [1046, "id20"], [1047, "sklearn-model-selection"], [1048, "sklearn-model-selection"]], "sklearn.neighbors": [[1039, "sklearn-neighbors"], [1039, "id7"], [1039, "id18"], [1039, "id36"], [1040, "sklearn-neighbors"], [1040, "id5"], [1040, "id17"], [1041, "sklearn-neighbors"], [1041, "id11"], [1043, "sklearn-neighbors"], [1044, "sklearn-neighbors"], [1044, "id5"], [1044, "id18"], [1045, "sklearn-neighbors"], [1046, "sklearn-neighbors"], [1047, "sklearn-neighbors"], [1047, "id16"], [1048, "sklearn-neighbors"]], "Version 0.20.3": [[1039, "version-0-20-3"]], "sklearn.covariance": [[1039, "sklearn-covariance"], [1039, "id26"], [1043, "sklearn-covariance"], [1044, "sklearn-covariance"], [1045, "sklearn-covariance"], [1047, "sklearn-covariance"], [1048, "sklearn-covariance"]], "sklearn.datasets": [[1039, "sklearn-datasets"], [1039, "id13"], [1039, "id27"], [1040, "sklearn-datasets"], [1040, "id10"], [1041, "sklearn-datasets"], [1042, "sklearn-datasets"], [1043, "sklearn-datasets"], [1044, "sklearn-datasets"], [1044, "id10"], [1045, "sklearn-datasets"], [1045, "id9"], [1046, "sklearn-datasets"], [1046, "id13"], [1047, "sklearn-datasets"], [1047, "id9"], [1048, "sklearn-datasets"]], "sklearn.feature_extraction": [[1039, "sklearn-feature-extraction"], [1039, "id15"], [1039, "id30"], [1040, "sklearn-feature-extraction"], [1041, "sklearn-feature-extraction"], [1042, "sklearn-feature-extraction"], [1042, "id8"], [1043, "sklearn-feature-extraction"], [1043, "id9"], [1044, "sklearn-feature-extraction"], [1044, "id13"], [1045, "sklearn-feature-extraction"], [1046, "sklearn-feature-extraction"], [1047, "sklearn-feature-extraction"], [1048, "sklearn-feature-extraction"]], "sklearn.impute": [[1039, "sklearn-impute"], [1039, "id31"], [1040, "sklearn-impute"], [1040, "id13"], [1041, "sklearn-impute"], [1041, "id6"], [1042, "sklearn-impute"], [1043, "sklearn-impute"], [1044, "sklearn-impute"], [1045, "sklearn-impute"], [1045, "id12"], [1046, "sklearn-impute"], [1047, "sklearn-impute"], [1047, "id13"]], "sklearn.linear_model": [[1039, "sklearn-linear-model"], [1039, "id16"], [1039, "id32"], [1040, "sklearn-linear-model"], [1040, "id15"], [1041, "sklearn-linear-model"], [1042, "sklearn-linear-model"], [1042, "id9"], [1043, "sklearn-linear-model"], [1043, "id11"], [1044, "sklearn-linear-model"], [1044, "id4"], [1044, "id15"], [1045, "sklearn-linear-model"], [1045, "id13"], [1046, "sklearn-linear-model"], [1046, "id18"], [1047, "sklearn-linear-model"], [1048, "sklearn-linear-model"]], "sklearn.preprocessing": [[1039, "sklearn-preprocessing"], [1039, "id19"], [1039, "id37"], [1040, "sklearn-preprocessing"], [1040, "id18"], [1041, "sklearn-preprocessing"], [1041, "id12"], [1042, "sklearn-preprocessing"], [1043, "sklearn-preprocessing"], [1043, "id15"], [1044, "sklearn-preprocessing"], [1044, "id20"], [1045, "sklearn-preprocessing"], [1045, "id4"], [1045, "id16"], [1046, "sklearn-preprocessing"], [1046, "id4"], [1046, "id22"], [1047, "sklearn-preprocessing"], [1047, "id17"], [1048, "sklearn-preprocessing"]], "sklearn.svm": [[1039, "sklearn-svm"], [1039, "id38"], [1040, "sklearn-svm"], [1041, "sklearn-svm"], [1042, "sklearn-svm"], [1043, "sklearn-svm"], [1044, "sklearn-svm"], [1044, "id21"], [1045, "sklearn-svm"], [1046, "sklearn-svm"], [1047, "sklearn-svm"]], "Version 0.20.2": [[1039, "version-0-20-2"]], "sklearn.metrics": [[1039, "sklearn-metrics"], [1039, "id17"], [1039, "id33"], [1040, "sklearn-metrics"], [1040, "id4"], [1040, "id16"], [1041, "sklearn-metrics"], [1041, "id2"], [1041, "id8"], [1042, "sklearn-metrics"], [1042, "id10"], [1043, "sklearn-metrics"], [1043, "id2"], [1043, "id12"], [1044, "sklearn-metrics"], [1044, "id17"], [1045, "sklearn-metrics"], [1045, "id3"], [1045, "id15"], [1046, "sklearn-metrics"], [1047, "sklearn-metrics"], [1047, "id2"], [1047, "id14"], [1048, "sklearn-metrics"]], "sklearn.utils": [[1039, "sklearn-utils"], [1039, "id20"], [1039, "id39"], [1040, "sklearn-utils"], [1041, "sklearn-utils"], [1041, "id14"], [1042, "sklearn-utils"], [1042, "id12"], [1043, "sklearn-utils"], [1043, "id18"], [1044, "sklearn-utils"], [1044, "id6"], [1044, "id23"], [1045, "sklearn-utils"], [1045, "id18"], [1046, "sklearn-utils"], [1046, "id6"], [1046, "id24"], [1047, "sklearn-utils"], [1048, "sklearn-utils"]], "Version 0.20.1": [[1039, "version-0-20-1"]], "sklearn.ensemble": [[1039, "sklearn-ensemble"], [1039, "id29"], [1040, "sklearn-ensemble"], [1040, "id12"], [1041, "sklearn-ensemble"], [1042, "sklearn-ensemble"], [1042, "id7"], [1043, "sklearn-ensemble"], [1043, "id8"], [1044, "sklearn-ensemble"], [1044, "id3"], [1044, "id12"], [1045, "sklearn-ensemble"], [1046, "sklearn-ensemble"], [1046, "id3"], [1046, "id15"], [1047, "sklearn-ensemble"], [1047, "id11"], [1048, "sklearn-ensemble"]], "sklearn.mixture": [[1039, "sklearn-mixture"], [1039, "id34"], [1040, "sklearn-mixture"], [1044, "sklearn-mixture"], [1045, "sklearn-mixture"], [1047, "sklearn-mixture"], [1047, "id15"]], "Version 0.20.0": [[1039, "version-0-20-0"]], "Known Major Bugs": [[1039, "known-major-bugs"], [1040, "known-major-bugs"]], "sklearn.discriminant_analysis": [[1039, "sklearn-discriminant-analysis"], [1040, "sklearn-discriminant-analysis"], [1043, "sklearn-discriminant-analysis"], [1045, "sklearn-discriminant-analysis"], [1046, "sklearn-discriminant-analysis"], [1047, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[1039, "sklearn-dummy"], [1040, "sklearn-dummy"], [1041, "sklearn-dummy"], [1044, "sklearn-dummy"], [1045, "sklearn-dummy"]], "sklearn.feature_selection": [[1039, "sklearn-feature-selection"], [1041, "sklearn-feature-selection"], [1042, "sklearn-feature-selection"], [1043, "sklearn-feature-selection"], [1044, "sklearn-feature-selection"], [1044, "id14"], [1045, "sklearn-feature-selection"], [1045, "id2"], [1045, "id11"], [1046, "sklearn-feature-selection"], [1046, "id16"], [1047, "sklearn-feature-selection"], [1047, "id12"], [1048, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[1039, "sklearn-gaussian-process"], [1041, "sklearn-gaussian-process"], [1042, "sklearn-gaussian-process"], [1043, "sklearn-gaussian-process"], [1043, "id10"], [1044, "sklearn-gaussian-process"], [1045, "sklearn-gaussian-process"], [1046, "sklearn-gaussian-process"], [1047, "sklearn-gaussian-process"]], "sklearn.isotonic": [[1039, "sklearn-isotonic"], [1040, "sklearn-isotonic"], [1041, "sklearn-isotonic"], [1043, "sklearn-isotonic"], [1045, "sklearn-isotonic"], [1046, "sklearn-isotonic"]], "sklearn.manifold": [[1039, "sklearn-manifold"], [1040, "sklearn-manifold"], [1041, "sklearn-manifold"], [1042, "sklearn-manifold"], [1043, "sklearn-manifold"], [1044, "sklearn-manifold"], [1044, "id16"], [1045, "sklearn-manifold"], [1045, "id14"], [1046, "sklearn-manifold"], [1046, "id19"], [1047, "sklearn-manifold"]], "sklearn.multioutput": [[1039, "sklearn-multioutput"], [1040, "sklearn-multioutput"], [1041, "sklearn-multioutput"], [1042, "sklearn-multioutput"], [1043, "sklearn-multioutput"], [1043, "id14"], [1046, "sklearn-multioutput"], [1047, "sklearn-multioutput"], [1048, "sklearn-multioutput"]], "sklearn.naive_bayes": [[1039, "sklearn-naive-bayes"], [1041, "sklearn-naive-bayes"], [1041, "id10"], [1042, "sklearn-naive-bayes"], [1043, "sklearn-naive-bayes"], [1044, "sklearn-naive-bayes"], [1046, "sklearn-naive-bayes"], [1047, "sklearn-naive-bayes"]], "sklearn.neural_network": [[1039, "sklearn-neural-network"], [1040, "sklearn-neural-network"], [1041, "sklearn-neural-network"], [1042, "sklearn-neural-network"], [1043, "sklearn-neural-network"], [1044, "sklearn-neural-network"], [1045, "sklearn-neural-network"], [1046, "sklearn-neural-network"], [1046, "id21"], [1047, "sklearn-neural-network"]], "sklearn.pipeline": [[1039, "sklearn-pipeline"], [1040, "sklearn-pipeline"], [1041, "sklearn-pipeline"], [1042, "sklearn-pipeline"], [1043, "sklearn-pipeline"], [1044, "sklearn-pipeline"], [1044, "id19"], [1045, "sklearn-pipeline"], [1046, "sklearn-pipeline"], [1047, "sklearn-pipeline"]], "sklearn.tree": [[1039, "sklearn-tree"], [1040, "sklearn-tree"], [1040, "id19"], [1041, "sklearn-tree"], [1042, "sklearn-tree"], [1043, "sklearn-tree"], [1043, "id17"], [1044, "sklearn-tree"], [1044, "id22"], [1045, "sklearn-tree"], [1045, "id5"], [1045, "id17"], [1046, "sklearn-tree"], [1046, "id5"], [1046, "id23"], [1047, "sklearn-tree"], [1047, "id3"], [1047, "id18"], [1048, "sklearn-tree"]], "Multiple modules": [[1039, "multiple-modules"], [1040, "multiple-modules"]], "Changes to estimator checks": [[1039, "changes-to-estimator-checks"], [1040, "changes-to-estimator-checks"], [1041, "changes-to-estimator-checks"]], "Version 0.21.3": [[1040, "version-0-21-3"]], "Legend for changelogs": [[1040, "legend-for-changelogs"], [1041, "legend-for-changelogs"], [1042, "legend-for-changelogs"], [1043, "legend-for-changelogs"], [1044, "legend-for-changelogs"], [1045, "legend-for-changelogs"], [1046, "legend-for-changelogs"], [1047, "legend-for-changelogs"], [1048, "legend-for-changelogs"]], "sklearn.inspection": [[1040, "sklearn-inspection"], [1040, "id3"], [1040, "id14"], [1041, "sklearn-inspection"], [1041, "id7"], [1042, "sklearn-inspection"], [1042, "id11"], [1043, "sklearn-inspection"], [1044, "sklearn-inspection"], [1045, "sklearn-inspection"], [1046, "sklearn-inspection"], [1046, "id17"], [1047, "sklearn-inspection"], [1048, "sklearn-inspection"]], "Version 0.21.2": [[1040, "version-0-21-2"]], "sklearn.utils.sparsefuncs": [[1040, "sklearn-utils-sparsefuncs"]], "Version 0.21.1": [[1040, "version-0-21-1"]], "Version 0.21.0": [[1040, "version-0-21-0"]], "sklearn.base": [[1040, "sklearn-base"], [1041, "sklearn-base"], [1043, "sklearn-base"], [1044, "sklearn-base"], [1045, "sklearn-base"], [1046, "sklearn-base"], [1046, "id2"], [1046, "id10"], [1047, "sklearn-base"], [1048, "sklearn-base"]], "sklearn.calibration": [[1040, "sklearn-calibration"], [1041, "sklearn-calibration"], [1043, "sklearn-calibration"], [1044, "sklearn-calibration"], [1044, "id8"], [1045, "sklearn-calibration"], [1046, "sklearn-calibration"], [1046, "id11"], [1047, "sklearn-calibration"], [1047, "id7"], [1048, "sklearn-calibration"]], "sklearn.externals": [[1040, "sklearn-externals"]], "sklearn.multiclass": [[1040, "sklearn-multiclass"], [1043, "sklearn-multiclass"], [1044, "sklearn-multiclass"], [1045, "sklearn-multiclass"]], "Version 0.22.2.post1": [[1041, "version-0-22-2-post1"]], "Version 0.22.1": [[1041, "version-0-22-1"]], "sklearn.semi_supervised": [[1041, "sklearn-semi-supervised"], [1042, "sklearn-semi-supervised"], [1043, "sklearn-semi-supervised"], [1043, "id3"], [1043, "id16"], [1047, "sklearn-semi-supervised"]], "Version 0.22.0": [[1041, "version-0-22-0"]], "Website update": [[1041, "website-update"]], "Clear definition of the public API": [[1041, "clear-definition-of-the-public-api"]], "Deprecations: using FutureWarning from now on": [[1041, "deprecations-using-futurewarning-from-now-on"]], "sklearn.cross_decomposition": [[1041, "sklearn-cross-decomposition"], [1043, "sklearn-cross-decomposition"], [1043, "id6"], [1045, "sklearn-cross-decomposition"], [1047, "sklearn-cross-decomposition"]], "sklearn.kernel_approximation": [[1041, "sklearn-kernel-approximation"], [1043, "sklearn-kernel-approximation"], [1044, "sklearn-kernel-approximation"], [1045, "sklearn-kernel-approximation"], [1046, "sklearn-kernel-approximation"], [1047, "sklearn-kernel-approximation"]], "Version 0.23.2": [[1042, "version-0-23-2"]], "Version 0.23.1": [[1042, "version-0-23-1"]], "Version 0.23.0": [[1042, "version-0-23-0"]], "Enforcing keyword-only arguments": [[1042, "enforcing-keyword-only-arguments"], [1044, "enforcing-keyword-only-arguments"]], "Version 0.24.2": [[1043, "version-0-24-2"]], "Version 0.24.1": [[1043, "version-0-24-1"]], "Packaging": [[1043, "packaging"]], "Version 0.24.0": [[1043, "version-0-24-0"]], "sklearn.exceptions": [[1043, "sklearn-exceptions"], [1047, "sklearn-exceptions"]], "Version 1.0.2": [[1044, "version-1-0-2"]], "Version 1.0.1": [[1044, "version-1-0-1"]], "Fixed models": [[1044, "fixed-models"]], "Version 1.0.0": [[1044, "version-1-0-0"]], "Minimal dependencies": [[1044, "minimal-dependencies"], [1045, "minimal-dependencies"]], "Version 1.1.3": [[1045, "version-1-1-3"]], "Version 1.1.2": [[1045, "version-1-1-2"]], "Version 1.1.1": [[1045, "version-1-1-1"]], "Version 1.1.0": [[1045, "version-1-1-0"]], "sklearn.random_projection": [[1045, "sklearn-random-projection"]], "Version 1.2.2": [[1046, "version-1-2-2"]], "Version 1.2.1": [[1046, "version-1-2-1"]], "Changes impacting all modules": [[1046, "changes-impacting-all-modules"], [1046, "id8"], [1047, "changes-impacting-all-modules"], [1047, "id5"], [1048, "changes-impacting-all-modules"]], "Version 1.2.0": [[1046, "version-1-2-0"]], "Version 1.3.2": [[1047, "version-1-3-2"]], "Version 1.3.1": [[1047, "version-1-3-1"]], "Version 1.3.0": [[1047, "version-1-3-0"]], "Changed displays": [[1047, "changed-displays"]], "Experimental / Under Development": [[1047, "experimental-under-development"]], "sklearn": [[1047, "sklearn"]], "Version 1.4.0": [[1048, "version-1-4-0"]], "Support for SciPy sparse arrays": [[1048, "support-for-scipy-sparse-arrays"]], "Support for Array API": [[1048, "support-for-array-api"]], "sklearn.kernel_ridge": [[1048, "sklearn-kernel-ridge"]]}, "indexentries": {"1d": [[396, "term-1d"]], "1d array": [[396, "term-1d-array"]], "2d": [[396, "term-2d"]], "2d array": [[396, "term-2d-array"]], "api": [[396, "term-API"]], "cv splitter": [[396, "term-CV-splitter"]], "slep": [[396, "term-SLEP"]], "sleps": [[396, "term-SLEPs"]], "x": [[396, "term-X"]], "xt": [[396, "term-Xt"]], "y": [[396, "term-Y"], [396, "term-y"]], "_estimator_type": [[396, "term-_estimator_type"]], "array-like": [[396, "term-array-like"]], "attribute": [[396, "term-attribute"]], "attributes": [[396, "term-attributes"]], "backwards compatibility": [[396, "term-backwards-compatibility"]], "binary": [[396, "term-binary"]], "callable": [[396, "term-callable"]], "categorical feature": [[396, "term-categorical-feature"]], "class_weight": [[396, "term-class_weight"]], "classes_": [[396, "term-classes_"]], "classifier": [[396, "term-classifier"]], "classifiers": [[396, "term-classifiers"]], "clone": [[396, "term-clone"]], "cloned": [[396, "term-cloned"]], "clusterer": [[396, "term-clusterer"]], "clusterers": [[396, "term-clusterers"]], "coef_": [[396, "term-coef_"]], "common tests": [[396, "term-common-tests"]], "components_": [[396, "term-components_"]], "consumer": [[396, "term-consumer"]], "continuous": [[396, "term-continuous"]], "continuous multi-output": [[396, "term-continuous-multi-output"]], "continuous multioutput": [[396, "term-continuous-multioutput"]], "cross fitting": [[396, "term-0"]], "cross validation": [[396, "term-1"]], "cross-fitting": [[396, "term-cross-fitting"]], "cross-validation": [[396, "term-cross-validation"]], "cross-validation estimator": [[396, "term-cross-validation-estimator"]], "cross-validation generator": [[396, "term-cross-validation-generator"]], "cross-validation splitter": [[396, "term-cross-validation-splitter"]], "cv": [[396, "term-cv"]], "data leakage": [[396, "term-data-leakage"]], "data type": [[396, "term-data-type"]], "decision_function": [[396, "term-decision_function"]], "density estimator": [[396, "term-density-estimator"]], "deprecation": [[396, "term-deprecation"]], "dimensionality": [[396, "term-dimensionality"]], "docstring": [[396, "term-docstring"]], "double underscore": [[396, "term-double-underscore"]], "double underscore notation": [[396, "term-double-underscore-notation"]], "dtype": [[396, "term-dtype"]], "duck typing": [[396, "term-duck-typing"]], "early stopping": [[396, "term-early-stopping"]], "embedding_": [[396, "term-embedding_"]], "estimator": [[396, "term-estimator"]], "estimator instance": [[396, "term-estimator-instance"]], "estimator tags": [[396, "term-estimator-tags"]], "estimators": [[396, "term-estimators"]], "evaluation metric": [[396, "term-evaluation-metric"]], "evaluation metrics": [[396, "term-evaluation-metrics"]], "examples": [[396, "term-examples"]], "experimental": [[396, "term-experimental"]], "feature": [[396, "term-feature"]], "feature extractor": [[396, "term-feature-extractor"]], "feature extractors": [[396, "term-feature-extractors"]], "feature vector": [[396, "term-feature-vector"]], "feature_importances_": [[396, "term-feature_importances_"]], "features": [[396, "term-features"]], "fit": [[396, "term-fit"]], "fit_predict": [[396, "term-fit_predict"]], "fit_transform": [[396, "term-fit_transform"]], "fitted": [[396, "term-fitted"]], "fitting": [[396, "term-fitting"]], "function": [[396, "term-function"]], "gallery": [[396, "term-gallery"]], "get_feature_names_out": [[396, "term-get_feature_names_out"]], "get_n_splits": [[396, "term-get_n_splits"]], "get_params": [[396, "term-get_params"]], "groups": [[396, "term-groups"]], "hyper-parameter": [[396, "term-hyper-parameter"]], "hyperparameter": [[396, "term-hyperparameter"]], "imputation": [[396, "term-imputation"]], "impute": [[396, "term-impute"]], "indexable": [[396, "term-indexable"]], "induction": [[396, "term-induction"]], "inductive": [[396, "term-inductive"]], "joblib": [[396, "term-joblib"]], "kernel": [[396, "term-kernel"]], "label indicator matrix": [[396, "term-label-indicator-matrix"]], "labels_": [[396, "term-labels_"]], "leakage": [[396, "term-leakage"]], "max_iter": [[396, "term-max_iter"]], "memmapping": [[396, "term-memmapping"]], "memory": [[396, "term-memory"]], "memory map": [[396, "term-memory-map"]], "memory mapping": [[396, "term-memory-mapping"]], "meta-estimator": [[396, "term-meta-estimator"]], "meta-estimators": [[396, "term-meta-estimators"]], "metadata": [[396, "term-metadata"]], "metaestimator": [[396, "term-metaestimator"]], "metaestimators": [[396, "term-metaestimators"]], "metric": [[396, "term-metric"]], "missing values": [[396, "term-missing-values"]], "multi-class": [[396, "term-multi-class"]], "multi-class multi-output": [[396, "term-multi-class-multi-output"]], "multi-label": [[396, "term-multi-label"]], "multi-output": [[396, "term-multi-output"]], "multi-output continuous": [[396, "term-multi-output-continuous"]], "multi-output multi-class": [[396, "term-multi-output-multi-class"]], "multiclass": [[396, "term-multiclass"]], "multiclass multioutput": [[396, "term-multiclass-multioutput"]], "multilabel": [[396, "term-multilabel"]], "multilabel indicator matrices": [[396, "term-multilabel-indicator-matrices"]], "multilabel indicator matrix": [[396, "term-multilabel-indicator-matrix"]], "multioutput": [[396, "term-multioutput"]], "multioutput continuous": [[396, "term-multioutput-continuous"]], "multioutput multiclass": [[396, "term-multioutput-multiclass"]], "n_components": [[396, "term-n_components"]], "n_features": [[396, "term-n_features"]], "n_iter_": [[396, "term-n_iter_"]], "n_iter_no_change": [[396, "term-n_iter_no_change"]], "n_jobs": [[396, "term-n_jobs"]], "n_outputs": [[396, "term-n_outputs"]], "n_samples": [[396, "term-n_samples"]], "n_targets": [[396, "term-n_targets"]], "narrative docs": [[396, "term-narrative-docs"]], "narrative documentation": [[396, "term-narrative-documentation"]], "np": [[396, "term-np"]], "online learning": [[396, "term-online-learning"]], "out-of-core": [[396, "term-out-of-core"]], "outlier detector": [[396, "term-outlier-detector"]], "outlier detectors": [[396, "term-outlier-detectors"]], "outputs": [[396, "term-outputs"]], "pair": [[396, "term-pair"]], "pairwise metric": [[396, "term-pairwise-metric"]], "pairwise metrics": [[396, "term-pairwise-metrics"]], "param": [[396, "term-param"]], "parameter": [[396, "term-parameter"]], "parameters": [[396, "term-parameters"]], "params": [[396, "term-params"]], "partial_fit": [[396, "term-partial_fit"]], "pd": [[396, "term-pd"]], "pos_label": [[396, "term-pos_label"]], "precomputed": [[396, "term-precomputed"]], "predict": [[396, "term-predict"]], "predict_log_proba": [[396, "term-predict_log_proba"]], "predict_proba": [[396, "term-predict_proba"]], "predictor": [[396, "term-predictor"]], "predictors": [[396, "term-predictors"]], "random_state": [[396, "term-random_state"]], "rectangular": [[396, "term-rectangular"]], "regressor": [[396, "term-regressor"]], "regressors": [[396, "term-regressors"]], "router": [[396, "term-router"]], "sample": [[396, "term-sample"]], "sample properties": [[396, "term-sample-properties"]], "sample property": [[396, "term-sample-property"]], "sample_weight": [[396, "term-sample_weight"]], "samples": [[396, "term-samples"]], "scikit-learn enhancement proposals": [[396, "term-scikit-learn-enhancement-proposals"]], "scikit-learn-contrib": [[396, "term-scikit-learn-contrib"]], "score": [[396, "term-score"]], "score_samples": [[396, "term-score_samples"]], "scorer": [[396, "term-scorer"]], "scoring": [[396, "term-scoring"]], "semi-supervised": [[396, "term-semi-supervised"]], "semi-supervised learning": [[396, "term-semi-supervised-learning"]], "semisupervised": [[396, "term-semisupervised"]], "set_params": [[396, "term-set_params"]], "sparse graph": [[396, "term-sparse-graph"]], "sparse matrix": [[396, "term-sparse-matrix"]], "split": [[396, "term-split"]], "stateless": [[396, "term-stateless"]], "supervised": [[396, "term-supervised"]], "supervised learning": [[396, "term-supervised-learning"]], "target": [[396, "term-target"]], "targets": [[396, "term-targets"]], "transduction": [[396, "term-transduction"]], "transductive": [[396, "term-transductive"]], "transform": [[396, "term-transform"]], "transformer": [[396, "term-transformer"]], "transformers": [[396, "term-transformers"]], "unlabeled": [[396, "term-unlabeled"]], "unlabeled data": [[396, "term-unlabeled-data"]], "unsupervised": [[396, "term-unsupervised"]], "unsupervised learning": [[396, "term-unsupervised-learning"]], "vectorizer": [[396, "term-vectorizer"]], "vectorizers": [[396, "term-vectorizers"]], "verbose": [[396, "term-verbose"]], "warm_start": [[396, "term-warm_start"]], "module": [[408, "module-sklearn"], [408, "module-sklearn.base"], [408, "module-sklearn.calibration"], [408, "module-sklearn.cluster"], [408, "module-sklearn.compose"], [408, "module-sklearn.covariance"], [408, "module-sklearn.cross_decomposition"], [408, "module-sklearn.datasets"], [408, "module-sklearn.decomposition"], [408, "module-sklearn.discriminant_analysis"], [408, "module-sklearn.dummy"], [408, "module-sklearn.ensemble"], [408, "module-sklearn.exceptions"], [408, "module-sklearn.experimental"], [408, "module-sklearn.feature_extraction"], [408, "module-sklearn.feature_extraction.image"], [408, "module-sklearn.feature_extraction.text"], [408, "module-sklearn.feature_selection"], [408, "module-sklearn.gaussian_process"], [408, "module-sklearn.gaussian_process.kernels"], [408, "module-sklearn.impute"], [408, "module-sklearn.inspection"], [408, "module-sklearn.isotonic"], [408, "module-sklearn.kernel_approximation"], [408, "module-sklearn.kernel_ridge"], [408, "module-sklearn.linear_model"], [408, "module-sklearn.manifold"], [408, "module-sklearn.metrics"], [408, "module-sklearn.metrics.cluster"], [408, "module-sklearn.metrics.pairwise"], [408, "module-sklearn.mixture"], [408, "module-sklearn.model_selection"], [408, "module-sklearn.multiclass"], [408, "module-sklearn.multioutput"], [408, "module-sklearn.naive_bayes"], [408, "module-sklearn.neighbors"], [408, "module-sklearn.neural_network"], [408, "module-sklearn.pipeline"], [408, "module-sklearn.preprocessing"], [408, "module-sklearn.random_projection"], [408, "module-sklearn.semi_supervised"], [408, "module-sklearn.svm"], [408, "module-sklearn.tree"], [408, "module-sklearn.utils"], [408, "module-sklearn.utils.arrayfuncs"], [408, "module-sklearn.utils.class_weight"], [408, "module-sklearn.utils.discovery"], [408, "module-sklearn.utils.estimator_checks"], [408, "module-sklearn.utils.extmath"], [408, "module-sklearn.utils.graph"], [408, "module-sklearn.utils.metadata_routing"], [408, "module-sklearn.utils.metaestimators"], [408, "module-sklearn.utils.multiclass"], [408, "module-sklearn.utils.parallel"], [408, "module-sklearn.utils.random"], [408, "module-sklearn.utils.sparsefuncs"], [408, "module-sklearn.utils.sparsefuncs_fast"], [408, "module-sklearn.utils.validation"], [579, "module-sklearn.experimental.enable_halving_search_cv"], [580, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn": [[408, "module-sklearn"]], "sklearn.base": [[408, "module-sklearn.base"]], "sklearn.calibration": [[408, "module-sklearn.calibration"]], "sklearn.cluster": [[408, "module-sklearn.cluster"]], "sklearn.compose": [[408, "module-sklearn.compose"]], "sklearn.covariance": [[408, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[408, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[408, "module-sklearn.datasets"]], "sklearn.decomposition": [[408, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[408, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[408, "module-sklearn.dummy"]], "sklearn.ensemble": [[408, "module-sklearn.ensemble"]], "sklearn.exceptions": [[408, "module-sklearn.exceptions"]], "sklearn.experimental": [[408, "module-sklearn.experimental"]], "sklearn.feature_extraction": [[408, "module-sklearn.feature_extraction"]], "sklearn.feature_extraction.image": [[408, "module-sklearn.feature_extraction.image"]], "sklearn.feature_extraction.text": [[408, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection": [[408, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[408, "module-sklearn.gaussian_process"]], "sklearn.gaussian_process.kernels": [[408, "module-sklearn.gaussian_process.kernels"]], "sklearn.impute": [[408, "module-sklearn.impute"]], "sklearn.inspection": [[408, "module-sklearn.inspection"]], "sklearn.isotonic": [[408, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[408, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[408, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[408, "module-sklearn.linear_model"]], "sklearn.manifold": [[408, "module-sklearn.manifold"]], "sklearn.metrics": [[408, "module-sklearn.metrics"]], "sklearn.metrics.cluster": [[408, "module-sklearn.metrics.cluster"]], "sklearn.metrics.pairwise": [[408, "module-sklearn.metrics.pairwise"]], "sklearn.mixture": [[408, "module-sklearn.mixture"]], "sklearn.model_selection": [[408, "module-sklearn.model_selection"]], "sklearn.multiclass": [[408, "module-sklearn.multiclass"]], "sklearn.multioutput": [[408, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[408, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[408, "module-sklearn.neighbors"]], "sklearn.neural_network": [[408, "module-sklearn.neural_network"]], "sklearn.pipeline": [[408, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[408, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[408, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[408, "module-sklearn.semi_supervised"]], "sklearn.svm": [[408, "module-sklearn.svm"]], "sklearn.tree": [[408, "module-sklearn.tree"]], "sklearn.utils": [[408, "module-sklearn.utils"]], "sklearn.utils.arrayfuncs": [[408, "module-sklearn.utils.arrayfuncs"]], "sklearn.utils.class_weight": [[408, "module-sklearn.utils.class_weight"]], "sklearn.utils.discovery": [[408, "module-sklearn.utils.discovery"]], "sklearn.utils.estimator_checks": [[408, "module-sklearn.utils.estimator_checks"]], "sklearn.utils.extmath": [[408, "module-sklearn.utils.extmath"]], "sklearn.utils.graph": [[408, "module-sklearn.utils.graph"]], "sklearn.utils.metadata_routing": [[408, "module-sklearn.utils.metadata_routing"]], "sklearn.utils.metaestimators": [[408, "module-sklearn.utils.metaestimators"]], "sklearn.utils.multiclass": [[408, "module-sklearn.utils.multiclass"]], "sklearn.utils.parallel": [[408, "module-sklearn.utils.parallel"]], "sklearn.utils.random": [[408, "module-sklearn.utils.random"]], "sklearn.utils.sparsefuncs": [[408, "module-sklearn.utils.sparsefuncs"]], "sklearn.utils.sparsefuncs_fast": [[408, "module-sklearn.utils.sparsefuncs_fast"]], "sklearn.utils.validation": [[408, "module-sklearn.utils.validation"]], "dbscan() (in module sklearn.cluster)": [[420, "sklearn.cluster.dbscan"]], "fastica() (in module sklearn.decomposition)": [[421, "sklearn.decomposition.fastica"]], "oas() (in module sklearn.covariance)": [[422, "sklearn.covariance.oas"]], "baseestimator (class in sklearn.base)": [[423, "sklearn.base.BaseEstimator"]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[423, "sklearn.base.BaseEstimator.get_metadata_routing"]], "get_params() (sklearn.base.baseestimator method)": [[423, "sklearn.base.BaseEstimator.get_params"]], "set_params() (sklearn.base.baseestimator method)": [[423, "sklearn.base.BaseEstimator.set_params"]], "biclustermixin (class in sklearn.base)": [[424, "sklearn.base.BiclusterMixin"]], "biclusters_ (sklearn.base.biclustermixin property)": [[424, "sklearn.base.BiclusterMixin.biclusters_"]], "get_indices() (sklearn.base.biclustermixin method)": [[424, "sklearn.base.BiclusterMixin.get_indices"]], "get_shape() (sklearn.base.biclustermixin method)": [[424, "sklearn.base.BiclusterMixin.get_shape"]], "get_submatrix() (sklearn.base.biclustermixin method)": [[424, "sklearn.base.BiclusterMixin.get_submatrix"]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[425, "sklearn.base.ClassNamePrefixFeaturesOutMixin"]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[425, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out"]], "classifiermixin (class in sklearn.base)": [[426, "sklearn.base.ClassifierMixin"]], "score() (sklearn.base.classifiermixin method)": [[426, "sklearn.base.ClassifierMixin.score"]], "clustermixin (class in sklearn.base)": [[427, "sklearn.base.ClusterMixin"]], "fit_predict() (sklearn.base.clustermixin method)": [[427, "sklearn.base.ClusterMixin.fit_predict"]], "densitymixin (class in sklearn.base)": [[428, "sklearn.base.DensityMixin"]], "score() (sklearn.base.densitymixin method)": [[428, "sklearn.base.DensityMixin.score"]], "metaestimatormixin (class in sklearn.base)": [[429, "sklearn.base.MetaEstimatorMixin"]], "onetoonefeaturemixin (class in sklearn.base)": [[430, "sklearn.base.OneToOneFeatureMixin"]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[430, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out"]], "outliermixin (class in sklearn.base)": [[431, "sklearn.base.OutlierMixin"]], "fit_predict() (sklearn.base.outliermixin method)": [[431, "sklearn.base.OutlierMixin.fit_predict"]], "regressormixin (class in sklearn.base)": [[432, "sklearn.base.RegressorMixin"]], "score() (sklearn.base.regressormixin method)": [[432, "sklearn.base.RegressorMixin.score"]], "transformermixin (class in sklearn.base)": [[433, "sklearn.base.TransformerMixin"]], "fit_transform() (sklearn.base.transformermixin method)": [[433, "sklearn.base.TransformerMixin.fit_transform"]], "set_output() (sklearn.base.transformermixin method)": [[433, "sklearn.base.TransformerMixin.set_output"]], "clone() (in module sklearn.base)": [[434, "sklearn.base.clone"]], "is_classifier() (in module sklearn.base)": [[435, "sklearn.base.is_classifier"]], "is_regressor() (in module sklearn.base)": [[436, "sklearn.base.is_regressor"]], "calibratedclassifiercv (class in sklearn.calibration)": [[437, "sklearn.calibration.CalibratedClassifierCV"]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.fit"]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing"]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.get_params"]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.predict"]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.predict_proba"]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.score"]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.set_fit_request"]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.set_params"]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.set_score_request"]], "calibrationdisplay (class in sklearn.calibration)": [[438, "sklearn.calibration.CalibrationDisplay"]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[438, "sklearn.calibration.CalibrationDisplay.from_estimator"]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[438, "sklearn.calibration.CalibrationDisplay.from_predictions"]], "plot() (sklearn.calibration.calibrationdisplay method)": [[438, "sklearn.calibration.CalibrationDisplay.plot"]], "calibration_curve() (in module sklearn.calibration)": [[439, "sklearn.calibration.calibration_curve"]], "affinitypropagation (class in sklearn.cluster)": [[440, "sklearn.cluster.AffinityPropagation"]], "fit() (sklearn.cluster.affinitypropagation method)": [[440, "sklearn.cluster.AffinityPropagation.fit"]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[440, "sklearn.cluster.AffinityPropagation.fit_predict"]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[440, "sklearn.cluster.AffinityPropagation.get_metadata_routing"]], "get_params() (sklearn.cluster.affinitypropagation method)": [[440, "sklearn.cluster.AffinityPropagation.get_params"]], "predict() (sklearn.cluster.affinitypropagation method)": [[440, "sklearn.cluster.AffinityPropagation.predict"]], "set_params() (sklearn.cluster.affinitypropagation method)": [[440, "sklearn.cluster.AffinityPropagation.set_params"]], "agglomerativeclustering (class in sklearn.cluster)": [[441, "sklearn.cluster.AgglomerativeClustering"]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[441, "sklearn.cluster.AgglomerativeClustering.fit"]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[441, "sklearn.cluster.AgglomerativeClustering.fit_predict"]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[441, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing"]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[441, "sklearn.cluster.AgglomerativeClustering.get_params"]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[441, "sklearn.cluster.AgglomerativeClustering.set_params"]], "birch (class in sklearn.cluster)": [[442, "sklearn.cluster.Birch"]], "fit() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.fit"]], "fit_predict() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.fit_predict"]], "fit_transform() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.fit_transform"]], "get_feature_names_out() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.get_metadata_routing"]], "get_params() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.get_params"]], "partial_fit() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.partial_fit"]], "predict() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.predict"]], "set_output() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.set_output"]], "set_params() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.set_params"]], "transform() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.transform"]], "bisectingkmeans (class in sklearn.cluster)": [[443, "sklearn.cluster.BisectingKMeans"]], "fit() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.fit"]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.get_params"]], "predict() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.predict"]], "score() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.score"]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.set_fit_request"]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.set_output"]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.set_params"]], "set_predict_request() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.set_score_request"]], "transform() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.transform"]], "dbscan (class in sklearn.cluster)": [[444, "sklearn.cluster.DBSCAN"]], "fit() (sklearn.cluster.dbscan method)": [[444, "sklearn.cluster.DBSCAN.fit"]], "fit_predict() (sklearn.cluster.dbscan method)": [[444, "sklearn.cluster.DBSCAN.fit_predict"]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[444, "sklearn.cluster.DBSCAN.get_metadata_routing"]], "get_params() (sklearn.cluster.dbscan method)": [[444, "sklearn.cluster.DBSCAN.get_params"]], "set_fit_request() (sklearn.cluster.dbscan method)": [[444, "sklearn.cluster.DBSCAN.set_fit_request"]], "set_params() (sklearn.cluster.dbscan method)": [[444, "sklearn.cluster.DBSCAN.set_params"]], "featureagglomeration (class in sklearn.cluster)": [[445, "sklearn.cluster.FeatureAgglomeration"]], "fit() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.fit"]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[445, "sklearn.cluster.FeatureAgglomeration.fit_predict"]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.fit_transform"]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing"]], "get_params() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.get_params"]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.inverse_transform"]], "set_output() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.set_output"]], "set_params() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.set_params"]], "transform() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.transform"]], "hdbscan (class in sklearn.cluster)": [[446, "sklearn.cluster.HDBSCAN"]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[446, "sklearn.cluster.HDBSCAN.dbscan_clustering"]], "fit() (sklearn.cluster.hdbscan method)": [[446, "sklearn.cluster.HDBSCAN.fit"]], "fit_predict() (sklearn.cluster.hdbscan method)": [[446, "sklearn.cluster.HDBSCAN.fit_predict"]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[446, "sklearn.cluster.HDBSCAN.get_metadata_routing"]], "get_params() (sklearn.cluster.hdbscan method)": [[446, "sklearn.cluster.HDBSCAN.get_params"]], "set_params() (sklearn.cluster.hdbscan method)": [[446, "sklearn.cluster.HDBSCAN.set_params"]], "kmeans (class in sklearn.cluster)": [[447, "sklearn.cluster.KMeans"]], "fit() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.fit"]], "fit_predict() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.fit_predict"]], "fit_transform() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.get_params"]], "predict() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.predict"]], "score() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.score"]], "set_fit_request() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.set_fit_request"]], "set_output() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.set_output"]], "set_params() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.set_params"]], "set_predict_request() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.set_score_request"]], "transform() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.transform"]], "meanshift (class in sklearn.cluster)": [[448, "sklearn.cluster.MeanShift"]], "fit() (sklearn.cluster.meanshift method)": [[448, "sklearn.cluster.MeanShift.fit"]], "fit_predict() (sklearn.cluster.meanshift method)": [[448, "sklearn.cluster.MeanShift.fit_predict"]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[448, "sklearn.cluster.MeanShift.get_metadata_routing"]], "get_params() (sklearn.cluster.meanshift method)": [[448, "sklearn.cluster.MeanShift.get_params"]], "predict() (sklearn.cluster.meanshift method)": [[448, "sklearn.cluster.MeanShift.predict"]], "set_params() (sklearn.cluster.meanshift method)": [[448, "sklearn.cluster.MeanShift.set_params"]], "minibatchkmeans (class in sklearn.cluster)": [[449, "sklearn.cluster.MiniBatchKMeans"]], "fit() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.fit"]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.get_params"]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.partial_fit"]], "predict() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.predict"]], "score() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.score"]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.set_fit_request"]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.set_output"]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.set_params"]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request"]], "set_predict_request() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.set_score_request"]], "transform() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.transform"]], "optics (class in sklearn.cluster)": [[450, "sklearn.cluster.OPTICS"]], "fit() (sklearn.cluster.optics method)": [[450, "sklearn.cluster.OPTICS.fit"]], "fit_predict() (sklearn.cluster.optics method)": [[450, "sklearn.cluster.OPTICS.fit_predict"]], "get_metadata_routing() (sklearn.cluster.optics method)": [[450, "sklearn.cluster.OPTICS.get_metadata_routing"]], "get_params() (sklearn.cluster.optics method)": [[450, "sklearn.cluster.OPTICS.get_params"]], "set_params() (sklearn.cluster.optics method)": [[450, "sklearn.cluster.OPTICS.set_params"]], "spectralbiclustering (class in sklearn.cluster)": [[451, "sklearn.cluster.SpectralBiclustering"]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[451, "sklearn.cluster.SpectralBiclustering.biclusters_"]], "fit() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.fit"]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.get_indices"]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.get_params"]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.set_params"]], "spectralclustering (class in sklearn.cluster)": [[452, "sklearn.cluster.SpectralClustering"]], "fit() (sklearn.cluster.spectralclustering method)": [[452, "sklearn.cluster.SpectralClustering.fit"]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[452, "sklearn.cluster.SpectralClustering.fit_predict"]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[452, "sklearn.cluster.SpectralClustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralclustering method)": [[452, "sklearn.cluster.SpectralClustering.get_params"]], "set_params() (sklearn.cluster.spectralclustering method)": [[452, "sklearn.cluster.SpectralClustering.set_params"]], "spectralcoclustering (class in sklearn.cluster)": [[453, "sklearn.cluster.SpectralCoclustering"]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[453, "sklearn.cluster.SpectralCoclustering.biclusters_"]], "fit() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.fit"]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.get_indices"]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.get_params"]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.set_params"]], "affinity_propagation() (in module sklearn.cluster)": [[454, "sklearn.cluster.affinity_propagation"]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[455, "sklearn.cluster.cluster_optics_dbscan"]], "cluster_optics_xi() (in module sklearn.cluster)": [[456, "sklearn.cluster.cluster_optics_xi"]], "compute_optics_graph() (in module sklearn.cluster)": [[457, "sklearn.cluster.compute_optics_graph"]], "estimate_bandwidth() (in module sklearn.cluster)": [[458, "sklearn.cluster.estimate_bandwidth"]], "k_means() (in module sklearn.cluster)": [[459, "sklearn.cluster.k_means"]], "kmeans_plusplus() (in module sklearn.cluster)": [[460, "sklearn.cluster.kmeans_plusplus"]], "mean_shift() (in module sklearn.cluster)": [[461, "sklearn.cluster.mean_shift"]], "spectral_clustering() (in module sklearn.cluster)": [[462, "sklearn.cluster.spectral_clustering"]], "ward_tree() (in module sklearn.cluster)": [[463, "sklearn.cluster.ward_tree"]], "columntransformer (class in sklearn.compose)": [[464, "sklearn.compose.ColumnTransformer"]], "fit() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.fit"]], "fit_transform() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.fit_transform"]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.get_metadata_routing"]], "get_params() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.get_params"]], "named_transformers_ (sklearn.compose.columntransformer property)": [[464, "sklearn.compose.ColumnTransformer.named_transformers_"]], "set_output() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.set_output"]], "set_params() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.set_params"]], "transform() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.transform"]], "transformedtargetregressor (class in sklearn.compose)": [[465, "sklearn.compose.TransformedTargetRegressor"]], "fit() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.fit"]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing"]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.get_params"]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[465, "sklearn.compose.TransformedTargetRegressor.n_features_in_"]], "predict() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.predict"]], "score() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.score"]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.set_params"]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.set_score_request"]], "make_column_selector() (in module sklearn.compose)": [[466, "sklearn.compose.make_column_selector"]], "make_column_transformer() (in module sklearn.compose)": [[467, "sklearn.compose.make_column_transformer"]], "config_context() (in module sklearn)": [[468, "sklearn.config_context"]], "ellipticenvelope (class in sklearn.covariance)": [[469, "sklearn.covariance.EllipticEnvelope"]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.correct_covariance"]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.decision_function"]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.error_norm"]], "fit() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.fit"]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.fit_predict"]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.get_metadata_routing"]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.get_params"]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.get_precision"]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.mahalanobis"]], "predict() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.predict"]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.reweight_covariance"]], "score() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.score"]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.score_samples"]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.set_params"]], "set_score_request() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.set_score_request"]], "empiricalcovariance (class in sklearn.covariance)": [[470, "sklearn.covariance.EmpiricalCovariance"]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.error_norm"]], "fit() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.fit"]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing"]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.get_params"]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.mahalanobis"]], "score() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.score"]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.set_params"]], "set_score_request() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.set_score_request"]], "graphicallasso (class in sklearn.covariance)": [[471, "sklearn.covariance.GraphicalLasso"]], "error_norm() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.error_norm"]], "fit() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.fit"]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.get_metadata_routing"]], "get_params() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.get_params"]], "get_precision() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.mahalanobis"]], "score() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.score"]], "set_params() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.set_params"]], "set_score_request() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.set_score_request"]], "graphicallassocv (class in sklearn.covariance)": [[472, "sklearn.covariance.GraphicalLassoCV"]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.error_norm"]], "fit() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.fit"]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing"]], "get_params() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.get_params"]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.mahalanobis"]], "score() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.score"]], "set_params() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.set_params"]], "set_score_request() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.set_score_request"]], "ledoitwolf (class in sklearn.covariance)": [[473, "sklearn.covariance.LedoitWolf"]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.error_norm"]], "fit() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.fit"]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.get_metadata_routing"]], "get_params() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.get_params"]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.get_precision"]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.mahalanobis"]], "score() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.score"]], "set_params() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.set_params"]], "set_score_request() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.set_score_request"]], "mincovdet (class in sklearn.covariance)": [[474, "sklearn.covariance.MinCovDet"]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.correct_covariance"]], "error_norm() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.error_norm"]], "fit() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.fit"]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.get_metadata_routing"]], "get_params() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.get_params"]], "get_precision() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.get_precision"]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.mahalanobis"]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.reweight_covariance"]], "score() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.score"]], "set_params() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.set_params"]], "set_score_request() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.set_score_request"]], "oas (class in sklearn.covariance)": [[475, "sklearn.covariance.OAS"]], "error_norm() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.error_norm"]], "fit() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.fit"]], "get_metadata_routing() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.get_metadata_routing"]], "get_params() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.get_params"]], "get_precision() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.get_precision"]], "mahalanobis() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.mahalanobis"]], "score() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.score"]], "set_params() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.set_params"]], "set_score_request() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.set_score_request"]], "shrunkcovariance (class in sklearn.covariance)": [[476, "sklearn.covariance.ShrunkCovariance"]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.error_norm"]], "fit() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.fit"]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.get_metadata_routing"]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.get_params"]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.mahalanobis"]], "score() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.score"]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.set_params"]], "set_score_request() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.set_score_request"]], "empirical_covariance() (in module sklearn.covariance)": [[477, "sklearn.covariance.empirical_covariance"]], "graphical_lasso() (in module sklearn.covariance)": [[478, "sklearn.covariance.graphical_lasso"]], "ledoit_wolf() (in module sklearn.covariance)": [[479, "sklearn.covariance.ledoit_wolf"]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[480, "sklearn.covariance.ledoit_wolf_shrinkage"]], "shrunk_covariance() (in module sklearn.covariance)": [[481, "sklearn.covariance.shrunk_covariance"]], "cca (class in sklearn.cross_decomposition)": [[482, "sklearn.cross_decomposition.CCA"]], "fit() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.fit"]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.get_params"]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.inverse_transform"]], "predict() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.predict"]], "score() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.score"]], "set_output() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.set_output"]], "set_params() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.set_params"]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.set_transform_request"]], "transform() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.transform"]], "plscanonical (class in sklearn.cross_decomposition)": [[483, "sklearn.cross_decomposition.PLSCanonical"]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.fit"]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.inverse_transform"]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.predict"]], "score() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.score"]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.set_output"]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.set_params"]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.set_transform_request"]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.transform"]], "plsregression (class in sklearn.cross_decomposition)": [[484, "sklearn.cross_decomposition.PLSRegression"]], "fit() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.fit"]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.inverse_transform"]], "predict() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.predict"]], "score() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.score"]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.set_output"]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.set_params"]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.set_transform_request"]], "transform() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.transform"]], "plssvd (class in sklearn.cross_decomposition)": [[485, "sklearn.cross_decomposition.PLSSVD"]], "fit() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.fit"]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.get_params"]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.set_output"]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.set_params"]], "transform() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.transform"]], "clear_data_home() (in module sklearn.datasets)": [[486, "sklearn.datasets.clear_data_home"]], "dump_svmlight_file() (in module sklearn.datasets)": [[487, "sklearn.datasets.dump_svmlight_file"]], "fetch_20newsgroups() (in module sklearn.datasets)": [[488, "sklearn.datasets.fetch_20newsgroups"]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[489, "sklearn.datasets.fetch_20newsgroups_vectorized"]], "fetch_california_housing() (in module sklearn.datasets)": [[490, "sklearn.datasets.fetch_california_housing"]], "fetch_covtype() (in module sklearn.datasets)": [[491, "sklearn.datasets.fetch_covtype"]], "fetch_kddcup99() (in module sklearn.datasets)": [[492, "sklearn.datasets.fetch_kddcup99"]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[493, "sklearn.datasets.fetch_lfw_pairs"]], "fetch_lfw_people() (in module sklearn.datasets)": [[494, "sklearn.datasets.fetch_lfw_people"]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[495, "sklearn.datasets.fetch_olivetti_faces"]], "fetch_openml() (in module sklearn.datasets)": [[496, "sklearn.datasets.fetch_openml"]], "fetch_rcv1() (in module sklearn.datasets)": [[497, "sklearn.datasets.fetch_rcv1"]], "fetch_species_distributions() (in module sklearn.datasets)": [[498, "sklearn.datasets.fetch_species_distributions"]], "get_data_home() (in module sklearn.datasets)": [[499, "sklearn.datasets.get_data_home"]], "load_breast_cancer() (in module sklearn.datasets)": [[500, "sklearn.datasets.load_breast_cancer"]], "load_diabetes() (in module sklearn.datasets)": [[501, "sklearn.datasets.load_diabetes"]], "load_digits() (in module sklearn.datasets)": [[502, "sklearn.datasets.load_digits"]], "load_files() (in module sklearn.datasets)": [[503, "sklearn.datasets.load_files"]], "load_iris() (in module sklearn.datasets)": [[504, "sklearn.datasets.load_iris"]], "load_linnerud() (in module sklearn.datasets)": [[505, "sklearn.datasets.load_linnerud"]], "load_sample_image() (in module sklearn.datasets)": [[506, "sklearn.datasets.load_sample_image"]], "load_sample_images() (in module sklearn.datasets)": [[507, "sklearn.datasets.load_sample_images"]], "load_svmlight_file() (in module sklearn.datasets)": [[508, "sklearn.datasets.load_svmlight_file"]], "load_svmlight_files() (in module sklearn.datasets)": [[509, "sklearn.datasets.load_svmlight_files"]], "load_wine() (in module sklearn.datasets)": [[510, "sklearn.datasets.load_wine"]], "make_biclusters() (in module sklearn.datasets)": [[511, "sklearn.datasets.make_biclusters"]], "make_blobs() (in module sklearn.datasets)": [[512, "sklearn.datasets.make_blobs"]], "make_checkerboard() (in module sklearn.datasets)": [[513, "sklearn.datasets.make_checkerboard"]], "make_circles() (in module sklearn.datasets)": [[514, "sklearn.datasets.make_circles"]], "make_classification() (in module sklearn.datasets)": [[515, "sklearn.datasets.make_classification"]], "make_friedman1() (in module sklearn.datasets)": [[516, "sklearn.datasets.make_friedman1"]], "make_friedman2() (in module sklearn.datasets)": [[517, "sklearn.datasets.make_friedman2"]], "make_friedman3() (in module sklearn.datasets)": [[518, "sklearn.datasets.make_friedman3"]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[519, "sklearn.datasets.make_gaussian_quantiles"]], "make_hastie_10_2() (in module sklearn.datasets)": [[520, "sklearn.datasets.make_hastie_10_2"]], "make_low_rank_matrix() (in module sklearn.datasets)": [[521, "sklearn.datasets.make_low_rank_matrix"]], "make_moons() (in module sklearn.datasets)": [[522, "sklearn.datasets.make_moons"]], "make_multilabel_classification() (in module sklearn.datasets)": [[523, "sklearn.datasets.make_multilabel_classification"]], "make_regression() (in module sklearn.datasets)": [[524, "sklearn.datasets.make_regression"]], "make_s_curve() (in module sklearn.datasets)": [[525, "sklearn.datasets.make_s_curve"]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[526, "sklearn.datasets.make_sparse_coded_signal"]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[527, "sklearn.datasets.make_sparse_spd_matrix"]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[528, "sklearn.datasets.make_sparse_uncorrelated"]], "make_spd_matrix() (in module sklearn.datasets)": [[529, "sklearn.datasets.make_spd_matrix"]], "make_swiss_roll() (in module sklearn.datasets)": [[530, "sklearn.datasets.make_swiss_roll"]], "dictionarylearning (class in sklearn.decomposition)": [[531, "sklearn.decomposition.DictionaryLearning"]], "fit() (sklearn.decomposition.dictionarylearning method)": [[531, "sklearn.decomposition.DictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[531, "sklearn.decomposition.DictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[531, "sklearn.decomposition.DictionaryLearning.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[531, "sklearn.decomposition.DictionaryLearning.get_metadata_routing"]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[531, "sklearn.decomposition.DictionaryLearning.get_params"]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[531, "sklearn.decomposition.DictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[531, "sklearn.decomposition.DictionaryLearning.set_params"]], "transform() (sklearn.decomposition.dictionarylearning method)": [[531, "sklearn.decomposition.DictionaryLearning.transform"]], "factoranalysis (class in sklearn.decomposition)": [[532, "sklearn.decomposition.FactorAnalysis"]], "fit() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.fit"]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.fit_transform"]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.get_metadata_routing"]], "get_params() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.get_params"]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.get_precision"]], "score() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.score"]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.score_samples"]], "set_output() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.set_output"]], "set_params() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.set_params"]], "transform() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.transform"]], "fastica (class in sklearn.decomposition)": [[533, "sklearn.decomposition.FastICA"]], "fit() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.fit"]], "fit_transform() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.get_metadata_routing"]], "get_params() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.get_params"]], "inverse_transform() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.inverse_transform"]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.set_inverse_transform_request"]], "set_output() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.set_output"]], "set_params() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.set_params"]], "set_transform_request() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.set_transform_request"]], "transform() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.transform"]], "incrementalpca (class in sklearn.decomposition)": [[534, "sklearn.decomposition.IncrementalPCA"]], "fit() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.fit"]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.fit_transform"]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.get_params"]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.get_precision"]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.inverse_transform"]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.partial_fit"]], "set_output() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.set_output"]], "set_params() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.set_params"]], "set_partial_fit_request() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.set_partial_fit_request"]], "transform() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.transform"]], "kernelpca (class in sklearn.decomposition)": [[535, "sklearn.decomposition.KernelPCA"]], "fit() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.fit"]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.get_params"]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.inverse_transform"]], "set_output() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.set_output"]], "set_params() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.set_params"]], "transform() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.transform"]], "latentdirichletallocation (class in sklearn.decomposition)": [[536, "sklearn.decomposition.LatentDirichletAllocation"]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.fit"]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing"]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.get_params"]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.partial_fit"]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.perplexity"]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.score"]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.set_output"]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.set_params"]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.transform"]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning"]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params"]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit"]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params"]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.transform"]], "minibatchnmf (class in sklearn.decomposition)": [[538, "sklearn.decomposition.MiniBatchNMF"]], "fit() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.fit"]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.inverse_transform"]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.partial_fit"]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.set_output"]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.set_params"]], "set_partial_fit_request() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.set_partial_fit_request"]], "transform() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.transform"]], "minibatchsparsepca (class in sklearn.decomposition)": [[539, "sklearn.decomposition.MiniBatchSparsePCA"]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.fit"]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.set_output"]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.set_params"]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.transform"]], "nmf (class in sklearn.decomposition)": [[540, "sklearn.decomposition.NMF"]], "fit() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.fit"]], "fit_transform() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.get_metadata_routing"]], "get_params() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.get_params"]], "inverse_transform() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.inverse_transform"]], "set_output() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.set_output"]], "set_params() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.set_params"]], "transform() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.transform"]], "pca (class in sklearn.decomposition)": [[541, "sklearn.decomposition.PCA"]], "fit() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.fit"]], "fit_transform() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.fit_transform"]], "get_covariance() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.get_params"]], "get_precision() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.get_precision"]], "inverse_transform() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.inverse_transform"]], "score() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.score"]], "score_samples() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.score_samples"]], "set_output() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.set_output"]], "set_params() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.set_params"]], "transform() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.transform"]], "sparsecoder (class in sklearn.decomposition)": [[542, "sklearn.decomposition.SparseCoder"]], "fit() (sklearn.decomposition.sparsecoder method)": [[542, "sklearn.decomposition.SparseCoder.fit"]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[542, "sklearn.decomposition.SparseCoder.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[542, "sklearn.decomposition.SparseCoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[542, "sklearn.decomposition.SparseCoder.get_metadata_routing"]], "get_params() (sklearn.decomposition.sparsecoder method)": [[542, "sklearn.decomposition.SparseCoder.get_params"]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[542, "sklearn.decomposition.SparseCoder.n_components_"]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[542, "sklearn.decomposition.SparseCoder.n_features_in_"]], "set_output() (sklearn.decomposition.sparsecoder method)": [[542, "sklearn.decomposition.SparseCoder.set_output"]], "set_params() (sklearn.decomposition.sparsecoder method)": [[542, "sklearn.decomposition.SparseCoder.set_params"]], "transform() (sklearn.decomposition.sparsecoder method)": [[542, "sklearn.decomposition.SparseCoder.transform"]], "sparsepca (class in sklearn.decomposition)": [[543, "sklearn.decomposition.SparsePCA"]], "fit() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.fit"]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.set_output"]], "set_params() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.set_params"]], "transform() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.transform"]], "truncatedsvd (class in sklearn.decomposition)": [[544, "sklearn.decomposition.TruncatedSVD"]], "fit() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.fit"]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.get_metadata_routing"]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.get_params"]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.inverse_transform"]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.set_output"]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.set_params"]], "transform() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.transform"]], "dict_learning() (in module sklearn.decomposition)": [[545, "sklearn.decomposition.dict_learning"]], "dict_learning_online() (in module sklearn.decomposition)": [[546, "sklearn.decomposition.dict_learning_online"]], "non_negative_factorization() (in module sklearn.decomposition)": [[547, "sklearn.decomposition.non_negative_factorization"]], "sparse_encode() (in module sklearn.decomposition)": [[548, "sklearn.decomposition.sparse_encode"]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing"]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score"]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output"]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params"]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request"]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform"]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit"]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing"]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score"]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params"]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request"]], "dummyclassifier (class in sklearn.dummy)": [[551, "sklearn.dummy.DummyClassifier"]], "fit() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.fit"]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.get_metadata_routing"]], "get_params() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.get_params"]], "predict() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.predict"]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.predict_log_proba"]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.predict_proba"]], "score() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.score"]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.set_fit_request"]], "set_params() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.set_params"]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.set_score_request"]], "dummyregressor (class in sklearn.dummy)": [[552, "sklearn.dummy.DummyRegressor"]], "fit() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.fit"]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.get_metadata_routing"]], "get_params() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.get_params"]], "predict() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.predict"]], "score() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.score"]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.set_fit_request"]], "set_params() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.set_params"]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.set_predict_request"]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.set_score_request"]], "adaboostclassifier (class in sklearn.ensemble)": [[553, "sklearn.ensemble.AdaBoostClassifier"]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[553, "sklearn.ensemble.AdaBoostClassifier.feature_importances_"]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.get_params"]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.predict_proba"]], "score() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.score"]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.set_params"]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba"]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.staged_score"]], "adaboostregressor (class in sklearn.ensemble)": [[554, "sklearn.ensemble.AdaBoostRegressor"]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[554, "sklearn.ensemble.AdaBoostRegressor.feature_importances_"]], "fit() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.get_params"]], "predict() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.predict"]], "score() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.score"]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.set_params"]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.staged_predict"]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.staged_score"]], "baggingclassifier (class in sklearn.ensemble)": [[555, "sklearn.ensemble.BaggingClassifier"]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.decision_function"]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[555, "sklearn.ensemble.BaggingClassifier.estimators_samples_"]], "fit() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.get_params"]], "predict() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.predict_proba"]], "score() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.score"]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.set_score_request"]], "baggingregressor (class in sklearn.ensemble)": [[556, "sklearn.ensemble.BaggingRegressor"]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[556, "sklearn.ensemble.BaggingRegressor.estimators_samples_"]], "fit() (sklearn.ensemble.baggingregressor method)": [[556, "sklearn.ensemble.BaggingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[556, "sklearn.ensemble.BaggingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.baggingregressor method)": [[556, "sklearn.ensemble.BaggingRegressor.get_params"]], "predict() (sklearn.ensemble.baggingregressor method)": [[556, "sklearn.ensemble.BaggingRegressor.predict"]], "score() (sklearn.ensemble.baggingregressor method)": [[556, "sklearn.ensemble.BaggingRegressor.score"]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[556, "sklearn.ensemble.BaggingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.baggingregressor method)": [[556, "sklearn.ensemble.BaggingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[556, "sklearn.ensemble.BaggingRegressor.set_score_request"]], "extratreesclassifier (class in sklearn.ensemble)": [[557, "sklearn.ensemble.ExtraTreesClassifier"]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.apply"]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.decision_path"]], "estimators_samples_ (sklearn.ensemble.extratreesclassifier property)": [[557, "sklearn.ensemble.ExtraTreesClassifier.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[557, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_"]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.get_params"]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.predict_proba"]], "score() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.score"]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.set_params"]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.set_score_request"]], "extratreesregressor (class in sklearn.ensemble)": [[558, "sklearn.ensemble.ExtraTreesRegressor"]], "apply() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.apply"]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.decision_path"]], "estimators_samples_ (sklearn.ensemble.extratreesregressor property)": [[558, "sklearn.ensemble.ExtraTreesRegressor.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[558, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_"]], "fit() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.get_params"]], "predict() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.predict"]], "score() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.score"]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.set_params"]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.set_score_request"]], "gradientboostingclassifier (class in sklearn.ensemble)": [[559, "sklearn.ensemble.GradientBoostingClassifier"]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.apply"]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[559, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.get_params"]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.score"]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba"]], "gradientboostingregressor (class in sklearn.ensemble)": [[560, "sklearn.ensemble.GradientBoostingRegressor"]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.apply"]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[560, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.get_params"]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.score"]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.staged_predict"]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier"]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function"]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.predict"]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.score"]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba"]], "histgradientboostingregressor (class in sklearn.ensemble)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor"]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.score"]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict"]], "isolationforest (class in sklearn.ensemble)": [[563, "sklearn.ensemble.IsolationForest"]], "decision_function() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.decision_function"]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[563, "sklearn.ensemble.IsolationForest.estimators_samples_"]], "fit() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.fit"]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.fit_predict"]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.get_metadata_routing"]], "get_params() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.get_params"]], "predict() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.predict"]], "score_samples() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.score_samples"]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.set_fit_request"]], "set_params() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.set_params"]], "randomforestclassifier (class in sklearn.ensemble)": [[564, "sklearn.ensemble.RandomForestClassifier"]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.apply"]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.decision_path"]], "estimators_samples_ (sklearn.ensemble.randomforestclassifier property)": [[564, "sklearn.ensemble.RandomForestClassifier.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[564, "sklearn.ensemble.RandomForestClassifier.feature_importances_"]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.get_params"]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.predict_proba"]], "score() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.score"]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.set_params"]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.set_score_request"]], "randomforestregressor (class in sklearn.ensemble)": [[565, "sklearn.ensemble.RandomForestRegressor"]], "apply() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.apply"]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.decision_path"]], "estimators_samples_ (sklearn.ensemble.randomforestregressor property)": [[565, "sklearn.ensemble.RandomForestRegressor.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[565, "sklearn.ensemble.RandomForestRegressor.feature_importances_"]], "fit() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.get_params"]], "predict() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.predict"]], "score() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.score"]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.set_params"]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.set_score_request"]], "randomtreesembedding (class in sklearn.ensemble)": [[566, "sklearn.ensemble.RandomTreesEmbedding"]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.apply"]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.decision_path"]], "estimators_samples_ (sklearn.ensemble.randomtreesembedding property)": [[566, "sklearn.ensemble.RandomTreesEmbedding.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[566, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_"]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.fit"]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.get_params"]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request"]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.set_output"]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.set_params"]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.transform"]], "stackingclassifier (class in sklearn.ensemble)": [[567, "sklearn.ensemble.StackingClassifier"]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.decision_function"]], "fit() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.fit"]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[567, "sklearn.ensemble.StackingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[567, "sklearn.ensemble.StackingClassifier.named_estimators"]], "predict() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.predict"]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.predict_proba"]], "score() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.score"]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.set_fit_request"]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.set_output"]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.set_score_request"]], "transform() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.transform"]], "stackingregressor (class in sklearn.ensemble)": [[568, "sklearn.ensemble.StackingRegressor"]], "fit() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.fit"]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[568, "sklearn.ensemble.StackingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[568, "sklearn.ensemble.StackingRegressor.named_estimators"]], "predict() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.predict"]], "score() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.score"]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.set_fit_request"]], "set_output() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.set_output"]], "set_params() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.set_score_request"]], "transform() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.transform"]], "votingclassifier (class in sklearn.ensemble)": [[569, "sklearn.ensemble.VotingClassifier"]], "fit() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.fit"]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[569, "sklearn.ensemble.VotingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[569, "sklearn.ensemble.VotingClassifier.named_estimators"]], "predict() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.predict"]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.predict_proba"]], "score() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.score"]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.set_fit_request"]], "set_output() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.set_output"]], "set_params() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.set_score_request"]], "transform() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.transform"]], "votingregressor (class in sklearn.ensemble)": [[570, "sklearn.ensemble.VotingRegressor"]], "fit() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.fit"]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[570, "sklearn.ensemble.VotingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.votingregressor property)": [[570, "sklearn.ensemble.VotingRegressor.named_estimators"]], "predict() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.predict"]], "score() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.score"]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.set_fit_request"]], "set_output() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.set_output"]], "set_params() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.set_score_request"]], "transform() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.transform"]], "convergencewarning (class in sklearn.exceptions)": [[571, "sklearn.exceptions.ConvergenceWarning"]], "with_traceback() (sklearn.exceptions.convergencewarning method)": [[571, "sklearn.exceptions.ConvergenceWarning.with_traceback"]], "dataconversionwarning (class in sklearn.exceptions)": [[572, "sklearn.exceptions.DataConversionWarning"]], "with_traceback() (sklearn.exceptions.dataconversionwarning method)": [[572, "sklearn.exceptions.DataConversionWarning.with_traceback"]], "datadimensionalitywarning (class in sklearn.exceptions)": [[573, "sklearn.exceptions.DataDimensionalityWarning"]], "with_traceback() (sklearn.exceptions.datadimensionalitywarning method)": [[573, "sklearn.exceptions.DataDimensionalityWarning.with_traceback"]], "efficiencywarning (class in sklearn.exceptions)": [[574, "sklearn.exceptions.EfficiencyWarning"]], "with_traceback() (sklearn.exceptions.efficiencywarning method)": [[574, "sklearn.exceptions.EfficiencyWarning.with_traceback"]], "fitfailedwarning (class in sklearn.exceptions)": [[575, "sklearn.exceptions.FitFailedWarning"]], "with_traceback() (sklearn.exceptions.fitfailedwarning method)": [[575, "sklearn.exceptions.FitFailedWarning.with_traceback"]], "inconsistentversionwarning (class in sklearn.exceptions)": [[576, "sklearn.exceptions.InconsistentVersionWarning"]], "with_traceback() (sklearn.exceptions.inconsistentversionwarning method)": [[576, "sklearn.exceptions.InconsistentVersionWarning.with_traceback"]], "notfittederror (class in sklearn.exceptions)": [[577, "sklearn.exceptions.NotFittedError"]], "with_traceback() (sklearn.exceptions.notfittederror method)": [[577, "sklearn.exceptions.NotFittedError.with_traceback"]], "undefinedmetricwarning (class in sklearn.exceptions)": [[578, "sklearn.exceptions.UndefinedMetricWarning"]], "with_traceback() (sklearn.exceptions.undefinedmetricwarning method)": [[578, "sklearn.exceptions.UndefinedMetricWarning.with_traceback"]], "sklearn.experimental.enable_halving_search_cv": [[579, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[580, "module-sklearn.experimental.enable_iterative_imputer"]], "dictvectorizer (class in sklearn.feature_extraction)": [[581, "sklearn.feature_extraction.DictVectorizer"]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.get_params"]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.inverse_transform"]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.restrict"]], "set_inverse_transform_request() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.set_inverse_transform_request"]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.set_params"]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.transform"]], "featurehasher (class in sklearn.feature_extraction)": [[582, "sklearn.feature_extraction.FeatureHasher"]], "fit() (sklearn.feature_extraction.featurehasher method)": [[582, "sklearn.feature_extraction.FeatureHasher.fit"]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[582, "sklearn.feature_extraction.FeatureHasher.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[582, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[582, "sklearn.feature_extraction.FeatureHasher.get_params"]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[582, "sklearn.feature_extraction.FeatureHasher.set_output"]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[582, "sklearn.feature_extraction.FeatureHasher.set_params"]], "set_transform_request() (sklearn.feature_extraction.featurehasher method)": [[582, "sklearn.feature_extraction.FeatureHasher.set_transform_request"]], "transform() (sklearn.feature_extraction.featurehasher method)": [[582, "sklearn.feature_extraction.FeatureHasher.transform"]], "patchextractor (class in sklearn.feature_extraction.image)": [[583, "sklearn.feature_extraction.image.PatchExtractor"]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[583, "sklearn.feature_extraction.image.PatchExtractor.fit"]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[583, "sklearn.feature_extraction.image.PatchExtractor.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[583, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[583, "sklearn.feature_extraction.image.PatchExtractor.get_params"]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[583, "sklearn.feature_extraction.image.PatchExtractor.set_output"]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[583, "sklearn.feature_extraction.image.PatchExtractor.set_params"]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[583, "sklearn.feature_extraction.image.PatchExtractor.transform"]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[584, "sklearn.feature_extraction.image.extract_patches_2d"]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[585, "sklearn.feature_extraction.image.grid_to_graph"]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[586, "sklearn.feature_extraction.image.img_to_graph"]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[587, "sklearn.feature_extraction.image.reconstruct_from_patches_2d"]], "countvectorizer (class in sklearn.feature_extraction.text)": [[588, "sklearn.feature_extraction.text.CountVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words"]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform"]], "set_fit_request() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.set_fit_request"]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.transform"]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[589, "sklearn.feature_extraction.text.HashingVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words"]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit"]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.transform"]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[590, "sklearn.feature_extraction.text.TfidfTransformer"]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.get_params"]], "idf_ (sklearn.feature_extraction.text.tfidftransformer property)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.idf_"]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.set_output"]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.transform"]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words"]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.idf_"]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform"]], "set_fit_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.set_fit_request"]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.transform"]], "genericunivariateselect (class in sklearn.feature_selection)": [[592, "sklearn.feature_selection.GenericUnivariateSelect"]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.fit"]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing"]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.get_params"]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.get_support"]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform"]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.set_output"]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.set_params"]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.transform"]], "rfe (class in sklearn.feature_selection)": [[593, "sklearn.feature_selection.RFE"]], "classes_ (sklearn.feature_selection.rfe property)": [[593, "sklearn.feature_selection.RFE.classes_"]], "decision_function() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.decision_function"]], "fit() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.fit"]], "fit_transform() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.get_metadata_routing"]], "get_params() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.get_params"]], "get_support() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.get_support"]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.inverse_transform"]], "predict() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.predict"]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.predict_proba"]], "score() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.score"]], "set_output() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.set_output"]], "set_params() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.set_params"]], "transform() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.transform"]], "rfecv (class in sklearn.feature_selection)": [[594, "sklearn.feature_selection.RFECV"]], "classes_ (sklearn.feature_selection.rfecv property)": [[594, "sklearn.feature_selection.RFECV.classes_"]], "decision_function() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.decision_function"]], "fit() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.fit"]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.get_metadata_routing"]], "get_params() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.get_params"]], "get_support() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.get_support"]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.inverse_transform"]], "predict() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.predict"]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.predict_proba"]], "score() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.score"]], "set_fit_request() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.set_fit_request"]], "set_output() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.set_output"]], "set_params() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.set_params"]], "transform() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.transform"]], "selectfdr (class in sklearn.feature_selection)": [[595, "sklearn.feature_selection.SelectFdr"]], "fit() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.fit"]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.get_params"]], "get_support() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.set_output"]], "set_params() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.set_params"]], "transform() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.transform"]], "selectfpr (class in sklearn.feature_selection)": [[596, "sklearn.feature_selection.SelectFpr"]], "fit() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.fit"]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.get_params"]], "get_support() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.set_output"]], "set_params() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.set_params"]], "transform() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.transform"]], "selectfrommodel (class in sklearn.feature_selection)": [[597, "sklearn.feature_selection.SelectFromModel"]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.fit"]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.get_params"]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.inverse_transform"]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[597, "sklearn.feature_selection.SelectFromModel.n_features_in_"]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.partial_fit"]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.set_output"]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.set_params"]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[597, "sklearn.feature_selection.SelectFromModel.threshold_"]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.transform"]], "selectfwe (class in sklearn.feature_selection)": [[598, "sklearn.feature_selection.SelectFwe"]], "fit() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.fit"]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.get_params"]], "get_support() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.set_output"]], "set_params() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.set_params"]], "transform() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.transform"]], "selectkbest (class in sklearn.feature_selection)": [[599, "sklearn.feature_selection.SelectKBest"]], "fit() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.fit"]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.get_params"]], "get_support() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.get_support"]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.inverse_transform"]], "set_output() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.set_output"]], "set_params() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.set_params"]], "transform() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.transform"]], "selectpercentile (class in sklearn.feature_selection)": [[600, "sklearn.feature_selection.SelectPercentile"]], "fit() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.fit"]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.get_params"]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.get_support"]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.inverse_transform"]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.set_output"]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.set_params"]], "transform() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.transform"]], "selectormixin (class in sklearn.feature_selection)": [[601, "sklearn.feature_selection.SelectorMixin"]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[601, "sklearn.feature_selection.SelectorMixin.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[601, "sklearn.feature_selection.SelectorMixin.get_feature_names_out"]], "get_support() (sklearn.feature_selection.selectormixin method)": [[601, "sklearn.feature_selection.SelectorMixin.get_support"]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[601, "sklearn.feature_selection.SelectorMixin.inverse_transform"]], "set_output() (sklearn.feature_selection.selectormixin method)": [[601, "sklearn.feature_selection.SelectorMixin.set_output"]], "transform() (sklearn.feature_selection.selectormixin method)": [[601, "sklearn.feature_selection.SelectorMixin.transform"]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[602, "sklearn.feature_selection.SequentialFeatureSelector"]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.fit"]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing"]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.get_params"]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.get_support"]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform"]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.set_output"]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.set_params"]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.transform"]], "variancethreshold (class in sklearn.feature_selection)": [[603, "sklearn.feature_selection.VarianceThreshold"]], "fit() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.fit"]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing"]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.get_params"]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.get_support"]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.inverse_transform"]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.set_output"]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.set_params"]], "transform() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.transform"]], "chi2() (in module sklearn.feature_selection)": [[604, "sklearn.feature_selection.chi2"]], "f_classif() (in module sklearn.feature_selection)": [[605, "sklearn.feature_selection.f_classif"]], "f_regression() (in module sklearn.feature_selection)": [[606, "sklearn.feature_selection.f_regression"]], "mutual_info_classif() (in module sklearn.feature_selection)": [[607, "sklearn.feature_selection.mutual_info_classif"]], "mutual_info_regression() (in module sklearn.feature_selection)": [[608, "sklearn.feature_selection.mutual_info_regression"]], "r_regression() (in module sklearn.feature_selection)": [[609, "sklearn.feature_selection.r_regression"]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier"]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.fit"]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing"]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.get_params"]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.predict"]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba"]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.set_params"]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request"]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor"]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.fit"]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing"]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.get_params"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.predict"]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y"]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.set_params"]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request"]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request"]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel"]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.theta"]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel"]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.theta"]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[614, "sklearn.gaussian_process.kernels.DotProduct"]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[614, "sklearn.gaussian_process.kernels.DotProduct.__call__"]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[614, "sklearn.gaussian_process.kernels.DotProduct.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[614, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[614, "sklearn.gaussian_process.kernels.DotProduct.diag"]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[614, "sklearn.gaussian_process.kernels.DotProduct.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[614, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[614, "sklearn.gaussian_process.kernels.DotProduct.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[614, "sklearn.gaussian_process.kernels.DotProduct.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[614, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[614, "sklearn.gaussian_process.kernels.DotProduct.set_params"]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[614, "sklearn.gaussian_process.kernels.DotProduct.theta"]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared"]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__"]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.diag"]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params"]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale"]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params"]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.theta"]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[616, "sklearn.gaussian_process.kernels.Exponentiation"]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.__call__"]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.diag"]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.set_params"]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.theta"]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter"]], "__call__() (sklearn.gaussian_process.kernels.hyperparameter method)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.__call__"]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.bounds"]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.count"]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.fixed"]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.index"]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements"]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.name"]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.value_type"]], "kernel (class in sklearn.gaussian_process.kernels)": [[618, "sklearn.gaussian_process.kernels.Kernel"]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[618, "sklearn.gaussian_process.kernels.Kernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[618, "sklearn.gaussian_process.kernels.Kernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[618, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[618, "sklearn.gaussian_process.kernels.Kernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[618, "sklearn.gaussian_process.kernels.Kernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[618, "sklearn.gaussian_process.kernels.Kernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[618, "sklearn.gaussian_process.kernels.Kernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[618, "sklearn.gaussian_process.kernels.Kernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[618, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[618, "sklearn.gaussian_process.kernels.Kernel.set_params"]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[618, "sklearn.gaussian_process.kernels.Kernel.theta"]], "matern (class in sklearn.gaussian_process.kernels)": [[619, "sklearn.gaussian_process.kernels.Matern"]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[619, "sklearn.gaussian_process.kernels.Matern.__call__"]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[619, "sklearn.gaussian_process.kernels.Matern.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[619, "sklearn.gaussian_process.kernels.Matern.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[619, "sklearn.gaussian_process.kernels.Matern.diag"]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[619, "sklearn.gaussian_process.kernels.Matern.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[619, "sklearn.gaussian_process.kernels.Matern.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[619, "sklearn.gaussian_process.kernels.Matern.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[619, "sklearn.gaussian_process.kernels.Matern.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[619, "sklearn.gaussian_process.kernels.Matern.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[619, "sklearn.gaussian_process.kernels.Matern.set_params"]], "theta (sklearn.gaussian_process.kernels.matern property)": [[619, "sklearn.gaussian_process.kernels.Matern.theta"]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel"]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.theta"]], "product (class in sklearn.gaussian_process.kernels)": [[621, "sklearn.gaussian_process.kernels.Product"]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[621, "sklearn.gaussian_process.kernels.Product.__call__"]], "bounds (sklearn.gaussian_process.kernels.product property)": [[621, "sklearn.gaussian_process.kernels.Product.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[621, "sklearn.gaussian_process.kernels.Product.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.product method)": [[621, "sklearn.gaussian_process.kernels.Product.diag"]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[621, "sklearn.gaussian_process.kernels.Product.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[621, "sklearn.gaussian_process.kernels.Product.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[621, "sklearn.gaussian_process.kernels.Product.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[621, "sklearn.gaussian_process.kernels.Product.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[621, "sklearn.gaussian_process.kernels.Product.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[621, "sklearn.gaussian_process.kernels.Product.set_params"]], "theta (sklearn.gaussian_process.kernels.product property)": [[621, "sklearn.gaussian_process.kernels.Product.theta"]], "rbf (class in sklearn.gaussian_process.kernels)": [[622, "sklearn.gaussian_process.kernels.RBF"]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[622, "sklearn.gaussian_process.kernels.RBF.__call__"]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[622, "sklearn.gaussian_process.kernels.RBF.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[622, "sklearn.gaussian_process.kernels.RBF.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[622, "sklearn.gaussian_process.kernels.RBF.diag"]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[622, "sklearn.gaussian_process.kernels.RBF.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[622, "sklearn.gaussian_process.kernels.RBF.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[622, "sklearn.gaussian_process.kernels.RBF.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[622, "sklearn.gaussian_process.kernels.RBF.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[622, "sklearn.gaussian_process.kernels.RBF.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[622, "sklearn.gaussian_process.kernels.RBF.set_params"]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[622, "sklearn.gaussian_process.kernels.RBF.theta"]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic"]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__"]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.diag"]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params"]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.theta"]], "sum (class in sklearn.gaussian_process.kernels)": [[624, "sklearn.gaussian_process.kernels.Sum"]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[624, "sklearn.gaussian_process.kernels.Sum.__call__"]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[624, "sklearn.gaussian_process.kernels.Sum.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[624, "sklearn.gaussian_process.kernels.Sum.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[624, "sklearn.gaussian_process.kernels.Sum.diag"]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[624, "sklearn.gaussian_process.kernels.Sum.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[624, "sklearn.gaussian_process.kernels.Sum.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[624, "sklearn.gaussian_process.kernels.Sum.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[624, "sklearn.gaussian_process.kernels.Sum.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[624, "sklearn.gaussian_process.kernels.Sum.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[624, "sklearn.gaussian_process.kernels.Sum.set_params"]], "theta (sklearn.gaussian_process.kernels.sum property)": [[624, "sklearn.gaussian_process.kernels.Sum.theta"]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel"]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.theta"]], "get_config() (in module sklearn)": [[626, "sklearn.get_config"]], "iterativeimputer (class in sklearn.impute)": [[627, "sklearn.impute.IterativeImputer"]], "fit() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.fit"]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.get_metadata_routing"]], "get_params() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.get_params"]], "set_output() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.set_output"]], "set_params() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.set_params"]], "transform() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.transform"]], "knnimputer (class in sklearn.impute)": [[628, "sklearn.impute.KNNImputer"]], "fit() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.fit"]], "fit_transform() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.get_metadata_routing"]], "get_params() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.get_params"]], "set_output() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.set_output"]], "set_params() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.set_params"]], "transform() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.transform"]], "missingindicator (class in sklearn.impute)": [[629, "sklearn.impute.MissingIndicator"]], "fit() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.fit"]], "fit_transform() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.fit_transform"]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.get_metadata_routing"]], "get_params() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.get_params"]], "set_output() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.set_output"]], "set_params() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.set_params"]], "transform() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.transform"]], "simpleimputer (class in sklearn.impute)": [[630, "sklearn.impute.SimpleImputer"]], "fit() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.fit"]], "fit_transform() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.get_metadata_routing"]], "get_params() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.get_params"]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.inverse_transform"]], "set_output() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.set_output"]], "set_params() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.set_params"]], "transform() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.transform"]], "decisionboundarydisplay (class in sklearn.inspection)": [[631, "sklearn.inspection.DecisionBoundaryDisplay"]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[631, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator"]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[631, "sklearn.inspection.DecisionBoundaryDisplay.plot"]], "partialdependencedisplay (class in sklearn.inspection)": [[632, "sklearn.inspection.PartialDependenceDisplay"]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[632, "sklearn.inspection.PartialDependenceDisplay.from_estimator"]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[632, "sklearn.inspection.PartialDependenceDisplay.plot"]], "partial_dependence() (in module sklearn.inspection)": [[633, "sklearn.inspection.partial_dependence"]], "permutation_importance() (in module sklearn.inspection)": [[634, "sklearn.inspection.permutation_importance"]], "isotonicregression (class in sklearn.isotonic)": [[635, "sklearn.isotonic.IsotonicRegression"]], "fit() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.fit"]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.fit_transform"]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.get_feature_names_out"]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.get_metadata_routing"]], "get_params() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.get_params"]], "predict() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.predict"]], "score() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.score"]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.set_fit_request"]], "set_output() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.set_output"]], "set_params() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.set_params"]], "set_predict_request() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.set_predict_request"]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.set_score_request"]], "set_transform_request() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.set_transform_request"]], "transform() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.transform"]], "check_increasing() (in module sklearn.isotonic)": [[636, "sklearn.isotonic.check_increasing"]], "isotonic_regression() (in module sklearn.isotonic)": [[637, "sklearn.isotonic.isotonic_regression"]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler"]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform"]], "nystroem (class in sklearn.kernel_approximation)": [[639, "sklearn.kernel_approximation.Nystroem"]], "fit() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.fit"]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.get_params"]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.set_output"]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.set_params"]], "transform() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.transform"]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch"]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.fit"]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.get_params"]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.set_output"]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.set_params"]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.transform"]], "rbfsampler (class in sklearn.kernel_approximation)": [[641, "sklearn.kernel_approximation.RBFSampler"]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.fit"]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.get_params"]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.set_output"]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.set_params"]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.transform"]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler"]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.transform"]], "kernelridge (class in sklearn.kernel_ridge)": [[643, "sklearn.kernel_ridge.KernelRidge"]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.fit"]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing"]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.get_params"]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.predict"]], "score() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.score"]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.set_fit_request"]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.set_params"]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.set_score_request"]], "ardregression (class in sklearn.linear_model)": [[644, "sklearn.linear_model.ARDRegression"]], "fit() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.get_params"]], "predict() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.predict"]], "score() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.score"]], "set_params() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.set_params"]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.set_predict_request"]], "set_score_request() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.set_score_request"]], "bayesianridge (class in sklearn.linear_model)": [[645, "sklearn.linear_model.BayesianRidge"]], "fit() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.fit"]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.get_metadata_routing"]], "get_params() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.get_params"]], "predict() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.predict"]], "score() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.score"]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.set_fit_request"]], "set_params() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.set_params"]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.set_predict_request"]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.set_score_request"]], "elasticnet (class in sklearn.linear_model)": [[646, "sklearn.linear_model.ElasticNet"]], "fit() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.fit"]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.get_metadata_routing"]], "get_params() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.get_params"]], "path() (sklearn.linear_model.elasticnet static method)": [[646, "sklearn.linear_model.ElasticNet.path"]], "predict() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.predict"]], "score() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.score"]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.set_fit_request"]], "set_params() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.set_params"]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.set_score_request"]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[646, "sklearn.linear_model.ElasticNet.sparse_coef_"]], "elasticnetcv (class in sklearn.linear_model)": [[647, "sklearn.linear_model.ElasticNetCV"]], "fit() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.fit"]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.get_params"]], "path() (sklearn.linear_model.elasticnetcv static method)": [[647, "sklearn.linear_model.ElasticNetCV.path"]], "predict() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.predict"]], "score() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.score"]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.set_fit_request"]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.set_params"]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.set_score_request"]], "gammaregressor (class in sklearn.linear_model)": [[648, "sklearn.linear_model.GammaRegressor"]], "fit() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.get_params"]], "predict() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.predict"]], "score() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.score"]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.set_params"]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.set_score_request"]], "huberregressor (class in sklearn.linear_model)": [[649, "sklearn.linear_model.HuberRegressor"]], "fit() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.get_params"]], "predict() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.predict"]], "score() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.score"]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.set_params"]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.set_score_request"]], "lars (class in sklearn.linear_model)": [[650, "sklearn.linear_model.Lars"]], "fit() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.fit"]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.get_metadata_routing"]], "get_params() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.get_params"]], "predict() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.predict"]], "score() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.score"]], "set_fit_request() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.set_fit_request"]], "set_params() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.set_params"]], "set_score_request() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.set_score_request"]], "larscv (class in sklearn.linear_model)": [[651, "sklearn.linear_model.LarsCV"]], "fit() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.fit"]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.get_params"]], "predict() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.predict"]], "score() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.score"]], "set_fit_request() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.set_fit_request"]], "set_params() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.set_params"]], "set_score_request() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.set_score_request"]], "lasso (class in sklearn.linear_model)": [[652, "sklearn.linear_model.Lasso"]], "fit() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.fit"]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.get_metadata_routing"]], "get_params() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.get_params"]], "path() (sklearn.linear_model.lasso static method)": [[652, "sklearn.linear_model.Lasso.path"]], "predict() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.predict"]], "score() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.score"]], "set_fit_request() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.set_fit_request"]], "set_params() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.set_params"]], "set_score_request() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.set_score_request"]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[652, "sklearn.linear_model.Lasso.sparse_coef_"]], "lassocv (class in sklearn.linear_model)": [[653, "sklearn.linear_model.LassoCV"]], "fit() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.fit"]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.get_params"]], "path() (sklearn.linear_model.lassocv static method)": [[653, "sklearn.linear_model.LassoCV.path"]], "predict() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.predict"]], "score() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.score"]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.set_fit_request"]], "set_params() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.set_params"]], "set_score_request() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.set_score_request"]], "lassolars (class in sklearn.linear_model)": [[654, "sklearn.linear_model.LassoLars"]], "fit() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.get_params"]], "predict() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.predict"]], "score() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.score"]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.set_fit_request"]], "set_params() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.set_params"]], "set_score_request() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.set_score_request"]], "lassolarscv (class in sklearn.linear_model)": [[655, "sklearn.linear_model.LassoLarsCV"]], "fit() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.get_params"]], "predict() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.predict"]], "score() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.score"]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.set_fit_request"]], "set_params() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.set_params"]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.set_score_request"]], "lassolarsic (class in sklearn.linear_model)": [[656, "sklearn.linear_model.LassoLarsIC"]], "fit() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.get_params"]], "predict() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.predict"]], "score() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.score"]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.set_fit_request"]], "set_params() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.set_params"]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.set_score_request"]], "linearregression (class in sklearn.linear_model)": [[657, "sklearn.linear_model.LinearRegression"]], "fit() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.get_params"]], "predict() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.predict"]], "score() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.score"]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.set_fit_request"]], "set_params() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.set_params"]], "set_score_request() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.set_score_request"]], "logisticregression (class in sklearn.linear_model)": [[658, "sklearn.linear_model.LogisticRegression"]], "decision_function() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.decision_function"]], "densify() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.densify"]], "fit() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.get_params"]], "predict() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.predict_proba"]], "score() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.score"]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.set_fit_request"]], "set_params() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.set_params"]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.set_score_request"]], "sparsify() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.sparsify"]], "logisticregressioncv (class in sklearn.linear_model)": [[659, "sklearn.linear_model.LogisticRegressionCV"]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.decision_function"]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.densify"]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.fit"]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.get_params"]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.predict_proba"]], "score() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.score"]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.set_fit_request"]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.set_params"]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.set_score_request"]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.sparsify"]], "multitaskelasticnet (class in sklearn.linear_model)": [[660, "sklearn.linear_model.MultiTaskElasticNet"]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.fit"]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.get_params"]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.path"]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.predict"]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.score"]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request"]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.set_params"]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.set_score_request"]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[660, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_"]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV"]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.fit"]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.get_params"]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.path"]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.predict"]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.score"]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request"]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.set_params"]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request"]], "multitasklasso (class in sklearn.linear_model)": [[662, "sklearn.linear_model.MultiTaskLasso"]], "fit() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.fit"]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.get_params"]], "path() (sklearn.linear_model.multitasklasso static method)": [[662, "sklearn.linear_model.MultiTaskLasso.path"]], "predict() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.predict"]], "score() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.score"]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.set_fit_request"]], "set_params() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.set_params"]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.set_score_request"]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[662, "sklearn.linear_model.MultiTaskLasso.sparse_coef_"]], "multitasklassocv (class in sklearn.linear_model)": [[663, "sklearn.linear_model.MultiTaskLassoCV"]], "fit() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.fit"]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.get_params"]], "path() (sklearn.linear_model.multitasklassocv static method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.path"]], "predict() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.predict"]], "score() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.score"]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request"]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.set_params"]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.set_score_request"]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.fit"]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params"]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request"]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit"]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params"]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request"]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier"]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function"]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.densify"]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.predict"]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.score"]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.set_params"]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request"]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify"]], "passiveaggressiveregressor (class in sklearn.linear_model)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor"]], "densify() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.densify"]], "fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.predict"]], "score() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.score"]], "set_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.set_params"]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.set_score_request"]], "sparsify() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.sparsify"]], "perceptron (class in sklearn.linear_model)": [[668, "sklearn.linear_model.Perceptron"]], "decision_function() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.decision_function"]], "densify() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.densify"]], "fit() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.fit"]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.get_metadata_routing"]], "get_params() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.get_params"]], "partial_fit() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.partial_fit"]], "predict() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.predict"]], "score() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.score"]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.set_fit_request"]], "set_params() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.set_params"]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.set_score_request"]], "sparsify() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.sparsify"]], "poissonregressor (class in sklearn.linear_model)": [[669, "sklearn.linear_model.PoissonRegressor"]], "fit() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.get_params"]], "predict() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.predict"]], "score() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.score"]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.set_params"]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.set_score_request"]], "quantileregressor (class in sklearn.linear_model)": [[670, "sklearn.linear_model.QuantileRegressor"]], "fit() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.get_params"]], "predict() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.predict"]], "score() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.score"]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.set_params"]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.set_score_request"]], "ransacregressor (class in sklearn.linear_model)": [[671, "sklearn.linear_model.RANSACRegressor"]], "fit() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.get_params"]], "predict() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.predict"]], "score() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.score"]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.set_params"]], "ridge (class in sklearn.linear_model)": [[672, "sklearn.linear_model.Ridge"]], "fit() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.fit"]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.get_params"]], "predict() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.predict"]], "score() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.score"]], "set_fit_request() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.set_fit_request"]], "set_params() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.set_params"]], "set_score_request() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.set_score_request"]], "ridgecv (class in sklearn.linear_model)": [[673, "sklearn.linear_model.RidgeCV"]], "fit() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.get_params"]], "predict() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.predict"]], "score() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.score"]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.set_fit_request"]], "set_params() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.set_params"]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.set_score_request"]], "ridgeclassifier (class in sklearn.linear_model)": [[674, "sklearn.linear_model.RidgeClassifier"]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[674, "sklearn.linear_model.RidgeClassifier.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.get_params"]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.predict"]], "score() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.score"]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.set_params"]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.set_score_request"]], "ridgeclassifiercv (class in sklearn.linear_model)": [[675, "sklearn.linear_model.RidgeClassifierCV"]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[675, "sklearn.linear_model.RidgeClassifierCV.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.get_params"]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.predict"]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.score"]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.set_fit_request"]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.set_params"]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.set_score_request"]], "sgdclassifier (class in sklearn.linear_model)": [[676, "sklearn.linear_model.SGDClassifier"]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.decision_function"]], "densify() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.densify"]], "fit() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.get_params"]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.partial_fit"]], "predict() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.predict"]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.predict_log_proba"]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.predict_proba"]], "score() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.score"]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.set_score_request"]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.sparsify"]], "sgdoneclasssvm (class in sklearn.linear_model)": [[677, "sklearn.linear_model.SGDOneClassSVM"]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.decision_function"]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.densify"]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.fit"]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.fit_predict"]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.get_params"]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.partial_fit"]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.predict"]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.score_samples"]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.set_fit_request"]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request"]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.sparsify"]], "sgdregressor (class in sklearn.linear_model)": [[678, "sklearn.linear_model.SGDRegressor"]], "densify() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.densify"]], "fit() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.get_params"]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.partial_fit"]], "predict() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.predict"]], "score() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.score"]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.set_score_request"]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.sparsify"]], "theilsenregressor (class in sklearn.linear_model)": [[679, "sklearn.linear_model.TheilSenRegressor"]], "fit() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.get_params"]], "predict() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.predict"]], "score() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.score"]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.set_params"]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.set_score_request"]], "tweedieregressor (class in sklearn.linear_model)": [[680, "sklearn.linear_model.TweedieRegressor"]], "fit() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.get_params"]], "predict() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.predict"]], "score() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.score"]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.set_params"]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.set_score_request"]], "enet_path() (in module sklearn.linear_model)": [[681, "sklearn.linear_model.enet_path"]], "lars_path() (in module sklearn.linear_model)": [[682, "sklearn.linear_model.lars_path"]], "lars_path_gram() (in module sklearn.linear_model)": [[683, "sklearn.linear_model.lars_path_gram"]], "lasso_path() (in module sklearn.linear_model)": [[684, "sklearn.linear_model.lasso_path"]], "orthogonal_mp() (in module sklearn.linear_model)": [[685, "sklearn.linear_model.orthogonal_mp"]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[686, "sklearn.linear_model.orthogonal_mp_gram"]], "ridge_regression() (in module sklearn.linear_model)": [[687, "sklearn.linear_model.ridge_regression"]], "isomap (class in sklearn.manifold)": [[688, "sklearn.manifold.Isomap"]], "fit() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.fit"]], "fit_transform() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.fit_transform"]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.get_metadata_routing"]], "get_params() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.get_params"]], "reconstruction_error() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.reconstruction_error"]], "set_output() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.set_output"]], "set_params() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.set_params"]], "transform() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.transform"]], "locallylinearembedding (class in sklearn.manifold)": [[689, "sklearn.manifold.LocallyLinearEmbedding"]], "fit() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.fit"]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing"]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.get_params"]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.set_output"]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.set_params"]], "transform() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.transform"]], "mds (class in sklearn.manifold)": [[690, "sklearn.manifold.MDS"]], "fit() (sklearn.manifold.mds method)": [[690, "sklearn.manifold.MDS.fit"]], "fit_transform() (sklearn.manifold.mds method)": [[690, "sklearn.manifold.MDS.fit_transform"]], "get_metadata_routing() (sklearn.manifold.mds method)": [[690, "sklearn.manifold.MDS.get_metadata_routing"]], "get_params() (sklearn.manifold.mds method)": [[690, "sklearn.manifold.MDS.get_params"]], "set_fit_request() (sklearn.manifold.mds method)": [[690, "sklearn.manifold.MDS.set_fit_request"]], "set_params() (sklearn.manifold.mds method)": [[690, "sklearn.manifold.MDS.set_params"]], "spectralembedding (class in sklearn.manifold)": [[691, "sklearn.manifold.SpectralEmbedding"]], "fit() (sklearn.manifold.spectralembedding method)": [[691, "sklearn.manifold.SpectralEmbedding.fit"]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[691, "sklearn.manifold.SpectralEmbedding.fit_transform"]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[691, "sklearn.manifold.SpectralEmbedding.get_metadata_routing"]], "get_params() (sklearn.manifold.spectralembedding method)": [[691, "sklearn.manifold.SpectralEmbedding.get_params"]], "set_params() (sklearn.manifold.spectralembedding method)": [[691, "sklearn.manifold.SpectralEmbedding.set_params"]], "tsne (class in sklearn.manifold)": [[692, "sklearn.manifold.TSNE"]], "fit() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.fit"]], "fit_transform() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.fit_transform"]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.get_metadata_routing"]], "get_params() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.get_params"]], "set_output() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.set_output"]], "set_params() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.set_params"]], "locally_linear_embedding() (in module sklearn.manifold)": [[693, "sklearn.manifold.locally_linear_embedding"]], "smacof() (in module sklearn.manifold)": [[694, "sklearn.manifold.smacof"]], "spectral_embedding() (in module sklearn.manifold)": [[695, "sklearn.manifold.spectral_embedding"]], "trustworthiness() (in module sklearn.manifold)": [[696, "sklearn.manifold.trustworthiness"]], "confusionmatrixdisplay (class in sklearn.metrics)": [[697, "sklearn.metrics.ConfusionMatrixDisplay"]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[697, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[697, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions"]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[697, "sklearn.metrics.ConfusionMatrixDisplay.plot"]], "detcurvedisplay (class in sklearn.metrics)": [[698, "sklearn.metrics.DetCurveDisplay"]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[698, "sklearn.metrics.DetCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[698, "sklearn.metrics.DetCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.detcurvedisplay method)": [[698, "sklearn.metrics.DetCurveDisplay.plot"]], "distancemetric (class in sklearn.metrics)": [[699, "sklearn.metrics.DistanceMetric"]], "get_metric() (sklearn.metrics.distancemetric class method)": [[699, "sklearn.metrics.DistanceMetric.get_metric"]], "precisionrecalldisplay (class in sklearn.metrics)": [[700, "sklearn.metrics.PrecisionRecallDisplay"]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[700, "sklearn.metrics.PrecisionRecallDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[700, "sklearn.metrics.PrecisionRecallDisplay.from_predictions"]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[700, "sklearn.metrics.PrecisionRecallDisplay.plot"]], "predictionerrordisplay (class in sklearn.metrics)": [[701, "sklearn.metrics.PredictionErrorDisplay"]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[701, "sklearn.metrics.PredictionErrorDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[701, "sklearn.metrics.PredictionErrorDisplay.from_predictions"]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[701, "sklearn.metrics.PredictionErrorDisplay.plot"]], "roccurvedisplay (class in sklearn.metrics)": [[702, "sklearn.metrics.RocCurveDisplay"]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[702, "sklearn.metrics.RocCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[702, "sklearn.metrics.RocCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.roccurvedisplay method)": [[702, "sklearn.metrics.RocCurveDisplay.plot"]], "accuracy_score() (in module sklearn.metrics)": [[703, "sklearn.metrics.accuracy_score"]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[704, "sklearn.metrics.adjusted_mutual_info_score"]], "adjusted_rand_score() (in module sklearn.metrics)": [[705, "sklearn.metrics.adjusted_rand_score"]], "auc() (in module sklearn.metrics)": [[706, "sklearn.metrics.auc"]], "average_precision_score() (in module sklearn.metrics)": [[707, "sklearn.metrics.average_precision_score"]], "balanced_accuracy_score() (in module sklearn.metrics)": [[708, "sklearn.metrics.balanced_accuracy_score"]], "brier_score_loss() (in module sklearn.metrics)": [[709, "sklearn.metrics.brier_score_loss"]], "calinski_harabasz_score() (in module sklearn.metrics)": [[710, "sklearn.metrics.calinski_harabasz_score"]], "check_scoring() (in module sklearn.metrics)": [[711, "sklearn.metrics.check_scoring"]], "class_likelihood_ratios() (in module sklearn.metrics)": [[712, "sklearn.metrics.class_likelihood_ratios"]], "classification_report() (in module sklearn.metrics)": [[713, "sklearn.metrics.classification_report"]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[714, "sklearn.metrics.cluster.contingency_matrix"]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[715, "sklearn.metrics.cluster.pair_confusion_matrix"]], "cohen_kappa_score() (in module sklearn.metrics)": [[716, "sklearn.metrics.cohen_kappa_score"]], "completeness_score() (in module sklearn.metrics)": [[717, "sklearn.metrics.completeness_score"]], "confusion_matrix() (in module sklearn.metrics)": [[718, "sklearn.metrics.confusion_matrix"]], "consensus_score() (in module sklearn.metrics)": [[719, "sklearn.metrics.consensus_score"]], "coverage_error() (in module sklearn.metrics)": [[720, "sklearn.metrics.coverage_error"]], "d2_absolute_error_score() (in module sklearn.metrics)": [[721, "sklearn.metrics.d2_absolute_error_score"]], "d2_pinball_score() (in module sklearn.metrics)": [[722, "sklearn.metrics.d2_pinball_score"]], "d2_tweedie_score() (in module sklearn.metrics)": [[723, "sklearn.metrics.d2_tweedie_score"]], "davies_bouldin_score() (in module sklearn.metrics)": [[724, "sklearn.metrics.davies_bouldin_score"]], "dcg_score() (in module sklearn.metrics)": [[725, "sklearn.metrics.dcg_score"]], "det_curve() (in module sklearn.metrics)": [[726, "sklearn.metrics.det_curve"]], "explained_variance_score() (in module sklearn.metrics)": [[727, "sklearn.metrics.explained_variance_score"]], "f1_score() (in module sklearn.metrics)": [[728, "sklearn.metrics.f1_score"]], "fbeta_score() (in module sklearn.metrics)": [[729, "sklearn.metrics.fbeta_score"]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[730, "sklearn.metrics.fowlkes_mallows_score"]], "get_scorer() (in module sklearn.metrics)": [[731, "sklearn.metrics.get_scorer"]], "get_scorer_names() (in module sklearn.metrics)": [[732, "sklearn.metrics.get_scorer_names"]], "hamming_loss() (in module sklearn.metrics)": [[733, "sklearn.metrics.hamming_loss"]], "hinge_loss() (in module sklearn.metrics)": [[734, "sklearn.metrics.hinge_loss"]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[735, "sklearn.metrics.homogeneity_completeness_v_measure"]], "homogeneity_score() (in module sklearn.metrics)": [[736, "sklearn.metrics.homogeneity_score"]], "jaccard_score() (in module sklearn.metrics)": [[737, "sklearn.metrics.jaccard_score"]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[738, "sklearn.metrics.label_ranking_average_precision_score"]], "label_ranking_loss() (in module sklearn.metrics)": [[739, "sklearn.metrics.label_ranking_loss"]], "log_loss() (in module sklearn.metrics)": [[740, "sklearn.metrics.log_loss"]], "make_scorer() (in module sklearn.metrics)": [[741, "sklearn.metrics.make_scorer"]], "matthews_corrcoef() (in module sklearn.metrics)": [[742, "sklearn.metrics.matthews_corrcoef"]], "max_error() (in module sklearn.metrics)": [[743, "sklearn.metrics.max_error"]], "mean_absolute_error() (in module sklearn.metrics)": [[744, "sklearn.metrics.mean_absolute_error"]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[745, "sklearn.metrics.mean_absolute_percentage_error"]], "mean_gamma_deviance() (in module sklearn.metrics)": [[746, "sklearn.metrics.mean_gamma_deviance"]], "mean_pinball_loss() (in module sklearn.metrics)": [[747, "sklearn.metrics.mean_pinball_loss"]], "mean_poisson_deviance() (in module sklearn.metrics)": [[748, "sklearn.metrics.mean_poisson_deviance"]], "mean_squared_error() (in module sklearn.metrics)": [[749, "sklearn.metrics.mean_squared_error"]], "mean_squared_log_error() (in module sklearn.metrics)": [[750, "sklearn.metrics.mean_squared_log_error"]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[751, "sklearn.metrics.mean_tweedie_deviance"]], "median_absolute_error() (in module sklearn.metrics)": [[752, "sklearn.metrics.median_absolute_error"]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[753, "sklearn.metrics.multilabel_confusion_matrix"]], "mutual_info_score() (in module sklearn.metrics)": [[754, "sklearn.metrics.mutual_info_score"]], "ndcg_score() (in module sklearn.metrics)": [[755, "sklearn.metrics.ndcg_score"]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[756, "sklearn.metrics.normalized_mutual_info_score"]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[757, "sklearn.metrics.pairwise.additive_chi2_kernel"]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[758, "sklearn.metrics.pairwise.chi2_kernel"]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[759, "sklearn.metrics.pairwise.cosine_distances"]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[760, "sklearn.metrics.pairwise.cosine_similarity"]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[761, "sklearn.metrics.pairwise.distance_metrics"]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[762, "sklearn.metrics.pairwise.euclidean_distances"]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[763, "sklearn.metrics.pairwise.haversine_distances"]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[764, "sklearn.metrics.pairwise.kernel_metrics"]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[765, "sklearn.metrics.pairwise.laplacian_kernel"]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[766, "sklearn.metrics.pairwise.linear_kernel"]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[767, "sklearn.metrics.pairwise.manhattan_distances"]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[768, "sklearn.metrics.pairwise.nan_euclidean_distances"]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[769, "sklearn.metrics.pairwise.paired_cosine_distances"]], "paired_distances() (in module sklearn.metrics.pairwise)": [[770, "sklearn.metrics.pairwise.paired_distances"]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[771, "sklearn.metrics.pairwise.paired_euclidean_distances"]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[772, "sklearn.metrics.pairwise.paired_manhattan_distances"]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[773, "sklearn.metrics.pairwise.pairwise_kernels"]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[774, "sklearn.metrics.pairwise.polynomial_kernel"]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[775, "sklearn.metrics.pairwise.rbf_kernel"]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[776, "sklearn.metrics.pairwise.sigmoid_kernel"]], "pairwise_distances() (in module sklearn.metrics)": [[777, "sklearn.metrics.pairwise_distances"]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[778, "sklearn.metrics.pairwise_distances_argmin"]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[779, "sklearn.metrics.pairwise_distances_argmin_min"]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[780, "sklearn.metrics.pairwise_distances_chunked"]], "precision_recall_curve() (in module sklearn.metrics)": [[781, "sklearn.metrics.precision_recall_curve"]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[782, "sklearn.metrics.precision_recall_fscore_support"]], "precision_score() (in module sklearn.metrics)": [[783, "sklearn.metrics.precision_score"]], "r2_score() (in module sklearn.metrics)": [[784, "sklearn.metrics.r2_score"]], "rand_score() (in module sklearn.metrics)": [[785, "sklearn.metrics.rand_score"]], "recall_score() (in module sklearn.metrics)": [[786, "sklearn.metrics.recall_score"]], "roc_auc_score() (in module sklearn.metrics)": [[787, "sklearn.metrics.roc_auc_score"]], "roc_curve() (in module sklearn.metrics)": [[788, "sklearn.metrics.roc_curve"]], "root_mean_squared_error() (in module sklearn.metrics)": [[789, "sklearn.metrics.root_mean_squared_error"]], "root_mean_squared_log_error() (in module sklearn.metrics)": [[790, "sklearn.metrics.root_mean_squared_log_error"]], "silhouette_samples() (in module sklearn.metrics)": [[791, "sklearn.metrics.silhouette_samples"]], "silhouette_score() (in module sklearn.metrics)": [[792, "sklearn.metrics.silhouette_score"]], "top_k_accuracy_score() (in module sklearn.metrics)": [[793, "sklearn.metrics.top_k_accuracy_score"]], "v_measure_score() (in module sklearn.metrics)": [[794, "sklearn.metrics.v_measure_score"]], "zero_one_loss() (in module sklearn.metrics)": [[795, "sklearn.metrics.zero_one_loss"]], "bayesiangaussianmixture (class in sklearn.mixture)": [[796, "sklearn.mixture.BayesianGaussianMixture"]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[796, "sklearn.mixture.BayesianGaussianMixture.fit"]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[796, "sklearn.mixture.BayesianGaussianMixture.fit_predict"]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[796, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing"]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[796, "sklearn.mixture.BayesianGaussianMixture.get_params"]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[796, "sklearn.mixture.BayesianGaussianMixture.predict"]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[796, "sklearn.mixture.BayesianGaussianMixture.predict_proba"]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[796, "sklearn.mixture.BayesianGaussianMixture.sample"]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[796, "sklearn.mixture.BayesianGaussianMixture.score"]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[796, "sklearn.mixture.BayesianGaussianMixture.score_samples"]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[796, "sklearn.mixture.BayesianGaussianMixture.set_params"]], "gaussianmixture (class in sklearn.mixture)": [[797, "sklearn.mixture.GaussianMixture"]], "aic() (sklearn.mixture.gaussianmixture method)": [[797, "sklearn.mixture.GaussianMixture.aic"]], "bic() (sklearn.mixture.gaussianmixture method)": [[797, "sklearn.mixture.GaussianMixture.bic"]], "fit() (sklearn.mixture.gaussianmixture method)": [[797, "sklearn.mixture.GaussianMixture.fit"]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[797, "sklearn.mixture.GaussianMixture.fit_predict"]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[797, "sklearn.mixture.GaussianMixture.get_metadata_routing"]], "get_params() (sklearn.mixture.gaussianmixture method)": [[797, "sklearn.mixture.GaussianMixture.get_params"]], "predict() (sklearn.mixture.gaussianmixture method)": [[797, "sklearn.mixture.GaussianMixture.predict"]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[797, "sklearn.mixture.GaussianMixture.predict_proba"]], "sample() (sklearn.mixture.gaussianmixture method)": [[797, "sklearn.mixture.GaussianMixture.sample"]], "score() (sklearn.mixture.gaussianmixture method)": [[797, "sklearn.mixture.GaussianMixture.score"]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[797, "sklearn.mixture.GaussianMixture.score_samples"]], "set_params() (sklearn.mixture.gaussianmixture method)": [[797, "sklearn.mixture.GaussianMixture.set_params"]], "gridsearchcv (class in sklearn.model_selection)": [[798, "sklearn.model_selection.GridSearchCV"]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[798, "sklearn.model_selection.GridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[798, "sklearn.model_selection.GridSearchCV.decision_function"]], "fit() (sklearn.model_selection.gridsearchcv method)": [[798, "sklearn.model_selection.GridSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[798, "sklearn.model_selection.GridSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[798, "sklearn.model_selection.GridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[798, "sklearn.model_selection.GridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[798, "sklearn.model_selection.GridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.gridsearchcv method)": [[798, "sklearn.model_selection.GridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[798, "sklearn.model_selection.GridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[798, "sklearn.model_selection.GridSearchCV.predict_proba"]], "score() (sklearn.model_selection.gridsearchcv method)": [[798, "sklearn.model_selection.GridSearchCV.score"]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[798, "sklearn.model_selection.GridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[798, "sklearn.model_selection.GridSearchCV.set_params"]], "transform() (sklearn.model_selection.gridsearchcv method)": [[798, "sklearn.model_selection.GridSearchCV.transform"]], "groupkfold (class in sklearn.model_selection)": [[799, "sklearn.model_selection.GroupKFold"]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[799, "sklearn.model_selection.GroupKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[799, "sklearn.model_selection.GroupKFold.get_n_splits"]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[799, "sklearn.model_selection.GroupKFold.set_split_request"]], "split() (sklearn.model_selection.groupkfold method)": [[799, "sklearn.model_selection.GroupKFold.split"]], "groupshufflesplit (class in sklearn.model_selection)": [[800, "sklearn.model_selection.GroupShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[800, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[800, "sklearn.model_selection.GroupShuffleSplit.get_n_splits"]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[800, "sklearn.model_selection.GroupShuffleSplit.set_split_request"]], "split() (sklearn.model_selection.groupshufflesplit method)": [[800, "sklearn.model_selection.GroupShuffleSplit.split"]], "halvinggridsearchcv (class in sklearn.model_selection)": [[801, "sklearn.model_selection.HalvingGridSearchCV"]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[801, "sklearn.model_selection.HalvingGridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[801, "sklearn.model_selection.HalvingGridSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[801, "sklearn.model_selection.HalvingGridSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[801, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[801, "sklearn.model_selection.HalvingGridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[801, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[801, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[801, "sklearn.model_selection.HalvingGridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[801, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[801, "sklearn.model_selection.HalvingGridSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[801, "sklearn.model_selection.HalvingGridSearchCV.score"]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[801, "sklearn.model_selection.HalvingGridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[801, "sklearn.model_selection.HalvingGridSearchCV.set_params"]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[801, "sklearn.model_selection.HalvingGridSearchCV.transform"]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[802, "sklearn.model_selection.HalvingRandomSearchCV"]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[802, "sklearn.model_selection.HalvingRandomSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[802, "sklearn.model_selection.HalvingRandomSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[802, "sklearn.model_selection.HalvingRandomSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[802, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[802, "sklearn.model_selection.HalvingRandomSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[802, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[802, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[802, "sklearn.model_selection.HalvingRandomSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[802, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[802, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[802, "sklearn.model_selection.HalvingRandomSearchCV.score"]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[802, "sklearn.model_selection.HalvingRandomSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[802, "sklearn.model_selection.HalvingRandomSearchCV.set_params"]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[802, "sklearn.model_selection.HalvingRandomSearchCV.transform"]], "kfold (class in sklearn.model_selection)": [[803, "sklearn.model_selection.KFold"]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[803, "sklearn.model_selection.KFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.kfold method)": [[803, "sklearn.model_selection.KFold.get_n_splits"]], "split() (sklearn.model_selection.kfold method)": [[803, "sklearn.model_selection.KFold.split"]], "learningcurvedisplay (class in sklearn.model_selection)": [[804, "sklearn.model_selection.LearningCurveDisplay"]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[804, "sklearn.model_selection.LearningCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[804, "sklearn.model_selection.LearningCurveDisplay.plot"]], "leaveonegroupout (class in sklearn.model_selection)": [[805, "sklearn.model_selection.LeaveOneGroupOut"]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[805, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[805, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits"]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[805, "sklearn.model_selection.LeaveOneGroupOut.set_split_request"]], "split() (sklearn.model_selection.leaveonegroupout method)": [[805, "sklearn.model_selection.LeaveOneGroupOut.split"]], "leaveoneout (class in sklearn.model_selection)": [[806, "sklearn.model_selection.LeaveOneOut"]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[806, "sklearn.model_selection.LeaveOneOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[806, "sklearn.model_selection.LeaveOneOut.get_n_splits"]], "split() (sklearn.model_selection.leaveoneout method)": [[806, "sklearn.model_selection.LeaveOneOut.split"]], "leavepgroupsout (class in sklearn.model_selection)": [[807, "sklearn.model_selection.LeavePGroupsOut"]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[807, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[807, "sklearn.model_selection.LeavePGroupsOut.get_n_splits"]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[807, "sklearn.model_selection.LeavePGroupsOut.set_split_request"]], "split() (sklearn.model_selection.leavepgroupsout method)": [[807, "sklearn.model_selection.LeavePGroupsOut.split"]], "leavepout (class in sklearn.model_selection)": [[808, "sklearn.model_selection.LeavePOut"]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[808, "sklearn.model_selection.LeavePOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[808, "sklearn.model_selection.LeavePOut.get_n_splits"]], "split() (sklearn.model_selection.leavepout method)": [[808, "sklearn.model_selection.LeavePOut.split"]], "parametergrid (class in sklearn.model_selection)": [[809, "sklearn.model_selection.ParameterGrid"]], "parametersampler (class in sklearn.model_selection)": [[810, "sklearn.model_selection.ParameterSampler"]], "predefinedsplit (class in sklearn.model_selection)": [[811, "sklearn.model_selection.PredefinedSplit"]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[811, "sklearn.model_selection.PredefinedSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[811, "sklearn.model_selection.PredefinedSplit.get_n_splits"]], "split() (sklearn.model_selection.predefinedsplit method)": [[811, "sklearn.model_selection.PredefinedSplit.split"]], "randomizedsearchcv (class in sklearn.model_selection)": [[812, "sklearn.model_selection.RandomizedSearchCV"]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[812, "sklearn.model_selection.RandomizedSearchCV.classes_"]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[812, "sklearn.model_selection.RandomizedSearchCV.decision_function"]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[812, "sklearn.model_selection.RandomizedSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[812, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[812, "sklearn.model_selection.RandomizedSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[812, "sklearn.model_selection.RandomizedSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[812, "sklearn.model_selection.RandomizedSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[812, "sklearn.model_selection.RandomizedSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[812, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[812, "sklearn.model_selection.RandomizedSearchCV.predict_proba"]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[812, "sklearn.model_selection.RandomizedSearchCV.score"]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[812, "sklearn.model_selection.RandomizedSearchCV.score_samples"]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[812, "sklearn.model_selection.RandomizedSearchCV.set_params"]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[812, "sklearn.model_selection.RandomizedSearchCV.transform"]], "repeatedkfold (class in sklearn.model_selection)": [[813, "sklearn.model_selection.RepeatedKFold"]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[813, "sklearn.model_selection.RepeatedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[813, "sklearn.model_selection.RepeatedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedkfold method)": [[813, "sklearn.model_selection.RepeatedKFold.split"]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[814, "sklearn.model_selection.RepeatedStratifiedKFold"]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[814, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[814, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[814, "sklearn.model_selection.RepeatedStratifiedKFold.split"]], "shufflesplit (class in sklearn.model_selection)": [[815, "sklearn.model_selection.ShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[815, "sklearn.model_selection.ShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[815, "sklearn.model_selection.ShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.shufflesplit method)": [[815, "sklearn.model_selection.ShuffleSplit.split"]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[816, "sklearn.model_selection.StratifiedGroupKFold"]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[816, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[816, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits"]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[816, "sklearn.model_selection.StratifiedGroupKFold.set_split_request"]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[816, "sklearn.model_selection.StratifiedGroupKFold.split"]], "stratifiedkfold (class in sklearn.model_selection)": [[817, "sklearn.model_selection.StratifiedKFold"]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[817, "sklearn.model_selection.StratifiedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[817, "sklearn.model_selection.StratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedkfold method)": [[817, "sklearn.model_selection.StratifiedKFold.split"]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[818, "sklearn.model_selection.StratifiedShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[818, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[818, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[818, "sklearn.model_selection.StratifiedShuffleSplit.split"]], "timeseriessplit (class in sklearn.model_selection)": [[819, "sklearn.model_selection.TimeSeriesSplit"]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[819, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[819, "sklearn.model_selection.TimeSeriesSplit.get_n_splits"]], "split() (sklearn.model_selection.timeseriessplit method)": [[819, "sklearn.model_selection.TimeSeriesSplit.split"]], "validationcurvedisplay (class in sklearn.model_selection)": [[820, "sklearn.model_selection.ValidationCurveDisplay"]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[820, "sklearn.model_selection.ValidationCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[820, "sklearn.model_selection.ValidationCurveDisplay.plot"]], "check_cv() (in module sklearn.model_selection)": [[821, "sklearn.model_selection.check_cv"]], "cross_val_predict() (in module sklearn.model_selection)": [[822, "sklearn.model_selection.cross_val_predict"]], "cross_val_score() (in module sklearn.model_selection)": [[823, "sklearn.model_selection.cross_val_score"]], "cross_validate() (in module sklearn.model_selection)": [[824, "sklearn.model_selection.cross_validate"]], "learning_curve() (in module sklearn.model_selection)": [[825, "sklearn.model_selection.learning_curve"]], "permutation_test_score() (in module sklearn.model_selection)": [[826, "sklearn.model_selection.permutation_test_score"]], "train_test_split() (in module sklearn.model_selection)": [[827, "sklearn.model_selection.train_test_split"]], "validation_curve() (in module sklearn.model_selection)": [[828, "sklearn.model_selection.validation_curve"]], "onevsoneclassifier (class in sklearn.multiclass)": [[829, "sklearn.multiclass.OneVsOneClassifier"]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[829, "sklearn.multiclass.OneVsOneClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[829, "sklearn.multiclass.OneVsOneClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[829, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[829, "sklearn.multiclass.OneVsOneClassifier.get_params"]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[829, "sklearn.multiclass.OneVsOneClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[829, "sklearn.multiclass.OneVsOneClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[829, "sklearn.multiclass.OneVsOneClassifier.predict"]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[829, "sklearn.multiclass.OneVsOneClassifier.score"]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[829, "sklearn.multiclass.OneVsOneClassifier.set_params"]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[829, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[829, "sklearn.multiclass.OneVsOneClassifier.set_score_request"]], "onevsrestclassifier (class in sklearn.multiclass)": [[830, "sklearn.multiclass.OneVsRestClassifier"]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[830, "sklearn.multiclass.OneVsRestClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[830, "sklearn.multiclass.OneVsRestClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[830, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[830, "sklearn.multiclass.OneVsRestClassifier.get_params"]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[830, "sklearn.multiclass.OneVsRestClassifier.multilabel_"]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[830, "sklearn.multiclass.OneVsRestClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[830, "sklearn.multiclass.OneVsRestClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[830, "sklearn.multiclass.OneVsRestClassifier.predict"]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[830, "sklearn.multiclass.OneVsRestClassifier.predict_proba"]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[830, "sklearn.multiclass.OneVsRestClassifier.score"]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[830, "sklearn.multiclass.OneVsRestClassifier.set_params"]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[830, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[830, "sklearn.multiclass.OneVsRestClassifier.set_score_request"]], "outputcodeclassifier (class in sklearn.multiclass)": [[831, "sklearn.multiclass.OutputCodeClassifier"]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[831, "sklearn.multiclass.OutputCodeClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[831, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[831, "sklearn.multiclass.OutputCodeClassifier.get_params"]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[831, "sklearn.multiclass.OutputCodeClassifier.predict"]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[831, "sklearn.multiclass.OutputCodeClassifier.score"]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[831, "sklearn.multiclass.OutputCodeClassifier.set_params"]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[831, "sklearn.multiclass.OutputCodeClassifier.set_score_request"]], "classifierchain (class in sklearn.multioutput)": [[832, "sklearn.multioutput.ClassifierChain"]], "decision_function() (sklearn.multioutput.classifierchain method)": [[832, "sklearn.multioutput.ClassifierChain.decision_function"]], "fit() (sklearn.multioutput.classifierchain method)": [[832, "sklearn.multioutput.ClassifierChain.fit"]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[832, "sklearn.multioutput.ClassifierChain.get_metadata_routing"]], "get_params() (sklearn.multioutput.classifierchain method)": [[832, "sklearn.multioutput.ClassifierChain.get_params"]], "predict() (sklearn.multioutput.classifierchain method)": [[832, "sklearn.multioutput.ClassifierChain.predict"]], "predict_log_proba() (sklearn.multioutput.classifierchain method)": [[832, "sklearn.multioutput.ClassifierChain.predict_log_proba"]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[832, "sklearn.multioutput.ClassifierChain.predict_proba"]], "score() (sklearn.multioutput.classifierchain method)": [[832, "sklearn.multioutput.ClassifierChain.score"]], "set_params() (sklearn.multioutput.classifierchain method)": [[832, "sklearn.multioutput.ClassifierChain.set_params"]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[832, "sklearn.multioutput.ClassifierChain.set_score_request"]], "multioutputclassifier (class in sklearn.multioutput)": [[833, "sklearn.multioutput.MultiOutputClassifier"]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[833, "sklearn.multioutput.MultiOutputClassifier.fit"]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[833, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing"]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[833, "sklearn.multioutput.MultiOutputClassifier.get_params"]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[833, "sklearn.multioutput.MultiOutputClassifier.partial_fit"]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[833, "sklearn.multioutput.MultiOutputClassifier.predict"]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[833, "sklearn.multioutput.MultiOutputClassifier.predict_proba"]], "score() (sklearn.multioutput.multioutputclassifier method)": [[833, "sklearn.multioutput.MultiOutputClassifier.score"]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[833, "sklearn.multioutput.MultiOutputClassifier.set_fit_request"]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[833, "sklearn.multioutput.MultiOutputClassifier.set_params"]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[833, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request"]], "multioutputregressor (class in sklearn.multioutput)": [[834, "sklearn.multioutput.MultiOutputRegressor"]], "fit() (sklearn.multioutput.multioutputregressor method)": [[834, "sklearn.multioutput.MultiOutputRegressor.fit"]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[834, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing"]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[834, "sklearn.multioutput.MultiOutputRegressor.get_params"]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[834, "sklearn.multioutput.MultiOutputRegressor.partial_fit"]], "predict() (sklearn.multioutput.multioutputregressor method)": [[834, "sklearn.multioutput.MultiOutputRegressor.predict"]], "score() (sklearn.multioutput.multioutputregressor method)": [[834, "sklearn.multioutput.MultiOutputRegressor.score"]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[834, "sklearn.multioutput.MultiOutputRegressor.set_fit_request"]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[834, "sklearn.multioutput.MultiOutputRegressor.set_params"]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[834, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[834, "sklearn.multioutput.MultiOutputRegressor.set_score_request"]], "regressorchain (class in sklearn.multioutput)": [[835, "sklearn.multioutput.RegressorChain"]], "fit() (sklearn.multioutput.regressorchain method)": [[835, "sklearn.multioutput.RegressorChain.fit"]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[835, "sklearn.multioutput.RegressorChain.get_metadata_routing"]], "get_params() (sklearn.multioutput.regressorchain method)": [[835, "sklearn.multioutput.RegressorChain.get_params"]], "predict() (sklearn.multioutput.regressorchain method)": [[835, "sklearn.multioutput.RegressorChain.predict"]], "score() (sklearn.multioutput.regressorchain method)": [[835, "sklearn.multioutput.RegressorChain.score"]], "set_params() (sklearn.multioutput.regressorchain method)": [[835, "sklearn.multioutput.RegressorChain.set_params"]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[835, "sklearn.multioutput.RegressorChain.set_score_request"]], "bernoullinb (class in sklearn.naive_bayes)": [[836, "sklearn.naive_bayes.BernoulliNB"]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[836, "sklearn.naive_bayes.BernoulliNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[836, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[836, "sklearn.naive_bayes.BernoulliNB.get_params"]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[836, "sklearn.naive_bayes.BernoulliNB.partial_fit"]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[836, "sklearn.naive_bayes.BernoulliNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[836, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[836, "sklearn.naive_bayes.BernoulliNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[836, "sklearn.naive_bayes.BernoulliNB.predict_proba"]], "score() (sklearn.naive_bayes.bernoullinb method)": [[836, "sklearn.naive_bayes.BernoulliNB.score"]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[836, "sklearn.naive_bayes.BernoulliNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[836, "sklearn.naive_bayes.BernoulliNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[836, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[836, "sklearn.naive_bayes.BernoulliNB.set_score_request"]], "categoricalnb (class in sklearn.naive_bayes)": [[837, "sklearn.naive_bayes.CategoricalNB"]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[837, "sklearn.naive_bayes.CategoricalNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[837, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[837, "sklearn.naive_bayes.CategoricalNB.get_params"]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[837, "sklearn.naive_bayes.CategoricalNB.partial_fit"]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[837, "sklearn.naive_bayes.CategoricalNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[837, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[837, "sklearn.naive_bayes.CategoricalNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[837, "sklearn.naive_bayes.CategoricalNB.predict_proba"]], "score() (sklearn.naive_bayes.categoricalnb method)": [[837, "sklearn.naive_bayes.CategoricalNB.score"]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[837, "sklearn.naive_bayes.CategoricalNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[837, "sklearn.naive_bayes.CategoricalNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[837, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[837, "sklearn.naive_bayes.CategoricalNB.set_score_request"]], "complementnb (class in sklearn.naive_bayes)": [[838, "sklearn.naive_bayes.ComplementNB"]], "fit() (sklearn.naive_bayes.complementnb method)": [[838, "sklearn.naive_bayes.ComplementNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[838, "sklearn.naive_bayes.ComplementNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.complementnb method)": [[838, "sklearn.naive_bayes.ComplementNB.get_params"]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[838, "sklearn.naive_bayes.ComplementNB.partial_fit"]], "predict() (sklearn.naive_bayes.complementnb method)": [[838, "sklearn.naive_bayes.ComplementNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[838, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[838, "sklearn.naive_bayes.ComplementNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[838, "sklearn.naive_bayes.ComplementNB.predict_proba"]], "score() (sklearn.naive_bayes.complementnb method)": [[838, "sklearn.naive_bayes.ComplementNB.score"]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[838, "sklearn.naive_bayes.ComplementNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.complementnb method)": [[838, "sklearn.naive_bayes.ComplementNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[838, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[838, "sklearn.naive_bayes.ComplementNB.set_score_request"]], "gaussiannb (class in sklearn.naive_bayes)": [[839, "sklearn.naive_bayes.GaussianNB"]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[839, "sklearn.naive_bayes.GaussianNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[839, "sklearn.naive_bayes.GaussianNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[839, "sklearn.naive_bayes.GaussianNB.get_params"]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[839, "sklearn.naive_bayes.GaussianNB.partial_fit"]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[839, "sklearn.naive_bayes.GaussianNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[839, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[839, "sklearn.naive_bayes.GaussianNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[839, "sklearn.naive_bayes.GaussianNB.predict_proba"]], "score() (sklearn.naive_bayes.gaussiannb method)": [[839, "sklearn.naive_bayes.GaussianNB.score"]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[839, "sklearn.naive_bayes.GaussianNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[839, "sklearn.naive_bayes.GaussianNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[839, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[839, "sklearn.naive_bayes.GaussianNB.set_score_request"]], "multinomialnb (class in sklearn.naive_bayes)": [[840, "sklearn.naive_bayes.MultinomialNB"]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[840, "sklearn.naive_bayes.MultinomialNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[840, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[840, "sklearn.naive_bayes.MultinomialNB.get_params"]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[840, "sklearn.naive_bayes.MultinomialNB.partial_fit"]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[840, "sklearn.naive_bayes.MultinomialNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[840, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[840, "sklearn.naive_bayes.MultinomialNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[840, "sklearn.naive_bayes.MultinomialNB.predict_proba"]], "score() (sklearn.naive_bayes.multinomialnb method)": [[840, "sklearn.naive_bayes.MultinomialNB.score"]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[840, "sklearn.naive_bayes.MultinomialNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[840, "sklearn.naive_bayes.MultinomialNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[840, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[840, "sklearn.naive_bayes.MultinomialNB.set_score_request"]], "balltree (class in sklearn.neighbors)": [[841, "sklearn.neighbors.BallTree"]], "get_arrays() (sklearn.neighbors.balltree method)": [[841, "sklearn.neighbors.BallTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.balltree method)": [[841, "sklearn.neighbors.BallTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[841, "sklearn.neighbors.BallTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.balltree method)": [[841, "sklearn.neighbors.BallTree.kernel_density"]], "query() (sklearn.neighbors.balltree method)": [[841, "sklearn.neighbors.BallTree.query"]], "query_radius() (sklearn.neighbors.balltree method)": [[841, "sklearn.neighbors.BallTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[841, "sklearn.neighbors.BallTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[841, "sklearn.neighbors.BallTree.two_point_correlation"]], "kdtree (class in sklearn.neighbors)": [[842, "sklearn.neighbors.KDTree"]], "get_arrays() (sklearn.neighbors.kdtree method)": [[842, "sklearn.neighbors.KDTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[842, "sklearn.neighbors.KDTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[842, "sklearn.neighbors.KDTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.kdtree method)": [[842, "sklearn.neighbors.KDTree.kernel_density"]], "query() (sklearn.neighbors.kdtree method)": [[842, "sklearn.neighbors.KDTree.query"]], "query_radius() (sklearn.neighbors.kdtree method)": [[842, "sklearn.neighbors.KDTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[842, "sklearn.neighbors.KDTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[842, "sklearn.neighbors.KDTree.two_point_correlation"]], "kneighborsclassifier (class in sklearn.neighbors)": [[843, "sklearn.neighbors.KNeighborsClassifier"]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[843, "sklearn.neighbors.KNeighborsClassifier.fit"]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[843, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[843, "sklearn.neighbors.KNeighborsClassifier.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[843, "sklearn.neighbors.KNeighborsClassifier.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[843, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[843, "sklearn.neighbors.KNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[843, "sklearn.neighbors.KNeighborsClassifier.predict_proba"]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[843, "sklearn.neighbors.KNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[843, "sklearn.neighbors.KNeighborsClassifier.set_params"]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[843, "sklearn.neighbors.KNeighborsClassifier.set_score_request"]], "kneighborsregressor (class in sklearn.neighbors)": [[844, "sklearn.neighbors.KNeighborsRegressor"]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[844, "sklearn.neighbors.KNeighborsRegressor.fit"]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[844, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[844, "sklearn.neighbors.KNeighborsRegressor.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[844, "sklearn.neighbors.KNeighborsRegressor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[844, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[844, "sklearn.neighbors.KNeighborsRegressor.predict"]], "score() (sklearn.neighbors.kneighborsregressor method)": [[844, "sklearn.neighbors.KNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[844, "sklearn.neighbors.KNeighborsRegressor.set_params"]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[844, "sklearn.neighbors.KNeighborsRegressor.set_score_request"]], "kneighborstransformer (class in sklearn.neighbors)": [[845, "sklearn.neighbors.KNeighborsTransformer"]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[845, "sklearn.neighbors.KNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[845, "sklearn.neighbors.KNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[845, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[845, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[845, "sklearn.neighbors.KNeighborsTransformer.get_params"]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[845, "sklearn.neighbors.KNeighborsTransformer.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[845, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph"]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[845, "sklearn.neighbors.KNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[845, "sklearn.neighbors.KNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[845, "sklearn.neighbors.KNeighborsTransformer.transform"]], "kerneldensity (class in sklearn.neighbors)": [[846, "sklearn.neighbors.KernelDensity"]], "fit() (sklearn.neighbors.kerneldensity method)": [[846, "sklearn.neighbors.KernelDensity.fit"]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[846, "sklearn.neighbors.KernelDensity.get_metadata_routing"]], "get_params() (sklearn.neighbors.kerneldensity method)": [[846, "sklearn.neighbors.KernelDensity.get_params"]], "sample() (sklearn.neighbors.kerneldensity method)": [[846, "sklearn.neighbors.KernelDensity.sample"]], "score() (sklearn.neighbors.kerneldensity method)": [[846, "sklearn.neighbors.KernelDensity.score"]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[846, "sklearn.neighbors.KernelDensity.score_samples"]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[846, "sklearn.neighbors.KernelDensity.set_fit_request"]], "set_params() (sklearn.neighbors.kerneldensity method)": [[846, "sklearn.neighbors.KernelDensity.set_params"]], "localoutlierfactor (class in sklearn.neighbors)": [[847, "sklearn.neighbors.LocalOutlierFactor"]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[847, "sklearn.neighbors.LocalOutlierFactor.decision_function"]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[847, "sklearn.neighbors.LocalOutlierFactor.fit"]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[847, "sklearn.neighbors.LocalOutlierFactor.fit_predict"]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[847, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing"]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[847, "sklearn.neighbors.LocalOutlierFactor.get_params"]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[847, "sklearn.neighbors.LocalOutlierFactor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[847, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph"]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[847, "sklearn.neighbors.LocalOutlierFactor.predict"]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[847, "sklearn.neighbors.LocalOutlierFactor.score_samples"]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[847, "sklearn.neighbors.LocalOutlierFactor.set_params"]], "nearestcentroid (class in sklearn.neighbors)": [[848, "sklearn.neighbors.NearestCentroid"]], "fit() (sklearn.neighbors.nearestcentroid method)": [[848, "sklearn.neighbors.NearestCentroid.fit"]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[848, "sklearn.neighbors.NearestCentroid.get_metadata_routing"]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[848, "sklearn.neighbors.NearestCentroid.get_params"]], "predict() (sklearn.neighbors.nearestcentroid method)": [[848, "sklearn.neighbors.NearestCentroid.predict"]], "score() (sklearn.neighbors.nearestcentroid method)": [[848, "sklearn.neighbors.NearestCentroid.score"]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[848, "sklearn.neighbors.NearestCentroid.set_params"]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[848, "sklearn.neighbors.NearestCentroid.set_score_request"]], "nearestneighbors (class in sklearn.neighbors)": [[849, "sklearn.neighbors.NearestNeighbors"]], "fit() (sklearn.neighbors.nearestneighbors method)": [[849, "sklearn.neighbors.NearestNeighbors.fit"]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[849, "sklearn.neighbors.NearestNeighbors.get_metadata_routing"]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[849, "sklearn.neighbors.NearestNeighbors.get_params"]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[849, "sklearn.neighbors.NearestNeighbors.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[849, "sklearn.neighbors.NearestNeighbors.kneighbors_graph"]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[849, "sklearn.neighbors.NearestNeighbors.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[849, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph"]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[849, "sklearn.neighbors.NearestNeighbors.set_params"]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[850, "sklearn.neighbors.NeighborhoodComponentsAnalysis"]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[850, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit"]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[850, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[850, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[850, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing"]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[850, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params"]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[850, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output"]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[850, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params"]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[850, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform"]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[851, "sklearn.neighbors.RadiusNeighborsClassifier"]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[851, "sklearn.neighbors.RadiusNeighborsClassifier.fit"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[851, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[851, "sklearn.neighbors.RadiusNeighborsClassifier.get_params"]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[851, "sklearn.neighbors.RadiusNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[851, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[851, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[851, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[851, "sklearn.neighbors.RadiusNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[851, "sklearn.neighbors.RadiusNeighborsClassifier.set_params"]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[851, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request"]], "radiusneighborsregressor (class in sklearn.neighbors)": [[852, "sklearn.neighbors.RadiusNeighborsRegressor"]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[852, "sklearn.neighbors.RadiusNeighborsRegressor.fit"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[852, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[852, "sklearn.neighbors.RadiusNeighborsRegressor.get_params"]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[852, "sklearn.neighbors.RadiusNeighborsRegressor.predict"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[852, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[852, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[852, "sklearn.neighbors.RadiusNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[852, "sklearn.neighbors.RadiusNeighborsRegressor.set_params"]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[852, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request"]], "radiusneighborstransformer (class in sklearn.neighbors)": [[853, "sklearn.neighbors.RadiusNeighborsTransformer"]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[853, "sklearn.neighbors.RadiusNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[853, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[853, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[853, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[853, "sklearn.neighbors.RadiusNeighborsTransformer.get_params"]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[853, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[853, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph"]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[853, "sklearn.neighbors.RadiusNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[853, "sklearn.neighbors.RadiusNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[853, "sklearn.neighbors.RadiusNeighborsTransformer.transform"]], "kneighbors_graph() (in module sklearn.neighbors)": [[854, "sklearn.neighbors.kneighbors_graph"]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[855, "sklearn.neighbors.radius_neighbors_graph"]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[856, "sklearn.neighbors.sort_graph_by_row_values"]], "bernoullirbm (class in sklearn.neural_network)": [[857, "sklearn.neural_network.BernoulliRBM"]], "fit() (sklearn.neural_network.bernoullirbm method)": [[857, "sklearn.neural_network.BernoulliRBM.fit"]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[857, "sklearn.neural_network.BernoulliRBM.fit_transform"]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[857, "sklearn.neural_network.BernoulliRBM.get_feature_names_out"]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[857, "sklearn.neural_network.BernoulliRBM.get_metadata_routing"]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[857, "sklearn.neural_network.BernoulliRBM.get_params"]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[857, "sklearn.neural_network.BernoulliRBM.gibbs"]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[857, "sklearn.neural_network.BernoulliRBM.partial_fit"]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[857, "sklearn.neural_network.BernoulliRBM.score_samples"]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[857, "sklearn.neural_network.BernoulliRBM.set_output"]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[857, "sklearn.neural_network.BernoulliRBM.set_params"]], "transform() (sklearn.neural_network.bernoullirbm method)": [[857, "sklearn.neural_network.BernoulliRBM.transform"]], "mlpclassifier (class in sklearn.neural_network)": [[858, "sklearn.neural_network.MLPClassifier"]], "fit() (sklearn.neural_network.mlpclassifier method)": [[858, "sklearn.neural_network.MLPClassifier.fit"]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[858, "sklearn.neural_network.MLPClassifier.get_metadata_routing"]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[858, "sklearn.neural_network.MLPClassifier.get_params"]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[858, "sklearn.neural_network.MLPClassifier.partial_fit"]], "predict() (sklearn.neural_network.mlpclassifier method)": [[858, "sklearn.neural_network.MLPClassifier.predict"]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[858, "sklearn.neural_network.MLPClassifier.predict_log_proba"]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[858, "sklearn.neural_network.MLPClassifier.predict_proba"]], "score() (sklearn.neural_network.mlpclassifier method)": [[858, "sklearn.neural_network.MLPClassifier.score"]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[858, "sklearn.neural_network.MLPClassifier.set_params"]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[858, "sklearn.neural_network.MLPClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[858, "sklearn.neural_network.MLPClassifier.set_score_request"]], "mlpregressor (class in sklearn.neural_network)": [[859, "sklearn.neural_network.MLPRegressor"]], "fit() (sklearn.neural_network.mlpregressor method)": [[859, "sklearn.neural_network.MLPRegressor.fit"]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[859, "sklearn.neural_network.MLPRegressor.get_metadata_routing"]], "get_params() (sklearn.neural_network.mlpregressor method)": [[859, "sklearn.neural_network.MLPRegressor.get_params"]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[859, "sklearn.neural_network.MLPRegressor.partial_fit"]], "predict() (sklearn.neural_network.mlpregressor method)": [[859, "sklearn.neural_network.MLPRegressor.predict"]], "score() (sklearn.neural_network.mlpregressor method)": [[859, "sklearn.neural_network.MLPRegressor.score"]], "set_params() (sklearn.neural_network.mlpregressor method)": [[859, "sklearn.neural_network.MLPRegressor.set_params"]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[859, "sklearn.neural_network.MLPRegressor.set_score_request"]], "featureunion (class in sklearn.pipeline)": [[860, "sklearn.pipeline.FeatureUnion"]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[860, "sklearn.pipeline.FeatureUnion.feature_names_in_"]], "fit() (sklearn.pipeline.featureunion method)": [[860, "sklearn.pipeline.FeatureUnion.fit"]], "fit_transform() (sklearn.pipeline.featureunion method)": [[860, "sklearn.pipeline.FeatureUnion.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[860, "sklearn.pipeline.FeatureUnion.get_feature_names_out"]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[860, "sklearn.pipeline.FeatureUnion.get_metadata_routing"]], "get_params() (sklearn.pipeline.featureunion method)": [[860, "sklearn.pipeline.FeatureUnion.get_params"]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[860, "sklearn.pipeline.FeatureUnion.n_features_in_"]], "set_output() (sklearn.pipeline.featureunion method)": [[860, "sklearn.pipeline.FeatureUnion.set_output"]], "set_params() (sklearn.pipeline.featureunion method)": [[860, "sklearn.pipeline.FeatureUnion.set_params"]], "transform() (sklearn.pipeline.featureunion method)": [[860, "sklearn.pipeline.FeatureUnion.transform"]], "pipeline (class in sklearn.pipeline)": [[861, "sklearn.pipeline.Pipeline"]], "classes_ (sklearn.pipeline.pipeline property)": [[861, "sklearn.pipeline.Pipeline.classes_"]], "decision_function() (sklearn.pipeline.pipeline method)": [[861, "sklearn.pipeline.Pipeline.decision_function"]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[861, "sklearn.pipeline.Pipeline.feature_names_in_"]], "fit() (sklearn.pipeline.pipeline method)": [[861, "sklearn.pipeline.Pipeline.fit"]], "fit_predict() (sklearn.pipeline.pipeline method)": [[861, "sklearn.pipeline.Pipeline.fit_predict"]], "fit_transform() (sklearn.pipeline.pipeline method)": [[861, "sklearn.pipeline.Pipeline.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[861, "sklearn.pipeline.Pipeline.get_feature_names_out"]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[861, "sklearn.pipeline.Pipeline.get_metadata_routing"]], "get_params() (sklearn.pipeline.pipeline method)": [[861, "sklearn.pipeline.Pipeline.get_params"]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[861, "sklearn.pipeline.Pipeline.inverse_transform"]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[861, "sklearn.pipeline.Pipeline.n_features_in_"]], "named_steps (sklearn.pipeline.pipeline property)": [[861, "sklearn.pipeline.Pipeline.named_steps"]], "predict() (sklearn.pipeline.pipeline method)": [[861, "sklearn.pipeline.Pipeline.predict"]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[861, "sklearn.pipeline.Pipeline.predict_log_proba"]], "predict_proba() (sklearn.pipeline.pipeline method)": [[861, "sklearn.pipeline.Pipeline.predict_proba"]], "score() (sklearn.pipeline.pipeline method)": [[861, "sklearn.pipeline.Pipeline.score"]], "score_samples() (sklearn.pipeline.pipeline method)": [[861, "sklearn.pipeline.Pipeline.score_samples"]], "set_output() (sklearn.pipeline.pipeline method)": [[861, "sklearn.pipeline.Pipeline.set_output"]], "set_params() (sklearn.pipeline.pipeline method)": [[861, "sklearn.pipeline.Pipeline.set_params"]], "set_score_request() (sklearn.pipeline.pipeline method)": [[861, "sklearn.pipeline.Pipeline.set_score_request"]], "transform() (sklearn.pipeline.pipeline method)": [[861, "sklearn.pipeline.Pipeline.transform"]], "make_pipeline() (in module sklearn.pipeline)": [[862, "sklearn.pipeline.make_pipeline"]], "make_union() (in module sklearn.pipeline)": [[863, "sklearn.pipeline.make_union"]], "binarizer (class in sklearn.preprocessing)": [[864, "sklearn.preprocessing.Binarizer"]], "fit() (sklearn.preprocessing.binarizer method)": [[864, "sklearn.preprocessing.Binarizer.fit"]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[864, "sklearn.preprocessing.Binarizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[864, "sklearn.preprocessing.Binarizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[864, "sklearn.preprocessing.Binarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.binarizer method)": [[864, "sklearn.preprocessing.Binarizer.get_params"]], "set_output() (sklearn.preprocessing.binarizer method)": [[864, "sklearn.preprocessing.Binarizer.set_output"]], "set_params() (sklearn.preprocessing.binarizer method)": [[864, "sklearn.preprocessing.Binarizer.set_params"]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[864, "sklearn.preprocessing.Binarizer.set_transform_request"]], "transform() (sklearn.preprocessing.binarizer method)": [[864, "sklearn.preprocessing.Binarizer.transform"]], "functiontransformer (class in sklearn.preprocessing)": [[865, "sklearn.preprocessing.FunctionTransformer"]], "fit() (sklearn.preprocessing.functiontransformer method)": [[865, "sklearn.preprocessing.FunctionTransformer.fit"]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[865, "sklearn.preprocessing.FunctionTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[865, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[865, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[865, "sklearn.preprocessing.FunctionTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[865, "sklearn.preprocessing.FunctionTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[865, "sklearn.preprocessing.FunctionTransformer.set_output"]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[865, "sklearn.preprocessing.FunctionTransformer.set_params"]], "transform() (sklearn.preprocessing.functiontransformer method)": [[865, "sklearn.preprocessing.FunctionTransformer.transform"]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[866, "sklearn.preprocessing.KBinsDiscretizer"]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[866, "sklearn.preprocessing.KBinsDiscretizer.fit"]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[866, "sklearn.preprocessing.KBinsDiscretizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[866, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[866, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[866, "sklearn.preprocessing.KBinsDiscretizer.get_params"]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[866, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform"]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[866, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request"]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[866, "sklearn.preprocessing.KBinsDiscretizer.set_output"]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[866, "sklearn.preprocessing.KBinsDiscretizer.set_params"]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[866, "sklearn.preprocessing.KBinsDiscretizer.transform"]], "kernelcenterer (class in sklearn.preprocessing)": [[867, "sklearn.preprocessing.KernelCenterer"]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[867, "sklearn.preprocessing.KernelCenterer.fit"]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[867, "sklearn.preprocessing.KernelCenterer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[867, "sklearn.preprocessing.KernelCenterer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[867, "sklearn.preprocessing.KernelCenterer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[867, "sklearn.preprocessing.KernelCenterer.get_params"]], "set_fit_request() (sklearn.preprocessing.kernelcenterer method)": [[867, "sklearn.preprocessing.KernelCenterer.set_fit_request"]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[867, "sklearn.preprocessing.KernelCenterer.set_output"]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[867, "sklearn.preprocessing.KernelCenterer.set_params"]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[867, "sklearn.preprocessing.KernelCenterer.set_transform_request"]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[867, "sklearn.preprocessing.KernelCenterer.transform"]], "labelbinarizer (class in sklearn.preprocessing)": [[868, "sklearn.preprocessing.LabelBinarizer"]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[868, "sklearn.preprocessing.LabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[868, "sklearn.preprocessing.LabelBinarizer.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[868, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[868, "sklearn.preprocessing.LabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[868, "sklearn.preprocessing.LabelBinarizer.inverse_transform"]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[868, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request"]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[868, "sklearn.preprocessing.LabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[868, "sklearn.preprocessing.LabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[868, "sklearn.preprocessing.LabelBinarizer.transform"]], "labelencoder (class in sklearn.preprocessing)": [[869, "sklearn.preprocessing.LabelEncoder"]], "fit() (sklearn.preprocessing.labelencoder method)": [[869, "sklearn.preprocessing.LabelEncoder.fit"]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[869, "sklearn.preprocessing.LabelEncoder.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[869, "sklearn.preprocessing.LabelEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.labelencoder method)": [[869, "sklearn.preprocessing.LabelEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[869, "sklearn.preprocessing.LabelEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.labelencoder method)": [[869, "sklearn.preprocessing.LabelEncoder.set_output"]], "set_params() (sklearn.preprocessing.labelencoder method)": [[869, "sklearn.preprocessing.LabelEncoder.set_params"]], "transform() (sklearn.preprocessing.labelencoder method)": [[869, "sklearn.preprocessing.LabelEncoder.transform"]], "maxabsscaler (class in sklearn.preprocessing)": [[870, "sklearn.preprocessing.MaxAbsScaler"]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[870, "sklearn.preprocessing.MaxAbsScaler.fit"]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[870, "sklearn.preprocessing.MaxAbsScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[870, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[870, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[870, "sklearn.preprocessing.MaxAbsScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[870, "sklearn.preprocessing.MaxAbsScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[870, "sklearn.preprocessing.MaxAbsScaler.partial_fit"]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[870, "sklearn.preprocessing.MaxAbsScaler.set_output"]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[870, "sklearn.preprocessing.MaxAbsScaler.set_params"]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[870, "sklearn.preprocessing.MaxAbsScaler.transform"]], "minmaxscaler (class in sklearn.preprocessing)": [[871, "sklearn.preprocessing.MinMaxScaler"]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[871, "sklearn.preprocessing.MinMaxScaler.fit"]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[871, "sklearn.preprocessing.MinMaxScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[871, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[871, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[871, "sklearn.preprocessing.MinMaxScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[871, "sklearn.preprocessing.MinMaxScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[871, "sklearn.preprocessing.MinMaxScaler.partial_fit"]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[871, "sklearn.preprocessing.MinMaxScaler.set_output"]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[871, "sklearn.preprocessing.MinMaxScaler.set_params"]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[871, "sklearn.preprocessing.MinMaxScaler.transform"]], "multilabelbinarizer (class in sklearn.preprocessing)": [[872, "sklearn.preprocessing.MultiLabelBinarizer"]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[872, "sklearn.preprocessing.MultiLabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[872, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[872, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[872, "sklearn.preprocessing.MultiLabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[872, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[872, "sklearn.preprocessing.MultiLabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[872, "sklearn.preprocessing.MultiLabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[872, "sklearn.preprocessing.MultiLabelBinarizer.transform"]], "normalizer (class in sklearn.preprocessing)": [[873, "sklearn.preprocessing.Normalizer"]], "fit() (sklearn.preprocessing.normalizer method)": [[873, "sklearn.preprocessing.Normalizer.fit"]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[873, "sklearn.preprocessing.Normalizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[873, "sklearn.preprocessing.Normalizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[873, "sklearn.preprocessing.Normalizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.normalizer method)": [[873, "sklearn.preprocessing.Normalizer.get_params"]], "set_output() (sklearn.preprocessing.normalizer method)": [[873, "sklearn.preprocessing.Normalizer.set_output"]], "set_params() (sklearn.preprocessing.normalizer method)": [[873, "sklearn.preprocessing.Normalizer.set_params"]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[873, "sklearn.preprocessing.Normalizer.set_transform_request"]], "transform() (sklearn.preprocessing.normalizer method)": [[873, "sklearn.preprocessing.Normalizer.transform"]], "onehotencoder (class in sklearn.preprocessing)": [[874, "sklearn.preprocessing.OneHotEncoder"]], "fit() (sklearn.preprocessing.onehotencoder method)": [[874, "sklearn.preprocessing.OneHotEncoder.fit"]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[874, "sklearn.preprocessing.OneHotEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[874, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[874, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[874, "sklearn.preprocessing.OneHotEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[874, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[874, "sklearn.preprocessing.OneHotEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[874, "sklearn.preprocessing.OneHotEncoder.set_output"]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[874, "sklearn.preprocessing.OneHotEncoder.set_params"]], "transform() (sklearn.preprocessing.onehotencoder method)": [[874, "sklearn.preprocessing.OneHotEncoder.transform"]], "ordinalencoder (class in sklearn.preprocessing)": [[875, "sklearn.preprocessing.OrdinalEncoder"]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[875, "sklearn.preprocessing.OrdinalEncoder.fit"]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[875, "sklearn.preprocessing.OrdinalEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[875, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[875, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[875, "sklearn.preprocessing.OrdinalEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[875, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[875, "sklearn.preprocessing.OrdinalEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[875, "sklearn.preprocessing.OrdinalEncoder.set_output"]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[875, "sklearn.preprocessing.OrdinalEncoder.set_params"]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[875, "sklearn.preprocessing.OrdinalEncoder.transform"]], "polynomialfeatures (class in sklearn.preprocessing)": [[876, "sklearn.preprocessing.PolynomialFeatures"]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[876, "sklearn.preprocessing.PolynomialFeatures.fit"]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[876, "sklearn.preprocessing.PolynomialFeatures.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[876, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[876, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing"]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[876, "sklearn.preprocessing.PolynomialFeatures.get_params"]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[876, "sklearn.preprocessing.PolynomialFeatures.powers_"]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[876, "sklearn.preprocessing.PolynomialFeatures.set_output"]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[876, "sklearn.preprocessing.PolynomialFeatures.set_params"]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[876, "sklearn.preprocessing.PolynomialFeatures.transform"]], "powertransformer (class in sklearn.preprocessing)": [[877, "sklearn.preprocessing.PowerTransformer"]], "fit() (sklearn.preprocessing.powertransformer method)": [[877, "sklearn.preprocessing.PowerTransformer.fit"]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[877, "sklearn.preprocessing.PowerTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[877, "sklearn.preprocessing.PowerTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[877, "sklearn.preprocessing.PowerTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.powertransformer method)": [[877, "sklearn.preprocessing.PowerTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[877, "sklearn.preprocessing.PowerTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.powertransformer method)": [[877, "sklearn.preprocessing.PowerTransformer.set_output"]], "set_params() (sklearn.preprocessing.powertransformer method)": [[877, "sklearn.preprocessing.PowerTransformer.set_params"]], "transform() (sklearn.preprocessing.powertransformer method)": [[877, "sklearn.preprocessing.PowerTransformer.transform"]], "quantiletransformer (class in sklearn.preprocessing)": [[878, "sklearn.preprocessing.QuantileTransformer"]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[878, "sklearn.preprocessing.QuantileTransformer.fit"]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[878, "sklearn.preprocessing.QuantileTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[878, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[878, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[878, "sklearn.preprocessing.QuantileTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[878, "sklearn.preprocessing.QuantileTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[878, "sklearn.preprocessing.QuantileTransformer.set_output"]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[878, "sklearn.preprocessing.QuantileTransformer.set_params"]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[878, "sklearn.preprocessing.QuantileTransformer.transform"]], "robustscaler (class in sklearn.preprocessing)": [[879, "sklearn.preprocessing.RobustScaler"]], "fit() (sklearn.preprocessing.robustscaler method)": [[879, "sklearn.preprocessing.RobustScaler.fit"]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[879, "sklearn.preprocessing.RobustScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[879, "sklearn.preprocessing.RobustScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[879, "sklearn.preprocessing.RobustScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.robustscaler method)": [[879, "sklearn.preprocessing.RobustScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[879, "sklearn.preprocessing.RobustScaler.inverse_transform"]], "set_output() (sklearn.preprocessing.robustscaler method)": [[879, "sklearn.preprocessing.RobustScaler.set_output"]], "set_params() (sklearn.preprocessing.robustscaler method)": [[879, "sklearn.preprocessing.RobustScaler.set_params"]], "transform() (sklearn.preprocessing.robustscaler method)": [[879, "sklearn.preprocessing.RobustScaler.transform"]], "splinetransformer (class in sklearn.preprocessing)": [[880, "sklearn.preprocessing.SplineTransformer"]], "fit() (sklearn.preprocessing.splinetransformer method)": [[880, "sklearn.preprocessing.SplineTransformer.fit"]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[880, "sklearn.preprocessing.SplineTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[880, "sklearn.preprocessing.SplineTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[880, "sklearn.preprocessing.SplineTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[880, "sklearn.preprocessing.SplineTransformer.get_params"]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[880, "sklearn.preprocessing.SplineTransformer.set_fit_request"]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[880, "sklearn.preprocessing.SplineTransformer.set_output"]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[880, "sklearn.preprocessing.SplineTransformer.set_params"]], "transform() (sklearn.preprocessing.splinetransformer method)": [[880, "sklearn.preprocessing.SplineTransformer.transform"]], "standardscaler (class in sklearn.preprocessing)": [[881, "sklearn.preprocessing.StandardScaler"]], "fit() (sklearn.preprocessing.standardscaler method)": [[881, "sklearn.preprocessing.StandardScaler.fit"]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[881, "sklearn.preprocessing.StandardScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[881, "sklearn.preprocessing.StandardScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[881, "sklearn.preprocessing.StandardScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.standardscaler method)": [[881, "sklearn.preprocessing.StandardScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[881, "sklearn.preprocessing.StandardScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[881, "sklearn.preprocessing.StandardScaler.partial_fit"]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[881, "sklearn.preprocessing.StandardScaler.set_fit_request"]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[881, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request"]], "set_output() (sklearn.preprocessing.standardscaler method)": [[881, "sklearn.preprocessing.StandardScaler.set_output"]], "set_params() (sklearn.preprocessing.standardscaler method)": [[881, "sklearn.preprocessing.StandardScaler.set_params"]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[881, "sklearn.preprocessing.StandardScaler.set_partial_fit_request"]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[881, "sklearn.preprocessing.StandardScaler.set_transform_request"]], "transform() (sklearn.preprocessing.standardscaler method)": [[881, "sklearn.preprocessing.StandardScaler.transform"]], "targetencoder (class in sklearn.preprocessing)": [[882, "sklearn.preprocessing.TargetEncoder"]], "fit() (sklearn.preprocessing.targetencoder method)": [[882, "sklearn.preprocessing.TargetEncoder.fit"]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[882, "sklearn.preprocessing.TargetEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[882, "sklearn.preprocessing.TargetEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[882, "sklearn.preprocessing.TargetEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.targetencoder method)": [[882, "sklearn.preprocessing.TargetEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[882, "sklearn.preprocessing.TargetEncoder.infrequent_categories_"]], "set_output() (sklearn.preprocessing.targetencoder method)": [[882, "sklearn.preprocessing.TargetEncoder.set_output"]], "set_params() (sklearn.preprocessing.targetencoder method)": [[882, "sklearn.preprocessing.TargetEncoder.set_params"]], "transform() (sklearn.preprocessing.targetencoder method)": [[882, "sklearn.preprocessing.TargetEncoder.transform"]], "add_dummy_feature() (in module sklearn.preprocessing)": [[883, "sklearn.preprocessing.add_dummy_feature"]], "binarize() (in module sklearn.preprocessing)": [[884, "sklearn.preprocessing.binarize"]], "label_binarize() (in module sklearn.preprocessing)": [[885, "sklearn.preprocessing.label_binarize"]], "maxabs_scale() (in module sklearn.preprocessing)": [[886, "sklearn.preprocessing.maxabs_scale"]], "minmax_scale() (in module sklearn.preprocessing)": [[887, "sklearn.preprocessing.minmax_scale"]], "normalize() (in module sklearn.preprocessing)": [[888, "sklearn.preprocessing.normalize"]], "power_transform() (in module sklearn.preprocessing)": [[889, "sklearn.preprocessing.power_transform"]], "quantile_transform() (in module sklearn.preprocessing)": [[890, "sklearn.preprocessing.quantile_transform"]], "robust_scale() (in module sklearn.preprocessing)": [[891, "sklearn.preprocessing.robust_scale"]], "scale() (in module sklearn.preprocessing)": [[892, "sklearn.preprocessing.scale"]], "gaussianrandomprojection (class in sklearn.random_projection)": [[893, "sklearn.random_projection.GaussianRandomProjection"]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[893, "sklearn.random_projection.GaussianRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[893, "sklearn.random_projection.GaussianRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[893, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out"]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[893, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing"]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[893, "sklearn.random_projection.GaussianRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[893, "sklearn.random_projection.GaussianRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[893, "sklearn.random_projection.GaussianRandomProjection.set_output"]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[893, "sklearn.random_projection.GaussianRandomProjection.set_params"]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[893, "sklearn.random_projection.GaussianRandomProjection.transform"]], "sparserandomprojection (class in sklearn.random_projection)": [[894, "sklearn.random_projection.SparseRandomProjection"]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[894, "sklearn.random_projection.SparseRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[894, "sklearn.random_projection.SparseRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[894, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out"]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[894, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing"]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[894, "sklearn.random_projection.SparseRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[894, "sklearn.random_projection.SparseRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[894, "sklearn.random_projection.SparseRandomProjection.set_output"]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[894, "sklearn.random_projection.SparseRandomProjection.set_params"]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[894, "sklearn.random_projection.SparseRandomProjection.transform"]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[895, "sklearn.random_projection.johnson_lindenstrauss_min_dim"]], "labelpropagation (class in sklearn.semi_supervised)": [[896, "sklearn.semi_supervised.LabelPropagation"]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[896, "sklearn.semi_supervised.LabelPropagation.fit"]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[896, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[896, "sklearn.semi_supervised.LabelPropagation.get_params"]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[896, "sklearn.semi_supervised.LabelPropagation.predict"]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[896, "sklearn.semi_supervised.LabelPropagation.predict_proba"]], "score() (sklearn.semi_supervised.labelpropagation method)": [[896, "sklearn.semi_supervised.LabelPropagation.score"]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[896, "sklearn.semi_supervised.LabelPropagation.set_params"]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[896, "sklearn.semi_supervised.LabelPropagation.set_score_request"]], "labelspreading (class in sklearn.semi_supervised)": [[897, "sklearn.semi_supervised.LabelSpreading"]], "fit() (sklearn.semi_supervised.labelspreading method)": [[897, "sklearn.semi_supervised.LabelSpreading.fit"]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[897, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[897, "sklearn.semi_supervised.LabelSpreading.get_params"]], "predict() (sklearn.semi_supervised.labelspreading method)": [[897, "sklearn.semi_supervised.LabelSpreading.predict"]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[897, "sklearn.semi_supervised.LabelSpreading.predict_proba"]], "score() (sklearn.semi_supervised.labelspreading method)": [[897, "sklearn.semi_supervised.LabelSpreading.score"]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[897, "sklearn.semi_supervised.LabelSpreading.set_params"]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[897, "sklearn.semi_supervised.LabelSpreading.set_score_request"]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[898, "sklearn.semi_supervised.SelfTrainingClassifier"]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[898, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function"]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[898, "sklearn.semi_supervised.SelfTrainingClassifier.fit"]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[898, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[898, "sklearn.semi_supervised.SelfTrainingClassifier.get_params"]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[898, "sklearn.semi_supervised.SelfTrainingClassifier.predict"]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[898, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba"]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[898, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba"]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[898, "sklearn.semi_supervised.SelfTrainingClassifier.score"]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[898, "sklearn.semi_supervised.SelfTrainingClassifier.set_params"]], "set_config() (in module sklearn)": [[899, "sklearn.set_config"]], "show_versions() (in module sklearn)": [[900, "sklearn.show_versions"]], "linearsvc (class in sklearn.svm)": [[901, "sklearn.svm.LinearSVC"]], "decision_function() (sklearn.svm.linearsvc method)": [[901, "sklearn.svm.LinearSVC.decision_function"]], "densify() (sklearn.svm.linearsvc method)": [[901, "sklearn.svm.LinearSVC.densify"]], "fit() (sklearn.svm.linearsvc method)": [[901, "sklearn.svm.LinearSVC.fit"]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[901, "sklearn.svm.LinearSVC.get_metadata_routing"]], "get_params() (sklearn.svm.linearsvc method)": [[901, "sklearn.svm.LinearSVC.get_params"]], "predict() (sklearn.svm.linearsvc method)": [[901, "sklearn.svm.LinearSVC.predict"]], "score() (sklearn.svm.linearsvc method)": [[901, "sklearn.svm.LinearSVC.score"]], "set_fit_request() (sklearn.svm.linearsvc method)": [[901, "sklearn.svm.LinearSVC.set_fit_request"]], "set_params() (sklearn.svm.linearsvc method)": [[901, "sklearn.svm.LinearSVC.set_params"]], "set_score_request() (sklearn.svm.linearsvc method)": [[901, "sklearn.svm.LinearSVC.set_score_request"]], "sparsify() (sklearn.svm.linearsvc method)": [[901, "sklearn.svm.LinearSVC.sparsify"]], "linearsvr (class in sklearn.svm)": [[902, "sklearn.svm.LinearSVR"]], "fit() (sklearn.svm.linearsvr method)": [[902, "sklearn.svm.LinearSVR.fit"]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[902, "sklearn.svm.LinearSVR.get_metadata_routing"]], "get_params() (sklearn.svm.linearsvr method)": [[902, "sklearn.svm.LinearSVR.get_params"]], "predict() (sklearn.svm.linearsvr method)": [[902, "sklearn.svm.LinearSVR.predict"]], "score() (sklearn.svm.linearsvr method)": [[902, "sklearn.svm.LinearSVR.score"]], "set_fit_request() (sklearn.svm.linearsvr method)": [[902, "sklearn.svm.LinearSVR.set_fit_request"]], "set_params() (sklearn.svm.linearsvr method)": [[902, "sklearn.svm.LinearSVR.set_params"]], "set_score_request() (sklearn.svm.linearsvr method)": [[902, "sklearn.svm.LinearSVR.set_score_request"]], "nusvc (class in sklearn.svm)": [[903, "sklearn.svm.NuSVC"]], "coef_ (sklearn.svm.nusvc property)": [[903, "sklearn.svm.NuSVC.coef_"]], "decision_function() (sklearn.svm.nusvc method)": [[903, "sklearn.svm.NuSVC.decision_function"]], "fit() (sklearn.svm.nusvc method)": [[903, "sklearn.svm.NuSVC.fit"]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[903, "sklearn.svm.NuSVC.get_metadata_routing"]], "get_params() (sklearn.svm.nusvc method)": [[903, "sklearn.svm.NuSVC.get_params"]], "n_support_ (sklearn.svm.nusvc property)": [[903, "sklearn.svm.NuSVC.n_support_"]], "predict() (sklearn.svm.nusvc method)": [[903, "sklearn.svm.NuSVC.predict"]], "predict_log_proba() (sklearn.svm.nusvc method)": [[903, "sklearn.svm.NuSVC.predict_log_proba"]], "predict_proba() (sklearn.svm.nusvc method)": [[903, "sklearn.svm.NuSVC.predict_proba"]], "proba_ (sklearn.svm.nusvc property)": [[903, "sklearn.svm.NuSVC.probA_"]], "probb_ (sklearn.svm.nusvc property)": [[903, "sklearn.svm.NuSVC.probB_"]], "score() (sklearn.svm.nusvc method)": [[903, "sklearn.svm.NuSVC.score"]], "set_fit_request() (sklearn.svm.nusvc method)": [[903, "sklearn.svm.NuSVC.set_fit_request"]], "set_params() (sklearn.svm.nusvc method)": [[903, "sklearn.svm.NuSVC.set_params"]], "set_score_request() (sklearn.svm.nusvc method)": [[903, "sklearn.svm.NuSVC.set_score_request"]], "nusvr (class in sklearn.svm)": [[904, "sklearn.svm.NuSVR"]], "coef_ (sklearn.svm.nusvr property)": [[904, "sklearn.svm.NuSVR.coef_"]], "fit() (sklearn.svm.nusvr method)": [[904, "sklearn.svm.NuSVR.fit"]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[904, "sklearn.svm.NuSVR.get_metadata_routing"]], "get_params() (sklearn.svm.nusvr method)": [[904, "sklearn.svm.NuSVR.get_params"]], "n_support_ (sklearn.svm.nusvr property)": [[904, "sklearn.svm.NuSVR.n_support_"]], "predict() (sklearn.svm.nusvr method)": [[904, "sklearn.svm.NuSVR.predict"]], "score() (sklearn.svm.nusvr method)": [[904, "sklearn.svm.NuSVR.score"]], "set_fit_request() (sklearn.svm.nusvr method)": [[904, "sklearn.svm.NuSVR.set_fit_request"]], "set_params() (sklearn.svm.nusvr method)": [[904, "sklearn.svm.NuSVR.set_params"]], "set_score_request() (sklearn.svm.nusvr method)": [[904, "sklearn.svm.NuSVR.set_score_request"]], "oneclasssvm (class in sklearn.svm)": [[905, "sklearn.svm.OneClassSVM"]], "coef_ (sklearn.svm.oneclasssvm property)": [[905, "sklearn.svm.OneClassSVM.coef_"]], "decision_function() (sklearn.svm.oneclasssvm method)": [[905, "sklearn.svm.OneClassSVM.decision_function"]], "fit() (sklearn.svm.oneclasssvm method)": [[905, "sklearn.svm.OneClassSVM.fit"]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[905, "sklearn.svm.OneClassSVM.fit_predict"]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[905, "sklearn.svm.OneClassSVM.get_metadata_routing"]], "get_params() (sklearn.svm.oneclasssvm method)": [[905, "sklearn.svm.OneClassSVM.get_params"]], "n_support_ (sklearn.svm.oneclasssvm property)": [[905, "sklearn.svm.OneClassSVM.n_support_"]], "predict() (sklearn.svm.oneclasssvm method)": [[905, "sklearn.svm.OneClassSVM.predict"]], "score_samples() (sklearn.svm.oneclasssvm method)": [[905, "sklearn.svm.OneClassSVM.score_samples"]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[905, "sklearn.svm.OneClassSVM.set_fit_request"]], "set_params() (sklearn.svm.oneclasssvm method)": [[905, "sklearn.svm.OneClassSVM.set_params"]], "svc (class in sklearn.svm)": [[906, "sklearn.svm.SVC"]], "coef_ (sklearn.svm.svc property)": [[906, "sklearn.svm.SVC.coef_"]], "decision_function() (sklearn.svm.svc method)": [[906, "sklearn.svm.SVC.decision_function"]], "fit() (sklearn.svm.svc method)": [[906, "sklearn.svm.SVC.fit"]], "get_metadata_routing() (sklearn.svm.svc method)": [[906, "sklearn.svm.SVC.get_metadata_routing"]], "get_params() (sklearn.svm.svc method)": [[906, "sklearn.svm.SVC.get_params"]], "n_support_ (sklearn.svm.svc property)": [[906, "sklearn.svm.SVC.n_support_"]], "predict() (sklearn.svm.svc method)": [[906, "sklearn.svm.SVC.predict"]], "predict_log_proba() (sklearn.svm.svc method)": [[906, "sklearn.svm.SVC.predict_log_proba"]], "predict_proba() (sklearn.svm.svc method)": [[906, "sklearn.svm.SVC.predict_proba"]], "proba_ (sklearn.svm.svc property)": [[906, "sklearn.svm.SVC.probA_"]], "probb_ (sklearn.svm.svc property)": [[906, "sklearn.svm.SVC.probB_"]], "score() (sklearn.svm.svc method)": [[906, "sklearn.svm.SVC.score"]], "set_fit_request() (sklearn.svm.svc method)": [[906, "sklearn.svm.SVC.set_fit_request"]], "set_params() (sklearn.svm.svc method)": [[906, "sklearn.svm.SVC.set_params"]], "set_score_request() (sklearn.svm.svc method)": [[906, "sklearn.svm.SVC.set_score_request"]], "svr (class in sklearn.svm)": [[907, "sklearn.svm.SVR"]], "coef_ (sklearn.svm.svr property)": [[907, "sklearn.svm.SVR.coef_"]], "fit() (sklearn.svm.svr method)": [[907, "sklearn.svm.SVR.fit"]], "get_metadata_routing() (sklearn.svm.svr method)": [[907, "sklearn.svm.SVR.get_metadata_routing"]], "get_params() (sklearn.svm.svr method)": [[907, "sklearn.svm.SVR.get_params"]], "n_support_ (sklearn.svm.svr property)": [[907, "sklearn.svm.SVR.n_support_"]], "predict() (sklearn.svm.svr method)": [[907, "sklearn.svm.SVR.predict"]], "score() (sklearn.svm.svr method)": [[907, "sklearn.svm.SVR.score"]], "set_fit_request() (sklearn.svm.svr method)": [[907, "sklearn.svm.SVR.set_fit_request"]], "set_params() (sklearn.svm.svr method)": [[907, "sklearn.svm.SVR.set_params"]], "set_score_request() (sklearn.svm.svr method)": [[907, "sklearn.svm.SVR.set_score_request"]], "l1_min_c() (in module sklearn.svm)": [[908, "sklearn.svm.l1_min_c"]], "decisiontreeclassifier (class in sklearn.tree)": [[909, "sklearn.tree.DecisionTreeClassifier"]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[909, "sklearn.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[909, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[909, "sklearn.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[909, "sklearn.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[909, "sklearn.tree.DecisionTreeClassifier.fit"]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[909, "sklearn.tree.DecisionTreeClassifier.get_depth"]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[909, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[909, "sklearn.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[909, "sklearn.tree.DecisionTreeClassifier.get_params"]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[909, "sklearn.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[909, "sklearn.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[909, "sklearn.tree.DecisionTreeClassifier.predict_proba"]], "score() (sklearn.tree.decisiontreeclassifier method)": [[909, "sklearn.tree.DecisionTreeClassifier.score"]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[909, "sklearn.tree.DecisionTreeClassifier.set_fit_request"]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[909, "sklearn.tree.DecisionTreeClassifier.set_params"]], "set_predict_proba_request() (sklearn.tree.decisiontreeclassifier method)": [[909, "sklearn.tree.DecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sklearn.tree.decisiontreeclassifier method)": [[909, "sklearn.tree.DecisionTreeClassifier.set_predict_request"]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[909, "sklearn.tree.DecisionTreeClassifier.set_score_request"]], "decisiontreeregressor (class in sklearn.tree)": [[910, "sklearn.tree.DecisionTreeRegressor"]], "apply() (sklearn.tree.decisiontreeregressor method)": [[910, "sklearn.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[910, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[910, "sklearn.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[910, "sklearn.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.decisiontreeregressor method)": [[910, "sklearn.tree.DecisionTreeRegressor.fit"]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[910, "sklearn.tree.DecisionTreeRegressor.get_depth"]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[910, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[910, "sklearn.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[910, "sklearn.tree.DecisionTreeRegressor.get_params"]], "predict() (sklearn.tree.decisiontreeregressor method)": [[910, "sklearn.tree.DecisionTreeRegressor.predict"]], "score() (sklearn.tree.decisiontreeregressor method)": [[910, "sklearn.tree.DecisionTreeRegressor.score"]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[910, "sklearn.tree.DecisionTreeRegressor.set_fit_request"]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[910, "sklearn.tree.DecisionTreeRegressor.set_params"]], "set_predict_request() (sklearn.tree.decisiontreeregressor method)": [[910, "sklearn.tree.DecisionTreeRegressor.set_predict_request"]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[910, "sklearn.tree.DecisionTreeRegressor.set_score_request"]], "extratreeclassifier (class in sklearn.tree)": [[911, "sklearn.tree.ExtraTreeClassifier"]], "apply() (sklearn.tree.extratreeclassifier method)": [[911, "sklearn.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[911, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[911, "sklearn.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[911, "sklearn.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.extratreeclassifier method)": [[911, "sklearn.tree.ExtraTreeClassifier.fit"]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[911, "sklearn.tree.ExtraTreeClassifier.get_depth"]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[911, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[911, "sklearn.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.extratreeclassifier method)": [[911, "sklearn.tree.ExtraTreeClassifier.get_params"]], "predict() (sklearn.tree.extratreeclassifier method)": [[911, "sklearn.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[911, "sklearn.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[911, "sklearn.tree.ExtraTreeClassifier.predict_proba"]], "score() (sklearn.tree.extratreeclassifier method)": [[911, "sklearn.tree.ExtraTreeClassifier.score"]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[911, "sklearn.tree.ExtraTreeClassifier.set_fit_request"]], "set_params() (sklearn.tree.extratreeclassifier method)": [[911, "sklearn.tree.ExtraTreeClassifier.set_params"]], "set_predict_proba_request() (sklearn.tree.extratreeclassifier method)": [[911, "sklearn.tree.ExtraTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sklearn.tree.extratreeclassifier method)": [[911, "sklearn.tree.ExtraTreeClassifier.set_predict_request"]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[911, "sklearn.tree.ExtraTreeClassifier.set_score_request"]], "extratreeregressor (class in sklearn.tree)": [[912, "sklearn.tree.ExtraTreeRegressor"]], "apply() (sklearn.tree.extratreeregressor method)": [[912, "sklearn.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[912, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeregressor method)": [[912, "sklearn.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[912, "sklearn.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.extratreeregressor method)": [[912, "sklearn.tree.ExtraTreeRegressor.fit"]], "get_depth() (sklearn.tree.extratreeregressor method)": [[912, "sklearn.tree.ExtraTreeRegressor.get_depth"]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[912, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[912, "sklearn.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.extratreeregressor method)": [[912, "sklearn.tree.ExtraTreeRegressor.get_params"]], "predict() (sklearn.tree.extratreeregressor method)": [[912, "sklearn.tree.ExtraTreeRegressor.predict"]], "score() (sklearn.tree.extratreeregressor method)": [[912, "sklearn.tree.ExtraTreeRegressor.score"]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[912, "sklearn.tree.ExtraTreeRegressor.set_fit_request"]], "set_params() (sklearn.tree.extratreeregressor method)": [[912, "sklearn.tree.ExtraTreeRegressor.set_params"]], "set_predict_request() (sklearn.tree.extratreeregressor method)": [[912, "sklearn.tree.ExtraTreeRegressor.set_predict_request"]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[912, "sklearn.tree.ExtraTreeRegressor.set_score_request"]], "export_graphviz() (in module sklearn.tree)": [[913, "sklearn.tree.export_graphviz"]], "export_text() (in module sklearn.tree)": [[914, "sklearn.tree.export_text"]], "plot_tree() (in module sklearn.tree)": [[915, "sklearn.tree.plot_tree"]], "bunch (class in sklearn.utils)": [[916, "sklearn.utils.Bunch"]], "clear() (sklearn.utils.bunch method)": [[916, "sklearn.utils.Bunch.clear"]], "copy() (sklearn.utils.bunch method)": [[916, "sklearn.utils.Bunch.copy"]], "fromkeys() (sklearn.utils.bunch method)": [[916, "sklearn.utils.Bunch.fromkeys"]], "get() (sklearn.utils.bunch method)": [[916, "sklearn.utils.Bunch.get"]], "items() (sklearn.utils.bunch method)": [[916, "sklearn.utils.Bunch.items"]], "keys() (sklearn.utils.bunch method)": [[916, "sklearn.utils.Bunch.keys"]], "pop() (sklearn.utils.bunch method)": [[916, "sklearn.utils.Bunch.pop"]], "popitem() (sklearn.utils.bunch method)": [[916, "sklearn.utils.Bunch.popitem"]], "setdefault() (sklearn.utils.bunch method)": [[916, "sklearn.utils.Bunch.setdefault"]], "update() (sklearn.utils.bunch method)": [[916, "sklearn.utils.Bunch.update"]], "values() (sklearn.utils.bunch method)": [[916, "sklearn.utils.Bunch.values"]], "_safe_indexing() (in module sklearn.utils)": [[917, "sklearn.utils._safe_indexing"]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[918, "sklearn.utils.arrayfuncs.min_pos"]], "as_float_array() (in module sklearn.utils)": [[919, "sklearn.utils.as_float_array"]], "assert_all_finite() (in module sklearn.utils)": [[920, "sklearn.utils.assert_all_finite"]], "check_x_y() (in module sklearn.utils)": [[921, "sklearn.utils.check_X_y"]], "check_array() (in module sklearn.utils)": [[922, "sklearn.utils.check_array"]], "check_consistent_length() (in module sklearn.utils)": [[923, "sklearn.utils.check_consistent_length"]], "check_random_state() (in module sklearn.utils)": [[924, "sklearn.utils.check_random_state"]], "check_scalar() (in module sklearn.utils)": [[925, "sklearn.utils.check_scalar"]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[926, "sklearn.utils.class_weight.compute_class_weight"]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[927, "sklearn.utils.class_weight.compute_sample_weight"]], "deprecated() (in module sklearn.utils)": [[928, "sklearn.utils.deprecated"]], "all_displays() (in module sklearn.utils.discovery)": [[929, "sklearn.utils.discovery.all_displays"]], "all_estimators() (in module sklearn.utils.discovery)": [[930, "sklearn.utils.discovery.all_estimators"]], "all_functions() (in module sklearn.utils.discovery)": [[931, "sklearn.utils.discovery.all_functions"]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[932, "sklearn.utils.estimator_checks.check_estimator"]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[933, "sklearn.utils.estimator_checks.parametrize_with_checks"]], "estimator_html_repr() (in module sklearn.utils)": [[934, "sklearn.utils.estimator_html_repr"]], "density() (in module sklearn.utils.extmath)": [[935, "sklearn.utils.extmath.density"]], "fast_logdet() (in module sklearn.utils.extmath)": [[936, "sklearn.utils.extmath.fast_logdet"]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[937, "sklearn.utils.extmath.randomized_range_finder"]], "randomized_svd() (in module sklearn.utils.extmath)": [[938, "sklearn.utils.extmath.randomized_svd"]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[939, "sklearn.utils.extmath.safe_sparse_dot"]], "weighted_mode() (in module sklearn.utils.extmath)": [[940, "sklearn.utils.extmath.weighted_mode"]], "gen_batches() (in module sklearn.utils)": [[941, "sklearn.utils.gen_batches"]], "gen_even_slices() (in module sklearn.utils)": [[942, "sklearn.utils.gen_even_slices"]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[943, "sklearn.utils.graph.single_source_shortest_path_length"]], "indexable() (in module sklearn.utils)": [[944, "sklearn.utils.indexable"]], "metadatarequest (class in sklearn.utils.metadata_routing)": [[945, "sklearn.utils.metadata_routing.MetadataRequest"]], "consumes() (sklearn.utils.metadata_routing.metadatarequest method)": [[945, "sklearn.utils.metadata_routing.MetadataRequest.consumes"]], "metadatarouter (class in sklearn.utils.metadata_routing)": [[946, "sklearn.utils.metadata_routing.MetadataRouter"]], "add() (sklearn.utils.metadata_routing.metadatarouter method)": [[946, "sklearn.utils.metadata_routing.MetadataRouter.add"]], "add_self_request() (sklearn.utils.metadata_routing.metadatarouter method)": [[946, "sklearn.utils.metadata_routing.MetadataRouter.add_self_request"]], "consumes() (sklearn.utils.metadata_routing.metadatarouter method)": [[946, "sklearn.utils.metadata_routing.MetadataRouter.consumes"]], "route_params() (sklearn.utils.metadata_routing.metadatarouter method)": [[946, "sklearn.utils.metadata_routing.MetadataRouter.route_params"]], "validate_metadata() (sklearn.utils.metadata_routing.metadatarouter method)": [[946, "sklearn.utils.metadata_routing.MetadataRouter.validate_metadata"]], "methodmapping (class in sklearn.utils.metadata_routing)": [[947, "sklearn.utils.metadata_routing.MethodMapping"]], "add() (sklearn.utils.metadata_routing.methodmapping method)": [[947, "sklearn.utils.metadata_routing.MethodMapping.add"]], "from_str() (sklearn.utils.metadata_routing.methodmapping class method)": [[947, "sklearn.utils.metadata_routing.MethodMapping.from_str"]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[948, "sklearn.utils.metadata_routing.get_routing_for_object"]], "process_routing() (in module sklearn.utils.metadata_routing)": [[949, "sklearn.utils.metadata_routing.process_routing"]], "available_if() (in module sklearn.utils.metaestimators)": [[950, "sklearn.utils.metaestimators.available_if"]], "is_multilabel() (in module sklearn.utils.multiclass)": [[951, "sklearn.utils.multiclass.is_multilabel"]], "type_of_target() (in module sklearn.utils.multiclass)": [[952, "sklearn.utils.multiclass.type_of_target"]], "unique_labels() (in module sklearn.utils.multiclass)": [[953, "sklearn.utils.multiclass.unique_labels"]], "murmurhash3_32() (in module sklearn.utils)": [[954, "sklearn.utils.murmurhash3_32"]], "parallel (class in sklearn.utils.parallel)": [[955, "sklearn.utils.parallel.Parallel"]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[955, "sklearn.utils.parallel.Parallel.dispatch_next"]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[955, "sklearn.utils.parallel.Parallel.dispatch_one_batch"]], "format() (sklearn.utils.parallel.parallel method)": [[955, "sklearn.utils.parallel.Parallel.format"]], "print_progress() (sklearn.utils.parallel.parallel method)": [[955, "sklearn.utils.parallel.Parallel.print_progress"]], "delayed() (in module sklearn.utils.parallel)": [[956, "sklearn.utils.parallel.delayed"]], "parallel_backend() (in module sklearn.utils)": [[957, "sklearn.utils.parallel_backend"]], "sample_without_replacement() (in module sklearn.utils.random)": [[958, "sklearn.utils.random.sample_without_replacement"]], "register_parallel_backend() (in module sklearn.utils)": [[959, "sklearn.utils.register_parallel_backend"]], "resample() (in module sklearn.utils)": [[960, "sklearn.utils.resample"]], "safe_mask() (in module sklearn.utils)": [[961, "sklearn.utils.safe_mask"]], "safe_sqr() (in module sklearn.utils)": [[962, "sklearn.utils.safe_sqr"]], "shuffle() (in module sklearn.utils)": [[963, "sklearn.utils.shuffle"]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[964, "sklearn.utils.sparsefuncs.incr_mean_variance_axis"]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[965, "sklearn.utils.sparsefuncs.inplace_column_scale"]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[966, "sklearn.utils.sparsefuncs.inplace_csr_column_scale"]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[967, "sklearn.utils.sparsefuncs.inplace_row_scale"]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[968, "sklearn.utils.sparsefuncs.inplace_swap_column"]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[969, "sklearn.utils.sparsefuncs.inplace_swap_row"]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[970, "sklearn.utils.sparsefuncs.mean_variance_axis"]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[971, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1"]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[972, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2"]], "check_is_fitted() (in module sklearn.utils.validation)": [[973, "sklearn.utils.validation.check_is_fitted"]], "check_memory() (in module sklearn.utils.validation)": [[974, "sklearn.utils.validation.check_memory"]], "check_symmetric() (in module sklearn.utils.validation)": [[975, "sklearn.utils.validation.check_symmetric"]], "column_or_1d() (in module sklearn.utils.validation)": [[976, "sklearn.utils.validation.column_or_1d"]], "has_fit_parameter() (in module sklearn.utils.validation)": [[977, "sklearn.utils.validation.has_fit_parameter"]]}})